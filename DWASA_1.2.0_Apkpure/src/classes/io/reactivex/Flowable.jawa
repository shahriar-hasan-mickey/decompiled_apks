record `io.reactivex.Flowable` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.reactivestreams.Publisher` @kind interface {
}
global `int` `@@io.reactivex.Flowable.BUFFER_SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/Flowable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3d8448.  v0:= "rx2.buffer-size" @kind object;
  #L3d844c.  v1:= 128I;
  #L3d8450.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L3d8456.  v0:= temp @kind object;
  #L3d8458.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3d845e.  v0:= temp;
  #L3d8460.  v1:= 1I;
  #L3d8462.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3d8468.  v0:= temp;
  #L3d846a.  `@@io.reactivex.Flowable.BUFFER_SIZE` @type ^`int` := v0;
  #L3d846e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.Flowable` v0 @kind this) @signature `Lio/reactivex/Flowable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3d8480.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d8486.  return @kind void;
}
procedure `io.reactivex.Flowable` `amb`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Flowable;.amb:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d1aa0.  v0:= "sources is null" @kind object;
  #L3d1aa4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1aaa.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAmb`;
  #L3d1aae.  v1:= 0I;
  #L3d1ab0.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;)V` @kind direct;
  #L3d1ab6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d1abc.  v2:= temp @kind object;
  #L3d1abe.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `ambArray`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.ambArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d1ad0.  v0:= "sources is null" @kind object;
  #L3d1ad4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1ada.  v0:= length @variable v2;
  #L3d1adc.  if v0 != 0 then goto L3d1aea;
  #L3d1ae0.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d1ae6.  v2:= temp @kind object;
  #L3d1ae8.  return v2 @kind object;
  #L3d1aea.  v1:= 1I;
  #L3d1aec.  if v0 != v1 then goto L3d1b00;
  #L3d1af0.  v0:= 0I;
  #L3d1af2.  v2:= v2[v0] @kind object;
  #L3d1af6.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d1afc.  v2:= temp @kind object;
  #L3d1afe.  return v2 @kind object;
  #L3d1b00.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAmb`;
  #L3d1b04.  v1:= 0I;
  #L3d1b06.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;)V` @kind direct;
  #L3d1b0c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d1b12.  v2:= temp @kind object;
  #L3d1b14.  return v2 @kind object;
}
procedure `int` `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d18cc.  v0:= `@@io.reactivex.Flowable.BUFFER_SIZE` @type ^`int`;
  #L3d18d0.  return v0;
}
procedure `io.reactivex.Flowable` `combineLatest`(`io.reactivex.functions.Function` v1 @kind object, `org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d1fb0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d1fb6.  v0:= temp;
  #L3d1fb8.  call temp:= `combineLatest`(v2, v1, v0) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3d1fbe.  v1:= temp @kind object;
  #L3d1fc0.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d1fd4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d1fda.  v0:= temp;
  #L3d1fdc.  call temp:= `combineLatest`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3d1fe2.  v1:= temp @kind object;
  #L3d1fe4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatest:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d1ff8.  v0:= "sources is null" @kind object;
  #L3d1ffc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2002.  v0:= "combiner is null" @kind object;
  #L3d2006.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d200c.  v0:= "bufferSize" @kind object;
  #L3d2010.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2016.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L3d201a.  v1:= 0I;
  #L3d201c.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3d2022.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2028.  v2:= temp @kind object;
  #L3d202a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.BiFunction` v4 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d203c.  v0:= "source1 is null" @kind object;
  #L3d2040.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2046.  v0:= "source2 is null" @kind object;
  #L3d204a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2050.  call temp:= `toFunction`(v4) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3d2056.  v4:= temp @kind object;
  #L3d2058.  v0:= 2I;
  #L3d205a.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d205e.  v1:= 0I;
  #L3d2060.  v0[v1]:= v2 @kind object;
  #L3d2064.  v2:= 1I;
  #L3d2066.  v0[v2]:= v3 @kind object;
  #L3d206a.  call temp:= `combineLatest`(v4, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d2070.  v2:= temp @kind object;
  #L3d2072.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.Function3` v5 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function3;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2084.  v0:= "source1 is null" @kind object;
  #L3d2088.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d208e.  v0:= "source2 is null" @kind object;
  #L3d2092.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2098.  v0:= "source3 is null" @kind object;
  #L3d209c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d20a2.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L3d20a8.  v5:= temp @kind object;
  #L3d20aa.  v0:= 3I;
  #L3d20ac.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d20b0.  v1:= 0I;
  #L3d20b2.  v0[v1]:= v2 @kind object;
  #L3d20b6.  v2:= 1I;
  #L3d20b8.  v0[v2]:= v3 @kind object;
  #L3d20bc.  v2:= 2I;
  #L3d20be.  v0[v2]:= v4 @kind object;
  #L3d20c2.  call temp:= `combineLatest`(v5, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d20c8.  v2:= temp @kind object;
  #L3d20ca.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `io.reactivex.functions.Function4` v6 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function4;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d20dc.  v0:= "source1 is null" @kind object;
  #L3d20e0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d20e6.  v0:= "source2 is null" @kind object;
  #L3d20ea.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d20f0.  v0:= "source3 is null" @kind object;
  #L3d20f4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d20fa.  v0:= "source4 is null" @kind object;
  #L3d20fe.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2104.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L3d210a.  v6:= temp @kind object;
  #L3d210c.  v0:= 4I;
  #L3d210e.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d2112.  v1:= 0I;
  #L3d2114.  v0[v1]:= v2 @kind object;
  #L3d2118.  v2:= 1I;
  #L3d211a.  v0[v2]:= v3 @kind object;
  #L3d211e.  v2:= 2I;
  #L3d2120.  v0[v2]:= v4 @kind object;
  #L3d2124.  v2:= 3I;
  #L3d2126.  v0[v2]:= v5 @kind object;
  #L3d212a.  call temp:= `combineLatest`(v6, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d2130.  v2:= temp @kind object;
  #L3d2132.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `io.reactivex.functions.Function5` v7 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function5;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2144.  v0:= "source1 is null" @kind object;
  #L3d2148.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d214e.  v0:= "source2 is null" @kind object;
  #L3d2152.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2158.  v0:= "source3 is null" @kind object;
  #L3d215c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2162.  v0:= "source4 is null" @kind object;
  #L3d2166.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d216c.  v0:= "source5 is null" @kind object;
  #L3d2170.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2176.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L3d217c.  v7:= temp @kind object;
  #L3d217e.  v0:= 5I;
  #L3d2180.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d2184.  v1:= 0I;
  #L3d2186.  v0[v1]:= v2 @kind object;
  #L3d218a.  v2:= 1I;
  #L3d218c.  v0[v2]:= v3 @kind object;
  #L3d2190.  v2:= 2I;
  #L3d2192.  v0[v2]:= v4 @kind object;
  #L3d2196.  v2:= 3I;
  #L3d2198.  v0[v2]:= v5 @kind object;
  #L3d219c.  v2:= 4I;
  #L3d219e.  v0[v2]:= v6 @kind object;
  #L3d21a2.  call temp:= `combineLatest`(v7, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d21a8.  v2:= temp @kind object;
  #L3d21aa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `io.reactivex.functions.Function6` v8 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function6;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d21bc.  v0:= "source1 is null" @kind object;
  #L3d21c0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d21c6.  v0:= "source2 is null" @kind object;
  #L3d21ca.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d21d0.  v0:= "source3 is null" @kind object;
  #L3d21d4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d21da.  v0:= "source4 is null" @kind object;
  #L3d21de.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d21e4.  v0:= "source5 is null" @kind object;
  #L3d21e8.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d21ee.  v0:= "source6 is null" @kind object;
  #L3d21f2.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d21f8.  call temp:= `toFunction`(v8) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function6;)Lio/reactivex/functions/Function;` @kind static;
  #L3d21fe.  v8:= temp @kind object;
  #L3d2200.  v0:= 6I;
  #L3d2202.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d2206.  v1:= 0I;
  #L3d2208.  v0[v1]:= v2 @kind object;
  #L3d220c.  v2:= 1I;
  #L3d220e.  v0[v2]:= v3 @kind object;
  #L3d2212.  v2:= 2I;
  #L3d2214.  v0[v2]:= v4 @kind object;
  #L3d2218.  v2:= 3I;
  #L3d221a.  v0[v2]:= v5 @kind object;
  #L3d221e.  v2:= 4I;
  #L3d2220.  v0[v2]:= v6 @kind object;
  #L3d2224.  v2:= 5I;
  #L3d2226.  v0[v2]:= v7 @kind object;
  #L3d222a.  call temp:= `combineLatest`(v8, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d2230.  v2:= temp @kind object;
  #L3d2232.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function7` v9 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function7;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2244.  v0:= "source1 is null" @kind object;
  #L3d2248.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d224e.  v0:= "source2 is null" @kind object;
  #L3d2252.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2258.  v0:= "source3 is null" @kind object;
  #L3d225c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2262.  v0:= "source4 is null" @kind object;
  #L3d2266.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d226c.  v0:= "source5 is null" @kind object;
  #L3d2270.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2276.  v0:= "source6 is null" @kind object;
  #L3d227a.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2280.  v0:= "source7 is null" @kind object;
  #L3d2284.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d228a.  call temp:= `toFunction`(v9) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function7;)Lio/reactivex/functions/Function;` @kind static;
  #L3d2290.  v9:= temp @kind object;
  #L3d2292.  v0:= 7I;
  #L3d2294.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d2298.  v1:= 0I;
  #L3d229a.  v0[v1]:= v2 @kind object;
  #L3d229e.  v2:= 1I;
  #L3d22a0.  v0[v2]:= v3 @kind object;
  #L3d22a4.  v2:= 2I;
  #L3d22a6.  v0[v2]:= v4 @kind object;
  #L3d22aa.  v2:= 3I;
  #L3d22ac.  v0[v2]:= v5 @kind object;
  #L3d22b0.  v2:= 4I;
  #L3d22b2.  v0[v2]:= v6 @kind object;
  #L3d22b6.  v2:= 5I;
  #L3d22b8.  v0[v2]:= v7 @kind object;
  #L3d22bc.  v2:= 6I;
  #L3d22be.  v0[v2]:= v8 @kind object;
  #L3d22c2.  call temp:= `combineLatest`(v9, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d22c8.  v2:= temp @kind object;
  #L3d22ca.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `io.reactivex.functions.Function8` v10 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function8;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d22dc.  v0:= "source1 is null" @kind object;
  #L3d22e0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d22e6.  v0:= "source2 is null" @kind object;
  #L3d22ea.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d22f0.  v0:= "source3 is null" @kind object;
  #L3d22f4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d22fa.  v0:= "source4 is null" @kind object;
  #L3d22fe.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2304.  v0:= "source5 is null" @kind object;
  #L3d2308.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d230e.  v0:= "source6 is null" @kind object;
  #L3d2312.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2318.  v0:= "source7 is null" @kind object;
  #L3d231c.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2322.  v0:= "source8 is null" @kind object;
  #L3d2326.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d232c.  call temp:= `toFunction`(v10) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function8;)Lio/reactivex/functions/Function;` @kind static;
  #L3d2332.  v10:= temp @kind object;
  #L3d2334.  v0:= 8I;
  #L3d2338.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d233c.  v1:= 0I;
  #L3d233e.  v0[v1]:= v2 @kind object;
  #L3d2342.  v2:= 1I;
  #L3d2344.  v0[v2]:= v3 @kind object;
  #L3d2348.  v2:= 2I;
  #L3d234a.  v0[v2]:= v4 @kind object;
  #L3d234e.  v2:= 3I;
  #L3d2350.  v0[v2]:= v5 @kind object;
  #L3d2354.  v2:= 4I;
  #L3d2356.  v0[v2]:= v6 @kind object;
  #L3d235a.  v2:= 5I;
  #L3d235c.  v0[v2]:= v7 @kind object;
  #L3d2360.  v2:= 6I;
  #L3d2362.  v0[v2]:= v8 @kind object;
  #L3d2366.  v2:= 7I;
  #L3d2368.  v0[v2]:= v9 @kind object;
  #L3d236c.  call temp:= `combineLatest`(v10, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d2372.  v2:= temp @kind object;
  #L3d2374.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `org.reactivestreams.Publisher` v10 @kind object, `io.reactivex.functions.Function9` v11 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function9;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2388.  v0:= "source1 is null" @kind object;
  #L3d238c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2392.  v0:= "source2 is null" @kind object;
  #L3d2396.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d239c.  v0:= "source3 is null" @kind object;
  #L3d23a0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d23a6.  v0:= "source4 is null" @kind object;
  #L3d23aa.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d23b0.  v0:= "source5 is null" @kind object;
  #L3d23b4.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d23ba.  v0:= "source6 is null" @kind object;
  #L3d23be.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d23c4.  v0:= "source7 is null" @kind object;
  #L3d23c8.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d23ce.  v0:= "source8 is null" @kind object;
  #L3d23d2.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d23d8.  v0:= "source9 is null" @kind object;
  #L3d23dc.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d23e2.  call temp:= `toFunction`(v11) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function9;)Lio/reactivex/functions/Function;` @kind static;
  #L3d23e8.  v11:= temp @kind object;
  #L3d23ea.  v0:= 9I;
  #L3d23ee.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d23f2.  v1:= 0I;
  #L3d23f4.  v0[v1]:= v2 @kind object;
  #L3d23f8.  v2:= 1I;
  #L3d23fa.  v0[v2]:= v3 @kind object;
  #L3d23fe.  v2:= 2I;
  #L3d2400.  v0[v2]:= v4 @kind object;
  #L3d2404.  v2:= 3I;
  #L3d2406.  v0[v2]:= v5 @kind object;
  #L3d240a.  v2:= 4I;
  #L3d240c.  v0[v2]:= v6 @kind object;
  #L3d2410.  v2:= 5I;
  #L3d2412.  v0[v2]:= v7 @kind object;
  #L3d2416.  v2:= 6I;
  #L3d2418.  v0[v2]:= v8 @kind object;
  #L3d241c.  v2:= 7I;
  #L3d241e.  v0[v2]:= v9 @kind object;
  #L3d2422.  v2:= 8I;
  #L3d2426.  v0[v2]:= v10 @kind object;
  #L3d242a.  call temp:= `combineLatest`(v11, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d2430.  v2:= temp @kind object;
  #L3d2432.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher`[] v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d2444.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d244a.  v0:= temp;
  #L3d244c.  call temp:= `combineLatest`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3d2452.  v1:= temp @kind object;
  #L3d2454.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher`[] v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2468.  v0:= "sources is null" @kind object;
  #L3d246c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2472.  v0:= length @variable v2;
  #L3d2474.  if v0 != 0 then goto L3d2482;
  #L3d2478.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d247e.  v2:= temp @kind object;
  #L3d2480.  return v2 @kind object;
  #L3d2482.  v0:= "combiner is null" @kind object;
  #L3d2486.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d248c.  v0:= "bufferSize" @kind object;
  #L3d2490.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2496.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L3d249a.  v1:= 0I;
  #L3d249c.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3d24a2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d24a8.  v2:= temp @kind object;
  #L3d24aa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`io.reactivex.functions.Function` v0 @kind object, `int` v1 , `org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Lio/reactivex/functions/Function;I[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3d24bc.  call temp:= `combineLatestDelayError`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3d24c2.  v0:= temp @kind object;
  #L3d24c4.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`io.reactivex.functions.Function` v1 @kind object, `org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d24d8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d24de.  v0:= temp;
  #L3d24e0.  call temp:= `combineLatestDelayError`(v2, v1, v0) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3d24e6.  v1:= temp @kind object;
  #L3d24e8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d24fc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d2502.  v0:= temp;
  #L3d2504.  call temp:= `combineLatestDelayError`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3d250a.  v1:= temp @kind object;
  #L3d250c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2520.  v0:= "sources is null" @kind object;
  #L3d2524.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d252a.  v0:= "combiner is null" @kind object;
  #L3d252e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2534.  v0:= "bufferSize" @kind object;
  #L3d2538.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d253e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L3d2542.  v1:= 1I;
  #L3d2544.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3d254a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2550.  v2:= temp @kind object;
  #L3d2552.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`org.reactivestreams.Publisher`[] v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d2564.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d256a.  v0:= temp;
  #L3d256c.  call temp:= `combineLatestDelayError`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L3d2572.  v1:= temp @kind object;
  #L3d2574.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`org.reactivestreams.Publisher`[] v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2588.  v0:= "sources is null" @kind object;
  #L3d258c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2592.  v0:= "combiner is null" @kind object;
  #L3d2596.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d259c.  v0:= "bufferSize" @kind object;
  #L3d25a0.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d25a6.  v0:= length @variable v2;
  #L3d25a8.  if v0 != 0 then goto L3d25b6;
  #L3d25ac.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d25b2.  v2:= temp @kind object;
  #L3d25b4.  return v2 @kind object;
  #L3d25b6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L3d25ba.  v1:= 1I;
  #L3d25bc.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3d25c2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d25c8.  v2:= temp @kind object;
  #L3d25ca.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`java.lang.Iterable` v3 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d2610.  v0:= "sources is null" @kind object;
  #L3d2614.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d261a.  call temp:= `fromIterable`(v3) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2620.  v3:= temp @kind object;
  #L3d2622.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d2628.  v0:= temp @kind object;
  #L3d262a.  v1:= 2I;
  #L3d262c.  v2:= 0I;
  #L3d262e.  call temp:= `concatMapDelayError`(v3, v0, v1, v2) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2634.  v3:= temp @kind object;
  #L3d2636.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d2648.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d264e.  v0:= temp;
  #L3d2650.  call temp:= `concat`(v1, v0) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3d2656.  v1:= temp @kind object;
  #L3d2658.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d266c.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d2672.  v1:= temp @kind object;
  #L3d2674.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d267a.  v0:= temp @kind object;
  #L3d267c.  call temp:= `concatMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2682.  v1:= temp @kind object;
  #L3d2684.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2698.  v0:= "source1 is null" @kind object;
  #L3d269c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d26a2.  v0:= "source2 is null" @kind object;
  #L3d26a6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d26ac.  v0:= 2I;
  #L3d26ae.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d26b2.  v1:= 0I;
  #L3d26b4.  v0[v1]:= v2 @kind object;
  #L3d26b8.  v2:= 1I;
  #L3d26ba.  v0[v2]:= v3 @kind object;
  #L3d26be.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d26c4.  v2:= temp @kind object;
  #L3d26c6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d26d8.  v0:= "source1 is null" @kind object;
  #L3d26dc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d26e2.  v0:= "source2 is null" @kind object;
  #L3d26e6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d26ec.  v0:= "source3 is null" @kind object;
  #L3d26f0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d26f6.  v0:= 3I;
  #L3d26f8.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d26fc.  v1:= 0I;
  #L3d26fe.  v0[v1]:= v2 @kind object;
  #L3d2702.  v2:= 1I;
  #L3d2704.  v0[v2]:= v3 @kind object;
  #L3d2708.  v2:= 2I;
  #L3d270a.  v0[v2]:= v4 @kind object;
  #L3d270e.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d2714.  v2:= temp @kind object;
  #L3d2716.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2728.  v0:= "source1 is null" @kind object;
  #L3d272c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2732.  v0:= "source2 is null" @kind object;
  #L3d2736.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d273c.  v0:= "source3 is null" @kind object;
  #L3d2740.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2746.  v0:= "source4 is null" @kind object;
  #L3d274a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2750.  v0:= 4I;
  #L3d2752.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d2756.  v1:= 0I;
  #L3d2758.  v0[v1]:= v2 @kind object;
  #L3d275c.  v2:= 1I;
  #L3d275e.  v0[v2]:= v3 @kind object;
  #L3d2762.  v2:= 2I;
  #L3d2764.  v0[v2]:= v4 @kind object;
  #L3d2768.  v2:= 3I;
  #L3d276a.  v0[v2]:= v5 @kind object;
  #L3d276e.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d2774.  v2:= temp @kind object;
  #L3d2776.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArray`(`org.reactivestreams.Publisher`[] v3 @kind object) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d2788.  v0:= length @variable v3;
  #L3d278a.  if v0 != 0 then goto L3d2798;
  #L3d278e.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d2794.  v3:= temp @kind object;
  #L3d2796.  return v3 @kind object;
  #L3d2798.  v0:= length @variable v3;
  #L3d279a.  v1:= 1I;
  #L3d279c.  v2:= 0I;
  #L3d279e.  if v0 != v1 then goto L3d27b0;
  #L3d27a2.  v3:= v3[v2] @kind object;
  #L3d27a6.  call temp:= `fromPublisher`(v3) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d27ac.  v3:= temp @kind object;
  #L3d27ae.  return v3 @kind object;
  #L3d27b0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatArray`;
  #L3d27b4.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray;.<init>:([Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L3d27ba.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d27c0.  v3:= temp @kind object;
  #L3d27c2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayDelayError`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayDelayError:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d27d4.  v0:= length @variable v2;
  #L3d27d6.  if v0 != 0 then goto L3d27e4;
  #L3d27da.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d27e0.  v2:= temp @kind object;
  #L3d27e2.  return v2 @kind object;
  #L3d27e4.  v0:= length @variable v2;
  #L3d27e6.  v1:= 1I;
  #L3d27e8.  if v0 != v1 then goto L3d27fc;
  #L3d27ec.  v0:= 0I;
  #L3d27ee.  v2:= v2[v0] @kind object;
  #L3d27f2.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d27f8.  v2:= temp @kind object;
  #L3d27fa.  return v2 @kind object;
  #L3d27fc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatArray`;
  #L3d2800.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray;.<init>:([Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L3d2806.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d280c.  v2:= temp @kind object;
  #L3d280e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEager`(`int` v7 , `int` v8 , `org.reactivestreams.Publisher`[] v9 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayEager:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d2820.  v0:= "sources is null" @kind object;
  #L3d2824.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d282a.  v0:= "maxConcurrency" @kind object;
  #L3d282e.  call temp:= `verifyPositive`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2834.  v0:= "prefetch" @kind object;
  #L3d2838.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d283e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L3d2842.  v2:= new `io.reactivex.internal.operators.flowable.FlowableFromArray`;
  #L3d2846.  call `<init>`(v2, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L3d284c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d2852.  v3:= temp @kind object;
  #L3d2854.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2858.  v1:= v0 @kind object;
  #L3d285a.  v4:= v7;
  #L3d285c.  v5:= v8;
  #L3d285e.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3d2864.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d286a.  v7:= temp @kind object;
  #L3d286c.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEager`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayEager:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2880.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d2886.  v0:= temp;
  #L3d2888.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d288e.  v1:= temp;
  #L3d2890.  call temp:= `concatArrayEager`(v0, v1, v2) @signature `Lio/reactivex/Flowable;.concatArrayEager:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d2896.  v2:= temp @kind object;
  #L3d2898.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEagerDelayError`(`int` v2 , `int` v3 , `org.reactivestreams.Publisher`[] v4 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayEagerDelayError:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d28ac.  call temp:= `fromArray`(v4) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d28b2.  v4:= temp @kind object;
  #L3d28b4.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d28ba.  v0:= temp @kind object;
  #L3d28bc.  v1:= 1I;
  #L3d28be.  call temp:= `concatMapEagerDelayError`(v4, v0, v2, v3, v1) @signature `Lio/reactivex/Flowable;.concatMapEagerDelayError:(Lio/reactivex/functions/Function;IIZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d28c4.  v2:= temp @kind object;
  #L3d28c6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEagerDelayError`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayEagerDelayError:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d28d8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d28de.  v0:= temp;
  #L3d28e0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d28e6.  v1:= temp;
  #L3d28e8.  call temp:= `concatArrayEagerDelayError`(v0, v1, v2) @signature `Lio/reactivex/Flowable;.concatArrayEagerDelayError:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d28ee.  v2:= temp @kind object;
  #L3d28f0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Flowable;.concatDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d2904.  v0:= "sources is null" @kind object;
  #L3d2908.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d290e.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2914.  v1:= temp @kind object;
  #L3d2916.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d291c.  v0:= temp @kind object;
  #L3d291e.  call temp:= `concatMapDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2924.  v1:= temp @kind object;
  #L3d2926.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2938.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d293e.  v0:= temp;
  #L3d2940.  v1:= 1I;
  #L3d2942.  call temp:= `concatDelayError`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.concatDelayError:(Lorg/reactivestreams/Publisher;IZ)Lio/reactivex/Flowable;` @kind static;
  #L3d2948.  v2:= temp @kind object;
  #L3d294a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/Flowable;.concatDelayError:(Lorg/reactivestreams/Publisher;IZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d295c.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d2962.  v1:= temp @kind object;
  #L3d2964.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d296a.  v0:= temp @kind object;
  #L3d296c.  call temp:= `concatMapDelayError`(v1, v0, v2, v3) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2972.  v1:= temp @kind object;
  #L3d2974.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatEager:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2988.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d298e.  v0:= temp;
  #L3d2990.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d2996.  v1:= temp;
  #L3d2998.  call temp:= `concatEager`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.concatEager:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @kind static;
  #L3d299e.  v2:= temp @kind object;
  #L3d29a0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`java.lang.Iterable` v7 @kind object, `int` v8 , `int` v9 ) @signature `Lio/reactivex/Flowable;.concatEager:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d29b4.  v0:= "sources is null" @kind object;
  #L3d29b8.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d29be.  v0:= "maxConcurrency" @kind object;
  #L3d29c2.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d29c8.  v0:= "prefetch" @kind object;
  #L3d29cc.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d29d2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L3d29d6.  v2:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable`;
  #L3d29da.  call `<init>`(v2, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L3d29e0.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d29e6.  v3:= temp @kind object;
  #L3d29e8.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d29ec.  v1:= v0 @kind object;
  #L3d29ee.  v4:= v8;
  #L3d29f0.  v5:= v9;
  #L3d29f2.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3d29f8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d29fe.  v7:= temp @kind object;
  #L3d2a00.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatEager:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d2a14.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d2a1a.  v0:= temp;
  #L3d2a1c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d2a22.  v1:= temp;
  #L3d2a24.  call temp:= `concatEager`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.concatEager:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/Flowable;` @kind static;
  #L3d2a2a.  v2:= temp @kind object;
  #L3d2a2c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`org.reactivestreams.Publisher` v7 @kind object, `int` v8 , `int` v9 ) @signature `Lio/reactivex/Flowable;.concatEager:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d2a40.  v0:= "sources is null" @kind object;
  #L3d2a44.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2a4a.  v0:= "maxConcurrency" @kind object;
  #L3d2a4e.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2a54.  v0:= "prefetch" @kind object;
  #L3d2a58.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2a5e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEagerPublisher`;
  #L3d2a62.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d2a68.  v3:= temp @kind object;
  #L3d2a6a.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2a6e.  v1:= v0 @kind object;
  #L3d2a70.  v2:= v7 @kind object;
  #L3d2a72.  v4:= v8;
  #L3d2a74.  v5:= v9;
  #L3d2a76.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEagerPublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3d2a7c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2a82.  v7:= temp @kind object;
  #L3d2a84.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `create`(`io.reactivex.FlowableOnSubscribe` v1 @kind object, `io.reactivex.BackpressureStrategy` v2 @kind object) @signature `Lio/reactivex/Flowable;.create:(Lio/reactivex/FlowableOnSubscribe;Lio/reactivex/BackpressureStrategy;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d2f78.  v0:= "source is null" @kind object;
  #L3d2f7c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2f82.  v0:= "mode is null" @kind object;
  #L3d2f86.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2f8c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate`;
  #L3d2f90.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate;.<init>:(Lio/reactivex/FlowableOnSubscribe;Lio/reactivex/BackpressureStrategy;)V` @kind direct;
  #L3d2f96.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2f9c.  v1:= temp @kind object;
  #L3d2f9e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `defer`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Flowable;.defer:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3074.  v0:= "supplier is null" @kind object;
  #L3d3078.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d307e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDefer`;
  #L3d3082.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDefer;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d3088.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d308e.  v1:= temp @kind object;
  #L3d3090.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `doOnEach`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Consumer` v8 @kind object, `io.reactivex.functions.Consumer` v9 @kind object, `io.reactivex.functions.Action` v10 @kind object, `io.reactivex.functions.Action` v11 @kind object) @signature `Lio/reactivex/Flowable;.doOnEach:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d34a0.  v0:= "onNext is null" @kind object;
  #L3d34a4.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d34aa.  v0:= "onError is null" @kind object;
  #L3d34ae.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d34b4.  v0:= "onComplete is null" @kind object;
  #L3d34b8.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d34be.  v0:= "onAfterTerminate is null" @kind object;
  #L3d34c2.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d34c8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoOnEach`;
  #L3d34cc.  v1:= v0 @kind object;
  #L3d34ce.  v2:= v7 @kind object;
  #L3d34d0.  v3:= v8 @kind object;
  #L3d34d2.  v4:= v9 @kind object;
  #L3d34d4.  v5:= v10 @kind object;
  #L3d34d6.  v6:= v11 @kind object;
  #L3d34d8.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d34de.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d34e4.  v8:= temp @kind object;
  #L3d34e6.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3650.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableEmpty.INSTANCE` @type ^`io.reactivex.Flowable` @kind object;
  #L3d3654.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d365a.  v0:= temp @kind object;
  #L3d365c.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `error`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/Flowable;.error:(Ljava/lang/Throwable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3670.  v0:= "throwable is null" @kind object;
  #L3d3674.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d367a.  call temp:= `justCallable`(v1) @signature `Lio/reactivex/internal/functions/Functions;.justCallable:(Ljava/lang/Object;)Ljava/util/concurrent/Callable;` @kind static;
  #L3d3680.  v1:= temp @kind object;
  #L3d3682.  call temp:= `error`(v1) @signature `Lio/reactivex/Flowable;.error:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3688.  v1:= temp @kind object;
  #L3d368a.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `error`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Flowable;.error:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d369c.  v0:= "errorSupplier is null" @kind object;
  #L3d36a0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d36a6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableError`;
  #L3d36aa.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableError;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d36b0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d36b6.  v1:= temp @kind object;
  #L3d36b8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromArray`(`java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d3b54.  v0:= "items is null" @kind object;
  #L3d3b58.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3b5e.  v0:= length @variable v2;
  #L3d3b60.  if v0 != 0 then goto L3d3b6e;
  #L3d3b64.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d3b6a.  v2:= temp @kind object;
  #L3d3b6c.  return v2 @kind object;
  #L3d3b6e.  v0:= length @variable v2;
  #L3d3b70.  v1:= 1I;
  #L3d3b72.  if v0 != v1 then goto L3d3b86;
  #L3d3b76.  v0:= 0I;
  #L3d3b78.  v2:= v2[v0] @kind object;
  #L3d3b7c.  call temp:= `just`(v2) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d3b82.  v2:= temp @kind object;
  #L3d3b84.  return v2 @kind object;
  #L3d3b86.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromArray`;
  #L3d3b8a.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L3d3b90.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3b96.  v2:= temp @kind object;
  #L3d3b98.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `fromCallable`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Flowable;.fromCallable:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3bac.  v0:= "supplier is null" @kind object;
  #L3d3bb0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3bb6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromCallable`;
  #L3d3bba.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d3bc0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3bc6.  v1:= temp @kind object;
  #L3d3bc8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d3bdc.  v0:= "future is null" @kind object;
  #L3d3be0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3be6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromFuture`;
  #L3d3bea.  v1:= 0L;
  #L3d3bee.  v3:= 0I;
  #L3d3bf0.  call `<init>`(v0, v4, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L3d3bf6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3bfc.  v4:= temp @kind object;
  #L3d3bfe.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3c3c.  v0:= "future is null" @kind object;
  #L3d3c40.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3c46.  v0:= "unit is null" @kind object;
  #L3d3c4a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3c50.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromFuture`;
  #L3d3c54.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L3d3c5a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3c60.  v1:= temp @kind object;
  #L3d3c62.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3c74.  v0:= "scheduler is null" @kind object;
  #L3d3c78.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3c7e.  call temp:= `fromFuture`(v1, v2, v4) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind static;
  #L3d3c84.  v1:= temp @kind object;
  #L3d3c86.  call temp:= `subscribeOn`(v1, v5) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3c8c.  v1:= temp @kind object;
  #L3d3c8e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3c10.  v0:= "scheduler is null" @kind object;
  #L3d3c14.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3c1a.  call temp:= `fromFuture`(v1) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;)Lio/reactivex/Flowable;` @kind static;
  #L3d3c20.  v1:= temp @kind object;
  #L3d3c22.  call temp:= `subscribeOn`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3c28.  v1:= temp @kind object;
  #L3d3c2a.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromIterable`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3ca0.  v0:= "source is null" @kind object;
  #L3d3ca4.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3caa.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable`;
  #L3d3cae.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L3d3cb4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3cba.  v1:= temp @kind object;
  #L3d3cbc.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromPublisher`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3cd0.  v0:= instanceof @variable v1 @type ^`io.reactivex.Flowable` @kind boolean;
  #L3d3cd4.  if v0 == 0 then goto L3d3ce6;
  #L3d3cd8.  v1:= (`io.reactivex.Flowable`) v1 @kind object;
  #L3d3cdc.  call temp:= `onAssembly`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3ce2.  v1:= temp @kind object;
  #L3d3ce4.  return v1 @kind object;
  #L3d3ce6.  v0:= "publisher is null" @kind object;
  #L3d3cea.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3cf0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromPublisher`;
  #L3d3cf4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d3cfa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3d00.  v1:= temp @kind object;
  #L3d3d02.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d3d14.  v0:= "generator is null" @kind object;
  #L3d3d18.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3d1e.  call temp:= `nullSupplier`() @signature `Lio/reactivex/internal/functions/Functions;.nullSupplier:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d3d24.  v0:= temp @kind object;
  #L3d3d26.  call temp:= `simpleGenerator`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.simpleGenerator:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/BiFunction;` @kind static;
  #L3d3d2c.  v2:= temp @kind object;
  #L3d3d2e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d3d34.  v1:= temp @kind object;
  #L3d3d36.  call temp:= `generate`(v0, v2, v1) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L3d3d3c.  v2:= temp @kind object;
  #L3d3d3e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiConsumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3d50.  v0:= "generator is null" @kind object;
  #L3d3d54.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3d5a.  call temp:= `simpleBiGenerator`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.simpleBiGenerator:(Lio/reactivex/functions/BiConsumer;)Lio/reactivex/functions/BiFunction;` @kind static;
  #L3d3d60.  v2:= temp @kind object;
  #L3d3d62.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d3d68.  v0:= temp @kind object;
  #L3d3d6a.  call temp:= `generate`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L3d3d70.  v1:= temp @kind object;
  #L3d3d72.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiConsumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3d84.  v0:= "generator is null" @kind object;
  #L3d3d88.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3d8e.  call temp:= `simpleBiGenerator`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.simpleBiGenerator:(Lio/reactivex/functions/BiConsumer;)Lio/reactivex/functions/BiFunction;` @kind static;
  #L3d3d94.  v2:= temp @kind object;
  #L3d3d96.  call temp:= `generate`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L3d3d9c.  v1:= temp @kind object;
  #L3d3d9e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3db0.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d3db6.  v0:= temp @kind object;
  #L3d3db8.  call temp:= `generate`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L3d3dbe.  v1:= temp @kind object;
  #L3d3dc0.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d3dd4.  v0:= "initialState is null" @kind object;
  #L3d3dd8.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3dde.  v0:= "generator is null" @kind object;
  #L3d3de2.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3de8.  v0:= "disposeState is null" @kind object;
  #L3d3dec.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3df2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGenerate`;
  #L3d3df6.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3d3dfc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3e02.  v1:= temp @kind object;
  #L3d3e04.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v6 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d402c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d4032.  v5:= temp @kind object;
  #L3d4034.  v0:= v6 @kind wide;
  #L3d4036.  v2:= v8 @kind wide;
  #L3d4038.  v4:= v10 @kind object;
  #L3d403a.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3d4040.  v6:= temp @kind object;
  #L3d4042.  return v6 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v8 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d4054.  v0:= "unit is null" @kind object;
  #L3d4058.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d405e.  v0:= "scheduler is null" @kind object;
  #L3d4062.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4068.  v0:= new `io.reactivex.internal.operators.flowable.FlowableInterval`;
  #L3d406c.  v1:= 0L;
  #L3d4070.  call temp:= `max`(v1, v8) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3d4076.  v8:= temp @kind wide;
  #L3d4078.  call temp:= `max`(v1, v10) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3d407e.  v4:= temp @kind wide;
  #L3d4080.  v1:= v0 @kind object;
  #L3d4082.  v2:= v8 @kind wide;
  #L3d4084.  v6:= v12 @kind object;
  #L3d4086.  v7:= v13 @kind object;
  #L3d4088.  call `<init>`(v1, v2, v4, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval;.<init>:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d408e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4094.  v8:= temp @kind object;
  #L3d4096.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d3fe0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d3fe6.  v5:= temp @kind object;
  #L3d3fe8.  v0:= v6 @kind wide;
  #L3d3fea.  v2:= v6 @kind wide;
  #L3d3fec.  v4:= v8 @kind object;
  #L3d3fee.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3d3ff4.  v6:= temp @kind object;
  #L3d3ff6.  return v6 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.Scheduler` v9 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d4008.  v0:= v6 @kind wide;
  #L3d400a.  v2:= v6 @kind wide;
  #L3d400c.  v4:= v8 @kind object;
  #L3d400e.  v5:= v9 @kind object;
  #L3d4010.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3d4016.  v6:= temp @kind object;
  #L3d4018.  return v6 @kind object;
}
procedure `io.reactivex.Flowable` `intervalRange`(`long` v10 , `long` v12 , `long` v14 , `long` v16 , `java.util.concurrent.TimeUnit` v18 @kind object) @signature `Lio/reactivex/Flowable;.intervalRange:(JJJJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3d40a8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d40ae.  v9:= temp @kind object;
  #L3d40b0.  v0:= v10 @kind wide;
  #L3d40b2.  v2:= v12 @kind wide;
  #L3d40b4.  v4:= v14 @kind wide;
  #L3d40b6.  v6:= v16 @kind wide;
  #L3d40ba.  v8:= v18 @kind object;
  #L3d40be.  call temp:= `intervalRange`(v0, v2, v4, v6, v8, v9) @signature `Lio/reactivex/Flowable;.intervalRange:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3d40c4.  v0:= temp @kind object;
  #L3d40c6.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `intervalRange`(`long` v16 , `long` v18 , `long` v20 , `long` v22 , `java.util.concurrent.TimeUnit` v24 @kind object, `io.reactivex.Scheduler` v25 @kind object) @signature `Lio/reactivex/Flowable;.intervalRange:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L3d40d8.  v0:= v18 @kind wide;
  #L3d40dc.  v2:= v20 @kind wide;
  #L3d40e0.  v9:= v24 @kind object;
  #L3d40e4.  v10:= v25 @kind object;
  #L3d40e8.  v4:= 0L;
  #L3d40ec.  v6:= lcmp(v0, v4);
  #L3d40f0.  if v6 < 0 then goto L3d418a;
  #L3d40f4.  v6:= lcmp(v0, v4);
  #L3d40f8.  if v6 != 0 then goto L3d410e;
  #L3d40fc.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d4102.  v0:= temp @kind object;
  #L3d4104.  call temp:= `delay`(v0, v2, v9, v10) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d410a.  v0:= temp @kind object;
  #L3d410c.  return v0 @kind object;
  #L3d410e.  v6:= 1L;
  #L3d4112.  v0:= v0 - v6 @kind long;
  #L3d4114.  v6:= v16 + v0 @kind long;
  #L3d4118.  v0:= lcmp(v16, v4);
  #L3d411c.  if v0 <= 0 then goto L3d413a;
  #L3d4120.  v0:= lcmp(v6, v4);
  #L3d4124.  if v0 < 0 then goto L3d412a;
  #L3d4128.  goto L3d413a;
  #L3d412a.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d412e.  v1:= "Overflow! start + count is bigger than Long.MAX_VALUE" @kind object;
  #L3d4132.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4138.  throw v0;
  #L3d413a.  v0:= "unit is null" @kind object;
  #L3d413e.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4144.  v0:= "scheduler is null" @kind object;
  #L3d4148.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d414e.  v11:= new `io.reactivex.internal.operators.flowable.FlowableIntervalRange`;
  #L3d4152.  call temp:= `max`(v4, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3d4158.  v12:= temp @kind wide;
  #L3d415a.  v0:= v22 @kind wide;
  #L3d415e.  call temp:= `max`(v4, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3d4164.  v14:= temp @kind wide;
  #L3d4166.  v0:= v11 @kind object;
  #L3d4168.  v1:= v16 @kind wide;
  #L3d416c.  v3:= v6 @kind wide;
  #L3d416e.  v5:= v12 @kind wide;
  #L3d4170.  v7:= v14 @kind wide;
  #L3d4172.  v9:= v24 @kind object;
  #L3d4176.  v10:= v25 @kind object;
  #L3d417a.  call `<init>`(v0, v1, v3, v5, v7, v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange;.<init>:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d4180.  call temp:= `onAssembly`(v11) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4186.  v0:= temp @kind object;
  #L3d4188.  return v0 @kind object;
  #L3d418a.  v2:= new `java.lang.IllegalArgumentException`;
  #L3d418e.  v3:= new `java.lang.StringBuilder`;
  #L3d4192.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d4198.  v4:= "count >= 0 required but it was " @kind object;
  #L3d419c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d41a2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d41a8.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d41ae.  v0:= temp @kind object;
  #L3d41b0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d41b6.  throw v2;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d4220.  v0:= "item is null" @kind object;
  #L3d4224.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d422a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableJust`;
  #L3d422e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJust;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3d4234.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d423a.  v1:= temp @kind object;
  #L3d423c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d4250.  v0:= "The first item is null" @kind object;
  #L3d4254.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d425a.  v0:= "The second item is null" @kind object;
  #L3d425e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4264.  v0:= 2I;
  #L3d4266.  v0:= new `java.lang.Object`[v0];
  #L3d426a.  v1:= 0I;
  #L3d426c.  v0[v1]:= v2 @kind object;
  #L3d4270.  v2:= 1I;
  #L3d4272.  v0[v2]:= v3 @kind object;
  #L3d4276.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d427c.  v2:= temp @kind object;
  #L3d427e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d4290.  v0:= "The first item is null" @kind object;
  #L3d4294.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d429a.  v0:= "The second item is null" @kind object;
  #L3d429e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d42a4.  v0:= "The third item is null" @kind object;
  #L3d42a8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d42ae.  v0:= 3I;
  #L3d42b0.  v0:= new `java.lang.Object`[v0];
  #L3d42b4.  v1:= 0I;
  #L3d42b6.  v0[v1]:= v2 @kind object;
  #L3d42ba.  v2:= 1I;
  #L3d42bc.  v0[v2]:= v3 @kind object;
  #L3d42c0.  v2:= 2I;
  #L3d42c2.  v0[v2]:= v4 @kind object;
  #L3d42c6.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d42cc.  v2:= temp @kind object;
  #L3d42ce.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d42e0.  v0:= "The first item is null" @kind object;
  #L3d42e4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d42ea.  v0:= "The second item is null" @kind object;
  #L3d42ee.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d42f4.  v0:= "The third item is null" @kind object;
  #L3d42f8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d42fe.  v0:= "The fourth item is null" @kind object;
  #L3d4302.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4308.  v0:= 4I;
  #L3d430a.  v0:= new `java.lang.Object`[v0];
  #L3d430e.  v1:= 0I;
  #L3d4310.  v0[v1]:= v2 @kind object;
  #L3d4314.  v2:= 1I;
  #L3d4316.  v0[v2]:= v3 @kind object;
  #L3d431a.  v2:= 2I;
  #L3d431c.  v0[v2]:= v4 @kind object;
  #L3d4320.  v2:= 3I;
  #L3d4322.  v0[v2]:= v5 @kind object;
  #L3d4326.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d432c.  v2:= temp @kind object;
  #L3d432e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d4340.  v0:= "The first item is null" @kind object;
  #L3d4344.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d434a.  v0:= "The second item is null" @kind object;
  #L3d434e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4354.  v0:= "The third item is null" @kind object;
  #L3d4358.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d435e.  v0:= "The fourth item is null" @kind object;
  #L3d4362.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4368.  v0:= "The fifth item is null" @kind object;
  #L3d436c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4372.  v0:= 5I;
  #L3d4374.  v0:= new `java.lang.Object`[v0];
  #L3d4378.  v1:= 0I;
  #L3d437a.  v0[v1]:= v2 @kind object;
  #L3d437e.  v2:= 1I;
  #L3d4380.  v0[v2]:= v3 @kind object;
  #L3d4384.  v2:= 2I;
  #L3d4386.  v0[v2]:= v4 @kind object;
  #L3d438a.  v2:= 3I;
  #L3d438c.  v0[v2]:= v5 @kind object;
  #L3d4390.  v2:= 4I;
  #L3d4392.  v0[v2]:= v6 @kind object;
  #L3d4396.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d439c.  v2:= temp @kind object;
  #L3d439e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d43b0.  v0:= "The first item is null" @kind object;
  #L3d43b4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d43ba.  v0:= "The second item is null" @kind object;
  #L3d43be.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d43c4.  v0:= "The third item is null" @kind object;
  #L3d43c8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d43ce.  v0:= "The fourth item is null" @kind object;
  #L3d43d2.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d43d8.  v0:= "The fifth item is null" @kind object;
  #L3d43dc.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d43e2.  v0:= "The sixth item is null" @kind object;
  #L3d43e6.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d43ec.  v0:= 6I;
  #L3d43ee.  v0:= new `java.lang.Object`[v0];
  #L3d43f2.  v1:= 0I;
  #L3d43f4.  v0[v1]:= v2 @kind object;
  #L3d43f8.  v2:= 1I;
  #L3d43fa.  v0[v2]:= v3 @kind object;
  #L3d43fe.  v2:= 2I;
  #L3d4400.  v0[v2]:= v4 @kind object;
  #L3d4404.  v2:= 3I;
  #L3d4406.  v0[v2]:= v5 @kind object;
  #L3d440a.  v2:= 4I;
  #L3d440c.  v0[v2]:= v6 @kind object;
  #L3d4410.  v2:= 5I;
  #L3d4412.  v0[v2]:= v7 @kind object;
  #L3d4416.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d441c.  v2:= temp @kind object;
  #L3d441e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d4430.  v0:= "The first item is null" @kind object;
  #L3d4434.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d443a.  v0:= "The second item is null" @kind object;
  #L3d443e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4444.  v0:= "The third item is null" @kind object;
  #L3d4448.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d444e.  v0:= "The fourth item is null" @kind object;
  #L3d4452.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4458.  v0:= "The fifth item is null" @kind object;
  #L3d445c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4462.  v0:= "The sixth item is null" @kind object;
  #L3d4466.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d446c.  v0:= "The seventh item is null" @kind object;
  #L3d4470.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4476.  v0:= 7I;
  #L3d4478.  v0:= new `java.lang.Object`[v0];
  #L3d447c.  v1:= 0I;
  #L3d447e.  v0[v1]:= v2 @kind object;
  #L3d4482.  v2:= 1I;
  #L3d4484.  v0[v2]:= v3 @kind object;
  #L3d4488.  v2:= 2I;
  #L3d448a.  v0[v2]:= v4 @kind object;
  #L3d448e.  v2:= 3I;
  #L3d4490.  v0[v2]:= v5 @kind object;
  #L3d4494.  v2:= 4I;
  #L3d4496.  v0[v2]:= v6 @kind object;
  #L3d449a.  v2:= 5I;
  #L3d449c.  v0[v2]:= v7 @kind object;
  #L3d44a0.  v2:= 6I;
  #L3d44a2.  v0[v2]:= v8 @kind object;
  #L3d44a6.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d44ac.  v2:= temp @kind object;
  #L3d44ae.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d44c0.  v0:= "The first item is null" @kind object;
  #L3d44c4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d44ca.  v0:= "The second item is null" @kind object;
  #L3d44ce.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d44d4.  v0:= "The third item is null" @kind object;
  #L3d44d8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d44de.  v0:= "The fourth item is null" @kind object;
  #L3d44e2.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d44e8.  v0:= "The fifth item is null" @kind object;
  #L3d44ec.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d44f2.  v0:= "The sixth item is null" @kind object;
  #L3d44f6.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d44fc.  v0:= "The seventh item is null" @kind object;
  #L3d4500.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4506.  v0:= "The eighth item is null" @kind object;
  #L3d450a.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4510.  v0:= 8I;
  #L3d4514.  v0:= new `java.lang.Object`[v0];
  #L3d4518.  v1:= 0I;
  #L3d451a.  v0[v1]:= v2 @kind object;
  #L3d451e.  v2:= 1I;
  #L3d4520.  v0[v2]:= v3 @kind object;
  #L3d4524.  v2:= 2I;
  #L3d4526.  v0[v2]:= v4 @kind object;
  #L3d452a.  v2:= 3I;
  #L3d452c.  v0[v2]:= v5 @kind object;
  #L3d4530.  v2:= 4I;
  #L3d4532.  v0[v2]:= v6 @kind object;
  #L3d4536.  v2:= 5I;
  #L3d4538.  v0[v2]:= v7 @kind object;
  #L3d453c.  v2:= 6I;
  #L3d453e.  v0[v2]:= v8 @kind object;
  #L3d4542.  v2:= 7I;
  #L3d4544.  v0[v2]:= v9 @kind object;
  #L3d4548.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d454e.  v2:= temp @kind object;
  #L3d4550.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d4564.  v0:= "The first item is null" @kind object;
  #L3d4568.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d456e.  v0:= "The second item is null" @kind object;
  #L3d4572.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4578.  v0:= "The third item is null" @kind object;
  #L3d457c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4582.  v0:= "The fourth item is null" @kind object;
  #L3d4586.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d458c.  v0:= "The fifth item is null" @kind object;
  #L3d4590.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4596.  v0:= "The sixth item is null" @kind object;
  #L3d459a.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d45a0.  v0:= "The seventh item is null" @kind object;
  #L3d45a4.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d45aa.  v0:= "The eighth item is null" @kind object;
  #L3d45ae.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d45b4.  v0:= "The ninth is null" @kind object;
  #L3d45b8.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d45be.  v0:= 9I;
  #L3d45c2.  v0:= new `java.lang.Object`[v0];
  #L3d45c6.  v1:= 0I;
  #L3d45c8.  v0[v1]:= v2 @kind object;
  #L3d45cc.  v2:= 1I;
  #L3d45ce.  v0[v2]:= v3 @kind object;
  #L3d45d2.  v2:= 2I;
  #L3d45d4.  v0[v2]:= v4 @kind object;
  #L3d45d8.  v2:= 3I;
  #L3d45da.  v0[v2]:= v5 @kind object;
  #L3d45de.  v2:= 4I;
  #L3d45e0.  v0[v2]:= v6 @kind object;
  #L3d45e4.  v2:= 5I;
  #L3d45e6.  v0[v2]:= v7 @kind object;
  #L3d45ea.  v2:= 6I;
  #L3d45ec.  v0[v2]:= v8 @kind object;
  #L3d45f0.  v2:= 7I;
  #L3d45f2.  v0[v2]:= v9 @kind object;
  #L3d45f6.  v2:= 8I;
  #L3d45fa.  v0[v2]:= v10 @kind object;
  #L3d45fe.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d4604.  v2:= temp @kind object;
  #L3d4606.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object, `java.lang.Object` v11 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d4618.  v0:= "The first item is null" @kind object;
  #L3d461c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4622.  v0:= "The second item is null" @kind object;
  #L3d4626.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d462c.  v0:= "The third item is null" @kind object;
  #L3d4630.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4636.  v0:= "The fourth item is null" @kind object;
  #L3d463a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4640.  v0:= "The fifth item is null" @kind object;
  #L3d4644.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d464a.  v0:= "The sixth item is null" @kind object;
  #L3d464e.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4654.  v0:= "The seventh item is null" @kind object;
  #L3d4658.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d465e.  v0:= "The eighth item is null" @kind object;
  #L3d4662.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4668.  v0:= "The ninth item is null" @kind object;
  #L3d466c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4672.  v0:= "The tenth item is null" @kind object;
  #L3d4676.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d467c.  v0:= 10I;
  #L3d4680.  v0:= new `java.lang.Object`[v0];
  #L3d4684.  v1:= 0I;
  #L3d4686.  v0[v1]:= v2 @kind object;
  #L3d468a.  v2:= 1I;
  #L3d468c.  v0[v2]:= v3 @kind object;
  #L3d4690.  v2:= 2I;
  #L3d4692.  v0[v2]:= v4 @kind object;
  #L3d4696.  v2:= 3I;
  #L3d4698.  v0[v2]:= v5 @kind object;
  #L3d469c.  v2:= 4I;
  #L3d469e.  v0[v2]:= v6 @kind object;
  #L3d46a2.  v2:= 5I;
  #L3d46a4.  v0[v2]:= v7 @kind object;
  #L3d46a8.  v2:= 6I;
  #L3d46aa.  v0[v2]:= v8 @kind object;
  #L3d46ae.  v2:= 7I;
  #L3d46b0.  v0[v2]:= v9 @kind object;
  #L3d46b4.  v2:= 8I;
  #L3d46b8.  v0[v2]:= v10 @kind object;
  #L3d46bc.  v2:= 9I;
  #L3d46c0.  v0[v2]:= v11 @kind object;
  #L3d46c4.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d46ca.  v2:= temp @kind object;
  #L3d46cc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d47c4.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d47ca.  v1:= temp @kind object;
  #L3d47cc.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d47d2.  v0:= temp @kind object;
  #L3d47d4.  call temp:= `flatMap`(v1, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d47da.  v1:= temp @kind object;
  #L3d47dc.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.merge:(Ljava/lang/Iterable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d47f0.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d47f6.  v1:= temp @kind object;
  #L3d47f8.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d47fe.  v0:= temp @kind object;
  #L3d4800.  call temp:= `flatMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4806.  v1:= temp @kind object;
  #L3d4808.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.merge:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d481c.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4822.  v2:= temp @kind object;
  #L3d4824.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d482a.  v0:= temp @kind object;
  #L3d482c.  v1:= 0I;
  #L3d482e.  call temp:= `flatMap`(v2, v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4834.  v2:= temp @kind object;
  #L3d4836.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d4848.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d484e.  v0:= temp;
  #L3d4850.  call temp:= `merge`(v1, v0) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3d4856.  v1:= temp @kind object;
  #L3d4858.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d486c.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d4872.  v1:= temp @kind object;
  #L3d4874.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d487a.  v0:= temp @kind object;
  #L3d487c.  call temp:= `flatMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4882.  v1:= temp @kind object;
  #L3d4884.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d4898.  v0:= "source1 is null" @kind object;
  #L3d489c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d48a2.  v0:= "source2 is null" @kind object;
  #L3d48a6.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d48ac.  v0:= 2I;
  #L3d48ae.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3d48b2.  v2:= 0I;
  #L3d48b4.  v1[v2]:= v3 @kind object;
  #L3d48b8.  v3:= 1I;
  #L3d48ba.  v1[v3]:= v4 @kind object;
  #L3d48be.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d48c4.  v3:= temp @kind object;
  #L3d48c6.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d48cc.  v4:= temp @kind object;
  #L3d48ce.  call temp:= `flatMap`(v3, v4, v2, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d48d4.  v3:= temp @kind object;
  #L3d48d6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d48e8.  v0:= "source1 is null" @kind object;
  #L3d48ec.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d48f2.  v0:= "source2 is null" @kind object;
  #L3d48f6.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d48fc.  v0:= "source3 is null" @kind object;
  #L3d4900.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4906.  v0:= 3I;
  #L3d4908.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3d490c.  v2:= 0I;
  #L3d490e.  v1[v2]:= v3 @kind object;
  #L3d4912.  v3:= 1I;
  #L3d4914.  v1[v3]:= v4 @kind object;
  #L3d4918.  v3:= 2I;
  #L3d491a.  v1[v3]:= v5 @kind object;
  #L3d491e.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d4924.  v3:= temp @kind object;
  #L3d4926.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d492c.  v4:= temp @kind object;
  #L3d492e.  call temp:= `flatMap`(v3, v4, v2, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4934.  v3:= temp @kind object;
  #L3d4936.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d4948.  v0:= "source1 is null" @kind object;
  #L3d494c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4952.  v0:= "source2 is null" @kind object;
  #L3d4956.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d495c.  v0:= "source3 is null" @kind object;
  #L3d4960.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4966.  v0:= "source4 is null" @kind object;
  #L3d496a.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4970.  v0:= 4I;
  #L3d4972.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3d4976.  v2:= 0I;
  #L3d4978.  v1[v2]:= v3 @kind object;
  #L3d497c.  v3:= 1I;
  #L3d497e.  v1[v3]:= v4 @kind object;
  #L3d4982.  v3:= 2I;
  #L3d4984.  v1[v3]:= v5 @kind object;
  #L3d4988.  v3:= 3I;
  #L3d498a.  v1[v3]:= v6 @kind object;
  #L3d498e.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d4994.  v3:= temp @kind object;
  #L3d4996.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d499c.  v4:= temp @kind object;
  #L3d499e.  call temp:= `flatMap`(v3, v4, v2, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d49a4.  v3:= temp @kind object;
  #L3d49a6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArray`(`int` v2 , `int` v3 , `org.reactivestreams.Publisher`[] v4 @kind object) @signature `Lio/reactivex/Flowable;.mergeArray:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d49b8.  call temp:= `fromArray`(v4) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d49be.  v4:= temp @kind object;
  #L3d49c0.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d49c6.  v0:= temp @kind object;
  #L3d49c8.  v1:= 0I;
  #L3d49ca.  call temp:= `flatMap`(v4, v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d49d0.  v2:= temp @kind object;
  #L3d49d2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArray`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d49e4.  call temp:= `fromArray`(v2) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d49ea.  v0:= temp @kind object;
  #L3d49ec.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d49f2.  v1:= temp @kind object;
  #L3d49f4.  v2:= length @variable v2;
  #L3d49f6.  call temp:= `flatMap`(v0, v1, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d49fc.  v2:= temp @kind object;
  #L3d49fe.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArrayDelayError`(`int` v2 , `int` v3 , `org.reactivestreams.Publisher`[] v4 @kind object) @signature `Lio/reactivex/Flowable;.mergeArrayDelayError:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d4a10.  call temp:= `fromArray`(v4) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d4a16.  v4:= temp @kind object;
  #L3d4a18.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d4a1e.  v0:= temp @kind object;
  #L3d4a20.  v1:= 1I;
  #L3d4a22.  call temp:= `flatMap`(v4, v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4a28.  v2:= temp @kind object;
  #L3d4a2a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArrayDelayError`(`org.reactivestreams.Publisher`[] v3 @kind object) @signature `Lio/reactivex/Flowable;.mergeArrayDelayError:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d4a3c.  call temp:= `fromArray`(v3) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d4a42.  v0:= temp @kind object;
  #L3d4a44.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d4a4a.  v1:= temp @kind object;
  #L3d4a4c.  v3:= length @variable v3;
  #L3d4a4e.  v2:= 1I;
  #L3d4a50.  call temp:= `flatMap`(v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4a56.  v3:= temp @kind object;
  #L3d4a58.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d4a6c.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4a72.  v2:= temp @kind object;
  #L3d4a74.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d4a7a.  v0:= temp @kind object;
  #L3d4a7c.  v1:= 1I;
  #L3d4a7e.  call temp:= `flatMap`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4a84.  v2:= temp @kind object;
  #L3d4a86.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Ljava/lang/Iterable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d4a98.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4a9e.  v2:= temp @kind object;
  #L3d4aa0.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d4aa6.  v0:= temp @kind object;
  #L3d4aa8.  v1:= 1I;
  #L3d4aaa.  call temp:= `flatMap`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4ab0.  v2:= temp @kind object;
  #L3d4ab2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d4ac4.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4aca.  v2:= temp @kind object;
  #L3d4acc.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d4ad2.  v0:= temp @kind object;
  #L3d4ad4.  v1:= 1I;
  #L3d4ad6.  call temp:= `flatMap`(v2, v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4adc.  v2:= temp @kind object;
  #L3d4ade.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d4af0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d4af6.  v0:= temp;
  #L3d4af8.  call temp:= `mergeDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3d4afe.  v1:= temp @kind object;
  #L3d4b00.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d4b14.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d4b1a.  v2:= temp @kind object;
  #L3d4b1c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d4b22.  v0:= temp @kind object;
  #L3d4b24.  v1:= 1I;
  #L3d4b26.  call temp:= `flatMap`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4b2c.  v2:= temp @kind object;
  #L3d4b2e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d4b40.  v0:= "source1 is null" @kind object;
  #L3d4b44.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4b4a.  v0:= "source2 is null" @kind object;
  #L3d4b4e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4b54.  v0:= 2I;
  #L3d4b56.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3d4b5a.  v2:= 0I;
  #L3d4b5c.  v1[v2]:= v3 @kind object;
  #L3d4b60.  v3:= 1I;
  #L3d4b62.  v1[v3]:= v4 @kind object;
  #L3d4b66.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d4b6c.  v4:= temp @kind object;
  #L3d4b6e.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d4b74.  v1:= temp @kind object;
  #L3d4b76.  call temp:= `flatMap`(v4, v1, v3, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4b7c.  v3:= temp @kind object;
  #L3d4b7e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d4b90.  v0:= "source1 is null" @kind object;
  #L3d4b94.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4b9a.  v0:= "source2 is null" @kind object;
  #L3d4b9e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4ba4.  v0:= "source3 is null" @kind object;
  #L3d4ba8.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4bae.  v0:= 3I;
  #L3d4bb0.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3d4bb4.  v2:= 0I;
  #L3d4bb6.  v1[v2]:= v3 @kind object;
  #L3d4bba.  v3:= 1I;
  #L3d4bbc.  v1[v3]:= v4 @kind object;
  #L3d4bc0.  v4:= 2I;
  #L3d4bc2.  v1[v4]:= v5 @kind object;
  #L3d4bc6.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d4bcc.  v4:= temp @kind object;
  #L3d4bce.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d4bd4.  v5:= temp @kind object;
  #L3d4bd6.  call temp:= `flatMap`(v4, v5, v3, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4bdc.  v3:= temp @kind object;
  #L3d4bde.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d4bf0.  v0:= "source1 is null" @kind object;
  #L3d4bf4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4bfa.  v0:= "source2 is null" @kind object;
  #L3d4bfe.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4c04.  v0:= "source3 is null" @kind object;
  #L3d4c08.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4c0e.  v0:= "source4 is null" @kind object;
  #L3d4c12.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4c18.  v0:= 4I;
  #L3d4c1a.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L3d4c1e.  v2:= 0I;
  #L3d4c20.  v1[v2]:= v3 @kind object;
  #L3d4c24.  v3:= 1I;
  #L3d4c26.  v1[v3]:= v4 @kind object;
  #L3d4c2a.  v4:= 2I;
  #L3d4c2c.  v1[v4]:= v5 @kind object;
  #L3d4c30.  v4:= 3I;
  #L3d4c32.  v1[v4]:= v6 @kind object;
  #L3d4c36.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d4c3c.  v4:= temp @kind object;
  #L3d4c3e.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d4c44.  v5:= temp @kind object;
  #L3d4c46.  call temp:= `flatMap`(v4, v5, v3, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4c4c.  v3:= temp @kind object;
  #L3d4c4e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `never`() @signature `Lio/reactivex/Flowable;.never:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d4d14.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableNever.INSTANCE` @type ^`io.reactivex.Flowable` @kind object;
  #L3d4d18.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4d1e.  v0:= temp @kind object;
  #L3d4d20.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `range`(`int` v5 , `int` v6 ) @signature `Lio/reactivex/Flowable;.range:(II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d5138.  if v6 < 0 then goto L3d519e;
  #L3d513c.  if v6 != 0 then goto L3d514a;
  #L3d5140.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d5146.  v5:= temp @kind object;
  #L3d5148.  return v5 @kind object;
  #L3d514a.  v0:= 1I;
  #L3d514c.  if v6 != v0 then goto L3d5162;
  #L3d5150.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3d5156.  v5:= temp @kind object;
  #L3d5158.  call temp:= `just`(v5) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d515e.  v5:= temp @kind object;
  #L3d5160.  return v5 @kind object;
  #L3d5162.  v0:= (`long`) v5 @kind i2l;
  #L3d5164.  v2:= v6 + -1;
  #L3d5168.  v2:= (`long`) v2 @kind i2l;
  #L3d516a.  v0:= v0 + v2 @kind long;
  #L3d516c.  v2:= 2147483647L;
  #L3d5172.  v4:= lcmp(v0, v2);
  #L3d5176.  if v4 > 0 then goto L3d518e;
  #L3d517a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRange`;
  #L3d517e.  call `<init>`(v0, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange;.<init>:(II)V` @kind direct;
  #L3d5184.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d518a.  v5:= temp @kind object;
  #L3d518c.  return v5 @kind object;
  #L3d518e.  v5:= new `java.lang.IllegalArgumentException`;
  #L3d5192.  v6:= "Integer overflow" @kind object;
  #L3d5196.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d519c.  throw v5;
  #L3d519e.  v5:= new `java.lang.IllegalArgumentException`;
  #L3d51a2.  v0:= new `java.lang.StringBuilder`;
  #L3d51a6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d51ac.  v1:= "count >= 0 required but it was " @kind object;
  #L3d51b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d51b6.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d51bc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d51c2.  v6:= temp @kind object;
  #L3d51c4.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d51ca.  throw v5;
}
procedure `io.reactivex.Flowable` `rangeLong`(`long` v5 , `long` v7 ) @signature `Lio/reactivex/Flowable;.rangeLong:(JJ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d51dc.  v0:= 0L;
  #L3d51e0.  v2:= lcmp(v7, v0);
  #L3d51e4.  if v2 < 0 then goto L3d5254;
  #L3d51e8.  v2:= lcmp(v7, v0);
  #L3d51ec.  if v2 != 0 then goto L3d51fa;
  #L3d51f0.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d51f6.  v5:= temp @kind object;
  #L3d51f8.  return v5 @kind object;
  #L3d51fa.  v2:= 1L;
  #L3d51fe.  v4:= lcmp(v7, v2);
  #L3d5202.  if v4 != 0 then goto L3d5218;
  #L3d5206.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3d520c.  v5:= temp @kind object;
  #L3d520e.  call temp:= `just`(v5) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d5214.  v5:= temp @kind object;
  #L3d5216.  return v5 @kind object;
  #L3d5218.  v2:= v7 - v2 @kind long;
  #L3d521c.  v2:= v2 + v5 @kind long;
  #L3d521e.  v4:= lcmp(v5, v0);
  #L3d5222.  if v4 <= 0 then goto L3d5240;
  #L3d5226.  v4:= lcmp(v2, v0);
  #L3d522a.  if v4 < 0 then goto L3d5230;
  #L3d522e.  goto L3d5240;
  #L3d5230.  v5:= new `java.lang.IllegalArgumentException`;
  #L3d5234.  v6:= "Overflow! start + count is bigger than Long.MAX_VALUE" @kind object;
  #L3d5238.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d523e.  throw v5;
  #L3d5240.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRangeLong`;
  #L3d5244.  call `<init>`(v0, v5, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong;.<init>:(JJ)V` @kind direct;
  #L3d524a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5250.  v5:= temp @kind object;
  #L3d5252.  return v5 @kind object;
  #L3d5254.  v5:= new `java.lang.IllegalArgumentException`;
  #L3d5258.  v6:= new `java.lang.StringBuilder`;
  #L3d525c.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d5262.  v0:= "count >= 0 required but it was " @kind object;
  #L3d5266.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d526c.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5272.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5278.  v6:= temp @kind object;
  #L3d527a.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d5280.  throw v5;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d79f0.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L3d79f6.  v0:= temp @kind object;
  #L3d79f8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d79fe.  v1:= temp;
  #L3d7a00.  call temp:= `sequenceEqual`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @kind static;
  #L3d7a06.  v2:= temp @kind object;
  #L3d7a08.  return v2 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;I)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d7a1c.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L3d7a22.  v0:= temp @kind object;
  #L3d7a24.  call temp:= `sequenceEqual`(v1, v2, v0, v3) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @kind static;
  #L3d7a2a.  v1:= temp @kind object;
  #L3d7a2c.  return v1 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d7a40.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d7a46.  v0:= temp;
  #L3d7a48.  call temp:= `sequenceEqual`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @kind static;
  #L3d7a4e.  v1:= temp @kind object;
  #L3d7a50.  return v1 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d7a64.  v0:= "source1 is null" @kind object;
  #L3d7a68.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7a6e.  v0:= "source2 is null" @kind object;
  #L3d7a72.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7a78.  v0:= "isEqual is null" @kind object;
  #L3d7a7c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7a82.  v0:= "bufferSize" @kind object;
  #L3d7a86.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d7a8c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle`;
  #L3d7a90.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)V` @kind direct;
  #L3d7a96.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d7a9c.  v1:= temp @kind object;
  #L3d7a9e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNext`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.switchOnNext:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d5f28.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d5f2e.  v1:= temp @kind object;
  #L3d5f30.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d5f36.  v0:= temp @kind object;
  #L3d5f38.  call temp:= `switchMap`(v1, v0) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5f3e.  v1:= temp @kind object;
  #L3d5f40.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNext`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.switchOnNext:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d5f54.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d5f5a.  v1:= temp @kind object;
  #L3d5f5c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d5f62.  v0:= temp @kind object;
  #L3d5f64.  call temp:= `switchMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5f6a.  v1:= temp @kind object;
  #L3d5f6c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNextDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.switchOnNextDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d5f80.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d5f86.  v0:= temp;
  #L3d5f88.  call temp:= `switchOnNextDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.switchOnNextDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3d5f8e.  v1:= temp @kind object;
  #L3d5f90.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNextDelayError`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.switchOnNextDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d5fa4.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d5faa.  v1:= temp @kind object;
  #L3d5fac.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d5fb2.  v0:= temp @kind object;
  #L3d5fb4.  call temp:= `switchMapDelayError`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5fba.  v1:= temp @kind object;
  #L3d5fbc.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `timeout0`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `org.reactivestreams.Publisher` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object) @signature `Lio/reactivex/Flowable;.timeout0:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d6714.  v0:= "timeUnit is null" @kind object;
  #L3d6718.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d671e.  v0:= "scheduler is null" @kind object;
  #L3d6722.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6728.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed`;
  #L3d672c.  v1:= v0 @kind object;
  #L3d672e.  v2:= v8 @kind object;
  #L3d6730.  v3:= v9 @kind wide;
  #L3d6732.  v5:= v11 @kind object;
  #L3d6734.  v6:= v13 @kind object;
  #L3d6736.  v7:= v12 @kind object;
  #L3d6738.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d673e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6744.  v9:= temp @kind object;
  #L3d6746.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `timeout0`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.timeout0:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3d6758.  v0:= "itemTimeoutIndicator is null" @kind object;
  #L3d675c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6762.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout`;
  #L3d6766.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d676c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6772.  v2:= temp @kind object;
  #L3d6774.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timer`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d6788.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d678e.  v0:= temp @kind object;
  #L3d6790.  call temp:= `timer`(v1, v3, v0) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3d6796.  v1:= temp @kind object;
  #L3d6798.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `timer`(`long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d67ac.  v0:= "unit is null" @kind object;
  #L3d67b0.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d67b6.  v0:= "scheduler is null" @kind object;
  #L3d67ba.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d67c0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimer`;
  #L3d67c4.  v1:= 0L;
  #L3d67c8.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3d67ce.  v3:= temp @kind wide;
  #L3d67d0.  call `<init>`(v0, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer;.<init>:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d67d6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d67dc.  v3:= temp @kind object;
  #L3d67de.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `unsafeCreate`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.unsafeCreate:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d6894.  v0:= "onSubscribe is null" @kind object;
  #L3d6898.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d689e.  v0:= instanceof @variable v1 @type ^`io.reactivex.Flowable` @kind boolean;
  #L3d68a2.  if v0 != 0 then goto L3d68ba;
  #L3d68a6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromPublisher`;
  #L3d68aa.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d68b0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d68b6.  v1:= temp @kind object;
  #L3d68b8.  return v1 @kind object;
  #L3d68ba.  v1:= new `java.lang.IllegalArgumentException`;
  #L3d68be.  v0:= "unsafeCreate(Flowable) should be upgraded" @kind object;
  #L3d68c2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d68c8.  throw v1;
}
procedure `io.reactivex.Flowable` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d690c.  v0:= 1I;
  #L3d690e.  call temp:= `using`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Flowable;` @kind static;
  #L3d6914.  v1:= temp @kind object;
  #L3d6916.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d6928.  v0:= "resourceSupplier is null" @kind object;
  #L3d692c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6932.  v0:= "sourceSupplier is null" @kind object;
  #L3d6936.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d693c.  v0:= "disposer is null" @kind object;
  #L3d6940.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6946.  v0:= new `io.reactivex.internal.operators.flowable.FlowableUsing`;
  #L3d694a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)V` @kind direct;
  #L3d6950.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6956.  v1:= temp @kind object;
  #L3d6958.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`java.lang.Iterable` v7 @kind object, `io.reactivex.functions.Function` v8 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d6f2c.  v0:= "zipper is null" @kind object;
  #L3d6f30.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6f36.  v0:= "sources is null" @kind object;
  #L3d6f3a.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6f40.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZip`;
  #L3d6f44.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d6f4a.  v5:= temp;
  #L3d6f4c.  v2:= 0I;
  #L3d6f4e.  v6:= 0I;
  #L3d6f50.  v1:= v0 @kind object;
  #L3d6f52.  v3:= v7 @kind object;
  #L3d6f54.  v4:= v8 @kind object;
  #L3d6f56.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3d6f5c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6f62.  v7:= temp @kind object;
  #L3d6f64.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d6f78.  v0:= "zipper is null" @kind object;
  #L3d6f7c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6f82.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d6f88.  v1:= temp @kind object;
  #L3d6f8a.  call temp:= `toList`(v1) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L3d6f90.  v1:= temp @kind object;
  #L3d6f92.  call temp:= `zipIterable`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.zipIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L3d6f98.  v2:= temp @kind object;
  #L3d6f9a.  call temp:= `flatMapPublisher`(v1, v2) @signature `Lio/reactivex/Single;.flatMapPublisher:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6fa0.  v1:= temp @kind object;
  #L3d6fa2.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d6fb4.  v0:= "source1 is null" @kind object;
  #L3d6fb8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6fbe.  v0:= "source2 is null" @kind object;
  #L3d6fc2.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6fc8.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3d6fce.  v5:= temp @kind object;
  #L3d6fd0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d6fd6.  v0:= temp;
  #L3d6fd8.  v1:= 2I;
  #L3d6fda.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3d6fde.  v2:= 0I;
  #L3d6fe0.  v1[v2]:= v3 @kind object;
  #L3d6fe4.  v3:= 1I;
  #L3d6fe6.  v1[v3]:= v4 @kind object;
  #L3d6fea.  call temp:= `zipArray`(v5, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d6ff0.  v3:= temp @kind object;
  #L3d6ff2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d7004.  v0:= "source1 is null" @kind object;
  #L3d7008.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d700e.  v0:= "source2 is null" @kind object;
  #L3d7012.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7018.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3d701e.  v5:= temp @kind object;
  #L3d7020.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d7026.  v0:= temp;
  #L3d7028.  v1:= 2I;
  #L3d702a.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3d702e.  v2:= 0I;
  #L3d7030.  v1[v2]:= v3 @kind object;
  #L3d7034.  v3:= 1I;
  #L3d7036.  v1[v3]:= v4 @kind object;
  #L3d703a.  call temp:= `zipArray`(v5, v6, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d7040.  v3:= temp @kind object;
  #L3d7042.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.BiFunction` v4 @kind object, `boolean` v5 , `int` v6 ) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d7054.  v0:= "source1 is null" @kind object;
  #L3d7058.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d705e.  v0:= "source2 is null" @kind object;
  #L3d7062.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7068.  call temp:= `toFunction`(v4) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3d706e.  v4:= temp @kind object;
  #L3d7070.  v0:= 2I;
  #L3d7072.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d7076.  v1:= 0I;
  #L3d7078.  v0[v1]:= v2 @kind object;
  #L3d707c.  v2:= 1I;
  #L3d707e.  v0[v2]:= v3 @kind object;
  #L3d7082.  call temp:= `zipArray`(v4, v5, v6, v0) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d7088.  v2:= temp @kind object;
  #L3d708a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `io.reactivex.functions.Function3` v6 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function3;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d709c.  v0:= "source1 is null" @kind object;
  #L3d70a0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d70a6.  v0:= "source2 is null" @kind object;
  #L3d70aa.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d70b0.  v0:= "source3 is null" @kind object;
  #L3d70b4.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d70ba.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L3d70c0.  v6:= temp @kind object;
  #L3d70c2.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d70c8.  v0:= temp;
  #L3d70ca.  v1:= 3I;
  #L3d70cc.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3d70d0.  v2:= 0I;
  #L3d70d2.  v1[v2]:= v3 @kind object;
  #L3d70d6.  v3:= 1I;
  #L3d70d8.  v1[v3]:= v4 @kind object;
  #L3d70dc.  v3:= 2I;
  #L3d70de.  v1[v3]:= v5 @kind object;
  #L3d70e2.  call temp:= `zipArray`(v6, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d70e8.  v3:= temp @kind object;
  #L3d70ea.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `io.reactivex.functions.Function4` v7 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function4;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d70fc.  v0:= "source1 is null" @kind object;
  #L3d7100.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7106.  v0:= "source2 is null" @kind object;
  #L3d710a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7110.  v0:= "source3 is null" @kind object;
  #L3d7114.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d711a.  v0:= "source4 is null" @kind object;
  #L3d711e.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7124.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L3d712a.  v7:= temp @kind object;
  #L3d712c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d7132.  v0:= temp;
  #L3d7134.  v1:= 4I;
  #L3d7136.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3d713a.  v2:= 0I;
  #L3d713c.  v1[v2]:= v3 @kind object;
  #L3d7140.  v3:= 1I;
  #L3d7142.  v1[v3]:= v4 @kind object;
  #L3d7146.  v3:= 2I;
  #L3d7148.  v1[v3]:= v5 @kind object;
  #L3d714c.  v3:= 3I;
  #L3d714e.  v1[v3]:= v6 @kind object;
  #L3d7152.  call temp:= `zipArray`(v7, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d7158.  v3:= temp @kind object;
  #L3d715a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `io.reactivex.functions.Function5` v8 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function5;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d716c.  v0:= "source1 is null" @kind object;
  #L3d7170.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7176.  v0:= "source2 is null" @kind object;
  #L3d717a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7180.  v0:= "source3 is null" @kind object;
  #L3d7184.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d718a.  v0:= "source4 is null" @kind object;
  #L3d718e.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7194.  v0:= "source5 is null" @kind object;
  #L3d7198.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d719e.  call temp:= `toFunction`(v8) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L3d71a4.  v8:= temp @kind object;
  #L3d71a6.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d71ac.  v0:= temp;
  #L3d71ae.  v1:= 5I;
  #L3d71b0.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3d71b4.  v2:= 0I;
  #L3d71b6.  v1[v2]:= v3 @kind object;
  #L3d71ba.  v3:= 1I;
  #L3d71bc.  v1[v3]:= v4 @kind object;
  #L3d71c0.  v3:= 2I;
  #L3d71c2.  v1[v3]:= v5 @kind object;
  #L3d71c6.  v3:= 3I;
  #L3d71c8.  v1[v3]:= v6 @kind object;
  #L3d71cc.  v3:= 4I;
  #L3d71ce.  v1[v3]:= v7 @kind object;
  #L3d71d2.  call temp:= `zipArray`(v8, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d71d8.  v3:= temp @kind object;
  #L3d71da.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function6` v9 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function6;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d71ec.  v0:= "source1 is null" @kind object;
  #L3d71f0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d71f6.  v0:= "source2 is null" @kind object;
  #L3d71fa.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7200.  v0:= "source3 is null" @kind object;
  #L3d7204.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d720a.  v0:= "source4 is null" @kind object;
  #L3d720e.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7214.  v0:= "source5 is null" @kind object;
  #L3d7218.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d721e.  v0:= "source6 is null" @kind object;
  #L3d7222.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7228.  call temp:= `toFunction`(v9) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function6;)Lio/reactivex/functions/Function;` @kind static;
  #L3d722e.  v9:= temp @kind object;
  #L3d7230.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d7236.  v0:= temp;
  #L3d7238.  v1:= 6I;
  #L3d723a.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3d723e.  v2:= 0I;
  #L3d7240.  v1[v2]:= v3 @kind object;
  #L3d7244.  v3:= 1I;
  #L3d7246.  v1[v3]:= v4 @kind object;
  #L3d724a.  v3:= 2I;
  #L3d724c.  v1[v3]:= v5 @kind object;
  #L3d7250.  v3:= 3I;
  #L3d7252.  v1[v3]:= v6 @kind object;
  #L3d7256.  v3:= 4I;
  #L3d7258.  v1[v3]:= v7 @kind object;
  #L3d725c.  v3:= 5I;
  #L3d725e.  v1[v3]:= v8 @kind object;
  #L3d7262.  call temp:= `zipArray`(v9, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d7268.  v3:= temp @kind object;
  #L3d726a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `io.reactivex.functions.Function7` v10 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function7;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d727c.  v0:= "source1 is null" @kind object;
  #L3d7280.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7286.  v0:= "source2 is null" @kind object;
  #L3d728a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7290.  v0:= "source3 is null" @kind object;
  #L3d7294.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d729a.  v0:= "source4 is null" @kind object;
  #L3d729e.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d72a4.  v0:= "source5 is null" @kind object;
  #L3d72a8.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d72ae.  v0:= "source6 is null" @kind object;
  #L3d72b2.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d72b8.  v0:= "source7 is null" @kind object;
  #L3d72bc.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d72c2.  call temp:= `toFunction`(v10) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function7;)Lio/reactivex/functions/Function;` @kind static;
  #L3d72c8.  v10:= temp @kind object;
  #L3d72ca.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d72d0.  v0:= temp;
  #L3d72d2.  v1:= 7I;
  #L3d72d4.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3d72d8.  v2:= 0I;
  #L3d72da.  v1[v2]:= v3 @kind object;
  #L3d72de.  v3:= 1I;
  #L3d72e0.  v1[v3]:= v4 @kind object;
  #L3d72e4.  v3:= 2I;
  #L3d72e6.  v1[v3]:= v5 @kind object;
  #L3d72ea.  v3:= 3I;
  #L3d72ec.  v1[v3]:= v6 @kind object;
  #L3d72f0.  v3:= 4I;
  #L3d72f2.  v1[v3]:= v7 @kind object;
  #L3d72f6.  v3:= 5I;
  #L3d72f8.  v1[v3]:= v8 @kind object;
  #L3d72fc.  v3:= 6I;
  #L3d72fe.  v1[v3]:= v9 @kind object;
  #L3d7302.  call temp:= `zipArray`(v10, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d7308.  v3:= temp @kind object;
  #L3d730a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `org.reactivestreams.Publisher` v10 @kind object, `io.reactivex.functions.Function8` v11 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function8;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d731c.  v0:= "source1 is null" @kind object;
  #L3d7320.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7326.  v0:= "source2 is null" @kind object;
  #L3d732a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7330.  v0:= "source3 is null" @kind object;
  #L3d7334.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d733a.  v0:= "source4 is null" @kind object;
  #L3d733e.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7344.  v0:= "source5 is null" @kind object;
  #L3d7348.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d734e.  v0:= "source6 is null" @kind object;
  #L3d7352.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7358.  v0:= "source7 is null" @kind object;
  #L3d735c.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7362.  v0:= "source8 is null" @kind object;
  #L3d7366.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d736c.  call temp:= `toFunction`(v11) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function8;)Lio/reactivex/functions/Function;` @kind static;
  #L3d7372.  v11:= temp @kind object;
  #L3d7374.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d737a.  v0:= temp;
  #L3d737c.  v1:= 8I;
  #L3d7380.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3d7384.  v2:= 0I;
  #L3d7386.  v1[v2]:= v3 @kind object;
  #L3d738a.  v3:= 1I;
  #L3d738c.  v1[v3]:= v4 @kind object;
  #L3d7390.  v3:= 2I;
  #L3d7392.  v1[v3]:= v5 @kind object;
  #L3d7396.  v3:= 3I;
  #L3d7398.  v1[v3]:= v6 @kind object;
  #L3d739c.  v3:= 4I;
  #L3d739e.  v1[v3]:= v7 @kind object;
  #L3d73a2.  v3:= 5I;
  #L3d73a4.  v1[v3]:= v8 @kind object;
  #L3d73a8.  v3:= 6I;
  #L3d73aa.  v1[v3]:= v9 @kind object;
  #L3d73ae.  v3:= 7I;
  #L3d73b0.  v1[v3]:= v10 @kind object;
  #L3d73b4.  call temp:= `zipArray`(v11, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d73ba.  v3:= temp @kind object;
  #L3d73bc.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `org.reactivestreams.Publisher` v10 @kind object, `org.reactivestreams.Publisher` v11 @kind object, `io.reactivex.functions.Function9` v12 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function9;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d73d0.  v0:= "source1 is null" @kind object;
  #L3d73d4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d73da.  v0:= "source2 is null" @kind object;
  #L3d73de.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d73e4.  v0:= "source3 is null" @kind object;
  #L3d73e8.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d73ee.  v0:= "source4 is null" @kind object;
  #L3d73f2.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d73f8.  v0:= "source5 is null" @kind object;
  #L3d73fc.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7402.  v0:= "source6 is null" @kind object;
  #L3d7406.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d740c.  v0:= "source7 is null" @kind object;
  #L3d7410.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7416.  v0:= "source8 is null" @kind object;
  #L3d741a.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7420.  v0:= "source9 is null" @kind object;
  #L3d7424.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d742a.  call temp:= `toFunction`(v12) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function9;)Lio/reactivex/functions/Function;` @kind static;
  #L3d7430.  v12:= temp @kind object;
  #L3d7432.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d7438.  v0:= temp;
  #L3d743a.  v1:= 9I;
  #L3d743e.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L3d7442.  v2:= 0I;
  #L3d7444.  v1[v2]:= v3 @kind object;
  #L3d7448.  v3:= 1I;
  #L3d744a.  v1[v3]:= v4 @kind object;
  #L3d744e.  v3:= 2I;
  #L3d7450.  v1[v3]:= v5 @kind object;
  #L3d7454.  v3:= 3I;
  #L3d7456.  v1[v3]:= v6 @kind object;
  #L3d745a.  v3:= 4I;
  #L3d745c.  v1[v3]:= v7 @kind object;
  #L3d7460.  v3:= 5I;
  #L3d7462.  v1[v3]:= v8 @kind object;
  #L3d7466.  v3:= 6I;
  #L3d7468.  v1[v3]:= v9 @kind object;
  #L3d746c.  v3:= 7I;
  #L3d746e.  v1[v3]:= v10 @kind object;
  #L3d7472.  v3:= 8I;
  #L3d7476.  v1[v3]:= v11 @kind object;
  #L3d747a.  call temp:= `zipArray`(v12, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d7480.  v3:= temp @kind object;
  #L3d7482.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zipArray`(`io.reactivex.functions.Function` v7 @kind object, `boolean` v8 , `int` v9 , `org.reactivestreams.Publisher`[] v10 @kind object) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d7494.  v0:= length @variable v10;
  #L3d7496.  if v0 != 0 then goto L3d74a4;
  #L3d749a.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d74a0.  v7:= temp @kind object;
  #L3d74a2.  return v7 @kind object;
  #L3d74a4.  v0:= "zipper is null" @kind object;
  #L3d74a8.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d74ae.  v0:= "bufferSize" @kind object;
  #L3d74b2.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d74b8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZip`;
  #L3d74bc.  v3:= 0I;
  #L3d74be.  v1:= v0 @kind object;
  #L3d74c0.  v2:= v10 @kind object;
  #L3d74c2.  v4:= v7 @kind object;
  #L3d74c4.  v5:= v9;
  #L3d74c6.  v6:= v8;
  #L3d74c8.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3d74ce.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d74d4.  v7:= temp @kind object;
  #L3d74d6.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `zipIterable`(`java.lang.Iterable` v7 @kind object, `io.reactivex.functions.Function` v8 @kind object, `boolean` v9 , `int` v10 ) @signature `Lio/reactivex/Flowable;.zipIterable:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d74e8.  v0:= "zipper is null" @kind object;
  #L3d74ec.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d74f2.  v0:= "sources is null" @kind object;
  #L3d74f6.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d74fc.  v0:= "bufferSize" @kind object;
  #L3d7500.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d7506.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZip`;
  #L3d750a.  v2:= 0I;
  #L3d750c.  v1:= v0 @kind object;
  #L3d750e.  v3:= v7 @kind object;
  #L3d7510.  v4:= v8 @kind object;
  #L3d7512.  v5:= v10;
  #L3d7514.  v6:= v9;
  #L3d7516.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3d751c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d7522.  v7:= temp @kind object;
  #L3d7524.  return v7 @kind object;
}
procedure `io.reactivex.Single` `all`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.all:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d76e8.  v0:= "predicate is null" @kind object;
  #L3d76ec.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d76f2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAllSingle`;
  #L3d76f6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3d76fc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d7702.  v2:= temp @kind object;
  #L3d7704.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `ambWith`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.ambWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d1b28.  v0:= "other is null" @kind object;
  #L3d1b2c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1b32.  v0:= 2I;
  #L3d1b34.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d1b38.  v1:= 0I;
  #L3d1b3a.  v0[v1]:= v2 @kind object;
  #L3d1b3e.  v1:= 1I;
  #L3d1b40.  v0[v1]:= v3 @kind object;
  #L3d1b44.  call temp:= `ambArray`(v0) @signature `Lio/reactivex/Flowable;.ambArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d1b4a.  v3:= temp @kind object;
  #L3d1b4c.  return v3 @kind object;
}
procedure `io.reactivex.Single` `any`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.any:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7718.  v0:= "predicate is null" @kind object;
  #L3d771c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7722.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAnySingle`;
  #L3d7726.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3d772c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d7732.  v2:= temp @kind object;
  #L3d7734.  return v2 @kind object;
}
procedure `java.lang.Object` `as`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.FlowableConverter` v2 @kind object) @signature `Lio/reactivex/Flowable;.as:(Lio/reactivex/FlowableConverter;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8274.  v0:= "converter is null" @kind object;
  #L3d8278.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d827e.  v2:= temp @kind object;
  #L3d8280.  v2:= (`io.reactivex.FlowableConverter`) v2 @kind object;
  #L3d8284.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/FlowableConverter;.apply:(Lio/reactivex/Flowable;)Ljava/lang/Object;` @kind interface;
  #L3d828a.  v2:= temp @kind object;
  #L3d828c.  return v2 @kind object;
}
procedure `java.lang.Object` `blockingFirst`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingFirst:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d82a0.  v0:= new `io.reactivex.internal.subscribers.BlockingFirstSubscriber`;
  #L3d82a4.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingFirstSubscriber;.<init>:()V` @kind direct;
  #L3d82aa.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d82b0.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingFirstSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3d82b6.  v0:= temp @kind object;
  #L3d82b8.  if v0 == 0 then goto L3d82be;
  #L3d82bc.  return v0 @kind object;
  #L3d82be.  v0:= new `java.util.NoSuchElementException`;
  #L3d82c2.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3d82c8.  throw v0;
}
procedure `java.lang.Object` `blockingFirst`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.blockingFirst:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d82dc.  v0:= new `io.reactivex.internal.subscribers.BlockingFirstSubscriber`;
  #L3d82e0.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingFirstSubscriber;.<init>:()V` @kind direct;
  #L3d82e6.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d82ec.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingFirstSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3d82f2.  v0:= temp @kind object;
  #L3d82f4.  if v0 == 0 then goto L3d82fa;
  #L3d82f8.  v2:= v0 @kind object;
  #L3d82fa.  return v2 @kind object;
}
procedure `void` `blockingForEach`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingForEach:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d8498.  call temp:= `blockingIterable`(v2) @signature `Lio/reactivex/Flowable;.blockingIterable:()Ljava/lang/Iterable;` @kind virtual;
  #L3d849e.  v0:= temp @kind object;
  #L3d84a0.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3d84a6.  v0:= temp @kind object;
  #L3d84a8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3d84ae.  v1:= temp;
  #L3d84b0.  if v1 == 0 then goto L3d84e0;
  #L3d84b4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3d84ba.  v1:= temp @kind object;
  #L3d84bc.  call `accept`(v3, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L3d84c2.  goto L3d84a8;
  #L3d84c4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d84c6.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3d84cc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3d84d0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3d84d6.  call temp:= `wrapOrThrow`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3d84dc.  v3:= temp @kind object;
  #L3d84de.  throw v3;
  #L3d84e0.  return @kind void;
  catch `java.lang.Throwable` @[L3d84b4..L3d84c2] goto L3d84c4;
}
procedure `java.lang.Iterable` `blockingIterable`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingIterable:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d81d4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d81da.  v0:= temp;
  #L3d81dc.  call temp:= `blockingIterable`(v1, v0) @signature `Lio/reactivex/Flowable;.blockingIterable:(I)Ljava/lang/Iterable;` @kind virtual;
  #L3d81e2.  v0:= temp @kind object;
  #L3d81e4.  return v0 @kind object;
}
procedure `java.lang.Iterable` `blockingIterable`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.blockingIterable:(I)Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d81f8.  v0:= "bufferSize" @kind object;
  #L3d81fc.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d8202.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableIterable`;
  #L3d8206.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L3d820c.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingLast`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingLast:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d830c.  v0:= new `io.reactivex.internal.subscribers.BlockingLastSubscriber`;
  #L3d8310.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingLastSubscriber;.<init>:()V` @kind direct;
  #L3d8316.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d831c.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingLastSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3d8322.  v0:= temp @kind object;
  #L3d8324.  if v0 == 0 then goto L3d832a;
  #L3d8328.  return v0 @kind object;
  #L3d832a.  v0:= new `java.util.NoSuchElementException`;
  #L3d832e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3d8334.  throw v0;
}
procedure `java.lang.Object` `blockingLast`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.blockingLast:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8348.  v0:= new `io.reactivex.internal.subscribers.BlockingLastSubscriber`;
  #L3d834c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingLastSubscriber;.<init>:()V` @kind direct;
  #L3d8352.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d8358.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingLastSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3d835e.  v0:= temp @kind object;
  #L3d8360.  if v0 == 0 then goto L3d8366;
  #L3d8364.  v2:= v0 @kind object;
  #L3d8366.  return v2 @kind object;
}
procedure `java.lang.Iterable` `blockingLatest`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingLatest:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8220.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableLatest`;
  #L3d8224.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d822a.  return v0 @kind object;
}
procedure `java.lang.Iterable` `blockingMostRecent`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.blockingMostRecent:(Ljava/lang/Object;)Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d823c.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent`;
  #L3d8240.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableMostRecent;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @kind direct;
  #L3d8246.  return v0 @kind object;
}
procedure `java.lang.Iterable` `blockingNext`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingNext:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8258.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableNext`;
  #L3d825c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d8262.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingSingle`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingSingle:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8378.  call temp:= `singleOrError`(v1) @signature `Lio/reactivex/Flowable;.singleOrError:()Lio/reactivex/Single;` @kind virtual;
  #L3d837e.  v0:= temp @kind object;
  #L3d8380.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/Single;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3d8386.  v0:= temp @kind object;
  #L3d8388.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingSingle`(`io.reactivex.Flowable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/Flowable;.blockingSingle:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d839c.  call temp:= `single`(v0, v1) @signature `Lio/reactivex/Flowable;.single:(Ljava/lang/Object;)Lio/reactivex/Single;` @kind virtual;
  #L3d83a2.  v1:= temp @kind object;
  #L3d83a4.  call temp:= `blockingGet`(v1) @signature `Lio/reactivex/Single;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L3d83aa.  v1:= temp @kind object;
  #L3d83ac.  return v1 @kind object;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v0 @kind this) @signature `Lio/reactivex/Flowable;.blockingSubscribe:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d8500.  call `subscribe`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;)V` @kind static;
  #L3d8506.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d8518.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3d851c.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d8520.  call `subscribe`(v2, v3, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind static;
  #L3d8526.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d8538.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3d853c.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d8540.  call `subscribe`(v2, v3, v0, v1, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;I)V` @kind static;
  #L3d8546.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8558.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d855c.  call `subscribe`(v1, v2, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind static;
  #L3d8562.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8574.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d8578.  call `subscribe`(v1, v2, v3, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;I)V` @kind static;
  #L3d857e.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d8590.  call `subscribe`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind static;
  #L3d8596.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d85a8.  call `subscribe`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;I)V` @kind static;
  #L3d85ae.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d85c0.  call `subscribe`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L3d85c6.  return @kind void;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/Flowable;.buffer:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d1b60.  call temp:= `buffer`(v0, v1, v1) @signature `Lio/reactivex/Flowable;.buffer:(II)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1b66.  v1:= temp @kind object;
  #L3d1b68.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lio/reactivex/Flowable;.buffer:(II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1b7c.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d1b82.  v0:= temp @kind object;
  #L3d1b84.  call temp:= `buffer`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.buffer:(IILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1b8a.  v2:= temp @kind object;
  #L3d1b8c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(IILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1ba0.  v0:= "count" @kind object;
  #L3d1ba4.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d1baa.  v0:= "skip" @kind object;
  #L3d1bae.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d1bb4.  v0:= "bufferSupplier is null" @kind object;
  #L3d1bb8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1bbe.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBuffer`;
  #L3d1bc2.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer;.<init>:(Lio/reactivex/Flowable;IILjava/util/concurrent/Callable;)V` @kind direct;
  #L3d1bc8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d1bce.  v2:= temp @kind object;
  #L3d1bd0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v0 @kind this, `int` v1 , `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(ILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d1be4.  call temp:= `buffer`(v0, v1, v1, v2) @signature `Lio/reactivex/Flowable;.buffer:(IILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1bea.  v1:= temp @kind object;
  #L3d1bec.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d1dec.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d1df2.  v6:= temp @kind object;
  #L3d1df4.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d1dfa.  v7:= temp @kind object;
  #L3d1dfc.  v0:= v8 @kind object;
  #L3d1dfe.  v1:= v9 @kind wide;
  #L3d1e00.  v3:= v11 @kind wide;
  #L3d1e02.  v5:= v13 @kind object;
  #L3d1e04.  call temp:= `buffer`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1e0a.  v9:= temp @kind object;
  #L3d1e0c.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object, `io.reactivex.Scheduler` v14 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d1e20.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d1e26.  v7:= temp @kind object;
  #L3d1e28.  v0:= v8 @kind object;
  #L3d1e2a.  v1:= v9 @kind wide;
  #L3d1e2c.  v3:= v11 @kind wide;
  #L3d1e2e.  v5:= v13 @kind object;
  #L3d1e30.  v6:= v14 @kind object;
  #L3d1e32.  call temp:= `buffer`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1e38.  v9:= temp @kind object;
  #L3d1e3a.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v12 @kind this, `long` v13 , `long` v15 , `java.util.concurrent.TimeUnit` v17 @kind object, `io.reactivex.Scheduler` v18 @kind object, `java.util.concurrent.Callable` v19 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3d1e4c.  v0:= "unit is null" @kind object;
  #L3d1e50.  v7:= v17 @kind object;
  #L3d1e54.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1e5a.  v0:= "scheduler is null" @kind object;
  #L3d1e5e.  v8:= v18 @kind object;
  #L3d1e62.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1e68.  v0:= "bufferSupplier is null" @kind object;
  #L3d1e6c.  v9:= v19 @kind object;
  #L3d1e70.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1e76.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed`;
  #L3d1e7a.  v10:= 2147483647I;
  #L3d1e80.  v11:= 0I;
  #L3d1e82.  v1:= v0 @kind object;
  #L3d1e84.  v2:= v12 @kind object;
  #L3d1e86.  v3:= v13 @kind wide;
  #L3d1e88.  v5:= v15 @kind wide;
  #L3d1e8a.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v10, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;IZ)V` @kind direct;
  #L3d1e90.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d1e96.  v0:= temp @kind object;
  #L3d1e98.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d1cc4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d1cca.  v4:= temp @kind object;
  #L3d1ccc.  v5:= 2147483647I;
  #L3d1cd2.  v0:= v6 @kind object;
  #L3d1cd4.  v1:= v7 @kind wide;
  #L3d1cd6.  v3:= v9 @kind object;
  #L3d1cd8.  call temp:= `buffer`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1cde.  v7:= temp @kind object;
  #L3d1ce0.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `int` v10 ) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d1cf4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d1cfa.  v4:= temp @kind object;
  #L3d1cfc.  v0:= v6 @kind object;
  #L3d1cfe.  v1:= v7 @kind wide;
  #L3d1d00.  v3:= v9 @kind object;
  #L3d1d02.  v5:= v10;
  #L3d1d04.  call temp:= `buffer`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1d0a.  v7:= temp @kind object;
  #L3d1d0c.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d1d20.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d1d26.  v6:= temp @kind object;
  #L3d1d28.  v5:= 2147483647I;
  #L3d1d2e.  v7:= 0I;
  #L3d1d30.  v0:= v8 @kind object;
  #L3d1d32.  v1:= v9 @kind wide;
  #L3d1d34.  v3:= v11 @kind object;
  #L3d1d36.  v4:= v12 @kind object;
  #L3d1d38.  call temp:= `buffer`(v0, v1, v3, v4, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ILjava/util/concurrent/Callable;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1d3e.  v9:= temp @kind object;
  #L3d1d40.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `int` v13 ) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d1d54.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d1d5a.  v6:= temp @kind object;
  #L3d1d5c.  v7:= 0I;
  #L3d1d5e.  v0:= v8 @kind object;
  #L3d1d60.  v1:= v9 @kind wide;
  #L3d1d62.  v3:= v11 @kind object;
  #L3d1d64.  v4:= v12 @kind object;
  #L3d1d66.  v5:= v13;
  #L3d1d68.  call temp:= `buffer`(v0, v1, v3, v4, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ILjava/util/concurrent/Callable;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1d6e.  v9:= temp @kind object;
  #L3d1d70.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v12 @kind this, `long` v13 , `java.util.concurrent.TimeUnit` v15 @kind object, `io.reactivex.Scheduler` v16 @kind object, `int` v17 , `java.util.concurrent.Callable` v18 @kind object, `boolean` v19 ) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ILjava/util/concurrent/Callable;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3d1d84.  v0:= "unit is null" @kind object;
  #L3d1d88.  v7:= v15 @kind object;
  #L3d1d8a.  call temp:= `requireNonNull`(v15, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1d90.  v0:= "scheduler is null" @kind object;
  #L3d1d94.  v8:= v16 @kind object;
  #L3d1d98.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1d9e.  v0:= "bufferSupplier is null" @kind object;
  #L3d1da2.  v9:= v18 @kind object;
  #L3d1da6.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1dac.  v0:= "count" @kind object;
  #L3d1db0.  v10:= v17;
  #L3d1db4.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d1dba.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed`;
  #L3d1dbe.  v1:= v0 @kind object;
  #L3d1dc0.  v2:= v12 @kind object;
  #L3d1dc2.  v3:= v13 @kind wide;
  #L3d1dc4.  v5:= v13 @kind wide;
  #L3d1dc6.  v11:= v19;
  #L3d1dca.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v10, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;IZ)V` @kind direct;
  #L3d1dd0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d1dd6.  v0:= temp @kind object;
  #L3d1dd8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Flowable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1c00.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d1c06.  v0:= temp @kind object;
  #L3d1c08.  call temp:= `buffer`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.buffer:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1c0e.  v2:= temp @kind object;
  #L3d1c10.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Flowable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1c24.  v0:= "openingIndicator is null" @kind object;
  #L3d1c28.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1c2e.  v0:= "closingIndicator is null" @kind object;
  #L3d1c32.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1c38.  v0:= "bufferSupplier is null" @kind object;
  #L3d1c3c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1c42.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary`;
  #L3d1c46.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d1c4c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d1c52.  v2:= temp @kind object;
  #L3d1c54.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1c68.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d1c6e.  v0:= temp @kind object;
  #L3d1c70.  call temp:= `buffer`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.buffer:(Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1c76.  v2:= temp @kind object;
  #L3d1c78.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1c8c.  v0:= "boundaryIndicatorSupplier is null" @kind object;
  #L3d1c90.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1c96.  v0:= "bufferSupplier is null" @kind object;
  #L3d1c9a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1ca0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier`;
  #L3d1ca4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d1caa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d1cb0.  v2:= temp @kind object;
  #L3d1cb2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1eac.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d1eb2.  v0:= temp @kind object;
  #L3d1eb4.  call temp:= `buffer`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1eba.  v2:= temp @kind object;
  #L3d1ebc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1ed0.  v0:= "initialCapacity" @kind object;
  #L3d1ed4.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d1eda.  call temp:= `createArrayList`(v3) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L3d1ee0.  v3:= temp @kind object;
  #L3d1ee2.  call temp:= `buffer`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1ee8.  v2:= temp @kind object;
  #L3d1eea.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1efc.  v0:= "boundaryIndicator is null" @kind object;
  #L3d1f00.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1f06.  v0:= "bufferSupplier is null" @kind object;
  #L3d1f0a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1f10.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary`;
  #L3d1f14.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d1f1a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d1f20.  v2:= temp @kind object;
  #L3d1f22.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `cache`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.cache:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1f34.  v0:= 16I;
  #L3d1f38.  call temp:= `cacheWithInitialCapacity`(v1, v0) @signature `Lio/reactivex/Flowable;.cacheWithInitialCapacity:(I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1f3e.  v0:= temp @kind object;
  #L3d1f40.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `cacheWithInitialCapacity`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.cacheWithInitialCapacity:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1f54.  v0:= "initialCapacity" @kind object;
  #L3d1f58.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d1f5e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCache`;
  #L3d1f62.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L3d1f68.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d1f6e.  v2:= temp @kind object;
  #L3d1f70.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `cast`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Flowable;.cast:(Ljava/lang/Class;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1f84.  v0:= "clazz is null" @kind object;
  #L3d1f88.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1f8e.  call temp:= `castFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.castFunction:(Ljava/lang/Class;)Lio/reactivex/functions/Function;` @kind static;
  #L3d1f94.  v2:= temp @kind object;
  #L3d1f96.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d1f9c.  v2:= temp @kind object;
  #L3d1f9e.  return v2 @kind object;
}
procedure `io.reactivex.Single` `collect`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7748.  v0:= "initialItemSupplier is null" @kind object;
  #L3d774c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7752.  v0:= "collector is null" @kind object;
  #L3d7756.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d775c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCollectSingle`;
  #L3d7760.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)V` @kind direct;
  #L3d7766.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d776c.  v2:= temp @kind object;
  #L3d776e.  return v2 @kind object;
}
procedure `io.reactivex.Single` `collectInto`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.collectInto:(Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7780.  v0:= "initialItem is null" @kind object;
  #L3d7784.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d778a.  call temp:= `justCallable`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justCallable:(Ljava/lang/Object;)Ljava/util/concurrent/Callable;` @kind static;
  #L3d7790.  v2:= temp @kind object;
  #L3d7792.  call temp:= `collect`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L3d7798.  v2:= temp @kind object;
  #L3d779a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `compose`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.FlowableTransformer` v2 @kind object) @signature `Lio/reactivex/Flowable;.compose:(Lio/reactivex/FlowableTransformer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d25dc.  v0:= "composer is null" @kind object;
  #L3d25e0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d25e6.  v2:= temp @kind object;
  #L3d25e8.  v2:= (`io.reactivex.FlowableTransformer`) v2 @kind object;
  #L3d25ec.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/FlowableTransformer;.apply:(Lio/reactivex/Flowable;)Lorg/reactivestreams/Publisher;` @kind interface;
  #L3d25f2.  v2:= temp @kind object;
  #L3d25f4.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d25fa.  v2:= temp @kind object;
  #L3d25fc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2a98.  v0:= 2I;
  #L3d2a9a.  call temp:= `concatMap`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2aa0.  v2:= temp @kind object;
  #L3d2aa2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d2ab4.  v0:= "mapper is null" @kind object;
  #L3d2ab8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2abe.  v0:= "prefetch" @kind object;
  #L3d2ac2.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2ac8.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L3d2acc.  if v0 == 0 then goto L3d2af6;
  #L3d2ad0.  v4:= v2 @kind object;
  #L3d2ad2.  v4:= (`io.reactivex.internal.fuseable.ScalarCallable`) v4 @kind object;
  #L3d2ad6.  call temp:= `call`(v4) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L3d2adc.  v4:= temp @kind object;
  #L3d2ade.  if v4 != 0 then goto L3d2aec;
  #L3d2ae2.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d2ae8.  v3:= temp @kind object;
  #L3d2aea.  return v3 @kind object;
  #L3d2aec.  call temp:= `scalarXMap`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3d2af2.  v3:= temp @kind object;
  #L3d2af4.  return v3 @kind object;
  #L3d2af6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap`;
  #L3d2afa.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2afe.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3d2b04.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2b0a.  v3:= temp @kind object;
  #L3d2b0c.  return v3 @kind object;
}
procedure `io.reactivex.Completable` `concatMapCompletable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMapCompletable:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d18e4.  v0:= 2I;
  #L3d18e6.  call temp:= `concatMapCompletable`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMapCompletable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Completable;` @kind virtual;
  #L3d18ec.  v2:= temp @kind object;
  #L3d18ee.  return v2 @kind object;
}
procedure `io.reactivex.Completable` `concatMapCompletable`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapCompletable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d1900.  v0:= "mapper is null" @kind object;
  #L3d1904.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d190a.  v0:= "prefetch" @kind object;
  #L3d190e.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d1914.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable`;
  #L3d1918.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d191c.  call `<init>`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L3d1922.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3d1928.  v3:= temp @kind object;
  #L3d192a.  return v3 @kind object;
}
procedure `io.reactivex.Completable` `concatMapCompletableDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapCompletableDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d193c.  v0:= 1I;
  #L3d193e.  v1:= 2I;
  #L3d1940.  call temp:= `concatMapCompletableDelayError`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapCompletableDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @kind virtual;
  #L3d1946.  v3:= temp @kind object;
  #L3d1948.  return v3 @kind object;
}
procedure `io.reactivex.Completable` `concatMapCompletableDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.concatMapCompletableDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d195c.  v0:= 2I;
  #L3d195e.  call temp:= `concatMapCompletableDelayError`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.concatMapCompletableDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @kind virtual;
  #L3d1964.  v2:= temp @kind object;
  #L3d1966.  return v2 @kind object;
}
procedure `io.reactivex.Completable` `concatMapCompletableDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapCompletableDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1978.  v0:= "mapper is null" @kind object;
  #L3d197c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1982.  v0:= "prefetch" @kind object;
  #L3d1986.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d198c.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable`;
  #L3d1990.  if v3 == 0 then goto L3d199a;
  #L3d1994.  v3:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d1998.  goto L3d199e;
  #L3d199a.  v3:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d199e.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L3d19a4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3d19aa.  v2:= temp @kind object;
  #L3d19ac.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d2b20.  v0:= 2I;
  #L3d2b22.  v1:= 1I;
  #L3d2b24.  call temp:= `concatMapDelayError`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2b2a.  v3:= temp @kind object;
  #L3d2b2c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2b40.  v0:= "mapper is null" @kind object;
  #L3d2b44.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2b4a.  v0:= "prefetch" @kind object;
  #L3d2b4e.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2b54.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L3d2b58.  if v0 == 0 then goto L3d2b82;
  #L3d2b5c.  v3:= v1 @kind object;
  #L3d2b5e.  v3:= (`io.reactivex.internal.fuseable.ScalarCallable`) v3 @kind object;
  #L3d2b62.  call temp:= `call`(v3) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L3d2b68.  v3:= temp @kind object;
  #L3d2b6a.  if v3 != 0 then goto L3d2b78;
  #L3d2b6e.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d2b74.  v2:= temp @kind object;
  #L3d2b76.  return v2 @kind object;
  #L3d2b78.  call temp:= `scalarXMap`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3d2b7e.  v2:= temp @kind object;
  #L3d2b80.  return v2 @kind object;
  #L3d2b82.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap`;
  #L3d2b86.  if v4 == 0 then goto L3d2b90;
  #L3d2b8a.  v4:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2b8e.  goto L3d2b94;
  #L3d2b90.  v4:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2b94.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3d2b9a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2ba0.  v2:= temp @kind object;
  #L3d2ba2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEager`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d2bb4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d2bba.  v0:= temp;
  #L3d2bbc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d2bc2.  v1:= temp;
  #L3d2bc4.  call temp:= `concatMapEager`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;II)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2bca.  v3:= temp @kind object;
  #L3d2bcc.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEager`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d2be0.  v0:= "mapper is null" @kind object;
  #L3d2be4.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2bea.  v0:= "maxConcurrency" @kind object;
  #L3d2bee.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2bf4.  v0:= "prefetch" @kind object;
  #L3d2bf8.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2bfe.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L3d2c02.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2c06.  v1:= v0 @kind object;
  #L3d2c08.  v2:= v7 @kind object;
  #L3d2c0a.  v3:= v8 @kind object;
  #L3d2c0c.  v4:= v9;
  #L3d2c0e.  v5:= v10;
  #L3d2c10.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3d2c16.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2c1c.  v8:= temp @kind object;
  #L3d2c1e.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEagerDelayError`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `int` v9 , `int` v10 , `boolean` v11 ) @signature `Lio/reactivex/Flowable;.concatMapEagerDelayError:(Lio/reactivex/functions/Function;IIZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d2c5c.  v0:= "mapper is null" @kind object;
  #L3d2c60.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2c66.  v0:= "maxConcurrency" @kind object;
  #L3d2c6a.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2c70.  v0:= "prefetch" @kind object;
  #L3d2c74.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2c7a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L3d2c7e.  if v11 == 0 then goto L3d2c88;
  #L3d2c82.  v11:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2c86.  goto L3d2c8c;
  #L3d2c88.  v11:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2c8c.  v6:= v11 @kind object;
  #L3d2c8e.  v1:= v0 @kind object;
  #L3d2c90.  v2:= v7 @kind object;
  #L3d2c92.  v3:= v8 @kind object;
  #L3d2c94.  v4:= v9;
  #L3d2c96.  v5:= v10;
  #L3d2c98.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L3d2c9e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2ca4.  v8:= temp @kind object;
  #L3d2ca6.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEagerDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.concatMapEagerDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d2c30.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d2c36.  v0:= temp;
  #L3d2c38.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d2c3e.  v1:= temp;
  #L3d2c40.  call temp:= `concatMapEagerDelayError`(v2, v3, v0, v1, v4) @signature `Lio/reactivex/Flowable;.concatMapEagerDelayError:(Lio/reactivex/functions/Function;IIZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2c46.  v3:= temp @kind object;
  #L3d2c48.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2cb8.  v0:= 2I;
  #L3d2cba.  call temp:= `concatMapIterable`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2cc0.  v2:= temp @kind object;
  #L3d2cc2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.concatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2cd4.  v0:= "mapper is null" @kind object;
  #L3d2cd8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2cde.  v0:= "prefetch" @kind object;
  #L3d2ce2.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2ce8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlattenIterable`;
  #L3d2cec.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L3d2cf2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2cf8.  v2:= temp @kind object;
  #L3d2cfa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapMaybe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMapMaybe:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2d0c.  v0:= 2I;
  #L3d2d0e.  call temp:= `concatMapMaybe`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMapMaybe:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2d14.  v2:= temp @kind object;
  #L3d2d16.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapMaybe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapMaybe:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d2d28.  v0:= "mapper is null" @kind object;
  #L3d2d2c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2d32.  v0:= "prefetch" @kind object;
  #L3d2d36.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2d3c.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe`;
  #L3d2d40.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2d44.  call `<init>`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L3d2d4a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2d50.  v3:= temp @kind object;
  #L3d2d52.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapMaybeDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d2d64.  v0:= 1I;
  #L3d2d66.  v1:= 2I;
  #L3d2d68.  call temp:= `concatMapMaybeDelayError`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2d6e.  v3:= temp @kind object;
  #L3d2d70.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapMaybeDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2d84.  v0:= 2I;
  #L3d2d86.  call temp:= `concatMapMaybeDelayError`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2d8c.  v2:= temp @kind object;
  #L3d2d8e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapMaybeDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2da0.  v0:= "mapper is null" @kind object;
  #L3d2da4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2daa.  v0:= "prefetch" @kind object;
  #L3d2dae.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2db4.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe`;
  #L3d2db8.  if v3 == 0 then goto L3d2dc2;
  #L3d2dbc.  v3:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2dc0.  goto L3d2dc6;
  #L3d2dc2.  v3:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2dc6.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L3d2dcc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2dd2.  v2:= temp @kind object;
  #L3d2dd4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapSingle`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMapSingle:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2de8.  v0:= 2I;
  #L3d2dea.  call temp:= `concatMapSingle`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMapSingle:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2df0.  v2:= temp @kind object;
  #L3d2df2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapSingle`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapSingle:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d2e04.  v0:= "mapper is null" @kind object;
  #L3d2e08.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2e0e.  v0:= "prefetch" @kind object;
  #L3d2e12.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2e18.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle`;
  #L3d2e1c.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2e20.  call `<init>`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L3d2e26.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2e2c.  v3:= temp @kind object;
  #L3d2e2e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapSingleDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapSingleDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d2e40.  v0:= 1I;
  #L3d2e42.  v1:= 2I;
  #L3d2e44.  call temp:= `concatMapSingleDelayError`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapSingleDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2e4a.  v3:= temp @kind object;
  #L3d2e4c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapSingleDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.concatMapSingleDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2e60.  v0:= 2I;
  #L3d2e62.  call temp:= `concatMapSingleDelayError`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.concatMapSingleDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2e68.  v2:= temp @kind object;
  #L3d2e6a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapSingleDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapSingleDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2e7c.  v0:= "mapper is null" @kind object;
  #L3d2e80.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2e86.  v0:= "prefetch" @kind object;
  #L3d2e8a.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d2e90.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle`;
  #L3d2e94.  if v3 == 0 then goto L3d2e9e;
  #L3d2e98.  v3:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2e9c.  goto L3d2ea2;
  #L3d2e9e.  v3:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3d2ea2.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L3d2ea8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2eae.  v2:= temp @kind object;
  #L3d2eb0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatWith:(Lio/reactivex/CompletableSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2ec4.  v0:= "other is null" @kind object;
  #L3d2ec8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2ece.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable`;
  #L3d2ed2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/CompletableSource;)V` @kind direct;
  #L3d2ed8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2ede.  v2:= temp @kind object;
  #L3d2ee0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2ef4.  v0:= "other is null" @kind object;
  #L3d2ef8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2efe.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe`;
  #L3d2f02.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d2f08.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2f0e.  v2:= temp @kind object;
  #L3d2f10.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatWith:(Lio/reactivex/SingleSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2f24.  v0:= "other is null" @kind object;
  #L3d2f28.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2f2e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatWithSingle`;
  #L3d2f32.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/SingleSource;)V` @kind direct;
  #L3d2f38.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2f3e.  v2:= temp @kind object;
  #L3d2f40.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2f54.  v0:= "other is null" @kind object;
  #L3d2f58.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2f5e.  call temp:= `concat`(v1, v2) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d2f64.  v2:= temp @kind object;
  #L3d2f66.  return v2 @kind object;
}
procedure `io.reactivex.Single` `contains`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.contains:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d77ac.  v0:= "item is null" @kind object;
  #L3d77b0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d77b6.  call temp:= `equalsWith`(v2) @signature `Lio/reactivex/internal/functions/Functions;.equalsWith:(Ljava/lang/Object;)Lio/reactivex/functions/Predicate;` @kind static;
  #L3d77bc.  v2:= temp @kind object;
  #L3d77be.  call temp:= `any`(v1, v2) @signature `Lio/reactivex/Flowable;.any:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @kind virtual;
  #L3d77c4.  v2:= temp @kind object;
  #L3d77c6.  return v2 @kind object;
}
procedure `io.reactivex.Single` `count`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.count:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d77d8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCountSingle`;
  #L3d77dc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d77e2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d77e8.  v0:= temp @kind object;
  #L3d77ea.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `debounce`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2fe0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d2fe6.  v0:= temp @kind object;
  #L3d2fe8.  call temp:= `debounce`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d2fee.  v2:= temp @kind object;
  #L3d2ff0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `debounce`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d3004.  v0:= "unit is null" @kind object;
  #L3d3008.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d300e.  v0:= "scheduler is null" @kind object;
  #L3d3012.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3018.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDebounceTimed`;
  #L3d301c.  v1:= v0 @kind object;
  #L3d301e.  v2:= v7 @kind object;
  #L3d3020.  v3:= v8 @kind wide;
  #L3d3022.  v5:= v10 @kind object;
  #L3d3024.  v6:= v11 @kind object;
  #L3d3026.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d302c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3032.  v8:= temp @kind object;
  #L3d3034.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `debounce`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.debounce:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2fb0.  v0:= "debounceIndicator is null" @kind object;
  #L3d2fb4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2fba.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDebounce`;
  #L3d2fbe.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d2fc4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d2fca.  v2:= temp @kind object;
  #L3d2fcc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `defaultIfEmpty`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.defaultIfEmpty:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3048.  v0:= "item is null" @kind object;
  #L3d304c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3052.  call temp:= `just`(v2) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d3058.  v2:= temp @kind object;
  #L3d305a.  call temp:= `switchIfEmpty`(v1, v2) @signature `Lio/reactivex/Flowable;.switchIfEmpty:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3060.  v2:= temp @kind object;
  #L3d3062.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d30d0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d30d6.  v4:= temp @kind object;
  #L3d30d8.  v5:= 0I;
  #L3d30da.  v0:= v6 @kind object;
  #L3d30dc.  v1:= v7 @kind wide;
  #L3d30de.  v3:= v9 @kind object;
  #L3d30e0.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d30e6.  v7:= temp @kind object;
  #L3d30e8.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d3128.  v5:= 0I;
  #L3d312a.  v0:= v6 @kind object;
  #L3d312c.  v1:= v7 @kind wide;
  #L3d312e.  v3:= v9 @kind object;
  #L3d3130.  v4:= v10 @kind object;
  #L3d3132.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3138.  v7:= temp @kind object;
  #L3d313a.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `boolean` v13 ) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d314c.  v0:= "unit is null" @kind object;
  #L3d3150.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3156.  v0:= "scheduler is null" @kind object;
  #L3d315a.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3160.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDelay`;
  #L3d3164.  v1:= 0L;
  #L3d3168.  call temp:= `max`(v1, v9) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3d316e.  v3:= temp @kind wide;
  #L3d3170.  v1:= v0 @kind object;
  #L3d3172.  v2:= v8 @kind object;
  #L3d3174.  v5:= v11 @kind object;
  #L3d3176.  v6:= v12 @kind object;
  #L3d3178.  v7:= v13;
  #L3d317a.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L3d3180.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3186.  v9:= temp @kind object;
  #L3d3188.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `boolean` v10 ) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d30fc.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d3102.  v4:= temp @kind object;
  #L3d3104.  v0:= v6 @kind object;
  #L3d3106.  v1:= v7 @kind wide;
  #L3d3108.  v3:= v9 @kind object;
  #L3d310a.  v5:= v10;
  #L3d310c.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3112.  v7:= temp @kind object;
  #L3d3114.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.delay:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d30a4.  v0:= "itemDelayIndicator is null" @kind object;
  #L3d30a8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d30ae.  call temp:= `itemDelay`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.itemDelay:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L3d30b4.  v2:= temp @kind object;
  #L3d30b6.  call temp:= `flatMap`(v1, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d30bc.  v2:= temp @kind object;
  #L3d30be.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.delay:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d319c.  call temp:= `delaySubscription`(v0, v1) @signature `Lio/reactivex/Flowable;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d31a2.  v1:= temp @kind object;
  #L3d31a4.  call temp:= `delay`(v1, v2) @signature `Lio/reactivex/Flowable;.delay:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d31aa.  v1:= temp @kind object;
  #L3d31ac.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `delaySubscription`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d31c0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d31c6.  v0:= temp @kind object;
  #L3d31c8.  call temp:= `delaySubscription`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d31ce.  v2:= temp @kind object;
  #L3d31d0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `delaySubscription`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d31e4.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3d31ea.  v1:= temp @kind object;
  #L3d31ec.  call temp:= `delaySubscription`(v0, v1) @signature `Lio/reactivex/Flowable;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d31f2.  v1:= temp @kind object;
  #L3d31f4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `delaySubscription`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3208.  v0:= "subscriptionIndicator is null" @kind object;
  #L3d320c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3212.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther`;
  #L3d3216.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d321c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3222.  v2:= temp @kind object;
  #L3d3224.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `dematerialize`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.dematerialize:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3238.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDematerialize`;
  #L3d323c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d3242.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3248.  v0:= temp @kind object;
  #L3d324a.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `distinct`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.distinct:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d325c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d3262.  v0:= temp @kind object;
  #L3d3264.  call temp:= `createHashSet`() @signature `Lio/reactivex/internal/functions/Functions;.createHashSet:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d326a.  v1:= temp @kind object;
  #L3d326c.  call temp:= `distinct`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3272.  v0:= temp @kind object;
  #L3d3274.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `distinct`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3288.  call temp:= `createHashSet`() @signature `Lio/reactivex/internal/functions/Functions;.createHashSet:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d328e.  v0:= temp @kind object;
  #L3d3290.  call temp:= `distinct`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3296.  v2:= temp @kind object;
  #L3d3298.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `distinct`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d32ac.  v0:= "keySelector is null" @kind object;
  #L3d32b0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d32b6.  v0:= "collectionSupplier is null" @kind object;
  #L3d32ba.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d32c0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDistinct`;
  #L3d32c4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d32ca.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d32d0.  v2:= temp @kind object;
  #L3d32d2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `distinctUntilChanged`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d32e4.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d32ea.  v0:= temp @kind object;
  #L3d32ec.  call temp:= `distinctUntilChanged`(v1, v0) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d32f2.  v0:= temp @kind object;
  #L3d32f4.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `distinctUntilChanged`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d3308.  v0:= "comparer is null" @kind object;
  #L3d330c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3312.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged`;
  #L3d3316.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d331c.  v1:= temp @kind object;
  #L3d331e.  call `<init>`(v0, v2, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L3d3324.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d332a.  v3:= temp @kind object;
  #L3d332c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `distinctUntilChanged`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d3340.  v0:= "keySelector is null" @kind object;
  #L3d3344.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d334a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged`;
  #L3d334e.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L3d3354.  v1:= temp @kind object;
  #L3d3356.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L3d335c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3362.  v3:= temp @kind object;
  #L3d3364.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doAfterNext`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.doAfterNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3378.  v0:= "onAfterNext is null" @kind object;
  #L3d337c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3382.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoAfterNext`;
  #L3d3386.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3d338c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3392.  v2:= temp @kind object;
  #L3d3394.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `doAfterTerminate`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doAfterTerminate:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d33a8.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d33ae.  v0:= temp @kind object;
  #L3d33b0.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d33b6.  v1:= temp @kind object;
  #L3d33b8.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d33bc.  call temp:= `doOnEach`(v3, v0, v1, v2, v4) @signature `Lio/reactivex/Flowable;.doOnEach:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3d33c2.  v4:= temp @kind object;
  #L3d33c4.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doFinally`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/Flowable;.doFinally:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d33d8.  v0:= "onFinally is null" @kind object;
  #L3d33dc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d33e2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoFinally`;
  #L3d33e6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d33ec.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d33f2.  v2:= temp @kind object;
  #L3d33f4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `doOnCancel`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnCancel:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d3408.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d340e.  v0:= temp @kind object;
  #L3d3410.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L3d3414.  call temp:= `doOnLifecycle`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d341a.  v3:= temp @kind object;
  #L3d341c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnComplete`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnComplete:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d3430.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d3436.  v0:= temp @kind object;
  #L3d3438.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d343e.  v1:= temp @kind object;
  #L3d3440.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d3444.  call temp:= `doOnEach`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.doOnEach:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3d344a.  v4:= temp @kind object;
  #L3d344c.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doOnEach`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnEach:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d3460.  v0:= "consumer is null" @kind object;
  #L3d3464.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d346a.  call temp:= `notificationOnNext`(v4) @signature `Lio/reactivex/internal/functions/Functions;.notificationOnNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/Consumer;` @kind static;
  #L3d3470.  v0:= temp @kind object;
  #L3d3472.  call temp:= `notificationOnError`(v4) @signature `Lio/reactivex/internal/functions/Functions;.notificationOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/Consumer;` @kind static;
  #L3d3478.  v1:= temp @kind object;
  #L3d347a.  call temp:= `notificationOnComplete`(v4) @signature `Lio/reactivex/internal/functions/Functions;.notificationOnComplete:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/Action;` @kind static;
  #L3d3480.  v4:= temp @kind object;
  #L3d3482.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d3486.  call temp:= `doOnEach`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.doOnEach:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3d348c.  v4:= temp @kind object;
  #L3d348e.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doOnEach`(`io.reactivex.Flowable` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnEach:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d34f8.  v0:= "subscriber is null" @kind object;
  #L3d34fc.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3502.  call temp:= `subscriberOnNext`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.subscriberOnNext:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/functions/Consumer;` @kind static;
  #L3d3508.  v0:= temp @kind object;
  #L3d350a.  call temp:= `subscriberOnError`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.subscriberOnError:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/functions/Consumer;` @kind static;
  #L3d3510.  v1:= temp @kind object;
  #L3d3512.  call temp:= `subscriberOnComplete`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.subscriberOnComplete:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/functions/Action;` @kind static;
  #L3d3518.  v4:= temp @kind object;
  #L3d351a.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d351e.  call temp:= `doOnEach`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.doOnEach:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3d3524.  v4:= temp @kind object;
  #L3d3526.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doOnError`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d3538.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d353e.  v0:= temp @kind object;
  #L3d3540.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d3544.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d3548.  call temp:= `doOnEach`(v3, v0, v4, v1, v2) @signature `Lio/reactivex/Flowable;.doOnEach:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3d354e.  v4:= temp @kind object;
  #L3d3550.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doOnLifecycle`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.LongConsumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3564.  v0:= "onSubscribe is null" @kind object;
  #L3d3568.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d356e.  v0:= "onRequest is null" @kind object;
  #L3d3572.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3578.  v0:= "onCancel is null" @kind object;
  #L3d357c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3582.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoOnLifecycle`;
  #L3d3586.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnLifecycle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d358c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3592.  v2:= temp @kind object;
  #L3d3594.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `doOnNext`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d35a8.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d35ae.  v0:= temp @kind object;
  #L3d35b0.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d35b4.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d35b8.  call temp:= `doOnEach`(v3, v4, v0, v1, v2) @signature `Lio/reactivex/Flowable;.doOnEach:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3d35be.  v4:= temp @kind object;
  #L3d35c0.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doOnRequest`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.LongConsumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnRequest:(Lio/reactivex/functions/LongConsumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d35d4.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d35da.  v0:= temp @kind object;
  #L3d35dc.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d35e0.  call temp:= `doOnLifecycle`(v2, v0, v3, v1) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d35e6.  v3:= temp @kind object;
  #L3d35e8.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnSubscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnSubscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d35fc.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L3d3600.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d3604.  call temp:= `doOnLifecycle`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d360a.  v3:= temp @kind object;
  #L3d360c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnTerminate`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnTerminate:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d3620.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d3626.  v0:= temp @kind object;
  #L3d3628.  call temp:= `actionConsumer`(v4) @signature `Lio/reactivex/internal/functions/Functions;.actionConsumer:(Lio/reactivex/functions/Action;)Lio/reactivex/functions/Consumer;` @kind static;
  #L3d362e.  v1:= temp @kind object;
  #L3d3630.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d3634.  call temp:= `doOnEach`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.doOnEach:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L3d363a.  v4:= temp @kind object;
  #L3d363c.  return v4 @kind object;
}
procedure `io.reactivex.Maybe` `elementAt`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.elementAt:(J)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d75cc.  v0:= 0L;
  #L3d75d0.  v2:= lcmp(v4, v0);
  #L3d75d4.  if v2 < 0 then goto L3d75ec;
  #L3d75d8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe`;
  #L3d75dc.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L3d75e2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d75e8.  v4:= temp @kind object;
  #L3d75ea.  return v4 @kind object;
  #L3d75ec.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3d75f0.  v1:= new `java.lang.StringBuilder`;
  #L3d75f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d75fa.  v2:= "index >= 0 required but it was " @kind object;
  #L3d75fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7604.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d760a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d7610.  v4:= temp @kind object;
  #L3d7612.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7618.  throw v0;
}
procedure `io.reactivex.Single` `elementAt`(`io.reactivex.Flowable` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/Flowable;.elementAt:(JLjava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d77fc.  v0:= 0L;
  #L3d7800.  v2:= lcmp(v4, v0);
  #L3d7804.  if v2 < 0 then goto L3d7826;
  #L3d7808.  v0:= "defaultItem is null" @kind object;
  #L3d780c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7812.  v0:= new `io.reactivex.internal.operators.flowable.FlowableElementAtSingle`;
  #L3d7816.  call `<init>`(v0, v3, v4, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle;.<init>:(Lio/reactivex/Flowable;JLjava/lang/Object;)V` @kind direct;
  #L3d781c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d7822.  v4:= temp @kind object;
  #L3d7824.  return v4 @kind object;
  #L3d7826.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L3d782a.  v0:= new `java.lang.StringBuilder`;
  #L3d782e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d7834.  v1:= "index >= 0 required but it was " @kind object;
  #L3d7838.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d783e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7844.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d784a.  v4:= temp @kind object;
  #L3d784c.  call `<init>`(v6, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7852.  throw v6;
}
procedure `io.reactivex.Single` `elementAtOrError`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.elementAtOrError:(J)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d7864.  v0:= 0L;
  #L3d7868.  v2:= lcmp(v4, v0);
  #L3d786c.  if v2 < 0 then goto L3d7886;
  #L3d7870.  v0:= new `io.reactivex.internal.operators.flowable.FlowableElementAtSingle`;
  #L3d7874.  v1:= 0I;
  #L3d7876.  call `<init>`(v0, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle;.<init>:(Lio/reactivex/Flowable;JLjava/lang/Object;)V` @kind direct;
  #L3d787c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d7882.  v4:= temp @kind object;
  #L3d7884.  return v4 @kind object;
  #L3d7886.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3d788a.  v1:= new `java.lang.StringBuilder`;
  #L3d788e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d7894.  v2:= "index >= 0 required but it was " @kind object;
  #L3d7898.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d789e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d78a4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d78aa.  v4:= temp @kind object;
  #L3d78ac.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d78b2.  throw v0;
}
procedure `io.reactivex.Flowable` `filter`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d36cc.  v0:= "predicate is null" @kind object;
  #L3d36d0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d36d6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFilter`;
  #L3d36da.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3d36e0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d36e6.  v2:= temp @kind object;
  #L3d36e8.  return v2 @kind object;
}
procedure `io.reactivex.Single` `first`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/Flowable;.first:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d78c4.  v0:= 0L;
  #L3d78c8.  call temp:= `elementAt`(v2, v0, v3) @signature `Lio/reactivex/Flowable;.elementAt:(JLjava/lang/Object;)Lio/reactivex/Single;` @kind virtual;
  #L3d78ce.  v3:= temp @kind object;
  #L3d78d0.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `firstElement`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.firstElement:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d762c.  v0:= 0L;
  #L3d7630.  call temp:= `elementAt`(v2, v0) @signature `Lio/reactivex/Flowable;.elementAt:(J)Lio/reactivex/Maybe;` @kind virtual;
  #L3d7636.  v0:= temp @kind object;
  #L3d7638.  return v0 @kind object;
}
procedure `io.reactivex.Single` `firstOrError`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.firstOrError:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d78e4.  v0:= 0L;
  #L3d78e8.  call temp:= `elementAtOrError`(v2, v0) @signature `Lio/reactivex/Flowable;.elementAtOrError:(J)Lio/reactivex/Single;` @kind virtual;
  #L3d78ee.  v0:= temp @kind object;
  #L3d78f0.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d36fc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3702.  v0:= temp;
  #L3d3704.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d370a.  v1:= temp;
  #L3d370c.  v2:= 0I;
  #L3d370e.  call temp:= `flatMap`(v3, v4, v2, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3714.  v4:= temp @kind object;
  #L3d3716.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d37f4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d37fa.  v0:= temp;
  #L3d37fc.  v1:= 0I;
  #L3d37fe.  call temp:= `flatMap`(v2, v3, v1, v4, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3804.  v3:= temp @kind object;
  #L3d3806.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d3818.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d381e.  v4:= temp;
  #L3d3820.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3826.  v5:= temp;
  #L3d3828.  v3:= 0I;
  #L3d382a.  v0:= v6 @kind object;
  #L3d382c.  v1:= v7 @kind object;
  #L3d382e.  v2:= v8 @kind object;
  #L3d3830.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3836.  v7:= temp @kind object;
  #L3d3838.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object, `int` v9 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d38f8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d38fe.  v5:= temp;
  #L3d3900.  v3:= 0I;
  #L3d3902.  v0:= v6 @kind object;
  #L3d3904.  v1:= v7 @kind object;
  #L3d3906.  v2:= v8 @kind object;
  #L3d3908.  v4:= v9;
  #L3d390a.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3910.  v7:= temp @kind object;
  #L3d3912.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object, `boolean` v9 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d384c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3852.  v4:= temp;
  #L3d3854.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d385a.  v5:= temp;
  #L3d385c.  v0:= v6 @kind object;
  #L3d385e.  v1:= v7 @kind object;
  #L3d3860.  v2:= v8 @kind object;
  #L3d3862.  v3:= v9;
  #L3d3864.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d386a.  v7:= temp @kind object;
  #L3d386c.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object, `boolean` v9 , `int` v10 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d3880.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3886.  v5:= temp;
  #L3d3888.  v0:= v6 @kind object;
  #L3d388a.  v1:= v7 @kind object;
  #L3d388c.  v2:= v8 @kind object;
  #L3d388e.  v3:= v9;
  #L3d3890.  v4:= v10;
  #L3d3892.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3898.  v7:= temp @kind object;
  #L3d389a.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d38ac.  v0:= "mapper is null" @kind object;
  #L3d38b0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d38b6.  v0:= "combiner is null" @kind object;
  #L3d38ba.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d38c0.  v0:= "maxConcurrency" @kind object;
  #L3d38c4.  call temp:= `verifyPositive`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d38ca.  v0:= "bufferSize" @kind object;
  #L3d38ce.  call temp:= `verifyPositive`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d38d4.  call temp:= `flatMapWithCombiner`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.flatMapWithCombiner:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L3d38da.  v2:= temp @kind object;
  #L3d38dc.  call temp:= `flatMap`(v1, v2, v4, v5, v6) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d38e2.  v2:= temp @kind object;
  #L3d38e4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3924.  v0:= "onNextMapper is null" @kind object;
  #L3d3928.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d392e.  v0:= "onErrorMapper is null" @kind object;
  #L3d3932.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3938.  v0:= "onCompleteSupplier is null" @kind object;
  #L3d393c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3942.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMapNotification`;
  #L3d3946.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableMapNotification;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d394c.  call temp:= `merge`(v0) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d3952.  v2:= temp @kind object;
  #L3d3954.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3968.  v0:= "onNextMapper is null" @kind object;
  #L3d396c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3972.  v0:= "onErrorMapper is null" @kind object;
  #L3d3976.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d397c.  v0:= "onCompleteSupplier is null" @kind object;
  #L3d3980.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3986.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMapNotification`;
  #L3d398a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableMapNotification;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d3990.  call temp:= `merge`(v0, v5) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L3d3996.  v2:= temp @kind object;
  #L3d3998.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d3728.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d372e.  v0:= temp;
  #L3d3730.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3736.  v1:= temp;
  #L3d3738.  call temp:= `flatMap`(v2, v3, v4, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d373e.  v3:= temp @kind object;
  #L3d3740.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3754.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d375a.  v0:= temp;
  #L3d375c.  call temp:= `flatMap`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3762.  v2:= temp @kind object;
  #L3d3764.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d3778.  v0:= "mapper is null" @kind object;
  #L3d377c.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3782.  v0:= "maxConcurrency" @kind object;
  #L3d3786.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d378c.  v0:= "bufferSize" @kind object;
  #L3d3790.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d3796.  v0:= instanceof @variable v7 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L3d379a.  if v0 == 0 then goto L3d37c4;
  #L3d379e.  v9:= v7 @kind object;
  #L3d37a0.  v9:= (`io.reactivex.internal.fuseable.ScalarCallable`) v9 @kind object;
  #L3d37a4.  call temp:= `call`(v9) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L3d37aa.  v9:= temp @kind object;
  #L3d37ac.  if v9 != 0 then goto L3d37ba;
  #L3d37b0.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d37b6.  v8:= temp @kind object;
  #L3d37b8.  return v8 @kind object;
  #L3d37ba.  call temp:= `scalarXMap`(v9, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3d37c0.  v8:= temp @kind object;
  #L3d37c2.  return v8 @kind object;
  #L3d37c4.  v6:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap`;
  #L3d37c8.  v0:= v6 @kind object;
  #L3d37ca.  v1:= v7 @kind object;
  #L3d37cc.  v2:= v8 @kind object;
  #L3d37ce.  v3:= v9;
  #L3d37d0.  v4:= v10;
  #L3d37d2.  v5:= v11;
  #L3d37d4.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZII)V` @kind direct;
  #L3d37da.  call temp:= `onAssembly`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d37e0.  v8:= temp @kind object;
  #L3d37e2.  return v8 @kind object;
}
procedure `io.reactivex.Completable` `flatMapCompletable`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.flatMapCompletable:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d19c0.  v0:= 0I;
  #L3d19c2.  v1:= 2147483647I;
  #L3d19c8.  call temp:= `flatMapCompletable`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.flatMapCompletable:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @kind virtual;
  #L3d19ce.  v3:= temp @kind object;
  #L3d19d0.  return v3 @kind object;
}
procedure `io.reactivex.Completable` `flatMapCompletable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMapCompletable:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d19e4.  v0:= "mapper is null" @kind object;
  #L3d19e8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d19ee.  v0:= "maxConcurrency" @kind object;
  #L3d19f2.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d19f8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable`;
  #L3d19fc.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L3d1a02.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3d1a08.  v2:= temp @kind object;
  #L3d1a0a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d39ac.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d39b2.  v0:= temp;
  #L3d39b4.  call temp:= `flatMapIterable`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d39ba.  v2:= temp @kind object;
  #L3d39bc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d39d0.  v0:= "mapper is null" @kind object;
  #L3d39d4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d39da.  v0:= "bufferSize" @kind object;
  #L3d39de.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d39e4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlattenIterable`;
  #L3d39e8.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L3d39ee.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d39f4.  v2:= temp @kind object;
  #L3d39f6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `io.reactivex.functions.BiFunction` v9 @kind object) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d3a08.  v0:= "mapper is null" @kind object;
  #L3d3a0c.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3a12.  v0:= "resultSelector is null" @kind object;
  #L3d3a16.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3a1c.  call temp:= `flatMapIntoIterable`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.flatMapIntoIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L3d3a22.  v2:= temp @kind object;
  #L3d3a24.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3a2a.  v5:= temp;
  #L3d3a2c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3a32.  v6:= temp;
  #L3d3a34.  v4:= 0I;
  #L3d3a36.  v1:= v7 @kind object;
  #L3d3a38.  v3:= v9 @kind object;
  #L3d3a3a.  call temp:= `flatMap`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3a40.  v8:= temp @kind object;
  #L3d3a42.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `io.reactivex.functions.BiFunction` v9 @kind object, `int` v10 ) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d3a54.  v0:= "mapper is null" @kind object;
  #L3d3a58.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3a5e.  v0:= "resultSelector is null" @kind object;
  #L3d3a62.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3a68.  call temp:= `flatMapIntoIterable`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.flatMapIntoIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L3d3a6e.  v2:= temp @kind object;
  #L3d3a70.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3a76.  v5:= temp;
  #L3d3a78.  v4:= 0I;
  #L3d3a7a.  v1:= v7 @kind object;
  #L3d3a7c.  v3:= v9 @kind object;
  #L3d3a7e.  v6:= v10;
  #L3d3a80.  call temp:= `flatMap`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3a86.  v8:= temp @kind object;
  #L3d3a88.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapMaybe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.flatMapMaybe:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d3a9c.  v0:= 0I;
  #L3d3a9e.  v1:= 2147483647I;
  #L3d3aa4.  call temp:= `flatMapMaybe`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.flatMapMaybe:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3aaa.  v3:= temp @kind object;
  #L3d3aac.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapMaybe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMapMaybe:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3ac0.  v0:= "mapper is null" @kind object;
  #L3d3ac4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3aca.  v0:= "maxConcurrency" @kind object;
  #L3d3ace.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d3ad4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe`;
  #L3d3ad8.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L3d3ade.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3ae4.  v2:= temp @kind object;
  #L3d3ae6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapSingle`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.flatMapSingle:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d3af8.  v0:= 0I;
  #L3d3afa.  v1:= 2147483647I;
  #L3d3b00.  call temp:= `flatMapSingle`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.flatMapSingle:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3b06.  v3:= temp @kind object;
  #L3d3b08.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapSingle`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMapSingle:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3b1c.  v0:= "mapper is null" @kind object;
  #L3d3b20.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3b26.  v0:= "maxConcurrency" @kind object;
  #L3d3b2a.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d3b30.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle`;
  #L3d3b34.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L3d3b3a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3b40.  v2:= temp @kind object;
  #L3d3b42.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEach`(`io.reactivex.Flowable` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object) @signature `Lio/reactivex/Flowable;.forEach:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d7dc0.  call temp:= `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3d7dc6.  v1:= temp @kind object;
  #L3d7dc8.  return v1 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEachWhile`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d7ddc.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3d7de0.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d7de4.  call temp:= `forEachWhile`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3d7dea.  v3:= temp @kind object;
  #L3d7dec.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEachWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7e00.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d7e04.  call temp:= `forEachWhile`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3d7e0a.  v2:= temp @kind object;
  #L3d7e0c.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEachWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7e20.  v0:= "onNext is null" @kind object;
  #L3d7e24.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7e2a.  v0:= "onError is null" @kind object;
  #L3d7e2e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7e34.  v0:= "onComplete is null" @kind object;
  #L3d7e38.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7e3e.  v0:= new `io.reactivex.internal.subscribers.ForEachWhileSubscriber`;
  #L3d7e42.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L3d7e48.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d7e4e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d3e18.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d3e1e.  v0:= temp @kind object;
  #L3d3e20.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3e26.  v1:= temp;
  #L3d3e28.  v2:= 0I;
  #L3d3e2a.  call temp:= `groupBy`(v3, v4, v0, v2, v1) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3e30.  v4:= temp @kind object;
  #L3d3e32.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d3e70.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3e76.  v0:= temp;
  #L3d3e78.  v1:= 0I;
  #L3d3e7a.  call temp:= `groupBy`(v2, v3, v4, v1, v0) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3e80.  v3:= temp @kind object;
  #L3d3e82.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3e94.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3e9a.  v0:= temp;
  #L3d3e9c.  call temp:= `groupBy`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3ea2.  v2:= temp @kind object;
  #L3d3ea4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v8 @kind this, `io.reactivex.functions.Function` v9 @kind object, `io.reactivex.functions.Function` v10 @kind object, `boolean` v11 , `int` v12 ) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d3eb8.  v0:= "keySelector is null" @kind object;
  #L3d3ebc.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3ec2.  v0:= "valueSelector is null" @kind object;
  #L3d3ec6.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3ecc.  v0:= "bufferSize" @kind object;
  #L3d3ed0.  call temp:= `verifyPositive`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d3ed6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGroupBy`;
  #L3d3eda.  v7:= 0I;
  #L3d3edc.  v1:= v0 @kind object;
  #L3d3ede.  v2:= v8 @kind object;
  #L3d3ee0.  v3:= v9 @kind object;
  #L3d3ee2.  v4:= v10 @kind object;
  #L3d3ee4.  v5:= v12;
  #L3d3ee6.  v6:= v11;
  #L3d3ee8.  call `<init>`(v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZLio/reactivex/functions/Function;)V` @kind direct;
  #L3d3eee.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3ef4.  v9:= temp @kind object;
  #L3d3ef6.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v8 @kind this, `io.reactivex.functions.Function` v9 @kind object, `io.reactivex.functions.Function` v10 @kind object, `boolean` v11 , `int` v12 , `io.reactivex.functions.Function` v13 @kind object) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZILio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d3f08.  v0:= "keySelector is null" @kind object;
  #L3d3f0c.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3f12.  v0:= "valueSelector is null" @kind object;
  #L3d3f16.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3f1c.  v0:= "bufferSize" @kind object;
  #L3d3f20.  call temp:= `verifyPositive`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d3f26.  v0:= "evictingMapFactory is null" @kind object;
  #L3d3f2a.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3f30.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGroupBy`;
  #L3d3f34.  v1:= v0 @kind object;
  #L3d3f36.  v2:= v8 @kind object;
  #L3d3f38.  v3:= v9 @kind object;
  #L3d3f3a.  v4:= v10 @kind object;
  #L3d3f3c.  v5:= v12;
  #L3d3f3e.  v6:= v11;
  #L3d3f40.  v7:= v13 @kind object;
  #L3d3f42.  call `<init>`(v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZLio/reactivex/functions/Function;)V` @kind direct;
  #L3d3f48.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3f4e.  v9:= temp @kind object;
  #L3d3f50.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d3e44.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d3e4a.  v0:= temp @kind object;
  #L3d3e4c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d3e52.  v1:= temp;
  #L3d3e54.  call temp:= `groupBy`(v2, v3, v0, v4, v1) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d3e5a.  v3:= temp @kind object;
  #L3d3e5c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `groupJoin`(`io.reactivex.Flowable` v7 @kind this, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function` v9 @kind object, `io.reactivex.functions.Function` v10 @kind object, `io.reactivex.functions.BiFunction` v11 @kind object) @signature `Lio/reactivex/Flowable;.groupJoin:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d3f64.  v0:= "other is null" @kind object;
  #L3d3f68.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3f6e.  v0:= "leftEnd is null" @kind object;
  #L3d3f72.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3f78.  v0:= "rightEnd is null" @kind object;
  #L3d3f7c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3f82.  v0:= "resultSelector is null" @kind object;
  #L3d3f86.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d3f8c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin`;
  #L3d3f90.  v1:= v0 @kind object;
  #L3d3f92.  v2:= v7 @kind object;
  #L3d3f94.  v3:= v8 @kind object;
  #L3d3f96.  v4:= v9 @kind object;
  #L3d3f98.  v5:= v10 @kind object;
  #L3d3f9a.  v6:= v11 @kind object;
  #L3d3f9c.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3d3fa2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3fa8.  v8:= temp @kind object;
  #L3d3faa.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `hide`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.hide:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d3fbc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableHide`;
  #L3d3fc0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableHide;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d3fc6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d3fcc.  v0:= temp @kind object;
  #L3d3fce.  return v0 @kind object;
}
procedure `io.reactivex.Completable` `ignoreElements`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.ignoreElements:()Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d1a1c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableIgnoreElementsCompletable`;
  #L3d1a20.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableIgnoreElementsCompletable;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d1a26.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3d1a2c.  v0:= temp @kind object;
  #L3d1a2e.  return v0 @kind object;
}
procedure `io.reactivex.Single` `isEmpty`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.isEmpty:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7904.  call temp:= `alwaysFalse`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysFalse:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3d790a.  v0:= temp @kind object;
  #L3d790c.  call temp:= `all`(v1, v0) @signature `Lio/reactivex/Flowable;.all:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @kind virtual;
  #L3d7912.  v0:= temp @kind object;
  #L3d7914.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `join`(`io.reactivex.Flowable` v7 @kind this, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function` v9 @kind object, `io.reactivex.functions.Function` v10 @kind object, `io.reactivex.functions.BiFunction` v11 @kind object) @signature `Lio/reactivex/Flowable;.join:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d41c8.  v0:= "other is null" @kind object;
  #L3d41cc.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d41d2.  v0:= "leftEnd is null" @kind object;
  #L3d41d6.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d41dc.  v0:= "rightEnd is null" @kind object;
  #L3d41e0.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d41e6.  v0:= "resultSelector is null" @kind object;
  #L3d41ea.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d41f0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableJoin`;
  #L3d41f4.  v1:= v0 @kind object;
  #L3d41f6.  v2:= v7 @kind object;
  #L3d41f8.  v3:= v8 @kind object;
  #L3d41fa.  v4:= v9 @kind object;
  #L3d41fc.  v5:= v10 @kind object;
  #L3d41fe.  v6:= v11 @kind object;
  #L3d4200.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3d4206.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d420c.  v8:= temp @kind object;
  #L3d420e.  return v8 @kind object;
}
procedure `io.reactivex.Single` `last`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.last:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7928.  v0:= "defaultItem" @kind object;
  #L3d792c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7932.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLastSingle`;
  #L3d7936.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/lang/Object;)V` @kind direct;
  #L3d793c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d7942.  v2:= temp @kind object;
  #L3d7944.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `lastElement`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.lastElement:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d764c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLastMaybe`;
  #L3d7650.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastMaybe;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d7656.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d765c.  v0:= temp @kind object;
  #L3d765e.  return v0 @kind object;
}
procedure `io.reactivex.Single` `lastOrError`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.lastOrError:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d7958.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLastSingle`;
  #L3d795c.  v1:= 0I;
  #L3d795e.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/lang/Object;)V` @kind direct;
  #L3d7964.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d796a.  v0:= temp @kind object;
  #L3d796c.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `lift`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.FlowableOperator` v2 @kind object) @signature `Lio/reactivex/Flowable;.lift:(Lio/reactivex/FlowableOperator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d46e0.  v0:= "lifter is null" @kind object;
  #L3d46e4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d46ea.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLift`;
  #L3d46ee.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableLift;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/FlowableOperator;)V` @kind direct;
  #L3d46f4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d46fa.  v2:= temp @kind object;
  #L3d46fc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `limit`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.limit:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d4710.  v0:= 0L;
  #L3d4714.  v2:= lcmp(v4, v0);
  #L3d4718.  if v2 < 0 then goto L3d4730;
  #L3d471c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLimit`;
  #L3d4720.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L3d4726.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d472c.  v4:= temp @kind object;
  #L3d472e.  return v4 @kind object;
  #L3d4730.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d4734.  v1:= new `java.lang.StringBuilder`;
  #L3d4738.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d473e.  v2:= "count >= 0 required but it was " @kind object;
  #L3d4742.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4748.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d474e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d4754.  v4:= temp @kind object;
  #L3d4756.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d475c.  throw v0;
}
procedure `io.reactivex.Flowable` `map`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4770.  v0:= "mapper is null" @kind object;
  #L3d4774.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d477a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMap`;
  #L3d477e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d4784.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d478a.  v2:= temp @kind object;
  #L3d478c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `materialize`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.materialize:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d47a0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMaterialize`;
  #L3d47a4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d47aa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d47b0.  v0:= temp @kind object;
  #L3d47b2.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeWith:(Lio/reactivex/CompletableSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4c60.  v0:= "other is null" @kind object;
  #L3d4c64.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4c6a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable`;
  #L3d4c6e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/CompletableSource;)V` @kind direct;
  #L3d4c74.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4c7a.  v2:= temp @kind object;
  #L3d4c7c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4c90.  v0:= "other is null" @kind object;
  #L3d4c94.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4c9a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe`;
  #L3d4c9e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L3d4ca4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4caa.  v2:= temp @kind object;
  #L3d4cac.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeWith:(Lio/reactivex/SingleSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4cc0.  v0:= "other is null" @kind object;
  #L3d4cc4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4cca.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle`;
  #L3d4cce.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/SingleSource;)V` @kind direct;
  #L3d4cd4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4cda.  v2:= temp @kind object;
  #L3d4cdc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4cf0.  v0:= "other is null" @kind object;
  #L3d4cf4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4cfa.  call temp:= `merge`(v1, v2) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d4d00.  v2:= temp @kind object;
  #L3d4d02.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `observeOn`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d4d34.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d4d3a.  v0:= temp;
  #L3d4d3c.  v1:= 0I;
  #L3d4d3e.  call temp:= `observeOn`(v2, v3, v1, v0) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4d44.  v3:= temp @kind object;
  #L3d4d46.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `observeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4d58.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d4d5e.  v0:= temp;
  #L3d4d60.  call temp:= `observeOn`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4d66.  v2:= temp @kind object;
  #L3d4d68.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `observeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4d7c.  v0:= "scheduler is null" @kind object;
  #L3d4d80.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4d86.  v0:= "bufferSize" @kind object;
  #L3d4d8a.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d4d90.  v0:= new `io.reactivex.internal.operators.flowable.FlowableObserveOn`;
  #L3d4d94.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/Scheduler;ZI)V` @kind direct;
  #L3d4d9a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4da0.  v2:= temp @kind object;
  #L3d4da2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `ofType`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Flowable;.ofType:(Ljava/lang/Class;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4db4.  v0:= "clazz is null" @kind object;
  #L3d4db8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4dbe.  call temp:= `isInstanceOf`(v2) @signature `Lio/reactivex/internal/functions/Functions;.isInstanceOf:(Ljava/lang/Class;)Lio/reactivex/functions/Predicate;` @kind static;
  #L3d4dc4.  v0:= temp @kind object;
  #L3d4dc6.  call temp:= `filter`(v1, v0) @signature `Lio/reactivex/Flowable;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4dcc.  v0:= temp @kind object;
  #L3d4dce.  call temp:= `cast`(v0, v2) @signature `Lio/reactivex/Flowable;.cast:(Ljava/lang/Class;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4dd4.  v2:= temp @kind object;
  #L3d4dd6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v3 @kind this) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d4de8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d4dee.  v0:= temp;
  #L3d4df0.  v1:= 0I;
  #L3d4df2.  v2:= 1I;
  #L3d4df4.  call temp:= `onBackpressureBuffer`(v3, v0, v1, v2) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4dfa.  v0:= temp @kind object;
  #L3d4dfc.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4e34.  v0:= 0I;
  #L3d4e36.  call temp:= `onBackpressureBuffer`(v1, v2, v0, v0) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4e3c.  v2:= temp @kind object;
  #L3d4e3e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(ILio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4eec.  v0:= 0I;
  #L3d4eee.  call temp:= `onBackpressureBuffer`(v1, v2, v0, v0, v3) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZLio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4ef4.  v2:= temp @kind object;
  #L3d4ef6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4e50.  v0:= 0I;
  #L3d4e52.  call temp:= `onBackpressureBuffer`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4e58.  v2:= temp @kind object;
  #L3d4e5a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v7 @kind this, `int` v8 , `boolean` v9 , `boolean` v10 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d4e6c.  v0:= "bufferSize" @kind object;
  #L3d4e70.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d4e76.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer`;
  #L3d4e7a.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d4e7e.  v1:= v0 @kind object;
  #L3d4e80.  v2:= v7 @kind object;
  #L3d4e82.  v3:= v8;
  #L3d4e84.  v4:= v10;
  #L3d4e86.  v5:= v9;
  #L3d4e88.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer;.<init>:(Lio/reactivex/Flowable;IZZLio/reactivex/functions/Action;)V` @kind direct;
  #L3d4e8e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4e94.  v8:= temp @kind object;
  #L3d4e96.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v7 @kind this, `int` v8 , `boolean` v9 , `boolean` v10 , `io.reactivex.functions.Action` v11 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZLio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d4ea8.  v0:= "onOverflow is null" @kind object;
  #L3d4eac.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4eb2.  v0:= "capacity" @kind object;
  #L3d4eb6.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d4ebc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer`;
  #L3d4ec0.  v1:= v0 @kind object;
  #L3d4ec2.  v2:= v7 @kind object;
  #L3d4ec4.  v3:= v8;
  #L3d4ec6.  v4:= v10;
  #L3d4ec8.  v5:= v9;
  #L3d4eca.  v6:= v11 @kind object;
  #L3d4ecc.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer;.<init>:(Lio/reactivex/Flowable;IZZLio/reactivex/functions/Action;)V` @kind direct;
  #L3d4ed2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4ed8.  v8:= temp @kind object;
  #L3d4eda.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `io.reactivex.functions.Action` v10 @kind object, `io.reactivex.BackpressureOverflowStrategy` v11 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(JLio/reactivex/functions/Action;Lio/reactivex/BackpressureOverflowStrategy;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d4f08.  v0:= "strategy is null" @kind object;
  #L3d4f0c.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4f12.  v0:= "capacity" @kind object;
  #L3d4f16.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3d4f1c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy`;
  #L3d4f20.  v1:= v0 @kind object;
  #L3d4f22.  v2:= v7 @kind object;
  #L3d4f24.  v3:= v8 @kind wide;
  #L3d4f26.  v5:= v10 @kind object;
  #L3d4f28.  v6:= v11 @kind object;
  #L3d4f2a.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy;.<init>:(Lio/reactivex/Flowable;JLio/reactivex/functions/Action;Lio/reactivex/BackpressureOverflowStrategy;)V` @kind direct;
  #L3d4f30.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4f36.  v8:= temp @kind object;
  #L3d4f38.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d4e10.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d4e16.  v0:= temp;
  #L3d4e18.  v1:= 1I;
  #L3d4e1a.  call temp:= `onBackpressureBuffer`(v2, v0, v3, v1) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d4e20.  v3:= temp @kind object;
  #L3d4e22.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureDrop`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.onBackpressureDrop:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4f4c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop`;
  #L3d4f50.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d4f56.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4f5c.  v0:= temp @kind object;
  #L3d4f5e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureDrop`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureDrop:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4f70.  v0:= "onDrop is null" @kind object;
  #L3d4f74.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4f7a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop`;
  #L3d4f7e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3d4f84.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4f8a.  v2:= temp @kind object;
  #L3d4f8c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureLatest`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.onBackpressureLatest:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4fa0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest`;
  #L3d4fa4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d4faa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4fb0.  v0:= temp @kind object;
  #L3d4fb2.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorResumeNext`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d4fc4.  v0:= "resumeFunction is null" @kind object;
  #L3d4fc8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4fce.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnErrorNext`;
  #L3d4fd2.  v1:= 0I;
  #L3d4fd4.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3d4fda.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d4fe0.  v3:= temp @kind object;
  #L3d4fe2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorResumeNext`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.onErrorResumeNext:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4ff4.  v0:= "next is null" @kind object;
  #L3d4ff8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d4ffe.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3d5004.  v2:= temp @kind object;
  #L3d5006.  call temp:= `onErrorResumeNext`(v1, v2) @signature `Lio/reactivex/Flowable;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d500c.  v2:= temp @kind object;
  #L3d500e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorReturn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5020.  v0:= "valueSupplier is null" @kind object;
  #L3d5024.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d502a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnErrorReturn`;
  #L3d502e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorReturn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d5034.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d503a.  v2:= temp @kind object;
  #L3d503c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorReturnItem`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.onErrorReturnItem:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5050.  v0:= "item is null" @kind object;
  #L3d5054.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d505a.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3d5060.  v2:= temp @kind object;
  #L3d5062.  call temp:= `onErrorReturn`(v1, v2) @signature `Lio/reactivex/Flowable;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5068.  v2:= temp @kind object;
  #L3d506a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onExceptionResumeNext`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.onExceptionResumeNext:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d507c.  v0:= "next is null" @kind object;
  #L3d5080.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5086.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnErrorNext`;
  #L3d508a.  call temp:= `justFunction`(v3) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L3d5090.  v3:= temp @kind object;
  #L3d5092.  v1:= 1I;
  #L3d5094.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3d509a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d50a0.  v3:= temp @kind object;
  #L3d50a2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `onTerminateDetach`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.onTerminateDetach:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d50b4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDetach`;
  #L3d50b8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d50be.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d50c4.  v0:= temp @kind object;
  #L3d50c6.  return v0 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `parallel`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.parallel:()Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d80f0.  call temp:= `from`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L3d80f6.  v0:= temp @kind object;
  #L3d80f8.  return v0 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `parallel`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.parallel:(I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d810c.  v0:= "parallelism" @kind object;
  #L3d8110.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d8116.  call temp:= `from`(v1, v2) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L3d811c.  v2:= temp @kind object;
  #L3d811e.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `parallel`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lio/reactivex/Flowable;.parallel:(II)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8130.  v0:= "parallelism" @kind object;
  #L3d8134.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d813a.  v0:= "prefetch" @kind object;
  #L3d813e.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d8144.  call temp:= `from`(v1, v2, v3) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L3d814a.  v2:= temp @kind object;
  #L3d814c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `publish`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.publish:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d50d8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d50de.  v0:= temp;
  #L3d50e0.  call temp:= `publish`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.publish:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d50e6.  v2:= temp @kind object;
  #L3d50e8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `publish`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.publish:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d50fc.  v0:= "selector is null" @kind object;
  #L3d5100.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5106.  v0:= "prefetch" @kind object;
  #L3d510a.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d5110.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast`;
  #L3d5114.  v1:= 0I;
  #L3d5116.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3d511c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5122.  v3:= temp @kind object;
  #L3d5124.  return v3 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `publish`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.publish:()Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7f48.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d7f4e.  v0:= temp;
  #L3d7f50.  call temp:= `publish`(v1, v0) @signature `Lio/reactivex/Flowable;.publish:(I)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3d7f56.  v0:= temp @kind object;
  #L3d7f58.  return v0 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `publish`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.publish:(I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7f6c.  v0:= "bufferSize" @kind object;
  #L3d7f70.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d7f76.  call temp:= `create`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.create:(Lio/reactivex/Flowable;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3d7f7c.  v2:= temp @kind object;
  #L3d7f7e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `rebatchRequests`(`io.reactivex.Flowable` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/Flowable;.rebatchRequests:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d5294.  v0:= `@@io.reactivex.internal.schedulers.ImmediateThinScheduler.INSTANCE` @type ^`io.reactivex.Scheduler` @kind object;
  #L3d5298.  v1:= 1I;
  #L3d529a.  call temp:= `observeOn`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d52a0.  v3:= temp @kind object;
  #L3d52a2.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `reduce`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/Flowable;.reduce:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7670.  v0:= "reducer is null" @kind object;
  #L3d7674.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d767a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReduceMaybe`;
  #L3d767e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3d7684.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d768a.  v2:= temp @kind object;
  #L3d768c.  return v2 @kind object;
}
procedure `io.reactivex.Single` `reduce`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.reduce:(Ljava/lang/Object;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7980.  v0:= "seed is null" @kind object;
  #L3d7984.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d798a.  v0:= "reducer is null" @kind object;
  #L3d798e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7994.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle`;
  #L3d7998.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/lang/Object;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3d799e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d79a4.  v2:= temp @kind object;
  #L3d79a6.  return v2 @kind object;
}
procedure `io.reactivex.Single` `reduceWith`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.reduceWith:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d79b8.  v0:= "seedSupplier is null" @kind object;
  #L3d79bc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d79c2.  v0:= "reducer is null" @kind object;
  #L3d79c6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d79cc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReduceWithSingle`;
  #L3d79d0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceWithSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3d79d6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d79dc.  v2:= temp @kind object;
  #L3d79de.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.repeat:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d52b4.  v0:= 9223372036854775807L;
  #L3d52be.  call temp:= `repeat`(v2, v0) @signature `Lio/reactivex/Flowable;.repeat:(J)Lio/reactivex/Flowable;` @kind virtual;
  #L3d52c4.  v0:= temp @kind object;
  #L3d52c6.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.repeat:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d52d8.  v0:= 0L;
  #L3d52dc.  v2:= lcmp(v4, v0);
  #L3d52e0.  if v2 < 0 then goto L3d530a;
  #L3d52e4.  v2:= lcmp(v4, v0);
  #L3d52e8.  if v2 != 0 then goto L3d52f6;
  #L3d52ec.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d52f2.  v4:= temp @kind object;
  #L3d52f4.  return v4 @kind object;
  #L3d52f6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRepeat`;
  #L3d52fa.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L3d5300.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5306.  v4:= temp @kind object;
  #L3d5308.  return v4 @kind object;
  #L3d530a.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d530e.  v1:= new `java.lang.StringBuilder`;
  #L3d5312.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d5318.  v2:= "times >= 0 required but it was " @kind object;
  #L3d531c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5322.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5328.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d532e.  v4:= temp @kind object;
  #L3d5330.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d5336.  throw v0;
}
procedure `io.reactivex.Flowable` `repeatUntil`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BooleanSupplier` v2 @kind object) @signature `Lio/reactivex/Flowable;.repeatUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5348.  v0:= "stop is null" @kind object;
  #L3d534c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5352.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRepeatUntil`;
  #L3d5356.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BooleanSupplier;)V` @kind direct;
  #L3d535c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5362.  v2:= temp @kind object;
  #L3d5364.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeatWhen`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.repeatWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5378.  v0:= "handler is null" @kind object;
  #L3d537c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5382.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRepeatWhen`;
  #L3d5386.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d538c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5392.  v2:= temp @kind object;
  #L3d5394.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d53a8.  v0:= "selector is null" @kind object;
  #L3d53ac.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d53b2.  call temp:= `replayCallable`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;)Ljava/util/concurrent/Callable;` @kind static;
  #L3d53b8.  v0:= temp @kind object;
  #L3d53ba.  call temp:= `multicastSelector`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3d53c0.  v2:= temp @kind object;
  #L3d53c2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d53d4.  v0:= "selector is null" @kind object;
  #L3d53d8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d53de.  v0:= "bufferSize" @kind object;
  #L3d53e2.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d53e8.  call temp:= `replayCallable`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;I)Ljava/util/concurrent/Callable;` @kind static;
  #L3d53ee.  v3:= temp @kind object;
  #L3d53f0.  call temp:= `multicastSelector`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3d53f6.  v2:= temp @kind object;
  #L3d53f8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `int` v9 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;IJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d5454.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d545a.  v6:= temp @kind object;
  #L3d545c.  v0:= v7 @kind object;
  #L3d545e.  v1:= v8 @kind object;
  #L3d5460.  v2:= v9;
  #L3d5462.  v3:= v10 @kind wide;
  #L3d5464.  v5:= v12 @kind object;
  #L3d5466.  call temp:= `replay`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d546c.  v8:= temp @kind object;
  #L3d546e.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `int` v8 , `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d5480.  v0:= "selector is null" @kind object;
  #L3d5484.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d548a.  v0:= "unit is null" @kind object;
  #L3d548e.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5494.  v0:= "bufferSize" @kind object;
  #L3d5498.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d549e.  v0:= "scheduler is null" @kind object;
  #L3d54a2.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d54a8.  v0:= v6 @kind object;
  #L3d54aa.  v1:= v8;
  #L3d54ac.  v2:= v9 @kind wide;
  #L3d54ae.  v4:= v11 @kind object;
  #L3d54b0.  v5:= v12 @kind object;
  #L3d54b2.  call temp:= `replayCallable`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Ljava/util/concurrent/Callable;` @kind static;
  #L3d54b8.  v8:= temp @kind object;
  #L3d54ba.  call temp:= `multicastSelector`(v8, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3d54c0.  v7:= temp @kind object;
  #L3d54c2.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;ILio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d540c.  v0:= "selector is null" @kind object;
  #L3d5410.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5416.  v0:= "scheduler is null" @kind object;
  #L3d541a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5420.  v0:= "bufferSize" @kind object;
  #L3d5424.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d542a.  call temp:= `replayCallable`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;I)Ljava/util/concurrent/Callable;` @kind static;
  #L3d5430.  v3:= temp @kind object;
  #L3d5432.  call temp:= `replayFunction`(v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayFunction:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)Lio/reactivex/functions/Function;` @kind static;
  #L3d5438.  v2:= temp @kind object;
  #L3d543a.  call temp:= `multicastSelector`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3d5440.  v2:= temp @kind object;
  #L3d5442.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d5514.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d551a.  v5:= temp @kind object;
  #L3d551c.  v0:= v6 @kind object;
  #L3d551e.  v1:= v7 @kind object;
  #L3d5520.  v2:= v8 @kind wide;
  #L3d5522.  v4:= v10 @kind object;
  #L3d5524.  call temp:= `replay`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d552a.  v7:= temp @kind object;
  #L3d552c.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5540.  v0:= "selector is null" @kind object;
  #L3d5544.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d554a.  v0:= "unit is null" @kind object;
  #L3d554e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5554.  v0:= "scheduler is null" @kind object;
  #L3d5558.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d555e.  call temp:= `replayCallable`(v1, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Ljava/util/concurrent/Callable;` @kind static;
  #L3d5564.  v3:= temp @kind object;
  #L3d5566.  call temp:= `multicastSelector`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3d556c.  v2:= temp @kind object;
  #L3d556e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d54d4.  v0:= "selector is null" @kind object;
  #L3d54d8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d54de.  v0:= "scheduler is null" @kind object;
  #L3d54e2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d54e8.  call temp:= `replayCallable`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;)Ljava/util/concurrent/Callable;` @kind static;
  #L3d54ee.  v0:= temp @kind object;
  #L3d54f0.  call temp:= `replayFunction`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayFunction:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)Lio/reactivex/functions/Function;` @kind static;
  #L3d54f6.  v2:= temp @kind object;
  #L3d54f8.  call temp:= `multicastSelector`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3d54fe.  v2:= temp @kind object;
  #L3d5500.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.replay:()Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7f90.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/Flowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3d7f96.  v0:= temp @kind object;
  #L3d7f98.  return v0 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.replay:(I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7fac.  v0:= "bufferSize" @kind object;
  #L3d7fb0.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d7fb6.  call temp:= `create`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3d7fbc.  v2:= temp @kind object;
  #L3d7fbe.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.replay:(IJLjava/util/concurrent/TimeUnit;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d7ffc.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d8002.  v5:= temp @kind object;
  #L3d8004.  v0:= v6 @kind object;
  #L3d8006.  v1:= v7;
  #L3d8008.  v2:= v8 @kind wide;
  #L3d800a.  v4:= v10 @kind object;
  #L3d800c.  call temp:= `replay`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/Flowable;.replay:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3d8012.  v7:= temp @kind object;
  #L3d8014.  return v7 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.replay:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d8028.  v0:= "bufferSize" @kind object;
  #L3d802c.  call temp:= `verifyPositive`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d8032.  v1:= "unit is null" @kind object;
  #L3d8036.  call temp:= `requireNonNull`(v10, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d803c.  v1:= "scheduler is null" @kind object;
  #L3d8040.  call temp:= `requireNonNull`(v11, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8046.  call temp:= `verifyPositive`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d804c.  v0:= v6 @kind object;
  #L3d804e.  v1:= v8 @kind wide;
  #L3d8050.  v3:= v10 @kind object;
  #L3d8052.  v4:= v11 @kind object;
  #L3d8054.  v5:= v7;
  #L3d8056.  call temp:= `create`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3d805c.  v7:= temp @kind object;
  #L3d805e.  return v7 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.replay:(ILio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7fd0.  v0:= "scheduler is null" @kind object;
  #L3d7fd4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7fda.  call temp:= `replay`(v1, v2) @signature `Lio/reactivex/Flowable;.replay:(I)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3d7fe0.  v2:= temp @kind object;
  #L3d7fe2.  call temp:= `observeOn`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.observeOn:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3d7fe8.  v2:= temp @kind object;
  #L3d7fea.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.replay:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d809c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d80a2.  v0:= temp @kind object;
  #L3d80a4.  call temp:= `replay`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.replay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3d80aa.  v2:= temp @kind object;
  #L3d80ac.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/Flowable;.replay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d80c0.  v0:= "unit is null" @kind object;
  #L3d80c4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d80ca.  v0:= "scheduler is null" @kind object;
  #L3d80ce.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d80d4.  call temp:= `create`(v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3d80da.  v2:= temp @kind object;
  #L3d80dc.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8070.  v0:= "scheduler is null" @kind object;
  #L3d8074.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d807a.  call temp:= `replay`(v1) @signature `Lio/reactivex/Flowable;.replay:()Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3d8080.  v0:= temp @kind object;
  #L3d8082.  call temp:= `observeOn`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.observeOn:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L3d8088.  v2:= temp @kind object;
  #L3d808a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v3 @kind this) @signature `Lio/reactivex/Flowable;.retry:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d5580.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3d5586.  v0:= temp @kind object;
  #L3d5588.  v1:= 9223372036854775807L;
  #L3d5592.  call temp:= `retry`(v3, v1, v0) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5598.  v0:= temp @kind object;
  #L3d559a.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Flowable;.retry:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5600.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L3d5606.  v0:= temp @kind object;
  #L3d5608.  call temp:= `retry`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d560e.  v2:= temp @kind object;
  #L3d5610.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v3 @kind this, `long` v4 , `io.reactivex.functions.Predicate` v6 @kind object) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d5624.  v0:= 0L;
  #L3d5628.  v2:= lcmp(v4, v0);
  #L3d562c.  if v2 < 0 then goto L3d564e;
  #L3d5630.  v0:= "predicate is null" @kind object;
  #L3d5634.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d563a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRetryPredicate`;
  #L3d563e.  call `<init>`(v0, v3, v4, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate;.<init>:(Lio/reactivex/Flowable;JLio/reactivex/functions/Predicate;)V` @kind direct;
  #L3d5644.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d564a.  v4:= temp @kind object;
  #L3d564c.  return v4 @kind object;
  #L3d564e.  v6:= new `java.lang.IllegalArgumentException`;
  #L3d5652.  v0:= new `java.lang.StringBuilder`;
  #L3d5656.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d565c.  v1:= "times >= 0 required but it was " @kind object;
  #L3d5660.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5666.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d566c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5672.  v4:= temp @kind object;
  #L3d5674.  call `<init>`(v6, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d567a.  throw v6;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BiPredicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.retry:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d55ac.  v0:= "predicate is null" @kind object;
  #L3d55b0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d55b6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate`;
  #L3d55ba.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L3d55c0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d55c6.  v2:= temp @kind object;
  #L3d55c8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.retry:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d55dc.  v0:= 9223372036854775807L;
  #L3d55e6.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d55ec.  v3:= temp @kind object;
  #L3d55ee.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `retryUntil`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.BooleanSupplier` v3 @kind object) @signature `Lio/reactivex/Flowable;.retryUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d568c.  v0:= "stop is null" @kind object;
  #L3d5690.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5696.  call temp:= `predicateReverseFor`(v3) @signature `Lio/reactivex/internal/functions/Functions;.predicateReverseFor:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/functions/Predicate;` @kind static;
  #L3d569c.  v3:= temp @kind object;
  #L3d569e.  v0:= 9223372036854775807L;
  #L3d56a8.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d56ae.  v3:= temp @kind object;
  #L3d56b0.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `retryWhen`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.retryWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d56c4.  v0:= "handler is null" @kind object;
  #L3d56c8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d56ce.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRetryWhen`;
  #L3d56d2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryWhen;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d56d8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d56de.  v2:= temp @kind object;
  #L3d56e0.  return v2 @kind object;
}
procedure `void` `safeSubscribe`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/Flowable;.safeSubscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d85d8.  v0:= "s is null" @kind object;
  #L3d85dc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d85e2.  v0:= instanceof @variable v2 @type ^`io.reactivex.subscribers.SafeSubscriber` @kind boolean;
  #L3d85e6.  if v0 == 0 then goto L3d85f6;
  #L3d85ea.  v2:= (`io.reactivex.subscribers.SafeSubscriber`) v2 @kind object;
  #L3d85ee.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d85f4.  goto L3d8606;
  #L3d85f6.  v0:= new `io.reactivex.subscribers.SafeSubscriber`;
  #L3d85fa.  call `<init>`(v0, v2) @signature `Lio/reactivex/subscribers/SafeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3d8600.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d8606.  return @kind void;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d56f4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d56fa.  v0:= temp @kind object;
  #L3d56fc.  call temp:= `sample`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5702.  v2:= temp @kind object;
  #L3d5704.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d5744.  v0:= "unit is null" @kind object;
  #L3d5748.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d574e.  v0:= "scheduler is null" @kind object;
  #L3d5752.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5758.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSampleTimed`;
  #L3d575c.  v7:= 0I;
  #L3d575e.  v1:= v0 @kind object;
  #L3d5760.  v2:= v8 @kind object;
  #L3d5762.  v3:= v9 @kind wide;
  #L3d5764.  v5:= v11 @kind object;
  #L3d5766.  v6:= v12 @kind object;
  #L3d5768.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L3d576e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5774.  v9:= temp @kind object;
  #L3d5776.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `boolean` v13 ) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d5788.  v0:= "unit is null" @kind object;
  #L3d578c.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5792.  v0:= "scheduler is null" @kind object;
  #L3d5796.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d579c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSampleTimed`;
  #L3d57a0.  v1:= v0 @kind object;
  #L3d57a2.  v2:= v8 @kind object;
  #L3d57a4.  v3:= v9 @kind wide;
  #L3d57a6.  v5:= v11 @kind object;
  #L3d57a8.  v6:= v12 @kind object;
  #L3d57aa.  v7:= v13;
  #L3d57ac.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L3d57b2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d57b8.  v9:= temp @kind object;
  #L3d57ba.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `boolean` v10 ) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d5718.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d571e.  v4:= temp @kind object;
  #L3d5720.  v0:= v6 @kind object;
  #L3d5722.  v1:= v7 @kind wide;
  #L3d5724.  v3:= v9 @kind object;
  #L3d5726.  v5:= v10;
  #L3d5728.  call temp:= `sample`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d572e.  v7:= temp @kind object;
  #L3d5730.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.sample:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d57cc.  v0:= "sampler is null" @kind object;
  #L3d57d0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d57d6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSamplePublisher`;
  #L3d57da.  v1:= 0I;
  #L3d57dc.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L3d57e2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d57e8.  v3:= temp @kind object;
  #L3d57ea.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.sample:(Lorg/reactivestreams/Publisher;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d57fc.  v0:= "sampler is null" @kind object;
  #L3d5800.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5806.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSamplePublisher`;
  #L3d580a.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L3d5810.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5816.  v2:= temp @kind object;
  #L3d5818.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `scan`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/Flowable;.scan:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d582c.  v0:= "accumulator is null" @kind object;
  #L3d5830.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5836.  v0:= new `io.reactivex.internal.operators.flowable.FlowableScan`;
  #L3d583a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3d5840.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5846.  v2:= temp @kind object;
  #L3d5848.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `scan`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.scan:(Ljava/lang/Object;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d585c.  v0:= "seed is null" @kind object;
  #L3d5860.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5866.  call temp:= `justCallable`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justCallable:(Ljava/lang/Object;)Ljava/util/concurrent/Callable;` @kind static;
  #L3d586c.  v2:= temp @kind object;
  #L3d586e.  call temp:= `scanWith`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.scanWith:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5874.  v2:= temp @kind object;
  #L3d5876.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `scanWith`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.scanWith:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5888.  v0:= "seedSupplier is null" @kind object;
  #L3d588c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5892.  v0:= "accumulator is null" @kind object;
  #L3d5896.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d589c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableScanSeed`;
  #L3d58a0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3d58a6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d58ac.  v2:= temp @kind object;
  #L3d58ae.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `serialize`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.serialize:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d58c0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSerialized`;
  #L3d58c4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSerialized;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d58ca.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d58d0.  v0:= temp @kind object;
  #L3d58d2.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `share`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.share:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d58e4.  call temp:= `publish`(v1) @signature `Lio/reactivex/Flowable;.publish:()Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L3d58ea.  v0:= temp @kind object;
  #L3d58ec.  call temp:= `refCount`(v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:()Lio/reactivex/Flowable;` @kind virtual;
  #L3d58f2.  v0:= temp @kind object;
  #L3d58f4.  return v0 @kind object;
}
procedure `io.reactivex.Single` `single`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.single:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7ab0.  v0:= "defaultItem is null" @kind object;
  #L3d7ab4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7aba.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSingleSingle`;
  #L3d7abe.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @kind direct;
  #L3d7ac4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d7aca.  v2:= temp @kind object;
  #L3d7acc.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `singleElement`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d76a0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSingleMaybe`;
  #L3d76a4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d76aa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L3d76b0.  v0:= temp @kind object;
  #L3d76b2.  return v0 @kind object;
}
procedure `io.reactivex.Single` `singleOrError`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.singleOrError:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d7ae0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSingleSingle`;
  #L3d7ae4.  v1:= 0I;
  #L3d7ae6.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @kind direct;
  #L3d7aec.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d7af2.  v0:= temp @kind object;
  #L3d7af4.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `skip`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.skip:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d5908.  v0:= 0L;
  #L3d590c.  v2:= lcmp(v4, v0);
  #L3d5910.  if v2 > 0 then goto L3d591e;
  #L3d5914.  call temp:= `onAssembly`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d591a.  v4:= temp @kind object;
  #L3d591c.  return v4 @kind object;
  #L3d591e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkip`;
  #L3d5922.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L3d5928.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d592e.  v4:= temp @kind object;
  #L3d5930.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `skip`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.skip:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d5944.  call temp:= `timer`(v1, v3) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind static;
  #L3d594a.  v1:= temp @kind object;
  #L3d594c.  call temp:= `skipUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.skipUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5952.  v1:= temp @kind object;
  #L3d5954.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `skip`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.skip:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d5968.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3d596e.  v1:= temp @kind object;
  #L3d5970.  call temp:= `skipUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.skipUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5976.  v1:= temp @kind object;
  #L3d5978.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/Flowable;.skipLast:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d598c.  if v4 < 0 then goto L3d59b2;
  #L3d5990.  if v4 != 0 then goto L3d599e;
  #L3d5994.  call temp:= `onAssembly`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d599a.  v4:= temp @kind object;
  #L3d599c.  return v4 @kind object;
  #L3d599e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkipLast`;
  #L3d59a2.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L3d59a8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d59ae.  v4:= temp @kind object;
  #L3d59b0.  return v4 @kind object;
  #L3d59b2.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3d59b6.  v1:= new `java.lang.StringBuilder`;
  #L3d59ba.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d59c0.  v2:= "count >= 0 required but it was " @kind object;
  #L3d59c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d59ca.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d59d0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d59d6.  v4:= temp @kind object;
  #L3d59d8.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d59de.  throw v0;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d59f0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d59f6.  v4:= temp @kind object;
  #L3d59f8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d59fe.  v6:= temp;
  #L3d5a00.  v5:= 0I;
  #L3d5a02.  v0:= v7 @kind object;
  #L3d5a04.  v1:= v8 @kind wide;
  #L3d5a06.  v3:= v10 @kind object;
  #L3d5a08.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5a0e.  v8:= temp @kind object;
  #L3d5a10.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d5a58.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d5a5e.  v6:= temp;
  #L3d5a60.  v5:= 0I;
  #L3d5a62.  v0:= v7 @kind object;
  #L3d5a64.  v1:= v8 @kind wide;
  #L3d5a66.  v3:= v10 @kind object;
  #L3d5a68.  v4:= v11 @kind object;
  #L3d5a6a.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5a70.  v8:= temp @kind object;
  #L3d5a72.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `boolean` v12 ) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d5a84.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d5a8a.  v6:= temp;
  #L3d5a8c.  v0:= v7 @kind object;
  #L3d5a8e.  v1:= v8 @kind wide;
  #L3d5a90.  v3:= v10 @kind object;
  #L3d5a92.  v4:= v11 @kind object;
  #L3d5a94.  v5:= v12;
  #L3d5a96.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5a9c.  v8:= temp @kind object;
  #L3d5a9e.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object, `boolean` v14 , `int` v15 ) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d5ab0.  v0:= "unit is null" @kind object;
  #L3d5ab4.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5aba.  v0:= "scheduler is null" @kind object;
  #L3d5abe.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5ac4.  v0:= "bufferSize" @kind object;
  #L3d5ac8.  call temp:= `verifyPositive`(v15, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d5ace.  v7:= v15 ^< 1;
  #L3d5ad2.  v15:= new `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed`;
  #L3d5ad6.  v1:= v15 @kind object;
  #L3d5ad8.  v2:= v9 @kind object;
  #L3d5ada.  v3:= v10 @kind wide;
  #L3d5adc.  v5:= v12 @kind object;
  #L3d5ade.  v6:= v13 @kind object;
  #L3d5ae0.  v8:= v14;
  #L3d5ae2.  call `<init>`(v1, v2, v3, v5, v6, v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @kind direct;
  #L3d5ae8.  call temp:= `onAssembly`(v15) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5aee.  v10:= temp @kind object;
  #L3d5af0.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `boolean` v11 ) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d5a24.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d5a2a.  v4:= temp @kind object;
  #L3d5a2c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d5a32.  v6:= temp;
  #L3d5a34.  v0:= v7 @kind object;
  #L3d5a36.  v1:= v8 @kind wide;
  #L3d5a38.  v3:= v10 @kind object;
  #L3d5a3a.  v5:= v11;
  #L3d5a3c.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5a42.  v8:= temp @kind object;
  #L3d5a44.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipUntil`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.skipUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5b04.  v0:= "other is null" @kind object;
  #L3d5b08.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5b0e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkipUntil`;
  #L3d5b12.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d5b18.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5b1e.  v2:= temp @kind object;
  #L3d5b20.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `skipWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.skipWhile:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5b34.  v0:= "predicate is null" @kind object;
  #L3d5b38.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5b3e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkipWhile`;
  #L3d5b42.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3d5b48.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5b4e.  v2:= temp @kind object;
  #L3d5b50.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.sorted:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d5b64.  call temp:= `toList`(v2) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L3d5b6a.  v0:= temp @kind object;
  #L3d5b6c.  call temp:= `toFlowable`(v0) @signature `Lio/reactivex/Single;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3d5b72.  v0:= temp @kind object;
  #L3d5b74.  call temp:= `naturalComparator`() @signature `Lio/reactivex/internal/functions/Functions;.naturalComparator:()Ljava/util/Comparator;` @kind static;
  #L3d5b7a.  v1:= temp @kind object;
  #L3d5b7c.  call temp:= `listSorter`(v1) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L3d5b82.  v1:= temp @kind object;
  #L3d5b84.  call temp:= `map`(v0, v1) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5b8a.  v0:= temp @kind object;
  #L3d5b8c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d5b92.  v1:= temp @kind object;
  #L3d5b94.  call temp:= `flatMapIterable`(v0, v1) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5b9a.  v0:= temp @kind object;
  #L3d5b9c.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.Flowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/Flowable;.sorted:(Ljava/util/Comparator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5bb0.  v0:= "sortFunction" @kind object;
  #L3d5bb4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5bba.  call temp:= `toList`(v1) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L3d5bc0.  v0:= temp @kind object;
  #L3d5bc2.  call temp:= `toFlowable`(v0) @signature `Lio/reactivex/Single;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L3d5bc8.  v0:= temp @kind object;
  #L3d5bca.  call temp:= `listSorter`(v2) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L3d5bd0.  v2:= temp @kind object;
  #L3d5bd2.  call temp:= `map`(v0, v2) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5bd8.  v2:= temp @kind object;
  #L3d5bda.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d5be0.  v0:= temp @kind object;
  #L3d5be2.  call temp:= `flatMapIterable`(v2, v0) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5be8.  v2:= temp @kind object;
  #L3d5bea.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `startWith`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Iterable` v3 @kind object) @signature `Lio/reactivex/Flowable;.startWith:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d5bfc.  v0:= 2I;
  #L3d5bfe.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d5c02.  call temp:= `fromIterable`(v3) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5c08.  v3:= temp @kind object;
  #L3d5c0a.  v1:= 0I;
  #L3d5c0c.  v0[v1]:= v3 @kind object;
  #L3d5c10.  v3:= 1I;
  #L3d5c12.  v0[v3]:= v2 @kind object;
  #L3d5c16.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d5c1c.  v3:= temp @kind object;
  #L3d5c1e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `startWith`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/Flowable;.startWith:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d5c30.  v0:= "item is null" @kind object;
  #L3d5c34.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5c3a.  v0:= 2I;
  #L3d5c3c.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d5c40.  call temp:= `just`(v3) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d5c46.  v3:= temp @kind object;
  #L3d5c48.  v1:= 0I;
  #L3d5c4a.  v0[v1]:= v3 @kind object;
  #L3d5c4e.  v3:= 1I;
  #L3d5c50.  v0[v3]:= v2 @kind object;
  #L3d5c54.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d5c5a.  v3:= temp @kind object;
  #L3d5c5c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `startWith`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.startWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d5c70.  v0:= "other is null" @kind object;
  #L3d5c74.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5c7a.  v0:= 2I;
  #L3d5c7c.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d5c80.  v1:= 0I;
  #L3d5c82.  v0[v1]:= v3 @kind object;
  #L3d5c86.  v3:= 1I;
  #L3d5c88.  v0[v3]:= v2 @kind object;
  #L3d5c8c.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d5c92.  v3:= temp @kind object;
  #L3d5c94.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `startWithArray`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lio/reactivex/Flowable;.startWithArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d5ca8.  call temp:= `fromArray`(v3) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3d5cae.  v3:= temp @kind object;
  #L3d5cb0.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d5cb6.  v0:= temp @kind object;
  #L3d5cb8.  if v3 != v0 then goto L3d5cc6;
  #L3d5cbc.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5cc2.  v3:= temp @kind object;
  #L3d5cc4.  return v3 @kind object;
  #L3d5cc6.  v0:= 2I;
  #L3d5cc8.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d5ccc.  v1:= 0I;
  #L3d5cce.  v0[v1]:= v3 @kind object;
  #L3d5cd2.  v3:= 1I;
  #L3d5cd4.  v0[v3]:= v2 @kind object;
  #L3d5cd8.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L3d5cde.  v3:= temp @kind object;
  #L3d5ce0.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v4 @kind this) @signature `Lio/reactivex/Flowable;.subscribe:()Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d7e60.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L3d7e66.  v0:= temp @kind object;
  #L3d7e68.  v1:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3d7e6c.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d7e70.  v3:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L3d7e74.  call temp:= `subscribe`(v4, v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3d7e7a.  v0:= temp @kind object;
  #L3d7e7c.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d7e90.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L3d7e94.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d7e98.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L3d7e9c.  call temp:= `subscribe`(v3, v4, v0, v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3d7ea2.  v4:= temp @kind object;
  #L3d7ea4.  return v4 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d7eb8.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L3d7ebc.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L3d7ec0.  call temp:= `subscribe`(v2, v3, v4, v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3d7ec6.  v3:= temp @kind object;
  #L3d7ec8.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7edc.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L3d7ee0.  call temp:= `subscribe`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L3d7ee6.  v2:= temp @kind object;
  #L3d7ee8.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7efc.  v0:= "onNext is null" @kind object;
  #L3d7f00.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7f06.  v0:= "onError is null" @kind object;
  #L3d7f0a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7f10.  v0:= "onComplete is null" @kind object;
  #L3d7f14.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7f1a.  v0:= "onSubscribe is null" @kind object;
  #L3d7f1e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7f24.  v0:= new `io.reactivex.internal.subscribers.LambdaSubscriber`;
  #L3d7f28.  call `<init>`(v0, v2, v3, v4, v5) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L3d7f2e.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d7f34.  return v0 @kind object;
}
procedure `void` `subscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.FlowableSubscriber` v3 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d8618.  v0:= "s is null" @kind object;
  #L3d861c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8622.  call temp:= `onSubscribe`(v2, v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/Flowable;Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;` @kind static;
  #L3d8628.  v3:= temp @kind object;
  #L3d862a.  v0:= "The RxJavaPlugins.onSubscribe hook returned a null FlowableSubscriber. Please check the handler provided to RxJavaPlugins.setOnFlowableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins" @kind object;
  #L3d862e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d8634.  call `subscribeActual`(v2, v3) @signature `Lio/reactivex/Flowable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L3d863a.  return @kind void;
  #L3d863c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d863e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3d8644.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3d864a.  v0:= new `java.lang.NullPointerException`;
  #L3d864e.  v1:= "Actually not, but can't throw other exceptions due to RS" @kind object;
  #L3d8652.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d8658.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3d865e.  throw v0;
  #L3d8660.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L3d8662.  throw v3;
  catch `java.lang.NullPointerException` @[L3d8622..L3d863a] goto L3d8660;
  catch `java.lang.Throwable` @[L3d8622..L3d863a] goto L3d863c;
}
procedure `void` `subscribe`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8684.  v0:= instanceof @variable v2 @type ^`io.reactivex.FlowableSubscriber` @kind boolean;
  #L3d8688.  if v0 == 0 then goto L3d8698;
  #L3d868c.  v2:= (`io.reactivex.FlowableSubscriber`) v2 @kind object;
  #L3d8690.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d8696.  goto L3d86b2;
  #L3d8698.  v0:= "s is null" @kind object;
  #L3d869c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d86a2.  v0:= new `io.reactivex.internal.subscribers.StrictSubscriber`;
  #L3d86a6.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L3d86ac.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d86b2.  return @kind void;
}
procedure `void` `subscribeActual`(`org.reactivestreams.Subscriber` v0 @kind object) @signature `Lio/reactivex/Flowable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `io.reactivex.Flowable` `subscribeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5cf4.  v0:= "scheduler is null" @kind object;
  #L3d5cf8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5cfe.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.operators.flowable.FlowableCreate` @kind boolean;
  #L3d5d02.  v0:= v0 ^~ 1;
  #L3d5d06.  call temp:= `subscribeOn`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5d0c.  v2:= temp @kind object;
  #L3d5d0e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `subscribeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5d20.  v0:= "scheduler is null" @kind object;
  #L3d5d24.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5d2a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSubscribeOn`;
  #L3d5d2e.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L3d5d34.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5d3a.  v2:= temp @kind object;
  #L3d5d3c.  return v2 @kind object;
}
procedure `org.reactivestreams.Subscriber` `subscribeWith`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/Flowable;.subscribeWith:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d8430.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L3d8436.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchIfEmpty`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.switchIfEmpty:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5d50.  v0:= "other is null" @kind object;
  #L3d5d54.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5d5a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty`;
  #L3d5d5e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d5d64.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5d6a.  v2:= temp @kind object;
  #L3d5d6c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5d80.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d5d86.  v0:= temp;
  #L3d5d88.  call temp:= `switchMap`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5d8e.  v2:= temp @kind object;
  #L3d5d90.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5da4.  v0:= 0I;
  #L3d5da6.  call temp:= `switchMap0`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.switchMap0:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5dac.  v2:= temp @kind object;
  #L3d5dae.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMap0`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/Flowable;.switchMap0:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @AccessFlag  {
    temp;
    v0;

  #L3d5dc0.  v0:= "mapper is null" @kind object;
  #L3d5dc4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5dca.  v0:= "bufferSize" @kind object;
  #L3d5dce.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d5dd4.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L3d5dd8.  if v0 == 0 then goto L3d5e02;
  #L3d5ddc.  v3:= v1 @kind object;
  #L3d5dde.  v3:= (`io.reactivex.internal.fuseable.ScalarCallable`) v3 @kind object;
  #L3d5de2.  call temp:= `call`(v3) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L3d5de8.  v3:= temp @kind object;
  #L3d5dea.  if v3 != 0 then goto L3d5df8;
  #L3d5dee.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L3d5df4.  v2:= temp @kind object;
  #L3d5df6.  return v2 @kind object;
  #L3d5df8.  call temp:= `scalarXMap`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L3d5dfe.  v2:= temp @kind object;
  #L3d5e00.  return v2 @kind object;
  #L3d5e02.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSwitchMap`;
  #L3d5e06.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L3d5e0c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5e12.  v2:= temp @kind object;
  #L3d5e14.  return v2 @kind object;
}
procedure `io.reactivex.Completable` `switchMapCompletable`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapCompletable:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d1a40.  v0:= "mapper is null" @kind object;
  #L3d1a44.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1a4a.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable`;
  #L3d1a4e.  v1:= 0I;
  #L3d1a50.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3d1a56.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3d1a5c.  v3:= temp @kind object;
  #L3d1a5e.  return v3 @kind object;
}
procedure `io.reactivex.Completable` `switchMapCompletableDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapCompletableDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d1a70.  v0:= "mapper is null" @kind object;
  #L3d1a74.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d1a7a.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable`;
  #L3d1a7e.  v1:= 1I;
  #L3d1a80.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3d1a86.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L3d1a8c.  v3:= temp @kind object;
  #L3d1a8e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5e28.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d5e2e.  v0:= temp;
  #L3d5e30.  call temp:= `switchMapDelayError`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5e36.  v2:= temp @kind object;
  #L3d5e38.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5e4c.  v0:= 1I;
  #L3d5e4e.  call temp:= `switchMap0`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.switchMap0:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d5e54.  v2:= temp @kind object;
  #L3d5e56.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapMaybe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapMaybe:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d5e68.  v0:= "mapper is null" @kind object;
  #L3d5e6c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5e72.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe`;
  #L3d5e76.  v1:= 0I;
  #L3d5e78.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3d5e7e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5e84.  v3:= temp @kind object;
  #L3d5e86.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapMaybeDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapMaybeDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d5e98.  v0:= "mapper is null" @kind object;
  #L3d5e9c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5ea2.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe`;
  #L3d5ea6.  v1:= 1I;
  #L3d5ea8.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3d5eae.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5eb4.  v3:= temp @kind object;
  #L3d5eb6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapSingle`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapSingle:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d5ec8.  v0:= "mapper is null" @kind object;
  #L3d5ecc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5ed2.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle`;
  #L3d5ed6.  v1:= 0I;
  #L3d5ed8.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3d5ede.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5ee4.  v3:= temp @kind object;
  #L3d5ee6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapSingleDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapSingleDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d5ef8.  v0:= "mapper is null" @kind object;
  #L3d5efc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d5f02.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle`;
  #L3d5f06.  v1:= 1I;
  #L3d5f08.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L3d5f0e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5f14.  v3:= temp @kind object;
  #L3d5f16.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `take`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.take:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d5fd0.  v0:= 0L;
  #L3d5fd4.  v2:= lcmp(v4, v0);
  #L3d5fd8.  if v2 < 0 then goto L3d5ff0;
  #L3d5fdc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTake`;
  #L3d5fe0.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L3d5fe6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d5fec.  v4:= temp @kind object;
  #L3d5fee.  return v4 @kind object;
  #L3d5ff0.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d5ff4.  v1:= new `java.lang.StringBuilder`;
  #L3d5ff8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d5ffe.  v2:= "count >= 0 required but it was " @kind object;
  #L3d6002.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6008.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d600e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d6014.  v4:= temp @kind object;
  #L3d6016.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d601c.  throw v0;
}
procedure `io.reactivex.Flowable` `take`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.take:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d6030.  call temp:= `timer`(v1, v3) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind static;
  #L3d6036.  v1:= temp @kind object;
  #L3d6038.  call temp:= `takeUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d603e.  v1:= temp @kind object;
  #L3d6040.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `take`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.take:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d6054.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L3d605a.  v1:= temp @kind object;
  #L3d605c.  call temp:= `takeUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6062.  v1:= temp @kind object;
  #L3d6064.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/Flowable;.takeLast:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d6078.  if v4 < 0 then goto L3d60c2;
  #L3d607c.  if v4 != 0 then goto L3d6094;
  #L3d6080.  v4:= new `io.reactivex.internal.operators.flowable.FlowableIgnoreElements`;
  #L3d6084.  call `<init>`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableIgnoreElements;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d608a.  call temp:= `onAssembly`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6090.  v4:= temp @kind object;
  #L3d6092.  return v4 @kind object;
  #L3d6094.  v0:= 1I;
  #L3d6096.  if v4 != v0 then goto L3d60ae;
  #L3d609a.  v4:= new `io.reactivex.internal.operators.flowable.FlowableTakeLastOne`;
  #L3d609e.  call `<init>`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastOne;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d60a4.  call temp:= `onAssembly`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d60aa.  v4:= temp @kind object;
  #L3d60ac.  return v4 @kind object;
  #L3d60ae.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeLast`;
  #L3d60b2.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L3d60b8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d60be.  v4:= temp @kind object;
  #L3d60c0.  return v4 @kind object;
  #L3d60c2.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3d60c6.  v1:= new `java.lang.StringBuilder`;
  #L3d60ca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d60d0.  v2:= "count >= 0 required but it was " @kind object;
  #L3d60d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d60da.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d60e0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d60e6.  v4:= temp @kind object;
  #L3d60e8.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d60ee.  throw v0;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d61f0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d61f6.  v6:= temp @kind object;
  #L3d61f8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d61fe.  v8:= temp;
  #L3d6200.  v7:= 0I;
  #L3d6202.  v0:= v9 @kind object;
  #L3d6204.  v1:= v10 @kind wide;
  #L3d6206.  v3:= v12 @kind wide;
  #L3d6208.  v5:= v14 @kind object;
  #L3d620a.  call temp:= `takeLast`(v0, v1, v3, v5, v6, v7, v8) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6210.  v10:= temp @kind object;
  #L3d6212.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object, `io.reactivex.Scheduler` v15 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d6224.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d622a.  v8:= temp;
  #L3d622c.  v7:= 0I;
  #L3d622e.  v0:= v9 @kind object;
  #L3d6230.  v1:= v10 @kind wide;
  #L3d6232.  v3:= v12 @kind wide;
  #L3d6234.  v5:= v14 @kind object;
  #L3d6236.  v6:= v15 @kind object;
  #L3d6238.  call temp:= `takeLast`(v0, v1, v3, v5, v6, v7, v8) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d623e.  v10:= temp @kind object;
  #L3d6240.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v11 @kind this, `long` v12 , `long` v14 , `java.util.concurrent.TimeUnit` v16 @kind object, `io.reactivex.Scheduler` v17 @kind object, `boolean` v18 , `int` v19 ) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3d6254.  v2:= v12 @kind wide;
  #L3d6256.  v0:= "unit is null" @kind object;
  #L3d625a.  v6:= v16 @kind object;
  #L3d625e.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6264.  v0:= "scheduler is null" @kind object;
  #L3d6268.  v7:= v17 @kind object;
  #L3d626c.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6272.  v0:= "bufferSize" @kind object;
  #L3d6276.  v8:= v19;
  #L3d627a.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d6280.  v0:= 0L;
  #L3d6284.  v4:= lcmp(v2, v0);
  #L3d6288.  if v4 < 0 then goto L3d62b8;
  #L3d628c.  v10:= new `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed`;
  #L3d6290.  v0:= v10 @kind object;
  #L3d6292.  v1:= v11 @kind object;
  #L3d6294.  v2:= v12 @kind wide;
  #L3d6296.  v4:= v14 @kind wide;
  #L3d6298.  v6:= v16 @kind object;
  #L3d629c.  v7:= v17 @kind object;
  #L3d62a0.  v8:= v19;
  #L3d62a4.  v9:= v18;
  #L3d62a8.  call `<init>`(v0, v1, v2, v4, v6, v7, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @kind direct;
  #L3d62ae.  call temp:= `onAssembly`(v10) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d62b4.  v0:= temp @kind object;
  #L3d62b6.  return v0 @kind object;
  #L3d62b8.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3d62bc.  v1:= new `java.lang.StringBuilder`;
  #L3d62c0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d62c6.  v4:= "count >= 0 required but it was " @kind object;
  #L3d62ca.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d62d0.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d62d6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d62dc.  v1:= temp @kind object;
  #L3d62de.  call `<init>`(v0, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d62e4.  throw v0;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d6100.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d6106.  v4:= temp @kind object;
  #L3d6108.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d610e.  v6:= temp;
  #L3d6110.  v5:= 0I;
  #L3d6112.  v0:= v7 @kind object;
  #L3d6114.  v1:= v8 @kind wide;
  #L3d6116.  v3:= v10 @kind object;
  #L3d6118.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d611e.  v8:= temp @kind object;
  #L3d6120.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d6168.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d616e.  v6:= temp;
  #L3d6170.  v5:= 0I;
  #L3d6172.  v0:= v7 @kind object;
  #L3d6174.  v1:= v8 @kind wide;
  #L3d6176.  v3:= v10 @kind object;
  #L3d6178.  v4:= v11 @kind object;
  #L3d617a.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6180.  v8:= temp @kind object;
  #L3d6182.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `boolean` v12 ) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d6194.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d619a.  v6:= temp;
  #L3d619c.  v0:= v7 @kind object;
  #L3d619e.  v1:= v8 @kind wide;
  #L3d61a0.  v3:= v10 @kind object;
  #L3d61a2.  v4:= v11 @kind object;
  #L3d61a4.  v5:= v12;
  #L3d61a6.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d61ac.  v8:= temp @kind object;
  #L3d61ae.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object, `boolean` v14 , `int` v15 ) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d61c0.  v1:= 9223372036854775807L;
  #L3d61ca.  v0:= v9 @kind object;
  #L3d61cc.  v3:= v10 @kind wide;
  #L3d61ce.  v5:= v12 @kind object;
  #L3d61d0.  v6:= v13 @kind object;
  #L3d61d2.  v7:= v14;
  #L3d61d4.  v8:= v15;
  #L3d61d6.  call temp:= `takeLast`(v0, v1, v3, v5, v6, v7, v8) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d61dc.  v10:= temp @kind object;
  #L3d61de.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `boolean` v11 ) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d6134.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d613a.  v4:= temp @kind object;
  #L3d613c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d6142.  v6:= temp;
  #L3d6144.  v0:= v7 @kind object;
  #L3d6146.  v1:= v8 @kind wide;
  #L3d6148.  v3:= v10 @kind object;
  #L3d614a.  v5:= v11;
  #L3d614c.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6152.  v8:= temp @kind object;
  #L3d6154.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeUntil`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.takeUntil:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d62f8.  v0:= "stopPredicate is null" @kind object;
  #L3d62fc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6302.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate`;
  #L3d6306.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3d630c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6312.  v2:= temp @kind object;
  #L3d6314.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `takeUntil`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6328.  v0:= "other is null" @kind object;
  #L3d632c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6332.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeUntil`;
  #L3d6336.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d633c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6342.  v2:= temp @kind object;
  #L3d6344.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `takeWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.takeWhile:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6358.  v0:= "predicate is null" @kind object;
  #L3d635c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6362.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeWhile`;
  #L3d6366.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L3d636c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6372.  v2:= temp @kind object;
  #L3d6374.  return v2 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `test`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.test:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8160.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L3d8164.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:()V` @kind direct;
  #L3d816a.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d8170.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `test`(`io.reactivex.Flowable` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Flowable;.test:(J)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8184.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L3d8188.  call `<init>`(v0, v2) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @kind direct;
  #L3d818e.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d8194.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `test`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `boolean` v4 ) @signature `Lio/reactivex/Flowable;.test:(JZ)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d81a8.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L3d81ac.  call `<init>`(v0, v2) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @kind direct;
  #L3d81b2.  if v4 == 0 then goto L3d81bc;
  #L3d81b6.  call `cancel`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.cancel:()V` @kind virtual;
  #L3d81bc.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L3d81c2.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `throttleFirst`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6388.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d638e.  v0:= temp @kind object;
  #L3d6390.  call temp:= `throttleFirst`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6396.  v2:= temp @kind object;
  #L3d6398.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `throttleFirst`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d63ac.  v0:= "unit is null" @kind object;
  #L3d63b0.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d63b6.  v0:= "scheduler is null" @kind object;
  #L3d63ba.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d63c0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed`;
  #L3d63c4.  v1:= v0 @kind object;
  #L3d63c6.  v2:= v7 @kind object;
  #L3d63c8.  v3:= v8 @kind wide;
  #L3d63ca.  v5:= v10 @kind object;
  #L3d63cc.  v6:= v11 @kind object;
  #L3d63ce.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleFirstTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d63d4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d63da.  v8:= temp @kind object;
  #L3d63dc.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLast`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.throttleLast:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d63f0.  call temp:= `sample`(v0, v1, v3) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d63f6.  v1:= temp @kind object;
  #L3d63f8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLast`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.throttleLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d640c.  call temp:= `sample`(v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6412.  v1:= temp @kind object;
  #L3d6414.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLatest`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d6428.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d642e.  v4:= temp @kind object;
  #L3d6430.  v5:= 0I;
  #L3d6432.  v0:= v6 @kind object;
  #L3d6434.  v1:= v7 @kind wide;
  #L3d6436.  v3:= v9 @kind object;
  #L3d6438.  call temp:= `throttleLatest`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d643e.  v7:= temp @kind object;
  #L3d6440.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLatest`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d6480.  v5:= 0I;
  #L3d6482.  v0:= v6 @kind object;
  #L3d6484.  v1:= v7 @kind wide;
  #L3d6486.  v3:= v9 @kind object;
  #L3d6488.  v4:= v10 @kind object;
  #L3d648a.  call temp:= `throttleLatest`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6490.  v7:= temp @kind object;
  #L3d6492.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLatest`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `boolean` v13 ) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d64a4.  v0:= "unit is null" @kind object;
  #L3d64a8.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d64ae.  v0:= "scheduler is null" @kind object;
  #L3d64b2.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d64b8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableThrottleLatest`;
  #L3d64bc.  v1:= v0 @kind object;
  #L3d64be.  v2:= v8 @kind object;
  #L3d64c0.  v3:= v9 @kind wide;
  #L3d64c2.  v5:= v11 @kind object;
  #L3d64c4.  v6:= v12 @kind object;
  #L3d64c6.  v7:= v13;
  #L3d64c8.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L3d64ce.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d64d4.  v9:= temp @kind object;
  #L3d64d6.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLatest`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `boolean` v10 ) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d6454.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d645a.  v4:= temp @kind object;
  #L3d645c.  v0:= v6 @kind object;
  #L3d645e.  v1:= v7 @kind wide;
  #L3d6460.  v3:= v9 @kind object;
  #L3d6462.  v5:= v10;
  #L3d6464.  call temp:= `throttleLatest`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L3d646a.  v7:= temp @kind object;
  #L3d646c.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `throttleWithTimeout`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.throttleWithTimeout:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d64e8.  call temp:= `debounce`(v0, v1, v3) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d64ee.  v1:= temp @kind object;
  #L3d64f0.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `throttleWithTimeout`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.throttleWithTimeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d6504.  call temp:= `debounce`(v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d650a.  v1:= temp @kind object;
  #L3d650c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.timeInterval:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d6520.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3d6524.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d652a.  v1:= temp @kind object;
  #L3d652c.  call temp:= `timeInterval`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6532.  v0:= temp @kind object;
  #L3d6534.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.timeInterval:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6548.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3d654c.  call temp:= `timeInterval`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6552.  v2:= temp @kind object;
  #L3d6554.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6568.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d656e.  v0:= temp @kind object;
  #L3d6570.  call temp:= `timeInterval`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6576.  v2:= temp @kind object;
  #L3d6578.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d658c.  v0:= "unit is null" @kind object;
  #L3d6590.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6596.  v0:= "scheduler is null" @kind object;
  #L3d659a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d65a0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeInterval`;
  #L3d65a4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeInterval;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d65aa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d65b0.  v2:= temp @kind object;
  #L3d65b2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d6608.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d660e.  v5:= temp @kind object;
  #L3d6610.  v4:= 0I;
  #L3d6612.  v0:= v6 @kind object;
  #L3d6614.  v1:= v7 @kind wide;
  #L3d6616.  v3:= v9 @kind object;
  #L3d6618.  call temp:= `timeout0`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.timeout0:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L3d661e.  v7:= temp @kind object;
  #L3d6620.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d6634.  v4:= 0I;
  #L3d6636.  v0:= v6 @kind object;
  #L3d6638.  v1:= v7 @kind wide;
  #L3d663a.  v3:= v9 @kind object;
  #L3d663c.  v5:= v10 @kind object;
  #L3d663e.  call temp:= `timeout0`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.timeout0:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L3d6644.  v7:= temp @kind object;
  #L3d6646.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object, `org.reactivestreams.Publisher` v11 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d6658.  v0:= "other is null" @kind object;
  #L3d665c.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6662.  v0:= v6 @kind object;
  #L3d6664.  v1:= v7 @kind wide;
  #L3d6666.  v3:= v9 @kind object;
  #L3d6668.  v4:= v11 @kind object;
  #L3d666a.  v5:= v10 @kind object;
  #L3d666c.  call temp:= `timeout0`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.timeout0:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L3d6672.  v7:= temp @kind object;
  #L3d6674.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `org.reactivestreams.Publisher` v11 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d6688.  v0:= "other is null" @kind object;
  #L3d668c.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6692.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d6698.  v6:= temp @kind object;
  #L3d669a.  v1:= v7 @kind object;
  #L3d669c.  v2:= v8 @kind wide;
  #L3d669e.  v4:= v10 @kind object;
  #L3d66a0.  v5:= v11 @kind object;
  #L3d66a2.  call temp:= `timeout0`(v1, v2, v4, v5, v6) @signature `Lio/reactivex/Flowable;.timeout0:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L3d66a8.  v8:= temp @kind object;
  #L3d66aa.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d65c4.  v0:= 0I;
  #L3d65c6.  call temp:= `timeout0`(v1, v0, v2, v0) @signature `Lio/reactivex/Flowable;.timeout0:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L3d65cc.  v2:= temp @kind object;
  #L3d65ce.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.Flowable` v3 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lio/reactivex/functions/Function;Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d65e0.  v0:= "other is null" @kind object;
  #L3d65e4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d65ea.  v0:= 0I;
  #L3d65ec.  call temp:= `timeout0`(v1, v0, v2, v3) @signature `Lio/reactivex/Flowable;.timeout0:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L3d65f2.  v2:= temp @kind object;
  #L3d65f4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d66bc.  v0:= "firstTimeoutIndicator is null" @kind object;
  #L3d66c0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d66c6.  v0:= 0I;
  #L3d66c8.  call temp:= `timeout0`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.timeout0:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L3d66ce.  v2:= temp @kind object;
  #L3d66d0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d66e4.  v0:= "firstTimeoutSelector is null" @kind object;
  #L3d66e8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d66ee.  v0:= "other is null" @kind object;
  #L3d66f2.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d66f8.  call temp:= `timeout0`(v1, v2, v3, v4) @signature `Lio/reactivex/Flowable;.timeout0:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L3d66fe.  v2:= temp @kind object;
  #L3d6700.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.timestamp:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d67f0.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3d67f4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d67fa.  v1:= temp @kind object;
  #L3d67fc.  call temp:= `timestamp`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6802.  v0:= temp @kind object;
  #L3d6804.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.timestamp:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6818.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3d681c.  call temp:= `timestamp`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6822.  v2:= temp @kind object;
  #L3d6824.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6838.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d683e.  v0:= temp @kind object;
  #L3d6840.  call temp:= `timestamp`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6846.  v2:= temp @kind object;
  #L3d6848.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d685c.  v0:= "unit is null" @kind object;
  #L3d6860.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6866.  v0:= "scheduler is null" @kind object;
  #L3d686a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6870.  call temp:= `timestampWith`(v2, v3) @signature `Lio/reactivex/internal/functions/Functions;.timestampWith:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/functions/Function;` @kind static;
  #L3d6876.  v2:= temp @kind object;
  #L3d6878.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d687e.  v2:= temp @kind object;
  #L3d6880.  return v2 @kind object;
}
procedure `java.lang.Object` `to`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.to:(Lio/reactivex/functions/Function;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d83c0.  v0:= "converter is null" @kind object;
  #L3d83c4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d83ca.  v2:= temp @kind object;
  #L3d83cc.  v2:= (`io.reactivex.functions.Function`) v2 @kind object;
  #L3d83d0.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d83d6.  v2:= temp @kind object;
  #L3d83d8.  return v2 @kind object;
  #L3d83da.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d83dc.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3d83e2.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L3d83e8.  v2:= temp @kind object;
  #L3d83ea.  throw v2;
  catch `java.lang.Throwable` @[L3d83c0..L3d83d8] goto L3d83da;
}
procedure `java.util.concurrent.Future` `toFuture`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toFuture:()Ljava/util/concurrent/Future;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d8408.  v0:= new `io.reactivex.internal.subscribers.FutureSubscriber`;
  #L3d840c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/FutureSubscriber;.<init>:()V` @kind direct;
  #L3d8412.  call temp:= `subscribeWith`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribeWith:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;` @kind virtual;
  #L3d8418.  v0:= temp @kind object;
  #L3d841a.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L3d841e.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toList`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7b08.  v0:= new `io.reactivex.internal.operators.flowable.FlowableToListSingle`;
  #L3d7b0c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L3d7b12.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d7b18.  v0:= temp @kind object;
  #L3d7b1a.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toList`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.toList:(I)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7b2c.  v0:= "capacityHint" @kind object;
  #L3d7b30.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d7b36.  v0:= new `io.reactivex.internal.operators.flowable.FlowableToListSingle`;
  #L3d7b3a.  call temp:= `createArrayList`(v2) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L3d7b40.  v2:= temp @kind object;
  #L3d7b42.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d7b48.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d7b4e.  v2:= temp @kind object;
  #L3d7b50.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toList`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.toList:(Ljava/util/concurrent/Callable;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7b64.  v0:= "collectionSupplier is null" @kind object;
  #L3d7b68.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7b6e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableToListSingle`;
  #L3d7b72.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L3d7b78.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L3d7b7e.  v2:= temp @kind object;
  #L3d7b80.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.toMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7b94.  v0:= "keySelector is null" @kind object;
  #L3d7b98.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7b9e.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d7ba4.  v0:= temp @kind object;
  #L3d7ba6.  call temp:= `toMapKeySelector`(v2) @signature `Lio/reactivex/internal/functions/Functions;.toMapKeySelector:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L3d7bac.  v2:= temp @kind object;
  #L3d7bae.  call temp:= `collect`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L3d7bb4.  v2:= temp @kind object;
  #L3d7bb6.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.toMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7bc8.  v0:= "keySelector is null" @kind object;
  #L3d7bcc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7bd2.  v0:= "valueSelector is null" @kind object;
  #L3d7bd6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7bdc.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d7be2.  v0:= temp @kind object;
  #L3d7be4.  call temp:= `toMapKeyValueSelector`(v2, v3) @signature `Lio/reactivex/internal/functions/Functions;.toMapKeyValueSelector:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L3d7bea.  v2:= temp @kind object;
  #L3d7bec.  call temp:= `collect`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L3d7bf2.  v2:= temp @kind object;
  #L3d7bf4.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7c08.  v0:= "keySelector is null" @kind object;
  #L3d7c0c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7c12.  v0:= "valueSelector is null" @kind object;
  #L3d7c16.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7c1c.  call temp:= `toMapKeyValueSelector`(v2, v3) @signature `Lio/reactivex/internal/functions/Functions;.toMapKeyValueSelector:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L3d7c22.  v2:= temp @kind object;
  #L3d7c24.  call temp:= `collect`(v1, v4, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L3d7c2a.  v2:= temp @kind object;
  #L3d7c2c.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3d7c40.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L3d7c46.  v0:= temp @kind object;
  #L3d7c48.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d7c4e.  v1:= temp @kind object;
  #L3d7c50.  call temp:= `asFunction`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asFunction:()Lio/reactivex/functions/Function;` @kind static;
  #L3d7c56.  v2:= temp @kind object;
  #L3d7c58.  call temp:= `toMultimap`(v3, v4, v0, v1, v2) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L3d7c5e.  v4:= temp @kind object;
  #L3d7c60.  return v4 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d7c74.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L3d7c7a.  v0:= temp @kind object;
  #L3d7c7c.  call temp:= `asFunction`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asFunction:()Lio/reactivex/functions/Function;` @kind static;
  #L3d7c82.  v1:= temp @kind object;
  #L3d7c84.  call temp:= `toMultimap`(v2, v3, v4, v0, v1) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L3d7c8a.  v3:= temp @kind object;
  #L3d7c8c.  return v3 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7ca0.  call temp:= `asFunction`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asFunction:()Lio/reactivex/functions/Function;` @kind static;
  #L3d7ca6.  v0:= temp @kind object;
  #L3d7ca8.  call temp:= `toMultimap`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L3d7cae.  v2:= temp @kind object;
  #L3d7cb0.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object, `io.reactivex.functions.Function` v5 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7cc4.  v0:= "keySelector is null" @kind object;
  #L3d7cc8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7cce.  v0:= "valueSelector is null" @kind object;
  #L3d7cd2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7cd8.  v0:= "mapSupplier is null" @kind object;
  #L3d7cdc.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7ce2.  v0:= "collectionFactory is null" @kind object;
  #L3d7ce6.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7cec.  call temp:= `toMultimapKeyValueSelector`(v2, v3, v5) @signature `Lio/reactivex/internal/functions/Functions;.toMultimapKeyValueSelector:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L3d7cf2.  v2:= temp @kind object;
  #L3d7cf4.  call temp:= `collect`(v1, v4, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L3d7cfa.  v2:= temp @kind object;
  #L3d7cfc.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `toObservable`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toObservable:()Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d76c4.  v0:= new `io.reactivex.internal.operators.observable.ObservableFromPublisher`;
  #L3d76c8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d76ce.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L3d76d4.  v0:= temp @kind object;
  #L3d76d6.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toSortedList:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7d10.  call temp:= `naturalComparator`() @signature `Lio/reactivex/internal/functions/Functions;.naturalComparator:()Ljava/util/Comparator;` @kind static;
  #L3d7d16.  v0:= temp @kind object;
  #L3d7d18.  call temp:= `toSortedList`(v1, v0) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;)Lio/reactivex/Single;` @kind virtual;
  #L3d7d1e.  v0:= temp @kind object;
  #L3d7d20.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.toSortedList:(I)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7d34.  call temp:= `naturalComparator`() @signature `Lio/reactivex/internal/functions/Functions;.naturalComparator:()Ljava/util/Comparator;` @kind static;
  #L3d7d3a.  v0:= temp @kind object;
  #L3d7d3c.  call temp:= `toSortedList`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Single;` @kind virtual;
  #L3d7d42.  v2:= temp @kind object;
  #L3d7d44.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7d58.  v0:= "comparator is null" @kind object;
  #L3d7d5c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7d62.  call temp:= `toList`(v1) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L3d7d68.  v0:= temp @kind object;
  #L3d7d6a.  call temp:= `listSorter`(v2) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L3d7d70.  v2:= temp @kind object;
  #L3d7d72.  call temp:= `map`(v0, v2) @signature `Lio/reactivex/Single;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L3d7d78.  v2:= temp @kind object;
  #L3d7d7a.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this, `java.util.Comparator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7d8c.  v0:= "comparator is null" @kind object;
  #L3d7d90.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7d96.  call temp:= `toList`(v1, v3) @signature `Lio/reactivex/Flowable;.toList:(I)Lio/reactivex/Single;` @kind virtual;
  #L3d7d9c.  v3:= temp @kind object;
  #L3d7d9e.  call temp:= `listSorter`(v2) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L3d7da4.  v2:= temp @kind object;
  #L3d7da6.  call temp:= `map`(v3, v2) @signature `Lio/reactivex/Single;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L3d7dac.  v2:= temp @kind object;
  #L3d7dae.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `unsubscribeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.unsubscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d68dc.  v0:= "scheduler is null" @kind object;
  #L3d68e0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d68e6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn`;
  #L3d68ea.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/Scheduler;)V` @kind direct;
  #L3d68f0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d68f6.  v2:= temp @kind object;
  #L3d68f8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/Flowable;.window:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d69c8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d69ce.  v5:= temp;
  #L3d69d0.  v0:= v6 @kind object;
  #L3d69d2.  v1:= v7 @kind wide;
  #L3d69d4.  v3:= v7 @kind wide;
  #L3d69d6.  call temp:= `window`(v0, v1, v3, v5) @signature `Lio/reactivex/Flowable;.window:(JJI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d69dc.  v7:= temp @kind object;
  #L3d69de.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lio/reactivex/Flowable;.window:(JJ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d6b6c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d6b72.  v5:= temp;
  #L3d6b74.  v0:= v6 @kind object;
  #L3d6b76.  v1:= v7 @kind wide;
  #L3d6b78.  v3:= v9 @kind wide;
  #L3d6b7a.  call temp:= `window`(v0, v1, v3, v5) @signature `Lio/reactivex/Flowable;.window:(JJI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6b80.  v7:= temp @kind object;
  #L3d6b82.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `int` v13 ) @signature `Lio/reactivex/Flowable;.window:(JJI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d6b94.  v0:= "skip" @kind object;
  #L3d6b98.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3d6b9e.  v0:= "count" @kind object;
  #L3d6ba2.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3d6ba8.  v0:= "bufferSize" @kind object;
  #L3d6bac.  call temp:= `verifyPositive`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d6bb2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindow`;
  #L3d6bb6.  v1:= v0 @kind object;
  #L3d6bb8.  v2:= v8 @kind object;
  #L3d6bba.  v3:= v9 @kind wide;
  #L3d6bbc.  v5:= v11 @kind wide;
  #L3d6bbe.  v7:= v13;
  #L3d6bc0.  call `<init>`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow;.<init>:(Lio/reactivex/Flowable;JJI)V` @kind direct;
  #L3d6bc6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6bcc.  v9:= temp @kind object;
  #L3d6bce.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d6be0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d6be6.  v6:= temp @kind object;
  #L3d6be8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d6bee.  v7:= temp;
  #L3d6bf0.  v0:= v8 @kind object;
  #L3d6bf2.  v1:= v9 @kind wide;
  #L3d6bf4.  v3:= v11 @kind wide;
  #L3d6bf6.  v5:= v13 @kind object;
  #L3d6bf8.  call temp:= `window`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6bfe.  v9:= temp @kind object;
  #L3d6c00.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object, `io.reactivex.Scheduler` v14 @kind object) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d6c14.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d6c1a.  v7:= temp;
  #L3d6c1c.  v0:= v8 @kind object;
  #L3d6c1e.  v1:= v9 @kind wide;
  #L3d6c20.  v3:= v11 @kind wide;
  #L3d6c22.  v5:= v13 @kind object;
  #L3d6c24.  v6:= v14 @kind object;
  #L3d6c26.  call temp:= `window`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6c2c.  v9:= temp @kind object;
  #L3d6c2e.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v13 @kind this, `long` v14 , `long` v16 , `java.util.concurrent.TimeUnit` v18 @kind object, `io.reactivex.Scheduler` v19 @kind object, `int` v20 ) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3d6c40.  v0:= "bufferSize" @kind object;
  #L3d6c44.  v11:= v20;
  #L3d6c48.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d6c4e.  v0:= "timespan" @kind object;
  #L3d6c52.  v3:= v14 @kind wide;
  #L3d6c54.  call temp:= `verifyPositive`(v14, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3d6c5a.  v0:= "timeskip" @kind object;
  #L3d6c5e.  v5:= v16 @kind wide;
  #L3d6c62.  call temp:= `verifyPositive`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3d6c68.  v0:= "scheduler is null" @kind object;
  #L3d6c6c.  v8:= v19 @kind object;
  #L3d6c70.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6c76.  v0:= "unit is null" @kind object;
  #L3d6c7a.  v7:= v18 @kind object;
  #L3d6c7e.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6c84.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed`;
  #L3d6c88.  v9:= 9223372036854775807L;
  #L3d6c92.  v12:= 0I;
  #L3d6c94.  v1:= v0 @kind object;
  #L3d6c96.  v2:= v13 @kind object;
  #L3d6c98.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v11, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V` @kind direct;
  #L3d6c9e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6ca4.  v0:= temp @kind object;
  #L3d6ca6.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d69f0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d69f6.  v4:= temp @kind object;
  #L3d69f8.  v5:= 9223372036854775807L;
  #L3d6a02.  v7:= 0I;
  #L3d6a04.  v0:= v8 @kind object;
  #L3d6a06.  v1:= v9 @kind wide;
  #L3d6a08.  v3:= v11 @kind object;
  #L3d6a0a.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6a10.  v9:= temp @kind object;
  #L3d6a12.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `long` v12 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d6b14.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d6b1a.  v4:= temp @kind object;
  #L3d6b1c.  v7:= 0I;
  #L3d6b1e.  v0:= v8 @kind object;
  #L3d6b20.  v1:= v9 @kind wide;
  #L3d6b22.  v3:= v11 @kind object;
  #L3d6b24.  v5:= v12 @kind wide;
  #L3d6b26.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6b2c.  v9:= temp @kind object;
  #L3d6b2e.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `long` v12 , `boolean` v14 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;JZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d6b40.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L3d6b46.  v4:= temp @kind object;
  #L3d6b48.  v0:= v8 @kind object;
  #L3d6b4a.  v1:= v9 @kind wide;
  #L3d6b4c.  v3:= v11 @kind object;
  #L3d6b4e.  v5:= v12 @kind wide;
  #L3d6b50.  v7:= v14;
  #L3d6b52.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6b58.  v9:= temp @kind object;
  #L3d6b5a.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d6a24.  v5:= 9223372036854775807L;
  #L3d6a2e.  v7:= 0I;
  #L3d6a30.  v0:= v8 @kind object;
  #L3d6a32.  v1:= v9 @kind wide;
  #L3d6a34.  v3:= v11 @kind object;
  #L3d6a36.  v4:= v12 @kind object;
  #L3d6a38.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6a3e.  v9:= temp @kind object;
  #L3d6a40.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `long` v13 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d6a54.  v7:= 0I;
  #L3d6a56.  v0:= v8 @kind object;
  #L3d6a58.  v1:= v9 @kind wide;
  #L3d6a5a.  v3:= v11 @kind object;
  #L3d6a5c.  v4:= v12 @kind object;
  #L3d6a5e.  v5:= v13 @kind wide;
  #L3d6a60.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6a66.  v9:= temp @kind object;
  #L3d6a68.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object, `long` v14 , `boolean` v16 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d6a7c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d6a82.  v8:= temp;
  #L3d6a84.  v0:= v9 @kind object;
  #L3d6a86.  v1:= v10 @kind wide;
  #L3d6a88.  v3:= v12 @kind object;
  #L3d6a8a.  v4:= v13 @kind object;
  #L3d6a8c.  v5:= v14 @kind wide;
  #L3d6a8e.  v7:= v16;
  #L3d6a92.  call temp:= `window`(v0, v1, v3, v4, v5, v7, v8) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZI)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6a98.  v0:= temp @kind object;
  #L3d6a9a.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v13 @kind this, `long` v14 , `java.util.concurrent.TimeUnit` v16 @kind object, `io.reactivex.Scheduler` v17 @kind object, `long` v18 , `boolean` v20 , `int` v21 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3d6aac.  v0:= "bufferSize" @kind object;
  #L3d6ab0.  v11:= v21;
  #L3d6ab4.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d6aba.  v0:= "scheduler is null" @kind object;
  #L3d6abe.  v8:= v17 @kind object;
  #L3d6ac2.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6ac8.  v0:= "unit is null" @kind object;
  #L3d6acc.  v7:= v16 @kind object;
  #L3d6ad0.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6ad6.  v0:= "count" @kind object;
  #L3d6ada.  v9:= v18 @kind wide;
  #L3d6ade.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L3d6ae4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed`;
  #L3d6ae8.  v1:= v0 @kind object;
  #L3d6aea.  v2:= v13 @kind object;
  #L3d6aec.  v3:= v14 @kind wide;
  #L3d6aee.  v5:= v14 @kind wide;
  #L3d6af0.  v12:= v20;
  #L3d6af4.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v11, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V` @kind direct;
  #L3d6afa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6b00.  v0:= temp @kind object;
  #L3d6b02.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.window:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d696c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d6972.  v0:= temp;
  #L3d6974.  call temp:= `window`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.window:(Ljava/util/concurrent/Callable;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d697a.  v2:= temp @kind object;
  #L3d697c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.window:(Ljava/util/concurrent/Callable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6990.  v0:= "boundaryIndicatorSupplier is null" @kind object;
  #L3d6994.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d699a.  v0:= "bufferSize" @kind object;
  #L3d699e.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d69a4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier`;
  #L3d69a8.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;I)V` @kind direct;
  #L3d69ae.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d69b4.  v2:= temp @kind object;
  #L3d69b6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6cb8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d6cbe.  v0:= temp;
  #L3d6cc0.  call temp:= `window`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6cc6.  v2:= temp @kind object;
  #L3d6cc8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6cdc.  v0:= "boundaryIndicator is null" @kind object;
  #L3d6ce0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6ce6.  v0:= "bufferSize" @kind object;
  #L3d6cea.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d6cf0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundary`;
  #L3d6cf4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;I)V` @kind direct;
  #L3d6cfa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6d00.  v2:= temp @kind object;
  #L3d6d02.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6d14.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L3d6d1a.  v0:= temp;
  #L3d6d1c.  call temp:= `window`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6d22.  v2:= temp @kind object;
  #L3d6d24.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6d38.  v0:= "openingIndicator is null" @kind object;
  #L3d6d3c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6d42.  v0:= "closingIndicator is null" @kind object;
  #L3d6d46.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6d4c.  v0:= "bufferSize" @kind object;
  #L3d6d50.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L3d6d56.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector`;
  #L3d6d5a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L3d6d60.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6d66.  v2:= temp @kind object;
  #L3d6d68.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6d7c.  v0:= "others is null" @kind object;
  #L3d6d80.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6d86.  v0:= "combiner is null" @kind object;
  #L3d6d8a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6d90.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany`;
  #L3d6d94.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Iterable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d6d9a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6da0.  v2:= temp @kind object;
  #L3d6da2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6db4.  v0:= "other is null" @kind object;
  #L3d6db8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6dbe.  v0:= "combiner is null" @kind object;
  #L3d6dc2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6dc8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom`;
  #L3d6dcc.  call `<init>`(v0, v1, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiFunction;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L3d6dd2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6dd8.  v2:= temp @kind object;
  #L3d6dda.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.Function3` v5 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function3;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d6dec.  v0:= "source1 is null" @kind object;
  #L3d6df0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6df6.  v0:= "source2 is null" @kind object;
  #L3d6dfa.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6e00.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L3d6e06.  v5:= temp @kind object;
  #L3d6e08.  v0:= 2I;
  #L3d6e0a.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d6e0e.  v1:= 0I;
  #L3d6e10.  v0[v1]:= v3 @kind object;
  #L3d6e14.  v3:= 1I;
  #L3d6e16.  v0[v3]:= v4 @kind object;
  #L3d6e1a.  call temp:= `withLatestFrom`(v2, v0, v5) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6e20.  v3:= temp @kind object;
  #L3d6e22.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `io.reactivex.functions.Function4` v6 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function4;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d6e34.  v0:= "source1 is null" @kind object;
  #L3d6e38.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6e3e.  v0:= "source2 is null" @kind object;
  #L3d6e42.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6e48.  v0:= "source3 is null" @kind object;
  #L3d6e4c.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6e52.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L3d6e58.  v6:= temp @kind object;
  #L3d6e5a.  v0:= 3I;
  #L3d6e5c.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d6e60.  v1:= 0I;
  #L3d6e62.  v0[v1]:= v3 @kind object;
  #L3d6e66.  v3:= 1I;
  #L3d6e68.  v0[v3]:= v4 @kind object;
  #L3d6e6c.  v3:= 2I;
  #L3d6e6e.  v0[v3]:= v5 @kind object;
  #L3d6e72.  call temp:= `withLatestFrom`(v2, v0, v6) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6e78.  v3:= temp @kind object;
  #L3d6e7a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `io.reactivex.functions.Function5` v7 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function5;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d6e8c.  v0:= "source1 is null" @kind object;
  #L3d6e90.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6e96.  v0:= "source2 is null" @kind object;
  #L3d6e9a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6ea0.  v0:= "source3 is null" @kind object;
  #L3d6ea4.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6eaa.  v0:= "source4 is null" @kind object;
  #L3d6eae.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6eb4.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L3d6eba.  v7:= temp @kind object;
  #L3d6ebc.  v0:= 4I;
  #L3d6ebe.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L3d6ec2.  v1:= 0I;
  #L3d6ec4.  v0[v1]:= v3 @kind object;
  #L3d6ec8.  v3:= 1I;
  #L3d6eca.  v0[v3]:= v4 @kind object;
  #L3d6ece.  v3:= 2I;
  #L3d6ed0.  v0[v3]:= v5 @kind object;
  #L3d6ed4.  v3:= 3I;
  #L3d6ed6.  v0[v3]:= v6 @kind object;
  #L3d6eda.  call temp:= `withLatestFrom`(v2, v0, v7) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L3d6ee0.  v3:= temp @kind object;
  #L3d6ee2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher`[] v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6ef4.  v0:= "others is null" @kind object;
  #L3d6ef8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6efe.  v0:= "combiner is null" @kind object;
  #L3d6f02.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d6f08.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany`;
  #L3d6f0c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany;.<init>:(Lio/reactivex/Flowable;[Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)V` @kind direct;
  #L3d6f12.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d6f18.  v2:= temp @kind object;
  #L3d6f1a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.zipWith:(Ljava/lang/Iterable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7538.  v0:= "other is null" @kind object;
  #L3d753c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d7542.  v0:= "zipper is null" @kind object;
  #L3d7546.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d754c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZipIterable`;
  #L3d7550.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Iterable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L3d7556.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L3d755c.  v2:= temp @kind object;
  #L3d755e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.zipWith:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d7570.  v0:= "other is null" @kind object;
  #L3d7574.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d757a.  call temp:= `zip`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @kind static;
  #L3d7580.  v2:= temp @kind object;
  #L3d7582.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.zipWith:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d7594.  call temp:= `zip`(v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @kind static;
  #L3d759a.  v1:= temp @kind object;
  #L3d759c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.zipWith:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d75b0.  call temp:= `zip`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @kind static;
  #L3d75b6.  v1:= temp @kind object;
  #L3d75b8.  return v1 @kind object;
}
