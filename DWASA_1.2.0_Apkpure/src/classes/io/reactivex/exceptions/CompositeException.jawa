record `io.reactivex.exceptions.CompositeException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.lang.Throwable` `io.reactivex.exceptions.CompositeException.cause` @AccessFlag PRIVATE;
  `java.util.List` `io.reactivex.exceptions.CompositeException.exceptions` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.reactivex.exceptions.CompositeException.message` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@io.reactivex.exceptions.CompositeException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.exceptions.CompositeException` v4 @kind this, `java.lang.Iterable` v5 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e4c30.  call `<init>`(v4) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L3e4c36.  v0:= new `java.util.LinkedHashSet`;
  #L3e4c3a.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L3e4c40.  v1:= new `java.util.ArrayList`;
  #L3e4c44.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3e4c4a.  if v5 == 0 then goto L3e4cac;
  #L3e4c4e.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e4c54.  v5:= temp @kind object;
  #L3e4c56.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e4c5c.  v2:= temp;
  #L3e4c5e.  if v2 == 0 then goto L3e4cc0;
  #L3e4c62.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e4c68.  v2:= temp @kind object;
  #L3e4c6a.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L3e4c6e.  v3:= instanceof @variable v2 @type ^`io.reactivex.exceptions.CompositeException` @kind boolean;
  #L3e4c72.  if v3 == 0 then goto L3e4c8a;
  #L3e4c76.  v2:= (`io.reactivex.exceptions.CompositeException`) v2 @kind object;
  #L3e4c7a.  call temp:= `getExceptions`(v2) @signature `Lio/reactivex/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L3e4c80.  v2:= temp @kind object;
  #L3e4c82.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3e4c88.  goto L3e4c56;
  #L3e4c8a.  if v2 == 0 then goto L3e4c96;
  #L3e4c8e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e4c94.  goto L3e4c56;
  #L3e4c96.  v2:= new `java.lang.NullPointerException`;
  #L3e4c9a.  v3:= "Throwable was null!" @kind object;
  #L3e4c9e.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e4ca4.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e4caa.  goto L3e4c56;
  #L3e4cac.  v5:= new `java.lang.NullPointerException`;
  #L3e4cb0.  v2:= "errors was null" @kind object;
  #L3e4cb4.  call `<init>`(v5, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e4cba.  call temp:= `add`(v0, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e4cc0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L3e4cc6.  v5:= temp;
  #L3e4cc8.  if v5 != 0 then goto L3e4d12;
  #L3e4ccc.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3e4cd2.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3e4cd8.  v5:= temp @kind object;
  #L3e4cda.  v4.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` := v5 @kind object;
  #L3e4cde.  v5:= new `java.lang.StringBuilder`;
  #L3e4ce2.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e4ce8.  v0:= v4.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L3e4cec.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3e4cf2.  v0:= temp;
  #L3e4cf4.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4cfa.  v0:= " exceptions occurred. " @kind object;
  #L3e4cfe.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4d04.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e4d0a.  v5:= temp @kind object;
  #L3e4d0c.  v4.`io.reactivex.exceptions.CompositeException.message` @type ^`java.lang.String` := v5 @kind object;
  #L3e4d10.  return @kind void;
  #L3e4d12.  v5:= new `java.lang.IllegalArgumentException`;
  #L3e4d16.  v0:= "errors is empty" @kind object;
  #L3e4d1a.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e4d20.  goto L3e4d24;
  #L3e4d22.  throw v5;
  #L3e4d24.  goto L3e4d22;
}
procedure `void` `<init>`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.lang.Throwable`[] v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e4d38.  if v2 != 0 then goto L3e4d54;
  #L3e4d3c.  v2:= new `java.lang.NullPointerException`;
  #L3e4d40.  v0:= "exceptions was null" @kind object;
  #L3e4d44.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e4d4a.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3e4d50.  v2:= temp @kind object;
  #L3e4d52.  goto L3e4d5c;
  #L3e4d54.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3e4d5a.  v2:= temp @kind object;
  #L3e4d5c.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L3e4d62.  return @kind void;
}
procedure `void` `appendStackTrace`(`io.reactivex.exceptions.CompositeException` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.lang.Throwable` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.appendStackTrace:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e4d74.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4d7a.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4d80.  v8:= 10I;
  #L3e4d84.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4d8a.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L3e4d90.  v0:= temp @kind object;
  #L3e4d92.  v1:= length @variable v0;
  #L3e4d94.  v2:= 0I;
  #L3e4d96.  if v2 >= v1 then goto L3e4dba;
  #L3e4d9a.  v3:= v0[v2] @kind object;
  #L3e4d9e.  v4:= "\t\tat " @kind object;
  #L3e4da2.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4da8.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4dae.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4db4.  v2:= v2 + 1;
  #L3e4db8.  goto L3e4d96;
  #L3e4dba.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3e4dc0.  v8:= temp @kind object;
  #L3e4dc2.  if v8 == 0 then goto L3e4de2;
  #L3e4dc6.  v8:= "\tCaused by: " @kind object;
  #L3e4dca.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4dd0.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3e4dd6.  v7:= temp @kind object;
  #L3e4dd8.  v8:= "" @kind object;
  #L3e4ddc.  call `appendStackTrace`(v5, v6, v7, v8) @signature `Lio/reactivex/exceptions/CompositeException;.appendStackTrace:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L3e4de2.  return @kind void;
}
procedure `java.util.List` `getListOfCauses`(`io.reactivex.exceptions.CompositeException` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.getListOfCauses:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e4be4.  v0:= new `java.util.ArrayList`;
  #L3e4be8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3e4bee.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3e4bf4.  v1:= temp @kind object;
  #L3e4bf6.  if v1 == 0 then goto L3e4c1c;
  #L3e4bfa.  if v1 != v3 then goto L3e4c00;
  #L3e4bfe.  goto L3e4c1c;
  #L3e4c00.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e4c06.  call temp:= `getCause`(v1) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3e4c0c.  v3:= temp @kind object;
  #L3e4c0e.  if v3 == 0 then goto L3e4c1c;
  #L3e4c12.  if v3 != v1 then goto L3e4c18;
  #L3e4c16.  goto L3e4c1c;
  #L3e4c18.  v1:= v3 @kind object;
  #L3e4c1a.  goto L3e4c00;
  #L3e4c1c.  return v0 @kind object;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v7 @kind this, `io.reactivex.exceptions.CompositeException$PrintStreamOrWriter` v8 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Lio/reactivex/exceptions/CompositeException$PrintStreamOrWriter;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3e4e10.  v0:= new `java.lang.StringBuilder`;
  #L3e4e14.  v1:= 128I;
  #L3e4e18.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3e4e1e.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4e24.  v1:= 10I;
  #L3e4e28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4e2e.  call temp:= `getStackTrace`(v7) @signature `Lio/reactivex/exceptions/CompositeException;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L3e4e34.  v2:= temp @kind object;
  #L3e4e36.  v3:= length @variable v2;
  #L3e4e38.  v4:= 0I;
  #L3e4e3a.  if v4 >= v3 then goto L3e4e5e;
  #L3e4e3e.  v5:= v2[v4] @kind object;
  #L3e4e42.  v6:= "\tat " @kind object;
  #L3e4e46.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4e4c.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4e52.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4e58.  v4:= v4 + 1;
  #L3e4e5c.  goto L3e4e3a;
  #L3e4e5e.  v1:= v7.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L3e4e62.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e4e68.  v1:= temp @kind object;
  #L3e4e6a.  v2:= 1I;
  #L3e4e6c.  v3:= 1I;
  #L3e4e6e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e4e74.  v4:= temp;
  #L3e4e76.  if v4 == 0 then goto L3e4eae;
  #L3e4e7a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e4e80.  v4:= temp @kind object;
  #L3e4e82.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L3e4e86.  v5:= "  ComposedException " @kind object;
  #L3e4e8a.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4e90.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4e96.  v5:= " :\n" @kind object;
  #L3e4e9a.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e4ea0.  v5:= "\t" @kind object;
  #L3e4ea4.  call `appendStackTrace`(v7, v0, v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.appendStackTrace:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L3e4eaa.  v3:= v3 + v2 @kind int;
  #L3e4eac.  goto L3e4e6e;
  #L3e4eae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e4eb4.  v0:= temp @kind object;
  #L3e4eb6.  call `println`(v8, v0) @signature `Lio/reactivex/exceptions/CompositeException$PrintStreamOrWriter;.println:(Ljava/lang/Object;)V` @kind virtual;
  #L3e4ebc.  return @kind void;
}
procedure `java.lang.Throwable` `getCause`(`io.reactivex.exceptions.CompositeException` v8 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getCause:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3e4a90.  @monitorenter v8
  #L3e4a92.  v0:= v8.`io.reactivex.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` @kind object;
  #L3e4a96.  if v0 != 0 then goto L3e4b48;
  #L3e4a9a.  v0:= new `io.reactivex.exceptions.CompositeException$CompositeExceptionCausalChain`;
  #L3e4a9e.  call `<init>`(v0) @signature `Lio/reactivex/exceptions/CompositeException$CompositeExceptionCausalChain;.<init>:()V` @kind direct;
  #L3e4aa4.  v1:= new `java.util.HashSet`;
  #L3e4aa8.  call `<init>`(v1) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L3e4aae.  v2:= v8.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L3e4ab2.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e4ab8.  v2:= temp @kind object;
  #L3e4aba.  v3:= v0 @kind object;
  #L3e4abc.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e4ac2.  v4:= temp;
  #L3e4ac4.  if v4 == 0 then goto L3e4b44;
  #L3e4ac8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e4ace.  v4:= temp @kind object;
  #L3e4ad0.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L3e4ad4.  call temp:= `contains`(v1, v4) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3e4ada.  v5:= temp;
  #L3e4adc.  if v5 == 0 then goto L3e4ae2;
  #L3e4ae0.  goto L3e4abc;
  #L3e4ae2.  call temp:= `add`(v1, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e4ae8.  call temp:= `getListOfCauses`(v8, v4) @signature `Lio/reactivex/exceptions/CompositeException;.getListOfCauses:(Ljava/lang/Throwable;)Ljava/util/List;` @kind direct;
  #L3e4aee.  v5:= temp @kind object;
  #L3e4af0.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e4af6.  v5:= temp @kind object;
  #L3e4af8.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e4afe.  v6:= temp;
  #L3e4b00.  if v6 == 0 then goto L3e4b34;
  #L3e4b04.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e4b0a.  v6:= temp @kind object;
  #L3e4b0c.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L3e4b10.  call temp:= `contains`(v1, v6) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3e4b16.  v7:= temp;
  #L3e4b18.  if v7 == 0 then goto L3e4b2c;
  #L3e4b1c.  v4:= new `java.lang.RuntimeException`;
  #L3e4b20.  v6:= "Duplicate found in causal chain so cropping to prevent loop ..." @kind object;
  #L3e4b24.  call `<init>`(v4, v6) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e4b2a.  goto L3e4af8;
  #L3e4b2c.  call temp:= `add`(v1, v6) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e4b32.  goto L3e4af8;
  #L3e4b34.  call temp:= `initCause`(v3, v4) @signature `Ljava/lang/Throwable;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3e4b3a.  call temp:= `getRootCause`(v8, v3) @signature `Lio/reactivex/exceptions/CompositeException;.getRootCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3e4b40.  v3:= temp @kind object;
  #L3e4b42.  goto L3e4abc;
  #L3e4b44.  v8.`io.reactivex.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` := v0 @kind object;
  #L3e4b48.  v0:= v8.`io.reactivex.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` @kind object;
  #L3e4b4c.  @monitorexit v8
  #L3e4b4e.  return v0 @kind object;
  #L3e4b50.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e4b52.  @monitorexit v8
  #L3e4b54.  goto L3e4b58;
  #L3e4b56.  throw v0;
  #L3e4b58.  goto L3e4b56;
  catch `java.lang.Throwable` @[L3e4a92..L3e4b32] goto L3e4b50;
  catch `java.lang.Throwable` @[L3e4b34..L3e4b3a] goto L3e4b3a;
  catch `java.lang.Throwable` @[L3e4b3a..L3e4b4c] goto L3e4b50;
}
procedure `java.util.List` `getExceptions`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e4bcc.  v0:= v1.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L3e4bd0.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e4a78.  v0:= v1.`io.reactivex.exceptions.CompositeException.message` @type ^`java.lang.String` @kind object;
  #L3e4a7c.  return v0 @kind object;
}
procedure `java.lang.Throwable` `getRootCause`(`io.reactivex.exceptions.CompositeException` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.getRootCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3e4b8c.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3e4b92.  v0:= temp @kind object;
  #L3e4b94.  if v0 == 0 then goto L3e4bba;
  #L3e4b98.  v1:= v2.`io.reactivex.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` @kind object;
  #L3e4b9c.  if v1 != v0 then goto L3e4ba2;
  #L3e4ba0.  goto L3e4bba;
  #L3e4ba2.  call temp:= `getCause`(v0) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3e4ba8.  v3:= temp @kind object;
  #L3e4baa.  if v3 == 0 then goto L3e4bb8;
  #L3e4bae.  if v3 != v0 then goto L3e4bb4;
  #L3e4bb2.  goto L3e4bb8;
  #L3e4bb4.  v0:= v3 @kind object;
  #L3e4bb6.  goto L3e4ba2;
  #L3e4bb8.  return v0 @kind object;
  #L3e4bba.  return v3 @kind object;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e4df4.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L3e4df8.  call `printStackTrace`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L3e4dfe.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.io.PrintStream` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e4ed0.  v0:= new `io.reactivex.exceptions.CompositeException$WrappedPrintStream`;
  #L3e4ed4.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/CompositeException$WrappedPrintStream;.<init>:(Ljava/io/PrintStream;)V` @kind direct;
  #L3e4eda.  call `printStackTrace`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Lio/reactivex/exceptions/CompositeException$PrintStreamOrWriter;)V` @kind direct;
  #L3e4ee0.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.io.PrintWriter` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e4ef4.  v0:= new `io.reactivex.exceptions.CompositeException$WrappedPrintWriter`;
  #L3e4ef8.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/CompositeException$WrappedPrintWriter;.<init>:(Ljava/io/PrintWriter;)V` @kind direct;
  #L3e4efe.  call `printStackTrace`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Lio/reactivex/exceptions/CompositeException$PrintStreamOrWriter;)V` @kind direct;
  #L3e4f04.  return @kind void;
}
procedure `int` `size`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e4a58.  v0:= v1.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L3e4a5c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3e4a62.  v0:= temp;
  #L3e4a64.  return v0;
}
