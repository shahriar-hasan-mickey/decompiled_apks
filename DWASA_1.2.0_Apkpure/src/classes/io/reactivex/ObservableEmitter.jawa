record `io.reactivex.ObservableEmitter` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `io.reactivex.Emitter` @kind interface {
}
procedure `boolean` `isDisposed`() @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.ObservableEmitter` `serialize`() @signature `Lio/reactivex/ObservableEmitter;.serialize:()Lio/reactivex/ObservableEmitter;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setCancellable`(`io.reactivex.functions.Cancellable` v0 @kind object) @signature `Lio/reactivex/ObservableEmitter;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setDisposable`(`io.reactivex.disposables.Disposable` v0 @kind object) @signature `Lio/reactivex/ObservableEmitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `tryOnError`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/ObservableEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
