record `io.reactivex.Scheduler$DisposeTask` @kind class @AccessFlag FINAL extends `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `java.lang.Runnable` `io.reactivex.Scheduler$DisposeTask.decoratedRun` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.Scheduler$DisposeTask.runner` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.Scheduler$DisposeTask.w` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.Scheduler$DisposeTask` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object) @signature `Lio/reactivex/Scheduler$DisposeTask;.<init>:(Ljava/lang/Runnable;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e1660.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e1666.  v0.`io.reactivex.Scheduler$DisposeTask.decoratedRun` @type ^`java.lang.Runnable` := v1 @kind object;
  #L3e166a.  v0.`io.reactivex.Scheduler$DisposeTask.w` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L3e166e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.Scheduler$DisposeTask` v2 @kind this) @signature `Lio/reactivex/Scheduler$DisposeTask;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e1680.  v0:= v2.`io.reactivex.Scheduler$DisposeTask.runner` @type ^`java.lang.Thread` @kind object;
  #L3e1684.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3e168a.  v1:= temp @kind object;
  #L3e168c.  if v0 != v1 then goto L3e16a8;
  #L3e1690.  v0:= v2.`io.reactivex.Scheduler$DisposeTask.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3e1694.  v1:= instanceof @variable v0 @type ^`io.reactivex.internal.schedulers.NewThreadWorker` @kind boolean;
  #L3e1698.  if v1 == 0 then goto L3e16a8;
  #L3e169c.  v0:= (`io.reactivex.internal.schedulers.NewThreadWorker`) v0 @kind object;
  #L3e16a0.  call `shutdown`(v0) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.shutdown:()V` @kind virtual;
  #L3e16a6.  goto L3e16b2;
  #L3e16a8.  v0:= v2.`io.reactivex.Scheduler$DisposeTask.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3e16ac.  call `dispose`(v0) @signature `Lio/reactivex/Scheduler$Worker;.dispose:()V` @kind virtual;
  #L3e16b2.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.Scheduler$DisposeTask` v1 @kind this) @signature `Lio/reactivex/Scheduler$DisposeTask;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e1648.  v0:= v1.`io.reactivex.Scheduler$DisposeTask.decoratedRun` @type ^`java.lang.Runnable` @kind object;
  #L3e164c.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.Scheduler$DisposeTask` v1 @kind this) @signature `Lio/reactivex/Scheduler$DisposeTask;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e1628.  v0:= v1.`io.reactivex.Scheduler$DisposeTask.w` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3e162c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/Scheduler$Worker;.isDisposed:()Z` @kind virtual;
  #L3e1632.  v0:= temp;
  #L3e1634.  return v0;
}
procedure `void` `run`(`io.reactivex.Scheduler$DisposeTask` v2 @kind this) @signature `Lio/reactivex/Scheduler$DisposeTask;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e16c4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3e16ca.  v0:= temp @kind object;
  #L3e16cc.  v2.`io.reactivex.Scheduler$DisposeTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L3e16d0.  v0:= 0I;
  #L3e16d2.  v1:= v2.`io.reactivex.Scheduler$DisposeTask.decoratedRun` @type ^`java.lang.Runnable` @kind object;
  #L3e16d6.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L3e16dc.  call `dispose`(v2) @signature `Lio/reactivex/Scheduler$DisposeTask;.dispose:()V` @kind virtual;
  #L3e16e2.  v2.`io.reactivex.Scheduler$DisposeTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L3e16e6.  return @kind void;
  #L3e16e8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e16ea.  call `dispose`(v2) @signature `Lio/reactivex/Scheduler$DisposeTask;.dispose:()V` @kind virtual;
  #L3e16f0.  v2.`io.reactivex.Scheduler$DisposeTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L3e16f4.  throw v1;
  catch `java.lang.Throwable` @[L3e16d2..L3e16dc] goto L3e16e8;
}
