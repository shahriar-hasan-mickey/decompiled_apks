record `com.google.android.material.chip.ChipGroup` @kind class @AccessFlag PUBLIC extends `com.google.android.material.internal.FlowLayout` @kind class {
  `int` `com.google.android.material.chip.ChipGroup.checkedId` @AccessFlag PRIVATE;
  `com.google.android.material.chip.ChipGroup$CheckedStateTracker` `com.google.android.material.chip.ChipGroup.checkedStateTracker` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.android.material.chip.ChipGroup.chipSpacingHorizontal` @AccessFlag PRIVATE;
  `int` `com.google.android.material.chip.ChipGroup.chipSpacingVertical` @AccessFlag PRIVATE;
  `com.google.android.material.chip.ChipGroup$OnCheckedChangeListener` `com.google.android.material.chip.ChipGroup.onCheckedChangeListener` @AccessFlag PRIVATE;
  `com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener` `com.google.android.material.chip.ChipGroup.passThroughListener` @AccessFlag PRIVATE;
  `boolean` `com.google.android.material.chip.ChipGroup.protectFromCheckedChange` @AccessFlag PRIVATE;
  `boolean` `com.google.android.material.chip.ChipGroup.singleSelection` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `android.content.Context` v2 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.<init>:(Landroid/content/Context;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L32d920.  v0:= 0I;
  #L32d922.  call `<init>`(v1, v2, v0) @signature `Lcom/google/android/material/chip/ChipGroup;.<init>:(Landroid/content/Context;Landroid/util/AttributeSet;)V` @kind direct;
  #L32d928.  return @kind void;
}
procedure `void` `<init>`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `android.content.Context` v2 @kind object, `android.util.AttributeSet` v3 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.<init>:(Landroid/content/Context;Landroid/util/AttributeSet;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L32d93c.  v0:= `@@com.google.android.material.R$attr.chipGroupStyle` @type ^`int`;
  #L32d940.  call `<init>`(v1, v2, v3, v0) @signature `Lcom/google/android/material/chip/ChipGroup;.<init>:(Landroid/content/Context;Landroid/util/AttributeSet;I)V` @kind direct;
  #L32d946.  return @kind void;
}
procedure `void` `<init>`(`com.google.android.material.chip.ChipGroup` v8 @kind this, `android.content.Context` v9 @kind object, `android.util.AttributeSet` v10 @kind object, `int` v11 ) @signature `Lcom/google/android/material/chip/ChipGroup;.<init>:(Landroid/content/Context;Landroid/util/AttributeSet;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L32d958.  call `<init>`(v8, v9, v10, v11) @signature `Lcom/google/android/material/internal/FlowLayout;.<init>:(Landroid/content/Context;Landroid/util/AttributeSet;I)V` @kind direct;
  #L32d95e.  v0:= new `com.google.android.material.chip.ChipGroup$CheckedStateTracker`;
  #L32d962.  v1:= 0I;
  #L32d964.  call `<init>`(v0, v8, v1) @signature `Lcom/google/android/material/chip/ChipGroup$CheckedStateTracker;.<init>:(Lcom/google/android/material/chip/ChipGroup;Lcom/google/android/material/chip/ChipGroup$1;)V` @kind direct;
  #L32d96a.  v8.`com.google.android.material.chip.ChipGroup.checkedStateTracker` @type ^`com.google.android.material.chip.ChipGroup$CheckedStateTracker` := v0 @kind object;
  #L32d96e.  v0:= new `com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener`;
  #L32d972.  call `<init>`(v0, v8, v1) @signature `Lcom/google/android/material/chip/ChipGroup$PassThroughHierarchyChangeListener;.<init>:(Lcom/google/android/material/chip/ChipGroup;Lcom/google/android/material/chip/ChipGroup$1;)V` @kind direct;
  #L32d978.  v8.`com.google.android.material.chip.ChipGroup.passThroughListener` @type ^`com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener` := v0 @kind object;
  #L32d97c.  v0:= -1I;
  #L32d97e.  v8.`com.google.android.material.chip.ChipGroup.checkedId` @type ^`int` := v0;
  #L32d982.  v1:= 0I;
  #L32d984.  v8.`com.google.android.material.chip.ChipGroup.protectFromCheckedChange` @type ^`boolean` := v1 @kind boolean;
  #L32d988.  v4:= `@@com.google.android.material.R$styleable.ChipGroup` @type ^`int`[] @kind object;
  #L32d98c.  v6:= `@@com.google.android.material.R$style.Widget_MaterialComponents_ChipGroup` @type ^`int`;
  #L32d990.  v7:= new `int`[v1];
  #L32d994.  v2:= v9 @kind object;
  #L32d996.  v3:= v10 @kind object;
  #L32d998.  v5:= v11;
  #L32d99a.  call temp:= `obtainStyledAttributes`(v2, v3, v4, v5, v6, v7) @signature `Lcom/google/android/material/internal/ThemeEnforcement;.obtainStyledAttributes:(Landroid/content/Context;Landroid/util/AttributeSet;[III[I)Landroid/content/res/TypedArray;` @kind static;
  #L32d9a0.  v9:= temp @kind object;
  #L32d9a2.  v10:= `@@com.google.android.material.R$styleable.ChipGroup_chipSpacing` @type ^`int`;
  #L32d9a6.  call temp:= `getDimensionPixelOffset`(v9, v10, v1) @signature `Landroid/content/res/TypedArray;.getDimensionPixelOffset:(II)I` @kind virtual;
  #L32d9ac.  v10:= temp;
  #L32d9ae.  v11:= `@@com.google.android.material.R$styleable.ChipGroup_chipSpacingHorizontal` @type ^`int`;
  #L32d9b2.  call temp:= `getDimensionPixelOffset`(v9, v11, v10) @signature `Landroid/content/res/TypedArray;.getDimensionPixelOffset:(II)I` @kind virtual;
  #L32d9b8.  v11:= temp;
  #L32d9ba.  call `setChipSpacingHorizontal`(v8, v11) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacingHorizontal:(I)V` @kind virtual;
  #L32d9c0.  v11:= `@@com.google.android.material.R$styleable.ChipGroup_chipSpacingVertical` @type ^`int`;
  #L32d9c4.  call temp:= `getDimensionPixelOffset`(v9, v11, v10) @signature `Landroid/content/res/TypedArray;.getDimensionPixelOffset:(II)I` @kind virtual;
  #L32d9ca.  v10:= temp;
  #L32d9cc.  call `setChipSpacingVertical`(v8, v10) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacingVertical:(I)V` @kind virtual;
  #L32d9d2.  v10:= `@@com.google.android.material.R$styleable.ChipGroup_singleLine` @type ^`int`;
  #L32d9d6.  call temp:= `getBoolean`(v9, v10, v1) @signature `Landroid/content/res/TypedArray;.getBoolean:(IZ)Z` @kind virtual;
  #L32d9dc.  v10:= temp;
  #L32d9de.  call `setSingleLine`(v8, v10) @signature `Lcom/google/android/material/chip/ChipGroup;.setSingleLine:(Z)V` @kind virtual;
  #L32d9e4.  v10:= `@@com.google.android.material.R$styleable.ChipGroup_singleSelection` @type ^`int`;
  #L32d9e8.  call temp:= `getBoolean`(v9, v10, v1) @signature `Landroid/content/res/TypedArray;.getBoolean:(IZ)Z` @kind virtual;
  #L32d9ee.  v10:= temp;
  #L32d9f0.  call `setSingleSelection`(v8, v10) @signature `Lcom/google/android/material/chip/ChipGroup;.setSingleSelection:(Z)V` @kind virtual;
  #L32d9f6.  v10:= `@@com.google.android.material.R$styleable.ChipGroup_checkedChip` @type ^`int`;
  #L32d9fa.  call temp:= `getResourceId`(v9, v10, v0) @signature `Landroid/content/res/TypedArray;.getResourceId:(II)I` @kind virtual;
  #L32da00.  v10:= temp;
  #L32da02.  if v10 == v0 then goto L32da0a;
  #L32da06.  v8.`com.google.android.material.chip.ChipGroup.checkedId` @type ^`int` := v10;
  #L32da0a.  call `recycle`(v9) @signature `Landroid/content/res/TypedArray;.recycle:()V` @kind virtual;
  #L32da10.  v9:= v8.`com.google.android.material.chip.ChipGroup.passThroughListener` @type ^`com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener` @kind object;
  #L32da14.  call `setOnHierarchyChangeListener`(v8, v9) @signature `Lcom/google/android/material/internal/FlowLayout;.setOnHierarchyChangeListener:(Landroid/view/ViewGroup$OnHierarchyChangeListener;)V` @kind super;
  #L32da1a.  return @kind void;
}
procedure `boolean` `access$300`(`com.google.android.material.chip.ChipGroup` v0 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.access$300:(Lcom/google/android/material/chip/ChipGroup;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L32d828.  v0:= v0.`com.google.android.material.chip.ChipGroup.protectFromCheckedChange` @type ^`boolean` @kind boolean;
  #L32d82c.  return v0;
}
procedure `int` `access$400`(`com.google.android.material.chip.ChipGroup` v0 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.access$400:(Lcom/google/android/material/chip/ChipGroup;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L32d8b4.  v0:= v0.`com.google.android.material.chip.ChipGroup.checkedId` @type ^`int`;
  #L32d8b8.  return v0;
}
procedure `boolean` `access$500`(`com.google.android.material.chip.ChipGroup` v0 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.access$500:(Lcom/google/android/material/chip/ChipGroup;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L32d840.  v0:= v0.`com.google.android.material.chip.ChipGroup.singleSelection` @type ^`boolean` @kind boolean;
  #L32d844.  return v0;
}
procedure `void` `access$600`(`com.google.android.material.chip.ChipGroup` v0 @kind object, `int` v1 , `boolean` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.access$600:(Lcom/google/android/material/chip/ChipGroup;IZ)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L32da2c.  call `setCheckedStateForView`(v0, v1, v2) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedStateForView:(IZ)V` @kind direct;
  #L32da32.  return @kind void;
}
procedure `void` `access$700`(`com.google.android.material.chip.ChipGroup` v0 @kind object, `int` v1 ) @signature `Lcom/google/android/material/chip/ChipGroup;.access$700:(Lcom/google/android/material/chip/ChipGroup;I)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L32da44.  call `setCheckedId`(v0, v1) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedId:(I)V` @kind direct;
  #L32da4a.  return @kind void;
}
procedure `com.google.android.material.chip.ChipGroup$CheckedStateTracker` `access$800`(`com.google.android.material.chip.ChipGroup` v0 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.access$800:(Lcom/google/android/material/chip/ChipGroup;)Lcom/google/android/material/chip/ChipGroup$CheckedStateTracker;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L32d89c.  v0:= v0.`com.google.android.material.chip.ChipGroup.checkedStateTracker` @type ^`com.google.android.material.chip.ChipGroup$CheckedStateTracker` @kind object;
  #L32d8a0.  return v0 @kind object;
}
procedure `void` `setCheckedId`(`com.google.android.material.chip.ChipGroup` v2 @kind this, `int` v3 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedId:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L32db84.  v2.`com.google.android.material.chip.ChipGroup.checkedId` @type ^`int` := v3;
  #L32db88.  v0:= v2.`com.google.android.material.chip.ChipGroup.onCheckedChangeListener` @type ^`com.google.android.material.chip.ChipGroup$OnCheckedChangeListener` @kind object;
  #L32db8c.  if v0 == 0 then goto L32db9e;
  #L32db90.  v1:= v2.`com.google.android.material.chip.ChipGroup.singleSelection` @type ^`boolean` @kind boolean;
  #L32db94.  if v1 == 0 then goto L32db9e;
  #L32db98.  call `onCheckedChanged`(v0, v2, v3) @signature `Lcom/google/android/material/chip/ChipGroup$OnCheckedChangeListener;.onCheckedChanged:(Lcom/google/android/material/chip/ChipGroup;I)V` @kind interface;
  #L32db9e.  return @kind void;
}
procedure `void` `setCheckedStateForView`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `int` v2 , `boolean` v3 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedStateForView:(IZ)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L32dbb0.  call temp:= `findViewById`(v1, v2) @signature `Lcom/google/android/material/chip/ChipGroup;.findViewById:(I)Landroid/view/View;` @kind virtual;
  #L32dbb6.  v2:= temp @kind object;
  #L32dbb8.  v0:= instanceof @variable v2 @type ^`com.google.android.material.chip.Chip` @kind boolean;
  #L32dbbc.  if v0 == 0 then goto L32dbd6;
  #L32dbc0.  v0:= 1I;
  #L32dbc2.  v1.`com.google.android.material.chip.ChipGroup.protectFromCheckedChange` @type ^`boolean` := v0 @kind boolean;
  #L32dbc6.  v2:= (`com.google.android.material.chip.Chip`) v2 @kind object;
  #L32dbca.  call `setChecked`(v2, v3) @signature `Lcom/google/android/material/chip/Chip;.setChecked:(Z)V` @kind virtual;
  #L32dbd0.  v2:= 0I;
  #L32dbd2.  v1.`com.google.android.material.chip.ChipGroup.protectFromCheckedChange` @type ^`boolean` := v2 @kind boolean;
  #L32dbd6.  return @kind void;
}
procedure `void` `addView`(`com.google.android.material.chip.ChipGroup` v3 @kind this, `android.view.View` v4 @kind object, `int` v5 , `android.view.ViewGroup$LayoutParams` v6 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.addView:(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32da5c.  v0:= instanceof @variable v4 @type ^`com.google.android.material.chip.Chip` @kind boolean;
  #L32da60.  if v0 == 0 then goto L32da9e;
  #L32da64.  v0:= v4 @kind object;
  #L32da66.  v0:= (`com.google.android.material.chip.Chip`) v0 @kind object;
  #L32da6a.  call temp:= `isChecked`(v0) @signature `Lcom/google/android/material/chip/Chip;.isChecked:()Z` @kind virtual;
  #L32da70.  v1:= temp;
  #L32da72.  if v1 == 0 then goto L32da9e;
  #L32da76.  v1:= v3.`com.google.android.material.chip.ChipGroup.checkedId` @type ^`int`;
  #L32da7a.  v2:= -1I;
  #L32da7c.  if v1 == v2 then goto L32da90;
  #L32da80.  v2:= v3.`com.google.android.material.chip.ChipGroup.singleSelection` @type ^`boolean` @kind boolean;
  #L32da84.  if v2 == 0 then goto L32da90;
  #L32da88.  v2:= 0I;
  #L32da8a.  call `setCheckedStateForView`(v3, v1, v2) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedStateForView:(IZ)V` @kind direct;
  #L32da90.  call temp:= `getId`(v0) @signature `Lcom/google/android/material/chip/Chip;.getId:()I` @kind virtual;
  #L32da96.  v0:= temp;
  #L32da98.  call `setCheckedId`(v3, v0) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedId:(I)V` @kind direct;
  #L32da9e.  call `addView`(v3, v4, v5, v6) @signature `Lcom/google/android/material/internal/FlowLayout;.addView:(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)V` @kind super;
  #L32daa4.  return @kind void;
}
procedure `void` `check`(`com.google.android.material.chip.ChipGroup` v3 @kind this, `int` v4 ) @signature `Lcom/google/android/material/chip/ChipGroup;.check:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32dab8.  v0:= v3.`com.google.android.material.chip.ChipGroup.checkedId` @type ^`int`;
  #L32dabc.  if v4 != v0 then goto L32dac2;
  #L32dac0.  return @kind void;
  #L32dac2.  v1:= -1I;
  #L32dac4.  if v0 == v1 then goto L32dad8;
  #L32dac8.  v2:= v3.`com.google.android.material.chip.ChipGroup.singleSelection` @type ^`boolean` @kind boolean;
  #L32dacc.  if v2 == 0 then goto L32dad8;
  #L32dad0.  v2:= 0I;
  #L32dad2.  call `setCheckedStateForView`(v3, v0, v2) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedStateForView:(IZ)V` @kind direct;
  #L32dad8.  if v4 == v1 then goto L32dae4;
  #L32dadc.  v0:= 1I;
  #L32dade.  call `setCheckedStateForView`(v3, v4, v0) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedStateForView:(IZ)V` @kind direct;
  #L32dae4.  call `setCheckedId`(v3, v4) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedId:(I)V` @kind direct;
  #L32daea.  return @kind void;
}
procedure `boolean` `checkLayoutParams`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `android.view.ViewGroup$LayoutParams` v2 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.checkLayoutParams:(Landroid/view/ViewGroup$LayoutParams;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L32d858.  call temp:= `checkLayoutParams`(v1, v2) @signature `Lcom/google/android/material/internal/FlowLayout;.checkLayoutParams:(Landroid/view/ViewGroup$LayoutParams;)Z` @kind super;
  #L32d85e.  v0:= temp;
  #L32d860.  if v0 == 0 then goto L32d870;
  #L32d864.  v2:= instanceof @variable v2 @type ^`com.google.android.material.chip.ChipGroup$LayoutParams` @kind boolean;
  #L32d868.  if v2 == 0 then goto L32d870;
  #L32d86c.  v2:= 1I;
  #L32d86e.  goto L32d872;
  #L32d870.  v2:= 0I;
  #L32d872.  return v2;
}
procedure `void` `clearCheck`(`com.google.android.material.chip.ChipGroup` v4 @kind this) @signature `Lcom/google/android/material/chip/ChipGroup;.clearCheck:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32dafc.  v0:= 1I;
  #L32dafe.  v4.`com.google.android.material.chip.ChipGroup.protectFromCheckedChange` @type ^`boolean` := v0 @kind boolean;
  #L32db02.  v0:= 0I;
  #L32db04.  v1:= 0I;
  #L32db06.  call temp:= `getChildCount`(v4) @signature `Lcom/google/android/material/chip/ChipGroup;.getChildCount:()I` @kind virtual;
  #L32db0c.  v2:= temp;
  #L32db0e.  if v1 >= v2 then goto L32db32;
  #L32db12.  call temp:= `getChildAt`(v4, v1) @signature `Lcom/google/android/material/chip/ChipGroup;.getChildAt:(I)Landroid/view/View;` @kind virtual;
  #L32db18.  v2:= temp @kind object;
  #L32db1a.  v3:= instanceof @variable v2 @type ^`com.google.android.material.chip.Chip` @kind boolean;
  #L32db1e.  if v3 == 0 then goto L32db2c;
  #L32db22.  v2:= (`com.google.android.material.chip.Chip`) v2 @kind object;
  #L32db26.  call `setChecked`(v2, v0) @signature `Lcom/google/android/material/chip/Chip;.setChecked:(Z)V` @kind virtual;
  #L32db2c.  v1:= v1 + 1;
  #L32db30.  goto L32db06;
  #L32db32.  v4.`com.google.android.material.chip.ChipGroup.protectFromCheckedChange` @type ^`boolean` := v0 @kind boolean;
  #L32db36.  v0:= -1I;
  #L32db38.  call `setCheckedId`(v4, v0) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedId:(I)V` @kind direct;
  #L32db3e.  return @kind void;
}
procedure `android.view.ViewGroup$LayoutParams` `generateDefaultLayoutParams`(`com.google.android.material.chip.ChipGroup` v2 @kind this) @signature `Lcom/google/android/material/chip/ChipGroup;.generateDefaultLayoutParams:()Landroid/view/ViewGroup$LayoutParams;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L32d7c8.  v0:= new `com.google.android.material.chip.ChipGroup$LayoutParams`;
  #L32d7cc.  v1:= -2I;
  #L32d7ce.  call `<init>`(v0, v1, v1) @signature `Lcom/google/android/material/chip/ChipGroup$LayoutParams;.<init>:(II)V` @kind direct;
  #L32d7d4.  return v0 @kind object;
}
procedure `android.view.ViewGroup$LayoutParams` `generateLayoutParams`(`com.google.android.material.chip.ChipGroup` v2 @kind this, `android.util.AttributeSet` v3 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.generateLayoutParams:(Landroid/util/AttributeSet;)Landroid/view/ViewGroup$LayoutParams;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32d7e8.  v0:= new `com.google.android.material.chip.ChipGroup$LayoutParams`;
  #L32d7ec.  call temp:= `getContext`(v2) @signature `Lcom/google/android/material/chip/ChipGroup;.getContext:()Landroid/content/Context;` @kind virtual;
  #L32d7f2.  v1:= temp @kind object;
  #L32d7f4.  call `<init>`(v0, v1, v3) @signature `Lcom/google/android/material/chip/ChipGroup$LayoutParams;.<init>:(Landroid/content/Context;Landroid/util/AttributeSet;)V` @kind direct;
  #L32d7fa.  return v0 @kind object;
}
procedure `android.view.ViewGroup$LayoutParams` `generateLayoutParams`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `android.view.ViewGroup$LayoutParams` v2 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.generateLayoutParams:(Landroid/view/ViewGroup$LayoutParams;)Landroid/view/ViewGroup$LayoutParams;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L32d80c.  v0:= new `com.google.android.material.chip.ChipGroup$LayoutParams`;
  #L32d810.  call `<init>`(v0, v2) @signature `Lcom/google/android/material/chip/ChipGroup$LayoutParams;.<init>:(Landroid/view/ViewGroup$LayoutParams;)V` @kind direct;
  #L32d816.  return v0 @kind object;
}
procedure `int` `getCheckedChipId`(`com.google.android.material.chip.ChipGroup` v1 @kind this) @signature `Lcom/google/android/material/chip/ChipGroup;.getCheckedChipId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32d8cc.  v0:= v1.`com.google.android.material.chip.ChipGroup.singleSelection` @type ^`boolean` @kind boolean;
  #L32d8d0.  if v0 == 0 then goto L32d8da;
  #L32d8d4.  v0:= v1.`com.google.android.material.chip.ChipGroup.checkedId` @type ^`int`;
  #L32d8d8.  goto L32d8dc;
  #L32d8da.  v0:= -1I;
  #L32d8dc.  return v0;
}
procedure `int` `getChipSpacingHorizontal`(`com.google.android.material.chip.ChipGroup` v1 @kind this) @signature `Lcom/google/android/material/chip/ChipGroup;.getChipSpacingHorizontal:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32d8f0.  v0:= v1.`com.google.android.material.chip.ChipGroup.chipSpacingHorizontal` @type ^`int`;
  #L32d8f4.  return v0;
}
procedure `int` `getChipSpacingVertical`(`com.google.android.material.chip.ChipGroup` v1 @kind this) @signature `Lcom/google/android/material/chip/ChipGroup;.getChipSpacingVertical:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32d908.  v0:= v1.`com.google.android.material.chip.ChipGroup.chipSpacingVertical` @type ^`int`;
  #L32d90c.  return v0;
}
procedure `boolean` `isSingleSelection`(`com.google.android.material.chip.ChipGroup` v1 @kind this) @signature `Lcom/google/android/material/chip/ChipGroup;.isSingleSelection:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32d884.  v0:= v1.`com.google.android.material.chip.ChipGroup.singleSelection` @type ^`boolean` @kind boolean;
  #L32d888.  return v0;
}
procedure `void` `onFinishInflate`(`com.google.android.material.chip.ChipGroup` v2 @kind this) @signature `Lcom/google/android/material/chip/ChipGroup;.onFinishInflate:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L32db50.  call `onFinishInflate`(v2) @signature `Lcom/google/android/material/internal/FlowLayout;.onFinishInflate:()V` @kind super;
  #L32db56.  v0:= v2.`com.google.android.material.chip.ChipGroup.checkedId` @type ^`int`;
  #L32db5a.  v1:= -1I;
  #L32db5c.  if v0 == v1 then goto L32db72;
  #L32db60.  v1:= 1I;
  #L32db62.  call `setCheckedStateForView`(v2, v0, v1) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedStateForView:(IZ)V` @kind direct;
  #L32db68.  v0:= v2.`com.google.android.material.chip.ChipGroup.checkedId` @type ^`int`;
  #L32db6c.  call `setCheckedId`(v2, v0) @signature `Lcom/google/android/material/chip/ChipGroup;.setCheckedId:(I)V` @kind direct;
  #L32db72.  return @kind void;
}
procedure `void` `setChipSpacing`(`com.google.android.material.chip.ChipGroup` v0 @kind this, `int` v1 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacing:(I)V` @AccessFlag PUBLIC {
    temp;

  #L32dbe8.  call `setChipSpacingHorizontal`(v0, v1) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacingHorizontal:(I)V` @kind virtual;
  #L32dbee.  call `setChipSpacingVertical`(v0, v1) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacingVertical:(I)V` @kind virtual;
  #L32dbf4.  return @kind void;
}
procedure `void` `setChipSpacingHorizontal`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `int` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacingHorizontal:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32dc08.  v0:= v1.`com.google.android.material.chip.ChipGroup.chipSpacingHorizontal` @type ^`int`;
  #L32dc0c.  if v0 == v2 then goto L32dc20;
  #L32dc10.  v1.`com.google.android.material.chip.ChipGroup.chipSpacingHorizontal` @type ^`int` := v2;
  #L32dc14.  call `setItemSpacing`(v1, v2) @signature `Lcom/google/android/material/chip/ChipGroup;.setItemSpacing:(I)V` @kind virtual;
  #L32dc1a.  call `requestLayout`(v1) @signature `Lcom/google/android/material/chip/ChipGroup;.requestLayout:()V` @kind virtual;
  #L32dc20.  return @kind void;
}
procedure `void` `setChipSpacingHorizontalResource`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `int` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacingHorizontalResource:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32dc34.  call temp:= `getResources`(v1) @signature `Lcom/google/android/material/chip/ChipGroup;.getResources:()Landroid/content/res/Resources;` @kind virtual;
  #L32dc3a.  v0:= temp @kind object;
  #L32dc3c.  call temp:= `getDimensionPixelOffset`(v0, v2) @signature `Landroid/content/res/Resources;.getDimensionPixelOffset:(I)I` @kind virtual;
  #L32dc42.  v2:= temp;
  #L32dc44.  call `setChipSpacingHorizontal`(v1, v2) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacingHorizontal:(I)V` @kind virtual;
  #L32dc4a.  return @kind void;
}
procedure `void` `setChipSpacingResource`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `int` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacingResource:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32dc5c.  call temp:= `getResources`(v1) @signature `Lcom/google/android/material/chip/ChipGroup;.getResources:()Landroid/content/res/Resources;` @kind virtual;
  #L32dc62.  v0:= temp @kind object;
  #L32dc64.  call temp:= `getDimensionPixelOffset`(v0, v2) @signature `Landroid/content/res/Resources;.getDimensionPixelOffset:(I)I` @kind virtual;
  #L32dc6a.  v2:= temp;
  #L32dc6c.  call `setChipSpacing`(v1, v2) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacing:(I)V` @kind virtual;
  #L32dc72.  return @kind void;
}
procedure `void` `setChipSpacingVertical`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `int` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacingVertical:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32dc84.  v0:= v1.`com.google.android.material.chip.ChipGroup.chipSpacingVertical` @type ^`int`;
  #L32dc88.  if v0 == v2 then goto L32dc9c;
  #L32dc8c.  v1.`com.google.android.material.chip.ChipGroup.chipSpacingVertical` @type ^`int` := v2;
  #L32dc90.  call `setLineSpacing`(v1, v2) @signature `Lcom/google/android/material/chip/ChipGroup;.setLineSpacing:(I)V` @kind virtual;
  #L32dc96.  call `requestLayout`(v1) @signature `Lcom/google/android/material/chip/ChipGroup;.requestLayout:()V` @kind virtual;
  #L32dc9c.  return @kind void;
}
procedure `void` `setChipSpacingVerticalResource`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `int` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacingVerticalResource:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32dcb0.  call temp:= `getResources`(v1) @signature `Lcom/google/android/material/chip/ChipGroup;.getResources:()Landroid/content/res/Resources;` @kind virtual;
  #L32dcb6.  v0:= temp @kind object;
  #L32dcb8.  call temp:= `getDimensionPixelOffset`(v0, v2) @signature `Landroid/content/res/Resources;.getDimensionPixelOffset:(I)I` @kind virtual;
  #L32dcbe.  v2:= temp;
  #L32dcc0.  call `setChipSpacingVertical`(v1, v2) @signature `Lcom/google/android/material/chip/ChipGroup;.setChipSpacingVertical:(I)V` @kind virtual;
  #L32dcc6.  return @kind void;
}
procedure `void` `setDividerDrawableHorizontal`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `android.graphics.drawable.Drawable` v2 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.setDividerDrawableHorizontal:(Landroid/graphics/drawable/Drawable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32dcd8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L32dcdc.  v0:= "Changing divider drawables have no effect. ChipGroup do not use divider drawables as spacing." @kind object;
  #L32dce0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32dce6.  throw v2;
}
procedure `void` `setDividerDrawableVertical`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `android.graphics.drawable.Drawable` v2 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.setDividerDrawableVertical:(Landroid/graphics/drawable/Drawable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32dcf8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L32dcfc.  v0:= "Changing divider drawables have no effect. ChipGroup do not use divider drawables as spacing." @kind object;
  #L32dd00.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32dd06.  throw v2;
}
procedure `void` `setFlexWrap`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `int` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setFlexWrap:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32dd18.  v2:= new `java.lang.UnsupportedOperationException`;
  #L32dd1c.  v0:= "Changing flex wrap not allowed. ChipGroup exposes a singleLine attribute instead." @kind object;
  #L32dd20.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32dd26.  throw v2;
}
procedure `void` `setOnCheckedChangeListener`(`com.google.android.material.chip.ChipGroup` v0 @kind this, `com.google.android.material.chip.ChipGroup$OnCheckedChangeListener` v1 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.setOnCheckedChangeListener:(Lcom/google/android/material/chip/ChipGroup$OnCheckedChangeListener;)V` @AccessFlag PUBLIC {
    temp;

  #L32dd38.  v0.`com.google.android.material.chip.ChipGroup.onCheckedChangeListener` @type ^`com.google.android.material.chip.ChipGroup$OnCheckedChangeListener` := v1 @kind object;
  #L32dd3c.  return @kind void;
}
procedure `void` `setOnHierarchyChangeListener`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `android.view.ViewGroup$OnHierarchyChangeListener` v2 @kind object) @signature `Lcom/google/android/material/chip/ChipGroup;.setOnHierarchyChangeListener:(Landroid/view/ViewGroup$OnHierarchyChangeListener;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32dd50.  v0:= v1.`com.google.android.material.chip.ChipGroup.passThroughListener` @type ^`com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener` @kind object;
  #L32dd54.  call temp:= `access$202`(v0, v2) @signature `Lcom/google/android/material/chip/ChipGroup$PassThroughHierarchyChangeListener;.access$202:(Lcom/google/android/material/chip/ChipGroup$PassThroughHierarchyChangeListener;Landroid/view/ViewGroup$OnHierarchyChangeListener;)Landroid/view/ViewGroup$OnHierarchyChangeListener;` @kind static;
  #L32dd5a.  return @kind void;
}
procedure `void` `setShowDividerHorizontal`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `int` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setShowDividerHorizontal:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32dd6c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L32dd70.  v0:= "Changing divider modes has no effect. ChipGroup do not use divider drawables as spacing." @kind object;
  #L32dd74.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32dd7a.  throw v2;
}
procedure `void` `setShowDividerVertical`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `int` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setShowDividerVertical:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32dd8c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L32dd90.  v0:= "Changing divider modes has no effect. ChipGroup do not use divider drawables as spacing." @kind object;
  #L32dd94.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32dd9a.  throw v2;
}
procedure `void` `setSingleLine`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `int` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setSingleLine:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ddac.  call temp:= `getResources`(v1) @signature `Lcom/google/android/material/chip/ChipGroup;.getResources:()Landroid/content/res/Resources;` @kind virtual;
  #L32ddb2.  v0:= temp @kind object;
  #L32ddb4.  call temp:= `getBoolean`(v0, v2) @signature `Landroid/content/res/Resources;.getBoolean:(I)Z` @kind virtual;
  #L32ddba.  v2:= temp;
  #L32ddbc.  call `setSingleLine`(v1, v2) @signature `Lcom/google/android/material/chip/ChipGroup;.setSingleLine:(Z)V` @kind virtual;
  #L32ddc2.  return @kind void;
}
procedure `void` `setSingleSelection`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `int` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setSingleSelection:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ddf8.  call temp:= `getResources`(v1) @signature `Lcom/google/android/material/chip/ChipGroup;.getResources:()Landroid/content/res/Resources;` @kind virtual;
  #L32ddfe.  v0:= temp @kind object;
  #L32de00.  call temp:= `getBoolean`(v0, v2) @signature `Landroid/content/res/Resources;.getBoolean:(I)Z` @kind virtual;
  #L32de06.  v2:= temp;
  #L32de08.  call `setSingleSelection`(v1, v2) @signature `Lcom/google/android/material/chip/ChipGroup;.setSingleSelection:(Z)V` @kind virtual;
  #L32de0e.  return @kind void;
}
procedure `void` `setSingleSelection`(`com.google.android.material.chip.ChipGroup` v1 @kind this, `boolean` v2 ) @signature `Lcom/google/android/material/chip/ChipGroup;.setSingleSelection:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ddd4.  v0:= v1.`com.google.android.material.chip.ChipGroup.singleSelection` @type ^`boolean` @kind boolean;
  #L32ddd8.  if v0 == v2 then goto L32dde6;
  #L32dddc.  v1.`com.google.android.material.chip.ChipGroup.singleSelection` @type ^`boolean` := v2 @kind boolean;
  #L32dde0.  call `clearCheck`(v1) @signature `Lcom/google/android/material/chip/ChipGroup;.clearCheck:()V` @kind virtual;
  #L32dde6.  return @kind void;
}
