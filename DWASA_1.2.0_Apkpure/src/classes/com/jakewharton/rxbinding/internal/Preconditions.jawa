record `com.jakewharton.rxbinding.internal.Preconditions` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.jakewharton.rxbinding.internal.Preconditions` v2 @kind this) @signature `Lcom/jakewharton/rxbinding/internal/Preconditions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L357afc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L357b02.  v0:= new `java.lang.AssertionError`;
  #L357b06.  v1:= "No instances." @kind object;
  #L357b0a.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L357b10.  throw v0;
}
procedure `void` `checkArgument`(`boolean` v0 , `java.lang.String` v1 @kind object) @signature `Lcom/jakewharton/rxbinding/internal/Preconditions;.checkArgument:(ZLjava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L357b24.  if v0 == 0 then goto L357b2a;
  #L357b28.  return @kind void;
  #L357b2a.  v0:= new `java.lang.IllegalArgumentException`;
  #L357b2e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L357b34.  throw v0;
}
procedure `void` `checkUiThread`() @signature `Lcom/jakewharton/rxbinding/internal/Preconditions;.checkUiThread:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L357b48.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L357b4e.  v0:= temp @kind object;
  #L357b50.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L357b56.  v1:= temp @kind object;
  #L357b58.  if v0 != v1 then goto L357b5e;
  #L357b5c.  return @kind void;
  #L357b5e.  v0:= new `java.lang.IllegalStateException`;
  #L357b62.  v1:= new `java.lang.StringBuilder`;
  #L357b66.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L357b6c.  v2:= "Must be called from the main thread. Was: " @kind object;
  #L357b70.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L357b76.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L357b7c.  v2:= temp @kind object;
  #L357b7e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L357b84.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L357b8a.  v1:= temp @kind object;
  #L357b8c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L357b92.  throw v0;
}
