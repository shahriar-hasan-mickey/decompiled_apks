record `com.jakewharton.rxrelay2.PublishRelay` @kind class @AccessFlag PUBLIC_FINAL extends `com.jakewharton.rxrelay2.Relay` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `com.jakewharton.rxrelay2.PublishRelay.subscribers` @AccessFlag PRIVATE_FINAL;
}
global `com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[] `@@com.jakewharton.rxrelay2.PublishRelay.EMPTY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L35e078.  v0:= 0I;
  #L35e07a.  v0:= new `com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[v0];
  #L35e07e.  `@@com.jakewharton.rxrelay2.PublishRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[] := v0 @kind object;
  #L35e082.  return @kind void;
}
procedure `void` `<init>`(`com.jakewharton.rxrelay2.PublishRelay` v2 @kind this) @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L35e094.  call `<init>`(v2) @signature `Lcom/jakewharton/rxrelay2/Relay;.<init>:()V` @kind direct;
  #L35e09a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L35e09e.  v1:= `@@com.jakewharton.rxrelay2.PublishRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[] @kind object;
  #L35e0a2.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L35e0a8.  v2.`com.jakewharton.rxrelay2.PublishRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L35e0ac.  return @kind void;
}
procedure `void` `add`(`com.jakewharton.rxrelay2.PublishRelay` v4 @kind this, `com.jakewharton.rxrelay2.PublishRelay$PublishDisposable` v5 @kind object) @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.add:(Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35e114.  v0:= v4.`com.jakewharton.rxrelay2.PublishRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35e118.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e11e.  v0:= temp @kind object;
  #L35e120.  v0:= (`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[]) v0 @kind object;
  #L35e124.  v1:= length @variable v0;
  #L35e126.  v2:= v1 + 1;
  #L35e12a.  v2:= new `com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[v2];
  #L35e12e.  v3:= 0I;
  #L35e130.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L35e136.  v2[v1]:= v5 @kind object;
  #L35e13a.  v1:= v4.`com.jakewharton.rxrelay2.PublishRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35e13e.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35e144.  v0:= temp;
  #L35e146.  if v0 == 0 then goto L35e114;
  #L35e14a.  return @kind void;
}
procedure `com.jakewharton.rxrelay2.PublishRelay` `create`() @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.create:()Lcom/jakewharton/rxrelay2/PublishRelay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L35e05c.  v0:= new `com.jakewharton.rxrelay2.PublishRelay`;
  #L35e060.  call `<init>`(v0) @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.<init>:()V` @kind direct;
  #L35e066.  return v0 @kind object;
}
procedure `void` `accept`(`com.jakewharton.rxrelay2.PublishRelay` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35e0c0.  if v5 == 0 then goto L35e0ee;
  #L35e0c4.  v0:= v4.`com.jakewharton.rxrelay2.PublishRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35e0c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e0ce.  v0:= temp @kind object;
  #L35e0d0.  v0:= (`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[]) v0 @kind object;
  #L35e0d4.  v1:= length @variable v0;
  #L35e0d6.  v2:= 0I;
  #L35e0d8.  if v2 >= v1 then goto L35e0ec;
  #L35e0dc.  v3:= v0[v2] @kind object;
  #L35e0e0.  call `onNext`(v3, v5) @signature `Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L35e0e6.  v2:= v2 + 1;
  #L35e0ea.  goto L35e0d8;
  #L35e0ec.  return @kind void;
  #L35e0ee.  v5:= new `java.lang.NullPointerException`;
  #L35e0f2.  v0:= "value == null" @kind object;
  #L35e0f6.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35e0fc.  goto L35e100;
  #L35e0fe.  throw v5;
  #L35e100.  goto L35e0fe;
}
procedure `boolean` `hasObservers`(`com.jakewharton.rxrelay2.PublishRelay` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35e02c.  v0:= v1.`com.jakewharton.rxrelay2.PublishRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35e030.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e036.  v0:= temp @kind object;
  #L35e038.  v0:= (`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[]) v0 @kind object;
  #L35e03c.  v0:= length @variable v0;
  #L35e03e.  if v0 == 0 then goto L35e046;
  #L35e042.  v0:= 1I;
  #L35e044.  goto L35e048;
  #L35e046.  v0:= 0I;
  #L35e048.  return v0;
}
procedure `void` `remove`(`com.jakewharton.rxrelay2.PublishRelay` v6 @kind this, `com.jakewharton.rxrelay2.PublishRelay$PublishDisposable` v7 @kind object) @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.remove:(Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L35e15c.  v0:= v6.`com.jakewharton.rxrelay2.PublishRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35e160.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e166.  v0:= temp @kind object;
  #L35e168.  v0:= (`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[]) v0 @kind object;
  #L35e16c.  v1:= `@@com.jakewharton.rxrelay2.PublishRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[] @kind object;
  #L35e170.  if v0 != v1 then goto L35e176;
  #L35e174.  return @kind void;
  #L35e176.  v1:= length @variable v0;
  #L35e178.  v2:= -1I;
  #L35e17a.  v3:= 0I;
  #L35e17c.  v4:= 0I;
  #L35e17e.  if v4 >= v1 then goto L35e194;
  #L35e182.  v5:= v0[v4] @kind object;
  #L35e186.  if v5 != v7 then goto L35e18e;
  #L35e18a.  v2:= v4;
  #L35e18c.  goto L35e194;
  #L35e18e.  v4:= v4 + 1;
  #L35e192.  goto L35e17e;
  #L35e194.  if v2 >= 0 then goto L35e19a;
  #L35e198.  return @kind void;
  #L35e19a.  v4:= 1I;
  #L35e19c.  if v1 != v4 then goto L35e1a6;
  #L35e1a0.  v1:= `@@com.jakewharton.rxrelay2.PublishRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[] @kind object;
  #L35e1a4.  goto L35e1c4;
  #L35e1a6.  v5:= v1 + -1;
  #L35e1aa.  v5:= new `com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`[v5];
  #L35e1ae.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L35e1b4.  v3:= v2 + 1;
  #L35e1b8.  v1:= v1 - v2 @kind int;
  #L35e1ba.  v1:= v1 - v4 @kind int;
  #L35e1bc.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L35e1c2.  v1:= v5 @kind object;
  #L35e1c4.  v2:= v6.`com.jakewharton.rxrelay2.PublishRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35e1c8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35e1ce.  v0:= temp;
  #L35e1d0.  if v0 == 0 then goto L35e15c;
  #L35e1d4.  return @kind void;
}
procedure `void` `subscribeActual`(`com.jakewharton.rxrelay2.PublishRelay` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35e1e8.  v0:= new `com.jakewharton.rxrelay2.PublishRelay$PublishDisposable`;
  #L35e1ec.  call `<init>`(v0, v2, v1) @signature `Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;.<init>:(Lio/reactivex/Observer;Lcom/jakewharton/rxrelay2/PublishRelay;)V` @kind direct;
  #L35e1f2.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L35e1f8.  call `add`(v1, v0) @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.add:(Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;)V` @kind direct;
  #L35e1fe.  call temp:= `isDisposed`(v0) @signature `Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;.isDisposed:()Z` @kind virtual;
  #L35e204.  v2:= temp;
  #L35e206.  if v2 == 0 then goto L35e210;
  #L35e20a.  call `remove`(v1, v0) @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.remove:(Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;)V` @kind virtual;
  #L35e210.  return @kind void;
}
