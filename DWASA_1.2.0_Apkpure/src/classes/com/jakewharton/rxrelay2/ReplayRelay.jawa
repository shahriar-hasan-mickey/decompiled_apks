record `com.jakewharton.rxrelay2.ReplayRelay` @kind class @AccessFlag PUBLIC_FINAL extends `com.jakewharton.rxrelay2.Relay` @kind class {
  `com.jakewharton.rxrelay2.ReplayRelay$ReplayBuffer` `com.jakewharton.rxrelay2.ReplayRelay.buffer` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `com.jakewharton.rxrelay2.ReplayRelay.observers` @AccessFlag FINAL;
}
global `com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[] `@@com.jakewharton.rxrelay2.ReplayRelay.EMPTY` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@com.jakewharton.rxrelay2.ReplayRelay.EMPTY_ARRAY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L35ecec.  v0:= 0I;
  #L35ecee.  v1:= new `com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[v0];
  #L35ecf2.  `@@com.jakewharton.rxrelay2.ReplayRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[] := v1 @kind object;
  #L35ecf6.  v0:= new `java.lang.Object`[v0];
  #L35ecfa.  `@@com.jakewharton.rxrelay2.ReplayRelay.EMPTY_ARRAY` @type ^`java.lang.Object`[] := v0 @kind object;
  #L35ecfe.  return @kind void;
}
procedure `void` `<init>`(`com.jakewharton.rxrelay2.ReplayRelay` v1 @kind this, `com.jakewharton.rxrelay2.ReplayRelay$ReplayBuffer` v2 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.<init>:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L35ed10.  call `<init>`(v1) @signature `Lcom/jakewharton/rxrelay2/Relay;.<init>:()V` @kind direct;
  #L35ed16.  v1.`com.jakewharton.rxrelay2.ReplayRelay.buffer` @type ^`com.jakewharton.rxrelay2.ReplayRelay$ReplayBuffer` := v2 @kind object;
  #L35ed1a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L35ed1e.  v0:= `@@com.jakewharton.rxrelay2.ReplayRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[] @kind object;
  #L35ed22.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L35ed28.  v1.`com.jakewharton.rxrelay2.ReplayRelay.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L35ed2c.  return @kind void;
}
procedure `com.jakewharton.rxrelay2.ReplayRelay` `create`() @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.create:()Lcom/jakewharton/rxrelay2/ReplayRelay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L35eb2c.  v0:= new `com.jakewharton.rxrelay2.ReplayRelay`;
  #L35eb30.  v1:= new `com.jakewharton.rxrelay2.ReplayRelay$UnboundedReplayBuffer`;
  #L35eb34.  v2:= 16I;
  #L35eb38.  call `<init>`(v1, v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$UnboundedReplayBuffer;.<init>:(I)V` @kind direct;
  #L35eb3e.  call `<init>`(v0, v1) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.<init>:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;)V` @kind direct;
  #L35eb44.  return v0 @kind object;
}
procedure `com.jakewharton.rxrelay2.ReplayRelay` `create`(`int` v2 ) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.create:(I)Lcom/jakewharton/rxrelay2/ReplayRelay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L35eb58.  v0:= new `com.jakewharton.rxrelay2.ReplayRelay`;
  #L35eb5c.  v1:= new `com.jakewharton.rxrelay2.ReplayRelay$UnboundedReplayBuffer`;
  #L35eb60.  call `<init>`(v1, v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$UnboundedReplayBuffer;.<init>:(I)V` @kind direct;
  #L35eb66.  call `<init>`(v0, v1) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.<init>:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;)V` @kind direct;
  #L35eb6c.  return v0 @kind object;
}
procedure `com.jakewharton.rxrelay2.ReplayRelay` `createUnbounded`() @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.createUnbounded:()Lcom/jakewharton/rxrelay2/ReplayRelay;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L35eb80.  v0:= new `com.jakewharton.rxrelay2.ReplayRelay`;
  #L35eb84.  v1:= new `com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer`;
  #L35eb88.  v2:= 2147483647I;
  #L35eb8e.  call `<init>`(v1, v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeBoundReplayBuffer;.<init>:(I)V` @kind direct;
  #L35eb94.  call `<init>`(v0, v1) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.<init>:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;)V` @kind direct;
  #L35eb9a.  return v0 @kind object;
}
procedure `com.jakewharton.rxrelay2.ReplayRelay` `createWithSize`(`int` v2 ) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.createWithSize:(I)Lcom/jakewharton/rxrelay2/ReplayRelay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L35ebac.  v0:= new `com.jakewharton.rxrelay2.ReplayRelay`;
  #L35ebb0.  v1:= new `com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer`;
  #L35ebb4.  call `<init>`(v1, v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeBoundReplayBuffer;.<init>:(I)V` @kind direct;
  #L35ebba.  call `<init>`(v0, v1) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.<init>:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;)V` @kind direct;
  #L35ebc0.  return v0 @kind object;
}
procedure `com.jakewharton.rxrelay2.ReplayRelay` `createWithTime`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.createWithTime:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lcom/jakewharton/rxrelay2/ReplayRelay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L35ebd4.  v0:= new `com.jakewharton.rxrelay2.ReplayRelay`;
  #L35ebd8.  v7:= new `com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer`;
  #L35ebdc.  v2:= 2147483647I;
  #L35ebe2.  v1:= v7 @kind object;
  #L35ebe4.  v3:= v8 @kind wide;
  #L35ebe6.  v5:= v10 @kind object;
  #L35ebe8.  v6:= v11 @kind object;
  #L35ebea.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L35ebf0.  call `<init>`(v0, v7) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.<init>:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;)V` @kind direct;
  #L35ebf6.  return v0 @kind object;
}
procedure `com.jakewharton.rxrelay2.ReplayRelay` `createWithTimeAndSize`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lcom/jakewharton/rxrelay2/ReplayRelay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L35ec08.  v0:= new `com.jakewharton.rxrelay2.ReplayRelay`;
  #L35ec0c.  v7:= new `com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer`;
  #L35ec10.  v1:= v7 @kind object;
  #L35ec12.  v2:= v12;
  #L35ec14.  v3:= v8 @kind wide;
  #L35ec16.  v5:= v10 @kind object;
  #L35ec18.  v6:= v11 @kind object;
  #L35ec1a.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L35ec20.  call `<init>`(v0, v7) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.<init>:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;)V` @kind direct;
  #L35ec26.  return v0 @kind object;
}
procedure `void` `accept`(`com.jakewharton.rxrelay2.ReplayRelay` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35ed40.  if v5 == 0 then goto L35ed78;
  #L35ed44.  v0:= v4.`com.jakewharton.rxrelay2.ReplayRelay.buffer` @type ^`com.jakewharton.rxrelay2.ReplayRelay$ReplayBuffer` @kind object;
  #L35ed48.  call `add`(v0, v5) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;.add:(Ljava/lang/Object;)V` @kind interface;
  #L35ed4e.  v5:= v4.`com.jakewharton.rxrelay2.ReplayRelay.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35ed52.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35ed58.  v5:= temp @kind object;
  #L35ed5a.  v5:= (`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[]) v5 @kind object;
  #L35ed5e.  v1:= length @variable v5;
  #L35ed60.  v2:= 0I;
  #L35ed62.  if v2 >= v1 then goto L35ed76;
  #L35ed66.  v3:= v5[v2] @kind object;
  #L35ed6a.  call `replay`(v0, v3) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;.replay:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;)V` @kind interface;
  #L35ed70.  v2:= v2 + 1;
  #L35ed74.  goto L35ed62;
  #L35ed76.  return @kind void;
  #L35ed78.  v5:= new `java.lang.NullPointerException`;
  #L35ed7c.  v0:= "value == null" @kind object;
  #L35ed80.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35ed86.  goto L35ed8a;
  #L35ed88.  throw v5;
  #L35ed8a.  goto L35ed88;
}
procedure `boolean` `add`(`com.jakewharton.rxrelay2.ReplayRelay` v4 @kind this, `com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable` v5 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.add:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35ea88.  v0:= v4.`com.jakewharton.rxrelay2.ReplayRelay.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35ea8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35ea92.  v0:= temp @kind object;
  #L35ea94.  v0:= (`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[]) v0 @kind object;
  #L35ea98.  v1:= length @variable v0;
  #L35ea9a.  v2:= v1 + 1;
  #L35ea9e.  v2:= new `com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[v2];
  #L35eaa2.  v3:= 0I;
  #L35eaa4.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L35eaaa.  v2[v1]:= v5 @kind object;
  #L35eaae.  v1:= v4.`com.jakewharton.rxrelay2.ReplayRelay.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35eab2.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35eab8.  v0:= temp;
  #L35eaba.  if v0 == 0 then goto L35ea88;
  #L35eabe.  v5:= 1I;
  #L35eac0.  return v5;
}
procedure `java.lang.Object` `getValue`(`com.jakewharton.rxrelay2.ReplayRelay` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35ec7c.  v0:= v1.`com.jakewharton.rxrelay2.ReplayRelay.buffer` @type ^`com.jakewharton.rxrelay2.ReplayRelay$ReplayBuffer` @kind object;
  #L35ec80.  call temp:= `getValue`(v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;.getValue:()Ljava/lang/Object;` @kind interface;
  #L35ec86.  v0:= temp @kind object;
  #L35ec88.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`com.jakewharton.rxrelay2.ReplayRelay` v2 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35ec9c.  v0:= `@@com.jakewharton.rxrelay2.ReplayRelay.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L35eca0.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L35eca4.  call temp:= `getValues`(v2, v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L35ecaa.  v0:= temp @kind object;
  #L35ecac.  v1:= `@@com.jakewharton.rxrelay2.ReplayRelay.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L35ecb0.  if v0 != v1 then goto L35ecba;
  #L35ecb4.  v0:= 0I;
  #L35ecb6.  v0:= new `java.lang.Object`[v0];
  #L35ecba.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`com.jakewharton.rxrelay2.ReplayRelay` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35eccc.  v0:= v1.`com.jakewharton.rxrelay2.ReplayRelay.buffer` @type ^`com.jakewharton.rxrelay2.ReplayRelay$ReplayBuffer` @kind object;
  #L35ecd0.  call temp:= `getValues`(v0, v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L35ecd6.  v2:= temp @kind object;
  #L35ecd8.  return v2 @kind object;
}
procedure `boolean` `hasObservers`(`com.jakewharton.rxrelay2.ReplayRelay` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35ead4.  v0:= v1.`com.jakewharton.rxrelay2.ReplayRelay.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35ead8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35eade.  v0:= temp @kind object;
  #L35eae0.  v0:= (`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[]) v0 @kind object;
  #L35eae4.  v0:= length @variable v0;
  #L35eae6.  if v0 == 0 then goto L35eaee;
  #L35eaea.  v0:= 1I;
  #L35eaec.  goto L35eaf0;
  #L35eaee.  v0:= 0I;
  #L35eaf0.  return v0;
}
procedure `boolean` `hasValue`(`com.jakewharton.rxrelay2.ReplayRelay` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35eb04.  v0:= v1.`com.jakewharton.rxrelay2.ReplayRelay.buffer` @type ^`com.jakewharton.rxrelay2.ReplayRelay$ReplayBuffer` @kind object;
  #L35eb08.  call temp:= `size`(v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;.size:()I` @kind interface;
  #L35eb0e.  v0:= temp;
  #L35eb10.  if v0 == 0 then goto L35eb18;
  #L35eb14.  v0:= 1I;
  #L35eb16.  goto L35eb1a;
  #L35eb18.  v0:= 0I;
  #L35eb1a.  return v0;
}
procedure `int` `observerCount`(`com.jakewharton.rxrelay2.ReplayRelay` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.observerCount:()I` @AccessFlag  {
    temp;
    v0;

  #L35ec38.  v0:= v1.`com.jakewharton.rxrelay2.ReplayRelay.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35ec3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35ec42.  v0:= temp @kind object;
  #L35ec44.  v0:= (`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[]) v0 @kind object;
  #L35ec48.  v0:= length @variable v0;
  #L35ec4a.  return v0;
}
procedure `void` `remove`(`com.jakewharton.rxrelay2.ReplayRelay` v6 @kind this, `com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable` v7 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.remove:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L35ed9c.  v0:= v6.`com.jakewharton.rxrelay2.ReplayRelay.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35eda0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35eda6.  v0:= temp @kind object;
  #L35eda8.  v0:= (`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[]) v0 @kind object;
  #L35edac.  v1:= `@@com.jakewharton.rxrelay2.ReplayRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[] @kind object;
  #L35edb0.  if v0 != v1 then goto L35edb6;
  #L35edb4.  return @kind void;
  #L35edb6.  v1:= length @variable v0;
  #L35edb8.  v2:= -1I;
  #L35edba.  v3:= 0I;
  #L35edbc.  v4:= 0I;
  #L35edbe.  if v4 >= v1 then goto L35edd4;
  #L35edc2.  v5:= v0[v4] @kind object;
  #L35edc6.  if v5 != v7 then goto L35edce;
  #L35edca.  v2:= v4;
  #L35edcc.  goto L35edd4;
  #L35edce.  v4:= v4 + 1;
  #L35edd2.  goto L35edbe;
  #L35edd4.  if v2 >= 0 then goto L35edda;
  #L35edd8.  return @kind void;
  #L35edda.  v4:= 1I;
  #L35eddc.  if v1 != v4 then goto L35ede6;
  #L35ede0.  v1:= `@@com.jakewharton.rxrelay2.ReplayRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[] @kind object;
  #L35ede4.  goto L35ee04;
  #L35ede6.  v5:= v1 + -1;
  #L35edea.  v5:= new `com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`[v5];
  #L35edee.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L35edf4.  v3:= v2 + 1;
  #L35edf8.  v1:= v1 - v2 @kind int;
  #L35edfa.  v1:= v1 - v4 @kind int;
  #L35edfc.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L35ee02.  v1:= v5 @kind object;
  #L35ee04.  v2:= v6.`com.jakewharton.rxrelay2.ReplayRelay.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35ee08.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35ee0e.  v0:= temp;
  #L35ee10.  if v0 == 0 then goto L35ed9c;
  #L35ee14.  return @kind void;
}
procedure `int` `size`(`com.jakewharton.rxrelay2.ReplayRelay` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L35ec5c.  v0:= v1.`com.jakewharton.rxrelay2.ReplayRelay.buffer` @type ^`com.jakewharton.rxrelay2.ReplayRelay$ReplayBuffer` @kind object;
  #L35ec60.  call temp:= `size`(v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;.size:()I` @kind interface;
  #L35ec66.  v0:= temp;
  #L35ec68.  return v0;
}
procedure `void` `subscribeActual`(`com.jakewharton.rxrelay2.ReplayRelay` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L35ee28.  v0:= new `com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable`;
  #L35ee2c.  call `<init>`(v0, v2, v1) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;.<init>:(Lio/reactivex/Observer;Lcom/jakewharton/rxrelay2/ReplayRelay;)V` @kind direct;
  #L35ee32.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L35ee38.  v2:= v0.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L35ee3c.  if v2 != 0 then goto L35ee66;
  #L35ee40.  call temp:= `add`(v1, v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.add:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;)Z` @kind virtual;
  #L35ee46.  v2:= temp;
  #L35ee48.  if v2 == 0 then goto L35ee5c;
  #L35ee4c.  v2:= v0.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L35ee50.  if v2 == 0 then goto L35ee5c;
  #L35ee54.  call `remove`(v1, v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay;.remove:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;)V` @kind virtual;
  #L35ee5a.  return @kind void;
  #L35ee5c.  v2:= v1.`com.jakewharton.rxrelay2.ReplayRelay.buffer` @type ^`com.jakewharton.rxrelay2.ReplayRelay$ReplayBuffer` @kind object;
  #L35ee60.  call `replay`(v2, v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayBuffer;.replay:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;)V` @kind interface;
  #L35ee66.  return @kind void;
}
