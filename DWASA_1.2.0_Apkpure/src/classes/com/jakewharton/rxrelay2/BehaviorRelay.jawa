record `com.jakewharton.rxrelay2.BehaviorRelay` @kind class @AccessFlag PUBLIC_FINAL extends `com.jakewharton.rxrelay2.Relay` @kind class {
  `long` `com.jakewharton.rxrelay2.BehaviorRelay.index` @AccessFlag ;
  `java.util.concurrent.locks.Lock` `com.jakewharton.rxrelay2.BehaviorRelay.readLock` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `com.jakewharton.rxrelay2.BehaviorRelay.subscribers` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `com.jakewharton.rxrelay2.BehaviorRelay.value` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `com.jakewharton.rxrelay2.BehaviorRelay.writeLock` @AccessFlag PRIVATE_FINAL;
}
global `com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[] `@@com.jakewharton.rxrelay2.BehaviorRelay.EMPTY` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object`[] `@@com.jakewharton.rxrelay2.BehaviorRelay.EMPTY_ARRAY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L35dd1c.  v0:= 0I;
  #L35dd1e.  v1:= new `java.lang.Object`[v0];
  #L35dd22.  `@@com.jakewharton.rxrelay2.BehaviorRelay.EMPTY_ARRAY` @type ^`java.lang.Object`[] := v1 @kind object;
  #L35dd26.  v0:= new `com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[v0];
  #L35dd2a.  `@@com.jakewharton.rxrelay2.BehaviorRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[] := v0 @kind object;
  #L35dd2e.  return @kind void;
}
procedure `void` `<init>`(`com.jakewharton.rxrelay2.BehaviorRelay` v2 @kind this) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L35dd40.  call `<init>`(v2) @signature `Lcom/jakewharton/rxrelay2/Relay;.<init>:()V` @kind direct;
  #L35dd46.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L35dd4a.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L35dd50.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L35dd56.  v1:= temp @kind object;
  #L35dd58.  v2.`com.jakewharton.rxrelay2.BehaviorRelay.readLock` @type ^`java.util.concurrent.locks.Lock` := v1 @kind object;
  #L35dd5c.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L35dd62.  v0:= temp @kind object;
  #L35dd64.  v2.`com.jakewharton.rxrelay2.BehaviorRelay.writeLock` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L35dd68.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L35dd6c.  v1:= `@@com.jakewharton.rxrelay2.BehaviorRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[] @kind object;
  #L35dd70.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L35dd76.  v2.`com.jakewharton.rxrelay2.BehaviorRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L35dd7a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L35dd7e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L35dd84.  v2.`com.jakewharton.rxrelay2.BehaviorRelay.value` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L35dd88.  return @kind void;
}
procedure `void` `<init>`(`com.jakewharton.rxrelay2.BehaviorRelay` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.<init>:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L35dd9c.  call `<init>`(v1) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.<init>:()V` @kind direct;
  #L35dda2.  if v2 == 0 then goto L35ddb2;
  #L35dda6.  v0:= v1.`com.jakewharton.rxrelay2.BehaviorRelay.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35ddaa.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L35ddb0.  return @kind void;
  #L35ddb2.  v2:= new `java.lang.NullPointerException`;
  #L35ddb6.  v0:= "defaultValue == null" @kind object;
  #L35ddba.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35ddc0.  throw v2;
}
procedure `void` `add`(`com.jakewharton.rxrelay2.BehaviorRelay` v4 @kind this, `com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable` v5 @kind object) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.add:(Lcom/jakewharton/rxrelay2/BehaviorRelay$BehaviorDisposable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35de30.  v0:= v4.`com.jakewharton.rxrelay2.BehaviorRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35de34.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35de3a.  v0:= temp @kind object;
  #L35de3c.  v0:= (`com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[]) v0 @kind object;
  #L35de40.  v1:= length @variable v0;
  #L35de42.  v2:= v1 + 1;
  #L35de46.  v2:= new `com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[v2];
  #L35de4a.  v3:= 0I;
  #L35de4c.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L35de52.  v2[v1]:= v5 @kind object;
  #L35de56.  v1:= v4.`com.jakewharton.rxrelay2.BehaviorRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35de5a.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35de60.  v0:= temp;
  #L35de62.  if v0 == 0 then goto L35de30;
  #L35de66.  return @kind void;
}
procedure `com.jakewharton.rxrelay2.BehaviorRelay` `create`() @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.create:()Lcom/jakewharton/rxrelay2/BehaviorRelay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L35dc00.  v0:= new `com.jakewharton.rxrelay2.BehaviorRelay`;
  #L35dc04.  call `<init>`(v0) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.<init>:()V` @kind direct;
  #L35dc0a.  return v0 @kind object;
}
procedure `com.jakewharton.rxrelay2.BehaviorRelay` `createDefault`(`java.lang.Object` v1 @kind object) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.createDefault:(Ljava/lang/Object;)Lcom/jakewharton/rxrelay2/BehaviorRelay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L35dc1c.  v0:= new `com.jakewharton.rxrelay2.BehaviorRelay`;
  #L35dc20.  call `<init>`(v0, v1) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L35dc26.  return v0 @kind object;
}
procedure `void` `setCurrent`(`com.jakewharton.rxrelay2.BehaviorRelay` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.setCurrent:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35df04.  v0:= v4.`com.jakewharton.rxrelay2.BehaviorRelay.writeLock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L35df08.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L35df0e.  v0:= v4.`com.jakewharton.rxrelay2.BehaviorRelay.index` @type ^`long` @kind wide;
  #L35df12.  v2:= 1L;
  #L35df16.  v0:= v0 + v2 @kind long;
  #L35df18.  v4.`com.jakewharton.rxrelay2.BehaviorRelay.index` @type ^`long` := v0 @kind wide;
  #L35df1c.  v0:= v4.`com.jakewharton.rxrelay2.BehaviorRelay.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35df20.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L35df26.  v5:= v4.`com.jakewharton.rxrelay2.BehaviorRelay.writeLock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L35df2a.  call `unlock`(v5) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L35df30.  return @kind void;
  #L35df32.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L35df34.  v0:= v4.`com.jakewharton.rxrelay2.BehaviorRelay.writeLock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L35df38.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L35df3e.  throw v5;
  catch `java.lang.Throwable` @[L35df0e..L35df26] goto L35df32;
}
procedure `void` `accept`(`com.jakewharton.rxrelay2.BehaviorRelay` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L35ddd4.  if v7 == 0 then goto L35de0c;
  #L35ddd8.  call `setCurrent`(v6, v7) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.setCurrent:(Ljava/lang/Object;)V` @kind direct;
  #L35ddde.  v0:= v6.`com.jakewharton.rxrelay2.BehaviorRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35dde2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35dde8.  v0:= temp @kind object;
  #L35ddea.  v0:= (`com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[]) v0 @kind object;
  #L35ddee.  v1:= length @variable v0;
  #L35ddf0.  v2:= 0I;
  #L35ddf2.  if v2 >= v1 then goto L35de0a;
  #L35ddf6.  v3:= v0[v2] @kind object;
  #L35ddfa.  v4:= v6.`com.jakewharton.rxrelay2.BehaviorRelay.index` @type ^`long` @kind wide;
  #L35ddfe.  call `emitNext`(v3, v7, v4) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay$BehaviorDisposable;.emitNext:(Ljava/lang/Object;J)V` @kind virtual;
  #L35de04.  v2:= v2 + 1;
  #L35de08.  goto L35ddf2;
  #L35de0a.  return @kind void;
  #L35de0c.  v7:= new `java.lang.NullPointerException`;
  #L35de10.  v0:= "value == null" @kind object;
  #L35de14.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35de1a.  goto L35de1e;
  #L35de1c.  throw v7;
  #L35de1e.  goto L35de1c;
}
procedure `java.lang.Object` `getValue`(`com.jakewharton.rxrelay2.BehaviorRelay` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35dc5c.  v0:= v1.`com.jakewharton.rxrelay2.BehaviorRelay.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35dc60.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35dc66.  v0:= temp @kind object;
  #L35dc68.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`com.jakewharton.rxrelay2.BehaviorRelay` v2 @kind this) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35dc7c.  v0:= `@@com.jakewharton.rxrelay2.BehaviorRelay.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L35dc80.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L35dc84.  call temp:= `getValues`(v2, v0) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L35dc8a.  v0:= temp @kind object;
  #L35dc8c.  v1:= `@@com.jakewharton.rxrelay2.BehaviorRelay.EMPTY_ARRAY` @type ^`java.lang.Object`[] @kind object;
  #L35dc90.  if v0 != v1 then goto L35dc9a;
  #L35dc94.  v0:= 0I;
  #L35dc96.  v0:= new `java.lang.Object`[v0];
  #L35dc9a.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`com.jakewharton.rxrelay2.BehaviorRelay` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L35dcac.  v0:= v5.`com.jakewharton.rxrelay2.BehaviorRelay.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35dcb0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35dcb6.  v0:= temp @kind object;
  #L35dcb8.  v1:= 0I;
  #L35dcba.  v2:= 0I;
  #L35dcbc.  if v0 != 0 then goto L35dccc;
  #L35dcc0.  v0:= length @variable v6;
  #L35dcc2.  if v0 == 0 then goto L35dcca;
  #L35dcc6.  v6[v2]:= v1 @kind object;
  #L35dcca.  return v6 @kind object;
  #L35dccc.  v3:= length @variable v6;
  #L35dcce.  v4:= 1I;
  #L35dcd0.  if v3 == 0 then goto L35dce4;
  #L35dcd4.  v6[v2]:= v0 @kind object;
  #L35dcd8.  v0:= length @variable v6;
  #L35dcda.  if v0 == v4 then goto L35dd08;
  #L35dcde.  v6[v4]:= v1 @kind object;
  #L35dce2.  goto L35dd08;
  #L35dce4.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L35dcea.  v6:= temp @kind object;
  #L35dcec.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L35dcf2.  v6:= temp @kind object;
  #L35dcf4.  call temp:= `newInstance`(v6, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L35dcfa.  v6:= temp @kind object;
  #L35dcfc.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L35dd00.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L35dd04.  v6[v2]:= v0 @kind object;
  #L35dd08.  return v6 @kind object;
}
procedure `boolean` `hasObservers`(`com.jakewharton.rxrelay2.BehaviorRelay` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35dba8.  v0:= v1.`com.jakewharton.rxrelay2.BehaviorRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35dbac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35dbb2.  v0:= temp @kind object;
  #L35dbb4.  v0:= (`com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[]) v0 @kind object;
  #L35dbb8.  v0:= length @variable v0;
  #L35dbba.  if v0 == 0 then goto L35dbc2;
  #L35dbbe.  v0:= 1I;
  #L35dbc0.  goto L35dbc4;
  #L35dbc2.  v0:= 0I;
  #L35dbc4.  return v0;
}
procedure `boolean` `hasValue`(`com.jakewharton.rxrelay2.BehaviorRelay` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35dbd8.  v0:= v1.`com.jakewharton.rxrelay2.BehaviorRelay.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35dbdc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35dbe2.  v0:= temp @kind object;
  #L35dbe4.  if v0 == 0 then goto L35dbec;
  #L35dbe8.  v0:= 1I;
  #L35dbea.  goto L35dbee;
  #L35dbec.  v0:= 0I;
  #L35dbee.  return v0;
}
procedure `void` `remove`(`com.jakewharton.rxrelay2.BehaviorRelay` v6 @kind this, `com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable` v7 @kind object) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.remove:(Lcom/jakewharton/rxrelay2/BehaviorRelay$BehaviorDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L35de78.  v0:= v6.`com.jakewharton.rxrelay2.BehaviorRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35de7c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35de82.  v0:= temp @kind object;
  #L35de84.  v0:= (`com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[]) v0 @kind object;
  #L35de88.  v1:= `@@com.jakewharton.rxrelay2.BehaviorRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[] @kind object;
  #L35de8c.  if v0 != v1 then goto L35de92;
  #L35de90.  return @kind void;
  #L35de92.  v1:= length @variable v0;
  #L35de94.  v2:= -1I;
  #L35de96.  v3:= 0I;
  #L35de98.  v4:= 0I;
  #L35de9a.  if v4 >= v1 then goto L35deb0;
  #L35de9e.  v5:= v0[v4] @kind object;
  #L35dea2.  if v5 != v7 then goto L35deaa;
  #L35dea6.  v2:= v4;
  #L35dea8.  goto L35deb0;
  #L35deaa.  v4:= v4 + 1;
  #L35deae.  goto L35de9a;
  #L35deb0.  if v2 >= 0 then goto L35deb6;
  #L35deb4.  return @kind void;
  #L35deb6.  v4:= 1I;
  #L35deb8.  if v1 != v4 then goto L35dec2;
  #L35debc.  v1:= `@@com.jakewharton.rxrelay2.BehaviorRelay.EMPTY` @type ^`com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[] @kind object;
  #L35dec0.  goto L35dee0;
  #L35dec2.  v5:= v1 + -1;
  #L35dec6.  v5:= new `com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[v5];
  #L35deca.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L35ded0.  v3:= v2 + 1;
  #L35ded4.  v1:= v1 - v2 @kind int;
  #L35ded6.  v1:= v1 - v4 @kind int;
  #L35ded8.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L35dede.  v1:= v5 @kind object;
  #L35dee0.  v2:= v6.`com.jakewharton.rxrelay2.BehaviorRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35dee4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35deea.  v0:= temp;
  #L35deec.  if v0 == 0 then goto L35de78;
  #L35def0.  return @kind void;
}
procedure `void` `subscribeActual`(`com.jakewharton.rxrelay2.BehaviorRelay` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L35df5c.  v0:= new `com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`;
  #L35df60.  call `<init>`(v0, v2, v1) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay$BehaviorDisposable;.<init>:(Lio/reactivex/Observer;Lcom/jakewharton/rxrelay2/BehaviorRelay;)V` @kind direct;
  #L35df66.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L35df6c.  call `add`(v1, v0) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.add:(Lcom/jakewharton/rxrelay2/BehaviorRelay$BehaviorDisposable;)V` @kind direct;
  #L35df72.  v2:= v0.`com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L35df76.  if v2 == 0 then goto L35df82;
  #L35df7a.  call `remove`(v1, v0) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.remove:(Lcom/jakewharton/rxrelay2/BehaviorRelay$BehaviorDisposable;)V` @kind virtual;
  #L35df80.  goto L35df88;
  #L35df82.  call `emitFirst`(v0) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay$BehaviorDisposable;.emitFirst:()V` @kind virtual;
  #L35df88.  return @kind void;
}
procedure `int` `subscriberCount`(`com.jakewharton.rxrelay2.BehaviorRelay` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/BehaviorRelay;.subscriberCount:()I` @AccessFlag  {
    temp;
    v0;

  #L35dc38.  v0:= v1.`com.jakewharton.rxrelay2.BehaviorRelay.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L35dc3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L35dc42.  v0:= temp @kind object;
  #L35dc44.  v0:= (`com.jakewharton.rxrelay2.BehaviorRelay$BehaviorDisposable`[]) v0 @kind object;
  #L35dc48.  v0:= length @variable v0;
  #L35dc4a.  return v0;
}
