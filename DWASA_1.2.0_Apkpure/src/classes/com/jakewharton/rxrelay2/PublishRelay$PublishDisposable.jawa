record `com.jakewharton.rxrelay2.PublishRelay$PublishDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `com.jakewharton.rxrelay2.PublishRelay$PublishDisposable.actual` @AccessFlag FINAL;
  `com.jakewharton.rxrelay2.PublishRelay` `com.jakewharton.rxrelay2.PublishRelay$PublishDisposable.parent` @AccessFlag FINAL;
}
global `long` `@@com.jakewharton.rxrelay2.PublishRelay$PublishDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `com.jakewharton.rxrelay2.PublishRelay` v2 @kind object) @signature `Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;.<init>:(Lio/reactivex/Observer;Lcom/jakewharton/rxrelay2/PublishRelay;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L35dfb8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L35dfbe.  v0.`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable.actual` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L35dfc2.  v0.`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable.parent` @type ^`com.jakewharton.rxrelay2.PublishRelay` := v2 @kind object;
  #L35dfc6.  return @kind void;
}
procedure `void` `dispose`(`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable` v2 @kind this) @signature `Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35dfd8.  v0:= 0I;
  #L35dfda.  v1:= 1I;
  #L35dfdc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;.compareAndSet:(ZZ)Z` @kind virtual;
  #L35dfe2.  v0:= temp;
  #L35dfe4.  if v0 == 0 then goto L35dff2;
  #L35dfe8.  v0:= v2.`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable.parent` @type ^`com.jakewharton.rxrelay2.PublishRelay` @kind object;
  #L35dfec.  call `remove`(v0, v2) @signature `Lcom/jakewharton/rxrelay2/PublishRelay;.remove:(Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;)V` @kind virtual;
  #L35dff2.  return @kind void;
}
procedure `boolean` `isDisposed`(`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35df9c.  call temp:= `get`(v1) @signature `Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;.get:()Z` @kind virtual;
  #L35dfa2.  v0:= temp;
  #L35dfa4.  return v0;
}
procedure `void` `onNext`(`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;.onNext:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L35e004.  call temp:= `get`(v1) @signature `Lcom/jakewharton/rxrelay2/PublishRelay$PublishDisposable;.get:()Z` @kind virtual;
  #L35e00a.  v0:= temp;
  #L35e00c.  if v0 != 0 then goto L35e01a;
  #L35e010.  v0:= v1.`com.jakewharton.rxrelay2.PublishRelay$PublishDisposable.actual` @type ^`io.reactivex.Observer` @kind object;
  #L35e014.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L35e01a.  return @kind void;
}
