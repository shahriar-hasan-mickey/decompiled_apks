record `com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList` @kind class @AccessFlag  {
  `int` `com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.capacity` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.head` @AccessFlag PRIVATE_FINAL;
  `int` `com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.offset` @AccessFlag PRIVATE;
  `java.lang.Object`[] `com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.tail` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList` v0 @kind this, `int` v1 ) @signature `Lcom/jakewharton/rxrelay2/AppendOnlyLinkedArrayList;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L35d8c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35d8c6.  v0.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.capacity` @type ^`int` := v1;
  #L35d8ca.  v1:= v1 + 1;
  #L35d8ce.  v1:= new `java.lang.Object`[v1];
  #L35d8d2.  v0.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.head` @type ^`java.lang.Object`[] := v1 @kind object;
  #L35d8d6.  v1:= v0.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.head` @type ^`java.lang.Object`[] @kind object;
  #L35d8da.  v0.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.tail` @type ^`java.lang.Object`[] := v1 @kind object;
  #L35d8de.  return @kind void;
}
procedure `boolean` `accept`(`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList` v4 @kind this, `com.jakewharton.rxrelay2.Relay` v5 @kind object) @signature `Lcom/jakewharton/rxrelay2/AppendOnlyLinkedArrayList;.accept:(Lcom/jakewharton/rxrelay2/Relay;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35d878.  v0:= v4.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.head` @type ^`java.lang.Object`[] @kind object;
  #L35d87c.  v1:= v4.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.capacity` @type ^`int`;
  #L35d880.  v2:= 0I;
  #L35d882.  if v0 == 0 then goto L35d8ae;
  #L35d886.  if v2 >= v1 then goto L35d8a0;
  #L35d88a.  v3:= v0[v2] @kind object;
  #L35d88e.  if v3 != 0 then goto L35d894;
  #L35d892.  goto L35d8a0;
  #L35d894.  call `accept`(v5, v3) @signature `Lcom/jakewharton/rxrelay2/Relay;.accept:(Ljava/lang/Object;)V` @kind virtual;
  #L35d89a.  v2:= v2 + 1;
  #L35d89e.  goto L35d886;
  #L35d8a0.  v0:= v0[v1] @kind object;
  #L35d8a4.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L35d8a8.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L35d8ac.  goto L35d880;
  #L35d8ae.  return v2;
}
procedure `void` `add`(`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/jakewharton/rxrelay2/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L35d8f0.  v0:= v3.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.capacity` @type ^`int`;
  #L35d8f4.  v1:= v3.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.offset` @type ^`int`;
  #L35d8f8.  if v1 != v0 then goto L35d912;
  #L35d8fc.  v1:= v0 + 1;
  #L35d900.  v1:= new `java.lang.Object`[v1];
  #L35d904.  v2:= v3.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.tail` @type ^`java.lang.Object`[] @kind object;
  #L35d908.  v2[v0]:= v1 @kind object;
  #L35d90c.  v3.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.tail` @type ^`java.lang.Object`[] := v1 @kind object;
  #L35d910.  v1:= 0I;
  #L35d912.  v0:= v3.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.tail` @type ^`java.lang.Object`[] @kind object;
  #L35d916.  v0[v1]:= v4 @kind object;
  #L35d91a.  v1:= v1 + 1;
  #L35d91e.  v3.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.offset` @type ^`int` := v1;
  #L35d922.  return @kind void;
}
procedure `void` `forEachWhile`(`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList` v4 @kind this, `com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList$NonThrowingPredicate` v5 @kind object) @signature `Lcom/jakewharton/rxrelay2/AppendOnlyLinkedArrayList;.forEachWhile:(Lcom/jakewharton/rxrelay2/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35d934.  v0:= v4.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.head` @type ^`java.lang.Object`[] @kind object;
  #L35d938.  v1:= v4.`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList.capacity` @type ^`int`;
  #L35d93c.  if v0 == 0 then goto L35d972;
  #L35d940.  v2:= 0I;
  #L35d942.  if v2 >= v1 then goto L35d964;
  #L35d946.  v3:= v0[v2] @kind object;
  #L35d94a.  if v3 != 0 then goto L35d950;
  #L35d94e.  goto L35d964;
  #L35d950.  call temp:= `test`(v5, v3) @signature `Lcom/jakewharton/rxrelay2/AppendOnlyLinkedArrayList$NonThrowingPredicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L35d956.  v3:= temp;
  #L35d958.  if v3 == 0 then goto L35d95e;
  #L35d95c.  goto L35d964;
  #L35d95e.  v2:= v2 + 1;
  #L35d962.  goto L35d942;
  #L35d964.  v0:= v0[v1] @kind object;
  #L35d968.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L35d96c.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L35d970.  goto L35d93c;
  #L35d972.  return @kind void;
}
