record `com.jakewharton.rxrelay2.SerializedRelay` @kind class @AccessFlag FINAL extends `com.jakewharton.rxrelay2.Relay` @kind class {
  `com.jakewharton.rxrelay2.Relay` `com.jakewharton.rxrelay2.SerializedRelay.actual` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.jakewharton.rxrelay2.SerializedRelay.emitting` @AccessFlag PRIVATE;
  `com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList` `com.jakewharton.rxrelay2.SerializedRelay.queue` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.jakewharton.rxrelay2.SerializedRelay` v0 @kind this, `com.jakewharton.rxrelay2.Relay` v1 @kind object) @signature `Lcom/jakewharton/rxrelay2/SerializedRelay;.<init>:(Lcom/jakewharton/rxrelay2/Relay;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L35ee98.  call `<init>`(v0) @signature `Lcom/jakewharton/rxrelay2/Relay;.<init>:()V` @kind direct;
  #L35ee9e.  v0.`com.jakewharton.rxrelay2.SerializedRelay.actual` @type ^`com.jakewharton.rxrelay2.Relay` := v1 @kind object;
  #L35eea2.  return @kind void;
}
procedure `void` `emitLoop`(`com.jakewharton.rxrelay2.SerializedRelay` v2 @kind this) @signature `Lcom/jakewharton/rxrelay2/SerializedRelay;.emitLoop:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L35ef24.  @monitorenter v2
  #L35ef26.  v0:= v2.`com.jakewharton.rxrelay2.SerializedRelay.queue` @type ^`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList` @kind object;
  #L35ef2a.  if v0 != 0 then goto L35ef38;
  #L35ef2e.  v0:= 0I;
  #L35ef30.  v2.`com.jakewharton.rxrelay2.SerializedRelay.emitting` @type ^`boolean` := v0 @kind boolean;
  #L35ef34.  @monitorexit v2
  #L35ef36.  return @kind void;
  #L35ef38.  v1:= 0I;
  #L35ef3a.  v2.`com.jakewharton.rxrelay2.SerializedRelay.queue` @type ^`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L35ef3e.  @monitorexit v2
  #L35ef40.  v1:= v2.`com.jakewharton.rxrelay2.SerializedRelay.actual` @type ^`com.jakewharton.rxrelay2.Relay` @kind object;
  #L35ef44.  call temp:= `accept`(v0, v1) @signature `Lcom/jakewharton/rxrelay2/AppendOnlyLinkedArrayList;.accept:(Lcom/jakewharton/rxrelay2/Relay;)Z` @kind virtual;
  #L35ef4a.  goto L35ef24;
  #L35ef4c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L35ef4e.  @monitorexit v2
  #L35ef50.  goto L35ef54;
  #L35ef52.  throw v0;
  #L35ef54.  goto L35ef52;
  catch `java.lang.Throwable` @[L35ef26..L35ef40] goto L35ef4c;
  catch `java.lang.Throwable` @[L35ef4e..L35ef50] goto L35ef4c;
}
procedure `void` `accept`(`com.jakewharton.rxrelay2.SerializedRelay` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/jakewharton/rxrelay2/SerializedRelay;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35eeb4.  @monitorenter v2
  #L35eeb6.  v0:= v2.`com.jakewharton.rxrelay2.SerializedRelay.emitting` @type ^`boolean` @kind boolean;
  #L35eeba.  if v0 == 0 then goto L35eee0;
  #L35eebe.  v0:= v2.`com.jakewharton.rxrelay2.SerializedRelay.queue` @type ^`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList` @kind object;
  #L35eec2.  if v0 != 0 then goto L35eed6;
  #L35eec6.  v0:= new `com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList`;
  #L35eeca.  v1:= 4I;
  #L35eecc.  call `<init>`(v0, v1) @signature `Lcom/jakewharton/rxrelay2/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L35eed2.  v2.`com.jakewharton.rxrelay2.SerializedRelay.queue` @type ^`com.jakewharton.rxrelay2.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L35eed6.  call `add`(v0, v3) @signature `Lcom/jakewharton/rxrelay2/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L35eedc.  @monitorexit v2
  #L35eede.  return @kind void;
  #L35eee0.  v0:= 1I;
  #L35eee2.  v2.`com.jakewharton.rxrelay2.SerializedRelay.emitting` @type ^`boolean` := v0 @kind boolean;
  #L35eee6.  @monitorexit v2
  #L35eee8.  v0:= v2.`com.jakewharton.rxrelay2.SerializedRelay.actual` @type ^`com.jakewharton.rxrelay2.Relay` @kind object;
  #L35eeec.  call `accept`(v0, v3) @signature `Lcom/jakewharton/rxrelay2/Relay;.accept:(Ljava/lang/Object;)V` @kind virtual;
  #L35eef2.  call `emitLoop`(v2) @signature `Lcom/jakewharton/rxrelay2/SerializedRelay;.emitLoop:()V` @kind direct;
  #L35eef8.  return @kind void;
  #L35eefa.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L35eefc.  @monitorexit v2
  #L35eefe.  throw v3;
  catch `java.lang.Throwable` @[L35eeb6..L35eee8] goto L35eefa;
  catch `java.lang.Throwable` @[L35eefc..L35eefe] goto L35eefa;
}
procedure `boolean` `hasObservers`(`com.jakewharton.rxrelay2.SerializedRelay` v1 @kind this) @signature `Lcom/jakewharton/rxrelay2/SerializedRelay;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35ee78.  v0:= v1.`com.jakewharton.rxrelay2.SerializedRelay.actual` @type ^`com.jakewharton.rxrelay2.Relay` @kind object;
  #L35ee7c.  call temp:= `hasObservers`(v0) @signature `Lcom/jakewharton/rxrelay2/Relay;.hasObservers:()Z` @kind virtual;
  #L35ee82.  v0:= temp;
  #L35ee84.  return v0;
}
procedure `void` `subscribeActual`(`com.jakewharton.rxrelay2.SerializedRelay` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lcom/jakewharton/rxrelay2/SerializedRelay;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L35ef7c.  v0:= v1.`com.jakewharton.rxrelay2.SerializedRelay.actual` @type ^`com.jakewharton.rxrelay2.Relay` @kind object;
  #L35ef80.  call `subscribe`(v0, v2) @signature `Lcom/jakewharton/rxrelay2/Relay;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L35ef86.  return @kind void;
}
