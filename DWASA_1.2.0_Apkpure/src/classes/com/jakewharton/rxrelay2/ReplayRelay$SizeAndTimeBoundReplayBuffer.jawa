record `com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `com.jakewharton.rxrelay2.ReplayRelay$ReplayBuffer` @kind interface {
  `com.jakewharton.rxrelay2.ReplayRelay$TimedNode` `com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.head` @AccessFlag VOLATILE;
  `long` `com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.maxAge` @AccessFlag FINAL;
  `int` `com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.maxSize` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.scheduler` @AccessFlag FINAL;
  `int` `com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.size` @AccessFlag ;
  `com.jakewharton.rxrelay2.ReplayRelay$TimedNode` `com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.tail` @AccessFlag ;
  `java.util.concurrent.TimeUnit` `com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.unit` @AccessFlag FINAL;
}
global `long` `@@com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer` v3 @kind this, `int` v4 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.Scheduler` v8 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L35e3d0.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L35e3d6.  if v4 <= 0 then goto L35e462;
  #L35e3da.  v0:= 0L;
  #L35e3de.  v2:= lcmp(v5, v0);
  #L35e3e2.  if v2 <= 0 then goto L35e434;
  #L35e3e6.  if v7 == 0 then goto L35e424;
  #L35e3ea.  if v8 == 0 then goto L35e414;
  #L35e3ee.  v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.maxSize` @type ^`int` := v4;
  #L35e3f2.  v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` := v5 @kind wide;
  #L35e3f6.  v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L35e3fa.  v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` := v8 @kind object;
  #L35e3fe.  v4:= new `com.jakewharton.rxrelay2.ReplayRelay$TimedNode`;
  #L35e402.  v5:= 0I;
  #L35e404.  call `<init>`(v4, v5, v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L35e40a.  v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.tail` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` := v4 @kind object;
  #L35e40e.  v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` := v4 @kind object;
  #L35e412.  return @kind void;
  #L35e414.  v4:= new `java.lang.NullPointerException`;
  #L35e418.  v5:= "scheduler == null" @kind object;
  #L35e41c.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35e422.  throw v4;
  #L35e424.  v4:= new `java.lang.NullPointerException`;
  #L35e428.  v5:= "unit == null" @kind object;
  #L35e42c.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35e432.  throw v4;
  #L35e434.  v4:= new `java.lang.IllegalArgumentException`;
  #L35e438.  v7:= new `java.lang.StringBuilder`;
  #L35e43c.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L35e442.  v8:= "maxAge > 0 required but it was " @kind object;
  #L35e446.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35e44c.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L35e452.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35e458.  v5:= temp @kind object;
  #L35e45a.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35e460.  throw v4;
  #L35e462.  v5:= new `java.lang.IllegalArgumentException`;
  #L35e466.  v6:= new `java.lang.StringBuilder`;
  #L35e46a.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L35e470.  v7:= "maxSize > 0 required but it was " @kind object;
  #L35e474.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35e47a.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L35e480.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35e486.  v4:= temp @kind object;
  #L35e488.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35e48e.  throw v5;
}
procedure `void` `add`(`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeAndTimeBoundReplayBuffer;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L35e4a0.  v0:= new `com.jakewharton.rxrelay2.ReplayRelay$TimedNode`;
  #L35e4a4.  v1:= v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L35e4a8.  v2:= v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L35e4ac.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L35e4b2.  v1:= temp @kind wide;
  #L35e4b4.  call `<init>`(v0, v4, v1) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L35e4ba.  v4:= v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.tail` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` @kind object;
  #L35e4be.  v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.tail` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` := v0 @kind object;
  #L35e4c2.  v1:= v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L35e4c6.  v1:= v1 + 1;
  #L35e4ca.  v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v1;
  #L35e4ce.  call `set`(v4, v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L35e4d4.  call `trim`(v3) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeAndTimeBoundReplayBuffer;.trim:()V` @kind virtual;
  #L35e4da.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer` v2 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeAndTimeBoundReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35e320.  v0:= v2.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` @kind object;
  #L35e324.  call temp:= `get`(v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e32a.  v1:= temp @kind object;
  #L35e32c.  v1:= (`com.jakewharton.rxrelay2.ReplayRelay$TimedNode`) v1 @kind object;
  #L35e330.  if v1 != 0 then goto L35e33a;
  #L35e334.  v0:= v0.`com.jakewharton.rxrelay2.ReplayRelay$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L35e338.  return v0 @kind object;
  #L35e33a.  v0:= v1 @kind object;
  #L35e33c.  goto L35e324;
}
procedure `java.lang.Object`[] `getValues`(`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeAndTimeBoundReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L35e350.  v0:= v5.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` @kind object;
  #L35e354.  call temp:= `size`(v5) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeAndTimeBoundReplayBuffer;.size:()I` @kind virtual;
  #L35e35a.  v1:= temp;
  #L35e35c.  v2:= 0I;
  #L35e35e.  v3:= 0I;
  #L35e360.  if v1 != 0 then goto L35e370;
  #L35e364.  v0:= length @variable v6;
  #L35e366.  if v0 == 0 then goto L35e3be;
  #L35e36a.  v6[v3]:= v2 @kind object;
  #L35e36e.  goto L35e3be;
  #L35e370.  v4:= length @variable v6;
  #L35e372.  if v4 >= v1 then goto L35e396;
  #L35e376.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L35e37c.  v6:= temp @kind object;
  #L35e37e.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L35e384.  v6:= temp @kind object;
  #L35e386.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L35e38c.  v6:= temp @kind object;
  #L35e38e.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L35e392.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L35e396.  if v3 == v1 then goto L35e3b4;
  #L35e39a.  call temp:= `get`(v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e3a0.  v0:= temp @kind object;
  #L35e3a2.  v0:= (`com.jakewharton.rxrelay2.ReplayRelay$TimedNode`) v0 @kind object;
  #L35e3a6.  v4:= v0.`com.jakewharton.rxrelay2.ReplayRelay$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L35e3aa.  v6[v3]:= v4 @kind object;
  #L35e3ae.  v3:= v3 + 1;
  #L35e3b2.  goto L35e396;
  #L35e3b4.  v0:= length @variable v6;
  #L35e3b6.  if v0 <= v1 then goto L35e3be;
  #L35e3ba.  v6[v1]:= v2 @kind object;
  #L35e3be.  return v6 @kind object;
}
procedure `void` `replay`(`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer` v10 @kind this, `com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable` v11 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeAndTimeBoundReplayBuffer;.replay:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L35e4ec.  call temp:= `getAndIncrement`(v11) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;.getAndIncrement:()I` @kind virtual;
  #L35e4f2.  v0:= temp;
  #L35e4f4.  if v0 == 0 then goto L35e4fa;
  #L35e4f8.  return @kind void;
  #L35e4fa.  v0:= 1I;
  #L35e4fc.  v1:= v11.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.actual` @type ^`io.reactivex.Observer` @kind object;
  #L35e500.  v2:= v11.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.index` @type ^`java.lang.Object` @kind object;
  #L35e504.  v2:= (`com.jakewharton.rxrelay2.ReplayRelay$TimedNode`) v2 @kind object;
  #L35e508.  if v2 != 0 then goto L35e558;
  #L35e50c.  v2:= v10.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` @kind object;
  #L35e510.  v3:= v10.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L35e514.  v4:= v10.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L35e518.  call temp:= `now`(v3, v4) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L35e51e.  v3:= temp @kind wide;
  #L35e520.  v5:= v10.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L35e524.  v3:= v3 - v5 @kind long;
  #L35e526.  call temp:= `get`(v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e52c.  v5:= temp @kind object;
  #L35e52e.  v5:= (`com.jakewharton.rxrelay2.ReplayRelay$TimedNode`) v5 @kind object;
  #L35e532.  if v5 == 0 then goto L35e558;
  #L35e536.  v6:= v5.`com.jakewharton.rxrelay2.ReplayRelay$TimedNode.time` @type ^`long` @kind wide;
  #L35e53a.  v8:= lcmp(v6, v3);
  #L35e53e.  if v8 <= 0 then goto L35e544;
  #L35e542.  goto L35e558;
  #L35e544.  call temp:= `get`(v5) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e54a.  v2:= temp @kind object;
  #L35e54c.  v2:= (`com.jakewharton.rxrelay2.ReplayRelay$TimedNode`) v2 @kind object;
  #L35e550.  v9:= v5 @kind object;
  #L35e552.  v5:= v2 @kind object;
  #L35e554.  v2:= v9 @kind object;
  #L35e556.  goto L35e532;
  #L35e558.  v3:= v11.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L35e55c.  v4:= 0I;
  #L35e55e.  if v3 == 0 then goto L35e568;
  #L35e562.  v11.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.index` @type ^`java.lang.Object` := v4 @kind object;
  #L35e566.  return @kind void;
  #L35e568.  v3:= v11.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L35e56c.  if v3 == 0 then goto L35e576;
  #L35e570.  v11.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.index` @type ^`java.lang.Object` := v4 @kind object;
  #L35e574.  return @kind void;
  #L35e576.  call temp:= `get`(v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e57c.  v3:= temp @kind object;
  #L35e57e.  v3:= (`com.jakewharton.rxrelay2.ReplayRelay$TimedNode`) v3 @kind object;
  #L35e582.  if v3 != 0 then goto L35e5a8;
  #L35e586.  call temp:= `get`(v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e58c.  v3:= temp @kind object;
  #L35e58e.  if v3 == 0 then goto L35e594;
  #L35e592.  goto L35e558;
  #L35e594.  v11.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.index` @type ^`java.lang.Object` := v2 @kind object;
  #L35e598.  v0:= -v0 @kind int;
  #L35e59a.  call temp:= `addAndGet`(v11, v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;.addAndGet:(I)I` @kind virtual;
  #L35e5a0.  v0:= temp;
  #L35e5a2.  if v0 != 0 then goto L35e558;
  #L35e5a6.  return @kind void;
  #L35e5a8.  v2:= v3.`com.jakewharton.rxrelay2.ReplayRelay$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L35e5ac.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L35e5b2.  v2:= v3 @kind object;
  #L35e5b4.  goto L35e568;
}
procedure `int` `size`(`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer` v3 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeAndTimeBoundReplayBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L35e2e4.  v0:= v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` @kind object;
  #L35e2e8.  v1:= 0I;
  #L35e2ea.  v2:= 2147483647I;
  #L35e2f0.  if v1 == v2 then goto L35e30c;
  #L35e2f4.  call temp:= `get`(v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e2fa.  v0:= temp @kind object;
  #L35e2fc.  v0:= (`com.jakewharton.rxrelay2.ReplayRelay$TimedNode`) v0 @kind object;
  #L35e300.  if v0 != 0 then goto L35e306;
  #L35e304.  goto L35e30c;
  #L35e306.  v1:= v1 + 1;
  #L35e30a.  goto L35e2ea;
  #L35e30c.  return v1;
}
procedure `void` `trim`(`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer` v7 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeAndTimeBoundReplayBuffer;.trim:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L35e5c8.  v0:= v7.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L35e5cc.  v1:= v7.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.maxSize` @type ^`int`;
  #L35e5d0.  if v0 <= v1 then goto L35e5f0;
  #L35e5d4.  v0:= v0 + -1;
  #L35e5d8.  v7.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v0;
  #L35e5dc.  v0:= v7.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` @kind object;
  #L35e5e0.  call temp:= `get`(v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e5e6.  v0:= temp @kind object;
  #L35e5e8.  v0:= (`com.jakewharton.rxrelay2.ReplayRelay$TimedNode`) v0 @kind object;
  #L35e5ec.  v7.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` := v0 @kind object;
  #L35e5f0.  v0:= v7.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.Scheduler` @kind object;
  #L35e5f4.  v1:= v7.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L35e5f8.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L35e5fe.  v0:= temp @kind wide;
  #L35e600.  v2:= v7.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L35e604.  v0:= v0 - v2 @kind long;
  #L35e606.  v2:= v7.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` @kind object;
  #L35e60a.  call temp:= `get`(v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$TimedNode;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e610.  v3:= temp @kind object;
  #L35e612.  v3:= (`com.jakewharton.rxrelay2.ReplayRelay$TimedNode`) v3 @kind object;
  #L35e616.  if v3 != 0 then goto L35e620;
  #L35e61a.  v7.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` := v2 @kind object;
  #L35e61e.  goto L35e630;
  #L35e620.  v4:= v3.`com.jakewharton.rxrelay2.ReplayRelay$TimedNode.time` @type ^`long` @kind wide;
  #L35e624.  v6:= lcmp(v4, v0);
  #L35e628.  if v6 <= 0 then goto L35e632;
  #L35e62c.  v7.`com.jakewharton.rxrelay2.ReplayRelay$SizeAndTimeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$TimedNode` := v2 @kind object;
  #L35e630.  return @kind void;
  #L35e632.  v2:= v3 @kind object;
  #L35e634.  goto L35e60a;
}
