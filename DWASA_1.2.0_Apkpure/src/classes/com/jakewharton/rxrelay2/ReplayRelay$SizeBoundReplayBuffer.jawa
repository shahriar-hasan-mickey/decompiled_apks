record `com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `com.jakewharton.rxrelay2.ReplayRelay$ReplayBuffer` @kind interface {
  `com.jakewharton.rxrelay2.ReplayRelay$Node` `com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.head` @AccessFlag VOLATILE;
  `int` `com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.maxSize` @AccessFlag FINAL;
  `int` `com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.size` @AccessFlag ;
  `com.jakewharton.rxrelay2.ReplayRelay$Node` `com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.tail` @AccessFlag ;
}
global `long` `@@com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer` v3 @kind this, `int` v4 ) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeBoundReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L35e734.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L35e73a.  if v4 <= 0 then goto L35e758;
  #L35e73e.  v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.maxSize` @type ^`int` := v4;
  #L35e742.  v4:= new `com.jakewharton.rxrelay2.ReplayRelay$Node`;
  #L35e746.  v0:= 0I;
  #L35e748.  call `<init>`(v4, v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L35e74e.  v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.tail` @type ^`com.jakewharton.rxrelay2.ReplayRelay$Node` := v4 @kind object;
  #L35e752.  v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$Node` := v4 @kind object;
  #L35e756.  return @kind void;
  #L35e758.  v0:= new `java.lang.IllegalArgumentException`;
  #L35e75c.  v1:= new `java.lang.StringBuilder`;
  #L35e760.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L35e766.  v2:= "maxSize > 0 required but it was " @kind object;
  #L35e76a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35e770.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L35e776.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35e77c.  v4:= temp @kind object;
  #L35e77e.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35e784.  throw v0;
}
procedure `void` `add`(`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeBoundReplayBuffer;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35e798.  v0:= new `com.jakewharton.rxrelay2.ReplayRelay$Node`;
  #L35e79c.  call `<init>`(v0, v3) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L35e7a2.  v3:= v2.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.tail` @type ^`com.jakewharton.rxrelay2.ReplayRelay$Node` @kind object;
  #L35e7a6.  v2.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.tail` @type ^`com.jakewharton.rxrelay2.ReplayRelay$Node` := v0 @kind object;
  #L35e7aa.  v1:= v2.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.size` @type ^`int`;
  #L35e7ae.  v1:= v1 + 1;
  #L35e7b2.  v2.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.size` @type ^`int` := v1;
  #L35e7b6.  call `set`(v3, v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$Node;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L35e7bc.  call `trim`(v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeBoundReplayBuffer;.trim:()V` @kind virtual;
  #L35e7c2.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer` v2 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeBoundReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35e684.  v0:= v2.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$Node` @kind object;
  #L35e688.  call temp:= `get`(v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e68e.  v1:= temp @kind object;
  #L35e690.  v1:= (`com.jakewharton.rxrelay2.ReplayRelay$Node`) v1 @kind object;
  #L35e694.  if v1 != 0 then goto L35e69e;
  #L35e698.  v0:= v0.`com.jakewharton.rxrelay2.ReplayRelay$Node.value` @type ^`java.lang.Object` @kind object;
  #L35e69c.  return v0 @kind object;
  #L35e69e.  v0:= v1 @kind object;
  #L35e6a0.  goto L35e688;
}
procedure `java.lang.Object`[] `getValues`(`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeBoundReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L35e6b4.  v0:= v5.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$Node` @kind object;
  #L35e6b8.  call temp:= `size`(v5) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeBoundReplayBuffer;.size:()I` @kind virtual;
  #L35e6be.  v1:= temp;
  #L35e6c0.  v2:= 0I;
  #L35e6c2.  v3:= 0I;
  #L35e6c4.  if v1 != 0 then goto L35e6d4;
  #L35e6c8.  v0:= length @variable v6;
  #L35e6ca.  if v0 == 0 then goto L35e722;
  #L35e6ce.  v6[v3]:= v2 @kind object;
  #L35e6d2.  goto L35e722;
  #L35e6d4.  v4:= length @variable v6;
  #L35e6d6.  if v4 >= v1 then goto L35e6fa;
  #L35e6da.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L35e6e0.  v6:= temp @kind object;
  #L35e6e2.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L35e6e8.  v6:= temp @kind object;
  #L35e6ea.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L35e6f0.  v6:= temp @kind object;
  #L35e6f2.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L35e6f6.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L35e6fa.  if v3 == v1 then goto L35e718;
  #L35e6fe.  call temp:= `get`(v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e704.  v0:= temp @kind object;
  #L35e706.  v0:= (`com.jakewharton.rxrelay2.ReplayRelay$Node`) v0 @kind object;
  #L35e70a.  v4:= v0.`com.jakewharton.rxrelay2.ReplayRelay$Node.value` @type ^`java.lang.Object` @kind object;
  #L35e70e.  v6[v3]:= v4 @kind object;
  #L35e712.  v3:= v3 + 1;
  #L35e716.  goto L35e6fa;
  #L35e718.  v0:= length @variable v6;
  #L35e71a.  if v0 <= v1 then goto L35e722;
  #L35e71e.  v6[v1]:= v2 @kind object;
  #L35e722.  return v6 @kind object;
}
procedure `void` `replay`(`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer` v4 @kind this, `com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable` v5 @kind object) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeBoundReplayBuffer;.replay:(Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35e7d4.  call temp:= `getAndIncrement`(v5) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;.getAndIncrement:()I` @kind virtual;
  #L35e7da.  v0:= temp;
  #L35e7dc.  if v0 == 0 then goto L35e7e2;
  #L35e7e0.  return @kind void;
  #L35e7e2.  v0:= 1I;
  #L35e7e4.  v1:= v5.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.actual` @type ^`io.reactivex.Observer` @kind object;
  #L35e7e8.  v2:= v5.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.index` @type ^`java.lang.Object` @kind object;
  #L35e7ec.  v2:= (`com.jakewharton.rxrelay2.ReplayRelay$Node`) v2 @kind object;
  #L35e7f0.  if v2 != 0 then goto L35e7f8;
  #L35e7f4.  v2:= v4.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$Node` @kind object;
  #L35e7f8.  v3:= v5.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L35e7fc.  if v3 == 0 then goto L35e808;
  #L35e800.  v0:= 0I;
  #L35e802.  v5.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.index` @type ^`java.lang.Object` := v0 @kind object;
  #L35e806.  return @kind void;
  #L35e808.  call temp:= `get`(v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e80e.  v3:= temp @kind object;
  #L35e810.  v3:= (`com.jakewharton.rxrelay2.ReplayRelay$Node`) v3 @kind object;
  #L35e814.  if v3 != 0 then goto L35e83a;
  #L35e818.  call temp:= `get`(v2) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e81e.  v3:= temp @kind object;
  #L35e820.  if v3 == 0 then goto L35e826;
  #L35e824.  goto L35e7f8;
  #L35e826.  v5.`com.jakewharton.rxrelay2.ReplayRelay$ReplayDisposable.index` @type ^`java.lang.Object` := v2 @kind object;
  #L35e82a.  v0:= -v0 @kind int;
  #L35e82c.  call temp:= `addAndGet`(v5, v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$ReplayDisposable;.addAndGet:(I)I` @kind virtual;
  #L35e832.  v0:= temp;
  #L35e834.  if v0 != 0 then goto L35e7f8;
  #L35e838.  return @kind void;
  #L35e83a.  v2:= v3.`com.jakewharton.rxrelay2.ReplayRelay$Node.value` @type ^`java.lang.Object` @kind object;
  #L35e83e.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L35e844.  v2:= v3 @kind object;
  #L35e846.  goto L35e7f8;
}
procedure `int` `size`(`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer` v3 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeBoundReplayBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L35e648.  v0:= v3.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$Node` @kind object;
  #L35e64c.  v1:= 0I;
  #L35e64e.  v2:= 2147483647I;
  #L35e654.  if v1 == v2 then goto L35e670;
  #L35e658.  call temp:= `get`(v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e65e.  v0:= temp @kind object;
  #L35e660.  v0:= (`com.jakewharton.rxrelay2.ReplayRelay$Node`) v0 @kind object;
  #L35e664.  if v0 != 0 then goto L35e66a;
  #L35e668.  goto L35e670;
  #L35e66a.  v1:= v1 + 1;
  #L35e66e.  goto L35e64e;
  #L35e670.  return v1;
}
procedure `void` `trim`(`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer` v2 @kind this) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$SizeBoundReplayBuffer;.trim:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L35e858.  v0:= v2.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.size` @type ^`int`;
  #L35e85c.  v1:= v2.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.maxSize` @type ^`int`;
  #L35e860.  if v0 <= v1 then goto L35e880;
  #L35e864.  v0:= v0 + -1;
  #L35e868.  v2.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.size` @type ^`int` := v0;
  #L35e86c.  v0:= v2.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$Node` @kind object;
  #L35e870.  call temp:= `get`(v0) @signature `Lcom/jakewharton/rxrelay2/ReplayRelay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L35e876.  v0:= temp @kind object;
  #L35e878.  v0:= (`com.jakewharton.rxrelay2.ReplayRelay$Node`) v0 @kind object;
  #L35e87c.  v2.`com.jakewharton.rxrelay2.ReplayRelay$SizeBoundReplayBuffer.head` @type ^`com.jakewharton.rxrelay2.ReplayRelay$Node` := v0 @kind object;
  #L35e880.  return @kind void;
}
