record `com.bumptech.glide.disklrucache.StrictLineReader$1` @kind class @AccessFlag  extends `java.io.ByteArrayOutputStream` @kind class {
  `com.bumptech.glide.disklrucache.StrictLineReader` `com.bumptech.glide.disklrucache.StrictLineReader$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.disklrucache.StrictLineReader$1` v0 @kind this, `com.bumptech.glide.disklrucache.StrictLineReader` v1 @kind object, `int` v2 ) @signature `Lcom/bumptech/glide/disklrucache/StrictLineReader$1;.<init>:(Lcom/bumptech/glide/disklrucache/StrictLineReader;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2b3fb8.  v0.`com.bumptech.glide.disklrucache.StrictLineReader$1.this$0` @type ^`com.bumptech.glide.disklrucache.StrictLineReader` := v1 @kind object;
  #L2b3fbc.  call `<init>`(v0, v2) @signature `Ljava/io/ByteArrayOutputStream;.<init>:(I)V` @kind direct;
  #L2b3fc2.  return @kind void;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.disklrucache.StrictLineReader$1` v5 @kind this) @signature `Lcom/bumptech/glide/disklrucache/StrictLineReader$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2b3f34.  v0:= v5.`com.bumptech.glide.disklrucache.StrictLineReader$1.count` @type ^`int`;
  #L2b3f38.  if v0 <= 0 then goto L2b3f5e;
  #L2b3f3c.  v0:= v5.`com.bumptech.glide.disklrucache.StrictLineReader$1.buf` @type ^`byte`[] @kind object;
  #L2b3f40.  v1:= v5.`com.bumptech.glide.disklrucache.StrictLineReader$1.count` @type ^`int`;
  #L2b3f44.  v1:= v1 + -1;
  #L2b3f48.  v0:= v0[v1] @kind byte;
  #L2b3f4c.  v1:= 13I;
  #L2b3f50.  if v0 != v1 then goto L2b3f5e;
  #L2b3f54.  v0:= v5.`com.bumptech.glide.disklrucache.StrictLineReader$1.count` @type ^`int`;
  #L2b3f58.  v0:= v0 + -1;
  #L2b3f5c.  goto L2b3f62;
  #L2b3f5e.  v0:= v5.`com.bumptech.glide.disklrucache.StrictLineReader$1.count` @type ^`int`;
  #L2b3f62.  v1:= new `java.lang.String`;
  #L2b3f66.  v2:= v5.`com.bumptech.glide.disklrucache.StrictLineReader$1.buf` @type ^`byte`[] @kind object;
  #L2b3f6a.  v3:= 0I;
  #L2b3f6c.  v4:= v5.`com.bumptech.glide.disklrucache.StrictLineReader$1.this$0` @type ^`com.bumptech.glide.disklrucache.StrictLineReader` @kind object;
  #L2b3f70.  call temp:= `access$000`(v4) @signature `Lcom/bumptech/glide/disklrucache/StrictLineReader;.access$000:(Lcom/bumptech/glide/disklrucache/StrictLineReader;)Ljava/nio/charset/Charset;` @kind static;
  #L2b3f76.  v4:= temp @kind object;
  #L2b3f78.  call temp:= `name`(v4) @signature `Ljava/nio/charset/Charset;.name:()Ljava/lang/String;` @kind virtual;
  #L2b3f7e.  v4:= temp @kind object;
  #L2b3f80.  call `<init>`(v1, v2, v3, v0, v4) @signature `Ljava/lang/String;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L2b3f86.  return v1 @kind object;
  #L2b3f88.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L2b3f8a.  v1:= new `java.lang.AssertionError`;
  #L2b3f8e.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2b3f94.  throw v1;
  catch `java.io.UnsupportedEncodingException` @[L2b3f62..L2b3f86] goto L2b3f88;
}
