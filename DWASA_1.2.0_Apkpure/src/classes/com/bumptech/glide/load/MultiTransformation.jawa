record `com.bumptech.glide.load.MultiTransformation` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.Transformation` @kind interface {
  `java.lang.String` `com.bumptech.glide.load.MultiTransformation.id` @AccessFlag PRIVATE;
  `java.util.Collection` `com.bumptech.glide.load.MultiTransformation.transformations` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.MultiTransformation` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lcom/bumptech/glide/load/MultiTransformation;.<init>:(Ljava/util/Collection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2b70bc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b70c2.  call temp:= `size`(v3) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2b70c8.  v0:= temp;
  #L2b70ca.  v1:= 1I;
  #L2b70cc.  if v0 < v1 then goto L2b70d6;
  #L2b70d0.  v2.`com.bumptech.glide.load.MultiTransformation.transformations` @type ^`java.util.Collection` := v3 @kind object;
  #L2b70d4.  return @kind void;
  #L2b70d6.  v3:= new `java.lang.IllegalArgumentException`;
  #L2b70da.  v0:= "MultiTransformation must contain at least one Transformation" @kind object;
  #L2b70de.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b70e4.  throw v3;
}
procedure `void` `<init>`(`com.bumptech.glide.load.MultiTransformation` v2 @kind this, `com.bumptech.glide.load.Transformation`[] v3 @kind object) @signature `Lcom/bumptech/glide/load/MultiTransformation;.<init>:([Lcom/bumptech/glide/load/Transformation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2b7080.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b7086.  v0:= length @variable v3;
  #L2b7088.  v1:= 1I;
  #L2b708a.  if v0 < v1 then goto L2b709c;
  #L2b708e.  call temp:= `asList`(v3) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2b7094.  v3:= temp @kind object;
  #L2b7096.  v2.`com.bumptech.glide.load.MultiTransformation.transformations` @type ^`java.util.Collection` := v3 @kind object;
  #L2b709a.  return @kind void;
  #L2b709c.  v3:= new `java.lang.IllegalArgumentException`;
  #L2b70a0.  v0:= "MultiTransformation must contain at least one Transformation" @kind object;
  #L2b70a4.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b70aa.  throw v3;
}
procedure `java.lang.String` `getId`(`com.bumptech.glide.load.MultiTransformation` v3 @kind this) @signature `Lcom/bumptech/glide/load/MultiTransformation;.getId:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2b7018.  v0:= v3.`com.bumptech.glide.load.MultiTransformation.id` @type ^`java.lang.String` @kind object;
  #L2b701c.  if v0 != 0 then goto L2b706a;
  #L2b7020.  v0:= new `java.lang.StringBuilder`;
  #L2b7024.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b702a.  v1:= v3.`com.bumptech.glide.load.MultiTransformation.transformations` @type ^`java.util.Collection` @kind object;
  #L2b702e.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2b7034.  v1:= temp @kind object;
  #L2b7036.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2b703c.  v2:= temp;
  #L2b703e.  if v2 == 0 then goto L2b705e;
  #L2b7042.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2b7048.  v2:= temp @kind object;
  #L2b704a.  v2:= (`com.bumptech.glide.load.Transformation`) v2 @kind object;
  #L2b704e.  call temp:= `getId`(v2) @signature `Lcom/bumptech/glide/load/Transformation;.getId:()Ljava/lang/String;` @kind interface;
  #L2b7054.  v2:= temp @kind object;
  #L2b7056.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b705c.  goto L2b7036;
  #L2b705e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b7064.  v0:= temp @kind object;
  #L2b7066.  v3.`com.bumptech.glide.load.MultiTransformation.id` @type ^`java.lang.String` := v0 @kind object;
  #L2b706a.  v0:= v3.`com.bumptech.glide.load.MultiTransformation.id` @type ^`java.lang.String` @kind object;
  #L2b706e.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.Resource` `transform`(`com.bumptech.glide.load.MultiTransformation` v4 @kind this, `com.bumptech.glide.load.engine.Resource` v5 @kind object, `int` v6 , `int` v7 ) @signature `Lcom/bumptech/glide/load/MultiTransformation;.transform:(Lcom/bumptech/glide/load/engine/Resource;II)Lcom/bumptech/glide/load/engine/Resource;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b6fb0.  v0:= v4.`com.bumptech.glide.load.MultiTransformation.transformations` @type ^`java.util.Collection` @kind object;
  #L2b6fb4.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2b6fba.  v0:= temp @kind object;
  #L2b6fbc.  v1:= v5 @kind object;
  #L2b6fbe.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2b6fc4.  v2:= temp;
  #L2b6fc6.  if v2 == 0 then goto L2b7004;
  #L2b6fca.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2b6fd0.  v2:= temp @kind object;
  #L2b6fd2.  v2:= (`com.bumptech.glide.load.Transformation`) v2 @kind object;
  #L2b6fd6.  call temp:= `transform`(v2, v1, v6, v7) @signature `Lcom/bumptech/glide/load/Transformation;.transform:(Lcom/bumptech/glide/load/engine/Resource;II)Lcom/bumptech/glide/load/engine/Resource;` @kind interface;
  #L2b6fdc.  v2:= temp @kind object;
  #L2b6fde.  if v1 == 0 then goto L2b7000;
  #L2b6fe2.  call temp:= `equals`(v1, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2b6fe8.  v3:= temp;
  #L2b6fea.  if v3 != 0 then goto L2b7000;
  #L2b6fee.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2b6ff4.  v3:= temp;
  #L2b6ff6.  if v3 != 0 then goto L2b7000;
  #L2b6ffa.  call `recycle`(v1) @signature `Lcom/bumptech/glide/load/engine/Resource;.recycle:()V` @kind interface;
  #L2b7000.  v1:= v2 @kind object;
  #L2b7002.  goto L2b6fbe;
  #L2b7004.  return v1 @kind object;
}
