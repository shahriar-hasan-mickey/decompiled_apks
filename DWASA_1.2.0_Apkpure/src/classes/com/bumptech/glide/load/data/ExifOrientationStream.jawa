record `com.bumptech.glide.load.data.ExifOrientationStream` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `byte` `com.bumptech.glide.load.data.ExifOrientationStream.orientation` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.data.ExifOrientationStream.position` @AccessFlag PRIVATE;
}
global `byte`[] `@@com.bumptech.glide.load.data.ExifOrientationStream.EXIF_SEGMENT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.data.ExifOrientationStream.ORIENTATION_POSITION` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.data.ExifOrientationStream.SEGMENT_LENGTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.data.ExifOrientationStream.SEGMENT_START_POSITION` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b7378.  v0:= 29I;
  #L2b737c.  v0:= new `byte`[v0];
  #L2b7380.  goto L2b73a4;
  #L2b7386.  `@@com.bumptech.glide.load.data.ExifOrientationStream.EXIF_SEGMENT` @type ^`byte`[] := v0 @kind object;
  #L2b738a.  v0:= `@@com.bumptech.glide.load.data.ExifOrientationStream.EXIF_SEGMENT` @type ^`byte`[] @kind object;
  #L2b738e.  v0:= length @variable v0;
  #L2b7390.  `@@com.bumptech.glide.load.data.ExifOrientationStream.SEGMENT_LENGTH` @type ^`int` := v0;
  #L2b7394.  v0:= `@@com.bumptech.glide.load.data.ExifOrientationStream.SEGMENT_LENGTH` @type ^`int`;
  #L2b7398.  v0:= v0 + 2;
  #L2b739c.  `@@com.bumptech.glide.load.data.ExifOrientationStream.ORIENTATION_POSITION` @type ^`int` := v0;
  #L2b73a0.  return @kind void;
  #L2b73a2.  
  #L2b73a4.  v0:= (-1I, -31I, 0I, 28I, 69I, 120I, 105I, 102I, 0I, 0I, 77I, 77I, 0I, 0I, 0I, 0I, 0I, 8I, 0I, 1I, 1I, 18I, 0I, 2I, 0I, 0I, 0I, 1I, 0I) @kind object;
  #L2b73c9.  goto L2b7386;
}
procedure `void` `<init>`(`com.bumptech.glide.load.data.ExifOrientationStream` v2 @kind this, `java.io.InputStream` v3 @kind object, `int` v4 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2b73dc.  call `<init>`(v2, v3) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2b73e2.  v3:= -1I;
  #L2b73e4.  if v4 < v3 then goto L2b73f8;
  #L2b73e8.  v3:= 8I;
  #L2b73ec.  if v4 > v3 then goto L2b73f8;
  #L2b73f0.  v3:= (`byte`) v4 @kind i2b;
  #L2b73f2.  v2.`com.bumptech.glide.load.data.ExifOrientationStream.orientation` @type ^`byte` := v3 @kind byte;
  #L2b73f6.  return @kind void;
  #L2b73f8.  v3:= new `java.lang.IllegalArgumentException`;
  #L2b73fc.  v0:= new `java.lang.StringBuilder`;
  #L2b7400.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b7406.  v1:= "Cannot add invalid orientation: " @kind object;
  #L2b740a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b7410.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b7416.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b741c.  v4:= temp @kind object;
  #L2b741e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b7424.  throw v3;
}
procedure `void` `mark`(`com.bumptech.glide.load.data.ExifOrientationStream` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L2b7438.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2b743c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2b7442.  throw v1;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.load.data.ExifOrientationStream` v1 @kind this) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b7260.  v0:= 0I;
  #L2b7262.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.data.ExifOrientationStream` v3 @kind this) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2b7274.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.position` @type ^`int`;
  #L2b7278.  v1:= 2I;
  #L2b727a.  if v0 < v1 then goto L2b72a2;
  #L2b727e.  v2:= `@@com.bumptech.glide.load.data.ExifOrientationStream.ORIENTATION_POSITION` @type ^`int`;
  #L2b7282.  if v0 <= v2 then goto L2b7288;
  #L2b7286.  goto L2b72a2;
  #L2b7288.  if v0 != v2 then goto L2b7292;
  #L2b728c.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.orientation` @type ^`byte` @kind byte;
  #L2b7290.  goto L2b72aa;
  #L2b7292.  v2:= `@@com.bumptech.glide.load.data.ExifOrientationStream.EXIF_SEGMENT` @type ^`byte`[] @kind object;
  #L2b7296.  v0:= v0 - v1 @kind int;
  #L2b7298.  v0:= v2[v0] @kind byte;
  #L2b729c.  v0:= v0 ^& 255;
  #L2b72a0.  goto L2b72aa;
  #L2b72a2.  call temp:= `read`(v3) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L2b72a8.  v0:= temp;
  #L2b72aa.  v1:= -1I;
  #L2b72ac.  if v0 == v1 then goto L2b72bc;
  #L2b72b0.  v1:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.position` @type ^`int`;
  #L2b72b4.  v1:= v1 + 1;
  #L2b72b8.  v3.`com.bumptech.glide.load.data.ExifOrientationStream.position` @type ^`int` := v1;
  #L2b72bc.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.data.ExifOrientationStream` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2b72d0.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.position` @type ^`int`;
  #L2b72d4.  v1:= `@@com.bumptech.glide.load.data.ExifOrientationStream.ORIENTATION_POSITION` @type ^`int`;
  #L2b72d8.  if v0 <= v1 then goto L2b72e6;
  #L2b72dc.  call temp:= `read`(v3, v4, v5, v6) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L2b72e2.  v4:= temp;
  #L2b72e4.  goto L2b7324;
  #L2b72e6.  if v0 != v1 then goto L2b72f6;
  #L2b72ea.  v6:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.orientation` @type ^`byte` @kind byte;
  #L2b72ee.  v4[v5]:= v6 @kind byte;
  #L2b72f2.  v4:= 1I;
  #L2b72f4.  goto L2b7324;
  #L2b72f6.  v2:= 2I;
  #L2b72f8.  if v0 >= v2 then goto L2b7308;
  #L2b72fc.  v2:= v2 - v0 @kind int;
  #L2b72fe.  call temp:= `read`(v3, v4, v5, v2) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L2b7304.  v4:= temp;
  #L2b7306.  goto L2b7324;
  #L2b7308.  v1:= v1 - v0 @kind int;
  #L2b730a.  call temp:= `min`(v1, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2b7310.  v6:= temp;
  #L2b7312.  v0:= `@@com.bumptech.glide.load.data.ExifOrientationStream.EXIF_SEGMENT` @type ^`byte`[] @kind object;
  #L2b7316.  v1:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.position` @type ^`int`;
  #L2b731a.  v1:= v1 - v2 @kind int;
  #L2b731c.  call `arraycopy`(v0, v1, v4, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2b7322.  v4:= v6;
  #L2b7324.  if v4 <= 0 then goto L2b7332;
  #L2b7328.  v5:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.position` @type ^`int`;
  #L2b732c.  v5:= v5 + v4 @kind int;
  #L2b732e.  v3.`com.bumptech.glide.load.data.ExifOrientationStream.position` @type ^`int` := v5;
  #L2b7332.  return v4;
}
procedure `void` `reset`(`com.bumptech.glide.load.data.ExifOrientationStream` v1 @kind this) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b7454.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2b7458.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2b745e.  throw v0;
}
procedure `long` `skip`(`com.bumptech.glide.load.data.ExifOrientationStream` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2b7344.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L2b734a.  v4:= temp @kind wide;
  #L2b734c.  v0:= 0L;
  #L2b7350.  v2:= lcmp(v4, v0);
  #L2b7354.  if v2 <= 0 then goto L2b7366;
  #L2b7358.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.position` @type ^`int`;
  #L2b735c.  v0:= (`long`) v0 @kind i2l;
  #L2b735e.  v0:= v0 + v4 @kind long;
  #L2b7360.  v1:= (`int`) v0 @kind l2i;
  #L2b7362.  v3.`com.bumptech.glide.load.data.ExifOrientationStream.position` @type ^`int` := v1;
  #L2b7366.  return v4 @kind wide;
}
