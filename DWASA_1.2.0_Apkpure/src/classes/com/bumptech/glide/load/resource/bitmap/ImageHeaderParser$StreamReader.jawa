record `com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` @kind class @AccessFlag  {
  `java.io.InputStream` `com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader.is` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c18c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c18ca.  v0.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` := v1 @kind object;
  #L2c18ce.  return @kind void;
}
procedure `int` `getByte`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.getByte:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c17ac.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L2c17b0.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L2c17b6.  v0:= temp;
  #L2c17b8.  return v0;
}
procedure `int` `getUInt16`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` v2 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.getUInt16:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c17cc.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L2c17d0.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L2c17d6.  v0:= temp;
  #L2c17d8.  v0:= v0 ^< 8;
  #L2c17dc.  v1:= 65280I;
  #L2c17e2.  v0:= v0 ^& v1 @kind int;
  #L2c17e4.  v1:= v2.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L2c17e8.  call temp:= `read`(v1) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L2c17ee.  v1:= temp;
  #L2c17f0.  v1:= v1 ^& 255;
  #L2c17f4.  v0:= v0 ^| v1 @kind int;
  #L2c17f6.  return v0;
}
procedure `short` `getUInt8`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.getUInt8:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c18a0.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L2c18a4.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L2c18aa.  v0:= temp;
  #L2c18ac.  v0:= v0 ^& 255;
  #L2c18b0.  v0:= (`short`) v0 @kind i2s;
  #L2c18b2.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` v3 @kind this, `byte`[] v4 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c1808.  v0:= length @variable v4;
  #L2c180a.  if v0 <= 0 then goto L2c1828;
  #L2c180e.  v1:= v3.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L2c1812.  v2:= length @variable v4;
  #L2c1814.  v2:= v2 - v0 @kind int;
  #L2c1816.  call temp:= `read`(v1, v4, v2, v0) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L2c181c.  v1:= temp;
  #L2c181e.  v2:= -1I;
  #L2c1820.  if v1 == v2 then goto L2c1828;
  #L2c1824.  v0:= v0 - v1 @kind int;
  #L2c1826.  goto L2c180a;
  #L2c1828.  v4:= length @variable v4;
  #L2c182a.  v4:= v4 - v0 @kind int;
  #L2c182c.  return v4;
}
procedure `long` `skip`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` v7 @kind this, `long` v8 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2c1840.  v0:= 0L;
  #L2c1844.  v2:= lcmp(v8, v0);
  #L2c1848.  if v2 >= 0 then goto L2c184e;
  #L2c184c.  return v0 @kind wide;
  #L2c184e.  v2:= v8 @kind wide;
  #L2c1850.  v4:= lcmp(v2, v0);
  #L2c1854.  if v4 <= 0 then goto L2c188a;
  #L2c1858.  v4:= v7.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L2c185c.  call temp:= `skip`(v4, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L2c1862.  v4:= temp @kind wide;
  #L2c1864.  v6:= lcmp(v4, v0);
  #L2c1868.  if v6 <= 0 then goto L2c1870;
  #L2c186c.  v2:= v2 - v4 @kind long;
  #L2c186e.  goto L2c1850;
  #L2c1870.  v4:= v7.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L2c1874.  call temp:= `read`(v4) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L2c187a.  v4:= temp;
  #L2c187c.  v5:= -1I;
  #L2c187e.  if v4 != v5 then goto L2c1884;
  #L2c1882.  goto L2c188a;
  #L2c1884.  v4:= 1L;
  #L2c1888.  goto L2c186c;
  #L2c188a.  v8:= v8 - v2 @kind long;
  #L2c188c.  return v8 @kind wide;
}
