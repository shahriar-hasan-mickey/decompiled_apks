record `com.bumptech.glide.load.resource.bitmap.Downsampler` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.bumptech.glide.load.resource.bitmap.BitmapDecoder` @kind interface {
}
global `com.bumptech.glide.load.resource.bitmap.Downsampler` `@@com.bumptech.glide.load.resource.bitmap.Downsampler.AT_LEAST` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.bumptech.glide.load.resource.bitmap.Downsampler` `@@com.bumptech.glide.load.resource.bitmap.Downsampler.AT_MOST` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.resource.bitmap.Downsampler.MARK_POSITION` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.bumptech.glide.load.resource.bitmap.Downsampler` `@@com.bumptech.glide.load.resource.bitmap.Downsampler.NONE` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.Queue` `@@com.bumptech.glide.load.resource.bitmap.Downsampler.OPTIONS_QUEUE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.bumptech.glide.load.resource.bitmap.Downsampler.TAG` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.Set` `@@com.bumptech.glide.load.resource.bitmap.Downsampler.TYPES_THAT_USE_POOL` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2c0e0c.  v0:= `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType.JPEG` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType` @kind object;
  #L2c0e10.  v1:= `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType.PNG_A` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType` @kind object;
  #L2c0e14.  v2:= `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType.PNG` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType` @kind object;
  #L2c0e18.  call temp:= `of`(v0, v1, v2) @signature `Ljava/util/EnumSet;.of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;` @kind static;
  #L2c0e1e.  v0:= temp @kind object;
  #L2c0e20.  `@@com.bumptech.glide.load.resource.bitmap.Downsampler.TYPES_THAT_USE_POOL` @type ^`java.util.Set` := v0 @kind object;
  #L2c0e24.  v0:= 0I;
  #L2c0e26.  call temp:= `createQueue`(v0) @signature `Lcom/bumptech/glide/util/Util;.createQueue:(I)Ljava/util/Queue;` @kind static;
  #L2c0e2c.  v0:= temp @kind object;
  #L2c0e2e.  `@@com.bumptech.glide.load.resource.bitmap.Downsampler.OPTIONS_QUEUE` @type ^`java.util.Queue` := v0 @kind object;
  #L2c0e32.  v0:= new `com.bumptech.glide.load.resource.bitmap.Downsampler$1`;
  #L2c0e36.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler$1;.<init>:()V` @kind direct;
  #L2c0e3c.  `@@com.bumptech.glide.load.resource.bitmap.Downsampler.AT_LEAST` @type ^`com.bumptech.glide.load.resource.bitmap.Downsampler` := v0 @kind object;
  #L2c0e40.  v0:= new `com.bumptech.glide.load.resource.bitmap.Downsampler$2`;
  #L2c0e44.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler$2;.<init>:()V` @kind direct;
  #L2c0e4a.  `@@com.bumptech.glide.load.resource.bitmap.Downsampler.AT_MOST` @type ^`com.bumptech.glide.load.resource.bitmap.Downsampler` := v0 @kind object;
  #L2c0e4e.  v0:= new `com.bumptech.glide.load.resource.bitmap.Downsampler$3`;
  #L2c0e52.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler$3;.<init>:()V` @kind direct;
  #L2c0e58.  `@@com.bumptech.glide.load.resource.bitmap.Downsampler.NONE` @type ^`com.bumptech.glide.load.resource.bitmap.Downsampler` := v0 @kind object;
  #L2c0e5c.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.Downsampler` v0 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c0e70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c0e76.  return @kind void;
}
procedure `android.graphics.Bitmap` `decodeStream`(`com.bumptech.glide.util.MarkEnforcingInputStream` v3 @kind object, `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream` v4 @kind object, `android.graphics.BitmapFactory$Options` v5 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.decodeStream:(Lcom/bumptech/glide/util/MarkEnforcingInputStream;Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2c0970.  v0:= v5.`android.graphics.BitmapFactory$Options.inJustDecodeBounds` @type ^`boolean` @kind boolean;
  #L2c0974.  if v0 == 0 then goto L2c0984;
  #L2c0978.  v4:= 5242880I;
  #L2c097c.  call `mark`(v3, v4) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.mark:(I)V` @kind virtual;
  #L2c0982.  goto L2c098a;
  #L2c0984.  call `fixMarkLimit`(v4) @signature `Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;.fixMarkLimit:()V` @kind virtual;
  #L2c098a.  v4:= 0I;
  #L2c098c.  call temp:= `decodeStream`(v3, v4, v5) @signature `Landroid/graphics/BitmapFactory;.decodeStream:(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;` @kind static;
  #L2c0992.  v4:= temp @kind object;
  #L2c0994.  v0:= v5.`android.graphics.BitmapFactory$Options.inJustDecodeBounds` @type ^`boolean` @kind boolean;
  #L2c0998.  if v0 == 0 then goto L2c09f8;
  #L2c099c.  call `reset`(v3) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.reset:()V` @kind virtual;
  #L2c09a2.  goto L2c09f8;
  #L2c09a4.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L2c09a6.  v0:= 6I;
  #L2c09a8.  v1:= "Downsampler" @kind object;
  #L2c09ac.  call temp:= `isLoggable`(v1, v0) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c09b2.  v0:= temp;
  #L2c09b4.  if v0 == 0 then goto L2c09f8;
  #L2c09b8.  v0:= new `java.lang.StringBuilder`;
  #L2c09bc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c09c2.  v2:= "Exception loading inDecodeBounds=" @kind object;
  #L2c09c6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c09cc.  v2:= v5.`android.graphics.BitmapFactory$Options.inJustDecodeBounds` @type ^`boolean` @kind boolean;
  #L2c09d0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c09d6.  v2:= " sample=" @kind object;
  #L2c09da.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c09e0.  v5:= v5.`android.graphics.BitmapFactory$Options.inSampleSize` @type ^`int`;
  #L2c09e4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c09ea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c09f0.  v5:= temp @kind object;
  #L2c09f2.  call temp:= `e`(v1, v5, v3) @signature `Landroid/util/Log;.e:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c09f8.  return v4 @kind object;
  catch `java.io.IOException` @[L2c0994..L2c09a2] goto L2c09a4;
}
procedure `android.graphics.Bitmap` `downsampleWithSize`(`com.bumptech.glide.load.resource.bitmap.Downsampler` v4 @kind this, `com.bumptech.glide.util.MarkEnforcingInputStream` v5 @kind object, `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream` v6 @kind object, `android.graphics.BitmapFactory$Options` v7 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool` v8 @kind object, `int` v9 , `int` v10 , `int` v11 , `com.bumptech.glide.load.DecodeFormat` v12 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.downsampleWithSize:(Lcom/bumptech/glide/util/MarkEnforcingInputStream;Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;Landroid/graphics/BitmapFactory$Options;Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;IIILcom/bumptech/glide/load/DecodeFormat;)Landroid/graphics/Bitmap;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c0a1c.  call temp:= `getConfig`(v5, v12) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.getConfig:(Ljava/io/InputStream;Lcom/bumptech/glide/load/DecodeFormat;)Landroid/graphics/Bitmap$Config;` @kind static;
  #L2c0a22.  v12:= temp @kind object;
  #L2c0a24.  v7.`android.graphics.BitmapFactory$Options.inSampleSize` @type ^`int` := v11;
  #L2c0a28.  v7.`android.graphics.BitmapFactory$Options.inPreferredConfig` @type ^`android.graphics.Bitmap$Config` := v12 @kind object;
  #L2c0a2c.  v0:= v7.`android.graphics.BitmapFactory$Options.inSampleSize` @type ^`int`;
  #L2c0a30.  v1:= 1I;
  #L2c0a32.  if v0 == v1 then goto L2c0a42;
  #L2c0a36.  v0:= 19I;
  #L2c0a3a.  v1:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2c0a3e.  if v0 > v1 then goto L2c0a92;
  #L2c0a42.  call temp:= `shouldUsePool`(v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.shouldUsePool:(Ljava/io/InputStream;)Z` @kind static;
  #L2c0a48.  v0:= temp;
  #L2c0a4a.  if v0 == 0 then goto L2c0a92;
  #L2c0a4e.  v0:= (`double`) v9 @kind i2d;
  #L2c0a50.  v2:= (`double`) v11 @kind i2d;
  #L2c0a52.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2c0a58.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2c0a5e.  v0:= v0 / v2 @kind double;
  #L2c0a60.  call temp:= `ceil`(v0) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L2c0a66.  v0:= temp @kind wide;
  #L2c0a68.  v9:= (`int`) v0 @kind d2i;
  #L2c0a6a.  v10:= (`double`) v10 @kind i2d;
  #L2c0a6c.  call temp:= `isNaN`(v10) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2c0a72.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2c0a78.  v10:= v10 / v2 @kind double;
  #L2c0a7a.  call temp:= `ceil`(v10) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L2c0a80.  v10:= temp @kind wide;
  #L2c0a82.  v10:= (`int`) v10 @kind d2i;
  #L2c0a84.  call temp:= `getDirty`(v8, v9, v10, v12) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;.getDirty:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @kind interface;
  #L2c0a8a.  v8:= temp @kind object;
  #L2c0a8c.  call `setInBitmap`(v7, v8) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.setInBitmap:(Landroid/graphics/BitmapFactory$Options;Landroid/graphics/Bitmap;)V` @kind static;
  #L2c0a92.  call temp:= `decodeStream`(v5, v6, v7) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.decodeStream:(Lcom/bumptech/glide/util/MarkEnforcingInputStream;Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;` @kind static;
  #L2c0a98.  v5:= temp @kind object;
  #L2c0a9a.  return v5 @kind object;
}
procedure `android.graphics.Bitmap$Config` `getConfig`(`java.io.InputStream` v7 @kind object, `com.bumptech.glide.load.DecodeFormat` v8 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.getConfig:(Ljava/io/InputStream;Lcom/bumptech/glide/load/DecodeFormat;)Landroid/graphics/Bitmap$Config;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2c0aac.  v0:= "Cannot reset the input stream" @kind object;
  #L2c0ab0.  v1:= "Downsampler" @kind object;
  #L2c0ab4.  v2:= `@@com.bumptech.glide.load.DecodeFormat.ALWAYS_ARGB_8888` @type ^`com.bumptech.glide.load.DecodeFormat` @kind object;
  #L2c0ab8.  if v8 == v2 then goto L2c0b90;
  #L2c0abc.  v2:= `@@com.bumptech.glide.load.DecodeFormat.PREFER_ARGB_8888` @type ^`com.bumptech.glide.load.DecodeFormat` @kind object;
  #L2c0ac0.  if v8 == v2 then goto L2c0b90;
  #L2c0ac4.  v2:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2c0ac8.  v3:= 16I;
  #L2c0acc.  if v2 != v3 then goto L2c0ad2;
  #L2c0ad0.  goto L2c0b90;
  #L2c0ad2.  v2:= 0I;
  #L2c0ad4.  v3:= 1024I;
  #L2c0ad8.  call `mark`(v7, v3) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L2c0ade.  v3:= 5I;
  #L2c0ae0.  v4:= new `com.bumptech.glide.load.resource.bitmap.ImageHeaderParser`;
  #L2c0ae4.  call `<init>`(v4, v7) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2c0aea.  call temp:= `hasAlpha`(v4) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.hasAlpha:()Z` @kind virtual;
  #L2c0af0.  v2:= temp;
  #L2c0af2.  call `reset`(v7) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L2c0af8.  goto L2c0b62;
  #L2c0afa.  v7:= Exception @type ^`java.io.IOException` @kind object;
  #L2c0afc.  call temp:= `isLoggable`(v1, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c0b02.  v8:= temp;
  #L2c0b04.  if v8 == 0 then goto L2c0b62;
  #L2c0b08.  call temp:= `w`(v1, v0, v7) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c0b0e.  goto L2c0b62;
  #L2c0b10.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c0b12.  goto L2c0b72;
  #L2c0b14.  v4:= Exception @type ^`java.io.IOException` @kind object;
  #L2c0b16.  call temp:= `isLoggable`(v1, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c0b1c.  v5:= temp;
  #L2c0b1e.  if v5 == 0 then goto L2c0b4a;
  #L2c0b22.  v5:= new `java.lang.StringBuilder`;
  #L2c0b26.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c0b2c.  v6:= "Cannot determine whether the image has alpha or not from header for format " @kind object;
  #L2c0b30.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c0b36.  call temp:= `append`(v5, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c0b3c.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c0b42.  v8:= temp @kind object;
  #L2c0b44.  call temp:= `w`(v1, v8, v4) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c0b4a.  call `reset`(v7) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L2c0b50.  goto L2c0b62;
  #L2c0b52.  v7:= Exception @type ^`java.io.IOException` @kind object;
  #L2c0b54.  call temp:= `isLoggable`(v1, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c0b5a.  v8:= temp;
  #L2c0b5c.  if v8 == 0 then goto L2c0b62;
  #L2c0b60.  goto L2c0b08;
  #L2c0b62.  if v2 == 0 then goto L2c0b6c;
  #L2c0b66.  v7:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L2c0b6a.  goto L2c0b70;
  #L2c0b6c.  v7:= `@@android.graphics.Bitmap$Config.RGB_565` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L2c0b70.  return v7 @kind object;
  #L2c0b72.  call `reset`(v7) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L2c0b78.  goto L2c0b8e;
  #L2c0b7a.  v7:= Exception @type ^`java.io.IOException` @kind object;
  #L2c0b7c.  call temp:= `isLoggable`(v1, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c0b82.  v2:= temp;
  #L2c0b84.  if v2 == 0 then goto L2c0b8e;
  #L2c0b88.  call temp:= `w`(v1, v0, v7) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c0b8e.  throw v8;
  #L2c0b90.  v7:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L2c0b94.  return v7 @kind object;
  catch `java.io.IOException` @[L2c0ae0..L2c0af2] goto L2c0b14;
  catch `java.lang.Throwable` @[L2c0ae0..L2c0af2] goto L2c0b10;
  catch `java.io.IOException` @[L2c0af2..L2c0af8] goto L2c0afa;
  catch `java.lang.Throwable` @[L2c0b16..L2c0b4a] goto L2c0b10;
  catch `java.io.IOException` @[L2c0b4a..L2c0b50] goto L2c0b52;
  catch `java.io.IOException` @[L2c0b72..L2c0b78] goto L2c0b7a;
}
procedure `android.graphics.BitmapFactory$Options` `getDefaultOptions`() @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.getDefaultOptions:()Landroid/graphics/BitmapFactory$Options;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2c0be4.  v0:= constclass @type ^`com.bumptech.glide.load.resource.bitmap.Downsampler` @kind object;
  #L2c0be8.  @monitorenter v0
  #L2c0bea.  v1:= `@@com.bumptech.glide.load.resource.bitmap.Downsampler.OPTIONS_QUEUE` @type ^`java.util.Queue` @kind object;
  #L2c0bee.  @monitorenter v1
  #L2c0bf0.  v2:= `@@com.bumptech.glide.load.resource.bitmap.Downsampler.OPTIONS_QUEUE` @type ^`java.util.Queue` @kind object;
  #L2c0bf4.  call temp:= `poll`(v2) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L2c0bfa.  v2:= temp @kind object;
  #L2c0bfc.  v2:= (`android.graphics.BitmapFactory$Options`) v2 @kind object;
  #L2c0c00.  @monitorexit v1
  #L2c0c02.  if v2 != 0 then goto L2c0c16;
  #L2c0c06.  v2:= new `android.graphics.BitmapFactory$Options`;
  #L2c0c0a.  call `<init>`(v2) @signature `Landroid/graphics/BitmapFactory$Options;.<init>:()V` @kind direct;
  #L2c0c10.  call `resetOptions`(v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.resetOptions:(Landroid/graphics/BitmapFactory$Options;)V` @kind static;
  #L2c0c16.  @monitorexit v0
  #L2c0c18.  return v2 @kind object;
  #L2c0c1a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c0c1c.  @monitorexit v1
  #L2c0c1e.  throw v2;
  #L2c0c20.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c0c22.  @monitorexit v0
  #L2c0c24.  throw v1;
  catch `java.lang.Throwable` @[L2c0bea..L2c0bf0] goto L2c0c20;
  catch `java.lang.Throwable` @[L2c0bf0..L2c0c02] goto L2c0c1a;
  catch `java.lang.Throwable` @[L2c0c06..L2c0c16] goto L2c0c20;
  catch `java.lang.Throwable` @[L2c0c1c..L2c0c1e] goto L2c0c1a;
  catch `java.lang.Throwable` @[L2c0c1e..L2c0c20] goto L2c0c20;
}
procedure `int` `getRoundedSampleSize`(`com.bumptech.glide.load.resource.bitmap.Downsampler` v1 @kind this, `int` v2 , `int` v3 , `int` v4 , `int` v5 , `int` v6 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.getRoundedSampleSize:(IIIII)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2c0d70.  v0:= -2147483648I;
  #L2c0d74.  if v6 != v0 then goto L2c0d7a;
  #L2c0d78.  v6:= v4;
  #L2c0d7a.  if v5 != v0 then goto L2c0d80;
  #L2c0d7e.  v5:= v3;
  #L2c0d80.  v0:= 90I;
  #L2c0d84.  if v2 == v0 then goto L2c0d9c;
  #L2c0d88.  v0:= 270I;
  #L2c0d8c.  if v2 != v0 then goto L2c0d92;
  #L2c0d90.  goto L2c0d9c;
  #L2c0d92.  call temp:= `getSampleSize`(v1, v3, v4, v5, v6) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.getSampleSize:(IIII)I` @kind virtual;
  #L2c0d98.  v2:= temp;
  #L2c0d9a.  goto L2c0da4;
  #L2c0d9c.  call temp:= `getSampleSize`(v1, v4, v3, v5, v6) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.getSampleSize:(IIII)I` @kind virtual;
  #L2c0da2.  v2:= temp;
  #L2c0da4.  if v2 != 0 then goto L2c0dac;
  #L2c0da8.  v2:= 0I;
  #L2c0daa.  goto L2c0db4;
  #L2c0dac.  call temp:= `highestOneBit`(v2) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L2c0db2.  v2:= temp;
  #L2c0db4.  v3:= 1I;
  #L2c0db6.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2c0dbc.  v2:= temp;
  #L2c0dbe.  return v2;
}
procedure `void` `releaseOptions`(`android.graphics.BitmapFactory$Options` v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.releaseOptions:(Landroid/graphics/BitmapFactory$Options;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2c0e88.  call `resetOptions`(v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.resetOptions:(Landroid/graphics/BitmapFactory$Options;)V` @kind static;
  #L2c0e8e.  v0:= `@@com.bumptech.glide.load.resource.bitmap.Downsampler.OPTIONS_QUEUE` @type ^`java.util.Queue` @kind object;
  #L2c0e92.  @monitorenter v0
  #L2c0e94.  v1:= `@@com.bumptech.glide.load.resource.bitmap.Downsampler.OPTIONS_QUEUE` @type ^`java.util.Queue` @kind object;
  #L2c0e98.  call temp:= `offer`(v1, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2c0e9e.  @monitorexit v0
  #L2c0ea0.  return @kind void;
  #L2c0ea2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c0ea4.  @monitorexit v0
  #L2c0ea6.  throw v2;
  catch `java.lang.Throwable` @[L2c0e94..L2c0ea6] goto L2c0ea2;
}
procedure `void` `resetOptions`(`android.graphics.BitmapFactory$Options` v4 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.resetOptions:(Landroid/graphics/BitmapFactory$Options;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c0ec4.  v0:= 0I;
  #L2c0ec6.  v4.`android.graphics.BitmapFactory$Options.inTempStorage` @type ^`byte`[] := v0 @kind object;
  #L2c0eca.  v1:= 0I;
  #L2c0ecc.  v4.`android.graphics.BitmapFactory$Options.inDither` @type ^`boolean` := v1 @kind boolean;
  #L2c0ed0.  v4.`android.graphics.BitmapFactory$Options.inScaled` @type ^`boolean` := v1 @kind boolean;
  #L2c0ed4.  v2:= 1I;
  #L2c0ed6.  v4.`android.graphics.BitmapFactory$Options.inSampleSize` @type ^`int` := v2;
  #L2c0eda.  v4.`android.graphics.BitmapFactory$Options.inPreferredConfig` @type ^`android.graphics.Bitmap$Config` := v0 @kind object;
  #L2c0ede.  v4.`android.graphics.BitmapFactory$Options.inJustDecodeBounds` @type ^`boolean` := v1 @kind boolean;
  #L2c0ee2.  v4.`android.graphics.BitmapFactory$Options.outWidth` @type ^`int` := v1;
  #L2c0ee6.  v4.`android.graphics.BitmapFactory$Options.outHeight` @type ^`int` := v1;
  #L2c0eea.  v4.`android.graphics.BitmapFactory$Options.outMimeType` @type ^`java.lang.String` := v0 @kind object;
  #L2c0eee.  v1:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2c0ef2.  v3:= 11I;
  #L2c0ef6.  if v3 > v1 then goto L2c0f02;
  #L2c0efa.  v4.`android.graphics.BitmapFactory$Options.inBitmap` @type ^`android.graphics.Bitmap` := v0 @kind object;
  #L2c0efe.  v4.`android.graphics.BitmapFactory$Options.inMutable` @type ^`boolean` := v2 @kind boolean;
  #L2c0f02.  return @kind void;
}
procedure `void` `setInBitmap`(`android.graphics.BitmapFactory$Options` v2 @kind object, `android.graphics.Bitmap` v3 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.setInBitmap:(Landroid/graphics/BitmapFactory$Options;Landroid/graphics/Bitmap;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2c0f14.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2c0f18.  v1:= 11I;
  #L2c0f1c.  if v1 > v0 then goto L2c0f24;
  #L2c0f20.  v2.`android.graphics.BitmapFactory$Options.inBitmap` @type ^`android.graphics.Bitmap` := v3 @kind object;
  #L2c0f24.  return @kind void;
}
procedure `boolean` `shouldUsePool`(`java.io.InputStream` v5 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.shouldUsePool:(Ljava/io/InputStream;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2c0c68.  v0:= "Cannot reset the input stream" @kind object;
  #L2c0c6c.  v1:= "Downsampler" @kind object;
  #L2c0c70.  v2:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2c0c74.  v3:= 19I;
  #L2c0c78.  if v3 > v2 then goto L2c0c80;
  #L2c0c7c.  v5:= 1I;
  #L2c0c7e.  return v5;
  #L2c0c80.  v2:= 1024I;
  #L2c0c84.  call `mark`(v5, v2) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L2c0c8a.  v2:= 5I;
  #L2c0c8c.  v3:= new `com.bumptech.glide.load.resource.bitmap.ImageHeaderParser`;
  #L2c0c90.  call `<init>`(v3, v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2c0c96.  call temp:= `getType`(v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.getType:()Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$ImageType;` @kind virtual;
  #L2c0c9c.  v3:= temp @kind object;
  #L2c0c9e.  v4:= `@@com.bumptech.glide.load.resource.bitmap.Downsampler.TYPES_THAT_USE_POOL` @type ^`java.util.Set` @kind object;
  #L2c0ca2.  call temp:= `contains`(v4, v3) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2c0ca8.  v3:= temp;
  #L2c0caa.  call `reset`(v5) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L2c0cb0.  goto L2c0cc6;
  #L2c0cb2.  v5:= Exception @type ^`java.io.IOException` @kind object;
  #L2c0cb4.  call temp:= `isLoggable`(v1, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c0cba.  v2:= temp;
  #L2c0cbc.  if v2 == 0 then goto L2c0cc6;
  #L2c0cc0.  call temp:= `w`(v1, v0, v5) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c0cc6.  return v3;
  #L2c0cc8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c0cca.  goto L2c0d04;
  #L2c0ccc.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L2c0cce.  call temp:= `isLoggable`(v1, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c0cd4.  v4:= temp;
  #L2c0cd6.  if v4 == 0 then goto L2c0ce4;
  #L2c0cda.  v4:= "Cannot determine the image type from header" @kind object;
  #L2c0cde.  call temp:= `w`(v1, v4, v3) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c0ce4.  call `reset`(v5) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L2c0cea.  goto L2c0d00;
  #L2c0cec.  v5:= Exception @type ^`java.io.IOException` @kind object;
  #L2c0cee.  call temp:= `isLoggable`(v1, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c0cf4.  v2:= temp;
  #L2c0cf6.  if v2 == 0 then goto L2c0d00;
  #L2c0cfa.  call temp:= `w`(v1, v0, v5) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c0d00.  v5:= 0I;
  #L2c0d02.  return v5;
  #L2c0d04.  call `reset`(v5) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L2c0d0a.  goto L2c0d20;
  #L2c0d0c.  v5:= Exception @type ^`java.io.IOException` @kind object;
  #L2c0d0e.  call temp:= `isLoggable`(v1, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c0d14.  v2:= temp;
  #L2c0d16.  if v2 == 0 then goto L2c0d20;
  #L2c0d1a.  call temp:= `w`(v1, v0, v5) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c0d20.  throw v3;
  catch `java.io.IOException` @[L2c0c8c..L2c0caa] goto L2c0ccc;
  catch `java.lang.Throwable` @[L2c0c8c..L2c0caa] goto L2c0cc8;
  catch `java.io.IOException` @[L2c0caa..L2c0cb0] goto L2c0cb2;
  catch `java.lang.Throwable` @[L2c0cce..L2c0ce4] goto L2c0cc8;
  catch `java.io.IOException` @[L2c0ce4..L2c0cea] goto L2c0cec;
  catch `java.io.IOException` @[L2c0d04..L2c0d0a] goto L2c0d0c;
}
procedure `android.graphics.Bitmap` `decode`(`com.bumptech.glide.load.resource.bitmap.Downsampler` v22 @kind this, `java.io.InputStream` v23 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool` v24 @kind object, `int` v25 , `int` v26 , `com.bumptech.glide.load.DecodeFormat` v27 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.decode:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;IILcom/bumptech/glide/load/DecodeFormat;)Landroid/graphics/Bitmap;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L2c0710.  v10:= v24 @kind object;
  #L2c0714.  v1:= "Cannot reset the input stream" @kind object;
  #L2c0718.  v2:= "Downsampler" @kind object;
  #L2c071c.  call temp:= `get`() @signature `Lcom/bumptech/glide/util/ByteArrayPool;.get:()Lcom/bumptech/glide/util/ByteArrayPool;` @kind static;
  #L2c0722.  v11:= temp @kind object;
  #L2c0724.  call temp:= `getBytes`(v11) @signature `Lcom/bumptech/glide/util/ByteArrayPool;.getBytes:()[B` @kind virtual;
  #L2c072a.  v12:= temp @kind object;
  #L2c072c.  call temp:= `getBytes`(v11) @signature `Lcom/bumptech/glide/util/ByteArrayPool;.getBytes:()[B` @kind virtual;
  #L2c0732.  v13:= temp @kind object;
  #L2c0734.  call temp:= `getDefaultOptions`() @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.getDefaultOptions:()Landroid/graphics/BitmapFactory$Options;` @kind static;
  #L2c073a.  v14:= temp @kind object;
  #L2c073c.  v3:= new `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream`;
  #L2c0740.  v0:= v23 @kind object;
  #L2c0744.  call `<init>`(v3, v0, v13) @signature `Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;.<init>:(Ljava/io/InputStream;[B)V` @kind direct;
  #L2c074a.  call temp:= `obtain`(v3) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.obtain:(Ljava/io/InputStream;)Lcom/bumptech/glide/util/ExceptionCatchingInputStream;` @kind static;
  #L2c0750.  v15:= temp @kind object;
  #L2c0752.  v4:= new `com.bumptech.glide.util.MarkEnforcingInputStream`;
  #L2c0756.  call `<init>`(v4, v15) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2c075c.  v0:= 5242880I;
  #L2c0760.  call `mark`(v15, v0) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.mark:(I)V` @kind virtual;
  #L2c0766.  v5:= 0I;
  #L2c0768.  v6:= 5I;
  #L2c076a.  v0:= new `com.bumptech.glide.load.resource.bitmap.ImageHeaderParser`;
  #L2c076e.  call `<init>`(v0, v15) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2c0774.  call temp:= `getOrientation`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.getOrientation:()I` @kind virtual;
  #L2c077a.  v7:= temp;
  #L2c077c.  call `reset`(v15) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.reset:()V` @kind virtual;
  #L2c0782.  goto L2c079a;
  #L2c0784.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2c0786.  v8:= v0 @kind object;
  #L2c0788.  call temp:= `isLoggable`(v2, v6) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c078e.  v0:= temp;
  #L2c0790.  if v0 == 0 then goto L2c079a;
  #L2c0794.  call temp:= `w`(v2, v1, v8) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c079a.  v0:= v7;
  #L2c079c.  goto L2c07de;
  #L2c079e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c07a0.  v3:= v0 @kind object;
  #L2c07a2.  goto L2c0892;
  #L2c07a6.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2c07a8.  call temp:= `isLoggable`(v2, v6) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c07ae.  v7:= temp;
  #L2c07b0.  if v7 == 0 then goto L2c07be;
  #L2c07b4.  v7:= "Cannot determine the image orientation from header" @kind object;
  #L2c07b8.  call temp:= `w`(v2, v7, v0) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c07be.  call `reset`(v15) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.reset:()V` @kind virtual;
  #L2c07c4.  goto L2c07dc;
  #L2c07c6.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2c07c8.  v7:= v0 @kind object;
  #L2c07ca.  call temp:= `isLoggable`(v2, v6) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c07d0.  v0:= temp;
  #L2c07d2.  if v0 == 0 then goto L2c07dc;
  #L2c07d6.  call temp:= `w`(v2, v1, v7) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c07dc.  v0:= 0I;
  #L2c07de.  v14.`android.graphics.BitmapFactory$Options.inTempStorage` @type ^`byte`[] := v12 @kind object;
  #L2c07e2.  v9:= v22 @kind object;
  #L2c07e6.  call temp:= `getDimensions`(v9, v4, v3, v14) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.getDimensions:(Lcom/bumptech/glide/util/MarkEnforcingInputStream;Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;Landroid/graphics/BitmapFactory$Options;)[I` @kind virtual;
  #L2c07ec.  v1:= temp @kind object;
  #L2c07ee.  v6:= v1[v5];
  #L2c07f2.  v2:= 1I;
  #L2c07f4.  v7:= v1[v2];
  #L2c07f8.  call temp:= `getExifOrientationDegrees`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/TransformationUtils;.getExifOrientationDegrees:(I)I` @kind static;
  #L2c07fe.  v17:= temp;
  #L2c0800.  v16:= v22 @kind object;
  #L2c0804.  v18:= v6;
  #L2c0808.  v19:= v7;
  #L2c080c.  v20:= v25;
  #L2c0810.  v21:= v26;
  #L2c0814.  call temp:= `getRoundedSampleSize`(v16, v17, v18, v19, v20, v21) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.getRoundedSampleSize:(IIIII)I` @kind direct;
  #L2c081a.  v8:= temp;
  #L2c081c.  v1:= v22 @kind object;
  #L2c0820.  v2:= v4 @kind object;
  #L2c0822.  v4:= v14 @kind object;
  #L2c0824.  v5:= v24 @kind object;
  #L2c0828.  v9:= v27 @kind object;
  #L2c082c.  call temp:= `downsampleWithSize`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.downsampleWithSize:(Lcom/bumptech/glide/util/MarkEnforcingInputStream;Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;Landroid/graphics/BitmapFactory$Options;Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;IIILcom/bumptech/glide/load/DecodeFormat;)Landroid/graphics/Bitmap;` @kind direct;
  #L2c0832.  v1:= temp @kind object;
  #L2c0834.  call temp:= `getException`(v15) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.getException:()Ljava/io/IOException;` @kind virtual;
  #L2c083a.  v2:= temp @kind object;
  #L2c083c.  if v2 != 0 then goto L2c0886;
  #L2c0840.  v2:= 0I;
  #L2c0842.  if v1 == 0 then goto L2c086c;
  #L2c0846.  call temp:= `rotateImageExif`(v1, v10, v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/TransformationUtils;.rotateImageExif:(Landroid/graphics/Bitmap;Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;I)Landroid/graphics/Bitmap;` @kind static;
  #L2c084c.  v2:= temp @kind object;
  #L2c084e.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2c0854.  v0:= temp;
  #L2c0856.  if v0 != 0 then goto L2c086c;
  #L2c085a.  call temp:= `put`(v10, v1) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;.put:(Landroid/graphics/Bitmap;)Z` @kind interface;
  #L2c0860.  v0:= temp;
  #L2c0862.  if v0 != 0 then goto L2c086c;
  #L2c0866.  call `recycle`(v1) @signature `Landroid/graphics/Bitmap;.recycle:()V` @kind virtual;
  #L2c086c.  call temp:= `releaseBytes`(v11, v12) @signature `Lcom/bumptech/glide/util/ByteArrayPool;.releaseBytes:([B)Z` @kind virtual;
  #L2c0872.  call temp:= `releaseBytes`(v11, v13) @signature `Lcom/bumptech/glide/util/ByteArrayPool;.releaseBytes:([B)Z` @kind virtual;
  #L2c0878.  call `release`(v15) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.release:()V` @kind virtual;
  #L2c087e.  call `releaseOptions`(v14) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.releaseOptions:(Landroid/graphics/BitmapFactory$Options;)V` @kind static;
  #L2c0884.  return v2 @kind object;
  #L2c0886.  v0:= new `java.lang.RuntimeException`;
  #L2c088a.  call `<init>`(v0, v2) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L2c0890.  throw v0;
  #L2c0892.  call `reset`(v15) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.reset:()V` @kind virtual;
  #L2c0898.  goto L2c08b0;
  #L2c089a.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2c089c.  v4:= v0 @kind object;
  #L2c089e.  call temp:= `isLoggable`(v2, v6) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c08a4.  v0:= temp;
  #L2c08a6.  if v0 == 0 then goto L2c08b0;
  #L2c08aa.  call temp:= `w`(v2, v1, v4) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2c08b0.  throw v3;
  #L2c08b2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c08b4.  call temp:= `releaseBytes`(v11, v12) @signature `Lcom/bumptech/glide/util/ByteArrayPool;.releaseBytes:([B)Z` @kind virtual;
  #L2c08ba.  call temp:= `releaseBytes`(v11, v13) @signature `Lcom/bumptech/glide/util/ByteArrayPool;.releaseBytes:([B)Z` @kind virtual;
  #L2c08c0.  call `release`(v15) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.release:()V` @kind virtual;
  #L2c08c6.  call `releaseOptions`(v14) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.releaseOptions:(Landroid/graphics/BitmapFactory$Options;)V` @kind static;
  #L2c08cc.  throw v0;
  catch `java.lang.Throwable` @[L2c0760..L2c0766] goto L2c08b2;
  catch `java.io.IOException` @[L2c076a..L2c077c] goto L2c07a6;
  catch `java.lang.Throwable` @[L2c076a..L2c077c] goto L2c079e;
  catch `java.io.IOException` @[L2c077c..L2c0782] goto L2c0784;
  catch `java.lang.Throwable` @[L2c077c..L2c0782] goto L2c08b2;
  catch `java.lang.Throwable` @[L2c0788..L2c079a] goto L2c08b2;
  catch `java.lang.Throwable` @[L2c07a8..L2c07be] goto L2c079e;
  catch `java.io.IOException` @[L2c07be..L2c07c4] goto L2c07c6;
  catch `java.lang.Throwable` @[L2c07be..L2c07c4] goto L2c08b2;
  catch `java.lang.Throwable` @[L2c07ca..L2c086c] goto L2c08b2;
  catch `java.lang.Throwable` @[L2c0886..L2c0892] goto L2c08b2;
  catch `java.io.IOException` @[L2c0892..L2c0898] goto L2c089a;
  catch `java.lang.Throwable` @[L2c0892..L2c0898] goto L2c08b2;
  catch `java.lang.Throwable` @[L2c089e..L2c08b2] goto L2c08b2;
}
procedure `android.graphics.Bitmap` `decode`(`com.bumptech.glide.load.resource.bitmap.Downsampler` v0 @kind this, `java.lang.Object` v1 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool` v2 @kind object, `int` v3 , `int` v4 , `com.bumptech.glide.load.DecodeFormat` v5 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.decode:(Ljava/lang/Object;Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;IILcom/bumptech/glide/load/DecodeFormat;)Landroid/graphics/Bitmap;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2c0950.  v1:= (`java.io.InputStream`) v1 @kind object;
  #L2c0954.  call temp:= `decode`(v0, v1, v2, v3, v4, v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.decode:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;IILcom/bumptech/glide/load/DecodeFormat;)Landroid/graphics/Bitmap;` @kind virtual;
  #L2c095a.  v1:= temp @kind object;
  #L2c095c.  return v1 @kind object;
}
procedure `int`[] `getDimensions`(`com.bumptech.glide.load.resource.bitmap.Downsampler` v2 @kind this, `com.bumptech.glide.util.MarkEnforcingInputStream` v3 @kind object, `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream` v4 @kind object, `android.graphics.BitmapFactory$Options` v5 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.getDimensions:(Lcom/bumptech/glide/util/MarkEnforcingInputStream;Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;Landroid/graphics/BitmapFactory$Options;)[I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c0dd0.  v0:= 1I;
  #L2c0dd2.  v5.`android.graphics.BitmapFactory$Options.inJustDecodeBounds` @type ^`boolean` := v0 @kind boolean;
  #L2c0dd6.  call temp:= `decodeStream`(v3, v4, v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.decodeStream:(Lcom/bumptech/glide/util/MarkEnforcingInputStream;Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;` @kind static;
  #L2c0ddc.  v3:= 0I;
  #L2c0dde.  v5.`android.graphics.BitmapFactory$Options.inJustDecodeBounds` @type ^`boolean` := v3 @kind boolean;
  #L2c0de2.  v4:= 2I;
  #L2c0de4.  v4:= new `int`[v4];
  #L2c0de8.  v1:= v5.`android.graphics.BitmapFactory$Options.outWidth` @type ^`int`;
  #L2c0dec.  v4[v3]:= v1;
  #L2c0df0.  v3:= v5.`android.graphics.BitmapFactory$Options.outHeight` @type ^`int`;
  #L2c0df4.  v4[v0]:= v3;
  #L2c0df8.  return v4 @kind object;
}
procedure `int` `getSampleSize`(`int` v0 , `int` v1 , `int` v2 , `int` v3 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/Downsampler;.getSampleSize:(IIII)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
