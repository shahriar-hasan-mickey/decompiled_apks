record `com.bumptech.glide.load.resource.bitmap.ImageHeaderParser` @kind class @AccessFlag PUBLIC {
  `com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` `com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.BYTES_PER_FORMAT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.EXIF_MAGIC_NUMBER` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.EXIF_SEGMENT_TYPE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.GIF_HEADER` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.INTEL_TIFF_MAGIC_NUMBER` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.JPEG_EXIF_SEGMENT_PREAMBLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.JPEG_EXIF_SEGMENT_PREAMBLE_BYTES` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.MARKER_EOI` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.MOTOROLA_TIFF_MAGIC_NUMBER` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ORIENTATION_TAG_TYPE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.PNG_HEADER` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.SEGMENT_SOS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.SEGMENT_START_ID` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.TAG` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2c1e9c.  v0:= 13I;
  #L2c1ea0.  v0:= new `int`[v0];
  #L2c1ea4.  goto L2c1ecc;
  #L2c1eaa.  `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.BYTES_PER_FORMAT` @type ^`int`[] := v0 @kind object;
  #L2c1eae.  v0:= 0I;
  #L2c1eb0.  v0:= new `byte`[v0];
  #L2c1eb4.  v1:= "Exif\u0000\u0000" @kind object;
  #L2c1eb8.  v2:= "UTF-8" @kind object;
  #L2c1ebc.  call temp:= `getBytes`(v1, v2) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L2c1ec2.  v0:= temp @kind object;
  #L2c1ec4.  `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.JPEG_EXIF_SEGMENT_PREAMBLE_BYTES` @type ^`byte`[] := v0 @kind object;
  #L2c1ec8.  return @kind void;
  #L2c1eca.  
  #L2c1ecc.  v0:= (0I, 1I, 1I, 2I, 4I, 8I, 1I, 1I, 2I, 4I, 8I, 4I, 8I) @kind object;
  #L2c1f07.  goto L2c1eaa;
  catch `java.io.UnsupportedEncodingException` @[L2c1eb4..L2c1ec4] goto L2c1ec4;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser` v1 @kind this, `java.io.InputStream` v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c1f28.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c1f2e.  v0:= new `com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader`;
  #L2c1f32.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2c1f38.  v1.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` := v0 @kind object;
  #L2c1f3c.  return @kind void;
}
procedure `int` `calcTagOffset`(`int` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.calcTagOffset:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L2c1b60.  v0:= v0 + 2;
  #L2c1b64.  v1:= v1 * 12;
  #L2c1b68.  v0:= v0 + v1 @kind int;
  #L2c1b6a.  return v0;
}
procedure `byte`[] `getExifSegment`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser` v10 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.getExifSegment:()[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2c193c.  v0:= v10.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` @kind object;
  #L2c1940.  call temp:= `getUInt8`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.getUInt8:()S` @kind virtual;
  #L2c1946.  v0:= temp;
  #L2c1948.  v1:= 255I;
  #L2c194c.  v2:= 3I;
  #L2c194e.  v3:= 0I;
  #L2c1950.  v4:= "ImageHeaderParser" @kind object;
  #L2c1954.  if v0 == v1 then goto L2c198e;
  #L2c1958.  call temp:= `isLoggable`(v4, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c195e.  v1:= temp;
  #L2c1960.  if v1 == 0 then goto L2c198c;
  #L2c1964.  v1:= new `java.lang.StringBuilder`;
  #L2c1968.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c196e.  v2:= "Unknown segmentId=" @kind object;
  #L2c1972.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1978.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c197e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1984.  v0:= temp @kind object;
  #L2c1986.  call temp:= `d`(v4, v0) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c198c.  return v3 @kind object;
  #L2c198e.  v0:= v10.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` @kind object;
  #L2c1992.  call temp:= `getUInt8`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.getUInt8:()S` @kind virtual;
  #L2c1998.  v0:= temp;
  #L2c199a.  v1:= 218I;
  #L2c199e.  if v0 != v1 then goto L2c19a4;
  #L2c19a2.  return v3 @kind object;
  #L2c19a4.  v1:= 217I;
  #L2c19a8.  if v0 != v1 then goto L2c19c4;
  #L2c19ac.  call temp:= `isLoggable`(v4, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c19b2.  v0:= temp;
  #L2c19b4.  if v0 == 0 then goto L2c19c2;
  #L2c19b8.  v0:= "Found MARKER_EOI in exif segment" @kind object;
  #L2c19bc.  call temp:= `d`(v4, v0) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c19c2.  return v3 @kind object;
  #L2c19c4.  v1:= v10.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` @kind object;
  #L2c19c8.  call temp:= `getUInt16`(v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.getUInt16:()I` @kind virtual;
  #L2c19ce.  v1:= temp;
  #L2c19d0.  v1:= v1 + -2;
  #L2c19d4.  v5:= 225I;
  #L2c19d8.  if v0 == v5 then goto L2c1a48;
  #L2c19dc.  v5:= v10.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` @kind object;
  #L2c19e0.  v6:= (`long`) v1 @kind i2l;
  #L2c19e2.  call temp:= `skip`(v5, v6) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.skip:(J)J` @kind virtual;
  #L2c19e8.  v8:= temp @kind wide;
  #L2c19ea.  v5:= lcmp(v8, v6);
  #L2c19ee.  if v5 == 0 then goto L2c193c;
  #L2c19f2.  call temp:= `isLoggable`(v4, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c19f8.  v2:= temp;
  #L2c19fa.  if v2 == 0 then goto L2c1a46;
  #L2c19fe.  v2:= new `java.lang.StringBuilder`;
  #L2c1a02.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1a08.  v5:= "Unable to skip enough data, type: " @kind object;
  #L2c1a0c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1a12.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1a18.  v0:= ", wanted to skip: " @kind object;
  #L2c1a1c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1a22.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1a28.  v0:= ", but actually skipped: " @kind object;
  #L2c1a2c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1a32.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1a38.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1a3e.  v0:= temp @kind object;
  #L2c1a40.  call temp:= `d`(v4, v0) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c1a46.  return v3 @kind object;
  #L2c1a48.  v5:= new `byte`[v1];
  #L2c1a4c.  v6:= v10.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` @kind object;
  #L2c1a50.  call temp:= `read`(v6, v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.read:([B)I` @kind virtual;
  #L2c1a56.  v6:= temp;
  #L2c1a58.  if v6 == v1 then goto L2c1ab2;
  #L2c1a5c.  call temp:= `isLoggable`(v4, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c1a62.  v2:= temp;
  #L2c1a64.  if v2 == 0 then goto L2c1ab0;
  #L2c1a68.  v2:= new `java.lang.StringBuilder`;
  #L2c1a6c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1a72.  v5:= "Unable to read segment data, type: " @kind object;
  #L2c1a76.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1a7c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1a82.  v0:= ", length: " @kind object;
  #L2c1a86.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1a8c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1a92.  v0:= ", actually read: " @kind object;
  #L2c1a96.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1a9c.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1aa2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1aa8.  v0:= temp @kind object;
  #L2c1aaa.  call temp:= `d`(v4, v0) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c1ab0.  return v3 @kind object;
  #L2c1ab2.  return v5 @kind object;
}
procedure `boolean` `handles`(`int` v2 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.handles:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2c18e0.  v0:= 65496I;
  #L2c18e6.  v1:= v2 ^& v0 @kind int;
  #L2c18ea.  if v1 == v0 then goto L2c1904;
  #L2c18ee.  v0:= 19789I;
  #L2c18f2.  if v2 == v0 then goto L2c1904;
  #L2c18f6.  v0:= 18761I;
  #L2c18fa.  if v2 != v0 then goto L2c1900;
  #L2c18fe.  goto L2c1904;
  #L2c1900.  v2:= 0I;
  #L2c1902.  goto L2c1906;
  #L2c1904.  v2:= 1I;
  #L2c1906.  return v2;
}
procedure `int` `parseExifSegment`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader` v12 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.parseExifSegment:(Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2c1c08.  v0:= 6I;
  #L2c1c0a.  call temp:= `getInt16`(v12, v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;.getInt16:(I)S` @kind virtual;
  #L2c1c10.  v1:= temp;
  #L2c1c12.  v2:= 3I;
  #L2c1c14.  v3:= "ImageHeaderParser" @kind object;
  #L2c1c18.  v4:= 19789I;
  #L2c1c1c.  if v1 != v4 then goto L2c1c26;
  #L2c1c20.  v1:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L2c1c24.  goto L2c1c6c;
  #L2c1c26.  v4:= 18761I;
  #L2c1c2a.  if v1 != v4 then goto L2c1c34;
  #L2c1c2e.  v1:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L2c1c32.  goto L2c1c6c;
  #L2c1c34.  call temp:= `isLoggable`(v3, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c1c3a.  v4:= temp;
  #L2c1c3c.  if v4 == 0 then goto L2c1c68;
  #L2c1c40.  v4:= new `java.lang.StringBuilder`;
  #L2c1c44.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1c4a.  v5:= "Unknown endianness = " @kind object;
  #L2c1c4e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1c54.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1c5a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1c60.  v1:= temp @kind object;
  #L2c1c62.  call temp:= `d`(v3, v1) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c1c68.  v1:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L2c1c6c.  call `order`(v12, v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;.order:(Ljava/nio/ByteOrder;)V` @kind virtual;
  #L2c1c72.  v1:= 10I;
  #L2c1c76.  call temp:= `getInt32`(v12, v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;.getInt32:(I)I` @kind virtual;
  #L2c1c7c.  v1:= temp;
  #L2c1c7e.  v1:= v1 + v0 @kind int;
  #L2c1c80.  call temp:= `getInt16`(v12, v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;.getInt16:(I)S` @kind virtual;
  #L2c1c86.  v0:= temp;
  #L2c1c88.  v4:= 0I;
  #L2c1c8a.  if v4 >= v0 then goto L2c1e86;
  #L2c1c8e.  call temp:= `calcTagOffset`(v1, v4) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.calcTagOffset:(II)I` @kind static;
  #L2c1c94.  v5:= temp;
  #L2c1c96.  call temp:= `getInt16`(v12, v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;.getInt16:(I)S` @kind virtual;
  #L2c1c9c.  v6:= temp;
  #L2c1c9e.  v7:= 274I;
  #L2c1ca2.  if v6 == v7 then goto L2c1caa;
  #L2c1ca6.  goto L2c1e7e;
  #L2c1caa.  v7:= v5 + 2;
  #L2c1cae.  call temp:= `getInt16`(v12, v7) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;.getInt16:(I)S` @kind virtual;
  #L2c1cb4.  v7:= temp;
  #L2c1cb6.  v8:= 1I;
  #L2c1cb8.  if v7 < v8 then goto L2c1e4a;
  #L2c1cbc.  v8:= 12I;
  #L2c1cc0.  if v7 <= v8 then goto L2c1cc8;
  #L2c1cc4.  goto L2c1e4a;
  #L2c1cc8.  v8:= v5 + 4;
  #L2c1ccc.  call temp:= `getInt32`(v12, v8) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;.getInt32:(I)I` @kind virtual;
  #L2c1cd2.  v8:= temp;
  #L2c1cd4.  if v8 >= 0 then goto L2c1cf2;
  #L2c1cd8.  call temp:= `isLoggable`(v3, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c1cde.  v5:= temp;
  #L2c1ce0.  if v5 == 0 then goto L2c1e7e;
  #L2c1ce4.  v5:= "Negative tiff component count" @kind object;
  #L2c1ce8.  call temp:= `d`(v3, v5) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c1cee.  goto L2c1e7e;
  #L2c1cf2.  call temp:= `isLoggable`(v3, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c1cf8.  v9:= temp;
  #L2c1cfa.  v10:= " tagType=" @kind object;
  #L2c1cfe.  if v9 == 0 then goto L2c1d56;
  #L2c1d02.  v9:= new `java.lang.StringBuilder`;
  #L2c1d06.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1d0c.  v11:= "Got tagIndex=" @kind object;
  #L2c1d10.  call temp:= `append`(v9, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1d16.  call temp:= `append`(v9, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1d1c.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1d22.  call temp:= `append`(v9, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1d28.  v11:= " formatCode=" @kind object;
  #L2c1d2c.  call temp:= `append`(v9, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1d32.  call temp:= `append`(v9, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1d38.  v11:= " componentCount=" @kind object;
  #L2c1d3c.  call temp:= `append`(v9, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1d42.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1d48.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1d4e.  v9:= temp @kind object;
  #L2c1d50.  call temp:= `d`(v3, v9) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c1d56.  v9:= `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.BYTES_PER_FORMAT` @type ^`int`[] @kind object;
  #L2c1d5a.  v9:= v9[v7];
  #L2c1d5e.  v8:= v8 + v9 @kind int;
  #L2c1d60.  v9:= 4I;
  #L2c1d62.  if v8 <= v9 then goto L2c1d9e;
  #L2c1d66.  call temp:= `isLoggable`(v3, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c1d6c.  v5:= temp;
  #L2c1d6e.  if v5 == 0 then goto L2c1e7e;
  #L2c1d72.  v5:= new `java.lang.StringBuilder`;
  #L2c1d76.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1d7c.  v6:= "Got byte count > 4, not orientation, continuing, formatCode=" @kind object;
  #L2c1d80.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1d86.  call temp:= `append`(v5, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1d8c.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1d92.  v5:= temp @kind object;
  #L2c1d94.  call temp:= `d`(v3, v5) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c1d9a.  goto L2c1e7e;
  #L2c1d9e.  v5:= v5 + 8;
  #L2c1da2.  if v5 < 0 then goto L2c1e08;
  #L2c1da6.  call temp:= `length`(v12) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;.length:()I` @kind virtual;
  #L2c1dac.  v7:= temp;
  #L2c1dae.  if v5 <= v7 then goto L2c1db4;
  #L2c1db2.  goto L2c1e08;
  #L2c1db4.  if v8 < 0 then goto L2c1dd2;
  #L2c1db8.  v8:= v8 + v5 @kind int;
  #L2c1dba.  call temp:= `length`(v12) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;.length:()I` @kind virtual;
  #L2c1dc0.  v7:= temp;
  #L2c1dc2.  if v8 <= v7 then goto L2c1dc8;
  #L2c1dc6.  goto L2c1dd2;
  #L2c1dc8.  call temp:= `getInt16`(v12, v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;.getInt16:(I)S` @kind virtual;
  #L2c1dce.  v12:= temp;
  #L2c1dd0.  return v12;
  #L2c1dd2.  call temp:= `isLoggable`(v3, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c1dd8.  v5:= temp;
  #L2c1dda.  if v5 == 0 then goto L2c1e7e;
  #L2c1dde.  v5:= new `java.lang.StringBuilder`;
  #L2c1de2.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1de8.  v7:= "Illegal number of bytes for TI tag data tagType=" @kind object;
  #L2c1dec.  call temp:= `append`(v5, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1df2.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1df8.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1dfe.  v5:= temp @kind object;
  #L2c1e00.  call temp:= `d`(v3, v5) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c1e06.  goto L2c1e7e;
  #L2c1e08.  call temp:= `isLoggable`(v3, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c1e0e.  v7:= temp;
  #L2c1e10.  if v7 == 0 then goto L2c1e7e;
  #L2c1e14.  v7:= new `java.lang.StringBuilder`;
  #L2c1e18.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1e1e.  v8:= "Illegal tagValueOffset=" @kind object;
  #L2c1e22.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1e28.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1e2e.  call temp:= `append`(v7, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1e34.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1e3a.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1e40.  v5:= temp @kind object;
  #L2c1e42.  call temp:= `d`(v3, v5) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c1e48.  goto L2c1e7e;
  #L2c1e4a.  call temp:= `isLoggable`(v3, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2c1e50.  v5:= temp;
  #L2c1e52.  if v5 == 0 then goto L2c1e7e;
  #L2c1e56.  v5:= new `java.lang.StringBuilder`;
  #L2c1e5a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1e60.  v6:= "Got invalid format code=" @kind object;
  #L2c1e64.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1e6a.  call temp:= `append`(v5, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1e70.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1e76.  v5:= temp @kind object;
  #L2c1e78.  call temp:= `d`(v3, v5) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c1e7e.  v4:= v4 + 1;
  #L2c1e82.  goto L2c1c8a;
  #L2c1e86.  v12:= -1I;
  #L2c1e88.  return v12;
}
procedure `int` `getOrientation`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser` v7 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.getOrientation:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2c1b7c.  v0:= v7.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` @kind object;
  #L2c1b80.  call temp:= `getUInt16`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.getUInt16:()I` @kind virtual;
  #L2c1b86.  v0:= temp;
  #L2c1b88.  call temp:= `handles`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.handles:(I)Z` @kind static;
  #L2c1b8e.  v0:= temp;
  #L2c1b90.  v1:= -1I;
  #L2c1b92.  if v0 != 0 then goto L2c1b98;
  #L2c1b96.  return v1;
  #L2c1b98.  call temp:= `getExifSegment`(v7) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.getExifSegment:()[B` @kind direct;
  #L2c1b9e.  v0:= temp @kind object;
  #L2c1ba0.  v2:= 0I;
  #L2c1ba2.  if v0 == 0 then goto L2c1bb6;
  #L2c1ba6.  v3:= length @variable v0;
  #L2c1ba8.  v4:= `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.JPEG_EXIF_SEGMENT_PREAMBLE_BYTES` @type ^`byte`[] @kind object;
  #L2c1bac.  v4:= length @variable v4;
  #L2c1bae.  if v3 <= v4 then goto L2c1bb6;
  #L2c1bb2.  v3:= 1I;
  #L2c1bb4.  goto L2c1bb8;
  #L2c1bb6.  v3:= 0I;
  #L2c1bb8.  if v3 == 0 then goto L2c1bdc;
  #L2c1bbc.  v4:= 0I;
  #L2c1bbe.  v5:= `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.JPEG_EXIF_SEGMENT_PREAMBLE_BYTES` @type ^`byte`[] @kind object;
  #L2c1bc2.  v6:= length @variable v5;
  #L2c1bc4.  if v4 >= v6 then goto L2c1bdc;
  #L2c1bc8.  v6:= v0[v4] @kind byte;
  #L2c1bcc.  v5:= v5[v4] @kind byte;
  #L2c1bd0.  if v6 == v5 then goto L2c1bd6;
  #L2c1bd4.  goto L2c1bde;
  #L2c1bd6.  v4:= v4 + 1;
  #L2c1bda.  goto L2c1bbe;
  #L2c1bdc.  v2:= v3;
  #L2c1bde.  if v2 == 0 then goto L2c1bf6;
  #L2c1be2.  v1:= new `com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader`;
  #L2c1be6.  call `<init>`(v1, v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;.<init>:([B)V` @kind direct;
  #L2c1bec.  call temp:= `parseExifSegment`(v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.parseExifSegment:(Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$RandomAccessReader;)I` @kind static;
  #L2c1bf2.  v0:= temp;
  #L2c1bf4.  return v0;
  #L2c1bf6.  return v1;
}
procedure `com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType` `getType`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.getType:()Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c1ac4.  v0:= v3.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` @kind object;
  #L2c1ac8.  call temp:= `getUInt16`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.getUInt16:()I` @kind virtual;
  #L2c1ace.  v0:= temp;
  #L2c1ad0.  v1:= 65496I;
  #L2c1ad6.  if v0 != v1 then goto L2c1ae0;
  #L2c1ada.  v0:= `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType.JPEG` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType` @kind object;
  #L2c1ade.  return v0 @kind object;
  #L2c1ae0.  v0:= v0 ^< 16;
  #L2c1ae4.  v1:= -65536I;
  #L2c1ae8.  v0:= v0 ^& v1 @kind int;
  #L2c1aea.  v1:= v3.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` @kind object;
  #L2c1aee.  call temp:= `getUInt16`(v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.getUInt16:()I` @kind virtual;
  #L2c1af4.  v1:= temp;
  #L2c1af6.  v2:= 65535I;
  #L2c1afc.  v1:= v1 ^& v2 @kind int;
  #L2c1afe.  v0:= v0 ^| v1 @kind int;
  #L2c1b00.  v1:= -1991225785I;
  #L2c1b06.  if v0 != v1 then goto L2c1b36;
  #L2c1b0a.  v0:= v3.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` @kind object;
  #L2c1b0e.  v1:= 21L;
  #L2c1b12.  call temp:= `skip`(v0, v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.skip:(J)J` @kind virtual;
  #L2c1b18.  v0:= v3.`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.streamReader` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader` @kind object;
  #L2c1b1c.  call temp:= `getByte`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$StreamReader;.getByte:()I` @kind virtual;
  #L2c1b22.  v0:= temp;
  #L2c1b24.  v1:= 3I;
  #L2c1b26.  if v0 < v1 then goto L2c1b30;
  #L2c1b2a.  v0:= `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType.PNG_A` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType` @kind object;
  #L2c1b2e.  goto L2c1b34;
  #L2c1b30.  v0:= `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType.PNG` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType` @kind object;
  #L2c1b34.  return v0 @kind object;
  #L2c1b36.  v0:= v0 ^> 8;
  #L2c1b3a.  v1:= 4671814I;
  #L2c1b40.  if v0 != v1 then goto L2c1b4a;
  #L2c1b44.  v0:= `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType.GIF` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType` @kind object;
  #L2c1b48.  return v0 @kind object;
  #L2c1b4a.  v0:= `@@com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType` @kind object;
  #L2c1b4e.  return v0 @kind object;
}
procedure `boolean` `hasAlpha`(`com.bumptech.glide.load.resource.bitmap.ImageHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.hasAlpha:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c1918.  call temp:= `getType`(v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser;.getType:()Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$ImageType;` @kind virtual;
  #L2c191e.  v0:= temp @kind object;
  #L2c1920.  call temp:= `hasAlpha`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/ImageHeaderParser$ImageType;.hasAlpha:()Z` @kind virtual;
  #L2c1926.  v0:= temp;
  #L2c1928.  return v0;
}
