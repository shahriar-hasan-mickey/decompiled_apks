record `com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.resource.drawable.GlideDrawable` @kind class {
  `boolean` `com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.applyGravity` @AccessFlag PRIVATE;
  `android.graphics.Rect` `com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.destRect` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.height` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.mutated` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` `com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.width` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v1 @kind this, `android.content.res.Resources` v2 @kind object, `android.graphics.Bitmap` v3 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.<init>:(Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c1420.  v0:= new `com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState`;
  #L2c1424.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable$BitmapState;.<init>:(Landroid/graphics/Bitmap;)V` @kind direct;
  #L2c142a.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.<init>:(Landroid/content/res/Resources;Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable$BitmapState;)V` @kind direct;
  #L2c1430.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v1 @kind this, `android.content.res.Resources` v2 @kind object, `com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` v3 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.<init>:(Landroid/content/res/Resources;Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable$BitmapState;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2c1444.  call `<init>`(v1) @signature `Lcom/bumptech/glide/load/resource/drawable/GlideDrawable;.<init>:()V` @kind direct;
  #L2c144a.  v0:= new `android.graphics.Rect`;
  #L2c144e.  call `<init>`(v0) @signature `Landroid/graphics/Rect;.<init>:()V` @kind direct;
  #L2c1454.  v1.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.destRect` @type ^`android.graphics.Rect` := v0 @kind object;
  #L2c1458.  if v3 == 0 then goto L2c14a4;
  #L2c145c.  v1.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` := v3 @kind object;
  #L2c1460.  if v2 == 0 then goto L2c147e;
  #L2c1464.  call temp:= `getDisplayMetrics`(v2) @signature `Landroid/content/res/Resources;.getDisplayMetrics:()Landroid/util/DisplayMetrics;` @kind virtual;
  #L2c146a.  v2:= temp @kind object;
  #L2c146c.  v2:= v2.`android.util.DisplayMetrics.densityDpi` @type ^`int`;
  #L2c1470.  if v2 != 0 then goto L2c1478;
  #L2c1474.  v2:= 160I;
  #L2c1478.  v3.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState.targetDensity` @type ^`int` := v2;
  #L2c147c.  goto L2c1482;
  #L2c147e.  v2:= v3.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState.targetDensity` @type ^`int`;
  #L2c1482.  v0:= v3.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState.bitmap` @type ^`android.graphics.Bitmap` @kind object;
  #L2c1486.  call temp:= `getScaledWidth`(v0, v2) @signature `Landroid/graphics/Bitmap;.getScaledWidth:(I)I` @kind virtual;
  #L2c148c.  v0:= temp;
  #L2c148e.  v1.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.width` @type ^`int` := v0;
  #L2c1492.  v3:= v3.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState.bitmap` @type ^`android.graphics.Bitmap` @kind object;
  #L2c1496.  call temp:= `getScaledHeight`(v3, v2) @signature `Landroid/graphics/Bitmap;.getScaledHeight:(I)I` @kind virtual;
  #L2c149c.  v2:= temp;
  #L2c149e.  v1.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.height` @type ^`int` := v2;
  #L2c14a2.  return @kind void;
  #L2c14a4.  v2:= new `java.lang.NullPointerException`;
  #L2c14a8.  v3:= "BitmapState must not be null" @kind object;
  #L2c14ac.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c14b2.  throw v2;
}
procedure `void` `draw`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v5 @kind this, `android.graphics.Canvas` v6 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.draw:(Landroid/graphics/Canvas;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2c14c4.  v0:= v5.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.applyGravity` @type ^`boolean` @kind boolean;
  #L2c14c8.  if v0 == 0 then goto L2c14f0;
  #L2c14cc.  v0:= 119I;
  #L2c14d0.  v1:= v5.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.width` @type ^`int`;
  #L2c14d4.  v2:= v5.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.height` @type ^`int`;
  #L2c14d8.  call temp:= `getBounds`(v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.getBounds:()Landroid/graphics/Rect;` @kind virtual;
  #L2c14de.  v3:= temp @kind object;
  #L2c14e0.  v4:= v5.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.destRect` @type ^`android.graphics.Rect` @kind object;
  #L2c14e4.  call `apply`(v0, v1, v2, v3, v4) @signature `Landroid/view/Gravity;.apply:(IIILandroid/graphics/Rect;Landroid/graphics/Rect;)V` @kind static;
  #L2c14ea.  v0:= 0I;
  #L2c14ec.  v5.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.applyGravity` @type ^`boolean` := v0 @kind boolean;
  #L2c14f0.  v0:= v5.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` @kind object;
  #L2c14f4.  v0:= v0.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState.bitmap` @type ^`android.graphics.Bitmap` @kind object;
  #L2c14f8.  v1:= 0I;
  #L2c14fa.  v2:= v5.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.destRect` @type ^`android.graphics.Rect` @kind object;
  #L2c14fe.  v3:= v5.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` @kind object;
  #L2c1502.  v3:= v3.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState.paint` @type ^`android.graphics.Paint` @kind object;
  #L2c1506.  call `drawBitmap`(v6, v0, v1, v2, v3) @signature `Landroid/graphics/Canvas;.drawBitmap:(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Paint;)V` @kind virtual;
  #L2c150c.  return @kind void;
}
procedure `android.graphics.Bitmap` `getBitmap`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.getBitmap:()Landroid/graphics/Bitmap;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c1308.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` @kind object;
  #L2c130c.  v0:= v0.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState.bitmap` @type ^`android.graphics.Bitmap` @kind object;
  #L2c1310.  return v0 @kind object;
}
procedure `android.graphics.drawable.Drawable$ConstantState` `getConstantState`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.getConstantState:()Landroid/graphics/drawable/Drawable$ConstantState;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c1364.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` @kind object;
  #L2c1368.  return v0 @kind object;
}
procedure `int` `getIntrinsicHeight`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.getIntrinsicHeight:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c13a4.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.height` @type ^`int`;
  #L2c13a8.  return v0;
}
procedure `int` `getIntrinsicWidth`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.getIntrinsicWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c13bc.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.width` @type ^`int`;
  #L2c13c0.  return v0;
}
procedure `int` `getOpacity`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v2 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.getOpacity:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c13d4.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` @kind object;
  #L2c13d8.  v0:= v0.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState.bitmap` @type ^`android.graphics.Bitmap` @kind object;
  #L2c13dc.  if v0 == 0 then goto L2c140a;
  #L2c13e0.  call temp:= `hasAlpha`(v0) @signature `Landroid/graphics/Bitmap;.hasAlpha:()Z` @kind virtual;
  #L2c13e6.  v0:= temp;
  #L2c13e8.  if v0 != 0 then goto L2c140a;
  #L2c13ec.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` @kind object;
  #L2c13f0.  v0:= v0.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState.paint` @type ^`android.graphics.Paint` @kind object;
  #L2c13f4.  call temp:= `getAlpha`(v0) @signature `Landroid/graphics/Paint;.getAlpha:()I` @kind virtual;
  #L2c13fa.  v0:= temp;
  #L2c13fc.  v1:= 255I;
  #L2c1400.  if v0 >= v1 then goto L2c1406;
  #L2c1404.  goto L2c140a;
  #L2c1406.  v0:= -1I;
  #L2c1408.  goto L2c140c;
  #L2c140a.  v0:= -3I;
  #L2c140c.  return v0;
}
procedure `boolean` `isAnimated`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.isAnimated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c137c.  v0:= 0I;
  #L2c137e.  return v0;
}
procedure `boolean` `isRunning`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.isRunning:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c1390.  v0:= 0I;
  #L2c1392.  return v0;
}
procedure `android.graphics.drawable.Drawable` `mutate`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v2 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.mutate:()Landroid/graphics/drawable/Drawable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c1324.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.mutated` @type ^`boolean` @kind boolean;
  #L2c1328.  if v0 != 0 then goto L2c1350;
  #L2c132c.  call temp:= `mutate`(v2) @signature `Lcom/bumptech/glide/load/resource/drawable/GlideDrawable;.mutate:()Landroid/graphics/drawable/Drawable;` @kind super;
  #L2c1332.  v0:= temp @kind object;
  #L2c1334.  if v0 != v2 then goto L2c1350;
  #L2c1338.  v0:= new `com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState`;
  #L2c133c.  v1:= v2.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` @kind object;
  #L2c1340.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable$BitmapState;.<init>:(Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable$BitmapState;)V` @kind direct;
  #L2c1346.  v2.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` := v0 @kind object;
  #L2c134a.  v0:= 1I;
  #L2c134c.  v2.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.mutated` @type ^`boolean` := v0 @kind boolean;
  #L2c1350.  return v2 @kind object;
}
procedure `void` `onBoundsChange`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v0 @kind this, `android.graphics.Rect` v1 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.onBoundsChange:(Landroid/graphics/Rect;)V` @AccessFlag PROTECTED {
    temp;

  #L2c1520.  call `onBoundsChange`(v0, v1) @signature `Lcom/bumptech/glide/load/resource/drawable/GlideDrawable;.onBoundsChange:(Landroid/graphics/Rect;)V` @kind super;
  #L2c1526.  v1:= 1I;
  #L2c1528.  v0.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.applyGravity` @type ^`boolean` := v1 @kind boolean;
  #L2c152c.  return @kind void;
}
procedure `void` `setAlpha`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.setAlpha:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c1540.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` @kind object;
  #L2c1544.  v0:= v0.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState.paint` @type ^`android.graphics.Paint` @kind object;
  #L2c1548.  call temp:= `getAlpha`(v0) @signature `Landroid/graphics/Paint;.getAlpha:()I` @kind virtual;
  #L2c154e.  v0:= temp;
  #L2c1550.  if v0 == v2 then goto L2c1564;
  #L2c1554.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` @kind object;
  #L2c1558.  call `setAlpha`(v0, v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable$BitmapState;.setAlpha:(I)V` @kind virtual;
  #L2c155e.  call `invalidateSelf`(v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.invalidateSelf:()V` @kind virtual;
  #L2c1564.  return @kind void;
}
procedure `void` `setColorFilter`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v1 @kind this, `android.graphics.ColorFilter` v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.setColorFilter:(Landroid/graphics/ColorFilter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c1578.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.state` @type ^`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable$BitmapState` @kind object;
  #L2c157c.  call `setColorFilter`(v0, v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable$BitmapState;.setColorFilter:(Landroid/graphics/ColorFilter;)V` @kind virtual;
  #L2c1582.  call `invalidateSelf`(v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.invalidateSelf:()V` @kind virtual;
  #L2c1588.  return @kind void;
}
procedure `void` `setLoopCount`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.setLoopCount:(I)V` @AccessFlag PUBLIC {
    temp;

  #L2c159c.  return @kind void;
}
procedure `void` `start`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v0 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.start:()V` @AccessFlag PUBLIC {
    temp;

  #L2c15b0.  return @kind void;
}
procedure `void` `stop`(`com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable` v0 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable;.stop:()V` @AccessFlag PUBLIC {
    temp;

  #L2c15c4.  return @kind void;
}
