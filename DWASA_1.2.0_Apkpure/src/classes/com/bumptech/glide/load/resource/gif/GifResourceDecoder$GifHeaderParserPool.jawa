record `com.bumptech.glide.load.resource.gif.GifResourceDecoder$GifHeaderParserPool` @kind class @AccessFlag  {
  `java.util.Queue` `com.bumptech.glide.load.resource.gif.GifResourceDecoder$GifHeaderParserPool.pool` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.gif.GifResourceDecoder$GifHeaderParserPool` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/gif/GifResourceDecoder$GifHeaderParserPool;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2c4650.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c4656.  v0:= 0I;
  #L2c4658.  call temp:= `createQueue`(v0) @signature `Lcom/bumptech/glide/util/Util;.createQueue:(I)Ljava/util/Queue;` @kind static;
  #L2c465e.  v0:= temp @kind object;
  #L2c4660.  v1.`com.bumptech.glide.load.resource.gif.GifResourceDecoder$GifHeaderParserPool.pool` @type ^`java.util.Queue` := v0 @kind object;
  #L2c4664.  return @kind void;
}
procedure `com.bumptech.glide.gifdecoder.GifHeaderParser` `obtain`(`com.bumptech.glide.load.resource.gif.GifResourceDecoder$GifHeaderParserPool` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/gif/GifResourceDecoder$GifHeaderParserPool;.obtain:([B)Lcom/bumptech/glide/gifdecoder/GifHeaderParser;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c4600.  @monitorenter v1
  #L2c4602.  v0:= v1.`com.bumptech.glide.load.resource.gif.GifResourceDecoder$GifHeaderParserPool.pool` @type ^`java.util.Queue` @kind object;
  #L2c4606.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L2c460c.  v0:= temp @kind object;
  #L2c460e.  v0:= (`com.bumptech.glide.gifdecoder.GifHeaderParser`) v0 @kind object;
  #L2c4612.  if v0 != 0 then goto L2c4620;
  #L2c4616.  v0:= new `com.bumptech.glide.gifdecoder.GifHeaderParser`;
  #L2c461a.  call `<init>`(v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.<init>:()V` @kind direct;
  #L2c4620.  call temp:= `setData`(v0, v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.setData:([B)Lcom/bumptech/glide/gifdecoder/GifHeaderParser;` @kind virtual;
  #L2c4626.  v2:= temp @kind object;
  #L2c4628.  @monitorexit v1
  #L2c462a.  return v2 @kind object;
  #L2c462c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c462e.  @monitorexit v1
  #L2c4630.  throw v2;
  catch `java.lang.Throwable` @[L2c4602..L2c4628] goto L2c462c;
}
procedure `void` `release`(`com.bumptech.glide.load.resource.gif.GifResourceDecoder$GifHeaderParserPool` v1 @kind this, `com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/gif/GifResourceDecoder$GifHeaderParserPool;.release:(Lcom/bumptech/glide/gifdecoder/GifHeaderParser;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c4678.  @monitorenter v1
  #L2c467a.  call `clear`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.clear:()V` @kind virtual;
  #L2c4680.  v0:= v1.`com.bumptech.glide.load.resource.gif.GifResourceDecoder$GifHeaderParserPool.pool` @type ^`java.util.Queue` @kind object;
  #L2c4684.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2c468a.  @monitorexit v1
  #L2c468c.  return @kind void;
  #L2c468e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c4690.  @monitorexit v1
  #L2c4692.  throw v2;
  catch `java.lang.Throwable` @[L2c467a..L2c468a] goto L2c468e;
}
