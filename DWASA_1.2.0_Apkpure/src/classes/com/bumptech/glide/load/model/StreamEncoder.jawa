record `com.bumptech.glide.load.model.StreamEncoder` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.Encoder` @kind interface {
}
global `java.lang.String` `@@com.bumptech.glide.load.model.StreamEncoder.TAG` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.bumptech.glide.load.model.StreamEncoder` v0 @kind this) @signature `Lcom/bumptech/glide/load/model/StreamEncoder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2bf380.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bf386.  return @kind void;
}
procedure `boolean` `encode`(`com.bumptech.glide.load.model.StreamEncoder` v5 @kind this, `java.io.InputStream` v6 @kind object, `java.io.OutputStream` v7 @kind object) @signature `Lcom/bumptech/glide/load/model/StreamEncoder;.encode:(Ljava/io/InputStream;Ljava/io/OutputStream;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bf2a0.  v0:= "StreamEncoder" @kind object;
  #L2bf2a4.  call temp:= `get`() @signature `Lcom/bumptech/glide/util/ByteArrayPool;.get:()Lcom/bumptech/glide/util/ByteArrayPool;` @kind static;
  #L2bf2aa.  v1:= temp @kind object;
  #L2bf2ac.  call temp:= `getBytes`(v1) @signature `Lcom/bumptech/glide/util/ByteArrayPool;.getBytes:()[B` @kind virtual;
  #L2bf2b2.  v1:= temp @kind object;
  #L2bf2b4.  v2:= 0I;
  #L2bf2b6.  call temp:= `read`(v6, v1) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L2bf2bc.  v3:= temp;
  #L2bf2be.  v4:= -1I;
  #L2bf2c0.  if v3 == v4 then goto L2bf2cc;
  #L2bf2c4.  call `write`(v7, v1, v2, v3) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L2bf2ca.  goto L2bf2b4;
  #L2bf2cc.  v6:= 1I;
  #L2bf2ce.  call temp:= `get`() @signature `Lcom/bumptech/glide/util/ByteArrayPool;.get:()Lcom/bumptech/glide/util/ByteArrayPool;` @kind static;
  #L2bf2d4.  v7:= temp @kind object;
  #L2bf2d6.  call temp:= `releaseBytes`(v7, v1) @signature `Lcom/bumptech/glide/util/ByteArrayPool;.releaseBytes:([B)Z` @kind virtual;
  #L2bf2dc.  return v6;
  #L2bf2de.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bf2e0.  goto L2bf30c;
  #L2bf2e2.  v6:= Exception @type ^`java.io.IOException` @kind object;
  #L2bf2e4.  v7:= 3I;
  #L2bf2e6.  call temp:= `isLoggable`(v0, v7) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2bf2ec.  v7:= temp;
  #L2bf2ee.  if v7 == 0 then goto L2bf2fc;
  #L2bf2f2.  v7:= "Failed to encode data onto the OutputStream" @kind object;
  #L2bf2f6.  call temp:= `d`(v0, v7, v6) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2bf2fc.  call temp:= `get`() @signature `Lcom/bumptech/glide/util/ByteArrayPool;.get:()Lcom/bumptech/glide/util/ByteArrayPool;` @kind static;
  #L2bf302.  v6:= temp @kind object;
  #L2bf304.  call temp:= `releaseBytes`(v6, v1) @signature `Lcom/bumptech/glide/util/ByteArrayPool;.releaseBytes:([B)Z` @kind virtual;
  #L2bf30a.  return v2;
  #L2bf30c.  call temp:= `get`() @signature `Lcom/bumptech/glide/util/ByteArrayPool;.get:()Lcom/bumptech/glide/util/ByteArrayPool;` @kind static;
  #L2bf312.  v7:= temp @kind object;
  #L2bf314.  call temp:= `releaseBytes`(v7, v1) @signature `Lcom/bumptech/glide/util/ByteArrayPool;.releaseBytes:([B)Z` @kind virtual;
  #L2bf31a.  goto L2bf31e;
  #L2bf31c.  throw v6;
  #L2bf31e.  goto L2bf31c;
  catch `java.io.IOException` @[L2bf2b6..L2bf2ca] goto L2bf2e2;
  catch `java.lang.Throwable` @[L2bf2b6..L2bf2ca] goto L2bf2de;
  catch `java.lang.Throwable` @[L2bf2e6..L2bf2fc] goto L2bf2de;
}
procedure `boolean` `encode`(`com.bumptech.glide.load.model.StreamEncoder` v0 @kind this, `java.lang.Object` v1 @kind object, `java.io.OutputStream` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/StreamEncoder;.encode:(Ljava/lang/Object;Ljava/io/OutputStream;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2bf348.  v1:= (`java.io.InputStream`) v1 @kind object;
  #L2bf34c.  call temp:= `encode`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/model/StreamEncoder;.encode:(Ljava/io/InputStream;Ljava/io/OutputStream;)Z` @kind virtual;
  #L2bf352.  v1:= temp;
  #L2bf354.  return v1;
}
procedure `java.lang.String` `getId`(`com.bumptech.glide.load.model.StreamEncoder` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/StreamEncoder;.getId:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf368.  v0:= "" @kind object;
  #L2bf36c.  return v0 @kind object;
}
