record `com.bumptech.glide.load.model.LazyHeaders$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `com.bumptech.glide.load.model.LazyHeaders$Builder.copyOnModify` @AccessFlag PRIVATE;
  `java.util.Map` `com.bumptech.glide.load.model.LazyHeaders$Builder.headers` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.model.LazyHeaders$Builder.isEncodingDefault` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.model.LazyHeaders$Builder.isUserAgentDefault` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@com.bumptech.glide.load.model.LazyHeaders$Builder.DEFAULT_ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.Map` `@@com.bumptech.glide.load.model.LazyHeaders$Builder.DEFAULT_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.bumptech.glide.load.model.LazyHeaders$Builder.DEFAULT_USER_AGENT` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.bumptech.glide.load.model.LazyHeaders$Builder.ENCODING_HEADER` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.bumptech.glide.load.model.LazyHeaders$Builder.USER_AGENT_HEADER` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2beba8.  v0:= "http.agent" @kind object;
  #L2bebac.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2bebb2.  v0:= temp @kind object;
  #L2bebb4.  `@@com.bumptech.glide.load.model.LazyHeaders$Builder.DEFAULT_USER_AGENT` @type ^`java.lang.String` := v0 @kind object;
  #L2bebb8.  v0:= new `java.util.HashMap`;
  #L2bebbc.  v1:= 2I;
  #L2bebbe.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L2bebc4.  v1:= `@@com.bumptech.glide.load.model.LazyHeaders$Builder.DEFAULT_USER_AGENT` @type ^`java.lang.String` @kind object;
  #L2bebc8.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L2bebce.  v1:= temp;
  #L2bebd0.  if v1 != 0 then goto L2bebf4;
  #L2bebd4.  v1:= new `com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory`;
  #L2bebd8.  v2:= `@@com.bumptech.glide.load.model.LazyHeaders$Builder.DEFAULT_USER_AGENT` @type ^`java.lang.String` @kind object;
  #L2bebdc.  call `<init>`(v1, v2) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$StringHeaderFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bebe2.  call temp:= `singletonList`(v1) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2bebe8.  v1:= temp @kind object;
  #L2bebea.  v2:= "User-Agent" @kind object;
  #L2bebee.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2bebf4.  v1:= new `com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory`;
  #L2bebf8.  v2:= "identity" @kind object;
  #L2bebfc.  call `<init>`(v1, v2) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$StringHeaderFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bec02.  call temp:= `singletonList`(v1) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2bec08.  v1:= temp @kind object;
  #L2bec0a.  v2:= "Accept-Encoding" @kind object;
  #L2bec0e.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2bec14.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L2bec1a.  v0:= temp @kind object;
  #L2bec1c.  `@@com.bumptech.glide.load.model.LazyHeaders$Builder.DEFAULT_HEADERS` @type ^`java.util.Map` := v0 @kind object;
  #L2bec20.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2bec34.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bec3a.  v0:= 1I;
  #L2bec3c.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.copyOnModify` @type ^`boolean` := v0 @kind boolean;
  #L2bec40.  v1:= `@@com.bumptech.glide.load.model.LazyHeaders$Builder.DEFAULT_HEADERS` @type ^`java.util.Map` @kind object;
  #L2bec44.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.headers` @type ^`java.util.Map` := v1 @kind object;
  #L2bec48.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.isEncodingDefault` @type ^`boolean` := v0 @kind boolean;
  #L2bec4c.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.isUserAgentDefault` @type ^`boolean` := v0 @kind boolean;
  #L2bec50.  return @kind void;
}
procedure `java.util.Map` `copyHeaders`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v5 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.copyHeaders:()Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2beb2c.  v0:= new `java.util.HashMap`;
  #L2beb30.  v1:= v5.`com.bumptech.glide.load.model.LazyHeaders$Builder.headers` @type ^`java.util.Map` @kind object;
  #L2beb34.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2beb3a.  v1:= temp;
  #L2beb3c.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L2beb42.  v1:= v5.`com.bumptech.glide.load.model.LazyHeaders$Builder.headers` @type ^`java.util.Map` @kind object;
  #L2beb46.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2beb4c.  v1:= temp @kind object;
  #L2beb4e.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2beb54.  v1:= temp @kind object;
  #L2beb56.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2beb5c.  v2:= temp;
  #L2beb5e.  if v2 == 0 then goto L2beb94;
  #L2beb62.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2beb68.  v2:= temp @kind object;
  #L2beb6a.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2beb6e.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2beb74.  v3:= temp @kind object;
  #L2beb76.  v4:= new `java.util.ArrayList`;
  #L2beb7a.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2beb80.  v2:= temp @kind object;
  #L2beb82.  v2:= (`java.util.Collection`) v2 @kind object;
  #L2beb86.  call `<init>`(v4, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2beb8c.  call temp:= `put`(v0, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2beb92.  goto L2beb56;
  #L2beb94.  return v0 @kind object;
}
procedure `void` `copyIfNecessary`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.copyIfNecessary:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2bec64.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.copyOnModify` @type ^`boolean` @kind boolean;
  #L2bec68.  if v0 == 0 then goto L2bec7e;
  #L2bec6c.  v0:= 0I;
  #L2bec6e.  v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.copyOnModify` @type ^`boolean` := v0 @kind boolean;
  #L2bec72.  call temp:= `copyHeaders`(v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.copyHeaders:()Ljava/util/Map;` @kind direct;
  #L2bec78.  v0:= temp @kind object;
  #L2bec7a.  v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.headers` @type ^`java.util.Map` := v0 @kind object;
  #L2bec7e.  return @kind void;
}
procedure `java.util.List` `getFactories`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.getFactories:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2beaf0.  v0:= v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.headers` @type ^`java.util.Map` @kind object;
  #L2beaf4.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2beafa.  v0:= temp @kind object;
  #L2beafc.  v0:= (`java.util.List`) v0 @kind object;
  #L2beb00.  if v0 != 0 then goto L2beb18;
  #L2beb04.  v0:= new `java.util.ArrayList`;
  #L2beb08.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2beb0e.  v1:= v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.headers` @type ^`java.util.Map` @kind object;
  #L2beb12.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2beb18.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `addHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.model.LazyHeaderFactory` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.addHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2be9c4.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.isEncodingDefault` @type ^`boolean` @kind boolean;
  #L2be9c8.  if v0 == 0 then goto L2be9dc;
  #L2be9cc.  v0:= "Accept-Encoding" @kind object;
  #L2be9d0.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2be9d6.  v0:= temp;
  #L2be9d8.  if v0 != 0 then goto L2be9f4;
  #L2be9dc.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.isUserAgentDefault` @type ^`boolean` @kind boolean;
  #L2be9e0.  if v0 == 0 then goto L2be9fe;
  #L2be9e4.  v0:= "User-Agent" @kind object;
  #L2be9e8.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2be9ee.  v0:= temp;
  #L2be9f0.  if v0 == 0 then goto L2be9fe;
  #L2be9f4.  call temp:= `setHeader`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @kind virtual;
  #L2be9fa.  v2:= temp @kind object;
  #L2be9fc.  return v2 @kind object;
  #L2be9fe.  call `copyIfNecessary`(v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.copyIfNecessary:()V` @kind direct;
  #L2bea04.  call temp:= `getFactories`(v1, v2) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.getFactories:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L2bea0a.  v2:= temp @kind object;
  #L2bea0c.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2bea12.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `addHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bea24.  v0:= new `com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory`;
  #L2bea28.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$StringHeaderFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bea2e.  call temp:= `addHeader`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.addHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @kind virtual;
  #L2bea34.  v2:= temp @kind object;
  #L2bea36.  return v2 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders` `build`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.build:()Lcom/bumptech/glide/load/model/LazyHeaders;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2be99c.  v0:= 1I;
  #L2be99e.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.copyOnModify` @type ^`boolean` := v0 @kind boolean;
  #L2be9a2.  v0:= new `com.bumptech.glide.load.model.LazyHeaders`;
  #L2be9a6.  v1:= v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.headers` @type ^`java.util.Map` @kind object;
  #L2be9aa.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L2be9b0.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `setHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.model.LazyHeaderFactory` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bea48.  call `copyIfNecessary`(v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.copyIfNecessary:()V` @kind direct;
  #L2bea4e.  if v3 != 0 then goto L2bea5e;
  #L2bea52.  v3:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.headers` @type ^`java.util.Map` @kind object;
  #L2bea56.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2bea5c.  goto L2bea72;
  #L2bea5e.  call temp:= `getFactories`(v1, v2) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.getFactories:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L2bea64.  v0:= temp @kind object;
  #L2bea66.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2bea6c.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2bea72.  v3:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.isEncodingDefault` @type ^`boolean` @kind boolean;
  #L2bea76.  v0:= 0I;
  #L2bea78.  if v3 == 0 then goto L2bea90;
  #L2bea7c.  v3:= "Accept-Encoding" @kind object;
  #L2bea80.  call temp:= `equalsIgnoreCase`(v3, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2bea86.  v3:= temp;
  #L2bea88.  if v3 == 0 then goto L2bea90;
  #L2bea8c.  v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.isEncodingDefault` @type ^`boolean` := v0 @kind boolean;
  #L2bea90.  v3:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.isUserAgentDefault` @type ^`boolean` @kind boolean;
  #L2bea94.  if v3 == 0 then goto L2beaac;
  #L2bea98.  v3:= "User-Agent" @kind object;
  #L2bea9c.  call temp:= `equalsIgnoreCase`(v3, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2beaa2.  v2:= temp;
  #L2beaa4.  if v2 == 0 then goto L2beaac;
  #L2beaa8.  v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.isUserAgentDefault` @type ^`boolean` := v0 @kind boolean;
  #L2beaac.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `setHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Ljava/lang/String;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2beac0.  if v3 != 0 then goto L2beac8;
  #L2beac4.  v3:= 0I;
  #L2beac6.  goto L2bead4;
  #L2beac8.  v0:= new `com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory`;
  #L2beacc.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$StringHeaderFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bead2.  v3:= v0 @kind object;
  #L2bead4.  call temp:= `setHeader`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @kind virtual;
  #L2beada.  v2:= temp @kind object;
  #L2beadc.  return v2 @kind object;
}
