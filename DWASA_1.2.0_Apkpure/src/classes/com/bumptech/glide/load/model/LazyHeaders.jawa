record `com.bumptech.glide.load.model.LazyHeaders` @kind class @AccessFlag PUBLIC_FINAL extends `com.bumptech.glide.load.model.Headers` @kind interface {
  `java.util.Map` `com.bumptech.glide.load.model.LazyHeaders.combinedHeaders` @AccessFlag PRIVATE_VOLATILE;
  `java.util.Map` `com.bumptech.glide.load.model.LazyHeaders.headers` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.LazyHeaders` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2bef10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bef16.  call temp:= `unmodifiableMap`(v1) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L2bef1c.  v1:= temp @kind object;
  #L2bef1e.  v0.`com.bumptech.glide.load.model.LazyHeaders.headers` @type ^`java.util.Map` := v1 @kind object;
  #L2bef22.  return @kind void;
}
procedure `java.util.Map` `generateHeaders`(`com.bumptech.glide.load.model.LazyHeaders` v7 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.generateHeaders:()Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2bedfc.  v0:= new `java.util.HashMap`;
  #L2bee00.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2bee06.  v1:= v7.`com.bumptech.glide.load.model.LazyHeaders.headers` @type ^`java.util.Map` @kind object;
  #L2bee0a.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2bee10.  v1:= temp @kind object;
  #L2bee12.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2bee18.  v1:= temp @kind object;
  #L2bee1a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2bee20.  v2:= temp;
  #L2bee22.  if v2 == 0 then goto L2beea8;
  #L2bee26.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2bee2c.  v2:= temp @kind object;
  #L2bee2e.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2bee32.  v3:= new `java.lang.StringBuilder`;
  #L2bee36.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bee3c.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2bee42.  v4:= temp @kind object;
  #L2bee44.  v4:= (`java.util.List`) v4 @kind object;
  #L2bee48.  v5:= 0I;
  #L2bee4a.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2bee50.  v6:= temp;
  #L2bee52.  if v5 >= v6 then goto L2bee90;
  #L2bee56.  call temp:= `get`(v4, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2bee5c.  v6:= temp @kind object;
  #L2bee5e.  v6:= (`com.bumptech.glide.load.model.LazyHeaderFactory`) v6 @kind object;
  #L2bee62.  call temp:= `buildHeader`(v6) @signature `Lcom/bumptech/glide/load/model/LazyHeaderFactory;.buildHeader:()Ljava/lang/String;` @kind interface;
  #L2bee68.  v6:= temp @kind object;
  #L2bee6a.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bee70.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2bee76.  v6:= temp;
  #L2bee78.  v6:= v6 + -1;
  #L2bee7c.  if v5 == v6 then goto L2bee8a;
  #L2bee80.  v6:= 44I;
  #L2bee84.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bee8a.  v5:= v5 + 1;
  #L2bee8e.  goto L2bee4a;
  #L2bee90.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2bee96.  v2:= temp @kind object;
  #L2bee98.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bee9e.  v3:= temp @kind object;
  #L2beea0.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2beea6.  goto L2bee1a;
  #L2beea8.  return v0 @kind object;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.model.LazyHeaders` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bed64.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.model.LazyHeaders` @kind boolean;
  #L2bed68.  if v0 == 0 then goto L2bed82;
  #L2bed6c.  v2:= (`com.bumptech.glide.load.model.LazyHeaders`) v2 @kind object;
  #L2bed70.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders.headers` @type ^`java.util.Map` @kind object;
  #L2bed74.  v2:= v2.`com.bumptech.glide.load.model.LazyHeaders.headers` @type ^`java.util.Map` @kind object;
  #L2bed78.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2bed7e.  v2:= temp;
  #L2bed80.  return v2;
  #L2bed82.  v2:= 0I;
  #L2bed84.  return v2;
}
procedure `java.util.Map` `getHeaders`(`com.bumptech.glide.load.model.LazyHeaders` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.getHeaders:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2beebc.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders.combinedHeaders` @type ^`java.util.Map` @kind object;
  #L2beec0.  if v0 != 0 then goto L2beeec;
  #L2beec4.  @monitorenter v1
  #L2beec6.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders.combinedHeaders` @type ^`java.util.Map` @kind object;
  #L2beeca.  if v0 != 0 then goto L2beee2;
  #L2beece.  call temp:= `generateHeaders`(v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.generateHeaders:()Ljava/util/Map;` @kind direct;
  #L2beed4.  v0:= temp @kind object;
  #L2beed6.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L2beedc.  v0:= temp @kind object;
  #L2beede.  v1.`com.bumptech.glide.load.model.LazyHeaders.combinedHeaders` @type ^`java.util.Map` := v0 @kind object;
  #L2beee2.  @monitorexit v1
  #L2beee4.  goto L2beeec;
  #L2beee6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2beee8.  @monitorexit v1
  #L2beeea.  throw v0;
  #L2beeec.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders.combinedHeaders` @type ^`java.util.Map` @kind object;
  #L2beef0.  return v0 @kind object;
  catch `java.lang.Throwable` @[L2beec6..L2beeea] goto L2beee6;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.model.LazyHeaders` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bed98.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders.headers` @type ^`java.util.Map` @kind object;
  #L2bed9c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2beda2.  v0:= temp;
  #L2beda4.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.model.LazyHeaders` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bedb8.  v0:= new `java.lang.StringBuilder`;
  #L2bedbc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bedc2.  v1:= "LazyHeaders{headers=" @kind object;
  #L2bedc6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bedcc.  v1:= v2.`com.bumptech.glide.load.model.LazyHeaders.headers` @type ^`java.util.Map` @kind object;
  #L2bedd0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bedd6.  v1:= 125I;
  #L2bedda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bede0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bede6.  v0:= temp @kind object;
  #L2bede8.  return v0 @kind object;
}
