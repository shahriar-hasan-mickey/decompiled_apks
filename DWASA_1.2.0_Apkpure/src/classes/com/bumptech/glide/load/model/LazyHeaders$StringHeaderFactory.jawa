record `com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory` @kind class @AccessFlag FINAL extends `com.bumptech.glide.load.model.LazyHeaderFactory` @kind interface {
  `java.lang.String` `com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory.value` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$StringHeaderFactory;.<init>:(Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2bed48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bed4e.  v0.`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory.value` @type ^`java.lang.String` := v1 @kind object;
  #L2bed52.  return @kind void;
}
procedure `java.lang.String` `buildHeader`(`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$StringHeaderFactory;.buildHeader:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bece4.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory.value` @type ^`java.lang.String` @kind object;
  #L2bece8.  return v0 @kind object;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$StringHeaderFactory;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bec90.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory` @kind boolean;
  #L2bec94.  if v0 == 0 then goto L2becae;
  #L2bec98.  v2:= (`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory`) v2 @kind object;
  #L2bec9c.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory.value` @type ^`java.lang.String` @kind object;
  #L2beca0.  v2:= v2.`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory.value` @type ^`java.lang.String` @kind object;
  #L2beca4.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2becaa.  v2:= temp;
  #L2becac.  return v2;
  #L2becae.  v2:= 0I;
  #L2becb0.  return v2;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$StringHeaderFactory;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2becc4.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory.value` @type ^`java.lang.String` @kind object;
  #L2becc8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2becce.  v0:= temp;
  #L2becd0.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$StringHeaderFactory;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2becfc.  v0:= new `java.lang.StringBuilder`;
  #L2bed00.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bed06.  v1:= "StringHeaderFactory{value='" @kind object;
  #L2bed0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bed10.  v1:= v2.`com.bumptech.glide.load.model.LazyHeaders$StringHeaderFactory.value` @type ^`java.lang.String` @kind object;
  #L2bed14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bed1a.  v1:= 39I;
  #L2bed1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bed24.  v1:= 125I;
  #L2bed28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bed2e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bed34.  v0:= temp @kind object;
  #L2bed36.  return v0 @kind object;
}
