record `com.bumptech.glide.load.model.ModelCache$ModelKey` @kind class @AccessFlag FINAL {
  `int` `com.bumptech.glide.load.model.ModelCache$ModelKey.height` @AccessFlag PRIVATE;
  `java.lang.Object` `com.bumptech.glide.load.model.ModelCache$ModelKey.model` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.model.ModelCache$ModelKey.width` @AccessFlag PRIVATE;
}
global `java.util.Queue` `@@com.bumptech.glide.load.model.ModelCache$ModelKey.KEY_QUEUE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/model/ModelCache$ModelKey;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2bf040.  v0:= 0I;
  #L2bf042.  call temp:= `createQueue`(v0) @signature `Lcom/bumptech/glide/util/Util;.createQueue:(I)Ljava/util/Queue;` @kind static;
  #L2bf048.  v0:= temp @kind object;
  #L2bf04a.  `@@com.bumptech.glide.load.model.ModelCache$ModelKey.KEY_QUEUE` @type ^`java.util.Queue` := v0 @kind object;
  #L2bf04e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.ModelCache$ModelKey` v0 @kind this) @signature `Lcom/bumptech/glide/load/model/ModelCache$ModelKey;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2bf060.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bf066.  return @kind void;
}
procedure `com.bumptech.glide.load.model.ModelCache$ModelKey` `get`(`java.lang.Object` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/bumptech/glide/load/model/ModelCache$ModelKey;.get:(Ljava/lang/Object;II)Lcom/bumptech/glide/load/model/ModelCache$ModelKey;` @AccessFlag STATIC {
    temp;
    v0;

  #L2befd4.  v0:= `@@com.bumptech.glide.load.model.ModelCache$ModelKey.KEY_QUEUE` @type ^`java.util.Queue` @kind object;
  #L2befd8.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L2befde.  v0:= temp @kind object;
  #L2befe0.  v0:= (`com.bumptech.glide.load.model.ModelCache$ModelKey`) v0 @kind object;
  #L2befe4.  if v0 != 0 then goto L2beff2;
  #L2befe8.  v0:= new `com.bumptech.glide.load.model.ModelCache$ModelKey`;
  #L2befec.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/model/ModelCache$ModelKey;.<init>:()V` @kind direct;
  #L2beff2.  call `init`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/load/model/ModelCache$ModelKey;.init:(Ljava/lang/Object;II)V` @kind direct;
  #L2beff8.  return v0 @kind object;
}
procedure `void` `init`(`com.bumptech.glide.load.model.ModelCache$ModelKey` v0 @kind this, `java.lang.Object` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/bumptech/glide/load/model/ModelCache$ModelKey;.init:(Ljava/lang/Object;II)V` @AccessFlag PRIVATE {
    temp;

  #L2bf078.  v0.`com.bumptech.glide.load.model.ModelCache$ModelKey.model` @type ^`java.lang.Object` := v1 @kind object;
  #L2bf07c.  v0.`com.bumptech.glide.load.model.ModelCache$ModelKey.width` @type ^`int` := v2;
  #L2bf080.  v0.`com.bumptech.glide.load.model.ModelCache$ModelKey.height` @type ^`int` := v3;
  #L2bf084.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.model.ModelCache$ModelKey` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelCache$ModelKey;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bef84.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.model.ModelCache$ModelKey` @kind boolean;
  #L2bef88.  v1:= 0I;
  #L2bef8a.  if v0 == 0 then goto L2befc0;
  #L2bef8e.  v4:= (`com.bumptech.glide.load.model.ModelCache$ModelKey`) v4 @kind object;
  #L2bef92.  v0:= v3.`com.bumptech.glide.load.model.ModelCache$ModelKey.width` @type ^`int`;
  #L2bef96.  v2:= v4.`com.bumptech.glide.load.model.ModelCache$ModelKey.width` @type ^`int`;
  #L2bef9a.  if v0 != v2 then goto L2befc0;
  #L2bef9e.  v0:= v3.`com.bumptech.glide.load.model.ModelCache$ModelKey.height` @type ^`int`;
  #L2befa2.  v2:= v4.`com.bumptech.glide.load.model.ModelCache$ModelKey.height` @type ^`int`;
  #L2befa6.  if v0 != v2 then goto L2befc0;
  #L2befaa.  v0:= v3.`com.bumptech.glide.load.model.ModelCache$ModelKey.model` @type ^`java.lang.Object` @kind object;
  #L2befae.  v4:= v4.`com.bumptech.glide.load.model.ModelCache$ModelKey.model` @type ^`java.lang.Object` @kind object;
  #L2befb2.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2befb8.  v4:= temp;
  #L2befba.  if v4 == 0 then goto L2befc0;
  #L2befbe.  v1:= 1I;
  #L2befc0.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.model.ModelCache$ModelKey` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/ModelCache$ModelKey;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bf00c.  v0:= v2.`com.bumptech.glide.load.model.ModelCache$ModelKey.height` @type ^`int`;
  #L2bf010.  v0:= v0 * 31;
  #L2bf014.  v1:= v2.`com.bumptech.glide.load.model.ModelCache$ModelKey.width` @type ^`int`;
  #L2bf018.  v0:= v0 + v1 @kind int;
  #L2bf01a.  v0:= v0 * 31;
  #L2bf01e.  v1:= v2.`com.bumptech.glide.load.model.ModelCache$ModelKey.model` @type ^`java.lang.Object` @kind object;
  #L2bf022.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2bf028.  v1:= temp;
  #L2bf02a.  v0:= v0 + v1 @kind int;
  #L2bf02c.  return v0;
}
procedure `void` `release`(`com.bumptech.glide.load.model.ModelCache$ModelKey` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/ModelCache$ModelKey;.release:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf098.  v0:= `@@com.bumptech.glide.load.model.ModelCache$ModelKey.KEY_QUEUE` @type ^`java.util.Queue` @kind object;
  #L2bf09c.  call temp:= `offer`(v0, v1) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2bf0a2.  return @kind void;
}
