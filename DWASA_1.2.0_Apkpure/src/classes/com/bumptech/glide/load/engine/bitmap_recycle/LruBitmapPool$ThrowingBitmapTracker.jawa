record `com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$ThrowingBitmapTracker` @kind class @AccessFlag  extends `com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker` @kind interface {
  `java.util.Set` `com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$ThrowingBitmapTracker.bitmaps` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$ThrowingBitmapTracker` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool$ThrowingBitmapTracker;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2bacdc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bace2.  v0:= new `java.util.HashSet`;
  #L2bace6.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2bacec.  call temp:= `synchronizedSet`(v0) @signature `Ljava/util/Collections;.synchronizedSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L2bacf2.  v0:= temp @kind object;
  #L2bacf4.  v1.`com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$ThrowingBitmapTracker.bitmaps` @type ^`java.util.Set` := v0 @kind object;
  #L2bacf8.  return @kind void;
}
procedure `void` `add`(`com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$ThrowingBitmapTracker` v3 @kind this, `android.graphics.Bitmap` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool$ThrowingBitmapTracker;.add:(Landroid/graphics/Bitmap;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bad0c.  v0:= v3.`com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$ThrowingBitmapTracker.bitmaps` @type ^`java.util.Set` @kind object;
  #L2bad10.  call temp:= `contains`(v0, v4) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2bad16.  v0:= temp;
  #L2bad18.  if v0 != 0 then goto L2bad28;
  #L2bad1c.  v0:= v3.`com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$ThrowingBitmapTracker.bitmaps` @type ^`java.util.Set` @kind object;
  #L2bad20.  call temp:= `add`(v0, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2bad26.  return @kind void;
  #L2bad28.  v0:= new `java.lang.IllegalStateException`;
  #L2bad2c.  v1:= new `java.lang.StringBuilder`;
  #L2bad30.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bad36.  v2:= "Can't add already added bitmap: " @kind object;
  #L2bad3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bad40.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bad46.  v2:= " [" @kind object;
  #L2bad4a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bad50.  call temp:= `getWidth`(v4) @signature `Landroid/graphics/Bitmap;.getWidth:()I` @kind virtual;
  #L2bad56.  v2:= temp;
  #L2bad58.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bad5e.  v2:= "x" @kind object;
  #L2bad62.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bad68.  call temp:= `getHeight`(v4) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L2bad6e.  v4:= temp;
  #L2bad70.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bad76.  v4:= "]" @kind object;
  #L2bad7a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bad80.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bad86.  v4:= temp @kind object;
  #L2bad88.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bad8e.  throw v0;
}
procedure `void` `remove`(`com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$ThrowingBitmapTracker` v1 @kind this, `android.graphics.Bitmap` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool$ThrowingBitmapTracker;.remove:(Landroid/graphics/Bitmap;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bada0.  v0:= v1.`com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$ThrowingBitmapTracker.bitmaps` @type ^`java.util.Set` @kind object;
  #L2bada4.  call temp:= `contains`(v0, v2) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2badaa.  v0:= temp;
  #L2badac.  if v0 == 0 then goto L2badbc;
  #L2badb0.  v0:= v1.`com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$ThrowingBitmapTracker.bitmaps` @type ^`java.util.Set` @kind object;
  #L2badb4.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2badba.  return @kind void;
  #L2badbc.  v2:= new `java.lang.IllegalStateException`;
  #L2badc0.  v0:= "Cannot remove bitmap not in tracker" @kind object;
  #L2badc4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2badca.  throw v2;
}
