record `com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool` @kind class @AccessFlag ABSTRACT {
  `java.util.Queue` `com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool.keyPool` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool.MAX_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/BaseKeyPool;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2ba800.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ba806.  v0:= 20I;
  #L2ba80a.  call temp:= `createQueue`(v0) @signature `Lcom/bumptech/glide/util/Util;.createQueue:(I)Ljava/util/Queue;` @kind static;
  #L2ba810.  v0:= temp @kind object;
  #L2ba812.  v1.`com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool.keyPool` @type ^`java.util.Queue` := v0 @kind object;
  #L2ba816.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.bitmap_recycle.Poolable` `create`() @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/BaseKeyPool;.create:()Lcom/bumptech/glide/load/engine/bitmap_recycle/Poolable;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `com.bumptech.glide.load.engine.bitmap_recycle.Poolable` `get`(`com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/BaseKeyPool;.get:()Lcom/bumptech/glide/load/engine/bitmap_recycle/Poolable;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2ba7d0.  v0:= v1.`com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool.keyPool` @type ^`java.util.Queue` @kind object;
  #L2ba7d4.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L2ba7da.  v0:= temp @kind object;
  #L2ba7dc.  v0:= (`com.bumptech.glide.load.engine.bitmap_recycle.Poolable`) v0 @kind object;
  #L2ba7e0.  if v0 != 0 then goto L2ba7ec;
  #L2ba7e4.  call temp:= `create`(v1) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/BaseKeyPool;.create:()Lcom/bumptech/glide/load/engine/bitmap_recycle/Poolable;` @kind virtual;
  #L2ba7ea.  v0:= temp @kind object;
  #L2ba7ec.  return v0 @kind object;
}
procedure `void` `offer`(`com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool` v2 @kind this, `com.bumptech.glide.load.engine.bitmap_recycle.Poolable` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/BaseKeyPool;.offer:(Lcom/bumptech/glide/load/engine/bitmap_recycle/Poolable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ba828.  v0:= v2.`com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool.keyPool` @type ^`java.util.Queue` @kind object;
  #L2ba82c.  call temp:= `size`(v0) @signature `Ljava/util/Queue;.size:()I` @kind interface;
  #L2ba832.  v0:= temp;
  #L2ba834.  v1:= 20I;
  #L2ba838.  if v0 >= v1 then goto L2ba846;
  #L2ba83c.  v0:= v2.`com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool.keyPool` @type ^`java.util.Queue` @kind object;
  #L2ba840.  call temp:= `offer`(v0, v3) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2ba846.  return @kind void;
}
