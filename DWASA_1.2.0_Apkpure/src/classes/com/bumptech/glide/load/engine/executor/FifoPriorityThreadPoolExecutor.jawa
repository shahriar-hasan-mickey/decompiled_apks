record `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.ThreadPoolExecutor` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.ordering` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy` `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.uncaughtThrowableStrategy` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.TAG` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2bd3e0.  v0:= `@@com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy.LOG` @type ^`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy` @kind object;
  #L2bd3e4.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor;.<init>:(ILcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy;)V` @kind direct;
  #L2bd3ea.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor` v8 @kind this, `int` v9 , `int` v10 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object, `java.util.concurrent.ThreadFactory` v14 @kind object, `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy` v15 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2bd430.  v6:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L2bd434.  call `<init>`(v6) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:()V` @kind direct;
  #L2bd43a.  v0:= v8 @kind object;
  #L2bd43c.  v1:= v9;
  #L2bd43e.  v2:= v10;
  #L2bd440.  v3:= v11 @kind wide;
  #L2bd442.  v5:= v13 @kind object;
  #L2bd444.  v7:= v14 @kind object;
  #L2bd446.  call `<init>`(v0, v1, v2, v3, v5, v6, v7) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2bd44c.  v9:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L2bd450.  call `<init>`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2bd456.  v8.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.ordering` @type ^`java.util.concurrent.atomic.AtomicInteger` := v9 @kind object;
  #L2bd45a.  v8.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.uncaughtThrowableStrategy` @type ^`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy` := v15 @kind object;
  #L2bd45e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor` v8 @kind this, `int` v9 , `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy` v10 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor;.<init>:(ILcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2bd3fc.  v5:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2bd400.  v6:= new `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$DefaultThreadFactory`;
  #L2bd404.  call `<init>`(v6) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$DefaultThreadFactory;.<init>:()V` @kind direct;
  #L2bd40a.  v3:= 0L;
  #L2bd40e.  v0:= v8 @kind object;
  #L2bd410.  v1:= v9;
  #L2bd412.  v2:= v9;
  #L2bd414.  v7:= v10 @kind object;
  #L2bd416.  call `<init>`(v0, v1, v2, v3, v5, v6, v7) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy;)V` @kind direct;
  #L2bd41c.  return @kind void;
}
procedure `void` `afterExecute`(`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor` v0 @kind this, `java.lang.Runnable` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor;.afterExecute:(Ljava/lang/Runnable;Ljava/lang/Throwable;)V` @AccessFlag PROTECTED {
    temp;

  #L2bd470.  call `afterExecute`(v0, v1, v2) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.afterExecute:(Ljava/lang/Runnable;Ljava/lang/Throwable;)V` @kind super;
  #L2bd476.  if v2 != 0 then goto L2bd4c0;
  #L2bd47a.  v2:= instanceof @variable v1 @type ^`java.util.concurrent.Future` @kind boolean;
  #L2bd47e.  if v2 == 0 then goto L2bd4c0;
  #L2bd482.  v1:= (`java.util.concurrent.Future`) v1 @kind object;
  #L2bd486.  call temp:= `isDone`(v1) @signature `Ljava/util/concurrent/Future;.isDone:()Z` @kind interface;
  #L2bd48c.  v2:= temp;
  #L2bd48e.  if v2 == 0 then goto L2bd4c0;
  #L2bd492.  call temp:= `isCancelled`(v1) @signature `Ljava/util/concurrent/Future;.isCancelled:()Z` @kind interface;
  #L2bd498.  v2:= temp;
  #L2bd49a.  if v2 != 0 then goto L2bd4c0;
  #L2bd49e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/Future;.get:()Ljava/lang/Object;` @kind interface;
  #L2bd4a4.  goto L2bd4c0;
  #L2bd4a6.  v1:= Exception @type ^`java.util.concurrent.ExecutionException` @kind object;
  #L2bd4a8.  v2:= v0.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.uncaughtThrowableStrategy` @type ^`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy` @kind object;
  #L2bd4ac.  call `handle`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy;.handle:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2bd4b2.  goto L2bd4c0;
  #L2bd4b4.  v1:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L2bd4b6.  v2:= v0.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.uncaughtThrowableStrategy` @type ^`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy` @kind object;
  #L2bd4ba.  call `handle`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy;.handle:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2bd4c0.  return @kind void;
  catch `java.lang.InterruptedException` @[L2bd49e..L2bd4a4] goto L2bd4b4;
  catch `java.util.concurrent.ExecutionException` @[L2bd49e..L2bd4a4] goto L2bd4a6;
}
procedure `java.util.concurrent.RunnableFuture` `newTaskFor`(`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor` v2 @kind this, `java.lang.Runnable` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor;.newTaskFor:(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2bd3b8.  v0:= new `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask`;
  #L2bd3bc.  v1:= v2.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.ordering` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2bd3c0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2bd3c6.  v1:= temp;
  #L2bd3c8.  call `<init>`(v0, v3, v4, v1) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$LoadTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;I)V` @kind direct;
  #L2bd3ce.  return v0 @kind object;
}
