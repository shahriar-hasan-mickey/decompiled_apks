record `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask` @kind class @AccessFlag  extends `java.util.concurrent.FutureTask` @kind class, `java.lang.Comparable` @kind interface {
  `int` `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.order` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.priority` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask` v0 @kind this, `java.lang.Runnable` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$LoadTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2bd1ec.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L2bd1f2.  v2:= instanceof @variable v1 @type ^`com.bumptech.glide.load.engine.executor.Prioritized` @kind boolean;
  #L2bd1f6.  if v2 == 0 then goto L2bd210;
  #L2bd1fa.  v1:= (`com.bumptech.glide.load.engine.executor.Prioritized`) v1 @kind object;
  #L2bd1fe.  call temp:= `getPriority`(v1) @signature `Lcom/bumptech/glide/load/engine/executor/Prioritized;.getPriority:()I` @kind interface;
  #L2bd204.  v1:= temp;
  #L2bd206.  v0.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.priority` @type ^`int` := v1;
  #L2bd20a.  v0.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.order` @type ^`int` := v3;
  #L2bd20e.  return @kind void;
  #L2bd210.  v1:= new `java.lang.IllegalArgumentException`;
  #L2bd214.  v2:= "FifoPriorityThreadPoolExecutor must be given Runnables that implement Prioritized" @kind object;
  #L2bd218.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bd21e.  throw v1;
}
procedure `int` `compareTo`(`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask` v2 @kind this, `com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$LoadTask;.compareTo:(Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$LoadTask;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bd180.  v0:= v2.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.priority` @type ^`int`;
  #L2bd184.  v1:= v3.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.priority` @type ^`int`;
  #L2bd188.  v0:= v0 - v1 @kind int;
  #L2bd18a.  if v0 != 0 then goto L2bd198;
  #L2bd18e.  v0:= v2.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.order` @type ^`int`;
  #L2bd192.  v3:= v3.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.order` @type ^`int`;
  #L2bd196.  v0:= v0 - v3 @kind int;
  #L2bd198.  return v0;
}
procedure `int` `compareTo`(`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$LoadTask;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2bd1ac.  v1:= (`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask`) v1 @kind object;
  #L2bd1b0.  call temp:= `compareTo`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$LoadTask;.compareTo:(Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$LoadTask;)I` @kind virtual;
  #L2bd1b6.  v1:= temp;
  #L2bd1b8.  return v1;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$LoadTask;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bd144.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask` @kind boolean;
  #L2bd148.  v1:= 0I;
  #L2bd14a.  if v0 == 0 then goto L2bd16c;
  #L2bd14e.  v4:= (`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask`) v4 @kind object;
  #L2bd152.  v0:= v3.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.order` @type ^`int`;
  #L2bd156.  v2:= v4.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.order` @type ^`int`;
  #L2bd15a.  if v0 != v2 then goto L2bd16c;
  #L2bd15e.  v0:= v3.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.priority` @type ^`int`;
  #L2bd162.  v4:= v4.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.priority` @type ^`int`;
  #L2bd166.  if v0 != v4 then goto L2bd16c;
  #L2bd16a.  v1:= 1I;
  #L2bd16c.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$LoadTask;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bd1cc.  v0:= v2.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.priority` @type ^`int`;
  #L2bd1d0.  v0:= v0 * 31;
  #L2bd1d4.  v1:= v2.`com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$LoadTask.order` @type ^`int`;
  #L2bd1d8.  v0:= v0 + v1 @kind int;
  #L2bd1da.  return v0;
}
