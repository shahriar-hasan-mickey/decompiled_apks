record `com.bumptech.glide.load.engine.EngineResource` @kind class @AccessFlag  extends `com.bumptech.glide.load.engine.Resource` @kind interface {
  `int` `com.bumptech.glide.load.engine.EngineResource.acquired` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.EngineResource.isCacheable` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.load.engine.EngineResource.isRecycled` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.EngineResource.key` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.EngineResource$ResourceListener` `com.bumptech.glide.load.engine.EngineResource.listener` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.Resource` `com.bumptech.glide.load.engine.EngineResource.resource` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.EngineResource` v0 @kind this, `com.bumptech.glide.load.engine.Resource` v1 @kind object, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/EngineResource;.<init>:(Lcom/bumptech/glide/load/engine/Resource;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2b98ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b98f2.  if v1 == 0 then goto L2b9900;
  #L2b98f6.  v0.`com.bumptech.glide.load.engine.EngineResource.resource` @type ^`com.bumptech.glide.load.engine.Resource` := v1 @kind object;
  #L2b98fa.  v0.`com.bumptech.glide.load.engine.EngineResource.isCacheable` @type ^`boolean` := v2 @kind boolean;
  #L2b98fe.  return @kind void;
  #L2b9900.  v1:= new `java.lang.NullPointerException`;
  #L2b9904.  v2:= "Wrapped resource must not be null" @kind object;
  #L2b9908.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b990e.  throw v1;
}
procedure `void` `acquire`(`com.bumptech.glide.load.engine.EngineResource` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/EngineResource;.acquire:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2b9920.  v0:= v2.`com.bumptech.glide.load.engine.EngineResource.isRecycled` @type ^`boolean` @kind boolean;
  #L2b9924.  if v0 != 0 then goto L2b9962;
  #L2b9928.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L2b992e.  v0:= temp @kind object;
  #L2b9930.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L2b9936.  v1:= temp @kind object;
  #L2b9938.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2b993e.  v0:= temp;
  #L2b9940.  if v0 == 0 then goto L2b9952;
  #L2b9944.  v0:= v2.`com.bumptech.glide.load.engine.EngineResource.acquired` @type ^`int`;
  #L2b9948.  v0:= v0 + 1;
  #L2b994c.  v2.`com.bumptech.glide.load.engine.EngineResource.acquired` @type ^`int` := v0;
  #L2b9950.  return @kind void;
  #L2b9952.  v0:= new `java.lang.IllegalThreadStateException`;
  #L2b9956.  v1:= "Must call acquire on the main thread" @kind object;
  #L2b995a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalThreadStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b9960.  throw v0;
  #L2b9962.  v0:= new `java.lang.IllegalStateException`;
  #L2b9966.  v1:= "Cannot acquire a recycled resource" @kind object;
  #L2b996a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b9970.  throw v0;
}
procedure `java.lang.Object` `get`(`com.bumptech.glide.load.engine.EngineResource` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/EngineResource;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b98cc.  v0:= v1.`com.bumptech.glide.load.engine.EngineResource.resource` @type ^`com.bumptech.glide.load.engine.Resource` @kind object;
  #L2b98d0.  call temp:= `get`(v0) @signature `Lcom/bumptech/glide/load/engine/Resource;.get:()Ljava/lang/Object;` @kind interface;
  #L2b98d6.  v0:= temp @kind object;
  #L2b98d8.  return v0 @kind object;
}
procedure `int` `getSize`(`com.bumptech.glide.load.engine.EngineResource` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/EngineResource;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b98ac.  v0:= v1.`com.bumptech.glide.load.engine.EngineResource.resource` @type ^`com.bumptech.glide.load.engine.Resource` @kind object;
  #L2b98b0.  call temp:= `getSize`(v0) @signature `Lcom/bumptech/glide/load/engine/Resource;.getSize:()I` @kind interface;
  #L2b98b6.  v0:= temp;
  #L2b98b8.  return v0;
}
procedure `boolean` `isCacheable`(`com.bumptech.glide.load.engine.EngineResource` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/EngineResource;.isCacheable:()Z` @AccessFlag  {
    temp;
    v0;

  #L2b9894.  v0:= v1.`com.bumptech.glide.load.engine.EngineResource.isCacheable` @type ^`boolean` @kind boolean;
  #L2b9898.  return v0;
}
procedure `void` `recycle`(`com.bumptech.glide.load.engine.EngineResource` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/EngineResource;.recycle:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b9984.  v0:= v2.`com.bumptech.glide.load.engine.EngineResource.acquired` @type ^`int`;
  #L2b9988.  if v0 > 0 then goto L2b99b6;
  #L2b998c.  v0:= v2.`com.bumptech.glide.load.engine.EngineResource.isRecycled` @type ^`boolean` @kind boolean;
  #L2b9990.  if v0 != 0 then goto L2b99a6;
  #L2b9994.  v0:= 1I;
  #L2b9996.  v2.`com.bumptech.glide.load.engine.EngineResource.isRecycled` @type ^`boolean` := v0 @kind boolean;
  #L2b999a.  v0:= v2.`com.bumptech.glide.load.engine.EngineResource.resource` @type ^`com.bumptech.glide.load.engine.Resource` @kind object;
  #L2b999e.  call `recycle`(v0) @signature `Lcom/bumptech/glide/load/engine/Resource;.recycle:()V` @kind interface;
  #L2b99a4.  return @kind void;
  #L2b99a6.  v0:= new `java.lang.IllegalStateException`;
  #L2b99aa.  v1:= "Cannot recycle a resource that has already been recycled" @kind object;
  #L2b99ae.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b99b4.  throw v0;
  #L2b99b6.  v0:= new `java.lang.IllegalStateException`;
  #L2b99ba.  v1:= "Cannot recycle a resource while it is still acquired" @kind object;
  #L2b99be.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b99c4.  throw v0;
}
procedure `void` `release`(`com.bumptech.glide.load.engine.EngineResource` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/EngineResource;.release:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2b99d8.  v0:= v2.`com.bumptech.glide.load.engine.EngineResource.acquired` @type ^`int`;
  #L2b99dc.  if v0 <= 0 then goto L2b9a2c;
  #L2b99e0.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L2b99e6.  v0:= temp @kind object;
  #L2b99e8.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L2b99ee.  v1:= temp @kind object;
  #L2b99f0.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2b99f6.  v0:= temp;
  #L2b99f8.  if v0 == 0 then goto L2b9a1c;
  #L2b99fc.  v0:= v2.`com.bumptech.glide.load.engine.EngineResource.acquired` @type ^`int`;
  #L2b9a00.  v0:= v0 + -1;
  #L2b9a04.  v2.`com.bumptech.glide.load.engine.EngineResource.acquired` @type ^`int` := v0;
  #L2b9a08.  if v0 != 0 then goto L2b9a1a;
  #L2b9a0c.  v0:= v2.`com.bumptech.glide.load.engine.EngineResource.listener` @type ^`com.bumptech.glide.load.engine.EngineResource$ResourceListener` @kind object;
  #L2b9a10.  v1:= v2.`com.bumptech.glide.load.engine.EngineResource.key` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L2b9a14.  call `onResourceReleased`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/engine/EngineResource$ResourceListener;.onResourceReleased:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/EngineResource;)V` @kind interface;
  #L2b9a1a.  return @kind void;
  #L2b9a1c.  v0:= new `java.lang.IllegalThreadStateException`;
  #L2b9a20.  v1:= "Must call release on the main thread" @kind object;
  #L2b9a24.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalThreadStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b9a2a.  throw v0;
  #L2b9a2c.  v0:= new `java.lang.IllegalStateException`;
  #L2b9a30.  v1:= "Cannot release a recycled or not yet acquired resource" @kind object;
  #L2b9a34.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b9a3a.  throw v0;
}
procedure `void` `setResourceListener`(`com.bumptech.glide.load.engine.EngineResource` v0 @kind this, `com.bumptech.glide.load.Key` v1 @kind object, `com.bumptech.glide.load.engine.EngineResource$ResourceListener` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/EngineResource;.setResourceListener:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/EngineResource$ResourceListener;)V` @AccessFlag  {
    temp;

  #L2b9a4c.  v0.`com.bumptech.glide.load.engine.EngineResource.key` @type ^`com.bumptech.glide.load.Key` := v1 @kind object;
  #L2b9a50.  v0.`com.bumptech.glide.load.engine.EngineResource.listener` @type ^`com.bumptech.glide.load.engine.EngineResource$ResourceListener` := v2 @kind object;
  #L2b9a54.  return @kind void;
}
