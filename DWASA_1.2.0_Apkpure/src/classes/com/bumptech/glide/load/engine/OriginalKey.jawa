record `com.bumptech.glide.load.engine.OriginalKey` @kind class @AccessFlag  extends `com.bumptech.glide.load.Key` @kind interface {
  `java.lang.String` `com.bumptech.glide.load.engine.OriginalKey.id` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.OriginalKey.signature` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.OriginalKey` v0 @kind this, `java.lang.String` v1 @kind object, `com.bumptech.glide.load.Key` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/OriginalKey;.<init>:(Ljava/lang/String;Lcom/bumptech/glide/load/Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ba328.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ba32e.  v0.`com.bumptech.glide.load.engine.OriginalKey.id` @type ^`java.lang.String` := v1 @kind object;
  #L2ba332.  v0.`com.bumptech.glide.load.engine.OriginalKey.signature` @type ^`com.bumptech.glide.load.Key` := v2 @kind object;
  #L2ba336.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.engine.OriginalKey` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/OriginalKey;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ba290.  v0:= 1I;
  #L2ba292.  if v4 != v5 then goto L2ba298;
  #L2ba296.  return v0;
  #L2ba298.  v1:= 0I;
  #L2ba29a.  if v5 == 0 then goto L2ba2e6;
  #L2ba29e.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2ba2a4.  v2:= temp @kind object;
  #L2ba2a6.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2ba2ac.  v3:= temp @kind object;
  #L2ba2ae.  if v2 == v3 then goto L2ba2b4;
  #L2ba2b2.  goto L2ba2e6;
  #L2ba2b4.  v5:= (`com.bumptech.glide.load.engine.OriginalKey`) v5 @kind object;
  #L2ba2b8.  v2:= v4.`com.bumptech.glide.load.engine.OriginalKey.id` @type ^`java.lang.String` @kind object;
  #L2ba2bc.  v3:= v5.`com.bumptech.glide.load.engine.OriginalKey.id` @type ^`java.lang.String` @kind object;
  #L2ba2c0.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2ba2c6.  v2:= temp;
  #L2ba2c8.  if v2 != 0 then goto L2ba2ce;
  #L2ba2cc.  return v1;
  #L2ba2ce.  v2:= v4.`com.bumptech.glide.load.engine.OriginalKey.signature` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L2ba2d2.  v5:= v5.`com.bumptech.glide.load.engine.OriginalKey.signature` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L2ba2d6.  call temp:= `equals`(v2, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2ba2dc.  v5:= temp;
  #L2ba2de.  if v5 != 0 then goto L2ba2e4;
  #L2ba2e2.  return v1;
  #L2ba2e4.  return v0;
  #L2ba2e6.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.engine.OriginalKey` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/OriginalKey;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ba2f8.  v0:= v2.`com.bumptech.glide.load.engine.OriginalKey.id` @type ^`java.lang.String` @kind object;
  #L2ba2fc.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2ba302.  v0:= temp;
  #L2ba304.  v0:= v0 * 31;
  #L2ba308.  v1:= v2.`com.bumptech.glide.load.engine.OriginalKey.signature` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L2ba30c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2ba312.  v1:= temp;
  #L2ba314.  v0:= v0 + v1 @kind int;
  #L2ba316.  return v0;
}
procedure `void` `updateDiskCacheKey`(`com.bumptech.glide.load.engine.OriginalKey` v2 @kind this, `java.security.MessageDigest` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/OriginalKey;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ba348.  v0:= v2.`com.bumptech.glide.load.engine.OriginalKey.id` @type ^`java.lang.String` @kind object;
  #L2ba34c.  v1:= "UTF-8" @kind object;
  #L2ba350.  call temp:= `getBytes`(v0, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L2ba356.  v0:= temp @kind object;
  #L2ba358.  call `update`(v3, v0) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L2ba35e.  v0:= v2.`com.bumptech.glide.load.engine.OriginalKey.signature` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L2ba362.  call `updateDiskCacheKey`(v0, v3) @signature `Lcom/bumptech/glide/load/Key;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @kind interface;
  #L2ba368.  return @kind void;
}
