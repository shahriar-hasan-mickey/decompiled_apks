record `com.bumptech.glide.request.Request` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `void` `begin`() @signature `Lcom/bumptech/glide/request/Request;.begin:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `clear`() @signature `Lcom/bumptech/glide/request/Request;.clear:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isCancelled`() @signature `Lcom/bumptech/glide/request/Request;.isCancelled:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isComplete`() @signature `Lcom/bumptech/glide/request/Request;.isComplete:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isFailed`() @signature `Lcom/bumptech/glide/request/Request;.isFailed:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isPaused`() @signature `Lcom/bumptech/glide/request/Request;.isPaused:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isResourceSet`() @signature `Lcom/bumptech/glide/request/Request;.isResourceSet:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isRunning`() @signature `Lcom/bumptech/glide/request/Request;.isRunning:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `pause`() @signature `Lcom/bumptech/glide/request/Request;.pause:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `recycle`() @signature `Lcom/bumptech/glide/request/Request;.recycle:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
