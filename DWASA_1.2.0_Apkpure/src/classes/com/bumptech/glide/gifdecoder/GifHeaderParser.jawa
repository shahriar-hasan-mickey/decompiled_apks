record `com.bumptech.glide.gifdecoder.GifHeaderParser` @kind class @AccessFlag PUBLIC {
  `byte`[] `com.bumptech.glide.gifdecoder.GifHeaderParser.block` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.gifdecoder.GifHeaderParser.blockSize` @AccessFlag PRIVATE;
  `com.bumptech.glide.gifdecoder.GifHeader` `com.bumptech.glide.gifdecoder.GifHeaderParser.header` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @AccessFlag PRIVATE;
}
global `int` `@@com.bumptech.glide.gifdecoder.GifHeaderParser.DEFAULT_FRAME_DELAY` @AccessFlag STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifdecoder.GifHeaderParser.MAX_BLOCK_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifdecoder.GifHeaderParser.MIN_FRAME_DELAY` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@com.bumptech.glide.gifdecoder.GifHeaderParser.TAG` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b533c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b5342.  v0:= 256I;
  #L2b5346.  v0:= new `byte`[v0];
  #L2b534a.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.block` @type ^`byte`[] := v0 @kind object;
  #L2b534e.  v0:= 0I;
  #L2b5350.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.blockSize` @type ^`int` := v0;
  #L2b5354.  return @kind void;
}
procedure `boolean` `err`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.err:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2b507c.  v0:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5080.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.status` @type ^`int`;
  #L2b5084.  if v0 == 0 then goto L2b508c;
  #L2b5088.  v0:= 1I;
  #L2b508a.  goto L2b508e;
  #L2b508c.  v0:= 0I;
  #L2b508e.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2b5164.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` @kind object;
  #L2b5168.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L2b516e.  v0:= temp;
  #L2b5170.  v0:= v0 ^& 255;
  #L2b5174.  goto L2b5182;
  #L2b5176.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b517a.  v1:= 1I;
  #L2b517c.  v0.`com.bumptech.glide.gifdecoder.GifHeader.status` @type ^`int` := v1;
  #L2b5180.  v0:= 0I;
  #L2b5182.  return v0;
  catch `java.lang.Exception` @[L2b5164..L2b5170] goto L2b5176;
}
procedure `void` `readBitmap`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v8 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readBitmap:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2b5384.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5388.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b538c.  call temp:= `readShort`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readShort:()I` @kind direct;
  #L2b5392.  v1:= temp;
  #L2b5394.  v0.`com.bumptech.glide.gifdecoder.GifFrame.ix` @type ^`int` := v1;
  #L2b5398.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b539c.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b53a0.  call temp:= `readShort`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readShort:()I` @kind direct;
  #L2b53a6.  v1:= temp;
  #L2b53a8.  v0.`com.bumptech.glide.gifdecoder.GifFrame.iy` @type ^`int` := v1;
  #L2b53ac.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b53b0.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b53b4.  call temp:= `readShort`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readShort:()I` @kind direct;
  #L2b53ba.  v1:= temp;
  #L2b53bc.  v0.`com.bumptech.glide.gifdecoder.GifFrame.iw` @type ^`int` := v1;
  #L2b53c0.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b53c4.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b53c8.  call temp:= `readShort`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readShort:()I` @kind direct;
  #L2b53ce.  v1:= temp;
  #L2b53d0.  v0.`com.bumptech.glide.gifdecoder.GifFrame.ih` @type ^`int` := v1;
  #L2b53d4.  call temp:= `read`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b53da.  v0:= temp;
  #L2b53dc.  v1:= v0 ^& 128;
  #L2b53e0.  v2:= 0I;
  #L2b53e2.  v3:= 1I;
  #L2b53e4.  if v1 == 0 then goto L2b53ec;
  #L2b53e8.  v1:= 1I;
  #L2b53ea.  goto L2b53ee;
  #L2b53ec.  v1:= 0I;
  #L2b53ee.  v4:= 2.0D;
  #L2b53f2.  v6:= v0 ^& 7;
  #L2b53f6.  v6:= v6 + v3 @kind int;
  #L2b53f8.  v6:= (`double`) v6 @kind i2d;
  #L2b53fa.  call temp:= `pow`(v4, v6) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2b5400.  v4:= temp @kind wide;
  #L2b5402.  v4:= (`int`) v4 @kind d2i;
  #L2b5404.  v5:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5408.  v5:= v5.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b540c.  v0:= v0 ^& 64;
  #L2b5410.  if v0 == 0 then goto L2b5416;
  #L2b5414.  v2:= 1I;
  #L2b5416.  v5.`com.bumptech.glide.gifdecoder.GifFrame.interlace` @type ^`boolean` := v2 @kind boolean;
  #L2b541a.  if v1 == 0 then goto L2b5434;
  #L2b541e.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5422.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b5426.  call temp:= `readColorTable`(v8, v4) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readColorTable:(I)[I` @kind direct;
  #L2b542c.  v1:= temp @kind object;
  #L2b542e.  v0.`com.bumptech.glide.gifdecoder.GifFrame.lct` @type ^`int`[] := v1 @kind object;
  #L2b5432.  goto L2b5442;
  #L2b5434.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5438.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b543c.  v1:= 0I;
  #L2b543e.  v0.`com.bumptech.glide.gifdecoder.GifFrame.lct` @type ^`int`[] := v1 @kind object;
  #L2b5442.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5446.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b544a.  v1:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` @kind object;
  #L2b544e.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L2b5454.  v1:= temp;
  #L2b5456.  v0.`com.bumptech.glide.gifdecoder.GifFrame.bufferFrameStart` @type ^`int` := v1;
  #L2b545a.  call `skipImageData`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.skipImageData:()V` @kind direct;
  #L2b5460.  call temp:= `err`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.err:()Z` @kind direct;
  #L2b5466.  v0:= temp;
  #L2b5468.  if v0 == 0 then goto L2b546e;
  #L2b546c.  return @kind void;
  #L2b546e.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5472.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.frameCount` @type ^`int`;
  #L2b5476.  v1:= v1 + v3 @kind int;
  #L2b5478.  v0.`com.bumptech.glide.gifdecoder.GifHeader.frameCount` @type ^`int` := v1;
  #L2b547c.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5480.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.frames` @type ^`java.util.List` @kind object;
  #L2b5484.  v1:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5488.  v1:= v1.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b548c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2b5492.  return @kind void;
}
procedure `int` `readBlock`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v6 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readBlock:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2b51a4.  call temp:= `read`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b51aa.  v0:= temp;
  #L2b51ac.  v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.blockSize` @type ^`int` := v0;
  #L2b51b0.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.blockSize` @type ^`int`;
  #L2b51b4.  v1:= 0I;
  #L2b51b6.  if v0 <= 0 then goto L2b5246;
  #L2b51ba.  v0:= 0I;
  #L2b51bc.  v2:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.blockSize` @type ^`int`;
  #L2b51c0.  if v1 >= v2 then goto L2b5246;
  #L2b51c4.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.blockSize` @type ^`int`;
  #L2b51c8.  v0:= v0 - v1 @kind int;
  #L2b51ca.  v2:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` @kind object;
  #L2b51ce.  v3:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.block` @type ^`byte`[] @kind object;
  #L2b51d2.  call temp:= `get`(v2, v3, v1, v0) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2b51d8.  v1:= v1 + v0 @kind int;
  #L2b51da.  goto L2b51bc;
  #L2b51dc.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L2b51de.  v3:= 3I;
  #L2b51e0.  v4:= "GifHeaderParser" @kind object;
  #L2b51e4.  call temp:= `isLoggable`(v4, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2b51ea.  v3:= temp;
  #L2b51ec.  if v3 == 0 then goto L2b523c;
  #L2b51f0.  v3:= new `java.lang.StringBuilder`;
  #L2b51f4.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b51fa.  v5:= "Error Reading Block n: " @kind object;
  #L2b51fe.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b5204.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b520a.  v5:= " count: " @kind object;
  #L2b520e.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b5214.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b521a.  v0:= " blockSize: " @kind object;
  #L2b521e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b5224.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.blockSize` @type ^`int`;
  #L2b5228.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b522e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b5234.  v0:= temp @kind object;
  #L2b5236.  call temp:= `d`(v4, v0, v2) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2b523c.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5240.  v2:= 1I;
  #L2b5242.  v0.`com.bumptech.glide.gifdecoder.GifHeader.status` @type ^`int` := v2;
  #L2b5246.  return v1;
  catch `java.lang.Exception` @[L2b51bc..L2b51d8] goto L2b51dc;
}
procedure `int`[] `readColorTable`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v9 @kind this, `int` v10 ) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readColorTable:(I)[I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2b5288.  v0:= v10 * 3;
  #L2b528c.  v0:= new `byte`[v0];
  #L2b5290.  v1:= 0I;
  #L2b5292.  v2:= v9.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` @kind object;
  #L2b5296.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2b529c.  v2:= 256I;
  #L2b52a0.  v1:= new `int`[v2];
  #L2b52a4.  v2:= 0I;
  #L2b52a6.  v3:= 0I;
  #L2b52a8.  if v2 >= v10 then goto L2b5318;
  #L2b52ac.  v4:= v3 + 1;
  #L2b52b0.  v3:= v0[v3] @kind byte;
  #L2b52b4.  v3:= v3 ^& 255;
  #L2b52b8.  v5:= v4 + 1;
  #L2b52bc.  v4:= v0[v4] @kind byte;
  #L2b52c0.  v4:= v4 ^& 255;
  #L2b52c4.  v6:= v5 + 1;
  #L2b52c8.  v5:= v0[v5] @kind byte;
  #L2b52cc.  v5:= v5 ^& 255;
  #L2b52d0.  v7:= v2 + 1;
  #L2b52d4.  v8:= -16777216I;
  #L2b52d8.  v3:= v3 ^< 16;
  #L2b52dc.  v3:= v3 ^| v8 @kind int;
  #L2b52de.  v4:= v4 ^< 8;
  #L2b52e2.  v3:= v3 ^| v4 @kind int;
  #L2b52e4.  v3:= v3 ^| v5 @kind int;
  #L2b52e6.  v1[v2]:= v3;
  #L2b52ea.  v3:= v6;
  #L2b52ec.  v2:= v7;
  #L2b52ee.  goto L2b52a8;
  #L2b52f0.  v10:= Exception @type ^`java.nio.BufferUnderflowException` @kind object;
  #L2b52f2.  v0:= "GifHeaderParser" @kind object;
  #L2b52f6.  v2:= 3I;
  #L2b52f8.  call temp:= `isLoggable`(v0, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2b52fe.  v2:= temp;
  #L2b5300.  if v2 == 0 then goto L2b530e;
  #L2b5304.  v2:= "Format Error Reading Color Table" @kind object;
  #L2b5308.  call temp:= `d`(v0, v2, v10) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2b530e.  v10:= v9.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5312.  v0:= 1I;
  #L2b5314.  v10.`com.bumptech.glide.gifdecoder.GifHeader.status` @type ^`int` := v0;
  #L2b5318.  return v1 @kind object;
  catch `java.nio.BufferUnderflowException` @[L2b5292..L2b52ea] goto L2b52f0;
}
procedure `void` `readContents`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v5 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readContents:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2b54a4.  v0:= 0I;
  #L2b54a6.  v1:= 0I;
  #L2b54a8.  if v1 != 0 then goto L2b55cc;
  #L2b54ac.  call temp:= `err`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.err:()Z` @kind direct;
  #L2b54b2.  v2:= temp;
  #L2b54b4.  if v2 != 0 then goto L2b55cc;
  #L2b54b8.  call temp:= `read`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b54be.  v2:= temp;
  #L2b54c0.  v3:= 33I;
  #L2b54c4.  v4:= 1I;
  #L2b54c6.  if v2 == v3 then goto L2b550e;
  #L2b54ca.  v3:= 44I;
  #L2b54ce.  if v2 == v3 then goto L2b54e8;
  #L2b54d2.  v3:= 59I;
  #L2b54d6.  if v2 == v3 then goto L2b54e4;
  #L2b54da.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b54de.  v2.`com.bumptech.glide.gifdecoder.GifHeader.status` @type ^`int` := v4;
  #L2b54e2.  goto L2b54a8;
  #L2b54e4.  v1:= 1I;
  #L2b54e6.  goto L2b54a8;
  #L2b54e8.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b54ec.  v2:= v2.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b54f0.  if v2 != 0 then goto L2b5506;
  #L2b54f4.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b54f8.  v3:= new `com.bumptech.glide.gifdecoder.GifFrame`;
  #L2b54fc.  call `<init>`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifFrame;.<init>:()V` @kind direct;
  #L2b5502.  v2.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` := v3 @kind object;
  #L2b5506.  call `readBitmap`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readBitmap:()V` @kind direct;
  #L2b550c.  goto L2b54a8;
  #L2b550e.  call temp:= `read`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b5514.  v2:= temp;
  #L2b5516.  if v2 == v4 then goto L2b55c2;
  #L2b551a.  v3:= 249I;
  #L2b551e.  if v2 == v3 then goto L2b55a6;
  #L2b5522.  v3:= 254I;
  #L2b5526.  if v2 == v3 then goto L2b559e;
  #L2b552a.  v3:= 255I;
  #L2b552e.  if v2 == v3 then goto L2b553a;
  #L2b5532.  call `skip`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.skip:()V` @kind direct;
  #L2b5538.  goto L2b54a8;
  #L2b553a.  call temp:= `readBlock`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readBlock:()I` @kind direct;
  #L2b5540.  v2:= "" @kind object;
  #L2b5544.  v3:= v2 @kind object;
  #L2b5546.  v2:= 0I;
  #L2b5548.  v4:= 11I;
  #L2b554c.  if v2 >= v4 then goto L2b557e;
  #L2b5550.  v4:= new `java.lang.StringBuilder`;
  #L2b5554.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b555a.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b5560.  v3:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.block` @type ^`byte`[] @kind object;
  #L2b5564.  v3:= v3[v2] @kind byte;
  #L2b5568.  v3:= (`char`) v3 @kind i2c;
  #L2b556a.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b5570.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b5576.  v3:= temp @kind object;
  #L2b5578.  v2:= v2 + 1;
  #L2b557c.  goto L2b5548;
  #L2b557e.  v2:= "NETSCAPE2.0" @kind object;
  #L2b5582.  call temp:= `equals`(v3, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2b5588.  v2:= temp;
  #L2b558a.  if v2 == 0 then goto L2b5596;
  #L2b558e.  call `readNetscapeExt`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readNetscapeExt:()V` @kind direct;
  #L2b5594.  goto L2b54a8;
  #L2b5596.  call `skip`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.skip:()V` @kind direct;
  #L2b559c.  goto L2b54a8;
  #L2b559e.  call `skip`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.skip:()V` @kind direct;
  #L2b55a4.  goto L2b54a8;
  #L2b55a6.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b55aa.  v3:= new `com.bumptech.glide.gifdecoder.GifFrame`;
  #L2b55ae.  call `<init>`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifFrame;.<init>:()V` @kind direct;
  #L2b55b4.  v2.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` := v3 @kind object;
  #L2b55b8.  call `readGraphicControlExt`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readGraphicControlExt:()V` @kind direct;
  #L2b55be.  goto L2b54a8;
  #L2b55c2.  call `skip`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.skip:()V` @kind direct;
  #L2b55c8.  goto L2b54a8;
  #L2b55cc.  return @kind void;
}
procedure `void` `readGraphicControlExt`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readGraphicControlExt:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2b55e0.  call temp:= `read`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b55e6.  call temp:= `read`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b55ec.  v0:= temp;
  #L2b55ee.  v1:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b55f2.  v1:= v1.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b55f6.  v2:= v0 ^& 28;
  #L2b55fa.  v2:= v2 ^> 2;
  #L2b55fe.  v1.`com.bumptech.glide.gifdecoder.GifFrame.dispose` @type ^`int` := v2;
  #L2b5602.  v1:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5606.  v1:= v1.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b560a.  v1:= v1.`com.bumptech.glide.gifdecoder.GifFrame.dispose` @type ^`int`;
  #L2b560e.  v2:= 1I;
  #L2b5610.  if v1 != 0 then goto L2b5620;
  #L2b5614.  v1:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5618.  v1:= v1.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b561c.  v1.`com.bumptech.glide.gifdecoder.GifFrame.dispose` @type ^`int` := v2;
  #L2b5620.  v1:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5624.  v1:= v1.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b5628.  v0:= v0 ^& v2 @kind int;
  #L2b562a.  if v0 == 0 then goto L2b5630;
  #L2b562e.  goto L2b5632;
  #L2b5630.  v2:= 0I;
  #L2b5632.  v1.`com.bumptech.glide.gifdecoder.GifFrame.transparency` @type ^`boolean` := v2 @kind boolean;
  #L2b5636.  call temp:= `readShort`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readShort:()I` @kind direct;
  #L2b563c.  v0:= temp;
  #L2b563e.  v1:= 3I;
  #L2b5640.  v2:= 10I;
  #L2b5644.  if v0 >= v1 then goto L2b564c;
  #L2b5648.  v0:= 10I;
  #L2b564c.  v1:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5650.  v1:= v1.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b5654.  v0:= v0 * 10;
  #L2b5658.  v1.`com.bumptech.glide.gifdecoder.GifFrame.delay` @type ^`int` := v0;
  #L2b565c.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5660.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.currentFrame` @type ^`com.bumptech.glide.gifdecoder.GifFrame` @kind object;
  #L2b5664.  call temp:= `read`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b566a.  v1:= temp;
  #L2b566c.  v0.`com.bumptech.glide.gifdecoder.GifFrame.transIndex` @type ^`int` := v1;
  #L2b5670.  call temp:= `read`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b5676.  return @kind void;
}
procedure `void` `readHeader`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readHeader:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2b5688.  v0:= "" @kind object;
  #L2b568c.  v1:= 0I;
  #L2b568e.  v2:= 6I;
  #L2b5690.  if v1 >= v2 then goto L2b56c2;
  #L2b5694.  v2:= new `java.lang.StringBuilder`;
  #L2b5698.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b569e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b56a4.  call temp:= `read`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b56aa.  v0:= temp;
  #L2b56ac.  v0:= (`char`) v0 @kind i2c;
  #L2b56ae.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b56b4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b56ba.  v0:= temp @kind object;
  #L2b56bc.  v1:= v1 + 1;
  #L2b56c0.  goto L2b568e;
  #L2b56c2.  v1:= "GIF" @kind object;
  #L2b56c6.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2b56cc.  v0:= temp;
  #L2b56ce.  if v0 != 0 then goto L2b56de;
  #L2b56d2.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b56d6.  v1:= 1I;
  #L2b56d8.  v0.`com.bumptech.glide.gifdecoder.GifHeader.status` @type ^`int` := v1;
  #L2b56dc.  return @kind void;
  #L2b56de.  call `readLSD`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readLSD:()V` @kind direct;
  #L2b56e4.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b56e8.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.gctFlag` @type ^`boolean` @kind boolean;
  #L2b56ec.  if v0 == 0 then goto L2b5728;
  #L2b56f0.  call temp:= `err`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.err:()Z` @kind direct;
  #L2b56f6.  v0:= temp;
  #L2b56f8.  if v0 != 0 then goto L2b5728;
  #L2b56fc.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5700.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.gctSize` @type ^`int`;
  #L2b5704.  call temp:= `readColorTable`(v3, v1) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readColorTable:(I)[I` @kind direct;
  #L2b570a.  v1:= temp @kind object;
  #L2b570c.  v0.`com.bumptech.glide.gifdecoder.GifHeader.gct` @type ^`int`[] := v1 @kind object;
  #L2b5710.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5714.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.gct` @type ^`int`[] @kind object;
  #L2b5718.  v2:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b571c.  v2:= v2.`com.bumptech.glide.gifdecoder.GifHeader.bgIndex` @type ^`int`;
  #L2b5720.  v1:= v1[v2];
  #L2b5724.  v0.`com.bumptech.glide.gifdecoder.GifHeader.bgColor` @type ^`int` := v1;
  #L2b5728.  return @kind void;
}
procedure `void` `readLSD`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readLSD:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2b573c.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5740.  call temp:= `readShort`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readShort:()I` @kind direct;
  #L2b5746.  v1:= temp;
  #L2b5748.  v0.`com.bumptech.glide.gifdecoder.GifHeader.width` @type ^`int` := v1;
  #L2b574c.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5750.  call temp:= `readShort`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readShort:()I` @kind direct;
  #L2b5756.  v1:= temp;
  #L2b5758.  v0.`com.bumptech.glide.gifdecoder.GifHeader.height` @type ^`int` := v1;
  #L2b575c.  call temp:= `read`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b5762.  v0:= temp;
  #L2b5764.  v1:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b5768.  v2:= v0 ^& 128;
  #L2b576c.  if v2 == 0 then goto L2b5774;
  #L2b5770.  v2:= 1I;
  #L2b5772.  goto L2b5776;
  #L2b5774.  v2:= 0I;
  #L2b5776.  v1.`com.bumptech.glide.gifdecoder.GifHeader.gctFlag` @type ^`boolean` := v2 @kind boolean;
  #L2b577a.  v1:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b577e.  v2:= 2I;
  #L2b5780.  v0:= v0 ^& 7;
  #L2b5784.  v0:= v2 ^< v0 @kind int;
  #L2b5788.  v1.`com.bumptech.glide.gifdecoder.GifHeader.gctSize` @type ^`int` := v0;
  #L2b578c.  call temp:= `read`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b5792.  v0:= temp;
  #L2b5794.  v1.`com.bumptech.glide.gifdecoder.GifHeader.bgIndex` @type ^`int` := v0;
  #L2b5798.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b579c.  call temp:= `read`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b57a2.  v1:= temp;
  #L2b57a4.  v0.`com.bumptech.glide.gifdecoder.GifHeader.pixelAspect` @type ^`int` := v1;
  #L2b57a8.  return @kind void;
}
procedure `void` `readNetscapeExt`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readNetscapeExt:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2b57bc.  call temp:= `readBlock`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readBlock:()I` @kind direct;
  #L2b57c2.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.block` @type ^`byte`[] @kind object;
  #L2b57c6.  v1:= 0I;
  #L2b57c8.  v1:= v0[v1] @kind byte;
  #L2b57cc.  v2:= 1I;
  #L2b57ce.  if v1 != v2 then goto L2b57f2;
  #L2b57d2.  v1:= v0[v2] @kind byte;
  #L2b57d6.  v1:= v1 ^& 255;
  #L2b57da.  v2:= 2I;
  #L2b57dc.  v0:= v0[v2] @kind byte;
  #L2b57e0.  v0:= v0 ^& 255;
  #L2b57e4.  v2:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b57e8.  v0:= v0 ^< 8;
  #L2b57ec.  v0:= v0 ^| v1 @kind int;
  #L2b57ee.  v2.`com.bumptech.glide.gifdecoder.GifHeader.loopCount` @type ^`int` := v0;
  #L2b57f2.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.blockSize` @type ^`int`;
  #L2b57f6.  if v0 <= 0 then goto L2b5806;
  #L2b57fa.  call temp:= `err`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.err:()Z` @kind direct;
  #L2b5800.  v0:= temp;
  #L2b5802.  if v0 == 0 then goto L2b57bc;
  #L2b5806.  return @kind void;
}
procedure `int` `readShort`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readShort:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2b5268.  v0:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` @kind object;
  #L2b526c.  call temp:= `getShort`(v0) @signature `Ljava/nio/ByteBuffer;.getShort:()S` @kind virtual;
  #L2b5272.  v0:= temp;
  #L2b5274.  return v0;
}
procedure `void` `reset`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.reset:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2b5818.  v0:= 0I;
  #L2b581a.  v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L2b581e.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.block` @type ^`byte`[] @kind object;
  #L2b5822.  v1:= 0I;
  #L2b5824.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L2b582a.  v0:= new `com.bumptech.glide.gifdecoder.GifHeader`;
  #L2b582e.  call `<init>`(v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeader;.<init>:()V` @kind direct;
  #L2b5834.  v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` := v0 @kind object;
  #L2b5838.  v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.blockSize` @type ^`int` := v1;
  #L2b583c.  return @kind void;
}
procedure `void` `skip`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.skip:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2b5850.  call temp:= `read`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b5856.  v0:= temp;
  #L2b5858.  v1:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` @kind object;
  #L2b585c.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L2b5862.  v2:= temp;
  #L2b5864.  v2:= v2 + v0 @kind int;
  #L2b5866.  call temp:= `position`(v1, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L2b586c.  if v0 > 0 then goto L2b5850;
  #L2b5870.  return @kind void;
}
procedure `void` `skipImageData`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v0 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.skipImageData:()V` @AccessFlag PRIVATE {
    temp;

  #L2b5884.  call temp:= `read`(v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.read:()I` @kind direct;
  #L2b588a.  call `skip`(v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.skip:()V` @kind direct;
  #L2b5890.  return @kind void;
}
procedure `void` `clear`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b5368.  v0:= 0I;
  #L2b536a.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L2b536e.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` := v0 @kind object;
  #L2b5372.  return @kind void;
}
procedure `com.bumptech.glide.gifdecoder.GifHeader` `parseHeader`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.parseHeader:()Lcom/bumptech/glide/gifdecoder/GifHeader;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b50a0.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` @kind object;
  #L2b50a4.  if v0 == 0 then goto L2b50ee;
  #L2b50a8.  call temp:= `err`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.err:()Z` @kind direct;
  #L2b50ae.  v0:= temp;
  #L2b50b0.  if v0 == 0 then goto L2b50ba;
  #L2b50b4.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b50b8.  return v0 @kind object;
  #L2b50ba.  call `readHeader`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readHeader:()V` @kind direct;
  #L2b50c0.  call temp:= `err`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.err:()Z` @kind direct;
  #L2b50c6.  v0:= temp;
  #L2b50c8.  if v0 != 0 then goto L2b50e8;
  #L2b50cc.  call `readContents`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.readContents:()V` @kind direct;
  #L2b50d2.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b50d6.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.frameCount` @type ^`int`;
  #L2b50da.  if v0 >= 0 then goto L2b50e8;
  #L2b50de.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b50e2.  v1:= 1I;
  #L2b50e4.  v0.`com.bumptech.glide.gifdecoder.GifHeader.status` @type ^`int` := v1;
  #L2b50e8.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b50ec.  return v0 @kind object;
  #L2b50ee.  v0:= new `java.lang.IllegalStateException`;
  #L2b50f2.  v1:= "You must call setData() before parseHeader()" @kind object;
  #L2b50f6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b50fc.  throw v0;
}
procedure `com.bumptech.glide.gifdecoder.GifHeaderParser` `setData`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.setData:([B)Lcom/bumptech/glide/gifdecoder/GifHeaderParser;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b5110.  call `reset`(v1) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.reset:()V` @kind direct;
  #L2b5116.  if v2 == 0 then goto L2b5140;
  #L2b511a.  call temp:= `wrap`(v2) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L2b5120.  v2:= temp @kind object;
  #L2b5122.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L2b5126.  v2:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` @kind object;
  #L2b512a.  call temp:= `rewind`(v2) @signature `Ljava/nio/ByteBuffer;.rewind:()Ljava/nio/Buffer;` @kind virtual;
  #L2b5130.  v2:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` @kind object;
  #L2b5134.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L2b5138.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2b513e.  goto L2b5150;
  #L2b5140.  v2:= 0I;
  #L2b5142.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.rawData` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L2b5146.  v2:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.header` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L2b514a.  v0:= 2I;
  #L2b514c.  v2.`com.bumptech.glide.gifdecoder.GifHeader.status` @type ^`int` := v0;
  #L2b5150.  return v1 @kind object;
}
