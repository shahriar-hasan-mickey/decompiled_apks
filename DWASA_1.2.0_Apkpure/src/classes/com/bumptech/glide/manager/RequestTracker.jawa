record `com.bumptech.glide.manager.RequestTracker` @kind class @AccessFlag PUBLIC {
  `boolean` `com.bumptech.glide.manager.RequestTracker.isPaused` @AccessFlag PRIVATE;
  `java.util.List` `com.bumptech.glide.manager.RequestTracker.pendingRequests` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `com.bumptech.glide.manager.RequestTracker.requests` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.manager.RequestTracker` v1 @kind this) @signature `Lcom/bumptech/glide/manager/RequestTracker;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c6670.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c6676.  v0:= new `java.util.WeakHashMap`;
  #L2c667a.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L2c6680.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L2c6686.  v0:= temp @kind object;
  #L2c6688.  v1.`com.bumptech.glide.manager.RequestTracker.requests` @type ^`java.util.Set` := v0 @kind object;
  #L2c668c.  v0:= new `java.util.ArrayList`;
  #L2c6690.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2c6696.  v1.`com.bumptech.glide.manager.RequestTracker.pendingRequests` @type ^`java.util.List` := v0 @kind object;
  #L2c669a.  return @kind void;
}
procedure `void` `addRequest`(`com.bumptech.glide.manager.RequestTracker` v1 @kind this, `com.bumptech.glide.request.Request` v2 @kind object) @signature `Lcom/bumptech/glide/manager/RequestTracker;.addRequest:(Lcom/bumptech/glide/request/Request;)V` @AccessFlag  {
    temp;
    v0;

  #L2c66ac.  v0:= v1.`com.bumptech.glide.manager.RequestTracker.requests` @type ^`java.util.Set` @kind object;
  #L2c66b0.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2c66b6.  return @kind void;
}
procedure `void` `clearRequests`(`com.bumptech.glide.manager.RequestTracker` v2 @kind this) @signature `Lcom/bumptech/glide/manager/RequestTracker;.clearRequests:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c66c8.  v0:= v2.`com.bumptech.glide.manager.RequestTracker.requests` @type ^`java.util.Set` @kind object;
  #L2c66cc.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/util/Util;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2c66d2.  v0:= temp @kind object;
  #L2c66d4.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c66da.  v0:= temp @kind object;
  #L2c66dc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c66e2.  v1:= temp;
  #L2c66e4.  if v1 == 0 then goto L2c66fc;
  #L2c66e8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c66ee.  v1:= temp @kind object;
  #L2c66f0.  v1:= (`com.bumptech.glide.request.Request`) v1 @kind object;
  #L2c66f4.  call `clear`(v1) @signature `Lcom/bumptech/glide/request/Request;.clear:()V` @kind interface;
  #L2c66fa.  goto L2c66dc;
  #L2c66fc.  v0:= v2.`com.bumptech.glide.manager.RequestTracker.pendingRequests` @type ^`java.util.List` @kind object;
  #L2c6700.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2c6706.  return @kind void;
}
procedure `boolean` `isPaused`(`com.bumptech.glide.manager.RequestTracker` v1 @kind this) @signature `Lcom/bumptech/glide/manager/RequestTracker;.isPaused:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c6658.  v0:= v1.`com.bumptech.glide.manager.RequestTracker.isPaused` @type ^`boolean` @kind boolean;
  #L2c665c.  return v0;
}
procedure `void` `pauseRequests`(`com.bumptech.glide.manager.RequestTracker` v3 @kind this) @signature `Lcom/bumptech/glide/manager/RequestTracker;.pauseRequests:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c6718.  v0:= 1I;
  #L2c671a.  v3.`com.bumptech.glide.manager.RequestTracker.isPaused` @type ^`boolean` := v0 @kind boolean;
  #L2c671e.  v0:= v3.`com.bumptech.glide.manager.RequestTracker.requests` @type ^`java.util.Set` @kind object;
  #L2c6722.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/util/Util;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2c6728.  v0:= temp @kind object;
  #L2c672a.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c6730.  v0:= temp @kind object;
  #L2c6732.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c6738.  v1:= temp;
  #L2c673a.  if v1 == 0 then goto L2c6768;
  #L2c673e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c6744.  v1:= temp @kind object;
  #L2c6746.  v1:= (`com.bumptech.glide.request.Request`) v1 @kind object;
  #L2c674a.  call temp:= `isRunning`(v1) @signature `Lcom/bumptech/glide/request/Request;.isRunning:()Z` @kind interface;
  #L2c6750.  v2:= temp;
  #L2c6752.  if v2 == 0 then goto L2c6732;
  #L2c6756.  call `pause`(v1) @signature `Lcom/bumptech/glide/request/Request;.pause:()V` @kind interface;
  #L2c675c.  v2:= v3.`com.bumptech.glide.manager.RequestTracker.pendingRequests` @type ^`java.util.List` @kind object;
  #L2c6760.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2c6766.  goto L2c6732;
  #L2c6768.  return @kind void;
}
procedure `void` `removeRequest`(`com.bumptech.glide.manager.RequestTracker` v1 @kind this, `com.bumptech.glide.request.Request` v2 @kind object) @signature `Lcom/bumptech/glide/manager/RequestTracker;.removeRequest:(Lcom/bumptech/glide/request/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c677c.  v0:= v1.`com.bumptech.glide.manager.RequestTracker.requests` @type ^`java.util.Set` @kind object;
  #L2c6780.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2c6786.  v0:= v1.`com.bumptech.glide.manager.RequestTracker.pendingRequests` @type ^`java.util.List` @kind object;
  #L2c678a.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2c6790.  return @kind void;
}
procedure `void` `restartRequests`(`com.bumptech.glide.manager.RequestTracker` v3 @kind this) @signature `Lcom/bumptech/glide/manager/RequestTracker;.restartRequests:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c67a4.  v0:= v3.`com.bumptech.glide.manager.RequestTracker.requests` @type ^`java.util.Set` @kind object;
  #L2c67a8.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/util/Util;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2c67ae.  v0:= temp @kind object;
  #L2c67b0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c67b6.  v0:= temp @kind object;
  #L2c67b8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c67be.  v1:= temp;
  #L2c67c0.  if v1 == 0 then goto L2c680a;
  #L2c67c4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c67ca.  v1:= temp @kind object;
  #L2c67cc.  v1:= (`com.bumptech.glide.request.Request`) v1 @kind object;
  #L2c67d0.  call temp:= `isComplete`(v1) @signature `Lcom/bumptech/glide/request/Request;.isComplete:()Z` @kind interface;
  #L2c67d6.  v2:= temp;
  #L2c67d8.  if v2 != 0 then goto L2c67b8;
  #L2c67dc.  call temp:= `isCancelled`(v1) @signature `Lcom/bumptech/glide/request/Request;.isCancelled:()Z` @kind interface;
  #L2c67e2.  v2:= temp;
  #L2c67e4.  if v2 != 0 then goto L2c67b8;
  #L2c67e8.  call `pause`(v1) @signature `Lcom/bumptech/glide/request/Request;.pause:()V` @kind interface;
  #L2c67ee.  v2:= v3.`com.bumptech.glide.manager.RequestTracker.isPaused` @type ^`boolean` @kind boolean;
  #L2c67f2.  if v2 != 0 then goto L2c67fe;
  #L2c67f6.  call `begin`(v1) @signature `Lcom/bumptech/glide/request/Request;.begin:()V` @kind interface;
  #L2c67fc.  goto L2c67b8;
  #L2c67fe.  v2:= v3.`com.bumptech.glide.manager.RequestTracker.pendingRequests` @type ^`java.util.List` @kind object;
  #L2c6802.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2c6808.  goto L2c67b8;
  #L2c680a.  return @kind void;
}
procedure `void` `resumeRequests`(`com.bumptech.glide.manager.RequestTracker` v3 @kind this) @signature `Lcom/bumptech/glide/manager/RequestTracker;.resumeRequests:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c681c.  v0:= 0I;
  #L2c681e.  v3.`com.bumptech.glide.manager.RequestTracker.isPaused` @type ^`boolean` := v0 @kind boolean;
  #L2c6822.  v0:= v3.`com.bumptech.glide.manager.RequestTracker.requests` @type ^`java.util.Set` @kind object;
  #L2c6826.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/util/Util;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2c682c.  v0:= temp @kind object;
  #L2c682e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c6834.  v0:= temp @kind object;
  #L2c6836.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c683c.  v1:= temp;
  #L2c683e.  if v1 == 0 then goto L2c687a;
  #L2c6842.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c6848.  v1:= temp @kind object;
  #L2c684a.  v1:= (`com.bumptech.glide.request.Request`) v1 @kind object;
  #L2c684e.  call temp:= `isComplete`(v1) @signature `Lcom/bumptech/glide/request/Request;.isComplete:()Z` @kind interface;
  #L2c6854.  v2:= temp;
  #L2c6856.  if v2 != 0 then goto L2c6836;
  #L2c685a.  call temp:= `isCancelled`(v1) @signature `Lcom/bumptech/glide/request/Request;.isCancelled:()Z` @kind interface;
  #L2c6860.  v2:= temp;
  #L2c6862.  if v2 != 0 then goto L2c6836;
  #L2c6866.  call temp:= `isRunning`(v1) @signature `Lcom/bumptech/glide/request/Request;.isRunning:()Z` @kind interface;
  #L2c686c.  v2:= temp;
  #L2c686e.  if v2 != 0 then goto L2c6836;
  #L2c6872.  call `begin`(v1) @signature `Lcom/bumptech/glide/request/Request;.begin:()V` @kind interface;
  #L2c6878.  goto L2c6836;
  #L2c687a.  v0:= v3.`com.bumptech.glide.manager.RequestTracker.pendingRequests` @type ^`java.util.List` @kind object;
  #L2c687e.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2c6884.  return @kind void;
}
procedure `void` `runRequest`(`com.bumptech.glide.manager.RequestTracker` v1 @kind this, `com.bumptech.glide.request.Request` v2 @kind object) @signature `Lcom/bumptech/glide/manager/RequestTracker;.runRequest:(Lcom/bumptech/glide/request/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c6898.  v0:= v1.`com.bumptech.glide.manager.RequestTracker.requests` @type ^`java.util.Set` @kind object;
  #L2c689c.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2c68a2.  v0:= v1.`com.bumptech.glide.manager.RequestTracker.isPaused` @type ^`boolean` @kind boolean;
  #L2c68a6.  if v0 != 0 then goto L2c68b2;
  #L2c68aa.  call `begin`(v2) @signature `Lcom/bumptech/glide/request/Request;.begin:()V` @kind interface;
  #L2c68b0.  goto L2c68bc;
  #L2c68b2.  v0:= v1.`com.bumptech.glide.manager.RequestTracker.pendingRequests` @type ^`java.util.List` @kind object;
  #L2c68b6.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2c68bc.  return @kind void;
}
