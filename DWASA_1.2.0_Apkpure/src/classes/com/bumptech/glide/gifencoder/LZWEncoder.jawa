record `com.bumptech.glide.gifencoder.LZWEncoder` @kind class @AccessFlag  {
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.ClearCode` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.EOFCode` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.a_count` @AccessFlag ;
  `byte`[] `com.bumptech.glide.gifencoder.LZWEncoder.accum` @AccessFlag ;
  `boolean` `com.bumptech.glide.gifencoder.LZWEncoder.clear_flg` @AccessFlag ;
  `int`[] `com.bumptech.glide.gifencoder.LZWEncoder.codetab` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.curPixel` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.cur_bits` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.free_ent` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.g_init_bits` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.hsize` @AccessFlag ;
  `int`[] `com.bumptech.glide.gifencoder.LZWEncoder.htab` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.imgH` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.imgW` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.initCodeSize` @AccessFlag PRIVATE;
  `int`[] `com.bumptech.glide.gifencoder.LZWEncoder.masks` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.maxbits` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.maxcode` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.maxmaxcode` @AccessFlag ;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.n_bits` @AccessFlag ;
  `byte`[] `com.bumptech.glide.gifencoder.LZWEncoder.pixAry` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.gifencoder.LZWEncoder.remaining` @AccessFlag PRIVATE;
}
global `int` `@@com.bumptech.glide.gifencoder.LZWEncoder.BITS` @AccessFlag STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.LZWEncoder.EOF` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.LZWEncoder.HSIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`com.bumptech.glide.gifencoder.LZWEncoder` v2 @kind this, `int` v3 , `int` v4 , `byte`[] v5 @kind object, `int` v6 ) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.<init>:(II[BI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2b62ac.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b62b2.  v0:= 12I;
  #L2b62b6.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.maxbits` @type ^`int` := v0;
  #L2b62ba.  v0:= 4096I;
  #L2b62be.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.maxmaxcode` @type ^`int` := v0;
  #L2b62c2.  v0:= 5003I;
  #L2b62c6.  v1:= new `int`[v0];
  #L2b62ca.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.htab` @type ^`int`[] := v1 @kind object;
  #L2b62ce.  v1:= new `int`[v0];
  #L2b62d2.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.codetab` @type ^`int`[] := v1 @kind object;
  #L2b62d6.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.hsize` @type ^`int` := v0;
  #L2b62da.  v0:= 0I;
  #L2b62dc.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.free_ent` @type ^`int` := v0;
  #L2b62e0.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.clear_flg` @type ^`boolean` := v0 @kind boolean;
  #L2b62e4.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int` := v0;
  #L2b62e8.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.cur_bits` @type ^`int` := v0;
  #L2b62ec.  v0:= 17I;
  #L2b62f0.  v0:= new `int`[v0];
  #L2b62f4.  goto L2b6328;
  #L2b62fa.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.masks` @type ^`int`[] := v0 @kind object;
  #L2b62fe.  v0:= 256I;
  #L2b6302.  v0:= new `byte`[v0];
  #L2b6306.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.accum` @type ^`byte`[] := v0 @kind object;
  #L2b630a.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.imgW` @type ^`int` := v3;
  #L2b630e.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.imgH` @type ^`int` := v4;
  #L2b6312.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.pixAry` @type ^`byte`[] := v5 @kind object;
  #L2b6316.  v3:= 2I;
  #L2b6318.  call temp:= `max`(v3, v6) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2b631e.  v3:= temp;
  #L2b6320.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.initCodeSize` @type ^`int` := v3;
  #L2b6324.  return @kind void;
  #L2b6326.  
  #L2b6328.  v0:= (0I, 1I, 3I, 7I, 15I, 31I, 63I, 127I, 255I, 511I, 1023I, 2047I, 4095I, 8191I, 16383I, 32767I, 65535I) @kind object;
  #L2b6373.  goto L2b62fa;
}
procedure `int` `nextPixel`(`com.bumptech.glide.gifencoder.LZWEncoder` v3 @kind this) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.nextPixel:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2b626c.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.remaining` @type ^`int`;
  #L2b6270.  if v0 != 0 then goto L2b6278;
  #L2b6274.  v0:= -1I;
  #L2b6276.  return v0;
  #L2b6278.  v0:= v0 + -1;
  #L2b627c.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.remaining` @type ^`int` := v0;
  #L2b6280.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.pixAry` @type ^`byte`[] @kind object;
  #L2b6284.  v1:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.curPixel` @type ^`int`;
  #L2b6288.  v2:= v1 + 1;
  #L2b628c.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.curPixel` @type ^`int` := v2;
  #L2b6290.  v0:= v0[v1] @kind byte;
  #L2b6294.  v0:= v0 ^& 255;
  #L2b6298.  return v0;
}
procedure `int` `MAXCODE`(`com.bumptech.glide.gifencoder.LZWEncoder` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.MAXCODE:(I)I` @AccessFlag FINAL {
    temp;
    v0;

  #L2b6250.  v0:= 1I;
  #L2b6252.  v2:= v0 ^< v2 @kind int;
  #L2b6256.  v2:= v2 - v0 @kind int;
  #L2b6258.  return v2;
}
procedure `void` `char_out`(`com.bumptech.glide.gifencoder.LZWEncoder` v3 @kind this, `byte` v4 , `java.io.OutputStream` v5 @kind object) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.char_out:(BLjava/io/OutputStream;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2b6384.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.accum` @type ^`byte`[] @kind object;
  #L2b6388.  v1:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.a_count` @type ^`int`;
  #L2b638c.  v2:= v1 + 1;
  #L2b6390.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.a_count` @type ^`int` := v2;
  #L2b6394.  v0[v1]:= v4 @kind byte;
  #L2b6398.  v4:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.a_count` @type ^`int`;
  #L2b639c.  v0:= 254I;
  #L2b63a0.  if v4 < v0 then goto L2b63aa;
  #L2b63a4.  call `flush_char`(v3, v5) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.flush_char:(Ljava/io/OutputStream;)V` @kind virtual;
  #L2b63aa.  return @kind void;
}
procedure `void` `cl_block`(`com.bumptech.glide.gifencoder.LZWEncoder` v2 @kind this, `java.io.OutputStream` v3 @kind object) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.cl_block:(Ljava/io/OutputStream;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2b63bc.  v0:= v2.`com.bumptech.glide.gifencoder.LZWEncoder.hsize` @type ^`int`;
  #L2b63c0.  call `cl_hash`(v2, v0) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.cl_hash:(I)V` @kind virtual;
  #L2b63c6.  v0:= v2.`com.bumptech.glide.gifencoder.LZWEncoder.ClearCode` @type ^`int`;
  #L2b63ca.  v1:= v0 + 2;
  #L2b63ce.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.free_ent` @type ^`int` := v1;
  #L2b63d2.  v1:= 1I;
  #L2b63d4.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.clear_flg` @type ^`boolean` := v1 @kind boolean;
  #L2b63d8.  call `output`(v2, v0, v3) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.output:(ILjava/io/OutputStream;)V` @kind virtual;
  #L2b63de.  return @kind void;
}
procedure `void` `cl_hash`(`com.bumptech.glide.gifencoder.LZWEncoder` v3 @kind this, `int` v4 ) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.cl_hash:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2b63f0.  v0:= 0I;
  #L2b63f2.  if v0 >= v4 then goto L2b6406;
  #L2b63f6.  v1:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.htab` @type ^`int`[] @kind object;
  #L2b63fa.  v2:= -1I;
  #L2b63fc.  v1[v0]:= v2;
  #L2b6400.  v0:= v0 + 1;
  #L2b6404.  goto L2b63f2;
  #L2b6406.  return @kind void;
}
procedure `void` `compress`(`com.bumptech.glide.gifencoder.LZWEncoder` v9 @kind this, `int` v10 , `java.io.OutputStream` v11 @kind object) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.compress:(ILjava/io/OutputStream;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2b6418.  v9.`com.bumptech.glide.gifencoder.LZWEncoder.g_init_bits` @type ^`int` := v10;
  #L2b641c.  v0:= 0I;
  #L2b641e.  v9.`com.bumptech.glide.gifencoder.LZWEncoder.clear_flg` @type ^`boolean` := v0 @kind boolean;
  #L2b6422.  v1:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.g_init_bits` @type ^`int`;
  #L2b6426.  v9.`com.bumptech.glide.gifencoder.LZWEncoder.n_bits` @type ^`int` := v1;
  #L2b642a.  v1:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.n_bits` @type ^`int`;
  #L2b642e.  call temp:= `MAXCODE`(v9, v1) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.MAXCODE:(I)I` @kind virtual;
  #L2b6434.  v1:= temp;
  #L2b6436.  v9.`com.bumptech.glide.gifencoder.LZWEncoder.maxcode` @type ^`int` := v1;
  #L2b643a.  v1:= 1I;
  #L2b643c.  v10:= v10 - v1 @kind int;
  #L2b643e.  v10:= v1 ^< v10 @kind int;
  #L2b6442.  v9.`com.bumptech.glide.gifencoder.LZWEncoder.ClearCode` @type ^`int` := v10;
  #L2b6446.  v10:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.ClearCode` @type ^`int`;
  #L2b644a.  v2:= v10 + 1;
  #L2b644e.  v9.`com.bumptech.glide.gifencoder.LZWEncoder.EOFCode` @type ^`int` := v2;
  #L2b6452.  v10:= v10 + 2;
  #L2b6456.  v9.`com.bumptech.glide.gifencoder.LZWEncoder.free_ent` @type ^`int` := v10;
  #L2b645a.  v9.`com.bumptech.glide.gifencoder.LZWEncoder.a_count` @type ^`int` := v0;
  #L2b645e.  call temp:= `nextPixel`(v9) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.nextPixel:()I` @kind direct;
  #L2b6464.  v10:= temp;
  #L2b6466.  v2:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.hsize` @type ^`int`;
  #L2b646a.  v3:= 65536I;
  #L2b646e.  if v2 >= v3 then goto L2b647c;
  #L2b6472.  v0:= v0 + 1;
  #L2b6476.  v2:= v2 * 2;
  #L2b647a.  goto L2b646a;
  #L2b647c.  v0:= v0 - 8;
  #L2b6480.  v2:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.hsize` @type ^`int`;
  #L2b6484.  call `cl_hash`(v9, v2) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.cl_hash:(I)V` @kind virtual;
  #L2b648a.  v3:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.ClearCode` @type ^`int`;
  #L2b648e.  call `output`(v9, v3, v11) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.output:(ILjava/io/OutputStream;)V` @kind virtual;
  #L2b6494.  call temp:= `nextPixel`(v9) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.nextPixel:()I` @kind direct;
  #L2b649a.  v3:= temp;
  #L2b649c.  v4:= -1I;
  #L2b649e.  if v3 == v4 then goto L2b6536;
  #L2b64a2.  v4:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.maxbits` @type ^`int`;
  #L2b64a6.  v4:= v3 ^< v4 @kind int;
  #L2b64aa.  v4:= v4 + v10 @kind int;
  #L2b64ac.  v5:= v3 ^< v0 @kind int;
  #L2b64b0.  v5:= v5 ^~ v10 @kind int;
  #L2b64b2.  v6:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.htab` @type ^`int`[] @kind object;
  #L2b64b6.  v7:= v6[v5];
  #L2b64ba.  if v7 != v4 then goto L2b64c8;
  #L2b64be.  v10:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.codetab` @type ^`int`[] @kind object;
  #L2b64c2.  v10:= v10[v5];
  #L2b64c6.  goto L2b6494;
  #L2b64c8.  v6:= v6[v5];
  #L2b64cc.  if v6 < 0 then goto L2b6500;
  #L2b64d0.  v6:= v2 - v5 @kind int;
  #L2b64d4.  if v5 != 0 then goto L2b64da;
  #L2b64d8.  v6:= 1I;
  #L2b64da.  v5:= v5 - v6 @kind int;
  #L2b64dc.  if v5 >= 0 then goto L2b64e2;
  #L2b64e0.  v5:= v5 + v2 @kind int;
  #L2b64e2.  v7:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.htab` @type ^`int`[] @kind object;
  #L2b64e6.  v8:= v7[v5];
  #L2b64ea.  if v8 != v4 then goto L2b64f8;
  #L2b64ee.  v10:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.codetab` @type ^`int`[] @kind object;
  #L2b64f2.  v10:= v10[v5];
  #L2b64f6.  goto L2b6494;
  #L2b64f8.  v7:= v7[v5];
  #L2b64fc.  if v7 >= 0 then goto L2b64da;
  #L2b6500.  call `output`(v9, v10, v11) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.output:(ILjava/io/OutputStream;)V` @kind virtual;
  #L2b6506.  v10:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.free_ent` @type ^`int`;
  #L2b650a.  v6:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.maxmaxcode` @type ^`int`;
  #L2b650e.  if v10 >= v6 then goto L2b652c;
  #L2b6512.  v6:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.codetab` @type ^`int`[] @kind object;
  #L2b6516.  v7:= v10 + 1;
  #L2b651a.  v9.`com.bumptech.glide.gifencoder.LZWEncoder.free_ent` @type ^`int` := v7;
  #L2b651e.  v6[v5]:= v10;
  #L2b6522.  v10:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.htab` @type ^`int`[] @kind object;
  #L2b6526.  v10[v5]:= v4;
  #L2b652a.  goto L2b6532;
  #L2b652c.  call `cl_block`(v9, v11) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.cl_block:(Ljava/io/OutputStream;)V` @kind virtual;
  #L2b6532.  v10:= v3;
  #L2b6534.  goto L2b6494;
  #L2b6536.  call `output`(v9, v10, v11) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.output:(ILjava/io/OutputStream;)V` @kind virtual;
  #L2b653c.  v10:= v9.`com.bumptech.glide.gifencoder.LZWEncoder.EOFCode` @type ^`int`;
  #L2b6540.  call `output`(v9, v10, v11) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.output:(ILjava/io/OutputStream;)V` @kind virtual;
  #L2b6546.  return @kind void;
}
procedure `void` `encode`(`com.bumptech.glide.gifencoder.LZWEncoder` v2 @kind this, `java.io.OutputStream` v3 @kind object) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.encode:(Ljava/io/OutputStream;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2b6558.  v0:= v2.`com.bumptech.glide.gifencoder.LZWEncoder.initCodeSize` @type ^`int`;
  #L2b655c.  call `write`(v3, v0) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L2b6562.  v0:= v2.`com.bumptech.glide.gifencoder.LZWEncoder.imgW` @type ^`int`;
  #L2b6566.  v1:= v2.`com.bumptech.glide.gifencoder.LZWEncoder.imgH` @type ^`int`;
  #L2b656a.  v0:= v0 * v1 @kind int;
  #L2b656e.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.remaining` @type ^`int` := v0;
  #L2b6572.  v0:= 0I;
  #L2b6574.  v2.`com.bumptech.glide.gifencoder.LZWEncoder.curPixel` @type ^`int` := v0;
  #L2b6578.  v1:= v2.`com.bumptech.glide.gifencoder.LZWEncoder.initCodeSize` @type ^`int`;
  #L2b657c.  v1:= v1 + 1;
  #L2b6580.  call `compress`(v2, v1, v3) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.compress:(ILjava/io/OutputStream;)V` @kind virtual;
  #L2b6586.  call `write`(v3, v0) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L2b658c.  return @kind void;
}
procedure `void` `flush_char`(`com.bumptech.glide.gifencoder.LZWEncoder` v3 @kind this, `java.io.OutputStream` v4 @kind object) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.flush_char:(Ljava/io/OutputStream;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2b65a0.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.a_count` @type ^`int`;
  #L2b65a4.  if v0 <= 0 then goto L2b65c2;
  #L2b65a8.  call `write`(v4, v0) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L2b65ae.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.accum` @type ^`byte`[] @kind object;
  #L2b65b2.  v1:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.a_count` @type ^`int`;
  #L2b65b6.  v2:= 0I;
  #L2b65b8.  call `write`(v4, v0, v2, v1) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L2b65be.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.a_count` @type ^`int` := v2;
  #L2b65c2.  return @kind void;
}
procedure `void` `output`(`com.bumptech.glide.gifencoder.LZWEncoder` v3 @kind this, `int` v4 , `java.io.OutputStream` v5 @kind object) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.output:(ILjava/io/OutputStream;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2b65d4.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int`;
  #L2b65d8.  v1:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.masks` @type ^`int`[] @kind object;
  #L2b65dc.  v2:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_bits` @type ^`int`;
  #L2b65e0.  v1:= v1[v2];
  #L2b65e4.  v0:= v0 ^& v1 @kind int;
  #L2b65e6.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int` := v0;
  #L2b65ea.  if v2 <= 0 then goto L2b65fe;
  #L2b65ee.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int`;
  #L2b65f2.  v1:= v4 ^< v2 @kind int;
  #L2b65f6.  v0:= v0 ^| v1 @kind int;
  #L2b65f8.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int` := v0;
  #L2b65fc.  goto L2b6602;
  #L2b65fe.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int` := v4;
  #L2b6602.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_bits` @type ^`int`;
  #L2b6606.  v1:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.n_bits` @type ^`int`;
  #L2b660a.  v0:= v0 + v1 @kind int;
  #L2b660c.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_bits` @type ^`int` := v0;
  #L2b6610.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_bits` @type ^`int`;
  #L2b6614.  v1:= 8I;
  #L2b6618.  if v0 < v1 then goto L2b6642;
  #L2b661c.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int`;
  #L2b6620.  v0:= v0 ^& 255;
  #L2b6624.  v0:= (`byte`) v0 @kind i2b;
  #L2b6626.  call `char_out`(v3, v0, v5) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.char_out:(BLjava/io/OutputStream;)V` @kind virtual;
  #L2b662c.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int`;
  #L2b6630.  v0:= v0 ^> v1 @kind int;
  #L2b6632.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int` := v0;
  #L2b6636.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_bits` @type ^`int`;
  #L2b663a.  v0:= v0 - v1 @kind int;
  #L2b663c.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_bits` @type ^`int` := v0;
  #L2b6640.  goto L2b6610;
  #L2b6642.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.free_ent` @type ^`int`;
  #L2b6646.  v2:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.maxcode` @type ^`int`;
  #L2b664a.  if v0 > v2 then goto L2b6656;
  #L2b664e.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.clear_flg` @type ^`boolean` @kind boolean;
  #L2b6652.  if v0 == 0 then goto L2b66a8;
  #L2b6656.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.clear_flg` @type ^`boolean` @kind boolean;
  #L2b665a.  if v0 == 0 then goto L2b667a;
  #L2b665e.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.g_init_bits` @type ^`int`;
  #L2b6662.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.n_bits` @type ^`int` := v0;
  #L2b6666.  call temp:= `MAXCODE`(v3, v0) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.MAXCODE:(I)I` @kind virtual;
  #L2b666c.  v0:= temp;
  #L2b666e.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.maxcode` @type ^`int` := v0;
  #L2b6672.  v0:= 0I;
  #L2b6674.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.clear_flg` @type ^`boolean` := v0 @kind boolean;
  #L2b6678.  goto L2b66a8;
  #L2b667a.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.n_bits` @type ^`int`;
  #L2b667e.  v0:= v0 + 1;
  #L2b6682.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.n_bits` @type ^`int` := v0;
  #L2b6686.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.n_bits` @type ^`int`;
  #L2b668a.  v2:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.maxbits` @type ^`int`;
  #L2b668e.  if v0 != v2 then goto L2b669c;
  #L2b6692.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.maxmaxcode` @type ^`int`;
  #L2b6696.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.maxcode` @type ^`int` := v0;
  #L2b669a.  goto L2b66a8;
  #L2b669c.  call temp:= `MAXCODE`(v3, v0) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.MAXCODE:(I)I` @kind virtual;
  #L2b66a2.  v0:= temp;
  #L2b66a4.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.maxcode` @type ^`int` := v0;
  #L2b66a8.  v0:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.EOFCode` @type ^`int`;
  #L2b66ac.  if v4 != v0 then goto L2b66e4;
  #L2b66b0.  v4:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_bits` @type ^`int`;
  #L2b66b4.  if v4 <= 0 then goto L2b66de;
  #L2b66b8.  v4:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int`;
  #L2b66bc.  v4:= v4 ^& 255;
  #L2b66c0.  v4:= (`byte`) v4 @kind i2b;
  #L2b66c2.  call `char_out`(v3, v4, v5) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.char_out:(BLjava/io/OutputStream;)V` @kind virtual;
  #L2b66c8.  v4:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int`;
  #L2b66cc.  v4:= v4 ^> v1 @kind int;
  #L2b66ce.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_accum` @type ^`int` := v4;
  #L2b66d2.  v4:= v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_bits` @type ^`int`;
  #L2b66d6.  v4:= v4 - v1 @kind int;
  #L2b66d8.  v3.`com.bumptech.glide.gifencoder.LZWEncoder.cur_bits` @type ^`int` := v4;
  #L2b66dc.  goto L2b66b0;
  #L2b66de.  call `flush_char`(v3, v5) @signature `Lcom/bumptech/glide/gifencoder/LZWEncoder;.flush_char:(Ljava/io/OutputStream;)V` @kind virtual;
  #L2b66e4.  return @kind void;
}
