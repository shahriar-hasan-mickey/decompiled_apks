record `com.bumptech.glide.gifencoder.NeuQuant` @kind class @AccessFlag  {
  `int` `com.bumptech.glide.gifencoder.NeuQuant.alphadec` @AccessFlag PROTECTED;
  `int`[] `com.bumptech.glide.gifencoder.NeuQuant.bias` @AccessFlag PROTECTED;
  `int`[] `com.bumptech.glide.gifencoder.NeuQuant.freq` @AccessFlag PROTECTED;
  `int` `com.bumptech.glide.gifencoder.NeuQuant.lengthcount` @AccessFlag PROTECTED;
  `int`[] `com.bumptech.glide.gifencoder.NeuQuant.netindex` @AccessFlag PROTECTED;
  `int`[][] `com.bumptech.glide.gifencoder.NeuQuant.network` @AccessFlag PROTECTED;
  `int`[] `com.bumptech.glide.gifencoder.NeuQuant.radpower` @AccessFlag PROTECTED;
  `int` `com.bumptech.glide.gifencoder.NeuQuant.samplefac` @AccessFlag PROTECTED;
  `byte`[] `com.bumptech.glide.gifencoder.NeuQuant.thepicture` @AccessFlag PROTECTED;
}
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.alphabiasshift` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.alpharadbias` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.alpharadbshift` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.beta` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.betagamma` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.betashift` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.gamma` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.gammashift` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.initalpha` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.initrad` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.initradius` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.intbias` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.intbiasshift` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.maxnetpos` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.minpicturebytes` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.ncycles` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.netbiasshift` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.netsize` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.prime1` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.prime2` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.prime3` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.prime4` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.radbias` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.radbiasshift` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.radiusbias` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.radiusbiasshift` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@com.bumptech.glide.gifencoder.NeuQuant.radiusdec` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<init>`(`com.bumptech.glide.gifencoder.NeuQuant` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.<init>:([BII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2b6974.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b697a.  v0:= 256I;
  #L2b697e.  v1:= new `int`[v0];
  #L2b6982.  v3.`com.bumptech.glide.gifencoder.NeuQuant.netindex` @type ^`int`[] := v1 @kind object;
  #L2b6986.  v1:= new `int`[v0];
  #L2b698a.  v3.`com.bumptech.glide.gifencoder.NeuQuant.bias` @type ^`int`[] := v1 @kind object;
  #L2b698e.  v1:= new `int`[v0];
  #L2b6992.  v3.`com.bumptech.glide.gifencoder.NeuQuant.freq` @type ^`int`[] := v1 @kind object;
  #L2b6996.  v1:= 32I;
  #L2b699a.  v1:= new `int`[v1];
  #L2b699e.  v3.`com.bumptech.glide.gifencoder.NeuQuant.radpower` @type ^`int`[] := v1 @kind object;
  #L2b69a2.  v3.`com.bumptech.glide.gifencoder.NeuQuant.thepicture` @type ^`byte`[] := v4 @kind object;
  #L2b69a6.  v3.`com.bumptech.glide.gifencoder.NeuQuant.lengthcount` @type ^`int` := v5;
  #L2b69aa.  v3.`com.bumptech.glide.gifencoder.NeuQuant.samplefac` @type ^`int` := v6;
  #L2b69ae.  v4:= new `int`[][v0];
  #L2b69b2.  v3.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] := v4 @kind object;
  #L2b69b6.  v4:= 0I;
  #L2b69b8.  v5:= 0I;
  #L2b69ba.  if v5 >= v0 then goto L2b69fc;
  #L2b69be.  v6:= v3.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b69c2.  v1:= 4I;
  #L2b69c4.  v1:= new `int`[v1];
  #L2b69c8.  v6[v5]:= v1 @kind object;
  #L2b69cc.  v6:= v6[v5] @kind object;
  #L2b69d0.  v1:= 2I;
  #L2b69d2.  v2:= v5 ^< 12;
  #L2b69d6.  v2:= v2 / v0 @kind int;
  #L2b69d8.  v6[v1]:= v2;
  #L2b69dc.  v1:= 1I;
  #L2b69de.  v6[v1]:= v2;
  #L2b69e2.  v6[v4]:= v2;
  #L2b69e6.  v6:= v3.`com.bumptech.glide.gifencoder.NeuQuant.freq` @type ^`int`[] @kind object;
  #L2b69ea.  v6[v5]:= v0;
  #L2b69ee.  v6:= v3.`com.bumptech.glide.gifencoder.NeuQuant.bias` @type ^`int`[] @kind object;
  #L2b69f2.  v6[v5]:= v4;
  #L2b69f6.  v5:= v5 + 1;
  #L2b69fa.  goto L2b69ba;
  #L2b69fc.  return @kind void;
}
procedure `void` `alterneigh`(`com.bumptech.glide.gifencoder.NeuQuant` v14 @kind this, `int` v15 , `int` v16 , `int` v17 , `int` v18 , `int` v19 ) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.alterneigh:(IIIII)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2b6a10.  v0:= v14 @kind object;
  #L2b6a12.  v1:= v16 - v15 @kind int;
  #L2b6a16.  v2:= -1I;
  #L2b6a18.  if v1 >= v2 then goto L2b6a1e;
  #L2b6a1c.  v1:= -1I;
  #L2b6a1e.  v2:= v16 + v15 @kind int;
  #L2b6a22.  v3:= 256I;
  #L2b6a26.  if v2 <= v3 then goto L2b6a2e;
  #L2b6a2a.  v2:= 256I;
  #L2b6a2e.  v3:= v16 + 1;
  #L2b6a32.  v4:= 1I;
  #L2b6a34.  v5:= v16 + -1;
  #L2b6a38.  v6:= 1I;
  #L2b6a3a.  if v3 < v2 then goto L2b6a46;
  #L2b6a3e.  if v5 <= v1 then goto L2b6a44;
  #L2b6a42.  goto L2b6a46;
  #L2b6a44.  return @kind void;
  #L2b6a46.  v7:= v0.`com.bumptech.glide.gifencoder.NeuQuant.radpower` @type ^`int`[] @kind object;
  #L2b6a4a.  v8:= v6 + 1;
  #L2b6a4e.  v6:= v7[v6];
  #L2b6a52.  v7:= 2I;
  #L2b6a54.  v9:= 0I;
  #L2b6a56.  v10:= 262144I;
  #L2b6a5a.  if v3 >= v2 then goto L2b6ab4;
  #L2b6a5e.  v11:= v0.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b6a62.  v12:= v3 + 1;
  #L2b6a66.  v3:= v11[v3] @kind object;
  #L2b6a6a.  v11:= v3[v9];
  #L2b6a6e.  v13:= v3[v9];
  #L2b6a72.  v13:= v13 - v17 @kind int;
  #L2b6a76.  v13:= v13 * v6 @kind int;
  #L2b6a7a.  v13:= v13 / v10 @kind int;
  #L2b6a7c.  v11:= v11 - v13 @kind int;
  #L2b6a7e.  v3[v9]:= v11;
  #L2b6a82.  v11:= v3[v4];
  #L2b6a86.  v13:= v3[v4];
  #L2b6a8a.  v13:= v13 - v18 @kind int;
  #L2b6a8e.  v13:= v13 * v6 @kind int;
  #L2b6a92.  v13:= v13 / v10 @kind int;
  #L2b6a94.  v11:= v11 - v13 @kind int;
  #L2b6a96.  v3[v4]:= v11;
  #L2b6a9a.  v11:= v3[v7];
  #L2b6a9e.  v13:= v3[v7];
  #L2b6aa2.  v13:= v13 - v19 @kind int;
  #L2b6aa6.  v13:= v13 * v6 @kind int;
  #L2b6aaa.  v13:= v13 / v10 @kind int;
  #L2b6aac.  v11:= v11 - v13 @kind int;
  #L2b6aae.  v3[v7]:= v11;
  #L2b6ab2.  v3:= v12;
  #L2b6ab4.  if v5 <= v1 then goto L2b6b12;
  #L2b6ab8.  v11:= v0.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b6abc.  v12:= v5 + -1;
  #L2b6ac0.  v5:= v11[v5] @kind object;
  #L2b6ac4.  v11:= v5[v9];
  #L2b6ac8.  v13:= v5[v9];
  #L2b6acc.  v13:= v13 - v17 @kind int;
  #L2b6ad0.  v13:= v13 * v6 @kind int;
  #L2b6ad4.  v13:= v13 / v10 @kind int;
  #L2b6ad6.  v11:= v11 - v13 @kind int;
  #L2b6ad8.  v5[v9]:= v11;
  #L2b6adc.  v9:= v5[v4];
  #L2b6ae0.  v11:= v5[v4];
  #L2b6ae4.  v11:= v11 - v18 @kind int;
  #L2b6ae8.  v11:= v11 * v6 @kind int;
  #L2b6aec.  v11:= v11 / v10 @kind int;
  #L2b6aee.  v9:= v9 - v11 @kind int;
  #L2b6af0.  v5[v4]:= v9;
  #L2b6af4.  v9:= v5[v7];
  #L2b6af8.  v11:= v5[v7];
  #L2b6afc.  v11:= v11 - v19 @kind int;
  #L2b6b00.  v6:= v6 * v11 @kind int;
  #L2b6b04.  v6:= v6 / v10 @kind int;
  #L2b6b06.  v9:= v9 - v6 @kind int;
  #L2b6b08.  v5[v7]:= v9;
  #L2b6b0c.  v6:= v8;
  #L2b6b0e.  v5:= v12;
  #L2b6b10.  goto L2b6a3a;
  #L2b6b12.  v6:= v8;
  #L2b6b14.  goto L2b6a3a;
  catch `java.lang.Exception` @[L2b6a6a..L2b6ab2] goto L2b6ab2;
  catch `java.lang.Exception` @[L2b6ac4..L2b6b0c] goto L2b6b0c;
}
procedure `void` `altersingle`(`com.bumptech.glide.gifencoder.NeuQuant` v3 @kind this, `int` v4 , `int` v5 , `int` v6 , `int` v7 , `int` v8 ) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.altersingle:(IIIII)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L2b6b44.  v0:= v3.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b6b48.  v5:= v0[v5] @kind object;
  #L2b6b4c.  v0:= 0I;
  #L2b6b4e.  v1:= v5[v0];
  #L2b6b52.  v2:= v5[v0];
  #L2b6b56.  v2:= v2 - v6 @kind int;
  #L2b6b58.  v2:= v2 * v4 @kind int;
  #L2b6b5c.  v2:= v2 / 1024;
  #L2b6b60.  v1:= v1 - v2 @kind int;
  #L2b6b62.  v5[v0]:= v1;
  #L2b6b66.  v6:= 1I;
  #L2b6b68.  v0:= v5[v6];
  #L2b6b6c.  v1:= v5[v6];
  #L2b6b70.  v1:= v1 - v7 @kind int;
  #L2b6b72.  v1:= v1 * v4 @kind int;
  #L2b6b76.  v1:= v1 / 1024;
  #L2b6b7a.  v0:= v0 - v1 @kind int;
  #L2b6b7c.  v5[v6]:= v0;
  #L2b6b80.  v6:= 2I;
  #L2b6b82.  v7:= v5[v6];
  #L2b6b86.  v0:= v5[v6];
  #L2b6b8a.  v0:= v0 - v8 @kind int;
  #L2b6b8c.  v4:= v4 * v0 @kind int;
  #L2b6b90.  v4:= v4 / 1024;
  #L2b6b94.  v7:= v7 - v4 @kind int;
  #L2b6b96.  v5[v6]:= v7;
  #L2b6b9a.  return @kind void;
}
procedure `byte`[] `colorMap`(`com.bumptech.glide.gifencoder.NeuQuant` v11 @kind this) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.colorMap:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2b66f8.  v0:= 768I;
  #L2b66fc.  v0:= new `byte`[v0];
  #L2b6700.  v1:= 256I;
  #L2b6704.  v2:= new `int`[v1];
  #L2b6708.  v3:= 0I;
  #L2b670a.  v4:= 0I;
  #L2b670c.  if v4 >= v1 then goto L2b6728;
  #L2b6710.  v5:= v11.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b6714.  v5:= v5[v4] @kind object;
  #L2b6718.  v6:= 3I;
  #L2b671a.  v5:= v5[v6];
  #L2b671e.  v2[v5]:= v4;
  #L2b6722.  v4:= v4 + 1;
  #L2b6726.  goto L2b670c;
  #L2b6728.  v4:= 0I;
  #L2b672a.  v5:= 0I;
  #L2b672c.  if v4 >= v1 then goto L2b677a;
  #L2b6730.  v6:= v2[v4];
  #L2b6734.  v7:= v5 + 1;
  #L2b6738.  v8:= v11.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b673c.  v9:= v8[v6] @kind object;
  #L2b6740.  v9:= v9[v3];
  #L2b6744.  v9:= (`byte`) v9 @kind i2b;
  #L2b6746.  v0[v5]:= v9 @kind byte;
  #L2b674a.  v5:= v7 + 1;
  #L2b674e.  v9:= v8[v6] @kind object;
  #L2b6752.  v10:= 1I;
  #L2b6754.  v9:= v9[v10];
  #L2b6758.  v9:= (`byte`) v9 @kind i2b;
  #L2b675a.  v0[v7]:= v9 @kind byte;
  #L2b675e.  v7:= v5 + 1;
  #L2b6762.  v6:= v8[v6] @kind object;
  #L2b6766.  v8:= 2I;
  #L2b6768.  v6:= v6[v8];
  #L2b676c.  v6:= (`byte`) v6 @kind i2b;
  #L2b676e.  v0[v5]:= v6 @kind byte;
  #L2b6772.  v4:= v4 + 1;
  #L2b6776.  v5:= v7;
  #L2b6778.  goto L2b672c;
  #L2b677a.  return v0 @kind object;
}
procedure `int` `contest`(`com.bumptech.glide.gifencoder.NeuQuant` v9 @kind this, `int` v10 , `int` v11 , `int` v12 ) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.contest:(III)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2b67b8.  v0:= 0I;
  #L2b67ba.  v1:= 2147483647I;
  #L2b67c0.  v2:= -1I;
  #L2b67c2.  v1:= 0I;
  #L2b67c4.  v3:= -1I;
  #L2b67c6.  v4:= 2147483647I;
  #L2b67cc.  v5:= 2147483647I;
  #L2b67d2.  v6:= 256I;
  #L2b67d6.  if v1 >= v6 then goto L2b685a;
  #L2b67da.  v6:= v9.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b67de.  v6:= v6[v1] @kind object;
  #L2b67e2.  v7:= v6[v0];
  #L2b67e6.  v7:= v7 - v10 @kind int;
  #L2b67e8.  if v7 >= 0 then goto L2b67ee;
  #L2b67ec.  v7:= -v7 @kind int;
  #L2b67ee.  v8:= 1I;
  #L2b67f0.  v8:= v6[v8];
  #L2b67f4.  v8:= v8 - v11 @kind int;
  #L2b67f6.  if v8 >= 0 then goto L2b67fc;
  #L2b67fa.  v8:= -v8 @kind int;
  #L2b67fc.  v7:= v7 + v8 @kind int;
  #L2b67fe.  v8:= 2I;
  #L2b6800.  v6:= v6[v8];
  #L2b6804.  v6:= v6 - v12 @kind int;
  #L2b6806.  if v6 >= 0 then goto L2b680c;
  #L2b680a.  v6:= -v6 @kind int;
  #L2b680c.  v7:= v7 + v6 @kind int;
  #L2b680e.  if v7 >= v4 then goto L2b6816;
  #L2b6812.  v2:= v1;
  #L2b6814.  v4:= v7;
  #L2b6816.  v6:= v9.`com.bumptech.glide.gifencoder.NeuQuant.bias` @type ^`int`[] @kind object;
  #L2b681a.  v6:= v6[v1];
  #L2b681e.  v6:= v6 ^> 12;
  #L2b6822.  v7:= v7 - v6 @kind int;
  #L2b6824.  if v7 >= v5 then goto L2b682c;
  #L2b6828.  v3:= v1;
  #L2b682a.  v5:= v7;
  #L2b682c.  v6:= v9.`com.bumptech.glide.gifencoder.NeuQuant.freq` @type ^`int`[] @kind object;
  #L2b6830.  v7:= v6[v1];
  #L2b6834.  v7:= v7 ^> 10;
  #L2b6838.  v8:= v6[v1];
  #L2b683c.  v8:= v8 - v7 @kind int;
  #L2b683e.  v6[v1]:= v8;
  #L2b6842.  v6:= v9.`com.bumptech.glide.gifencoder.NeuQuant.bias` @type ^`int`[] @kind object;
  #L2b6846.  v8:= v6[v1];
  #L2b684a.  v7:= v7 ^< 10;
  #L2b684e.  v8:= v8 + v7 @kind int;
  #L2b6850.  v6[v1]:= v8;
  #L2b6854.  v1:= v1 + 1;
  #L2b6858.  goto L2b67d2;
  #L2b685a.  v10:= v9.`com.bumptech.glide.gifencoder.NeuQuant.freq` @type ^`int`[] @kind object;
  #L2b685e.  v11:= v10[v2];
  #L2b6862.  v11:= v11 + 64;
  #L2b6866.  v10[v2]:= v11;
  #L2b686a.  v10:= v9.`com.bumptech.glide.gifencoder.NeuQuant.bias` @type ^`int`[] @kind object;
  #L2b686e.  v11:= v10[v2];
  #L2b6872.  v12:= 65536I;
  #L2b6876.  v11:= v11 - v12 @kind int;
  #L2b6878.  v10[v2]:= v11;
  #L2b687c.  return v3;
}
procedure `void` `inxbuild`(`com.bumptech.glide.gifencoder.NeuQuant` v13 @kind this) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.inxbuild:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2b6bac.  v0:= 0I;
  #L2b6bae.  v1:= 0I;
  #L2b6bb0.  v2:= 0I;
  #L2b6bb2.  v3:= 0I;
  #L2b6bb4.  v4:= 256I;
  #L2b6bb8.  v5:= 1I;
  #L2b6bba.  if v1 >= v4 then goto L2b6c70;
  #L2b6bbe.  v6:= v13.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b6bc2.  v6:= v6[v1] @kind object;
  #L2b6bc6.  v7:= v6[v5];
  #L2b6bca.  v8:= v1 + 1;
  #L2b6bce.  v9:= v1;
  #L2b6bd0.  v10:= v7;
  #L2b6bd2.  v7:= v8;
  #L2b6bd4.  if v7 >= v4 then goto L2b6bf6;
  #L2b6bd8.  v11:= v13.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b6bdc.  v11:= v11[v7] @kind object;
  #L2b6be0.  v12:= v11[v5];
  #L2b6be4.  if v12 >= v10 then goto L2b6bf0;
  #L2b6be8.  v9:= v11[v5];
  #L2b6bec.  v10:= v9;
  #L2b6bee.  v9:= v7;
  #L2b6bf0.  v7:= v7 + 1;
  #L2b6bf4.  goto L2b6bd4;
  #L2b6bf6.  v4:= v13.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b6bfa.  v4:= v4[v9] @kind object;
  #L2b6bfe.  if v1 == v9 then goto L2b6c46;
  #L2b6c02.  v7:= v4[v0];
  #L2b6c06.  v9:= v6[v0];
  #L2b6c0a.  v4[v0]:= v9;
  #L2b6c0e.  v6[v0]:= v7;
  #L2b6c12.  v7:= v4[v5];
  #L2b6c16.  v9:= v6[v5];
  #L2b6c1a.  v4[v5]:= v9;
  #L2b6c1e.  v6[v5]:= v7;
  #L2b6c22.  v7:= 2I;
  #L2b6c24.  v9:= v4[v7];
  #L2b6c28.  v11:= v6[v7];
  #L2b6c2c.  v4[v7]:= v11;
  #L2b6c30.  v6[v7]:= v9;
  #L2b6c34.  v7:= 3I;
  #L2b6c36.  v9:= v4[v7];
  #L2b6c3a.  v11:= v6[v7];
  #L2b6c3e.  v4[v7]:= v11;
  #L2b6c42.  v6[v7]:= v9;
  #L2b6c46.  if v10 == v2 then goto L2b6c6c;
  #L2b6c4a.  v4:= v13.`com.bumptech.glide.gifencoder.NeuQuant.netindex` @type ^`int`[] @kind object;
  #L2b6c4e.  v3:= v3 + v1 @kind int;
  #L2b6c50.  v3:= v3 ^> v5 @kind int;
  #L2b6c52.  v4[v2]:= v3;
  #L2b6c56.  v2:= v2 + 1;
  #L2b6c5a.  if v2 >= v10 then goto L2b6c68;
  #L2b6c5e.  v3:= v13.`com.bumptech.glide.gifencoder.NeuQuant.netindex` @type ^`int`[] @kind object;
  #L2b6c62.  v3[v2]:= v1;
  #L2b6c66.  goto L2b6c56;
  #L2b6c68.  v3:= v1;
  #L2b6c6a.  v2:= v10;
  #L2b6c6c.  v1:= v8;
  #L2b6c6e.  goto L2b6bb4;
  #L2b6c70.  v0:= v13.`com.bumptech.glide.gifencoder.NeuQuant.netindex` @type ^`int`[] @kind object;
  #L2b6c74.  v1:= 255I;
  #L2b6c78.  v3:= v3 + v1 @kind int;
  #L2b6c7a.  v3:= v3 ^> v5 @kind int;
  #L2b6c7c.  v0[v2]:= v3;
  #L2b6c80.  v2:= v2 + v5 @kind int;
  #L2b6c82.  if v2 >= v4 then goto L2b6c94;
  #L2b6c86.  v0:= v13.`com.bumptech.glide.gifencoder.NeuQuant.netindex` @type ^`int`[] @kind object;
  #L2b6c8a.  v0[v2]:= v1;
  #L2b6c8e.  v2:= v2 + 1;
  #L2b6c92.  goto L2b6c82;
  #L2b6c94.  return @kind void;
}
procedure `void` `learn`(`com.bumptech.glide.gifencoder.NeuQuant` v23 @kind this) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.learn:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L2b6ca8.  v6:= v23 @kind object;
  #L2b6cac.  v0:= v6.`com.bumptech.glide.gifencoder.NeuQuant.lengthcount` @type ^`int`;
  #L2b6cb0.  v1:= 1509I;
  #L2b6cb4.  v7:= 1I;
  #L2b6cb6.  if v0 >= v1 then goto L2b6cbe;
  #L2b6cba.  v6.`com.bumptech.glide.gifencoder.NeuQuant.samplefac` @type ^`int` := v7;
  #L2b6cbe.  v0:= v6.`com.bumptech.glide.gifencoder.NeuQuant.samplefac` @type ^`int`;
  #L2b6cc2.  v2:= v0 + -1;
  #L2b6cc6.  v3:= 3I;
  #L2b6cc8.  v2:= v2 / v3 @kind int;
  #L2b6cca.  v2:= v2 + 30;
  #L2b6cce.  v6.`com.bumptech.glide.gifencoder.NeuQuant.alphadec` @type ^`int` := v2;
  #L2b6cd2.  v8:= v6.`com.bumptech.glide.gifencoder.NeuQuant.thepicture` @type ^`byte`[] @kind object;
  #L2b6cd6.  v9:= v6.`com.bumptech.glide.gifencoder.NeuQuant.lengthcount` @type ^`int`;
  #L2b6cda.  v0:= v0 * 3;
  #L2b6cde.  v10:= v9 / v0 @kind int;
  #L2b6ce2.  v0:= v10 / 100;
  #L2b6ce6.  v2:= 2048I;
  #L2b6cea.  v4:= 32I;
  #L2b6cee.  v11:= 0I;
  #L2b6cf0.  v5:= 0I;
  #L2b6cf2.  v12:= 1024I;
  #L2b6cf6.  if v5 >= v4 then goto L2b6d1a;
  #L2b6cfa.  v13:= v6.`com.bumptech.glide.gifencoder.NeuQuant.radpower` @type ^`int`[] @kind object;
  #L2b6cfe.  v14:= v5 * v5 @kind int;
  #L2b6d02.  v14:= v14 - 1024;
  #L2b6d06.  v14:= v14 * 256;
  #L2b6d0a.  v14:= v14 / v12 @kind int;
  #L2b6d0c.  v12:= v12 * v14 @kind int;
  #L2b6d10.  v13[v5]:= v12;
  #L2b6d14.  v5:= v5 + 1;
  #L2b6d18.  goto L2b6cf2;
  #L2b6d1a.  v5:= v6.`com.bumptech.glide.gifencoder.NeuQuant.lengthcount` @type ^`int`;
  #L2b6d1e.  if v5 >= v1 then goto L2b6d26;
  #L2b6d22.  v13:= 3I;
  #L2b6d24.  goto L2b6d60;
  #L2b6d26.  v3:= v5 %% 499;
  #L2b6d2a.  if v3 == 0 then goto L2b6d38;
  #L2b6d2e.  v1:= 1497I;
  #L2b6d32.  v13:= 1497I;
  #L2b6d36.  goto L2b6d60;
  #L2b6d38.  v3:= v5 %% 491;
  #L2b6d3c.  if v3 == 0 then goto L2b6d4a;
  #L2b6d40.  v1:= 1473I;
  #L2b6d44.  v13:= 1473I;
  #L2b6d48.  goto L2b6d60;
  #L2b6d4a.  v5:= v5 %% 487;
  #L2b6d4e.  if v5 == 0 then goto L2b6d5c;
  #L2b6d52.  v1:= 1461I;
  #L2b6d56.  v13:= 1461I;
  #L2b6d5a.  goto L2b6d60;
  #L2b6d5c.  v13:= 1509I;
  #L2b6d60.  v17:= v0;
  #L2b6d64.  v12:= 0I;
  #L2b6d66.  v14:= 0I;
  #L2b6d68.  v15:= 1024I;
  #L2b6d6c.  v16:= 32I;
  #L2b6d70.  v18:= 2048I;
  #L2b6d74.  if v12 >= v10 then goto L2b6e60;
  #L2b6d78.  v0:= v14 + 0;
  #L2b6d7c.  v0:= v8[v0] @kind byte;
  #L2b6d80.  v0:= v0 ^& 255;
  #L2b6d84.  v5:= v0 ^< 4;
  #L2b6d88.  v0:= v14 + 1;
  #L2b6d8c.  v0:= v8[v0] @kind byte;
  #L2b6d90.  v0:= v0 ^& 255;
  #L2b6d94.  v4:= v0 ^< 4;
  #L2b6d98.  v0:= v14 + 2;
  #L2b6d9c.  v0:= v8[v0] @kind byte;
  #L2b6da0.  v0:= v0 ^& 255;
  #L2b6da4.  v3:= v0 ^< 4;
  #L2b6da8.  call temp:= `contest`(v6, v5, v4, v3) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.contest:(III)I` @kind virtual;
  #L2b6dae.  v19:= temp;
  #L2b6db0.  v0:= v23 @kind object;
  #L2b6db4.  v1:= v15;
  #L2b6db6.  v2:= v19;
  #L2b6dba.  v20:= v3;
  #L2b6dbe.  v3:= v5;
  #L2b6dc0.  v21:= v4;
  #L2b6dc4.  v22:= v5;
  #L2b6dc8.  v5:= v20;
  #L2b6dcc.  call `altersingle`(v0, v1, v2, v3, v4, v5) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.altersingle:(IIIII)V` @kind virtual;
  #L2b6dd2.  if v16 == 0 then goto L2b6df4;
  #L2b6dd6.  v0:= v23 @kind object;
  #L2b6dda.  v1:= v16;
  #L2b6dde.  v2:= v19;
  #L2b6de2.  v3:= v22;
  #L2b6de6.  v4:= v21;
  #L2b6dea.  v5:= v20;
  #L2b6dee.  call `alterneigh`(v0, v1, v2, v3, v4, v5) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.alterneigh:(IIIII)V` @kind virtual;
  #L2b6df4.  v14:= v14 + v13 @kind int;
  #L2b6df6.  if v14 < v9 then goto L2b6e00;
  #L2b6dfa.  v0:= v6.`com.bumptech.glide.gifencoder.NeuQuant.lengthcount` @type ^`int`;
  #L2b6dfe.  v14:= v14 - v0 @kind int;
  #L2b6e00.  v12:= v12 + 1;
  #L2b6e04.  if v17 != 0 then goto L2b6e0c;
  #L2b6e08.  v17:= 1I;
  #L2b6e0c.  v0:= v12 %% v17 @kind int;
  #L2b6e10.  if v0 != 0 then goto L2b6d74;
  #L2b6e14.  v0:= v6.`com.bumptech.glide.gifencoder.NeuQuant.alphadec` @type ^`int`;
  #L2b6e18.  v0:= v15 / v0 @kind int;
  #L2b6e1c.  v15:= v15 - v0 @kind int;
  #L2b6e1e.  v0:= v18 / 30;
  #L2b6e22.  v18:= v18 - v0 @kind int;
  #L2b6e26.  v0:= v18 ^> 6;
  #L2b6e2a.  if v0 > v7 then goto L2b6e30;
  #L2b6e2e.  v0:= 0I;
  #L2b6e30.  v1:= 0I;
  #L2b6e32.  if v1 >= v0 then goto L2b6e5a;
  #L2b6e36.  v2:= v6.`com.bumptech.glide.gifencoder.NeuQuant.radpower` @type ^`int`[] @kind object;
  #L2b6e3a.  v3:= v0 * v0 @kind int;
  #L2b6e3e.  v4:= v1 * v1 @kind int;
  #L2b6e42.  v4:= v3 - v4 @kind int;
  #L2b6e46.  v4:= v4 * 256;
  #L2b6e4a.  v4:= v4 / v3 @kind int;
  #L2b6e4c.  v4:= v4 * v15 @kind int;
  #L2b6e50.  v2[v1]:= v4;
  #L2b6e54.  v1:= v1 + 1;
  #L2b6e58.  goto L2b6e32;
  #L2b6e5a.  v16:= v0;
  #L2b6e5e.  goto L2b6d74;
  #L2b6e60.  return @kind void;
}
procedure `int` `map`(`com.bumptech.glide.gifencoder.NeuQuant` v12 @kind this, `int` v13 , `int` v14 , `int` v15 ) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.map:(III)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2b6890.  v0:= v12.`com.bumptech.glide.gifencoder.NeuQuant.netindex` @type ^`int`[] @kind object;
  #L2b6894.  v0:= v0[v14];
  #L2b6898.  v1:= v0 + -1;
  #L2b689c.  v2:= -1I;
  #L2b689e.  v3:= 1000I;
  #L2b68a2.  v3:= -1I;
  #L2b68a4.  v4:= 1000I;
  #L2b68a8.  v5:= 256I;
  #L2b68ac.  if v0 < v5 then goto L2b68b8;
  #L2b68b0.  if v1 < 0 then goto L2b68b6;
  #L2b68b4.  goto L2b68b8;
  #L2b68b6.  return v3;
  #L2b68b8.  v6:= 3I;
  #L2b68ba.  v7:= 2I;
  #L2b68bc.  v8:= 0I;
  #L2b68be.  v9:= 1I;
  #L2b68c0.  if v0 >= v5 then goto L2b6910;
  #L2b68c4.  v10:= v12.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b68c8.  v10:= v10[v0] @kind object;
  #L2b68cc.  v11:= v10[v9];
  #L2b68d0.  v11:= v11 - v14 @kind int;
  #L2b68d2.  if v11 < v4 then goto L2b68dc;
  #L2b68d6.  v0:= 256I;
  #L2b68da.  goto L2b6910;
  #L2b68dc.  v0:= v0 + 1;
  #L2b68e0.  if v11 >= 0 then goto L2b68e6;
  #L2b68e4.  v11:= -v11 @kind int;
  #L2b68e6.  v5:= v10[v8];
  #L2b68ea.  v5:= v5 - v13 @kind int;
  #L2b68ec.  if v5 >= 0 then goto L2b68f2;
  #L2b68f0.  v5:= -v5 @kind int;
  #L2b68f2.  v11:= v11 + v5 @kind int;
  #L2b68f4.  if v11 >= v4 then goto L2b6910;
  #L2b68f8.  v5:= v10[v7];
  #L2b68fc.  v5:= v5 - v15 @kind int;
  #L2b68fe.  if v5 >= 0 then goto L2b6904;
  #L2b6902.  v5:= -v5 @kind int;
  #L2b6904.  v11:= v11 + v5 @kind int;
  #L2b6906.  if v11 >= v4 then goto L2b6910;
  #L2b690a.  v3:= v10[v6];
  #L2b690e.  v4:= v11;
  #L2b6910.  if v1 < 0 then goto L2b68a8;
  #L2b6914.  v5:= v12.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b6918.  v5:= v5[v1] @kind object;
  #L2b691c.  v9:= v5[v9];
  #L2b6920.  v9:= v14 - v9 @kind int;
  #L2b6924.  if v9 < v4 then goto L2b692c;
  #L2b6928.  v1:= -1I;
  #L2b692a.  goto L2b68a8;
  #L2b692c.  v1:= v1 + -1;
  #L2b6930.  if v9 >= 0 then goto L2b6936;
  #L2b6934.  v9:= -v9 @kind int;
  #L2b6936.  v8:= v5[v8];
  #L2b693a.  v8:= v8 - v13 @kind int;
  #L2b693c.  if v8 >= 0 then goto L2b6942;
  #L2b6940.  v8:= -v8 @kind int;
  #L2b6942.  v9:= v9 + v8 @kind int;
  #L2b6944.  if v9 >= v4 then goto L2b68a8;
  #L2b6948.  v7:= v5[v7];
  #L2b694c.  v7:= v7 - v15 @kind int;
  #L2b694e.  if v7 >= 0 then goto L2b6954;
  #L2b6952.  v7:= -v7 @kind int;
  #L2b6954.  v7:= v7 + v9 @kind int;
  #L2b6956.  if v7 >= v4 then goto L2b68a8;
  #L2b695a.  v3:= v5[v6];
  #L2b695e.  v4:= v7;
  #L2b6960.  goto L2b68a8;
}
procedure `byte`[] `process`(`com.bumptech.glide.gifencoder.NeuQuant` v1 @kind this) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.process:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b678c.  call `learn`(v1) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.learn:()V` @kind virtual;
  #L2b6792.  call `unbiasnet`(v1) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.unbiasnet:()V` @kind virtual;
  #L2b6798.  call `inxbuild`(v1) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.inxbuild:()V` @kind virtual;
  #L2b679e.  call temp:= `colorMap`(v1) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.colorMap:()[B` @kind virtual;
  #L2b67a4.  v0:= temp @kind object;
  #L2b67a6.  return v0 @kind object;
}
procedure `void` `unbiasnet`(`com.bumptech.glide.gifencoder.NeuQuant` v6 @kind this) @signature `Lcom/bumptech/glide/gifencoder/NeuQuant;.unbiasnet:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2b6e74.  v0:= 0I;
  #L2b6e76.  v1:= 0I;
  #L2b6e78.  v2:= 256I;
  #L2b6e7c.  if v1 >= v2 then goto L2b6ec8;
  #L2b6e80.  v2:= v6.`com.bumptech.glide.gifencoder.NeuQuant.network` @type ^`int`[][] @kind object;
  #L2b6e84.  v3:= v2[v1] @kind object;
  #L2b6e88.  v4:= v3[v0];
  #L2b6e8c.  v4:= v4 ^> 4;
  #L2b6e90.  v3[v0]:= v4;
  #L2b6e94.  v3:= v2[v1] @kind object;
  #L2b6e98.  v4:= 1I;
  #L2b6e9a.  v5:= v3[v4];
  #L2b6e9e.  v5:= v5 ^> 4;
  #L2b6ea2.  v3[v4]:= v5;
  #L2b6ea6.  v3:= v2[v1] @kind object;
  #L2b6eaa.  v4:= 2I;
  #L2b6eac.  v5:= v3[v4];
  #L2b6eb0.  v5:= v5 ^> 4;
  #L2b6eb4.  v3[v4]:= v5;
  #L2b6eb8.  v2:= v2[v1] @kind object;
  #L2b6ebc.  v3:= 3I;
  #L2b6ebe.  v2[v3]:= v1;
  #L2b6ec2.  v1:= v1 + 1;
  #L2b6ec6.  goto L2b6e78;
  #L2b6ec8.  return @kind void;
}
