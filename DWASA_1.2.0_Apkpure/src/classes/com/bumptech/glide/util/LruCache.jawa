record `com.bumptech.glide.util.LruCache` @kind class @AccessFlag PUBLIC {
  `java.util.LinkedHashMap` `com.bumptech.glide.util.LruCache.cache` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.util.LruCache.currentSize` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.util.LruCache.initialMaxSize` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.util.LruCache.maxSize` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.util.LruCache` v4 @kind this, `int` v5 ) @signature `Lcom/bumptech/glide/util/LruCache;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2cacf0.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cacf6.  v0:= new `java.util.LinkedHashMap`;
  #L2cacfa.  v1:= 100I;
  #L2cacfe.  v2:= 0.75F;
  #L2cad02.  v3:= 1I;
  #L2cad04.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/LinkedHashMap;.<init>:(IFZ)V` @kind direct;
  #L2cad0a.  v4.`com.bumptech.glide.util.LruCache.cache` @type ^`java.util.LinkedHashMap` := v0 @kind object;
  #L2cad0e.  v0:= 0I;
  #L2cad10.  v4.`com.bumptech.glide.util.LruCache.currentSize` @type ^`int` := v0;
  #L2cad14.  v4.`com.bumptech.glide.util.LruCache.initialMaxSize` @type ^`int` := v5;
  #L2cad18.  v4.`com.bumptech.glide.util.LruCache.maxSize` @type ^`int` := v5;
  #L2cad1c.  return @kind void;
}
procedure `void` `evict`(`com.bumptech.glide.util.LruCache` v1 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.evict:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2cad4c.  v0:= v1.`com.bumptech.glide.util.LruCache.maxSize` @type ^`int`;
  #L2cad50.  call `trimToSize`(v1, v0) @signature `Lcom/bumptech/glide/util/LruCache;.trimToSize:(I)V` @kind virtual;
  #L2cad56.  return @kind void;
}
procedure `void` `clearMemory`(`com.bumptech.glide.util.LruCache` v1 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.clearMemory:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cad30.  v0:= 0I;
  #L2cad32.  call `trimToSize`(v1, v0) @signature `Lcom/bumptech/glide/util/LruCache;.trimToSize:(I)V` @kind virtual;
  #L2cad38.  return @kind void;
}
procedure `boolean` `contains`(`com.bumptech.glide.util.LruCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cabcc.  v0:= v1.`com.bumptech.glide.util.LruCache.cache` @type ^`java.util.LinkedHashMap` @kind object;
  #L2cabd0.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/LinkedHashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L2cabd6.  v2:= temp;
  #L2cabd8.  return v2;
}
procedure `java.lang.Object` `get`(`com.bumptech.glide.util.LruCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cac30.  v0:= v1.`com.bumptech.glide.util.LruCache.cache` @type ^`java.util.LinkedHashMap` @kind object;
  #L2cac34.  call temp:= `get`(v0, v2) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2cac3a.  v2:= temp @kind object;
  #L2cac3c.  return v2 @kind object;
}
procedure `int` `getCurrentSize`(`com.bumptech.glide.util.LruCache` v1 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.getCurrentSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cabec.  v0:= v1.`com.bumptech.glide.util.LruCache.currentSize` @type ^`int`;
  #L2cabf0.  return v0;
}
procedure `int` `getMaxSize`(`com.bumptech.glide.util.LruCache` v1 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.getMaxSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cac04.  v0:= v1.`com.bumptech.glide.util.LruCache.maxSize` @type ^`int`;
  #L2cac08.  return v0;
}
procedure `int` `getSize`(`com.bumptech.glide.util.LruCache` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;

  #L2cac1c.  v1:= 1I;
  #L2cac1e.  return v1;
}
procedure `void` `onItemEvicted`(`com.bumptech.glide.util.LruCache` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L2cad68.  return @kind void;
}
procedure `java.lang.Object` `put`(`com.bumptech.glide.util.LruCache` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2cac50.  call temp:= `getSize`(v2, v4) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L2cac56.  v0:= temp;
  #L2cac58.  v1:= v2.`com.bumptech.glide.util.LruCache.maxSize` @type ^`int`;
  #L2cac5c.  if v0 < v1 then goto L2cac6a;
  #L2cac60.  call `onItemEvicted`(v2, v3, v4) @signature `Lcom/bumptech/glide/util/LruCache;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2cac66.  v3:= 0I;
  #L2cac68.  return v3 @kind object;
  #L2cac6a.  v0:= v2.`com.bumptech.glide.util.LruCache.cache` @type ^`java.util.LinkedHashMap` @kind object;
  #L2cac6e.  call temp:= `put`(v0, v3, v4) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2cac74.  v3:= temp @kind object;
  #L2cac76.  if v4 == 0 then goto L2cac8c;
  #L2cac7a.  v0:= v2.`com.bumptech.glide.util.LruCache.currentSize` @type ^`int`;
  #L2cac7e.  call temp:= `getSize`(v2, v4) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L2cac84.  v4:= temp;
  #L2cac86.  v0:= v0 + v4 @kind int;
  #L2cac88.  v2.`com.bumptech.glide.util.LruCache.currentSize` @type ^`int` := v0;
  #L2cac8c.  if v3 == 0 then goto L2caca2;
  #L2cac90.  v4:= v2.`com.bumptech.glide.util.LruCache.currentSize` @type ^`int`;
  #L2cac94.  call temp:= `getSize`(v2, v3) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L2cac9a.  v0:= temp;
  #L2cac9c.  v4:= v4 - v0 @kind int;
  #L2cac9e.  v2.`com.bumptech.glide.util.LruCache.currentSize` @type ^`int` := v4;
  #L2caca2.  call `evict`(v2) @signature `Lcom/bumptech/glide/util/LruCache;.evict:()V` @kind direct;
  #L2caca8.  return v3 @kind object;
}
procedure `java.lang.Object` `remove`(`com.bumptech.glide.util.LruCache` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2cacbc.  v0:= v2.`com.bumptech.glide.util.LruCache.cache` @type ^`java.util.LinkedHashMap` @kind object;
  #L2cacc0.  call temp:= `remove`(v0, v3) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2cacc6.  v3:= temp @kind object;
  #L2cacc8.  if v3 == 0 then goto L2cacde;
  #L2caccc.  v0:= v2.`com.bumptech.glide.util.LruCache.currentSize` @type ^`int`;
  #L2cacd0.  call temp:= `getSize`(v2, v3) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L2cacd6.  v1:= temp;
  #L2cacd8.  v0:= v0 - v1 @kind int;
  #L2cacda.  v2.`com.bumptech.glide.util.LruCache.currentSize` @type ^`int` := v0;
  #L2cacde.  return v3 @kind object;
}
procedure `void` `setSizeMultiplier`(`com.bumptech.glide.util.LruCache` v1 @kind this, `float` v2 ) @signature `Lcom/bumptech/glide/util/LruCache;.setSizeMultiplier:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cad7c.  v0:= 0I;
  #L2cad7e.  v0:= fcmpg(v2, v0);
  #L2cad82.  if v0 < 0 then goto L2cada4;
  #L2cad86.  v0:= v1.`com.bumptech.glide.util.LruCache.initialMaxSize` @type ^`int`;
  #L2cad8a.  v0:= (`float`) v0 @kind i2f;
  #L2cad8c.  v0:= v0 * v2 @kind float;
  #L2cad90.  call temp:= `round`(v0) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L2cad96.  v2:= temp;
  #L2cad98.  v1.`com.bumptech.glide.util.LruCache.maxSize` @type ^`int` := v2;
  #L2cad9c.  call `evict`(v1) @signature `Lcom/bumptech/glide/util/LruCache;.evict:()V` @kind direct;
  #L2cada2.  return @kind void;
  #L2cada4.  v2:= new `java.lang.IllegalArgumentException`;
  #L2cada8.  v0:= "Multiplier must be >= 0" @kind object;
  #L2cadac.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cadb2.  throw v2;
}
procedure `void` `trimToSize`(`com.bumptech.glide.util.LruCache` v4 @kind this, `int` v5 ) @signature `Lcom/bumptech/glide/util/LruCache;.trimToSize:(I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2cadc4.  v0:= v4.`com.bumptech.glide.util.LruCache.currentSize` @type ^`int`;
  #L2cadc8.  if v0 <= v5 then goto L2cae20;
  #L2cadcc.  v0:= v4.`com.bumptech.glide.util.LruCache.cache` @type ^`java.util.LinkedHashMap` @kind object;
  #L2cadd0.  call temp:= `entrySet`(v0) @signature `Ljava/util/LinkedHashMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L2cadd6.  v0:= temp @kind object;
  #L2cadd8.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2cadde.  v0:= temp @kind object;
  #L2cade0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2cade6.  v0:= temp @kind object;
  #L2cade8.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L2cadec.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2cadf2.  v1:= temp @kind object;
  #L2cadf4.  v2:= v4.`com.bumptech.glide.util.LruCache.currentSize` @type ^`int`;
  #L2cadf8.  call temp:= `getSize`(v4, v1) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L2cadfe.  v3:= temp;
  #L2cae00.  v2:= v2 - v3 @kind int;
  #L2cae02.  v4.`com.bumptech.glide.util.LruCache.currentSize` @type ^`int` := v2;
  #L2cae06.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2cae0c.  v0:= temp @kind object;
  #L2cae0e.  v2:= v4.`com.bumptech.glide.util.LruCache.cache` @type ^`java.util.LinkedHashMap` @kind object;
  #L2cae12.  call temp:= `remove`(v2, v0) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2cae18.  call `onItemEvicted`(v4, v0, v1) @signature `Lcom/bumptech/glide/util/LruCache;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2cae1e.  goto L2cadc4;
  #L2cae20.  return @kind void;
}
