record `com.bumptech.glide.util.MultiClassKey` @kind class @AccessFlag PUBLIC {
  `java.lang.Class` `com.bumptech.glide.util.MultiClassKey.first` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.util.MultiClassKey.second` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.util.MultiClassKey` v0 @kind this) @signature `Lcom/bumptech/glide/util/MultiClassKey;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2cb0cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cb0d2.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.MultiClassKey` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/bumptech/glide/util/MultiClassKey;.<init>:(Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2cb0e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cb0ea.  call `set`(v0, v1, v2) @signature `Lcom/bumptech/glide/util/MultiClassKey;.set:(Ljava/lang/Class;Ljava/lang/Class;)V` @kind virtual;
  #L2cb0f0.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.util.MultiClassKey` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/bumptech/glide/util/MultiClassKey;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2cafdc.  v0:= 1I;
  #L2cafde.  if v4 != v5 then goto L2cafe4;
  #L2cafe2.  return v0;
  #L2cafe4.  v1:= 0I;
  #L2cafe6.  if v5 == 0 then goto L2cb032;
  #L2cafea.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2caff0.  v2:= temp @kind object;
  #L2caff2.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2caff8.  v3:= temp @kind object;
  #L2caffa.  if v2 == v3 then goto L2cb000;
  #L2caffe.  goto L2cb032;
  #L2cb000.  v5:= (`com.bumptech.glide.util.MultiClassKey`) v5 @kind object;
  #L2cb004.  v2:= v4.`com.bumptech.glide.util.MultiClassKey.first` @type ^`java.lang.Class` @kind object;
  #L2cb008.  v3:= v5.`com.bumptech.glide.util.MultiClassKey.first` @type ^`java.lang.Class` @kind object;
  #L2cb00c.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2cb012.  v2:= temp;
  #L2cb014.  if v2 != 0 then goto L2cb01a;
  #L2cb018.  return v1;
  #L2cb01a.  v2:= v4.`com.bumptech.glide.util.MultiClassKey.second` @type ^`java.lang.Class` @kind object;
  #L2cb01e.  v5:= v5.`com.bumptech.glide.util.MultiClassKey.second` @type ^`java.lang.Class` @kind object;
  #L2cb022.  call temp:= `equals`(v2, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2cb028.  v5:= temp;
  #L2cb02a.  if v5 != 0 then goto L2cb030;
  #L2cb02e.  return v1;
  #L2cb030.  return v0;
  #L2cb032.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.util.MultiClassKey` v2 @kind this) @signature `Lcom/bumptech/glide/util/MultiClassKey;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2cb044.  v0:= v2.`com.bumptech.glide.util.MultiClassKey.first` @type ^`java.lang.Class` @kind object;
  #L2cb048.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2cb04e.  v0:= temp;
  #L2cb050.  v0:= v0 * 31;
  #L2cb054.  v1:= v2.`com.bumptech.glide.util.MultiClassKey.second` @type ^`java.lang.Class` @kind object;
  #L2cb058.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2cb05e.  v1:= temp;
  #L2cb060.  v0:= v0 + v1 @kind int;
  #L2cb062.  return v0;
}
procedure `void` `set`(`com.bumptech.glide.util.MultiClassKey` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/bumptech/glide/util/MultiClassKey;.set:(Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;

  #L2cb104.  v0.`com.bumptech.glide.util.MultiClassKey.first` @type ^`java.lang.Class` := v1 @kind object;
  #L2cb108.  v0.`com.bumptech.glide.util.MultiClassKey.second` @type ^`java.lang.Class` := v2 @kind object;
  #L2cb10c.  return @kind void;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.util.MultiClassKey` v2 @kind this) @signature `Lcom/bumptech/glide/util/MultiClassKey;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2cb074.  v0:= new `java.lang.StringBuilder`;
  #L2cb078.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2cb07e.  v1:= "MultiClassKey{first=" @kind object;
  #L2cb082.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cb088.  v1:= v2.`com.bumptech.glide.util.MultiClassKey.first` @type ^`java.lang.Class` @kind object;
  #L2cb08c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cb092.  v1:= ", second=" @kind object;
  #L2cb096.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cb09c.  v1:= v2.`com.bumptech.glide.util.MultiClassKey.second` @type ^`java.lang.Class` @kind object;
  #L2cb0a0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cb0a6.  v1:= 125I;
  #L2cb0aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cb0b0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cb0b6.  v0:= temp @kind object;
  #L2cb0b8.  return v0 @kind object;
}
