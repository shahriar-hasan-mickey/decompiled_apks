record `com.bumptech.glide.util.ExceptionCatchingInputStream` @kind class @AccessFlag PUBLIC extends `java.io.InputStream` @kind class {
  `java.io.IOException` `com.bumptech.glide.util.ExceptionCatchingInputStream.exception` @AccessFlag PRIVATE;
  `java.io.InputStream` `com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @AccessFlag PRIVATE;
}
global `java.util.Queue` `@@com.bumptech.glide.util.ExceptionCatchingInputStream.QUEUE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ca9a4.  v0:= 0I;
  #L2ca9a6.  call temp:= `createQueue`(v0) @signature `Lcom/bumptech/glide/util/Util;.createQueue:(I)Ljava/util/Queue;` @kind static;
  #L2ca9ac.  v0:= temp @kind object;
  #L2ca9ae.  `@@com.bumptech.glide.util.ExceptionCatchingInputStream.QUEUE` @type ^`java.util.Queue` := v0 @kind object;
  #L2ca9b2.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v0 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2ca9c4.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L2ca9ca.  return @kind void;
}
procedure `void` `clearQueue`() @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.clearQueue:()V` @AccessFlag STATIC {
    temp;
    v0;

  #L2ca9dc.  v0:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.QUEUE` @type ^`java.util.Queue` @kind object;
  #L2ca9e0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L2ca9e6.  v0:= temp;
  #L2ca9e8.  if v0 != 0 then goto L2ca9f8;
  #L2ca9ec.  v0:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.QUEUE` @type ^`java.util.Queue` @kind object;
  #L2ca9f0.  call temp:= `remove`(v0) @signature `Ljava/util/Queue;.remove:()Ljava/lang/Object;` @kind interface;
  #L2ca9f6.  goto L2ca9dc;
  #L2ca9f8.  return @kind void;
}
procedure `com.bumptech.glide.util.ExceptionCatchingInputStream` `obtain`(`java.io.InputStream` v2 @kind object) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.obtain:(Ljava/io/InputStream;)Lcom/bumptech/glide/util/ExceptionCatchingInputStream;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ca830.  v0:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.QUEUE` @type ^`java.util.Queue` @kind object;
  #L2ca834.  @monitorenter v0
  #L2ca836.  v1:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.QUEUE` @type ^`java.util.Queue` @kind object;
  #L2ca83a.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L2ca840.  v1:= temp @kind object;
  #L2ca842.  v1:= (`com.bumptech.glide.util.ExceptionCatchingInputStream`) v1 @kind object;
  #L2ca846.  @monitorexit v0
  #L2ca848.  if v1 != 0 then goto L2ca856;
  #L2ca84c.  v1:= new `com.bumptech.glide.util.ExceptionCatchingInputStream`;
  #L2ca850.  call `<init>`(v1) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.<init>:()V` @kind direct;
  #L2ca856.  call `setInputStream`(v1, v2) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.setInputStream:(Ljava/io/InputStream;)V` @kind virtual;
  #L2ca85c.  return v1 @kind object;
  #L2ca85e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ca860.  @monitorexit v0
  #L2ca862.  throw v2;
  catch `java.lang.Throwable` @[L2ca836..L2ca848] goto L2ca85e;
  catch `java.lang.Throwable` @[L2ca860..L2ca862] goto L2ca85e;
}
procedure `int` `available`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ca888.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @type ^`java.io.InputStream` @kind object;
  #L2ca88c.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L2ca892.  v0:= temp;
  #L2ca894.  return v0;
}
procedure `void` `close`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2caa0c.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @type ^`java.io.InputStream` @kind object;
  #L2caa10.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L2caa16.  return @kind void;
}
procedure `java.io.IOException` `getException`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.getException:()Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ca950.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.exception` @type ^`java.io.IOException` @kind object;
  #L2ca954.  return v0 @kind object;
}
procedure `void` `mark`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2caa28.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @type ^`java.io.InputStream` @kind object;
  #L2caa2c.  call `mark`(v0, v2) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L2caa32.  return @kind void;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ca810.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @type ^`java.io.InputStream` @kind object;
  #L2ca814.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L2ca81a.  v0:= temp;
  #L2ca81c.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ca8a8.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @type ^`java.io.InputStream` @kind object;
  #L2ca8ac.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L2ca8b2.  v0:= temp;
  #L2ca8b4.  goto L2ca8be;
  #L2ca8b6.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2ca8b8.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.exception` @type ^`java.io.IOException` := v0 @kind object;
  #L2ca8bc.  v0:= -1I;
  #L2ca8be.  return v0;
  catch `java.io.IOException` @[L2ca8a8..L2ca8b4] goto L2ca8b6;
}
procedure `int` `read`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ca8e0.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @type ^`java.io.InputStream` @kind object;
  #L2ca8e4.  call temp:= `read`(v0, v2) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L2ca8ea.  v2:= temp;
  #L2ca8ec.  goto L2ca8f6;
  #L2ca8ee.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L2ca8f0.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.exception` @type ^`java.io.IOException` := v2 @kind object;
  #L2ca8f4.  v2:= -1I;
  #L2ca8f6.  return v2;
  catch `java.io.IOException` @[L2ca8e0..L2ca8ec] goto L2ca8ee;
}
procedure `int` `read`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ca918.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @type ^`java.io.InputStream` @kind object;
  #L2ca91c.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L2ca922.  v2:= temp;
  #L2ca924.  goto L2ca92e;
  #L2ca926.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L2ca928.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.exception` @type ^`java.io.IOException` := v2 @kind object;
  #L2ca92c.  v2:= -1I;
  #L2ca92e.  return v2;
  catch `java.io.IOException` @[L2ca918..L2ca924] goto L2ca926;
}
procedure `void` `release`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v2 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.release:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2caa44.  v0:= 0I;
  #L2caa46.  v2.`com.bumptech.glide.util.ExceptionCatchingInputStream.exception` @type ^`java.io.IOException` := v0 @kind object;
  #L2caa4a.  v2.`com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @type ^`java.io.InputStream` := v0 @kind object;
  #L2caa4e.  v0:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.QUEUE` @type ^`java.util.Queue` @kind object;
  #L2caa52.  @monitorenter v0
  #L2caa54.  v1:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.QUEUE` @type ^`java.util.Queue` @kind object;
  #L2caa58.  call temp:= `offer`(v1, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2caa5e.  @monitorexit v0
  #L2caa60.  return @kind void;
  #L2caa62.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2caa64.  @monitorexit v0
  #L2caa66.  throw v1;
  catch `java.lang.Throwable` @[L2caa54..L2caa66] goto L2caa62;
}
procedure `void` `reset`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2caa84.  @monitorenter v1
  #L2caa86.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @type ^`java.io.InputStream` @kind object;
  #L2caa8a.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L2caa90.  @monitorexit v1
  #L2caa92.  return @kind void;
  #L2caa94.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2caa96.  @monitorexit v1
  #L2caa98.  throw v0;
  catch `java.lang.Throwable` @[L2caa86..L2caa90] goto L2caa94;
}
procedure `void` `setInputStream`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.setInputStream:(Ljava/io/InputStream;)V` @AccessFlag  {
    temp;

  #L2caab8.  v0.`com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @type ^`java.io.InputStream` := v1 @kind object;
  #L2caabc.  return @kind void;
}
procedure `long` `skip`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `long` v2 ) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ca968.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.wrapped` @type ^`java.io.InputStream` @kind object;
  #L2ca96c.  call temp:= `skip`(v0, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L2ca972.  v2:= temp @kind wide;
  #L2ca974.  goto L2ca980;
  #L2ca976.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L2ca978.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.exception` @type ^`java.io.IOException` := v2 @kind object;
  #L2ca97c.  v2:= 0L;
  #L2ca980.  return v2 @kind wide;
  catch `java.io.IOException` @[L2ca968..L2ca974] goto L2ca976;
}
