record `com.bumptech.glide.util.MarkEnforcingInputStream` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `int` `com.bumptech.glide.util.MarkEnforcingInputStream.availableBytes` @AccessFlag PRIVATE;
}
global `int` `@@com.bumptech.glide.util.MarkEnforcingInputStream.END_OF_STREAM` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.util.MarkEnforcingInputStream.UNSET` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.bumptech.glide.util.MarkEnforcingInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2caf4c.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2caf52.  v1:= -2147483648I;
  #L2caf56.  v0.`com.bumptech.glide.util.MarkEnforcingInputStream.availableBytes` @type ^`int` := v1;
  #L2caf5a.  return @kind void;
}
procedure `long` `getBytesToRead`(`com.bumptech.glide.util.MarkEnforcingInputStream` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.getBytesToRead:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2caee0.  v0:= v4.`com.bumptech.glide.util.MarkEnforcingInputStream.availableBytes` @type ^`int`;
  #L2caee4.  if v0 != 0 then goto L2caeee;
  #L2caee8.  v5:= -1L;
  #L2caeec.  return v5 @kind wide;
  #L2caeee.  v1:= -2147483648I;
  #L2caef2.  if v0 == v1 then goto L2caf02;
  #L2caef6.  v1:= (`long`) v0 @kind i2l;
  #L2caef8.  v3:= lcmp(v5, v1);
  #L2caefc.  if v3 <= 0 then goto L2caf02;
  #L2caf00.  v5:= (`long`) v0 @kind i2l;
  #L2caf02.  return v5 @kind wide;
}
procedure `void` `updateAvailableBytesAfterRead`(`com.bumptech.glide.util.MarkEnforcingInputStream` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.updateAvailableBytesAfterRead:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2cafa8.  v0:= v4.`com.bumptech.glide.util.MarkEnforcingInputStream.availableBytes` @type ^`int`;
  #L2cafac.  v1:= -2147483648I;
  #L2cafb0.  if v0 == v1 then goto L2cafca;
  #L2cafb4.  v1:= -1L;
  #L2cafb8.  v3:= lcmp(v5, v1);
  #L2cafbc.  if v3 == 0 then goto L2cafca;
  #L2cafc0.  v0:= (`long`) v0 @kind i2l;
  #L2cafc2.  v0:= v0 - v5 @kind long;
  #L2cafc4.  v5:= (`int`) v0 @kind l2i;
  #L2cafc6.  v4.`com.bumptech.glide.util.MarkEnforcingInputStream.availableBytes` @type ^`int` := v5;
  #L2cafca.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.util.MarkEnforcingInputStream` v2 @kind this) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2cae34.  v0:= v2.`com.bumptech.glide.util.MarkEnforcingInputStream.availableBytes` @type ^`int`;
  #L2cae38.  v1:= -2147483648I;
  #L2cae3c.  if v0 != v1 then goto L2cae4a;
  #L2cae40.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L2cae46.  v0:= temp;
  #L2cae48.  goto L2cae5a;
  #L2cae4a.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L2cae50.  v1:= temp;
  #L2cae52.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2cae58.  v0:= temp;
  #L2cae5a.  return v0;
}
procedure `void` `mark`(`com.bumptech.glide.util.MarkEnforcingInputStream` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L2caf6c.  call `mark`(v0, v1) @signature `Ljava/io/FilterInputStream;.mark:(I)V` @kind super;
  #L2caf72.  v0.`com.bumptech.glide.util.MarkEnforcingInputStream.availableBytes` @type ^`int` := v1;
  #L2caf76.  return @kind void;
}
procedure `int` `read`(`com.bumptech.glide.util.MarkEnforcingInputStream` v7 @kind this) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2cae6c.  v0:= 1L;
  #L2cae70.  call temp:= `getBytesToRead`(v7, v0) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.getBytesToRead:(J)J` @kind direct;
  #L2cae76.  v2:= temp @kind wide;
  #L2cae78.  v4:= -1L;
  #L2cae7c.  v6:= lcmp(v2, v4);
  #L2cae80.  if v6 != 0 then goto L2cae88;
  #L2cae84.  v0:= -1I;
  #L2cae86.  return v0;
  #L2cae88.  call temp:= `read`(v7) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L2cae8e.  v2:= temp;
  #L2cae90.  call `updateAvailableBytesAfterRead`(v7, v0) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.updateAvailableBytesAfterRead:(J)V` @kind direct;
  #L2cae96.  return v2;
}
procedure `int` `read`(`com.bumptech.glide.util.MarkEnforcingInputStream` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2caea8.  v0:= (`long`) v5 @kind i2l;
  #L2caeaa.  call temp:= `getBytesToRead`(v2, v0) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.getBytesToRead:(J)J` @kind direct;
  #L2caeb0.  v0:= temp @kind wide;
  #L2caeb2.  v5:= (`int`) v0 @kind l2i;
  #L2caeb4.  v0:= -1I;
  #L2caeb6.  if v5 != v0 then goto L2caebc;
  #L2caeba.  return v0;
  #L2caebc.  call temp:= `read`(v2, v3, v4, v5) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L2caec2.  v3:= temp;
  #L2caec4.  v4:= (`long`) v3 @kind i2l;
  #L2caec6.  call `updateAvailableBytesAfterRead`(v2, v4) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.updateAvailableBytesAfterRead:(J)V` @kind direct;
  #L2caecc.  return v3;
}
procedure `void` `reset`(`com.bumptech.glide.util.MarkEnforcingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2caf88.  call `reset`(v1) @signature `Ljava/io/FilterInputStream;.reset:()V` @kind super;
  #L2caf8e.  v0:= -2147483648I;
  #L2caf92.  v1.`com.bumptech.glide.util.MarkEnforcingInputStream.availableBytes` @type ^`int` := v0;
  #L2caf96.  return @kind void;
}
procedure `long` `skip`(`com.bumptech.glide.util.MarkEnforcingInputStream` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2caf14.  call temp:= `getBytesToRead`(v3, v4) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.getBytesToRead:(J)J` @kind direct;
  #L2caf1a.  v4:= temp @kind wide;
  #L2caf1c.  v0:= -1L;
  #L2caf20.  v2:= lcmp(v4, v0);
  #L2caf24.  if v2 != 0 then goto L2caf2a;
  #L2caf28.  return v0 @kind wide;
  #L2caf2a.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L2caf30.  v4:= temp @kind wide;
  #L2caf32.  call `updateAvailableBytesAfterRead`(v3, v4) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.updateAvailableBytesAfterRead:(J)V` @kind direct;
  #L2caf38.  return v4 @kind wide;
}
