record `com.bumptech.glide.util.Util` @kind class @AccessFlag PUBLIC_FINAL {
}
global `char`[] `@@com.bumptech.glide.util.Util.HEX_CHAR_ARRAY` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@com.bumptech.glide.util.Util.SHA_1_CHARS` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@com.bumptech.glide.util.Util.SHA_256_CHARS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/util/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2cb470.  v0:= "0123456789abcdef" @kind object;
  #L2cb474.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L2cb47a.  v0:= temp @kind object;
  #L2cb47c.  `@@com.bumptech.glide.util.Util.HEX_CHAR_ARRAY` @type ^`char`[] := v0 @kind object;
  #L2cb480.  v0:= 64I;
  #L2cb484.  v0:= new `char`[v0];
  #L2cb488.  `@@com.bumptech.glide.util.Util.SHA_256_CHARS` @type ^`char`[] := v0 @kind object;
  #L2cb48c.  v0:= 40I;
  #L2cb490.  v0:= new `char`[v0];
  #L2cb494.  `@@com.bumptech.glide.util.Util.SHA_1_CHARS` @type ^`char`[] := v0 @kind object;
  #L2cb498.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.Util` v0 @kind this) @signature `Lcom/bumptech/glide/util/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2cb4ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cb4b2.  return @kind void;
}
procedure `void` `assertBackgroundThread`() @signature `Lcom/bumptech/glide/util/Util;.assertBackgroundThread:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb4c4.  call temp:= `isOnBackgroundThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnBackgroundThread:()Z` @kind static;
  #L2cb4ca.  v0:= temp;
  #L2cb4cc.  if v0 == 0 then goto L2cb4d2;
  #L2cb4d0.  return @kind void;
  #L2cb4d2.  v0:= new `java.lang.IllegalArgumentException`;
  #L2cb4d6.  v1:= "YOu must call this method on a background thread" @kind object;
  #L2cb4da.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb4e0.  throw v0;
}
procedure `void` `assertMainThread`() @signature `Lcom/bumptech/glide/util/Util;.assertMainThread:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb4f4.  call temp:= `isOnMainThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnMainThread:()Z` @kind static;
  #L2cb4fa.  v0:= temp;
  #L2cb4fc.  if v0 == 0 then goto L2cb502;
  #L2cb500.  return @kind void;
  #L2cb502.  v0:= new `java.lang.IllegalArgumentException`;
  #L2cb506.  v1:= "You must call this method on the main thread" @kind object;
  #L2cb50a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb510.  throw v0;
}
procedure `java.lang.String` `bytesToHex`(`byte`[] v5 @kind object, `char`[] v6 @kind object) @signature `Lcom/bumptech/glide/util/Util;.bytesToHex:([B[C)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2cb344.  v0:= 0I;
  #L2cb346.  v1:= length @variable v5;
  #L2cb348.  if v0 >= v1 then goto L2cb37e;
  #L2cb34c.  v1:= v5[v0] @kind byte;
  #L2cb350.  v1:= v1 ^& 255;
  #L2cb354.  v2:= v0 * 2;
  #L2cb358.  v3:= `@@com.bumptech.glide.util.Util.HEX_CHAR_ARRAY` @type ^`char`[] @kind object;
  #L2cb35c.  v4:= v1 ^>> 4;
  #L2cb360.  v4:= v3[v4] @kind char;
  #L2cb364.  v6[v2]:= v4 @kind char;
  #L2cb368.  v2:= v2 + 1;
  #L2cb36c.  v1:= v1 ^& 15;
  #L2cb370.  v1:= v3[v1] @kind char;
  #L2cb374.  v6[v2]:= v1 @kind char;
  #L2cb378.  v0:= v0 + 1;
  #L2cb37c.  goto L2cb346;
  #L2cb37e.  v5:= new `java.lang.String`;
  #L2cb382.  call `<init>`(v5, v6) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L2cb388.  return v5 @kind object;
}
procedure `java.util.Queue` `createQueue`(`int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.createQueue:(I)Ljava/util/Queue;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cb454.  v0:= new `java.util.ArrayDeque`;
  #L2cb458.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L2cb45e.  return v0 @kind object;
}
procedure `int` `getBitmapByteSize`(`int` v0 , `int` v1 , `android.graphics.Bitmap$Config` v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getBitmapByteSize:(IILandroid/graphics/Bitmap$Config;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2cb2c0.  v0:= v0 * v1 @kind int;
  #L2cb2c4.  call temp:= `getBytesPerPixel`(v2) @signature `Lcom/bumptech/glide/util/Util;.getBytesPerPixel:(Landroid/graphics/Bitmap$Config;)I` @kind static;
  #L2cb2ca.  v1:= temp;
  #L2cb2cc.  v0:= v0 * v1 @kind int;
  #L2cb2d0.  return v0;
}
procedure `int` `getBitmapByteSize`(`android.graphics.Bitmap` v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getBitmapByteSize:(Landroid/graphics/Bitmap;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb274.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2cb278.  v1:= 19I;
  #L2cb27c.  if v0 < v1 then goto L2cb28a;
  #L2cb280.  call temp:= `getAllocationByteCount`(v2) @signature `Landroid/graphics/Bitmap;.getAllocationByteCount:()I` @kind virtual;
  #L2cb286.  v2:= temp;
  #L2cb288.  return v2;
  #L2cb28a.  call temp:= `getHeight`(v2) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L2cb290.  v0:= temp;
  #L2cb292.  call temp:= `getRowBytes`(v2) @signature `Landroid/graphics/Bitmap;.getRowBytes:()I` @kind virtual;
  #L2cb298.  v2:= temp;
  #L2cb29a.  v0:= v0 * v2 @kind int;
  #L2cb29e.  return v0;
  catch `java.lang.NullPointerException` @[L2cb280..L2cb288] goto L2cb28a;
}
procedure `int` `getBytesPerPixel`(`android.graphics.Bitmap$Config` v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getBytesPerPixel:(Landroid/graphics/Bitmap$Config;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2cb2e4.  if v2 != 0 then goto L2cb2ec;
  #L2cb2e8.  v2:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L2cb2ec.  v0:= `@@com.bumptech.glide.util.Util$1.$SwitchMap$android$graphics$Bitmap$Config` @type ^`int`[] @kind object;
  #L2cb2f0.  call temp:= `ordinal`(v2) @signature `Landroid/graphics/Bitmap$Config;.ordinal:()I` @kind virtual;
  #L2cb2f6.  v2:= temp;
  #L2cb2f8.  v2:= v0[v2];
  #L2cb2fc.  v0:= 2I;
  #L2cb2fe.  v1:= 1I;
  #L2cb300.  if v2 == v1 then goto L2cb312;
  #L2cb304.  if v2 == v0 then goto L2cb314;
  #L2cb308.  v1:= 3I;
  #L2cb30a.  if v2 == v1 then goto L2cb314;
  #L2cb30e.  v0:= 4I;
  #L2cb310.  goto L2cb314;
  #L2cb312.  v0:= 1I;
  #L2cb314.  return v0;
}
procedure `int` `getSize`(`android.graphics.Bitmap` v0 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getSize:(Landroid/graphics/Bitmap;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2cb328.  call temp:= `getBitmapByteSize`(v0) @signature `Lcom/bumptech/glide/util/Util;.getBitmapByteSize:(Landroid/graphics/Bitmap;)I` @kind static;
  #L2cb32e.  v0:= temp;
  #L2cb330.  return v0;
}
procedure `java.util.List` `getSnapshot`(`java.util.Collection` v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb40c.  v0:= new `java.util.ArrayList`;
  #L2cb410.  call temp:= `size`(v2) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2cb416.  v1:= temp;
  #L2cb418.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2cb41e.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2cb424.  v2:= temp @kind object;
  #L2cb426.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2cb42c.  v1:= temp;
  #L2cb42e.  if v1 == 0 then goto L2cb442;
  #L2cb432.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2cb438.  v1:= temp @kind object;
  #L2cb43a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2cb440.  goto L2cb426;
  #L2cb442.  return v0 @kind object;
}
procedure `boolean` `isOnBackgroundThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnBackgroundThread:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cb1d0.  call temp:= `isOnMainThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnMainThread:()Z` @kind static;
  #L2cb1d6.  v0:= temp;
  #L2cb1d8.  v0:= v0 ^~ 1;
  #L2cb1dc.  return v0;
}
procedure `boolean` `isOnMainThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnMainThread:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb1f0.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L2cb1f6.  v0:= temp @kind object;
  #L2cb1f8.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L2cb1fe.  v1:= temp @kind object;
  #L2cb200.  if v0 != v1 then goto L2cb208;
  #L2cb204.  v0:= 1I;
  #L2cb206.  goto L2cb20a;
  #L2cb208.  v0:= 0I;
  #L2cb20a.  return v0;
}
procedure `boolean` `isValidDimension`(`int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.isValidDimension:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2cb21c.  if v1 > 0 then goto L2cb22e;
  #L2cb220.  v0:= -2147483648I;
  #L2cb224.  if v1 != v0 then goto L2cb22a;
  #L2cb228.  goto L2cb22e;
  #L2cb22a.  v1:= 0I;
  #L2cb22c.  goto L2cb230;
  #L2cb22e.  v1:= 1I;
  #L2cb230.  return v1;
}
procedure `boolean` `isValidDimensions`(`int` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.isValidDimensions:(II)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2cb244.  call temp:= `isValidDimension`(v0) @signature `Lcom/bumptech/glide/util/Util;.isValidDimension:(I)Z` @kind static;
  #L2cb24a.  v0:= temp;
  #L2cb24c.  if v0 == 0 then goto L2cb260;
  #L2cb250.  call temp:= `isValidDimension`(v1) @signature `Lcom/bumptech/glide/util/Util;.isValidDimension:(I)Z` @kind static;
  #L2cb256.  v0:= temp;
  #L2cb258.  if v0 == 0 then goto L2cb260;
  #L2cb25c.  v0:= 1I;
  #L2cb25e.  goto L2cb262;
  #L2cb260.  v0:= 0I;
  #L2cb262.  return v0;
}
procedure `java.lang.String` `sha1BytesToHex`(`byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.sha1BytesToHex:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb39c.  v0:= `@@com.bumptech.glide.util.Util.SHA_1_CHARS` @type ^`char`[] @kind object;
  #L2cb3a0.  @monitorenter v0
  #L2cb3a2.  v1:= `@@com.bumptech.glide.util.Util.SHA_1_CHARS` @type ^`char`[] @kind object;
  #L2cb3a6.  call temp:= `bytesToHex`(v2, v1) @signature `Lcom/bumptech/glide/util/Util;.bytesToHex:([B[C)Ljava/lang/String;` @kind static;
  #L2cb3ac.  v2:= temp @kind object;
  #L2cb3ae.  @monitorexit v0
  #L2cb3b0.  return v2 @kind object;
  #L2cb3b2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2cb3b4.  @monitorexit v0
  #L2cb3b6.  throw v2;
  catch `java.lang.Throwable` @[L2cb3a2..L2cb3b6] goto L2cb3b2;
}
procedure `java.lang.String` `sha256BytesToHex`(`byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.sha256BytesToHex:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb3d4.  v0:= `@@com.bumptech.glide.util.Util.SHA_256_CHARS` @type ^`char`[] @kind object;
  #L2cb3d8.  @monitorenter v0
  #L2cb3da.  v1:= `@@com.bumptech.glide.util.Util.SHA_256_CHARS` @type ^`char`[] @kind object;
  #L2cb3de.  call temp:= `bytesToHex`(v2, v1) @signature `Lcom/bumptech/glide/util/Util;.bytesToHex:([B[C)Ljava/lang/String;` @kind static;
  #L2cb3e4.  v2:= temp @kind object;
  #L2cb3e6.  @monitorexit v0
  #L2cb3e8.  return v2 @kind object;
  #L2cb3ea.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2cb3ec.  @monitorexit v0
  #L2cb3ee.  throw v2;
  catch `java.lang.Throwable` @[L2cb3da..L2cb3ee] goto L2cb3ea;
}
