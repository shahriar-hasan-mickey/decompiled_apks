record `org.greenrobot.eventbus.SubscriberMethod` @kind class @AccessFlag PUBLIC {
  `java.lang.Class` `org.greenrobot.eventbus.SubscriberMethod.eventType` @AccessFlag FINAL;
  `java.lang.reflect.Method` `org.greenrobot.eventbus.SubscriberMethod.method` @AccessFlag FINAL;
  `java.lang.String` `org.greenrobot.eventbus.SubscriberMethod.methodString` @AccessFlag ;
  `int` `org.greenrobot.eventbus.SubscriberMethod.priority` @AccessFlag FINAL;
  `boolean` `org.greenrobot.eventbus.SubscriberMethod.sticky` @AccessFlag FINAL;
  `org.greenrobot.eventbus.ThreadMode` `org.greenrobot.eventbus.SubscriberMethod.threadMode` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.greenrobot.eventbus.SubscriberMethod` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.Class` v2 @kind object, `org.greenrobot.eventbus.ThreadMode` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lorg/greenrobot/eventbus/SubscriberMethod;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/Class;Lorg/greenrobot/eventbus/ThreadMode;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4832e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4832ea.  v0.`org.greenrobot.eventbus.SubscriberMethod.method` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L4832ee.  v0.`org.greenrobot.eventbus.SubscriberMethod.threadMode` @type ^`org.greenrobot.eventbus.ThreadMode` := v3 @kind object;
  #L4832f2.  v0.`org.greenrobot.eventbus.SubscriberMethod.eventType` @type ^`java.lang.Class` := v2 @kind object;
  #L4832f6.  v0.`org.greenrobot.eventbus.SubscriberMethod.priority` @type ^`int` := v4;
  #L4832fa.  v0.`org.greenrobot.eventbus.SubscriberMethod.sticky` @type ^`boolean` := v5 @kind boolean;
  #L4832fe.  return @kind void;
}
procedure `void` `checkMethodString`(`org.greenrobot.eventbus.SubscriberMethod` v2 @kind this) @signature `Lorg/greenrobot/eventbus/SubscriberMethod;.checkMethodString:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L483310.  @monitorenter v2
  #L483312.  v0:= v2.`org.greenrobot.eventbus.SubscriberMethod.methodString` @type ^`java.lang.String` @kind object;
  #L483316.  if v0 != 0 then goto L483386;
  #L48331a.  v0:= new `java.lang.StringBuilder`;
  #L48331e.  v1:= 64I;
  #L483322.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L483328.  v1:= v2.`org.greenrobot.eventbus.SubscriberMethod.method` @type ^`java.lang.reflect.Method` @kind object;
  #L48332c.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L483332.  v1:= temp @kind object;
  #L483334.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L48333a.  v1:= temp @kind object;
  #L48333c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L483342.  v1:= 35I;
  #L483346.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L48334c.  v1:= v2.`org.greenrobot.eventbus.SubscriberMethod.method` @type ^`java.lang.reflect.Method` @kind object;
  #L483350.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L483356.  v1:= temp @kind object;
  #L483358.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48335e.  v1:= 40I;
  #L483362.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L483368.  v1:= v2.`org.greenrobot.eventbus.SubscriberMethod.eventType` @type ^`java.lang.Class` @kind object;
  #L48336c.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L483372.  v1:= temp @kind object;
  #L483374.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48337a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L483380.  v0:= temp @kind object;
  #L483382.  v2.`org.greenrobot.eventbus.SubscriberMethod.methodString` @type ^`java.lang.String` := v0 @kind object;
  #L483386.  @monitorexit v2
  #L483388.  return @kind void;
  #L48338a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48338c.  @monitorexit v2
  #L48338e.  throw v0;
  catch `java.lang.Throwable` @[L483312..L483386] goto L48338a;
}
procedure `boolean` `equals`(`org.greenrobot.eventbus.SubscriberMethod` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/greenrobot/eventbus/SubscriberMethod;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48327c.  if v2 != v1 then goto L483284;
  #L483280.  v2:= 1I;
  #L483282.  return v2;
  #L483284.  v0:= instanceof @variable v2 @type ^`org.greenrobot.eventbus.SubscriberMethod` @kind boolean;
  #L483288.  if v0 == 0 then goto L4832ae;
  #L48328c.  call `checkMethodString`(v1) @signature `Lorg/greenrobot/eventbus/SubscriberMethod;.checkMethodString:()V` @kind direct;
  #L483292.  v2:= (`org.greenrobot.eventbus.SubscriberMethod`) v2 @kind object;
  #L483296.  call `checkMethodString`(v2) @signature `Lorg/greenrobot/eventbus/SubscriberMethod;.checkMethodString:()V` @kind direct;
  #L48329c.  v0:= v1.`org.greenrobot.eventbus.SubscriberMethod.methodString` @type ^`java.lang.String` @kind object;
  #L4832a0.  v2:= v2.`org.greenrobot.eventbus.SubscriberMethod.methodString` @type ^`java.lang.String` @kind object;
  #L4832a4.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4832aa.  v2:= temp;
  #L4832ac.  return v2;
  #L4832ae.  v2:= 0I;
  #L4832b0.  return v2;
}
procedure `int` `hashCode`(`org.greenrobot.eventbus.SubscriberMethod` v1 @kind this) @signature `Lorg/greenrobot/eventbus/SubscriberMethod;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4832c4.  v0:= v1.`org.greenrobot.eventbus.SubscriberMethod.method` @type ^`java.lang.reflect.Method` @kind object;
  #L4832c8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/reflect/Method;.hashCode:()I` @kind virtual;
  #L4832ce.  v0:= temp;
  #L4832d0.  return v0;
}
