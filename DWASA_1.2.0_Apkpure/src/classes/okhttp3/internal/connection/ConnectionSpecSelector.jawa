record `okhttp3.internal.connection.ConnectionSpecSelector` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.connection.ConnectionSpecSelector.isFallback` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.ConnectionSpecSelector.isFallbackPossible` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.connection.ConnectionSpecSelector` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L466790.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L466796.  v0:= 0I;
  #L466798.  v1.`okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex` @type ^`int` := v0;
  #L46679c.  v1.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` := v2 @kind object;
  #L4667a0.  return @kind void;
}
procedure `boolean` `isFallbackPossible`(`okhttp3.internal.connection.ConnectionSpecSelector` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.isFallbackPossible:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L466664.  v0:= v2.`okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex` @type ^`int`;
  #L466668.  v1:= v2.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` @kind object;
  #L46666c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L466672.  v1:= temp;
  #L466674.  if v0 >= v1 then goto L46669e;
  #L466678.  v1:= v2.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` @kind object;
  #L46667c.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L466682.  v1:= temp @kind object;
  #L466684.  v1:= (`okhttp3.ConnectionSpec`) v1 @kind object;
  #L466688.  call temp:= `isCompatible`(v1, v3) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L46668e.  v1:= temp;
  #L466690.  if v1 == 0 then goto L466698;
  #L466694.  v3:= 1I;
  #L466696.  return v3;
  #L466698.  v0:= v0 + 1;
  #L46669c.  goto L466668;
  #L46669e.  v3:= 0I;
  #L4666a0.  return v3;
}
procedure `okhttp3.ConnectionSpec` `configureSecureSocket`(`okhttp3.internal.connection.ConnectionSpecSelector` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.configureSecureSocket:(Ljavax/net/ssl/SSLSocket;)Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4666b4.  v0:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex` @type ^`int`;
  #L4666b8.  v1:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` @kind object;
  #L4666bc.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4666c2.  v1:= temp;
  #L4666c4.  if v0 >= v1 then goto L4666f4;
  #L4666c8.  v2:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` @kind object;
  #L4666cc.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4666d2.  v2:= temp @kind object;
  #L4666d4.  v2:= (`okhttp3.ConnectionSpec`) v2 @kind object;
  #L4666d8.  call temp:= `isCompatible`(v2, v5) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L4666de.  v3:= temp;
  #L4666e0.  if v3 == 0 then goto L4666ee;
  #L4666e4.  v0:= v0 + 1;
  #L4666e8.  v4.`okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex` @type ^`int` := v0;
  #L4666ec.  goto L4666f6;
  #L4666ee.  v0:= v0 + 1;
  #L4666f2.  goto L4666c4;
  #L4666f4.  v2:= 0I;
  #L4666f6.  if v2 == 0 then goto L466716;
  #L4666fa.  call temp:= `isFallbackPossible`(v4, v5) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.isFallbackPossible:(Ljavax/net/ssl/SSLSocket;)Z` @kind direct;
  #L466700.  v0:= temp;
  #L466702.  v4.`okhttp3.internal.connection.ConnectionSpecSelector.isFallbackPossible` @type ^`boolean` := v0 @kind boolean;
  #L466706.  v0:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L46670a.  v1:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.isFallback` @type ^`boolean` @kind boolean;
  #L46670e.  call `apply`(v0, v2, v5, v1) @signature `Lokhttp3/internal/Internal;.apply:(Lokhttp3/ConnectionSpec;Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L466714.  return v2 @kind object;
  #L466716.  v0:= new `java.net.UnknownServiceException`;
  #L46671a.  v1:= new `java.lang.StringBuilder`;
  #L46671e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L466724.  v2:= "Unable to find acceptable protocols. isFallback=" @kind object;
  #L466728.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46672e.  v2:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.isFallback` @type ^`boolean` @kind boolean;
  #L466732.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L466738.  v2:= ", modes=" @kind object;
  #L46673c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L466742.  v2:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` @kind object;
  #L466746.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46674c.  v2:= ", supported protocols=" @kind object;
  #L466750.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L466756.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L46675c.  v5:= temp @kind object;
  #L46675e.  call temp:= `toString`(v5) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L466764.  v5:= temp @kind object;
  #L466766.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46676c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L466772.  v5:= temp @kind object;
  #L466774.  call `<init>`(v0, v5) @signature `Ljava/net/UnknownServiceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46677a.  goto L46677e;
  #L46677c.  throw v0;
  #L46677e.  goto L46677c;
}
procedure `boolean` `connectionFailed`(`okhttp3.internal.connection.ConnectionSpecSelector` v4 @kind this, `java.io.IOException` v5 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.connectionFailed:(Ljava/io/IOException;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4665f8.  v0:= 1I;
  #L4665fa.  v4.`okhttp3.internal.connection.ConnectionSpecSelector.isFallback` @type ^`boolean` := v0 @kind boolean;
  #L4665fe.  v1:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.isFallbackPossible` @type ^`boolean` @kind boolean;
  #L466602.  v2:= 0I;
  #L466604.  if v1 != 0 then goto L46660a;
  #L466608.  return v2;
  #L46660a.  v1:= instanceof @variable v5 @type ^`java.net.ProtocolException` @kind boolean;
  #L46660e.  if v1 == 0 then goto L466614;
  #L466612.  return v2;
  #L466614.  v1:= instanceof @variable v5 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L466618.  if v1 == 0 then goto L46661e;
  #L46661c.  return v2;
  #L46661e.  v1:= instanceof @variable v5 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L466622.  if v1 == 0 then goto L466638;
  #L466626.  call temp:= `getCause`(v5) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L46662c.  v3:= temp @kind object;
  #L46662e.  v3:= instanceof @variable v3 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L466632.  if v3 == 0 then goto L466638;
  #L466636.  return v2;
  #L466638.  v3:= instanceof @variable v5 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L46663c.  if v3 == 0 then goto L466642;
  #L466640.  return v2;
  #L466642.  if v1 != 0 then goto L466652;
  #L466646.  v5:= instanceof @variable v5 @type ^`javax.net.ssl.SSLProtocolException` @kind boolean;
  #L46664a.  if v5 == 0 then goto L466650;
  #L46664e.  goto L466652;
  #L466650.  v0:= 0I;
  #L466652.  return v0;
}
