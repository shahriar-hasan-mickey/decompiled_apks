record `okhttp3.internal.connection.RouteException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.io.IOException` `okhttp3.internal.connection.RouteException.lastException` @AccessFlag PRIVATE;
}
global `java.lang.reflect.Method` `@@okhttp3.internal.connection.RouteException.addSuppressedExceptionMethod` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/connection/RouteException;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L467910.  v0:= constclass @type ^`java.lang.Throwable` @kind object;
  #L467914.  v1:= "addSuppressed" @kind object;
  #L467918.  v2:= 1I;
  #L46791a.  v2:= new `java.lang.Class`[v2];
  #L46791e.  v3:= 0I;
  #L467920.  v4:= constclass @type ^`java.lang.Throwable` @kind object;
  #L467924.  v2[v3]:= v4 @kind object;
  #L467928.  call temp:= `getDeclaredMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L46792e.  v0:= temp @kind object;
  #L467930.  goto L467934;
  #L467932.  v0:= 0I;
  #L467934.  `@@okhttp3.internal.connection.RouteException.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L467938.  return @kind void;
  catch `java.lang.Exception` @[L467910..L467930] goto L467932;
}
procedure `void` `<init>`(`okhttp3.internal.connection.RouteException` v0 @kind this, `java.io.IOException` v1 @kind object) @signature `Lokhttp3/internal/connection/RouteException;.<init>:(Ljava/io/IOException;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L46795c.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L467962.  v0.`okhttp3.internal.connection.RouteException.lastException` @type ^`java.io.IOException` := v1 @kind object;
  #L467966.  return @kind void;
}
procedure `void` `addSuppressedIfPossible`(`okhttp3.internal.connection.RouteException` v3 @kind this, `java.io.IOException` v4 @kind object, `java.io.IOException` v5 @kind object) @signature `Lokhttp3/internal/connection/RouteException;.addSuppressedIfPossible:(Ljava/io/IOException;Ljava/io/IOException;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L467998.  v0:= `@@okhttp3.internal.connection.RouteException.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L46799c.  if v0 == 0 then goto L4679b2;
  #L4679a0.  v1:= 1I;
  #L4679a2.  v1:= new `java.lang.Object`[v1];
  #L4679a6.  v2:= 0I;
  #L4679a8.  v1[v2]:= v5 @kind object;
  #L4679ac.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4679b2.  return @kind void;
  catch `java.lang.reflect.InvocationTargetException` @[L4679a2..L4679b2] goto L4679b2;
  catch `java.lang.IllegalAccessException` @[L4679a2..L4679b2] goto L4679b2;
}
procedure `void` `addConnectException`(`okhttp3.internal.connection.RouteException` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `Lokhttp3/internal/connection/RouteException;.addConnectException:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L467978.  v0:= v1.`okhttp3.internal.connection.RouteException.lastException` @type ^`java.io.IOException` @kind object;
  #L46797c.  call `addSuppressedIfPossible`(v1, v2, v0) @signature `Lokhttp3/internal/connection/RouteException;.addSuppressedIfPossible:(Ljava/io/IOException;Ljava/io/IOException;)V` @kind direct;
  #L467982.  v1.`okhttp3.internal.connection.RouteException.lastException` @type ^`java.io.IOException` := v2 @kind object;
  #L467986.  return @kind void;
}
procedure `java.io.IOException` `getLastConnectException`(`okhttp3.internal.connection.RouteException` v1 @kind this) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4678f8.  v0:= v1.`okhttp3.internal.connection.RouteException.lastException` @type ^`java.io.IOException` @kind object;
  #L4678fc.  return v0 @kind object;
}
