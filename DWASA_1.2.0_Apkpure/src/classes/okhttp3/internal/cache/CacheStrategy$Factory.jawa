record `okhttp3.internal.cache.CacheStrategy$Factory` @kind class @AccessFlag PUBLIC {
  `int` `okhttp3.internal.cache.CacheStrategy$Factory.ageSeconds` @AccessFlag PRIVATE;
  `okhttp3.Response` `okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.internal.cache.CacheStrategy$Factory.etag` @AccessFlag PRIVATE;
  `java.util.Date` `okhttp3.internal.cache.CacheStrategy$Factory.expires` @AccessFlag PRIVATE;
  `java.util.Date` `okhttp3.internal.cache.CacheStrategy$Factory.lastModified` @AccessFlag PRIVATE;
  `java.lang.String` `okhttp3.internal.cache.CacheStrategy$Factory.lastModifiedString` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.cache.CacheStrategy$Factory.nowMillis` @AccessFlag FINAL;
  `long` `okhttp3.internal.cache.CacheStrategy$Factory.receivedResponseMillis` @AccessFlag PRIVATE;
  `okhttp3.Request` `okhttp3.internal.cache.CacheStrategy$Factory.request` @AccessFlag FINAL;
  `long` `okhttp3.internal.cache.CacheStrategy$Factory.sentRequestMillis` @AccessFlag PRIVATE;
  `java.util.Date` `okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @AccessFlag PRIVATE;
  `java.lang.String` `okhttp3.internal.cache.CacheStrategy$Factory.servedDateString` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.cache.CacheStrategy$Factory` v3 @kind this, `long` v4 , `okhttp3.Request` v6 @kind object, `okhttp3.Response` v7 @kind object) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.<init>:(JLokhttp3/Request;Lokhttp3/Response;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L463db4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L463dba.  v0:= -1I;
  #L463dbc.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.ageSeconds` @type ^`int` := v0;
  #L463dc0.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.nowMillis` @type ^`long` := v4 @kind wide;
  #L463dc4.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` := v6 @kind object;
  #L463dc8.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @type ^`okhttp3.Response` := v7 @kind object;
  #L463dcc.  if v7 == 0 then goto L463ea8;
  #L463dd0.  call temp:= `sentRequestAtMillis`(v7) @signature `Lokhttp3/Response;.sentRequestAtMillis:()J` @kind virtual;
  #L463dd6.  v4:= temp @kind wide;
  #L463dd8.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.sentRequestMillis` @type ^`long` := v4 @kind wide;
  #L463ddc.  call temp:= `receivedResponseAtMillis`(v7) @signature `Lokhttp3/Response;.receivedResponseAtMillis:()J` @kind virtual;
  #L463de2.  v4:= temp @kind wide;
  #L463de4.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.receivedResponseMillis` @type ^`long` := v4 @kind wide;
  #L463de8.  call temp:= `headers`(v7) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L463dee.  v4:= temp @kind object;
  #L463df0.  v5:= 0I;
  #L463df2.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L463df8.  v6:= temp;
  #L463dfa.  if v5 >= v6 then goto L463ea8;
  #L463dfe.  call temp:= `name`(v4, v5) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L463e04.  v7:= temp @kind object;
  #L463e06.  call temp:= `value`(v4, v5) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L463e0c.  v1:= temp @kind object;
  #L463e0e.  v2:= "Date" @kind object;
  #L463e12.  call temp:= `equalsIgnoreCase`(v2, v7) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L463e18.  v2:= temp;
  #L463e1a.  if v2 == 0 then goto L463e30;
  #L463e1e.  call temp:= `parse`(v1) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L463e24.  v7:= temp @kind object;
  #L463e26.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @type ^`java.util.Date` := v7 @kind object;
  #L463e2a.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.servedDateString` @type ^`java.lang.String` := v1 @kind object;
  #L463e2e.  goto L463ea2;
  #L463e30.  v2:= "Expires" @kind object;
  #L463e34.  call temp:= `equalsIgnoreCase`(v2, v7) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L463e3a.  v2:= temp;
  #L463e3c.  if v2 == 0 then goto L463e4e;
  #L463e40.  call temp:= `parse`(v1) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L463e46.  v7:= temp @kind object;
  #L463e48.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.expires` @type ^`java.util.Date` := v7 @kind object;
  #L463e4c.  goto L463ea2;
  #L463e4e.  v2:= "Last-Modified" @kind object;
  #L463e52.  call temp:= `equalsIgnoreCase`(v2, v7) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L463e58.  v2:= temp;
  #L463e5a.  if v2 == 0 then goto L463e70;
  #L463e5e.  call temp:= `parse`(v1) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L463e64.  v7:= temp @kind object;
  #L463e66.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.lastModified` @type ^`java.util.Date` := v7 @kind object;
  #L463e6a.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.lastModifiedString` @type ^`java.lang.String` := v1 @kind object;
  #L463e6e.  goto L463ea2;
  #L463e70.  v2:= "ETag" @kind object;
  #L463e74.  call temp:= `equalsIgnoreCase`(v2, v7) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L463e7a.  v2:= temp;
  #L463e7c.  if v2 == 0 then goto L463e86;
  #L463e80.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.etag` @type ^`java.lang.String` := v1 @kind object;
  #L463e84.  goto L463ea2;
  #L463e86.  v2:= "Age" @kind object;
  #L463e8a.  call temp:= `equalsIgnoreCase`(v2, v7) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L463e90.  v7:= temp;
  #L463e92.  if v7 == 0 then goto L463ea2;
  #L463e96.  call temp:= `parseSeconds`(v1, v0) @signature `Lokhttp3/internal/http/HttpHeaders;.parseSeconds:(Ljava/lang/String;I)I` @kind static;
  #L463e9c.  v7:= temp;
  #L463e9e.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.ageSeconds` @type ^`int` := v7;
  #L463ea2.  v5:= v5 + 1;
  #L463ea6.  goto L463dfa;
  #L463ea8.  return @kind void;
}
procedure `long` `cacheResponseAge`(`okhttp3.internal.cache.CacheStrategy$Factory` v9 @kind this) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.cacheResponseAge:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4639a4.  v0:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @type ^`java.util.Date` @kind object;
  #L4639a8.  v1:= 0L;
  #L4639ac.  if v0 == 0 then goto L4639c6;
  #L4639b0.  v3:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.receivedResponseMillis` @type ^`long` @kind wide;
  #L4639b4.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L4639ba.  v5:= temp @kind wide;
  #L4639bc.  v3:= v3 - v5 @kind long;
  #L4639be.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4639c4.  v1:= temp @kind wide;
  #L4639c6.  v0:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.ageSeconds` @type ^`int`;
  #L4639ca.  v3:= -1I;
  #L4639cc.  if v0 == v3 then goto L4639ea;
  #L4639d0.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4639d4.  v3:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.ageSeconds` @type ^`int`;
  #L4639d8.  v3:= (`long`) v3 @kind i2l;
  #L4639da.  call temp:= `toMillis`(v0, v3) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L4639e0.  v3:= temp @kind wide;
  #L4639e2.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4639e8.  v1:= temp @kind wide;
  #L4639ea.  v3:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.receivedResponseMillis` @type ^`long` @kind wide;
  #L4639ee.  v5:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.sentRequestMillis` @type ^`long` @kind wide;
  #L4639f2.  v5:= v3 - v5 @kind long;
  #L4639f6.  v7:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.nowMillis` @type ^`long` @kind wide;
  #L4639fa.  v7:= v7 - v3 @kind long;
  #L4639fc.  v1:= v1 + v5 @kind long;
  #L4639fe.  v1:= v1 + v7 @kind long;
  #L463a00.  return v1 @kind wide;
}
procedure `long` `computeFreshnessLifetime`(`okhttp3.internal.cache.CacheStrategy$Factory` v7 @kind this) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.computeFreshnessLifetime:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L463a14.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L463a18.  call temp:= `cacheControl`(v0) @signature `Lokhttp3/Response;.cacheControl:()Lokhttp3/CacheControl;` @kind virtual;
  #L463a1e.  v0:= temp @kind object;
  #L463a20.  call temp:= `maxAgeSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxAgeSeconds:()I` @kind virtual;
  #L463a26.  v1:= temp;
  #L463a28.  v2:= -1I;
  #L463a2a.  if v1 == v2 then goto L463a46;
  #L463a2e.  v1:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L463a32.  call temp:= `maxAgeSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxAgeSeconds:()I` @kind virtual;
  #L463a38.  v0:= temp;
  #L463a3a.  v2:= (`long`) v0 @kind i2l;
  #L463a3c.  call temp:= `toMillis`(v1, v2) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L463a42.  v0:= temp @kind wide;
  #L463a44.  return v0 @kind wide;
  #L463a46.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.expires` @type ^`java.util.Date` @kind object;
  #L463a4a.  v1:= 0L;
  #L463a4e.  if v0 == 0 then goto L463a84;
  #L463a52.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @type ^`java.util.Date` @kind object;
  #L463a56.  if v0 == 0 then goto L463a64;
  #L463a5a.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L463a60.  v3:= temp @kind wide;
  #L463a62.  goto L463a68;
  #L463a64.  v3:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.receivedResponseMillis` @type ^`long` @kind wide;
  #L463a68.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.expires` @type ^`java.util.Date` @kind object;
  #L463a6c.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L463a72.  v5:= temp @kind wide;
  #L463a74.  v3:= v5 - v3 @kind long;
  #L463a78.  v0:= lcmp(v3, v1);
  #L463a7c.  if v0 <= 0 then goto L463a82;
  #L463a80.  v1:= v3 @kind wide;
  #L463a82.  return v1 @kind wide;
  #L463a84.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.lastModified` @type ^`java.util.Date` @kind object;
  #L463a88.  if v0 == 0 then goto L463ae0;
  #L463a8c.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L463a90.  call temp:= `request`(v0) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L463a96.  v0:= temp @kind object;
  #L463a98.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L463a9e.  v0:= temp @kind object;
  #L463aa0.  call temp:= `query`(v0) @signature `Lokhttp3/HttpUrl;.query:()Ljava/lang/String;` @kind virtual;
  #L463aa6.  v0:= temp @kind object;
  #L463aa8.  if v0 != 0 then goto L463ae0;
  #L463aac.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @type ^`java.util.Date` @kind object;
  #L463ab0.  if v0 == 0 then goto L463abe;
  #L463ab4.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L463aba.  v3:= temp @kind wide;
  #L463abc.  goto L463ac2;
  #L463abe.  v3:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.sentRequestMillis` @type ^`long` @kind wide;
  #L463ac2.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.lastModified` @type ^`java.util.Date` @kind object;
  #L463ac6.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L463acc.  v5:= temp @kind wide;
  #L463ace.  v3:= v3 - v5 @kind long;
  #L463ad0.  v0:= lcmp(v3, v1);
  #L463ad4.  if v0 <= 0 then goto L463ae0;
  #L463ad8.  v0:= 10L;
  #L463adc.  v1:= v3 / v0 @kind long;
  #L463ae0.  return v1 @kind wide;
}
procedure `okhttp3.internal.cache.CacheStrategy` `getCandidate`(`okhttp3.internal.cache.CacheStrategy$Factory` v13 @kind this) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.getCandidate:()Lokhttp3/internal/cache/CacheStrategy;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L463b3c.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L463b40.  v1:= 0I;
  #L463b42.  if v0 != 0 then goto L463b56;
  #L463b46.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L463b4a.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463b4e.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L463b54.  return v0 @kind object;
  #L463b56.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463b5a.  call temp:= `isHttps`(v0) @signature `Lokhttp3/Request;.isHttps:()Z` @kind virtual;
  #L463b60.  v0:= temp;
  #L463b62.  if v0 == 0 then goto L463b86;
  #L463b66.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L463b6a.  call temp:= `handshake`(v0) @signature `Lokhttp3/Response;.handshake:()Lokhttp3/Handshake;` @kind virtual;
  #L463b70.  v0:= temp @kind object;
  #L463b72.  if v0 != 0 then goto L463b86;
  #L463b76.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L463b7a.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463b7e.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L463b84.  return v0 @kind object;
  #L463b86.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L463b8a.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463b8e.  call temp:= `isCacheable`(v0, v2) @signature `Lokhttp3/internal/cache/CacheStrategy;.isCacheable:(Lokhttp3/Response;Lokhttp3/Request;)Z` @kind static;
  #L463b94.  v0:= temp;
  #L463b96.  if v0 != 0 then goto L463baa;
  #L463b9a.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L463b9e.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463ba2.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L463ba8.  return v0 @kind object;
  #L463baa.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463bae.  call temp:= `cacheControl`(v0) @signature `Lokhttp3/Request;.cacheControl:()Lokhttp3/CacheControl;` @kind virtual;
  #L463bb4.  v0:= temp @kind object;
  #L463bb6.  call temp:= `noCache`(v0) @signature `Lokhttp3/CacheControl;.noCache:()Z` @kind virtual;
  #L463bbc.  v2:= temp;
  #L463bbe.  if v2 != 0 then goto L463d92;
  #L463bc2.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463bc6.  call temp:= `hasConditions`(v2) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.hasConditions:(Lokhttp3/Request;)Z` @kind static;
  #L463bcc.  v2:= temp;
  #L463bce.  if v2 == 0 then goto L463bd6;
  #L463bd2.  goto L463d92;
  #L463bd6.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L463bda.  call temp:= `cacheControl`(v2) @signature `Lokhttp3/Response;.cacheControl:()Lokhttp3/CacheControl;` @kind virtual;
  #L463be0.  v2:= temp @kind object;
  #L463be2.  call temp:= `immutable`(v2) @signature `Lokhttp3/CacheControl;.immutable:()Z` @kind virtual;
  #L463be8.  v3:= temp;
  #L463bea.  if v3 == 0 then goto L463bfe;
  #L463bee.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L463bf2.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L463bf6.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L463bfc.  return v0 @kind object;
  #L463bfe.  call temp:= `cacheResponseAge`(v13) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.cacheResponseAge:()J` @kind direct;
  #L463c04.  v3:= temp @kind wide;
  #L463c06.  call temp:= `computeFreshnessLifetime`(v13) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.computeFreshnessLifetime:()J` @kind direct;
  #L463c0c.  v5:= temp @kind wide;
  #L463c0e.  call temp:= `maxAgeSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxAgeSeconds:()I` @kind virtual;
  #L463c14.  v7:= temp;
  #L463c16.  v8:= -1I;
  #L463c18.  if v7 == v8 then goto L463c3a;
  #L463c1c.  v7:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L463c20.  call temp:= `maxAgeSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxAgeSeconds:()I` @kind virtual;
  #L463c26.  v9:= temp;
  #L463c28.  v9:= (`long`) v9 @kind i2l;
  #L463c2a.  call temp:= `toMillis`(v7, v9) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L463c30.  v9:= temp @kind wide;
  #L463c32.  call temp:= `min`(v5, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L463c38.  v5:= temp @kind wide;
  #L463c3a.  call temp:= `minFreshSeconds`(v0) @signature `Lokhttp3/CacheControl;.minFreshSeconds:()I` @kind virtual;
  #L463c40.  v7:= temp;
  #L463c42.  v9:= 0L;
  #L463c46.  if v7 == v8 then goto L463c62;
  #L463c4a.  v7:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L463c4e.  call temp:= `minFreshSeconds`(v0) @signature `Lokhttp3/CacheControl;.minFreshSeconds:()I` @kind virtual;
  #L463c54.  v11:= temp;
  #L463c56.  v11:= (`long`) v11 @kind i2l;
  #L463c58.  call temp:= `toMillis`(v7, v11) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L463c5e.  v11:= temp @kind wide;
  #L463c60.  goto L463c64;
  #L463c62.  v11:= v9 @kind wide;
  #L463c64.  call temp:= `mustRevalidate`(v2) @signature `Lokhttp3/CacheControl;.mustRevalidate:()Z` @kind virtual;
  #L463c6a.  v7:= temp;
  #L463c6c.  if v7 != 0 then goto L463c92;
  #L463c70.  call temp:= `maxStaleSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxStaleSeconds:()I` @kind virtual;
  #L463c76.  v7:= temp;
  #L463c78.  if v7 == v8 then goto L463c92;
  #L463c7c.  v7:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L463c80.  call temp:= `maxStaleSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxStaleSeconds:()I` @kind virtual;
  #L463c86.  v0:= temp;
  #L463c88.  v8:= (`long`) v0 @kind i2l;
  #L463c8a.  call temp:= `toMillis`(v7, v8) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L463c90.  v9:= temp @kind wide;
  #L463c92.  call temp:= `noCache`(v2) @signature `Lokhttp3/CacheControl;.noCache:()Z` @kind virtual;
  #L463c98.  v0:= temp;
  #L463c9a.  if v0 != 0 then goto L463d04;
  #L463c9e.  v11:= v11 + v3 @kind long;
  #L463ca0.  v9:= v9 + v5 @kind long;
  #L463ca2.  v0:= lcmp(v11, v9);
  #L463ca6.  if v0 >= 0 then goto L463d04;
  #L463caa.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L463cae.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L463cb4.  v0:= temp @kind object;
  #L463cb6.  v2:= "Warning" @kind object;
  #L463cba.  v7:= lcmp(v11, v5);
  #L463cbe.  if v7 < 0 then goto L463ccc;
  #L463cc2.  v5:= "110 HttpURLConnection \"Response is stale\"" @kind object;
  #L463cc6.  call temp:= `addHeader`(v0, v2, v5) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L463ccc.  v5:= 86400000L;
  #L463cd2.  v7:= lcmp(v3, v5);
  #L463cd6.  if v7 <= 0 then goto L463cf0;
  #L463cda.  call temp:= `isFreshnessLifetimeHeuristic`(v13) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.isFreshnessLifetimeHeuristic:()Z` @kind direct;
  #L463ce0.  v3:= temp;
  #L463ce2.  if v3 == 0 then goto L463cf0;
  #L463ce6.  v3:= "113 HttpURLConnection \"Heuristic expiration\"" @kind object;
  #L463cea.  call temp:= `addHeader`(v0, v2, v3) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L463cf0.  v2:= new `okhttp3.internal.cache.CacheStrategy`;
  #L463cf4.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L463cfa.  v0:= temp @kind object;
  #L463cfc.  call `<init>`(v2, v1, v0) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L463d02.  return v2 @kind object;
  #L463d04.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.etag` @type ^`java.lang.String` @kind object;
  #L463d08.  v2:= "If-Modified-Since" @kind object;
  #L463d0c.  if v0 == 0 then goto L463d16;
  #L463d10.  v2:= "If-None-Match" @kind object;
  #L463d14.  goto L463d30;
  #L463d16.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.lastModified` @type ^`java.util.Date` @kind object;
  #L463d1a.  if v0 == 0 then goto L463d24;
  #L463d1e.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.lastModifiedString` @type ^`java.lang.String` @kind object;
  #L463d22.  goto L463d30;
  #L463d24.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @type ^`java.util.Date` @kind object;
  #L463d28.  if v0 == 0 then goto L463d82;
  #L463d2c.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.servedDateString` @type ^`java.lang.String` @kind object;
  #L463d30.  v1:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463d34.  call temp:= `headers`(v1) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L463d3a.  v1:= temp @kind object;
  #L463d3c.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L463d42.  v1:= temp @kind object;
  #L463d44.  v3:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L463d48.  call `addLenient`(v3, v1, v2, v0) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L463d4e.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463d52.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L463d58.  v0:= temp @kind object;
  #L463d5a.  call temp:= `build`(v1) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L463d60.  v1:= temp @kind object;
  #L463d62.  call temp:= `headers`(v0, v1) @signature `Lokhttp3/Request$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Request$Builder;` @kind virtual;
  #L463d68.  v0:= temp @kind object;
  #L463d6a.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L463d70.  v0:= temp @kind object;
  #L463d72.  v1:= new `okhttp3.internal.cache.CacheStrategy`;
  #L463d76.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L463d7a.  call `<init>`(v1, v0, v2) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L463d80.  return v1 @kind object;
  #L463d82.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L463d86.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463d8a.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L463d90.  return v0 @kind object;
  #L463d92.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L463d96.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463d9a.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L463da0.  return v0 @kind object;
}
procedure `boolean` `hasConditions`(`okhttp3.Request` v1 @kind object) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.hasConditions:(Lokhttp3/Request;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L46392c.  v0:= "If-Modified-Since" @kind object;
  #L463930.  call temp:= `header`(v1, v0) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L463936.  v0:= temp @kind object;
  #L463938.  if v0 != 0 then goto L463952;
  #L46393c.  v0:= "If-None-Match" @kind object;
  #L463940.  call temp:= `header`(v1, v0) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L463946.  v1:= temp @kind object;
  #L463948.  if v1 == 0 then goto L46394e;
  #L46394c.  goto L463952;
  #L46394e.  v1:= 0I;
  #L463950.  goto L463954;
  #L463952.  v1:= 1I;
  #L463954.  return v1;
}
procedure `boolean` `isFreshnessLifetimeHeuristic`(`okhttp3.internal.cache.CacheStrategy$Factory` v2 @kind this) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.isFreshnessLifetimeHeuristic:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L463968.  v0:= v2.`okhttp3.internal.cache.CacheStrategy$Factory.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L46396c.  call temp:= `cacheControl`(v0) @signature `Lokhttp3/Response;.cacheControl:()Lokhttp3/CacheControl;` @kind virtual;
  #L463972.  v0:= temp @kind object;
  #L463974.  call temp:= `maxAgeSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxAgeSeconds:()I` @kind virtual;
  #L46397a.  v0:= temp;
  #L46397c.  v1:= -1I;
  #L46397e.  if v0 != v1 then goto L46398e;
  #L463982.  v0:= v2.`okhttp3.internal.cache.CacheStrategy$Factory.expires` @type ^`java.util.Date` @kind object;
  #L463986.  if v0 != 0 then goto L46398e;
  #L46398a.  v0:= 1I;
  #L46398c.  goto L463990;
  #L46398e.  v0:= 0I;
  #L463990.  return v0;
}
procedure `okhttp3.internal.cache.CacheStrategy` `get`(`okhttp3.internal.cache.CacheStrategy$Factory` v2 @kind this) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.get:()Lokhttp3/internal/cache/CacheStrategy;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L463af4.  call temp:= `getCandidate`(v2) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.getCandidate:()Lokhttp3/internal/cache/CacheStrategy;` @kind direct;
  #L463afa.  v0:= temp @kind object;
  #L463afc.  v1:= v0.`okhttp3.internal.cache.CacheStrategy.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L463b00.  if v1 == 0 then goto L463b28;
  #L463b04.  v1:= v2.`okhttp3.internal.cache.CacheStrategy$Factory.request` @type ^`okhttp3.Request` @kind object;
  #L463b08.  call temp:= `cacheControl`(v1) @signature `Lokhttp3/Request;.cacheControl:()Lokhttp3/CacheControl;` @kind virtual;
  #L463b0e.  v1:= temp @kind object;
  #L463b10.  call temp:= `onlyIfCached`(v1) @signature `Lokhttp3/CacheControl;.onlyIfCached:()Z` @kind virtual;
  #L463b16.  v1:= temp;
  #L463b18.  if v1 == 0 then goto L463b28;
  #L463b1c.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L463b20.  v1:= 0I;
  #L463b22.  call `<init>`(v0, v1, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L463b28.  return v0 @kind object;
}
