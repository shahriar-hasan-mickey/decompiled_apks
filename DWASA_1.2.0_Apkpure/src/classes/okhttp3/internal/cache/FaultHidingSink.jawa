record `okhttp3.internal.cache.FaultHidingSink` @kind class @AccessFlag  extends `okio.ForwardingSink` @kind class {
  `boolean` `okhttp3.internal.cache.FaultHidingSink.hasErrors` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `okio.Sink` v1 @kind object) @signature `Lokhttp3/internal/cache/FaultHidingSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L465b5c.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L465b62.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L465b74.  v0:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L465b78.  if v0 == 0 then goto L465b7e;
  #L465b7c.  return @kind void;
  #L465b7e.  call `close`(v2) @signature `Lokio/ForwardingSink;.close:()V` @kind super;
  #L465b84.  goto L465b94;
  #L465b86.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L465b88.  v1:= 1I;
  #L465b8a.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L465b8e.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L465b94.  return @kind void;
  catch `java.io.IOException` @[L465b7e..L465b84] goto L465b86;
}
procedure `void` `flush`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L465bb8.  v0:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L465bbc.  if v0 == 0 then goto L465bc2;
  #L465bc0.  return @kind void;
  #L465bc2.  call `flush`(v2) @signature `Lokio/ForwardingSink;.flush:()V` @kind super;
  #L465bc8.  goto L465bd8;
  #L465bca.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L465bcc.  v1:= 1I;
  #L465bce.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L465bd2.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L465bd8.  return @kind void;
  catch `java.io.IOException` @[L465bc2..L465bc8] goto L465bca;
}
procedure `void` `onException`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `java.io.IOException` v1 @kind object) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @AccessFlag PROTECTED {
    temp;

  #L465bfc.  return @kind void;
}
procedure `void` `write`(`okhttp3.internal.cache.FaultHidingSink` v1 @kind this, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/cache/FaultHidingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L465c10.  v0:= v1.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L465c14.  if v0 == 0 then goto L465c20;
  #L465c18.  call `skip`(v2, v3) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L465c1e.  return @kind void;
  #L465c20.  call `write`(v1, v2, v3) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L465c26.  goto L465c36;
  #L465c28.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L465c2a.  v3:= 1I;
  #L465c2c.  v1.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v3 @kind boolean;
  #L465c30.  call `onException`(v1, v2) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L465c36.  return @kind void;
  catch `java.io.IOException` @[L465c20..L465c26] goto L465c28;
}
