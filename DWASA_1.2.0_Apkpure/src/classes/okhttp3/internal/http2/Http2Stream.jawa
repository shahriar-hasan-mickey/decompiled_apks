record `okhttp3.internal.http2.Http2Stream` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @AccessFlag ;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Stream.connection` @AccessFlag FINAL;
  `okhttp3.internal.http2.ErrorCode` `okhttp3.internal.http2.Http2Stream.errorCode` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Http2Stream.id` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.readTimeout` @AccessFlag FINAL;
  `java.util.List` `okhttp3.internal.http2.Http2Stream.requestHeaders` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.internal.http2.Http2Stream.responseHeaders` @AccessFlag PRIVATE;
  `okhttp3.internal.http2.Http2Stream$FramingSink` `okhttp3.internal.http2.Http2Stream.sink` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$FramingSource` `okhttp3.internal.http2.Http2Stream.source` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @AccessFlag ;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.writeTimeout` @AccessFlag FINAL;
}
global `boolean` `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Stream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L4706fc.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `int` v3 , `okhttp3.internal.http2.Http2Connection` v4 @kind object, `boolean` v5 , `boolean` v6 , `java.util.List` v7 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.<init>:(ILokhttp3/internal/http2/Http2Connection;ZZLjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L470710.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L470716.  v0:= 0L;
  #L47071a.  v2.`okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @type ^`long` := v0 @kind wide;
  #L47071e.  v0:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L470722.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L470728.  v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v0 @kind object;
  #L47072c.  v0:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L470730.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L470736.  v2.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v0 @kind object;
  #L47073a.  v0:= 0I;
  #L47073c.  v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v0 @kind object;
  #L470740.  if v4 == 0 then goto L4707b2;
  #L470744.  if v7 == 0 then goto L4707a2;
  #L470748.  v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int` := v3;
  #L47074c.  v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v4 @kind object;
  #L470750.  v3:= v4.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L470754.  call temp:= `getInitialWindowSize`(v3) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L47075a.  v3:= temp;
  #L47075c.  v0:= (`long`) v3 @kind i2l;
  #L47075e.  v2.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L470762.  v3:= new `okhttp3.internal.http2.Http2Stream$FramingSource`;
  #L470766.  v4:= v4.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L47076a.  call temp:= `getInitialWindowSize`(v4) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L470770.  v4:= temp;
  #L470772.  v0:= (`long`) v4 @kind i2l;
  #L470774.  call `<init>`(v3, v2, v0) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.<init>:(Lokhttp3/internal/http2/Http2Stream;J)V` @kind direct;
  #L47077a.  v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` := v3 @kind object;
  #L47077e.  v3:= new `okhttp3.internal.http2.Http2Stream$FramingSink`;
  #L470782.  call `<init>`(v3, v2) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L470788.  v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` := v3 @kind object;
  #L47078c.  v3:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L470790.  v3.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v6 @kind boolean;
  #L470794.  v3:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L470798.  v3.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v5 @kind boolean;
  #L47079c.  v2.`okhttp3.internal.http2.Http2Stream.requestHeaders` @type ^`java.util.List` := v7 @kind object;
  #L4707a0.  return @kind void;
  #L4707a2.  v3:= new `java.lang.NullPointerException`;
  #L4707a6.  v4:= "requestHeaders == null" @kind object;
  #L4707aa.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4707b0.  throw v3;
  #L4707b2.  v3:= new `java.lang.NullPointerException`;
  #L4707b6.  v4:= "connection == null" @kind object;
  #L4707ba.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4707c0.  throw v3;
}
procedure `boolean` `closeInternal`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L470400.  @monitorenter v2
  #L470402.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L470406.  v1:= 0I;
  #L470408.  if v0 == 0 then goto L470410;
  #L47040c.  @monitorexit v2
  #L47040e.  return v1;
  #L470410.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L470414.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L470418.  if v0 == 0 then goto L47042c;
  #L47041c.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L470420.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L470424.  if v0 == 0 then goto L47042c;
  #L470428.  @monitorexit v2
  #L47042a.  return v1;
  #L47042c.  v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v3 @kind object;
  #L470430.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L470436.  @monitorexit v2
  #L470438.  v3:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L47043c.  v0:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L470440.  call temp:= `removeStream`(v3, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L470446.  v3:= 1I;
  #L470448.  return v3;
  #L47044a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47044c.  @monitorexit v2
  #L47044e.  throw v3;
  catch `java.lang.Throwable` @[L470402..L470438] goto L47044a;
  catch `java.lang.Throwable` @[L47044c..L47044e] goto L47044a;
}
procedure `void` `addBytesToWriteWindow`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `long` v4 ) @signature `Lokhttp3/internal/http2/Http2Stream;.addBytesToWriteWindow:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4707d4.  v0:= v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L4707d8.  v0:= v0 + v4 @kind long;
  #L4707da.  v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L4707de.  v0:= 0L;
  #L4707e2.  v2:= lcmp(v4, v0);
  #L4707e6.  if v2 <= 0 then goto L4707f0;
  #L4707ea.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L4707f0.  return @kind void;
}
procedure `void` `cancelStreamIfNecessary`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.cancelStreamIfNecessary:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L470804.  @monitorenter v2
  #L470806.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L47080a.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L47080e.  if v0 != 0 then goto L47083a;
  #L470812.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L470816.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L47081a.  if v0 == 0 then goto L47083a;
  #L47081e.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L470822.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L470826.  if v0 != 0 then goto L470836;
  #L47082a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L47082e.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L470832.  if v0 == 0 then goto L47083a;
  #L470836.  v0:= 1I;
  #L470838.  goto L47083c;
  #L47083a.  v0:= 0I;
  #L47083c.  call temp:= `isOpen`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L470842.  v1:= temp;
  #L470844.  @monitorexit v2
  #L470846.  if v0 == 0 then goto L470856;
  #L47084a.  v0:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L47084e.  call `close`(v2, v0) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L470854.  goto L470868;
  #L470856.  if v1 != 0 then goto L470868;
  #L47085a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L47085e.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L470862.  call temp:= `removeStream`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L470868.  return @kind void;
  #L47086a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47086c.  @monitorexit v2
  #L47086e.  throw v0;
  catch `java.lang.Throwable` @[L470806..L470846] goto L47086a;
  catch `java.lang.Throwable` @[L47086c..L47086e] goto L47086a;
}
procedure `void` `checkOutNotClosed`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.checkOutNotClosed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L470894.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L470898.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L47089c.  if v0 != 0 then goto L4708d2;
  #L4708a0.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L4708a4.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L4708a8.  if v0 != 0 then goto L4708c2;
  #L4708ac.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L4708b0.  if v0 != 0 then goto L4708b6;
  #L4708b4.  return @kind void;
  #L4708b6.  v1:= new `okhttp3.internal.http2.StreamResetException`;
  #L4708ba.  call `<init>`(v1, v0) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L4708c0.  throw v1;
  #L4708c2.  v0:= new `java.io.IOException`;
  #L4708c6.  v1:= "stream finished" @kind object;
  #L4708ca.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4708d0.  throw v0;
  #L4708d2.  v0:= new `java.io.IOException`;
  #L4708d6.  v1:= "stream closed" @kind object;
  #L4708da.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4708e0.  throw v0;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4708f4.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L4708fa.  v0:= temp;
  #L4708fc.  if v0 != 0 then goto L470902;
  #L470900.  return @kind void;
  #L470902.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L470906.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L47090a.  call `writeSynReset`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReset:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L470910.  return @kind void;
}
procedure `void` `closeLater`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L470924.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L47092a.  v0:= temp;
  #L47092c.  if v0 != 0 then goto L470932;
  #L470930.  return @kind void;
  #L470932.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L470936.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L47093a.  call `writeSynResetLater`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L470940.  return @kind void;
}
procedure `okhttp3.internal.http2.Http2Connection` `getConnection`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470640.  v0:= v1.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L470644.  return v0 @kind object;
}
procedure `okhttp3.internal.http2.ErrorCode` `getErrorCode`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorCode:()Lokhttp3/internal/http2/ErrorCode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470614.  @monitorenter v1
  #L470616.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L47061a.  @monitorexit v1
  #L47061c.  return v0 @kind object;
  #L47061e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L470620.  @monitorexit v1
  #L470622.  throw v0;
  catch `java.lang.Throwable` @[L470616..L47061a] goto L47061e;
}
procedure `int` `getId`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470528.  v0:= v1.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L47052c.  return v0;
}
procedure `java.util.List` `getRequestHeaders`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getRequestHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470540.  v0:= v1.`okhttp3.internal.http2.Http2Stream.requestHeaders` @type ^`java.util.List` @kind object;
  #L470544.  return v0 @kind object;
}
procedure `okio.Sink` `getSink`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L470658.  @monitorenter v2
  #L47065a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L47065e.  if v0 != 0 then goto L470680;
  #L470662.  call temp:= `isLocallyInitiated`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L470668.  v0:= temp;
  #L47066a.  if v0 == 0 then goto L470670;
  #L47066e.  goto L470680;
  #L470670.  v0:= new `java.lang.IllegalStateException`;
  #L470674.  v1:= "reply before requesting the sink" @kind object;
  #L470678.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47067e.  throw v0;
  #L470680.  @monitorexit v2
  #L470682.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L470686.  return v0 @kind object;
  #L470688.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47068a.  @monitorexit v2
  #L47068c.  throw v0;
  catch `java.lang.Throwable` @[L47065a..L470682] goto L470688;
  catch `java.lang.Throwable` @[L47068a..L47068c] goto L470688;
}
procedure `okio.Source` `getSource`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4706b4.  v0:= v1.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L4706b8.  return v0 @kind object;
}
procedure `boolean` `isLocallyInitiated`(`okhttp3.internal.http2.Http2Stream` v4 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L470474.  v0:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L470478.  v1:= 1I;
  #L47047a.  v0:= v0 ^& v1 @kind int;
  #L47047c.  v2:= 0I;
  #L47047e.  if v0 != v1 then goto L470486;
  #L470482.  v0:= 1I;
  #L470484.  goto L470488;
  #L470486.  v0:= 0I;
  #L470488.  v3:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L47048c.  v3:= v3.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L470490.  if v3 != v0 then goto L470496;
  #L470494.  goto L470498;
  #L470496.  v1:= 0I;
  #L470498.  return v1;
}
procedure `boolean` `isOpen`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4704ac.  @monitorenter v2
  #L4704ae.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L4704b2.  v1:= 0I;
  #L4704b4.  if v0 == 0 then goto L4704bc;
  #L4704b8.  @monitorexit v2
  #L4704ba.  return v1;
  #L4704bc.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L4704c0.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L4704c4.  if v0 != 0 then goto L4704d4;
  #L4704c8.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L4704cc.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L4704d0.  if v0 == 0 then goto L4704f8;
  #L4704d4.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L4704d8.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L4704dc.  if v0 != 0 then goto L4704ec;
  #L4704e0.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L4704e4.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L4704e8.  if v0 == 0 then goto L4704f8;
  #L4704ec.  v0:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L4704f0.  if v0 == 0 then goto L4704f8;
  #L4704f4.  @monitorexit v2
  #L4704f6.  return v1;
  #L4704f8.  v0:= 1I;
  #L4704fa.  @monitorexit v2
  #L4704fc.  return v0;
  #L4704fe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L470500.  @monitorexit v2
  #L470502.  throw v0;
  catch `java.lang.Throwable` @[L4704ae..L4704b2] goto L4704fe;
  catch `java.lang.Throwable` @[L4704bc..L4704f0] goto L4704fe;
}
procedure `okio.Timeout` `readTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4706cc.  v0:= v1.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L4706d0.  return v0 @kind object;
}
procedure `void` `receiveData`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `okio.BufferedSource` v4 @kind object, `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveData:(Lokio/BufferedSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L470954.  v0:= v3.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L470958.  v1:= (`long`) v5 @kind i2l;
  #L47095a.  call `receive`(v0, v4, v1) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.receive:(Lokio/BufferedSource;J)V` @kind virtual;
  #L470960.  return @kind void;
}
procedure `void` `receiveFin`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveFin:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L470974.  @monitorenter v2
  #L470976.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L47097a.  v1:= 1I;
  #L47097c.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v1 @kind boolean;
  #L470980.  call temp:= `isOpen`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L470986.  v0:= temp;
  #L470988.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L47098e.  @monitorexit v2
  #L470990.  if v0 != 0 then goto L4709a2;
  #L470994.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L470998.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L47099c.  call temp:= `removeStream`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L4709a2.  return @kind void;
  #L4709a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4709a6.  @monitorexit v2
  #L4709a8.  throw v0;
  catch `java.lang.Throwable` @[L470976..L470990] goto L4709a4;
  catch `java.lang.Throwable` @[L4709a6..L4709a8] goto L4709a4;
}
procedure `void` `receiveHeaders`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4709d0.  @monitorenter v3
  #L4709d2.  v0:= 1I;
  #L4709d4.  v3.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v0 @kind boolean;
  #L4709d8.  v1:= v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L4709dc.  if v1 != 0 then goto L4709f4;
  #L4709e0.  v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v4 @kind object;
  #L4709e4.  call temp:= `isOpen`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L4709ea.  v0:= temp;
  #L4709ec.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L4709f2.  goto L470a1a;
  #L4709f4.  v1:= new `java.util.ArrayList`;
  #L4709f8.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4709fe.  v2:= v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L470a02.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L470a08.  v2:= 0I;
  #L470a0a.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L470a10.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L470a16.  v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v1 @kind object;
  #L470a1a.  @monitorexit v3
  #L470a1c.  if v0 != 0 then goto L470a2e;
  #L470a20.  v4:= v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L470a24.  v0:= v3.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L470a28.  call temp:= `removeStream`(v4, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L470a2e.  return @kind void;
  #L470a30.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L470a32.  @monitorexit v3
  #L470a34.  throw v4;
  catch `java.lang.Throwable` @[L4709d4..L470a1c] goto L470a30;
  catch `java.lang.Throwable` @[L470a32..L470a34] goto L470a30;
}
procedure `void` `receiveRstStream`(`okhttp3.internal.http2.Http2Stream` v1 @kind this, `okhttp3.internal.http2.ErrorCode` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;

  #L470a5c.  @monitorenter v1
  #L470a5e.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L470a62.  if v0 != 0 then goto L470a70;
  #L470a66.  v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v2 @kind object;
  #L470a6a.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L470a70.  @monitorexit v1
  #L470a72.  return @kind void;
  #L470a74.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L470a76.  @monitorexit v1
  #L470a78.  throw v2;
  catch `java.lang.Throwable` @[L470a5e..L470a70] goto L470a74;
}
procedure `void` `sendResponseHeaders`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `java.util.List` v3 @kind object, `boolean` v4 ) @signature `Lokhttp3/internal/http2/Http2Stream;.sendResponseHeaders:(Ljava/util/List;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L470a98.  if v3 == 0 then goto L470ada;
  #L470a9c.  v0:= 0I;
  #L470a9e.  @monitorenter v2
  #L470aa0.  v1:= 1I;
  #L470aa2.  v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v1 @kind boolean;
  #L470aa6.  if v4 != 0 then goto L470ab4;
  #L470aaa.  v4:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L470aae.  v4.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v1 @kind boolean;
  #L470ab2.  v0:= 1I;
  #L470ab4.  @monitorexit v2
  #L470ab6.  v4:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L470aba.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L470abe.  call `writeSynReply`(v4, v1, v0, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReply:(IZLjava/util/List;)V` @kind virtual;
  #L470ac4.  if v0 == 0 then goto L470ad2;
  #L470ac8.  v3:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L470acc.  call `flush`(v3) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L470ad2.  return @kind void;
  #L470ad4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L470ad6.  @monitorexit v2
  #L470ad8.  throw v3;
  #L470ada.  v3:= new `java.lang.NullPointerException`;
  #L470ade.  v4:= "responseHeaders == null" @kind object;
  #L470ae2.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L470ae8.  throw v3;
  catch `java.lang.Throwable` @[L470aa2..L470ab6] goto L470ad4;
  catch `java.lang.Throwable` @[L470ad6..L470ad8] goto L470ad4;
}
procedure `java.util.List` `takeResponseHeaders`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.takeResponseHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L470558.  @monitorenter v2
  #L47055a.  call temp:= `isLocallyInitiated`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L470560.  v0:= temp;
  #L470562.  if v0 == 0 then goto L4705c2;
  #L470566.  v0:= v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L47056a.  call `enter`(v0) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.enter:()V` @kind virtual;
  #L470570.  v0:= v2.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L470574.  if v0 != 0 then goto L470588;
  #L470578.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L47057c.  if v0 != 0 then goto L470588;
  #L470580.  call `waitForIo`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @kind virtual;
  #L470586.  goto L470570;
  #L470588.  v0:= v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L47058c.  call `exitAndThrowIfTimedOut`(v0) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L470592.  v0:= v2.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L470596.  if v0 == 0 then goto L4705a4;
  #L47059a.  v1:= 0I;
  #L47059c.  v2.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v1 @kind object;
  #L4705a0.  @monitorexit v2
  #L4705a2.  return v0 @kind object;
  #L4705a4.  v0:= new `okhttp3.internal.http2.StreamResetException`;
  #L4705a8.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L4705ac.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L4705b2.  throw v0;
  #L4705b4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4705b6.  v1:= v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L4705ba.  call `exitAndThrowIfTimedOut`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L4705c0.  throw v0;
  #L4705c2.  v0:= new `java.lang.IllegalStateException`;
  #L4705c6.  v1:= "servers cannot read response headers" @kind object;
  #L4705ca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4705d0.  throw v0;
  #L4705d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4705d4.  @monitorexit v2
  #L4705d6.  goto L4705da;
  #L4705d8.  throw v0;
  #L4705da.  goto L4705d8;
  catch `java.lang.Throwable` @[L47055a..L470570] goto L4705d2;
  catch `java.lang.Throwable` @[L470570..L470586] goto L4705b4;
  catch `java.lang.Throwable` @[L470588..L4705a0] goto L4705d2;
  catch `java.lang.Throwable` @[L4705a4..L4705d2] goto L4705d2;
}
procedure `void` `waitForIo`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @AccessFlag  {
    temp;
    v0;

  #L470b10.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L470b16.  return @kind void;
  #L470b18.  v0:= new `java.io.InterruptedIOException`;
  #L470b1c.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L470b22.  throw v0;
  catch `java.lang.InterruptedException` @[L470b10..L470b16] goto L470b18;
}
procedure `okio.Timeout` `writeTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4706e4.  v0:= v1.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L4706e8.  return v0 @kind object;
}
