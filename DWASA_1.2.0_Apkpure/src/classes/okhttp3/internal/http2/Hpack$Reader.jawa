record `okhttp3.internal.http2.Hpack$Reader` @kind class @AccessFlag FINAL {
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Reader.dynamicTable` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Reader.headerCount` @AccessFlag ;
  `java.util.List` `okhttp3.internal.http2.Hpack$Reader.headerList` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Reader.headerTableSizeSetting` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @AccessFlag ;
  `okio.BufferedSource` `okhttp3.internal.http2.Hpack$Reader.source` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this, `int` v2 , `int` v3 , `okio.Source` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(IILokio/Source;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L46bfe0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46bfe6.  v0:= new `java.util.ArrayList`;
  #L46bfea.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L46bff0.  v1.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` := v0 @kind object;
  #L46bff4.  v0:= 8I;
  #L46bff8.  v0:= new `okhttp3.internal.http2.Header`[v0];
  #L46bffc.  v1.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v0 @kind object;
  #L46c000.  v0:= v1.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c004.  v0:= length @variable v0;
  #L46c006.  v0:= v0 + -1;
  #L46c00a.  v1.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int` := v0;
  #L46c00e.  v0:= 0I;
  #L46c010.  v1.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int` := v0;
  #L46c014.  v1.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int` := v0;
  #L46c018.  v1.`okhttp3.internal.http2.Hpack$Reader.headerTableSizeSetting` @type ^`int` := v2;
  #L46c01c.  v1.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int` := v3;
  #L46c020.  call temp:= `buffer`(v4) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L46c026.  v2:= temp @kind object;
  #L46c028.  v1.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` := v2 @kind object;
  #L46c02c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Reader` v0 @kind this, `int` v1 , `okio.Source` v2 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(ILokio/Source;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46c040.  call `<init>`(v0, v1, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(IILokio/Source;)V` @kind direct;
  #L46c046.  return @kind void;
}
procedure `void` `adjustDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.adjustDynamicTableByteCount:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L46c058.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L46c05c.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L46c060.  if v0 >= v1 then goto L46c078;
  #L46c064.  if v0 != 0 then goto L46c070;
  #L46c068.  call `clearDynamicTable`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.clearDynamicTable:()V` @kind direct;
  #L46c06e.  goto L46c078;
  #L46c070.  v1:= v1 - v0 @kind int;
  #L46c072.  call temp:= `evictToRecoverBytes`(v2, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.evictToRecoverBytes:(I)I` @kind direct;
  #L46c078.  return @kind void;
}
procedure `void` `clearDynamicTable`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.clearDynamicTable:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L46c08c.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c090.  v1:= 0I;
  #L46c092.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L46c098.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c09c.  v0:= length @variable v0;
  #L46c09e.  v0:= v0 + -1;
  #L46c0a2.  v2.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int` := v0;
  #L46c0a6.  v0:= 0I;
  #L46c0a8.  v2.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int` := v0;
  #L46c0ac.  v2.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int` := v0;
  #L46c0b0.  return @kind void;
}
procedure `int` `dynamicTableIndex`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L46bdd0.  v0:= v1.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int`;
  #L46bdd4.  v0:= v0 + 1;
  #L46bdd8.  v0:= v0 + v2 @kind int;
  #L46bdda.  return v0;
}
procedure `int` `evictToRecoverBytes`(`okhttp3.internal.http2.Hpack$Reader` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.evictToRecoverBytes:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46bdec.  v0:= 0I;
  #L46bdee.  if v5 <= 0 then goto L46be68;
  #L46bdf2.  v1:= v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46bdf6.  v1:= length @variable v1;
  #L46bdf8.  v1:= v1 + -1;
  #L46bdfc.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int`;
  #L46be00.  if v1 < v2 then goto L46be42;
  #L46be04.  if v5 <= 0 then goto L46be42;
  #L46be08.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46be0c.  v2:= v2[v1] @kind object;
  #L46be10.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L46be14.  v5:= v5 - v2 @kind int;
  #L46be16.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L46be1a.  v3:= v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46be1e.  v3:= v3[v1] @kind object;
  #L46be22.  v3:= v3.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L46be26.  v2:= v2 - v3 @kind int;
  #L46be28.  v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int` := v2;
  #L46be2c.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L46be30.  v2:= v2 + -1;
  #L46be34.  v4.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int` := v2;
  #L46be38.  v0:= v0 + 1;
  #L46be3c.  v1:= v1 + -1;
  #L46be40.  goto L46bdfc;
  #L46be42.  v5:= v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46be46.  v1:= v4.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int`;
  #L46be4a.  v2:= v1 + 1;
  #L46be4e.  v1:= v1 + 1;
  #L46be52.  v1:= v1 + v0 @kind int;
  #L46be54.  v3:= v4.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L46be58.  call `arraycopy`(v5, v2, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46be5e.  v5:= v4.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int`;
  #L46be62.  v5:= v5 + v0 @kind int;
  #L46be64.  v4.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int` := v5;
  #L46be68.  return v0;
}
procedure `okio.ByteString` `getName`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getName:(I)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L46bf24.  call temp:= `isStaticHeader`(v2, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.isStaticHeader:(I)Z` @kind direct;
  #L46bf2a.  v0:= temp;
  #L46bf2c.  if v0 == 0 then goto L46bf3e;
  #L46bf30.  v0:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46bf34.  v3:= v0[v3] @kind object;
  #L46bf38.  v3:= v3.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L46bf3c.  return v3 @kind object;
  #L46bf3e.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46bf42.  v1:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46bf46.  v1:= length @variable v1;
  #L46bf48.  v3:= v3 - v1 @kind int;
  #L46bf4a.  call temp:= `dynamicTableIndex`(v2, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L46bf50.  v3:= temp;
  #L46bf52.  v3:= v0[v3] @kind object;
  #L46bf56.  v3:= v3.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L46bf5a.  return v3 @kind object;
}
procedure `void` `insertIntoDynamicTable`(`okhttp3.internal.http2.Hpack$Reader` v5 @kind this, `int` v6 , `okhttp3.internal.http2.Header` v7 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Reader;.insertIntoDynamicTable:(ILokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46c0c4.  v0:= v5.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L46c0c8.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46c0ce.  v0:= v7.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L46c0d2.  v1:= -1I;
  #L46c0d4.  if v6 == v1 then goto L46c0ee;
  #L46c0d8.  v2:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c0dc.  call temp:= `dynamicTableIndex`(v5, v6) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L46c0e2.  v3:= temp;
  #L46c0e4.  v2:= v2[v3] @kind object;
  #L46c0e8.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L46c0ec.  v0:= v0 - v2 @kind int;
  #L46c0ee.  v2:= v5.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L46c0f2.  if v0 <= v2 then goto L46c0fe;
  #L46c0f6.  call `clearDynamicTable`(v5) @signature `Lokhttp3/internal/http2/Hpack$Reader;.clearDynamicTable:()V` @kind direct;
  #L46c0fc.  return @kind void;
  #L46c0fe.  v3:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L46c102.  v3:= v3 + v0 @kind int;
  #L46c104.  v3:= v3 - v2 @kind int;
  #L46c106.  call temp:= `evictToRecoverBytes`(v5, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.evictToRecoverBytes:(I)I` @kind direct;
  #L46c10c.  v2:= temp;
  #L46c10e.  if v6 != v1 then goto L46c16e;
  #L46c112.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L46c116.  v6:= v6 + 1;
  #L46c11a.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c11e.  v2:= length @variable v1;
  #L46c120.  if v6 <= v2 then goto L46c14c;
  #L46c124.  v6:= length @variable v1;
  #L46c126.  v6:= v6 * 2;
  #L46c12a.  v6:= new `okhttp3.internal.http2.Header`[v6];
  #L46c12e.  v2:= 0I;
  #L46c130.  v3:= length @variable v1;
  #L46c132.  v4:= length @variable v1;
  #L46c134.  call `arraycopy`(v1, v2, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46c13a.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c13e.  v1:= length @variable v1;
  #L46c140.  v1:= v1 + -1;
  #L46c144.  v5.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int` := v1;
  #L46c148.  v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v6 @kind object;
  #L46c14c.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int`;
  #L46c150.  v1:= v6 + -1;
  #L46c154.  v5.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int` := v1;
  #L46c158.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c15c.  v1[v6]:= v7 @kind object;
  #L46c160.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L46c164.  v6:= v6 + 1;
  #L46c168.  v5.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int` := v6;
  #L46c16c.  goto L46c182;
  #L46c16e.  call temp:= `dynamicTableIndex`(v5, v6) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L46c174.  v1:= temp;
  #L46c176.  v1:= v1 + v2 @kind int;
  #L46c178.  v6:= v6 + v1 @kind int;
  #L46c17a.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c17e.  v1[v6]:= v7 @kind object;
  #L46c182.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L46c186.  v6:= v6 + v0 @kind int;
  #L46c188.  v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int` := v6;
  #L46c18c.  return @kind void;
}
procedure `boolean` `isStaticHeader`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.isStaticHeader:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L46bda8.  v0:= 1I;
  #L46bdaa.  if v3 < 0 then goto L46bdbc;
  #L46bdae.  v1:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46bdb2.  v1:= length @variable v1;
  #L46bdb4.  v1:= v1 - v0 @kind int;
  #L46bdb6.  if v3 > v1 then goto L46bdbc;
  #L46bdba.  goto L46bdbe;
  #L46bdbc.  v0:= 0I;
  #L46bdbe.  return v0;
}
procedure `int` `readByte`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByte:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L46be94.  v0:= v1.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46be98.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L46be9e.  v0:= temp;
  #L46bea0.  v0:= v0 ^& 255;
  #L46bea4.  return v0;
}
procedure `void` `readIndexedHeader`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readIndexedHeader:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L46c2d4.  call temp:= `isStaticHeader`(v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.isStaticHeader:(I)Z` @kind direct;
  #L46c2da.  v0:= temp;
  #L46c2dc.  if v0 == 0 then goto L46c2f4;
  #L46c2e0.  v0:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c2e4.  v4:= v0[v4] @kind object;
  #L46c2e8.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L46c2ec.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46c2f2.  goto L46c326;
  #L46c2f4.  v0:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c2f8.  v0:= length @variable v0;
  #L46c2fa.  v0:= v4 - v0 @kind int;
  #L46c2fe.  call temp:= `dynamicTableIndex`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L46c304.  v0:= temp;
  #L46c306.  if v0 < 0 then goto L46c328;
  #L46c30a.  v1:= v3.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c30e.  v2:= length @variable v1;
  #L46c310.  v2:= v2 + -1;
  #L46c314.  if v0 > v2 then goto L46c328;
  #L46c318.  v4:= v3.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L46c31c.  v0:= v1[v0] @kind object;
  #L46c320.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46c326.  return @kind void;
  #L46c328.  v0:= new `java.io.IOException`;
  #L46c32c.  v1:= new `java.lang.StringBuilder`;
  #L46c330.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L46c336.  v2:= "Header index too large " @kind object;
  #L46c33a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46c340.  v4:= v4 + 1;
  #L46c344.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L46c34a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L46c350.  v4:= temp @kind object;
  #L46c352.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46c358.  throw v0;
}
procedure `void` `readLiteralHeaderWithIncrementalIndexingIndexedName`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingIndexedName:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L46c36c.  call temp:= `getName`(v2, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getName:(I)Lokio/ByteString;` @kind direct;
  #L46c372.  v3:= temp @kind object;
  #L46c374.  call temp:= `readByteString`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L46c37a.  v0:= temp @kind object;
  #L46c37c.  v1:= new `okhttp3.internal.http2.Header`;
  #L46c380.  call `<init>`(v1, v3, v0) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L46c386.  v3:= -1I;
  #L46c388.  call `insertIntoDynamicTable`(v2, v3, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.insertIntoDynamicTable:(ILokhttp3/internal/http2/Header;)V` @kind direct;
  #L46c38e.  return @kind void;
}
procedure `void` `readLiteralHeaderWithIncrementalIndexingNewName`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingNewName:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L46c3a0.  call temp:= `readByteString`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L46c3a6.  v0:= temp @kind object;
  #L46c3a8.  call temp:= `checkLowercase`(v0) @signature `Lokhttp3/internal/http2/Hpack;.checkLowercase:(Lokio/ByteString;)Lokio/ByteString;` @kind static;
  #L46c3ae.  v0:= temp @kind object;
  #L46c3b0.  call temp:= `readByteString`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L46c3b6.  v1:= temp @kind object;
  #L46c3b8.  v2:= new `okhttp3.internal.http2.Header`;
  #L46c3bc.  call `<init>`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L46c3c2.  v0:= -1I;
  #L46c3c4.  call `insertIntoDynamicTable`(v3, v0, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.insertIntoDynamicTable:(ILokhttp3/internal/http2/Header;)V` @kind direct;
  #L46c3ca.  return @kind void;
}
procedure `void` `readLiteralHeaderWithoutIndexingIndexedName`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingIndexedName:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L46c3dc.  call temp:= `getName`(v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getName:(I)Lokio/ByteString;` @kind direct;
  #L46c3e2.  v4:= temp @kind object;
  #L46c3e4.  call temp:= `readByteString`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L46c3ea.  v0:= temp @kind object;
  #L46c3ec.  v1:= v3.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L46c3f0.  v2:= new `okhttp3.internal.http2.Header`;
  #L46c3f4.  call `<init>`(v2, v4, v0) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L46c3fa.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46c400.  return @kind void;
}
procedure `void` `readLiteralHeaderWithoutIndexingNewName`(`okhttp3.internal.http2.Hpack$Reader` v4 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingNewName:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46c414.  call temp:= `readByteString`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L46c41a.  v0:= temp @kind object;
  #L46c41c.  call temp:= `checkLowercase`(v0) @signature `Lokhttp3/internal/http2/Hpack;.checkLowercase:(Lokio/ByteString;)Lokio/ByteString;` @kind static;
  #L46c422.  v0:= temp @kind object;
  #L46c424.  call temp:= `readByteString`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L46c42a.  v1:= temp @kind object;
  #L46c42c.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L46c430.  v3:= new `okhttp3.internal.http2.Header`;
  #L46c434.  call `<init>`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L46c43a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46c440.  return @kind void;
}
procedure `java.util.List` `getAndResetHeaderList`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getAndResetHeaderList:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46bef8.  v0:= new `java.util.ArrayList`;
  #L46befc.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L46bf00.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L46bf06.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L46bf0a.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L46bf10.  return v0 @kind object;
}
procedure `int` `maxDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.maxDynamicTableByteCount:()I` @AccessFlag  {
    temp;
    v0;

  #L46be7c.  v0:= v1.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L46be80.  return v0;
}
procedure `okio.ByteString` `readByteString`(`okhttp3.internal.http2.Hpack$Reader` v5 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46bf6c.  call temp:= `readByte`(v5) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByte:()I` @kind direct;
  #L46bf72.  v0:= temp;
  #L46bf74.  v1:= v0 ^& 128;
  #L46bf78.  v2:= 128I;
  #L46bf7c.  if v1 != v2 then goto L46bf84;
  #L46bf80.  v1:= 1I;
  #L46bf82.  goto L46bf86;
  #L46bf84.  v1:= 0I;
  #L46bf86.  v2:= 127I;
  #L46bf8a.  call temp:= `readInt`(v5, v0, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L46bf90.  v0:= temp;
  #L46bf92.  if v1 == 0 then goto L46bfbe;
  #L46bf96.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L46bf9c.  v1:= temp @kind object;
  #L46bf9e.  v2:= v5.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46bfa2.  v3:= (`long`) v0 @kind i2l;
  #L46bfa4.  call temp:= `readByteArray`(v2, v3) @signature `Lokio/BufferedSource;.readByteArray:(J)[B` @kind interface;
  #L46bfaa.  v0:= temp @kind object;
  #L46bfac.  call temp:= `decode`(v1, v0) @signature `Lokhttp3/internal/http2/Huffman;.decode:([B)[B` @kind virtual;
  #L46bfb2.  v0:= temp @kind object;
  #L46bfb4.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L46bfba.  v0:= temp @kind object;
  #L46bfbc.  return v0 @kind object;
  #L46bfbe.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46bfc2.  v2:= (`long`) v0 @kind i2l;
  #L46bfc4.  call temp:= `readByteString`(v1, v2) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L46bfca.  v0:= temp @kind object;
  #L46bfcc.  return v0 @kind object;
}
procedure `void` `readHeaders`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readHeaders:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L46c1a0.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46c1a4.  call temp:= `exhausted`(v0) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L46c1aa.  v0:= temp;
  #L46c1ac.  if v0 != 0 then goto L46c2c0;
  #L46c1b0.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46c1b4.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L46c1ba.  v0:= temp;
  #L46c1bc.  v0:= v0 ^& 255;
  #L46c1c0.  v1:= 128I;
  #L46c1c4.  if v0 == v1 then goto L46c2b0;
  #L46c1c8.  v2:= v0 ^& 128;
  #L46c1cc.  if v2 != v1 then goto L46c1e8;
  #L46c1d0.  v1:= 127I;
  #L46c1d4.  call temp:= `readInt`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L46c1da.  v0:= temp;
  #L46c1dc.  v0:= v0 + -1;
  #L46c1e0.  call `readIndexedHeader`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readIndexedHeader:(I)V` @kind direct;
  #L46c1e6.  goto L46c1a0;
  #L46c1e8.  v1:= 64I;
  #L46c1ec.  if v0 != v1 then goto L46c1f8;
  #L46c1f0.  call `readLiteralHeaderWithIncrementalIndexingNewName`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingNewName:()V` @kind direct;
  #L46c1f6.  goto L46c1a0;
  #L46c1f8.  v2:= v0 ^& 64;
  #L46c1fc.  if v2 != v1 then goto L46c218;
  #L46c200.  v1:= 63I;
  #L46c204.  call temp:= `readInt`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L46c20a.  v0:= temp;
  #L46c20c.  v0:= v0 + -1;
  #L46c210.  call `readLiteralHeaderWithIncrementalIndexingIndexedName`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingIndexedName:(I)V` @kind direct;
  #L46c216.  goto L46c1a0;
  #L46c218.  v1:= v0 ^& 32;
  #L46c21c.  v2:= 32I;
  #L46c220.  if v1 != v2 then goto L46c27e;
  #L46c224.  v1:= 31I;
  #L46c228.  call temp:= `readInt`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L46c22e.  v0:= temp;
  #L46c230.  v3.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int` := v0;
  #L46c234.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L46c238.  if v0 < 0 then goto L46c24c;
  #L46c23c.  v1:= v3.`okhttp3.internal.http2.Hpack$Reader.headerTableSizeSetting` @type ^`int`;
  #L46c240.  if v0 > v1 then goto L46c24c;
  #L46c244.  call `adjustDynamicTableByteCount`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.adjustDynamicTableByteCount:()V` @kind direct;
  #L46c24a.  goto L46c1a0;
  #L46c24c.  v0:= new `java.io.IOException`;
  #L46c250.  v1:= new `java.lang.StringBuilder`;
  #L46c254.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L46c25a.  v2:= "Invalid dynamic table size update " @kind object;
  #L46c25e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46c264.  v2:= v3.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L46c268.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L46c26e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L46c274.  v1:= temp @kind object;
  #L46c276.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46c27c.  throw v0;
  #L46c27e.  v1:= 16I;
  #L46c282.  if v0 == v1 then goto L46c2a6;
  #L46c286.  if v0 != 0 then goto L46c28c;
  #L46c28a.  goto L46c2a6;
  #L46c28c.  v1:= 15I;
  #L46c290.  call temp:= `readInt`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L46c296.  v0:= temp;
  #L46c298.  v0:= v0 + -1;
  #L46c29c.  call `readLiteralHeaderWithoutIndexingIndexedName`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingIndexedName:(I)V` @kind direct;
  #L46c2a2.  goto L46c1a0;
  #L46c2a6.  call `readLiteralHeaderWithoutIndexingNewName`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingNewName:()V` @kind direct;
  #L46c2ac.  goto L46c1a0;
  #L46c2b0.  v0:= new `java.io.IOException`;
  #L46c2b4.  v1:= "index == 0" @kind object;
  #L46c2b8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46c2be.  throw v0;
  #L46c2c0.  return @kind void;
}
procedure `int` `readInt`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46beb8.  v3:= v3 ^& v4 @kind int;
  #L46beba.  if v3 >= v4 then goto L46bec0;
  #L46bebe.  return v3;
  #L46bec0.  v3:= 0I;
  #L46bec2.  call temp:= `readByte`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByte:()I` @kind direct;
  #L46bec8.  v0:= temp;
  #L46beca.  v1:= v0 ^& 128;
  #L46bece.  if v1 == 0 then goto L46bee0;
  #L46bed2.  v0:= v0 ^& 127;
  #L46bed6.  v0:= v0 ^< v3 @kind int;
  #L46bed8.  v4:= v4 + v0 @kind int;
  #L46beda.  v3:= v3 + 7;
  #L46bede.  goto L46bec2;
  #L46bee0.  v3:= v0 ^< v3 @kind int;
  #L46bee4.  v4:= v4 + v3 @kind int;
  #L46bee6.  return v4;
}
