record `okhttp3.internal.http2.Hpack$Writer` @kind class @AccessFlag FINAL {
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Writer.dynamicTable` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @AccessFlag ;
  `okio.Buffer` `okhttp3.internal.http2.Hpack$Writer.out` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.useCompression` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 , `boolean` v3 , `okio.Buffer` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L46c4fc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46c502.  v0:= 2147483647I;
  #L46c508.  v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L46c50c.  v0:= 8I;
  #L46c510.  v0:= new `okhttp3.internal.http2.Header`[v0];
  #L46c514.  v1.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v0 @kind object;
  #L46c518.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c51c.  v0:= length @variable v0;
  #L46c51e.  v0:= v0 + -1;
  #L46c522.  v1.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L46c526.  v0:= 0I;
  #L46c528.  v1.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v0;
  #L46c52c.  v1.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v0;
  #L46c530.  v1.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v2;
  #L46c534.  v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v2;
  #L46c538.  v1.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` := v3 @kind boolean;
  #L46c53c.  v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` := v4 @kind object;
  #L46c540.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `okio.Buffer` v3 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L46c554.  v0:= 4096I;
  #L46c558.  v1:= 1I;
  #L46c55a.  call `<init>`(v2, v0, v1, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @kind direct;
  #L46c560.  return @kind void;
}
procedure `void` `adjustDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L46c574.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L46c578.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L46c57c.  if v0 >= v1 then goto L46c594;
  #L46c580.  if v0 != 0 then goto L46c58c;
  #L46c584.  call `clearDynamicTable`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L46c58a.  goto L46c594;
  #L46c58c.  v1:= v1 - v0 @kind int;
  #L46c58e.  call temp:= `evictToRecoverBytes`(v2, v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L46c594.  return @kind void;
}
procedure `void` `clearDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L46c5a8.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c5ac.  v1:= 0I;
  #L46c5ae.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L46c5b4.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c5b8.  v0:= length @variable v0;
  #L46c5ba.  v0:= v0 + -1;
  #L46c5be.  v2.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L46c5c2.  v0:= 0I;
  #L46c5c4.  v2.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v0;
  #L46c5c8.  v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v0;
  #L46c5cc.  return @kind void;
}
procedure `int` `evictToRecoverBytes`(`okhttp3.internal.http2.Hpack$Writer` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46c454.  v0:= 0I;
  #L46c456.  if v5 <= 0 then goto L46c4ea;
  #L46c45a.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c45e.  v1:= length @variable v1;
  #L46c460.  v1:= v1 + -1;
  #L46c464.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L46c468.  if v1 < v2 then goto L46c4aa;
  #L46c46c.  if v5 <= 0 then goto L46c4aa;
  #L46c470.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c474.  v2:= v2[v1] @kind object;
  #L46c478.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L46c47c.  v5:= v5 - v2 @kind int;
  #L46c47e.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L46c482.  v3:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c486.  v3:= v3[v1] @kind object;
  #L46c48a.  v3:= v3.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L46c48e.  v2:= v2 - v3 @kind int;
  #L46c490.  v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v2;
  #L46c494.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L46c498.  v2:= v2 + -1;
  #L46c49c.  v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L46c4a0.  v0:= v0 + 1;
  #L46c4a4.  v1:= v1 + -1;
  #L46c4a8.  goto L46c464;
  #L46c4aa.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c4ae.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L46c4b2.  v2:= v1 + 1;
  #L46c4b6.  v1:= v1 + 1;
  #L46c4ba.  v1:= v1 + v0 @kind int;
  #L46c4bc.  v3:= v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L46c4c0.  call `arraycopy`(v5, v2, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46c4c6.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c4ca.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L46c4ce.  v2:= v1 + 1;
  #L46c4d2.  v1:= v1 + 1;
  #L46c4d6.  v1:= v1 + v0 @kind int;
  #L46c4d8.  v3:= 0I;
  #L46c4da.  call `fill`(v5, v2, v1, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L46c4e0.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L46c4e4.  v5:= v5 + v0 @kind int;
  #L46c4e6.  v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v5;
  #L46c4ea.  return v0;
}
procedure `void` `insertIntoDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v6 @kind this, `okhttp3.internal.http2.Header` v7 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L46c5e0.  v0:= v7.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L46c5e4.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L46c5e8.  if v0 <= v1 then goto L46c5f4;
  #L46c5ec.  call `clearDynamicTable`(v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L46c5f2.  return @kind void;
  #L46c5f4.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L46c5f8.  v2:= v2 + v0 @kind int;
  #L46c5fa.  v2:= v2 - v1 @kind int;
  #L46c5fc.  call temp:= `evictToRecoverBytes`(v6, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L46c602.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L46c606.  v1:= v1 + 1;
  #L46c60a.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c60e.  v3:= length @variable v2;
  #L46c610.  if v1 <= v3 then goto L46c63c;
  #L46c614.  v1:= length @variable v2;
  #L46c616.  v1:= v1 * 2;
  #L46c61a.  v1:= new `okhttp3.internal.http2.Header`[v1];
  #L46c61e.  v3:= 0I;
  #L46c620.  v4:= length @variable v2;
  #L46c622.  v5:= length @variable v2;
  #L46c624.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46c62a.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c62e.  v2:= length @variable v2;
  #L46c630.  v2:= v2 + -1;
  #L46c634.  v6.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v2;
  #L46c638.  v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v1 @kind object;
  #L46c63c.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L46c640.  v2:= v1 + -1;
  #L46c644.  v6.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v2;
  #L46c648.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c64c.  v2[v1]:= v7 @kind object;
  #L46c650.  v7:= v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L46c654.  v7:= v7 + 1;
  #L46c658.  v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v7;
  #L46c65c.  v7:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L46c660.  v7:= v7 + v0 @kind int;
  #L46c662.  v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v7;
  #L46c666.  return @kind void;
}
procedure `void` `setHeaderTableSizeSetting`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.setHeaderTableSizeSetting:(I)V` @AccessFlag  {
    temp;
    v0;

  #L46c678.  v1.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v2;
  #L46c67c.  v0:= 16384I;
  #L46c680.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L46c686.  v2:= temp;
  #L46c688.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L46c68c.  if v0 != v2 then goto L46c692;
  #L46c690.  return @kind void;
  #L46c692.  if v2 >= v0 then goto L46c6a6;
  #L46c696.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L46c69a.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L46c6a0.  v0:= temp;
  #L46c6a2.  v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L46c6a6.  v0:= 1I;
  #L46c6a8.  v1.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v0 @kind boolean;
  #L46c6ac.  v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v2;
  #L46c6b0.  call `adjustDynamicTableByteCount`(v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @kind direct;
  #L46c6b6.  return @kind void;
}
procedure `void` `writeByteString`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this, `okio.ByteString` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L46c6c8.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` @kind boolean;
  #L46c6cc.  v1:= 127I;
  #L46c6d0.  if v0 == 0 then goto L46c72e;
  #L46c6d4.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L46c6da.  v0:= temp @kind object;
  #L46c6dc.  call temp:= `encodedLength`(v0, v4) @signature `Lokhttp3/internal/http2/Huffman;.encodedLength:(Lokio/ByteString;)I` @kind virtual;
  #L46c6e2.  v0:= temp;
  #L46c6e4.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L46c6ea.  v2:= temp;
  #L46c6ec.  if v0 >= v2 then goto L46c72e;
  #L46c6f0.  v0:= new `okio.Buffer`;
  #L46c6f4.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L46c6fa.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L46c700.  v2:= temp @kind object;
  #L46c702.  call `encode`(v2, v4, v0) @signature `Lokhttp3/internal/http2/Huffman;.encode:(Lokio/ByteString;Lokio/BufferedSink;)V` @kind virtual;
  #L46c708.  call temp:= `readByteString`(v0) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L46c70e.  v4:= temp @kind object;
  #L46c710.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L46c716.  v0:= temp;
  #L46c718.  v2:= 128I;
  #L46c71c.  call `writeInt`(v3, v0, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L46c722.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L46c726.  call temp:= `write`(v0, v4) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L46c72c.  goto L46c748;
  #L46c72e.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L46c734.  v0:= temp;
  #L46c736.  v2:= 0I;
  #L46c738.  call `writeInt`(v3, v0, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L46c73e.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L46c742.  call temp:= `write`(v0, v4) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L46c748.  return @kind void;
}
procedure `void` `writeHeaders`(`okhttp3.internal.http2.Hpack$Writer` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L46c75c.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` @kind boolean;
  #L46c760.  v1:= 0I;
  #L46c762.  if v0 == 0 then goto L46c798;
  #L46c766.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L46c76a.  v2:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L46c76e.  v3:= 32I;
  #L46c772.  v4:= 31I;
  #L46c776.  if v0 >= v2 then goto L46c780;
  #L46c77a.  call `writeInt`(v13, v0, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L46c780.  v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v1 @kind boolean;
  #L46c784.  v0:= 2147483647I;
  #L46c78a.  v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L46c78e.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L46c792.  call `writeInt`(v13, v0, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L46c798.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L46c79e.  v0:= temp;
  #L46c7a0.  v2:= 0I;
  #L46c7a2.  if v2 >= v0 then goto L46c936;
  #L46c7a6.  call temp:= `get`(v14, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L46c7ac.  v3:= temp @kind object;
  #L46c7ae.  v3:= (`okhttp3.internal.http2.Header`) v3 @kind object;
  #L46c7b2.  v4:= v3.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L46c7b6.  call temp:= `toAsciiLowercase`(v4) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L46c7bc.  v4:= temp @kind object;
  #L46c7be.  v5:= v3.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L46c7c2.  v6:= `@@okhttp3.internal.http2.Hpack.NAME_TO_FIRST_INDEX` @type ^`java.util.Map` @kind object;
  #L46c7c6.  call temp:= `get`(v6, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46c7cc.  v6:= temp @kind object;
  #L46c7ce.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L46c7d2.  v7:= -1I;
  #L46c7d4.  v8:= 1I;
  #L46c7d6.  if v6 == 0 then goto L46c83a;
  #L46c7da.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L46c7e0.  v6:= temp;
  #L46c7e2.  v6:= v6 + v8 @kind int;
  #L46c7e4.  if v6 <= v8 then goto L46c834;
  #L46c7e8.  v9:= 8I;
  #L46c7ec.  if v6 >= v9 then goto L46c834;
  #L46c7f0.  v9:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c7f4.  v10:= v6 + -1;
  #L46c7f8.  v9:= v9[v10] @kind object;
  #L46c7fc.  v9:= v9.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L46c800.  call temp:= `equal`(v9, v5) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L46c806.  v9:= temp;
  #L46c808.  if v9 == 0 then goto L46c810;
  #L46c80c.  v9:= v6;
  #L46c80e.  goto L46c83e;
  #L46c810.  v9:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c814.  v9:= v9[v6] @kind object;
  #L46c818.  v9:= v9.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L46c81c.  call temp:= `equal`(v9, v5) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L46c822.  v9:= temp;
  #L46c824.  if v9 == 0 then goto L46c834;
  #L46c828.  v9:= v6 + 1;
  #L46c82c.  v12:= v9;
  #L46c82e.  v9:= v6;
  #L46c830.  v6:= v12;
  #L46c832.  goto L46c83e;
  #L46c834.  v9:= v6;
  #L46c836.  v6:= -1I;
  #L46c838.  goto L46c83e;
  #L46c83a.  v6:= -1I;
  #L46c83c.  v9:= -1I;
  #L46c83e.  if v6 != v7 then goto L46c8ac;
  #L46c842.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L46c846.  v10:= v10 + v8 @kind int;
  #L46c848.  v8:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c84c.  v8:= length @variable v8;
  #L46c84e.  if v10 >= v8 then goto L46c8ac;
  #L46c852.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c856.  v11:= v11[v10] @kind object;
  #L46c85a.  v11:= v11.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L46c85e.  call temp:= `equal`(v11, v4) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L46c864.  v11:= temp;
  #L46c866.  if v11 == 0 then goto L46c8a6;
  #L46c86a.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c86e.  v11:= v11[v10] @kind object;
  #L46c872.  v11:= v11.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L46c876.  call temp:= `equal`(v11, v5) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L46c87c.  v11:= temp;
  #L46c87e.  if v11 == 0 then goto L46c892;
  #L46c882.  v6:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L46c886.  v10:= v10 - v6 @kind int;
  #L46c888.  v6:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c88c.  v6:= length @variable v6;
  #L46c88e.  v6:= v6 + v10 @kind int;
  #L46c890.  goto L46c8ac;
  #L46c892.  if v9 != v7 then goto L46c8a6;
  #L46c896.  v9:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L46c89a.  v9:= v10 - v9 @kind int;
  #L46c89e.  v11:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L46c8a2.  v11:= length @variable v11;
  #L46c8a4.  v9:= v9 + v11 @kind int;
  #L46c8a6.  v10:= v10 + 1;
  #L46c8aa.  goto L46c84e;
  #L46c8ac.  if v6 == v7 then goto L46c8c0;
  #L46c8b0.  v3:= 127I;
  #L46c8b4.  v4:= 128I;
  #L46c8b8.  call `writeInt`(v13, v6, v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L46c8be.  goto L46c92e;
  #L46c8c0.  v6:= 64I;
  #L46c8c4.  if v9 != v7 then goto L46c8e6;
  #L46c8c8.  v7:= v13.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L46c8cc.  call temp:= `writeByte`(v7, v6) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L46c8d2.  call `writeByteString`(v13, v4) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L46c8d8.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L46c8de.  call `insertIntoDynamicTable`(v13, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L46c8e4.  goto L46c92e;
  #L46c8e6.  v7:= `@@okhttp3.internal.http2.Header.PSEUDO_PREFIX` @type ^`okio.ByteString` @kind object;
  #L46c8ea.  call temp:= `startsWith`(v4, v7) @signature `Lokio/ByteString;.startsWith:(Lokio/ByteString;)Z` @kind virtual;
  #L46c8f0.  v7:= temp;
  #L46c8f2.  if v7 == 0 then goto L46c918;
  #L46c8f6.  v7:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L46c8fa.  call temp:= `equals`(v7, v4) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L46c900.  v4:= temp;
  #L46c902.  if v4 != 0 then goto L46c918;
  #L46c906.  v3:= 15I;
  #L46c90a.  call `writeInt`(v13, v9, v3, v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L46c910.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L46c916.  goto L46c92e;
  #L46c918.  v4:= 63I;
  #L46c91c.  call `writeInt`(v13, v9, v4, v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L46c922.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L46c928.  call `insertIntoDynamicTable`(v13, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L46c92e.  v2:= v2 + 1;
  #L46c932.  goto L46c7a2;
  #L46c936.  return @kind void;
}
procedure `void` `writeInt`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @AccessFlag  {
    temp;
    v0;

  #L46c948.  if v2 >= v3 then goto L46c95a;
  #L46c94c.  v3:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L46c950.  v2:= v2 ^| v4 @kind int;
  #L46c952.  call temp:= `writeByte`(v3, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L46c958.  return @kind void;
  #L46c95a.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L46c95e.  v4:= v4 ^| v3 @kind int;
  #L46c960.  call temp:= `writeByte`(v0, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L46c966.  v2:= v2 - v3 @kind int;
  #L46c968.  v3:= 128I;
  #L46c96c.  if v2 < v3 then goto L46c986;
  #L46c970.  v4:= v2 ^& 127;
  #L46c974.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L46c978.  v3:= v3 ^| v4 @kind int;
  #L46c97a.  call temp:= `writeByte`(v0, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L46c980.  v2:= v2 ^>> 7;
  #L46c984.  goto L46c968;
  #L46c986.  v3:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L46c98a.  call temp:= `writeByte`(v3, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L46c990.  return @kind void;
}
