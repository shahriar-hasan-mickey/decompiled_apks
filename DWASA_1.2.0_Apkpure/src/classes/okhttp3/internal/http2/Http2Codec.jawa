record `okhttp3.internal.http2.Http2Codec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.HttpCodec` @kind interface {
  `okhttp3.Interceptor$Chain` `okhttp3.internal.http2.Http2Codec.chain` @AccessFlag PRIVATE_FINAL;
  `okhttp3.OkHttpClient` `okhttp3.internal.http2.Http2Codec.client` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Codec.connection` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2Codec.stream` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http2.Http2Codec.streamAllocation` @AccessFlag FINAL;
}
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.HOST` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.TE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Codec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L46d414.  v0:= "connection" @kind object;
  #L46d418.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L46d41e.  v0:= temp @kind object;
  #L46d420.  `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` := v0 @kind object;
  #L46d424.  v0:= "host" @kind object;
  #L46d428.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L46d42e.  v0:= temp @kind object;
  #L46d430.  `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` := v0 @kind object;
  #L46d434.  v0:= "keep-alive" @kind object;
  #L46d438.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L46d43e.  v0:= temp @kind object;
  #L46d440.  `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` := v0 @kind object;
  #L46d444.  v0:= "proxy-connection" @kind object;
  #L46d448.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L46d44e.  v0:= temp @kind object;
  #L46d450.  `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` := v0 @kind object;
  #L46d454.  v0:= "transfer-encoding" @kind object;
  #L46d458.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L46d45e.  v0:= temp @kind object;
  #L46d460.  `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` := v0 @kind object;
  #L46d464.  v0:= "te" @kind object;
  #L46d468.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L46d46e.  v0:= temp @kind object;
  #L46d470.  `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` := v0 @kind object;
  #L46d474.  v0:= "encoding" @kind object;
  #L46d478.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L46d47e.  v0:= temp @kind object;
  #L46d480.  `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` := v0 @kind object;
  #L46d484.  v0:= "upgrade" @kind object;
  #L46d488.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L46d48e.  v0:= temp @kind object;
  #L46d490.  `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` := v0 @kind object;
  #L46d494.  v0:= 12I;
  #L46d498.  v0:= new `okio.ByteString`[v0];
  #L46d49c.  v1:= `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` @kind object;
  #L46d4a0.  v2:= 0I;
  #L46d4a2.  v0[v2]:= v1 @kind object;
  #L46d4a6.  v1:= `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` @kind object;
  #L46d4aa.  v3:= 1I;
  #L46d4ac.  v0[v3]:= v1 @kind object;
  #L46d4b0.  v1:= `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` @kind object;
  #L46d4b4.  v4:= 2I;
  #L46d4b6.  v0[v4]:= v1 @kind object;
  #L46d4ba.  v1:= `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` @kind object;
  #L46d4be.  v5:= 3I;
  #L46d4c0.  v0[v5]:= v1 @kind object;
  #L46d4c4.  v1:= `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` @kind object;
  #L46d4c8.  v6:= 4I;
  #L46d4ca.  v0[v6]:= v1 @kind object;
  #L46d4ce.  v1:= `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` @kind object;
  #L46d4d2.  v7:= 5I;
  #L46d4d4.  v0[v7]:= v1 @kind object;
  #L46d4d8.  v1:= `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` @kind object;
  #L46d4dc.  v8:= 6I;
  #L46d4de.  v0[v8]:= v1 @kind object;
  #L46d4e2.  v1:= `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` @kind object;
  #L46d4e6.  v9:= 7I;
  #L46d4e8.  v0[v9]:= v1 @kind object;
  #L46d4ec.  v1:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L46d4f0.  v10:= 8I;
  #L46d4f4.  v0[v10]:= v1 @kind object;
  #L46d4f8.  v1:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L46d4fc.  v11:= 9I;
  #L46d500.  v0[v11]:= v1 @kind object;
  #L46d504.  v1:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L46d508.  v11:= 10I;
  #L46d50c.  v0[v11]:= v1 @kind object;
  #L46d510.  v1:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L46d514.  v11:= 11I;
  #L46d518.  v0[v11]:= v1 @kind object;
  #L46d51c.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L46d522.  v0:= temp @kind object;
  #L46d524.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L46d528.  v0:= new `okio.ByteString`[v10];
  #L46d52c.  v1:= `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` @kind object;
  #L46d530.  v0[v2]:= v1 @kind object;
  #L46d534.  v1:= `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` @kind object;
  #L46d538.  v0[v3]:= v1 @kind object;
  #L46d53c.  v1:= `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` @kind object;
  #L46d540.  v0[v4]:= v1 @kind object;
  #L46d544.  v1:= `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` @kind object;
  #L46d548.  v0[v5]:= v1 @kind object;
  #L46d54c.  v1:= `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` @kind object;
  #L46d550.  v0[v6]:= v1 @kind object;
  #L46d554.  v1:= `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` @kind object;
  #L46d558.  v0[v7]:= v1 @kind object;
  #L46d55c.  v1:= `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` @kind object;
  #L46d560.  v0[v8]:= v1 @kind object;
  #L46d564.  v1:= `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` @kind object;
  #L46d568.  v0[v9]:= v1 @kind object;
  #L46d56c.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L46d572.  v0:= temp @kind object;
  #L46d574.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L46d578.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Codec` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object, `okhttp3.Interceptor$Chain` v2 @kind object, `okhttp3.internal.connection.StreamAllocation` v3 @kind object, `okhttp3.internal.http2.Http2Connection` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Interceptor$Chain;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http2/Http2Connection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L46d58c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46d592.  v0.`okhttp3.internal.http2.Http2Codec.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L46d596.  v0.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` := v2 @kind object;
  #L46d59a.  v0.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v3 @kind object;
  #L46d59e.  v0.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v4 @kind object;
  #L46d5a2.  return @kind void;
}
procedure `java.util.List` `http2HeadersList`(`okhttp3.Request` v6 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L46d110.  call temp:= `headers`(v6) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L46d116.  v0:= temp @kind object;
  #L46d118.  v1:= new `java.util.ArrayList`;
  #L46d11c.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L46d122.  v2:= temp;
  #L46d124.  v2:= v2 + 4;
  #L46d128.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L46d12e.  v2:= new `okhttp3.internal.http2.Header`;
  #L46d132.  v3:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L46d136.  call temp:= `method`(v6) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L46d13c.  v4:= temp @kind object;
  #L46d13e.  call `<init>`(v2, v3, v4) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L46d144.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46d14a.  v2:= new `okhttp3.internal.http2.Header`;
  #L46d14e.  v3:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L46d152.  call temp:= `url`(v6) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L46d158.  v4:= temp @kind object;
  #L46d15a.  call temp:= `requestPath`(v4) @signature `Lokhttp3/internal/http/RequestLine;.requestPath:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @kind static;
  #L46d160.  v4:= temp @kind object;
  #L46d162.  call `<init>`(v2, v3, v4) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L46d168.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46d16e.  v2:= "Host" @kind object;
  #L46d172.  call temp:= `header`(v6, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L46d178.  v2:= temp @kind object;
  #L46d17a.  if v2 == 0 then goto L46d192;
  #L46d17e.  v3:= new `okhttp3.internal.http2.Header`;
  #L46d182.  v4:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L46d186.  call `<init>`(v3, v4, v2) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L46d18c.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46d192.  v2:= new `okhttp3.internal.http2.Header`;
  #L46d196.  v3:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L46d19a.  call temp:= `url`(v6) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L46d1a0.  v6:= temp @kind object;
  #L46d1a2.  call temp:= `scheme`(v6) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L46d1a8.  v6:= temp @kind object;
  #L46d1aa.  call `<init>`(v2, v3, v6) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L46d1b0.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46d1b6.  v6:= 0I;
  #L46d1b8.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L46d1be.  v2:= temp;
  #L46d1c0.  if v6 >= v2 then goto L46d20e;
  #L46d1c4.  call temp:= `name`(v0, v6) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L46d1ca.  v3:= temp @kind object;
  #L46d1cc.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L46d1d0.  call temp:= `toLowerCase`(v3, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L46d1d6.  v3:= temp @kind object;
  #L46d1d8.  call temp:= `encodeUtf8`(v3) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L46d1de.  v3:= temp @kind object;
  #L46d1e0.  v4:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` @kind object;
  #L46d1e4.  call temp:= `contains`(v4, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L46d1ea.  v4:= temp;
  #L46d1ec.  if v4 != 0 then goto L46d208;
  #L46d1f0.  v4:= new `okhttp3.internal.http2.Header`;
  #L46d1f4.  call temp:= `value`(v0, v6) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L46d1fa.  v5:= temp @kind object;
  #L46d1fc.  call `<init>`(v4, v3, v5) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L46d202.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46d208.  v6:= v6 + 1;
  #L46d20c.  goto L46d1c0;
  #L46d20e.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `readHttp2HeadersList`(`java.util.List` v8 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Ljava/util/List;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L46d220.  v0:= new `okhttp3.Headers$Builder`;
  #L46d224.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L46d22a.  call temp:= `size`(v8) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L46d230.  v1:= temp;
  #L46d232.  v2:= 0I;
  #L46d234.  v3:= 0I;
  #L46d236.  v4:= v0 @kind object;
  #L46d238.  v0:= v2 @kind object;
  #L46d23a.  if v3 >= v1 then goto L46d2e2;
  #L46d23e.  call temp:= `get`(v8, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L46d244.  v5:= temp @kind object;
  #L46d246.  v5:= (`okhttp3.internal.http2.Header`) v5 @kind object;
  #L46d24a.  if v5 != 0 then goto L46d26e;
  #L46d24e.  if v0 == 0 then goto L46d2dc;
  #L46d252.  v5:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L46d256.  v6:= 100I;
  #L46d25a.  if v5 != v6 then goto L46d2dc;
  #L46d25e.  v0:= new `okhttp3.Headers$Builder`;
  #L46d262.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L46d268.  v4:= v0 @kind object;
  #L46d26a.  v0:= v2 @kind object;
  #L46d26c.  goto L46d2dc;
  #L46d26e.  v6:= v5.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L46d272.  v5:= v5.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L46d276.  call temp:= `utf8`(v5) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L46d27c.  v5:= temp @kind object;
  #L46d27e.  v7:= `@@okhttp3.internal.http2.Header.RESPONSE_STATUS` @type ^`okio.ByteString` @kind object;
  #L46d282.  call temp:= `equals`(v6, v7) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L46d288.  v7:= temp;
  #L46d28a.  if v7 == 0 then goto L46d2ba;
  #L46d28e.  v0:= new `java.lang.StringBuilder`;
  #L46d292.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L46d298.  v6:= "HTTP/1.1 " @kind object;
  #L46d29c.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46d2a2.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46d2a8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L46d2ae.  v0:= temp @kind object;
  #L46d2b0.  call temp:= `parse`(v0) @signature `Lokhttp3/internal/http/StatusLine;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind static;
  #L46d2b6.  v0:= temp @kind object;
  #L46d2b8.  goto L46d2dc;
  #L46d2ba.  v7:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` @kind object;
  #L46d2be.  call temp:= `contains`(v7, v6) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L46d2c4.  v7:= temp;
  #L46d2c6.  if v7 != 0 then goto L46d2dc;
  #L46d2ca.  v7:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L46d2ce.  call temp:= `utf8`(v6) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L46d2d4.  v6:= temp @kind object;
  #L46d2d6.  call `addLenient`(v7, v4, v6, v5) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L46d2dc.  v3:= v3 + 1;
  #L46d2e0.  goto L46d23a;
  #L46d2e2.  if v0 == 0 then goto L46d326;
  #L46d2e6.  v8:= new `okhttp3.Response$Builder`;
  #L46d2ea.  call `<init>`(v8) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L46d2f0.  v1:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L46d2f4.  call temp:= `protocol`(v8, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L46d2fa.  v8:= temp @kind object;
  #L46d2fc.  v1:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L46d300.  call temp:= `code`(v8, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L46d306.  v8:= temp @kind object;
  #L46d308.  v0:= v0.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L46d30c.  call temp:= `message`(v8, v0) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L46d312.  v8:= temp @kind object;
  #L46d314.  call temp:= `build`(v4) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L46d31a.  v0:= temp @kind object;
  #L46d31c.  call temp:= `headers`(v8, v0) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L46d322.  v8:= temp @kind object;
  #L46d324.  return v8 @kind object;
  #L46d326.  v8:= new `java.net.ProtocolException`;
  #L46d32a.  v0:= "Expected ':status' header not present" @kind object;
  #L46d32e.  call `<init>`(v8, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46d334.  goto L46d338;
  #L46d336.  throw v8;
  #L46d338.  goto L46d336;
}
procedure `void` `cancel`(`okhttp3.internal.http2.Http2Codec` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46d5b4.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L46d5b8.  if v0 == 0 then goto L46d5c6;
  #L46d5bc.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L46d5c0.  call `closeLater`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L46d5c6.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http2.Http2Codec` v0 @kind this, `okhttp3.Request` v1 @kind object, `long` v2 ) @signature `Lokhttp3/internal/http2/Http2Codec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;

  #L46d3f4.  v1:= v0.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L46d3f8.  call temp:= `getSink`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L46d3fe.  v1:= temp @kind object;
  #L46d400.  return v1 @kind object;
}
procedure `void` `finishRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d5d8.  v0:= v1.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L46d5dc.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L46d5e2.  v0:= temp @kind object;
  #L46d5e4.  call `close`(v0) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L46d5ea.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d5fc.  v0:= v1.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L46d600.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L46d606.  return @kind void;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.internal.http2.Http2Codec` v4 @kind this, `okhttp3.Response` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46d390.  v0:= v4.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46d394.  v0:= v0.`okhttp3.internal.connection.StreamAllocation.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L46d398.  v1:= v4.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46d39c.  v1:= v1.`okhttp3.internal.connection.StreamAllocation.call` @type ^`okhttp3.Call` @kind object;
  #L46d3a0.  call `responseBodyStart`(v0, v1) @signature `Lokhttp3/EventListener;.responseBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L46d3a6.  v0:= "Content-Type" @kind object;
  #L46d3aa.  call temp:= `header`(v5, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L46d3b0.  v0:= temp @kind object;
  #L46d3b2.  call temp:= `contentLength`(v5) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L46d3b8.  v1:= temp @kind wide;
  #L46d3ba.  v5:= new `okhttp3.internal.http2.Http2Codec$StreamFinishingSource`;
  #L46d3be.  v3:= v4.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L46d3c2.  call temp:= `getSource`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @kind virtual;
  #L46d3c8.  v3:= temp @kind object;
  #L46d3ca.  call `<init>`(v5, v4, v3) @signature `Lokhttp3/internal/http2/Http2Codec$StreamFinishingSource;.<init>:(Lokhttp3/internal/http2/Http2Codec;Lokio/Source;)V` @kind direct;
  #L46d3d0.  v3:= new `okhttp3.internal.http.RealResponseBody`;
  #L46d3d4.  call temp:= `buffer`(v5) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L46d3da.  v5:= temp @kind object;
  #L46d3dc.  call `<init>`(v3, v0, v1, v5) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L46d3e2.  return v3 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http2.Http2Codec` v2 @kind this, `boolean` v3 ) @signature `Lokhttp3/internal/http2/Http2Codec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46d34c.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L46d350.  call temp:= `takeResponseHeaders`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.takeResponseHeaders:()Ljava/util/List;` @kind virtual;
  #L46d356.  v0:= temp @kind object;
  #L46d358.  call temp:= `readHttp2HeadersList`(v0) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Ljava/util/List;)Lokhttp3/Response$Builder;` @kind static;
  #L46d35e.  v0:= temp @kind object;
  #L46d360.  if v3 == 0 then goto L46d37c;
  #L46d364.  v3:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L46d368.  call temp:= `code`(v3, v0) @signature `Lokhttp3/internal/Internal;.code:(Lokhttp3/Response$Builder;)I` @kind virtual;
  #L46d36e.  v3:= temp;
  #L46d370.  v1:= 100I;
  #L46d374.  if v3 != v1 then goto L46d37c;
  #L46d378.  v3:= 0I;
  #L46d37a.  return v3 @kind object;
  #L46d37c.  return v0 @kind object;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http2.Http2Codec` v3 @kind this, `okhttp3.Request` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L46d618.  v0:= v3.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L46d61c.  if v0 == 0 then goto L46d622;
  #L46d620.  return @kind void;
  #L46d622.  call temp:= `body`(v4) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L46d628.  v0:= temp @kind object;
  #L46d62a.  if v0 == 0 then goto L46d632;
  #L46d62e.  v0:= 1I;
  #L46d630.  goto L46d634;
  #L46d632.  v0:= 0I;
  #L46d634.  call temp:= `http2HeadersList`(v4) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @kind static;
  #L46d63a.  v4:= temp @kind object;
  #L46d63c.  v1:= v3.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L46d640.  call temp:= `newStream`(v1, v4, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L46d646.  v4:= temp @kind object;
  #L46d648.  v3.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` := v4 @kind object;
  #L46d64c.  v4:= v3.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L46d650.  call temp:= `readTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @kind virtual;
  #L46d656.  v4:= temp @kind object;
  #L46d658.  v0:= v3.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L46d65c.  call temp:= `readTimeoutMillis`(v0) @signature `Lokhttp3/Interceptor$Chain;.readTimeoutMillis:()I` @kind interface;
  #L46d662.  v0:= temp;
  #L46d664.  v0:= (`long`) v0 @kind i2l;
  #L46d666.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L46d66a.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L46d670.  v4:= v3.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L46d674.  call temp:= `writeTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @kind virtual;
  #L46d67a.  v4:= temp @kind object;
  #L46d67c.  v0:= v3.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L46d680.  call temp:= `writeTimeoutMillis`(v0) @signature `Lokhttp3/Interceptor$Chain;.writeTimeoutMillis:()I` @kind interface;
  #L46d686.  v0:= temp;
  #L46d688.  v0:= (`long`) v0 @kind i2l;
  #L46d68a.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L46d68e.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L46d694.  return @kind void;
}
