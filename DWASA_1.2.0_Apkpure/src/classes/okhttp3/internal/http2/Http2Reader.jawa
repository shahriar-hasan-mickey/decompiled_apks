record `okhttp3.internal.http2.Http2Reader` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `boolean` `okhttp3.internal.http2.Http2Reader.client` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Reader$ContinuationSource` `okhttp3.internal.http2.Http2Reader.continuation` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Hpack$Reader` `okhttp3.internal.http2.Http2Reader.hpackReader` @AccessFlag FINAL;
  `okio.BufferedSource` `okhttp3.internal.http2.Http2Reader.source` @AccessFlag PRIVATE_FINAL;
}
global `java.util.logging.Logger` `@@okhttp3.internal.http2.Http2Reader.logger` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Reader;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L46f4d0.  v0:= constclass @type ^`okhttp3.internal.http2.Http2` @kind object;
  #L46f4d4.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L46f4da.  v0:= temp @kind object;
  #L46f4dc.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L46f4e2.  v0:= temp @kind object;
  #L46f4e4.  `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L46f4e8.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Reader` v1 @kind this, `okio.BufferedSource` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/internal/http2/Http2Reader;.<init>:(Lokio/BufferedSource;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L46f4fc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46f502.  v1.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` := v2 @kind object;
  #L46f506.  v1.`okhttp3.internal.http2.Http2Reader.client` @type ^`boolean` := v3 @kind boolean;
  #L46f50a.  v2:= new `okhttp3.internal.http2.Http2Reader$ContinuationSource`;
  #L46f50e.  v3:= v1.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f512.  call `<init>`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Reader$ContinuationSource;.<init>:(Lokio/BufferedSource;)V` @kind direct;
  #L46f518.  v1.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` := v2 @kind object;
  #L46f51c.  v2:= new `okhttp3.internal.http2.Hpack$Reader`;
  #L46f520.  v3:= v1.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L46f524.  v0:= 4096I;
  #L46f528.  call `<init>`(v2, v0, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(ILokio/Source;)V` @kind direct;
  #L46f52e.  v1.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` := v2 @kind object;
  #L46f532.  return @kind void;
}
procedure `int` `lengthWithoutPadding`(`int` v1 , `byte` v2 , `short` v3 ) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @AccessFlag STATIC {
    temp;
    v0;

  #L46f3f4.  v2:= v2 ^& 8;
  #L46f3f8.  if v2 == 0 then goto L46f400;
  #L46f3fc.  v1:= v1 + -1;
  #L46f400.  if v3 > v1 then goto L46f40a;
  #L46f404.  v1:= v1 - v3 @kind int;
  #L46f406.  v1:= (`short`) v1 @kind i2s;
  #L46f408.  return v1;
  #L46f40a.  v2:= 2I;
  #L46f40c.  v2:= new `java.lang.Object`[v2];
  #L46f410.  v0:= 0I;
  #L46f412.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L46f418.  v3:= temp @kind object;
  #L46f41a.  v2[v0]:= v3 @kind object;
  #L46f41e.  v3:= 1I;
  #L46f420.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46f426.  v1:= temp @kind object;
  #L46f428.  v2[v3]:= v1 @kind object;
  #L46f42c.  v1:= "PROTOCOL_ERROR padding %s > remaining length %s" @kind object;
  #L46f430.  call temp:= `ioException`(v1, v2) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f436.  v1:= temp @kind object;
  #L46f438.  throw v1;
}
procedure `void` `readData`(`okhttp3.internal.http2.Http2Reader` v4 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v5 @kind object, `int` v6 , `byte` v7 , `int` v8 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readData:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46f620.  v0:= 0I;
  #L46f622.  if v8 == 0 then goto L46f692;
  #L46f626.  v1:= v7 ^& 1;
  #L46f62a.  v2:= 1I;
  #L46f62c.  if v1 == 0 then goto L46f634;
  #L46f630.  v1:= 1I;
  #L46f632.  goto L46f636;
  #L46f634.  v1:= 0I;
  #L46f636.  v3:= v7 ^& 32;
  #L46f63a.  if v3 == 0 then goto L46f640;
  #L46f63e.  goto L46f642;
  #L46f640.  v2:= 0I;
  #L46f642.  if v2 != 0 then goto L46f680;
  #L46f646.  v2:= v7 ^& 8;
  #L46f64a.  if v2 == 0 then goto L46f660;
  #L46f64e.  v0:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f652.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L46f658.  v0:= temp;
  #L46f65a.  v0:= v0 ^& 255;
  #L46f65e.  v0:= (`short`) v0 @kind i2s;
  #L46f660.  call temp:= `lengthWithoutPadding`(v6, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L46f666.  v6:= temp;
  #L46f668.  v7:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f66c.  call `data`(v5, v1, v8, v7, v6) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.data:(ZILokio/BufferedSource;I)V` @kind interface;
  #L46f672.  v5:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f676.  v6:= (`long`) v0 @kind i2l;
  #L46f678.  call `skip`(v5, v6) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L46f67e.  return @kind void;
  #L46f680.  v5:= new `java.lang.Object`[v0];
  #L46f684.  v6:= "PROTOCOL_ERROR: FLAG_COMPRESSED without SETTINGS_COMPRESS_DATA" @kind object;
  #L46f688.  call temp:= `ioException`(v6, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f68e.  v5:= temp @kind object;
  #L46f690.  throw v5;
  #L46f692.  v5:= new `java.lang.Object`[v0];
  #L46f696.  v6:= "PROTOCOL_ERROR: TYPE_DATA streamId == 0" @kind object;
  #L46f69a.  call temp:= `ioException`(v6, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f6a0.  v5:= temp @kind object;
  #L46f6a2.  throw v5;
}
procedure `void` `readGoAway`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readGoAway:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L46f6b4.  v6:= 1I;
  #L46f6b6.  v0:= 8I;
  #L46f6ba.  v1:= 0I;
  #L46f6bc.  if v5 < v0 then goto L46f738;
  #L46f6c0.  if v7 != 0 then goto L46f726;
  #L46f6c4.  v7:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f6c8.  call temp:= `readInt`(v7) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L46f6ce.  v7:= temp;
  #L46f6d0.  v2:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f6d4.  call temp:= `readInt`(v2) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L46f6da.  v2:= temp;
  #L46f6dc.  v5:= v5 - v0 @kind int;
  #L46f6de.  call temp:= `fromHttp2`(v2) @signature `Lokhttp3/internal/http2/ErrorCode;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L46f6e4.  v0:= temp @kind object;
  #L46f6e6.  if v0 == 0 then goto L46f708;
  #L46f6ea.  v6:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L46f6ee.  if v5 <= 0 then goto L46f700;
  #L46f6f2.  v6:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f6f6.  v1:= (`long`) v5 @kind i2l;
  #L46f6f8.  call temp:= `readByteString`(v6, v1) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L46f6fe.  v6:= temp @kind object;
  #L46f700.  call `goAway`(v4, v7, v0, v6) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.goAway:(ILokhttp3/internal/http2/ErrorCode;Lokio/ByteString;)V` @kind interface;
  #L46f706.  return @kind void;
  #L46f708.  v4:= new `java.lang.Object`[v6];
  #L46f70c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46f712.  v5:= temp @kind object;
  #L46f714.  v4[v1]:= v5 @kind object;
  #L46f718.  v5:= "TYPE_GOAWAY unexpected error code: %d" @kind object;
  #L46f71c.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f722.  v4:= temp @kind object;
  #L46f724.  throw v4;
  #L46f726.  v4:= new `java.lang.Object`[v1];
  #L46f72a.  v5:= "TYPE_GOAWAY streamId != 0" @kind object;
  #L46f72e.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f734.  v4:= temp @kind object;
  #L46f736.  throw v4;
  #L46f738.  v4:= new `java.lang.Object`[v6];
  #L46f73c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46f742.  v5:= temp @kind object;
  #L46f744.  v4[v1]:= v5 @kind object;
  #L46f748.  v5:= "TYPE_GOAWAY length < 8: %s" @kind object;
  #L46f74c.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f752.  v4:= temp @kind object;
  #L46f754.  throw v4;
}
procedure `java.util.List` `readHeaderBlock`(`okhttp3.internal.http2.Http2Reader` v1 @kind this, `int` v2 , `short` v3 , `byte` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L46f490.  v0:= v1.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L46f494.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.left` @type ^`int` := v2;
  #L46f498.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.length` @type ^`int` := v2;
  #L46f49c.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.padding` @type ^`short` := v3 @kind char;
  #L46f4a0.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.flags` @type ^`byte` := v4 @kind byte;
  #L46f4a4.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.streamId` @type ^`int` := v5;
  #L46f4a8.  v2:= v1.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` @kind object;
  #L46f4ac.  call `readHeaders`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readHeaders:()V` @kind virtual;
  #L46f4b2.  v2:= v1.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` @kind object;
  #L46f4b6.  call temp:= `getAndResetHeaderList`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getAndResetHeaderList:()Ljava/util/List;` @kind virtual;
  #L46f4bc.  v2:= temp @kind object;
  #L46f4be.  return v2 @kind object;
}
procedure `void` `readHeaders`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaders:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L46f768.  v0:= 0I;
  #L46f76a.  if v7 == 0 then goto L46f7c2;
  #L46f76e.  v1:= v6 ^& 1;
  #L46f772.  if v1 == 0 then goto L46f77a;
  #L46f776.  v1:= 1I;
  #L46f778.  goto L46f77c;
  #L46f77a.  v1:= 0I;
  #L46f77c.  v2:= v6 ^& 8;
  #L46f780.  if v2 == 0 then goto L46f796;
  #L46f784.  v0:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f788.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L46f78e.  v0:= temp;
  #L46f790.  v0:= v0 ^& 255;
  #L46f794.  v0:= (`short`) v0 @kind i2s;
  #L46f796.  v2:= v6 ^& 32;
  #L46f79a.  if v2 == 0 then goto L46f7a8;
  #L46f79e.  call `readPriority`(v3, v4, v7) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @kind direct;
  #L46f7a4.  v5:= v5 + -5;
  #L46f7a8.  call temp:= `lengthWithoutPadding`(v5, v6, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L46f7ae.  v5:= temp;
  #L46f7b0.  call temp:= `readHeaderBlock`(v3, v5, v0, v6, v7) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @kind direct;
  #L46f7b6.  v5:= temp @kind object;
  #L46f7b8.  v6:= -1I;
  #L46f7ba.  call `headers`(v4, v1, v7, v6, v5) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.headers:(ZIILjava/util/List;)V` @kind interface;
  #L46f7c0.  return @kind void;
  #L46f7c2.  v4:= new `java.lang.Object`[v0];
  #L46f7c6.  v5:= "PROTOCOL_ERROR: TYPE_HEADERS streamId == 0" @kind object;
  #L46f7ca.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f7d0.  v4:= temp @kind object;
  #L46f7d2.  throw v4;
}
procedure `int` `readMedium`(`okio.BufferedSource` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2Reader;.readMedium:(Lokio/BufferedSource;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L46f44c.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L46f452.  v0:= temp;
  #L46f454.  v0:= v0 ^& 255;
  #L46f458.  v0:= v0 ^< 16;
  #L46f45c.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L46f462.  v1:= temp;
  #L46f464.  v1:= v1 ^& 255;
  #L46f468.  v1:= v1 ^< 8;
  #L46f46c.  v0:= v0 ^| v1 @kind int;
  #L46f46e.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L46f474.  v2:= temp;
  #L46f476.  v2:= v2 ^& 255;
  #L46f47a.  v2:= v2 ^| v0 @kind int;
  #L46f47c.  return v2;
}
procedure `void` `readPing`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPing:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L46f7e4.  v0:= 0I;
  #L46f7e6.  v1:= 1I;
  #L46f7e8.  v2:= 8I;
  #L46f7ec.  if v5 != v2 then goto L46f82e;
  #L46f7f0.  if v7 != 0 then goto L46f81c;
  #L46f7f4.  v5:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f7f8.  call temp:= `readInt`(v5) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L46f7fe.  v5:= temp;
  #L46f800.  v7:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f804.  call temp:= `readInt`(v7) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L46f80a.  v7:= temp;
  #L46f80c.  v6:= v6 ^& v1 @kind int;
  #L46f80e.  if v6 == 0 then goto L46f814;
  #L46f812.  v0:= 1I;
  #L46f814.  call `ping`(v4, v0, v5, v7) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.ping:(ZII)V` @kind interface;
  #L46f81a.  return @kind void;
  #L46f81c.  v4:= new `java.lang.Object`[v0];
  #L46f820.  v5:= "TYPE_PING streamId != 0" @kind object;
  #L46f824.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f82a.  v4:= temp @kind object;
  #L46f82c.  throw v4;
  #L46f82e.  v4:= new `java.lang.Object`[v1];
  #L46f832.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46f838.  v5:= temp @kind object;
  #L46f83a.  v4[v0]:= v5 @kind object;
  #L46f83e.  v5:= "TYPE_PING length != 8: %s" @kind object;
  #L46f842.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f848.  v4:= temp @kind object;
  #L46f84a.  throw v4;
}
procedure `void` `readPriority`(`okhttp3.internal.http2.Http2Reader` v4 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v5 @kind object, `int` v6 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46f85c.  v0:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f860.  call temp:= `readInt`(v0) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L46f866.  v0:= temp;
  #L46f868.  v1:= -2147483648I;
  #L46f86c.  v1:= v1 ^& v0 @kind int;
  #L46f86e.  v2:= 1I;
  #L46f870.  if v1 == 0 then goto L46f878;
  #L46f874.  v1:= 1I;
  #L46f876.  goto L46f87a;
  #L46f878.  v1:= 0I;
  #L46f87a.  v3:= 2147483647I;
  #L46f880.  v0:= v0 ^& v3 @kind int;
  #L46f882.  v3:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f886.  call temp:= `readByte`(v3) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L46f88c.  v3:= temp;
  #L46f88e.  v3:= v3 ^& 255;
  #L46f892.  v3:= v3 + v2 @kind int;
  #L46f894.  call `priority`(v5, v6, v0, v3, v1) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.priority:(IIIZ)V` @kind interface;
  #L46f89a.  return @kind void;
}
procedure `void` `readPriority`(`okhttp3.internal.http2.Http2Reader` v1 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v2 @kind object, `int` v3 , `byte` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L46f8ac.  v4:= 0I;
  #L46f8ae.  v0:= 5I;
  #L46f8b0.  if v3 != v0 then goto L46f8d2;
  #L46f8b4.  if v5 == 0 then goto L46f8c0;
  #L46f8b8.  call `readPriority`(v1, v2, v5) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @kind direct;
  #L46f8be.  return @kind void;
  #L46f8c0.  v2:= new `java.lang.Object`[v4];
  #L46f8c4.  v3:= "TYPE_PRIORITY streamId == 0" @kind object;
  #L46f8c8.  call temp:= `ioException`(v3, v2) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f8ce.  v2:= temp @kind object;
  #L46f8d0.  throw v2;
  #L46f8d2.  v2:= 1I;
  #L46f8d4.  v2:= new `java.lang.Object`[v2];
  #L46f8d8.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46f8de.  v3:= temp @kind object;
  #L46f8e0.  v2[v4]:= v3 @kind object;
  #L46f8e4.  v3:= "TYPE_PRIORITY length: %d != 5" @kind object;
  #L46f8e8.  call temp:= `ioException`(v3, v2) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f8ee.  v2:= temp @kind object;
  #L46f8f0.  throw v2;
}
procedure `void` `readPushPromise`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPushPromise:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L46f904.  v0:= 0I;
  #L46f906.  if v7 == 0 then goto L46f954;
  #L46f90a.  v1:= v6 ^& 8;
  #L46f90e.  if v1 == 0 then goto L46f924;
  #L46f912.  v0:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f916.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L46f91c.  v0:= temp;
  #L46f91e.  v0:= v0 ^& 255;
  #L46f922.  v0:= (`short`) v0 @kind i2s;
  #L46f924.  v1:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f928.  call temp:= `readInt`(v1) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L46f92e.  v1:= temp;
  #L46f930.  v2:= 2147483647I;
  #L46f936.  v1:= v1 ^& v2 @kind int;
  #L46f938.  v5:= v5 + -4;
  #L46f93c.  call temp:= `lengthWithoutPadding`(v5, v6, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L46f942.  v5:= temp;
  #L46f944.  call temp:= `readHeaderBlock`(v3, v5, v0, v6, v7) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @kind direct;
  #L46f94a.  v5:= temp @kind object;
  #L46f94c.  call `pushPromise`(v4, v7, v1, v5) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.pushPromise:(IILjava/util/List;)V` @kind interface;
  #L46f952.  return @kind void;
  #L46f954.  v4:= new `java.lang.Object`[v0];
  #L46f958.  v5:= "PROTOCOL_ERROR: TYPE_PUSH_PROMISE streamId == 0" @kind object;
  #L46f95c.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f962.  v4:= temp @kind object;
  #L46f964.  throw v4;
}
procedure `void` `readRstStream`(`okhttp3.internal.http2.Http2Reader` v2 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v3 @kind object, `int` v4 , `byte` v5 , `int` v6 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readRstStream:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L46f978.  v5:= 1I;
  #L46f97a.  v0:= 0I;
  #L46f97c.  v1:= 4I;
  #L46f97e.  if v4 != v1 then goto L46f9d6;
  #L46f982.  if v6 == 0 then goto L46f9c4;
  #L46f986.  v4:= v2.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f98a.  call temp:= `readInt`(v4) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L46f990.  v4:= temp;
  #L46f992.  call temp:= `fromHttp2`(v4) @signature `Lokhttp3/internal/http2/ErrorCode;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L46f998.  v1:= temp @kind object;
  #L46f99a.  if v1 == 0 then goto L46f9a6;
  #L46f99e.  call `rstStream`(v3, v6, v1) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.rstStream:(ILokhttp3/internal/http2/ErrorCode;)V` @kind interface;
  #L46f9a4.  return @kind void;
  #L46f9a6.  v3:= new `java.lang.Object`[v5];
  #L46f9aa.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46f9b0.  v4:= temp @kind object;
  #L46f9b2.  v3[v0]:= v4 @kind object;
  #L46f9b6.  v4:= "TYPE_RST_STREAM unexpected error code: %d" @kind object;
  #L46f9ba.  call temp:= `ioException`(v4, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f9c0.  v3:= temp @kind object;
  #L46f9c2.  throw v3;
  #L46f9c4.  v3:= new `java.lang.Object`[v0];
  #L46f9c8.  v4:= "TYPE_RST_STREAM streamId == 0" @kind object;
  #L46f9cc.  call temp:= `ioException`(v4, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f9d2.  v3:= temp @kind object;
  #L46f9d4.  throw v3;
  #L46f9d6.  v3:= new `java.lang.Object`[v5];
  #L46f9da.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46f9e0.  v4:= temp @kind object;
  #L46f9e2.  v3[v0]:= v4 @kind object;
  #L46f9e6.  v4:= "TYPE_RST_STREAM length: %d != 4" @kind object;
  #L46f9ea.  call temp:= `ioException`(v4, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f9f0.  v3:= temp @kind object;
  #L46f9f2.  throw v3;
}
procedure `void` `readSettings`(`okhttp3.internal.http2.Http2Reader` v5 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v6 @kind object, `int` v7 , `byte` v8 , `int` v9 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readSettings:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46fa04.  v0:= 0I;
  #L46fa06.  if v9 != 0 then goto L46fb06;
  #L46fa0a.  v9:= 1I;
  #L46fa0c.  v8:= v8 ^& v9 @kind int;
  #L46fa0e.  if v8 == 0 then goto L46fa30;
  #L46fa12.  if v7 != 0 then goto L46fa1e;
  #L46fa16.  call `ackSettings`(v6) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.ackSettings:()V` @kind interface;
  #L46fa1c.  return @kind void;
  #L46fa1e.  v6:= new `java.lang.Object`[v0];
  #L46fa22.  v7:= "FRAME_SIZE_ERROR ack frame should be empty!" @kind object;
  #L46fa26.  call temp:= `ioException`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46fa2c.  v6:= temp @kind object;
  #L46fa2e.  throw v6;
  #L46fa30.  v8:= v7 %% 6;
  #L46fa34.  if v8 != 0 then goto L46fae8;
  #L46fa38.  v8:= new `okhttp3.internal.http2.Settings`;
  #L46fa3c.  call `<init>`(v8) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @kind direct;
  #L46fa42.  v1:= 0I;
  #L46fa44.  if v1 >= v7 then goto L46fae0;
  #L46fa48.  v2:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46fa4c.  call temp:= `readShort`(v2) @signature `Lokio/BufferedSource;.readShort:()S` @kind interface;
  #L46fa52.  v2:= temp;
  #L46fa54.  v3:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46fa58.  call temp:= `readInt`(v3) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L46fa5e.  v3:= temp;
  #L46fa60.  goto L46fb1c;
  #L46fa66.  goto L46fad4;
  #L46fa68.  v4:= 16384I;
  #L46fa6c.  if v3 < v4 then goto L46fa7c;
  #L46fa70.  v4:= 16777215I;
  #L46fa76.  if v3 > v4 then goto L46fa7c;
  #L46fa7a.  goto L46fad4;
  #L46fa7c.  v6:= new `java.lang.Object`[v9];
  #L46fa80.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46fa86.  v7:= temp @kind object;
  #L46fa88.  v6[v0]:= v7 @kind object;
  #L46fa8c.  v7:= "PROTOCOL_ERROR SETTINGS_MAX_FRAME_SIZE: %s" @kind object;
  #L46fa90.  call temp:= `ioException`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46fa96.  v6:= temp @kind object;
  #L46fa98.  throw v6;
  #L46fa9a.  v2:= 7I;
  #L46fa9c.  if v3 < 0 then goto L46faa2;
  #L46faa0.  goto L46fad4;
  #L46faa2.  v6:= new `java.lang.Object`[v0];
  #L46faa6.  v7:= "PROTOCOL_ERROR SETTINGS_INITIAL_WINDOW_SIZE > 2^31 - 1" @kind object;
  #L46faaa.  call temp:= `ioException`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46fab0.  v6:= temp @kind object;
  #L46fab2.  throw v6;
  #L46fab4.  v2:= 4I;
  #L46fab6.  goto L46fad4;
  #L46fab8.  if v3 == 0 then goto L46fad4;
  #L46fabc.  if v3 != v9 then goto L46fac2;
  #L46fac0.  goto L46fad4;
  #L46fac2.  v6:= new `java.lang.Object`[v0];
  #L46fac6.  v7:= "PROTOCOL_ERROR SETTINGS_ENABLE_PUSH != 0 or 1" @kind object;
  #L46faca.  call temp:= `ioException`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46fad0.  v6:= temp @kind object;
  #L46fad2.  throw v6;
  #L46fad4.  call temp:= `set`(v8, v2, v3) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L46fada.  v1:= v1 + 6;
  #L46fade.  goto L46fa44;
  #L46fae0.  call `settings`(v6, v0, v8) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.settings:(ZLokhttp3/internal/http2/Settings;)V` @kind interface;
  #L46fae6.  return @kind void;
  #L46fae8.  v6:= new `java.lang.Object`[v9];
  #L46faec.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46faf2.  v7:= temp @kind object;
  #L46faf4.  v6[v0]:= v7 @kind object;
  #L46faf8.  v7:= "TYPE_SETTINGS length %% 6 != 0: %s" @kind object;
  #L46fafc.  call temp:= `ioException`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46fb02.  v6:= temp @kind object;
  #L46fb04.  throw v6;
  #L46fb06.  v6:= new `java.lang.Object`[v0];
  #L46fb0a.  v7:= "TYPE_SETTINGS streamId != 0" @kind object;
  #L46fb0e.  call temp:= `ioException`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46fb14.  v6:= temp @kind object;
  #L46fb16.  goto L46fb1a;
  #L46fb18.  throw v6;
  #L46fb1a.  goto L46fb18;
  #L46fb1c.  switch v2
                  | 1 => goto L46fad4
                  | 2 => goto L46fab8
                  | 3 => goto L46fab4
                  | 4 => goto L46fa9a
                  | 5 => goto L46fa68
                  | 6 => goto L46fad4
                  | else => goto L46fa66;
}
procedure `void` `readWindowUpdate`(`okhttp3.internal.http2.Http2Reader` v5 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v6 @kind object, `int` v7 , `byte` v8 , `int` v9 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readWindowUpdate:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46fb4c.  v8:= 0I;
  #L46fb4e.  v0:= 1I;
  #L46fb50.  v1:= 4I;
  #L46fb52.  if v7 != v1 then goto L46fb9e;
  #L46fb56.  v7:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46fb5a.  call temp:= `readInt`(v7) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L46fb60.  v7:= temp;
  #L46fb62.  v1:= (`long`) v7 @kind i2l;
  #L46fb64.  v3:= 2147483647L;
  #L46fb6a.  v1:= v1 ^& v3 @kind long;
  #L46fb6c.  v3:= 0L;
  #L46fb70.  v7:= lcmp(v1, v3);
  #L46fb74.  if v7 == 0 then goto L46fb80;
  #L46fb78.  call `windowUpdate`(v6, v9, v1) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.windowUpdate:(IJ)V` @kind interface;
  #L46fb7e.  return @kind void;
  #L46fb80.  v6:= new `java.lang.Object`[v0];
  #L46fb84.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L46fb8a.  v7:= temp @kind object;
  #L46fb8c.  v6[v8]:= v7 @kind object;
  #L46fb90.  v7:= "windowSizeIncrement was 0" @kind object;
  #L46fb94.  call temp:= `ioException`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46fb9a.  v6:= temp @kind object;
  #L46fb9c.  throw v6;
  #L46fb9e.  v6:= new `java.lang.Object`[v0];
  #L46fba2.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46fba8.  v7:= temp @kind object;
  #L46fbaa.  v6[v8]:= v7 @kind object;
  #L46fbae.  v7:= "TYPE_WINDOW_UPDATE length !=4: %s" @kind object;
  #L46fbb2.  call temp:= `ioException`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46fbb8.  v6:= temp @kind object;
  #L46fbba.  throw v6;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Reader` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Reader;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46f544.  v0:= v1.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f548.  call `close`(v0) @signature `Lokio/BufferedSource;.close:()V` @kind interface;
  #L46f54e.  return @kind void;
}
procedure `boolean` `nextFrame`(`okhttp3.internal.http2.Http2Reader` v6 @kind this, `boolean` v7 , `okhttp3.internal.http2.Http2Reader$Handler` v8 @kind object) @signature `Lokhttp3/internal/http2/Http2Reader;.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L46f278.  v0:= 0I;
  #L46f27a.  v1:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f27e.  v2:= 9L;
  #L46f282.  call `require`(v1, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L46f288.  v1:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f28c.  call temp:= `readMedium`(v1) @signature `Lokhttp3/internal/http2/Http2Reader;.readMedium:(Lokio/BufferedSource;)I` @kind static;
  #L46f292.  v1:= temp;
  #L46f294.  v2:= 1I;
  #L46f296.  if v1 < 0 then goto L46f386;
  #L46f29a.  v3:= 16384I;
  #L46f29e.  if v1 > v3 then goto L46f386;
  #L46f2a2.  v3:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f2a6.  call temp:= `readByte`(v3) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L46f2ac.  v3:= temp;
  #L46f2ae.  v3:= v3 ^& 255;
  #L46f2b2.  v3:= (`byte`) v3 @kind i2b;
  #L46f2b4.  if v7 == 0 then goto L46f2de;
  #L46f2b8.  v7:= 4I;
  #L46f2ba.  if v3 != v7 then goto L46f2c0;
  #L46f2be.  goto L46f2de;
  #L46f2c0.  v7:= new `java.lang.Object`[v2];
  #L46f2c4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L46f2ca.  v8:= temp @kind object;
  #L46f2cc.  v7[v0]:= v8 @kind object;
  #L46f2d0.  v8:= "Expected a SETTINGS frame but was %s" @kind object;
  #L46f2d4.  call temp:= `ioException`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f2da.  v7:= temp @kind object;
  #L46f2dc.  throw v7;
  #L46f2de.  v7:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f2e2.  call temp:= `readByte`(v7) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L46f2e8.  v7:= temp;
  #L46f2ea.  v7:= v7 ^& 255;
  #L46f2ee.  v7:= (`byte`) v7 @kind i2b;
  #L46f2f0.  v0:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f2f4.  call temp:= `readInt`(v0) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L46f2fa.  v0:= temp;
  #L46f2fc.  v4:= 2147483647I;
  #L46f302.  v0:= v0 ^& v4 @kind int;
  #L46f304.  v4:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L46f308.  v5:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L46f30c.  call temp:= `isLoggable`(v4, v5) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L46f312.  v4:= temp;
  #L46f314.  if v4 == 0 then goto L46f32a;
  #L46f318.  v4:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L46f31c.  call temp:= `frameLog`(v2, v0, v1, v3, v7) @signature `Lokhttp3/internal/http2/Http2;.frameLog:(ZIIBB)Ljava/lang/String;` @kind static;
  #L46f322.  v5:= temp @kind object;
  #L46f324.  call `fine`(v4, v5) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L46f32a.  goto L46f3a8;
  #L46f330.  v7:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f334.  v0:= (`long`) v1 @kind i2l;
  #L46f336.  call `skip`(v7, v0) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L46f33c.  goto L46f384;
  #L46f33e.  call `readWindowUpdate`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readWindowUpdate:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L46f344.  goto L46f384;
  #L46f346.  call `readGoAway`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readGoAway:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L46f34c.  goto L46f384;
  #L46f34e.  call `readPing`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readPing:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L46f354.  goto L46f384;
  #L46f356.  call `readPushPromise`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readPushPromise:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L46f35c.  goto L46f384;
  #L46f35e.  call `readSettings`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readSettings:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L46f364.  goto L46f384;
  #L46f366.  call `readRstStream`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readRstStream:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L46f36c.  goto L46f384;
  #L46f36e.  call `readPriority`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L46f374.  goto L46f384;
  #L46f376.  call `readHeaders`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaders:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L46f37c.  goto L46f384;
  #L46f37e.  call `readData`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readData:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L46f384.  return v2;
  #L46f386.  v7:= new `java.lang.Object`[v2];
  #L46f38a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46f390.  v8:= temp @kind object;
  #L46f392.  v7[v0]:= v8 @kind object;
  #L46f396.  v8:= "FRAME_SIZE_ERROR: %s" @kind object;
  #L46f39a.  call temp:= `ioException`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f3a0.  v7:= temp @kind object;
  #L46f3a2.  throw v7;
  #L46f3a4.  return v0;
  #L46f3a6.  
  #L46f3a8.  switch v3
                  | 0 => goto L46f37e
                  | 1 => goto L46f376
                  | 2 => goto L46f36e
                  | 3 => goto L46f366
                  | 4 => goto L46f35e
                  | 5 => goto L46f356
                  | 6 => goto L46f34e
                  | 7 => goto L46f346
                  | 8 => goto L46f33e
                  | else => goto L46f330;
  catch `java.io.IOException` @[L46f27a..L46f288] goto L46f3a4;
}
procedure `void` `readConnectionPreface`(`okhttp3.internal.http2.Http2Reader` v5 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v6 @kind object) @signature `Lokhttp3/internal/http2/Http2Reader;.readConnectionPreface:(Lokhttp3/internal/http2/Http2Reader$Handler;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46f560.  v0:= v5.`okhttp3.internal.http2.Http2Reader.client` @type ^`boolean` @kind boolean;
  #L46f564.  v1:= 0I;
  #L46f566.  v2:= 1I;
  #L46f568.  if v0 == 0 then goto L46f58c;
  #L46f56c.  call temp:= `nextFrame`(v5, v2, v6) @signature `Lokhttp3/internal/http2/Http2Reader;.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z` @kind virtual;
  #L46f572.  v6:= temp;
  #L46f574.  if v6 == 0 then goto L46f57a;
  #L46f578.  goto L46f5f0;
  #L46f57a.  v6:= new `java.lang.Object`[v1];
  #L46f57e.  v0:= "Required SETTINGS preface not received" @kind object;
  #L46f582.  call temp:= `ioException`(v0, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f588.  v6:= temp @kind object;
  #L46f58a.  throw v6;
  #L46f58c.  v6:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L46f590.  v0:= `@@okhttp3.internal.http2.Http2.CONNECTION_PREFACE` @type ^`okio.ByteString` @kind object;
  #L46f594.  call temp:= `size`(v0) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L46f59a.  v0:= temp;
  #L46f59c.  v3:= (`long`) v0 @kind i2l;
  #L46f59e.  call temp:= `readByteString`(v6, v3) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L46f5a4.  v6:= temp @kind object;
  #L46f5a6.  v0:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L46f5aa.  v3:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L46f5ae.  call temp:= `isLoggable`(v0, v3) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L46f5b4.  v0:= temp;
  #L46f5b6.  if v0 == 0 then goto L46f5e0;
  #L46f5ba.  v0:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L46f5be.  v3:= new `java.lang.Object`[v2];
  #L46f5c2.  call temp:= `hex`(v6) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L46f5c8.  v4:= temp @kind object;
  #L46f5ca.  v3[v1]:= v4 @kind object;
  #L46f5ce.  v4:= "<< CONNECTION %s" @kind object;
  #L46f5d2.  call temp:= `format`(v4, v3) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L46f5d8.  v3:= temp @kind object;
  #L46f5da.  call `fine`(v0, v3) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L46f5e0.  v0:= `@@okhttp3.internal.http2.Http2.CONNECTION_PREFACE` @type ^`okio.ByteString` @kind object;
  #L46f5e4.  call temp:= `equals`(v0, v6) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L46f5ea.  v0:= temp;
  #L46f5ec.  if v0 == 0 then goto L46f5f2;
  #L46f5f0.  return @kind void;
  #L46f5f2.  v0:= new `java.lang.Object`[v2];
  #L46f5f6.  call temp:= `utf8`(v6) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L46f5fc.  v6:= temp @kind object;
  #L46f5fe.  v0[v1]:= v6 @kind object;
  #L46f602.  v6:= "Expected a connection header but was %s" @kind object;
  #L46f606.  call temp:= `ioException`(v6, v0) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L46f60c.  v6:= temp @kind object;
  #L46f60e.  throw v6;
}
