record `okhttp3.internal.http2.Settings` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.Settings.set` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.http2.Settings.values` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Settings.COUNT` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.DEFAULT_INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.ENABLE_PUSH` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.HEADER_TABLE_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_CONCURRENT_STREAMS` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_FRAME_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_HEADER_LIST_SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L47250c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L472512.  v0:= 10I;
  #L472516.  v0:= new `int`[v0];
  #L47251a.  v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] := v0 @kind object;
  #L47251e.  return @kind void;
}
procedure `void` `clear`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.clear:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L472530.  v0:= 0I;
  #L472532.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v0;
  #L472536.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L47253a.  call `fill`(v1, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L472540.  return @kind void;
}
procedure `int` `get`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @AccessFlag  {
    temp;
    v0;

  #L4723c8.  v0:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L4723cc.  v2:= v0[v2];
  #L4723d0.  return v2;
}
procedure `boolean` `getEnablePush`(`okhttp3.internal.http2.Settings` v3 @kind this, `boolean` v4 ) @signature `Lokhttp3/internal/http2/Settings;.getEnablePush:(Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L472360.  v0:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L472364.  v0:= v0 ^& 4;
  #L472368.  v1:= 0I;
  #L47236a.  v2:= 1I;
  #L47236c.  if v0 == 0 then goto L47237c;
  #L472370.  v4:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L472374.  v0:= 2I;
  #L472376.  v4:= v4[v0];
  #L47237a.  goto L472386;
  #L47237c.  if v4 == 0 then goto L472384;
  #L472380.  v4:= 1I;
  #L472382.  goto L472386;
  #L472384.  v4:= 0I;
  #L472386.  if v4 != v2 then goto L47238c;
  #L47238a.  v1:= 1I;
  #L47238c.  return v1;
}
procedure `int` `getHeaderTableSize`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4723e4.  v0:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L4723e8.  v0:= v0 ^& 2;
  #L4723ec.  if v0 == 0 then goto L4723fc;
  #L4723f0.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L4723f4.  v1:= 1I;
  #L4723f6.  v0:= v0[v1];
  #L4723fa.  goto L4723fe;
  #L4723fc.  v0:= -1I;
  #L4723fe.  return v0;
}
procedure `int` `getInitialWindowSize`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L472410.  v0:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L472414.  v0:= v0 ^& 128;
  #L472418.  if v0 == 0 then goto L472428;
  #L47241c.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L472420.  v1:= 7I;
  #L472422.  v0:= v0[v1];
  #L472426.  goto L47242e;
  #L472428.  v0:= 65535I;
  #L47242e.  return v0;
}
procedure `int` `getMaxConcurrentStreams`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxConcurrentStreams:(I)I` @AccessFlag  {
    temp;
    v0;

  #L472440.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L472444.  v0:= v0 ^& 16;
  #L472448.  if v0 == 0 then goto L472456;
  #L47244c.  v2:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L472450.  v0:= 4I;
  #L472452.  v2:= v2[v0];
  #L472456.  return v2;
}
procedure `int` `getMaxFrameSize`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxFrameSize:(I)I` @AccessFlag  {
    temp;
    v0;

  #L472468.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L47246c.  v0:= v0 ^& 32;
  #L472470.  if v0 == 0 then goto L47247e;
  #L472474.  v2:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L472478.  v0:= 5I;
  #L47247a.  v2:= v2[v0];
  #L47247e.  return v2;
}
procedure `int` `getMaxHeaderListSize`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxHeaderListSize:(I)I` @AccessFlag  {
    temp;
    v0;

  #L472490.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L472494.  v0:= v0 ^& 64;
  #L472498.  if v0 == 0 then goto L4724a6;
  #L47249c.  v2:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L4724a0.  v0:= 6I;
  #L4724a2.  v2:= v2[v0];
  #L4724a6.  return v2;
}
procedure `boolean` `isSet`(`okhttp3.internal.http2.Settings` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4723a0.  v0:= 1I;
  #L4723a2.  v3:= v0 ^< v3 @kind int;
  #L4723a6.  v1:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L4723aa.  v3:= v3 ^& v1 @kind int;
  #L4723ac.  if v3 == 0 then goto L4723b2;
  #L4723b0.  goto L4723b4;
  #L4723b2.  v0:= 0I;
  #L4723b4.  return v0;
}
procedure `void` `merge`(`okhttp3.internal.http2.Settings` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L472554.  v0:= 0I;
  #L472556.  v1:= 10I;
  #L47255a.  if v0 >= v1 then goto L472580;
  #L47255e.  call temp:= `isSet`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @kind virtual;
  #L472564.  v1:= temp;
  #L472566.  if v1 != 0 then goto L47256c;
  #L47256a.  goto L47257a;
  #L47256c.  call temp:= `get`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @kind virtual;
  #L472572.  v1:= temp;
  #L472574.  call temp:= `set`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L47257a.  v0:= v0 + 1;
  #L47257e.  goto L472556;
  #L472580.  return @kind void;
}
procedure `okhttp3.internal.http2.Settings` `set`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4724d8.  if v4 < 0 then goto L4724fa;
  #L4724dc.  v0:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L4724e0.  v1:= length @variable v0;
  #L4724e2.  if v4 < v1 then goto L4724e8;
  #L4724e6.  goto L4724fa;
  #L4724e8.  v1:= 1I;
  #L4724ea.  v1:= v1 ^< v4 @kind int;
  #L4724ec.  v2:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L4724f0.  v1:= v1 ^| v2 @kind int;
  #L4724f2.  v3.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L4724f6.  v0[v4]:= v5;
  #L4724fa.  return v3 @kind object;
}
procedure `int` `size`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L4724b8.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L4724bc.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L4724c2.  v0:= temp;
  #L4724c4.  return v0;
}
