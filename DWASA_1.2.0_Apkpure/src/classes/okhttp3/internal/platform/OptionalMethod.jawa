record `okhttp3.internal.platform.OptionalMethod` @kind class @AccessFlag  {
  `java.lang.String` `okhttp3.internal.platform.OptionalMethod.methodName` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `okhttp3.internal.platform.OptionalMethod.methodParams` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `okhttp3.internal.platform.OptionalMethod.returnType` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.platform.OptionalMethod` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4739e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4739e6.  v0.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` := v1 @kind object;
  #L4739ea.  v0.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` := v2 @kind object;
  #L4739ee.  v0.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] := v3 @kind object;
  #L4739f2.  return @kind void;
}
procedure `java.lang.reflect.Method` `getMethod`(`okhttp3.internal.platform.OptionalMethod` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L473948.  v0:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L47394c.  v1:= 0I;
  #L47394e.  if v0 == 0 then goto L473982;
  #L473952.  v2:= v3.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] @kind object;
  #L473956.  call temp:= `getPublicMethod`(v4, v0, v2) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L47395c.  v4:= temp @kind object;
  #L47395e.  if v4 == 0 then goto L473980;
  #L473962.  v0:= v3.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L473966.  if v0 == 0 then goto L473980;
  #L47396a.  call temp:= `getReturnType`(v4) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L473970.  v2:= temp @kind object;
  #L473972.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L473978.  v0:= temp;
  #L47397a.  if v0 != 0 then goto L473980;
  #L47397e.  goto L473982;
  #L473980.  v1:= v4 @kind object;
  #L473982.  return v1 @kind object;
}
procedure `java.lang.reflect.Method` `getPublicMethod`(`java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L473994.  v0:= 0I;
  #L473996.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L47399c.  v1:= temp @kind object;
  #L47399e.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L4739a4.  v2:= temp;
  #L4739a6.  v2:= v2 ^& 1;
  #L4739aa.  if v2 != 0 then goto L4739b0;
  #L4739ae.  v1:= v0 @kind object;
  #L4739b0.  return v1 @kind object;
  catch `java.lang.NoSuchMethodException` @[L473996..L47399e] goto L4739ae;
  catch `java.lang.NoSuchMethodException` @[L47399e..L4739a6] goto L4739b0;
}
procedure `java.lang.Object` `invoke`(`okhttp3.internal.platform.OptionalMethod` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47379c.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4737a2.  v0:= temp @kind object;
  #L4737a4.  call temp:= `getMethod`(v3, v0) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L4737aa.  v0:= temp @kind object;
  #L4737ac.  if v0 == 0 then goto L4737f0;
  #L4737b0.  call temp:= `invoke`(v0, v4, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4737b6.  v4:= temp @kind object;
  #L4737b8.  return v4 @kind object;
  #L4737ba.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L4737bc.  v5:= new `java.lang.AssertionError`;
  #L4737c0.  v1:= new `java.lang.StringBuilder`;
  #L4737c4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4737ca.  v2:= "Unexpectedly could not call: " @kind object;
  #L4737ce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4737d4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4737da.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4737e0.  v0:= temp @kind object;
  #L4737e2.  call `<init>`(v5, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4737e8.  call temp:= `initCause`(v5, v4) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4737ee.  throw v5;
  #L4737f0.  v5:= new `java.lang.AssertionError`;
  #L4737f4.  v0:= new `java.lang.StringBuilder`;
  #L4737f8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4737fe.  v1:= "Method " @kind object;
  #L473802.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L473808.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L47380c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L473812.  v1:= " not supported for object " @kind object;
  #L473816.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47381c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L473822.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L473828.  v4:= temp @kind object;
  #L47382a.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L473830.  throw v5;
  catch `java.lang.IllegalAccessException` @[L4737b0..L4737b8] goto L4737ba;
}
procedure `java.lang.Object` `invokeOptional`(`okhttp3.internal.platform.OptionalMethod` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L473854.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L47385a.  v0:= temp @kind object;
  #L47385c.  call temp:= `getMethod`(v2, v0) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L473862.  v0:= temp @kind object;
  #L473864.  v1:= 0I;
  #L473866.  if v0 != 0 then goto L47386c;
  #L47386a.  return v1 @kind object;
  #L47386c.  call temp:= `invoke`(v0, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L473872.  v3:= temp @kind object;
  #L473874.  return v3 @kind object;
  #L473876.  return v1 @kind object;
  catch `java.lang.IllegalAccessException` @[L47386c..L473874] goto L473876;
}
procedure `java.lang.Object` `invokeOptionalWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptionalWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473898.  call temp:= `invokeOptional`(v1, v2, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L47389e.  v2:= temp @kind object;
  #L4738a0.  return v2 @kind object;
  #L4738a2.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L4738a4.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L4738aa.  v2:= temp @kind object;
  #L4738ac.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L4738b0.  if v3 == 0 then goto L4738ba;
  #L4738b4.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L4738b8.  throw v2;
  #L4738ba.  v3:= new `java.lang.AssertionError`;
  #L4738be.  v0:= "Unexpected exception" @kind object;
  #L4738c2.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4738c8.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4738ce.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L473898..L4738a0] goto L4738a2;
}
procedure `java.lang.Object` `invokeWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4738f0.  call temp:= `invoke`(v1, v2, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4738f6.  v2:= temp @kind object;
  #L4738f8.  return v2 @kind object;
  #L4738fa.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L4738fc.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L473902.  v2:= temp @kind object;
  #L473904.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L473908.  if v3 == 0 then goto L473912;
  #L47390c.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L473910.  throw v2;
  #L473912.  v3:= new `java.lang.AssertionError`;
  #L473916.  v0:= "Unexpected exception" @kind object;
  #L47391a.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L473920.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L473926.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L4738f0..L4738f8] goto L4738fa;
}
procedure `boolean` `isSupported`(`okhttp3.internal.platform.OptionalMethod` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.isSupported:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L473770.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L473776.  v1:= temp @kind object;
  #L473778.  call temp:= `getMethod`(v0, v1) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L47377e.  v1:= temp @kind object;
  #L473780.  if v1 == 0 then goto L473788;
  #L473784.  v1:= 1I;
  #L473786.  goto L47378a;
  #L473788.  v1:= 0I;
  #L47378a.  return v1;
}
