record `okhttp3.internal.platform.AndroidPlatform` @kind class @AccessFlag  extends `okhttp3.internal.platform.Platform` @kind class {
  `okhttp3.internal.platform.AndroidPlatform$CloseGuard` `okhttp3.internal.platform.AndroidPlatform.closeGuard` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.platform.OptionalMethod` `okhttp3.internal.platform.AndroidPlatform.getAlpnSelectedProtocol` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.platform.OptionalMethod` `okhttp3.internal.platform.AndroidPlatform.setAlpnProtocols` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.platform.OptionalMethod` `okhttp3.internal.platform.AndroidPlatform.setHostname` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.platform.OptionalMethod` `okhttp3.internal.platform.AndroidPlatform.setUseSessionTickets` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `okhttp3.internal.platform.AndroidPlatform.sslParametersClass` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.platform.AndroidPlatform.MAX_LOG_LENGTH` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.platform.AndroidPlatform` v1 @kind this, `java.lang.Class` v2 @kind object, `okhttp3.internal.platform.OptionalMethod` v3 @kind object, `okhttp3.internal.platform.OptionalMethod` v4 @kind object, `okhttp3.internal.platform.OptionalMethod` v5 @kind object, `okhttp3.internal.platform.OptionalMethod` v6 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.<init>:(Ljava/lang/Class;Lokhttp3/internal/platform/OptionalMethod;Lokhttp3/internal/platform/OptionalMethod;Lokhttp3/internal/platform/OptionalMethod;Lokhttp3/internal/platform/OptionalMethod;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L472fcc.  call `<init>`(v1) @signature `Lokhttp3/internal/platform/Platform;.<init>:()V` @kind direct;
  #L472fd2.  call temp:= `get`() @signature `Lokhttp3/internal/platform/AndroidPlatform$CloseGuard;.get:()Lokhttp3/internal/platform/AndroidPlatform$CloseGuard;` @kind static;
  #L472fd8.  v0:= temp @kind object;
  #L472fda.  v1.`okhttp3.internal.platform.AndroidPlatform.closeGuard` @type ^`okhttp3.internal.platform.AndroidPlatform$CloseGuard` := v0 @kind object;
  #L472fde.  v1.`okhttp3.internal.platform.AndroidPlatform.sslParametersClass` @type ^`java.lang.Class` := v2 @kind object;
  #L472fe2.  v1.`okhttp3.internal.platform.AndroidPlatform.setUseSessionTickets` @type ^`okhttp3.internal.platform.OptionalMethod` := v3 @kind object;
  #L472fe6.  v1.`okhttp3.internal.platform.AndroidPlatform.setHostname` @type ^`okhttp3.internal.platform.OptionalMethod` := v4 @kind object;
  #L472fea.  v1.`okhttp3.internal.platform.AndroidPlatform.getAlpnSelectedProtocol` @type ^`okhttp3.internal.platform.OptionalMethod` := v5 @kind object;
  #L472fee.  v1.`okhttp3.internal.platform.AndroidPlatform.setAlpnProtocols` @type ^`okhttp3.internal.platform.OptionalMethod` := v6 @kind object;
  #L472ff2.  return @kind void;
}
procedure `boolean` `api23IsCleartextTrafficPermitted`(`okhttp3.internal.platform.AndroidPlatform` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.Class` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.api23IsCleartextTrafficPermitted:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L472b6c.  v0:= "isCleartextTrafficPermitted" @kind object;
  #L472b70.  v1:= 0I;
  #L472b72.  v2:= new `java.lang.Class`[v1];
  #L472b76.  call temp:= `getMethod`(v5, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L472b7c.  v5:= temp @kind object;
  #L472b7e.  v0:= new `java.lang.Object`[v1];
  #L472b82.  call temp:= `invoke`(v5, v6, v0) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L472b88.  v5:= temp @kind object;
  #L472b8a.  v5:= (`java.lang.Boolean`) v5 @kind object;
  #L472b8e.  call temp:= `booleanValue`(v5) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L472b94.  v4:= temp;
  #L472b96.  return v4;
  #L472b98.  call temp:= `isCleartextTrafficPermitted`(v3, v4) @signature `Lokhttp3/internal/platform/Platform;.isCleartextTrafficPermitted:(Ljava/lang/String;)Z` @kind super;
  #L472b9e.  v4:= temp;
  #L472ba0.  return v4;
  catch `java.lang.NoSuchMethodException` @[L472b6c..L472b96] goto L472b98;
}
procedure `boolean` `api24IsCleartextTrafficPermitted`(`okhttp3.internal.platform.AndroidPlatform` v5 @kind this, `java.lang.String` v6 @kind object, `java.lang.Class` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.api24IsCleartextTrafficPermitted:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L472bc4.  v0:= "isCleartextTrafficPermitted" @kind object;
  #L472bc8.  v1:= 1I;
  #L472bca.  v2:= new `java.lang.Class`[v1];
  #L472bce.  v3:= constclass @type ^`java.lang.String` @kind object;
  #L472bd2.  v4:= 0I;
  #L472bd4.  v2[v4]:= v3 @kind object;
  #L472bd8.  call temp:= `getMethod`(v7, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L472bde.  v0:= temp @kind object;
  #L472be0.  v1:= new `java.lang.Object`[v1];
  #L472be4.  v1[v4]:= v6 @kind object;
  #L472be8.  call temp:= `invoke`(v0, v8, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L472bee.  v0:= temp @kind object;
  #L472bf0.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L472bf4.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L472bfa.  v6:= temp;
  #L472bfc.  return v6;
  #L472bfe.  call temp:= `api23IsCleartextTrafficPermitted`(v5, v6, v7, v8) @signature `Lokhttp3/internal/platform/AndroidPlatform;.api23IsCleartextTrafficPermitted:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;)Z` @kind direct;
  #L472c04.  v6:= temp;
  #L472c06.  return v6;
  catch `java.lang.NoSuchMethodException` @[L472bc4..L472bfc] goto L472bfe;
}
procedure `okhttp3.internal.platform.Platform` `buildIfSupported`() @signature `Lokhttp3/internal/platform/AndroidPlatform;.buildIfSupported:()Lokhttp3/internal/platform/Platform;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L472dfc.  v0:= constclass @type ^`byte`[] @kind object;
  #L472e00.  v1:= 0I;
  #L472e02.  v2:= "com.android.org.conscrypt.SSLParametersImpl" @kind object;
  #L472e06.  call temp:= `forName`(v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L472e0c.  v2:= temp @kind object;
  #L472e0e.  v4:= v2 @kind object;
  #L472e10.  goto L472e20;
  #L472e12.  v2:= "org.apache.harmony.xnet.provider.jsse.SSLParametersImpl" @kind object;
  #L472e16.  call temp:= `forName`(v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L472e1c.  v2:= temp @kind object;
  #L472e1e.  goto L472e0e;
  #L472e20.  v5:= new `okhttp3.internal.platform.OptionalMethod`;
  #L472e24.  v2:= "setUseSessionTickets" @kind object;
  #L472e28.  v3:= 1I;
  #L472e2a.  v6:= new `java.lang.Class`[v3];
  #L472e2e.  v7:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L472e32.  v8:= 0I;
  #L472e34.  v6[v8]:= v7 @kind object;
  #L472e38.  call `<init>`(v5, v1, v2, v6) @signature `Lokhttp3/internal/platform/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L472e3e.  v6:= new `okhttp3.internal.platform.OptionalMethod`;
  #L472e42.  v2:= "setHostname" @kind object;
  #L472e46.  v7:= new `java.lang.Class`[v3];
  #L472e4a.  v9:= constclass @type ^`java.lang.String` @kind object;
  #L472e4e.  v7[v8]:= v9 @kind object;
  #L472e52.  call `<init>`(v6, v1, v2, v7) @signature `Lokhttp3/internal/platform/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L472e58.  call temp:= `supportsAlpn`() @signature `Lokhttp3/internal/platform/AndroidPlatform;.supportsAlpn:()Z` @kind static;
  #L472e5e.  v2:= temp;
  #L472e60.  if v2 == 0 then goto L472e92;
  #L472e64.  v2:= new `okhttp3.internal.platform.OptionalMethod`;
  #L472e68.  v7:= "getAlpnSelectedProtocol" @kind object;
  #L472e6c.  v9:= new `java.lang.Class`[v8];
  #L472e70.  call `<init>`(v2, v0, v7, v9) @signature `Lokhttp3/internal/platform/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L472e76.  v7:= new `okhttp3.internal.platform.OptionalMethod`;
  #L472e7a.  v9:= "setAlpnProtocols" @kind object;
  #L472e7e.  v3:= new `java.lang.Class`[v3];
  #L472e82.  v3[v8]:= v0 @kind object;
  #L472e86.  call `<init>`(v7, v1, v9, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L472e8c.  v8:= v7 @kind object;
  #L472e8e.  v7:= v2 @kind object;
  #L472e90.  goto L472e96;
  #L472e92.  v7:= v1 @kind object;
  #L472e94.  v8:= v7 @kind object;
  #L472e96.  v0:= new `okhttp3.internal.platform.AndroidPlatform`;
  #L472e9a.  v3:= v0 @kind object;
  #L472e9c.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Lokhttp3/internal/platform/AndroidPlatform;.<init>:(Ljava/lang/Class;Lokhttp3/internal/platform/OptionalMethod;Lokhttp3/internal/platform/OptionalMethod;Lokhttp3/internal/platform/OptionalMethod;Lokhttp3/internal/platform/OptionalMethod;)V` @kind direct;
  #L472ea2.  return v0 @kind object;
  #L472ea4.  return v1 @kind object;
  catch `java.lang.ClassNotFoundException` @[L472e02..L472e0e] goto L472e12;
  catch `java.lang.ClassNotFoundException` @[L472e12..L472ea2] goto L472ea4;
}
procedure `boolean` `supportsAlpn`() @signature `Lokhttp3/internal/platform/AndroidPlatform;.supportsAlpn:()Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L472cac.  v0:= "GMSCore_OpenSSL" @kind object;
  #L472cb0.  call temp:= `getProvider`(v0) @signature `Ljava/security/Security;.getProvider:(Ljava/lang/String;)Ljava/security/Provider;` @kind static;
  #L472cb6.  v0:= temp @kind object;
  #L472cb8.  v1:= 1I;
  #L472cba.  if v0 == 0 then goto L472cc0;
  #L472cbe.  return v1;
  #L472cc0.  v0:= "android.net.Network" @kind object;
  #L472cc4.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L472cca.  return v1;
  #L472ccc.  v0:= 0I;
  #L472cce.  return v0;
  catch `java.lang.ClassNotFoundException` @[L472cc0..L472cca] goto L472ccc;
}
procedure `okhttp3.internal.tls.CertificateChainCleaner` `buildCertificateChainCleaner`(`okhttp3.internal.platform.AndroidPlatform` v7 @kind this, `javax.net.ssl.X509TrustManager` v8 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.buildCertificateChainCleaner:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L472ed4.  v0:= "android.net.http.X509TrustManagerExtensions" @kind object;
  #L472ed8.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L472ede.  v0:= temp @kind object;
  #L472ee0.  v1:= 1I;
  #L472ee2.  v2:= new `java.lang.Class`[v1];
  #L472ee6.  v3:= constclass @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L472eea.  v4:= 0I;
  #L472eec.  v2[v4]:= v3 @kind object;
  #L472ef0.  call temp:= `getConstructor`(v0, v2) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L472ef6.  v2:= temp @kind object;
  #L472ef8.  v3:= new `java.lang.Object`[v1];
  #L472efc.  v3[v4]:= v8 @kind object;
  #L472f00.  call temp:= `newInstance`(v2, v3) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L472f06.  v2:= temp @kind object;
  #L472f08.  v3:= "checkServerTrusted" @kind object;
  #L472f0c.  v5:= 3I;
  #L472f0e.  v5:= new `java.lang.Class`[v5];
  #L472f12.  v6:= constclass @type ^`java.security.cert.X509Certificate`[] @kind object;
  #L472f16.  v5[v4]:= v6 @kind object;
  #L472f1a.  v4:= constclass @type ^`java.lang.String` @kind object;
  #L472f1e.  v5[v1]:= v4 @kind object;
  #L472f22.  v1:= 2I;
  #L472f24.  v4:= constclass @type ^`java.lang.String` @kind object;
  #L472f28.  v5[v1]:= v4 @kind object;
  #L472f2c.  call temp:= `getMethod`(v0, v3, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L472f32.  v0:= temp @kind object;
  #L472f34.  v1:= new `okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner`;
  #L472f38.  call `<init>`(v1, v2, v0) @signature `Lokhttp3/internal/platform/AndroidPlatform$AndroidCertificateChainCleaner;.<init>:(Ljava/lang/Object;Ljava/lang/reflect/Method;)V` @kind direct;
  #L472f3e.  return v1 @kind object;
  #L472f40.  call temp:= `buildCertificateChainCleaner`(v7, v8) @signature `Lokhttp3/internal/platform/Platform;.buildCertificateChainCleaner:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind super;
  #L472f46.  v8:= temp @kind object;
  #L472f48.  return v8 @kind object;
  catch `java.lang.Exception` @[L472ed4..L472f3e] goto L472f40;
}
procedure `okhttp3.internal.tls.TrustRootIndex` `buildTrustRootIndex`(`okhttp3.internal.platform.AndroidPlatform` v6 @kind this, `javax.net.ssl.X509TrustManager` v7 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.buildTrustRootIndex:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/TrustRootIndex;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L472f6c.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L472f72.  v0:= temp @kind object;
  #L472f74.  v1:= "findTrustAnchorByIssuerAndSignature" @kind object;
  #L472f78.  v2:= 1I;
  #L472f7a.  v3:= new `java.lang.Class`[v2];
  #L472f7e.  v4:= 0I;
  #L472f80.  v5:= constclass @type ^`java.security.cert.X509Certificate` @kind object;
  #L472f84.  v3[v4]:= v5 @kind object;
  #L472f88.  call temp:= `getDeclaredMethod`(v0, v1, v3) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L472f8e.  v0:= temp @kind object;
  #L472f90.  call `setAccessible`(v0, v2) @signature `Ljava/lang/reflect/Method;.setAccessible:(Z)V` @kind virtual;
  #L472f96.  v1:= new `okhttp3.internal.platform.AndroidPlatform$AndroidTrustRootIndex`;
  #L472f9a.  call `<init>`(v1, v7, v0) @signature `Lokhttp3/internal/platform/AndroidPlatform$AndroidTrustRootIndex;.<init>:(Ljavax/net/ssl/X509TrustManager;Ljava/lang/reflect/Method;)V` @kind direct;
  #L472fa0.  return v1 @kind object;
  #L472fa2.  call temp:= `buildTrustRootIndex`(v6, v7) @signature `Lokhttp3/internal/platform/Platform;.buildTrustRootIndex:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/TrustRootIndex;` @kind super;
  #L472fa8.  v7:= temp @kind object;
  #L472faa.  return v7 @kind object;
  catch `java.lang.NoSuchMethodException` @[L472f6c..L472fa0] goto L472fa2;
}
procedure `void` `configureTlsExtensions`(`okhttp3.internal.platform.AndroidPlatform` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object, `java.lang.String` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L473004.  v0:= 0I;
  #L473006.  v1:= 1I;
  #L473008.  if v7 == 0 then goto L473038;
  #L47300c.  v2:= v5.`okhttp3.internal.platform.AndroidPlatform.setUseSessionTickets` @type ^`okhttp3.internal.platform.OptionalMethod` @kind object;
  #L473010.  v3:= new `java.lang.Object`[v1];
  #L473014.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L47301a.  v4:= temp @kind object;
  #L47301c.  v3[v0]:= v4 @kind object;
  #L473020.  call temp:= `invokeOptionalWithoutCheckedException`(v2, v6, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptionalWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L473026.  v2:= v5.`okhttp3.internal.platform.AndroidPlatform.setHostname` @type ^`okhttp3.internal.platform.OptionalMethod` @kind object;
  #L47302a.  v3:= new `java.lang.Object`[v1];
  #L47302e.  v3[v0]:= v7 @kind object;
  #L473032.  call temp:= `invokeOptionalWithoutCheckedException`(v2, v6, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptionalWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L473038.  v7:= v5.`okhttp3.internal.platform.AndroidPlatform.setAlpnProtocols` @type ^`okhttp3.internal.platform.OptionalMethod` @kind object;
  #L47303c.  if v7 == 0 then goto L473066;
  #L473040.  call temp:= `isSupported`(v7, v6) @signature `Lokhttp3/internal/platform/OptionalMethod;.isSupported:(Ljava/lang/Object;)Z` @kind virtual;
  #L473046.  v7:= temp;
  #L473048.  if v7 == 0 then goto L473066;
  #L47304c.  v7:= new `java.lang.Object`[v1];
  #L473050.  call temp:= `concatLengthPrefixed`(v8) @signature `Lokhttp3/internal/platform/AndroidPlatform;.concatLengthPrefixed:(Ljava/util/List;)[B` @kind static;
  #L473056.  v8:= temp @kind object;
  #L473058.  v7[v0]:= v8 @kind object;
  #L47305c.  v8:= v5.`okhttp3.internal.platform.AndroidPlatform.setAlpnProtocols` @type ^`okhttp3.internal.platform.OptionalMethod` @kind object;
  #L473060.  call temp:= `invokeWithoutCheckedException`(v8, v6, v7) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L473066.  return @kind void;
}
procedure `void` `connectSocket`(`okhttp3.internal.platform.AndroidPlatform` v1 @kind this, `java.net.Socket` v2 @kind object, `java.net.InetSocketAddress` v3 @kind object, `int` v4 ) @signature `Lokhttp3/internal/platform/AndroidPlatform;.connectSocket:(Ljava/net/Socket;Ljava/net/InetSocketAddress;I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473078.  v0:= "Exception in connect" @kind object;
  #L47307c.  call `connect`(v2, v3, v4) @signature `Ljava/net/Socket;.connect:(Ljava/net/SocketAddress;I)V` @kind virtual;
  #L473082.  return @kind void;
  #L473084.  v2:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L473086.  v3:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L47308a.  v4:= 26I;
  #L47308e.  if v3 != v4 then goto L4730a4;
  #L473092.  v3:= new `java.io.IOException`;
  #L473096.  call `<init>`(v3, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47309c.  call temp:= `initCause`(v3, v2) @signature `Ljava/io/IOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4730a2.  throw v3;
  #L4730a4.  throw v2;
  #L4730a6.  v2:= Exception @type ^`java.lang.SecurityException` @kind object;
  #L4730a8.  v3:= new `java.io.IOException`;
  #L4730ac.  call `<init>`(v3, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4730b2.  call temp:= `initCause`(v3, v2) @signature `Ljava/io/IOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4730b8.  throw v3;
  #L4730ba.  v2:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L4730bc.  call temp:= `isAndroidGetsocknameError`(v2) @signature `Lokhttp3/internal/Util;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @kind static;
  #L4730c2.  v3:= temp;
  #L4730c4.  if v3 == 0 then goto L4730d4;
  #L4730c8.  v3:= new `java.io.IOException`;
  #L4730cc.  call `<init>`(v3, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4730d2.  throw v3;
  #L4730d4.  throw v2;
  catch `java.lang.AssertionError` @[L47307c..L473082] goto L4730ba;
  catch `java.lang.SecurityException` @[L47307c..L473082] goto L4730a6;
  catch `java.lang.ClassCastException` @[L47307c..L473082] goto L473084;
}
procedure `java.lang.String` `getSelectedProtocol`(`okhttp3.internal.platform.AndroidPlatform` v3 @kind this, `javax.net.ssl.SSLSocket` v4 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L472d10.  v0:= v3.`okhttp3.internal.platform.AndroidPlatform.getAlpnSelectedProtocol` @type ^`okhttp3.internal.platform.OptionalMethod` @kind object;
  #L472d14.  v1:= 0I;
  #L472d16.  if v0 != 0 then goto L472d1c;
  #L472d1a.  return v1 @kind object;
  #L472d1c.  call temp:= `isSupported`(v0, v4) @signature `Lokhttp3/internal/platform/OptionalMethod;.isSupported:(Ljava/lang/Object;)Z` @kind virtual;
  #L472d22.  v0:= temp;
  #L472d24.  if v0 != 0 then goto L472d2a;
  #L472d28.  return v1 @kind object;
  #L472d2a.  v0:= v3.`okhttp3.internal.platform.AndroidPlatform.getAlpnSelectedProtocol` @type ^`okhttp3.internal.platform.OptionalMethod` @kind object;
  #L472d2e.  v2:= 0I;
  #L472d30.  v2:= new `java.lang.Object`[v2];
  #L472d34.  call temp:= `invokeWithoutCheckedException`(v0, v4, v2) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L472d3a.  v4:= temp @kind object;
  #L472d3c.  v4:= (`byte`[]) v4 @kind object;
  #L472d40.  if v4 == 0 then goto L472d52;
  #L472d44.  v1:= new `java.lang.String`;
  #L472d48.  v0:= `@@okhttp3.internal.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L472d4c.  call `<init>`(v1, v4, v0) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L472d52.  return v1 @kind object;
}
procedure `java.lang.Object` `getStackTraceForCloseable`(`okhttp3.internal.platform.AndroidPlatform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472cf0.  v0:= v1.`okhttp3.internal.platform.AndroidPlatform.closeGuard` @type ^`okhttp3.internal.platform.AndroidPlatform$CloseGuard` @kind object;
  #L472cf4.  call temp:= `createAndOpen`(v0, v2) @signature `Lokhttp3/internal/platform/AndroidPlatform$CloseGuard;.createAndOpen:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L472cfa.  v2:= temp @kind object;
  #L472cfc.  return v2 @kind object;
}
procedure `boolean` `isCleartextTrafficPermitted`(`okhttp3.internal.platform.AndroidPlatform` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.isCleartextTrafficPermitted:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L472c28.  v0:= "android.security.NetworkSecurityPolicy" @kind object;
  #L472c2c.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L472c32.  v0:= temp @kind object;
  #L472c34.  v1:= "getInstance" @kind object;
  #L472c38.  v2:= 0I;
  #L472c3a.  v3:= new `java.lang.Class`[v2];
  #L472c3e.  call temp:= `getMethod`(v0, v1, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L472c44.  v1:= temp @kind object;
  #L472c46.  v3:= 0I;
  #L472c48.  v2:= new `java.lang.Object`[v2];
  #L472c4c.  call temp:= `invoke`(v1, v3, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L472c52.  v1:= temp @kind object;
  #L472c54.  call temp:= `api24IsCleartextTrafficPermitted`(v4, v5, v0, v1) @signature `Lokhttp3/internal/platform/AndroidPlatform;.api24IsCleartextTrafficPermitted:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;)Z` @kind direct;
  #L472c5a.  v5:= temp;
  #L472c5c.  return v5;
  #L472c5e.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L472c60.  goto L472c68;
  #L472c62.  v5:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L472c64.  goto L472c68;
  #L472c66.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L472c68.  v0:= "unable to determine cleartext support" @kind object;
  #L472c6c.  call temp:= `assertionError`(v0, v5) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L472c72.  v5:= temp @kind object;
  #L472c74.  throw v5;
  #L472c76.  call temp:= `isCleartextTrafficPermitted`(v4, v5) @signature `Lokhttp3/internal/platform/Platform;.isCleartextTrafficPermitted:(Ljava/lang/String;)Z` @kind super;
  #L472c7c.  v5:= temp;
  #L472c7e.  return v5;
  catch `java.lang.ClassNotFoundException` @[L472c28..L472c5c] goto L472c76;
  catch `java.lang.NoSuchMethodException` @[L472c28..L472c5c] goto L472c76;
  catch `java.lang.IllegalAccessException` @[L472c28..L472c5c] goto L472c66;
  catch `java.lang.IllegalArgumentException` @[L472c28..L472c5c] goto L472c62;
  catch `java.lang.reflect.InvocationTargetException` @[L472c28..L472c5c] goto L472c5e;
}
procedure `void` `log`(`okhttp3.internal.platform.AndroidPlatform` v5 @kind this, `int` v6 , `java.lang.String` v7 @kind object, `java.lang.Throwable` v8 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.log:(ILjava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4730fc.  v0:= 5I;
  #L4730fe.  if v6 != v0 then goto L473104;
  #L473102.  goto L473106;
  #L473104.  v0:= 3I;
  #L473106.  v6:= 10I;
  #L47310a.  if v8 == 0 then goto L47313a;
  #L47310e.  v1:= new `java.lang.StringBuilder`;
  #L473112.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L473118.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47311e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L473124.  call temp:= `getStackTraceString`(v8) @signature `Landroid/util/Log;.getStackTraceString:(Ljava/lang/Throwable;)Ljava/lang/String;` @kind static;
  #L47312a.  v7:= temp @kind object;
  #L47312c.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L473132.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L473138.  v7:= temp @kind object;
  #L47313a.  v8:= 0I;
  #L47313c.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L473142.  v1:= temp;
  #L473144.  if v8 >= v1 then goto L473186;
  #L473148.  call temp:= `indexOf`(v7, v6, v8) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L47314e.  v2:= temp;
  #L473150.  v3:= -1I;
  #L473152.  if v2 == v3 then goto L473158;
  #L473156.  goto L47315a;
  #L473158.  v2:= v1;
  #L47315a.  v3:= v8 + 4000;
  #L47315e.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L473164.  v3:= temp;
  #L473166.  call temp:= `substring`(v7, v8, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L47316c.  v8:= temp @kind object;
  #L47316e.  v4:= "OkHttp" @kind object;
  #L473172.  call temp:= `println`(v0, v4, v8) @signature `Landroid/util/Log;.println:(ILjava/lang/String;Ljava/lang/String;)I` @kind static;
  #L473178.  if v3 < v2 then goto L473182;
  #L47317c.  v8:= v3 + 1;
  #L473180.  goto L473144;
  #L473182.  v8:= v3;
  #L473184.  goto L47315a;
  #L473186.  return @kind void;
}
procedure `void` `logCloseableLeak`(`okhttp3.internal.platform.AndroidPlatform` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.logCloseableLeak:(Ljava/lang/String;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473198.  v0:= v1.`okhttp3.internal.platform.AndroidPlatform.closeGuard` @type ^`okhttp3.internal.platform.AndroidPlatform$CloseGuard` @kind object;
  #L47319c.  call temp:= `warnIfOpen`(v0, v3) @signature `Lokhttp3/internal/platform/AndroidPlatform$CloseGuard;.warnIfOpen:(Ljava/lang/Object;)Z` @kind virtual;
  #L4731a2.  v3:= temp;
  #L4731a4.  if v3 != 0 then goto L4731b2;
  #L4731a8.  v3:= 5I;
  #L4731aa.  v0:= 0I;
  #L4731ac.  call `log`(v1, v3, v2, v0) @signature `Lokhttp3/internal/platform/AndroidPlatform;.log:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L4731b2.  return @kind void;
}
procedure `javax.net.ssl.X509TrustManager` `trustManager`(`okhttp3.internal.platform.AndroidPlatform` v4 @kind this, `javax.net.ssl.SSLSocketFactory` v5 @kind object) @signature `Lokhttp3/internal/platform/AndroidPlatform;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L472d64.  v0:= v4.`okhttp3.internal.platform.AndroidPlatform.sslParametersClass` @type ^`java.lang.Class` @kind object;
  #L472d68.  v1:= "sslParameters" @kind object;
  #L472d6c.  call temp:= `readFieldOrNull`(v5, v0, v1) @signature `Lokhttp3/internal/platform/AndroidPlatform;.readFieldOrNull:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L472d72.  v0:= temp @kind object;
  #L472d74.  if v0 != 0 then goto L472daa;
  #L472d78.  v0:= "com.google.android.gms.org.conscrypt.SSLParametersImpl" @kind object;
  #L472d7c.  v2:= 0I;
  #L472d7e.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L472d84.  v3:= temp @kind object;
  #L472d86.  call temp:= `getClassLoader`(v3) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L472d8c.  v3:= temp @kind object;
  #L472d8e.  call temp:= `forName`(v0, v2, v3) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L472d94.  v0:= temp @kind object;
  #L472d96.  call temp:= `readFieldOrNull`(v5, v0, v1) @signature `Lokhttp3/internal/platform/AndroidPlatform;.readFieldOrNull:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L472d9c.  v0:= temp @kind object;
  #L472d9e.  goto L472daa;
  #L472da0.  call temp:= `trustManager`(v4, v5) @signature `Lokhttp3/internal/platform/Platform;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @kind super;
  #L472da6.  v5:= temp @kind object;
  #L472da8.  return v5 @kind object;
  #L472daa.  v5:= constclass @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L472dae.  v1:= "x509TrustManager" @kind object;
  #L472db2.  call temp:= `readFieldOrNull`(v0, v5, v1) @signature `Lokhttp3/internal/platform/AndroidPlatform;.readFieldOrNull:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L472db8.  v5:= temp @kind object;
  #L472dba.  v5:= (`javax.net.ssl.X509TrustManager`) v5 @kind object;
  #L472dbe.  if v5 == 0 then goto L472dc4;
  #L472dc2.  return v5 @kind object;
  #L472dc4.  v5:= constclass @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L472dc8.  v1:= "trustManager" @kind object;
  #L472dcc.  call temp:= `readFieldOrNull`(v0, v5, v1) @signature `Lokhttp3/internal/platform/AndroidPlatform;.readFieldOrNull:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L472dd2.  v5:= temp @kind object;
  #L472dd4.  v5:= (`javax.net.ssl.X509TrustManager`) v5 @kind object;
  #L472dd8.  return v5 @kind object;
  catch `java.lang.ClassNotFoundException` @[L472d78..L472d9e] goto L472da0;
}
