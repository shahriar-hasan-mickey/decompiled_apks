record `okhttp3.internal.platform.Jdk9Platform` @kind class @AccessFlag FINAL extends `okhttp3.internal.platform.Platform` @kind class {
  `java.lang.reflect.Method` `okhttp3.internal.platform.Jdk9Platform.getProtocolMethod` @AccessFlag FINAL;
  `java.lang.reflect.Method` `okhttp3.internal.platform.Jdk9Platform.setProtocolMethod` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.platform.Jdk9Platform` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4732b0.  call `<init>`(v0) @signature `Lokhttp3/internal/platform/Platform;.<init>:()V` @kind direct;
  #L4732b6.  v0.`okhttp3.internal.platform.Jdk9Platform.setProtocolMethod` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L4732ba.  v0.`okhttp3.internal.platform.Jdk9Platform.getProtocolMethod` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L4732be.  return @kind void;
}
procedure `okhttp3.internal.platform.Jdk9Platform` `buildIfSupported`() @signature `Lokhttp3/internal/platform/Jdk9Platform;.buildIfSupported:()Lokhttp3/internal/platform/Jdk9Platform;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47324c.  v0:= constclass @type ^`javax.net.ssl.SSLParameters` @kind object;
  #L473250.  v1:= "setApplicationProtocols" @kind object;
  #L473254.  v2:= 1I;
  #L473256.  v2:= new `java.lang.Class`[v2];
  #L47325a.  v3:= constclass @type ^`java.lang.String`[] @kind object;
  #L47325e.  v4:= 0I;
  #L473260.  v2[v4]:= v3 @kind object;
  #L473264.  call temp:= `getMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L47326a.  v0:= temp @kind object;
  #L47326c.  v1:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L473270.  v2:= "getApplicationProtocol" @kind object;
  #L473274.  v3:= new `java.lang.Class`[v4];
  #L473278.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L47327e.  v1:= temp @kind object;
  #L473280.  v2:= new `okhttp3.internal.platform.Jdk9Platform`;
  #L473284.  call `<init>`(v2, v0, v1) @signature `Lokhttp3/internal/platform/Jdk9Platform;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L47328a.  return v2 @kind object;
  #L47328c.  v0:= 0I;
  #L47328e.  return v0 @kind object;
  catch `java.lang.NoSuchMethodException` @[L47324c..L47328a] goto L47328c;
}
procedure `void` `configureTlsExtensions`(`okhttp3.internal.platform.Jdk9Platform` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object, `java.lang.String` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4732d0.  call temp:= `getSSLParameters`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getSSLParameters:()Ljavax/net/ssl/SSLParameters;` @kind virtual;
  #L4732d6.  v6:= temp @kind object;
  #L4732d8.  call temp:= `alpnProtocolNames`(v7) @signature `Lokhttp3/internal/platform/Jdk9Platform;.alpnProtocolNames:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4732de.  v7:= temp @kind object;
  #L4732e0.  v0:= v4.`okhttp3.internal.platform.Jdk9Platform.setProtocolMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L4732e4.  v1:= 1I;
  #L4732e6.  v1:= new `java.lang.Object`[v1];
  #L4732ea.  v2:= 0I;
  #L4732ec.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4732f2.  v3:= temp;
  #L4732f4.  v3:= new `java.lang.String`[v3];
  #L4732f8.  call temp:= `toArray`(v7, v3) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4732fe.  v7:= temp @kind object;
  #L473300.  v1[v2]:= v7 @kind object;
  #L473304.  call temp:= `invoke`(v0, v6, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L47330a.  call `setSSLParameters`(v5, v6) @signature `Ljavax/net/ssl/SSLSocket;.setSSLParameters:(Ljavax/net/ssl/SSLParameters;)V` @kind virtual;
  #L473310.  return @kind void;
  #L473312.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L473314.  goto L473318;
  #L473316.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L473318.  v6:= "unable to set ssl parameters" @kind object;
  #L47331c.  call temp:= `assertionError`(v6, v5) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L473322.  v5:= temp @kind object;
  #L473324.  throw v5;
  catch `java.lang.IllegalAccessException` @[L4732d0..L473310] goto L473316;
  catch `java.lang.reflect.InvocationTargetException` @[L4732d0..L473310] goto L473312;
}
procedure `java.lang.String` `getSelectedProtocol`(`okhttp3.internal.platform.Jdk9Platform` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4731c4.  v0:= v2.`okhttp3.internal.platform.Jdk9Platform.getProtocolMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L4731c8.  v1:= 0I;
  #L4731ca.  v1:= new `java.lang.Object`[v1];
  #L4731ce.  call temp:= `invoke`(v0, v3, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4731d4.  v3:= temp @kind object;
  #L4731d6.  v3:= (`java.lang.String`) v3 @kind object;
  #L4731da.  if v3 == 0 then goto L4731f2;
  #L4731de.  v0:= "" @kind object;
  #L4731e2.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4731e8.  v0:= temp;
  #L4731ea.  if v0 == 0 then goto L4731f0;
  #L4731ee.  goto L4731f2;
  #L4731f0.  return v3 @kind object;
  #L4731f2.  v3:= 0I;
  #L4731f4.  return v3 @kind object;
  #L4731f6.  v3:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L4731f8.  goto L4731fc;
  #L4731fa.  v3:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L4731fc.  v0:= "unable to get selected protocols" @kind object;
  #L473200.  call temp:= `assertionError`(v0, v3) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L473206.  v3:= temp @kind object;
  #L473208.  throw v3;
  catch `java.lang.IllegalAccessException` @[L4731c4..L4731ea] goto L4731fa;
  catch `java.lang.reflect.InvocationTargetException` @[L4731c4..L4731ea] goto L4731f6;
}
procedure `javax.net.ssl.X509TrustManager` `trustManager`(`okhttp3.internal.platform.Jdk9Platform` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47322c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L473230.  v0:= "clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on JDK 9+" @kind object;
  #L473234.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47323a.  throw v2;
}
