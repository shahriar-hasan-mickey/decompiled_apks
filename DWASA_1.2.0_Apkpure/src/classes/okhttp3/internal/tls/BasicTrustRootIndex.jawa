record `okhttp3.internal.tls.BasicTrustRootIndex` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.tls.TrustRootIndex` @kind interface {
  `java.util.Map` `okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.tls.BasicTrustRootIndex` v6 @kind this, `java.security.cert.X509Certificate`[] v7 @kind object) @signature `Lokhttp3/internal/tls/BasicTrustRootIndex;.<init>:([Ljava/security/cert/X509Certificate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L474708.  call `<init>`(v6) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47470e.  v0:= new `java.util.LinkedHashMap`;
  #L474712.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L474718.  v6.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` := v0 @kind object;
  #L47471c.  v0:= length @variable v7;
  #L47471e.  v1:= 0I;
  #L474720.  if v1 >= v0 then goto L474766;
  #L474724.  v2:= v7[v1] @kind object;
  #L474728.  call temp:= `getSubjectX500Principal`(v2) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L47472e.  v3:= temp @kind object;
  #L474730.  v4:= v6.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L474734.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47473a.  v4:= temp @kind object;
  #L47473c.  v4:= (`java.util.Set`) v4 @kind object;
  #L474740.  if v4 != 0 then goto L47475a;
  #L474744.  v4:= new `java.util.LinkedHashSet`;
  #L474748.  v5:= 1I;
  #L47474a.  call `<init>`(v4, v5) @signature `Ljava/util/LinkedHashSet;.<init>:(I)V` @kind direct;
  #L474750.  v5:= v6.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L474754.  call temp:= `put`(v5, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47475a.  call temp:= `add`(v4, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L474760.  v1:= v1 + 1;
  #L474764.  goto L474720;
  #L474766.  return @kind void;
}
procedure `boolean` `equals`(`okhttp3.internal.tls.BasicTrustRootIndex` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/internal/tls/BasicTrustRootIndex;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L474630.  v0:= 1I;
  #L474632.  if v3 != v2 then goto L474638;
  #L474636.  return v0;
  #L474638.  v1:= instanceof @variable v3 @type ^`okhttp3.internal.tls.BasicTrustRootIndex` @kind boolean;
  #L47463c.  if v1 == 0 then goto L47465a;
  #L474640.  v3:= (`okhttp3.internal.tls.BasicTrustRootIndex`) v3 @kind object;
  #L474644.  v3:= v3.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L474648.  v1:= v2.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L47464c.  call temp:= `equals`(v3, v1) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L474652.  v3:= temp;
  #L474654.  if v3 == 0 then goto L47465a;
  #L474658.  goto L47465c;
  #L47465a.  v0:= 0I;
  #L47465c.  return v0;
}
procedure `java.security.cert.X509Certificate` `findByIssuerAndSignature`(`okhttp3.internal.tls.BasicTrustRootIndex` v4 @kind this, `java.security.cert.X509Certificate` v5 @kind object) @signature `Lokhttp3/internal/tls/BasicTrustRootIndex;.findByIssuerAndSignature:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L474690.  call temp:= `getIssuerX500Principal`(v5) @signature `Ljava/security/cert/X509Certificate;.getIssuerX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L474696.  v0:= temp @kind object;
  #L474698.  v1:= v4.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L47469c.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4746a2.  v0:= temp @kind object;
  #L4746a4.  v0:= (`java.util.Set`) v0 @kind object;
  #L4746a8.  v1:= 0I;
  #L4746aa.  if v0 != 0 then goto L4746b0;
  #L4746ae.  return v1 @kind object;
  #L4746b0.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4746b6.  v0:= temp @kind object;
  #L4746b8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4746be.  v2:= temp;
  #L4746c0.  if v2 == 0 then goto L4746e4;
  #L4746c4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4746ca.  v2:= temp @kind object;
  #L4746cc.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L4746d0.  call temp:= `getPublicKey`(v2) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L4746d6.  v3:= temp @kind object;
  #L4746d8.  call `verify`(v5, v3) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #L4746de.  return v2 @kind object;
  #L4746e0.  
  #L4746e2.  goto L4746b8;
  #L4746e4.  return v1 @kind object;
  catch `java.lang.Exception` @[L4746d8..L4746de] goto L4746e0;
}
procedure `int` `hashCode`(`okhttp3.internal.tls.BasicTrustRootIndex` v1 @kind this) @signature `Lokhttp3/internal/tls/BasicTrustRootIndex;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474670.  v0:= v1.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L474674.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L47467a.  v0:= temp;
  #L47467c.  return v0;
}
