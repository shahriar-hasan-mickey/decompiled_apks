record `okhttp3.internal.http1.Http1Codec$FixedLengthSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `long` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.ForwardingTimeout` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v1 @kind this, `okhttp3.internal.http1.Http1Codec` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L46aff4.  v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v2 @kind object;
  #L46aff8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46affe.  v2:= new `okio.ForwardingTimeout`;
  #L46b002.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L46b006.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L46b00a.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSink;.timeout:()Lokio/Timeout;` @kind interface;
  #L46b010.  v0:= temp @kind object;
  #L46b012.  call `<init>`(v2, v0) @signature `Lokio/ForwardingTimeout;.<init>:(Lokio/Timeout;)V` @kind direct;
  #L46b018.  v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` := v2 @kind object;
  #L46b01c.  v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` := v3 @kind wide;
  #L46b020.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v5 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46b034.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L46b038.  if v0 == 0 then goto L46b03e;
  #L46b03c.  return @kind void;
  #L46b03e.  v0:= 1I;
  #L46b040.  v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` := v0 @kind boolean;
  #L46b044.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L46b048.  v2:= 0L;
  #L46b04c.  v4:= lcmp(v0, v2);
  #L46b050.  if v4 > 0 then goto L46b06e;
  #L46b054.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L46b058.  v1:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L46b05c.  call `detachTimeout`(v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec;.detachTimeout:(Lokio/ForwardingTimeout;)V` @kind virtual;
  #L46b062.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L46b066.  v1:= 3I;
  #L46b068.  v0.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v1;
  #L46b06c.  return @kind void;
  #L46b06e.  v0:= new `java.net.ProtocolException`;
  #L46b072.  v1:= "unexpected end of stream" @kind object;
  #L46b076.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46b07c.  throw v0;
}
procedure `void` `flush`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46b090.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L46b094.  if v0 == 0 then goto L46b09a;
  #L46b098.  return @kind void;
  #L46b09a.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L46b09e.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L46b0a2.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L46b0a8.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46afdc.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L46afe0.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L46b0bc.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L46b0c0.  if v0 != 0 then goto L46b140;
  #L46b0c4.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L46b0ca.  v1:= temp @kind wide;
  #L46b0cc.  v3:= 0L;
  #L46b0d0.  v5:= v9 @kind wide;
  #L46b0d2.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L46b0d8.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L46b0dc.  v2:= lcmp(v9, v0);
  #L46b0e0.  if v2 > 0 then goto L46b0fe;
  #L46b0e4.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L46b0e8.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L46b0ec.  call `write`(v0, v8, v9) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L46b0f2.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L46b0f6.  v0:= v0 - v9 @kind long;
  #L46b0f8.  v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` := v0 @kind wide;
  #L46b0fc.  return @kind void;
  #L46b0fe.  v8:= new `java.net.ProtocolException`;
  #L46b102.  v0:= new `java.lang.StringBuilder`;
  #L46b106.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L46b10c.  v1:= "expected " @kind object;
  #L46b110.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46b116.  v1:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L46b11a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L46b120.  v1:= " bytes but received " @kind object;
  #L46b124.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46b12a.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L46b130.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L46b136.  v9:= temp @kind object;
  #L46b138.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46b13e.  throw v8;
  #L46b140.  v8:= new `java.lang.IllegalStateException`;
  #L46b144.  v9:= "closed" @kind object;
  #L46b148.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46b14e.  throw v8;
}
