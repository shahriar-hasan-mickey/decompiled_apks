record `okhttp3.internal.http1.Http1Codec$ChunkedSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1Codec$AbstractSource` @kind class {
  `long` `okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.HttpUrl` `okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@okhttp3.internal.http1.Http1Codec$ChunkedSource.NO_CHUNK_YET` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object, `okhttp3.HttpUrl` v4 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/HttpUrl;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L46ae28.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L46ae2c.  v0:= 0I;
  #L46ae2e.  call `<init>`(v2, v3, v0) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/internal/http1/Http1Codec$1;)V` @kind direct;
  #L46ae34.  v0:= -1L;
  #L46ae38.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L46ae3c.  v3:= 1I;
  #L46ae3e.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v3 @kind boolean;
  #L46ae42.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` := v4 @kind object;
  #L46ae46.  return @kind void;
}
procedure `void` `readChunkSize`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v6 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L46aea0.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L46aea4.  v2:= -1L;
  #L46aea8.  v4:= lcmp(v0, v2);
  #L46aeac.  if v4 == 0 then goto L46aebe;
  #L46aeb0.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L46aeb4.  v0:= v0.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L46aeb8.  call temp:= `readUtf8LineStrict`(v0) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L46aebe.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L46aec2.  v0:= v0.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L46aec6.  call temp:= `readHexadecimalUnsignedLong`(v0) @signature `Lokio/BufferedSource;.readHexadecimalUnsignedLong:()J` @kind interface;
  #L46aecc.  v0:= temp @kind wide;
  #L46aece.  v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L46aed2.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L46aed6.  v0:= v0.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L46aeda.  call temp:= `readUtf8LineStrict`(v0) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L46aee0.  v0:= temp @kind object;
  #L46aee2.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L46aee8.  v0:= temp @kind object;
  #L46aeea.  v1:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L46aeee.  v3:= 0L;
  #L46aef2.  v5:= lcmp(v1, v3);
  #L46aef6.  if v5 < 0 then goto L46af5a;
  #L46aefa.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L46af00.  v1:= temp;
  #L46af02.  if v1 != 0 then goto L46af16;
  #L46af06.  v1:= ";" @kind object;
  #L46af0a.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L46af10.  v1:= temp;
  #L46af12.  if v1 == 0 then goto L46af5a;
  #L46af16.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L46af1a.  v2:= lcmp(v0, v3);
  #L46af1e.  if v2 != 0 then goto L46af58;
  #L46af22.  v0:= 0I;
  #L46af24.  v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v0 @kind boolean;
  #L46af28.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L46af2c.  v0:= v0.`okhttp3.internal.http1.Http1Codec.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46af30.  call temp:= `cookieJar`(v0) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L46af36.  v0:= temp @kind object;
  #L46af38.  v1:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L46af3c.  v2:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L46af40.  call temp:= `readHeaders`(v2) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L46af46.  v2:= temp @kind object;
  #L46af48.  call `receiveHeaders`(v0, v1, v2) @signature `Lokhttp3/internal/http/HttpHeaders;.receiveHeaders:(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V` @kind static;
  #L46af4e.  v0:= 1I;
  #L46af50.  v1:= 0I;
  #L46af52.  call `endOfInput`(v6, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L46af58.  return @kind void;
  #L46af5a.  v1:= new `java.net.ProtocolException`;
  #L46af5e.  v2:= new `java.lang.StringBuilder`;
  #L46af62.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L46af68.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L46af6c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46af72.  v3:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L46af76.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L46af7c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46af82.  v0:= "\"" @kind object;
  #L46af86.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46af8c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L46af92.  v0:= temp @kind object;
  #L46af94.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46af9a.  throw v1;
  #L46af9c.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L46af9e.  v1:= new `java.net.ProtocolException`;
  #L46afa2.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L46afa8.  v0:= temp @kind object;
  #L46afaa.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46afb0.  throw v1;
  catch `java.lang.NumberFormatException` @[L46aebe..L46af12] goto L46af9c;
  catch `java.lang.NumberFormatException` @[L46af5a..L46af9c] goto L46af9c;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46ae58.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L46ae5c.  if v0 == 0 then goto L46ae62;
  #L46ae60.  return @kind void;
  #L46ae62.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L46ae66.  if v0 == 0 then goto L46ae88;
  #L46ae6a.  v0:= 100I;
  #L46ae6e.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L46ae72.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L46ae78.  v0:= temp;
  #L46ae7a.  if v0 != 0 then goto L46ae88;
  #L46ae7e.  v0:= 0I;
  #L46ae80.  v1:= 0I;
  #L46ae82.  call `endOfInput`(v2, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L46ae88.  v0:= 1I;
  #L46ae8a.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L46ae8e.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L46ad54.  v0:= 0L;
  #L46ad58.  v2:= lcmp(v9, v0);
  #L46ad5c.  if v2 < 0 then goto L46adea;
  #L46ad60.  v2:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L46ad64.  if v2 != 0 then goto L46adda;
  #L46ad68.  v2:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L46ad6c.  v3:= -1L;
  #L46ad70.  if v2 != 0 then goto L46ad76;
  #L46ad74.  return v3 @kind wide;
  #L46ad76.  v5:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L46ad7a.  v2:= lcmp(v5, v0);
  #L46ad7e.  if v2 == 0 then goto L46ad8a;
  #L46ad82.  v0:= lcmp(v5, v3);
  #L46ad86.  if v0 != 0 then goto L46ad9a;
  #L46ad8a.  call `readChunkSize`(v7) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @kind direct;
  #L46ad90.  v0:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L46ad94.  if v0 != 0 then goto L46ad9a;
  #L46ad98.  return v3 @kind wide;
  #L46ad9a.  v0:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L46ad9e.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L46ada4.  v9:= temp @kind wide;
  #L46ada6.  call temp:= `read`(v7, v8, v9) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L46adac.  v8:= temp @kind wide;
  #L46adae.  v10:= lcmp(v8, v3);
  #L46adb2.  if v10 == 0 then goto L46adc2;
  #L46adb6.  v0:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L46adba.  v0:= v0 - v8 @kind long;
  #L46adbc.  v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L46adc0.  return v8 @kind wide;
  #L46adc2.  v8:= new `java.net.ProtocolException`;
  #L46adc6.  v9:= "unexpected end of stream" @kind object;
  #L46adca.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46add0.  v9:= 0I;
  #L46add2.  call `endOfInput`(v7, v9, v8) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L46add8.  throw v8;
  #L46adda.  v8:= new `java.lang.IllegalStateException`;
  #L46adde.  v9:= "closed" @kind object;
  #L46ade2.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46ade8.  throw v8;
  #L46adea.  v8:= new `java.lang.IllegalArgumentException`;
  #L46adee.  v0:= new `java.lang.StringBuilder`;
  #L46adf2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L46adf8.  v1:= "byteCount < 0: " @kind object;
  #L46adfc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46ae02.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L46ae08.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L46ae0e.  v9:= temp @kind object;
  #L46ae10.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46ae16.  throw v8;
}
