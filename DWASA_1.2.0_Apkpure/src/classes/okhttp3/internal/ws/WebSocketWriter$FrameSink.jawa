record `okhttp3.internal.ws.WebSocketWriter$FrameSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `boolean` `okhttp3.internal.ws.WebSocketWriter$FrameSink.closed` @AccessFlag ;
  `long` `okhttp3.internal.ws.WebSocketWriter$FrameSink.contentLength` @AccessFlag ;
  `int` `okhttp3.internal.ws.WebSocketWriter$FrameSink.formatOpcode` @AccessFlag ;
  `boolean` `okhttp3.internal.ws.WebSocketWriter$FrameSink.isFirstFrame` @AccessFlag ;
  `okhttp3.internal.ws.WebSocketWriter` `okhttp3.internal.ws.WebSocketWriter$FrameSink.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.ws.WebSocketWriter$FrameSink` v0 @kind this, `okhttp3.internal.ws.WebSocketWriter` v1 @kind object) @signature `Lokhttp3/internal/ws/WebSocketWriter$FrameSink;.<init>:(Lokhttp3/internal/ws/WebSocketWriter;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L476db8.  v0.`okhttp3.internal.ws.WebSocketWriter$FrameSink.this$0` @type ^`okhttp3.internal.ws.WebSocketWriter` := v1 @kind object;
  #L476dbc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L476dc2.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.ws.WebSocketWriter$FrameSink` v7 @kind this) @signature `Lokhttp3/internal/ws/WebSocketWriter$FrameSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L476dd4.  v0:= v7.`okhttp3.internal.ws.WebSocketWriter$FrameSink.closed` @type ^`boolean` @kind boolean;
  #L476dd8.  if v0 != 0 then goto L476e0e;
  #L476ddc.  v1:= v7.`okhttp3.internal.ws.WebSocketWriter$FrameSink.this$0` @type ^`okhttp3.internal.ws.WebSocketWriter` @kind object;
  #L476de0.  v2:= v7.`okhttp3.internal.ws.WebSocketWriter$FrameSink.formatOpcode` @type ^`int`;
  #L476de4.  v0:= v1.`okhttp3.internal.ws.WebSocketWriter.buffer` @type ^`okio.Buffer` @kind object;
  #L476de8.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L476dee.  v3:= temp @kind wide;
  #L476df0.  v5:= v7.`okhttp3.internal.ws.WebSocketWriter$FrameSink.isFirstFrame` @type ^`boolean` @kind boolean;
  #L476df4.  v6:= 1I;
  #L476df6.  call `writeMessageFrame`(v1, v2, v3, v5, v6) @signature `Lokhttp3/internal/ws/WebSocketWriter;.writeMessageFrame:(IJZZ)V` @kind virtual;
  #L476dfc.  v0:= 1I;
  #L476dfe.  v7.`okhttp3.internal.ws.WebSocketWriter$FrameSink.closed` @type ^`boolean` := v0 @kind boolean;
  #L476e02.  v0:= v7.`okhttp3.internal.ws.WebSocketWriter$FrameSink.this$0` @type ^`okhttp3.internal.ws.WebSocketWriter` @kind object;
  #L476e06.  v1:= 0I;
  #L476e08.  v0.`okhttp3.internal.ws.WebSocketWriter.activeWriter` @type ^`boolean` := v1 @kind boolean;
  #L476e0c.  return @kind void;
  #L476e0e.  v0:= new `java.io.IOException`;
  #L476e12.  v1:= "closed" @kind object;
  #L476e16.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L476e1c.  throw v0;
}
procedure `void` `flush`(`okhttp3.internal.ws.WebSocketWriter$FrameSink` v7 @kind this) @signature `Lokhttp3/internal/ws/WebSocketWriter$FrameSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L476e30.  v0:= v7.`okhttp3.internal.ws.WebSocketWriter$FrameSink.closed` @type ^`boolean` @kind boolean;
  #L476e34.  if v0 != 0 then goto L476e60;
  #L476e38.  v1:= v7.`okhttp3.internal.ws.WebSocketWriter$FrameSink.this$0` @type ^`okhttp3.internal.ws.WebSocketWriter` @kind object;
  #L476e3c.  v2:= v7.`okhttp3.internal.ws.WebSocketWriter$FrameSink.formatOpcode` @type ^`int`;
  #L476e40.  v0:= v1.`okhttp3.internal.ws.WebSocketWriter.buffer` @type ^`okio.Buffer` @kind object;
  #L476e44.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L476e4a.  v3:= temp @kind wide;
  #L476e4c.  v5:= v7.`okhttp3.internal.ws.WebSocketWriter$FrameSink.isFirstFrame` @type ^`boolean` @kind boolean;
  #L476e50.  v6:= 0I;
  #L476e52.  call `writeMessageFrame`(v1, v2, v3, v5, v6) @signature `Lokhttp3/internal/ws/WebSocketWriter;.writeMessageFrame:(IJZZ)V` @kind virtual;
  #L476e58.  v0:= 0I;
  #L476e5a.  v7.`okhttp3.internal.ws.WebSocketWriter$FrameSink.isFirstFrame` @type ^`boolean` := v0 @kind boolean;
  #L476e5e.  return @kind void;
  #L476e60.  v0:= new `java.io.IOException`;
  #L476e64.  v1:= "closed" @kind object;
  #L476e68.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L476e6e.  throw v0;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.ws.WebSocketWriter$FrameSink` v1 @kind this) @signature `Lokhttp3/internal/ws/WebSocketWriter$FrameSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476d94.  v0:= v1.`okhttp3.internal.ws.WebSocketWriter$FrameSink.this$0` @type ^`okhttp3.internal.ws.WebSocketWriter` @kind object;
  #L476d98.  v0:= v0.`okhttp3.internal.ws.WebSocketWriter.sink` @type ^`okio.BufferedSink` @kind object;
  #L476d9c.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSink;.timeout:()Lokio/Timeout;` @kind interface;
  #L476da2.  v0:= temp @kind object;
  #L476da4.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.ws.WebSocketWriter$FrameSink` v6 @kind this, `okio.Buffer` v7 @kind object, `long` v8 ) @signature `Lokhttp3/internal/ws/WebSocketWriter$FrameSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L476e80.  v0:= v6.`okhttp3.internal.ws.WebSocketWriter$FrameSink.closed` @type ^`boolean` @kind boolean;
  #L476e84.  if v0 != 0 then goto L476f12;
  #L476e88.  v0:= v6.`okhttp3.internal.ws.WebSocketWriter$FrameSink.this$0` @type ^`okhttp3.internal.ws.WebSocketWriter` @kind object;
  #L476e8c.  v0:= v0.`okhttp3.internal.ws.WebSocketWriter.buffer` @type ^`okio.Buffer` @kind object;
  #L476e90.  call `write`(v0, v7, v8) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L476e96.  v7:= v6.`okhttp3.internal.ws.WebSocketWriter$FrameSink.isFirstFrame` @type ^`boolean` @kind boolean;
  #L476e9a.  v8:= 0I;
  #L476e9c.  if v7 == 0 then goto L476ed6;
  #L476ea0.  v0:= v6.`okhttp3.internal.ws.WebSocketWriter$FrameSink.contentLength` @type ^`long` @kind wide;
  #L476ea4.  v2:= -1L;
  #L476ea8.  v7:= lcmp(v0, v2);
  #L476eac.  if v7 == 0 then goto L476ed6;
  #L476eb0.  v7:= v6.`okhttp3.internal.ws.WebSocketWriter$FrameSink.this$0` @type ^`okhttp3.internal.ws.WebSocketWriter` @kind object;
  #L476eb4.  v7:= v7.`okhttp3.internal.ws.WebSocketWriter.buffer` @type ^`okio.Buffer` @kind object;
  #L476eb8.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L476ebe.  v0:= temp @kind wide;
  #L476ec0.  v2:= v6.`okhttp3.internal.ws.WebSocketWriter$FrameSink.contentLength` @type ^`long` @kind wide;
  #L476ec4.  v4:= 8192L;
  #L476ec8.  v2:= v2 - v4 @kind long;
  #L476eca.  v7:= lcmp(v0, v2);
  #L476ece.  if v7 <= 0 then goto L476ed6;
  #L476ed2.  v7:= 1I;
  #L476ed4.  goto L476ed8;
  #L476ed6.  v7:= 0I;
  #L476ed8.  v9:= v6.`okhttp3.internal.ws.WebSocketWriter$FrameSink.this$0` @type ^`okhttp3.internal.ws.WebSocketWriter` @kind object;
  #L476edc.  v9:= v9.`okhttp3.internal.ws.WebSocketWriter.buffer` @type ^`okio.Buffer` @kind object;
  #L476ee0.  call temp:= `completeSegmentByteCount`(v9) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L476ee6.  v2:= temp @kind wide;
  #L476ee8.  v0:= 0L;
  #L476eec.  v9:= lcmp(v2, v0);
  #L476ef0.  if v9 <= 0 then goto L476f10;
  #L476ef4.  if v7 != 0 then goto L476f10;
  #L476ef8.  v0:= v6.`okhttp3.internal.ws.WebSocketWriter$FrameSink.this$0` @type ^`okhttp3.internal.ws.WebSocketWriter` @kind object;
  #L476efc.  v1:= v6.`okhttp3.internal.ws.WebSocketWriter$FrameSink.formatOpcode` @type ^`int`;
  #L476f00.  v4:= v6.`okhttp3.internal.ws.WebSocketWriter$FrameSink.isFirstFrame` @type ^`boolean` @kind boolean;
  #L476f04.  v5:= 0I;
  #L476f06.  call `writeMessageFrame`(v0, v1, v2, v4, v5) @signature `Lokhttp3/internal/ws/WebSocketWriter;.writeMessageFrame:(IJZZ)V` @kind virtual;
  #L476f0c.  v6.`okhttp3.internal.ws.WebSocketWriter$FrameSink.isFirstFrame` @type ^`boolean` := v8 @kind boolean;
  #L476f10.  return @kind void;
  #L476f12.  v7:= new `java.io.IOException`;
  #L476f16.  v8:= "closed" @kind object;
  #L476f1a.  call `<init>`(v7, v8) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L476f20.  throw v7;
}
