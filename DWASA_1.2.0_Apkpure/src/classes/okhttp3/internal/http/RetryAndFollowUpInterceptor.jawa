record `okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.Interceptor` @kind interface {
  `java.lang.Object` `okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.OkHttpClient` `okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @AccessFlag PRIVATE;
}
global `int` `@@okhttp3.internal.http.RetryAndFollowUpInterceptor.MAX_FOLLOW_UPS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object, `boolean` v2 ) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L46a764.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46a76a.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L46a76e.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @type ^`boolean` := v2 @kind boolean;
  #L46a772.  return @kind void;
}
procedure `okhttp3.Address` `createAddress`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v17 @kind this, `okhttp3.HttpUrl` v18 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L46a150.  v0:= v17 @kind object;
  #L46a154.  call temp:= `isHttps`(v18) @signature `Lokhttp3/HttpUrl;.isHttps:()Z` @kind virtual;
  #L46a15a.  v1:= temp;
  #L46a15c.  v2:= 0I;
  #L46a15e.  if v1 == 0 then goto L46a18e;
  #L46a162.  v1:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a166.  call temp:= `sslSocketFactory`(v1) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L46a16c.  v2:= temp @kind object;
  #L46a16e.  v1:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a172.  call temp:= `hostnameVerifier`(v1) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @kind virtual;
  #L46a178.  v1:= temp @kind object;
  #L46a17a.  v3:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a17e.  call temp:= `certificatePinner`(v3) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @kind virtual;
  #L46a184.  v3:= temp @kind object;
  #L46a186.  v10:= v1 @kind object;
  #L46a188.  v9:= v2 @kind object;
  #L46a18a.  v11:= v3 @kind object;
  #L46a18c.  goto L46a194;
  #L46a18e.  v9:= v2 @kind object;
  #L46a190.  v10:= v9 @kind object;
  #L46a192.  v11:= v10 @kind object;
  #L46a194.  v1:= new `okhttp3.Address`;
  #L46a198.  call temp:= `host`(v18) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L46a19e.  v5:= temp @kind object;
  #L46a1a0.  call temp:= `port`(v18) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L46a1a6.  v6:= temp;
  #L46a1a8.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a1ac.  call temp:= `dns`(v2) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @kind virtual;
  #L46a1b2.  v7:= temp @kind object;
  #L46a1b4.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a1b8.  call temp:= `socketFactory`(v2) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @kind virtual;
  #L46a1be.  v8:= temp @kind object;
  #L46a1c0.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a1c4.  call temp:= `proxyAuthenticator`(v2) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L46a1ca.  v12:= temp @kind object;
  #L46a1cc.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a1d0.  call temp:= `proxy`(v2) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L46a1d6.  v13:= temp @kind object;
  #L46a1d8.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a1dc.  call temp:= `protocols`(v2) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L46a1e2.  v14:= temp @kind object;
  #L46a1e4.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a1e8.  call temp:= `connectionSpecs`(v2) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @kind virtual;
  #L46a1ee.  v15:= temp @kind object;
  #L46a1f0.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a1f4.  call temp:= `proxySelector`(v2) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @kind virtual;
  #L46a1fa.  v16:= temp @kind object;
  #L46a1fc.  v4:= v1 @kind object;
  #L46a1fe.  call `<init>`(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16) @signature `Lokhttp3/Address;.<init>:(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V` @kind direct;
  #L46a204.  return v1 @kind object;
}
procedure `okhttp3.Request` `followUpRequest`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v7 @kind this, `okhttp3.Response` v8 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;)Lokhttp3/Request;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L46a218.  if v8 == 0 then goto L46a47e;
  #L46a21c.  v0:= v7.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a220.  call temp:= `connection`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.connection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L46a226.  v0:= temp @kind object;
  #L46a228.  v1:= 0I;
  #L46a22a.  if v0 == 0 then goto L46a238;
  #L46a22e.  call temp:= `route`(v0) @signature `Lokhttp3/Connection;.route:()Lokhttp3/Route;` @kind interface;
  #L46a234.  v0:= temp @kind object;
  #L46a236.  goto L46a23a;
  #L46a238.  v0:= v1 @kind object;
  #L46a23a.  call temp:= `code`(v8) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L46a240.  v2:= temp;
  #L46a242.  call temp:= `request`(v8) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L46a248.  v3:= temp @kind object;
  #L46a24a.  call temp:= `method`(v3) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L46a250.  v3:= temp @kind object;
  #L46a252.  v4:= 307I;
  #L46a256.  v5:= "GET" @kind object;
  #L46a25a.  if v2 == v4 then goto L46a344;
  #L46a25e.  v4:= 308I;
  #L46a262.  if v2 == v4 then goto L46a344;
  #L46a266.  v4:= 401I;
  #L46a26a.  if v2 == v4 then goto L46a32e;
  #L46a26e.  v4:= 407I;
  #L46a272.  if v2 == v4 then goto L46a2de;
  #L46a276.  v0:= 408I;
  #L46a27a.  if v2 == v0 then goto L46a286;
  #L46a27e.  goto L46a48c;
  #L46a284.  return v1 @kind object;
  #L46a286.  v2:= v7.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a28a.  call temp:= `retryOnConnectionFailure`(v2) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L46a290.  v2:= temp;
  #L46a292.  if v2 != 0 then goto L46a298;
  #L46a296.  return v1 @kind object;
  #L46a298.  call temp:= `request`(v8) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L46a29e.  v2:= temp @kind object;
  #L46a2a0.  call temp:= `body`(v2) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L46a2a6.  v2:= temp @kind object;
  #L46a2a8.  v2:= instanceof @variable v2 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L46a2ac.  if v2 == 0 then goto L46a2b2;
  #L46a2b0.  return v1 @kind object;
  #L46a2b2.  call temp:= `priorResponse`(v8) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L46a2b8.  v2:= temp @kind object;
  #L46a2ba.  if v2 == 0 then goto L46a2d4;
  #L46a2be.  call temp:= `priorResponse`(v8) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L46a2c4.  v2:= temp @kind object;
  #L46a2c6.  call temp:= `code`(v2) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L46a2cc.  v2:= temp;
  #L46a2ce.  if v2 != v0 then goto L46a2d4;
  #L46a2d2.  return v1 @kind object;
  #L46a2d4.  call temp:= `request`(v8) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L46a2da.  v8:= temp @kind object;
  #L46a2dc.  return v8 @kind object;
  #L46a2de.  if v0 == 0 then goto L46a2ec;
  #L46a2e2.  call temp:= `proxy`(v0) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L46a2e8.  v1:= temp @kind object;
  #L46a2ea.  goto L46a2f8;
  #L46a2ec.  v1:= v7.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a2f0.  call temp:= `proxy`(v1) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L46a2f6.  v1:= temp @kind object;
  #L46a2f8.  call temp:= `type`(v1) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L46a2fe.  v1:= temp @kind object;
  #L46a300.  v2:= `@@java.net.Proxy$Type.HTTP` @type ^`java.net.Proxy$Type` @kind object;
  #L46a304.  if v1 != v2 then goto L46a31e;
  #L46a308.  v1:= v7.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a30c.  call temp:= `proxyAuthenticator`(v1) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L46a312.  v1:= temp @kind object;
  #L46a314.  call temp:= `authenticate`(v1, v0, v8) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L46a31a.  v8:= temp @kind object;
  #L46a31c.  return v8 @kind object;
  #L46a31e.  v8:= new `java.net.ProtocolException`;
  #L46a322.  v0:= "Received HTTP_PROXY_AUTH (407) code while not using proxy" @kind object;
  #L46a326.  call `<init>`(v8, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46a32c.  throw v8;
  #L46a32e.  v1:= v7.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a332.  call temp:= `authenticator`(v1) @signature `Lokhttp3/OkHttpClient;.authenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L46a338.  v1:= temp @kind object;
  #L46a33a.  call temp:= `authenticate`(v1, v0, v8) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L46a340.  v8:= temp @kind object;
  #L46a342.  return v8 @kind object;
  #L46a344.  call temp:= `equals`(v3, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L46a34a.  v0:= temp;
  #L46a34c.  if v0 != 0 then goto L46a362;
  #L46a350.  v0:= "HEAD" @kind object;
  #L46a354.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L46a35a.  v0:= temp;
  #L46a35c.  if v0 != 0 then goto L46a362;
  #L46a360.  return v1 @kind object;
  #L46a362.  v0:= v7.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a366.  call temp:= `followRedirects`(v0) @signature `Lokhttp3/OkHttpClient;.followRedirects:()Z` @kind virtual;
  #L46a36c.  v0:= temp;
  #L46a36e.  if v0 != 0 then goto L46a374;
  #L46a372.  return v1 @kind object;
  #L46a374.  v0:= "Location" @kind object;
  #L46a378.  call temp:= `header`(v8, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L46a37e.  v0:= temp @kind object;
  #L46a380.  if v0 != 0 then goto L46a386;
  #L46a384.  return v1 @kind object;
  #L46a386.  call temp:= `request`(v8) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L46a38c.  v2:= temp @kind object;
  #L46a38e.  call temp:= `url`(v2) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L46a394.  v2:= temp @kind object;
  #L46a396.  call temp:= `resolve`(v2, v0) @signature `Lokhttp3/HttpUrl;.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind virtual;
  #L46a39c.  v0:= temp @kind object;
  #L46a39e.  if v0 != 0 then goto L46a3a4;
  #L46a3a2.  return v1 @kind object;
  #L46a3a4.  call temp:= `scheme`(v0) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L46a3aa.  v2:= temp @kind object;
  #L46a3ac.  call temp:= `request`(v8) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L46a3b2.  v4:= temp @kind object;
  #L46a3b4.  call temp:= `url`(v4) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L46a3ba.  v4:= temp @kind object;
  #L46a3bc.  call temp:= `scheme`(v4) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L46a3c2.  v4:= temp @kind object;
  #L46a3c4.  call temp:= `equals`(v2, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L46a3ca.  v2:= temp;
  #L46a3cc.  if v2 != 0 then goto L46a3e2;
  #L46a3d0.  v2:= v7.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a3d4.  call temp:= `followSslRedirects`(v2) @signature `Lokhttp3/OkHttpClient;.followSslRedirects:()Z` @kind virtual;
  #L46a3da.  v2:= temp;
  #L46a3dc.  if v2 != 0 then goto L46a3e2;
  #L46a3e0.  return v1 @kind object;
  #L46a3e2.  call temp:= `request`(v8) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L46a3e8.  v2:= temp @kind object;
  #L46a3ea.  call temp:= `newBuilder`(v2) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L46a3f0.  v2:= temp @kind object;
  #L46a3f2.  call temp:= `permitsRequestBody`(v3) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L46a3f8.  v4:= temp;
  #L46a3fa.  if v4 == 0 then goto L46a456;
  #L46a3fe.  call temp:= `redirectsWithBody`(v3) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsWithBody:(Ljava/lang/String;)Z` @kind static;
  #L46a404.  v4:= temp;
  #L46a406.  call temp:= `redirectsToGet`(v3) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsToGet:(Ljava/lang/String;)Z` @kind static;
  #L46a40c.  v6:= temp;
  #L46a40e.  if v6 == 0 then goto L46a41a;
  #L46a412.  call temp:= `method`(v2, v5, v1) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L46a418.  goto L46a434;
  #L46a41a.  if v4 == 0 then goto L46a42e;
  #L46a41e.  call temp:= `request`(v8) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L46a424.  v1:= temp @kind object;
  #L46a426.  call temp:= `body`(v1) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L46a42c.  v1:= temp @kind object;
  #L46a42e.  call temp:= `method`(v2, v3, v1) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L46a434.  if v4 != 0 then goto L46a456;
  #L46a438.  v1:= "Transfer-Encoding" @kind object;
  #L46a43c.  call temp:= `removeHeader`(v2, v1) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L46a442.  v1:= "Content-Length" @kind object;
  #L46a446.  call temp:= `removeHeader`(v2, v1) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L46a44c.  v1:= "Content-Type" @kind object;
  #L46a450.  call temp:= `removeHeader`(v2, v1) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L46a456.  call temp:= `sameConnection`(v7, v8, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L46a45c.  v8:= temp;
  #L46a45e.  if v8 != 0 then goto L46a46c;
  #L46a462.  v8:= "Authorization" @kind object;
  #L46a466.  call temp:= `removeHeader`(v2, v8) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L46a46c.  call temp:= `url`(v2, v0) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L46a472.  v8:= temp @kind object;
  #L46a474.  call temp:= `build`(v8) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L46a47a.  v8:= temp @kind object;
  #L46a47c.  return v8 @kind object;
  #L46a47e.  v8:= new `java.lang.IllegalStateException`;
  #L46a482.  call `<init>`(v8) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L46a488.  throw v8;
  #L46a48a.  
  #L46a48c.  switch v2
                  | 300 => goto L46a362
                  | 301 => goto L46a362
                  | 302 => goto L46a362
                  | 303 => goto L46a362
                  | else => goto L46a284;
}
procedure `boolean` `isRecoverable`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v3 @kind this, `java.io.IOException` v4 @kind object, `boolean` v5 ) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L46a018.  v0:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L46a01c.  v1:= 0I;
  #L46a01e.  if v0 == 0 then goto L46a024;
  #L46a022.  return v1;
  #L46a024.  v0:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L46a028.  v2:= 1I;
  #L46a02a.  if v0 == 0 then goto L46a03e;
  #L46a02e.  v4:= instanceof @variable v4 @type ^`java.net.SocketTimeoutException` @kind boolean;
  #L46a032.  if v4 == 0 then goto L46a03c;
  #L46a036.  if v5 != 0 then goto L46a03c;
  #L46a03a.  v1:= 1I;
  #L46a03c.  return v1;
  #L46a03e.  v5:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L46a042.  if v5 == 0 then goto L46a058;
  #L46a046.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L46a04c.  v5:= temp @kind object;
  #L46a04e.  v5:= instanceof @variable v5 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L46a052.  if v5 == 0 then goto L46a058;
  #L46a056.  return v1;
  #L46a058.  v4:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L46a05c.  if v4 == 0 then goto L46a062;
  #L46a060.  return v1;
  #L46a062.  return v2;
}
procedure `boolean` `recover`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `java.io.IOException` v3 @kind object, `boolean` v4 , `okhttp3.Request` v5 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;ZLokhttp3/Request;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L46a074.  v0:= v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a078.  call `streamFailed`(v0, v3) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L46a07e.  v0:= v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a082.  call temp:= `retryOnConnectionFailure`(v0) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L46a088.  v0:= temp;
  #L46a08a.  v1:= 0I;
  #L46a08c.  if v0 != 0 then goto L46a092;
  #L46a090.  return v1;
  #L46a092.  if v4 == 0 then goto L46a0a8;
  #L46a096.  call temp:= `body`(v5) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L46a09c.  v5:= temp @kind object;
  #L46a09e.  v5:= instanceof @variable v5 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L46a0a2.  if v5 == 0 then goto L46a0a8;
  #L46a0a6.  return v1;
  #L46a0a8.  call temp:= `isRecoverable`(v2, v3, v4) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @kind direct;
  #L46a0ae.  v3:= temp;
  #L46a0b0.  if v3 != 0 then goto L46a0b6;
  #L46a0b4.  return v1;
  #L46a0b6.  v3:= v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a0ba.  call temp:= `hasMoreRoutes`(v3) @signature `Lokhttp3/internal/connection/StreamAllocation;.hasMoreRoutes:()Z` @kind virtual;
  #L46a0c0.  v3:= temp;
  #L46a0c2.  if v3 != 0 then goto L46a0c8;
  #L46a0c6.  return v1;
  #L46a0c8.  v3:= 1I;
  #L46a0ca.  return v3;
}
procedure `boolean` `sameConnection`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `okhttp3.Response` v3 @kind object, `okhttp3.HttpUrl` v4 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L46a0dc.  call temp:= `request`(v3) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L46a0e2.  v3:= temp @kind object;
  #L46a0e4.  call temp:= `url`(v3) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L46a0ea.  v3:= temp @kind object;
  #L46a0ec.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L46a0f2.  v0:= temp @kind object;
  #L46a0f4.  call temp:= `host`(v4) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L46a0fa.  v1:= temp @kind object;
  #L46a0fc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L46a102.  v0:= temp;
  #L46a104.  if v0 == 0 then goto L46a13c;
  #L46a108.  call temp:= `port`(v3) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L46a10e.  v0:= temp;
  #L46a110.  call temp:= `port`(v4) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L46a116.  v1:= temp;
  #L46a118.  if v0 != v1 then goto L46a13c;
  #L46a11c.  call temp:= `scheme`(v3) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L46a122.  v3:= temp @kind object;
  #L46a124.  call temp:= `scheme`(v4) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L46a12a.  v4:= temp @kind object;
  #L46a12c.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L46a132.  v3:= temp;
  #L46a134.  if v3 == 0 then goto L46a13c;
  #L46a138.  v3:= 1I;
  #L46a13a.  goto L46a13e;
  #L46a13c.  v3:= 0I;
  #L46a13e.  return v3;
}
procedure `void` `cancel`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46a784.  v0:= 1I;
  #L46a786.  v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` := v0 @kind boolean;
  #L46a78a.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a78e.  if v0 == 0 then goto L46a798;
  #L46a792.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.cancel:()V` @kind virtual;
  #L46a798.  return @kind void;
}
procedure `okhttp3.Response` `intercept`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v14 @kind this, `okhttp3.Interceptor$Chain` v15 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.intercept:(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L46a4b4.  call temp:= `request`(v15) @signature `Lokhttp3/Interceptor$Chain;.request:()Lokhttp3/Request;` @kind interface;
  #L46a4ba.  v0:= temp @kind object;
  #L46a4bc.  v15:= (`okhttp3.internal.http.RealInterceptorChain`) v15 @kind object;
  #L46a4c0.  call temp:= `call`(v15) @signature `Lokhttp3/internal/http/RealInterceptorChain;.call:()Lokhttp3/Call;` @kind virtual;
  #L46a4c6.  v7:= temp @kind object;
  #L46a4c8.  call temp:= `eventListener`(v15) @signature `Lokhttp3/internal/http/RealInterceptorChain;.eventListener:()Lokhttp3/EventListener;` @kind virtual;
  #L46a4ce.  v8:= temp @kind object;
  #L46a4d0.  v9:= new `okhttp3.internal.connection.StreamAllocation`;
  #L46a4d4.  v1:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a4d8.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L46a4de.  v2:= temp @kind object;
  #L46a4e0.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L46a4e6.  v1:= temp @kind object;
  #L46a4e8.  call temp:= `createAddress`(v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L46a4ee.  v3:= temp @kind object;
  #L46a4f0.  v6:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L46a4f4.  v1:= v9 @kind object;
  #L46a4f6.  v4:= v7 @kind object;
  #L46a4f8.  v5:= v8 @kind object;
  #L46a4fa.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L46a500.  v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v9 @kind object;
  #L46a504.  v9:= 0I;
  #L46a506.  v10:= 0I;
  #L46a508.  v1:= v10 @kind object;
  #L46a50a.  v2:= 0I;
  #L46a50c.  v3:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L46a510.  if v3 != 0 then goto L46a6fc;
  #L46a514.  v3:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a518.  call temp:= `proceed`(v15, v0, v3, v10, v10) @signature `Lokhttp3/internal/http/RealInterceptorChain;.proceed:(Lokhttp3/Request;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;)Lokhttp3/Response;` @kind virtual;
  #L46a51e.  v0:= temp @kind object;
  #L46a520.  if v1 == 0 then goto L46a554;
  #L46a524.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L46a52a.  v0:= temp @kind object;
  #L46a52c.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L46a532.  v1:= temp @kind object;
  #L46a534.  call temp:= `body`(v1, v10) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L46a53a.  v1:= temp @kind object;
  #L46a53c.  call temp:= `build`(v1) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L46a542.  v1:= temp @kind object;
  #L46a544.  call temp:= `priorResponse`(v0, v1) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L46a54a.  v0:= temp @kind object;
  #L46a54c.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L46a552.  v0:= temp @kind object;
  #L46a554.  call temp:= `followUpRequest`(v14, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;)Lokhttp3/Request;` @kind direct;
  #L46a55a.  v11:= temp @kind object;
  #L46a55c.  if v11 != 0 then goto L46a574;
  #L46a560.  v15:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @type ^`boolean` @kind boolean;
  #L46a564.  if v15 != 0 then goto L46a572;
  #L46a568.  v15:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a56c.  call `release`(v15) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L46a572.  return v0 @kind object;
  #L46a574.  call temp:= `body`(v0) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L46a57a.  v1:= temp @kind object;
  #L46a57c.  call `closeQuietly`(v1) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L46a582.  v12:= v2 + 1;
  #L46a586.  v1:= 20I;
  #L46a58a.  if v12 > v1 then goto L46a664;
  #L46a58e.  call temp:= `body`(v11) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L46a594.  v1:= temp @kind object;
  #L46a596.  v1:= instanceof @variable v1 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L46a59a.  if v1 != 0 then goto L46a642;
  #L46a59e.  call temp:= `url`(v11) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L46a5a4.  v1:= temp @kind object;
  #L46a5a6.  call temp:= `sameConnection`(v14, v0, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L46a5ac.  v1:= temp;
  #L46a5ae.  if v1 != 0 then goto L46a5f2;
  #L46a5b2.  v1:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a5b6.  call `release`(v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L46a5bc.  v13:= new `okhttp3.internal.connection.StreamAllocation`;
  #L46a5c0.  v1:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46a5c4.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L46a5ca.  v2:= temp @kind object;
  #L46a5cc.  call temp:= `url`(v11) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L46a5d2.  v1:= temp @kind object;
  #L46a5d4.  call temp:= `createAddress`(v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L46a5da.  v3:= temp @kind object;
  #L46a5dc.  v6:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L46a5e0.  v1:= v13 @kind object;
  #L46a5e2.  v4:= v7 @kind object;
  #L46a5e4.  v5:= v8 @kind object;
  #L46a5e6.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L46a5ec.  v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v13 @kind object;
  #L46a5f0.  goto L46a602;
  #L46a5f2.  v1:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a5f6.  call temp:= `codec`(v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.codec:()Lokhttp3/internal/http/HttpCodec;` @kind virtual;
  #L46a5fc.  v1:= temp @kind object;
  #L46a5fe.  if v1 != 0 then goto L46a60a;
  #L46a602.  v1:= v0 @kind object;
  #L46a604.  v0:= v11 @kind object;
  #L46a606.  v2:= v12;
  #L46a608.  goto L46a50c;
  #L46a60a.  v15:= new `java.lang.IllegalStateException`;
  #L46a60e.  v1:= new `java.lang.StringBuilder`;
  #L46a612.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L46a618.  v2:= "Closing the body of " @kind object;
  #L46a61c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46a622.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46a628.  v0:= " didn't close its backing stream. Bad interceptor?" @kind object;
  #L46a62c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46a632.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L46a638.  v0:= temp @kind object;
  #L46a63a.  call `<init>`(v15, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46a640.  throw v15;
  #L46a642.  v15:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a646.  call `release`(v15) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L46a64c.  v15:= new `java.net.HttpRetryException`;
  #L46a650.  call temp:= `code`(v0) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L46a656.  v0:= temp;
  #L46a658.  v1:= "Cannot retry streamed HTTP body" @kind object;
  #L46a65c.  call `<init>`(v15, v1, v0) @signature `Ljava/net/HttpRetryException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L46a662.  throw v15;
  #L46a664.  v15:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a668.  call `release`(v15) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L46a66e.  v15:= new `java.net.ProtocolException`;
  #L46a672.  v0:= new `java.lang.StringBuilder`;
  #L46a676.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L46a67c.  v1:= "Too many follow-up requests: " @kind object;
  #L46a680.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46a686.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L46a68c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L46a692.  v0:= temp @kind object;
  #L46a694.  call `<init>`(v15, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46a69a.  throw v15;
  #L46a69c.  v15:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46a69e.  goto L46a6e6;
  #L46a6a0.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L46a6a2.  v4:= instanceof @variable v3 @type ^`okhttp3.internal.http2.ConnectionShutdownException` @kind boolean;
  #L46a6a6.  if v4 != 0 then goto L46a6ae;
  #L46a6aa.  v4:= 1I;
  #L46a6ac.  goto L46a6b0;
  #L46a6ae.  v4:= 0I;
  #L46a6b0.  call temp:= `recover`(v14, v3, v4, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;ZLokhttp3/Request;)Z` @kind direct;
  #L46a6b6.  v4:= temp;
  #L46a6b8.  if v4 == 0 then goto L46a6c0;
  #L46a6bc.  goto L46a50c;
  #L46a6c0.  throw v3;
  #L46a6c2.  v3:= Exception @type ^`okhttp3.internal.connection.RouteException` @kind object;
  #L46a6c4.  call temp:= `getLastConnectException`(v3) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @kind virtual;
  #L46a6ca.  v4:= temp @kind object;
  #L46a6cc.  call temp:= `recover`(v14, v4, v9, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;ZLokhttp3/Request;)Z` @kind direct;
  #L46a6d2.  v4:= temp;
  #L46a6d4.  if v4 == 0 then goto L46a6dc;
  #L46a6d8.  goto L46a50c;
  #L46a6dc.  call temp:= `getLastConnectException`(v3) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @kind virtual;
  #L46a6e2.  v15:= temp @kind object;
  #L46a6e4.  throw v15;
  #L46a6e6.  v0:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a6ea.  call `streamFailed`(v0, v10) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L46a6f0.  v0:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a6f4.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L46a6fa.  throw v15;
  #L46a6fc.  v15:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a700.  call `release`(v15) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L46a706.  v15:= new `java.io.IOException`;
  #L46a70a.  v0:= "Canceled" @kind object;
  #L46a70e.  call `<init>`(v15, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46a714.  goto L46a718;
  #L46a716.  throw v15;
  #L46a718.  goto L46a716;
  catch `okhttp3.internal.connection.RouteException` @[L46a514..L46a520] goto L46a6c2;
  catch `java.io.IOException` @[L46a514..L46a520] goto L46a6a0;
  catch `java.lang.Throwable` @[L46a514..L46a520] goto L46a69c;
  catch `java.lang.Throwable` @[L46a6a2..L46a6e6] goto L46a69c;
}
procedure `boolean` `isCanceled`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46a000.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L46a004.  return v0;
}
procedure `void` `setCallStackTrace`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L46a7ac.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` := v1 @kind object;
  #L46a7b0.  return @kind void;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46a74c.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L46a750.  return v0 @kind object;
}
