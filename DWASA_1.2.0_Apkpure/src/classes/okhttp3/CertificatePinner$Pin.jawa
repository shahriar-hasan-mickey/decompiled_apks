record `okhttp3.CertificatePinner$Pin` @kind class @AccessFlag FINAL {
  `java.lang.String` `okhttp3.CertificatePinner$Pin.canonicalHostname` @AccessFlag FINAL;
  `okio.ByteString` `okhttp3.CertificatePinner$Pin.hash` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.hashAlgorithm` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.pattern` @AccessFlag FINAL;
}
global `java.lang.String` `@@okhttp3.CertificatePinner$Pin.WILDCARD` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L457820.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L457826.  v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` := v3 @kind object;
  #L45782a.  v0:= "*." @kind object;
  #L45782e.  call temp:= `startsWith`(v3, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L457834.  v0:= temp;
  #L457836.  v1:= "http://" @kind object;
  #L45783a.  if v0 == 0 then goto L457878;
  #L45783e.  v0:= new `java.lang.StringBuilder`;
  #L457842.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L457848.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45784e.  v1:= 2I;
  #L457850.  call temp:= `substring`(v3, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L457856.  v3:= temp @kind object;
  #L457858.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45785e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L457864.  v3:= temp @kind object;
  #L457866.  call temp:= `parse`(v3) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L45786c.  v3:= temp @kind object;
  #L45786e.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L457874.  v3:= temp @kind object;
  #L457876.  goto L4578a6;
  #L457878.  v0:= new `java.lang.StringBuilder`;
  #L45787c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L457882.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L457888.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45788e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L457894.  v3:= temp @kind object;
  #L457896.  call temp:= `parse`(v3) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L45789c.  v3:= temp @kind object;
  #L45789e.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L4578a4.  v3:= temp @kind object;
  #L4578a6.  v2.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` := v3 @kind object;
  #L4578aa.  v3:= "sha1/" @kind object;
  #L4578ae.  call temp:= `startsWith`(v4, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4578b4.  v0:= temp;
  #L4578b6.  if v0 == 0 then goto L4578d6;
  #L4578ba.  v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v3 @kind object;
  #L4578be.  v3:= 5I;
  #L4578c0.  call temp:= `substring`(v4, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L4578c6.  v3:= temp @kind object;
  #L4578c8.  call temp:= `decodeBase64`(v3) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L4578ce.  v3:= temp @kind object;
  #L4578d0.  v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v3 @kind object;
  #L4578d4.  goto L457900;
  #L4578d6.  v3:= "sha256/" @kind object;
  #L4578da.  call temp:= `startsWith`(v4, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4578e0.  v0:= temp;
  #L4578e2.  if v0 == 0 then goto L457938;
  #L4578e6.  v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v3 @kind object;
  #L4578ea.  v3:= 7I;
  #L4578ec.  call temp:= `substring`(v4, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L4578f2.  v3:= temp @kind object;
  #L4578f4.  call temp:= `decodeBase64`(v3) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L4578fa.  v3:= temp @kind object;
  #L4578fc.  v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v3 @kind object;
  #L457900.  v3:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L457904.  if v3 == 0 then goto L45790a;
  #L457908.  return @kind void;
  #L45790a.  v3:= new `java.lang.IllegalArgumentException`;
  #L45790e.  v0:= new `java.lang.StringBuilder`;
  #L457912.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L457918.  v1:= "pins must be base64: " @kind object;
  #L45791c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L457922.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L457928.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45792e.  v4:= temp @kind object;
  #L457930.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L457936.  throw v3;
  #L457938.  v3:= new `java.lang.IllegalArgumentException`;
  #L45793c.  v0:= new `java.lang.StringBuilder`;
  #L457940.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L457946.  v1:= "pins must start with 'sha256/' or 'sha1/': " @kind object;
  #L45794a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L457950.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L457956.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45795c.  v4:= temp @kind object;
  #L45795e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L457964.  throw v3;
}
procedure `boolean` `equals`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4576b4.  v0:= instanceof @variable v3 @type ^`okhttp3.CertificatePinner$Pin` @kind boolean;
  #L4576b8.  if v0 == 0 then goto L457700;
  #L4576bc.  v0:= v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L4576c0.  v3:= (`okhttp3.CertificatePinner$Pin`) v3 @kind object;
  #L4576c4.  v1:= v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L4576c8.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4576ce.  v0:= temp;
  #L4576d0.  if v0 == 0 then goto L457700;
  #L4576d4.  v0:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L4576d8.  v1:= v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L4576dc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4576e2.  v0:= temp;
  #L4576e4.  if v0 == 0 then goto L457700;
  #L4576e8.  v0:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L4576ec.  v3:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L4576f0.  call temp:= `equals`(v0, v3) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4576f6.  v3:= temp;
  #L4576f8.  if v3 == 0 then goto L457700;
  #L4576fc.  v3:= 1I;
  #L4576fe.  goto L457702;
  #L457700.  v3:= 0I;
  #L457702.  return v3;
}
procedure `int` `hashCode`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L457798.  v0:= v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L45779c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L4577a2.  v0:= temp;
  #L4577a4.  v1:= 527I;
  #L4577a8.  v1:= v1 + v0 @kind int;
  #L4577aa.  v1:= v1 * 31;
  #L4577ae.  v0:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L4577b2.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L4577b8.  v0:= temp;
  #L4577ba.  v1:= v1 + v0 @kind int;
  #L4577bc.  v1:= v1 * 31;
  #L4577c0.  v0:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L4577c4.  call temp:= `hashCode`(v0) @signature `Lokio/ByteString;.hashCode:()I` @kind virtual;
  #L4577ca.  v0:= temp;
  #L4577cc.  v1:= v1 + v0 @kind int;
  #L4577ce.  return v1;
}
procedure `boolean` `matches`(`okhttp3.CertificatePinner$Pin` v10 @kind this, `java.lang.String` v11 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.matches:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L457714.  v0:= v10.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L457718.  v1:= "*." @kind object;
  #L45771c.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L457722.  v0:= temp;
  #L457724.  if v0 == 0 then goto L45777a;
  #L457728.  v0:= 46I;
  #L45772c.  call temp:= `indexOf`(v11, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L457732.  v0:= temp;
  #L457734.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L45773a.  v1:= temp;
  #L45773c.  v1:= v1 - v0 @kind int;
  #L45773e.  v2:= 1I;
  #L457740.  v1:= v1 - v2 @kind int;
  #L457742.  v3:= v10.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L457746.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L45774c.  v3:= temp;
  #L45774e.  if v1 != v3 then goto L457776;
  #L457752.  v5:= 0I;
  #L457754.  v6:= v0 + 1;
  #L457758.  v7:= v10.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L45775c.  v8:= 0I;
  #L45775e.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L457764.  v9:= temp;
  #L457766.  v4:= v11 @kind object;
  #L457768.  call temp:= `regionMatches`(v4, v5, v6, v7, v8, v9) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L45776e.  v11:= temp;
  #L457770.  if v11 == 0 then goto L457776;
  #L457774.  goto L457778;
  #L457776.  v2:= 0I;
  #L457778.  return v2;
  #L45777a.  v0:= v10.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L45777e.  call temp:= `equals`(v11, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L457784.  v11:= temp;
  #L457786.  return v11;
}
procedure `java.lang.String` `toString`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4577e0.  v0:= new `java.lang.StringBuilder`;
  #L4577e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4577ea.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L4577ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4577f4.  v1:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L4577f8.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L4577fe.  v1:= temp @kind object;
  #L457800.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L457806.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45780c.  v0:= temp @kind object;
  #L45780e.  return v0 @kind object;
}
