record `okhttp3.MultipartBody` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.RequestBody` @kind class {
  `okio.ByteString` `okhttp3.MultipartBody.boundary` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.MultipartBody.contentLength` @AccessFlag PRIVATE;
  `okhttp3.MediaType` `okhttp3.MultipartBody.contentType` @AccessFlag PRIVATE_FINAL;
  `okhttp3.MediaType` `okhttp3.MultipartBody.originalType` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.MultipartBody.parts` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.ALTERNATIVE` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte`[] `@@okhttp3.MultipartBody.COLONSPACE` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@okhttp3.MultipartBody.CRLF` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@okhttp3.MultipartBody.DASHDASH` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.DIGEST` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.FORM` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.MIXED` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.PARALLEL` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/MultipartBody;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45eef0.  v0:= "multipart/mixed" @kind object;
  #L45eef4.  call temp:= `parse`(v0) @signature `Lokhttp3/MediaType;.parse:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L45eefa.  v0:= temp @kind object;
  #L45eefc.  `@@okhttp3.MultipartBody.MIXED` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L45ef00.  v0:= "multipart/alternative" @kind object;
  #L45ef04.  call temp:= `parse`(v0) @signature `Lokhttp3/MediaType;.parse:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L45ef0a.  v0:= temp @kind object;
  #L45ef0c.  `@@okhttp3.MultipartBody.ALTERNATIVE` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L45ef10.  v0:= "multipart/digest" @kind object;
  #L45ef14.  call temp:= `parse`(v0) @signature `Lokhttp3/MediaType;.parse:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L45ef1a.  v0:= temp @kind object;
  #L45ef1c.  `@@okhttp3.MultipartBody.DIGEST` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L45ef20.  v0:= "multipart/parallel" @kind object;
  #L45ef24.  call temp:= `parse`(v0) @signature `Lokhttp3/MediaType;.parse:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L45ef2a.  v0:= temp @kind object;
  #L45ef2c.  `@@okhttp3.MultipartBody.PARALLEL` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L45ef30.  v0:= "multipart/form-data" @kind object;
  #L45ef34.  call temp:= `parse`(v0) @signature `Lokhttp3/MediaType;.parse:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L45ef3a.  v0:= temp @kind object;
  #L45ef3c.  `@@okhttp3.MultipartBody.FORM` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L45ef40.  v0:= 2I;
  #L45ef42.  v1:= new `byte`[v0];
  #L45ef46.  goto L45ef70;
  #L45ef4c.  `@@okhttp3.MultipartBody.COLONSPACE` @type ^`byte`[] := v1 @kind object;
  #L45ef50.  v1:= new `byte`[v0];
  #L45ef54.  goto L45ef7c;
  #L45ef5a.  `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] := v1 @kind object;
  #L45ef5e.  v0:= new `byte`[v0];
  #L45ef62.  goto L45ef88;
  #L45ef68.  `@@okhttp3.MultipartBody.DASHDASH` @type ^`byte`[] := v0 @kind object;
  #L45ef6c.  return @kind void;
  #L45ef6e.  
  #L45ef70.  v1:= (58I, 32I) @kind object;
  #L45ef79.  goto L45ef4c;
  #L45ef7a.  
  #L45ef7c.  v1:= (13I, 10I) @kind object;
  #L45ef85.  goto L45ef5a;
  #L45ef86.  
  #L45ef88.  v0:= (45I, 45I) @kind object;
  #L45ef91.  goto L45ef68;
}
procedure `void` `<init>`(`okhttp3.MultipartBody` v2 @kind this, `okio.ByteString` v3 @kind object, `okhttp3.MediaType` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lokhttp3/MultipartBody;.<init>:(Lokio/ByteString;Lokhttp3/MediaType;Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45efa4.  call `<init>`(v2) @signature `Lokhttp3/RequestBody;.<init>:()V` @kind direct;
  #L45efaa.  v0:= -1L;
  #L45efae.  v2.`okhttp3.MultipartBody.contentLength` @type ^`long` := v0 @kind wide;
  #L45efb2.  v2.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` := v3 @kind object;
  #L45efb6.  v2.`okhttp3.MultipartBody.originalType` @type ^`okhttp3.MediaType` := v4 @kind object;
  #L45efba.  v0:= new `java.lang.StringBuilder`;
  #L45efbe.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45efc4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45efca.  v4:= "; boundary=" @kind object;
  #L45efce.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45efd4.  call temp:= `utf8`(v3) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L45efda.  v3:= temp @kind object;
  #L45efdc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45efe2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45efe8.  v3:= temp @kind object;
  #L45efea.  call temp:= `parse`(v3) @signature `Lokhttp3/MediaType;.parse:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L45eff0.  v3:= temp @kind object;
  #L45eff2.  v2.`okhttp3.MultipartBody.contentType` @type ^`okhttp3.MediaType` := v3 @kind object;
  #L45eff6.  call temp:= `immutableList`(v5) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L45effc.  v3:= temp @kind object;
  #L45effe.  v2.`okhttp3.MultipartBody.parts` @type ^`java.util.List` := v3 @kind object;
  #L45f002.  return @kind void;
}
procedure `java.lang.StringBuilder` `appendQuotedString`(`java.lang.StringBuilder` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lokhttp3/MultipartBody;.appendQuotedString:(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45ec38.  v0:= 34I;
  #L45ec3c.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ec42.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L45ec48.  v1:= temp;
  #L45ec4a.  v2:= 0I;
  #L45ec4c.  if v2 >= v1 then goto L45ec9c;
  #L45ec50.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L45ec56.  v3:= temp;
  #L45ec58.  v4:= 10I;
  #L45ec5c.  if v3 == v4 then goto L45ec8c;
  #L45ec60.  v4:= 13I;
  #L45ec64.  if v3 == v4 then goto L45ec80;
  #L45ec68.  if v3 == v0 then goto L45ec74;
  #L45ec6c.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ec72.  goto L45ec96;
  #L45ec74.  v3:= "%22" @kind object;
  #L45ec78.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ec7e.  goto L45ec96;
  #L45ec80.  v3:= "%0D" @kind object;
  #L45ec84.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ec8a.  goto L45ec96;
  #L45ec8c.  v3:= "%0A" @kind object;
  #L45ec90.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ec96.  v2:= v2 + 1;
  #L45ec9a.  goto L45ec4c;
  #L45ec9c.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L45eca2.  return v5 @kind object;
}
procedure `long` `writeOrCountBytes`(`okhttp3.MultipartBody` v12 @kind this, `okio.BufferedSink` v13 @kind object, `boolean` v14 ) @signature `Lokhttp3/MultipartBody;.writeOrCountBytes:(Lokio/BufferedSink;Z)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L45ed00.  if v14 == 0 then goto L45ed12;
  #L45ed04.  v13:= new `okio.Buffer`;
  #L45ed08.  call `<init>`(v13) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L45ed0e.  v0:= v13 @kind object;
  #L45ed10.  goto L45ed14;
  #L45ed12.  v0:= 0I;
  #L45ed14.  v1:= v12.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L45ed18.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45ed1e.  v1:= temp;
  #L45ed20.  v2:= 0I;
  #L45ed22.  v3:= 0L;
  #L45ed26.  v4:= v3 @kind wide;
  #L45ed28.  v3:= 0I;
  #L45ed2a.  if v3 >= v1 then goto L45ee4e;
  #L45ed2e.  v6:= v12.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L45ed32.  call temp:= `get`(v6, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45ed38.  v6:= temp @kind object;
  #L45ed3a.  v6:= (`okhttp3.MultipartBody$Part`) v6 @kind object;
  #L45ed3e.  v7:= v6.`okhttp3.MultipartBody$Part.headers` @type ^`okhttp3.Headers` @kind object;
  #L45ed42.  v6:= v6.`okhttp3.MultipartBody$Part.body` @type ^`okhttp3.RequestBody` @kind object;
  #L45ed46.  v8:= `@@okhttp3.MultipartBody.DASHDASH` @type ^`byte`[] @kind object;
  #L45ed4a.  call temp:= `write`(v13, v8) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L45ed50.  v8:= v12.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` @kind object;
  #L45ed54.  call temp:= `write`(v13, v8) @signature `Lokio/BufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @kind interface;
  #L45ed5a.  v8:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L45ed5e.  call temp:= `write`(v13, v8) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L45ed64.  if v7 == 0 then goto L45edb2;
  #L45ed68.  call temp:= `size`(v7) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L45ed6e.  v8:= temp;
  #L45ed70.  v9:= 0I;
  #L45ed72.  if v9 >= v8 then goto L45edb2;
  #L45ed76.  call temp:= `name`(v7, v9) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L45ed7c.  v10:= temp @kind object;
  #L45ed7e.  call temp:= `writeUtf8`(v13, v10) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L45ed84.  v10:= temp @kind object;
  #L45ed86.  v11:= `@@okhttp3.MultipartBody.COLONSPACE` @type ^`byte`[] @kind object;
  #L45ed8a.  call temp:= `write`(v10, v11) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L45ed90.  v10:= temp @kind object;
  #L45ed92.  call temp:= `value`(v7, v9) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L45ed98.  v11:= temp @kind object;
  #L45ed9a.  call temp:= `writeUtf8`(v10, v11) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L45eda0.  v10:= temp @kind object;
  #L45eda2.  v11:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L45eda6.  call temp:= `write`(v10, v11) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L45edac.  v9:= v9 + 1;
  #L45edb0.  goto L45ed72;
  #L45edb2.  call temp:= `contentType`(v6) @signature `Lokhttp3/RequestBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L45edb8.  v7:= temp @kind object;
  #L45edba.  if v7 == 0 then goto L45ede4;
  #L45edbe.  v8:= "Content-Type: " @kind object;
  #L45edc2.  call temp:= `writeUtf8`(v13, v8) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L45edc8.  v8:= temp @kind object;
  #L45edca.  call temp:= `toString`(v7) @signature `Lokhttp3/MediaType;.toString:()Ljava/lang/String;` @kind virtual;
  #L45edd0.  v7:= temp @kind object;
  #L45edd2.  call temp:= `writeUtf8`(v8, v7) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L45edd8.  v7:= temp @kind object;
  #L45edda.  v8:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L45edde.  call temp:= `write`(v7, v8) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L45ede4.  call temp:= `contentLength`(v6) @signature `Lokhttp3/RequestBody;.contentLength:()J` @kind virtual;
  #L45edea.  v7:= temp @kind wide;
  #L45edec.  v9:= -1L;
  #L45edf0.  v11:= lcmp(v7, v9);
  #L45edf4.  if v11 == 0 then goto L45ee18;
  #L45edf8.  v9:= "Content-Length: " @kind object;
  #L45edfc.  call temp:= `writeUtf8`(v13, v9) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L45ee02.  v9:= temp @kind object;
  #L45ee04.  call temp:= `writeDecimalLong`(v9, v7) @signature `Lokio/BufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @kind interface;
  #L45ee0a.  v9:= temp @kind object;
  #L45ee0c.  v10:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L45ee10.  call temp:= `write`(v9, v10) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L45ee16.  goto L45ee24;
  #L45ee18.  if v14 == 0 then goto L45ee24;
  #L45ee1c.  call `clear`(v0) @signature `Lokio/Buffer;.clear:()V` @kind virtual;
  #L45ee22.  return v9 @kind wide;
  #L45ee24.  v9:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L45ee28.  call temp:= `write`(v13, v9) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L45ee2e.  if v14 == 0 then goto L45ee36;
  #L45ee32.  v4:= v4 + v7 @kind long;
  #L45ee34.  goto L45ee3c;
  #L45ee36.  call `writeTo`(v6, v13) @signature `Lokhttp3/RequestBody;.writeTo:(Lokio/BufferedSink;)V` @kind virtual;
  #L45ee3c.  v6:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L45ee40.  call temp:= `write`(v13, v6) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L45ee46.  v3:= v3 + 1;
  #L45ee4a.  goto L45ed2a;
  #L45ee4e.  v1:= `@@okhttp3.MultipartBody.DASHDASH` @type ^`byte`[] @kind object;
  #L45ee52.  call temp:= `write`(v13, v1) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L45ee58.  v1:= v12.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` @kind object;
  #L45ee5c.  call temp:= `write`(v13, v1) @signature `Lokio/BufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @kind interface;
  #L45ee62.  v1:= `@@okhttp3.MultipartBody.DASHDASH` @type ^`byte`[] @kind object;
  #L45ee66.  call temp:= `write`(v13, v1) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L45ee6c.  v1:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L45ee70.  call temp:= `write`(v13, v1) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L45ee76.  if v14 == 0 then goto L45ee8a;
  #L45ee7a.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L45ee80.  v13:= temp @kind wide;
  #L45ee82.  v4:= v4 + v13 @kind long;
  #L45ee84.  call `clear`(v0) @signature `Lokio/Buffer;.clear:()V` @kind virtual;
  #L45ee8a.  return v4 @kind wide;
}
procedure `java.lang.String` `boundary`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.boundary:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ec18.  v0:= v1.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` @kind object;
  #L45ec1c.  call temp:= `utf8`(v0) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L45ec22.  v0:= temp @kind object;
  #L45ec24.  return v0 @kind object;
}
procedure `long` `contentLength`(`okhttp3.MultipartBody` v5 @kind this) @signature `Lokhttp3/MultipartBody;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45eccc.  v0:= v5.`okhttp3.MultipartBody.contentLength` @type ^`long` @kind wide;
  #L45ecd0.  v2:= -1L;
  #L45ecd4.  v4:= lcmp(v0, v2);
  #L45ecd8.  if v4 == 0 then goto L45ecde;
  #L45ecdc.  return v0 @kind wide;
  #L45ecde.  v0:= 0I;
  #L45ece0.  v1:= 1I;
  #L45ece2.  call temp:= `writeOrCountBytes`(v5, v0, v1) @signature `Lokhttp3/MultipartBody;.writeOrCountBytes:(Lokio/BufferedSink;Z)J` @kind direct;
  #L45ece8.  v0:= temp @kind wide;
  #L45ecea.  v5.`okhttp3.MultipartBody.contentLength` @type ^`long` := v0 @kind wide;
  #L45ecee.  return v0 @kind wide;
}
procedure `okhttp3.MediaType` `contentType`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.contentType:()Lokhttp3/MediaType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ee9c.  v0:= v1.`okhttp3.MultipartBody.contentType` @type ^`okhttp3.MediaType` @kind object;
  #L45eea0.  return v0 @kind object;
}
procedure `okhttp3.MultipartBody$Part` `part`(`okhttp3.MultipartBody` v1 @kind this, `int` v2 ) @signature `Lokhttp3/MultipartBody;.part:(I)Lokhttp3/MultipartBody$Part;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45eecc.  v0:= v1.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L45eed0.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45eed6.  v2:= temp @kind object;
  #L45eed8.  v2:= (`okhttp3.MultipartBody$Part`) v2 @kind object;
  #L45eedc.  return v2 @kind object;
}
procedure `java.util.List` `parts`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.parts:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ecb4.  v0:= v1.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L45ecb8.  return v0 @kind object;
}
procedure `int` `size`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ebf8.  v0:= v1.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L45ebfc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45ec02.  v0:= temp;
  #L45ec04.  return v0;
}
procedure `okhttp3.MediaType` `type`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.type:()Lokhttp3/MediaType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45eeb4.  v0:= v1.`okhttp3.MultipartBody.originalType` @type ^`okhttp3.MediaType` @kind object;
  #L45eeb8.  return v0 @kind object;
}
procedure `void` `writeTo`(`okhttp3.MultipartBody` v1 @kind this, `okio.BufferedSink` v2 @kind object) @signature `Lokhttp3/MultipartBody;.writeTo:(Lokio/BufferedSink;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f014.  v0:= 0I;
  #L45f016.  call temp:= `writeOrCountBytes`(v1, v2, v0) @signature `Lokhttp3/MultipartBody;.writeOrCountBytes:(Lokio/BufferedSink;Z)J` @kind direct;
  #L45f01c.  return @kind void;
}
