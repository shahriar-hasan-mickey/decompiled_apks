record `okhttp3.Headers` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.Headers.namesAndValues` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers` v1 @kind this, `okhttp3.Headers$Builder` v2 @kind object) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L45c11c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45c122.  v0:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L45c126.  v2:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L45c12a.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45c130.  v2:= temp;
  #L45c132.  v2:= new `java.lang.String`[v2];
  #L45c136.  call temp:= `toArray`(v0, v2) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L45c13c.  v2:= temp @kind object;
  #L45c13e.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L45c142.  v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v2 @kind object;
  #L45c146.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Headers` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L45c100.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45c106.  v0.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v1 @kind object;
  #L45c10a.  return @kind void;
}
procedure `java.lang.String` `get`(`java.lang.String`[] v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L45bc00.  v0:= length @variable v2;
  #L45bc02.  v0:= v0 + -2;
  #L45bc06.  if v0 < 0 then goto L45bc2a;
  #L45bc0a.  v1:= v2[v0] @kind object;
  #L45bc0e.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L45bc14.  v1:= temp;
  #L45bc16.  if v1 == 0 then goto L45bc24;
  #L45bc1a.  v0:= v0 + 1;
  #L45bc1e.  v2:= v2[v0] @kind object;
  #L45bc22.  return v2 @kind object;
  #L45bc24.  v0:= v0 + -2;
  #L45bc28.  goto L45bc06;
  #L45bc2a.  v2:= 0I;
  #L45bc2c.  return v2 @kind object;
}
procedure `okhttp3.Headers` `of`(`java.util.Map` v7 @kind object) @signature `Lokhttp3/Headers;.of:(Ljava/util/Map;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L45bf9c.  if v7 == 0 then goto L45c0ae;
  #L45bfa0.  call temp:= `size`(v7) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L45bfa6.  v0:= temp;
  #L45bfa8.  v0:= v0 * 2;
  #L45bfac.  v0:= new `java.lang.String`[v0];
  #L45bfb0.  call temp:= `entrySet`(v7) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L45bfb6.  v7:= temp @kind object;
  #L45bfb8.  call temp:= `iterator`(v7) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45bfbe.  v7:= temp @kind object;
  #L45bfc0.  v1:= 0I;
  #L45bfc2.  v2:= 0I;
  #L45bfc4.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45bfca.  v3:= temp;
  #L45bfcc.  if v3 == 0 then goto L45c0a2;
  #L45bfd0.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45bfd6.  v3:= temp @kind object;
  #L45bfd8.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L45bfdc.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L45bfe2.  v4:= temp @kind object;
  #L45bfe4.  if v4 == 0 then goto L45c092;
  #L45bfe8.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L45bfee.  v4:= temp @kind object;
  #L45bff0.  if v4 == 0 then goto L45c092;
  #L45bff4.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L45bffa.  v4:= temp @kind object;
  #L45bffc.  v4:= (`java.lang.String`) v4 @kind object;
  #L45c000.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L45c006.  v4:= temp @kind object;
  #L45c008.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L45c00e.  v3:= temp @kind object;
  #L45c010.  v3:= (`java.lang.String`) v3 @kind object;
  #L45c014.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L45c01a.  v3:= temp @kind object;
  #L45c01c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L45c022.  v5:= temp;
  #L45c024.  if v5 == 0 then goto L45c054;
  #L45c028.  call temp:= `indexOf`(v4, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L45c02e.  v5:= temp;
  #L45c030.  v6:= -1I;
  #L45c032.  if v5 != v6 then goto L45c054;
  #L45c036.  call temp:= `indexOf`(v3, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L45c03c.  v5:= temp;
  #L45c03e.  if v5 != v6 then goto L45c054;
  #L45c042.  v0[v2]:= v4 @kind object;
  #L45c046.  v4:= v2 + 1;
  #L45c04a.  v0[v4]:= v3 @kind object;
  #L45c04e.  v2:= v2 + 2;
  #L45c052.  goto L45bfc4;
  #L45c054.  v7:= new `java.lang.IllegalArgumentException`;
  #L45c058.  v0:= new `java.lang.StringBuilder`;
  #L45c05c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c062.  v1:= "Unexpected header: " @kind object;
  #L45c066.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c06c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c072.  v1:= ": " @kind object;
  #L45c076.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c07c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c082.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c088.  v0:= temp @kind object;
  #L45c08a.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45c090.  throw v7;
  #L45c092.  v7:= new `java.lang.IllegalArgumentException`;
  #L45c096.  v0:= "Headers cannot be null" @kind object;
  #L45c09a.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45c0a0.  throw v7;
  #L45c0a2.  v7:= new `okhttp3.Headers`;
  #L45c0a6.  call `<init>`(v7, v0) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L45c0ac.  return v7 @kind object;
  #L45c0ae.  v7:= new `java.lang.NullPointerException`;
  #L45c0b2.  v0:= "headers == null" @kind object;
  #L45c0b6.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45c0bc.  goto L45c0c0;
  #L45c0be.  throw v7;
  #L45c0c0.  goto L45c0be;
}
procedure `okhttp3.Headers` `of`(`java.lang.String`[] v6 @kind object) @signature `Lokhttp3/Headers;.of:([Ljava/lang/String;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45be8c.  if v6 == 0 then goto L45bf78;
  #L45be90.  v0:= length @variable v6;
  #L45be92.  v0:= v0 %% 2;
  #L45be96.  if v0 != 0 then goto L45bf68;
  #L45be9a.  call temp:= `clone`(v6) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L45bea0.  v6:= temp @kind object;
  #L45bea2.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L45bea6.  v0:= 0I;
  #L45bea8.  v1:= 0I;
  #L45beaa.  v2:= length @variable v6;
  #L45beac.  if v1 >= v2 then goto L45bede;
  #L45beb0.  v2:= v6[v1] @kind object;
  #L45beb4.  if v2 == 0 then goto L45bece;
  #L45beb8.  v2:= v6[v1] @kind object;
  #L45bebc.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L45bec2.  v2:= temp @kind object;
  #L45bec4.  v6[v1]:= v2 @kind object;
  #L45bec8.  v1:= v1 + 1;
  #L45becc.  goto L45beaa;
  #L45bece.  v6:= new `java.lang.IllegalArgumentException`;
  #L45bed2.  v0:= "Headers cannot be null" @kind object;
  #L45bed6.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45bedc.  throw v6;
  #L45bede.  v1:= 0I;
  #L45bee0.  v2:= length @variable v6;
  #L45bee2.  if v1 >= v2 then goto L45bf5c;
  #L45bee6.  v2:= v6[v1] @kind object;
  #L45beea.  v3:= v1 + 1;
  #L45beee.  v3:= v6[v3] @kind object;
  #L45bef2.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L45bef8.  v4:= temp;
  #L45befa.  if v4 == 0 then goto L45bf1e;
  #L45befe.  call temp:= `indexOf`(v2, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L45bf04.  v4:= temp;
  #L45bf06.  v5:= -1I;
  #L45bf08.  if v4 != v5 then goto L45bf1e;
  #L45bf0c.  call temp:= `indexOf`(v3, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L45bf12.  v4:= temp;
  #L45bf14.  if v4 != v5 then goto L45bf1e;
  #L45bf18.  v1:= v1 + 2;
  #L45bf1c.  goto L45bee0;
  #L45bf1e.  v6:= new `java.lang.IllegalArgumentException`;
  #L45bf22.  v0:= new `java.lang.StringBuilder`;
  #L45bf26.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45bf2c.  v1:= "Unexpected header: " @kind object;
  #L45bf30.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bf36.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bf3c.  v1:= ": " @kind object;
  #L45bf40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bf46.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bf4c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45bf52.  v0:= temp @kind object;
  #L45bf54.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45bf5a.  throw v6;
  #L45bf5c.  v0:= new `okhttp3.Headers`;
  #L45bf60.  call `<init>`(v0, v6) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L45bf66.  return v0 @kind object;
  #L45bf68.  v6:= new `java.lang.IllegalArgumentException`;
  #L45bf6c.  v0:= "Expected alternating header names and values" @kind object;
  #L45bf70.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45bf76.  throw v6;
  #L45bf78.  v6:= new `java.lang.NullPointerException`;
  #L45bf7c.  v0:= "namesAndValues == null" @kind object;
  #L45bf80.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45bf86.  goto L45bf8a;
  #L45bf88.  throw v6;
  #L45bf8a.  goto L45bf88;
}
procedure `long` `byteCount`(`okhttp3.Headers` v6 @kind this) @signature `Lokhttp3/Headers;.byteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45be4c.  v0:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L45be50.  v1:= length @variable v0;
  #L45be52.  v1:= v1 * 2;
  #L45be56.  v1:= (`long`) v1 @kind i2l;
  #L45be58.  v0:= length @variable v0;
  #L45be5a.  v3:= 0I;
  #L45be5c.  if v3 >= v0 then goto L45be7a;
  #L45be60.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L45be64.  v4:= v4[v3] @kind object;
  #L45be68.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L45be6e.  v4:= temp;
  #L45be70.  v4:= (`long`) v4 @kind i2l;
  #L45be72.  v1:= v1 + v4 @kind long;
  #L45be74.  v3:= v3 + 1;
  #L45be78.  goto L45be5c;
  #L45be7a.  return v1 @kind wide;
}
procedure `boolean` `equals`(`okhttp3.Headers` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/Headers;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bb6c.  v0:= instanceof @variable v2 @type ^`okhttp3.Headers` @kind boolean;
  #L45bb70.  if v0 == 0 then goto L45bb90;
  #L45bb74.  v2:= (`okhttp3.Headers`) v2 @kind object;
  #L45bb78.  v2:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L45bb7c.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L45bb80.  call temp:= `equals`(v2, v0) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L45bb86.  v2:= temp;
  #L45bb88.  if v2 == 0 then goto L45bb90;
  #L45bb8c.  v2:= 1I;
  #L45bb8e.  goto L45bb92;
  #L45bb90.  v2:= 0I;
  #L45bb92.  return v2;
}
procedure `java.lang.String` `get`(`okhttp3.Headers` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bbe0.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L45bbe4.  call temp:= `get`(v0, v2) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L45bbea.  v2:= temp @kind object;
  #L45bbec.  return v2 @kind object;
}
procedure `java.util.Date` `getDate`(`okhttp3.Headers` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/Headers;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;

  #L45bcec.  call temp:= `get`(v0, v1) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L45bcf2.  v1:= temp @kind object;
  #L45bcf4.  if v1 == 0 then goto L45bd02;
  #L45bcf8.  call temp:= `parse`(v1) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L45bcfe.  v1:= temp @kind object;
  #L45bd00.  goto L45bd04;
  #L45bd02.  v1:= 0I;
  #L45bd04.  return v1 @kind object;
}
procedure `int` `hashCode`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bba4.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L45bba8.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L45bbae.  v0:= temp;
  #L45bbb0.  return v0;
}
procedure `java.lang.String` `name`(`okhttp3.Headers` v1 @kind this, `int` v2 ) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bc40.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L45bc44.  v2:= v2 * 2;
  #L45bc48.  v2:= v0[v2] @kind object;
  #L45bc4c.  return v2 @kind object;
}
procedure `java.util.Set` `names`(`okhttp3.Headers` v4 @kind this) @signature `Lokhttp3/Headers;.names:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45be00.  v0:= new `java.util.TreeSet`;
  #L45be04.  v1:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L45be08.  call `<init>`(v0, v1) @signature `Ljava/util/TreeSet;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L45be0e.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L45be14.  v1:= temp;
  #L45be16.  v2:= 0I;
  #L45be18.  if v2 >= v1 then goto L45be30;
  #L45be1c.  call temp:= `name`(v4, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L45be22.  v3:= temp @kind object;
  #L45be24.  call temp:= `add`(v0, v3) @signature `Ljava/util/TreeSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L45be2a.  v2:= v2 + 1;
  #L45be2e.  goto L45be18;
  #L45be30.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L45be36.  v0:= temp @kind object;
  #L45be38.  return v0 @kind object;
}
procedure `okhttp3.Headers$Builder` `newBuilder`(`okhttp3.Headers` v3 @kind this) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45c0d4.  v0:= new `okhttp3.Headers$Builder`;
  #L45c0d8.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L45c0de.  v1:= v0.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L45c0e2.  v2:= v3.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L45c0e6.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L45c0ec.  return v0 @kind object;
}
procedure `int` `size`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bbc4.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L45bbc8.  v0:= length @variable v0;
  #L45bbca.  v0:= v0 / 2;
  #L45bbce.  return v0;
}
procedure `java.util.Map` `toMultimap`(`okhttp3.Headers` v6 @kind this) @signature `Lokhttp3/Headers;.toMultimap:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45bd88.  v0:= new `java.util.TreeMap`;
  #L45bd8c.  v1:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L45bd90.  call `<init>`(v0, v1) @signature `Ljava/util/TreeMap;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L45bd96.  call temp:= `size`(v6) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L45bd9c.  v1:= temp;
  #L45bd9e.  v2:= 0I;
  #L45bda0.  if v2 >= v1 then goto L45bdee;
  #L45bda4.  call temp:= `name`(v6, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L45bdaa.  v3:= temp @kind object;
  #L45bdac.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L45bdb0.  call temp:= `toLowerCase`(v3, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L45bdb6.  v3:= temp @kind object;
  #L45bdb8.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45bdbe.  v4:= temp @kind object;
  #L45bdc0.  v4:= (`java.util.List`) v4 @kind object;
  #L45bdc4.  if v4 != 0 then goto L45bdda;
  #L45bdc8.  v4:= new `java.util.ArrayList`;
  #L45bdcc.  v5:= 2I;
  #L45bdce.  call `<init>`(v4, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L45bdd4.  call temp:= `put`(v0, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45bdda.  call temp:= `value`(v6, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L45bde0.  v3:= temp @kind object;
  #L45bde2.  call temp:= `add`(v4, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45bde8.  v2:= v2 + 1;
  #L45bdec.  goto L45bda0;
  #L45bdee.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Headers` v4 @kind this) @signature `Lokhttp3/Headers;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45bc60.  v0:= new `java.lang.StringBuilder`;
  #L45bc64.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45bc6a.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L45bc70.  v1:= temp;
  #L45bc72.  v2:= 0I;
  #L45bc74.  if v2 >= v1 then goto L45bcae;
  #L45bc78.  call temp:= `name`(v4, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L45bc7e.  v3:= temp @kind object;
  #L45bc80.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bc86.  v3:= ": " @kind object;
  #L45bc8a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bc90.  call temp:= `value`(v4, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L45bc96.  v3:= temp @kind object;
  #L45bc98.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bc9e.  v3:= "\n" @kind object;
  #L45bca2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bca8.  v2:= v2 + 1;
  #L45bcac.  goto L45bc74;
  #L45bcae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45bcb4.  v0:= temp @kind object;
  #L45bcb6.  return v0 @kind object;
}
procedure `java.lang.String` `value`(`okhttp3.Headers` v1 @kind this, `int` v2 ) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bcc8.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L45bccc.  v2:= v2 * 2;
  #L45bcd0.  v2:= v2 + 1;
  #L45bcd4.  v2:= v0[v2] @kind object;
  #L45bcd8.  return v2 @kind object;
}
procedure `java.util.List` `values`(`okhttp3.Headers` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lokhttp3/Headers;.values:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45bd18.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L45bd1e.  v0:= temp;
  #L45bd20.  v1:= 0I;
  #L45bd22.  v2:= 0I;
  #L45bd24.  if v2 >= v0 then goto L45bd60;
  #L45bd28.  call temp:= `name`(v4, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L45bd2e.  v3:= temp @kind object;
  #L45bd30.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L45bd36.  v3:= temp;
  #L45bd38.  if v3 == 0 then goto L45bd5a;
  #L45bd3c.  if v1 != 0 then goto L45bd4c;
  #L45bd40.  v1:= new `java.util.ArrayList`;
  #L45bd44.  v3:= 2I;
  #L45bd46.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L45bd4c.  call temp:= `value`(v4, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L45bd52.  v3:= temp @kind object;
  #L45bd54.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45bd5a.  v2:= v2 + 1;
  #L45bd5e.  goto L45bd24;
  #L45bd60.  if v1 == 0 then goto L45bd6e;
  #L45bd64.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L45bd6a.  v5:= temp @kind object;
  #L45bd6c.  goto L45bd76;
  #L45bd6e.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L45bd74.  v5:= temp @kind object;
  #L45bd76.  return v5 @kind object;
}
