record `okhttp3.OkHttpClient` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface, `okhttp3.Call$Factory` @kind interface, `okhttp3.WebSocket$Factory` @kind interface {
  `okhttp3.Authenticator` `okhttp3.OkHttpClient.authenticator` @AccessFlag FINAL;
  `okhttp3.Cache` `okhttp3.OkHttpClient.cache` @AccessFlag FINAL;
  `okhttp3.internal.tls.CertificateChainCleaner` `okhttp3.OkHttpClient.certificateChainCleaner` @AccessFlag FINAL;
  `okhttp3.CertificatePinner` `okhttp3.OkHttpClient.certificatePinner` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.connectTimeout` @AccessFlag FINAL;
  `okhttp3.ConnectionPool` `okhttp3.OkHttpClient.connectionPool` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.connectionSpecs` @AccessFlag FINAL;
  `okhttp3.CookieJar` `okhttp3.OkHttpClient.cookieJar` @AccessFlag FINAL;
  `okhttp3.Dispatcher` `okhttp3.OkHttpClient.dispatcher` @AccessFlag FINAL;
  `okhttp3.Dns` `okhttp3.OkHttpClient.dns` @AccessFlag FINAL;
  `okhttp3.EventListener$Factory` `okhttp3.OkHttpClient.eventListenerFactory` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.followRedirects` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.followSslRedirects` @AccessFlag FINAL;
  `javax.net.ssl.HostnameVerifier` `okhttp3.OkHttpClient.hostnameVerifier` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.interceptors` @AccessFlag FINAL;
  `okhttp3.internal.cache.InternalCache` `okhttp3.OkHttpClient.internalCache` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.networkInterceptors` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.pingInterval` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.protocols` @AccessFlag FINAL;
  `java.net.Proxy` `okhttp3.OkHttpClient.proxy` @AccessFlag FINAL;
  `okhttp3.Authenticator` `okhttp3.OkHttpClient.proxyAuthenticator` @AccessFlag FINAL;
  `java.net.ProxySelector` `okhttp3.OkHttpClient.proxySelector` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.readTimeout` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.retryOnConnectionFailure` @AccessFlag FINAL;
  `javax.net.SocketFactory` `okhttp3.OkHttpClient.socketFactory` @AccessFlag FINAL;
  `javax.net.ssl.SSLSocketFactory` `okhttp3.OkHttpClient.sslSocketFactory` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.writeTimeout` @AccessFlag FINAL;
}
global `java.util.List` `@@okhttp3.OkHttpClient.DEFAULT_CONNECTION_SPECS` @AccessFlag STATIC_FINAL;
global `java.util.List` `@@okhttp3.OkHttpClient.DEFAULT_PROTOCOLS` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/OkHttpClient;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45fce4.  v0:= 2I;
  #L45fce6.  v1:= new `okhttp3.Protocol`[v0];
  #L45fcea.  v2:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L45fcee.  v3:= 0I;
  #L45fcf0.  v1[v3]:= v2 @kind object;
  #L45fcf4.  v2:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L45fcf8.  v4:= 1I;
  #L45fcfa.  v1[v4]:= v2 @kind object;
  #L45fcfe.  call temp:= `immutableList`(v1) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L45fd04.  v1:= temp @kind object;
  #L45fd06.  `@@okhttp3.OkHttpClient.DEFAULT_PROTOCOLS` @type ^`java.util.List` := v1 @kind object;
  #L45fd0a.  v0:= new `okhttp3.ConnectionSpec`[v0];
  #L45fd0e.  v1:= `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L45fd12.  v0[v3]:= v1 @kind object;
  #L45fd16.  v1:= `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L45fd1a.  v0[v4]:= v1 @kind object;
  #L45fd1e.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L45fd24.  v0:= temp @kind object;
  #L45fd26.  `@@okhttp3.OkHttpClient.DEFAULT_CONNECTION_SPECS` @type ^`java.util.List` := v0 @kind object;
  #L45fd2a.  v0:= new `okhttp3.OkHttpClient$1`;
  #L45fd2e.  call `<init>`(v0) @signature `Lokhttp3/OkHttpClient$1;.<init>:()V` @kind direct;
  #L45fd34.  `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` := v0 @kind object;
  #L45fd38.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45fd4c.  v0:= new `okhttp3.OkHttpClient$Builder`;
  #L45fd50.  call `<init>`(v0) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:()V` @kind direct;
  #L45fd56.  call `<init>`(v1, v0) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @kind direct;
  #L45fd5c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient` v4 @kind this, `okhttp3.OkHttpClient$Builder` v5 @kind object) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45fd70.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45fd76.  v0:= v5.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` @kind object;
  #L45fd7a.  v4.`okhttp3.OkHttpClient.dispatcher` @type ^`okhttp3.Dispatcher` := v0 @kind object;
  #L45fd7e.  v0:= v5.`okhttp3.OkHttpClient$Builder.proxy` @type ^`java.net.Proxy` @kind object;
  #L45fd82.  v4.`okhttp3.OkHttpClient.proxy` @type ^`java.net.Proxy` := v0 @kind object;
  #L45fd86.  v0:= v5.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` @kind object;
  #L45fd8a.  v4.`okhttp3.OkHttpClient.protocols` @type ^`java.util.List` := v0 @kind object;
  #L45fd8e.  v0:= v5.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` @kind object;
  #L45fd92.  v4.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` := v0 @kind object;
  #L45fd96.  v0:= v5.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L45fd9a.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L45fda0.  v0:= temp @kind object;
  #L45fda2.  v4.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` := v0 @kind object;
  #L45fda6.  v0:= v5.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L45fdaa.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L45fdb0.  v0:= temp @kind object;
  #L45fdb2.  v4.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` := v0 @kind object;
  #L45fdb6.  v0:= v5.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` @kind object;
  #L45fdba.  v4.`okhttp3.OkHttpClient.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v0 @kind object;
  #L45fdbe.  v0:= v5.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L45fdc2.  v4.`okhttp3.OkHttpClient.proxySelector` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L45fdc6.  v0:= v5.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L45fdca.  v4.`okhttp3.OkHttpClient.cookieJar` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L45fdce.  v0:= v5.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` @kind object;
  #L45fdd2.  v4.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` := v0 @kind object;
  #L45fdd6.  v0:= v5.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L45fdda.  v4.`okhttp3.OkHttpClient.internalCache` @type ^`okhttp3.internal.cache.InternalCache` := v0 @kind object;
  #L45fdde.  v0:= v5.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` @kind object;
  #L45fde2.  v4.`okhttp3.OkHttpClient.socketFactory` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L45fde6.  v0:= v4.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` @kind object;
  #L45fdea.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45fdf0.  v0:= temp @kind object;
  #L45fdf2.  v1:= 0I;
  #L45fdf4.  v2:= 0I;
  #L45fdf6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45fdfc.  v3:= temp;
  #L45fdfe.  if v3 == 0 then goto L45fe22;
  #L45fe02.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45fe08.  v3:= temp @kind object;
  #L45fe0a.  v3:= (`okhttp3.ConnectionSpec`) v3 @kind object;
  #L45fe0e.  if v2 != 0 then goto L45fe1e;
  #L45fe12.  call temp:= `isTls`(v3) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @kind virtual;
  #L45fe18.  v2:= temp;
  #L45fe1a.  if v2 == 0 then goto L45fdf4;
  #L45fe1e.  v2:= 1I;
  #L45fe20.  goto L45fdf6;
  #L45fe22.  v0:= v5.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L45fe26.  if v0 != 0 then goto L45fe52;
  #L45fe2a.  if v2 != 0 then goto L45fe30;
  #L45fe2e.  goto L45fe52;
  #L45fe30.  call temp:= `systemDefaultTrustManager`(v4) @signature `Lokhttp3/OkHttpClient;.systemDefaultTrustManager:()Ljavax/net/ssl/X509TrustManager;` @kind direct;
  #L45fe36.  v0:= temp @kind object;
  #L45fe38.  call temp:= `systemDefaultSslSocketFactory`(v4, v0) @signature `Lokhttp3/OkHttpClient;.systemDefaultSslSocketFactory:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;` @kind direct;
  #L45fe3e.  v1:= temp @kind object;
  #L45fe40.  v4.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v1 @kind object;
  #L45fe44.  call temp:= `get`(v0) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind static;
  #L45fe4a.  v0:= temp @kind object;
  #L45fe4c.  v4.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L45fe50.  goto L45fe62;
  #L45fe52.  v0:= v5.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L45fe56.  v4.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v0 @kind object;
  #L45fe5a.  v0:= v5.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L45fe5e.  v4.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L45fe62.  v0:= v5.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L45fe66.  v4.`okhttp3.OkHttpClient.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L45fe6a.  v0:= v5.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L45fe6e.  v1:= v4.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L45fe72.  call temp:= `withCertificateChainCleaner`(v0, v1) @signature `Lokhttp3/CertificatePinner;.withCertificateChainCleaner:(Lokhttp3/internal/tls/CertificateChainCleaner;)Lokhttp3/CertificatePinner;` @kind virtual;
  #L45fe78.  v0:= temp @kind object;
  #L45fe7a.  v4.`okhttp3.OkHttpClient.certificatePinner` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L45fe7e.  v0:= v5.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L45fe82.  v4.`okhttp3.OkHttpClient.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L45fe86.  v0:= v5.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L45fe8a.  v4.`okhttp3.OkHttpClient.authenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L45fe8e.  v0:= v5.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` @kind object;
  #L45fe92.  v4.`okhttp3.OkHttpClient.connectionPool` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L45fe96.  v0:= v5.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` @kind object;
  #L45fe9a.  v4.`okhttp3.OkHttpClient.dns` @type ^`okhttp3.Dns` := v0 @kind object;
  #L45fe9e.  v0:= v5.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` @kind boolean;
  #L45fea2.  v4.`okhttp3.OkHttpClient.followSslRedirects` @type ^`boolean` := v0 @kind boolean;
  #L45fea6.  v0:= v5.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` @kind boolean;
  #L45feaa.  v4.`okhttp3.OkHttpClient.followRedirects` @type ^`boolean` := v0 @kind boolean;
  #L45feae.  v0:= v5.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` @kind boolean;
  #L45feb2.  v4.`okhttp3.OkHttpClient.retryOnConnectionFailure` @type ^`boolean` := v0 @kind boolean;
  #L45feb6.  v0:= v5.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int`;
  #L45feba.  v4.`okhttp3.OkHttpClient.connectTimeout` @type ^`int` := v0;
  #L45febe.  v0:= v5.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int`;
  #L45fec2.  v4.`okhttp3.OkHttpClient.readTimeout` @type ^`int` := v0;
  #L45fec6.  v0:= v5.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int`;
  #L45feca.  v4.`okhttp3.OkHttpClient.writeTimeout` @type ^`int` := v0;
  #L45fece.  v5:= v5.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int`;
  #L45fed2.  v4.`okhttp3.OkHttpClient.pingInterval` @type ^`int` := v5;
  #L45fed6.  v5:= v4.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` @kind object;
  #L45feda.  v0:= 0I;
  #L45fedc.  call temp:= `contains`(v5, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L45fee2.  v5:= temp;
  #L45fee4.  if v5 != 0 then goto L45ff2c;
  #L45fee8.  v5:= v4.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` @kind object;
  #L45feec.  call temp:= `contains`(v5, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L45fef2.  v5:= temp;
  #L45fef4.  if v5 != 0 then goto L45fefa;
  #L45fef8.  return @kind void;
  #L45fefa.  v5:= new `java.lang.IllegalStateException`;
  #L45fefe.  v0:= new `java.lang.StringBuilder`;
  #L45ff02.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45ff08.  v1:= "Null network interceptor: " @kind object;
  #L45ff0c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ff12.  v1:= v4.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` @kind object;
  #L45ff16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ff1c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45ff22.  v0:= temp @kind object;
  #L45ff24.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45ff2a.  throw v5;
  #L45ff2c.  v5:= new `java.lang.IllegalStateException`;
  #L45ff30.  v0:= new `java.lang.StringBuilder`;
  #L45ff34.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45ff3a.  v1:= "Null interceptor: " @kind object;
  #L45ff3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ff44.  v1:= v4.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` @kind object;
  #L45ff48.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ff4e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45ff54.  v0:= temp @kind object;
  #L45ff56.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45ff5c.  goto L45ff60;
  #L45ff5e.  throw v5;
  #L45ff60.  goto L45ff5e;
}
procedure `javax.net.ssl.SSLSocketFactory` `systemDefaultSslSocketFactory`(`okhttp3.OkHttpClient` v3 @kind this, `javax.net.ssl.X509TrustManager` v4 @kind object) @signature `Lokhttp3/OkHttpClient;.systemDefaultSslSocketFactory:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L45fa7c.  v0:= "TLS" @kind object;
  #L45fa80.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L45fa86.  v0:= temp @kind object;
  #L45fa88.  v1:= 1I;
  #L45fa8a.  v1:= new `javax.net.ssl.TrustManager`[v1];
  #L45fa8e.  v2:= 0I;
  #L45fa90.  v1[v2]:= v4 @kind object;
  #L45fa94.  v4:= 0I;
  #L45fa96.  call `init`(v0, v4, v1, v4) @signature `Ljavax/net/ssl/SSLContext;.init:([Ljavax/net/ssl/KeyManager;[Ljavax/net/ssl/TrustManager;Ljava/security/SecureRandom;)V` @kind virtual;
  #L45fa9c.  call temp:= `getSocketFactory`(v0) @signature `Ljavax/net/ssl/SSLContext;.getSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L45faa2.  v4:= temp @kind object;
  #L45faa4.  return v4 @kind object;
  #L45faa6.  v4:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L45faa8.  v0:= "No System TLS" @kind object;
  #L45faac.  call temp:= `assertionError`(v0, v4) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L45fab2.  v4:= temp @kind object;
  #L45fab4.  throw v4;
  catch `java.security.GeneralSecurityException` @[L45fa7c..L45faa4] goto L45faa6;
}
procedure `javax.net.ssl.X509TrustManager` `systemDefaultTrustManager`(`okhttp3.OkHttpClient` v4 @kind this) @signature `Lokhttp3/OkHttpClient;.systemDefaultTrustManager:()Ljavax/net/ssl/X509TrustManager;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45fad8.  call temp:= `getDefaultAlgorithm`() @signature `Ljavax/net/ssl/TrustManagerFactory;.getDefaultAlgorithm:()Ljava/lang/String;` @kind static;
  #L45fade.  v0:= temp @kind object;
  #L45fae0.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/TrustManagerFactory;` @kind static;
  #L45fae6.  v0:= temp @kind object;
  #L45fae8.  v1:= 0I;
  #L45faea.  v1:= (`java.security.KeyStore`) v1 @kind object;
  #L45faee.  call `init`(v0, v1) @signature `Ljavax/net/ssl/TrustManagerFactory;.init:(Ljava/security/KeyStore;)V` @kind virtual;
  #L45faf4.  call temp:= `getTrustManagers`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getTrustManagers:()[Ljavax/net/ssl/TrustManager;` @kind virtual;
  #L45fafa.  v0:= temp @kind object;
  #L45fafc.  v1:= length @variable v0;
  #L45fafe.  v2:= 1I;
  #L45fb00.  if v1 != v2 then goto L45fb1c;
  #L45fb04.  v1:= 0I;
  #L45fb06.  v2:= v0[v1] @kind object;
  #L45fb0a.  v2:= instanceof @variable v2 @type ^`javax.net.ssl.X509TrustManager` @kind boolean;
  #L45fb0e.  if v2 == 0 then goto L45fb1c;
  #L45fb12.  v0:= v0[v1] @kind object;
  #L45fb16.  v0:= (`javax.net.ssl.X509TrustManager`) v0 @kind object;
  #L45fb1a.  return v0 @kind object;
  #L45fb1c.  v1:= new `java.lang.IllegalStateException`;
  #L45fb20.  v2:= new `java.lang.StringBuilder`;
  #L45fb24.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45fb2a.  v3:= "Unexpected default trust managers:" @kind object;
  #L45fb2e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45fb34.  call temp:= `toString`(v0) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L45fb3a.  v0:= temp @kind object;
  #L45fb3c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45fb42.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45fb48.  v0:= temp @kind object;
  #L45fb4a.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45fb50.  throw v1;
  #L45fb52.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L45fb54.  v1:= "No System TLS" @kind object;
  #L45fb58.  call temp:= `assertionError`(v1, v0) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L45fb5e.  v0:= temp @kind object;
  #L45fb60.  throw v0;
  catch `java.security.GeneralSecurityException` @[L45fad8..L45fb52] goto L45fb52;
}
procedure `okhttp3.Authenticator` `authenticator`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.authenticator:()Lokhttp3/Authenticator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fb84.  v0:= v1.`okhttp3.OkHttpClient.authenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L45fb88.  return v0 @kind object;
}
procedure `okhttp3.Cache` `cache`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.cache:()Lokhttp3/Cache;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fbb4.  v0:= v1.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` @kind object;
  #L45fbb8.  return v0 @kind object;
}
procedure `okhttp3.CertificatePinner` `certificatePinner`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fbe8.  v0:= v1.`okhttp3.OkHttpClient.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L45fbec.  return v0 @kind object;
}
procedure `int` `connectTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f944.  v0:= v1.`okhttp3.OkHttpClient.connectTimeout` @type ^`int`;
  #L45f948.  return v0;
}
procedure `okhttp3.ConnectionPool` `connectionPool`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fc00.  v0:= v1.`okhttp3.OkHttpClient.connectionPool` @type ^`okhttp3.ConnectionPool` @kind object;
  #L45fc04.  return v0 @kind object;
}
procedure `java.util.List` `connectionSpecs`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f9d4.  v0:= v1.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` @kind object;
  #L45f9d8.  return v0 @kind object;
}
procedure `okhttp3.CookieJar` `cookieJar`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fc18.  v0:= v1.`okhttp3.OkHttpClient.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L45fc1c.  return v0 @kind object;
}
procedure `okhttp3.Dispatcher` `dispatcher`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fc30.  v0:= v1.`okhttp3.OkHttpClient.dispatcher` @type ^`okhttp3.Dispatcher` @kind object;
  #L45fc34.  return v0 @kind object;
}
procedure `okhttp3.Dns` `dns`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fc48.  v0:= v1.`okhttp3.OkHttpClient.dns` @type ^`okhttp3.Dns` @kind object;
  #L45fc4c.  return v0 @kind object;
}
procedure `okhttp3.EventListener$Factory` `eventListenerFactory`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fc60.  v0:= v1.`okhttp3.OkHttpClient.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` @kind object;
  #L45fc64.  return v0 @kind object;
}
procedure `boolean` `followRedirects`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.followRedirects:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f8fc.  v0:= v1.`okhttp3.OkHttpClient.followRedirects` @type ^`boolean` @kind boolean;
  #L45f900.  return v0;
}
procedure `boolean` `followSslRedirects`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.followSslRedirects:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f914.  v0:= v1.`okhttp3.OkHttpClient.followSslRedirects` @type ^`boolean` @kind boolean;
  #L45f918.  return v0;
}
procedure `javax.net.ssl.HostnameVerifier` `hostnameVerifier`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fa4c.  v0:= v1.`okhttp3.OkHttpClient.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L45fa50.  return v0 @kind object;
}
procedure `java.util.List` `interceptors`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f9ec.  v0:= v1.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` @kind object;
  #L45f9f0.  return v0 @kind object;
}
procedure `okhttp3.internal.cache.InternalCache` `internalCache`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.internalCache:()Lokhttp3/internal/cache/InternalCache;` @AccessFlag  {
    temp;
    v0;

  #L45fcc0.  v0:= v1.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` @kind object;
  #L45fcc4.  if v0 == 0 then goto L45fcce;
  #L45fcc8.  v0:= v0.`okhttp3.Cache.internalCache` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L45fccc.  goto L45fcd2;
  #L45fcce.  v0:= v1.`okhttp3.OkHttpClient.internalCache` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L45fcd2.  return v0 @kind object;
}
procedure `java.util.List` `networkInterceptors`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fa04.  v0:= v1.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` @kind object;
  #L45fa08.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `newBuilder`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.newBuilder:()Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fc78.  v0:= new `okhttp3.OkHttpClient$Builder`;
  #L45fc7c.  call `<init>`(v0, v1) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L45fc82.  return v0 @kind object;
}
procedure `okhttp3.Call` `newCall`(`okhttp3.OkHttpClient` v1 @kind this, `okhttp3.Request` v2 @kind object) @signature `Lokhttp3/OkHttpClient;.newCall:(Lokhttp3/Request;)Lokhttp3/Call;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fbcc.  v0:= 0I;
  #L45fbce.  call temp:= `newRealCall`(v1, v2, v0) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L45fbd4.  v2:= temp @kind object;
  #L45fbd6.  return v2 @kind object;
}
procedure `okhttp3.WebSocket` `newWebSocket`(`okhttp3.OkHttpClient` v2 @kind this, `okhttp3.Request` v3 @kind object, `okhttp3.WebSocketListener` v4 @kind object) @signature `Lokhttp3/OkHttpClient;.newWebSocket:(Lokhttp3/Request;Lokhttp3/WebSocketListener;)Lokhttp3/WebSocket;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fc94.  v0:= new `okhttp3.internal.ws.RealWebSocket`;
  #L45fc98.  v1:= new `java.util.Random`;
  #L45fc9c.  call `<init>`(v1) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L45fca2.  call `<init>`(v0, v3, v4, v1) @signature `Lokhttp3/internal/ws/RealWebSocket;.<init>:(Lokhttp3/Request;Lokhttp3/WebSocketListener;Ljava/util/Random;)V` @kind direct;
  #L45fca8.  call `connect`(v0, v2) @signature `Lokhttp3/internal/ws/RealWebSocket;.connect:(Lokhttp3/OkHttpClient;)V` @kind virtual;
  #L45fcae.  return v0 @kind object;
}
procedure `int` `pingIntervalMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.pingIntervalMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f95c.  v0:= v1.`okhttp3.OkHttpClient.pingInterval` @type ^`int`;
  #L45f960.  return v0;
}
procedure `java.util.List` `protocols`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fa1c.  v0:= v1.`okhttp3.OkHttpClient.protocols` @type ^`java.util.List` @kind object;
  #L45fa20.  return v0 @kind object;
}
procedure `java.net.Proxy` `proxy`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f9a4.  v0:= v1.`okhttp3.OkHttpClient.proxy` @type ^`java.net.Proxy` @kind object;
  #L45f9a8.  return v0 @kind object;
}
procedure `okhttp3.Authenticator` `proxyAuthenticator`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fb9c.  v0:= v1.`okhttp3.OkHttpClient.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L45fba0.  return v0 @kind object;
}
procedure `java.net.ProxySelector` `proxySelector`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f9bc.  v0:= v1.`okhttp3.OkHttpClient.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L45f9c0.  return v0 @kind object;
}
procedure `int` `readTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f974.  v0:= v1.`okhttp3.OkHttpClient.readTimeout` @type ^`int`;
  #L45f978.  return v0;
}
procedure `boolean` `retryOnConnectionFailure`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f92c.  v0:= v1.`okhttp3.OkHttpClient.retryOnConnectionFailure` @type ^`boolean` @kind boolean;
  #L45f930.  return v0;
}
procedure `javax.net.SocketFactory` `socketFactory`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fa34.  v0:= v1.`okhttp3.OkHttpClient.socketFactory` @type ^`javax.net.SocketFactory` @kind object;
  #L45fa38.  return v0 @kind object;
}
procedure `javax.net.ssl.SSLSocketFactory` `sslSocketFactory`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fa64.  v0:= v1.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L45fa68.  return v0 @kind object;
}
procedure `int` `writeTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f98c.  v0:= v1.`okhttp3.OkHttpClient.writeTimeout` @type ^`int`;
  #L45f990.  return v0;
}
