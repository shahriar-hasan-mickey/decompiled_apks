record `okhttp3.RealCall` @kind class @AccessFlag FINAL extends `okhttp3.Call` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.RealCall.client` @AccessFlag FINAL;
  `okhttp3.EventListener` `okhttp3.RealCall.eventListener` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.executed` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.forWebSocket` @AccessFlag FINAL;
  `okhttp3.Request` `okhttp3.RealCall.originalRequest` @AccessFlag FINAL;
  `okhttp3.internal.http.RetryAndFollowUpInterceptor` `okhttp3.RealCall.retryAndFollowUpInterceptor` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.RealCall` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object, `okhttp3.Request` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4606ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4606b2.  v0.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L4606b6.  v0.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` := v2 @kind object;
  #L4606ba.  v0.`okhttp3.RealCall.forWebSocket` @type ^`boolean` := v3 @kind boolean;
  #L4606be.  v2:= new `okhttp3.internal.http.RetryAndFollowUpInterceptor`;
  #L4606c2.  call `<init>`(v2, v1, v3) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @kind direct;
  #L4606c8.  v0.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` := v2 @kind object;
  #L4606cc.  return @kind void;
}
procedure `okhttp3.EventListener` `access$000`(`okhttp3.RealCall` v0 @kind object) @signature `Lokhttp3/RealCall;.access$000:(Lokhttp3/RealCall;)Lokhttp3/EventListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L460420.  v0:= v0.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L460424.  return v0 @kind object;
}
procedure `void` `captureCallStackTrace`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4606fc.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L460702.  v0:= temp @kind object;
  #L460704.  v1:= "response.body().close()" @kind object;
  #L460708.  call temp:= `getStackTraceForCloseable`(v0, v1) @signature `Lokhttp3/internal/platform/Platform;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L46070e.  v0:= temp @kind object;
  #L460710.  v1:= v2.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L460714.  call `setCallStackTrace`(v1, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @kind virtual;
  #L46071a.  return @kind void;
}
procedure `okhttp3.RealCall` `newRealCall`(`okhttp3.OkHttpClient` v1 @kind object, `okhttp3.Request` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @AccessFlag STATIC {
    temp;
    v0;

  #L460460.  v0:= new `okhttp3.RealCall`;
  #L460464.  call `<init>`(v0, v1, v2, v3) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @kind direct;
  #L46046a.  call temp:= `eventListenerFactory`(v1) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @kind virtual;
  #L460470.  v1:= temp @kind object;
  #L460472.  call temp:= `create`(v1, v0) @signature `Lokhttp3/EventListener$Factory;.create:(Lokhttp3/Call;)Lokhttp3/EventListener;` @kind interface;
  #L460478.  v1:= temp @kind object;
  #L46047a.  v0.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` := v1 @kind object;
  #L46047e.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4606e0.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L4606e4.  call `cancel`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @kind virtual;
  #L4606ea.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L460350.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L460356.  v0:= temp @kind object;
  #L460358.  return v0 @kind object;
}
procedure `okhttp3.Call` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L460404.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L46040a.  v0:= temp @kind object;
  #L46040c.  return v0 @kind object;
}
procedure `okhttp3.RealCall` `clone`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L460438.  v0:= v3.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46043c.  v1:= v3.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L460440.  v2:= v3.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L460444.  call temp:= `newRealCall`(v0, v1, v2) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L46044a.  v0:= temp @kind object;
  #L46044c.  return v0 @kind object;
}
procedure `void` `enqueue`(`okhttp3.RealCall` v2 @kind this, `okhttp3.Callback` v3 @kind object) @signature `Lokhttp3/RealCall;.enqueue:(Lokhttp3/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46072c.  @monitorenter v2
  #L46072e.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L460732.  if v0 != 0 then goto L46076c;
  #L460736.  v0:= 1I;
  #L460738.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L46073c.  @monitorexit v2
  #L46073e.  call `captureCallStackTrace`(v2) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L460744.  v0:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L460748.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L46074e.  v0:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L460752.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L460758.  v0:= temp @kind object;
  #L46075a.  v1:= new `okhttp3.RealCall$AsyncCall`;
  #L46075e.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/RealCall$AsyncCall;.<init>:(Lokhttp3/RealCall;Lokhttp3/Callback;)V` @kind direct;
  #L460764.  call `enqueue`(v0, v1) @signature `Lokhttp3/Dispatcher;.enqueue:(Lokhttp3/RealCall$AsyncCall;)V` @kind virtual;
  #L46076a.  return @kind void;
  #L46076c.  v3:= new `java.lang.IllegalStateException`;
  #L460770.  v0:= "Already Executed" @kind object;
  #L460774.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46077a.  throw v3;
  #L46077c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46077e.  @monitorexit v2
  #L460780.  throw v3;
  catch `java.lang.Throwable` @[L46072e..L46073e] goto L46077c;
  catch `java.lang.Throwable` @[L46076c..L460780] goto L46077c;
}
procedure `okhttp3.Response` `execute`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.execute:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4604a8.  @monitorenter v2
  #L4604aa.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L4604ae.  if v0 != 0 then goto L460532;
  #L4604b2.  v0:= 1I;
  #L4604b4.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L4604b8.  @monitorexit v2
  #L4604ba.  call `captureCallStackTrace`(v2) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L4604c0.  v0:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L4604c4.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L4604ca.  v0:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L4604ce.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L4604d4.  v0:= temp @kind object;
  #L4604d6.  call `executed`(v0, v2) @signature `Lokhttp3/Dispatcher;.executed:(Lokhttp3/RealCall;)V` @kind virtual;
  #L4604dc.  call temp:= `getResponseWithInterceptorChain`(v2) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @kind virtual;
  #L4604e2.  v0:= temp @kind object;
  #L4604e4.  if v0 == 0 then goto L4604fc;
  #L4604e8.  v1:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L4604ec.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L4604f2.  v1:= temp @kind object;
  #L4604f4.  call `finished`(v1, v2) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L4604fa.  return v0 @kind object;
  #L4604fc.  v0:= new `java.io.IOException`;
  #L460500.  v1:= "Canceled" @kind object;
  #L460504.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46050a.  throw v0;
  #L46050c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46050e.  goto L46051e;
  #L460510.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L460512.  v1:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L460516.  call `callFailed`(v1, v2, v0) @signature `Lokhttp3/EventListener;.callFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L46051c.  throw v0;
  #L46051e.  v1:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L460522.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L460528.  v1:= temp @kind object;
  #L46052a.  call `finished`(v1, v2) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L460530.  throw v0;
  #L460532.  v0:= new `java.lang.IllegalStateException`;
  #L460536.  v1:= "Already Executed" @kind object;
  #L46053a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L460540.  throw v0;
  #L460542.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L460544.  @monitorexit v2
  #L460546.  throw v0;
  catch `java.lang.Throwable` @[L4604aa..L4604ba] goto L460542;
  catch `java.io.IOException` @[L4604ca..L4604e4] goto L460510;
  catch `java.lang.Throwable` @[L4604ca..L4604e4] goto L46050c;
  catch `java.io.IOException` @[L4604fc..L46050c] goto L460510;
  catch `java.lang.Throwable` @[L4604fc..L46050c] goto L46050c;
  catch `java.lang.Throwable` @[L460512..L46051e] goto L46050c;
  catch `java.lang.Throwable` @[L460532..L460546] goto L460542;
}
procedure `okhttp3.Response` `getResponseWithInterceptorChain`(`okhttp3.RealCall` v13 @kind this) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L46058c.  v1:= new `java.util.ArrayList`;
  #L460590.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L460596.  v0:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46059a.  call temp:= `interceptors`(v0) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @kind virtual;
  #L4605a0.  v0:= temp @kind object;
  #L4605a2.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L4605a8.  v0:= v13.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L4605ac.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4605b2.  v0:= new `okhttp3.internal.http.BridgeInterceptor`;
  #L4605b6.  v2:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L4605ba.  call temp:= `cookieJar`(v2) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L4605c0.  v2:= temp @kind object;
  #L4605c2.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http/BridgeInterceptor;.<init>:(Lokhttp3/CookieJar;)V` @kind direct;
  #L4605c8.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4605ce.  v0:= new `okhttp3.internal.cache.CacheInterceptor`;
  #L4605d2.  v2:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L4605d6.  call temp:= `internalCache`(v2) @signature `Lokhttp3/OkHttpClient;.internalCache:()Lokhttp3/internal/cache/InternalCache;` @kind virtual;
  #L4605dc.  v2:= temp @kind object;
  #L4605de.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/cache/CacheInterceptor;.<init>:(Lokhttp3/internal/cache/InternalCache;)V` @kind direct;
  #L4605e4.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4605ea.  v0:= new `okhttp3.internal.connection.ConnectInterceptor`;
  #L4605ee.  v2:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L4605f2.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/connection/ConnectInterceptor;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L4605f8.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4605fe.  v0:= v13.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L460602.  if v0 != 0 then goto L460618;
  #L460606.  v0:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46060a.  call temp:= `networkInterceptors`(v0) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @kind virtual;
  #L460610.  v0:= temp @kind object;
  #L460612.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L460618.  v0:= new `okhttp3.internal.http.CallServerInterceptor`;
  #L46061c.  v2:= v13.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L460620.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @kind direct;
  #L460626.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46062c.  v12:= new `okhttp3.internal.http.RealInterceptorChain`;
  #L460630.  v2:= 0I;
  #L460632.  v3:= 0I;
  #L460634.  v4:= 0I;
  #L460636.  v5:= 0I;
  #L460638.  v6:= v13.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L46063c.  v8:= v13.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L460640.  v0:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L460644.  call temp:= `connectTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @kind virtual;
  #L46064a.  v9:= temp;
  #L46064c.  v0:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L460650.  call temp:= `readTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @kind virtual;
  #L460656.  v10:= temp;
  #L460658.  v0:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L46065c.  call temp:= `writeTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @kind virtual;
  #L460662.  v11:= temp;
  #L460664.  v0:= v12 @kind object;
  #L460666.  v7:= v13 @kind object;
  #L460668.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lokhttp3/internal/http/RealInterceptorChain;.<init>:(Ljava/util/List;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;ILokhttp3/Request;Lokhttp3/Call;Lokhttp3/EventListener;III)V` @kind direct;
  #L46066e.  v0:= v13.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L460672.  call temp:= `proceed`(v12, v0) @signature `Lokhttp3/Interceptor$Chain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind interface;
  #L460678.  v0:= temp @kind object;
  #L46067a.  return v0 @kind object;
}
procedure `boolean` `isCanceled`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460304.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L460308.  call temp:= `isCanceled`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @kind virtual;
  #L46030e.  v0:= temp;
  #L460310.  return v0;
}
procedure `boolean` `isExecuted`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460324.  @monitorenter v1
  #L460326.  v0:= v1.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L46032a.  @monitorexit v1
  #L46032c.  return v0;
  #L46032e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L460330.  @monitorexit v1
  #L460332.  throw v0;
  catch `java.lang.Throwable` @[L460326..L46032a] goto L46032e;
}
procedure `java.lang.String` `redactedUrl`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;

  #L46036c.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L460370.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L460376.  v0:= temp @kind object;
  #L460378.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L46037e.  v0:= temp @kind object;
  #L460380.  return v0 @kind object;
}
procedure `okhttp3.Request` `request`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460490.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L460494.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag  {
    temp;
    v0;

  #L46068c.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L460690.  call temp:= `streamAllocation`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @kind virtual;
  #L460696.  v0:= temp @kind object;
  #L460698.  return v0 @kind object;
}
procedure `java.lang.String` `toLoggableString`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.toLoggableString:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L460394.  v0:= new `java.lang.StringBuilder`;
  #L460398.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L46039e.  call temp:= `isCanceled`(v2) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @kind virtual;
  #L4603a4.  v1:= temp;
  #L4603a6.  if v1 == 0 then goto L4603b0;
  #L4603aa.  v1:= "canceled " @kind object;
  #L4603ae.  goto L4603b4;
  #L4603b0.  v1:= "" @kind object;
  #L4603b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4603ba.  v1:= v2.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L4603be.  if v1 == 0 then goto L4603c8;
  #L4603c2.  v1:= "web socket" @kind object;
  #L4603c6.  goto L4603cc;
  #L4603c8.  v1:= "call" @kind object;
  #L4603cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4603d2.  v1:= " to " @kind object;
  #L4603d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4603dc.  call temp:= `redactedUrl`(v2) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @kind virtual;
  #L4603e2.  v1:= temp @kind object;
  #L4603e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4603ea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4603f0.  v0:= temp @kind object;
  #L4603f2.  return v0 @kind object;
}
