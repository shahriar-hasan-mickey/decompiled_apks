record `okhttp3.Response` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okhttp3.ResponseBody` `okhttp3.Response.body` @AccessFlag FINAL;
  `okhttp3.CacheControl` `okhttp3.Response.cacheControl` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.Response` `okhttp3.Response.cacheResponse` @AccessFlag FINAL;
  `int` `okhttp3.Response.code` @AccessFlag FINAL;
  `okhttp3.Handshake` `okhttp3.Response.handshake` @AccessFlag FINAL;
  `okhttp3.Headers` `okhttp3.Response.headers` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.Response.message` @AccessFlag FINAL;
  `okhttp3.Response` `okhttp3.Response.networkResponse` @AccessFlag FINAL;
  `okhttp3.Response` `okhttp3.Response.priorResponse` @AccessFlag FINAL;
  `okhttp3.Protocol` `okhttp3.Response.protocol` @AccessFlag FINAL;
  `long` `okhttp3.Response.receivedResponseAtMillis` @AccessFlag FINAL;
  `okhttp3.Request` `okhttp3.Response.request` @AccessFlag FINAL;
  `long` `okhttp3.Response.sentRequestAtMillis` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.Response` v2 @kind this, `okhttp3.Response$Builder` v3 @kind object) @signature `Lokhttp3/Response;.<init>:(Lokhttp3/Response$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L461cb0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L461cb6.  v0:= v3.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` @kind object;
  #L461cba.  v2.`okhttp3.Response.request` @type ^`okhttp3.Request` := v0 @kind object;
  #L461cbe.  v0:= v3.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L461cc2.  v2.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L461cc6.  v0:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L461cca.  v2.`okhttp3.Response.code` @type ^`int` := v0;
  #L461cce.  v0:= v3.`okhttp3.Response$Builder.message` @type ^`java.lang.String` @kind object;
  #L461cd2.  v2.`okhttp3.Response.message` @type ^`java.lang.String` := v0 @kind object;
  #L461cd6.  v0:= v3.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L461cda.  v2.`okhttp3.Response.handshake` @type ^`okhttp3.Handshake` := v0 @kind object;
  #L461cde.  v0:= v3.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L461ce2.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L461ce8.  v0:= temp @kind object;
  #L461cea.  v2.`okhttp3.Response.headers` @type ^`okhttp3.Headers` := v0 @kind object;
  #L461cee.  v0:= v3.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L461cf2.  v2.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L461cf6.  v0:= v3.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L461cfa.  v2.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L461cfe.  v0:= v3.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L461d02.  v2.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L461d06.  v0:= v3.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L461d0a.  v2.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L461d0e.  v0:= v3.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` @kind wide;
  #L461d12.  v2.`okhttp3.Response.sentRequestAtMillis` @type ^`long` := v0 @kind wide;
  #L461d16.  v0:= v3.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L461d1a.  v2.`okhttp3.Response.receivedResponseAtMillis` @type ^`long` := v0 @kind wide;
  #L461d1e.  return @kind void;
}
procedure `okhttp3.ResponseBody` `body`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461c20.  v0:= v1.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L461c24.  return v0 @kind object;
}
procedure `okhttp3.CacheControl` `cacheControl`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.cacheControl:()Lokhttp3/CacheControl;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461b30.  v0:= v1.`okhttp3.Response.cacheControl` @type ^`okhttp3.CacheControl` @kind object;
  #L461b34.  if v0 == 0 then goto L461b3a;
  #L461b38.  goto L461b4a;
  #L461b3a.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L461b3e.  call temp:= `parse`(v0) @signature `Lokhttp3/CacheControl;.parse:(Lokhttp3/Headers;)Lokhttp3/CacheControl;` @kind static;
  #L461b44.  v0:= temp @kind object;
  #L461b46.  v1.`okhttp3.Response.cacheControl` @type ^`okhttp3.CacheControl` := v0 @kind object;
  #L461b4a.  return v0 @kind object;
}
procedure `okhttp3.Response` `cacheResponse`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.cacheResponse:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461bbc.  v0:= v1.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L461bc0.  return v0 @kind object;
}
procedure `java.util.List` `challenges`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.challenges:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461a94.  v0:= v2.`okhttp3.Response.code` @type ^`int`;
  #L461a98.  v1:= 401I;
  #L461a9c.  if v0 != v1 then goto L461aa6;
  #L461aa0.  v0:= "WWW-Authenticate" @kind object;
  #L461aa4.  goto L461ab2;
  #L461aa6.  v1:= 407I;
  #L461aaa.  if v0 != v1 then goto L461ac4;
  #L461aae.  v0:= "Proxy-Authenticate" @kind object;
  #L461ab2.  call temp:= `headers`(v2) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L461ab8.  v1:= temp @kind object;
  #L461aba.  call temp:= `parseChallenges`(v1, v0) @signature `Lokhttp3/internal/http/HttpHeaders;.parseChallenges:(Lokhttp3/Headers;Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L461ac0.  v0:= temp @kind object;
  #L461ac2.  return v0 @kind object;
  #L461ac4.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L461aca.  v0:= temp @kind object;
  #L461acc.  return v0 @kind object;
}
procedure `void` `close`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461d30.  v0:= v2.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L461d34.  if v0 == 0 then goto L461d40;
  #L461d38.  call `close`(v0) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L461d3e.  return @kind void;
  #L461d40.  v0:= new `java.lang.IllegalStateException`;
  #L461d44.  v1:= "response is not eligible for a body and must not be closed" @kind object;
  #L461d48.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L461d4e.  throw v0;
}
procedure `int` `code`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461998.  v0:= v1.`okhttp3.Response.code` @type ^`int`;
  #L46199c.  return v0;
}
procedure `okhttp3.Handshake` `handshake`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.handshake:()Lokhttp3/Handshake;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461b5c.  v0:= v1.`okhttp3.Response.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L461b60.  return v0 @kind object;
}
procedure `java.lang.String` `header`(`okhttp3.Response` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4619b0.  v0:= 0I;
  #L4619b2.  call temp:= `header`(v1, v2, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L4619b8.  v2:= temp @kind object;
  #L4619ba.  return v2 @kind object;
}
procedure `java.lang.String` `header`(`okhttp3.Response` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4619cc.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L4619d0.  call temp:= `get`(v0, v2) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L4619d6.  v2:= temp @kind object;
  #L4619d8.  if v2 == 0 then goto L4619de;
  #L4619dc.  goto L4619e0;
  #L4619de.  v2:= v3 @kind object;
  #L4619e0.  return v2 @kind object;
}
procedure `java.util.List` `headers`(`okhttp3.Response` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response;.headers:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461ae0.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L461ae4.  call temp:= `values`(v0, v2) @signature `Lokhttp3/Headers;.values:(Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L461aea.  v2:= temp @kind object;
  #L461aec.  return v2 @kind object;
}
procedure `okhttp3.Headers` `headers`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461b74.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L461b78.  return v0 @kind object;
}
procedure `boolean` `isRedirect`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.isRedirect:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461920.  v0:= v2.`okhttp3.Response.code` @type ^`int`;
  #L461924.  v1:= 307I;
  #L461928.  if v0 == v1 then goto L46193e;
  #L46192c.  v1:= 308I;
  #L461930.  if v0 == v1 then goto L46193e;
  #L461934.  goto L461944;
  #L46193a.  v0:= 0I;
  #L46193c.  return v0;
  #L46193e.  v0:= 1I;
  #L461940.  return v0;
  #L461942.  
  #L461944.  switch v0
                  | 300 => goto L46193e
                  | 301 => goto L46193e
                  | 302 => goto L46193e
                  | 303 => goto L46193e
                  | else => goto L46193a;
}
procedure `boolean` `isSuccessful`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.isSuccessful:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46196c.  v0:= v2.`okhttp3.Response.code` @type ^`int`;
  #L461970.  v1:= 200I;
  #L461974.  if v0 < v1 then goto L461984;
  #L461978.  v1:= 300I;
  #L46197c.  if v0 >= v1 then goto L461984;
  #L461980.  v0:= 1I;
  #L461982.  goto L461986;
  #L461984.  v0:= 0I;
  #L461986.  return v0;
}
procedure `java.lang.String` `message`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4619f4.  v0:= v1.`okhttp3.Response.message` @type ^`java.lang.String` @kind object;
  #L4619f8.  return v0 @kind object;
}
procedure `okhttp3.Response` `networkResponse`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.networkResponse:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461bd4.  v0:= v1.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L461bd8.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `newBuilder`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461c04.  v0:= new `okhttp3.Response$Builder`;
  #L461c08.  call `<init>`(v0, v1) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @kind direct;
  #L461c0e.  return v0 @kind object;
}
procedure `okhttp3.ResponseBody` `peekBody`(`okhttp3.Response` v4 @kind this, `long` v5 ) @signature `Lokhttp3/Response;.peekBody:(J)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L461c38.  v0:= v4.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L461c3c.  call temp:= `source`(v0) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L461c42.  v0:= temp @kind object;
  #L461c44.  call temp:= `request`(v0, v5) @signature `Lokio/BufferedSource;.request:(J)Z` @kind interface;
  #L461c4a.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L461c50.  v0:= temp @kind object;
  #L461c52.  call temp:= `clone`(v0) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L461c58.  v0:= temp @kind object;
  #L461c5a.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L461c60.  v1:= temp @kind wide;
  #L461c62.  v3:= lcmp(v1, v5);
  #L461c66.  if v3 <= 0 then goto L461c82;
  #L461c6a.  v1:= new `okio.Buffer`;
  #L461c6e.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L461c74.  call `write`(v1, v0, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L461c7a.  call `clear`(v0) @signature `Lokio/Buffer;.clear:()V` @kind virtual;
  #L461c80.  v0:= v1 @kind object;
  #L461c82.  v5:= v4.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L461c86.  call temp:= `contentType`(v5) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L461c8c.  v5:= temp @kind object;
  #L461c8e.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L461c94.  v1:= temp @kind wide;
  #L461c96.  call temp:= `create`(v5, v1, v0) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;` @kind static;
  #L461c9c.  v5:= temp @kind object;
  #L461c9e.  return v5 @kind object;
}
procedure `okhttp3.Response` `priorResponse`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461bec.  v0:= v1.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L461bf0.  return v0 @kind object;
}
procedure `okhttp3.Protocol` `protocol`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.protocol:()Lokhttp3/Protocol;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461b8c.  v0:= v1.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L461b90.  return v0 @kind object;
}
procedure `long` `receivedResponseAtMillis`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.receivedResponseAtMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461b00.  v0:= v2.`okhttp3.Response.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L461b04.  return v0 @kind wide;
}
procedure `okhttp3.Request` `request`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461ba4.  v0:= v1.`okhttp3.Response.request` @type ^`okhttp3.Request` @kind object;
  #L461ba8.  return v0 @kind object;
}
procedure `long` `sentRequestAtMillis`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.sentRequestAtMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461b18.  v0:= v2.`okhttp3.Response.sentRequestAtMillis` @type ^`long` @kind wide;
  #L461b1c.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461a0c.  v0:= new `java.lang.StringBuilder`;
  #L461a10.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L461a16.  v1:= "Response{protocol=" @kind object;
  #L461a1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461a20.  v1:= v2.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L461a24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461a2a.  v1:= ", code=" @kind object;
  #L461a2e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461a34.  v1:= v2.`okhttp3.Response.code` @type ^`int`;
  #L461a38.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L461a3e.  v1:= ", message=" @kind object;
  #L461a42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461a48.  v1:= v2.`okhttp3.Response.message` @type ^`java.lang.String` @kind object;
  #L461a4c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461a52.  v1:= ", url=" @kind object;
  #L461a56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461a5c.  v1:= v2.`okhttp3.Response.request` @type ^`okhttp3.Request` @kind object;
  #L461a60.  call temp:= `url`(v1) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L461a66.  v1:= temp @kind object;
  #L461a68.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461a6e.  v1:= 125I;
  #L461a72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L461a78.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L461a7e.  v0:= temp @kind object;
  #L461a80.  return v0 @kind object;
}
