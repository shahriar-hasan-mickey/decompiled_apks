record `okhttp3.Handshake` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.CipherSuite` `okhttp3.Handshake.cipherSuite` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.localCertificates` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.peerCertificates` @AccessFlag PRIVATE_FINAL;
  `okhttp3.TlsVersion` `okhttp3.Handshake.tlsVersion` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Handshake` v0 @kind this, `okhttp3.TlsVersion` v1 @kind object, `okhttp3.CipherSuite` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L45b784.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45b78a.  v0.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` := v1 @kind object;
  #L45b78e.  v0.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` := v2 @kind object;
  #L45b792.  v0.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` := v3 @kind object;
  #L45b796.  v0.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` := v4 @kind object;
  #L45b79a.  return @kind void;
}
procedure `okhttp3.Handshake` `get`(`javax.net.ssl.SSLSession` v4 @kind object) @signature `Lokhttp3/Handshake;.get:(Ljavax/net/ssl/SSLSession;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45b664.  call temp:= `getCipherSuite`(v4) @signature `Ljavax/net/ssl/SSLSession;.getCipherSuite:()Ljava/lang/String;` @kind interface;
  #L45b66a.  v0:= temp @kind object;
  #L45b66c.  if v0 == 0 then goto L45b6e8;
  #L45b670.  call temp:= `forJavaName`(v0) @signature `Lokhttp3/CipherSuite;.forJavaName:(Ljava/lang/String;)Lokhttp3/CipherSuite;` @kind static;
  #L45b676.  v0:= temp @kind object;
  #L45b678.  call temp:= `getProtocol`(v4) @signature `Ljavax/net/ssl/SSLSession;.getProtocol:()Ljava/lang/String;` @kind interface;
  #L45b67e.  v1:= temp @kind object;
  #L45b680.  if v1 == 0 then goto L45b6d8;
  #L45b684.  call temp:= `forJavaName`(v1) @signature `Lokhttp3/TlsVersion;.forJavaName:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @kind static;
  #L45b68a.  v1:= temp @kind object;
  #L45b68c.  call temp:= `getPeerCertificates`(v4) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L45b692.  v2:= temp @kind object;
  #L45b694.  goto L45b698;
  #L45b696.  v2:= 0I;
  #L45b698.  if v2 == 0 then goto L45b6a6;
  #L45b69c.  call temp:= `immutableList`(v2) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L45b6a2.  v2:= temp @kind object;
  #L45b6a4.  goto L45b6ae;
  #L45b6a6.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L45b6ac.  v2:= temp @kind object;
  #L45b6ae.  call temp:= `getLocalCertificates`(v4) @signature `Ljavax/net/ssl/SSLSession;.getLocalCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L45b6b4.  v4:= temp @kind object;
  #L45b6b6.  if v4 == 0 then goto L45b6c4;
  #L45b6ba.  call temp:= `immutableList`(v4) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L45b6c0.  v4:= temp @kind object;
  #L45b6c2.  goto L45b6cc;
  #L45b6c4.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L45b6ca.  v4:= temp @kind object;
  #L45b6cc.  v3:= new `okhttp3.Handshake`;
  #L45b6d0.  call `<init>`(v3, v1, v0, v2, v4) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L45b6d6.  return v3 @kind object;
  #L45b6d8.  v4:= new `java.lang.IllegalStateException`;
  #L45b6dc.  v0:= "tlsVersion == null" @kind object;
  #L45b6e0.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45b6e6.  throw v4;
  #L45b6e8.  v4:= new `java.lang.IllegalStateException`;
  #L45b6ec.  v0:= "cipherSuite == null" @kind object;
  #L45b6f0.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45b6f6.  throw v4;
  catch `javax.net.ssl.SSLPeerUnverifiedException` @[L45b68c..L45b694] goto L45b696;
}
procedure `okhttp3.Handshake` `get`(`okhttp3.TlsVersion` v1 @kind object, `okhttp3.CipherSuite` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.get:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45b718.  if v1 == 0 then goto L45b74c;
  #L45b71c.  if v2 == 0 then goto L45b73c;
  #L45b720.  v0:= new `okhttp3.Handshake`;
  #L45b724.  call temp:= `immutableList`(v3) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L45b72a.  v3:= temp @kind object;
  #L45b72c.  call temp:= `immutableList`(v4) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L45b732.  v4:= temp @kind object;
  #L45b734.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L45b73a.  return v0 @kind object;
  #L45b73c.  v1:= new `java.lang.NullPointerException`;
  #L45b740.  v2:= "cipherSuite == null" @kind object;
  #L45b744.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45b74a.  throw v1;
  #L45b74c.  v1:= new `java.lang.NullPointerException`;
  #L45b750.  v2:= "tlsVersion == null" @kind object;
  #L45b754.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45b75a.  throw v1;
}
procedure `okhttp3.CipherSuite` `cipherSuite`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.cipherSuite:()Lokhttp3/CipherSuite;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b64c.  v0:= v1.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L45b650.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.Handshake` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lokhttp3/Handshake;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45b4cc.  v0:= instanceof @variable v4 @type ^`okhttp3.Handshake` @kind boolean;
  #L45b4d0.  v1:= 0I;
  #L45b4d2.  if v0 != 0 then goto L45b4d8;
  #L45b4d6.  return v1;
  #L45b4d8.  v4:= (`okhttp3.Handshake`) v4 @kind object;
  #L45b4dc.  v0:= v3.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L45b4e0.  v2:= v4.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L45b4e4.  call temp:= `equals`(v0, v2) @signature `Lokhttp3/TlsVersion;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45b4ea.  v0:= temp;
  #L45b4ec.  if v0 == 0 then goto L45b52e;
  #L45b4f0.  v0:= v3.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L45b4f4.  v2:= v4.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L45b4f8.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45b4fe.  v0:= temp;
  #L45b500.  if v0 == 0 then goto L45b52e;
  #L45b504.  v0:= v3.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L45b508.  v2:= v4.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L45b50c.  call temp:= `equals`(v0, v2) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L45b512.  v0:= temp;
  #L45b514.  if v0 == 0 then goto L45b52e;
  #L45b518.  v0:= v3.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L45b51c.  v4:= v4.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L45b520.  call temp:= `equals`(v0, v4) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L45b526.  v4:= temp;
  #L45b528.  if v4 == 0 then goto L45b52e;
  #L45b52c.  v1:= 1I;
  #L45b52e.  return v1;
}
procedure `int` `hashCode`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45b540.  v0:= v2.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L45b544.  call temp:= `hashCode`(v0) @signature `Lokhttp3/TlsVersion;.hashCode:()I` @kind virtual;
  #L45b54a.  v0:= temp;
  #L45b54c.  v1:= 527I;
  #L45b550.  v1:= v1 + v0 @kind int;
  #L45b552.  v1:= v1 * 31;
  #L45b556.  v0:= v2.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L45b55a.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L45b560.  v0:= temp;
  #L45b562.  v1:= v1 + v0 @kind int;
  #L45b564.  v1:= v1 * 31;
  #L45b568.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L45b56c.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L45b572.  v0:= temp;
  #L45b574.  v1:= v1 + v0 @kind int;
  #L45b576.  v1:= v1 * 31;
  #L45b57a.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L45b57e.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L45b584.  v0:= temp;
  #L45b586.  v1:= v1 + v0 @kind int;
  #L45b588.  return v1;
}
procedure `java.util.List` `localCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.localCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b61c.  v0:= v1.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L45b620.  return v0 @kind object;
}
procedure `java.security.Principal` `localPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.localPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45b59c.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L45b5a0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L45b5a6.  v0:= temp;
  #L45b5a8.  if v0 != 0 then goto L45b5c8;
  #L45b5ac.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L45b5b0.  v1:= 0I;
  #L45b5b2.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45b5b8.  v0:= temp @kind object;
  #L45b5ba.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L45b5be.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L45b5c4.  v0:= temp @kind object;
  #L45b5c6.  goto L45b5ca;
  #L45b5c8.  v0:= 0I;
  #L45b5ca.  return v0 @kind object;
}
procedure `java.util.List` `peerCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.peerCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b634.  v0:= v1.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L45b638.  return v0 @kind object;
}
procedure `java.security.Principal` `peerPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.peerPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45b5dc.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L45b5e0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L45b5e6.  v0:= temp;
  #L45b5e8.  if v0 != 0 then goto L45b608;
  #L45b5ec.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L45b5f0.  v1:= 0I;
  #L45b5f2.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45b5f8.  v0:= temp @kind object;
  #L45b5fa.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L45b5fe.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L45b604.  v0:= temp @kind object;
  #L45b606.  goto L45b60a;
  #L45b608.  v0:= 0I;
  #L45b60a.  return v0 @kind object;
}
procedure `okhttp3.TlsVersion` `tlsVersion`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.tlsVersion:()Lokhttp3/TlsVersion;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b76c.  v0:= v1.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L45b770.  return v0 @kind object;
}
