record `okhttp3.ConnectionSpec$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.cipherSuites` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.tls` @AccessFlag ;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.tlsVersions` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `okhttp3.ConnectionSpec` v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4592a8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4592ae.  v0:= v2.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L4592b2.  v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v0 @kind boolean;
  #L4592b6.  v0:= v2.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L4592ba.  v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L4592be.  v0:= v2.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L4592c2.  v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L4592c6.  v2:= v2.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L4592ca.  v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v2 @kind boolean;
  #L4592ce.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45928c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L459292.  v0.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v1 @kind boolean;
  #L459296.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledCipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledCipherSuites:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4590ac.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L4590b0.  if v0 == 0 then goto L4590bc;
  #L4590b4.  v0:= 0I;
  #L4590b6.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L4590ba.  return v2 @kind object;
  #L4590bc.  v0:= new `java.lang.IllegalStateException`;
  #L4590c0.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L4590c4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4590ca.  throw v0;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledTlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledTlsVersions:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4590dc.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L4590e0.  if v0 == 0 then goto L4590ec;
  #L4590e4.  v0:= 0I;
  #L4590e6.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L4590ea.  return v2 @kind object;
  #L4590ec.  v0:= new `java.lang.IllegalStateException`;
  #L4590f0.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L4590f4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4590fa.  throw v0;
}
procedure `okhttp3.ConnectionSpec` `build`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L459090.  v0:= new `okhttp3.ConnectionSpec`;
  #L459094.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @kind direct;
  #L45909a.  return v0 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45910c.  v0:= v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L459110.  if v0 == 0 then goto L45913c;
  #L459114.  v0:= length @variable v2;
  #L459116.  if v0 == 0 then goto L45912c;
  #L45911a.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L459120.  v2:= temp @kind object;
  #L459122.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L459126.  v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v2 @kind object;
  #L45912a.  return v1 @kind object;
  #L45912c.  v2:= new `java.lang.IllegalArgumentException`;
  #L459130.  v0:= "At least one cipher suite is required" @kind object;
  #L459134.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45913a.  throw v2;
  #L45913c.  v2:= new `java.lang.IllegalStateException`;
  #L459140.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L459144.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45914a.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v3 @kind this, `okhttp3.CipherSuite`[] v4 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45915c.  v0:= v3.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L459160.  if v0 == 0 then goto L45918e;
  #L459164.  v0:= length @variable v4;
  #L459166.  v0:= new `java.lang.String`[v0];
  #L45916a.  v1:= 0I;
  #L45916c.  v2:= length @variable v4;
  #L45916e.  if v1 >= v2 then goto L459184;
  #L459172.  v2:= v4[v1] @kind object;
  #L459176.  v2:= v2.`okhttp3.CipherSuite.javaName` @type ^`java.lang.String` @kind object;
  #L45917a.  v0[v1]:= v2 @kind object;
  #L45917e.  v1:= v1 + 1;
  #L459182.  goto L45916c;
  #L459184.  call temp:= `cipherSuites`(v3, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L45918a.  v4:= temp @kind object;
  #L45918c.  return v4 @kind object;
  #L45918e.  v4:= new `java.lang.IllegalStateException`;
  #L459192.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L459196.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45919c.  goto L4591a0;
  #L45919e.  throw v4;
  #L4591a0.  goto L45919e;
}
procedure `okhttp3.ConnectionSpec$Builder` `supportsTlsExtensions`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `boolean` v2 ) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4591b4.  v0:= v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L4591b8.  if v0 == 0 then goto L4591c2;
  #L4591bc.  v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v2 @kind boolean;
  #L4591c0.  return v1 @kind object;
  #L4591c2.  v2:= new `java.lang.IllegalStateException`;
  #L4591c6.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L4591ca.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4591d0.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4591e4.  v0:= v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L4591e8.  if v0 == 0 then goto L459214;
  #L4591ec.  v0:= length @variable v2;
  #L4591ee.  if v0 == 0 then goto L459204;
  #L4591f2.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4591f8.  v2:= temp @kind object;
  #L4591fa.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L4591fe.  v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v2 @kind object;
  #L459202.  return v1 @kind object;
  #L459204.  v2:= new `java.lang.IllegalArgumentException`;
  #L459208.  v0:= "At least one TLS version is required" @kind object;
  #L45920c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L459212.  throw v2;
  #L459214.  v2:= new `java.lang.IllegalStateException`;
  #L459218.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L45921c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L459222.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v3 @kind this, `okhttp3.TlsVersion`[] v4 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L459234.  v0:= v3.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L459238.  if v0 == 0 then goto L459266;
  #L45923c.  v0:= length @variable v4;
  #L45923e.  v0:= new `java.lang.String`[v0];
  #L459242.  v1:= 0I;
  #L459244.  v2:= length @variable v4;
  #L459246.  if v1 >= v2 then goto L45925c;
  #L45924a.  v2:= v4[v1] @kind object;
  #L45924e.  v2:= v2.`okhttp3.TlsVersion.javaName` @type ^`java.lang.String` @kind object;
  #L459252.  v0[v1]:= v2 @kind object;
  #L459256.  v1:= v1 + 1;
  #L45925a.  goto L459244;
  #L45925c.  call temp:= `tlsVersions`(v3, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L459262.  v4:= temp @kind object;
  #L459264.  return v4 @kind object;
  #L459266.  v4:= new `java.lang.IllegalStateException`;
  #L45926a.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L45926e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L459274.  goto L459278;
  #L459276.  throw v4;
  #L459278.  goto L459276;
}
