record `okhttp3.ConnectionPool` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Runnable` `okhttp3.ConnectionPool.cleanupRunnable` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.ConnectionPool.cleanupRunning` @AccessFlag ;
  `java.util.Deque` `okhttp3.ConnectionPool.connections` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.ConnectionPool.keepAliveDurationNs` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.ConnectionPool.maxIdleConnections` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.RouteDatabase` `okhttp3.ConnectionPool.routeDatabase` @AccessFlag FINAL;
}
global `boolean` `@@okhttp3.ConnectionPool.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.Executor` `@@okhttp3.ConnectionPool.executor` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/ConnectionPool;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L458ea4.  v8:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L458ea8.  v1:= 0I;
  #L458eaa.  v2:= 2147483647I;
  #L458eb0.  v3:= 60L;
  #L458eb4.  v5:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L458eb8.  v6:= new `java.util.concurrent.SynchronousQueue`;
  #L458ebc.  call `<init>`(v6) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L458ec2.  v0:= 1I;
  #L458ec4.  v7:= "OkHttp ConnectionPool" @kind object;
  #L458ec8.  call temp:= `threadFactory`(v7, v0) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L458ece.  v7:= temp @kind object;
  #L458ed0.  v0:= v8 @kind object;
  #L458ed2.  call `<init>`(v0, v1, v2, v3, v5, v6, v7) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L458ed8.  `@@okhttp3.ConnectionPool.executor` @type ^`java.util.concurrent.Executor` := v8 @kind object;
  #L458edc.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionPool` v4 @kind this) @signature `Lokhttp3/ConnectionPool;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L458ef0.  v0:= `@@java.util.concurrent.TimeUnit.MINUTES` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L458ef4.  v1:= 5I;
  #L458ef6.  v2:= 5L;
  #L458efa.  call `<init>`(v4, v1, v2, v0) @signature `Lokhttp3/ConnectionPool;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L458f00.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionPool` v2 @kind this, `int` v3 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lokhttp3/ConnectionPool;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L458f14.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L458f1a.  v0:= new `okhttp3.ConnectionPool$1`;
  #L458f1e.  call `<init>`(v0, v2) @signature `Lokhttp3/ConnectionPool$1;.<init>:(Lokhttp3/ConnectionPool;)V` @kind direct;
  #L458f24.  v2.`okhttp3.ConnectionPool.cleanupRunnable` @type ^`java.lang.Runnable` := v0 @kind object;
  #L458f28.  v0:= new `java.util.ArrayDeque`;
  #L458f2c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L458f32.  v2.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` := v0 @kind object;
  #L458f36.  v0:= new `okhttp3.internal.connection.RouteDatabase`;
  #L458f3a.  call `<init>`(v0) @signature `Lokhttp3/internal/connection/RouteDatabase;.<init>:()V` @kind direct;
  #L458f40.  v2.`okhttp3.ConnectionPool.routeDatabase` @type ^`okhttp3.internal.connection.RouteDatabase` := v0 @kind object;
  #L458f44.  v2.`okhttp3.ConnectionPool.maxIdleConnections` @type ^`int` := v3;
  #L458f48.  call temp:= `toNanos`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L458f4e.  v0:= temp @kind wide;
  #L458f50.  v2.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` := v0 @kind wide;
  #L458f54.  v0:= 0L;
  #L458f58.  v3:= lcmp(v4, v0);
  #L458f5c.  if v3 <= 0 then goto L458f62;
  #L458f60.  return @kind void;
  #L458f62.  v3:= new `java.lang.IllegalArgumentException`;
  #L458f66.  v6:= new `java.lang.StringBuilder`;
  #L458f6a.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L458f70.  v0:= "keepAliveDuration <= 0: " @kind object;
  #L458f74.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L458f7a.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L458f80.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L458f86.  v4:= temp @kind object;
  #L458f88.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L458f8e.  throw v3;
}
procedure `int` `pruneAndGetAllocationCount`(`okhttp3.ConnectionPool` v6 @kind this, `okhttp3.internal.connection.RealConnection` v7 @kind object, `long` v8 ) @signature `Lokhttp3/ConnectionPool;.pruneAndGetAllocationCount:(Lokhttp3/internal/connection/RealConnection;J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L458c34.  v0:= v7.`okhttp3.internal.connection.RealConnection.allocations` @type ^`java.util.List` @kind object;
  #L458c38.  v1:= 0I;
  #L458c3a.  v2:= 0I;
  #L458c3c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L458c42.  v3:= temp;
  #L458c44.  if v2 >= v3 then goto L458ce4;
  #L458c48.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L458c4e.  v3:= temp @kind object;
  #L458c50.  v3:= (`java.lang.ref.Reference`) v3 @kind object;
  #L458c54.  call temp:= `get`(v3) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L458c5a.  v4:= temp @kind object;
  #L458c5c.  if v4 == 0 then goto L458c66;
  #L458c60.  v2:= v2 + 1;
  #L458c64.  goto L458c3c;
  #L458c66.  v3:= (`okhttp3.internal.connection.StreamAllocation$StreamAllocationReference`) v3 @kind object;
  #L458c6a.  v4:= new `java.lang.StringBuilder`;
  #L458c6e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L458c74.  v5:= "A connection to " @kind object;
  #L458c78.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L458c7e.  call temp:= `route`(v7) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L458c84.  v5:= temp @kind object;
  #L458c86.  call temp:= `address`(v5) @signature `Lokhttp3/Route;.address:()Lokhttp3/Address;` @kind virtual;
  #L458c8c.  v5:= temp @kind object;
  #L458c8e.  call temp:= `url`(v5) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L458c94.  v5:= temp @kind object;
  #L458c96.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L458c9c.  v5:= " was leaked. Did you forget to close a response body?" @kind object;
  #L458ca0.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L458ca6.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L458cac.  v4:= temp @kind object;
  #L458cae.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L458cb4.  v5:= temp @kind object;
  #L458cb6.  v3:= v3.`okhttp3.internal.connection.StreamAllocation$StreamAllocationReference.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L458cba.  call `logCloseableLeak`(v5, v4, v3) @signature `Lokhttp3/internal/platform/Platform;.logCloseableLeak:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L458cc0.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L458cc6.  v3:= 1I;
  #L458cc8.  v7.`okhttp3.internal.connection.RealConnection.noNewStreams` @type ^`boolean` := v3 @kind boolean;
  #L458ccc.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L458cd2.  v3:= temp;
  #L458cd4.  if v3 == 0 then goto L458c3c;
  #L458cd8.  v2:= v6.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L458cdc.  v8:= v8 - v2 @kind long;
  #L458cde.  v7.`okhttp3.internal.connection.RealConnection.idleAtNanos` @type ^`long` := v8 @kind wide;
  #L458ce2.  return v1;
  #L458ce4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L458cea.  v7:= temp;
  #L458cec.  return v7;
}
procedure `long` `cleanup`(`okhttp3.ConnectionPool` v11 @kind this, `long` v12 ) @signature `Lokhttp3/ConnectionPool;.cleanup:(J)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L458d68.  @monitorenter v11
  #L458d6a.  v0:= v11.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L458d6e.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L458d74.  v0:= temp @kind object;
  #L458d76.  v1:= 0I;
  #L458d78.  v2:= 0I;
  #L458d7a.  v3:= -9223372036854775808L;
  #L458d7e.  v5:= v2 @kind object;
  #L458d80.  v2:= 0I;
  #L458d82.  v6:= 0I;
  #L458d84.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L458d8a.  v7:= temp;
  #L458d8c.  if v7 == 0 then goto L458dc8;
  #L458d90.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L458d96.  v7:= temp @kind object;
  #L458d98.  v7:= (`okhttp3.internal.connection.RealConnection`) v7 @kind object;
  #L458d9c.  call temp:= `pruneAndGetAllocationCount`(v11, v7, v12) @signature `Lokhttp3/ConnectionPool;.pruneAndGetAllocationCount:(Lokhttp3/internal/connection/RealConnection;J)I` @kind direct;
  #L458da2.  v8:= temp;
  #L458da4.  if v8 <= 0 then goto L458dae;
  #L458da8.  v6:= v6 + 1;
  #L458dac.  goto L458d84;
  #L458dae.  v2:= v2 + 1;
  #L458db2.  v8:= v7.`okhttp3.internal.connection.RealConnection.idleAtNanos` @type ^`long` @kind wide;
  #L458db6.  v8:= v12 - v8 @kind long;
  #L458dba.  v10:= lcmp(v8, v3);
  #L458dbe.  if v10 <= 0 then goto L458d84;
  #L458dc2.  v5:= v7 @kind object;
  #L458dc4.  v3:= v8 @kind wide;
  #L458dc6.  goto L458d84;
  #L458dc8.  v12:= v11.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L458dcc.  v0:= lcmp(v3, v12);
  #L458dd0.  if v0 >= 0 then goto L458e04;
  #L458dd4.  v12:= v11.`okhttp3.ConnectionPool.maxIdleConnections` @type ^`int`;
  #L458dd8.  if v2 <= v12 then goto L458dde;
  #L458ddc.  goto L458e04;
  #L458dde.  if v2 <= 0 then goto L458dec;
  #L458de2.  v12:= v11.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L458de6.  v12:= v12 - v3 @kind long;
  #L458de8.  @monitorexit v11
  #L458dea.  return v12 @kind wide;
  #L458dec.  if v6 <= 0 then goto L458df8;
  #L458df0.  v12:= v11.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L458df4.  @monitorexit v11
  #L458df6.  return v12 @kind wide;
  #L458df8.  v11.`okhttp3.ConnectionPool.cleanupRunning` @type ^`boolean` := v1 @kind boolean;
  #L458dfc.  v12:= -1L;
  #L458e00.  @monitorexit v11
  #L458e02.  return v12 @kind wide;
  #L458e04.  v12:= v11.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L458e08.  call temp:= `remove`(v12, v5) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L458e0e.  @monitorexit v11
  #L458e10.  call temp:= `socket`(v5) @signature `Lokhttp3/internal/connection/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L458e16.  v12:= temp @kind object;
  #L458e18.  call `closeQuietly`(v12) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L458e1e.  v12:= 0L;
  #L458e22.  return v12 @kind wide;
  #L458e24.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L458e26.  @monitorexit v11
  #L458e28.  goto L458e2c;
  #L458e2a.  throw v12;
  #L458e2c.  goto L458e2a;
  catch `java.lang.Throwable` @[L458d6a..L458e10] goto L458e24;
  catch `java.lang.Throwable` @[L458e26..L458e28] goto L458e24;
}
procedure `boolean` `connectionBecameIdle`(`okhttp3.ConnectionPool` v1 @kind this, `okhttp3.internal.connection.RealConnection` v2 @kind object) @signature `Lokhttp3/ConnectionPool;.connectionBecameIdle:(Lokhttp3/internal/connection/RealConnection;)Z` @AccessFlag  {
    temp;
    v0;

  #L458b5c.  v0:= v2.`okhttp3.internal.connection.RealConnection.noNewStreams` @type ^`boolean` @kind boolean;
  #L458b60.  if v0 != 0 then goto L458b78;
  #L458b64.  v0:= v1.`okhttp3.ConnectionPool.maxIdleConnections` @type ^`int`;
  #L458b68.  if v0 != 0 then goto L458b6e;
  #L458b6c.  goto L458b78;
  #L458b6e.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L458b74.  v2:= 0I;
  #L458b76.  return v2;
  #L458b78.  v0:= v1.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L458b7c.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L458b82.  v2:= 1I;
  #L458b84.  return v2;
}
procedure `int` `connectionCount`(`okhttp3.ConnectionPool` v1 @kind this) @signature `Lokhttp3/ConnectionPool;.connectionCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458b98.  @monitorenter v1
  #L458b9a.  v0:= v1.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L458b9e.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L458ba4.  v0:= temp;
  #L458ba6.  @monitorexit v1
  #L458ba8.  return v0;
  #L458baa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L458bac.  @monitorexit v1
  #L458bae.  throw v0;
  catch `java.lang.Throwable` @[L458b9a..L458ba6] goto L458baa;
}
procedure `java.net.Socket` `deduplicate`(`okhttp3.ConnectionPool` v3 @kind this, `okhttp3.Address` v4 @kind object, `okhttp3.internal.connection.StreamAllocation` v5 @kind object) @signature `Lokhttp3/ConnectionPool;.deduplicate:(Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;)Ljava/net/Socket;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L458d00.  v0:= v3.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L458d04.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L458d0a.  v0:= temp @kind object;
  #L458d0c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L458d12.  v1:= temp;
  #L458d14.  v2:= 0I;
  #L458d16.  if v1 == 0 then goto L458d54;
  #L458d1a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L458d20.  v1:= temp @kind object;
  #L458d22.  v1:= (`okhttp3.internal.connection.RealConnection`) v1 @kind object;
  #L458d26.  call temp:= `isEligible`(v1, v4, v2) @signature `Lokhttp3/internal/connection/RealConnection;.isEligible:(Lokhttp3/Address;Lokhttp3/Route;)Z` @kind virtual;
  #L458d2c.  v2:= temp;
  #L458d2e.  if v2 == 0 then goto L458d0c;
  #L458d32.  call temp:= `isMultiplexed`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.isMultiplexed:()Z` @kind virtual;
  #L458d38.  v2:= temp;
  #L458d3a.  if v2 == 0 then goto L458d0c;
  #L458d3e.  call temp:= `connection`(v5) @signature `Lokhttp3/internal/connection/StreamAllocation;.connection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L458d44.  v2:= temp @kind object;
  #L458d46.  if v1 == v2 then goto L458d0c;
  #L458d4a.  call temp:= `releaseAndAcquire`(v5, v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.releaseAndAcquire:(Lokhttp3/internal/connection/RealConnection;)Ljava/net/Socket;` @kind virtual;
  #L458d50.  v4:= temp @kind object;
  #L458d52.  return v4 @kind object;
  #L458d54.  return v2 @kind object;
}
procedure `void` `evictAll`(`okhttp3.ConnectionPool` v4 @kind this) @signature `Lokhttp3/ConnectionPool;.evictAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L458fa0.  v0:= new `java.util.ArrayList`;
  #L458fa4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L458faa.  @monitorenter v4
  #L458fac.  v1:= v4.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L458fb0.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L458fb6.  v1:= temp @kind object;
  #L458fb8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L458fbe.  v2:= temp;
  #L458fc0.  if v2 == 0 then goto L458ff4;
  #L458fc4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L458fca.  v2:= temp @kind object;
  #L458fcc.  v2:= (`okhttp3.internal.connection.RealConnection`) v2 @kind object;
  #L458fd0.  v3:= v2.`okhttp3.internal.connection.RealConnection.allocations` @type ^`java.util.List` @kind object;
  #L458fd4.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L458fda.  v3:= temp;
  #L458fdc.  if v3 == 0 then goto L458fb8;
  #L458fe0.  v3:= 1I;
  #L458fe2.  v2.`okhttp3.internal.connection.RealConnection.noNewStreams` @type ^`boolean` := v3 @kind boolean;
  #L458fe6.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L458fec.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L458ff2.  goto L458fb8;
  #L458ff4.  @monitorexit v4
  #L458ff6.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L458ffc.  v0:= temp @kind object;
  #L458ffe.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L459004.  v1:= temp;
  #L459006.  if v1 == 0 then goto L459026;
  #L45900a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L459010.  v1:= temp @kind object;
  #L459012.  v1:= (`okhttp3.internal.connection.RealConnection`) v1 @kind object;
  #L459016.  call temp:= `socket`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L45901c.  v1:= temp @kind object;
  #L45901e.  call `closeQuietly`(v1) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L459024.  goto L458ffe;
  #L459026.  return @kind void;
  #L459028.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45902a.  @monitorexit v4
  #L45902c.  goto L459030;
  #L45902e.  throw v0;
  #L459030.  goto L45902e;
  catch `java.lang.Throwable` @[L458fac..L458ff6] goto L459028;
  catch `java.lang.Throwable` @[L45902a..L45902c] goto L459028;
}
procedure `okhttp3.internal.connection.RealConnection` `get`(`okhttp3.ConnectionPool` v3 @kind this, `okhttp3.Address` v4 @kind object, `okhttp3.internal.connection.StreamAllocation` v5 @kind object, `okhttp3.Route` v6 @kind object) @signature `Lokhttp3/ConnectionPool;.get:(Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/Route;)Lokhttp3/internal/connection/RealConnection;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L458e54.  v0:= v3.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L458e58.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L458e5e.  v0:= temp @kind object;
  #L458e60.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L458e66.  v1:= temp;
  #L458e68.  if v1 == 0 then goto L458e8e;
  #L458e6c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L458e72.  v1:= temp @kind object;
  #L458e74.  v1:= (`okhttp3.internal.connection.RealConnection`) v1 @kind object;
  #L458e78.  call temp:= `isEligible`(v1, v4, v6) @signature `Lokhttp3/internal/connection/RealConnection;.isEligible:(Lokhttp3/Address;Lokhttp3/Route;)Z` @kind virtual;
  #L458e7e.  v2:= temp;
  #L458e80.  if v2 == 0 then goto L458e60;
  #L458e84.  v4:= 1I;
  #L458e86.  call `acquire`(v5, v1, v4) @signature `Lokhttp3/internal/connection/StreamAllocation;.acquire:(Lokhttp3/internal/connection/RealConnection;Z)V` @kind virtual;
  #L458e8c.  return v1 @kind object;
  #L458e8e.  v4:= 0I;
  #L458e90.  return v4 @kind object;
}
procedure `int` `idleConnectionCount`(`okhttp3.ConnectionPool` v3 @kind this) @signature `Lokhttp3/ConnectionPool;.idleConnectionCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L458bcc.  @monitorenter v3
  #L458bce.  v0:= 0I;
  #L458bd0.  v1:= v3.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L458bd4.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L458bda.  v1:= temp @kind object;
  #L458bdc.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L458be2.  v2:= temp;
  #L458be4.  if v2 == 0 then goto L458c0a;
  #L458be8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L458bee.  v2:= temp @kind object;
  #L458bf0.  v2:= (`okhttp3.internal.connection.RealConnection`) v2 @kind object;
  #L458bf4.  v2:= v2.`okhttp3.internal.connection.RealConnection.allocations` @type ^`java.util.List` @kind object;
  #L458bf8.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L458bfe.  v2:= temp;
  #L458c00.  if v2 == 0 then goto L458bdc;
  #L458c04.  v0:= v0 + 1;
  #L458c08.  goto L458bdc;
  #L458c0a.  @monitorexit v3
  #L458c0c.  return v0;
  #L458c0e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L458c10.  @monitorexit v3
  #L458c12.  goto L458c16;
  #L458c14.  throw v0;
  #L458c16.  goto L458c14;
  catch `java.lang.Throwable` @[L458bd0..L458c00] goto L458c0e;
}
procedure `void` `put`(`okhttp3.ConnectionPool` v2 @kind this, `okhttp3.internal.connection.RealConnection` v3 @kind object) @signature `Lokhttp3/ConnectionPool;.put:(Lokhttp3/internal/connection/RealConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L459058.  v0:= v2.`okhttp3.ConnectionPool.cleanupRunning` @type ^`boolean` @kind boolean;
  #L45905c.  if v0 != 0 then goto L459074;
  #L459060.  v0:= 1I;
  #L459062.  v2.`okhttp3.ConnectionPool.cleanupRunning` @type ^`boolean` := v0 @kind boolean;
  #L459066.  v0:= `@@okhttp3.ConnectionPool.executor` @type ^`java.util.concurrent.Executor` @kind object;
  #L45906a.  v1:= v2.`okhttp3.ConnectionPool.cleanupRunnable` @type ^`java.lang.Runnable` @kind object;
  #L45906e.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L459074.  v0:= v2.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L459078.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45907e.  return @kind void;
}
