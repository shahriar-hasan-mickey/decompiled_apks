record `okhttp3.Protocol` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `okhttp3.Protocol.protocol` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.Protocol`[] `@@okhttp3.Protocol.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_0` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_1` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_2` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.SPDY_3` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lokhttp3/Protocol;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L46007c.  v0:= new `okhttp3.Protocol`;
  #L460080.  v1:= 0I;
  #L460082.  v2:= "HTTP_1_0" @kind object;
  #L460086.  v3:= "http/1.0" @kind object;
  #L46008a.  call `<init>`(v0, v2, v1, v3) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L460090.  `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L460094.  v0:= new `okhttp3.Protocol`;
  #L460098.  v2:= 1I;
  #L46009a.  v3:= "HTTP_1_1" @kind object;
  #L46009e.  v4:= "http/1.1" @kind object;
  #L4600a2.  call `<init>`(v0, v3, v2, v4) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L4600a8.  `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L4600ac.  v0:= new `okhttp3.Protocol`;
  #L4600b0.  v3:= 2I;
  #L4600b2.  v4:= "SPDY_3" @kind object;
  #L4600b6.  v5:= "spdy/3.1" @kind object;
  #L4600ba.  call `<init>`(v0, v4, v3, v5) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L4600c0.  `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L4600c4.  v0:= new `okhttp3.Protocol`;
  #L4600c8.  v4:= 3I;
  #L4600ca.  v5:= "HTTP_2" @kind object;
  #L4600ce.  v6:= "h2" @kind object;
  #L4600d2.  call `<init>`(v0, v5, v4, v6) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L4600d8.  `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L4600dc.  v0:= 4I;
  #L4600de.  v0:= new `okhttp3.Protocol`[v0];
  #L4600e2.  v5:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L4600e6.  v0[v1]:= v5 @kind object;
  #L4600ea.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L4600ee.  v0[v2]:= v1 @kind object;
  #L4600f2.  v1:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L4600f6.  v0[v3]:= v1 @kind object;
  #L4600fa.  v1:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L4600fe.  v0[v4]:= v1 @kind object;
  #L460102.  `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] := v0 @kind object;
  #L460106.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Protocol` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L460118.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L46011e.  v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` := v3 @kind object;
  #L460122.  return @kind void;
}
procedure `okhttp3.Protocol` `get`(`java.lang.String` v3 @kind object) @signature `Lokhttp3/Protocol;.get:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L45ff8c.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L45ff90.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L45ff94.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45ff9a.  v0:= temp;
  #L45ff9c.  if v0 == 0 then goto L45ffa6;
  #L45ffa0.  v3:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L45ffa4.  return v3 @kind object;
  #L45ffa6.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L45ffaa.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L45ffae.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45ffb4.  v0:= temp;
  #L45ffb6.  if v0 == 0 then goto L45ffc0;
  #L45ffba.  v3:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L45ffbe.  return v3 @kind object;
  #L45ffc0.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L45ffc4.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L45ffc8.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45ffce.  v0:= temp;
  #L45ffd0.  if v0 == 0 then goto L45ffda;
  #L45ffd4.  v3:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L45ffd8.  return v3 @kind object;
  #L45ffda.  v0:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L45ffde.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L45ffe2.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45ffe8.  v0:= temp;
  #L45ffea.  if v0 == 0 then goto L45fff4;
  #L45ffee.  v3:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L45fff2.  return v3 @kind object;
  #L45fff4.  v0:= new `java.io.IOException`;
  #L45fff8.  v1:= new `java.lang.StringBuilder`;
  #L45fffc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L460002.  v2:= "Unexpected protocol: " @kind object;
  #L460006.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46000c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L460012.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L460018.  v3:= temp @kind object;
  #L46001a.  call `<init>`(v0, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L460020.  throw v0;
}
procedure `okhttp3.Protocol` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lokhttp3/Protocol;.valueOf:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L460034.  v0:= constclass @type ^`okhttp3.Protocol` @kind object;
  #L460038.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L46003e.  v1:= temp @kind object;
  #L460040.  v1:= (`okhttp3.Protocol`) v1 @kind object;
  #L460044.  return v1 @kind object;
}
procedure `okhttp3.Protocol`[] `values`() @signature `Lokhttp3/Protocol;.values:()[Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L460058.  v0:= `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] @kind object;
  #L46005c.  call temp:= `clone`(v0) @signature `[Lokhttp3/Protocol;.clone:()Ljava/lang/Object;` @kind virtual;
  #L460062.  v0:= temp @kind object;
  #L460064.  v0:= (`okhttp3.Protocol`[]) v0 @kind object;
  #L460068.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Protocol` v1 @kind this) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ff74.  v0:= v1.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L45ff78.  return v0 @kind object;
}
