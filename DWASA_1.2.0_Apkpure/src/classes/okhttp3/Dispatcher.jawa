record `okhttp3.Dispatcher` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.ExecutorService` `okhttp3.Dispatcher.executorService` @AccessFlag PRIVATE;
  `java.lang.Runnable` `okhttp3.Dispatcher.idleCallback` @AccessFlag PRIVATE;
  `int` `okhttp3.Dispatcher.maxRequests` @AccessFlag PRIVATE;
  `int` `okhttp3.Dispatcher.maxRequestsPerHost` @AccessFlag PRIVATE;
  `java.util.Deque` `okhttp3.Dispatcher.readyAsyncCalls` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `okhttp3.Dispatcher.runningAsyncCalls` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `okhttp3.Dispatcher.runningSyncCalls` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45aa64.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45aa6a.  v0:= 64I;
  #L45aa6e.  v1.`okhttp3.Dispatcher.maxRequests` @type ^`int` := v0;
  #L45aa72.  v0:= 5I;
  #L45aa74.  v1.`okhttp3.Dispatcher.maxRequestsPerHost` @type ^`int` := v0;
  #L45aa78.  v0:= new `java.util.ArrayDeque`;
  #L45aa7c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L45aa82.  v1.`okhttp3.Dispatcher.readyAsyncCalls` @type ^`java.util.Deque` := v0 @kind object;
  #L45aa86.  v0:= new `java.util.ArrayDeque`;
  #L45aa8a.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L45aa90.  v1.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` := v0 @kind object;
  #L45aa94.  v0:= new `java.util.ArrayDeque`;
  #L45aa98.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L45aa9e.  v1.`okhttp3.Dispatcher.runningSyncCalls` @type ^`java.util.Deque` := v0 @kind object;
  #L45aaa2.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Dispatcher` v1 @kind this, `java.util.concurrent.ExecutorService` v2 @kind object) @signature `Lokhttp3/Dispatcher;.<init>:(Ljava/util/concurrent/ExecutorService;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45aab4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45aaba.  v0:= 64I;
  #L45aabe.  v1.`okhttp3.Dispatcher.maxRequests` @type ^`int` := v0;
  #L45aac2.  v0:= 5I;
  #L45aac4.  v1.`okhttp3.Dispatcher.maxRequestsPerHost` @type ^`int` := v0;
  #L45aac8.  v0:= new `java.util.ArrayDeque`;
  #L45aacc.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L45aad2.  v1.`okhttp3.Dispatcher.readyAsyncCalls` @type ^`java.util.Deque` := v0 @kind object;
  #L45aad6.  v0:= new `java.util.ArrayDeque`;
  #L45aada.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L45aae0.  v1.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` := v0 @kind object;
  #L45aae4.  v0:= new `java.util.ArrayDeque`;
  #L45aae8.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L45aaee.  v1.`okhttp3.Dispatcher.runningSyncCalls` @type ^`java.util.Deque` := v0 @kind object;
  #L45aaf2.  v1.`okhttp3.Dispatcher.executorService` @type ^`java.util.concurrent.ExecutorService` := v2 @kind object;
  #L45aaf6.  return @kind void;
}
procedure `void` `finished`(`okhttp3.Dispatcher` v0 @kind this, `java.util.Deque` v1 @kind object, `java.lang.Object` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/Dispatcher;.finished:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @AccessFlag PRIVATE {
    temp;

  #L45ac6c.  @monitorenter v0
  #L45ac6e.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L45ac74.  v1:= temp;
  #L45ac76.  if v1 == 0 then goto L45aca2;
  #L45ac7a.  if v3 == 0 then goto L45ac84;
  #L45ac7e.  call `promoteCalls`(v0) @signature `Lokhttp3/Dispatcher;.promoteCalls:()V` @kind direct;
  #L45ac84.  call temp:= `runningCallsCount`(v0) @signature `Lokhttp3/Dispatcher;.runningCallsCount:()I` @kind virtual;
  #L45ac8a.  v1:= temp;
  #L45ac8c.  v2:= v0.`okhttp3.Dispatcher.idleCallback` @type ^`java.lang.Runnable` @kind object;
  #L45ac90.  @monitorexit v0
  #L45ac92.  if v1 != 0 then goto L45aca0;
  #L45ac96.  if v2 == 0 then goto L45aca0;
  #L45ac9a.  call `run`(v2) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L45aca0.  return @kind void;
  #L45aca2.  v1:= new `java.lang.AssertionError`;
  #L45aca6.  v2:= "Call wasn't in-flight!" @kind object;
  #L45acaa.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L45acb0.  throw v1;
  #L45acb2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45acb4.  @monitorexit v0
  #L45acb6.  throw v1;
  catch `java.lang.Throwable` @[L45ac6e..L45ac92] goto L45acb2;
  catch `java.lang.Throwable` @[L45aca2..L45acb6] goto L45acb2;
}
procedure `void` `promoteCalls`(`okhttp3.Dispatcher` v4 @kind this) @signature `Lokhttp3/Dispatcher;.promoteCalls:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45ad1c.  v0:= v4.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ad20.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L45ad26.  v0:= temp;
  #L45ad28.  v1:= v4.`okhttp3.Dispatcher.maxRequests` @type ^`int`;
  #L45ad2c.  if v0 < v1 then goto L45ad32;
  #L45ad30.  return @kind void;
  #L45ad32.  v0:= v4.`okhttp3.Dispatcher.readyAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ad36.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L45ad3c.  v0:= temp;
  #L45ad3e.  if v0 == 0 then goto L45ad44;
  #L45ad42.  return @kind void;
  #L45ad44.  v0:= v4.`okhttp3.Dispatcher.readyAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ad48.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45ad4e.  v0:= temp @kind object;
  #L45ad50.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45ad56.  v1:= temp;
  #L45ad58.  if v1 == 0 then goto L45adaa;
  #L45ad5c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45ad62.  v1:= temp @kind object;
  #L45ad64.  v1:= (`okhttp3.RealCall$AsyncCall`) v1 @kind object;
  #L45ad68.  call temp:= `runningCallsForHost`(v4, v1) @signature `Lokhttp3/Dispatcher;.runningCallsForHost:(Lokhttp3/RealCall$AsyncCall;)I` @kind direct;
  #L45ad6e.  v2:= temp;
  #L45ad70.  v3:= v4.`okhttp3.Dispatcher.maxRequestsPerHost` @type ^`int`;
  #L45ad74.  if v2 >= v3 then goto L45ad96;
  #L45ad78.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L45ad7e.  v2:= v4.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ad82.  call temp:= `add`(v2, v1) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45ad88.  call temp:= `executorService`(v4) @signature `Lokhttp3/Dispatcher;.executorService:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L45ad8e.  v2:= temp @kind object;
  #L45ad90.  call `execute`(v2, v1) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L45ad96.  v1:= v4.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ad9a.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L45ada0.  v1:= temp;
  #L45ada2.  v2:= v4.`okhttp3.Dispatcher.maxRequests` @type ^`int`;
  #L45ada6.  if v1 < v2 then goto L45ad50;
  #L45adaa.  return @kind void;
}
procedure `int` `runningCallsForHost`(`okhttp3.Dispatcher` v4 @kind this, `okhttp3.RealCall$AsyncCall` v5 @kind object) @signature `Lokhttp3/Dispatcher;.runningCallsForHost:(Lokhttp3/RealCall$AsyncCall;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45a8ac.  v0:= v4.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45a8b0.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45a8b6.  v0:= temp @kind object;
  #L45a8b8.  v1:= 0I;
  #L45a8ba.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45a8c0.  v2:= temp;
  #L45a8c2.  if v2 == 0 then goto L45a8f4;
  #L45a8c6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45a8cc.  v2:= temp @kind object;
  #L45a8ce.  v2:= (`okhttp3.RealCall$AsyncCall`) v2 @kind object;
  #L45a8d2.  call temp:= `host`(v2) @signature `Lokhttp3/RealCall$AsyncCall;.host:()Ljava/lang/String;` @kind virtual;
  #L45a8d8.  v2:= temp @kind object;
  #L45a8da.  call temp:= `host`(v5) @signature `Lokhttp3/RealCall$AsyncCall;.host:()Ljava/lang/String;` @kind virtual;
  #L45a8e0.  v3:= temp @kind object;
  #L45a8e2.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45a8e8.  v2:= temp;
  #L45a8ea.  if v2 == 0 then goto L45a8ba;
  #L45a8ee.  v1:= v1 + 1;
  #L45a8f2.  goto L45a8ba;
  #L45a8f4.  return v1;
}
procedure `void` `cancelAll`(`okhttp3.Dispatcher` v2 @kind this) @signature `Lokhttp3/Dispatcher;.cancelAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45ab08.  @monitorenter v2
  #L45ab0a.  v0:= v2.`okhttp3.Dispatcher.readyAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ab0e.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45ab14.  v0:= temp @kind object;
  #L45ab16.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45ab1c.  v1:= temp;
  #L45ab1e.  if v1 == 0 then goto L45ab3e;
  #L45ab22.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45ab28.  v1:= temp @kind object;
  #L45ab2a.  v1:= (`okhttp3.RealCall$AsyncCall`) v1 @kind object;
  #L45ab2e.  call temp:= `get`(v1) @signature `Lokhttp3/RealCall$AsyncCall;.get:()Lokhttp3/RealCall;` @kind virtual;
  #L45ab34.  v1:= temp @kind object;
  #L45ab36.  call `cancel`(v1) @signature `Lokhttp3/RealCall;.cancel:()V` @kind virtual;
  #L45ab3c.  goto L45ab16;
  #L45ab3e.  v0:= v2.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ab42.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45ab48.  v0:= temp @kind object;
  #L45ab4a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45ab50.  v1:= temp;
  #L45ab52.  if v1 == 0 then goto L45ab72;
  #L45ab56.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45ab5c.  v1:= temp @kind object;
  #L45ab5e.  v1:= (`okhttp3.RealCall$AsyncCall`) v1 @kind object;
  #L45ab62.  call temp:= `get`(v1) @signature `Lokhttp3/RealCall$AsyncCall;.get:()Lokhttp3/RealCall;` @kind virtual;
  #L45ab68.  v1:= temp @kind object;
  #L45ab6a.  call `cancel`(v1) @signature `Lokhttp3/RealCall;.cancel:()V` @kind virtual;
  #L45ab70.  goto L45ab4a;
  #L45ab72.  v0:= v2.`okhttp3.Dispatcher.runningSyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ab76.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45ab7c.  v0:= temp @kind object;
  #L45ab7e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45ab84.  v1:= temp;
  #L45ab86.  if v1 == 0 then goto L45ab9e;
  #L45ab8a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45ab90.  v1:= temp @kind object;
  #L45ab92.  v1:= (`okhttp3.RealCall`) v1 @kind object;
  #L45ab96.  call `cancel`(v1) @signature `Lokhttp3/RealCall;.cancel:()V` @kind virtual;
  #L45ab9c.  goto L45ab7e;
  #L45ab9e.  @monitorexit v2
  #L45aba0.  return @kind void;
  #L45aba2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45aba4.  @monitorexit v2
  #L45aba6.  goto L45abaa;
  #L45aba8.  throw v0;
  #L45abaa.  goto L45aba8;
  catch `java.lang.Throwable` @[L45ab0a..L45ab9c] goto L45aba2;
}
procedure `void` `enqueue`(`okhttp3.Dispatcher` v2 @kind this, `okhttp3.RealCall$AsyncCall` v3 @kind object) @signature `Lokhttp3/Dispatcher;.enqueue:(Lokhttp3/RealCall$AsyncCall;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45abc8.  @monitorenter v2
  #L45abca.  v0:= v2.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45abce.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L45abd4.  v0:= temp;
  #L45abd6.  v1:= v2.`okhttp3.Dispatcher.maxRequests` @type ^`int`;
  #L45abda.  if v0 >= v1 then goto L45ac08;
  #L45abde.  call temp:= `runningCallsForHost`(v2, v3) @signature `Lokhttp3/Dispatcher;.runningCallsForHost:(Lokhttp3/RealCall$AsyncCall;)I` @kind direct;
  #L45abe4.  v0:= temp;
  #L45abe6.  v1:= v2.`okhttp3.Dispatcher.maxRequestsPerHost` @type ^`int`;
  #L45abea.  if v0 >= v1 then goto L45ac08;
  #L45abee.  v0:= v2.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45abf2.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45abf8.  call temp:= `executorService`(v2) @signature `Lokhttp3/Dispatcher;.executorService:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L45abfe.  v0:= temp @kind object;
  #L45ac00.  call `execute`(v0, v3) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L45ac06.  goto L45ac12;
  #L45ac08.  v0:= v2.`okhttp3.Dispatcher.readyAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ac0c.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45ac12.  @monitorexit v2
  #L45ac14.  return @kind void;
  #L45ac16.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45ac18.  @monitorexit v2
  #L45ac1a.  throw v3;
  catch `java.lang.Throwable` @[L45abca..L45ac12] goto L45ac16;
}
procedure `void` `executed`(`okhttp3.Dispatcher` v1 @kind this, `okhttp3.RealCall` v2 @kind object) @signature `Lokhttp3/Dispatcher;.executed:(Lokhttp3/RealCall;)V` @AccessFlag  {
    temp;
    v0;

  #L45ac38.  @monitorenter v1
  #L45ac3a.  v0:= v1.`okhttp3.Dispatcher.runningSyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ac3e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45ac44.  @monitorexit v1
  #L45ac46.  return @kind void;
  #L45ac48.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45ac4a.  @monitorexit v1
  #L45ac4c.  throw v2;
  catch `java.lang.Throwable` @[L45ac3a..L45ac44] goto L45ac48;
}
procedure `java.util.concurrent.ExecutorService` `executorService`(`okhttp3.Dispatcher` v9 @kind this) @signature `Lokhttp3/Dispatcher;.executorService:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L45a9f8.  @monitorenter v9
  #L45a9fa.  v0:= v9.`okhttp3.Dispatcher.executorService` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L45a9fe.  if v0 != 0 then goto L45aa3a;
  #L45aa02.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L45aa06.  v2:= 0I;
  #L45aa08.  v3:= 2147483647I;
  #L45aa0e.  v4:= 60L;
  #L45aa12.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L45aa16.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L45aa1a.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L45aa20.  v1:= "OkHttp Dispatcher" @kind object;
  #L45aa24.  v8:= 0I;
  #L45aa26.  call temp:= `threadFactory`(v1, v8) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L45aa2c.  v8:= temp @kind object;
  #L45aa2e.  v1:= v0 @kind object;
  #L45aa30.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L45aa36.  v9.`okhttp3.Dispatcher.executorService` @type ^`java.util.concurrent.ExecutorService` := v0 @kind object;
  #L45aa3a.  v0:= v9.`okhttp3.Dispatcher.executorService` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L45aa3e.  @monitorexit v9
  #L45aa40.  return v0 @kind object;
  #L45aa42.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45aa44.  @monitorexit v9
  #L45aa46.  throw v0;
  catch `java.lang.Throwable` @[L45a9fa..L45aa3e] goto L45aa42;
}
procedure `void` `finished`(`okhttp3.Dispatcher` v2 @kind this, `okhttp3.RealCall$AsyncCall` v3 @kind object) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall$AsyncCall;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45acdc.  v0:= v2.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ace0.  v1:= 1I;
  #L45ace2.  call `finished`(v2, v0, v3, v1) @signature `Lokhttp3/Dispatcher;.finished:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L45ace8.  return @kind void;
}
procedure `void` `finished`(`okhttp3.Dispatcher` v2 @kind this, `okhttp3.RealCall` v3 @kind object) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45acfc.  v0:= v2.`okhttp3.Dispatcher.runningSyncCalls` @type ^`java.util.Deque` @kind object;
  #L45ad00.  v1:= 0I;
  #L45ad02.  call `finished`(v2, v0, v3, v1) @signature `Lokhttp3/Dispatcher;.finished:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L45ad08.  return @kind void;
}
procedure `int` `getMaxRequests`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.getMaxRequests:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45a7dc.  @monitorenter v1
  #L45a7de.  v0:= v1.`okhttp3.Dispatcher.maxRequests` @type ^`int`;
  #L45a7e2.  @monitorexit v1
  #L45a7e4.  return v0;
  #L45a7e6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45a7e8.  @monitorexit v1
  #L45a7ea.  throw v0;
  catch `java.lang.Throwable` @[L45a7de..L45a7e2] goto L45a7e6;
}
procedure `int` `getMaxRequestsPerHost`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.getMaxRequestsPerHost:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45a808.  @monitorenter v1
  #L45a80a.  v0:= v1.`okhttp3.Dispatcher.maxRequestsPerHost` @type ^`int`;
  #L45a80e.  @monitorexit v1
  #L45a810.  return v0;
  #L45a812.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45a814.  @monitorexit v1
  #L45a816.  throw v0;
  catch `java.lang.Throwable` @[L45a80a..L45a80e] goto L45a812;
}
procedure `java.util.List` `queuedCalls`(`okhttp3.Dispatcher` v3 @kind this) @signature `Lokhttp3/Dispatcher;.queuedCalls:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45a908.  @monitorenter v3
  #L45a90a.  v0:= new `java.util.ArrayList`;
  #L45a90e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L45a914.  v1:= v3.`okhttp3.Dispatcher.readyAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45a918.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45a91e.  v1:= temp @kind object;
  #L45a920.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45a926.  v2:= temp;
  #L45a928.  if v2 == 0 then goto L45a948;
  #L45a92c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45a932.  v2:= temp @kind object;
  #L45a934.  v2:= (`okhttp3.RealCall$AsyncCall`) v2 @kind object;
  #L45a938.  call temp:= `get`(v2) @signature `Lokhttp3/RealCall$AsyncCall;.get:()Lokhttp3/RealCall;` @kind virtual;
  #L45a93e.  v2:= temp @kind object;
  #L45a940.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45a946.  goto L45a920;
  #L45a948.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L45a94e.  v0:= temp @kind object;
  #L45a950.  @monitorexit v3
  #L45a952.  return v0 @kind object;
  #L45a954.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45a956.  @monitorexit v3
  #L45a958.  goto L45a95c;
  #L45a95a.  throw v0;
  #L45a95c.  goto L45a95a;
  catch `java.lang.Throwable` @[L45a90a..L45a950] goto L45a954;
}
procedure `int` `queuedCallsCount`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.queuedCallsCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45a834.  @monitorenter v1
  #L45a836.  v0:= v1.`okhttp3.Dispatcher.readyAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45a83a.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L45a840.  v0:= temp;
  #L45a842.  @monitorexit v1
  #L45a844.  return v0;
  #L45a846.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45a848.  @monitorexit v1
  #L45a84a.  throw v0;
  catch `java.lang.Throwable` @[L45a836..L45a842] goto L45a846;
}
procedure `java.util.List` `runningCalls`(`okhttp3.Dispatcher` v3 @kind this) @signature `Lokhttp3/Dispatcher;.runningCalls:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45a97c.  @monitorenter v3
  #L45a97e.  v0:= new `java.util.ArrayList`;
  #L45a982.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L45a988.  v1:= v3.`okhttp3.Dispatcher.runningSyncCalls` @type ^`java.util.Deque` @kind object;
  #L45a98c.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L45a992.  v1:= v3.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45a996.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45a99c.  v1:= temp @kind object;
  #L45a99e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45a9a4.  v2:= temp;
  #L45a9a6.  if v2 == 0 then goto L45a9c6;
  #L45a9aa.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45a9b0.  v2:= temp @kind object;
  #L45a9b2.  v2:= (`okhttp3.RealCall$AsyncCall`) v2 @kind object;
  #L45a9b6.  call temp:= `get`(v2) @signature `Lokhttp3/RealCall$AsyncCall;.get:()Lokhttp3/RealCall;` @kind virtual;
  #L45a9bc.  v2:= temp @kind object;
  #L45a9be.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45a9c4.  goto L45a99e;
  #L45a9c6.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L45a9cc.  v0:= temp @kind object;
  #L45a9ce.  @monitorexit v3
  #L45a9d0.  return v0 @kind object;
  #L45a9d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45a9d4.  @monitorexit v3
  #L45a9d6.  goto L45a9da;
  #L45a9d8.  throw v0;
  #L45a9da.  goto L45a9d8;
  catch `java.lang.Throwable` @[L45a97e..L45a9ce] goto L45a9d2;
}
procedure `int` `runningCallsCount`(`okhttp3.Dispatcher` v2 @kind this) @signature `Lokhttp3/Dispatcher;.runningCallsCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45a868.  @monitorenter v2
  #L45a86a.  v0:= v2.`okhttp3.Dispatcher.runningAsyncCalls` @type ^`java.util.Deque` @kind object;
  #L45a86e.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L45a874.  v0:= temp;
  #L45a876.  v1:= v2.`okhttp3.Dispatcher.runningSyncCalls` @type ^`java.util.Deque` @kind object;
  #L45a87a.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L45a880.  v1:= temp;
  #L45a882.  v0:= v0 + v1 @kind int;
  #L45a884.  @monitorexit v2
  #L45a886.  return v0;
  #L45a888.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45a88a.  @monitorexit v2
  #L45a88c.  throw v0;
  catch `java.lang.Throwable` @[L45a86a..L45a882] goto L45a888;
}
procedure `void` `setIdleCallback`(`okhttp3.Dispatcher` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lokhttp3/Dispatcher;.setIdleCallback:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;

  #L45adbc.  @monitorenter v0
  #L45adbe.  v0.`okhttp3.Dispatcher.idleCallback` @type ^`java.lang.Runnable` := v1 @kind object;
  #L45adc2.  @monitorexit v0
  #L45adc4.  return @kind void;
  #L45adc6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45adc8.  @monitorexit v0
  #L45adca.  throw v1;
  catch `java.lang.Throwable` @[L45adbe..L45adc2] goto L45adc6;
}
procedure `void` `setMaxRequests`(`okhttp3.Dispatcher` v3 @kind this, `int` v4 ) @signature `Lokhttp3/Dispatcher;.setMaxRequests:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45ade8.  @monitorenter v3
  #L45adea.  v0:= 1I;
  #L45adec.  if v4 < v0 then goto L45ae02;
  #L45adf0.  v3.`okhttp3.Dispatcher.maxRequests` @type ^`int` := v4;
  #L45adf4.  call `promoteCalls`(v3) @signature `Lokhttp3/Dispatcher;.promoteCalls:()V` @kind direct;
  #L45adfa.  @monitorexit v3
  #L45adfc.  return @kind void;
  #L45adfe.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45ae00.  goto L45ae30;
  #L45ae02.  v0:= new `java.lang.IllegalArgumentException`;
  #L45ae06.  v1:= new `java.lang.StringBuilder`;
  #L45ae0a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45ae10.  v2:= "max < 1: " @kind object;
  #L45ae14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ae1a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ae20.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45ae26.  v4:= temp @kind object;
  #L45ae28.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45ae2e.  throw v0;
  #L45ae30.  @monitorexit v3
  #L45ae32.  throw v4;
  catch `java.lang.Throwable` @[L45adf0..L45adfa] goto L45adfe;
  catch `java.lang.Throwable` @[L45ae02..L45ae30] goto L45adfe;
}
procedure `void` `setMaxRequestsPerHost`(`okhttp3.Dispatcher` v3 @kind this, `int` v4 ) @signature `Lokhttp3/Dispatcher;.setMaxRequestsPerHost:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45ae58.  @monitorenter v3
  #L45ae5a.  v0:= 1I;
  #L45ae5c.  if v4 < v0 then goto L45ae72;
  #L45ae60.  v3.`okhttp3.Dispatcher.maxRequestsPerHost` @type ^`int` := v4;
  #L45ae64.  call `promoteCalls`(v3) @signature `Lokhttp3/Dispatcher;.promoteCalls:()V` @kind direct;
  #L45ae6a.  @monitorexit v3
  #L45ae6c.  return @kind void;
  #L45ae6e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45ae70.  goto L45aea0;
  #L45ae72.  v0:= new `java.lang.IllegalArgumentException`;
  #L45ae76.  v1:= new `java.lang.StringBuilder`;
  #L45ae7a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45ae80.  v2:= "max < 1: " @kind object;
  #L45ae84.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ae8a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ae90.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45ae96.  v4:= temp @kind object;
  #L45ae98.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45ae9e.  throw v0;
  #L45aea0.  @monitorexit v3
  #L45aea2.  throw v4;
  catch `java.lang.Throwable` @[L45ae60..L45ae6a] goto L45ae6e;
  catch `java.lang.Throwable` @[L45ae72..L45aea0] goto L45ae6e;
}
