record `okhttp3.Response$Builder` @kind class @AccessFlag PUBLIC {
  `okhttp3.ResponseBody` `okhttp3.Response$Builder.body` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.cacheResponse` @AccessFlag ;
  `int` `okhttp3.Response$Builder.code` @AccessFlag ;
  `okhttp3.Handshake` `okhttp3.Response$Builder.handshake` @AccessFlag ;
  `okhttp3.Headers$Builder` `okhttp3.Response$Builder.headers` @AccessFlag ;
  `java.lang.String` `okhttp3.Response$Builder.message` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.networkResponse` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.priorResponse` @AccessFlag ;
  `okhttp3.Protocol` `okhttp3.Response$Builder.protocol` @AccessFlag ;
  `long` `okhttp3.Response$Builder.receivedResponseAtMillis` @AccessFlag ;
  `okhttp3.Request` `okhttp3.Response$Builder.request` @AccessFlag ;
  `long` `okhttp3.Response$Builder.sentRequestAtMillis` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L461354.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46135a.  v0:= -1I;
  #L46135c.  v1.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L461360.  v0:= new `okhttp3.Headers$Builder`;
  #L461364.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L46136a.  v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L46136e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L461380.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L461386.  v0:= -1I;
  #L461388.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L46138c.  v0:= v3.`okhttp3.Response.request` @type ^`okhttp3.Request` @kind object;
  #L461390.  v2.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v0 @kind object;
  #L461394.  v0:= v3.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L461398.  v2.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L46139c.  v0:= v3.`okhttp3.Response.code` @type ^`int`;
  #L4613a0.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L4613a4.  v0:= v3.`okhttp3.Response.message` @type ^`java.lang.String` @kind object;
  #L4613a8.  v2.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v0 @kind object;
  #L4613ac.  v0:= v3.`okhttp3.Response.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L4613b0.  v2.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v0 @kind object;
  #L4613b4.  v0:= v3.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L4613b8.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L4613be.  v0:= temp @kind object;
  #L4613c0.  v2.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L4613c4.  v0:= v3.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L4613c8.  v2.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L4613cc.  v0:= v3.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L4613d0.  v2.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L4613d4.  v0:= v3.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L4613d8.  v2.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L4613dc.  v0:= v3.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L4613e0.  v2.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L4613e4.  v0:= v3.`okhttp3.Response.sentRequestAtMillis` @type ^`long` @kind wide;
  #L4613e8.  v2.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v0 @kind wide;
  #L4613ec.  v0:= v3.`okhttp3.Response.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L4613f0.  v2.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v0 @kind wide;
  #L4613f4.  return @kind void;
}
procedure `void` `checkPriorResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L461408.  v2:= v2.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L46140c.  if v2 != 0 then goto L461412;
  #L461410.  return @kind void;
  #L461412.  v2:= new `java.lang.IllegalArgumentException`;
  #L461416.  v0:= "priorResponse.body != null" @kind object;
  #L46141a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L461420.  throw v2;
}
procedure `void` `checkSupportResponse`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L461434.  v0:= v3.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L461438.  if v0 != 0 then goto L4614e0;
  #L46143c.  v0:= v3.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L461440.  if v0 != 0 then goto L4614b2;
  #L461444.  v0:= v3.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L461448.  if v0 != 0 then goto L461484;
  #L46144c.  v3:= v3.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L461450.  if v3 != 0 then goto L461456;
  #L461454.  return @kind void;
  #L461456.  v3:= new `java.lang.IllegalArgumentException`;
  #L46145a.  v0:= new `java.lang.StringBuilder`;
  #L46145e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L461464.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46146a.  v2:= ".priorResponse != null" @kind object;
  #L46146e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461474.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L46147a.  v2:= temp @kind object;
  #L46147c.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L461482.  throw v3;
  #L461484.  v3:= new `java.lang.IllegalArgumentException`;
  #L461488.  v0:= new `java.lang.StringBuilder`;
  #L46148c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L461492.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461498.  v2:= ".cacheResponse != null" @kind object;
  #L46149c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4614a2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4614a8.  v2:= temp @kind object;
  #L4614aa.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4614b0.  throw v3;
  #L4614b2.  v3:= new `java.lang.IllegalArgumentException`;
  #L4614b6.  v0:= new `java.lang.StringBuilder`;
  #L4614ba.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4614c0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4614c6.  v2:= ".networkResponse != null" @kind object;
  #L4614ca.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4614d0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4614d6.  v2:= temp @kind object;
  #L4614d8.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4614de.  throw v3;
  #L4614e0.  v3:= new `java.lang.IllegalArgumentException`;
  #L4614e4.  v0:= new `java.lang.StringBuilder`;
  #L4614e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4614ee.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4614f4.  v2:= ".body != null" @kind object;
  #L4614f8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4614fe.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L461504.  v2:= temp @kind object;
  #L461506.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46150c.  throw v3;
}
procedure `okhttp3.Response$Builder` `addHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4611b8.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L4611bc.  call temp:= `add`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L4611c2.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `body`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.ResponseBody` v1 @kind object) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L4611d4.  v0.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v1 @kind object;
  #L4611d8.  return v0 @kind object;
}
procedure `okhttp3.Response` `build`(`okhttp3.Response$Builder` v3 @kind this) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L461118.  v0:= v3.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` @kind object;
  #L46111c.  if v0 == 0 then goto L461196;
  #L461120.  v0:= v3.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L461124.  if v0 == 0 then goto L461186;
  #L461128.  v0:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L46112c.  if v0 < 0 then goto L461154;
  #L461130.  v0:= v3.`okhttp3.Response$Builder.message` @type ^`java.lang.String` @kind object;
  #L461134.  if v0 == 0 then goto L461144;
  #L461138.  v0:= new `okhttp3.Response`;
  #L46113c.  call `<init>`(v0, v3) @signature `Lokhttp3/Response;.<init>:(Lokhttp3/Response$Builder;)V` @kind direct;
  #L461142.  return v0 @kind object;
  #L461144.  v0:= new `java.lang.IllegalStateException`;
  #L461148.  v1:= "message == null" @kind object;
  #L46114c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L461152.  throw v0;
  #L461154.  v0:= new `java.lang.IllegalStateException`;
  #L461158.  v1:= new `java.lang.StringBuilder`;
  #L46115c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L461162.  v2:= "code < 0: " @kind object;
  #L461166.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46116c.  v2:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L461170.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L461176.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L46117c.  v1:= temp @kind object;
  #L46117e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L461184.  throw v0;
  #L461186.  v0:= new `java.lang.IllegalStateException`;
  #L46118a.  v1:= "protocol == null" @kind object;
  #L46118e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L461194.  throw v0;
  #L461196.  v0:= new `java.lang.IllegalStateException`;
  #L46119a.  v1:= "request == null" @kind object;
  #L46119e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4611a4.  throw v0;
}
procedure `okhttp3.Response$Builder` `cacheResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4611ec.  if v2 == 0 then goto L4611fa;
  #L4611f0.  v0:= "cacheResponse" @kind object;
  #L4611f4.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L4611fa.  v1.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L4611fe.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `code`(`okhttp3.Response$Builder` v0 @kind this, `int` v1 ) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L461210.  v0.`okhttp3.Response$Builder.code` @type ^`int` := v1;
  #L461214.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `handshake`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Handshake` v1 @kind object) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L461228.  v0.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v1 @kind object;
  #L46122c.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `header`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461240.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L461244.  call temp:= `set`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L46124a.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `headers`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Headers` v1 @kind object) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L46125c.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L461262.  v1:= temp @kind object;
  #L461264.  v0.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v1 @kind object;
  #L461268.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `message`(`okhttp3.Response$Builder` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L46127c.  v0.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v1 @kind object;
  #L461280.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `networkResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461294.  if v2 == 0 then goto L4612a2;
  #L461298.  v0:= "networkResponse" @kind object;
  #L46129c.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L4612a2.  v1.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L4612a6.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `priorResponse`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L4612b8.  if v1 == 0 then goto L4612c2;
  #L4612bc.  call `checkPriorResponse`(v0, v1) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @kind direct;
  #L4612c2.  v0.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L4612c6.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `protocol`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Protocol` v1 @kind object) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L4612d8.  v0.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v1 @kind object;
  #L4612dc.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `receivedResponseAtMillis`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L4612f0.  v0.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v1 @kind wide;
  #L4612f4.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `removeHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461308.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L46130c.  call temp:= `removeAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L461312.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `request`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Request` v1 @kind object) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L461324.  v0.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v1 @kind object;
  #L461328.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `sentRequestAtMillis`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L46133c.  v0.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v1 @kind wide;
  #L461340.  return v0 @kind object;
}
