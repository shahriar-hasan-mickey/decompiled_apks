record `hu.akarnokd.rxjava.interop.MaybeV2ToCompletableV1` @kind class @AccessFlag FINAL extends `rx.Completable$OnSubscribe` @kind interface {
  `io.reactivex.MaybeSource` `hu.akarnokd.rxjava.interop.MaybeV2ToCompletableV1.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.MaybeV2ToCompletableV1` v0 @kind this, `io.reactivex.MaybeSource` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToCompletableV1;.<init>:(Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ced38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ced3e.  v0.`hu.akarnokd.rxjava.interop.MaybeV2ToCompletableV1.source` @type ^`io.reactivex.MaybeSource` := v1 @kind object;
  #L3ced42.  return @kind void;
}
procedure `void` `call`(`hu.akarnokd.rxjava.interop.MaybeV2ToCompletableV1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToCompletableV1;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3ced54.  v1:= (`rx.CompletableSubscriber`) v1 @kind object;
  #L3ced58.  call `call`(v0, v1) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToCompletableV1;.call:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L3ced5e.  return @kind void;
}
procedure `void` `call`(`hu.akarnokd.rxjava.interop.MaybeV2ToCompletableV1` v1 @kind this, `rx.CompletableSubscriber` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToCompletableV1;.call:(Lrx/CompletableSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ced70.  v0:= new `hu.akarnokd.rxjava.interop.MaybeV2ToCompletableV1$MaybeV2Observer`;
  #L3ced74.  call `<init>`(v0, v2) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToCompletableV1$MaybeV2Observer;.<init>:(Lrx/CompletableSubscriber;)V` @kind direct;
  #L3ced7a.  call `onSubscribe`(v2, v0) @signature `Lrx/CompletableSubscriber;.onSubscribe:(Lrx/Subscription;)V` @kind interface;
  #L3ced80.  v2:= v1.`hu.akarnokd.rxjava.interop.MaybeV2ToCompletableV1.source` @type ^`io.reactivex.MaybeSource` @kind object;
  #L3ced84.  call `subscribe`(v2, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L3ced8a.  return @kind void;
}
