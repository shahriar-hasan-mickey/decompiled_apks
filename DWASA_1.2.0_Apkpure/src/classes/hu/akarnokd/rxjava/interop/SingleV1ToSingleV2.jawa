record `hu.akarnokd.rxjava.interop.SingleV1ToSingleV2` @kind class @AccessFlag FINAL extends `io.reactivex.Single` @kind class {
  `rx.Single` `hu.akarnokd.rxjava.interop.SingleV1ToSingleV2.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2` v0 @kind this, `rx.Single` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToSingleV2;.<init>:(Lrx/Single;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3cf588.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L3cf58e.  v0.`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2.source` @type ^`rx.Single` := v1 @kind object;
  #L3cf592.  return @kind void;
}
procedure `void` `subscribeActual`(`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2` v1 @kind this, `io.reactivex.SingleObserver` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToSingleV2;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3cf5a4.  v0:= new `hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber`;
  #L3cf5a8.  call `<init>`(v0, v2) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToSingleV2$SourceSingleSubscriber;.<init>:(Lio/reactivex/SingleObserver;)V` @kind direct;
  #L3cf5ae.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3cf5b4.  v2:= v1.`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2.source` @type ^`rx.Single` @kind object;
  #L3cf5b8.  call temp:= `subscribe`(v2, v0) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L3cf5be.  return @kind void;
}
