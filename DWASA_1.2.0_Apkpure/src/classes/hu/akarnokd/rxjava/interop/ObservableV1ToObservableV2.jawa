record `hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2` @kind class @AccessFlag FINAL extends `io.reactivex.Observable` @kind class {
  `rx.Observable` `hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2;.<init>:(Lrx/Observable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3cf160.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L3cf166.  v0.`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2.source` @type ^`rx.Observable` := v1 @kind object;
  #L3cf16a.  return @kind void;
}
procedure `void` `subscribeActual`(`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3cf17c.  v0:= new `hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber`;
  #L3cf180.  call `<init>`(v0, v2) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2$ObservableSubscriber;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L3cf186.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L3cf18c.  v2:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2.source` @type ^`rx.Observable` @kind object;
  #L3cf190.  call temp:= `unsafeSubscribe`(v2, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L3cf196.  return @kind void;
}
