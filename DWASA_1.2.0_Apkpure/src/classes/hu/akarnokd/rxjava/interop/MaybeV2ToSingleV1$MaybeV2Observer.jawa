record `hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `rx.Subscription` @kind interface {
  `rx.SingleSubscriber` `hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer.actual` @AccessFlag FINAL;
}
global `long` `@@hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer` v0 @kind this, `rx.SingleSubscriber` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToSingleV1$MaybeV2Observer;.<init>:(Lrx/SingleSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3cedc4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3cedca.  v0.`hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L3cedce.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer` v1 @kind this) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToSingleV1$MaybeV2Observer;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ced9c.  call temp:= `get`(v1) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToSingleV1$MaybeV2Observer;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ceda2.  v0:= temp @kind object;
  #L3ceda4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3ceda8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3cedae.  v0:= temp;
  #L3cedb0.  return v0;
}
procedure `void` `onComplete`(`hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer` v3 @kind this) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToSingleV1$MaybeV2Observer;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cede0.  v0:= v3.`hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L3cede4.  v1:= new `java.util.NoSuchElementException`;
  #L3cede8.  v2:= "The source Maybe was empty." @kind object;
  #L3cedec.  call `<init>`(v1, v2) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cedf2.  call `onError`(v0, v1) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3cedf8.  return @kind void;
}
procedure `void` `onError`(`hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToSingleV1$MaybeV2Observer;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cee0c.  v0:= v1.`hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L3cee10.  call `onError`(v0, v2) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3cee16.  return @kind void;
}
procedure `void` `onSubscribe`(`hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToSingleV1$MaybeV2Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L3cee28.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3cee2e.  return @kind void;
}
procedure `void` `onSuccess`(`hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToSingleV1$MaybeV2Observer;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cee40.  v0:= v1.`hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L3cee44.  call `onSuccess`(v0, v2) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L3cee4a.  return @kind void;
}
procedure `void` `unsubscribe`(`hu.akarnokd.rxjava.interop.MaybeV2ToSingleV1$MaybeV2Observer` v0 @kind this) @signature `Lhu/akarnokd/rxjava/interop/MaybeV2ToSingleV1$MaybeV2Observer;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;

  #L3cee5c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3cee62.  return @kind void;
}
