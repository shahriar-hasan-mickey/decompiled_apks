record `hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber.observer` @AccessFlag FINAL;
}
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToSingleV2$SourceSingleSubscriber;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3cf4fc.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L3cf502.  v0.`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber.observer` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L3cf506.  return @kind void;
}
procedure `void` `dispose`(`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber` v0 @kind this) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToSingleV2$SourceSingleSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3cf518.  call `unsubscribe`(v0) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToSingleV2$SourceSingleSubscriber;.unsubscribe:()V` @kind virtual;
  #L3cf51e.  return @kind void;
}
procedure `boolean` `isDisposed`(`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber` v1 @kind this) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToSingleV2$SourceSingleSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf4e0.  call temp:= `isUnsubscribed`(v1) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToSingleV2$SourceSingleSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L3cf4e6.  v0:= temp;
  #L3cf4e8.  return v0;
}
procedure `void` `onError`(`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToSingleV2$SourceSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf530.  v0:= v1.`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber.observer` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3cf534.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3cf53a.  return @kind void;
}
procedure `void` `onSuccess`(`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToSingleV2$SourceSingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cf54c.  if v3 != 0 then goto L3cf56a;
  #L3cf550.  v3:= v2.`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber.observer` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3cf554.  v0:= new `java.lang.NullPointerException`;
  #L3cf558.  v1:= "The upstream 1.x Single signalled a null value which is not supported in 2.x" @kind object;
  #L3cf55c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf562.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3cf568.  goto L3cf574;
  #L3cf56a.  v0:= v2.`hu.akarnokd.rxjava.interop.SingleV1ToSingleV2$SourceSingleSubscriber.observer` @type ^`io.reactivex.SingleObserver` @kind object;
  #L3cf56e.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L3cf574.  return @kind void;
}
