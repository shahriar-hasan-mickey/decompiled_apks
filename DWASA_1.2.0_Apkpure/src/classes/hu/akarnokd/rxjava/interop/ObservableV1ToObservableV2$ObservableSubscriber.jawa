record `hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber.actual` @AccessFlag FINAL;
  `boolean` `hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber.done` @AccessFlag ;
}
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2$ObservableSubscriber;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3cf084.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L3cf08a.  v0.`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber.actual` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L3cf08e.  return @kind void;
}
procedure `void` `dispose`(`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber` v0 @kind this) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2$ObservableSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3cf0a0.  call `unsubscribe`(v0) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2$ObservableSubscriber;.unsubscribe:()V` @kind virtual;
  #L3cf0a6.  return @kind void;
}
procedure `boolean` `isDisposed`(`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber` v1 @kind this) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2$ObservableSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf068.  call temp:= `isUnsubscribed`(v1) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2$ObservableSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L3cf06e.  v0:= temp;
  #L3cf070.  return v0;
}
procedure `void` `onCompleted`(`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber` v1 @kind this) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2$ObservableSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf0b8.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3cf0bc.  if v0 == 0 then goto L3cf0c2;
  #L3cf0c0.  return @kind void;
  #L3cf0c2.  v0:= 1I;
  #L3cf0c4.  v1.`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3cf0c8.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber.actual` @type ^`io.reactivex.Observer` @kind object;
  #L3cf0cc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L3cf0d2.  return @kind void;
}
procedure `void` `onError`(`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2$ObservableSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf0e4.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3cf0e8.  if v0 == 0 then goto L3cf0f4;
  #L3cf0ec.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3cf0f2.  return @kind void;
  #L3cf0f4.  v0:= 1I;
  #L3cf0f6.  v1.`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3cf0fa.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber.actual` @type ^`io.reactivex.Observer` @kind object;
  #L3cf0fe.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3cf104.  return @kind void;
}
procedure `void` `onNext`(`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2$ObservableSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf118.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3cf11c.  if v0 == 0 then goto L3cf122;
  #L3cf120.  return @kind void;
  #L3cf122.  if v2 != 0 then goto L3cf142;
  #L3cf126.  call `unsubscribe`(v1) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2$ObservableSubscriber;.unsubscribe:()V` @kind virtual;
  #L3cf12c.  v2:= new `java.lang.NullPointerException`;
  #L3cf130.  v0:= "The upstream 1.x Observable signalled a null value which is not supported in 2.x" @kind object;
  #L3cf134.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf13a.  call `onError`(v1, v2) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToObservableV2$ObservableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3cf140.  goto L3cf14c;
  #L3cf142.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToObservableV2$ObservableSubscriber.actual` @type ^`io.reactivex.Observer` @kind object;
  #L3cf146.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3cf14c.  return @kind void;
}
