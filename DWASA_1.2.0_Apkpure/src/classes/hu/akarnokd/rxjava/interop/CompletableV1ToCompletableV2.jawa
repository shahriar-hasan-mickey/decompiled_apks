record `hu.akarnokd.rxjava.interop.CompletableV1ToCompletableV2` @kind class @AccessFlag FINAL extends `io.reactivex.Completable` @kind class {
  `rx.Completable` `hu.akarnokd.rxjava.interop.CompletableV1ToCompletableV2.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.CompletableV1ToCompletableV2` v0 @kind this, `rx.Completable` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/CompletableV1ToCompletableV2;.<init>:(Lrx/Completable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ce8c4.  call `<init>`(v0) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L3ce8ca.  v0.`hu.akarnokd.rxjava.interop.CompletableV1ToCompletableV2.source` @type ^`rx.Completable` := v1 @kind object;
  #L3ce8ce.  return @kind void;
}
procedure `void` `subscribeActual`(`hu.akarnokd.rxjava.interop.CompletableV1ToCompletableV2` v2 @kind this, `io.reactivex.CompletableObserver` v3 @kind object) @signature `Lhu/akarnokd/rxjava/interop/CompletableV1ToCompletableV2;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3ce8e0.  v0:= v2.`hu.akarnokd.rxjava.interop.CompletableV1ToCompletableV2.source` @type ^`rx.Completable` @kind object;
  #L3ce8e4.  v1:= new `hu.akarnokd.rxjava.interop.CompletableV1ToCompletableV2$SourceCompletableSubscriber`;
  #L3ce8e8.  call `<init>`(v1, v3) @signature `Lhu/akarnokd/rxjava/interop/CompletableV1ToCompletableV2$SourceCompletableSubscriber;.<init>:(Lio/reactivex/CompletableObserver;)V` @kind direct;
  #L3ce8ee.  call `subscribe`(v0, v1) @signature `Lrx/Completable;.subscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L3ce8f4.  return @kind void;
}
