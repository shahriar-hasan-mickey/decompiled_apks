record `hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriberSubscription` @kind class @AccessFlag FINAL extends `org.reactivestreams.Subscription` @kind interface {
  `hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber` `hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriberSubscription.parent` @AccessFlag FINAL;
}
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriberSubscription` v0 @kind this, `hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriberSubscription;.<init>:(Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ceed8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ceede.  v0.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriberSubscription.parent` @type ^`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber` := v1 @kind object;
  #L3ceee2.  return @kind void;
}
procedure `void` `cancel`(`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriberSubscription` v1 @kind this) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriberSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ceef4.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriberSubscription.parent` @type ^`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber` @kind object;
  #L3ceef8.  call `unsubscribe`(v0) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;.unsubscribe:()V` @kind virtual;
  #L3ceefe.  return @kind void;
}
procedure `void` `request`(`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriberSubscription` v1 @kind this, `long` v2 ) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriberSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cef10.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriberSubscription.parent` @type ^`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber` @kind object;
  #L3cef14.  call `requestMore`(v0, v2) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;.requestMore:(J)V` @kind virtual;
  #L3cef1a.  return @kind void;
}
