record `hu.akarnokd.rxjava.interop.SingleV1ToMaybeV2$SourceSingleSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `hu.akarnokd.rxjava.interop.SingleV1ToMaybeV2$SourceSingleSubscriber.observer` @AccessFlag FINAL;
}
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.SingleV1ToMaybeV2$SourceSingleSubscriber` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToMaybeV2$SourceSingleSubscriber;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3cf40c.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L3cf412.  v0.`hu.akarnokd.rxjava.interop.SingleV1ToMaybeV2$SourceSingleSubscriber.observer` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L3cf416.  return @kind void;
}
procedure `void` `dispose`(`hu.akarnokd.rxjava.interop.SingleV1ToMaybeV2$SourceSingleSubscriber` v0 @kind this) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToMaybeV2$SourceSingleSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L3cf428.  call `unsubscribe`(v0) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToMaybeV2$SourceSingleSubscriber;.unsubscribe:()V` @kind virtual;
  #L3cf42e.  return @kind void;
}
procedure `boolean` `isDisposed`(`hu.akarnokd.rxjava.interop.SingleV1ToMaybeV2$SourceSingleSubscriber` v1 @kind this) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToMaybeV2$SourceSingleSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf3f0.  call temp:= `isUnsubscribed`(v1) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToMaybeV2$SourceSingleSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L3cf3f6.  v0:= temp;
  #L3cf3f8.  return v0;
}
procedure `void` `onError`(`hu.akarnokd.rxjava.interop.SingleV1ToMaybeV2$SourceSingleSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToMaybeV2$SourceSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf440.  v0:= v1.`hu.akarnokd.rxjava.interop.SingleV1ToMaybeV2$SourceSingleSubscriber.observer` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L3cf444.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3cf44a.  return @kind void;
}
procedure `void` `onSuccess`(`hu.akarnokd.rxjava.interop.SingleV1ToMaybeV2$SourceSingleSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV1ToMaybeV2$SourceSingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cf45c.  if v3 != 0 then goto L3cf47a;
  #L3cf460.  v3:= v2.`hu.akarnokd.rxjava.interop.SingleV1ToMaybeV2$SourceSingleSubscriber.observer` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L3cf464.  v0:= new `java.lang.NullPointerException`;
  #L3cf468.  v1:= "The upstream 1.x Single signalled a null value which is not supported in 2.x" @kind object;
  #L3cf46c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf472.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3cf478.  goto L3cf484;
  #L3cf47a.  v0:= v2.`hu.akarnokd.rxjava.interop.SingleV1ToMaybeV2$SourceSingleSubscriber.observer` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L3cf47e.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L3cf484.  return @kind void;
}
