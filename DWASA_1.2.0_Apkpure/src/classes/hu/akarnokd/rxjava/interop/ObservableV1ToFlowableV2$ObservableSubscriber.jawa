record `hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `org.reactivestreams.Subscriber` `hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber.actual` @AccessFlag FINAL;
  `boolean` `hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber.done` @AccessFlag ;
}
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3cef2c.  call `<init>`(v2) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L3cef32.  v2.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L3cef36.  v0:= 0L;
  #L3cef3a.  call `request`(v2, v0) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;.request:(J)V` @kind virtual;
  #L3cef40.  return @kind void;
}
procedure `void` `onCompleted`(`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber` v1 @kind this) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cef54.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3cef58.  if v0 == 0 then goto L3cef5e;
  #L3cef5c.  return @kind void;
  #L3cef5e.  v0:= 1I;
  #L3cef60.  v1.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3cef64.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3cef68.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L3cef6e.  return @kind void;
}
procedure `void` `onError`(`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cef80.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3cef84.  if v0 == 0 then goto L3cef90;
  #L3cef88.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L3cef8e.  return @kind void;
  #L3cef90.  v0:= 1I;
  #L3cef92.  v1.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3cef96.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3cef9a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L3cefa0.  return @kind void;
}
procedure `void` `onNext`(`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cefb4.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber.done` @type ^`boolean` @kind boolean;
  #L3cefb8.  if v0 == 0 then goto L3cefbe;
  #L3cefbc.  return @kind void;
  #L3cefbe.  if v2 != 0 then goto L3cefde;
  #L3cefc2.  call `unsubscribe`(v1) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;.unsubscribe:()V` @kind virtual;
  #L3cefc8.  v2:= new `java.lang.NullPointerException`;
  #L3cefcc.  v0:= "The upstream 1.x Observable signalled a null value which is not supported in 2.x" @kind object;
  #L3cefd0.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cefd6.  call `onError`(v1, v2) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3cefdc.  goto L3cefe8;
  #L3cefde.  v0:= v1.`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber.actual` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L3cefe2.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3cefe8.  return @kind void;
}
procedure `void` `requestMore`(`hu.akarnokd.rxjava.interop.ObservableV1ToFlowableV2$ObservableSubscriber` v0 @kind this, `long` v1 ) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;.requestMore:(J)V` @AccessFlag  {
    temp;

  #L3ceffc.  call `request`(v0, v1) @signature `Lhu/akarnokd/rxjava/interop/ObservableV1ToFlowableV2$ObservableSubscriber;.request:(J)V` @kind virtual;
  #L3cf002.  return @kind void;
}
