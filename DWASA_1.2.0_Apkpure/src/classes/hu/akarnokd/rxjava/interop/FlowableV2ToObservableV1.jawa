record `hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1` @kind class @AccessFlag FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `org.reactivestreams.Publisher` `hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1;.<init>:(Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3cec04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cec0a.  v0.`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1.source` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L3cec0e.  return @kind void;
}
procedure `void` `call`(`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3cec20.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L3cec24.  call `call`(v0, v1) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L3cec2a.  return @kind void;
}
procedure `void` `call`(`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cec3c.  v0:= new `hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber`;
  #L3cec40.  call `<init>`(v0, v2) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1$SourceSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L3cec46.  call `add`(v2, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L3cec4c.  call `setProducer`(v2, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L3cec52.  v2:= v1.`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1.source` @type ^`org.reactivestreams.Publisher` @kind object;
  #L3cec56.  call `subscribe`(v2, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L3cec5c.  return @kind void;
}
