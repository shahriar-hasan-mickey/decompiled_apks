record `hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `rx.Subscription` @kind interface {
  `rx.SingleSubscriber` `hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver.actual` @AccessFlag FINAL;
}
global `long` `@@hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver` v0 @kind this, `rx.SingleSubscriber` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV2ToSingleV1$SourceSingleObserver;.<init>:(Lrx/SingleSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3cf5f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3cf5fe.  v0.`hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L3cf602.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver` v1 @kind this) @signature `Lhu/akarnokd/rxjava/interop/SingleV2ToSingleV1$SourceSingleObserver;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf5d0.  call temp:= `get`(v1) @signature `Lhu/akarnokd/rxjava/interop/SingleV2ToSingleV1$SourceSingleObserver;.get:()Ljava/lang/Object;` @kind virtual;
  #L3cf5d6.  v0:= temp @kind object;
  #L3cf5d8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L3cf5dc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3cf5e2.  v0:= temp;
  #L3cf5e4.  return v0;
}
procedure `void` `onError`(`hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV2ToSingleV1$SourceSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf614.  v0:= v1.`hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L3cf618.  call `onError`(v0, v2) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3cf61e.  return @kind void;
}
procedure `void` `onSubscribe`(`hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV2ToSingleV1$SourceSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L3cf630.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L3cf636.  return @kind void;
}
procedure `void` `onSuccess`(`hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/SingleV2ToSingleV1$SourceSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf648.  v0:= v1.`hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L3cf64c.  call `onSuccess`(v0, v2) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L3cf652.  return @kind void;
}
procedure `void` `unsubscribe`(`hu.akarnokd.rxjava.interop.SingleV2ToSingleV1$SourceSingleObserver` v0 @kind this) @signature `Lhu/akarnokd/rxjava/interop/SingleV2ToSingleV1$SourceSingleObserver;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;

  #L3cf664.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3cf66a.  return @kind void;
}
