record `hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `org.reactivestreams.Subscriber` @kind interface, `rx.Subscription` @kind interface, `rx.Producer` @kind interface {
  `rx.Subscriber` `hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber.requested` @AccessFlag FINAL;
}
global `long` `@@hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1$SourceSubscriber;.<init>:(Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ceb34.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3ceb3a.  v0.`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L3ceb3e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3ceb42.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3ceb48.  v0.`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L3ceb4c.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber` v1 @kind this) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1$SourceSubscriber;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ceb0c.  call temp:= `get`(v1) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1$SourceSubscriber;.get:()Ljava/lang/Object;` @kind virtual;
  #L3ceb12.  v0:= temp @kind object;
  #L3ceb14.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L3ceb18.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.isCancelled:(Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3ceb1e.  v0:= temp;
  #L3ceb20.  return v0;
}
procedure `void` `onComplete`(`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber` v1 @kind this) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1$SourceSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ceb60.  v0:= v1.`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L3ceb64.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L3ceb6a.  return @kind void;
}
procedure `void` `onError`(`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1$SourceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ceb7c.  v0:= v1.`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L3ceb80.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3ceb86.  return @kind void;
}
procedure `void` `onNext`(`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1$SourceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ceb98.  v0:= v1.`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L3ceb9c.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L3ceba2.  return @kind void;
}
procedure `void` `onSubscribe`(`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1$SourceSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cebb4.  v0:= v1.`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3cebb8.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L3cebbe.  return @kind void;
}
procedure `void` `request`(`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber` v1 @kind this, `long` v2 ) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1$SourceSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cebd0.  v0:= v1.`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3cebd4.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L3cebda.  return @kind void;
}
procedure `void` `unsubscribe`(`hu.akarnokd.rxjava.interop.FlowableV2ToObservableV1$SourceSubscriber` v0 @kind this) @signature `Lhu/akarnokd/rxjava/interop/FlowableV2ToObservableV1$SourceSubscriber;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;

  #L3cebec.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L3cebf2.  return @kind void;
}
