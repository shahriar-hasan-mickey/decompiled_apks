record `timber.log.Timber$DebugTree` @kind class @AccessFlag PUBLIC extends `timber.log.Timber$Tree` @kind class {
}
global `java.util.regex.Pattern` `@@timber.log.Timber$DebugTree.ANONYMOUS_CLASS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@timber.log.Timber$DebugTree.CALL_STACK_INDEX` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@timber.log.Timber$DebugTree.MAX_LOG_LENGTH` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ltimber/log/Timber$DebugTree;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c6fc4.  v0:= "(\\$\\d+)+$" @kind object;
  #L4c6fc8.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L4c6fce.  v0:= temp @kind object;
  #L4c6fd0.  `@@timber.log.Timber$DebugTree.ANONYMOUS_CLASS` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L4c6fd4.  return @kind void;
}
procedure `void` `<init>`(`timber.log.Timber$DebugTree` v0 @kind this) @signature `Ltimber/log/Timber$DebugTree;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c6fe8.  call `<init>`(v0) @signature `Ltimber/log/Timber$Tree;.<init>:()V` @kind direct;
  #L4c6fee.  return @kind void;
}
procedure `java.lang.String` `createStackElementTag`(`timber.log.Timber$DebugTree` v2 @kind this, `java.lang.StackTraceElement` v3 @kind object) @signature `Ltimber/log/Timber$DebugTree;.createStackElementTag:(Ljava/lang/StackTraceElement;)Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4c6f14.  call temp:= `getClassName`(v3) @signature `Ljava/lang/StackTraceElement;.getClassName:()Ljava/lang/String;` @kind virtual;
  #L4c6f1a.  v3:= temp @kind object;
  #L4c6f1c.  v0:= `@@timber.log.Timber$DebugTree.ANONYMOUS_CLASS` @type ^`java.util.regex.Pattern` @kind object;
  #L4c6f20.  call temp:= `matcher`(v0, v3) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L4c6f26.  v0:= temp @kind object;
  #L4c6f28.  call temp:= `find`(v0) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L4c6f2e.  v1:= temp;
  #L4c6f30.  if v1 == 0 then goto L4c6f40;
  #L4c6f34.  v3:= "" @kind object;
  #L4c6f38.  call temp:= `replaceAll`(v0, v3) @signature `Ljava/util/regex/Matcher;.replaceAll:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L4c6f3e.  v3:= temp @kind object;
  #L4c6f40.  v0:= 46I;
  #L4c6f44.  call temp:= `lastIndexOf`(v3, v0) @signature `Ljava/lang/String;.lastIndexOf:(I)I` @kind virtual;
  #L4c6f4a.  v0:= temp;
  #L4c6f4c.  v0:= v0 + 1;
  #L4c6f50.  call temp:= `substring`(v3, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L4c6f56.  v3:= temp @kind object;
  #L4c6f58.  return v3 @kind object;
}
procedure `java.lang.String` `getTag`(`timber.log.Timber$DebugTree` v3 @kind this) @signature `Ltimber/log/Timber$DebugTree;.getTag:()Ljava/lang/String;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4c6f6c.  call temp:= `getTag`(v3) @signature `Ltimber/log/Timber$Tree;.getTag:()Ljava/lang/String;` @kind super;
  #L4c6f72.  v0:= temp @kind object;
  #L4c6f74.  if v0 == 0 then goto L4c6f7a;
  #L4c6f78.  return v0 @kind object;
  #L4c6f7a.  v0:= new `java.lang.Throwable`;
  #L4c6f7e.  call `<init>`(v0) @signature `Ljava/lang/Throwable;.<init>:()V` @kind direct;
  #L4c6f84.  call temp:= `getStackTrace`(v0) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L4c6f8a.  v0:= temp @kind object;
  #L4c6f8c.  v1:= length @variable v0;
  #L4c6f8e.  v2:= 5I;
  #L4c6f90.  if v1 <= v2 then goto L4c6fa2;
  #L4c6f94.  v0:= v0[v2] @kind object;
  #L4c6f98.  call temp:= `createStackElementTag`(v3, v0) @signature `Ltimber/log/Timber$DebugTree;.createStackElementTag:(Ljava/lang/StackTraceElement;)Ljava/lang/String;` @kind virtual;
  #L4c6f9e.  v0:= temp @kind object;
  #L4c6fa0.  return v0 @kind object;
  #L4c6fa2.  v0:= new `java.lang.IllegalStateException`;
  #L4c6fa6.  v1:= "Synthetic stacktrace didn't have enough elements: are you using proguard?" @kind object;
  #L4c6faa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c6fb0.  throw v0;
}
procedure `void` `log`(`timber.log.Timber$DebugTree` v4 @kind this, `int` v5 , `java.lang.String` v6 @kind object, `java.lang.String` v7 @kind object, `java.lang.Throwable` v8 @kind object) @signature `Ltimber/log/Timber$DebugTree;.log:(ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c7000.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4c7006.  v8:= temp;
  #L4c7008.  v0:= 7I;
  #L4c700a.  v1:= 4000I;
  #L4c700e.  if v8 >= v1 then goto L4c7026;
  #L4c7012.  if v5 != v0 then goto L4c701e;
  #L4c7016.  call temp:= `wtf`(v6, v7) @signature `Landroid/util/Log;.wtf:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L4c701c.  goto L4c7024;
  #L4c701e.  call temp:= `println`(v5, v6, v7) @signature `Landroid/util/Log;.println:(ILjava/lang/String;Ljava/lang/String;)I` @kind static;
  #L4c7024.  return @kind void;
  #L4c7026.  v8:= 0I;
  #L4c7028.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4c702e.  v1:= temp;
  #L4c7030.  if v8 >= v1 then goto L4c707e;
  #L4c7034.  v2:= 10I;
  #L4c7038.  call temp:= `indexOf`(v7, v2, v8) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L4c703e.  v2:= temp;
  #L4c7040.  v3:= -1I;
  #L4c7042.  if v2 == v3 then goto L4c7048;
  #L4c7046.  goto L4c704a;
  #L4c7048.  v2:= v1;
  #L4c704a.  v3:= v8 + 4000;
  #L4c704e.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4c7054.  v3:= temp;
  #L4c7056.  call temp:= `substring`(v7, v8, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4c705c.  v8:= temp @kind object;
  #L4c705e.  if v5 != v0 then goto L4c706a;
  #L4c7062.  call temp:= `wtf`(v6, v8) @signature `Landroid/util/Log;.wtf:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L4c7068.  goto L4c7070;
  #L4c706a.  call temp:= `println`(v5, v6, v8) @signature `Landroid/util/Log;.println:(ILjava/lang/String;Ljava/lang/String;)I` @kind static;
  #L4c7070.  if v3 < v2 then goto L4c707a;
  #L4c7074.  v8:= v3 + 1;
  #L4c7078.  goto L4c7030;
  #L4c707a.  v8:= v3;
  #L4c707c.  goto L4c704a;
  #L4c707e.  return @kind void;
}
