record `timber.log.Timber` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.List` `@@timber.log.Timber.FOREST` @AccessFlag PRIVATE_STATIC_FINAL;
global `timber.log.Timber$Tree`[] `@@timber.log.Timber.TREE_ARRAY_EMPTY` @AccessFlag PRIVATE_STATIC_FINAL;
global `timber.log.Timber$Tree` `@@timber.log.Timber.TREE_OF_SOULS` @AccessFlag PRIVATE_STATIC_FINAL;
global `timber.log.Timber$Tree`[] `@@timber.log.Timber.forestAsArray` @AccessFlag STATIC_VOLATILE;
procedure `void` `<clinit>`() @signature `Ltimber/log/Timber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c7548.  v0:= 0I;
  #L4c754a.  v0:= new `timber.log.Timber$Tree`[v0];
  #L4c754e.  `@@timber.log.Timber.TREE_ARRAY_EMPTY` @type ^`timber.log.Timber$Tree`[] := v0 @kind object;
  #L4c7552.  v0:= new `java.util.ArrayList`;
  #L4c7556.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4c755c.  `@@timber.log.Timber.FOREST` @type ^`java.util.List` := v0 @kind object;
  #L4c7560.  v0:= `@@timber.log.Timber.TREE_ARRAY_EMPTY` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c7564.  `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] := v0 @kind object;
  #L4c7568.  v0:= new `timber.log.Timber$1`;
  #L4c756c.  call `<init>`(v0) @signature `Ltimber/log/Timber$1;.<init>:()V` @kind direct;
  #L4c7572.  `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` := v0 @kind object;
  #L4c7576.  return @kind void;
}
procedure `void` `<init>`(`timber.log.Timber` v2 @kind this) @signature `Ltimber/log/Timber;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4c7588.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c758e.  v0:= new `java.lang.AssertionError`;
  #L4c7592.  v1:= "No instances." @kind object;
  #L4c7596.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c759c.  throw v0;
}
procedure `timber.log.Timber$Tree` `asTree`() @signature `Ltimber/log/Timber;.asTree:()Ltimber/log/Timber$Tree;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c74f8.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c74fc.  return v0 @kind object;
}
procedure `void` `d`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Ltimber/log/Timber;.d:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c75b0.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c75b4.  call `d`(v0, v1, v2) @signature `Ltimber/log/Timber$Tree;.d:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c75ba.  return @kind void;
}
procedure `void` `d`(`java.lang.Throwable` v1 @kind object) @signature `Ltimber/log/Timber;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c75cc.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c75d0.  call `d`(v0, v1) @signature `Ltimber/log/Timber$Tree;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c75d6.  return @kind void;
}
procedure `void` `d`(`java.lang.Throwable` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Ltimber/log/Timber;.d:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c75e8.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c75ec.  call `d`(v0, v1, v2, v3) @signature `Ltimber/log/Timber$Tree;.d:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c75f2.  return @kind void;
}
procedure `void` `e`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Ltimber/log/Timber;.e:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c7604.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c7608.  call `e`(v0, v1, v2) @signature `Ltimber/log/Timber$Tree;.e:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c760e.  return @kind void;
}
procedure `void` `e`(`java.lang.Throwable` v1 @kind object) @signature `Ltimber/log/Timber;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c7620.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c7624.  call `e`(v0, v1) @signature `Ltimber/log/Timber$Tree;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c762a.  return @kind void;
}
procedure `void` `e`(`java.lang.Throwable` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Ltimber/log/Timber;.e:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c763c.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c7640.  call `e`(v0, v1, v2, v3) @signature `Ltimber/log/Timber$Tree;.e:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c7646.  return @kind void;
}
procedure `java.util.List` `forest`() @signature `Ltimber/log/Timber;.forest:()Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4c74b4.  v0:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c74b8.  @monitorenter v0
  #L4c74ba.  v1:= new `java.util.ArrayList`;
  #L4c74be.  v2:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c74c2.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4c74c8.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4c74ce.  v1:= temp @kind object;
  #L4c74d0.  @monitorexit v0
  #L4c74d2.  return v1 @kind object;
  #L4c74d4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c74d6.  @monitorexit v0
  #L4c74d8.  throw v1;
  catch `java.lang.Throwable` @[L4c74ba..L4c74d8] goto L4c74d4;
}
procedure `void` `i`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Ltimber/log/Timber;.i:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c7658.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c765c.  call `i`(v0, v1, v2) @signature `Ltimber/log/Timber$Tree;.i:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c7662.  return @kind void;
}
procedure `void` `i`(`java.lang.Throwable` v1 @kind object) @signature `Ltimber/log/Timber;.i:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c7674.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c7678.  call `i`(v0, v1) @signature `Ltimber/log/Timber$Tree;.i:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c767e.  return @kind void;
}
procedure `void` `i`(`java.lang.Throwable` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Ltimber/log/Timber;.i:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c7690.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c7694.  call `i`(v0, v1, v2, v3) @signature `Ltimber/log/Timber$Tree;.i:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c769a.  return @kind void;
}
procedure `void` `log`(`int` v1 , `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Ltimber/log/Timber;.log:(ILjava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c76ac.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c76b0.  call `log`(v0, v1, v2, v3) @signature `Ltimber/log/Timber$Tree;.log:(ILjava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c76b6.  return @kind void;
}
procedure `void` `log`(`int` v1 , `java.lang.Throwable` v2 @kind object) @signature `Ltimber/log/Timber;.log:(ILjava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c76c8.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c76cc.  call `log`(v0, v1, v2) @signature `Ltimber/log/Timber$Tree;.log:(ILjava/lang/Throwable;)V` @kind virtual;
  #L4c76d2.  return @kind void;
}
procedure `void` `log`(`int` v1 , `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber;.log:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c76e4.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c76e8.  call `log`(v0, v1, v2, v3, v4) @signature `Ltimber/log/Timber$Tree;.log:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c76ee.  return @kind void;
}
procedure `void` `plant`(`timber.log.Timber$Tree` v2 @kind object) @signature `Ltimber/log/Timber;.plant:(Ltimber/log/Timber$Tree;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4c7700.  if v2 == 0 then goto L4c775a;
  #L4c7704.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c7708.  if v2 == v0 then goto L4c774a;
  #L4c770c.  v0:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c7710.  @monitorenter v0
  #L4c7712.  v1:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c7716.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4c771c.  v2:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c7720.  v1:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c7724.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4c772a.  v1:= temp;
  #L4c772c.  v1:= new `timber.log.Timber$Tree`[v1];
  #L4c7730.  call temp:= `toArray`(v2, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4c7736.  v2:= temp @kind object;
  #L4c7738.  v2:= (`timber.log.Timber$Tree`[]) v2 @kind object;
  #L4c773c.  `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] := v2 @kind object;
  #L4c7740.  @monitorexit v0
  #L4c7742.  return @kind void;
  #L4c7744.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c7746.  @monitorexit v0
  #L4c7748.  throw v2;
  #L4c774a.  v2:= new `java.lang.IllegalArgumentException`;
  #L4c774e.  v0:= "Cannot plant Timber into itself." @kind object;
  #L4c7752.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c7758.  throw v2;
  #L4c775a.  v2:= new `java.lang.NullPointerException`;
  #L4c775e.  v0:= "tree == null" @kind object;
  #L4c7762.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c7768.  throw v2;
  catch `java.lang.Throwable` @[L4c7712..L4c7748] goto L4c7744;
}
procedure `void` `plant`(`timber.log.Timber$Tree`[] v4 @kind object) @signature `Ltimber/log/Timber;.plant:([Ltimber/log/Timber$Tree;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c7788.  if v4 == 0 then goto L4c7808;
  #L4c778c.  v0:= length @variable v4;
  #L4c778e.  v1:= 0I;
  #L4c7790.  if v1 >= v0 then goto L4c77ca;
  #L4c7794.  v2:= v4[v1] @kind object;
  #L4c7798.  if v2 == 0 then goto L4c77ba;
  #L4c779c.  v3:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c77a0.  if v2 == v3 then goto L4c77aa;
  #L4c77a4.  v1:= v1 + 1;
  #L4c77a8.  goto L4c7790;
  #L4c77aa.  v4:= new `java.lang.IllegalArgumentException`;
  #L4c77ae.  v0:= "Cannot plant Timber into itself." @kind object;
  #L4c77b2.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c77b8.  throw v4;
  #L4c77ba.  v4:= new `java.lang.NullPointerException`;
  #L4c77be.  v0:= "trees contains null" @kind object;
  #L4c77c2.  call `<init>`(v4, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c77c8.  throw v4;
  #L4c77ca.  v0:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c77ce.  @monitorenter v0
  #L4c77d0.  v1:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c77d4.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L4c77da.  v4:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c77de.  v1:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c77e2.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4c77e8.  v1:= temp;
  #L4c77ea.  v1:= new `timber.log.Timber$Tree`[v1];
  #L4c77ee.  call temp:= `toArray`(v4, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4c77f4.  v4:= temp @kind object;
  #L4c77f6.  v4:= (`timber.log.Timber$Tree`[]) v4 @kind object;
  #L4c77fa.  `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] := v4 @kind object;
  #L4c77fe.  @monitorexit v0
  #L4c7800.  return @kind void;
  #L4c7802.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c7804.  @monitorexit v0
  #L4c7806.  throw v4;
  #L4c7808.  v4:= new `java.lang.NullPointerException`;
  #L4c780c.  v0:= "trees == null" @kind object;
  #L4c7810.  call `<init>`(v4, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c7816.  goto L4c781a;
  #L4c7818.  throw v4;
  #L4c781a.  goto L4c7818;
  catch `java.lang.Throwable` @[L4c77d0..L4c7806] goto L4c7802;
}
procedure `timber.log.Timber$Tree` `tag`(`java.lang.String` v4 @kind object) @signature `Ltimber/log/Timber;.tag:(Ljava/lang/String;)Ltimber/log/Timber$Tree;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c7510.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c7514.  v1:= length @variable v0;
  #L4c7516.  v2:= 0I;
  #L4c7518.  if v2 >= v1 then goto L4c7530;
  #L4c751c.  v3:= v0[v2] @kind object;
  #L4c7520.  v3:= v3.`timber.log.Timber$Tree.explicitTag` @type ^`java.lang.ThreadLocal` @kind object;
  #L4c7524.  call `set`(v3, v4) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c752a.  v2:= v2 + 1;
  #L4c752e.  goto L4c7518;
  #L4c7530.  v4:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c7534.  return v4 @kind object;
}
procedure `int` `treeCount`() @signature `Ltimber/log/Timber;.treeCount:()I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4c747c.  v0:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c7480.  @monitorenter v0
  #L4c7482.  v1:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c7486.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4c748c.  v1:= temp;
  #L4c748e.  @monitorexit v0
  #L4c7490.  return v1;
  #L4c7492.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c7494.  @monitorexit v0
  #L4c7496.  throw v1;
  catch `java.lang.Throwable` @[L4c7482..L4c7496] goto L4c7492;
}
procedure `void` `uproot`(`timber.log.Timber$Tree` v4 @kind object) @signature `Ltimber/log/Timber;.uproot:(Ltimber/log/Timber$Tree;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c7838.  v0:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c783c.  @monitorenter v0
  #L4c783e.  v1:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c7842.  call temp:= `remove`(v1, v4) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4c7848.  v1:= temp;
  #L4c784a.  if v1 == 0 then goto L4c7876;
  #L4c784e.  v4:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c7852.  v1:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c7856.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4c785c.  v1:= temp;
  #L4c785e.  v1:= new `timber.log.Timber$Tree`[v1];
  #L4c7862.  call temp:= `toArray`(v4, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4c7868.  v4:= temp @kind object;
  #L4c786a.  v4:= (`timber.log.Timber$Tree`[]) v4 @kind object;
  #L4c786e.  `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] := v4 @kind object;
  #L4c7872.  @monitorexit v0
  #L4c7874.  return @kind void;
  #L4c7876.  v1:= new `java.lang.IllegalArgumentException`;
  #L4c787a.  v2:= new `java.lang.StringBuilder`;
  #L4c787e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c7884.  v3:= "Cannot uproot tree which is not planted: " @kind object;
  #L4c7888.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c788e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7894.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c789a.  v4:= temp @kind object;
  #L4c789c.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c78a2.  throw v1;
  #L4c78a4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c78a6.  @monitorexit v0
  #L4c78a8.  throw v4;
  catch `java.lang.Throwable` @[L4c783e..L4c78a8] goto L4c78a4;
}
procedure `void` `uprootAll`() @signature `Ltimber/log/Timber;.uprootAll:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4c78c8.  v0:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c78cc.  @monitorenter v0
  #L4c78ce.  v1:= `@@timber.log.Timber.FOREST` @type ^`java.util.List` @kind object;
  #L4c78d2.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4c78d8.  v1:= `@@timber.log.Timber.TREE_ARRAY_EMPTY` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c78dc.  `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] := v1 @kind object;
  #L4c78e0.  @monitorexit v0
  #L4c78e2.  return @kind void;
  #L4c78e4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c78e6.  @monitorexit v0
  #L4c78e8.  throw v1;
  catch `java.lang.Throwable` @[L4c78ce..L4c78e8] goto L4c78e4;
}
procedure `void` `v`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Ltimber/log/Timber;.v:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c7908.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c790c.  call `v`(v0, v1, v2) @signature `Ltimber/log/Timber$Tree;.v:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c7912.  return @kind void;
}
procedure `void` `v`(`java.lang.Throwable` v1 @kind object) @signature `Ltimber/log/Timber;.v:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c7924.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c7928.  call `v`(v0, v1) @signature `Ltimber/log/Timber$Tree;.v:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c792e.  return @kind void;
}
procedure `void` `v`(`java.lang.Throwable` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Ltimber/log/Timber;.v:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c7940.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c7944.  call `v`(v0, v1, v2, v3) @signature `Ltimber/log/Timber$Tree;.v:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c794a.  return @kind void;
}
procedure `void` `w`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Ltimber/log/Timber;.w:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c795c.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c7960.  call `w`(v0, v1, v2) @signature `Ltimber/log/Timber$Tree;.w:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c7966.  return @kind void;
}
procedure `void` `w`(`java.lang.Throwable` v1 @kind object) @signature `Ltimber/log/Timber;.w:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c7978.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c797c.  call `w`(v0, v1) @signature `Ltimber/log/Timber$Tree;.w:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c7982.  return @kind void;
}
procedure `void` `w`(`java.lang.Throwable` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Ltimber/log/Timber;.w:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c7994.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c7998.  call `w`(v0, v1, v2, v3) @signature `Ltimber/log/Timber$Tree;.w:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c799e.  return @kind void;
}
procedure `void` `wtf`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Ltimber/log/Timber;.wtf:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c79b0.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c79b4.  call `wtf`(v0, v1, v2) @signature `Ltimber/log/Timber$Tree;.wtf:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c79ba.  return @kind void;
}
procedure `void` `wtf`(`java.lang.Throwable` v1 @kind object) @signature `Ltimber/log/Timber;.wtf:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c79cc.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c79d0.  call `wtf`(v0, v1) @signature `Ltimber/log/Timber$Tree;.wtf:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c79d6.  return @kind void;
}
procedure `void` `wtf`(`java.lang.Throwable` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Ltimber/log/Timber;.wtf:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c79e8.  v0:= `@@timber.log.Timber.TREE_OF_SOULS` @type ^`timber.log.Timber$Tree` @kind object;
  #L4c79ec.  call `wtf`(v0, v1, v2, v3) @signature `Ltimber/log/Timber$Tree;.wtf:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c79f2.  return @kind void;
}
