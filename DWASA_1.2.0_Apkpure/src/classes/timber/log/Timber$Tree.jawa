record `timber.log.Timber$Tree` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.lang.ThreadLocal` `timber.log.Timber$Tree.explicitTag` @AccessFlag FINAL;
}
procedure `void` `<init>`(`timber.log.Timber$Tree` v1 @kind this) @signature `Ltimber/log/Timber$Tree;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c714c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c7152.  v0:= new `java.lang.ThreadLocal`;
  #L4c7156.  call `<init>`(v0) @signature `Ljava/lang/ThreadLocal;.<init>:()V` @kind direct;
  #L4c715c.  v1.`timber.log.Timber$Tree.explicitTag` @type ^`java.lang.ThreadLocal` := v0 @kind object;
  #L4c7160.  return @kind void;
}
procedure `java.lang.String` `getStackTraceString`(`timber.log.Timber$Tree` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Ltimber/log/Timber$Tree;.getStackTraceString:(Ljava/lang/Throwable;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4c70dc.  v0:= new `java.io.StringWriter`;
  #L4c70e0.  v1:= 256I;
  #L4c70e4.  call `<init>`(v0, v1) @signature `Ljava/io/StringWriter;.<init>:(I)V` @kind direct;
  #L4c70ea.  v1:= new `java.io.PrintWriter`;
  #L4c70ee.  v2:= 0I;
  #L4c70f0.  call `<init>`(v1, v0, v2) @signature `Ljava/io/PrintWriter;.<init>:(Ljava/io/Writer;Z)V` @kind direct;
  #L4c70f6.  call `printStackTrace`(v4, v1) @signature `Ljava/lang/Throwable;.printStackTrace:(Ljava/io/PrintWriter;)V` @kind virtual;
  #L4c70fc.  call `flush`(v1) @signature `Ljava/io/PrintWriter;.flush:()V` @kind virtual;
  #L4c7102.  call temp:= `toString`(v0) @signature `Ljava/io/StringWriter;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c7108.  v4:= temp @kind object;
  #L4c710a.  return v4 @kind object;
}
procedure `void` `prepareLog`(`timber.log.Timber$Tree` v2 @kind this, `int` v3 , `java.lang.Throwable` v4 @kind object, `java.lang.String` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4c72dc.  call temp:= `getTag`(v2) @signature `Ltimber/log/Timber$Tree;.getTag:()Ljava/lang/String;` @kind virtual;
  #L4c72e2.  v0:= temp @kind object;
  #L4c72e4.  call temp:= `isLoggable`(v2, v0, v3) @signature `Ltimber/log/Timber$Tree;.isLoggable:(Ljava/lang/String;I)Z` @kind virtual;
  #L4c72ea.  v1:= temp;
  #L4c72ec.  if v1 != 0 then goto L4c72f2;
  #L4c72f0.  return @kind void;
  #L4c72f2.  call temp:= `isEmpty`(v5) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L4c72f8.  v1:= temp;
  #L4c72fa.  if v1 == 0 then goto L4c730e;
  #L4c72fe.  if v4 != 0 then goto L4c7304;
  #L4c7302.  return @kind void;
  #L4c7304.  call temp:= `getStackTraceString`(v2, v4) @signature `Ltimber/log/Timber$Tree;.getStackTraceString:(Ljava/lang/Throwable;)Ljava/lang/String;` @kind direct;
  #L4c730a.  v5:= temp @kind object;
  #L4c730c.  goto L4c7350;
  #L4c730e.  v1:= length @variable v6;
  #L4c7310.  if v1 <= 0 then goto L4c731c;
  #L4c7314.  call temp:= `formatMessage`(v2, v5, v6) @signature `Ltimber/log/Timber$Tree;.formatMessage:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind virtual;
  #L4c731a.  v5:= temp @kind object;
  #L4c731c.  if v4 == 0 then goto L4c7350;
  #L4c7320.  v6:= new `java.lang.StringBuilder`;
  #L4c7324.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c732a.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7330.  v5:= "\n" @kind object;
  #L4c7334.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c733a.  call temp:= `getStackTraceString`(v2, v4) @signature `Ltimber/log/Timber$Tree;.getStackTraceString:(Ljava/lang/Throwable;)Ljava/lang/String;` @kind direct;
  #L4c7340.  v5:= temp @kind object;
  #L4c7342.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7348.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c734e.  v5:= temp @kind object;
  #L4c7350.  call `log`(v2, v3, v0, v5, v4) @signature `Ltimber/log/Timber$Tree;.log:(ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L4c7356.  return @kind void;
}
procedure `void` `d`(`timber.log.Timber$Tree` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.d:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c7174.  v0:= 3I;
  #L4c7176.  v1:= 0I;
  #L4c7178.  call `prepareLog`(v2, v0, v1, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c717e.  return @kind void;
}
procedure `void` `d`(`timber.log.Timber$Tree` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Ltimber/log/Timber$Tree;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c7190.  v0:= 0I;
  #L4c7192.  v0:= new `java.lang.Object`[v0];
  #L4c7196.  v1:= 3I;
  #L4c7198.  v2:= 0I;
  #L4c719a.  call `prepareLog`(v3, v1, v4, v2, v0) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c71a0.  return @kind void;
}
procedure `void` `d`(`timber.log.Timber$Tree` v1 @kind this, `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.d:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c71b4.  v0:= 3I;
  #L4c71b6.  call `prepareLog`(v1, v0, v2, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c71bc.  return @kind void;
}
procedure `void` `e`(`timber.log.Timber$Tree` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.e:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c71d0.  v0:= 6I;
  #L4c71d2.  v1:= 0I;
  #L4c71d4.  call `prepareLog`(v2, v0, v1, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c71da.  return @kind void;
}
procedure `void` `e`(`timber.log.Timber$Tree` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Ltimber/log/Timber$Tree;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c71ec.  v0:= 0I;
  #L4c71ee.  v0:= new `java.lang.Object`[v0];
  #L4c71f2.  v1:= 6I;
  #L4c71f4.  v2:= 0I;
  #L4c71f6.  call `prepareLog`(v3, v1, v4, v2, v0) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c71fc.  return @kind void;
}
procedure `void` `e`(`timber.log.Timber$Tree` v1 @kind this, `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.e:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7210.  v0:= 6I;
  #L4c7212.  call `prepareLog`(v1, v0, v2, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c7218.  return @kind void;
}
procedure `java.lang.String` `formatMessage`(`timber.log.Timber$Tree` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Ltimber/log/Timber$Tree;.formatMessage:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;

  #L4c70c0.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4c70c6.  v1:= temp @kind object;
  #L4c70c8.  return v1 @kind object;
}
procedure `java.lang.String` `getTag`(`timber.log.Timber$Tree` v2 @kind this) @signature `Ltimber/log/Timber$Tree;.getTag:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c711c.  v0:= v2.`timber.log.Timber$Tree.explicitTag` @type ^`java.lang.ThreadLocal` @kind object;
  #L4c7120.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c7126.  v0:= temp @kind object;
  #L4c7128.  v0:= (`java.lang.String`) v0 @kind object;
  #L4c712c.  if v0 == 0 then goto L4c713a;
  #L4c7130.  v1:= v2.`timber.log.Timber$Tree.explicitTag` @type ^`java.lang.ThreadLocal` @kind object;
  #L4c7134.  call `remove`(v1) @signature `Ljava/lang/ThreadLocal;.remove:()V` @kind virtual;
  #L4c713a.  return v0 @kind object;
}
procedure `void` `i`(`timber.log.Timber$Tree` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.i:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c722c.  v0:= 4I;
  #L4c722e.  v1:= 0I;
  #L4c7230.  call `prepareLog`(v2, v0, v1, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c7236.  return @kind void;
}
procedure `void` `i`(`timber.log.Timber$Tree` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Ltimber/log/Timber$Tree;.i:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c7248.  v0:= 0I;
  #L4c724a.  v0:= new `java.lang.Object`[v0];
  #L4c724e.  v1:= 4I;
  #L4c7250.  v2:= 0I;
  #L4c7252.  call `prepareLog`(v3, v1, v4, v2, v0) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c7258.  return @kind void;
}
procedure `void` `i`(`timber.log.Timber$Tree` v1 @kind this, `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.i:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c726c.  v0:= 4I;
  #L4c726e.  call `prepareLog`(v1, v0, v2, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c7274.  return @kind void;
}
procedure `boolean` `isLoggable`(`timber.log.Timber$Tree` v0 @kind this, `int` v1 ) @signature `Ltimber/log/Timber$Tree;.isLoggable:(I)Z` @AccessFlag PROTECTED {
    temp;

  #L4c7090.  v1:= 1I;
  #L4c7092.  return v1;
}
procedure `boolean` `isLoggable`(`timber.log.Timber$Tree` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Ltimber/log/Timber$Tree;.isLoggable:(Ljava/lang/String;I)Z` @AccessFlag PROTECTED {
    temp;

  #L4c70a4.  call temp:= `isLoggable`(v0, v2) @signature `Ltimber/log/Timber$Tree;.isLoggable:(I)Z` @kind virtual;
  #L4c70aa.  v1:= temp;
  #L4c70ac.  return v1;
}
procedure `void` `log`(`int` v0 , `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Ltimber/log/Timber$Tree;.log:(ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `log`(`timber.log.Timber$Tree` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.log:(ILjava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7288.  v0:= 0I;
  #L4c728a.  call `prepareLog`(v1, v2, v0, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c7290.  return @kind void;
}
procedure `void` `log`(`timber.log.Timber$Tree` v2 @kind this, `int` v3 , `java.lang.Throwable` v4 @kind object) @signature `Ltimber/log/Timber$Tree;.log:(ILjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c72a4.  v0:= 0I;
  #L4c72a6.  v0:= new `java.lang.Object`[v0];
  #L4c72aa.  v1:= 0I;
  #L4c72ac.  call `prepareLog`(v2, v3, v4, v1, v0) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c72b2.  return @kind void;
}
procedure `void` `log`(`timber.log.Timber$Tree` v0 @kind this, `int` v1 , `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.log:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4c72c4.  call `prepareLog`(v0, v1, v2, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c72ca.  return @kind void;
}
procedure `void` `v`(`timber.log.Timber$Tree` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.v:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c7368.  v0:= 2I;
  #L4c736a.  v1:= 0I;
  #L4c736c.  call `prepareLog`(v2, v0, v1, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c7372.  return @kind void;
}
procedure `void` `v`(`timber.log.Timber$Tree` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Ltimber/log/Timber$Tree;.v:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c7384.  v0:= 0I;
  #L4c7386.  v0:= new `java.lang.Object`[v0];
  #L4c738a.  v1:= 2I;
  #L4c738c.  v2:= 0I;
  #L4c738e.  call `prepareLog`(v3, v1, v4, v2, v0) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c7394.  return @kind void;
}
procedure `void` `v`(`timber.log.Timber$Tree` v1 @kind this, `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.v:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c73a8.  v0:= 2I;
  #L4c73aa.  call `prepareLog`(v1, v0, v2, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c73b0.  return @kind void;
}
procedure `void` `w`(`timber.log.Timber$Tree` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.w:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c73c4.  v0:= 5I;
  #L4c73c6.  v1:= 0I;
  #L4c73c8.  call `prepareLog`(v2, v0, v1, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c73ce.  return @kind void;
}
procedure `void` `w`(`timber.log.Timber$Tree` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Ltimber/log/Timber$Tree;.w:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c73e0.  v0:= 0I;
  #L4c73e2.  v0:= new `java.lang.Object`[v0];
  #L4c73e6.  v1:= 5I;
  #L4c73e8.  v2:= 0I;
  #L4c73ea.  call `prepareLog`(v3, v1, v4, v2, v0) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c73f0.  return @kind void;
}
procedure `void` `w`(`timber.log.Timber$Tree` v1 @kind this, `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.w:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7404.  v0:= 5I;
  #L4c7406.  call `prepareLog`(v1, v0, v2, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c740c.  return @kind void;
}
procedure `void` `wtf`(`timber.log.Timber$Tree` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.wtf:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c7420.  v0:= 7I;
  #L4c7422.  v1:= 0I;
  #L4c7424.  call `prepareLog`(v2, v0, v1, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c742a.  return @kind void;
}
procedure `void` `wtf`(`timber.log.Timber$Tree` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Ltimber/log/Timber$Tree;.wtf:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c743c.  v0:= 0I;
  #L4c743e.  v0:= new `java.lang.Object`[v0];
  #L4c7442.  v1:= 7I;
  #L4c7444.  v2:= 0I;
  #L4c7446.  call `prepareLog`(v3, v1, v4, v2, v0) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c744c.  return @kind void;
}
procedure `void` `wtf`(`timber.log.Timber$Tree` v1 @kind this, `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ltimber/log/Timber$Tree;.wtf:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7460.  v0:= 7I;
  #L4c7462.  call `prepareLog`(v1, v0, v2, v3, v4) @signature `Ltimber/log/Timber$Tree;.prepareLog:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4c7468.  return @kind void;
}
