record `timber.log.Timber$1` @kind class @AccessFlag FINAL extends `timber.log.Timber$Tree` @kind class {
}
procedure `void` `<init>`(`timber.log.Timber$1` v0 @kind this) @signature `Ltimber/log/Timber$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c6aec.  call `<init>`(v0) @signature `Ltimber/log/Timber$Tree;.<init>:()V` @kind direct;
  #L4c6af2.  return @kind void;
}
procedure `void` `d`(`timber.log.Timber$1` v4 @kind this, `java.lang.String` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Ltimber/log/Timber$1;.d:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6b04.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6b08.  v1:= length @variable v0;
  #L4c6b0a.  v2:= 0I;
  #L4c6b0c.  if v2 >= v1 then goto L4c6b20;
  #L4c6b10.  v3:= v0[v2] @kind object;
  #L4c6b14.  call `d`(v3, v5, v6) @signature `Ltimber/log/Timber$Tree;.d:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6b1a.  v2:= v2 + 1;
  #L4c6b1e.  goto L4c6b0c;
  #L4c6b20.  return @kind void;
}
procedure `void` `d`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Ltimber/log/Timber$1;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6b34.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6b38.  v1:= length @variable v0;
  #L4c6b3a.  v2:= 0I;
  #L4c6b3c.  if v2 >= v1 then goto L4c6b50;
  #L4c6b40.  v3:= v0[v2] @kind object;
  #L4c6b44.  call `d`(v3, v5) @signature `Ltimber/log/Timber$Tree;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c6b4a.  v2:= v2 + 1;
  #L4c6b4e.  goto L4c6b3c;
  #L4c6b50.  return @kind void;
}
procedure `void` `d`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object, `java.lang.String` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `Ltimber/log/Timber$1;.d:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6b64.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6b68.  v1:= length @variable v0;
  #L4c6b6a.  v2:= 0I;
  #L4c6b6c.  if v2 >= v1 then goto L4c6b80;
  #L4c6b70.  v3:= v0[v2] @kind object;
  #L4c6b74.  call `d`(v3, v5, v6, v7) @signature `Ltimber/log/Timber$Tree;.d:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6b7a.  v2:= v2 + 1;
  #L4c6b7e.  goto L4c6b6c;
  #L4c6b80.  return @kind void;
}
procedure `void` `e`(`timber.log.Timber$1` v4 @kind this, `java.lang.String` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Ltimber/log/Timber$1;.e:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6b94.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6b98.  v1:= length @variable v0;
  #L4c6b9a.  v2:= 0I;
  #L4c6b9c.  if v2 >= v1 then goto L4c6bb0;
  #L4c6ba0.  v3:= v0[v2] @kind object;
  #L4c6ba4.  call `e`(v3, v5, v6) @signature `Ltimber/log/Timber$Tree;.e:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6baa.  v2:= v2 + 1;
  #L4c6bae.  goto L4c6b9c;
  #L4c6bb0.  return @kind void;
}
procedure `void` `e`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Ltimber/log/Timber$1;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6bc4.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6bc8.  v1:= length @variable v0;
  #L4c6bca.  v2:= 0I;
  #L4c6bcc.  if v2 >= v1 then goto L4c6be0;
  #L4c6bd0.  v3:= v0[v2] @kind object;
  #L4c6bd4.  call `e`(v3, v5) @signature `Ltimber/log/Timber$Tree;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c6bda.  v2:= v2 + 1;
  #L4c6bde.  goto L4c6bcc;
  #L4c6be0.  return @kind void;
}
procedure `void` `e`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object, `java.lang.String` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `Ltimber/log/Timber$1;.e:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6bf4.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6bf8.  v1:= length @variable v0;
  #L4c6bfa.  v2:= 0I;
  #L4c6bfc.  if v2 >= v1 then goto L4c6c10;
  #L4c6c00.  v3:= v0[v2] @kind object;
  #L4c6c04.  call `e`(v3, v5, v6, v7) @signature `Ltimber/log/Timber$Tree;.e:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6c0a.  v2:= v2 + 1;
  #L4c6c0e.  goto L4c6bfc;
  #L4c6c10.  return @kind void;
}
procedure `void` `i`(`timber.log.Timber$1` v4 @kind this, `java.lang.String` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Ltimber/log/Timber$1;.i:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6c24.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6c28.  v1:= length @variable v0;
  #L4c6c2a.  v2:= 0I;
  #L4c6c2c.  if v2 >= v1 then goto L4c6c40;
  #L4c6c30.  v3:= v0[v2] @kind object;
  #L4c6c34.  call `i`(v3, v5, v6) @signature `Ltimber/log/Timber$Tree;.i:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6c3a.  v2:= v2 + 1;
  #L4c6c3e.  goto L4c6c2c;
  #L4c6c40.  return @kind void;
}
procedure `void` `i`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Ltimber/log/Timber$1;.i:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6c54.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6c58.  v1:= length @variable v0;
  #L4c6c5a.  v2:= 0I;
  #L4c6c5c.  if v2 >= v1 then goto L4c6c70;
  #L4c6c60.  v3:= v0[v2] @kind object;
  #L4c6c64.  call `i`(v3, v5) @signature `Ltimber/log/Timber$Tree;.i:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c6c6a.  v2:= v2 + 1;
  #L4c6c6e.  goto L4c6c5c;
  #L4c6c70.  return @kind void;
}
procedure `void` `i`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object, `java.lang.String` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `Ltimber/log/Timber$1;.i:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6c84.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6c88.  v1:= length @variable v0;
  #L4c6c8a.  v2:= 0I;
  #L4c6c8c.  if v2 >= v1 then goto L4c6ca0;
  #L4c6c90.  v3:= v0[v2] @kind object;
  #L4c6c94.  call `i`(v3, v5, v6, v7) @signature `Ltimber/log/Timber$Tree;.i:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6c9a.  v2:= v2 + 1;
  #L4c6c9e.  goto L4c6c8c;
  #L4c6ca0.  return @kind void;
}
procedure `void` `log`(`timber.log.Timber$1` v0 @kind this, `int` v1 , `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Ltimber/log/Timber$1;.log:(ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PROTECTED {
    temp;

  #L4c6ce4.  v1:= new `java.lang.AssertionError`;
  #L4c6ce8.  v2:= "Missing override for log method." @kind object;
  #L4c6cec.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c6cf2.  throw v1;
}
procedure `void` `log`(`timber.log.Timber$1` v4 @kind this, `int` v5 , `java.lang.String` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `Ltimber/log/Timber$1;.log:(ILjava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6cb4.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6cb8.  v1:= length @variable v0;
  #L4c6cba.  v2:= 0I;
  #L4c6cbc.  if v2 >= v1 then goto L4c6cd0;
  #L4c6cc0.  v3:= v0[v2] @kind object;
  #L4c6cc4.  call `log`(v3, v5, v6, v7) @signature `Ltimber/log/Timber$Tree;.log:(ILjava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6cca.  v2:= v2 + 1;
  #L4c6cce.  goto L4c6cbc;
  #L4c6cd0.  return @kind void;
}
procedure `void` `log`(`timber.log.Timber$1` v4 @kind this, `int` v5 , `java.lang.Throwable` v6 @kind object) @signature `Ltimber/log/Timber$1;.log:(ILjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6d04.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6d08.  v1:= length @variable v0;
  #L4c6d0a.  v2:= 0I;
  #L4c6d0c.  if v2 >= v1 then goto L4c6d20;
  #L4c6d10.  v3:= v0[v2] @kind object;
  #L4c6d14.  call `log`(v3, v5, v6) @signature `Ltimber/log/Timber$Tree;.log:(ILjava/lang/Throwable;)V` @kind virtual;
  #L4c6d1a.  v2:= v2 + 1;
  #L4c6d1e.  goto L4c6d0c;
  #L4c6d20.  return @kind void;
}
procedure `void` `log`(`timber.log.Timber$1` v4 @kind this, `int` v5 , `java.lang.Throwable` v6 @kind object, `java.lang.String` v7 @kind object, `java.lang.Object`[] v8 @kind object) @signature `Ltimber/log/Timber$1;.log:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6d34.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6d38.  v1:= length @variable v0;
  #L4c6d3a.  v2:= 0I;
  #L4c6d3c.  if v2 >= v1 then goto L4c6d50;
  #L4c6d40.  v3:= v0[v2] @kind object;
  #L4c6d44.  call `log`(v3, v5, v6, v7, v8) @signature `Ltimber/log/Timber$Tree;.log:(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6d4a.  v2:= v2 + 1;
  #L4c6d4e.  goto L4c6d3c;
  #L4c6d50.  return @kind void;
}
procedure `void` `v`(`timber.log.Timber$1` v4 @kind this, `java.lang.String` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Ltimber/log/Timber$1;.v:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6d64.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6d68.  v1:= length @variable v0;
  #L4c6d6a.  v2:= 0I;
  #L4c6d6c.  if v2 >= v1 then goto L4c6d80;
  #L4c6d70.  v3:= v0[v2] @kind object;
  #L4c6d74.  call `v`(v3, v5, v6) @signature `Ltimber/log/Timber$Tree;.v:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6d7a.  v2:= v2 + 1;
  #L4c6d7e.  goto L4c6d6c;
  #L4c6d80.  return @kind void;
}
procedure `void` `v`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Ltimber/log/Timber$1;.v:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6d94.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6d98.  v1:= length @variable v0;
  #L4c6d9a.  v2:= 0I;
  #L4c6d9c.  if v2 >= v1 then goto L4c6db0;
  #L4c6da0.  v3:= v0[v2] @kind object;
  #L4c6da4.  call `v`(v3, v5) @signature `Ltimber/log/Timber$Tree;.v:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c6daa.  v2:= v2 + 1;
  #L4c6dae.  goto L4c6d9c;
  #L4c6db0.  return @kind void;
}
procedure `void` `v`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object, `java.lang.String` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `Ltimber/log/Timber$1;.v:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6dc4.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6dc8.  v1:= length @variable v0;
  #L4c6dca.  v2:= 0I;
  #L4c6dcc.  if v2 >= v1 then goto L4c6de0;
  #L4c6dd0.  v3:= v0[v2] @kind object;
  #L4c6dd4.  call `v`(v3, v5, v6, v7) @signature `Ltimber/log/Timber$Tree;.v:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6dda.  v2:= v2 + 1;
  #L4c6dde.  goto L4c6dcc;
  #L4c6de0.  return @kind void;
}
procedure `void` `w`(`timber.log.Timber$1` v4 @kind this, `java.lang.String` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Ltimber/log/Timber$1;.w:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6df4.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6df8.  v1:= length @variable v0;
  #L4c6dfa.  v2:= 0I;
  #L4c6dfc.  if v2 >= v1 then goto L4c6e10;
  #L4c6e00.  v3:= v0[v2] @kind object;
  #L4c6e04.  call `w`(v3, v5, v6) @signature `Ltimber/log/Timber$Tree;.w:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6e0a.  v2:= v2 + 1;
  #L4c6e0e.  goto L4c6dfc;
  #L4c6e10.  return @kind void;
}
procedure `void` `w`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Ltimber/log/Timber$1;.w:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6e24.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6e28.  v1:= length @variable v0;
  #L4c6e2a.  v2:= 0I;
  #L4c6e2c.  if v2 >= v1 then goto L4c6e40;
  #L4c6e30.  v3:= v0[v2] @kind object;
  #L4c6e34.  call `w`(v3, v5) @signature `Ltimber/log/Timber$Tree;.w:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c6e3a.  v2:= v2 + 1;
  #L4c6e3e.  goto L4c6e2c;
  #L4c6e40.  return @kind void;
}
procedure `void` `w`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object, `java.lang.String` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `Ltimber/log/Timber$1;.w:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6e54.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6e58.  v1:= length @variable v0;
  #L4c6e5a.  v2:= 0I;
  #L4c6e5c.  if v2 >= v1 then goto L4c6e70;
  #L4c6e60.  v3:= v0[v2] @kind object;
  #L4c6e64.  call `w`(v3, v5, v6, v7) @signature `Ltimber/log/Timber$Tree;.w:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6e6a.  v2:= v2 + 1;
  #L4c6e6e.  goto L4c6e5c;
  #L4c6e70.  return @kind void;
}
procedure `void` `wtf`(`timber.log.Timber$1` v4 @kind this, `java.lang.String` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Ltimber/log/Timber$1;.wtf:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6e84.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6e88.  v1:= length @variable v0;
  #L4c6e8a.  v2:= 0I;
  #L4c6e8c.  if v2 >= v1 then goto L4c6ea0;
  #L4c6e90.  v3:= v0[v2] @kind object;
  #L4c6e94.  call `wtf`(v3, v5, v6) @signature `Ltimber/log/Timber$Tree;.wtf:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6e9a.  v2:= v2 + 1;
  #L4c6e9e.  goto L4c6e8c;
  #L4c6ea0.  return @kind void;
}
procedure `void` `wtf`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Ltimber/log/Timber$1;.wtf:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6eb4.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6eb8.  v1:= length @variable v0;
  #L4c6eba.  v2:= 0I;
  #L4c6ebc.  if v2 >= v1 then goto L4c6ed0;
  #L4c6ec0.  v3:= v0[v2] @kind object;
  #L4c6ec4.  call `wtf`(v3, v5) @signature `Ltimber/log/Timber$Tree;.wtf:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c6eca.  v2:= v2 + 1;
  #L4c6ece.  goto L4c6ebc;
  #L4c6ed0.  return @kind void;
}
procedure `void` `wtf`(`timber.log.Timber$1` v4 @kind this, `java.lang.Throwable` v5 @kind object, `java.lang.String` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `Ltimber/log/Timber$1;.wtf:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c6ee4.  v0:= `@@timber.log.Timber.forestAsArray` @type ^`timber.log.Timber$Tree`[] @kind object;
  #L4c6ee8.  v1:= length @variable v0;
  #L4c6eea.  v2:= 0I;
  #L4c6eec.  if v2 >= v1 then goto L4c6f00;
  #L4c6ef0.  v3:= v0[v2] @kind object;
  #L4c6ef4.  call `wtf`(v3, v5, v6, v7) @signature `Ltimber/log/Timber$Tree;.wtf:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L4c6efa.  v2:= v2 + 1;
  #L4c6efe.  goto L4c6eec;
  #L4c6f00.  return @kind void;
}
