record `androidx.room.RoomDatabase$Builder` @kind class @AccessFlag PUBLIC {
  `boolean` `androidx.room.RoomDatabase$Builder.mAllowDestructiveMigrationOnDowngrade` @AccessFlag PRIVATE;
  `boolean` `androidx.room.RoomDatabase$Builder.mAllowMainThreadQueries` @AccessFlag PRIVATE;
  `java.util.ArrayList` `androidx.room.RoomDatabase$Builder.mCallbacks` @AccessFlag PRIVATE;
  `android.content.Context` `androidx.room.RoomDatabase$Builder.mContext` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `androidx.room.RoomDatabase$Builder.mCopyFromAssetPath` @AccessFlag PRIVATE;
  `java.io.File` `androidx.room.RoomDatabase$Builder.mCopyFromFile` @AccessFlag PRIVATE;
  `java.lang.Class` `androidx.room.RoomDatabase$Builder.mDatabaseClass` @AccessFlag PRIVATE_FINAL;
  `androidx.sqlite.db.SupportSQLiteOpenHelper$Factory` `androidx.room.RoomDatabase$Builder.mFactory` @AccessFlag PRIVATE;
  `androidx.room.RoomDatabase$JournalMode` `androidx.room.RoomDatabase$Builder.mJournalMode` @AccessFlag PRIVATE;
  `androidx.room.RoomDatabase$MigrationContainer` `androidx.room.RoomDatabase$Builder.mMigrationContainer` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `androidx.room.RoomDatabase$Builder.mMigrationStartAndEndVersions` @AccessFlag PRIVATE;
  `java.util.Set` `androidx.room.RoomDatabase$Builder.mMigrationsNotRequiredFrom` @AccessFlag PRIVATE;
  `boolean` `androidx.room.RoomDatabase$Builder.mMultiInstanceInvalidation` @AccessFlag PRIVATE;
  `java.lang.String` `androidx.room.RoomDatabase$Builder.mName` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `androidx.room.RoomDatabase$Builder.mQueryExecutor` @AccessFlag PRIVATE;
  `boolean` `androidx.room.RoomDatabase$Builder.mRequireMigration` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `androidx.room.RoomDatabase$Builder.mTransactionExecutor` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`androidx.room.RoomDatabase$Builder` v0 @kind this, `android.content.Context` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Landroidx/room/RoomDatabase$Builder;.<init>:(Landroid/content/Context;Ljava/lang/Class;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `addCallback`(`androidx.room.RoomDatabase$Builder` v1 @kind this, `androidx.room.RoomDatabase$Callback` v2 @kind object) @signature `Landroidx/room/RoomDatabase$Builder;.addCallback:(Landroidx/room/RoomDatabase$Callback;)Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `addMigrations`(`androidx.room.RoomDatabase$Builder` v5 @kind this, `androidx.room.migration.Migration`[] v6 @kind object) @signature `Landroidx/room/RoomDatabase$Builder;.addMigrations:([Landroidx/room/migration/Migration;)Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `allowMainThreadQueries`(`androidx.room.RoomDatabase$Builder` v1 @kind this) @signature `Landroidx/room/RoomDatabase$Builder;.allowMainThreadQueries:()Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase` `build`(`androidx.room.RoomDatabase$Builder` v21 @kind this) @signature `Landroidx/room/RoomDatabase$Builder;.build:()Landroidx/room/RoomDatabase;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `createFromAsset`(`androidx.room.RoomDatabase$Builder` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Landroidx/room/RoomDatabase$Builder;.createFromAsset:(Ljava/lang/String;)Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `createFromFile`(`androidx.room.RoomDatabase$Builder` v0 @kind this, `java.io.File` v1 @kind object) @signature `Landroidx/room/RoomDatabase$Builder;.createFromFile:(Ljava/io/File;)Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `enableMultiInstanceInvalidation`(`androidx.room.RoomDatabase$Builder` v1 @kind this) @signature `Landroidx/room/RoomDatabase$Builder;.enableMultiInstanceInvalidation:()Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `fallbackToDestructiveMigration`(`androidx.room.RoomDatabase$Builder` v1 @kind this) @signature `Landroidx/room/RoomDatabase$Builder;.fallbackToDestructiveMigration:()Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `fallbackToDestructiveMigrationFrom`(`androidx.room.RoomDatabase$Builder` v4 @kind this, `int`[] v5 @kind object) @signature `Landroidx/room/RoomDatabase$Builder;.fallbackToDestructiveMigrationFrom:([I)Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `fallbackToDestructiveMigrationOnDowngrade`(`androidx.room.RoomDatabase$Builder` v1 @kind this) @signature `Landroidx/room/RoomDatabase$Builder;.fallbackToDestructiveMigrationOnDowngrade:()Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `openHelperFactory`(`androidx.room.RoomDatabase$Builder` v0 @kind this, `androidx.sqlite.db.SupportSQLiteOpenHelper$Factory` v1 @kind object) @signature `Landroidx/room/RoomDatabase$Builder;.openHelperFactory:(Landroidx/sqlite/db/SupportSQLiteOpenHelper$Factory;)Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `setJournalMode`(`androidx.room.RoomDatabase$Builder` v0 @kind this, `androidx.room.RoomDatabase$JournalMode` v1 @kind object) @signature `Landroidx/room/RoomDatabase$Builder;.setJournalMode:(Landroidx/room/RoomDatabase$JournalMode;)Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `setQueryExecutor`(`androidx.room.RoomDatabase$Builder` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object) @signature `Landroidx/room/RoomDatabase$Builder;.setQueryExecutor:(Ljava/util/concurrent/Executor;)Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.RoomDatabase$Builder` `setTransactionExecutor`(`androidx.room.RoomDatabase$Builder` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object) @signature `Landroidx/room/RoomDatabase$Builder;.setTransactionExecutor:(Ljava/util/concurrent/Executor;)Landroidx/room/RoomDatabase$Builder;` @AccessFlag PUBLIC {

  # return;
}
