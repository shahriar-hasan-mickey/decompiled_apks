record `androidx.room.RoomDatabase` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `boolean` `androidx.room.RoomDatabase.mAllowMainThreadQueries` @AccessFlag PRIVATE;
  `java.util.Map` `androidx.room.RoomDatabase.mBackingFieldMap` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `androidx.room.RoomDatabase.mCallbacks` @AccessFlag PROTECTED;
  `java.util.concurrent.locks.ReentrantReadWriteLock` `androidx.room.RoomDatabase.mCloseLock` @AccessFlag PRIVATE_FINAL;
  `androidx.sqlite.db.SupportSQLiteDatabase` `androidx.room.RoomDatabase.mDatabase` @AccessFlag PROTECTED_VOLATILE;
  `androidx.room.InvalidationTracker` `androidx.room.RoomDatabase.mInvalidationTracker` @AccessFlag PRIVATE_FINAL;
  `androidx.sqlite.db.SupportSQLiteOpenHelper` `androidx.room.RoomDatabase.mOpenHelper` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `androidx.room.RoomDatabase.mQueryExecutor` @AccessFlag PRIVATE;
  `java.lang.ThreadLocal` `androidx.room.RoomDatabase.mSuspendingTransactionId` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `androidx.room.RoomDatabase.mTransactionExecutor` @AccessFlag PRIVATE;
  `boolean` `androidx.room.RoomDatabase.mWriteAheadLoggingEnabled` @AccessFlag ;
}
global `java.lang.String` `@@androidx.room.RoomDatabase.DB_IMPL_SUFFIX` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@androidx.room.RoomDatabase.MAX_BIND_PARAMETER_CNT` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `isMainThread`() @signature `Landroidx/room/RoomDatabase;.isMainThread:()Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `assertNotMainThread`(`androidx.room.RoomDatabase` v2 @kind this) @signature `Landroidx/room/RoomDatabase;.assertNotMainThread:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `assertNotSuspendingTransaction`(`androidx.room.RoomDatabase` v2 @kind this) @signature `Landroidx/room/RoomDatabase;.assertNotSuspendingTransaction:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `beginTransaction`(`androidx.room.RoomDatabase` v2 @kind this) @signature `Landroidx/room/RoomDatabase;.beginTransaction:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `clearAllTables`() @signature `Landroidx/room/RoomDatabase;.clearAllTables:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `close`(`androidx.room.RoomDatabase` v2 @kind this) @signature `Landroidx/room/RoomDatabase;.close:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.sqlite.db.SupportSQLiteStatement` `compileStatement`(`androidx.room.RoomDatabase` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Landroidx/room/RoomDatabase;.compileStatement:(Ljava/lang/String;)Landroidx/sqlite/db/SupportSQLiteStatement;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.room.InvalidationTracker` `createInvalidationTracker`() @signature `Landroidx/room/RoomDatabase;.createInvalidationTracker:()Landroidx/room/InvalidationTracker;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `androidx.sqlite.db.SupportSQLiteOpenHelper` `createOpenHelper`(`androidx.room.DatabaseConfiguration` v0 @kind object) @signature `Landroidx/room/RoomDatabase;.createOpenHelper:(Landroidx/room/DatabaseConfiguration;)Landroidx/sqlite/db/SupportSQLiteOpenHelper;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `endTransaction`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.endTransaction:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Map` `getBackingFieldMap`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.getBackingFieldMap:()Ljava/util/Map;` @AccessFlag  {

  # return;
}
procedure `java.util.concurrent.locks.Lock` `getCloseLock`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.getCloseLock:()Ljava/util/concurrent/locks/Lock;` @AccessFlag  {

  # return;
}
procedure `androidx.room.InvalidationTracker` `getInvalidationTracker`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.getInvalidationTracker:()Landroidx/room/InvalidationTracker;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.sqlite.db.SupportSQLiteOpenHelper` `getOpenHelper`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.getOpenHelper:()Landroidx/sqlite/db/SupportSQLiteOpenHelper;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.Executor` `getQueryExecutor`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.getQueryExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.ThreadLocal` `getSuspendingTransactionId`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.getSuspendingTransactionId:()Ljava/lang/ThreadLocal;` @AccessFlag  {

  # return;
}
procedure `java.util.concurrent.Executor` `getTransactionExecutor`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.getTransactionExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `inTransaction`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.inTransaction:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`androidx.room.RoomDatabase` v3 @kind this, `androidx.room.DatabaseConfiguration` v4 @kind object) @signature `Landroidx/room/RoomDatabase;.init:(Landroidx/room/DatabaseConfiguration;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `internalInitInvalidationTracker`(`androidx.room.RoomDatabase` v1 @kind this, `androidx.sqlite.db.SupportSQLiteDatabase` v2 @kind object) @signature `Landroidx/room/RoomDatabase;.internalInitInvalidationTracker:(Landroidx/sqlite/db/SupportSQLiteDatabase;)V` @AccessFlag PROTECTED {

  # return;
}
procedure `boolean` `isOpen`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.isOpen:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `android.database.Cursor` `query`(`androidx.room.RoomDatabase` v1 @kind this, `androidx.sqlite.db.SupportSQLiteQuery` v2 @kind object) @signature `Landroidx/room/RoomDatabase;.query:(Landroidx/sqlite/db/SupportSQLiteQuery;)Landroid/database/Cursor;` @AccessFlag PUBLIC {

  # return;
}
procedure `android.database.Cursor` `query`(`androidx.room.RoomDatabase` v2 @kind this, `androidx.sqlite.db.SupportSQLiteQuery` v3 @kind object, `android.os.CancellationSignal` v4 @kind object) @signature `Landroidx/room/RoomDatabase;.query:(Landroidx/sqlite/db/SupportSQLiteQuery;Landroid/os/CancellationSignal;)Landroid/database/Cursor;` @AccessFlag PUBLIC {

  # return;
}
procedure `android.database.Cursor` `query`(`androidx.room.RoomDatabase` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Landroidx/room/RoomDatabase;.query:(Ljava/lang/String;[Ljava/lang/Object;)Landroid/database/Cursor;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `runInTransaction`(`androidx.room.RoomDatabase` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Landroidx/room/RoomDatabase;.runInTransaction:(Ljava/util/concurrent/Callable;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `runInTransaction`(`androidx.room.RoomDatabase` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Landroidx/room/RoomDatabase;.runInTransaction:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setTransactionSuccessful`(`androidx.room.RoomDatabase` v1 @kind this) @signature `Landroidx/room/RoomDatabase;.setTransactionSuccessful:()V` @AccessFlag PUBLIC {

  # return;
}
