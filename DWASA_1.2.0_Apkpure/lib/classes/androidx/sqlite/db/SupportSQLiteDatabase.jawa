record `androidx.sqlite.db.SupportSQLiteDatabase` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `java.io.Closeable` @kind interface {
}
procedure `void` `beginTransaction`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.beginTransaction:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `beginTransactionNonExclusive`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.beginTransactionNonExclusive:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `beginTransactionWithListener`(`android.database.sqlite.SQLiteTransactionListener` v0 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.beginTransactionWithListener:(Landroid/database/sqlite/SQLiteTransactionListener;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `beginTransactionWithListenerNonExclusive`(`android.database.sqlite.SQLiteTransactionListener` v0 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.beginTransactionWithListenerNonExclusive:(Landroid/database/sqlite/SQLiteTransactionListener;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `androidx.sqlite.db.SupportSQLiteStatement` `compileStatement`(`java.lang.String` v0 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.compileStatement:(Ljava/lang/String;)Landroidx/sqlite/db/SupportSQLiteStatement;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `delete`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.delete:(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `disableWriteAheadLogging`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.disableWriteAheadLogging:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `enableWriteAheadLogging`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.enableWriteAheadLogging:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `endTransaction`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.endTransaction:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `execSQL`(`java.lang.String` v0 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `execSQL`(`java.lang.String` v0 @kind object, `java.lang.Object`[] v1 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.execSQL:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.List` `getAttachedDbs`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.getAttachedDbs:()Ljava/util/List;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `getMaximumSize`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.getMaximumSize:()J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `getPageSize`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.getPageSize:()J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getPath`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.getPath:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getVersion`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.getVersion:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `inTransaction`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.inTransaction:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `insert`(`java.lang.String` v0 @kind object, `int` v1 , `android.content.ContentValues` v2 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.insert:(Ljava/lang/String;ILandroid/content/ContentValues;)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isDatabaseIntegrityOk`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.isDatabaseIntegrityOk:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isDbLockedByCurrentThread`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.isDbLockedByCurrentThread:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isOpen`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.isOpen:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isReadOnly`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.isReadOnly:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isWriteAheadLoggingEnabled`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.isWriteAheadLoggingEnabled:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `needUpgrade`(`int` v0 ) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.needUpgrade:(I)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `android.database.Cursor` `query`(`androidx.sqlite.db.SupportSQLiteQuery` v0 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.query:(Landroidx/sqlite/db/SupportSQLiteQuery;)Landroid/database/Cursor;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `android.database.Cursor` `query`(`androidx.sqlite.db.SupportSQLiteQuery` v0 @kind object, `android.os.CancellationSignal` v1 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.query:(Landroidx/sqlite/db/SupportSQLiteQuery;Landroid/os/CancellationSignal;)Landroid/database/Cursor;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `android.database.Cursor` `query`(`java.lang.String` v0 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.query:(Ljava/lang/String;)Landroid/database/Cursor;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `android.database.Cursor` `query`(`java.lang.String` v0 @kind object, `java.lang.Object`[] v1 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.query:(Ljava/lang/String;[Ljava/lang/Object;)Landroid/database/Cursor;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setForeignKeyConstraintsEnabled`(`boolean` v0 ) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.setForeignKeyConstraintsEnabled:(Z)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setLocale`(`java.util.Locale` v0 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.setLocale:(Ljava/util/Locale;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setMaxSqlCacheSize`(`int` v0 ) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.setMaxSqlCacheSize:(I)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `setMaximumSize`(`long` v0 ) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.setMaximumSize:(J)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setPageSize`(`long` v0 ) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.setPageSize:(J)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setTransactionSuccessful`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.setTransactionSuccessful:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setVersion`(`int` v0 ) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.setVersion:(I)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `update`(`java.lang.String` v0 @kind object, `int` v1 , `android.content.ContentValues` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.update:(Ljava/lang/String;ILandroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/Object;)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `yieldIfContendedSafely`() @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.yieldIfContendedSafely:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `yieldIfContendedSafely`(`long` v0 ) @signature `Landroidx/sqlite/db/SupportSQLiteDatabase;.yieldIfContendedSafely:(J)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
