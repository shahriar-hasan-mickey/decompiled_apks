record `y6.a` @kind class @AccessFlag PUBLIC extends `y6.d` @kind class {
  `boolean` `y6.a.d` @AccessFlag PRIVATE_FINAL;
  `a7.d` `y6.a.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`y6.a` v2 @kind this, `x6.l` v3 @kind object, `a7.d` v4 @kind object, `boolean` v5 ) @signature `Ly6/a;.<init>:(Lx6/l;La7/d;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f6e84.  v0:= `@@y6.d$a.q` @type ^`y6.d$a` @kind object;
  #L4f6e88.  v1:= `@@y6.e.d` @type ^`y6.e` @kind object;
  #L4f6e8c.  call `<init>`(v2, v0, v1, v3) @signature `Ly6/d;.<init>:(Ly6/d$a;Ly6/e;Lx6/l;)V` @kind direct;
  #L4f6e92.  v2.`y6.a.e` @type ^`a7.d` := v4 @kind object;
  #L4f6e96.  v2.`y6.a.d` @type ^`boolean` := v5 @kind boolean;
  #L4f6e9a.  return @kind void;
}
procedure `y6.d` `d`(`y6.a` v4 @kind this, `f7.b` v5 @kind object) @signature `Ly6/a;.d:(Lf7/b;)Ly6/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f6eac.  v0:= v4.`y6.d.c` @type ^`x6.l` @kind object;
  #L4f6eb0.  call temp:= `isEmpty`(v0) @signature `Lx6/l;.isEmpty:()Z` @kind virtual;
  #L4f6eb6.  v0:= temp;
  #L4f6eb8.  if v0 != 0 then goto L4f6efa;
  #L4f6ebc.  v0:= v4.`y6.d.c` @type ^`x6.l` @kind object;
  #L4f6ec0.  call temp:= `h0`(v0) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L4f6ec6.  v0:= temp @kind object;
  #L4f6ec8.  call temp:= `equals`(v0, v5) @signature `Lf7/b;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f6ece.  v5:= temp;
  #L4f6ed0.  v0:= "operationForChild called for unrelated child." @kind object;
  #L4f6ed4.  call `g`(v5, v0) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L4f6eda.  v5:= new `y6.a`;
  #L4f6ede.  v0:= v4.`y6.d.c` @type ^`x6.l` @kind object;
  #L4f6ee2.  call temp:= `k0`(v0) @signature `Lx6/l;.k0:()Lx6/l;` @kind virtual;
  #L4f6ee8.  v0:= temp @kind object;
  #L4f6eea.  v1:= v4.`y6.a.e` @type ^`a7.d` @kind object;
  #L4f6eee.  v2:= v4.`y6.a.d` @type ^`boolean` @kind boolean;
  #L4f6ef2.  call `<init>`(v5, v0, v1, v2) @signature `Ly6/a;.<init>:(Lx6/l;La7/d;Z)V` @kind direct;
  #L4f6ef8.  return v5 @kind object;
  #L4f6efa.  v0:= v4.`y6.a.e` @type ^`a7.d` @kind object;
  #L4f6efe.  call temp:= `getValue`(v0) @signature `La7/d;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4f6f04.  v0:= temp @kind object;
  #L4f6f06.  if v0 == 0 then goto L4f6f2a;
  #L4f6f0a.  v5:= v4.`y6.a.e` @type ^`a7.d` @kind object;
  #L4f6f0e.  call temp:= `N`(v5) @signature `La7/d;.N:()Lu6/c;` @kind virtual;
  #L4f6f14.  v5:= temp @kind object;
  #L4f6f16.  call temp:= `isEmpty`(v5) @signature `Lu6/c;.isEmpty:()Z` @kind virtual;
  #L4f6f1c.  v5:= temp;
  #L4f6f1e.  v0:= "affectedTree should not have overlapping affected paths." @kind object;
  #L4f6f22.  call `g`(v5, v0) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L4f6f28.  return v4 @kind object;
  #L4f6f2a.  v0:= v4.`y6.a.e` @type ^`a7.d` @kind object;
  #L4f6f2e.  v1:= new `x6.l`;
  #L4f6f32.  v2:= 1I;
  #L4f6f34.  v2:= new `f7.b`[v2];
  #L4f6f38.  v3:= 0I;
  #L4f6f3a.  v2[v3]:= v5 @kind object;
  #L4f6f3e.  call `<init>`(v1, v2) @signature `Lx6/l;.<init>:([Lf7/b;)V` @kind direct;
  #L4f6f44.  call temp:= `b0`(v0, v1) @signature `La7/d;.b0:(Lx6/l;)La7/d;` @kind virtual;
  #L4f6f4a.  v5:= temp @kind object;
  #L4f6f4c.  v0:= new `y6.a`;
  #L4f6f50.  call temp:= `g0`() @signature `Lx6/l;.g0:()Lx6/l;` @kind static;
  #L4f6f56.  v1:= temp @kind object;
  #L4f6f58.  v2:= v4.`y6.a.d` @type ^`boolean` @kind boolean;
  #L4f6f5c.  call `<init>`(v0, v1, v5, v2) @signature `Ly6/a;.<init>:(Lx6/l;La7/d;Z)V` @kind direct;
  #L4f6f62.  return v0 @kind object;
}
procedure `a7.d` `e`(`y6.a` v1 @kind this) @signature `Ly6/a;.e:()La7/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6e04.  v0:= v1.`y6.a.e` @type ^`a7.d` @kind object;
  #L4f6e08.  return v0 @kind object;
}
procedure `boolean` `f`(`y6.a` v1 @kind this) @signature `Ly6/a;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6e1c.  v0:= v1.`y6.a.d` @type ^`boolean` @kind boolean;
  #L4f6e20.  return v0;
}
procedure `java.lang.String` `toString`(`y6.a` v3 @kind this) @signature `Ly6/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f6e34.  v0:= 3I;
  #L4f6e36.  v0:= new `java.lang.Object`[v0];
  #L4f6e3a.  call temp:= `a`(v3) @signature `Ly6/d;.a:()Lx6/l;` @kind virtual;
  #L4f6e40.  v1:= temp @kind object;
  #L4f6e42.  v2:= 0I;
  #L4f6e44.  v0[v2]:= v1 @kind object;
  #L4f6e48.  v1:= v3.`y6.a.d` @type ^`boolean` @kind boolean;
  #L4f6e4c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4f6e52.  v1:= temp @kind object;
  #L4f6e54.  v2:= 1I;
  #L4f6e56.  v0[v2]:= v1 @kind object;
  #L4f6e5a.  v1:= v3.`y6.a.e` @type ^`a7.d` @kind object;
  #L4f6e5e.  v2:= 2I;
  #L4f6e60.  v0[v2]:= v1 @kind object;
  #L4f6e64.  v1:= "AckUserWrite { path=%s, revert=%s, affectedTree=%s }" @kind object;
  #L4f6e68.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4f6e6e.  v0:= temp @kind object;
  #L4f6e70.  return v0 @kind object;
}
