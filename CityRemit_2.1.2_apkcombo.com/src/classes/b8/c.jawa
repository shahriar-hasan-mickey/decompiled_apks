record `b8.c` @kind class @AccessFlag PUBLIC extends `b8.i` @kind interface {
  `java.lang.String` `b8.c.a` @AccessFlag PRIVATE_FINAL;
  `b8.d` `b8.c.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`b8.c` v0 @kind this, `java.util.Set` v1 @kind object, `b8.d` v2 @kind object) @signature `Lb8/c;.<init>:(Ljava/util/Set;Lb8/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1f2850.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f2856.  call temp:= `e`(v1) @signature `Lb8/c;.e:(Ljava/util/Set;)Ljava/lang/String;` @kind static;
  #L1f285c.  v1:= temp @kind object;
  #L1f285e.  v0.`b8.c.a` @type ^`java.lang.String` := v1 @kind object;
  #L1f2862.  v0.`b8.c.b` @type ^`b8.d` := v2 @kind object;
  #L1f2866.  return @kind void;
}
procedure `b8.i` `b`(`e6.e` v0 @kind object) @signature `Lb8/c;.b:(Le6/e;)Lb8/i;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1f26c8.  call temp:= `d`(v0) @signature `Lb8/c;.d:(Le6/e;)Lb8/i;` @kind static;
  #L1f26ce.  v0:= temp @kind object;
  #L1f26d0.  return v0 @kind object;
}
procedure `e6.d` `c`() @signature `Lb8/c;.c:()Le6/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1f2714.  v0:= constclass @type ^`b8.i` @kind object;
  #L1f2718.  call temp:= `c`(v0) @signature `Le6/d;.c:(Ljava/lang/Class;)Le6/d$b;` @kind static;
  #L1f271e.  v0:= temp @kind object;
  #L1f2720.  v1:= constclass @type ^`b8.f` @kind object;
  #L1f2724.  call temp:= `l`(v1) @signature `Le6/r;.l:(Ljava/lang/Class;)Le6/r;` @kind static;
  #L1f272a.  v1:= temp @kind object;
  #L1f272c.  call temp:= `b`(v0, v1) @signature `Le6/d$b;.b:(Le6/r;)Le6/d$b;` @kind virtual;
  #L1f2732.  v0:= temp @kind object;
  #L1f2734.  v1:= `@@b8.b.a` @type ^`b8.b` @kind object;
  #L1f2738.  call temp:= `f`(v0, v1) @signature `Le6/d$b;.f:(Le6/h;)Le6/d$b;` @kind virtual;
  #L1f273e.  v0:= temp @kind object;
  #L1f2740.  call temp:= `d`(v0) @signature `Le6/d$b;.d:()Le6/d;` @kind virtual;
  #L1f2746.  v0:= temp @kind object;
  #L1f2748.  return v0 @kind object;
}
procedure `b8.i` `d`(`e6.e` v2 @kind object) @signature `Lb8/c;.d:(Le6/e;)Lb8/i;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L1f26e4.  v0:= new `b8.c`;
  #L1f26e8.  v1:= constclass @type ^`b8.f` @kind object;
  #L1f26ec.  call temp:= `b`(v2, v1) @signature `Le6/e;.b:(Ljava/lang/Class;)Ljava/util/Set;` @kind interface;
  #L1f26f2.  v2:= temp @kind object;
  #L1f26f4.  call temp:= `a`() @signature `Lb8/d;.a:()Lb8/d;` @kind static;
  #L1f26fa.  v1:= temp @kind object;
  #L1f26fc.  call `<init>`(v0, v2, v1) @signature `Lb8/c;.<init>:(Ljava/util/Set;Lb8/d;)V` @kind direct;
  #L1f2702.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`java.util.Set` v3 @kind object) @signature `Lb8/c;.e:(Ljava/util/Set;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f27cc.  v0:= new `java.lang.StringBuilder`;
  #L1f27d0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f27d6.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f27dc.  v3:= temp @kind object;
  #L1f27de.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f27e4.  v1:= temp;
  #L1f27e6.  if v1 == 0 then goto L1f2834;
  #L1f27ea.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f27f0.  v1:= temp @kind object;
  #L1f27f2.  v1:= (`b8.f`) v1 @kind object;
  #L1f27f6.  call temp:= `b`(v1) @signature `Lb8/f;.b:()Ljava/lang/String;` @kind virtual;
  #L1f27fc.  v2:= temp @kind object;
  #L1f27fe.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f2804.  v2:= 47I;
  #L1f2808.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f280e.  call temp:= `c`(v1) @signature `Lb8/f;.c:()Ljava/lang/String;` @kind virtual;
  #L1f2814.  v1:= temp @kind object;
  #L1f2816.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f281c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f2822.  v1:= temp;
  #L1f2824.  if v1 == 0 then goto L1f27de;
  #L1f2828.  v1:= 32I;
  #L1f282c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f2832.  goto L1f27de;
  #L1f2834.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f283a.  v3:= temp @kind object;
  #L1f283c.  return v3 @kind object;
}
procedure `java.lang.String` `a`(`b8.c` v2 @kind this) @signature `Lb8/c;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f275c.  v0:= v2.`b8.c.b` @type ^`b8.d` @kind object;
  #L1f2760.  call temp:= `b`(v0) @signature `Lb8/d;.b:()Ljava/util/Set;` @kind virtual;
  #L1f2766.  v0:= temp @kind object;
  #L1f2768.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L1f276e.  v0:= temp;
  #L1f2770.  if v0 == 0 then goto L1f277a;
  #L1f2774.  v0:= v2.`b8.c.a` @type ^`java.lang.String` @kind object;
  #L1f2778.  return v0 @kind object;
  #L1f277a.  v0:= new `java.lang.StringBuilder`;
  #L1f277e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f2784.  v1:= v2.`b8.c.a` @type ^`java.lang.String` @kind object;
  #L1f2788.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f278e.  v1:= 32I;
  #L1f2792.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f2798.  v1:= v2.`b8.c.b` @type ^`b8.d` @kind object;
  #L1f279c.  call temp:= `b`(v1) @signature `Lb8/d;.b:()Ljava/util/Set;` @kind virtual;
  #L1f27a2.  v1:= temp @kind object;
  #L1f27a4.  call temp:= `e`(v1) @signature `Lb8/c;.e:(Ljava/util/Set;)Ljava/lang/String;` @kind static;
  #L1f27aa.  v1:= temp @kind object;
  #L1f27ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f27b2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f27b8.  v0:= temp @kind object;
  #L1f27ba.  return v0 @kind object;
}
