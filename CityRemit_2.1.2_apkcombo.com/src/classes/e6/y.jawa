record `e6.y` @kind class @AccessFlag  extends `s7.b` @kind interface {
  `java.util.Set` `e6.y.a` @AccessFlag PRIVATE_VOLATILE;
  `java.util.Set` `e6.y.b` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`e6.y` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Le6/y;.<init>:(Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L300464.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30046a.  v0:= 0I;
  #L30046c.  v1.`e6.y.b` @type ^`java.util.Set` := v0 @kind object;
  #L300470.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L300474.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L30047a.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L300480.  v0:= temp @kind object;
  #L300482.  v1.`e6.y.a` @type ^`java.util.Set` := v0 @kind object;
  #L300486.  v0:= v1.`e6.y.a` @type ^`java.util.Set` @kind object;
  #L30048a.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L300490.  return @kind void;
}
procedure `e6.y` `b`(`java.util.Collection` v1 @kind object) @signature `Le6/y;.b:(Ljava/util/Collection;)Le6/y;` @AccessFlag STATIC {
    temp;
    v0;

  #L3003c4.  v1:= (`java.util.Set`) v1 @kind object;
  #L3003c8.  v0:= new `e6.y`;
  #L3003cc.  call `<init>`(v0, v1) @signature `Le6/y;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3003d2.  return v0 @kind object;
}
procedure `void` `d`(`e6.y` v3 @kind this) @signature `Le6/y;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3004f0.  @monitorenter v3
  #L3004f2.  v0:= v3.`e6.y.a` @type ^`java.util.Set` @kind object;
  #L3004f6.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3004fc.  v0:= temp @kind object;
  #L3004fe.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L300504.  v1:= temp;
  #L300506.  if v1 == 0 then goto L30052a;
  #L30050a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L300510.  v1:= temp @kind object;
  #L300512.  v1:= (`s7.b`) v1 @kind object;
  #L300516.  v2:= v3.`e6.y.b` @type ^`java.util.Set` @kind object;
  #L30051a.  call temp:= `get`(v1) @signature `Ls7/b;.get:()Ljava/lang/Object;` @kind interface;
  #L300520.  v1:= temp @kind object;
  #L300522.  call temp:= `add`(v2, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L300528.  goto L3004fe;
  #L30052a.  v0:= 0I;
  #L30052c.  v3.`e6.y.a` @type ^`java.util.Set` := v0 @kind object;
  #L300530.  @monitorexit v3
  #L300532.  return @kind void;
  #L300534.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L300536.  @monitorexit v3
  #L300538.  throw v0;
  catch `java.lang.Throwable` @[L3004f2..L300530] goto L300534;
}
procedure `void` `a`(`e6.y` v1 @kind this, `s7.b` v2 @kind object) @signature `Le6/y;.a:(Ls7/b;)V` @AccessFlag  {
    temp;
    v0;

  #L3004a4.  @monitorenter v1
  #L3004a6.  v0:= v1.`e6.y.b` @type ^`java.util.Set` @kind object;
  #L3004aa.  if v0 != 0 then goto L3004ba;
  #L3004ae.  v0:= v1.`e6.y.a` @type ^`java.util.Set` @kind object;
  #L3004b2.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3004b8.  goto L3004c8;
  #L3004ba.  v0:= v1.`e6.y.b` @type ^`java.util.Set` @kind object;
  #L3004be.  call temp:= `get`(v2) @signature `Ls7/b;.get:()Ljava/lang/Object;` @kind interface;
  #L3004c4.  v2:= temp @kind object;
  #L3004c6.  goto L3004b2;
  #L3004c8.  @monitorexit v1
  #L3004ca.  return @kind void;
  #L3004cc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3004ce.  @monitorexit v1
  #L3004d0.  throw v2;
  catch `java.lang.Throwable` @[L3004a6..L3004c6] goto L3004cc;
}
procedure `java.util.Set` `c`(`e6.y` v1 @kind this) @signature `Le6/y;.c:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L300400.  v0:= v1.`e6.y.b` @type ^`java.util.Set` @kind object;
  #L300404.  if v0 != 0 then goto L300438;
  #L300408.  @monitorenter v1
  #L30040a.  v0:= v1.`e6.y.b` @type ^`java.util.Set` @kind object;
  #L30040e.  if v0 != 0 then goto L30042e;
  #L300412.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L300416.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L30041c.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L300422.  v0:= temp @kind object;
  #L300424.  v1.`e6.y.b` @type ^`java.util.Set` := v0 @kind object;
  #L300428.  call `d`(v1) @signature `Le6/y;.d:()V` @kind direct;
  #L30042e.  @monitorexit v1
  #L300430.  goto L300438;
  #L300432.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L300434.  @monitorexit v1
  #L300436.  throw v0;
  #L300438.  v0:= v1.`e6.y.b` @type ^`java.util.Set` @kind object;
  #L30043c.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L300442.  v0:= temp @kind object;
  #L300444.  return v0 @kind object;
  catch `java.lang.Throwable` @[L30040a..L300436] goto L300432;
}
procedure `java.lang.Object` `get`(`e6.y` v1 @kind this) @signature `Le6/y;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3003e4.  call temp:= `c`(v1) @signature `Le6/y;.c:()Ljava/util/Set;` @kind virtual;
  #L3003ea.  v0:= temp @kind object;
  #L3003ec.  return v0 @kind object;
}
