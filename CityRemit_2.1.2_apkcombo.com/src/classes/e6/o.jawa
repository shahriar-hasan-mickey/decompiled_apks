record `e6.o` @kind class @AccessFlag PUBLIC extends `e6.a` @kind class, `j7.a` @kind interface {
  `java.util.Map` `e6.o.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `e6.o.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `e6.o.c` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `e6.o.d` @AccessFlag PRIVATE_FINAL;
  `e6.v` `e6.o.e` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `e6.o.f` @AccessFlag PRIVATE_FINAL;
  `e6.j` `e6.o.g` @AccessFlag PRIVATE_FINAL;
}
global `s7.b` `@@e6.o.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le6/o;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2fef90.  v0:= `@@e6.n.a` @type ^`e6.n` @kind object;
  #L2fef94.  `@@e6.o.h` @type ^`s7.b` := v0 @kind object;
  #L2fef98.  return @kind void;
}
procedure `void` `<init>`(`e6.o` v5 @kind this, `java.util.concurrent.Executor` v6 @kind object, `java.lang.Iterable` v7 @kind object, `java.util.Collection` v8 @kind object, `e6.j` v9 @kind object) @signature `Le6/o;.<init>:(Ljava/util/concurrent/Executor;Ljava/lang/Iterable;Ljava/util/Collection;Le6/j;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fefac.  call `<init>`(v5) @signature `Le6/a;.<init>:()V` @kind direct;
  #L2fefb2.  v0:= new `java.util.HashMap`;
  #L2fefb6.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2fefbc.  v5.`e6.o.a` @type ^`java.util.Map` := v0 @kind object;
  #L2fefc0.  v0:= new `java.util.HashMap`;
  #L2fefc4.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2fefca.  v5.`e6.o.b` @type ^`java.util.Map` := v0 @kind object;
  #L2fefce.  v0:= new `java.util.HashMap`;
  #L2fefd2.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2fefd8.  v5.`e6.o.c` @type ^`java.util.Map` := v0 @kind object;
  #L2fefdc.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2fefe0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2fefe6.  v5.`e6.o.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L2fefea.  v0:= new `e6.v`;
  #L2fefee.  call `<init>`(v0, v6) @signature `Le6/v;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L2feff4.  v5.`e6.o.e` @type ^`e6.v` := v0 @kind object;
  #L2feff8.  v5.`e6.o.g` @type ^`e6.j` := v9 @kind object;
  #L2feffc.  v6:= new `java.util.ArrayList`;
  #L2ff000.  call `<init>`(v6) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2ff006.  v9:= constclass @type ^`e6.v` @kind object;
  #L2ff00a.  v1:= 2I;
  #L2ff00c.  v1:= new `java.lang.Class`[v1];
  #L2ff010.  v2:= constclass @type ^`p7.d` @kind object;
  #L2ff014.  v3:= 0I;
  #L2ff016.  v1[v3]:= v2 @kind object;
  #L2ff01a.  v2:= 1I;
  #L2ff01c.  v4:= constclass @type ^`p7.c` @kind object;
  #L2ff020.  v1[v2]:= v4 @kind object;
  #L2ff024.  call temp:= `q`(v0, v9, v1) @signature `Le6/d;.q:(Ljava/lang/Object;Ljava/lang/Class;[Ljava/lang/Class;)Le6/d;` @kind static;
  #L2ff02a.  v9:= temp @kind object;
  #L2ff02c.  call temp:= `add`(v6, v9) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2ff032.  v9:= constclass @type ^`j7.a` @kind object;
  #L2ff036.  v0:= new `java.lang.Class`[v3];
  #L2ff03a.  call temp:= `q`(v5, v9, v0) @signature `Le6/d;.q:(Ljava/lang/Object;Ljava/lang/Class;[Ljava/lang/Class;)Le6/d;` @kind static;
  #L2ff040.  v9:= temp @kind object;
  #L2ff042.  call temp:= `add`(v6, v9) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2ff048.  call temp:= `iterator`(v8) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ff04e.  v8:= temp @kind object;
  #L2ff050.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ff056.  v9:= temp;
  #L2ff058.  if v9 == 0 then goto L2ff074;
  #L2ff05c.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ff062.  v9:= temp @kind object;
  #L2ff064.  v9:= (`e6.d`) v9 @kind object;
  #L2ff068.  if v9 == 0 then goto L2ff050;
  #L2ff06c.  call temp:= `add`(v6, v9) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2ff072.  goto L2ff050;
  #L2ff074.  call temp:= `m`(v7) @signature `Le6/o;.m:(Ljava/lang/Iterable;)Ljava/util/List;` @kind static;
  #L2ff07a.  v7:= temp @kind object;
  #L2ff07c.  v5.`e6.o.d` @type ^`java.util.List` := v7 @kind object;
  #L2ff080.  call `j`(v5, v6) @signature `Le6/o;.j:(Ljava/util/List;)V` @kind direct;
  #L2ff086.  return @kind void;
}
procedure `void` `<init>`(`e6.o` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object, `java.lang.Iterable` v2 @kind object, `java.util.Collection` v3 @kind object, `e6.j` v4 @kind object, `e6.o$a` v5 @kind object) @signature `Le6/o;.<init>:(Ljava/util/concurrent/Executor;Ljava/lang/Iterable;Ljava/util/Collection;Le6/j;Le6/o$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2ff098.  call `<init>`(v0, v1, v2, v3, v4) @signature `Le6/o;.<init>:(Ljava/util/concurrent/Executor;Ljava/lang/Iterable;Ljava/util/Collection;Le6/j;)V` @kind direct;
  #L2ff09e.  return @kind void;
}
procedure `java.lang.Object` `f`(`e6.o` v0 @kind object, `e6.d` v1 @kind object) @signature `Le6/o;.f:(Le6/o;Le6/d;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2febb0.  call temp:= `n`(v0, v1) @signature `Le6/o;.n:(Le6/d;)Ljava/lang/Object;` @kind direct;
  #L2febb6.  v0:= temp @kind object;
  #L2febb8.  return v0 @kind object;
}
procedure `void` `g`(`e6.y` v0 @kind object, `s7.b` v1 @kind object) @signature `Le6/o;.g:(Le6/y;Ls7/b;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2fef60.  call `p`(v0, v1) @signature `Le6/o;.p:(Le6/y;Ls7/b;)V` @kind static;
  #L2fef66.  return @kind void;
}
procedure `void` `h`(`e6.d0` v0 @kind object, `s7.b` v1 @kind object) @signature `Le6/o;.h:(Le6/d0;Ls7/b;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2fef78.  call `o`(v0, v1) @signature `Le6/o;.o:(Le6/d0;Ls7/b;)V` @kind static;
  #L2fef7e.  return @kind void;
}
procedure `e6.o$b` `i`(`java.util.concurrent.Executor` v1 @kind object) @signature `Le6/o;.i:(Ljava/util/concurrent/Executor;)Le6/o$b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2feb94.  v0:= new `e6.o$b`;
  #L2feb98.  call `<init>`(v0, v1) @signature `Le6/o$b;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L2feb9e.  return v0 @kind object;
}
procedure `void` `j`(`e6.o` v5 @kind this, `java.util.List` v6 @kind object) @signature `Le6/o;.j:(Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ff0b0.  v0:= new `java.util.ArrayList`;
  #L2ff0b4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2ff0ba.  @monitorenter v5
  #L2ff0bc.  v1:= v5.`e6.o.d` @type ^`java.util.List` @kind object;
  #L2ff0c0.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ff0c6.  v1:= temp @kind object;
  #L2ff0c8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ff0ce.  v2:= temp;
  #L2ff0d0.  if v2 == 0 then goto L2ff122;
  #L2ff0d4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ff0da.  v2:= temp @kind object;
  #L2ff0dc.  v2:= (`s7.b`) v2 @kind object;
  #L2ff0e0.  call temp:= `get`(v2) @signature `Ls7/b;.get:()Ljava/lang/Object;` @kind interface;
  #L2ff0e6.  v2:= temp @kind object;
  #L2ff0e8.  v2:= (`com.google.firebase.components.ComponentRegistrar`) v2 @kind object;
  #L2ff0ec.  if v2 == 0 then goto L2ff0c8;
  #L2ff0f0.  v3:= v5.`e6.o.g` @type ^`e6.j` @kind object;
  #L2ff0f4.  call temp:= `a`(v3, v2) @signature `Le6/j;.a:(Lcom/google/firebase/components/ComponentRegistrar;)Ljava/util/List;` @kind interface;
  #L2ff0fa.  v2:= temp @kind object;
  #L2ff0fc.  call temp:= `addAll`(v6, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2ff102.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L2ff108.  goto L2ff0c8;
  #L2ff10a.  v2:= Exception @type ^`e6.w` @kind object;
  #L2ff10c.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L2ff112.  v3:= "ComponentDiscovery" @kind object;
  #L2ff116.  v4:= "Invalid component registrar." @kind object;
  #L2ff11a.  call temp:= `w`(v3, v4, v2) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2ff120.  goto L2ff0c8;
  #L2ff122.  v1:= v5.`e6.o.a` @type ^`java.util.Map` @kind object;
  #L2ff126.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2ff12c.  v1:= temp;
  #L2ff12e.  if v1 == 0 then goto L2ff13a;
  #L2ff132.  call `a`(v6) @signature `Le6/q;.a:(Ljava/util/List;)V` @kind static;
  #L2ff138.  goto L2ff15c;
  #L2ff13a.  v1:= new `java.util.ArrayList`;
  #L2ff13e.  v2:= v5.`e6.o.a` @type ^`java.util.Map` @kind object;
  #L2ff142.  call temp:= `keySet`(v2) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2ff148.  v2:= temp @kind object;
  #L2ff14a.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2ff150.  call temp:= `addAll`(v1, v6) @signature `Ljava/util/ArrayList;.addAll:(Ljava/util/Collection;)Z` @kind virtual;
  #L2ff156.  call `a`(v1) @signature `Le6/q;.a:(Ljava/util/List;)V` @kind static;
  #L2ff15c.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ff162.  v1:= temp @kind object;
  #L2ff164.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ff16a.  v2:= temp;
  #L2ff16c.  if v2 == 0 then goto L2ff19c;
  #L2ff170.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ff176.  v2:= temp @kind object;
  #L2ff178.  v2:= (`e6.d`) v2 @kind object;
  #L2ff17c.  v3:= new `e6.x`;
  #L2ff180.  v4:= new `e6.m`;
  #L2ff184.  call `<init>`(v4, v5, v2) @signature `Le6/m;.<init>:(Le6/o;Le6/d;)V` @kind direct;
  #L2ff18a.  call `<init>`(v3, v4) @signature `Le6/x;.<init>:(Ls7/b;)V` @kind direct;
  #L2ff190.  v4:= v5.`e6.o.a` @type ^`java.util.Map` @kind object;
  #L2ff194.  call temp:= `put`(v4, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2ff19a.  goto L2ff164;
  #L2ff19c.  call temp:= `s`(v5, v6) @signature `Le6/o;.s:(Ljava/util/List;)Ljava/util/List;` @kind direct;
  #L2ff1a2.  v6:= temp @kind object;
  #L2ff1a4.  call temp:= `addAll`(v0, v6) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2ff1aa.  call temp:= `t`(v5) @signature `Le6/o;.t:()Ljava/util/List;` @kind direct;
  #L2ff1b0.  v6:= temp @kind object;
  #L2ff1b2.  call temp:= `addAll`(v0, v6) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2ff1b8.  call `r`(v5) @signature `Le6/o;.r:()V` @kind direct;
  #L2ff1be.  @monitorexit v5
  #L2ff1c0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ff1c6.  v6:= temp @kind object;
  #L2ff1c8.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ff1ce.  v0:= temp;
  #L2ff1d0.  if v0 == 0 then goto L2ff1e8;
  #L2ff1d4.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ff1da.  v0:= temp @kind object;
  #L2ff1dc.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L2ff1e0.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L2ff1e6.  goto L2ff1c8;
  #L2ff1e8.  call `q`(v5) @signature `Le6/o;.q:()V` @kind direct;
  #L2ff1ee.  return @kind void;
  #L2ff1f0.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ff1f2.  @monitorexit v5
  #L2ff1f4.  throw v6;
  catch `java.lang.Throwable` @[L2ff0bc..L2ff0e0] goto L2ff1f0;
  catch `e6.w` @[L2ff0e0..L2ff108] goto L2ff10a;
  catch `java.lang.Throwable` @[L2ff0e0..L2ff108] goto L2ff1f0;
  catch `java.lang.Throwable` @[L2ff10c..L2ff1c0] goto L2ff1f0;
  catch `java.lang.Throwable` @[L2ff1f2..L2ff1f4] goto L2ff1f0;
}
procedure `void` `k`(`e6.o` v3 @kind this, `java.util.Map` v4 @kind object, `boolean` v5 ) @signature `Le6/o;.k:(Ljava/util/Map;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2ff234.  call temp:= `entrySet`(v4) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2ff23a.  v4:= temp @kind object;
  #L2ff23c.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ff242.  v4:= temp @kind object;
  #L2ff244.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ff24a.  v0:= temp;
  #L2ff24c.  if v0 == 0 then goto L2ff298;
  #L2ff250.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ff256.  v0:= temp @kind object;
  #L2ff258.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L2ff25c.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2ff262.  v1:= temp @kind object;
  #L2ff264.  v1:= (`e6.d`) v1 @kind object;
  #L2ff268.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2ff26e.  v0:= temp @kind object;
  #L2ff270.  v0:= (`s7.b`) v0 @kind object;
  #L2ff274.  call temp:= `l`(v1) @signature `Le6/d;.l:()Z` @kind virtual;
  #L2ff27a.  v2:= temp;
  #L2ff27c.  if v2 != 0 then goto L2ff290;
  #L2ff280.  call temp:= `m`(v1) @signature `Le6/d;.m:()Z` @kind virtual;
  #L2ff286.  v1:= temp;
  #L2ff288.  if v1 == 0 then goto L2ff244;
  #L2ff28c.  if v5 == 0 then goto L2ff244;
  #L2ff290.  call temp:= `get`(v0) @signature `Ls7/b;.get:()Ljava/lang/Object;` @kind interface;
  #L2ff296.  goto L2ff244;
  #L2ff298.  v4:= v3.`e6.o.e` @type ^`e6.v` @kind object;
  #L2ff29c.  call `f`(v4) @signature `Le6/v;.f:()V` @kind virtual;
  #L2ff2a2.  return @kind void;
}
procedure `java.util.List` `m`(`java.lang.Iterable` v2 @kind object) @signature `Le6/o;.m:(Ljava/lang/Iterable;)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2febf8.  v0:= new `java.util.ArrayList`;
  #L2febfc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fec02.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2fec08.  v2:= temp @kind object;
  #L2fec0a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2fec10.  v1:= temp;
  #L2fec12.  if v1 == 0 then goto L2fec26;
  #L2fec16.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2fec1c.  v1:= temp @kind object;
  #L2fec1e.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fec24.  goto L2fec0a;
  #L2fec26.  return v0 @kind object;
}
procedure `java.lang.Object` `n`(`e6.o` v2 @kind this, `e6.d` v3 @kind object) @signature `Le6/o;.n:(Le6/d;)Ljava/lang/Object;` @AccessFlag PRIVATE_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2febcc.  call temp:= `f`(v3) @signature `Le6/d;.f:()Le6/h;` @kind virtual;
  #L2febd2.  v0:= temp @kind object;
  #L2febd4.  v1:= new `e6.f0`;
  #L2febd8.  call `<init>`(v1, v3, v2) @signature `Le6/f0;.<init>:(Le6/d;Le6/e;)V` @kind direct;
  #L2febde.  call temp:= `a`(v0, v1) @signature `Le6/h;.a:(Le6/e;)Ljava/lang/Object;` @kind interface;
  #L2febe4.  v3:= temp @kind object;
  #L2febe6.  return v3 @kind object;
}
procedure `void` `o`(`e6.d0` v0 @kind object, `s7.b` v1 @kind object) @signature `Le6/o;.o:(Le6/d0;Ls7/b;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L2ff314.  call `j`(v0, v1) @signature `Le6/d0;.j:(Ls7/b;)V` @kind virtual;
  #L2ff31a.  return @kind void;
}
procedure `void` `p`(`e6.y` v0 @kind object, `s7.b` v1 @kind object) @signature `Le6/o;.p:(Le6/y;Ls7/b;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L2ff32c.  call `a`(v0, v1) @signature `Le6/y;.a:(Ls7/b;)V` @kind virtual;
  #L2ff332.  return @kind void;
}
procedure `void` `q`(`e6.o` v2 @kind this) @signature `Le6/o;.q:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2ff344.  v0:= v2.`e6.o.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2ff348.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2ff34e.  v0:= temp @kind object;
  #L2ff350.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L2ff354.  if v0 == 0 then goto L2ff36a;
  #L2ff358.  v1:= v2.`e6.o.a` @type ^`java.util.Map` @kind object;
  #L2ff35c.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2ff362.  v0:= temp;
  #L2ff364.  call `k`(v2, v1, v0) @signature `Le6/o;.k:(Ljava/util/Map;Z)V` @kind direct;
  #L2ff36a.  return @kind void;
}
procedure `void` `r`(`e6.o` v6 @kind this) @signature `Le6/o;.r:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ff37c.  v0:= v6.`e6.o.a` @type ^`java.util.Map` @kind object;
  #L2ff380.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2ff386.  v0:= temp @kind object;
  #L2ff388.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ff38e.  v0:= temp @kind object;
  #L2ff390.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ff396.  v1:= temp;
  #L2ff398.  if v1 == 0 then goto L2ff490;
  #L2ff39c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ff3a2.  v1:= temp @kind object;
  #L2ff3a4.  v1:= (`e6.d`) v1 @kind object;
  #L2ff3a8.  call temp:= `e`(v1) @signature `Le6/d;.e:()Ljava/util/Set;` @kind virtual;
  #L2ff3ae.  v2:= temp @kind object;
  #L2ff3b0.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ff3b6.  v2:= temp @kind object;
  #L2ff3b8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ff3be.  v3:= temp;
  #L2ff3c0.  if v3 == 0 then goto L2ff390;
  #L2ff3c4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ff3ca.  v3:= temp @kind object;
  #L2ff3cc.  v3:= (`e6.r`) v3 @kind object;
  #L2ff3d0.  call temp:= `g`(v3) @signature `Le6/r;.g:()Z` @kind virtual;
  #L2ff3d6.  v4:= temp;
  #L2ff3d8.  if v4 == 0 then goto L2ff418;
  #L2ff3dc.  v4:= v6.`e6.o.c` @type ^`java.util.Map` @kind object;
  #L2ff3e0.  call temp:= `c`(v3) @signature `Le6/r;.c:()Ljava/lang/Class;` @kind virtual;
  #L2ff3e6.  v5:= temp @kind object;
  #L2ff3e8.  call temp:= `containsKey`(v4, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L2ff3ee.  v4:= temp;
  #L2ff3f0.  if v4 != 0 then goto L2ff418;
  #L2ff3f4.  v4:= v6.`e6.o.c` @type ^`java.util.Map` @kind object;
  #L2ff3f8.  call temp:= `c`(v3) @signature `Le6/r;.c:()Ljava/lang/Class;` @kind virtual;
  #L2ff3fe.  v3:= temp @kind object;
  #L2ff400.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L2ff406.  v5:= temp @kind object;
  #L2ff408.  call temp:= `b`(v5) @signature `Le6/y;.b:(Ljava/util/Collection;)Le6/y;` @kind static;
  #L2ff40e.  v5:= temp @kind object;
  #L2ff410.  call temp:= `put`(v4, v3, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2ff416.  goto L2ff3b8;
  #L2ff418.  v4:= v6.`e6.o.b` @type ^`java.util.Map` @kind object;
  #L2ff41c.  call temp:= `c`(v3) @signature `Le6/r;.c:()Ljava/lang/Class;` @kind virtual;
  #L2ff422.  v5:= temp @kind object;
  #L2ff424.  call temp:= `containsKey`(v4, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L2ff42a.  v4:= temp;
  #L2ff42c.  if v4 != 0 then goto L2ff3b8;
  #L2ff430.  call temp:= `f`(v3) @signature `Le6/r;.f:()Z` @kind virtual;
  #L2ff436.  v4:= temp;
  #L2ff438.  if v4 != 0 then goto L2ff45e;
  #L2ff43c.  call temp:= `g`(v3) @signature `Le6/r;.g:()Z` @kind virtual;
  #L2ff442.  v4:= temp;
  #L2ff444.  if v4 != 0 then goto L2ff3b8;
  #L2ff448.  v4:= v6.`e6.o.b` @type ^`java.util.Map` @kind object;
  #L2ff44c.  call temp:= `c`(v3) @signature `Le6/r;.c:()Ljava/lang/Class;` @kind virtual;
  #L2ff452.  v3:= temp @kind object;
  #L2ff454.  call temp:= `e`() @signature `Le6/d0;.e:()Le6/d0;` @kind static;
  #L2ff45a.  v5:= temp @kind object;
  #L2ff45c.  goto L2ff410;
  #L2ff45e.  v0:= new `e6.z`;
  #L2ff462.  v2:= 2I;
  #L2ff464.  v2:= new `java.lang.Object`[v2];
  #L2ff468.  v4:= 0I;
  #L2ff46a.  v2[v4]:= v1 @kind object;
  #L2ff46e.  v1:= 1I;
  #L2ff470.  call temp:= `c`(v3) @signature `Le6/r;.c:()Ljava/lang/Class;` @kind virtual;
  #L2ff476.  v3:= temp @kind object;
  #L2ff478.  v2[v1]:= v3 @kind object;
  #L2ff47c.  v1:= "Unsatisfied dependency for component %s: %s" @kind object;
  #L2ff480.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2ff486.  v1:= temp @kind object;
  #L2ff488.  call `<init>`(v0, v1) @signature `Le6/z;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ff48e.  throw v0;
  #L2ff490.  return @kind void;
}
procedure `java.util.List` `s`(`e6.o` v5 @kind this, `java.util.List` v6 @kind object) @signature `Le6/o;.s:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fec38.  v0:= new `java.util.ArrayList`;
  #L2fec3c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fec42.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2fec48.  v6:= temp @kind object;
  #L2fec4a.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2fec50.  v1:= temp;
  #L2fec52.  if v1 == 0 then goto L2fecea;
  #L2fec56.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2fec5c.  v1:= temp @kind object;
  #L2fec5e.  v1:= (`e6.d`) v1 @kind object;
  #L2fec62.  call temp:= `n`(v1) @signature `Le6/d;.n:()Z` @kind virtual;
  #L2fec68.  v2:= temp;
  #L2fec6a.  if v2 != 0 then goto L2fec70;
  #L2fec6e.  goto L2fec4a;
  #L2fec70.  v2:= v5.`e6.o.a` @type ^`java.util.Map` @kind object;
  #L2fec74.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fec7a.  v2:= temp @kind object;
  #L2fec7c.  v2:= (`s7.b`) v2 @kind object;
  #L2fec80.  call temp:= `h`(v1) @signature `Le6/d;.h:()Ljava/util/Set;` @kind virtual;
  #L2fec86.  v1:= temp @kind object;
  #L2fec88.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2fec8e.  v1:= temp @kind object;
  #L2fec90.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2fec96.  v3:= temp;
  #L2fec98.  if v3 == 0 then goto L2fec4a;
  #L2fec9c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2feca2.  v3:= temp @kind object;
  #L2feca4.  v3:= (`java.lang.Class`) v3 @kind object;
  #L2feca8.  v4:= v5.`e6.o.b` @type ^`java.util.Map` @kind object;
  #L2fecac.  call temp:= `containsKey`(v4, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L2fecb2.  v4:= temp;
  #L2fecb4.  if v4 != 0 then goto L2fecc4;
  #L2fecb8.  v4:= v5.`e6.o.b` @type ^`java.util.Map` @kind object;
  #L2fecbc.  call temp:= `put`(v4, v3, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fecc2.  goto L2fec90;
  #L2fecc4.  v4:= v5.`e6.o.b` @type ^`java.util.Map` @kind object;
  #L2fecc8.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fecce.  v3:= temp @kind object;
  #L2fecd0.  v3:= (`s7.b`) v3 @kind object;
  #L2fecd4.  v3:= (`e6.d0`) v3 @kind object;
  #L2fecd8.  v4:= new `e6.l`;
  #L2fecdc.  call `<init>`(v4, v3, v2) @signature `Le6/l;.<init>:(Le6/d0;Ls7/b;)V` @kind direct;
  #L2fece2.  call temp:= `add`(v0, v4) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fece8.  goto L2fec90;
  #L2fecea.  return v0 @kind object;
}
procedure `java.util.List` `t`(`e6.o` v7 @kind this) @signature `Le6/o;.t:()Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fecfc.  v0:= new `java.util.ArrayList`;
  #L2fed00.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fed06.  v1:= new `java.util.HashMap`;
  #L2fed0a.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2fed10.  v2:= v7.`e6.o.a` @type ^`java.util.Map` @kind object;
  #L2fed14.  call temp:= `entrySet`(v2) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2fed1a.  v2:= temp @kind object;
  #L2fed1c.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2fed22.  v2:= temp @kind object;
  #L2fed24.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2fed2a.  v3:= temp;
  #L2fed2c.  if v3 == 0 then goto L2fedba;
  #L2fed30.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2fed36.  v3:= temp @kind object;
  #L2fed38.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L2fed3c.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2fed42.  v4:= temp @kind object;
  #L2fed44.  v4:= (`e6.d`) v4 @kind object;
  #L2fed48.  call temp:= `n`(v4) @signature `Le6/d;.n:()Z` @kind virtual;
  #L2fed4e.  v5:= temp;
  #L2fed50.  if v5 == 0 then goto L2fed56;
  #L2fed54.  goto L2fed24;
  #L2fed56.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2fed5c.  v3:= temp @kind object;
  #L2fed5e.  v3:= (`s7.b`) v3 @kind object;
  #L2fed62.  call temp:= `h`(v4) @signature `Le6/d;.h:()Ljava/util/Set;` @kind virtual;
  #L2fed68.  v4:= temp @kind object;
  #L2fed6a.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2fed70.  v4:= temp @kind object;
  #L2fed72.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2fed78.  v5:= temp;
  #L2fed7a.  if v5 == 0 then goto L2fed24;
  #L2fed7e.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2fed84.  v5:= temp @kind object;
  #L2fed86.  v5:= (`java.lang.Class`) v5 @kind object;
  #L2fed8a.  call temp:= `containsKey`(v1, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L2fed90.  v6:= temp;
  #L2fed92.  if v6 != 0 then goto L2feda6;
  #L2fed96.  v6:= new `java.util.HashSet`;
  #L2fed9a.  call `<init>`(v6) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2feda0.  call temp:= `put`(v1, v5, v6) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2feda6.  call temp:= `get`(v1, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fedac.  v5:= temp @kind object;
  #L2fedae.  v5:= (`java.util.Set`) v5 @kind object;
  #L2fedb2.  call temp:= `add`(v5, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fedb8.  goto L2fed72;
  #L2fedba.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2fedc0.  v1:= temp @kind object;
  #L2fedc2.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2fedc8.  v1:= temp @kind object;
  #L2fedca.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2fedd0.  v2:= temp;
  #L2fedd2.  if v2 == 0 then goto L2fee7c;
  #L2fedd6.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2feddc.  v2:= temp @kind object;
  #L2fedde.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2fede2.  v3:= v7.`e6.o.c` @type ^`java.util.Map` @kind object;
  #L2fede6.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2fedec.  v4:= temp @kind object;
  #L2fedee.  call temp:= `containsKey`(v3, v4) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L2fedf4.  v3:= temp;
  #L2fedf6.  if v3 != 0 then goto L2fee26;
  #L2fedfa.  v3:= v7.`e6.o.c` @type ^`java.util.Map` @kind object;
  #L2fedfe.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2fee04.  v4:= temp @kind object;
  #L2fee06.  v4:= (`java.lang.Class`) v4 @kind object;
  #L2fee0a.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2fee10.  v2:= temp @kind object;
  #L2fee12.  v2:= (`java.util.Collection`) v2 @kind object;
  #L2fee16.  call temp:= `b`(v2) @signature `Le6/y;.b:(Ljava/util/Collection;)Le6/y;` @kind static;
  #L2fee1c.  v2:= temp @kind object;
  #L2fee1e.  call temp:= `put`(v3, v4, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fee24.  goto L2fedca;
  #L2fee26.  v3:= v7.`e6.o.c` @type ^`java.util.Map` @kind object;
  #L2fee2a.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2fee30.  v4:= temp @kind object;
  #L2fee32.  call temp:= `get`(v3, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fee38.  v3:= temp @kind object;
  #L2fee3a.  v3:= (`e6.y`) v3 @kind object;
  #L2fee3e.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2fee44.  v2:= temp @kind object;
  #L2fee46.  v2:= (`java.util.Set`) v2 @kind object;
  #L2fee4a.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2fee50.  v2:= temp @kind object;
  #L2fee52.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2fee58.  v4:= temp;
  #L2fee5a.  if v4 == 0 then goto L2fedca;
  #L2fee5e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2fee64.  v4:= temp @kind object;
  #L2fee66.  v4:= (`s7.b`) v4 @kind object;
  #L2fee6a.  v5:= new `e6.k`;
  #L2fee6e.  call `<init>`(v5, v3, v4) @signature `Le6/k;.<init>:(Le6/y;Ls7/b;)V` @kind direct;
  #L2fee74.  call temp:= `add`(v0, v5) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fee7a.  goto L2fee52;
  #L2fee7c.  return v0 @kind object;
}
procedure `s7.b` `c`(`e6.o` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Le6/o;.c:(Ljava/lang/Class;)Ls7/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2feed0.  @monitorenter v1
  #L2feed2.  v0:= "Null interface requested." @kind object;
  #L2feed6.  call temp:= `c`(v2, v0) @signature `Le6/e0;.c:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2feedc.  v0:= v1.`e6.o.b` @type ^`java.util.Map` @kind object;
  #L2feee0.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2feee6.  v2:= temp @kind object;
  #L2feee8.  v2:= (`s7.b`) v2 @kind object;
  #L2feeec.  @monitorexit v1
  #L2feeee.  return v2 @kind object;
  #L2feef0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2feef2.  @monitorexit v1
  #L2feef4.  throw v2;
  catch `java.lang.Throwable` @[L2feed2..L2feeec] goto L2feef0;
}
procedure `s7.b` `d`(`e6.o` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Le6/o;.d:(Ljava/lang/Class;)Ls7/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fef14.  @monitorenter v1
  #L2fef16.  v0:= v1.`e6.o.c` @type ^`java.util.Map` @kind object;
  #L2fef1a.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fef20.  v2:= temp @kind object;
  #L2fef22.  v2:= (`e6.y`) v2 @kind object;
  #L2fef26.  if v2 == 0 then goto L2fef2e;
  #L2fef2a.  @monitorexit v1
  #L2fef2c.  return v2 @kind object;
  #L2fef2e.  v2:= `@@e6.o.h` @type ^`s7.b` @kind object;
  #L2fef32.  @monitorexit v1
  #L2fef34.  return v2 @kind object;
  #L2fef36.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fef38.  @monitorexit v1
  #L2fef3a.  throw v2;
  catch `java.lang.Throwable` @[L2fef16..L2fef26] goto L2fef36;
  catch `java.lang.Throwable` @[L2fef2e..L2fef32] goto L2fef36;
}
procedure `s7.a` `e`(`e6.o` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Le6/o;.e:(Ljava/lang/Class;)Ls7/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fee90.  call temp:= `c`(v1, v2) @signature `Le6/o;.c:(Ljava/lang/Class;)Ls7/b;` @kind virtual;
  #L2fee96.  v2:= temp @kind object;
  #L2fee98.  if v2 != 0 then goto L2feea6;
  #L2fee9c.  call temp:= `e`() @signature `Le6/d0;.e:()Le6/d0;` @kind static;
  #L2feea2.  v2:= temp @kind object;
  #L2feea4.  return v2 @kind object;
  #L2feea6.  v0:= instanceof @variable v2 @type ^`e6.d0` @kind boolean;
  #L2feeaa.  if v0 == 0 then goto L2feeb4;
  #L2feeae.  v2:= (`e6.d0`) v2 @kind object;
  #L2feeb2.  return v2 @kind object;
  #L2feeb4.  call temp:= `i`(v2) @signature `Le6/d0;.i:(Ls7/b;)Le6/d0;` @kind static;
  #L2feeba.  v2:= temp @kind object;
  #L2feebc.  return v2 @kind object;
}
procedure `void` `l`(`e6.o` v3 @kind this, `boolean` v4 ) @signature `Le6/o;.l:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2ff2b4.  v0:= v3.`e6.o.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2ff2b8.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L2ff2be.  v1:= temp @kind object;
  #L2ff2c0.  v2:= 0I;
  #L2ff2c2.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ff2c8.  v0:= temp;
  #L2ff2ca.  if v0 != 0 then goto L2ff2d0;
  #L2ff2ce.  return @kind void;
  #L2ff2d0.  @monitorenter v3
  #L2ff2d2.  v0:= new `java.util.HashMap`;
  #L2ff2d6.  v1:= v3.`e6.o.a` @type ^`java.util.Map` @kind object;
  #L2ff2da.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L2ff2e0.  @monitorexit v3
  #L2ff2e2.  call `k`(v3, v0, v4) @signature `Le6/o;.k:(Ljava/util/Map;Z)V` @kind direct;
  #L2ff2e8.  return @kind void;
  #L2ff2ea.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ff2ec.  @monitorexit v3
  #L2ff2ee.  throw v4;
  catch `java.lang.Throwable` @[L2ff2d2..L2ff2e2] goto L2ff2ea;
  catch `java.lang.Throwable` @[L2ff2ec..L2ff2ee] goto L2ff2ea;
}
