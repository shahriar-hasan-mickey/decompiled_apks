record `e6.v` @kind class @AccessFlag  extends `p7.d` @kind interface, `p7.c` @kind interface {
  `java.util.Map` `e6.v.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Queue` `e6.v.b` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `e6.v.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e6.v` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object) @signature `Le6/v;.<init>:(Ljava/util/concurrent/Executor;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L30012c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L300132.  v0:= new `java.util.HashMap`;
  #L300136.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L30013c.  v1.`e6.v.a` @type ^`java.util.Map` := v0 @kind object;
  #L300140.  v0:= new `java.util.ArrayDeque`;
  #L300144.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L30014a.  v1.`e6.v.b` @type ^`java.util.Queue` := v0 @kind object;
  #L30014e.  v1.`e6.v.c` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L300152.  return @kind void;
}
procedure `void` `e`(`java.util.Map$Entry` v0 @kind object, `p7.a` v1 @kind object) @signature `Le6/v;.e:(Ljava/util/Map$Entry;Lp7/a;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L300114.  call `h`(v0, v1) @signature `Le6/v;.h:(Ljava/util/Map$Entry;Lp7/a;)V` @kind static;
  #L30011a.  return @kind void;
}
procedure `java.util.Set` `g`(`e6.v` v1 @kind this, `p7.a` v2 @kind object) @signature `Le6/v;.g:(Lp7/a;)Ljava/util/Set;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3000bc.  @monitorenter v1
  #L3000be.  v0:= v1.`e6.v.a` @type ^`java.util.Map` @kind object;
  #L3000c2.  call temp:= `b`(v2) @signature `Lp7/a;.b:()Ljava/lang/Class;` @kind virtual;
  #L3000c8.  v2:= temp @kind object;
  #L3000ca.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3000d0.  v2:= temp @kind object;
  #L3000d2.  v2:= (`java.util.Map`) v2 @kind object;
  #L3000d6.  if v2 != 0 then goto L3000e4;
  #L3000da.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L3000e0.  v2:= temp @kind object;
  #L3000e2.  goto L3000ec;
  #L3000e4.  call temp:= `entrySet`(v2) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3000ea.  v2:= temp @kind object;
  #L3000ec.  @monitorexit v1
  #L3000ee.  return v2 @kind object;
  #L3000f0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3000f2.  @monitorexit v1
  #L3000f4.  throw v2;
  catch `java.lang.Throwable` @[L3000be..L3000ec] goto L3000f0;
}
procedure `void` `h`(`java.util.Map$Entry` v0 @kind object, `p7.a` v1 @kind object) @signature `Le6/v;.h:(Ljava/util/Map$Entry;Lp7/a;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L3001d4.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3001da.  v0:= temp @kind object;
  #L3001dc.  v0:= (`p7.b`) v0 @kind object;
  #L3001e0.  call `a`(v0, v1) @signature `Lp7/b;.a:(Lp7/a;)V` @kind interface;
  #L3001e6.  return @kind void;
}
procedure `void` `a`(`e6.v` v2 @kind this, `java.lang.Class` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object, `p7.b` v5 @kind object) @signature `Le6/v;.a:(Ljava/lang/Class;Ljava/util/concurrent/Executor;Lp7/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L300288.  @monitorenter v2
  #L30028a.  call temp:= `b`(v3) @signature `Le6/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L300290.  call temp:= `b`(v5) @signature `Le6/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L300296.  call temp:= `b`(v4) @signature `Le6/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L30029c.  v0:= v2.`e6.v.a` @type ^`java.util.Map` @kind object;
  #L3002a0.  call temp:= `containsKey`(v0, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L3002a6.  v0:= temp;
  #L3002a8.  if v0 != 0 then goto L3002c0;
  #L3002ac.  v0:= v2.`e6.v.a` @type ^`java.util.Map` @kind object;
  #L3002b0.  v1:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3002b4.  call `<init>`(v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3002ba.  call temp:= `put`(v0, v3, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3002c0.  v0:= v2.`e6.v.a` @type ^`java.util.Map` @kind object;
  #L3002c4.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3002ca.  v3:= temp @kind object;
  #L3002cc.  v3:= (`java.util.concurrent.ConcurrentHashMap`) v3 @kind object;
  #L3002d0.  call temp:= `put`(v3, v5, v4) @signature `Ljava/util/concurrent/ConcurrentHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3002d6.  @monitorexit v2
  #L3002d8.  return @kind void;
  #L3002da.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3002dc.  @monitorexit v2
  #L3002de.  throw v3;
  catch `java.lang.Throwable` @[L30028a..L3002d6] goto L3002da;
}
procedure `void` `b`(`e6.v` v1 @kind this, `java.lang.Class` v2 @kind object, `p7.b` v3 @kind object) @signature `Le6/v;.b:(Ljava/lang/Class;Lp7/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L300318.  @monitorenter v1
  #L30031a.  call temp:= `b`(v2) @signature `Le6/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L300320.  call temp:= `b`(v3) @signature `Le6/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L300326.  v0:= v1.`e6.v.a` @type ^`java.util.Map` @kind object;
  #L30032a.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L300330.  v0:= temp;
  #L300332.  if v0 != 0 then goto L30033a;
  #L300336.  @monitorexit v1
  #L300338.  return @kind void;
  #L30033a.  v0:= v1.`e6.v.a` @type ^`java.util.Map` @kind object;
  #L30033e.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L300344.  v0:= temp @kind object;
  #L300346.  v0:= (`java.util.concurrent.ConcurrentHashMap`) v0 @kind object;
  #L30034a.  call temp:= `remove`(v0, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L300350.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.isEmpty:()Z` @kind virtual;
  #L300356.  v3:= temp;
  #L300358.  if v3 == 0 then goto L300366;
  #L30035c.  v3:= v1.`e6.v.a` @type ^`java.util.Map` @kind object;
  #L300360.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L300366.  @monitorexit v1
  #L300368.  return @kind void;
  #L30036a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L30036c.  @monitorexit v1
  #L30036e.  throw v2;
  catch `java.lang.Throwable` @[L30031a..L300332] goto L30036a;
  catch `java.lang.Throwable` @[L30033a..L300366] goto L30036a;
}
procedure `void` `c`(`e6.v` v1 @kind this, `java.lang.Class` v2 @kind object, `p7.b` v3 @kind object) @signature `Le6/v;.c:(Ljava/lang/Class;Lp7/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3002fc.  v0:= v1.`e6.v.c` @type ^`java.util.concurrent.Executor` @kind object;
  #L300300.  call `a`(v1, v2, v0, v3) @signature `Le6/v;.a:(Ljava/lang/Class;Ljava/util/concurrent/Executor;Lp7/b;)V` @kind virtual;
  #L300306.  return @kind void;
}
procedure `void` `d`(`e6.v` v4 @kind this, `p7.a` v5 @kind object) @signature `Le6/v;.d:(Lp7/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3001f8.  call temp:= `b`(v5) @signature `Le6/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3001fe.  @monitorenter v4
  #L300200.  v0:= v4.`e6.v.b` @type ^`java.util.Queue` @kind object;
  #L300204.  if v0 == 0 then goto L300212;
  #L300208.  call temp:= `add`(v0, v5) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30020e.  @monitorexit v4
  #L300210.  return @kind void;
  #L300212.  @monitorexit v4
  #L300214.  call temp:= `g`(v4, v5) @signature `Le6/v;.g:(Lp7/a;)Ljava/util/Set;` @kind direct;
  #L30021a.  v0:= temp @kind object;
  #L30021c.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L300222.  v0:= temp @kind object;
  #L300224.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30022a.  v1:= temp;
  #L30022c.  if v1 == 0 then goto L30025a;
  #L300230.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L300236.  v1:= temp @kind object;
  #L300238.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L30023c.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L300242.  v2:= temp @kind object;
  #L300244.  v2:= (`java.util.concurrent.Executor`) v2 @kind object;
  #L300248.  v3:= new `e6.u`;
  #L30024c.  call `<init>`(v3, v1, v5) @signature `Le6/u;.<init>:(Ljava/util/Map$Entry;Lp7/a;)V` @kind direct;
  #L300252.  call `execute`(v2, v3) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L300258.  goto L300224;
  #L30025a.  return @kind void;
  #L30025c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L30025e.  @monitorexit v4
  #L300260.  throw v5;
  catch `java.lang.Throwable` @[L300200..L300214] goto L30025c;
  catch `java.lang.Throwable` @[L30025e..L300260] goto L30025c;
}
procedure `void` `f`(`e6.v` v2 @kind this) @signature `Le6/v;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L300164.  @monitorenter v2
  #L300166.  v0:= v2.`e6.v.b` @type ^`java.util.Queue` @kind object;
  #L30016a.  v1:= 0I;
  #L30016c.  if v0 == 0 then goto L300176;
  #L300170.  v2.`e6.v.b` @type ^`java.util.Queue` := v1 @kind object;
  #L300174.  goto L300178;
  #L300176.  v0:= v1 @kind object;
  #L300178.  @monitorexit v2
  #L30017a.  if v0 == 0 then goto L3001a6;
  #L30017e.  call temp:= `iterator`(v0) @signature `Ljava/util/Queue;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L300184.  v0:= temp @kind object;
  #L300186.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30018c.  v1:= temp;
  #L30018e.  if v1 == 0 then goto L3001a6;
  #L300192.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L300198.  v1:= temp @kind object;
  #L30019a.  v1:= (`p7.a`) v1 @kind object;
  #L30019e.  call `d`(v2, v1) @signature `Le6/v;.d:(Lp7/a;)V` @kind virtual;
  #L3001a4.  goto L300186;
  #L3001a6.  return @kind void;
  #L3001a8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3001aa.  @monitorexit v2
  #L3001ac.  throw v0;
  catch `java.lang.Throwable` @[L300166..L30017a] goto L3001a8;
  catch `java.lang.Throwable` @[L3001aa..L3001ac] goto L3001a8;
}
