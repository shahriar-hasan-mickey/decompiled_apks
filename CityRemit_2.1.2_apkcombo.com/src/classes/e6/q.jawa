record `e6.q` @kind class @AccessFlag  {
}
procedure `void` `a`(`java.util.List` v7 @kind object) @signature `Le6/q;.a:(Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2ffc18.  call temp:= `c`(v7) @signature `Le6/q;.c:(Ljava/util/List;)Ljava/util/Set;` @kind static;
  #L2ffc1e.  v0:= temp @kind object;
  #L2ffc20.  call temp:= `b`(v0) @signature `Le6/q;.b:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L2ffc26.  v1:= temp @kind object;
  #L2ffc28.  v2:= 0I;
  #L2ffc2a.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L2ffc30.  v3:= temp;
  #L2ffc32.  if v3 != 0 then goto L2ffc96;
  #L2ffc36.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ffc3c.  v3:= temp @kind object;
  #L2ffc3e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ffc44.  v3:= temp @kind object;
  #L2ffc46.  v3:= (`e6.q$b`) v3 @kind object;
  #L2ffc4a.  call temp:= `remove`(v1, v3) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2ffc50.  v2:= v2 + 1;
  #L2ffc54.  call temp:= `d`(v3) @signature `Le6/q$b;.d:()Ljava/util/Set;` @kind virtual;
  #L2ffc5a.  v4:= temp @kind object;
  #L2ffc5c.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ffc62.  v4:= temp @kind object;
  #L2ffc64.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ffc6a.  v5:= temp;
  #L2ffc6c.  if v5 == 0 then goto L2ffc2a;
  #L2ffc70.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ffc76.  v5:= temp @kind object;
  #L2ffc78.  v5:= (`e6.q$b`) v5 @kind object;
  #L2ffc7c.  call `g`(v5, v3) @signature `Le6/q$b;.g:(Le6/q$b;)V` @kind virtual;
  #L2ffc82.  call temp:= `f`(v5) @signature `Le6/q$b;.f:()Z` @kind virtual;
  #L2ffc88.  v6:= temp;
  #L2ffc8a.  if v6 == 0 then goto L2ffc64;
  #L2ffc8e.  call temp:= `add`(v1, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2ffc94.  goto L2ffc64;
  #L2ffc96.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2ffc9c.  v7:= temp;
  #L2ffc9e.  if v2 != v7 then goto L2ffca4;
  #L2ffca2.  return @kind void;
  #L2ffca4.  v7:= new `java.util.ArrayList`;
  #L2ffca8.  call `<init>`(v7) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2ffcae.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ffcb4.  v0:= temp @kind object;
  #L2ffcb6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ffcbc.  v1:= temp;
  #L2ffcbe.  if v1 == 0 then goto L2ffcf6;
  #L2ffcc2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ffcc8.  v1:= temp @kind object;
  #L2ffcca.  v1:= (`e6.q$b`) v1 @kind object;
  #L2ffcce.  call temp:= `f`(v1) @signature `Le6/q$b;.f:()Z` @kind virtual;
  #L2ffcd4.  v2:= temp;
  #L2ffcd6.  if v2 != 0 then goto L2ffcb6;
  #L2ffcda.  call temp:= `e`(v1) @signature `Le6/q$b;.e:()Z` @kind virtual;
  #L2ffce0.  v2:= temp;
  #L2ffce2.  if v2 != 0 then goto L2ffcb6;
  #L2ffce6.  call temp:= `c`(v1) @signature `Le6/q$b;.c:()Le6/d;` @kind virtual;
  #L2ffcec.  v1:= temp @kind object;
  #L2ffcee.  call temp:= `add`(v7, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2ffcf4.  goto L2ffcb6;
  #L2ffcf6.  v0:= new `e6.s`;
  #L2ffcfa.  call `<init>`(v0, v7) @signature `Le6/s;.<init>:(Ljava/util/List;)V` @kind direct;
  #L2ffd00.  throw v0;
}
procedure `java.util.Set` `b`(`java.util.Set` v3 @kind object) @signature `Le6/q;.b:(Ljava/util/Set;)Ljava/util/Set;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2ff9b4.  v0:= new `java.util.HashSet`;
  #L2ff9b8.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2ff9be.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ff9c4.  v3:= temp @kind object;
  #L2ff9c6.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ff9cc.  v1:= temp;
  #L2ff9ce.  if v1 == 0 then goto L2ff9f2;
  #L2ff9d2.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ff9d8.  v1:= temp @kind object;
  #L2ff9da.  v1:= (`e6.q$b`) v1 @kind object;
  #L2ff9de.  call temp:= `f`(v1) @signature `Le6/q$b;.f:()Z` @kind virtual;
  #L2ff9e4.  v2:= temp;
  #L2ff9e6.  if v2 == 0 then goto L2ff9c6;
  #L2ff9ea.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2ff9f0.  goto L2ff9c6;
  #L2ff9f2.  return v0 @kind object;
}
procedure `java.util.Set` `c`(`java.util.List` v10 @kind object) @signature `Le6/q;.c:(Ljava/util/List;)Ljava/util/Set;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2ffa04.  v0:= new `java.util.HashMap`;
  #L2ffa08.  call temp:= `size`(v10) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2ffa0e.  v1:= temp;
  #L2ffa10.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L2ffa16.  call temp:= `iterator`(v10) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ffa1c.  v10:= temp @kind object;
  #L2ffa1e.  call temp:= `hasNext`(v10) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ffa24.  v1:= temp;
  #L2ffa26.  v2:= 0I;
  #L2ffa28.  if v1 == 0 then goto L2ffaec;
  #L2ffa2c.  call temp:= `next`(v10) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ffa32.  v1:= temp @kind object;
  #L2ffa34.  v1:= (`e6.d`) v1 @kind object;
  #L2ffa38.  v3:= new `e6.q$b`;
  #L2ffa3c.  call `<init>`(v3, v1) @signature `Le6/q$b;.<init>:(Le6/d;)V` @kind direct;
  #L2ffa42.  call temp:= `h`(v1) @signature `Le6/d;.h:()Ljava/util/Set;` @kind virtual;
  #L2ffa48.  v4:= temp @kind object;
  #L2ffa4a.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ffa50.  v4:= temp @kind object;
  #L2ffa52.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ffa58.  v5:= temp;
  #L2ffa5a.  if v5 == 0 then goto L2ffa1e;
  #L2ffa5e.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ffa64.  v5:= temp @kind object;
  #L2ffa66.  v5:= (`java.lang.Class`) v5 @kind object;
  #L2ffa6a.  v6:= new `e6.q$c`;
  #L2ffa6e.  call temp:= `n`(v1) @signature `Le6/d;.n:()Z` @kind virtual;
  #L2ffa74.  v7:= temp;
  #L2ffa76.  v8:= 1I;
  #L2ffa78.  v7:= v7 ^~ v8 @kind int;
  #L2ffa7a.  call `<init>`(v6, v5, v7, v2) @signature `Le6/q$c;.<init>:(Ljava/lang/Class;ZLe6/q$a;)V` @kind direct;
  #L2ffa80.  call temp:= `containsKey`(v0, v6) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L2ffa86.  v7:= temp;
  #L2ffa88.  if v7 != 0 then goto L2ffa9c;
  #L2ffa8c.  v7:= new `java.util.HashSet`;
  #L2ffa90.  call `<init>`(v7) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2ffa96.  call temp:= `put`(v0, v6, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2ffa9c.  call temp:= `get`(v0, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2ffaa2.  v7:= temp @kind object;
  #L2ffaa4.  v7:= (`java.util.Set`) v7 @kind object;
  #L2ffaa8.  call temp:= `isEmpty`(v7) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L2ffaae.  v9:= temp;
  #L2ffab0.  if v9 != 0 then goto L2ffae4;
  #L2ffab4.  call temp:= `a`(v6) @signature `Le6/q$c;.a:(Le6/q$c;)Z` @kind static;
  #L2ffaba.  v6:= temp;
  #L2ffabc.  if v6 == 0 then goto L2ffac2;
  #L2ffac0.  goto L2ffae4;
  #L2ffac2.  v10:= new `java.lang.IllegalArgumentException`;
  #L2ffac6.  v0:= new `java.lang.Object`[v8];
  #L2ffaca.  v1:= 0I;
  #L2ffacc.  v0[v1]:= v5 @kind object;
  #L2ffad0.  v1:= "Multiple components provide %s." @kind object;
  #L2ffad4.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2ffada.  v0:= temp @kind object;
  #L2ffadc.  call `<init>`(v10, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ffae2.  throw v10;
  #L2ffae4.  call temp:= `add`(v7, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2ffaea.  goto L2ffa52;
  #L2ffaec.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L2ffaf2.  v10:= temp @kind object;
  #L2ffaf4.  call temp:= `iterator`(v10) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ffafa.  v10:= temp @kind object;
  #L2ffafc.  call temp:= `hasNext`(v10) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ffb02.  v1:= temp;
  #L2ffb04.  if v1 == 0 then goto L2ffbcc;
  #L2ffb08.  call temp:= `next`(v10) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ffb0e.  v1:= temp @kind object;
  #L2ffb10.  v1:= (`java.util.Set`) v1 @kind object;
  #L2ffb14.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ffb1a.  v1:= temp @kind object;
  #L2ffb1c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ffb22.  v3:= temp;
  #L2ffb24.  if v3 == 0 then goto L2ffafc;
  #L2ffb28.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ffb2e.  v3:= temp @kind object;
  #L2ffb30.  v3:= (`e6.q$b`) v3 @kind object;
  #L2ffb34.  call temp:= `c`(v3) @signature `Le6/q$b;.c:()Le6/d;` @kind virtual;
  #L2ffb3a.  v4:= temp @kind object;
  #L2ffb3c.  call temp:= `e`(v4) @signature `Le6/d;.e:()Ljava/util/Set;` @kind virtual;
  #L2ffb42.  v4:= temp @kind object;
  #L2ffb44.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ffb4a.  v4:= temp @kind object;
  #L2ffb4c.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ffb52.  v5:= temp;
  #L2ffb54.  if v5 == 0 then goto L2ffb1c;
  #L2ffb58.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ffb5e.  v5:= temp @kind object;
  #L2ffb60.  v5:= (`e6.r`) v5 @kind object;
  #L2ffb64.  call temp:= `e`(v5) @signature `Le6/r;.e:()Z` @kind virtual;
  #L2ffb6a.  v6:= temp;
  #L2ffb6c.  if v6 != 0 then goto L2ffb72;
  #L2ffb70.  goto L2ffb4c;
  #L2ffb72.  v6:= new `e6.q$c`;
  #L2ffb76.  call temp:= `c`(v5) @signature `Le6/r;.c:()Ljava/lang/Class;` @kind virtual;
  #L2ffb7c.  v7:= temp @kind object;
  #L2ffb7e.  call temp:= `g`(v5) @signature `Le6/r;.g:()Z` @kind virtual;
  #L2ffb84.  v5:= temp;
  #L2ffb86.  call `<init>`(v6, v7, v5, v2) @signature `Le6/q$c;.<init>:(Ljava/lang/Class;ZLe6/q$a;)V` @kind direct;
  #L2ffb8c.  call temp:= `get`(v0, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2ffb92.  v5:= temp @kind object;
  #L2ffb94.  v5:= (`java.util.Set`) v5 @kind object;
  #L2ffb98.  if v5 != 0 then goto L2ffb9e;
  #L2ffb9c.  goto L2ffb4c;
  #L2ffb9e.  call temp:= `iterator`(v5) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ffba4.  v5:= temp @kind object;
  #L2ffba6.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ffbac.  v6:= temp;
  #L2ffbae.  if v6 == 0 then goto L2ffb4c;
  #L2ffbb2.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ffbb8.  v6:= temp @kind object;
  #L2ffbba.  v6:= (`e6.q$b`) v6 @kind object;
  #L2ffbbe.  call `a`(v3, v6) @signature `Le6/q$b;.a:(Le6/q$b;)V` @kind virtual;
  #L2ffbc4.  call `b`(v6, v3) @signature `Le6/q$b;.b:(Le6/q$b;)V` @kind virtual;
  #L2ffbca.  goto L2ffba6;
  #L2ffbcc.  v10:= new `java.util.HashSet`;
  #L2ffbd0.  call `<init>`(v10) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2ffbd6.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L2ffbdc.  v0:= temp @kind object;
  #L2ffbde.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ffbe4.  v0:= temp @kind object;
  #L2ffbe6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ffbec.  v1:= temp;
  #L2ffbee.  if v1 == 0 then goto L2ffc06;
  #L2ffbf2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ffbf8.  v1:= temp @kind object;
  #L2ffbfa.  v1:= (`java.util.Set`) v1 @kind object;
  #L2ffbfe.  call temp:= `addAll`(v10, v1) @signature `Ljava/util/HashSet;.addAll:(Ljava/util/Collection;)Z` @kind virtual;
  #L2ffc04.  goto L2ffbe6;
  #L2ffc06.  return v10 @kind object;
}
