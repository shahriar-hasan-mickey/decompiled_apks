record `e6.r` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Class` `e6.r.a` @AccessFlag PRIVATE_FINAL;
  `int` `e6.r.b` @AccessFlag PRIVATE_FINAL;
  `int` `e6.r.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e6.r` v1 @kind this, `java.lang.Class` v2 @kind object, `int` v3 , `int` v4 ) @signature `Le6/r;.<init>:(Ljava/lang/Class;II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L300048.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30004e.  v0:= "Null dependency anInterface." @kind object;
  #L300052.  call temp:= `c`(v2, v0) @signature `Le6/e0;.c:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L300058.  v2:= temp @kind object;
  #L30005a.  v2:= (`java.lang.Class`) v2 @kind object;
  #L30005e.  v1.`e6.r.a` @type ^`java.lang.Class` := v2 @kind object;
  #L300062.  v1.`e6.r.b` @type ^`int` := v3;
  #L300066.  v1.`e6.r.c` @type ^`int` := v4;
  #L30006a.  return @kind void;
}
procedure `e6.r` `a`(`java.lang.Class` v3 @kind object) @signature `Le6/r;.a:(Ljava/lang/Class;)Le6/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2ffe4c.  v0:= new `e6.r`;
  #L2ffe50.  v1:= 0I;
  #L2ffe52.  v2:= 2I;
  #L2ffe54.  call `<init>`(v0, v3, v1, v2) @signature `Le6/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L2ffe5a.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`int` v3 ) @signature `Le6/r;.b:(I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2fff60.  if v3 == 0 then goto L2fffaa;
  #L2fff64.  v0:= 1I;
  #L2fff66.  if v3 == v0 then goto L2fffa4;
  #L2fff6a.  v0:= 2I;
  #L2fff6c.  if v3 != v0 then goto L2fff76;
  #L2fff70.  v3:= "deferred" @kind object;
  #L2fff74.  return v3 @kind object;
  #L2fff76.  v0:= new `java.lang.AssertionError`;
  #L2fff7a.  v1:= new `java.lang.StringBuilder`;
  #L2fff7e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fff84.  v2:= "Unsupported injection: " @kind object;
  #L2fff88.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fff8e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fff94.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fff9a.  v3:= temp @kind object;
  #L2fff9c.  call `<init>`(v0, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2fffa2.  throw v0;
  #L2fffa4.  v3:= "provider" @kind object;
  #L2fffa8.  return v3 @kind object;
  #L2fffaa.  v3:= "direct" @kind object;
  #L2fffae.  return v3 @kind object;
}
procedure `e6.r` `h`(`java.lang.Class` v2 @kind object) @signature `Le6/r;.h:(Ljava/lang/Class;)Le6/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ffe6c.  v0:= new `e6.r`;
  #L2ffe70.  v1:= 0I;
  #L2ffe72.  call `<init>`(v0, v2, v1, v1) @signature `Le6/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L2ffe78.  return v0 @kind object;
}
procedure `e6.r` `i`(`java.lang.Class` v3 @kind object) @signature `Le6/r;.i:(Ljava/lang/Class;)Le6/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2ffe8c.  v0:= new `e6.r`;
  #L2ffe90.  v1:= 0I;
  #L2ffe92.  v2:= 1I;
  #L2ffe94.  call `<init>`(v0, v3, v1, v2) @signature `Le6/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L2ffe9a.  return v0 @kind object;
}
procedure `e6.r` `j`(`java.lang.Class` v3 @kind object) @signature `Le6/r;.j:(Ljava/lang/Class;)Le6/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2ffeac.  v0:= new `e6.r`;
  #L2ffeb0.  v1:= 1I;
  #L2ffeb2.  v2:= 0I;
  #L2ffeb4.  call `<init>`(v0, v3, v1, v2) @signature `Le6/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L2ffeba.  return v0 @kind object;
}
procedure `e6.r` `k`(`java.lang.Class` v2 @kind object) @signature `Le6/r;.k:(Ljava/lang/Class;)Le6/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ffecc.  v0:= new `e6.r`;
  #L2ffed0.  v1:= 1I;
  #L2ffed2.  call `<init>`(v0, v2, v1, v1) @signature `Le6/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L2ffed8.  return v0 @kind object;
}
procedure `e6.r` `l`(`java.lang.Class` v3 @kind object) @signature `Le6/r;.l:(Ljava/lang/Class;)Le6/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2ffeec.  v0:= new `e6.r`;
  #L2ffef0.  v1:= 2I;
  #L2ffef2.  v2:= 0I;
  #L2ffef4.  call `<init>`(v0, v3, v1, v2) @signature `Le6/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L2ffefa.  return v0 @kind object;
}
procedure `java.lang.Class` `c`(`e6.r` v1 @kind this) @signature `Le6/r;.c:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fff48.  v0:= v1.`e6.r.a` @type ^`java.lang.Class` @kind object;
  #L2fff4c.  return v0 @kind object;
}
procedure `boolean` `d`(`e6.r` v2 @kind this) @signature `Le6/r;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ffdc4.  v0:= v2.`e6.r.c` @type ^`int`;
  #L2ffdc8.  v1:= 2I;
  #L2ffdca.  if v0 != v1 then goto L2ffdd2;
  #L2ffdce.  v0:= 1I;
  #L2ffdd0.  goto L2ffdd4;
  #L2ffdd2.  v0:= 0I;
  #L2ffdd4.  return v0;
}
procedure `boolean` `e`(`e6.r` v1 @kind this) @signature `Le6/r;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ffde8.  v0:= v1.`e6.r.c` @type ^`int`;
  #L2ffdec.  if v0 != 0 then goto L2ffdf4;
  #L2ffdf0.  v0:= 1I;
  #L2ffdf2.  goto L2ffdf6;
  #L2ffdf4.  v0:= 0I;
  #L2ffdf6.  return v0;
}
procedure `boolean` `equals`(`e6.r` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le6/r;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2ffd7c.  v0:= instanceof @variable v4 @type ^`e6.r` @kind boolean;
  #L2ffd80.  v1:= 0I;
  #L2ffd82.  if v0 == 0 then goto L2ffdb0;
  #L2ffd86.  v4:= (`e6.r`) v4 @kind object;
  #L2ffd8a.  v0:= v3.`e6.r.a` @type ^`java.lang.Class` @kind object;
  #L2ffd8e.  v2:= v4.`e6.r.a` @type ^`java.lang.Class` @kind object;
  #L2ffd92.  if v0 != v2 then goto L2ffdb0;
  #L2ffd96.  v0:= v3.`e6.r.b` @type ^`int`;
  #L2ffd9a.  v2:= v4.`e6.r.b` @type ^`int`;
  #L2ffd9e.  if v0 != v2 then goto L2ffdb0;
  #L2ffda2.  v0:= v3.`e6.r.c` @type ^`int`;
  #L2ffda6.  v4:= v4.`e6.r.c` @type ^`int`;
  #L2ffdaa.  if v0 != v4 then goto L2ffdb0;
  #L2ffdae.  v1:= 1I;
  #L2ffdb0.  return v1;
}
procedure `boolean` `f`(`e6.r` v2 @kind this) @signature `Le6/r;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ffe08.  v0:= v2.`e6.r.b` @type ^`int`;
  #L2ffe0c.  v1:= 1I;
  #L2ffe0e.  if v0 != v1 then goto L2ffe14;
  #L2ffe12.  goto L2ffe16;
  #L2ffe14.  v1:= 0I;
  #L2ffe16.  return v1;
}
procedure `boolean` `g`(`e6.r` v2 @kind this) @signature `Le6/r;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ffe28.  v0:= v2.`e6.r.b` @type ^`int`;
  #L2ffe2c.  v1:= 2I;
  #L2ffe2e.  if v0 != v1 then goto L2ffe36;
  #L2ffe32.  v0:= 1I;
  #L2ffe34.  goto L2ffe38;
  #L2ffe36.  v0:= 0I;
  #L2ffe38.  return v0;
}
procedure `int` `hashCode`(`e6.r` v3 @kind this) @signature `Le6/r;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fff0c.  v0:= v3.`e6.r.a` @type ^`java.lang.Class` @kind object;
  #L2fff10.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2fff16.  v0:= temp;
  #L2fff18.  v1:= 1000003I;
  #L2fff1e.  v0:= v0 ^~ v1 @kind int;
  #L2fff20.  v0:= v0 * v1 @kind int;
  #L2fff24.  v2:= v3.`e6.r.b` @type ^`int`;
  #L2fff28.  v0:= v0 ^~ v2 @kind int;
  #L2fff2a.  v0:= v0 * v1 @kind int;
  #L2fff2e.  v1:= v3.`e6.r.c` @type ^`int`;
  #L2fff32.  v0:= v0 ^~ v1 @kind int;
  #L2fff34.  return v0;
}
procedure `java.lang.String` `toString`(`e6.r` v3 @kind this) @signature `Le6/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fffc0.  v0:= new `java.lang.StringBuilder`;
  #L2fffc4.  v1:= "Dependency{anInterface=" @kind object;
  #L2fffc8.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fffce.  v1:= v3.`e6.r.a` @type ^`java.lang.Class` @kind object;
  #L2fffd2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fffd8.  v1:= ", type=" @kind object;
  #L2fffdc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fffe2.  v1:= v3.`e6.r.b` @type ^`int`;
  #L2fffe6.  v2:= 1I;
  #L2fffe8.  if v1 != v2 then goto L2ffff2;
  #L2fffec.  v1:= "required" @kind object;
  #L2ffff0.  goto L300000;
  #L2ffff2.  if v1 != 0 then goto L2ffffc;
  #L2ffff6.  v1:= "optional" @kind object;
  #L2ffffa.  goto L300000;
  #L2ffffc.  v1:= "set" @kind object;
  #L300000.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L300006.  v1:= ", injection=" @kind object;
  #L30000a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L300010.  v1:= v3.`e6.r.c` @type ^`int`;
  #L300014.  call temp:= `b`(v1) @signature `Le6/r;.b:(I)Ljava/lang/String;` @kind static;
  #L30001a.  v1:= temp @kind object;
  #L30001c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L300022.  v1:= "}" @kind object;
  #L300026.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30002c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L300032.  v0:= temp @kind object;
  #L300034.  return v0 @kind object;
}
