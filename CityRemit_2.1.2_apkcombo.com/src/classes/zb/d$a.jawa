record `zb.d$a` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface {
  `int` `zb.d$a.o` @AccessFlag PRIVATE;
  `int` `zb.d$a.p` @AccessFlag PRIVATE;
  `int` `zb.d$a.q` @AccessFlag PRIVATE;
  `wb.c` `zb.d$a.r` @AccessFlag PRIVATE;
  `int` `zb.d$a.s` @AccessFlag PRIVATE;
  `zb.d` `zb.d$a.t` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`zb.d$a` v2 @kind this, `zb.d` v3 @kind object) @signature `Lzb/d$a;.<init>:(Lzb/d;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L506a54.  v2.`zb.d$a.t` @type ^`zb.d` := v3 @kind object;
  #L506a58.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L506a5e.  v0:= -1I;
  #L506a60.  v2.`zb.d$a.o` @type ^`int` := v0;
  #L506a64.  call temp:= `d`(v3) @signature `Lzb/d;.d:(Lzb/d;)I` @kind static;
  #L506a6a.  v0:= temp;
  #L506a6c.  call temp:= `b`(v3) @signature `Lzb/d;.b:(Lzb/d;)Ljava/lang/CharSequence;` @kind static;
  #L506a72.  v3:= temp @kind object;
  #L506a74.  call temp:= `length`(v3) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L506a7a.  v3:= temp;
  #L506a7c.  v1:= 0I;
  #L506a7e.  call temp:= `e`(v0, v1, v3) @signature `Lwb/d;.e:(III)I` @kind static;
  #L506a84.  v3:= temp;
  #L506a86.  v2.`zb.d$a.p` @type ^`int` := v3;
  #L506a8a.  v2.`zb.d$a.q` @type ^`int` := v3;
  #L506a8e.  return @kind void;
}
procedure `void` `a`(`zb.d$a` v6 @kind this) @signature `Lzb/d$a;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L506aa0.  v0:= v6.`zb.d$a.q` @type ^`int`;
  #L506aa4.  v1:= 0I;
  #L506aa6.  if v0 >= 0 then goto L506ab8;
  #L506aaa.  v6.`zb.d$a.o` @type ^`int` := v1;
  #L506aae.  v0:= 0I;
  #L506ab0.  v6.`zb.d$a.r` @type ^`wb.c` := v0 @kind object;
  #L506ab4.  goto L506bd2;
  #L506ab8.  v0:= v6.`zb.d$a.t` @type ^`zb.d` @kind object;
  #L506abc.  call temp:= `c`(v0) @signature `Lzb/d;.c:(Lzb/d;)I` @kind static;
  #L506ac2.  v0:= temp;
  #L506ac4.  v2:= -1I;
  #L506ac6.  v3:= 1I;
  #L506ac8.  if v0 <= 0 then goto L506ae6;
  #L506acc.  v0:= v6.`zb.d$a.s` @type ^`int`;
  #L506ad0.  v0:= v0 + v3 @kind int;
  #L506ad2.  v6.`zb.d$a.s` @type ^`int` := v0;
  #L506ad6.  v4:= v6.`zb.d$a.t` @type ^`zb.d` @kind object;
  #L506ada.  call temp:= `c`(v4) @signature `Lzb/d;.c:(Lzb/d;)I` @kind static;
  #L506ae0.  v4:= temp;
  #L506ae2.  if v0 >= v4 then goto L506b02;
  #L506ae6.  v0:= v6.`zb.d$a.q` @type ^`int`;
  #L506aea.  v4:= v6.`zb.d$a.t` @type ^`zb.d` @kind object;
  #L506aee.  call temp:= `b`(v4) @signature `Lzb/d;.b:(Lzb/d;)Ljava/lang/CharSequence;` @kind static;
  #L506af4.  v4:= temp @kind object;
  #L506af6.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L506afc.  v4:= temp;
  #L506afe.  if v0 <= v4 then goto L506b2e;
  #L506b02.  v0:= new `wb.c`;
  #L506b06.  v1:= v6.`zb.d$a.p` @type ^`int`;
  #L506b0a.  v4:= v6.`zb.d$a.t` @type ^`zb.d` @kind object;
  #L506b0e.  call temp:= `b`(v4) @signature `Lzb/d;.b:(Lzb/d;)Ljava/lang/CharSequence;` @kind static;
  #L506b14.  v4:= temp @kind object;
  #L506b16.  call temp:= `s`(v4) @signature `Lzb/o;.s:(Ljava/lang/CharSequence;)I` @kind static;
  #L506b1c.  v4:= temp;
  #L506b1e.  call `<init>`(v0, v1, v4) @signature `Lwb/c;.<init>:(II)V` @kind direct;
  #L506b24.  v6.`zb.d$a.r` @type ^`wb.c` := v0 @kind object;
  #L506b28.  v6.`zb.d$a.q` @type ^`int` := v2;
  #L506b2c.  goto L506bce;
  #L506b2e.  v0:= v6.`zb.d$a.t` @type ^`zb.d` @kind object;
  #L506b32.  call temp:= `a`(v0) @signature `Lzb/d;.a:(Lzb/d;)Ltb/p;` @kind static;
  #L506b38.  v0:= temp @kind object;
  #L506b3a.  v4:= v6.`zb.d$a.t` @type ^`zb.d` @kind object;
  #L506b3e.  call temp:= `b`(v4) @signature `Lzb/d;.b:(Lzb/d;)Ljava/lang/CharSequence;` @kind static;
  #L506b44.  v4:= temp @kind object;
  #L506b46.  v5:= v6.`zb.d$a.q` @type ^`int`;
  #L506b4a.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L506b50.  v5:= temp @kind object;
  #L506b52.  call temp:= `invoke`(v0, v4, v5) @signature `Ltb/p;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L506b58.  v0:= temp @kind object;
  #L506b5a.  v0:= (`jb.l`) v0 @kind object;
  #L506b5e.  if v0 != 0 then goto L506b86;
  #L506b62.  v0:= new `wb.c`;
  #L506b66.  v1:= v6.`zb.d$a.p` @type ^`int`;
  #L506b6a.  v4:= v6.`zb.d$a.t` @type ^`zb.d` @kind object;
  #L506b6e.  call temp:= `b`(v4) @signature `Lzb/d;.b:(Lzb/d;)Ljava/lang/CharSequence;` @kind static;
  #L506b74.  v4:= temp @kind object;
  #L506b76.  call temp:= `s`(v4) @signature `Lzb/o;.s:(Ljava/lang/CharSequence;)I` @kind static;
  #L506b7c.  v4:= temp;
  #L506b7e.  call `<init>`(v0, v1, v4) @signature `Lwb/c;.<init>:(II)V` @kind direct;
  #L506b84.  goto L506b24;
  #L506b86.  call temp:= `a`(v0) @signature `Ljb/l;.a:()Ljava/lang/Object;` @kind virtual;
  #L506b8c.  v2:= temp @kind object;
  #L506b8e.  v2:= (`java.lang.Number`) v2 @kind object;
  #L506b92.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L506b98.  v2:= temp;
  #L506b9a.  call temp:= `b`(v0) @signature `Ljb/l;.b:()Ljava/lang/Object;` @kind virtual;
  #L506ba0.  v0:= temp @kind object;
  #L506ba2.  v0:= (`java.lang.Number`) v0 @kind object;
  #L506ba6.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L506bac.  v0:= temp;
  #L506bae.  v4:= v6.`zb.d$a.p` @type ^`int`;
  #L506bb2.  call temp:= `g`(v4, v2) @signature `Lwb/d;.g:(II)Lwb/c;` @kind static;
  #L506bb8.  v4:= temp @kind object;
  #L506bba.  v6.`zb.d$a.r` @type ^`wb.c` := v4 @kind object;
  #L506bbe.  v2:= v2 + v0 @kind int;
  #L506bc0.  v6.`zb.d$a.p` @type ^`int` := v2;
  #L506bc4.  if v0 != 0 then goto L506bca;
  #L506bc8.  v1:= 1I;
  #L506bca.  v2:= v2 + v1 @kind int;
  #L506bcc.  goto L506b28;
  #L506bce.  v6.`zb.d$a.o` @type ^`int` := v3;
  #L506bd2.  return @kind void;
}
procedure `wb.c` `d`(`zb.d$a` v3 @kind this) @signature `Lzb/d$a;.d:()Lwb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L506c04.  v0:= v3.`zb.d$a.o` @type ^`int`;
  #L506c08.  v1:= -1I;
  #L506c0a.  if v0 != v1 then goto L506c14;
  #L506c0e.  call `a`(v3) @signature `Lzb/d$a;.a:()V` @kind direct;
  #L506c14.  v0:= v3.`zb.d$a.o` @type ^`int`;
  #L506c18.  if v0 == 0 then goto L506c36;
  #L506c1c.  v0:= v3.`zb.d$a.r` @type ^`wb.c` @kind object;
  #L506c20.  v2:= "null cannot be cast to non-null type kotlin.ranges.IntRange" @kind object;
  #L506c24.  call `c`(v0, v2) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L506c2a.  v2:= 0I;
  #L506c2c.  v3.`zb.d$a.r` @type ^`wb.c` := v2 @kind object;
  #L506c30.  v3.`zb.d$a.o` @type ^`int` := v1;
  #L506c34.  return v0 @kind object;
  #L506c36.  v0:= new `java.util.NoSuchElementException`;
  #L506c3a.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L506c40.  throw v0;
}
procedure `boolean` `hasNext`(`zb.d$a` v2 @kind this) @signature `Lzb/d$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L506a08.  v0:= v2.`zb.d$a.o` @type ^`int`;
  #L506a0c.  v1:= -1I;
  #L506a0e.  if v0 != v1 then goto L506a18;
  #L506a12.  call `a`(v2) @signature `Lzb/d$a;.a:()V` @kind direct;
  #L506a18.  v0:= v2.`zb.d$a.o` @type ^`int`;
  #L506a1c.  v1:= 1I;
  #L506a1e.  if v0 != v1 then goto L506a24;
  #L506a22.  goto L506a26;
  #L506a24.  v1:= 0I;
  #L506a26.  return v1;
}
procedure `java.lang.Object` `next`(`zb.d$a` v1 @kind this) @signature `Lzb/d$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L506a38.  call temp:= `d`(v1) @signature `Lzb/d$a;.d:()Lwb/c;` @kind virtual;
  #L506a3e.  v0:= temp @kind object;
  #L506a40.  return v0 @kind object;
}
procedure `void` `remove`(`zb.d$a` v2 @kind this) @signature `Lzb/d$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L506be4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L506be8.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L506bec.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L506bf2.  throw v0;
}
