record `r4.l` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface {
  `java.util.Iterator` `r4.l.o` @AccessFlag FINAL;
  `java.util.Collection` `r4.l.p` @AccessFlag FINAL;
  `r4.m` `r4.l.q` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`r4.l` v1 @kind this, `r4.m` v2 @kind object) @signature `Lr4/l;.<init>:(Lr4/m;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43f0e0.  v1.`r4.l.q` @type ^`r4.m` := v2 @kind object;
  #L43f0e4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43f0ea.  v2:= v2.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f0ee.  v1.`r4.l.p` @type ^`java.util.Collection` := v2 @kind object;
  #L43f0f2.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L43f0f6.  if v0 == 0 then goto L43f108;
  #L43f0fa.  v2:= (`java.util.List`) v2 @kind object;
  #L43f0fe.  call temp:= `listIterator`(v2) @signature `Ljava/util/List;.listIterator:()Ljava/util/ListIterator;` @kind interface;
  #L43f104.  v2:= temp @kind object;
  #L43f106.  goto L43f110;
  #L43f108.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43f10e.  v2:= temp @kind object;
  #L43f110.  v1.`r4.l.o` @type ^`java.util.Iterator` := v2 @kind object;
  #L43f114.  return @kind void;
}
procedure `void` `<init>`(`r4.l` v0 @kind this, `r4.m` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lr4/l;.<init>:(Lr4/m;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43f128.  v0.`r4.l.q` @type ^`r4.m` := v1 @kind object;
  #L43f12c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43f132.  v1:= v1.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f136.  v0.`r4.l.p` @type ^`java.util.Collection` := v1 @kind object;
  #L43f13a.  v0.`r4.l.o` @type ^`java.util.Iterator` := v2 @kind object;
  #L43f13e.  return @kind void;
}
procedure `void` `a`(`r4.l` v2 @kind this) @signature `Lr4/l;.a:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L43f184.  v0:= v2.`r4.l.q` @type ^`r4.m` @kind object;
  #L43f188.  call `zzb`(v0) @signature `Lr4/m;.zzb:()V` @kind virtual;
  #L43f18e.  v0:= v2.`r4.l.q` @type ^`r4.m` @kind object;
  #L43f192.  v0:= v0.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f196.  v1:= v2.`r4.l.p` @type ^`java.util.Collection` @kind object;
  #L43f19a.  if v0 != v1 then goto L43f1a0;
  #L43f19e.  return @kind void;
  #L43f1a0.  v0:= new `java.util.ConcurrentModificationException`;
  #L43f1a4.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L43f1aa.  throw v0;
}
procedure `boolean` `hasNext`(`r4.l` v1 @kind this) @signature `Lr4/l;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43f098.  call `a`(v1) @signature `Lr4/l;.a:()V` @kind virtual;
  #L43f09e.  v0:= v1.`r4.l.o` @type ^`java.util.Iterator` @kind object;
  #L43f0a2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43f0a8.  v0:= temp;
  #L43f0aa.  return v0;
}
procedure `java.lang.Object` `next`(`r4.l` v1 @kind this) @signature `Lr4/l;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43f0bc.  call `a`(v1) @signature `Lr4/l;.a:()V` @kind virtual;
  #L43f0c2.  v0:= v1.`r4.l.o` @type ^`java.util.Iterator` @kind object;
  #L43f0c6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43f0cc.  v0:= temp @kind object;
  #L43f0ce.  return v0 @kind object;
}
procedure `void` `remove`(`r4.l` v1 @kind this) @signature `Lr4/l;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43f150.  v0:= v1.`r4.l.o` @type ^`java.util.Iterator` @kind object;
  #L43f154.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L43f15a.  v0:= v1.`r4.l.q` @type ^`r4.m` @kind object;
  #L43f15e.  v0:= v0.`r4.m.s` @type ^`r4.p` @kind object;
  #L43f162.  call temp:= `j`(v0) @signature `Lr4/p;.j:(Lr4/p;)I` @kind static;
  #L43f168.  v0:= v1.`r4.l.q` @type ^`r4.m` @kind object;
  #L43f16c.  call `f`(v0) @signature `Lr4/m;.f:()V` @kind virtual;
  #L43f172.  return @kind void;
}
