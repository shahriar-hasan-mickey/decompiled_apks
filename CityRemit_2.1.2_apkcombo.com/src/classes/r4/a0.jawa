record `r4.a0` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `r4.e0` `r4.a0.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`r4.a0` v0 @kind this, `r4.e0` v1 @kind object) @signature `Lr4/a0;.<init>:(Lr4/e0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L440494.  v0.`r4.a0.o` @type ^`r4.e0` := v1 @kind object;
  #L440498.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L44049e.  return @kind void;
}
procedure `void` `clear`(`r4.a0` v1 @kind this) @signature `Lr4/a0;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4404b0.  v0:= v1.`r4.a0.o` @type ^`r4.e0` @kind object;
  #L4404b4.  call `clear`(v0) @signature `Lr4/e0;.clear:()V` @kind virtual;
  #L4404ba.  return @kind void;
}
procedure `boolean` `contains`(`r4.a0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lr4/a0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4403c0.  v0:= v1.`r4.a0.o` @type ^`r4.e0` @kind object;
  #L4403c4.  call temp:= `containsKey`(v0, v2) @signature `Lr4/e0;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L4403ca.  v2:= temp;
  #L4403cc.  return v2;
}
procedure `java.util.Iterator` `iterator`(`r4.a0` v2 @kind this) @signature `Lr4/a0;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L440454.  v0:= v2.`r4.a0.o` @type ^`r4.e0` @kind object;
  #L440458.  call temp:= `n`(v0) @signature `Lr4/e0;.n:()Ljava/util/Map;` @kind virtual;
  #L44045e.  v1:= temp @kind object;
  #L440460.  if v1 == 0 then goto L440476;
  #L440464.  call temp:= `keySet`(v1) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L44046a.  v0:= temp @kind object;
  #L44046c.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L440472.  v0:= temp @kind object;
  #L440474.  goto L440482;
  #L440476.  v1:= new `r4.v`;
  #L44047a.  call `<init>`(v1, v0) @signature `Lr4/v;.<init>:(Lr4/e0;)V` @kind direct;
  #L440480.  v0:= v1 @kind object;
  #L440482.  return v0 @kind object;
}
procedure `boolean` `remove`(`r4.a0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lr4/a0;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4403e0.  v0:= v1.`r4.a0.o` @type ^`r4.e0` @kind object;
  #L4403e4.  call temp:= `n`(v0) @signature `Lr4/e0;.n:()Ljava/util/Map;` @kind virtual;
  #L4403ea.  v0:= temp @kind object;
  #L4403ec.  if v0 == 0 then goto L440402;
  #L4403f0.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L4403f6.  v0:= temp @kind object;
  #L4403f8.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4403fe.  v2:= temp;
  #L440400.  goto L44041c;
  #L440402.  v0:= v1.`r4.a0.o` @type ^`r4.e0` @kind object;
  #L440406.  call temp:= `j`(v0, v2) @signature `Lr4/e0;.j:(Lr4/e0;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44040c.  v2:= temp @kind object;
  #L44040e.  call temp:= `k`() @signature `Lr4/e0;.k:()Ljava/lang/Object;` @kind static;
  #L440414.  v0:= temp @kind object;
  #L440416.  if v2 != v0 then goto L44041e;
  #L44041a.  v2:= 0I;
  #L44041c.  return v2;
  #L44041e.  v2:= 1I;
  #L440420.  return v2;
}
procedure `int` `size`(`r4.a0` v1 @kind this) @signature `Lr4/a0;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L440434.  v0:= v1.`r4.a0.o` @type ^`r4.e0` @kind object;
  #L440438.  call temp:= `size`(v0) @signature `Lr4/e0;.size:()I` @kind virtual;
  #L44043e.  v0:= temp;
  #L440440.  return v0;
}
