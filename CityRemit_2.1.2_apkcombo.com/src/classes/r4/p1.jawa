record `r4.p1` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`java.util.Set` v3 @kind object) @signature `Lr4/p1;.a:(Ljava/util/Set;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L443054.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L44305a.  v3:= temp @kind object;
  #L44305c.  v0:= 0I;
  #L44305e.  v1:= 0I;
  #L443060.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L443066.  v2:= temp;
  #L443068.  if v2 == 0 then goto L443088;
  #L44306c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L443072.  v2:= temp @kind object;
  #L443074.  if v2 == 0 then goto L443082;
  #L443078.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L44307e.  v2:= temp;
  #L443080.  goto L443084;
  #L443082.  v2:= 0I;
  #L443084.  v1:= v1 + v2 @kind int;
  #L443086.  goto L443060;
  #L443088.  return v1;
}
procedure `boolean` `b`(`java.util.Set` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lr4/p1;.b:(Ljava/util/Set;Ljava/util/Collection;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L442f90.  call temp:= `requireNonNull`(v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L442f96.  v0:= instanceof @variable v3 @type ^`r4.h1` @kind boolean;
  #L442f9a.  if v0 == 0 then goto L442faa;
  #L442f9e.  v3:= (`r4.h1`) v3 @kind object;
  #L442fa2.  call temp:= `zza`(v3) @signature `Lr4/h1;.zza:()Ljava/util/Set;` @kind interface;
  #L442fa8.  v3:= temp @kind object;
  #L442faa.  v0:= instanceof @variable v3 @type ^`java.util.Set` @kind boolean;
  #L442fae.  if v0 == 0 then goto L442ffc;
  #L442fb2.  call temp:= `size`(v3) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L442fb8.  v0:= temp;
  #L442fba.  call temp:= `size`(v2) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L442fc0.  v1:= temp;
  #L442fc2.  if v0 <= v1 then goto L442ffc;
  #L442fc6.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L442fcc.  v2:= temp @kind object;
  #L442fce.  v0:= 0I;
  #L442fd0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L442fd6.  v1:= temp;
  #L442fd8.  if v1 == 0 then goto L442ffa;
  #L442fdc.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L442fe2.  v1:= temp @kind object;
  #L442fe4.  call temp:= `contains`(v3, v1) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L442fea.  v1:= temp;
  #L442fec.  if v1 == 0 then goto L442fd0;
  #L442ff0.  call `remove`(v2) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L442ff6.  v0:= 1I;
  #L442ff8.  goto L442fd0;
  #L442ffa.  return v0;
  #L442ffc.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L443002.  v3:= temp @kind object;
  #L443004.  call temp:= `c`(v2, v3) @signature `Lr4/p1;.c:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L44300a.  v2:= temp;
  #L44300c.  return v2;
}
procedure `boolean` `c`(`java.util.Set` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lr4/p1;.c:(Ljava/util/Set;Ljava/util/Iterator;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L443020.  v0:= 0I;
  #L443022.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L443028.  v1:= temp;
  #L44302a.  if v1 == 0 then goto L443042;
  #L44302e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L443034.  v1:= temp @kind object;
  #L443036.  call temp:= `remove`(v2, v1) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L44303c.  v1:= temp;
  #L44303e.  v0:= v0 ^| v1 @kind int;
  #L443040.  goto L443022;
  #L443042.  return v0;
}
