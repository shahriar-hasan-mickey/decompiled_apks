record `r4.o1` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractSet` @kind class {
}
procedure `void` `<init>`(`r4.o1` v0 @kind this) @signature `Lr4/o1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L442f78.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L442f7e.  return @kind void;
}
procedure `boolean` `removeAll`(`r4.o1` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lr4/o1;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L442f3c.  call temp:= `b`(v0, v1) @signature `Lr4/p1;.b:(Ljava/util/Set;Ljava/util/Collection;)Z` @kind static;
  #L442f42.  v1:= temp;
  #L442f44.  return v1;
}
procedure `boolean` `retainAll`(`r4.o1` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lr4/o1;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L442f58.  call temp:= `requireNonNull`(v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L442f5e.  call temp:= `retainAll`(v0, v1) @signature `Ljava/util/AbstractSet;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L442f64.  v1:= temp;
  #L442f66.  return v1;
}
