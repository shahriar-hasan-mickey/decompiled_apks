record `r4.d` @kind class @AccessFlag ABSTRACT extends `r4.t1` @kind class {
  `int` `r4.d.o` @AccessFlag PRIVATE_FINAL;
  `int` `r4.d.p` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`r4.d` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lr4/d;.<init>:(II)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L43ea24.  call `<init>`(v1) @signature `Lr4/t1;.<init>:()V` @kind direct;
  #L43ea2a.  v0:= "index" @kind object;
  #L43ea2e.  call temp:= `b`(v3, v2, v0) @signature `Lr4/b;.b:(IILjava/lang/String;)I` @kind static;
  #L43ea34.  v1.`r4.d.o` @type ^`int` := v2;
  #L43ea38.  v1.`r4.d.p` @type ^`int` := v3;
  #L43ea3c.  return @kind void;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Lr4/d;.a:(I)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`r4.d` v2 @kind this) @signature `Lr4/d;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L43e92c.  v0:= v2.`r4.d.p` @type ^`int`;
  #L43e930.  v1:= v2.`r4.d.o` @type ^`int`;
  #L43e934.  if v0 >= v1 then goto L43e93c;
  #L43e938.  v0:= 1I;
  #L43e93a.  return v0;
  #L43e93c.  v0:= 0I;
  #L43e93e.  return v0;
}
procedure `boolean` `hasPrevious`(`r4.d` v1 @kind this) @signature `Lr4/d;.hasPrevious:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43e950.  v0:= v1.`r4.d.p` @type ^`int`;
  #L43e954.  if v0 <= 0 then goto L43e95c;
  #L43e958.  v0:= 1I;
  #L43e95a.  return v0;
  #L43e95c.  v0:= 0I;
  #L43e95e.  return v0;
}
procedure `java.lang.Object` `next`(`r4.d` v2 @kind this) @signature `Lr4/d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L43e9a4.  call temp:= `hasNext`(v2) @signature `Lr4/d;.hasNext:()Z` @kind virtual;
  #L43e9aa.  v0:= temp;
  #L43e9ac.  if v0 == 0 then goto L43e9c6;
  #L43e9b0.  v0:= v2.`r4.d.p` @type ^`int`;
  #L43e9b4.  v1:= v0 + 1;
  #L43e9b8.  v2.`r4.d.p` @type ^`int` := v1;
  #L43e9bc.  call temp:= `a`(v2, v0) @signature `Lr4/d;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L43e9c2.  v0:= temp @kind object;
  #L43e9c4.  return v0 @kind object;
  #L43e9c6.  v0:= new `java.util.NoSuchElementException`;
  #L43e9ca.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L43e9d0.  throw v0;
}
procedure `int` `nextIndex`(`r4.d` v1 @kind this) @signature `Lr4/d;.nextIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43e970.  v0:= v1.`r4.d.p` @type ^`int`;
  #L43e974.  return v0;
}
procedure `java.lang.Object` `previous`(`r4.d` v1 @kind this) @signature `Lr4/d;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43e9e4.  call temp:= `hasPrevious`(v1) @signature `Lr4/d;.hasPrevious:()Z` @kind virtual;
  #L43e9ea.  v0:= temp;
  #L43e9ec.  if v0 == 0 then goto L43ea06;
  #L43e9f0.  v0:= v1.`r4.d.p` @type ^`int`;
  #L43e9f4.  v0:= v0 + -1;
  #L43e9f8.  v1.`r4.d.p` @type ^`int` := v0;
  #L43e9fc.  call temp:= `a`(v1, v0) @signature `Lr4/d;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L43ea02.  v0:= temp @kind object;
  #L43ea04.  return v0 @kind object;
  #L43ea06.  v0:= new `java.util.NoSuchElementException`;
  #L43ea0a.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L43ea10.  throw v0;
}
procedure `int` `previousIndex`(`r4.d` v1 @kind this) @signature `Lr4/d;.previousIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43e988.  v0:= v1.`r4.d.p` @type ^`int`;
  #L43e98c.  v0:= v0 + -1;
  #L43e990.  return v0;
}
