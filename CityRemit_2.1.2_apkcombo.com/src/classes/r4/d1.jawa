record `r4.d1` @kind class @AccessFlag FINAL extends `java.util.AbstractCollection` @kind class {
  `java.util.Map` `r4.d1.o` @AccessFlag FINAL;
}
procedure `void` `<init>`(`r4.d1` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lr4/d1;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4428f4.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L4428fa.  v0.`r4.d1.o` @type ^`java.util.Map` := v1 @kind object;
  #L4428fe.  return @kind void;
}
procedure `void` `clear`(`r4.d1` v1 @kind this) @signature `Lr4/d1;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L442910.  v0:= v1.`r4.d1.o` @type ^`java.util.Map` @kind object;
  #L442914.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L44291a.  return @kind void;
}
procedure `boolean` `contains`(`r4.d1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lr4/d1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4426a0.  v0:= v1.`r4.d1.o` @type ^`java.util.Map` @kind object;
  #L4426a4.  call temp:= `containsValue`(v0, v2) @signature `Ljava/util/Map;.containsValue:(Ljava/lang/Object;)Z` @kind interface;
  #L4426aa.  v2:= temp;
  #L4426ac.  return v2;
}
procedure `boolean` `isEmpty`(`r4.d1` v1 @kind this) @signature `Lr4/d1;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4426c0.  v0:= v1.`r4.d1.o` @type ^`java.util.Map` @kind object;
  #L4426c4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L4426ca.  v0:= temp;
  #L4426cc.  return v0;
}
procedure `java.util.Iterator` `iterator`(`r4.d1` v2 @kind this) @signature `Lr4/d1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4428c4.  v0:= v2.`r4.d1.o` @type ^`java.util.Map` @kind object;
  #L4428c8.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L4428ce.  v0:= temp @kind object;
  #L4428d0.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4428d6.  v0:= temp @kind object;
  #L4428d8.  v1:= new `r4.z0`;
  #L4428dc.  call `<init>`(v1, v0) @signature `Lr4/z0;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L4428e2.  return v1 @kind object;
}
procedure `boolean` `remove`(`r4.d1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lr4/d1;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4426e0.  call temp:= `remove`(v3, v4) @signature `Ljava/util/AbstractCollection;.remove:(Ljava/lang/Object;)Z` @kind super;
  #L4426e6.  v4:= temp;
  #L4426e8.  return v4;
  #L4426ea.  v0:= v3.`r4.d1.o` @type ^`java.util.Map` @kind object;
  #L4426ee.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L4426f4.  v0:= temp @kind object;
  #L4426f6.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4426fc.  v0:= temp @kind object;
  #L4426fe.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L442704.  v1:= temp;
  #L442706.  if v1 == 0 then goto L442740;
  #L44270a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L442710.  v1:= temp @kind object;
  #L442712.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L442716.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L44271c.  v2:= temp @kind object;
  #L44271e.  call temp:= `a`(v4, v2) @signature `Lr4/td;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L442724.  v2:= temp;
  #L442726.  if v2 == 0 then goto L4426fe;
  #L44272a.  v4:= v3.`r4.d1.o` @type ^`java.util.Map` @kind object;
  #L44272e.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L442734.  v0:= temp @kind object;
  #L442736.  call temp:= `remove`(v4, v0) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44273c.  v4:= 1I;
  #L44273e.  return v4;
  #L442740.  v4:= 0I;
  #L442742.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L4426e0..L4426e8] goto L4426ea;
}
procedure `boolean` `removeAll`(`r4.d1` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lr4/d1;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L442764.  call temp:= `requireNonNull`(v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44276a.  call temp:= `removeAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L442770.  v5:= temp;
  #L442772.  return v5;
  #L442774.  v0:= new `java.util.HashSet`;
  #L442778.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L44277e.  v1:= v4.`r4.d1.o` @type ^`java.util.Map` @kind object;
  #L442782.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L442788.  v1:= temp @kind object;
  #L44278a.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L442790.  v1:= temp @kind object;
  #L442792.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L442798.  v2:= temp;
  #L44279a.  if v2 == 0 then goto L4427ce;
  #L44279e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4427a4.  v2:= temp @kind object;
  #L4427a6.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L4427aa.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L4427b0.  v3:= temp @kind object;
  #L4427b2.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4427b8.  v3:= temp;
  #L4427ba.  if v3 == 0 then goto L442792;
  #L4427be.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L4427c4.  v2:= temp @kind object;
  #L4427c6.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4427cc.  goto L442792;
  #L4427ce.  v5:= v4.`r4.d1.o` @type ^`java.util.Map` @kind object;
  #L4427d2.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L4427d8.  v5:= temp @kind object;
  #L4427da.  call temp:= `removeAll`(v5, v0) @signature `Ljava/util/Set;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L4427e0.  v5:= temp;
  #L4427e2.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L44276a..L442772] goto L442774;
}
procedure `boolean` `retainAll`(`r4.d1` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lr4/d1;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L442804.  call temp:= `requireNonNull`(v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44280a.  call temp:= `retainAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L442810.  v5:= temp;
  #L442812.  return v5;
  #L442814.  v0:= new `java.util.HashSet`;
  #L442818.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L44281e.  v1:= v4.`r4.d1.o` @type ^`java.util.Map` @kind object;
  #L442822.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L442828.  v1:= temp @kind object;
  #L44282a.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L442830.  v1:= temp @kind object;
  #L442832.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L442838.  v2:= temp;
  #L44283a.  if v2 == 0 then goto L44286e;
  #L44283e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L442844.  v2:= temp @kind object;
  #L442846.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L44284a.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L442850.  v3:= temp @kind object;
  #L442852.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L442858.  v3:= temp;
  #L44285a.  if v3 == 0 then goto L442832;
  #L44285e.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L442864.  v2:= temp @kind object;
  #L442866.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44286c.  goto L442832;
  #L44286e.  v5:= v4.`r4.d1.o` @type ^`java.util.Map` @kind object;
  #L442872.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L442878.  v5:= temp @kind object;
  #L44287a.  call temp:= `retainAll`(v5, v0) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L442880.  v5:= temp;
  #L442882.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L44280a..L442812] goto L442814;
}
procedure `int` `size`(`r4.d1` v1 @kind this) @signature `Lr4/d1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4428a4.  v0:= v1.`r4.d1.o` @type ^`java.util.Map` @kind object;
  #L4428a8.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L4428ae.  v0:= temp;
  #L4428b0.  return v0;
}
