record `r4.m` @kind class @AccessFlag  extends `java.util.AbstractCollection` @kind class {
  `java.lang.Object` `r4.m.o` @AccessFlag FINAL;
  `java.util.Collection` `r4.m.p` @AccessFlag ;
  `r4.m` `r4.m.q` @AccessFlag FINAL;
  `java.util.Collection` `r4.m.r` @AccessFlag FINAL;
  `r4.p` `r4.m.s` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`r4.m` v0 @kind this, `r4.p` v1 @kind object, `java.lang.Object` v2 @kind object, `java.util.Collection` v3 @kind object, `r4.m` v4 @kind object) @signature `Lr4/m;.<init>:(Lr4/p;Ljava/lang/Object;Ljava/util/Collection;Lr4/m;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43f44c.  v0.`r4.m.s` @type ^`r4.p` := v1 @kind object;
  #L43f450.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L43f456.  v0.`r4.m.o` @type ^`java.lang.Object` := v2 @kind object;
  #L43f45a.  v0.`r4.m.p` @type ^`java.util.Collection` := v3 @kind object;
  #L43f45e.  v0.`r4.m.q` @type ^`r4.m` := v4 @kind object;
  #L43f462.  if v4 != 0 then goto L43f46a;
  #L43f466.  v1:= 0I;
  #L43f468.  goto L43f46e;
  #L43f46a.  v1:= v4.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f46e.  v0.`r4.m.r` @type ^`java.util.Collection` := v1 @kind object;
  #L43f472.  return @kind void;
}
procedure `boolean` `add`(`r4.m` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lr4/m;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L43f1bc.  call `zzb`(v2) @signature `Lr4/m;.zzb:()V` @kind virtual;
  #L43f1c2.  v0:= v2.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f1c6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L43f1cc.  v0:= temp;
  #L43f1ce.  v1:= v2.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f1d2.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L43f1d8.  v3:= temp;
  #L43f1da.  if v3 == 0 then goto L43f1f4;
  #L43f1de.  v1:= v2.`r4.m.s` @type ^`r4.p` @kind object;
  #L43f1e2.  call temp:= `i`(v1) @signature `Lr4/p;.i:(Lr4/p;)I` @kind static;
  #L43f1e8.  if v0 == 0 then goto L43f1f4;
  #L43f1ec.  call `b`(v2) @signature `Lr4/m;.b:()V` @kind virtual;
  #L43f1f2.  v3:= 1I;
  #L43f1f4.  return v3;
}
procedure `boolean` `addAll`(`r4.m` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lr4/m;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L43f208.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L43f20e.  v0:= temp;
  #L43f210.  if v0 == 0 then goto L43f218;
  #L43f214.  v4:= 0I;
  #L43f216.  return v4;
  #L43f218.  call temp:= `size`(v3) @signature `Lr4/m;.size:()I` @kind virtual;
  #L43f21e.  v0:= temp;
  #L43f220.  v1:= v3.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f224.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L43f22a.  v4:= temp;
  #L43f22c.  if v4 == 0 then goto L43f254;
  #L43f230.  v1:= v3.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f234.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L43f23a.  v1:= temp;
  #L43f23c.  v2:= v3.`r4.m.s` @type ^`r4.p` @kind object;
  #L43f240.  v1:= v1 - v0 @kind int;
  #L43f242.  call temp:= `k`(v2, v1) @signature `Lr4/p;.k:(Lr4/p;I)I` @kind static;
  #L43f248.  if v0 != 0 then goto L43f254;
  #L43f24c.  call `b`(v3) @signature `Lr4/m;.b:()V` @kind virtual;
  #L43f252.  v4:= 1I;
  #L43f254.  return v4;
}
procedure `void` `b`(`r4.m` v3 @kind this) @signature `Lr4/m;.b:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L43f4c0.  v0:= v3.`r4.m.q` @type ^`r4.m` @kind object;
  #L43f4c4.  if v0 == 0 then goto L43f4d0;
  #L43f4c8.  call `b`(v0) @signature `Lr4/m;.b:()V` @kind virtual;
  #L43f4ce.  return @kind void;
  #L43f4d0.  v0:= v3.`r4.m.s` @type ^`r4.p` @kind object;
  #L43f4d4.  call temp:= `o`(v0) @signature `Lr4/p;.o:(Lr4/p;)Ljava/util/Map;` @kind static;
  #L43f4da.  v0:= temp @kind object;
  #L43f4dc.  v1:= v3.`r4.m.o` @type ^`java.lang.Object` @kind object;
  #L43f4e0.  v2:= v3.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f4e4.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f4ea.  return @kind void;
}
procedure `void` `clear`(`r4.m` v2 @kind this) @signature `Lr4/m;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L43f484.  call temp:= `size`(v2) @signature `Lr4/m;.size:()I` @kind virtual;
  #L43f48a.  v0:= temp;
  #L43f48c.  if v0 != 0 then goto L43f492;
  #L43f490.  return @kind void;
  #L43f492.  v1:= v2.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f496.  call `clear`(v1) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L43f49c.  v1:= v2.`r4.m.s` @type ^`r4.p` @kind object;
  #L43f4a0.  call temp:= `l`(v1, v0) @signature `Lr4/p;.l:(Lr4/p;I)I` @kind static;
  #L43f4a6.  call `f`(v2) @signature `Lr4/m;.f:()V` @kind virtual;
  #L43f4ac.  return @kind void;
}
procedure `boolean` `contains`(`r4.m` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lr4/m;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43f268.  call `zzb`(v1) @signature `Lr4/m;.zzb:()V` @kind virtual;
  #L43f26e.  v0:= v1.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f272.  call temp:= `contains`(v0, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L43f278.  v2:= temp;
  #L43f27a.  return v2;
}
procedure `boolean` `containsAll`(`r4.m` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lr4/m;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43f28c.  call `zzb`(v1) @signature `Lr4/m;.zzb:()V` @kind virtual;
  #L43f292.  v0:= v1.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f296.  call temp:= `containsAll`(v0, v2) @signature `Ljava/util/Collection;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L43f29c.  v2:= temp;
  #L43f29e.  return v2;
}
procedure `boolean` `equals`(`r4.m` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lr4/m;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43f2b0.  if v2 != v1 then goto L43f2b8;
  #L43f2b4.  v2:= 1I;
  #L43f2b6.  return v2;
  #L43f2b8.  call `zzb`(v1) @signature `Lr4/m;.zzb:()V` @kind virtual;
  #L43f2be.  v0:= v1.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f2c2.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Collection;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L43f2c8.  v2:= temp;
  #L43f2ca.  return v2;
}
procedure `void` `f`(`r4.m` v2 @kind this) @signature `Lr4/m;.f:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L43f570.  v0:= v2.`r4.m.q` @type ^`r4.m` @kind object;
  #L43f574.  if v0 == 0 then goto L43f580;
  #L43f578.  call `f`(v0) @signature `Lr4/m;.f:()V` @kind virtual;
  #L43f57e.  return @kind void;
  #L43f580.  v0:= v2.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f584.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L43f58a.  v0:= temp;
  #L43f58c.  if v0 == 0 then goto L43f5a6;
  #L43f590.  v0:= v2.`r4.m.s` @type ^`r4.p` @kind object;
  #L43f594.  call temp:= `o`(v0) @signature `Lr4/p;.o:(Lr4/p;)Ljava/util/Map;` @kind static;
  #L43f59a.  v0:= temp @kind object;
  #L43f59c.  v1:= v2.`r4.m.o` @type ^`java.lang.Object` @kind object;
  #L43f5a0.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f5a6.  return @kind void;
}
procedure `int` `hashCode`(`r4.m` v1 @kind this) @signature `Lr4/m;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43f3bc.  call `zzb`(v1) @signature `Lr4/m;.zzb:()V` @kind virtual;
  #L43f3c2.  v0:= v1.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f3c6.  call temp:= `hashCode`(v0) @signature `Ljava/util/Collection;.hashCode:()I` @kind interface;
  #L43f3cc.  v0:= temp;
  #L43f3ce.  return v0;
}
procedure `java.util.Iterator` `iterator`(`r4.m` v1 @kind this) @signature `Lr4/m;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43f428.  call `zzb`(v1) @signature `Lr4/m;.zzb:()V` @kind virtual;
  #L43f42e.  v0:= new `r4.l`;
  #L43f432.  call `<init>`(v0, v1) @signature `Lr4/l;.<init>:(Lr4/m;)V` @kind direct;
  #L43f438.  return v0 @kind object;
}
procedure `boolean` `remove`(`r4.m` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lr4/m;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43f2dc.  call `zzb`(v1) @signature `Lr4/m;.zzb:()V` @kind virtual;
  #L43f2e2.  v0:= v1.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f2e6.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Collection;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L43f2ec.  v2:= temp;
  #L43f2ee.  if v2 == 0 then goto L43f302;
  #L43f2f2.  v0:= v1.`r4.m.s` @type ^`r4.p` @kind object;
  #L43f2f6.  call temp:= `j`(v0) @signature `Lr4/p;.j:(Lr4/p;)I` @kind static;
  #L43f2fc.  call `f`(v1) @signature `Lr4/m;.f:()V` @kind virtual;
  #L43f302.  return v2;
}
procedure `boolean` `removeAll`(`r4.m` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lr4/m;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L43f314.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L43f31a.  v0:= temp;
  #L43f31c.  if v0 == 0 then goto L43f324;
  #L43f320.  v4:= 0I;
  #L43f322.  return v4;
  #L43f324.  call temp:= `size`(v3) @signature `Lr4/m;.size:()I` @kind virtual;
  #L43f32a.  v0:= temp;
  #L43f32c.  v1:= v3.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f330.  call temp:= `removeAll`(v1, v4) @signature `Ljava/util/Collection;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L43f336.  v4:= temp;
  #L43f338.  if v4 == 0 then goto L43f35a;
  #L43f33c.  v1:= v3.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f340.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L43f346.  v1:= temp;
  #L43f348.  v2:= v3.`r4.m.s` @type ^`r4.p` @kind object;
  #L43f34c.  v1:= v1 - v0 @kind int;
  #L43f34e.  call temp:= `k`(v2, v1) @signature `Lr4/p;.k:(Lr4/p;I)I` @kind static;
  #L43f354.  call `f`(v3) @signature `Lr4/m;.f:()V` @kind virtual;
  #L43f35a.  return v4;
}
procedure `boolean` `retainAll`(`r4.m` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lr4/m;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L43f36c.  call temp:= `requireNonNull`(v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L43f372.  call temp:= `size`(v3) @signature `Lr4/m;.size:()I` @kind virtual;
  #L43f378.  v0:= temp;
  #L43f37a.  v1:= v3.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f37e.  call temp:= `retainAll`(v1, v4) @signature `Ljava/util/Collection;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L43f384.  v4:= temp;
  #L43f386.  if v4 == 0 then goto L43f3a8;
  #L43f38a.  v1:= v3.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f38e.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L43f394.  v1:= temp;
  #L43f396.  v2:= v3.`r4.m.s` @type ^`r4.p` @kind object;
  #L43f39a.  v1:= v1 - v0 @kind int;
  #L43f39c.  call temp:= `k`(v2, v1) @signature `Lr4/p;.k:(Lr4/p;I)I` @kind static;
  #L43f3a2.  call `f`(v3) @signature `Lr4/m;.f:()V` @kind virtual;
  #L43f3a8.  return v4;
}
procedure `int` `size`(`r4.m` v1 @kind this) @signature `Lr4/m;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43f3e0.  call `zzb`(v1) @signature `Lr4/m;.zzb:()V` @kind virtual;
  #L43f3e6.  v0:= v1.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f3ea.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L43f3f0.  v0:= temp;
  #L43f3f2.  return v0;
}
procedure `java.lang.String` `toString`(`r4.m` v1 @kind this) @signature `Lr4/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43f404.  call `zzb`(v1) @signature `Lr4/m;.zzb:()V` @kind virtual;
  #L43f40a.  v0:= v1.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f40e.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L43f414.  v0:= temp @kind object;
  #L43f416.  return v0 @kind object;
}
procedure `void` `zzb`(`r4.m` v2 @kind this) @signature `Lr4/m;.zzb:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L43f4fc.  v0:= v2.`r4.m.q` @type ^`r4.m` @kind object;
  #L43f500.  if v0 == 0 then goto L43f528;
  #L43f504.  call `zzb`(v0) @signature `Lr4/m;.zzb:()V` @kind virtual;
  #L43f50a.  v0:= v2.`r4.m.q` @type ^`r4.m` @kind object;
  #L43f50e.  v0:= v0.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f512.  v1:= v2.`r4.m.r` @type ^`java.util.Collection` @kind object;
  #L43f516.  if v0 != v1 then goto L43f51c;
  #L43f51a.  goto L43f55c;
  #L43f51c.  v0:= new `java.util.ConcurrentModificationException`;
  #L43f520.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L43f526.  throw v0;
  #L43f528.  v0:= v2.`r4.m.p` @type ^`java.util.Collection` @kind object;
  #L43f52c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L43f532.  v0:= temp;
  #L43f534.  if v0 == 0 then goto L43f55c;
  #L43f538.  v0:= v2.`r4.m.s` @type ^`r4.p` @kind object;
  #L43f53c.  call temp:= `o`(v0) @signature `Lr4/p;.o:(Lr4/p;)Ljava/util/Map;` @kind static;
  #L43f542.  v0:= temp @kind object;
  #L43f544.  v1:= v2.`r4.m.o` @type ^`java.lang.Object` @kind object;
  #L43f548.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f54e.  v0:= temp @kind object;
  #L43f550.  v0:= (`java.util.Collection`) v0 @kind object;
  #L43f554.  if v0 == 0 then goto L43f55c;
  #L43f558.  v2.`r4.m.p` @type ^`java.util.Collection` := v0 @kind object;
  #L43f55c.  return @kind void;
}
