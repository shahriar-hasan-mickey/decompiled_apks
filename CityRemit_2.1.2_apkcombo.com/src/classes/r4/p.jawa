record `r4.p` @kind class @AccessFlag ABSTRACT extends `r4.r` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Map` `r4.p.q` @AccessFlag PRIVATE_TRANSIENT;
  `int` `r4.p.r` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`r4.p` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lr4/p;.<init>:(Ljava/util/Map;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L43faf8.  call `<init>`(v1) @signature `Lr4/r;.<init>:()V` @kind direct;
  #L43fafe.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L43fb04.  v0:= temp;
  #L43fb06.  if v0 == 0 then goto L43fb10;
  #L43fb0a.  v1.`r4.p.q` @type ^`java.util.Map` := v2 @kind object;
  #L43fb0e.  return @kind void;
  #L43fb10.  v2:= new `java.lang.IllegalArgumentException`;
  #L43fb14.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L43fb1a.  throw v2;
}
procedure `int` `i`(`r4.p` v2 @kind object) @signature `Lr4/p;.i:(Lr4/p;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L43f9c0.  v0:= v2.`r4.p.r` @type ^`int`;
  #L43f9c4.  v1:= v0 + 1;
  #L43f9c8.  v2.`r4.p.r` @type ^`int` := v1;
  #L43f9cc.  return v0;
}
procedure `int` `j`(`r4.p` v2 @kind object) @signature `Lr4/p;.j:(Lr4/p;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L43f9e0.  v0:= v2.`r4.p.r` @type ^`int`;
  #L43f9e4.  v1:= v0 + -1;
  #L43f9e8.  v2.`r4.p.r` @type ^`int` := v1;
  #L43f9ec.  return v0;
}
procedure `int` `k`(`r4.p` v1 @kind object, `int` v2 ) @signature `Lr4/p;.k:(Lr4/p;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L43fa00.  v0:= v1.`r4.p.r` @type ^`int`;
  #L43fa04.  v0:= v0 + v2 @kind int;
  #L43fa06.  v1.`r4.p.r` @type ^`int` := v0;
  #L43fa0a.  return v0;
}
procedure `int` `l`(`r4.p` v1 @kind object, `int` v2 ) @signature `Lr4/p;.l:(Lr4/p;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L43fa1c.  v0:= v1.`r4.p.r` @type ^`int`;
  #L43fa20.  v0:= v0 - v2 @kind int;
  #L43fa22.  v1.`r4.p.r` @type ^`int` := v0;
  #L43fa26.  return v0;
}
procedure `java.util.Map` `o`(`r4.p` v0 @kind object) @signature `Lr4/p;.o:(Lr4/p;)Ljava/util/Map;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L43faa0.  v0:= v0.`r4.p.q` @type ^`java.util.Map` @kind object;
  #L43faa4.  return v0 @kind object;
}
procedure `void` `p`(`r4.p` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lr4/p;.p:(Lr4/p;Ljava/lang/Object;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L43fb2c.  v0:= v1.`r4.p.q` @type ^`java.util.Map` @kind object;
  #L43fb30.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L43fb36.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43fb3c.  v2:= temp @kind object;
  #L43fb3e.  goto L43fb42;
  #L43fb40.  v2:= 0I;
  #L43fb42.  v2:= (`java.util.Collection`) v2 @kind object;
  #L43fb46.  if v2 == 0 then goto L43fb62;
  #L43fb4a.  call temp:= `size`(v2) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L43fb50.  v0:= temp;
  #L43fb52.  call `clear`(v2) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L43fb58.  v2:= v1.`r4.p.r` @type ^`int`;
  #L43fb5c.  v2:= v2 - v0 @kind int;
  #L43fb5e.  v1.`r4.p.r` @type ^`int` := v2;
  #L43fb62.  return @kind void;
  catch `java.lang.ClassCastException` @[L43fb36..L43fb3e] goto L43fb40;
  catch `java.lang.NullPointerException` @[L43fb36..L43fb3e] goto L43fb40;
}
procedure `boolean` `a`(`r4.p` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lr4/p;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L43f944.  v0:= v2.`r4.p.q` @type ^`java.util.Map` @kind object;
  #L43f948.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f94e.  v0:= temp @kind object;
  #L43f950.  v0:= (`java.util.Collection`) v0 @kind object;
  #L43f954.  v1:= 1I;
  #L43f956.  if v0 != 0 then goto L43f994;
  #L43f95a.  call temp:= `f`(v2) @signature `Lr4/p;.f:()Ljava/util/Collection;` @kind virtual;
  #L43f960.  v0:= temp @kind object;
  #L43f962.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L43f968.  v4:= temp;
  #L43f96a.  if v4 == 0 then goto L43f984;
  #L43f96e.  v4:= v2.`r4.p.r` @type ^`int`;
  #L43f972.  v4:= v4 + v1 @kind int;
  #L43f974.  v2.`r4.p.r` @type ^`int` := v4;
  #L43f978.  v4:= v2.`r4.p.q` @type ^`java.util.Map` @kind object;
  #L43f97c.  call temp:= `put`(v4, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f982.  return v1;
  #L43f984.  v3:= new `java.lang.AssertionError`;
  #L43f988.  v4:= "New Collection violated the Collection spec" @kind object;
  #L43f98c.  call `<init>`(v3, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L43f992.  throw v3;
  #L43f994.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L43f99a.  v3:= temp;
  #L43f99c.  if v3 == 0 then goto L43f9ac;
  #L43f9a0.  v3:= v2.`r4.p.r` @type ^`int`;
  #L43f9a4.  v3:= v3 + v1 @kind int;
  #L43f9a6.  v2.`r4.p.r` @type ^`int` := v3;
  #L43f9aa.  return v1;
  #L43f9ac.  v3:= 0I;
  #L43f9ae.  return v3;
}
procedure `java.util.Map` `c`(`r4.p` v2 @kind this) @signature `Lr4/p;.c:()Ljava/util/Map;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L43fab8.  v0:= new `r4.h`;
  #L43fabc.  v1:= v2.`r4.p.q` @type ^`java.util.Map` @kind object;
  #L43fac0.  call `<init>`(v0, v2, v1) @signature `Lr4/h;.<init>:(Lr4/p;Ljava/util/Map;)V` @kind direct;
  #L43fac6.  return v0 @kind object;
}
procedure `java.util.Set` `d`(`r4.p` v2 @kind this) @signature `Lr4/p;.d:()Ljava/util/Set;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L43fad8.  v0:= new `r4.j`;
  #L43fadc.  v1:= v2.`r4.p.q` @type ^`java.util.Map` @kind object;
  #L43fae0.  call `<init>`(v0, v2, v1) @signature `Lr4/j;.<init>:(Lr4/p;Ljava/util/Map;)V` @kind direct;
  #L43fae6.  return v0 @kind object;
}
procedure `java.util.Collection` `f`() @signature `Lr4/p;.f:()Ljava/util/Collection;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Collection` `h`(`java.lang.Object` v0 @kind object, `java.util.Collection` v1 @kind object) @signature `Lr4/p;.h:(Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Collection` `m`(`r4.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lr4/p;.m:(Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43fa38.  v0:= v1.`r4.p.q` @type ^`java.util.Map` @kind object;
  #L43fa3c.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43fa42.  v0:= temp @kind object;
  #L43fa44.  v0:= (`java.util.Collection`) v0 @kind object;
  #L43fa48.  if v0 != 0 then goto L43fa54;
  #L43fa4c.  call temp:= `f`(v1) @signature `Lr4/p;.f:()Ljava/util/Collection;` @kind virtual;
  #L43fa52.  v0:= temp @kind object;
  #L43fa54.  call temp:= `h`(v1, v2, v0) @signature `Lr4/p;.h:(Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;` @kind virtual;
  #L43fa5a.  v2:= temp @kind object;
  #L43fa5c.  return v2 @kind object;
}
procedure `java.util.List` `n`(`r4.p` v1 @kind this, `java.lang.Object` v2 @kind object, `java.util.List` v3 @kind object, `r4.m` v4 @kind object) @signature `Lr4/p;.n:(Ljava/lang/Object;Ljava/util/List;Lr4/m;)Ljava/util/List;` @AccessFlag FINAL {
    temp;
    v0;

  #L43fa70.  v0:= instanceof @variable v3 @type ^`java.util.RandomAccess` @kind boolean;
  #L43fa74.  if v0 == 0 then goto L43fa84;
  #L43fa78.  v0:= new `r4.k`;
  #L43fa7c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lr4/k;.<init>:(Lr4/p;Ljava/lang/Object;Ljava/util/List;Lr4/m;)V` @kind direct;
  #L43fa82.  goto L43fa8e;
  #L43fa84.  v0:= new `r4.o`;
  #L43fa88.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lr4/o;.<init>:(Lr4/p;Ljava/lang/Object;Ljava/util/List;Lr4/m;)V` @kind direct;
  #L43fa8e.  return v0 @kind object;
}
procedure `void` `q`(`r4.p` v2 @kind this) @signature `Lr4/p;.q:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L43fb84.  v0:= v2.`r4.p.q` @type ^`java.util.Map` @kind object;
  #L43fb88.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43fb8e.  v0:= temp @kind object;
  #L43fb90.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43fb96.  v0:= temp @kind object;
  #L43fb98.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43fb9e.  v1:= temp;
  #L43fba0.  if v1 == 0 then goto L43fbb8;
  #L43fba4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43fbaa.  v1:= temp @kind object;
  #L43fbac.  v1:= (`java.util.Collection`) v1 @kind object;
  #L43fbb0.  call `clear`(v1) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L43fbb6.  goto L43fb98;
  #L43fbb8.  v0:= v2.`r4.p.q` @type ^`java.util.Map` @kind object;
  #L43fbbc.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43fbc2.  v0:= 0I;
  #L43fbc4.  v2.`r4.p.r` @type ^`int` := v0;
  #L43fbc8.  return @kind void;
}
