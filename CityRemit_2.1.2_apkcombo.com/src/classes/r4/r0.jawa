record `r4.r0` @kind class @AccessFlag PUBLIC_ABSTRACT extends `r4.j0` @kind class, `java.util.Set` @kind interface {
  `r4.o0` `r4.r0.p` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`r4.r0` v0 @kind this) @signature `Lr4/r0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L442148.  call `<init>`(v0) @signature `Lr4/j0;.<init>:()V` @kind direct;
  #L44214e.  return @kind void;
}
procedure `boolean` `equals`(`r4.r0` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lr4/r0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44207c.  v0:= 1I;
  #L44207e.  if v5 == v4 then goto L4420bc;
  #L442082.  v1:= 0I;
  #L442084.  if v5 != v4 then goto L44208a;
  #L442088.  goto L4420bc;
  #L44208a.  v2:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L44208e.  if v2 == 0 then goto L4420ba;
  #L442092.  v5:= (`java.util.Set`) v5 @kind object;
  #L442096.  call temp:= `size`(v4) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L44209c.  v2:= temp;
  #L44209e.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L4420a4.  v3:= temp;
  #L4420a6.  if v2 != v3 then goto L4420ba;
  #L4420aa.  call temp:= `containsAll`(v4, v5) @signature `Ljava/util/Set;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L4420b0.  v5:= temp;
  #L4420b2.  if v5 != 0 then goto L4420b8;
  #L4420b6.  goto L4420ba;
  #L4420b8.  return v0;
  #L4420ba.  v0:= 0I;
  #L4420bc.  return v0;
  catch `java.lang.NullPointerException` @[L442096..L4420b2] goto L4420ba;
  catch `java.lang.ClassCastException` @[L442096..L4420b2] goto L4420ba;
}
procedure `int` `hashCode`(`r4.r0` v1 @kind this) @signature `Lr4/r0;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4420e0.  call temp:= `a`(v1) @signature `Lr4/p1;.a:(Ljava/util/Set;)I` @kind static;
  #L4420e6.  v0:= temp;
  #L4420e8.  return v0;
}
procedure `r4.o0` `n`(`r4.r0` v1 @kind this) @signature `Lr4/r0;.n:()Lr4/o0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4420fc.  v0:= v1.`r4.r0.p` @type ^`r4.o0` @kind object;
  #L442100.  if v0 != 0 then goto L442110;
  #L442104.  call temp:= `p`(v1) @signature `Lr4/r0;.p:()Lr4/o0;` @kind virtual;
  #L44210a.  v0:= temp @kind object;
  #L44210c.  v1.`r4.r0.p` @type ^`r4.o0` := v0 @kind object;
  #L442110.  return v0 @kind object;
}
procedure `r4.o0` `p`(`r4.r0` v1 @kind this) @signature `Lr4/r0;.p:()Lr4/o0;` @AccessFlag  {
    temp;
    v0;

  #L442124.  call temp:= `toArray`(v1) @signature `Lr4/j0;.toArray:()[Ljava/lang/Object;` @kind virtual;
  #L44212a.  v0:= temp @kind object;
  #L44212c.  call temp:= `u`(v0) @signature `Lr4/o0;.u:([Ljava/lang/Object;)Lr4/o0;` @kind static;
  #L442132.  v0:= temp @kind object;
  #L442134.  return v0 @kind object;
}
