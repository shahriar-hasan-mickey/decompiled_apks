record `r4.a1` @kind class @AccessFlag ABSTRACT extends `r4.o1` @kind class {
}
procedure `void` `<init>`(`r4.a1` v0 @kind this) @signature `Lr4/a1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44259c.  call `<init>`(v0) @signature `Lr4/o1;.<init>:()V` @kind direct;
  #L4425a2.  return @kind void;
}
procedure `java.util.Map` `b`() @signature `Lr4/a1;.b:()Ljava/util/Map;` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `clear`(`r4.a1` v1 @kind this) @signature `Lr4/a1;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4425b4.  call temp:= `b`(v1) @signature `Lr4/a1;.b:()Ljava/util/Map;` @kind virtual;
  #L4425ba.  v0:= temp @kind object;
  #L4425bc.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4425c2.  return @kind void;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Lr4/a1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`r4.a1` v1 @kind this) @signature `Lr4/a1;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L442430.  call temp:= `b`(v1) @signature `Lr4/a1;.b:()Ljava/util/Map;` @kind virtual;
  #L442436.  v0:= temp @kind object;
  #L442438.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L44243e.  v0:= temp;
  #L442440.  return v0;
}
procedure `boolean` `removeAll`(`r4.a1` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lr4/a1;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L442454.  call temp:= `requireNonNull`(v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44245a.  call temp:= `b`(v0, v1) @signature `Lr4/p1;.b:(Ljava/util/Set;Ljava/util/Collection;)Z` @kind static;
  #L442460.  v1:= temp;
  #L442462.  return v1;
  #L442464.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L44246a.  v1:= temp @kind object;
  #L44246c.  call temp:= `c`(v0, v1) @signature `Lr4/p1;.c:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L442472.  v1:= temp;
  #L442474.  return v1;
  catch `java.lang.UnsupportedOperationException` @[L44245a..L442462] goto L442464;
}
procedure `boolean` `retainAll`(`r4.a1` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lr4/a1;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L442498.  call temp:= `requireNonNull`(v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L44249e.  call temp:= `retainAll`(v3, v4) @signature `Lr4/o1;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L4424a4.  v4:= temp;
  #L4424a6.  return v4;
  #L4424a8.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L4424ae.  v0:= temp;
  #L4424b0.  v1:= new `java.util.HashSet`;
  #L4424b4.  v2:= 3I;
  #L4424b6.  if v0 >= v2 then goto L4424ca;
  #L4424ba.  v2:= "expectedSize" @kind object;
  #L4424be.  call temp:= `a`(v0, v2) @signature `Lr4/u;.a:(ILjava/lang/String;)I` @kind static;
  #L4424c4.  v0:= v0 + 1;
  #L4424c8.  goto L4424ea;
  #L4424ca.  v2:= 2.0F;
  #L4424ce.  if v0 >= v2 then goto L4424e4;
  #L4424d2.  v0:= (`float`) v0 @kind i2f;
  #L4424d4.  v2:= 0.75F;
  #L4424d8.  v0:= v0 / v2 @kind float;
  #L4424da.  v2:= 1.0F;
  #L4424de.  v0:= v0 + v2 @kind float;
  #L4424e0.  v0:= (`int`) v0 @kind f2i;
  #L4424e2.  goto L4424ea;
  #L4424e4.  v0:= 2147483647I;
  #L4424ea.  call `<init>`(v1, v0) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L4424f0.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4424f6.  v4:= temp @kind object;
  #L4424f8.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4424fe.  v0:= temp;
  #L442500.  if v0 == 0 then goto L442534;
  #L442504.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44250a.  v0:= temp @kind object;
  #L44250c.  call temp:= `contains`(v3, v0) @signature `Lr4/a1;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L442512.  v2:= temp;
  #L442514.  if v2 == 0 then goto L4424f8;
  #L442518.  v2:= instanceof @variable v0 @type ^`java.util.Map$Entry` @kind boolean;
  #L44251c.  if v2 == 0 then goto L4424f8;
  #L442520.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L442524.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L44252a.  v0:= temp @kind object;
  #L44252c.  call temp:= `add`(v1, v0) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L442532.  goto L4424f8;
  #L442534.  call temp:= `b`(v3) @signature `Lr4/a1;.b:()Ljava/util/Map;` @kind virtual;
  #L44253a.  v4:= temp @kind object;
  #L44253c.  v4:= (`r4.h`) v4 @kind object;
  #L442540.  v4:= v4.`r4.h.r` @type ^`r4.p` @kind object;
  #L442544.  call temp:= `g`(v4) @signature `Lr4/r;.g:()Ljava/util/Set;` @kind virtual;
  #L44254a.  v4:= temp @kind object;
  #L44254c.  call temp:= `retainAll`(v4, v1) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L442552.  v4:= temp;
  #L442554.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L44249e..L4424a6] goto L4424a8;
}
procedure `int` `size`(`r4.a1` v1 @kind this) @signature `Lr4/a1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L442578.  call temp:= `b`(v1) @signature `Lr4/a1;.b:()Ljava/util/Map;` @kind virtual;
  #L44257e.  v0:= temp @kind object;
  #L442580.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L442586.  v0:= temp;
  #L442588.  return v0;
}
