record `r4.j0` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@r4.j0.o` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lr4/j0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L441640.  v0:= 0I;
  #L441642.  v0:= new `java.lang.Object`[v0];
  #L441646.  `@@r4.j0.o` @type ^`java.lang.Object`[] := v0 @kind object;
  #L44164a.  return @kind void;
}
procedure `void` `<init>`(`r4.j0` v0 @kind this) @signature `Lr4/j0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44165c.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L441662.  return @kind void;
}
procedure `boolean` `add`(`r4.j0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lr4/j0;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4414c4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4414c8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4414ce.  throw v1;
}
procedure `boolean` `addAll`(`r4.j0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lr4/j0;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4414e0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4414e4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4414ea.  throw v1;
}
procedure `int` `b`(`java.lang.Object`[] v0 @kind object, `int` v1 ) @signature `Lr4/j0;.b:([Ljava/lang/Object;I)I` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `clear`(`r4.j0` v1 @kind this) @signature `Lr4/j0;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L441674.  v0:= new `java.lang.UnsupportedOperationException`;
  #L441678.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L44167e.  throw v0;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Lr4/j0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `f`(`r4.j0` v1 @kind this) @signature `Lr4/j0;.f:()I` @AccessFlag  {
    temp;
    v0;

  #L441550.  v0:= new `java.lang.UnsupportedOperationException`;
  #L441554.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L44155a.  throw v0;
}
procedure `int` `h`(`r4.j0` v1 @kind this) @signature `Lr4/j0;.h:()I` @AccessFlag  {
    temp;
    v0;

  #L44156c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L441570.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L441576.  throw v0;
}
procedure `java.lang.Object`[] `l`(`r4.j0` v1 @kind this) @signature `Lr4/j0;.l:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L44162c.  v0:= 0I;
  #L44162e.  return v0 @kind object;
}
procedure `boolean` `remove`(`r4.j0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lr4/j0;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4414fc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L441500.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L441506.  throw v1;
}
procedure `boolean` `removeAll`(`r4.j0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lr4/j0;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L441518.  v1:= new `java.lang.UnsupportedOperationException`;
  #L44151c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L441522.  throw v1;
}
procedure `boolean` `retainAll`(`r4.j0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lr4/j0;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L441534.  v1:= new `java.lang.UnsupportedOperationException`;
  #L441538.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L44153e.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`r4.j0` v1 @kind this) @signature `Lr4/j0;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L441588.  v0:= `@@r4.j0.o` @type ^`java.lang.Object`[] @kind object;
  #L44158c.  call temp:= `toArray`(v1, v0) @signature `Lr4/j0;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L441592.  v0:= temp @kind object;
  #L441594.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`r4.j0` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lr4/j0;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4415a8.  call temp:= `requireNonNull`(v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4415ae.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L4415b4.  v0:= temp;
  #L4415b6.  v1:= length @variable v4;
  #L4415b8.  if v1 >= v0 then goto L441608;
  #L4415bc.  call temp:= `l`(v3) @signature `Lr4/j0;.l:()[Ljava/lang/Object;` @kind virtual;
  #L4415c2.  v1:= temp @kind object;
  #L4415c4.  if v1 != 0 then goto L4415e6;
  #L4415c8.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4415ce.  v4:= temp @kind object;
  #L4415d0.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4415d6.  v4:= temp @kind object;
  #L4415d8.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4415de.  v4:= temp @kind object;
  #L4415e0.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L4415e4.  goto L441612;
  #L4415e6.  call temp:= `h`(v3) @signature `Lr4/j0;.h:()I` @kind virtual;
  #L4415ec.  v0:= temp;
  #L4415ee.  call temp:= `f`(v3) @signature `Lr4/j0;.f:()I` @kind virtual;
  #L4415f4.  v2:= temp;
  #L4415f6.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4415fc.  v4:= temp @kind object;
  #L4415fe.  call temp:= `copyOfRange`(v1, v0, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L441604.  v4:= temp @kind object;
  #L441606.  return v4 @kind object;
  #L441608.  if v1 <= v0 then goto L441612;
  #L44160c.  v1:= 0I;
  #L44160e.  v4[v0]:= v1 @kind object;
  #L441612.  v0:= 0I;
  #L441614.  call temp:= `b`(v3, v4, v0) @signature `Lr4/j0;.b:([Ljava/lang/Object;I)I` @kind virtual;
  #L44161a.  return v4 @kind object;
}
