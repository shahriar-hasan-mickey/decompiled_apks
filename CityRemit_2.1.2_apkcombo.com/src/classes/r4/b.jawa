record `r4.b` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Lr4/b;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43e418.  if v5 < 0 then goto L43e424;
  #L43e41c.  if v5 < v6 then goto L43e422;
  #L43e420.  goto L43e424;
  #L43e422.  return v5;
  #L43e424.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L43e428.  v0:= "index" @kind object;
  #L43e42c.  v1:= 1I;
  #L43e42e.  v2:= 0I;
  #L43e430.  v3:= 2I;
  #L43e432.  if v5 < 0 then goto L43e49c;
  #L43e436.  if v6 >= 0 then goto L43e46c;
  #L43e43a.  v5:= new `java.lang.IllegalArgumentException`;
  #L43e43e.  v7:= new `java.lang.StringBuilder`;
  #L43e442.  v0:= 26I;
  #L43e446.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L43e44c.  v0:= "negative size: " @kind object;
  #L43e450.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43e456.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L43e45c.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43e462.  v6:= temp @kind object;
  #L43e464.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43e46a.  throw v5;
  #L43e46c.  v4:= 3I;
  #L43e46e.  v4:= new `java.lang.Object`[v4];
  #L43e472.  v4[v2]:= v0 @kind object;
  #L43e476.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43e47c.  v5:= temp @kind object;
  #L43e47e.  v4[v1]:= v5 @kind object;
  #L43e482.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43e488.  v5:= temp @kind object;
  #L43e48a.  v4[v3]:= v5 @kind object;
  #L43e48e.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L43e492.  call temp:= `a`(v5, v4) @signature `Lr4/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43e498.  v5:= temp @kind object;
  #L43e49a.  goto L43e4bc;
  #L43e49c.  v6:= new `java.lang.Object`[v3];
  #L43e4a0.  v6[v2]:= v0 @kind object;
  #L43e4a4.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43e4aa.  v5:= temp @kind object;
  #L43e4ac.  v6[v1]:= v5 @kind object;
  #L43e4b0.  v5:= "%s (%s) must not be negative" @kind object;
  #L43e4b4.  call temp:= `a`(v5, v6) @signature `Lr4/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43e4ba.  v5:= temp @kind object;
  #L43e4bc.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43e4c2.  throw v7;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Lr4/b;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43e4d4.  if v1 < 0 then goto L43e4de;
  #L43e4d8.  if v1 > v2 then goto L43e4de;
  #L43e4dc.  return v1;
  #L43e4de.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L43e4e2.  v0:= "index" @kind object;
  #L43e4e6.  call temp:= `e`(v1, v2, v0) @signature `Lr4/b;.e:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L43e4ec.  v1:= temp @kind object;
  #L43e4ee.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43e4f4.  throw v3;
}
procedure `void` `c`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lr4/b;.c:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L43e648.  if v2 < 0 then goto L43e658;
  #L43e64c.  if v3 < v2 then goto L43e658;
  #L43e650.  if v3 <= v4 then goto L43e656;
  #L43e654.  goto L43e658;
  #L43e656.  return @kind void;
  #L43e658.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L43e65c.  if v2 < 0 then goto L43e6ac;
  #L43e660.  if v2 > v4 then goto L43e6ac;
  #L43e664.  if v3 < 0 then goto L43e69e;
  #L43e668.  if v3 <= v4 then goto L43e66e;
  #L43e66c.  goto L43e69e;
  #L43e66e.  v4:= 2I;
  #L43e670.  v4:= new `java.lang.Object`[v4];
  #L43e674.  v1:= 0I;
  #L43e676.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43e67c.  v3:= temp @kind object;
  #L43e67e.  v4[v1]:= v3 @kind object;
  #L43e682.  v3:= 1I;
  #L43e684.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43e68a.  v2:= temp @kind object;
  #L43e68c.  v4[v3]:= v2 @kind object;
  #L43e690.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L43e694.  call temp:= `a`(v2, v4) @signature `Lr4/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43e69a.  v2:= temp @kind object;
  #L43e69c.  goto L43e6b8;
  #L43e69e.  v2:= "end index" @kind object;
  #L43e6a2.  call temp:= `e`(v3, v4, v2) @signature `Lr4/b;.e:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L43e6a8.  v2:= temp @kind object;
  #L43e6aa.  goto L43e6b8;
  #L43e6ac.  v3:= "start index" @kind object;
  #L43e6b0.  call temp:= `e`(v2, v4, v3) @signature `Lr4/b;.e:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L43e6b6.  v2:= temp @kind object;
  #L43e6b8.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43e6be.  throw v0;
}
procedure `void` `d`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Lr4/b;.d:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L43e6d0.  if v0 == 0 then goto L43e6d6;
  #L43e6d4.  return @kind void;
  #L43e6d6.  v0:= new `java.lang.IllegalStateException`;
  #L43e6da.  v1:= (`java.lang.String`) v1 @kind object;
  #L43e6de.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43e6e4.  throw v0;
}
procedure `java.lang.String` `e`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Lr4/b;.e:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43e508.  v0:= 1I;
  #L43e50a.  v1:= 0I;
  #L43e50c.  v2:= 2I;
  #L43e50e.  if v4 >= 0 then goto L43e534;
  #L43e512.  v5:= new `java.lang.Object`[v2];
  #L43e516.  v5[v1]:= v6 @kind object;
  #L43e51a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43e520.  v4:= temp @kind object;
  #L43e522.  v5[v0]:= v4 @kind object;
  #L43e526.  v4:= "%s (%s) must not be negative" @kind object;
  #L43e52a.  call temp:= `a`(v4, v5) @signature `Lr4/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43e530.  v4:= temp @kind object;
  #L43e532.  return v4 @kind object;
  #L43e534.  if v5 < 0 then goto L43e568;
  #L43e538.  v3:= 3I;
  #L43e53a.  v3:= new `java.lang.Object`[v3];
  #L43e53e.  v3[v1]:= v6 @kind object;
  #L43e542.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43e548.  v4:= temp @kind object;
  #L43e54a.  v3[v0]:= v4 @kind object;
  #L43e54e.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43e554.  v4:= temp @kind object;
  #L43e556.  v3[v2]:= v4 @kind object;
  #L43e55a.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L43e55e.  call temp:= `a`(v4, v3) @signature `Lr4/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43e564.  v4:= temp @kind object;
  #L43e566.  return v4 @kind object;
  #L43e568.  v4:= new `java.lang.IllegalArgumentException`;
  #L43e56c.  v6:= new `java.lang.StringBuilder`;
  #L43e570.  v0:= 26I;
  #L43e574.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L43e57a.  v0:= "negative size: " @kind object;
  #L43e57e.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43e584.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L43e58a.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43e590.  v5:= temp @kind object;
  #L43e592.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43e598.  throw v4;
}
