record `r4.sd` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `r4.sd.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`r4.sd` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lr4/sd;.<init>:(Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L453818.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45381e.  v1:= "\n" @kind object;
  #L453822.  v0.`r4.sd.a` @type ^`java.lang.String` := v1 @kind object;
  #L453826.  return @kind void;
}
procedure `r4.sd` `a`(`java.lang.String` v1 @kind object) @signature `Lr4/sd;.a:(Ljava/lang/String;)Lr4/sd;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4537f8.  v1:= new `r4.sd`;
  #L4537fc.  v0:= "\n" @kind object;
  #L453800.  call `<init>`(v1, v0) @signature `Lr4/sd;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L453806.  return v1 @kind object;
}
procedure `java.lang.CharSequence` `c`(`java.lang.Object` v1 @kind object) @signature `Lr4/sd;.c:(Ljava/lang/Object;)Ljava/lang/CharSequence;` @AccessFlag STATIC_FINAL {
    temp;
    v0;

  #L453734.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L45373a.  v0:= instanceof @variable v1 @type ^`java.lang.CharSequence` @kind boolean;
  #L45373e.  if v0 == 0 then goto L453748;
  #L453742.  v1:= (`java.lang.CharSequence`) v1 @kind object;
  #L453746.  goto L453750;
  #L453748.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L45374e.  v1:= temp @kind object;
  #L453750.  return v1 @kind object;
}
procedure `java.lang.String` `b`(`r4.sd` v2 @kind this, `java.lang.Iterable` v3 @kind object) @signature `Lr4/sd;.b:(Ljava/lang/Iterable;)Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L453764.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45376a.  v3:= temp @kind object;
  #L45376c.  v0:= new `java.lang.StringBuilder`;
  #L453770.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L453776.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45377c.  v1:= temp;
  #L45377e.  if v1 == 0 then goto L4537c0;
  #L453782.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L453788.  v1:= temp @kind object;
  #L45378a.  call temp:= `c`(v1) @signature `Lr4/sd;.c:(Ljava/lang/Object;)Ljava/lang/CharSequence;` @kind static;
  #L453790.  v1:= temp @kind object;
  #L453792.  call temp:= `append`(v0, v1) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L453798.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45379e.  v1:= temp;
  #L4537a0.  if v1 == 0 then goto L4537c0;
  #L4537a4.  v1:= v2.`r4.sd.a` @type ^`java.lang.String` @kind object;
  #L4537a8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L4537ae.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4537b4.  v1:= temp @kind object;
  #L4537b6.  call temp:= `c`(v1) @signature `Lr4/sd;.c:(Ljava/lang/Object;)Ljava/lang/CharSequence;` @kind static;
  #L4537bc.  v1:= temp @kind object;
  #L4537be.  goto L453792;
  #L4537c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4537c6.  v3:= temp @kind object;
  #L4537c8.  return v3 @kind object;
  #L4537ca.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L4537cc.  v0:= new `java.lang.AssertionError`;
  #L4537d0.  call `<init>`(v0, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4537d6.  throw v0;
  catch `java.io.IOException` @[L453776..L4537be] goto L4537ca;
}
