record `r4.h` @kind class @AccessFlag FINAL extends `r4.e1` @kind class {
  `java.util.Map` `r4.h.q` @AccessFlag FINAL_TRANSIENT;
  `r4.p` `r4.h.r` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`r4.h` v0 @kind this, `r4.p` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Lr4/h;.<init>:(Lr4/p;Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43ee0c.  v0.`r4.h.r` @type ^`r4.p` := v1 @kind object;
  #L43ee10.  call `<init>`(v0) @signature `Lr4/e1;.<init>:()V` @kind direct;
  #L43ee16.  v0.`r4.h.q` @type ^`java.util.Map` := v2 @kind object;
  #L43ee1a.  return @kind void;
}
procedure `java.util.Set` `a`(`r4.h` v1 @kind this) @signature `Lr4/h;.a:()Ljava/util/Set;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L43edf0.  v0:= new `r4.f`;
  #L43edf4.  call `<init>`(v0, v1) @signature `Lr4/f;.<init>:(Lr4/h;)V` @kind direct;
  #L43edfa.  return v0 @kind object;
}
procedure `void` `clear`(`r4.h` v3 @kind this) @signature `Lr4/h;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L43ee2c.  v0:= v3.`r4.h.q` @type ^`java.util.Map` @kind object;
  #L43ee30.  v1:= v3.`r4.h.r` @type ^`r4.p` @kind object;
  #L43ee34.  call temp:= `o`(v1) @signature `Lr4/p;.o:(Lr4/p;)Ljava/util/Map;` @kind static;
  #L43ee3a.  v2:= temp @kind object;
  #L43ee3c.  if v0 != v2 then goto L43ee48;
  #L43ee40.  call `q`(v1) @signature `Lr4/p;.q:()V` @kind virtual;
  #L43ee46.  return @kind void;
  #L43ee48.  v0:= new `r4.g`;
  #L43ee4c.  call `<init>`(v0, v3) @signature `Lr4/g;.<init>:(Lr4/h;)V` @kind direct;
  #L43ee52.  call `a`(v0) @signature `Lr4/s0;.a:(Ljava/util/Iterator;)V` @kind static;
  #L43ee58.  return @kind void;
}
procedure `boolean` `containsKey`(`r4.h` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lr4/h;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43ec94.  v0:= v1.`r4.h.q` @type ^`java.util.Map` @kind object;
  #L43ec98.  call temp:= `b`(v0, v2) @signature `Lr4/f1;.b:(Ljava/util/Map;Ljava/lang/Object;)Z` @kind static;
  #L43ec9e.  v2:= temp;
  #L43eca0.  return v2;
}
procedure `boolean` `equals`(`r4.h` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lr4/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43ecb4.  if v1 == v2 then goto L43ecce;
  #L43ecb8.  v0:= v1.`r4.h.q` @type ^`java.util.Map` @kind object;
  #L43ecbc.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L43ecc2.  v2:= temp;
  #L43ecc4.  if v2 == 0 then goto L43ecca;
  #L43ecc8.  goto L43ecce;
  #L43ecca.  v2:= 0I;
  #L43eccc.  return v2;
  #L43ecce.  v2:= 1I;
  #L43ecd0.  return v2;
}
procedure `java.lang.Object` `get`(`r4.h` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lr4/h;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L43ed24.  v0:= v2.`r4.h.q` @type ^`java.util.Map` @kind object;
  #L43ed28.  call temp:= `a`(v0, v3) @signature `Lr4/f1;.a:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L43ed2e.  v0:= temp @kind object;
  #L43ed30.  v0:= (`java.util.Collection`) v0 @kind object;
  #L43ed34.  if v0 != 0 then goto L43ed3c;
  #L43ed38.  v3:= 0I;
  #L43ed3a.  return v3 @kind object;
  #L43ed3c.  v1:= v2.`r4.h.r` @type ^`r4.p` @kind object;
  #L43ed40.  call temp:= `h`(v1, v3, v0) @signature `Lr4/p;.h:(Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;` @kind virtual;
  #L43ed46.  v3:= temp @kind object;
  #L43ed48.  return v3 @kind object;
}
procedure `int` `hashCode`(`r4.h` v1 @kind this) @signature `Lr4/h;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43ece4.  v0:= v1.`r4.h.q` @type ^`java.util.Map` @kind object;
  #L43ece8.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L43ecee.  v0:= temp;
  #L43ecf0.  return v0;
}
procedure `java.util.Set` `keySet`(`r4.h` v1 @kind this) @signature `Lr4/h;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43edd0.  v0:= v1.`r4.h.r` @type ^`r4.p` @kind object;
  #L43edd4.  call temp:= `g`(v0) @signature `Lr4/r;.g:()Ljava/util/Set;` @kind virtual;
  #L43edda.  v0:= temp @kind object;
  #L43eddc.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`r4.h` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lr4/h;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L43ed5c.  v0:= v3.`r4.h.q` @type ^`java.util.Map` @kind object;
  #L43ed60.  call temp:= `remove`(v0, v4) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43ed66.  v4:= temp @kind object;
  #L43ed68.  v4:= (`java.util.Collection`) v4 @kind object;
  #L43ed6c.  if v4 != 0 then goto L43ed74;
  #L43ed70.  v4:= 0I;
  #L43ed72.  return v4 @kind object;
  #L43ed74.  v0:= v3.`r4.h.r` @type ^`r4.p` @kind object;
  #L43ed78.  call temp:= `f`(v0) @signature `Lr4/p;.f:()Ljava/util/Collection;` @kind virtual;
  #L43ed7e.  v0:= temp @kind object;
  #L43ed80.  call temp:= `addAll`(v0, v4) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L43ed86.  v1:= v3.`r4.h.r` @type ^`r4.p` @kind object;
  #L43ed8a.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L43ed90.  v2:= temp;
  #L43ed92.  call temp:= `l`(v1, v2) @signature `Lr4/p;.l:(Lr4/p;I)I` @kind static;
  #L43ed98.  call `clear`(v4) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L43ed9e.  return v0 @kind object;
}
procedure `int` `size`(`r4.h` v1 @kind this) @signature `Lr4/h;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43ed04.  v0:= v1.`r4.h.q` @type ^`java.util.Map` @kind object;
  #L43ed08.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L43ed0e.  v0:= temp;
  #L43ed10.  return v0;
}
procedure `java.lang.String` `toString`(`r4.h` v1 @kind this) @signature `Lr4/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43edb0.  v0:= v1.`r4.h.q` @type ^`java.util.Map` @kind object;
  #L43edb4.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L43edba.  v0:= temp @kind object;
  #L43edbc.  return v0 @kind object;
}
