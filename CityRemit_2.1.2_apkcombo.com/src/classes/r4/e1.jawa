record `r4.e1` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractMap` @kind class {
  `java.util.Set` `r4.e1.o` @AccessFlag PRIVATE_TRANSIENT;
  `java.util.Collection` `r4.e1.p` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`r4.e1` v0 @kind this) @signature `Lr4/e1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44297c.  call `<init>`(v0) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L442982.  return @kind void;
}
procedure `java.util.Set` `a`() @signature `Lr4/e1;.a:()Ljava/util/Set;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Set` `entrySet`(`r4.e1` v1 @kind this) @signature `Lr4/e1;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L442954.  v0:= v1.`r4.e1.o` @type ^`java.util.Set` @kind object;
  #L442958.  if v0 != 0 then goto L442968;
  #L44295c.  call temp:= `a`(v1) @signature `Lr4/e1;.a:()Ljava/util/Set;` @kind virtual;
  #L442962.  v0:= temp @kind object;
  #L442964.  v1.`r4.e1.o` @type ^`java.util.Set` := v0 @kind object;
  #L442968.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`r4.e1` v1 @kind this) @signature `Lr4/e1;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L44292c.  v0:= v1.`r4.e1.p` @type ^`java.util.Collection` @kind object;
  #L442930.  if v0 != 0 then goto L442942;
  #L442934.  v0:= new `r4.d1`;
  #L442938.  call `<init>`(v0, v1) @signature `Lr4/d1;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L44293e.  v1.`r4.e1.p` @type ^`java.util.Collection` := v0 @kind object;
  #L442942.  return v0 @kind object;
}
