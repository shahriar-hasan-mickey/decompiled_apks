record `yb.i$a` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface {
  `java.util.Iterator` `yb.i$a.o` @AccessFlag PRIVATE_FINAL;
  `yb.i` `yb.i$a.p` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`yb.i$a` v0 @kind this, `yb.i` v1 @kind object) @signature `Lyb/i$a;.<init>:(Lyb/i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f7efc.  v0.`yb.i$a.p` @type ^`yb.i` := v1 @kind object;
  #L4f7f00.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f7f06.  call temp:= `a`(v1) @signature `Lyb/i;.a:(Lyb/i;)Lyb/b;` @kind static;
  #L4f7f0c.  v1:= temp @kind object;
  #L4f7f0e.  call temp:= `iterator`(v1) @signature `Lyb/b;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f7f14.  v1:= temp @kind object;
  #L4f7f16.  v0.`yb.i$a.o` @type ^`java.util.Iterator` := v1 @kind object;
  #L4f7f1a.  return @kind void;
}
procedure `boolean` `hasNext`(`yb.i$a` v1 @kind this) @signature `Lyb/i$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f7ea8.  v0:= v1.`yb.i$a.o` @type ^`java.util.Iterator` @kind object;
  #L4f7eac.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f7eb2.  v0:= temp;
  #L4f7eb4.  return v0;
}
procedure `java.lang.Object` `next`(`yb.i$a` v2 @kind this) @signature `Lyb/i$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7ec8.  v0:= v2.`yb.i$a.p` @type ^`yb.i` @kind object;
  #L4f7ecc.  call temp:= `b`(v0) @signature `Lyb/i;.b:(Lyb/i;)Ltb/l;` @kind static;
  #L4f7ed2.  v0:= temp @kind object;
  #L4f7ed4.  v1:= v2.`yb.i$a.o` @type ^`java.util.Iterator` @kind object;
  #L4f7ed8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f7ede.  v1:= temp @kind object;
  #L4f7ee0.  call temp:= `invoke`(v0, v1) @signature `Ltb/l;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f7ee6.  v0:= temp @kind object;
  #L4f7ee8.  return v0 @kind object;
}
procedure `void` `remove`(`yb.i$a` v2 @kind this) @signature `Lyb/i$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7f2c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4f7f30.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L4f7f34.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f7f3a.  throw v0;
}
