record `yb.a` @kind class @AccessFlag PUBLIC_FINAL extends `yb.b` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `yb.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`yb.a` v1 @kind this, `yb.b` v2 @kind object) @signature `Lyb/a;.<init>:(Lyb/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f7cb0.  v0:= "sequence" @kind object;
  #L4f7cb4.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L4f7cba.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f7cc0.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f7cc4.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f7cca.  v1.`yb.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f7cce.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`yb.a` v2 @kind this) @signature `Lyb/a;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7c70.  v0:= v2.`yb.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7c74.  v1:= 0I;
  #L4f7c76.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f7c7c.  v0:= temp @kind object;
  #L4f7c7e.  v0:= (`yb.b`) v0 @kind object;
  #L4f7c82.  if v0 == 0 then goto L4f7c90;
  #L4f7c86.  call temp:= `iterator`(v0) @signature `Lyb/b;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f7c8c.  v0:= temp @kind object;
  #L4f7c8e.  return v0 @kind object;
  #L4f7c90.  v0:= new `java.lang.IllegalStateException`;
  #L4f7c94.  v1:= "This sequence can be consumed only once." @kind object;
  #L4f7c98.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f7c9e.  throw v0;
}
