record `x1.c` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int`[] `@@x1.c.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx1/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d0580.  v0:= 14I;
  #L4d0584.  v0:= new `int`[v0];
  #L4d0588.  goto L4d0594;
  #L4d058e.  `@@x1.c.a` @type ^`int`[] := v0 @kind object;
  #L4d0592.  return @kind void;
  #L4d0594.  v0:= (2002I, 2000I, 1920I, 1601I, 1600I, 1001I, 1000I, 960I, 800I, 800I, 480I, 400I, 400I, 2048I) @kind object;
  #L4d05d3.  goto L4d058e;
}
procedure `void` `a`(`int` v2 , `s3.z` v3 @kind object) @signature `Lx1/c;.a:(ILs3/z;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4d05e4.  v0:= 7I;
  #L4d05e6.  call `K`(v3, v0) @signature `Ls3/z;.K:(I)V` @kind virtual;
  #L4d05ec.  call temp:= `d`(v3) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L4d05f2.  v3:= temp @kind object;
  #L4d05f4.  v0:= 0I;
  #L4d05f6.  v1:= -84I;
  #L4d05fa.  v3[v0]:= v1 @kind byte;
  #L4d05fe.  v0:= 1I;
  #L4d0600.  v1:= 64I;
  #L4d0604.  v3[v0]:= v1 @kind byte;
  #L4d0608.  v0:= 2I;
  #L4d060a.  v1:= -1I;
  #L4d060c.  v3[v0]:= v1 @kind byte;
  #L4d0610.  v0:= 3I;
  #L4d0612.  v3[v0]:= v1 @kind byte;
  #L4d0616.  v0:= v2 ^> 16;
  #L4d061a.  v0:= v0 ^& 255;
  #L4d061e.  v0:= (`byte`) v0 @kind i2b;
  #L4d0620.  v1:= 4I;
  #L4d0622.  v3[v1]:= v0 @kind byte;
  #L4d0626.  v0:= v2 ^> 8;
  #L4d062a.  v0:= v0 ^& 255;
  #L4d062e.  v0:= (`byte`) v0 @kind i2b;
  #L4d0630.  v1:= 5I;
  #L4d0632.  v3[v1]:= v0 @kind byte;
  #L4d0636.  v2:= v2 ^& 255;
  #L4d063a.  v2:= (`byte`) v2 @kind i2b;
  #L4d063c.  v0:= 6I;
  #L4d063e.  v3[v0]:= v2 @kind byte;
  #L4d0642.  return @kind void;
}
procedure `v1.j1` `b`(`s3.z` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object, `z1.m` v4 @kind object) @signature `Lx1/c;.b:(Ls3/z;Ljava/lang/String;Ljava/lang/String;Lz1/m;)Lv1/j1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4d04fc.  v0:= 1I;
  #L4d04fe.  call `P`(v1, v0) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L4d0504.  call temp:= `C`(v1) @signature `Ls3/z;.C:()I` @kind virtual;
  #L4d050a.  v1:= temp;
  #L4d050c.  v1:= v1 ^& 32;
  #L4d0510.  v1:= v1 ^> 5;
  #L4d0514.  if v1 != v0 then goto L4d0520;
  #L4d0518.  v1:= 48000I;
  #L4d051e.  goto L4d0526;
  #L4d0520.  v1:= 44100I;
  #L4d0526.  v0:= new `v1.j1$b`;
  #L4d052a.  call `<init>`(v0) @signature `Lv1/j1$b;.<init>:()V` @kind direct;
  #L4d0530.  call temp:= `S`(v0, v2) @signature `Lv1/j1$b;.S:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L4d0536.  v2:= temp @kind object;
  #L4d0538.  v0:= "audio/ac4" @kind object;
  #L4d053c.  call temp:= `e0`(v2, v0) @signature `Lv1/j1$b;.e0:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L4d0542.  v2:= temp @kind object;
  #L4d0544.  v0:= 2I;
  #L4d0546.  call temp:= `H`(v2, v0) @signature `Lv1/j1$b;.H:(I)Lv1/j1$b;` @kind virtual;
  #L4d054c.  v2:= temp @kind object;
  #L4d054e.  call temp:= `f0`(v2, v1) @signature `Lv1/j1$b;.f0:(I)Lv1/j1$b;` @kind virtual;
  #L4d0554.  v1:= temp @kind object;
  #L4d0556.  call temp:= `M`(v1, v4) @signature `Lv1/j1$b;.M:(Lz1/m;)Lv1/j1$b;` @kind virtual;
  #L4d055c.  v1:= temp @kind object;
  #L4d055e.  call temp:= `V`(v1, v3) @signature `Lv1/j1$b;.V:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L4d0564.  v1:= temp @kind object;
  #L4d0566.  call temp:= `E`(v1) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L4d056c.  v1:= temp @kind object;
  #L4d056e.  return v1 @kind object;
}
procedure `int` `c`(`java.nio.ByteBuffer` v2 @kind object) @signature `Lx1/c;.c:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4d0404.  v0:= 16I;
  #L4d0408.  v0:= new `byte`[v0];
  #L4d040c.  call temp:= `position`(v2) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d0412.  v1:= temp;
  #L4d0414.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d041a.  call temp:= `position`(v2, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d0420.  v2:= new `s3.y`;
  #L4d0424.  call `<init>`(v2, v0) @signature `Ls3/y;.<init>:([B)V` @kind direct;
  #L4d042a.  call temp:= `d`(v2) @signature `Lx1/c;.d:(Ls3/y;)Lx1/c$b;` @kind static;
  #L4d0430.  v2:= temp @kind object;
  #L4d0432.  v2:= v2.`x1.c$b.d` @type ^`int`;
  #L4d0436.  return v2;
}
procedure `x1.c$b` `d`(`s3.y` v10 @kind object) @signature `Lx1/c;.d:(Ls3/y;)Lx1/c$b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4d0654.  v0:= 16I;
  #L4d0658.  call temp:= `h`(v10, v0) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d065e.  v1:= temp;
  #L4d0660.  call temp:= `h`(v10, v0) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d0666.  v0:= temp;
  #L4d0668.  v2:= 4I;
  #L4d066a.  v3:= 65535I;
  #L4d0670.  if v0 != v3 then goto L4d0684;
  #L4d0674.  v0:= 24I;
  #L4d0678.  call temp:= `h`(v10, v0) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d067e.  v0:= temp;
  #L4d0680.  v3:= 7I;
  #L4d0682.  goto L4d0686;
  #L4d0684.  v3:= 4I;
  #L4d0686.  v0:= v0 + v3 @kind int;
  #L4d0688.  v3:= 44097I;
  #L4d068e.  if v1 != v3 then goto L4d0696;
  #L4d0692.  v0:= v0 + 2;
  #L4d0696.  v7:= v0;
  #L4d0698.  v0:= 2I;
  #L4d069a.  call temp:= `h`(v10, v0) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d06a0.  v1:= temp;
  #L4d06a2.  v3:= 3I;
  #L4d06a4.  if v1 != v3 then goto L4d06b2;
  #L4d06a8.  call temp:= `f`(v10, v0) @signature `Lx1/c;.f:(Ls3/y;I)I` @kind static;
  #L4d06ae.  v4:= temp;
  #L4d06b0.  v1:= v1 + v4 @kind int;
  #L4d06b2.  v4:= v1;
  #L4d06b4.  v1:= 10I;
  #L4d06b8.  call temp:= `h`(v10, v1) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d06be.  v1:= temp;
  #L4d06c0.  call temp:= `g`(v10) @signature `Ls3/y;.g:()Z` @kind virtual;
  #L4d06c6.  v5:= temp;
  #L4d06c8.  if v5 == 0 then goto L4d06de;
  #L4d06cc.  call temp:= `h`(v10, v3) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d06d2.  v5:= temp;
  #L4d06d4.  if v5 <= 0 then goto L4d06de;
  #L4d06d8.  call `r`(v10, v0) @signature `Ls3/y;.r:(I)V` @kind virtual;
  #L4d06de.  call temp:= `g`(v10) @signature `Ls3/y;.g:()Z` @kind virtual;
  #L4d06e4.  v5:= temp;
  #L4d06e6.  v6:= 48000I;
  #L4d06ec.  v8:= 44100I;
  #L4d06f2.  if v5 == 0 then goto L4d06fe;
  #L4d06f6.  v9:= 48000I;
  #L4d06fc.  goto L4d0704;
  #L4d06fe.  v9:= 44100I;
  #L4d0704.  call temp:= `h`(v10, v2) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d070a.  v10:= temp;
  #L4d070c.  v5:= 0I;
  #L4d070e.  if v9 != v8 then goto L4d0726;
  #L4d0712.  v8:= 13I;
  #L4d0716.  if v10 != v8 then goto L4d0726;
  #L4d071a.  v0:= `@@x1.c.a` @type ^`int`[] @kind object;
  #L4d071e.  v10:= v0[v10];
  #L4d0722.  v8:= v10;
  #L4d0724.  goto L4d0786;
  #L4d0726.  if v9 != v6 then goto L4d0784;
  #L4d072a.  v6:= `@@x1.c.a` @type ^`int`[] @kind object;
  #L4d072e.  v8:= length @variable v6;
  #L4d0730.  if v10 >= v8 then goto L4d0784;
  #L4d0734.  v5:= v6[v10];
  #L4d0738.  v1:= v1 %% 5;
  #L4d073c.  v6:= 8I;
  #L4d0740.  v8:= 1I;
  #L4d0742.  if v1 == v8 then goto L4d0770;
  #L4d0746.  v8:= 11I;
  #L4d074a.  if v1 == v0 then goto L4d0766;
  #L4d074e.  if v1 == v3 then goto L4d0770;
  #L4d0752.  if v1 == v2 then goto L4d0758;
  #L4d0756.  goto L4d077a;
  #L4d0758.  if v10 == v3 then goto L4d077e;
  #L4d075c.  if v10 == v6 then goto L4d077e;
  #L4d0760.  if v10 != v8 then goto L4d077a;
  #L4d0764.  goto L4d077e;
  #L4d0766.  if v10 == v6 then goto L4d077e;
  #L4d076a.  if v10 != v8 then goto L4d077a;
  #L4d076e.  goto L4d077e;
  #L4d0770.  if v10 == v3 then goto L4d077e;
  #L4d0774.  if v10 != v6 then goto L4d077a;
  #L4d0778.  goto L4d077e;
  #L4d077a.  v8:= v5;
  #L4d077c.  goto L4d0786;
  #L4d077e.  v5:= v5 + 1;
  #L4d0782.  goto L4d077a;
  #L4d0784.  v8:= 0I;
  #L4d0786.  v10:= new `x1.c$b`;
  #L4d078a.  v5:= 2I;
  #L4d078c.  v0:= 0I;
  #L4d078e.  v3:= v10 @kind object;
  #L4d0790.  v6:= v9;
  #L4d0792.  v9:= v0 @kind object;
  #L4d0794.  call `<init>`(v3, v4, v5, v6, v7, v8, v9) @signature `Lx1/c$b;.<init>:(IIIIILx1/c$a;)V` @kind direct;
  #L4d079a.  return v10 @kind object;
}
procedure `int` `e`(`byte`[] v4 @kind object, `int` v5 ) @signature `Lx1/c;.e:([BI)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d0448.  v0:= length @variable v4;
  #L4d044a.  v1:= 7I;
  #L4d044c.  if v0 >= v1 then goto L4d0454;
  #L4d0450.  v4:= -1I;
  #L4d0452.  return v4;
  #L4d0454.  v0:= 2I;
  #L4d0456.  v0:= v4[v0] @kind byte;
  #L4d045a.  v0:= v0 ^& 255;
  #L4d045e.  v0:= v0 ^< 8;
  #L4d0462.  v2:= 3I;
  #L4d0464.  v2:= v4[v2] @kind byte;
  #L4d0468.  v2:= v2 ^& 255;
  #L4d046c.  v0:= v0 ^| v2 @kind int;
  #L4d046e.  v2:= 65535I;
  #L4d0474.  v3:= 4I;
  #L4d0476.  if v0 != v2 then goto L4d04a4;
  #L4d047a.  v0:= v4[v3] @kind byte;
  #L4d047e.  v0:= v0 ^& 255;
  #L4d0482.  v0:= v0 ^< 16;
  #L4d0486.  v2:= 5I;
  #L4d0488.  v2:= v4[v2] @kind byte;
  #L4d048c.  v2:= v2 ^& 255;
  #L4d0490.  v2:= v2 ^< 8;
  #L4d0494.  v0:= v0 ^| v2 @kind int;
  #L4d0496.  v2:= 6I;
  #L4d0498.  v4:= v4[v2] @kind byte;
  #L4d049c.  v4:= v4 ^& 255;
  #L4d04a0.  v0:= v0 ^| v4 @kind int;
  #L4d04a2.  goto L4d04a6;
  #L4d04a4.  v1:= 4I;
  #L4d04a6.  v4:= 44097I;
  #L4d04ac.  if v5 != v4 then goto L4d04b4;
  #L4d04b0.  v1:= v1 + 2;
  #L4d04b4.  v0:= v0 + v1 @kind int;
  #L4d04b6.  return v0;
}
procedure `int` `f`(`s3.y` v2 @kind object, `int` v3 ) @signature `Lx1/c;.f:(Ls3/y;I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4d04c8.  v0:= 0I;
  #L4d04ca.  call temp:= `h`(v2, v3) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d04d0.  v1:= temp;
  #L4d04d2.  v0:= v0 + v1 @kind int;
  #L4d04d4.  call temp:= `g`(v2) @signature `Ls3/y;.g:()Z` @kind virtual;
  #L4d04da.  v1:= temp;
  #L4d04dc.  if v1 != 0 then goto L4d04e2;
  #L4d04e0.  return v0;
  #L4d04e2.  v0:= v0 + 1;
  #L4d04e6.  v0:= v0 ^< v3 @kind int;
  #L4d04e8.  goto L4d04ca;
}
