record `x1.x` @kind class @AccessFlag FINAL extends `x1.w` @kind class {
  `int`[] `x1.x.i` @AccessFlag PRIVATE;
  `int`[] `x1.x.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x1.x` v0 @kind this) @signature `Lx1/x;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d2aa4.  call `<init>`(v0) @signature `Lx1/w;.<init>:()V` @kind direct;
  #L4d2aaa.  return @kind void;
}
procedure `void` `g`(`x1.x` v7 @kind this, `java.nio.ByteBuffer` v8 @kind object) @signature `Lx1/x;.g:(Ljava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4d2af4.  v0:= v7.`x1.x.j` @type ^`int`[] @kind object;
  #L4d2af8.  call temp:= `e`(v0) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4d2afe.  v0:= temp @kind object;
  #L4d2b00.  v0:= (`int`[]) v0 @kind object;
  #L4d2b04.  call temp:= `position`(v8) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d2b0a.  v1:= temp;
  #L4d2b0c.  call temp:= `limit`(v8) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d2b12.  v2:= temp;
  #L4d2b14.  v3:= v2 - v1 @kind int;
  #L4d2b18.  v4:= v7.`x1.w.b` @type ^`x1.f$a` @kind object;
  #L4d2b1c.  v4:= v4.`x1.f$a.d` @type ^`int`;
  #L4d2b20.  v3:= v3 / v4 @kind int;
  #L4d2b22.  v4:= v7.`x1.w.c` @type ^`x1.f$a` @kind object;
  #L4d2b26.  v4:= v4.`x1.f$a.d` @type ^`int`;
  #L4d2b2a.  v3:= v3 * v4 @kind int;
  #L4d2b2e.  call temp:= `m`(v7, v3) @signature `Lx1/w;.m:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d2b34.  v3:= temp @kind object;
  #L4d2b36.  if v1 >= v2 then goto L4d2b6c;
  #L4d2b3a.  v4:= length @variable v0;
  #L4d2b3c.  v5:= 0I;
  #L4d2b3e.  if v5 >= v4 then goto L4d2b60;
  #L4d2b42.  v6:= v0[v5];
  #L4d2b46.  v6:= v6 * 2;
  #L4d2b4a.  v6:= v6 + v1 @kind int;
  #L4d2b4c.  call temp:= `getShort`(v8, v6) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L4d2b52.  v6:= temp;
  #L4d2b54.  call temp:= `putShort`(v3, v6) @signature `Ljava/nio/ByteBuffer;.putShort:(S)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d2b5a.  v5:= v5 + 1;
  #L4d2b5e.  goto L4d2b3e;
  #L4d2b60.  v4:= v7.`x1.w.b` @type ^`x1.f$a` @kind object;
  #L4d2b64.  v4:= v4.`x1.f$a.d` @type ^`int`;
  #L4d2b68.  v1:= v1 + v4 @kind int;
  #L4d2b6a.  goto L4d2b36;
  #L4d2b6c.  call temp:= `position`(v8, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d2b72.  call temp:= `flip`(v3) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L4d2b78.  return @kind void;
}
procedure `x1.f$a` `i`(`x1.x` v8 @kind this, `x1.f$a` v9 @kind object) @signature `Lx1/x;.i:(Lx1/f$a;)Lx1/f$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4d2ba4.  v0:= v8.`x1.x.i` @type ^`int`[] @kind object;
  #L4d2ba8.  if v0 != 0 then goto L4d2bb2;
  #L4d2bac.  v9:= `@@x1.f$a.e` @type ^`x1.f$a` @kind object;
  #L4d2bb0.  return v9 @kind object;
  #L4d2bb2.  v1:= v9.`x1.f$a.c` @type ^`int`;
  #L4d2bb6.  v2:= 2I;
  #L4d2bb8.  if v1 != v2 then goto L4d2c1e;
  #L4d2bbc.  v1:= v9.`x1.f$a.b` @type ^`int`;
  #L4d2bc0.  v3:= length @variable v0;
  #L4d2bc2.  v4:= 1I;
  #L4d2bc4.  v5:= 0I;
  #L4d2bc6.  if v1 == v3 then goto L4d2bce;
  #L4d2bca.  v1:= 1I;
  #L4d2bcc.  goto L4d2bd0;
  #L4d2bce.  v1:= 0I;
  #L4d2bd0.  v3:= 0I;
  #L4d2bd2.  v6:= length @variable v0;
  #L4d2bd4.  if v3 >= v6 then goto L4d2c02;
  #L4d2bd8.  v6:= v0[v3];
  #L4d2bdc.  v7:= v9.`x1.f$a.b` @type ^`int`;
  #L4d2be0.  if v6 >= v7 then goto L4d2bf6;
  #L4d2be4.  if v6 == v3 then goto L4d2bec;
  #L4d2be8.  v6:= 1I;
  #L4d2bea.  goto L4d2bee;
  #L4d2bec.  v6:= 0I;
  #L4d2bee.  v1:= v1 ^| v6 @kind int;
  #L4d2bf0.  v3:= v3 + 1;
  #L4d2bf4.  goto L4d2bd2;
  #L4d2bf6.  v0:= new `x1.f$b`;
  #L4d2bfa.  call `<init>`(v0, v9) @signature `Lx1/f$b;.<init>:(Lx1/f$a;)V` @kind direct;
  #L4d2c00.  throw v0;
  #L4d2c02.  if v1 == 0 then goto L4d2c18;
  #L4d2c06.  v1:= new `x1.f$a`;
  #L4d2c0a.  v9:= v9.`x1.f$a.a` @type ^`int`;
  #L4d2c0e.  v0:= length @variable v0;
  #L4d2c10.  call `<init>`(v1, v9, v0, v2) @signature `Lx1/f$a;.<init>:(III)V` @kind direct;
  #L4d2c16.  goto L4d2c1c;
  #L4d2c18.  v1:= `@@x1.f$a.e` @type ^`x1.f$a` @kind object;
  #L4d2c1c.  return v1 @kind object;
  #L4d2c1e.  v0:= new `x1.f$b`;
  #L4d2c22.  call `<init>`(v0, v9) @signature `Lx1/f$b;.<init>:(Lx1/f$a;)V` @kind direct;
  #L4d2c28.  throw v0;
}
procedure `void` `j`(`x1.x` v1 @kind this) @signature `Lx1/x;.j:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4d2abc.  v0:= v1.`x1.x.i` @type ^`int`[] @kind object;
  #L4d2ac0.  v1.`x1.x.j` @type ^`int`[] := v0 @kind object;
  #L4d2ac4.  return @kind void;
}
procedure `void` `l`(`x1.x` v1 @kind this) @signature `Lx1/x;.l:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4d2ad8.  v0:= 0I;
  #L4d2ada.  v1.`x1.x.j` @type ^`int`[] := v0 @kind object;
  #L4d2ade.  v1.`x1.x.i` @type ^`int`[] := v0 @kind object;
  #L4d2ae2.  return @kind void;
}
procedure `void` `n`(`x1.x` v0 @kind this, `int`[] v1 @kind object) @signature `Lx1/x;.n:([I)V` @AccessFlag PUBLIC {
    temp;

  #L4d2b8c.  v0.`x1.x.i` @type ^`int`[] := v1 @kind object;
  #L4d2b90.  return @kind void;
}
