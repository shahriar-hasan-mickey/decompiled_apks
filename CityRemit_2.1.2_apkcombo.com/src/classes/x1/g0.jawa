record `x1.g0` @kind class @AccessFlag PUBLIC_FINAL extends `x1.w` @kind class {
  `long` `x1.g0.i` @AccessFlag PRIVATE_FINAL;
  `long` `x1.g0.j` @AccessFlag PRIVATE_FINAL;
  `short` `x1.g0.k` @AccessFlag PRIVATE_FINAL;
  `int` `x1.g0.l` @AccessFlag PRIVATE;
  `boolean` `x1.g0.m` @AccessFlag PRIVATE;
  `byte`[] `x1.g0.n` @AccessFlag PRIVATE;
  `byte`[] `x1.g0.o` @AccessFlag PRIVATE;
  `int` `x1.g0.p` @AccessFlag PRIVATE;
  `int` `x1.g0.q` @AccessFlag PRIVATE;
  `int` `x1.g0.r` @AccessFlag PRIVATE;
  `boolean` `x1.g0.s` @AccessFlag PRIVATE;
  `long` `x1.g0.t` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x1.g0` v6 @kind this) @signature `Lx1/g0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d7c94.  v1:= 150000L;
  #L4d7c9a.  v3:= 20000L;
  #L4d7c9e.  v5:= 1024I;
  #L4d7ca2.  v0:= v6 @kind object;
  #L4d7ca4.  call `<init>`(v0, v1, v3, v5) @signature `Lx1/g0;.<init>:(JJS)V` @kind direct;
  #L4d7caa.  return @kind void;
}
procedure `void` `<init>`(`x1.g0` v1 @kind this, `long` v2 , `long` v4 , `short` v6 ) @signature `Lx1/g0;.<init>:(JJS)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d7cbc.  call `<init>`(v1) @signature `Lx1/w;.<init>:()V` @kind direct;
  #L4d7cc2.  v0:= lcmp(v4, v2);
  #L4d7cc6.  if v0 > 0 then goto L4d7cce;
  #L4d7cca.  v0:= 1I;
  #L4d7ccc.  goto L4d7cd0;
  #L4d7cce.  v0:= 0I;
  #L4d7cd0.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L4d7cd6.  v1.`x1.g0.i` @type ^`long` := v2 @kind wide;
  #L4d7cda.  v1.`x1.g0.j` @type ^`long` := v4 @kind wide;
  #L4d7cde.  v1.`x1.g0.k` @type ^`short` := v6 @kind char;
  #L4d7ce2.  v2:= `@@s3.l0.f` @type ^`byte`[] @kind object;
  #L4d7ce6.  v1.`x1.g0.n` @type ^`byte`[] := v2 @kind object;
  #L4d7cea.  v1.`x1.g0.o` @type ^`byte`[] := v2 @kind object;
  #L4d7cee.  return @kind void;
}
procedure `int` `n`(`x1.g0` v2 @kind this, `long` v3 ) @signature `Lx1/g0;.n:(J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4d7b98.  v0:= v2.`x1.w.b` @type ^`x1.f$a` @kind object;
  #L4d7b9c.  v0:= v0.`x1.f$a.a` @type ^`int`;
  #L4d7ba0.  v0:= (`long`) v0 @kind i2l;
  #L4d7ba2.  v3:= v3 * v0 @kind long;
  #L4d7ba6.  v0:= 1000000L;
  #L4d7bac.  v3:= v3 / v0 @kind long;
  #L4d7bae.  v4:= (`int`) v3 @kind l2i;
  #L4d7bb0.  return v4;
}
procedure `int` `o`(`x1.g0` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object) @signature `Lx1/g0;.o:(Ljava/nio/ByteBuffer;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4d7bc4.  call temp:= `limit`(v4) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d7bca.  v0:= temp;
  #L4d7bcc.  v0:= v0 + -2;
  #L4d7bd0.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d7bd6.  v1:= temp;
  #L4d7bd8.  if v0 < v1 then goto L4d7c08;
  #L4d7bdc.  call temp:= `getShort`(v4, v0) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L4d7be2.  v1:= temp;
  #L4d7be4.  call temp:= `abs`(v1) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L4d7bea.  v1:= temp;
  #L4d7bec.  v2:= v3.`x1.g0.k` @type ^`short` @kind short;
  #L4d7bf0.  if v1 <= v2 then goto L4d7c02;
  #L4d7bf4.  v4:= v3.`x1.g0.l` @type ^`int`;
  #L4d7bf8.  v0:= v0 / v4 @kind int;
  #L4d7bfa.  v0:= v0 * v4 @kind int;
  #L4d7bfe.  v0:= v0 + v4 @kind int;
  #L4d7c00.  return v0;
  #L4d7c02.  v0:= v0 + -2;
  #L4d7c06.  goto L4d7bd0;
  #L4d7c08.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d7c0e.  v4:= temp;
  #L4d7c10.  return v4;
}
procedure `int` `p`(`x1.g0` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object) @signature `Lx1/g0;.p:(Ljava/nio/ByteBuffer;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4d7c24.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d7c2a.  v0:= temp;
  #L4d7c2c.  call temp:= `limit`(v4) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d7c32.  v1:= temp;
  #L4d7c34.  if v0 >= v1 then goto L4d7c62;
  #L4d7c38.  call temp:= `getShort`(v4, v0) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L4d7c3e.  v1:= temp;
  #L4d7c40.  call temp:= `abs`(v1) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L4d7c46.  v1:= temp;
  #L4d7c48.  v2:= v3.`x1.g0.k` @type ^`short` @kind short;
  #L4d7c4c.  if v1 <= v2 then goto L4d7c5c;
  #L4d7c50.  v4:= v3.`x1.g0.l` @type ^`int`;
  #L4d7c54.  v0:= v0 / v4 @kind int;
  #L4d7c56.  v4:= v4 * v0 @kind int;
  #L4d7c5a.  return v4;
  #L4d7c5c.  v0:= v0 + 2;
  #L4d7c60.  goto L4d7c2c;
  #L4d7c62.  call temp:= `limit`(v4) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d7c68.  v4:= temp;
  #L4d7c6a.  return v4;
}
procedure `void` `r`(`x1.g0` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object) @signature `Lx1/g0;.r:(Ljava/nio/ByteBuffer;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4d7e2c.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4d7e32.  v0:= temp;
  #L4d7e34.  call temp:= `m`(v2, v0) @signature `Lx1/w;.m:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7e3a.  v1:= temp @kind object;
  #L4d7e3c.  call temp:= `put`(v1, v3) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7e42.  v3:= temp @kind object;
  #L4d7e44.  call temp:= `flip`(v3) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L4d7e4a.  if v0 <= 0 then goto L4d7e54;
  #L4d7e4e.  v3:= 1I;
  #L4d7e50.  v2.`x1.g0.s` @type ^`boolean` := v3 @kind boolean;
  #L4d7e54.  return @kind void;
}
procedure `void` `s`(`x1.g0` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lx1/g0;.s:([BI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4d7df8.  call temp:= `m`(v2, v4) @signature `Lx1/w;.m:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7dfe.  v0:= temp @kind object;
  #L4d7e00.  v1:= 0I;
  #L4d7e02.  call temp:= `put`(v0, v3, v1, v4) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7e08.  v3:= temp @kind object;
  #L4d7e0a.  call temp:= `flip`(v3) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L4d7e10.  if v4 <= 0 then goto L4d7e1a;
  #L4d7e14.  v3:= 1I;
  #L4d7e16.  v2.`x1.g0.s` @type ^`boolean` := v3 @kind boolean;
  #L4d7e1a.  return @kind void;
}
procedure `void` `t`(`x1.g0` v9 @kind this, `java.nio.ByteBuffer` v10 @kind object) @signature `Lx1/g0;.t:(Ljava/nio/ByteBuffer;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d7e68.  call temp:= `limit`(v10) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d7e6e.  v0:= temp;
  #L4d7e70.  call temp:= `p`(v9, v10) @signature `Lx1/g0;.p:(Ljava/nio/ByteBuffer;)I` @kind direct;
  #L4d7e76.  v1:= temp;
  #L4d7e78.  call temp:= `position`(v10) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d7e7e.  v2:= temp;
  #L4d7e80.  v2:= v1 - v2 @kind int;
  #L4d7e84.  v3:= v9.`x1.g0.n` @type ^`byte`[] @kind object;
  #L4d7e88.  v4:= length @variable v3;
  #L4d7e8a.  v5:= v9.`x1.g0.q` @type ^`int`;
  #L4d7e8e.  v4:= v4 - v5 @kind int;
  #L4d7e90.  v6:= 0I;
  #L4d7e92.  if v1 >= v0 then goto L4d7eaa;
  #L4d7e96.  if v2 >= v4 then goto L4d7eaa;
  #L4d7e9a.  call `s`(v9, v3, v5) @signature `Lx1/g0;.s:([BI)V` @kind direct;
  #L4d7ea0.  v9.`x1.g0.q` @type ^`int` := v6;
  #L4d7ea4.  v9.`x1.g0.p` @type ^`int` := v6;
  #L4d7ea8.  goto L4d7f4e;
  #L4d7eaa.  call temp:= `min`(v2, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4d7eb0.  v1:= temp;
  #L4d7eb2.  call temp:= `position`(v10) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d7eb8.  v2:= temp;
  #L4d7eba.  v2:= v2 + v1 @kind int;
  #L4d7ebc.  call temp:= `limit`(v10, v2) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d7ec2.  v2:= v9.`x1.g0.n` @type ^`byte`[] @kind object;
  #L4d7ec6.  v3:= v9.`x1.g0.q` @type ^`int`;
  #L4d7eca.  call temp:= `get`(v10, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7ed0.  v2:= v9.`x1.g0.q` @type ^`int`;
  #L4d7ed4.  v2:= v2 + v1 @kind int;
  #L4d7ed6.  v9.`x1.g0.q` @type ^`int` := v2;
  #L4d7eda.  v1:= v9.`x1.g0.n` @type ^`byte`[] @kind object;
  #L4d7ede.  v3:= length @variable v1;
  #L4d7ee0.  if v2 != v3 then goto L4d7f48;
  #L4d7ee4.  v3:= v9.`x1.g0.s` @type ^`boolean` @kind boolean;
  #L4d7ee8.  v4:= 2I;
  #L4d7eea.  if v3 == 0 then goto L4d7f1a;
  #L4d7eee.  v2:= v9.`x1.g0.r` @type ^`int`;
  #L4d7ef2.  call `s`(v9, v1, v2) @signature `Lx1/g0;.s:([BI)V` @kind direct;
  #L4d7ef8.  v1:= v9.`x1.g0.t` @type ^`long` @kind wide;
  #L4d7efc.  v3:= v9.`x1.g0.q` @type ^`int`;
  #L4d7f00.  v5:= v9.`x1.g0.r` @type ^`int`;
  #L4d7f04.  v5:= v5 * 2;
  #L4d7f08.  v3:= v3 - v5 @kind int;
  #L4d7f0a.  v5:= v9.`x1.g0.l` @type ^`int`;
  #L4d7f0e.  v3:= v3 / v5 @kind int;
  #L4d7f10.  v7:= (`long`) v3 @kind i2l;
  #L4d7f12.  v1:= v1 + v7 @kind long;
  #L4d7f14.  v9.`x1.g0.t` @type ^`long` := v1 @kind wide;
  #L4d7f18.  goto L4d7f32;
  #L4d7f1a.  v7:= v9.`x1.g0.t` @type ^`long` @kind wide;
  #L4d7f1e.  v1:= v9.`x1.g0.r` @type ^`int`;
  #L4d7f22.  v2:= v2 - v1 @kind int;
  #L4d7f24.  v1:= v9.`x1.g0.l` @type ^`int`;
  #L4d7f28.  v2:= v2 / v1 @kind int;
  #L4d7f2a.  v1:= (`long`) v2 @kind i2l;
  #L4d7f2c.  v7:= v7 + v1 @kind long;
  #L4d7f2e.  v9.`x1.g0.t` @type ^`long` := v7 @kind wide;
  #L4d7f32.  v1:= v9.`x1.g0.n` @type ^`byte`[] @kind object;
  #L4d7f36.  v2:= v9.`x1.g0.q` @type ^`int`;
  #L4d7f3a.  call `x`(v9, v10, v1, v2) @signature `Lx1/g0;.x:(Ljava/nio/ByteBuffer;[BI)V` @kind direct;
  #L4d7f40.  v9.`x1.g0.q` @type ^`int` := v6;
  #L4d7f44.  v9.`x1.g0.p` @type ^`int` := v4;
  #L4d7f48.  call temp:= `limit`(v10, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d7f4e.  return @kind void;
}
procedure `void` `u`(`x1.g0` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object) @signature `Lx1/g0;.u:(Ljava/nio/ByteBuffer;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4d7f60.  call temp:= `limit`(v4) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d7f66.  v0:= temp;
  #L4d7f68.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d7f6e.  v1:= temp;
  #L4d7f70.  v2:= v3.`x1.g0.n` @type ^`byte`[] @kind object;
  #L4d7f74.  v2:= length @variable v2;
  #L4d7f76.  v1:= v1 + v2 @kind int;
  #L4d7f78.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4d7f7e.  v1:= temp;
  #L4d7f80.  call temp:= `limit`(v4, v1) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d7f86.  call temp:= `o`(v3, v4) @signature `Lx1/g0;.o:(Ljava/nio/ByteBuffer;)I` @kind direct;
  #L4d7f8c.  v1:= temp;
  #L4d7f8e.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d7f94.  v2:= temp;
  #L4d7f96.  if v1 != v2 then goto L4d7fa2;
  #L4d7f9a.  v1:= 1I;
  #L4d7f9c.  v3.`x1.g0.p` @type ^`int` := v1;
  #L4d7fa0.  goto L4d7fae;
  #L4d7fa2.  call temp:= `limit`(v4, v1) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d7fa8.  call `r`(v3, v4) @signature `Lx1/g0;.r:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L4d7fae.  call temp:= `limit`(v4, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d7fb4.  return @kind void;
}
procedure `void` `v`(`x1.g0` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lx1/g0;.v:(Ljava/nio/ByteBuffer;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d7fc8.  call temp:= `limit`(v7) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d7fce.  v0:= temp;
  #L4d7fd0.  call temp:= `p`(v6, v7) @signature `Lx1/g0;.p:(Ljava/nio/ByteBuffer;)I` @kind direct;
  #L4d7fd6.  v1:= temp;
  #L4d7fd8.  call temp:= `limit`(v7, v1) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d7fde.  v2:= v6.`x1.g0.t` @type ^`long` @kind wide;
  #L4d7fe2.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4d7fe8.  v4:= temp;
  #L4d7fea.  v5:= v6.`x1.g0.l` @type ^`int`;
  #L4d7fee.  v4:= v4 / v5 @kind int;
  #L4d7ff0.  v4:= (`long`) v4 @kind i2l;
  #L4d7ff2.  v2:= v2 + v4 @kind long;
  #L4d7ff4.  v6.`x1.g0.t` @type ^`long` := v2 @kind wide;
  #L4d7ff8.  v2:= v6.`x1.g0.o` @type ^`byte`[] @kind object;
  #L4d7ffc.  v3:= v6.`x1.g0.r` @type ^`int`;
  #L4d8000.  call `x`(v6, v7, v2, v3) @signature `Lx1/g0;.x:(Ljava/nio/ByteBuffer;[BI)V` @kind direct;
  #L4d8006.  if v1 >= v0 then goto L4d8024;
  #L4d800a.  v1:= v6.`x1.g0.o` @type ^`byte`[] @kind object;
  #L4d800e.  v2:= v6.`x1.g0.r` @type ^`int`;
  #L4d8012.  call `s`(v6, v1, v2) @signature `Lx1/g0;.s:([BI)V` @kind direct;
  #L4d8018.  v1:= 0I;
  #L4d801a.  v6.`x1.g0.p` @type ^`int` := v1;
  #L4d801e.  call temp:= `limit`(v7, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d8024.  return @kind void;
}
procedure `void` `x`(`x1.g0` v4 @kind this, `java.nio.ByteBuffer` v5 @kind object, `byte`[] v6 @kind object, `int` v7 ) @signature `Lx1/g0;.x:(Ljava/nio/ByteBuffer;[BI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d80b4.  call temp:= `remaining`(v5) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4d80ba.  v0:= temp;
  #L4d80bc.  v1:= v4.`x1.g0.r` @type ^`int`;
  #L4d80c0.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4d80c6.  v0:= temp;
  #L4d80c8.  v1:= v4.`x1.g0.r` @type ^`int`;
  #L4d80cc.  v1:= v1 - v0 @kind int;
  #L4d80ce.  v7:= v7 - v1 @kind int;
  #L4d80d0.  v2:= v4.`x1.g0.o` @type ^`byte`[] @kind object;
  #L4d80d4.  v3:= 0I;
  #L4d80d6.  call `arraycopy`(v6, v7, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4d80dc.  call temp:= `limit`(v5) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d80e2.  v6:= temp;
  #L4d80e4.  v6:= v6 - v0 @kind int;
  #L4d80e6.  call temp:= `position`(v5, v6) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d80ec.  v6:= v4.`x1.g0.o` @type ^`byte`[] @kind object;
  #L4d80f0.  call temp:= `get`(v5, v6, v1, v0) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d80f6.  return @kind void;
}
procedure `boolean` `a`(`x1.g0` v1 @kind this) @signature `Lx1/g0;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7b80.  v0:= v1.`x1.g0.m` @type ^`boolean` @kind boolean;
  #L4d7b84.  return v0;
}
procedure `void` `g`(`x1.g0` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object) @signature `Lx1/g0;.g:(Ljava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d8038.  call temp:= `hasRemaining`(v3) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L4d803e.  v0:= temp;
  #L4d8040.  if v0 == 0 then goto L4d8088;
  #L4d8044.  call temp:= `h`(v2) @signature `Lx1/w;.h:()Z` @kind virtual;
  #L4d804a.  v0:= temp;
  #L4d804c.  if v0 != 0 then goto L4d8088;
  #L4d8050.  v0:= v2.`x1.g0.p` @type ^`int`;
  #L4d8054.  if v0 == 0 then goto L4d8080;
  #L4d8058.  v1:= 1I;
  #L4d805a.  if v0 == v1 then goto L4d8078;
  #L4d805e.  v1:= 2I;
  #L4d8060.  if v0 != v1 then goto L4d806c;
  #L4d8064.  call `v`(v2, v3) @signature `Lx1/g0;.v:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L4d806a.  goto L4d8038;
  #L4d806c.  v3:= new `java.lang.IllegalStateException`;
  #L4d8070.  call `<init>`(v3) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L4d8076.  throw v3;
  #L4d8078.  call `t`(v2, v3) @signature `Lx1/g0;.t:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L4d807e.  goto L4d8038;
  #L4d8080.  call `u`(v2, v3) @signature `Lx1/g0;.u:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L4d8086.  goto L4d8038;
  #L4d8088.  return @kind void;
}
procedure `x1.f$a` `i`(`x1.g0` v2 @kind this, `x1.f$a` v3 @kind object) @signature `Lx1/g0;.i:(Lx1/f$a;)Lx1/f$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d8108.  v0:= v3.`x1.f$a.c` @type ^`int`;
  #L4d810c.  v1:= 2I;
  #L4d810e.  if v0 != v1 then goto L4d8122;
  #L4d8112.  v0:= v2.`x1.g0.m` @type ^`boolean` @kind boolean;
  #L4d8116.  if v0 == 0 then goto L4d811c;
  #L4d811a.  goto L4d8120;
  #L4d811c.  v3:= `@@x1.f$a.e` @type ^`x1.f$a` @kind object;
  #L4d8120.  return v3 @kind object;
  #L4d8122.  v0:= new `x1.f$b`;
  #L4d8126.  call `<init>`(v0, v3) @signature `Lx1/f$b;.<init>:(Lx1/f$a;)V` @kind direct;
  #L4d812c.  throw v0;
}
procedure `void` `j`(`x1.g0` v3 @kind this) @signature `Lx1/g0;.j:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4d7d00.  v0:= v3.`x1.g0.m` @type ^`boolean` @kind boolean;
  #L4d7d04.  if v0 == 0 then goto L4d7d64;
  #L4d7d08.  v0:= v3.`x1.w.b` @type ^`x1.f$a` @kind object;
  #L4d7d0c.  v0:= v0.`x1.f$a.d` @type ^`int`;
  #L4d7d10.  v3.`x1.g0.l` @type ^`int` := v0;
  #L4d7d14.  v0:= v3.`x1.g0.i` @type ^`long` @kind wide;
  #L4d7d18.  call temp:= `n`(v3, v0) @signature `Lx1/g0;.n:(J)I` @kind direct;
  #L4d7d1e.  v0:= temp;
  #L4d7d20.  v1:= v3.`x1.g0.l` @type ^`int`;
  #L4d7d24.  v0:= v0 * v1 @kind int;
  #L4d7d28.  v1:= v3.`x1.g0.n` @type ^`byte`[] @kind object;
  #L4d7d2c.  v1:= length @variable v1;
  #L4d7d2e.  if v1 == v0 then goto L4d7d3a;
  #L4d7d32.  v0:= new `byte`[v0];
  #L4d7d36.  v3.`x1.g0.n` @type ^`byte`[] := v0 @kind object;
  #L4d7d3a.  v0:= v3.`x1.g0.j` @type ^`long` @kind wide;
  #L4d7d3e.  call temp:= `n`(v3, v0) @signature `Lx1/g0;.n:(J)I` @kind direct;
  #L4d7d44.  v0:= temp;
  #L4d7d46.  v1:= v3.`x1.g0.l` @type ^`int`;
  #L4d7d4a.  v0:= v0 * v1 @kind int;
  #L4d7d4e.  v3.`x1.g0.r` @type ^`int` := v0;
  #L4d7d52.  v1:= v3.`x1.g0.o` @type ^`byte`[] @kind object;
  #L4d7d56.  v1:= length @variable v1;
  #L4d7d58.  if v1 == v0 then goto L4d7d64;
  #L4d7d5c.  v0:= new `byte`[v0];
  #L4d7d60.  v3.`x1.g0.o` @type ^`byte`[] := v0 @kind object;
  #L4d7d64.  v0:= 0I;
  #L4d7d66.  v3.`x1.g0.p` @type ^`int` := v0;
  #L4d7d6a.  v1:= 0L;
  #L4d7d6e.  v3.`x1.g0.t` @type ^`long` := v1 @kind wide;
  #L4d7d72.  v3.`x1.g0.q` @type ^`int` := v0;
  #L4d7d76.  v3.`x1.g0.s` @type ^`boolean` := v0 @kind boolean;
  #L4d7d7a.  return @kind void;
}
procedure `void` `k`(`x1.g0` v4 @kind this) @signature `Lx1/g0;.k:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d7d8c.  v0:= v4.`x1.g0.q` @type ^`int`;
  #L4d7d90.  if v0 <= 0 then goto L4d7d9e;
  #L4d7d94.  v1:= v4.`x1.g0.n` @type ^`byte`[] @kind object;
  #L4d7d98.  call `s`(v4, v1, v0) @signature `Lx1/g0;.s:([BI)V` @kind direct;
  #L4d7d9e.  v0:= v4.`x1.g0.s` @type ^`boolean` @kind boolean;
  #L4d7da2.  if v0 != 0 then goto L4d7dbc;
  #L4d7da6.  v0:= v4.`x1.g0.t` @type ^`long` @kind wide;
  #L4d7daa.  v2:= v4.`x1.g0.r` @type ^`int`;
  #L4d7dae.  v3:= v4.`x1.g0.l` @type ^`int`;
  #L4d7db2.  v2:= v2 / v3 @kind int;
  #L4d7db4.  v2:= (`long`) v2 @kind i2l;
  #L4d7db6.  v0:= v0 + v2 @kind long;
  #L4d7db8.  v4.`x1.g0.t` @type ^`long` := v0 @kind wide;
  #L4d7dbc.  return @kind void;
}
procedure `void` `l`(`x1.g0` v1 @kind this) @signature `Lx1/g0;.l:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4d7dd0.  v0:= 0I;
  #L4d7dd2.  v1.`x1.g0.m` @type ^`boolean` := v0 @kind boolean;
  #L4d7dd6.  v1.`x1.g0.r` @type ^`int` := v0;
  #L4d7dda.  v0:= `@@s3.l0.f` @type ^`byte`[] @kind object;
  #L4d7dde.  v1.`x1.g0.n` @type ^`byte`[] := v0 @kind object;
  #L4d7de2.  v1.`x1.g0.o` @type ^`byte`[] := v0 @kind object;
  #L4d7de6.  return @kind void;
}
procedure `long` `q`(`x1.g0` v2 @kind this) @signature `Lx1/g0;.q:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d7c7c.  v0:= v2.`x1.g0.t` @type ^`long` @kind wide;
  #L4d7c80.  return v0 @kind wide;
}
procedure `void` `w`(`x1.g0` v0 @kind this, `boolean` v1 ) @signature `Lx1/g0;.w:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L4d809c.  v0.`x1.g0.m` @type ^`boolean` := v1 @kind boolean;
  #L4d80a0.  return @kind void;
}
