record `x1.f0` @kind class @AccessFlag FINAL extends `x1.w` @kind class {
}
procedure `void` `<init>`(`x1.f0` v0 @kind this) @signature `Lx1/f0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d794c.  call `<init>`(v0) @signature `Lx1/w;.<init>:()V` @kind direct;
  #L4d7952.  return @kind void;
}
procedure `void` `g`(`x1.f0` v9 @kind this, `java.nio.ByteBuffer` v10 @kind object) @signature `Lx1/f0;.g:(Ljava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d7964.  call temp:= `position`(v10) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d796a.  v0:= temp;
  #L4d796c.  call temp:= `limit`(v10) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d7972.  v1:= temp;
  #L4d7974.  v2:= v1 - v0 @kind int;
  #L4d7978.  v3:= v9.`x1.w.b` @type ^`x1.f$a` @kind object;
  #L4d797c.  v3:= v3.`x1.f$a.c` @type ^`int`;
  #L4d7980.  v4:= 805306368I;
  #L4d7984.  v5:= 536870912I;
  #L4d7988.  v6:= 268435456I;
  #L4d798c.  v7:= 4I;
  #L4d798e.  v8:= 3I;
  #L4d7990.  if v3 == v8 then goto L4d79be;
  #L4d7994.  if v3 == v7 then goto L4d79b8;
  #L4d7998.  if v3 == v6 then goto L4d79c2;
  #L4d799c.  if v3 == v5 then goto L4d79b2;
  #L4d79a0.  if v3 != v4 then goto L4d79a6;
  #L4d79a4.  goto L4d79b8;
  #L4d79a6.  v10:= new `java.lang.IllegalStateException`;
  #L4d79aa.  call `<init>`(v10) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L4d79b0.  throw v10;
  #L4d79b2.  v2:= v2 / 3;
  #L4d79b6.  goto L4d79be;
  #L4d79b8.  v2:= v2 / 2;
  #L4d79bc.  goto L4d79c2;
  #L4d79be.  v2:= v2 * 2;
  #L4d79c2.  call temp:= `m`(v9, v2) @signature `Lx1/w;.m:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d79c8.  v2:= temp @kind object;
  #L4d79ca.  v3:= v9.`x1.w.b` @type ^`x1.f$a` @kind object;
  #L4d79ce.  v3:= v3.`x1.f$a.c` @type ^`int`;
  #L4d79d2.  if v3 == v8 then goto L4d7ac4;
  #L4d79d6.  if v3 == v7 then goto L4d7a78;
  #L4d79da.  if v3 == v6 then goto L4d7a4e;
  #L4d79de.  if v3 == v5 then goto L4d7a20;
  #L4d79e2.  if v3 != v4 then goto L4d7a14;
  #L4d79e6.  if v0 >= v1 then goto L4d7aee;
  #L4d79ea.  v3:= v0 + 2;
  #L4d79ee.  call temp:= `get`(v10, v3) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d79f4.  v3:= temp;
  #L4d79f6.  call temp:= `put`(v2, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d79fc.  v3:= v0 + 3;
  #L4d7a00.  call temp:= `get`(v10, v3) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d7a06.  v3:= temp;
  #L4d7a08.  call temp:= `put`(v2, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7a0e.  v0:= v0 + 4;
  #L4d7a12.  goto L4d79e6;
  #L4d7a14.  v10:= new `java.lang.IllegalStateException`;
  #L4d7a18.  call `<init>`(v10) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L4d7a1e.  throw v10;
  #L4d7a20.  if v0 >= v1 then goto L4d7aee;
  #L4d7a24.  v3:= v0 + 1;
  #L4d7a28.  call temp:= `get`(v10, v3) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d7a2e.  v3:= temp;
  #L4d7a30.  call temp:= `put`(v2, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7a36.  v3:= v0 + 2;
  #L4d7a3a.  call temp:= `get`(v10, v3) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d7a40.  v3:= temp;
  #L4d7a42.  call temp:= `put`(v2, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7a48.  v0:= v0 + 3;
  #L4d7a4c.  goto L4d7a20;
  #L4d7a4e.  if v0 >= v1 then goto L4d7aee;
  #L4d7a52.  v3:= v0 + 1;
  #L4d7a56.  call temp:= `get`(v10, v3) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d7a5c.  v3:= temp;
  #L4d7a5e.  call temp:= `put`(v2, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7a64.  call temp:= `get`(v10, v0) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d7a6a.  v3:= temp;
  #L4d7a6c.  call temp:= `put`(v2, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7a72.  v0:= v0 + 2;
  #L4d7a76.  goto L4d7a4e;
  #L4d7a78.  if v0 >= v1 then goto L4d7aee;
  #L4d7a7c.  call temp:= `getFloat`(v10, v0) @signature `Ljava/nio/ByteBuffer;.getFloat:(I)F` @kind virtual;
  #L4d7a82.  v3:= temp;
  #L4d7a84.  v4:= -1.0F;
  #L4d7a88.  v5:= 1.0F;
  #L4d7a8c.  call temp:= `p`(v3, v4, v5) @signature `Ls3/l0;.p:(FFF)F` @kind static;
  #L4d7a92.  v3:= temp;
  #L4d7a94.  v4:= 1191181824I;
  #L4d7a9a.  v3:= v3 * v4 @kind float;
  #L4d7a9e.  v3:= (`int`) v3 @kind f2i;
  #L4d7aa0.  v3:= (`short`) v3 @kind i2s;
  #L4d7aa2.  v4:= v3 ^& 255;
  #L4d7aa6.  v4:= (`byte`) v4 @kind i2b;
  #L4d7aa8.  call temp:= `put`(v2, v4) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7aae.  v3:= v3 ^> 8;
  #L4d7ab2.  v3:= v3 ^& 255;
  #L4d7ab6.  v3:= (`byte`) v3 @kind i2b;
  #L4d7ab8.  call temp:= `put`(v2, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7abe.  v0:= v0 + 4;
  #L4d7ac2.  goto L4d7a78;
  #L4d7ac4.  if v0 >= v1 then goto L4d7aee;
  #L4d7ac8.  v3:= 0I;
  #L4d7aca.  call temp:= `put`(v2, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7ad0.  call temp:= `get`(v10, v0) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d7ad6.  v3:= temp;
  #L4d7ad8.  v3:= v3 ^& 255;
  #L4d7adc.  v3:= v3 + -128;
  #L4d7ae0.  v3:= (`byte`) v3 @kind i2b;
  #L4d7ae2.  call temp:= `put`(v2, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7ae8.  v0:= v0 + 1;
  #L4d7aec.  goto L4d7ac4;
  #L4d7aee.  call temp:= `limit`(v10) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d7af4.  v0:= temp;
  #L4d7af6.  call temp:= `position`(v10, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d7afc.  call temp:= `flip`(v2) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L4d7b02.  return @kind void;
}
procedure `x1.f$a` `i`(`x1.f0` v3 @kind this, `x1.f$a` v4 @kind object) @signature `Lx1/f0;.i:(Lx1/f$a;)Lx1/f$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d7b14.  v0:= v4.`x1.f$a.c` @type ^`int`;
  #L4d7b18.  v1:= 2I;
  #L4d7b1a.  v2:= 3I;
  #L4d7b1c.  if v0 == v2 then goto L4d7b50;
  #L4d7b20.  if v0 == v1 then goto L4d7b50;
  #L4d7b24.  v2:= 268435456I;
  #L4d7b28.  if v0 == v2 then goto L4d7b50;
  #L4d7b2c.  v2:= 536870912I;
  #L4d7b30.  if v0 == v2 then goto L4d7b50;
  #L4d7b34.  v2:= 805306368I;
  #L4d7b38.  if v0 == v2 then goto L4d7b50;
  #L4d7b3c.  v2:= 4I;
  #L4d7b3e.  if v0 != v2 then goto L4d7b44;
  #L4d7b42.  goto L4d7b50;
  #L4d7b44.  v0:= new `x1.f$b`;
  #L4d7b48.  call `<init>`(v0, v4) @signature `Lx1/f$b;.<init>:(Lx1/f$a;)V` @kind direct;
  #L4d7b4e.  throw v0;
  #L4d7b50.  if v0 == v1 then goto L4d7b68;
  #L4d7b54.  v0:= new `x1.f$a`;
  #L4d7b58.  v2:= v4.`x1.f$a.a` @type ^`int`;
  #L4d7b5c.  v4:= v4.`x1.f$a.b` @type ^`int`;
  #L4d7b60.  call `<init>`(v0, v2, v4, v1) @signature `Lx1/f$a;.<init>:(III)V` @kind direct;
  #L4d7b66.  goto L4d7b6c;
  #L4d7b68.  v0:= `@@x1.f$a.e` @type ^`x1.f$a` @kind object;
  #L4d7b6c.  return v0 @kind object;
}
