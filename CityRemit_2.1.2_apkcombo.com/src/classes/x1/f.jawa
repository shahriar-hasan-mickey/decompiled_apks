record `x1.f` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `java.nio.ByteBuffer` `@@x1.f.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx1/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4d1220.  v0:= 0I;
  #L4d1222.  call temp:= `allocateDirect`(v0) @signature `Ljava/nio/ByteBuffer;.allocateDirect:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4d1228.  v0:= temp @kind object;
  #L4d122a.  call temp:= `nativeOrder`() @signature `Ljava/nio/ByteOrder;.nativeOrder:()Ljava/nio/ByteOrder;` @kind static;
  #L4d1230.  v1:= temp @kind object;
  #L4d1232.  call temp:= `order`(v0, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d1238.  v0:= temp @kind object;
  #L4d123a.  `@@x1.f.a` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L4d123e.  return @kind void;
}
procedure `boolean` `a`() @signature `Lx1/f;.a:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `b`() @signature `Lx1/f;.b:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `c`() @signature `Lx1/f;.c:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `x1.f$a` `d`(`x1.f$a` v0 @kind object) @signature `Lx1/f;.d:(Lx1/f$a;)Lx1/f$a;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.nio.ByteBuffer` `e`() @signature `Lx1/f;.e:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `f`() @signature `Lx1/f;.f:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `flush`() @signature `Lx1/f;.flush:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `g`(`java.nio.ByteBuffer` v0 @kind object) @signature `Lx1/f;.g:(Ljava/nio/ByteBuffer;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
