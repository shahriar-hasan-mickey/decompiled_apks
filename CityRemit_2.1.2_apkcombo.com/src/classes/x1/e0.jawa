record `x1.e0` @kind class @AccessFlag PUBLIC {
}
procedure `java.util.List` `a`(`byte`[] v6 @kind object) @signature `Lx1/e0;.a:([B)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d78c8.  call temp:= `d`(v6) @signature `Lx1/e0;.d:([B)I` @kind static;
  #L4d78ce.  v0:= temp;
  #L4d78d0.  v0:= (`long`) v0 @kind i2l;
  #L4d78d2.  call temp:= `e`(v0) @signature `Lx1/e0;.e:(J)J` @kind static;
  #L4d78d8.  v0:= temp @kind wide;
  #L4d78da.  v2:= 3840L;
  #L4d78de.  call temp:= `e`(v2) @signature `Lx1/e0;.e:(J)J` @kind static;
  #L4d78e4.  v2:= temp @kind wide;
  #L4d78e6.  v4:= new `java.util.ArrayList`;
  #L4d78ea.  v5:= 3I;
  #L4d78ec.  call `<init>`(v4, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4d78f2.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4d78f8.  call temp:= `b`(v0) @signature `Lx1/e0;.b:(J)[B` @kind static;
  #L4d78fe.  v6:= temp @kind object;
  #L4d7900.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4d7906.  call temp:= `b`(v2) @signature `Lx1/e0;.b:(J)[B` @kind static;
  #L4d790c.  v6:= temp @kind object;
  #L4d790e.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4d7914.  return v4 @kind object;
}
procedure `byte`[] `b`(`long` v2 ) @signature `Lx1/e0;.b:(J)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4d7838.  v0:= 8I;
  #L4d783c.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4d7842.  v0:= temp @kind object;
  #L4d7844.  call temp:= `nativeOrder`() @signature `Ljava/nio/ByteOrder;.nativeOrder:()Ljava/nio/ByteOrder;` @kind static;
  #L4d784a.  v1:= temp @kind object;
  #L4d784c.  call temp:= `order`(v0, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d7852.  v0:= temp @kind object;
  #L4d7854.  call temp:= `putLong`(v0, v2) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d785a.  v2:= temp @kind object;
  #L4d785c.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L4d7862.  v2:= temp @kind object;
  #L4d7864.  return v2 @kind object;
}
procedure `int` `c`(`byte`[] v1 @kind object) @signature `Lx1/e0;.c:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4d7878.  v0:= 9I;
  #L4d787c.  v1:= v1[v0] @kind byte;
  #L4d7880.  v1:= v1 ^& 255;
  #L4d7884.  return v1;
}
procedure `int` `d`(`byte`[] v2 @kind object) @signature `Lx1/e0;.d:([B)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4d7898.  v0:= 11I;
  #L4d789c.  v0:= v2[v0] @kind byte;
  #L4d78a0.  v0:= v0 ^& 255;
  #L4d78a4.  v0:= v0 ^< 8;
  #L4d78a8.  v1:= 10I;
  #L4d78ac.  v2:= v2[v1] @kind byte;
  #L4d78b0.  v2:= v2 ^& 255;
  #L4d78b4.  v2:= v2 ^| v0 @kind int;
  #L4d78b6.  return v2;
}
procedure `long` `e`(`long` v2 ) @signature `Lx1/e0;.e:(J)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4d7928.  v0:= 1000000000L;
  #L4d792e.  v2:= v2 * v0 @kind long;
  #L4d7932.  v0:= 48000L;
  #L4d7938.  v2:= v2 / v0 @kind long;
  #L4d793a.  return v2 @kind wide;
}
