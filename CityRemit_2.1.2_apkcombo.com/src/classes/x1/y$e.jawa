record `x1.y$e` @kind class @AccessFlag PUBLIC_FINAL {
  `x1.e` `x1.y$e.a` @AccessFlag PRIVATE;
  `x1.y$c` `x1.y$e.b` @AccessFlag PRIVATE;
  `boolean` `x1.y$e.c` @AccessFlag PRIVATE;
  `boolean` `x1.y$e.d` @AccessFlag PRIVATE;
  `int` `x1.y$e.e` @AccessFlag PRIVATE;
  `x1.y$d` `x1.y$e.f` @AccessFlag ;
}
procedure `void` `<init>`(`x1.y$e` v1 @kind this) @signature `Lx1/y$e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d2d58.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d2d5e.  v0:= `@@x1.e.c` @type ^`x1.e` @kind object;
  #L4d2d62.  v1.`x1.y$e.a` @type ^`x1.e` := v0 @kind object;
  #L4d2d66.  v0:= 0I;
  #L4d2d68.  v1.`x1.y$e.e` @type ^`int` := v0;
  #L4d2d6c.  v0:= `@@x1.y$d.a` @type ^`x1.y$d` @kind object;
  #L4d2d70.  v1.`x1.y$e.f` @type ^`x1.y$d` := v0 @kind object;
  #L4d2d74.  return @kind void;
}
procedure `x1.e` `a`(`x1.y$e` v0 @kind object) @signature `Lx1/y$e;.a:(Lx1/y$e;)Lx1/e;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4d2d88.  v0:= v0.`x1.y$e.a` @type ^`x1.e` @kind object;
  #L4d2d8c.  return v0 @kind object;
}
procedure `x1.y$c` `b`(`x1.y$e` v0 @kind object) @signature `Lx1/y$e;.b:(Lx1/y$e;)Lx1/y$c;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4d2ddc.  v0:= v0.`x1.y$e.b` @type ^`x1.y$c` @kind object;
  #L4d2de0.  return v0 @kind object;
}
procedure `boolean` `c`(`x1.y$e` v0 @kind object) @signature `Lx1/y$e;.c:(Lx1/y$e;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4d2d10.  v0:= v0.`x1.y$e.c` @type ^`boolean` @kind boolean;
  #L4d2d14.  return v0;
}
procedure `boolean` `d`(`x1.y$e` v0 @kind object) @signature `Lx1/y$e;.d:(Lx1/y$e;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4d2d28.  v0:= v0.`x1.y$e.d` @type ^`boolean` @kind boolean;
  #L4d2d2c.  return v0;
}
procedure `int` `e`(`x1.y$e` v0 @kind object) @signature `Lx1/y$e;.e:(Lx1/y$e;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4d2d40.  v0:= v0.`x1.y$e.e` @type ^`int`;
  #L4d2d44.  return v0;
}
procedure `x1.y` `f`(`x1.y$e` v2 @kind this) @signature `Lx1/y$e;.f:()Lx1/y;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2da0.  v0:= v2.`x1.y$e.b` @type ^`x1.y$c` @kind object;
  #L4d2da4.  if v0 != 0 then goto L4d2dbc;
  #L4d2da8.  v0:= new `x1.y$g`;
  #L4d2dac.  v1:= 0I;
  #L4d2dae.  v1:= new `x1.f`[v1];
  #L4d2db2.  call `<init>`(v0, v1) @signature `Lx1/y$g;.<init>:([Lx1/f;)V` @kind direct;
  #L4d2db8.  v2.`x1.y$e.b` @type ^`x1.y$c` := v0 @kind object;
  #L4d2dbc.  v0:= new `x1.y`;
  #L4d2dc0.  v1:= 0I;
  #L4d2dc2.  call `<init>`(v0, v2, v1) @signature `Lx1/y;.<init>:(Lx1/y$e;Lx1/y$a;)V` @kind direct;
  #L4d2dc8.  return v0 @kind object;
}
procedure `x1.y$e` `g`(`x1.y$e` v0 @kind this, `x1.e` v1 @kind object) @signature `Lx1/y$e;.g:(Lx1/e;)Lx1/y$e;` @AccessFlag PUBLIC {
    temp;

  #L4d2df4.  call temp:= `e`(v1) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4d2dfa.  v0.`x1.y$e.a` @type ^`x1.e` := v1 @kind object;
  #L4d2dfe.  return v0 @kind object;
}
procedure `x1.y$e` `h`(`x1.y$e` v0 @kind this, `boolean` v1 ) @signature `Lx1/y$e;.h:(Z)Lx1/y$e;` @AccessFlag PUBLIC {
    temp;

  #L4d2e10.  v0.`x1.y$e.d` @type ^`boolean` := v1 @kind boolean;
  #L4d2e14.  return v0 @kind object;
}
procedure `x1.y$e` `i`(`x1.y$e` v0 @kind this, `boolean` v1 ) @signature `Lx1/y$e;.i:(Z)Lx1/y$e;` @AccessFlag PUBLIC {
    temp;

  #L4d2e28.  v0.`x1.y$e.c` @type ^`boolean` := v1 @kind boolean;
  #L4d2e2c.  return v0 @kind object;
}
procedure `x1.y$e` `j`(`x1.y$e` v0 @kind this, `int` v1 ) @signature `Lx1/y$e;.j:(I)Lx1/y$e;` @AccessFlag PUBLIC {
    temp;

  #L4d2e40.  v0.`x1.y$e.e` @type ^`int` := v1;
  #L4d2e44.  return v0 @kind object;
}
