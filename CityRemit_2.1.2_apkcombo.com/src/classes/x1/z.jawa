record `x1.z` @kind class @AccessFlag PUBLIC extends `x1.y$d` @kind interface {
  `int` `x1.z.b` @AccessFlag PROTECTED_FINAL;
  `int` `x1.z.c` @AccessFlag PROTECTED_FINAL;
  `int` `x1.z.d` @AccessFlag PROTECTED_FINAL;
  `int` `x1.z.e` @AccessFlag PROTECTED_FINAL;
  `int` `x1.z.f` @AccessFlag PROTECTED_FINAL;
  `int` `x1.z.g` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`x1.z` v1 @kind this, `x1.z$a` v2 @kind object) @signature `Lx1/z;.<init>:(Lx1/z$a;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L4d5af0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d5af6.  call temp:= `a`(v2) @signature `Lx1/z$a;.a:(Lx1/z$a;)I` @kind static;
  #L4d5afc.  v0:= temp;
  #L4d5afe.  v1.`x1.z.b` @type ^`int` := v0;
  #L4d5b02.  call temp:= `b`(v2) @signature `Lx1/z$a;.b:(Lx1/z$a;)I` @kind static;
  #L4d5b08.  v0:= temp;
  #L4d5b0a.  v1.`x1.z.c` @type ^`int` := v0;
  #L4d5b0e.  call temp:= `c`(v2) @signature `Lx1/z$a;.c:(Lx1/z$a;)I` @kind static;
  #L4d5b14.  v0:= temp;
  #L4d5b16.  v1.`x1.z.d` @type ^`int` := v0;
  #L4d5b1a.  call temp:= `d`(v2) @signature `Lx1/z$a;.d:(Lx1/z$a;)I` @kind static;
  #L4d5b20.  v0:= temp;
  #L4d5b22.  v1.`x1.z.e` @type ^`int` := v0;
  #L4d5b26.  call temp:= `e`(v2) @signature `Lx1/z$a;.e:(Lx1/z$a;)I` @kind static;
  #L4d5b2c.  v0:= temp;
  #L4d5b2e.  v1.`x1.z.f` @type ^`int` := v0;
  #L4d5b32.  call temp:= `f`(v2) @signature `Lx1/z$a;.f:(Lx1/z$a;)I` @kind static;
  #L4d5b38.  v2:= temp;
  #L4d5b3a.  v1.`x1.z.g` @type ^`int` := v2;
  #L4d5b3e.  return @kind void;
}
procedure `int` `b`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lx1/z;.b:(III)I` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;

  #L4d58c8.  v0:= (`long`) v2 @kind i2l;
  #L4d58ca.  v2:= (`long`) v3 @kind i2l;
  #L4d58cc.  v0:= v0 * v2 @kind long;
  #L4d58d0.  v2:= (`long`) v4 @kind i2l;
  #L4d58d2.  v0:= v0 * v2 @kind long;
  #L4d58d6.  v2:= 1000000L;
  #L4d58dc.  v0:= v0 / v2 @kind long;
  #L4d58de.  call temp:= `d`(v0) @signature `Lo5/d;.d:(J)I` @kind static;
  #L4d58e4.  v2:= temp;
  #L4d58e6.  return v2;
}
procedure `int` `d`(`int` v0 ) @signature `Lx1/z;.d:(I)I` @AccessFlag PROTECTED_STATIC {
    temp;

  #L4d597c.  goto L4d59e8;
  #L4d5982.  v0:= new `java.lang.IllegalArgumentException`;
  #L4d5986.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4d598c.  throw v0;
  #L4d598e.  v0:= 336000I;
  #L4d5994.  return v0;
  #L4d5996.  v0:= 256000I;
  #L4d599c.  return v0;
  #L4d599e.  v0:= 8000I;
  #L4d59a2.  return v0;
  #L4d59a4.  v0:= 3062500I;
  #L4d59aa.  return v0;
  #L4d59ac.  v0:= 7000I;
  #L4d59b0.  return v0;
  #L4d59b2.  v0:= 16000I;
  #L4d59b6.  return v0;
  #L4d59b8.  v0:= 100000I;
  #L4d59be.  return v0;
  #L4d59c0.  v0:= 40000I;
  #L4d59c6.  return v0;
  #L4d59c8.  v0:= 2250000I;
  #L4d59ce.  return v0;
  #L4d59d0.  v0:= 192000I;
  #L4d59d6.  return v0;
  #L4d59d8.  v0:= 768000I;
  #L4d59de.  return v0;
  #L4d59e0.  v0:= 80000I;
  #L4d59e6.  return v0;
  #L4d59e8.  switch v0
                  | 5 => goto L4d59e0
                  | 6 => goto L4d59d8
                  | 7 => goto L4d59d0
                  | 8 => goto L4d59c8
                  | 9 => goto L4d59c0
                  | 10 => goto L4d59b8
                  | 11 => goto L4d59b2
                  | 12 => goto L4d59ac
                  | 13 => goto L4d5982
                  | 14 => goto L4d59a4
                  | 15 => goto L4d599e
                  | 16 => goto L4d5996
                  | 17 => goto L4d598e
                  | 18 => goto L4d59d8
                  | else => goto L4d5982;
}
procedure `int` `a`(`x1.z` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 , `double` v6 ) @signature `Lx1/z;.a:(IIIIID)I` @AccessFlag PUBLIC {
    temp;

  #L4d5944.  call temp:= `c`(v0, v1, v2, v3, v4, v5) @signature `Lx1/z;.c:(IIIII)I` @kind virtual;
  #L4d594a.  v2:= temp;
  #L4d594c.  v2:= (`double`) v2 @kind i2d;
  #L4d594e.  v2:= v2 * v6 @kind double;
  #L4d5952.  v2:= (`int`) v2 @kind d2i;
  #L4d5954.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4d595a.  v1:= temp;
  #L4d595c.  v1:= v1 + v4 @kind int;
  #L4d595e.  v1:= v1 + -1;
  #L4d5962.  v1:= v1 / v4 @kind int;
  #L4d5964.  v1:= v1 * v4 @kind int;
  #L4d5968.  return v1;
}
procedure `int` `c`(`x1.z` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 ) @signature `Lx1/z;.c:(IIIII)I` @AccessFlag PROTECTED {
    temp;

  #L4d58f8.  if v3 == 0 then goto L4d5928;
  #L4d58fc.  v1:= 1I;
  #L4d58fe.  if v3 == v1 then goto L4d591e;
  #L4d5902.  v1:= 2I;
  #L4d5904.  if v3 != v1 then goto L4d5912;
  #L4d5908.  call temp:= `f`(v0, v2) @signature `Lx1/z;.f:(I)I` @kind virtual;
  #L4d590e.  v1:= temp;
  #L4d5910.  return v1;
  #L4d5912.  v1:= new `java.lang.IllegalArgumentException`;
  #L4d5916.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4d591c.  throw v1;
  #L4d591e.  call temp:= `e`(v0, v2) @signature `Lx1/z;.e:(I)I` @kind virtual;
  #L4d5924.  v1:= temp;
  #L4d5926.  return v1;
  #L4d5928.  call temp:= `g`(v0, v1, v5, v4) @signature `Lx1/z;.g:(III)I` @kind virtual;
  #L4d592e.  v1:= temp;
  #L4d5930.  return v1;
}
procedure `int` `e`(`x1.z` v4 @kind this, `int` v5 ) @signature `Lx1/z;.e:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d5a38.  call temp:= `d`(v5) @signature `Lx1/z;.d:(I)I` @kind static;
  #L4d5a3e.  v5:= temp;
  #L4d5a40.  v0:= v4.`x1.z.f` @type ^`int`;
  #L4d5a44.  v0:= (`long`) v0 @kind i2l;
  #L4d5a46.  v2:= (`long`) v5 @kind i2l;
  #L4d5a48.  v0:= v0 * v2 @kind long;
  #L4d5a4c.  v2:= 1000000L;
  #L4d5a52.  v0:= v0 / v2 @kind long;
  #L4d5a54.  call temp:= `d`(v0) @signature `Lo5/d;.d:(J)I` @kind static;
  #L4d5a5a.  v5:= temp;
  #L4d5a5c.  return v5;
}
procedure `int` `f`(`x1.z` v4 @kind this, `int` v5 ) @signature `Lx1/z;.f:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d5a70.  v0:= v4.`x1.z.e` @type ^`int`;
  #L4d5a74.  v1:= 5I;
  #L4d5a76.  if v5 != v1 then goto L4d5a82;
  #L4d5a7a.  v1:= v4.`x1.z.g` @type ^`int`;
  #L4d5a7e.  v0:= v0 * v1 @kind int;
  #L4d5a82.  call temp:= `d`(v5) @signature `Lx1/z;.d:(I)I` @kind static;
  #L4d5a88.  v5:= temp;
  #L4d5a8a.  v0:= (`long`) v0 @kind i2l;
  #L4d5a8c.  v2:= (`long`) v5 @kind i2l;
  #L4d5a8e.  v0:= v0 * v2 @kind long;
  #L4d5a92.  v2:= 1000000L;
  #L4d5a98.  v0:= v0 / v2 @kind long;
  #L4d5a9a.  call temp:= `d`(v0) @signature `Lo5/d;.d:(J)I` @kind static;
  #L4d5aa0.  v5:= temp;
  #L4d5aa2.  return v5;
}
procedure `int` `g`(`x1.z` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lx1/z;.g:(III)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4d5ab4.  v0:= v2.`x1.z.d` @type ^`int`;
  #L4d5ab8.  v3:= v3 * v0 @kind int;
  #L4d5abc.  v0:= v2.`x1.z.b` @type ^`int`;
  #L4d5ac0.  call temp:= `b`(v0, v4, v5) @signature `Lx1/z;.b:(III)I` @kind static;
  #L4d5ac6.  v0:= temp;
  #L4d5ac8.  v1:= v2.`x1.z.c` @type ^`int`;
  #L4d5acc.  call temp:= `b`(v1, v4, v5) @signature `Lx1/z;.b:(III)I` @kind static;
  #L4d5ad2.  v4:= temp;
  #L4d5ad4.  call temp:= `q`(v3, v0, v4) @signature `Ls3/l0;.q:(III)I` @kind static;
  #L4d5ada.  v3:= temp;
  #L4d5adc.  return v3;
}
