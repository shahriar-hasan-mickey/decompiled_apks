record `x1.d` @kind class @AccessFlag PUBLIC_FINAL extends `v1.g` @kind interface {
  `int` `x1.d.o` @AccessFlag PUBLIC_FINAL;
  `int` `x1.d.p` @AccessFlag PUBLIC_FINAL;
  `int` `x1.d.q` @AccessFlag PUBLIC_FINAL;
  `int` `x1.d.r` @AccessFlag PUBLIC_FINAL;
  `int` `x1.d.s` @AccessFlag PUBLIC_FINAL;
  `x1.d$d` `x1.d.t` @AccessFlag PRIVATE;
}
global `x1.d` `@@x1.d.u` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx1/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d09a8.  v0:= new `x1.d$e`;
  #L4d09ac.  call `<init>`(v0) @signature `Lx1/d$e;.<init>:()V` @kind direct;
  #L4d09b2.  call temp:= `a`(v0) @signature `Lx1/d$e;.a:()Lx1/d;` @kind virtual;
  #L4d09b8.  v0:= temp @kind object;
  #L4d09ba.  `@@x1.d.u` @type ^`x1.d` := v0 @kind object;
  #L4d09be.  return @kind void;
}
procedure `void` `<init>`(`x1.d` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 ) @signature `Lx1/d;.<init>:(IIIII)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4d09d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d09d6.  v0.`x1.d.o` @type ^`int` := v1;
  #L4d09da.  v0.`x1.d.p` @type ^`int` := v2;
  #L4d09de.  v0.`x1.d.q` @type ^`int` := v3;
  #L4d09e2.  v0.`x1.d.r` @type ^`int` := v4;
  #L4d09e6.  v0.`x1.d.s` @type ^`int` := v5;
  #L4d09ea.  return @kind void;
}
procedure `void` `<init>`(`x1.d` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 , `x1.d$a` v6 @kind object) @signature `Lx1/d;.<init>:(IIIIILx1/d$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L4d09fc.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lx1/d;.<init>:(IIIII)V` @kind direct;
  #L4d0a02.  return @kind void;
}
procedure `x1.d$d` `a`(`x1.d` v2 @kind this) @signature `Lx1/d;.a:()Lx1/d$d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d0a14.  v0:= v2.`x1.d.t` @type ^`x1.d$d` @kind object;
  #L4d0a18.  if v0 != 0 then goto L4d0a2c;
  #L4d0a1c.  v0:= new `x1.d$d`;
  #L4d0a20.  v1:= 0I;
  #L4d0a22.  call `<init>`(v0, v2, v1) @signature `Lx1/d$d;.<init>:(Lx1/d;Lx1/d$a;)V` @kind direct;
  #L4d0a28.  v2.`x1.d.t` @type ^`x1.d$d` := v0 @kind object;
  #L4d0a2c.  v0:= v2.`x1.d.t` @type ^`x1.d$d` @kind object;
  #L4d0a30.  return v0 @kind object;
}
procedure `boolean` `equals`(`x1.d` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lx1/d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d08ec.  v0:= 1I;
  #L4d08ee.  if v4 != v5 then goto L4d08f4;
  #L4d08f2.  return v0;
  #L4d08f4.  v1:= 0I;
  #L4d08f6.  if v5 == 0 then goto L4d0952;
  #L4d08fa.  v2:= constclass @type ^`x1.d` @kind object;
  #L4d08fe.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4d0904.  v3:= temp @kind object;
  #L4d0906.  if v2 == v3 then goto L4d090c;
  #L4d090a.  goto L4d0952;
  #L4d090c.  v5:= (`x1.d`) v5 @kind object;
  #L4d0910.  v2:= v4.`x1.d.o` @type ^`int`;
  #L4d0914.  v3:= v5.`x1.d.o` @type ^`int`;
  #L4d0918.  if v2 != v3 then goto L4d094e;
  #L4d091c.  v2:= v4.`x1.d.p` @type ^`int`;
  #L4d0920.  v3:= v5.`x1.d.p` @type ^`int`;
  #L4d0924.  if v2 != v3 then goto L4d094e;
  #L4d0928.  v2:= v4.`x1.d.q` @type ^`int`;
  #L4d092c.  v3:= v5.`x1.d.q` @type ^`int`;
  #L4d0930.  if v2 != v3 then goto L4d094e;
  #L4d0934.  v2:= v4.`x1.d.r` @type ^`int`;
  #L4d0938.  v3:= v5.`x1.d.r` @type ^`int`;
  #L4d093c.  if v2 != v3 then goto L4d094e;
  #L4d0940.  v2:= v4.`x1.d.s` @type ^`int`;
  #L4d0944.  v5:= v5.`x1.d.s` @type ^`int`;
  #L4d0948.  if v2 != v5 then goto L4d094e;
  #L4d094c.  goto L4d0950;
  #L4d094e.  v0:= 0I;
  #L4d0950.  return v0;
  #L4d0952.  return v1;
}
procedure `int` `hashCode`(`x1.d` v2 @kind this) @signature `Lx1/d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d0964.  v0:= v2.`x1.d.o` @type ^`int`;
  #L4d0968.  v1:= 527I;
  #L4d096c.  v1:= v1 + v0 @kind int;
  #L4d096e.  v1:= v1 * 31;
  #L4d0972.  v0:= v2.`x1.d.p` @type ^`int`;
  #L4d0976.  v1:= v1 + v0 @kind int;
  #L4d0978.  v1:= v1 * 31;
  #L4d097c.  v0:= v2.`x1.d.q` @type ^`int`;
  #L4d0980.  v1:= v1 + v0 @kind int;
  #L4d0982.  v1:= v1 * 31;
  #L4d0986.  v0:= v2.`x1.d.r` @type ^`int`;
  #L4d098a.  v1:= v1 + v0 @kind int;
  #L4d098c.  v1:= v1 * 31;
  #L4d0990.  v0:= v2.`x1.d.s` @type ^`int`;
  #L4d0994.  v1:= v1 + v0 @kind int;
  #L4d0996.  return v1;
}
