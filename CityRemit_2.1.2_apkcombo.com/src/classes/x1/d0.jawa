record `x1.d0` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.String`[] `@@x1.d0.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@x1.d0.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@x1.d0.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@x1.d0.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@x1.d0.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@x1.d0.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@x1.d0.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx1/d0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4d7660.  v0:= "audio/mpeg-L1" @kind object;
  #L4d7664.  v1:= "audio/mpeg-L2" @kind object;
  #L4d7668.  v2:= "audio/mpeg" @kind object;
  #L4d766c.  temp:= new `java.lang.String`[v0, v1, v2];
  #L4d7672.  v0:= temp @kind object;
  #L4d7674.  `@@x1.d0.a` @type ^`java.lang.String`[] := v0 @kind object;
  #L4d7678.  v0:= 3I;
  #L4d767a.  v0:= new `int`[v0];
  #L4d767e.  goto L4d76d4;
  #L4d7684.  `@@x1.d0.b` @type ^`int`[] := v0 @kind object;
  #L4d7688.  v0:= 14I;
  #L4d768c.  v1:= new `int`[v0];
  #L4d7690.  goto L4d76e8;
  #L4d7696.  `@@x1.d0.c` @type ^`int`[] := v1 @kind object;
  #L4d769a.  v1:= new `int`[v0];
  #L4d769e.  goto L4d7728;
  #L4d76a4.  `@@x1.d0.d` @type ^`int`[] := v1 @kind object;
  #L4d76a8.  v1:= new `int`[v0];
  #L4d76ac.  goto L4d7768;
  #L4d76b2.  `@@x1.d0.e` @type ^`int`[] := v1 @kind object;
  #L4d76b6.  v1:= new `int`[v0];
  #L4d76ba.  goto L4d77a8;
  #L4d76c0.  `@@x1.d0.f` @type ^`int`[] := v1 @kind object;
  #L4d76c4.  v0:= new `int`[v0];
  #L4d76c8.  goto L4d77e8;
  #L4d76ce.  `@@x1.d0.g` @type ^`int`[] := v0 @kind object;
  #L4d76d2.  return @kind void;
  #L4d76d4.  v0:= (44100I, 48000I, 32000I) @kind object;
  #L4d76e7.  goto L4d7684;
  #L4d76e8.  v1:= (32000I, 64000I, 96000I, 128000I, 160000I, 192000I, 224000I, 256000I, 288000I, 320000I, 352000I, 384000I, 416000I, 448000I) @kind object;
  #L4d7727.  goto L4d7696;
  #L4d7728.  v1:= (32000I, 48000I, 56000I, 64000I, 80000I, 96000I, 112000I, 128000I, 144000I, 160000I, 176000I, 192000I, 224000I, 256000I) @kind object;
  #L4d7767.  goto L4d76a4;
  #L4d7768.  v1:= (32000I, 48000I, 56000I, 64000I, 80000I, 96000I, 112000I, 128000I, 160000I, 192000I, 224000I, 256000I, 320000I, 384000I) @kind object;
  #L4d77a7.  goto L4d76b2;
  #L4d77a8.  v1:= (32000I, 40000I, 48000I, 56000I, 64000I, 80000I, 96000I, 112000I, 128000I, 160000I, 192000I, 224000I, 256000I, 320000I) @kind object;
  #L4d77e7.  goto L4d76c0;
  #L4d77e8.  v0:= (8000I, 16000I, 24000I, 32000I, 40000I, 48000I, 56000I, 64000I, 80000I, 96000I, 112000I, 128000I, 144000I, 160000I) @kind object;
  #L4d7827.  goto L4d76ce;
}
procedure `boolean` `a`(`int` v0 ) @signature `Lx1/d0;.a:(I)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4d73b0.  call temp:= `l`(v0) @signature `Lx1/d0;.l:(I)Z` @kind static;
  #L4d73b6.  v0:= temp;
  #L4d73b8.  return v0;
}
procedure `java.lang.String`[] `b`() @signature `Lx1/d0;.b:()[Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L4d7648.  v0:= `@@x1.d0.a` @type ^`java.lang.String`[] @kind object;
  #L4d764c.  return v0 @kind object;
}
procedure `int`[] `c`() @signature `Lx1/d0;.c:()[I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L4d75b8.  v0:= `@@x1.d0.b` @type ^`int`[] @kind object;
  #L4d75bc.  return v0 @kind object;
}
procedure `int` `d`(`int` v0 , `int` v1 ) @signature `Lx1/d0;.d:(II)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4d73f0.  call temp:= `k`(v0, v1) @signature `Lx1/d0;.k:(II)I` @kind static;
  #L4d73f6.  v0:= temp;
  #L4d73f8.  return v0;
}
procedure `int`[] `e`() @signature `Lx1/d0;.e:()[I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L4d75d0.  v0:= `@@x1.d0.c` @type ^`int`[] @kind object;
  #L4d75d4.  return v0 @kind object;
}
procedure `int`[] `f`() @signature `Lx1/d0;.f:()[I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L4d75e8.  v0:= `@@x1.d0.d` @type ^`int`[] @kind object;
  #L4d75ec.  return v0 @kind object;
}
procedure `int`[] `g`() @signature `Lx1/d0;.g:()[I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L4d7600.  v0:= `@@x1.d0.e` @type ^`int`[] @kind object;
  #L4d7604.  return v0 @kind object;
}
procedure `int`[] `h`() @signature `Lx1/d0;.h:()[I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L4d7618.  v0:= `@@x1.d0.f` @type ^`int`[] @kind object;
  #L4d761c.  return v0 @kind object;
}
procedure `int`[] `i`() @signature `Lx1/d0;.i:()[I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L4d7630.  v0:= `@@x1.d0.g` @type ^`int`[] @kind object;
  #L4d7634.  return v0 @kind object;
}
procedure `int` `j`(`int` v7 ) @signature `Lx1/d0;.j:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4d740c.  call temp:= `l`(v7) @signature `Lx1/d0;.l:(I)Z` @kind static;
  #L4d7412.  v0:= temp;
  #L4d7414.  v1:= -1I;
  #L4d7416.  if v0 != 0 then goto L4d741c;
  #L4d741a.  return v1;
  #L4d741c.  v0:= v7 ^>> 19;
  #L4d7420.  v2:= 3I;
  #L4d7422.  v0:= v0 ^& v2 @kind int;
  #L4d7424.  v3:= 1I;
  #L4d7426.  if v0 != v3 then goto L4d742c;
  #L4d742a.  return v1;
  #L4d742c.  v4:= v7 ^>> 17;
  #L4d7430.  v4:= v4 ^& v2 @kind int;
  #L4d7432.  if v4 != 0 then goto L4d7438;
  #L4d7436.  return v1;
  #L4d7438.  v5:= v7 ^>> 12;
  #L4d743c.  v6:= 15I;
  #L4d7440.  v5:= v5 ^& v6 @kind int;
  #L4d7442.  if v5 == 0 then goto L4d74f4;
  #L4d7446.  if v5 != v6 then goto L4d744c;
  #L4d744a.  goto L4d74f4;
  #L4d744c.  v6:= v7 ^>> 10;
  #L4d7450.  v6:= v6 ^& v2 @kind int;
  #L4d7452.  if v6 != v2 then goto L4d7458;
  #L4d7456.  return v1;
  #L4d7458.  v1:= `@@x1.d0.b` @type ^`int`[] @kind object;
  #L4d745c.  v1:= v1[v6];
  #L4d7460.  v6:= 2I;
  #L4d7462.  if v0 != v6 then goto L4d746c;
  #L4d7466.  v1:= v1 / 2;
  #L4d746a.  goto L4d7474;
  #L4d746c.  if v0 != 0 then goto L4d7474;
  #L4d7470.  v1:= v1 / 4;
  #L4d7474.  v7:= v7 ^>> 9;
  #L4d7478.  v7:= v7 ^& v3 @kind int;
  #L4d747a.  if v4 != v2 then goto L4d74a6;
  #L4d747e.  if v0 != v2 then goto L4d748e;
  #L4d7482.  v0:= `@@x1.d0.c` @type ^`int`[] @kind object;
  #L4d7486.  v5:= v5 - v3 @kind int;
  #L4d7488.  v0:= v0[v5];
  #L4d748c.  goto L4d7498;
  #L4d748e.  v0:= `@@x1.d0.d` @type ^`int`[] @kind object;
  #L4d7492.  v5:= v5 - v3 @kind int;
  #L4d7494.  v0:= v0[v5];
  #L4d7498.  v0:= v0 * 12;
  #L4d749c.  v0:= v0 / v1 @kind int;
  #L4d749e.  v0:= v0 + v7 @kind int;
  #L4d74a0.  v0:= v0 * 4;
  #L4d74a4.  return v0;
  #L4d74a6.  if v0 != v2 then goto L4d74c6;
  #L4d74aa.  if v4 != v6 then goto L4d74ba;
  #L4d74ae.  v6:= `@@x1.d0.e` @type ^`int`[] @kind object;
  #L4d74b2.  v5:= v5 - v3 @kind int;
  #L4d74b4.  v5:= v6[v5];
  #L4d74b8.  goto L4d74d0;
  #L4d74ba.  v6:= `@@x1.d0.f` @type ^`int`[] @kind object;
  #L4d74be.  v5:= v5 - v3 @kind int;
  #L4d74c0.  v5:= v6[v5];
  #L4d74c4.  goto L4d74d0;
  #L4d74c6.  v6:= `@@x1.d0.g` @type ^`int`[] @kind object;
  #L4d74ca.  v5:= v5 - v3 @kind int;
  #L4d74cc.  v5:= v6[v5];
  #L4d74d0.  v6:= 144I;
  #L4d74d4.  if v0 != v2 then goto L4d74e2;
  #L4d74d8.  v5:= v5 * 144;
  #L4d74dc.  v5:= v5 / v1 @kind int;
  #L4d74de.  v5:= v5 + v7 @kind int;
  #L4d74e0.  return v5;
  #L4d74e2.  if v4 != v3 then goto L4d74ea;
  #L4d74e6.  v6:= 72I;
  #L4d74ea.  v6:= v6 * v5 @kind int;
  #L4d74ee.  v6:= v6 / v1 @kind int;
  #L4d74f0.  v6:= v6 + v7 @kind int;
  #L4d74f2.  return v6;
  #L4d74f4.  return v1;
}
procedure `int` `k`(`int` v3 , `int` v4 ) @signature `Lx1/d0;.k:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4d7508.  v0:= 1I;
  #L4d750a.  v1:= 1152I;
  #L4d750e.  v2:= 3I;
  #L4d7510.  if v4 == v0 then goto L4d7532;
  #L4d7514.  v3:= 2I;
  #L4d7516.  if v4 == v3 then goto L4d7530;
  #L4d751a.  if v4 != v2 then goto L4d7524;
  #L4d751e.  v3:= 384I;
  #L4d7522.  return v3;
  #L4d7524.  v3:= new `java.lang.IllegalArgumentException`;
  #L4d7528.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4d752e.  throw v3;
  #L4d7530.  return v1;
  #L4d7532.  if v3 != v2 then goto L4d7538;
  #L4d7536.  goto L4d753c;
  #L4d7538.  v1:= 576I;
  #L4d753c.  return v1;
}
procedure `boolean` `l`(`int` v1 ) @signature `Lx1/d0;.l:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4d73cc.  v0:= -2097152I;
  #L4d73d0.  v1:= v1 ^& v0 @kind int;
  #L4d73d2.  if v1 != v0 then goto L4d73da;
  #L4d73d6.  v1:= 1I;
  #L4d73d8.  goto L4d73dc;
  #L4d73da.  v1:= 0I;
  #L4d73dc.  return v1;
}
procedure `int` `m`(`int` v6 ) @signature `Lx1/d0;.m:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d7550.  call temp:= `l`(v6) @signature `Lx1/d0;.l:(I)Z` @kind static;
  #L4d7556.  v0:= temp;
  #L4d7558.  v1:= -1I;
  #L4d755a.  if v0 != 0 then goto L4d7560;
  #L4d755e.  return v1;
  #L4d7560.  v0:= v6 ^>> 19;
  #L4d7564.  v2:= 3I;
  #L4d7566.  v0:= v0 ^& v2 @kind int;
  #L4d7568.  v3:= 1I;
  #L4d756a.  if v0 != v3 then goto L4d7570;
  #L4d756e.  return v1;
  #L4d7570.  v3:= v6 ^>> 17;
  #L4d7574.  v3:= v3 ^& v2 @kind int;
  #L4d7576.  if v3 != 0 then goto L4d757c;
  #L4d757a.  return v1;
  #L4d757c.  v4:= v6 ^>> 12;
  #L4d7580.  v5:= 15I;
  #L4d7584.  v4:= v4 ^& v5 @kind int;
  #L4d7586.  v6:= v6 ^>> 10;
  #L4d758a.  v6:= v6 ^& v2 @kind int;
  #L4d758c.  if v4 == 0 then goto L4d75a4;
  #L4d7590.  if v4 == v5 then goto L4d75a4;
  #L4d7594.  if v6 != v2 then goto L4d759a;
  #L4d7598.  goto L4d75a4;
  #L4d759a.  call temp:= `k`(v0, v3) @signature `Lx1/d0;.k:(II)I` @kind static;
  #L4d75a0.  v6:= temp;
  #L4d75a2.  return v6;
  #L4d75a4.  return v1;
}
