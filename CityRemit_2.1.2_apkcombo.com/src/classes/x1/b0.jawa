record `x1.b0` @kind class @AccessFlag FINAL extends `x1.w` @kind class {
}
global `int` `@@x1.b0.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx1/b0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d60c4.  v0:= NaNF;
  #L4d60c8.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L4d60ce.  v0:= temp;
  #L4d60d0.  `@@x1.b0.i` @type ^`int` := v0;
  #L4d60d4.  return @kind void;
}
procedure `void` `<init>`(`x1.b0` v0 @kind this) @signature `Lx1/b0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d60e8.  call `<init>`(v0) @signature `Lx1/w;.<init>:()V` @kind direct;
  #L4d60ee.  return @kind void;
}
procedure `void` `n`(`int` v4 , `java.nio.ByteBuffer` v5 @kind object) @signature `Lx1/b0;.n:(ILjava/nio/ByteBuffer;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d6220.  v0:= (`double`) v4 @kind i2d;
  #L4d6222.  v2:= 4.656612875245797E-10D;
  #L4d622c.  v0:= v0 * v2 @kind double;
  #L4d6230.  v4:= (`float`) v0 @kind d2f;
  #L4d6232.  call temp:= `floatToIntBits`(v4) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L4d6238.  v4:= temp;
  #L4d623a.  v0:= `@@x1.b0.i` @type ^`int`;
  #L4d623e.  if v4 != v0 then goto L4d624c;
  #L4d6242.  v4:= 0I;
  #L4d6244.  call temp:= `floatToIntBits`(v4) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L4d624a.  v4:= temp;
  #L4d624c.  call temp:= `putInt`(v5, v4) @signature `Ljava/nio/ByteBuffer;.putInt:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d6252.  return @kind void;
}
procedure `void` `g`(`x1.b0` v5 @kind this, `java.nio.ByteBuffer` v6 @kind object) @signature `Lx1/b0;.g:(Ljava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d6100.  call temp:= `position`(v6) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d6106.  v0:= temp;
  #L4d6108.  call temp:= `limit`(v6) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d610e.  v1:= temp;
  #L4d6110.  v2:= v1 - v0 @kind int;
  #L4d6114.  v3:= v5.`x1.w.b` @type ^`x1.f$a` @kind object;
  #L4d6118.  v3:= v3.`x1.f$a.c` @type ^`int`;
  #L4d611c.  v4:= 536870912I;
  #L4d6120.  if v3 == v4 then goto L4d619e;
  #L4d6124.  v4:= 805306368I;
  #L4d6128.  if v3 != v4 then goto L4d6192;
  #L4d612c.  call temp:= `m`(v5, v2) @signature `Lx1/w;.m:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d6132.  v2:= temp @kind object;
  #L4d6134.  if v0 >= v1 then goto L4d61fa;
  #L4d6138.  call temp:= `get`(v6, v0) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d613e.  v3:= temp;
  #L4d6140.  v3:= v3 ^& 255;
  #L4d6144.  v4:= v0 + 1;
  #L4d6148.  call temp:= `get`(v6, v4) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d614e.  v4:= temp;
  #L4d6150.  v4:= v4 ^& 255;
  #L4d6154.  v4:= v4 ^< 8;
  #L4d6158.  v3:= v3 ^| v4 @kind int;
  #L4d615a.  v4:= v0 + 2;
  #L4d615e.  call temp:= `get`(v6, v4) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d6164.  v4:= temp;
  #L4d6166.  v4:= v4 ^& 255;
  #L4d616a.  v4:= v4 ^< 16;
  #L4d616e.  v3:= v3 ^| v4 @kind int;
  #L4d6170.  v4:= v0 + 3;
  #L4d6174.  call temp:= `get`(v6, v4) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d617a.  v4:= temp;
  #L4d617c.  v4:= v4 ^& 255;
  #L4d6180.  v4:= v4 ^< 24;
  #L4d6184.  v3:= v3 ^| v4 @kind int;
  #L4d6186.  call `n`(v3, v2) @signature `Lx1/b0;.n:(ILjava/nio/ByteBuffer;)V` @kind static;
  #L4d618c.  v0:= v0 + 4;
  #L4d6190.  goto L4d6134;
  #L4d6192.  v6:= new `java.lang.IllegalStateException`;
  #L4d6196.  call `<init>`(v6) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L4d619c.  throw v6;
  #L4d619e.  v2:= v2 / 3;
  #L4d61a2.  v2:= v2 * 4;
  #L4d61a6.  call temp:= `m`(v5, v2) @signature `Lx1/w;.m:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d61ac.  v2:= temp @kind object;
  #L4d61ae.  if v0 >= v1 then goto L4d61fa;
  #L4d61b2.  call temp:= `get`(v6, v0) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d61b8.  v3:= temp;
  #L4d61ba.  v3:= v3 ^& 255;
  #L4d61be.  v3:= v3 ^< 8;
  #L4d61c2.  v4:= v0 + 1;
  #L4d61c6.  call temp:= `get`(v6, v4) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d61cc.  v4:= temp;
  #L4d61ce.  v4:= v4 ^& 255;
  #L4d61d2.  v4:= v4 ^< 16;
  #L4d61d6.  v3:= v3 ^| v4 @kind int;
  #L4d61d8.  v4:= v0 + 2;
  #L4d61dc.  call temp:= `get`(v6, v4) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d61e2.  v4:= temp;
  #L4d61e4.  v4:= v4 ^& 255;
  #L4d61e8.  v4:= v4 ^< 24;
  #L4d61ec.  v3:= v3 ^| v4 @kind int;
  #L4d61ee.  call `n`(v3, v2) @signature `Lx1/b0;.n:(ILjava/nio/ByteBuffer;)V` @kind static;
  #L4d61f4.  v0:= v0 + 3;
  #L4d61f8.  goto L4d61ae;
  #L4d61fa.  call temp:= `limit`(v6) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d6200.  v0:= temp;
  #L4d6202.  call temp:= `position`(v6, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d6208.  call temp:= `flip`(v2) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L4d620e.  return @kind void;
}
procedure `x1.f$a` `i`(`x1.b0` v3 @kind this, `x1.f$a` v4 @kind object) @signature `Lx1/b0;.i:(Lx1/f$a;)Lx1/f$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d6264.  v0:= v4.`x1.f$a.c` @type ^`int`;
  #L4d6268.  call temp:= `r0`(v0) @signature `Ls3/l0;.r0:(I)Z` @kind static;
  #L4d626e.  v1:= temp;
  #L4d6270.  if v1 == 0 then goto L4d6294;
  #L4d6274.  v1:= 4I;
  #L4d6276.  if v0 == v1 then goto L4d628e;
  #L4d627a.  v0:= new `x1.f$a`;
  #L4d627e.  v2:= v4.`x1.f$a.a` @type ^`int`;
  #L4d6282.  v4:= v4.`x1.f$a.b` @type ^`int`;
  #L4d6286.  call `<init>`(v0, v2, v4, v1) @signature `Lx1/f$a;.<init>:(III)V` @kind direct;
  #L4d628c.  goto L4d6292;
  #L4d628e.  v0:= `@@x1.f$a.e` @type ^`x1.f$a` @kind object;
  #L4d6292.  return v0 @kind object;
  #L4d6294.  v0:= new `x1.f$b`;
  #L4d6298.  call `<init>`(v0, v4) @signature `Lx1/f$b;.<init>:(Lx1/f$a;)V` @kind direct;
  #L4d629e.  throw v0;
}
