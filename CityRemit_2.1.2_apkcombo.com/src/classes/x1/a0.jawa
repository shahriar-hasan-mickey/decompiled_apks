record `x1.a0` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int`[] `@@x1.a0.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@x1.a0.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@x1.a0.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx1/a0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4d5f74.  v0:= 16I;
  #L4d5f78.  v1:= new `int`[v0];
  #L4d5f7c.  goto L4d5fa8;
  #L4d5f82.  `@@x1.a0.a` @type ^`int`[] := v1 @kind object;
  #L4d5f86.  v0:= new `int`[v0];
  #L4d5f8a.  goto L4d5ff0;
  #L4d5f90.  `@@x1.a0.b` @type ^`int`[] := v0 @kind object;
  #L4d5f94.  v0:= 29I;
  #L4d5f98.  v0:= new `int`[v0];
  #L4d5f9c.  goto L4d6038;
  #L4d5fa2.  `@@x1.a0.c` @type ^`int`[] := v0 @kind object;
  #L4d5fa6.  return @kind void;
  #L4d5fa8.  v1:= (1I, 2I, 2I, 2I, 2I, 3I, 3I, 4I, 4I, 5I, 6I, 6I, 6I, 7I, 8I, 8I) @kind object;
  #L4d5fef.  goto L4d5f82;
  #L4d5ff0.  v0:= (-1I, 8000I, 16000I, 32000I, -1I, -1I, 11025I, 22050I, 44100I, -1I, -1I, 12000I, 24000I, 48000I, -1I, -1I) @kind object;
  #L4d6037.  goto L4d5f90;
  #L4d6038.  v0:= (64I, 112I, 128I, 192I, 224I, 256I, 384I, 448I, 512I, 640I, 768I, 896I, 1024I, 1152I, 1280I, 1536I, 1920I, 2048I, 2304I, 2560I, 2688I, 2816I, 2823I, 2944I, 3072I, 3840I, 4096I, 6144I, 7680I) @kind object;
  #L4d60b3.  goto L4d5fa2;
}
procedure `int` `a`(`byte`[] v7 @kind object) @signature `Lx1/a0;.a:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4d5bc0.  v0:= 0I;
  #L4d5bc2.  v1:= v7[v0] @kind byte;
  #L4d5bc6.  v2:= -2I;
  #L4d5bc8.  v3:= 6I;
  #L4d5bca.  v4:= 7I;
  #L4d5bcc.  v5:= 1I;
  #L4d5bce.  v6:= 4I;
  #L4d5bd0.  if v1 == v2 then goto L4d5c54;
  #L4d5bd4.  v2:= -1I;
  #L4d5bd6.  if v1 == v2 then goto L4d5c24;
  #L4d5bda.  v2:= 31I;
  #L4d5bde.  if v1 == v2 then goto L4d5c02;
  #L4d5be2.  v1:= 5I;
  #L4d5be4.  v1:= v7[v1] @kind byte;
  #L4d5be8.  v1:= v1 ^& 3;
  #L4d5bec.  v1:= v1 ^< 12;
  #L4d5bf0.  v2:= v7[v3] @kind byte;
  #L4d5bf4.  v2:= v2 ^& 255;
  #L4d5bf8.  v2:= v2 ^< v6 @kind int;
  #L4d5bfa.  v1:= v1 ^| v2 @kind int;
  #L4d5bfc.  v7:= v7[v4] @kind byte;
  #L4d5c00.  goto L4d5c70;
  #L4d5c02.  v0:= v7[v3] @kind byte;
  #L4d5c06.  v0:= v0 ^& 3;
  #L4d5c0a.  v0:= v0 ^< 12;
  #L4d5c0e.  v1:= v7[v4] @kind byte;
  #L4d5c12.  v1:= v1 ^& 255;
  #L4d5c16.  v1:= v1 ^< v6 @kind int;
  #L4d5c18.  v0:= v0 ^| v1 @kind int;
  #L4d5c1a.  v1:= 8I;
  #L4d5c1e.  v7:= v7[v1] @kind byte;
  #L4d5c22.  goto L4d5c44;
  #L4d5c24.  v0:= v7[v4] @kind byte;
  #L4d5c28.  v0:= v0 ^& 3;
  #L4d5c2c.  v0:= v0 ^< 12;
  #L4d5c30.  v1:= v7[v3] @kind byte;
  #L4d5c34.  v1:= v1 ^& 255;
  #L4d5c38.  v1:= v1 ^< v6 @kind int;
  #L4d5c3a.  v0:= v0 ^| v1 @kind int;
  #L4d5c3c.  v1:= 9I;
  #L4d5c40.  v7:= v7[v1] @kind byte;
  #L4d5c44.  v7:= v7 ^& 60;
  #L4d5c48.  v7:= v7 ^> 2;
  #L4d5c4c.  v7:= v7 ^| v0 @kind int;
  #L4d5c4e.  v7:= v7 + v5 @kind int;
  #L4d5c50.  v0:= 1I;
  #L4d5c52.  goto L4d5c7a;
  #L4d5c54.  v1:= v7[v6] @kind byte;
  #L4d5c58.  v1:= v1 ^& 3;
  #L4d5c5c.  v1:= v1 ^< 12;
  #L4d5c60.  v2:= v7[v4] @kind byte;
  #L4d5c64.  v2:= v2 ^& 255;
  #L4d5c68.  v2:= v2 ^< v6 @kind int;
  #L4d5c6a.  v1:= v1 ^| v2 @kind int;
  #L4d5c6c.  v7:= v7[v3] @kind byte;
  #L4d5c70.  v7:= v7 ^& 240;
  #L4d5c74.  v7:= v7 ^> v6 @kind int;
  #L4d5c76.  v7:= v7 ^| v1 @kind int;
  #L4d5c78.  v7:= v7 + v5 @kind int;
  #L4d5c7a.  if v0 == 0 then goto L4d5c86;
  #L4d5c7e.  v7:= v7 * 16;
  #L4d5c82.  v7:= v7 / 14;
  #L4d5c86.  return v7;
}
procedure `s3.y` `b`(`byte`[] v5 @kind object) @signature `Lx1/a0;.b:([B)Ls3/y;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d5de0.  v0:= 0I;
  #L4d5de2.  v1:= v5[v0] @kind byte;
  #L4d5de6.  v2:= 127I;
  #L4d5dea.  if v1 != v2 then goto L4d5dfa;
  #L4d5dee.  v0:= new `s3.y`;
  #L4d5df2.  call `<init>`(v0, v5) @signature `Ls3/y;.<init>:([B)V` @kind direct;
  #L4d5df8.  return v0 @kind object;
  #L4d5dfa.  v1:= length @variable v5;
  #L4d5dfc.  call temp:= `copyOf`(v5, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L4d5e02.  v5:= temp @kind object;
  #L4d5e04.  call temp:= `c`(v5) @signature `Lx1/a0;.c:([B)Z` @kind static;
  #L4d5e0a.  v1:= temp;
  #L4d5e0c.  if v1 == 0 then goto L4d5e36;
  #L4d5e10.  v1:= 0I;
  #L4d5e12.  v2:= length @variable v5;
  #L4d5e14.  v2:= v2 + -1;
  #L4d5e18.  if v1 >= v2 then goto L4d5e36;
  #L4d5e1c.  v2:= v5[v1] @kind byte;
  #L4d5e20.  v3:= v1 + 1;
  #L4d5e24.  v4:= v5[v3] @kind byte;
  #L4d5e28.  v5[v1]:= v4 @kind byte;
  #L4d5e2c.  v5[v3]:= v2 @kind byte;
  #L4d5e30.  v1:= v1 + 2;
  #L4d5e34.  goto L4d5e12;
  #L4d5e36.  v1:= new `s3.y`;
  #L4d5e3a.  call `<init>`(v1, v5) @signature `Ls3/y;.<init>:([B)V` @kind direct;
  #L4d5e40.  v0:= v5[v0] @kind byte;
  #L4d5e44.  v2:= 31I;
  #L4d5e48.  if v0 != v2 then goto L4d5e82;
  #L4d5e4c.  v0:= new `s3.y`;
  #L4d5e50.  call `<init>`(v0, v5) @signature `Ls3/y;.<init>:([B)V` @kind direct;
  #L4d5e56.  call temp:= `b`(v0) @signature `Ls3/y;.b:()I` @kind virtual;
  #L4d5e5c.  v2:= temp;
  #L4d5e5e.  v3:= 16I;
  #L4d5e62.  if v2 < v3 then goto L4d5e82;
  #L4d5e66.  v2:= 2I;
  #L4d5e68.  call `r`(v0, v2) @signature `Ls3/y;.r:(I)V` @kind virtual;
  #L4d5e6e.  v2:= 14I;
  #L4d5e72.  call temp:= `h`(v0, v2) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d5e78.  v3:= temp;
  #L4d5e7a.  call `f`(v1, v3, v2) @signature `Ls3/y;.f:(II)V` @kind virtual;
  #L4d5e80.  goto L4d5e56;
  #L4d5e82.  call `n`(v1, v5) @signature `Ls3/y;.n:([B)V` @kind virtual;
  #L4d5e88.  return v1 @kind object;
}
procedure `boolean` `c`(`byte`[] v3 @kind object) @signature `Lx1/a0;.c:([B)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4d5b50.  v0:= 0I;
  #L4d5b52.  v1:= v3[v0] @kind byte;
  #L4d5b56.  v2:= -2I;
  #L4d5b58.  if v1 == v2 then goto L4d5b66;
  #L4d5b5c.  v3:= v3[v0] @kind byte;
  #L4d5b60.  v1:= -1I;
  #L4d5b62.  if v3 != v1 then goto L4d5b68;
  #L4d5b66.  v0:= 1I;
  #L4d5b68.  return v0;
}
procedure `boolean` `d`(`int` v1 ) @signature `Lx1/a0;.d:(I)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4d5b7c.  v0:= 2147385345I;
  #L4d5b82.  if v1 == v0 then goto L4d5baa;
  #L4d5b86.  v0:= -25230976I;
  #L4d5b8c.  if v1 == v0 then goto L4d5baa;
  #L4d5b90.  v0:= 536864768I;
  #L4d5b96.  if v1 == v0 then goto L4d5baa;
  #L4d5b9a.  v0:= -14745368I;
  #L4d5ba0.  if v1 != v0 then goto L4d5ba6;
  #L4d5ba4.  goto L4d5baa;
  #L4d5ba6.  v1:= 0I;
  #L4d5ba8.  goto L4d5bac;
  #L4d5baa.  v1:= 1I;
  #L4d5bac.  return v1;
}
procedure `int` `e`(`java.nio.ByteBuffer` v3 @kind object) @signature `Lx1/a0;.e:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4d5d1c.  call temp:= `position`(v3) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d5d22.  v0:= temp;
  #L4d5d24.  call temp:= `get`(v3, v0) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d5d2a.  v1:= temp;
  #L4d5d2c.  v2:= -2I;
  #L4d5d2e.  if v1 == v2 then goto L4d5d9a;
  #L4d5d32.  v2:= -1I;
  #L4d5d34.  if v1 == v2 then goto L4d5d74;
  #L4d5d38.  v2:= 31I;
  #L4d5d3c.  if v1 == v2 then goto L4d5d5a;
  #L4d5d40.  v1:= v0 + 4;
  #L4d5d44.  call temp:= `get`(v3, v1) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d5d4a.  v1:= temp;
  #L4d5d4c.  v1:= v1 ^& 1;
  #L4d5d50.  v1:= v1 ^< 6;
  #L4d5d54.  v0:= v0 + 5;
  #L4d5d58.  goto L4d5db2;
  #L4d5d5a.  v1:= v0 + 5;
  #L4d5d5e.  call temp:= `get`(v3, v1) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d5d64.  v1:= temp;
  #L4d5d66.  v1:= v1 ^& 7;
  #L4d5d6a.  v1:= v1 ^< 4;
  #L4d5d6e.  v0:= v0 + 6;
  #L4d5d72.  goto L4d5d8c;
  #L4d5d74.  v1:= v0 + 4;
  #L4d5d78.  call temp:= `get`(v3, v1) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d5d7e.  v1:= temp;
  #L4d5d80.  v1:= v1 ^& 7;
  #L4d5d84.  v1:= v1 ^< 4;
  #L4d5d88.  v0:= v0 + 7;
  #L4d5d8c.  call temp:= `get`(v3, v0) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d5d92.  v3:= temp;
  #L4d5d94.  v3:= v3 ^& 60;
  #L4d5d98.  goto L4d5dbe;
  #L4d5d9a.  v1:= v0 + 5;
  #L4d5d9e.  call temp:= `get`(v3, v1) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d5da4.  v1:= temp;
  #L4d5da6.  v1:= v1 ^& 1;
  #L4d5daa.  v1:= v1 ^< 6;
  #L4d5dae.  v0:= v0 + 4;
  #L4d5db2.  call temp:= `get`(v3, v0) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L4d5db8.  v3:= temp;
  #L4d5dba.  v3:= v3 ^& 252;
  #L4d5dbe.  v3:= v3 ^> 2;
  #L4d5dc2.  v3:= v3 ^| v1 @kind int;
  #L4d5dc4.  v3:= v3 + 1;
  #L4d5dc8.  v3:= v3 * 32;
  #L4d5dcc.  return v3;
}
procedure `int` `f`(`byte`[] v6 @kind object) @signature `Lx1/a0;.f:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d5c98.  v0:= 0I;
  #L4d5c9a.  v0:= v6[v0] @kind byte;
  #L4d5c9e.  v1:= -2I;
  #L4d5ca0.  v2:= 6I;
  #L4d5ca2.  v3:= 5I;
  #L4d5ca4.  v4:= 4I;
  #L4d5ca6.  if v0 == v1 then goto L4d5cea;
  #L4d5caa.  v1:= -1I;
  #L4d5cac.  v5:= 7I;
  #L4d5cae.  if v0 == v1 then goto L4d5cd8;
  #L4d5cb2.  v1:= 31I;
  #L4d5cb6.  if v0 == v1 then goto L4d5cca;
  #L4d5cba.  v0:= v6[v4] @kind byte;
  #L4d5cbe.  v0:= v0 ^& 1;
  #L4d5cc2.  v0:= v0 ^< v2 @kind int;
  #L4d5cc4.  v6:= v6[v3] @kind byte;
  #L4d5cc8.  goto L4d5cf8;
  #L4d5cca.  v0:= v6[v3] @kind byte;
  #L4d5cce.  v0:= v0 ^& v5 @kind int;
  #L4d5cd0.  v0:= v0 ^< v4 @kind int;
  #L4d5cd2.  v6:= v6[v2] @kind byte;
  #L4d5cd6.  goto L4d5ce4;
  #L4d5cd8.  v0:= v6[v4] @kind byte;
  #L4d5cdc.  v0:= v0 ^& v5 @kind int;
  #L4d5cde.  v0:= v0 ^< v4 @kind int;
  #L4d5ce0.  v6:= v6[v5] @kind byte;
  #L4d5ce4.  v6:= v6 ^& 60;
  #L4d5ce8.  goto L4d5cfc;
  #L4d5cea.  v0:= v6[v3] @kind byte;
  #L4d5cee.  v0:= v0 ^& 1;
  #L4d5cf2.  v0:= v0 ^< v2 @kind int;
  #L4d5cf4.  v6:= v6[v4] @kind byte;
  #L4d5cf8.  v6:= v6 ^& 252;
  #L4d5cfc.  v6:= v6 ^> 2;
  #L4d5d00.  v6:= v6 ^| v0 @kind int;
  #L4d5d02.  v6:= v6 + 1;
  #L4d5d06.  v6:= v6 * 32;
  #L4d5d0a.  return v6;
}
procedure `v1.j1` `g`(`byte`[] v6 @kind object, `java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object, `z1.m` v9 @kind object) @signature `Lx1/a0;.g:([BLjava/lang/String;Ljava/lang/String;Lz1/m;)Lv1/j1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d5e9c.  call temp:= `b`(v6) @signature `Lx1/a0;.b:([B)Ls3/y;` @kind static;
  #L4d5ea2.  v6:= temp @kind object;
  #L4d5ea4.  v0:= 60I;
  #L4d5ea8.  call `r`(v6, v0) @signature `Ls3/y;.r:(I)V` @kind virtual;
  #L4d5eae.  v0:= 6I;
  #L4d5eb0.  call temp:= `h`(v6, v0) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d5eb6.  v0:= temp;
  #L4d5eb8.  v1:= `@@x1.a0.a` @type ^`int`[] @kind object;
  #L4d5ebc.  v0:= v1[v0];
  #L4d5ec0.  v1:= 4I;
  #L4d5ec2.  call temp:= `h`(v6, v1) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d5ec8.  v1:= temp;
  #L4d5eca.  v2:= `@@x1.a0.b` @type ^`int`[] @kind object;
  #L4d5ece.  v1:= v2[v1];
  #L4d5ed2.  v2:= 5I;
  #L4d5ed4.  call temp:= `h`(v6, v2) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d5eda.  v2:= temp;
  #L4d5edc.  v3:= `@@x1.a0.c` @type ^`int`[] @kind object;
  #L4d5ee0.  v4:= length @variable v3;
  #L4d5ee2.  v5:= 2I;
  #L4d5ee4.  if v2 < v4 then goto L4d5eec;
  #L4d5ee8.  v2:= -1I;
  #L4d5eea.  goto L4d5ef6;
  #L4d5eec.  v2:= v3[v2];
  #L4d5ef0.  v2:= v2 * 1000;
  #L4d5ef4.  v2:= v2 / v5 @kind int;
  #L4d5ef6.  v3:= 10I;
  #L4d5efa.  call `r`(v6, v3) @signature `Ls3/y;.r:(I)V` @kind virtual;
  #L4d5f00.  call temp:= `h`(v6, v5) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L4d5f06.  v6:= temp;
  #L4d5f08.  if v6 <= 0 then goto L4d5f10;
  #L4d5f0c.  v6:= 1I;
  #L4d5f0e.  goto L4d5f12;
  #L4d5f10.  v6:= 0I;
  #L4d5f12.  v0:= v0 + v6 @kind int;
  #L4d5f14.  v6:= new `v1.j1$b`;
  #L4d5f18.  call `<init>`(v6) @signature `Lv1/j1$b;.<init>:()V` @kind direct;
  #L4d5f1e.  call temp:= `S`(v6, v7) @signature `Lv1/j1$b;.S:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L4d5f24.  v6:= temp @kind object;
  #L4d5f26.  v7:= "audio/vnd.dts" @kind object;
  #L4d5f2a.  call temp:= `e0`(v6, v7) @signature `Lv1/j1$b;.e0:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L4d5f30.  v6:= temp @kind object;
  #L4d5f32.  call temp:= `G`(v6, v2) @signature `Lv1/j1$b;.G:(I)Lv1/j1$b;` @kind virtual;
  #L4d5f38.  v6:= temp @kind object;
  #L4d5f3a.  call temp:= `H`(v6, v0) @signature `Lv1/j1$b;.H:(I)Lv1/j1$b;` @kind virtual;
  #L4d5f40.  v6:= temp @kind object;
  #L4d5f42.  call temp:= `f0`(v6, v1) @signature `Lv1/j1$b;.f0:(I)Lv1/j1$b;` @kind virtual;
  #L4d5f48.  v6:= temp @kind object;
  #L4d5f4a.  call temp:= `M`(v6, v9) @signature `Lv1/j1$b;.M:(Lz1/m;)Lv1/j1$b;` @kind virtual;
  #L4d5f50.  v6:= temp @kind object;
  #L4d5f52.  call temp:= `V`(v6, v8) @signature `Lv1/j1$b;.V:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L4d5f58.  v6:= temp @kind object;
  #L4d5f5a.  call temp:= `E`(v6) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L4d5f60.  v6:= temp @kind object;
  #L4d5f62.  return v6 @kind object;
}
