record `x1.w` @kind class @AccessFlag PUBLIC_ABSTRACT extends `x1.f` @kind interface {
  `x1.f$a` `x1.w.b` @AccessFlag PROTECTED;
  `x1.f$a` `x1.w.c` @AccessFlag PROTECTED;
  `x1.f$a` `x1.w.d` @AccessFlag PRIVATE;
  `x1.f$a` `x1.w.e` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `x1.w.f` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `x1.w.g` @AccessFlag PRIVATE;
  `boolean` `x1.w.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x1.w` v1 @kind this) @signature `Lx1/w;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d2964.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d296a.  v0:= `@@x1.f.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4d296e.  v1.`x1.w.f` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L4d2972.  v1.`x1.w.g` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L4d2976.  v0:= `@@x1.f$a.e` @type ^`x1.f$a` @kind object;
  #L4d297a.  v1.`x1.w.d` @type ^`x1.f$a` := v0 @kind object;
  #L4d297e.  v1.`x1.w.e` @type ^`x1.f$a` := v0 @kind object;
  #L4d2982.  v1.`x1.w.b` @type ^`x1.f$a` := v0 @kind object;
  #L4d2986.  v1.`x1.w.c` @type ^`x1.f$a` := v0 @kind object;
  #L4d298a.  return @kind void;
}
procedure `boolean` `a`(`x1.w` v2 @kind this) @signature `Lx1/w;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d28a0.  v0:= v2.`x1.w.e` @type ^`x1.f$a` @kind object;
  #L4d28a4.  v1:= `@@x1.f$a.e` @type ^`x1.f$a` @kind object;
  #L4d28a8.  if v0 == v1 then goto L4d28b0;
  #L4d28ac.  v0:= 1I;
  #L4d28ae.  goto L4d28b2;
  #L4d28b0.  v0:= 0I;
  #L4d28b2.  return v0;
}
procedure `boolean` `b`(`x1.w` v2 @kind this) @signature `Lx1/w;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d28c4.  v0:= v2.`x1.w.h` @type ^`boolean` @kind boolean;
  #L4d28c8.  if v0 == 0 then goto L4d28dc;
  #L4d28cc.  v0:= v2.`x1.w.g` @type ^`java.nio.ByteBuffer` @kind object;
  #L4d28d0.  v1:= `@@x1.f.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4d28d4.  if v0 != v1 then goto L4d28dc;
  #L4d28d8.  v0:= 1I;
  #L4d28da.  goto L4d28de;
  #L4d28dc.  v0:= 0I;
  #L4d28de.  return v0;
}
procedure `void` `c`(`x1.w` v1 @kind this) @signature `Lx1/w;.c:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4d2a30.  call `flush`(v1) @signature `Lx1/w;.flush:()V` @kind virtual;
  #L4d2a36.  v0:= `@@x1.f.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4d2a3a.  v1.`x1.w.f` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L4d2a3e.  v0:= `@@x1.f$a.e` @type ^`x1.f$a` @kind object;
  #L4d2a42.  v1.`x1.w.d` @type ^`x1.f$a` := v0 @kind object;
  #L4d2a46.  v1.`x1.w.e` @type ^`x1.f$a` := v0 @kind object;
  #L4d2a4a.  v1.`x1.w.b` @type ^`x1.f$a` := v0 @kind object;
  #L4d2a4e.  v1.`x1.w.c` @type ^`x1.f$a` := v0 @kind object;
  #L4d2a52.  call `l`(v1) @signature `Lx1/w;.l:()V` @kind virtual;
  #L4d2a58.  return @kind void;
}
procedure `x1.f$a` `d`(`x1.w` v0 @kind this, `x1.f$a` v1 @kind object) @signature `Lx1/w;.d:(Lx1/f$a;)Lx1/f$a;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4d2a6c.  v0.`x1.w.d` @type ^`x1.f$a` := v1 @kind object;
  #L4d2a70.  call temp:= `i`(v0, v1) @signature `Lx1/w;.i:(Lx1/f$a;)Lx1/f$a;` @kind virtual;
  #L4d2a76.  v1:= temp @kind object;
  #L4d2a78.  v0.`x1.w.e` @type ^`x1.f$a` := v1 @kind object;
  #L4d2a7c.  call temp:= `a`(v0) @signature `Lx1/w;.a:()Z` @kind virtual;
  #L4d2a82.  v1:= temp;
  #L4d2a84.  if v1 == 0 then goto L4d2a8e;
  #L4d2a88.  v1:= v0.`x1.w.e` @type ^`x1.f$a` @kind object;
  #L4d2a8c.  goto L4d2a92;
  #L4d2a8e.  v1:= `@@x1.f$a.e` @type ^`x1.f$a` @kind object;
  #L4d2a92.  return v1 @kind object;
}
procedure `java.nio.ByteBuffer` `e`(`x1.w` v2 @kind this) @signature `Lx1/w;.e:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d28f0.  v0:= v2.`x1.w.g` @type ^`java.nio.ByteBuffer` @kind object;
  #L4d28f4.  v1:= `@@x1.f.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4d28f8.  v2.`x1.w.g` @type ^`java.nio.ByteBuffer` := v1 @kind object;
  #L4d28fc.  return v0 @kind object;
}
procedure `void` `f`(`x1.w` v1 @kind this) @signature `Lx1/w;.f:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4d2a10.  v0:= 1I;
  #L4d2a12.  v1.`x1.w.h` @type ^`boolean` := v0 @kind boolean;
  #L4d2a16.  call `k`(v1) @signature `Lx1/w;.k:()V` @kind virtual;
  #L4d2a1c.  return @kind void;
}
procedure `void` `flush`(`x1.w` v1 @kind this) @signature `Lx1/w;.flush:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4d299c.  v0:= `@@x1.f.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4d29a0.  v1.`x1.w.g` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L4d29a4.  v0:= 0I;
  #L4d29a6.  v1.`x1.w.h` @type ^`boolean` := v0 @kind boolean;
  #L4d29aa.  v0:= v1.`x1.w.d` @type ^`x1.f$a` @kind object;
  #L4d29ae.  v1.`x1.w.b` @type ^`x1.f$a` := v0 @kind object;
  #L4d29b2.  v0:= v1.`x1.w.e` @type ^`x1.f$a` @kind object;
  #L4d29b6.  v1.`x1.w.c` @type ^`x1.f$a` := v0 @kind object;
  #L4d29ba.  call `j`(v1) @signature `Lx1/w;.j:()V` @kind virtual;
  #L4d29c0.  return @kind void;
}
procedure `boolean` `h`(`x1.w` v1 @kind this) @signature `Lx1/w;.h:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4d2880.  v0:= v1.`x1.w.g` @type ^`java.nio.ByteBuffer` @kind object;
  #L4d2884.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L4d288a.  v0:= temp;
  #L4d288c.  return v0;
}
procedure `x1.f$a` `i`(`x1.f$a` v0 @kind object) @signature `Lx1/w;.i:(Lx1/f$a;)Lx1/f$a;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `j`(`x1.w` v0 @kind this) @signature `Lx1/w;.j:()V` @AccessFlag PROTECTED {
    temp;

  #L4d29d4.  return @kind void;
}
procedure `void` `k`(`x1.w` v0 @kind this) @signature `Lx1/w;.k:()V` @AccessFlag PROTECTED {
    temp;

  #L4d29e8.  return @kind void;
}
procedure `void` `l`(`x1.w` v0 @kind this) @signature `Lx1/w;.l:()V` @AccessFlag PROTECTED {
    temp;

  #L4d29fc.  return @kind void;
}
procedure `java.nio.ByteBuffer` `m`(`x1.w` v1 @kind this, `int` v2 ) @signature `Lx1/w;.m:(I)Ljava/nio/ByteBuffer;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4d2910.  v0:= v1.`x1.w.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L4d2914.  call temp:= `capacity`(v0) @signature `Ljava/nio/ByteBuffer;.capacity:()I` @kind virtual;
  #L4d291a.  v0:= temp;
  #L4d291c.  if v0 >= v2 then goto L4d293e;
  #L4d2920.  call temp:= `allocateDirect`(v2) @signature `Ljava/nio/ByteBuffer;.allocateDirect:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4d2926.  v2:= temp @kind object;
  #L4d2928.  call temp:= `nativeOrder`() @signature `Ljava/nio/ByteOrder;.nativeOrder:()Ljava/nio/ByteOrder;` @kind static;
  #L4d292e.  v0:= temp @kind object;
  #L4d2930.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d2936.  v2:= temp @kind object;
  #L4d2938.  v1.`x1.w.f` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L4d293c.  goto L4d2948;
  #L4d293e.  v2:= v1.`x1.w.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L4d2942.  call temp:= `clear`(v2) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L4d2948.  v2:= v1.`x1.w.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L4d294c.  v1.`x1.w.g` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L4d2950.  return v2 @kind object;
}
