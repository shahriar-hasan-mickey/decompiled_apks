record `x1.y$g` @kind class @AccessFlag PUBLIC extends `x1.y$c` @kind interface {
  `x1.f`[] `x1.y$g.a` @AccessFlag PRIVATE_FINAL;
  `x1.g0` `x1.y$g.b` @AccessFlag PRIVATE_FINAL;
  `x1.i0` `x1.y$g.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`x1.y$g` v2 @kind this, `x1.f`[] v3 @kind object) @signature `Lx1/y$g;.<init>:([Lx1/f;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4d328c.  v0:= new `x1.g0`;
  #L4d3290.  call `<init>`(v0) @signature `Lx1/g0;.<init>:()V` @kind direct;
  #L4d3296.  v1:= new `x1.i0`;
  #L4d329a.  call `<init>`(v1) @signature `Lx1/i0;.<init>:()V` @kind direct;
  #L4d32a0.  call `<init>`(v2, v3, v0, v1) @signature `Lx1/y$g;.<init>:([Lx1/f;Lx1/g0;Lx1/i0;)V` @kind direct;
  #L4d32a6.  return @kind void;
}
procedure `void` `<init>`(`x1.y$g` v3 @kind this, `x1.f`[] v4 @kind object, `x1.g0` v5 @kind object, `x1.i0` v6 @kind object) @signature `Lx1/y$g;.<init>:([Lx1/f;Lx1/g0;Lx1/i0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4d32b8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d32be.  v0:= length @variable v4;
  #L4d32c0.  v0:= v0 + 2;
  #L4d32c4.  v0:= new `x1.f`[v0];
  #L4d32c8.  v3.`x1.y$g.a` @type ^`x1.f`[] := v0 @kind object;
  #L4d32cc.  v1:= length @variable v4;
  #L4d32ce.  v2:= 0I;
  #L4d32d0.  call `arraycopy`(v4, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4d32d6.  v3.`x1.y$g.b` @type ^`x1.g0` := v5 @kind object;
  #L4d32da.  v3.`x1.y$g.c` @type ^`x1.i0` := v6 @kind object;
  #L4d32de.  v1:= length @variable v4;
  #L4d32e0.  v0[v1]:= v5 @kind object;
  #L4d32e4.  v4:= length @variable v4;
  #L4d32e6.  v4:= v4 + 1;
  #L4d32ea.  v0[v4]:= v6 @kind object;
  #L4d32ee.  return @kind void;
}
procedure `v1.j2` `a`(`x1.y$g` v2 @kind this, `v1.j2` v3 @kind object) @signature `Lx1/y$g;.a:(Lv1/j2;)Lv1/j2;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d325c.  v0:= v2.`x1.y$g.c` @type ^`x1.i0` @kind object;
  #L4d3260.  v1:= v3.`v1.j2.o` @type ^`float`;
  #L4d3264.  call `j`(v0, v1) @signature `Lx1/i0;.j:(F)V` @kind virtual;
  #L4d326a.  v0:= v2.`x1.y$g.c` @type ^`x1.i0` @kind object;
  #L4d326e.  v1:= v3.`v1.j2.p` @type ^`float`;
  #L4d3272.  call `i`(v0, v1) @signature `Lx1/i0;.i:(F)V` @kind virtual;
  #L4d3278.  return v3 @kind object;
}
procedure `long` `b`(`x1.y$g` v2 @kind this) @signature `Lx1/y$g;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d323c.  v0:= v2.`x1.y$g.b` @type ^`x1.g0` @kind object;
  #L4d3240.  call temp:= `q`(v0) @signature `Lx1/g0;.q:()J` @kind virtual;
  #L4d3246.  v0:= temp @kind wide;
  #L4d3248.  return v0 @kind wide;
}
procedure `boolean` `c`(`x1.y$g` v1 @kind this, `boolean` v2 ) @signature `Lx1/y$g;.c:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3200.  v0:= v1.`x1.y$g.b` @type ^`x1.g0` @kind object;
  #L4d3204.  call `w`(v0, v2) @signature `Lx1/g0;.w:(Z)V` @kind virtual;
  #L4d320a.  return v2;
}
procedure `long` `d`(`x1.y$g` v1 @kind this, `long` v2 ) @signature `Lx1/y$g;.d:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d321c.  v0:= v1.`x1.y$g.c` @type ^`x1.i0` @kind object;
  #L4d3220.  call temp:= `h`(v0, v2) @signature `Lx1/i0;.h:(J)J` @kind virtual;
  #L4d3226.  v2:= temp @kind wide;
  #L4d3228.  return v2 @kind wide;
}
procedure `x1.f`[] `e`(`x1.y$g` v1 @kind this) @signature `Lx1/y$g;.e:()[Lx1/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3300.  v0:= v1.`x1.y$g.a` @type ^`x1.f`[] @kind object;
  #L4d3304.  return v0 @kind object;
}
