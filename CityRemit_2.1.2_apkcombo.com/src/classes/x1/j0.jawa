record `x1.j0` @kind class @AccessFlag FINAL extends `x1.w` @kind class {
  `int` `x1.j0.i` @AccessFlag PRIVATE;
  `int` `x1.j0.j` @AccessFlag PRIVATE;
  `boolean` `x1.j0.k` @AccessFlag PRIVATE;
  `int` `x1.j0.l` @AccessFlag PRIVATE;
  `byte`[] `x1.j0.m` @AccessFlag PRIVATE;
  `int` `x1.j0.n` @AccessFlag PRIVATE;
  `long` `x1.j0.o` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x1.j0` v1 @kind this) @signature `Lx1/j0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d900c.  call `<init>`(v1) @signature `Lx1/w;.<init>:()V` @kind direct;
  #L4d9012.  v0:= `@@s3.l0.f` @type ^`byte`[] @kind object;
  #L4d9016.  v1.`x1.j0.m` @type ^`byte`[] := v0 @kind object;
  #L4d901a.  return @kind void;
}
procedure `boolean` `b`(`x1.j0` v1 @kind this) @signature `Lx1/j0;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d8f74.  call temp:= `b`(v1) @signature `Lx1/w;.b:()Z` @kind super;
  #L4d8f7a.  v0:= temp;
  #L4d8f7c.  if v0 == 0 then goto L4d8f8c;
  #L4d8f80.  v0:= v1.`x1.j0.n` @type ^`int`;
  #L4d8f84.  if v0 != 0 then goto L4d8f8c;
  #L4d8f88.  v0:= 1I;
  #L4d8f8a.  goto L4d8f8e;
  #L4d8f8c.  v0:= 0I;
  #L4d8f8e.  return v0;
}
procedure `java.nio.ByteBuffer` `e`(`x1.j0` v4 @kind this) @signature `Lx1/j0;.e:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d8fa0.  call temp:= `b`(v4) @signature `Lx1/w;.b:()Z` @kind super;
  #L4d8fa6.  v0:= temp;
  #L4d8fa8.  if v0 == 0 then goto L4d8fd8;
  #L4d8fac.  v0:= v4.`x1.j0.n` @type ^`int`;
  #L4d8fb0.  if v0 <= 0 then goto L4d8fd8;
  #L4d8fb4.  call temp:= `m`(v4, v0) @signature `Lx1/w;.m:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d8fba.  v0:= temp @kind object;
  #L4d8fbc.  v1:= v4.`x1.j0.m` @type ^`byte`[] @kind object;
  #L4d8fc0.  v2:= v4.`x1.j0.n` @type ^`int`;
  #L4d8fc4.  v3:= 0I;
  #L4d8fc6.  call temp:= `put`(v0, v1, v3, v2) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d8fcc.  v0:= temp @kind object;
  #L4d8fce.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L4d8fd4.  v4.`x1.j0.n` @type ^`int` := v3;
  #L4d8fd8.  call temp:= `e`(v4) @signature `Lx1/w;.e:()Ljava/nio/ByteBuffer;` @kind super;
  #L4d8fde.  v0:= temp @kind object;
  #L4d8fe0.  return v0 @kind object;
}
procedure `void` `g`(`x1.j0` v8 @kind this, `java.nio.ByteBuffer` v9 @kind object) @signature `Lx1/j0;.g:(Ljava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4d90d0.  call temp:= `position`(v9) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d90d6.  v0:= temp;
  #L4d90d8.  call temp:= `limit`(v9) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4d90de.  v1:= temp;
  #L4d90e0.  v2:= v1 - v0 @kind int;
  #L4d90e4.  if v2 != 0 then goto L4d90ea;
  #L4d90e8.  return @kind void;
  #L4d90ea.  v3:= v8.`x1.j0.l` @type ^`int`;
  #L4d90ee.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4d90f4.  v3:= temp;
  #L4d90f6.  v4:= v8.`x1.j0.o` @type ^`long` @kind wide;
  #L4d90fa.  v6:= v8.`x1.w.b` @type ^`x1.f$a` @kind object;
  #L4d90fe.  v6:= v6.`x1.f$a.d` @type ^`int`;
  #L4d9102.  v6:= v3 / v6 @kind int;
  #L4d9106.  v6:= (`long`) v6 @kind i2l;
  #L4d9108.  v4:= v4 + v6 @kind long;
  #L4d910a.  v8.`x1.j0.o` @type ^`long` := v4 @kind wide;
  #L4d910e.  v4:= v8.`x1.j0.l` @type ^`int`;
  #L4d9112.  v4:= v4 - v3 @kind int;
  #L4d9114.  v8.`x1.j0.l` @type ^`int` := v4;
  #L4d9118.  v0:= v0 + v3 @kind int;
  #L4d911a.  call temp:= `position`(v9, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d9120.  v0:= v8.`x1.j0.l` @type ^`int`;
  #L4d9124.  if v0 <= 0 then goto L4d912a;
  #L4d9128.  return @kind void;
  #L4d912a.  v2:= v2 - v3 @kind int;
  #L4d912c.  v0:= v8.`x1.j0.n` @type ^`int`;
  #L4d9130.  v0:= v0 + v2 @kind int;
  #L4d9132.  v3:= v8.`x1.j0.m` @type ^`byte`[] @kind object;
  #L4d9136.  v3:= length @variable v3;
  #L4d9138.  v0:= v0 - v3 @kind int;
  #L4d913a.  call temp:= `m`(v8, v0) @signature `Lx1/w;.m:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d9140.  v3:= temp @kind object;
  #L4d9142.  v4:= v8.`x1.j0.n` @type ^`int`;
  #L4d9146.  v5:= 0I;
  #L4d9148.  call temp:= `q`(v0, v5, v4) @signature `Ls3/l0;.q:(III)I` @kind static;
  #L4d914e.  v4:= temp;
  #L4d9150.  v6:= v8.`x1.j0.m` @type ^`byte`[] @kind object;
  #L4d9154.  call temp:= `put`(v3, v6, v5, v4) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d915a.  v0:= v0 - v4 @kind int;
  #L4d915c.  call temp:= `q`(v0, v5, v2) @signature `Ls3/l0;.q:(III)I` @kind static;
  #L4d9162.  v0:= temp;
  #L4d9164.  call temp:= `position`(v9) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4d916a.  v6:= temp;
  #L4d916c.  v6:= v6 + v0 @kind int;
  #L4d916e.  call temp:= `limit`(v9, v6) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d9174.  call temp:= `put`(v3, v9) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d917a.  call temp:= `limit`(v9, v1) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4d9180.  v2:= v2 - v0 @kind int;
  #L4d9182.  v0:= v8.`x1.j0.n` @type ^`int`;
  #L4d9186.  v0:= v0 - v4 @kind int;
  #L4d9188.  v8.`x1.j0.n` @type ^`int` := v0;
  #L4d918c.  v1:= v8.`x1.j0.m` @type ^`byte`[] @kind object;
  #L4d9190.  call `arraycopy`(v1, v4, v1, v5, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4d9196.  v0:= v8.`x1.j0.m` @type ^`byte`[] @kind object;
  #L4d919a.  v1:= v8.`x1.j0.n` @type ^`int`;
  #L4d919e.  call temp:= `get`(v9, v0, v1, v2) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4d91a4.  v9:= v8.`x1.j0.n` @type ^`int`;
  #L4d91a8.  v9:= v9 + v2 @kind int;
  #L4d91aa.  v8.`x1.j0.n` @type ^`int` := v9;
  #L4d91ae.  call temp:= `flip`(v3) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L4d91b4.  return @kind void;
}
procedure `x1.f$a` `i`(`x1.j0` v2 @kind this, `x1.f$a` v3 @kind object) @signature `Lx1/j0;.i:(Lx1/f$a;)Lx1/f$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d9200.  v0:= v3.`x1.f$a.c` @type ^`int`;
  #L4d9204.  v1:= 2I;
  #L4d9206.  if v0 != v1 then goto L4d9228;
  #L4d920a.  v0:= 1I;
  #L4d920c.  v2.`x1.j0.k` @type ^`boolean` := v0 @kind boolean;
  #L4d9210.  v0:= v2.`x1.j0.i` @type ^`int`;
  #L4d9214.  if v0 != 0 then goto L4d9226;
  #L4d9218.  v0:= v2.`x1.j0.j` @type ^`int`;
  #L4d921c.  if v0 == 0 then goto L4d9222;
  #L4d9220.  goto L4d9226;
  #L4d9222.  v3:= `@@x1.f$a.e` @type ^`x1.f$a` @kind object;
  #L4d9226.  return v3 @kind object;
  #L4d9228.  v0:= new `x1.f$b`;
  #L4d922c.  call `<init>`(v0, v3) @signature `Lx1/f$b;.<init>:(Lx1/f$a;)V` @kind direct;
  #L4d9232.  throw v0;
}
procedure `void` `j`(`x1.j0` v3 @kind this) @signature `Lx1/j0;.j:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4d902c.  v0:= v3.`x1.j0.k` @type ^`boolean` @kind boolean;
  #L4d9030.  v1:= 0I;
  #L4d9032.  if v0 == 0 then goto L4d905e;
  #L4d9036.  v3.`x1.j0.k` @type ^`boolean` := v1 @kind boolean;
  #L4d903a.  v0:= v3.`x1.j0.j` @type ^`int`;
  #L4d903e.  v2:= v3.`x1.w.b` @type ^`x1.f$a` @kind object;
  #L4d9042.  v2:= v2.`x1.f$a.d` @type ^`int`;
  #L4d9046.  v0:= v0 * v2 @kind int;
  #L4d904a.  v0:= new `byte`[v0];
  #L4d904e.  v3.`x1.j0.m` @type ^`byte`[] := v0 @kind object;
  #L4d9052.  v0:= v3.`x1.j0.i` @type ^`int`;
  #L4d9056.  v0:= v0 * v2 @kind int;
  #L4d905a.  v3.`x1.j0.l` @type ^`int` := v0;
  #L4d905e.  v3.`x1.j0.n` @type ^`int` := v1;
  #L4d9062.  return @kind void;
}
procedure `void` `k`(`x1.j0` v5 @kind this) @signature `Lx1/j0;.k:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d9074.  v0:= v5.`x1.j0.k` @type ^`boolean` @kind boolean;
  #L4d9078.  if v0 == 0 then goto L4d90a0;
  #L4d907c.  v0:= v5.`x1.j0.n` @type ^`int`;
  #L4d9080.  if v0 <= 0 then goto L4d909a;
  #L4d9084.  v1:= v5.`x1.j0.o` @type ^`long` @kind wide;
  #L4d9088.  v3:= v5.`x1.w.b` @type ^`x1.f$a` @kind object;
  #L4d908c.  v3:= v3.`x1.f$a.d` @type ^`int`;
  #L4d9090.  v0:= v0 / v3 @kind int;
  #L4d9092.  v3:= (`long`) v0 @kind i2l;
  #L4d9094.  v1:= v1 + v3 @kind long;
  #L4d9096.  v5.`x1.j0.o` @type ^`long` := v1 @kind wide;
  #L4d909a.  v0:= 0I;
  #L4d909c.  v5.`x1.j0.n` @type ^`int` := v0;
  #L4d90a0.  return @kind void;
}
procedure `void` `l`(`x1.j0` v1 @kind this) @signature `Lx1/j0;.l:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4d90b4.  v0:= `@@s3.l0.f` @type ^`byte`[] @kind object;
  #L4d90b8.  v1.`x1.j0.m` @type ^`byte`[] := v0 @kind object;
  #L4d90bc.  return @kind void;
}
procedure `long` `n`(`x1.j0` v2 @kind this) @signature `Lx1/j0;.n:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d8ff4.  v0:= v2.`x1.j0.o` @type ^`long` @kind wide;
  #L4d8ff8.  return v0 @kind wide;
}
procedure `void` `o`(`x1.j0` v2 @kind this) @signature `Lx1/j0;.o:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d91c8.  v0:= 0L;
  #L4d91cc.  v2.`x1.j0.o` @type ^`long` := v0 @kind wide;
  #L4d91d0.  return @kind void;
}
procedure `void` `p`(`x1.j0` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lx1/j0;.p:(II)V` @AccessFlag PUBLIC {
    temp;

  #L4d91e4.  v0.`x1.j0.i` @type ^`int` := v1;
  #L4d91e8.  v0.`x1.j0.j` @type ^`int` := v2;
  #L4d91ec.  return @kind void;
}
