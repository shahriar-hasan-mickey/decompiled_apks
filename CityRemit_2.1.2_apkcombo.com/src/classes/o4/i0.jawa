record `o4.i0` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@o4.i0.o` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lo4/i0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3fbf6c.  v0:= 0I;
  #L3fbf6e.  v0:= new `java.lang.Object`[v0];
  #L3fbf72.  `@@o4.i0.o` @type ^`java.lang.Object`[] := v0 @kind object;
  #L3fbf76.  return @kind void;
}
procedure `void` `<init>`(`o4.i0` v0 @kind this) @signature `Lo4/i0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fbf88.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L3fbf8e.  return @kind void;
}
procedure `boolean` `add`(`o4.i0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo4/i0;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3fbe3c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3fbe40.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3fbe46.  throw v1;
}
procedure `boolean` `addAll`(`o4.i0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lo4/i0;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3fbe58.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3fbe5c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3fbe62.  throw v1;
}
procedure `int` `b`(`java.lang.Object`[] v0 @kind object, `int` v1 ) @signature `Lo4/i0;.b:([Ljava/lang/Object;I)I` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `clear`(`o4.i0` v1 @kind this) @signature `Lo4/i0;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3fbfa0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3fbfa4.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3fbfaa.  throw v0;
}
procedure `int` `f`() @signature `Lo4/i0;.f:()I` @AccessFlag ABSTRACT {

  # return;
}
procedure `int` `h`() @signature `Lo4/i0;.h:()I` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.lang.Object`[] `l`() @signature `Lo4/i0;.l:()[Ljava/lang/Object;` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `remove`(`o4.i0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo4/i0;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3fbe74.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3fbe78.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3fbe7e.  throw v1;
}
procedure `boolean` `removeAll`(`o4.i0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lo4/i0;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3fbe90.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3fbe94.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3fbe9a.  throw v1;
}
procedure `boolean` `retainAll`(`o4.i0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lo4/i0;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3fbeac.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3fbeb0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3fbeb6.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`o4.i0` v1 @kind this) @signature `Lo4/i0;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3fbec8.  v0:= `@@o4.i0.o` @type ^`java.lang.Object`[] @kind object;
  #L3fbecc.  call temp:= `toArray`(v1, v0) @signature `Lo4/i0;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L3fbed2.  v0:= temp @kind object;
  #L3fbed4.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`o4.i0` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lo4/i0;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3fbee8.  call temp:= `requireNonNull`(v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3fbeee.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L3fbef4.  v0:= temp;
  #L3fbef6.  v1:= length @variable v4;
  #L3fbef8.  if v1 >= v0 then goto L3fbf48;
  #L3fbefc.  call temp:= `l`(v3) @signature `Lo4/i0;.l:()[Ljava/lang/Object;` @kind virtual;
  #L3fbf02.  v1:= temp @kind object;
  #L3fbf04.  if v1 != 0 then goto L3fbf26;
  #L3fbf08.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3fbf0e.  v4:= temp @kind object;
  #L3fbf10.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L3fbf16.  v4:= temp @kind object;
  #L3fbf18.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L3fbf1e.  v4:= temp @kind object;
  #L3fbf20.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L3fbf24.  goto L3fbf52;
  #L3fbf26.  call temp:= `h`(v3) @signature `Lo4/i0;.h:()I` @kind virtual;
  #L3fbf2c.  v0:= temp;
  #L3fbf2e.  call temp:= `f`(v3) @signature `Lo4/i0;.f:()I` @kind virtual;
  #L3fbf34.  v2:= temp;
  #L3fbf36.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3fbf3c.  v4:= temp @kind object;
  #L3fbf3e.  call temp:= `copyOfRange`(v1, v0, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L3fbf44.  v4:= temp @kind object;
  #L3fbf46.  return v4 @kind object;
  #L3fbf48.  if v1 <= v0 then goto L3fbf52;
  #L3fbf4c.  v1:= 0I;
  #L3fbf4e.  v4[v0]:= v1 @kind object;
  #L3fbf52.  v0:= 0I;
  #L3fbf54.  call temp:= `b`(v3, v4, v0) @signature `Lo4/i0;.b:([Ljava/lang/Object;I)I` @kind virtual;
  #L3fbf5a.  return v4 @kind object;
}
