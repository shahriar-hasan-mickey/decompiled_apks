record `o4.f0` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Lo4/f0;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fb8e4.  if v5 < 0 then goto L3fb8f0;
  #L3fb8e8.  if v5 < v6 then goto L3fb8ee;
  #L3fb8ec.  goto L3fb8f0;
  #L3fb8ee.  return v5;
  #L3fb8f0.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L3fb8f4.  v0:= "index" @kind object;
  #L3fb8f8.  v1:= 1I;
  #L3fb8fa.  v2:= 0I;
  #L3fb8fc.  v3:= 2I;
  #L3fb8fe.  if v5 < 0 then goto L3fb968;
  #L3fb902.  if v6 >= 0 then goto L3fb938;
  #L3fb906.  v5:= new `java.lang.IllegalArgumentException`;
  #L3fb90a.  v7:= new `java.lang.StringBuilder`;
  #L3fb90e.  v0:= 26I;
  #L3fb912.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3fb918.  v0:= "negative size: " @kind object;
  #L3fb91c.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fb922.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fb928.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fb92e.  v6:= temp @kind object;
  #L3fb930.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fb936.  throw v5;
  #L3fb938.  v4:= 3I;
  #L3fb93a.  v4:= new `java.lang.Object`[v4];
  #L3fb93e.  v4[v2]:= v0 @kind object;
  #L3fb942.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fb948.  v5:= temp @kind object;
  #L3fb94a.  v4[v1]:= v5 @kind object;
  #L3fb94e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fb954.  v5:= temp @kind object;
  #L3fb956.  v4[v3]:= v5 @kind object;
  #L3fb95a.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L3fb95e.  call temp:= `a`(v5, v4) @signature `Lo4/g0;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3fb964.  v5:= temp @kind object;
  #L3fb966.  goto L3fb988;
  #L3fb968.  v6:= new `java.lang.Object`[v3];
  #L3fb96c.  v6[v2]:= v0 @kind object;
  #L3fb970.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fb976.  v5:= temp @kind object;
  #L3fb978.  v6[v1]:= v5 @kind object;
  #L3fb97c.  v5:= "%s (%s) must not be negative" @kind object;
  #L3fb980.  call temp:= `a`(v5, v6) @signature `Lo4/g0;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3fb986.  v5:= temp @kind object;
  #L3fb988.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fb98e.  throw v7;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Lo4/f0;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3fb9a0.  if v1 < 0 then goto L3fb9aa;
  #L3fb9a4.  if v1 > v2 then goto L3fb9aa;
  #L3fb9a8.  return v1;
  #L3fb9aa.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L3fb9ae.  v0:= "index" @kind object;
  #L3fb9b2.  call temp:= `d`(v1, v2, v0) @signature `Lo4/f0;.d:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L3fb9b8.  v1:= temp @kind object;
  #L3fb9ba.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fb9c0.  throw v3;
}
procedure `void` `c`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lo4/f0;.c:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3fba78.  if v2 < 0 then goto L3fba88;
  #L3fba7c.  if v3 < v2 then goto L3fba88;
  #L3fba80.  if v3 <= v4 then goto L3fba86;
  #L3fba84.  goto L3fba88;
  #L3fba86.  return @kind void;
  #L3fba88.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3fba8c.  if v2 < 0 then goto L3fbadc;
  #L3fba90.  if v2 > v4 then goto L3fbadc;
  #L3fba94.  if v3 < 0 then goto L3fbace;
  #L3fba98.  if v3 <= v4 then goto L3fba9e;
  #L3fba9c.  goto L3fbace;
  #L3fba9e.  v4:= 2I;
  #L3fbaa0.  v4:= new `java.lang.Object`[v4];
  #L3fbaa4.  v1:= 0I;
  #L3fbaa6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fbaac.  v3:= temp @kind object;
  #L3fbaae.  v4[v1]:= v3 @kind object;
  #L3fbab2.  v3:= 1I;
  #L3fbab4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fbaba.  v2:= temp @kind object;
  #L3fbabc.  v4[v3]:= v2 @kind object;
  #L3fbac0.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L3fbac4.  call temp:= `a`(v2, v4) @signature `Lo4/g0;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3fbaca.  v2:= temp @kind object;
  #L3fbacc.  goto L3fbae8;
  #L3fbace.  v2:= "end index" @kind object;
  #L3fbad2.  call temp:= `d`(v3, v4, v2) @signature `Lo4/f0;.d:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L3fbad8.  v2:= temp @kind object;
  #L3fbada.  goto L3fbae8;
  #L3fbadc.  v3:= "start index" @kind object;
  #L3fbae0.  call temp:= `d`(v2, v4, v3) @signature `Lo4/f0;.d:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L3fbae6.  v2:= temp @kind object;
  #L3fbae8.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbaee.  throw v0;
}
procedure `java.lang.String` `d`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Lo4/f0;.d:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fb9d4.  v0:= 1I;
  #L3fb9d6.  v1:= 0I;
  #L3fb9d8.  v2:= 2I;
  #L3fb9da.  if v4 >= 0 then goto L3fba00;
  #L3fb9de.  v5:= new `java.lang.Object`[v2];
  #L3fb9e2.  v5[v1]:= v6 @kind object;
  #L3fb9e6.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fb9ec.  v4:= temp @kind object;
  #L3fb9ee.  v5[v0]:= v4 @kind object;
  #L3fb9f2.  v4:= "%s (%s) must not be negative" @kind object;
  #L3fb9f6.  call temp:= `a`(v4, v5) @signature `Lo4/g0;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3fb9fc.  v4:= temp @kind object;
  #L3fb9fe.  return v4 @kind object;
  #L3fba00.  if v5 < 0 then goto L3fba34;
  #L3fba04.  v3:= 3I;
  #L3fba06.  v3:= new `java.lang.Object`[v3];
  #L3fba0a.  v3[v1]:= v6 @kind object;
  #L3fba0e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fba14.  v4:= temp @kind object;
  #L3fba16.  v3[v0]:= v4 @kind object;
  #L3fba1a.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fba20.  v4:= temp @kind object;
  #L3fba22.  v3[v2]:= v4 @kind object;
  #L3fba26.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L3fba2a.  call temp:= `a`(v4, v3) @signature `Lo4/g0;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3fba30.  v4:= temp @kind object;
  #L3fba32.  return v4 @kind object;
  #L3fba34.  v4:= new `java.lang.IllegalArgumentException`;
  #L3fba38.  v6:= new `java.lang.StringBuilder`;
  #L3fba3c.  v0:= 26I;
  #L3fba40.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3fba46.  v0:= "negative size: " @kind object;
  #L3fba4a.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fba50.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fba56.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fba5c.  v5:= temp @kind object;
  #L3fba5e.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fba64.  throw v4;
}
