record `o4.h0` @kind class @AccessFlag ABSTRACT extends `o4.p0` @kind class {
  `int` `o4.h0.o` @AccessFlag PRIVATE_FINAL;
  `int` `o4.h0.p` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`o4.h0` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lo4/h0;.<init>:(II)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L3fbe10.  call `<init>`(v1) @signature `Lo4/p0;.<init>:()V` @kind direct;
  #L3fbe16.  v0:= "index" @kind object;
  #L3fbe1a.  call temp:= `b`(v3, v2, v0) @signature `Lo4/f0;.b:(IILjava/lang/String;)I` @kind static;
  #L3fbe20.  v1.`o4.h0.o` @type ^`int` := v2;
  #L3fbe24.  v1.`o4.h0.p` @type ^`int` := v3;
  #L3fbe28.  return @kind void;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Lo4/h0;.a:(I)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`o4.h0` v2 @kind this) @signature `Lo4/h0;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3fbd18.  v0:= v2.`o4.h0.p` @type ^`int`;
  #L3fbd1c.  v1:= v2.`o4.h0.o` @type ^`int`;
  #L3fbd20.  if v0 >= v1 then goto L3fbd28;
  #L3fbd24.  v0:= 1I;
  #L3fbd26.  return v0;
  #L3fbd28.  v0:= 0I;
  #L3fbd2a.  return v0;
}
procedure `boolean` `hasPrevious`(`o4.h0` v1 @kind this) @signature `Lo4/h0;.hasPrevious:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3fbd3c.  v0:= v1.`o4.h0.p` @type ^`int`;
  #L3fbd40.  if v0 <= 0 then goto L3fbd48;
  #L3fbd44.  v0:= 1I;
  #L3fbd46.  return v0;
  #L3fbd48.  v0:= 0I;
  #L3fbd4a.  return v0;
}
procedure `java.lang.Object` `next`(`o4.h0` v2 @kind this) @signature `Lo4/h0;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3fbd90.  call temp:= `hasNext`(v2) @signature `Lo4/h0;.hasNext:()Z` @kind virtual;
  #L3fbd96.  v0:= temp;
  #L3fbd98.  if v0 == 0 then goto L3fbdb2;
  #L3fbd9c.  v0:= v2.`o4.h0.p` @type ^`int`;
  #L3fbda0.  v1:= v0 + 1;
  #L3fbda4.  v2.`o4.h0.p` @type ^`int` := v1;
  #L3fbda8.  call temp:= `a`(v2, v0) @signature `Lo4/h0;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L3fbdae.  v0:= temp @kind object;
  #L3fbdb0.  return v0 @kind object;
  #L3fbdb2.  v0:= new `java.util.NoSuchElementException`;
  #L3fbdb6.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3fbdbc.  throw v0;
}
procedure `int` `nextIndex`(`o4.h0` v1 @kind this) @signature `Lo4/h0;.nextIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3fbd5c.  v0:= v1.`o4.h0.p` @type ^`int`;
  #L3fbd60.  return v0;
}
procedure `java.lang.Object` `previous`(`o4.h0` v1 @kind this) @signature `Lo4/h0;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3fbdd0.  call temp:= `hasPrevious`(v1) @signature `Lo4/h0;.hasPrevious:()Z` @kind virtual;
  #L3fbdd6.  v0:= temp;
  #L3fbdd8.  if v0 == 0 then goto L3fbdf2;
  #L3fbddc.  v0:= v1.`o4.h0.p` @type ^`int`;
  #L3fbde0.  v0:= v0 + -1;
  #L3fbde4.  v1.`o4.h0.p` @type ^`int` := v0;
  #L3fbde8.  call temp:= `a`(v1, v0) @signature `Lo4/h0;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L3fbdee.  v0:= temp @kind object;
  #L3fbdf0.  return v0 @kind object;
  #L3fbdf2.  v0:= new `java.util.NoSuchElementException`;
  #L3fbdf6.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3fbdfc.  throw v0;
}
procedure `int` `previousIndex`(`o4.h0` v1 @kind this) @signature `Lo4/h0;.previousIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3fbd74.  v0:= v1.`o4.h0.p` @type ^`int`;
  #L3fbd78.  v0:= v0 + -1;
  #L3fbd7c.  return v0;
}
