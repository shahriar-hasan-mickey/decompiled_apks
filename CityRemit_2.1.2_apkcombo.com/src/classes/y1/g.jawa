record `y1.g` @kind class @AccessFlag PUBLIC extends `y1.a` @kind class {
  `y1.c` `y1.g.p` @AccessFlag PUBLIC_FINAL;
  `java.nio.ByteBuffer` `y1.g.q` @AccessFlag PUBLIC;
  `boolean` `y1.g.r` @AccessFlag PUBLIC;
  `long` `y1.g.s` @AccessFlag PUBLIC;
  `java.nio.ByteBuffer` `y1.g.t` @AccessFlag PUBLIC;
  `int` `y1.g.u` @AccessFlag PRIVATE_FINAL;
  `int` `y1.g.v` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Ly1/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f17e4.  v0:= "goog.exo.decoder" @kind object;
  #L4f17e8.  call `a`(v0) @signature `Lv1/g1;.a:(Ljava/lang/String;)V` @kind static;
  #L4f17ee.  return @kind void;
}
procedure `void` `<init>`(`y1.g` v1 @kind this, `int` v2 ) @signature `Ly1/g;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f1800.  v0:= 0I;
  #L4f1802.  call `<init>`(v1, v2, v0) @signature `Ly1/g;.<init>:(II)V` @kind direct;
  #L4f1808.  return @kind void;
}
procedure `void` `<init>`(`y1.g` v1 @kind this, `int` v2 , `int` v3 ) @signature `Ly1/g;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f181c.  call `<init>`(v1) @signature `Ly1/a;.<init>:()V` @kind direct;
  #L4f1822.  v0:= new `y1.c`;
  #L4f1826.  call `<init>`(v0) @signature `Ly1/c;.<init>:()V` @kind direct;
  #L4f182c.  v1.`y1.g.p` @type ^`y1.c` := v0 @kind object;
  #L4f1830.  v1.`y1.g.u` @type ^`int` := v2;
  #L4f1834.  v1.`y1.g.v` @type ^`int` := v3;
  #L4f1838.  return @kind void;
}
procedure `java.nio.ByteBuffer` `D`(`y1.g` v2 @kind this, `int` v3 ) @signature `Ly1/g;.D:(I)Ljava/nio/ByteBuffer;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4f1790.  v0:= v2.`y1.g.u` @type ^`int`;
  #L4f1794.  v1:= 1I;
  #L4f1796.  if v0 != v1 then goto L4f17a4;
  #L4f179a.  call temp:= `allocate`(v3) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4f17a0.  v3:= temp @kind object;
  #L4f17a2.  return v3 @kind object;
  #L4f17a4.  v1:= 2I;
  #L4f17a6.  if v0 != v1 then goto L4f17b4;
  #L4f17aa.  call temp:= `allocateDirect`(v3) @signature `Ljava/nio/ByteBuffer;.allocateDirect:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4f17b0.  v3:= temp @kind object;
  #L4f17b2.  return v3 @kind object;
  #L4f17b4.  v0:= v2.`y1.g.q` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f17b8.  if v0 != 0 then goto L4f17c0;
  #L4f17bc.  v0:= 0I;
  #L4f17be.  goto L4f17c8;
  #L4f17c0.  call temp:= `capacity`(v0) @signature `Ljava/nio/ByteBuffer;.capacity:()I` @kind virtual;
  #L4f17c6.  v0:= temp;
  #L4f17c8.  v1:= new `y1.g$a`;
  #L4f17cc.  call `<init>`(v1, v0, v3) @signature `Ly1/g$a;.<init>:(II)V` @kind direct;
  #L4f17d2.  throw v1;
}
procedure `y1.g` `L`() @signature `Ly1/g;.L:()Ly1/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4f196c.  v0:= new `y1.g`;
  #L4f1970.  v1:= 0I;
  #L4f1972.  call `<init>`(v0, v1) @signature `Ly1/g;.<init>:(I)V` @kind direct;
  #L4f1978.  return v0 @kind object;
}
procedure `void` `F`(`y1.g` v3 @kind this, `int` v4 ) @signature `Ly1/g;.F:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f1888.  v0:= v3.`y1.g.v` @type ^`int`;
  #L4f188c.  v4:= v4 + v0 @kind int;
  #L4f188e.  v0:= v3.`y1.g.q` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f1892.  if v0 != 0 then goto L4f18a4;
  #L4f1896.  call temp:= `D`(v3, v4) @signature `Ly1/g;.D:(I)Ljava/nio/ByteBuffer;` @kind direct;
  #L4f189c.  v4:= temp @kind object;
  #L4f189e.  v3.`y1.g.q` @type ^`java.nio.ByteBuffer` := v4 @kind object;
  #L4f18a2.  return @kind void;
  #L4f18a4.  call temp:= `capacity`(v0) @signature `Ljava/nio/ByteBuffer;.capacity:()I` @kind virtual;
  #L4f18aa.  v1:= temp;
  #L4f18ac.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4f18b2.  v2:= temp;
  #L4f18b4.  v4:= v4 + v2 @kind int;
  #L4f18b6.  if v1 < v4 then goto L4f18c0;
  #L4f18ba.  v3.`y1.g.q` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L4f18be.  return @kind void;
  #L4f18c0.  call temp:= `D`(v3, v4) @signature `Ly1/g;.D:(I)Ljava/nio/ByteBuffer;` @kind direct;
  #L4f18c6.  v4:= temp @kind object;
  #L4f18c8.  call temp:= `order`(v0) @signature `Ljava/nio/ByteBuffer;.order:()Ljava/nio/ByteOrder;` @kind virtual;
  #L4f18ce.  v1:= temp @kind object;
  #L4f18d0.  call temp:= `order`(v4, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4f18d6.  if v2 <= 0 then goto L4f18e6;
  #L4f18da.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L4f18e0.  call temp:= `put`(v4, v0) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4f18e6.  v3.`y1.g.q` @type ^`java.nio.ByteBuffer` := v4 @kind object;
  #L4f18ea.  return @kind void;
}
procedure `void` `I`(`y1.g` v1 @kind this) @signature `Ly1/g;.I:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4f18fc.  v0:= v1.`y1.g.q` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f1900.  if v0 == 0 then goto L4f190a;
  #L4f1904.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L4f190a.  v0:= v1.`y1.g.t` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f190e.  if v0 == 0 then goto L4f1918;
  #L4f1912.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L4f1918.  return @kind void;
}
procedure `boolean` `K`(`y1.g` v1 @kind this) @signature `Ly1/g;.K:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4f1770.  v0:= 2.0F;
  #L4f1774.  call temp:= `o`(v1, v0) @signature `Ly1/a;.o:(I)Z` @kind virtual;
  #L4f177a.  v0:= temp;
  #L4f177c.  return v0;
}
procedure `void` `P`(`y1.g` v1 @kind this, `int` v2 ) @signature `Ly1/g;.P:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f192c.  v0:= v1.`y1.g.t` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f1930.  if v0 == 0 then goto L4f194e;
  #L4f1934.  call temp:= `capacity`(v0) @signature `Ljava/nio/ByteBuffer;.capacity:()I` @kind virtual;
  #L4f193a.  v0:= temp;
  #L4f193c.  if v0 >= v2 then goto L4f1942;
  #L4f1940.  goto L4f194e;
  #L4f1942.  v2:= v1.`y1.g.t` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f1946.  call temp:= `clear`(v2) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L4f194c.  goto L4f195a;
  #L4f194e.  call temp:= `allocate`(v2) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4f1954.  v2:= temp @kind object;
  #L4f1956.  v1.`y1.g.t` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L4f195a.  return @kind void;
}
procedure `void` `j`(`y1.g` v1 @kind this) @signature `Ly1/g;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f184c.  call `j`(v1) @signature `Ly1/a;.j:()V` @kind super;
  #L4f1852.  v0:= v1.`y1.g.q` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f1856.  if v0 == 0 then goto L4f1860;
  #L4f185a.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L4f1860.  v0:= v1.`y1.g.t` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f1864.  if v0 == 0 then goto L4f186e;
  #L4f1868.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L4f186e.  v0:= 0I;
  #L4f1870.  v1.`y1.g.r` @type ^`boolean` := v0 @kind boolean;
  #L4f1874.  return @kind void;
}
