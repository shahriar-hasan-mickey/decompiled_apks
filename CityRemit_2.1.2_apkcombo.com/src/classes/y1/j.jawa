record `y1.j` @kind class @AccessFlag PUBLIC_ABSTRACT extends `y1.d` @kind interface {
  `java.lang.Thread` `y1.j.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `y1.j.b` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `y1.j.c` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `y1.j.d` @AccessFlag PRIVATE_FINAL;
  `y1.g`[] `y1.j.e` @AccessFlag PRIVATE_FINAL;
  `y1.h`[] `y1.j.f` @AccessFlag PRIVATE_FINAL;
  `int` `y1.j.g` @AccessFlag PRIVATE;
  `int` `y1.j.h` @AccessFlag PRIVATE;
  `y1.g` `y1.j.i` @AccessFlag PRIVATE;
  `y1.f` `y1.j.j` @AccessFlag PRIVATE;
  `boolean` `y1.j.k` @AccessFlag PRIVATE;
  `boolean` `y1.j.l` @AccessFlag PRIVATE;
  `int` `y1.j.m` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`y1.j` v3 @kind this, `y1.g`[] v4 @kind object, `y1.h`[] v5 @kind object) @signature `Ly1/j;.<init>:([Ly1/g;[Ly1/h;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4f1d04.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f1d0a.  v0:= new `java.lang.Object`;
  #L4f1d0e.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f1d14.  v3.`y1.j.b` @type ^`java.lang.Object` := v0 @kind object;
  #L4f1d18.  v0:= new `java.util.ArrayDeque`;
  #L4f1d1c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4f1d22.  v3.`y1.j.c` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L4f1d26.  v0:= new `java.util.ArrayDeque`;
  #L4f1d2a.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4f1d30.  v3.`y1.j.d` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L4f1d34.  v3.`y1.j.e` @type ^`y1.g`[] := v4 @kind object;
  #L4f1d38.  v4:= length @variable v4;
  #L4f1d3a.  v3.`y1.j.g` @type ^`int` := v4;
  #L4f1d3e.  v4:= 0I;
  #L4f1d40.  v0:= 0I;
  #L4f1d42.  v1:= v3.`y1.j.g` @type ^`int`;
  #L4f1d46.  if v0 >= v1 then goto L4f1d60;
  #L4f1d4a.  v1:= v3.`y1.j.e` @type ^`y1.g`[] @kind object;
  #L4f1d4e.  call temp:= `h`(v3) @signature `Ly1/j;.h:()Ly1/g;` @kind virtual;
  #L4f1d54.  v2:= temp @kind object;
  #L4f1d56.  v1[v0]:= v2 @kind object;
  #L4f1d5a.  v0:= v0 + 1;
  #L4f1d5e.  goto L4f1d42;
  #L4f1d60.  v3.`y1.j.f` @type ^`y1.h`[] := v5 @kind object;
  #L4f1d64.  v5:= length @variable v5;
  #L4f1d66.  v3.`y1.j.h` @type ^`int` := v5;
  #L4f1d6a.  v5:= v3.`y1.j.h` @type ^`int`;
  #L4f1d6e.  if v4 >= v5 then goto L4f1d88;
  #L4f1d72.  v5:= v3.`y1.j.f` @type ^`y1.h`[] @kind object;
  #L4f1d76.  call temp:= `i`(v3) @signature `Ly1/j;.i:()Ly1/h;` @kind virtual;
  #L4f1d7c.  v0:= temp @kind object;
  #L4f1d7e.  v5[v4]:= v0 @kind object;
  #L4f1d82.  v4:= v4 + 1;
  #L4f1d86.  goto L4f1d6a;
  #L4f1d88.  v4:= new `y1.j$a`;
  #L4f1d8c.  v5:= "ExoPlayer:SimpleDecoder" @kind object;
  #L4f1d90.  call `<init>`(v4, v3, v5) @signature `Ly1/j$a;.<init>:(Ly1/j;Ljava/lang/String;)V` @kind direct;
  #L4f1d96.  v3.`y1.j.a` @type ^`java.lang.Thread` := v4 @kind object;
  #L4f1d9a.  call `start`(v4) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L4f1da0.  return @kind void;
}
procedure `void` `f`(`y1.j` v0 @kind object) @signature `Ly1/j;.f:(Ly1/j;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4f1db4.  call `u`(v0) @signature `Ly1/j;.u:()V` @kind direct;
  #L4f1dba.  return @kind void;
}
procedure `boolean` `g`(`y1.j` v1 @kind this) @signature `Ly1/j;.g:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4f1b2c.  v0:= v1.`y1.j.c` @type ^`java.util.ArrayDeque` @kind object;
  #L4f1b30.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4f1b36.  v0:= temp;
  #L4f1b38.  if v0 != 0 then goto L4f1b48;
  #L4f1b3c.  v0:= v1.`y1.j.h` @type ^`int`;
  #L4f1b40.  if v0 <= 0 then goto L4f1b48;
  #L4f1b44.  v0:= 1I;
  #L4f1b46.  goto L4f1b4a;
  #L4f1b48.  v0:= 0I;
  #L4f1b4a.  return v0;
}
procedure `boolean` `l`(`y1.j` v6 @kind this) @signature `Ly1/j;.l:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f1b5c.  v0:= v6.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f1b60.  @monitorenter v0
  #L4f1b62.  v1:= v6.`y1.j.l` @type ^`boolean` @kind boolean;
  #L4f1b66.  if v1 != 0 then goto L4f1b82;
  #L4f1b6a.  call temp:= `g`(v6) @signature `Ly1/j;.g:()Z` @kind direct;
  #L4f1b70.  v1:= temp;
  #L4f1b72.  if v1 != 0 then goto L4f1b82;
  #L4f1b76.  v1:= v6.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f1b7a.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L4f1b80.  goto L4f1b62;
  #L4f1b82.  v1:= v6.`y1.j.l` @type ^`boolean` @kind boolean;
  #L4f1b86.  v2:= 0I;
  #L4f1b88.  if v1 == 0 then goto L4f1b90;
  #L4f1b8c.  @monitorexit v0
  #L4f1b8e.  return v2;
  #L4f1b90.  v1:= v6.`y1.j.c` @type ^`java.util.ArrayDeque` @kind object;
  #L4f1b94.  call temp:= `removeFirst`(v1) @signature `Ljava/util/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L4f1b9a.  v1:= temp @kind object;
  #L4f1b9c.  v1:= (`y1.g`) v1 @kind object;
  #L4f1ba0.  v3:= v6.`y1.j.f` @type ^`y1.h`[] @kind object;
  #L4f1ba4.  v4:= v6.`y1.j.h` @type ^`int`;
  #L4f1ba8.  v5:= 1I;
  #L4f1baa.  v4:= v4 - v5 @kind int;
  #L4f1bac.  v6.`y1.j.h` @type ^`int` := v4;
  #L4f1bb0.  v3:= v3[v4] @kind object;
  #L4f1bb4.  v4:= v6.`y1.j.k` @type ^`boolean` @kind boolean;
  #L4f1bb8.  v6.`y1.j.k` @type ^`boolean` := v2 @kind boolean;
  #L4f1bbc.  @monitorexit v0
  #L4f1bbe.  call temp:= `t`(v1) @signature `Ly1/a;.t:()Z` @kind virtual;
  #L4f1bc4.  v0:= temp;
  #L4f1bc6.  if v0 == 0 then goto L4f1bd4;
  #L4f1bca.  v0:= 4I;
  #L4f1bcc.  call `i`(v3, v0) @signature `Ly1/a;.i:(I)V` @kind virtual;
  #L4f1bd2.  goto L4f1c30;
  #L4f1bd4.  call temp:= `s`(v1) @signature `Ly1/a;.s:()Z` @kind virtual;
  #L4f1bda.  v0:= temp;
  #L4f1bdc.  if v0 == 0 then goto L4f1bea;
  #L4f1be0.  v0:= -2147483648I;
  #L4f1be4.  call `i`(v3, v0) @signature `Ly1/a;.i:(I)V` @kind virtual;
  #L4f1bea.  call temp:= `v`(v1) @signature `Ly1/a;.v:()Z` @kind virtual;
  #L4f1bf0.  v0:= temp;
  #L4f1bf2.  if v0 == 0 then goto L4f1c00;
  #L4f1bf6.  v0:= 134217728I;
  #L4f1bfa.  call `i`(v3, v0) @signature `Ly1/a;.i:(I)V` @kind virtual;
  #L4f1c00.  call temp:= `k`(v6, v1, v3, v4) @signature `Ly1/j;.k:(Ly1/g;Ly1/h;Z)Ly1/f;` @kind virtual;
  #L4f1c06.  v0:= temp @kind object;
  #L4f1c08.  goto L4f1c18;
  #L4f1c0a.  v0:= Exception @type ^`java.lang.OutOfMemoryError` @kind object;
  #L4f1c0c.  goto L4f1c10;
  #L4f1c0e.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L4f1c10.  call temp:= `j`(v6, v0) @signature `Ly1/j;.j:(Ljava/lang/Throwable;)Ly1/f;` @kind virtual;
  #L4f1c16.  v0:= temp @kind object;
  #L4f1c18.  if v0 == 0 then goto L4f1c30;
  #L4f1c1c.  v4:= v6.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f1c20.  @monitorenter v4
  #L4f1c22.  v6.`y1.j.j` @type ^`y1.f` := v0 @kind object;
  #L4f1c26.  @monitorexit v4
  #L4f1c28.  return v2;
  #L4f1c2a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f1c2c.  @monitorexit v4
  #L4f1c2e.  throw v0;
  #L4f1c30.  v4:= v6.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f1c34.  @monitorenter v4
  #L4f1c36.  v0:= v6.`y1.j.k` @type ^`boolean` @kind boolean;
  #L4f1c3a.  if v0 == 0 then goto L4f1c46;
  #L4f1c3e.  call `D`(v3) @signature `Ly1/h;.D:()V` @kind virtual;
  #L4f1c44.  goto L4f1c6c;
  #L4f1c46.  call temp:= `s`(v3) @signature `Ly1/a;.s:()Z` @kind virtual;
  #L4f1c4c.  v0:= temp;
  #L4f1c4e.  if v0 == 0 then goto L4f1c5e;
  #L4f1c52.  v0:= v6.`y1.j.m` @type ^`int`;
  #L4f1c56.  v0:= v0 + v5 @kind int;
  #L4f1c58.  v6.`y1.j.m` @type ^`int` := v0;
  #L4f1c5c.  goto L4f1c3e;
  #L4f1c5e.  v6.`y1.j.m` @type ^`int` := v2;
  #L4f1c62.  v0:= v6.`y1.j.d` @type ^`java.util.ArrayDeque` @kind object;
  #L4f1c66.  call `addLast`(v0, v3) @signature `Ljava/util/ArrayDeque;.addLast:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1c6c.  call `r`(v6, v1) @signature `Ly1/j;.r:(Ly1/g;)V` @kind direct;
  #L4f1c72.  @monitorexit v4
  #L4f1c74.  return v5;
  #L4f1c76.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f1c78.  @monitorexit v4
  #L4f1c7a.  throw v0;
  #L4f1c7c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f1c7e.  @monitorexit v0
  #L4f1c80.  throw v1;
  catch `java.lang.Throwable` @[L4f1b62..L4f1bbe] goto L4f1c7c;
  catch `java.lang.RuntimeException` @[L4f1c00..L4f1c08] goto L4f1c0e;
  catch `java.lang.OutOfMemoryError` @[L4f1c00..L4f1c08] goto L4f1c0a;
  catch `java.lang.Throwable` @[L4f1c22..L4f1c2e] goto L4f1c2a;
  catch `java.lang.Throwable` @[L4f1c36..L4f1c7a] goto L4f1c76;
  catch `java.lang.Throwable` @[L4f1c7e..L4f1c80] goto L4f1c7c;
}
procedure `void` `o`(`y1.j` v1 @kind this) @signature `Ly1/j;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4f1e68.  call temp:= `g`(v1) @signature `Ly1/j;.g:()Z` @kind direct;
  #L4f1e6e.  v0:= temp;
  #L4f1e70.  if v0 == 0 then goto L4f1e7e;
  #L4f1e74.  v0:= v1.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f1e78.  call `notify`(v0) @signature `Ljava/lang/Object;.notify:()V` @kind virtual;
  #L4f1e7e.  return @kind void;
}
procedure `void` `p`(`y1.j` v1 @kind this) @signature `Ly1/j;.p:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4f1e90.  v0:= v1.`y1.j.j` @type ^`y1.f` @kind object;
  #L4f1e94.  if v0 != 0 then goto L4f1e9a;
  #L4f1e98.  return @kind void;
  #L4f1e9a.  throw v0;
}
procedure `void` `r`(`y1.j` v3 @kind this, `y1.g` v4 @kind object) @signature `Ly1/j;.r:(Ly1/g;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4f1f90.  call `j`(v4) @signature `Ly1/g;.j:()V` @kind virtual;
  #L4f1f96.  v0:= v3.`y1.j.e` @type ^`y1.g`[] @kind object;
  #L4f1f9a.  v1:= v3.`y1.j.g` @type ^`int`;
  #L4f1f9e.  v2:= v1 + 1;
  #L4f1fa2.  v3.`y1.j.g` @type ^`int` := v2;
  #L4f1fa6.  v0[v1]:= v4 @kind object;
  #L4f1faa.  return @kind void;
}
procedure `void` `t`(`y1.j` v3 @kind this, `y1.h` v4 @kind object) @signature `Ly1/j;.t:(Ly1/h;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4f1ff4.  call `j`(v4) @signature `Ly1/a;.j:()V` @kind virtual;
  #L4f1ffa.  v0:= v3.`y1.j.f` @type ^`y1.h`[] @kind object;
  #L4f1ffe.  v1:= v3.`y1.j.h` @type ^`int`;
  #L4f2002.  v2:= v1 + 1;
  #L4f2006.  v3.`y1.j.h` @type ^`int` := v2;
  #L4f200a.  v0[v1]:= v4 @kind object;
  #L4f200e.  return @kind void;
}
procedure `void` `u`(`y1.j` v2 @kind this) @signature `Ly1/j;.u:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4f2020.  call temp:= `l`(v2) @signature `Ly1/j;.l:()Z` @kind direct;
  #L4f2026.  v0:= temp;
  #L4f2028.  if v0 == 0 then goto L4f202e;
  #L4f202c.  goto L4f2020;
  #L4f202e.  return @kind void;
  #L4f2030.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4f2032.  v1:= new `java.lang.IllegalStateException`;
  #L4f2036.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4f203c.  throw v1;
  catch `java.lang.InterruptedException` @[L4f2020..L4f2028] goto L4f2030;
}
procedure `void` `a`(`y1.j` v2 @kind this) @signature `Ly1/j;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1f24.  v0:= v2.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f1f28.  @monitorenter v0
  #L4f1f2a.  v1:= 1I;
  #L4f1f2c.  v2.`y1.j.l` @type ^`boolean` := v1 @kind boolean;
  #L4f1f30.  v1:= v2.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f1f34.  call `notify`(v1) @signature `Ljava/lang/Object;.notify:()V` @kind virtual;
  #L4f1f3a.  @monitorexit v0
  #L4f1f3c.  v0:= v2.`y1.j.a` @type ^`java.lang.Thread` @kind object;
  #L4f1f40.  call `join`(v0) @signature `Ljava/lang/Thread;.join:()V` @kind virtual;
  #L4f1f46.  goto L4f1f56;
  #L4f1f48.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4f1f4e.  v0:= temp @kind object;
  #L4f1f50.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L4f1f56.  return @kind void;
  #L4f1f58.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f1f5a.  @monitorexit v0
  #L4f1f5c.  throw v1;
  catch `java.lang.Throwable` @[L4f1f2c..L4f1f3c] goto L4f1f58;
  catch `java.lang.InterruptedException` @[L4f1f3c..L4f1f46] goto L4f1f48;
  catch `java.lang.Throwable` @[L4f1f5a..L4f1f5c] goto L4f1f58;
}
procedure `void` `c`(`y1.j` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ly1/j;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4f1eac.  v1:= (`y1.g`) v1 @kind object;
  #L4f1eb0.  call `q`(v0, v1) @signature `Ly1/j;.q:(Ly1/g;)V` @kind virtual;
  #L4f1eb6.  return @kind void;
}
procedure `java.lang.Object` `d`(`y1.j` v1 @kind this) @signature `Ly1/j;.d:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4f1ce8.  call temp:= `n`(v1) @signature `Ly1/j;.n:()Ly1/h;` @kind virtual;
  #L4f1cee.  v0:= temp @kind object;
  #L4f1cf0.  return v0 @kind object;
}
procedure `java.lang.Object` `e`(`y1.j` v1 @kind this) @signature `Ly1/j;.e:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4f1ccc.  call temp:= `m`(v1) @signature `Ly1/j;.m:()Ly1/g;` @kind virtual;
  #L4f1cd2.  v0:= temp @kind object;
  #L4f1cd4.  return v0 @kind object;
}
procedure `void` `flush`(`y1.j` v2 @kind this) @signature `Ly1/j;.flush:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4f1dcc.  v0:= v2.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f1dd0.  @monitorenter v0
  #L4f1dd2.  v1:= 1I;
  #L4f1dd4.  v2.`y1.j.k` @type ^`boolean` := v1 @kind boolean;
  #L4f1dd8.  v1:= 0I;
  #L4f1dda.  v2.`y1.j.m` @type ^`int` := v1;
  #L4f1dde.  v1:= v2.`y1.j.i` @type ^`y1.g` @kind object;
  #L4f1de2.  if v1 == 0 then goto L4f1df2;
  #L4f1de6.  call `r`(v2, v1) @signature `Ly1/j;.r:(Ly1/g;)V` @kind direct;
  #L4f1dec.  v1:= 0I;
  #L4f1dee.  v2.`y1.j.i` @type ^`y1.g` := v1 @kind object;
  #L4f1df2.  v1:= v2.`y1.j.c` @type ^`java.util.ArrayDeque` @kind object;
  #L4f1df6.  call temp:= `isEmpty`(v1) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4f1dfc.  v1:= temp;
  #L4f1dfe.  if v1 != 0 then goto L4f1e1a;
  #L4f1e02.  v1:= v2.`y1.j.c` @type ^`java.util.ArrayDeque` @kind object;
  #L4f1e06.  call temp:= `removeFirst`(v1) @signature `Ljava/util/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L4f1e0c.  v1:= temp @kind object;
  #L4f1e0e.  v1:= (`y1.g`) v1 @kind object;
  #L4f1e12.  call `r`(v2, v1) @signature `Ly1/j;.r:(Ly1/g;)V` @kind direct;
  #L4f1e18.  goto L4f1df2;
  #L4f1e1a.  v1:= v2.`y1.j.d` @type ^`java.util.ArrayDeque` @kind object;
  #L4f1e1e.  call temp:= `isEmpty`(v1) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4f1e24.  v1:= temp;
  #L4f1e26.  if v1 != 0 then goto L4f1e42;
  #L4f1e2a.  v1:= v2.`y1.j.d` @type ^`java.util.ArrayDeque` @kind object;
  #L4f1e2e.  call temp:= `removeFirst`(v1) @signature `Ljava/util/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L4f1e34.  v1:= temp @kind object;
  #L4f1e36.  v1:= (`y1.h`) v1 @kind object;
  #L4f1e3a.  call `D`(v1) @signature `Ly1/h;.D:()V` @kind virtual;
  #L4f1e40.  goto L4f1e1a;
  #L4f1e42.  @monitorexit v0
  #L4f1e44.  return @kind void;
  #L4f1e46.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f1e48.  @monitorexit v0
  #L4f1e4a.  throw v1;
  catch `java.lang.Throwable` @[L4f1dd4..L4f1e4a] goto L4f1e46;
}
procedure `y1.g` `h`() @signature `Ly1/j;.h:()Ly1/g;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `y1.h` `i`() @signature `Ly1/j;.i:()Ly1/h;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `y1.f` `j`(`java.lang.Throwable` v0 @kind object) @signature `Ly1/j;.j:(Ljava/lang/Throwable;)Ly1/f;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `y1.f` `k`(`y1.g` v0 @kind object, `y1.h` v1 @kind object, `boolean` v2 ) @signature `Ly1/j;.k:(Ly1/g;Ly1/h;Z)Ly1/f;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `y1.g` `m`(`y1.j` v4 @kind this) @signature `Ly1/j;.m:()Ly1/g;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f20a8.  v0:= v4.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f20ac.  @monitorenter v0
  #L4f20ae.  call `p`(v4) @signature `Ly1/j;.p:()V` @kind direct;
  #L4f20b4.  v1:= v4.`y1.j.i` @type ^`y1.g` @kind object;
  #L4f20b8.  v2:= 1I;
  #L4f20ba.  if v1 != 0 then goto L4f20c2;
  #L4f20be.  v1:= 1I;
  #L4f20c0.  goto L4f20c4;
  #L4f20c2.  v1:= 0I;
  #L4f20c4.  call `f`(v1) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L4f20ca.  v1:= v4.`y1.j.g` @type ^`int`;
  #L4f20ce.  if v1 != 0 then goto L4f20d6;
  #L4f20d2.  v1:= 0I;
  #L4f20d4.  goto L4f20e4;
  #L4f20d6.  v3:= v4.`y1.j.e` @type ^`y1.g`[] @kind object;
  #L4f20da.  v1:= v1 - v2 @kind int;
  #L4f20dc.  v4.`y1.j.g` @type ^`int` := v1;
  #L4f20e0.  v1:= v3[v1] @kind object;
  #L4f20e4.  v4.`y1.j.i` @type ^`y1.g` := v1 @kind object;
  #L4f20e8.  @monitorexit v0
  #L4f20ea.  return v1 @kind object;
  #L4f20ec.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f20ee.  @monitorexit v0
  #L4f20f0.  throw v1;
  catch `java.lang.Throwable` @[L4f20ae..L4f20f0] goto L4f20ec;
}
procedure `y1.h` `n`(`y1.j` v2 @kind this) @signature `Ly1/j;.n:()Ly1/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4f2110.  v0:= v2.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f2114.  @monitorenter v0
  #L4f2116.  call `p`(v2) @signature `Ly1/j;.p:()V` @kind direct;
  #L4f211c.  v1:= v2.`y1.j.d` @type ^`java.util.ArrayDeque` @kind object;
  #L4f2120.  call temp:= `isEmpty`(v1) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4f2126.  v1:= temp;
  #L4f2128.  if v1 == 0 then goto L4f2132;
  #L4f212c.  v1:= 0I;
  #L4f212e.  @monitorexit v0
  #L4f2130.  return v1 @kind object;
  #L4f2132.  v1:= v2.`y1.j.d` @type ^`java.util.ArrayDeque` @kind object;
  #L4f2136.  call temp:= `removeFirst`(v1) @signature `Ljava/util/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L4f213c.  v1:= temp @kind object;
  #L4f213e.  v1:= (`y1.h`) v1 @kind object;
  #L4f2142.  @monitorexit v0
  #L4f2144.  return v1 @kind object;
  #L4f2146.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f2148.  @monitorexit v0
  #L4f214a.  throw v1;
  catch `java.lang.Throwable` @[L4f2116..L4f214a] goto L4f2146;
}
procedure `void` `q`(`y1.j` v2 @kind this, `y1.g` v3 @kind object) @signature `Ly1/j;.q:(Ly1/g;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4f1ec8.  v0:= v2.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f1ecc.  @monitorenter v0
  #L4f1ece.  call `p`(v2) @signature `Ly1/j;.p:()V` @kind direct;
  #L4f1ed4.  v1:= v2.`y1.j.i` @type ^`y1.g` @kind object;
  #L4f1ed8.  if v3 != v1 then goto L4f1ee0;
  #L4f1edc.  v1:= 1I;
  #L4f1ede.  goto L4f1ee2;
  #L4f1ee0.  v1:= 0I;
  #L4f1ee2.  call `a`(v1) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L4f1ee8.  v1:= v2.`y1.j.c` @type ^`java.util.ArrayDeque` @kind object;
  #L4f1eec.  call `addLast`(v1, v3) @signature `Ljava/util/ArrayDeque;.addLast:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1ef2.  call `o`(v2) @signature `Ly1/j;.o:()V` @kind direct;
  #L4f1ef8.  v3:= 0I;
  #L4f1efa.  v2.`y1.j.i` @type ^`y1.g` := v3 @kind object;
  #L4f1efe.  @monitorexit v0
  #L4f1f00.  return @kind void;
  #L4f1f02.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f1f04.  @monitorexit v0
  #L4f1f06.  throw v3;
  catch `java.lang.Throwable` @[L4f1ece..L4f1f06] goto L4f1f02;
}
procedure `void` `s`(`y1.j` v1 @kind this, `y1.h` v2 @kind object) @signature `Ly1/j;.s:(Ly1/h;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4f1fbc.  v0:= v1.`y1.j.b` @type ^`java.lang.Object` @kind object;
  #L4f1fc0.  @monitorenter v0
  #L4f1fc2.  call `t`(v1, v2) @signature `Ly1/j;.t:(Ly1/h;)V` @kind direct;
  #L4f1fc8.  call `o`(v1) @signature `Ly1/j;.o:()V` @kind direct;
  #L4f1fce.  @monitorexit v0
  #L4f1fd0.  return @kind void;
  #L4f1fd2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f1fd4.  @monitorexit v0
  #L4f1fd6.  throw v2;
  catch `java.lang.Throwable` @[L4f1fc2..L4f1fd6] goto L4f1fd2;
}
procedure `void` `v`(`y1.j` v4 @kind this, `int` v5 ) @signature `Ly1/j;.v:(I)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f2060.  v0:= v4.`y1.j.g` @type ^`int`;
  #L4f2064.  v1:= v4.`y1.j.e` @type ^`y1.g`[] @kind object;
  #L4f2068.  v1:= length @variable v1;
  #L4f206a.  v2:= 0I;
  #L4f206c.  if v0 != v1 then goto L4f2074;
  #L4f2070.  v0:= 1I;
  #L4f2072.  goto L4f2076;
  #L4f2074.  v0:= 0I;
  #L4f2076.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L4f207c.  v0:= v4.`y1.j.e` @type ^`y1.g`[] @kind object;
  #L4f2080.  v1:= length @variable v0;
  #L4f2082.  if v2 >= v1 then goto L4f2096;
  #L4f2086.  v3:= v0[v2] @kind object;
  #L4f208a.  call `F`(v3, v5) @signature `Ly1/g;.F:(I)V` @kind virtual;
  #L4f2090.  v2:= v2 + 1;
  #L4f2094.  goto L4f2082;
  #L4f2096.  return @kind void;
}
