record `dc.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `dc.b` @kind interface {
}
procedure `void` `<init>`(`dc.a` v0 @kind this) @signature `Ldc/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2fbf2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2fbf32.  return @kind void;
}
procedure `java.lang.Object` `a`(`dc.a` v5 @kind this, `dc.c` v6 @kind object, `mb.d` v7 @kind object) @signature `Ldc/a;.a:(Ldc/c;Lmb/d;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fbe48.  v0:= instanceof @variable v7 @type ^`dc.a$a` @kind boolean;
  #L2fbe4c.  if v0 == 0 then goto L2fbe6e;
  #L2fbe50.  v0:= v7 @kind object;
  #L2fbe52.  v0:= (`dc.a$a`) v0 @kind object;
  #L2fbe56.  v1:= v0.`dc.a$a.r` @type ^`int`;
  #L2fbe5a.  v2:= -2147483648I;
  #L2fbe5e.  v3:= v1 ^& v2 @kind int;
  #L2fbe62.  if v3 == 0 then goto L2fbe6e;
  #L2fbe66.  v1:= v1 - v2 @kind int;
  #L2fbe68.  v0.`dc.a$a.r` @type ^`int` := v1;
  #L2fbe6c.  goto L2fbe78;
  #L2fbe6e.  v0:= new `dc.a$a`;
  #L2fbe72.  call `<init>`(v0, v5, v7) @signature `Ldc/a$a;.<init>:(Ldc/a;Lmb/d;)V` @kind direct;
  #L2fbe78.  v7:= v0.`dc.a$a.p` @type ^`java.lang.Object` @kind object;
  #L2fbe7c.  call temp:= `c`() @signature `Lnb/b;.c:()Ljava/lang/Object;` @kind static;
  #L2fbe82.  v1:= temp @kind object;
  #L2fbe84.  v2:= v0.`dc.a$a.r` @type ^`int`;
  #L2fbe88.  v3:= 1I;
  #L2fbe8a.  if v2 == 0 then goto L2fbeb6;
  #L2fbe8e.  if v2 != v3 then goto L2fbea6;
  #L2fbe92.  v6:= v0.`dc.a$a.o` @type ^`java.lang.Object` @kind object;
  #L2fbe96.  v6:= (`ec.c`) v6 @kind object;
  #L2fbe9a.  call `b`(v7) @signature `Ljb/n;.b:(Ljava/lang/Object;)V` @kind static;
  #L2fbea0.  goto L2fbee6;
  #L2fbea2.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fbea4.  goto L2fbefa;
  #L2fbea6.  v6:= new `java.lang.IllegalStateException`;
  #L2fbeaa.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2fbeae.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fbeb4.  throw v6;
  #L2fbeb6.  call `b`(v7) @signature `Ljb/n;.b:(Ljava/lang/Object;)V` @kind static;
  #L2fbebc.  v7:= new `ec.c`;
  #L2fbec0.  call temp:= `getContext`(v0) @signature `Lmb/d;.getContext:()Lmb/g;` @kind interface;
  #L2fbec6.  v2:= temp @kind object;
  #L2fbec8.  call `<init>`(v7, v6, v2) @signature `Lec/c;.<init>:(Ldc/c;Lmb/g;)V` @kind direct;
  #L2fbece.  v0.`dc.a$a.o` @type ^`java.lang.Object` := v7 @kind object;
  #L2fbed2.  v0.`dc.a$a.r` @type ^`int` := v3;
  #L2fbed6.  call temp:= `b`(v5, v7, v0) @signature `Ldc/a;.b:(Ldc/c;Lmb/d;)Ljava/lang/Object;` @kind virtual;
  #L2fbedc.  v6:= temp @kind object;
  #L2fbede.  if v6 != v1 then goto L2fbee4;
  #L2fbee2.  return v1 @kind object;
  #L2fbee4.  v6:= v7 @kind object;
  #L2fbee6.  call `releaseIntercepted`(v6) @signature `Lec/c;.releaseIntercepted:()V` @kind virtual;
  #L2fbeec.  v6:= `@@jb.s.a` @type ^`jb.s` @kind object;
  #L2fbef0.  return v6 @kind object;
  #L2fbef2.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fbef4.  v4:= v7 @kind object;
  #L2fbef6.  v7:= v6 @kind object;
  #L2fbef8.  v6:= v4 @kind object;
  #L2fbefa.  call `releaseIntercepted`(v6) @signature `Lec/c;.releaseIntercepted:()V` @kind virtual;
  #L2fbf00.  throw v7;
  catch `java.lang.Throwable` @[L2fbe9a..L2fbea0] goto L2fbea2;
  catch `java.lang.Throwable` @[L2fbece..L2fbede] goto L2fbef2;
}
procedure `java.lang.Object` `b`(`dc.c` v0 @kind object, `mb.d` v1 @kind object) @signature `Ldc/a;.b:(Ldc/c;Lmb/d;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
