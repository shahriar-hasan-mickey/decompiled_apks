record `dc.g` @kind class @AccessFlag FINAL extends `dc.a` @kind class {
  `tb.p` `dc.g.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`dc.g` v0 @kind this, `tb.p` v1 @kind object) @signature `Ldc/g;.<init>:(Ltb/p;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2fbfac.  call `<init>`(v0) @signature `Ldc/a;.<init>:()V` @kind direct;
  #L2fbfb2.  v0.`dc.g.o` @type ^`tb.p` := v1 @kind object;
  #L2fbfb6.  return @kind void;
}
procedure `java.lang.Object` `b`(`dc.g` v1 @kind this, `dc.c` v2 @kind object, `mb.d` v3 @kind object) @signature `Ldc/g;.b:(Ldc/c;Lmb/d;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fbf7c.  v0:= v1.`dc.g.o` @type ^`tb.p` @kind object;
  #L2fbf80.  call temp:= `invoke`(v0, v2, v3) @signature `Ltb/p;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fbf86.  v2:= temp @kind object;
  #L2fbf88.  call temp:= `c`() @signature `Lnb/b;.c:()Ljava/lang/Object;` @kind static;
  #L2fbf8e.  v3:= temp @kind object;
  #L2fbf90.  if v2 != v3 then goto L2fbf96;
  #L2fbf94.  return v2 @kind object;
  #L2fbf96.  v2:= `@@jb.s.a` @type ^`jb.s` @kind object;
  #L2fbf9a.  return v2 @kind object;
}
