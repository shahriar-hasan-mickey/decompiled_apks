record `i2.r` @kind class @AccessFlag FINAL {
  `i2.o` `i2.r.a` @AccessFlag PUBLIC_FINAL;
  `int` `i2.r.b` @AccessFlag PUBLIC_FINAL;
  `long`[] `i2.r.c` @AccessFlag PUBLIC_FINAL;
  `int`[] `i2.r.d` @AccessFlag PUBLIC_FINAL;
  `int` `i2.r.e` @AccessFlag PUBLIC_FINAL;
  `long`[] `i2.r.f` @AccessFlag PUBLIC_FINAL;
  `int`[] `i2.r.g` @AccessFlag PUBLIC_FINAL;
  `long` `i2.r.h` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`i2.r` v4 @kind this, `i2.o` v5 @kind object, `long`[] v6 @kind object, `int`[] v7 @kind object, `int` v8 , `long`[] v9 @kind object, `int`[] v10 @kind object, `long` v11 ) @signature `Li2/r;.<init>:(Li2/o;[J[II[J[IJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35bfb8.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35bfbe.  v0:= length @variable v7;
  #L35bfc0.  v1:= length @variable v9;
  #L35bfc2.  v2:= 0I;
  #L35bfc4.  v3:= 1I;
  #L35bfc6.  if v0 != v1 then goto L35bfce;
  #L35bfca.  v0:= 1I;
  #L35bfcc.  goto L35bfd0;
  #L35bfce.  v0:= 0I;
  #L35bfd0.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L35bfd6.  v0:= length @variable v6;
  #L35bfd8.  v1:= length @variable v9;
  #L35bfda.  if v0 != v1 then goto L35bfe2;
  #L35bfde.  v0:= 1I;
  #L35bfe0.  goto L35bfe4;
  #L35bfe2.  v0:= 0I;
  #L35bfe4.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L35bfea.  v0:= length @variable v10;
  #L35bfec.  v1:= length @variable v9;
  #L35bfee.  if v0 != v1 then goto L35bff4;
  #L35bff2.  v2:= 1I;
  #L35bff4.  call `a`(v2) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L35bffa.  v4.`i2.r.a` @type ^`i2.o` := v5 @kind object;
  #L35bffe.  v4.`i2.r.c` @type ^`long`[] := v6 @kind object;
  #L35c002.  v4.`i2.r.d` @type ^`int`[] := v7 @kind object;
  #L35c006.  v4.`i2.r.e` @type ^`int` := v8;
  #L35c00a.  v4.`i2.r.f` @type ^`long`[] := v9 @kind object;
  #L35c00e.  v4.`i2.r.g` @type ^`int`[] := v10 @kind object;
  #L35c012.  v4.`i2.r.h` @type ^`long` := v11 @kind wide;
  #L35c016.  v5:= length @variable v6;
  #L35c018.  v4.`i2.r.b` @type ^`int` := v5;
  #L35c01c.  v5:= length @variable v10;
  #L35c01e.  if v5 <= 0 then goto L35c034;
  #L35c022.  v5:= length @variable v10;
  #L35c024.  v5:= v5 - v3 @kind int;
  #L35c026.  v6:= v10[v5];
  #L35c02a.  v7:= 536870912I;
  #L35c02e.  v6:= v6 ^| v7 @kind int;
  #L35c030.  v10[v5]:= v6;
  #L35c034.  return @kind void;
}
procedure `int` `a`(`i2.r` v3 @kind this, `long` v4 ) @signature `Li2/r;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L35bf34.  v0:= v3.`i2.r.f` @type ^`long`[] @kind object;
  #L35bf38.  v1:= 1I;
  #L35bf3a.  v2:= 0I;
  #L35bf3c.  call temp:= `i`(v0, v4, v1, v2) @signature `Ls3/l0;.i:([JJZZ)I` @kind static;
  #L35bf42.  v4:= temp;
  #L35bf44.  if v4 < 0 then goto L35bf5e;
  #L35bf48.  v5:= v3.`i2.r.g` @type ^`int`[] @kind object;
  #L35bf4c.  v5:= v5[v4];
  #L35bf50.  v5:= v5 ^& v1 @kind int;
  #L35bf52.  if v5 == 0 then goto L35bf58;
  #L35bf56.  return v4;
  #L35bf58.  v4:= v4 + -1;
  #L35bf5c.  goto L35bf44;
  #L35bf5e.  v4:= -1I;
  #L35bf60.  return v4;
}
procedure `int` `b`(`i2.r` v3 @kind this, `long` v4 ) @signature `Li2/r;.b:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L35bf74.  v0:= v3.`i2.r.f` @type ^`long`[] @kind object;
  #L35bf78.  v1:= 1I;
  #L35bf7a.  v2:= 0I;
  #L35bf7c.  call temp:= `e`(v0, v4, v1, v2) @signature `Ls3/l0;.e:([JJZZ)I` @kind static;
  #L35bf82.  v4:= temp;
  #L35bf84.  v5:= v3.`i2.r.f` @type ^`long`[] @kind object;
  #L35bf88.  v5:= length @variable v5;
  #L35bf8a.  if v4 >= v5 then goto L35bfa4;
  #L35bf8e.  v5:= v3.`i2.r.g` @type ^`int`[] @kind object;
  #L35bf92.  v5:= v5[v4];
  #L35bf96.  v5:= v5 ^& v1 @kind int;
  #L35bf98.  if v5 == 0 then goto L35bf9e;
  #L35bf9c.  return v4;
  #L35bf9e.  v4:= v4 + 1;
  #L35bfa2.  goto L35bf84;
  #L35bfa4.  v4:= -1I;
  #L35bfa6.  return v4;
}
