record `i2.b$e` @kind class @AccessFlag FINAL extends `i2.b$c` @kind interface {
  `int` `i2.b$e.a` @AccessFlag PRIVATE_FINAL;
  `int` `i2.b$e.b` @AccessFlag PRIVATE_FINAL;
  `s3.z` `i2.b$e.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`i2.b$e` v3 @kind this, `i2.a$b` v4 @kind object, `v1.j1` v5 @kind object) @signature `Li2/b$e;.<init>:(Li2/a$b;Lv1/j1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3532c8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3532ce.  v4:= v4.`i2.a$b.b` @type ^`s3.z` @kind object;
  #L3532d2.  v3.`i2.b$e.c` @type ^`s3.z` := v4 @kind object;
  #L3532d6.  v0:= 12I;
  #L3532da.  call `O`(v4, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3532e0.  call temp:= `G`(v4) @signature `Ls3/z;.G:()I` @kind virtual;
  #L3532e6.  v0:= temp;
  #L3532e8.  v1:= v5.`v1.j1.z` @type ^`java.lang.String` @kind object;
  #L3532ec.  v2:= "audio/raw" @kind object;
  #L3532f0.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3532f6.  v1:= temp;
  #L3532f8.  if v1 == 0 then goto L353356;
  #L3532fc.  v1:= v5.`v1.j1.O` @type ^`int`;
  #L353300.  v5:= v5.`v1.j1.M` @type ^`int`;
  #L353304.  call temp:= `d0`(v1, v5) @signature `Ls3/l0;.d0:(II)I` @kind static;
  #L35330a.  v5:= temp;
  #L35330c.  if v0 == 0 then goto L353318;
  #L353310.  v1:= v0 %% v5 @kind int;
  #L353314.  if v1 == 0 then goto L353356;
  #L353318.  v1:= new `java.lang.StringBuilder`;
  #L35331c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L353322.  v2:= "Audio sample size mismatch. stsd sample size: " @kind object;
  #L353326.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35332c.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L353332.  v2:= ", stsz sample size: " @kind object;
  #L353336.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35333c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L353342.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L353348.  v0:= temp @kind object;
  #L35334a.  v1:= "AtomParsers" @kind object;
  #L35334e.  call `h`(v1, v0) @signature `Ls3/q;.h:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L353354.  v0:= v5;
  #L353356.  if v0 != 0 then goto L35335c;
  #L35335a.  v0:= -1I;
  #L35335c.  v3.`i2.b$e.a` @type ^`int` := v0;
  #L353360.  call temp:= `G`(v4) @signature `Ls3/z;.G:()I` @kind virtual;
  #L353366.  v4:= temp;
  #L353368.  v3.`i2.b$e.b` @type ^`int` := v4;
  #L35336c.  return @kind void;
}
procedure `int` `a`(`i2.b$e` v1 @kind this) @signature `Li2/b$e;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L353270.  v0:= v1.`i2.b$e.a` @type ^`int`;
  #L353274.  return v0;
}
procedure `int` `b`(`i2.b$e` v1 @kind this) @signature `Li2/b$e;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L353288.  v0:= v1.`i2.b$e.b` @type ^`int`;
  #L35328c.  return v0;
}
procedure `int` `c`(`i2.b$e` v2 @kind this) @signature `Li2/b$e;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3532a0.  v0:= v2.`i2.b$e.a` @type ^`int`;
  #L3532a4.  v1:= -1I;
  #L3532a6.  if v0 != v1 then goto L3532b6;
  #L3532aa.  v0:= v2.`i2.b$e.c` @type ^`s3.z` @kind object;
  #L3532ae.  call temp:= `G`(v0) @signature `Ls3/z;.G:()I` @kind virtual;
  #L3532b4.  v0:= temp;
  #L3532b6.  return v0;
}
