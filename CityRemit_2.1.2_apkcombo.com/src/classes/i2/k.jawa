record `i2.k` @kind class @AccessFlag PUBLIC_FINAL extends `a2.l` @kind interface, `a2.a0` @kind interface {
  `int` `i2.k.a` @AccessFlag PRIVATE_FINAL;
  `s3.z` `i2.k.b` @AccessFlag PRIVATE_FINAL;
  `s3.z` `i2.k.c` @AccessFlag PRIVATE_FINAL;
  `s3.z` `i2.k.d` @AccessFlag PRIVATE_FINAL;
  `s3.z` `i2.k.e` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `i2.k.f` @AccessFlag PRIVATE_FINAL;
  `i2.m` `i2.k.g` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `i2.k.h` @AccessFlag PRIVATE_FINAL;
  `int` `i2.k.i` @AccessFlag PRIVATE;
  `int` `i2.k.j` @AccessFlag PRIVATE;
  `long` `i2.k.k` @AccessFlag PRIVATE;
  `int` `i2.k.l` @AccessFlag PRIVATE;
  `s3.z` `i2.k.m` @AccessFlag PRIVATE;
  `int` `i2.k.n` @AccessFlag PRIVATE;
  `int` `i2.k.o` @AccessFlag PRIVATE;
  `int` `i2.k.p` @AccessFlag PRIVATE;
  `int` `i2.k.q` @AccessFlag PRIVATE;
  `a2.n` `i2.k.r` @AccessFlag PRIVATE;
  `i2.k$a`[] `i2.k.s` @AccessFlag PRIVATE;
  `long`[][] `i2.k.t` @AccessFlag PRIVATE;
  `int` `i2.k.u` @AccessFlag PRIVATE;
  `long` `i2.k.v` @AccessFlag PRIVATE;
  `int` `i2.k.w` @AccessFlag PRIVATE;
  `t2.b` `i2.k.x` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Li2/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L35a940.  v0:= `@@i2.i.b` @type ^`i2.i` @kind object;
  #L35a944.  return @kind void;
}
procedure `void` `<init>`(`i2.k` v1 @kind this) @signature `Li2/k;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L35a958.  v0:= 0I;
  #L35a95a.  call `<init>`(v1, v0) @signature `Li2/k;.<init>:(I)V` @kind direct;
  #L35a960.  return @kind void;
}
procedure `void` `<init>`(`i2.k` v3 @kind this, `int` v4 ) @signature `Li2/k;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L35a974.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35a97a.  v3.`i2.k.a` @type ^`int` := v4;
  #L35a97e.  v0:= 4I;
  #L35a980.  v4:= v4 ^& v0 @kind int;
  #L35a982.  v1:= 0I;
  #L35a984.  if v4 == 0 then goto L35a98c;
  #L35a988.  v4:= 3I;
  #L35a98a.  goto L35a98e;
  #L35a98c.  v4:= 0I;
  #L35a98e.  v3.`i2.k.i` @type ^`int` := v4;
  #L35a992.  v4:= new `i2.m`;
  #L35a996.  call `<init>`(v4) @signature `Li2/m;.<init>:()V` @kind direct;
  #L35a99c.  v3.`i2.k.g` @type ^`i2.m` := v4 @kind object;
  #L35a9a0.  v4:= new `java.util.ArrayList`;
  #L35a9a4.  call `<init>`(v4) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L35a9aa.  v3.`i2.k.h` @type ^`java.util.List` := v4 @kind object;
  #L35a9ae.  v4:= new `s3.z`;
  #L35a9b2.  v2:= 16I;
  #L35a9b6.  call `<init>`(v4, v2) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L35a9bc.  v3.`i2.k.e` @type ^`s3.z` := v4 @kind object;
  #L35a9c0.  v4:= new `java.util.ArrayDeque`;
  #L35a9c4.  call `<init>`(v4) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L35a9ca.  v3.`i2.k.f` @type ^`java.util.ArrayDeque` := v4 @kind object;
  #L35a9ce.  v4:= new `s3.z`;
  #L35a9d2.  v2:= `@@s3.v.a` @type ^`byte`[] @kind object;
  #L35a9d6.  call `<init>`(v4, v2) @signature `Ls3/z;.<init>:([B)V` @kind direct;
  #L35a9dc.  v3.`i2.k.b` @type ^`s3.z` := v4 @kind object;
  #L35a9e0.  v4:= new `s3.z`;
  #L35a9e4.  call `<init>`(v4, v0) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L35a9ea.  v3.`i2.k.c` @type ^`s3.z` := v4 @kind object;
  #L35a9ee.  v4:= new `s3.z`;
  #L35a9f2.  call `<init>`(v4) @signature `Ls3/z;.<init>:()V` @kind direct;
  #L35a9f8.  v3.`i2.k.d` @type ^`s3.z` := v4 @kind object;
  #L35a9fc.  v4:= -1I;
  #L35a9fe.  v3.`i2.k.n` @type ^`int` := v4;
  #L35aa02.  v4:= `@@a2.n.a` @type ^`a2.n` @kind object;
  #L35aa06.  v3.`i2.k.r` @type ^`a2.n` := v4 @kind object;
  #L35aa0a.  v4:= new `i2.k$a`[v1];
  #L35aa0e.  v3.`i2.k.s` @type ^`i2.k$a`[] := v4 @kind object;
  #L35aa12.  return @kind void;
}
procedure `void` `A`(`i2.k` v13 @kind this, `long` v14 ) @signature `Li2/k;.A:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L35ae94.  v0:= v13.`i2.k.j` @type ^`int`;
  #L35ae98.  v1:= 1836086884I;
  #L35ae9e.  if v0 != v1 then goto L35aed6;
  #L35aea2.  v0:= new `t2.b`;
  #L35aea6.  v3:= 0L;
  #L35aeaa.  v7:= -4.9E-324D;
  #L35aeb4.  v1:= v13.`i2.k.l` @type ^`int`;
  #L35aeb8.  v5:= (`long`) v1 @kind i2l;
  #L35aeba.  v9:= v14 + v5 @kind long;
  #L35aebe.  v5:= v13.`i2.k.k` @type ^`long` @kind wide;
  #L35aec2.  v1:= (`long`) v1 @kind i2l;
  #L35aec4.  v11:= v5 - v1 @kind long;
  #L35aec8.  v2:= v0 @kind object;
  #L35aeca.  v5:= v14 @kind wide;
  #L35aecc.  call `<init>`(v2, v3, v5, v7, v9, v11) @signature `Lt2/b;.<init>:(JJJJJ)V` @kind direct;
  #L35aed2.  v13.`i2.k.x` @type ^`t2.b` := v0 @kind object;
  #L35aed6.  return @kind void;
}
procedure `boolean` `B`(`i2.k` v8 @kind this, `a2.m` v9 @kind object) @signature `Li2/k;.B:(La2/m;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L359e64.  v0:= v8.`i2.k.l` @type ^`int`;
  #L359e68.  v1:= 1I;
  #L359e6a.  v2:= 8I;
  #L359e6e.  v3:= 0I;
  #L359e70.  if v0 != 0 then goto L359ec2;
  #L359e74.  v0:= v8.`i2.k.e` @type ^`s3.z` @kind object;
  #L359e78.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L359e7e.  v0:= temp @kind object;
  #L359e80.  call temp:= `f`(v9, v0, v3, v2, v1) @signature `La2/m;.f:([BIIZ)Z` @kind interface;
  #L359e86.  v0:= temp;
  #L359e88.  if v0 != 0 then goto L359e94;
  #L359e8c.  call `x`(v8) @signature `Li2/k;.x:()V` @kind direct;
  #L359e92.  return v3;
  #L359e94.  v8.`i2.k.l` @type ^`int` := v2;
  #L359e98.  v0:= v8.`i2.k.e` @type ^`s3.z` @kind object;
  #L359e9c.  call `O`(v0, v3) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L359ea2.  v0:= v8.`i2.k.e` @type ^`s3.z` @kind object;
  #L359ea6.  call temp:= `E`(v0) @signature `Ls3/z;.E:()J` @kind virtual;
  #L359eac.  v4:= temp @kind wide;
  #L359eae.  v8.`i2.k.k` @type ^`long` := v4 @kind wide;
  #L359eb2.  v0:= v8.`i2.k.e` @type ^`s3.z` @kind object;
  #L359eb6.  call temp:= `m`(v0) @signature `Ls3/z;.m:()I` @kind virtual;
  #L359ebc.  v0:= temp;
  #L359ebe.  v8.`i2.k.j` @type ^`int` := v0;
  #L359ec2.  v4:= v8.`i2.k.k` @type ^`long` @kind wide;
  #L359ec6.  v6:= 1L;
  #L359eca.  v0:= lcmp(v4, v6);
  #L359ece.  if v0 != 0 then goto L359f00;
  #L359ed2.  v0:= v8.`i2.k.e` @type ^`s3.z` @kind object;
  #L359ed6.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L359edc.  v0:= temp @kind object;
  #L359ede.  call `readFully`(v9, v0, v2, v2) @signature `La2/m;.readFully:([BII)V` @kind interface;
  #L359ee4.  v0:= v8.`i2.k.l` @type ^`int`;
  #L359ee8.  v0:= v0 + v2 @kind int;
  #L359eea.  v8.`i2.k.l` @type ^`int` := v0;
  #L359eee.  v0:= v8.`i2.k.e` @type ^`s3.z` @kind object;
  #L359ef2.  call temp:= `H`(v0) @signature `Ls3/z;.H:()J` @kind virtual;
  #L359ef8.  v4:= temp @kind wide;
  #L359efa.  v8.`i2.k.k` @type ^`long` := v4 @kind wide;
  #L359efe.  goto L359f54;
  #L359f00.  v6:= 0L;
  #L359f04.  v0:= lcmp(v4, v6);
  #L359f08.  if v0 != 0 then goto L359f54;
  #L359f0c.  call temp:= `a`(v9) @signature `La2/m;.a:()J` @kind interface;
  #L359f12.  v4:= temp @kind wide;
  #L359f14.  v6:= -1L;
  #L359f18.  v0:= lcmp(v4, v6);
  #L359f1c.  if v0 != 0 then goto L359f38;
  #L359f20.  v0:= v8.`i2.k.f` @type ^`java.util.ArrayDeque` @kind object;
  #L359f24.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L359f2a.  v0:= temp @kind object;
  #L359f2c.  v0:= (`i2.a$a`) v0 @kind object;
  #L359f30.  if v0 == 0 then goto L359f38;
  #L359f34.  v4:= v0.`i2.a$a.b` @type ^`long` @kind wide;
  #L359f38.  v0:= lcmp(v4, v6);
  #L359f3c.  if v0 == 0 then goto L359f54;
  #L359f40.  call temp:= `q`(v9) @signature `La2/m;.q:()J` @kind interface;
  #L359f46.  v6:= temp @kind wide;
  #L359f48.  v4:= v4 - v6 @kind long;
  #L359f4a.  v0:= v8.`i2.k.l` @type ^`int`;
  #L359f4e.  v6:= (`long`) v0 @kind i2l;
  #L359f50.  v4:= v4 + v6 @kind long;
  #L359f52.  goto L359efa;
  #L359f54.  v4:= v8.`i2.k.k` @type ^`long` @kind wide;
  #L359f58.  v0:= v8.`i2.k.l` @type ^`int`;
  #L359f5c.  v6:= (`long`) v0 @kind i2l;
  #L359f5e.  v0:= lcmp(v4, v6);
  #L359f62.  if v0 < 0 then goto L35a074;
  #L359f66.  v0:= v8.`i2.k.j` @type ^`int`;
  #L359f6a.  call temp:= `F`(v0) @signature `Li2/k;.F:(I)Z` @kind static;
  #L359f70.  v0:= temp;
  #L359f72.  if v0 == 0 then goto L359fe4;
  #L359f76.  call temp:= `q`(v9) @signature `La2/m;.q:()J` @kind interface;
  #L359f7c.  v2:= temp @kind wide;
  #L359f7e.  v4:= v8.`i2.k.k` @type ^`long` @kind wide;
  #L359f82.  v2:= v2 + v4 @kind long;
  #L359f84.  v0:= v8.`i2.k.l` @type ^`int`;
  #L359f88.  v6:= (`long`) v0 @kind i2l;
  #L359f8a.  v2:= v2 - v6 @kind long;
  #L359f8c.  v6:= (`long`) v0 @kind i2l;
  #L359f8e.  v0:= lcmp(v4, v6);
  #L359f92.  if v0 == 0 then goto L359faa;
  #L359f96.  v0:= v8.`i2.k.j` @type ^`int`;
  #L359f9a.  v4:= 1835365473I;
  #L359fa0.  if v0 != v4 then goto L359faa;
  #L359fa4.  call `v`(v8, v9) @signature `Li2/k;.v:(La2/m;)V` @kind direct;
  #L359faa.  v9:= v8.`i2.k.f` @type ^`java.util.ArrayDeque` @kind object;
  #L359fae.  v0:= new `i2.a$a`;
  #L359fb2.  v4:= v8.`i2.k.j` @type ^`int`;
  #L359fb6.  call `<init>`(v0, v4, v2) @signature `Li2/a$a;.<init>:(IJ)V` @kind direct;
  #L359fbc.  call `push`(v9, v0) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L359fc2.  v4:= v8.`i2.k.k` @type ^`long` @kind wide;
  #L359fc6.  v9:= v8.`i2.k.l` @type ^`int`;
  #L359fca.  v6:= (`long`) v9 @kind i2l;
  #L359fcc.  v9:= lcmp(v4, v6);
  #L359fd0.  if v9 != 0 then goto L359fdc;
  #L359fd4.  call `w`(v8, v2) @signature `Li2/k;.w:(J)V` @kind direct;
  #L359fda.  goto L35a072;
  #L359fdc.  call `o`(v8) @signature `Li2/k;.o:()V` @kind direct;
  #L359fe2.  goto L35a072;
  #L359fe4.  v0:= v8.`i2.k.j` @type ^`int`;
  #L359fe8.  call temp:= `G`(v0) @signature `Li2/k;.G:(I)Z` @kind static;
  #L359fee.  v0:= temp;
  #L359ff0.  if v0 == 0 then goto L35a052;
  #L359ff4.  v9:= v8.`i2.k.l` @type ^`int`;
  #L359ff8.  if v9 != v2 then goto L35a000;
  #L359ffc.  v9:= 1I;
  #L359ffe.  goto L35a002;
  #L35a000.  v9:= 0I;
  #L35a002.  call `f`(v9) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L35a008.  v4:= v8.`i2.k.k` @type ^`long` @kind wide;
  #L35a00c.  v6:= 2147483647L;
  #L35a012.  v9:= lcmp(v4, v6);
  #L35a016.  if v9 > 0 then goto L35a01e;
  #L35a01a.  v9:= 1I;
  #L35a01c.  goto L35a020;
  #L35a01e.  v9:= 0I;
  #L35a020.  call `f`(v9) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L35a026.  v9:= new `s3.z`;
  #L35a02a.  v4:= v8.`i2.k.k` @type ^`long` @kind wide;
  #L35a02e.  v0:= (`int`) v4 @kind l2i;
  #L35a030.  call `<init>`(v9, v0) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L35a036.  v0:= v8.`i2.k.e` @type ^`s3.z` @kind object;
  #L35a03a.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L35a040.  v0:= temp @kind object;
  #L35a042.  call temp:= `d`(v9) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L35a048.  v4:= temp @kind object;
  #L35a04a.  call `arraycopy`(v0, v3, v4, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L35a050.  goto L35a06a;
  #L35a052.  call temp:= `q`(v9) @signature `La2/m;.q:()J` @kind interface;
  #L35a058.  v2:= temp @kind wide;
  #L35a05a.  v9:= v8.`i2.k.l` @type ^`int`;
  #L35a05e.  v4:= (`long`) v9 @kind i2l;
  #L35a060.  v2:= v2 - v4 @kind long;
  #L35a062.  call `A`(v8, v2) @signature `Li2/k;.A:(J)V` @kind direct;
  #L35a068.  v9:= 0I;
  #L35a06a.  v8.`i2.k.m` @type ^`s3.z` := v9 @kind object;
  #L35a06e.  v8.`i2.k.i` @type ^`int` := v1;
  #L35a072.  return v1;
  #L35a074.  v9:= "Atom size less than header length (unsupported)." @kind object;
  #L35a078.  call temp:= `d`(v9) @signature `Lv1/e2;.d:(Ljava/lang/String;)Lv1/e2;` @kind static;
  #L35a07e.  v9:= temp @kind object;
  #L35a080.  throw v9;
}
procedure `boolean` `C`(`i2.k` v9 @kind this, `a2.m` v10 @kind object, `a2.z` v11 @kind object) @signature `Li2/k;.C:(La2/m;La2/z;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L35a094.  v0:= v9.`i2.k.k` @type ^`long` @kind wide;
  #L35a098.  v2:= v9.`i2.k.l` @type ^`int`;
  #L35a09c.  v2:= (`long`) v2 @kind i2l;
  #L35a09e.  v0:= v0 - v2 @kind long;
  #L35a0a0.  call temp:= `q`(v10) @signature `La2/m;.q:()J` @kind interface;
  #L35a0a6.  v2:= temp @kind wide;
  #L35a0a8.  v2:= v2 + v0 @kind long;
  #L35a0aa.  v4:= v9.`i2.k.m` @type ^`s3.z` @kind object;
  #L35a0ae.  v5:= 1I;
  #L35a0b0.  v6:= 0I;
  #L35a0b2.  if v4 == 0 then goto L35a11c;
  #L35a0b6.  call temp:= `d`(v4) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L35a0bc.  v11:= temp @kind object;
  #L35a0be.  v7:= v9.`i2.k.l` @type ^`int`;
  #L35a0c2.  v1:= (`int`) v0 @kind l2i;
  #L35a0c4.  call `readFully`(v10, v11, v7, v1) @signature `La2/m;.readFully:([BII)V` @kind interface;
  #L35a0ca.  v10:= v9.`i2.k.j` @type ^`int`;
  #L35a0ce.  v11:= 1718909296I;
  #L35a0d4.  if v10 != v11 then goto L35a0e6;
  #L35a0d8.  call temp:= `y`(v4) @signature `Li2/k;.y:(Ls3/z;)I` @kind static;
  #L35a0de.  v10:= temp;
  #L35a0e0.  v9.`i2.k.w` @type ^`int` := v10;
  #L35a0e4.  goto L35a132;
  #L35a0e6.  v10:= v9.`i2.k.f` @type ^`java.util.ArrayDeque` @kind object;
  #L35a0ea.  call temp:= `isEmpty`(v10) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L35a0f0.  v10:= temp;
  #L35a0f2.  if v10 != 0 then goto L35a132;
  #L35a0f6.  v10:= v9.`i2.k.f` @type ^`java.util.ArrayDeque` @kind object;
  #L35a0fa.  call temp:= `peek`(v10) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L35a100.  v10:= temp @kind object;
  #L35a102.  v10:= (`i2.a$a`) v10 @kind object;
  #L35a106.  v11:= new `i2.a$b`;
  #L35a10a.  v0:= v9.`i2.k.j` @type ^`int`;
  #L35a10e.  call `<init>`(v11, v0, v4) @signature `Li2/a$b;.<init>:(ILs3/z;)V` @kind direct;
  #L35a114.  call `e`(v10, v11) @signature `Li2/a$a;.e:(Li2/a$b;)V` @kind virtual;
  #L35a11a.  goto L35a132;
  #L35a11c.  v7:= 262144L;
  #L35a122.  v4:= lcmp(v0, v7);
  #L35a126.  if v4 >= 0 then goto L35a136;
  #L35a12a.  v11:= (`int`) v0 @kind l2i;
  #L35a12c.  call `j`(v10, v11) @signature `La2/m;.j:(I)V` @kind interface;
  #L35a132.  v10:= 0I;
  #L35a134.  goto L35a146;
  #L35a136.  call temp:= `q`(v10) @signature `La2/m;.q:()J` @kind interface;
  #L35a13c.  v7:= temp @kind wide;
  #L35a13e.  v7:= v7 + v0 @kind long;
  #L35a140.  v11.`a2.z.a` @type ^`long` := v7 @kind wide;
  #L35a144.  v10:= 1I;
  #L35a146.  call `w`(v9, v2) @signature `Li2/k;.w:(J)V` @kind direct;
  #L35a14c.  if v10 == 0 then goto L35a15c;
  #L35a150.  v10:= v9.`i2.k.i` @type ^`int`;
  #L35a154.  v11:= 2I;
  #L35a156.  if v10 == v11 then goto L35a15c;
  #L35a15a.  goto L35a15e;
  #L35a15c.  v5:= 0I;
  #L35a15e.  return v5;
}
procedure `int` `D`(`i2.k` v18 @kind this, `a2.m` v19 @kind object, `a2.z` v20 @kind object) @signature `Li2/k;.D:(La2/m;La2/z;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L35a51c.  v0:= v18 @kind object;
  #L35a520.  v1:= v19 @kind object;
  #L35a524.  call temp:= `q`(v19) @signature `La2/m;.q:()J` @kind interface;
  #L35a52a.  v2:= temp @kind wide;
  #L35a52c.  v4:= v0.`i2.k.n` @type ^`int`;
  #L35a530.  v5:= -1I;
  #L35a532.  if v4 != v5 then goto L35a548;
  #L35a536.  call temp:= `r`(v0, v2) @signature `Li2/k;.r:(J)I` @kind direct;
  #L35a53c.  v4:= temp;
  #L35a53e.  v0.`i2.k.n` @type ^`int` := v4;
  #L35a542.  if v4 != v5 then goto L35a548;
  #L35a546.  return v5;
  #L35a548.  v4:= v0.`i2.k.s` @type ^`i2.k$a`[] @kind object;
  #L35a54c.  v6:= v0.`i2.k.n` @type ^`int`;
  #L35a550.  v4:= v4[v6] @kind object;
  #L35a554.  v14:= v4.`i2.k$a.c` @type ^`a2.d0` @kind object;
  #L35a558.  v15:= v4.`i2.k$a.e` @type ^`int`;
  #L35a55c.  v6:= v4.`i2.k$a.b` @type ^`i2.r` @kind object;
  #L35a560.  v7:= v6.`i2.r.c` @type ^`long`[] @kind object;
  #L35a564.  v8:= v7[v15] @kind wide;
  #L35a568.  v6:= v6.`i2.r.d` @type ^`int`[] @kind object;
  #L35a56c.  v6:= v6[v15];
  #L35a570.  v13:= v4.`i2.k$a.d` @type ^`a2.e0` @kind object;
  #L35a574.  v2:= v8 - v2 @kind long;
  #L35a578.  v7:= v0.`i2.k.o` @type ^`int`;
  #L35a57c.  v10:= (`long`) v7 @kind i2l;
  #L35a57e.  v2:= v2 + v10 @kind long;
  #L35a580.  v10:= 0L;
  #L35a584.  v12:= 1I;
  #L35a586.  v7:= lcmp(v2, v10);
  #L35a58a.  if v7 < 0 then goto L35a7a2;
  #L35a58e.  v10:= 262144L;
  #L35a594.  v7:= lcmp(v2, v10);
  #L35a598.  if v7 < 0 then goto L35a5a8;
  #L35a59c.  v1:= v20 @kind object;
  #L35a5a0.  v17:= 1I;
  #L35a5a4.  goto L35a7aa;
  #L35a5a8.  v7:= v4.`i2.k$a.a` @type ^`i2.o` @kind object;
  #L35a5ac.  v7:= v7.`i2.o.g` @type ^`int`;
  #L35a5b0.  if v7 != v12 then goto L35a5be;
  #L35a5b4.  v7:= 8L;
  #L35a5b8.  v2:= v2 + v7 @kind long;
  #L35a5ba.  v6:= v6 + -8;
  #L35a5be.  v3:= (`int`) v2 @kind l2i;
  #L35a5c0.  call `j`(v1, v3) @signature `La2/m;.j:(I)V` @kind interface;
  #L35a5c6.  v2:= v4.`i2.k$a.a` @type ^`i2.o` @kind object;
  #L35a5ca.  v3:= v2.`i2.o.j` @type ^`int`;
  #L35a5ce.  v11:= 0I;
  #L35a5d0.  v10:= 0I;
  #L35a5d2.  if v3 == 0 then goto L35a694;
  #L35a5d6.  v2:= v0.`i2.k.c` @type ^`s3.z` @kind object;
  #L35a5da.  call temp:= `d`(v2) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L35a5e0.  v2:= temp @kind object;
  #L35a5e2.  v2[v10]:= v10 @kind byte;
  #L35a5e6.  v2[v12]:= v10 @kind byte;
  #L35a5ea.  v3:= 2I;
  #L35a5ec.  v2[v3]:= v10 @kind byte;
  #L35a5f0.  v3:= v4.`i2.k$a.a` @type ^`i2.o` @kind object;
  #L35a5f4.  v3:= v3.`i2.o.j` @type ^`int`;
  #L35a5f8.  v7:= v3 - 4;
  #L35a5fc.  v8:= v0.`i2.k.p` @type ^`int`;
  #L35a600.  if v8 >= v6 then goto L35a718;
  #L35a604.  v8:= v0.`i2.k.q` @type ^`int`;
  #L35a608.  if v8 != 0 then goto L35a66c;
  #L35a60c.  call `readFully`(v1, v2, v7, v3) @signature `La2/m;.readFully:([BII)V` @kind interface;
  #L35a612.  v8:= v0.`i2.k.o` @type ^`int`;
  #L35a616.  v8:= v8 + v3 @kind int;
  #L35a618.  v0.`i2.k.o` @type ^`int` := v8;
  #L35a61c.  v8:= v0.`i2.k.c` @type ^`s3.z` @kind object;
  #L35a620.  call `O`(v8, v10) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L35a626.  v8:= v0.`i2.k.c` @type ^`s3.z` @kind object;
  #L35a62a.  call temp:= `m`(v8) @signature `Ls3/z;.m:()I` @kind virtual;
  #L35a630.  v8:= temp;
  #L35a632.  if v8 < 0 then goto L35a65e;
  #L35a636.  v0.`i2.k.q` @type ^`int` := v8;
  #L35a63a.  v8:= v0.`i2.k.b` @type ^`s3.z` @kind object;
  #L35a63e.  call `O`(v8, v10) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L35a644.  v8:= v0.`i2.k.b` @type ^`s3.z` @kind object;
  #L35a648.  v9:= 4I;
  #L35a64a.  call `c`(v14, v8, v9) @signature `La2/d0;.c:(Ls3/z;I)V` @kind interface;
  #L35a650.  v8:= v0.`i2.k.p` @type ^`int`;
  #L35a654.  v8:= v8 + v9 @kind int;
  #L35a656.  v0.`i2.k.p` @type ^`int` := v8;
  #L35a65a.  v6:= v6 + v7 @kind int;
  #L35a65c.  goto L35a5fc;
  #L35a65e.  v1:= "Invalid NAL length" @kind object;
  #L35a662.  call temp:= `a`(v1, v11) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L35a668.  v1:= temp @kind object;
  #L35a66a.  throw v1;
  #L35a66c.  call temp:= `d`(v14, v1, v8, v10) @signature `La2/d0;.d:(Lr3/i;IZ)I` @kind interface;
  #L35a672.  v8:= temp;
  #L35a674.  v9:= v0.`i2.k.o` @type ^`int`;
  #L35a678.  v9:= v9 + v8 @kind int;
  #L35a67a.  v0.`i2.k.o` @type ^`int` := v9;
  #L35a67e.  v9:= v0.`i2.k.p` @type ^`int`;
  #L35a682.  v9:= v9 + v8 @kind int;
  #L35a684.  v0.`i2.k.p` @type ^`int` := v9;
  #L35a688.  v9:= v0.`i2.k.q` @type ^`int`;
  #L35a68c.  v9:= v9 - v8 @kind int;
  #L35a68e.  v0.`i2.k.q` @type ^`int` := v9;
  #L35a692.  goto L35a5fc;
  #L35a694.  v2:= v2.`i2.o.f` @type ^`v1.j1` @kind object;
  #L35a698.  v2:= v2.`v1.j1.z` @type ^`java.lang.String` @kind object;
  #L35a69c.  v3:= "audio/ac4" @kind object;
  #L35a6a0.  call temp:= `equals`(v3, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L35a6a6.  v2:= temp;
  #L35a6a8.  if v2 == 0 then goto L35a6da;
  #L35a6ac.  v2:= v0.`i2.k.p` @type ^`int`;
  #L35a6b0.  if v2 != 0 then goto L35a6d4;
  #L35a6b4.  v2:= v0.`i2.k.d` @type ^`s3.z` @kind object;
  #L35a6b8.  call `a`(v6, v2) @signature `Lx1/c;.a:(ILs3/z;)V` @kind static;
  #L35a6be.  v2:= v0.`i2.k.d` @type ^`s3.z` @kind object;
  #L35a6c2.  v3:= 7I;
  #L35a6c4.  call `c`(v14, v2, v3) @signature `La2/d0;.c:(Ls3/z;I)V` @kind interface;
  #L35a6ca.  v2:= v0.`i2.k.p` @type ^`int`;
  #L35a6ce.  v2:= v2 + v3 @kind int;
  #L35a6d0.  v0.`i2.k.p` @type ^`int` := v2;
  #L35a6d4.  v6:= v6 + 7;
  #L35a6d8.  goto L35a6e4;
  #L35a6da.  if v13 == 0 then goto L35a6e4;
  #L35a6de.  call `d`(v13, v1) @signature `La2/e0;.d:(La2/m;)V` @kind virtual;
  #L35a6e4.  v2:= v0.`i2.k.p` @type ^`int`;
  #L35a6e8.  if v2 >= v6 then goto L35a718;
  #L35a6ec.  v2:= v6 - v2 @kind int;
  #L35a6f0.  call temp:= `d`(v14, v1, v2, v10) @signature `La2/d0;.d:(Lr3/i;IZ)I` @kind interface;
  #L35a6f6.  v2:= temp;
  #L35a6f8.  v3:= v0.`i2.k.o` @type ^`int`;
  #L35a6fc.  v3:= v3 + v2 @kind int;
  #L35a6fe.  v0.`i2.k.o` @type ^`int` := v3;
  #L35a702.  v3:= v0.`i2.k.p` @type ^`int`;
  #L35a706.  v3:= v3 + v2 @kind int;
  #L35a708.  v0.`i2.k.p` @type ^`int` := v3;
  #L35a70c.  v3:= v0.`i2.k.q` @type ^`int`;
  #L35a710.  v3:= v3 - v2 @kind int;
  #L35a712.  v0.`i2.k.q` @type ^`int` := v3;
  #L35a716.  goto L35a6e4;
  #L35a718.  v1:= v6;
  #L35a71a.  v2:= v4.`i2.k$a.b` @type ^`i2.r` @kind object;
  #L35a71e.  v3:= v2.`i2.r.f` @type ^`long`[] @kind object;
  #L35a722.  v8:= v3[v15] @kind wide;
  #L35a726.  v2:= v2.`i2.r.g` @type ^`int`[] @kind object;
  #L35a72a.  v2:= v2[v15];
  #L35a72e.  if v13 == 0 then goto L35a76c;
  #L35a732.  v3:= 0I;
  #L35a734.  v16:= 0I;
  #L35a738.  v6:= v13 @kind object;
  #L35a73a.  v7:= v14 @kind object;
  #L35a73c.  v10:= v2;
  #L35a73e.  v2:= v11 @kind object;
  #L35a740.  v11:= v1;
  #L35a742.  v17:= 1I;
  #L35a746.  v12:= v3;
  #L35a748.  v1:= v13 @kind object;
  #L35a74a.  v13:= v16 @kind object;
  #L35a74e.  call `c`(v6, v7, v8, v10, v11, v12, v13) @signature `La2/e0;.c:(La2/d0;JIIILa2/d0$a;)V` @kind virtual;
  #L35a754.  v15:= v15 + 1;
  #L35a758.  v3:= v4.`i2.k$a.b` @type ^`i2.r` @kind object;
  #L35a75c.  v3:= v3.`i2.r.b` @type ^`int`;
  #L35a760.  if v15 != v3 then goto L35a782;
  #L35a764.  call `a`(v1, v14, v2) @signature `La2/e0;.a:(La2/d0;La2/d0$a;)V` @kind virtual;
  #L35a76a.  goto L35a782;
  #L35a76c.  v17:= 1I;
  #L35a770.  v11:= 0I;
  #L35a772.  v12:= 0I;
  #L35a774.  v6:= v14 @kind object;
  #L35a776.  v7:= v8 @kind wide;
  #L35a778.  v9:= v2;
  #L35a77a.  v10:= v1;
  #L35a77c.  call `f`(v6, v7, v9, v10, v11, v12) @signature `La2/d0;.f:(JIIILa2/d0$a;)V` @kind interface;
  #L35a782.  v1:= v4.`i2.k$a.e` @type ^`int`;
  #L35a786.  v1:= v1 + 1;
  #L35a78a.  v4.`i2.k$a.e` @type ^`int` := v1;
  #L35a78e.  v0.`i2.k.n` @type ^`int` := v5;
  #L35a792.  v1:= 0I;
  #L35a794.  v0.`i2.k.o` @type ^`int` := v1;
  #L35a798.  v0.`i2.k.p` @type ^`int` := v1;
  #L35a79c.  v0.`i2.k.q` @type ^`int` := v1;
  #L35a7a0.  return v1;
  #L35a7a2.  v17:= 1I;
  #L35a7a6.  v1:= v20 @kind object;
  #L35a7aa.  v1.`a2.z.a` @type ^`long` := v8 @kind wide;
  #L35a7ae.  return v17;
}
procedure `int` `E`(`i2.k` v4 @kind this, `a2.m` v5 @kind object, `a2.z` v6 @kind object) @signature `Li2/k;.E:(La2/m;La2/z;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35a7c0.  v0:= v4.`i2.k.g` @type ^`i2.m` @kind object;
  #L35a7c4.  v1:= v4.`i2.k.h` @type ^`java.util.List` @kind object;
  #L35a7c8.  call temp:= `c`(v0, v5, v6, v1) @signature `Li2/m;.c:(La2/m;La2/z;Ljava/util/List;)I` @kind virtual;
  #L35a7ce.  v5:= temp;
  #L35a7d0.  v0:= 1I;
  #L35a7d2.  if v5 != v0 then goto L35a7ec;
  #L35a7d6.  v0:= v6.`a2.z.a` @type ^`long` @kind wide;
  #L35a7da.  v2:= 0L;
  #L35a7de.  v6:= lcmp(v0, v2);
  #L35a7e2.  if v6 != 0 then goto L35a7ec;
  #L35a7e6.  call `o`(v4) @signature `Li2/k;.o:()V` @kind direct;
  #L35a7ec.  return v5;
}
procedure `boolean` `F`(`int` v1 ) @signature `Li2/k;.F:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L35a170.  v0:= 1836019574I;
  #L35a176.  if v1 == v0 then goto L35a1bc;
  #L35a17a.  v0:= 1953653099I;
  #L35a180.  if v1 == v0 then goto L35a1bc;
  #L35a184.  v0:= 1835297121I;
  #L35a18a.  if v1 == v0 then goto L35a1bc;
  #L35a18e.  v0:= 1835626086I;
  #L35a194.  if v1 == v0 then goto L35a1bc;
  #L35a198.  v0:= 1937007212I;
  #L35a19e.  if v1 == v0 then goto L35a1bc;
  #L35a1a2.  v0:= 1701082227I;
  #L35a1a8.  if v1 == v0 then goto L35a1bc;
  #L35a1ac.  v0:= 1835365473I;
  #L35a1b2.  if v1 != v0 then goto L35a1b8;
  #L35a1b6.  goto L35a1bc;
  #L35a1b8.  v1:= 0I;
  #L35a1ba.  goto L35a1be;
  #L35a1bc.  v1:= 1I;
  #L35a1be.  return v1;
}
procedure `boolean` `G`(`int` v1 ) @signature `Li2/k;.G:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L35a1d0.  v0:= 1835296868I;
  #L35a1d6.  if v1 == v0 then goto L35a28a;
  #L35a1da.  v0:= 1836476516I;
  #L35a1e0.  if v1 == v0 then goto L35a28a;
  #L35a1e4.  v0:= 1751411826I;
  #L35a1ea.  if v1 == v0 then goto L35a28a;
  #L35a1ee.  v0:= 1937011556I;
  #L35a1f4.  if v1 == v0 then goto L35a28a;
  #L35a1f8.  v0:= 1937011827I;
  #L35a1fe.  if v1 == v0 then goto L35a28a;
  #L35a202.  v0:= 1937011571I;
  #L35a208.  if v1 == v0 then goto L35a28a;
  #L35a20c.  v0:= 1668576371I;
  #L35a212.  if v1 == v0 then goto L35a28a;
  #L35a216.  v0:= 1701606260I;
  #L35a21c.  if v1 == v0 then goto L35a28a;
  #L35a220.  v0:= 1937011555I;
  #L35a226.  if v1 == v0 then goto L35a28a;
  #L35a22a.  v0:= 1937011578I;
  #L35a230.  if v1 == v0 then goto L35a28a;
  #L35a234.  v0:= 1937013298I;
  #L35a23a.  if v1 == v0 then goto L35a28a;
  #L35a23e.  v0:= 1937007471I;
  #L35a244.  if v1 == v0 then goto L35a28a;
  #L35a248.  v0:= 1668232756I;
  #L35a24e.  if v1 == v0 then goto L35a28a;
  #L35a252.  v0:= 1953196132I;
  #L35a258.  if v1 == v0 then goto L35a28a;
  #L35a25c.  v0:= 1718909296I;
  #L35a262.  if v1 == v0 then goto L35a28a;
  #L35a266.  v0:= 1969517665I;
  #L35a26c.  if v1 == v0 then goto L35a28a;
  #L35a270.  v0:= 1801812339I;
  #L35a276.  if v1 == v0 then goto L35a28a;
  #L35a27a.  v0:= 1768715124I;
  #L35a280.  if v1 != v0 then goto L35a286;
  #L35a284.  goto L35a28a;
  #L35a286.  v1:= 0I;
  #L35a288.  goto L35a28c;
  #L35a28a.  v1:= 1I;
  #L35a28c.  return v1;
}
procedure `void` `H`(`i2.k` v3 @kind this, `i2.k$a` v4 @kind object, `long` v5 ) @signature `Li2/k;.H:(Li2/k$a;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L35af8c.  v0:= v4.`i2.k$a.b` @type ^`i2.r` @kind object;
  #L35af90.  call temp:= `a`(v0, v5) @signature `Li2/r;.a:(J)I` @kind virtual;
  #L35af96.  v1:= temp;
  #L35af98.  v2:= -1I;
  #L35af9a.  if v1 != v2 then goto L35afa6;
  #L35af9e.  call temp:= `b`(v0, v5) @signature `Li2/r;.b:(J)I` @kind virtual;
  #L35afa4.  v1:= temp;
  #L35afa6.  v4.`i2.k$a.e` @type ^`int` := v1;
  #L35afaa.  return @kind void;
}
procedure `i2.o` `k`(`i2.o` v0 @kind object) @signature `Li2/k;.k:(Li2/o;)Li2/o;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L35a2cc.  call temp:= `s`(v0) @signature `Li2/k;.s:(Li2/o;)Li2/o;` @kind static;
  #L35a2d2.  v0:= temp @kind object;
  #L35a2d4.  return v0 @kind object;
}
procedure `a2.l`[] `l`() @signature `Li2/k;.l:()[La2/l;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;

  #L359cac.  call temp:= `t`() @signature `Li2/k;.t:()[La2/l;` @kind static;
  #L359cb2.  v0:= temp @kind object;
  #L359cb4.  return v0 @kind object;
}
procedure `int` `m`(`int` v1 ) @signature `Li2/k;.m:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L35a2fc.  v0:= 1751476579I;
  #L35a302.  if v1 == v0 then goto L35a318;
  #L35a306.  v0:= 1903435808I;
  #L35a30c.  if v1 == v0 then goto L35a314;
  #L35a310.  v1:= 0I;
  #L35a312.  return v1;
  #L35a314.  v1:= 1I;
  #L35a316.  return v1;
  #L35a318.  v1:= 2I;
  #L35a31a.  return v1;
}
procedure `long`[][] `n`(`i2.k$a`[] v15 @kind object) @signature `Li2/k;.n:([Li2/k$a;)[[J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L35a84c.  v0:= length @variable v15;
  #L35a84e.  v0:= new `long`[][v0];
  #L35a852.  v1:= length @variable v15;
  #L35a854.  v1:= new `int`[v1];
  #L35a858.  v2:= length @variable v15;
  #L35a85a.  v2:= new `long`[v2];
  #L35a85e.  v3:= length @variable v15;
  #L35a860.  v3:= new `boolean`[v3];
  #L35a864.  v4:= 0I;
  #L35a866.  v5:= 0I;
  #L35a868.  v6:= length @variable v15;
  #L35a86a.  if v5 >= v6 then goto L35a89c;
  #L35a86e.  v6:= v15[v5] @kind object;
  #L35a872.  v6:= v6.`i2.k$a.b` @type ^`i2.r` @kind object;
  #L35a876.  v6:= v6.`i2.r.b` @type ^`int`;
  #L35a87a.  v6:= new `long`[v6];
  #L35a87e.  v0[v5]:= v6 @kind object;
  #L35a882.  v6:= v15[v5] @kind object;
  #L35a886.  v6:= v6.`i2.k$a.b` @type ^`i2.r` @kind object;
  #L35a88a.  v6:= v6.`i2.r.f` @type ^`long`[] @kind object;
  #L35a88e.  v7:= v6[v4] @kind wide;
  #L35a892.  v2[v5]:= v7 @kind wide;
  #L35a896.  v5:= v5 + 1;
  #L35a89a.  goto L35a868;
  #L35a89c.  v5:= 0L;
  #L35a8a0.  v7:= 0I;
  #L35a8a2.  v8:= length @variable v15;
  #L35a8a4.  if v7 >= v8 then goto L35a92e;
  #L35a8a8.  v8:= 9223372036854775807L;
  #L35a8b2.  v10:= -1I;
  #L35a8b4.  v11:= 0I;
  #L35a8b6.  v12:= length @variable v15;
  #L35a8b8.  if v11 >= v12 then goto L35a8dc;
  #L35a8bc.  v12:= v3[v11] @kind boolean;
  #L35a8c0.  if v12 != 0 then goto L35a8d6;
  #L35a8c4.  v12:= v2[v11] @kind wide;
  #L35a8c8.  v14:= lcmp(v12, v8);
  #L35a8cc.  if v14 > 0 then goto L35a8d6;
  #L35a8d0.  v8:= v2[v11] @kind wide;
  #L35a8d4.  v10:= v11;
  #L35a8d6.  v11:= v11 + 1;
  #L35a8da.  goto L35a8b6;
  #L35a8dc.  v8:= v1[v10];
  #L35a8e0.  v9:= v0[v10] @kind object;
  #L35a8e4.  v9[v8]:= v5 @kind wide;
  #L35a8e8.  v9:= v15[v10] @kind object;
  #L35a8ec.  v9:= v9.`i2.k$a.b` @type ^`i2.r` @kind object;
  #L35a8f0.  v9:= v9.`i2.r.d` @type ^`int`[] @kind object;
  #L35a8f4.  v9:= v9[v8];
  #L35a8f8.  v11:= (`long`) v9 @kind i2l;
  #L35a8fa.  v5:= v5 + v11 @kind long;
  #L35a8fc.  v9:= 1I;
  #L35a8fe.  v8:= v8 + v9 @kind int;
  #L35a900.  v1[v10]:= v8;
  #L35a904.  v11:= v0[v10] @kind object;
  #L35a908.  v11:= length @variable v11;
  #L35a90a.  if v8 >= v11 then goto L35a924;
  #L35a90e.  v9:= v15[v10] @kind object;
  #L35a912.  v9:= v9.`i2.k$a.b` @type ^`i2.r` @kind object;
  #L35a916.  v9:= v9.`i2.r.f` @type ^`long`[] @kind object;
  #L35a91a.  v8:= v9[v8] @kind wide;
  #L35a91e.  v2[v10]:= v8 @kind wide;
  #L35a922.  goto L35a8a2;
  #L35a924.  v3[v10]:= v9 @kind boolean;
  #L35a928.  v7:= v7 + 1;
  #L35a92c.  goto L35a8a2;
  #L35a92e.  return v0 @kind object;
}
procedure `void` `o`(`i2.k` v1 @kind this) @signature `Li2/k;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L35aa24.  v0:= 0I;
  #L35aa26.  v1.`i2.k.i` @type ^`int` := v0;
  #L35aa2a.  v1.`i2.k.l` @type ^`int` := v0;
  #L35aa2e.  return @kind void;
}
procedure `int` `q`(`i2.r` v2 @kind object, `long` v3 ) @signature `Li2/k;.q:(Li2/r;J)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L35a32c.  call temp:= `a`(v2, v3) @signature `Li2/r;.a:(J)I` @kind virtual;
  #L35a332.  v0:= temp;
  #L35a334.  v1:= -1I;
  #L35a336.  if v0 != v1 then goto L35a342;
  #L35a33a.  call temp:= `b`(v2, v3) @signature `Li2/r;.b:(J)I` @kind virtual;
  #L35a340.  v0:= temp;
  #L35a342.  return v0;
}
procedure `int` `r`(`i2.k` v20 @kind this, `long` v21 ) @signature `Li2/k;.r:(J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L35a354.  v0:= v20 @kind object;
  #L35a358.  v2:= -1I;
  #L35a35a.  v6:= -1I;
  #L35a35c.  v7:= 0I;
  #L35a35e.  v8:= 9223372036854775807L;
  #L35a368.  v10:= 1I;
  #L35a36a.  v11:= 9223372036854775807L;
  #L35a374.  v13:= 1I;
  #L35a376.  v14:= 9223372036854775807L;
  #L35a380.  v1:= v0.`i2.k.s` @type ^`i2.k$a`[] @kind object;
  #L35a384.  v3:= length @variable v1;
  #L35a386.  if v7 >= v3 then goto L35a41a;
  #L35a38a.  v1:= v1[v7] @kind object;
  #L35a38e.  v3:= v1.`i2.k$a.e` @type ^`int`;
  #L35a392.  v1:= v1.`i2.k$a.b` @type ^`i2.r` @kind object;
  #L35a396.  v4:= v1.`i2.r.b` @type ^`int`;
  #L35a39a.  if v3 != v4 then goto L35a3a0;
  #L35a39e.  goto L35a414;
  #L35a3a0.  v1:= v1.`i2.r.c` @type ^`long`[] @kind object;
  #L35a3a4.  v4:= v1[v3] @kind wide;
  #L35a3a8.  v1:= v0.`i2.k.t` @type ^`long`[][] @kind object;
  #L35a3ac.  call temp:= `j`(v1) @signature `Ls3/l0;.j:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L35a3b2.  v1:= temp @kind object;
  #L35a3b4.  v1:= (`long`[][]) v1 @kind object;
  #L35a3b8.  v1:= v1[v7] @kind object;
  #L35a3bc.  v16:= v1[v3] @kind wide;
  #L35a3c0.  v4:= v4 - v21 @kind long;
  #L35a3c4.  v18:= 0L;
  #L35a3c8.  v1:= lcmp(v4, v18);
  #L35a3cc.  if v1 < 0 then goto L35a3e4;
  #L35a3d0.  v18:= 262144L;
  #L35a3d6.  v1:= lcmp(v4, v18);
  #L35a3da.  if v1 < 0 then goto L35a3e0;
  #L35a3de.  goto L35a3e4;
  #L35a3e0.  v1:= 0I;
  #L35a3e2.  goto L35a3e6;
  #L35a3e4.  v1:= 1I;
  #L35a3e6.  if v1 != 0 then goto L35a3ee;
  #L35a3ea.  if v13 != 0 then goto L35a3fa;
  #L35a3ee.  if v1 != v13 then goto L35a404;
  #L35a3f2.  v3:= lcmp(v4, v14);
  #L35a3f6.  if v3 >= 0 then goto L35a404;
  #L35a3fa.  v13:= v1;
  #L35a3fc.  v14:= v4 @kind wide;
  #L35a3fe.  v6:= v7;
  #L35a400.  v11:= v16 @kind wide;
  #L35a404.  v3:= lcmp(v16, v8);
  #L35a408.  if v3 >= 0 then goto L35a414;
  #L35a40c.  v10:= v1;
  #L35a40e.  v2:= v7;
  #L35a410.  v8:= v16 @kind wide;
  #L35a414.  v7:= v7 + 1;
  #L35a418.  goto L35a380;
  #L35a41a.  v3:= 9223372036854775807L;
  #L35a424.  v1:= lcmp(v8, v3);
  #L35a428.  if v1 == 0 then goto L35a440;
  #L35a42c.  if v10 == 0 then goto L35a440;
  #L35a430.  v3:= 10485760L;
  #L35a436.  v8:= v8 + v3 @kind long;
  #L35a438.  v1:= lcmp(v11, v8);
  #L35a43c.  if v1 >= 0 then goto L35a442;
  #L35a440.  v2:= v6;
  #L35a442.  return v2;
}
procedure `i2.o` `s`(`i2.o` v0 @kind object) @signature `Li2/k;.s:(Li2/o;)Li2/o;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L35a2e8.  return v0 @kind object;
}
procedure `a2.l`[] `t`() @signature `Li2/k;.t:()[La2/l;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L359cc8.  v0:= 1I;
  #L359cca.  v0:= new `a2.l`[v0];
  #L359cce.  v1:= new `i2.k`;
  #L359cd2.  call `<init>`(v1) @signature `Li2/k;.<init>:()V` @kind direct;
  #L359cd8.  v2:= 0I;
  #L359cda.  v0[v2]:= v1 @kind object;
  #L359cde.  return v0 @kind object;
}
procedure `long` `u`(`i2.r` v0 @kind object, `long` v1 , `long` v3 ) @signature `Li2/k;.u:(Li2/r;JJ)J` @AccessFlag PRIVATE_STATIC {
    temp;

  #L35a818.  call temp:= `q`(v0, v1) @signature `Li2/k;.q:(Li2/r;J)I` @kind static;
  #L35a81e.  v1:= temp;
  #L35a820.  v2:= -1I;
  #L35a822.  if v1 != v2 then goto L35a828;
  #L35a826.  return v3 @kind wide;
  #L35a828.  v0:= v0.`i2.r.c` @type ^`long`[] @kind object;
  #L35a82c.  v1:= v0[v1] @kind wide;
  #L35a830.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L35a836.  v0:= temp @kind wide;
  #L35a838.  return v0 @kind wide;
}
procedure `void` `v`(`i2.k` v3 @kind this, `a2.m` v4 @kind object) @signature `Li2/k;.v:(La2/m;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L35aa58.  v0:= v3.`i2.k.d` @type ^`s3.z` @kind object;
  #L35aa5c.  v1:= 8I;
  #L35aa60.  call `K`(v0, v1) @signature `Ls3/z;.K:(I)V` @kind virtual;
  #L35aa66.  v0:= v3.`i2.k.d` @type ^`s3.z` @kind object;
  #L35aa6a.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L35aa70.  v0:= temp @kind object;
  #L35aa72.  v2:= 0I;
  #L35aa74.  call `o`(v4, v0, v2, v1) @signature `La2/m;.o:([BII)V` @kind interface;
  #L35aa7a.  v0:= v3.`i2.k.d` @type ^`s3.z` @kind object;
  #L35aa7e.  call `e`(v0) @signature `Li2/b;.e:(Ls3/z;)V` @kind static;
  #L35aa84.  v0:= v3.`i2.k.d` @type ^`s3.z` @kind object;
  #L35aa88.  call temp:= `e`(v0) @signature `Ls3/z;.e:()I` @kind virtual;
  #L35aa8e.  v0:= temp;
  #L35aa90.  call `j`(v4, v0) @signature `La2/m;.j:(I)V` @kind interface;
  #L35aa96.  call `i`(v4) @signature `La2/m;.i:()V` @kind interface;
  #L35aa9c.  return @kind void;
}
procedure `void` `w`(`i2.k` v4 @kind this, `long` v5 ) @signature `Li2/k;.w:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35aab0.  v0:= v4.`i2.k.f` @type ^`java.util.ArrayDeque` @kind object;
  #L35aab4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L35aaba.  v0:= temp;
  #L35aabc.  v1:= 2I;
  #L35aabe.  if v0 != 0 then goto L35ab3a;
  #L35aac2.  v0:= v4.`i2.k.f` @type ^`java.util.ArrayDeque` @kind object;
  #L35aac6.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L35aacc.  v0:= temp @kind object;
  #L35aace.  v0:= (`i2.a$a`) v0 @kind object;
  #L35aad2.  v2:= v0.`i2.a$a.b` @type ^`long` @kind wide;
  #L35aad6.  v0:= lcmp(v2, v5);
  #L35aada.  if v0 != 0 then goto L35ab3a;
  #L35aade.  v0:= v4.`i2.k.f` @type ^`java.util.ArrayDeque` @kind object;
  #L35aae2.  call temp:= `pop`(v0) @signature `Ljava/util/ArrayDeque;.pop:()Ljava/lang/Object;` @kind virtual;
  #L35aae8.  v0:= temp @kind object;
  #L35aaea.  v0:= (`i2.a$a`) v0 @kind object;
  #L35aaee.  v2:= v0.`i2.a.a` @type ^`int`;
  #L35aaf2.  v3:= 1836019574I;
  #L35aaf8.  if v2 != v3 then goto L35ab12;
  #L35aafc.  call `z`(v4, v0) @signature `Li2/k;.z:(Li2/a$a;)V` @kind direct;
  #L35ab02.  v0:= v4.`i2.k.f` @type ^`java.util.ArrayDeque` @kind object;
  #L35ab06.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L35ab0c.  v4.`i2.k.i` @type ^`int` := v1;
  #L35ab10.  goto L35aab0;
  #L35ab12.  v1:= v4.`i2.k.f` @type ^`java.util.ArrayDeque` @kind object;
  #L35ab16.  call temp:= `isEmpty`(v1) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L35ab1c.  v1:= temp;
  #L35ab1e.  if v1 != 0 then goto L35aab0;
  #L35ab22.  v1:= v4.`i2.k.f` @type ^`java.util.ArrayDeque` @kind object;
  #L35ab26.  call temp:= `peek`(v1) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L35ab2c.  v1:= temp @kind object;
  #L35ab2e.  v1:= (`i2.a$a`) v1 @kind object;
  #L35ab32.  call `d`(v1, v0) @signature `Li2/a$a;.d:(Li2/a$a;)V` @kind virtual;
  #L35ab38.  goto L35aab0;
  #L35ab3a.  v5:= v4.`i2.k.i` @type ^`int`;
  #L35ab3e.  if v5 == v1 then goto L35ab48;
  #L35ab42.  call `o`(v4) @signature `Li2/k;.o:()V` @kind direct;
  #L35ab48.  return @kind void;
}
procedure `void` `x`(`i2.k` v5 @kind this) @signature `Li2/k;.x:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L35ab5c.  v0:= v5.`i2.k.w` @type ^`int`;
  #L35ab60.  v1:= 2I;
  #L35ab62.  if v0 != v1 then goto L35abec;
  #L35ab66.  v0:= v5.`i2.k.a` @type ^`int`;
  #L35ab6a.  v0:= v0 ^& v1 @kind int;
  #L35ab6c.  if v0 == 0 then goto L35abec;
  #L35ab70.  v0:= v5.`i2.k.r` @type ^`a2.n` @kind object;
  #L35ab74.  v1:= 4I;
  #L35ab76.  v2:= 0I;
  #L35ab78.  call temp:= `e`(v0, v2, v1) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L35ab7e.  v0:= temp @kind object;
  #L35ab80.  v1:= v5.`i2.k.x` @type ^`t2.b` @kind object;
  #L35ab84.  if v1 != 0 then goto L35ab8c;
  #L35ab88.  v1:= 0I;
  #L35ab8a.  goto L35aba4;
  #L35ab8c.  v1:= new `n2.a`;
  #L35ab90.  v3:= 1I;
  #L35ab92.  v3:= new `n2.a$b`[v3];
  #L35ab96.  v4:= v5.`i2.k.x` @type ^`t2.b` @kind object;
  #L35ab9a.  v3[v2]:= v4 @kind object;
  #L35ab9e.  call `<init>`(v1, v3) @signature `Ln2/a;.<init>:([Ln2/a$b;)V` @kind direct;
  #L35aba4.  v2:= new `v1.j1$b`;
  #L35aba8.  call `<init>`(v2) @signature `Lv1/j1$b;.<init>:()V` @kind direct;
  #L35abae.  call temp:= `X`(v2, v1) @signature `Lv1/j1$b;.X:(Ln2/a;)Lv1/j1$b;` @kind virtual;
  #L35abb4.  v1:= temp @kind object;
  #L35abb6.  call temp:= `E`(v1) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L35abbc.  v1:= temp @kind object;
  #L35abbe.  call `b`(v0, v1) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L35abc4.  v0:= v5.`i2.k.r` @type ^`a2.n` @kind object;
  #L35abc8.  call `h`(v0) @signature `La2/n;.h:()V` @kind interface;
  #L35abce.  v0:= v5.`i2.k.r` @type ^`a2.n` @kind object;
  #L35abd2.  v1:= new `a2.a0$b`;
  #L35abd6.  v2:= -4.9E-324D;
  #L35abe0.  call `<init>`(v1, v2) @signature `La2/a0$b;.<init>:(J)V` @kind direct;
  #L35abe6.  call `m`(v0, v1) @signature `La2/n;.m:(La2/a0;)V` @kind interface;
  #L35abec.  return @kind void;
}
procedure `int` `y`(`s3.z` v1 @kind object) @signature `Li2/k;.y:(Ls3/z;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L35a454.  v0:= 8I;
  #L35a458.  call `O`(v1, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L35a45e.  call temp:= `m`(v1) @signature `Ls3/z;.m:()I` @kind virtual;
  #L35a464.  v0:= temp;
  #L35a466.  call temp:= `m`(v0) @signature `Li2/k;.m:(I)I` @kind static;
  #L35a46c.  v0:= temp;
  #L35a46e.  if v0 == 0 then goto L35a474;
  #L35a472.  return v0;
  #L35a474.  v0:= 4I;
  #L35a476.  call `P`(v1, v0) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L35a47c.  call temp:= `a`(v1) @signature `Ls3/z;.a:()I` @kind virtual;
  #L35a482.  v0:= temp;
  #L35a484.  if v0 <= 0 then goto L35a49e;
  #L35a488.  call temp:= `m`(v1) @signature `Ls3/z;.m:()I` @kind virtual;
  #L35a48e.  v0:= temp;
  #L35a490.  call temp:= `m`(v0) @signature `Li2/k;.m:(I)I` @kind static;
  #L35a496.  v0:= temp;
  #L35a498.  if v0 == 0 then goto L35a47c;
  #L35a49c.  return v0;
  #L35a49e.  v1:= 0I;
  #L35a4a0.  return v1;
}
procedure `void` `z`(`i2.k` v25 @kind this, `i2.a$a` v26 @kind object) @signature `Li2/k;.z:(Li2/a$a;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;

  #L35ac00.  v0:= v25 @kind object;
  #L35ac04.  v1:= v26 @kind object;
  #L35ac08.  v9:= new `java.util.ArrayList`;
  #L35ac0c.  call `<init>`(v9) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L35ac12.  v2:= v0.`i2.k.w` @type ^`int`;
  #L35ac16.  v11:= 1I;
  #L35ac18.  if v2 != v11 then goto L35ac20;
  #L35ac1c.  v7:= 1I;
  #L35ac1e.  goto L35ac22;
  #L35ac20.  v7:= 0I;
  #L35ac22.  v12:= new `a2.w`;
  #L35ac26.  call `<init>`(v12) @signature `La2/w;.<init>:()V` @kind direct;
  #L35ac2c.  v2:= 1969517665I;
  #L35ac32.  call temp:= `g`(v1, v2) @signature `Li2/a$a;.g:(I)Li2/a$b;` @kind virtual;
  #L35ac38.  v2:= temp @kind object;
  #L35ac3a.  if v2 == 0 then goto L35ac66;
  #L35ac3e.  call temp:= `B`(v2) @signature `Li2/b;.B:(Li2/a$b;)Landroid/util/Pair;` @kind static;
  #L35ac44.  v2:= temp @kind object;
  #L35ac46.  v3:= v2.`android.util.Pair.first` @type ^`java.lang.Object` @kind object;
  #L35ac4a.  v3:= (`n2.a`) v3 @kind object;
  #L35ac4e.  v2:= v2.`android.util.Pair.second` @type ^`java.lang.Object` @kind object;
  #L35ac52.  v2:= (`n2.a`) v2 @kind object;
  #L35ac56.  if v3 == 0 then goto L35ac60;
  #L35ac5a.  call temp:= `c`(v12, v3) @signature `La2/w;.c:(Ln2/a;)Z` @kind virtual;
  #L35ac60.  v14:= v2 @kind object;
  #L35ac62.  v15:= v3 @kind object;
  #L35ac64.  goto L35ac6a;
  #L35ac66.  v14:= 0I;
  #L35ac68.  v15:= 0I;
  #L35ac6a.  v2:= 1835365473I;
  #L35ac70.  call temp:= `f`(v1, v2) @signature `Li2/a$a;.f:(I)Li2/a$a;` @kind virtual;
  #L35ac76.  v2:= temp @kind object;
  #L35ac78.  if v2 == 0 then goto L35ac88;
  #L35ac7c.  call temp:= `n`(v2) @signature `Li2/b;.n:(Li2/a$a;)Ln2/a;` @kind static;
  #L35ac82.  v2:= temp @kind object;
  #L35ac84.  v8:= v2 @kind object;
  #L35ac86.  goto L35ac8a;
  #L35ac88.  v8:= 0I;
  #L35ac8a.  v2:= v0.`i2.k.a` @type ^`int`;
  #L35ac8e.  v2:= v2 ^& v11 @kind int;
  #L35ac90.  if v2 == 0 then goto L35ac98;
  #L35ac94.  v6:= 1I;
  #L35ac96.  goto L35ac9a;
  #L35ac98.  v6:= 0I;
  #L35ac9a.  v3:= -4.9E-324D;
  #L35aca4.  v5:= 0I;
  #L35aca6.  v16:= `@@i2.j.o` @type ^`i2.j` @kind object;
  #L35acaa.  v1:= v26 @kind object;
  #L35acae.  v2:= v12 @kind object;
  #L35acb0.  v13:= v8 @kind object;
  #L35acb2.  v8:= v16 @kind object;
  #L35acb6.  call temp:= `A`(v1, v2, v3, v5, v6, v7, v8) @signature `Li2/b;.A:(Li2/a$a;La2/w;JLz1/m;ZZLl5/f;)Ljava/util/List;` @kind static;
  #L35acbc.  v1:= temp @kind object;
  #L35acbe.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L35acc4.  v2:= temp;
  #L35acc6.  v10:= v3 @kind wide;
  #L35acc8.  v6:= 0I;
  #L35acca.  v7:= -1I;
  #L35accc.  if v6 >= v2 then goto L35ae44;
  #L35acd0.  call temp:= `get`(v1, v6) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L35acd6.  v17:= temp @kind object;
  #L35acd8.  v8:= v17 @kind object;
  #L35acdc.  v8:= (`i2.r`) v8 @kind object;
  #L35ace0.  v5:= v8.`i2.r.b` @type ^`int`;
  #L35ace4.  if v5 != 0 then goto L35acf8;
  #L35ace8.  v18:= v1 @kind object;
  #L35acec.  v19:= v2;
  #L35acf0.  v1:= -1I;
  #L35acf2.  v8:= 1I;
  #L35acf4.  goto L35ae2a;
  #L35acf8.  v5:= v8.`i2.r.a` @type ^`i2.o` @kind object;
  #L35acfc.  v18:= v1 @kind object;
  #L35ad00.  v19:= v2;
  #L35ad04.  v1:= v5.`i2.o.e` @type ^`long` @kind wide;
  #L35ad08.  v20:= lcmp(v1, v3);
  #L35ad0c.  if v20 == 0 then goto L35ad12;
  #L35ad10.  goto L35ad16;
  #L35ad12.  v1:= v8.`i2.r.h` @type ^`long` @kind wide;
  #L35ad16.  call temp:= `max`(v10, v1) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L35ad1c.  v10:= temp @kind wide;
  #L35ad1e.  v3:= new `i2.k$a`;
  #L35ad22.  v4:= v0.`i2.k.r` @type ^`a2.n` @kind object;
  #L35ad26.  v21:= v10 @kind wide;
  #L35ad2a.  v10:= v5.`i2.o.b` @type ^`int`;
  #L35ad2e.  call temp:= `e`(v4, v6, v10) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L35ad34.  v4:= temp @kind object;
  #L35ad36.  call `<init>`(v3, v5, v8, v4) @signature `Li2/k$a;.<init>:(Li2/o;Li2/r;La2/d0;)V` @kind direct;
  #L35ad3c.  v4:= v5.`i2.o.f` @type ^`v1.j1` @kind object;
  #L35ad40.  v4:= v4.`v1.j1.z` @type ^`java.lang.String` @kind object;
  #L35ad44.  v10:= "audio/true-hd" @kind object;
  #L35ad48.  call temp:= `equals`(v10, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L35ad4e.  v4:= temp;
  #L35ad50.  if v4 == 0 then goto L35ad5e;
  #L35ad54.  v4:= v8.`i2.r.e` @type ^`int`;
  #L35ad58.  v4:= v4 * 16;
  #L35ad5c.  goto L35ad66;
  #L35ad5e.  v4:= v8.`i2.r.e` @type ^`int`;
  #L35ad62.  v4:= v4 + 30;
  #L35ad66.  v10:= v5.`i2.o.f` @type ^`v1.j1` @kind object;
  #L35ad6a.  call temp:= `b`(v10) @signature `Lv1/j1;.b:()Lv1/j1$b;` @kind virtual;
  #L35ad70.  v10:= temp @kind object;
  #L35ad72.  call temp:= `W`(v10, v4) @signature `Lv1/j1$b;.W:(I)Lv1/j1$b;` @kind virtual;
  #L35ad78.  v4:= v5.`i2.o.b` @type ^`int`;
  #L35ad7c.  v11:= 2I;
  #L35ad7e.  if v4 != v11 then goto L35adac;
  #L35ad82.  v23:= 0L;
  #L35ad86.  v4:= lcmp(v1, v23);
  #L35ad8a.  if v4 <= 0 then goto L35adac;
  #L35ad8e.  v4:= v8.`i2.r.b` @type ^`int`;
  #L35ad92.  v8:= 1I;
  #L35ad94.  if v4 <= v8 then goto L35adac;
  #L35ad98.  v4:= (`float`) v4 @kind i2f;
  #L35ad9a.  v1:= (`float`) v1 @kind l2f;
  #L35ad9c.  v2:= 1232348160I;
  #L35ada2.  v1:= v1 / v2 @kind float;
  #L35ada4.  v4:= v4 / v1 @kind float;
  #L35ada6.  call temp:= `P`(v10, v4) @signature `Lv1/j1$b;.P:(F)Lv1/j1$b;` @kind virtual;
  #L35adac.  v1:= v5.`i2.o.b` @type ^`int`;
  #L35adb0.  call `k`(v1, v12, v10) @signature `Li2/h;.k:(ILa2/w;Lv1/j1$b;)V` @kind static;
  #L35adb6.  v1:= v5.`i2.o.b` @type ^`int`;
  #L35adba.  v2:= new `n2.a`[v11];
  #L35adbe.  v4:= 0I;
  #L35adc0.  v2[v4]:= v14 @kind object;
  #L35adc4.  v4:= v0.`i2.k.h` @type ^`java.util.List` @kind object;
  #L35adc8.  call temp:= `isEmpty`(v4) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L35adce.  v4:= temp;
  #L35add0.  if v4 == 0 then goto L35add8;
  #L35add4.  v4:= 0I;
  #L35add6.  goto L35ade6;
  #L35add8.  v4:= new `n2.a`;
  #L35addc.  v8:= v0.`i2.k.h` @type ^`java.util.List` @kind object;
  #L35ade0.  call `<init>`(v4, v8) @signature `Ln2/a;.<init>:(Ljava/util/List;)V` @kind direct;
  #L35ade6.  v8:= 1I;
  #L35ade8.  v2[v8]:= v4 @kind object;
  #L35adec.  call `l`(v1, v15, v13, v10, v2) @signature `Li2/h;.l:(ILn2/a;Ln2/a;Lv1/j1$b;[Ln2/a;)V` @kind static;
  #L35adf2.  v1:= v3.`i2.k$a.c` @type ^`a2.d0` @kind object;
  #L35adf6.  call temp:= `E`(v10) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L35adfc.  v2:= temp @kind object;
  #L35adfe.  call `b`(v1, v2) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L35ae04.  v1:= v5.`i2.o.b` @type ^`int`;
  #L35ae08.  if v1 != v11 then goto L35ae1e;
  #L35ae0c.  v1:= -1I;
  #L35ae0e.  if v7 != v1 then goto L35ae20;
  #L35ae12.  call temp:= `size`(v9) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L35ae18.  v2:= temp;
  #L35ae1a.  v7:= v2;
  #L35ae1c.  goto L35ae20;
  #L35ae1e.  v1:= -1I;
  #L35ae20.  call temp:= `add`(v9, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L35ae26.  v10:= v21 @kind wide;
  #L35ae2a.  v6:= v6 + 1;
  #L35ae2e.  v1:= v18 @kind object;
  #L35ae32.  v2:= v19;
  #L35ae36.  v3:= -4.9E-324D;
  #L35ae40.  goto L35accc;
  #L35ae44.  v0.`i2.k.u` @type ^`int` := v7;
  #L35ae48.  v0.`i2.k.v` @type ^`long` := v10 @kind wide;
  #L35ae4c.  v1:= 0I;
  #L35ae4e.  v1:= new `i2.k$a`[v1];
  #L35ae52.  call temp:= `toArray`(v9, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L35ae58.  v1:= temp @kind object;
  #L35ae5a.  v1:= (`i2.k$a`[]) v1 @kind object;
  #L35ae5e.  v0.`i2.k.s` @type ^`i2.k$a`[] := v1 @kind object;
  #L35ae62.  call temp:= `n`(v1) @signature `Li2/k;.n:([Li2/k$a;)[[J` @kind static;
  #L35ae68.  v1:= temp @kind object;
  #L35ae6a.  v0.`i2.k.t` @type ^`long`[][] := v1 @kind object;
  #L35ae6e.  v1:= v0.`i2.k.r` @type ^`a2.n` @kind object;
  #L35ae72.  call `h`(v1) @signature `La2/n;.h:()V` @kind interface;
  #L35ae78.  v1:= v0.`i2.k.r` @type ^`a2.n` @kind object;
  #L35ae7c.  call `m`(v1, v0) @signature `La2/n;.m:(La2/a0;)V` @kind interface;
  #L35ae82.  return @kind void;
}
procedure `void` `a`(`i2.k` v0 @kind this) @signature `Li2/k;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L35aee8.  return @kind void;
}
procedure `void` `b`(`i2.k` v4 @kind this, `long` v5 , `long` v7 ) @signature `Li2/k;.b:(JJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35aefc.  v0:= v4.`i2.k.f` @type ^`java.util.ArrayDeque` @kind object;
  #L35af00.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L35af06.  v0:= 0I;
  #L35af08.  v4.`i2.k.l` @type ^`int` := v0;
  #L35af0c.  v1:= -1I;
  #L35af0e.  v4.`i2.k.n` @type ^`int` := v1;
  #L35af12.  v4.`i2.k.o` @type ^`int` := v0;
  #L35af16.  v4.`i2.k.p` @type ^`int` := v0;
  #L35af1a.  v4.`i2.k.q` @type ^`int` := v0;
  #L35af1e.  v1:= 0L;
  #L35af22.  v3:= lcmp(v5, v1);
  #L35af26.  if v3 != 0 then goto L35af52;
  #L35af2a.  v5:= v4.`i2.k.i` @type ^`int`;
  #L35af2e.  v6:= 3I;
  #L35af30.  if v5 == v6 then goto L35af3c;
  #L35af34.  call `o`(v4) @signature `Li2/k;.o:()V` @kind direct;
  #L35af3a.  goto L35af7a;
  #L35af3c.  v5:= v4.`i2.k.g` @type ^`i2.m` @kind object;
  #L35af40.  call `g`(v5) @signature `Li2/m;.g:()V` @kind virtual;
  #L35af46.  v5:= v4.`i2.k.h` @type ^`java.util.List` @kind object;
  #L35af4a.  call `clear`(v5) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L35af50.  goto L35af7a;
  #L35af52.  v5:= v4.`i2.k.s` @type ^`i2.k$a`[] @kind object;
  #L35af56.  v6:= length @variable v5;
  #L35af58.  if v0 >= v6 then goto L35af7a;
  #L35af5c.  v1:= v5[v0] @kind object;
  #L35af60.  call `H`(v4, v1, v7) @signature `Li2/k;.H:(Li2/k$a;J)V` @kind direct;
  #L35af66.  v1:= v1.`i2.k$a.d` @type ^`a2.e0` @kind object;
  #L35af6a.  if v1 == 0 then goto L35af74;
  #L35af6e.  call `b`(v1) @signature `La2/e0;.b:()V` @kind virtual;
  #L35af74.  v0:= v0 + 1;
  #L35af78.  goto L35af58;
  #L35af7a.  return @kind void;
}
procedure `void` `d`(`i2.k` v0 @kind this, `a2.n` v1 @kind object) @signature `Li2/k;.d:(La2/n;)V` @AccessFlag PUBLIC {
    temp;

  #L35aa40.  v0.`i2.k.r` @type ^`a2.n` := v1 @kind object;
  #L35aa44.  return @kind void;
}
procedure `boolean` `f`(`i2.k` v1 @kind this) @signature `Li2/k;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L359e50.  v0:= 1I;
  #L359e52.  return v0;
}
procedure `boolean` `g`(`i2.k` v1 @kind this, `a2.m` v2 @kind object) @signature `Li2/k;.g:(La2/m;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35a2a0.  v0:= v1.`i2.k.a` @type ^`int`;
  #L35a2a4.  v0:= v0 ^& 2;
  #L35a2a8.  if v0 == 0 then goto L35a2b0;
  #L35a2ac.  v0:= 1I;
  #L35a2ae.  goto L35a2b2;
  #L35a2b0.  v0:= 0I;
  #L35a2b2.  call temp:= `d`(v2, v0) @signature `Li2/n;.d:(La2/m;Z)Z` @kind static;
  #L35a2b8.  v2:= temp;
  #L35a2ba.  return v2;
}
procedure `a2.a0$a` `h`(`i2.k` v1 @kind this, `long` v2 ) @signature `Li2/k;.h:(J)La2/a0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L359cf0.  v0:= -1I;
  #L359cf2.  call temp:= `p`(v1, v2, v0) @signature `Li2/k;.p:(JI)La2/a0$a;` @kind virtual;
  #L359cf8.  v2:= temp @kind object;
  #L359cfa.  return v2 @kind object;
}
procedure `long` `i`(`i2.k` v2 @kind this) @signature `Li2/k;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35a800.  v0:= v2.`i2.k.v` @type ^`long` @kind wide;
  #L35a804.  return v0 @kind wide;
}
procedure `int` `j`(`i2.k` v2 @kind this, `a2.m` v3 @kind object, `a2.z` v4 @kind object) @signature `Li2/k;.j:(La2/m;La2/z;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35a4b4.  v0:= v2.`i2.k.i` @type ^`int`;
  #L35a4b8.  if v0 == 0 then goto L35a4fc;
  #L35a4bc.  v1:= 1I;
  #L35a4be.  if v0 == v1 then goto L35a4ee;
  #L35a4c2.  v1:= 2I;
  #L35a4c4.  if v0 == v1 then goto L35a4e4;
  #L35a4c8.  v1:= 3I;
  #L35a4ca.  if v0 != v1 then goto L35a4d8;
  #L35a4ce.  call temp:= `E`(v2, v3, v4) @signature `Li2/k;.E:(La2/m;La2/z;)I` @kind direct;
  #L35a4d4.  v3:= temp;
  #L35a4d6.  return v3;
  #L35a4d8.  v3:= new `java.lang.IllegalStateException`;
  #L35a4dc.  call `<init>`(v3) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L35a4e2.  throw v3;
  #L35a4e4.  call temp:= `D`(v2, v3, v4) @signature `Li2/k;.D:(La2/m;La2/z;)I` @kind direct;
  #L35a4ea.  v3:= temp;
  #L35a4ec.  return v3;
  #L35a4ee.  call temp:= `C`(v2, v3, v4) @signature `Li2/k;.C:(La2/m;La2/z;)Z` @kind direct;
  #L35a4f4.  v0:= temp;
  #L35a4f6.  if v0 == 0 then goto L35a4b4;
  #L35a4fa.  return v1;
  #L35a4fc.  call temp:= `B`(v2, v3) @signature `Li2/k;.B:(La2/m;)Z` @kind direct;
  #L35a502.  v0:= temp;
  #L35a504.  if v0 != 0 then goto L35a4b4;
  #L35a508.  v3:= -1I;
  #L35a50a.  return v3;
}
procedure `a2.a0$a` `p`(`i2.k` v16 @kind this, `long` v17 , `int` v19 ) @signature `Li2/k;.p:(JI)La2/a0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L359d0c.  v0:= v16 @kind object;
  #L359d10.  v1:= v17 @kind wide;
  #L359d14.  v3:= v19;
  #L359d18.  v4:= v0.`i2.k.s` @type ^`i2.k$a`[] @kind object;
  #L359d1c.  v5:= length @variable v4;
  #L359d1e.  if v5 != 0 then goto L359d32;
  #L359d22.  v1:= new `a2.a0$a`;
  #L359d26.  v2:= `@@a2.b0.c` @type ^`a2.b0` @kind object;
  #L359d2a.  call `<init>`(v1, v2) @signature `La2/a0$a;.<init>:(La2/b0;)V` @kind direct;
  #L359d30.  return v1 @kind object;
  #L359d32.  v5:= -1L;
  #L359d36.  v7:= -1I;
  #L359d38.  if v3 == v7 then goto L359d40;
  #L359d3c.  v8:= v3;
  #L359d3e.  goto L359d44;
  #L359d40.  v8:= v0.`i2.k.u` @type ^`int`;
  #L359d44.  v9:= -4.9E-324D;
  #L359d4e.  if v8 == v7 then goto L359dbc;
  #L359d52.  v4:= v4[v8] @kind object;
  #L359d56.  v4:= v4.`i2.k$a.b` @type ^`i2.r` @kind object;
  #L359d5a.  call temp:= `q`(v4, v1) @signature `Li2/k;.q:(Li2/r;J)I` @kind static;
  #L359d60.  v8:= temp;
  #L359d62.  if v8 != v7 then goto L359d76;
  #L359d66.  v1:= new `a2.a0$a`;
  #L359d6a.  v2:= `@@a2.b0.c` @type ^`a2.b0` @kind object;
  #L359d6e.  call `<init>`(v1, v2) @signature `La2/a0$a;.<init>:(La2/b0;)V` @kind direct;
  #L359d74.  return v1 @kind object;
  #L359d76.  v11:= v4.`i2.r.f` @type ^`long`[] @kind object;
  #L359d7a.  v12:= v11[v8] @kind wide;
  #L359d7e.  v11:= v4.`i2.r.c` @type ^`long`[] @kind object;
  #L359d82.  v14:= v11[v8] @kind wide;
  #L359d86.  v11:= lcmp(v12, v1);
  #L359d8a.  if v11 >= 0 then goto L359dc8;
  #L359d8e.  v11:= v4.`i2.r.b` @type ^`int`;
  #L359d92.  v11:= v11 + -1;
  #L359d96.  if v8 >= v11 then goto L359dc8;
  #L359d9a.  call temp:= `b`(v4, v1) @signature `Li2/r;.b:(J)I` @kind virtual;
  #L359da0.  v1:= temp;
  #L359da2.  if v1 == v7 then goto L359dc8;
  #L359da6.  if v1 == v8 then goto L359dc8;
  #L359daa.  v2:= v4.`i2.r.f` @type ^`long`[] @kind object;
  #L359dae.  v5:= v2[v1] @kind wide;
  #L359db2.  v2:= v4.`i2.r.c` @type ^`long`[] @kind object;
  #L359db6.  v1:= v2[v1] @kind wide;
  #L359dba.  goto L359dcc;
  #L359dbc.  v14:= 9223372036854775807L;
  #L359dc6.  v12:= v1 @kind wide;
  #L359dc8.  v1:= v5 @kind wide;
  #L359dca.  v5:= v9 @kind wide;
  #L359dcc.  if v3 != v7 then goto L359e0a;
  #L359dd0.  v3:= 0I;
  #L359dd2.  v4:= v0.`i2.k.s` @type ^`i2.k$a`[] @kind object;
  #L359dd6.  v7:= length @variable v4;
  #L359dd8.  if v3 >= v7 then goto L359e0a;
  #L359ddc.  v7:= v0.`i2.k.u` @type ^`int`;
  #L359de0.  if v3 == v7 then goto L359e04;
  #L359de4.  v4:= v4[v3] @kind object;
  #L359de8.  v4:= v4.`i2.k$a.b` @type ^`i2.r` @kind object;
  #L359dec.  call temp:= `u`(v4, v12, v14) @signature `Li2/k;.u:(Li2/r;JJ)J` @kind static;
  #L359df2.  v14:= temp @kind wide;
  #L359df4.  v7:= lcmp(v5, v9);
  #L359df8.  if v7 == 0 then goto L359e04;
  #L359dfc.  call temp:= `u`(v4, v5, v1) @signature `Li2/k;.u:(Li2/r;JJ)J` @kind static;
  #L359e02.  v1:= temp @kind wide;
  #L359e04.  v3:= v3 + 1;
  #L359e08.  goto L359dd2;
  #L359e0a.  v3:= new `a2.b0`;
  #L359e0e.  call `<init>`(v3, v12, v14) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L359e14.  v4:= lcmp(v5, v9);
  #L359e18.  if v4 != 0 then goto L359e28;
  #L359e1c.  v1:= new `a2.a0$a`;
  #L359e20.  call `<init>`(v1, v3) @signature `La2/a0$a;.<init>:(La2/b0;)V` @kind direct;
  #L359e26.  return v1 @kind object;
  #L359e28.  v4:= new `a2.b0`;
  #L359e2c.  call `<init>`(v4, v5, v1) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L359e32.  v1:= new `a2.a0$a`;
  #L359e36.  call `<init>`(v1, v3, v4) @signature `La2/a0$a;.<init>:(La2/b0;La2/b0;)V` @kind direct;
  #L359e3c.  return v1 @kind object;
}
