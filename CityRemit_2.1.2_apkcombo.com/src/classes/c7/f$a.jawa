record `c7.f$a` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
  `c7.f` `c7.f$a.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c7.f$a` v0 @kind this, `c7.f` v1 @kind object) @signature `Lc7/f$a;.<init>:(Lc7/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1f734c.  v0.`c7.f$a.o` @type ^`c7.f` := v1 @kind object;
  #L1f7350.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f7356.  return @kind void;
}
procedure `int` `a`(`c7.f$a` v2 @kind this, `c7.c` v3 @kind object, `c7.c` v4 @kind object) @signature `Lc7/f$a;.a:(Lc7/c;Lc7/c;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7298.  call temp:= `i`(v3) @signature `Lc7/c;.i:()Lf7/b;` @kind virtual;
  #L1f729e.  v0:= temp @kind object;
  #L1f72a0.  if v0 == 0 then goto L1f72b4;
  #L1f72a4.  call temp:= `i`(v4) @signature `Lc7/c;.i:()Lf7/b;` @kind virtual;
  #L1f72aa.  v0:= temp @kind object;
  #L1f72ac.  if v0 == 0 then goto L1f72b4;
  #L1f72b0.  v0:= 1I;
  #L1f72b2.  goto L1f72b6;
  #L1f72b4.  v0:= 0I;
  #L1f72b6.  call `f`(v0) @signature `La7/m;.f:(Z)V` @kind static;
  #L1f72bc.  v0:= new `f7.m`;
  #L1f72c0.  call temp:= `i`(v3) @signature `Lc7/c;.i:()Lf7/b;` @kind virtual;
  #L1f72c6.  v1:= temp @kind object;
  #L1f72c8.  call temp:= `k`(v3) @signature `Lc7/c;.k:()Lf7/i;` @kind virtual;
  #L1f72ce.  v3:= temp @kind object;
  #L1f72d0.  call temp:= `p`(v3) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L1f72d6.  v3:= temp @kind object;
  #L1f72d8.  call `<init>`(v0, v1, v3) @signature `Lf7/m;.<init>:(Lf7/b;Lf7/n;)V` @kind direct;
  #L1f72de.  v3:= new `f7.m`;
  #L1f72e2.  call temp:= `i`(v4) @signature `Lc7/c;.i:()Lf7/b;` @kind virtual;
  #L1f72e8.  v1:= temp @kind object;
  #L1f72ea.  call temp:= `k`(v4) @signature `Lc7/c;.k:()Lf7/i;` @kind virtual;
  #L1f72f0.  v4:= temp @kind object;
  #L1f72f2.  call temp:= `p`(v4) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L1f72f8.  v4:= temp @kind object;
  #L1f72fa.  call `<init>`(v3, v1, v4) @signature `Lf7/m;.<init>:(Lf7/b;Lf7/n;)V` @kind direct;
  #L1f7300.  v4:= v2.`c7.f$a.o` @type ^`c7.f` @kind object;
  #L1f7304.  call temp:= `a`(v4) @signature `Lc7/f;.a:(Lc7/f;)Lf7/h;` @kind static;
  #L1f730a.  v4:= temp @kind object;
  #L1f730c.  call temp:= `compare`(v4, v0, v3) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L1f7312.  v3:= temp;
  #L1f7314.  return v3;
}
procedure `int` `compare`(`c7.f$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc7/f$a;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1f7328.  v1:= (`c7.c`) v1 @kind object;
  #L1f732c.  v2:= (`c7.c`) v2 @kind object;
  #L1f7330.  call temp:= `a`(v0, v1, v2) @signature `Lc7/f$a;.a:(Lc7/c;Lc7/c;)I` @kind virtual;
  #L1f7336.  v1:= temp;
  #L1f7338.  return v1;
}
