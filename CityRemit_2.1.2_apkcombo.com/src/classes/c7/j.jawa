record `c7.j` @kind class @AccessFlag PUBLIC {
  `c7.i` `c7.j.a` @AccessFlag PRIVATE_FINAL;
  `c7.l` `c7.j.b` @AccessFlag PRIVATE_FINAL;
  `c7.k` `c7.j.c` @AccessFlag PRIVATE;
  `java.util.List` `c7.j.d` @AccessFlag PRIVATE_FINAL;
  `c7.f` `c7.j.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c7.j` v7 @kind this, `c7.i` v8 @kind object, `c7.k` v9 @kind object) @signature `Lc7/j;.<init>:(Lc7/i;Lc7/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1f9b50.  call `<init>`(v7) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f9b56.  v7.`c7.j.a` @type ^`c7.i` := v8 @kind object;
  #L1f9b5a.  v0:= new `d7.b`;
  #L1f9b5e.  call temp:= `c`(v8) @signature `Lc7/i;.c:()Lf7/h;` @kind virtual;
  #L1f9b64.  v1:= temp @kind object;
  #L1f9b66.  call `<init>`(v0, v1) @signature `Ld7/b;.<init>:(Lf7/h;)V` @kind direct;
  #L1f9b6c.  call temp:= `d`(v8) @signature `Lc7/i;.d:()Lc7/h;` @kind virtual;
  #L1f9b72.  v1:= temp @kind object;
  #L1f9b74.  call temp:= `j`(v1) @signature `Lc7/h;.j:()Ld7/d;` @kind virtual;
  #L1f9b7a.  v1:= temp @kind object;
  #L1f9b7c.  v2:= new `c7.l`;
  #L1f9b80.  call `<init>`(v2, v1) @signature `Lc7/l;.<init>:(Ld7/d;)V` @kind direct;
  #L1f9b86.  v7.`c7.j.b` @type ^`c7.l` := v2 @kind object;
  #L1f9b8a.  call temp:= `d`(v9) @signature `Lc7/k;.d:()Lc7/a;` @kind virtual;
  #L1f9b90.  v2:= temp @kind object;
  #L1f9b92.  call temp:= `c`(v9) @signature `Lc7/k;.c:()Lc7/a;` @kind virtual;
  #L1f9b98.  v9:= temp @kind object;
  #L1f9b9a.  call temp:= `e0`() @signature `Lf7/g;.e0:()Lf7/g;` @kind static;
  #L1f9ba0.  v3:= temp @kind object;
  #L1f9ba2.  call temp:= `c`(v8) @signature `Lc7/i;.c:()Lf7/h;` @kind virtual;
  #L1f9ba8.  v4:= temp @kind object;
  #L1f9baa.  call temp:= `h`(v3, v4) @signature `Lf7/i;.h:(Lf7/n;Lf7/h;)Lf7/i;` @kind static;
  #L1f9bb0.  v3:= temp @kind object;
  #L1f9bb2.  call temp:= `a`(v2) @signature `Lc7/a;.a:()Lf7/i;` @kind virtual;
  #L1f9bb8.  v4:= temp @kind object;
  #L1f9bba.  v5:= 0I;
  #L1f9bbc.  call temp:= `i`(v0, v3, v4, v5) @signature `Ld7/b;.i:(Lf7/i;Lf7/i;Ld7/a;)Lf7/i;` @kind virtual;
  #L1f9bc2.  v4:= temp @kind object;
  #L1f9bc4.  call temp:= `a`(v9) @signature `Lc7/a;.a:()Lf7/i;` @kind virtual;
  #L1f9bca.  v6:= temp @kind object;
  #L1f9bcc.  call temp:= `i`(v1, v3, v6, v5) @signature `Ld7/d;.i:(Lf7/i;Lf7/i;Ld7/a;)Lf7/i;` @kind interface;
  #L1f9bd2.  v3:= temp @kind object;
  #L1f9bd4.  v5:= new `c7.a`;
  #L1f9bd8.  call temp:= `f`(v2) @signature `Lc7/a;.f:()Z` @kind virtual;
  #L1f9bde.  v2:= temp;
  #L1f9be0.  call temp:= `g`(v0) @signature `Ld7/b;.g:()Z` @kind virtual;
  #L1f9be6.  v0:= temp;
  #L1f9be8.  call `<init>`(v5, v4, v2, v0) @signature `Lc7/a;.<init>:(Lf7/i;ZZ)V` @kind direct;
  #L1f9bee.  v0:= new `c7.a`;
  #L1f9bf2.  call temp:= `f`(v9) @signature `Lc7/a;.f:()Z` @kind virtual;
  #L1f9bf8.  v9:= temp;
  #L1f9bfa.  call temp:= `g`(v1) @signature `Ld7/d;.g:()Z` @kind interface;
  #L1f9c00.  v1:= temp;
  #L1f9c02.  call `<init>`(v0, v3, v9, v1) @signature `Lc7/a;.<init>:(Lf7/i;ZZ)V` @kind direct;
  #L1f9c08.  v9:= new `c7.k`;
  #L1f9c0c.  call `<init>`(v9, v0, v5) @signature `Lc7/k;.<init>:(Lc7/a;Lc7/a;)V` @kind direct;
  #L1f9c12.  v7.`c7.j.c` @type ^`c7.k` := v9 @kind object;
  #L1f9c16.  v9:= new `java.util.ArrayList`;
  #L1f9c1a.  call `<init>`(v9) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f9c20.  v7.`c7.j.d` @type ^`java.util.List` := v9 @kind object;
  #L1f9c24.  v9:= new `c7.f`;
  #L1f9c28.  call `<init>`(v9, v8) @signature `Lc7/f;.<init>:(Lc7/i;)V` @kind direct;
  #L1f9c2e.  v7.`c7.j.e` @type ^`c7.f` := v9 @kind object;
  #L1f9c32.  return @kind void;
}
procedure `java.util.List` `c`(`c7.j` v2 @kind this, `java.util.List` v3 @kind object, `f7.i` v4 @kind object, `x6.i` v5 @kind object) @signature `Lc7/j;.c:(Ljava/util/List;Lf7/i;Lx6/i;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1f9948.  if v5 != 0 then goto L1f9952;
  #L1f994c.  v5:= v2.`c7.j.d` @type ^`java.util.List` @kind object;
  #L1f9950.  goto L1f9966;
  #L1f9952.  v0:= 1I;
  #L1f9954.  v0:= new `x6.i`[v0];
  #L1f9958.  v1:= 0I;
  #L1f995a.  v0[v1]:= v5 @kind object;
  #L1f995e.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1f9964.  v5:= temp @kind object;
  #L1f9966.  v0:= v2.`c7.j.e` @type ^`c7.f` @kind object;
  #L1f996a.  call temp:= `d`(v0, v3, v4, v5) @signature `Lc7/f;.d:(Ljava/util/List;Lf7/i;Ljava/util/List;)Ljava/util/List;` @kind virtual;
  #L1f9970.  v3:= temp @kind object;
  #L1f9972.  return v3 @kind object;
}
procedure `void` `a`(`c7.j` v1 @kind this, `x6.i` v2 @kind object) @signature `Lc7/j;.a:(Lx6/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f9c44.  v0:= v1.`c7.j.d` @type ^`java.util.List` @kind object;
  #L1f9c48.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f9c4e.  return @kind void;
}
procedure `c7.j$a` `b`(`c7.j` v4 @kind this, `y6.d` v5 @kind object, `x6.h0` v6 @kind object, `f7.n` v7 @kind object) @signature `Lc7/j;.b:(Ly6/d;Lx6/h0;Lf7/n;)Lc7/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f9778.  call temp:= `c`(v5) @signature `Ly6/d;.c:()Ly6/d$a;` @kind virtual;
  #L1f977e.  v0:= temp @kind object;
  #L1f9780.  v1:= `@@y6.d$a.p` @type ^`y6.d$a` @kind object;
  #L1f9784.  v2:= 0I;
  #L1f9786.  v3:= 1I;
  #L1f9788.  if v0 != v1 then goto L1f97e0;
  #L1f978c.  call temp:= `b`(v5) @signature `Ly6/d;.b:()Ly6/e;` @kind virtual;
  #L1f9792.  v0:= temp @kind object;
  #L1f9794.  call temp:= `b`(v0) @signature `Ly6/e;.b:()Lc7/h;` @kind virtual;
  #L1f979a.  v0:= temp @kind object;
  #L1f979c.  if v0 == 0 then goto L1f97e0;
  #L1f97a0.  v0:= v4.`c7.j.c` @type ^`c7.k` @kind object;
  #L1f97a4.  call temp:= `b`(v0) @signature `Lc7/k;.b:()Lf7/n;` @kind virtual;
  #L1f97aa.  v0:= temp @kind object;
  #L1f97ac.  if v0 == 0 then goto L1f97b4;
  #L1f97b0.  v0:= 1I;
  #L1f97b2.  goto L1f97b6;
  #L1f97b4.  v0:= 0I;
  #L1f97b6.  v1:= "We should always have a full cache before handling merges" @kind object;
  #L1f97ba.  call `g`(v0, v1) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L1f97c0.  v0:= v4.`c7.j.c` @type ^`c7.k` @kind object;
  #L1f97c4.  call temp:= `a`(v0) @signature `Lc7/k;.a:()Lf7/n;` @kind virtual;
  #L1f97ca.  v0:= temp @kind object;
  #L1f97cc.  if v0 == 0 then goto L1f97d4;
  #L1f97d0.  v0:= 1I;
  #L1f97d2.  goto L1f97d6;
  #L1f97d4.  v0:= 0I;
  #L1f97d6.  v1:= "Missing event cache, even though we have a server cache" @kind object;
  #L1f97da.  call `g`(v0, v1) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L1f97e0.  v0:= v4.`c7.j.c` @type ^`c7.k` @kind object;
  #L1f97e4.  v1:= v4.`c7.j.b` @type ^`c7.l` @kind object;
  #L1f97e8.  call temp:= `b`(v1, v0, v5, v6, v7) @signature `Lc7/l;.b:(Lc7/k;Ly6/d;Lx6/h0;Lf7/n;)Lc7/l$c;` @kind virtual;
  #L1f97ee.  v5:= temp @kind object;
  #L1f97f0.  v6:= v5.`c7.l$c.a` @type ^`c7.k` @kind object;
  #L1f97f4.  call temp:= `d`(v6) @signature `Lc7/k;.d:()Lc7/a;` @kind virtual;
  #L1f97fa.  v6:= temp @kind object;
  #L1f97fc.  call temp:= `f`(v6) @signature `Lc7/a;.f:()Z` @kind virtual;
  #L1f9802.  v6:= temp;
  #L1f9804.  if v6 != 0 then goto L1f981c;
  #L1f9808.  call temp:= `d`(v0) @signature `Lc7/k;.d:()Lc7/a;` @kind virtual;
  #L1f980e.  v6:= temp @kind object;
  #L1f9810.  call temp:= `f`(v6) @signature `Lc7/a;.f:()Z` @kind virtual;
  #L1f9816.  v6:= temp;
  #L1f9818.  if v6 != 0 then goto L1f981e;
  #L1f981c.  v2:= 1I;
  #L1f981e.  v6:= "Once a server snap is complete, it should never go back" @kind object;
  #L1f9822.  call `g`(v2, v6) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L1f9828.  v6:= v5.`c7.l$c.a` @type ^`c7.k` @kind object;
  #L1f982c.  v4.`c7.j.c` @type ^`c7.k` := v6 @kind object;
  #L1f9830.  v7:= v5.`c7.l$c.b` @type ^`java.util.List` @kind object;
  #L1f9834.  call temp:= `c`(v6) @signature `Lc7/k;.c:()Lc7/a;` @kind virtual;
  #L1f983a.  v6:= temp @kind object;
  #L1f983c.  call temp:= `a`(v6) @signature `Lc7/a;.a:()Lf7/i;` @kind virtual;
  #L1f9842.  v6:= temp @kind object;
  #L1f9844.  v0:= 0I;
  #L1f9846.  call temp:= `c`(v4, v7, v6, v0) @signature `Lc7/j;.c:(Ljava/util/List;Lf7/i;Lx6/i;)Ljava/util/List;` @kind direct;
  #L1f984c.  v6:= temp @kind object;
  #L1f984e.  v7:= new `c7.j$a`;
  #L1f9852.  v5:= v5.`c7.l$c.b` @type ^`java.util.List` @kind object;
  #L1f9856.  call `<init>`(v7, v6, v5) @signature `Lc7/j$a;.<init>:(Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L1f985c.  return v7 @kind object;
}
procedure `f7.n` `d`(`c7.j` v1 @kind this) @signature `Lc7/j;.d:()Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f9870.  v0:= v1.`c7.j.c` @type ^`c7.k` @kind object;
  #L1f9874.  call temp:= `a`(v0) @signature `Lc7/k;.a:()Lf7/n;` @kind virtual;
  #L1f987a.  v0:= temp @kind object;
  #L1f987c.  return v0 @kind object;
}
procedure `f7.n` `e`(`c7.j` v2 @kind this, `x6.l` v3 @kind object) @signature `Lc7/j;.e:(Lx6/l;)Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f9890.  v0:= v2.`c7.j.c` @type ^`c7.k` @kind object;
  #L1f9894.  call temp:= `b`(v0) @signature `Lc7/k;.b:()Lf7/n;` @kind virtual;
  #L1f989a.  v0:= temp @kind object;
  #L1f989c.  if v0 == 0 then goto L1f98e2;
  #L1f98a0.  v1:= v2.`c7.j.a` @type ^`c7.i` @kind object;
  #L1f98a4.  call temp:= `g`(v1) @signature `Lc7/i;.g:()Z` @kind virtual;
  #L1f98aa.  v1:= temp;
  #L1f98ac.  if v1 != 0 then goto L1f98d8;
  #L1f98b0.  call temp:= `isEmpty`(v3) @signature `Lx6/l;.isEmpty:()Z` @kind virtual;
  #L1f98b6.  v1:= temp;
  #L1f98b8.  if v1 != 0 then goto L1f98e2;
  #L1f98bc.  call temp:= `h0`(v3) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L1f98c2.  v1:= temp @kind object;
  #L1f98c4.  call temp:= `z`(v0, v1) @signature `Lf7/n;.z:(Lf7/b;)Lf7/n;` @kind interface;
  #L1f98ca.  v1:= temp @kind object;
  #L1f98cc.  call temp:= `isEmpty`(v1) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L1f98d2.  v1:= temp;
  #L1f98d4.  if v1 != 0 then goto L1f98e2;
  #L1f98d8.  call temp:= `H`(v0, v3) @signature `Lf7/n;.H:(Lx6/l;)Lf7/n;` @kind interface;
  #L1f98de.  v3:= temp @kind object;
  #L1f98e0.  return v3 @kind object;
  #L1f98e2.  v3:= 0I;
  #L1f98e4.  return v3 @kind object;
}
procedure `f7.n` `f`(`c7.j` v1 @kind this) @signature `Lc7/j;.f:()Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f98f8.  v0:= v1.`c7.j.c` @type ^`c7.k` @kind object;
  #L1f98fc.  call temp:= `c`(v0) @signature `Lc7/k;.c:()Lc7/a;` @kind virtual;
  #L1f9902.  v0:= temp @kind object;
  #L1f9904.  call temp:= `b`(v0) @signature `Lc7/a;.b:()Lf7/n;` @kind virtual;
  #L1f990a.  v0:= temp @kind object;
  #L1f990c.  return v0 @kind object;
}
procedure `java.util.List` `g`(`c7.j` v5 @kind this, `x6.i` v6 @kind object) @signature `Lc7/j;.g:(Lx6/i;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f9984.  v0:= v5.`c7.j.c` @type ^`c7.k` @kind object;
  #L1f9988.  call temp:= `c`(v0) @signature `Lc7/k;.c:()Lc7/a;` @kind virtual;
  #L1f998e.  v0:= temp @kind object;
  #L1f9990.  v1:= new `java.util.ArrayList`;
  #L1f9994.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f999a.  call temp:= `b`(v0) @signature `Lc7/a;.b:()Lf7/n;` @kind virtual;
  #L1f99a0.  v2:= temp @kind object;
  #L1f99a2.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f99a8.  v2:= temp @kind object;
  #L1f99aa.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f99b0.  v3:= temp;
  #L1f99b2.  if v3 == 0 then goto L1f99e2;
  #L1f99b6.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f99bc.  v3:= temp @kind object;
  #L1f99be.  v3:= (`f7.m`) v3 @kind object;
  #L1f99c2.  call temp:= `c`(v3) @signature `Lf7/m;.c:()Lf7/b;` @kind virtual;
  #L1f99c8.  v4:= temp @kind object;
  #L1f99ca.  call temp:= `d`(v3) @signature `Lf7/m;.d:()Lf7/n;` @kind virtual;
  #L1f99d0.  v3:= temp @kind object;
  #L1f99d2.  call temp:= `c`(v4, v3) @signature `Lc7/c;.c:(Lf7/b;Lf7/n;)Lc7/c;` @kind static;
  #L1f99d8.  v3:= temp @kind object;
  #L1f99da.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f99e0.  goto L1f99aa;
  #L1f99e2.  call temp:= `f`(v0) @signature `Lc7/a;.f:()Z` @kind virtual;
  #L1f99e8.  v2:= temp;
  #L1f99ea.  if v2 == 0 then goto L1f9a04;
  #L1f99ee.  call temp:= `a`(v0) @signature `Lc7/a;.a:()Lf7/i;` @kind virtual;
  #L1f99f4.  v2:= temp @kind object;
  #L1f99f6.  call temp:= `n`(v2) @signature `Lc7/c;.n:(Lf7/i;)Lc7/c;` @kind static;
  #L1f99fc.  v2:= temp @kind object;
  #L1f99fe.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f9a04.  call temp:= `a`(v0) @signature `Lc7/a;.a:()Lf7/i;` @kind virtual;
  #L1f9a0a.  v0:= temp @kind object;
  #L1f9a0c.  call temp:= `c`(v5, v1, v0, v6) @signature `Lc7/j;.c:(Ljava/util/List;Lf7/i;Lx6/i;)Ljava/util/List;` @kind direct;
  #L1f9a12.  v6:= temp @kind object;
  #L1f9a14.  return v6 @kind object;
}
procedure `c7.i` `h`(`c7.j` v1 @kind this) @signature `Lc7/j;.h:()Lc7/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f9760.  v0:= v1.`c7.j.a` @type ^`c7.i` @kind object;
  #L1f9764.  return v0 @kind object;
}
procedure `f7.n` `i`(`c7.j` v1 @kind this) @signature `Lc7/j;.i:()Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f9920.  v0:= v1.`c7.j.c` @type ^`c7.k` @kind object;
  #L1f9924.  call temp:= `d`(v0) @signature `Lc7/k;.d:()Lc7/a;` @kind virtual;
  #L1f992a.  v0:= temp @kind object;
  #L1f992c.  call temp:= `b`(v0) @signature `Lc7/a;.b:()Lf7/n;` @kind virtual;
  #L1f9932.  v0:= temp @kind object;
  #L1f9934.  return v0 @kind object;
}
procedure `boolean` `j`(`c7.j` v1 @kind this) @signature `Lc7/j;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f9740.  v0:= v1.`c7.j.d` @type ^`java.util.List` @kind object;
  #L1f9744.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1f974a.  v0:= temp;
  #L1f974c.  return v0;
}
procedure `java.util.List` `k`(`c7.j` v6 @kind this, `x6.i` v7 @kind object, `s6.b` v8 @kind object) @signature `Lc7/j;.k:(Lx6/i;Ls6/b;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1f9a28.  v0:= 0I;
  #L1f9a2a.  if v8 == 0 then goto L1f9a8e;
  #L1f9a2e.  v1:= new `java.util.ArrayList`;
  #L1f9a32.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f9a38.  if v7 != 0 then goto L1f9a40;
  #L1f9a3c.  v2:= 1I;
  #L1f9a3e.  goto L1f9a42;
  #L1f9a40.  v2:= 0I;
  #L1f9a42.  v3:= "A cancel should cancel all event registrations" @kind object;
  #L1f9a46.  call `g`(v2, v3) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L1f9a4c.  v2:= v6.`c7.j.a` @type ^`c7.i` @kind object;
  #L1f9a50.  call temp:= `e`(v2) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L1f9a56.  v2:= temp @kind object;
  #L1f9a58.  v3:= v6.`c7.j.d` @type ^`java.util.List` @kind object;
  #L1f9a5c.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f9a62.  v3:= temp @kind object;
  #L1f9a64.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f9a6a.  v4:= temp;
  #L1f9a6c.  if v4 == 0 then goto L1f9a96;
  #L1f9a70.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f9a76.  v4:= temp @kind object;
  #L1f9a78.  v4:= (`x6.i`) v4 @kind object;
  #L1f9a7c.  v5:= new `c7.b`;
  #L1f9a80.  call `<init>`(v5, v4, v8, v2) @signature `Lc7/b;.<init>:(Lx6/i;Ls6/b;Lx6/l;)V` @kind direct;
  #L1f9a86.  call temp:= `add`(v1, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f9a8c.  goto L1f9a64;
  #L1f9a8e.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L1f9a94.  v1:= temp @kind object;
  #L1f9a96.  if v7 == 0 then goto L1f9b08;
  #L1f9a9a.  v8:= -1I;
  #L1f9a9c.  v2:= -1I;
  #L1f9a9e.  v3:= v6.`c7.j.d` @type ^`java.util.List` @kind object;
  #L1f9aa2.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1f9aa8.  v3:= temp;
  #L1f9aaa.  if v0 >= v3 then goto L1f9ae0;
  #L1f9aae.  v3:= v6.`c7.j.d` @type ^`java.util.List` @kind object;
  #L1f9ab2.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1f9ab8.  v3:= temp @kind object;
  #L1f9aba.  v3:= (`x6.i`) v3 @kind object;
  #L1f9abe.  call temp:= `f`(v3, v7) @signature `Lx6/i;.f:(Lx6/i;)Z` @kind virtual;
  #L1f9ac4.  v4:= temp;
  #L1f9ac6.  if v4 == 0 then goto L1f9ada;
  #L1f9aca.  call temp:= `h`(v3) @signature `Lx6/i;.h:()Z` @kind virtual;
  #L1f9ad0.  v2:= temp;
  #L1f9ad2.  if v2 == 0 then goto L1f9ad8;
  #L1f9ad6.  goto L1f9ae2;
  #L1f9ad8.  v2:= v0;
  #L1f9ada.  v0:= v0 + 1;
  #L1f9ade.  goto L1f9a9e;
  #L1f9ae0.  v0:= v2;
  #L1f9ae2.  if v0 == v8 then goto L1f9b3e;
  #L1f9ae6.  v7:= v6.`c7.j.d` @type ^`java.util.List` @kind object;
  #L1f9aea.  call temp:= `get`(v7, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1f9af0.  v7:= temp @kind object;
  #L1f9af2.  v7:= (`x6.i`) v7 @kind object;
  #L1f9af6.  v8:= v6.`c7.j.d` @type ^`java.util.List` @kind object;
  #L1f9afa.  call temp:= `remove`(v8, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1f9b00.  call `l`(v7) @signature `Lx6/i;.l:()V` @kind virtual;
  #L1f9b06.  goto L1f9b3e;
  #L1f9b08.  v7:= v6.`c7.j.d` @type ^`java.util.List` @kind object;
  #L1f9b0c.  call temp:= `iterator`(v7) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f9b12.  v7:= temp @kind object;
  #L1f9b14.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f9b1a.  v8:= temp;
  #L1f9b1c.  if v8 == 0 then goto L1f9b34;
  #L1f9b20.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f9b26.  v8:= temp @kind object;
  #L1f9b28.  v8:= (`x6.i`) v8 @kind object;
  #L1f9b2c.  call `l`(v8) @signature `Lx6/i;.l:()V` @kind virtual;
  #L1f9b32.  goto L1f9b14;
  #L1f9b34.  v7:= v6.`c7.j.d` @type ^`java.util.List` @kind object;
  #L1f9b38.  call `clear`(v7) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L1f9b3e.  return v1 @kind object;
}
