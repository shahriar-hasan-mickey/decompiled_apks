record `c7.f` @kind class @AccessFlag PUBLIC {
  `c7.i` `c7.f.a` @AccessFlag PRIVATE_FINAL;
  `f7.h` `c7.f.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c7.f` v0 @kind this, `c7.i` v1 @kind object) @signature `Lc7/f;.<init>:(Lc7/i;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1f7508.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f750e.  v0.`c7.f.a` @type ^`c7.i` := v1 @kind object;
  #L1f7512.  call temp:= `c`(v1) @signature `Lc7/i;.c:()Lf7/h;` @kind virtual;
  #L1f7518.  v1:= temp @kind object;
  #L1f751a.  v0.`c7.f.b` @type ^`f7.h` := v1 @kind object;
  #L1f751e.  return @kind void;
}
procedure `f7.h` `a`(`c7.f` v0 @kind object) @signature `Lc7/f;.a:(Lc7/f;)Lf7/h;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1f73e4.  v0:= v0.`c7.f.b` @type ^`f7.h` @kind object;
  #L1f73e8.  return v0 @kind object;
}
procedure `java.util.Comparator` `b`(`c7.f` v1 @kind this) @signature `Lc7/f;.b:()Ljava/util/Comparator;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1f73fc.  v0:= new `c7.f$a`;
  #L1f7400.  call `<init>`(v0, v1) @signature `Lc7/f$a;.<init>:(Lc7/f;)V` @kind direct;
  #L1f7406.  return v0 @kind object;
}
procedure `c7.d` `c`(`c7.f` v3 @kind this, `c7.c` v4 @kind object, `x6.i` v5 @kind object, `f7.i` v6 @kind object) @signature `Lc7/f;.c:(Lc7/c;Lx6/i;Lf7/i;)Lc7/d;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1f7368.  call temp:= `j`(v4) @signature `Lc7/c;.j:()Lc7/e$a;` @kind virtual;
  #L1f736e.  v0:= temp @kind object;
  #L1f7370.  v1:= `@@c7.e$a.s` @type ^`c7.e$a` @kind object;
  #L1f7374.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f737a.  v0:= temp;
  #L1f737c.  if v0 != 0 then goto L1f73c6;
  #L1f7380.  call temp:= `j`(v4) @signature `Lc7/c;.j:()Lc7/e$a;` @kind virtual;
  #L1f7386.  v0:= temp @kind object;
  #L1f7388.  v1:= `@@c7.e$a.o` @type ^`c7.e$a` @kind object;
  #L1f738c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7392.  v0:= temp;
  #L1f7394.  if v0 == 0 then goto L1f739a;
  #L1f7398.  goto L1f73c6;
  #L1f739a.  call temp:= `i`(v4) @signature `Lc7/c;.i:()Lf7/b;` @kind virtual;
  #L1f73a0.  v0:= temp @kind object;
  #L1f73a2.  call temp:= `k`(v4) @signature `Lc7/c;.k:()Lf7/i;` @kind virtual;
  #L1f73a8.  v1:= temp @kind object;
  #L1f73aa.  call temp:= `p`(v1) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L1f73b0.  v1:= temp @kind object;
  #L1f73b2.  v2:= v3.`c7.f.b` @type ^`f7.h` @kind object;
  #L1f73b6.  call temp:= `u`(v6, v0, v1, v2) @signature `Lf7/i;.u:(Lf7/b;Lf7/n;Lf7/h;)Lf7/b;` @kind virtual;
  #L1f73bc.  v6:= temp @kind object;
  #L1f73be.  call temp:= `a`(v4, v6) @signature `Lc7/c;.a:(Lf7/b;)Lc7/c;` @kind virtual;
  #L1f73c4.  v4:= temp @kind object;
  #L1f73c6.  v6:= v3.`c7.f.a` @type ^`c7.i` @kind object;
  #L1f73ca.  call temp:= `b`(v5, v4, v6) @signature `Lx6/i;.b:(Lc7/c;Lc7/i;)Lc7/d;` @kind virtual;
  #L1f73d0.  v4:= temp @kind object;
  #L1f73d2.  return v4 @kind object;
}
procedure `void` `e`(`c7.f` v4 @kind this, `java.util.List` v5 @kind object, `c7.e$a` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object, `f7.i` v9 @kind object) @signature `Lc7/f;.e:(Ljava/util/List;Lc7/e$a;Ljava/util/List;Ljava/util/List;Lf7/i;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f7530.  v0:= new `java.util.ArrayList`;
  #L1f7534.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f753a.  call temp:= `iterator`(v7) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f7540.  v7:= temp @kind object;
  #L1f7542.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f7548.  v1:= temp;
  #L1f754a.  if v1 == 0 then goto L1f7576;
  #L1f754e.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f7554.  v1:= temp @kind object;
  #L1f7556.  v1:= (`c7.c`) v1 @kind object;
  #L1f755a.  call temp:= `j`(v1) @signature `Lc7/c;.j:()Lc7/e$a;` @kind virtual;
  #L1f7560.  v2:= temp @kind object;
  #L1f7562.  call temp:= `equals`(v2, v6) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7568.  v2:= temp;
  #L1f756a.  if v2 == 0 then goto L1f7542;
  #L1f756e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f7574.  goto L1f7542;
  #L1f7576.  call temp:= `b`(v4) @signature `Lc7/f;.b:()Ljava/util/Comparator;` @kind direct;
  #L1f757c.  v7:= temp @kind object;
  #L1f757e.  call `sort`(v0, v7) @signature `Ljava/util/Collections;.sort:(Ljava/util/List;Ljava/util/Comparator;)V` @kind static;
  #L1f7584.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f758a.  v7:= temp @kind object;
  #L1f758c.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f7592.  v0:= temp;
  #L1f7594.  if v0 == 0 then goto L1f75e0;
  #L1f7598.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f759e.  v0:= temp @kind object;
  #L1f75a0.  v0:= (`c7.c`) v0 @kind object;
  #L1f75a4.  call temp:= `iterator`(v8) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f75aa.  v1:= temp @kind object;
  #L1f75ac.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f75b2.  v2:= temp;
  #L1f75b4.  if v2 == 0 then goto L1f758c;
  #L1f75b8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f75be.  v2:= temp @kind object;
  #L1f75c0.  v2:= (`x6.i`) v2 @kind object;
  #L1f75c4.  call temp:= `i`(v2, v6) @signature `Lx6/i;.i:(Lc7/e$a;)Z` @kind virtual;
  #L1f75ca.  v3:= temp;
  #L1f75cc.  if v3 == 0 then goto L1f75ac;
  #L1f75d0.  call temp:= `c`(v4, v0, v2, v9) @signature `Lc7/f;.c:(Lc7/c;Lx6/i;Lf7/i;)Lc7/d;` @kind direct;
  #L1f75d6.  v2:= temp @kind object;
  #L1f75d8.  call temp:= `add`(v5, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f75de.  goto L1f75ac;
  #L1f75e0.  return @kind void;
}
procedure `java.util.List` `d`(`c7.f` v8 @kind this, `java.util.List` v9 @kind object, `f7.i` v10 @kind object, `java.util.List` v11 @kind object) @signature `Lc7/f;.d:(Ljava/util/List;Lf7/i;Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1f7418.  v6:= new `java.util.ArrayList`;
  #L1f741c.  call `<init>`(v6) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f7422.  v7:= new `java.util.ArrayList`;
  #L1f7426.  call `<init>`(v7) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f742c.  call temp:= `iterator`(v9) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f7432.  v0:= temp @kind object;
  #L1f7434.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f743a.  v1:= temp;
  #L1f743c.  if v1 == 0 then goto L1f74b4;
  #L1f7440.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f7446.  v1:= temp @kind object;
  #L1f7448.  v1:= (`c7.c`) v1 @kind object;
  #L1f744c.  call temp:= `j`(v1) @signature `Lc7/c;.j:()Lc7/e$a;` @kind virtual;
  #L1f7452.  v2:= temp @kind object;
  #L1f7454.  v3:= `@@c7.e$a.r` @type ^`c7.e$a` @kind object;
  #L1f7458.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f745e.  v2:= temp;
  #L1f7460.  if v2 == 0 then goto L1f7434;
  #L1f7464.  v2:= v8.`c7.f.b` @type ^`f7.h` @kind object;
  #L1f7468.  call temp:= `l`(v1) @signature `Lc7/c;.l:()Lf7/i;` @kind virtual;
  #L1f746e.  v3:= temp @kind object;
  #L1f7470.  call temp:= `p`(v3) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L1f7476.  v3:= temp @kind object;
  #L1f7478.  call temp:= `k`(v1) @signature `Lc7/c;.k:()Lf7/i;` @kind virtual;
  #L1f747e.  v4:= temp @kind object;
  #L1f7480.  call temp:= `p`(v4) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L1f7486.  v4:= temp @kind object;
  #L1f7488.  call temp:= `d`(v2, v3, v4) @signature `Lf7/h;.d:(Lf7/n;Lf7/n;)Z` @kind virtual;
  #L1f748e.  v2:= temp;
  #L1f7490.  if v2 == 0 then goto L1f7434;
  #L1f7494.  call temp:= `i`(v1) @signature `Lc7/c;.i:()Lf7/b;` @kind virtual;
  #L1f749a.  v2:= temp @kind object;
  #L1f749c.  call temp:= `k`(v1) @signature `Lc7/c;.k:()Lf7/i;` @kind virtual;
  #L1f74a2.  v1:= temp @kind object;
  #L1f74a4.  call temp:= `f`(v2, v1) @signature `Lc7/c;.f:(Lf7/b;Lf7/i;)Lc7/c;` @kind static;
  #L1f74aa.  v1:= temp @kind object;
  #L1f74ac.  call temp:= `add`(v7, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f74b2.  goto L1f7434;
  #L1f74b4.  v2:= `@@c7.e$a.o` @type ^`c7.e$a` @kind object;
  #L1f74b8.  v0:= v8 @kind object;
  #L1f74ba.  v1:= v6 @kind object;
  #L1f74bc.  v3:= v9 @kind object;
  #L1f74be.  v4:= v11 @kind object;
  #L1f74c0.  v5:= v10 @kind object;
  #L1f74c2.  call `e`(v0, v1, v2, v3, v4, v5) @signature `Lc7/f;.e:(Ljava/util/List;Lc7/e$a;Ljava/util/List;Ljava/util/List;Lf7/i;)V` @kind direct;
  #L1f74c8.  v2:= `@@c7.e$a.p` @type ^`c7.e$a` @kind object;
  #L1f74cc.  call `e`(v0, v1, v2, v3, v4, v5) @signature `Lc7/f;.e:(Ljava/util/List;Lc7/e$a;Ljava/util/List;Ljava/util/List;Lf7/i;)V` @kind direct;
  #L1f74d2.  v2:= `@@c7.e$a.q` @type ^`c7.e$a` @kind object;
  #L1f74d6.  v3:= v7 @kind object;
  #L1f74d8.  call `e`(v0, v1, v2, v3, v4, v5) @signature `Lc7/f;.e:(Ljava/util/List;Lc7/e$a;Ljava/util/List;Ljava/util/List;Lf7/i;)V` @kind direct;
  #L1f74de.  v2:= `@@c7.e$a.r` @type ^`c7.e$a` @kind object;
  #L1f74e2.  v3:= v9 @kind object;
  #L1f74e4.  call `e`(v0, v1, v2, v3, v4, v5) @signature `Lc7/f;.e:(Ljava/util/List;Lc7/e$a;Ljava/util/List;Ljava/util/List;Lf7/i;)V` @kind direct;
  #L1f74ea.  v2:= `@@c7.e$a.s` @type ^`c7.e$a` @kind object;
  #L1f74ee.  call `e`(v0, v1, v2, v3, v4, v5) @signature `Lc7/f;.e:(Ljava/util/List;Lc7/e$a;Ljava/util/List;Ljava/util/List;Lf7/i;)V` @kind direct;
  #L1f74f4.  return v6 @kind object;
}
