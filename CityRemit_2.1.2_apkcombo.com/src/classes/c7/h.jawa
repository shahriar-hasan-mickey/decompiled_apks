record `c7.h` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Integer` `c7.h.a` @AccessFlag PRIVATE;
  `c7.h$b` `c7.h.b` @AccessFlag PRIVATE;
  `f7.n` `c7.h.c` @AccessFlag PRIVATE;
  `f7.b` `c7.h.d` @AccessFlag PRIVATE;
  `f7.n` `c7.h.e` @AccessFlag PRIVATE;
  `f7.b` `c7.h.f` @AccessFlag PRIVATE;
  `f7.h` `c7.h.g` @AccessFlag PRIVATE;
  `java.lang.String` `c7.h.h` @AccessFlag PRIVATE;
}
global `c7.h` `@@c7.h.i` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc7/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1f8270.  v0:= new `c7.h`;
  #L1f8274.  call `<init>`(v0) @signature `Lc7/h;.<init>:()V` @kind direct;
  #L1f827a.  `@@c7.h.i` @type ^`c7.h` := v0 @kind object;
  #L1f827e.  return @kind void;
}
procedure `void` `<init>`(`c7.h` v2 @kind this) @signature `Lc7/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1f8290.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f8296.  v0:= 0I;
  #L1f8298.  v2.`c7.h.c` @type ^`f7.n` := v0 @kind object;
  #L1f829c.  v2.`c7.h.d` @type ^`f7.b` := v0 @kind object;
  #L1f82a0.  v2.`c7.h.e` @type ^`f7.n` := v0 @kind object;
  #L1f82a4.  v2.`c7.h.f` @type ^`f7.b` := v0 @kind object;
  #L1f82a8.  call temp:= `j`() @signature `Lf7/q;.j:()Lf7/q;` @kind static;
  #L1f82ae.  v1:= temp @kind object;
  #L1f82b0.  v2.`c7.h.g` @type ^`f7.h` := v1 @kind object;
  #L1f82b4.  v2.`c7.h.h` @type ^`java.lang.String` := v0 @kind object;
  #L1f82b8.  return @kind void;
}
procedure `c7.h` `a`(`c7.h` v2 @kind this) @signature `Lc7/h;.a:()Lc7/h;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1f7b3c.  v0:= new `c7.h`;
  #L1f7b40.  call `<init>`(v0) @signature `Lc7/h;.<init>:()V` @kind direct;
  #L1f7b46.  v1:= v2.`c7.h.a` @type ^`java.lang.Integer` @kind object;
  #L1f7b4a.  v0.`c7.h.a` @type ^`java.lang.Integer` := v1 @kind object;
  #L1f7b4e.  v1:= v2.`c7.h.c` @type ^`f7.n` @kind object;
  #L1f7b52.  v0.`c7.h.c` @type ^`f7.n` := v1 @kind object;
  #L1f7b56.  v1:= v2.`c7.h.d` @type ^`f7.b` @kind object;
  #L1f7b5a.  v0.`c7.h.d` @type ^`f7.b` := v1 @kind object;
  #L1f7b5e.  v1:= v2.`c7.h.e` @type ^`f7.n` @kind object;
  #L1f7b62.  v0.`c7.h.e` @type ^`f7.n` := v1 @kind object;
  #L1f7b66.  v1:= v2.`c7.h.f` @type ^`f7.b` @kind object;
  #L1f7b6a.  v0.`c7.h.f` @type ^`f7.b` := v1 @kind object;
  #L1f7b6e.  v1:= v2.`c7.h.b` @type ^`c7.h$b` @kind object;
  #L1f7b72.  v0.`c7.h.b` @type ^`c7.h$b` := v1 @kind object;
  #L1f7b76.  v1:= v2.`c7.h.g` @type ^`f7.h` @kind object;
  #L1f7b7a.  v0.`c7.h.g` @type ^`f7.h` := v1 @kind object;
  #L1f7b7e.  return v0 @kind object;
}
procedure `c7.h` `c`(`java.util.Map` v4 @kind object) @signature `Lc7/h;.c:(Ljava/util/Map;)Lc7/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f7be8.  v0:= new `c7.h`;
  #L1f7bec.  call `<init>`(v0) @signature `Lc7/h;.<init>:()V` @kind direct;
  #L1f7bf2.  v1:= "l" @kind object;
  #L1f7bf6.  call temp:= `get`(v4, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f7bfc.  v2:= temp @kind object;
  #L1f7bfe.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L1f7c02.  v0.`c7.h.a` @type ^`java.lang.Integer` := v2 @kind object;
  #L1f7c06.  v2:= "sp" @kind object;
  #L1f7c0a.  call temp:= `containsKey`(v4, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L1f7c10.  v3:= temp;
  #L1f7c12.  if v3 == 0 then goto L1f7c52;
  #L1f7c16.  call temp:= `get`(v4, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f7c1c.  v2:= temp @kind object;
  #L1f7c1e.  call temp:= `a`(v2) @signature `Lf7/o;.a:(Ljava/lang/Object;)Lf7/n;` @kind static;
  #L1f7c24.  v2:= temp @kind object;
  #L1f7c26.  call temp:= `v`(v2) @signature `Lc7/h;.v:(Lf7/n;)Lf7/n;` @kind static;
  #L1f7c2c.  v2:= temp @kind object;
  #L1f7c2e.  v0.`c7.h.c` @type ^`f7.n` := v2 @kind object;
  #L1f7c32.  v2:= "sn" @kind object;
  #L1f7c36.  call temp:= `get`(v4, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f7c3c.  v2:= temp @kind object;
  #L1f7c3e.  v2:= (`java.lang.String`) v2 @kind object;
  #L1f7c42.  if v2 == 0 then goto L1f7c52;
  #L1f7c46.  call temp:= `h`(v2) @signature `Lf7/b;.h:(Ljava/lang/String;)Lf7/b;` @kind static;
  #L1f7c4c.  v2:= temp @kind object;
  #L1f7c4e.  v0.`c7.h.d` @type ^`f7.b` := v2 @kind object;
  #L1f7c52.  v2:= "ep" @kind object;
  #L1f7c56.  call temp:= `containsKey`(v4, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L1f7c5c.  v3:= temp;
  #L1f7c5e.  if v3 == 0 then goto L1f7c9e;
  #L1f7c62.  call temp:= `get`(v4, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f7c68.  v2:= temp @kind object;
  #L1f7c6a.  call temp:= `a`(v2) @signature `Lf7/o;.a:(Ljava/lang/Object;)Lf7/n;` @kind static;
  #L1f7c70.  v2:= temp @kind object;
  #L1f7c72.  call temp:= `v`(v2) @signature `Lc7/h;.v:(Lf7/n;)Lf7/n;` @kind static;
  #L1f7c78.  v2:= temp @kind object;
  #L1f7c7a.  v0.`c7.h.e` @type ^`f7.n` := v2 @kind object;
  #L1f7c7e.  v2:= "en" @kind object;
  #L1f7c82.  call temp:= `get`(v4, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f7c88.  v2:= temp @kind object;
  #L1f7c8a.  v2:= (`java.lang.String`) v2 @kind object;
  #L1f7c8e.  if v2 == 0 then goto L1f7c9e;
  #L1f7c92.  call temp:= `h`(v2) @signature `Lf7/b;.h:(Ljava/lang/String;)Lf7/b;` @kind static;
  #L1f7c98.  v2:= temp @kind object;
  #L1f7c9a.  v0.`c7.h.f` @type ^`f7.b` := v2 @kind object;
  #L1f7c9e.  v2:= "vf" @kind object;
  #L1f7ca2.  call temp:= `get`(v4, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f7ca8.  v2:= temp @kind object;
  #L1f7caa.  v2:= (`java.lang.String`) v2 @kind object;
  #L1f7cae.  if v2 == 0 then goto L1f7ccc;
  #L1f7cb2.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7cb8.  v1:= temp;
  #L1f7cba.  if v1 == 0 then goto L1f7cc4;
  #L1f7cbe.  v1:= `@@c7.h$b.o` @type ^`c7.h$b` @kind object;
  #L1f7cc2.  goto L1f7cc8;
  #L1f7cc4.  v1:= `@@c7.h$b.p` @type ^`c7.h$b` @kind object;
  #L1f7cc8.  v0.`c7.h.b` @type ^`c7.h$b` := v1 @kind object;
  #L1f7ccc.  v1:= "i" @kind object;
  #L1f7cd0.  call temp:= `get`(v4, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f7cd6.  v4:= temp @kind object;
  #L1f7cd8.  v4:= (`java.lang.String`) v4 @kind object;
  #L1f7cdc.  if v4 == 0 then goto L1f7cec;
  #L1f7ce0.  call temp:= `b`(v4) @signature `Lf7/h;.b:(Ljava/lang/String;)Lf7/h;` @kind static;
  #L1f7ce6.  v4:= temp @kind object;
  #L1f7ce8.  v0.`c7.h.g` @type ^`f7.h` := v4 @kind object;
  #L1f7cec.  return v0 @kind object;
}
procedure `f7.n` `v`(`f7.n` v3 @kind object) @signature `Lc7/h;.v:(Lf7/n;)Lf7/n;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f7f2c.  v0:= instanceof @variable v3 @type ^`f7.t` @kind boolean;
  #L1f7f30.  if v0 != 0 then goto L1f7fbc;
  #L1f7f34.  v0:= instanceof @variable v3 @type ^`f7.a` @kind boolean;
  #L1f7f38.  if v0 != 0 then goto L1f7fbc;
  #L1f7f3c.  v0:= instanceof @variable v3 @type ^`f7.f` @kind boolean;
  #L1f7f40.  if v0 != 0 then goto L1f7fbc;
  #L1f7f44.  v0:= instanceof @variable v3 @type ^`f7.g` @kind boolean;
  #L1f7f48.  if v0 == 0 then goto L1f7f4e;
  #L1f7f4c.  goto L1f7fbc;
  #L1f7f4e.  v0:= instanceof @variable v3 @type ^`f7.l` @kind boolean;
  #L1f7f52.  if v0 == 0 then goto L1f7f86;
  #L1f7f56.  v0:= new `f7.f`;
  #L1f7f5a.  call temp:= `getValue`(v3) @signature `Lf7/n;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1f7f60.  v3:= temp @kind object;
  #L1f7f62.  v3:= (`java.lang.Long`) v3 @kind object;
  #L1f7f66.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Long;.doubleValue:()D` @kind virtual;
  #L1f7f6c.  v1:= temp @kind wide;
  #L1f7f6e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1f7f74.  v3:= temp @kind object;
  #L1f7f76.  call temp:= `a`() @signature `Lf7/r;.a:()Lf7/n;` @kind static;
  #L1f7f7c.  v1:= temp @kind object;
  #L1f7f7e.  call `<init>`(v0, v3, v1) @signature `Lf7/f;.<init>:(Ljava/lang/Double;Lf7/n;)V` @kind direct;
  #L1f7f84.  return v0 @kind object;
  #L1f7f86.  v0:= new `java.lang.IllegalStateException`;
  #L1f7f8a.  v1:= new `java.lang.StringBuilder`;
  #L1f7f8e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f7f94.  v2:= "Unexpected value passed to normalizeValue: " @kind object;
  #L1f7f98.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f7f9e.  call temp:= `getValue`(v3) @signature `Lf7/n;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1f7fa4.  v3:= temp @kind object;
  #L1f7fa6.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f7fac.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f7fb2.  v3:= temp @kind object;
  #L1f7fb4.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f7fba.  throw v0;
  #L1f7fbc.  return v3 @kind object;
}
procedure `c7.h` `b`(`c7.h` v2 @kind this, `f7.n` v3 @kind object, `f7.b` v4 @kind object) @signature `Lc7/h;.b:(Lf7/n;Lf7/b;)Lc7/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7b90.  call temp:= `A`(v3) @signature `Lf7/n;.A:()Z` @kind interface;
  #L1f7b96.  v0:= temp;
  #L1f7b98.  v1:= 1I;
  #L1f7b9a.  if v0 != 0 then goto L1f7bb0;
  #L1f7b9e.  call temp:= `isEmpty`(v3) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L1f7ba4.  v0:= temp;
  #L1f7ba6.  if v0 == 0 then goto L1f7bac;
  #L1f7baa.  goto L1f7bb0;
  #L1f7bac.  v0:= 0I;
  #L1f7bae.  goto L1f7bb2;
  #L1f7bb0.  v0:= 1I;
  #L1f7bb2.  call `f`(v0) @signature `La7/m;.f:(Z)V` @kind static;
  #L1f7bb8.  v0:= instanceof @variable v3 @type ^`f7.l` @kind boolean;
  #L1f7bbc.  v0:= v0 ^~ v1 @kind int;
  #L1f7bbe.  call `f`(v0) @signature `La7/m;.f:(Z)V` @kind static;
  #L1f7bc4.  call temp:= `a`(v2) @signature `Lc7/h;.a:()Lc7/h;` @kind direct;
  #L1f7bca.  v0:= temp @kind object;
  #L1f7bcc.  v0.`c7.h.e` @type ^`f7.n` := v3 @kind object;
  #L1f7bd0.  v0.`c7.h.f` @type ^`f7.b` := v4 @kind object;
  #L1f7bd4.  return v0 @kind object;
}
procedure `f7.h` `d`(`c7.h` v1 @kind this) @signature `Lc7/h;.d:()Lf7/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7eac.  v0:= v1.`c7.h.g` @type ^`f7.h` @kind object;
  #L1f7eb0.  return v0 @kind object;
}
procedure `f7.b` `e`(`c7.h` v2 @kind this) @signature `Lc7/h;.e:()Lf7/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7e2c.  call temp:= `m`(v2) @signature `Lc7/h;.m:()Z` @kind virtual;
  #L1f7e32.  v0:= temp;
  #L1f7e34.  if v0 == 0 then goto L1f7e4c;
  #L1f7e38.  v0:= v2.`c7.h.f` @type ^`f7.b` @kind object;
  #L1f7e3c.  if v0 == 0 then goto L1f7e42;
  #L1f7e40.  return v0 @kind object;
  #L1f7e42.  call temp:= `j`() @signature `Lf7/b;.j:()Lf7/b;` @kind static;
  #L1f7e48.  v0:= temp @kind object;
  #L1f7e4a.  return v0 @kind object;
  #L1f7e4c.  v0:= new `java.lang.IllegalArgumentException`;
  #L1f7e50.  v1:= "Cannot get index end name if start has not been set" @kind object;
  #L1f7e54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f7e5a.  throw v0;
}
procedure `boolean` `equals`(`c7.h` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lc7/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f7890.  v0:= 1I;
  #L1f7892.  if v4 != v5 then goto L1f7898;
  #L1f7896.  return v0;
  #L1f7898.  v1:= 0I;
  #L1f789a.  if v5 == 0 then goto L1f79a6;
  #L1f789e.  v2:= constclass @type ^`c7.h` @kind object;
  #L1f78a2.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1f78a8.  v3:= temp @kind object;
  #L1f78aa.  if v2 == v3 then goto L1f78b2;
  #L1f78ae.  goto L1f79a6;
  #L1f78b2.  v5:= (`c7.h`) v5 @kind object;
  #L1f78b6.  v2:= v4.`c7.h.a` @type ^`java.lang.Integer` @kind object;
  #L1f78ba.  if v2 == 0 then goto L1f78d0;
  #L1f78be.  v3:= v5.`c7.h.a` @type ^`java.lang.Integer` @kind object;
  #L1f78c2.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Integer;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f78c8.  v2:= temp;
  #L1f78ca.  if v2 != 0 then goto L1f78da;
  #L1f78ce.  goto L1f78d8;
  #L1f78d0.  v2:= v5.`c7.h.a` @type ^`java.lang.Integer` @kind object;
  #L1f78d4.  if v2 == 0 then goto L1f78da;
  #L1f78d8.  return v1;
  #L1f78da.  v2:= v4.`c7.h.g` @type ^`f7.h` @kind object;
  #L1f78de.  if v2 == 0 then goto L1f78f4;
  #L1f78e2.  v3:= v5.`c7.h.g` @type ^`f7.h` @kind object;
  #L1f78e6.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f78ec.  v2:= temp;
  #L1f78ee.  if v2 != 0 then goto L1f78fe;
  #L1f78f2.  goto L1f78fc;
  #L1f78f4.  v2:= v5.`c7.h.g` @type ^`f7.h` @kind object;
  #L1f78f8.  if v2 == 0 then goto L1f78fe;
  #L1f78fc.  return v1;
  #L1f78fe.  v2:= v4.`c7.h.f` @type ^`f7.b` @kind object;
  #L1f7902.  if v2 == 0 then goto L1f7918;
  #L1f7906.  v3:= v5.`c7.h.f` @type ^`f7.b` @kind object;
  #L1f790a.  call temp:= `equals`(v2, v3) @signature `Lf7/b;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7910.  v2:= temp;
  #L1f7912.  if v2 != 0 then goto L1f7922;
  #L1f7916.  goto L1f7920;
  #L1f7918.  v2:= v5.`c7.h.f` @type ^`f7.b` @kind object;
  #L1f791c.  if v2 == 0 then goto L1f7922;
  #L1f7920.  return v1;
  #L1f7922.  v2:= v4.`c7.h.e` @type ^`f7.n` @kind object;
  #L1f7926.  if v2 == 0 then goto L1f793c;
  #L1f792a.  v3:= v5.`c7.h.e` @type ^`f7.n` @kind object;
  #L1f792e.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7934.  v2:= temp;
  #L1f7936.  if v2 != 0 then goto L1f7946;
  #L1f793a.  goto L1f7944;
  #L1f793c.  v2:= v5.`c7.h.e` @type ^`f7.n` @kind object;
  #L1f7940.  if v2 == 0 then goto L1f7946;
  #L1f7944.  return v1;
  #L1f7946.  v2:= v4.`c7.h.d` @type ^`f7.b` @kind object;
  #L1f794a.  if v2 == 0 then goto L1f7960;
  #L1f794e.  v3:= v5.`c7.h.d` @type ^`f7.b` @kind object;
  #L1f7952.  call temp:= `equals`(v2, v3) @signature `Lf7/b;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7958.  v2:= temp;
  #L1f795a.  if v2 != 0 then goto L1f796a;
  #L1f795e.  goto L1f7968;
  #L1f7960.  v2:= v5.`c7.h.d` @type ^`f7.b` @kind object;
  #L1f7964.  if v2 == 0 then goto L1f796a;
  #L1f7968.  return v1;
  #L1f796a.  v2:= v4.`c7.h.c` @type ^`f7.n` @kind object;
  #L1f796e.  if v2 == 0 then goto L1f7984;
  #L1f7972.  v3:= v5.`c7.h.c` @type ^`f7.n` @kind object;
  #L1f7976.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f797c.  v2:= temp;
  #L1f797e.  if v2 != 0 then goto L1f798e;
  #L1f7982.  goto L1f798c;
  #L1f7984.  v2:= v5.`c7.h.c` @type ^`f7.n` @kind object;
  #L1f7988.  if v2 == 0 then goto L1f798e;
  #L1f798c.  return v1;
  #L1f798e.  call temp:= `r`(v4) @signature `Lc7/h;.r:()Z` @kind virtual;
  #L1f7994.  v2:= temp;
  #L1f7996.  call temp:= `r`(v5) @signature `Lc7/h;.r:()Z` @kind virtual;
  #L1f799c.  v5:= temp;
  #L1f799e.  if v2 == v5 then goto L1f79a4;
  #L1f79a2.  return v1;
  #L1f79a4.  return v0;
  #L1f79a6.  return v1;
}
procedure `f7.n` `f`(`c7.h` v2 @kind this) @signature `Lc7/h;.f:()Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7ec4.  call temp:= `m`(v2) @signature `Lc7/h;.m:()Z` @kind virtual;
  #L1f7eca.  v0:= temp;
  #L1f7ecc.  if v0 == 0 then goto L1f7ed6;
  #L1f7ed0.  v0:= v2.`c7.h.e` @type ^`f7.n` @kind object;
  #L1f7ed4.  return v0 @kind object;
  #L1f7ed6.  v0:= new `java.lang.IllegalArgumentException`;
  #L1f7eda.  v1:= "Cannot get index end value if start has not been set" @kind object;
  #L1f7ede.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f7ee4.  throw v0;
}
procedure `f7.b` `g`(`c7.h` v2 @kind this) @signature `Lc7/h;.g:()Lf7/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7e6c.  call temp:= `o`(v2) @signature `Lc7/h;.o:()Z` @kind virtual;
  #L1f7e72.  v0:= temp;
  #L1f7e74.  if v0 == 0 then goto L1f7e8c;
  #L1f7e78.  v0:= v2.`c7.h.d` @type ^`f7.b` @kind object;
  #L1f7e7c.  if v0 == 0 then goto L1f7e82;
  #L1f7e80.  return v0 @kind object;
  #L1f7e82.  call temp:= `k`() @signature `Lf7/b;.k:()Lf7/b;` @kind static;
  #L1f7e88.  v0:= temp @kind object;
  #L1f7e8a.  return v0 @kind object;
  #L1f7e8c.  v0:= new `java.lang.IllegalArgumentException`;
  #L1f7e90.  v1:= "Cannot get index start name if start has not been set" @kind object;
  #L1f7e94.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f7e9a.  throw v0;
}
procedure `f7.n` `h`(`c7.h` v2 @kind this) @signature `Lc7/h;.h:()Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7ef8.  call temp:= `o`(v2) @signature `Lc7/h;.o:()Z` @kind virtual;
  #L1f7efe.  v0:= temp;
  #L1f7f00.  if v0 == 0 then goto L1f7f0a;
  #L1f7f04.  v0:= v2.`c7.h.c` @type ^`f7.n` @kind object;
  #L1f7f08.  return v0 @kind object;
  #L1f7f0a.  v0:= new `java.lang.IllegalArgumentException`;
  #L1f7f0e.  v1:= "Cannot get index start value if start has not been set" @kind object;
  #L1f7f12.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f7f18.  throw v0;
}
procedure `int` `hashCode`(`c7.h` v3 @kind this) @signature `Lc7/h;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f800c.  v0:= v3.`c7.h.a` @type ^`java.lang.Integer` @kind object;
  #L1f8010.  v1:= 0I;
  #L1f8012.  if v0 == 0 then goto L1f8020;
  #L1f8016.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1f801c.  v0:= temp;
  #L1f801e.  goto L1f8022;
  #L1f8020.  v0:= 0I;
  #L1f8022.  v0:= v0 * 31;
  #L1f8026.  call temp:= `r`(v3) @signature `Lc7/h;.r:()Z` @kind virtual;
  #L1f802c.  v2:= temp;
  #L1f802e.  if v2 == 0 then goto L1f8038;
  #L1f8032.  v2:= 1231I;
  #L1f8036.  goto L1f803c;
  #L1f8038.  v2:= 1237I;
  #L1f803c.  v0:= v0 + v2 @kind int;
  #L1f803e.  v0:= v0 * 31;
  #L1f8042.  v2:= v3.`c7.h.c` @type ^`f7.n` @kind object;
  #L1f8046.  if v2 == 0 then goto L1f8054;
  #L1f804a.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1f8050.  v2:= temp;
  #L1f8052.  goto L1f8056;
  #L1f8054.  v2:= 0I;
  #L1f8056.  v0:= v0 + v2 @kind int;
  #L1f8058.  v0:= v0 * 31;
  #L1f805c.  v2:= v3.`c7.h.d` @type ^`f7.b` @kind object;
  #L1f8060.  if v2 == 0 then goto L1f806e;
  #L1f8064.  call temp:= `hashCode`(v2) @signature `Lf7/b;.hashCode:()I` @kind virtual;
  #L1f806a.  v2:= temp;
  #L1f806c.  goto L1f8070;
  #L1f806e.  v2:= 0I;
  #L1f8070.  v0:= v0 + v2 @kind int;
  #L1f8072.  v0:= v0 * 31;
  #L1f8076.  v2:= v3.`c7.h.e` @type ^`f7.n` @kind object;
  #L1f807a.  if v2 == 0 then goto L1f8088;
  #L1f807e.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1f8084.  v2:= temp;
  #L1f8086.  goto L1f808a;
  #L1f8088.  v2:= 0I;
  #L1f808a.  v0:= v0 + v2 @kind int;
  #L1f808c.  v0:= v0 * 31;
  #L1f8090.  v2:= v3.`c7.h.f` @type ^`f7.b` @kind object;
  #L1f8094.  if v2 == 0 then goto L1f80a2;
  #L1f8098.  call temp:= `hashCode`(v2) @signature `Lf7/b;.hashCode:()I` @kind virtual;
  #L1f809e.  v2:= temp;
  #L1f80a0.  goto L1f80a4;
  #L1f80a2.  v2:= 0I;
  #L1f80a4.  v0:= v0 + v2 @kind int;
  #L1f80a6.  v0:= v0 * 31;
  #L1f80aa.  v2:= v3.`c7.h.g` @type ^`f7.h` @kind object;
  #L1f80ae.  if v2 == 0 then goto L1f80ba;
  #L1f80b2.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1f80b8.  v1:= temp;
  #L1f80ba.  v0:= v0 + v1 @kind int;
  #L1f80bc.  return v0;
}
procedure `int` `i`(`c7.h` v2 @kind this) @signature `Lc7/h;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7fd0.  call temp:= `n`(v2) @signature `Lc7/h;.n:()Z` @kind virtual;
  #L1f7fd6.  v0:= temp;
  #L1f7fd8.  if v0 == 0 then goto L1f7fea;
  #L1f7fdc.  v0:= v2.`c7.h.a` @type ^`java.lang.Integer` @kind object;
  #L1f7fe0.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1f7fe6.  v0:= temp;
  #L1f7fe8.  return v0;
  #L1f7fea.  v0:= new `java.lang.IllegalArgumentException`;
  #L1f7fee.  v1:= "Cannot get limit if limit has not been set" @kind object;
  #L1f7ff2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f7ff8.  throw v0;
}
procedure `d7.d` `j`(`c7.h` v2 @kind this) @signature `Lc7/h;.j:()Ld7/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7dd8.  call temp:= `u`(v2) @signature `Lc7/h;.u:()Z` @kind virtual;
  #L1f7dde.  v0:= temp;
  #L1f7de0.  if v0 == 0 then goto L1f7df8;
  #L1f7de4.  v0:= new `d7.b`;
  #L1f7de8.  call temp:= `d`(v2) @signature `Lc7/h;.d:()Lf7/h;` @kind virtual;
  #L1f7dee.  v1:= temp @kind object;
  #L1f7df0.  call `<init>`(v0, v1) @signature `Ld7/b;.<init>:(Lf7/h;)V` @kind direct;
  #L1f7df6.  return v0 @kind object;
  #L1f7df8.  call temp:= `n`(v2) @signature `Lc7/h;.n:()Z` @kind virtual;
  #L1f7dfe.  v0:= temp;
  #L1f7e00.  if v0 == 0 then goto L1f7e10;
  #L1f7e04.  v0:= new `d7.c`;
  #L1f7e08.  call `<init>`(v0, v2) @signature `Ld7/c;.<init>:(Lc7/h;)V` @kind direct;
  #L1f7e0e.  return v0 @kind object;
  #L1f7e10.  v0:= new `d7.e`;
  #L1f7e14.  call `<init>`(v0, v2) @signature `Ld7/e;.<init>:(Lc7/h;)V` @kind direct;
  #L1f7e1a.  return v0 @kind object;
}
procedure `java.util.Map` `k`(`c7.h` v5 @kind this) @signature `Lc7/h;.k:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f8148.  v0:= new `java.util.HashMap`;
  #L1f814c.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L1f8152.  call temp:= `o`(v5) @signature `Lc7/h;.o:()Z` @kind virtual;
  #L1f8158.  v1:= temp;
  #L1f815a.  if v1 == 0 then goto L1f818e;
  #L1f815e.  v1:= v5.`c7.h.c` @type ^`f7.n` @kind object;
  #L1f8162.  call temp:= `getValue`(v1) @signature `Lf7/n;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1f8168.  v1:= temp @kind object;
  #L1f816a.  v2:= "sp" @kind object;
  #L1f816e.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f8174.  v1:= v5.`c7.h.d` @type ^`f7.b` @kind object;
  #L1f8178.  if v1 == 0 then goto L1f818e;
  #L1f817c.  call temp:= `d`(v1) @signature `Lf7/b;.d:()Ljava/lang/String;` @kind virtual;
  #L1f8182.  v1:= temp @kind object;
  #L1f8184.  v2:= "sn" @kind object;
  #L1f8188.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f818e.  call temp:= `m`(v5) @signature `Lc7/h;.m:()Z` @kind virtual;
  #L1f8194.  v1:= temp;
  #L1f8196.  if v1 == 0 then goto L1f81ca;
  #L1f819a.  v1:= v5.`c7.h.e` @type ^`f7.n` @kind object;
  #L1f819e.  call temp:= `getValue`(v1) @signature `Lf7/n;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1f81a4.  v1:= temp @kind object;
  #L1f81a6.  v2:= "ep" @kind object;
  #L1f81aa.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f81b0.  v1:= v5.`c7.h.f` @type ^`f7.b` @kind object;
  #L1f81b4.  if v1 == 0 then goto L1f81ca;
  #L1f81b8.  call temp:= `d`(v1) @signature `Lf7/b;.d:()Ljava/lang/String;` @kind virtual;
  #L1f81be.  v1:= temp @kind object;
  #L1f81c0.  v2:= "en" @kind object;
  #L1f81c4.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f81ca.  v1:= v5.`c7.h.a` @type ^`java.lang.Integer` @kind object;
  #L1f81ce.  if v1 == 0 then goto L1f822e;
  #L1f81d2.  v2:= "l" @kind object;
  #L1f81d6.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f81dc.  v1:= v5.`c7.h.b` @type ^`c7.h$b` @kind object;
  #L1f81e0.  if v1 != 0 then goto L1f81fa;
  #L1f81e4.  call temp:= `o`(v5) @signature `Lc7/h;.o:()Z` @kind virtual;
  #L1f81ea.  v1:= temp;
  #L1f81ec.  if v1 == 0 then goto L1f81f6;
  #L1f81f0.  v1:= `@@c7.h$b.o` @type ^`c7.h$b` @kind object;
  #L1f81f4.  goto L1f81fa;
  #L1f81f6.  v1:= `@@c7.h$b.p` @type ^`c7.h$b` @kind object;
  #L1f81fa.  v3:= `@@c7.h$a.a` @type ^`int`[] @kind object;
  #L1f81fe.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1f8204.  v1:= temp;
  #L1f8206.  v1:= v3[v1];
  #L1f820a.  v3:= 1I;
  #L1f820c.  v4:= "vf" @kind object;
  #L1f8210.  if v1 == v3 then goto L1f8228;
  #L1f8214.  v2:= 2I;
  #L1f8216.  if v1 == v2 then goto L1f821c;
  #L1f821a.  goto L1f822e;
  #L1f821c.  v1:= "r" @kind object;
  #L1f8220.  call temp:= `put`(v0, v4, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f8226.  goto L1f822e;
  #L1f8228.  call temp:= `put`(v0, v4, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f822e.  v1:= v5.`c7.h.g` @type ^`f7.h` @kind object;
  #L1f8232.  call temp:= `j`() @signature `Lf7/q;.j:()Lf7/q;` @kind static;
  #L1f8238.  v2:= temp @kind object;
  #L1f823a.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f8240.  v1:= temp;
  #L1f8242.  if v1 != 0 then goto L1f825c;
  #L1f8246.  v1:= v5.`c7.h.g` @type ^`f7.h` @kind object;
  #L1f824a.  call temp:= `c`(v1) @signature `Lf7/h;.c:()Ljava/lang/String;` @kind virtual;
  #L1f8250.  v1:= temp @kind object;
  #L1f8252.  v2:= "i" @kind object;
  #L1f8256.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f825c.  return v0 @kind object;
}
procedure `boolean` `l`(`c7.h` v1 @kind this) @signature `Lc7/h;.l:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f79b8.  call temp:= `n`(v1) @signature `Lc7/h;.n:()Z` @kind virtual;
  #L1f79be.  v0:= temp;
  #L1f79c0.  if v0 == 0 then goto L1f79d0;
  #L1f79c4.  v0:= v1.`c7.h.b` @type ^`c7.h$b` @kind object;
  #L1f79c8.  if v0 == 0 then goto L1f79d0;
  #L1f79cc.  v0:= 1I;
  #L1f79ce.  goto L1f79d2;
  #L1f79d0.  v0:= 0I;
  #L1f79d2.  return v0;
}
procedure `boolean` `m`(`c7.h` v1 @kind this) @signature `Lc7/h;.m:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f79e4.  v0:= v1.`c7.h.e` @type ^`f7.n` @kind object;
  #L1f79e8.  if v0 == 0 then goto L1f79f0;
  #L1f79ec.  v0:= 1I;
  #L1f79ee.  goto L1f79f2;
  #L1f79f0.  v0:= 0I;
  #L1f79f2.  return v0;
}
procedure `boolean` `n`(`c7.h` v1 @kind this) @signature `Lc7/h;.n:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7a04.  v0:= v1.`c7.h.a` @type ^`java.lang.Integer` @kind object;
  #L1f7a08.  if v0 == 0 then goto L1f7a10;
  #L1f7a0c.  v0:= 1I;
  #L1f7a0e.  goto L1f7a12;
  #L1f7a10.  v0:= 0I;
  #L1f7a12.  return v0;
}
procedure `boolean` `o`(`c7.h` v1 @kind this) @signature `Lc7/h;.o:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7a24.  v0:= v1.`c7.h.c` @type ^`f7.n` @kind object;
  #L1f7a28.  if v0 == 0 then goto L1f7a30;
  #L1f7a2c.  v0:= 1I;
  #L1f7a2e.  goto L1f7a32;
  #L1f7a30.  v0:= 0I;
  #L1f7a32.  return v0;
}
procedure `boolean` `p`(`c7.h` v2 @kind this) @signature `Lc7/h;.p:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7a44.  call temp:= `u`(v2) @signature `Lc7/h;.u:()Z` @kind virtual;
  #L1f7a4a.  v0:= temp;
  #L1f7a4c.  if v0 == 0 then goto L1f7a6c;
  #L1f7a50.  v0:= v2.`c7.h.g` @type ^`f7.h` @kind object;
  #L1f7a54.  call temp:= `j`() @signature `Lf7/q;.j:()Lf7/q;` @kind static;
  #L1f7a5a.  v1:= temp @kind object;
  #L1f7a5c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7a62.  v0:= temp;
  #L1f7a64.  if v0 == 0 then goto L1f7a6c;
  #L1f7a68.  v0:= 1I;
  #L1f7a6a.  goto L1f7a6e;
  #L1f7a6c.  v0:= 0I;
  #L1f7a6e.  return v0;
}
procedure `boolean` `q`(`c7.h` v1 @kind this) @signature `Lc7/h;.q:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7a80.  call temp:= `o`(v1) @signature `Lc7/h;.o:()Z` @kind virtual;
  #L1f7a86.  v0:= temp;
  #L1f7a88.  if v0 == 0 then goto L1f7ab6;
  #L1f7a8c.  call temp:= `m`(v1) @signature `Lc7/h;.m:()Z` @kind virtual;
  #L1f7a92.  v0:= temp;
  #L1f7a94.  if v0 == 0 then goto L1f7ab6;
  #L1f7a98.  call temp:= `n`(v1) @signature `Lc7/h;.n:()Z` @kind virtual;
  #L1f7a9e.  v0:= temp;
  #L1f7aa0.  if v0 == 0 then goto L1f7ab6;
  #L1f7aa4.  call temp:= `l`(v1) @signature `Lc7/h;.l:()Z` @kind virtual;
  #L1f7aaa.  v0:= temp;
  #L1f7aac.  if v0 == 0 then goto L1f7ab2;
  #L1f7ab0.  goto L1f7ab6;
  #L1f7ab2.  v0:= 0I;
  #L1f7ab4.  goto L1f7ab8;
  #L1f7ab6.  v0:= 1I;
  #L1f7ab8.  return v0;
}
procedure `boolean` `r`(`c7.h` v2 @kind this) @signature `Lc7/h;.r:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7acc.  v0:= v2.`c7.h.b` @type ^`c7.h$b` @kind object;
  #L1f7ad0.  if v0 == 0 then goto L1f7ae4;
  #L1f7ad4.  v1:= `@@c7.h$b.o` @type ^`c7.h$b` @kind object;
  #L1f7ad8.  if v0 != v1 then goto L1f7ae0;
  #L1f7adc.  v0:= 1I;
  #L1f7ade.  goto L1f7aec;
  #L1f7ae0.  v0:= 0I;
  #L1f7ae2.  goto L1f7aec;
  #L1f7ae4.  call temp:= `o`(v2) @signature `Lc7/h;.o:()Z` @kind virtual;
  #L1f7aea.  v0:= temp;
  #L1f7aec.  return v0;
}
procedure `c7.h` `s`(`c7.h` v1 @kind this, `int` v2 ) @signature `Lc7/h;.s:(I)Lc7/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7d00.  call temp:= `a`(v1) @signature `Lc7/h;.a:()Lc7/h;` @kind direct;
  #L1f7d06.  v0:= temp @kind object;
  #L1f7d08.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1f7d0e.  v2:= temp @kind object;
  #L1f7d10.  v0.`c7.h.a` @type ^`java.lang.Integer` := v2 @kind object;
  #L1f7d14.  v2:= `@@c7.h$b.o` @type ^`c7.h$b` @kind object;
  #L1f7d18.  v0.`c7.h.b` @type ^`c7.h$b` := v2 @kind object;
  #L1f7d1c.  return v0 @kind object;
}
procedure `c7.h` `t`(`c7.h` v1 @kind this, `int` v2 ) @signature `Lc7/h;.t:(I)Lc7/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7d30.  call temp:= `a`(v1) @signature `Lc7/h;.a:()Lc7/h;` @kind direct;
  #L1f7d36.  v0:= temp @kind object;
  #L1f7d38.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1f7d3e.  v2:= temp @kind object;
  #L1f7d40.  v0.`c7.h.a` @type ^`java.lang.Integer` := v2 @kind object;
  #L1f7d44.  v2:= `@@c7.h$b.p` @type ^`c7.h$b` @kind object;
  #L1f7d48.  v0.`c7.h.b` @type ^`c7.h$b` := v2 @kind object;
  #L1f7d4c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`c7.h` v1 @kind this) @signature `Lc7/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f8124.  call temp:= `k`(v1) @signature `Lc7/h;.k:()Ljava/util/Map;` @kind virtual;
  #L1f812a.  v0:= temp @kind object;
  #L1f812c.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f8132.  v0:= temp @kind object;
  #L1f8134.  return v0 @kind object;
}
procedure `boolean` `u`(`c7.h` v1 @kind this) @signature `Lc7/h;.u:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7b00.  call temp:= `o`(v1) @signature `Lc7/h;.o:()Z` @kind virtual;
  #L1f7b06.  v0:= temp;
  #L1f7b08.  if v0 != 0 then goto L1f7b28;
  #L1f7b0c.  call temp:= `m`(v1) @signature `Lc7/h;.m:()Z` @kind virtual;
  #L1f7b12.  v0:= temp;
  #L1f7b14.  if v0 != 0 then goto L1f7b28;
  #L1f7b18.  call temp:= `n`(v1) @signature `Lc7/h;.n:()Z` @kind virtual;
  #L1f7b1e.  v0:= temp;
  #L1f7b20.  if v0 != 0 then goto L1f7b28;
  #L1f7b24.  v0:= 1I;
  #L1f7b26.  goto L1f7b2a;
  #L1f7b28.  v0:= 0I;
  #L1f7b2a.  return v0;
}
procedure `c7.h` `w`(`c7.h` v1 @kind this, `f7.h` v2 @kind object) @signature `Lc7/h;.w:(Lf7/h;)Lc7/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7d60.  call temp:= `a`(v1) @signature `Lc7/h;.a:()Lc7/h;` @kind direct;
  #L1f7d66.  v0:= temp @kind object;
  #L1f7d68.  v0.`c7.h.g` @type ^`f7.h` := v2 @kind object;
  #L1f7d6c.  return v0 @kind object;
}
procedure `c7.h` `x`(`c7.h` v2 @kind this, `f7.n` v3 @kind object, `f7.b` v4 @kind object) @signature `Lc7/h;.x:(Lf7/n;Lf7/b;)Lc7/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7d80.  call temp:= `A`(v3) @signature `Lf7/n;.A:()Z` @kind interface;
  #L1f7d86.  v0:= temp;
  #L1f7d88.  v1:= 1I;
  #L1f7d8a.  if v0 != 0 then goto L1f7da0;
  #L1f7d8e.  call temp:= `isEmpty`(v3) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L1f7d94.  v0:= temp;
  #L1f7d96.  if v0 == 0 then goto L1f7d9c;
  #L1f7d9a.  goto L1f7da0;
  #L1f7d9c.  v0:= 0I;
  #L1f7d9e.  goto L1f7da2;
  #L1f7da0.  v0:= 1I;
  #L1f7da2.  call `f`(v0) @signature `La7/m;.f:(Z)V` @kind static;
  #L1f7da8.  v0:= instanceof @variable v3 @type ^`f7.l` @kind boolean;
  #L1f7dac.  v0:= v0 ^~ v1 @kind int;
  #L1f7dae.  call `f`(v0) @signature `La7/m;.f:(Z)V` @kind static;
  #L1f7db4.  call temp:= `a`(v2) @signature `Lc7/h;.a:()Lc7/h;` @kind direct;
  #L1f7dba.  v0:= temp @kind object;
  #L1f7dbc.  v0.`c7.h.c` @type ^`f7.n` := v3 @kind object;
  #L1f7dc0.  v0.`c7.h.d` @type ^`f7.b` := v4 @kind object;
  #L1f7dc4.  return v0 @kind object;
}
procedure `java.lang.String` `y`(`c7.h` v2 @kind this) @signature `Lc7/h;.y:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f80d0.  v0:= v2.`c7.h.h` @type ^`java.lang.String` @kind object;
  #L1f80d4.  if v0 != 0 then goto L1f80fc;
  #L1f80d8.  call temp:= `k`(v2) @signature `Lc7/h;.k:()Ljava/util/Map;` @kind virtual;
  #L1f80de.  v0:= temp @kind object;
  #L1f80e0.  call temp:= `c`(v0) @signature `Lh7/b;.c:(Ljava/util/Map;)Ljava/lang/String;` @kind static;
  #L1f80e6.  v0:= temp @kind object;
  #L1f80e8.  v2.`c7.h.h` @type ^`java.lang.String` := v0 @kind object;
  #L1f80ec.  goto L1f80fc;
  #L1f80ee.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1f80f0.  v1:= new `java.lang.RuntimeException`;
  #L1f80f4.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1f80fa.  throw v1;
  #L1f80fc.  v0:= v2.`c7.h.h` @type ^`java.lang.String` @kind object;
  #L1f8100.  return v0 @kind object;
  catch `java.io.IOException` @[L1f80d8..L1f80ec] goto L1f80ee;
}
