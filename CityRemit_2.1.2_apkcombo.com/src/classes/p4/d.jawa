record `p4.d` @kind class @AccessFlag ABSTRACT extends `p4.w` @kind class {
  `int` `p4.d.o` @AccessFlag PRIVATE_FINAL;
  `int` `p4.d.p` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`p4.d` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lp4/d;.<init>:(II)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L4061f0.  call `<init>`(v1) @signature `Lp4/w;.<init>:()V` @kind direct;
  #L4061f6.  v0:= "index" @kind object;
  #L4061fa.  call temp:= `b`(v3, v2, v0) @signature `Lp4/b;.b:(IILjava/lang/String;)I` @kind static;
  #L406200.  v1.`p4.d.o` @type ^`int` := v2;
  #L406204.  v1.`p4.d.p` @type ^`int` := v3;
  #L406208.  return @kind void;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Lp4/d;.a:(I)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`p4.d` v2 @kind this) @signature `Lp4/d;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4060f8.  v0:= v2.`p4.d.p` @type ^`int`;
  #L4060fc.  v1:= v2.`p4.d.o` @type ^`int`;
  #L406100.  if v0 >= v1 then goto L406108;
  #L406104.  v0:= 1I;
  #L406106.  return v0;
  #L406108.  v0:= 0I;
  #L40610a.  return v0;
}
procedure `boolean` `hasPrevious`(`p4.d` v1 @kind this) @signature `Lp4/d;.hasPrevious:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L40611c.  v0:= v1.`p4.d.p` @type ^`int`;
  #L406120.  if v0 <= 0 then goto L406128;
  #L406124.  v0:= 1I;
  #L406126.  return v0;
  #L406128.  v0:= 0I;
  #L40612a.  return v0;
}
procedure `java.lang.Object` `next`(`p4.d` v2 @kind this) @signature `Lp4/d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L406170.  call temp:= `hasNext`(v2) @signature `Lp4/d;.hasNext:()Z` @kind virtual;
  #L406176.  v0:= temp;
  #L406178.  if v0 == 0 then goto L406192;
  #L40617c.  v0:= v2.`p4.d.p` @type ^`int`;
  #L406180.  v1:= v0 + 1;
  #L406184.  v2.`p4.d.p` @type ^`int` := v1;
  #L406188.  call temp:= `a`(v2, v0) @signature `Lp4/d;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L40618e.  v0:= temp @kind object;
  #L406190.  return v0 @kind object;
  #L406192.  v0:= new `java.util.NoSuchElementException`;
  #L406196.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L40619c.  throw v0;
}
procedure `int` `nextIndex`(`p4.d` v1 @kind this) @signature `Lp4/d;.nextIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L40613c.  v0:= v1.`p4.d.p` @type ^`int`;
  #L406140.  return v0;
}
procedure `java.lang.Object` `previous`(`p4.d` v1 @kind this) @signature `Lp4/d;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4061b0.  call temp:= `hasPrevious`(v1) @signature `Lp4/d;.hasPrevious:()Z` @kind virtual;
  #L4061b6.  v0:= temp;
  #L4061b8.  if v0 == 0 then goto L4061d2;
  #L4061bc.  v0:= v1.`p4.d.p` @type ^`int`;
  #L4061c0.  v0:= v0 + -1;
  #L4061c4.  v1.`p4.d.p` @type ^`int` := v0;
  #L4061c8.  call temp:= `a`(v1, v0) @signature `Lp4/d;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L4061ce.  v0:= temp @kind object;
  #L4061d0.  return v0 @kind object;
  #L4061d2.  v0:= new `java.util.NoSuchElementException`;
  #L4061d6.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4061dc.  throw v0;
}
procedure `int` `previousIndex`(`p4.d` v1 @kind this) @signature `Lp4/d;.previousIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L406154.  v0:= v1.`p4.d.p` @type ^`int`;
  #L406158.  v0:= v0 + -1;
  #L40615c.  return v0;
}
