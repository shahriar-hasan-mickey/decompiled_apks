record `p4.g` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@p4.g.o` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lp4/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L40645c.  v0:= 0I;
  #L40645e.  v0:= new `java.lang.Object`[v0];
  #L406462.  `@@p4.g.o` @type ^`java.lang.Object`[] := v0 @kind object;
  #L406466.  return @kind void;
}
procedure `void` `<init>`(`p4.g` v0 @kind this) @signature `Lp4/g;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L406478.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L40647e.  return @kind void;
}
procedure `boolean` `add`(`p4.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lp4/g;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4062e0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4062e4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4062ea.  throw v1;
}
procedure `boolean` `addAll`(`p4.g` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lp4/g;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4062fc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L406300.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L406306.  throw v1;
}
procedure `int` `b`(`java.lang.Object`[] v0 @kind object, `int` v1 ) @signature `Lp4/g;.b:([Ljava/lang/Object;I)I` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `clear`(`p4.g` v1 @kind this) @signature `Lp4/g;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L406490.  v0:= new `java.lang.UnsupportedOperationException`;
  #L406494.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L40649a.  throw v0;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Lp4/g;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `f`(`p4.g` v1 @kind this) @signature `Lp4/g;.f:()I` @AccessFlag  {
    temp;
    v0;

  #L40636c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L406370.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L406376.  throw v0;
}
procedure `int` `h`(`p4.g` v1 @kind this) @signature `Lp4/g;.h:()I` @AccessFlag  {
    temp;
    v0;

  #L406388.  v0:= new `java.lang.UnsupportedOperationException`;
  #L40638c.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L406392.  throw v0;
}
procedure `java.lang.Object`[] `l`(`p4.g` v1 @kind this) @signature `Lp4/g;.l:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L406448.  v0:= 0I;
  #L40644a.  return v0 @kind object;
}
procedure `boolean` `remove`(`p4.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lp4/g;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L406318.  v1:= new `java.lang.UnsupportedOperationException`;
  #L40631c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L406322.  throw v1;
}
procedure `boolean` `removeAll`(`p4.g` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lp4/g;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L406334.  v1:= new `java.lang.UnsupportedOperationException`;
  #L406338.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L40633e.  throw v1;
}
procedure `boolean` `retainAll`(`p4.g` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lp4/g;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L406350.  v1:= new `java.lang.UnsupportedOperationException`;
  #L406354.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L40635a.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`p4.g` v1 @kind this) @signature `Lp4/g;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4063a4.  v0:= `@@p4.g.o` @type ^`java.lang.Object`[] @kind object;
  #L4063a8.  call temp:= `toArray`(v1, v0) @signature `Lp4/g;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L4063ae.  v0:= temp @kind object;
  #L4063b0.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`p4.g` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lp4/g;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4063c4.  call temp:= `requireNonNull`(v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4063ca.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L4063d0.  v0:= temp;
  #L4063d2.  v1:= length @variable v4;
  #L4063d4.  if v1 >= v0 then goto L406424;
  #L4063d8.  call temp:= `l`(v3) @signature `Lp4/g;.l:()[Ljava/lang/Object;` @kind virtual;
  #L4063de.  v1:= temp @kind object;
  #L4063e0.  if v1 != 0 then goto L406402;
  #L4063e4.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4063ea.  v4:= temp @kind object;
  #L4063ec.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4063f2.  v4:= temp @kind object;
  #L4063f4.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4063fa.  v4:= temp @kind object;
  #L4063fc.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L406400.  goto L40642e;
  #L406402.  call temp:= `h`(v3) @signature `Lp4/g;.h:()I` @kind virtual;
  #L406408.  v0:= temp;
  #L40640a.  call temp:= `f`(v3) @signature `Lp4/g;.f:()I` @kind virtual;
  #L406410.  v2:= temp;
  #L406412.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L406418.  v4:= temp @kind object;
  #L40641a.  call temp:= `copyOfRange`(v1, v0, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L406420.  v4:= temp @kind object;
  #L406422.  return v4 @kind object;
  #L406424.  if v1 <= v0 then goto L40642e;
  #L406428.  v1:= 0I;
  #L40642a.  v4[v0]:= v1 @kind object;
  #L40642e.  v0:= 0I;
  #L406430.  call temp:= `b`(v3, v4, v0) @signature `Lp4/g;.b:([Ljava/lang/Object;I)I` @kind virtual;
  #L406436.  return v4 @kind object;
}
