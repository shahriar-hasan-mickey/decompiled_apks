record `p4.b` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Lp4/b;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L405cc4.  if v5 < 0 then goto L405cd0;
  #L405cc8.  if v5 < v6 then goto L405cce;
  #L405ccc.  goto L405cd0;
  #L405cce.  return v5;
  #L405cd0.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L405cd4.  v0:= "index" @kind object;
  #L405cd8.  v1:= 1I;
  #L405cda.  v2:= 0I;
  #L405cdc.  v3:= 2I;
  #L405cde.  if v5 < 0 then goto L405d48;
  #L405ce2.  if v6 >= 0 then goto L405d18;
  #L405ce6.  v5:= new `java.lang.IllegalArgumentException`;
  #L405cea.  v7:= new `java.lang.StringBuilder`;
  #L405cee.  v0:= 26I;
  #L405cf2.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L405cf8.  v0:= "negative size: " @kind object;
  #L405cfc.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L405d02.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L405d08.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L405d0e.  v6:= temp @kind object;
  #L405d10.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L405d16.  throw v5;
  #L405d18.  v4:= 3I;
  #L405d1a.  v4:= new `java.lang.Object`[v4];
  #L405d1e.  v4[v2]:= v0 @kind object;
  #L405d22.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L405d28.  v5:= temp @kind object;
  #L405d2a.  v4[v1]:= v5 @kind object;
  #L405d2e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L405d34.  v5:= temp @kind object;
  #L405d36.  v4[v3]:= v5 @kind object;
  #L405d3a.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L405d3e.  call temp:= `a`(v5, v4) @signature `Lp4/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L405d44.  v5:= temp @kind object;
  #L405d46.  goto L405d68;
  #L405d48.  v6:= new `java.lang.Object`[v3];
  #L405d4c.  v6[v2]:= v0 @kind object;
  #L405d50.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L405d56.  v5:= temp @kind object;
  #L405d58.  v6[v1]:= v5 @kind object;
  #L405d5c.  v5:= "%s (%s) must not be negative" @kind object;
  #L405d60.  call temp:= `a`(v5, v6) @signature `Lp4/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L405d66.  v5:= temp @kind object;
  #L405d68.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L405d6e.  throw v7;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Lp4/b;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L405d80.  if v1 < 0 then goto L405d8a;
  #L405d84.  if v1 > v2 then goto L405d8a;
  #L405d88.  return v1;
  #L405d8a.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L405d8e.  v0:= "index" @kind object;
  #L405d92.  call temp:= `d`(v1, v2, v0) @signature `Lp4/b;.d:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L405d98.  v1:= temp @kind object;
  #L405d9a.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L405da0.  throw v3;
}
procedure `void` `c`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lp4/b;.c:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L405e58.  if v2 < 0 then goto L405e68;
  #L405e5c.  if v3 < v2 then goto L405e68;
  #L405e60.  if v3 <= v4 then goto L405e66;
  #L405e64.  goto L405e68;
  #L405e66.  return @kind void;
  #L405e68.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L405e6c.  if v2 < 0 then goto L405ebc;
  #L405e70.  if v2 > v4 then goto L405ebc;
  #L405e74.  if v3 < 0 then goto L405eae;
  #L405e78.  if v3 <= v4 then goto L405e7e;
  #L405e7c.  goto L405eae;
  #L405e7e.  v4:= 2I;
  #L405e80.  v4:= new `java.lang.Object`[v4];
  #L405e84.  v1:= 0I;
  #L405e86.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L405e8c.  v3:= temp @kind object;
  #L405e8e.  v4[v1]:= v3 @kind object;
  #L405e92.  v3:= 1I;
  #L405e94.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L405e9a.  v2:= temp @kind object;
  #L405e9c.  v4[v3]:= v2 @kind object;
  #L405ea0.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L405ea4.  call temp:= `a`(v2, v4) @signature `Lp4/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L405eaa.  v2:= temp @kind object;
  #L405eac.  goto L405ec8;
  #L405eae.  v2:= "end index" @kind object;
  #L405eb2.  call temp:= `d`(v3, v4, v2) @signature `Lp4/b;.d:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L405eb8.  v2:= temp @kind object;
  #L405eba.  goto L405ec8;
  #L405ebc.  v3:= "start index" @kind object;
  #L405ec0.  call temp:= `d`(v2, v4, v3) @signature `Lp4/b;.d:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L405ec6.  v2:= temp @kind object;
  #L405ec8.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L405ece.  throw v0;
}
procedure `java.lang.String` `d`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Lp4/b;.d:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L405db4.  v0:= 1I;
  #L405db6.  v1:= 0I;
  #L405db8.  v2:= 2I;
  #L405dba.  if v4 >= 0 then goto L405de0;
  #L405dbe.  v5:= new `java.lang.Object`[v2];
  #L405dc2.  v5[v1]:= v6 @kind object;
  #L405dc6.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L405dcc.  v4:= temp @kind object;
  #L405dce.  v5[v0]:= v4 @kind object;
  #L405dd2.  v4:= "%s (%s) must not be negative" @kind object;
  #L405dd6.  call temp:= `a`(v4, v5) @signature `Lp4/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L405ddc.  v4:= temp @kind object;
  #L405dde.  return v4 @kind object;
  #L405de0.  if v5 < 0 then goto L405e14;
  #L405de4.  v3:= 3I;
  #L405de6.  v3:= new `java.lang.Object`[v3];
  #L405dea.  v3[v1]:= v6 @kind object;
  #L405dee.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L405df4.  v4:= temp @kind object;
  #L405df6.  v3[v0]:= v4 @kind object;
  #L405dfa.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L405e00.  v4:= temp @kind object;
  #L405e02.  v3[v2]:= v4 @kind object;
  #L405e06.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L405e0a.  call temp:= `a`(v4, v3) @signature `Lp4/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L405e10.  v4:= temp @kind object;
  #L405e12.  return v4 @kind object;
  #L405e14.  v4:= new `java.lang.IllegalArgumentException`;
  #L405e18.  v6:= new `java.lang.StringBuilder`;
  #L405e1c.  v0:= 26I;
  #L405e20.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L405e26.  v0:= "negative size: " @kind object;
  #L405e2a.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L405e30.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L405e36.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L405e3c.  v5:= temp @kind object;
  #L405e3e.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L405e44.  throw v4;
}
