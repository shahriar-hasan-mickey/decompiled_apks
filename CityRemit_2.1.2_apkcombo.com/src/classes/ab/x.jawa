record `ab.x` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `ab.x.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`ab.x` v5 @kind this, `com.google.firebase.database.a` v6 @kind object) @signature `Lab/x;.<init>:(Lcom/google/firebase/database/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1635b4.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1635ba.  v0:= new `java.util.HashMap`;
  #L1635be.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L1635c4.  v5.`ab.x.a` @type ^`java.util.Map` := v0 @kind object;
  #L1635c8.  v0:= new `java.util.HashMap`;
  #L1635cc.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L1635d2.  call temp:= `e`(v6) @signature `Lcom/google/firebase/database/a;.e:()Ljava/lang/String;` @kind virtual;
  #L1635d8.  v1:= temp @kind object;
  #L1635da.  v2:= "key" @kind object;
  #L1635de.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1635e4.  call temp:= `h`(v6) @signature `Lcom/google/firebase/database/a;.h:()Ljava/lang/Object;` @kind virtual;
  #L1635ea.  v1:= temp @kind object;
  #L1635ec.  v2:= "value" @kind object;
  #L1635f0.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1635f6.  call temp:= `f`(v6) @signature `Lcom/google/firebase/database/a;.f:()Ljava/lang/Object;` @kind virtual;
  #L1635fc.  v1:= temp @kind object;
  #L1635fe.  v2:= "priority" @kind object;
  #L163602.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L163608.  call temp:= `d`(v6) @signature `Lcom/google/firebase/database/a;.d:()J` @kind virtual;
  #L16360e.  v1:= temp @kind wide;
  #L163610.  v2:= (`int`) v1 @kind l2i;
  #L163612.  v1:= "childKeys" @kind object;
  #L163616.  if v2 != 0 then goto L16362c;
  #L16361a.  v6:= new `java.util.ArrayList`;
  #L16361e.  call `<init>`(v6) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L163624.  call temp:= `put`(v0, v1, v6) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16362a.  goto L163676;
  #L16362c.  v2:= new `java.lang.String`[v2];
  #L163630.  v3:= 0I;
  #L163632.  call temp:= `c`(v6) @signature `Lcom/google/firebase/database/a;.c:()Ljava/lang/Iterable;` @kind virtual;
  #L163638.  v6:= temp @kind object;
  #L16363a.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L163640.  v6:= temp @kind object;
  #L163642.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L163648.  v4:= temp;
  #L16364a.  if v4 == 0 then goto L16366c;
  #L16364e.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L163654.  v4:= temp @kind object;
  #L163656.  v4:= (`com.google.firebase.database.a`) v4 @kind object;
  #L16365a.  call temp:= `e`(v4) @signature `Lcom/google/firebase/database/a;.e:()Ljava/lang/String;` @kind virtual;
  #L163660.  v4:= temp @kind object;
  #L163662.  v2[v3]:= v4 @kind object;
  #L163666.  v3:= v3 + 1;
  #L16366a.  goto L163642;
  #L16366c.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L163672.  v6:= temp @kind object;
  #L163674.  goto L163624;
  #L163676.  v6:= v5.`ab.x.a` @type ^`java.util.Map` @kind object;
  #L16367a.  v1:= "snapshot" @kind object;
  #L16367e.  call temp:= `put`(v6, v1, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L163684.  return @kind void;
}
procedure `java.util.Map` `a`(`ab.x` v1 @kind this) @signature `Lab/x;.a:()Ljava/util/Map;` @AccessFlag  {
    temp;
    v0;

  #L16359c.  v0:= v1.`ab.x.a` @type ^`java.util.Map` @kind object;
  #L1635a0.  return v0 @kind object;
}
procedure `ab.x` `b`(`ab.x` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Lab/x;.b:(Ljava/util/Map;)Lab/x;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L163568.  v0:= v2.`ab.x.a` @type ^`java.util.Map` @kind object;
  #L16356c.  v1:= new `java.util.HashMap`;
  #L163570.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L163576.  v2.`ab.x.a` @type ^`java.util.Map` := v1 @kind object;
  #L16357a.  call `putAll`(v1, v0) @signature `Ljava/util/Map;.putAll:(Ljava/util/Map;)V` @kind interface;
  #L163580.  v0:= v2.`ab.x.a` @type ^`java.util.Map` @kind object;
  #L163584.  call `putAll`(v0, v3) @signature `Ljava/util/Map;.putAll:(Ljava/util/Map;)V` @kind interface;
  #L16358a.  return v2 @kind object;
}
