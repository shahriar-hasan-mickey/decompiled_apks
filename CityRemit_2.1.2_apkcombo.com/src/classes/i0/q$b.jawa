record `i0.q$b` @kind class @AccessFlag  extends `i0.n` @kind class {
  `i0.q` `i0.q$b.a` @AccessFlag ;
}
procedure `void` `<init>`(`i0.q$b` v0 @kind this, `i0.q` v1 @kind object) @signature `Li0/q$b;.<init>:(Li0/q;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L34bac8.  call `<init>`(v0) @signature `Li0/n;.<init>:()V` @kind direct;
  #L34bace.  v0.`i0.q$b.a` @type ^`i0.q` := v1 @kind object;
  #L34bad2.  return @kind void;
}
procedure `void` `a`(`i0.q$b` v1 @kind this, `i0.m` v2 @kind object) @signature `Li0/q$b;.a:(Li0/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34bb1c.  v2:= v1.`i0.q$b.a` @type ^`i0.q` @kind object;
  #L34bb20.  v0:= v2.`i0.q.a0` @type ^`boolean` @kind boolean;
  #L34bb24.  if v0 != 0 then goto L34bb38;
  #L34bb28.  call `l0`(v2) @signature `Li0/m;.l0:()V` @kind virtual;
  #L34bb2e.  v2:= v1.`i0.q$b.a` @type ^`i0.q` @kind object;
  #L34bb32.  v0:= 1I;
  #L34bb34.  v2.`i0.q.a0` @type ^`boolean` := v0 @kind boolean;
  #L34bb38.  return @kind void;
}
procedure `void` `b`(`i0.q$b` v2 @kind this, `i0.m` v3 @kind object) @signature `Li0/q$b;.b:(Li0/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L34bae4.  v0:= v2.`i0.q$b.a` @type ^`i0.q` @kind object;
  #L34bae8.  v1:= v0.`i0.q.Z` @type ^`int`;
  #L34baec.  v1:= v1 + -1;
  #L34baf0.  v0.`i0.q.Z` @type ^`int` := v1;
  #L34baf4.  if v1 != 0 then goto L34bb04;
  #L34baf8.  v1:= 0I;
  #L34bafa.  v0.`i0.q.a0` @type ^`boolean` := v1 @kind boolean;
  #L34bafe.  call `y`(v0) @signature `Li0/m;.y:()V` @kind virtual;
  #L34bb04.  call temp:= `a0`(v3, v2) @signature `Li0/m;.a0:(Li0/m$f;)Li0/m;` @kind virtual;
  #L34bb0a.  return @kind void;
}
