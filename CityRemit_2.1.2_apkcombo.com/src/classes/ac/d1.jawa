record `ac.d1` @kind class @AccessFlag PUBLIC_ABSTRACT extends `ac.e1` @kind class, `ac.t0` @kind interface {
  `java.lang.Object` `ac.d1._delayed` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `ac.d1._isCompleted` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `ac.d1._queue` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@ac.d1.t` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@ac.d1.u` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lac/d1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L168318.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L16831c.  v1:= constclass @type ^`ac.d1` @kind object;
  #L168320.  v2:= "_queue" @kind object;
  #L168324.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L16832a.  v2:= temp @kind object;
  #L16832c.  `@@ac.d1.t` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L168330.  v2:= "_delayed" @kind object;
  #L168334.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L16833a.  v0:= temp @kind object;
  #L16833c.  `@@ac.d1.u` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L168340.  return @kind void;
}
procedure `void` `<init>`(`ac.d1` v1 @kind this) @signature `Lac/d1;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L168354.  call `<init>`(v1) @signature `Lac/e1;.<init>:()V` @kind direct;
  #L16835a.  v0:= 0I;
  #L16835c.  v1.`ac.d1._queue` @type ^`java.lang.Object` := v0 @kind object;
  #L168360.  v1.`ac.d1._delayed` @type ^`java.lang.Object` := v0 @kind object;
  #L168364.  v0:= 0I;
  #L168366.  v1.`ac.d1._isCompleted` @type ^`int` := v0;
  #L16836a.  return @kind void;
}
procedure `int` `A0`(`ac.d1` v3 @kind this, `long` v4 , `ac.d1$a` v6 @kind object) @signature `Lac/d1;.A0:(JLac/d1$a;)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1680d8.  call temp:= `u0`(v3) @signature `Lac/d1;.u0:()Z` @kind direct;
  #L1680de.  v0:= temp;
  #L1680e0.  if v0 == 0 then goto L1680e8;
  #L1680e4.  v4:= 1I;
  #L1680e6.  return v4;
  #L1680e8.  v0:= v3.`ac.d1._delayed` @type ^`java.lang.Object` @kind object;
  #L1680ec.  v0:= (`ac.d1$b`) v0 @kind object;
  #L1680f0.  if v0 != 0 then goto L168118;
  #L1680f4.  v0:= `@@ac.d1.u` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1680f8.  v1:= 0I;
  #L1680fa.  v2:= new `ac.d1$b`;
  #L1680fe.  call `<init>`(v2, v4) @signature `Lac/d1$b;.<init>:(J)V` @kind direct;
  #L168104.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L16810a.  v0:= v3.`ac.d1._delayed` @type ^`java.lang.Object` @kind object;
  #L16810e.  call `b`(v0) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L168114.  v0:= (`ac.d1$b`) v0 @kind object;
  #L168118.  call temp:= `o`(v6, v4, v0, v3) @signature `Lac/d1$a;.o:(JLac/d1$b;Lac/d1;)I` @kind virtual;
  #L16811e.  v4:= temp;
  #L168120.  return v4;
}
procedure `void` `B0`(`ac.d1` v0 @kind this, `boolean` v1 ) @signature `Lac/d1;.B0:(Z)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L168534.  v0.`ac.d1._isCompleted` @type ^`int` := v1;
  #L168538.  return @kind void;
}
procedure `boolean` `C0`(`ac.d1` v1 @kind this, `ac.d1$a` v2 @kind object) @signature `Lac/d1;.C0:(Lac/d1$a;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1680a0.  v0:= v1.`ac.d1._delayed` @type ^`java.lang.Object` @kind object;
  #L1680a4.  v0:= (`ac.d1$b`) v0 @kind object;
  #L1680a8.  if v0 == 0 then goto L1680ba;
  #L1680ac.  call temp:= `e`(v0) @signature `Lkotlinx/coroutines/internal/k0;.e:()Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L1680b2.  v0:= temp @kind object;
  #L1680b4.  v0:= (`ac.d1$a`) v0 @kind object;
  #L1680b8.  goto L1680bc;
  #L1680ba.  v0:= 0I;
  #L1680bc.  if v0 != v2 then goto L1680c4;
  #L1680c0.  v2:= 1I;
  #L1680c2.  goto L1680c6;
  #L1680c4.  v2:= 0I;
  #L1680c6.  return v2;
}
procedure `boolean` `p0`(`ac.d1` v0 @kind object) @signature `Lac/d1;.p0:(Lac/d1;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L167f40.  call temp:= `u0`(v0) @signature `Lac/d1;.u0:()Z` @kind direct;
  #L167f46.  v0:= temp;
  #L167f48.  return v0;
}
procedure `void` `q0`(`ac.d1` v4 @kind this) @signature `Lac/d1;.q0:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16837c.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L168382.  v0:= temp;
  #L168384.  if v0 == 0 then goto L1683a2;
  #L168388.  call temp:= `u0`(v4) @signature `Lac/d1;.u0:()Z` @kind direct;
  #L16838e.  v0:= temp;
  #L168390.  if v0 == 0 then goto L168396;
  #L168394.  goto L1683a2;
  #L168396.  v0:= new `java.lang.AssertionError`;
  #L16839a.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1683a0.  throw v0;
  #L1683a2.  v0:= v4.`ac.d1._queue` @type ^`java.lang.Object` @kind object;
  #L1683a6.  if v0 != 0 then goto L1683c6;
  #L1683aa.  v0:= `@@ac.d1.t` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1683ae.  v1:= 0I;
  #L1683b0.  call temp:= `a`() @signature `Lac/g1;.a:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L1683b6.  v2:= temp @kind object;
  #L1683b8.  call temp:= `compareAndSet`(v0, v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1683be.  v0:= temp;
  #L1683c0.  if v0 == 0 then goto L1683a2;
  #L1683c4.  return @kind void;
  #L1683c6.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.t` @kind boolean;
  #L1683ca.  if v1 == 0 then goto L1683da;
  #L1683ce.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L1683d2.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/t;.d:()Z` @kind virtual;
  #L1683d8.  return @kind void;
  #L1683da.  call temp:= `a`() @signature `Lac/g1;.a:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L1683e0.  v1:= temp @kind object;
  #L1683e2.  if v0 != v1 then goto L1683e8;
  #L1683e6.  return @kind void;
  #L1683e8.  v1:= new `kotlinx.coroutines.internal.t`;
  #L1683ec.  v2:= 8I;
  #L1683f0.  v3:= 1I;
  #L1683f2.  call `<init>`(v1, v2, v3) @signature `Lkotlinx/coroutines/internal/t;.<init>:(IZ)V` @kind direct;
  #L1683f8.  v2:= v0 @kind object;
  #L1683fa.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L1683fe.  call temp:= `a`(v1, v2) @signature `Lkotlinx/coroutines/internal/t;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L168404.  v2:= `@@ac.d1.t` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L168408.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L16840e.  v0:= temp;
  #L168410.  if v0 == 0 then goto L1683a2;
  #L168414.  return @kind void;
}
procedure `java.lang.Runnable` `r0`(`ac.d1` v4 @kind this) @signature `Lac/d1;.r0:()Ljava/lang/Runnable;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L168134.  v0:= v4.`ac.d1._queue` @type ^`java.lang.Object` @kind object;
  #L168138.  v1:= 0I;
  #L16813a.  if v0 != 0 then goto L168140;
  #L16813e.  return v1 @kind object;
  #L168140.  v2:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.t` @kind boolean;
  #L168144.  if v2 == 0 then goto L168178;
  #L168148.  v1:= v0 @kind object;
  #L16814a.  v1:= (`kotlinx.coroutines.internal.t`) v1 @kind object;
  #L16814e.  call temp:= `j`(v1) @signature `Lkotlinx/coroutines/internal/t;.j:()Ljava/lang/Object;` @kind virtual;
  #L168154.  v2:= temp @kind object;
  #L168156.  v3:= `@@kotlinx.coroutines.internal.t.h` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L16815a.  if v2 == v3 then goto L168164;
  #L16815e.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L168162.  return v2 @kind object;
  #L168164.  v2:= `@@ac.d1.t` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L168168.  call temp:= `i`(v1) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/t;` @kind virtual;
  #L16816e.  v1:= temp @kind object;
  #L168170.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L168176.  goto L168134;
  #L168178.  call temp:= `a`() @signature `Lac/g1;.a:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L16817e.  v2:= temp @kind object;
  #L168180.  if v0 != v2 then goto L168186;
  #L168184.  return v1 @kind object;
  #L168186.  v2:= `@@ac.d1.t` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L16818a.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L168190.  v1:= temp;
  #L168192.  if v1 == 0 then goto L168134;
  #L168196.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L16819a.  return v0 @kind object;
}
procedure `boolean` `t0`(`ac.d1` v5 @kind this, `java.lang.Runnable` v6 @kind object) @signature `Lac/d1;.t0:(Ljava/lang/Runnable;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L167f5c.  v0:= v5.`ac.d1._queue` @type ^`java.lang.Object` @kind object;
  #L167f60.  call temp:= `u0`(v5) @signature `Lac/d1;.u0:()Z` @kind direct;
  #L167f66.  v1:= temp;
  #L167f68.  v2:= 0I;
  #L167f6a.  if v1 == 0 then goto L167f70;
  #L167f6e.  return v2;
  #L167f70.  v1:= 1I;
  #L167f72.  if v0 != 0 then goto L167f8a;
  #L167f76.  v0:= `@@ac.d1.t` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L167f7a.  v2:= 0I;
  #L167f7c.  call temp:= `compareAndSet`(v0, v5, v2, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L167f82.  v0:= temp;
  #L167f84.  if v0 == 0 then goto L167f5c;
  #L167f88.  return v1;
  #L167f8a.  v3:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.t` @kind boolean;
  #L167f8e.  if v3 == 0 then goto L167fc8;
  #L167f92.  v3:= v0 @kind object;
  #L167f94.  v3:= (`kotlinx.coroutines.internal.t`) v3 @kind object;
  #L167f98.  call temp:= `a`(v3, v6) @signature `Lkotlinx/coroutines/internal/t;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L167f9e.  v4:= temp;
  #L167fa0.  if v4 == 0 then goto L167fc6;
  #L167fa4.  if v4 == v1 then goto L167fb2;
  #L167fa8.  v0:= 2I;
  #L167faa.  if v4 == v0 then goto L167fb0;
  #L167fae.  goto L167f5c;
  #L167fb0.  return v2;
  #L167fb2.  v1:= `@@ac.d1.t` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L167fb6.  call temp:= `i`(v3) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/t;` @kind virtual;
  #L167fbc.  v2:= temp @kind object;
  #L167fbe.  call temp:= `compareAndSet`(v1, v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L167fc4.  goto L167f5c;
  #L167fc6.  return v1;
  #L167fc8.  call temp:= `a`() @signature `Lac/g1;.a:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L167fce.  v3:= temp @kind object;
  #L167fd0.  if v0 != v3 then goto L167fd6;
  #L167fd4.  return v2;
  #L167fd6.  v2:= new `kotlinx.coroutines.internal.t`;
  #L167fda.  v3:= 8I;
  #L167fde.  call `<init>`(v2, v3, v1) @signature `Lkotlinx/coroutines/internal/t;.<init>:(IZ)V` @kind direct;
  #L167fe4.  v3:= v0 @kind object;
  #L167fe6.  v3:= (`java.lang.Runnable`) v3 @kind object;
  #L167fea.  call temp:= `a`(v2, v3) @signature `Lkotlinx/coroutines/internal/t;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L167ff0.  call temp:= `a`(v2, v6) @signature `Lkotlinx/coroutines/internal/t;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L167ff6.  v3:= `@@ac.d1.t` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L167ffa.  call temp:= `compareAndSet`(v3, v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L168000.  v0:= temp;
  #L168002.  if v0 == 0 then goto L167f5c;
  #L168006.  return v1;
}
procedure `boolean` `u0`(`ac.d1` v1 @kind this) @signature `Lac/d1;.u0:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L168018.  v0:= v1.`ac.d1._isCompleted` @type ^`int`;
  #L16801c.  return v0;
}
procedure `void` `x0`(`ac.d1` v3 @kind this) @signature `Lac/d1;.x0:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L168470.  call temp:= `a`() @signature `Lac/c;.a:()Lac/b;` @kind static;
  #L168476.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L16847c.  v0:= temp @kind wide;
  #L16847e.  v2:= v3.`ac.d1._delayed` @type ^`java.lang.Object` @kind object;
  #L168482.  v2:= (`ac.d1$b`) v2 @kind object;
  #L168486.  if v2 == 0 then goto L1684a4;
  #L16848a.  call temp:= `i`(v2) @signature `Lkotlinx/coroutines/internal/k0;.i:()Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L168490.  v2:= temp @kind object;
  #L168492.  v2:= (`ac.d1$a`) v2 @kind object;
  #L168496.  if v2 != 0 then goto L16849c;
  #L16849a.  goto L1684a4;
  #L16849c.  call `n0`(v3, v0, v2) @signature `Lac/e1;.n0:(JLac/d1$a;)V` @kind virtual;
  #L1684a2.  goto L16847e;
  #L1684a4.  return @kind void;
}
procedure `void` `a0`(`ac.d1` v0 @kind this, `mb.g` v1 @kind object, `java.lang.Runnable` v2 @kind object) @signature `Lac/d1;.a0:(Lmb/g;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L168428.  call `s0`(v0, v2) @signature `Lac/d1;.s0:(Ljava/lang/Runnable;)V` @kind virtual;
  #L16842e.  return @kind void;
}
procedure `long` `g0`(`ac.d1` v6 @kind this) @signature `Lac/d1;.g0:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1681ac.  call temp:= `g0`(v6) @signature `Lac/c1;.g0:()J` @kind super;
  #L1681b2.  v0:= temp @kind wide;
  #L1681b4.  v2:= 0L;
  #L1681b8.  v4:= lcmp(v0, v2);
  #L1681bc.  if v4 != 0 then goto L1681c2;
  #L1681c0.  return v2 @kind wide;
  #L1681c2.  v0:= v6.`ac.d1._queue` @type ^`java.lang.Object` @kind object;
  #L1681c6.  v4:= 9223372036854775807L;
  #L1681d0.  if v0 == 0 then goto L1681fe;
  #L1681d4.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.t` @kind boolean;
  #L1681d8.  if v1 == 0 then goto L1681ee;
  #L1681dc.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L1681e0.  call temp:= `g`(v0) @signature `Lkotlinx/coroutines/internal/t;.g:()Z` @kind virtual;
  #L1681e6.  v0:= temp;
  #L1681e8.  if v0 != 0 then goto L1681fe;
  #L1681ec.  return v2 @kind wide;
  #L1681ee.  call temp:= `a`() @signature `Lac/g1;.a:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L1681f4.  v1:= temp @kind object;
  #L1681f6.  if v0 != v1 then goto L1681fc;
  #L1681fa.  return v4 @kind wide;
  #L1681fc.  return v2 @kind wide;
  #L1681fe.  v0:= v6.`ac.d1._delayed` @type ^`java.lang.Object` @kind object;
  #L168202.  v0:= (`ac.d1$b`) v0 @kind object;
  #L168206.  if v0 == 0 then goto L16823a;
  #L16820a.  call temp:= `e`(v0) @signature `Lkotlinx/coroutines/internal/k0;.e:()Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L168210.  v0:= temp @kind object;
  #L168212.  v0:= (`ac.d1$a`) v0 @kind object;
  #L168216.  if v0 != 0 then goto L16821c;
  #L16821a.  goto L16823a;
  #L16821c.  v0:= v0.`ac.d1$a.o` @type ^`long` @kind wide;
  #L168220.  call temp:= `a`() @signature `Lac/c;.a:()Lac/b;` @kind static;
  #L168226.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L16822c.  v4:= temp @kind wide;
  #L16822e.  v0:= v0 - v4 @kind long;
  #L168230.  call temp:= `b`(v0, v2) @signature `Lwb/d;.b:(JJ)J` @kind static;
  #L168236.  v0:= temp @kind wide;
  #L168238.  return v0 @kind wide;
  #L16823a.  return v4 @kind wide;
}
procedure `void` `s0`(`ac.d1` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lac/d1;.s0:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L168440.  call temp:= `t0`(v1, v2) @signature `Lac/d1;.t0:(Ljava/lang/Runnable;)Z` @kind direct;
  #L168446.  v0:= temp;
  #L168448.  if v0 == 0 then goto L168454;
  #L16844c.  call `o0`(v1) @signature `Lac/e1;.o0:()V` @kind virtual;
  #L168452.  goto L16845e;
  #L168454.  v0:= `@@ac.r0.v` @type ^`ac.r0` @kind object;
  #L168458.  call `s0`(v0, v2) @signature `Lac/r0;.s0:(Ljava/lang/Runnable;)V` @kind virtual;
  #L16845e.  return @kind void;
}
procedure `void` `shutdown`(`ac.d1` v5 @kind this) @signature `Lac/d1;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16854c.  v0:= `@@ac.i2.a` @type ^`ac.i2` @kind object;
  #L168550.  call `b`(v0) @signature `Lac/i2;.b:()V` @kind virtual;
  #L168556.  v0:= 1I;
  #L168558.  call `B0`(v5, v0) @signature `Lac/d1;.B0:(Z)V` @kind direct;
  #L16855e.  call `q0`(v5) @signature `Lac/d1;.q0:()V` @kind direct;
  #L168564.  call temp:= `w0`(v5) @signature `Lac/d1;.w0:()J` @kind virtual;
  #L16856a.  v0:= temp @kind wide;
  #L16856c.  v2:= 0L;
  #L168570.  v4:= lcmp(v0, v2);
  #L168574.  if v4 <= 0 then goto L168564;
  #L168578.  call `x0`(v5) @signature `Lac/d1;.x0:()V` @kind direct;
  #L16857e.  return @kind void;
}
procedure `boolean` `v0`(`ac.d1` v4 @kind this) @signature `Lac/d1;.v0:()Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L168030.  call temp:= `k0`(v4) @signature `Lac/c1;.k0:()Z` @kind virtual;
  #L168036.  v0:= temp;
  #L168038.  v1:= 0I;
  #L16803a.  if v0 != 0 then goto L168040;
  #L16803e.  return v1;
  #L168040.  v0:= v4.`ac.d1._delayed` @type ^`java.lang.Object` @kind object;
  #L168044.  v0:= (`ac.d1$b`) v0 @kind object;
  #L168048.  if v0 == 0 then goto L16805a;
  #L16804c.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/k0;.d:()Z` @kind virtual;
  #L168052.  v0:= temp;
  #L168054.  if v0 != 0 then goto L16805a;
  #L168058.  return v1;
  #L16805a.  v0:= v4.`ac.d1._queue` @type ^`java.lang.Object` @kind object;
  #L16805e.  v2:= 1I;
  #L168060.  if v0 != 0 then goto L168068;
  #L168064.  v1:= 1I;
  #L168066.  goto L16808c;
  #L168068.  v3:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.t` @kind boolean;
  #L16806c.  if v3 == 0 then goto L16807e;
  #L168070.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L168074.  call temp:= `g`(v0) @signature `Lkotlinx/coroutines/internal/t;.g:()Z` @kind virtual;
  #L16807a.  v1:= temp;
  #L16807c.  goto L16808c;
  #L16807e.  call temp:= `a`() @signature `Lac/g1;.a:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L168084.  v3:= temp @kind object;
  #L168086.  if v0 != v3 then goto L16808c;
  #L16808a.  goto L168064;
  #L16808c.  return v1;
}
procedure `long` `w0`(`ac.d1` v9 @kind this) @signature `Lac/d1;.w0:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L16824c.  call temp:= `l0`(v9) @signature `Lac/c1;.l0:()Z` @kind virtual;
  #L168252.  v0:= temp;
  #L168254.  v1:= 0L;
  #L168258.  if v0 == 0 then goto L16825e;
  #L16825c.  return v1 @kind wide;
  #L16825e.  v0:= v9.`ac.d1._delayed` @type ^`java.lang.Object` @kind object;
  #L168262.  v0:= (`ac.d1$b`) v0 @kind object;
  #L168266.  if v0 == 0 then goto L1682d6;
  #L16826a.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/k0;.d:()Z` @kind virtual;
  #L168270.  v3:= temp;
  #L168272.  if v3 != 0 then goto L1682d6;
  #L168276.  call temp:= `a`() @signature `Lac/c;.a:()Lac/b;` @kind static;
  #L16827c.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L168282.  v3:= temp @kind wide;
  #L168284.  @monitorenter v0
  #L168286.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/internal/k0;.b:()Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L16828c.  v5:= temp @kind object;
  #L16828e.  v6:= 0I;
  #L168290.  if v5 != 0 then goto L168298;
  #L168294.  @monitorexit v0
  #L168296.  goto L1682c6;
  #L168298.  v5:= (`ac.d1$a`) v5 @kind object;
  #L16829c.  call temp:= `r`(v5, v3) @signature `Lac/d1$a;.r:(J)Z` @kind virtual;
  #L1682a2.  v7:= temp;
  #L1682a4.  v8:= 0I;
  #L1682a6.  if v7 == 0 then goto L1682b4;
  #L1682aa.  call temp:= `t0`(v9, v5) @signature `Lac/d1;.t0:(Ljava/lang/Runnable;)Z` @kind direct;
  #L1682b0.  v5:= temp;
  #L1682b2.  goto L1682b6;
  #L1682b4.  v5:= 0I;
  #L1682b6.  if v5 == 0 then goto L168294;
  #L1682ba.  call temp:= `h`(v0, v8) @signature `Lkotlinx/coroutines/internal/k0;.h:(I)Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L1682c0.  v5:= temp @kind object;
  #L1682c2.  v6:= v5 @kind object;
  #L1682c4.  goto L168294;
  #L1682c6.  v6:= (`ac.d1$a`) v6 @kind object;
  #L1682ca.  if v6 != 0 then goto L168284;
  #L1682ce.  goto L1682d6;
  #L1682d0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1682d2.  @monitorexit v0
  #L1682d4.  throw v1;
  #L1682d6.  call temp:= `r0`(v9) @signature `Lac/d1;.r0:()Ljava/lang/Runnable;` @kind direct;
  #L1682dc.  v0:= temp @kind object;
  #L1682de.  if v0 == 0 then goto L1682ea;
  #L1682e2.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L1682e8.  return v1 @kind wide;
  #L1682ea.  call temp:= `g0`(v9) @signature `Lac/d1;.g0:()J` @kind virtual;
  #L1682f0.  v0:= temp @kind wide;
  #L1682f2.  return v0 @kind wide;
  catch `java.lang.Throwable` @[L168286..L16828e] goto L1682d0;
  catch `java.lang.Throwable` @[L168298..L1682c2] goto L1682d0;
}
procedure `void` `y0`(`ac.d1` v1 @kind this) @signature `Lac/d1;.y0:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1684b8.  v0:= 0I;
  #L1684ba.  v1.`ac.d1._queue` @type ^`java.lang.Object` := v0 @kind object;
  #L1684be.  v1.`ac.d1._delayed` @type ^`java.lang.Object` := v0 @kind object;
  #L1684c2.  return @kind void;
}
procedure `void` `z0`(`ac.d1` v2 @kind this, `long` v3 , `ac.d1$a` v5 @kind object) @signature `Lac/d1;.z0:(JLac/d1$a;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1684d4.  call temp:= `A0`(v2, v3, v5) @signature `Lac/d1;.A0:(JLac/d1$a;)I` @kind direct;
  #L1684da.  v0:= temp;
  #L1684dc.  if v0 == 0 then goto L16850e;
  #L1684e0.  v1:= 1I;
  #L1684e2.  if v0 == v1 then goto L168506;
  #L1684e6.  v3:= 2I;
  #L1684e8.  if v0 != v3 then goto L1684ee;
  #L1684ec.  goto L168520;
  #L1684ee.  v3:= new `java.lang.IllegalStateException`;
  #L1684f2.  v4:= "unexpected result" @kind object;
  #L1684f6.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1684fc.  v4:= temp @kind object;
  #L1684fe.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L168504.  throw v3;
  #L168506.  call `n0`(v2, v3, v5) @signature `Lac/e1;.n0:(JLac/d1$a;)V` @kind virtual;
  #L16850c.  goto L168520;
  #L16850e.  call temp:= `C0`(v2, v5) @signature `Lac/d1;.C0:(Lac/d1$a;)Z` @kind direct;
  #L168514.  v3:= temp;
  #L168516.  if v3 == 0 then goto L168520;
  #L16851a.  call `o0`(v2) @signature `Lac/e1;.o0:()V` @kind virtual;
  #L168520.  return @kind void;
}
