record `ac.p1` @kind class @AccessFlag FINAL extends `ac.t1` @kind class {
  `int` `ac.p1._invoked` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `tb.l` `ac.p1.s` @AccessFlag PRIVATE_FINAL;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@ac.p1.t` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lac/p1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L168ca8.  v0:= constclass @type ^`ac.p1` @kind object;
  #L168cac.  v1:= "_invoked" @kind object;
  #L168cb0.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L168cb6.  v0:= temp @kind object;
  #L168cb8.  `@@ac.p1.t` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L168cbc.  return @kind void;
}
procedure `void` `<init>`(`ac.p1` v0 @kind this, `tb.l` v1 @kind object) @signature `Lac/p1;.<init>:(Ltb/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L168cd0.  call `<init>`(v0) @signature `Lac/t1;.<init>:()V` @kind direct;
  #L168cd6.  v0.`ac.p1.s` @type ^`tb.l` := v1 @kind object;
  #L168cda.  v1:= 0I;
  #L168cdc.  v0.`ac.p1._invoked` @type ^`int` := v1;
  #L168ce0.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`ac.p1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lac/p1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L168c88.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L168c8c.  call `y`(v0, v1) @signature `Lac/p1;.y:(Ljava/lang/Throwable;)V` @kind virtual;
  #L168c92.  v1:= `@@jb.s.a` @type ^`jb.s` @kind object;
  #L168c96.  return v1 @kind object;
}
procedure `void` `y`(`ac.p1` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lac/p1;.y:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L168cf4.  v0:= `@@ac.p1.t` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L168cf8.  v1:= 0I;
  #L168cfa.  v2:= 1I;
  #L168cfc.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L168d02.  v0:= temp;
  #L168d04.  if v0 == 0 then goto L168d12;
  #L168d08.  v0:= v3.`ac.p1.s` @type ^`tb.l` @kind object;
  #L168d0c.  call temp:= `invoke`(v0, v4) @signature `Ltb/l;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L168d12.  return @kind void;
}
