record `ac.e1` @kind class @AccessFlag PUBLIC_ABSTRACT extends `ac.c1` @kind class {
}
procedure `void` `<init>`(`ac.e1` v0 @kind this) @signature `Lac/e1;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L168590.  call `<init>`(v0) @signature `Lac/c1;.<init>:()V` @kind direct;
  #L168596.  return @kind void;
}
procedure `java.lang.Thread` `m0`() @signature `Lac/e1;.m0:()Ljava/lang/Thread;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `n0`(`ac.e1` v1 @kind this, `long` v2 , `ac.d1$a` v4 @kind object) @signature `Lac/e1;.n0:(JLac/d1$a;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1685a8.  v0:= `@@ac.r0.v` @type ^`ac.r0` @kind object;
  #L1685ac.  call `z0`(v0, v2, v4) @signature `Lac/d1;.z0:(JLac/d1$a;)V` @kind virtual;
  #L1685b2.  return @kind void;
}
procedure `void` `o0`(`ac.e1` v2 @kind this) @signature `Lac/e1;.o0:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L1685c4.  call temp:= `m0`(v2) @signature `Lac/e1;.m0:()Ljava/lang/Thread;` @kind virtual;
  #L1685ca.  v0:= temp @kind object;
  #L1685cc.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1685d2.  v1:= temp @kind object;
  #L1685d4.  if v1 == v0 then goto L1685e4;
  #L1685d8.  call temp:= `a`() @signature `Lac/c;.a:()Lac/b;` @kind static;
  #L1685de.  call `unpark`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L1685e4.  return @kind void;
}
