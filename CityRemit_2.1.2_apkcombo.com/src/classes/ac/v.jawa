record `ac.v` @kind class @AccessFlag PUBLIC {
  `int` `ac.v._handled` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Throwable` `ac.v.a` @AccessFlag PUBLIC_FINAL;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@ac.v.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lac/v;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L165c54.  v0:= constclass @type ^`ac.v` @kind object;
  #L165c58.  v1:= "_handled" @kind object;
  #L165c5c.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L165c62.  v0:= temp @kind object;
  #L165c64.  `@@ac.v.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L165c68.  return @kind void;
}
procedure `void` `<init>`(`ac.v` v0 @kind this, `java.lang.Throwable` v1 @kind object, `boolean` v2 ) @signature `Lac/v;.<init>:(Ljava/lang/Throwable;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L165c7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L165c82.  v0.`ac.v.a` @type ^`java.lang.Throwable` := v1 @kind object;
  #L165c86.  v0.`ac.v._handled` @type ^`int` := v2;
  #L165c8a.  return @kind void;
}
procedure `void` `<init>`(`ac.v` v0 @kind this, `java.lang.Throwable` v1 @kind object, `boolean` v2 , `int` v3 , `kotlin.jvm.internal.g` v4 @kind object) @signature `Lac/v;.<init>:(Ljava/lang/Throwable;ZILkotlin/jvm/internal/g;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L165c9c.  v3:= v3 ^& 2;
  #L165ca0.  if v3 == 0 then goto L165ca6;
  #L165ca4.  v2:= 0I;
  #L165ca6.  call `<init>`(v0, v1, v2) @signature `Lac/v;.<init>:(Ljava/lang/Throwable;Z)V` @kind direct;
  #L165cac.  return @kind void;
}
procedure `boolean` `a`(`ac.v` v1 @kind this) @signature `Lac/v;.a:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L165bc8.  v0:= v1.`ac.v._handled` @type ^`int`;
  #L165bcc.  return v0;
}
procedure `boolean` `b`(`ac.v` v3 @kind this) @signature `Lac/v;.b:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L165be0.  v0:= `@@ac.v.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L165be4.  v1:= 0I;
  #L165be6.  v2:= 1I;
  #L165be8.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L165bee.  v0:= temp;
  #L165bf0.  return v0;
}
procedure `java.lang.String` `toString`(`ac.v` v2 @kind this) @signature `Lac/v;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L165c04.  v0:= new `java.lang.StringBuilder`;
  #L165c08.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L165c0e.  call temp:= `a`(v2) @signature `Lac/q0;.a:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L165c14.  v1:= temp @kind object;
  #L165c16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165c1c.  v1:= 91I;
  #L165c20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L165c26.  v1:= v2.`ac.v.a` @type ^`java.lang.Throwable` @kind object;
  #L165c2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165c30.  v1:= 93I;
  #L165c34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L165c3a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L165c40.  v0:= temp @kind object;
  #L165c42.  return v0 @kind object;
}
