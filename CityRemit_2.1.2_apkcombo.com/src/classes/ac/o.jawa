record `ac.o` @kind class @AccessFlag PUBLIC_FINAL extends `ac.v` @kind class {
  `int` `ac.o._resumed` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@ac.o.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lac/o;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L16571c.  v0:= constclass @type ^`ac.o` @kind object;
  #L165720.  v1:= "_resumed" @kind object;
  #L165724.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L16572a.  v0:= temp @kind object;
  #L16572c.  `@@ac.o.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L165730.  return @kind void;
}
procedure `void` `<init>`(`ac.o` v2 @kind this, `mb.d` v3 @kind object, `java.lang.Throwable` v4 @kind object, `boolean` v5 ) @signature `Lac/o;.<init>:(Lmb/d;Ljava/lang/Throwable;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L165744.  if v4 != 0 then goto L16577e;
  #L165748.  v4:= new `java.util.concurrent.CancellationException`;
  #L16574c.  v0:= new `java.lang.StringBuilder`;
  #L165750.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L165756.  v1:= "Continuation " @kind object;
  #L16575a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165760.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165766.  v3:= " was cancelled normally" @kind object;
  #L16576a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165770.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L165776.  v3:= temp @kind object;
  #L165778.  call `<init>`(v4, v3) @signature `Ljava/util/concurrent/CancellationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16577e.  call `<init>`(v2, v4, v5) @signature `Lac/v;.<init>:(Ljava/lang/Throwable;Z)V` @kind direct;
  #L165784.  v3:= 0I;
  #L165786.  v2.`ac.o._resumed` @type ^`int` := v3;
  #L16578a.  return @kind void;
}
procedure `boolean` `c`(`ac.o` v3 @kind this) @signature `Lac/o;.c:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1656f8.  v0:= `@@ac.o.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1656fc.  v1:= 0I;
  #L1656fe.  v2:= 1I;
  #L165700.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L165706.  v0:= temp;
  #L165708.  return v0;
}
