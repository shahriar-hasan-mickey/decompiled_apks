record `ac.v0` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.internal.d0` @kind class {
  `int` `ac.v0._decision` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@ac.v0.r` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lac/v0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L167508.  v0:= constclass @type ^`ac.v0` @kind object;
  #L16750c.  v1:= "_decision" @kind object;
  #L167510.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L167516.  v0:= temp @kind object;
  #L167518.  `@@ac.v0.r` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L16751c.  return @kind void;
}
procedure `boolean` `E0`(`ac.v0` v4 @kind this) @signature `Lac/v0;.E0:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1674b8.  v0:= v4.`ac.v0._decision` @type ^`int`;
  #L1674bc.  v1:= 0I;
  #L1674be.  v2:= 1I;
  #L1674c0.  if v0 == 0 then goto L1674e2;
  #L1674c4.  if v0 != v2 then goto L1674ca;
  #L1674c8.  return v1;
  #L1674ca.  v0:= new `java.lang.IllegalStateException`;
  #L1674ce.  v1:= "Already resumed" @kind object;
  #L1674d2.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1674d8.  v1:= temp @kind object;
  #L1674da.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1674e0.  throw v0;
  #L1674e2.  v0:= `@@ac.v0.r` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1674e6.  v3:= 2I;
  #L1674e8.  call temp:= `compareAndSet`(v0, v4, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L1674ee.  v0:= temp;
  #L1674f0.  if v0 == 0 then goto L1674b8;
  #L1674f4.  return v2;
}
procedure `void` `t`(`ac.v0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lac/v0;.t:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L167530.  call `z0`(v0, v1) @signature `Lac/v0;.z0:(Ljava/lang/Object;)V` @kind virtual;
  #L167536.  return @kind void;
}
procedure `void` `z0`(`ac.v0` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lac/v0;.z0:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L167548.  call temp:= `E0`(v3) @signature `Lac/v0;.E0:()Z` @kind direct;
  #L16754e.  v0:= temp;
  #L167550.  if v0 == 0 then goto L167556;
  #L167554.  return @kind void;
  #L167556.  v0:= v3.`kotlinx.coroutines.internal.d0.q` @type ^`mb.d` @kind object;
  #L16755a.  call temp:= `b`(v0) @signature `Lnb/b;.b:(Lmb/d;)Lmb/d;` @kind static;
  #L167560.  v0:= temp @kind object;
  #L167562.  v1:= v3.`kotlinx.coroutines.internal.d0.q` @type ^`mb.d` @kind object;
  #L167566.  call temp:= `a`(v4, v1) @signature `Lac/z;.a:(Ljava/lang/Object;Lmb/d;)Ljava/lang/Object;` @kind static;
  #L16756c.  v4:= temp @kind object;
  #L16756e.  v1:= 2I;
  #L167570.  v2:= 0I;
  #L167572.  call `c`(v0, v4, v2, v1, v2) @signature `Lkotlinx/coroutines/internal/i;.c:(Lmb/d;Ljava/lang/Object;Ltb/l;ILjava/lang/Object;)V` @kind static;
  #L167578.  return @kind void;
}
