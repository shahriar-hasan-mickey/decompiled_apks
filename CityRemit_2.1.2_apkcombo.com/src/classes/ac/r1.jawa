record `ac.r1` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `mb.g$b` @kind interface {
}
global `ac.r1$b` `@@ac.r1.c` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lac/r1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16b268.  v0:= `@@ac.r1$b.o` @type ^`ac.r1$b` @kind object;
  #L16b26c.  `@@ac.r1.c` @type ^`ac.r1$b` := v0 @kind object;
  #L16b270.  return @kind void;
}
procedure `ac.q` `J`(`ac.s` v0 @kind object) @signature `Lac/r1;.J:(Lac/s;)Lac/q;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.concurrent.CancellationException` `K`() @signature `Lac/r1;.K:()Ljava/util/concurrent/CancellationException;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `O`(`java.util.concurrent.CancellationException` v0 @kind object) @signature `Lac/r1;.O:(Ljava/util/concurrent/CancellationException;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `a`() @signature `Lac/r1;.a:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `start`() @signature `Lac/r1;.start:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `ac.a1` `x`(`boolean` v0 , `boolean` v1 , `tb.l` v2 @kind object) @signature `Lac/r1;.x:(ZZLtb/l;)Lac/a1;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
