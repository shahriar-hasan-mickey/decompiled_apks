record `ac.d1$a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Runnable` @kind interface, `java.lang.Comparable` @kind interface, `ac.a1` @kind interface, `kotlinx.coroutines.internal.l0` @kind interface {
  `java.lang.Object` `ac.d1$a._heap` @AccessFlag PRIVATE_VOLATILE;
  `long` `ac.d1$a.o` @AccessFlag PUBLIC;
  `int` `ac.d1$a.p` @AccessFlag PRIVATE;
}
procedure `void` `c`(`ac.d1$a` v2 @kind this) @signature `Lac/d1$a;.c:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L167e74.  @monitorenter v2
  #L167e76.  v0:= v2.`ac.d1$a._heap` @type ^`java.lang.Object` @kind object;
  #L167e7a.  call temp:= `b`() @signature `Lac/g1;.b:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L167e80.  v1:= temp @kind object;
  #L167e82.  if v0 != v1 then goto L167e8a;
  #L167e86.  @monitorexit v2
  #L167e88.  return @kind void;
  #L167e8a.  v1:= instanceof @variable v0 @type ^`ac.d1$b` @kind boolean;
  #L167e8e.  if v1 == 0 then goto L167e98;
  #L167e92.  v0:= (`ac.d1$b`) v0 @kind object;
  #L167e96.  goto L167e9a;
  #L167e98.  v0:= 0I;
  #L167e9a.  if v0 == 0 then goto L167ea4;
  #L167e9e.  call temp:= `g`(v0, v2) @signature `Lkotlinx/coroutines/internal/k0;.g:(Lkotlinx/coroutines/internal/l0;)Z` @kind virtual;
  #L167ea4.  call temp:= `b`() @signature `Lac/g1;.b:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L167eaa.  v0:= temp @kind object;
  #L167eac.  v2.`ac.d1$a._heap` @type ^`java.lang.Object` := v0 @kind object;
  #L167eb0.  @monitorexit v2
  #L167eb2.  return @kind void;
  #L167eb4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L167eb6.  @monitorexit v2
  #L167eb8.  throw v0;
  catch `java.lang.Throwable` @[L167e76..L167e82] goto L167eb4;
  catch `java.lang.Throwable` @[L167e8a..L167eb0] goto L167eb4;
}
procedure `int` `compareTo`(`ac.d1$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lac/d1$a;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L167cec.  v1:= (`ac.d1$a`) v1 @kind object;
  #L167cf0.  call temp:= `k`(v0, v1) @signature `Lac/d1$a;.k:(Lac/d1$a;)I` @kind virtual;
  #L167cf6.  v1:= temp;
  #L167cf8.  return v1;
}
procedure `int` `d`(`ac.d1$a` v1 @kind this) @signature `Lac/d1$a;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L167d0c.  v0:= v1.`ac.d1$a.p` @type ^`int`;
  #L167d10.  return v0;
}
procedure `void` `e`(`ac.d1$a` v0 @kind this, `int` v1 ) @signature `Lac/d1$a;.e:(I)V` @AccessFlag PUBLIC {
    temp;

  #L167f28.  v0.`ac.d1$a.p` @type ^`int` := v1;
  #L167f2c.  return @kind void;
}
procedure `void` `h`(`ac.d1$a` v2 @kind this, `kotlinx.coroutines.internal.k0` v3 @kind object) @signature `Lac/d1$a;.h:(Lkotlinx/coroutines/internal/k0;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L167ee0.  v0:= v2.`ac.d1$a._heap` @type ^`java.lang.Object` @kind object;
  #L167ee4.  call temp:= `b`() @signature `Lac/g1;.b:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L167eea.  v1:= temp @kind object;
  #L167eec.  if v0 == v1 then goto L167ef4;
  #L167ef0.  v0:= 1I;
  #L167ef2.  goto L167ef6;
  #L167ef4.  v0:= 0I;
  #L167ef6.  if v0 == 0 then goto L167f00;
  #L167efa.  v2.`ac.d1$a._heap` @type ^`java.lang.Object` := v3 @kind object;
  #L167efe.  return @kind void;
  #L167f00.  v3:= new `java.lang.IllegalArgumentException`;
  #L167f04.  v0:= "Failed requirement." @kind object;
  #L167f08.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L167f0e.  v0:= temp @kind object;
  #L167f10.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L167f16.  throw v3;
}
procedure `kotlinx.coroutines.internal.k0` `j`(`ac.d1$a` v2 @kind this) @signature `Lac/d1$a;.j:()Lkotlinx/coroutines/internal/k0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L167e4c.  v0:= v2.`ac.d1$a._heap` @type ^`java.lang.Object` @kind object;
  #L167e50.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.k0` @kind boolean;
  #L167e54.  if v1 == 0 then goto L167e5e;
  #L167e58.  v0:= (`kotlinx.coroutines.internal.k0`) v0 @kind object;
  #L167e5c.  goto L167e60;
  #L167e5e.  v0:= 0I;
  #L167e60.  return v0 @kind object;
}
procedure `int` `k`(`ac.d1$a` v4 @kind this, `ac.d1$a` v5 @kind object) @signature `Lac/d1$a;.k:(Lac/d1$a;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L167cb4.  v0:= v4.`ac.d1$a.o` @type ^`long` @kind wide;
  #L167cb8.  v2:= v5.`ac.d1$a.o` @type ^`long` @kind wide;
  #L167cbc.  v0:= v0 - v2 @kind long;
  #L167cbe.  v2:= 0L;
  #L167cc2.  v5:= lcmp(v0, v2);
  #L167cc6.  if v5 <= 0 then goto L167cce;
  #L167cca.  v5:= 1I;
  #L167ccc.  goto L167cd8;
  #L167cce.  if v5 >= 0 then goto L167cd6;
  #L167cd2.  v5:= -1I;
  #L167cd4.  goto L167cd8;
  #L167cd6.  v5:= 0I;
  #L167cd8.  return v5;
}
procedure `int` `o`(`ac.d1$a` v7 @kind this, `long` v8 , `ac.d1$b` v10 @kind object, `ac.d1` v11 @kind object) @signature `Lac/d1$a;.o:(JLac/d1$b;Lac/d1;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L167d24.  @monitorenter v7
  #L167d26.  v0:= v7.`ac.d1$a._heap` @type ^`java.lang.Object` @kind object;
  #L167d2a.  call temp:= `b`() @signature `Lac/g1;.b:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L167d30.  v1:= temp @kind object;
  #L167d32.  if v0 != v1 then goto L167d3c;
  #L167d36.  v8:= 2I;
  #L167d38.  @monitorexit v7
  #L167d3a.  return v8;
  #L167d3c.  @monitorenter v10
  #L167d3e.  call temp:= `b`(v10) @signature `Lkotlinx/coroutines/internal/k0;.b:()Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L167d44.  v0:= temp @kind object;
  #L167d46.  v0:= (`ac.d1$a`) v0 @kind object;
  #L167d4a.  call temp:= `p0`(v11) @signature `Lac/d1;.p0:(Lac/d1;)Z` @kind static;
  #L167d50.  v11:= temp;
  #L167d52.  if v11 == 0 then goto L167d5e;
  #L167d56.  v8:= 1I;
  #L167d58.  @monitorexit v10
  #L167d5a.  @monitorexit v7
  #L167d5c.  return v8;
  #L167d5e.  v1:= 0L;
  #L167d62.  if v0 != 0 then goto L167d6c;
  #L167d66.  v10.`ac.d1$b.b` @type ^`long` := v8 @kind wide;
  #L167d6a.  goto L167d92;
  #L167d6c.  v3:= v0.`ac.d1$a.o` @type ^`long` @kind wide;
  #L167d70.  v5:= v3 - v8 @kind long;
  #L167d74.  v11:= lcmp(v5, v1);
  #L167d78.  if v11 < 0 then goto L167d7e;
  #L167d7c.  goto L167d80;
  #L167d7e.  v8:= v3 @kind wide;
  #L167d80.  v3:= v10.`ac.d1$b.b` @type ^`long` @kind wide;
  #L167d84.  v3:= v8 - v3 @kind long;
  #L167d88.  v11:= lcmp(v3, v1);
  #L167d8c.  if v11 <= 0 then goto L167d92;
  #L167d90.  goto L167d66;
  #L167d92.  v8:= v7.`ac.d1$a.o` @type ^`long` @kind wide;
  #L167d96.  v3:= v10.`ac.d1$b.b` @type ^`long` @kind wide;
  #L167d9a.  v8:= v8 - v3 @kind long;
  #L167d9c.  v11:= lcmp(v8, v1);
  #L167da0.  if v11 >= 0 then goto L167da8;
  #L167da4.  v7.`ac.d1$a.o` @type ^`long` := v3 @kind wide;
  #L167da8.  call `a`(v10, v7) @signature `Lkotlinx/coroutines/internal/k0;.a:(Lkotlinx/coroutines/internal/l0;)V` @kind virtual;
  #L167dae.  @monitorexit v10
  #L167db0.  v8:= 0I;
  #L167db2.  goto L167d38;
  #L167db4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L167db6.  @monitorexit v10
  #L167db8.  throw v8;
  #L167dba.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L167dbc.  @monitorexit v7
  #L167dbe.  throw v8;
  catch `java.lang.Throwable` @[L167d26..L167d32] goto L167dba;
  catch `java.lang.Throwable` @[L167d3c..L167d3e] goto L167dba;
  catch `java.lang.Throwable` @[L167d3e..L167d52] goto L167db4;
  catch `java.lang.Throwable` @[L167d58..L167d5a] goto L167dba;
  catch `java.lang.Throwable` @[L167d66..L167dae] goto L167db4;
  catch `java.lang.Throwable` @[L167dae..L167dba] goto L167dba;
}
procedure `boolean` `r`(`ac.d1$a` v3 @kind this, `long` v4 ) @signature `Lac/d1$a;.r:(J)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L167c88.  v0:= v3.`ac.d1$a.o` @type ^`long` @kind wide;
  #L167c8c.  v4:= v4 - v0 @kind long;
  #L167c8e.  v0:= 0L;
  #L167c92.  v2:= lcmp(v4, v0);
  #L167c96.  if v2 < 0 then goto L167c9e;
  #L167c9a.  v4:= 1I;
  #L167c9c.  goto L167ca0;
  #L167c9e.  v4:= 0I;
  #L167ca0.  return v4;
}
procedure `java.lang.String` `toString`(`ac.d1$a` v3 @kind this) @signature `Lac/d1$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L167e08.  v0:= new `java.lang.StringBuilder`;
  #L167e0c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L167e12.  v1:= "Delayed[nanos=" @kind object;
  #L167e16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167e1c.  v1:= v3.`ac.d1$a.o` @type ^`long` @kind wide;
  #L167e20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L167e26.  v1:= 93I;
  #L167e2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L167e30.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L167e36.  v0:= temp @kind object;
  #L167e38.  return v0 @kind object;
}
