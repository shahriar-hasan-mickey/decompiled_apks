record `nc.b$c` @kind class @AccessFlag FINAL {
  `java.lang.reflect.Method` `nc.b$c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `nc.b$c.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `nc.b$c.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`nc.b$c` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object) @signature `Lnc/b$c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f46d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f46da.  v0.`nc.b$c.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L3f46de.  v0.`nc.b$c.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L3f46e2.  v0.`nc.b$c.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L3f46e6.  return @kind void;
}
procedure `nc.b$c` `b`() @signature `Lnc/b$c;.b:()Lnc/b$c;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f4654.  v0:= 0I;
  #L3f4656.  v1:= "dalvik.system.CloseGuard" @kind object;
  #L3f465a.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3f4660.  v1:= temp @kind object;
  #L3f4662.  v2:= "get" @kind object;
  #L3f4666.  v3:= 0I;
  #L3f4668.  v4:= new `java.lang.Class`[v3];
  #L3f466c.  call temp:= `getMethod`(v1, v2, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3f4672.  v2:= temp @kind object;
  #L3f4674.  v4:= "open" @kind object;
  #L3f4678.  v5:= 1I;
  #L3f467a.  v5:= new `java.lang.Class`[v5];
  #L3f467e.  v6:= constclass @type ^`java.lang.String` @kind object;
  #L3f4682.  v5[v3]:= v6 @kind object;
  #L3f4686.  call temp:= `getMethod`(v1, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3f468c.  v4:= temp @kind object;
  #L3f468e.  v5:= "warnIfOpen" @kind object;
  #L3f4692.  v3:= new `java.lang.Class`[v3];
  #L3f4696.  call temp:= `getMethod`(v1, v5, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3f469c.  v0:= temp @kind object;
  #L3f469e.  v1:= v0 @kind object;
  #L3f46a0.  v0:= v2 @kind object;
  #L3f46a2.  goto L3f46a8;
  #L3f46a4.  v1:= v0 @kind object;
  #L3f46a6.  v4:= v1 @kind object;
  #L3f46a8.  v2:= new `nc.b$c`;
  #L3f46ac.  call `<init>`(v2, v0, v4, v1) @signature `Lnc/b$c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L3f46b2.  return v2 @kind object;
  catch `java.lang.Exception` @[L3f4656..L3f469e] goto L3f46a4;
}
procedure `java.lang.Object` `a`(`nc.b$c` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lnc/b$c;.a:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f4604.  v0:= v5.`nc.b$c.a` @type ^`java.lang.reflect.Method` @kind object;
  #L3f4608.  v1:= 0I;
  #L3f460a.  if v0 == 0 then goto L3f4632;
  #L3f460e.  v2:= 0I;
  #L3f4610.  v3:= new `java.lang.Object`[v2];
  #L3f4614.  call temp:= `invoke`(v0, v1, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f461a.  v0:= temp @kind object;
  #L3f461c.  v3:= v5.`nc.b$c.b` @type ^`java.lang.reflect.Method` @kind object;
  #L3f4620.  v4:= 1I;
  #L3f4622.  v4:= new `java.lang.Object`[v4];
  #L3f4626.  v4[v2]:= v6 @kind object;
  #L3f462a.  call temp:= `invoke`(v3, v0, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f4630.  return v0 @kind object;
  #L3f4632.  return v1 @kind object;
  catch `java.lang.Exception` @[L3f4610..L3f4630] goto L3f4632;
}
procedure `boolean` `c`(`nc.b$c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lnc/b$c;.c:(Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f45cc.  v0:= 0I;
  #L3f45ce.  if v4 == 0 then goto L3f45e2;
  #L3f45d2.  v1:= v3.`nc.b$c.c` @type ^`java.lang.reflect.Method` @kind object;
  #L3f45d6.  v2:= new `java.lang.Object`[v0];
  #L3f45da.  call temp:= `invoke`(v1, v4, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f45e0.  v0:= 1I;
  #L3f45e2.  return v0;
  catch `java.lang.Exception` @[L3f45d2..L3f45e0] goto L3f45e2;
}
