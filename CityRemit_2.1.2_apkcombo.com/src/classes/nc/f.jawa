record `nc.f` @kind class @AccessFlag  {
  `java.lang.Class` `nc.f.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `nc.f.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `nc.f.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`nc.f` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lnc/f;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f573c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f5742.  v0.`nc.f.a` @type ^`java.lang.Class` := v1 @kind object;
  #L3f5746.  v0.`nc.f.b` @type ^`java.lang.String` := v2 @kind object;
  #L3f574a.  v0.`nc.f.c` @type ^`java.lang.Class`[] := v3 @kind object;
  #L3f574e.  return @kind void;
}
procedure `java.lang.reflect.Method` `a`(`nc.f` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lnc/f;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f56a4.  v0:= v3.`nc.f.b` @type ^`java.lang.String` @kind object;
  #L3f56a8.  v1:= 0I;
  #L3f56aa.  if v0 == 0 then goto L3f56de;
  #L3f56ae.  v2:= v3.`nc.f.c` @type ^`java.lang.Class`[] @kind object;
  #L3f56b2.  call temp:= `b`(v4, v0, v2) @signature `Lnc/f;.b:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L3f56b8.  v4:= temp @kind object;
  #L3f56ba.  if v4 == 0 then goto L3f56dc;
  #L3f56be.  v0:= v3.`nc.f.a` @type ^`java.lang.Class` @kind object;
  #L3f56c2.  if v0 == 0 then goto L3f56dc;
  #L3f56c6.  call temp:= `getReturnType`(v4) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L3f56cc.  v2:= temp @kind object;
  #L3f56ce.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3f56d4.  v0:= temp;
  #L3f56d6.  if v0 != 0 then goto L3f56dc;
  #L3f56da.  goto L3f56de;
  #L3f56dc.  v1:= v4 @kind object;
  #L3f56de.  return v1 @kind object;
}
procedure `java.lang.reflect.Method` `b`(`java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lnc/f;.b:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3f56f0.  v0:= 0I;
  #L3f56f2.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3f56f8.  v1:= temp @kind object;
  #L3f56fa.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L3f5700.  v2:= temp;
  #L3f5702.  v2:= v2 ^& 1;
  #L3f5706.  if v2 != 0 then goto L3f570c;
  #L3f570a.  goto L3f570e;
  #L3f570c.  v0:= v1 @kind object;
  #L3f570e.  return v0 @kind object;
  catch `java.lang.NoSuchMethodException` @[L3f56f2..L3f56fa] goto L3f570e;
  catch `java.lang.NoSuchMethodException` @[L3f56fa..L3f5702] goto L3f570c;
}
procedure `java.lang.Object` `c`(`nc.f` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lnc/f;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f54f8.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f54fe.  v0:= temp @kind object;
  #L3f5500.  call temp:= `a`(v3, v0) @signature `Lnc/f;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L3f5506.  v0:= temp @kind object;
  #L3f5508.  if v0 == 0 then goto L3f554c;
  #L3f550c.  call temp:= `invoke`(v0, v4, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f5512.  v4:= temp @kind object;
  #L3f5514.  return v4 @kind object;
  #L3f5516.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3f5518.  v5:= new `java.lang.AssertionError`;
  #L3f551c.  v1:= new `java.lang.StringBuilder`;
  #L3f5520.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f5526.  v2:= "Unexpectedly could not call: " @kind object;
  #L3f552a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5530.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5536.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f553c.  v0:= temp @kind object;
  #L3f553e.  call `<init>`(v5, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f5544.  call temp:= `initCause`(v5, v4) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3f554a.  throw v5;
  #L3f554c.  v5:= new `java.lang.AssertionError`;
  #L3f5550.  v0:= new `java.lang.StringBuilder`;
  #L3f5554.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f555a.  v1:= "Method " @kind object;
  #L3f555e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5564.  v1:= v3.`nc.f.b` @type ^`java.lang.String` @kind object;
  #L3f5568.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f556e.  v1:= " not supported for object " @kind object;
  #L3f5572.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5578.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f557e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f5584.  v4:= temp @kind object;
  #L3f5586.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f558c.  throw v5;
  catch `java.lang.IllegalAccessException` @[L3f550c..L3f5514] goto L3f5516;
}
procedure `java.lang.Object` `d`(`nc.f` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lnc/f;.d:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f55b0.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f55b6.  v0:= temp @kind object;
  #L3f55b8.  call temp:= `a`(v2, v0) @signature `Lnc/f;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L3f55be.  v0:= temp @kind object;
  #L3f55c0.  v1:= 0I;
  #L3f55c2.  if v0 != 0 then goto L3f55c8;
  #L3f55c6.  return v1 @kind object;
  #L3f55c8.  call temp:= `invoke`(v0, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f55ce.  v3:= temp @kind object;
  #L3f55d0.  return v3 @kind object;
  #L3f55d2.  return v1 @kind object;
  catch `java.lang.IllegalAccessException` @[L3f55c8..L3f55d0] goto L3f55d2;
}
procedure `java.lang.Object` `e`(`nc.f` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lnc/f;.e:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f55f4.  call temp:= `d`(v1, v2, v3) @signature `Lnc/f;.d:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f55fa.  v2:= temp @kind object;
  #L3f55fc.  return v2 @kind object;
  #L3f55fe.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L3f5600.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L3f5606.  v2:= temp @kind object;
  #L3f5608.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L3f560c.  if v3 == 0 then goto L3f5616;
  #L3f5610.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L3f5614.  throw v2;
  #L3f5616.  v3:= new `java.lang.AssertionError`;
  #L3f561a.  v0:= "Unexpected exception" @kind object;
  #L3f561e.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f5624.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3f562a.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L3f55f4..L3f55fc] goto L3f55fe;
}
procedure `java.lang.Object` `f`(`nc.f` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lnc/f;.f:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f564c.  call temp:= `c`(v1, v2, v3) @signature `Lnc/f;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f5652.  v2:= temp @kind object;
  #L3f5654.  return v2 @kind object;
  #L3f5656.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L3f5658.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L3f565e.  v2:= temp @kind object;
  #L3f5660.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L3f5664.  if v3 == 0 then goto L3f566e;
  #L3f5668.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L3f566c.  throw v2;
  #L3f566e.  v3:= new `java.lang.AssertionError`;
  #L3f5672.  v0:= "Unexpected exception" @kind object;
  #L3f5676.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f567c.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3f5682.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L3f564c..L3f5654] goto L3f5656;
}
procedure `boolean` `g`(`nc.f` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lnc/f;.g:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f54cc.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f54d2.  v1:= temp @kind object;
  #L3f54d4.  call temp:= `a`(v0, v1) @signature `Lnc/f;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L3f54da.  v1:= temp @kind object;
  #L3f54dc.  if v1 == 0 then goto L3f54e4;
  #L3f54e0.  v1:= 1I;
  #L3f54e2.  goto L3f54e6;
  #L3f54e4.  v1:= 0I;
  #L3f54e6.  return v1;
}
