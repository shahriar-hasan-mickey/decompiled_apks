record `nc.c` @kind class @AccessFlag PUBLIC extends `nc.g` @kind class {
}
procedure `void` `<init>`(`nc.c` v0 @kind this) @signature `Lnc/c;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3f4e94.  call `<init>`(v0) @signature `Lnc/g;.<init>:()V` @kind direct;
  #L3f4e9a.  return @kind void;
}
procedure `nc.c` `u`() @signature `Lnc/c;.u:()Lnc/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f4e4c.  v0:= 0I;
  #L3f4e4e.  v1:= "org.conscrypt.Conscrypt" @kind object;
  #L3f4e52.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3f4e58.  call temp:= `isAvailable`() @signature `Lorg/conscrypt/Conscrypt;.isAvailable:()Z` @kind static;
  #L3f4e5e.  v1:= temp;
  #L3f4e60.  if v1 != 0 then goto L3f4e66;
  #L3f4e64.  return v0 @kind object;
  #L3f4e66.  v1:= new `nc.c`;
  #L3f4e6a.  call `<init>`(v1) @signature `Lnc/c;.<init>:()V` @kind direct;
  #L3f4e70.  return v1 @kind object;
  #L3f4e72.  return v0 @kind object;
  catch `java.lang.ClassNotFoundException` @[L3f4e4e..L3f4e70] goto L3f4e72;
}
procedure `java.security.Provider` `v`(`nc.c` v1 @kind this) @signature `Lnc/c;.v:()Ljava/security/Provider;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f4db4.  call temp:= `newProviderBuilder`() @signature `Lorg/conscrypt/Conscrypt;.newProviderBuilder:()Lorg/conscrypt/Conscrypt$ProviderBuilder;` @kind static;
  #L3f4dba.  v0:= temp @kind object;
  #L3f4dbc.  call temp:= `provideTrustManager`(v0) @signature `Lorg/conscrypt/Conscrypt$ProviderBuilder;.provideTrustManager:()Lorg/conscrypt/Conscrypt$ProviderBuilder;` @kind virtual;
  #L3f4dc2.  v0:= temp @kind object;
  #L3f4dc4.  call temp:= `build`(v0) @signature `Lorg/conscrypt/Conscrypt$ProviderBuilder;.build:()Ljava/security/Provider;` @kind virtual;
  #L3f4dca.  v0:= temp @kind object;
  #L3f4dcc.  return v0 @kind object;
}
procedure `void` `f`(`nc.c` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Lnc/c;.f:(Ljavax/net/ssl/SSLSocketFactory;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4eac.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocketFactory;)Z` @kind static;
  #L3f4eb2.  v0:= temp;
  #L3f4eb4.  if v0 == 0 then goto L3f4ec0;
  #L3f4eb8.  v0:= 1I;
  #L3f4eba.  call `setUseEngineSocket`(v2, v0) @signature `Lorg/conscrypt/Conscrypt;.setUseEngineSocket:(Ljavax/net/ssl/SSLSocketFactory;Z)V` @kind static;
  #L3f4ec0.  return @kind void;
}
procedure `void` `g`(`nc.c` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object, `java.lang.String` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lnc/c;.g:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4ed4.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocket;)Z` @kind static;
  #L3f4eda.  v0:= temp;
  #L3f4edc.  if v0 == 0 then goto L3f4f14;
  #L3f4ee0.  if v3 == 0 then goto L3f4ef2;
  #L3f4ee4.  v0:= 1I;
  #L3f4ee6.  call `setUseSessionTickets`(v2, v0) @signature `Lorg/conscrypt/Conscrypt;.setUseSessionTickets:(Ljavax/net/ssl/SSLSocket;Z)V` @kind static;
  #L3f4eec.  call `setHostname`(v2, v3) @signature `Lorg/conscrypt/Conscrypt;.setHostname:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;)V` @kind static;
  #L3f4ef2.  call temp:= `b`(v4) @signature `Lnc/g;.b:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3f4ef8.  v3:= temp @kind object;
  #L3f4efa.  v4:= 0I;
  #L3f4efc.  v4:= new `java.lang.String`[v4];
  #L3f4f00.  call temp:= `toArray`(v3, v4) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L3f4f06.  v3:= temp @kind object;
  #L3f4f08.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L3f4f0c.  call `setApplicationProtocols`(v2, v3) @signature `Lorg/conscrypt/Conscrypt;.setApplicationProtocols:(Ljavax/net/ssl/SSLSocket;[Ljava/lang/String;)V` @kind static;
  #L3f4f12.  goto L3f4f1a;
  #L3f4f14.  call `g`(v1, v2, v3, v4) @signature `Lnc/g;.g:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @kind super;
  #L3f4f1a.  return @kind void;
}
procedure `javax.net.ssl.SSLContext` `m`(`nc.c` v3 @kind this) @signature `Lnc/c;.m:()Ljavax/net/ssl/SSLContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4de0.  v0:= "TLSv1.3" @kind object;
  #L3f4de4.  call temp:= `v`(v3) @signature `Lnc/c;.v:()Ljava/security/Provider;` @kind direct;
  #L3f4dea.  v1:= temp @kind object;
  #L3f4dec.  call temp:= `getInstance`(v0, v1) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L3f4df2.  v0:= temp @kind object;
  #L3f4df4.  return v0 @kind object;
  #L3f4df6.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L3f4df8.  v1:= "TLS" @kind object;
  #L3f4dfc.  call temp:= `v`(v3) @signature `Lnc/c;.v:()Ljava/security/Provider;` @kind direct;
  #L3f4e02.  v2:= temp @kind object;
  #L3f4e04.  call temp:= `getInstance`(v1, v2) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L3f4e0a.  v0:= temp @kind object;
  #L3f4e0c.  return v0 @kind object;
  #L3f4e0e.  v1:= new `java.lang.IllegalStateException`;
  #L3f4e12.  v2:= "No TLS provider" @kind object;
  #L3f4e16.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3f4e1c.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L3f4de0..L3f4df4] goto L3f4df6;
  catch `java.security.NoSuchAlgorithmException` @[L3f4df8..L3f4e0c] goto L3f4e0e;
}
procedure `java.lang.String` `n`(`nc.c` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object) @signature `Lnc/c;.n:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4d84.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocket;)Z` @kind static;
  #L3f4d8a.  v0:= temp;
  #L3f4d8c.  if v0 == 0 then goto L3f4d9a;
  #L3f4d90.  call temp:= `getApplicationProtocol`(v2) @signature `Lorg/conscrypt/Conscrypt;.getApplicationProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @kind static;
  #L3f4d96.  v2:= temp @kind object;
  #L3f4d98.  return v2 @kind object;
  #L3f4d9a.  call temp:= `n`(v1, v2) @signature `Lnc/g;.n:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @kind super;
  #L3f4da0.  v2:= temp @kind object;
  #L3f4da2.  return v2 @kind object;
}
