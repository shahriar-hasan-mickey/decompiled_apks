record `nc.b` @kind class @AccessFlag  extends `nc.g` @kind class {
  `nc.f` `nc.b.c` @AccessFlag PRIVATE_FINAL;
  `nc.f` `nc.b.d` @AccessFlag PRIVATE_FINAL;
  `nc.f` `nc.b.e` @AccessFlag PRIVATE_FINAL;
  `nc.f` `nc.b.f` @AccessFlag PRIVATE_FINAL;
  `nc.b$c` `nc.b.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`nc.b` v0 @kind this, `java.lang.Class` v1 @kind object, `nc.f` v2 @kind object, `nc.f` v3 @kind object, `nc.f` v4 @kind object, `nc.f` v5 @kind object) @signature `Lnc/b;.<init>:(Ljava/lang/Class;Lnc/f;Lnc/f;Lnc/f;Lnc/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f4b94.  call `<init>`(v0) @signature `Lnc/g;.<init>:()V` @kind direct;
  #L3f4b9a.  call temp:= `b`() @signature `Lnc/b$c;.b:()Lnc/b$c;` @kind static;
  #L3f4ba0.  v1:= temp @kind object;
  #L3f4ba2.  v0.`nc.b.g` @type ^`nc.b$c` := v1 @kind object;
  #L3f4ba6.  v0.`nc.b.c` @type ^`nc.f` := v2 @kind object;
  #L3f4baa.  v0.`nc.b.d` @type ^`nc.f` := v3 @kind object;
  #L3f4bae.  v0.`nc.b.e` @type ^`nc.f` := v4 @kind object;
  #L3f4bb2.  v0.`nc.b.f` @type ^`nc.f` := v5 @kind object;
  #L3f4bb6.  return @kind void;
}
procedure `boolean` `u`(`nc.b` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.Class` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lnc/b;.u:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f46f8.  v0:= "isCleartextTrafficPermitted" @kind object;
  #L3f46fc.  v1:= 0I;
  #L3f46fe.  v2:= new `java.lang.Class`[v1];
  #L3f4702.  call temp:= `getMethod`(v5, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3f4708.  v5:= temp @kind object;
  #L3f470a.  v0:= new `java.lang.Object`[v1];
  #L3f470e.  call temp:= `invoke`(v5, v6, v0) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f4714.  v5:= temp @kind object;
  #L3f4716.  v5:= (`java.lang.Boolean`) v5 @kind object;
  #L3f471a.  call temp:= `booleanValue`(v5) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L3f4720.  v4:= temp;
  #L3f4722.  return v4;
  #L3f4724.  call temp:= `q`(v3, v4) @signature `Lnc/g;.q:(Ljava/lang/String;)Z` @kind super;
  #L3f472a.  v4:= temp;
  #L3f472c.  return v4;
  catch `java.lang.NoSuchMethodException` @[L3f46f8..L3f4722] goto L3f4724;
}
procedure `boolean` `v`(`nc.b` v5 @kind this, `java.lang.String` v6 @kind object, `java.lang.Class` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lnc/b;.v:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f4750.  v0:= "isCleartextTrafficPermitted" @kind object;
  #L3f4754.  v1:= 1I;
  #L3f4756.  v2:= new `java.lang.Class`[v1];
  #L3f475a.  v3:= constclass @type ^`java.lang.String` @kind object;
  #L3f475e.  v4:= 0I;
  #L3f4760.  v2[v4]:= v3 @kind object;
  #L3f4764.  call temp:= `getMethod`(v7, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3f476a.  v0:= temp @kind object;
  #L3f476c.  v1:= new `java.lang.Object`[v1];
  #L3f4770.  v1[v4]:= v6 @kind object;
  #L3f4774.  call temp:= `invoke`(v0, v8, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f477a.  v0:= temp @kind object;
  #L3f477c.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L3f4780.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L3f4786.  v6:= temp;
  #L3f4788.  return v6;
  #L3f478a.  call temp:= `u`(v5, v6, v7, v8) @signature `Lnc/b;.u:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;)Z` @kind direct;
  #L3f4790.  v6:= temp;
  #L3f4792.  return v6;
  catch `java.lang.NoSuchMethodException` @[L3f4750..L3f4788] goto L3f478a;
}
procedure `nc.g` `w`() @signature `Lnc/b;.w:()Lnc/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3f49bc.  v0:= constclass @type ^`byte`[] @kind object;
  #L3f49c0.  call temp:= `p`() @signature `Lnc/g;.p:()Z` @kind static;
  #L3f49c6.  v1:= temp;
  #L3f49c8.  v2:= 0I;
  #L3f49ca.  if v1 != 0 then goto L3f49d0;
  #L3f49ce.  return v2 @kind object;
  #L3f49d0.  v1:= "com.android.org.conscrypt.SSLParametersImpl" @kind object;
  #L3f49d4.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3f49da.  v1:= temp @kind object;
  #L3f49dc.  v4:= v1 @kind object;
  #L3f49de.  goto L3f49ee;
  #L3f49e0.  v1:= "org.apache.harmony.xnet.provider.jsse.SSLParametersImpl" @kind object;
  #L3f49e4.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3f49ea.  v1:= temp @kind object;
  #L3f49ec.  goto L3f49dc;
  #L3f49ee.  v5:= new `nc.f`;
  #L3f49f2.  v1:= "setUseSessionTickets" @kind object;
  #L3f49f6.  v3:= 1I;
  #L3f49f8.  v6:= new `java.lang.Class`[v3];
  #L3f49fc.  v7:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f4a00.  v8:= 0I;
  #L3f4a02.  v6[v8]:= v7 @kind object;
  #L3f4a06.  call `<init>`(v5, v2, v1, v6) @signature `Lnc/f;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L3f4a0c.  v6:= new `nc.f`;
  #L3f4a10.  v1:= "setHostname" @kind object;
  #L3f4a14.  v7:= new `java.lang.Class`[v3];
  #L3f4a18.  v9:= constclass @type ^`java.lang.String` @kind object;
  #L3f4a1c.  v7[v8]:= v9 @kind object;
  #L3f4a20.  call `<init>`(v6, v2, v1, v7) @signature `Lnc/f;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L3f4a26.  call temp:= `y`() @signature `Lnc/b;.y:()Z` @kind static;
  #L3f4a2c.  v1:= temp;
  #L3f4a2e.  if v1 == 0 then goto L3f4a60;
  #L3f4a32.  v1:= new `nc.f`;
  #L3f4a36.  v7:= "getAlpnSelectedProtocol" @kind object;
  #L3f4a3a.  v9:= new `java.lang.Class`[v8];
  #L3f4a3e.  call `<init>`(v1, v0, v7, v9) @signature `Lnc/f;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L3f4a44.  v7:= new `nc.f`;
  #L3f4a48.  v9:= "setAlpnProtocols" @kind object;
  #L3f4a4c.  v3:= new `java.lang.Class`[v3];
  #L3f4a50.  v3[v8]:= v0 @kind object;
  #L3f4a54.  call `<init>`(v7, v2, v9, v3) @signature `Lnc/f;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L3f4a5a.  v8:= v7 @kind object;
  #L3f4a5c.  v7:= v1 @kind object;
  #L3f4a5e.  goto L3f4a64;
  #L3f4a60.  v7:= v2 @kind object;
  #L3f4a62.  v8:= v7 @kind object;
  #L3f4a64.  v0:= new `nc.b`;
  #L3f4a68.  v3:= v0 @kind object;
  #L3f4a6a.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Lnc/b;.<init>:(Ljava/lang/Class;Lnc/f;Lnc/f;Lnc/f;Lnc/f;)V` @kind direct;
  #L3f4a70.  return v0 @kind object;
  #L3f4a72.  return v2 @kind object;
  catch `java.lang.ClassNotFoundException` @[L3f49d0..L3f49dc] goto L3f49e0;
  catch `java.lang.ClassNotFoundException` @[L3f49e0..L3f4a70] goto L3f4a72;
}
procedure `int` `x`() @signature `Lnc/b;.x:()I` @AccessFlag STATIC {
    temp;
    v0;

  #L3f4894.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L3f4898.  return v0;
  #L3f489a.  v0:= 0I;
  #L3f489c.  return v0;
  catch `java.lang.NoClassDefFoundError` @[L3f4894..L3f4898] goto L3f489a;
}
procedure `boolean` `y`() @signature `Lnc/b;.y:()Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3f4850.  v0:= "GMSCore_OpenSSL" @kind object;
  #L3f4854.  call temp:= `getProvider`(v0) @signature `Ljava/security/Security;.getProvider:(Ljava/lang/String;)Ljava/security/Provider;` @kind static;
  #L3f485a.  v0:= temp @kind object;
  #L3f485c.  v1:= 1I;
  #L3f485e.  if v0 == 0 then goto L3f4864;
  #L3f4862.  return v1;
  #L3f4864.  v0:= "android.net.Network" @kind object;
  #L3f4868.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3f486e.  return v1;
  #L3f4870.  v0:= 0I;
  #L3f4872.  return v0;
  catch `java.lang.ClassNotFoundException` @[L3f4864..L3f486e] goto L3f4870;
}
procedure `pc.c` `c`(`nc.b` v8 @kind this, `javax.net.ssl.X509TrustManager` v9 @kind object) @signature `Lnc/b;.c:(Ljavax/net/ssl/X509TrustManager;)Lpc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f4aa0.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L3f4aa4.  v1:= "android.net.http.X509TrustManagerExtensions" @kind object;
  #L3f4aa8.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3f4aae.  v1:= temp @kind object;
  #L3f4ab0.  v2:= 1I;
  #L3f4ab2.  v3:= new `java.lang.Class`[v2];
  #L3f4ab6.  v4:= constclass @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L3f4aba.  v5:= 0I;
  #L3f4abc.  v3[v5]:= v4 @kind object;
  #L3f4ac0.  call temp:= `getConstructor`(v1, v3) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L3f4ac6.  v3:= temp @kind object;
  #L3f4ac8.  v4:= new `java.lang.Object`[v2];
  #L3f4acc.  v4[v5]:= v9 @kind object;
  #L3f4ad0.  call temp:= `newInstance`(v3, v4) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f4ad6.  v3:= temp @kind object;
  #L3f4ad8.  v4:= "checkServerTrusted" @kind object;
  #L3f4adc.  v6:= 3I;
  #L3f4ade.  v6:= new `java.lang.Class`[v6];
  #L3f4ae2.  v7:= constclass @type ^`java.security.cert.X509Certificate`[] @kind object;
  #L3f4ae6.  v6[v5]:= v7 @kind object;
  #L3f4aea.  v6[v2]:= v0 @kind object;
  #L3f4aee.  v2:= 2I;
  #L3f4af0.  v6[v2]:= v0 @kind object;
  #L3f4af4.  call temp:= `getMethod`(v1, v4, v6) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3f4afa.  v0:= temp @kind object;
  #L3f4afc.  v1:= new `nc.b$a`;
  #L3f4b00.  call `<init>`(v1, v3, v0) @signature `Lnc/b$a;.<init>:(Ljava/lang/Object;Ljava/lang/reflect/Method;)V` @kind direct;
  #L3f4b06.  return v1 @kind object;
  #L3f4b08.  call temp:= `c`(v8, v9) @signature `Lnc/g;.c:(Ljavax/net/ssl/X509TrustManager;)Lpc/c;` @kind super;
  #L3f4b0e.  v9:= temp @kind object;
  #L3f4b10.  return v9 @kind object;
  catch `java.lang.Exception` @[L3f4aa4..L3f4b06] goto L3f4b08;
}
procedure `pc.e` `d`(`nc.b` v6 @kind this, `javax.net.ssl.X509TrustManager` v7 @kind object) @signature `Lnc/b;.d:(Ljavax/net/ssl/X509TrustManager;)Lpc/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f4b34.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f4b3a.  v0:= temp @kind object;
  #L3f4b3c.  v1:= "findTrustAnchorByIssuerAndSignature" @kind object;
  #L3f4b40.  v2:= 1I;
  #L3f4b42.  v3:= new `java.lang.Class`[v2];
  #L3f4b46.  v4:= 0I;
  #L3f4b48.  v5:= constclass @type ^`java.security.cert.X509Certificate` @kind object;
  #L3f4b4c.  v3[v4]:= v5 @kind object;
  #L3f4b50.  call temp:= `getDeclaredMethod`(v0, v1, v3) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3f4b56.  v0:= temp @kind object;
  #L3f4b58.  call `setAccessible`(v0, v2) @signature `Ljava/lang/reflect/Method;.setAccessible:(Z)V` @kind virtual;
  #L3f4b5e.  v1:= new `nc.b$b`;
  #L3f4b62.  call `<init>`(v1, v7, v0) @signature `Lnc/b$b;.<init>:(Ljavax/net/ssl/X509TrustManager;Ljava/lang/reflect/Method;)V` @kind direct;
  #L3f4b68.  return v1 @kind object;
  #L3f4b6a.  call temp:= `d`(v6, v7) @signature `Lnc/g;.d:(Ljavax/net/ssl/X509TrustManager;)Lpc/e;` @kind super;
  #L3f4b70.  v7:= temp @kind object;
  #L3f4b72.  return v7 @kind object;
  catch `java.lang.NoSuchMethodException` @[L3f4b34..L3f4b68] goto L3f4b6a;
}
procedure `void` `g`(`nc.b` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object, `java.lang.String` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lnc/b;.g:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f4bc8.  v0:= 0I;
  #L3f4bca.  v1:= 1I;
  #L3f4bcc.  if v7 == 0 then goto L3f4bf8;
  #L3f4bd0.  v2:= v5.`nc.b.c` @type ^`nc.f` @kind object;
  #L3f4bd4.  v3:= new `java.lang.Object`[v1];
  #L3f4bd8.  v4:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3f4bdc.  v3[v0]:= v4 @kind object;
  #L3f4be0.  call temp:= `e`(v2, v6, v3) @signature `Lnc/f;.e:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f4be6.  v2:= v5.`nc.b.d` @type ^`nc.f` @kind object;
  #L3f4bea.  v3:= new `java.lang.Object`[v1];
  #L3f4bee.  v3[v0]:= v7 @kind object;
  #L3f4bf2.  call temp:= `e`(v2, v6, v3) @signature `Lnc/f;.e:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f4bf8.  v7:= v5.`nc.b.f` @type ^`nc.f` @kind object;
  #L3f4bfc.  if v7 == 0 then goto L3f4c26;
  #L3f4c00.  call temp:= `g`(v7, v6) @signature `Lnc/f;.g:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f4c06.  v7:= temp;
  #L3f4c08.  if v7 == 0 then goto L3f4c26;
  #L3f4c0c.  v7:= new `java.lang.Object`[v1];
  #L3f4c10.  call temp:= `e`(v8) @signature `Lnc/g;.e:(Ljava/util/List;)[B` @kind static;
  #L3f4c16.  v8:= temp @kind object;
  #L3f4c18.  v7[v0]:= v8 @kind object;
  #L3f4c1c.  v8:= v5.`nc.b.f` @type ^`nc.f` @kind object;
  #L3f4c20.  call temp:= `f`(v8, v6, v7) @signature `Lnc/f;.f:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f4c26.  return @kind void;
}
procedure `void` `h`(`nc.b` v1 @kind this, `java.net.Socket` v2 @kind object, `java.net.InetSocketAddress` v3 @kind object, `int` v4 ) @signature `Lnc/b;.h:(Ljava/net/Socket;Ljava/net/InetSocketAddress;I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4c38.  v0:= "Exception in connect" @kind object;
  #L3f4c3c.  call `connect`(v2, v3, v4) @signature `Ljava/net/Socket;.connect:(Ljava/net/SocketAddress;I)V` @kind virtual;
  #L3f4c42.  return @kind void;
  #L3f4c44.  v2:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L3f4c46.  v3:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L3f4c4a.  v4:= 26I;
  #L3f4c4e.  if v3 != v4 then goto L3f4c64;
  #L3f4c52.  v3:= new `java.io.IOException`;
  #L3f4c56.  call `<init>`(v3, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4c5c.  call temp:= `initCause`(v3, v2) @signature `Ljava/io/IOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3f4c62.  throw v3;
  #L3f4c64.  throw v2;
  #L3f4c66.  v2:= Exception @type ^`java.lang.SecurityException` @kind object;
  #L3f4c68.  v3:= new `java.io.IOException`;
  #L3f4c6c.  call `<init>`(v3, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4c72.  call temp:= `initCause`(v3, v2) @signature `Ljava/io/IOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3f4c78.  throw v3;
  #L3f4c7a.  v2:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L3f4c7c.  call temp:= `y`(v2) @signature `Lhc/c;.y:(Ljava/lang/AssertionError;)Z` @kind static;
  #L3f4c82.  v3:= temp;
  #L3f4c84.  if v3 == 0 then goto L3f4c94;
  #L3f4c88.  v3:= new `java.io.IOException`;
  #L3f4c8c.  call `<init>`(v3, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3f4c92.  throw v3;
  #L3f4c94.  throw v2;
  catch `java.lang.AssertionError` @[L3f4c3c..L3f4c42] goto L3f4c7a;
  catch `java.lang.SecurityException` @[L3f4c3c..L3f4c42] goto L3f4c66;
  catch `java.lang.ClassCastException` @[L3f4c3c..L3f4c42] goto L3f4c44;
}
procedure `javax.net.ssl.SSLContext` `m`(`nc.b` v3 @kind this) @signature `Lnc/b;.m:()Ljavax/net/ssl/SSLContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4934.  v0:= 1I;
  #L3f4936.  v1:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L3f493a.  v2:= 16I;
  #L3f493e.  if v1 < v2 then goto L3f494c;
  #L3f4942.  v2:= 22I;
  #L3f4946.  if v1 >= v2 then goto L3f494c;
  #L3f494a.  goto L3f4952;
  #L3f494c.  v0:= 0I;
  #L3f494e.  goto L3f4952;
  #L3f4950.  
  #L3f4952.  if v0 == 0 then goto L3f4964;
  #L3f4956.  v0:= "TLSv1.2" @kind object;
  #L3f495a.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L3f4960.  v0:= temp @kind object;
  #L3f4962.  return v0 @kind object;
  #L3f4964.  v0:= "TLS" @kind object;
  #L3f4968.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L3f496e.  v0:= temp @kind object;
  #L3f4970.  return v0 @kind object;
  #L3f4972.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L3f4974.  v1:= new `java.lang.IllegalStateException`;
  #L3f4978.  v2:= "No TLS provider" @kind object;
  #L3f497c.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3f4982.  throw v1;
  catch `java.lang.NoClassDefFoundError` @[L3f4936..L3f493a] goto L3f4950;
  catch `java.security.NoSuchAlgorithmException` @[L3f4956..L3f4962] goto L3f4964;
  catch `java.security.NoSuchAlgorithmException` @[L3f4964..L3f4970] goto L3f4972;
}
procedure `java.lang.String` `n`(`nc.b` v3 @kind this, `javax.net.ssl.SSLSocket` v4 @kind object) @signature `Lnc/b;.n:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f48e0.  v0:= v3.`nc.b.e` @type ^`nc.f` @kind object;
  #L3f48e4.  v1:= 0I;
  #L3f48e6.  if v0 != 0 then goto L3f48ec;
  #L3f48ea.  return v1 @kind object;
  #L3f48ec.  call temp:= `g`(v0, v4) @signature `Lnc/f;.g:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f48f2.  v0:= temp;
  #L3f48f4.  if v0 != 0 then goto L3f48fa;
  #L3f48f8.  return v1 @kind object;
  #L3f48fa.  v0:= v3.`nc.b.e` @type ^`nc.f` @kind object;
  #L3f48fe.  v2:= 0I;
  #L3f4900.  v2:= new `java.lang.Object`[v2];
  #L3f4904.  call temp:= `f`(v0, v4, v2) @signature `Lnc/f;.f:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f490a.  v4:= temp @kind object;
  #L3f490c.  v4:= (`byte`[]) v4 @kind object;
  #L3f4910.  if v4 == 0 then goto L3f4922;
  #L3f4914.  v1:= new `java.lang.String`;
  #L3f4918.  v0:= `@@hc.c.d` @type ^`java.nio.charset.Charset` @kind object;
  #L3f491c.  call `<init>`(v1, v4, v0) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L3f4922.  return v1 @kind object;
}
procedure `java.lang.Object` `o`(`nc.b` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lnc/b;.o:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f48c0.  v0:= v1.`nc.b.g` @type ^`nc.b$c` @kind object;
  #L3f48c4.  call temp:= `a`(v0, v2) @signature `Lnc/b$c;.a:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L3f48ca.  v2:= temp @kind object;
  #L3f48cc.  return v2 @kind object;
}
procedure `boolean` `q`(`nc.b` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lnc/b;.q:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f47b4.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L3f47b8.  v1:= 23I;
  #L3f47bc.  if v0 >= v1 then goto L3f47ca;
  #L3f47c0.  call temp:= `q`(v4, v5) @signature `Lnc/g;.q:(Ljava/lang/String;)Z` @kind super;
  #L3f47c6.  v5:= temp;
  #L3f47c8.  return v5;
  #L3f47ca.  v0:= "android.security.NetworkSecurityPolicy" @kind object;
  #L3f47ce.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3f47d4.  v0:= temp @kind object;
  #L3f47d6.  v1:= "getInstance" @kind object;
  #L3f47da.  v2:= 0I;
  #L3f47dc.  v3:= new `java.lang.Class`[v2];
  #L3f47e0.  call temp:= `getMethod`(v0, v1, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3f47e6.  v1:= temp @kind object;
  #L3f47e8.  v3:= 0I;
  #L3f47ea.  v2:= new `java.lang.Object`[v2];
  #L3f47ee.  call temp:= `invoke`(v1, v3, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f47f4.  v1:= temp @kind object;
  #L3f47f6.  call temp:= `v`(v4, v5, v0, v1) @signature `Lnc/b;.v:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;)Z` @kind direct;
  #L3f47fc.  v5:= temp;
  #L3f47fe.  return v5;
  #L3f4800.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L3f4802.  goto L3f480a;
  #L3f4804.  v5:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L3f4806.  goto L3f480a;
  #L3f4808.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3f480a.  v0:= "unable to determine cleartext support" @kind object;
  #L3f480e.  call temp:= `b`(v0, v5) @signature `Lhc/c;.b:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L3f4814.  v5:= temp @kind object;
  #L3f4816.  throw v5;
  #L3f4818.  call temp:= `q`(v4, v5) @signature `Lnc/g;.q:(Ljava/lang/String;)Z` @kind super;
  #L3f481e.  v5:= temp;
  #L3f4820.  return v5;
  catch `java.lang.ClassNotFoundException` @[L3f47ca..L3f47fe] goto L3f4818;
  catch `java.lang.NoSuchMethodException` @[L3f47ca..L3f47fe] goto L3f4818;
  catch `java.lang.IllegalAccessException` @[L3f47ca..L3f47fe] goto L3f4808;
  catch `java.lang.IllegalArgumentException` @[L3f47ca..L3f47fe] goto L3f4804;
  catch `java.lang.reflect.InvocationTargetException` @[L3f47ca..L3f47fe] goto L3f4800;
}
procedure `void` `s`(`nc.b` v5 @kind this, `int` v6 , `java.lang.String` v7 @kind object, `java.lang.Throwable` v8 @kind object) @signature `Lnc/b;.s:(ILjava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f4cbc.  v0:= 5I;
  #L3f4cbe.  if v6 != v0 then goto L3f4cc4;
  #L3f4cc2.  goto L3f4cc6;
  #L3f4cc4.  v0:= 3I;
  #L3f4cc6.  v6:= 10I;
  #L3f4cca.  if v8 == 0 then goto L3f4cfa;
  #L3f4cce.  v1:= new `java.lang.StringBuilder`;
  #L3f4cd2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f4cd8.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4cde.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4ce4.  call temp:= `getStackTraceString`(v8) @signature `Landroid/util/Log;.getStackTraceString:(Ljava/lang/Throwable;)Ljava/lang/String;` @kind static;
  #L3f4cea.  v7:= temp @kind object;
  #L3f4cec.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4cf2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f4cf8.  v7:= temp @kind object;
  #L3f4cfa.  v8:= 0I;
  #L3f4cfc.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f4d02.  v1:= temp;
  #L3f4d04.  if v8 >= v1 then goto L3f4d46;
  #L3f4d08.  call temp:= `indexOf`(v7, v6, v8) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L3f4d0e.  v2:= temp;
  #L3f4d10.  v3:= -1I;
  #L3f4d12.  if v2 == v3 then goto L3f4d18;
  #L3f4d16.  goto L3f4d1a;
  #L3f4d18.  v2:= v1;
  #L3f4d1a.  v3:= v8 + 4000;
  #L3f4d1e.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f4d24.  v3:= temp;
  #L3f4d26.  call temp:= `substring`(v7, v8, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3f4d2c.  v8:= temp @kind object;
  #L3f4d2e.  v4:= "OkHttp" @kind object;
  #L3f4d32.  call temp:= `println`(v0, v4, v8) @signature `Landroid/util/Log;.println:(ILjava/lang/String;Ljava/lang/String;)I` @kind static;
  #L3f4d38.  if v3 < v2 then goto L3f4d42;
  #L3f4d3c.  v8:= v3 + 1;
  #L3f4d40.  goto L3f4d04;
  #L3f4d42.  v8:= v3;
  #L3f4d44.  goto L3f4d1a;
  #L3f4d46.  return @kind void;
}
procedure `void` `t`(`nc.b` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lnc/b;.t:(Ljava/lang/String;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4d58.  v0:= v1.`nc.b.g` @type ^`nc.b$c` @kind object;
  #L3f4d5c.  call temp:= `c`(v0, v3) @signature `Lnc/b$c;.c:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f4d62.  v3:= temp;
  #L3f4d64.  if v3 != 0 then goto L3f4d72;
  #L3f4d68.  v3:= 5I;
  #L3f4d6a.  v0:= 0I;
  #L3f4d6c.  call `s`(v1, v3, v2, v0) @signature `Lnc/b;.s:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L3f4d72.  return @kind void;
}
