record `nc.d` @kind class @AccessFlag FINAL extends `nc.g` @kind class {
  `java.lang.reflect.Method` `nc.d.c` @AccessFlag FINAL;
  `java.lang.reflect.Method` `nc.d.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`nc.d` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lnc/d;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f5010.  call `<init>`(v0) @signature `Lnc/g;.<init>:()V` @kind direct;
  #L3f5016.  v0.`nc.d.c` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L3f501a.  v0.`nc.d.d` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L3f501e.  return @kind void;
}
procedure `nc.d` `u`() @signature `Lnc/d;.u:()Lnc/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f4fac.  v0:= constclass @type ^`javax.net.ssl.SSLParameters` @kind object;
  #L3f4fb0.  v1:= "setApplicationProtocols" @kind object;
  #L3f4fb4.  v2:= 1I;
  #L3f4fb6.  v2:= new `java.lang.Class`[v2];
  #L3f4fba.  v3:= constclass @type ^`java.lang.String`[] @kind object;
  #L3f4fbe.  v4:= 0I;
  #L3f4fc0.  v2[v4]:= v3 @kind object;
  #L3f4fc4.  call temp:= `getMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3f4fca.  v0:= temp @kind object;
  #L3f4fcc.  v1:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L3f4fd0.  v2:= "getApplicationProtocol" @kind object;
  #L3f4fd4.  v3:= new `java.lang.Class`[v4];
  #L3f4fd8.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3f4fde.  v1:= temp @kind object;
  #L3f4fe0.  v2:= new `nc.d`;
  #L3f4fe4.  call `<init>`(v2, v0, v1) @signature `Lnc/d;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L3f4fea.  return v2 @kind object;
  #L3f4fec.  v0:= 0I;
  #L3f4fee.  return v0 @kind object;
  catch `java.lang.NoSuchMethodException` @[L3f4fac..L3f4fea] goto L3f4fec;
}
procedure `void` `g`(`nc.d` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object, `java.lang.String` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lnc/d;.g:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f5030.  call temp:= `getSSLParameters`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getSSLParameters:()Ljavax/net/ssl/SSLParameters;` @kind virtual;
  #L3f5036.  v6:= temp @kind object;
  #L3f5038.  call temp:= `b`(v7) @signature `Lnc/g;.b:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3f503e.  v7:= temp @kind object;
  #L3f5040.  v0:= v4.`nc.d.c` @type ^`java.lang.reflect.Method` @kind object;
  #L3f5044.  v1:= 1I;
  #L3f5046.  v1:= new `java.lang.Object`[v1];
  #L3f504a.  v2:= 0I;
  #L3f504c.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3f5052.  v3:= temp;
  #L3f5054.  v3:= new `java.lang.String`[v3];
  #L3f5058.  call temp:= `toArray`(v7, v3) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L3f505e.  v7:= temp @kind object;
  #L3f5060.  v1[v2]:= v7 @kind object;
  #L3f5064.  call temp:= `invoke`(v0, v6, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f506a.  call `setSSLParameters`(v5, v6) @signature `Ljavax/net/ssl/SSLSocket;.setSSLParameters:(Ljavax/net/ssl/SSLParameters;)V` @kind virtual;
  #L3f5070.  return @kind void;
  #L3f5072.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L3f5074.  goto L3f5078;
  #L3f5076.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3f5078.  v6:= "unable to set ssl parameters" @kind object;
  #L3f507c.  call temp:= `b`(v6, v5) @signature `Lhc/c;.b:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L3f5082.  v5:= temp @kind object;
  #L3f5084.  throw v5;
  catch `java.lang.IllegalAccessException` @[L3f5030..L3f5070] goto L3f5076;
  catch `java.lang.reflect.InvocationTargetException` @[L3f5030..L3f5070] goto L3f5072;
}
procedure `java.lang.String` `n`(`nc.d` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lnc/d;.n:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f4f2c.  v0:= "failed to get ALPN selected protocol" @kind object;
  #L3f4f30.  v1:= 0I;
  #L3f4f32.  v2:= v4.`nc.d.d` @type ^`java.lang.reflect.Method` @kind object;
  #L3f4f36.  v3:= 0I;
  #L3f4f38.  v3:= new `java.lang.Object`[v3];
  #L3f4f3c.  call temp:= `invoke`(v2, v5, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f4f42.  v5:= temp @kind object;
  #L3f4f44.  v5:= (`java.lang.String`) v5 @kind object;
  #L3f4f48.  if v5 == 0 then goto L3f4f60;
  #L3f4f4c.  v2:= "" @kind object;
  #L3f4f50.  call temp:= `equals`(v5, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f4f56.  v0:= temp;
  #L3f4f58.  if v0 == 0 then goto L3f4f5e;
  #L3f4f5c.  goto L3f4f60;
  #L3f4f5e.  return v5 @kind object;
  #L3f4f60.  return v1 @kind object;
  #L3f4f62.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3f4f64.  call temp:= `b`(v0, v5) @signature `Lhc/c;.b:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L3f4f6a.  v5:= temp @kind object;
  #L3f4f6c.  throw v5;
  #L3f4f6e.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L3f4f70.  call temp:= `getCause`(v5) @signature `Ljava/lang/reflect/InvocationTargetException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3f4f76.  v2:= temp @kind object;
  #L3f4f78.  v2:= instanceof @variable v2 @type ^`java.lang.UnsupportedOperationException` @kind boolean;
  #L3f4f7c.  if v2 == 0 then goto L3f4f82;
  #L3f4f80.  return v1 @kind object;
  #L3f4f82.  call temp:= `b`(v0, v5) @signature `Lhc/c;.b:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L3f4f88.  v5:= temp @kind object;
  #L3f4f8a.  throw v5;
  catch `java.lang.reflect.InvocationTargetException` @[L3f4f32..L3f4f58] goto L3f4f6e;
  catch `java.lang.IllegalAccessException` @[L3f4f32..L3f4f58] goto L3f4f62;
}
