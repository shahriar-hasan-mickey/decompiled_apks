record `nc.b$b` @kind class @AccessFlag FINAL extends `pc.e` @kind interface {
  `javax.net.ssl.X509TrustManager` `nc.b$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `nc.b$b.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`nc.b$b` v0 @kind this, `javax.net.ssl.X509TrustManager` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lnc/b$b;.<init>:(Ljavax/net/ssl/X509TrustManager;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f45ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f45b2.  v0.`nc.b$b.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L3f45b6.  v0.`nc.b$b.a` @type ^`javax.net.ssl.X509TrustManager` := v1 @kind object;
  #L3f45ba.  return @kind void;
}
procedure `java.security.cert.X509Certificate` `a`(`nc.b$b` v5 @kind this, `java.security.cert.X509Certificate` v6 @kind object) @signature `Lnc/b$b;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f454c.  v0:= 0I;
  #L3f454e.  v1:= v5.`nc.b$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L3f4552.  v2:= v5.`nc.b$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L3f4556.  v3:= 1I;
  #L3f4558.  v3:= new `java.lang.Object`[v3];
  #L3f455c.  v4:= 0I;
  #L3f455e.  v3[v4]:= v6 @kind object;
  #L3f4562.  call temp:= `invoke`(v1, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f4568.  v6:= temp @kind object;
  #L3f456a.  v6:= (`java.security.cert.TrustAnchor`) v6 @kind object;
  #L3f456e.  if v6 == 0 then goto L3f457a;
  #L3f4572.  call temp:= `getTrustedCert`(v6) @signature `Ljava/security/cert/TrustAnchor;.getTrustedCert:()Ljava/security/cert/X509Certificate;` @kind virtual;
  #L3f4578.  v0:= temp @kind object;
  #L3f457a.  return v0 @kind object;
  #L3f457c.  v6:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3f457e.  v0:= "unable to get issues and signature" @kind object;
  #L3f4582.  call temp:= `b`(v0, v6) @signature `Lhc/c;.b:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L3f4588.  v6:= temp @kind object;
  #L3f458a.  throw v6;
  catch `java.lang.IllegalAccessException` @[L3f454e..L3f457a] goto L3f457c;
  catch `java.lang.reflect.InvocationTargetException` @[L3f454e..L3f457a] goto L3f457a;
}
procedure `boolean` `equals`(`nc.b$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lnc/b$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f44c4.  v0:= 1I;
  #L3f44c6.  if v5 != v4 then goto L3f44cc;
  #L3f44ca.  return v0;
  #L3f44cc.  v1:= instanceof @variable v5 @type ^`nc.b$b` @kind boolean;
  #L3f44d0.  v2:= 0I;
  #L3f44d2.  if v1 != 0 then goto L3f44d8;
  #L3f44d6.  return v2;
  #L3f44d8.  v5:= (`nc.b$b`) v5 @kind object;
  #L3f44dc.  v1:= v4.`nc.b$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L3f44e0.  v3:= v5.`nc.b$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L3f44e4.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f44ea.  v1:= temp;
  #L3f44ec.  if v1 == 0 then goto L3f4506;
  #L3f44f0.  v1:= v4.`nc.b$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L3f44f4.  v5:= v5.`nc.b$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L3f44f8.  call temp:= `equals`(v1, v5) @signature `Ljava/lang/reflect/Method;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f44fe.  v5:= temp;
  #L3f4500.  if v5 == 0 then goto L3f4506;
  #L3f4504.  goto L3f4508;
  #L3f4506.  v0:= 0I;
  #L3f4508.  return v0;
}
procedure `int` `hashCode`(`nc.b$b` v2 @kind this) @signature `Lnc/b$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f451c.  v0:= v2.`nc.b$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L3f4520.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f4526.  v0:= temp;
  #L3f4528.  v1:= v2.`nc.b$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L3f452c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/reflect/Method;.hashCode:()I` @kind virtual;
  #L3f4532.  v1:= temp;
  #L3f4534.  v1:= v1 * 31;
  #L3f4538.  v0:= v0 + v1 @kind int;
  #L3f453a.  return v0;
}
