record `r3.n0` @kind class @AccessFlag PUBLIC {
  `int` `r3.n0.a` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayList` `r3.n0.b` @AccessFlag PRIVATE_FINAL;
  `r3.n0$b`[] `r3.n0.c` @AccessFlag PRIVATE_FINAL;
  `int` `r3.n0.d` @AccessFlag PRIVATE;
  `int` `r3.n0.e` @AccessFlag PRIVATE;
  `int` `r3.n0.f` @AccessFlag PRIVATE;
  `int` `r3.n0.g` @AccessFlag PRIVATE;
}
global `java.util.Comparator` `@@r3.n0.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.Comparator` `@@r3.n0.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lr3/n0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L43ddf8.  v0:= `@@r3.m0.o` @type ^`r3.m0` @kind object;
  #L43ddfc.  `@@r3.n0.h` @type ^`java.util.Comparator` := v0 @kind object;
  #L43de00.  v0:= `@@r3.l0.o` @type ^`r3.l0` @kind object;
  #L43de04.  `@@r3.n0.i` @type ^`java.util.Comparator` := v0 @kind object;
  #L43de08.  return @kind void;
}
procedure `void` `<init>`(`r3.n0` v0 @kind this, `int` v1 ) @signature `Lr3/n0;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43de1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43de22.  v0.`r3.n0.a` @type ^`int` := v1;
  #L43de26.  v1:= 5I;
  #L43de28.  v1:= new `r3.n0$b`[v1];
  #L43de2c.  v0.`r3.n0.c` @type ^`r3.n0$b`[] := v1 @kind object;
  #L43de30.  v1:= new `java.util.ArrayList`;
  #L43de34.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L43de3a.  v0.`r3.n0.b` @type ^`java.util.ArrayList` := v1 @kind object;
  #L43de3e.  v1:= -1I;
  #L43de40.  v0.`r3.n0.d` @type ^`int` := v1;
  #L43de44.  return @kind void;
}
procedure `int` `a`(`r3.n0$b` v0 @kind object, `r3.n0$b` v1 @kind object) @signature `Lr3/n0;.a:(Lr3/n0$b;Lr3/n0$b;)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L43dd80.  call temp:= `h`(v0, v1) @signature `Lr3/n0;.h:(Lr3/n0$b;Lr3/n0$b;)I` @kind static;
  #L43dd86.  v0:= temp;
  #L43dd88.  return v0;
}
procedure `int` `b`(`r3.n0$b` v0 @kind object, `r3.n0$b` v1 @kind object) @signature `Lr3/n0;.b:(Lr3/n0$b;Lr3/n0$b;)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L43dd9c.  call temp:= `g`(v0, v1) @signature `Lr3/n0;.g:(Lr3/n0$b;Lr3/n0$b;)I` @kind static;
  #L43dda2.  v0:= temp;
  #L43dda4.  return v0;
}
procedure `void` `d`(`r3.n0` v3 @kind this) @signature `Lr3/n0;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L43df28.  v0:= v3.`r3.n0.d` @type ^`int`;
  #L43df2c.  v1:= 1I;
  #L43df2e.  if v0 == v1 then goto L43df44;
  #L43df32.  v0:= v3.`r3.n0.b` @type ^`java.util.ArrayList` @kind object;
  #L43df36.  v2:= `@@r3.n0.h` @type ^`java.util.Comparator` @kind object;
  #L43df3a.  call `sort`(v0, v2) @signature `Ljava/util/Collections;.sort:(Ljava/util/List;Ljava/util/Comparator;)V` @kind static;
  #L43df40.  v3.`r3.n0.d` @type ^`int` := v1;
  #L43df44.  return @kind void;
}
procedure `void` `e`(`r3.n0` v2 @kind this) @signature `Lr3/n0;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43df58.  v0:= v2.`r3.n0.d` @type ^`int`;
  #L43df5c.  if v0 == 0 then goto L43df74;
  #L43df60.  v0:= v2.`r3.n0.b` @type ^`java.util.ArrayList` @kind object;
  #L43df64.  v1:= `@@r3.n0.i` @type ^`java.util.Comparator` @kind object;
  #L43df68.  call `sort`(v0, v1) @signature `Ljava/util/Collections;.sort:(Ljava/util/List;Ljava/util/Comparator;)V` @kind static;
  #L43df6e.  v0:= 0I;
  #L43df70.  v2.`r3.n0.d` @type ^`int` := v0;
  #L43df74.  return @kind void;
}
procedure `int` `g`(`r3.n0$b` v0 @kind object, `r3.n0$b` v1 @kind object) @signature `Lr3/n0;.g:(Lr3/n0$b;Lr3/n0$b;)I` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L43ddb8.  v0:= v0.`r3.n0$b.a` @type ^`int`;
  #L43ddbc.  v1:= v1.`r3.n0$b.a` @type ^`int`;
  #L43ddc0.  v0:= v0 - v1 @kind int;
  #L43ddc2.  return v0;
}
procedure `int` `h`(`r3.n0$b` v0 @kind object, `r3.n0$b` v1 @kind object) @signature `Lr3/n0;.h:(Lr3/n0$b;Lr3/n0$b;)I` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L43ddd4.  v0:= v0.`r3.n0$b.c` @type ^`float`;
  #L43ddd8.  v1:= v1.`r3.n0$b.c` @type ^`float`;
  #L43dddc.  call temp:= `compare`(v0, v1) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L43dde2.  v0:= temp;
  #L43dde4.  return v0;
}
procedure `void` `c`(`r3.n0` v3 @kind this, `int` v4 , `float` v5 ) @signature `Lr3/n0;.c:(IF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43de58.  call `d`(v3) @signature `Lr3/n0;.d:()V` @kind direct;
  #L43de5e.  v0:= v3.`r3.n0.g` @type ^`int`;
  #L43de62.  if v0 <= 0 then goto L43de78;
  #L43de66.  v1:= v3.`r3.n0.c` @type ^`r3.n0$b`[] @kind object;
  #L43de6a.  v0:= v0 + -1;
  #L43de6e.  v3.`r3.n0.g` @type ^`int` := v0;
  #L43de72.  v0:= v1[v0] @kind object;
  #L43de76.  goto L43de84;
  #L43de78.  v0:= new `r3.n0$b`;
  #L43de7c.  v1:= 0I;
  #L43de7e.  call `<init>`(v0, v1) @signature `Lr3/n0$b;.<init>:(Lr3/n0$a;)V` @kind direct;
  #L43de84.  v1:= v3.`r3.n0.e` @type ^`int`;
  #L43de88.  v2:= v1 + 1;
  #L43de8c.  v3.`r3.n0.e` @type ^`int` := v2;
  #L43de90.  v0.`r3.n0$b.a` @type ^`int` := v1;
  #L43de94.  v0.`r3.n0$b.b` @type ^`int` := v4;
  #L43de98.  v0.`r3.n0$b.c` @type ^`float` := v5;
  #L43de9c.  v5:= v3.`r3.n0.b` @type ^`java.util.ArrayList` @kind object;
  #L43dea0.  call temp:= `add`(v5, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L43dea6.  v5:= v3.`r3.n0.f` @type ^`int`;
  #L43deaa.  v5:= v5 + v4 @kind int;
  #L43deac.  v3.`r3.n0.f` @type ^`int` := v5;
  #L43deb0.  v4:= v3.`r3.n0.f` @type ^`int`;
  #L43deb4.  v5:= v3.`r3.n0.a` @type ^`int`;
  #L43deb8.  if v4 <= v5 then goto L43df16;
  #L43debc.  v4:= v4 - v5 @kind int;
  #L43debe.  v5:= v3.`r3.n0.b` @type ^`java.util.ArrayList` @kind object;
  #L43dec2.  v0:= 0I;
  #L43dec4.  call temp:= `get`(v5, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L43deca.  v5:= temp @kind object;
  #L43decc.  v5:= (`r3.n0$b`) v5 @kind object;
  #L43ded0.  v1:= v5.`r3.n0$b.b` @type ^`int`;
  #L43ded4.  if v1 > v4 then goto L43df08;
  #L43ded8.  v4:= v3.`r3.n0.f` @type ^`int`;
  #L43dedc.  v4:= v4 - v1 @kind int;
  #L43dede.  v3.`r3.n0.f` @type ^`int` := v4;
  #L43dee2.  v4:= v3.`r3.n0.b` @type ^`java.util.ArrayList` @kind object;
  #L43dee6.  call temp:= `remove`(v4, v0) @signature `Ljava/util/ArrayList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L43deec.  v4:= v3.`r3.n0.g` @type ^`int`;
  #L43def0.  v0:= 5I;
  #L43def2.  if v4 >= v0 then goto L43deb0;
  #L43def6.  v0:= v3.`r3.n0.c` @type ^`r3.n0$b`[] @kind object;
  #L43defa.  v1:= v4 + 1;
  #L43defe.  v3.`r3.n0.g` @type ^`int` := v1;
  #L43df02.  v0[v4]:= v5 @kind object;
  #L43df06.  goto L43deb0;
  #L43df08.  v1:= v1 - v4 @kind int;
  #L43df0a.  v5.`r3.n0$b.b` @type ^`int` := v1;
  #L43df0e.  v5:= v3.`r3.n0.f` @type ^`int`;
  #L43df12.  v5:= v5 - v4 @kind int;
  #L43df14.  goto L43deac;
  #L43df16.  return @kind void;
}
procedure `float` `f`(`r3.n0` v4 @kind this, `float` v5 ) @signature `Lr3/n0;.f:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43dce8.  call `e`(v4) @signature `Lr3/n0;.e:()V` @kind direct;
  #L43dcee.  v0:= v4.`r3.n0.f` @type ^`int`;
  #L43dcf2.  v0:= (`float`) v0 @kind i2f;
  #L43dcf4.  v5:= v5 * v0 @kind float;
  #L43dcf8.  v0:= 0I;
  #L43dcfa.  v1:= 0I;
  #L43dcfc.  v2:= v4.`r3.n0.b` @type ^`java.util.ArrayList` @kind object;
  #L43dd00.  call temp:= `size`(v2) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L43dd06.  v2:= temp;
  #L43dd08.  if v0 >= v2 then goto L43dd38;
  #L43dd0c.  v2:= v4.`r3.n0.b` @type ^`java.util.ArrayList` @kind object;
  #L43dd10.  call temp:= `get`(v2, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L43dd16.  v2:= temp @kind object;
  #L43dd18.  v2:= (`r3.n0$b`) v2 @kind object;
  #L43dd1c.  v3:= v2.`r3.n0$b.b` @type ^`int`;
  #L43dd20.  v1:= v1 + v3 @kind int;
  #L43dd22.  v3:= (`float`) v1 @kind i2f;
  #L43dd24.  v3:= fcmpl(v3, v5);
  #L43dd28.  if v3 < 0 then goto L43dd32;
  #L43dd2c.  v5:= v2.`r3.n0$b.c` @type ^`float`;
  #L43dd30.  return v5;
  #L43dd32.  v0:= v0 + 1;
  #L43dd36.  goto L43dcfc;
  #L43dd38.  v5:= v4.`r3.n0.b` @type ^`java.util.ArrayList` @kind object;
  #L43dd3c.  call temp:= `isEmpty`(v5) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L43dd42.  v5:= temp;
  #L43dd44.  if v5 == 0 then goto L43dd4e;
  #L43dd48.  v5:= NaNF;
  #L43dd4c.  goto L43dd6e;
  #L43dd4e.  v5:= v4.`r3.n0.b` @type ^`java.util.ArrayList` @kind object;
  #L43dd52.  call temp:= `size`(v5) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L43dd58.  v0:= temp;
  #L43dd5a.  v0:= v0 + -1;
  #L43dd5e.  call temp:= `get`(v5, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L43dd64.  v5:= temp @kind object;
  #L43dd66.  v5:= (`r3.n0$b`) v5 @kind object;
  #L43dd6a.  v5:= v5.`r3.n0$b.c` @type ^`float`;
  #L43dd6e.  return v5;
}
procedure `void` `i`(`r3.n0` v1 @kind this) @signature `Lr3/n0;.i:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43df88.  v0:= v1.`r3.n0.b` @type ^`java.util.ArrayList` @kind object;
  #L43df8c.  call `clear`(v0) @signature `Ljava/util/ArrayList;.clear:()V` @kind virtual;
  #L43df92.  v0:= -1I;
  #L43df94.  v1.`r3.n0.d` @type ^`int` := v0;
  #L43df98.  v0:= 0I;
  #L43df9a.  v1.`r3.n0.e` @type ^`int` := v0;
  #L43df9e.  v1.`r3.n0.f` @type ^`int` := v0;
  #L43dfa2.  return @kind void;
}
