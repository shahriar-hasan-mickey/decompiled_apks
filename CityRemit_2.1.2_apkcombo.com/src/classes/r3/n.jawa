record `r3.n` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.InputStream` @kind class {
  `r3.l` `r3.n.o` @AccessFlag PRIVATE_FINAL;
  `r3.p` `r3.n.p` @AccessFlag PRIVATE_FINAL;
  `byte`[] `r3.n.q` @AccessFlag PRIVATE_FINAL;
  `boolean` `r3.n.r` @AccessFlag PRIVATE;
  `boolean` `r3.n.s` @AccessFlag PRIVATE;
  `long` `r3.n.t` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`r3.n` v1 @kind this, `r3.l` v2 @kind object, `r3.p` v3 @kind object) @signature `Lr3/n;.<init>:(Lr3/l;Lr3/p;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L435c1c.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L435c22.  v0:= 0I;
  #L435c24.  v1.`r3.n.r` @type ^`boolean` := v0 @kind boolean;
  #L435c28.  v1.`r3.n.s` @type ^`boolean` := v0 @kind boolean;
  #L435c2c.  v1.`r3.n.o` @type ^`r3.l` := v2 @kind object;
  #L435c30.  v1.`r3.n.p` @type ^`r3.p` := v3 @kind object;
  #L435c34.  v2:= 1I;
  #L435c36.  v2:= new `byte`[v2];
  #L435c3a.  v1.`r3.n.q` @type ^`byte`[] := v2 @kind object;
  #L435c3e.  return @kind void;
}
procedure `void` `a`(`r3.n` v2 @kind this) @signature `Lr3/n;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L435c50.  v0:= v2.`r3.n.r` @type ^`boolean` @kind boolean;
  #L435c54.  if v0 != 0 then goto L435c6c;
  #L435c58.  v0:= v2.`r3.n.o` @type ^`r3.l` @kind object;
  #L435c5c.  v1:= v2.`r3.n.p` @type ^`r3.p` @kind object;
  #L435c60.  call temp:= `e`(v0, v1) @signature `Lr3/l;.e:(Lr3/p;)J` @kind interface;
  #L435c66.  v0:= 1I;
  #L435c68.  v2.`r3.n.r` @type ^`boolean` := v0 @kind boolean;
  #L435c6c.  return @kind void;
}
procedure `void` `c`(`r3.n` v0 @kind this) @signature `Lr3/n;.c:()V` @AccessFlag PUBLIC {
    temp;

  #L435cac.  call `a`(v0) @signature `Lr3/n;.a:()V` @kind direct;
  #L435cb2.  return @kind void;
}
procedure `void` `close`(`r3.n` v1 @kind this) @signature `Lr3/n;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435c80.  v0:= v1.`r3.n.s` @type ^`boolean` @kind boolean;
  #L435c84.  if v0 != 0 then goto L435c98;
  #L435c88.  v0:= v1.`r3.n.o` @type ^`r3.l` @kind object;
  #L435c8c.  call `close`(v0) @signature `Lr3/l;.close:()V` @kind interface;
  #L435c92.  v0:= 1I;
  #L435c94.  v1.`r3.n.s` @type ^`boolean` := v0 @kind boolean;
  #L435c98.  return @kind void;
}
procedure `int` `read`(`r3.n` v2 @kind this) @signature `Lr3/n;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L435b80.  v0:= v2.`r3.n.q` @type ^`byte`[] @kind object;
  #L435b84.  call temp:= `read`(v2, v0) @signature `Lr3/n;.read:([B)I` @kind virtual;
  #L435b8a.  v0:= temp;
  #L435b8c.  v1:= -1I;
  #L435b8e.  if v0 != v1 then goto L435b94;
  #L435b92.  goto L435ba2;
  #L435b94.  v0:= v2.`r3.n.q` @type ^`byte`[] @kind object;
  #L435b98.  v1:= 0I;
  #L435b9a.  v0:= v0[v1] @kind byte;
  #L435b9e.  v1:= v0 ^& 255;
  #L435ba2.  return v1;
}
procedure `int` `read`(`r3.n` v2 @kind this, `byte`[] v3 @kind object) @signature `Lr3/n;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L435bb4.  v0:= length @variable v3;
  #L435bb6.  v1:= 0I;
  #L435bb8.  call temp:= `read`(v2, v3, v1, v0) @signature `Lr3/n;.read:([BII)I` @kind virtual;
  #L435bbe.  v3:= temp;
  #L435bc0.  return v3;
}
procedure `int` `read`(`r3.n` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lr3/n;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L435bd4.  v0:= v2.`r3.n.s` @type ^`boolean` @kind boolean;
  #L435bd8.  v0:= v0 ^~ 1;
  #L435bdc.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L435be2.  call `a`(v2) @signature `Lr3/n;.a:()V` @kind direct;
  #L435be8.  v0:= v2.`r3.n.o` @type ^`r3.l` @kind object;
  #L435bec.  call temp:= `b`(v0, v3, v4, v5) @signature `Lr3/i;.b:([BII)I` @kind interface;
  #L435bf2.  v3:= temp;
  #L435bf4.  v4:= -1I;
  #L435bf6.  if v3 != v4 then goto L435bfc;
  #L435bfa.  return v4;
  #L435bfc.  v4:= v2.`r3.n.t` @type ^`long` @kind wide;
  #L435c00.  v0:= (`long`) v3 @kind i2l;
  #L435c02.  v4:= v4 + v0 @kind long;
  #L435c04.  v2.`r3.n.t` @type ^`long` := v4 @kind wide;
  #L435c08.  return v3;
}
