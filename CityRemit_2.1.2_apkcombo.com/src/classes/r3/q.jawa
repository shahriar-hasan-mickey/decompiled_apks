record `r3.q` @kind class @AccessFlag PUBLIC_FINAL extends `r3.b` @kind interface {
  `boolean` `r3.q.a` @AccessFlag PRIVATE_FINAL;
  `int` `r3.q.b` @AccessFlag PRIVATE_FINAL;
  `byte`[] `r3.q.c` @AccessFlag PRIVATE_FINAL;
  `int` `r3.q.d` @AccessFlag PRIVATE;
  `int` `r3.q.e` @AccessFlag PRIVATE;
  `int` `r3.q.f` @AccessFlag PRIVATE;
  `r3.a`[] `r3.q.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`r3.q` v1 @kind this, `boolean` v2 , `int` v3 ) @signature `Lr3/q;.<init>:(ZI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L436324.  v0:= 0I;
  #L436326.  call `<init>`(v1, v2, v3, v0) @signature `Lr3/q;.<init>:(ZII)V` @kind direct;
  #L43632c.  return @kind void;
}
procedure `void` `<init>`(`r3.q` v4 @kind this, `boolean` v5 , `int` v6 , `int` v7 ) @signature `Lr3/q;.<init>:(ZII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L436340.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L436346.  v0:= 1I;
  #L436348.  v1:= 0I;
  #L43634a.  if v6 <= 0 then goto L436352;
  #L43634e.  v2:= 1I;
  #L436350.  goto L436354;
  #L436352.  v2:= 0I;
  #L436354.  call `a`(v2) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L43635a.  if v7 < 0 then goto L436360;
  #L43635e.  goto L436362;
  #L436360.  v0:= 0I;
  #L436362.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L436368.  v4.`r3.q.a` @type ^`boolean` := v5 @kind boolean;
  #L43636c.  v4.`r3.q.b` @type ^`int` := v6;
  #L436370.  v4.`r3.q.f` @type ^`int` := v7;
  #L436374.  v5:= v7 + 100;
  #L436378.  v5:= new `r3.a`[v5];
  #L43637c.  v4.`r3.q.g` @type ^`r3.a`[] := v5 @kind object;
  #L436380.  if v7 <= 0 then goto L4363b4;
  #L436384.  v5:= v7 * v6 @kind int;
  #L436388.  v5:= new `byte`[v5];
  #L43638c.  v4.`r3.q.c` @type ^`byte`[] := v5 @kind object;
  #L436390.  if v1 >= v7 then goto L4363ba;
  #L436394.  v5:= v1 * v6 @kind int;
  #L436398.  v0:= v4.`r3.q.g` @type ^`r3.a`[] @kind object;
  #L43639c.  v2:= new `r3.a`;
  #L4363a0.  v3:= v4.`r3.q.c` @type ^`byte`[] @kind object;
  #L4363a4.  call `<init>`(v2, v3, v5) @signature `Lr3/a;.<init>:([BI)V` @kind direct;
  #L4363aa.  v0[v1]:= v2 @kind object;
  #L4363ae.  v1:= v1 + 1;
  #L4363b2.  goto L436390;
  #L4363b4.  v5:= 0I;
  #L4363b6.  v4.`r3.q.c` @type ^`byte`[] := v5 @kind object;
  #L4363ba.  return @kind void;
}
procedure `void` `a`(`r3.q` v7 @kind this) @signature `Lr3/q;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4364fc.  @monitorenter v7
  #L4364fe.  v0:= v7.`r3.q.d` @type ^`int`;
  #L436502.  v1:= v7.`r3.q.b` @type ^`int`;
  #L436506.  call temp:= `l`(v0, v1) @signature `Ls3/l0;.l:(II)I` @kind static;
  #L43650c.  v0:= temp;
  #L43650e.  v1:= v7.`r3.q.e` @type ^`int`;
  #L436512.  v0:= v0 - v1 @kind int;
  #L436514.  v1:= 0I;
  #L436516.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L43651c.  v0:= temp;
  #L43651e.  v2:= v7.`r3.q.f` @type ^`int`;
  #L436522.  if v0 < v2 then goto L43652a;
  #L436526.  @monitorexit v7
  #L436528.  return @kind void;
  #L43652a.  v3:= v7.`r3.q.c` @type ^`byte`[] @kind object;
  #L43652e.  if v3 == 0 then goto L4365b4;
  #L436532.  v2:= v2 + -1;
  #L436536.  if v1 > v2 then goto L4365a0;
  #L43653a.  v3:= v7.`r3.q.g` @type ^`r3.a`[] @kind object;
  #L43653e.  v3:= v3[v1] @kind object;
  #L436542.  call temp:= `e`(v3) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L436548.  v3:= temp @kind object;
  #L43654a.  v3:= (`r3.a`) v3 @kind object;
  #L43654e.  v4:= v3.`r3.a.a` @type ^`byte`[] @kind object;
  #L436552.  v5:= v7.`r3.q.c` @type ^`byte`[] @kind object;
  #L436556.  if v4 != v5 then goto L436560;
  #L43655a.  v1:= v1 + 1;
  #L43655e.  goto L436536;
  #L436560.  v4:= v7.`r3.q.g` @type ^`r3.a`[] @kind object;
  #L436564.  v4:= v4[v2] @kind object;
  #L436568.  call temp:= `e`(v4) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L43656e.  v4:= temp @kind object;
  #L436570.  v4:= (`r3.a`) v4 @kind object;
  #L436574.  v5:= v4.`r3.a.a` @type ^`byte`[] @kind object;
  #L436578.  v6:= v7.`r3.q.c` @type ^`byte`[] @kind object;
  #L43657c.  if v5 == v6 then goto L436586;
  #L436580.  v2:= v2 + -1;
  #L436584.  goto L436536;
  #L436586.  v5:= v7.`r3.q.g` @type ^`r3.a`[] @kind object;
  #L43658a.  v6:= v1 + 1;
  #L43658e.  v5[v1]:= v4 @kind object;
  #L436592.  v1:= v2 + -1;
  #L436596.  v5[v2]:= v3 @kind object;
  #L43659a.  v2:= v1;
  #L43659c.  v1:= v6;
  #L43659e.  goto L436536;
  #L4365a0.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4365a6.  v0:= temp;
  #L4365a8.  v1:= v7.`r3.q.f` @type ^`int`;
  #L4365ac.  if v0 < v1 then goto L4365b4;
  #L4365b0.  @monitorexit v7
  #L4365b2.  return @kind void;
  #L4365b4.  v1:= v7.`r3.q.g` @type ^`r3.a`[] @kind object;
  #L4365b8.  v2:= v7.`r3.q.f` @type ^`int`;
  #L4365bc.  v3:= 0I;
  #L4365be.  call `fill`(v1, v0, v2, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L4365c4.  v7.`r3.q.f` @type ^`int` := v0;
  #L4365c8.  @monitorexit v7
  #L4365ca.  return @kind void;
  #L4365cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4365ce.  @monitorexit v7
  #L4365d0.  throw v0;
  catch `java.lang.Throwable` @[L4364fe..L436522] goto L4365cc;
  catch `java.lang.Throwable` @[L43652a..L4365ac] goto L4365cc;
  catch `java.lang.Throwable` @[L4365b4..L4365c8] goto L4365cc;
}
procedure `void` `b`(`r3.q` v3 @kind this, `r3.a` v4 @kind object) @signature `Lr3/q;.b:(Lr3/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4363cc.  @monitorenter v3
  #L4363ce.  v0:= v3.`r3.q.g` @type ^`r3.a`[] @kind object;
  #L4363d2.  v1:= v3.`r3.q.f` @type ^`int`;
  #L4363d6.  v2:= v1 + 1;
  #L4363da.  v3.`r3.q.f` @type ^`int` := v2;
  #L4363de.  v0[v1]:= v4 @kind object;
  #L4363e2.  v4:= v3.`r3.q.e` @type ^`int`;
  #L4363e6.  v4:= v4 + -1;
  #L4363ea.  v3.`r3.q.e` @type ^`int` := v4;
  #L4363ee.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L4363f4.  @monitorexit v3
  #L4363f6.  return @kind void;
  #L4363f8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4363fa.  @monitorexit v3
  #L4363fc.  throw v4;
  catch `java.lang.Throwable` @[L4363ce..L4363f4] goto L4363f8;
}
procedure `void` `c`(`r3.q` v3 @kind this, `r3.b$a` v4 @kind object) @signature `Lr3/q;.c:(Lr3/b$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43641c.  @monitorenter v3
  #L43641e.  if v4 == 0 then goto L436454;
  #L436422.  v0:= v3.`r3.q.g` @type ^`r3.a`[] @kind object;
  #L436426.  v1:= v3.`r3.q.f` @type ^`int`;
  #L43642a.  v2:= v1 + 1;
  #L43642e.  v3.`r3.q.f` @type ^`int` := v2;
  #L436432.  call temp:= `a`(v4) @signature `Lr3/b$a;.a:()Lr3/a;` @kind interface;
  #L436438.  v2:= temp @kind object;
  #L43643a.  v0[v1]:= v2 @kind object;
  #L43643e.  v0:= v3.`r3.q.e` @type ^`int`;
  #L436442.  v0:= v0 + -1;
  #L436446.  v3.`r3.q.e` @type ^`int` := v0;
  #L43644a.  call temp:= `next`(v4) @signature `Lr3/b$a;.next:()Lr3/b$a;` @kind interface;
  #L436450.  v4:= temp @kind object;
  #L436452.  goto L43641e;
  #L436454.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L43645a.  @monitorexit v3
  #L43645c.  return @kind void;
  #L43645e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436460.  @monitorexit v3
  #L436462.  throw v4;
  catch `java.lang.Throwable` @[L436422..L43645a] goto L43645e;
}
procedure `r3.a` `d`(`r3.q` v4 @kind this) @signature `Lr3/q;.d:()Lr3/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L436284.  @monitorenter v4
  #L436286.  v0:= v4.`r3.q.e` @type ^`int`;
  #L43628a.  v0:= v0 + 1;
  #L43628e.  v4.`r3.q.e` @type ^`int` := v0;
  #L436292.  v0:= v4.`r3.q.f` @type ^`int`;
  #L436296.  if v0 <= 0 then goto L4362c6;
  #L43629a.  v1:= v4.`r3.q.g` @type ^`r3.a`[] @kind object;
  #L43629e.  v0:= v0 + -1;
  #L4362a2.  v4.`r3.q.f` @type ^`int` := v0;
  #L4362a6.  v0:= v1[v0] @kind object;
  #L4362aa.  call temp:= `e`(v0) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4362b0.  v0:= temp @kind object;
  #L4362b2.  v0:= (`r3.a`) v0 @kind object;
  #L4362b6.  v1:= v4.`r3.q.g` @type ^`r3.a`[] @kind object;
  #L4362ba.  v2:= v4.`r3.q.f` @type ^`int`;
  #L4362be.  v3:= 0I;
  #L4362c0.  v1[v2]:= v3 @kind object;
  #L4362c4.  goto L4362fe;
  #L4362c6.  v0:= new `r3.a`;
  #L4362ca.  v1:= v4.`r3.q.b` @type ^`int`;
  #L4362ce.  v1:= new `byte`[v1];
  #L4362d2.  v2:= 0I;
  #L4362d4.  call `<init>`(v0, v1, v2) @signature `Lr3/a;.<init>:([BI)V` @kind direct;
  #L4362da.  v1:= v4.`r3.q.e` @type ^`int`;
  #L4362de.  v2:= v4.`r3.q.g` @type ^`r3.a`[] @kind object;
  #L4362e2.  v3:= length @variable v2;
  #L4362e4.  if v1 <= v3 then goto L4362fe;
  #L4362e8.  v1:= length @variable v2;
  #L4362ea.  v1:= v1 * 2;
  #L4362ee.  call temp:= `copyOf`(v2, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L4362f4.  v1:= temp @kind object;
  #L4362f6.  v1:= (`r3.a`[]) v1 @kind object;
  #L4362fa.  v4.`r3.q.g` @type ^`r3.a`[] := v1 @kind object;
  #L4362fe.  @monitorexit v4
  #L436300.  return v0 @kind object;
  #L436302.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436304.  @monitorexit v4
  #L436306.  throw v0;
  catch `java.lang.Throwable` @[L436286..L4362fe] goto L436302;
}
procedure `int` `e`(`r3.q` v1 @kind this) @signature `Lr3/q;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436238.  v0:= v1.`r3.q.b` @type ^`int`;
  #L43623c.  return v0;
}
procedure `int` `f`(`r3.q` v2 @kind this) @signature `Lr3/q;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L436250.  @monitorenter v2
  #L436252.  v0:= v2.`r3.q.e` @type ^`int`;
  #L436256.  v1:= v2.`r3.q.b` @type ^`int`;
  #L43625a.  v0:= v0 * v1 @kind int;
  #L43625e.  @monitorexit v2
  #L436260.  return v0;
  #L436262.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436264.  @monitorexit v2
  #L436266.  throw v0;
  catch `java.lang.Throwable` @[L436252..L43625a] goto L436262;
}
procedure `void` `g`(`r3.q` v1 @kind this) @signature `Lr3/q;.g:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436480.  @monitorenter v1
  #L436482.  v0:= v1.`r3.q.a` @type ^`boolean` @kind boolean;
  #L436486.  if v0 == 0 then goto L436492;
  #L43648a.  v0:= 0I;
  #L43648c.  call `h`(v1, v0) @signature `Lr3/q;.h:(I)V` @kind virtual;
  #L436492.  @monitorexit v1
  #L436494.  return @kind void;
  #L436496.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436498.  @monitorexit v1
  #L43649a.  throw v0;
  catch `java.lang.Throwable` @[L436482..L436492] goto L436496;
}
procedure `void` `h`(`r3.q` v1 @kind this, `int` v2 ) @signature `Lr3/q;.h:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4364b8.  @monitorenter v1
  #L4364ba.  v0:= v1.`r3.q.d` @type ^`int`;
  #L4364be.  if v2 >= v0 then goto L4364c6;
  #L4364c2.  v0:= 1I;
  #L4364c4.  goto L4364c8;
  #L4364c6.  v0:= 0I;
  #L4364c8.  v1.`r3.q.d` @type ^`int` := v2;
  #L4364cc.  if v0 == 0 then goto L4364d6;
  #L4364d0.  call `a`(v1) @signature `Lr3/q;.a:()V` @kind virtual;
  #L4364d6.  @monitorexit v1
  #L4364d8.  return @kind void;
  #L4364da.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4364dc.  @monitorexit v1
  #L4364de.  throw v2;
  catch `java.lang.Throwable` @[L4364ba..L4364d6] goto L4364da;
}
