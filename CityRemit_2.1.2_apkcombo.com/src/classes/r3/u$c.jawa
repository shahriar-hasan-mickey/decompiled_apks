record `r3.u$c` @kind class @AccessFlag  extends `m5.l` @kind class {
  `java.util.Map` `r3.u$c.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`r3.u$c` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lr3/u$c;.<init>:(Ljava/util/Map;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43b52c.  call `<init>`(v0) @signature `Lm5/l;.<init>:()V` @kind direct;
  #L43b532.  v0.`r3.u$c.o` @type ^`java.util.Map` := v1 @kind object;
  #L43b536.  return @kind void;
}
procedure `boolean` `f`(`java.util.Map$Entry` v0 @kind object) @signature `Lr3/u$c;.f:(Ljava/util/Map$Entry;)Z` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L43b2fc.  call temp:= `i`(v0) @signature `Lr3/u$c;.i:(Ljava/util/Map$Entry;)Z` @kind static;
  #L43b302.  v0:= temp;
  #L43b304.  return v0;
}
procedure `boolean` `g`(`java.lang.String` v0 @kind object) @signature `Lr3/u$c;.g:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L43b318.  call temp:= `j`(v0) @signature `Lr3/u$c;.j:(Ljava/lang/String;)Z` @kind static;
  #L43b31e.  v0:= temp;
  #L43b320.  return v0;
}
procedure `boolean` `i`(`java.util.Map$Entry` v0 @kind object) @signature `Lr3/u$c;.i:(Ljava/util/Map$Entry;)Z` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L43b3e0.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L43b3e6.  v0:= temp @kind object;
  #L43b3e8.  if v0 == 0 then goto L43b3f0;
  #L43b3ec.  v0:= 1I;
  #L43b3ee.  goto L43b3f2;
  #L43b3f0.  v0:= 0I;
  #L43b3f2.  return v0;
}
procedure `boolean` `j`(`java.lang.String` v0 @kind object) @signature `Lr3/u$c;.j:(Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L43b404.  if v0 == 0 then goto L43b40c;
  #L43b408.  v0:= 1I;
  #L43b40a.  goto L43b40e;
  #L43b40c.  v0:= 0I;
  #L43b40e.  return v0;
}
procedure `java.lang.Object` `a`(`r3.u$c` v1 @kind this) @signature `Lr3/u$c;.a:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L43b464.  call temp:= `b`(v1) @signature `Lr3/u$c;.b:()Ljava/util/Map;` @kind virtual;
  #L43b46a.  v0:= temp @kind object;
  #L43b46c.  return v0 @kind object;
}
procedure `java.util.Map` `b`(`r3.u$c` v1 @kind this) @signature `Lr3/u$c;.b:()Ljava/util/Map;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L43b4c4.  v0:= v1.`r3.u$c.o` @type ^`java.util.Map` @kind object;
  #L43b4c8.  return v0 @kind object;
}
procedure `boolean` `containsKey`(`r3.u$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lr3/u$c;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L43b334.  if v1 == 0 then goto L43b348;
  #L43b338.  call temp:= `containsKey`(v0, v1) @signature `Lm5/l;.containsKey:(Ljava/lang/Object;)Z` @kind super;
  #L43b33e.  v1:= temp;
  #L43b340.  if v1 == 0 then goto L43b348;
  #L43b344.  v1:= 1I;
  #L43b346.  goto L43b34a;
  #L43b348.  v1:= 0I;
  #L43b34a.  return v1;
}
procedure `boolean` `containsValue`(`r3.u$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lr3/u$c;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L43b35c.  call temp:= `c`(v0, v1) @signature `Lm5/l;.c:(Ljava/lang/Object;)Z` @kind super;
  #L43b362.  v1:= temp;
  #L43b364.  return v1;
}
procedure `java.util.Set` `entrySet`(`r3.u$c` v2 @kind this) @signature `Lr3/u$c;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b4dc.  call temp:= `entrySet`(v2) @signature `Lm5/l;.entrySet:()Ljava/util/Set;` @kind super;
  #L43b4e2.  v0:= temp @kind object;
  #L43b4e4.  v1:= `@@r3.w.o` @type ^`r3.w` @kind object;
  #L43b4e8.  call temp:= `b`(v0, v1) @signature `Lm5/p0;.b:(Ljava/util/Set;Ll5/k;)Ljava/util/Set;` @kind static;
  #L43b4ee.  v0:= temp @kind object;
  #L43b4f0.  return v0 @kind object;
}
procedure `boolean` `equals`(`r3.u$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lr3/u$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L43b378.  if v1 == 0 then goto L43b38c;
  #L43b37c.  call temp:= `d`(v0, v1) @signature `Lm5/l;.d:(Ljava/lang/Object;)Z` @kind super;
  #L43b382.  v1:= temp;
  #L43b384.  if v1 == 0 then goto L43b38c;
  #L43b388.  v1:= 1I;
  #L43b38a.  goto L43b38e;
  #L43b38c.  v1:= 0I;
  #L43b38e.  return v1;
}
procedure `java.lang.Object` `get`(`r3.u$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lr3/u$c;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43b480.  call temp:= `h`(v0, v1) @signature `Lr3/u$c;.h:(Ljava/lang/Object;)Ljava/util/List;` @kind virtual;
  #L43b486.  v1:= temp @kind object;
  #L43b488.  return v1 @kind object;
}
procedure `java.util.List` `h`(`r3.u$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lr3/u$c;.h:(Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;

  #L43b49c.  if v1 != 0 then goto L43b4a4;
  #L43b4a0.  v1:= 0I;
  #L43b4a2.  goto L43b4b0;
  #L43b4a4.  call temp:= `get`(v0, v1) @signature `Lm5/l;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L43b4aa.  v1:= temp @kind object;
  #L43b4ac.  v1:= (`java.util.List`) v1 @kind object;
  #L43b4b0.  return v1 @kind object;
}
procedure `int` `hashCode`(`r3.u$c` v1 @kind this) @signature `Lr3/u$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b420.  call temp:= `e`(v1) @signature `Lm5/l;.e:()I` @kind super;
  #L43b426.  v0:= temp;
  #L43b428.  return v0;
}
procedure `boolean` `isEmpty`(`r3.u$c` v2 @kind this) @signature `Lr3/u$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b3a0.  call temp:= `isEmpty`(v2) @signature `Lm5/l;.isEmpty:()Z` @kind super;
  #L43b3a6.  v0:= temp;
  #L43b3a8.  v1:= 1I;
  #L43b3aa.  if v0 != 0 then goto L43b3cc;
  #L43b3ae.  call temp:= `size`(v2) @signature `Lm5/l;.size:()I` @kind super;
  #L43b3b4.  v0:= temp;
  #L43b3b6.  if v0 != v1 then goto L43b3ca;
  #L43b3ba.  v0:= 0I;
  #L43b3bc.  call temp:= `containsKey`(v2, v0) @signature `Lm5/l;.containsKey:(Ljava/lang/Object;)Z` @kind super;
  #L43b3c2.  v0:= temp;
  #L43b3c4.  if v0 == 0 then goto L43b3ca;
  #L43b3c8.  goto L43b3cc;
  #L43b3ca.  v1:= 0I;
  #L43b3cc.  return v1;
}
procedure `java.util.Set` `keySet`(`r3.u$c` v2 @kind this) @signature `Lr3/u$c;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b504.  call temp:= `keySet`(v2) @signature `Lm5/l;.keySet:()Ljava/util/Set;` @kind super;
  #L43b50a.  v0:= temp @kind object;
  #L43b50c.  v1:= `@@r3.v.o` @type ^`r3.v` @kind object;
  #L43b510.  call temp:= `b`(v0, v1) @signature `Lm5/p0;.b:(Ljava/util/Set;Ll5/k;)Ljava/util/Set;` @kind static;
  #L43b516.  v0:= temp @kind object;
  #L43b518.  return v0 @kind object;
}
procedure `int` `size`(`r3.u$c` v2 @kind this) @signature `Lr3/u$c;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b43c.  call temp:= `size`(v2) @signature `Lm5/l;.size:()I` @kind super;
  #L43b442.  v0:= temp;
  #L43b444.  v1:= 0I;
  #L43b446.  call temp:= `containsKey`(v2, v1) @signature `Lm5/l;.containsKey:(Ljava/lang/Object;)Z` @kind super;
  #L43b44c.  v1:= temp;
  #L43b44e.  v0:= v0 - v1 @kind int;
  #L43b450.  return v0;
}
