record `l2.b` @kind class @AccessFlag PUBLIC_FINAL extends `a2.l` @kind interface {
  `a2.n` `l2.b.a` @AccessFlag PRIVATE;
  `a2.d0` `l2.b.b` @AccessFlag PRIVATE;
  `int` `l2.b.c` @AccessFlag PRIVATE;
  `long` `l2.b.d` @AccessFlag PRIVATE;
  `l2.b$b` `l2.b.e` @AccessFlag PRIVATE;
  `int` `l2.b.f` @AccessFlag PRIVATE;
  `long` `l2.b.g` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Ll2/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3c1cd8.  v0:= `@@l2.a.b` @type ^`l2.a` @kind object;
  #L3c1cdc.  return @kind void;
}
procedure `void` `<init>`(`l2.b` v3 @kind this) @signature `Ll2/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3c1cf0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c1cf6.  v0:= 0I;
  #L3c1cf8.  v3.`l2.b.c` @type ^`int` := v0;
  #L3c1cfc.  v0:= -1L;
  #L3c1d00.  v3.`l2.b.d` @type ^`long` := v0 @kind wide;
  #L3c1d04.  v2:= -1I;
  #L3c1d06.  v3.`l2.b.f` @type ^`int` := v2;
  #L3c1d0a.  v3.`l2.b.g` @type ^`long` := v0 @kind wide;
  #L3c1d0e.  return @kind void;
}
procedure `a2.l`[] `c`() @signature `Ll2/b;.c:()[La2/l;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;

  #L3c1bac.  call temp:= `f`() @signature `Ll2/b;.f:()[La2/l;` @kind static;
  #L3c1bb2.  v0:= temp @kind object;
  #L3c1bb4.  return v0 @kind object;
}
procedure `void` `e`(`l2.b` v1 @kind this) @signature `Ll2/b;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3c1d20.  v0:= v1.`l2.b.b` @type ^`a2.d0` @kind object;
  #L3c1d24.  call temp:= `h`(v0) @signature `Ls3/a;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3c1d2a.  v0:= v1.`l2.b.a` @type ^`a2.n` @kind object;
  #L3c1d2e.  call temp:= `j`(v0) @signature `Ls3/l0;.j:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3c1d34.  return @kind void;
}
procedure `a2.l`[] `f`() @signature `Ll2/b;.f:()[La2/l;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L3c1bc8.  v0:= 1I;
  #L3c1bca.  v0:= new `a2.l`[v0];
  #L3c1bce.  v1:= new `l2.b`;
  #L3c1bd2.  call `<init>`(v1) @signature `Ll2/b;.<init>:()V` @kind direct;
  #L3c1bd8.  v2:= 0I;
  #L3c1bda.  v0[v2]:= v1 @kind object;
  #L3c1bde.  return v0 @kind object;
}
procedure `void` `h`(`l2.b` v6 @kind this, `a2.m` v7 @kind object) @signature `Ll2/b;.h:(La2/m;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3c1d74.  call temp:= `q`(v7) @signature `La2/m;.q:()J` @kind interface;
  #L3c1d7a.  v0:= temp @kind wide;
  #L3c1d7c.  v2:= 1I;
  #L3c1d7e.  v3:= 0L;
  #L3c1d82.  v5:= lcmp(v0, v3);
  #L3c1d86.  if v5 != 0 then goto L3c1d8e;
  #L3c1d8a.  v0:= 1I;
  #L3c1d8c.  goto L3c1d90;
  #L3c1d8e.  v0:= 0I;
  #L3c1d90.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L3c1d96.  v0:= v6.`l2.b.f` @type ^`int`;
  #L3c1d9a.  v1:= -1I;
  #L3c1d9c.  if v0 == v1 then goto L3c1dae;
  #L3c1da0.  call `j`(v7, v0) @signature `La2/m;.j:(I)V` @kind interface;
  #L3c1da6.  v7:= 4I;
  #L3c1da8.  v6.`l2.b.c` @type ^`int` := v7;
  #L3c1dac.  return @kind void;
  #L3c1dae.  call temp:= `a`(v7) @signature `Ll2/d;.a:(La2/m;)Z` @kind static;
  #L3c1db4.  v0:= temp;
  #L3c1db6.  if v0 == 0 then goto L3c1dda;
  #L3c1dba.  call temp:= `n`(v7) @signature `La2/m;.n:()J` @kind interface;
  #L3c1dc0.  v0:= temp @kind wide;
  #L3c1dc2.  call temp:= `q`(v7) @signature `La2/m;.q:()J` @kind interface;
  #L3c1dc8.  v3:= temp @kind wide;
  #L3c1dca.  v0:= v0 - v3 @kind long;
  #L3c1dcc.  v1:= (`int`) v0 @kind l2i;
  #L3c1dce.  call `j`(v7, v1) @signature `La2/m;.j:(I)V` @kind interface;
  #L3c1dd4.  v6.`l2.b.c` @type ^`int` := v2;
  #L3c1dd8.  return @kind void;
  #L3c1dda.  v7:= 0I;
  #L3c1ddc.  v0:= "Unsupported or unrecognized wav file type." @kind object;
  #L3c1de0.  call temp:= `a`(v0, v7) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L3c1de6.  v7:= temp @kind object;
  #L3c1de8.  throw v7;
}
procedure `void` `i`(`l2.b` v6 @kind this, `a2.m` v7 @kind object) @signature `Ll2/b;.i:(La2/m;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3c1dfc.  call temp:= `b`(v7) @signature `Ll2/d;.b:(La2/m;)Ll2/c;` @kind static;
  #L3c1e02.  v3:= temp @kind object;
  #L3c1e04.  v7:= v3.`l2.c.a` @type ^`int`;
  #L3c1e08.  v0:= 17I;
  #L3c1e0c.  if v7 != v0 then goto L3c1e28;
  #L3c1e10.  v7:= new `l2.b$a`;
  #L3c1e14.  v0:= v6.`l2.b.a` @type ^`a2.n` @kind object;
  #L3c1e18.  v1:= v6.`l2.b.b` @type ^`a2.d0` @kind object;
  #L3c1e1c.  call `<init>`(v7, v0, v1, v3) @signature `Ll2/b$a;.<init>:(La2/n;La2/d0;Ll2/c;)V` @kind direct;
  #L3c1e22.  v6.`l2.b.e` @type ^`l2.b$b` := v7 @kind object;
  #L3c1e26.  goto L3c1e96;
  #L3c1e28.  v0:= 6I;
  #L3c1e2a.  if v7 != v0 then goto L3c1e4a;
  #L3c1e2e.  v7:= new `l2.b$c`;
  #L3c1e32.  v1:= v6.`l2.b.a` @type ^`a2.n` @kind object;
  #L3c1e36.  v2:= v6.`l2.b.b` @type ^`a2.d0` @kind object;
  #L3c1e3a.  v5:= -1I;
  #L3c1e3c.  v4:= "audio/g711-alaw" @kind object;
  #L3c1e40.  v0:= v7 @kind object;
  #L3c1e42.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Ll2/b$c;.<init>:(La2/n;La2/d0;Ll2/c;Ljava/lang/String;I)V` @kind direct;
  #L3c1e48.  goto L3c1e22;
  #L3c1e4a.  v0:= 7I;
  #L3c1e4c.  if v7 != v0 then goto L3c1e6c;
  #L3c1e50.  v7:= new `l2.b$c`;
  #L3c1e54.  v1:= v6.`l2.b.a` @type ^`a2.n` @kind object;
  #L3c1e58.  v2:= v6.`l2.b.b` @type ^`a2.d0` @kind object;
  #L3c1e5c.  v5:= -1I;
  #L3c1e5e.  v4:= "audio/g711-mlaw" @kind object;
  #L3c1e62.  v0:= v7 @kind object;
  #L3c1e64.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Ll2/b$c;.<init>:(La2/n;La2/d0;Ll2/c;Ljava/lang/String;I)V` @kind direct;
  #L3c1e6a.  goto L3c1e22;
  #L3c1e6c.  v0:= v3.`l2.c.e` @type ^`int`;
  #L3c1e70.  call temp:= `a`(v7, v0) @signature `Lx1/k0;.a:(II)I` @kind static;
  #L3c1e76.  v5:= temp;
  #L3c1e78.  if v5 == 0 then goto L3c1e9e;
  #L3c1e7c.  v7:= new `l2.b$c`;
  #L3c1e80.  v1:= v6.`l2.b.a` @type ^`a2.n` @kind object;
  #L3c1e84.  v2:= v6.`l2.b.b` @type ^`a2.d0` @kind object;
  #L3c1e88.  v4:= "audio/raw" @kind object;
  #L3c1e8c.  v0:= v7 @kind object;
  #L3c1e8e.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Ll2/b$c;.<init>:(La2/n;La2/d0;Ll2/c;Ljava/lang/String;I)V` @kind direct;
  #L3c1e94.  goto L3c1e22;
  #L3c1e96.  v7:= 3I;
  #L3c1e98.  v6.`l2.b.c` @type ^`int` := v7;
  #L3c1e9c.  return @kind void;
  #L3c1e9e.  v7:= new `java.lang.StringBuilder`;
  #L3c1ea2.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c1ea8.  v0:= "Unsupported WAV format type: " @kind object;
  #L3c1eac.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1eb2.  v0:= v3.`l2.c.a` @type ^`int`;
  #L3c1eb6.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1ebc.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c1ec2.  v7:= temp @kind object;
  #L3c1ec4.  call temp:= `d`(v7) @signature `Lv1/e2;.d:(Ljava/lang/String;)Lv1/e2;` @kind static;
  #L3c1eca.  v7:= temp @kind object;
  #L3c1ecc.  throw v7;
}
procedure `void` `k`(`l2.b` v2 @kind this, `a2.m` v3 @kind object) @signature `Ll2/b;.k:(La2/m;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3c1ee0.  call temp:= `c`(v3) @signature `Ll2/d;.c:(La2/m;)J` @kind static;
  #L3c1ee6.  v0:= temp @kind wide;
  #L3c1ee8.  v2.`l2.b.d` @type ^`long` := v0 @kind wide;
  #L3c1eec.  v3:= 2I;
  #L3c1eee.  v2.`l2.b.c` @type ^`int` := v3;
  #L3c1ef2.  return @kind void;
}
procedure `int` `l`(`l2.b` v6 @kind this, `a2.m` v7 @kind object) @signature `Ll2/b;.l:(La2/m;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3c1c7c.  v0:= v6.`l2.b.g` @type ^`long` @kind wide;
  #L3c1c80.  v2:= 0I;
  #L3c1c82.  v3:= -1L;
  #L3c1c86.  v5:= lcmp(v0, v3);
  #L3c1c8a.  if v5 == 0 then goto L3c1c92;
  #L3c1c8e.  v0:= 1I;
  #L3c1c90.  goto L3c1c94;
  #L3c1c92.  v0:= 0I;
  #L3c1c94.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L3c1c9a.  v0:= v6.`l2.b.g` @type ^`long` @kind wide;
  #L3c1c9e.  call temp:= `q`(v7) @signature `La2/m;.q:()J` @kind interface;
  #L3c1ca4.  v3:= temp @kind wide;
  #L3c1ca6.  v0:= v0 - v3 @kind long;
  #L3c1ca8.  v3:= v6.`l2.b.e` @type ^`l2.b$b` @kind object;
  #L3c1cac.  call temp:= `e`(v3) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3c1cb2.  v3:= temp @kind object;
  #L3c1cb4.  v3:= (`l2.b$b`) v3 @kind object;
  #L3c1cb8.  call temp:= `c`(v3, v7, v0) @signature `Ll2/b$b;.c:(La2/m;J)Z` @kind interface;
  #L3c1cbe.  v7:= temp;
  #L3c1cc0.  if v7 == 0 then goto L3c1cc6;
  #L3c1cc4.  v2:= -1I;
  #L3c1cc6.  return v2;
}
procedure `void` `m`(`l2.b` v9 @kind this, `a2.m` v10 @kind object) @signature `Ll2/b;.m:(La2/m;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3c1f50.  call temp:= `e`(v10) @signature `Ll2/d;.e:(La2/m;)Landroid/util/Pair;` @kind static;
  #L3c1f56.  v0:= temp @kind object;
  #L3c1f58.  v1:= v0.`android.util.Pair.first` @type ^`java.lang.Object` @kind object;
  #L3c1f5c.  v1:= (`java.lang.Long`) v1 @kind object;
  #L3c1f60.  call temp:= `intValue`(v1) @signature `Ljava/lang/Long;.intValue:()I` @kind virtual;
  #L3c1f66.  v1:= temp;
  #L3c1f68.  v9.`l2.b.f` @type ^`int` := v1;
  #L3c1f6c.  v0:= v0.`android.util.Pair.second` @type ^`java.lang.Object` @kind object;
  #L3c1f70.  v0:= (`java.lang.Long`) v0 @kind object;
  #L3c1f74.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L3c1f7a.  v0:= temp @kind wide;
  #L3c1f7c.  v2:= v9.`l2.b.d` @type ^`long` @kind wide;
  #L3c1f80.  v4:= -1L;
  #L3c1f84.  v6:= lcmp(v2, v4);
  #L3c1f88.  if v6 == 0 then goto L3c1fa0;
  #L3c1f8c.  v6:= 4294967295L;
  #L3c1f96.  v8:= lcmp(v0, v6);
  #L3c1f9a.  if v8 != 0 then goto L3c1fa0;
  #L3c1f9e.  v0:= v2 @kind wide;
  #L3c1fa0.  v2:= v9.`l2.b.f` @type ^`int`;
  #L3c1fa4.  v2:= (`long`) v2 @kind i2l;
  #L3c1fa6.  v2:= v2 + v0 @kind long;
  #L3c1fa8.  v9.`l2.b.g` @type ^`long` := v2 @kind wide;
  #L3c1fac.  call temp:= `a`(v10) @signature `La2/m;.a:()J` @kind interface;
  #L3c1fb2.  v0:= temp @kind wide;
  #L3c1fb4.  v10:= lcmp(v0, v4);
  #L3c1fb8.  if v10 == 0 then goto L3c200c;
  #L3c1fbc.  v2:= v9.`l2.b.g` @type ^`long` @kind wide;
  #L3c1fc0.  v10:= lcmp(v2, v0);
  #L3c1fc4.  if v10 <= 0 then goto L3c200c;
  #L3c1fc8.  v10:= new `java.lang.StringBuilder`;
  #L3c1fcc.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c1fd2.  v2:= "Data exceeds input length: " @kind object;
  #L3c1fd6.  call temp:= `append`(v10, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1fdc.  v2:= v9.`l2.b.g` @type ^`long` @kind wide;
  #L3c1fe0.  call temp:= `append`(v10, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1fe6.  v2:= ", " @kind object;
  #L3c1fea.  call temp:= `append`(v10, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1ff0.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1ff6.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c1ffc.  v10:= temp @kind object;
  #L3c1ffe.  v2:= "WavExtractor" @kind object;
  #L3c2002.  call `h`(v2, v10) @signature `Ls3/q;.h:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L3c2008.  v9.`l2.b.g` @type ^`long` := v0 @kind wide;
  #L3c200c.  v10:= v9.`l2.b.e` @type ^`l2.b$b` @kind object;
  #L3c2010.  call temp:= `e`(v10) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3c2016.  v10:= temp @kind object;
  #L3c2018.  v10:= (`l2.b$b`) v10 @kind object;
  #L3c201c.  v0:= v9.`l2.b.f` @type ^`int`;
  #L3c2020.  v1:= v9.`l2.b.g` @type ^`long` @kind wide;
  #L3c2024.  call `a`(v10, v0, v1) @signature `Ll2/b$b;.a:(IJ)V` @kind interface;
  #L3c202a.  v10:= 4I;
  #L3c202c.  v9.`l2.b.c` @type ^`int` := v10;
  #L3c2030.  return @kind void;
}
procedure `void` `a`(`l2.b` v0 @kind this) @signature `Ll2/b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L3c1f04.  return @kind void;
}
procedure `void` `b`(`l2.b` v3 @kind this, `long` v4 , `long` v6 ) @signature `Ll2/b;.b:(JJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3c1f18.  v0:= 0L;
  #L3c1f1c.  v2:= lcmp(v4, v0);
  #L3c1f20.  if v2 != 0 then goto L3c1f28;
  #L3c1f24.  v4:= 0I;
  #L3c1f26.  goto L3c1f2a;
  #L3c1f28.  v4:= 4I;
  #L3c1f2a.  v3.`l2.b.c` @type ^`int` := v4;
  #L3c1f2e.  v4:= v3.`l2.b.e` @type ^`l2.b$b` @kind object;
  #L3c1f32.  if v4 == 0 then goto L3c1f3c;
  #L3c1f36.  call `b`(v4, v6) @signature `Ll2/b$b;.b:(J)V` @kind interface;
  #L3c1f3c.  return @kind void;
}
procedure `void` `d`(`l2.b` v2 @kind this, `a2.n` v3 @kind object) @signature `Ll2/b;.d:(La2/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c1d48.  v2.`l2.b.a` @type ^`a2.n` := v3 @kind object;
  #L3c1d4c.  v0:= 0I;
  #L3c1d4e.  v1:= 1I;
  #L3c1d50.  call temp:= `e`(v3, v0, v1) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L3c1d56.  v0:= temp @kind object;
  #L3c1d58.  v2.`l2.b.b` @type ^`a2.d0` := v0 @kind object;
  #L3c1d5c.  call `h`(v3) @signature `La2/n;.h:()V` @kind interface;
  #L3c1d62.  return @kind void;
}
procedure `boolean` `g`(`l2.b` v0 @kind this, `a2.m` v1 @kind object) @signature `Ll2/b;.g:(La2/m;)Z` @AccessFlag PUBLIC {
    temp;

  #L3c1bf0.  call temp:= `a`(v1) @signature `Ll2/d;.a:(La2/m;)Z` @kind static;
  #L3c1bf6.  v1:= temp;
  #L3c1bf8.  return v1;
}
procedure `int` `j`(`l2.b` v2 @kind this, `a2.m` v3 @kind object, `a2.z` v4 @kind object) @signature `Ll2/b;.j:(La2/m;La2/z;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c1c0c.  call `e`(v2) @signature `Ll2/b;.e:()V` @kind direct;
  #L3c1c12.  v4:= v2.`l2.b.c` @type ^`int`;
  #L3c1c16.  v0:= 0I;
  #L3c1c18.  if v4 == 0 then goto L3c1c62;
  #L3c1c1c.  v1:= 1I;
  #L3c1c1e.  if v4 == v1 then goto L3c1c5a;
  #L3c1c22.  v1:= 2I;
  #L3c1c24.  if v4 == v1 then goto L3c1c52;
  #L3c1c28.  v1:= 3I;
  #L3c1c2a.  if v4 == v1 then goto L3c1c4a;
  #L3c1c2e.  v0:= 4I;
  #L3c1c30.  if v4 != v0 then goto L3c1c3e;
  #L3c1c34.  call temp:= `l`(v2, v3) @signature `Ll2/b;.l:(La2/m;)I` @kind direct;
  #L3c1c3a.  v3:= temp;
  #L3c1c3c.  return v3;
  #L3c1c3e.  v3:= new `java.lang.IllegalStateException`;
  #L3c1c42.  call `<init>`(v3) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3c1c48.  throw v3;
  #L3c1c4a.  call `m`(v2, v3) @signature `Ll2/b;.m:(La2/m;)V` @kind direct;
  #L3c1c50.  return v0;
  #L3c1c52.  call `i`(v2, v3) @signature `Ll2/b;.i:(La2/m;)V` @kind direct;
  #L3c1c58.  return v0;
  #L3c1c5a.  call `k`(v2, v3) @signature `Ll2/b;.k:(La2/m;)V` @kind direct;
  #L3c1c60.  return v0;
  #L3c1c62.  call `h`(v2, v3) @signature `Ll2/b;.h:(La2/m;)V` @kind direct;
  #L3c1c68.  return v0;
}
