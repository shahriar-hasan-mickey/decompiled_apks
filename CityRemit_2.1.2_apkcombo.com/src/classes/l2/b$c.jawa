record `l2.b$c` @kind class @AccessFlag FINAL extends `l2.b$b` @kind interface {
  `a2.n` `l2.b$c.a` @AccessFlag PRIVATE_FINAL;
  `a2.d0` `l2.b$c.b` @AccessFlag PRIVATE_FINAL;
  `l2.c` `l2.b$c.c` @AccessFlag PRIVATE_FINAL;
  `v1.j1` `l2.b$c.d` @AccessFlag PRIVATE_FINAL;
  `int` `l2.b$c.e` @AccessFlag PRIVATE_FINAL;
  `long` `l2.b$c.f` @AccessFlag PRIVATE;
  `int` `l2.b$c.g` @AccessFlag PRIVATE;
  `long` `l2.b$c.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`l2.b$c` v1 @kind this, `a2.n` v2 @kind object, `a2.d0` v3 @kind object, `l2.c` v4 @kind object, `java.lang.String` v5 @kind object, `int` v6 ) @signature `Ll2/b$c;.<init>:(La2/n;La2/d0;Ll2/c;Ljava/lang/String;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3c1a54.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c1a5a.  v1.`l2.b$c.a` @type ^`a2.n` := v2 @kind object;
  #L3c1a5e.  v1.`l2.b$c.b` @type ^`a2.d0` := v3 @kind object;
  #L3c1a62.  v1.`l2.b$c.c` @type ^`l2.c` := v4 @kind object;
  #L3c1a66.  v2:= v4.`l2.c.b` @type ^`int`;
  #L3c1a6a.  v3:= v4.`l2.c.e` @type ^`int`;
  #L3c1a6e.  v2:= v2 * v3 @kind int;
  #L3c1a72.  v2:= v2 / 8;
  #L3c1a76.  v3:= v4.`l2.c.d` @type ^`int`;
  #L3c1a7a.  if v3 != v2 then goto L3c1af6;
  #L3c1a7e.  v3:= v4.`l2.c.c` @type ^`int`;
  #L3c1a82.  v0:= v3 * v2 @kind int;
  #L3c1a86.  v0:= v0 * 8;
  #L3c1a8a.  v3:= v3 * v2 @kind int;
  #L3c1a8e.  v3:= v3 / 10;
  #L3c1a92.  call temp:= `max`(v2, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3c1a98.  v2:= temp;
  #L3c1a9a.  v1.`l2.b$c.e` @type ^`int` := v2;
  #L3c1a9e.  v3:= new `v1.j1$b`;
  #L3c1aa2.  call `<init>`(v3) @signature `Lv1/j1$b;.<init>:()V` @kind direct;
  #L3c1aa8.  call temp:= `e0`(v3, v5) @signature `Lv1/j1$b;.e0:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3c1aae.  v3:= temp @kind object;
  #L3c1ab0.  call temp:= `G`(v3, v0) @signature `Lv1/j1$b;.G:(I)Lv1/j1$b;` @kind virtual;
  #L3c1ab6.  v3:= temp @kind object;
  #L3c1ab8.  call temp:= `Z`(v3, v0) @signature `Lv1/j1$b;.Z:(I)Lv1/j1$b;` @kind virtual;
  #L3c1abe.  v3:= temp @kind object;
  #L3c1ac0.  call temp:= `W`(v3, v2) @signature `Lv1/j1$b;.W:(I)Lv1/j1$b;` @kind virtual;
  #L3c1ac6.  v2:= temp @kind object;
  #L3c1ac8.  v3:= v4.`l2.c.b` @type ^`int`;
  #L3c1acc.  call temp:= `H`(v2, v3) @signature `Lv1/j1$b;.H:(I)Lv1/j1$b;` @kind virtual;
  #L3c1ad2.  v2:= temp @kind object;
  #L3c1ad4.  v3:= v4.`l2.c.c` @type ^`int`;
  #L3c1ad8.  call temp:= `f0`(v2, v3) @signature `Lv1/j1$b;.f0:(I)Lv1/j1$b;` @kind virtual;
  #L3c1ade.  v2:= temp @kind object;
  #L3c1ae0.  call temp:= `Y`(v2, v6) @signature `Lv1/j1$b;.Y:(I)Lv1/j1$b;` @kind virtual;
  #L3c1ae6.  v2:= temp @kind object;
  #L3c1ae8.  call temp:= `E`(v2) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L3c1aee.  v2:= temp @kind object;
  #L3c1af0.  v1.`l2.b$c.d` @type ^`v1.j1` := v2 @kind object;
  #L3c1af4.  return @kind void;
  #L3c1af6.  v3:= new `java.lang.StringBuilder`;
  #L3c1afa.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c1b00.  v5:= "Expected block size: " @kind object;
  #L3c1b04.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1b0a.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1b10.  v2:= "; got: " @kind object;
  #L3c1b14.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1b1a.  v2:= v4.`l2.c.d` @type ^`int`;
  #L3c1b1e.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1b24.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c1b2a.  v2:= temp @kind object;
  #L3c1b2c.  v3:= 0I;
  #L3c1b2e.  call temp:= `a`(v2, v3) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L3c1b34.  v2:= temp @kind object;
  #L3c1b36.  throw v2;
}
procedure `void` `a`(`l2.b$c` v9 @kind this, `int` v10 , `long` v11 ) @signature `Ll2/b$c;.a:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3c1b48.  v0:= v9.`l2.b$c.a` @type ^`a2.n` @kind object;
  #L3c1b4c.  v8:= new `l2.e`;
  #L3c1b50.  v2:= v9.`l2.b$c.c` @type ^`l2.c` @kind object;
  #L3c1b54.  v4:= (`long`) v10 @kind i2l;
  #L3c1b56.  v3:= 1I;
  #L3c1b58.  v1:= v8 @kind object;
  #L3c1b5a.  v6:= v11 @kind wide;
  #L3c1b5c.  call `<init>`(v1, v2, v3, v4, v6) @signature `Ll2/e;.<init>:(Ll2/c;IJJ)V` @kind direct;
  #L3c1b62.  call `m`(v0, v8) @signature `La2/n;.m:(La2/a0;)V` @kind interface;
  #L3c1b68.  v10:= v9.`l2.b$c.b` @type ^`a2.d0` @kind object;
  #L3c1b6c.  v11:= v9.`l2.b$c.d` @type ^`v1.j1` @kind object;
  #L3c1b70.  call `b`(v10, v11) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L3c1b76.  return @kind void;
}
procedure `void` `b`(`l2.b$c` v0 @kind this, `long` v1 ) @signature `Ll2/b$c;.b:(J)V` @AccessFlag PUBLIC {
    temp;

  #L3c1b88.  v0.`l2.b$c.f` @type ^`long` := v1 @kind wide;
  #L3c1b8c.  v1:= 0I;
  #L3c1b8e.  v0.`l2.b$c.g` @type ^`int` := v1;
  #L3c1b92.  v1:= 0L;
  #L3c1b96.  v0.`l2.b$c.h` @type ^`long` := v1 @kind wide;
  #L3c1b9a.  return @kind void;
}
procedure `boolean` `c`(`l2.b$c` v18 @kind this, `a2.m` v19 @kind object, `long` v20 ) @signature `Ll2/b$c;.c:(La2/m;J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L3c1980.  v0:= v18 @kind object;
  #L3c1984.  v1:= v20 @kind wide;
  #L3c1988.  v3:= 1I;
  #L3c198a.  v4:= 0L;
  #L3c198e.  v6:= lcmp(v1, v4);
  #L3c1992.  if v6 <= 0 then goto L3c19da;
  #L3c1996.  v7:= v0.`l2.b$c.g` @type ^`int`;
  #L3c199a.  v8:= v0.`l2.b$c.e` @type ^`int`;
  #L3c199e.  if v7 >= v8 then goto L3c19da;
  #L3c19a2.  v8:= v8 - v7 @kind int;
  #L3c19a4.  v6:= (`long`) v8 @kind i2l;
  #L3c19a6.  call temp:= `min`(v6, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3c19ac.  v6:= temp @kind wide;
  #L3c19ae.  v7:= (`int`) v6 @kind l2i;
  #L3c19b0.  v6:= v0.`l2.b$c.b` @type ^`a2.d0` @kind object;
  #L3c19b4.  v8:= v19 @kind object;
  #L3c19b8.  call temp:= `d`(v6, v8, v7, v3) @signature `La2/d0;.d:(Lr3/i;IZ)I` @kind interface;
  #L3c19be.  v3:= temp;
  #L3c19c0.  v6:= -1I;
  #L3c19c2.  if v3 != v6 then goto L3c19ca;
  #L3c19c6.  v1:= v4 @kind wide;
  #L3c19c8.  goto L3c1988;
  #L3c19ca.  v4:= v0.`l2.b$c.g` @type ^`int`;
  #L3c19ce.  v4:= v4 + v3 @kind int;
  #L3c19d0.  v0.`l2.b$c.g` @type ^`int` := v4;
  #L3c19d4.  v3:= (`long`) v3 @kind i2l;
  #L3c19d6.  v1:= v1 - v3 @kind long;
  #L3c19d8.  goto L3c1988;
  #L3c19da.  v1:= v0.`l2.b$c.c` @type ^`l2.c` @kind object;
  #L3c19de.  v2:= v1.`l2.c.d` @type ^`int`;
  #L3c19e2.  v4:= v0.`l2.b$c.g` @type ^`int`;
  #L3c19e6.  v4:= v4 / v2 @kind int;
  #L3c19e8.  if v4 <= 0 then goto L3c1a3a;
  #L3c19ec.  v7:= v0.`l2.b$c.f` @type ^`long` @kind wide;
  #L3c19f0.  v9:= v0.`l2.b$c.h` @type ^`long` @kind wide;
  #L3c19f4.  v11:= 1000000L;
  #L3c19fa.  v1:= v1.`l2.c.c` @type ^`int`;
  #L3c19fe.  v13:= (`long`) v1 @kind i2l;
  #L3c1a00.  call temp:= `M0`(v9, v11, v13) @signature `Ls3/l0;.M0:(JJJ)J` @kind static;
  #L3c1a06.  v9:= temp @kind wide;
  #L3c1a08.  v12:= v7 + v9 @kind long;
  #L3c1a0c.  v15:= v4 * v2 @kind int;
  #L3c1a10.  v1:= v0.`l2.b$c.g` @type ^`int`;
  #L3c1a14.  v1:= v1 - v15 @kind int;
  #L3c1a16.  v11:= v0.`l2.b$c.b` @type ^`a2.d0` @kind object;
  #L3c1a1a.  v14:= 1I;
  #L3c1a1c.  v17:= 0I;
  #L3c1a20.  v16:= v1;
  #L3c1a24.  call `f`(v11, v12, v14, v15, v16, v17) @signature `La2/d0;.f:(JIIILa2/d0$a;)V` @kind interface;
  #L3c1a2a.  v7:= v0.`l2.b$c.h` @type ^`long` @kind wide;
  #L3c1a2e.  v4:= (`long`) v4 @kind i2l;
  #L3c1a30.  v7:= v7 + v4 @kind long;
  #L3c1a32.  v0.`l2.b$c.h` @type ^`long` := v7 @kind wide;
  #L3c1a36.  v0.`l2.b$c.g` @type ^`int` := v1;
  #L3c1a3a.  if v6 > 0 then goto L3c1a40;
  #L3c1a3e.  goto L3c1a42;
  #L3c1a40.  v3:= 0I;
  #L3c1a42.  return v3;
}
