record `l2.b$a` @kind class @AccessFlag FINAL extends `l2.b$b` @kind interface {
  `a2.n` `l2.b$a.a` @AccessFlag PRIVATE_FINAL;
  `a2.d0` `l2.b$a.b` @AccessFlag PRIVATE_FINAL;
  `l2.c` `l2.b$a.c` @AccessFlag PRIVATE_FINAL;
  `int` `l2.b$a.d` @AccessFlag PRIVATE_FINAL;
  `byte`[] `l2.b$a.e` @AccessFlag PRIVATE_FINAL;
  `s3.z` `l2.b$a.f` @AccessFlag PRIVATE_FINAL;
  `int` `l2.b$a.g` @AccessFlag PRIVATE_FINAL;
  `v1.j1` `l2.b$a.h` @AccessFlag PRIVATE_FINAL;
  `int` `l2.b$a.i` @AccessFlag PRIVATE;
  `long` `l2.b$a.j` @AccessFlag PRIVATE;
  `int` `l2.b$a.k` @AccessFlag PRIVATE;
  `long` `l2.b$a.l` @AccessFlag PRIVATE;
}
global `int`[] `@@l2.b$a.m` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@l2.b$a.n` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ll2/b$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3c13ac.  v0:= 16I;
  #L3c13b0.  v0:= new `int`[v0];
  #L3c13b4.  goto L3c13d4;
  #L3c13ba.  `@@l2.b$a.m` @type ^`int`[] := v0 @kind object;
  #L3c13be.  v0:= 89I;
  #L3c13c2.  v0:= new `int`[v0];
  #L3c13c6.  goto L3c141c;
  #L3c13cc.  `@@l2.b$a.n` @type ^`int`[] := v0 @kind object;
  #L3c13d0.  return @kind void;
  #L3c13d2.  
  #L3c13d4.  v0:= (-1I, -1I, -1I, -1I, 2I, 4I, 6I, 8I, -1I, -1I, -1I, -1I, 2I, 4I, 6I, 8I) @kind object;
  #L3c141b.  goto L3c13ba;
  #L3c141c.  v0:= (7I, 8I, 9I, 10I, 11I, 12I, 13I, 14I, 16I, 17I, 19I, 21I, 23I, 25I, 28I, 31I, 34I, 37I, 41I, 45I, 50I, 55I, 60I, 66I, 73I, 80I, 88I, 97I, 107I, 118I, 130I, 143I, 157I, 173I, 190I, 209I, 230I, 253I, 279I, 307I, 337I, 371I, 408I, 449I, 494I, 544I, 598I, 658I, 724I, 796I, 876I, 963I, 1060I, 1166I, 1282I, 1411I, 1552I, 1707I, 1878I, 2066I, 2272I, 2499I, 2749I, 3024I, 3327I, 3660I, 4026I, 4428I, 4871I, 5358I, 5894I, 6484I, 7132I, 7845I, 8630I, 9493I, 10442I, 11487I, 12635I, 13899I, 15289I, 16818I, 18500I, 20350I, 22385I, 24623I, 27086I, 29794I, 32767I) @kind object;
  #L3c1587.  goto L3c13cc;
}
procedure `void` `<init>`(`l2.b$a` v4 @kind this, `a2.n` v5 @kind object, `a2.d0` v6 @kind object, `l2.c` v7 @kind object) @signature `Ll2/b$a;.<init>:(La2/n;La2/d0;Ll2/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3c1598.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c159e.  v4.`l2.b$a.a` @type ^`a2.n` := v5 @kind object;
  #L3c15a2.  v4.`l2.b$a.b` @type ^`a2.d0` := v6 @kind object;
  #L3c15a6.  v4.`l2.b$a.c` @type ^`l2.c` := v7 @kind object;
  #L3c15aa.  v5:= v7.`l2.c.c` @type ^`int`;
  #L3c15ae.  v5:= v5 / 10;
  #L3c15b2.  v6:= 1I;
  #L3c15b4.  call temp:= `max`(v6, v5) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3c15ba.  v5:= temp;
  #L3c15bc.  v4.`l2.b$a.g` @type ^`int` := v5;
  #L3c15c0.  v0:= new `s3.z`;
  #L3c15c4.  v1:= v7.`l2.c.f` @type ^`byte`[] @kind object;
  #L3c15c8.  call `<init>`(v0, v1) @signature `Ls3/z;.<init>:([B)V` @kind direct;
  #L3c15ce.  call temp:= `u`(v0) @signature `Ls3/z;.u:()I` @kind virtual;
  #L3c15d4.  call temp:= `u`(v0) @signature `Ls3/z;.u:()I` @kind virtual;
  #L3c15da.  v0:= temp;
  #L3c15dc.  v4.`l2.b$a.d` @type ^`int` := v0;
  #L3c15e0.  v1:= v7.`l2.c.b` @type ^`int`;
  #L3c15e4.  v2:= v7.`l2.c.d` @type ^`int`;
  #L3c15e8.  v3:= v1 * 4;
  #L3c15ec.  v2:= v2 - v3 @kind int;
  #L3c15ee.  v2:= v2 * 8;
  #L3c15f2.  v3:= v7.`l2.c.e` @type ^`int`;
  #L3c15f6.  v3:= v3 * v1 @kind int;
  #L3c15fa.  v2:= v2 / v3 @kind int;
  #L3c15fc.  v2:= v2 + v6 @kind int;
  #L3c15fe.  if v0 != v2 then goto L3c16ac;
  #L3c1602.  call temp:= `l`(v5, v0) @signature `Ls3/l0;.l:(II)I` @kind static;
  #L3c1608.  v6:= temp;
  #L3c160a.  v2:= v7.`l2.c.d` @type ^`int`;
  #L3c160e.  v2:= v2 * v6 @kind int;
  #L3c1612.  v2:= new `byte`[v2];
  #L3c1616.  v4.`l2.b$a.e` @type ^`byte`[] := v2 @kind object;
  #L3c161a.  v2:= new `s3.z`;
  #L3c161e.  call temp:= `h`(v0, v1) @signature `Ll2/b$a;.h:(II)I` @kind static;
  #L3c1624.  v3:= temp;
  #L3c1626.  v6:= v6 * v3 @kind int;
  #L3c162a.  call `<init>`(v2, v6) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L3c1630.  v4.`l2.b$a.f` @type ^`s3.z` := v2 @kind object;
  #L3c1634.  v6:= v7.`l2.c.c` @type ^`int`;
  #L3c1638.  v2:= v7.`l2.c.d` @type ^`int`;
  #L3c163c.  v6:= v6 * v2 @kind int;
  #L3c1640.  v6:= v6 * 8;
  #L3c1644.  v6:= v6 / v0 @kind int;
  #L3c1646.  v0:= new `v1.j1$b`;
  #L3c164a.  call `<init>`(v0) @signature `Lv1/j1$b;.<init>:()V` @kind direct;
  #L3c1650.  v2:= "audio/raw" @kind object;
  #L3c1654.  call temp:= `e0`(v0, v2) @signature `Lv1/j1$b;.e0:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3c165a.  v0:= temp @kind object;
  #L3c165c.  call temp:= `G`(v0, v6) @signature `Lv1/j1$b;.G:(I)Lv1/j1$b;` @kind virtual;
  #L3c1662.  v0:= temp @kind object;
  #L3c1664.  call temp:= `Z`(v0, v6) @signature `Lv1/j1$b;.Z:(I)Lv1/j1$b;` @kind virtual;
  #L3c166a.  v6:= temp @kind object;
  #L3c166c.  call temp:= `h`(v5, v1) @signature `Ll2/b$a;.h:(II)I` @kind static;
  #L3c1672.  v5:= temp;
  #L3c1674.  call temp:= `W`(v6, v5) @signature `Lv1/j1$b;.W:(I)Lv1/j1$b;` @kind virtual;
  #L3c167a.  v5:= temp @kind object;
  #L3c167c.  v6:= v7.`l2.c.b` @type ^`int`;
  #L3c1680.  call temp:= `H`(v5, v6) @signature `Lv1/j1$b;.H:(I)Lv1/j1$b;` @kind virtual;
  #L3c1686.  v5:= temp @kind object;
  #L3c1688.  v6:= v7.`l2.c.c` @type ^`int`;
  #L3c168c.  call temp:= `f0`(v5, v6) @signature `Lv1/j1$b;.f0:(I)Lv1/j1$b;` @kind virtual;
  #L3c1692.  v5:= temp @kind object;
  #L3c1694.  v6:= 2I;
  #L3c1696.  call temp:= `Y`(v5, v6) @signature `Lv1/j1$b;.Y:(I)Lv1/j1$b;` @kind virtual;
  #L3c169c.  v5:= temp @kind object;
  #L3c169e.  call temp:= `E`(v5) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L3c16a4.  v5:= temp @kind object;
  #L3c16a6.  v4.`l2.b$a.h` @type ^`v1.j1` := v5 @kind object;
  #L3c16aa.  return @kind void;
  #L3c16ac.  v5:= new `java.lang.StringBuilder`;
  #L3c16b0.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c16b6.  v6:= "Expected frames per block: " @kind object;
  #L3c16ba.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c16c0.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c16c6.  v6:= "; got: " @kind object;
  #L3c16ca.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c16d0.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c16d6.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c16dc.  v5:= temp @kind object;
  #L3c16de.  v6:= 0I;
  #L3c16e0.  call temp:= `a`(v5, v6) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L3c16e6.  v5:= temp @kind object;
  #L3c16e8.  throw v5;
}
procedure `void` `d`(`l2.b$a` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `s3.z` v7 @kind object) @signature `Ll2/b$a;.d:([BILs3/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3c16fc.  v0:= 0I;
  #L3c16fe.  v1:= 0I;
  #L3c1700.  if v1 >= v6 then goto L3c172c;
  #L3c1704.  v2:= 0I;
  #L3c1706.  v3:= v4.`l2.b$a.c` @type ^`l2.c` @kind object;
  #L3c170a.  v3:= v3.`l2.c.b` @type ^`int`;
  #L3c170e.  if v2 >= v3 then goto L3c1726;
  #L3c1712.  call temp:= `d`(v7) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3c1718.  v3:= temp @kind object;
  #L3c171a.  call `e`(v4, v5, v1, v2, v3) @signature `Ll2/b$a;.e:([BII[B)V` @kind direct;
  #L3c1720.  v2:= v2 + 1;
  #L3c1724.  goto L3c1706;
  #L3c1726.  v1:= v1 + 1;
  #L3c172a.  goto L3c1700;
  #L3c172c.  v5:= v4.`l2.b$a.d` @type ^`int`;
  #L3c1730.  v5:= v5 * v6 @kind int;
  #L3c1734.  call temp:= `g`(v4, v5) @signature `Ll2/b$a;.g:(I)I` @kind direct;
  #L3c173a.  v5:= temp;
  #L3c173c.  call `O`(v7, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3c1742.  call `N`(v7, v5) @signature `Ls3/z;.N:(I)V` @kind virtual;
  #L3c1748.  return @kind void;
}
procedure `void` `e`(`l2.b$a` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 , `byte`[] v13 @kind object) @signature `Ll2/b$a;.e:([BII[B)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3c175c.  v0:= v9.`l2.b$a.c` @type ^`l2.c` @kind object;
  #L3c1760.  v1:= v0.`l2.c.d` @type ^`int`;
  #L3c1764.  v0:= v0.`l2.c.b` @type ^`int`;
  #L3c1768.  v2:= v11 * v1 @kind int;
  #L3c176c.  v3:= v12 * 4;
  #L3c1770.  v2:= v2 + v3 @kind int;
  #L3c1772.  v3:= v0 * 4;
  #L3c1776.  v3:= v3 + v2 @kind int;
  #L3c1778.  v1:= v1 / v0 @kind int;
  #L3c177a.  v1:= v1 + -4;
  #L3c177e.  v4:= v2 + 1;
  #L3c1782.  v4:= v10[v4] @kind byte;
  #L3c1786.  v4:= v4 ^& 255;
  #L3c178a.  v4:= v4 ^< 8;
  #L3c178e.  v5:= v10[v2] @kind byte;
  #L3c1792.  v5:= v5 ^& 255;
  #L3c1796.  v4:= v4 ^| v5 @kind int;
  #L3c1798.  v4:= (`short`) v4 @kind i2s;
  #L3c179a.  v2:= v2 + 2;
  #L3c179e.  v2:= v10[v2] @kind byte;
  #L3c17a2.  v2:= v2 ^& 255;
  #L3c17a6.  v5:= 88I;
  #L3c17aa.  call temp:= `min`(v2, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3c17b0.  v2:= temp;
  #L3c17b2.  v5:= `@@l2.b$a.n` @type ^`int`[] @kind object;
  #L3c17b6.  v5:= v5[v2];
  #L3c17ba.  v6:= v9.`l2.b$a.d` @type ^`int`;
  #L3c17be.  v11:= v11 * v6 @kind int;
  #L3c17c2.  v11:= v11 * v0 @kind int;
  #L3c17c6.  v11:= v11 + v12 @kind int;
  #L3c17c8.  v11:= v11 * 2;
  #L3c17cc.  v12:= v4 ^& 255;
  #L3c17d0.  v12:= (`byte`) v12 @kind i2b;
  #L3c17d2.  v13[v11]:= v12 @kind byte;
  #L3c17d6.  v12:= v11 + 1;
  #L3c17da.  v6:= v4 ^> 8;
  #L3c17de.  v6:= (`byte`) v6 @kind i2b;
  #L3c17e0.  v13[v12]:= v6 @kind byte;
  #L3c17e4.  v12:= 0I;
  #L3c17e6.  v6:= 0I;
  #L3c17e8.  v7:= v1 * 2;
  #L3c17ec.  if v6 >= v7 then goto L3c1896;
  #L3c17f0.  v7:= v6 / 8;
  #L3c17f4.  v8:= v6 / 2;
  #L3c17f8.  v8:= v8 %% 4;
  #L3c17fc.  v7:= v7 * v0 @kind int;
  #L3c1800.  v7:= v7 * 4;
  #L3c1804.  v7:= v7 + v3 @kind int;
  #L3c1806.  v7:= v7 + v8 @kind int;
  #L3c1808.  v7:= v10[v7] @kind byte;
  #L3c180c.  v7:= v7 ^& 255;
  #L3c1810.  v8:= v6 %% 2;
  #L3c1814.  if v8 != 0 then goto L3c181e;
  #L3c1818.  v7:= v7 ^& 15;
  #L3c181c.  goto L3c1822;
  #L3c181e.  v7:= v7 ^> 4;
  #L3c1822.  v8:= v7 ^& 7;
  #L3c1826.  v8:= v8 * 2;
  #L3c182a.  v8:= v8 + 1;
  #L3c182e.  v8:= v8 * v5 @kind int;
  #L3c1832.  v5:= v8 ^> 3;
  #L3c1836.  v8:= v7 ^& 8;
  #L3c183a.  if v8 == 0 then goto L3c1840;
  #L3c183e.  v5:= -v5 @kind int;
  #L3c1840.  v4:= v4 + v5 @kind int;
  #L3c1842.  v5:= -32768I;
  #L3c1846.  v8:= 32767I;
  #L3c184a.  call temp:= `q`(v4, v5, v8) @signature `Ls3/l0;.q:(III)I` @kind static;
  #L3c1850.  v4:= temp;
  #L3c1852.  v5:= v0 * 2;
  #L3c1856.  v11:= v11 + v5 @kind int;
  #L3c1858.  v5:= v4 ^& 255;
  #L3c185c.  v5:= (`byte`) v5 @kind i2b;
  #L3c185e.  v13[v11]:= v5 @kind byte;
  #L3c1862.  v5:= v11 + 1;
  #L3c1866.  v8:= v4 ^> 8;
  #L3c186a.  v8:= (`byte`) v8 @kind i2b;
  #L3c186c.  v13[v5]:= v8 @kind byte;
  #L3c1870.  v5:= `@@l2.b$a.m` @type ^`int`[] @kind object;
  #L3c1874.  v5:= v5[v7];
  #L3c1878.  v2:= v2 + v5 @kind int;
  #L3c187a.  v5:= `@@l2.b$a.n` @type ^`int`[] @kind object;
  #L3c187e.  v7:= length @variable v5;
  #L3c1880.  v7:= v7 + -1;
  #L3c1884.  call temp:= `q`(v2, v12, v7) @signature `Ls3/l0;.q:(III)I` @kind static;
  #L3c188a.  v2:= temp;
  #L3c188c.  v5:= v5[v2];
  #L3c1890.  v6:= v6 + 1;
  #L3c1894.  goto L3c17e8;
  #L3c1896.  return @kind void;
}
procedure `int` `f`(`l2.b$a` v1 @kind this, `int` v2 ) @signature `Ll2/b$a;.f:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3c134c.  v0:= v1.`l2.b$a.c` @type ^`l2.c` @kind object;
  #L3c1350.  v0:= v0.`l2.c.b` @type ^`int`;
  #L3c1354.  v0:= v0 * 2;
  #L3c1358.  v2:= v2 / v0 @kind int;
  #L3c135a.  return v2;
}
procedure `int` `g`(`l2.b$a` v1 @kind this, `int` v2 ) @signature `Ll2/b$a;.g:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3c136c.  v0:= v1.`l2.b$a.c` @type ^`l2.c` @kind object;
  #L3c1370.  v0:= v0.`l2.c.b` @type ^`int`;
  #L3c1374.  call temp:= `h`(v2, v0) @signature `Ll2/b$a;.h:(II)I` @kind static;
  #L3c137a.  v2:= temp;
  #L3c137c.  return v2;
}
procedure `int` `h`(`int` v0 , `int` v1 ) @signature `Ll2/b$a;.h:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L3c1390.  v0:= v0 * 2;
  #L3c1394.  v0:= v0 * v1 @kind int;
  #L3c1398.  return v0;
}
procedure `void` `i`(`l2.b$a` v11 @kind this, `int` v12 ) @signature `Ll2/b$a;.i:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3c1914.  v0:= v11.`l2.b$a.j` @type ^`long` @kind wide;
  #L3c1918.  v2:= v11.`l2.b$a.l` @type ^`long` @kind wide;
  #L3c191c.  v4:= v11.`l2.b$a.c` @type ^`l2.c` @kind object;
  #L3c1920.  v4:= v4.`l2.c.c` @type ^`int`;
  #L3c1924.  v6:= (`long`) v4 @kind i2l;
  #L3c1926.  v4:= 1000000L;
  #L3c192c.  call temp:= `M0`(v2, v4, v6) @signature `Ls3/l0;.M0:(JJJ)J` @kind static;
  #L3c1932.  v2:= temp @kind wide;
  #L3c1934.  v5:= v0 + v2 @kind long;
  #L3c1938.  call temp:= `g`(v11, v12) @signature `Ll2/b$a;.g:(I)I` @kind direct;
  #L3c193e.  v0:= temp;
  #L3c1940.  v1:= v11.`l2.b$a.k` @type ^`int`;
  #L3c1944.  v9:= v1 - v0 @kind int;
  #L3c1948.  v4:= v11.`l2.b$a.b` @type ^`a2.d0` @kind object;
  #L3c194c.  v7:= 1I;
  #L3c194e.  v10:= 0I;
  #L3c1950.  v8:= v0;
  #L3c1952.  call `f`(v4, v5, v7, v8, v9, v10) @signature `La2/d0;.f:(JIIILa2/d0$a;)V` @kind interface;
  #L3c1958.  v1:= v11.`l2.b$a.l` @type ^`long` @kind wide;
  #L3c195c.  v3:= (`long`) v12 @kind i2l;
  #L3c195e.  v1:= v1 + v3 @kind long;
  #L3c1960.  v11.`l2.b$a.l` @type ^`long` := v1 @kind wide;
  #L3c1964.  v12:= v11.`l2.b$a.k` @type ^`int`;
  #L3c1968.  v12:= v12 - v0 @kind int;
  #L3c196a.  v11.`l2.b$a.k` @type ^`int` := v12;
  #L3c196e.  return @kind void;
}
procedure `void` `a`(`l2.b$a` v9 @kind this, `int` v10 , `long` v11 ) @signature `Ll2/b$a;.a:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3c18a8.  v0:= v9.`l2.b$a.a` @type ^`a2.n` @kind object;
  #L3c18ac.  v8:= new `l2.e`;
  #L3c18b0.  v2:= v9.`l2.b$a.c` @type ^`l2.c` @kind object;
  #L3c18b4.  v3:= v9.`l2.b$a.d` @type ^`int`;
  #L3c18b8.  v4:= (`long`) v10 @kind i2l;
  #L3c18ba.  v1:= v8 @kind object;
  #L3c18bc.  v6:= v11 @kind wide;
  #L3c18be.  call `<init>`(v1, v2, v3, v4, v6) @signature `Ll2/e;.<init>:(Ll2/c;IJJ)V` @kind direct;
  #L3c18c4.  call `m`(v0, v8) @signature `La2/n;.m:(La2/a0;)V` @kind interface;
  #L3c18ca.  v10:= v9.`l2.b$a.b` @type ^`a2.d0` @kind object;
  #L3c18ce.  v11:= v9.`l2.b$a.h` @type ^`v1.j1` @kind object;
  #L3c18d2.  call `b`(v10, v11) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L3c18d8.  return @kind void;
}
procedure `void` `b`(`l2.b$a` v1 @kind this, `long` v2 ) @signature `Ll2/b$a;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c18ec.  v0:= 0I;
  #L3c18ee.  v1.`l2.b$a.i` @type ^`int` := v0;
  #L3c18f2.  v1.`l2.b$a.j` @type ^`long` := v2 @kind wide;
  #L3c18f6.  v1.`l2.b$a.k` @type ^`int` := v0;
  #L3c18fa.  v2:= 0L;
  #L3c18fe.  v1.`l2.b$a.l` @type ^`long` := v2 @kind wide;
  #L3c1902.  return @kind void;
}
procedure `boolean` `c`(`l2.b$a` v6 @kind this, `a2.m` v7 @kind object, `long` v8 ) @signature `Ll2/b$a;.c:(La2/m;J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3c1230.  v0:= v6.`l2.b$a.g` @type ^`int`;
  #L3c1234.  v1:= v6.`l2.b$a.k` @type ^`int`;
  #L3c1238.  call temp:= `f`(v6, v1) @signature `Ll2/b$a;.f:(I)I` @kind direct;
  #L3c123e.  v1:= temp;
  #L3c1240.  v0:= v0 - v1 @kind int;
  #L3c1242.  v1:= v6.`l2.b$a.d` @type ^`int`;
  #L3c1246.  call temp:= `l`(v0, v1) @signature `Ls3/l0;.l:(II)I` @kind static;
  #L3c124c.  v0:= temp;
  #L3c124e.  v1:= v6.`l2.b$a.c` @type ^`l2.c` @kind object;
  #L3c1252.  v1:= v1.`l2.c.d` @type ^`int`;
  #L3c1256.  v0:= v0 * v1 @kind int;
  #L3c125a.  v1:= 1I;
  #L3c125c.  v2:= 0L;
  #L3c1260.  v4:= lcmp(v8, v2);
  #L3c1264.  if v4 != 0 then goto L3c126c;
  #L3c1268.  v2:= 1I;
  #L3c126a.  goto L3c126e;
  #L3c126c.  v2:= 0I;
  #L3c126e.  if v2 != 0 then goto L3c12ae;
  #L3c1272.  v3:= v6.`l2.b$a.i` @type ^`int`;
  #L3c1276.  if v3 >= v0 then goto L3c12ae;
  #L3c127a.  v3:= v0 - v3 @kind int;
  #L3c127e.  v3:= (`long`) v3 @kind i2l;
  #L3c1280.  call temp:= `min`(v3, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3c1286.  v3:= temp @kind wide;
  #L3c1288.  v4:= (`int`) v3 @kind l2i;
  #L3c128a.  v3:= v6.`l2.b$a.e` @type ^`byte`[] @kind object;
  #L3c128e.  v5:= v6.`l2.b$a.i` @type ^`int`;
  #L3c1292.  call temp:= `b`(v7, v3, v5, v4) @signature `La2/m;.b:([BII)I` @kind interface;
  #L3c1298.  v3:= temp;
  #L3c129a.  v4:= -1I;
  #L3c129c.  if v3 != v4 then goto L3c12a2;
  #L3c12a0.  goto L3c1268;
  #L3c12a2.  v4:= v6.`l2.b$a.i` @type ^`int`;
  #L3c12a6.  v4:= v4 + v3 @kind int;
  #L3c12a8.  v6.`l2.b$a.i` @type ^`int` := v4;
  #L3c12ac.  goto L3c126e;
  #L3c12ae.  v7:= v6.`l2.b$a.i` @type ^`int`;
  #L3c12b2.  v8:= v6.`l2.b$a.c` @type ^`l2.c` @kind object;
  #L3c12b6.  v8:= v8.`l2.c.d` @type ^`int`;
  #L3c12ba.  v7:= v7 / v8 @kind int;
  #L3c12bc.  if v7 <= 0 then goto L3c131e;
  #L3c12c0.  v8:= v6.`l2.b$a.e` @type ^`byte`[] @kind object;
  #L3c12c4.  v9:= v6.`l2.b$a.f` @type ^`s3.z` @kind object;
  #L3c12c8.  call `d`(v6, v8, v7, v9) @signature `Ll2/b$a;.d:([BILs3/z;)V` @kind direct;
  #L3c12ce.  v8:= v6.`l2.b$a.i` @type ^`int`;
  #L3c12d2.  v9:= v6.`l2.b$a.c` @type ^`l2.c` @kind object;
  #L3c12d6.  v9:= v9.`l2.c.d` @type ^`int`;
  #L3c12da.  v7:= v7 * v9 @kind int;
  #L3c12de.  v8:= v8 - v7 @kind int;
  #L3c12e0.  v6.`l2.b$a.i` @type ^`int` := v8;
  #L3c12e4.  v7:= v6.`l2.b$a.f` @type ^`s3.z` @kind object;
  #L3c12e8.  call temp:= `f`(v7) @signature `Ls3/z;.f:()I` @kind virtual;
  #L3c12ee.  v7:= temp;
  #L3c12f0.  v8:= v6.`l2.b$a.b` @type ^`a2.d0` @kind object;
  #L3c12f4.  v9:= v6.`l2.b$a.f` @type ^`s3.z` @kind object;
  #L3c12f8.  call `c`(v8, v9, v7) @signature `La2/d0;.c:(Ls3/z;I)V` @kind interface;
  #L3c12fe.  v8:= v6.`l2.b$a.k` @type ^`int`;
  #L3c1302.  v8:= v8 + v7 @kind int;
  #L3c1304.  v6.`l2.b$a.k` @type ^`int` := v8;
  #L3c1308.  call temp:= `f`(v6, v8) @signature `Ll2/b$a;.f:(I)I` @kind direct;
  #L3c130e.  v7:= temp;
  #L3c1310.  v8:= v6.`l2.b$a.g` @type ^`int`;
  #L3c1314.  if v7 < v8 then goto L3c131e;
  #L3c1318.  call `i`(v6, v8) @signature `Ll2/b$a;.i:(I)V` @kind direct;
  #L3c131e.  if v2 == 0 then goto L3c1338;
  #L3c1322.  v7:= v6.`l2.b$a.k` @type ^`int`;
  #L3c1326.  call temp:= `f`(v6, v7) @signature `Ll2/b$a;.f:(I)I` @kind direct;
  #L3c132c.  v7:= temp;
  #L3c132e.  if v7 <= 0 then goto L3c1338;
  #L3c1332.  call `i`(v6, v7) @signature `Ll2/b$a;.i:(I)V` @kind direct;
  #L3c1338.  return v2;
}
