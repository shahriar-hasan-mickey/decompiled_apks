record `t3.e$a` @kind class @AccessFlag FINAL {
  `long` `t3.e$a.a` @AccessFlag PRIVATE;
  `long` `t3.e$a.b` @AccessFlag PRIVATE;
  `long` `t3.e$a.c` @AccessFlag PRIVATE;
  `long` `t3.e$a.d` @AccessFlag PRIVATE;
  `long` `t3.e$a.e` @AccessFlag PRIVATE;
  `long` `t3.e$a.f` @AccessFlag PRIVATE;
  `boolean`[] `t3.e$a.g` @AccessFlag PRIVATE_FINAL;
  `int` `t3.e$a.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`t3.e$a` v1 @kind this) @signature `Lt3/e$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L468a78.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L468a7e.  v0:= 15I;
  #L468a82.  v0:= new `boolean`[v0];
  #L468a86.  v1.`t3.e$a.g` @type ^`boolean`[] := v0 @kind object;
  #L468a8a.  return @kind void;
}
procedure `int` `c`(`long` v2 ) @signature `Lt3/e$a;.c:(J)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L468a18.  v0:= 15L;
  #L468a1c.  v2:= v2 %% v0 @kind long;
  #L468a1e.  v3:= (`int`) v2 @kind l2i;
  #L468a20.  return v3;
}
procedure `long` `a`(`t3.e$a` v5 @kind this) @signature `Lt3/e$a;.a:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L468a34.  v0:= v5.`t3.e$a.e` @type ^`long` @kind wide;
  #L468a38.  v2:= 0L;
  #L468a3c.  v4:= lcmp(v0, v2);
  #L468a40.  if v4 != 0 then goto L468a46;
  #L468a44.  goto L468a4c;
  #L468a46.  v2:= v5.`t3.e$a.f` @type ^`long` @kind wide;
  #L468a4a.  v2:= v2 / v0 @kind long;
  #L468a4c.  return v2 @kind wide;
}
procedure `long` `b`(`t3.e$a` v2 @kind this) @signature `Lt3/e$a;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L468a60.  v0:= v2.`t3.e$a.f` @type ^`long` @kind wide;
  #L468a64.  return v0 @kind wide;
}
procedure `boolean` `d`(`t3.e$a` v5 @kind this) @signature `Lt3/e$a;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4689ac.  v0:= v5.`t3.e$a.d` @type ^`long` @kind wide;
  #L4689b0.  v2:= 0L;
  #L4689b4.  v4:= lcmp(v0, v2);
  #L4689b8.  if v4 != 0 then goto L4689c0;
  #L4689bc.  v0:= 0I;
  #L4689be.  return v0;
  #L4689c0.  v2:= v5.`t3.e$a.g` @type ^`boolean`[] @kind object;
  #L4689c4.  v3:= 1L;
  #L4689c8.  v0:= v0 - v3 @kind long;
  #L4689ca.  call temp:= `c`(v0) @signature `Lt3/e$a;.c:(J)I` @kind static;
  #L4689d0.  v0:= temp;
  #L4689d2.  v0:= v2[v0] @kind boolean;
  #L4689d6.  return v0;
}
procedure `boolean` `e`(`t3.e$a` v5 @kind this) @signature `Lt3/e$a;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4689e8.  v0:= v5.`t3.e$a.d` @type ^`long` @kind wide;
  #L4689ec.  v2:= 15L;
  #L4689f0.  v4:= lcmp(v0, v2);
  #L4689f4.  if v4 <= 0 then goto L468a04;
  #L4689f8.  v0:= v5.`t3.e$a.h` @type ^`int`;
  #L4689fc.  if v0 != 0 then goto L468a04;
  #L468a00.  v0:= 1I;
  #L468a02.  goto L468a06;
  #L468a04.  v0:= 0I;
  #L468a06.  return v0;
}
procedure `void` `f`(`t3.e$a` v11 @kind this, `long` v12 ) @signature `Lt3/e$a;.f:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L468a9c.  v0:= v11.`t3.e$a.d` @type ^`long` @kind wide;
  #L468aa0.  v2:= 1L;
  #L468aa4.  v4:= 0L;
  #L468aa8.  v6:= lcmp(v0, v4);
  #L468aac.  if v6 != 0 then goto L468ab6;
  #L468ab0.  v11.`t3.e$a.a` @type ^`long` := v12 @kind wide;
  #L468ab4.  goto L468b4c;
  #L468ab6.  v4:= lcmp(v0, v2);
  #L468aba.  if v4 != 0 then goto L468ad4;
  #L468abe.  v0:= v11.`t3.e$a.a` @type ^`long` @kind wide;
  #L468ac2.  v0:= v12 - v0 @kind long;
  #L468ac6.  v11.`t3.e$a.b` @type ^`long` := v0 @kind wide;
  #L468aca.  v11.`t3.e$a.f` @type ^`long` := v0 @kind wide;
  #L468ace.  v11.`t3.e$a.e` @type ^`long` := v2 @kind wide;
  #L468ad2.  goto L468b4c;
  #L468ad4.  v4:= v11.`t3.e$a.c` @type ^`long` @kind wide;
  #L468ad8.  v4:= v12 - v4 @kind long;
  #L468adc.  call temp:= `c`(v0) @signature `Lt3/e$a;.c:(J)I` @kind static;
  #L468ae2.  v0:= temp;
  #L468ae4.  v6:= v11.`t3.e$a.b` @type ^`long` @kind wide;
  #L468ae8.  v6:= v4 - v6 @kind long;
  #L468aec.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L468af2.  v6:= temp @kind wide;
  #L468af4.  v8:= 1000000L;
  #L468afa.  v1:= 1I;
  #L468afc.  v10:= lcmp(v6, v8);
  #L468b00.  if v10 > 0 then goto L468b32;
  #L468b04.  v6:= v11.`t3.e$a.e` @type ^`long` @kind wide;
  #L468b08.  v6:= v6 + v2 @kind long;
  #L468b0a.  v11.`t3.e$a.e` @type ^`long` := v6 @kind wide;
  #L468b0e.  v6:= v11.`t3.e$a.f` @type ^`long` @kind wide;
  #L468b12.  v6:= v6 + v4 @kind long;
  #L468b14.  v11.`t3.e$a.f` @type ^`long` := v6 @kind wide;
  #L468b18.  v4:= v11.`t3.e$a.g` @type ^`boolean`[] @kind object;
  #L468b1c.  v5:= v4[v0] @kind boolean;
  #L468b20.  if v5 == 0 then goto L468b4c;
  #L468b24.  v5:= 0I;
  #L468b26.  v4[v0]:= v5 @kind boolean;
  #L468b2a.  v0:= v11.`t3.e$a.h` @type ^`int`;
  #L468b2e.  v0:= v0 - v1 @kind int;
  #L468b30.  goto L468b48;
  #L468b32.  v4:= v11.`t3.e$a.g` @type ^`boolean`[] @kind object;
  #L468b36.  v5:= v4[v0] @kind boolean;
  #L468b3a.  if v5 != 0 then goto L468b4c;
  #L468b3e.  v4[v0]:= v1 @kind boolean;
  #L468b42.  v0:= v11.`t3.e$a.h` @type ^`int`;
  #L468b46.  v0:= v0 + v1 @kind int;
  #L468b48.  v11.`t3.e$a.h` @type ^`int` := v0;
  #L468b4c.  v0:= v11.`t3.e$a.d` @type ^`long` @kind wide;
  #L468b50.  v0:= v0 + v2 @kind long;
  #L468b52.  v11.`t3.e$a.d` @type ^`long` := v0 @kind wide;
  #L468b56.  v11.`t3.e$a.c` @type ^`long` := v12 @kind wide;
  #L468b5a.  return @kind void;
}
procedure `void` `g`(`t3.e$a` v2 @kind this) @signature `Lt3/e$a;.g:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L468b6c.  v0:= 0L;
  #L468b70.  v2.`t3.e$a.d` @type ^`long` := v0 @kind wide;
  #L468b74.  v2.`t3.e$a.e` @type ^`long` := v0 @kind wide;
  #L468b78.  v2.`t3.e$a.f` @type ^`long` := v0 @kind wide;
  #L468b7c.  v0:= 0I;
  #L468b7e.  v2.`t3.e$a.h` @type ^`int` := v0;
  #L468b82.  v1:= v2.`t3.e$a.g` @type ^`boolean`[] @kind object;
  #L468b86.  call `fill`(v1, v0) @signature `Ljava/util/Arrays;.fill:([ZZ)V` @kind static;
  #L468b8c.  return @kind void;
}
