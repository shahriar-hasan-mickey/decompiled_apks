record `t3.y` @kind class @AccessFlag PUBLIC_FINAL extends `v1.g` @kind interface {
  `int` `t3.y.o` @AccessFlag PUBLIC_FINAL;
  `int` `t3.y.p` @AccessFlag PUBLIC_FINAL;
  `int` `t3.y.q` @AccessFlag PUBLIC_FINAL;
  `float` `t3.y.r` @AccessFlag PUBLIC_FINAL;
}
global `t3.y` `@@t3.y.s` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lt3/y;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L46dd9c.  v0:= new `t3.y`;
  #L46dda0.  v1:= 0I;
  #L46dda2.  call `<init>`(v0, v1, v1) @signature `Lt3/y;.<init>:(II)V` @kind direct;
  #L46dda8.  `@@t3.y.s` @type ^`t3.y` := v0 @kind object;
  #L46ddac.  return @kind void;
}
procedure `void` `<init>`(`t3.y` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lt3/y;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L46ddc0.  v0:= 0I;
  #L46ddc2.  v1:= 1.0F;
  #L46ddc6.  call `<init>`(v2, v3, v4, v0, v1) @signature `Lt3/y;.<init>:(IIIF)V` @kind direct;
  #L46ddcc.  return @kind void;
}
procedure `void` `<init>`(`t3.y` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `float` v4 ) @signature `Lt3/y;.<init>:(IIIF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L46dde0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46dde6.  v0.`t3.y.o` @type ^`int` := v1;
  #L46ddea.  v0.`t3.y.p` @type ^`int` := v2;
  #L46ddee.  v0.`t3.y.q` @type ^`int` := v3;
  #L46ddf2.  v0.`t3.y.r` @type ^`float` := v4;
  #L46ddf6.  return @kind void;
}
procedure `boolean` `equals`(`t3.y` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lt3/y;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46dcf4.  v0:= 1I;
  #L46dcf6.  if v4 != v5 then goto L46dcfc;
  #L46dcfa.  return v0;
  #L46dcfc.  v1:= instanceof @variable v5 @type ^`t3.y` @kind boolean;
  #L46dd00.  v2:= 0I;
  #L46dd02.  if v1 == 0 then goto L46dd44;
  #L46dd06.  v5:= (`t3.y`) v5 @kind object;
  #L46dd0a.  v1:= v4.`t3.y.o` @type ^`int`;
  #L46dd0e.  v3:= v5.`t3.y.o` @type ^`int`;
  #L46dd12.  if v1 != v3 then goto L46dd40;
  #L46dd16.  v1:= v4.`t3.y.p` @type ^`int`;
  #L46dd1a.  v3:= v5.`t3.y.p` @type ^`int`;
  #L46dd1e.  if v1 != v3 then goto L46dd40;
  #L46dd22.  v1:= v4.`t3.y.q` @type ^`int`;
  #L46dd26.  v3:= v5.`t3.y.q` @type ^`int`;
  #L46dd2a.  if v1 != v3 then goto L46dd40;
  #L46dd2e.  v1:= v4.`t3.y.r` @type ^`float`;
  #L46dd32.  v5:= v5.`t3.y.r` @type ^`float`;
  #L46dd36.  v5:= fcmpl(v1, v5);
  #L46dd3a.  if v5 != 0 then goto L46dd40;
  #L46dd3e.  goto L46dd42;
  #L46dd40.  v0:= 0I;
  #L46dd42.  return v0;
  #L46dd44.  return v2;
}
procedure `int` `hashCode`(`t3.y` v2 @kind this) @signature `Lt3/y;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46dd58.  v0:= v2.`t3.y.o` @type ^`int`;
  #L46dd5c.  v1:= 217I;
  #L46dd60.  v1:= v1 + v0 @kind int;
  #L46dd62.  v1:= v1 * 31;
  #L46dd66.  v0:= v2.`t3.y.p` @type ^`int`;
  #L46dd6a.  v1:= v1 + v0 @kind int;
  #L46dd6c.  v1:= v1 * 31;
  #L46dd70.  v0:= v2.`t3.y.q` @type ^`int`;
  #L46dd74.  v1:= v1 + v0 @kind int;
  #L46dd76.  v1:= v1 * 31;
  #L46dd7a.  v0:= v2.`t3.y.r` @type ^`float`;
  #L46dd7e.  call temp:= `floatToRawIntBits`(v0) @signature `Ljava/lang/Float;.floatToRawIntBits:(F)I` @kind static;
  #L46dd84.  v0:= temp;
  #L46dd86.  v1:= v1 + v0 @kind int;
  #L46dd88.  return v1;
}
