record `q5.b$b` @kind class @AccessFlag  extends `p5.a` @kind interface {
  `p5.p` `q5.b$b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`q5.b$b` v0 @kind this, `p5.p` v1 @kind object) @signature `Lq5/b$b;.<init>:(Lp5/p;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L423090.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L423096.  v0.`q5.b$b.a` @type ^`p5.p` := v1 @kind object;
  #L42309a.  return @kind void;
}
procedure `void` `<init>`(`q5.b$b` v0 @kind this, `p5.p` v1 @kind object, `q5.b$a` v2 @kind object) @signature `Lq5/b$b;.<init>:(Lp5/p;Lq5/b$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L4230ac.  call `<init>`(v0, v1) @signature `Lq5/b$b;.<init>:(Lp5/p;)V` @kind direct;
  #L4230b2.  return @kind void;
}
procedure `byte`[] `a`(`q5.b$b` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lq5/b$b;.a:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L423030.  v0:= 2I;
  #L423032.  v0:= new `byte`[][v0];
  #L423036.  v1:= v3.`q5.b$b.a` @type ^`p5.p` @kind object;
  #L42303a.  call temp:= `b`(v1) @signature `Lp5/p;.b:()Lp5/p$b;` @kind virtual;
  #L423040.  v1:= temp @kind object;
  #L423042.  call temp:= `a`(v1) @signature `Lp5/p$b;.a:()[B` @kind virtual;
  #L423048.  v1:= temp @kind object;
  #L42304a.  v2:= 0I;
  #L42304c.  v0[v2]:= v1 @kind object;
  #L423050.  v1:= v3.`q5.b$b.a` @type ^`p5.p` @kind object;
  #L423054.  call temp:= `b`(v1) @signature `Lp5/p;.b:()Lp5/p$b;` @kind virtual;
  #L42305a.  v1:= temp @kind object;
  #L42305c.  call temp:= `c`(v1) @signature `Lp5/p$b;.c:()Ljava/lang/Object;` @kind virtual;
  #L423062.  v1:= temp @kind object;
  #L423064.  v1:= (`p5.a`) v1 @kind object;
  #L423068.  call temp:= `a`(v1, v4, v5) @signature `Lp5/a;.a:([B[B)[B` @kind interface;
  #L42306e.  v4:= temp @kind object;
  #L423070.  v5:= 1I;
  #L423072.  v0[v5]:= v4 @kind object;
  #L423076.  call temp:= `a`(v0) @signature `Lx5/g;.a:([[B)[B` @kind static;
  #L42307c.  v4:= temp @kind object;
  #L42307e.  return v4 @kind object;
}
procedure `byte`[] `b`(`q5.b$b` v6 @kind this, `byte`[] v7 @kind object, `byte`[] v8 @kind object) @signature `Lq5/b$b;.b:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L422f14.  v0:= length @variable v7;
  #L422f16.  v1:= 5I;
  #L422f18.  if v0 <= v1 then goto L422fae;
  #L422f1c.  v0:= 0I;
  #L422f1e.  call temp:= `copyOfRange`(v7, v0, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L422f24.  v0:= temp @kind object;
  #L422f26.  v2:= length @variable v7;
  #L422f28.  call temp:= `copyOfRange`(v7, v1, v2) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L422f2e.  v1:= temp @kind object;
  #L422f30.  v2:= v6.`q5.b$b.a` @type ^`p5.p` @kind object;
  #L422f34.  call temp:= `c`(v2, v0) @signature `Lp5/p;.c:([B)Ljava/util/List;` @kind virtual;
  #L422f3a.  v0:= temp @kind object;
  #L422f3c.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L422f42.  v0:= temp @kind object;
  #L422f44.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L422f4a.  v2:= temp;
  #L422f4c.  if v2 == 0 then goto L422fae;
  #L422f50.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L422f56.  v2:= temp @kind object;
  #L422f58.  v2:= (`p5.p$b`) v2 @kind object;
  #L422f5c.  call temp:= `c`(v2) @signature `Lp5/p$b;.c:()Ljava/lang/Object;` @kind virtual;
  #L422f62.  v2:= temp @kind object;
  #L422f64.  v2:= (`p5.a`) v2 @kind object;
  #L422f68.  call temp:= `b`(v2, v1, v8) @signature `Lp5/a;.b:([B[B)[B` @kind interface;
  #L422f6e.  v7:= temp @kind object;
  #L422f70.  return v7 @kind object;
  #L422f72.  v2:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L422f74.  call temp:= `d`() @signature `Lq5/b;.d:()Ljava/util/logging/Logger;` @kind static;
  #L422f7a.  v3:= temp @kind object;
  #L422f7c.  v4:= new `java.lang.StringBuilder`;
  #L422f80.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L422f86.  v5:= "ciphertext prefix matches a key, but cannot decrypt: " @kind object;
  #L422f8a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L422f90.  call temp:= `toString`(v2) @signature `Ljava/security/GeneralSecurityException;.toString:()Ljava/lang/String;` @kind virtual;
  #L422f96.  v2:= temp @kind object;
  #L422f98.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L422f9e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L422fa4.  v2:= temp @kind object;
  #L422fa6.  call `info`(v3, v2) @signature `Ljava/util/logging/Logger;.info:(Ljava/lang/String;)V` @kind virtual;
  #L422fac.  goto L422f44;
  #L422fae.  v0:= v6.`q5.b$b.a` @type ^`p5.p` @kind object;
  #L422fb2.  call temp:= `e`(v0) @signature `Lp5/p;.e:()Ljava/util/List;` @kind virtual;
  #L422fb8.  v0:= temp @kind object;
  #L422fba.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L422fc0.  v0:= temp @kind object;
  #L422fc2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L422fc8.  v1:= temp;
  #L422fca.  if v1 == 0 then goto L422ff4;
  #L422fce.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L422fd4.  v1:= temp @kind object;
  #L422fd6.  v1:= (`p5.p$b`) v1 @kind object;
  #L422fda.  call temp:= `c`(v1) @signature `Lp5/p$b;.c:()Ljava/lang/Object;` @kind virtual;
  #L422fe0.  v1:= temp @kind object;
  #L422fe2.  v1:= (`p5.a`) v1 @kind object;
  #L422fe6.  call temp:= `b`(v1, v7, v8) @signature `Lp5/a;.b:([B[B)[B` @kind interface;
  #L422fec.  v7:= temp @kind object;
  #L422fee.  return v7 @kind object;
  #L422ff0.  
  #L422ff2.  goto L422fc2;
  #L422ff4.  v7:= new `java.security.GeneralSecurityException`;
  #L422ff8.  v8:= "decryption failed" @kind object;
  #L422ffc.  call `<init>`(v7, v8) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L423002.  throw v7;
  catch `java.security.GeneralSecurityException` @[L422f5c..L422f70] goto L422f72;
  catch `java.security.GeneralSecurityException` @[L422fda..L422fee] goto L422ff0;
}
