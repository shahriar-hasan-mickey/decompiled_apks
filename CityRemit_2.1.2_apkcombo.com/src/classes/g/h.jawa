record `g.h` @kind class @AccessFlag  {
  `java.util.Deque` `g.h.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`g.h` v1 @kind this) @signature `Lg/h;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3180e0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3180e6.  v0:= new `java.util.ArrayDeque`;
  #L3180ea.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L3180f0.  v1.`g.h.a` @type ^`java.util.Deque` := v0 @kind object;
  #L3180f4.  return @kind void;
}
procedure `boolean` `b`(`org.xmlpull.v1.XmlPullParser` v3 @kind object) @signature `Lg/h;.b:(Lorg/xmlpull/v1/XmlPullParser;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L317ff8.  v0:= 1I;
  #L317ffa.  if v3 == 0 then goto L31801e;
  #L317ffe.  call temp:= `getEventType`(v3) @signature `Lorg/xmlpull/v1/XmlPullParser;.getEventType:()I` @kind interface;
  #L318004.  v1:= temp;
  #L318006.  v2:= 3I;
  #L318008.  if v1 == v2 then goto L31801e;
  #L31800c.  call temp:= `getEventType`(v3) @signature `Lorg/xmlpull/v1/XmlPullParser;.getEventType:()I` @kind interface;
  #L318012.  v3:= temp;
  #L318014.  if v3 != v0 then goto L31801a;
  #L318018.  goto L31801e;
  #L31801a.  v0:= 0I;
  #L31801c.  
  #L31801e.  return v0;
  catch `org.xmlpull.v1.XmlPullParserException` @[L317ffe..L318014] goto L31801e;
}
procedure `org.xmlpull.v1.XmlPullParser` `c`(`java.util.Deque` v2 @kind object) @signature `Lg/h;.c:(Ljava/util/Deque;)Lorg/xmlpull/v1/XmlPullParser;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L318090.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L318096.  v0:= temp;
  #L318098.  if v0 != 0 then goto L3180ca;
  #L31809c.  call temp:= `peek`(v2) @signature `Ljava/util/Deque;.peek:()Ljava/lang/Object;` @kind interface;
  #L3180a2.  v0:= temp @kind object;
  #L3180a4.  v0:= (`java.lang.ref.WeakReference`) v0 @kind object;
  #L3180a8.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3180ae.  v0:= temp @kind object;
  #L3180b0.  v0:= (`org.xmlpull.v1.XmlPullParser`) v0 @kind object;
  #L3180b4.  call temp:= `b`(v0) @signature `Lg/h;.b:(Lorg/xmlpull/v1/XmlPullParser;)Z` @kind static;
  #L3180ba.  v1:= temp;
  #L3180bc.  if v1 == 0 then goto L3180c8;
  #L3180c0.  call temp:= `pop`(v2) @signature `Ljava/util/Deque;.pop:()Ljava/lang/Object;` @kind interface;
  #L3180c6.  goto L318090;
  #L3180c8.  return v0 @kind object;
  #L3180ca.  v2:= 0I;
  #L3180cc.  return v2 @kind object;
}
procedure `boolean` `d`(`org.xmlpull.v1.XmlPullParser` v1 @kind object, `org.xmlpull.v1.XmlPullParser` v2 @kind object) @signature `Lg/h;.d:(Lorg/xmlpull/v1/XmlPullParser;Lorg/xmlpull/v1/XmlPullParser;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L318040.  if v2 == 0 then goto L31806c;
  #L318044.  if v1 == v2 then goto L31806c;
  #L318048.  call temp:= `getEventType`(v2) @signature `Lorg/xmlpull/v1/XmlPullParser;.getEventType:()I` @kind interface;
  #L31804e.  v1:= temp;
  #L318050.  v0:= 2I;
  #L318052.  if v1 != v0 then goto L31806c;
  #L318056.  v1:= "include" @kind object;
  #L31805a.  call temp:= `getName`(v2) @signature `Lorg/xmlpull/v1/XmlPullParser;.getName:()Ljava/lang/String;` @kind interface;
  #L318060.  v2:= temp @kind object;
  #L318062.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L318068.  v1:= temp;
  #L31806a.  return v1;
  #L31806c.  v1:= 0I;
  #L31806e.  return v1;
  catch `org.xmlpull.v1.XmlPullParserException` @[L318048..L31806a] goto L31806c;
}
procedure `boolean` `a`(`g.h` v4 @kind this, `android.util.AttributeSet` v5 @kind object) @signature `Lg/h;.a:(Landroid/util/AttributeSet;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L317f9c.  v0:= instanceof @variable v5 @type ^`org.xmlpull.v1.XmlPullParser` @kind boolean;
  #L317fa0.  if v0 == 0 then goto L317fe4;
  #L317fa4.  v5:= (`org.xmlpull.v1.XmlPullParser`) v5 @kind object;
  #L317fa8.  call temp:= `getDepth`(v5) @signature `Lorg/xmlpull/v1/XmlPullParser;.getDepth:()I` @kind interface;
  #L317fae.  v0:= temp;
  #L317fb0.  v1:= 1I;
  #L317fb2.  if v0 != v1 then goto L317fe4;
  #L317fb6.  v0:= v4.`g.h.a` @type ^`java.util.Deque` @kind object;
  #L317fba.  call temp:= `c`(v0) @signature `Lg/h;.c:(Ljava/util/Deque;)Lorg/xmlpull/v1/XmlPullParser;` @kind static;
  #L317fc0.  v0:= temp @kind object;
  #L317fc2.  v2:= v4.`g.h.a` @type ^`java.util.Deque` @kind object;
  #L317fc6.  v3:= new `java.lang.ref.WeakReference`;
  #L317fca.  call `<init>`(v3, v5) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L317fd0.  call `push`(v2, v3) @signature `Ljava/util/Deque;.push:(Ljava/lang/Object;)V` @kind interface;
  #L317fd6.  call temp:= `d`(v5, v0) @signature `Lg/h;.d:(Lorg/xmlpull/v1/XmlPullParser;Lorg/xmlpull/v1/XmlPullParser;)Z` @kind static;
  #L317fdc.  v5:= temp;
  #L317fde.  if v5 == 0 then goto L317fe4;
  #L317fe2.  return v1;
  #L317fe4.  v5:= 0I;
  #L317fe6.  return v5;
}
