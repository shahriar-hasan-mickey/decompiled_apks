record `n5.b` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<clinit>`() @signature `Ln5/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L3f1cc8.  return @kind void;
}
procedure `long` `a`(`long` v9 , `long` v11 , `java.math.RoundingMode` v13 @kind object) @signature `Ln5/b;.a:(JJLjava/math/RoundingMode;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f1bc0.  call temp:= `i`(v13) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3f1bc6.  v0:= v9 / v11 @kind long;
  #L3f1bca.  v2:= v11 * v0 @kind long;
  #L3f1bce.  v2:= v9 - v2 @kind long;
  #L3f1bd2.  v4:= 0L;
  #L3f1bd6.  v6:= lcmp(v2, v4);
  #L3f1bda.  if v6 != 0 then goto L3f1be0;
  #L3f1bde.  return v0 @kind wide;
  #L3f1be0.  v9:= v9 ^~ v11 @kind long;
  #L3f1be2.  v7:= 63I;
  #L3f1be6.  v9:= v9 ^> v7 @kind long;
  #L3f1be8.  v10:= (`int`) v9 @kind l2i;
  #L3f1bea.  v9:= 1I;
  #L3f1bec.  v10:= v10 ^| v9 @kind int;
  #L3f1bee.  v7:= `@@n5.b$a.a` @type ^`int`[] @kind object;
  #L3f1bf2.  call temp:= `ordinal`(v13) @signature `Ljava/math/RoundingMode;.ordinal:()I` @kind virtual;
  #L3f1bf8.  v8:= temp;
  #L3f1bfa.  v7:= v7[v8];
  #L3f1bfe.  v8:= 0I;
  #L3f1c00.  goto L3f1c90;
  #L3f1c06.  v9:= new `java.lang.AssertionError`;
  #L3f1c0a.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3f1c10.  throw v9;
  #L3f1c12.  call temp:= `abs`(v2) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L3f1c18.  v2:= temp @kind wide;
  #L3f1c1a.  call temp:= `abs`(v11) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L3f1c20.  v11:= temp @kind wide;
  #L3f1c22.  v11:= v11 - v2 @kind long;
  #L3f1c24.  v2:= v2 - v11 @kind long;
  #L3f1c26.  v11:= lcmp(v2, v4);
  #L3f1c2a.  if v11 != 0 then goto L3f1c62;
  #L3f1c2e.  v11:= `@@java.math.RoundingMode.HALF_UP` @type ^`java.math.RoundingMode` @kind object;
  #L3f1c32.  if v13 != v11 then goto L3f1c3a;
  #L3f1c36.  v11:= 1I;
  #L3f1c38.  goto L3f1c3c;
  #L3f1c3a.  v11:= 0I;
  #L3f1c3c.  v12:= `@@java.math.RoundingMode.HALF_EVEN` @type ^`java.math.RoundingMode` @kind object;
  #L3f1c40.  if v13 != v12 then goto L3f1c48;
  #L3f1c44.  v12:= 1I;
  #L3f1c46.  goto L3f1c4a;
  #L3f1c48.  v12:= 0I;
  #L3f1c4a.  v2:= 1L;
  #L3f1c4e.  v2:= v2 ^& v0 @kind long;
  #L3f1c50.  v13:= lcmp(v2, v4);
  #L3f1c54.  if v13 == 0 then goto L3f1c5a;
  #L3f1c58.  goto L3f1c5c;
  #L3f1c5a.  v9:= 0I;
  #L3f1c5c.  v9:= v9 ^& v12 @kind int;
  #L3f1c5e.  v9:= v9 ^| v11 @kind int;
  #L3f1c60.  goto L3f1c84;
  #L3f1c62.  if v11 <= 0 then goto L3f1c82;
  #L3f1c66.  goto L3f1c84;
  #L3f1c68.  if v10 <= 0 then goto L3f1c82;
  #L3f1c6c.  goto L3f1c84;
  #L3f1c6e.  if v10 >= 0 then goto L3f1c82;
  #L3f1c72.  goto L3f1c84;
  #L3f1c74.  if v6 != 0 then goto L3f1c7a;
  #L3f1c78.  goto L3f1c7c;
  #L3f1c7a.  v9:= 0I;
  #L3f1c7c.  call `a`(v9) @signature `Ln5/c;.a:(Z)V` @kind static;
  #L3f1c82.  v9:= 0I;
  #L3f1c84.  if v9 == 0 then goto L3f1c8c;
  #L3f1c88.  v9:= (`long`) v10 @kind i2l;
  #L3f1c8a.  v0:= v0 + v9 @kind long;
  #L3f1c8c.  return v0 @kind wide;
  #L3f1c8e.  
  #L3f1c90.  switch v7
                  | 1 => goto L3f1c74
                  | 2 => goto L3f1c82
                  | 3 => goto L3f1c6e
                  | 4 => goto L3f1c84
                  | 5 => goto L3f1c68
                  | 6 => goto L3f1c12
                  | 7 => goto L3f1c12
                  | 8 => goto L3f1c12
                  | else => goto L3f1c06;
}
