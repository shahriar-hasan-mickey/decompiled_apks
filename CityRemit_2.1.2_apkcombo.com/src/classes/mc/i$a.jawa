record `mc.i$a` @kind class @AccessFlag FINAL extends `qc.r` @kind interface {
  `qc.c` `mc.i$a.o` @AccessFlag PRIVATE_FINAL;
  `boolean` `mc.i$a.p` @AccessFlag ;
  `boolean` `mc.i$a.q` @AccessFlag ;
  `mc.i` `mc.i$a.r` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<clinit>`() @signature `Lmc/i$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L3e9f48.  return @kind void;
}
procedure `void` `<init>`(`mc.i$a` v0 @kind this, `mc.i` v1 @kind object) @signature `Lmc/i$a;.<init>:(Lmc/i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e9f5c.  v0.`mc.i$a.r` @type ^`mc.i` := v1 @kind object;
  #L3e9f60.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e9f66.  v1:= new `qc.c`;
  #L3e9f6a.  call `<init>`(v1) @signature `Lqc/c;.<init>:()V` @kind direct;
  #L3e9f70.  v0.`mc.i$a.o` @type ^`qc.c` := v1 @kind object;
  #L3e9f74.  return @kind void;
}
procedure `void` `a`(`mc.i$a` v11 @kind this, `boolean` v12 ) @signature `Lmc/i$a;.a:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3ea068.  v0:= v11.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea06c.  @monitorenter v0
  #L3ea06e.  v1:= v11.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea072.  v1:= v1.`mc.i.k` @type ^`mc.i$c` @kind object;
  #L3ea076.  call `k`(v1) @signature `Lqc/a;.k:()V` @kind virtual;
  #L3ea07c.  v1:= v11.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea080.  v2:= v1.`mc.i.b` @type ^`long` @kind wide;
  #L3ea084.  v4:= 0L;
  #L3ea088.  v6:= lcmp(v2, v4);
  #L3ea08c.  if v6 > 0 then goto L3ea0b0;
  #L3ea090.  v2:= v11.`mc.i$a.q` @type ^`boolean` @kind boolean;
  #L3ea094.  if v2 != 0 then goto L3ea0b0;
  #L3ea098.  v2:= v11.`mc.i$a.p` @type ^`boolean` @kind boolean;
  #L3ea09c.  if v2 != 0 then goto L3ea0b0;
  #L3ea0a0.  v2:= v1.`mc.i.l` @type ^`mc.b` @kind object;
  #L3ea0a4.  if v2 != 0 then goto L3ea0b0;
  #L3ea0a8.  call `t`(v1) @signature `Lmc/i;.t:()V` @kind virtual;
  #L3ea0ae.  goto L3ea07c;
  #L3ea0b0.  v1:= v1.`mc.i.k` @type ^`mc.i$c` @kind object;
  #L3ea0b4.  call `u`(v1) @signature `Lmc/i$c;.u:()V` @kind virtual;
  #L3ea0ba.  v1:= v11.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea0be.  call `e`(v1) @signature `Lmc/i;.e:()V` @kind virtual;
  #L3ea0c4.  v1:= v11.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea0c8.  v1:= v1.`mc.i.b` @type ^`long` @kind wide;
  #L3ea0cc.  v3:= v11.`mc.i$a.o` @type ^`qc.c` @kind object;
  #L3ea0d0.  call temp:= `h0`(v3) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L3ea0d6.  v3:= temp @kind wide;
  #L3ea0d8.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3ea0de.  v9:= temp @kind wide;
  #L3ea0e0.  v1:= v11.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea0e4.  v2:= v1.`mc.i.b` @type ^`long` @kind wide;
  #L3ea0e8.  v2:= v2 - v9 @kind long;
  #L3ea0ea.  v1.`mc.i.b` @type ^`long` := v2 @kind wide;
  #L3ea0ee.  @monitorexit v0
  #L3ea0f0.  v0:= v1.`mc.i.k` @type ^`mc.i$c` @kind object;
  #L3ea0f4.  call `k`(v0) @signature `Lqc/a;.k:()V` @kind virtual;
  #L3ea0fa.  v0:= v11.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea0fe.  v5:= v0.`mc.i.d` @type ^`mc.g` @kind object;
  #L3ea102.  v6:= v0.`mc.i.c` @type ^`int`;
  #L3ea106.  if v12 == 0 then goto L3ea124;
  #L3ea10a.  v12:= v11.`mc.i$a.o` @type ^`qc.c` @kind object;
  #L3ea10e.  call temp:= `h0`(v12) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L3ea114.  v0:= temp @kind wide;
  #L3ea116.  v12:= lcmp(v9, v0);
  #L3ea11a.  if v12 != 0 then goto L3ea124;
  #L3ea11e.  v12:= 1I;
  #L3ea120.  v7:= 1I;
  #L3ea122.  goto L3ea128;
  #L3ea124.  v12:= 0I;
  #L3ea126.  v7:= 0I;
  #L3ea128.  v8:= v11.`mc.i$a.o` @type ^`qc.c` @kind object;
  #L3ea12c.  call `m0`(v5, v6, v7, v8, v9) @signature `Lmc/g;.m0:(IZLqc/c;J)V` @kind virtual;
  #L3ea132.  v12:= v11.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea136.  v12:= v12.`mc.i.k` @type ^`mc.i$c` @kind object;
  #L3ea13a.  call `u`(v12) @signature `Lmc/i$c;.u:()V` @kind virtual;
  #L3ea140.  return @kind void;
  #L3ea142.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ea144.  v0:= v11.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea148.  v0:= v0.`mc.i.k` @type ^`mc.i$c` @kind object;
  #L3ea14c.  call `u`(v0) @signature `Lmc/i$c;.u:()V` @kind virtual;
  #L3ea152.  throw v12;
  #L3ea154.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ea156.  v1:= v11.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea15a.  v1:= v1.`mc.i.k` @type ^`mc.i$c` @kind object;
  #L3ea15e.  call `u`(v1) @signature `Lmc/i$c;.u:()V` @kind virtual;
  #L3ea164.  throw v12;
  #L3ea166.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ea168.  @monitorexit v0
  #L3ea16a.  throw v12;
  catch `java.lang.Throwable` @[L3ea06e..L3ea07c] goto L3ea166;
  catch `java.lang.Throwable` @[L3ea07c..L3ea0ae] goto L3ea154;
  catch `java.lang.Throwable` @[L3ea0b0..L3ea0f0] goto L3ea166;
  catch `java.lang.Throwable` @[L3ea0fa..L3ea132] goto L3ea142;
  catch `java.lang.Throwable` @[L3ea156..L3ea16a] goto L3ea166;
}
procedure `void` `close`(`mc.i$a` v8 @kind this) @signature `Lmc/i$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3e9f88.  v0:= v8.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3e9f8c.  @monitorenter v0
  #L3e9f8e.  v1:= v8.`mc.i$a.p` @type ^`boolean` @kind boolean;
  #L3e9f92.  if v1 == 0 then goto L3e9f9a;
  #L3e9f96.  @monitorexit v0
  #L3e9f98.  return @kind void;
  #L3e9f9a.  @monitorexit v0
  #L3e9f9c.  v0:= v8.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3e9fa0.  v0:= v0.`mc.i.i` @type ^`mc.i$a` @kind object;
  #L3e9fa4.  v0:= v0.`mc.i$a.q` @type ^`boolean` @kind boolean;
  #L3e9fa8.  v1:= 1I;
  #L3e9faa.  if v0 != 0 then goto L3e9ffc;
  #L3e9fae.  v0:= v8.`mc.i$a.o` @type ^`qc.c` @kind object;
  #L3e9fb2.  call temp:= `h0`(v0) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L3e9fb8.  v2:= temp @kind wide;
  #L3e9fba.  v4:= 0L;
  #L3e9fbe.  v0:= lcmp(v2, v4);
  #L3e9fc2.  if v0 <= 0 then goto L3e9fe2;
  #L3e9fc6.  v0:= v8.`mc.i$a.o` @type ^`qc.c` @kind object;
  #L3e9fca.  call temp:= `h0`(v0) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L3e9fd0.  v2:= temp @kind wide;
  #L3e9fd2.  v0:= lcmp(v2, v4);
  #L3e9fd6.  if v0 <= 0 then goto L3e9ffc;
  #L3e9fda.  call `a`(v8, v1) @signature `Lmc/i$a;.a:(Z)V` @kind direct;
  #L3e9fe0.  goto L3e9fc6;
  #L3e9fe2.  v0:= v8.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3e9fe6.  v2:= v0.`mc.i.d` @type ^`mc.g` @kind object;
  #L3e9fea.  v3:= v0.`mc.i.c` @type ^`int`;
  #L3e9fee.  v4:= 1I;
  #L3e9ff0.  v5:= 0I;
  #L3e9ff2.  v6:= 0L;
  #L3e9ff6.  call `m0`(v2, v3, v4, v5, v6) @signature `Lmc/g;.m0:(IZLqc/c;J)V` @kind virtual;
  #L3e9ffc.  v2:= v8.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea000.  @monitorenter v2
  #L3ea002.  v8.`mc.i$a.p` @type ^`boolean` := v1 @kind boolean;
  #L3ea006.  @monitorexit v2
  #L3ea008.  v0:= v8.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea00c.  v0:= v0.`mc.i.d` @type ^`mc.g` @kind object;
  #L3ea010.  call `flush`(v0) @signature `Lmc/g;.flush:()V` @kind virtual;
  #L3ea016.  v0:= v8.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea01a.  call `d`(v0) @signature `Lmc/i;.d:()V` @kind virtual;
  #L3ea020.  return @kind void;
  #L3ea022.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ea024.  @monitorexit v2
  #L3ea026.  throw v0;
  #L3ea028.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ea02a.  @monitorexit v0
  #L3ea02c.  throw v1;
  catch `java.lang.Throwable` @[L3e9f8e..L3e9f9c] goto L3ea028;
  catch `java.lang.Throwable` @[L3ea002..L3ea008] goto L3ea022;
  catch `java.lang.Throwable` @[L3ea024..L3ea026] goto L3ea022;
  catch `java.lang.Throwable` @[L3ea02a..L3ea02c] goto L3ea028;
}
procedure `qc.t` `f`(`mc.i$a` v1 @kind this) @signature `Lmc/i$a;.f:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9f2c.  v0:= v1.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3e9f30.  v0:= v0.`mc.i.k` @type ^`mc.i$c` @kind object;
  #L3e9f34.  return v0 @kind object;
}
procedure `void` `flush`(`mc.i$a` v5 @kind this) @signature `Lmc/i$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ea1ac.  v0:= v5.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea1b0.  @monitorenter v0
  #L3ea1b2.  v1:= v5.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea1b6.  call `e`(v1) @signature `Lmc/i;.e:()V` @kind virtual;
  #L3ea1bc.  @monitorexit v0
  #L3ea1be.  v0:= v5.`mc.i$a.o` @type ^`qc.c` @kind object;
  #L3ea1c2.  call temp:= `h0`(v0) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L3ea1c8.  v0:= temp @kind wide;
  #L3ea1ca.  v2:= 0L;
  #L3ea1ce.  v4:= lcmp(v0, v2);
  #L3ea1d2.  if v4 <= 0 then goto L3ea1ee;
  #L3ea1d6.  v0:= 0I;
  #L3ea1d8.  call `a`(v5, v0) @signature `Lmc/i$a;.a:(Z)V` @kind direct;
  #L3ea1de.  v0:= v5.`mc.i$a.r` @type ^`mc.i` @kind object;
  #L3ea1e2.  v0:= v0.`mc.i.d` @type ^`mc.g` @kind object;
  #L3ea1e6.  call `flush`(v0) @signature `Lmc/g;.flush:()V` @kind virtual;
  #L3ea1ec.  goto L3ea1be;
  #L3ea1ee.  return @kind void;
  #L3ea1f0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ea1f2.  @monitorexit v0
  #L3ea1f4.  throw v1;
  catch `java.lang.Throwable` @[L3ea1b2..L3ea1be] goto L3ea1f0;
  catch `java.lang.Throwable` @[L3ea1f2..L3ea1f4] goto L3ea1f0;
}
procedure `void` `q`(`mc.i$a` v2 @kind this, `qc.c` v3 @kind object, `long` v4 ) @signature `Lmc/i$a;.q:(Lqc/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ea21c.  v0:= v2.`mc.i$a.o` @type ^`qc.c` @kind object;
  #L3ea220.  call `q`(v0, v3, v4) @signature `Lqc/c;.q:(Lqc/c;J)V` @kind virtual;
  #L3ea226.  v3:= v2.`mc.i$a.o` @type ^`qc.c` @kind object;
  #L3ea22a.  call temp:= `h0`(v3) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L3ea230.  v3:= temp @kind wide;
  #L3ea232.  v0:= 16384L;
  #L3ea236.  v5:= lcmp(v3, v0);
  #L3ea23a.  if v5 < 0 then goto L3ea248;
  #L3ea23e.  v3:= 0I;
  #L3ea240.  call `a`(v2, v3) @signature `Lmc/i$a;.a:(Z)V` @kind direct;
  #L3ea246.  goto L3ea226;
  #L3ea248.  return @kind void;
}
