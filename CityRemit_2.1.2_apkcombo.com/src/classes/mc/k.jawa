record `mc.k` @kind class @AccessFlag  {
  `mc.k$a` `mc.k.a` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@mc.k.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@mc.k.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `mc.k` `@@mc.k.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lmc/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ebce8.  v0:= 256I;
  #L3ebcec.  v1:= new `int`[v0];
  #L3ebcf0.  goto L3ebd18;
  #L3ebcf6.  `@@mc.k.b` @type ^`int`[] := v1 @kind object;
  #L3ebcfa.  v0:= new `byte`[v0];
  #L3ebcfe.  goto L3ec120;
  #L3ebd04.  `@@mc.k.c` @type ^`byte`[] := v0 @kind object;
  #L3ebd08.  v0:= new `mc.k`;
  #L3ebd0c.  call `<init>`(v0) @signature `Lmc/k;.<init>:()V` @kind direct;
  #L3ebd12.  `@@mc.k.d` @type ^`mc.k` := v0 @kind object;
  #L3ebd16.  return @kind void;
  #L3ebd18.  v1:= (8184I, 8388568I, 268435426I, 268435427I, 268435428I, 268435429I, 268435430I, 268435431I, 268435432I, 16777194I, 1073741820I, 268435433I, 268435434I, 1073741821I, 268435435I, 268435436I, 268435437I, 268435438I, 268435439I, 268435440I, 268435441I, 268435442I, 1073741822I, 268435443I, 268435444I, 268435445I, 268435446I, 268435447I, 268435448I, 268435449I, 268435450I, 268435451I, 20I, 1016I, 1017I, 4090I, 8185I, 21I, 248I, 2042I, 1018I, 1019I, 249I, 2043I, 250I, 22I, 23I, 24I, 0I, 1I, 2I, 25I, 26I, 27I, 28I, 29I, 30I, 31I, 92I, 251I, 32764I, 32I, 4091I, 1020I, 8186I, 33I, 93I, 94I, 95I, 96I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 252I, 115I, 253I, 8187I, 524272I, 8188I, 16380I, 34I, 32765I, 3I, 35I, 4I, 36I, 5I, 37I, 38I, 39I, 6I, 116I, 117I, 40I, 41I, 42I, 7I, 43I, 118I, 44I, 8I, 9I, 45I, 119I, 120I, 121I, 122I, 123I, 32766I, 2044I, 16381I, 8189I, 268435452I, 1048550I, 4194258I, 1048551I, 1048552I, 4194259I, 4194260I, 4194261I, 8388569I, 4194262I, 8388570I, 8388571I, 8388572I, 8388573I, 8388574I, 16777195I, 8388575I, 16777196I, 16777197I, 4194263I, 8388576I, 16777198I, 8388577I, 8388578I, 8388579I, 8388580I, 2097116I, 4194264I, 8388581I, 4194265I, 8388582I, 8388583I, 16777199I, 4194266I, 2097117I, 1048553I, 4194267I, 4194268I, 8388584I, 8388585I, 2097118I, 8388586I, 4194269I, 4194270I, 16777200I, 2097119I, 4194271I, 8388587I, 8388588I, 2097120I, 2097121I, 4194272I, 2097122I, 8388589I, 4194273I, 8388590I, 8388591I, 1048554I, 4194274I, 4194275I, 4194276I, 8388592I, 4194277I, 4194278I, 8388593I, 67108832I, 67108833I, 1048555I, 524273I, 4194279I, 8388594I, 4194280I, 33554412I, 67108834I, 67108835I, 67108836I, 134217694I, 134217695I, 67108837I, 16777201I, 33554413I, 524274I, 2097123I, 67108838I, 134217696I, 134217697I, 67108839I, 134217698I, 16777202I, 2097124I, 2097125I, 67108840I, 67108841I, 268435453I, 134217699I, 134217700I, 134217701I, 1048556I, 16777203I, 1048557I, 2097126I, 4194281I, 2097127I, 2097128I, 8388595I, 4194282I, 4194283I, 33554414I, 33554415I, 16777204I, 16777205I, 67108842I, 8388596I, 67108843I, 134217702I, 67108844I, 67108845I, 134217703I, 134217704I, 134217705I, 134217706I, 134217707I, 268435454I, 134217708I, 134217709I, 134217710I, 134217711I, 134217712I, 67108846I) @kind object;
  #L3ec11f.  goto L3ebcf6;
  #L3ec120.  v0:= (13I, 23I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 24I, 30I, 28I, 28I, 30I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 30I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 6I, 10I, 10I, 12I, 13I, 6I, 8I, 11I, 10I, 10I, 8I, 11I, 8I, 6I, 6I, 6I, 5I, 5I, 5I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 8I, 15I, 6I, 12I, 10I, 13I, 6I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 8I, 7I, 8I, 13I, 19I, 13I, 14I, 6I, 15I, 5I, 6I, 5I, 6I, 5I, 6I, 6I, 6I, 5I, 7I, 7I, 6I, 6I, 6I, 5I, 6I, 7I, 6I, 5I, 5I, 6I, 7I, 7I, 7I, 7I, 7I, 15I, 11I, 14I, 13I, 28I, 20I, 22I, 20I, 20I, 22I, 22I, 22I, 23I, 22I, 23I, 23I, 23I, 23I, 23I, 24I, 23I, 24I, 24I, 22I, 23I, 24I, 23I, 23I, 23I, 23I, 21I, 22I, 23I, 22I, 23I, 23I, 24I, 22I, 21I, 20I, 22I, 22I, 23I, 23I, 21I, 23I, 22I, 22I, 24I, 21I, 22I, 23I, 23I, 21I, 21I, 22I, 21I, 23I, 22I, 23I, 23I, 20I, 22I, 22I, 22I, 23I, 22I, 22I, 23I, 26I, 26I, 20I, 19I, 22I, 23I, 22I, 25I, 26I, 26I, 26I, 27I, 27I, 26I, 24I, 25I, 19I, 21I, 26I, 27I, 27I, 26I, 27I, 24I, 21I, 21I, 26I, 26I, 28I, 27I, 27I, 27I, 20I, 24I, 20I, 21I, 22I, 21I, 21I, 23I, 22I, 22I, 25I, 25I, 24I, 24I, 26I, 23I, 26I, 27I, 26I, 26I, 27I, 27I, 27I, 27I, 27I, 28I, 27I, 27I, 27I, 27I, 27I, 26I) @kind object;
  #L3ec227.  goto L3ebd04;
}
procedure `void` `<init>`(`mc.k` v1 @kind this) @signature `Lmc/k;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3ec238.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ec23e.  v0:= new `mc.k$a`;
  #L3ec242.  call `<init>`(v0) @signature `Lmc/k$a;.<init>:()V` @kind direct;
  #L3ec248.  v1.`mc.k.a` @type ^`mc.k$a` := v0 @kind object;
  #L3ec24c.  call `b`(v1) @signature `Lmc/k;.b:()V` @kind direct;
  #L3ec252.  return @kind void;
}
procedure `void` `a`(`mc.k` v4 @kind this, `int` v5 , `int` v6 , `byte` v7 ) @signature `Lmc/k;.a:(IIB)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ec264.  v0:= new `mc.k$a`;
  #L3ec268.  call `<init>`(v0, v5, v7) @signature `Lmc/k$a;.<init>:(II)V` @kind direct;
  #L3ec26e.  v5:= v4.`mc.k.a` @type ^`mc.k$a` @kind object;
  #L3ec272.  v1:= 8I;
  #L3ec276.  if v7 <= v1 then goto L3ec2c0;
  #L3ec27a.  v7:= v7 + -8;
  #L3ec27e.  v7:= (`byte`) v7 @kind i2b;
  #L3ec280.  v1:= v6 ^>> v7 @kind int;
  #L3ec284.  v1:= v1 ^& 255;
  #L3ec288.  v2:= v5.`mc.k$a.a` @type ^`mc.k$a`[] @kind object;
  #L3ec28c.  if v2 == 0 then goto L3ec2b0;
  #L3ec290.  v3:= v2[v1] @kind object;
  #L3ec294.  if v3 != 0 then goto L3ec2a6;
  #L3ec298.  v3:= new `mc.k$a`;
  #L3ec29c.  call `<init>`(v3) @signature `Lmc/k$a;.<init>:()V` @kind direct;
  #L3ec2a2.  v2[v1]:= v3 @kind object;
  #L3ec2a6.  v5:= v5.`mc.k$a.a` @type ^`mc.k$a`[] @kind object;
  #L3ec2aa.  v5:= v5[v1] @kind object;
  #L3ec2ae.  goto L3ec272;
  #L3ec2b0.  v5:= new `java.lang.IllegalStateException`;
  #L3ec2b4.  v6:= "invalid dictionary: prefix not unique" @kind object;
  #L3ec2b8.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ec2be.  throw v5;
  #L3ec2c0.  v1:= v1 - v7 @kind int;
  #L3ec2c2.  v6:= v6 ^< v1 @kind int;
  #L3ec2c4.  v6:= v6 ^& 255;
  #L3ec2c8.  v7:= 1I;
  #L3ec2ca.  v7:= v7 ^< v1 @kind int;
  #L3ec2cc.  v1:= v6;
  #L3ec2ce.  v2:= v6 + v7 @kind int;
  #L3ec2d2.  if v1 >= v2 then goto L3ec2e4;
  #L3ec2d6.  v2:= v5.`mc.k$a.a` @type ^`mc.k$a`[] @kind object;
  #L3ec2da.  v2[v1]:= v0 @kind object;
  #L3ec2de.  v1:= v1 + 1;
  #L3ec2e2.  goto L3ec2ce;
  #L3ec2e4.  return @kind void;
}
procedure `void` `b`(`mc.k` v3 @kind this) @signature `Lmc/k;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ec2f8.  v0:= 0I;
  #L3ec2fa.  v1:= `@@mc.k.c` @type ^`byte`[] @kind object;
  #L3ec2fe.  v2:= length @variable v1;
  #L3ec300.  if v0 >= v2 then goto L3ec31c;
  #L3ec304.  v2:= `@@mc.k.b` @type ^`int`[] @kind object;
  #L3ec308.  v2:= v2[v0];
  #L3ec30c.  v1:= v1[v0] @kind byte;
  #L3ec310.  call `a`(v3, v0, v2, v1) @signature `Lmc/k;.a:(IIB)V` @kind direct;
  #L3ec316.  v0:= v0 + 1;
  #L3ec31a.  goto L3ec2fa;
  #L3ec31c.  return @kind void;
}
procedure `mc.k` `f`() @signature `Lmc/k;.f:()Lmc/k;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ebcd0.  v0:= `@@mc.k.d` @type ^`mc.k` @kind object;
  #L3ebcd4.  return v0 @kind object;
}
procedure `byte`[] `c`(`mc.k` v6 @kind this, `byte`[] v7 @kind object) @signature `Lmc/k;.c:([B)[B` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ebbb4.  v0:= new `java.io.ByteArrayOutputStream`;
  #L3ebbb8.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L3ebbbe.  v1:= v6.`mc.k.a` @type ^`mc.k$a` @kind object;
  #L3ebbc2.  v2:= 0I;
  #L3ebbc4.  v3:= 0I;
  #L3ebbc6.  v4:= 0I;
  #L3ebbc8.  v5:= length @variable v7;
  #L3ebbca.  if v2 >= v5 then goto L3ebc26;
  #L3ebbce.  v5:= v7[v2] @kind byte;
  #L3ebbd2.  v5:= v5 ^& 255;
  #L3ebbd6.  v3:= v3 ^< 8;
  #L3ebbda.  v3:= v3 ^| v5 @kind int;
  #L3ebbdc.  v4:= v4 + 8;
  #L3ebbe0.  v5:= 8I;
  #L3ebbe4.  if v4 < v5 then goto L3ebc20;
  #L3ebbe8.  v5:= v4 + -8;
  #L3ebbec.  v5:= v3 ^>> v5 @kind int;
  #L3ebbf0.  v5:= v5 ^& 255;
  #L3ebbf4.  v1:= v1.`mc.k$a.a` @type ^`mc.k$a`[] @kind object;
  #L3ebbf8.  v1:= v1[v5] @kind object;
  #L3ebbfc.  v5:= v1.`mc.k$a.a` @type ^`mc.k$a`[] @kind object;
  #L3ebc00.  if v5 != 0 then goto L3ebc1a;
  #L3ebc04.  v5:= v1.`mc.k$a.b` @type ^`int`;
  #L3ebc08.  call `write`(v0, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:(I)V` @kind virtual;
  #L3ebc0e.  v1:= v1.`mc.k$a.c` @type ^`int`;
  #L3ebc12.  v4:= v4 - v1 @kind int;
  #L3ebc14.  v1:= v6.`mc.k.a` @type ^`mc.k$a` @kind object;
  #L3ebc18.  goto L3ebbe0;
  #L3ebc1a.  v4:= v4 + -8;
  #L3ebc1e.  goto L3ebbe0;
  #L3ebc20.  v2:= v2 + 1;
  #L3ebc24.  goto L3ebbc8;
  #L3ebc26.  if v4 <= 0 then goto L3ebc66;
  #L3ebc2a.  v7:= v4 - 8;
  #L3ebc2e.  v7:= v3 ^< v7 @kind int;
  #L3ebc32.  v7:= v7 ^& 255;
  #L3ebc36.  v1:= v1.`mc.k$a.a` @type ^`mc.k$a`[] @kind object;
  #L3ebc3a.  v7:= v1[v7] @kind object;
  #L3ebc3e.  v1:= v7.`mc.k$a.a` @type ^`mc.k$a`[] @kind object;
  #L3ebc42.  if v1 != 0 then goto L3ebc66;
  #L3ebc46.  v1:= v7.`mc.k$a.c` @type ^`int`;
  #L3ebc4a.  if v1 <= v4 then goto L3ebc50;
  #L3ebc4e.  goto L3ebc66;
  #L3ebc50.  v1:= v7.`mc.k$a.b` @type ^`int`;
  #L3ebc54.  call `write`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.write:(I)V` @kind virtual;
  #L3ebc5a.  v7:= v7.`mc.k$a.c` @type ^`int`;
  #L3ebc5e.  v4:= v4 - v7 @kind int;
  #L3ebc60.  v1:= v6.`mc.k.a` @type ^`mc.k$a` @kind object;
  #L3ebc64.  goto L3ebc26;
  #L3ebc66.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L3ebc6c.  v7:= temp @kind object;
  #L3ebc6e.  return v7 @kind object;
}
procedure `void` `d`(`mc.k` v7 @kind this, `qc.f` v8 @kind object, `qc.d` v9 @kind object) @signature `Lmc/k;.d:(Lqc/f;Lqc/d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ec330.  v0:= 0I;
  #L3ec332.  v1:= 0L;
  #L3ec336.  v2:= v1 @kind wide;
  #L3ec338.  v1:= 0I;
  #L3ec33a.  call temp:= `D`(v8) @signature `Lqc/f;.D:()I` @kind virtual;
  #L3ec340.  v4:= temp;
  #L3ec342.  v5:= 255I;
  #L3ec346.  if v0 >= v4 then goto L3ec38c;
  #L3ec34a.  call temp:= `o`(v8, v0) @signature `Lqc/f;.o:(I)B` @kind virtual;
  #L3ec350.  v4:= temp;
  #L3ec352.  v4:= v4 ^& v5 @kind int;
  #L3ec354.  v5:= `@@mc.k.b` @type ^`int`[] @kind object;
  #L3ec358.  v5:= v5[v4];
  #L3ec35c.  v6:= `@@mc.k.c` @type ^`byte`[] @kind object;
  #L3ec360.  v4:= v6[v4] @kind byte;
  #L3ec364.  v2:= v2 ^< v4 @kind long;
  #L3ec366.  v5:= (`long`) v5 @kind i2l;
  #L3ec368.  v2:= v2 ^| v5 @kind long;
  #L3ec36a.  v1:= v1 + v4 @kind int;
  #L3ec36c.  v4:= 8I;
  #L3ec370.  if v1 < v4 then goto L3ec386;
  #L3ec374.  v1:= v1 + -8;
  #L3ec378.  v4:= v2 ^> v1 @kind long;
  #L3ec37c.  v5:= (`int`) v4 @kind l2i;
  #L3ec37e.  call temp:= `A`(v9, v5) @signature `Lqc/d;.A:(I)Lqc/d;` @kind interface;
  #L3ec384.  goto L3ec36c;
  #L3ec386.  v0:= v0 + 1;
  #L3ec38a.  goto L3ec33a;
  #L3ec38c.  if v1 <= 0 then goto L3ec3a6;
  #L3ec390.  v8:= v1 - 8;
  #L3ec394.  v2:= v2 ^< v8 @kind long;
  #L3ec396.  v8:= v5 ^>> v1 @kind int;
  #L3ec39a.  v0:= (`long`) v8 @kind i2l;
  #L3ec39c.  v0:= v0 ^| v2 @kind long;
  #L3ec39e.  v8:= (`int`) v0 @kind l2i;
  #L3ec3a0.  call temp:= `A`(v9, v8) @signature `Lqc/d;.A:(I)Lqc/d;` @kind interface;
  #L3ec3a6.  return @kind void;
}
procedure `int` `e`(`mc.k` v5 @kind this, `qc.f` v6 @kind object) @signature `Lmc/k;.e:(Lqc/f;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ebc80.  v0:= 0L;
  #L3ebc84.  v2:= 0I;
  #L3ebc86.  call temp:= `D`(v6) @signature `Lqc/f;.D:()I` @kind virtual;
  #L3ebc8c.  v3:= temp;
  #L3ebc8e.  if v2 >= v3 then goto L3ebcb0;
  #L3ebc92.  call temp:= `o`(v6, v2) @signature `Lqc/f;.o:(I)B` @kind virtual;
  #L3ebc98.  v3:= temp;
  #L3ebc9a.  v3:= v3 ^& 255;
  #L3ebc9e.  v4:= `@@mc.k.c` @type ^`byte`[] @kind object;
  #L3ebca2.  v3:= v4[v3] @kind byte;
  #L3ebca6.  v3:= (`long`) v3 @kind i2l;
  #L3ebca8.  v0:= v0 + v3 @kind long;
  #L3ebcaa.  v2:= v2 + 1;
  #L3ebcae.  goto L3ebc86;
  #L3ebcb0.  v2:= 7L;
  #L3ebcb4.  v0:= v0 + v2 @kind long;
  #L3ebcb6.  v6:= 3I;
  #L3ebcb8.  v0:= v0 ^> v6 @kind long;
  #L3ebcba.  v6:= (`int`) v0 @kind l2i;
  #L3ebcbc.  return v6;
}
