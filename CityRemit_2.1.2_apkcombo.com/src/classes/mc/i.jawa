record `mc.i` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `mc.i.a` @AccessFlag ;
  `long` `mc.i.b` @AccessFlag ;
  `int` `mc.i.c` @AccessFlag FINAL;
  `mc.g` `mc.i.d` @AccessFlag FINAL;
  `java.util.Deque` `mc.i.e` @AccessFlag PRIVATE_FINAL;
  `mc.c$a` `mc.i.f` @AccessFlag PRIVATE;
  `boolean` `mc.i.g` @AccessFlag PRIVATE;
  `mc.i$b` `mc.i.h` @AccessFlag PRIVATE_FINAL;
  `mc.i$a` `mc.i.i` @AccessFlag FINAL;
  `mc.i$c` `mc.i.j` @AccessFlag FINAL;
  `mc.i$c` `mc.i.k` @AccessFlag FINAL;
  `mc.b` `mc.i.l` @AccessFlag ;
}
procedure `void` `<clinit>`() @signature `Lmc/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L3eaac8.  return @kind void;
}
procedure `void` `<init>`(`mc.i` v3 @kind this, `int` v4 , `mc.g` v5 @kind object, `boolean` v6 , `boolean` v7 , `gc.q` v8 @kind object) @signature `Lmc/i;.<init>:(ILmc/g;ZZLgc/q;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3eaadc.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3eaae2.  v0:= 0L;
  #L3eaae6.  v3.`mc.i.a` @type ^`long` := v0 @kind wide;
  #L3eaaea.  v0:= new `java.util.ArrayDeque`;
  #L3eaaee.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L3eaaf4.  v3.`mc.i.e` @type ^`java.util.Deque` := v0 @kind object;
  #L3eaaf8.  v1:= new `mc.i$c`;
  #L3eaafc.  call `<init>`(v1, v3) @signature `Lmc/i$c;.<init>:(Lmc/i;)V` @kind direct;
  #L3eab02.  v3.`mc.i.j` @type ^`mc.i$c` := v1 @kind object;
  #L3eab06.  v1:= new `mc.i$c`;
  #L3eab0a.  call `<init>`(v1, v3) @signature `Lmc/i$c;.<init>:(Lmc/i;)V` @kind direct;
  #L3eab10.  v3.`mc.i.k` @type ^`mc.i$c` := v1 @kind object;
  #L3eab14.  v1:= 0I;
  #L3eab16.  v3.`mc.i.l` @type ^`mc.b` := v1 @kind object;
  #L3eab1a.  v1:= "connection == null" @kind object;
  #L3eab1e.  call temp:= `requireNonNull`(v5, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3eab24.  v3.`mc.i.c` @type ^`int` := v4;
  #L3eab28.  v3.`mc.i.d` @type ^`mc.g` := v5 @kind object;
  #L3eab2c.  v4:= v5.`mc.g.H` @type ^`mc.m` @kind object;
  #L3eab30.  call temp:= `d`(v4) @signature `Lmc/m;.d:()I` @kind virtual;
  #L3eab36.  v4:= temp;
  #L3eab38.  v1:= (`long`) v4 @kind i2l;
  #L3eab3a.  v3.`mc.i.b` @type ^`long` := v1 @kind wide;
  #L3eab3e.  v4:= new `mc.i$b`;
  #L3eab42.  v5:= v5.`mc.g.G` @type ^`mc.m` @kind object;
  #L3eab46.  call temp:= `d`(v5) @signature `Lmc/m;.d:()I` @kind virtual;
  #L3eab4c.  v5:= temp;
  #L3eab4e.  v1:= (`long`) v5 @kind i2l;
  #L3eab50.  call `<init>`(v4, v3, v1) @signature `Lmc/i$b;.<init>:(Lmc/i;J)V` @kind direct;
  #L3eab56.  v3.`mc.i.h` @type ^`mc.i$b` := v4 @kind object;
  #L3eab5a.  v5:= new `mc.i$a`;
  #L3eab5e.  call `<init>`(v5, v3) @signature `Lmc/i$a;.<init>:(Lmc/i;)V` @kind direct;
  #L3eab64.  v3.`mc.i.i` @type ^`mc.i$a` := v5 @kind object;
  #L3eab68.  v4.`mc.i$b.s` @type ^`boolean` := v7 @kind boolean;
  #L3eab6c.  v5.`mc.i$a.q` @type ^`boolean` := v6 @kind boolean;
  #L3eab70.  if v8 == 0 then goto L3eab7a;
  #L3eab74.  call temp:= `add`(v0, v8) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eab7a.  call temp:= `l`(v3) @signature `Lmc/i;.l:()Z` @kind virtual;
  #L3eab80.  v4:= temp;
  #L3eab82.  if v4 == 0 then goto L3eab9c;
  #L3eab86.  if v8 != 0 then goto L3eab8c;
  #L3eab8a.  goto L3eab9c;
  #L3eab8c.  v4:= new `java.lang.IllegalStateException`;
  #L3eab90.  v5:= "locally-initiated streams shouldn't have headers yet" @kind object;
  #L3eab94.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eab9a.  throw v4;
  #L3eab9c.  call temp:= `l`(v3) @signature `Lmc/i;.l:()Z` @kind virtual;
  #L3eaba2.  v4:= temp;
  #L3eaba4.  if v4 != 0 then goto L3eabbe;
  #L3eaba8.  if v8 == 0 then goto L3eabae;
  #L3eabac.  goto L3eabbe;
  #L3eabae.  v4:= new `java.lang.IllegalStateException`;
  #L3eabb2.  v5:= "remotely-initiated streams should have headers" @kind object;
  #L3eabb6.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eabbc.  throw v4;
  #L3eabbe.  return @kind void;
}
procedure `java.util.Deque` `a`(`mc.i` v0 @kind object) @signature `Lmc/i;.a:(Lmc/i;)Ljava/util/Deque;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3ea9f4.  v0:= v0.`mc.i.e` @type ^`java.util.Deque` @kind object;
  #L3ea9f8.  return v0 @kind object;
}
procedure `mc.c$a` `b`(`mc.i` v0 @kind object) @signature `Lmc/i;.b:(Lmc/i;)Lmc/c$a;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3eaa0c.  v0:= v0.`mc.i.f` @type ^`mc.c$a` @kind object;
  #L3eaa10.  return v0 @kind object;
}
procedure `boolean` `g`(`mc.i` v2 @kind this, `mc.b` v3 @kind object) @signature `Lmc/i;.g:(Lmc/b;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ea804.  @monitorenter v2
  #L3ea806.  v0:= v2.`mc.i.l` @type ^`mc.b` @kind object;
  #L3ea80a.  v1:= 0I;
  #L3ea80c.  if v0 == 0 then goto L3ea814;
  #L3ea810.  @monitorexit v2
  #L3ea812.  return v1;
  #L3ea814.  v0:= v2.`mc.i.h` @type ^`mc.i$b` @kind object;
  #L3ea818.  v0:= v0.`mc.i$b.s` @type ^`boolean` @kind boolean;
  #L3ea81c.  if v0 == 0 then goto L3ea830;
  #L3ea820.  v0:= v2.`mc.i.i` @type ^`mc.i$a` @kind object;
  #L3ea824.  v0:= v0.`mc.i$a.q` @type ^`boolean` @kind boolean;
  #L3ea828.  if v0 == 0 then goto L3ea830;
  #L3ea82c.  @monitorexit v2
  #L3ea82e.  return v1;
  #L3ea830.  v2.`mc.i.l` @type ^`mc.b` := v3 @kind object;
  #L3ea834.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3ea83a.  @monitorexit v2
  #L3ea83c.  v3:= v2.`mc.i.d` @type ^`mc.g` @kind object;
  #L3ea840.  v0:= v2.`mc.i.c` @type ^`int`;
  #L3ea844.  call temp:= `g0`(v3, v0) @signature `Lmc/g;.g0:(I)Lmc/i;` @kind virtual;
  #L3ea84a.  v3:= 1I;
  #L3ea84c.  return v3;
  #L3ea84e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ea850.  @monitorexit v2
  #L3ea852.  throw v3;
  catch `java.lang.Throwable` @[L3ea806..L3ea83c] goto L3ea84e;
  catch `java.lang.Throwable` @[L3ea850..L3ea852] goto L3ea84e;
}
procedure `void` `c`(`mc.i` v3 @kind this, `long` v4 ) @signature `Lmc/i;.c:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3eabd0.  v0:= v3.`mc.i.b` @type ^`long` @kind wide;
  #L3eabd4.  v0:= v0 + v4 @kind long;
  #L3eabd6.  v3.`mc.i.b` @type ^`long` := v0 @kind wide;
  #L3eabda.  v0:= 0L;
  #L3eabde.  v2:= lcmp(v4, v0);
  #L3eabe2.  if v2 <= 0 then goto L3eabec;
  #L3eabe6.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3eabec.  return @kind void;
}
procedure `void` `d`(`mc.i` v2 @kind this) @signature `Lmc/i;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3eac00.  @monitorenter v2
  #L3eac02.  v0:= v2.`mc.i.h` @type ^`mc.i$b` @kind object;
  #L3eac06.  v1:= v0.`mc.i$b.s` @type ^`boolean` @kind boolean;
  #L3eac0a.  if v1 != 0 then goto L3eac2e;
  #L3eac0e.  v0:= v0.`mc.i$b.r` @type ^`boolean` @kind boolean;
  #L3eac12.  if v0 == 0 then goto L3eac2e;
  #L3eac16.  v0:= v2.`mc.i.i` @type ^`mc.i$a` @kind object;
  #L3eac1a.  v1:= v0.`mc.i$a.q` @type ^`boolean` @kind boolean;
  #L3eac1e.  if v1 != 0 then goto L3eac2a;
  #L3eac22.  v0:= v0.`mc.i$a.p` @type ^`boolean` @kind boolean;
  #L3eac26.  if v0 == 0 then goto L3eac2e;
  #L3eac2a.  v0:= 1I;
  #L3eac2c.  goto L3eac30;
  #L3eac2e.  v0:= 0I;
  #L3eac30.  call temp:= `m`(v2) @signature `Lmc/i;.m:()Z` @kind virtual;
  #L3eac36.  v1:= temp;
  #L3eac38.  @monitorexit v2
  #L3eac3a.  if v0 == 0 then goto L3eac4a;
  #L3eac3e.  v0:= `@@mc.b.u` @type ^`mc.b` @kind object;
  #L3eac42.  call `f`(v2, v0) @signature `Lmc/i;.f:(Lmc/b;)V` @kind virtual;
  #L3eac48.  goto L3eac5c;
  #L3eac4a.  if v1 != 0 then goto L3eac5c;
  #L3eac4e.  v0:= v2.`mc.i.d` @type ^`mc.g` @kind object;
  #L3eac52.  v1:= v2.`mc.i.c` @type ^`int`;
  #L3eac56.  call temp:= `g0`(v0, v1) @signature `Lmc/g;.g0:(I)Lmc/i;` @kind virtual;
  #L3eac5c.  return @kind void;
  #L3eac5e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eac60.  @monitorexit v2
  #L3eac62.  throw v0;
  catch `java.lang.Throwable` @[L3eac02..L3eac3a] goto L3eac5e;
  catch `java.lang.Throwable` @[L3eac60..L3eac62] goto L3eac5e;
}
procedure `void` `e`(`mc.i` v2 @kind this) @signature `Lmc/i;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3eac88.  v0:= v2.`mc.i.i` @type ^`mc.i$a` @kind object;
  #L3eac8c.  v1:= v0.`mc.i$a.p` @type ^`boolean` @kind boolean;
  #L3eac90.  if v1 != 0 then goto L3eacc6;
  #L3eac94.  v0:= v0.`mc.i$a.q` @type ^`boolean` @kind boolean;
  #L3eac98.  if v0 != 0 then goto L3eacb6;
  #L3eac9c.  v0:= v2.`mc.i.l` @type ^`mc.b` @kind object;
  #L3eaca0.  if v0 != 0 then goto L3eaca6;
  #L3eaca4.  return @kind void;
  #L3eaca6.  v0:= new `mc.n`;
  #L3eacaa.  v1:= v2.`mc.i.l` @type ^`mc.b` @kind object;
  #L3eacae.  call `<init>`(v0, v1) @signature `Lmc/n;.<init>:(Lmc/b;)V` @kind direct;
  #L3eacb4.  throw v0;
  #L3eacb6.  v0:= new `java.io.IOException`;
  #L3eacba.  v1:= "stream finished" @kind object;
  #L3eacbe.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eacc4.  throw v0;
  #L3eacc6.  v0:= new `java.io.IOException`;
  #L3eacca.  v1:= "stream closed" @kind object;
  #L3eacce.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eacd4.  throw v0;
}
procedure `void` `f`(`mc.i` v2 @kind this, `mc.b` v3 @kind object) @signature `Lmc/i;.f:(Lmc/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eace8.  call temp:= `g`(v2, v3) @signature `Lmc/i;.g:(Lmc/b;)Z` @kind direct;
  #L3eacee.  v0:= temp;
  #L3eacf0.  if v0 != 0 then goto L3eacf6;
  #L3eacf4.  return @kind void;
  #L3eacf6.  v0:= v2.`mc.i.d` @type ^`mc.g` @kind object;
  #L3eacfa.  v1:= v2.`mc.i.c` @type ^`int`;
  #L3eacfe.  call `o0`(v0, v1, v3) @signature `Lmc/g;.o0:(ILmc/b;)V` @kind virtual;
  #L3ead04.  return @kind void;
}
procedure `void` `h`(`mc.i` v2 @kind this, `mc.b` v3 @kind object) @signature `Lmc/i;.h:(Lmc/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ead18.  call temp:= `g`(v2, v3) @signature `Lmc/i;.g:(Lmc/b;)Z` @kind direct;
  #L3ead1e.  v0:= temp;
  #L3ead20.  if v0 != 0 then goto L3ead26;
  #L3ead24.  return @kind void;
  #L3ead26.  v0:= v2.`mc.i.d` @type ^`mc.g` @kind object;
  #L3ead2a.  v1:= v2.`mc.i.c` @type ^`int`;
  #L3ead2e.  call `p0`(v0, v1, v3) @signature `Lmc/g;.p0:(ILmc/b;)V` @kind virtual;
  #L3ead34.  return @kind void;
}
procedure `int` `i`(`mc.i` v1 @kind this) @signature `Lmc/i;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ea9dc.  v0:= v1.`mc.i.c` @type ^`int`;
  #L3ea9e0.  return v0;
}
procedure `qc.r` `j`(`mc.i` v2 @kind this) @signature `Lmc/i;.j:()Lqc/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eaa24.  @monitorenter v2
  #L3eaa26.  v0:= v2.`mc.i.g` @type ^`boolean` @kind boolean;
  #L3eaa2a.  if v0 != 0 then goto L3eaa4c;
  #L3eaa2e.  call temp:= `l`(v2) @signature `Lmc/i;.l:()Z` @kind virtual;
  #L3eaa34.  v0:= temp;
  #L3eaa36.  if v0 == 0 then goto L3eaa3c;
  #L3eaa3a.  goto L3eaa4c;
  #L3eaa3c.  v0:= new `java.lang.IllegalStateException`;
  #L3eaa40.  v1:= "reply before requesting the sink" @kind object;
  #L3eaa44.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eaa4a.  throw v0;
  #L3eaa4c.  @monitorexit v2
  #L3eaa4e.  v0:= v2.`mc.i.i` @type ^`mc.i$a` @kind object;
  #L3eaa52.  return v0 @kind object;
  #L3eaa54.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eaa56.  @monitorexit v2
  #L3eaa58.  throw v0;
  catch `java.lang.Throwable` @[L3eaa26..L3eaa4e] goto L3eaa54;
  catch `java.lang.Throwable` @[L3eaa56..L3eaa58] goto L3eaa54;
}
procedure `qc.s` `k`(`mc.i` v1 @kind this) @signature `Lmc/i;.k:()Lqc/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eaa80.  v0:= v1.`mc.i.h` @type ^`mc.i$b` @kind object;
  #L3eaa84.  return v0 @kind object;
}
procedure `boolean` `l`(`mc.i` v4 @kind this) @signature `Lmc/i;.l:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ea878.  v0:= v4.`mc.i.c` @type ^`int`;
  #L3ea87c.  v1:= 1I;
  #L3ea87e.  v0:= v0 ^& v1 @kind int;
  #L3ea880.  v2:= 0I;
  #L3ea882.  if v0 != v1 then goto L3ea88a;
  #L3ea886.  v0:= 1I;
  #L3ea888.  goto L3ea88c;
  #L3ea88a.  v0:= 0I;
  #L3ea88c.  v3:= v4.`mc.i.d` @type ^`mc.g` @kind object;
  #L3ea890.  v3:= v3.`mc.g.o` @type ^`boolean` @kind boolean;
  #L3ea894.  if v3 != v0 then goto L3ea89a;
  #L3ea898.  goto L3ea89c;
  #L3ea89a.  v1:= 0I;
  #L3ea89c.  return v1;
}
procedure `boolean` `m`(`mc.i` v3 @kind this) @signature `Lmc/i;.m:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ea8b0.  @monitorenter v3
  #L3ea8b2.  v0:= v3.`mc.i.l` @type ^`mc.b` @kind object;
  #L3ea8b6.  v1:= 0I;
  #L3ea8b8.  if v0 == 0 then goto L3ea8c0;
  #L3ea8bc.  @monitorexit v3
  #L3ea8be.  return v1;
  #L3ea8c0.  v0:= v3.`mc.i.h` @type ^`mc.i$b` @kind object;
  #L3ea8c4.  v2:= v0.`mc.i$b.s` @type ^`boolean` @kind boolean;
  #L3ea8c8.  if v2 != 0 then goto L3ea8d4;
  #L3ea8cc.  v0:= v0.`mc.i$b.r` @type ^`boolean` @kind boolean;
  #L3ea8d0.  if v0 == 0 then goto L3ea8f4;
  #L3ea8d4.  v0:= v3.`mc.i.i` @type ^`mc.i$a` @kind object;
  #L3ea8d8.  v2:= v0.`mc.i$a.q` @type ^`boolean` @kind boolean;
  #L3ea8dc.  if v2 != 0 then goto L3ea8e8;
  #L3ea8e0.  v0:= v0.`mc.i$a.p` @type ^`boolean` @kind boolean;
  #L3ea8e4.  if v0 == 0 then goto L3ea8f4;
  #L3ea8e8.  v0:= v3.`mc.i.g` @type ^`boolean` @kind boolean;
  #L3ea8ec.  if v0 == 0 then goto L3ea8f4;
  #L3ea8f0.  @monitorexit v3
  #L3ea8f2.  return v1;
  #L3ea8f4.  v0:= 1I;
  #L3ea8f6.  @monitorexit v3
  #L3ea8f8.  return v0;
  #L3ea8fa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ea8fc.  @monitorexit v3
  #L3ea8fe.  throw v0;
  catch `java.lang.Throwable` @[L3ea8b2..L3ea8b6] goto L3ea8fa;
  catch `java.lang.Throwable` @[L3ea8c0..L3ea8ec] goto L3ea8fa;
}
procedure `qc.t` `n`(`mc.i` v1 @kind this) @signature `Lmc/i;.n:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eaa98.  v0:= v1.`mc.i.j` @type ^`mc.i$c` @kind object;
  #L3eaa9c.  return v0 @kind object;
}
procedure `void` `o`(`mc.i` v3 @kind this, `qc.e` v4 @kind object, `int` v5 ) @signature `Lmc/i;.o:(Lqc/e;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3ead48.  v0:= v3.`mc.i.h` @type ^`mc.i$b` @kind object;
  #L3ead4c.  v1:= (`long`) v5 @kind i2l;
  #L3ead4e.  call `a`(v0, v4, v1) @signature `Lmc/i$b;.a:(Lqc/e;J)V` @kind virtual;
  #L3ead54.  return @kind void;
}
procedure `void` `p`(`mc.i` v2 @kind this) @signature `Lmc/i;.p:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ead68.  @monitorenter v2
  #L3ead6a.  v0:= v2.`mc.i.h` @type ^`mc.i$b` @kind object;
  #L3ead6e.  v1:= 1I;
  #L3ead70.  v0.`mc.i$b.s` @type ^`boolean` := v1 @kind boolean;
  #L3ead74.  call temp:= `m`(v2) @signature `Lmc/i;.m:()Z` @kind virtual;
  #L3ead7a.  v0:= temp;
  #L3ead7c.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3ead82.  @monitorexit v2
  #L3ead84.  if v0 != 0 then goto L3ead96;
  #L3ead88.  v0:= v2.`mc.i.d` @type ^`mc.g` @kind object;
  #L3ead8c.  v1:= v2.`mc.i.c` @type ^`int`;
  #L3ead90.  call temp:= `g0`(v0, v1) @signature `Lmc/g;.g0:(I)Lmc/i;` @kind virtual;
  #L3ead96.  return @kind void;
  #L3ead98.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ead9a.  @monitorexit v2
  #L3ead9c.  throw v0;
  catch `java.lang.Throwable` @[L3ead6a..L3ead84] goto L3ead98;
  catch `java.lang.Throwable` @[L3ead9a..L3ead9c] goto L3ead98;
}
procedure `void` `q`(`mc.i` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lmc/i;.q:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;

  #L3eadc4.  @monitorenter v1
  #L3eadc6.  v0:= 1I;
  #L3eadc8.  v1.`mc.i.g` @type ^`boolean` := v0 @kind boolean;
  #L3eadcc.  v0:= v1.`mc.i.e` @type ^`java.util.Deque` @kind object;
  #L3eadd0.  call temp:= `F`(v2) @signature `Lhc/c;.F:(Ljava/util/List;)Lgc/q;` @kind static;
  #L3eadd6.  v2:= temp @kind object;
  #L3eadd8.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eadde.  call temp:= `m`(v1) @signature `Lmc/i;.m:()Z` @kind virtual;
  #L3eade4.  v2:= temp;
  #L3eade6.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3eadec.  @monitorexit v1
  #L3eadee.  if v2 != 0 then goto L3eae00;
  #L3eadf2.  v2:= v1.`mc.i.d` @type ^`mc.g` @kind object;
  #L3eadf6.  v0:= v1.`mc.i.c` @type ^`int`;
  #L3eadfa.  call temp:= `g0`(v2, v0) @signature `Lmc/g;.g0:(I)Lmc/i;` @kind virtual;
  #L3eae00.  return @kind void;
  #L3eae02.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eae04.  @monitorexit v1
  #L3eae06.  throw v2;
  catch `java.lang.Throwable` @[L3eadc8..L3eadee] goto L3eae02;
  catch `java.lang.Throwable` @[L3eae04..L3eae06] goto L3eae02;
}
procedure `void` `r`(`mc.i` v1 @kind this, `mc.b` v2 @kind object) @signature `Lmc/i;.r:(Lmc/b;)V` @AccessFlag  {
    temp;
    v0;

  #L3eae2c.  @monitorenter v1
  #L3eae2e.  v0:= v1.`mc.i.l` @type ^`mc.b` @kind object;
  #L3eae32.  if v0 != 0 then goto L3eae40;
  #L3eae36.  v1.`mc.i.l` @type ^`mc.b` := v2 @kind object;
  #L3eae3a.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3eae40.  @monitorexit v1
  #L3eae42.  return @kind void;
  #L3eae44.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eae46.  @monitorexit v1
  #L3eae48.  throw v2;
  catch `java.lang.Throwable` @[L3eae2e..L3eae40] goto L3eae44;
}
procedure `gc.q` `s`(`mc.i` v2 @kind this) @signature `Lmc/i;.s:()Lgc/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ea924.  @monitorenter v2
  #L3ea926.  v0:= v2.`mc.i.j` @type ^`mc.i$c` @kind object;
  #L3ea92a.  call `k`(v0) @signature `Lqc/a;.k:()V` @kind virtual;
  #L3ea930.  v0:= v2.`mc.i.e` @type ^`java.util.Deque` @kind object;
  #L3ea934.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L3ea93a.  v0:= temp;
  #L3ea93c.  if v0 == 0 then goto L3ea950;
  #L3ea940.  v0:= v2.`mc.i.l` @type ^`mc.b` @kind object;
  #L3ea944.  if v0 != 0 then goto L3ea950;
  #L3ea948.  call `t`(v2) @signature `Lmc/i;.t:()V` @kind virtual;
  #L3ea94e.  goto L3ea930;
  #L3ea950.  v0:= v2.`mc.i.j` @type ^`mc.i$c` @kind object;
  #L3ea954.  call `u`(v0) @signature `Lmc/i$c;.u:()V` @kind virtual;
  #L3ea95a.  v0:= v2.`mc.i.e` @type ^`java.util.Deque` @kind object;
  #L3ea95e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L3ea964.  v0:= temp;
  #L3ea966.  if v0 != 0 then goto L3ea97e;
  #L3ea96a.  v0:= v2.`mc.i.e` @type ^`java.util.Deque` @kind object;
  #L3ea96e.  call temp:= `removeFirst`(v0) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L3ea974.  v0:= temp @kind object;
  #L3ea976.  v0:= (`gc.q`) v0 @kind object;
  #L3ea97a.  @monitorexit v2
  #L3ea97c.  return v0 @kind object;
  #L3ea97e.  v0:= new `mc.n`;
  #L3ea982.  v1:= v2.`mc.i.l` @type ^`mc.b` @kind object;
  #L3ea986.  call `<init>`(v0, v1) @signature `Lmc/n;.<init>:(Lmc/b;)V` @kind direct;
  #L3ea98c.  throw v0;
  #L3ea98e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ea990.  v1:= v2.`mc.i.j` @type ^`mc.i$c` @kind object;
  #L3ea994.  call `u`(v1) @signature `Lmc/i$c;.u:()V` @kind virtual;
  #L3ea99a.  throw v0;
  #L3ea99c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ea99e.  @monitorexit v2
  #L3ea9a0.  throw v0;
  catch `java.lang.Throwable` @[L3ea926..L3ea930] goto L3ea99c;
  catch `java.lang.Throwable` @[L3ea930..L3ea94e] goto L3ea98e;
  catch `java.lang.Throwable` @[L3ea950..L3ea97a] goto L3ea99c;
  catch `java.lang.Throwable` @[L3ea97e..L3ea99c] goto L3ea99c;
}
procedure `void` `t`(`mc.i` v1 @kind this) @signature `Lmc/i;.t:()V` @AccessFlag  {
    temp;
    v0;

  #L3eae68.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L3eae6e.  return @kind void;
  #L3eae70.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3eae76.  v0:= temp @kind object;
  #L3eae78.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L3eae7e.  v0:= new `java.io.InterruptedIOException`;
  #L3eae82.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L3eae88.  throw v0;
  catch `java.lang.InterruptedException` @[L3eae68..L3eae6e] goto L3eae70;
}
procedure `qc.t` `u`(`mc.i` v1 @kind this) @signature `Lmc/i;.u:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eaab0.  v0:= v1.`mc.i.k` @type ^`mc.i$c` @kind object;
  #L3eaab4.  return v0 @kind object;
}
