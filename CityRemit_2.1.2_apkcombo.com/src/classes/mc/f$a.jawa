record `mc.f$a` @kind class @AccessFlag  extends `qc.h` @kind class {
  `boolean` `mc.f$a.p` @AccessFlag ;
  `long` `mc.f$a.q` @AccessFlag ;
  `mc.f` `mc.f$a.r` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`mc.f$a` v0 @kind this, `mc.f` v1 @kind object, `qc.s` v2 @kind object) @signature `Lmc/f$a;.<init>:(Lmc/f;Lqc/s;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e7360.  v0.`mc.f$a.r` @type ^`mc.f` := v1 @kind object;
  #L3e7364.  call `<init>`(v0, v2) @signature `Lqc/h;.<init>:(Lqc/s;)V` @kind direct;
  #L3e736a.  v1:= 0I;
  #L3e736c.  v0.`mc.f$a.p` @type ^`boolean` := v1 @kind boolean;
  #L3e7370.  v1:= 0L;
  #L3e7374.  v0.`mc.f$a.q` @type ^`long` := v1 @kind wide;
  #L3e7378.  return @kind void;
}
procedure `void` `c`(`mc.f$a` v7 @kind this, `java.io.IOException` v8 @kind object) @signature `Lmc/f$a;.c:(Ljava/io/IOException;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3e73ac.  v0:= v7.`mc.f$a.p` @type ^`boolean` @kind boolean;
  #L3e73b0.  if v0 == 0 then goto L3e73b6;
  #L3e73b4.  return @kind void;
  #L3e73b6.  v0:= 1I;
  #L3e73b8.  v7.`mc.f$a.p` @type ^`boolean` := v0 @kind boolean;
  #L3e73bc.  v3:= v7.`mc.f$a.r` @type ^`mc.f` @kind object;
  #L3e73c0.  v1:= v3.`mc.f.b` @type ^`jc.g` @kind object;
  #L3e73c4.  v2:= 0I;
  #L3e73c6.  v4:= v7.`mc.f$a.q` @type ^`long` @kind wide;
  #L3e73ca.  v6:= v8 @kind object;
  #L3e73cc.  call `r`(v1, v2, v3, v4, v6) @signature `Ljc/g;.r:(ZLkc/c;JLjava/io/IOException;)V` @kind virtual;
  #L3e73d2.  return @kind void;
}
procedure `long` `T`(`mc.f$a` v2 @kind this, `qc.c` v3 @kind object, `long` v4 ) @signature `Lmc/f$a;.T:(Lqc/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e730c.  call temp:= `a`(v2) @signature `Lqc/h;.a:()Lqc/s;` @kind virtual;
  #L3e7312.  v0:= temp @kind object;
  #L3e7314.  call temp:= `T`(v0, v3, v4) @signature `Lqc/s;.T:(Lqc/c;J)J` @kind interface;
  #L3e731a.  v3:= temp @kind wide;
  #L3e731c.  v0:= 0L;
  #L3e7320.  v5:= lcmp(v3, v0);
  #L3e7324.  if v5 <= 0 then goto L3e7332;
  #L3e7328.  v0:= v2.`mc.f$a.q` @type ^`long` @kind wide;
  #L3e732c.  v0:= v0 + v3 @kind long;
  #L3e732e.  v2.`mc.f$a.q` @type ^`long` := v0 @kind wide;
  #L3e7332.  return v3 @kind wide;
  #L3e7334.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L3e7336.  call `c`(v2, v3) @signature `Lmc/f$a;.c:(Ljava/io/IOException;)V` @kind direct;
  #L3e733c.  throw v3;
  catch `java.io.IOException` @[L3e730c..L3e7332] goto L3e7334;
}
procedure `void` `close`(`mc.f$a` v1 @kind this) @signature `Lmc/f$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e738c.  call `close`(v1) @signature `Lqc/h;.close:()V` @kind super;
  #L3e7392.  v0:= 0I;
  #L3e7394.  call `c`(v1, v0) @signature `Lmc/f$a;.c:(Ljava/io/IOException;)V` @kind direct;
  #L3e739a.  return @kind void;
}
