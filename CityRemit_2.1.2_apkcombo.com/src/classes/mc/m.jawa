record `mc.m` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `mc.m.a` @AccessFlag PRIVATE;
  `int`[] `mc.m.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`mc.m` v1 @kind this) @signature `Lmc/m;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ec58c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ec592.  v0:= 10I;
  #L3ec596.  v0:= new `int`[v0];
  #L3ec59a.  v1.`mc.m.b` @type ^`int`[] := v0 @kind object;
  #L3ec59e.  return @kind void;
}
procedure `void` `a`(`mc.m` v2 @kind this) @signature `Lmc/m;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ec5b0.  v0:= 0I;
  #L3ec5b2.  v2.`mc.m.a` @type ^`int` := v0;
  #L3ec5b6.  v1:= v2.`mc.m.b` @type ^`int`[] @kind object;
  #L3ec5ba.  call `fill`(v1, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L3ec5c0.  return @kind void;
}
procedure `int` `b`(`mc.m` v1 @kind this, `int` v2 ) @signature `Lmc/m;.b:(I)I` @AccessFlag  {
    temp;
    v0;

  #L3ec470.  v0:= v1.`mc.m.b` @type ^`int`[] @kind object;
  #L3ec474.  v2:= v0[v2];
  #L3ec478.  return v2;
}
procedure `int` `c`(`mc.m` v2 @kind this) @signature `Lmc/m;.c:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ec48c.  v0:= v2.`mc.m.a` @type ^`int`;
  #L3ec490.  v0:= v0 ^& 2;
  #L3ec494.  if v0 == 0 then goto L3ec4a4;
  #L3ec498.  v0:= v2.`mc.m.b` @type ^`int`[] @kind object;
  #L3ec49c.  v1:= 1I;
  #L3ec49e.  v0:= v0[v1];
  #L3ec4a2.  goto L3ec4a6;
  #L3ec4a4.  v0:= -1I;
  #L3ec4a6.  return v0;
}
procedure `int` `d`(`mc.m` v2 @kind this) @signature `Lmc/m;.d:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ec4b8.  v0:= v2.`mc.m.a` @type ^`int`;
  #L3ec4bc.  v0:= v0 ^& 128;
  #L3ec4c0.  if v0 == 0 then goto L3ec4d0;
  #L3ec4c4.  v0:= v2.`mc.m.b` @type ^`int`[] @kind object;
  #L3ec4c8.  v1:= 7I;
  #L3ec4ca.  v0:= v0[v1];
  #L3ec4ce.  goto L3ec4d6;
  #L3ec4d0.  v0:= 65535I;
  #L3ec4d6.  return v0;
}
procedure `int` `e`(`mc.m` v1 @kind this, `int` v2 ) @signature `Lmc/m;.e:(I)I` @AccessFlag  {
    temp;
    v0;

  #L3ec4e8.  v0:= v1.`mc.m.a` @type ^`int`;
  #L3ec4ec.  v0:= v0 ^& 16;
  #L3ec4f0.  if v0 == 0 then goto L3ec4fe;
  #L3ec4f4.  v2:= v1.`mc.m.b` @type ^`int`[] @kind object;
  #L3ec4f8.  v0:= 4I;
  #L3ec4fa.  v2:= v2[v0];
  #L3ec4fe.  return v2;
}
procedure `int` `f`(`mc.m` v1 @kind this, `int` v2 ) @signature `Lmc/m;.f:(I)I` @AccessFlag  {
    temp;
    v0;

  #L3ec510.  v0:= v1.`mc.m.a` @type ^`int`;
  #L3ec514.  v0:= v0 ^& 32;
  #L3ec518.  if v0 == 0 then goto L3ec526;
  #L3ec51c.  v2:= v1.`mc.m.b` @type ^`int`[] @kind object;
  #L3ec520.  v0:= 5I;
  #L3ec522.  v2:= v2[v0];
  #L3ec526.  return v2;
}
procedure `boolean` `g`(`mc.m` v2 @kind this, `int` v3 ) @signature `Lmc/m;.g:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ec448.  v0:= 1I;
  #L3ec44a.  v3:= v0 ^< v3 @kind int;
  #L3ec44e.  v1:= v2.`mc.m.a` @type ^`int`;
  #L3ec452.  v3:= v3 ^& v1 @kind int;
  #L3ec454.  if v3 == 0 then goto L3ec45a;
  #L3ec458.  goto L3ec45c;
  #L3ec45a.  v0:= 0I;
  #L3ec45c.  return v0;
}
procedure `void` `h`(`mc.m` v2 @kind this, `mc.m` v3 @kind object) @signature `Lmc/m;.h:(Lmc/m;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ec5d4.  v0:= 0I;
  #L3ec5d6.  v1:= 10I;
  #L3ec5da.  if v0 >= v1 then goto L3ec600;
  #L3ec5de.  call temp:= `g`(v3, v0) @signature `Lmc/m;.g:(I)Z` @kind virtual;
  #L3ec5e4.  v1:= temp;
  #L3ec5e6.  if v1 != 0 then goto L3ec5ec;
  #L3ec5ea.  goto L3ec5fa;
  #L3ec5ec.  call temp:= `b`(v3, v0) @signature `Lmc/m;.b:(I)I` @kind virtual;
  #L3ec5f2.  v1:= temp;
  #L3ec5f4.  call temp:= `i`(v2, v0, v1) @signature `Lmc/m;.i:(II)Lmc/m;` @kind virtual;
  #L3ec5fa.  v0:= v0 + 1;
  #L3ec5fe.  goto L3ec5d6;
  #L3ec600.  return @kind void;
}
procedure `mc.m` `i`(`mc.m` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lmc/m;.i:(II)Lmc/m;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3ec558.  if v4 < 0 then goto L3ec57a;
  #L3ec55c.  v0:= v3.`mc.m.b` @type ^`int`[] @kind object;
  #L3ec560.  v1:= length @variable v0;
  #L3ec562.  if v4 < v1 then goto L3ec568;
  #L3ec566.  goto L3ec57a;
  #L3ec568.  v1:= 1I;
  #L3ec56a.  v1:= v1 ^< v4 @kind int;
  #L3ec56c.  v2:= v3.`mc.m.a` @type ^`int`;
  #L3ec570.  v1:= v1 ^| v2 @kind int;
  #L3ec572.  v3.`mc.m.a` @type ^`int` := v1;
  #L3ec576.  v0[v4]:= v5;
  #L3ec57a.  return v3 @kind object;
}
procedure `int` `j`(`mc.m` v1 @kind this) @signature `Lmc/m;.j:()I` @AccessFlag  {
    temp;
    v0;

  #L3ec538.  v0:= v1.`mc.m.a` @type ^`int`;
  #L3ec53c.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L3ec542.  v0:= temp;
  #L3ec544.  return v0;
}
