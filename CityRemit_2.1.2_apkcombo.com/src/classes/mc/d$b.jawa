record `mc.d$b` @kind class @AccessFlag FINAL {
  `qc.c` `mc.d$b.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `mc.d$b.b` @AccessFlag PRIVATE_FINAL;
  `int` `mc.d$b.c` @AccessFlag PRIVATE;
  `boolean` `mc.d$b.d` @AccessFlag PRIVATE;
  `int` `mc.d$b.e` @AccessFlag ;
  `mc.c`[] `mc.d$b.f` @AccessFlag ;
  `int` `mc.d$b.g` @AccessFlag ;
  `int` `mc.d$b.h` @AccessFlag ;
  `int` `mc.d$b.i` @AccessFlag ;
}
procedure `void` `<init>`(`mc.d$b` v1 @kind this, `int` v2 , `boolean` v3 , `qc.c` v4 @kind object) @signature `Lmc/d$b;.<init>:(IZLqc/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3e6844.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e684a.  v0:= 2147483647I;
  #L3e6850.  v1.`mc.d$b.c` @type ^`int` := v0;
  #L3e6854.  v0:= 8I;
  #L3e6858.  v0:= new `mc.c`[v0];
  #L3e685c.  v1.`mc.d$b.f` @type ^`mc.c`[] := v0 @kind object;
  #L3e6860.  v0:= length @variable v0;
  #L3e6862.  v0:= v0 + -1;
  #L3e6866.  v1.`mc.d$b.g` @type ^`int` := v0;
  #L3e686a.  v0:= 0I;
  #L3e686c.  v1.`mc.d$b.h` @type ^`int` := v0;
  #L3e6870.  v1.`mc.d$b.i` @type ^`int` := v0;
  #L3e6874.  v1.`mc.d$b.e` @type ^`int` := v2;
  #L3e6878.  v1.`mc.d$b.b` @type ^`boolean` := v3 @kind boolean;
  #L3e687c.  v1.`mc.d$b.a` @type ^`qc.c` := v4 @kind object;
  #L3e6880.  return @kind void;
}
procedure `void` `<init>`(`mc.d$b` v2 @kind this, `qc.c` v3 @kind object) @signature `Lmc/d$b;.<init>:(Lqc/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3e6894.  v0:= 4096I;
  #L3e6898.  v1:= 1I;
  #L3e689a.  call `<init>`(v2, v0, v1, v3) @signature `Lmc/d$b;.<init>:(IZLqc/c;)V` @kind direct;
  #L3e68a0.  return @kind void;
}
procedure `void` `a`(`mc.d$b` v2 @kind this) @signature `Lmc/d$b;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e68b4.  v0:= v2.`mc.d$b.e` @type ^`int`;
  #L3e68b8.  v1:= v2.`mc.d$b.i` @type ^`int`;
  #L3e68bc.  if v0 >= v1 then goto L3e68d4;
  #L3e68c0.  if v0 != 0 then goto L3e68cc;
  #L3e68c4.  call `b`(v2) @signature `Lmc/d$b;.b:()V` @kind direct;
  #L3e68ca.  goto L3e68d4;
  #L3e68cc.  v1:= v1 - v0 @kind int;
  #L3e68ce.  call temp:= `c`(v2, v1) @signature `Lmc/d$b;.c:(I)I` @kind direct;
  #L3e68d4.  return @kind void;
}
procedure `void` `b`(`mc.d$b` v2 @kind this) @signature `Lmc/d$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e68e8.  v0:= v2.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e68ec.  v1:= 0I;
  #L3e68ee.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L3e68f4.  v0:= v2.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e68f8.  v0:= length @variable v0;
  #L3e68fa.  v0:= v0 + -1;
  #L3e68fe.  v2.`mc.d$b.g` @type ^`int` := v0;
  #L3e6902.  v0:= 0I;
  #L3e6904.  v2.`mc.d$b.h` @type ^`int` := v0;
  #L3e6908.  v2.`mc.d$b.i` @type ^`int` := v0;
  #L3e690c.  return @kind void;
}
procedure `int` `c`(`mc.d$b` v4 @kind this, `int` v5 ) @signature `Lmc/d$b;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e67a4.  v0:= 0I;
  #L3e67a6.  if v5 <= 0 then goto L3e6832;
  #L3e67aa.  v1:= v4.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e67ae.  v1:= length @variable v1;
  #L3e67b0.  v1:= v1 + -1;
  #L3e67b4.  v2:= v4.`mc.d$b.g` @type ^`int`;
  #L3e67b8.  if v1 < v2 then goto L3e67f6;
  #L3e67bc.  if v5 <= 0 then goto L3e67f6;
  #L3e67c0.  v2:= v4.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e67c4.  v3:= v2[v1] @kind object;
  #L3e67c8.  v3:= v3.`mc.c.c` @type ^`int`;
  #L3e67cc.  v5:= v5 - v3 @kind int;
  #L3e67ce.  v3:= v4.`mc.d$b.i` @type ^`int`;
  #L3e67d2.  v2:= v2[v1] @kind object;
  #L3e67d6.  v2:= v2.`mc.c.c` @type ^`int`;
  #L3e67da.  v3:= v3 - v2 @kind int;
  #L3e67dc.  v4.`mc.d$b.i` @type ^`int` := v3;
  #L3e67e0.  v2:= v4.`mc.d$b.h` @type ^`int`;
  #L3e67e4.  v2:= v2 + -1;
  #L3e67e8.  v4.`mc.d$b.h` @type ^`int` := v2;
  #L3e67ec.  v0:= v0 + 1;
  #L3e67f0.  v1:= v1 + -1;
  #L3e67f4.  goto L3e67b4;
  #L3e67f6.  v5:= v4.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e67fa.  v1:= v2 + 1;
  #L3e67fe.  v2:= v2 + 1;
  #L3e6802.  v2:= v2 + v0 @kind int;
  #L3e6804.  v3:= v4.`mc.d$b.h` @type ^`int`;
  #L3e6808.  call `arraycopy`(v5, v1, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e680e.  v5:= v4.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e6812.  v1:= v4.`mc.d$b.g` @type ^`int`;
  #L3e6816.  v2:= v1 + 1;
  #L3e681a.  v1:= v1 + 1;
  #L3e681e.  v1:= v1 + v0 @kind int;
  #L3e6820.  v3:= 0I;
  #L3e6822.  call `fill`(v5, v2, v1, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L3e6828.  v5:= v4.`mc.d$b.g` @type ^`int`;
  #L3e682c.  v5:= v5 + v0 @kind int;
  #L3e682e.  v4.`mc.d$b.g` @type ^`int` := v5;
  #L3e6832.  return v0;
}
procedure `void` `d`(`mc.d$b` v6 @kind this, `mc.c` v7 @kind object) @signature `Lmc/d$b;.d:(Lmc/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3e6920.  v0:= v7.`mc.c.c` @type ^`int`;
  #L3e6924.  v1:= v6.`mc.d$b.e` @type ^`int`;
  #L3e6928.  if v0 <= v1 then goto L3e6934;
  #L3e692c.  call `b`(v6) @signature `Lmc/d$b;.b:()V` @kind direct;
  #L3e6932.  return @kind void;
  #L3e6934.  v2:= v6.`mc.d$b.i` @type ^`int`;
  #L3e6938.  v2:= v2 + v0 @kind int;
  #L3e693a.  v2:= v2 - v1 @kind int;
  #L3e693c.  call temp:= `c`(v6, v2) @signature `Lmc/d$b;.c:(I)I` @kind direct;
  #L3e6942.  v1:= v6.`mc.d$b.h` @type ^`int`;
  #L3e6946.  v1:= v1 + 1;
  #L3e694a.  v2:= v6.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e694e.  v3:= length @variable v2;
  #L3e6950.  if v1 <= v3 then goto L3e697c;
  #L3e6954.  v1:= length @variable v2;
  #L3e6956.  v1:= v1 * 2;
  #L3e695a.  v1:= new `mc.c`[v1];
  #L3e695e.  v3:= 0I;
  #L3e6960.  v4:= length @variable v2;
  #L3e6962.  v5:= length @variable v2;
  #L3e6964.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e696a.  v2:= v6.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e696e.  v2:= length @variable v2;
  #L3e6970.  v2:= v2 + -1;
  #L3e6974.  v6.`mc.d$b.g` @type ^`int` := v2;
  #L3e6978.  v6.`mc.d$b.f` @type ^`mc.c`[] := v1 @kind object;
  #L3e697c.  v1:= v6.`mc.d$b.g` @type ^`int`;
  #L3e6980.  v2:= v1 + -1;
  #L3e6984.  v6.`mc.d$b.g` @type ^`int` := v2;
  #L3e6988.  v2:= v6.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e698c.  v2[v1]:= v7 @kind object;
  #L3e6990.  v7:= v6.`mc.d$b.h` @type ^`int`;
  #L3e6994.  v7:= v7 + 1;
  #L3e6998.  v6.`mc.d$b.h` @type ^`int` := v7;
  #L3e699c.  v7:= v6.`mc.d$b.i` @type ^`int`;
  #L3e69a0.  v7:= v7 + v0 @kind int;
  #L3e69a2.  v6.`mc.d$b.i` @type ^`int` := v7;
  #L3e69a6.  return @kind void;
}
procedure `void` `e`(`mc.d$b` v1 @kind this, `int` v2 ) @signature `Lmc/d$b;.e:(I)V` @AccessFlag  {
    temp;
    v0;

  #L3e69b8.  v0:= 16384I;
  #L3e69bc.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3e69c2.  v2:= temp;
  #L3e69c4.  v0:= v1.`mc.d$b.e` @type ^`int`;
  #L3e69c8.  if v0 != v2 then goto L3e69ce;
  #L3e69cc.  return @kind void;
  #L3e69ce.  if v2 >= v0 then goto L3e69e2;
  #L3e69d2.  v0:= v1.`mc.d$b.c` @type ^`int`;
  #L3e69d6.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3e69dc.  v0:= temp;
  #L3e69de.  v1.`mc.d$b.c` @type ^`int` := v0;
  #L3e69e2.  v0:= 1I;
  #L3e69e4.  v1.`mc.d$b.d` @type ^`boolean` := v0 @kind boolean;
  #L3e69e8.  v1.`mc.d$b.e` @type ^`int` := v2;
  #L3e69ec.  call `a`(v1) @signature `Lmc/d$b;.a:()V` @kind direct;
  #L3e69f2.  return @kind void;
}
procedure `void` `f`(`mc.d$b` v3 @kind this, `qc.f` v4 @kind object) @signature `Lmc/d$b;.f:(Lqc/f;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3e6a04.  v0:= v3.`mc.d$b.b` @type ^`boolean` @kind boolean;
  #L3e6a08.  v1:= 127I;
  #L3e6a0c.  if v0 == 0 then goto L3e6a5a;
  #L3e6a10.  call temp:= `f`() @signature `Lmc/k;.f:()Lmc/k;` @kind static;
  #L3e6a16.  v0:= temp @kind object;
  #L3e6a18.  call temp:= `e`(v0, v4) @signature `Lmc/k;.e:(Lqc/f;)I` @kind virtual;
  #L3e6a1e.  v0:= temp;
  #L3e6a20.  call temp:= `D`(v4) @signature `Lqc/f;.D:()I` @kind virtual;
  #L3e6a26.  v2:= temp;
  #L3e6a28.  if v0 >= v2 then goto L3e6a5a;
  #L3e6a2c.  v0:= new `qc.c`;
  #L3e6a30.  call `<init>`(v0) @signature `Lqc/c;.<init>:()V` @kind direct;
  #L3e6a36.  call temp:= `f`() @signature `Lmc/k;.f:()Lmc/k;` @kind static;
  #L3e6a3c.  v2:= temp @kind object;
  #L3e6a3e.  call `d`(v2, v4, v0) @signature `Lmc/k;.d:(Lqc/f;Lqc/d;)V` @kind virtual;
  #L3e6a44.  call temp:= `c0`(v0) @signature `Lqc/c;.c0:()Lqc/f;` @kind virtual;
  #L3e6a4a.  v4:= temp @kind object;
  #L3e6a4c.  call temp:= `D`(v4) @signature `Lqc/f;.D:()I` @kind virtual;
  #L3e6a52.  v0:= temp;
  #L3e6a54.  v2:= 128I;
  #L3e6a58.  goto L3e6a64;
  #L3e6a5a.  call temp:= `D`(v4) @signature `Lqc/f;.D:()I` @kind virtual;
  #L3e6a60.  v0:= temp;
  #L3e6a62.  v2:= 0I;
  #L3e6a64.  call `h`(v3, v0, v1, v2) @signature `Lmc/d$b;.h:(III)V` @kind virtual;
  #L3e6a6a.  v0:= v3.`mc.d$b.a` @type ^`qc.c` @kind object;
  #L3e6a6e.  call temp:= `l0`(v0, v4) @signature `Lqc/c;.l0:(Lqc/f;)Lqc/c;` @kind virtual;
  #L3e6a74.  return @kind void;
}
procedure `void` `g`(`mc.d$b` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lmc/d$b;.g:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3e6a88.  v0:= v13.`mc.d$b.d` @type ^`boolean` @kind boolean;
  #L3e6a8c.  v1:= 0I;
  #L3e6a8e.  if v0 == 0 then goto L3e6ac4;
  #L3e6a92.  v0:= v13.`mc.d$b.c` @type ^`int`;
  #L3e6a96.  v2:= v13.`mc.d$b.e` @type ^`int`;
  #L3e6a9a.  v3:= 32I;
  #L3e6a9e.  v4:= 31I;
  #L3e6aa2.  if v0 >= v2 then goto L3e6aac;
  #L3e6aa6.  call `h`(v13, v0, v4, v3) @signature `Lmc/d$b;.h:(III)V` @kind virtual;
  #L3e6aac.  v13.`mc.d$b.d` @type ^`boolean` := v1 @kind boolean;
  #L3e6ab0.  v0:= 2147483647I;
  #L3e6ab6.  v13.`mc.d$b.c` @type ^`int` := v0;
  #L3e6aba.  v0:= v13.`mc.d$b.e` @type ^`int`;
  #L3e6abe.  call `h`(v13, v0, v4, v3) @signature `Lmc/d$b;.h:(III)V` @kind virtual;
  #L3e6ac4.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3e6aca.  v0:= temp;
  #L3e6acc.  v2:= 0I;
  #L3e6ace.  if v2 >= v0 then goto L3e6c54;
  #L3e6ad2.  call temp:= `get`(v14, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3e6ad8.  v3:= temp @kind object;
  #L3e6ada.  v3:= (`mc.c`) v3 @kind object;
  #L3e6ade.  v4:= v3.`mc.c.a` @type ^`qc.f` @kind object;
  #L3e6ae2.  call temp:= `K`(v4) @signature `Lqc/f;.K:()Lqc/f;` @kind virtual;
  #L3e6ae8.  v4:= temp @kind object;
  #L3e6aea.  v5:= v3.`mc.c.b` @type ^`qc.f` @kind object;
  #L3e6aee.  v6:= `@@mc.d.b` @type ^`java.util.Map` @kind object;
  #L3e6af2.  call temp:= `get`(v6, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3e6af8.  v6:= temp @kind object;
  #L3e6afa.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L3e6afe.  v7:= -1I;
  #L3e6b00.  v8:= 1I;
  #L3e6b02.  if v6 == 0 then goto L3e6b62;
  #L3e6b06.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3e6b0c.  v6:= temp;
  #L3e6b0e.  v6:= v6 + v8 @kind int;
  #L3e6b10.  if v6 <= v8 then goto L3e6b5c;
  #L3e6b14.  v9:= 8I;
  #L3e6b18.  if v6 >= v9 then goto L3e6b5c;
  #L3e6b1c.  v9:= `@@mc.d.a` @type ^`mc.c`[] @kind object;
  #L3e6b20.  v10:= v6 + -1;
  #L3e6b24.  v10:= v9[v10] @kind object;
  #L3e6b28.  v10:= v10.`mc.c.b` @type ^`qc.f` @kind object;
  #L3e6b2c.  call temp:= `o`(v10, v5) @signature `Lhc/c;.o:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3e6b32.  v10:= temp;
  #L3e6b34.  if v10 == 0 then goto L3e6b3c;
  #L3e6b38.  v9:= v6;
  #L3e6b3a.  goto L3e6b66;
  #L3e6b3c.  v9:= v9[v6] @kind object;
  #L3e6b40.  v9:= v9.`mc.c.b` @type ^`qc.f` @kind object;
  #L3e6b44.  call temp:= `o`(v9, v5) @signature `Lhc/c;.o:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3e6b4a.  v9:= temp;
  #L3e6b4c.  if v9 == 0 then goto L3e6b5c;
  #L3e6b50.  v9:= v6 + 1;
  #L3e6b54.  v12:= v9;
  #L3e6b56.  v9:= v6;
  #L3e6b58.  v6:= v12;
  #L3e6b5a.  goto L3e6b66;
  #L3e6b5c.  v9:= v6;
  #L3e6b5e.  v6:= -1I;
  #L3e6b60.  goto L3e6b66;
  #L3e6b62.  v6:= -1I;
  #L3e6b64.  v9:= -1I;
  #L3e6b66.  if v6 != v7 then goto L3e6bd4;
  #L3e6b6a.  v10:= v13.`mc.d$b.g` @type ^`int`;
  #L3e6b6e.  v10:= v10 + v8 @kind int;
  #L3e6b70.  v8:= v13.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e6b74.  v8:= length @variable v8;
  #L3e6b76.  if v10 >= v8 then goto L3e6bd4;
  #L3e6b7a.  v11:= v13.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e6b7e.  v11:= v11[v10] @kind object;
  #L3e6b82.  v11:= v11.`mc.c.a` @type ^`qc.f` @kind object;
  #L3e6b86.  call temp:= `o`(v11, v4) @signature `Lhc/c;.o:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3e6b8c.  v11:= temp;
  #L3e6b8e.  if v11 == 0 then goto L3e6bce;
  #L3e6b92.  v11:= v13.`mc.d$b.f` @type ^`mc.c`[] @kind object;
  #L3e6b96.  v11:= v11[v10] @kind object;
  #L3e6b9a.  v11:= v11.`mc.c.b` @type ^`qc.f` @kind object;
  #L3e6b9e.  call temp:= `o`(v11, v5) @signature `Lhc/c;.o:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3e6ba4.  v11:= temp;
  #L3e6ba6.  if v11 == 0 then goto L3e6bba;
  #L3e6baa.  v6:= v13.`mc.d$b.g` @type ^`int`;
  #L3e6bae.  v10:= v10 - v6 @kind int;
  #L3e6bb0.  v6:= `@@mc.d.a` @type ^`mc.c`[] @kind object;
  #L3e6bb4.  v6:= length @variable v6;
  #L3e6bb6.  v6:= v6 + v10 @kind int;
  #L3e6bb8.  goto L3e6bd4;
  #L3e6bba.  if v9 != v7 then goto L3e6bce;
  #L3e6bbe.  v9:= v13.`mc.d$b.g` @type ^`int`;
  #L3e6bc2.  v9:= v10 - v9 @kind int;
  #L3e6bc6.  v11:= `@@mc.d.a` @type ^`mc.c`[] @kind object;
  #L3e6bca.  v11:= length @variable v11;
  #L3e6bcc.  v9:= v9 + v11 @kind int;
  #L3e6bce.  v10:= v10 + 1;
  #L3e6bd2.  goto L3e6b76;
  #L3e6bd4.  if v6 == v7 then goto L3e6be8;
  #L3e6bd8.  v3:= 127I;
  #L3e6bdc.  v4:= 128I;
  #L3e6be0.  call `h`(v13, v6, v3, v4) @signature `Lmc/d$b;.h:(III)V` @kind virtual;
  #L3e6be6.  goto L3e6c4c;
  #L3e6be8.  v6:= 64I;
  #L3e6bec.  if v9 != v7 then goto L3e6c0e;
  #L3e6bf0.  v7:= v13.`mc.d$b.a` @type ^`qc.c` @kind object;
  #L3e6bf4.  call temp:= `p0`(v7, v6) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L3e6bfa.  call `f`(v13, v4) @signature `Lmc/d$b;.f:(Lqc/f;)V` @kind virtual;
  #L3e6c00.  call `f`(v13, v5) @signature `Lmc/d$b;.f:(Lqc/f;)V` @kind virtual;
  #L3e6c06.  call `d`(v13, v3) @signature `Lmc/d$b;.d:(Lmc/c;)V` @kind direct;
  #L3e6c0c.  goto L3e6c4c;
  #L3e6c0e.  v7:= `@@mc.c.d` @type ^`qc.f` @kind object;
  #L3e6c12.  call temp:= `F`(v4, v7) @signature `Lqc/f;.F:(Lqc/f;)Z` @kind virtual;
  #L3e6c18.  v7:= temp;
  #L3e6c1a.  if v7 == 0 then goto L3e6c40;
  #L3e6c1e.  v7:= `@@mc.c.i` @type ^`qc.f` @kind object;
  #L3e6c22.  call temp:= `equals`(v7, v4) @signature `Lqc/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e6c28.  v4:= temp;
  #L3e6c2a.  if v4 != 0 then goto L3e6c40;
  #L3e6c2e.  v3:= 15I;
  #L3e6c32.  call `h`(v13, v9, v3, v1) @signature `Lmc/d$b;.h:(III)V` @kind virtual;
  #L3e6c38.  call `f`(v13, v5) @signature `Lmc/d$b;.f:(Lqc/f;)V` @kind virtual;
  #L3e6c3e.  goto L3e6c4c;
  #L3e6c40.  v4:= 63I;
  #L3e6c44.  call `h`(v13, v9, v4, v6) @signature `Lmc/d$b;.h:(III)V` @kind virtual;
  #L3e6c4a.  goto L3e6c00;
  #L3e6c4c.  v2:= v2 + 1;
  #L3e6c50.  goto L3e6ace;
  #L3e6c54.  return @kind void;
}
procedure `void` `h`(`mc.d$b` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lmc/d$b;.h:(III)V` @AccessFlag  {
    temp;
    v0;

  #L3e6c68.  if v2 >= v3 then goto L3e6c7a;
  #L3e6c6c.  v3:= v1.`mc.d$b.a` @type ^`qc.c` @kind object;
  #L3e6c70.  v2:= v2 ^| v4 @kind int;
  #L3e6c72.  call temp:= `p0`(v3, v2) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L3e6c78.  return @kind void;
  #L3e6c7a.  v0:= v1.`mc.d$b.a` @type ^`qc.c` @kind object;
  #L3e6c7e.  v4:= v4 ^| v3 @kind int;
  #L3e6c80.  call temp:= `p0`(v0, v4) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L3e6c86.  v2:= v2 - v3 @kind int;
  #L3e6c88.  v3:= 128I;
  #L3e6c8c.  if v2 < v3 then goto L3e6ca6;
  #L3e6c90.  v4:= v2 ^& 127;
  #L3e6c94.  v0:= v1.`mc.d$b.a` @type ^`qc.c` @kind object;
  #L3e6c98.  v3:= v3 ^| v4 @kind int;
  #L3e6c9a.  call temp:= `p0`(v0, v3) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L3e6ca0.  v2:= v2 ^>> 7;
  #L3e6ca4.  goto L3e6c88;
  #L3e6ca6.  v3:= v1.`mc.d$b.a` @type ^`qc.c` @kind object;
  #L3e6caa.  goto L3e6c72;
}
