record `mc.d$a` @kind class @AccessFlag FINAL {
  `java.util.List` `mc.d$a.a` @AccessFlag PRIVATE_FINAL;
  `qc.e` `mc.d$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `mc.d$a.c` @AccessFlag PRIVATE_FINAL;
  `int` `mc.d$a.d` @AccessFlag PRIVATE;
  `mc.c`[] `mc.d$a.e` @AccessFlag ;
  `int` `mc.d$a.f` @AccessFlag ;
  `int` `mc.d$a.g` @AccessFlag ;
  `int` `mc.d$a.h` @AccessFlag ;
}
procedure `void` `<init>`(`mc.d$a` v1 @kind this, `int` v2 , `int` v3 , `qc.s` v4 @kind object) @signature `Lmc/d$a;.<init>:(IILqc/s;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3e6340.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e6346.  v0:= new `java.util.ArrayList`;
  #L3e634a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3e6350.  v1.`mc.d$a.a` @type ^`java.util.List` := v0 @kind object;
  #L3e6354.  v0:= 8I;
  #L3e6358.  v0:= new `mc.c`[v0];
  #L3e635c.  v1.`mc.d$a.e` @type ^`mc.c`[] := v0 @kind object;
  #L3e6360.  v0:= length @variable v0;
  #L3e6362.  v0:= v0 + -1;
  #L3e6366.  v1.`mc.d$a.f` @type ^`int` := v0;
  #L3e636a.  v0:= 0I;
  #L3e636c.  v1.`mc.d$a.g` @type ^`int` := v0;
  #L3e6370.  v1.`mc.d$a.h` @type ^`int` := v0;
  #L3e6374.  v1.`mc.d$a.c` @type ^`int` := v2;
  #L3e6378.  v1.`mc.d$a.d` @type ^`int` := v3;
  #L3e637c.  call temp:= `b`(v4) @signature `Lqc/l;.b:(Lqc/s;)Lqc/e;` @kind static;
  #L3e6382.  v2:= temp @kind object;
  #L3e6384.  v1.`mc.d$a.b` @type ^`qc.e` := v2 @kind object;
  #L3e6388.  return @kind void;
}
procedure `void` `<init>`(`mc.d$a` v0 @kind this, `int` v1 , `qc.s` v2 @kind object) @signature `Lmc/d$a;.<init>:(ILqc/s;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e639c.  call `<init>`(v0, v1, v1, v2) @signature `Lmc/d$a;.<init>:(IILqc/s;)V` @kind direct;
  #L3e63a2.  return @kind void;
}
procedure `void` `a`(`mc.d$a` v2 @kind this) @signature `Lmc/d$a;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e63b4.  v0:= v2.`mc.d$a.d` @type ^`int`;
  #L3e63b8.  v1:= v2.`mc.d$a.h` @type ^`int`;
  #L3e63bc.  if v0 >= v1 then goto L3e63d4;
  #L3e63c0.  if v0 != 0 then goto L3e63cc;
  #L3e63c4.  call `b`(v2) @signature `Lmc/d$a;.b:()V` @kind direct;
  #L3e63ca.  goto L3e63d4;
  #L3e63cc.  v1:= v1 - v0 @kind int;
  #L3e63ce.  call temp:= `d`(v2, v1) @signature `Lmc/d$a;.d:(I)I` @kind direct;
  #L3e63d4.  return @kind void;
}
procedure `void` `b`(`mc.d$a` v2 @kind this) @signature `Lmc/d$a;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e63e8.  v0:= v2.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e63ec.  v1:= 0I;
  #L3e63ee.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L3e63f4.  v0:= v2.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e63f8.  v0:= length @variable v0;
  #L3e63fa.  v0:= v0 + -1;
  #L3e63fe.  v2.`mc.d$a.f` @type ^`int` := v0;
  #L3e6402.  v0:= 0I;
  #L3e6404.  v2.`mc.d$a.g` @type ^`int` := v0;
  #L3e6408.  v2.`mc.d$a.h` @type ^`int` := v0;
  #L3e640c.  return @kind void;
}
procedure `int` `c`(`mc.d$a` v1 @kind this, `int` v2 ) @signature `Lmc/d$a;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e6114.  v0:= v1.`mc.d$a.f` @type ^`int`;
  #L3e6118.  v0:= v0 + 1;
  #L3e611c.  v0:= v0 + v2 @kind int;
  #L3e611e.  return v0;
}
procedure `int` `d`(`mc.d$a` v4 @kind this, `int` v5 ) @signature `Lmc/d$a;.d:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e6130.  v0:= 0I;
  #L3e6132.  if v5 <= 0 then goto L3e61a4;
  #L3e6136.  v1:= v4.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e613a.  v1:= length @variable v1;
  #L3e613c.  v1:= v1 + -1;
  #L3e6140.  v2:= v4.`mc.d$a.f` @type ^`int`;
  #L3e6144.  if v1 < v2 then goto L3e6182;
  #L3e6148.  if v5 <= 0 then goto L3e6182;
  #L3e614c.  v2:= v4.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e6150.  v3:= v2[v1] @kind object;
  #L3e6154.  v3:= v3.`mc.c.c` @type ^`int`;
  #L3e6158.  v5:= v5 - v3 @kind int;
  #L3e615a.  v3:= v4.`mc.d$a.h` @type ^`int`;
  #L3e615e.  v2:= v2[v1] @kind object;
  #L3e6162.  v2:= v2.`mc.c.c` @type ^`int`;
  #L3e6166.  v3:= v3 - v2 @kind int;
  #L3e6168.  v4.`mc.d$a.h` @type ^`int` := v3;
  #L3e616c.  v2:= v4.`mc.d$a.g` @type ^`int`;
  #L3e6170.  v2:= v2 + -1;
  #L3e6174.  v4.`mc.d$a.g` @type ^`int` := v2;
  #L3e6178.  v0:= v0 + 1;
  #L3e617c.  v1:= v1 + -1;
  #L3e6180.  goto L3e6140;
  #L3e6182.  v5:= v4.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e6186.  v1:= v2 + 1;
  #L3e618a.  v2:= v2 + 1;
  #L3e618e.  v2:= v2 + v0 @kind int;
  #L3e6190.  v3:= v4.`mc.d$a.g` @type ^`int`;
  #L3e6194.  call `arraycopy`(v5, v1, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e619a.  v5:= v4.`mc.d$a.f` @type ^`int`;
  #L3e619e.  v5:= v5 + v0 @kind int;
  #L3e61a0.  v4.`mc.d$a.f` @type ^`int` := v5;
  #L3e61a4.  return v0;
}
procedure `qc.f` `f`(`mc.d$a` v3 @kind this, `int` v4 ) @signature `Lmc/d$a;.f:(I)Lqc/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e6248.  call temp:= `h`(v3, v4) @signature `Lmc/d$a;.h:(I)Z` @kind direct;
  #L3e624e.  v0:= temp;
  #L3e6250.  if v0 == 0 then goto L3e6262;
  #L3e6254.  v0:= `@@mc.d.a` @type ^`mc.c`[] @kind object;
  #L3e6258.  v4:= v0[v4] @kind object;
  #L3e625c.  v4:= v4.`mc.c.a` @type ^`qc.f` @kind object;
  #L3e6260.  return v4 @kind object;
  #L3e6262.  v0:= `@@mc.d.a` @type ^`mc.c`[] @kind object;
  #L3e6266.  v0:= length @variable v0;
  #L3e6268.  v0:= v4 - v0 @kind int;
  #L3e626c.  call temp:= `c`(v3, v0) @signature `Lmc/d$a;.c:(I)I` @kind direct;
  #L3e6272.  v0:= temp;
  #L3e6274.  if v0 < 0 then goto L3e6288;
  #L3e6278.  v1:= v3.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e627c.  v2:= length @variable v1;
  #L3e627e.  if v0 >= v2 then goto L3e6288;
  #L3e6282.  v4:= v1[v0] @kind object;
  #L3e6286.  goto L3e625c;
  #L3e6288.  v0:= new `java.io.IOException`;
  #L3e628c.  v1:= new `java.lang.StringBuilder`;
  #L3e6290.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e6296.  v2:= "Header index too large " @kind object;
  #L3e629a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e62a0.  v4:= v4 + 1;
  #L3e62a4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e62aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e62b0.  v4:= temp @kind object;
  #L3e62b2.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e62b8.  throw v0;
}
procedure `void` `g`(`mc.d$a` v5 @kind this, `int` v6 , `mc.c` v7 @kind object) @signature `Lmc/d$a;.g:(ILmc/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e6420.  v0:= v5.`mc.d$a.a` @type ^`java.util.List` @kind object;
  #L3e6424.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e642a.  v0:= v7.`mc.c.c` @type ^`int`;
  #L3e642e.  v1:= -1I;
  #L3e6430.  if v6 == v1 then goto L3e644a;
  #L3e6434.  v2:= v5.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e6438.  call temp:= `c`(v5, v6) @signature `Lmc/d$a;.c:(I)I` @kind direct;
  #L3e643e.  v3:= temp;
  #L3e6440.  v2:= v2[v3] @kind object;
  #L3e6444.  v2:= v2.`mc.c.c` @type ^`int`;
  #L3e6448.  v0:= v0 - v2 @kind int;
  #L3e644a.  v2:= v5.`mc.d$a.d` @type ^`int`;
  #L3e644e.  if v0 <= v2 then goto L3e645a;
  #L3e6452.  call `b`(v5) @signature `Lmc/d$a;.b:()V` @kind direct;
  #L3e6458.  return @kind void;
  #L3e645a.  v3:= v5.`mc.d$a.h` @type ^`int`;
  #L3e645e.  v3:= v3 + v0 @kind int;
  #L3e6460.  v3:= v3 - v2 @kind int;
  #L3e6462.  call temp:= `d`(v5, v3) @signature `Lmc/d$a;.d:(I)I` @kind direct;
  #L3e6468.  v2:= temp;
  #L3e646a.  if v6 != v1 then goto L3e64ca;
  #L3e646e.  v6:= v5.`mc.d$a.g` @type ^`int`;
  #L3e6472.  v6:= v6 + 1;
  #L3e6476.  v1:= v5.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e647a.  v2:= length @variable v1;
  #L3e647c.  if v6 <= v2 then goto L3e64a8;
  #L3e6480.  v6:= length @variable v1;
  #L3e6482.  v6:= v6 * 2;
  #L3e6486.  v6:= new `mc.c`[v6];
  #L3e648a.  v2:= 0I;
  #L3e648c.  v3:= length @variable v1;
  #L3e648e.  v4:= length @variable v1;
  #L3e6490.  call `arraycopy`(v1, v2, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e6496.  v1:= v5.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e649a.  v1:= length @variable v1;
  #L3e649c.  v1:= v1 + -1;
  #L3e64a0.  v5.`mc.d$a.f` @type ^`int` := v1;
  #L3e64a4.  v5.`mc.d$a.e` @type ^`mc.c`[] := v6 @kind object;
  #L3e64a8.  v6:= v5.`mc.d$a.f` @type ^`int`;
  #L3e64ac.  v1:= v6 + -1;
  #L3e64b0.  v5.`mc.d$a.f` @type ^`int` := v1;
  #L3e64b4.  v1:= v5.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e64b8.  v1[v6]:= v7 @kind object;
  #L3e64bc.  v6:= v5.`mc.d$a.g` @type ^`int`;
  #L3e64c0.  v6:= v6 + 1;
  #L3e64c4.  v5.`mc.d$a.g` @type ^`int` := v6;
  #L3e64c8.  goto L3e64de;
  #L3e64ca.  call temp:= `c`(v5, v6) @signature `Lmc/d$a;.c:(I)I` @kind direct;
  #L3e64d0.  v1:= temp;
  #L3e64d2.  v1:= v1 + v2 @kind int;
  #L3e64d4.  v6:= v6 + v1 @kind int;
  #L3e64d6.  v1:= v5.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e64da.  v1[v6]:= v7 @kind object;
  #L3e64de.  v6:= v5.`mc.d$a.h` @type ^`int`;
  #L3e64e2.  v6:= v6 + v0 @kind int;
  #L3e64e4.  v5.`mc.d$a.h` @type ^`int` := v6;
  #L3e64e8.  return @kind void;
}
procedure `boolean` `h`(`mc.d$a` v2 @kind this, `int` v3 ) @signature `Lmc/d$a;.h:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e60ec.  v0:= 1I;
  #L3e60ee.  if v3 < 0 then goto L3e6100;
  #L3e60f2.  v1:= `@@mc.d.a` @type ^`mc.c`[] @kind object;
  #L3e60f6.  v1:= length @variable v1;
  #L3e60f8.  v1:= v1 - v0 @kind int;
  #L3e60fa.  if v3 > v1 then goto L3e6100;
  #L3e60fe.  goto L3e6102;
  #L3e6100.  v0:= 0I;
  #L3e6102.  return v0;
}
procedure `int` `i`(`mc.d$a` v1 @kind this) @signature `Lmc/d$a;.i:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e61b8.  v0:= v1.`mc.d$a.b` @type ^`qc.e` @kind object;
  #L3e61bc.  call temp:= `readByte`(v0) @signature `Lqc/e;.readByte:()B` @kind interface;
  #L3e61c2.  v0:= temp;
  #L3e61c4.  v0:= v0 ^& 255;
  #L3e61c8.  return v0;
}
procedure `void` `l`(`mc.d$a` v3 @kind this, `int` v4 ) @signature `Lmc/d$a;.l:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e6628.  call temp:= `h`(v3, v4) @signature `Lmc/d$a;.h:(I)Z` @kind direct;
  #L3e662e.  v0:= temp;
  #L3e6630.  if v0 == 0 then goto L3e6648;
  #L3e6634.  v0:= `@@mc.d.a` @type ^`mc.c`[] @kind object;
  #L3e6638.  v4:= v0[v4] @kind object;
  #L3e663c.  v0:= v3.`mc.d$a.a` @type ^`java.util.List` @kind object;
  #L3e6640.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e6646.  goto L3e6676;
  #L3e6648.  v0:= `@@mc.d.a` @type ^`mc.c`[] @kind object;
  #L3e664c.  v0:= length @variable v0;
  #L3e664e.  v0:= v4 - v0 @kind int;
  #L3e6652.  call temp:= `c`(v3, v0) @signature `Lmc/d$a;.c:(I)I` @kind direct;
  #L3e6658.  v0:= temp;
  #L3e665a.  if v0 < 0 then goto L3e6678;
  #L3e665e.  v1:= v3.`mc.d$a.e` @type ^`mc.c`[] @kind object;
  #L3e6662.  v2:= length @variable v1;
  #L3e6664.  if v0 >= v2 then goto L3e6678;
  #L3e6668.  v4:= v3.`mc.d$a.a` @type ^`java.util.List` @kind object;
  #L3e666c.  v0:= v1[v0] @kind object;
  #L3e6670.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e6676.  return @kind void;
  #L3e6678.  v0:= new `java.io.IOException`;
  #L3e667c.  v1:= new `java.lang.StringBuilder`;
  #L3e6680.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e6686.  v2:= "Header index too large " @kind object;
  #L3e668a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e6690.  v4:= v4 + 1;
  #L3e6694.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e669a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e66a0.  v4:= temp @kind object;
  #L3e66a2.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e66a8.  throw v0;
}
procedure `void` `n`(`mc.d$a` v2 @kind this, `int` v3 ) @signature `Lmc/d$a;.n:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e66bc.  call temp:= `f`(v2, v3) @signature `Lmc/d$a;.f:(I)Lqc/f;` @kind direct;
  #L3e66c2.  v3:= temp @kind object;
  #L3e66c4.  call temp:= `j`(v2) @signature `Lmc/d$a;.j:()Lqc/f;` @kind virtual;
  #L3e66ca.  v0:= temp @kind object;
  #L3e66cc.  v1:= new `mc.c`;
  #L3e66d0.  call `<init>`(v1, v3, v0) @signature `Lmc/c;.<init>:(Lqc/f;Lqc/f;)V` @kind direct;
  #L3e66d6.  v3:= -1I;
  #L3e66d8.  call `g`(v2, v3, v1) @signature `Lmc/d$a;.g:(ILmc/c;)V` @kind direct;
  #L3e66de.  return @kind void;
}
procedure `void` `o`(`mc.d$a` v3 @kind this) @signature `Lmc/d$a;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e66f0.  call temp:= `j`(v3) @signature `Lmc/d$a;.j:()Lqc/f;` @kind virtual;
  #L3e66f6.  v0:= temp @kind object;
  #L3e66f8.  call temp:= `a`(v0) @signature `Lmc/d;.a:(Lqc/f;)Lqc/f;` @kind static;
  #L3e66fe.  v0:= temp @kind object;
  #L3e6700.  call temp:= `j`(v3) @signature `Lmc/d$a;.j:()Lqc/f;` @kind virtual;
  #L3e6706.  v1:= temp @kind object;
  #L3e6708.  v2:= new `mc.c`;
  #L3e670c.  call `<init>`(v2, v0, v1) @signature `Lmc/c;.<init>:(Lqc/f;Lqc/f;)V` @kind direct;
  #L3e6712.  v0:= -1I;
  #L3e6714.  call `g`(v3, v0, v2) @signature `Lmc/d$a;.g:(ILmc/c;)V` @kind direct;
  #L3e671a.  return @kind void;
}
procedure `void` `p`(`mc.d$a` v3 @kind this, `int` v4 ) @signature `Lmc/d$a;.p:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e672c.  call temp:= `f`(v3, v4) @signature `Lmc/d$a;.f:(I)Lqc/f;` @kind direct;
  #L3e6732.  v4:= temp @kind object;
  #L3e6734.  call temp:= `j`(v3) @signature `Lmc/d$a;.j:()Lqc/f;` @kind virtual;
  #L3e673a.  v0:= temp @kind object;
  #L3e673c.  v1:= v3.`mc.d$a.a` @type ^`java.util.List` @kind object;
  #L3e6740.  v2:= new `mc.c`;
  #L3e6744.  call `<init>`(v2, v4, v0) @signature `Lmc/c;.<init>:(Lqc/f;Lqc/f;)V` @kind direct;
  #L3e674a.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e6750.  return @kind void;
}
procedure `void` `q`(`mc.d$a` v4 @kind this) @signature `Lmc/d$a;.q:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e6764.  call temp:= `j`(v4) @signature `Lmc/d$a;.j:()Lqc/f;` @kind virtual;
  #L3e676a.  v0:= temp @kind object;
  #L3e676c.  call temp:= `a`(v0) @signature `Lmc/d;.a:(Lqc/f;)Lqc/f;` @kind static;
  #L3e6772.  v0:= temp @kind object;
  #L3e6774.  call temp:= `j`(v4) @signature `Lmc/d$a;.j:()Lqc/f;` @kind virtual;
  #L3e677a.  v1:= temp @kind object;
  #L3e677c.  v2:= v4.`mc.d$a.a` @type ^`java.util.List` @kind object;
  #L3e6780.  v3:= new `mc.c`;
  #L3e6784.  call `<init>`(v3, v0, v1) @signature `Lmc/c;.<init>:(Lqc/f;Lqc/f;)V` @kind direct;
  #L3e678a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e6790.  return @kind void;
}
procedure `java.util.List` `e`(`mc.d$a` v2 @kind this) @signature `Lmc/d$a;.e:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e621c.  v0:= new `java.util.ArrayList`;
  #L3e6220.  v1:= v2.`mc.d$a.a` @type ^`java.util.List` @kind object;
  #L3e6224.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3e622a.  v1:= v2.`mc.d$a.a` @type ^`java.util.List` @kind object;
  #L3e622e.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L3e6234.  return v0 @kind object;
}
procedure `qc.f` `j`(`mc.d$a` v5 @kind this) @signature `Lmc/d$a;.j:()Lqc/f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e62cc.  call temp:= `i`(v5) @signature `Lmc/d$a;.i:()I` @kind direct;
  #L3e62d2.  v0:= temp;
  #L3e62d4.  v1:= v0 ^& 128;
  #L3e62d8.  v2:= 128I;
  #L3e62dc.  if v1 != v2 then goto L3e62e4;
  #L3e62e0.  v1:= 1I;
  #L3e62e2.  goto L3e62e6;
  #L3e62e4.  v1:= 0I;
  #L3e62e6.  v2:= 127I;
  #L3e62ea.  call temp:= `m`(v5, v0, v2) @signature `Lmc/d$a;.m:(II)I` @kind virtual;
  #L3e62f0.  v0:= temp;
  #L3e62f2.  if v1 == 0 then goto L3e631e;
  #L3e62f6.  call temp:= `f`() @signature `Lmc/k;.f:()Lmc/k;` @kind static;
  #L3e62fc.  v1:= temp @kind object;
  #L3e62fe.  v2:= v5.`mc.d$a.b` @type ^`qc.e` @kind object;
  #L3e6302.  v3:= (`long`) v0 @kind i2l;
  #L3e6304.  call temp:= `B`(v2, v3) @signature `Lqc/e;.B:(J)[B` @kind interface;
  #L3e630a.  v0:= temp @kind object;
  #L3e630c.  call temp:= `c`(v1, v0) @signature `Lmc/k;.c:([B)[B` @kind virtual;
  #L3e6312.  v0:= temp @kind object;
  #L3e6314.  call temp:= `s`(v0) @signature `Lqc/f;.s:([B)Lqc/f;` @kind static;
  #L3e631a.  v0:= temp @kind object;
  #L3e631c.  return v0 @kind object;
  #L3e631e.  v1:= v5.`mc.d$a.b` @type ^`qc.e` @kind object;
  #L3e6322.  v2:= (`long`) v0 @kind i2l;
  #L3e6324.  call temp:= `n`(v1, v2) @signature `Lqc/e;.n:(J)Lqc/f;` @kind interface;
  #L3e632a.  v0:= temp @kind object;
  #L3e632c.  return v0 @kind object;
}
procedure `void` `k`(`mc.d$a` v3 @kind this) @signature `Lmc/d$a;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3e64fc.  v0:= v3.`mc.d$a.b` @type ^`qc.e` @kind object;
  #L3e6500.  call temp:= `z`(v0) @signature `Lqc/e;.z:()Z` @kind interface;
  #L3e6506.  v0:= temp;
  #L3e6508.  if v0 != 0 then goto L3e6616;
  #L3e650c.  v0:= v3.`mc.d$a.b` @type ^`qc.e` @kind object;
  #L3e6510.  call temp:= `readByte`(v0) @signature `Lqc/e;.readByte:()B` @kind interface;
  #L3e6516.  v0:= temp;
  #L3e6518.  v0:= v0 ^& 255;
  #L3e651c.  v1:= 128I;
  #L3e6520.  if v0 == v1 then goto L3e6606;
  #L3e6524.  v2:= v0 ^& 128;
  #L3e6528.  if v2 != v1 then goto L3e6544;
  #L3e652c.  v1:= 127I;
  #L3e6530.  call temp:= `m`(v3, v0, v1) @signature `Lmc/d$a;.m:(II)I` @kind virtual;
  #L3e6536.  v0:= temp;
  #L3e6538.  v0:= v0 + -1;
  #L3e653c.  call `l`(v3, v0) @signature `Lmc/d$a;.l:(I)V` @kind direct;
  #L3e6542.  goto L3e64fc;
  #L3e6544.  v1:= 64I;
  #L3e6548.  if v0 != v1 then goto L3e6554;
  #L3e654c.  call `o`(v3) @signature `Lmc/d$a;.o:()V` @kind direct;
  #L3e6552.  goto L3e64fc;
  #L3e6554.  v2:= v0 ^& 64;
  #L3e6558.  if v2 != v1 then goto L3e6574;
  #L3e655c.  v1:= 63I;
  #L3e6560.  call temp:= `m`(v3, v0, v1) @signature `Lmc/d$a;.m:(II)I` @kind virtual;
  #L3e6566.  v0:= temp;
  #L3e6568.  v0:= v0 + -1;
  #L3e656c.  call `n`(v3, v0) @signature `Lmc/d$a;.n:(I)V` @kind direct;
  #L3e6572.  goto L3e64fc;
  #L3e6574.  v1:= v0 ^& 32;
  #L3e6578.  v2:= 32I;
  #L3e657c.  if v1 != v2 then goto L3e65d6;
  #L3e6580.  v1:= 31I;
  #L3e6584.  call temp:= `m`(v3, v0, v1) @signature `Lmc/d$a;.m:(II)I` @kind virtual;
  #L3e658a.  v0:= temp;
  #L3e658c.  v3.`mc.d$a.d` @type ^`int` := v0;
  #L3e6590.  if v0 < 0 then goto L3e65a4;
  #L3e6594.  v1:= v3.`mc.d$a.c` @type ^`int`;
  #L3e6598.  if v0 > v1 then goto L3e65a4;
  #L3e659c.  call `a`(v3) @signature `Lmc/d$a;.a:()V` @kind direct;
  #L3e65a2.  goto L3e64fc;
  #L3e65a4.  v0:= new `java.io.IOException`;
  #L3e65a8.  v1:= new `java.lang.StringBuilder`;
  #L3e65ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e65b2.  v2:= "Invalid dynamic table size update " @kind object;
  #L3e65b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e65bc.  v2:= v3.`mc.d$a.d` @type ^`int`;
  #L3e65c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e65c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e65cc.  v1:= temp @kind object;
  #L3e65ce.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e65d4.  throw v0;
  #L3e65d6.  v1:= 16I;
  #L3e65da.  if v0 == v1 then goto L3e65fc;
  #L3e65de.  if v0 != 0 then goto L3e65e4;
  #L3e65e2.  goto L3e65fc;
  #L3e65e4.  v1:= 15I;
  #L3e65e8.  call temp:= `m`(v3, v0, v1) @signature `Lmc/d$a;.m:(II)I` @kind virtual;
  #L3e65ee.  v0:= temp;
  #L3e65f0.  v0:= v0 + -1;
  #L3e65f4.  call `p`(v3, v0) @signature `Lmc/d$a;.p:(I)V` @kind direct;
  #L3e65fa.  goto L3e64fc;
  #L3e65fc.  call `q`(v3) @signature `Lmc/d$a;.q:()V` @kind direct;
  #L3e6602.  goto L3e64fc;
  #L3e6606.  v0:= new `java.io.IOException`;
  #L3e660a.  v1:= "index == 0" @kind object;
  #L3e660e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e6614.  throw v0;
  #L3e6616.  return @kind void;
}
procedure `int` `m`(`mc.d$a` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lmc/d$a;.m:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3e61dc.  v3:= v3 ^& v4 @kind int;
  #L3e61de.  if v3 >= v4 then goto L3e61e4;
  #L3e61e2.  return v3;
  #L3e61e4.  v3:= 0I;
  #L3e61e6.  call temp:= `i`(v2) @signature `Lmc/d$a;.i:()I` @kind direct;
  #L3e61ec.  v0:= temp;
  #L3e61ee.  v1:= v0 ^& 128;
  #L3e61f2.  if v1 == 0 then goto L3e6204;
  #L3e61f6.  v0:= v0 ^& 127;
  #L3e61fa.  v0:= v0 ^< v3 @kind int;
  #L3e61fc.  v4:= v4 + v0 @kind int;
  #L3e61fe.  v3:= v3 + 7;
  #L3e6202.  goto L3e61e6;
  #L3e6204.  v3:= v0 ^< v3 @kind int;
  #L3e6208.  v4:= v4 + v3 @kind int;
  #L3e620a.  return v4;
}
