record `mc.j` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `qc.d` `mc.j.o` @AccessFlag PRIVATE_FINAL;
  `boolean` `mc.j.p` @AccessFlag PRIVATE_FINAL;
  `qc.c` `mc.j.q` @AccessFlag PRIVATE_FINAL;
  `int` `mc.j.r` @AccessFlag PRIVATE;
  `boolean` `mc.j.s` @AccessFlag PRIVATE;
  `mc.d$b` `mc.j.t` @AccessFlag FINAL;
}
global `java.util.logging.Logger` `@@mc.j.u` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lmc/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3eaec4.  v0:= constclass @type ^`mc.e` @kind object;
  #L3eaec8.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3eaece.  v0:= temp @kind object;
  #L3eaed0.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L3eaed6.  v0:= temp @kind object;
  #L3eaed8.  `@@mc.j.u` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L3eaedc.  return @kind void;
}
procedure `void` `<init>`(`mc.j` v0 @kind this, `qc.d` v1 @kind object, `boolean` v2 ) @signature `Lmc/j;.<init>:(Lqc/d;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3eaef0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3eaef6.  v0.`mc.j.o` @type ^`qc.d` := v1 @kind object;
  #L3eaefa.  v0.`mc.j.p` @type ^`boolean` := v2 @kind boolean;
  #L3eaefe.  v1:= new `qc.c`;
  #L3eaf02.  call `<init>`(v1) @signature `Lqc/c;.<init>:()V` @kind direct;
  #L3eaf08.  v0.`mc.j.q` @type ^`qc.c` := v1 @kind object;
  #L3eaf0c.  v2:= new `mc.d$b`;
  #L3eaf10.  call `<init>`(v2, v1) @signature `Lmc/d$b;.<init>:(Lqc/c;)V` @kind direct;
  #L3eaf16.  v0.`mc.j.t` @type ^`mc.d$b` := v2 @kind object;
  #L3eaf1a.  v1:= 16384I;
  #L3eaf1e.  v0.`mc.j.r` @type ^`int` := v1;
  #L3eaf22.  return @kind void;
}
procedure `void` `M`(`mc.j` v7 @kind this, `int` v8 , `long` v9 ) @signature `Lmc/j;.M:(IJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3eb6f8.  v0:= 0L;
  #L3eb6fc.  v2:= lcmp(v9, v0);
  #L3eb700.  if v2 <= 0 then goto L3eb740;
  #L3eb704.  v2:= v7.`mc.j.r` @type ^`int`;
  #L3eb708.  v2:= (`long`) v2 @kind i2l;
  #L3eb70a.  call temp:= `min`(v2, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3eb710.  v2:= temp @kind wide;
  #L3eb712.  v3:= (`int`) v2 @kind l2i;
  #L3eb714.  v4:= (`long`) v3 @kind i2l;
  #L3eb716.  v9:= v9 - v4 @kind long;
  #L3eb718.  v2:= 9I;
  #L3eb71c.  v6:= lcmp(v9, v0);
  #L3eb720.  if v6 != 0 then goto L3eb728;
  #L3eb724.  v0:= 4I;
  #L3eb726.  goto L3eb72a;
  #L3eb728.  v0:= 0I;
  #L3eb72a.  call `i`(v7, v8, v3, v2, v0) @signature `Lmc/j;.i:(IIBB)V` @kind virtual;
  #L3eb730.  v0:= v7.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb734.  v1:= v7.`mc.j.q` @type ^`qc.c` @kind object;
  #L3eb738.  call `q`(v0, v1, v4) @signature `Lqc/r;.q:(Lqc/c;J)V` @kind interface;
  #L3eb73e.  goto L3eb6f8;
  #L3eb740.  return @kind void;
}
procedure `void` `N`(`qc.d` v1 @kind object, `int` v2 ) @signature `Lmc/j;.N:(Lqc/d;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3eb754.  v0:= v2 ^>> 16;
  #L3eb758.  v0:= v0 ^& 255;
  #L3eb75c.  call temp:= `A`(v1, v0) @signature `Lqc/d;.A:(I)Lqc/d;` @kind interface;
  #L3eb762.  v0:= v2 ^>> 8;
  #L3eb766.  v0:= v0 ^& 255;
  #L3eb76a.  call temp:= `A`(v1, v0) @signature `Lqc/d;.A:(I)Lqc/d;` @kind interface;
  #L3eb770.  v2:= v2 ^& 255;
  #L3eb774.  call temp:= `A`(v1, v2) @signature `Lqc/d;.A:(I)Lqc/d;` @kind interface;
  #L3eb77a.  return @kind void;
}
procedure `void` `E`(`mc.j` v3 @kind this, `int` v4 , `mc.b` v5 @kind object) @signature `Lmc/j;.E:(ILmc/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eb4c8.  @monitorenter v3
  #L3eb4ca.  v0:= v3.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eb4ce.  if v0 != 0 then goto L3eb510;
  #L3eb4d2.  v0:= v5.`mc.b.o` @type ^`int`;
  #L3eb4d6.  v1:= -1I;
  #L3eb4d8.  if v0 == v1 then goto L3eb504;
  #L3eb4dc.  v0:= 4I;
  #L3eb4de.  v1:= 3I;
  #L3eb4e0.  v2:= 0I;
  #L3eb4e2.  call `i`(v3, v4, v0, v1, v2) @signature `Lmc/j;.i:(IIBB)V` @kind virtual;
  #L3eb4e8.  v4:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb4ec.  v5:= v5.`mc.b.o` @type ^`int`;
  #L3eb4f0.  call temp:= `t`(v4, v5) @signature `Lqc/d;.t:(I)Lqc/d;` @kind interface;
  #L3eb4f6.  v4:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb4fa.  call `flush`(v4) @signature `Lqc/d;.flush:()V` @kind interface;
  #L3eb500.  @monitorexit v3
  #L3eb502.  return @kind void;
  #L3eb504.  v4:= new `java.lang.IllegalArgumentException`;
  #L3eb508.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3eb50e.  throw v4;
  #L3eb510.  v4:= new `java.io.IOException`;
  #L3eb514.  v5:= "closed" @kind object;
  #L3eb518.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb51e.  throw v4;
  #L3eb520.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eb522.  @monitorexit v3
  #L3eb524.  throw v4;
  catch `java.lang.Throwable` @[L3eb4ca..L3eb500] goto L3eb520;
  catch `java.lang.Throwable` @[L3eb504..L3eb520] goto L3eb520;
}
procedure `void` `G`(`mc.j` v4 @kind this, `mc.m` v5 @kind object) @signature `Lmc/j;.G:(Lmc/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3eb54c.  @monitorenter v4
  #L3eb54e.  v0:= v4.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eb552.  if v0 != 0 then goto L3eb5c6;
  #L3eb556.  call temp:= `j`(v5) @signature `Lmc/m;.j:()I` @kind virtual;
  #L3eb55c.  v0:= temp;
  #L3eb55e.  v0:= v0 * 6;
  #L3eb562.  v1:= 0I;
  #L3eb564.  v2:= 4I;
  #L3eb566.  call `i`(v4, v1, v0, v2, v1) @signature `Lmc/j;.i:(IIBB)V` @kind virtual;
  #L3eb56c.  v0:= 10I;
  #L3eb570.  if v1 >= v0 then goto L3eb5b8;
  #L3eb574.  call temp:= `g`(v5, v1) @signature `Lmc/m;.g:(I)Z` @kind virtual;
  #L3eb57a.  v0:= temp;
  #L3eb57c.  if v0 != 0 then goto L3eb582;
  #L3eb580.  goto L3eb5b2;
  #L3eb582.  if v1 != v2 then goto L3eb58a;
  #L3eb586.  v0:= 3I;
  #L3eb588.  goto L3eb596;
  #L3eb58a.  v0:= 7I;
  #L3eb58c.  if v1 != v0 then goto L3eb594;
  #L3eb590.  v0:= 4I;
  #L3eb592.  goto L3eb596;
  #L3eb594.  v0:= v1;
  #L3eb596.  v3:= v4.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb59a.  call temp:= `r`(v3, v0) @signature `Lqc/d;.r:(I)Lqc/d;` @kind interface;
  #L3eb5a0.  v0:= v4.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb5a4.  call temp:= `b`(v5, v1) @signature `Lmc/m;.b:(I)I` @kind virtual;
  #L3eb5aa.  v3:= temp;
  #L3eb5ac.  call temp:= `t`(v0, v3) @signature `Lqc/d;.t:(I)Lqc/d;` @kind interface;
  #L3eb5b2.  v1:= v1 + 1;
  #L3eb5b6.  goto L3eb56c;
  #L3eb5b8.  v5:= v4.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb5bc.  call `flush`(v5) @signature `Lqc/d;.flush:()V` @kind interface;
  #L3eb5c2.  @monitorexit v4
  #L3eb5c4.  return @kind void;
  #L3eb5c6.  v5:= new `java.io.IOException`;
  #L3eb5ca.  v0:= "closed" @kind object;
  #L3eb5ce.  call `<init>`(v5, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb5d4.  throw v5;
  #L3eb5d6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eb5d8.  @monitorexit v4
  #L3eb5da.  throw v5;
  catch `java.lang.Throwable` @[L3eb54e..L3eb5c2] goto L3eb5d6;
  catch `java.lang.Throwable` @[L3eb5c6..L3eb5d6] goto L3eb5d6;
}
procedure `void` `J`(`mc.j` v0 @kind this, `boolean` v1 , `int` v2 , `int` v3 , `java.util.List` v4 @kind object) @signature `Lmc/j;.J:(ZIILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L3eb600.  @monitorenter v0
  #L3eb602.  v3:= v0.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eb606.  if v3 != 0 then goto L3eb614;
  #L3eb60a.  call `o`(v0, v1, v2, v4) @signature `Lmc/j;.o:(ZILjava/util/List;)V` @kind virtual;
  #L3eb610.  @monitorexit v0
  #L3eb612.  return @kind void;
  #L3eb614.  v1:= new `java.io.IOException`;
  #L3eb618.  v2:= "closed" @kind object;
  #L3eb61c.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb622.  throw v1;
  #L3eb624.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eb626.  @monitorexit v0
  #L3eb628.  throw v1;
  catch `java.lang.Throwable` @[L3eb602..L3eb610] goto L3eb624;
  catch `java.lang.Throwable` @[L3eb614..L3eb624] goto L3eb624;
}
procedure `void` `K`(`mc.j` v4 @kind this, `int` v5 , `long` v6 ) @signature `Lmc/j;.K:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3eb650.  @monitorenter v4
  #L3eb652.  v0:= v4.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eb656.  if v0 != 0 then goto L3eb6bc;
  #L3eb65a.  v0:= 0L;
  #L3eb65e.  v2:= 0I;
  #L3eb660.  v3:= lcmp(v6, v0);
  #L3eb664.  if v3 == 0 then goto L3eb69c;
  #L3eb668.  v0:= 2147483647L;
  #L3eb66e.  v3:= lcmp(v6, v0);
  #L3eb672.  if v3 > 0 then goto L3eb69c;
  #L3eb676.  v0:= 4I;
  #L3eb678.  v1:= 8I;
  #L3eb67c.  call `i`(v4, v5, v0, v1, v2) @signature `Lmc/j;.i:(IIBB)V` @kind virtual;
  #L3eb682.  v5:= v4.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb686.  v7:= (`int`) v6 @kind l2i;
  #L3eb688.  call temp:= `t`(v5, v7) @signature `Lqc/d;.t:(I)Lqc/d;` @kind interface;
  #L3eb68e.  v5:= v4.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb692.  call `flush`(v5) @signature `Lqc/d;.flush:()V` @kind interface;
  #L3eb698.  @monitorexit v4
  #L3eb69a.  return @kind void;
  #L3eb69c.  v5:= "windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s" @kind object;
  #L3eb6a0.  v0:= 1I;
  #L3eb6a2.  v0:= new `java.lang.Object`[v0];
  #L3eb6a6.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3eb6ac.  v6:= temp @kind object;
  #L3eb6ae.  v0[v2]:= v6 @kind object;
  #L3eb6b2.  call temp:= `c`(v5, v0) @signature `Lmc/e;.c:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L3eb6b8.  v5:= temp @kind object;
  #L3eb6ba.  throw v5;
  #L3eb6bc.  v5:= new `java.io.IOException`;
  #L3eb6c0.  v6:= "closed" @kind object;
  #L3eb6c4.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb6ca.  throw v5;
  #L3eb6cc.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eb6ce.  @monitorexit v4
  #L3eb6d0.  throw v5;
  catch `java.lang.Throwable` @[L3eb652..L3eb698] goto L3eb6cc;
  catch `java.lang.Throwable` @[L3eb69c..L3eb6cc] goto L3eb6cc;
}
procedure `void` `a`(`mc.j` v2 @kind this, `mc.m` v3 @kind object) @signature `Lmc/j;.a:(Lmc/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eaf34.  @monitorenter v2
  #L3eaf36.  v0:= v2.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eaf3a.  if v0 != 0 then goto L3eaf88;
  #L3eaf3e.  v0:= v2.`mc.j.r` @type ^`int`;
  #L3eaf42.  call temp:= `f`(v3, v0) @signature `Lmc/m;.f:(I)I` @kind virtual;
  #L3eaf48.  v0:= temp;
  #L3eaf4a.  v2.`mc.j.r` @type ^`int` := v0;
  #L3eaf4e.  call temp:= `c`(v3) @signature `Lmc/m;.c:()I` @kind virtual;
  #L3eaf54.  v0:= temp;
  #L3eaf56.  v1:= -1I;
  #L3eaf58.  if v0 == v1 then goto L3eaf6e;
  #L3eaf5c.  v0:= v2.`mc.j.t` @type ^`mc.d$b` @kind object;
  #L3eaf60.  call temp:= `c`(v3) @signature `Lmc/m;.c:()I` @kind virtual;
  #L3eaf66.  v3:= temp;
  #L3eaf68.  call `e`(v0, v3) @signature `Lmc/d$b;.e:(I)V` @kind virtual;
  #L3eaf6e.  v3:= 4I;
  #L3eaf70.  v0:= 1I;
  #L3eaf72.  v1:= 0I;
  #L3eaf74.  call `i`(v2, v1, v1, v3, v0) @signature `Lmc/j;.i:(IIBB)V` @kind virtual;
  #L3eaf7a.  v3:= v2.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eaf7e.  call `flush`(v3) @signature `Lqc/d;.flush:()V` @kind interface;
  #L3eaf84.  @monitorexit v2
  #L3eaf86.  return @kind void;
  #L3eaf88.  v3:= new `java.io.IOException`;
  #L3eaf8c.  v0:= "closed" @kind object;
  #L3eaf90.  call `<init>`(v3, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eaf96.  throw v3;
  #L3eaf98.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eaf9a.  @monitorexit v2
  #L3eaf9c.  throw v3;
  catch `java.lang.Throwable` @[L3eaf36..L3eaf84] goto L3eaf98;
  catch `java.lang.Throwable` @[L3eaf88..L3eaf98] goto L3eaf98;
}
procedure `void` `c`(`mc.j` v5 @kind this) @signature `Lmc/j;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3eaffc.  @monitorenter v5
  #L3eaffe.  v0:= v5.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eb002.  if v0 != 0 then goto L3eb074;
  #L3eb006.  v0:= v5.`mc.j.p` @type ^`boolean` @kind boolean;
  #L3eb00a.  if v0 != 0 then goto L3eb012;
  #L3eb00e.  @monitorexit v5
  #L3eb010.  return @kind void;
  #L3eb012.  v0:= `@@mc.j.u` @type ^`java.util.logging.Logger` @kind object;
  #L3eb016.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L3eb01a.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L3eb020.  v1:= temp;
  #L3eb022.  if v1 == 0 then goto L3eb050;
  #L3eb026.  v1:= ">> CONNECTION %s" @kind object;
  #L3eb02a.  v2:= 1I;
  #L3eb02c.  v2:= new `java.lang.Object`[v2];
  #L3eb030.  v3:= 0I;
  #L3eb032.  v4:= `@@mc.e.a` @type ^`qc.f` @kind object;
  #L3eb036.  call temp:= `r`(v4) @signature `Lqc/f;.r:()Ljava/lang/String;` @kind virtual;
  #L3eb03c.  v4:= temp @kind object;
  #L3eb03e.  v2[v3]:= v4 @kind object;
  #L3eb042.  call temp:= `p`(v1, v2) @signature `Lhc/c;.p:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3eb048.  v1:= temp @kind object;
  #L3eb04a.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L3eb050.  v0:= v5.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb054.  v1:= `@@mc.e.a` @type ^`qc.f` @kind object;
  #L3eb058.  call temp:= `L`(v1) @signature `Lqc/f;.L:()[B` @kind virtual;
  #L3eb05e.  v1:= temp @kind object;
  #L3eb060.  call temp:= `D`(v0, v1) @signature `Lqc/d;.D:([B)Lqc/d;` @kind interface;
  #L3eb066.  v0:= v5.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb06a.  call `flush`(v0) @signature `Lqc/d;.flush:()V` @kind interface;
  #L3eb070.  @monitorexit v5
  #L3eb072.  return @kind void;
  #L3eb074.  v0:= new `java.io.IOException`;
  #L3eb078.  v1:= "closed" @kind object;
  #L3eb07c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb082.  throw v0;
  #L3eb084.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eb086.  @monitorexit v5
  #L3eb088.  throw v0;
  catch `java.lang.Throwable` @[L3eaffe..L3eb00a] goto L3eb084;
  catch `java.lang.Throwable` @[L3eb012..L3eb070] goto L3eb084;
  catch `java.lang.Throwable` @[L3eb074..L3eb084] goto L3eb084;
}
procedure `void` `close`(`mc.j` v1 @kind this) @signature `Lmc/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eafc4.  @monitorenter v1
  #L3eafc6.  v0:= 1I;
  #L3eafc8.  v1.`mc.j.s` @type ^`boolean` := v0 @kind boolean;
  #L3eafcc.  v0:= v1.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eafd0.  call `close`(v0) @signature `Lqc/r;.close:()V` @kind interface;
  #L3eafd6.  @monitorexit v1
  #L3eafd8.  return @kind void;
  #L3eafda.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eafdc.  @monitorexit v1
  #L3eafde.  throw v0;
  catch `java.lang.Throwable` @[L3eafc8..L3eafd6] goto L3eafda;
}
procedure `void` `e`(`mc.j` v1 @kind this, `boolean` v2 , `int` v3 , `qc.c` v4 @kind object, `int` v5 ) @signature `Lmc/j;.e:(ZILqc/c;I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eb0b8.  @monitorenter v1
  #L3eb0ba.  v0:= v1.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eb0be.  if v0 != 0 then goto L3eb0d6;
  #L3eb0c2.  v0:= 0I;
  #L3eb0c4.  if v2 == 0 then goto L3eb0cc;
  #L3eb0c8.  v2:= 1I;
  #L3eb0ca.  v0:= (`byte`) v2 @kind i2b;
  #L3eb0cc.  call `h`(v1, v3, v0, v4, v5) @signature `Lmc/j;.h:(IBLqc/c;I)V` @kind virtual;
  #L3eb0d2.  @monitorexit v1
  #L3eb0d4.  return @kind void;
  #L3eb0d6.  v2:= new `java.io.IOException`;
  #L3eb0da.  v3:= "closed" @kind object;
  #L3eb0de.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb0e4.  throw v2;
  #L3eb0e6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eb0e8.  @monitorexit v1
  #L3eb0ea.  throw v2;
  catch `java.lang.Throwable` @[L3eb0ba..L3eb0d2] goto L3eb0e6;
  catch `java.lang.Throwable` @[L3eb0d6..L3eb0e6] goto L3eb0e6;
}
procedure `void` `flush`(`mc.j` v2 @kind this) @signature `Lmc/j;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eb13c.  @monitorenter v2
  #L3eb13e.  v0:= v2.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eb142.  if v0 != 0 then goto L3eb154;
  #L3eb146.  v0:= v2.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb14a.  call `flush`(v0) @signature `Lqc/d;.flush:()V` @kind interface;
  #L3eb150.  @monitorexit v2
  #L3eb152.  return @kind void;
  #L3eb154.  v0:= new `java.io.IOException`;
  #L3eb158.  v1:= "closed" @kind object;
  #L3eb15c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb162.  throw v0;
  #L3eb164.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eb166.  @monitorexit v2
  #L3eb168.  throw v0;
  catch `java.lang.Throwable` @[L3eb13e..L3eb150] goto L3eb164;
  catch `java.lang.Throwable` @[L3eb154..L3eb164] goto L3eb164;
}
procedure `void` `h`(`mc.j` v2 @kind this, `int` v3 , `byte` v4 , `qc.c` v5 @kind object, `int` v6 ) @signature `Lmc/j;.h:(IBLqc/c;I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3eb110.  v0:= 0I;
  #L3eb112.  call `i`(v2, v3, v6, v0, v4) @signature `Lmc/j;.i:(IIBB)V` @kind virtual;
  #L3eb118.  if v6 <= 0 then goto L3eb128;
  #L3eb11c.  v3:= v2.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb120.  v0:= (`long`) v6 @kind i2l;
  #L3eb122.  call `q`(v3, v5, v0) @signature `Lqc/r;.q:(Lqc/c;J)V` @kind interface;
  #L3eb128.  return @kind void;
}
procedure `void` `i`(`mc.j` v3 @kind this, `int` v4 , `int` v5 , `byte` v6 , `byte` v7 ) @signature `Lmc/j;.i:(IIBB)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eb190.  v0:= `@@mc.j.u` @type ^`java.util.logging.Logger` @kind object;
  #L3eb194.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L3eb198.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L3eb19e.  v1:= temp;
  #L3eb1a0.  v2:= 0I;
  #L3eb1a2.  if v1 == 0 then goto L3eb1b4;
  #L3eb1a6.  call temp:= `b`(v2, v4, v5, v6, v7) @signature `Lmc/e;.b:(ZIIBB)Ljava/lang/String;` @kind static;
  #L3eb1ac.  v1:= temp @kind object;
  #L3eb1ae.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L3eb1b4.  v0:= v3.`mc.j.r` @type ^`int`;
  #L3eb1b8.  v1:= 1I;
  #L3eb1ba.  if v5 > v0 then goto L3eb220;
  #L3eb1be.  v0:= -2147483648I;
  #L3eb1c2.  v0:= v0 ^& v4 @kind int;
  #L3eb1c4.  if v0 != 0 then goto L3eb202;
  #L3eb1c8.  v0:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb1cc.  call `N`(v0, v5) @signature `Lmc/j;.N:(Lqc/d;I)V` @kind static;
  #L3eb1d2.  v5:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb1d6.  v6:= v6 ^& 255;
  #L3eb1da.  call temp:= `A`(v5, v6) @signature `Lqc/d;.A:(I)Lqc/d;` @kind interface;
  #L3eb1e0.  v5:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb1e4.  v6:= v7 ^& 255;
  #L3eb1e8.  call temp:= `A`(v5, v6) @signature `Lqc/d;.A:(I)Lqc/d;` @kind interface;
  #L3eb1ee.  v5:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb1f2.  v6:= 2147483647I;
  #L3eb1f8.  v4:= v4 ^& v6 @kind int;
  #L3eb1fa.  call temp:= `t`(v5, v4) @signature `Lqc/d;.t:(I)Lqc/d;` @kind interface;
  #L3eb200.  return @kind void;
  #L3eb202.  v5:= new `java.lang.Object`[v1];
  #L3eb206.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3eb20c.  v4:= temp @kind object;
  #L3eb20e.  v5[v2]:= v4 @kind object;
  #L3eb212.  v4:= "reserved bit set: %s" @kind object;
  #L3eb216.  call temp:= `c`(v4, v5) @signature `Lmc/e;.c:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L3eb21c.  v4:= temp @kind object;
  #L3eb21e.  throw v4;
  #L3eb220.  v4:= 2I;
  #L3eb222.  v4:= new `java.lang.Object`[v4];
  #L3eb226.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3eb22c.  v6:= temp @kind object;
  #L3eb22e.  v4[v2]:= v6 @kind object;
  #L3eb232.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3eb238.  v5:= temp @kind object;
  #L3eb23a.  v4[v1]:= v5 @kind object;
  #L3eb23e.  v5:= "FRAME_SIZE_ERROR length > %d: %d" @kind object;
  #L3eb242.  call temp:= `c`(v5, v4) @signature `Lmc/e;.c:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L3eb248.  v4:= temp @kind object;
  #L3eb24a.  throw v4;
}
procedure `void` `k`(`mc.j` v3 @kind this, `int` v4 , `mc.b` v5 @kind object, `byte`[] v6 @kind object) @signature `Lmc/j;.k:(ILmc/b;[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eb25c.  @monitorenter v3
  #L3eb25e.  v0:= v3.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eb262.  if v0 != 0 then goto L3eb2c8;
  #L3eb266.  v0:= v5.`mc.b.o` @type ^`int`;
  #L3eb26a.  v1:= -1I;
  #L3eb26c.  v2:= 0I;
  #L3eb26e.  if v0 == v1 then goto L3eb2b6;
  #L3eb272.  v0:= length @variable v6;
  #L3eb274.  v0:= v0 + 8;
  #L3eb278.  v1:= 7I;
  #L3eb27a.  call `i`(v3, v2, v0, v1, v2) @signature `Lmc/j;.i:(IIBB)V` @kind virtual;
  #L3eb280.  v0:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb284.  call temp:= `t`(v0, v4) @signature `Lqc/d;.t:(I)Lqc/d;` @kind interface;
  #L3eb28a.  v4:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb28e.  v5:= v5.`mc.b.o` @type ^`int`;
  #L3eb292.  call temp:= `t`(v4, v5) @signature `Lqc/d;.t:(I)Lqc/d;` @kind interface;
  #L3eb298.  v4:= length @variable v6;
  #L3eb29a.  if v4 <= 0 then goto L3eb2a8;
  #L3eb29e.  v4:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb2a2.  call temp:= `D`(v4, v6) @signature `Lqc/d;.D:([B)Lqc/d;` @kind interface;
  #L3eb2a8.  v4:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb2ac.  call `flush`(v4) @signature `Lqc/d;.flush:()V` @kind interface;
  #L3eb2b2.  @monitorexit v3
  #L3eb2b4.  return @kind void;
  #L3eb2b6.  v4:= "errorCode.httpCode == -1" @kind object;
  #L3eb2ba.  v5:= new `java.lang.Object`[v2];
  #L3eb2be.  call temp:= `c`(v4, v5) @signature `Lmc/e;.c:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L3eb2c4.  v4:= temp @kind object;
  #L3eb2c6.  throw v4;
  #L3eb2c8.  v4:= new `java.io.IOException`;
  #L3eb2cc.  v5:= "closed" @kind object;
  #L3eb2d0.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb2d6.  throw v4;
  #L3eb2d8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eb2da.  @monitorexit v3
  #L3eb2dc.  throw v4;
  catch `java.lang.Throwable` @[L3eb25e..L3eb2b2] goto L3eb2d8;
  catch `java.lang.Throwable` @[L3eb2b6..L3eb2d8] goto L3eb2d8;
}
procedure `void` `o`(`mc.j` v6 @kind this, `boolean` v7 , `int` v8 , `java.util.List` v9 @kind object) @signature `Lmc/j;.o:(ZILjava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3eb304.  v0:= v6.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eb308.  if v0 != 0 then goto L3eb370;
  #L3eb30c.  v0:= v6.`mc.j.t` @type ^`mc.d$b` @kind object;
  #L3eb310.  call `g`(v0, v9) @signature `Lmc/d$b;.g:(Ljava/util/List;)V` @kind virtual;
  #L3eb316.  v9:= v6.`mc.j.q` @type ^`qc.c` @kind object;
  #L3eb31a.  call temp:= `h0`(v9) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L3eb320.  v0:= temp @kind wide;
  #L3eb322.  v9:= v6.`mc.j.r` @type ^`int`;
  #L3eb326.  v2:= (`long`) v9 @kind i2l;
  #L3eb328.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3eb32e.  v2:= temp @kind wide;
  #L3eb330.  v9:= (`int`) v2 @kind l2i;
  #L3eb332.  v2:= (`long`) v9 @kind i2l;
  #L3eb334.  v4:= lcmp(v0, v2);
  #L3eb338.  if v4 != 0 then goto L3eb340;
  #L3eb33c.  v5:= 4I;
  #L3eb33e.  goto L3eb342;
  #L3eb340.  v5:= 0I;
  #L3eb342.  if v7 == 0 then goto L3eb34c;
  #L3eb346.  v7:= v5 ^| 1;
  #L3eb34a.  v5:= (`byte`) v7 @kind i2b;
  #L3eb34c.  v7:= 1I;
  #L3eb34e.  call `i`(v6, v8, v9, v7, v5) @signature `Lmc/j;.i:(IIBB)V` @kind virtual;
  #L3eb354.  v7:= v6.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb358.  v9:= v6.`mc.j.q` @type ^`qc.c` @kind object;
  #L3eb35c.  call `q`(v7, v9, v2) @signature `Lqc/r;.q:(Lqc/c;J)V` @kind interface;
  #L3eb362.  if v4 <= 0 then goto L3eb36e;
  #L3eb366.  v0:= v0 - v2 @kind long;
  #L3eb368.  call `M`(v6, v8, v0) @signature `Lmc/j;.M:(IJ)V` @kind direct;
  #L3eb36e.  return @kind void;
  #L3eb370.  v7:= new `java.io.IOException`;
  #L3eb374.  v8:= "closed" @kind object;
  #L3eb378.  call `<init>`(v7, v8) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb37e.  throw v7;
}
procedure `int` `s`(`mc.j` v1 @kind this) @signature `Lmc/j;.s:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eaeac.  v0:= v1.`mc.j.r` @type ^`int`;
  #L3eaeb0.  return v0;
}
procedure `void` `v`(`mc.j` v3 @kind this, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lmc/j;.v:(ZII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eb390.  @monitorenter v3
  #L3eb392.  v0:= v3.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eb396.  if v0 != 0 then goto L3eb3d4;
  #L3eb39a.  v0:= 8I;
  #L3eb39e.  v1:= 6I;
  #L3eb3a0.  v2:= 0I;
  #L3eb3a2.  if v4 == 0 then goto L3eb3aa;
  #L3eb3a6.  v4:= 1I;
  #L3eb3a8.  goto L3eb3ac;
  #L3eb3aa.  v4:= 0I;
  #L3eb3ac.  call `i`(v3, v2, v0, v1, v4) @signature `Lmc/j;.i:(IIBB)V` @kind virtual;
  #L3eb3b2.  v4:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb3b6.  call temp:= `t`(v4, v5) @signature `Lqc/d;.t:(I)Lqc/d;` @kind interface;
  #L3eb3bc.  v4:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb3c0.  call temp:= `t`(v4, v6) @signature `Lqc/d;.t:(I)Lqc/d;` @kind interface;
  #L3eb3c6.  v4:= v3.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb3ca.  call `flush`(v4) @signature `Lqc/d;.flush:()V` @kind interface;
  #L3eb3d0.  @monitorexit v3
  #L3eb3d2.  return @kind void;
  #L3eb3d4.  v4:= new `java.io.IOException`;
  #L3eb3d8.  v5:= "closed" @kind object;
  #L3eb3dc.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb3e2.  throw v4;
  #L3eb3e4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eb3e6.  @monitorexit v3
  #L3eb3e8.  throw v4;
  catch `java.lang.Throwable` @[L3eb392..L3eb3d0] goto L3eb3e4;
  catch `java.lang.Throwable` @[L3eb3d4..L3eb3e4] goto L3eb3e4;
}
procedure `void` `x`(`mc.j` v8 @kind this, `int` v9 , `int` v10 , `java.util.List` v11 @kind object) @signature `Lmc/j;.x:(IILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3eb410.  @monitorenter v8
  #L3eb412.  v0:= v8.`mc.j.s` @type ^`boolean` @kind boolean;
  #L3eb416.  if v0 != 0 then goto L3eb48e;
  #L3eb41a.  v0:= v8.`mc.j.t` @type ^`mc.d$b` @kind object;
  #L3eb41e.  call `g`(v0, v11) @signature `Lmc/d$b;.g:(Ljava/util/List;)V` @kind virtual;
  #L3eb424.  v11:= v8.`mc.j.q` @type ^`qc.c` @kind object;
  #L3eb428.  call temp:= `h0`(v11) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L3eb42e.  v0:= temp @kind wide;
  #L3eb430.  v11:= v8.`mc.j.r` @type ^`int`;
  #L3eb434.  v2:= 4I;
  #L3eb436.  v11:= v11 - v2 @kind int;
  #L3eb438.  v3:= (`long`) v11 @kind i2l;
  #L3eb43a.  call temp:= `min`(v3, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3eb440.  v3:= temp @kind wide;
  #L3eb442.  v11:= (`int`) v3 @kind l2i;
  #L3eb444.  v3:= 5I;
  #L3eb446.  v4:= (`long`) v11 @kind i2l;
  #L3eb448.  v6:= lcmp(v0, v4);
  #L3eb44c.  if v6 != 0 then goto L3eb454;
  #L3eb450.  v7:= 4I;
  #L3eb452.  goto L3eb456;
  #L3eb454.  v7:= 0I;
  #L3eb456.  v11:= v11 + v2 @kind int;
  #L3eb458.  call `i`(v8, v9, v11, v3, v7) @signature `Lmc/j;.i:(IIBB)V` @kind virtual;
  #L3eb45e.  v11:= v8.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb462.  v2:= 2147483647I;
  #L3eb468.  v10:= v10 ^& v2 @kind int;
  #L3eb46a.  call temp:= `t`(v11, v10) @signature `Lqc/d;.t:(I)Lqc/d;` @kind interface;
  #L3eb470.  v10:= v8.`mc.j.o` @type ^`qc.d` @kind object;
  #L3eb474.  v11:= v8.`mc.j.q` @type ^`qc.c` @kind object;
  #L3eb478.  call `q`(v10, v11, v4) @signature `Lqc/r;.q:(Lqc/c;J)V` @kind interface;
  #L3eb47e.  if v6 <= 0 then goto L3eb48a;
  #L3eb482.  v0:= v0 - v4 @kind long;
  #L3eb484.  call `M`(v8, v9, v0) @signature `Lmc/j;.M:(IJ)V` @kind direct;
  #L3eb48a.  @monitorexit v8
  #L3eb48c.  return @kind void;
  #L3eb48e.  v9:= new `java.io.IOException`;
  #L3eb492.  v10:= "closed" @kind object;
  #L3eb496.  call `<init>`(v9, v10) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb49c.  throw v9;
  #L3eb49e.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eb4a0.  @monitorexit v8
  #L3eb4a2.  throw v9;
  catch `java.lang.Throwable` @[L3eb412..L3eb48a] goto L3eb49e;
  catch `java.lang.Throwable` @[L3eb48e..L3eb49e] goto L3eb49e;
}
