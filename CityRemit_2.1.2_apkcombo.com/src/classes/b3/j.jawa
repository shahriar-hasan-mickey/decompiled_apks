record `b3.j` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `v1.j1` `b3.j.a` @AccessFlag PUBLIC_FINAL;
  `m5.q` `b3.j.b` @AccessFlag PUBLIC_FINAL;
  `long` `b3.j.c` @AccessFlag PUBLIC_FINAL;
  `java.util.List` `b3.j.d` @AccessFlag PUBLIC_FINAL;
  `java.util.List` `b3.j.e` @AccessFlag PUBLIC_FINAL;
  `java.util.List` `b3.j.f` @AccessFlag PUBLIC_FINAL;
  `b3.i` `b3.j.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`b3.j` v0 @kind this, `long` v1 , `v1.j1` v3 @kind object, `java.util.List` v4 @kind object, `b3.k` v5 @kind object, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lb3/j;.<init>:(JLv1/j1;Ljava/util/List;Lb3/k;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1eda74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1eda7a.  call temp:= `isEmpty`(v4) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1eda80.  v1:= temp;
  #L1eda82.  v1:= v1 ^~ 1;
  #L1eda86.  call `a`(v1) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L1eda8c.  v0.`b3.j.a` @type ^`v1.j1` := v3 @kind object;
  #L1eda90.  call temp:= `Q`(v4) @signature `Lm5/q;.Q:(Ljava/util/Collection;)Lm5/q;` @kind static;
  #L1eda96.  v1:= temp @kind object;
  #L1eda98.  v0.`b3.j.b` @type ^`m5.q` := v1 @kind object;
  #L1eda9c.  if v6 != 0 then goto L1edaaa;
  #L1edaa0.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L1edaa6.  v1:= temp @kind object;
  #L1edaa8.  goto L1edab2;
  #L1edaaa.  call temp:= `unmodifiableList`(v6) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1edab0.  v1:= temp @kind object;
  #L1edab2.  v0.`b3.j.d` @type ^`java.util.List` := v1 @kind object;
  #L1edab6.  v0.`b3.j.e` @type ^`java.util.List` := v7 @kind object;
  #L1edaba.  v0.`b3.j.f` @type ^`java.util.List` := v8 @kind object;
  #L1edabe.  call temp:= `a`(v5, v0) @signature `Lb3/k;.a:(Lb3/j;)Lb3/i;` @kind virtual;
  #L1edac4.  v1:= temp @kind object;
  #L1edac6.  v0.`b3.j.g` @type ^`b3.i` := v1 @kind object;
  #L1edaca.  call temp:= `b`(v5) @signature `Lb3/k;.b:()J` @kind virtual;
  #L1edad0.  v1:= temp @kind wide;
  #L1edad2.  v0.`b3.j.c` @type ^`long` := v1 @kind wide;
  #L1edad6.  return @kind void;
}
procedure `void` `<init>`(`b3.j` v0 @kind this, `long` v1 , `v1.j1` v3 @kind object, `java.util.List` v4 @kind object, `b3.k` v5 @kind object, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object, `b3.j$a` v9 @kind object) @signature `Lb3/j;.<init>:(JLv1/j1;Ljava/util/List;Lb3/k;Ljava/util/List;Ljava/util/List;Ljava/util/List;Lb3/j$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1edae8.  call `<init>`(v0, v1, v3, v4, v5, v6, v7, v8) @signature `Lb3/j;.<init>:(JLv1/j1;Ljava/util/List;Lb3/k;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L1edaee.  return @kind void;
}
procedure `b3.j` `o`(`long` v14 , `v1.j1` v16 @kind object, `java.util.List` v17 @kind object, `b3.k` v18 @kind object, `java.util.List` v19 @kind object, `java.util.List` v20 @kind object, `java.util.List` v21 @kind object, `java.lang.String` v22 @kind object) @signature `Lb3/j;.o:(JLv1/j1;Ljava/util/List;Lb3/k;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/lang/String;)Lb3/j;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1ed9e4.  v0:= v18 @kind object;
  #L1ed9e8.  v1:= instanceof @variable v0 @type ^`b3.k$e` @kind boolean;
  #L1ed9ec.  if v1 == 0 then goto L1eda22;
  #L1ed9f0.  v1:= new `b3.j$c`;
  #L1ed9f4.  v7:= v0 @kind object;
  #L1ed9f6.  v7:= (`b3.k$e`) v7 @kind object;
  #L1ed9fa.  v12:= -1L;
  #L1ed9fe.  v2:= v1 @kind object;
  #L1eda00.  v3:= v14 @kind wide;
  #L1eda02.  v5:= v16 @kind object;
  #L1eda06.  v6:= v17 @kind object;
  #L1eda0a.  v8:= v19 @kind object;
  #L1eda0e.  v9:= v20 @kind object;
  #L1eda12.  v10:= v21 @kind object;
  #L1eda16.  v11:= v22 @kind object;
  #L1eda1a.  call `<init>`(v2, v3, v5, v6, v7, v8, v9, v10, v11, v12) @signature `Lb3/j$c;.<init>:(JLv1/j1;Ljava/util/List;Lb3/k$e;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/lang/String;J)V` @kind direct;
  #L1eda20.  return v1 @kind object;
  #L1eda22.  v1:= instanceof @variable v0 @type ^`b3.k$a` @kind boolean;
  #L1eda26.  if v1 == 0 then goto L1eda54;
  #L1eda2a.  v1:= new `b3.j$b`;
  #L1eda2e.  v7:= v0 @kind object;
  #L1eda30.  v7:= (`b3.k$a`) v7 @kind object;
  #L1eda34.  v2:= v1 @kind object;
  #L1eda36.  v3:= v14 @kind wide;
  #L1eda38.  v5:= v16 @kind object;
  #L1eda3c.  v6:= v17 @kind object;
  #L1eda40.  v8:= v19 @kind object;
  #L1eda44.  v9:= v20 @kind object;
  #L1eda48.  v10:= v21 @kind object;
  #L1eda4c.  call `<init>`(v2, v3, v5, v6, v7, v8, v9, v10) @signature `Lb3/j$b;.<init>:(JLv1/j1;Ljava/util/List;Lb3/k$a;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L1eda52.  return v1 @kind object;
  #L1eda54.  v0:= new `java.lang.IllegalArgumentException`;
  #L1eda58.  v1:= "segmentBase must be of type SingleSegmentBase or MultiSegmentBase" @kind object;
  #L1eda5c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eda62.  throw v0;
}
procedure `java.lang.String` `a`() @signature `Lb3/j;.a:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `a3.f` `b`() @signature `Lb3/j;.b:()La3/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `b3.i` `m`() @signature `Lb3/j;.m:()Lb3/i;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `b3.i` `n`(`b3.j` v1 @kind this) @signature `Lb3/j;.n:()Lb3/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ed9cc.  v0:= v1.`b3.j.g` @type ^`b3.i` @kind object;
  #L1ed9d0.  return v0 @kind object;
}
