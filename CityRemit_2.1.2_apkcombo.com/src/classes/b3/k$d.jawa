record `b3.k$d` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `b3.k$d.a` @AccessFlag FINAL;
  `long` `b3.k$d.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`b3.k$d` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lb3/k$d;.<init>:(JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ee134.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ee13a.  v0.`b3.k$d.a` @type ^`long` := v1 @kind wide;
  #L1ee13e.  v0.`b3.k$d.b` @type ^`long` := v3 @kind wide;
  #L1ee142.  return @kind void;
}
procedure `boolean` `equals`(`b3.k$d` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lb3/k$d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ee0b4.  v0:= 1I;
  #L1ee0b6.  if v7 != v8 then goto L1ee0bc;
  #L1ee0ba.  return v0;
  #L1ee0bc.  v1:= 0I;
  #L1ee0be.  if v8 == 0 then goto L1ee0fe;
  #L1ee0c2.  v2:= constclass @type ^`b3.k$d` @kind object;
  #L1ee0c6.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1ee0cc.  v3:= temp @kind object;
  #L1ee0ce.  if v2 == v3 then goto L1ee0d4;
  #L1ee0d2.  goto L1ee0fe;
  #L1ee0d4.  v8:= (`b3.k$d`) v8 @kind object;
  #L1ee0d8.  v2:= v7.`b3.k$d.a` @type ^`long` @kind wide;
  #L1ee0dc.  v4:= v8.`b3.k$d.a` @type ^`long` @kind wide;
  #L1ee0e0.  v6:= lcmp(v2, v4);
  #L1ee0e4.  if v6 != 0 then goto L1ee0fa;
  #L1ee0e8.  v2:= v7.`b3.k$d.b` @type ^`long` @kind wide;
  #L1ee0ec.  v4:= v8.`b3.k$d.b` @type ^`long` @kind wide;
  #L1ee0f0.  v8:= lcmp(v2, v4);
  #L1ee0f4.  if v8 != 0 then goto L1ee0fa;
  #L1ee0f8.  goto L1ee0fc;
  #L1ee0fa.  v0:= 0I;
  #L1ee0fc.  return v0;
  #L1ee0fe.  return v1;
}
procedure `int` `hashCode`(`b3.k$d` v4 @kind this) @signature `Lb3/k$d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ee110.  v0:= v4.`b3.k$d.a` @type ^`long` @kind wide;
  #L1ee114.  v1:= (`int`) v0 @kind l2i;
  #L1ee116.  v1:= v1 * 31;
  #L1ee11a.  v2:= v4.`b3.k$d.b` @type ^`long` @kind wide;
  #L1ee11e.  v0:= (`int`) v2 @kind l2i;
  #L1ee120.  v1:= v1 + v0 @kind int;
  #L1ee122.  return v1;
}
