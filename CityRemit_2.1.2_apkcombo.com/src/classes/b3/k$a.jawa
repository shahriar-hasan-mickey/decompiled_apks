record `b3.k$a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `b3.k` @kind class {
  `long` `b3.k$a.d` @AccessFlag FINAL;
  `long` `b3.k$a.e` @AccessFlag FINAL;
  `java.util.List` `b3.k$a.f` @AccessFlag FINAL;
  `long` `b3.k$a.g` @AccessFlag PRIVATE_FINAL;
  `long` `b3.k$a.h` @AccessFlag PRIVATE_FINAL;
  `long` `b3.k$a.i` @AccessFlag FINAL;
}
procedure `void` `<init>`(`b3.k$a` v3 @kind this, `b3.i` v4 @kind object, `long` v5 , `long` v7 , `long` v9 , `long` v11 , `java.util.List` v13 @kind object, `long` v14 , `long` v16 , `long` v18 ) @signature `Lb3/k$a;.<init>:(Lb3/i;JJJJLjava/util/List;JJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1eddec.  v0:= v3 @kind object;
  #L1eddee.  call `<init>`(v3, v4, v5, v7) @signature `Lb3/k;.<init>:(Lb3/i;JJ)V` @kind direct;
  #L1eddf4.  v1:= v9 @kind wide;
  #L1eddf6.  v0.`b3.k$a.d` @type ^`long` := v1 @kind wide;
  #L1eddfa.  v1:= v11 @kind wide;
  #L1eddfc.  v0.`b3.k$a.e` @type ^`long` := v1 @kind wide;
  #L1ede00.  v1:= v13 @kind object;
  #L1ede02.  v0.`b3.k$a.f` @type ^`java.util.List` := v1 @kind object;
  #L1ede06.  v1:= v14 @kind wide;
  #L1ede08.  v0.`b3.k$a.i` @type ^`long` := v1 @kind wide;
  #L1ede0c.  v1:= v16 @kind wide;
  #L1ede10.  v0.`b3.k$a.g` @type ^`long` := v1 @kind wide;
  #L1ede14.  v1:= v18 @kind wide;
  #L1ede18.  v0.`b3.k$a.h` @type ^`long` := v1 @kind wide;
  #L1ede1c.  return @kind void;
}
procedure `long` `c`(`b3.k$a` v5 @kind this, `long` v6 , `long` v8 ) @signature `Lb3/k$a;.c:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1edb20.  call temp:= `g`(v5, v6) @signature `Lb3/k$a;.g:(J)J` @kind virtual;
  #L1edb26.  v0:= temp @kind wide;
  #L1edb28.  v2:= -1L;
  #L1edb2c.  v4:= lcmp(v0, v2);
  #L1edb30.  if v4 == 0 then goto L1edb36;
  #L1edb34.  return v0 @kind wide;
  #L1edb36.  v0:= v5.`b3.k$a.h` @type ^`long` @kind wide;
  #L1edb3a.  v0:= v8 - v0 @kind long;
  #L1edb3e.  v2:= v5.`b3.k$a.i` @type ^`long` @kind wide;
  #L1edb42.  v0:= v0 + v2 @kind long;
  #L1edb44.  call temp:= `i`(v5, v0, v6) @signature `Lb3/k$a;.i:(JJ)J` @kind virtual;
  #L1edb4a.  v0:= temp @kind wide;
  #L1edb4c.  call temp:= `d`(v5, v6, v8) @signature `Lb3/k$a;.d:(JJ)J` @kind virtual;
  #L1edb52.  v6:= temp @kind wide;
  #L1edb54.  v0:= v0 - v6 @kind long;
  #L1edb56.  v6:= (`int`) v0 @kind l2i;
  #L1edb58.  v6:= (`long`) v6 @kind i2l;
  #L1edb5a.  return v6 @kind wide;
}
procedure `long` `d`(`b3.k$a` v5 @kind this, `long` v6 , `long` v8 ) @signature `Lb3/k$a;.d:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1edb6c.  call temp:= `g`(v5, v6) @signature `Lb3/k$a;.g:(J)J` @kind virtual;
  #L1edb72.  v0:= temp @kind wide;
  #L1edb74.  v2:= -1L;
  #L1edb78.  v4:= lcmp(v0, v2);
  #L1edb7c.  if v4 != 0 then goto L1edbba;
  #L1edb80.  v0:= v5.`b3.k$a.g` @type ^`long` @kind wide;
  #L1edb84.  v2:= -4.9E-324D;
  #L1edb8e.  v4:= lcmp(v0, v2);
  #L1edb92.  if v4 != 0 then goto L1edb98;
  #L1edb96.  goto L1edbba;
  #L1edb98.  v2:= v5.`b3.k$a.h` @type ^`long` @kind wide;
  #L1edb9c.  v8:= v8 - v2 @kind long;
  #L1edb9e.  v8:= v8 - v0 @kind long;
  #L1edba0.  call temp:= `i`(v5, v8, v6) @signature `Lb3/k$a;.i:(JJ)J` @kind virtual;
  #L1edba6.  v6:= temp @kind wide;
  #L1edba8.  call temp:= `e`(v5) @signature `Lb3/k$a;.e:()J` @kind virtual;
  #L1edbae.  v8:= temp @kind wide;
  #L1edbb0.  call temp:= `max`(v8, v6) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L1edbb6.  v6:= temp @kind wide;
  #L1edbb8.  return v6 @kind wide;
  #L1edbba.  call temp:= `e`(v5) @signature `Lb3/k$a;.e:()J` @kind virtual;
  #L1edbc0.  v6:= temp @kind wide;
  #L1edbc2.  return v6 @kind wide;
}
procedure `long` `e`(`b3.k$a` v2 @kind this) @signature `Lb3/k$a;.e:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1edbd4.  v0:= v2.`b3.k$a.d` @type ^`long` @kind wide;
  #L1edbd8.  return v0 @kind wide;
}
procedure `long` `f`(`b3.k$a` v2 @kind this, `long` v3 , `long` v5 ) @signature `Lb3/k$a;.f:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1edbec.  v0:= v2.`b3.k$a.f` @type ^`java.util.List` @kind object;
  #L1edbf0.  if v0 == 0 then goto L1edc00;
  #L1edbf4.  v3:= -4.9E-324D;
  #L1edbfe.  return v3 @kind wide;
  #L1edc00.  call temp:= `d`(v2, v3, v5) @signature `Lb3/k$a;.d:(JJ)J` @kind virtual;
  #L1edc06.  v0:= temp @kind wide;
  #L1edc08.  call temp:= `c`(v2, v3, v5) @signature `Lb3/k$a;.c:(JJ)J` @kind virtual;
  #L1edc0e.  v5:= temp @kind wide;
  #L1edc10.  v0:= v0 + v5 @kind long;
  #L1edc12.  call temp:= `j`(v2, v0) @signature `Lb3/k$a;.j:(J)J` @kind virtual;
  #L1edc18.  v5:= temp @kind wide;
  #L1edc1a.  call temp:= `h`(v2, v0, v3) @signature `Lb3/k$a;.h:(JJ)J` @kind virtual;
  #L1edc20.  v3:= temp @kind wide;
  #L1edc22.  v5:= v5 + v3 @kind long;
  #L1edc24.  v3:= v2.`b3.k$a.i` @type ^`long` @kind wide;
  #L1edc28.  v5:= v5 - v3 @kind long;
  #L1edc2a.  return v5 @kind wide;
}
procedure `long` `g`(`long` v0 ) @signature `Lb3/k$a;.g:(J)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `h`(`b3.k$a` v7 @kind this, `long` v8 , `long` v10 ) @signature `Lb3/k$a;.h:(JJ)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1edc3c.  v0:= v7.`b3.k$a.f` @type ^`java.util.List` @kind object;
  #L1edc40.  v1:= 1000000L;
  #L1edc46.  if v0 == 0 then goto L1edc6e;
  #L1edc4a.  v10:= v7.`b3.k$a.d` @type ^`long` @kind wide;
  #L1edc4e.  v8:= v8 - v10 @kind long;
  #L1edc50.  v9:= (`int`) v8 @kind l2i;
  #L1edc52.  call temp:= `get`(v0, v9) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1edc58.  v8:= temp @kind object;
  #L1edc5a.  v8:= (`b3.k$d`) v8 @kind object;
  #L1edc5e.  v8:= v8.`b3.k$d.b` @type ^`long` @kind wide;
  #L1edc62.  v8:= v8 * v1 @kind long;
  #L1edc66.  v10:= v7.`b3.k.b` @type ^`long` @kind wide;
  #L1edc6a.  v8:= v8 / v10 @kind long;
  #L1edc6c.  return v8 @kind wide;
  #L1edc6e.  call temp:= `g`(v7, v10) @signature `Lb3/k$a;.g:(J)J` @kind virtual;
  #L1edc74.  v3:= temp @kind wide;
  #L1edc76.  v5:= -1L;
  #L1edc7a.  v0:= lcmp(v3, v5);
  #L1edc7e.  if v0 == 0 then goto L1edca6;
  #L1edc82.  call temp:= `e`(v7) @signature `Lb3/k$a;.e:()J` @kind virtual;
  #L1edc88.  v5:= temp @kind wide;
  #L1edc8a.  v5:= v5 + v3 @kind long;
  #L1edc8c.  v3:= 1L;
  #L1edc90.  v5:= v5 - v3 @kind long;
  #L1edc92.  v0:= lcmp(v8, v5);
  #L1edc96.  if v0 != 0 then goto L1edca6;
  #L1edc9a.  call temp:= `j`(v7, v8) @signature `Lb3/k$a;.j:(J)J` @kind virtual;
  #L1edca0.  v8:= temp @kind wide;
  #L1edca2.  v10:= v10 - v8 @kind long;
  #L1edca4.  goto L1edcb6;
  #L1edca6.  v8:= v7.`b3.k$a.e` @type ^`long` @kind wide;
  #L1edcaa.  v8:= v8 * v1 @kind long;
  #L1edcae.  v10:= v7.`b3.k.b` @type ^`long` @kind wide;
  #L1edcb2.  v10:= v8 / v10 @kind long;
  #L1edcb6.  return v10 @kind wide;
}
procedure `long` `i`(`b3.k$a` v11 @kind this, `long` v12 , `long` v14 ) @signature `Lb3/k$a;.i:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1edcc8.  call temp:= `e`(v11) @signature `Lb3/k$a;.e:()J` @kind virtual;
  #L1edcce.  v0:= temp @kind wide;
  #L1edcd0.  call temp:= `g`(v11, v14) @signature `Lb3/k$a;.g:(J)J` @kind virtual;
  #L1edcd6.  v14:= temp @kind wide;
  #L1edcd8.  v2:= 0L;
  #L1edcdc.  v4:= lcmp(v14, v2);
  #L1edce0.  if v4 != 0 then goto L1edce6;
  #L1edce4.  return v0 @kind wide;
  #L1edce6.  v2:= v11.`b3.k$a.f` @type ^`java.util.List` @kind object;
  #L1edcea.  v3:= 1L;
  #L1edcee.  if v2 != 0 then goto L1edd36;
  #L1edcf2.  v5:= v11.`b3.k$a.e` @type ^`long` @kind wide;
  #L1edcf6.  v7:= 1000000L;
  #L1edcfc.  v5:= v5 * v7 @kind long;
  #L1edd00.  v7:= v11.`b3.k.b` @type ^`long` @kind wide;
  #L1edd04.  v5:= v5 / v7 @kind long;
  #L1edd06.  v7:= v11.`b3.k$a.d` @type ^`long` @kind wide;
  #L1edd0a.  v12:= v12 / v5 @kind long;
  #L1edd0c.  v7:= v7 + v12 @kind long;
  #L1edd0e.  v12:= lcmp(v7, v0);
  #L1edd12.  if v12 >= 0 then goto L1edd18;
  #L1edd16.  goto L1edd34;
  #L1edd18.  v12:= -1L;
  #L1edd1c.  v2:= lcmp(v14, v12);
  #L1edd20.  if v2 != 0 then goto L1edd28;
  #L1edd24.  v0:= v7 @kind wide;
  #L1edd26.  goto L1edd34;
  #L1edd28.  v0:= v0 + v14 @kind long;
  #L1edd2a.  v0:= v0 - v3 @kind long;
  #L1edd2c.  call temp:= `min`(v7, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1edd32.  v0:= temp @kind wide;
  #L1edd34.  return v0 @kind wide;
  #L1edd36.  v14:= v14 + v0 @kind long;
  #L1edd38.  v14:= v14 - v3 @kind long;
  #L1edd3a.  v5:= v0 @kind wide;
  #L1edd3c.  v2:= lcmp(v5, v14);
  #L1edd40.  if v2 > 0 then goto L1edd72;
  #L1edd44.  v7:= v14 - v5 @kind long;
  #L1edd48.  v9:= 2L;
  #L1edd4c.  v7:= v7 / v9 @kind long;
  #L1edd4e.  v7:= v7 + v5 @kind long;
  #L1edd50.  call temp:= `j`(v11, v7) @signature `Lb3/k$a;.j:(J)J` @kind virtual;
  #L1edd56.  v9:= temp @kind wide;
  #L1edd58.  v2:= lcmp(v9, v12);
  #L1edd5c.  if v2 >= 0 then goto L1edd66;
  #L1edd60.  v5:= v7 + v3 @kind long;
  #L1edd64.  goto L1edd3c;
  #L1edd66.  if v2 <= 0 then goto L1edd70;
  #L1edd6a.  v7:= v7 - v3 @kind long;
  #L1edd6c.  v14:= v7 @kind wide;
  #L1edd6e.  goto L1edd3c;
  #L1edd70.  return v7 @kind wide;
  #L1edd72.  v12:= lcmp(v5, v0);
  #L1edd76.  if v12 != 0 then goto L1edd7c;
  #L1edd7a.  v14:= v5 @kind wide;
  #L1edd7c.  return v14 @kind wide;
}
procedure `long` `j`(`b3.k$a` v6 @kind this, `long` v7 ) @signature `Lb3/k$a;.j:(J)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1edd90.  v0:= v6.`b3.k$a.f` @type ^`java.util.List` @kind object;
  #L1edd94.  if v0 == 0 then goto L1eddb8;
  #L1edd98.  v1:= v6.`b3.k$a.d` @type ^`long` @kind wide;
  #L1edd9c.  v7:= v7 - v1 @kind long;
  #L1edd9e.  v8:= (`int`) v7 @kind l2i;
  #L1edda0.  call temp:= `get`(v0, v8) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1edda6.  v7:= temp @kind object;
  #L1edda8.  v7:= (`b3.k$d`) v7 @kind object;
  #L1eddac.  v7:= v7.`b3.k$d.a` @type ^`long` @kind wide;
  #L1eddb0.  v0:= v6.`b3.k.c` @type ^`long` @kind wide;
  #L1eddb4.  v7:= v7 - v0 @kind long;
  #L1eddb6.  goto L1eddc6;
  #L1eddb8.  v0:= v6.`b3.k$a.d` @type ^`long` @kind wide;
  #L1eddbc.  v7:= v7 - v0 @kind long;
  #L1eddbe.  v0:= v6.`b3.k$a.e` @type ^`long` @kind wide;
  #L1eddc2.  v7:= v7 * v0 @kind long;
  #L1eddc6.  v0:= v7 @kind wide;
  #L1eddc8.  v2:= 1000000L;
  #L1eddce.  v4:= v6.`b3.k.b` @type ^`long` @kind wide;
  #L1eddd2.  call temp:= `M0`(v0, v2, v4) @signature `Ls3/l0;.M0:(JJJ)J` @kind static;
  #L1eddd8.  v7:= temp @kind wide;
  #L1eddda.  return v7 @kind wide;
}
procedure `b3.i` `k`(`b3.j` v0 @kind object, `long` v1 ) @signature `Lb3/k$a;.k:(Lb3/j;J)Lb3/i;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `l`(`b3.k$a` v1 @kind this) @signature `Lb3/k$a;.l:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1edb00.  v0:= v1.`b3.k$a.f` @type ^`java.util.List` @kind object;
  #L1edb04.  if v0 == 0 then goto L1edb0c;
  #L1edb08.  v0:= 1I;
  #L1edb0a.  goto L1edb0e;
  #L1edb0c.  v0:= 0I;
  #L1edb0e.  return v0;
}
