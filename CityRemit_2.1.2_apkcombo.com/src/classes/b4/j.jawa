record `b4.j` @kind class @AccessFlag PUBLIC_FINAL {
  `b4.k` `b4.j.a` @AccessFlag PRIVATE;
}
global `b4.j` `@@b4.j.b` @AccessFlag PRIVATE_STATIC;
global `b4.k` `@@b4.j.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb4/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ef13c.  v6:= new `b4.k`;
  #L1ef140.  v1:= 0I;
  #L1ef142.  v2:= 0I;
  #L1ef144.  v3:= 0I;
  #L1ef146.  v4:= 0I;
  #L1ef148.  v5:= 0I;
  #L1ef14a.  v0:= v6 @kind object;
  #L1ef14c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lb4/k;.<init>:(IZZII)V` @kind direct;
  #L1ef152.  `@@b4.j.c` @type ^`b4.k` := v6 @kind object;
  #L1ef156.  return @kind void;
}
procedure `void` `<init>`(`b4.j` v0 @kind this) @signature `Lb4/j;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1ef168.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ef16e.  return @kind void;
}
procedure `b4.j` `b`() @signature `Lb4/j;.b:()Lb4/j;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1ef0dc.  v0:= constclass @type ^`b4.j` @kind object;
  #L1ef0e0.  @monitorenter v0
  #L1ef0e2.  v1:= `@@b4.j.b` @type ^`b4.j` @kind object;
  #L1ef0e6.  if v1 != 0 then goto L1ef0f8;
  #L1ef0ea.  v1:= new `b4.j`;
  #L1ef0ee.  call `<init>`(v1) @signature `Lb4/j;.<init>:()V` @kind direct;
  #L1ef0f4.  `@@b4.j.b` @type ^`b4.j` := v1 @kind object;
  #L1ef0f8.  v1:= `@@b4.j.b` @type ^`b4.j` @kind object;
  #L1ef0fc.  @monitorexit v0
  #L1ef0fe.  return v1 @kind object;
  #L1ef100.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ef102.  @monitorexit v0
  #L1ef104.  throw v1;
  catch `java.lang.Throwable` @[L1ef0e2..L1ef0fc] goto L1ef100;
}
procedure `b4.k` `a`(`b4.j` v1 @kind this) @signature `Lb4/j;.a:()Lb4/k;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ef124.  v0:= v1.`b4.j.a` @type ^`b4.k` @kind object;
  #L1ef128.  return v0 @kind object;
}
procedure `void` `c`(`b4.j` v2 @kind this, `b4.k` v3 @kind object) @signature `Lb4/j;.c:(Lb4/k;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ef180.  @monitorenter v2
  #L1ef182.  if v3 != 0 then goto L1ef192;
  #L1ef186.  v3:= `@@b4.j.c` @type ^`b4.k` @kind object;
  #L1ef18a.  v2.`b4.j.a` @type ^`b4.k` := v3 @kind object;
  #L1ef18e.  @monitorexit v2
  #L1ef190.  return @kind void;
  #L1ef192.  v0:= v2.`b4.j.a` @type ^`b4.k` @kind object;
  #L1ef196.  if v0 == 0 then goto L1ef1b4;
  #L1ef19a.  call temp:= `u`(v0) @signature `Lb4/k;.u:()I` @kind virtual;
  #L1ef1a0.  v0:= temp;
  #L1ef1a2.  call temp:= `u`(v3) @signature `Lb4/k;.u:()I` @kind virtual;
  #L1ef1a8.  v1:= temp;
  #L1ef1aa.  if v0 >= v1 then goto L1ef1b0;
  #L1ef1ae.  goto L1ef1b4;
  #L1ef1b0.  @monitorexit v2
  #L1ef1b2.  return @kind void;
  #L1ef1b4.  v2.`b4.j.a` @type ^`b4.k` := v3 @kind object;
  #L1ef1b8.  @monitorexit v2
  #L1ef1ba.  return @kind void;
  #L1ef1bc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ef1be.  @monitorexit v2
  #L1ef1c0.  throw v3;
  catch `java.lang.Throwable` @[L1ef186..L1ef18e] goto L1ef1bc;
  catch `java.lang.Throwable` @[L1ef192..L1ef1aa] goto L1ef1bc;
  catch `java.lang.Throwable` @[L1ef1b4..L1ef1b8] goto L1ef1bc;
}
