record `d8.e$e` @kind class @AccessFlag  extends `d8.w` @kind class {
  `d8.w` `d8.e$e.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`d8.e$e` v0 @kind this, `d8.w` v1 @kind object) @signature `Ld8/e$e;.<init>:(Ld8/w;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2f8bdc.  v0.`d8.e$e.a` @type ^`d8.w` := v1 @kind object;
  #L2f8be0.  call `<init>`(v0) @signature `Ld8/w;.<init>:()V` @kind direct;
  #L2f8be6.  return @kind void;
}
procedure `java.lang.Object` `c`(`d8.e$e` v0 @kind this, `l8.a` v1 @kind object) @signature `Ld8/e$e;.c:(Ll8/a;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2f8b2c.  call temp:= `f`(v0, v1) @signature `Ld8/e$e;.f:(Ll8/a;)Ljava/util/concurrent/atomic/AtomicLongArray;` @kind virtual;
  #L2f8b32.  v1:= temp @kind object;
  #L2f8b34.  return v1 @kind object;
}
procedure `void` `e`(`d8.e$e` v0 @kind this, `l8.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Ld8/e$e;.e:(Ll8/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2f8bf8.  v2:= (`java.util.concurrent.atomic.AtomicLongArray`) v2 @kind object;
  #L2f8bfc.  call `g`(v0, v1, v2) @signature `Ld8/e$e;.g:(Ll8/c;Ljava/util/concurrent/atomic/AtomicLongArray;)V` @kind virtual;
  #L2f8c02.  return @kind void;
}
procedure `java.util.concurrent.atomic.AtomicLongArray` `f`(`d8.e$e` v5 @kind this, `l8.a` v6 @kind object) @signature `Ld8/e$e;.f:(Ll8/a;)Ljava/util/concurrent/atomic/AtomicLongArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2f8b48.  v0:= new `java.util.ArrayList`;
  #L2f8b4c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2f8b52.  call `a`(v6) @signature `Ll8/a;.a:()V` @kind virtual;
  #L2f8b58.  call temp:= `x`(v6) @signature `Ll8/a;.x:()Z` @kind virtual;
  #L2f8b5e.  v1:= temp;
  #L2f8b60.  if v1 == 0 then goto L2f8b8c;
  #L2f8b64.  v1:= v5.`d8.e$e.a` @type ^`d8.w` @kind object;
  #L2f8b68.  call temp:= `c`(v1, v6) @signature `Ld8/w;.c:(Ll8/a;)Ljava/lang/Object;` @kind virtual;
  #L2f8b6e.  v1:= temp @kind object;
  #L2f8b70.  v1:= (`java.lang.Number`) v1 @kind object;
  #L2f8b74.  call temp:= `longValue`(v1) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L2f8b7a.  v1:= temp @kind wide;
  #L2f8b7c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2f8b82.  v1:= temp @kind object;
  #L2f8b84.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f8b8a.  goto L2f8b58;
  #L2f8b8c.  call `k`(v6) @signature `Ll8/a;.k:()V` @kind virtual;
  #L2f8b92.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f8b98.  v6:= temp;
  #L2f8b9a.  v1:= new `java.util.concurrent.atomic.AtomicLongArray`;
  #L2f8b9e.  call `<init>`(v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.<init>:(I)V` @kind direct;
  #L2f8ba4.  v2:= 0I;
  #L2f8ba6.  if v2 >= v6 then goto L2f8bca;
  #L2f8baa.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f8bb0.  v3:= temp @kind object;
  #L2f8bb2.  v3:= (`java.lang.Long`) v3 @kind object;
  #L2f8bb6.  call temp:= `longValue`(v3) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2f8bbc.  v3:= temp @kind wide;
  #L2f8bbe.  call `set`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.set:(IJ)V` @kind virtual;
  #L2f8bc4.  v2:= v2 + 1;
  #L2f8bc8.  goto L2f8ba6;
  #L2f8bca.  return v1 @kind object;
}
procedure `void` `g`(`d8.e$e` v5 @kind this, `l8.c` v6 @kind object, `java.util.concurrent.atomic.AtomicLongArray` v7 @kind object) @signature `Ld8/e$e;.g:(Ll8/c;Ljava/util/concurrent/atomic/AtomicLongArray;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2f8c14.  call temp:= `e`(v6) @signature `Ll8/c;.e:()Ll8/c;` @kind virtual;
  #L2f8c1a.  call temp:= `length`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.length:()I` @kind virtual;
  #L2f8c20.  v0:= temp;
  #L2f8c22.  v1:= 0I;
  #L2f8c24.  if v1 >= v0 then goto L2f8c48;
  #L2f8c28.  v2:= v5.`d8.e$e.a` @type ^`d8.w` @kind object;
  #L2f8c2c.  call temp:= `get`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L2f8c32.  v3:= temp @kind wide;
  #L2f8c34.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2f8c3a.  v3:= temp @kind object;
  #L2f8c3c.  call `e`(v2, v6, v3) @signature `Ld8/w;.e:(Ll8/c;Ljava/lang/Object;)V` @kind virtual;
  #L2f8c42.  v1:= v1 + 1;
  #L2f8c46.  goto L2f8c24;
  #L2f8c48.  call temp:= `k`(v6) @signature `Ll8/c;.k:()Ll8/c;` @kind virtual;
  #L2f8c4e.  return @kind void;
}
