record `d8.n` @kind class @AccessFlag PUBLIC_FINAL extends `d8.k` @kind class {
  `f8.h` `d8.n.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`d8.n` v1 @kind this) @signature `Ld8/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2f9f68.  call `<init>`(v1) @signature `Ld8/k;.<init>:()V` @kind direct;
  #L2f9f6e.  v0:= new `f8.h`;
  #L2f9f72.  call `<init>`(v0) @signature `Lf8/h;.<init>:()V` @kind direct;
  #L2f9f78.  v1.`d8.n.a` @type ^`f8.h` := v0 @kind object;
  #L2f9f7c.  return @kind void;
}
procedure `void` `G`(`d8.n` v1 @kind this, `java.lang.String` v2 @kind object, `d8.k` v3 @kind object) @signature `Ld8/n;.G:(Ljava/lang/String;Ld8/k;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9f90.  v0:= v1.`d8.n.a` @type ^`f8.h` @kind object;
  #L2f9f94.  if v3 != 0 then goto L2f9f9c;
  #L2f9f98.  v3:= `@@d8.m.a` @type ^`d8.m` @kind object;
  #L2f9f9c.  call temp:= `put`(v0, v2, v3) @signature `Lf8/h;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2f9fa2.  return @kind void;
}
procedure `java.util.Set` `N`(`d8.n` v1 @kind this) @signature `Ld8/n;.N:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9f48.  v0:= v1.`d8.n.a` @type ^`f8.h` @kind object;
  #L2f9f4c.  call temp:= `entrySet`(v0) @signature `Lf8/h;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L2f9f52.  v0:= temp @kind object;
  #L2f9f54.  return v0 @kind object;
}
procedure `boolean` `O`(`d8.n` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Ld8/n;.O:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9ee4.  v0:= v1.`d8.n.a` @type ^`f8.h` @kind object;
  #L2f9ee8.  call temp:= `containsKey`(v0, v2) @signature `Lf8/h;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f9eee.  v2:= temp;
  #L2f9ef0.  return v2;
}
procedure `d8.k` `Q`(`d8.n` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Ld8/n;.Q:(Ljava/lang/String;)Ld8/k;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9f04.  v0:= v1.`d8.n.a` @type ^`f8.h` @kind object;
  #L2f9f08.  call temp:= `remove`(v0, v2) @signature `Lf8/h;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2f9f0e.  v2:= temp @kind object;
  #L2f9f10.  v2:= (`d8.k`) v2 @kind object;
  #L2f9f14.  return v2 @kind object;
}
procedure `boolean` `equals`(`d8.n` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ld8/n;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9ea4.  if v2 == v1 then goto L2f9ece;
  #L2f9ea8.  v0:= instanceof @variable v2 @type ^`d8.n` @kind boolean;
  #L2f9eac.  if v0 == 0 then goto L2f9eca;
  #L2f9eb0.  v2:= (`d8.n`) v2 @kind object;
  #L2f9eb4.  v2:= v2.`d8.n.a` @type ^`f8.h` @kind object;
  #L2f9eb8.  v0:= v1.`d8.n.a` @type ^`f8.h` @kind object;
  #L2f9ebc.  call temp:= `equals`(v2, v0) @signature `Ljava/util/AbstractMap;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f9ec2.  v2:= temp;
  #L2f9ec4.  if v2 == 0 then goto L2f9eca;
  #L2f9ec8.  goto L2f9ece;
  #L2f9eca.  v2:= 0I;
  #L2f9ecc.  goto L2f9ed0;
  #L2f9ece.  v2:= 1I;
  #L2f9ed0.  return v2;
}
procedure `int` `hashCode`(`d8.n` v1 @kind this) @signature `Ld8/n;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9f28.  v0:= v1.`d8.n.a` @type ^`f8.h` @kind object;
  #L2f9f2c.  call temp:= `hashCode`(v0) @signature `Ljava/util/AbstractMap;.hashCode:()I` @kind virtual;
  #L2f9f32.  v0:= temp;
  #L2f9f34.  return v0;
}
