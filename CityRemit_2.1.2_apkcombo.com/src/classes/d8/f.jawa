record `d8.f` @kind class @AccessFlag PUBLIC_FINAL {
  `f8.d` `d8.f.a` @AccessFlag PRIVATE;
  `d8.t` `d8.f.b` @AccessFlag PRIVATE;
  `d8.d` `d8.f.c` @AccessFlag PRIVATE;
  `java.util.Map` `d8.f.d` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `d8.f.e` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `d8.f.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `d8.f.g` @AccessFlag PRIVATE;
  `java.lang.String` `d8.f.h` @AccessFlag PRIVATE;
  `int` `d8.f.i` @AccessFlag PRIVATE;
  `int` `d8.f.j` @AccessFlag PRIVATE;
  `boolean` `d8.f.k` @AccessFlag PRIVATE;
  `boolean` `d8.f.l` @AccessFlag PRIVATE;
  `boolean` `d8.f.m` @AccessFlag PRIVATE;
  `boolean` `d8.f.n` @AccessFlag PRIVATE;
  `boolean` `d8.f.o` @AccessFlag PRIVATE;
  `boolean` `d8.f.p` @AccessFlag PRIVATE;
  `d8.v` `d8.f.q` @AccessFlag PRIVATE;
  `d8.v` `d8.f.r` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`d8.f` v2 @kind this) @signature `Ld8/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2f8e08.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f8e0e.  v0:= `@@f8.d.u` @type ^`f8.d` @kind object;
  #L2f8e12.  v2.`d8.f.a` @type ^`f8.d` := v0 @kind object;
  #L2f8e16.  v0:= `@@d8.t.o` @type ^`d8.t` @kind object;
  #L2f8e1a.  v2.`d8.f.b` @type ^`d8.t` := v0 @kind object;
  #L2f8e1e.  v0:= `@@d8.c.o` @type ^`d8.c` @kind object;
  #L2f8e22.  v2.`d8.f.c` @type ^`d8.d` := v0 @kind object;
  #L2f8e26.  v0:= new `java.util.HashMap`;
  #L2f8e2a.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2f8e30.  v2.`d8.f.d` @type ^`java.util.Map` := v0 @kind object;
  #L2f8e34.  v0:= new `java.util.ArrayList`;
  #L2f8e38.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2f8e3e.  v2.`d8.f.e` @type ^`java.util.List` := v0 @kind object;
  #L2f8e42.  v0:= new `java.util.ArrayList`;
  #L2f8e46.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2f8e4c.  v2.`d8.f.f` @type ^`java.util.List` := v0 @kind object;
  #L2f8e50.  v0:= 0I;
  #L2f8e52.  v2.`d8.f.g` @type ^`boolean` := v0 @kind boolean;
  #L2f8e56.  v1:= 2I;
  #L2f8e58.  v2.`d8.f.i` @type ^`int` := v1;
  #L2f8e5c.  v2.`d8.f.j` @type ^`int` := v1;
  #L2f8e60.  v2.`d8.f.k` @type ^`boolean` := v0 @kind boolean;
  #L2f8e64.  v2.`d8.f.l` @type ^`boolean` := v0 @kind boolean;
  #L2f8e68.  v1:= 1I;
  #L2f8e6a.  v2.`d8.f.m` @type ^`boolean` := v1 @kind boolean;
  #L2f8e6e.  v2.`d8.f.n` @type ^`boolean` := v0 @kind boolean;
  #L2f8e72.  v2.`d8.f.o` @type ^`boolean` := v0 @kind boolean;
  #L2f8e76.  v2.`d8.f.p` @type ^`boolean` := v0 @kind boolean;
  #L2f8e7a.  v0:= `@@d8.u.o` @type ^`d8.u` @kind object;
  #L2f8e7e.  v2.`d8.f.q` @type ^`d8.v` := v0 @kind object;
  #L2f8e82.  v0:= `@@d8.u.p` @type ^`d8.u` @kind object;
  #L2f8e86.  v2.`d8.f.r` @type ^`d8.v` := v0 @kind object;
  #L2f8e8a.  return @kind void;
}
procedure `void` `a`(`d8.f` v4 @kind this, `java.lang.String` v5 @kind object, `int` v6 , `int` v7 , `java.util.List` v8 @kind object) @signature `Ld8/f;.a:(Ljava/lang/String;IILjava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f8e9c.  v0:= `@@j8.d.a` @type ^`boolean` @kind boolean;
  #L2f8ea0.  v1:= 0I;
  #L2f8ea2.  if v5 == 0 then goto L2f8ee8;
  #L2f8ea6.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2f8eac.  v2:= temp @kind object;
  #L2f8eae.  call temp:= `isEmpty`(v2) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2f8eb4.  v2:= temp;
  #L2f8eb6.  if v2 != 0 then goto L2f8ee8;
  #L2f8eba.  v6:= `@@g8.d$b.b` @type ^`g8.d$b` @kind object;
  #L2f8ebe.  call temp:= `b`(v6, v5) @signature `Lg8/d$b;.b:(Ljava/lang/String;)Ld8/x;` @kind virtual;
  #L2f8ec4.  v6:= temp @kind object;
  #L2f8ec6.  if v0 == 0 then goto L2f8ee4;
  #L2f8eca.  v7:= `@@j8.d.c` @type ^`g8.d$b` @kind object;
  #L2f8ece.  call temp:= `b`(v7, v5) @signature `Lg8/d$b;.b:(Ljava/lang/String;)Ld8/x;` @kind virtual;
  #L2f8ed4.  v1:= temp @kind object;
  #L2f8ed6.  v7:= `@@j8.d.b` @type ^`g8.d$b` @kind object;
  #L2f8eda.  call temp:= `b`(v7, v5) @signature `Lg8/d$b;.b:(Ljava/lang/String;)Ld8/x;` @kind virtual;
  #L2f8ee0.  v5:= temp @kind object;
  #L2f8ee2.  goto L2f8f26;
  #L2f8ee4.  v5:= v1 @kind object;
  #L2f8ee6.  goto L2f8f26;
  #L2f8ee8.  v5:= 2I;
  #L2f8eea.  if v6 == v5 then goto L2f8f3c;
  #L2f8eee.  if v7 == v5 then goto L2f8f3c;
  #L2f8ef2.  v5:= `@@g8.d$b.b` @type ^`g8.d$b` @kind object;
  #L2f8ef6.  call temp:= `a`(v5, v6, v7) @signature `Lg8/d$b;.a:(II)Ld8/x;` @kind virtual;
  #L2f8efc.  v5:= temp @kind object;
  #L2f8efe.  if v0 == 0 then goto L2f8f22;
  #L2f8f02.  v1:= `@@j8.d.c` @type ^`g8.d$b` @kind object;
  #L2f8f06.  call temp:= `a`(v1, v6, v7) @signature `Lg8/d$b;.a:(II)Ld8/x;` @kind virtual;
  #L2f8f0c.  v1:= temp @kind object;
  #L2f8f0e.  v2:= `@@j8.d.b` @type ^`g8.d$b` @kind object;
  #L2f8f12.  call temp:= `a`(v2, v6, v7) @signature `Lg8/d$b;.a:(II)Ld8/x;` @kind virtual;
  #L2f8f18.  v6:= temp @kind object;
  #L2f8f1a.  v3:= v6 @kind object;
  #L2f8f1c.  v6:= v5 @kind object;
  #L2f8f1e.  v5:= v3 @kind object;
  #L2f8f20.  goto L2f8f26;
  #L2f8f22.  v6:= v5 @kind object;
  #L2f8f24.  goto L2f8ee4;
  #L2f8f26.  call temp:= `add`(v8, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f8f2c.  if v0 == 0 then goto L2f8f3c;
  #L2f8f30.  call temp:= `add`(v8, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f8f36.  call temp:= `add`(v8, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f8f3c.  return @kind void;
}
procedure `d8.e` `b`(`d8.f` v23 @kind this) @signature `Ld8/f;.b:()Ld8/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L2f8d00.  v0:= v23 @kind object;
  #L2f8d04.  v1:= new `java.util.ArrayList`;
  #L2f8d08.  v18:= v1 @kind object;
  #L2f8d0c.  v2:= v0.`d8.f.e` @type ^`java.util.List` @kind object;
  #L2f8d10.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f8d16.  v2:= temp;
  #L2f8d18.  v3:= v0.`d8.f.f` @type ^`java.util.List` @kind object;
  #L2f8d1c.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f8d22.  v3:= temp;
  #L2f8d24.  v2:= v2 + v3 @kind int;
  #L2f8d26.  v2:= v2 + 3;
  #L2f8d2a.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2f8d30.  v2:= v0.`d8.f.e` @type ^`java.util.List` @kind object;
  #L2f8d34.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2f8d3a.  call `reverse`(v1) @signature `Ljava/util/Collections;.reverse:(Ljava/util/List;)V` @kind static;
  #L2f8d40.  v2:= new `java.util.ArrayList`;
  #L2f8d44.  v3:= v0.`d8.f.f` @type ^`java.util.List` @kind object;
  #L2f8d48.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2f8d4e.  call `reverse`(v2) @signature `Ljava/util/Collections;.reverse:(Ljava/util/List;)V` @kind static;
  #L2f8d54.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2f8d5a.  v2:= v0.`d8.f.h` @type ^`java.lang.String` @kind object;
  #L2f8d5e.  v3:= v0.`d8.f.i` @type ^`int`;
  #L2f8d62.  v4:= v0.`d8.f.j` @type ^`int`;
  #L2f8d66.  call `a`(v0, v2, v3, v4, v1) @signature `Ld8/f;.a:(Ljava/lang/String;IILjava/util/List;)V` @kind direct;
  #L2f8d6c.  v21:= new `d8.e`;
  #L2f8d70.  v1:= v21 @kind object;
  #L2f8d74.  v2:= v0.`d8.f.a` @type ^`f8.d` @kind object;
  #L2f8d78.  v3:= v0.`d8.f.c` @type ^`d8.d` @kind object;
  #L2f8d7c.  v4:= v0.`d8.f.d` @type ^`java.util.Map` @kind object;
  #L2f8d80.  v5:= v0.`d8.f.g` @type ^`boolean` @kind boolean;
  #L2f8d84.  v6:= v0.`d8.f.k` @type ^`boolean` @kind boolean;
  #L2f8d88.  v7:= v0.`d8.f.o` @type ^`boolean` @kind boolean;
  #L2f8d8c.  v8:= v0.`d8.f.m` @type ^`boolean` @kind boolean;
  #L2f8d90.  v9:= v0.`d8.f.n` @type ^`boolean` @kind boolean;
  #L2f8d94.  v10:= v0.`d8.f.p` @type ^`boolean` @kind boolean;
  #L2f8d98.  v11:= v0.`d8.f.l` @type ^`boolean` @kind boolean;
  #L2f8d9c.  v12:= v0.`d8.f.b` @type ^`d8.t` @kind object;
  #L2f8da0.  v13:= v0.`d8.f.h` @type ^`java.lang.String` @kind object;
  #L2f8da4.  v14:= v0.`d8.f.i` @type ^`int`;
  #L2f8da8.  v15:= v0.`d8.f.j` @type ^`int`;
  #L2f8dac.  v22:= v1 @kind object;
  #L2f8db0.  v1:= v0.`d8.f.e` @type ^`java.util.List` @kind object;
  #L2f8db4.  v16:= v1 @kind object;
  #L2f8db8.  v1:= v0.`d8.f.f` @type ^`java.util.List` @kind object;
  #L2f8dbc.  v17:= v1 @kind object;
  #L2f8dc0.  v1:= v0.`d8.f.q` @type ^`d8.v` @kind object;
  #L2f8dc4.  v19:= v1 @kind object;
  #L2f8dc8.  v1:= v0.`d8.f.r` @type ^`d8.v` @kind object;
  #L2f8dcc.  v20:= v1 @kind object;
  #L2f8dd0.  v1:= v22 @kind object;
  #L2f8dd4.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20) @signature `Ld8/e;.<init>:(Lf8/d;Ld8/d;Ljava/util/Map;ZZZZZZZLd8/t;Ljava/lang/String;IILjava/util/List;Ljava/util/List;Ljava/util/List;Ld8/v;Ld8/v;)V` @kind direct;
  #L2f8dda.  return v21 @kind object;
}
procedure `d8.f` `c`(`d8.f` v1 @kind this, `d8.x` v2 @kind object) @signature `Ld8/f;.c:(Ld8/x;)Ld8/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f8dec.  v0:= v1.`d8.f.e` @type ^`java.util.List` @kind object;
  #L2f8df0.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f8df6.  return v1 @kind object;
}
