record `d8.h` @kind class @AccessFlag PUBLIC_FINAL extends `d8.k` @kind class, `java.lang.Iterable` @kind interface {
  `java.util.List` `d8.h.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`d8.h` v1 @kind this) @signature `Ld8/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2f9b94.  call `<init>`(v1) @signature `Ld8/k;.<init>:()V` @kind direct;
  #L2f9b9a.  v0:= new `java.util.ArrayList`;
  #L2f9b9e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2f9ba4.  v1.`d8.h.o` @type ^`java.util.List` := v0 @kind object;
  #L2f9ba8.  return @kind void;
}
procedure `void` `G`(`d8.h` v1 @kind this, `d8.k` v2 @kind object) @signature `Ld8/h;.G:(Ld8/k;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9bbc.  if v2 != 0 then goto L2f9bc4;
  #L2f9bc0.  v2:= `@@d8.m.a` @type ^`d8.m` @kind object;
  #L2f9bc4.  v0:= v1.`d8.h.o` @type ^`java.util.List` @kind object;
  #L2f9bc8.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f9bce.  return @kind void;
}
procedure `boolean` `equals`(`d8.h` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ld8/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9ac8.  if v2 == v1 then goto L2f9af2;
  #L2f9acc.  v0:= instanceof @variable v2 @type ^`d8.h` @kind boolean;
  #L2f9ad0.  if v0 == 0 then goto L2f9aee;
  #L2f9ad4.  v2:= (`d8.h`) v2 @kind object;
  #L2f9ad8.  v2:= v2.`d8.h.o` @type ^`java.util.List` @kind object;
  #L2f9adc.  v0:= v1.`d8.h.o` @type ^`java.util.List` @kind object;
  #L2f9ae0.  call temp:= `equals`(v2, v0) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2f9ae6.  v2:= temp;
  #L2f9ae8.  if v2 == 0 then goto L2f9aee;
  #L2f9aec.  goto L2f9af2;
  #L2f9aee.  v2:= 0I;
  #L2f9af0.  goto L2f9af4;
  #L2f9af2.  v2:= 1I;
  #L2f9af4.  return v2;
}
procedure `int` `hashCode`(`d8.h` v1 @kind this) @signature `Ld8/h;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9b08.  v0:= v1.`d8.h.o` @type ^`java.util.List` @kind object;
  #L2f9b0c.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L2f9b12.  v0:= temp;
  #L2f9b14.  return v0;
}
procedure `java.util.Iterator` `iterator`(`d8.h` v1 @kind this) @signature `Ld8/h;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9b74.  v0:= v1.`d8.h.o` @type ^`java.util.List` @kind object;
  #L2f9b78.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2f9b7e.  v0:= temp @kind object;
  #L2f9b80.  return v0 @kind object;
}
procedure `java.lang.String` `l`(`d8.h` v2 @kind this) @signature `Ld8/h;.l:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f9b28.  v0:= v2.`d8.h.o` @type ^`java.util.List` @kind object;
  #L2f9b2c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f9b32.  v0:= temp;
  #L2f9b34.  v1:= 1I;
  #L2f9b36.  if v0 != v1 then goto L2f9b56;
  #L2f9b3a.  v0:= v2.`d8.h.o` @type ^`java.util.List` @kind object;
  #L2f9b3e.  v1:= 0I;
  #L2f9b40.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f9b46.  v0:= temp @kind object;
  #L2f9b48.  v0:= (`d8.k`) v0 @kind object;
  #L2f9b4c.  call temp:= `l`(v0) @signature `Ld8/k;.l:()Ljava/lang/String;` @kind virtual;
  #L2f9b52.  v0:= temp @kind object;
  #L2f9b54.  return v0 @kind object;
  #L2f9b56.  v0:= new `java.lang.IllegalStateException`;
  #L2f9b5a.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2f9b60.  throw v0;
}
