record `d8.c` @kind class @AccessFlag PUBLIC_ABSTRACT_ENUM extends `java.lang.Enum` @kind class, `d8.d` @kind interface {
}
global `d8.c` `@@d8.c.o` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `d8.c` `@@d8.c.p` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `d8.c` `@@d8.c.q` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `d8.c` `@@d8.c.r` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `d8.c` `@@d8.c.s` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `d8.c` `@@d8.c.t` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `d8.c`[] `@@d8.c.u` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Ld8/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2f8760.  v0:= new `d8.c$a`;
  #L2f8764.  v1:= "IDENTITY" @kind object;
  #L2f8768.  v2:= 0I;
  #L2f876a.  call `<init>`(v0, v1, v2) @signature `Ld8/c$a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2f8770.  `@@d8.c.o` @type ^`d8.c` := v0 @kind object;
  #L2f8774.  v1:= new `d8.c$b`;
  #L2f8778.  v3:= "UPPER_CAMEL_CASE" @kind object;
  #L2f877c.  v4:= 1I;
  #L2f877e.  call `<init>`(v1, v3, v4) @signature `Ld8/c$b;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2f8784.  `@@d8.c.p` @type ^`d8.c` := v1 @kind object;
  #L2f8788.  v3:= new `d8.c$c`;
  #L2f878c.  v5:= "UPPER_CAMEL_CASE_WITH_SPACES" @kind object;
  #L2f8790.  v6:= 2I;
  #L2f8792.  call `<init>`(v3, v5, v6) @signature `Ld8/c$c;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2f8798.  `@@d8.c.q` @type ^`d8.c` := v3 @kind object;
  #L2f879c.  v5:= new `d8.c$d`;
  #L2f87a0.  v7:= "LOWER_CASE_WITH_UNDERSCORES" @kind object;
  #L2f87a4.  v8:= 3I;
  #L2f87a6.  call `<init>`(v5, v7, v8) @signature `Ld8/c$d;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2f87ac.  `@@d8.c.r` @type ^`d8.c` := v5 @kind object;
  #L2f87b0.  v7:= new `d8.c$e`;
  #L2f87b4.  v9:= "LOWER_CASE_WITH_DASHES" @kind object;
  #L2f87b8.  v10:= 4I;
  #L2f87ba.  call `<init>`(v7, v9, v10) @signature `Ld8/c$e;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2f87c0.  `@@d8.c.s` @type ^`d8.c` := v7 @kind object;
  #L2f87c4.  v9:= new `d8.c$f`;
  #L2f87c8.  v11:= "LOWER_CASE_WITH_DOTS" @kind object;
  #L2f87cc.  v12:= 5I;
  #L2f87ce.  call `<init>`(v9, v11, v12) @signature `Ld8/c$f;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2f87d4.  `@@d8.c.t` @type ^`d8.c` := v9 @kind object;
  #L2f87d8.  v11:= 6I;
  #L2f87da.  v11:= new `d8.c`[v11];
  #L2f87de.  v11[v2]:= v0 @kind object;
  #L2f87e2.  v11[v4]:= v1 @kind object;
  #L2f87e6.  v11[v6]:= v3 @kind object;
  #L2f87ea.  v11[v8]:= v5 @kind object;
  #L2f87ee.  v11[v10]:= v7 @kind object;
  #L2f87f2.  v11[v12]:= v9 @kind object;
  #L2f87f6.  `@@d8.c.u` @type ^`d8.c`[] := v11 @kind object;
  #L2f87fa.  return @kind void;
}
procedure `void` `<init>`(`d8.c` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Ld8/c;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2f880c.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2f8812.  return @kind void;
}
procedure `void` `<init>`(`d8.c` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `d8.c$a` v3 @kind object) @signature `Ld8/c;.<init>:(Ljava/lang/String;ILd8/c$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2f8824.  call `<init>`(v0, v1, v2) @signature `Ld8/c;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2f882a.  return @kind void;
}
procedure `java.lang.String` `d`(`java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Ld8/c;.d:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2f863c.  v0:= new `java.lang.StringBuilder`;
  #L2f8640.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f8646.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f864c.  v1:= temp;
  #L2f864e.  v2:= 0I;
  #L2f8650.  if v2 >= v1 then goto L2f8686;
  #L2f8654.  call temp:= `charAt`(v5, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f865a.  v3:= temp;
  #L2f865c.  call temp:= `isUpperCase`(v3) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L2f8662.  v4:= temp;
  #L2f8664.  if v4 == 0 then goto L2f867a;
  #L2f8668.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L2f866e.  v4:= temp;
  #L2f8670.  if v4 == 0 then goto L2f867a;
  #L2f8674.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f867a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f8680.  v2:= v2 + 1;
  #L2f8684.  goto L2f8650;
  #L2f8686.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f868c.  v5:= temp @kind object;
  #L2f868e.  return v5 @kind object;
}
procedure `java.lang.String` `e`(`java.lang.String` v5 @kind object) @signature `Ld8/c;.e:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2f86a0.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f86a6.  v0:= temp;
  #L2f86a8.  v1:= 1I;
  #L2f86aa.  v0:= v0 - v1 @kind int;
  #L2f86ac.  v2:= 0I;
  #L2f86ae.  v3:= 0I;
  #L2f86b0.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f86b6.  v4:= temp;
  #L2f86b8.  call temp:= `isLetter`(v4) @signature `Ljava/lang/Character;.isLetter:(C)Z` @kind static;
  #L2f86be.  v4:= temp;
  #L2f86c0.  if v4 != 0 then goto L2f86ce;
  #L2f86c4.  if v3 >= v0 then goto L2f86ce;
  #L2f86c8.  v3:= v3 + 1;
  #L2f86cc.  goto L2f86b0;
  #L2f86ce.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f86d4.  v0:= temp;
  #L2f86d6.  call temp:= `isUpperCase`(v0) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L2f86dc.  v4:= temp;
  #L2f86de.  if v4 == 0 then goto L2f86e4;
  #L2f86e2.  return v5 @kind object;
  #L2f86e4.  call temp:= `toUpperCase`(v0) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L2f86ea.  v0:= temp;
  #L2f86ec.  if v3 != 0 then goto L2f8718;
  #L2f86f0.  v2:= new `java.lang.StringBuilder`;
  #L2f86f4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f86fa.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f8700.  call temp:= `substring`(v5, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2f8706.  v5:= temp @kind object;
  #L2f8708.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f870e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f8714.  v5:= temp @kind object;
  #L2f8716.  return v5 @kind object;
  #L2f8718.  v4:= new `java.lang.StringBuilder`;
  #L2f871c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f8722.  call temp:= `substring`(v5, v2, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2f8728.  v2:= temp @kind object;
  #L2f872a.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f8730.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f8736.  v3:= v3 + v1 @kind int;
  #L2f8738.  call temp:= `substring`(v5, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2f873e.  v5:= temp @kind object;
  #L2f8740.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f8746.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f874c.  v5:= temp @kind object;
  #L2f874e.  return v5 @kind object;
}
procedure `d8.c` `valueOf`(`java.lang.String` v1 @kind object) @signature `Ld8/c;.valueOf:(Ljava/lang/String;)Ld8/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f85f4.  v0:= constclass @type ^`d8.c` @kind object;
  #L2f85f8.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L2f85fe.  v1:= temp @kind object;
  #L2f8600.  v1:= (`d8.c`) v1 @kind object;
  #L2f8604.  return v1 @kind object;
}
procedure `d8.c`[] `values`() @signature `Ld8/c;.values:()[Ld8/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f8618.  v0:= `@@d8.c.u` @type ^`d8.c`[] @kind object;
  #L2f861c.  call temp:= `clone`(v0) @signature `[Ld8/c;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2f8622.  v0:= temp @kind object;
  #L2f8624.  v0:= (`d8.c`[]) v0 @kind object;
  #L2f8628.  return v0 @kind object;
}
