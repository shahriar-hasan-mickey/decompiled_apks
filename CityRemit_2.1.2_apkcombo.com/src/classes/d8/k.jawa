record `d8.k` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`d8.k` v0 @kind this) @signature `Ld8/k;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f9dc4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f9dca.  return @kind void;
}
procedure `d8.h` `b`(`d8.k` v3 @kind this) @signature `Ld8/k;.b:()Ld8/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f9c40.  call temp:= `n`(v3) @signature `Ld8/k;.n:()Z` @kind virtual;
  #L2f9c46.  v0:= temp;
  #L2f9c48.  if v0 == 0 then goto L2f9c54;
  #L2f9c4c.  v0:= v3 @kind object;
  #L2f9c4e.  v0:= (`d8.h`) v0 @kind object;
  #L2f9c52.  return v0 @kind object;
  #L2f9c54.  v0:= new `java.lang.IllegalStateException`;
  #L2f9c58.  v1:= new `java.lang.StringBuilder`;
  #L2f9c5c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f9c62.  v2:= "Not a JSON Array: " @kind object;
  #L2f9c66.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f9c6c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f9c72.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f9c78.  v1:= temp @kind object;
  #L2f9c7a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f9c80.  throw v0;
}
procedure `d8.n` `f`(`d8.k` v3 @kind this) @signature `Ld8/k;.f:()Ld8/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f9c94.  call temp:= `u`(v3) @signature `Ld8/k;.u:()Z` @kind virtual;
  #L2f9c9a.  v0:= temp;
  #L2f9c9c.  if v0 == 0 then goto L2f9ca8;
  #L2f9ca0.  v0:= v3 @kind object;
  #L2f9ca2.  v0:= (`d8.n`) v0 @kind object;
  #L2f9ca6.  return v0 @kind object;
  #L2f9ca8.  v0:= new `java.lang.IllegalStateException`;
  #L2f9cac.  v1:= new `java.lang.StringBuilder`;
  #L2f9cb0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f9cb6.  v2:= "Not a JSON Object: " @kind object;
  #L2f9cba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f9cc0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f9cc6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f9ccc.  v1:= temp @kind object;
  #L2f9cce.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f9cd4.  throw v0;
}
procedure `d8.p` `h`(`d8.k` v3 @kind this) @signature `Ld8/k;.h:()Ld8/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f9ce8.  call temp:= `y`(v3) @signature `Ld8/k;.y:()Z` @kind virtual;
  #L2f9cee.  v0:= temp;
  #L2f9cf0.  if v0 == 0 then goto L2f9cfc;
  #L2f9cf4.  v0:= v3 @kind object;
  #L2f9cf6.  v0:= (`d8.p`) v0 @kind object;
  #L2f9cfa.  return v0 @kind object;
  #L2f9cfc.  v0:= new `java.lang.IllegalStateException`;
  #L2f9d00.  v1:= new `java.lang.StringBuilder`;
  #L2f9d04.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f9d0a.  v2:= "Not a JSON Primitive: " @kind object;
  #L2f9d0e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f9d14.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f9d1a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f9d20.  v1:= temp @kind object;
  #L2f9d22.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f9d28.  throw v0;
}
procedure `java.lang.String` `l`(`d8.k` v2 @kind this) @signature `Ld8/k;.l:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f9d3c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2f9d40.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2f9d46.  v1:= temp @kind object;
  #L2f9d48.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2f9d4e.  v1:= temp @kind object;
  #L2f9d50.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f9d56.  throw v0;
}
procedure `boolean` `n`(`d8.k` v1 @kind this) @signature `Ld8/k;.n:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9be0.  v0:= instanceof @variable v1 @type ^`d8.h` @kind boolean;
  #L2f9be4.  return v0;
}
procedure `boolean` `p`(`d8.k` v1 @kind this) @signature `Ld8/k;.p:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9bf8.  v0:= instanceof @variable v1 @type ^`d8.m` @kind boolean;
  #L2f9bfc.  return v0;
}
procedure `java.lang.String` `toString`(`d8.k` v3 @kind this) @signature `Ld8/k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f9d68.  v0:= new `java.io.StringWriter`;
  #L2f9d6c.  call `<init>`(v0) @signature `Ljava/io/StringWriter;.<init>:()V` @kind direct;
  #L2f9d72.  v1:= new `l8.c`;
  #L2f9d76.  call `<init>`(v1, v0) @signature `Ll8/c;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L2f9d7c.  v2:= 1I;
  #L2f9d7e.  call `b0`(v1, v2) @signature `Ll8/c;.b0:(Z)V` @kind virtual;
  #L2f9d84.  call `b`(v3, v1) @signature `Lf8/l;.b:(Ld8/k;Ll8/c;)V` @kind static;
  #L2f9d8a.  call temp:= `toString`(v0) @signature `Ljava/io/StringWriter;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f9d90.  v0:= temp @kind object;
  #L2f9d92.  return v0 @kind object;
  #L2f9d94.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2f9d96.  v1:= new `java.lang.AssertionError`;
  #L2f9d9a.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2f9da0.  throw v1;
  catch `java.io.IOException` @[L2f9d68..L2f9d92] goto L2f9d94;
}
procedure `boolean` `u`(`d8.k` v1 @kind this) @signature `Ld8/k;.u:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9c10.  v0:= instanceof @variable v1 @type ^`d8.n` @kind boolean;
  #L2f9c14.  return v0;
}
procedure `boolean` `y`(`d8.k` v1 @kind this) @signature `Ld8/k;.y:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f9c28.  v0:= instanceof @variable v1 @type ^`d8.p` @kind boolean;
  #L2f9c2c.  return v0;
}
