record `d8.e$a` @kind class @AccessFlag  extends `d8.w` @kind class {
}
procedure `void` `<init>`(`d8.e$a` v0 @kind this, `d8.e` v1 @kind object) @signature `Ld8/e$a;.<init>:(Ld8/e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2f8894.  call `<init>`(v0) @signature `Ld8/w;.<init>:()V` @kind direct;
  #L2f889a.  return @kind void;
}
procedure `java.lang.Object` `c`(`d8.e$a` v0 @kind this, `l8.a` v1 @kind object) @signature `Ld8/e$a;.c:(Ll8/a;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2f8878.  call temp:= `f`(v0, v1) @signature `Ld8/e$a;.f:(Ll8/a;)Ljava/lang/Double;` @kind virtual;
  #L2f887e.  v1:= temp @kind object;
  #L2f8880.  return v1 @kind object;
}
procedure `void` `e`(`d8.e$a` v0 @kind this, `l8.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Ld8/e$a;.e:(Ll8/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2f88e0.  v2:= (`java.lang.Number`) v2 @kind object;
  #L2f88e4.  call `g`(v0, v1, v2) @signature `Ld8/e$a;.g:(Ll8/c;Ljava/lang/Number;)V` @kind virtual;
  #L2f88ea.  return @kind void;
}
procedure `java.lang.Double` `f`(`d8.e$a` v2 @kind this, `l8.a` v3 @kind object) @signature `Ld8/e$a;.f:(Ll8/a;)Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f883c.  call temp:= `f0`(v3) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L2f8842.  v0:= temp @kind object;
  #L2f8844.  v1:= `@@l8.b.w` @type ^`l8.b` @kind object;
  #L2f8848.  if v0 != v1 then goto L2f8856;
  #L2f884c.  call `b0`(v3) @signature `Ll8/a;.b0:()V` @kind virtual;
  #L2f8852.  v3:= 0I;
  #L2f8854.  return v3 @kind object;
  #L2f8856.  call temp:= `M`(v3) @signature `Ll8/a;.M:()D` @kind virtual;
  #L2f885c.  v0:= temp @kind wide;
  #L2f885e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L2f8864.  v3:= temp @kind object;
  #L2f8866.  return v3 @kind object;
}
procedure `void` `g`(`d8.e$a` v2 @kind this, `l8.c` v3 @kind object, `java.lang.Number` v4 @kind object) @signature `Ld8/e$a;.g:(Ll8/c;Ljava/lang/Number;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f88ac.  if v4 != 0 then goto L2f88b8;
  #L2f88b0.  call temp:= `J`(v3) @signature `Ll8/c;.J:()Ll8/c;` @kind virtual;
  #L2f88b6.  return @kind void;
  #L2f88b8.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L2f88be.  v0:= temp @kind wide;
  #L2f88c0.  call `d`(v0) @signature `Ld8/e;.d:(D)V` @kind static;
  #L2f88c6.  call temp:= `g0`(v3, v4) @signature `Ll8/c;.g0:(Ljava/lang/Number;)Ll8/c;` @kind virtual;
  #L2f88cc.  return @kind void;
}
