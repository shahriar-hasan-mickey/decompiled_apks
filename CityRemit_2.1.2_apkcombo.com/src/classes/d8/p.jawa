record `d8.p` @kind class @AccessFlag PUBLIC_FINAL extends `d8.k` @kind class {
  `java.lang.Object` `d8.p.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`d8.p` v0 @kind this, `java.lang.Boolean` v1 @kind object) @signature `Ld8/p;.<init>:(Ljava/lang/Boolean;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2fa3a4.  call `<init>`(v0) @signature `Ld8/k;.<init>:()V` @kind direct;
  #L2fa3aa.  call temp:= `b`(v1) @signature `Lf8/a;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2fa3b0.  v1:= temp @kind object;
  #L2fa3b2.  v0.`d8.p.a` @type ^`java.lang.Object` := v1 @kind object;
  #L2fa3b6.  return @kind void;
}
procedure `void` `<init>`(`d8.p` v0 @kind this, `java.lang.Number` v1 @kind object) @signature `Ld8/p;.<init>:(Ljava/lang/Number;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2fa3c8.  call `<init>`(v0) @signature `Ld8/k;.<init>:()V` @kind direct;
  #L2fa3ce.  call temp:= `b`(v1) @signature `Lf8/a;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2fa3d4.  v1:= temp @kind object;
  #L2fa3d6.  v0.`d8.p.a` @type ^`java.lang.Object` := v1 @kind object;
  #L2fa3da.  return @kind void;
}
procedure `void` `<init>`(`d8.p` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Ld8/p;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2fa3ec.  call `<init>`(v0) @signature `Ld8/k;.<init>:()V` @kind direct;
  #L2fa3f2.  call temp:= `b`(v1) @signature `Lf8/a;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2fa3f8.  v1:= temp @kind object;
  #L2fa3fa.  v0.`d8.p.a` @type ^`java.lang.Object` := v1 @kind object;
  #L2fa3fe.  return @kind void;
}
procedure `boolean` `Y`(`d8.p` v2 @kind object) @signature `Ld8/p;.Y:(Ld8/p;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2fa158.  v2:= v2.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa15c.  v0:= instanceof @variable v2 @type ^`java.lang.Number` @kind boolean;
  #L2fa160.  v1:= 0I;
  #L2fa162.  if v0 == 0 then goto L2fa194;
  #L2fa166.  v2:= (`java.lang.Number`) v2 @kind object;
  #L2fa16a.  v0:= instanceof @variable v2 @type ^`java.math.BigInteger` @kind boolean;
  #L2fa16e.  if v0 != 0 then goto L2fa192;
  #L2fa172.  v0:= instanceof @variable v2 @type ^`java.lang.Long` @kind boolean;
  #L2fa176.  if v0 != 0 then goto L2fa192;
  #L2fa17a.  v0:= instanceof @variable v2 @type ^`java.lang.Integer` @kind boolean;
  #L2fa17e.  if v0 != 0 then goto L2fa192;
  #L2fa182.  v0:= instanceof @variable v2 @type ^`java.lang.Short` @kind boolean;
  #L2fa186.  if v0 != 0 then goto L2fa192;
  #L2fa18a.  v2:= instanceof @variable v2 @type ^`java.lang.Byte` @kind boolean;
  #L2fa18e.  if v2 == 0 then goto L2fa194;
  #L2fa192.  v1:= 1I;
  #L2fa194.  return v1;
}
procedure `boolean` `G`(`d8.p` v1 @kind this) @signature `Ld8/p;.G:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa0fc.  call temp:= `T`(v1) @signature `Ld8/p;.T:()Z` @kind virtual;
  #L2fa102.  v0:= temp;
  #L2fa104.  if v0 == 0 then goto L2fa11a;
  #L2fa108.  v0:= v1.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa10c.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L2fa110.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2fa116.  v0:= temp;
  #L2fa118.  return v0;
  #L2fa11a.  call temp:= `l`(v1) @signature `Ld8/p;.l:()Ljava/lang/String;` @kind virtual;
  #L2fa120.  v0:= temp @kind object;
  #L2fa122.  call temp:= `parseBoolean`(v0) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L2fa128.  v0:= temp;
  #L2fa12a.  return v0;
}
procedure `double` `N`(`d8.p` v2 @kind this) @signature `Ld8/p;.N:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fa1e0.  call temp:= `a0`(v2) @signature `Ld8/p;.a0:()Z` @kind virtual;
  #L2fa1e6.  v0:= temp;
  #L2fa1e8.  if v0 == 0 then goto L2fa1fe;
  #L2fa1ec.  call temp:= `S`(v2) @signature `Ld8/p;.S:()Ljava/lang/Number;` @kind virtual;
  #L2fa1f2.  v0:= temp @kind object;
  #L2fa1f4.  call temp:= `doubleValue`(v0) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L2fa1fa.  v0:= temp @kind wide;
  #L2fa1fc.  goto L2fa20e;
  #L2fa1fe.  call temp:= `l`(v2) @signature `Ld8/p;.l:()Ljava/lang/String;` @kind virtual;
  #L2fa204.  v0:= temp @kind object;
  #L2fa206.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L2fa20c.  v0:= temp @kind wide;
  #L2fa20e.  return v0 @kind wide;
}
procedure `int` `O`(`d8.p` v1 @kind this) @signature `Ld8/p;.O:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa220.  call temp:= `a0`(v1) @signature `Ld8/p;.a0:()Z` @kind virtual;
  #L2fa226.  v0:= temp;
  #L2fa228.  if v0 == 0 then goto L2fa23e;
  #L2fa22c.  call temp:= `S`(v1) @signature `Ld8/p;.S:()Ljava/lang/Number;` @kind virtual;
  #L2fa232.  v0:= temp @kind object;
  #L2fa234.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L2fa23a.  v0:= temp;
  #L2fa23c.  goto L2fa24e;
  #L2fa23e.  call temp:= `l`(v1) @signature `Ld8/p;.l:()Ljava/lang/String;` @kind virtual;
  #L2fa244.  v0:= temp @kind object;
  #L2fa246.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L2fa24c.  v0:= temp;
  #L2fa24e.  return v0;
}
procedure `long` `Q`(`d8.p` v2 @kind this) @signature `Ld8/p;.Q:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fa364.  call temp:= `a0`(v2) @signature `Ld8/p;.a0:()Z` @kind virtual;
  #L2fa36a.  v0:= temp;
  #L2fa36c.  if v0 == 0 then goto L2fa382;
  #L2fa370.  call temp:= `S`(v2) @signature `Ld8/p;.S:()Ljava/lang/Number;` @kind virtual;
  #L2fa376.  v0:= temp @kind object;
  #L2fa378.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L2fa37e.  v0:= temp @kind wide;
  #L2fa380.  goto L2fa392;
  #L2fa382.  call temp:= `l`(v2) @signature `Ld8/p;.l:()Ljava/lang/String;` @kind virtual;
  #L2fa388.  v0:= temp @kind object;
  #L2fa38a.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L2fa390.  v0:= temp @kind wide;
  #L2fa392.  return v0 @kind wide;
}
procedure `java.lang.Number` `S`(`d8.p` v2 @kind this) @signature `Ld8/p;.S:()Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fa2d8.  v0:= v2.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa2dc.  v1:= instanceof @variable v0 @type ^`java.lang.String` @kind boolean;
  #L2fa2e0.  if v1 == 0 then goto L2fa2f4;
  #L2fa2e4.  v1:= new `f8.g`;
  #L2fa2e8.  v0:= (`java.lang.String`) v0 @kind object;
  #L2fa2ec.  call `<init>`(v1, v0) @signature `Lf8/g;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fa2f2.  goto L2fa2fa;
  #L2fa2f4.  v1:= v0 @kind object;
  #L2fa2f6.  v1:= (`java.lang.Number`) v1 @kind object;
  #L2fa2fa.  return v1 @kind object;
}
procedure `boolean` `T`(`d8.p` v1 @kind this) @signature `Ld8/p;.T:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa13c.  v0:= v1.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa140.  v0:= instanceof @variable v0 @type ^`java.lang.Boolean` @kind boolean;
  #L2fa144.  return v0;
}
procedure `boolean` `a0`(`d8.p` v1 @kind this) @signature `Ld8/p;.a0:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa1a8.  v0:= v1.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa1ac.  v0:= instanceof @variable v0 @type ^`java.lang.Number` @kind boolean;
  #L2fa1b0.  return v0;
}
procedure `boolean` `b0`(`d8.p` v1 @kind this) @signature `Ld8/p;.b0:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa1c4.  v0:= v1.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa1c8.  v0:= instanceof @variable v0 @type ^`java.lang.String` @kind boolean;
  #L2fa1cc.  return v0;
}
procedure `boolean` `equals`(`d8.p` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Ld8/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2f9ffc.  v0:= 1I;
  #L2f9ffe.  if v6 != v7 then goto L2fa004;
  #L2fa002.  return v0;
  #L2fa004.  v1:= 0I;
  #L2fa006.  if v7 == 0 then goto L2fa0e8;
  #L2fa00a.  v2:= constclass @type ^`d8.p` @kind object;
  #L2fa00e.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2fa014.  v3:= temp @kind object;
  #L2fa016.  if v2 == v3 then goto L2fa01c;
  #L2fa01a.  goto L2fa0e8;
  #L2fa01c.  v7:= (`d8.p`) v7 @kind object;
  #L2fa020.  v2:= v6.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa024.  if v2 != 0 then goto L2fa036;
  #L2fa028.  v7:= v7.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa02c.  if v7 != 0 then goto L2fa032;
  #L2fa030.  goto L2fa034;
  #L2fa032.  v0:= 0I;
  #L2fa034.  return v0;
  #L2fa036.  call temp:= `Y`(v6) @signature `Ld8/p;.Y:(Ld8/p;)Z` @kind static;
  #L2fa03c.  v2:= temp;
  #L2fa03e.  if v2 == 0 then goto L2fa07c;
  #L2fa042.  call temp:= `Y`(v7) @signature `Ld8/p;.Y:(Ld8/p;)Z` @kind static;
  #L2fa048.  v2:= temp;
  #L2fa04a.  if v2 == 0 then goto L2fa07c;
  #L2fa04e.  call temp:= `S`(v6) @signature `Ld8/p;.S:()Ljava/lang/Number;` @kind virtual;
  #L2fa054.  v2:= temp @kind object;
  #L2fa056.  call temp:= `longValue`(v2) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L2fa05c.  v2:= temp @kind wide;
  #L2fa05e.  call temp:= `S`(v7) @signature `Ld8/p;.S:()Ljava/lang/Number;` @kind virtual;
  #L2fa064.  v7:= temp @kind object;
  #L2fa066.  call temp:= `longValue`(v7) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L2fa06c.  v4:= temp @kind wide;
  #L2fa06e.  v7:= lcmp(v2, v4);
  #L2fa072.  if v7 != 0 then goto L2fa078;
  #L2fa076.  goto L2fa07a;
  #L2fa078.  v0:= 0I;
  #L2fa07a.  return v0;
  #L2fa07c.  v2:= v6.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa080.  v3:= instanceof @variable v2 @type ^`java.lang.Number` @kind boolean;
  #L2fa084.  if v3 == 0 then goto L2fa0da;
  #L2fa088.  v3:= v7.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa08c.  v3:= instanceof @variable v3 @type ^`java.lang.Number` @kind boolean;
  #L2fa090.  if v3 == 0 then goto L2fa0da;
  #L2fa094.  call temp:= `S`(v6) @signature `Ld8/p;.S:()Ljava/lang/Number;` @kind virtual;
  #L2fa09a.  v2:= temp @kind object;
  #L2fa09c.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L2fa0a2.  v2:= temp @kind wide;
  #L2fa0a4.  call temp:= `S`(v7) @signature `Ld8/p;.S:()Ljava/lang/Number;` @kind virtual;
  #L2fa0aa.  v7:= temp @kind object;
  #L2fa0ac.  call temp:= `doubleValue`(v7) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L2fa0b2.  v4:= temp @kind wide;
  #L2fa0b4.  v7:= dcmpl(v2, v4);
  #L2fa0b8.  if v7 == 0 then goto L2fa0d8;
  #L2fa0bc.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2fa0c2.  v7:= temp;
  #L2fa0c4.  if v7 == 0 then goto L2fa0d6;
  #L2fa0c8.  call temp:= `isNaN`(v4) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2fa0ce.  v7:= temp;
  #L2fa0d0.  if v7 == 0 then goto L2fa0d6;
  #L2fa0d4.  goto L2fa0d8;
  #L2fa0d6.  v0:= 0I;
  #L2fa0d8.  return v0;
  #L2fa0da.  v7:= v7.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa0de.  call temp:= `equals`(v2, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fa0e4.  v7:= temp;
  #L2fa0e6.  return v7;
  #L2fa0e8.  return v1;
}
procedure `int` `hashCode`(`d8.p` v4 @kind this) @signature `Ld8/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fa260.  v0:= v4.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa264.  if v0 != 0 then goto L2fa26e;
  #L2fa268.  v0:= 31I;
  #L2fa26c.  return v0;
  #L2fa26e.  call temp:= `Y`(v4) @signature `Ld8/p;.Y:(Ld8/p;)Z` @kind static;
  #L2fa274.  v0:= temp;
  #L2fa276.  v1:= 32I;
  #L2fa27a.  if v0 == 0 then goto L2fa298;
  #L2fa27e.  call temp:= `S`(v4) @signature `Ld8/p;.S:()Ljava/lang/Number;` @kind virtual;
  #L2fa284.  v0:= temp @kind object;
  #L2fa286.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L2fa28c.  v2:= temp @kind wide;
  #L2fa28e.  v0:= v2 ^>> v1 @kind long;
  #L2fa292.  v0:= v0 ^~ v2 @kind long;
  #L2fa294.  v1:= (`int`) v0 @kind l2i;
  #L2fa296.  return v1;
  #L2fa298.  v0:= v4.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa29c.  v2:= instanceof @variable v0 @type ^`java.lang.Number` @kind boolean;
  #L2fa2a0.  if v2 == 0 then goto L2fa2be;
  #L2fa2a4.  call temp:= `S`(v4) @signature `Ld8/p;.S:()Ljava/lang/Number;` @kind virtual;
  #L2fa2aa.  v0:= temp @kind object;
  #L2fa2ac.  call temp:= `doubleValue`(v0) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L2fa2b2.  v2:= temp @kind wide;
  #L2fa2b4.  call temp:= `doubleToLongBits`(v2) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L2fa2ba.  v2:= temp @kind wide;
  #L2fa2bc.  goto L2fa28e;
  #L2fa2be.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2fa2c4.  v0:= temp;
  #L2fa2c6.  return v0;
}
procedure `java.lang.String` `l`(`d8.p` v1 @kind this) @signature `Ld8/p;.l:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa30c.  call temp:= `a0`(v1) @signature `Ld8/p;.a0:()Z` @kind virtual;
  #L2fa312.  v0:= temp;
  #L2fa314.  if v0 == 0 then goto L2fa32a;
  #L2fa318.  call temp:= `S`(v1) @signature `Ld8/p;.S:()Ljava/lang/Number;` @kind virtual;
  #L2fa31e.  v0:= temp @kind object;
  #L2fa320.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fa326.  v0:= temp @kind object;
  #L2fa328.  return v0 @kind object;
  #L2fa32a.  call temp:= `T`(v1) @signature `Ld8/p;.T:()Z` @kind virtual;
  #L2fa330.  v0:= temp;
  #L2fa332.  if v0 == 0 then goto L2fa348;
  #L2fa336.  v0:= v1.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa33a.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L2fa33e.  call temp:= `toString`(v0) @signature `Ljava/lang/Boolean;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fa344.  v0:= temp @kind object;
  #L2fa346.  return v0 @kind object;
  #L2fa348.  v0:= v1.`d8.p.a` @type ^`java.lang.Object` @kind object;
  #L2fa34c.  v0:= (`java.lang.String`) v0 @kind object;
  #L2fa350.  return v0 @kind object;
}
