record `pc.d` @kind class @AccessFlag PUBLIC_FINAL extends `javax.net.ssl.HostnameVerifier` @kind interface {
}
global `pc.d` `@@pc.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lpc/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L40c010.  v0:= new `pc.d`;
  #L40c014.  call `<init>`(v0) @signature `Lpc/d;.<init>:()V` @kind direct;
  #L40c01a.  `@@pc.d.a` @type ^`pc.d` := v0 @kind object;
  #L40c01e.  return @kind void;
}
procedure `void` `<init>`(`pc.d` v0 @kind this) @signature `Lpc/d;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L40c030.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40c036.  return @kind void;
}
procedure `java.util.List` `a`(`java.security.cert.X509Certificate` v4 @kind object) @signature `Lpc/d;.a:(Ljava/security/cert/X509Certificate;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40bf04.  v0:= 7I;
  #L40bf06.  call temp:= `b`(v4, v0) @signature `Lpc/d;.b:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L40bf0c.  v0:= temp @kind object;
  #L40bf0e.  v1:= 2I;
  #L40bf10.  call temp:= `b`(v4, v1) @signature `Lpc/d;.b:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L40bf16.  v4:= temp @kind object;
  #L40bf18.  v1:= new `java.util.ArrayList`;
  #L40bf1c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L40bf22.  v2:= temp;
  #L40bf24.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L40bf2a.  v3:= temp;
  #L40bf2c.  v2:= v2 + v3 @kind int;
  #L40bf2e.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L40bf34.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L40bf3a.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L40bf40.  return v1 @kind object;
}
procedure `java.util.List` `b`(`java.security.cert.X509Certificate` v4 @kind object, `int` v5 ) @signature `Lpc/d;.b:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40bf54.  v0:= new `java.util.ArrayList`;
  #L40bf58.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L40bf5e.  call temp:= `getSubjectAlternativeNames`(v4) @signature `Ljava/security/cert/X509Certificate;.getSubjectAlternativeNames:()Ljava/util/Collection;` @kind virtual;
  #L40bf64.  v4:= temp @kind object;
  #L40bf66.  if v4 != 0 then goto L40bf74;
  #L40bf6a.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L40bf70.  v4:= temp @kind object;
  #L40bf72.  return v4 @kind object;
  #L40bf74.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40bf7a.  v4:= temp @kind object;
  #L40bf7c.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40bf82.  v1:= temp;
  #L40bf84.  if v1 == 0 then goto L40bfe2;
  #L40bf88.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40bf8e.  v1:= temp @kind object;
  #L40bf90.  v1:= (`java.util.List`) v1 @kind object;
  #L40bf94.  if v1 == 0 then goto L40bf7c;
  #L40bf98.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L40bf9e.  v2:= temp;
  #L40bfa0.  v3:= 2I;
  #L40bfa2.  if v2 >= v3 then goto L40bfa8;
  #L40bfa6.  goto L40bf7c;
  #L40bfa8.  v2:= 0I;
  #L40bfaa.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40bfb0.  v2:= temp @kind object;
  #L40bfb2.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L40bfb6.  if v2 != 0 then goto L40bfbc;
  #L40bfba.  goto L40bf7c;
  #L40bfbc.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L40bfc2.  v2:= temp;
  #L40bfc4.  if v2 != v5 then goto L40bf7c;
  #L40bfc8.  v2:= 1I;
  #L40bfca.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40bfd0.  v1:= temp @kind object;
  #L40bfd2.  v1:= (`java.lang.String`) v1 @kind object;
  #L40bfd6.  if v1 == 0 then goto L40bf7c;
  #L40bfda.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40bfe0.  goto L40bf7c;
  #L40bfe2.  return v0 @kind object;
  #L40bfe4.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L40bfea.  v4:= temp @kind object;
  #L40bfec.  return v4 @kind object;
  catch `java.security.cert.CertificateParsingException` @[L40bf5e..L40bfe0] goto L40bfe4;
}
procedure `boolean` `e`(`pc.d` v1 @kind this, `java.lang.String` v2 @kind object, `java.security.cert.X509Certificate` v3 @kind object) @signature `Lpc/d;.e:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L40be58.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L40be5c.  call temp:= `toLowerCase`(v2, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L40be62.  v2:= temp @kind object;
  #L40be64.  v0:= 2I;
  #L40be66.  call temp:= `b`(v3, v0) @signature `Lpc/d;.b:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L40be6c.  v3:= temp @kind object;
  #L40be6e.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40be74.  v3:= temp @kind object;
  #L40be76.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40be7c.  v0:= temp;
  #L40be7e.  if v0 == 0 then goto L40be9e;
  #L40be82.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40be88.  v0:= temp @kind object;
  #L40be8a.  v0:= (`java.lang.String`) v0 @kind object;
  #L40be8e.  call temp:= `d`(v1, v2, v0) @signature `Lpc/d;.d:(Ljava/lang/String;Ljava/lang/String;)Z` @kind virtual;
  #L40be94.  v0:= temp;
  #L40be96.  if v0 == 0 then goto L40be76;
  #L40be9a.  v2:= 1I;
  #L40be9c.  return v2;
  #L40be9e.  v2:= 0I;
  #L40bea0.  return v2;
}
procedure `boolean` `f`(`pc.d` v4 @kind this, `java.lang.String` v5 @kind object, `java.security.cert.X509Certificate` v6 @kind object) @signature `Lpc/d;.f:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40beb4.  v0:= 7I;
  #L40beb6.  call temp:= `b`(v6, v0) @signature `Lpc/d;.b:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L40bebc.  v6:= temp @kind object;
  #L40bebe.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L40bec4.  v0:= temp;
  #L40bec6.  v1:= 0I;
  #L40bec8.  v2:= 0I;
  #L40beca.  if v2 >= v0 then goto L40bef0;
  #L40bece.  call temp:= `get`(v6, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40bed4.  v3:= temp @kind object;
  #L40bed6.  v3:= (`java.lang.String`) v3 @kind object;
  #L40beda.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L40bee0.  v3:= temp;
  #L40bee2.  if v3 == 0 then goto L40beea;
  #L40bee6.  v5:= 1I;
  #L40bee8.  return v5;
  #L40beea.  v2:= v2 + 1;
  #L40beee.  goto L40beca;
  #L40bef0.  return v1;
}
procedure `boolean` `c`(`pc.d` v1 @kind this, `java.lang.String` v2 @kind object, `java.security.cert.X509Certificate` v3 @kind object) @signature `Lpc/d;.c:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bc6c.  call temp:= `H`(v2) @signature `Lhc/c;.H:(Ljava/lang/String;)Z` @kind static;
  #L40bc72.  v0:= temp;
  #L40bc74.  if v0 == 0 then goto L40bc82;
  #L40bc78.  call temp:= `f`(v1, v2, v3) @signature `Lpc/d;.f:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L40bc7e.  v2:= temp;
  #L40bc80.  goto L40bc8a;
  #L40bc82.  call temp:= `e`(v1, v2, v3) @signature `Lpc/d;.e:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L40bc88.  v2:= temp;
  #L40bc8a.  return v2;
}
procedure `boolean` `d`(`pc.d` v7 @kind this, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object) @signature `Lpc/d;.d:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40bcdc.  v0:= 0I;
  #L40bcde.  if v8 == 0 then goto L40be44;
  #L40bce2.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L40bce8.  v1:= temp;
  #L40bcea.  if v1 == 0 then goto L40be44;
  #L40bcee.  v1:= "." @kind object;
  #L40bcf2.  call temp:= `startsWith`(v8, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L40bcf8.  v2:= temp;
  #L40bcfa.  if v2 != 0 then goto L40be44;
  #L40bcfe.  v2:= ".." @kind object;
  #L40bd02.  call temp:= `endsWith`(v8, v2) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L40bd08.  v3:= temp;
  #L40bd0a.  if v3 == 0 then goto L40bd12;
  #L40bd0e.  goto L40be44;
  #L40bd12.  if v9 == 0 then goto L40be44;
  #L40bd16.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L40bd1c.  v3:= temp;
  #L40bd1e.  if v3 == 0 then goto L40be44;
  #L40bd22.  call temp:= `startsWith`(v9, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L40bd28.  v3:= temp;
  #L40bd2a.  if v3 != 0 then goto L40be44;
  #L40bd2e.  call temp:= `endsWith`(v9, v2) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L40bd34.  v2:= temp;
  #L40bd36.  if v2 == 0 then goto L40bd3e;
  #L40bd3a.  goto L40be44;
  #L40bd3e.  call temp:= `endsWith`(v8, v1) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L40bd44.  v2:= temp;
  #L40bd46.  v3:= 46I;
  #L40bd4a.  if v2 != 0 then goto L40bd6c;
  #L40bd4e.  v2:= new `java.lang.StringBuilder`;
  #L40bd52.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40bd58.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40bd5e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L40bd64.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40bd6a.  v8:= temp @kind object;
  #L40bd6c.  call temp:= `endsWith`(v9, v1) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L40bd72.  v1:= temp;
  #L40bd74.  if v1 != 0 then goto L40bd96;
  #L40bd78.  v1:= new `java.lang.StringBuilder`;
  #L40bd7c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40bd82.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40bd88.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L40bd8e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40bd94.  v9:= temp @kind object;
  #L40bd96.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L40bd9a.  call temp:= `toLowerCase`(v9, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L40bda0.  v9:= temp @kind object;
  #L40bda2.  v1:= "*" @kind object;
  #L40bda6.  call temp:= `contains`(v9, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L40bdac.  v1:= temp;
  #L40bdae.  if v1 != 0 then goto L40bdbc;
  #L40bdb2.  call temp:= `equals`(v8, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L40bdb8.  v8:= temp;
  #L40bdba.  return v8;
  #L40bdbc.  v1:= "*." @kind object;
  #L40bdc0.  call temp:= `startsWith`(v9, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L40bdc6.  v2:= temp;
  #L40bdc8.  if v2 == 0 then goto L40be44;
  #L40bdcc.  v2:= 42I;
  #L40bdd0.  v4:= 1I;
  #L40bdd2.  call temp:= `indexOf`(v9, v2, v4) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L40bdd8.  v2:= temp;
  #L40bdda.  v5:= -1I;
  #L40bddc.  if v2 == v5 then goto L40bde2;
  #L40bde0.  goto L40be44;
  #L40bde2.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L40bde8.  v2:= temp;
  #L40bdea.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L40bdf0.  v6:= temp;
  #L40bdf2.  if v2 >= v6 then goto L40bdf8;
  #L40bdf6.  return v0;
  #L40bdf8.  call temp:= `equals`(v1, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L40bdfe.  v1:= temp;
  #L40be00.  if v1 == 0 then goto L40be06;
  #L40be04.  return v0;
  #L40be06.  call temp:= `substring`(v9, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L40be0c.  v9:= temp @kind object;
  #L40be0e.  call temp:= `endsWith`(v8, v9) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L40be14.  v1:= temp;
  #L40be16.  if v1 != 0 then goto L40be1c;
  #L40be1a.  return v0;
  #L40be1c.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L40be22.  v1:= temp;
  #L40be24.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L40be2a.  v9:= temp;
  #L40be2c.  v1:= v1 - v9 @kind int;
  #L40be2e.  if v1 <= 0 then goto L40be42;
  #L40be32.  v1:= v1 - v4 @kind int;
  #L40be34.  call temp:= `lastIndexOf`(v8, v3, v1) @signature `Ljava/lang/String;.lastIndexOf:(II)I` @kind virtual;
  #L40be3a.  v8:= temp;
  #L40be3c.  if v8 == v5 then goto L40be42;
  #L40be40.  return v0;
  #L40be42.  return v4;
  #L40be44.  return v0;
}
procedure `boolean` `verify`(`pc.d` v1 @kind this, `java.lang.String` v2 @kind object, `javax.net.ssl.SSLSession` v3 @kind object) @signature `Lpc/d;.verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bc9c.  v0:= 0I;
  #L40bc9e.  call temp:= `getPeerCertificates`(v3) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L40bca4.  v3:= temp @kind object;
  #L40bca6.  v3:= v3[v0] @kind object;
  #L40bcaa.  v3:= (`java.security.cert.X509Certificate`) v3 @kind object;
  #L40bcae.  call temp:= `c`(v1, v2, v3) @signature `Lpc/d;.c:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind virtual;
  #L40bcb4.  v2:= temp;
  #L40bcb6.  return v2;
  #L40bcb8.  return v0;
  catch `javax.net.ssl.SSLException` @[L40bc9e..L40bcb6] goto L40bcb8;
}
