record `pc.b` @kind class @AccessFlag PUBLIC_FINAL extends `pc.e` @kind interface {
  `java.util.Map` `pc.b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`pc.b` v6 @kind this, `java.security.cert.X509Certificate`[] v7 @kind object) @signature `Lpc/b;.<init>:([Ljava/security/cert/X509Certificate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40bbc0.  call `<init>`(v6) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40bbc6.  v0:= new `java.util.LinkedHashMap`;
  #L40bbca.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L40bbd0.  v6.`pc.b.a` @type ^`java.util.Map` := v0 @kind object;
  #L40bbd4.  v0:= length @variable v7;
  #L40bbd6.  v1:= 0I;
  #L40bbd8.  if v1 >= v0 then goto L40bc1e;
  #L40bbdc.  v2:= v7[v1] @kind object;
  #L40bbe0.  call temp:= `getSubjectX500Principal`(v2) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L40bbe6.  v3:= temp @kind object;
  #L40bbe8.  v4:= v6.`pc.b.a` @type ^`java.util.Map` @kind object;
  #L40bbec.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40bbf2.  v4:= temp @kind object;
  #L40bbf4.  v4:= (`java.util.Set`) v4 @kind object;
  #L40bbf8.  if v4 != 0 then goto L40bc12;
  #L40bbfc.  v4:= new `java.util.LinkedHashSet`;
  #L40bc00.  v5:= 1I;
  #L40bc02.  call `<init>`(v4, v5) @signature `Ljava/util/LinkedHashSet;.<init>:(I)V` @kind direct;
  #L40bc08.  v5:= v6.`pc.b.a` @type ^`java.util.Map` @kind object;
  #L40bc0c.  call temp:= `put`(v5, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40bc12.  call temp:= `add`(v4, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40bc18.  v1:= v1 + 1;
  #L40bc1c.  goto L40bbd8;
  #L40bc1e.  return @kind void;
}
procedure `java.security.cert.X509Certificate` `a`(`pc.b` v4 @kind this, `java.security.cert.X509Certificate` v5 @kind object) @signature `Lpc/b;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40bb48.  call temp:= `getIssuerX500Principal`(v5) @signature `Ljava/security/cert/X509Certificate;.getIssuerX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L40bb4e.  v0:= temp @kind object;
  #L40bb50.  v1:= v4.`pc.b.a` @type ^`java.util.Map` @kind object;
  #L40bb54.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40bb5a.  v0:= temp @kind object;
  #L40bb5c.  v0:= (`java.util.Set`) v0 @kind object;
  #L40bb60.  v1:= 0I;
  #L40bb62.  if v0 != 0 then goto L40bb68;
  #L40bb66.  return v1 @kind object;
  #L40bb68.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40bb6e.  v0:= temp @kind object;
  #L40bb70.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40bb76.  v2:= temp;
  #L40bb78.  if v2 == 0 then goto L40bb9c;
  #L40bb7c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40bb82.  v2:= temp @kind object;
  #L40bb84.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L40bb88.  call temp:= `getPublicKey`(v2) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L40bb8e.  v3:= temp @kind object;
  #L40bb90.  call `verify`(v5, v3) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #L40bb96.  return v2 @kind object;
  #L40bb98.  
  #L40bb9a.  goto L40bb70;
  #L40bb9c.  return v1 @kind object;
  catch `java.lang.Exception` @[L40bb90..L40bb96] goto L40bb98;
}
procedure `boolean` `equals`(`pc.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lpc/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40bae8.  v0:= 1I;
  #L40baea.  if v3 != v2 then goto L40baf0;
  #L40baee.  return v0;
  #L40baf0.  v1:= instanceof @variable v3 @type ^`pc.b` @kind boolean;
  #L40baf4.  if v1 == 0 then goto L40bb12;
  #L40baf8.  v3:= (`pc.b`) v3 @kind object;
  #L40bafc.  v3:= v3.`pc.b.a` @type ^`java.util.Map` @kind object;
  #L40bb00.  v1:= v2.`pc.b.a` @type ^`java.util.Map` @kind object;
  #L40bb04.  call temp:= `equals`(v3, v1) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L40bb0a.  v3:= temp;
  #L40bb0c.  if v3 == 0 then goto L40bb12;
  #L40bb10.  goto L40bb14;
  #L40bb12.  v0:= 0I;
  #L40bb14.  return v0;
}
procedure `int` `hashCode`(`pc.b` v1 @kind this) @signature `Lpc/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bb28.  v0:= v1.`pc.b.a` @type ^`java.util.Map` @kind object;
  #L40bb2c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L40bb32.  v0:= temp;
  #L40bb34.  return v0;
}
