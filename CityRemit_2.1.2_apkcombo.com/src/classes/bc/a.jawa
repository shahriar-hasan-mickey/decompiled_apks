record `bc.a` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.internal.u` @kind interface {
}
procedure `void` `<init>`(`bc.a` v0 @kind this) @signature `Lbc/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1f31ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f31b2.  return @kind void;
}
procedure `java.lang.String` `a`(`bc.a` v1 @kind this) @signature `Lbc/a;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f3194.  v0:= "For tests Dispatchers.setMain from kotlinx-coroutines-test module can be used" @kind object;
  #L1f3198.  return v0 @kind object;
}
procedure `ac.b2` `b`(`bc.a` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lbc/a;.b:(Ljava/util/List;)Lac/b2;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f3134.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L1f313a.  v4:= temp @kind object;
  #L1f313c.  if v4 == 0 then goto L1f315a;
  #L1f3140.  v0:= new `bc.c`;
  #L1f3144.  v1:= 1I;
  #L1f3146.  call temp:= `a`(v4, v1) @signature `Lbc/e;.a:(Landroid/os/Looper;Z)Landroid/os/Handler;` @kind static;
  #L1f314c.  v4:= temp @kind object;
  #L1f314e.  v1:= 2I;
  #L1f3150.  v2:= 0I;
  #L1f3152.  call `<init>`(v0, v4, v2, v1, v2) @signature `Lbc/c;.<init>:(Landroid/os/Handler;Ljava/lang/String;ILkotlin/jvm/internal/g;)V` @kind direct;
  #L1f3158.  return v0 @kind object;
  #L1f315a.  v4:= new `java.lang.IllegalStateException`;
  #L1f315e.  v0:= "The main looper is not available" @kind object;
  #L1f3162.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f3168.  throw v4;
}
procedure `int` `c`(`bc.a` v1 @kind this) @signature `Lbc/a;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f317c.  v0:= 1073741823I;
  #L1f3182.  return v0;
}
