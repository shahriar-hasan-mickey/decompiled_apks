record `bc.b` @kind class @AccessFlag PUBLIC_FINAL extends `mb.a` @kind class, `ac.e0` @kind interface {
  `java.lang.Object` `bc.b._preHandler` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`bc.b` v1 @kind this) @signature `Lbc/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1f323c.  v0:= `@@ac.e0.b` @type ^`ac.e0$a` @kind object;
  #L1f3240.  call `<init>`(v1, v0) @signature `Lmb/a;.<init>:(Lmb/g$c;)V` @kind direct;
  #L1f3246.  v1.`bc.b._preHandler` @type ^`java.lang.Object` := v1 @kind object;
  #L1f324a.  return @kind void;
}
procedure `java.lang.reflect.Method` `a0`(`bc.b` v5 @kind this) @signature `Lbc/b;.a0:()Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f31c4.  v0:= v5.`bc.b._preHandler` @type ^`java.lang.Object` @kind object;
  #L1f31c8.  if v0 == v5 then goto L1f31d2;
  #L1f31cc.  v0:= (`java.lang.reflect.Method`) v0 @kind object;
  #L1f31d0.  return v0 @kind object;
  #L1f31d2.  v0:= 0I;
  #L1f31d4.  v1:= constclass @type ^`java.lang.Thread` @kind object;
  #L1f31d8.  v2:= "getUncaughtExceptionPreHandler" @kind object;
  #L1f31dc.  v3:= 0I;
  #L1f31de.  v4:= new `java.lang.Class`[v3];
  #L1f31e2.  call temp:= `getDeclaredMethod`(v1, v2, v4) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L1f31e8.  v1:= temp @kind object;
  #L1f31ea.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L1f31f0.  v2:= temp;
  #L1f31f2.  call temp:= `isPublic`(v2) @signature `Ljava/lang/reflect/Modifier;.isPublic:(I)Z` @kind static;
  #L1f31f8.  v2:= temp;
  #L1f31fa.  if v2 == 0 then goto L1f3214;
  #L1f31fe.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L1f3204.  v2:= temp;
  #L1f3206.  call temp:= `isStatic`(v2) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L1f320c.  v2:= temp;
  #L1f320e.  if v2 == 0 then goto L1f3214;
  #L1f3212.  v3:= 1I;
  #L1f3214.  if v3 == 0 then goto L1f321a;
  #L1f3218.  v0:= v1 @kind object;
  #L1f321a.  v5.`bc.b._preHandler` @type ^`java.lang.Object` := v0 @kind object;
  #L1f321e.  return v0 @kind object;
  catch `java.lang.Throwable` @[L1f31d4..L1f320e] goto L1f321a;
}
procedure `void` `E`(`bc.b` v2 @kind this, `mb.g` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lbc/b;.E:(Lmb/g;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f325c.  v3:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L1f3260.  v0:= 0I;
  #L1f3262.  v1:= 26I;
  #L1f3266.  if v1 > v3 then goto L1f3276;
  #L1f326a.  v1:= 28I;
  #L1f326e.  if v3 >= v1 then goto L1f3276;
  #L1f3272.  v3:= 1I;
  #L1f3274.  goto L1f3278;
  #L1f3276.  v3:= 0I;
  #L1f3278.  if v3 == 0 then goto L1f32ba;
  #L1f327c.  call temp:= `a0`(v2) @signature `Lbc/b;.a0:()Ljava/lang/reflect/Method;` @kind direct;
  #L1f3282.  v3:= temp @kind object;
  #L1f3284.  v1:= 0I;
  #L1f3286.  if v3 == 0 then goto L1f3298;
  #L1f328a.  v0:= new `java.lang.Object`[v0];
  #L1f328e.  call temp:= `invoke`(v3, v1, v0) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1f3294.  v3:= temp @kind object;
  #L1f3296.  goto L1f329a;
  #L1f3298.  v3:= v1 @kind object;
  #L1f329a.  v0:= instanceof @variable v3 @type ^`java.lang.Thread$UncaughtExceptionHandler` @kind boolean;
  #L1f329e.  if v0 == 0 then goto L1f32a8;
  #L1f32a2.  v1:= v3 @kind object;
  #L1f32a4.  v1:= (`java.lang.Thread$UncaughtExceptionHandler`) v1 @kind object;
  #L1f32a8.  if v1 == 0 then goto L1f32ba;
  #L1f32ac.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1f32b2.  v3:= temp @kind object;
  #L1f32b4.  call `uncaughtException`(v1, v3, v4) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L1f32ba.  return @kind void;
}
