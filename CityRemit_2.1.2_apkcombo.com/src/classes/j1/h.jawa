record `j1.h` @kind class @AccessFlag PUBLIC_FINAL {
  `h1.b` `j1.h.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `j1.h.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`j1.h` v1 @kind this, `h1.b` v2 @kind object, `byte`[] v3 @kind object) @signature `Lj1/h;.<init>:(Lh1/b;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L390aa8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L390aae.  v0:= "encoding is null" @kind object;
  #L390ab2.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L390ab8.  v0:= "bytes is null" @kind object;
  #L390abc.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L390ac2.  v1.`j1.h.a` @type ^`h1.b` := v2 @kind object;
  #L390ac6.  v1.`j1.h.b` @type ^`byte`[] := v3 @kind object;
  #L390aca.  return @kind void;
}
procedure `byte`[] `a`(`j1.h` v1 @kind this) @signature `Lj1/h;.a:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3909fc.  v0:= v1.`j1.h.b` @type ^`byte`[] @kind object;
  #L390a00.  return v0 @kind object;
}
procedure `h1.b` `b`(`j1.h` v1 @kind this) @signature `Lj1/h;.b:()Lh1/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L390a14.  v0:= v1.`j1.h.a` @type ^`h1.b` @kind object;
  #L390a18.  return v0 @kind object;
}
procedure `boolean` `equals`(`j1.h` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lj1/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3909ac.  if v3 != v4 then goto L3909b4;
  #L3909b0.  v4:= 1I;
  #L3909b2.  return v4;
  #L3909b4.  v0:= instanceof @variable v4 @type ^`j1.h` @kind boolean;
  #L3909b8.  v1:= 0I;
  #L3909ba.  if v0 != 0 then goto L3909c0;
  #L3909be.  return v1;
  #L3909c0.  v4:= (`j1.h`) v4 @kind object;
  #L3909c4.  v0:= v3.`j1.h.a` @type ^`h1.b` @kind object;
  #L3909c8.  v2:= v4.`j1.h.a` @type ^`h1.b` @kind object;
  #L3909cc.  call temp:= `equals`(v0, v2) @signature `Lh1/b;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3909d2.  v0:= temp;
  #L3909d4.  if v0 != 0 then goto L3909da;
  #L3909d8.  return v1;
  #L3909da.  v0:= v3.`j1.h.b` @type ^`byte`[] @kind object;
  #L3909de.  v4:= v4.`j1.h.b` @type ^`byte`[] @kind object;
  #L3909e2.  call temp:= `equals`(v0, v4) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L3909e8.  v4:= temp;
  #L3909ea.  return v4;
}
procedure `int` `hashCode`(`j1.h` v2 @kind this) @signature `Lj1/h;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L390a2c.  v0:= v2.`j1.h.a` @type ^`h1.b` @kind object;
  #L390a30.  call temp:= `hashCode`(v0) @signature `Lh1/b;.hashCode:()I` @kind virtual;
  #L390a36.  v0:= temp;
  #L390a38.  v1:= 1000003I;
  #L390a3e.  v0:= v0 ^~ v1 @kind int;
  #L390a40.  v0:= v0 * v1 @kind int;
  #L390a44.  v1:= v2.`j1.h.b` @type ^`byte`[] @kind object;
  #L390a48.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L390a4e.  v1:= temp;
  #L390a50.  v0:= v0 ^~ v1 @kind int;
  #L390a52.  return v0;
}
procedure `java.lang.String` `toString`(`j1.h` v2 @kind this) @signature `Lj1/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L390a64.  v0:= new `java.lang.StringBuilder`;
  #L390a68.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L390a6e.  v1:= "EncodedPayload{encoding=" @kind object;
  #L390a72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L390a78.  v1:= v2.`j1.h.a` @type ^`h1.b` @kind object;
  #L390a7c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L390a82.  v1:= ", bytes=[...]}" @kind object;
  #L390a86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L390a8c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L390a92.  v0:= temp @kind object;
  #L390a94.  return v0 @kind object;
}
