record `j1.p` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`j1.p` v0 @kind this) @signature `Lj1/p;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L391118.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39111e.  return @kind void;
}
procedure `j1.p$a` `a`() @signature `Lj1/p;.a:()Lj1/p$a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L391088.  v0:= new `j1.d$b`;
  #L39108c.  call `<init>`(v0) @signature `Lj1/d$b;.<init>:()V` @kind direct;
  #L391092.  v1:= `@@h1.d.o` @type ^`h1.d` @kind object;
  #L391096.  call temp:= `d`(v0, v1) @signature `Lj1/d$b;.d:(Lh1/d;)Lj1/p$a;` @kind virtual;
  #L39109c.  v0:= temp @kind object;
  #L39109e.  return v0 @kind object;
}
procedure `java.lang.String` `b`() @signature `Lj1/p;.b:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `c`() @signature `Lj1/p;.c:()[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `h1.d` `d`() @signature `Lj1/p;.d:()Lh1/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `e`(`j1.p` v1 @kind this) @signature `Lj1/p;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L391018.  call temp:= `c`(v1) @signature `Lj1/p;.c:()[B` @kind virtual;
  #L39101e.  v0:= temp @kind object;
  #L391020.  if v0 == 0 then goto L391028;
  #L391024.  v0:= 1I;
  #L391026.  goto L39102a;
  #L391028.  v0:= 0I;
  #L39102a.  return v0;
}
procedure `j1.p` `f`(`j1.p` v2 @kind this, `h1.d` v3 @kind object) @signature `Lj1/p;.f:(Lh1/d;)Lj1/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39103c.  call temp:= `a`() @signature `Lj1/p;.a:()Lj1/p$a;` @kind static;
  #L391042.  v0:= temp @kind object;
  #L391044.  call temp:= `b`(v2) @signature `Lj1/p;.b:()Ljava/lang/String;` @kind virtual;
  #L39104a.  v1:= temp @kind object;
  #L39104c.  call temp:= `b`(v0, v1) @signature `Lj1/p$a;.b:(Ljava/lang/String;)Lj1/p$a;` @kind virtual;
  #L391052.  v0:= temp @kind object;
  #L391054.  call temp:= `d`(v0, v3) @signature `Lj1/p$a;.d:(Lh1/d;)Lj1/p$a;` @kind virtual;
  #L39105a.  v3:= temp @kind object;
  #L39105c.  call temp:= `c`(v2) @signature `Lj1/p;.c:()[B` @kind virtual;
  #L391062.  v0:= temp @kind object;
  #L391064.  call temp:= `c`(v3, v0) @signature `Lj1/p$a;.c:([B)Lj1/p$a;` @kind virtual;
  #L39106a.  v3:= temp @kind object;
  #L39106c.  call temp:= `a`(v3) @signature `Lj1/p$a;.a:()Lj1/p;` @kind virtual;
  #L391072.  v3:= temp @kind object;
  #L391074.  return v3 @kind object;
}
procedure `java.lang.String` `toString`(`j1.p` v3 @kind this) @signature `Lj1/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3910b0.  v0:= 3I;
  #L3910b2.  v0:= new `java.lang.Object`[v0];
  #L3910b6.  call temp:= `b`(v3) @signature `Lj1/p;.b:()Ljava/lang/String;` @kind virtual;
  #L3910bc.  v1:= temp @kind object;
  #L3910be.  v2:= 0I;
  #L3910c0.  v0[v2]:= v1 @kind object;
  #L3910c4.  call temp:= `d`(v3) @signature `Lj1/p;.d:()Lh1/d;` @kind virtual;
  #L3910ca.  v1:= temp @kind object;
  #L3910cc.  v2:= 1I;
  #L3910ce.  v0[v2]:= v1 @kind object;
  #L3910d2.  call temp:= `c`(v3) @signature `Lj1/p;.c:()[B` @kind virtual;
  #L3910d8.  v1:= temp @kind object;
  #L3910da.  v2:= 2I;
  #L3910dc.  if v1 != 0 then goto L3910e6;
  #L3910e0.  v1:= "" @kind object;
  #L3910e4.  goto L3910f6;
  #L3910e6.  call temp:= `c`(v3) @signature `Lj1/p;.c:()[B` @kind virtual;
  #L3910ec.  v1:= temp @kind object;
  #L3910ee.  call temp:= `encodeToString`(v1, v2) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L3910f4.  v1:= temp @kind object;
  #L3910f6.  v0[v2]:= v1 @kind object;
  #L3910fa.  v1:= "TransportContext(%s, %s, %s)" @kind object;
  #L3910fe.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L391104.  v0:= temp @kind object;
  #L391106.  return v0 @kind object;
}
