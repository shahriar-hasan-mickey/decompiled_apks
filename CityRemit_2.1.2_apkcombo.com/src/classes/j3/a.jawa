record `j3.a` @kind class @AccessFlag PUBLIC_FINAL extends `g3.f` @kind class {
  `s3.z` `j3.a.n` @AccessFlag PRIVATE_FINAL;
  `s3.z` `j3.a.o` @AccessFlag PRIVATE_FINAL;
  `j3.a$a` `j3.a.p` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `j3.a.q` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`j3.a` v1 @kind this) @signature `Lj3/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3938b4.  v0:= "PgsDecoder" @kind object;
  #L3938b8.  call `<init>`(v1, v0) @signature `Lg3/f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3938be.  v0:= new `s3.z`;
  #L3938c2.  call `<init>`(v0) @signature `Ls3/z;.<init>:()V` @kind direct;
  #L3938c8.  v1.`j3.a.n` @type ^`s3.z` := v0 @kind object;
  #L3938cc.  v0:= new `s3.z`;
  #L3938d0.  call `<init>`(v0) @signature `Ls3/z;.<init>:()V` @kind direct;
  #L3938d6.  v1.`j3.a.o` @type ^`s3.z` := v0 @kind object;
  #L3938da.  v0:= new `j3.a$a`;
  #L3938de.  call `<init>`(v0) @signature `Lj3/a$a;.<init>:()V` @kind direct;
  #L3938e4.  v1.`j3.a.p` @type ^`j3.a$a` := v0 @kind object;
  #L3938e8.  return @kind void;
}
procedure `void` `C`(`j3.a` v2 @kind this, `s3.z` v3 @kind object) @signature `Lj3/a;.C:(Ls3/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3938fc.  call temp:= `a`(v3) @signature `Ls3/z;.a:()I` @kind virtual;
  #L393902.  v0:= temp;
  #L393904.  if v0 <= 0 then goto L393960;
  #L393908.  call temp:= `h`(v3) @signature `Ls3/z;.h:()I` @kind virtual;
  #L39390e.  v0:= temp;
  #L393910.  v1:= 120I;
  #L393914.  if v0 != v1 then goto L393960;
  #L393918.  v0:= v2.`j3.a.q` @type ^`java.util.zip.Inflater` @kind object;
  #L39391c.  if v0 != 0 then goto L39392e;
  #L393920.  v0:= new `java.util.zip.Inflater`;
  #L393924.  call `<init>`(v0) @signature `Ljava/util/zip/Inflater;.<init>:()V` @kind direct;
  #L39392a.  v2.`j3.a.q` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L39392e.  v0:= v2.`j3.a.o` @type ^`s3.z` @kind object;
  #L393932.  v1:= v2.`j3.a.q` @type ^`java.util.zip.Inflater` @kind object;
  #L393936.  call temp:= `p0`(v3, v0, v1) @signature `Ls3/l0;.p0:(Ls3/z;Ls3/z;Ljava/util/zip/Inflater;)Z` @kind static;
  #L39393c.  v0:= temp;
  #L39393e.  if v0 == 0 then goto L393960;
  #L393942.  v0:= v2.`j3.a.o` @type ^`s3.z` @kind object;
  #L393946.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L39394c.  v0:= temp @kind object;
  #L39394e.  v1:= v2.`j3.a.o` @type ^`s3.z` @kind object;
  #L393952.  call temp:= `f`(v1) @signature `Ls3/z;.f:()I` @kind virtual;
  #L393958.  v1:= temp;
  #L39395a.  call `M`(v3, v0, v1) @signature `Ls3/z;.M:([BI)V` @kind virtual;
  #L393960.  return @kind void;
}
procedure `g3.b` `D`(`s3.z` v5 @kind object, `j3.a$a` v6 @kind object) @signature `Lj3/a;.D:(Ls3/z;Lj3/a$a;)Lg3/b;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3937a4.  call temp:= `f`(v5) @signature `Ls3/z;.f:()I` @kind virtual;
  #L3937aa.  v0:= temp;
  #L3937ac.  call temp:= `C`(v5) @signature `Ls3/z;.C:()I` @kind virtual;
  #L3937b2.  v1:= temp;
  #L3937b4.  call temp:= `I`(v5) @signature `Ls3/z;.I:()I` @kind virtual;
  #L3937ba.  v2:= temp;
  #L3937bc.  call temp:= `e`(v5) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3937c2.  v3:= temp;
  #L3937c4.  v3:= v3 + v2 @kind int;
  #L3937c6.  v4:= 0I;
  #L3937c8.  if v3 <= v0 then goto L3937d4;
  #L3937cc.  call `O`(v5, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3937d2.  return v4 @kind object;
  #L3937d4.  v0:= 128I;
  #L3937d8.  if v1 == v0 then goto L3937fc;
  #L3937dc.  goto L393814;
  #L3937e2.  goto L39380a;
  #L3937e4.  call `c`(v6, v5, v2) @signature `Lj3/a$a;.c:(Lj3/a$a;Ls3/z;I)V` @kind static;
  #L3937ea.  goto L39380a;
  #L3937ec.  call `b`(v6, v5, v2) @signature `Lj3/a$a;.b:(Lj3/a$a;Ls3/z;I)V` @kind static;
  #L3937f2.  goto L39380a;
  #L3937f4.  call `a`(v6, v5, v2) @signature `Lj3/a$a;.a:(Lj3/a$a;Ls3/z;I)V` @kind static;
  #L3937fa.  goto L39380a;
  #L3937fc.  call temp:= `d`(v6) @signature `Lj3/a$a;.d:()Lg3/b;` @kind virtual;
  #L393802.  v4:= temp @kind object;
  #L393804.  call `h`(v6) @signature `Lj3/a$a;.h:()V` @kind virtual;
  #L39380a.  call `O`(v5, v3) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L393810.  return v4 @kind object;
  #L393812.  
  #L393814.  switch v1
                  | 20 => goto L3937f4
                  | 21 => goto L3937ec
                  | 22 => goto L3937e4
                  | else => goto L3937e2;
}
procedure `g3.g` `A`(`j3.a` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lj3/a;.A:([BIZ)Lg3/g;` @AccessFlag PROTECTED {
    temp;

  #L393838.  v3:= v0.`j3.a.n` @type ^`s3.z` @kind object;
  #L39383c.  call `M`(v3, v1, v2) @signature `Ls3/z;.M:([BI)V` @kind virtual;
  #L393842.  v1:= v0.`j3.a.n` @type ^`s3.z` @kind object;
  #L393846.  call `C`(v0, v1) @signature `Lj3/a;.C:(Ls3/z;)V` @kind direct;
  #L39384c.  v1:= v0.`j3.a.p` @type ^`j3.a$a` @kind object;
  #L393850.  call `h`(v1) @signature `Lj3/a$a;.h:()V` @kind virtual;
  #L393856.  v1:= new `java.util.ArrayList`;
  #L39385a.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L393860.  v2:= v0.`j3.a.n` @type ^`s3.z` @kind object;
  #L393864.  call temp:= `a`(v2) @signature `Ls3/z;.a:()I` @kind virtual;
  #L39386a.  v2:= temp;
  #L39386c.  v3:= 3I;
  #L39386e.  if v2 < v3 then goto L39388e;
  #L393872.  v2:= v0.`j3.a.n` @type ^`s3.z` @kind object;
  #L393876.  v3:= v0.`j3.a.p` @type ^`j3.a$a` @kind object;
  #L39387a.  call temp:= `D`(v2, v3) @signature `Lj3/a;.D:(Ls3/z;Lj3/a$a;)Lg3/b;` @kind static;
  #L393880.  v2:= temp @kind object;
  #L393882.  if v2 == 0 then goto L393860;
  #L393886.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L39388c.  goto L393860;
  #L39388e.  v2:= new `j3.b`;
  #L393892.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L393898.  v1:= temp @kind object;
  #L39389a.  call `<init>`(v2, v1) @signature `Lj3/b;.<init>:(Ljava/util/List;)V` @kind direct;
  #L3938a0.  return v2 @kind object;
}
