record `r6.c` @kind class @AccessFlag PUBLIC extends `r6.d` @kind interface {
  `int` `r6.c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`r6.c` v0 @kind this, `int` v1 ) @signature `Lr6/c;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L453dd4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L453dda.  v0.`r6.c.a` @type ^`int` := v1;
  #L453dde.  return @kind void;
}
procedure `boolean` `b`(`java.lang.StackTraceElement`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lr6/c;.b:([Ljava/lang/StackTraceElement;II)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L453cac.  v0:= v7 - v6 @kind int;
  #L453cb0.  v1:= v7 + v0 @kind int;
  #L453cb4.  v2:= length @variable v5;
  #L453cb6.  v3:= 0I;
  #L453cb8.  if v1 <= v2 then goto L453cbe;
  #L453cbc.  return v3;
  #L453cbe.  v1:= 0I;
  #L453cc0.  if v1 >= v0 then goto L453ce8;
  #L453cc4.  v2:= v6 + v1 @kind int;
  #L453cc8.  v2:= v5[v2] @kind object;
  #L453ccc.  v4:= v7 + v1 @kind int;
  #L453cd0.  v4:= v5[v4] @kind object;
  #L453cd4.  call temp:= `equals`(v2, v4) @signature `Ljava/lang/StackTraceElement;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L453cda.  v2:= temp;
  #L453cdc.  if v2 != 0 then goto L453ce2;
  #L453ce0.  return v3;
  #L453ce2.  v1:= v1 + 1;
  #L453ce6.  goto L453cc0;
  #L453ce8.  v5:= 1I;
  #L453cea.  return v5;
}
procedure `java.lang.StackTraceElement`[] `c`(`java.lang.StackTraceElement`[] v10 @kind object, `int` v11 ) @signature `Lr6/c;.c:([Ljava/lang/StackTraceElement;I)[Ljava/lang/StackTraceElement;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L453d24.  v0:= new `java.util.HashMap`;
  #L453d28.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L453d2e.  v1:= length @variable v10;
  #L453d30.  v1:= new `java.lang.StackTraceElement`[v1];
  #L453d34.  v2:= 0I;
  #L453d36.  v3:= 1I;
  #L453d38.  v4:= 0I;
  #L453d3a.  v5:= 0I;
  #L453d3c.  v6:= 1I;
  #L453d3e.  v7:= length @variable v10;
  #L453d40.  if v4 >= v7 then goto L453db6;
  #L453d44.  v7:= v10[v4] @kind object;
  #L453d48.  call temp:= `get`(v0, v7) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L453d4e.  v8:= temp @kind object;
  #L453d50.  v8:= (`java.lang.Integer`) v8 @kind object;
  #L453d54.  if v8 == 0 then goto L453d92;
  #L453d58.  call temp:= `intValue`(v8) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L453d5e.  v9:= temp;
  #L453d60.  call temp:= `b`(v10, v9, v4) @signature `Lr6/c;.b:([Ljava/lang/StackTraceElement;II)Z` @kind static;
  #L453d66.  v9:= temp;
  #L453d68.  if v9 != 0 then goto L453d6e;
  #L453d6c.  goto L453d92;
  #L453d6e.  call temp:= `intValue`(v8) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L453d74.  v8:= temp;
  #L453d76.  v8:= v4 - v8 @kind int;
  #L453d7a.  if v6 >= v11 then goto L453d8a;
  #L453d7e.  call `arraycopy`(v10, v4, v1, v5, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L453d84.  v5:= v5 + v8 @kind int;
  #L453d86.  v6:= v6 + 1;
  #L453d8a.  v8:= v8 + -1;
  #L453d8e.  v8:= v8 + v4 @kind int;
  #L453d90.  goto L453da2;
  #L453d92.  v6:= v10[v4] @kind object;
  #L453d96.  v1[v5]:= v6 @kind object;
  #L453d9a.  v5:= v5 + 1;
  #L453d9e.  v8:= v4;
  #L453da0.  v6:= 1I;
  #L453da2.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L453da8.  v4:= temp @kind object;
  #L453daa.  call temp:= `put`(v0, v7, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L453db0.  v4:= v8 + 1;
  #L453db4.  goto L453d3e;
  #L453db6.  v10:= new `java.lang.StackTraceElement`[v5];
  #L453dba.  call `arraycopy`(v1, v2, v10, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L453dc0.  return v10 @kind object;
}
procedure `java.lang.StackTraceElement`[] `a`(`r6.c` v3 @kind this, `java.lang.StackTraceElement`[] v4 @kind object) @signature `Lr6/c;.a:([Ljava/lang/StackTraceElement;)[Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L453cfc.  v0:= v3.`r6.c.a` @type ^`int`;
  #L453d00.  call temp:= `c`(v4, v0) @signature `Lr6/c;.c:([Ljava/lang/StackTraceElement;I)[Ljava/lang/StackTraceElement;` @kind static;
  #L453d06.  v0:= temp @kind object;
  #L453d08.  v1:= length @variable v0;
  #L453d0a.  v2:= length @variable v4;
  #L453d0c.  if v1 >= v2 then goto L453d12;
  #L453d10.  return v0 @kind object;
  #L453d12.  return v4 @kind object;
}
