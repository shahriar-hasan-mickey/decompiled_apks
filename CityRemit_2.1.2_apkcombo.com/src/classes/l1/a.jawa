record `l1.a` @kind class @AccessFlag PUBLIC_FINAL extends `ib.a` @kind interface {
  `ib.a` `l1.a.a` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `l1.a.b` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.Object` `@@l1.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ll1/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3c1084.  v0:= new `java.lang.Object`;
  #L3c1088.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c108e.  `@@l1.a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L3c1092.  return @kind void;
}
procedure `void` `<init>`(`l1.a` v1 @kind this, `ib.a` v2 @kind object) @signature `Ll1/a;.<init>:(Lib/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3c10a4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c10aa.  v0:= `@@l1.a.c` @type ^`java.lang.Object` @kind object;
  #L3c10ae.  v1.`l1.a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L3c10b2.  v1.`l1.a.a` @type ^`ib.a` := v2 @kind object;
  #L3c10b6.  return @kind void;
}
procedure `ib.a` `a`(`ib.a` v1 @kind object) @signature `Ll1/a;.a:(Lib/a;)Lib/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c0f84.  call temp:= `b`(v1) @signature `Ll1/d;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3c0f8a.  v0:= instanceof @variable v1 @type ^`l1.a` @kind boolean;
  #L3c0f8e.  if v0 == 0 then goto L3c0f94;
  #L3c0f92.  return v1 @kind object;
  #L3c0f94.  v0:= new `l1.a`;
  #L3c0f98.  call `<init>`(v0, v1) @signature `Ll1/a;.<init>:(Lib/a;)V` @kind direct;
  #L3c0f9e.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Ll1/a;.b:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3c1010.  v0:= `@@l1.a.c` @type ^`java.lang.Object` @kind object;
  #L3c1014.  if v3 == v0 then goto L3c101c;
  #L3c1018.  v0:= 1I;
  #L3c101a.  goto L3c101e;
  #L3c101c.  v0:= 0I;
  #L3c101e.  if v0 == 0 then goto L3c1070;
  #L3c1022.  if v3 != v4 then goto L3c1028;
  #L3c1026.  goto L3c1070;
  #L3c1028.  v0:= new `java.lang.IllegalStateException`;
  #L3c102c.  v1:= new `java.lang.StringBuilder`;
  #L3c1030.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c1036.  v2:= "Scoped provider was invoked recursively returning different results: " @kind object;
  #L3c103a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1040.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1046.  v3:= " & " @kind object;
  #L3c104a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1050.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1056.  v3:= ". This is likely due to a circular dependency." @kind object;
  #L3c105a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c1060.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c1066.  v3:= temp @kind object;
  #L3c1068.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c106e.  throw v0;
  #L3c1070.  return v4 @kind object;
}
procedure `java.lang.Object` `get`(`l1.a` v2 @kind this) @signature `Ll1/a;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c0fb0.  v0:= v2.`l1.a.b` @type ^`java.lang.Object` @kind object;
  #L3c0fb4.  v1:= `@@l1.a.c` @type ^`java.lang.Object` @kind object;
  #L3c0fb8.  if v0 != v1 then goto L3c0ff2;
  #L3c0fbc.  @monitorenter v2
  #L3c0fbe.  v0:= v2.`l1.a.b` @type ^`java.lang.Object` @kind object;
  #L3c0fc2.  if v0 != v1 then goto L3c0fe8;
  #L3c0fc6.  v0:= v2.`l1.a.a` @type ^`ib.a` @kind object;
  #L3c0fca.  call temp:= `get`(v0) @signature `Lib/a;.get:()Ljava/lang/Object;` @kind interface;
  #L3c0fd0.  v0:= temp @kind object;
  #L3c0fd2.  v1:= v2.`l1.a.b` @type ^`java.lang.Object` @kind object;
  #L3c0fd6.  call temp:= `b`(v1, v0) @signature `Ll1/a;.b:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3c0fdc.  v1:= temp @kind object;
  #L3c0fde.  v2.`l1.a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L3c0fe2.  v1:= 0I;
  #L3c0fe4.  v2.`l1.a.a` @type ^`ib.a` := v1 @kind object;
  #L3c0fe8.  @monitorexit v2
  #L3c0fea.  goto L3c0ff2;
  #L3c0fec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3c0fee.  @monitorexit v2
  #L3c0ff0.  throw v0;
  #L3c0ff2.  return v0 @kind object;
  catch `java.lang.Throwable` @[L3c0fbe..L3c0ff0] goto L3c0fec;
}
