record `s3.g0` @kind class @AccessFlag PUBLIC_FINAL {
  `long`[] `s3.g0.a` @AccessFlag PRIVATE;
  `java.lang.Object`[] `s3.g0.b` @AccessFlag PRIVATE;
  `int` `s3.g0.c` @AccessFlag PRIVATE;
  `int` `s3.g0.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`s3.g0` v1 @kind this) @signature `Ls3/g0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L461190.  v0:= 10I;
  #L461194.  call `<init>`(v1, v0) @signature `Ls3/g0;.<init>:(I)V` @kind direct;
  #L46119a.  return @kind void;
}
procedure `void` `<init>`(`s3.g0` v1 @kind this, `int` v2 ) @signature `Ls3/g0;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4611ac.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4611b2.  v0:= new `long`[v2];
  #L4611b6.  v1.`s3.g0.a` @type ^`long`[] := v0 @kind object;
  #L4611ba.  call temp:= `f`(v2) @signature `Ls3/g0;.f:(I)[Ljava/lang/Object;` @kind static;
  #L4611c0.  v2:= temp @kind object;
  #L4611c2.  v1.`s3.g0.b` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4611c6.  return @kind void;
}
procedure `void` `b`(`s3.g0` v4 @kind this, `long` v5 , `java.lang.Object` v7 @kind object) @signature `Ls3/g0;.b:(JLjava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L461214.  v0:= v4.`s3.g0.c` @type ^`int`;
  #L461218.  v1:= v4.`s3.g0.d` @type ^`int`;
  #L46121c.  v0:= v0 + v1 @kind int;
  #L46121e.  v2:= v4.`s3.g0.b` @type ^`java.lang.Object`[] @kind object;
  #L461222.  v3:= length @variable v2;
  #L461224.  v0:= v0 %% v3 @kind int;
  #L461226.  v3:= v4.`s3.g0.a` @type ^`long`[] @kind object;
  #L46122a.  v3[v0]:= v5 @kind wide;
  #L46122e.  v2[v0]:= v7 @kind object;
  #L461232.  v1:= v1 + 1;
  #L461236.  v4.`s3.g0.d` @type ^`int` := v1;
  #L46123a.  return @kind void;
}
procedure `void` `d`(`s3.g0` v3 @kind this, `long` v4 ) @signature `Ls3/g0;.d:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L46128c.  v0:= v3.`s3.g0.d` @type ^`int`;
  #L461290.  if v0 <= 0 then goto L4612bc;
  #L461294.  v1:= v3.`s3.g0.c` @type ^`int`;
  #L461298.  v1:= v1 + v0 @kind int;
  #L46129a.  v1:= v1 + -1;
  #L46129e.  v0:= v3.`s3.g0.b` @type ^`java.lang.Object`[] @kind object;
  #L4612a2.  v0:= length @variable v0;
  #L4612a4.  v1:= v1 %% v0 @kind int;
  #L4612a6.  v0:= v3.`s3.g0.a` @type ^`long`[] @kind object;
  #L4612aa.  v1:= v0[v1] @kind wide;
  #L4612ae.  v0:= lcmp(v4, v1);
  #L4612b2.  if v0 > 0 then goto L4612bc;
  #L4612b6.  call `c`(v3) @signature `Ls3/g0;.c:()V` @kind virtual;
  #L4612bc.  return @kind void;
}
procedure `void` `e`(`s3.g0` v6 @kind this) @signature `Ls3/g0;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4612d0.  v0:= v6.`s3.g0.b` @type ^`java.lang.Object`[] @kind object;
  #L4612d4.  v0:= length @variable v0;
  #L4612d6.  v1:= v6.`s3.g0.d` @type ^`int`;
  #L4612da.  if v1 >= v0 then goto L4612e0;
  #L4612de.  return @kind void;
  #L4612e0.  v1:= v0 * 2;
  #L4612e4.  v2:= new `long`[v1];
  #L4612e8.  call temp:= `f`(v1) @signature `Ls3/g0;.f:(I)[Ljava/lang/Object;` @kind static;
  #L4612ee.  v1:= temp @kind object;
  #L4612f0.  v3:= v6.`s3.g0.c` @type ^`int`;
  #L4612f4.  v0:= v0 - v3 @kind int;
  #L4612f6.  v4:= v6.`s3.g0.a` @type ^`long`[] @kind object;
  #L4612fa.  v5:= 0I;
  #L4612fc.  call `arraycopy`(v4, v3, v2, v5, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461302.  v3:= v6.`s3.g0.b` @type ^`java.lang.Object`[] @kind object;
  #L461306.  v4:= v6.`s3.g0.c` @type ^`int`;
  #L46130a.  call `arraycopy`(v3, v4, v1, v5, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461310.  v3:= v6.`s3.g0.c` @type ^`int`;
  #L461314.  if v3 <= 0 then goto L461330;
  #L461318.  v4:= v6.`s3.g0.a` @type ^`long`[] @kind object;
  #L46131c.  call `arraycopy`(v4, v5, v2, v0, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461322.  v3:= v6.`s3.g0.b` @type ^`java.lang.Object`[] @kind object;
  #L461326.  v4:= v6.`s3.g0.c` @type ^`int`;
  #L46132a.  call `arraycopy`(v3, v5, v1, v0, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461330.  v6.`s3.g0.a` @type ^`long`[] := v2 @kind object;
  #L461334.  v6.`s3.g0.b` @type ^`java.lang.Object`[] := v1 @kind object;
  #L461338.  v6.`s3.g0.c` @type ^`int` := v5;
  #L46133c.  return @kind void;
}
procedure `java.lang.Object`[] `f`(`int` v0 ) @signature `Ls3/g0;.f:(I)[Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L461178.  v0:= new `java.lang.Object`[v0];
  #L46117c.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`s3.g0` v8 @kind this, `long` v9 , `boolean` v11 ) @signature `Ls3/g0;.g:(JZ)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L461058.  v0:= 0I;
  #L46105a.  v1:= 9223372036854775807L;
  #L461064.  v3:= v8.`s3.g0.d` @type ^`int`;
  #L461068.  if v3 <= 0 then goto L4610a4;
  #L46106c.  v3:= v8.`s3.g0.a` @type ^`long`[] @kind object;
  #L461070.  v4:= v8.`s3.g0.c` @type ^`int`;
  #L461074.  v4:= v3[v4] @kind wide;
  #L461078.  v3:= v9 - v4 @kind long;
  #L46107c.  v5:= 0L;
  #L461080.  v7:= lcmp(v3, v5);
  #L461084.  if v7 >= 0 then goto L461098;
  #L461088.  if v11 != 0 then goto L4610a4;
  #L46108c.  v5:= -v3 @kind long;
  #L46108e.  v7:= lcmp(v5, v1);
  #L461092.  if v7 < 0 then goto L461098;
  #L461096.  goto L4610a4;
  #L461098.  call temp:= `j`(v8) @signature `Ls3/g0;.j:()Ljava/lang/Object;` @kind direct;
  #L46109e.  v0:= temp @kind object;
  #L4610a0.  v1:= v3 @kind wide;
  #L4610a2.  goto L461064;
  #L4610a4.  return v0 @kind object;
}
procedure `java.lang.Object` `j`(`s3.g0` v5 @kind this) @signature `Ls3/g0;.j:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L461128.  v0:= v5.`s3.g0.d` @type ^`int`;
  #L46112c.  v1:= 1I;
  #L46112e.  if v0 <= 0 then goto L461136;
  #L461132.  v0:= 1I;
  #L461134.  goto L461138;
  #L461136.  v0:= 0I;
  #L461138.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L46113e.  v0:= v5.`s3.g0.b` @type ^`java.lang.Object`[] @kind object;
  #L461142.  v2:= v5.`s3.g0.c` @type ^`int`;
  #L461146.  v3:= v0[v2] @kind object;
  #L46114a.  v4:= 0I;
  #L46114c.  v0[v2]:= v4 @kind object;
  #L461150.  v2:= v2 + v1 @kind int;
  #L461152.  v0:= length @variable v0;
  #L461154.  v2:= v2 %% v0 @kind int;
  #L461156.  v5.`s3.g0.c` @type ^`int` := v2;
  #L46115a.  v0:= v5.`s3.g0.d` @type ^`int`;
  #L46115e.  v0:= v0 - v1 @kind int;
  #L461160.  v5.`s3.g0.d` @type ^`int` := v0;
  #L461164.  return v3 @kind object;
}
procedure `void` `a`(`s3.g0` v0 @kind this, `long` v1 , `java.lang.Object` v3 @kind object) @signature `Ls3/g0;.a:(JLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4611d8.  @monitorenter v0
  #L4611da.  call `d`(v0, v1) @signature `Ls3/g0;.d:(J)V` @kind direct;
  #L4611e0.  call `e`(v0) @signature `Ls3/g0;.e:()V` @kind direct;
  #L4611e6.  call `b`(v0, v1, v3) @signature `Ls3/g0;.b:(JLjava/lang/Object;)V` @kind direct;
  #L4611ec.  @monitorexit v0
  #L4611ee.  return @kind void;
  #L4611f0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4611f2.  @monitorexit v0
  #L4611f4.  throw v1;
  catch `java.lang.Throwable` @[L4611da..L4611ec] goto L4611f0;
}
procedure `void` `c`(`s3.g0` v2 @kind this) @signature `Ls3/g0;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46124c.  @monitorenter v2
  #L46124e.  v0:= 0I;
  #L461250.  v2.`s3.g0.c` @type ^`int` := v0;
  #L461254.  v2.`s3.g0.d` @type ^`int` := v0;
  #L461258.  v0:= v2.`s3.g0.b` @type ^`java.lang.Object`[] @kind object;
  #L46125c.  v1:= 0I;
  #L46125e.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L461264.  @monitorexit v2
  #L461266.  return @kind void;
  #L461268.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46126a.  @monitorexit v2
  #L46126c.  throw v0;
  catch `java.lang.Throwable` @[L461250..L461264] goto L461268;
}
procedure `java.lang.Object` `h`(`s3.g0` v1 @kind this) @signature `Ls3/g0;.h:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4610b8.  @monitorenter v1
  #L4610ba.  v0:= v1.`s3.g0.d` @type ^`int`;
  #L4610be.  if v0 != 0 then goto L4610c6;
  #L4610c2.  v0:= 0I;
  #L4610c4.  goto L4610ce;
  #L4610c6.  call temp:= `j`(v1) @signature `Ls3/g0;.j:()Ljava/lang/Object;` @kind direct;
  #L4610cc.  v0:= temp @kind object;
  #L4610ce.  @monitorexit v1
  #L4610d0.  return v0 @kind object;
  #L4610d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4610d4.  @monitorexit v1
  #L4610d6.  throw v0;
  catch `java.lang.Throwable` @[L4610ba..L4610ce] goto L4610d2;
}
procedure `java.lang.Object` `i`(`s3.g0` v1 @kind this, `long` v2 ) @signature `Ls3/g0;.i:(J)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4610f4.  @monitorenter v1
  #L4610f6.  v0:= 1I;
  #L4610f8.  call temp:= `g`(v1, v2, v0) @signature `Ls3/g0;.g:(JZ)Ljava/lang/Object;` @kind direct;
  #L4610fe.  v2:= temp @kind object;
  #L461100.  @monitorexit v1
  #L461102.  return v2 @kind object;
  #L461104.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461106.  @monitorexit v1
  #L461108.  throw v2;
  catch `java.lang.Throwable` @[L4610f8..L461100] goto L461104;
}
procedure `int` `k`(`s3.g0` v1 @kind this) @signature `Ls3/g0;.k:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46102c.  @monitorenter v1
  #L46102e.  v0:= v1.`s3.g0.d` @type ^`int`;
  #L461032.  @monitorexit v1
  #L461034.  return v0;
  #L461036.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461038.  @monitorexit v1
  #L46103a.  throw v0;
  catch `java.lang.Throwable` @[L46102e..L461032] goto L461036;
}
