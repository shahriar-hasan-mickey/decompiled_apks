record `s3.r` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `s3.r.a` @AccessFlag PRIVATE;
  `long`[] `s3.r.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`s3.r` v1 @kind this) @signature `Ls3/r;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45c6f0.  v0:= 32I;
  #L45c6f4.  call `<init>`(v1, v0) @signature `Ls3/r;.<init>:(I)V` @kind direct;
  #L45c6fa.  return @kind void;
}
procedure `void` `<init>`(`s3.r` v0 @kind this, `int` v1 ) @signature `Ls3/r;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45c70c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45c712.  v1:= new `long`[v1];
  #L45c716.  v0.`s3.r.b` @type ^`long`[] := v1 @kind object;
  #L45c71a.  return @kind void;
}
procedure `void` `a`(`s3.r` v3 @kind this, `long` v4 ) @signature `Ls3/r;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45c72c.  v0:= v3.`s3.r.a` @type ^`int`;
  #L45c730.  v1:= v3.`s3.r.b` @type ^`long`[] @kind object;
  #L45c734.  v2:= length @variable v1;
  #L45c736.  if v0 != v2 then goto L45c74a;
  #L45c73a.  v0:= v0 * 2;
  #L45c73e.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L45c744.  v0:= temp @kind object;
  #L45c746.  v3.`s3.r.b` @type ^`long`[] := v0 @kind object;
  #L45c74a.  v0:= v3.`s3.r.b` @type ^`long`[] @kind object;
  #L45c74e.  v1:= v3.`s3.r.a` @type ^`int`;
  #L45c752.  v2:= v1 + 1;
  #L45c756.  v3.`s3.r.a` @type ^`int` := v2;
  #L45c75a.  v0[v1]:= v4 @kind wide;
  #L45c75e.  return @kind void;
}
procedure `long` `b`(`s3.r` v3 @kind this, `int` v4 ) @signature `Ls3/r;.b:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45c664.  if v4 < 0 then goto L45c67a;
  #L45c668.  v0:= v3.`s3.r.a` @type ^`int`;
  #L45c66c.  if v4 >= v0 then goto L45c67a;
  #L45c670.  v0:= v3.`s3.r.b` @type ^`long`[] @kind object;
  #L45c674.  v1:= v0[v4] @kind wide;
  #L45c678.  return v1 @kind wide;
  #L45c67a.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L45c67e.  v1:= new `java.lang.StringBuilder`;
  #L45c682.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c688.  v2:= "Invalid index " @kind object;
  #L45c68c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c692.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c698.  v4:= ", size is " @kind object;
  #L45c69c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c6a2.  v4:= v3.`s3.r.a` @type ^`int`;
  #L45c6a6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c6ac.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c6b2.  v4:= temp @kind object;
  #L45c6b4.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45c6ba.  throw v0;
}
procedure `int` `c`(`s3.r` v1 @kind this) @signature `Ls3/r;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c64c.  v0:= v1.`s3.r.a` @type ^`int`;
  #L45c650.  return v0;
}
procedure `long`[] `d`(`s3.r` v2 @kind this) @signature `Ls3/r;.d:()[J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45c6cc.  v0:= v2.`s3.r.b` @type ^`long`[] @kind object;
  #L45c6d0.  v1:= v2.`s3.r.a` @type ^`int`;
  #L45c6d4.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L45c6da.  v0:= temp @kind object;
  #L45c6dc.  return v0 @kind object;
}
