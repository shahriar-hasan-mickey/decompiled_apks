record `s3.p` @kind class @AccessFlag PUBLIC_FINAL {
  `s3.c` `s3.p.a` @AccessFlag PRIVATE_FINAL;
  `s3.m` `s3.p.b` @AccessFlag PRIVATE_FINAL;
  `s3.p$b` `s3.p.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.CopyOnWriteArraySet` `s3.p.d` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `s3.p.e` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `s3.p.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `s3.p.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`s3.p` v1 @kind this, `android.os.Looper` v2 @kind object, `s3.c` v3 @kind object, `s3.p$b` v4 @kind object) @signature `Ls3/p;.<init>:(Landroid/os/Looper;Ls3/c;Ls3/p$b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45c0f8.  v0:= new `java.util.concurrent.CopyOnWriteArraySet`;
  #L45c0fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/CopyOnWriteArraySet;.<init>:()V` @kind direct;
  #L45c102.  call `<init>`(v1, v0, v2, v3, v4) @signature `Ls3/p;.<init>:(Ljava/util/concurrent/CopyOnWriteArraySet;Landroid/os/Looper;Ls3/c;Ls3/p$b;)V` @kind direct;
  #L45c108.  return @kind void;
}
procedure `void` `<init>`(`s3.p` v0 @kind this, `java.util.concurrent.CopyOnWriteArraySet` v1 @kind object, `android.os.Looper` v2 @kind object, `s3.c` v3 @kind object, `s3.p$b` v4 @kind object) @signature `Ls3/p;.<init>:(Ljava/util/concurrent/CopyOnWriteArraySet;Landroid/os/Looper;Ls3/c;Ls3/p$b;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L45c11c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45c122.  v0.`s3.p.a` @type ^`s3.c` := v3 @kind object;
  #L45c126.  v0.`s3.p.d` @type ^`java.util.concurrent.CopyOnWriteArraySet` := v1 @kind object;
  #L45c12a.  v0.`s3.p.c` @type ^`s3.p$b` := v4 @kind object;
  #L45c12e.  v1:= new `java.util.ArrayDeque`;
  #L45c132.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L45c138.  v0.`s3.p.e` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L45c13c.  v1:= new `java.util.ArrayDeque`;
  #L45c140.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L45c146.  v0.`s3.p.f` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L45c14a.  v1:= new `s3.n`;
  #L45c14e.  call `<init>`(v1, v0) @signature `Ls3/n;.<init>:(Ls3/p;)V` @kind direct;
  #L45c154.  call temp:= `c`(v3, v2, v1) @signature `Ls3/c;.c:(Landroid/os/Looper;Landroid/os/Handler$Callback;)Ls3/m;` @kind interface;
  #L45c15a.  v1:= temp @kind object;
  #L45c15c.  v0.`s3.p.b` @type ^`s3.m` := v1 @kind object;
  #L45c160.  return @kind void;
}
procedure `void` `a`(`java.util.concurrent.CopyOnWriteArraySet` v0 @kind object, `int` v1 , `s3.p$a` v2 @kind object) @signature `Ls3/p;.a:(Ljava/util/concurrent/CopyOnWriteArraySet;ILs3/p$a;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L45c0e0.  call `h`(v0, v1, v2) @signature `Ls3/p;.h:(Ljava/util/concurrent/CopyOnWriteArraySet;ILs3/p$a;)V` @kind static;
  #L45c0e6.  return @kind void;
}
procedure `boolean` `b`(`s3.p` v0 @kind object, `android.os.Message` v1 @kind object) @signature `Ls3/p;.b:(Ls3/p;Landroid/os/Message;)Z` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L45c030.  call temp:= `g`(v0, v1) @signature `Ls3/p;.g:(Landroid/os/Message;)Z` @kind direct;
  #L45c036.  v0:= temp;
  #L45c038.  return v0;
}
procedure `boolean` `g`(`s3.p` v2 @kind this, `android.os.Message` v3 @kind object) @signature `Ls3/p;.g:(Landroid/os/Message;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L45c04c.  v3:= v2.`s3.p.d` @type ^`java.util.concurrent.CopyOnWriteArraySet` @kind object;
  #L45c050.  call temp:= `iterator`(v3) @signature `Ljava/util/concurrent/CopyOnWriteArraySet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L45c056.  v3:= temp @kind object;
  #L45c058.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45c05e.  v0:= temp;
  #L45c060.  if v0 == 0 then goto L45c08c;
  #L45c064.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45c06a.  v0:= temp @kind object;
  #L45c06c.  v0:= (`s3.p$c`) v0 @kind object;
  #L45c070.  v1:= v2.`s3.p.c` @type ^`s3.p$b` @kind object;
  #L45c074.  call `b`(v0, v1) @signature `Ls3/p$c;.b:(Ls3/p$b;)V` @kind virtual;
  #L45c07a.  v0:= v2.`s3.p.b` @type ^`s3.m` @kind object;
  #L45c07e.  v1:= 0I;
  #L45c080.  call temp:= `a`(v0, v1) @signature `Ls3/m;.a:(I)Z` @kind interface;
  #L45c086.  v0:= temp;
  #L45c088.  if v0 == 0 then goto L45c058;
  #L45c08c.  v3:= 1I;
  #L45c08e.  return v3;
}
procedure `void` `h`(`java.util.concurrent.CopyOnWriteArraySet` v1 @kind object, `int` v2 , `s3.p$a` v3 @kind object) @signature `Ls3/p;.h:(Ljava/util/concurrent/CopyOnWriteArraySet;ILs3/p$a;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L45c254.  call temp:= `iterator`(v1) @signature `Ljava/util/concurrent/CopyOnWriteArraySet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L45c25a.  v1:= temp @kind object;
  #L45c25c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45c262.  v0:= temp;
  #L45c264.  if v0 == 0 then goto L45c27c;
  #L45c268.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45c26e.  v0:= temp @kind object;
  #L45c270.  v0:= (`s3.p$c`) v0 @kind object;
  #L45c274.  call `a`(v0, v2, v3) @signature `Ls3/p$c;.a:(ILs3/p$a;)V` @kind virtual;
  #L45c27a.  goto L45c25c;
  #L45c27c.  return @kind void;
}
procedure `void` `c`(`s3.p` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Ls3/p;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45c174.  v0:= v2.`s3.p.g` @type ^`boolean` @kind boolean;
  #L45c178.  if v0 == 0 then goto L45c17e;
  #L45c17c.  return @kind void;
  #L45c17e.  call temp:= `e`(v3) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L45c184.  v0:= v2.`s3.p.d` @type ^`java.util.concurrent.CopyOnWriteArraySet` @kind object;
  #L45c188.  v1:= new `s3.p$c`;
  #L45c18c.  call `<init>`(v1, v3) @signature `Ls3/p$c;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L45c192.  call temp:= `add`(v0, v1) @signature `Ljava/util/concurrent/CopyOnWriteArraySet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L45c198.  return @kind void;
}
procedure `s3.p` `d`(`s3.p` v2 @kind this, `android.os.Looper` v3 @kind object, `s3.c` v4 @kind object, `s3.p$b` v5 @kind object) @signature `Ls3/p;.d:(Landroid/os/Looper;Ls3/c;Ls3/p$b;)Ls3/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45c0a0.  v0:= new `s3.p`;
  #L45c0a4.  v1:= v2.`s3.p.d` @type ^`java.util.concurrent.CopyOnWriteArraySet` @kind object;
  #L45c0a8.  call `<init>`(v0, v1, v3, v4, v5) @signature `Ls3/p;.<init>:(Ljava/util/concurrent/CopyOnWriteArraySet;Landroid/os/Looper;Ls3/c;Ls3/p$b;)V` @kind direct;
  #L45c0ae.  return v0 @kind object;
}
procedure `s3.p` `e`(`s3.p` v1 @kind this, `android.os.Looper` v2 @kind object, `s3.p$b` v3 @kind object) @signature `Ls3/p;.e:(Landroid/os/Looper;Ls3/p$b;)Ls3/p;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c0c0.  v0:= v1.`s3.p.a` @type ^`s3.c` @kind object;
  #L45c0c4.  call temp:= `d`(v1, v2, v0, v3) @signature `Ls3/p;.d:(Landroid/os/Looper;Ls3/c;Ls3/p$b;)Ls3/p;` @kind virtual;
  #L45c0ca.  v2:= temp @kind object;
  #L45c0cc.  return v2 @kind object;
}
procedure `void` `f`(`s3.p` v3 @kind this) @signature `Ls3/p;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45c1ac.  v0:= v3.`s3.p.f` @type ^`java.util.ArrayDeque` @kind object;
  #L45c1b0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L45c1b6.  v0:= temp;
  #L45c1b8.  if v0 == 0 then goto L45c1be;
  #L45c1bc.  return @kind void;
  #L45c1be.  v0:= v3.`s3.p.b` @type ^`s3.m` @kind object;
  #L45c1c2.  v1:= 0I;
  #L45c1c4.  call temp:= `a`(v0, v1) @signature `Ls3/m;.a:(I)Z` @kind interface;
  #L45c1ca.  v0:= temp;
  #L45c1cc.  if v0 != 0 then goto L45c1e2;
  #L45c1d0.  v0:= v3.`s3.p.b` @type ^`s3.m` @kind object;
  #L45c1d4.  call temp:= `j`(v0, v1) @signature `Ls3/m;.j:(I)Ls3/m$a;` @kind interface;
  #L45c1da.  v1:= temp @kind object;
  #L45c1dc.  call temp:= `k`(v0, v1) @signature `Ls3/m;.k:(Ls3/m$a;)Z` @kind interface;
  #L45c1e2.  v0:= v3.`s3.p.e` @type ^`java.util.ArrayDeque` @kind object;
  #L45c1e6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L45c1ec.  v0:= temp;
  #L45c1ee.  v0:= v0 ^~ 1;
  #L45c1f2.  v1:= v3.`s3.p.e` @type ^`java.util.ArrayDeque` @kind object;
  #L45c1f6.  v2:= v3.`s3.p.f` @type ^`java.util.ArrayDeque` @kind object;
  #L45c1fa.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/ArrayDeque;.addAll:(Ljava/util/Collection;)Z` @kind virtual;
  #L45c200.  v1:= v3.`s3.p.f` @type ^`java.util.ArrayDeque` @kind object;
  #L45c204.  call `clear`(v1) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L45c20a.  if v0 == 0 then goto L45c210;
  #L45c20e.  return @kind void;
  #L45c210.  v0:= v3.`s3.p.e` @type ^`java.util.ArrayDeque` @kind object;
  #L45c214.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L45c21a.  v0:= temp;
  #L45c21c.  if v0 != 0 then goto L45c242;
  #L45c220.  v0:= v3.`s3.p.e` @type ^`java.util.ArrayDeque` @kind object;
  #L45c224.  call temp:= `peekFirst`(v0) @signature `Ljava/util/ArrayDeque;.peekFirst:()Ljava/lang/Object;` @kind virtual;
  #L45c22a.  v0:= temp @kind object;
  #L45c22c.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L45c230.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L45c236.  v0:= v3.`s3.p.e` @type ^`java.util.ArrayDeque` @kind object;
  #L45c23a.  call temp:= `removeFirst`(v0) @signature `Ljava/util/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L45c240.  goto L45c210;
  #L45c242.  return @kind void;
}
procedure `void` `i`(`s3.p` v3 @kind this, `int` v4 , `s3.p$a` v5 @kind object) @signature `Ls3/p;.i:(ILs3/p$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45c290.  v0:= new `java.util.concurrent.CopyOnWriteArraySet`;
  #L45c294.  v1:= v3.`s3.p.d` @type ^`java.util.concurrent.CopyOnWriteArraySet` @kind object;
  #L45c298.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CopyOnWriteArraySet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L45c29e.  v1:= v3.`s3.p.f` @type ^`java.util.ArrayDeque` @kind object;
  #L45c2a2.  v2:= new `s3.o`;
  #L45c2a6.  call `<init>`(v2, v0, v4, v5) @signature `Ls3/o;.<init>:(Ljava/util/concurrent/CopyOnWriteArraySet;ILs3/p$a;)V` @kind direct;
  #L45c2ac.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayDeque;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L45c2b2.  return @kind void;
}
procedure `void` `j`(`s3.p` v3 @kind this) @signature `Ls3/p;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45c2c4.  v0:= v3.`s3.p.d` @type ^`java.util.concurrent.CopyOnWriteArraySet` @kind object;
  #L45c2c8.  call temp:= `iterator`(v0) @signature `Ljava/util/concurrent/CopyOnWriteArraySet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L45c2ce.  v0:= temp @kind object;
  #L45c2d0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45c2d6.  v1:= temp;
  #L45c2d8.  if v1 == 0 then goto L45c2f4;
  #L45c2dc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45c2e2.  v1:= temp @kind object;
  #L45c2e4.  v1:= (`s3.p$c`) v1 @kind object;
  #L45c2e8.  v2:= v3.`s3.p.c` @type ^`s3.p$b` @kind object;
  #L45c2ec.  call `c`(v1, v2) @signature `Ls3/p$c;.c:(Ls3/p$b;)V` @kind virtual;
  #L45c2f2.  goto L45c2d0;
  #L45c2f4.  v0:= v3.`s3.p.d` @type ^`java.util.concurrent.CopyOnWriteArraySet` @kind object;
  #L45c2f8.  call `clear`(v0) @signature `Ljava/util/concurrent/CopyOnWriteArraySet;.clear:()V` @kind virtual;
  #L45c2fe.  v0:= 1I;
  #L45c300.  v3.`s3.p.g` @type ^`boolean` := v0 @kind boolean;
  #L45c304.  return @kind void;
}
procedure `void` `k`(`s3.p` v0 @kind this, `int` v1 , `s3.p$a` v2 @kind object) @signature `Ls3/p;.k:(ILs3/p$a;)V` @AccessFlag PUBLIC {
    temp;

  #L45c318.  call `i`(v0, v1, v2) @signature `Ls3/p;.i:(ILs3/p$a;)V` @kind virtual;
  #L45c31e.  call `f`(v0) @signature `Ls3/p;.f:()V` @kind virtual;
  #L45c324.  return @kind void;
}
