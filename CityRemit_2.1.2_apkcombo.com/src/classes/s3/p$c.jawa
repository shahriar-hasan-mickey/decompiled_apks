record `s3.p$c` @kind class @AccessFlag FINAL {
  `java.lang.Object` `s3.p$c.a` @AccessFlag PUBLIC_FINAL;
  `s3.k$b` `s3.p$c.b` @AccessFlag PRIVATE;
  `boolean` `s3.p$c.c` @AccessFlag PRIVATE;
  `boolean` `s3.p$c.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`s3.p$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ls3/p$c;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45bf44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45bf4a.  v0.`s3.p$c.a` @type ^`java.lang.Object` := v1 @kind object;
  #L45bf4e.  v1:= new `s3.k$b`;
  #L45bf52.  call `<init>`(v1) @signature `Ls3/k$b;.<init>:()V` @kind direct;
  #L45bf58.  v0.`s3.p$c.b` @type ^`s3.k$b` := v1 @kind object;
  #L45bf5c.  return @kind void;
}
procedure `void` `a`(`s3.p$c` v1 @kind this, `int` v2 , `s3.p$a` v3 @kind object) @signature `Ls3/p$c;.a:(ILs3/p$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bf70.  v0:= v1.`s3.p$c.d` @type ^`boolean` @kind boolean;
  #L45bf74.  if v0 != 0 then goto L45bf98;
  #L45bf78.  v0:= -1I;
  #L45bf7a.  if v2 == v0 then goto L45bf88;
  #L45bf7e.  v0:= v1.`s3.p$c.b` @type ^`s3.k$b` @kind object;
  #L45bf82.  call temp:= `a`(v0, v2) @signature `Ls3/k$b;.a:(I)Ls3/k$b;` @kind virtual;
  #L45bf88.  v2:= 1I;
  #L45bf8a.  v1.`s3.p$c.c` @type ^`boolean` := v2 @kind boolean;
  #L45bf8e.  v2:= v1.`s3.p$c.a` @type ^`java.lang.Object` @kind object;
  #L45bf92.  call `invoke`(v3, v2) @signature `Ls3/p$a;.invoke:(Ljava/lang/Object;)V` @kind interface;
  #L45bf98.  return @kind void;
}
procedure `void` `b`(`s3.p$c` v2 @kind this, `s3.p$b` v3 @kind object) @signature `Ls3/p$c;.b:(Ls3/p$b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45bfac.  v0:= v2.`s3.p$c.d` @type ^`boolean` @kind boolean;
  #L45bfb0.  if v0 != 0 then goto L45bfe6;
  #L45bfb4.  v0:= v2.`s3.p$c.c` @type ^`boolean` @kind boolean;
  #L45bfb8.  if v0 == 0 then goto L45bfe6;
  #L45bfbc.  v0:= v2.`s3.p$c.b` @type ^`s3.k$b` @kind object;
  #L45bfc0.  call temp:= `e`(v0) @signature `Ls3/k$b;.e:()Ls3/k;` @kind virtual;
  #L45bfc6.  v0:= temp @kind object;
  #L45bfc8.  v1:= new `s3.k$b`;
  #L45bfcc.  call `<init>`(v1) @signature `Ls3/k$b;.<init>:()V` @kind direct;
  #L45bfd2.  v2.`s3.p$c.b` @type ^`s3.k$b` := v1 @kind object;
  #L45bfd6.  v1:= 0I;
  #L45bfd8.  v2.`s3.p$c.c` @type ^`boolean` := v1 @kind boolean;
  #L45bfdc.  v1:= v2.`s3.p$c.a` @type ^`java.lang.Object` @kind object;
  #L45bfe0.  call `a`(v3, v1, v0) @signature `Ls3/p$b;.a:(Ljava/lang/Object;Ls3/k;)V` @kind interface;
  #L45bfe6.  return @kind void;
}
procedure `void` `c`(`s3.p$c` v2 @kind this, `s3.p$b` v3 @kind object) @signature `Ls3/p$c;.c:(Ls3/p$b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45bff8.  v0:= 1I;
  #L45bffa.  v2.`s3.p$c.d` @type ^`boolean` := v0 @kind boolean;
  #L45bffe.  v0:= v2.`s3.p$c.c` @type ^`boolean` @kind boolean;
  #L45c002.  if v0 == 0 then goto L45c01c;
  #L45c006.  v0:= v2.`s3.p$c.a` @type ^`java.lang.Object` @kind object;
  #L45c00a.  v1:= v2.`s3.p$c.b` @type ^`s3.k$b` @kind object;
  #L45c00e.  call temp:= `e`(v1) @signature `Ls3/k$b;.e:()Ls3/k;` @kind virtual;
  #L45c014.  v1:= temp @kind object;
  #L45c016.  call `a`(v3, v0, v1) @signature `Ls3/p$b;.a:(Ljava/lang/Object;Ls3/k;)V` @kind interface;
  #L45c01c.  return @kind void;
}
procedure `boolean` `equals`(`s3.p$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Ls3/p$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45bedc.  if v2 != v3 then goto L45bee4;
  #L45bee0.  v3:= 1I;
  #L45bee2.  return v3;
  #L45bee4.  if v3 == 0 then goto L45bf10;
  #L45bee8.  v0:= constclass @type ^`s3.p$c` @kind object;
  #L45beec.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L45bef2.  v1:= temp @kind object;
  #L45bef4.  if v0 == v1 then goto L45befa;
  #L45bef8.  goto L45bf10;
  #L45befa.  v0:= v2.`s3.p$c.a` @type ^`java.lang.Object` @kind object;
  #L45befe.  v3:= (`s3.p$c`) v3 @kind object;
  #L45bf02.  v3:= v3.`s3.p$c.a` @type ^`java.lang.Object` @kind object;
  #L45bf06.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45bf0c.  v3:= temp;
  #L45bf0e.  return v3;
  #L45bf10.  v3:= 0I;
  #L45bf12.  return v3;
}
procedure `int` `hashCode`(`s3.p$c` v1 @kind this) @signature `Ls3/p$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bf24.  v0:= v1.`s3.p$c.a` @type ^`java.lang.Object` @kind object;
  #L45bf28.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L45bf2e.  v0:= temp;
  #L45bf30.  return v0;
}
