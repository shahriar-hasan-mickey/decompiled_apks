record `s3.a0` @kind class @AccessFlag PUBLIC_FINAL {
  `byte`[] `s3.a0.a` @AccessFlag PRIVATE;
  `int` `s3.a0.b` @AccessFlag PRIVATE;
  `int` `s3.a0.c` @AccessFlag PRIVATE;
  `int` `s3.a0.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`s3.a0` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Ls3/a0;.<init>:([BII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L460148.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46014e.  call `i`(v0, v1, v2, v3) @signature `Ls3/a0;.i:([BII)V` @kind virtual;
  #L460154.  return @kind void;
}
procedure `void` `a`(`s3.a0` v2 @kind this) @signature `Ls3/a0;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L460168.  v0:= v2.`s3.a0.c` @type ^`int`;
  #L46016c.  if v0 < 0 then goto L460188;
  #L460170.  v1:= v2.`s3.a0.b` @type ^`int`;
  #L460174.  if v0 < v1 then goto L460184;
  #L460178.  if v0 != v1 then goto L460188;
  #L46017c.  v0:= v2.`s3.a0.d` @type ^`int`;
  #L460180.  if v0 != 0 then goto L460188;
  #L460184.  v0:= 1I;
  #L460186.  goto L46018a;
  #L460188.  v0:= 0I;
  #L46018a.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L460190.  return @kind void;
}
procedure `int` `f`(`s3.a0` v4 @kind this) @signature `Ls3/a0;.f:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4600b8.  v0:= 0I;
  #L4600ba.  v1:= 0I;
  #L4600bc.  call temp:= `d`(v4) @signature `Ls3/a0;.d:()Z` @kind virtual;
  #L4600c2.  v2:= temp;
  #L4600c4.  if v2 != 0 then goto L4600ce;
  #L4600c8.  v1:= v1 + 1;
  #L4600cc.  goto L4600bc;
  #L4600ce.  v2:= 1I;
  #L4600d0.  v3:= v2 ^< v1 @kind int;
  #L4600d4.  v3:= v3 - v2 @kind int;
  #L4600d6.  if v1 <= 0 then goto L4600e2;
  #L4600da.  call temp:= `e`(v4, v1) @signature `Ls3/a0;.e:(I)I` @kind virtual;
  #L4600e0.  v0:= temp;
  #L4600e2.  v3:= v3 + v0 @kind int;
  #L4600e4.  return v3;
}
procedure `boolean` `j`(`s3.a0` v4 @kind this, `int` v5 ) @signature `Ls3/a0;.j:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45ffb4.  v0:= 1I;
  #L45ffb6.  v1:= 2I;
  #L45ffb8.  if v1 > v5 then goto L45ffea;
  #L45ffbc.  v1:= v4.`s3.a0.b` @type ^`int`;
  #L45ffc0.  if v5 >= v1 then goto L45ffea;
  #L45ffc4.  v1:= v4.`s3.a0.a` @type ^`byte`[] @kind object;
  #L45ffc8.  v2:= v1[v5] @kind byte;
  #L45ffcc.  v3:= 3I;
  #L45ffce.  if v2 != v3 then goto L45ffea;
  #L45ffd2.  v2:= v5 + -2;
  #L45ffd6.  v2:= v1[v2] @kind byte;
  #L45ffda.  if v2 != 0 then goto L45ffea;
  #L45ffde.  v5:= v5 - v0 @kind int;
  #L45ffe0.  v5:= v1[v5] @kind byte;
  #L45ffe4.  if v5 != 0 then goto L45ffea;
  #L45ffe8.  goto L45ffec;
  #L45ffea.  v0:= 0I;
  #L45ffec.  return v0;
}
procedure `boolean` `b`(`s3.a0` v4 @kind this, `int` v5 ) @signature `Ls3/a0;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45fe94.  v0:= v4.`s3.a0.c` @type ^`int`;
  #L45fe98.  v1:= v5 / 8;
  #L45fe9c.  v2:= v0 + v1 @kind int;
  #L45fea0.  v3:= v4.`s3.a0.d` @type ^`int`;
  #L45fea4.  v3:= v3 + v5 @kind int;
  #L45fea6.  v1:= v1 * 8;
  #L45feaa.  v3:= v3 - v1 @kind int;
  #L45feac.  v5:= 7I;
  #L45feae.  if v3 <= v5 then goto L45feba;
  #L45feb2.  v2:= v2 + 1;
  #L45feb6.  v3:= v3 + -8;
  #L45feba.  v5:= 1I;
  #L45febc.  v0:= v0 + v5 @kind int;
  #L45febe.  if v0 > v2 then goto L45fee0;
  #L45fec2.  v1:= v4.`s3.a0.b` @type ^`int`;
  #L45fec6.  if v2 >= v1 then goto L45fee0;
  #L45feca.  call temp:= `j`(v4, v0) @signature `Ls3/a0;.j:(I)Z` @kind direct;
  #L45fed0.  v1:= temp;
  #L45fed2.  if v1 == 0 then goto L45febc;
  #L45fed6.  v2:= v2 + 1;
  #L45feda.  v0:= v0 + 2;
  #L45fede.  goto L45febc;
  #L45fee0.  v0:= v4.`s3.a0.b` @type ^`int`;
  #L45fee4.  if v2 < v0 then goto L45fef4;
  #L45fee8.  if v2 != v0 then goto L45fef2;
  #L45feec.  if v3 != 0 then goto L45fef2;
  #L45fef0.  goto L45fef4;
  #L45fef2.  v5:= 0I;
  #L45fef4.  return v5;
}
procedure `boolean` `c`(`s3.a0` v7 @kind this) @signature `Ls3/a0;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L45ff08.  v0:= v7.`s3.a0.c` @type ^`int`;
  #L45ff0c.  v1:= v7.`s3.a0.d` @type ^`int`;
  #L45ff10.  v2:= 0I;
  #L45ff12.  v3:= 0I;
  #L45ff14.  v4:= v7.`s3.a0.c` @type ^`int`;
  #L45ff18.  v5:= v7.`s3.a0.b` @type ^`int`;
  #L45ff1c.  if v4 >= v5 then goto L45ff32;
  #L45ff20.  call temp:= `d`(v7) @signature `Ls3/a0;.d:()Z` @kind virtual;
  #L45ff26.  v4:= temp;
  #L45ff28.  if v4 != 0 then goto L45ff32;
  #L45ff2c.  v3:= v3 + 1;
  #L45ff30.  goto L45ff14;
  #L45ff32.  v4:= v7.`s3.a0.c` @type ^`int`;
  #L45ff36.  v5:= v7.`s3.a0.b` @type ^`int`;
  #L45ff3a.  v6:= 1I;
  #L45ff3c.  if v4 != v5 then goto L45ff44;
  #L45ff40.  v4:= 1I;
  #L45ff42.  goto L45ff46;
  #L45ff44.  v4:= 0I;
  #L45ff46.  v7.`s3.a0.c` @type ^`int` := v0;
  #L45ff4a.  v7.`s3.a0.d` @type ^`int` := v1;
  #L45ff4e.  if v4 != 0 then goto L45ff66;
  #L45ff52.  v3:= v3 * 2;
  #L45ff56.  v3:= v3 + v6 @kind int;
  #L45ff58.  call temp:= `b`(v7, v3) @signature `Ls3/a0;.b:(I)Z` @kind virtual;
  #L45ff5e.  v0:= temp;
  #L45ff60.  if v0 == 0 then goto L45ff66;
  #L45ff64.  v2:= 1I;
  #L45ff66.  return v2;
}
procedure `boolean` `d`(`s3.a0` v3 @kind this) @signature `Ls3/a0;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45ff78.  v0:= v3.`s3.a0.a` @type ^`byte`[] @kind object;
  #L45ff7c.  v1:= v3.`s3.a0.c` @type ^`int`;
  #L45ff80.  v0:= v0[v1] @kind byte;
  #L45ff84.  v1:= v3.`s3.a0.d` @type ^`int`;
  #L45ff88.  v2:= 128I;
  #L45ff8c.  v1:= v2 ^> v1 @kind int;
  #L45ff90.  v0:= v0 ^& v1 @kind int;
  #L45ff92.  if v0 == 0 then goto L45ff9a;
  #L45ff96.  v0:= 1I;
  #L45ff98.  goto L45ff9c;
  #L45ff9a.  v0:= 0I;
  #L45ff9c.  call `k`(v3) @signature `Ls3/a0;.k:()V` @kind virtual;
  #L45ffa2.  return v0;
}
procedure `int` `e`(`s3.a0` v9 @kind this, `int` v10 ) @signature `Ls3/a0;.e:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L460000.  v0:= v9.`s3.a0.d` @type ^`int`;
  #L460004.  v0:= v0 + v10 @kind int;
  #L460006.  v9.`s3.a0.d` @type ^`int` := v0;
  #L46000a.  v0:= 0I;
  #L46000c.  v1:= 0I;
  #L46000e.  v2:= v9.`s3.a0.d` @type ^`int`;
  #L460012.  v3:= 2I;
  #L460014.  v4:= 1I;
  #L460016.  v5:= 8I;
  #L46001a.  if v2 <= v5 then goto L460058;
  #L46001e.  v2:= v2 + -8;
  #L460022.  v9.`s3.a0.d` @type ^`int` := v2;
  #L460026.  v5:= v9.`s3.a0.a` @type ^`byte`[] @kind object;
  #L46002a.  v6:= v9.`s3.a0.c` @type ^`int`;
  #L46002e.  v5:= v5[v6] @kind byte;
  #L460032.  v5:= v5 ^& 255;
  #L460036.  v2:= v5 ^< v2 @kind int;
  #L46003a.  v1:= v1 ^| v2 @kind int;
  #L46003c.  v2:= v6 + 1;
  #L460040.  call temp:= `j`(v9, v2) @signature `Ls3/a0;.j:(I)Z` @kind direct;
  #L460046.  v2:= temp;
  #L460048.  if v2 == 0 then goto L46004e;
  #L46004c.  goto L460050;
  #L46004e.  v3:= 1I;
  #L460050.  v6:= v6 + v3 @kind int;
  #L460052.  v9.`s3.a0.c` @type ^`int` := v6;
  #L460056.  goto L46000e;
  #L460058.  v6:= v9.`s3.a0.a` @type ^`byte`[] @kind object;
  #L46005c.  v7:= v9.`s3.a0.c` @type ^`int`;
  #L460060.  v6:= v6[v7] @kind byte;
  #L460064.  v6:= v6 ^& 255;
  #L460068.  v8:= v2 - 8;
  #L46006c.  v6:= v6 ^> v8 @kind int;
  #L46006e.  v1:= v1 ^| v6 @kind int;
  #L460070.  v6:= -1I;
  #L460072.  v10:= v10 - 32;
  #L460076.  v10:= v6 ^>> v10 @kind int;
  #L46007a.  v10:= v10 ^& v1 @kind int;
  #L46007c.  if v2 != v5 then goto L46009e;
  #L460080.  v9.`s3.a0.d` @type ^`int` := v0;
  #L460084.  v0:= v7 + 1;
  #L460088.  call temp:= `j`(v9, v0) @signature `Ls3/a0;.j:(I)Z` @kind direct;
  #L46008e.  v0:= temp;
  #L460090.  if v0 == 0 then goto L460096;
  #L460094.  goto L460098;
  #L460096.  v3:= 1I;
  #L460098.  v7:= v7 + v3 @kind int;
  #L46009a.  v9.`s3.a0.c` @type ^`int` := v7;
  #L46009e.  call `a`(v9) @signature `Ls3/a0;.a:()V` @kind direct;
  #L4600a4.  return v10;
}
procedure `int` `g`(`s3.a0` v3 @kind this) @signature `Ls3/a0;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4600f8.  call temp:= `f`(v3) @signature `Ls3/a0;.f:()I` @kind direct;
  #L4600fe.  v0:= temp;
  #L460100.  v1:= v0 %% 2;
  #L460104.  v2:= 1I;
  #L460106.  if v1 != 0 then goto L46010e;
  #L46010a.  v1:= -1I;
  #L46010c.  goto L460110;
  #L46010e.  v1:= 1I;
  #L460110.  v0:= v0 + v2 @kind int;
  #L460112.  v0:= v0 / 2;
  #L460116.  v1:= v1 * v0 @kind int;
  #L46011a.  return v1;
}
procedure `int` `h`(`s3.a0` v1 @kind this) @signature `Ls3/a0;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46012c.  call temp:= `f`(v1) @signature `Ls3/a0;.f:()I` @kind direct;
  #L460132.  v0:= temp;
  #L460134.  return v0;
}
procedure `void` `i`(`s3.a0` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Ls3/a0;.i:([BII)V` @AccessFlag PUBLIC {
    temp;

  #L4601a4.  v0.`s3.a0.a` @type ^`byte`[] := v1 @kind object;
  #L4601a8.  v0.`s3.a0.c` @type ^`int` := v2;
  #L4601ac.  v0.`s3.a0.b` @type ^`int` := v3;
  #L4601b0.  v1:= 0I;
  #L4601b2.  v0.`s3.a0.d` @type ^`int` := v1;
  #L4601b6.  call `a`(v0) @signature `Ls3/a0;.a:()V` @kind direct;
  #L4601bc.  return @kind void;
}
procedure `void` `k`(`s3.a0` v3 @kind this) @signature `Ls3/a0;.k:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4601d0.  v0:= v3.`s3.a0.d` @type ^`int`;
  #L4601d4.  v1:= 1I;
  #L4601d6.  v0:= v0 + v1 @kind int;
  #L4601d8.  v3.`s3.a0.d` @type ^`int` := v0;
  #L4601dc.  v2:= 8I;
  #L4601e0.  if v0 != v2 then goto L460206;
  #L4601e4.  v0:= 0I;
  #L4601e6.  v3.`s3.a0.d` @type ^`int` := v0;
  #L4601ea.  v0:= v3.`s3.a0.c` @type ^`int`;
  #L4601ee.  v2:= v0 + 1;
  #L4601f2.  call temp:= `j`(v3, v2) @signature `Ls3/a0;.j:(I)Z` @kind direct;
  #L4601f8.  v2:= temp;
  #L4601fa.  if v2 == 0 then goto L460200;
  #L4601fe.  v1:= 2I;
  #L460200.  v0:= v0 + v1 @kind int;
  #L460202.  v3.`s3.a0.c` @type ^`int` := v0;
  #L460206.  call `a`(v3) @signature `Ls3/a0;.a:()V` @kind direct;
  #L46020c.  return @kind void;
}
procedure `void` `l`(`s3.a0` v4 @kind this, `int` v5 ) @signature `Ls3/a0;.l:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L460220.  v0:= v4.`s3.a0.c` @type ^`int`;
  #L460224.  v1:= v5 / 8;
  #L460228.  v2:= v0 + v1 @kind int;
  #L46022c.  v4.`s3.a0.c` @type ^`int` := v2;
  #L460230.  v3:= v4.`s3.a0.d` @type ^`int`;
  #L460234.  v1:= v1 * 8;
  #L460238.  v5:= v5 - v1 @kind int;
  #L46023a.  v3:= v3 + v5 @kind int;
  #L46023c.  v4.`s3.a0.d` @type ^`int` := v3;
  #L460240.  v5:= 7I;
  #L460242.  if v3 <= v5 then goto L460256;
  #L460246.  v2:= v2 + 1;
  #L46024a.  v4.`s3.a0.c` @type ^`int` := v2;
  #L46024e.  v3:= v3 + -8;
  #L460252.  v4.`s3.a0.d` @type ^`int` := v3;
  #L460256.  v0:= v0 + 1;
  #L46025a.  v5:= v4.`s3.a0.c` @type ^`int`;
  #L46025e.  if v0 > v5 then goto L460280;
  #L460262.  call temp:= `j`(v4, v0) @signature `Ls3/a0;.j:(I)Z` @kind direct;
  #L460268.  v5:= temp;
  #L46026a.  if v5 == 0 then goto L460256;
  #L46026e.  v5:= v4.`s3.a0.c` @type ^`int`;
  #L460272.  v5:= v5 + 1;
  #L460276.  v4.`s3.a0.c` @type ^`int` := v5;
  #L46027a.  v0:= v0 + 2;
  #L46027e.  goto L460256;
  #L460280.  call `a`(v4) @signature `Ls3/a0;.a:()V` @kind direct;
  #L460286.  return @kind void;
}
