record `s3.d0` @kind class @AccessFlag PUBLIC_FINAL extends `s3.s` @kind interface {
  `s3.c` `s3.d0.o` @AccessFlag PRIVATE_FINAL;
  `boolean` `s3.d0.p` @AccessFlag PRIVATE;
  `long` `s3.d0.q` @AccessFlag PRIVATE;
  `long` `s3.d0.r` @AccessFlag PRIVATE;
  `v1.j2` `s3.d0.s` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`s3.d0` v0 @kind this, `s3.c` v1 @kind object) @signature `Ls3/d0;.<init>:(Ls3/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L460b60.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L460b66.  v0.`s3.d0.o` @type ^`s3.c` := v1 @kind object;
  #L460b6a.  v1:= `@@v1.j2.r` @type ^`v1.j2` @kind object;
  #L460b6e.  v0.`s3.d0.s` @type ^`v1.j2` := v1 @kind object;
  #L460b72.  return @kind void;
}
procedure `void` `a`(`s3.d0` v0 @kind this, `long` v1 ) @signature `Ls3/d0;.a:(J)V` @AccessFlag PUBLIC {
    temp;

  #L460b84.  v0.`s3.d0.q` @type ^`long` := v1 @kind wide;
  #L460b88.  v1:= v0.`s3.d0.p` @type ^`boolean` @kind boolean;
  #L460b8c.  if v1 == 0 then goto L460ba0;
  #L460b90.  v1:= v0.`s3.d0.o` @type ^`s3.c` @kind object;
  #L460b94.  call temp:= `b`(v1) @signature `Ls3/c;.b:()J` @kind interface;
  #L460b9a.  v1:= temp @kind wide;
  #L460b9c.  v0.`s3.d0.r` @type ^`long` := v1 @kind wide;
  #L460ba0.  return @kind void;
}
procedure `void` `b`(`s3.d0` v2 @kind this) @signature `Ls3/d0;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460be0.  v0:= v2.`s3.d0.p` @type ^`boolean` @kind boolean;
  #L460be4.  if v0 != 0 then goto L460bfe;
  #L460be8.  v0:= v2.`s3.d0.o` @type ^`s3.c` @kind object;
  #L460bec.  call temp:= `b`(v0) @signature `Ls3/c;.b:()J` @kind interface;
  #L460bf2.  v0:= temp @kind wide;
  #L460bf4.  v2.`s3.d0.r` @type ^`long` := v0 @kind wide;
  #L460bf8.  v0:= 1I;
  #L460bfa.  v2.`s3.d0.p` @type ^`boolean` := v0 @kind boolean;
  #L460bfe.  return @kind void;
}
procedure `void` `c`(`s3.d0` v2 @kind this) @signature `Ls3/d0;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460c10.  v0:= v2.`s3.d0.p` @type ^`boolean` @kind boolean;
  #L460c14.  if v0 == 0 then goto L460c2c;
  #L460c18.  call temp:= `y`(v2) @signature `Ls3/d0;.y:()J` @kind virtual;
  #L460c1e.  v0:= temp @kind wide;
  #L460c20.  call `a`(v2, v0) @signature `Ls3/d0;.a:(J)V` @kind virtual;
  #L460c26.  v0:= 0I;
  #L460c28.  v2.`s3.d0.p` @type ^`boolean` := v0 @kind boolean;
  #L460c2c.  return @kind void;
}
procedure `void` `e`(`s3.d0` v2 @kind this, `v1.j2` v3 @kind object) @signature `Ls3/d0;.e:(Lv1/j2;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460bb4.  v0:= v2.`s3.d0.p` @type ^`boolean` @kind boolean;
  #L460bb8.  if v0 == 0 then goto L460bca;
  #L460bbc.  call temp:= `y`(v2) @signature `Ls3/d0;.y:()J` @kind virtual;
  #L460bc2.  v0:= temp @kind wide;
  #L460bc4.  call `a`(v2, v0) @signature `Ls3/d0;.a:(J)V` @kind virtual;
  #L460bca.  v2.`s3.d0.s` @type ^`v1.j2` := v3 @kind object;
  #L460bce.  return @kind void;
}
procedure `v1.j2` `i`(`s3.d0` v1 @kind this) @signature `Ls3/d0;.i:()Lv1/j2;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460b48.  v0:= v1.`s3.d0.s` @type ^`v1.j2` @kind object;
  #L460b4c.  return v0 @kind object;
}
procedure `long` `y`(`s3.d0` v7 @kind this) @signature `Ls3/d0;.y:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L460af0.  v0:= v7.`s3.d0.q` @type ^`long` @kind wide;
  #L460af4.  v2:= v7.`s3.d0.p` @type ^`boolean` @kind boolean;
  #L460af8.  if v2 == 0 then goto L460b36;
  #L460afc.  v2:= v7.`s3.d0.o` @type ^`s3.c` @kind object;
  #L460b00.  call temp:= `b`(v2) @signature `Ls3/c;.b:()J` @kind interface;
  #L460b06.  v2:= temp @kind wide;
  #L460b08.  v4:= v7.`s3.d0.r` @type ^`long` @kind wide;
  #L460b0c.  v2:= v2 - v4 @kind long;
  #L460b0e.  v4:= v7.`s3.d0.s` @type ^`v1.j2` @kind object;
  #L460b12.  v5:= v4.`v1.j2.o` @type ^`float`;
  #L460b16.  v6:= 1.0F;
  #L460b1a.  v5:= fcmpl(v5, v6);
  #L460b1e.  if v5 != 0 then goto L460b2c;
  #L460b22.  call temp:= `A0`(v2) @signature `Ls3/l0;.A0:(J)J` @kind static;
  #L460b28.  v2:= temp @kind wide;
  #L460b2a.  goto L460b34;
  #L460b2c.  call temp:= `a`(v4, v2) @signature `Lv1/j2;.a:(J)J` @kind virtual;
  #L460b32.  v2:= temp @kind wide;
  #L460b34.  v0:= v0 + v2 @kind long;
  #L460b36.  return v0 @kind wide;
}
