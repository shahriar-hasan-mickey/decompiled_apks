record `s3.z` @kind class @AccessFlag PUBLIC_FINAL {
  `byte`[] `s3.z.a` @AccessFlag PRIVATE;
  `int` `s3.z.b` @AccessFlag PRIVATE;
  `int` `s3.z.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`s3.z` v1 @kind this) @signature `Ls3/z;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45fca0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45fca6.  v0:= `@@s3.l0.f` @type ^`byte`[] @kind object;
  #L45fcaa.  v1.`s3.z.a` @type ^`byte`[] := v0 @kind object;
  #L45fcae.  return @kind void;
}
procedure `void` `<init>`(`s3.z` v1 @kind this, `int` v2 ) @signature `Ls3/z;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45fd04.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45fd0a.  v0:= new `byte`[v2];
  #L45fd0e.  v1.`s3.z.a` @type ^`byte`[] := v0 @kind object;
  #L45fd12.  v1.`s3.z.c` @type ^`int` := v2;
  #L45fd16.  return @kind void;
}
procedure `void` `<init>`(`s3.z` v0 @kind this, `byte`[] v1 @kind object) @signature `Ls3/z;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45fcc0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45fcc6.  v0.`s3.z.a` @type ^`byte`[] := v1 @kind object;
  #L45fcca.  v1:= length @variable v1;
  #L45fccc.  v0.`s3.z.c` @type ^`int` := v1;
  #L45fcd0.  return @kind void;
}
procedure `void` `<init>`(`s3.z` v0 @kind this, `byte`[] v1 @kind object, `int` v2 ) @signature `Ls3/z;.<init>:([BI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45fce4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45fcea.  v0.`s3.z.a` @type ^`byte`[] := v1 @kind object;
  #L45fcee.  v0.`s3.z.c` @type ^`int` := v2;
  #L45fcf2.  return @kind void;
}
procedure `java.lang.String` `A`(`s3.z` v3 @kind this, `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Ls3/z;.A:(ILjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45f7ec.  v0:= new `java.lang.String`;
  #L45f7f0.  v1:= v3.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f7f4.  v2:= v3.`s3.z.b` @type ^`int`;
  #L45f7f8.  call `<init>`(v0, v1, v2, v4, v5) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L45f7fe.  v5:= v3.`s3.z.b` @type ^`int`;
  #L45f802.  v5:= v5 + v4 @kind int;
  #L45f804.  v3.`s3.z.b` @type ^`int` := v5;
  #L45f808.  return v0 @kind object;
}
procedure `int` `B`(`s3.z` v4 @kind this) @signature `Ls3/z;.B:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f46c.  call temp:= `C`(v4) @signature `Ls3/z;.C:()I` @kind virtual;
  #L45f472.  v0:= temp;
  #L45f474.  call temp:= `C`(v4) @signature `Ls3/z;.C:()I` @kind virtual;
  #L45f47a.  v1:= temp;
  #L45f47c.  call temp:= `C`(v4) @signature `Ls3/z;.C:()I` @kind virtual;
  #L45f482.  v2:= temp;
  #L45f484.  call temp:= `C`(v4) @signature `Ls3/z;.C:()I` @kind virtual;
  #L45f48a.  v3:= temp;
  #L45f48c.  v0:= v0 ^< 21;
  #L45f490.  v1:= v1 ^< 14;
  #L45f494.  v0:= v0 ^| v1 @kind int;
  #L45f496.  v1:= v2 ^< 7;
  #L45f49a.  v0:= v0 ^| v1 @kind int;
  #L45f49c.  v0:= v0 ^| v3 @kind int;
  #L45f49e.  return v0;
}
procedure `int` `C`(`s3.z` v3 @kind this) @signature `Ls3/z;.C:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45f4b0.  v0:= v3.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f4b4.  v1:= v3.`s3.z.b` @type ^`int`;
  #L45f4b8.  v2:= v1 + 1;
  #L45f4bc.  v3.`s3.z.b` @type ^`int` := v2;
  #L45f4c0.  v0:= v0[v1] @kind byte;
  #L45f4c4.  v0:= v0 ^& 255;
  #L45f4c8.  return v0;
}
procedure `int` `D`(`s3.z` v4 @kind this) @signature `Ls3/z;.D:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f4dc.  v0:= v4.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f4e0.  v1:= v4.`s3.z.b` @type ^`int`;
  #L45f4e4.  v2:= v1 + 1;
  #L45f4e8.  v4.`s3.z.b` @type ^`int` := v2;
  #L45f4ec.  v1:= v0[v1] @kind byte;
  #L45f4f0.  v1:= v1 ^& 255;
  #L45f4f4.  v1:= v1 ^< 8;
  #L45f4f8.  v3:= v2 + 1;
  #L45f4fc.  v4.`s3.z.b` @type ^`int` := v3;
  #L45f500.  v0:= v0[v2] @kind byte;
  #L45f504.  v0:= v0 ^& 255;
  #L45f508.  v0:= v0 ^| v1 @kind int;
  #L45f50a.  v3:= v3 + 2;
  #L45f50e.  v4.`s3.z.b` @type ^`int` := v3;
  #L45f512.  return v0;
}
procedure `long` `E`(`s3.z` v9 @kind this) @signature `Ls3/z;.E:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L45fa50.  v0:= v9.`s3.z.a` @type ^`byte`[] @kind object;
  #L45fa54.  v1:= v9.`s3.z.b` @type ^`int`;
  #L45fa58.  v2:= v1 + 1;
  #L45fa5c.  v9.`s3.z.b` @type ^`int` := v2;
  #L45fa60.  v1:= v0[v1] @kind byte;
  #L45fa64.  v3:= (`long`) v1 @kind i2l;
  #L45fa66.  v5:= 255L;
  #L45fa6a.  v3:= v3 ^& v5 @kind long;
  #L45fa6c.  v1:= 24I;
  #L45fa70.  v3:= v3 ^< v1 @kind long;
  #L45fa72.  v1:= v2 + 1;
  #L45fa76.  v9.`s3.z.b` @type ^`int` := v1;
  #L45fa7a.  v2:= v0[v2] @kind byte;
  #L45fa7e.  v7:= (`long`) v2 @kind i2l;
  #L45fa80.  v7:= v7 ^& v5 @kind long;
  #L45fa82.  v2:= 16I;
  #L45fa86.  v7:= v7 ^< v2 @kind long;
  #L45fa88.  v2:= v3 ^| v7 @kind long;
  #L45fa8c.  v4:= v1 + 1;
  #L45fa90.  v9.`s3.z.b` @type ^`int` := v4;
  #L45fa94.  v1:= v0[v1] @kind byte;
  #L45fa98.  v7:= (`long`) v1 @kind i2l;
  #L45fa9a.  v7:= v7 ^& v5 @kind long;
  #L45fa9c.  v1:= 8I;
  #L45faa0.  v7:= v7 ^< v1 @kind long;
  #L45faa2.  v1:= v2 ^| v7 @kind long;
  #L45faa6.  v3:= v4 + 1;
  #L45faaa.  v9.`s3.z.b` @type ^`int` := v3;
  #L45faae.  v0:= v0[v4] @kind byte;
  #L45fab2.  v3:= (`long`) v0 @kind i2l;
  #L45fab4.  v3:= v3 ^& v5 @kind long;
  #L45fab6.  v0:= v1 ^| v3 @kind long;
  #L45faba.  return v0 @kind wide;
}
procedure `int` `F`(`s3.z` v4 @kind this) @signature `Ls3/z;.F:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f524.  v0:= v4.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f528.  v1:= v4.`s3.z.b` @type ^`int`;
  #L45f52c.  v2:= v1 + 1;
  #L45f530.  v4.`s3.z.b` @type ^`int` := v2;
  #L45f534.  v1:= v0[v1] @kind byte;
  #L45f538.  v1:= v1 ^& 255;
  #L45f53c.  v1:= v1 ^< 16;
  #L45f540.  v3:= v2 + 1;
  #L45f544.  v4.`s3.z.b` @type ^`int` := v3;
  #L45f548.  v2:= v0[v2] @kind byte;
  #L45f54c.  v2:= v2 ^& 255;
  #L45f550.  v2:= v2 ^< 8;
  #L45f554.  v1:= v1 ^| v2 @kind int;
  #L45f556.  v2:= v3 + 1;
  #L45f55a.  v4.`s3.z.b` @type ^`int` := v2;
  #L45f55e.  v0:= v0[v3] @kind byte;
  #L45f562.  v0:= v0 ^& 255;
  #L45f566.  v0:= v0 ^| v1 @kind int;
  #L45f568.  return v0;
}
procedure `int` `G`(`s3.z` v4 @kind this) @signature `Ls3/z;.G:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f57c.  call temp:= `m`(v4) @signature `Ls3/z;.m:()I` @kind virtual;
  #L45f582.  v0:= temp;
  #L45f584.  if v0 < 0 then goto L45f58a;
  #L45f588.  return v0;
  #L45f58a.  v1:= new `java.lang.IllegalStateException`;
  #L45f58e.  v2:= new `java.lang.StringBuilder`;
  #L45f592.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45f598.  v3:= "Top bit not zero: " @kind object;
  #L45f59c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45f5a2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45f5a8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45f5ae.  v0:= temp @kind object;
  #L45f5b0.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45f5b6.  throw v1;
}
procedure `long` `H`(`s3.z` v5 @kind this) @signature `Ls3/z;.H:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45facc.  call temp:= `v`(v5) @signature `Ls3/z;.v:()J` @kind virtual;
  #L45fad2.  v0:= temp @kind wide;
  #L45fad4.  v2:= 0L;
  #L45fad8.  v4:= lcmp(v0, v2);
  #L45fadc.  if v4 < 0 then goto L45fae2;
  #L45fae0.  return v0 @kind wide;
  #L45fae2.  v2:= new `java.lang.IllegalStateException`;
  #L45fae6.  v3:= new `java.lang.StringBuilder`;
  #L45faea.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45faf0.  v4:= "Top bit not zero: " @kind object;
  #L45faf4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45fafa.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L45fb00.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45fb06.  v0:= temp @kind object;
  #L45fb08.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45fb0e.  throw v2;
}
procedure `int` `I`(`s3.z` v4 @kind this) @signature `Ls3/z;.I:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f5c8.  v0:= v4.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f5cc.  v1:= v4.`s3.z.b` @type ^`int`;
  #L45f5d0.  v2:= v1 + 1;
  #L45f5d4.  v4.`s3.z.b` @type ^`int` := v2;
  #L45f5d8.  v1:= v0[v1] @kind byte;
  #L45f5dc.  v1:= v1 ^& 255;
  #L45f5e0.  v1:= v1 ^< 8;
  #L45f5e4.  v3:= v2 + 1;
  #L45f5e8.  v4.`s3.z.b` @type ^`int` := v3;
  #L45f5ec.  v0:= v0[v2] @kind byte;
  #L45f5f0.  v0:= v0 ^& 255;
  #L45f5f4.  v0:= v0 ^| v1 @kind int;
  #L45f5f6.  return v0;
}
procedure `long` `J`(`s3.z` v12 @kind this) @signature `Ls3/z;.J:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L45fb20.  v0:= v12.`s3.z.a` @type ^`byte`[] @kind object;
  #L45fb24.  v1:= v12.`s3.z.b` @type ^`int`;
  #L45fb28.  v0:= v0[v1] @kind byte;
  #L45fb2c.  v0:= (`long`) v0 @kind i2l;
  #L45fb2e.  v2:= 7I;
  #L45fb30.  v3:= 7I;
  #L45fb32.  v4:= 6I;
  #L45fb34.  v5:= 1I;
  #L45fb36.  if v3 < 0 then goto L45fb6a;
  #L45fb3a.  v6:= v5 ^< v3 @kind int;
  #L45fb3e.  v7:= (`long`) v6 @kind i2l;
  #L45fb40.  v7:= v7 ^& v0 @kind long;
  #L45fb42.  v9:= 0L;
  #L45fb46.  v11:= lcmp(v7, v9);
  #L45fb4a.  if v11 != 0 then goto L45fb64;
  #L45fb4e.  if v3 >= v4 then goto L45fb5c;
  #L45fb52.  v6:= v6 - v5 @kind int;
  #L45fb54.  v6:= (`long`) v6 @kind i2l;
  #L45fb56.  v0:= v0 ^& v6 @kind long;
  #L45fb58.  v2:= v2 - v3 @kind int;
  #L45fb5a.  goto L45fb6c;
  #L45fb5c.  if v3 != v2 then goto L45fb6a;
  #L45fb60.  v2:= 1I;
  #L45fb62.  goto L45fb6c;
  #L45fb64.  v3:= v3 + -1;
  #L45fb68.  goto L45fb32;
  #L45fb6a.  v2:= 0I;
  #L45fb6c.  if v2 == 0 then goto L45fbd8;
  #L45fb70.  if v5 >= v2 then goto L45fbcc;
  #L45fb74.  v3:= v12.`s3.z.a` @type ^`byte`[] @kind object;
  #L45fb78.  v6:= v12.`s3.z.b` @type ^`int`;
  #L45fb7c.  v6:= v6 + v5 @kind int;
  #L45fb7e.  v3:= v3[v6] @kind byte;
  #L45fb82.  v6:= v3 ^& 192;
  #L45fb86.  v7:= 128I;
  #L45fb8a.  if v6 != v7 then goto L45fb9e;
  #L45fb8e.  v0:= v0 ^< v4 @kind long;
  #L45fb90.  v3:= v3 ^& 63;
  #L45fb94.  v6:= (`long`) v3 @kind i2l;
  #L45fb96.  v0:= v0 ^| v6 @kind long;
  #L45fb98.  v5:= v5 + 1;
  #L45fb9c.  goto L45fb70;
  #L45fb9e.  v2:= new `java.lang.NumberFormatException`;
  #L45fba2.  v3:= new `java.lang.StringBuilder`;
  #L45fba6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45fbac.  v4:= "Invalid UTF-8 sequence continuation byte: " @kind object;
  #L45fbb0.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45fbb6.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L45fbbc.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45fbc2.  v0:= temp @kind object;
  #L45fbc4.  call `<init>`(v2, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45fbca.  throw v2;
  #L45fbcc.  v3:= v12.`s3.z.b` @type ^`int`;
  #L45fbd0.  v3:= v3 + v2 @kind int;
  #L45fbd2.  v12.`s3.z.b` @type ^`int` := v3;
  #L45fbd6.  return v0 @kind wide;
  #L45fbd8.  v2:= new `java.lang.NumberFormatException`;
  #L45fbdc.  v3:= new `java.lang.StringBuilder`;
  #L45fbe0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45fbe6.  v4:= "Invalid UTF-8 sequence first byte: " @kind object;
  #L45fbea.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45fbf0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L45fbf6.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45fbfc.  v0:= temp @kind object;
  #L45fbfe.  call `<init>`(v2, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45fc04.  throw v2;
}
procedure `void` `K`(`s3.z` v1 @kind this, `int` v2 ) @signature `Ls3/z;.K:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fde4.  call temp:= `b`(v1) @signature `Ls3/z;.b:()I` @kind virtual;
  #L45fdea.  v0:= temp;
  #L45fdec.  if v0 >= v2 then goto L45fdf6;
  #L45fdf0.  v0:= new `byte`[v2];
  #L45fdf4.  goto L45fdfa;
  #L45fdf6.  v0:= v1.`s3.z.a` @type ^`byte`[] @kind object;
  #L45fdfa.  call `M`(v1, v0, v2) @signature `Ls3/z;.M:([BI)V` @kind virtual;
  #L45fe00.  return @kind void;
}
procedure `void` `L`(`s3.z` v1 @kind this, `byte`[] v2 @kind object) @signature `Ls3/z;.L:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fda8.  v0:= length @variable v2;
  #L45fdaa.  call `M`(v1, v2, v0) @signature `Ls3/z;.M:([BI)V` @kind virtual;
  #L45fdb0.  return @kind void;
}
procedure `void` `M`(`s3.z` v0 @kind this, `byte`[] v1 @kind object, `int` v2 ) @signature `Ls3/z;.M:([BI)V` @AccessFlag PUBLIC {
    temp;

  #L45fdc4.  v0.`s3.z.a` @type ^`byte`[] := v1 @kind object;
  #L45fdc8.  v0.`s3.z.c` @type ^`int` := v2;
  #L45fdcc.  v1:= 0I;
  #L45fdce.  v0.`s3.z.b` @type ^`int` := v1;
  #L45fdd2.  return @kind void;
}
procedure `void` `N`(`s3.z` v1 @kind this, `int` v2 ) @signature `Ls3/z;.N:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fe14.  if v2 < 0 then goto L45fe26;
  #L45fe18.  v0:= v1.`s3.z.a` @type ^`byte`[] @kind object;
  #L45fe1c.  v0:= length @variable v0;
  #L45fe1e.  if v2 > v0 then goto L45fe26;
  #L45fe22.  v0:= 1I;
  #L45fe24.  goto L45fe28;
  #L45fe26.  v0:= 0I;
  #L45fe28.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L45fe2e.  v1.`s3.z.c` @type ^`int` := v2;
  #L45fe32.  return @kind void;
}
procedure `void` `O`(`s3.z` v1 @kind this, `int` v2 ) @signature `Ls3/z;.O:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fe44.  if v2 < 0 then goto L45fe54;
  #L45fe48.  v0:= v1.`s3.z.c` @type ^`int`;
  #L45fe4c.  if v2 > v0 then goto L45fe54;
  #L45fe50.  v0:= 1I;
  #L45fe52.  goto L45fe56;
  #L45fe54.  v0:= 0I;
  #L45fe56.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L45fe5c.  v1.`s3.z.b` @type ^`int` := v2;
  #L45fe60.  return @kind void;
}
procedure `void` `P`(`s3.z` v1 @kind this, `int` v2 ) @signature `Ls3/z;.P:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fe74.  v0:= v1.`s3.z.b` @type ^`int`;
  #L45fe78.  v0:= v0 + v2 @kind int;
  #L45fe7a.  call `O`(v1, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L45fe80.  return @kind void;
}
procedure `int` `a`(`s3.z` v2 @kind this) @signature `Ls3/z;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f224.  v0:= v2.`s3.z.c` @type ^`int`;
  #L45f228.  v1:= v2.`s3.z.b` @type ^`int`;
  #L45f22c.  v0:= v0 - v1 @kind int;
  #L45f22e.  return v0;
}
procedure `int` `b`(`s3.z` v1 @kind this) @signature `Ls3/z;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f240.  v0:= v1.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f244.  v0:= length @variable v0;
  #L45f246.  return v0;
}
procedure `void` `c`(`s3.z` v1 @kind this, `int` v2 ) @signature `Ls3/z;.c:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fd28.  call temp:= `b`(v1) @signature `Ls3/z;.b:()I` @kind virtual;
  #L45fd2e.  v0:= temp;
  #L45fd30.  if v2 <= v0 then goto L45fd44;
  #L45fd34.  v0:= v1.`s3.z.a` @type ^`byte`[] @kind object;
  #L45fd38.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L45fd3e.  v2:= temp @kind object;
  #L45fd40.  v1.`s3.z.a` @type ^`byte`[] := v2 @kind object;
  #L45fd44.  return @kind void;
}
procedure `byte`[] `d`(`s3.z` v1 @kind this) @signature `Ls3/z;.d:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f1b0.  v0:= v1.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f1b4.  return v0 @kind object;
}
procedure `int` `e`(`s3.z` v1 @kind this) @signature `Ls3/z;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f258.  v0:= v1.`s3.z.b` @type ^`int`;
  #L45f25c.  return v0;
}
procedure `int` `f`(`s3.z` v1 @kind this) @signature `Ls3/z;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f270.  v0:= v1.`s3.z.c` @type ^`int`;
  #L45f274.  return v0;
}
procedure `char` `g`(`s3.z` v3 @kind this) @signature `Ls3/z;.g:()C` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45f1c8.  v0:= v3.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f1cc.  v1:= v3.`s3.z.b` @type ^`int`;
  #L45f1d0.  v2:= v0[v1] @kind byte;
  #L45f1d4.  v2:= v2 ^& 255;
  #L45f1d8.  v2:= v2 ^< 8;
  #L45f1dc.  v1:= v1 + 1;
  #L45f1e0.  v0:= v0[v1] @kind byte;
  #L45f1e4.  v0:= v0 ^& 255;
  #L45f1e8.  v0:= v0 ^| v2 @kind int;
  #L45f1ea.  v0:= (`char`) v0 @kind i2c;
  #L45f1ec.  return v0;
}
procedure `int` `h`(`s3.z` v2 @kind this) @signature `Ls3/z;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f288.  v0:= v2.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f28c.  v1:= v2.`s3.z.b` @type ^`int`;
  #L45f290.  v0:= v0[v1] @kind byte;
  #L45f294.  v0:= v0 ^& 255;
  #L45f298.  return v0;
}
procedure `void` `i`(`s3.z` v2 @kind this, `s3.y` v3 @kind object, `int` v4 ) @signature `Ls3/z;.i:(Ls3/y;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fd84.  v0:= v3.`s3.y.a` @type ^`byte`[] @kind object;
  #L45fd88.  v1:= 0I;
  #L45fd8a.  call `j`(v2, v0, v1, v4) @signature `Ls3/z;.j:([BII)V` @kind virtual;
  #L45fd90.  call `p`(v3, v1) @signature `Ls3/y;.p:(I)V` @kind virtual;
  #L45fd96.  return @kind void;
}
procedure `void` `j`(`s3.z` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Ls3/z;.j:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fd58.  v0:= v2.`s3.z.a` @type ^`byte`[] @kind object;
  #L45fd5c.  v1:= v2.`s3.z.b` @type ^`int`;
  #L45fd60.  call `arraycopy`(v0, v1, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45fd66.  v3:= v2.`s3.z.b` @type ^`int`;
  #L45fd6a.  v3:= v3 + v5 @kind int;
  #L45fd6c.  v2.`s3.z.b` @type ^`int` := v3;
  #L45fd70.  return @kind void;
}
procedure `java.lang.String` `k`(`s3.z` v3 @kind this, `char` v4 ) @signature `Ls3/z;.k:(C)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45f608.  call temp:= `a`(v3) @signature `Ls3/z;.a:()I` @kind virtual;
  #L45f60e.  v0:= temp;
  #L45f610.  if v0 != 0 then goto L45f618;
  #L45f614.  v4:= 0I;
  #L45f616.  return v4 @kind object;
  #L45f618.  v0:= v3.`s3.z.b` @type ^`int`;
  #L45f61c.  v1:= v3.`s3.z.c` @type ^`int`;
  #L45f620.  if v0 >= v1 then goto L45f636;
  #L45f624.  v1:= v3.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f628.  v1:= v1[v0] @kind byte;
  #L45f62c.  if v1 == v4 then goto L45f636;
  #L45f630.  v0:= v0 + 1;
  #L45f634.  goto L45f61c;
  #L45f636.  v4:= v3.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f63a.  v1:= v3.`s3.z.b` @type ^`int`;
  #L45f63e.  v2:= v0 - v1 @kind int;
  #L45f642.  call temp:= `E`(v4, v1, v2) @signature `Ls3/l0;.E:([BII)Ljava/lang/String;` @kind static;
  #L45f648.  v4:= temp @kind object;
  #L45f64a.  v3.`s3.z.b` @type ^`int` := v0;
  #L45f64e.  v1:= v3.`s3.z.c` @type ^`int`;
  #L45f652.  if v0 >= v1 then goto L45f65e;
  #L45f656.  v0:= v0 + 1;
  #L45f65a.  v3.`s3.z.b` @type ^`int` := v0;
  #L45f65e.  return v4 @kind object;
}
procedure `double` `l`(`s3.z` v2 @kind this) @signature `Ls3/z;.l:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f200.  call temp:= `v`(v2) @signature `Ls3/z;.v:()J` @kind virtual;
  #L45f206.  v0:= temp @kind wide;
  #L45f208.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L45f20e.  v0:= temp @kind wide;
  #L45f210.  return v0 @kind wide;
}
procedure `int` `m`(`s3.z` v4 @kind this) @signature `Ls3/z;.m:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f2ac.  v0:= v4.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f2b0.  v1:= v4.`s3.z.b` @type ^`int`;
  #L45f2b4.  v2:= v1 + 1;
  #L45f2b8.  v4.`s3.z.b` @type ^`int` := v2;
  #L45f2bc.  v1:= v0[v1] @kind byte;
  #L45f2c0.  v1:= v1 ^& 255;
  #L45f2c4.  v1:= v1 ^< 24;
  #L45f2c8.  v3:= v2 + 1;
  #L45f2cc.  v4.`s3.z.b` @type ^`int` := v3;
  #L45f2d0.  v2:= v0[v2] @kind byte;
  #L45f2d4.  v2:= v2 ^& 255;
  #L45f2d8.  v2:= v2 ^< 16;
  #L45f2dc.  v1:= v1 ^| v2 @kind int;
  #L45f2de.  v2:= v3 + 1;
  #L45f2e2.  v4.`s3.z.b` @type ^`int` := v2;
  #L45f2e6.  v3:= v0[v3] @kind byte;
  #L45f2ea.  v3:= v3 ^& 255;
  #L45f2ee.  v3:= v3 ^< 8;
  #L45f2f2.  v1:= v1 ^| v3 @kind int;
  #L45f2f4.  v3:= v2 + 1;
  #L45f2f8.  v4.`s3.z.b` @type ^`int` := v3;
  #L45f2fc.  v0:= v0[v2] @kind byte;
  #L45f300.  v0:= v0 ^& 255;
  #L45f304.  v0:= v0 ^| v1 @kind int;
  #L45f306.  return v0;
}
procedure `int` `n`(`s3.z` v4 @kind this) @signature `Ls3/z;.n:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f318.  v0:= v4.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f31c.  v1:= v4.`s3.z.b` @type ^`int`;
  #L45f320.  v2:= v1 + 1;
  #L45f324.  v4.`s3.z.b` @type ^`int` := v2;
  #L45f328.  v1:= v0[v1] @kind byte;
  #L45f32c.  v1:= v1 ^& 255;
  #L45f330.  v1:= v1 ^< 24;
  #L45f334.  v1:= v1 ^> 8;
  #L45f338.  v3:= v2 + 1;
  #L45f33c.  v4.`s3.z.b` @type ^`int` := v3;
  #L45f340.  v2:= v0[v2] @kind byte;
  #L45f344.  v2:= v2 ^& 255;
  #L45f348.  v2:= v2 ^< 8;
  #L45f34c.  v1:= v1 ^| v2 @kind int;
  #L45f34e.  v2:= v3 + 1;
  #L45f352.  v4.`s3.z.b` @type ^`int` := v2;
  #L45f356.  v0:= v0[v3] @kind byte;
  #L45f35a.  v0:= v0 ^& 255;
  #L45f35e.  v0:= v0 ^| v1 @kind int;
  #L45f360.  return v0;
}
procedure `java.lang.String` `o`(`s3.z` v6 @kind this) @signature `Ls3/z;.o:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45f670.  call temp:= `a`(v6) @signature `Ls3/z;.a:()I` @kind virtual;
  #L45f676.  v0:= temp;
  #L45f678.  if v0 != 0 then goto L45f680;
  #L45f67c.  v0:= 0I;
  #L45f67e.  return v0 @kind object;
  #L45f680.  v0:= v6.`s3.z.b` @type ^`int`;
  #L45f684.  v1:= v6.`s3.z.c` @type ^`int`;
  #L45f688.  if v0 >= v1 then goto L45f6a6;
  #L45f68c.  v1:= v6.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f690.  v1:= v1[v0] @kind byte;
  #L45f694.  call temp:= `t0`(v1) @signature `Ls3/l0;.t0:(I)Z` @kind static;
  #L45f69a.  v1:= temp;
  #L45f69c.  if v1 != 0 then goto L45f6a6;
  #L45f6a0.  v0:= v0 + 1;
  #L45f6a4.  goto L45f684;
  #L45f6a6.  v1:= v6.`s3.z.b` @type ^`int`;
  #L45f6aa.  v2:= v0 - v1 @kind int;
  #L45f6ae.  v3:= 3I;
  #L45f6b0.  if v2 < v3 then goto L45f6ea;
  #L45f6b4.  v2:= v6.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f6b8.  v4:= v2[v1] @kind byte;
  #L45f6bc.  v5:= -17I;
  #L45f6c0.  if v4 != v5 then goto L45f6ea;
  #L45f6c4.  v4:= v1 + 1;
  #L45f6c8.  v4:= v2[v4] @kind byte;
  #L45f6cc.  v5:= -69I;
  #L45f6d0.  if v4 != v5 then goto L45f6ea;
  #L45f6d4.  v4:= v1 + 2;
  #L45f6d8.  v2:= v2[v4] @kind byte;
  #L45f6dc.  v4:= -65I;
  #L45f6e0.  if v2 != v4 then goto L45f6ea;
  #L45f6e4.  v1:= v1 + v3 @kind int;
  #L45f6e6.  v6.`s3.z.b` @type ^`int` := v1;
  #L45f6ea.  v1:= v6.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f6ee.  v2:= v6.`s3.z.b` @type ^`int`;
  #L45f6f2.  v3:= v0 - v2 @kind int;
  #L45f6f6.  call temp:= `E`(v1, v2, v3) @signature `Ls3/l0;.E:([BII)Ljava/lang/String;` @kind static;
  #L45f6fc.  v1:= temp @kind object;
  #L45f6fe.  v6.`s3.z.b` @type ^`int` := v0;
  #L45f702.  v2:= v6.`s3.z.c` @type ^`int`;
  #L45f706.  if v0 != v2 then goto L45f70c;
  #L45f70a.  return v1 @kind object;
  #L45f70c.  v3:= v6.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f710.  v4:= v3[v0] @kind byte;
  #L45f714.  v5:= 13I;
  #L45f718.  if v4 != v5 then goto L45f72a;
  #L45f71c.  v0:= v0 + 1;
  #L45f720.  v6.`s3.z.b` @type ^`int` := v0;
  #L45f724.  if v0 != v2 then goto L45f72a;
  #L45f728.  return v1 @kind object;
  #L45f72a.  v0:= v6.`s3.z.b` @type ^`int`;
  #L45f72e.  v2:= v3[v0] @kind byte;
  #L45f732.  v3:= 10I;
  #L45f736.  if v2 != v3 then goto L45f742;
  #L45f73a.  v0:= v0 + 1;
  #L45f73e.  v6.`s3.z.b` @type ^`int` := v0;
  #L45f742.  return v1 @kind object;
}
procedure `int` `p`(`s3.z` v4 @kind this) @signature `Ls3/z;.p:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f374.  v0:= v4.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f378.  v1:= v4.`s3.z.b` @type ^`int`;
  #L45f37c.  v2:= v1 + 1;
  #L45f380.  v4.`s3.z.b` @type ^`int` := v2;
  #L45f384.  v1:= v0[v1] @kind byte;
  #L45f388.  v1:= v1 ^& 255;
  #L45f38c.  v3:= v2 + 1;
  #L45f390.  v4.`s3.z.b` @type ^`int` := v3;
  #L45f394.  v2:= v0[v2] @kind byte;
  #L45f398.  v2:= v2 ^& 255;
  #L45f39c.  v2:= v2 ^< 8;
  #L45f3a0.  v1:= v1 ^| v2 @kind int;
  #L45f3a2.  v2:= v3 + 1;
  #L45f3a6.  v4.`s3.z.b` @type ^`int` := v2;
  #L45f3aa.  v3:= v0[v3] @kind byte;
  #L45f3ae.  v3:= v3 ^& 255;
  #L45f3b2.  v3:= v3 ^< 16;
  #L45f3b6.  v1:= v1 ^| v3 @kind int;
  #L45f3b8.  v3:= v2 + 1;
  #L45f3bc.  v4.`s3.z.b` @type ^`int` := v3;
  #L45f3c0.  v0:= v0[v2] @kind byte;
  #L45f3c4.  v0:= v0 ^& 255;
  #L45f3c8.  v0:= v0 ^< 24;
  #L45f3cc.  v0:= v0 ^| v1 @kind int;
  #L45f3ce.  return v0;
}
procedure `long` `q`(`s3.z` v9 @kind this) @signature `Ls3/z;.q:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L45f81c.  v0:= v9.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f820.  v1:= v9.`s3.z.b` @type ^`int`;
  #L45f824.  v2:= v1 + 1;
  #L45f828.  v9.`s3.z.b` @type ^`int` := v2;
  #L45f82c.  v1:= v0[v1] @kind byte;
  #L45f830.  v3:= (`long`) v1 @kind i2l;
  #L45f832.  v5:= 255L;
  #L45f836.  v3:= v3 ^& v5 @kind long;
  #L45f838.  v1:= v2 + 1;
  #L45f83c.  v9.`s3.z.b` @type ^`int` := v1;
  #L45f840.  v2:= v0[v2] @kind byte;
  #L45f844.  v7:= (`long`) v2 @kind i2l;
  #L45f846.  v7:= v7 ^& v5 @kind long;
  #L45f848.  v2:= 8I;
  #L45f84c.  v7:= v7 ^< v2 @kind long;
  #L45f84e.  v2:= v3 ^| v7 @kind long;
  #L45f852.  v4:= v1 + 1;
  #L45f856.  v9.`s3.z.b` @type ^`int` := v4;
  #L45f85a.  v1:= v0[v1] @kind byte;
  #L45f85e.  v7:= (`long`) v1 @kind i2l;
  #L45f860.  v7:= v7 ^& v5 @kind long;
  #L45f862.  v1:= 16I;
  #L45f866.  v7:= v7 ^< v1 @kind long;
  #L45f868.  v1:= v2 ^| v7 @kind long;
  #L45f86c.  v3:= v4 + 1;
  #L45f870.  v9.`s3.z.b` @type ^`int` := v3;
  #L45f874.  v4:= v0[v4] @kind byte;
  #L45f878.  v7:= (`long`) v4 @kind i2l;
  #L45f87a.  v7:= v7 ^& v5 @kind long;
  #L45f87c.  v4:= 24I;
  #L45f880.  v7:= v7 ^< v4 @kind long;
  #L45f882.  v1:= v1 ^| v7 @kind long;
  #L45f884.  v4:= v3 + 1;
  #L45f888.  v9.`s3.z.b` @type ^`int` := v4;
  #L45f88c.  v3:= v0[v3] @kind byte;
  #L45f890.  v7:= (`long`) v3 @kind i2l;
  #L45f892.  v7:= v7 ^& v5 @kind long;
  #L45f894.  v3:= 32I;
  #L45f898.  v7:= v7 ^< v3 @kind long;
  #L45f89a.  v1:= v1 ^| v7 @kind long;
  #L45f89c.  v3:= v4 + 1;
  #L45f8a0.  v9.`s3.z.b` @type ^`int` := v3;
  #L45f8a4.  v4:= v0[v4] @kind byte;
  #L45f8a8.  v7:= (`long`) v4 @kind i2l;
  #L45f8aa.  v7:= v7 ^& v5 @kind long;
  #L45f8ac.  v4:= 40I;
  #L45f8b0.  v7:= v7 ^< v4 @kind long;
  #L45f8b2.  v1:= v1 ^| v7 @kind long;
  #L45f8b4.  v4:= v3 + 1;
  #L45f8b8.  v9.`s3.z.b` @type ^`int` := v4;
  #L45f8bc.  v3:= v0[v3] @kind byte;
  #L45f8c0.  v7:= (`long`) v3 @kind i2l;
  #L45f8c2.  v7:= v7 ^& v5 @kind long;
  #L45f8c4.  v3:= 48I;
  #L45f8c8.  v7:= v7 ^< v3 @kind long;
  #L45f8ca.  v1:= v1 ^| v7 @kind long;
  #L45f8cc.  v3:= v4 + 1;
  #L45f8d0.  v9.`s3.z.b` @type ^`int` := v3;
  #L45f8d4.  v0:= v0[v4] @kind byte;
  #L45f8d8.  v3:= (`long`) v0 @kind i2l;
  #L45f8da.  v3:= v3 ^& v5 @kind long;
  #L45f8dc.  v0:= 56I;
  #L45f8e0.  v3:= v3 ^< v0 @kind long;
  #L45f8e2.  v0:= v1 ^| v3 @kind long;
  #L45f8e6.  return v0 @kind wide;
}
procedure `short` `r`(`s3.z` v4 @kind this) @signature `Ls3/z;.r:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45fc18.  v0:= v4.`s3.z.a` @type ^`byte`[] @kind object;
  #L45fc1c.  v1:= v4.`s3.z.b` @type ^`int`;
  #L45fc20.  v2:= v1 + 1;
  #L45fc24.  v4.`s3.z.b` @type ^`int` := v2;
  #L45fc28.  v1:= v0[v1] @kind byte;
  #L45fc2c.  v1:= v1 ^& 255;
  #L45fc30.  v3:= v2 + 1;
  #L45fc34.  v4.`s3.z.b` @type ^`int` := v3;
  #L45fc38.  v0:= v0[v2] @kind byte;
  #L45fc3c.  v0:= v0 ^& 255;
  #L45fc40.  v0:= v0 ^< 8;
  #L45fc44.  v0:= v0 ^| v1 @kind int;
  #L45fc46.  v0:= (`short`) v0 @kind i2s;
  #L45fc48.  return v0;
}
procedure `long` `s`(`s3.z` v9 @kind this) @signature `Ls3/z;.s:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L45f8f8.  v0:= v9.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f8fc.  v1:= v9.`s3.z.b` @type ^`int`;
  #L45f900.  v2:= v1 + 1;
  #L45f904.  v9.`s3.z.b` @type ^`int` := v2;
  #L45f908.  v1:= v0[v1] @kind byte;
  #L45f90c.  v3:= (`long`) v1 @kind i2l;
  #L45f90e.  v5:= 255L;
  #L45f912.  v3:= v3 ^& v5 @kind long;
  #L45f914.  v1:= v2 + 1;
  #L45f918.  v9.`s3.z.b` @type ^`int` := v1;
  #L45f91c.  v2:= v0[v2] @kind byte;
  #L45f920.  v7:= (`long`) v2 @kind i2l;
  #L45f922.  v7:= v7 ^& v5 @kind long;
  #L45f924.  v2:= 8I;
  #L45f928.  v7:= v7 ^< v2 @kind long;
  #L45f92a.  v2:= v3 ^| v7 @kind long;
  #L45f92e.  v4:= v1 + 1;
  #L45f932.  v9.`s3.z.b` @type ^`int` := v4;
  #L45f936.  v1:= v0[v1] @kind byte;
  #L45f93a.  v7:= (`long`) v1 @kind i2l;
  #L45f93c.  v7:= v7 ^& v5 @kind long;
  #L45f93e.  v1:= 16I;
  #L45f942.  v7:= v7 ^< v1 @kind long;
  #L45f944.  v1:= v2 ^| v7 @kind long;
  #L45f948.  v3:= v4 + 1;
  #L45f94c.  v9.`s3.z.b` @type ^`int` := v3;
  #L45f950.  v0:= v0[v4] @kind byte;
  #L45f954.  v3:= (`long`) v0 @kind i2l;
  #L45f956.  v3:= v3 ^& v5 @kind long;
  #L45f958.  v0:= 24I;
  #L45f95c.  v3:= v3 ^< v0 @kind long;
  #L45f95e.  v0:= v1 ^| v3 @kind long;
  #L45f962.  return v0 @kind wide;
}
procedure `int` `t`(`s3.z` v4 @kind this) @signature `Ls3/z;.t:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f3e0.  call temp:= `p`(v4) @signature `Ls3/z;.p:()I` @kind virtual;
  #L45f3e6.  v0:= temp;
  #L45f3e8.  if v0 < 0 then goto L45f3ee;
  #L45f3ec.  return v0;
  #L45f3ee.  v1:= new `java.lang.IllegalStateException`;
  #L45f3f2.  v2:= new `java.lang.StringBuilder`;
  #L45f3f6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45f3fc.  v3:= "Top bit not zero: " @kind object;
  #L45f400.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45f406.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45f40c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45f412.  v0:= temp @kind object;
  #L45f414.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45f41a.  throw v1;
}
procedure `int` `u`(`s3.z` v4 @kind this) @signature `Ls3/z;.u:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f42c.  v0:= v4.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f430.  v1:= v4.`s3.z.b` @type ^`int`;
  #L45f434.  v2:= v1 + 1;
  #L45f438.  v4.`s3.z.b` @type ^`int` := v2;
  #L45f43c.  v1:= v0[v1] @kind byte;
  #L45f440.  v1:= v1 ^& 255;
  #L45f444.  v3:= v2 + 1;
  #L45f448.  v4.`s3.z.b` @type ^`int` := v3;
  #L45f44c.  v0:= v0[v2] @kind byte;
  #L45f450.  v0:= v0 ^& 255;
  #L45f454.  v0:= v0 ^< 8;
  #L45f458.  v0:= v0 ^| v1 @kind int;
  #L45f45a.  return v0;
}
procedure `long` `v`(`s3.z` v9 @kind this) @signature `Ls3/z;.v:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L45f974.  v0:= v9.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f978.  v1:= v9.`s3.z.b` @type ^`int`;
  #L45f97c.  v2:= v1 + 1;
  #L45f980.  v9.`s3.z.b` @type ^`int` := v2;
  #L45f984.  v1:= v0[v1] @kind byte;
  #L45f988.  v3:= (`long`) v1 @kind i2l;
  #L45f98a.  v5:= 255L;
  #L45f98e.  v3:= v3 ^& v5 @kind long;
  #L45f990.  v1:= 56I;
  #L45f994.  v3:= v3 ^< v1 @kind long;
  #L45f996.  v1:= v2 + 1;
  #L45f99a.  v9.`s3.z.b` @type ^`int` := v1;
  #L45f99e.  v2:= v0[v2] @kind byte;
  #L45f9a2.  v7:= (`long`) v2 @kind i2l;
  #L45f9a4.  v7:= v7 ^& v5 @kind long;
  #L45f9a6.  v2:= 48I;
  #L45f9aa.  v7:= v7 ^< v2 @kind long;
  #L45f9ac.  v2:= v3 ^| v7 @kind long;
  #L45f9b0.  v4:= v1 + 1;
  #L45f9b4.  v9.`s3.z.b` @type ^`int` := v4;
  #L45f9b8.  v1:= v0[v1] @kind byte;
  #L45f9bc.  v7:= (`long`) v1 @kind i2l;
  #L45f9be.  v7:= v7 ^& v5 @kind long;
  #L45f9c0.  v1:= 40I;
  #L45f9c4.  v7:= v7 ^< v1 @kind long;
  #L45f9c6.  v1:= v2 ^| v7 @kind long;
  #L45f9ca.  v3:= v4 + 1;
  #L45f9ce.  v9.`s3.z.b` @type ^`int` := v3;
  #L45f9d2.  v4:= v0[v4] @kind byte;
  #L45f9d6.  v7:= (`long`) v4 @kind i2l;
  #L45f9d8.  v7:= v7 ^& v5 @kind long;
  #L45f9da.  v4:= 32I;
  #L45f9de.  v7:= v7 ^< v4 @kind long;
  #L45f9e0.  v1:= v1 ^| v7 @kind long;
  #L45f9e2.  v4:= v3 + 1;
  #L45f9e6.  v9.`s3.z.b` @type ^`int` := v4;
  #L45f9ea.  v3:= v0[v3] @kind byte;
  #L45f9ee.  v7:= (`long`) v3 @kind i2l;
  #L45f9f0.  v7:= v7 ^& v5 @kind long;
  #L45f9f2.  v3:= 24I;
  #L45f9f6.  v7:= v7 ^< v3 @kind long;
  #L45f9f8.  v1:= v1 ^| v7 @kind long;
  #L45f9fa.  v3:= v4 + 1;
  #L45f9fe.  v9.`s3.z.b` @type ^`int` := v3;
  #L45fa02.  v4:= v0[v4] @kind byte;
  #L45fa06.  v7:= (`long`) v4 @kind i2l;
  #L45fa08.  v7:= v7 ^& v5 @kind long;
  #L45fa0a.  v4:= 16I;
  #L45fa0e.  v7:= v7 ^< v4 @kind long;
  #L45fa10.  v1:= v1 ^| v7 @kind long;
  #L45fa12.  v4:= v3 + 1;
  #L45fa16.  v9.`s3.z.b` @type ^`int` := v4;
  #L45fa1a.  v3:= v0[v3] @kind byte;
  #L45fa1e.  v7:= (`long`) v3 @kind i2l;
  #L45fa20.  v7:= v7 ^& v5 @kind long;
  #L45fa22.  v3:= 8I;
  #L45fa26.  v7:= v7 ^< v3 @kind long;
  #L45fa28.  v1:= v1 ^| v7 @kind long;
  #L45fa2a.  v3:= v4 + 1;
  #L45fa2e.  v9.`s3.z.b` @type ^`int` := v3;
  #L45fa32.  v0:= v0[v4] @kind byte;
  #L45fa36.  v3:= (`long`) v0 @kind i2l;
  #L45fa38.  v3:= v3 ^& v5 @kind long;
  #L45fa3a.  v0:= v1 ^| v3 @kind long;
  #L45fa3e.  return v0 @kind wide;
}
procedure `java.lang.String` `w`(`s3.z` v1 @kind this) @signature `Ls3/z;.w:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f754.  v0:= 0I;
  #L45f756.  call temp:= `k`(v1, v0) @signature `Ls3/z;.k:(C)Ljava/lang/String;` @kind virtual;
  #L45f75c.  v0:= temp @kind object;
  #L45f75e.  return v0 @kind object;
}
procedure `java.lang.String` `x`(`s3.z` v3 @kind this, `int` v4 ) @signature `Ls3/z;.x:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45f770.  if v4 != 0 then goto L45f77a;
  #L45f774.  v4:= "" @kind object;
  #L45f778.  return v4 @kind object;
  #L45f77a.  v0:= v3.`s3.z.b` @type ^`int`;
  #L45f77e.  v1:= v0 + v4 @kind int;
  #L45f782.  v1:= v1 + -1;
  #L45f786.  v2:= v3.`s3.z.c` @type ^`int`;
  #L45f78a.  if v1 >= v2 then goto L45f7a0;
  #L45f78e.  v2:= v3.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f792.  v1:= v2[v1] @kind byte;
  #L45f796.  if v1 != 0 then goto L45f7a0;
  #L45f79a.  v1:= v4 + -1;
  #L45f79e.  goto L45f7a2;
  #L45f7a0.  v1:= v4;
  #L45f7a2.  v2:= v3.`s3.z.a` @type ^`byte`[] @kind object;
  #L45f7a6.  call temp:= `E`(v2, v0, v1) @signature `Ls3/l0;.E:([BII)Ljava/lang/String;` @kind static;
  #L45f7ac.  v0:= temp @kind object;
  #L45f7ae.  v1:= v3.`s3.z.b` @type ^`int`;
  #L45f7b2.  v1:= v1 + v4 @kind int;
  #L45f7b4.  v3.`s3.z.b` @type ^`int` := v1;
  #L45f7b8.  return v0 @kind object;
}
procedure `short` `y`(`s3.z` v4 @kind this) @signature `Ls3/z;.y:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45fc5c.  v0:= v4.`s3.z.a` @type ^`byte`[] @kind object;
  #L45fc60.  v1:= v4.`s3.z.b` @type ^`int`;
  #L45fc64.  v2:= v1 + 1;
  #L45fc68.  v4.`s3.z.b` @type ^`int` := v2;
  #L45fc6c.  v1:= v0[v1] @kind byte;
  #L45fc70.  v1:= v1 ^& 255;
  #L45fc74.  v1:= v1 ^< 8;
  #L45fc78.  v3:= v2 + 1;
  #L45fc7c.  v4.`s3.z.b` @type ^`int` := v3;
  #L45fc80.  v0:= v0[v2] @kind byte;
  #L45fc84.  v0:= v0 ^& 255;
  #L45fc88.  v0:= v0 ^| v1 @kind int;
  #L45fc8a.  v0:= (`short`) v0 @kind i2s;
  #L45fc8c.  return v0;
}
procedure `java.lang.String` `z`(`s3.z` v1 @kind this, `int` v2 ) @signature `Ls3/z;.z:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f7cc.  v0:= `@@l5.d.c` @type ^`java.nio.charset.Charset` @kind object;
  #L45f7d0.  call temp:= `A`(v1, v2, v0) @signature `Ls3/z;.A:(ILjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L45f7d6.  v2:= temp @kind object;
  #L45f7d8.  return v2 @kind object;
}
