record `vc.c$a` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`vc.c$a` v0 @kind this) @signature `Lvc/c$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a7ee8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a7eee.  return @kind void;
}
procedure `int` `a`(`vc.c$a` v4 @kind this, `vc.c` v5 @kind object, `vc.c` v6 @kind object) @signature `Lvc/c$a;.a:(Lvc/c;Lvc/c;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a7e80.  call temp:= `h0`(v5) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a7e86.  v0:= temp @kind object;
  #L4a7e88.  call temp:= `g0`(v0) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a7e8e.  v0:= temp @kind wide;
  #L4a7e90.  call temp:= `h0`(v6) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a7e96.  v2:= temp @kind object;
  #L4a7e98.  call temp:= `g0`(v2) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a7e9e.  v2:= temp @kind wide;
  #L4a7ea0.  call temp:= `b`(v0, v2) @signature `Lxc/d;.b:(JJ)I` @kind static;
  #L4a7ea6.  v0:= temp;
  #L4a7ea8.  if v0 != 0 then goto L4a7ed4;
  #L4a7eac.  call temp:= `i0`(v5) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a7eb2.  v5:= temp @kind object;
  #L4a7eb4.  call temp:= `t0`(v5) @signature `Luc/h;.t0:()J` @kind virtual;
  #L4a7eba.  v0:= temp @kind wide;
  #L4a7ebc.  call temp:= `i0`(v6) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a7ec2.  v5:= temp @kind object;
  #L4a7ec4.  call temp:= `t0`(v5) @signature `Luc/h;.t0:()J` @kind virtual;
  #L4a7eca.  v5:= temp @kind wide;
  #L4a7ecc.  call temp:= `b`(v0, v5) @signature `Lxc/d;.b:(JJ)I` @kind static;
  #L4a7ed2.  v0:= temp;
  #L4a7ed4.  return v0;
}
procedure `int` `compare`(`vc.c$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lvc/c$a;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a7e5c.  v1:= (`vc.c`) v1 @kind object;
  #L4a7e60.  v2:= (`vc.c`) v2 @kind object;
  #L4a7e64.  call temp:= `a`(v0, v1, v2) @signature `Lvc/c$a;.a:(Lvc/c;Lvc/c;)I` @kind virtual;
  #L4a7e6a.  v1:= temp;
  #L4a7e6c.  return v1;
}
