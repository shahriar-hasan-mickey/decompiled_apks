record `vc.l` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `vc.i` @kind interface {
}
global `vc.l` `@@vc.l.o` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `vc.l` `@@vc.l.p` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `vc.l`[] `@@vc.l.q` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lvc/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ace64.  v0:= new `vc.l`;
  #L4ace68.  v1:= "BEFORE_AH" @kind object;
  #L4ace6c.  v2:= 0I;
  #L4ace6e.  call `<init>`(v0, v1, v2) @signature `Lvc/l;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ace74.  `@@vc.l.o` @type ^`vc.l` := v0 @kind object;
  #L4ace78.  v1:= new `vc.l`;
  #L4ace7c.  v3:= "AH" @kind object;
  #L4ace80.  v4:= 1I;
  #L4ace82.  call `<init>`(v1, v3, v4) @signature `Lvc/l;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ace88.  `@@vc.l.p` @type ^`vc.l` := v1 @kind object;
  #L4ace8c.  v3:= 2I;
  #L4ace8e.  v3:= new `vc.l`[v3];
  #L4ace92.  v3[v2]:= v0 @kind object;
  #L4ace96.  v3[v4]:= v1 @kind object;
  #L4ace9a.  `@@vc.l.q` @type ^`vc.l`[] := v3 @kind object;
  #L4ace9e.  return @kind void;
}
procedure `void` `<init>`(`vc.l` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lvc/l;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4aceb0.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4aceb6.  return @kind void;
}
procedure `vc.l` `c`(`int` v1 ) @signature `Lvc/l;.c:(I)Lvc/l;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4acdc0.  if v1 == 0 then goto L4acde0;
  #L4acdc4.  v0:= 1I;
  #L4acdc6.  if v1 != v0 then goto L4acdd0;
  #L4acdca.  v1:= `@@vc.l.p` @type ^`vc.l` @kind object;
  #L4acdce.  return v1 @kind object;
  #L4acdd0.  v1:= new `uc.b`;
  #L4acdd4.  v0:= "HijrahEra not valid" @kind object;
  #L4acdd8.  call `<init>`(v1, v0) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4acdde.  throw v1;
  #L4acde0.  v1:= `@@vc.l.o` @type ^`vc.l` @kind object;
  #L4acde4.  return v1 @kind object;
}
procedure `vc.l` `h`(`java.io.DataInput` v0 @kind object) @signature `Lvc/l;.h:(Ljava/io/DataInput;)Lvc/l;` @AccessFlag STATIC {
    temp;

  #L4acdf8.  call temp:= `readByte`(v0) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L4acdfe.  v0:= temp;
  #L4ace00.  call temp:= `c`(v0) @signature `Lvc/l;.c:(I)Lvc/l;` @kind static;
  #L4ace06.  v0:= temp @kind object;
  #L4ace08.  return v0 @kind object;
}
procedure `vc.l` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lvc/l;.valueOf:(Ljava/lang/String;)Lvc/l;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ace1c.  v0:= constclass @type ^`vc.l` @kind object;
  #L4ace20.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L4ace26.  v1:= temp @kind object;
  #L4ace28.  v1:= (`vc.l`) v1 @kind object;
  #L4ace2c.  return v1 @kind object;
}
procedure `vc.l`[] `values`() @signature `Lvc/l;.values:()[Lvc/l;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ace40.  v0:= `@@vc.l.q` @type ^`vc.l`[] @kind object;
  #L4ace44.  call temp:= `clone`(v0) @signature `[Lvc/l;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4ace4a.  v0:= temp @kind object;
  #L4ace4c.  v0:= (`vc.l`[]) v0 @kind object;
  #L4ace50.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`vc.l` v2 @kind this) @signature `Lvc/l;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4acd3c.  v0:= new `vc.u`;
  #L4acd40.  v1:= 4I;
  #L4acd42.  call `<init>`(v0, v1, v2) @signature `Lvc/u;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L4acd48.  return v0 @kind object;
}
procedure `long` `B`(`vc.l` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/l;.B:(Lyc/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4acd5c.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4acd60.  if v4 != v0 then goto L4acd70;
  #L4acd64.  call temp:= `getValue`(v3) @signature `Lvc/l;.getValue:()I` @kind virtual;
  #L4acd6a.  v4:= temp;
  #L4acd6c.  v0:= (`long`) v4 @kind i2l;
  #L4acd6e.  return v0 @kind wide;
  #L4acd70.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4acd74.  if v0 != 0 then goto L4acd82;
  #L4acd78.  call temp:= `o`(v4, v3) @signature `Lyc/i;.o:(Lyc/e;)J` @kind interface;
  #L4acd7e.  v0:= temp @kind wide;
  #L4acd80.  return v0 @kind wide;
  #L4acd82.  v0:= new `yc.m`;
  #L4acd86.  v1:= new `java.lang.StringBuilder`;
  #L4acd8a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4acd90.  v2:= "Unsupported field: " @kind object;
  #L4acd94.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4acd9a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4acda0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4acda6.  v4:= temp @kind object;
  #L4acda8.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4acdae.  throw v0;
}
procedure `int` `F`(`vc.l` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/l;.F:(Lyc/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4acc48.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4acc4c.  if v4 != v0 then goto L4acc5a;
  #L4acc50.  call temp:= `getValue`(v3) @signature `Lvc/l;.getValue:()I` @kind virtual;
  #L4acc56.  v4:= temp;
  #L4acc58.  return v4;
  #L4acc5a.  call temp:= `t`(v3, v4) @signature `Lvc/l;.t:(Lyc/i;)Lyc/n;` @kind virtual;
  #L4acc60.  v0:= temp @kind object;
  #L4acc62.  call temp:= `B`(v3, v4) @signature `Lvc/l;.B:(Lyc/i;)J` @kind virtual;
  #L4acc68.  v1:= temp @kind wide;
  #L4acc6a.  call temp:= `a`(v0, v1, v4) @signature `Lyc/n;.a:(JLyc/i;)I` @kind virtual;
  #L4acc70.  v4:= temp;
  #L4acc72.  return v4;
}
procedure `yc.d` `I`(`vc.l` v3 @kind this, `yc.d` v4 @kind object) @signature `Lvc/l;.I:(Lyc/d;)Lyc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4acee8.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4aceec.  call temp:= `getValue`(v3) @signature `Lvc/l;.getValue:()I` @kind virtual;
  #L4acef2.  v1:= temp;
  #L4acef4.  v1:= (`long`) v1 @kind i2l;
  #L4acef6.  call temp:= `P`(v4, v0, v1) @signature `Lyc/d;.P:(Lyc/i;J)Lyc/d;` @kind interface;
  #L4acefc.  v4:= temp @kind object;
  #L4acefe.  return v4 @kind object;
}
procedure `boolean` `d`(`vc.l` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/l;.d:(Lyc/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4acc08.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4acc0c.  v1:= 1I;
  #L4acc0e.  v2:= 0I;
  #L4acc10.  if v0 == 0 then goto L4acc22;
  #L4acc14.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4acc18.  if v4 != v0 then goto L4acc1e;
  #L4acc1c.  goto L4acc20;
  #L4acc1e.  v1:= 0I;
  #L4acc20.  return v1;
  #L4acc22.  if v4 == 0 then goto L4acc34;
  #L4acc26.  call temp:= `j`(v4, v3) @signature `Lyc/i;.j:(Lyc/e;)Z` @kind interface;
  #L4acc2c.  v4:= temp;
  #L4acc2e.  if v4 == 0 then goto L4acc34;
  #L4acc32.  goto L4acc36;
  #L4acc34.  v1:= 0I;
  #L4acc36.  return v1;
}
procedure `int` `e`(`vc.l` v1 @kind this, `int` v2 ) @signature `Lvc/l;.e:(I)I` @AccessFlag  {
    temp;
    v0;

  #L4acca0.  v0:= `@@vc.l.p` @type ^`vc.l` @kind object;
  #L4acca4.  if v1 != v0 then goto L4accaa;
  #L4acca8.  goto L4accae;
  #L4accaa.  v2:= v2 - 1;
  #L4accae.  return v2;
}
procedure `int` `getValue`(`vc.l` v1 @kind this) @signature `Lvc/l;.getValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4acc84.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4acc8a.  v0:= temp;
  #L4acc8c.  return v0;
}
procedure `void` `i`(`vc.l` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Lvc/l;.i:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L4acec8.  call temp:= `getValue`(v1) @signature `Lvc/l;.getValue:()I` @kind virtual;
  #L4acece.  v0:= temp;
  #L4aced0.  call `writeByte`(v2, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L4aced6.  return @kind void;
}
procedure `java.lang.Object` `j`(`vc.l` v1 @kind this, `yc.k` v2 @kind object) @signature `Lvc/l;.j:(Lyc/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4accc0.  call temp:= `e`() @signature `Lyc/j;.e:()Lyc/k;` @kind static;
  #L4accc6.  v0:= temp @kind object;
  #L4accc8.  if v2 != v0 then goto L4accd2;
  #L4acccc.  v2:= `@@yc.b.D` @type ^`yc.b` @kind object;
  #L4accd0.  return v2 @kind object;
  #L4accd2.  call temp:= `a`() @signature `Lyc/j;.a:()Lyc/k;` @kind static;
  #L4accd8.  v0:= temp @kind object;
  #L4accda.  if v2 == v0 then goto L4acd26;
  #L4accde.  call temp:= `f`() @signature `Lyc/j;.f:()Lyc/k;` @kind static;
  #L4acce4.  v0:= temp @kind object;
  #L4acce6.  if v2 == v0 then goto L4acd26;
  #L4accea.  call temp:= `g`() @signature `Lyc/j;.g:()Lyc/k;` @kind static;
  #L4accf0.  v0:= temp @kind object;
  #L4accf2.  if v2 == v0 then goto L4acd26;
  #L4accf6.  call temp:= `d`() @signature `Lyc/j;.d:()Lyc/k;` @kind static;
  #L4accfc.  v0:= temp @kind object;
  #L4accfe.  if v2 == v0 then goto L4acd26;
  #L4acd02.  call temp:= `b`() @signature `Lyc/j;.b:()Lyc/k;` @kind static;
  #L4acd08.  v0:= temp @kind object;
  #L4acd0a.  if v2 == v0 then goto L4acd26;
  #L4acd0e.  call temp:= `c`() @signature `Lyc/j;.c:()Lyc/k;` @kind static;
  #L4acd14.  v0:= temp @kind object;
  #L4acd16.  if v2 != v0 then goto L4acd1c;
  #L4acd1a.  goto L4acd26;
  #L4acd1c.  call temp:= `a`(v2, v1) @signature `Lyc/k;.a:(Lyc/e;)Ljava/lang/Object;` @kind interface;
  #L4acd22.  v2:= temp @kind object;
  #L4acd24.  return v2 @kind object;
  #L4acd26.  v2:= 0I;
  #L4acd28.  return v2 @kind object;
}
procedure `yc.n` `t`(`vc.l` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/l;.t:(Lyc/i;)Lyc/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4acf10.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4acf14.  if v4 != v0 then goto L4acf26;
  #L4acf18.  v0:= 1L;
  #L4acf1c.  call temp:= `i`(v0, v0) @signature `Lyc/n;.i:(JJ)Lyc/n;` @kind static;
  #L4acf22.  v4:= temp @kind object;
  #L4acf24.  return v4 @kind object;
  #L4acf26.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4acf2a.  if v0 != 0 then goto L4acf38;
  #L4acf2e.  call temp:= `h`(v4, v3) @signature `Lyc/i;.h:(Lyc/e;)Lyc/n;` @kind interface;
  #L4acf34.  v4:= temp @kind object;
  #L4acf36.  return v4 @kind object;
  #L4acf38.  v0:= new `yc.m`;
  #L4acf3c.  v1:= new `java.lang.StringBuilder`;
  #L4acf40.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4acf46.  v2:= "Unsupported field: " @kind object;
  #L4acf4a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4acf50.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4acf56.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4acf5c.  v4:= temp @kind object;
  #L4acf5e.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4acf64.  throw v0;
}
