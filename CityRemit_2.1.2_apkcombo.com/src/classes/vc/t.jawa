record `vc.t` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `vc.i` @kind interface {
}
global `vc.t` `@@vc.t.o` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `vc.t` `@@vc.t.p` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `vc.t`[] `@@vc.t.q` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lvc/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b0110.  v0:= new `vc.t`;
  #L4b0114.  v1:= "BEFORE_ROC" @kind object;
  #L4b0118.  v2:= 0I;
  #L4b011a.  call `<init>`(v0, v1, v2) @signature `Lvc/t;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4b0120.  `@@vc.t.o` @type ^`vc.t` := v0 @kind object;
  #L4b0124.  v1:= new `vc.t`;
  #L4b0128.  v3:= "ROC" @kind object;
  #L4b012c.  v4:= 1I;
  #L4b012e.  call `<init>`(v1, v3, v4) @signature `Lvc/t;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4b0134.  `@@vc.t.p` @type ^`vc.t` := v1 @kind object;
  #L4b0138.  v3:= 2I;
  #L4b013a.  v3:= new `vc.t`[v3];
  #L4b013e.  v3[v2]:= v0 @kind object;
  #L4b0142.  v3[v4]:= v1 @kind object;
  #L4b0146.  `@@vc.t.q` @type ^`vc.t`[] := v3 @kind object;
  #L4b014a.  return @kind void;
}
procedure `void` `<init>`(`vc.t` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lvc/t;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4b015c.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4b0162.  return @kind void;
}
procedure `vc.t` `c`(`int` v3 ) @signature `Lvc/t;.c:(I)Lvc/t;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4b0050.  if v3 == 0 then goto L4b008e;
  #L4b0054.  v0:= 1I;
  #L4b0056.  if v3 != v0 then goto L4b0060;
  #L4b005a.  v3:= `@@vc.t.p` @type ^`vc.t` @kind object;
  #L4b005e.  return v3 @kind object;
  #L4b0060.  v0:= new `uc.b`;
  #L4b0064.  v1:= new `java.lang.StringBuilder`;
  #L4b0068.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b006e.  v2:= "Invalid era: " @kind object;
  #L4b0072.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b0078.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b007e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b0084.  v3:= temp @kind object;
  #L4b0086.  call `<init>`(v0, v3) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b008c.  throw v0;
  #L4b008e.  v3:= `@@vc.t.o` @type ^`vc.t` @kind object;
  #L4b0092.  return v3 @kind object;
}
procedure `vc.t` `e`(`java.io.DataInput` v0 @kind object) @signature `Lvc/t;.e:(Ljava/io/DataInput;)Lvc/t;` @AccessFlag STATIC {
    temp;

  #L4b00a4.  call temp:= `readByte`(v0) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L4b00aa.  v0:= temp;
  #L4b00ac.  call temp:= `c`(v0) @signature `Lvc/t;.c:(I)Lvc/t;` @kind static;
  #L4b00b2.  v0:= temp @kind object;
  #L4b00b4.  return v0 @kind object;
}
procedure `vc.t` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lvc/t;.valueOf:(Ljava/lang/String;)Lvc/t;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b00c8.  v0:= constclass @type ^`vc.t` @kind object;
  #L4b00cc.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L4b00d2.  v1:= temp @kind object;
  #L4b00d4.  v1:= (`vc.t`) v1 @kind object;
  #L4b00d8.  return v1 @kind object;
}
procedure `vc.t`[] `values`() @signature `Lvc/t;.values:()[Lvc/t;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b00ec.  v0:= `@@vc.t.q` @type ^`vc.t`[] @kind object;
  #L4b00f0.  call temp:= `clone`(v0) @signature `[Lvc/t;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4b00f6.  v0:= temp @kind object;
  #L4b00f8.  v0:= (`vc.t`[]) v0 @kind object;
  #L4b00fc.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`vc.t` v2 @kind this) @signature `Lvc/t;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4affcc.  v0:= new `vc.u`;
  #L4affd0.  v1:= 6I;
  #L4affd2.  call `<init>`(v0, v1, v2) @signature `Lvc/u;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L4affd8.  return v0 @kind object;
}
procedure `long` `B`(`vc.t` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/t;.B:(Lyc/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4affec.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4afff0.  if v4 != v0 then goto L4b0000;
  #L4afff4.  call temp:= `getValue`(v3) @signature `Lvc/t;.getValue:()I` @kind virtual;
  #L4afffa.  v4:= temp;
  #L4afffc.  v0:= (`long`) v4 @kind i2l;
  #L4afffe.  return v0 @kind wide;
  #L4b0000.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4b0004.  if v0 != 0 then goto L4b0012;
  #L4b0008.  call temp:= `o`(v4, v3) @signature `Lyc/i;.o:(Lyc/e;)J` @kind interface;
  #L4b000e.  v0:= temp @kind wide;
  #L4b0010.  return v0 @kind wide;
  #L4b0012.  v0:= new `yc.m`;
  #L4b0016.  v1:= new `java.lang.StringBuilder`;
  #L4b001a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b0020.  v2:= "Unsupported field: " @kind object;
  #L4b0024.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b002a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b0030.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b0036.  v4:= temp @kind object;
  #L4b0038.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b003e.  throw v0;
}
procedure `int` `F`(`vc.t` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/t;.F:(Lyc/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4afef8.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4afefc.  if v4 != v0 then goto L4aff0a;
  #L4aff00.  call temp:= `getValue`(v3) @signature `Lvc/t;.getValue:()I` @kind virtual;
  #L4aff06.  v4:= temp;
  #L4aff08.  return v4;
  #L4aff0a.  call temp:= `t`(v3, v4) @signature `Lvc/t;.t:(Lyc/i;)Lyc/n;` @kind virtual;
  #L4aff10.  v0:= temp @kind object;
  #L4aff12.  call temp:= `B`(v3, v4) @signature `Lvc/t;.B:(Lyc/i;)J` @kind virtual;
  #L4aff18.  v1:= temp @kind wide;
  #L4aff1a.  call temp:= `a`(v0, v1, v4) @signature `Lyc/n;.a:(JLyc/i;)I` @kind virtual;
  #L4aff20.  v4:= temp;
  #L4aff22.  return v4;
}
procedure `yc.d` `I`(`vc.t` v3 @kind this, `yc.d` v4 @kind object) @signature `Lvc/t;.I:(Lyc/d;)Lyc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b0194.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4b0198.  call temp:= `getValue`(v3) @signature `Lvc/t;.getValue:()I` @kind virtual;
  #L4b019e.  v1:= temp;
  #L4b01a0.  v1:= (`long`) v1 @kind i2l;
  #L4b01a2.  call temp:= `P`(v4, v0, v1) @signature `Lyc/d;.P:(Lyc/i;J)Lyc/d;` @kind interface;
  #L4b01a8.  v4:= temp @kind object;
  #L4b01aa.  return v4 @kind object;
}
procedure `boolean` `d`(`vc.t` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/t;.d:(Lyc/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4afeb8.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4afebc.  v1:= 1I;
  #L4afebe.  v2:= 0I;
  #L4afec0.  if v0 == 0 then goto L4afed2;
  #L4afec4.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4afec8.  if v4 != v0 then goto L4afece;
  #L4afecc.  goto L4afed0;
  #L4afece.  v1:= 0I;
  #L4afed0.  return v1;
  #L4afed2.  if v4 == 0 then goto L4afee4;
  #L4afed6.  call temp:= `j`(v4, v3) @signature `Lyc/i;.j:(Lyc/e;)Z` @kind interface;
  #L4afedc.  v4:= temp;
  #L4afede.  if v4 == 0 then goto L4afee4;
  #L4afee2.  goto L4afee6;
  #L4afee4.  v1:= 0I;
  #L4afee6.  return v1;
}
procedure `int` `getValue`(`vc.t` v1 @kind this) @signature `Lvc/t;.getValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aff34.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4aff3a.  v0:= temp;
  #L4aff3c.  return v0;
}
procedure `void` `h`(`vc.t` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Lvc/t;.h:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L4b0174.  call temp:= `getValue`(v1) @signature `Lvc/t;.getValue:()I` @kind virtual;
  #L4b017a.  v0:= temp;
  #L4b017c.  call `writeByte`(v2, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L4b0182.  return @kind void;
}
procedure `java.lang.Object` `j`(`vc.t` v1 @kind this, `yc.k` v2 @kind object) @signature `Lvc/t;.j:(Lyc/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aff50.  call temp:= `e`() @signature `Lyc/j;.e:()Lyc/k;` @kind static;
  #L4aff56.  v0:= temp @kind object;
  #L4aff58.  if v2 != v0 then goto L4aff62;
  #L4aff5c.  v2:= `@@yc.b.D` @type ^`yc.b` @kind object;
  #L4aff60.  return v2 @kind object;
  #L4aff62.  call temp:= `a`() @signature `Lyc/j;.a:()Lyc/k;` @kind static;
  #L4aff68.  v0:= temp @kind object;
  #L4aff6a.  if v2 == v0 then goto L4affb6;
  #L4aff6e.  call temp:= `f`() @signature `Lyc/j;.f:()Lyc/k;` @kind static;
  #L4aff74.  v0:= temp @kind object;
  #L4aff76.  if v2 == v0 then goto L4affb6;
  #L4aff7a.  call temp:= `g`() @signature `Lyc/j;.g:()Lyc/k;` @kind static;
  #L4aff80.  v0:= temp @kind object;
  #L4aff82.  if v2 == v0 then goto L4affb6;
  #L4aff86.  call temp:= `d`() @signature `Lyc/j;.d:()Lyc/k;` @kind static;
  #L4aff8c.  v0:= temp @kind object;
  #L4aff8e.  if v2 == v0 then goto L4affb6;
  #L4aff92.  call temp:= `b`() @signature `Lyc/j;.b:()Lyc/k;` @kind static;
  #L4aff98.  v0:= temp @kind object;
  #L4aff9a.  if v2 == v0 then goto L4affb6;
  #L4aff9e.  call temp:= `c`() @signature `Lyc/j;.c:()Lyc/k;` @kind static;
  #L4affa4.  v0:= temp @kind object;
  #L4affa6.  if v2 != v0 then goto L4affac;
  #L4affaa.  goto L4affb6;
  #L4affac.  call temp:= `a`(v2, v1) @signature `Lyc/k;.a:(Lyc/e;)Ljava/lang/Object;` @kind interface;
  #L4affb2.  v2:= temp @kind object;
  #L4affb4.  return v2 @kind object;
  #L4affb6.  v2:= 0I;
  #L4affb8.  return v2 @kind object;
}
procedure `yc.n` `t`(`vc.t` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/t;.t:(Lyc/i;)Lyc/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b01bc.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4b01c0.  if v4 != v0 then goto L4b01ce;
  #L4b01c4.  call temp:= `k`(v4) @signature `Lyc/i;.k:()Lyc/n;` @kind interface;
  #L4b01ca.  v4:= temp @kind object;
  #L4b01cc.  return v4 @kind object;
  #L4b01ce.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4b01d2.  if v0 != 0 then goto L4b01e0;
  #L4b01d6.  call temp:= `h`(v4, v3) @signature `Lyc/i;.h:(Lyc/e;)Lyc/n;` @kind interface;
  #L4b01dc.  v4:= temp @kind object;
  #L4b01de.  return v4 @kind object;
  #L4b01e0.  v0:= new `yc.m`;
  #L4b01e4.  v1:= new `java.lang.StringBuilder`;
  #L4b01e8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b01ee.  v2:= "Unsupported field: " @kind object;
  #L4b01f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b01f8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b01fe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b0204.  v4:= temp @kind object;
  #L4b0206.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b020c.  throw v0;
}
