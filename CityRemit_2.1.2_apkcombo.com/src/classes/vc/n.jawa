record `vc.n` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `vc.i` @kind interface {
}
global `vc.n` `@@vc.n.o` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `vc.n` `@@vc.n.p` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `vc.n`[] `@@vc.n.q` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lvc/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4adb9c.  v0:= new `vc.n`;
  #L4adba0.  v1:= "BCE" @kind object;
  #L4adba4.  v2:= 0I;
  #L4adba6.  call `<init>`(v0, v1, v2) @signature `Lvc/n;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4adbac.  `@@vc.n.o` @type ^`vc.n` := v0 @kind object;
  #L4adbb0.  v1:= new `vc.n`;
  #L4adbb4.  v3:= "CE" @kind object;
  #L4adbb8.  v4:= 1I;
  #L4adbba.  call `<init>`(v1, v3, v4) @signature `Lvc/n;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4adbc0.  `@@vc.n.p` @type ^`vc.n` := v1 @kind object;
  #L4adbc4.  v3:= 2I;
  #L4adbc6.  v3:= new `vc.n`[v3];
  #L4adbca.  v3[v2]:= v0 @kind object;
  #L4adbce.  v3[v4]:= v1 @kind object;
  #L4adbd2.  `@@vc.n.q` @type ^`vc.n`[] := v3 @kind object;
  #L4adbd6.  return @kind void;
}
procedure `void` `<init>`(`vc.n` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lvc/n;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4adbe8.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4adbee.  return @kind void;
}
procedure `vc.n` `c`(`int` v3 ) @signature `Lvc/n;.c:(I)Lvc/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4adb00.  if v3 == 0 then goto L4adb3e;
  #L4adb04.  v0:= 1I;
  #L4adb06.  if v3 != v0 then goto L4adb10;
  #L4adb0a.  v3:= `@@vc.n.p` @type ^`vc.n` @kind object;
  #L4adb0e.  return v3 @kind object;
  #L4adb10.  v0:= new `uc.b`;
  #L4adb14.  v1:= new `java.lang.StringBuilder`;
  #L4adb18.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4adb1e.  v2:= "Invalid era: " @kind object;
  #L4adb22.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4adb28.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4adb2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4adb34.  v3:= temp @kind object;
  #L4adb36.  call `<init>`(v0, v3) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4adb3c.  throw v0;
  #L4adb3e.  v3:= `@@vc.n.o` @type ^`vc.n` @kind object;
  #L4adb42.  return v3 @kind object;
}
procedure `vc.n` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lvc/n;.valueOf:(Ljava/lang/String;)Lvc/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4adb54.  v0:= constclass @type ^`vc.n` @kind object;
  #L4adb58.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L4adb5e.  v1:= temp @kind object;
  #L4adb60.  v1:= (`vc.n`) v1 @kind object;
  #L4adb64.  return v1 @kind object;
}
procedure `vc.n`[] `values`() @signature `Lvc/n;.values:()[Lvc/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4adb78.  v0:= `@@vc.n.q` @type ^`vc.n`[] @kind object;
  #L4adb7c.  call temp:= `clone`(v0) @signature `[Lvc/n;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4adb82.  v0:= temp @kind object;
  #L4adb84.  v0:= (`vc.n`[]) v0 @kind object;
  #L4adb88.  return v0 @kind object;
}
procedure `long` `B`(`vc.n` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/n;.B:(Lyc/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ada9c.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4adaa0.  if v4 != v0 then goto L4adab0;
  #L4adaa4.  call temp:= `getValue`(v3) @signature `Lvc/n;.getValue:()I` @kind virtual;
  #L4adaaa.  v4:= temp;
  #L4adaac.  v0:= (`long`) v4 @kind i2l;
  #L4adaae.  return v0 @kind wide;
  #L4adab0.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4adab4.  if v0 != 0 then goto L4adac2;
  #L4adab8.  call temp:= `o`(v4, v3) @signature `Lyc/i;.o:(Lyc/e;)J` @kind interface;
  #L4adabe.  v0:= temp @kind wide;
  #L4adac0.  return v0 @kind wide;
  #L4adac2.  v0:= new `yc.m`;
  #L4adac6.  v1:= new `java.lang.StringBuilder`;
  #L4adaca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4adad0.  v2:= "Unsupported field: " @kind object;
  #L4adad4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4adada.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4adae0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4adae6.  v4:= temp @kind object;
  #L4adae8.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4adaee.  throw v0;
}
procedure `int` `F`(`vc.n` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/n;.F:(Lyc/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ad9c8.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4ad9cc.  if v4 != v0 then goto L4ad9da;
  #L4ad9d0.  call temp:= `getValue`(v3) @signature `Lvc/n;.getValue:()I` @kind virtual;
  #L4ad9d6.  v4:= temp;
  #L4ad9d8.  return v4;
  #L4ad9da.  call temp:= `t`(v3, v4) @signature `Lvc/n;.t:(Lyc/i;)Lyc/n;` @kind virtual;
  #L4ad9e0.  v0:= temp @kind object;
  #L4ad9e2.  call temp:= `B`(v3, v4) @signature `Lvc/n;.B:(Lyc/i;)J` @kind virtual;
  #L4ad9e8.  v1:= temp @kind wide;
  #L4ad9ea.  call temp:= `a`(v0, v1, v4) @signature `Lyc/n;.a:(JLyc/i;)I` @kind virtual;
  #L4ad9f0.  v4:= temp;
  #L4ad9f2.  return v4;
}
procedure `yc.d` `I`(`vc.n` v3 @kind this, `yc.d` v4 @kind object) @signature `Lvc/n;.I:(Lyc/d;)Lyc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4adc00.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4adc04.  call temp:= `getValue`(v3) @signature `Lvc/n;.getValue:()I` @kind virtual;
  #L4adc0a.  v1:= temp;
  #L4adc0c.  v1:= (`long`) v1 @kind i2l;
  #L4adc0e.  call temp:= `P`(v4, v0, v1) @signature `Lyc/d;.P:(Lyc/i;J)Lyc/d;` @kind interface;
  #L4adc14.  v4:= temp @kind object;
  #L4adc16.  return v4 @kind object;
}
procedure `boolean` `d`(`vc.n` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/n;.d:(Lyc/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ad988.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4ad98c.  v1:= 1I;
  #L4ad98e.  v2:= 0I;
  #L4ad990.  if v0 == 0 then goto L4ad9a2;
  #L4ad994.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4ad998.  if v4 != v0 then goto L4ad99e;
  #L4ad99c.  goto L4ad9a0;
  #L4ad99e.  v1:= 0I;
  #L4ad9a0.  return v1;
  #L4ad9a2.  if v4 == 0 then goto L4ad9b4;
  #L4ad9a6.  call temp:= `j`(v4, v3) @signature `Lyc/i;.j:(Lyc/e;)Z` @kind interface;
  #L4ad9ac.  v4:= temp;
  #L4ad9ae.  if v4 == 0 then goto L4ad9b4;
  #L4ad9b2.  goto L4ad9b6;
  #L4ad9b4.  v1:= 0I;
  #L4ad9b6.  return v1;
}
procedure `int` `getValue`(`vc.n` v1 @kind this) @signature `Lvc/n;.getValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ada04.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4ada0a.  v0:= temp;
  #L4ada0c.  return v0;
}
procedure `java.lang.Object` `j`(`vc.n` v1 @kind this, `yc.k` v2 @kind object) @signature `Lvc/n;.j:(Lyc/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ada20.  call temp:= `e`() @signature `Lyc/j;.e:()Lyc/k;` @kind static;
  #L4ada26.  v0:= temp @kind object;
  #L4ada28.  if v2 != v0 then goto L4ada32;
  #L4ada2c.  v2:= `@@yc.b.D` @type ^`yc.b` @kind object;
  #L4ada30.  return v2 @kind object;
  #L4ada32.  call temp:= `a`() @signature `Lyc/j;.a:()Lyc/k;` @kind static;
  #L4ada38.  v0:= temp @kind object;
  #L4ada3a.  if v2 == v0 then goto L4ada86;
  #L4ada3e.  call temp:= `f`() @signature `Lyc/j;.f:()Lyc/k;` @kind static;
  #L4ada44.  v0:= temp @kind object;
  #L4ada46.  if v2 == v0 then goto L4ada86;
  #L4ada4a.  call temp:= `g`() @signature `Lyc/j;.g:()Lyc/k;` @kind static;
  #L4ada50.  v0:= temp @kind object;
  #L4ada52.  if v2 == v0 then goto L4ada86;
  #L4ada56.  call temp:= `d`() @signature `Lyc/j;.d:()Lyc/k;` @kind static;
  #L4ada5c.  v0:= temp @kind object;
  #L4ada5e.  if v2 == v0 then goto L4ada86;
  #L4ada62.  call temp:= `b`() @signature `Lyc/j;.b:()Lyc/k;` @kind static;
  #L4ada68.  v0:= temp @kind object;
  #L4ada6a.  if v2 == v0 then goto L4ada86;
  #L4ada6e.  call temp:= `c`() @signature `Lyc/j;.c:()Lyc/k;` @kind static;
  #L4ada74.  v0:= temp @kind object;
  #L4ada76.  if v2 != v0 then goto L4ada7c;
  #L4ada7a.  goto L4ada86;
  #L4ada7c.  call temp:= `a`(v2, v1) @signature `Lyc/k;.a:(Lyc/e;)Ljava/lang/Object;` @kind interface;
  #L4ada82.  v2:= temp @kind object;
  #L4ada84.  return v2 @kind object;
  #L4ada86.  v2:= 0I;
  #L4ada88.  return v2 @kind object;
}
procedure `yc.n` `t`(`vc.n` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/n;.t:(Lyc/i;)Lyc/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4adc28.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4adc2c.  if v4 != v0 then goto L4adc3a;
  #L4adc30.  call temp:= `k`(v4) @signature `Lyc/i;.k:()Lyc/n;` @kind interface;
  #L4adc36.  v4:= temp @kind object;
  #L4adc38.  return v4 @kind object;
  #L4adc3a.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4adc3e.  if v0 != 0 then goto L4adc4c;
  #L4adc42.  call temp:= `h`(v4, v3) @signature `Lyc/i;.h:(Lyc/e;)Lyc/n;` @kind interface;
  #L4adc48.  v4:= temp @kind object;
  #L4adc4a.  return v4 @kind object;
  #L4adc4c.  v0:= new `yc.m`;
  #L4adc50.  v1:= new `java.lang.StringBuilder`;
  #L4adc54.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4adc5a.  v2:= "Unsupported field: " @kind object;
  #L4adc5e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4adc64.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4adc6a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4adc70.  v4:= temp @kind object;
  #L4adc72.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4adc78.  throw v0;
}
