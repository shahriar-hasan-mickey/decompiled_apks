record `vc.h` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Comparable` @kind interface {
}
global `java.util.concurrent.ConcurrentHashMap` `@@vc.h.o` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentHashMap` `@@vc.h.p` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lvc/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4aa274.  v0:= new `vc.h$a`;
  #L4aa278.  call `<init>`(v0) @signature `Lvc/h$a;.<init>:()V` @kind direct;
  #L4aa27e.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4aa282.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4aa288.  `@@vc.h.o` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L4aa28c.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4aa290.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4aa296.  `@@vc.h.p` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L4aa29a.  v0:= constclass @type ^`java.util.Locale` @kind object;
  #L4aa29e.  v1:= "getUnicodeLocaleType" @kind object;
  #L4aa2a2.  v2:= 1I;
  #L4aa2a4.  v2:= new `java.lang.Class`[v2];
  #L4aa2a8.  v3:= 0I;
  #L4aa2aa.  v4:= constclass @type ^`java.lang.String` @kind object;
  #L4aa2ae.  v2[v3]:= v4 @kind object;
  #L4aa2b2.  call temp:= `getMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L4aa2b8.  return @kind void;
  catch `java.lang.Throwable` @[L4aa29a..L4aa2b8] goto L4aa2b8;
}
procedure `void` `<init>`(`vc.h` v0 @kind this) @signature `Lvc/h;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L4aa2d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4aa2de.  return @kind void;
}
procedure `void` `B`(`vc.h` v2 @kind object) @signature `Lvc/h;.B:(Lvc/h;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4aa3c0.  v0:= `@@vc.h.o` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L4aa3c4.  call temp:= `r`(v2) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4aa3ca.  v1:= temp @kind object;
  #L4aa3cc.  call temp:= `putIfAbsent`(v0, v1, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aa3d2.  call temp:= `o`(v2) @signature `Lvc/h;.o:()Ljava/lang/String;` @kind virtual;
  #L4aa3d8.  v0:= temp @kind object;
  #L4aa3da.  if v0 == 0 then goto L4aa3e8;
  #L4aa3de.  v1:= `@@vc.h.p` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L4aa3e2.  call temp:= `putIfAbsent`(v1, v0, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aa3e8.  return @kind void;
}
procedure `vc.h` `k`(`yc.e` v1 @kind object) @signature `Lvc/h;.k:(Lyc/e;)Lvc/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4aa1a4.  v0:= "temporal" @kind object;
  #L4aa1a8.  call temp:= `i`(v1, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4aa1ae.  call temp:= `a`() @signature `Lyc/j;.a:()Lyc/k;` @kind static;
  #L4aa1b4.  v0:= temp @kind object;
  #L4aa1b6.  call temp:= `j`(v1, v0) @signature `Lyc/e;.j:(Lyc/k;)Ljava/lang/Object;` @kind interface;
  #L4aa1bc.  v1:= temp @kind object;
  #L4aa1be.  v1:= (`vc.h`) v1 @kind object;
  #L4aa1c2.  if v1 == 0 then goto L4aa1c8;
  #L4aa1c6.  goto L4aa1cc;
  #L4aa1c8.  v1:= `@@vc.m.q` @type ^`vc.m` @kind object;
  #L4aa1cc.  return v1 @kind object;
}
procedure `java.lang.Object` `readResolve`(`vc.h` v2 @kind this) @signature `Lvc/h;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4a9f18.  v0:= new `java.io.InvalidObjectException`;
  #L4a9f1c.  v1:= "Deserialization via serialization delegate" @kind object;
  #L4a9f20.  call `<init>`(v0, v1) @signature `Ljava/io/InvalidObjectException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a9f26.  throw v0;
}
procedure `void` `s`() @signature `Lvc/h;.s:()V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4aa2f0.  v0:= `@@vc.h.o` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L4aa2f4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.isEmpty:()Z` @kind virtual;
  #L4aa2fa.  v1:= temp;
  #L4aa2fc.  if v1 == 0 then goto L4aa3ac;
  #L4aa300.  v1:= `@@vc.m.q` @type ^`vc.m` @kind object;
  #L4aa304.  call `B`(v1) @signature `Lvc/h;.B:(Lvc/h;)V` @kind static;
  #L4aa30a.  v1:= `@@vc.v.q` @type ^`vc.v` @kind object;
  #L4aa30e.  call `B`(v1) @signature `Lvc/h;.B:(Lvc/h;)V` @kind static;
  #L4aa314.  v1:= `@@vc.r.q` @type ^`vc.r` @kind object;
  #L4aa318.  call `B`(v1) @signature `Lvc/h;.B:(Lvc/h;)V` @kind static;
  #L4aa31e.  v1:= `@@vc.o.r` @type ^`vc.o` @kind object;
  #L4aa322.  call `B`(v1) @signature `Lvc/h;.B:(Lvc/h;)V` @kind static;
  #L4aa328.  v1:= `@@vc.j.q` @type ^`vc.j` @kind object;
  #L4aa32c.  call `B`(v1) @signature `Lvc/h;.B:(Lvc/h;)V` @kind static;
  #L4aa332.  v2:= "Hijrah" @kind object;
  #L4aa336.  call temp:= `putIfAbsent`(v0, v2, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aa33c.  v0:= `@@vc.h.p` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L4aa340.  v2:= "islamic" @kind object;
  #L4aa344.  call temp:= `putIfAbsent`(v0, v2, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aa34a.  v0:= constclass @type ^`vc.h` @kind object;
  #L4aa34e.  v1:= constclass @type ^`vc.h` @kind object;
  #L4aa352.  call temp:= `getClassLoader`(v1) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L4aa358.  v1:= temp @kind object;
  #L4aa35a.  call temp:= `load`(v0, v1) @signature `Ljava/util/ServiceLoader;.load:(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader;` @kind static;
  #L4aa360.  v0:= temp @kind object;
  #L4aa362.  call temp:= `iterator`(v0) @signature `Ljava/util/ServiceLoader;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4aa368.  v0:= temp @kind object;
  #L4aa36a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4aa370.  v1:= temp;
  #L4aa372.  if v1 == 0 then goto L4aa3ac;
  #L4aa376.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4aa37c.  v1:= temp @kind object;
  #L4aa37e.  v1:= (`vc.h`) v1 @kind object;
  #L4aa382.  v2:= `@@vc.h.o` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L4aa386.  call temp:= `r`(v1) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4aa38c.  v3:= temp @kind object;
  #L4aa38e.  call temp:= `putIfAbsent`(v2, v3, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aa394.  call temp:= `o`(v1) @signature `Lvc/h;.o:()Ljava/lang/String;` @kind virtual;
  #L4aa39a.  v2:= temp @kind object;
  #L4aa39c.  if v2 == 0 then goto L4aa36a;
  #L4aa3a0.  v3:= `@@vc.h.p` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L4aa3a4.  call temp:= `putIfAbsent`(v3, v2, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aa3aa.  goto L4aa36a;
  #L4aa3ac.  return @kind void;
}
procedure `vc.h` `v`(`java.lang.String` v3 @kind object) @signature `Lvc/h;.v:(Ljava/lang/String;)Lvc/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4aa1e0.  call `s`() @signature `Lvc/h;.s:()V` @kind static;
  #L4aa1e6.  v0:= `@@vc.h.o` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L4aa1ea.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aa1f0.  v0:= temp @kind object;
  #L4aa1f2.  v0:= (`vc.h`) v0 @kind object;
  #L4aa1f6.  if v0 == 0 then goto L4aa1fc;
  #L4aa1fa.  return v0 @kind object;
  #L4aa1fc.  v0:= `@@vc.h.p` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L4aa200.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aa206.  v0:= temp @kind object;
  #L4aa208.  v0:= (`vc.h`) v0 @kind object;
  #L4aa20c.  if v0 == 0 then goto L4aa212;
  #L4aa210.  return v0 @kind object;
  #L4aa212.  v0:= new `uc.b`;
  #L4aa216.  v1:= new `java.lang.StringBuilder`;
  #L4aa21a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aa220.  v2:= "Unknown chronology: " @kind object;
  #L4aa224.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa22a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa230.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aa236.  v3:= temp @kind object;
  #L4aa238.  call `<init>`(v0, v3) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aa23e.  throw v0;
}
procedure `java.lang.Object` `writeReplace`(`vc.h` v2 @kind this) @signature `Lvc/h;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4a9f38.  v0:= new `vc.u`;
  #L4a9f3c.  v1:= 11I;
  #L4a9f40.  call `<init>`(v0, v1, v2) @signature `Lvc/u;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L4a9f46.  return v0 @kind object;
}
procedure `vc.h` `x`(`java.io.DataInput` v0 @kind object) @signature `Lvc/h;.x:(Ljava/io/DataInput;)Lvc/h;` @AccessFlag STATIC {
    temp;

  #L4aa250.  call temp:= `readUTF`(v0) @signature `Ljava/io/DataInput;.readUTF:()Ljava/lang/String;` @kind interface;
  #L4aa256.  v0:= temp @kind object;
  #L4aa258.  call temp:= `v`(v0) @signature `Lvc/h;.v:(Ljava/lang/String;)Lvc/h;` @kind static;
  #L4aa25e.  v0:= temp @kind object;
  #L4aa260.  return v0 @kind object;
}
procedure `void` `D`(`vc.h` v4 @kind this, `java.util.Map` v5 @kind object, `yc.a` v6 @kind object, `long` v7 ) @signature `Lvc/h;.D:(Ljava/util/Map;Lyc/a;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4aa3fc.  call temp:= `get`(v5, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4aa402.  v0:= temp @kind object;
  #L4aa404.  v0:= (`java.lang.Long`) v0 @kind object;
  #L4aa408.  if v0 == 0 then goto L4aa478;
  #L4aa40c.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4aa412.  v1:= temp @kind wide;
  #L4aa414.  v3:= lcmp(v1, v7);
  #L4aa418.  if v3 != 0 then goto L4aa41e;
  #L4aa41c.  goto L4aa478;
  #L4aa41e.  v5:= new `uc.b`;
  #L4aa422.  v1:= new `java.lang.StringBuilder`;
  #L4aa426.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aa42c.  v2:= "Invalid state, field: " @kind object;
  #L4aa430.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa436.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa43c.  v2:= " " @kind object;
  #L4aa440.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa446.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa44c.  v0:= " conflicts with " @kind object;
  #L4aa450.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa456.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa45c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa462.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa468.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aa46e.  v6:= temp @kind object;
  #L4aa470.  call `<init>`(v5, v6) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aa476.  throw v5;
  #L4aa478.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4aa47e.  v7:= temp @kind object;
  #L4aa480.  call temp:= `put`(v5, v6, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4aa486.  return @kind void;
}
procedure `void` `F`(`vc.h` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Lvc/h;.F:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L4aa498.  call temp:= `r`(v1) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4aa49e.  v0:= temp @kind object;
  #L4aa4a0.  call `writeUTF`(v2, v0) @signature `Ljava/io/DataOutput;.writeUTF:(Ljava/lang/String;)V` @kind interface;
  #L4aa4a6.  return @kind void;
}
procedure `vc.f` `I`(`vc.h` v0 @kind this, `uc.e` v1 @kind object, `uc.q` v2 @kind object) @signature `Lvc/h;.I:(Luc/e;Luc/q;)Lvc/f;` @AccessFlag PUBLIC {
    temp;

  #L4aa0f8.  call temp:= `o0`(v0, v1, v2) @signature `Lvc/g;.o0:(Lvc/h;Luc/e;Luc/q;)Lvc/g;` @kind static;
  #L4aa0fe.  v1:= temp @kind object;
  #L4aa100.  return v1 @kind object;
}
procedure `int` `c`(`vc.h` v1 @kind this, `vc.h` v2 @kind object) @signature `Lvc/h;.c:(Lvc/h;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9eb8.  call temp:= `r`(v1) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4a9ebe.  v0:= temp @kind object;
  #L4a9ec0.  call temp:= `r`(v2) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4a9ec6.  v2:= temp @kind object;
  #L4a9ec8.  call temp:= `compareTo`(v0, v2) @signature `Ljava/lang/String;.compareTo:(Ljava/lang/String;)I` @kind virtual;
  #L4a9ece.  v2:= temp;
  #L4a9ed0.  return v2;
}
procedure `int` `compareTo`(`vc.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lvc/h;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a9e98.  v1:= (`vc.h`) v1 @kind object;
  #L4a9e9c.  call temp:= `c`(v0, v1) @signature `Lvc/h;.c:(Lvc/h;)I` @kind virtual;
  #L4a9ea2.  v1:= temp;
  #L4a9ea4.  return v1;
}
procedure `vc.b` `d`(`yc.e` v0 @kind object) @signature `Lvc/h;.d:(Lyc/e;)Lvc/b;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `vc.b` `e`(`vc.h` v3 @kind this, `yc.d` v4 @kind object) @signature `Lvc/h;.e:(Lyc/d;)Lvc/b;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4a9f74.  v4:= (`vc.b`) v4 @kind object;
  #L4a9f78.  call temp:= `a0`(v4) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a9f7e.  v0:= temp @kind object;
  #L4a9f80.  call temp:= `equals`(v3, v0) @signature `Lvc/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a9f86.  v0:= temp;
  #L4a9f88.  if v0 == 0 then goto L4a9f8e;
  #L4a9f8c.  return v4 @kind object;
  #L4a9f8e.  v0:= new `java.lang.ClassCastException`;
  #L4a9f92.  v1:= new `java.lang.StringBuilder`;
  #L4a9f96.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a9f9c.  v2:= "Chrono mismatch, expected: " @kind object;
  #L4a9fa0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9fa6.  call temp:= `r`(v3) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4a9fac.  v2:= temp @kind object;
  #L4a9fae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9fb4.  v2:= ", actual: " @kind object;
  #L4a9fb8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9fbe.  call temp:= `a0`(v4) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a9fc4.  v4:= temp @kind object;
  #L4a9fc6.  call temp:= `r`(v4) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4a9fcc.  v4:= temp @kind object;
  #L4a9fce.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9fd4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a9fda.  v4:= temp @kind object;
  #L4a9fdc.  call `<init>`(v0, v4) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a9fe2.  throw v0;
}
procedure `boolean` `equals`(`vc.h` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lvc/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a9e5c.  v0:= 1I;
  #L4a9e5e.  if v3 != v4 then goto L4a9e64;
  #L4a9e62.  return v0;
  #L4a9e64.  v1:= instanceof @variable v4 @type ^`vc.h` @kind boolean;
  #L4a9e68.  v2:= 0I;
  #L4a9e6a.  if v1 == 0 then goto L4a9e84;
  #L4a9e6e.  v4:= (`vc.h`) v4 @kind object;
  #L4a9e72.  call temp:= `c`(v3, v4) @signature `Lvc/h;.c:(Lvc/h;)I` @kind virtual;
  #L4a9e78.  v4:= temp;
  #L4a9e7a.  if v4 != 0 then goto L4a9e80;
  #L4a9e7e.  goto L4a9e82;
  #L4a9e80.  v0:= 0I;
  #L4a9e82.  return v0;
  #L4a9e84.  return v2;
}
procedure `vc.d` `h`(`vc.h` v3 @kind this, `yc.d` v4 @kind object) @signature `Lvc/h;.h:(Lyc/d;)Lvc/d;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4aa068.  v4:= (`vc.d`) v4 @kind object;
  #L4aa06c.  call temp:= `h0`(v4) @signature `Lvc/d;.h0:()Lvc/b;` @kind virtual;
  #L4aa072.  v0:= temp @kind object;
  #L4aa074.  call temp:= `a0`(v0) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4aa07a.  v0:= temp @kind object;
  #L4aa07c.  call temp:= `equals`(v3, v0) @signature `Lvc/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4aa082.  v0:= temp;
  #L4aa084.  if v0 == 0 then goto L4aa08a;
  #L4aa088.  return v4 @kind object;
  #L4aa08a.  v0:= new `java.lang.ClassCastException`;
  #L4aa08e.  v1:= new `java.lang.StringBuilder`;
  #L4aa092.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aa098.  v2:= "Chrono mismatch, required: " @kind object;
  #L4aa09c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa0a2.  call temp:= `r`(v3) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4aa0a8.  v2:= temp @kind object;
  #L4aa0aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa0b0.  v2:= ", supplied: " @kind object;
  #L4aa0b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa0ba.  call temp:= `h0`(v4) @signature `Lvc/d;.h0:()Lvc/b;` @kind virtual;
  #L4aa0c0.  v4:= temp @kind object;
  #L4aa0c2.  call temp:= `a0`(v4) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4aa0c8.  v4:= temp @kind object;
  #L4aa0ca.  call temp:= `r`(v4) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4aa0d0.  v4:= temp @kind object;
  #L4aa0d2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa0d8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aa0de.  v4:= temp @kind object;
  #L4aa0e0.  call `<init>`(v0, v4) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aa0e6.  throw v0;
}
procedure `int` `hashCode`(`vc.h` v2 @kind this) @signature `Lvc/h;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a9ee4.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4a9eea.  v0:= temp @kind object;
  #L4a9eec.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4a9ef2.  v0:= temp;
  #L4a9ef4.  call temp:= `r`(v2) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4a9efa.  v1:= temp @kind object;
  #L4a9efc.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L4a9f02.  v1:= temp;
  #L4a9f04.  v0:= v0 ^~ v1 @kind int;
  #L4a9f06.  return v0;
}
procedure `vc.g` `i`(`vc.h` v3 @kind this, `yc.d` v4 @kind object) @signature `Lvc/h;.i:(Lyc/d;)Lvc/g;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4aa114.  v4:= (`vc.g`) v4 @kind object;
  #L4aa118.  call temp:= `g0`(v4) @signature `Lvc/f;.g0:()Lvc/b;` @kind virtual;
  #L4aa11e.  v0:= temp @kind object;
  #L4aa120.  call temp:= `a0`(v0) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4aa126.  v0:= temp @kind object;
  #L4aa128.  call temp:= `equals`(v3, v0) @signature `Lvc/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4aa12e.  v0:= temp;
  #L4aa130.  if v0 == 0 then goto L4aa136;
  #L4aa134.  return v4 @kind object;
  #L4aa136.  v0:= new `java.lang.ClassCastException`;
  #L4aa13a.  v1:= new `java.lang.StringBuilder`;
  #L4aa13e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aa144.  v2:= "Chrono mismatch, required: " @kind object;
  #L4aa148.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa14e.  call temp:= `r`(v3) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4aa154.  v2:= temp @kind object;
  #L4aa156.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa15c.  v2:= ", supplied: " @kind object;
  #L4aa160.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa166.  call temp:= `g0`(v4) @signature `Lvc/f;.g0:()Lvc/b;` @kind virtual;
  #L4aa16c.  v4:= temp @kind object;
  #L4aa16e.  call temp:= `a0`(v4) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4aa174.  v4:= temp @kind object;
  #L4aa176.  call temp:= `r`(v4) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4aa17c.  v4:= temp @kind object;
  #L4aa17e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa184.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aa18a.  v4:= temp @kind object;
  #L4aa18c.  call `<init>`(v0, v4) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aa192.  throw v0;
}
procedure `vc.i` `j`(`int` v0 ) @signature `Lvc/h;.j:(I)Lvc/i;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `o`() @signature `Lvc/h;.o:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `r`() @signature `Lvc/h;.r:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `vc.c` `t`(`vc.h` v4 @kind this, `yc.e` v5 @kind object) @signature `Lvc/h;.t:(Lyc/e;)Lvc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a9ff4.  call temp:= `d`(v4, v5) @signature `Lvc/h;.d:(Lyc/e;)Lvc/b;` @kind virtual;
  #L4a9ffa.  v0:= temp @kind object;
  #L4a9ffc.  call temp:= `a0`(v5) @signature `Luc/h;.a0:(Lyc/e;)Luc/h;` @kind static;
  #L4aa002.  v1:= temp @kind object;
  #L4aa004.  call temp:= `V`(v0, v1) @signature `Lvc/b;.V:(Luc/h;)Lvc/c;` @kind virtual;
  #L4aa00a.  v5:= temp @kind object;
  #L4aa00c.  return v5 @kind object;
  #L4aa00e.  v0:= Exception @type ^`uc.b` @kind object;
  #L4aa010.  v1:= new `uc.b`;
  #L4aa014.  v2:= new `java.lang.StringBuilder`;
  #L4aa018.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aa01e.  v3:= "Unable to obtain ChronoLocalDateTime from TemporalAccessor: " @kind object;
  #L4aa022.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa028.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4aa02e.  v5:= temp @kind object;
  #L4aa030.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa036.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aa03c.  v5:= temp @kind object;
  #L4aa03e.  call `<init>`(v1, v5, v0) @signature `Luc/b;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4aa044.  throw v1;
  catch `uc.b` @[L4a9ff4..L4aa00c] goto L4aa00e;
}
procedure `java.lang.String` `toString`(`vc.h` v1 @kind this) @signature `Lvc/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9f58.  call temp:= `r`(v1) @signature `Lvc/h;.r:()Ljava/lang/String;` @kind virtual;
  #L4a9f5e.  v0:= temp @kind object;
  #L4a9f60.  return v0 @kind object;
}
