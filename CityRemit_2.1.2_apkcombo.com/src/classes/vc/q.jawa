record `vc.q` @kind class @AccessFlag PUBLIC_FINAL extends `xc.a` @kind class, `java.io.Serializable` @kind interface {
  `int` `vc.q.o` @AccessFlag PRIVATE_FINAL;
  `uc.f` `vc.q.p` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `java.lang.String` `vc.q.q` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
global `vc.q` `@@vc.q.r` @AccessFlag PUBLIC_STATIC_FINAL;
global `vc.q` `@@vc.q.s` @AccessFlag PUBLIC_STATIC_FINAL;
global `vc.q` `@@vc.q.t` @AccessFlag PUBLIC_STATIC_FINAL;
global `vc.q` `@@vc.q.u` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@vc.q.v` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lvc/q;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4af1e4.  v0:= new `vc.q`;
  #L4af1e8.  v1:= 1868I;
  #L4af1ec.  v2:= 9I;
  #L4af1f0.  v3:= 8I;
  #L4af1f4.  call temp:= `C0`(v1, v2, v3) @signature `Luc/f;.C0:(III)Luc/f;` @kind static;
  #L4af1fa.  v1:= temp @kind object;
  #L4af1fc.  v2:= -1I;
  #L4af1fe.  v4:= "Meiji" @kind object;
  #L4af202.  call `<init>`(v0, v2, v1, v4) @signature `Lvc/q;.<init>:(ILuc/f;Ljava/lang/String;)V` @kind direct;
  #L4af208.  `@@vc.q.r` @type ^`vc.q` := v0 @kind object;
  #L4af20c.  v1:= new `vc.q`;
  #L4af210.  v2:= 1912I;
  #L4af214.  v4:= 7I;
  #L4af216.  v5:= 30I;
  #L4af21a.  call temp:= `C0`(v2, v4, v5) @signature `Luc/f;.C0:(III)Luc/f;` @kind static;
  #L4af220.  v2:= temp @kind object;
  #L4af222.  v4:= 0I;
  #L4af224.  v5:= "Taisho" @kind object;
  #L4af228.  call `<init>`(v1, v4, v2, v5) @signature `Lvc/q;.<init>:(ILuc/f;Ljava/lang/String;)V` @kind direct;
  #L4af22e.  `@@vc.q.s` @type ^`vc.q` := v1 @kind object;
  #L4af232.  v2:= new `vc.q`;
  #L4af236.  v5:= 1926I;
  #L4af23a.  v6:= 12I;
  #L4af23e.  v7:= 25I;
  #L4af242.  call temp:= `C0`(v5, v6, v7) @signature `Luc/f;.C0:(III)Luc/f;` @kind static;
  #L4af248.  v5:= temp @kind object;
  #L4af24a.  v6:= 1I;
  #L4af24c.  v7:= "Showa" @kind object;
  #L4af250.  call `<init>`(v2, v6, v5, v7) @signature `Lvc/q;.<init>:(ILuc/f;Ljava/lang/String;)V` @kind direct;
  #L4af256.  `@@vc.q.t` @type ^`vc.q` := v2 @kind object;
  #L4af25a.  v5:= new `vc.q`;
  #L4af25e.  v7:= 1989I;
  #L4af262.  call temp:= `C0`(v7, v6, v3) @signature `Luc/f;.C0:(III)Luc/f;` @kind static;
  #L4af268.  v3:= temp @kind object;
  #L4af26a.  v7:= 2I;
  #L4af26c.  v8:= "Heisei" @kind object;
  #L4af270.  call `<init>`(v5, v7, v3, v8) @signature `Lvc/q;.<init>:(ILuc/f;Ljava/lang/String;)V` @kind direct;
  #L4af276.  `@@vc.q.u` @type ^`vc.q` := v5 @kind object;
  #L4af27a.  v3:= 4I;
  #L4af27c.  v3:= new `vc.q`[v3];
  #L4af280.  v3[v4]:= v0 @kind object;
  #L4af284.  v3[v6]:= v1 @kind object;
  #L4af288.  v3[v7]:= v2 @kind object;
  #L4af28c.  v0:= 3I;
  #L4af28e.  v3[v0]:= v5 @kind object;
  #L4af292.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4af296.  call `<init>`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4af29c.  `@@vc.q.v` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4af2a0.  return @kind void;
}
procedure `void` `<init>`(`vc.q` v0 @kind this, `int` v1 , `uc.f` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lvc/q;.<init>:(ILuc/f;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4af2b4.  call `<init>`(v0) @signature `Lxc/a;.<init>:()V` @kind direct;
  #L4af2ba.  v0.`vc.q.o` @type ^`int` := v1;
  #L4af2be.  v0.`vc.q.p` @type ^`uc.f` := v2 @kind object;
  #L4af2c2.  v0.`vc.q.q` @type ^`java.lang.String` := v3 @kind object;
  #L4af2c6.  return @kind void;
}
procedure `vc.q` `V`(`uc.f` v4 @kind object) @signature `Lvc/q;.V:(Luc/f;)Lvc/q;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4af0a8.  v0:= `@@vc.q.r` @type ^`vc.q` @kind object;
  #L4af0ac.  v0:= v0.`vc.q.p` @type ^`uc.f` @kind object;
  #L4af0b0.  call temp:= `c0`(v4, v0) @signature `Luc/f;.c0:(Lvc/b;)Z` @kind virtual;
  #L4af0b6.  v0:= temp;
  #L4af0b8.  if v0 != 0 then goto L4af0f6;
  #L4af0bc.  v0:= `@@vc.q.v` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4af0c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4af0c6.  v0:= temp @kind object;
  #L4af0c8.  v0:= (`vc.q`[]) v0 @kind object;
  #L4af0cc.  v1:= length @variable v0;
  #L4af0ce.  v1:= v1 + -1;
  #L4af0d2.  if v1 < 0 then goto L4af0f2;
  #L4af0d6.  v2:= v0[v1] @kind object;
  #L4af0da.  v3:= v2.`vc.q.p` @type ^`uc.f` @kind object;
  #L4af0de.  call temp:= `X`(v4, v3) @signature `Luc/f;.X:(Lvc/b;)I` @kind virtual;
  #L4af0e4.  v3:= temp;
  #L4af0e6.  if v3 < 0 then goto L4af0ec;
  #L4af0ea.  return v2 @kind object;
  #L4af0ec.  v1:= v1 + -1;
  #L4af0f0.  goto L4af0d2;
  #L4af0f2.  v4:= 0I;
  #L4af0f4.  return v4 @kind object;
  #L4af0f6.  v0:= new `uc.b`;
  #L4af0fa.  v1:= new `java.lang.StringBuilder`;
  #L4af0fe.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4af104.  v2:= "Date too early: " @kind object;
  #L4af108.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4af10e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4af114.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4af11a.  v4:= temp @kind object;
  #L4af11c.  call `<init>`(v0, v4) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4af122.  throw v0;
}
procedure `vc.q` `X`(`int` v2 ) @signature `Lvc/q;.X:(I)Lvc/q;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4af134.  v0:= `@@vc.q.v` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4af138.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4af13e.  v0:= temp @kind object;
  #L4af140.  v0:= (`vc.q`[]) v0 @kind object;
  #L4af144.  v1:= `@@vc.q.r` @type ^`vc.q` @kind object;
  #L4af148.  v1:= v1.`vc.q.o` @type ^`int`;
  #L4af14c.  if v2 < v1 then goto L4af170;
  #L4af150.  v1:= length @variable v0;
  #L4af152.  v1:= v1 + -1;
  #L4af156.  v1:= v0[v1] @kind object;
  #L4af15a.  v1:= v1.`vc.q.o` @type ^`int`;
  #L4af15e.  if v2 > v1 then goto L4af170;
  #L4af162.  call temp:= `a0`(v2) @signature `Lvc/q;.a0:(I)I` @kind static;
  #L4af168.  v2:= temp;
  #L4af16a.  v2:= v0[v2] @kind object;
  #L4af16e.  return v2 @kind object;
  #L4af170.  v2:= new `uc.b`;
  #L4af174.  v0:= "japaneseEra is invalid" @kind object;
  #L4af178.  call `<init>`(v2, v0) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4af17e.  throw v2;
}
procedure `int` `a0`(`int` v0 ) @signature `Lvc/q;.a0:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L4aefa4.  v0:= v0 + 1;
  #L4aefa8.  return v0;
}
procedure `vc.q` `b0`(`java.io.DataInput` v0 @kind object) @signature `Lvc/q;.b0:(Ljava/io/DataInput;)Lvc/q;` @AccessFlag STATIC {
    temp;

  #L4af190.  call temp:= `readByte`(v0) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L4af196.  v0:= temp;
  #L4af198.  call temp:= `X`(v0) @signature `Lvc/q;.X:(I)Lvc/q;` @kind static;
  #L4af19e.  v0:= temp @kind object;
  #L4af1a0.  return v0 @kind object;
}
procedure `vc.q`[] `d0`() @signature `Lvc/q;.d0:()[Lvc/q;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4af1b4.  v0:= `@@vc.q.v` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4af1b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4af1be.  v0:= temp @kind object;
  #L4af1c0.  v0:= (`vc.q`[]) v0 @kind object;
  #L4af1c4.  v1:= length @variable v0;
  #L4af1c6.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L4af1cc.  v0:= temp @kind object;
  #L4af1ce.  v0:= (`vc.q`[]) v0 @kind object;
  #L4af1d2.  return v0 @kind object;
}
procedure `java.lang.Object` `readResolve`(`vc.q` v3 @kind this) @signature `Lvc/q;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4aefbc.  v0:= v3.`vc.q.o` @type ^`int`;
  #L4aefc0.  call temp:= `X`(v0) @signature `Lvc/q;.X:(I)Lvc/q;` @kind static;
  #L4aefc6.  v0:= temp @kind object;
  #L4aefc8.  return v0 @kind object;
  #L4aefca.  v0:= Exception @type ^`uc.b` @kind object;
  #L4aefcc.  v1:= new `java.io.InvalidObjectException`;
  #L4aefd0.  v2:= "Invalid era" @kind object;
  #L4aefd4.  call `<init>`(v1, v2) @signature `Ljava/io/InvalidObjectException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aefda.  call temp:= `initCause`(v1, v0) @signature `Ljava/io/InvalidObjectException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4aefe0.  throw v1;
  catch `uc.b` @[L4aefbc..L4aefc8] goto L4aefca;
}
procedure `java.lang.Object` `writeReplace`(`vc.q` v2 @kind this) @signature `Lvc/q;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4af004.  v0:= new `vc.u`;
  #L4af008.  v1:= 2I;
  #L4af00a.  call `<init>`(v0, v1, v2) @signature `Lvc/u;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L4af010.  return v0 @kind object;
}
procedure `uc.f` `T`(`vc.q` v3 @kind this) @signature `Lvc/q;.T:()Luc/f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4af03c.  v0:= v3.`vc.q.o` @type ^`int`;
  #L4af040.  call temp:= `a0`(v0) @signature `Lvc/q;.a0:(I)I` @kind static;
  #L4af046.  v0:= temp;
  #L4af048.  call temp:= `d0`() @signature `Lvc/q;.d0:()[Lvc/q;` @kind static;
  #L4af04e.  v1:= temp @kind object;
  #L4af050.  v2:= length @variable v1;
  #L4af052.  v2:= v2 + -1;
  #L4af056.  if v0 < v2 then goto L4af060;
  #L4af05a.  v0:= `@@uc.f.s` @type ^`uc.f` @kind object;
  #L4af05e.  return v0 @kind object;
  #L4af060.  v0:= v0 + 1;
  #L4af064.  v0:= v1[v0] @kind object;
  #L4af068.  call temp:= `c0`(v0) @signature `Lvc/q;.c0:()Luc/f;` @kind virtual;
  #L4af06e.  v0:= temp @kind object;
  #L4af070.  v1:= 1L;
  #L4af074.  call temp:= `A0`(v0, v1) @signature `Luc/f;.A0:(J)Luc/f;` @kind virtual;
  #L4af07a.  v0:= temp @kind object;
  #L4af07c.  return v0 @kind object;
}
procedure `uc.f` `c0`(`vc.q` v1 @kind this) @signature `Lvc/q;.c0:()Luc/f;` @AccessFlag  {
    temp;
    v0;

  #L4af090.  v0:= v1.`vc.q.p` @type ^`uc.f` @kind object;
  #L4af094.  return v0 @kind object;
}
procedure `void` `e0`(`vc.q` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Lvc/q;.e0:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L4af2d8.  call temp:= `getValue`(v1) @signature `Lvc/q;.getValue:()I` @kind virtual;
  #L4af2de.  v0:= temp;
  #L4af2e0.  call `writeByte`(v2, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L4af2e6.  return @kind void;
}
procedure `int` `getValue`(`vc.q` v1 @kind this) @signature `Lvc/q;.getValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aef8c.  v0:= v1.`vc.q.o` @type ^`int`;
  #L4aef90.  return v0;
}
procedure `yc.n` `t`(`vc.q` v1 @kind this, `yc.i` v2 @kind object) @signature `Lvc/q;.t:(Lyc/i;)Lyc/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af2f8.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4af2fc.  if v2 != v0 then goto L4af30e;
  #L4af300.  v2:= `@@vc.o.r` @type ^`vc.o` @kind object;
  #L4af304.  call temp:= `T`(v2, v0) @signature `Lvc/o;.T:(Lyc/a;)Lyc/n;` @kind virtual;
  #L4af30a.  v2:= temp @kind object;
  #L4af30c.  return v2 @kind object;
  #L4af30e.  call temp:= `t`(v1, v2) @signature `Lxc/c;.t:(Lyc/i;)Lyc/n;` @kind super;
  #L4af314.  v2:= temp @kind object;
  #L4af316.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`vc.q` v1 @kind this) @signature `Lvc/q;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af024.  v0:= v1.`vc.q.q` @type ^`java.lang.String` @kind object;
  #L4af028.  return v0 @kind object;
}
