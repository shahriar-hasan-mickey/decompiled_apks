record `vc.b` @kind class @AccessFlag PUBLIC_ABSTRACT extends `xc.b` @kind class, `yc.f` @kind interface, `java.lang.Comparable` @kind interface {
}
procedure `void` `<clinit>`() @signature `Lvc/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a8fdc.  v0:= new `vc.b$a`;
  #L4a8fe0.  call `<init>`(v0) @signature `Lvc/b$a;.<init>:()V` @kind direct;
  #L4a8fe6.  return @kind void;
}
procedure `void` `<init>`(`vc.b` v0 @kind this) @signature `Lvc/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a8ff8.  call `<init>`(v0) @signature `Lxc/b;.<init>:()V` @kind direct;
  #L4a8ffe.  return @kind void;
}
procedure `yc.d` `D`(`vc.b` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/b;.D:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a9054.  call temp:= `e0`(v0, v1, v3) @signature `Lvc/b;.e0:(JLyc/l;)Lvc/b;` @kind virtual;
  #L4a905a.  v1:= temp @kind object;
  #L4a905c.  return v1 @kind object;
}
procedure `yc.d` `I`(`vc.b` v3 @kind this, `yc.d` v4 @kind object) @signature `Lvc/b;.I:(Lyc/d;)Lyc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a9010.  v0:= `@@yc.a.M` @type ^`yc.a` @kind object;
  #L4a9014.  call temp:= `g0`(v3) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a901a.  v1:= temp @kind wide;
  #L4a901c.  call temp:= `P`(v4, v0, v1) @signature `Lyc/d;.P:(Lyc/i;J)Lyc/d;` @kind interface;
  #L4a9022.  v4:= temp @kind object;
  #L4a9024.  return v4 @kind object;
}
procedure `yc.d` `L`(`vc.b` v0 @kind this, `yc.f` v1 @kind object) @signature `Lvc/b;.L:(Lyc/f;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a9070.  call temp:= `h0`(v0, v1) @signature `Lvc/b;.h0:(Lyc/f;)Lvc/b;` @kind virtual;
  #L4a9076.  v1:= temp @kind object;
  #L4a9078.  return v1 @kind object;
}
procedure `yc.d` `P`(`vc.b` v0 @kind this, `yc.i` v1 @kind object, `long` v2 ) @signature `Lvc/b;.P:(Lyc/i;J)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a908c.  call temp:= `i0`(v0, v1, v2) @signature `Lvc/b;.i0:(Lyc/i;J)Lvc/b;` @kind virtual;
  #L4a9092.  v1:= temp @kind object;
  #L4a9094.  return v1 @kind object;
}
procedure `vc.c` `V`(`vc.b` v0 @kind this, `uc.h` v1 @kind object) @signature `Lvc/b;.V:(Luc/h;)Lvc/c;` @AccessFlag PUBLIC {
    temp;

  #L4a8f90.  call temp:= `l0`(v0, v1) @signature `Lvc/d;.l0:(Lvc/b;Luc/h;)Lvc/d;` @kind static;
  #L4a8f96.  v1:= temp @kind object;
  #L4a8f98.  return v1 @kind object;
}
procedure `int` `X`(`vc.b` v4 @kind this, `vc.b` v5 @kind object) @signature `Lvc/b;.X:(Lvc/b;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a8d0c.  call temp:= `g0`(v4) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a8d12.  v0:= temp @kind wide;
  #L4a8d14.  call temp:= `g0`(v5) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a8d1a.  v2:= temp @kind wide;
  #L4a8d1c.  call temp:= `b`(v0, v2) @signature `Lxc/d;.b:(JJ)I` @kind static;
  #L4a8d22.  v0:= temp;
  #L4a8d24.  if v0 != 0 then goto L4a8d40;
  #L4a8d28.  call temp:= `a0`(v4) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8d2e.  v0:= temp @kind object;
  #L4a8d30.  call temp:= `a0`(v5) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8d36.  v5:= temp @kind object;
  #L4a8d38.  call temp:= `c`(v0, v5) @signature `Lvc/h;.c:(Lvc/h;)I` @kind virtual;
  #L4a8d3e.  v0:= temp;
  #L4a8d40.  return v0;
}
procedure `vc.h` `a0`() @signature `Lvc/b;.a0:()Lvc/h;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `vc.i` `b0`(`vc.b` v2 @kind this) @signature `Lvc/b;.b0:()Lvc/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8fac.  call temp:= `a0`(v2) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8fb2.  v0:= temp @kind object;
  #L4a8fb4.  v1:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4a8fb8.  call temp:= `F`(v2, v1) @signature `Lxc/c;.F:(Lyc/i;)I` @kind virtual;
  #L4a8fbe.  v1:= temp;
  #L4a8fc0.  call temp:= `j`(v0, v1) @signature `Lvc/h;.j:(I)Lvc/i;` @kind virtual;
  #L4a8fc6.  v0:= temp @kind object;
  #L4a8fc8.  return v0 @kind object;
}
procedure `boolean` `c0`(`vc.b` v4 @kind this, `vc.b` v5 @kind object) @signature `Lvc/b;.c0:(Lvc/b;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a8c80.  call temp:= `g0`(v4) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a8c86.  v0:= temp @kind wide;
  #L4a8c88.  call temp:= `g0`(v5) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a8c8e.  v2:= temp @kind wide;
  #L4a8c90.  v5:= lcmp(v0, v2);
  #L4a8c94.  if v5 >= 0 then goto L4a8c9c;
  #L4a8c98.  v5:= 1I;
  #L4a8c9a.  goto L4a8c9e;
  #L4a8c9c.  v5:= 0I;
  #L4a8c9e.  return v5;
}
procedure `int` `compareTo`(`vc.b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lvc/b;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a8cec.  v1:= (`vc.b`) v1 @kind object;
  #L4a8cf0.  call temp:= `X`(v0, v1) @signature `Lvc/b;.X:(Lvc/b;)I` @kind virtual;
  #L4a8cf6.  v1:= temp;
  #L4a8cf8.  return v1;
}
procedure `boolean` `d`(`vc.b` v1 @kind this, `yc.i` v2 @kind object) @signature `Lvc/b;.d:(Lyc/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8cb0.  v0:= instanceof @variable v2 @type ^`yc.a` @kind boolean;
  #L4a8cb4.  if v0 == 0 then goto L4a8cc2;
  #L4a8cb8.  call temp:= `c`(v2) @signature `Lyc/i;.c:()Z` @kind interface;
  #L4a8cbe.  v2:= temp;
  #L4a8cc0.  return v2;
  #L4a8cc2.  if v2 == 0 then goto L4a8cd6;
  #L4a8cc6.  call temp:= `j`(v2, v1) @signature `Lyc/i;.j:(Lyc/e;)Z` @kind interface;
  #L4a8ccc.  v2:= temp;
  #L4a8cce.  if v2 == 0 then goto L4a8cd6;
  #L4a8cd2.  v2:= 1I;
  #L4a8cd4.  goto L4a8cd8;
  #L4a8cd6.  v2:= 0I;
  #L4a8cd8.  return v2;
}
procedure `vc.b` `d0`(`vc.b` v1 @kind this, `long` v2 , `yc.l` v4 @kind object) @signature `Lvc/b;.d0:(JLyc/l;)Lvc/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8f0c.  call temp:= `a0`(v1) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8f12.  v0:= temp @kind object;
  #L4a8f14.  call temp:= `r`(v1, v2, v4) @signature `Lxc/b;.r:(JLyc/l;)Lyc/d;` @kind super;
  #L4a8f1a.  v2:= temp @kind object;
  #L4a8f1c.  call temp:= `e`(v0, v2) @signature `Lvc/h;.e:(Lyc/d;)Lvc/b;` @kind virtual;
  #L4a8f22.  v2:= temp @kind object;
  #L4a8f24.  return v2 @kind object;
}
procedure `vc.b` `e0`(`long` v0 , `yc.l` v2 @kind object) @signature `Lvc/b;.e0:(JLyc/l;)Lvc/b;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `equals`(`vc.b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lvc/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a8c44.  v0:= 1I;
  #L4a8c46.  if v3 != v4 then goto L4a8c4c;
  #L4a8c4a.  return v0;
  #L4a8c4c.  v1:= instanceof @variable v4 @type ^`vc.b` @kind boolean;
  #L4a8c50.  v2:= 0I;
  #L4a8c52.  if v1 == 0 then goto L4a8c6c;
  #L4a8c56.  v4:= (`vc.b`) v4 @kind object;
  #L4a8c5a.  call temp:= `X`(v3, v4) @signature `Lvc/b;.X:(Lvc/b;)I` @kind virtual;
  #L4a8c60.  v4:= temp;
  #L4a8c62.  if v4 != 0 then goto L4a8c68;
  #L4a8c66.  goto L4a8c6a;
  #L4a8c68.  v0:= 0I;
  #L4a8c6a.  return v0;
  #L4a8c6c.  return v2;
}
procedure `vc.b` `f0`(`vc.b` v1 @kind this, `yc.h` v2 @kind object) @signature `Lvc/b;.f0:(Lyc/h;)Lvc/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8f38.  call temp:= `a0`(v1) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8f3e.  v0:= temp @kind object;
  #L4a8f40.  call temp:= `T`(v1, v2) @signature `Lxc/b;.T:(Lyc/h;)Lyc/d;` @kind super;
  #L4a8f46.  v2:= temp @kind object;
  #L4a8f48.  call temp:= `e`(v0, v2) @signature `Lvc/h;.e:(Lyc/d;)Lvc/b;` @kind virtual;
  #L4a8f4e.  v2:= temp @kind object;
  #L4a8f50.  return v2 @kind object;
}
procedure `long` `g0`(`vc.b` v2 @kind this) @signature `Lvc/b;.g0:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8eec.  v0:= `@@yc.a.M` @type ^`yc.a` @kind object;
  #L4a8ef0.  call temp:= `B`(v2, v0) @signature `Lyc/e;.B:(Lyc/i;)J` @kind interface;
  #L4a8ef6.  v0:= temp @kind wide;
  #L4a8ef8.  return v0 @kind wide;
}
procedure `vc.b` `h0`(`vc.b` v1 @kind this, `yc.f` v2 @kind object) @signature `Lvc/b;.h0:(Lyc/f;)Lvc/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8f64.  call temp:= `a0`(v1) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8f6a.  v0:= temp @kind object;
  #L4a8f6c.  call temp:= `L`(v1, v2) @signature `Lxc/b;.L:(Lyc/f;)Lyc/d;` @kind super;
  #L4a8f72.  v2:= temp @kind object;
  #L4a8f74.  call temp:= `e`(v0, v2) @signature `Lvc/h;.e:(Lyc/d;)Lvc/b;` @kind virtual;
  #L4a8f7a.  v2:= temp @kind object;
  #L4a8f7c.  return v2 @kind object;
}
procedure `int` `hashCode`(`vc.b` v5 @kind this) @signature `Lvc/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a8d54.  call temp:= `g0`(v5) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a8d5a.  v0:= temp @kind wide;
  #L4a8d5c.  call temp:= `a0`(v5) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8d62.  v2:= temp @kind object;
  #L4a8d64.  call temp:= `hashCode`(v2) @signature `Lvc/h;.hashCode:()I` @kind virtual;
  #L4a8d6a.  v2:= temp;
  #L4a8d6c.  v3:= 32I;
  #L4a8d70.  v3:= v0 ^>> v3 @kind long;
  #L4a8d74.  v0:= v0 ^~ v3 @kind long;
  #L4a8d76.  v1:= (`int`) v0 @kind l2i;
  #L4a8d78.  v0:= v2 ^~ v1 @kind int;
  #L4a8d7c.  return v0;
}
procedure `vc.b` `i0`(`yc.i` v0 @kind object, `long` v1 ) @signature `Lvc/b;.i0:(Lyc/i;J)Lvc/b;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `j`(`vc.b` v2 @kind this, `yc.k` v3 @kind object) @signature `Lvc/b;.j:(Lyc/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8d90.  call temp:= `a`() @signature `Lyc/j;.a:()Lyc/k;` @kind static;
  #L4a8d96.  v0:= temp @kind object;
  #L4a8d98.  if v3 != v0 then goto L4a8da6;
  #L4a8d9c.  call temp:= `a0`(v2) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8da2.  v3:= temp @kind object;
  #L4a8da4.  return v3 @kind object;
  #L4a8da6.  call temp:= `e`() @signature `Lyc/j;.e:()Lyc/k;` @kind static;
  #L4a8dac.  v0:= temp @kind object;
  #L4a8dae.  if v3 != v0 then goto L4a8db8;
  #L4a8db2.  v3:= `@@yc.b.w` @type ^`yc.b` @kind object;
  #L4a8db6.  return v3 @kind object;
  #L4a8db8.  call temp:= `b`() @signature `Lyc/j;.b:()Lyc/k;` @kind static;
  #L4a8dbe.  v0:= temp @kind object;
  #L4a8dc0.  if v3 != v0 then goto L4a8dd6;
  #L4a8dc4.  call temp:= `g0`(v2) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a8dca.  v0:= temp @kind wide;
  #L4a8dcc.  call temp:= `E0`(v0) @signature `Luc/f;.E0:(J)Luc/f;` @kind static;
  #L4a8dd2.  v3:= temp @kind object;
  #L4a8dd4.  return v3 @kind object;
  #L4a8dd6.  call temp:= `c`() @signature `Lyc/j;.c:()Lyc/k;` @kind static;
  #L4a8ddc.  v0:= temp @kind object;
  #L4a8dde.  if v3 == v0 then goto L4a8e12;
  #L4a8de2.  call temp:= `f`() @signature `Lyc/j;.f:()Lyc/k;` @kind static;
  #L4a8de8.  v0:= temp @kind object;
  #L4a8dea.  if v3 == v0 then goto L4a8e12;
  #L4a8dee.  call temp:= `g`() @signature `Lyc/j;.g:()Lyc/k;` @kind static;
  #L4a8df4.  v0:= temp @kind object;
  #L4a8df6.  if v3 == v0 then goto L4a8e12;
  #L4a8dfa.  call temp:= `d`() @signature `Lyc/j;.d:()Lyc/k;` @kind static;
  #L4a8e00.  v0:= temp @kind object;
  #L4a8e02.  if v3 != v0 then goto L4a8e08;
  #L4a8e06.  goto L4a8e12;
  #L4a8e08.  call temp:= `j`(v2, v3) @signature `Lxc/c;.j:(Lyc/k;)Ljava/lang/Object;` @kind super;
  #L4a8e0e.  v3:= temp @kind object;
  #L4a8e10.  return v3 @kind object;
  #L4a8e12.  v3:= 0I;
  #L4a8e14.  return v3 @kind object;
}
procedure `yc.d` `r`(`vc.b` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/b;.r:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a9038.  call temp:= `d0`(v0, v1, v3) @signature `Lvc/b;.d0:(JLyc/l;)Lvc/b;` @kind virtual;
  #L4a903e.  v1:= temp @kind object;
  #L4a9040.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`vc.b` v10 @kind this) @signature `Lvc/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4a8e28.  v0:= `@@yc.a.R` @type ^`yc.a` @kind object;
  #L4a8e2c.  call temp:= `B`(v10, v0) @signature `Lyc/e;.B:(Lyc/i;)J` @kind interface;
  #L4a8e32.  v0:= temp @kind wide;
  #L4a8e34.  v2:= `@@yc.a.P` @type ^`yc.a` @kind object;
  #L4a8e38.  call temp:= `B`(v10, v2) @signature `Lyc/e;.B:(Lyc/i;)J` @kind interface;
  #L4a8e3e.  v2:= temp @kind wide;
  #L4a8e40.  v4:= `@@yc.a.K` @type ^`yc.a` @kind object;
  #L4a8e44.  call temp:= `B`(v10, v4) @signature `Lyc/e;.B:(Lyc/i;)J` @kind interface;
  #L4a8e4a.  v4:= temp @kind wide;
  #L4a8e4c.  v6:= new `java.lang.StringBuilder`;
  #L4a8e50.  v7:= 30I;
  #L4a8e54.  call `<init>`(v6, v7) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L4a8e5a.  call temp:= `a0`(v10) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8e60.  v7:= temp @kind object;
  #L4a8e62.  call temp:= `toString`(v7) @signature `Lvc/h;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a8e68.  v7:= temp @kind object;
  #L4a8e6a.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8e70.  v7:= " " @kind object;
  #L4a8e74.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8e7a.  call temp:= `b0`(v10) @signature `Lvc/b;.b0:()Lvc/i;` @kind virtual;
  #L4a8e80.  v8:= temp @kind object;
  #L4a8e82.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8e88.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8e8e.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8e94.  v0:= "-0" @kind object;
  #L4a8e98.  v1:= "-" @kind object;
  #L4a8e9c.  v7:= 10L;
  #L4a8ea0.  v9:= lcmp(v2, v7);
  #L4a8ea4.  if v9 >= 0 then goto L4a8eac;
  #L4a8ea8.  v9:= v0 @kind object;
  #L4a8eaa.  goto L4a8eae;
  #L4a8eac.  v9:= v1 @kind object;
  #L4a8eae.  call temp:= `append`(v6, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8eb4.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8eba.  v2:= lcmp(v4, v7);
  #L4a8ebe.  if v2 >= 0 then goto L4a8ec4;
  #L4a8ec2.  goto L4a8ec6;
  #L4a8ec4.  v0:= v1 @kind object;
  #L4a8ec6.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8ecc.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8ed2.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a8ed8.  v0:= temp @kind object;
  #L4a8eda.  return v0 @kind object;
}
