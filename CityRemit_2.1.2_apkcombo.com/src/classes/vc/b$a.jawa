record `vc.b$a` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`vc.b$a` v0 @kind this) @signature `Lvc/b$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a7e44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a7e4a.  return @kind void;
}
procedure `int` `a`(`vc.b$a` v2 @kind this, `vc.b` v3 @kind object, `vc.b` v4 @kind object) @signature `Lvc/b$a;.a:(Lvc/b;Lvc/b;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a7e18.  call temp:= `g0`(v3) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a7e1e.  v0:= temp @kind wide;
  #L4a7e20.  call temp:= `g0`(v4) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a7e26.  v3:= temp @kind wide;
  #L4a7e28.  call temp:= `b`(v0, v3) @signature `Lxc/d;.b:(JJ)I` @kind static;
  #L4a7e2e.  v3:= temp;
  #L4a7e30.  return v3;
}
procedure `int` `compare`(`vc.b$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lvc/b$a;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a7df4.  v1:= (`vc.b`) v1 @kind object;
  #L4a7df8.  v2:= (`vc.b`) v2 @kind object;
  #L4a7dfc.  call temp:= `a`(v0, v1, v2) @signature `Lvc/b$a;.a:(Lvc/b;Lvc/b;)I` @kind virtual;
  #L4a7e02.  v1:= temp;
  #L4a7e04.  return v1;
}
