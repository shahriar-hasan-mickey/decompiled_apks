record `vc.c` @kind class @AccessFlag PUBLIC_ABSTRACT extends `xc.b` @kind class, `yc.f` @kind interface, `java.lang.Comparable` @kind interface {
}
procedure `void` `<clinit>`() @signature `Lvc/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a8b54.  v0:= new `vc.c$a`;
  #L4a8b58.  call `<init>`(v0) @signature `Lvc/c$a;.<init>:()V` @kind direct;
  #L4a8b5e.  return @kind void;
}
procedure `void` `<init>`(`vc.c` v0 @kind this) @signature `Lvc/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a8b70.  call `<init>`(v0) @signature `Lxc/b;.<init>:()V` @kind direct;
  #L4a8b76.  return @kind void;
}
procedure `yc.d` `D`(`vc.c` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/c;.D:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a8bf0.  call temp:= `e0`(v0, v1, v3) @signature `Lvc/c;.e0:(JLyc/l;)Lvc/c;` @kind virtual;
  #L4a8bf6.  v1:= temp @kind object;
  #L4a8bf8.  return v1 @kind object;
}
procedure `yc.d` `I`(`vc.c` v3 @kind this, `yc.d` v4 @kind object) @signature `Lvc/c;.I:(Lyc/d;)Lyc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a8b88.  v0:= `@@yc.a.M` @type ^`yc.a` @kind object;
  #L4a8b8c.  call temp:= `h0`(v3) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a8b92.  v1:= temp @kind object;
  #L4a8b94.  call temp:= `g0`(v1) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a8b9a.  v1:= temp @kind wide;
  #L4a8b9c.  call temp:= `P`(v4, v0, v1) @signature `Lyc/d;.P:(Lyc/i;J)Lyc/d;` @kind interface;
  #L4a8ba2.  v4:= temp @kind object;
  #L4a8ba4.  v0:= `@@yc.a.t` @type ^`yc.a` @kind object;
  #L4a8ba8.  call temp:= `i0`(v3) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a8bae.  v1:= temp @kind object;
  #L4a8bb0.  call temp:= `t0`(v1) @signature `Luc/h;.t0:()J` @kind virtual;
  #L4a8bb6.  v1:= temp @kind wide;
  #L4a8bb8.  call temp:= `P`(v4, v0, v1) @signature `Lyc/d;.P:(Lyc/i;J)Lyc/d;` @kind interface;
  #L4a8bbe.  v4:= temp @kind object;
  #L4a8bc0.  return v4 @kind object;
}
procedure `yc.d` `L`(`vc.c` v0 @kind this, `yc.f` v1 @kind object) @signature `Lvc/c;.L:(Lyc/f;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a8c0c.  call temp:= `j0`(v0, v1) @signature `Lvc/c;.j0:(Lyc/f;)Lvc/c;` @kind virtual;
  #L4a8c12.  v1:= temp @kind object;
  #L4a8c14.  return v1 @kind object;
}
procedure `yc.d` `P`(`vc.c` v0 @kind this, `yc.i` v1 @kind object, `long` v2 ) @signature `Lvc/c;.P:(Lyc/i;J)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a8c28.  call temp:= `k0`(v0, v1, v2) @signature `Lvc/c;.k0:(Lyc/i;J)Lvc/c;` @kind virtual;
  #L4a8c2e.  v1:= temp @kind object;
  #L4a8c30.  return v1 @kind object;
}
procedure `vc.f` `V`(`uc.q` v0 @kind object) @signature `Lvc/c;.V:(Luc/q;)Lvc/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `X`(`vc.c` v2 @kind this, `vc.c` v3 @kind object) @signature `Lvc/c;.X:(Lvc/c;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a88a0.  call temp:= `h0`(v2) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a88a6.  v0:= temp @kind object;
  #L4a88a8.  call temp:= `h0`(v3) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a88ae.  v1:= temp @kind object;
  #L4a88b0.  call temp:= `X`(v0, v1) @signature `Lvc/b;.X:(Lvc/b;)I` @kind virtual;
  #L4a88b6.  v0:= temp;
  #L4a88b8.  if v0 != 0 then goto L4a88f0;
  #L4a88bc.  call temp:= `i0`(v2) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a88c2.  v0:= temp @kind object;
  #L4a88c4.  call temp:= `i0`(v3) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a88ca.  v1:= temp @kind object;
  #L4a88cc.  call temp:= `V`(v0, v1) @signature `Luc/h;.V:(Luc/h;)I` @kind virtual;
  #L4a88d2.  v0:= temp;
  #L4a88d4.  if v0 != 0 then goto L4a88f0;
  #L4a88d8.  call temp:= `a0`(v2) @signature `Lvc/c;.a0:()Lvc/h;` @kind virtual;
  #L4a88de.  v0:= temp @kind object;
  #L4a88e0.  call temp:= `a0`(v3) @signature `Lvc/c;.a0:()Lvc/h;` @kind virtual;
  #L4a88e6.  v3:= temp @kind object;
  #L4a88e8.  call temp:= `c`(v0, v3) @signature `Lvc/h;.c:(Lvc/h;)I` @kind virtual;
  #L4a88ee.  v0:= temp;
  #L4a88f0.  return v0;
}
procedure `vc.h` `a0`(`vc.c` v1 @kind this) @signature `Lvc/c;.a0:()Lvc/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8b30.  call temp:= `h0`(v1) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a8b36.  v0:= temp @kind object;
  #L4a8b38.  call temp:= `a0`(v0) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8b3e.  v0:= temp @kind object;
  #L4a8b40.  return v0 @kind object;
}
procedure `boolean` `b0`(`vc.c` v5 @kind this, `vc.c` v6 @kind object) @signature `Lvc/c;.b0:(Lvc/c;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a87a0.  call temp:= `h0`(v5) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a87a6.  v0:= temp @kind object;
  #L4a87a8.  call temp:= `g0`(v0) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a87ae.  v0:= temp @kind wide;
  #L4a87b0.  call temp:= `h0`(v6) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a87b6.  v2:= temp @kind object;
  #L4a87b8.  call temp:= `g0`(v2) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a87be.  v2:= temp @kind wide;
  #L4a87c0.  v4:= lcmp(v0, v2);
  #L4a87c4.  if v4 > 0 then goto L4a87fa;
  #L4a87c8.  if v4 != 0 then goto L4a87f6;
  #L4a87cc.  call temp:= `i0`(v5) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a87d2.  v0:= temp @kind object;
  #L4a87d4.  call temp:= `t0`(v0) @signature `Luc/h;.t0:()J` @kind virtual;
  #L4a87da.  v0:= temp @kind wide;
  #L4a87dc.  call temp:= `i0`(v6) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a87e2.  v6:= temp @kind object;
  #L4a87e4.  call temp:= `t0`(v6) @signature `Luc/h;.t0:()J` @kind virtual;
  #L4a87ea.  v2:= temp @kind wide;
  #L4a87ec.  v6:= lcmp(v0, v2);
  #L4a87f0.  if v6 <= 0 then goto L4a87f6;
  #L4a87f4.  goto L4a87fa;
  #L4a87f6.  v6:= 0I;
  #L4a87f8.  goto L4a87fc;
  #L4a87fa.  v6:= 1I;
  #L4a87fc.  return v6;
}
procedure `boolean` `c0`(`vc.c` v5 @kind this, `vc.c` v6 @kind object) @signature `Lvc/c;.c0:(Lvc/c;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a8810.  call temp:= `h0`(v5) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a8816.  v0:= temp @kind object;
  #L4a8818.  call temp:= `g0`(v0) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a881e.  v0:= temp @kind wide;
  #L4a8820.  call temp:= `h0`(v6) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a8826.  v2:= temp @kind object;
  #L4a8828.  call temp:= `g0`(v2) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a882e.  v2:= temp @kind wide;
  #L4a8830.  v4:= lcmp(v0, v2);
  #L4a8834.  if v4 < 0 then goto L4a886a;
  #L4a8838.  if v4 != 0 then goto L4a8866;
  #L4a883c.  call temp:= `i0`(v5) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a8842.  v0:= temp @kind object;
  #L4a8844.  call temp:= `t0`(v0) @signature `Luc/h;.t0:()J` @kind virtual;
  #L4a884a.  v0:= temp @kind wide;
  #L4a884c.  call temp:= `i0`(v6) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a8852.  v6:= temp @kind object;
  #L4a8854.  call temp:= `t0`(v6) @signature `Luc/h;.t0:()J` @kind virtual;
  #L4a885a.  v2:= temp @kind wide;
  #L4a885c.  v6:= lcmp(v0, v2);
  #L4a8860.  if v6 >= 0 then goto L4a8866;
  #L4a8864.  goto L4a886a;
  #L4a8866.  v6:= 0I;
  #L4a8868.  goto L4a886c;
  #L4a886a.  v6:= 1I;
  #L4a886c.  return v6;
}
procedure `int` `compareTo`(`vc.c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lvc/c;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a8880.  v1:= (`vc.c`) v1 @kind object;
  #L4a8884.  call temp:= `X`(v0, v1) @signature `Lvc/c;.X:(Lvc/c;)I` @kind virtual;
  #L4a888a.  v1:= temp;
  #L4a888c.  return v1;
}
procedure `vc.c` `d0`(`vc.c` v1 @kind this, `long` v2 , `yc.l` v4 @kind object) @signature `Lvc/c;.d0:(JLyc/l;)Lvc/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8ac8.  call temp:= `h0`(v1) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a8ace.  v0:= temp @kind object;
  #L4a8ad0.  call temp:= `a0`(v0) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8ad6.  v0:= temp @kind object;
  #L4a8ad8.  call temp:= `r`(v1, v2, v4) @signature `Lxc/b;.r:(JLyc/l;)Lyc/d;` @kind super;
  #L4a8ade.  v2:= temp @kind object;
  #L4a8ae0.  call temp:= `h`(v0, v2) @signature `Lvc/h;.h:(Lyc/d;)Lvc/d;` @kind virtual;
  #L4a8ae6.  v2:= temp @kind object;
  #L4a8ae8.  return v2 @kind object;
}
procedure `vc.c` `e0`(`long` v0 , `yc.l` v2 @kind object) @signature `Lvc/c;.e0:(JLyc/l;)Lvc/c;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `equals`(`vc.c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lvc/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a8764.  v0:= 1I;
  #L4a8766.  if v3 != v4 then goto L4a876c;
  #L4a876a.  return v0;
  #L4a876c.  v1:= instanceof @variable v4 @type ^`vc.c` @kind boolean;
  #L4a8770.  v2:= 0I;
  #L4a8772.  if v1 == 0 then goto L4a878c;
  #L4a8776.  v4:= (`vc.c`) v4 @kind object;
  #L4a877a.  call temp:= `X`(v3, v4) @signature `Lvc/c;.X:(Lvc/c;)I` @kind virtual;
  #L4a8780.  v4:= temp;
  #L4a8782.  if v4 != 0 then goto L4a8788;
  #L4a8786.  goto L4a878a;
  #L4a8788.  v0:= 0I;
  #L4a878a.  return v0;
  #L4a878c.  return v2;
}
procedure `long` `f0`(`vc.c` v4 @kind this, `uc.r` v5 @kind object) @signature `Lvc/c;.f0:(Luc/r;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a8a3c.  v0:= "offset" @kind object;
  #L4a8a40.  call temp:= `i`(v5, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a8a46.  call temp:= `h0`(v4) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a8a4c.  v0:= temp @kind object;
  #L4a8a4e.  call temp:= `g0`(v0) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a8a54.  v0:= temp @kind wide;
  #L4a8a56.  v2:= 86400L;
  #L4a8a5c.  v0:= v0 * v2 @kind long;
  #L4a8a60.  call temp:= `i0`(v4) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a8a66.  v2:= temp @kind object;
  #L4a8a68.  call temp:= `u0`(v2) @signature `Luc/h;.u0:()I` @kind virtual;
  #L4a8a6e.  v2:= temp;
  #L4a8a70.  v2:= (`long`) v2 @kind i2l;
  #L4a8a72.  v0:= v0 + v2 @kind long;
  #L4a8a74.  call temp:= `S`(v5) @signature `Luc/r;.S:()I` @kind virtual;
  #L4a8a7a.  v5:= temp;
  #L4a8a7c.  v2:= (`long`) v5 @kind i2l;
  #L4a8a7e.  v0:= v0 - v2 @kind long;
  #L4a8a80.  return v0 @kind wide;
}
procedure `uc.e` `g0`(`vc.c` v4 @kind this, `uc.r` v5 @kind object) @signature `Lvc/c;.g0:(Luc/r;)Luc/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a8a94.  call temp:= `f0`(v4, v5) @signature `Lvc/c;.f0:(Luc/r;)J` @kind virtual;
  #L4a8a9a.  v0:= temp @kind wide;
  #L4a8a9c.  call temp:= `i0`(v4) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a8aa2.  v5:= temp @kind object;
  #L4a8aa4.  call temp:= `e0`(v5) @signature `Luc/h;.e0:()I` @kind virtual;
  #L4a8aaa.  v5:= temp;
  #L4a8aac.  v2:= (`long`) v5 @kind i2l;
  #L4a8aae.  call temp:= `f0`(v0, v2) @signature `Luc/e;.f0:(JJ)Luc/e;` @kind static;
  #L4a8ab4.  v5:= temp @kind object;
  #L4a8ab6.  return v5 @kind object;
}
procedure `vc.b` `h0`() @signature `Lvc/c;.h0:()Lvc/b;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`vc.c` v2 @kind this) @signature `Lvc/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8904.  call temp:= `h0`(v2) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a890a.  v0:= temp @kind object;
  #L4a890c.  call temp:= `hashCode`(v0) @signature `Lvc/b;.hashCode:()I` @kind virtual;
  #L4a8912.  v0:= temp;
  #L4a8914.  call temp:= `i0`(v2) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a891a.  v1:= temp @kind object;
  #L4a891c.  call temp:= `hashCode`(v1) @signature `Luc/h;.hashCode:()I` @kind virtual;
  #L4a8922.  v1:= temp;
  #L4a8924.  v0:= v0 ^~ v1 @kind int;
  #L4a8926.  return v0;
}
procedure `uc.h` `i0`() @signature `Lvc/c;.i0:()Luc/h;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `j`(`vc.c` v2 @kind this, `yc.k` v3 @kind object) @signature `Lvc/c;.j:(Lyc/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a8938.  call temp:= `a`() @signature `Lyc/j;.a:()Lyc/k;` @kind static;
  #L4a893e.  v0:= temp @kind object;
  #L4a8940.  if v3 != v0 then goto L4a894e;
  #L4a8944.  call temp:= `a0`(v2) @signature `Lvc/c;.a0:()Lvc/h;` @kind virtual;
  #L4a894a.  v3:= temp @kind object;
  #L4a894c.  return v3 @kind object;
  #L4a894e.  call temp:= `e`() @signature `Lyc/j;.e:()Lyc/k;` @kind static;
  #L4a8954.  v0:= temp @kind object;
  #L4a8956.  if v3 != v0 then goto L4a8960;
  #L4a895a.  v3:= `@@yc.b.p` @type ^`yc.b` @kind object;
  #L4a895e.  return v3 @kind object;
  #L4a8960.  call temp:= `b`() @signature `Lyc/j;.b:()Lyc/k;` @kind static;
  #L4a8966.  v0:= temp @kind object;
  #L4a8968.  if v3 != v0 then goto L4a8986;
  #L4a896c.  call temp:= `h0`(v2) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a8972.  v3:= temp @kind object;
  #L4a8974.  call temp:= `g0`(v3) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a897a.  v0:= temp @kind wide;
  #L4a897c.  call temp:= `E0`(v0) @signature `Luc/f;.E0:(J)Luc/f;` @kind static;
  #L4a8982.  v3:= temp @kind object;
  #L4a8984.  return v3 @kind object;
  #L4a8986.  call temp:= `c`() @signature `Lyc/j;.c:()Lyc/k;` @kind static;
  #L4a898c.  v0:= temp @kind object;
  #L4a898e.  if v3 != v0 then goto L4a899c;
  #L4a8992.  call temp:= `i0`(v2) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a8998.  v3:= temp @kind object;
  #L4a899a.  return v3 @kind object;
  #L4a899c.  call temp:= `f`() @signature `Lyc/j;.f:()Lyc/k;` @kind static;
  #L4a89a2.  v0:= temp @kind object;
  #L4a89a4.  if v3 == v0 then goto L4a89cc;
  #L4a89a8.  call temp:= `g`() @signature `Lyc/j;.g:()Lyc/k;` @kind static;
  #L4a89ae.  v0:= temp @kind object;
  #L4a89b0.  if v3 == v0 then goto L4a89cc;
  #L4a89b4.  call temp:= `d`() @signature `Lyc/j;.d:()Lyc/k;` @kind static;
  #L4a89ba.  v0:= temp @kind object;
  #L4a89bc.  if v3 != v0 then goto L4a89c2;
  #L4a89c0.  goto L4a89cc;
  #L4a89c2.  call temp:= `j`(v2, v3) @signature `Lxc/c;.j:(Lyc/k;)Ljava/lang/Object;` @kind super;
  #L4a89c8.  v3:= temp @kind object;
  #L4a89ca.  return v3 @kind object;
  #L4a89cc.  v3:= 0I;
  #L4a89ce.  return v3 @kind object;
}
procedure `vc.c` `j0`(`vc.c` v1 @kind this, `yc.f` v2 @kind object) @signature `Lvc/c;.j0:(Lyc/f;)Lvc/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8afc.  call temp:= `h0`(v1) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a8b02.  v0:= temp @kind object;
  #L4a8b04.  call temp:= `a0`(v0) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a8b0a.  v0:= temp @kind object;
  #L4a8b0c.  call temp:= `L`(v1, v2) @signature `Lxc/b;.L:(Lyc/f;)Lyc/d;` @kind super;
  #L4a8b12.  v2:= temp @kind object;
  #L4a8b14.  call temp:= `h`(v0, v2) @signature `Lvc/h;.h:(Lyc/d;)Lvc/d;` @kind virtual;
  #L4a8b1a.  v2:= temp @kind object;
  #L4a8b1c.  return v2 @kind object;
}
procedure `vc.c` `k0`(`yc.i` v0 @kind object, `long` v1 ) @signature `Lvc/c;.k0:(Lyc/i;J)Lvc/c;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `yc.d` `r`(`vc.c` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/c;.r:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a8bd4.  call temp:= `d0`(v0, v1, v3) @signature `Lvc/c;.d0:(JLyc/l;)Lvc/c;` @kind virtual;
  #L4a8bda.  v1:= temp @kind object;
  #L4a8bdc.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`vc.c` v2 @kind this) @signature `Lvc/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a89e0.  v0:= new `java.lang.StringBuilder`;
  #L4a89e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a89ea.  call temp:= `h0`(v2) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a89f0.  v1:= temp @kind object;
  #L4a89f2.  call temp:= `toString`(v1) @signature `Lvc/b;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a89f8.  v1:= temp @kind object;
  #L4a89fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8a00.  v1:= 84I;
  #L4a8a04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8a0a.  call temp:= `i0`(v2) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a8a10.  v1:= temp @kind object;
  #L4a8a12.  call temp:= `toString`(v1) @signature `Luc/h;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a8a18.  v1:= temp @kind object;
  #L4a8a1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8a20.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a8a26.  v0:= temp @kind object;
  #L4a8a28.  return v0 @kind object;
}
