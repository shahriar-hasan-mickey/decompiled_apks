record `vc.f` @kind class @AccessFlag PUBLIC_ABSTRACT extends `xc.b` @kind class, `java.lang.Comparable` @kind interface {
}
procedure `void` `<clinit>`() @signature `Lvc/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a9d18.  v0:= new `vc.f$a`;
  #L4a9d1c.  call `<init>`(v0) @signature `Lvc/f$a;.<init>:()V` @kind direct;
  #L4a9d22.  return @kind void;
}
procedure `void` `<init>`(`vc.f` v0 @kind this) @signature `Lvc/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a9d34.  call `<init>`(v0) @signature `Lxc/b;.<init>:()V` @kind direct;
  #L4a9d3a.  return @kind void;
}
procedure `long` `B`(`vc.f` v2 @kind this, `yc.i` v3 @kind object) @signature `Lvc/f;.B:(Lyc/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a9b6c.  v0:= instanceof @variable v3 @type ^`yc.a` @kind boolean;
  #L4a9b70.  if v0 == 0 then goto L4a9bc6;
  #L4a9b74.  v0:= `@@vc.f$b.a` @type ^`int`[] @kind object;
  #L4a9b78.  v1:= v3 @kind object;
  #L4a9b7a.  v1:= (`yc.a`) v1 @kind object;
  #L4a9b7e.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4a9b84.  v1:= temp;
  #L4a9b86.  v0:= v0[v1];
  #L4a9b8a.  v1:= 1I;
  #L4a9b8c.  if v0 == v1 then goto L4a9bbc;
  #L4a9b90.  v1:= 2I;
  #L4a9b92.  if v0 == v1 then goto L4a9ba8;
  #L4a9b96.  call temp:= `h0`(v2) @signature `Lvc/f;.h0:()Lvc/c;` @kind virtual;
  #L4a9b9c.  v0:= temp @kind object;
  #L4a9b9e.  call temp:= `B`(v0, v3) @signature `Lyc/e;.B:(Lyc/i;)J` @kind interface;
  #L4a9ba4.  v0:= temp @kind wide;
  #L4a9ba6.  return v0 @kind wide;
  #L4a9ba8.  call temp:= `X`(v2) @signature `Lvc/f;.X:()Luc/r;` @kind virtual;
  #L4a9bae.  v3:= temp @kind object;
  #L4a9bb0.  call temp:= `S`(v3) @signature `Luc/r;.S:()I` @kind virtual;
  #L4a9bb6.  v3:= temp;
  #L4a9bb8.  v0:= (`long`) v3 @kind i2l;
  #L4a9bba.  return v0 @kind wide;
  #L4a9bbc.  call temp:= `e0`(v2) @signature `Lvc/f;.e0:()J` @kind virtual;
  #L4a9bc2.  v0:= temp @kind wide;
  #L4a9bc4.  return v0 @kind wide;
  #L4a9bc6.  call temp:= `o`(v3, v2) @signature `Lyc/i;.o:(Lyc/e;)J` @kind interface;
  #L4a9bcc.  v0:= temp @kind wide;
  #L4a9bce.  return v0 @kind wide;
}
procedure `yc.d` `D`(`vc.f` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/f;.D:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a9d68.  call temp:= `d0`(v0, v1, v3) @signature `Lvc/f;.d0:(JLyc/l;)Lvc/f;` @kind virtual;
  #L4a9d6e.  v1:= temp @kind object;
  #L4a9d70.  return v1 @kind object;
}
procedure `int` `F`(`vc.f` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/f;.F:(Lyc/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a991c.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4a9920.  if v0 == 0 then goto L4a9998;
  #L4a9924.  v0:= `@@vc.f$b.a` @type ^`int`[] @kind object;
  #L4a9928.  v1:= v4 @kind object;
  #L4a992a.  v1:= (`yc.a`) v1 @kind object;
  #L4a992e.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4a9934.  v1:= temp;
  #L4a9936.  v0:= v0[v1];
  #L4a993a.  v1:= 1I;
  #L4a993c.  if v0 == v1 then goto L4a996a;
  #L4a9940.  v1:= 2I;
  #L4a9942.  if v0 == v1 then goto L4a9958;
  #L4a9946.  call temp:= `h0`(v3) @signature `Lvc/f;.h0:()Lvc/c;` @kind virtual;
  #L4a994c.  v0:= temp @kind object;
  #L4a994e.  call temp:= `F`(v0, v4) @signature `Lxc/c;.F:(Lyc/i;)I` @kind virtual;
  #L4a9954.  v4:= temp;
  #L4a9956.  return v4;
  #L4a9958.  call temp:= `X`(v3) @signature `Lvc/f;.X:()Luc/r;` @kind virtual;
  #L4a995e.  v4:= temp @kind object;
  #L4a9960.  call temp:= `S`(v4) @signature `Luc/r;.S:()I` @kind virtual;
  #L4a9966.  v4:= temp;
  #L4a9968.  return v4;
  #L4a996a.  v0:= new `yc.m`;
  #L4a996e.  v1:= new `java.lang.StringBuilder`;
  #L4a9972.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a9978.  v2:= "Field too large for an int: " @kind object;
  #L4a997c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9982.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9988.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a998e.  v4:= temp @kind object;
  #L4a9990.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a9996.  throw v0;
  #L4a9998.  call temp:= `F`(v3, v4) @signature `Lxc/c;.F:(Lyc/i;)I` @kind super;
  #L4a999e.  v4:= temp;
  #L4a99a0.  return v4;
}
procedure `yc.d` `L`(`vc.f` v0 @kind this, `yc.f` v1 @kind object) @signature `Lvc/f;.L:(Lyc/f;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a9d84.  call temp:= `j0`(v0, v1) @signature `Lvc/f;.j0:(Lyc/f;)Lvc/f;` @kind virtual;
  #L4a9d8a.  v1:= temp @kind object;
  #L4a9d8c.  return v1 @kind object;
}
procedure `yc.d` `P`(`vc.f` v0 @kind this, `yc.i` v1 @kind object, `long` v2 ) @signature `Lvc/f;.P:(Lyc/i;J)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a9da0.  call temp:= `k0`(v0, v1, v2) @signature `Lvc/f;.k0:(Lyc/i;J)Lvc/f;` @kind virtual;
  #L4a9da6.  v1:= temp @kind object;
  #L4a9da8.  return v1 @kind object;
}
procedure `int` `V`(`vc.f` v4 @kind this, `vc.f` v5 @kind object) @signature `Lvc/f;.V:(Lvc/f;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a9858.  call temp:= `e0`(v4) @signature `Lvc/f;.e0:()J` @kind virtual;
  #L4a985e.  v0:= temp @kind wide;
  #L4a9860.  call temp:= `e0`(v5) @signature `Lvc/f;.e0:()J` @kind virtual;
  #L4a9866.  v2:= temp @kind wide;
  #L4a9868.  call temp:= `b`(v0, v2) @signature `Lxc/d;.b:(JJ)I` @kind static;
  #L4a986e.  v0:= temp;
  #L4a9870.  if v0 != 0 then goto L4a990a;
  #L4a9874.  call temp:= `i0`(v4) @signature `Lvc/f;.i0:()Luc/h;` @kind virtual;
  #L4a987a.  v0:= temp @kind object;
  #L4a987c.  call temp:= `e0`(v0) @signature `Luc/h;.e0:()I` @kind virtual;
  #L4a9882.  v0:= temp;
  #L4a9884.  call temp:= `i0`(v5) @signature `Lvc/f;.i0:()Luc/h;` @kind virtual;
  #L4a988a.  v1:= temp @kind object;
  #L4a988c.  call temp:= `e0`(v1) @signature `Luc/h;.e0:()I` @kind virtual;
  #L4a9892.  v1:= temp;
  #L4a9894.  v0:= v0 - v1 @kind int;
  #L4a9896.  if v0 != 0 then goto L4a990a;
  #L4a989a.  call temp:= `h0`(v4) @signature `Lvc/f;.h0:()Lvc/c;` @kind virtual;
  #L4a98a0.  v0:= temp @kind object;
  #L4a98a2.  call temp:= `h0`(v5) @signature `Lvc/f;.h0:()Lvc/c;` @kind virtual;
  #L4a98a8.  v1:= temp @kind object;
  #L4a98aa.  call temp:= `X`(v0, v1) @signature `Lvc/c;.X:(Lvc/c;)I` @kind virtual;
  #L4a98b0.  v0:= temp;
  #L4a98b2.  if v0 != 0 then goto L4a990a;
  #L4a98b6.  call temp:= `a0`(v4) @signature `Lvc/f;.a0:()Luc/q;` @kind virtual;
  #L4a98bc.  v0:= temp @kind object;
  #L4a98be.  call temp:= `e`(v0) @signature `Luc/q;.e:()Ljava/lang/String;` @kind virtual;
  #L4a98c4.  v0:= temp @kind object;
  #L4a98c6.  call temp:= `a0`(v5) @signature `Lvc/f;.a0:()Luc/q;` @kind virtual;
  #L4a98cc.  v1:= temp @kind object;
  #L4a98ce.  call temp:= `e`(v1) @signature `Luc/q;.e:()Ljava/lang/String;` @kind virtual;
  #L4a98d4.  v1:= temp @kind object;
  #L4a98d6.  call temp:= `compareTo`(v0, v1) @signature `Ljava/lang/String;.compareTo:(Ljava/lang/String;)I` @kind virtual;
  #L4a98dc.  v0:= temp;
  #L4a98de.  if v0 != 0 then goto L4a990a;
  #L4a98e2.  call temp:= `g0`(v4) @signature `Lvc/f;.g0:()Lvc/b;` @kind virtual;
  #L4a98e8.  v0:= temp @kind object;
  #L4a98ea.  call temp:= `a0`(v0) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a98f0.  v0:= temp @kind object;
  #L4a98f2.  call temp:= `g0`(v5) @signature `Lvc/f;.g0:()Lvc/b;` @kind virtual;
  #L4a98f8.  v5:= temp @kind object;
  #L4a98fa.  call temp:= `a0`(v5) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a9900.  v5:= temp @kind object;
  #L4a9902.  call temp:= `c`(v0, v5) @signature `Lvc/h;.c:(Lvc/h;)I` @kind virtual;
  #L4a9908.  v0:= temp;
  #L4a990a.  return v0;
}
procedure `uc.r` `X`() @signature `Lvc/f;.X:()Luc/r;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `uc.q` `a0`() @signature `Lvc/f;.a0:()Luc/q;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `b0`(`vc.f` v5 @kind this, `vc.f` v6 @kind object) @signature `Lvc/f;.b0:(Lvc/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a97dc.  call temp:= `e0`(v5) @signature `Lvc/f;.e0:()J` @kind virtual;
  #L4a97e2.  v0:= temp @kind wide;
  #L4a97e4.  call temp:= `e0`(v6) @signature `Lvc/f;.e0:()J` @kind virtual;
  #L4a97ea.  v2:= temp @kind wide;
  #L4a97ec.  v4:= lcmp(v0, v2);
  #L4a97f0.  if v4 < 0 then goto L4a9822;
  #L4a97f4.  if v4 != 0 then goto L4a981e;
  #L4a97f8.  call temp:= `i0`(v5) @signature `Lvc/f;.i0:()Luc/h;` @kind virtual;
  #L4a97fe.  v0:= temp @kind object;
  #L4a9800.  call temp:= `e0`(v0) @signature `Luc/h;.e0:()I` @kind virtual;
  #L4a9806.  v0:= temp;
  #L4a9808.  call temp:= `i0`(v6) @signature `Lvc/f;.i0:()Luc/h;` @kind virtual;
  #L4a980e.  v6:= temp @kind object;
  #L4a9810.  call temp:= `e0`(v6) @signature `Luc/h;.e0:()I` @kind virtual;
  #L4a9816.  v6:= temp;
  #L4a9818.  if v0 >= v6 then goto L4a981e;
  #L4a981c.  goto L4a9822;
  #L4a981e.  v6:= 0I;
  #L4a9820.  goto L4a9824;
  #L4a9822.  v6:= 1I;
  #L4a9824.  return v6;
}
procedure `vc.f` `c0`(`vc.f` v1 @kind this, `long` v2 , `yc.l` v4 @kind object) @signature `Lvc/f;.c0:(JLyc/l;)Lvc/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9cb0.  call temp:= `g0`(v1) @signature `Lvc/f;.g0:()Lvc/b;` @kind virtual;
  #L4a9cb6.  v0:= temp @kind object;
  #L4a9cb8.  call temp:= `a0`(v0) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a9cbe.  v0:= temp @kind object;
  #L4a9cc0.  call temp:= `r`(v1, v2, v4) @signature `Lxc/b;.r:(JLyc/l;)Lyc/d;` @kind super;
  #L4a9cc6.  v2:= temp @kind object;
  #L4a9cc8.  call temp:= `i`(v0, v2) @signature `Lvc/h;.i:(Lyc/d;)Lvc/g;` @kind virtual;
  #L4a9cce.  v2:= temp @kind object;
  #L4a9cd0.  return v2 @kind object;
}
procedure `int` `compareTo`(`vc.f` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lvc/f;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a9838.  v1:= (`vc.f`) v1 @kind object;
  #L4a983c.  call temp:= `V`(v0, v1) @signature `Lvc/f;.V:(Lvc/f;)I` @kind virtual;
  #L4a9842.  v1:= temp;
  #L4a9844.  return v1;
}
procedure `vc.f` `d0`(`long` v0 , `yc.l` v2 @kind object) @signature `Lvc/f;.d0:(JLyc/l;)Lvc/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `e0`(`vc.f` v4 @kind this) @signature `Lvc/f;.e0:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a9be0.  call temp:= `g0`(v4) @signature `Lvc/f;.g0:()Lvc/b;` @kind virtual;
  #L4a9be6.  v0:= temp @kind object;
  #L4a9be8.  call temp:= `g0`(v0) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a9bee.  v0:= temp @kind wide;
  #L4a9bf0.  v2:= 86400L;
  #L4a9bf6.  v0:= v0 * v2 @kind long;
  #L4a9bfa.  call temp:= `i0`(v4) @signature `Lvc/f;.i0:()Luc/h;` @kind virtual;
  #L4a9c00.  v2:= temp @kind object;
  #L4a9c02.  call temp:= `u0`(v2) @signature `Luc/h;.u0:()I` @kind virtual;
  #L4a9c08.  v2:= temp;
  #L4a9c0a.  v2:= (`long`) v2 @kind i2l;
  #L4a9c0c.  v0:= v0 + v2 @kind long;
  #L4a9c0e.  call temp:= `X`(v4) @signature `Lvc/f;.X:()Luc/r;` @kind virtual;
  #L4a9c14.  v2:= temp @kind object;
  #L4a9c16.  call temp:= `S`(v2) @signature `Luc/r;.S:()I` @kind virtual;
  #L4a9c1c.  v2:= temp;
  #L4a9c1e.  v2:= (`long`) v2 @kind i2l;
  #L4a9c20.  v0:= v0 - v2 @kind long;
  #L4a9c22.  return v0 @kind wide;
}
procedure `boolean` `equals`(`vc.f` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lvc/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a97a0.  v0:= 1I;
  #L4a97a2.  if v3 != v4 then goto L4a97a8;
  #L4a97a6.  return v0;
  #L4a97a8.  v1:= instanceof @variable v4 @type ^`vc.f` @kind boolean;
  #L4a97ac.  v2:= 0I;
  #L4a97ae.  if v1 == 0 then goto L4a97c8;
  #L4a97b2.  v4:= (`vc.f`) v4 @kind object;
  #L4a97b6.  call temp:= `V`(v3, v4) @signature `Lvc/f;.V:(Lvc/f;)I` @kind virtual;
  #L4a97bc.  v4:= temp;
  #L4a97be.  if v4 != 0 then goto L4a97c4;
  #L4a97c2.  goto L4a97c6;
  #L4a97c4.  v0:= 0I;
  #L4a97c6.  return v0;
  #L4a97c8.  return v2;
}
procedure `uc.e` `f0`(`vc.f` v4 @kind this) @signature `Lvc/f;.f0:()Luc/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a9c34.  call temp:= `e0`(v4) @signature `Lvc/f;.e0:()J` @kind virtual;
  #L4a9c3a.  v0:= temp @kind wide;
  #L4a9c3c.  call temp:= `i0`(v4) @signature `Lvc/f;.i0:()Luc/h;` @kind virtual;
  #L4a9c42.  v2:= temp @kind object;
  #L4a9c44.  call temp:= `e0`(v2) @signature `Luc/h;.e0:()I` @kind virtual;
  #L4a9c4a.  v2:= temp;
  #L4a9c4c.  v2:= (`long`) v2 @kind i2l;
  #L4a9c4e.  call temp:= `f0`(v0, v2) @signature `Luc/e;.f0:(JJ)Luc/e;` @kind static;
  #L4a9c54.  v0:= temp @kind object;
  #L4a9c56.  return v0 @kind object;
}
procedure `vc.b` `g0`(`vc.f` v1 @kind this) @signature `Lvc/f;.g0:()Lvc/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9c8c.  call temp:= `h0`(v1) @signature `Lvc/f;.h0:()Lvc/c;` @kind virtual;
  #L4a9c92.  v0:= temp @kind object;
  #L4a9c94.  call temp:= `h0`(v0) @signature `Lvc/c;.h0:()Lvc/b;` @kind virtual;
  #L4a9c9a.  v0:= temp @kind object;
  #L4a9c9c.  return v0 @kind object;
}
procedure `vc.c` `h0`() @signature `Lvc/f;.h0:()Lvc/c;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`vc.f` v3 @kind this) @signature `Lvc/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a99b4.  call temp:= `h0`(v3) @signature `Lvc/f;.h0:()Lvc/c;` @kind virtual;
  #L4a99ba.  v0:= temp @kind object;
  #L4a99bc.  call temp:= `hashCode`(v0) @signature `Lvc/c;.hashCode:()I` @kind virtual;
  #L4a99c2.  v0:= temp;
  #L4a99c4.  call temp:= `X`(v3) @signature `Lvc/f;.X:()Luc/r;` @kind virtual;
  #L4a99ca.  v1:= temp @kind object;
  #L4a99cc.  call temp:= `hashCode`(v1) @signature `Luc/r;.hashCode:()I` @kind virtual;
  #L4a99d2.  v1:= temp;
  #L4a99d4.  v0:= v0 ^~ v1 @kind int;
  #L4a99d6.  call temp:= `a0`(v3) @signature `Lvc/f;.a0:()Luc/q;` @kind virtual;
  #L4a99dc.  v1:= temp @kind object;
  #L4a99de.  call temp:= `hashCode`(v1) @signature `Luc/q;.hashCode:()I` @kind virtual;
  #L4a99e4.  v1:= temp;
  #L4a99e6.  v2:= 3I;
  #L4a99e8.  call temp:= `rotateLeft`(v1, v2) @signature `Ljava/lang/Integer;.rotateLeft:(II)I` @kind static;
  #L4a99ee.  v1:= temp;
  #L4a99f0.  v0:= v0 ^~ v1 @kind int;
  #L4a99f2.  return v0;
}
procedure `uc.h` `i0`(`vc.f` v1 @kind this) @signature `Lvc/f;.i0:()Luc/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9c68.  call temp:= `h0`(v1) @signature `Lvc/f;.h0:()Lvc/c;` @kind virtual;
  #L4a9c6e.  v0:= temp @kind object;
  #L4a9c70.  call temp:= `i0`(v0) @signature `Lvc/c;.i0:()Luc/h;` @kind virtual;
  #L4a9c76.  v0:= temp @kind object;
  #L4a9c78.  return v0 @kind object;
}
procedure `java.lang.Object` `j`(`vc.f` v2 @kind this, `yc.k` v3 @kind object) @signature `Lvc/f;.j:(Lyc/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a9a04.  call temp:= `g`() @signature `Lyc/j;.g:()Lyc/k;` @kind static;
  #L4a9a0a.  v0:= temp @kind object;
  #L4a9a0c.  if v3 == v0 then goto L4a9aaa;
  #L4a9a10.  call temp:= `f`() @signature `Lyc/j;.f:()Lyc/k;` @kind static;
  #L4a9a16.  v0:= temp @kind object;
  #L4a9a18.  if v3 != v0 then goto L4a9a1e;
  #L4a9a1c.  goto L4a9aaa;
  #L4a9a1e.  call temp:= `a`() @signature `Lyc/j;.a:()Lyc/k;` @kind static;
  #L4a9a24.  v0:= temp @kind object;
  #L4a9a26.  if v3 != v0 then goto L4a9a3c;
  #L4a9a2a.  call temp:= `g0`(v2) @signature `Lvc/f;.g0:()Lvc/b;` @kind virtual;
  #L4a9a30.  v3:= temp @kind object;
  #L4a9a32.  call temp:= `a0`(v3) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a9a38.  v3:= temp @kind object;
  #L4a9a3a.  return v3 @kind object;
  #L4a9a3c.  call temp:= `e`() @signature `Lyc/j;.e:()Lyc/k;` @kind static;
  #L4a9a42.  v0:= temp @kind object;
  #L4a9a44.  if v3 != v0 then goto L4a9a4e;
  #L4a9a48.  v3:= `@@yc.b.p` @type ^`yc.b` @kind object;
  #L4a9a4c.  return v3 @kind object;
  #L4a9a4e.  call temp:= `d`() @signature `Lyc/j;.d:()Lyc/k;` @kind static;
  #L4a9a54.  v0:= temp @kind object;
  #L4a9a56.  if v3 != v0 then goto L4a9a64;
  #L4a9a5a.  call temp:= `X`(v2) @signature `Lvc/f;.X:()Luc/r;` @kind virtual;
  #L4a9a60.  v3:= temp @kind object;
  #L4a9a62.  return v3 @kind object;
  #L4a9a64.  call temp:= `b`() @signature `Lyc/j;.b:()Lyc/k;` @kind static;
  #L4a9a6a.  v0:= temp @kind object;
  #L4a9a6c.  if v3 != v0 then goto L4a9a8a;
  #L4a9a70.  call temp:= `g0`(v2) @signature `Lvc/f;.g0:()Lvc/b;` @kind virtual;
  #L4a9a76.  v3:= temp @kind object;
  #L4a9a78.  call temp:= `g0`(v3) @signature `Lvc/b;.g0:()J` @kind virtual;
  #L4a9a7e.  v0:= temp @kind wide;
  #L4a9a80.  call temp:= `E0`(v0) @signature `Luc/f;.E0:(J)Luc/f;` @kind static;
  #L4a9a86.  v3:= temp @kind object;
  #L4a9a88.  return v3 @kind object;
  #L4a9a8a.  call temp:= `c`() @signature `Lyc/j;.c:()Lyc/k;` @kind static;
  #L4a9a90.  v0:= temp @kind object;
  #L4a9a92.  if v3 != v0 then goto L4a9aa0;
  #L4a9a96.  call temp:= `i0`(v2) @signature `Lvc/f;.i0:()Luc/h;` @kind virtual;
  #L4a9a9c.  v3:= temp @kind object;
  #L4a9a9e.  return v3 @kind object;
  #L4a9aa0.  call temp:= `j`(v2, v3) @signature `Lxc/c;.j:(Lyc/k;)Ljava/lang/Object;` @kind super;
  #L4a9aa6.  v3:= temp @kind object;
  #L4a9aa8.  return v3 @kind object;
  #L4a9aaa.  call temp:= `a0`(v2) @signature `Lvc/f;.a0:()Luc/q;` @kind virtual;
  #L4a9ab0.  v3:= temp @kind object;
  #L4a9ab2.  return v3 @kind object;
}
procedure `vc.f` `j0`(`vc.f` v1 @kind this, `yc.f` v2 @kind object) @signature `Lvc/f;.j0:(Lyc/f;)Lvc/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9ce4.  call temp:= `g0`(v1) @signature `Lvc/f;.g0:()Lvc/b;` @kind virtual;
  #L4a9cea.  v0:= temp @kind object;
  #L4a9cec.  call temp:= `a0`(v0) @signature `Lvc/b;.a0:()Lvc/h;` @kind virtual;
  #L4a9cf2.  v0:= temp @kind object;
  #L4a9cf4.  call temp:= `L`(v1, v2) @signature `Lxc/b;.L:(Lyc/f;)Lyc/d;` @kind super;
  #L4a9cfa.  v2:= temp @kind object;
  #L4a9cfc.  call temp:= `i`(v0, v2) @signature `Lvc/h;.i:(Lyc/d;)Lvc/g;` @kind virtual;
  #L4a9d02.  v2:= temp @kind object;
  #L4a9d04.  return v2 @kind object;
}
procedure `vc.f` `k0`(`yc.i` v0 @kind object, `long` v1 ) @signature `Lvc/f;.k0:(Lyc/i;J)Lvc/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `vc.f` `l0`(`uc.q` v0 @kind object) @signature `Lvc/f;.l0:(Luc/q;)Lvc/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `yc.d` `r`(`vc.f` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/f;.r:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a9d4c.  call temp:= `c0`(v0, v1, v3) @signature `Lvc/f;.c0:(JLyc/l;)Lvc/f;` @kind virtual;
  #L4a9d52.  v1:= temp @kind object;
  #L4a9d54.  return v1 @kind object;
}
procedure `yc.n` `t`(`vc.f` v1 @kind this, `yc.i` v2 @kind object) @signature `Lvc/f;.t:(Lyc/i;)Lyc/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9dbc.  v0:= instanceof @variable v2 @type ^`yc.a` @kind boolean;
  #L4a9dc0.  if v0 == 0 then goto L4a9df2;
  #L4a9dc4.  v0:= `@@yc.a.U` @type ^`yc.a` @kind object;
  #L4a9dc8.  if v2 == v0 then goto L4a9de8;
  #L4a9dcc.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L4a9dd0.  if v2 != v0 then goto L4a9dd6;
  #L4a9dd4.  goto L4a9de8;
  #L4a9dd6.  call temp:= `h0`(v1) @signature `Lvc/f;.h0:()Lvc/c;` @kind virtual;
  #L4a9ddc.  v0:= temp @kind object;
  #L4a9dde.  call temp:= `t`(v0, v2) @signature `Lxc/c;.t:(Lyc/i;)Lyc/n;` @kind virtual;
  #L4a9de4.  v2:= temp @kind object;
  #L4a9de6.  return v2 @kind object;
  #L4a9de8.  call temp:= `k`(v2) @signature `Lyc/i;.k:()Lyc/n;` @kind interface;
  #L4a9dee.  v2:= temp @kind object;
  #L4a9df0.  return v2 @kind object;
  #L4a9df2.  call temp:= `h`(v2, v1) @signature `Lyc/i;.h:(Lyc/e;)Lyc/n;` @kind interface;
  #L4a9df8.  v2:= temp @kind object;
  #L4a9dfa.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`vc.f` v3 @kind this) @signature `Lvc/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a9ac4.  v0:= new `java.lang.StringBuilder`;
  #L4a9ac8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a9ace.  call temp:= `h0`(v3) @signature `Lvc/f;.h0:()Lvc/c;` @kind virtual;
  #L4a9ad4.  v1:= temp @kind object;
  #L4a9ad6.  call temp:= `toString`(v1) @signature `Lvc/c;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a9adc.  v1:= temp @kind object;
  #L4a9ade.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9ae4.  call temp:= `X`(v3) @signature `Lvc/f;.X:()Luc/r;` @kind virtual;
  #L4a9aea.  v1:= temp @kind object;
  #L4a9aec.  call temp:= `toString`(v1) @signature `Luc/r;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a9af2.  v1:= temp @kind object;
  #L4a9af4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9afa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a9b00.  v0:= temp @kind object;
  #L4a9b02.  call temp:= `X`(v3) @signature `Lvc/f;.X:()Luc/r;` @kind virtual;
  #L4a9b08.  v1:= temp @kind object;
  #L4a9b0a.  call temp:= `a0`(v3) @signature `Lvc/f;.a0:()Luc/q;` @kind virtual;
  #L4a9b10.  v2:= temp @kind object;
  #L4a9b12.  if v1 == v2 then goto L4a9b58;
  #L4a9b16.  v1:= new `java.lang.StringBuilder`;
  #L4a9b1a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a9b20.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9b26.  v0:= 91I;
  #L4a9b2a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9b30.  call temp:= `a0`(v3) @signature `Lvc/f;.a0:()Luc/q;` @kind virtual;
  #L4a9b36.  v0:= temp @kind object;
  #L4a9b38.  call temp:= `toString`(v0) @signature `Luc/q;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a9b3e.  v0:= temp @kind object;
  #L4a9b40.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9b46.  v0:= 93I;
  #L4a9b4a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a9b50.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a9b56.  v0:= temp @kind object;
  #L4a9b58.  return v0 @kind object;
}
