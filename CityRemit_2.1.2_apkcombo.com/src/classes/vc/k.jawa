record `vc.k` @kind class @AccessFlag PUBLIC_FINAL extends `vc.a` @kind class {
  `vc.l` `vc.k.o` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `int` `vc.k.p` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `int` `vc.k.q` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `int` `vc.k.r` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `int` `vc.k.s` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `uc.c` `vc.k.t` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `long` `vc.k.u` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@vc.k.A` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@vc.k.B` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@vc.k.C` @AccessFlag PRIVATE_STATIC_FINAL;
global `char` `@@vc.k.D` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@vc.k.E` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@vc.k.F` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.HashMap` `@@vc.k.G` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.HashMap` `@@vc.k.H` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.HashMap` `@@vc.k.I` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Long`[] `@@vc.k.J` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Integer`[] `@@vc.k.K` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Integer`[] `@@vc.k.L` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Integer`[] `@@vc.k.M` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Integer`[] `@@vc.k.N` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Integer`[] `@@vc.k.O` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Integer`[] `@@vc.k.P` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Integer`[] `@@vc.k.Q` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Integer`[] `@@vc.k.R` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@vc.k.v` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@vc.k.w` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@vc.k.x` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@vc.k.y` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@vc.k.z` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lvc/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ab8fc.  v0:= 12I;
  #L4ab900.  v1:= new `int`[v0];
  #L4ab904.  goto L4abbd4;
  #L4ab90a.  `@@vc.k.v` @type ^`int`[] := v1 @kind object;
  #L4ab90e.  v2:= new `int`[v0];
  #L4ab912.  goto L4abc0c;
  #L4ab918.  `@@vc.k.w` @type ^`int`[] := v2 @kind object;
  #L4ab91c.  v2:= new `int`[v0];
  #L4ab920.  goto L4abc44;
  #L4ab926.  `@@vc.k.x` @type ^`int`[] := v2 @kind object;
  #L4ab92a.  v0:= new `int`[v0];
  #L4ab92e.  goto L4abc7c;
  #L4ab934.  `@@vc.k.y` @type ^`int`[] := v0 @kind object;
  #L4ab938.  v0:= 7I;
  #L4ab93a.  v2:= new `int`[v0];
  #L4ab93e.  goto L4abcb4;
  #L4ab944.  `@@vc.k.z` @type ^`int`[] := v2 @kind object;
  #L4ab948.  v2:= new `int`[v0];
  #L4ab94c.  goto L4abcd8;
  #L4ab952.  `@@vc.k.A` @type ^`int`[] := v2 @kind object;
  #L4ab956.  v0:= new `int`[v0];
  #L4ab95a.  goto L4abcfc;
  #L4ab960.  `@@vc.k.B` @type ^`int`[] := v0 @kind object;
  #L4ab964.  v0:= 30I;
  #L4ab968.  v0:= new `int`[v0];
  #L4ab96c.  goto L4abd20;
  #L4ab972.  `@@vc.k.C` @type ^`int`[] := v0 @kind object;
  #L4ab976.  v0:= `@@java.io.File.separatorChar` @type ^`char` @kind char;
  #L4ab97a.  `@@vc.k.D` @type ^`char` := v0 @kind char;
  #L4ab97e.  v2:= `@@java.io.File.pathSeparator` @type ^`java.lang.String` @kind object;
  #L4ab982.  `@@vc.k.E` @type ^`java.lang.String` := v2 @kind object;
  #L4ab986.  v2:= new `java.lang.StringBuilder`;
  #L4ab98a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ab990.  v3:= "org" @kind object;
  #L4ab994.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ab99a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ab9a0.  v3:= "threeten" @kind object;
  #L4ab9a4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ab9aa.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ab9b0.  v3:= "bp" @kind object;
  #L4ab9b4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ab9ba.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ab9c0.  v0:= "chrono" @kind object;
  #L4ab9c4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ab9ca.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ab9d0.  v0:= temp @kind object;
  #L4ab9d2.  `@@vc.k.F` @type ^`java.lang.String` := v0 @kind object;
  #L4ab9d6.  v0:= new `java.util.HashMap`;
  #L4ab9da.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L4ab9e0.  `@@vc.k.G` @type ^`java.util.HashMap` := v0 @kind object;
  #L4ab9e4.  v0:= new `java.util.HashMap`;
  #L4ab9e8.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L4ab9ee.  `@@vc.k.H` @type ^`java.util.HashMap` := v0 @kind object;
  #L4ab9f2.  v0:= new `java.util.HashMap`;
  #L4ab9f6.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L4ab9fc.  `@@vc.k.I` @type ^`java.util.HashMap` := v0 @kind object;
  #L4aba00.  v0:= length @variable v1;
  #L4aba02.  v0:= new `java.lang.Integer`[v0];
  #L4aba06.  `@@vc.k.N` @type ^`java.lang.Integer`[] := v0 @kind object;
  #L4aba0a.  v0:= 0I;
  #L4aba0c.  v1:= 0I;
  #L4aba0e.  v2:= `@@vc.k.v` @type ^`int`[] @kind object;
  #L4aba12.  v3:= length @variable v2;
  #L4aba14.  if v1 >= v3 then goto L4aba32;
  #L4aba18.  v3:= `@@vc.k.N` @type ^`java.lang.Integer`[] @kind object;
  #L4aba1c.  v2:= v2[v1];
  #L4aba20.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4aba26.  v2:= temp @kind object;
  #L4aba28.  v3[v1]:= v2 @kind object;
  #L4aba2c.  v1:= v1 + 1;
  #L4aba30.  goto L4aba0e;
  #L4aba32.  v1:= `@@vc.k.w` @type ^`int`[] @kind object;
  #L4aba36.  v1:= length @variable v1;
  #L4aba38.  v1:= new `java.lang.Integer`[v1];
  #L4aba3c.  `@@vc.k.O` @type ^`java.lang.Integer`[] := v1 @kind object;
  #L4aba40.  v1:= 0I;
  #L4aba42.  v2:= `@@vc.k.w` @type ^`int`[] @kind object;
  #L4aba46.  v3:= length @variable v2;
  #L4aba48.  if v1 >= v3 then goto L4aba66;
  #L4aba4c.  v3:= `@@vc.k.O` @type ^`java.lang.Integer`[] @kind object;
  #L4aba50.  v2:= v2[v1];
  #L4aba54.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4aba5a.  v2:= temp @kind object;
  #L4aba5c.  v3[v1]:= v2 @kind object;
  #L4aba60.  v1:= v1 + 1;
  #L4aba64.  goto L4aba42;
  #L4aba66.  v1:= `@@vc.k.x` @type ^`int`[] @kind object;
  #L4aba6a.  v1:= length @variable v1;
  #L4aba6c.  v1:= new `java.lang.Integer`[v1];
  #L4aba70.  `@@vc.k.P` @type ^`java.lang.Integer`[] := v1 @kind object;
  #L4aba74.  v1:= 0I;
  #L4aba76.  v2:= `@@vc.k.x` @type ^`int`[] @kind object;
  #L4aba7a.  v3:= length @variable v2;
  #L4aba7c.  if v1 >= v3 then goto L4aba9a;
  #L4aba80.  v3:= `@@vc.k.P` @type ^`java.lang.Integer`[] @kind object;
  #L4aba84.  v2:= v2[v1];
  #L4aba88.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4aba8e.  v2:= temp @kind object;
  #L4aba90.  v3[v1]:= v2 @kind object;
  #L4aba94.  v1:= v1 + 1;
  #L4aba98.  goto L4aba76;
  #L4aba9a.  v1:= `@@vc.k.y` @type ^`int`[] @kind object;
  #L4aba9e.  v1:= length @variable v1;
  #L4abaa0.  v1:= new `java.lang.Integer`[v1];
  #L4abaa4.  `@@vc.k.Q` @type ^`java.lang.Integer`[] := v1 @kind object;
  #L4abaa8.  v1:= 0I;
  #L4abaaa.  v2:= `@@vc.k.y` @type ^`int`[] @kind object;
  #L4abaae.  v3:= length @variable v2;
  #L4abab0.  if v1 >= v3 then goto L4abace;
  #L4abab4.  v3:= `@@vc.k.Q` @type ^`java.lang.Integer`[] @kind object;
  #L4abab8.  v2:= v2[v1];
  #L4ababc.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abac2.  v2:= temp @kind object;
  #L4abac4.  v3[v1]:= v2 @kind object;
  #L4abac8.  v1:= v1 + 1;
  #L4abacc.  goto L4abaaa;
  #L4abace.  v1:= `@@vc.k.C` @type ^`int`[] @kind object;
  #L4abad2.  v1:= length @variable v1;
  #L4abad4.  v1:= new `java.lang.Integer`[v1];
  #L4abad8.  `@@vc.k.R` @type ^`java.lang.Integer`[] := v1 @kind object;
  #L4abadc.  v1:= 0I;
  #L4abade.  v2:= `@@vc.k.C` @type ^`int`[] @kind object;
  #L4abae2.  v3:= length @variable v2;
  #L4abae4.  if v1 >= v3 then goto L4abb02;
  #L4abae8.  v3:= `@@vc.k.R` @type ^`java.lang.Integer`[] @kind object;
  #L4abaec.  v2:= v2[v1];
  #L4abaf0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abaf6.  v2:= temp @kind object;
  #L4abaf8.  v3[v1]:= v2 @kind object;
  #L4abafc.  v1:= v1 + 1;
  #L4abb00.  goto L4abade;
  #L4abb02.  v1:= 334I;
  #L4abb06.  v1:= new `java.lang.Long`[v1];
  #L4abb0a.  `@@vc.k.J` @type ^`java.lang.Long`[] := v1 @kind object;
  #L4abb0e.  v1:= 0I;
  #L4abb10.  v2:= `@@vc.k.J` @type ^`java.lang.Long`[] @kind object;
  #L4abb14.  v3:= length @variable v2;
  #L4abb16.  if v1 >= v3 then goto L4abb32;
  #L4abb1a.  v3:= v1 * 10631;
  #L4abb1e.  v3:= (`long`) v3 @kind i2l;
  #L4abb20.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4abb26.  v3:= temp @kind object;
  #L4abb28.  v2[v1]:= v3 @kind object;
  #L4abb2c.  v1:= v1 + 1;
  #L4abb30.  goto L4abb10;
  #L4abb32.  v1:= `@@vc.k.z` @type ^`int`[] @kind object;
  #L4abb36.  v1:= length @variable v1;
  #L4abb38.  v1:= new `java.lang.Integer`[v1];
  #L4abb3c.  `@@vc.k.K` @type ^`java.lang.Integer`[] := v1 @kind object;
  #L4abb40.  v1:= 0I;
  #L4abb42.  v2:= `@@vc.k.z` @type ^`int`[] @kind object;
  #L4abb46.  v3:= length @variable v2;
  #L4abb48.  if v1 >= v3 then goto L4abb66;
  #L4abb4c.  v3:= `@@vc.k.K` @type ^`java.lang.Integer`[] @kind object;
  #L4abb50.  v2:= v2[v1];
  #L4abb54.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abb5a.  v2:= temp @kind object;
  #L4abb5c.  v3[v1]:= v2 @kind object;
  #L4abb60.  v1:= v1 + 1;
  #L4abb64.  goto L4abb42;
  #L4abb66.  v1:= `@@vc.k.A` @type ^`int`[] @kind object;
  #L4abb6a.  v1:= length @variable v1;
  #L4abb6c.  v1:= new `java.lang.Integer`[v1];
  #L4abb70.  `@@vc.k.L` @type ^`java.lang.Integer`[] := v1 @kind object;
  #L4abb74.  v1:= 0I;
  #L4abb76.  v2:= `@@vc.k.A` @type ^`int`[] @kind object;
  #L4abb7a.  v3:= length @variable v2;
  #L4abb7c.  if v1 >= v3 then goto L4abb9a;
  #L4abb80.  v3:= `@@vc.k.L` @type ^`java.lang.Integer`[] @kind object;
  #L4abb84.  v2:= v2[v1];
  #L4abb88.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abb8e.  v2:= temp @kind object;
  #L4abb90.  v3[v1]:= v2 @kind object;
  #L4abb94.  v1:= v1 + 1;
  #L4abb98.  goto L4abb76;
  #L4abb9a.  v1:= `@@vc.k.B` @type ^`int`[] @kind object;
  #L4abb9e.  v1:= length @variable v1;
  #L4abba0.  v1:= new `java.lang.Integer`[v1];
  #L4abba4.  `@@vc.k.M` @type ^`java.lang.Integer`[] := v1 @kind object;
  #L4abba8.  v1:= `@@vc.k.B` @type ^`int`[] @kind object;
  #L4abbac.  v2:= length @variable v1;
  #L4abbae.  if v0 >= v2 then goto L4abbcc;
  #L4abbb2.  v2:= `@@vc.k.M` @type ^`java.lang.Integer`[] @kind object;
  #L4abbb6.  v1:= v1[v0];
  #L4abbba.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abbc0.  v1:= temp @kind object;
  #L4abbc2.  v2[v0]:= v1 @kind object;
  #L4abbc6.  v0:= v0 + 1;
  #L4abbca.  goto L4abba8;
  #L4abbcc.  call `Y0`() @signature `Lvc/k;.Y0:()V` @kind static;
  #L4abbd2.  return @kind void;
  #L4abbd4.  v1:= (0I, 30I, 59I, 89I, 118I, 148I, 177I, 207I, 236I, 266I, 295I, 325I) @kind object;
  #L4abc0b.  goto L4ab90a;
  #L4abc0c.  v2:= (0I, 30I, 59I, 89I, 118I, 148I, 177I, 207I, 236I, 266I, 295I, 325I) @kind object;
  #L4abc43.  goto L4ab918;
  #L4abc44.  v2:= (30I, 29I, 30I, 29I, 30I, 29I, 30I, 29I, 30I, 29I, 30I, 29I) @kind object;
  #L4abc7b.  goto L4ab926;
  #L4abc7c.  v0:= (30I, 29I, 30I, 29I, 30I, 29I, 30I, 29I, 30I, 29I, 30I, 30I) @kind object;
  #L4abcb3.  goto L4ab934;
  #L4abcb4.  v2:= (0I, 1I, 0I, 1I, 0I, 1I, 1I) @kind object;
  #L4abcd7.  goto L4ab944;
  #L4abcd8.  v2:= (1I, 9999I, 11I, 51I, 5I, 29I, 354I) @kind object;
  #L4abcfb.  goto L4ab952;
  #L4abcfc.  v0:= (1I, 9999I, 11I, 52I, 6I, 30I, 355I) @kind object;
  #L4abd1f.  goto L4ab960;
  #L4abd20.  v0:= (0I, 354I, 709I, 1063I, 1417I, 1772I, 2126I, 2481I, 2835I, 3189I, 3544I, 3898I, 4252I, 4607I, 4961I, 5315I, 5670I, 6024I, 6379I, 6733I, 7087I, 7442I, 7796I, 8150I, 8505I, 8859I, 9214I, 9568I, 9922I, 10277I) @kind object;
  #L4abd9f.  goto L4ab972;
  catch `java.io.IOException` @[L4abbcc..L4abbd2] goto L4abbd2;
  catch `java.text.ParseException` @[L4abbcc..L4abbd2] goto L4abbd2;
}
procedure `void` `<init>`(`vc.k` v6 @kind this, `long` v7 ) @signature `Lvc/k;.<init>:(J)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4abdc4.  call `<init>`(v6) @signature `Lvc/a;.<init>:()V` @kind direct;
  #L4abdca.  call temp:= `D0`(v7) @signature `Lvc/k;.D0:(J)[I` @kind static;
  #L4abdd0.  v0:= temp @kind object;
  #L4abdd2.  v1:= 1I;
  #L4abdd4.  v2:= v0[v1];
  #L4abdd8.  call `r0`(v2) @signature `Lvc/k;.r0:(I)V` @kind static;
  #L4abdde.  v2:= 2I;
  #L4abde0.  v3:= v0[v2];
  #L4abde4.  call `q0`(v3) @signature `Lvc/k;.q0:(I)V` @kind static;
  #L4abdea.  v3:= 3I;
  #L4abdec.  v4:= v0[v3];
  #L4abdf0.  call `o0`(v4) @signature `Lvc/k;.o0:(I)V` @kind static;
  #L4abdf6.  v4:= 4I;
  #L4abdf8.  v5:= v0[v4];
  #L4abdfc.  call `p0`(v5) @signature `Lvc/k;.p0:(I)V` @kind static;
  #L4abe02.  v5:= 0I;
  #L4abe04.  v5:= v0[v5];
  #L4abe08.  call temp:= `c`(v5) @signature `Lvc/l;.c:(I)Lvc/l;` @kind static;
  #L4abe0e.  v5:= temp @kind object;
  #L4abe10.  v6.`vc.k.o` @type ^`vc.l` := v5 @kind object;
  #L4abe14.  v1:= v0[v1];
  #L4abe18.  v6.`vc.k.p` @type ^`int` := v1;
  #L4abe1c.  v2:= v0[v2];
  #L4abe20.  v6.`vc.k.q` @type ^`int` := v2;
  #L4abe24.  v2:= v0[v3];
  #L4abe28.  v6.`vc.k.r` @type ^`int` := v2;
  #L4abe2c.  v2:= v0[v4];
  #L4abe30.  v6.`vc.k.s` @type ^`int` := v2;
  #L4abe34.  v2:= 5I;
  #L4abe36.  v0:= v0[v2];
  #L4abe3a.  call temp:= `e`(v0) @signature `Luc/c;.e:(I)Luc/c;` @kind static;
  #L4abe40.  v0:= temp @kind object;
  #L4abe42.  v6.`vc.k.t` @type ^`uc.c` := v0 @kind object;
  #L4abe46.  v6.`vc.k.u` @type ^`long` := v7 @kind wide;
  #L4abe4a.  v7:= (`long`) v1 @kind i2l;
  #L4abe4c.  call temp:= `L0`(v7) @signature `Lvc/k;.L0:(J)Z` @kind static;
  #L4abe52.  return @kind void;
}
procedure `int` `A0`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lvc/k;.A0:(III)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L4aa9c4.  call temp:= `s0`(v0) @signature `Lvc/k;.s0:(I)[Ljava/lang/Integer;` @kind static;
  #L4aa9ca.  v0:= temp @kind object;
  #L4aa9cc.  if v1 <= 0 then goto L4aa9e0;
  #L4aa9d0.  v0:= v0[v2] @kind object;
  #L4aa9d4.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aa9da.  v0:= temp;
  #L4aa9dc.  v1:= v1 - v0 @kind int;
  #L4aa9de.  return v1;
  #L4aa9e0.  v0:= v0[v2] @kind object;
  #L4aa9e4.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aa9ea.  v0:= temp;
  #L4aa9ec.  v0:= v0 + v1 @kind int;
  #L4aa9ee.  return v0;
}
procedure `long` `C0`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lvc/k;.C0:(III)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4ab174.  call temp:= `e1`(v2) @signature `Lvc/k;.e1:(I)J` @kind static;
  #L4ab17a.  v0:= temp @kind wide;
  #L4ab17c.  v3:= v3 + -1;
  #L4ab180.  call temp:= `G0`(v3, v2) @signature `Lvc/k;.G0:(II)I` @kind static;
  #L4ab186.  v2:= temp;
  #L4ab188.  v2:= (`long`) v2 @kind i2l;
  #L4ab18a.  v0:= v0 + v2 @kind long;
  #L4ab18c.  v2:= (`long`) v4 @kind i2l;
  #L4ab18e.  v0:= v0 + v2 @kind long;
  #L4ab190.  return v0 @kind wide;
}
procedure `int`[] `D0`(`long` v9 ) @signature `Lvc/k;.D0:(J)[I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4aacac.  v0:= -492148L;
  #L4aacb2.  v9:= v9 - v0 @kind long;
  #L4aacb4.  v0:= 1I;
  #L4aacb6.  v1:= 0L;
  #L4aacba.  v3:= lcmp(v9, v1);
  #L4aacbe.  if v3 < 0 then goto L4aad0c;
  #L4aacc2.  call temp:= `x0`(v9) @signature `Lvc/k;.x0:(J)I` @kind static;
  #L4aacc8.  v1:= temp;
  #L4aacca.  call temp:= `y0`(v9, v1) @signature `Lvc/k;.y0:(JI)I` @kind static;
  #L4aacd0.  v2:= temp;
  #L4aacd2.  v3:= (`long`) v2 @kind i2l;
  #L4aacd4.  call temp:= `J0`(v1, v3) @signature `Lvc/k;.J0:(IJ)I` @kind static;
  #L4aacda.  v3:= temp;
  #L4aacdc.  call temp:= `A0`(v1, v2, v3) @signature `Lvc/k;.A0:(III)I` @kind static;
  #L4aace2.  v2:= temp;
  #L4aace4.  v1:= v1 * 30;
  #L4aace8.  v1:= v1 + v3 @kind int;
  #L4aacea.  v1:= v1 + v0 @kind int;
  #L4aacec.  call temp:= `I0`(v2, v1) @signature `Lvc/k;.I0:(II)I` @kind static;
  #L4aacf2.  v3:= temp;
  #L4aacf4.  call temp:= `z0`(v2, v3, v1) @signature `Lvc/k;.z0:(III)I` @kind static;
  #L4aacfa.  v4:= temp;
  #L4aacfc.  v4:= v4 + v0 @kind int;
  #L4aacfe.  v5:= `@@vc.l.p` @type ^`vc.l` @kind object;
  #L4aad02.  call temp:= `getValue`(v5) @signature `Lvc/l;.getValue:()I` @kind virtual;
  #L4aad08.  v5:= temp;
  #L4aad0a.  goto L4aad7a;
  #L4aad0c.  v1:= (`int`) v9 @kind l2i;
  #L4aad0e.  v2:= v1 / 10631;
  #L4aad12.  v1:= v1 %% 10631;
  #L4aad16.  if v1 != 0 then goto L4aad22;
  #L4aad1a.  v1:= -10631I;
  #L4aad1e.  v2:= v2 + 1;
  #L4aad22.  v3:= (`long`) v1 @kind i2l;
  #L4aad24.  call temp:= `J0`(v2, v3) @signature `Lvc/k;.J0:(IJ)I` @kind static;
  #L4aad2a.  v3:= temp;
  #L4aad2c.  call temp:= `A0`(v2, v1, v3) @signature `Lvc/k;.A0:(III)I` @kind static;
  #L4aad32.  v1:= temp;
  #L4aad34.  v2:= v2 * 30;
  #L4aad38.  v2:= v2 - v3 @kind int;
  #L4aad3a.  v2:= v2 - 1;
  #L4aad3e.  v3:= (`long`) v2 @kind i2l;
  #L4aad40.  call temp:= `L0`(v3) @signature `Lvc/k;.L0:(J)Z` @kind static;
  #L4aad46.  v3:= temp;
  #L4aad48.  if v3 == 0 then goto L4aad52;
  #L4aad4c.  v1:= v1 + 355;
  #L4aad50.  goto L4aad56;
  #L4aad52.  v1:= v1 + 354;
  #L4aad56.  call temp:= `I0`(v1, v2) @signature `Lvc/k;.I0:(II)I` @kind static;
  #L4aad5c.  v3:= temp;
  #L4aad5e.  call temp:= `z0`(v1, v3, v2) @signature `Lvc/k;.z0:(III)I` @kind static;
  #L4aad64.  v4:= temp;
  #L4aad66.  v4:= v4 + v0 @kind int;
  #L4aad68.  v5:= `@@vc.l.o` @type ^`vc.l` @kind object;
  #L4aad6c.  call temp:= `getValue`(v5) @signature `Lvc/l;.getValue:()I` @kind virtual;
  #L4aad72.  v5:= temp;
  #L4aad74.  v8:= v2;
  #L4aad76.  v2:= v1;
  #L4aad78.  v1:= v8;
  #L4aad7a.  v6:= 5L;
  #L4aad7e.  v9:= v9 + v6 @kind long;
  #L4aad80.  v6:= 7L;
  #L4aad84.  v9:= v9 %% v6 @kind long;
  #L4aad86.  v10:= (`int`) v9 @kind l2i;
  #L4aad88.  v9:= 0I;
  #L4aad8a.  if v10 > 0 then goto L4aad92;
  #L4aad8e.  v6:= 7I;
  #L4aad90.  goto L4aad94;
  #L4aad92.  v6:= 0I;
  #L4aad94.  v10:= v10 + v6 @kind int;
  #L4aad96.  v6:= 6I;
  #L4aad98.  v6:= new `int`[v6];
  #L4aad9c.  v6[v9]:= v5;
  #L4aada0.  v6[v0]:= v1;
  #L4aada4.  v9:= 2I;
  #L4aada6.  v3:= v3 + v0 @kind int;
  #L4aada8.  v6[v9]:= v3;
  #L4aadac.  v9:= 3I;
  #L4aadae.  v6[v9]:= v4;
  #L4aadb2.  v9:= 4I;
  #L4aadb4.  v2:= v2 + v0 @kind int;
  #L4aadb6.  v6[v9]:= v2;
  #L4aadba.  v9:= 5I;
  #L4aadbc.  v6[v9]:= v10;
  #L4aadc0.  return v6 @kind object;
}
procedure `int` `E0`() @signature `Lvc/k;.E0:()I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L4aaa00.  v0:= `@@vc.k.M` @type ^`java.lang.Integer`[] @kind object;
  #L4aaa04.  v1:= 5I;
  #L4aaa06.  v0:= v0[v1] @kind object;
  #L4aaa0a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aaa10.  v0:= temp;
  #L4aaa12.  return v0;
}
procedure `int` `F0`() @signature `Lvc/k;.F0:()I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L4aaa24.  v0:= `@@vc.k.M` @type ^`java.lang.Integer`[] @kind object;
  #L4aaa28.  v1:= 6I;
  #L4aaa2a.  v0:= v0[v1] @kind object;
  #L4aaa2e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aaa34.  v0:= temp;
  #L4aaa36.  return v0;
}
procedure `int` `G0`(`int` v0 , `int` v1 ) @signature `Lvc/k;.G0:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L4aaa48.  call temp:= `t0`(v1) @signature `Lvc/k;.t0:(I)[Ljava/lang/Integer;` @kind static;
  #L4aaa4e.  v1:= temp @kind object;
  #L4aaa50.  v0:= v1[v0] @kind object;
  #L4aaa54.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aaa5a.  v0:= temp;
  #L4aaa5c.  return v0;
}
procedure `int` `H0`(`int` v0 , `int` v1 ) @signature `Lvc/k;.H0:(II)I` @AccessFlag STATIC {
    temp;

  #L4aaa70.  call temp:= `u0`(v1) @signature `Lvc/k;.u0:(I)[Ljava/lang/Integer;` @kind static;
  #L4aaa76.  v1:= temp @kind object;
  #L4aaa78.  v0:= v1[v0] @kind object;
  #L4aaa7c.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aaa82.  v0:= temp;
  #L4aaa84.  return v0;
}
procedure `int` `I0`(`int` v5 , `int` v6 ) @signature `Lvc/k;.I0:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4aaa98.  call temp:= `t0`(v6) @signature `Lvc/k;.t0:(I)[Ljava/lang/Integer;` @kind static;
  #L4aaa9e.  v0:= temp @kind object;
  #L4aaaa0.  v1:= 11I;
  #L4aaaa4.  v2:= 0I;
  #L4aaaa6.  if v5 < 0 then goto L4aaace;
  #L4aaaaa.  v6:= length @variable v0;
  #L4aaaac.  if v2 >= v6 then goto L4aaacc;
  #L4aaab0.  v6:= v0[v2] @kind object;
  #L4aaab4.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aaaba.  v6:= temp;
  #L4aaabc.  if v5 >= v6 then goto L4aaac6;
  #L4aaac0.  v2:= v2 + -1;
  #L4aaac4.  return v2;
  #L4aaac6.  v2:= v2 + 1;
  #L4aaaca.  goto L4aaaaa;
  #L4aaacc.  return v1;
  #L4aaace.  v3:= (`long`) v6 @kind i2l;
  #L4aaad0.  call temp:= `L0`(v3) @signature `Lvc/k;.L0:(J)Z` @kind static;
  #L4aaad6.  v6:= temp;
  #L4aaad8.  if v6 == 0 then goto L4aaae2;
  #L4aaadc.  v5:= v5 + 355;
  #L4aaae0.  goto L4aaae6;
  #L4aaae2.  v5:= v5 + 354;
  #L4aaae6.  v6:= length @variable v0;
  #L4aaae8.  if v2 >= v6 then goto L4aab08;
  #L4aaaec.  v6:= v0[v2] @kind object;
  #L4aaaf0.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aaaf6.  v6:= temp;
  #L4aaaf8.  if v5 >= v6 then goto L4aab02;
  #L4aaafc.  v2:= v2 + -1;
  #L4aab00.  return v2;
  #L4aab02.  v2:= v2 + 1;
  #L4aab06.  goto L4aaae6;
  #L4aab08.  return v1;
}
procedure `int` `J0`(`int` v5 , `long` v6 ) @signature `Lvc/k;.J0:(IJ)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4aab1c.  call temp:= `s0`(v5) @signature `Lvc/k;.s0:(I)[Ljava/lang/Integer;` @kind static;
  #L4aab22.  v5:= temp @kind object;
  #L4aab24.  v0:= 0I;
  #L4aab26.  v1:= 0L;
  #L4aab2a.  v3:= lcmp(v6, v1);
  #L4aab2e.  if v3 != 0 then goto L4aab34;
  #L4aab32.  return v0;
  #L4aab34.  v1:= 29I;
  #L4aab38.  if v3 <= 0 then goto L4aab66;
  #L4aab3c.  v2:= length @variable v5;
  #L4aab3e.  if v0 >= v2 then goto L4aab64;
  #L4aab42.  v2:= v5[v0] @kind object;
  #L4aab46.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aab4c.  v2:= temp;
  #L4aab4e.  v2:= (`long`) v2 @kind i2l;
  #L4aab50.  v4:= lcmp(v6, v2);
  #L4aab54.  if v4 >= 0 then goto L4aab5e;
  #L4aab58.  v0:= v0 + -1;
  #L4aab5c.  return v0;
  #L4aab5e.  v0:= v0 + 1;
  #L4aab62.  goto L4aab3c;
  #L4aab64.  return v1;
  #L4aab66.  v6:= -v6 @kind long;
  #L4aab68.  v2:= length @variable v5;
  #L4aab6a.  if v0 >= v2 then goto L4aab90;
  #L4aab6e.  v2:= v5[v0] @kind object;
  #L4aab72.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aab78.  v2:= temp;
  #L4aab7a.  v2:= (`long`) v2 @kind i2l;
  #L4aab7c.  v4:= lcmp(v6, v2);
  #L4aab80.  if v4 > 0 then goto L4aab8a;
  #L4aab84.  v0:= v0 + -1;
  #L4aab88.  return v0;
  #L4aab8a.  v0:= v0 + 1;
  #L4aab8e.  goto L4aab68;
  #L4aab90.  return v1;
}
procedure `int` `K0`(`int` v4 ) @signature `Lvc/k;.K0:(I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4aaba4.  v0:= v4 + -1;
  #L4aaba8.  v1:= v0 / 30;
  #L4aabac.  v2:= `@@vc.k.I` @type ^`java.util.HashMap` @kind object;
  #L4aabb0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4aabb6.  v3:= temp @kind object;
  #L4aabb8.  call temp:= `get`(v2, v3) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aabbe.  v2:= temp @kind object;
  #L4aabc0.  v2:= (`java.lang.Integer`[]) v2 @kind object;
  #L4aabc4.  goto L4aabc8;
  #L4aabc6.  v2:= 0I;
  #L4aabc8.  if v2 == 0 then goto L4aac2a;
  #L4aabcc.  v0:= v0 %% 30;
  #L4aabd0.  v4:= 29I;
  #L4aabd4.  if v0 != v4 then goto L4aac0a;
  #L4aabd8.  v4:= `@@vc.k.J` @type ^`java.lang.Long`[] @kind object;
  #L4aabdc.  v3:= v1 + 1;
  #L4aabe0.  v3:= v4[v3] @kind object;
  #L4aabe4.  call temp:= `intValue`(v3) @signature `Ljava/lang/Long;.intValue:()I` @kind virtual;
  #L4aabea.  v3:= temp;
  #L4aabec.  v4:= v4[v1] @kind object;
  #L4aabf0.  call temp:= `intValue`(v4) @signature `Ljava/lang/Long;.intValue:()I` @kind virtual;
  #L4aabf6.  v4:= temp;
  #L4aabf8.  v3:= v3 - v4 @kind int;
  #L4aabfa.  v4:= v2[v0] @kind object;
  #L4aabfe.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aac04.  v4:= temp;
  #L4aac06.  v3:= v3 - v4 @kind int;
  #L4aac08.  return v3;
  #L4aac0a.  v4:= v0 + 1;
  #L4aac0e.  v4:= v2[v4] @kind object;
  #L4aac12.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aac18.  v4:= temp;
  #L4aac1a.  v0:= v2[v0] @kind object;
  #L4aac1e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aac24.  v0:= temp;
  #L4aac26.  v4:= v4 - v0 @kind int;
  #L4aac28.  return v4;
  #L4aac2a.  v0:= (`long`) v4 @kind i2l;
  #L4aac2c.  call temp:= `L0`(v0) @signature `Lvc/k;.L0:(J)Z` @kind static;
  #L4aac32.  v4:= temp;
  #L4aac34.  if v4 == 0 then goto L4aac3e;
  #L4aac38.  v4:= 355I;
  #L4aac3c.  goto L4aac42;
  #L4aac3e.  v4:= 354I;
  #L4aac42.  return v4;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L4aabac..L4aabc4] goto L4aabc6;
}
procedure `boolean` `L0`(`long` v4 ) @signature `Lvc/k;.L0:(J)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4aa884.  v0:= 0L;
  #L4aa888.  v2:= lcmp(v4, v0);
  #L4aa88c.  if v2 <= 0 then goto L4aa892;
  #L4aa890.  goto L4aa894;
  #L4aa892.  v4:= -v4 @kind long;
  #L4aa894.  v0:= 11L;
  #L4aa898.  v4:= v4 * v0 @kind long;
  #L4aa89c.  v2:= 14L;
  #L4aa8a0.  v4:= v4 + v2 @kind long;
  #L4aa8a2.  v2:= 30L;
  #L4aa8a6.  v4:= v4 %% v2 @kind long;
  #L4aa8a8.  v2:= lcmp(v4, v0);
  #L4aa8ac.  if v2 >= 0 then goto L4aa8b4;
  #L4aa8b0.  v4:= 1I;
  #L4aa8b2.  goto L4aa8b6;
  #L4aa8b4.  v4:= 0I;
  #L4aa8b6.  return v4;
}
procedure `vc.k` `P0`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lvc/k;.P0:(III)Lvc/k;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4ab524.  v0:= 1I;
  #L4ab526.  if v2 < v0 then goto L4ab538;
  #L4ab52a.  v0:= `@@vc.l.p` @type ^`vc.l` @kind object;
  #L4ab52e.  call temp:= `Q0`(v0, v2, v3, v4) @signature `Lvc/k;.Q0:(Lvc/l;III)Lvc/k;` @kind static;
  #L4ab534.  v2:= temp @kind object;
  #L4ab536.  goto L4ab546;
  #L4ab538.  v1:= `@@vc.l.o` @type ^`vc.l` @kind object;
  #L4ab53c.  v0:= v0 - v2 @kind int;
  #L4ab53e.  call temp:= `Q0`(v1, v0, v3, v4) @signature `Lvc/k;.Q0:(Lvc/l;III)Lvc/k;` @kind static;
  #L4ab544.  v2:= temp @kind object;
  #L4ab546.  return v2 @kind object;
}
procedure `vc.k` `Q0`(`vc.l` v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lvc/k;.Q0:(Lvc/l;III)Lvc/k;` @AccessFlag STATIC {
    temp;
    v0;

  #L4ab558.  v0:= "era" @kind object;
  #L4ab55c.  call temp:= `i`(v1, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ab562.  call `r0`(v2) @signature `Lvc/k;.r0:(I)V` @kind static;
  #L4ab568.  call `q0`(v3) @signature `Lvc/k;.q0:(I)V` @kind static;
  #L4ab56e.  call `o0`(v4) @signature `Lvc/k;.o0:(I)V` @kind static;
  #L4ab574.  call temp:= `e`(v1, v2) @signature `Lvc/l;.e:(I)I` @kind virtual;
  #L4ab57a.  v1:= temp;
  #L4ab57c.  call temp:= `C0`(v1, v3, v4) @signature `Lvc/k;.C0:(III)J` @kind static;
  #L4ab582.  v1:= temp @kind wide;
  #L4ab584.  v3:= new `vc.k`;
  #L4ab588.  call `<init>`(v3, v1) @signature `Lvc/k;.<init>:(J)V` @kind direct;
  #L4ab58e.  return v3 @kind object;
}
procedure `vc.k` `R0`(`long` v1 ) @signature `Lvc/k;.R0:(J)Lvc/k;` @AccessFlag STATIC {
    temp;
    v0;

  #L4ab5a0.  v0:= new `vc.k`;
  #L4ab5a4.  call `<init>`(v0, v1) @signature `Lvc/k;.<init>:(J)V` @kind direct;
  #L4ab5aa.  return v0 @kind object;
}
procedure `void` `S0`(`java.lang.String` v10 @kind object, `int` v11 ) @signature `Lvc/k;.S0:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4ac67c.  v0:= new `java.util.StringTokenizer`;
  #L4ac680.  v1:= ";" @kind object;
  #L4ac684.  call `<init>`(v0, v10, v1) @signature `Ljava/util/StringTokenizer;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4ac68a.  call temp:= `hasMoreTokens`(v0) @signature `Ljava/util/StringTokenizer;.hasMoreTokens:()Z` @kind virtual;
  #L4ac690.  v10:= temp;
  #L4ac692.  if v10 == 0 then goto L4ac98a;
  #L4ac696.  call temp:= `nextToken`(v0) @signature `Ljava/util/StringTokenizer;.nextToken:()Ljava/lang/String;` @kind virtual;
  #L4ac69c.  v10:= temp @kind object;
  #L4ac69e.  v1:= 58I;
  #L4ac6a2.  call temp:= `indexOf`(v10, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L4ac6a8.  v1:= temp;
  #L4ac6aa.  v2:= -1I;
  #L4ac6ac.  v3:= "." @kind object;
  #L4ac6b0.  if v1 == v2 then goto L4ac956;
  #L4ac6b4.  v4:= v1 + 1;
  #L4ac6b8.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4ac6be.  v5:= temp;
  #L4ac6c0.  call temp:= `substring`(v10, v4, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4ac6c6.  v4:= temp @kind object;
  #L4ac6c8.  call temp:= `parseInt`(v4) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L4ac6ce.  v4:= temp;
  #L4ac6d0.  v5:= 45I;
  #L4ac6d4.  call temp:= `indexOf`(v10, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L4ac6da.  v5:= temp;
  #L4ac6dc.  if v5 == v2 then goto L4ac8ee;
  #L4ac6e0.  v6:= 0I;
  #L4ac6e2.  call temp:= `substring`(v10, v6, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4ac6e8.  v7:= temp @kind object;
  #L4ac6ea.  v5:= v5 + 1;
  #L4ac6ee.  call temp:= `substring`(v10, v5, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4ac6f4.  v10:= temp @kind object;
  #L4ac6f6.  v1:= 47I;
  #L4ac6fa.  call temp:= `indexOf`(v7, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L4ac700.  v5:= temp;
  #L4ac702.  call temp:= `indexOf`(v10, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L4ac708.  v1:= temp;
  #L4ac70a.  if v5 == v2 then goto L4ac8ba;
  #L4ac70e.  call temp:= `substring`(v7, v6, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4ac714.  v8:= temp @kind object;
  #L4ac716.  v5:= v5 + 1;
  #L4ac71a.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4ac720.  v9:= temp;
  #L4ac722.  call temp:= `substring`(v7, v5, v9) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4ac728.  v5:= temp @kind object;
  #L4ac72a.  call temp:= `parseInt`(v8) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L4ac730.  v7:= temp;
  #L4ac732.  call temp:= `parseInt`(v5) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L4ac738.  v5:= temp;
  #L4ac73a.  if v1 == v2 then goto L4ac81e;
  #L4ac73e.  call temp:= `substring`(v10, v6, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4ac744.  v6:= temp @kind object;
  #L4ac746.  v1:= v1 + 1;
  #L4ac74a.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4ac750.  v8:= temp;
  #L4ac752.  call temp:= `substring`(v10, v1, v8) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4ac758.  v10:= temp @kind object;
  #L4ac75a.  call temp:= `parseInt`(v6) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L4ac760.  v1:= temp;
  #L4ac762.  call temp:= `parseInt`(v10) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L4ac768.  v10:= temp;
  #L4ac76a.  if v7 == v2 then goto L4ac782;
  #L4ac76e.  if v5 == v2 then goto L4ac782;
  #L4ac772.  if v1 == v2 then goto L4ac782;
  #L4ac776.  if v10 == v2 then goto L4ac782;
  #L4ac77a.  call `n0`(v7, v5, v1, v10, v4) @signature `Lvc/k;.n0:(IIIII)V` @kind static;
  #L4ac780.  goto L4ac68a;
  #L4ac782.  v10:= new `java.text.ParseException`;
  #L4ac786.  v0:= new `java.lang.StringBuilder`;
  #L4ac78a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ac790.  v1:= "Unknown error at line " @kind object;
  #L4ac794.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac79a.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac7a0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac7a6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ac7ac.  v0:= temp @kind object;
  #L4ac7ae.  call `<init>`(v10, v0, v11) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ac7b4.  throw v10;
  #L4ac7b6.  v10:= new `java.text.ParseException`;
  #L4ac7ba.  v0:= new `java.lang.StringBuilder`;
  #L4ac7be.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ac7c4.  v1:= "End month is not properly set at line " @kind object;
  #L4ac7c8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac7ce.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac7d4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac7da.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ac7e0.  v0:= temp @kind object;
  #L4ac7e2.  call `<init>`(v10, v0, v11) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ac7e8.  throw v10;
  #L4ac7ea.  v10:= new `java.text.ParseException`;
  #L4ac7ee.  v0:= new `java.lang.StringBuilder`;
  #L4ac7f2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ac7f8.  v1:= "End year is not properly set at line " @kind object;
  #L4ac7fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac802.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac808.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac80e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ac814.  v0:= temp @kind object;
  #L4ac816.  call `<init>`(v10, v0, v11) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ac81c.  throw v10;
  #L4ac81e.  v10:= new `java.text.ParseException`;
  #L4ac822.  v0:= new `java.lang.StringBuilder`;
  #L4ac826.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ac82c.  v1:= "End year/month has incorrect format at line " @kind object;
  #L4ac830.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac836.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac83c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac842.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ac848.  v0:= temp @kind object;
  #L4ac84a.  call `<init>`(v10, v0, v11) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ac850.  throw v10;
  #L4ac852.  v10:= new `java.text.ParseException`;
  #L4ac856.  v0:= new `java.lang.StringBuilder`;
  #L4ac85a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ac860.  v1:= "Start month is not properly set at line " @kind object;
  #L4ac864.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac86a.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac870.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac876.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ac87c.  v0:= temp @kind object;
  #L4ac87e.  call `<init>`(v10, v0, v11) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ac884.  throw v10;
  #L4ac886.  v10:= new `java.text.ParseException`;
  #L4ac88a.  v0:= new `java.lang.StringBuilder`;
  #L4ac88e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ac894.  v1:= "Start year is not properly set at line " @kind object;
  #L4ac898.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac89e.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac8a4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac8aa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ac8b0.  v0:= temp @kind object;
  #L4ac8b2.  call `<init>`(v10, v0, v11) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ac8b8.  throw v10;
  #L4ac8ba.  v10:= new `java.text.ParseException`;
  #L4ac8be.  v0:= new `java.lang.StringBuilder`;
  #L4ac8c2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ac8c8.  v1:= "Start year/month has incorrect format at line " @kind object;
  #L4ac8cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac8d2.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac8d8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac8de.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ac8e4.  v0:= temp @kind object;
  #L4ac8e6.  call `<init>`(v10, v0, v11) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ac8ec.  throw v10;
  #L4ac8ee.  v10:= new `java.text.ParseException`;
  #L4ac8f2.  v0:= new `java.lang.StringBuilder`;
  #L4ac8f6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ac8fc.  v1:= "Start and end year/month has incorrect format at line " @kind object;
  #L4ac900.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac906.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac90c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac912.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ac918.  v0:= temp @kind object;
  #L4ac91a.  call `<init>`(v10, v0, v11) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ac920.  throw v10;
  #L4ac922.  v10:= new `java.text.ParseException`;
  #L4ac926.  v0:= new `java.lang.StringBuilder`;
  #L4ac92a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ac930.  v1:= "Offset is not properly set at line " @kind object;
  #L4ac934.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac93a.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac940.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac946.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ac94c.  v0:= temp @kind object;
  #L4ac94e.  call `<init>`(v10, v0, v11) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ac954.  throw v10;
  #L4ac956.  v10:= new `java.text.ParseException`;
  #L4ac95a.  v0:= new `java.lang.StringBuilder`;
  #L4ac95e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ac964.  v1:= "Offset has incorrect format at line " @kind object;
  #L4ac968.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac96e.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac974.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac97a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ac980.  v0:= temp @kind object;
  #L4ac982.  call `<init>`(v10, v0, v11) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4ac988.  throw v10;
  #L4ac98a.  return @kind void;
  catch `java.lang.NumberFormatException` @[L4ac6c8..L4ac6d0] goto L4ac922;
  catch `java.lang.NumberFormatException` @[L4ac72a..L4ac732] goto L4ac886;
  catch `java.lang.NumberFormatException` @[L4ac732..L4ac73a] goto L4ac852;
  catch `java.lang.NumberFormatException` @[L4ac75a..L4ac762] goto L4ac7ea;
  catch `java.lang.NumberFormatException` @[L4ac762..L4ac76a] goto L4ac7b6;
}
procedure `void` `Y0`() @signature `Lvc/k;.Y0:()V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ac9e0.  call temp:= `w0`() @signature `Lvc/k;.w0:()Ljava/io/InputStream;` @kind static;
  #L4ac9e6.  v0:= temp @kind object;
  #L4ac9e8.  if v0 == 0 then goto L4aca40;
  #L4ac9ec.  v1:= 0I;
  #L4ac9ee.  v2:= new `java.io.BufferedReader`;
  #L4ac9f2.  v3:= new `java.io.InputStreamReader`;
  #L4ac9f6.  call `<init>`(v3, v0) @signature `Ljava/io/InputStreamReader;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L4ac9fc.  call `<init>`(v2, v3) @signature `Ljava/io/BufferedReader;.<init>:(Ljava/io/Reader;)V` @kind direct;
  #L4aca02.  v0:= 0I;
  #L4aca04.  call temp:= `readLine`(v2) @signature `Ljava/io/BufferedReader;.readLine:()Ljava/lang/String;` @kind virtual;
  #L4aca0a.  v1:= temp @kind object;
  #L4aca0c.  if v1 == 0 then goto L4aca24;
  #L4aca10.  v0:= v0 + 1;
  #L4aca14.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L4aca1a.  v1:= temp @kind object;
  #L4aca1c.  call `S0`(v1, v0) @signature `Lvc/k;.S0:(Ljava/lang/String;I)V` @kind static;
  #L4aca22.  goto L4aca04;
  #L4aca24.  call `close`(v2) @signature `Ljava/io/BufferedReader;.close:()V` @kind virtual;
  #L4aca2a.  goto L4aca40;
  #L4aca2c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aca2e.  v1:= v2 @kind object;
  #L4aca30.  goto L4aca34;
  #L4aca32.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aca34.  if v1 == 0 then goto L4aca3e;
  #L4aca38.  call `close`(v1) @signature `Ljava/io/BufferedReader;.close:()V` @kind virtual;
  #L4aca3e.  throw v0;
  #L4aca40.  return @kind void;
  catch `java.lang.Throwable` @[L4ac9ee..L4aca02] goto L4aca32;
  catch `java.lang.Throwable` @[L4aca04..L4aca22] goto L4aca2c;
}
procedure `vc.b` `Z0`(`java.io.DataInput` v3 @kind object) @signature `Lvc/k;.Z0:(Ljava/io/DataInput;)Lvc/b;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4ab428.  call temp:= `readInt`(v3) @signature `Ljava/io/DataInput;.readInt:()I` @kind interface;
  #L4ab42e.  v0:= temp;
  #L4ab430.  call temp:= `readByte`(v3) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L4ab436.  v1:= temp;
  #L4ab438.  call temp:= `readByte`(v3) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L4ab43e.  v3:= temp;
  #L4ab440.  v2:= `@@vc.j.q` @type ^`vc.j` @kind object;
  #L4ab444.  call temp:= `K`(v2, v0, v1, v3) @signature `Lvc/j;.K:(III)Lvc/k;` @kind virtual;
  #L4ab44a.  v3:= temp @kind object;
  #L4ab44c.  return v3 @kind object;
}
procedure `vc.k` `a1`(`int` v1 , `int` v2 , `int` v3 ) @signature `Lvc/k;.a1:(III)Lvc/k;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4ab6c8.  v0:= v2 + -1;
  #L4ab6cc.  call temp:= `G0`(v0, v1) @signature `Lvc/k;.G0:(II)I` @kind static;
  #L4ab6d2.  v0:= temp;
  #L4ab6d4.  if v3 <= v0 then goto L4ab6da;
  #L4ab6d8.  v3:= v0;
  #L4ab6da.  call temp:= `P0`(v1, v2, v3) @signature `Lvc/k;.P0:(III)Lvc/k;` @kind static;
  #L4ab6e0.  v1:= temp @kind object;
  #L4ab6e2.  return v1 @kind object;
}
procedure `long` `e1`(`int` v4 ) @signature `Lvc/k;.e1:(I)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ab2dc.  v4:= v4 + -1;
  #L4ab2e0.  v0:= v4 / 30;
  #L4ab2e4.  v4:= v4 %% 30;
  #L4ab2e8.  call temp:= `s0`(v0) @signature `Lvc/k;.s0:(I)[Ljava/lang/Integer;` @kind static;
  #L4ab2ee.  v1:= temp @kind object;
  #L4ab2f0.  call temp:= `abs`(v4) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L4ab2f6.  v2:= temp;
  #L4ab2f8.  v1:= v1[v2] @kind object;
  #L4ab2fc.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ab302.  v1:= temp;
  #L4ab304.  if v4 >= 0 then goto L4ab30a;
  #L4ab308.  v1:= -v1 @kind int;
  #L4ab30a.  v4:= `@@vc.k.J` @type ^`java.lang.Long`[] @kind object;
  #L4ab30e.  v4:= v4[v0] @kind object;
  #L4ab312.  goto L4ab316;
  #L4ab314.  v4:= 0I;
  #L4ab316.  if v4 != 0 then goto L4ab328;
  #L4ab31a.  v0:= v0 * 10631;
  #L4ab31e.  v2:= (`long`) v0 @kind i2l;
  #L4ab320.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4ab326.  v4:= temp @kind object;
  #L4ab328.  call temp:= `longValue`(v4) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4ab32e.  v2:= temp @kind wide;
  #L4ab330.  v0:= (`long`) v1 @kind i2l;
  #L4ab332.  v2:= v2 + v0 @kind long;
  #L4ab334.  v0:= -492148L;
  #L4ab33a.  v2:= v2 + v0 @kind long;
  #L4ab33c.  v0:= 1L;
  #L4ab340.  v2:= v2 - v0 @kind long;
  #L4ab342.  return v2 @kind wide;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L4ab30a..L4ab312] goto L4ab314;
}
procedure `void` `n0`(`int` v15 , `int` v16 , `int` v17 , `int` v18 , `int` v19 ) @signature `Lvc/k;.n0:(IIIII)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4abe64.  v0:= v15;
  #L4abe66.  v1:= v16;
  #L4abe6a.  v2:= v17;
  #L4abe6e.  v3:= v18;
  #L4abe72.  v4:= v19;
  #L4abe76.  v5:= 1I;
  #L4abe78.  if v0 < v5 then goto L4ac554;
  #L4abe7c.  if v2 < v5 then goto L4ac544;
  #L4abe80.  if v1 < 0 then goto L4ac534;
  #L4abe84.  v6:= 11I;
  #L4abe88.  if v1 > v6 then goto L4ac534;
  #L4abe8c.  if v3 < 0 then goto L4ac524;
  #L4abe90.  if v3 > v6 then goto L4ac524;
  #L4abe94.  v7:= 9999I;
  #L4abe98.  if v2 > v7 then goto L4ac514;
  #L4abe9c.  if v2 < v0 then goto L4ac504;
  #L4abea0.  if v2 != v0 then goto L4abeba;
  #L4abea4.  if v3 < v1 then goto L4abeaa;
  #L4abea8.  goto L4abeba;
  #L4abeaa.  v0:= new `java.lang.IllegalArgumentException`;
  #L4abeae.  v1:= "startYear == endYear && endMonth < startMonth" @kind object;
  #L4abeb2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4abeb8.  throw v0;
  #L4abeba.  v7:= (`long`) v0 @kind i2l;
  #L4abebc.  call temp:= `L0`(v7) @signature `Lvc/k;.L0:(J)Z` @kind static;
  #L4abec2.  v7:= temp;
  #L4abec4.  v8:= `@@vc.k.G` @type ^`java.util.HashMap` @kind object;
  #L4abec8.  call temp:= `valueOf`(v15) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abece.  v9:= temp @kind object;
  #L4abed0.  call temp:= `get`(v8, v9) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4abed6.  v8:= temp @kind object;
  #L4abed8.  v8:= (`java.lang.Integer`[]) v8 @kind object;
  #L4abedc.  if v8 != 0 then goto L4abf3c;
  #L4abee0.  if v7 == 0 then goto L4abf10;
  #L4abee4.  v8:= `@@vc.k.w` @type ^`int`[] @kind object;
  #L4abee8.  v8:= length @variable v8;
  #L4abeea.  v8:= new `java.lang.Integer`[v8];
  #L4abeee.  v10:= 0I;
  #L4abef0.  v11:= `@@vc.k.w` @type ^`int`[] @kind object;
  #L4abef4.  v12:= length @variable v11;
  #L4abef6.  if v10 >= v12 then goto L4abf3c;
  #L4abefa.  v11:= v11[v10];
  #L4abefe.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abf04.  v11:= temp @kind object;
  #L4abf06.  v8[v10]:= v11 @kind object;
  #L4abf0a.  v10:= v10 + 1;
  #L4abf0e.  goto L4abef0;
  #L4abf10.  v8:= `@@vc.k.v` @type ^`int`[] @kind object;
  #L4abf14.  v8:= length @variable v8;
  #L4abf16.  v8:= new `java.lang.Integer`[v8];
  #L4abf1a.  v10:= 0I;
  #L4abf1c.  v11:= `@@vc.k.v` @type ^`int`[] @kind object;
  #L4abf20.  v12:= length @variable v11;
  #L4abf22.  if v10 >= v12 then goto L4abf3c;
  #L4abf26.  v11:= v11[v10];
  #L4abf2a.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abf30.  v11:= temp @kind object;
  #L4abf32.  v8[v10]:= v11 @kind object;
  #L4abf36.  v10:= v10 + 1;
  #L4abf3a.  goto L4abf1c;
  #L4abf3c.  v10:= length @variable v8;
  #L4abf3e.  v10:= new `java.lang.Integer`[v10];
  #L4abf42.  v11:= 0I;
  #L4abf44.  v12:= 12I;
  #L4abf48.  if v11 >= v12 then goto L4abf8a;
  #L4abf4c.  if v11 <= v1 then goto L4abf6c;
  #L4abf50.  v12:= v8[v11] @kind object;
  #L4abf54.  call temp:= `intValue`(v12) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4abf5a.  v12:= temp;
  #L4abf5c.  v12:= v12 - v4 @kind int;
  #L4abf5e.  call temp:= `valueOf`(v12) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abf64.  v12:= temp @kind object;
  #L4abf66.  v10[v11]:= v12 @kind object;
  #L4abf6a.  goto L4abf84;
  #L4abf6c.  v12:= v8[v11] @kind object;
  #L4abf70.  call temp:= `intValue`(v12) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4abf76.  v12:= temp;
  #L4abf78.  call temp:= `valueOf`(v12) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abf7e.  v12:= temp @kind object;
  #L4abf80.  v10[v11]:= v12 @kind object;
  #L4abf84.  v11:= v11 + 1;
  #L4abf88.  goto L4abf44;
  #L4abf8a.  v8:= `@@vc.k.G` @type ^`java.util.HashMap` @kind object;
  #L4abf8e.  call temp:= `valueOf`(v15) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abf94.  v11:= temp @kind object;
  #L4abf96.  call temp:= `put`(v8, v11, v10) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4abf9c.  v8:= `@@vc.k.H` @type ^`java.util.HashMap` @kind object;
  #L4abfa0.  call temp:= `valueOf`(v15) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abfa6.  v10:= temp @kind object;
  #L4abfa8.  call temp:= `get`(v8, v10) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4abfae.  v8:= temp @kind object;
  #L4abfb0.  v8:= (`java.lang.Integer`[]) v8 @kind object;
  #L4abfb4.  if v8 != 0 then goto L4ac014;
  #L4abfb8.  if v7 == 0 then goto L4abfe8;
  #L4abfbc.  v7:= `@@vc.k.y` @type ^`int`[] @kind object;
  #L4abfc0.  v7:= length @variable v7;
  #L4abfc2.  v8:= new `java.lang.Integer`[v7];
  #L4abfc6.  v7:= 0I;
  #L4abfc8.  v10:= `@@vc.k.y` @type ^`int`[] @kind object;
  #L4abfcc.  v11:= length @variable v10;
  #L4abfce.  if v7 >= v11 then goto L4ac014;
  #L4abfd2.  v10:= v10[v7];
  #L4abfd6.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4abfdc.  v10:= temp @kind object;
  #L4abfde.  v8[v7]:= v10 @kind object;
  #L4abfe2.  v7:= v7 + 1;
  #L4abfe6.  goto L4abfc8;
  #L4abfe8.  v7:= `@@vc.k.x` @type ^`int`[] @kind object;
  #L4abfec.  v7:= length @variable v7;
  #L4abfee.  v8:= new `java.lang.Integer`[v7];
  #L4abff2.  v7:= 0I;
  #L4abff4.  v10:= `@@vc.k.x` @type ^`int`[] @kind object;
  #L4abff8.  v11:= length @variable v10;
  #L4abffa.  if v7 >= v11 then goto L4ac014;
  #L4abffe.  v10:= v10[v7];
  #L4ac002.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac008.  v10:= temp @kind object;
  #L4ac00a.  v8[v7]:= v10 @kind object;
  #L4ac00e.  v7:= v7 + 1;
  #L4ac012.  goto L4abff4;
  #L4ac014.  v7:= length @variable v8;
  #L4ac016.  v7:= new `java.lang.Integer`[v7];
  #L4ac01a.  v10:= 0I;
  #L4ac01c.  if v10 >= v12 then goto L4ac05e;
  #L4ac020.  if v10 != v1 then goto L4ac040;
  #L4ac024.  v11:= v8[v10] @kind object;
  #L4ac028.  call temp:= `intValue`(v11) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac02e.  v11:= temp;
  #L4ac030.  v11:= v11 - v4 @kind int;
  #L4ac032.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac038.  v11:= temp @kind object;
  #L4ac03a.  v7[v10]:= v11 @kind object;
  #L4ac03e.  goto L4ac058;
  #L4ac040.  v11:= v8[v10] @kind object;
  #L4ac044.  call temp:= `intValue`(v11) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac04a.  v11:= temp;
  #L4ac04c.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac052.  v11:= temp @kind object;
  #L4ac054.  v7[v10]:= v11 @kind object;
  #L4ac058.  v10:= v10 + 1;
  #L4ac05c.  goto L4ac01c;
  #L4ac05e.  v8:= `@@vc.k.H` @type ^`java.util.HashMap` @kind object;
  #L4ac062.  call temp:= `valueOf`(v15) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac068.  v10:= temp @kind object;
  #L4ac06a.  call temp:= `put`(v8, v10, v7) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac070.  if v0 == v2 then goto L4ac208;
  #L4ac074.  v7:= v0 + -1;
  #L4ac078.  v8:= v7 / 30;
  #L4ac07c.  v7:= v7 %% 30;
  #L4ac080.  v10:= `@@vc.k.I` @type ^`java.util.HashMap` @kind object;
  #L4ac084.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac08a.  v11:= temp @kind object;
  #L4ac08c.  call temp:= `get`(v10, v11) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac092.  v10:= temp @kind object;
  #L4ac094.  v10:= (`java.lang.Integer`[]) v10 @kind object;
  #L4ac098.  if v10 != 0 then goto L4ac0c8;
  #L4ac09c.  v10:= `@@vc.k.C` @type ^`int`[] @kind object;
  #L4ac0a0.  v10:= length @variable v10;
  #L4ac0a2.  v11:= new `java.lang.Integer`[v10];
  #L4ac0a6.  v13:= 0I;
  #L4ac0a8.  if v13 >= v10 then goto L4ac0c6;
  #L4ac0ac.  v14:= `@@vc.k.C` @type ^`int`[] @kind object;
  #L4ac0b0.  v14:= v14[v13];
  #L4ac0b4.  call temp:= `valueOf`(v14) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac0ba.  v14:= temp @kind object;
  #L4ac0bc.  v11[v13]:= v14 @kind object;
  #L4ac0c0.  v13:= v13 + 1;
  #L4ac0c4.  goto L4ac0a8;
  #L4ac0c6.  v10:= v11 @kind object;
  #L4ac0c8.  v7:= v7 + v5 @kind int;
  #L4ac0ca.  v11:= `@@vc.k.C` @type ^`int`[] @kind object;
  #L4ac0ce.  v11:= length @variable v11;
  #L4ac0d0.  if v7 >= v11 then goto L4ac0f4;
  #L4ac0d4.  v11:= v10[v7] @kind object;
  #L4ac0d8.  call temp:= `intValue`(v11) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac0de.  v11:= temp;
  #L4ac0e0.  v11:= v11 - v4 @kind int;
  #L4ac0e2.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac0e8.  v11:= temp @kind object;
  #L4ac0ea.  v10[v7]:= v11 @kind object;
  #L4ac0ee.  v7:= v7 + 1;
  #L4ac0f2.  goto L4ac0ca;
  #L4ac0f4.  v7:= `@@vc.k.I` @type ^`java.util.HashMap` @kind object;
  #L4ac0f8.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac0fe.  v11:= temp @kind object;
  #L4ac100.  call temp:= `put`(v7, v11, v10) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac106.  v7:= v2 + -1;
  #L4ac10a.  v10:= v7 / 30;
  #L4ac10e.  if v8 == v10 then goto L4ac17a;
  #L4ac112.  v8:= v8 + v5 @kind int;
  #L4ac114.  v11:= `@@vc.k.J` @type ^`java.lang.Long`[] @kind object;
  #L4ac118.  v13:= length @variable v11;
  #L4ac11a.  if v8 >= v13 then goto L4ac146;
  #L4ac11e.  v13:= v11[v8] @kind object;
  #L4ac122.  call temp:= `longValue`(v13) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4ac128.  v13:= temp @kind wide;
  #L4ac12a.  v5:= (`long`) v4 @kind i2l;
  #L4ac12c.  v13:= v13 - v5 @kind long;
  #L4ac12e.  call temp:= `valueOf`(v13) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4ac134.  v5:= temp @kind object;
  #L4ac136.  v11[v8]:= v5 @kind object;
  #L4ac13a.  v8:= v8 + 1;
  #L4ac13e.  v5:= 1I;
  #L4ac140.  v6:= 11I;
  #L4ac144.  goto L4ac114;
  #L4ac146.  v5:= v10 + 1;
  #L4ac14a.  v6:= `@@vc.k.J` @type ^`java.lang.Long`[] @kind object;
  #L4ac14e.  v8:= length @variable v6;
  #L4ac150.  if v5 >= v8 then goto L4ac17a;
  #L4ac154.  v8:= v6[v5] @kind object;
  #L4ac158.  call temp:= `longValue`(v8) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4ac15e.  v13:= temp @kind wide;
  #L4ac160.  v11:= v10;
  #L4ac162.  v9:= (`long`) v4 @kind i2l;
  #L4ac164.  v13:= v13 + v9 @kind long;
  #L4ac166.  call temp:= `valueOf`(v13) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4ac16c.  v9:= temp @kind object;
  #L4ac16e.  v6[v5]:= v9 @kind object;
  #L4ac172.  v5:= v5 + 1;
  #L4ac176.  v10:= v11;
  #L4ac178.  goto L4ac14a;
  #L4ac17a.  v11:= v10;
  #L4ac17c.  v7:= v7 %% 30;
  #L4ac180.  v5:= `@@vc.k.I` @type ^`java.util.HashMap` @kind object;
  #L4ac184.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac18a.  v6:= temp @kind object;
  #L4ac18c.  call temp:= `get`(v5, v6) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac192.  v5:= temp @kind object;
  #L4ac194.  v5:= (`java.lang.Integer`[]) v5 @kind object;
  #L4ac198.  if v5 != 0 then goto L4ac1c8;
  #L4ac19c.  v5:= `@@vc.k.C` @type ^`int`[] @kind object;
  #L4ac1a0.  v5:= length @variable v5;
  #L4ac1a2.  v6:= new `java.lang.Integer`[v5];
  #L4ac1a6.  v9:= 0I;
  #L4ac1a8.  if v9 >= v5 then goto L4ac1c6;
  #L4ac1ac.  v10:= `@@vc.k.C` @type ^`int`[] @kind object;
  #L4ac1b0.  v10:= v10[v9];
  #L4ac1b4.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac1ba.  v10:= temp @kind object;
  #L4ac1bc.  v6[v9]:= v10 @kind object;
  #L4ac1c0.  v9:= v9 + 1;
  #L4ac1c4.  goto L4ac1a8;
  #L4ac1c6.  v5:= v6 @kind object;
  #L4ac1c8.  v6:= 1I;
  #L4ac1ca.  v7:= v7 + v6 @kind int;
  #L4ac1cc.  v6:= `@@vc.k.C` @type ^`int`[] @kind object;
  #L4ac1d0.  v6:= length @variable v6;
  #L4ac1d2.  if v7 >= v6 then goto L4ac1f6;
  #L4ac1d6.  v6:= v5[v7] @kind object;
  #L4ac1da.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac1e0.  v6:= temp;
  #L4ac1e2.  v6:= v6 + v4 @kind int;
  #L4ac1e4.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac1ea.  v6:= temp @kind object;
  #L4ac1ec.  v5[v7]:= v6 @kind object;
  #L4ac1f0.  v7:= v7 + 1;
  #L4ac1f4.  goto L4ac1cc;
  #L4ac1f6.  v6:= `@@vc.k.I` @type ^`java.util.HashMap` @kind object;
  #L4ac1fa.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac200.  v7:= temp @kind object;
  #L4ac202.  call temp:= `put`(v6, v7, v5) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac208.  v5:= (`long`) v2 @kind i2l;
  #L4ac20a.  call temp:= `L0`(v5) @signature `Lvc/k;.L0:(J)Z` @kind static;
  #L4ac210.  v5:= temp;
  #L4ac212.  v6:= `@@vc.k.G` @type ^`java.util.HashMap` @kind object;
  #L4ac216.  call temp:= `valueOf`(v17) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac21c.  v7:= temp @kind object;
  #L4ac21e.  call temp:= `get`(v6, v7) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac224.  v6:= temp @kind object;
  #L4ac226.  v6:= (`java.lang.Integer`[]) v6 @kind object;
  #L4ac22a.  if v6 != 0 then goto L4ac28a;
  #L4ac22e.  if v5 == 0 then goto L4ac25e;
  #L4ac232.  v6:= `@@vc.k.w` @type ^`int`[] @kind object;
  #L4ac236.  v6:= length @variable v6;
  #L4ac238.  v6:= new `java.lang.Integer`[v6];
  #L4ac23c.  v7:= 0I;
  #L4ac23e.  v9:= `@@vc.k.w` @type ^`int`[] @kind object;
  #L4ac242.  v10:= length @variable v9;
  #L4ac244.  if v7 >= v10 then goto L4ac28a;
  #L4ac248.  v9:= v9[v7];
  #L4ac24c.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac252.  v9:= temp @kind object;
  #L4ac254.  v6[v7]:= v9 @kind object;
  #L4ac258.  v7:= v7 + 1;
  #L4ac25c.  goto L4ac23e;
  #L4ac25e.  v6:= `@@vc.k.v` @type ^`int`[] @kind object;
  #L4ac262.  v6:= length @variable v6;
  #L4ac264.  v6:= new `java.lang.Integer`[v6];
  #L4ac268.  v7:= 0I;
  #L4ac26a.  v9:= `@@vc.k.v` @type ^`int`[] @kind object;
  #L4ac26e.  v10:= length @variable v9;
  #L4ac270.  if v7 >= v10 then goto L4ac28a;
  #L4ac274.  v9:= v9[v7];
  #L4ac278.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac27e.  v9:= temp @kind object;
  #L4ac280.  v6[v7]:= v9 @kind object;
  #L4ac284.  v7:= v7 + 1;
  #L4ac288.  goto L4ac26a;
  #L4ac28a.  v7:= length @variable v6;
  #L4ac28c.  v7:= new `java.lang.Integer`[v7];
  #L4ac290.  v9:= 0I;
  #L4ac292.  if v9 >= v12 then goto L4ac2d4;
  #L4ac296.  if v9 <= v3 then goto L4ac2b6;
  #L4ac29a.  v10:= v6[v9] @kind object;
  #L4ac29e.  call temp:= `intValue`(v10) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac2a4.  v10:= temp;
  #L4ac2a6.  v10:= v10 + v4 @kind int;
  #L4ac2a8.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac2ae.  v10:= temp @kind object;
  #L4ac2b0.  v7[v9]:= v10 @kind object;
  #L4ac2b4.  goto L4ac2ce;
  #L4ac2b6.  v10:= v6[v9] @kind object;
  #L4ac2ba.  call temp:= `intValue`(v10) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac2c0.  v10:= temp;
  #L4ac2c2.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac2c8.  v10:= temp @kind object;
  #L4ac2ca.  v7[v9]:= v10 @kind object;
  #L4ac2ce.  v9:= v9 + 1;
  #L4ac2d2.  goto L4ac292;
  #L4ac2d4.  v6:= `@@vc.k.G` @type ^`java.util.HashMap` @kind object;
  #L4ac2d8.  call temp:= `valueOf`(v17) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac2de.  v9:= temp @kind object;
  #L4ac2e0.  call temp:= `put`(v6, v9, v7) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac2e6.  v6:= `@@vc.k.H` @type ^`java.util.HashMap` @kind object;
  #L4ac2ea.  call temp:= `valueOf`(v17) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac2f0.  v7:= temp @kind object;
  #L4ac2f2.  call temp:= `get`(v6, v7) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac2f8.  v6:= temp @kind object;
  #L4ac2fa.  v6:= (`java.lang.Integer`[]) v6 @kind object;
  #L4ac2fe.  if v6 != 0 then goto L4ac35e;
  #L4ac302.  if v5 == 0 then goto L4ac332;
  #L4ac306.  v5:= `@@vc.k.y` @type ^`int`[] @kind object;
  #L4ac30a.  v5:= length @variable v5;
  #L4ac30c.  v6:= new `java.lang.Integer`[v5];
  #L4ac310.  v5:= 0I;
  #L4ac312.  v7:= `@@vc.k.y` @type ^`int`[] @kind object;
  #L4ac316.  v9:= length @variable v7;
  #L4ac318.  if v5 >= v9 then goto L4ac35e;
  #L4ac31c.  v7:= v7[v5];
  #L4ac320.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac326.  v7:= temp @kind object;
  #L4ac328.  v6[v5]:= v7 @kind object;
  #L4ac32c.  v5:= v5 + 1;
  #L4ac330.  goto L4ac312;
  #L4ac332.  v5:= `@@vc.k.x` @type ^`int`[] @kind object;
  #L4ac336.  v5:= length @variable v5;
  #L4ac338.  v6:= new `java.lang.Integer`[v5];
  #L4ac33c.  v5:= 0I;
  #L4ac33e.  v7:= `@@vc.k.x` @type ^`int`[] @kind object;
  #L4ac342.  v9:= length @variable v7;
  #L4ac344.  if v5 >= v9 then goto L4ac35e;
  #L4ac348.  v7:= v7[v5];
  #L4ac34c.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac352.  v7:= temp @kind object;
  #L4ac354.  v6[v5]:= v7 @kind object;
  #L4ac358.  v5:= v5 + 1;
  #L4ac35c.  goto L4ac33e;
  #L4ac35e.  v5:= length @variable v6;
  #L4ac360.  v5:= new `java.lang.Integer`[v5];
  #L4ac364.  v9:= 0I;
  #L4ac366.  if v9 >= v12 then goto L4ac3a8;
  #L4ac36a.  if v9 != v3 then goto L4ac38a;
  #L4ac36e.  v7:= v6[v9] @kind object;
  #L4ac372.  call temp:= `intValue`(v7) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac378.  v7:= temp;
  #L4ac37a.  v7:= v7 + v4 @kind int;
  #L4ac37c.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac382.  v7:= temp @kind object;
  #L4ac384.  v5[v9]:= v7 @kind object;
  #L4ac388.  goto L4ac3a2;
  #L4ac38a.  v7:= v6[v9] @kind object;
  #L4ac38e.  call temp:= `intValue`(v7) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac394.  v7:= temp;
  #L4ac396.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac39c.  v7:= temp @kind object;
  #L4ac39e.  v5[v9]:= v7 @kind object;
  #L4ac3a2.  v9:= v9 + 1;
  #L4ac3a6.  goto L4ac366;
  #L4ac3a8.  v4:= `@@vc.k.H` @type ^`java.util.HashMap` @kind object;
  #L4ac3ac.  call temp:= `valueOf`(v17) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac3b2.  v6:= temp @kind object;
  #L4ac3b4.  call temp:= `put`(v4, v6, v5) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac3ba.  call temp:= `valueOf`(v15) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac3c0.  v5:= temp @kind object;
  #L4ac3c2.  call temp:= `get`(v4, v5) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac3c8.  v5:= temp @kind object;
  #L4ac3ca.  v5:= (`java.lang.Integer`[]) v5 @kind object;
  #L4ac3ce.  call temp:= `valueOf`(v17) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac3d4.  v6:= temp @kind object;
  #L4ac3d6.  call temp:= `get`(v4, v6) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac3dc.  v4:= temp @kind object;
  #L4ac3de.  v4:= (`java.lang.Integer`[]) v4 @kind object;
  #L4ac3e2.  v6:= `@@vc.k.G` @type ^`java.util.HashMap` @kind object;
  #L4ac3e6.  call temp:= `valueOf`(v15) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac3ec.  v0:= temp @kind object;
  #L4ac3ee.  call temp:= `get`(v6, v0) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac3f4.  v0:= temp @kind object;
  #L4ac3f6.  v0:= (`java.lang.Integer`[]) v0 @kind object;
  #L4ac3fa.  call temp:= `valueOf`(v17) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac400.  v2:= temp @kind object;
  #L4ac402.  call temp:= `get`(v6, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ac408.  v2:= temp @kind object;
  #L4ac40a.  v2:= (`java.lang.Integer`[]) v2 @kind object;
  #L4ac40e.  v1:= v5[v1] @kind object;
  #L4ac412.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac418.  v1:= temp;
  #L4ac41a.  v3:= v4[v3] @kind object;
  #L4ac41e.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac424.  v3:= temp;
  #L4ac426.  v6:= 11I;
  #L4ac42a.  v0:= v0[v6] @kind object;
  #L4ac42e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac434.  v0:= temp;
  #L4ac436.  v5:= v5[v6] @kind object;
  #L4ac43a.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac440.  v5:= temp;
  #L4ac442.  v0:= v0 + v5 @kind int;
  #L4ac444.  v2:= v2[v6] @kind object;
  #L4ac448.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac44e.  v2:= temp;
  #L4ac450.  v4:= v4[v6] @kind object;
  #L4ac454.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac45a.  v4:= temp;
  #L4ac45c.  v2:= v2 + v4 @kind int;
  #L4ac45e.  v4:= `@@vc.k.M` @type ^`java.lang.Integer`[] @kind object;
  #L4ac462.  v5:= 5I;
  #L4ac464.  v6:= v4[v5] @kind object;
  #L4ac468.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac46e.  v6:= temp;
  #L4ac470.  v7:= `@@vc.k.L` @type ^`java.lang.Integer`[] @kind object;
  #L4ac474.  v8:= v7[v5] @kind object;
  #L4ac478.  call temp:= `intValue`(v8) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac47e.  v8:= temp;
  #L4ac480.  if v6 >= v1 then goto L4ac486;
  #L4ac484.  v6:= v1;
  #L4ac486.  if v6 >= v3 then goto L4ac48c;
  #L4ac48a.  v6:= v3;
  #L4ac48c.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac492.  v6:= temp @kind object;
  #L4ac494.  v4[v5]:= v6 @kind object;
  #L4ac498.  if v8 <= v1 then goto L4ac49e;
  #L4ac49c.  goto L4ac4a0;
  #L4ac49e.  v1:= v8;
  #L4ac4a0.  if v1 <= v3 then goto L4ac4a6;
  #L4ac4a4.  goto L4ac4a8;
  #L4ac4a6.  v3:= v1;
  #L4ac4a8.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac4ae.  v1:= temp @kind object;
  #L4ac4b0.  v7[v5]:= v1 @kind object;
  #L4ac4b4.  v1:= 6I;
  #L4ac4b6.  v3:= v4[v1] @kind object;
  #L4ac4ba.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac4c0.  v3:= temp;
  #L4ac4c2.  v5:= v7[v1] @kind object;
  #L4ac4c6.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4ac4cc.  v5:= temp;
  #L4ac4ce.  if v3 >= v0 then goto L4ac4d4;
  #L4ac4d2.  v3:= v0;
  #L4ac4d4.  if v3 >= v2 then goto L4ac4da;
  #L4ac4d8.  v3:= v2;
  #L4ac4da.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac4e0.  v3:= temp @kind object;
  #L4ac4e2.  v4[v1]:= v3 @kind object;
  #L4ac4e6.  if v5 <= v0 then goto L4ac4ec;
  #L4ac4ea.  goto L4ac4ee;
  #L4ac4ec.  v0:= v5;
  #L4ac4ee.  if v0 <= v2 then goto L4ac4f4;
  #L4ac4f2.  goto L4ac4f6;
  #L4ac4f4.  v2:= v0;
  #L4ac4f6.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ac4fc.  v0:= temp @kind object;
  #L4ac4fe.  v7[v1]:= v0 @kind object;
  #L4ac502.  return @kind void;
  #L4ac504.  v0:= new `java.lang.IllegalArgumentException`;
  #L4ac508.  v1:= "startYear > endYear" @kind object;
  #L4ac50c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ac512.  throw v0;
  #L4ac514.  v0:= new `java.lang.IllegalArgumentException`;
  #L4ac518.  v1:= "endYear > 9999" @kind object;
  #L4ac51c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ac522.  throw v0;
  #L4ac524.  v0:= new `java.lang.IllegalArgumentException`;
  #L4ac528.  v1:= "endMonth < 0 || endMonth > 11" @kind object;
  #L4ac52c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ac532.  throw v0;
  #L4ac534.  v0:= new `java.lang.IllegalArgumentException`;
  #L4ac538.  v1:= "startMonth < 0 || startMonth > 11" @kind object;
  #L4ac53c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ac542.  throw v0;
  #L4ac544.  v0:= new `java.lang.IllegalArgumentException`;
  #L4ac548.  v1:= "endYear < 1" @kind object;
  #L4ac54c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ac552.  throw v0;
  #L4ac554.  v0:= new `java.lang.IllegalArgumentException`;
  #L4ac558.  v1:= "startYear < 1" @kind object;
  #L4ac55c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ac562.  throw v0;
}
procedure `void` `o0`(`int` v3 ) @signature `Lvc/k;.o0:(I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4ac574.  v0:= 1I;
  #L4ac576.  if v3 < v0 then goto L4ac588;
  #L4ac57a.  call temp:= `E0`() @signature `Lvc/k;.E0:()I` @kind static;
  #L4ac580.  v0:= temp;
  #L4ac582.  if v3 > v0 then goto L4ac588;
  #L4ac586.  return @kind void;
  #L4ac588.  v0:= new `uc.b`;
  #L4ac58c.  v1:= new `java.lang.StringBuilder`;
  #L4ac590.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ac596.  v2:= "Invalid day of month of Hijrah date, day " @kind object;
  #L4ac59a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac5a0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac5a6.  v3:= " greater than " @kind object;
  #L4ac5aa.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac5b0.  call temp:= `E0`() @signature `Lvc/k;.E0:()I` @kind static;
  #L4ac5b6.  v3:= temp;
  #L4ac5b8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac5be.  v3:= " or less than 1" @kind object;
  #L4ac5c2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ac5c8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ac5ce.  v3:= temp @kind object;
  #L4ac5d0.  call `<init>`(v0, v3) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ac5d6.  throw v0;
}
procedure `void` `p0`(`int` v1 ) @signature `Lvc/k;.p0:(I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4ac5e8.  v0:= 1I;
  #L4ac5ea.  if v1 < v0 then goto L4ac5fc;
  #L4ac5ee.  call temp:= `F0`() @signature `Lvc/k;.F0:()I` @kind static;
  #L4ac5f4.  v0:= temp;
  #L4ac5f6.  if v1 > v0 then goto L4ac5fc;
  #L4ac5fa.  return @kind void;
  #L4ac5fc.  v1:= new `uc.b`;
  #L4ac600.  v0:= "Invalid day of year of Hijrah date" @kind object;
  #L4ac604.  call `<init>`(v1, v0) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ac60a.  throw v1;
}
procedure `void` `q0`(`int` v1 ) @signature `Lvc/k;.q0:(I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4ac61c.  v0:= 1I;
  #L4ac61e.  if v1 < v0 then goto L4ac62c;
  #L4ac622.  v0:= 12I;
  #L4ac626.  if v1 > v0 then goto L4ac62c;
  #L4ac62a.  return @kind void;
  #L4ac62c.  v1:= new `uc.b`;
  #L4ac630.  v0:= "Invalid month of Hijrah date" @kind object;
  #L4ac634.  call `<init>`(v1, v0) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ac63a.  throw v1;
}
procedure `void` `r0`(`int` v1 ) @signature `Lvc/k;.r0:(I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4ac64c.  v0:= 1I;
  #L4ac64e.  if v1 < v0 then goto L4ac65c;
  #L4ac652.  v0:= 9999I;
  #L4ac656.  if v1 > v0 then goto L4ac65c;
  #L4ac65a.  return @kind void;
  #L4ac65c.  v1:= new `uc.b`;
  #L4ac660.  v0:= "Invalid year of Hijrah Era" @kind object;
  #L4ac664.  call `<init>`(v1, v0) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ac66a.  throw v1;
}
procedure `java.lang.Object` `readResolve`(`vc.k` v3 @kind this) @signature `Lvc/k;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4ab134.  v0:= new `vc.k`;
  #L4ab138.  v1:= v3.`vc.k.u` @type ^`long` @kind wide;
  #L4ab13c.  call `<init>`(v0, v1) @signature `Lvc/k;.<init>:(J)V` @kind direct;
  #L4ab142.  return v0 @kind object;
}
procedure `java.lang.Integer`[] `s0`(`int` v1 ) @signature `Lvc/k;.s0:(I)[Ljava/lang/Integer;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4ab034.  v0:= `@@vc.k.I` @type ^`java.util.HashMap` @kind object;
  #L4ab038.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ab03e.  v1:= temp @kind object;
  #L4ab040.  call temp:= `get`(v0, v1) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ab046.  v1:= temp @kind object;
  #L4ab048.  v1:= (`java.lang.Integer`[]) v1 @kind object;
  #L4ab04c.  goto L4ab050;
  #L4ab04e.  v1:= 0I;
  #L4ab050.  if v1 != 0 then goto L4ab058;
  #L4ab054.  v1:= `@@vc.k.R` @type ^`java.lang.Integer`[] @kind object;
  #L4ab058.  return v1 @kind object;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L4ab034..L4ab04c] goto L4ab04e;
}
procedure `java.lang.Integer`[] `t0`(`int` v2 ) @signature `Lvc/k;.t0:(I)[Ljava/lang/Integer;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4ab07c.  v0:= `@@vc.k.G` @type ^`java.util.HashMap` @kind object;
  #L4ab080.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ab086.  v1:= temp @kind object;
  #L4ab088.  call temp:= `get`(v0, v1) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ab08e.  v0:= temp @kind object;
  #L4ab090.  v0:= (`java.lang.Integer`[]) v0 @kind object;
  #L4ab094.  goto L4ab098;
  #L4ab096.  v0:= 0I;
  #L4ab098.  if v0 != 0 then goto L4ab0b4;
  #L4ab09c.  v0:= (`long`) v2 @kind i2l;
  #L4ab09e.  call temp:= `L0`(v0) @signature `Lvc/k;.L0:(J)Z` @kind static;
  #L4ab0a4.  v2:= temp;
  #L4ab0a6.  if v2 == 0 then goto L4ab0b0;
  #L4ab0aa.  v0:= `@@vc.k.O` @type ^`java.lang.Integer`[] @kind object;
  #L4ab0ae.  goto L4ab0b4;
  #L4ab0b0.  v0:= `@@vc.k.N` @type ^`java.lang.Integer`[] @kind object;
  #L4ab0b4.  return v0 @kind object;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L4ab07c..L4ab094] goto L4ab096;
}
procedure `java.lang.Integer`[] `u0`(`int` v2 ) @signature `Lvc/k;.u0:(I)[Ljava/lang/Integer;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4ab0d8.  v0:= `@@vc.k.H` @type ^`java.util.HashMap` @kind object;
  #L4ab0dc.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ab0e2.  v1:= temp @kind object;
  #L4ab0e4.  call temp:= `get`(v0, v1) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ab0ea.  v0:= temp @kind object;
  #L4ab0ec.  v0:= (`java.lang.Integer`[]) v0 @kind object;
  #L4ab0f0.  goto L4ab0f4;
  #L4ab0f2.  v0:= 0I;
  #L4ab0f4.  if v0 != 0 then goto L4ab110;
  #L4ab0f8.  v0:= (`long`) v2 @kind i2l;
  #L4ab0fa.  call temp:= `L0`(v0) @signature `Lvc/k;.L0:(J)Z` @kind static;
  #L4ab100.  v2:= temp;
  #L4ab102.  if v2 == 0 then goto L4ab10c;
  #L4ab106.  v0:= `@@vc.k.Q` @type ^`java.lang.Integer`[] @kind object;
  #L4ab10a.  goto L4ab110;
  #L4ab10c.  v0:= `@@vc.k.P` @type ^`java.lang.Integer`[] @kind object;
  #L4ab110.  return v0 @kind object;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L4ab0d8..L4ab0f0] goto L4ab0f2;
}
procedure `java.io.InputStream` `w0`() @signature `Lvc/k;.w0:()Ljava/io/InputStream;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4aadd4.  v0:= "org.threeten.bp.i18n.HijrahDate.deviationConfigFile" @kind object;
  #L4aadd8.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4aadde.  v0:= temp @kind object;
  #L4aade0.  if v0 != 0 then goto L4aade8;
  #L4aade4.  v0:= "hijrah_deviation.cfg" @kind object;
  #L4aade8.  v1:= "org.threeten.bp.i18n.HijrahDate.deviationConfigDir" @kind object;
  #L4aadec.  call temp:= `getProperty`(v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4aadf2.  v1:= temp @kind object;
  #L4aadf4.  v2:= 0I;
  #L4aadf6.  if v1 == 0 then goto L4aae94;
  #L4aadfa.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4aae00.  v3:= temp;
  #L4aae02.  v4:= "file.separator" @kind object;
  #L4aae06.  if v3 != 0 then goto L4aae1e;
  #L4aae0a.  call temp:= `getProperty`(v4) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4aae10.  v3:= temp @kind object;
  #L4aae12.  call temp:= `endsWith`(v1, v3) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4aae18.  v3:= temp;
  #L4aae1a.  if v3 != 0 then goto L4aae44;
  #L4aae1e.  v3:= new `java.lang.StringBuilder`;
  #L4aae22.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aae28.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aae2e.  call temp:= `getProperty`(v4) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4aae34.  v1:= temp @kind object;
  #L4aae36.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aae3c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aae42.  v1:= temp @kind object;
  #L4aae44.  v3:= new `java.io.File`;
  #L4aae48.  v4:= new `java.lang.StringBuilder`;
  #L4aae4c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aae52.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aae58.  v1:= `@@vc.k.D` @type ^`char` @kind char;
  #L4aae5c.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aae62.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aae68.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aae6e.  v0:= temp @kind object;
  #L4aae70.  call `<init>`(v3, v0) @signature `Ljava/io/File;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aae76.  call temp:= `exists`(v3) @signature `Ljava/io/File;.exists:()Z` @kind virtual;
  #L4aae7c.  v0:= temp;
  #L4aae7e.  if v0 == 0 then goto L4aae92;
  #L4aae82.  v0:= new `java.io.FileInputStream`;
  #L4aae86.  call `<init>`(v0, v3) @signature `Ljava/io/FileInputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L4aae8c.  return v0 @kind object;
  #L4aae8e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L4aae90.  throw v0;
  #L4aae92.  return v2 @kind object;
  #L4aae94.  v1:= "java.class.path" @kind object;
  #L4aae98.  call temp:= `getProperty`(v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4aae9e.  v1:= temp @kind object;
  #L4aaea0.  v3:= new `java.util.StringTokenizer`;
  #L4aaea4.  v4:= `@@vc.k.E` @type ^`java.lang.String` @kind object;
  #L4aaea8.  call `<init>`(v3, v1, v4) @signature `Ljava/util/StringTokenizer;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4aaeae.  call temp:= `hasMoreTokens`(v3) @signature `Ljava/util/StringTokenizer;.hasMoreTokens:()Z` @kind virtual;
  #L4aaeb4.  v1:= temp;
  #L4aaeb6.  if v1 == 0 then goto L4aafec;
  #L4aaeba.  call temp:= `nextToken`(v3) @signature `Ljava/util/StringTokenizer;.nextToken:()Ljava/lang/String;` @kind virtual;
  #L4aaec0.  v1:= temp @kind object;
  #L4aaec2.  v4:= new `java.io.File`;
  #L4aaec6.  call `<init>`(v4, v1) @signature `Ljava/io/File;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aaecc.  call temp:= `exists`(v4) @signature `Ljava/io/File;.exists:()Z` @kind virtual;
  #L4aaed2.  v5:= temp;
  #L4aaed4.  if v5 == 0 then goto L4aaeae;
  #L4aaed8.  call temp:= `isDirectory`(v4) @signature `Ljava/io/File;.isDirectory:()Z` @kind virtual;
  #L4aaede.  v5:= temp;
  #L4aaee0.  if v5 == 0 then goto L4aaf66;
  #L4aaee4.  v4:= new `java.io.File`;
  #L4aaee8.  v5:= new `java.lang.StringBuilder`;
  #L4aaeec.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aaef2.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaef8.  v6:= `@@vc.k.D` @type ^`char` @kind char;
  #L4aaefc.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaf02.  v7:= `@@vc.k.F` @type ^`java.lang.String` @kind object;
  #L4aaf06.  call temp:= `append`(v5, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaf0c.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aaf12.  v5:= temp @kind object;
  #L4aaf14.  call `<init>`(v4, v5, v0) @signature `Ljava/io/File;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4aaf1a.  call temp:= `exists`(v4) @signature `Ljava/io/File;.exists:()Z` @kind virtual;
  #L4aaf20.  v4:= temp;
  #L4aaf22.  if v4 == 0 then goto L4aaeae;
  #L4aaf26.  v2:= new `java.io.FileInputStream`;
  #L4aaf2a.  v3:= new `java.lang.StringBuilder`;
  #L4aaf2e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aaf34.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaf3a.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaf40.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaf46.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaf4c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaf52.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aaf58.  v0:= temp @kind object;
  #L4aaf5a.  call `<init>`(v2, v0) @signature `Ljava/io/FileInputStream;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aaf60.  return v2 @kind object;
  #L4aaf62.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L4aaf64.  throw v0;
  #L4aaf66.  v1:= new `java.util.zip.ZipFile`;
  #L4aaf6a.  call `<init>`(v1, v4) @signature `Ljava/util/zip/ZipFile;.<init>:(Ljava/io/File;)V` @kind direct;
  #L4aaf70.  goto L4aaf74;
  #L4aaf72.  v1:= v2 @kind object;
  #L4aaf74.  if v1 == 0 then goto L4aaeae;
  #L4aaf78.  v4:= new `java.lang.StringBuilder`;
  #L4aaf7c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aaf82.  v5:= `@@vc.k.F` @type ^`java.lang.String` @kind object;
  #L4aaf86.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaf8c.  v5:= `@@vc.k.D` @type ^`char` @kind char;
  #L4aaf90.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaf96.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaf9c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aafa2.  v4:= temp @kind object;
  #L4aafa4.  call temp:= `getEntry`(v1, v4) @signature `Ljava/util/zip/ZipFile;.getEntry:(Ljava/lang/String;)Ljava/util/zip/ZipEntry;` @kind virtual;
  #L4aafaa.  v6:= temp @kind object;
  #L4aafac.  if v6 != 0 then goto L4aafda;
  #L4aafb0.  v6:= 92I;
  #L4aafb4.  v7:= 47I;
  #L4aafb8.  if v5 != v7 then goto L4aafc6;
  #L4aafbc.  call temp:= `replace`(v4, v7, v6) @signature `Ljava/lang/String;.replace:(CC)Ljava/lang/String;` @kind virtual;
  #L4aafc2.  v4:= temp @kind object;
  #L4aafc4.  goto L4aafd2;
  #L4aafc6.  if v5 != v6 then goto L4aafd2;
  #L4aafca.  call temp:= `replace`(v4, v6, v7) @signature `Ljava/lang/String;.replace:(CC)Ljava/lang/String;` @kind virtual;
  #L4aafd0.  v4:= temp @kind object;
  #L4aafd2.  call temp:= `getEntry`(v1, v4) @signature `Ljava/util/zip/ZipFile;.getEntry:(Ljava/lang/String;)Ljava/util/zip/ZipEntry;` @kind virtual;
  #L4aafd8.  v6:= temp @kind object;
  #L4aafda.  if v6 == 0 then goto L4aaeae;
  #L4aafde.  call temp:= `getInputStream`(v1, v6) @signature `Ljava/util/zip/ZipFile;.getInputStream:(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;` @kind virtual;
  #L4aafe4.  v0:= temp @kind object;
  #L4aafe6.  return v0 @kind object;
  #L4aafe8.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L4aafea.  throw v0;
  #L4aafec.  return v2 @kind object;
  catch `java.io.IOException` @[L4aae82..L4aae8c] goto L4aae8e;
  catch `java.io.IOException` @[L4aaf26..L4aaf60] goto L4aaf62;
  catch `java.io.IOException` @[L4aaf66..L4aaf70] goto L4aaf72;
  catch `java.io.IOException` @[L4aafde..L4aafe6] goto L4aafe8;
}
procedure `java.lang.Object` `writeReplace`(`vc.k` v2 @kind this) @signature `Lvc/k;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4ab154.  v0:= new `vc.u`;
  #L4ab158.  v1:= 3I;
  #L4ab15a.  call `<init>`(v0, v1, v2) @signature `Lvc/u;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L4ab160.  return v0 @kind object;
}
procedure `int` `x0`(`long` v5 ) @signature `Lvc/k;.x0:(J)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4aa8c8.  v0:= `@@vc.k.J` @type ^`java.lang.Long`[] @kind object;
  #L4aa8cc.  v1:= 0I;
  #L4aa8ce.  v2:= length @variable v0;
  #L4aa8d0.  if v1 >= v2 then goto L4aa8f4;
  #L4aa8d4.  v2:= v0[v1] @kind object;
  #L4aa8d8.  call temp:= `longValue`(v2) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4aa8de.  v2:= temp @kind wide;
  #L4aa8e0.  v4:= lcmp(v5, v2);
  #L4aa8e4.  if v4 >= 0 then goto L4aa8ee;
  #L4aa8e8.  v1:= v1 + -1;
  #L4aa8ec.  return v1;
  #L4aa8ee.  v1:= v1 + 1;
  #L4aa8f2.  goto L4aa8ce;
  #L4aa8f4.  v0:= (`int`) v5 @kind l2i;
  #L4aa8f6.  v0:= v0 / 10631;
  #L4aa8fa.  goto L4aa902;
  #L4aa8fc.  v6:= (`int`) v5 @kind l2i;
  #L4aa8fe.  v0:= v6 / 10631;
  #L4aa902.  return v0;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L4aa8ce..L4aa8fa] goto L4aa8fc;
}
procedure `int` `y0`(`long` v2 , `int` v4 ) @signature `Lvc/k;.y0:(JI)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4aa924.  v0:= `@@vc.k.J` @type ^`java.lang.Long`[] @kind object;
  #L4aa928.  v0:= v0[v4] @kind object;
  #L4aa92c.  goto L4aa930;
  #L4aa92e.  v0:= 0I;
  #L4aa930.  if v0 != 0 then goto L4aa942;
  #L4aa934.  v4:= v4 * 10631;
  #L4aa938.  v0:= (`long`) v4 @kind i2l;
  #L4aa93a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4aa940.  v0:= temp @kind object;
  #L4aa942.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4aa948.  v0:= temp @kind wide;
  #L4aa94a.  v2:= v2 - v0 @kind long;
  #L4aa94c.  v3:= (`int`) v2 @kind l2i;
  #L4aa94e.  return v3;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L4aa924..L4aa92c] goto L4aa92e;
}
procedure `int` `z0`(`int` v3 , `int` v4 , `int` v5 ) @signature `Lvc/k;.z0:(III)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4aa970.  call temp:= `t0`(v5) @signature `Lvc/k;.t0:(I)[Ljava/lang/Integer;` @kind static;
  #L4aa976.  v0:= temp @kind object;
  #L4aa978.  if v3 < 0 then goto L4aa990;
  #L4aa97c.  if v4 <= 0 then goto L4aa98e;
  #L4aa980.  v4:= v0[v4] @kind object;
  #L4aa984.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4aa98a.  v4:= temp;
  #L4aa98c.  v3:= v3 - v4 @kind int;
  #L4aa98e.  return v3;
  #L4aa990.  v1:= (`long`) v5 @kind i2l;
  #L4aa992.  call temp:= `L0`(v1) @signature `Lvc/k;.L0:(J)Z` @kind static;
  #L4aa998.  v5:= temp;
  #L4aa99a.  if v5 == 0 then goto L4aa9a4;
  #L4aa99e.  v3:= v3 + 355;
  #L4aa9a2.  goto L4aa9a8;
  #L4aa9a4.  v3:= v3 + 354;
  #L4aa9a8.  if v4 <= 0 then goto L4aa9b2;
  #L4aa9ac.  v4:= v0[v4] @kind object;
  #L4aa9b0.  goto L4aa984;
  #L4aa9b2.  return v3;
}
procedure `long` `B`(`vc.k` v3 @kind this, `yc.i` v4 @kind object) @signature `Lvc/k;.B:(Lyc/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ab1a4.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4ab1a8.  if v0 == 0 then goto L4ab262;
  #L4ab1ac.  v0:= `@@vc.k$a.a` @type ^`int`[] @kind object;
  #L4ab1b0.  v1:= v4 @kind object;
  #L4ab1b2.  v1:= (`yc.a`) v1 @kind object;
  #L4ab1b6.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4ab1bc.  v1:= temp;
  #L4ab1be.  v0:= v0[v1];
  #L4ab1c2.  goto L4ab26c;
  #L4ab1c8.  v0:= new `yc.m`;
  #L4ab1cc.  v1:= new `java.lang.StringBuilder`;
  #L4ab1d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ab1d6.  v2:= "Unsupported field: " @kind object;
  #L4ab1da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ab1e0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ab1e6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ab1ec.  v4:= temp @kind object;
  #L4ab1ee.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ab1f4.  throw v0;
  #L4ab1f6.  v4:= v3.`vc.k.o` @type ^`vc.l` @kind object;
  #L4ab1fa.  call temp:= `getValue`(v4) @signature `Lvc/l;.getValue:()I` @kind virtual;
  #L4ab200.  v4:= temp;
  #L4ab202.  v0:= (`long`) v4 @kind i2l;
  #L4ab204.  return v0 @kind wide;
  #L4ab206.  v4:= v3.`vc.k.p` @type ^`int`;
  #L4ab20a.  goto L4ab202;
  #L4ab20c.  v4:= v3.`vc.k.q` @type ^`int`;
  #L4ab210.  goto L4ab202;
  #L4ab212.  v4:= v3.`vc.k.s` @type ^`int`;
  #L4ab216.  v4:= v4 + -1;
  #L4ab21a.  v4:= v4 / 7;
  #L4ab21e.  v4:= v4 + 1;
  #L4ab222.  goto L4ab202;
  #L4ab224.  call temp:= `g0`(v3) @signature `Lvc/k;.g0:()J` @kind virtual;
  #L4ab22a.  v0:= temp @kind wide;
  #L4ab22c.  return v0 @kind wide;
  #L4ab22e.  v4:= v3.`vc.k.s` @type ^`int`;
  #L4ab232.  v4:= v4 + -1;
  #L4ab236.  v4:= v4 %% 7;
  #L4ab23a.  goto L4ab21e;
  #L4ab23c.  v4:= v3.`vc.k.r` @type ^`int`;
  #L4ab240.  goto L4ab232;
  #L4ab242.  v4:= v3.`vc.k.t` @type ^`uc.c` @kind object;
  #L4ab246.  call temp:= `getValue`(v4) @signature `Luc/c;.getValue:()I` @kind virtual;
  #L4ab24c.  v4:= temp;
  #L4ab24e.  goto L4ab202;
  #L4ab250.  v4:= v3.`vc.k.r` @type ^`int`;
  #L4ab254.  goto L4ab216;
  #L4ab256.  v4:= v3.`vc.k.s` @type ^`int`;
  #L4ab25a.  goto L4ab202;
  #L4ab25c.  v4:= v3.`vc.k.r` @type ^`int`;
  #L4ab260.  goto L4ab202;
  #L4ab262.  call temp:= `o`(v4, v3) @signature `Lyc/i;.o:(Lyc/e;)J` @kind interface;
  #L4ab268.  v0:= temp @kind wide;
  #L4ab26a.  return v0 @kind wide;
  #L4ab26c.  switch v0
                  | 1 => goto L4ab25c
                  | 2 => goto L4ab256
                  | 3 => goto L4ab250
                  | 4 => goto L4ab206
                  | 5 => goto L4ab242
                  | 6 => goto L4ab23c
                  | 7 => goto L4ab22e
                  | 8 => goto L4ab224
                  | 9 => goto L4ab212
                  | 10 => goto L4ab20c
                  | 11 => goto L4ab206
                  | 12 => goto L4ab1f6
                  | else => goto L4ab1c8;
}
procedure `vc.l` `B0`(`vc.k` v1 @kind this) @signature `Lvc/k;.B0:()Lvc/l;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ab8e4.  v0:= v1.`vc.k.o` @type ^`vc.l` @kind object;
  #L4ab8e8.  return v0 @kind object;
}
procedure `yc.d` `D`(`vc.k` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/k;.D:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4acad0.  call temp:= `T0`(v0, v1, v3) @signature `Lvc/k;.T0:(JLyc/l;)Lvc/k;` @kind virtual;
  #L4acad6.  v1:= temp @kind object;
  #L4acad8.  return v1 @kind object;
}
procedure `yc.d` `L`(`vc.k` v0 @kind this, `yc.f` v1 @kind object) @signature `Lvc/k;.L:(Lyc/f;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4acaec.  call temp:= `b1`(v0, v1) @signature `Lvc/k;.b1:(Lyc/f;)Lvc/k;` @kind virtual;
  #L4acaf2.  v1:= temp @kind object;
  #L4acaf4.  return v1 @kind object;
}
procedure `int` `M0`(`vc.k` v2 @kind this) @signature `Lvc/k;.M0:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aac64.  v0:= v2.`vc.k.q` @type ^`int`;
  #L4aac68.  v0:= v0 + -1;
  #L4aac6c.  v1:= v2.`vc.k.p` @type ^`int`;
  #L4aac70.  call temp:= `H0`(v0, v1) @signature `Lvc/k;.H0:(II)I` @kind static;
  #L4aac76.  v0:= temp;
  #L4aac78.  return v0;
}
procedure `int` `N0`(`vc.k` v1 @kind this) @signature `Lvc/k;.N0:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aac8c.  v0:= v1.`vc.k.p` @type ^`int`;
  #L4aac90.  call temp:= `K0`(v0) @signature `Lvc/k;.K0:(I)I` @kind static;
  #L4aac96.  v0:= temp;
  #L4aac98.  return v0;
}
procedure `vc.k` `O0`(`vc.k` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/k;.O0:(JLyc/l;)Lvc/k;` @AccessFlag PUBLIC {
    temp;

  #L4ab504.  call temp:= `d0`(v0, v1, v3) @signature `Lvc/b;.d0:(JLyc/l;)Lvc/b;` @kind super;
  #L4ab50a.  v1:= temp @kind object;
  #L4ab50c.  v1:= (`vc.k`) v1 @kind object;
  #L4ab510.  return v1 @kind object;
}
procedure `yc.d` `P`(`vc.k` v0 @kind this, `yc.i` v1 @kind object, `long` v2 ) @signature `Lvc/k;.P:(Lyc/i;J)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4acb08.  call temp:= `c1`(v0, v1, v2) @signature `Lvc/k;.c1:(Lyc/i;J)Lvc/k;` @kind virtual;
  #L4acb0e.  v1:= temp @kind object;
  #L4acb10.  return v1 @kind object;
}
procedure `vc.k` `T0`(`vc.k` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/k;.T0:(JLyc/l;)Lvc/k;` @AccessFlag PUBLIC {
    temp;

  #L4ab5bc.  call temp:= `j0`(v0, v1, v3) @signature `Lvc/a;.j0:(JLyc/l;)Lvc/a;` @kind super;
  #L4ab5c2.  v1:= temp @kind object;
  #L4ab5c4.  v1:= (`vc.k`) v1 @kind object;
  #L4ab5c8.  return v1 @kind object;
}
procedure `vc.k` `U0`(`vc.k` v0 @kind this, `yc.h` v1 @kind object) @signature `Lvc/k;.U0:(Lyc/h;)Lvc/k;` @AccessFlag PUBLIC {
    temp;

  #L4ab5dc.  call temp:= `f0`(v0, v1) @signature `Lvc/b;.f0:(Lyc/h;)Lvc/b;` @kind super;
  #L4ab5e2.  v1:= temp @kind object;
  #L4ab5e4.  v1:= (`vc.k`) v1 @kind object;
  #L4ab5e8.  return v1 @kind object;
}
procedure `vc.c` `V`(`vc.k` v0 @kind this, `uc.h` v1 @kind object) @signature `Lvc/k;.V:(Luc/h;)Lvc/c;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4ab498.  call temp:= `V`(v0, v1) @signature `Lvc/a;.V:(Luc/h;)Lvc/c;` @kind super;
  #L4ab49e.  v1:= temp @kind object;
  #L4ab4a0.  return v1 @kind object;
}
procedure `vc.k` `V0`(`vc.k` v3 @kind this, `long` v4 ) @signature `Lvc/k;.V0:(J)Lvc/k;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4ab5fc.  v0:= new `vc.k`;
  #L4ab600.  v1:= v3.`vc.k.u` @type ^`long` @kind wide;
  #L4ab604.  v1:= v1 + v4 @kind long;
  #L4ab606.  call `<init>`(v0, v1) @signature `Lvc/k;.<init>:(J)V` @kind direct;
  #L4ab60c.  return v0 @kind object;
}
procedure `vc.k` `W0`(`vc.k` v3 @kind this, `long` v4 ) @signature `Lvc/k;.W0:(J)Lvc/k;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4ab620.  v0:= 0L;
  #L4ab624.  v2:= lcmp(v4, v0);
  #L4ab628.  if v2 != 0 then goto L4ab62e;
  #L4ab62c.  return v3 @kind object;
  #L4ab62e.  v0:= v3.`vc.k.q` @type ^`int`;
  #L4ab632.  v1:= 1I;
  #L4ab634.  v0:= v0 - v1 @kind int;
  #L4ab636.  v5:= (`int`) v4 @kind l2i;
  #L4ab638.  v0:= v0 + v5 @kind int;
  #L4ab63a.  v4:= v0 / 12;
  #L4ab63e.  v0:= v0 %% 12;
  #L4ab642.  if v0 >= 0 then goto L4ab654;
  #L4ab646.  v0:= v0 + 12;
  #L4ab64a.  call temp:= `n`(v4, v1) @signature `Lxc/d;.n:(II)I` @kind static;
  #L4ab650.  v4:= temp;
  #L4ab652.  goto L4ab642;
  #L4ab654.  v5:= v3.`vc.k.p` @type ^`int`;
  #L4ab658.  call temp:= `j`(v5, v4) @signature `Lxc/d;.j:(II)I` @kind static;
  #L4ab65e.  v4:= temp;
  #L4ab660.  v5:= v3.`vc.k.o` @type ^`vc.l` @kind object;
  #L4ab664.  v0:= v0 + v1 @kind int;
  #L4ab666.  v1:= v3.`vc.k.r` @type ^`int`;
  #L4ab66a.  call temp:= `Q0`(v5, v4, v0, v1) @signature `Lvc/k;.Q0:(Lvc/l;III)Lvc/k;` @kind static;
  #L4ab670.  v4:= temp @kind object;
  #L4ab672.  return v4 @kind object;
}
procedure `vc.k` `X0`(`vc.k` v3 @kind this, `long` v4 ) @signature `Lvc/k;.X0:(J)Lvc/k;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4ab684.  v0:= 0L;
  #L4ab688.  v2:= lcmp(v4, v0);
  #L4ab68c.  if v2 != 0 then goto L4ab692;
  #L4ab690.  return v3 @kind object;
  #L4ab692.  v0:= v3.`vc.k.p` @type ^`int`;
  #L4ab696.  v5:= (`int`) v4 @kind l2i;
  #L4ab698.  call temp:= `j`(v0, v5) @signature `Lxc/d;.j:(II)I` @kind static;
  #L4ab69e.  v4:= temp;
  #L4ab6a0.  v5:= v3.`vc.k.o` @type ^`vc.l` @kind object;
  #L4ab6a4.  v0:= v3.`vc.k.q` @type ^`int`;
  #L4ab6a8.  v1:= v3.`vc.k.r` @type ^`int`;
  #L4ab6ac.  call temp:= `Q0`(v5, v4, v0, v1) @signature `Lvc/k;.Q0:(Lvc/l;III)Lvc/k;` @kind static;
  #L4ab6b2.  v4:= temp @kind object;
  #L4ab6b4.  return v4 @kind object;
}
procedure `vc.h` `a0`(`vc.k` v1 @kind this) @signature `Lvc/k;.a0:()Lvc/h;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4ab4b4.  call temp:= `v0`(v1) @signature `Lvc/k;.v0:()Lvc/j;` @kind virtual;
  #L4ab4ba.  v0:= temp @kind object;
  #L4ab4bc.  return v0 @kind object;
}
procedure `vc.i` `b0`(`vc.k` v1 @kind this) @signature `Lvc/k;.b0:()Lvc/i;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4ab4d0.  call temp:= `B0`(v1) @signature `Lvc/k;.B0:()Lvc/l;` @kind virtual;
  #L4ab4d6.  v0:= temp @kind object;
  #L4ab4d8.  return v0 @kind object;
}
procedure `vc.k` `b1`(`vc.k` v0 @kind this, `yc.f` v1 @kind object) @signature `Lvc/k;.b1:(Lyc/f;)Lvc/k;` @AccessFlag PUBLIC {
    temp;

  #L4ab6f4.  call temp:= `h0`(v0, v1) @signature `Lvc/b;.h0:(Lyc/f;)Lvc/b;` @kind super;
  #L4ab6fa.  v1:= temp @kind object;
  #L4ab6fc.  v1:= (`vc.k`) v1 @kind object;
  #L4ab700.  return v1 @kind object;
}
procedure `vc.k` `c1`(`vc.k` v5 @kind this, `yc.i` v6 @kind object, `long` v7 ) @signature `Lvc/k;.c1:(Lyc/i;J)Lvc/k;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ab714.  v0:= instanceof @variable v6 @type ^`yc.a` @kind boolean;
  #L4ab718.  if v0 == 0 then goto L4ab88e;
  #L4ab71c.  v0:= v6 @kind object;
  #L4ab71e.  v0:= (`yc.a`) v0 @kind object;
  #L4ab722.  call temp:= `s`(v0, v7) @signature `Lyc/a;.s:(J)J` @kind virtual;
  #L4ab728.  v1:= (`int`) v7 @kind l2i;
  #L4ab72a.  v2:= `@@vc.k$a.a` @type ^`int`[] @kind object;
  #L4ab72e.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4ab734.  v0:= temp;
  #L4ab736.  v0:= v2[v0];
  #L4ab73a.  v2:= 7L;
  #L4ab73e.  v4:= 1I;
  #L4ab740.  goto L4ab89c;
  #L4ab746.  v7:= new `yc.m`;
  #L4ab74a.  v8:= new `java.lang.StringBuilder`;
  #L4ab74e.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ab754.  v0:= "Unsupported field: " @kind object;
  #L4ab758.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ab75e.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ab764.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ab76a.  v6:= temp @kind object;
  #L4ab76c.  call `<init>`(v7, v6) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ab772.  throw v7;
  #L4ab774.  v6:= v5.`vc.k.p` @type ^`int`;
  #L4ab778.  v4:= v4 - v6 @kind int;
  #L4ab77a.  v6:= v5.`vc.k.q` @type ^`int`;
  #L4ab77e.  v7:= v5.`vc.k.r` @type ^`int`;
  #L4ab782.  call temp:= `a1`(v4, v6, v7) @signature `Lvc/k;.a1:(III)Lvc/k;` @kind static;
  #L4ab788.  v6:= temp @kind object;
  #L4ab78a.  return v6 @kind object;
  #L4ab78c.  v6:= v5.`vc.k.q` @type ^`int`;
  #L4ab790.  v7:= v5.`vc.k.r` @type ^`int`;
  #L4ab794.  call temp:= `a1`(v1, v6, v7) @signature `Lvc/k;.a1:(III)Lvc/k;` @kind static;
  #L4ab79a.  v6:= temp @kind object;
  #L4ab79c.  return v6 @kind object;
  #L4ab79e.  v6:= v5.`vc.k.p` @type ^`int`;
  #L4ab7a2.  v7:= v5.`vc.k.r` @type ^`int`;
  #L4ab7a6.  call temp:= `a1`(v6, v1, v7) @signature `Lvc/k;.a1:(III)Lvc/k;` @kind static;
  #L4ab7ac.  v6:= temp @kind object;
  #L4ab7ae.  return v6 @kind object;
  #L4ab7b0.  v6:= `@@yc.a.O` @type ^`yc.a` @kind object;
  #L4ab7b4.  call temp:= `B`(v5, v6) @signature `Lvc/k;.B:(Lyc/i;)J` @kind virtual;
  #L4ab7ba.  v0:= temp @kind wide;
  #L4ab7bc.  v7:= v7 - v0 @kind long;
  #L4ab7be.  v7:= v7 * v2 @kind long;
  #L4ab7c2.  call temp:= `V0`(v5, v7) @signature `Lvc/k;.V0:(J)Lvc/k;` @kind virtual;
  #L4ab7c8.  v6:= temp @kind object;
  #L4ab7ca.  return v6 @kind object;
  #L4ab7cc.  v6:= new `vc.k`;
  #L4ab7d0.  v7:= (`long`) v1 @kind i2l;
  #L4ab7d2.  call `<init>`(v6, v7) @signature `Lvc/k;.<init>:(J)V` @kind direct;
  #L4ab7d8.  return v6 @kind object;
  #L4ab7da.  v6:= `@@yc.a.J` @type ^`yc.a` @kind object;
  #L4ab7de.  call temp:= `B`(v5, v6) @signature `Lvc/k;.B:(Lyc/i;)J` @kind virtual;
  #L4ab7e4.  v0:= temp @kind wide;
  #L4ab7e6.  v7:= v7 - v0 @kind long;
  #L4ab7e8.  call temp:= `V0`(v5, v7) @signature `Lvc/k;.V0:(J)Lvc/k;` @kind virtual;
  #L4ab7ee.  v6:= temp @kind object;
  #L4ab7f0.  return v6 @kind object;
  #L4ab7f2.  v6:= `@@yc.a.I` @type ^`yc.a` @kind object;
  #L4ab7f6.  call temp:= `B`(v5, v6) @signature `Lvc/k;.B:(Lyc/i;)J` @kind virtual;
  #L4ab7fc.  v0:= temp @kind wide;
  #L4ab7fe.  v7:= v7 - v0 @kind long;
  #L4ab800.  call temp:= `V0`(v5, v7) @signature `Lvc/k;.V0:(J)Lvc/k;` @kind virtual;
  #L4ab806.  v6:= temp @kind object;
  #L4ab808.  return v6 @kind object;
  #L4ab80a.  v6:= v5.`vc.k.t` @type ^`uc.c` @kind object;
  #L4ab80e.  call temp:= `getValue`(v6) @signature `Luc/c;.getValue:()I` @kind virtual;
  #L4ab814.  v6:= temp;
  #L4ab816.  v0:= (`long`) v6 @kind i2l;
  #L4ab818.  v7:= v7 - v0 @kind long;
  #L4ab81a.  call temp:= `V0`(v5, v7) @signature `Lvc/k;.V0:(J)Lvc/k;` @kind virtual;
  #L4ab820.  v6:= temp @kind object;
  #L4ab822.  return v6 @kind object;
  #L4ab824.  v6:= v5.`vc.k.p` @type ^`int`;
  #L4ab828.  if v6 < v4 then goto L4ab82e;
  #L4ab82c.  goto L4ab832;
  #L4ab82e.  v1:= v1 - 1;
  #L4ab832.  v6:= v5.`vc.k.q` @type ^`int`;
  #L4ab836.  v7:= v5.`vc.k.r` @type ^`int`;
  #L4ab83a.  call temp:= `a1`(v1, v6, v7) @signature `Lvc/k;.a1:(III)Lvc/k;` @kind static;
  #L4ab840.  v6:= temp @kind object;
  #L4ab842.  return v6 @kind object;
  #L4ab844.  v6:= `@@yc.a.N` @type ^`yc.a` @kind object;
  #L4ab848.  call temp:= `B`(v5, v6) @signature `Lvc/k;.B:(Lyc/i;)J` @kind virtual;
  #L4ab84e.  v0:= temp @kind wide;
  #L4ab850.  v7:= v7 - v0 @kind long;
  #L4ab852.  v7:= v7 * v2 @kind long;
  #L4ab856.  call temp:= `V0`(v5, v7) @signature `Lvc/k;.V0:(J)Lvc/k;` @kind virtual;
  #L4ab85c.  v6:= temp @kind object;
  #L4ab85e.  return v6 @kind object;
  #L4ab860.  v6:= v5.`vc.k.p` @type ^`int`;
  #L4ab864.  v1:= v1 - v4 @kind int;
  #L4ab866.  v7:= v1 / 30;
  #L4ab86a.  v7:= v7 + v4 @kind int;
  #L4ab86c.  v1:= v1 %% 30;
  #L4ab870.  v1:= v1 + v4 @kind int;
  #L4ab872.  call temp:= `a1`(v6, v7, v1) @signature `Lvc/k;.a1:(III)Lvc/k;` @kind static;
  #L4ab878.  v6:= temp @kind object;
  #L4ab87a.  return v6 @kind object;
  #L4ab87c.  v6:= v5.`vc.k.p` @type ^`int`;
  #L4ab880.  v7:= v5.`vc.k.q` @type ^`int`;
  #L4ab884.  call temp:= `a1`(v6, v7, v1) @signature `Lvc/k;.a1:(III)Lvc/k;` @kind static;
  #L4ab88a.  v6:= temp @kind object;
  #L4ab88c.  return v6 @kind object;
  #L4ab88e.  call temp:= `e`(v6, v5, v7) @signature `Lyc/i;.e:(Lyc/d;J)Lyc/d;` @kind interface;
  #L4ab894.  v6:= temp @kind object;
  #L4ab896.  v6:= (`vc.k`) v6 @kind object;
  #L4ab89a.  return v6 @kind object;
  #L4ab89c.  switch v0
                  | 1 => goto L4ab87c
                  | 2 => goto L4ab860
                  | 3 => goto L4ab844
                  | 4 => goto L4ab824
                  | 5 => goto L4ab80a
                  | 6 => goto L4ab7f2
                  | 7 => goto L4ab7da
                  | 8 => goto L4ab7cc
                  | 9 => goto L4ab7b0
                  | 10 => goto L4ab79e
                  | 11 => goto L4ab78c
                  | 12 => goto L4ab774
                  | else => goto L4ab746;
}
procedure `vc.b` `d0`(`vc.k` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/k;.d0:(JLyc/l;)Lvc/b;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ab3d4.  call temp:= `O0`(v0, v1, v3) @signature `Lvc/k;.O0:(JLyc/l;)Lvc/k;` @kind virtual;
  #L4ab3da.  v1:= temp @kind object;
  #L4ab3dc.  return v1 @kind object;
}
procedure `void` `d1`(`vc.k` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Lvc/k;.d1:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L4aca6c.  v0:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L4aca70.  call temp:= `F`(v1, v0) @signature `Lxc/c;.F:(Lyc/i;)I` @kind virtual;
  #L4aca76.  v0:= temp;
  #L4aca78.  call `writeInt`(v2, v0) @signature `Ljava/io/DataOutput;.writeInt:(I)V` @kind interface;
  #L4aca7e.  v0:= `@@yc.a.P` @type ^`yc.a` @kind object;
  #L4aca82.  call temp:= `F`(v1, v0) @signature `Lxc/c;.F:(Lyc/i;)I` @kind virtual;
  #L4aca88.  v0:= temp;
  #L4aca8a.  call `writeByte`(v2, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L4aca90.  v0:= `@@yc.a.K` @type ^`yc.a` @kind object;
  #L4aca94.  call temp:= `F`(v1, v0) @signature `Lxc/c;.F:(Lyc/i;)I` @kind virtual;
  #L4aca9a.  v0:= temp;
  #L4aca9c.  call `writeByte`(v2, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L4acaa2.  return @kind void;
}
procedure `vc.b` `e0`(`vc.k` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/k;.e0:(JLyc/l;)Lvc/b;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ab3f0.  call temp:= `T0`(v0, v1, v3) @signature `Lvc/k;.T0:(JLyc/l;)Lvc/k;` @kind virtual;
  #L4ab3f6.  v1:= temp @kind object;
  #L4ab3f8.  return v1 @kind object;
}
procedure `vc.b` `f0`(`vc.k` v0 @kind this, `yc.h` v1 @kind object) @signature `Lvc/k;.f0:(Lyc/h;)Lvc/b;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ab40c.  call temp:= `U0`(v0, v1) @signature `Lvc/k;.U0:(Lyc/h;)Lvc/k;` @kind virtual;
  #L4ab412.  v1:= temp @kind object;
  #L4ab414.  return v1 @kind object;
}
procedure `long` `g0`(`vc.k` v3 @kind this) @signature `Lvc/k;.g0:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ab2b4.  v0:= v3.`vc.k.p` @type ^`int`;
  #L4ab2b8.  v1:= v3.`vc.k.q` @type ^`int`;
  #L4ab2bc.  v2:= v3.`vc.k.r` @type ^`int`;
  #L4ab2c0.  call temp:= `C0`(v0, v1, v2) @signature `Lvc/k;.C0:(III)J` @kind static;
  #L4ab2c6.  v0:= temp @kind wide;
  #L4ab2c8.  return v0 @kind wide;
}
procedure `vc.b` `h0`(`vc.k` v0 @kind this, `yc.f` v1 @kind object) @signature `Lvc/k;.h0:(Lyc/f;)Lvc/b;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ab460.  call temp:= `b1`(v0, v1) @signature `Lvc/k;.b1:(Lyc/f;)Lvc/k;` @kind virtual;
  #L4ab466.  v1:= temp @kind object;
  #L4ab468.  return v1 @kind object;
}
procedure `vc.b` `i0`(`vc.k` v0 @kind this, `yc.i` v1 @kind object, `long` v2 ) @signature `Lvc/k;.i0:(Lyc/i;J)Lvc/b;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ab47c.  call temp:= `c1`(v0, v1, v2) @signature `Lvc/k;.c1:(Lyc/i;J)Lvc/k;` @kind virtual;
  #L4ab482.  v1:= temp @kind object;
  #L4ab484.  return v1 @kind object;
}
procedure `vc.a` `j0`(`vc.k` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/k;.j0:(JLyc/l;)Lvc/a;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ab364.  call temp:= `T0`(v0, v1, v3) @signature `Lvc/k;.T0:(JLyc/l;)Lvc/k;` @kind virtual;
  #L4ab36a.  v1:= temp @kind object;
  #L4ab36c.  return v1 @kind object;
}
procedure `vc.a` `k0`(`vc.k` v0 @kind this, `long` v1 ) @signature `Lvc/k;.k0:(J)Lvc/a;` @AccessFlag SYNTHETIC {
    temp;

  #L4ab380.  call temp:= `V0`(v0, v1) @signature `Lvc/k;.V0:(J)Lvc/k;` @kind virtual;
  #L4ab386.  v1:= temp @kind object;
  #L4ab388.  return v1 @kind object;
}
procedure `vc.a` `l0`(`vc.k` v0 @kind this, `long` v1 ) @signature `Lvc/k;.l0:(J)Lvc/a;` @AccessFlag SYNTHETIC {
    temp;

  #L4ab39c.  call temp:= `W0`(v0, v1) @signature `Lvc/k;.W0:(J)Lvc/k;` @kind virtual;
  #L4ab3a2.  v1:= temp @kind object;
  #L4ab3a4.  return v1 @kind object;
}
procedure `vc.a` `m0`(`vc.k` v0 @kind this, `long` v1 ) @signature `Lvc/k;.m0:(J)Lvc/a;` @AccessFlag SYNTHETIC {
    temp;

  #L4ab3b8.  call temp:= `X0`(v0, v1) @signature `Lvc/k;.X0:(J)Lvc/k;` @kind virtual;
  #L4ab3be.  v1:= temp @kind object;
  #L4ab3c0.  return v1 @kind object;
}
procedure `yc.d` `r`(`vc.k` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Lvc/k;.r:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4acab4.  call temp:= `O0`(v0, v1, v3) @signature `Lvc/k;.O0:(JLyc/l;)Lvc/k;` @kind virtual;
  #L4acaba.  v1:= temp @kind object;
  #L4acabc.  return v1 @kind object;
}
procedure `yc.n` `t`(`vc.k` v4 @kind this, `yc.i` v5 @kind object) @signature `Lvc/k;.t:(Lyc/i;)Lyc/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4acb24.  v0:= instanceof @variable v5 @type ^`yc.a` @kind boolean;
  #L4acb28.  if v0 == 0 then goto L4acbec;
  #L4acb2c.  call temp:= `d`(v4, v5) @signature `Lvc/b;.d:(Lyc/i;)Z` @kind virtual;
  #L4acb32.  v0:= temp;
  #L4acb34.  if v0 == 0 then goto L4acbbe;
  #L4acb38.  v5:= (`yc.a`) v5 @kind object;
  #L4acb3c.  v0:= `@@vc.k$a.a` @type ^`int`[] @kind object;
  #L4acb40.  call temp:= `ordinal`(v5) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4acb46.  v1:= temp;
  #L4acb48.  v0:= v0[v1];
  #L4acb4c.  v1:= 1I;
  #L4acb4e.  v2:= 1L;
  #L4acb52.  if v0 == v1 then goto L4acbaa;
  #L4acb56.  v1:= 2I;
  #L4acb58.  if v0 == v1 then goto L4acb96;
  #L4acb5c.  v1:= 3I;
  #L4acb5e.  if v0 == v1 then goto L4acb88;
  #L4acb62.  v1:= 4I;
  #L4acb64.  if v0 == v1 then goto L4acb7a;
  #L4acb68.  call temp:= `v0`(v4) @signature `Lvc/k;.v0:()Lvc/j;` @kind virtual;
  #L4acb6e.  v0:= temp @kind object;
  #L4acb70.  call temp:= `S`(v0, v5) @signature `Lvc/j;.S:(Lyc/a;)Lyc/n;` @kind virtual;
  #L4acb76.  v5:= temp @kind object;
  #L4acb78.  return v5 @kind object;
  #L4acb7a.  v0:= 1000L;
  #L4acb7e.  call temp:= `i`(v2, v0) @signature `Lyc/n;.i:(JJ)Lyc/n;` @kind static;
  #L4acb84.  v5:= temp @kind object;
  #L4acb86.  return v5 @kind object;
  #L4acb88.  v0:= 5L;
  #L4acb8c.  call temp:= `i`(v2, v0) @signature `Lyc/n;.i:(JJ)Lyc/n;` @kind static;
  #L4acb92.  v5:= temp @kind object;
  #L4acb94.  return v5 @kind object;
  #L4acb96.  call temp:= `N0`(v4) @signature `Lvc/k;.N0:()I` @kind virtual;
  #L4acb9c.  v5:= temp;
  #L4acb9e.  v0:= (`long`) v5 @kind i2l;
  #L4acba0.  call temp:= `i`(v2, v0) @signature `Lyc/n;.i:(JJ)Lyc/n;` @kind static;
  #L4acba6.  v5:= temp @kind object;
  #L4acba8.  return v5 @kind object;
  #L4acbaa.  call temp:= `M0`(v4) @signature `Lvc/k;.M0:()I` @kind virtual;
  #L4acbb0.  v5:= temp;
  #L4acbb2.  v0:= (`long`) v5 @kind i2l;
  #L4acbb4.  call temp:= `i`(v2, v0) @signature `Lyc/n;.i:(JJ)Lyc/n;` @kind static;
  #L4acbba.  v5:= temp @kind object;
  #L4acbbc.  return v5 @kind object;
  #L4acbbe.  v0:= new `yc.m`;
  #L4acbc2.  v1:= new `java.lang.StringBuilder`;
  #L4acbc6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4acbcc.  v2:= "Unsupported field: " @kind object;
  #L4acbd0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4acbd6.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4acbdc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4acbe2.  v5:= temp @kind object;
  #L4acbe4.  call `<init>`(v0, v5) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4acbea.  throw v0;
  #L4acbec.  call temp:= `h`(v5, v4) @signature `Lyc/i;.h:(Lyc/e;)Lyc/n;` @kind interface;
  #L4acbf2.  v5:= temp @kind object;
  #L4acbf4.  return v5 @kind object;
}
procedure `vc.j` `v0`(`vc.k` v1 @kind this) @signature `Lvc/k;.v0:()Lvc/j;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ab4ec.  v0:= `@@vc.j.q` @type ^`vc.j` @kind object;
  #L4ab4f0.  return v0 @kind object;
}
