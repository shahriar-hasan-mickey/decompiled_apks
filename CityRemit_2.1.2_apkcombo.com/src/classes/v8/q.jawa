record `v8.q` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `java.util.Comparator` @kind interface {
}
global `v8.q` `@@v8.q.o` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lv8/q;.<clinit>:()V` @AccessFlag STATIC_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a6f94.  v0:= new `v8.q`;
  #L4a6f98.  call `<init>`(v0) @signature `Lv8/q;.<init>:()V` @kind direct;
  #L4a6f9e.  `@@v8.q.o` @type ^`v8.q` := v0 @kind object;
  #L4a6fa2.  return @kind void;
}
procedure `void` `<init>`(`v8.q` v0 @kind this) @signature `Lv8/q;.<init>:()V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L4a6fb4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a6fba.  return @kind void;
}
procedure `int` `compare`(`v8.q` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lv8/q;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4a6f58.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L4a6f5c.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L4a6f60.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L4a6f66.  v1:= temp @kind object;
  #L4a6f68.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L4a6f6c.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L4a6f72.  v2:= temp @kind object;
  #L4a6f74.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L4a6f78.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/Integer;.compareTo:(Ljava/lang/Integer;)I` @kind virtual;
  #L4a6f7e.  v1:= temp;
  #L4a6f80.  return v1;
}
