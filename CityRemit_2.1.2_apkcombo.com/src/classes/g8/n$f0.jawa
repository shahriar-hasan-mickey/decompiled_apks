record `g8.n$f0` @kind class @AccessFlag  extends `d8.w` @kind class {
}
procedure `void` `<init>`(`g8.n$f0` v0 @kind this) @signature `Lg8/n$f0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3295cc.  call `<init>`(v0) @signature `Ld8/w;.<init>:()V` @kind direct;
  #L3295d2.  return @kind void;
}
procedure `java.lang.Object` `c`(`g8.n$f0` v0 @kind this, `l8.a` v1 @kind object) @signature `Lg8/n$f0;.c:(Ll8/a;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L32956c.  call temp:= `f`(v0, v1) @signature `Lg8/n$f0;.f:(Ll8/a;)Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L329572.  v1:= temp @kind object;
  #L329574.  return v1 @kind object;
}
procedure `void` `e`(`g8.n$f0` v0 @kind this, `l8.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lg8/n$f0;.e:(Ll8/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3295e4.  v2:= (`java.util.concurrent.atomic.AtomicInteger`) v2 @kind object;
  #L3295e8.  call `g`(v0, v1, v2) @signature `Lg8/n$f0;.g:(Ll8/c;Ljava/util/concurrent/atomic/AtomicInteger;)V` @kind virtual;
  #L3295ee.  return @kind void;
}
procedure `java.util.concurrent.atomic.AtomicInteger` `f`(`g8.n$f0` v1 @kind this, `l8.a` v2 @kind object) @signature `Lg8/n$f0;.f:(Ll8/a;)Ljava/util/concurrent/atomic/AtomicInteger;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L329588.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L32958c.  call temp:= `N`(v2) @signature `Ll8/a;.N:()I` @kind virtual;
  #L329592.  v2:= temp;
  #L329594.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L32959a.  return v0 @kind object;
  #L32959c.  v2:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L32959e.  v0:= new `d8.s`;
  #L3295a2.  call `<init>`(v0, v2) @signature `Ld8/s;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3295a8.  throw v0;
  catch `java.lang.NumberFormatException` @[L329588..L32959a] goto L32959c;
}
procedure `void` `g`(`g8.n$f0` v2 @kind this, `l8.c` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object) @signature `Lg8/n$f0;.g:(Ll8/c;Ljava/util/concurrent/atomic/AtomicInteger;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L329600.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L329606.  v4:= temp;
  #L329608.  v0:= (`long`) v4 @kind i2l;
  #L32960a.  call temp:= `e0`(v3, v0) @signature `Ll8/c;.e0:(J)Ll8/c;` @kind virtual;
  #L329610.  return @kind void;
}
