record `g8.f` @kind class @AccessFlag PUBLIC_FINAL extends `l8.a` @kind class {
  `java.lang.Object`[] `g8.f.D` @AccessFlag PRIVATE;
  `int` `g8.f.E` @AccessFlag PRIVATE;
  `java.lang.String`[] `g8.f.F` @AccessFlag PRIVATE;
  `int`[] `g8.f.G` @AccessFlag PRIVATE;
}
global `java.io.Reader` `@@g8.f.H` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object` `@@g8.f.I` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lg8/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L325c1c.  v0:= new `g8.f$a`;
  #L325c20.  call `<init>`(v0) @signature `Lg8/f$a;.<init>:()V` @kind direct;
  #L325c26.  `@@g8.f.H` @type ^`java.io.Reader` := v0 @kind object;
  #L325c2a.  v0:= new `java.lang.Object`;
  #L325c2e.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L325c34.  `@@g8.f.I` @type ^`java.lang.Object` := v0 @kind object;
  #L325c38.  return @kind void;
}
procedure `void` `<init>`(`g8.f` v2 @kind this, `d8.k` v3 @kind object) @signature `Lg8/f;.<init>:(Ld8/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L325c4c.  v0:= `@@g8.f.H` @type ^`java.io.Reader` @kind object;
  #L325c50.  call `<init>`(v2, v0) @signature `Ll8/a;.<init>:(Ljava/io/Reader;)V` @kind direct;
  #L325c56.  v0:= 32I;
  #L325c5a.  v1:= new `java.lang.Object`[v0];
  #L325c5e.  v2.`g8.f.D` @type ^`java.lang.Object`[] := v1 @kind object;
  #L325c62.  v1:= 0I;
  #L325c64.  v2.`g8.f.E` @type ^`int` := v1;
  #L325c68.  v1:= new `java.lang.String`[v0];
  #L325c6c.  v2.`g8.f.F` @type ^`java.lang.String`[] := v1 @kind object;
  #L325c70.  v0:= new `int`[v0];
  #L325c74.  v2.`g8.f.G` @type ^`int`[] := v0 @kind object;
  #L325c78.  call `w0`(v2, v3) @signature `Lg8/f;.w0:(Ljava/lang/Object;)V` @kind direct;
  #L325c7e.  return @kind void;
}
procedure `java.lang.String` `J`(`g8.f` v2 @kind this) @signature `Lg8/f;.J:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3258c4.  v0:= new `java.lang.StringBuilder`;
  #L3258c8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3258ce.  v1:= " at path " @kind object;
  #L3258d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3258d8.  call temp:= `v`(v2) @signature `Lg8/f;.v:()Ljava/lang/String;` @kind virtual;
  #L3258de.  v1:= temp @kind object;
  #L3258e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3258e6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3258ec.  v0:= temp @kind object;
  #L3258ee.  return v0 @kind object;
}
procedure `void` `r0`(`g8.f` v3 @kind this, `l8.b` v4 @kind object) @signature `Lg8/f;.r0:(Ll8/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L325dcc.  call temp:= `f0`(v3) @signature `Lg8/f;.f0:()Ll8/b;` @kind virtual;
  #L325dd2.  v0:= temp @kind object;
  #L325dd4.  if v0 != v4 then goto L325dda;
  #L325dd8.  return @kind void;
  #L325dda.  v0:= new `java.lang.IllegalStateException`;
  #L325dde.  v1:= new `java.lang.StringBuilder`;
  #L325de2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L325de8.  v2:= "Expected " @kind object;
  #L325dec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325df2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325df8.  v4:= " but was " @kind object;
  #L325dfc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325e02.  call temp:= `f0`(v3) @signature `Lg8/f;.f0:()Ll8/b;` @kind virtual;
  #L325e08.  v4:= temp @kind object;
  #L325e0a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325e10.  call temp:= `J`(v3) @signature `Lg8/f;.J:()Ljava/lang/String;` @kind direct;
  #L325e16.  v4:= temp @kind object;
  #L325e18.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325e1e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L325e24.  v4:= temp @kind object;
  #L325e26.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L325e2c.  throw v0;
}
procedure `java.lang.Object` `t0`(`g8.f` v2 @kind this) @signature `Lg8/f;.t0:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3257ac.  v0:= v2.`g8.f.D` @type ^`java.lang.Object`[] @kind object;
  #L3257b0.  v1:= v2.`g8.f.E` @type ^`int`;
  #L3257b4.  v1:= v1 + -1;
  #L3257b8.  v0:= v0[v1] @kind object;
  #L3257bc.  return v0 @kind object;
}
procedure `java.lang.Object` `u0`(`g8.f` v4 @kind this) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3257d0.  v0:= v4.`g8.f.D` @type ^`java.lang.Object`[] @kind object;
  #L3257d4.  v1:= v4.`g8.f.E` @type ^`int`;
  #L3257d8.  v1:= v1 + -1;
  #L3257dc.  v4.`g8.f.E` @type ^`int` := v1;
  #L3257e0.  v2:= v0[v1] @kind object;
  #L3257e4.  v3:= 0I;
  #L3257e6.  v0[v1]:= v3 @kind object;
  #L3257ea.  return v2 @kind object;
}
procedure `void` `w0`(`g8.f` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lg8/f;.w0:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L325ee0.  v0:= v3.`g8.f.E` @type ^`int`;
  #L325ee4.  v1:= v3.`g8.f.D` @type ^`java.lang.Object`[] @kind object;
  #L325ee8.  v2:= length @variable v1;
  #L325eea.  if v0 != v2 then goto L325f22;
  #L325eee.  v0:= v0 * 2;
  #L325ef2.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L325ef8.  v1:= temp @kind object;
  #L325efa.  v3.`g8.f.D` @type ^`java.lang.Object`[] := v1 @kind object;
  #L325efe.  v1:= v3.`g8.f.G` @type ^`int`[] @kind object;
  #L325f02.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L325f08.  v1:= temp @kind object;
  #L325f0a.  v3.`g8.f.G` @type ^`int`[] := v1 @kind object;
  #L325f0e.  v1:= v3.`g8.f.F` @type ^`java.lang.String`[] @kind object;
  #L325f12.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L325f18.  v0:= temp @kind object;
  #L325f1a.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L325f1e.  v3.`g8.f.F` @type ^`java.lang.String`[] := v0 @kind object;
  #L325f22.  v0:= v3.`g8.f.D` @type ^`java.lang.Object`[] @kind object;
  #L325f26.  v1:= v3.`g8.f.E` @type ^`int`;
  #L325f2a.  v2:= v1 + 1;
  #L325f2e.  v3.`g8.f.E` @type ^`int` := v2;
  #L325f32.  v0[v1]:= v4 @kind object;
  #L325f36.  return @kind void;
}
procedure `boolean` `K`(`g8.f` v4 @kind this) @signature `Lg8/f;.K:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L325528.  v0:= `@@l8.b.v` @type ^`l8.b` @kind object;
  #L32552c.  call `r0`(v4, v0) @signature `Lg8/f;.r0:(Ll8/b;)V` @kind direct;
  #L325532.  call temp:= `u0`(v4) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @kind direct;
  #L325538.  v0:= temp @kind object;
  #L32553a.  v0:= (`d8.p`) v0 @kind object;
  #L32553e.  call temp:= `G`(v0) @signature `Ld8/p;.G:()Z` @kind virtual;
  #L325544.  v0:= temp;
  #L325546.  v1:= v4.`g8.f.E` @type ^`int`;
  #L32554a.  if v1 <= 0 then goto L325562;
  #L32554e.  v2:= v4.`g8.f.G` @type ^`int`[] @kind object;
  #L325552.  v1:= v1 + -1;
  #L325556.  v3:= v2[v1];
  #L32555a.  v3:= v3 + 1;
  #L32555e.  v2[v1]:= v3;
  #L325562.  return v0;
}
procedure `double` `M`(`g8.f` v5 @kind this) @signature `Lg8/f;.M:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3255f8.  call temp:= `f0`(v5) @signature `Lg8/f;.f0:()Ll8/b;` @kind virtual;
  #L3255fe.  v0:= temp @kind object;
  #L325600.  v1:= `@@l8.b.u` @type ^`l8.b` @kind object;
  #L325604.  if v0 == v1 then goto L32565e;
  #L325608.  v2:= `@@l8.b.t` @type ^`l8.b` @kind object;
  #L32560c.  if v0 != v2 then goto L325612;
  #L325610.  goto L32565e;
  #L325612.  v2:= new `java.lang.IllegalStateException`;
  #L325616.  v3:= new `java.lang.StringBuilder`;
  #L32561a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L325620.  v4:= "Expected " @kind object;
  #L325624.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32562a.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325630.  v1:= " but was " @kind object;
  #L325634.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32563a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325640.  call temp:= `J`(v5) @signature `Lg8/f;.J:()Ljava/lang/String;` @kind direct;
  #L325646.  v0:= temp @kind object;
  #L325648.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32564e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L325654.  v0:= temp @kind object;
  #L325656.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32565c.  throw v2;
  #L32565e.  call temp:= `t0`(v5) @signature `Lg8/f;.t0:()Ljava/lang/Object;` @kind direct;
  #L325664.  v0:= temp @kind object;
  #L325666.  v0:= (`d8.p`) v0 @kind object;
  #L32566a.  call temp:= `N`(v0) @signature `Ld8/p;.N:()D` @kind virtual;
  #L325670.  v0:= temp @kind wide;
  #L325672.  call temp:= `E`(v5) @signature `Ll8/a;.E:()Z` @kind virtual;
  #L325678.  v2:= temp;
  #L32567a.  if v2 != 0 then goto L3256c6;
  #L32567e.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L325684.  v2:= temp;
  #L325686.  if v2 != 0 then goto L325698;
  #L32568a.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L325690.  v2:= temp;
  #L325692.  if v2 != 0 then goto L325698;
  #L325696.  goto L3256c6;
  #L325698.  v2:= new `java.lang.NumberFormatException`;
  #L32569c.  v3:= new `java.lang.StringBuilder`;
  #L3256a0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3256a6.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L3256aa.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3256b0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L3256b6.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3256bc.  v0:= temp @kind object;
  #L3256be.  call `<init>`(v2, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3256c4.  throw v2;
  #L3256c6.  call temp:= `u0`(v5) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @kind direct;
  #L3256cc.  v2:= v5.`g8.f.E` @type ^`int`;
  #L3256d0.  if v2 <= 0 then goto L3256e8;
  #L3256d4.  v3:= v5.`g8.f.G` @type ^`int`[] @kind object;
  #L3256d8.  v2:= v2 + -1;
  #L3256dc.  v4:= v3[v2];
  #L3256e0.  v4:= v4 + 1;
  #L3256e4.  v3[v2]:= v4;
  #L3256e8.  return v0 @kind wide;
}
procedure `int` `N`(`g8.f` v5 @kind this) @signature `Lg8/f;.N:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3256fc.  call temp:= `f0`(v5) @signature `Lg8/f;.f0:()Ll8/b;` @kind virtual;
  #L325702.  v0:= temp @kind object;
  #L325704.  v1:= `@@l8.b.u` @type ^`l8.b` @kind object;
  #L325708.  if v0 == v1 then goto L325762;
  #L32570c.  v2:= `@@l8.b.t` @type ^`l8.b` @kind object;
  #L325710.  if v0 != v2 then goto L325716;
  #L325714.  goto L325762;
  #L325716.  v2:= new `java.lang.IllegalStateException`;
  #L32571a.  v3:= new `java.lang.StringBuilder`;
  #L32571e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L325724.  v4:= "Expected " @kind object;
  #L325728.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32572e.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325734.  v1:= " but was " @kind object;
  #L325738.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32573e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325744.  call temp:= `J`(v5) @signature `Lg8/f;.J:()Ljava/lang/String;` @kind direct;
  #L32574a.  v0:= temp @kind object;
  #L32574c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325752.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L325758.  v0:= temp @kind object;
  #L32575a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L325760.  throw v2;
  #L325762.  call temp:= `t0`(v5) @signature `Lg8/f;.t0:()Ljava/lang/Object;` @kind direct;
  #L325768.  v0:= temp @kind object;
  #L32576a.  v0:= (`d8.p`) v0 @kind object;
  #L32576e.  call temp:= `O`(v0) @signature `Ld8/p;.O:()I` @kind virtual;
  #L325774.  v0:= temp;
  #L325776.  call temp:= `u0`(v5) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @kind direct;
  #L32577c.  v1:= v5.`g8.f.E` @type ^`int`;
  #L325780.  if v1 <= 0 then goto L325798;
  #L325784.  v2:= v5.`g8.f.G` @type ^`int`[] @kind object;
  #L325788.  v1:= v1 + -1;
  #L32578c.  v3:= v2[v1];
  #L325790.  v3:= v3 + 1;
  #L325794.  v2[v1]:= v3;
  #L325798.  return v0;
}
procedure `long` `O`(`g8.f` v5 @kind this) @signature `Lg8/f;.O:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L325b6c.  call temp:= `f0`(v5) @signature `Lg8/f;.f0:()Ll8/b;` @kind virtual;
  #L325b72.  v0:= temp @kind object;
  #L325b74.  v1:= `@@l8.b.u` @type ^`l8.b` @kind object;
  #L325b78.  if v0 == v1 then goto L325bd2;
  #L325b7c.  v2:= `@@l8.b.t` @type ^`l8.b` @kind object;
  #L325b80.  if v0 != v2 then goto L325b86;
  #L325b84.  goto L325bd2;
  #L325b86.  v2:= new `java.lang.IllegalStateException`;
  #L325b8a.  v3:= new `java.lang.StringBuilder`;
  #L325b8e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L325b94.  v4:= "Expected " @kind object;
  #L325b98.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325b9e.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325ba4.  v1:= " but was " @kind object;
  #L325ba8.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325bae.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325bb4.  call temp:= `J`(v5) @signature `Lg8/f;.J:()Ljava/lang/String;` @kind direct;
  #L325bba.  v0:= temp @kind object;
  #L325bbc.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325bc2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L325bc8.  v0:= temp @kind object;
  #L325bca.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L325bd0.  throw v2;
  #L325bd2.  call temp:= `t0`(v5) @signature `Lg8/f;.t0:()Ljava/lang/Object;` @kind direct;
  #L325bd8.  v0:= temp @kind object;
  #L325bda.  v0:= (`d8.p`) v0 @kind object;
  #L325bde.  call temp:= `Q`(v0) @signature `Ld8/p;.Q:()J` @kind virtual;
  #L325be4.  v0:= temp @kind wide;
  #L325be6.  call temp:= `u0`(v5) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @kind direct;
  #L325bec.  v2:= v5.`g8.f.E` @type ^`int`;
  #L325bf0.  if v2 <= 0 then goto L325c08;
  #L325bf4.  v3:= v5.`g8.f.G` @type ^`int`[] @kind object;
  #L325bf8.  v2:= v2 + -1;
  #L325bfc.  v4:= v3[v2];
  #L325c00.  v4:= v4 + 1;
  #L325c04.  v3[v2]:= v4;
  #L325c08.  return v0 @kind wide;
}
procedure `java.lang.String` `S`(`g8.f` v4 @kind this) @signature `Lg8/f;.S:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L325900.  v0:= `@@l8.b.s` @type ^`l8.b` @kind object;
  #L325904.  call `r0`(v4, v0) @signature `Lg8/f;.r0:(Ll8/b;)V` @kind direct;
  #L32590a.  call temp:= `t0`(v4) @signature `Lg8/f;.t0:()Ljava/lang/Object;` @kind direct;
  #L325910.  v0:= temp @kind object;
  #L325912.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L325916.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L32591c.  v0:= temp @kind object;
  #L32591e.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L325922.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L325928.  v1:= temp @kind object;
  #L32592a.  v1:= (`java.lang.String`) v1 @kind object;
  #L32592e.  v2:= v4.`g8.f.F` @type ^`java.lang.String`[] @kind object;
  #L325932.  v3:= v4.`g8.f.E` @type ^`int`;
  #L325936.  v3:= v3 + -1;
  #L32593a.  v2[v3]:= v1 @kind object;
  #L32593e.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L325944.  v0:= temp @kind object;
  #L325946.  call `w0`(v4, v0) @signature `Lg8/f;.w0:(Ljava/lang/Object;)V` @kind direct;
  #L32594c.  return v1 @kind object;
}
procedure `void` `a`(`g8.f` v3 @kind this) @signature `Lg8/f;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L325c90.  v0:= `@@l8.b.o` @type ^`l8.b` @kind object;
  #L325c94.  call `r0`(v3, v0) @signature `Lg8/f;.r0:(Ll8/b;)V` @kind direct;
  #L325c9a.  call temp:= `t0`(v3) @signature `Lg8/f;.t0:()Ljava/lang/Object;` @kind direct;
  #L325ca0.  v0:= temp @kind object;
  #L325ca2.  v0:= (`d8.h`) v0 @kind object;
  #L325ca6.  call temp:= `iterator`(v0) @signature `Ld8/h;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L325cac.  v0:= temp @kind object;
  #L325cae.  call `w0`(v3, v0) @signature `Lg8/f;.w0:(Ljava/lang/Object;)V` @kind direct;
  #L325cb4.  v0:= v3.`g8.f.G` @type ^`int`[] @kind object;
  #L325cb8.  v1:= v3.`g8.f.E` @type ^`int`;
  #L325cbc.  v1:= v1 + -1;
  #L325cc0.  v2:= 0I;
  #L325cc2.  v0[v1]:= v2;
  #L325cc6.  return @kind void;
}
procedure `void` `b0`(`g8.f` v3 @kind this) @signature `Lg8/f;.b0:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L325e40.  v0:= `@@l8.b.w` @type ^`l8.b` @kind object;
  #L325e44.  call `r0`(v3, v0) @signature `Lg8/f;.r0:(Ll8/b;)V` @kind direct;
  #L325e4a.  call temp:= `u0`(v3) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @kind direct;
  #L325e50.  v0:= v3.`g8.f.E` @type ^`int`;
  #L325e54.  if v0 <= 0 then goto L325e6c;
  #L325e58.  v1:= v3.`g8.f.G` @type ^`int`[] @kind object;
  #L325e5c.  v0:= v0 + -1;
  #L325e60.  v2:= v1[v0];
  #L325e64.  v2:= v2 + 1;
  #L325e68.  v1[v0]:= v2;
  #L325e6c.  return @kind void;
}
procedure `void` `c`(`g8.f` v1 @kind this) @signature `Lg8/f;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L325cd8.  v0:= `@@l8.b.q` @type ^`l8.b` @kind object;
  #L325cdc.  call `r0`(v1, v0) @signature `Lg8/f;.r0:(Ll8/b;)V` @kind direct;
  #L325ce2.  call temp:= `t0`(v1) @signature `Lg8/f;.t0:()Ljava/lang/Object;` @kind direct;
  #L325ce8.  v0:= temp @kind object;
  #L325cea.  v0:= (`d8.n`) v0 @kind object;
  #L325cee.  call temp:= `N`(v0) @signature `Ld8/n;.N:()Ljava/util/Set;` @kind virtual;
  #L325cf4.  v0:= temp @kind object;
  #L325cf6.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L325cfc.  v0:= temp @kind object;
  #L325cfe.  call `w0`(v1, v0) @signature `Lg8/f;.w0:(Ljava/lang/Object;)V` @kind direct;
  #L325d04.  return @kind void;
}
procedure `void` `close`(`g8.f` v4 @kind this) @signature `Lg8/f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L325d18.  v0:= 1I;
  #L325d1a.  v1:= new `java.lang.Object`[v0];
  #L325d1e.  v2:= `@@g8.f.I` @type ^`java.lang.Object` @kind object;
  #L325d22.  v3:= 0I;
  #L325d24.  v1[v3]:= v2 @kind object;
  #L325d28.  v4.`g8.f.D` @type ^`java.lang.Object`[] := v1 @kind object;
  #L325d2c.  v4.`g8.f.E` @type ^`int` := v0;
  #L325d30.  return @kind void;
}
procedure `java.lang.String` `d0`(`g8.f` v5 @kind this) @signature `Lg8/f;.d0:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L325960.  call temp:= `f0`(v5) @signature `Lg8/f;.f0:()Ll8/b;` @kind virtual;
  #L325966.  v0:= temp @kind object;
  #L325968.  v1:= `@@l8.b.t` @type ^`l8.b` @kind object;
  #L32596c.  if v0 == v1 then goto L3259c6;
  #L325970.  v2:= `@@l8.b.u` @type ^`l8.b` @kind object;
  #L325974.  if v0 != v2 then goto L32597a;
  #L325978.  goto L3259c6;
  #L32597a.  v2:= new `java.lang.IllegalStateException`;
  #L32597e.  v3:= new `java.lang.StringBuilder`;
  #L325982.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L325988.  v4:= "Expected " @kind object;
  #L32598c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325992.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325998.  v1:= " but was " @kind object;
  #L32599c.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3259a2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3259a8.  call temp:= `J`(v5) @signature `Lg8/f;.J:()Ljava/lang/String;` @kind direct;
  #L3259ae.  v0:= temp @kind object;
  #L3259b0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3259b6.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3259bc.  v0:= temp @kind object;
  #L3259be.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3259c4.  throw v2;
  #L3259c6.  call temp:= `u0`(v5) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @kind direct;
  #L3259cc.  v0:= temp @kind object;
  #L3259ce.  v0:= (`d8.p`) v0 @kind object;
  #L3259d2.  call temp:= `l`(v0) @signature `Ld8/p;.l:()Ljava/lang/String;` @kind virtual;
  #L3259d8.  v0:= temp @kind object;
  #L3259da.  v1:= v5.`g8.f.E` @type ^`int`;
  #L3259de.  if v1 <= 0 then goto L3259f6;
  #L3259e2.  v2:= v5.`g8.f.G` @type ^`int`[] @kind object;
  #L3259e6.  v1:= v1 + -1;
  #L3259ea.  v3:= v2[v1];
  #L3259ee.  v3:= v3 + 1;
  #L3259f2.  v2[v1]:= v3;
  #L3259f6.  return v0 @kind object;
}
procedure `l8.b` `f0`(`g8.f` v3 @kind this) @signature `Lg8/f;.f0:()Ll8/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L325a4c.  v0:= v3.`g8.f.E` @type ^`int`;
  #L325a50.  if v0 != 0 then goto L325a5a;
  #L325a54.  v0:= `@@l8.b.x` @type ^`l8.b` @kind object;
  #L325a58.  return v0 @kind object;
  #L325a5a.  call temp:= `t0`(v3) @signature `Lg8/f;.t0:()Ljava/lang/Object;` @kind direct;
  #L325a60.  v0:= temp @kind object;
  #L325a62.  v1:= instanceof @variable v0 @type ^`java.util.Iterator` @kind boolean;
  #L325a66.  if v1 == 0 then goto L325ac0;
  #L325a6a.  v1:= v3.`g8.f.D` @type ^`java.lang.Object`[] @kind object;
  #L325a6e.  v2:= v3.`g8.f.E` @type ^`int`;
  #L325a72.  v2:= v2 + -2;
  #L325a76.  v1:= v1[v2] @kind object;
  #L325a7a.  v1:= instanceof @variable v1 @type ^`d8.n` @kind boolean;
  #L325a7e.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L325a82.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L325a88.  v2:= temp;
  #L325a8a.  if v2 == 0 then goto L325ab0;
  #L325a8e.  if v1 == 0 then goto L325a98;
  #L325a92.  v0:= `@@l8.b.s` @type ^`l8.b` @kind object;
  #L325a96.  return v0 @kind object;
  #L325a98.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L325a9e.  v0:= temp @kind object;
  #L325aa0.  call `w0`(v3, v0) @signature `Lg8/f;.w0:(Ljava/lang/Object;)V` @kind direct;
  #L325aa6.  call temp:= `f0`(v3) @signature `Lg8/f;.f0:()Ll8/b;` @kind virtual;
  #L325aac.  v0:= temp @kind object;
  #L325aae.  return v0 @kind object;
  #L325ab0.  if v1 == 0 then goto L325aba;
  #L325ab4.  v0:= `@@l8.b.r` @type ^`l8.b` @kind object;
  #L325ab8.  goto L325abe;
  #L325aba.  v0:= `@@l8.b.p` @type ^`l8.b` @kind object;
  #L325abe.  return v0 @kind object;
  #L325ac0.  v1:= instanceof @variable v0 @type ^`d8.n` @kind boolean;
  #L325ac4.  if v1 == 0 then goto L325ace;
  #L325ac8.  v0:= `@@l8.b.q` @type ^`l8.b` @kind object;
  #L325acc.  return v0 @kind object;
  #L325ace.  v1:= instanceof @variable v0 @type ^`d8.h` @kind boolean;
  #L325ad2.  if v1 == 0 then goto L325adc;
  #L325ad6.  v0:= `@@l8.b.o` @type ^`l8.b` @kind object;
  #L325ada.  return v0 @kind object;
  #L325adc.  v1:= instanceof @variable v0 @type ^`d8.p` @kind boolean;
  #L325ae0.  if v1 == 0 then goto L325b2a;
  #L325ae4.  v0:= (`d8.p`) v0 @kind object;
  #L325ae8.  call temp:= `b0`(v0) @signature `Ld8/p;.b0:()Z` @kind virtual;
  #L325aee.  v1:= temp;
  #L325af0.  if v1 == 0 then goto L325afa;
  #L325af4.  v0:= `@@l8.b.t` @type ^`l8.b` @kind object;
  #L325af8.  return v0 @kind object;
  #L325afa.  call temp:= `T`(v0) @signature `Ld8/p;.T:()Z` @kind virtual;
  #L325b00.  v1:= temp;
  #L325b02.  if v1 == 0 then goto L325b0c;
  #L325b06.  v0:= `@@l8.b.v` @type ^`l8.b` @kind object;
  #L325b0a.  return v0 @kind object;
  #L325b0c.  call temp:= `a0`(v0) @signature `Ld8/p;.a0:()Z` @kind virtual;
  #L325b12.  v0:= temp;
  #L325b14.  if v0 == 0 then goto L325b1e;
  #L325b18.  v0:= `@@l8.b.u` @type ^`l8.b` @kind object;
  #L325b1c.  return v0 @kind object;
  #L325b1e.  v0:= new `java.lang.AssertionError`;
  #L325b22.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L325b28.  throw v0;
  #L325b2a.  v1:= instanceof @variable v0 @type ^`d8.m` @kind boolean;
  #L325b2e.  if v1 == 0 then goto L325b38;
  #L325b32.  v0:= `@@l8.b.w` @type ^`l8.b` @kind object;
  #L325b36.  return v0 @kind object;
  #L325b38.  v1:= `@@g8.f.I` @type ^`java.lang.Object` @kind object;
  #L325b3c.  if v0 != v1 then goto L325b50;
  #L325b40.  v0:= new `java.lang.IllegalStateException`;
  #L325b44.  v1:= "JsonReader is closed" @kind object;
  #L325b48.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L325b4e.  throw v0;
  #L325b50.  v0:= new `java.lang.AssertionError`;
  #L325b54.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L325b5a.  throw v0;
}
procedure `void` `k`(`g8.f` v3 @kind this) @signature `Lg8/f;.k:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L325d44.  v0:= `@@l8.b.p` @type ^`l8.b` @kind object;
  #L325d48.  call `r0`(v3, v0) @signature `Lg8/f;.r0:(Ll8/b;)V` @kind direct;
  #L325d4e.  call temp:= `u0`(v3) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @kind direct;
  #L325d54.  call temp:= `u0`(v3) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @kind direct;
  #L325d5a.  v0:= v3.`g8.f.E` @type ^`int`;
  #L325d5e.  if v0 <= 0 then goto L325d76;
  #L325d62.  v1:= v3.`g8.f.G` @type ^`int`[] @kind object;
  #L325d66.  v0:= v0 + -1;
  #L325d6a.  v2:= v1[v0];
  #L325d6e.  v2:= v2 + 1;
  #L325d72.  v1[v0]:= v2;
  #L325d76.  return @kind void;
}
procedure `void` `o`(`g8.f` v3 @kind this) @signature `Lg8/f;.o:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L325d88.  v0:= `@@l8.b.r` @type ^`l8.b` @kind object;
  #L325d8c.  call `r0`(v3, v0) @signature `Lg8/f;.r0:(Ll8/b;)V` @kind direct;
  #L325d92.  call temp:= `u0`(v3) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @kind direct;
  #L325d98.  call temp:= `u0`(v3) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @kind direct;
  #L325d9e.  v0:= v3.`g8.f.E` @type ^`int`;
  #L325da2.  if v0 <= 0 then goto L325dba;
  #L325da6.  v1:= v3.`g8.f.G` @type ^`int`[] @kind object;
  #L325daa.  v0:= v0 + -1;
  #L325dae.  v2:= v1[v0];
  #L325db2.  v2:= v2 + 1;
  #L325db6.  v1[v0]:= v2;
  #L325dba.  return @kind void;
}
procedure `void` `p0`(`g8.f` v3 @kind this) @signature `Lg8/f;.p0:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L325f48.  call temp:= `f0`(v3) @signature `Lg8/f;.f0:()Ll8/b;` @kind virtual;
  #L325f4e.  v0:= temp @kind object;
  #L325f50.  v1:= `@@l8.b.s` @type ^`l8.b` @kind object;
  #L325f54.  v2:= "null" @kind object;
  #L325f58.  if v0 != v1 then goto L325f74;
  #L325f5c.  call temp:= `S`(v3) @signature `Lg8/f;.S:()Ljava/lang/String;` @kind virtual;
  #L325f62.  v0:= v3.`g8.f.F` @type ^`java.lang.String`[] @kind object;
  #L325f66.  v1:= v3.`g8.f.E` @type ^`int`;
  #L325f6a.  v1:= v1 + -2;
  #L325f6e.  v0[v1]:= v2 @kind object;
  #L325f72.  goto L325f8e;
  #L325f74.  call temp:= `u0`(v3) @signature `Lg8/f;.u0:()Ljava/lang/Object;` @kind direct;
  #L325f7a.  v0:= v3.`g8.f.E` @type ^`int`;
  #L325f7e.  if v0 <= 0 then goto L325f8e;
  #L325f82.  v1:= v3.`g8.f.F` @type ^`java.lang.String`[] @kind object;
  #L325f86.  v0:= v0 + -1;
  #L325f8a.  v1[v0]:= v2 @kind object;
  #L325f8e.  v0:= v3.`g8.f.E` @type ^`int`;
  #L325f92.  if v0 <= 0 then goto L325faa;
  #L325f96.  v1:= v3.`g8.f.G` @type ^`int`[] @kind object;
  #L325f9a.  v0:= v0 + -1;
  #L325f9e.  v2:= v1[v0];
  #L325fa2.  v2:= v2 + 1;
  #L325fa6.  v1[v0]:= v2;
  #L325faa.  return @kind void;
}
procedure `d8.k` `s0`(`g8.f` v4 @kind this) @signature `Lg8/f;.s0:()Ld8/k;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L325574.  call temp:= `f0`(v4) @signature `Lg8/f;.f0:()Ll8/b;` @kind virtual;
  #L32557a.  v0:= temp @kind object;
  #L32557c.  v1:= `@@l8.b.s` @type ^`l8.b` @kind object;
  #L325580.  if v0 == v1 then goto L3255b0;
  #L325584.  v1:= `@@l8.b.p` @type ^`l8.b` @kind object;
  #L325588.  if v0 == v1 then goto L3255b0;
  #L32558c.  v1:= `@@l8.b.r` @type ^`l8.b` @kind object;
  #L325590.  if v0 == v1 then goto L3255b0;
  #L325594.  v1:= `@@l8.b.x` @type ^`l8.b` @kind object;
  #L325598.  if v0 == v1 then goto L3255b0;
  #L32559c.  call temp:= `t0`(v4) @signature `Lg8/f;.t0:()Ljava/lang/Object;` @kind direct;
  #L3255a2.  v0:= temp @kind object;
  #L3255a4.  v0:= (`d8.k`) v0 @kind object;
  #L3255a8.  call `p0`(v4) @signature `Lg8/f;.p0:()V` @kind virtual;
  #L3255ae.  return v0 @kind object;
  #L3255b0.  v1:= new `java.lang.IllegalStateException`;
  #L3255b4.  v2:= new `java.lang.StringBuilder`;
  #L3255b8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3255be.  v3:= "Unexpected " @kind object;
  #L3255c2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3255c8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3255ce.  v0:= " when reading a JsonElement." @kind object;
  #L3255d2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3255d8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3255de.  v0:= temp @kind object;
  #L3255e0.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3255e6.  throw v1;
}
procedure `java.lang.String` `toString`(`g8.f` v2 @kind this) @signature `Lg8/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L325a08.  v0:= new `java.lang.StringBuilder`;
  #L325a0c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L325a12.  v1:= constclass @type ^`g8.f` @kind object;
  #L325a16.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L325a1c.  v1:= temp @kind object;
  #L325a1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325a24.  call temp:= `J`(v2) @signature `Lg8/f;.J:()Ljava/lang/String;` @kind direct;
  #L325a2a.  v1:= temp @kind object;
  #L325a2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325a32.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L325a38.  v0:= temp @kind object;
  #L325a3a.  return v0 @kind object;
}
procedure `java.lang.String` `v`(`g8.f` v5 @kind this) @signature `Lg8/f;.v:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3257fc.  v0:= new `java.lang.StringBuilder`;
  #L325800.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L325806.  v1:= 36I;
  #L32580a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L325810.  v1:= 0I;
  #L325812.  v2:= v5.`g8.f.E` @type ^`int`;
  #L325816.  if v1 >= v2 then goto L3258a8;
  #L32581a.  v3:= v5.`g8.f.D` @type ^`java.lang.Object`[] @kind object;
  #L32581e.  v4:= v3[v1] @kind object;
  #L325822.  v4:= instanceof @variable v4 @type ^`d8.h` @kind boolean;
  #L325826.  if v4 == 0 then goto L325862;
  #L32582a.  v1:= v1 + 1;
  #L32582e.  if v1 >= v2 then goto L3258a2;
  #L325832.  v2:= v3[v1] @kind object;
  #L325836.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L32583a.  if v2 == 0 then goto L3258a2;
  #L32583e.  v2:= 91I;
  #L325842.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L325848.  v2:= v5.`g8.f.G` @type ^`int`[] @kind object;
  #L32584c.  v2:= v2[v1];
  #L325850.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L325856.  v2:= 93I;
  #L32585a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L325860.  goto L3258a2;
  #L325862.  v4:= v3[v1] @kind object;
  #L325866.  v4:= instanceof @variable v4 @type ^`d8.n` @kind boolean;
  #L32586a.  if v4 == 0 then goto L3258a2;
  #L32586e.  v1:= v1 + 1;
  #L325872.  if v1 >= v2 then goto L3258a2;
  #L325876.  v2:= v3[v1] @kind object;
  #L32587a.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L32587e.  if v2 == 0 then goto L3258a2;
  #L325882.  v2:= 46I;
  #L325886.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32588c.  v2:= v5.`g8.f.F` @type ^`java.lang.String`[] @kind object;
  #L325890.  v3:= v2[v1] @kind object;
  #L325894.  if v3 == 0 then goto L3258a2;
  #L325898.  v2:= v2[v1] @kind object;
  #L32589c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3258a2.  v1:= v1 + 1;
  #L3258a6.  goto L325812;
  #L3258a8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3258ae.  v0:= temp @kind object;
  #L3258b0.  return v0 @kind object;
}
procedure `void` `v0`(`g8.f` v2 @kind this) @signature `Lg8/f;.v0:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L325e80.  v0:= `@@l8.b.s` @type ^`l8.b` @kind object;
  #L325e84.  call `r0`(v2, v0) @signature `Lg8/f;.r0:(Ll8/b;)V` @kind direct;
  #L325e8a.  call temp:= `t0`(v2) @signature `Lg8/f;.t0:()Ljava/lang/Object;` @kind direct;
  #L325e90.  v0:= temp @kind object;
  #L325e92.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L325e96.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L325e9c.  v0:= temp @kind object;
  #L325e9e.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L325ea2.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L325ea8.  v1:= temp @kind object;
  #L325eaa.  call `w0`(v2, v1) @signature `Lg8/f;.w0:(Ljava/lang/Object;)V` @kind direct;
  #L325eb0.  v1:= new `d8.p`;
  #L325eb4.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L325eba.  v0:= temp @kind object;
  #L325ebc.  v0:= (`java.lang.String`) v0 @kind object;
  #L325ec0.  call `<init>`(v1, v0) @signature `Ld8/p;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L325ec6.  call `w0`(v2, v1) @signature `Lg8/f;.w0:(Ljava/lang/Object;)V` @kind direct;
  #L325ecc.  return @kind void;
}
procedure `boolean` `x`(`g8.f` v2 @kind this) @signature `Lg8/f;.x:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3254f8.  call temp:= `f0`(v2) @signature `Lg8/f;.f0:()Ll8/b;` @kind virtual;
  #L3254fe.  v0:= temp @kind object;
  #L325500.  v1:= `@@l8.b.r` @type ^`l8.b` @kind object;
  #L325504.  if v0 == v1 then goto L325514;
  #L325508.  v1:= `@@l8.b.p` @type ^`l8.b` @kind object;
  #L32550c.  if v0 == v1 then goto L325514;
  #L325510.  v0:= 1I;
  #L325512.  goto L325516;
  #L325514.  v0:= 0I;
  #L325516.  return v0;
}
