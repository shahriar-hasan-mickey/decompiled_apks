record `g8.g` @kind class @AccessFlag PUBLIC_FINAL extends `l8.c` @kind class {
  `java.lang.String` `g8.g.A` @AccessFlag PRIVATE;
  `d8.k` `g8.g.B` @AccessFlag PRIVATE;
  `java.util.List` `g8.g.z` @AccessFlag PRIVATE_FINAL;
}
global `java.io.Writer` `@@g8.g.C` @AccessFlag PRIVATE_STATIC_FINAL;
global `d8.p` `@@g8.g.D` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lg8/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L326398.  v0:= new `g8.g$a`;
  #L32639c.  call `<init>`(v0) @signature `Lg8/g$a;.<init>:()V` @kind direct;
  #L3263a2.  `@@g8.g.C` @type ^`java.io.Writer` := v0 @kind object;
  #L3263a6.  v0:= new `d8.p`;
  #L3263aa.  v1:= "closed" @kind object;
  #L3263ae.  call `<init>`(v0, v1) @signature `Ld8/p;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3263b4.  `@@g8.g.D` @type ^`d8.p` := v0 @kind object;
  #L3263b8.  return @kind void;
}
procedure `void` `<init>`(`g8.g` v1 @kind this) @signature `Lg8/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3263cc.  v0:= `@@g8.g.C` @type ^`java.io.Writer` @kind object;
  #L3263d0.  call `<init>`(v1, v0) @signature `Ll8/c;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L3263d6.  v0:= new `java.util.ArrayList`;
  #L3263da.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3263e0.  v1.`g8.g.z` @type ^`java.util.List` := v0 @kind object;
  #L3263e4.  v0:= `@@d8.m.a` @type ^`d8.m` @kind object;
  #L3263e8.  v1.`g8.g.B` @type ^`d8.k` := v0 @kind object;
  #L3263ec.  return @kind void;
}
procedure `d8.k` `l0`(`g8.g` v2 @kind this) @signature `Lg8/g;.l0:()Ld8/k;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L326080.  v0:= v2.`g8.g.z` @type ^`java.util.List` @kind object;
  #L326084.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32608a.  v1:= temp;
  #L32608c.  v1:= v1 + -1;
  #L326090.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L326096.  v0:= temp @kind object;
  #L326098.  v0:= (`d8.k`) v0 @kind object;
  #L32609c.  return v0 @kind object;
}
procedure `void` `m0`(`g8.g` v2 @kind this, `d8.k` v3 @kind object) @signature `Lg8/g;.m0:(Ld8/k;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L326454.  v0:= v2.`g8.g.A` @type ^`java.lang.String` @kind object;
  #L326458.  if v0 == 0 then goto L326492;
  #L32645c.  call temp:= `p`(v3) @signature `Ld8/k;.p:()Z` @kind virtual;
  #L326462.  v0:= temp;
  #L326464.  if v0 == 0 then goto L326474;
  #L326468.  call temp:= `s`(v2) @signature `Ll8/c;.s:()Z` @kind virtual;
  #L32646e.  v0:= temp;
  #L326470.  if v0 == 0 then goto L32648a;
  #L326474.  call temp:= `l0`(v2) @signature `Lg8/g;.l0:()Ld8/k;` @kind direct;
  #L32647a.  v0:= temp @kind object;
  #L32647c.  v0:= (`d8.n`) v0 @kind object;
  #L326480.  v1:= v2.`g8.g.A` @type ^`java.lang.String` @kind object;
  #L326484.  call `G`(v0, v1, v3) @signature `Ld8/n;.G:(Ljava/lang/String;Ld8/k;)V` @kind virtual;
  #L32648a.  v3:= 0I;
  #L32648c.  v2.`g8.g.A` @type ^`java.lang.String` := v3 @kind object;
  #L326490.  goto L3264c2;
  #L326492.  v0:= v2.`g8.g.z` @type ^`java.util.List` @kind object;
  #L326496.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L32649c.  v0:= temp;
  #L32649e.  if v0 == 0 then goto L3264a8;
  #L3264a2.  v2.`g8.g.B` @type ^`d8.k` := v3 @kind object;
  #L3264a6.  goto L3264c2;
  #L3264a8.  call temp:= `l0`(v2) @signature `Lg8/g;.l0:()Ld8/k;` @kind direct;
  #L3264ae.  v0:= temp @kind object;
  #L3264b0.  v1:= instanceof @variable v0 @type ^`d8.h` @kind boolean;
  #L3264b4.  if v1 == 0 then goto L3264c4;
  #L3264b8.  v0:= (`d8.h`) v0 @kind object;
  #L3264bc.  call `G`(v0, v3) @signature `Ld8/h;.G:(Ld8/k;)V` @kind virtual;
  #L3264c2.  return @kind void;
  #L3264c4.  v3:= new `java.lang.IllegalStateException`;
  #L3264c8.  call `<init>`(v3) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3264ce.  throw v3;
}
procedure `l8.c` `E`(`g8.g` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lg8/g;.E:(Ljava/lang/String;)Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3261d8.  v0:= "name == null" @kind object;
  #L3261dc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3261e2.  v0:= v1.`g8.g.z` @type ^`java.util.List` @kind object;
  #L3261e6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3261ec.  v0:= temp;
  #L3261ee.  if v0 != 0 then goto L32621c;
  #L3261f2.  v0:= v1.`g8.g.A` @type ^`java.lang.String` @kind object;
  #L3261f6.  if v0 != 0 then goto L32621c;
  #L3261fa.  call temp:= `l0`(v1) @signature `Lg8/g;.l0:()Ld8/k;` @kind direct;
  #L326200.  v0:= temp @kind object;
  #L326202.  v0:= instanceof @variable v0 @type ^`d8.n` @kind boolean;
  #L326206.  if v0 == 0 then goto L326210;
  #L32620a.  v1.`g8.g.A` @type ^`java.lang.String` := v2 @kind object;
  #L32620e.  return v1 @kind object;
  #L326210.  v2:= new `java.lang.IllegalStateException`;
  #L326214.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L32621a.  throw v2;
  #L32621c.  v2:= new `java.lang.IllegalStateException`;
  #L326220.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L326226.  throw v2;
}
procedure `l8.c` `J`(`g8.g` v1 @kind this) @signature `Lg8/g;.J:()Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L326238.  v0:= `@@d8.m.a` @type ^`d8.m` @kind object;
  #L32623c.  call `m0`(v1, v0) @signature `Lg8/g;.m0:(Ld8/k;)V` @kind direct;
  #L326242.  return v1 @kind object;
}
procedure `void` `close`(`g8.g` v2 @kind this) @signature `Lg8/g;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L326400.  v0:= v2.`g8.g.z` @type ^`java.util.List` @kind object;
  #L326404.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L32640a.  v0:= temp;
  #L32640c.  if v0 == 0 then goto L326420;
  #L326410.  v0:= v2.`g8.g.z` @type ^`java.util.List` @kind object;
  #L326414.  v1:= `@@g8.g.D` @type ^`d8.p` @kind object;
  #L326418.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32641e.  return @kind void;
  #L326420.  v0:= new `java.io.IOException`;
  #L326424.  v1:= "Incomplete document" @kind object;
  #L326428.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32642e.  throw v0;
}
procedure `l8.c` `e`(`g8.g` v2 @kind this) @signature `Lg8/g;.e:()Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3260b0.  v0:= new `d8.h`;
  #L3260b4.  call `<init>`(v0) @signature `Ld8/h;.<init>:()V` @kind direct;
  #L3260ba.  call `m0`(v2, v0) @signature `Lg8/g;.m0:(Ld8/k;)V` @kind direct;
  #L3260c0.  v1:= v2.`g8.g.z` @type ^`java.util.List` @kind object;
  #L3260c4.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3260ca.  return v2 @kind object;
}
procedure `l8.c` `e0`(`g8.g` v1 @kind this, `long` v2 ) @signature `Lg8/g;.e0:(J)Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32636c.  v0:= new `d8.p`;
  #L326370.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L326376.  v2:= temp @kind object;
  #L326378.  call `<init>`(v0, v2) @signature `Ld8/p;.<init>:(Ljava/lang/Number;)V` @kind direct;
  #L32637e.  call `m0`(v1, v0) @signature `Lg8/g;.m0:(Ld8/k;)V` @kind direct;
  #L326384.  return v1 @kind object;
}
procedure `l8.c` `f0`(`g8.g` v1 @kind this, `java.lang.Boolean` v2 @kind object) @signature `Lg8/g;.f0:(Ljava/lang/Boolean;)Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L326280.  if v2 != 0 then goto L32628e;
  #L326284.  call temp:= `J`(v1) @signature `Lg8/g;.J:()Ll8/c;` @kind virtual;
  #L32628a.  v2:= temp @kind object;
  #L32628c.  return v2 @kind object;
  #L32628e.  v0:= new `d8.p`;
  #L326292.  call `<init>`(v0, v2) @signature `Ld8/p;.<init>:(Ljava/lang/Boolean;)V` @kind direct;
  #L326298.  call `m0`(v1, v0) @signature `Lg8/g;.m0:(Ld8/k;)V` @kind direct;
  #L32629e.  return v1 @kind object;
}
procedure `void` `flush`(`g8.g` v0 @kind this) @signature `Lg8/g;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L326440.  return @kind void;
}
procedure `l8.c` `g0`(`g8.g` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Lg8/g;.g0:(Ljava/lang/Number;)Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3262b0.  if v4 != 0 then goto L3262be;
  #L3262b4.  call temp:= `J`(v3) @signature `Lg8/g;.J:()Ll8/c;` @kind virtual;
  #L3262ba.  v4:= temp @kind object;
  #L3262bc.  return v4 @kind object;
  #L3262be.  call temp:= `x`(v3) @signature `Ll8/c;.x:()Z` @kind virtual;
  #L3262c4.  v0:= temp;
  #L3262c6.  if v0 != 0 then goto L32631a;
  #L3262ca.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L3262d0.  v0:= temp @kind wide;
  #L3262d2.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L3262d8.  v2:= temp;
  #L3262da.  if v2 != 0 then goto L3262ec;
  #L3262de.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L3262e4.  v0:= temp;
  #L3262e6.  if v0 != 0 then goto L3262ec;
  #L3262ea.  goto L32631a;
  #L3262ec.  v0:= new `java.lang.IllegalArgumentException`;
  #L3262f0.  v1:= new `java.lang.StringBuilder`;
  #L3262f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3262fa.  v2:= "JSON forbids NaN and infinities: " @kind object;
  #L3262fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L326304.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32630a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L326310.  v4:= temp @kind object;
  #L326312.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L326318.  throw v0;
  #L32631a.  v0:= new `d8.p`;
  #L32631e.  call `<init>`(v0, v4) @signature `Ld8/p;.<init>:(Ljava/lang/Number;)V` @kind direct;
  #L326324.  call `m0`(v3, v0) @signature `Lg8/g;.m0:(Ld8/k;)V` @kind direct;
  #L32632a.  return v3 @kind object;
}
procedure `l8.c` `h`(`g8.g` v2 @kind this) @signature `Lg8/g;.h:()Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3260dc.  v0:= new `d8.n`;
  #L3260e0.  call `<init>`(v0) @signature `Ld8/n;.<init>:()V` @kind direct;
  #L3260e6.  call `m0`(v2, v0) @signature `Lg8/g;.m0:(Ld8/k;)V` @kind direct;
  #L3260ec.  v1:= v2.`g8.g.z` @type ^`java.util.List` @kind object;
  #L3260f0.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3260f6.  return v2 @kind object;
}
procedure `l8.c` `h0`(`g8.g` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lg8/g;.h0:(Ljava/lang/String;)Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32633c.  if v2 != 0 then goto L32634a;
  #L326340.  call temp:= `J`(v1) @signature `Lg8/g;.J:()Ll8/c;` @kind virtual;
  #L326346.  v2:= temp @kind object;
  #L326348.  return v2 @kind object;
  #L32634a.  v0:= new `d8.p`;
  #L32634e.  call `<init>`(v0, v2) @signature `Ld8/p;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L326354.  call `m0`(v1, v0) @signature `Lg8/g;.m0:(Ld8/k;)V` @kind direct;
  #L32635a.  return v1 @kind object;
}
procedure `l8.c` `i0`(`g8.g` v1 @kind this, `boolean` v2 ) @signature `Lg8/g;.i0:(Z)Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L326254.  v0:= new `d8.p`;
  #L326258.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L32625e.  v2:= temp @kind object;
  #L326260.  call `<init>`(v0, v2) @signature `Ld8/p;.<init>:(Ljava/lang/Boolean;)V` @kind direct;
  #L326266.  call `m0`(v1, v0) @signature `Lg8/g;.m0:(Ld8/k;)V` @kind direct;
  #L32626c.  return v1 @kind object;
}
procedure `l8.c` `k`(`g8.g` v2 @kind this) @signature `Lg8/g;.k:()Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L326108.  v0:= v2.`g8.g.z` @type ^`java.util.List` @kind object;
  #L32610c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L326112.  v0:= temp;
  #L326114.  if v0 != 0 then goto L326154;
  #L326118.  v0:= v2.`g8.g.A` @type ^`java.lang.String` @kind object;
  #L32611c.  if v0 != 0 then goto L326154;
  #L326120.  call temp:= `l0`(v2) @signature `Lg8/g;.l0:()Ld8/k;` @kind direct;
  #L326126.  v0:= temp @kind object;
  #L326128.  v0:= instanceof @variable v0 @type ^`d8.h` @kind boolean;
  #L32612c.  if v0 == 0 then goto L326148;
  #L326130.  v0:= v2.`g8.g.z` @type ^`java.util.List` @kind object;
  #L326134.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32613a.  v1:= temp;
  #L32613c.  v1:= v1 + -1;
  #L326140.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L326146.  return v2 @kind object;
  #L326148.  v0:= new `java.lang.IllegalStateException`;
  #L32614c.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L326152.  throw v0;
  #L326154.  v0:= new `java.lang.IllegalStateException`;
  #L326158.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L32615e.  throw v0;
}
procedure `d8.k` `k0`(`g8.g` v3 @kind this) @signature `Lg8/g;.k0:()Ld8/k;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L326028.  v0:= v3.`g8.g.z` @type ^`java.util.List` @kind object;
  #L32602c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L326032.  v0:= temp;
  #L326034.  if v0 == 0 then goto L32603e;
  #L326038.  v0:= v3.`g8.g.B` @type ^`d8.k` @kind object;
  #L32603c.  return v0 @kind object;
  #L32603e.  v0:= new `java.lang.IllegalStateException`;
  #L326042.  v1:= new `java.lang.StringBuilder`;
  #L326046.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32604c.  v2:= "Expected one JSON element but was " @kind object;
  #L326050.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L326056.  v2:= v3.`g8.g.z` @type ^`java.util.List` @kind object;
  #L32605a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L326060.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L326066.  v1:= temp @kind object;
  #L326068.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32606e.  throw v0;
}
procedure `l8.c` `o`(`g8.g` v2 @kind this) @signature `Lg8/g;.o:()Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L326170.  v0:= v2.`g8.g.z` @type ^`java.util.List` @kind object;
  #L326174.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L32617a.  v0:= temp;
  #L32617c.  if v0 != 0 then goto L3261bc;
  #L326180.  v0:= v2.`g8.g.A` @type ^`java.lang.String` @kind object;
  #L326184.  if v0 != 0 then goto L3261bc;
  #L326188.  call temp:= `l0`(v2) @signature `Lg8/g;.l0:()Ld8/k;` @kind direct;
  #L32618e.  v0:= temp @kind object;
  #L326190.  v0:= instanceof @variable v0 @type ^`d8.n` @kind boolean;
  #L326194.  if v0 == 0 then goto L3261b0;
  #L326198.  v0:= v2.`g8.g.z` @type ^`java.util.List` @kind object;
  #L32619c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3261a2.  v1:= temp;
  #L3261a4.  v1:= v1 + -1;
  #L3261a8.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L3261ae.  return v2 @kind object;
  #L3261b0.  v0:= new `java.lang.IllegalStateException`;
  #L3261b4.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3261ba.  throw v0;
  #L3261bc.  v0:= new `java.lang.IllegalStateException`;
  #L3261c0.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3261c6.  throw v0;
}
