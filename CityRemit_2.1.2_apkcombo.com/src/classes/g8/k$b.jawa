record `g8.k$b` @kind class @AccessFlag PUBLIC_FINAL extends `d8.w` @kind class {
  `f8.i` `g8.k$b.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `g8.k$b.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`g8.k$b` v0 @kind this, `f8.i` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Lg8/k$b;.<init>:(Lf8/i;Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3270d4.  call `<init>`(v0) @signature `Ld8/w;.<init>:()V` @kind direct;
  #L3270da.  v0.`g8.k$b.a` @type ^`f8.i` := v1 @kind object;
  #L3270de.  v0.`g8.k$b.b` @type ^`java.util.Map` := v2 @kind object;
  #L3270e2.  return @kind void;
}
procedure `java.lang.Object` `c`(`g8.k$b` v3 @kind this, `l8.a` v4 @kind object) @signature `Lg8/k$b;.c:(Ll8/a;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L327020.  call temp:= `f0`(v4) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L327026.  v0:= temp @kind object;
  #L327028.  v1:= `@@l8.b.w` @type ^`l8.b` @kind object;
  #L32702c.  if v0 != v1 then goto L32703a;
  #L327030.  call `b0`(v4) @signature `Ll8/a;.b0:()V` @kind virtual;
  #L327036.  v4:= 0I;
  #L327038.  return v4 @kind object;
  #L32703a.  v0:= v3.`g8.k$b.a` @type ^`f8.i` @kind object;
  #L32703e.  call temp:= `a`(v0) @signature `Lf8/i;.a:()Ljava/lang/Object;` @kind interface;
  #L327044.  v0:= temp @kind object;
  #L327046.  call `c`(v4) @signature `Ll8/a;.c:()V` @kind virtual;
  #L32704c.  call temp:= `x`(v4) @signature `Ll8/a;.x:()Z` @kind virtual;
  #L327052.  v1:= temp;
  #L327054.  if v1 == 0 then goto L32708e;
  #L327058.  call temp:= `S`(v4) @signature `Ll8/a;.S:()Ljava/lang/String;` @kind virtual;
  #L32705e.  v1:= temp @kind object;
  #L327060.  v2:= v3.`g8.k$b.b` @type ^`java.util.Map` @kind object;
  #L327064.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L32706a.  v1:= temp @kind object;
  #L32706c.  v1:= (`g8.k$c`) v1 @kind object;
  #L327070.  if v1 == 0 then goto L327086;
  #L327074.  v2:= v1.`g8.k$c.c` @type ^`boolean` @kind boolean;
  #L327078.  if v2 != 0 then goto L32707e;
  #L32707c.  goto L327086;
  #L32707e.  call `a`(v1, v4, v0) @signature `Lg8/k$c;.a:(Ll8/a;Ljava/lang/Object;)V` @kind virtual;
  #L327084.  goto L32704c;
  #L327086.  call `p0`(v4) @signature `Ll8/a;.p0:()V` @kind virtual;
  #L32708c.  goto L32704c;
  #L32708e.  call `o`(v4) @signature `Ll8/a;.o:()V` @kind virtual;
  #L327094.  return v0 @kind object;
  #L327096.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L327098.  v0:= new `java.lang.AssertionError`;
  #L32709c.  call `<init>`(v0, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3270a2.  throw v0;
  #L3270a4.  v4:= Exception @type ^`java.lang.IllegalStateException` @kind object;
  #L3270a6.  v0:= new `d8.s`;
  #L3270aa.  call `<init>`(v0, v4) @signature `Ld8/s;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3270b0.  throw v0;
  catch `java.lang.IllegalStateException` @[L327046..L32708c] goto L3270a4;
  catch `java.lang.IllegalAccessException` @[L327046..L32708c] goto L327096;
}
procedure `void` `e`(`g8.k$b` v3 @kind this, `l8.c` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lg8/k$b;.e:(Ll8/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3270f4.  if v5 != 0 then goto L327100;
  #L3270f8.  call temp:= `J`(v4) @signature `Ll8/c;.J:()Ll8/c;` @kind virtual;
  #L3270fe.  return @kind void;
  #L327100.  call temp:= `h`(v4) @signature `Ll8/c;.h:()Ll8/c;` @kind virtual;
  #L327106.  v0:= v3.`g8.k$b.b` @type ^`java.util.Map` @kind object;
  #L32710a.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L327110.  v0:= temp @kind object;
  #L327112.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L327118.  v0:= temp @kind object;
  #L32711a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L327120.  v1:= temp;
  #L327122.  if v1 == 0 then goto L327150;
  #L327126.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L32712c.  v1:= temp @kind object;
  #L32712e.  v1:= (`g8.k$c`) v1 @kind object;
  #L327132.  call temp:= `c`(v1, v5) @signature `Lg8/k$c;.c:(Ljava/lang/Object;)Z` @kind virtual;
  #L327138.  v2:= temp;
  #L32713a.  if v2 == 0 then goto L32711a;
  #L32713e.  v2:= v1.`g8.k$c.a` @type ^`java.lang.String` @kind object;
  #L327142.  call temp:= `E`(v4, v2) @signature `Ll8/c;.E:(Ljava/lang/String;)Ll8/c;` @kind virtual;
  #L327148.  call `b`(v1, v4, v5) @signature `Lg8/k$c;.b:(Ll8/c;Ljava/lang/Object;)V` @kind virtual;
  #L32714e.  goto L32711a;
  #L327150.  call temp:= `o`(v4) @signature `Ll8/c;.o:()Ll8/c;` @kind virtual;
  #L327156.  return @kind void;
  #L327158.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L32715a.  v5:= new `java.lang.AssertionError`;
  #L32715e.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L327164.  throw v5;
  catch `java.lang.IllegalAccessException` @[L327106..L32714e] goto L327158;
}
