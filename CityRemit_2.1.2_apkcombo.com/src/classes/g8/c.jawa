record `g8.c` @kind class @AccessFlag PUBLIC_FINAL extends `d8.w` @kind class {
  `java.util.List` `g8.c.a` @AccessFlag PRIVATE_FINAL;
}
global `d8.x` `@@g8.c.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lg8/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L324e1c.  v0:= new `g8.c$a`;
  #L324e20.  call `<init>`(v0) @signature `Lg8/c$a;.<init>:()V` @kind direct;
  #L324e26.  `@@g8.c.b` @type ^`d8.x` := v0 @kind object;
  #L324e2a.  return @kind void;
}
procedure `void` `<init>`(`g8.c` v4 @kind this) @signature `Lg8/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L324e3c.  call `<init>`(v4) @signature `Ld8/w;.<init>:()V` @kind direct;
  #L324e42.  v0:= new `java.util.ArrayList`;
  #L324e46.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L324e4c.  v4.`g8.c.a` @type ^`java.util.List` := v0 @kind object;
  #L324e50.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L324e54.  v2:= 2I;
  #L324e56.  call temp:= `getDateTimeInstance`(v2, v2, v1) @signature `Ljava/text/DateFormat;.getDateTimeInstance:(IILjava/util/Locale;)Ljava/text/DateFormat;` @kind static;
  #L324e5c.  v3:= temp @kind object;
  #L324e5e.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L324e64.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L324e6a.  v3:= temp @kind object;
  #L324e6c.  call temp:= `equals`(v3, v1) @signature `Ljava/util/Locale;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L324e72.  v1:= temp;
  #L324e74.  if v1 != 0 then goto L324e86;
  #L324e78.  call temp:= `getDateTimeInstance`(v2, v2) @signature `Ljava/text/DateFormat;.getDateTimeInstance:(II)Ljava/text/DateFormat;` @kind static;
  #L324e7e.  v1:= temp @kind object;
  #L324e80.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L324e86.  call temp:= `e`() @signature `Lf8/e;.e:()Z` @kind static;
  #L324e8c.  v1:= temp;
  #L324e8e.  if v1 == 0 then goto L324ea0;
  #L324e92.  call temp:= `c`(v2, v2) @signature `Lf8/j;.c:(II)Ljava/text/DateFormat;` @kind static;
  #L324e98.  v1:= temp @kind object;
  #L324e9a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L324ea0.  return @kind void;
}
procedure `java.util.Date` `f`(`g8.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lg8/c;.f:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L324d40.  @monitorenter v2
  #L324d42.  v0:= v2.`g8.c.a` @type ^`java.util.List` @kind object;
  #L324d46.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L324d4c.  v0:= temp @kind object;
  #L324d4e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L324d54.  v1:= temp;
  #L324d56.  if v1 == 0 then goto L324d72;
  #L324d5a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L324d60.  v1:= temp @kind object;
  #L324d62.  v1:= (`java.text.DateFormat`) v1 @kind object;
  #L324d66.  call temp:= `parse`(v1, v3) @signature `Ljava/text/DateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L324d6c.  v3:= temp @kind object;
  #L324d6e.  @monitorexit v2
  #L324d70.  return v3 @kind object;
  #L324d72.  v0:= new `java.text.ParsePosition`;
  #L324d76.  v1:= 0I;
  #L324d78.  call `<init>`(v0, v1) @signature `Ljava/text/ParsePosition;.<init>:(I)V` @kind direct;
  #L324d7e.  call temp:= `c`(v3, v0) @signature `Lh8/a;.c:(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/util/Date;` @kind static;
  #L324d84.  v3:= temp @kind object;
  #L324d86.  @monitorexit v2
  #L324d88.  return v3 @kind object;
  #L324d8a.  v0:= Exception @type ^`java.text.ParseException` @kind object;
  #L324d8c.  v1:= new `d8.s`;
  #L324d90.  call `<init>`(v1, v3, v0) @signature `Ld8/s;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L324d96.  throw v1;
  #L324d98.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L324d9a.  @monitorexit v2
  #L324d9c.  throw v3;
  catch `java.lang.Throwable` @[L324d42..L324d66] goto L324d98;
  catch `java.text.ParseException` @[L324d66..L324d6e] goto L324d4e;
  catch `java.lang.Throwable` @[L324d66..L324d6e] goto L324d98;
  catch `java.text.ParseException` @[L324d72..L324d86] goto L324d8a;
  catch `java.lang.Throwable` @[L324d72..L324d86] goto L324d98;
  catch `java.lang.Throwable` @[L324d8c..L324d98] goto L324d98;
}
procedure `java.lang.Object` `c`(`g8.c` v0 @kind this, `l8.a` v1 @kind object) @signature `Lg8/c;.c:(Ll8/a;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L324d24.  call temp:= `g`(v0, v1) @signature `Lg8/c;.g:(Ll8/a;)Ljava/util/Date;` @kind virtual;
  #L324d2a.  v1:= temp @kind object;
  #L324d2c.  return v1 @kind object;
}
procedure `void` `e`(`g8.c` v0 @kind this, `l8.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lg8/c;.e:(Ll8/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L324eb4.  v2:= (`java.util.Date`) v2 @kind object;
  #L324eb8.  call `h`(v0, v1, v2) @signature `Lg8/c;.h:(Ll8/c;Ljava/util/Date;)V` @kind virtual;
  #L324ebe.  return @kind void;
}
procedure `java.util.Date` `g`(`g8.c` v2 @kind this, `l8.a` v3 @kind object) @signature `Lg8/c;.g:(Ll8/a;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L324de0.  call temp:= `f0`(v3) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L324de6.  v0:= temp @kind object;
  #L324de8.  v1:= `@@l8.b.w` @type ^`l8.b` @kind object;
  #L324dec.  if v0 != v1 then goto L324dfa;
  #L324df0.  call `b0`(v3) @signature `Ll8/a;.b0:()V` @kind virtual;
  #L324df6.  v3:= 0I;
  #L324df8.  return v3 @kind object;
  #L324dfa.  call temp:= `d0`(v3) @signature `Ll8/a;.d0:()Ljava/lang/String;` @kind virtual;
  #L324e00.  v3:= temp @kind object;
  #L324e02.  call temp:= `f`(v2, v3) @signature `Lg8/c;.f:(Ljava/lang/String;)Ljava/util/Date;` @kind direct;
  #L324e08.  v3:= temp @kind object;
  #L324e0a.  return v3 @kind object;
}
procedure `void` `h`(`g8.c` v2 @kind this, `l8.c` v3 @kind object, `java.util.Date` v4 @kind object) @signature `Lg8/c;.h:(Ll8/c;Ljava/util/Date;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L324ed0.  @monitorenter v2
  #L324ed2.  if v4 != 0 then goto L324ee0;
  #L324ed6.  call temp:= `J`(v3) @signature `Ll8/c;.J:()Ll8/c;` @kind virtual;
  #L324edc.  @monitorexit v2
  #L324ede.  return @kind void;
  #L324ee0.  v0:= v2.`g8.c.a` @type ^`java.util.List` @kind object;
  #L324ee4.  v1:= 0I;
  #L324ee6.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L324eec.  v0:= temp @kind object;
  #L324eee.  v0:= (`java.text.DateFormat`) v0 @kind object;
  #L324ef2.  call temp:= `format`(v0, v4) @signature `Ljava/text/DateFormat;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L324ef8.  v4:= temp @kind object;
  #L324efa.  call temp:= `h0`(v3, v4) @signature `Ll8/c;.h0:(Ljava/lang/String;)Ll8/c;` @kind virtual;
  #L324f00.  @monitorexit v2
  #L324f02.  return @kind void;
  #L324f04.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L324f06.  @monitorexit v2
  #L324f08.  throw v3;
  catch `java.lang.Throwable` @[L324ed6..L324edc] goto L324f04;
  catch `java.lang.Throwable` @[L324ee0..L324f00] goto L324f04;
}
