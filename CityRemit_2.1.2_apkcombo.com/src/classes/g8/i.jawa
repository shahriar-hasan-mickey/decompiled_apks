record `g8.i` @kind class @AccessFlag PUBLIC_FINAL extends `d8.w` @kind class {
  `d8.v` `g8.i.a` @AccessFlag PRIVATE_FINAL;
}
global `d8.x` `@@g8.i.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lg8/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L326b98.  v0:= `@@d8.u.p` @type ^`d8.u` @kind object;
  #L326b9c.  call temp:= `g`(v0) @signature `Lg8/i;.g:(Ld8/v;)Ld8/x;` @kind static;
  #L326ba2.  v0:= temp @kind object;
  #L326ba4.  `@@g8.i.b` @type ^`d8.x` := v0 @kind object;
  #L326ba8.  return @kind void;
}
procedure `void` `<init>`(`g8.i` v0 @kind this, `d8.v` v1 @kind object) @signature `Lg8/i;.<init>:(Ld8/v;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L326bbc.  call `<init>`(v0) @signature `Ld8/w;.<init>:()V` @kind direct;
  #L326bc2.  v0.`g8.i.a` @type ^`d8.v` := v1 @kind object;
  #L326bc6.  return @kind void;
}
procedure `d8.x` `f`(`d8.v` v1 @kind object) @signature `Lg8/i;.f:(Ld8/v;)Ld8/x;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L326aa8.  v0:= `@@d8.u.p` @type ^`d8.u` @kind object;
  #L326aac.  if v1 != v0 then goto L326ab6;
  #L326ab0.  v1:= `@@g8.i.b` @type ^`d8.x` @kind object;
  #L326ab4.  return v1 @kind object;
  #L326ab6.  call temp:= `g`(v1) @signature `Lg8/i;.g:(Ld8/v;)Ld8/x;` @kind static;
  #L326abc.  v1:= temp @kind object;
  #L326abe.  return v1 @kind object;
}
procedure `d8.x` `g`(`d8.v` v1 @kind object) @signature `Lg8/i;.g:(Ld8/v;)Ld8/x;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L326ad0.  v0:= new `g8.i`;
  #L326ad4.  call `<init>`(v0, v1) @signature `Lg8/i;.<init>:(Ld8/v;)V` @kind direct;
  #L326ada.  v1:= new `g8.i$a`;
  #L326ade.  call `<init>`(v1, v0) @signature `Lg8/i$a;.<init>:(Lg8/i;)V` @kind direct;
  #L326ae4.  return v1 @kind object;
}
procedure `java.lang.Object` `c`(`g8.i` v0 @kind this, `l8.a` v1 @kind object) @signature `Lg8/i;.c:(Ll8/a;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L326b7c.  call temp:= `h`(v0, v1) @signature `Lg8/i;.h:(Ll8/a;)Ljava/lang/Number;` @kind virtual;
  #L326b82.  v1:= temp @kind object;
  #L326b84.  return v1 @kind object;
}
procedure `void` `e`(`g8.i` v0 @kind this, `l8.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lg8/i;.e:(Ll8/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L326bf0.  v2:= (`java.lang.Number`) v2 @kind object;
  #L326bf4.  call `i`(v0, v1, v2) @signature `Lg8/i;.i:(Ll8/c;Ljava/lang/Number;)V` @kind virtual;
  #L326bfa.  return @kind void;
}
procedure `java.lang.Number` `h`(`g8.i` v3 @kind this, `l8.a` v4 @kind object) @signature `Lg8/i;.h:(Ll8/a;)Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L326af8.  call temp:= `f0`(v4) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L326afe.  v0:= temp @kind object;
  #L326b00.  v1:= `@@g8.i$b.a` @type ^`int`[] @kind object;
  #L326b04.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L326b0a.  v2:= temp;
  #L326b0c.  v1:= v1[v2];
  #L326b10.  v2:= 1I;
  #L326b12.  if v1 == v2 then goto L326b60;
  #L326b16.  v2:= 2I;
  #L326b18.  if v1 == v2 then goto L326b52;
  #L326b1c.  v2:= 3I;
  #L326b1e.  if v1 != v2 then goto L326b24;
  #L326b22.  goto L326b52;
  #L326b24.  v4:= new `d8.s`;
  #L326b28.  v1:= new `java.lang.StringBuilder`;
  #L326b2c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L326b32.  v2:= "Expecting number, got: " @kind object;
  #L326b36.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L326b3c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L326b42.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L326b48.  v0:= temp @kind object;
  #L326b4a.  call `<init>`(v4, v0) @signature `Ld8/s;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L326b50.  throw v4;
  #L326b52.  v0:= v3.`g8.i.a` @type ^`d8.v` @kind object;
  #L326b56.  call temp:= `c`(v0, v4) @signature `Ld8/v;.c:(Ll8/a;)Ljava/lang/Number;` @kind interface;
  #L326b5c.  v4:= temp @kind object;
  #L326b5e.  return v4 @kind object;
  #L326b60.  call `b0`(v4) @signature `Ll8/a;.b0:()V` @kind virtual;
  #L326b66.  v4:= 0I;
  #L326b68.  return v4 @kind object;
}
procedure `void` `i`(`g8.i` v0 @kind this, `l8.c` v1 @kind object, `java.lang.Number` v2 @kind object) @signature `Lg8/i;.i:(Ll8/c;Ljava/lang/Number;)V` @AccessFlag PUBLIC {
    temp;

  #L326bd8.  call temp:= `g0`(v1, v2) @signature `Ll8/c;.g0:(Ljava/lang/Number;)Ll8/c;` @kind virtual;
  #L326bde.  return @kind void;
}
