record `g8.a$a` @kind class @AccessFlag  extends `d8.x` @kind interface {
}
procedure `void` `<init>`(`g8.a$a` v0 @kind this) @signature `Lg8/a$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3249f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3249fe.  return @kind void;
}
procedure `d8.w` `create`(`g8.a$a` v2 @kind this, `d8.e` v3 @kind object, `k8.a` v4 @kind object) @signature `Lg8/a$a;.create:(Ld8/e;Lk8/a;)Ld8/w;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32498c.  call temp:= `e`(v4) @signature `Lk8/a;.e:()Ljava/lang/reflect/Type;` @kind virtual;
  #L324992.  v4:= temp @kind object;
  #L324994.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L324998.  if v0 != 0 then goto L3249ba;
  #L32499c.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L3249a0.  if v0 == 0 then goto L3249b6;
  #L3249a4.  v0:= v4 @kind object;
  #L3249a6.  v0:= (`java.lang.Class`) v0 @kind object;
  #L3249aa.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L3249b0.  v0:= temp;
  #L3249b2.  if v0 != 0 then goto L3249ba;
  #L3249b6.  v3:= 0I;
  #L3249b8.  return v3 @kind object;
  #L3249ba.  call temp:= `g`(v4) @signature `Lf8/b;.g:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L3249c0.  v4:= temp @kind object;
  #L3249c2.  call temp:= `b`(v4) @signature `Lk8/a;.b:(Ljava/lang/reflect/Type;)Lk8/a;` @kind static;
  #L3249c8.  v0:= temp @kind object;
  #L3249ca.  call temp:= `k`(v3, v0) @signature `Ld8/e;.k:(Lk8/a;)Ld8/w;` @kind virtual;
  #L3249d0.  v0:= temp @kind object;
  #L3249d2.  v1:= new `g8.a`;
  #L3249d6.  call temp:= `k`(v4) @signature `Lf8/b;.k:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L3249dc.  v4:= temp @kind object;
  #L3249de.  call `<init>`(v1, v3, v0, v4) @signature `Lg8/a;.<init>:(Ld8/e;Ld8/w;Ljava/lang/Class;)V` @kind direct;
  #L3249e4.  return v1 @kind object;
}
