record `g8.k$a` @kind class @AccessFlag  extends `g8.k$c` @kind class {
  `java.lang.reflect.Field` `g8.k$a.d` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `g8.k$a.e` @AccessFlag FINAL_SYNTHETIC;
  `d8.w` `g8.k$a.f` @AccessFlag FINAL_SYNTHETIC;
  `d8.e` `g8.k$a.g` @AccessFlag FINAL_SYNTHETIC;
  `k8.a` `g8.k$a.h` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `g8.k$a.i` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`g8.k$a` v0 @kind this, `g8.k` v1 @kind object, `java.lang.String` v2 @kind object, `boolean` v3 , `boolean` v4 , `java.lang.reflect.Field` v5 @kind object, `boolean` v6 , `d8.w` v7 @kind object, `d8.e` v8 @kind object, `k8.a` v9 @kind object, `boolean` v10 ) @signature `Lg8/k$a;.<init>:(Lg8/k;Ljava/lang/String;ZZLjava/lang/reflect/Field;ZLd8/w;Ld8/e;Lk8/a;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L326f6c.  v0.`g8.k$a.d` @type ^`java.lang.reflect.Field` := v5 @kind object;
  #L326f70.  v0.`g8.k$a.e` @type ^`boolean` := v6 @kind boolean;
  #L326f74.  v0.`g8.k$a.f` @type ^`d8.w` := v7 @kind object;
  #L326f78.  v0.`g8.k$a.g` @type ^`d8.e` := v8 @kind object;
  #L326f7c.  v0.`g8.k$a.h` @type ^`k8.a` := v9 @kind object;
  #L326f80.  v0.`g8.k$a.i` @type ^`boolean` := v10 @kind boolean;
  #L326f84.  call `<init>`(v0, v2, v3, v4) @signature `Lg8/k$c;.<init>:(Ljava/lang/String;ZZ)V` @kind direct;
  #L326f8a.  return @kind void;
}
procedure `void` `a`(`g8.k$a` v1 @kind this, `l8.a` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lg8/k$a;.a:(Ll8/a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L326f9c.  v0:= v1.`g8.k$a.f` @type ^`d8.w` @kind object;
  #L326fa0.  call temp:= `c`(v0, v2) @signature `Ld8/w;.c:(Ll8/a;)Ljava/lang/Object;` @kind virtual;
  #L326fa6.  v2:= temp @kind object;
  #L326fa8.  if v2 != 0 then goto L326fb4;
  #L326fac.  v0:= v1.`g8.k$a.i` @type ^`boolean` @kind boolean;
  #L326fb0.  if v0 != 0 then goto L326fbe;
  #L326fb4.  v0:= v1.`g8.k$a.d` @type ^`java.lang.reflect.Field` @kind object;
  #L326fb8.  call `set`(v0, v3, v2) @signature `Ljava/lang/reflect/Field;.set:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L326fbe.  return @kind void;
}
procedure `void` `b`(`g8.k$a` v4 @kind this, `l8.c` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lg8/k$a;.b:(Ll8/c;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L326fd0.  v0:= v4.`g8.k$a.d` @type ^`java.lang.reflect.Field` @kind object;
  #L326fd4.  call temp:= `get`(v0, v6) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L326fda.  v6:= temp @kind object;
  #L326fdc.  v0:= v4.`g8.k$a.e` @type ^`boolean` @kind boolean;
  #L326fe0.  if v0 == 0 then goto L326fea;
  #L326fe4.  v0:= v4.`g8.k$a.f` @type ^`d8.w` @kind object;
  #L326fe8.  goto L327008;
  #L326fea.  v0:= new `g8.m`;
  #L326fee.  v1:= v4.`g8.k$a.g` @type ^`d8.e` @kind object;
  #L326ff2.  v2:= v4.`g8.k$a.f` @type ^`d8.w` @kind object;
  #L326ff6.  v3:= v4.`g8.k$a.h` @type ^`k8.a` @kind object;
  #L326ffa.  call temp:= `e`(v3) @signature `Lk8/a;.e:()Ljava/lang/reflect/Type;` @kind virtual;
  #L327000.  v3:= temp @kind object;
  #L327002.  call `<init>`(v0, v1, v2, v3) @signature `Lg8/m;.<init>:(Ld8/e;Ld8/w;Ljava/lang/reflect/Type;)V` @kind direct;
  #L327008.  call `e`(v0, v5, v6) @signature `Ld8/w;.e:(Ll8/c;Ljava/lang/Object;)V` @kind virtual;
  #L32700e.  return @kind void;
}
procedure `boolean` `c`(`g8.k$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lg8/k$a;.c:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L326f3c.  v0:= v2.`g8.k$c.b` @type ^`boolean` @kind boolean;
  #L326f40.  v1:= 0I;
  #L326f42.  if v0 != 0 then goto L326f48;
  #L326f46.  return v1;
  #L326f48.  v0:= v2.`g8.k$a.d` @type ^`java.lang.reflect.Field` @kind object;
  #L326f4c.  call temp:= `get`(v0, v3) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L326f52.  v0:= temp @kind object;
  #L326f54.  if v0 == v3 then goto L326f5a;
  #L326f58.  v1:= 1I;
  #L326f5a.  return v1;
}
