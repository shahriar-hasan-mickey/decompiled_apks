record `ha.d$c$a` @kind class @AccessFlag FINAL extends `ha.d$b` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `ha.d$c$a.a` @AccessFlag FINAL;
  `ha.d$c` `ha.d$c$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`ha.d$c$a` v1 @kind this, `ha.d$c` v2 @kind object) @signature `Lha/d$c$a;.<init>:(Lha/d$c;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L343a5c.  v1.`ha.d$c$a.b` @type ^`ha.d$c` := v2 @kind object;
  #L343a60.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L343a66.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L343a6a.  v0:= 0I;
  #L343a6c.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L343a72.  v1.`ha.d$c$a.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L343a76.  return @kind void;
}
procedure `void` `<init>`(`ha.d$c$a` v0 @kind this, `ha.d$c` v1 @kind object, `ha.d$a` v2 @kind object) @signature `Lha/d$c$a;.<init>:(Lha/d$c;Lha/d$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L343a88.  call `<init>`(v0, v1) @signature `Lha/d$c$a;.<init>:(Lha/d$c;)V` @kind direct;
  #L343a8e.  return @kind void;
}
procedure `void` `a`(`ha.d$c$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lha/d$c$a;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L343b84.  v0:= v3.`ha.d$c$a.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L343b88.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L343b8e.  v0:= temp;
  #L343b90.  if v0 != 0 then goto L343bec;
  #L343b94.  v0:= v3.`ha.d$c$a.b` @type ^`ha.d$c` @kind object;
  #L343b98.  call temp:= `b`(v0) @signature `Lha/d$c;.b:(Lha/d$c;)Ljava/util/concurrent/atomic/AtomicReference;` @kind static;
  #L343b9e.  v0:= temp @kind object;
  #L343ba0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L343ba6.  v0:= temp @kind object;
  #L343ba8.  if v0 == v3 then goto L343bae;
  #L343bac.  goto L343bec;
  #L343bae.  v0:= v3.`ha.d$c$a.b` @type ^`ha.d$c` @kind object;
  #L343bb2.  v0:= v0.`ha.d$c.c` @type ^`ha.d` @kind object;
  #L343bb6.  call temp:= `c`(v0) @signature `Lha/d;.c:(Lha/d;)Lha/c;` @kind static;
  #L343bbc.  v0:= temp @kind object;
  #L343bbe.  v1:= v3.`ha.d$c$a.b` @type ^`ha.d$c` @kind object;
  #L343bc2.  v1:= v1.`ha.d$c.c` @type ^`ha.d` @kind object;
  #L343bc6.  call temp:= `b`(v1) @signature `Lha/d;.b:(Lha/d;)Ljava/lang/String;` @kind static;
  #L343bcc.  v1:= temp @kind object;
  #L343bce.  v2:= v3.`ha.d$c$a.b` @type ^`ha.d$c` @kind object;
  #L343bd2.  v2:= v2.`ha.d$c.c` @type ^`ha.d` @kind object;
  #L343bd6.  call temp:= `a`(v2) @signature `Lha/d;.a:(Lha/d;)Lha/l;` @kind static;
  #L343bdc.  v2:= temp @kind object;
  #L343bde.  call temp:= `b`(v2, v4) @signature `Lha/l;.b:(Ljava/lang/Object;)Ljava/nio/ByteBuffer;` @kind interface;
  #L343be4.  v4:= temp @kind object;
  #L343be6.  call `d`(v0, v1, v4) @signature `Lha/c;.d:(Ljava/lang/String;Ljava/nio/ByteBuffer;)V` @kind interface;
  #L343bec.  return @kind void;
}
procedure `void` `b`(`ha.d$c$a` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lha/d$c$a;.b:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L343b08.  v0:= v3.`ha.d$c$a.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L343b0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L343b12.  v0:= temp;
  #L343b14.  if v0 != 0 then goto L343b70;
  #L343b18.  v0:= v3.`ha.d$c$a.b` @type ^`ha.d$c` @kind object;
  #L343b1c.  call temp:= `b`(v0) @signature `Lha/d$c;.b:(Lha/d$c;)Ljava/util/concurrent/atomic/AtomicReference;` @kind static;
  #L343b22.  v0:= temp @kind object;
  #L343b24.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L343b2a.  v0:= temp @kind object;
  #L343b2c.  if v0 == v3 then goto L343b32;
  #L343b30.  goto L343b70;
  #L343b32.  v0:= v3.`ha.d$c$a.b` @type ^`ha.d$c` @kind object;
  #L343b36.  v0:= v0.`ha.d$c.c` @type ^`ha.d` @kind object;
  #L343b3a.  call temp:= `c`(v0) @signature `Lha/d;.c:(Lha/d;)Lha/c;` @kind static;
  #L343b40.  v0:= temp @kind object;
  #L343b42.  v1:= v3.`ha.d$c$a.b` @type ^`ha.d$c` @kind object;
  #L343b46.  v1:= v1.`ha.d$c.c` @type ^`ha.d` @kind object;
  #L343b4a.  call temp:= `b`(v1) @signature `Lha/d;.b:(Lha/d;)Ljava/lang/String;` @kind static;
  #L343b50.  v1:= temp @kind object;
  #L343b52.  v2:= v3.`ha.d$c$a.b` @type ^`ha.d$c` @kind object;
  #L343b56.  v2:= v2.`ha.d$c.c` @type ^`ha.d` @kind object;
  #L343b5a.  call temp:= `a`(v2) @signature `Lha/d;.a:(Lha/d;)Lha/l;` @kind static;
  #L343b60.  v2:= temp @kind object;
  #L343b62.  call temp:= `d`(v2, v4, v5, v6) @signature `Lha/l;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/nio/ByteBuffer;` @kind interface;
  #L343b68.  v4:= temp @kind object;
  #L343b6a.  call `d`(v0, v1, v4) @signature `Lha/c;.d:(Ljava/lang/String;Ljava/nio/ByteBuffer;)V` @kind interface;
  #L343b70.  return @kind void;
}
procedure `void` `c`(`ha.d$c$a` v3 @kind this) @signature `Lha/d$c$a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L343aa0.  v0:= v3.`ha.d$c$a.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L343aa4.  v1:= 1I;
  #L343aa6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.getAndSet:(Z)Z` @kind virtual;
  #L343aac.  v0:= temp;
  #L343aae.  if v0 != 0 then goto L343af4;
  #L343ab2.  v0:= v3.`ha.d$c$a.b` @type ^`ha.d$c` @kind object;
  #L343ab6.  call temp:= `b`(v0) @signature `Lha/d$c;.b:(Lha/d$c;)Ljava/util/concurrent/atomic/AtomicReference;` @kind static;
  #L343abc.  v0:= temp @kind object;
  #L343abe.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L343ac4.  v0:= temp @kind object;
  #L343ac6.  if v0 == v3 then goto L343acc;
  #L343aca.  goto L343af4;
  #L343acc.  v0:= v3.`ha.d$c$a.b` @type ^`ha.d$c` @kind object;
  #L343ad0.  v0:= v0.`ha.d$c.c` @type ^`ha.d` @kind object;
  #L343ad4.  call temp:= `c`(v0) @signature `Lha/d;.c:(Lha/d;)Lha/c;` @kind static;
  #L343ada.  v0:= temp @kind object;
  #L343adc.  v1:= v3.`ha.d$c$a.b` @type ^`ha.d$c` @kind object;
  #L343ae0.  v1:= v1.`ha.d$c.c` @type ^`ha.d` @kind object;
  #L343ae4.  call temp:= `b`(v1) @signature `Lha/d;.b:(Lha/d;)Ljava/lang/String;` @kind static;
  #L343aea.  v1:= temp @kind object;
  #L343aec.  v2:= 0I;
  #L343aee.  call `d`(v0, v1, v2) @signature `Lha/c;.d:(Ljava/lang/String;Ljava/nio/ByteBuffer;)V` @kind interface;
  #L343af4.  return @kind void;
}
