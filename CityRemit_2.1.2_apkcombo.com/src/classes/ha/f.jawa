record `ha.f` @kind class @AccessFlag PUBLIC_FINAL extends `ha.i` @kind interface {
}
global `ha.f` `@@ha.f.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lha/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L34409c.  v0:= new `ha.f`;
  #L3440a0.  call `<init>`(v0) @signature `Lha/f;.<init>:()V` @kind direct;
  #L3440a6.  `@@ha.f.a` @type ^`ha.f` := v0 @kind object;
  #L3440aa.  return @kind void;
}
procedure `void` `<init>`(`ha.f` v0 @kind this) @signature `Lha/f;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3440bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3440c2.  return @kind void;
}
procedure `java.nio.ByteBuffer` `a`(`ha.f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lha/f;.a:(Ljava/lang/Object;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34404c.  if v2 != 0 then goto L344054;
  #L344050.  v2:= 0I;
  #L344052.  return v2 @kind object;
  #L344054.  call temp:= `a`(v2) @signature `Lha/h;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L34405a.  v2:= temp @kind object;
  #L34405c.  v0:= instanceof @variable v2 @type ^`java.lang.String` @kind boolean;
  #L344060.  if v0 == 0 then goto L34407e;
  #L344064.  v0:= `@@ha.t.b` @type ^`ha.t` @kind object;
  #L344068.  v2:= (`java.lang.String`) v2 @kind object;
  #L34406c.  call temp:= `quote`(v2) @signature `Lorg/json/JSONObject;.quote:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L344072.  v2:= temp @kind object;
  #L344074.  call temp:= `d`(v0, v2) @signature `Lha/t;.d:(Ljava/lang/String;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L34407a.  v2:= temp @kind object;
  #L34407c.  return v2 @kind object;
  #L34407e.  v0:= `@@ha.t.b` @type ^`ha.t` @kind object;
  #L344082.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L344088.  v2:= temp @kind object;
  #L34408a.  goto L344074;
}
procedure `java.lang.Object` `b`(`ha.f` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object) @signature `Lha/f;.b:(Ljava/nio/ByteBuffer;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L343fd8.  v0:= "Invalid JSON" @kind object;
  #L343fdc.  if v3 != 0 then goto L343fe4;
  #L343fe0.  v3:= 0I;
  #L343fe2.  return v3 @kind object;
  #L343fe4.  v1:= `@@ha.t.b` @type ^`ha.t` @kind object;
  #L343fe8.  call temp:= `c`(v1, v3) @signature `Lha/t;.c:(Ljava/nio/ByteBuffer;)Ljava/lang/String;` @kind virtual;
  #L343fee.  v3:= temp @kind object;
  #L343ff0.  v1:= new `org.json.JSONTokener`;
  #L343ff4.  call `<init>`(v1, v3) @signature `Lorg/json/JSONTokener;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L343ffa.  call temp:= `nextValue`(v1) @signature `Lorg/json/JSONTokener;.nextValue:()Ljava/lang/Object;` @kind virtual;
  #L344000.  v3:= temp @kind object;
  #L344002.  call temp:= `more`(v1) @signature `Lorg/json/JSONTokener;.more:()Z` @kind virtual;
  #L344008.  v1:= temp;
  #L34400a.  if v1 != 0 then goto L344010;
  #L34400e.  return v3 @kind object;
  #L344010.  v3:= new `java.lang.IllegalArgumentException`;
  #L344014.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L34401a.  throw v3;
  #L34401c.  v3:= Exception @type ^`org.json.JSONException` @kind object;
  #L34401e.  v1:= new `java.lang.IllegalArgumentException`;
  #L344022.  call `<init>`(v1, v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L344028.  throw v1;
  catch `org.json.JSONException` @[L343fe4..L34401c] goto L34401c;
}
