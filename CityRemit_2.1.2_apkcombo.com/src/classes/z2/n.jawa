record `z2.n` @kind class @AccessFlag PUBLIC_ABSTRACT extends `z2.f` @kind class {
  `long` `z2.n.j` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`z2.n` v11 @kind this, `r3.l` v12 @kind object, `r3.p` v13 @kind object, `v1.j1` v14 @kind object, `int` v15 , `java.lang.Object` v16 @kind object, `long` v17 , `long` v19 , `long` v21 ) @signature `Lz2/n;.<init>:(Lr3/l;Lr3/p;Lv1/j1;ILjava/lang/Object;JJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L5015b8.  v3:= 1I;
  #L5015ba.  v0:= v11 @kind object;
  #L5015bc.  v1:= v12 @kind object;
  #L5015be.  v2:= v13 @kind object;
  #L5015c0.  v4:= v14 @kind object;
  #L5015c2.  v5:= v15;
  #L5015c4.  v6:= v16 @kind object;
  #L5015c8.  v7:= v17 @kind wide;
  #L5015cc.  v9:= v19 @kind wide;
  #L5015d0.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v9) @signature `Lz2/f;.<init>:(Lr3/l;Lr3/p;ILv1/j1;ILjava/lang/Object;JJ)V` @kind direct;
  #L5015d6.  call temp:= `e`(v14) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L5015dc.  v1:= v21 @kind wide;
  #L5015e0.  v0.`z2.n.j` @type ^`long` := v1 @kind wide;
  #L5015e4.  return @kind void;
}
procedure `long` `g`(`z2.n` v5 @kind this) @signature `Lz2/n;.g:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L501590.  v0:= v5.`z2.n.j` @type ^`long` @kind wide;
  #L501594.  v2:= -1L;
  #L501598.  v4:= lcmp(v0, v2);
  #L50159c.  if v4 == 0 then goto L5015a6;
  #L5015a0.  v2:= 1L;
  #L5015a4.  v2:= v2 + v0 @kind long;
  #L5015a6.  return v2 @kind wide;
}
procedure `boolean` `h`() @signature `Lz2/n;.h:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
