record `z2.c` @kind class @AccessFlag PUBLIC_FINAL extends `z2.g$b` @kind interface {
  `int`[] `z2.c.a` @AccessFlag PRIVATE_FINAL;
  `x2.m0`[] `z2.c.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`z2.c` v0 @kind this, `int`[] v1 @kind object, `x2.m0`[] v2 @kind object) @signature `Lz2/c;.<init>:([I[Lx2/m0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ff660.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ff666.  v0.`z2.c.a` @type ^`int`[] := v1 @kind object;
  #L4ff66a.  v0.`z2.c.b` @type ^`x2.m0`[] := v2 @kind object;
  #L4ff66e.  return @kind void;
}
procedure `int`[] `a`(`z2.c` v4 @kind this) @signature `Lz2/c;.a:()[I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ff620.  v0:= v4.`z2.c.b` @type ^`x2.m0`[] @kind object;
  #L4ff624.  v0:= length @variable v0;
  #L4ff626.  v0:= new `int`[v0];
  #L4ff62a.  v1:= 0I;
  #L4ff62c.  v2:= v4.`z2.c.b` @type ^`x2.m0`[] @kind object;
  #L4ff630.  v3:= length @variable v2;
  #L4ff632.  if v1 >= v3 then goto L4ff64c;
  #L4ff636.  v2:= v2[v1] @kind object;
  #L4ff63a.  call temp:= `G`(v2) @signature `Lx2/m0;.G:()I` @kind virtual;
  #L4ff640.  v2:= temp;
  #L4ff642.  v0[v1]:= v2;
  #L4ff646.  v1:= v1 + 1;
  #L4ff64a.  goto L4ff62c;
  #L4ff64c.  return v0 @kind object;
}
procedure `void` `b`(`z2.c` v4 @kind this, `long` v5 ) @signature `Lz2/c;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ff680.  v0:= v4.`z2.c.b` @type ^`x2.m0`[] @kind object;
  #L4ff684.  v1:= length @variable v0;
  #L4ff686.  v2:= 0I;
  #L4ff688.  if v2 >= v1 then goto L4ff69c;
  #L4ff68c.  v3:= v0[v2] @kind object;
  #L4ff690.  call `a0`(v3, v5) @signature `Lx2/m0;.a0:(J)V` @kind virtual;
  #L4ff696.  v2:= v2 + 1;
  #L4ff69a.  goto L4ff688;
  #L4ff69c.  return @kind void;
}
procedure `a2.d0` `e`(`z2.c` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lz2/c;.e:(II)La2/d0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ff5b4.  v3:= 0I;
  #L4ff5b6.  v0:= v2.`z2.c.a` @type ^`int`[] @kind object;
  #L4ff5ba.  v1:= length @variable v0;
  #L4ff5bc.  if v3 >= v1 then goto L4ff5d8;
  #L4ff5c0.  v0:= v0[v3];
  #L4ff5c4.  if v4 != v0 then goto L4ff5d2;
  #L4ff5c8.  v4:= v2.`z2.c.b` @type ^`x2.m0`[] @kind object;
  #L4ff5cc.  v3:= v4[v3] @kind object;
  #L4ff5d0.  return v3 @kind object;
  #L4ff5d2.  v3:= v3 + 1;
  #L4ff5d6.  goto L4ff5b6;
  #L4ff5d8.  v3:= new `java.lang.StringBuilder`;
  #L4ff5dc.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ff5e2.  v0:= "Unmatched track of type: " @kind object;
  #L4ff5e6.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ff5ec.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ff5f2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ff5f8.  v3:= temp @kind object;
  #L4ff5fa.  v4:= "BaseMediaChunkOutput" @kind object;
  #L4ff5fe.  call `c`(v4, v3) @signature `Ls3/q;.c:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L4ff604.  v3:= new `a2.k`;
  #L4ff608.  call `<init>`(v3) @signature `La2/k;.<init>:()V` @kind direct;
  #L4ff60e.  return v3 @kind object;
}
