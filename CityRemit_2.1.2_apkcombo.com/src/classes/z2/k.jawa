record `z2.k` @kind class @AccessFlag PUBLIC extends `z2.a` @kind class {
  `int` `z2.k.o` @AccessFlag PRIVATE_FINAL;
  `long` `z2.k.p` @AccessFlag PRIVATE_FINAL;
  `z2.g` `z2.k.q` @AccessFlag PRIVATE_FINAL;
  `long` `z2.k.r` @AccessFlag PRIVATE;
  `boolean` `z2.k.s` @AccessFlag PRIVATE_VOLATILE;
  `boolean` `z2.k.t` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`z2.k` v3 @kind this, `r3.l` v4 @kind object, `r3.p` v5 @kind object, `v1.j1` v6 @kind object, `int` v7 , `java.lang.Object` v8 @kind object, `long` v9 , `long` v11 , `long` v13 , `long` v15 , `long` v17 , `int` v19 , `long` v20 , `z2.g` v22 @kind object) @signature `Lz2/k;.<init>:(Lr3/l;Lr3/p;Lv1/j1;ILjava/lang/Object;JJJJJIJLz2/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L5010b8.  v0:= v3 @kind object;
  #L5010ba.  call `<init>`(v3, v4, v5, v6, v7, v8, v9, v11, v13, v15, v17) @signature `Lz2/a;.<init>:(Lr3/l;Lr3/p;Lv1/j1;ILjava/lang/Object;JJJJJ)V` @kind direct;
  #L5010c0.  v1:= v19;
  #L5010c4.  v0.`z2.k.o` @type ^`int` := v1;
  #L5010c8.  v1:= v20 @kind wide;
  #L5010cc.  v0.`z2.k.p` @type ^`long` := v1 @kind wide;
  #L5010d0.  v1:= v22 @kind object;
  #L5010d4.  v0.`z2.k.q` @type ^`z2.g` := v1 @kind object;
  #L5010d8.  return @kind void;
}
procedure `void` `a`(`z2.k` v9 @kind this) @signature `Lz2/k;.a:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L501104.  v0:= v9.`z2.k.r` @type ^`long` @kind wide;
  #L501108.  v2:= 0L;
  #L50110c.  v4:= lcmp(v0, v2);
  #L501110.  if v4 != 0 then goto L501170;
  #L501114.  call temp:= `j`(v9) @signature `Lz2/a;.j:()Lz2/c;` @kind virtual;
  #L50111a.  v0:= temp @kind object;
  #L50111c.  v1:= v9.`z2.k.p` @type ^`long` @kind wide;
  #L501120.  call `b`(v0, v1) @signature `Lz2/c;.b:(J)V` @kind virtual;
  #L501126.  v3:= v9.`z2.k.q` @type ^`z2.g` @kind object;
  #L50112a.  call temp:= `l`(v9, v0) @signature `Lz2/k;.l:(Lz2/c;)Lz2/g$b;` @kind virtual;
  #L501130.  v4:= temp @kind object;
  #L501132.  v0:= v9.`z2.a.k` @type ^`long` @kind wide;
  #L501136.  v5:= -4.9E-324D;
  #L501140.  v2:= lcmp(v0, v5);
  #L501144.  if v2 != 0 then goto L50114c;
  #L501148.  v0:= v5 @kind wide;
  #L50114a.  goto L501152;
  #L50114c.  v7:= v9.`z2.k.p` @type ^`long` @kind wide;
  #L501150.  v0:= v0 - v7 @kind long;
  #L501152.  v7:= v9.`z2.a.l` @type ^`long` @kind wide;
  #L501156.  v2:= lcmp(v7, v5);
  #L50115a.  if v2 != 0 then goto L501162;
  #L50115e.  v7:= v5 @kind wide;
  #L501160.  goto L501168;
  #L501162.  v5:= v9.`z2.k.p` @type ^`long` @kind wide;
  #L501166.  v7:= v7 - v5 @kind long;
  #L501168.  v5:= v0 @kind wide;
  #L50116a.  call `c`(v3, v4, v5, v7) @signature `Lz2/g;.c:(Lz2/g$b;JJ)V` @kind interface;
  #L501170.  v0:= v9.`z2.f.b` @type ^`r3.p` @kind object;
  #L501174.  v1:= v9.`z2.k.r` @type ^`long` @kind wide;
  #L501178.  call temp:= `e`(v0, v1) @signature `Lr3/p;.e:(J)Lr3/p;` @kind virtual;
  #L50117e.  v0:= temp @kind object;
  #L501180.  v7:= new `a2.f`;
  #L501184.  v2:= v9.`z2.f.i` @type ^`r3.o0` @kind object;
  #L501188.  v3:= v0.`r3.p.f` @type ^`long` @kind wide;
  #L50118c.  call temp:= `e`(v2, v0) @signature `Lr3/o0;.e:(Lr3/p;)J` @kind virtual;
  #L501192.  v5:= temp @kind wide;
  #L501194.  v1:= v7 @kind object;
  #L501196.  call `<init>`(v1, v2, v3, v5) @signature `La2/f;.<init>:(Lr3/i;JJ)V` @kind direct;
  #L50119c.  v0:= v9.`z2.k.s` @type ^`boolean` @kind boolean;
  #L5011a0.  if v0 != 0 then goto L5011b6;
  #L5011a4.  v0:= v9.`z2.k.q` @type ^`z2.g` @kind object;
  #L5011a8.  call temp:= `b`(v0, v7) @signature `Lz2/g;.b:(La2/m;)Z` @kind interface;
  #L5011ae.  v0:= temp;
  #L5011b0.  if v0 == 0 then goto L5011b6;
  #L5011b4.  goto L50119c;
  #L5011b6.  call temp:= `q`(v7) @signature `La2/m;.q:()J` @kind interface;
  #L5011bc.  v0:= temp @kind wide;
  #L5011be.  v2:= v9.`z2.f.b` @type ^`r3.p` @kind object;
  #L5011c2.  v2:= v2.`r3.p.f` @type ^`long` @kind wide;
  #L5011c6.  v0:= v0 - v2 @kind long;
  #L5011c8.  v9.`z2.k.r` @type ^`long` := v0 @kind wide;
  #L5011cc.  v0:= v9.`z2.f.i` @type ^`r3.o0` @kind object;
  #L5011d0.  call `a`(v0) @signature `Lr3/o;.a:(Lr3/l;)V` @kind static;
  #L5011d6.  v0:= v9.`z2.k.s` @type ^`boolean` @kind boolean;
  #L5011da.  v0:= v0 ^~ 1;
  #L5011de.  v9.`z2.k.t` @type ^`boolean` := v0 @kind boolean;
  #L5011e2.  return @kind void;
  #L5011e4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5011e6.  call temp:= `q`(v7) @signature `La2/m;.q:()J` @kind interface;
  #L5011ec.  v1:= temp @kind wide;
  #L5011ee.  v3:= v9.`z2.f.b` @type ^`r3.p` @kind object;
  #L5011f2.  v3:= v3.`r3.p.f` @type ^`long` @kind wide;
  #L5011f6.  v1:= v1 - v3 @kind long;
  #L5011f8.  v9.`z2.k.r` @type ^`long` := v1 @kind wide;
  #L5011fc.  throw v0;
  #L5011fe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L501200.  v1:= v9.`z2.f.i` @type ^`r3.o0` @kind object;
  #L501204.  call `a`(v1) @signature `Lr3/o;.a:(Lr3/l;)V` @kind static;
  #L50120a.  throw v0;
  catch `java.lang.Throwable` @[L501170..L50119c] goto L5011fe;
  catch `java.lang.Throwable` @[L50119c..L5011b0] goto L5011e4;
  catch `java.lang.Throwable` @[L5011b6..L5011cc] goto L5011fe;
  catch `java.lang.Throwable` @[L5011e6..L5011fe] goto L5011fe;
}
procedure `void` `b`(`z2.k` v1 @kind this) @signature `Lz2/k;.b:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L5010ec.  v0:= 1I;
  #L5010ee.  v1.`z2.k.s` @type ^`boolean` := v0 @kind boolean;
  #L5010f2.  return @kind void;
}
procedure `long` `g`(`z2.k` v4 @kind this) @signature `Lz2/k;.g:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L501098.  v0:= v4.`z2.n.j` @type ^`long` @kind wide;
  #L50109c.  v2:= v4.`z2.k.o` @type ^`int`;
  #L5010a0.  v2:= (`long`) v2 @kind i2l;
  #L5010a2.  v0:= v0 + v2 @kind long;
  #L5010a4.  return v0 @kind wide;
}
procedure `boolean` `h`(`z2.k` v1 @kind this) @signature `Lz2/k;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501080.  v0:= v1.`z2.k.t` @type ^`boolean` @kind boolean;
  #L501084.  return v0;
}
procedure `z2.g$b` `l`(`z2.k` v0 @kind this, `z2.c` v1 @kind object) @signature `Lz2/k;.l:(Lz2/c;)Lz2/g$b;` @AccessFlag PROTECTED {
    temp;

  #L501244.  return v1 @kind object;
}
