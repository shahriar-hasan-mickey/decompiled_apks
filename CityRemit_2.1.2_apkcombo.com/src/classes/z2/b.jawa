record `z2.b` @kind class @AccessFlag PUBLIC_ABSTRACT extends `z2.o` @kind interface {
  `long` `z2.b.b` @AccessFlag PRIVATE_FINAL;
  `long` `z2.b.c` @AccessFlag PRIVATE_FINAL;
  `long` `z2.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`z2.b` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lz2/b;.<init>:(JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ff530.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ff536.  v0.`z2.b.b` @type ^`long` := v1 @kind wide;
  #L4ff53a.  v0.`z2.b.c` @type ^`long` := v3 @kind wide;
  #L4ff53e.  call `f`(v0) @signature `Lz2/b;.f:()V` @kind virtual;
  #L4ff544.  return @kind void;
}
procedure `void` `c`(`z2.b` v5 @kind this) @signature `Lz2/b;.c:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ff558.  v0:= v5.`z2.b.d` @type ^`long` @kind wide;
  #L4ff55c.  v2:= v5.`z2.b.b` @type ^`long` @kind wide;
  #L4ff560.  v4:= lcmp(v0, v2);
  #L4ff564.  if v4 < 0 then goto L4ff576;
  #L4ff568.  v2:= v5.`z2.b.c` @type ^`long` @kind wide;
  #L4ff56c.  v4:= lcmp(v0, v2);
  #L4ff570.  if v4 > 0 then goto L4ff576;
  #L4ff574.  return @kind void;
  #L4ff576.  v0:= new `java.util.NoSuchElementException`;
  #L4ff57a.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4ff580.  throw v0;
}
procedure `long` `d`(`z2.b` v2 @kind this) @signature `Lz2/b;.d:()J` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L4ff518.  v0:= v2.`z2.b.d` @type ^`long` @kind wide;
  #L4ff51c.  return v0 @kind wide;
}
procedure `boolean` `e`(`z2.b` v5 @kind this) @signature `Lz2/b;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ff4c4.  v0:= v5.`z2.b.d` @type ^`long` @kind wide;
  #L4ff4c8.  v2:= v5.`z2.b.c` @type ^`long` @kind wide;
  #L4ff4cc.  v4:= lcmp(v0, v2);
  #L4ff4d0.  if v4 <= 0 then goto L4ff4d8;
  #L4ff4d4.  v0:= 1I;
  #L4ff4d6.  goto L4ff4da;
  #L4ff4d8.  v0:= 0I;
  #L4ff4da.  return v0;
}
procedure `void` `f`(`z2.b` v4 @kind this) @signature `Lz2/b;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ff594.  v0:= v4.`z2.b.b` @type ^`long` @kind wide;
  #L4ff598.  v2:= 1L;
  #L4ff59c.  v0:= v0 - v2 @kind long;
  #L4ff59e.  v4.`z2.b.d` @type ^`long` := v0 @kind wide;
  #L4ff5a2.  return @kind void;
}
procedure `boolean` `next`(`z2.b` v4 @kind this) @signature `Lz2/b;.next:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ff4ec.  v0:= v4.`z2.b.d` @type ^`long` @kind wide;
  #L4ff4f0.  v2:= 1L;
  #L4ff4f4.  v0:= v0 + v2 @kind long;
  #L4ff4f6.  v4.`z2.b.d` @type ^`long` := v0 @kind wide;
  #L4ff4fa.  call temp:= `e`(v4) @signature `Lz2/b;.e:()Z` @kind virtual;
  #L4ff500.  v0:= temp;
  #L4ff502.  v0:= v0 ^~ 1;
  #L4ff506.  return v0;
}
