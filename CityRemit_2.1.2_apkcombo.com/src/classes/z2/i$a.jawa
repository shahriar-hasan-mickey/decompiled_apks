record `z2.i$a` @kind class @AccessFlag PUBLIC_FINAL extends `x2.n0` @kind interface {
  `z2.i` `z2.i$a.o` @AccessFlag PUBLIC_FINAL;
  `x2.m0` `z2.i$a.p` @AccessFlag PRIVATE_FINAL;
  `int` `z2.i$a.q` @AccessFlag PRIVATE_FINAL;
  `boolean` `z2.i$a.r` @AccessFlag PRIVATE;
  `z2.i` `z2.i$a.s` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`z2.i$a` v0 @kind this, `z2.i` v1 @kind object, `z2.i` v2 @kind object, `x2.m0` v3 @kind object, `int` v4 ) @signature `Lz2/i$a;.<init>:(Lz2/i;Lz2/i;Lx2/m0;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ffde0.  v0.`z2.i$a.s` @type ^`z2.i` := v1 @kind object;
  #L4ffde4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ffdea.  v0.`z2.i$a.o` @type ^`z2.i` := v2 @kind object;
  #L4ffdee.  v0.`z2.i$a.p` @type ^`x2.m0` := v3 @kind object;
  #L4ffdf2.  v0.`z2.i$a.q` @type ^`int` := v4;
  #L4ffdf6.  return @kind void;
}
procedure `void` `a`(`z2.i$a` v8 @kind this) @signature `Lz2/i$a;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4ffe08.  v0:= v8.`z2.i$a.r` @type ^`boolean` @kind boolean;
  #L4ffe0c.  if v0 != 0 then goto L4ffe60;
  #L4ffe10.  v0:= v8.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffe14.  call temp:= `A`(v0) @signature `Lz2/i;.A:(Lz2/i;)Lx2/b0$a;` @kind static;
  #L4ffe1a.  v1:= temp @kind object;
  #L4ffe1c.  v0:= v8.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffe20.  call temp:= `x`(v0) @signature `Lz2/i;.x:(Lz2/i;)[I` @kind static;
  #L4ffe26.  v0:= temp @kind object;
  #L4ffe28.  v2:= v8.`z2.i$a.q` @type ^`int`;
  #L4ffe2c.  v2:= v0[v2];
  #L4ffe30.  v0:= v8.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffe34.  call temp:= `y`(v0) @signature `Lz2/i;.y:(Lz2/i;)[Lv1/j1;` @kind static;
  #L4ffe3a.  v0:= temp @kind object;
  #L4ffe3c.  v3:= v8.`z2.i$a.q` @type ^`int`;
  #L4ffe40.  v3:= v0[v3] @kind object;
  #L4ffe44.  v4:= 0I;
  #L4ffe46.  v5:= 0I;
  #L4ffe48.  v0:= v8.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffe4c.  call temp:= `z`(v0) @signature `Lz2/i;.z:(Lz2/i;)J` @kind static;
  #L4ffe52.  v6:= temp @kind wide;
  #L4ffe54.  call `i`(v1, v2, v3, v4, v5, v6) @signature `Lx2/b0$a;.i:(ILv1/j1;ILjava/lang/Object;J)V` @kind virtual;
  #L4ffe5a.  v0:= 1I;
  #L4ffe5c.  v8.`z2.i$a.r` @type ^`boolean` := v0 @kind boolean;
  #L4ffe60.  return @kind void;
}
procedure `void` `b`(`z2.i$a` v0 @kind this) @signature `Lz2/i$a;.b:()V` @AccessFlag PUBLIC {
    temp;

  #L4ffe74.  return @kind void;
}
procedure `void` `c`(`z2.i$a` v3 @kind this) @signature `Lz2/i$a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ffe88.  v0:= v3.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffe8c.  call temp:= `w`(v0) @signature `Lz2/i;.w:(Lz2/i;)[Z` @kind static;
  #L4ffe92.  v0:= temp @kind object;
  #L4ffe94.  v1:= v3.`z2.i$a.q` @type ^`int`;
  #L4ffe98.  v0:= v0[v1] @kind boolean;
  #L4ffe9c.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L4ffea2.  v0:= v3.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffea6.  call temp:= `w`(v0) @signature `Lz2/i;.w:(Lz2/i;)[Z` @kind static;
  #L4ffeac.  v0:= temp @kind object;
  #L4ffeae.  v1:= v3.`z2.i$a.q` @type ^`int`;
  #L4ffeb2.  v2:= 0I;
  #L4ffeb4.  v0[v1]:= v2 @kind boolean;
  #L4ffeb8.  return @kind void;
}
procedure `int` `e`(`z2.i$a` v3 @kind this, `v1.k1` v4 @kind object, `y1.g` v5 @kind object, `int` v6 ) @signature `Lz2/i$a;.e:(Lv1/k1;Ly1/g;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ffcd0.  v0:= v3.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffcd4.  call temp:= `I`(v0) @signature `Lz2/i;.I:()Z` @kind virtual;
  #L4ffcda.  v0:= temp;
  #L4ffcdc.  v1:= -3I;
  #L4ffcde.  if v0 == 0 then goto L4ffce4;
  #L4ffce2.  return v1;
  #L4ffce4.  v0:= v3.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffce8.  call temp:= `v`(v0) @signature `Lz2/i;.v:(Lz2/i;)Lz2/a;` @kind static;
  #L4ffcee.  v0:= temp @kind object;
  #L4ffcf0.  if v0 == 0 then goto L4ffd22;
  #L4ffcf4.  v0:= v3.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffcf8.  call temp:= `v`(v0) @signature `Lz2/i;.v:(Lz2/i;)Lz2/a;` @kind static;
  #L4ffcfe.  v0:= temp @kind object;
  #L4ffd00.  v2:= v3.`z2.i$a.q` @type ^`int`;
  #L4ffd04.  v2:= v2 + 1;
  #L4ffd08.  call temp:= `i`(v0, v2) @signature `Lz2/a;.i:(I)I` @kind virtual;
  #L4ffd0e.  v0:= temp;
  #L4ffd10.  v2:= v3.`z2.i$a.p` @type ^`x2.m0` @kind object;
  #L4ffd14.  call temp:= `C`(v2) @signature `Lx2/m0;.C:()I` @kind virtual;
  #L4ffd1a.  v2:= temp;
  #L4ffd1c.  if v0 > v2 then goto L4ffd22;
  #L4ffd20.  return v1;
  #L4ffd22.  call `a`(v3) @signature `Lz2/i$a;.a:()V` @kind direct;
  #L4ffd28.  v0:= v3.`z2.i$a.p` @type ^`x2.m0` @kind object;
  #L4ffd2c.  v1:= v3.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffd30.  v1:= v1.`z2.i.K` @type ^`boolean` @kind boolean;
  #L4ffd34.  call temp:= `S`(v0, v4, v5, v6, v1) @signature `Lx2/m0;.S:(Lv1/k1;Ly1/g;IZ)I` @kind virtual;
  #L4ffd3a.  v4:= temp;
  #L4ffd3c.  return v4;
}
procedure `boolean` `h`(`z2.i$a` v2 @kind this) @signature `Lz2/i$a;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ffc90.  v0:= v2.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffc94.  call temp:= `I`(v0) @signature `Lz2/i;.I:()Z` @kind virtual;
  #L4ffc9a.  v0:= temp;
  #L4ffc9c.  if v0 != 0 then goto L4ffcbc;
  #L4ffca0.  v0:= v2.`z2.i$a.p` @type ^`x2.m0` @kind object;
  #L4ffca4.  v1:= v2.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffca8.  v1:= v1.`z2.i.K` @type ^`boolean` @kind boolean;
  #L4ffcac.  call temp:= `K`(v0, v1) @signature `Lx2/m0;.K:(Z)Z` @kind virtual;
  #L4ffcb2.  v0:= temp;
  #L4ffcb4.  if v0 == 0 then goto L4ffcbc;
  #L4ffcb8.  v0:= 1I;
  #L4ffcba.  goto L4ffcbe;
  #L4ffcbc.  v0:= 0I;
  #L4ffcbe.  return v0;
}
procedure `int` `m`(`z2.i$a` v2 @kind this, `long` v3 ) @signature `Lz2/i$a;.m:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ffd50.  v0:= v2.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffd54.  call temp:= `I`(v0) @signature `Lz2/i;.I:()Z` @kind virtual;
  #L4ffd5a.  v0:= temp;
  #L4ffd5c.  if v0 == 0 then goto L4ffd64;
  #L4ffd60.  v3:= 0I;
  #L4ffd62.  return v3;
  #L4ffd64.  v0:= v2.`z2.i$a.p` @type ^`x2.m0` @kind object;
  #L4ffd68.  v1:= v2.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffd6c.  v1:= v1.`z2.i.K` @type ^`boolean` @kind boolean;
  #L4ffd70.  call temp:= `E`(v0, v3, v1) @signature `Lx2/m0;.E:(JZ)I` @kind virtual;
  #L4ffd76.  v3:= temp;
  #L4ffd78.  v4:= v2.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffd7c.  call temp:= `v`(v4) @signature `Lz2/i;.v:(Lz2/i;)Lz2/a;` @kind static;
  #L4ffd82.  v4:= temp @kind object;
  #L4ffd84.  if v4 == 0 then goto L4ffdba;
  #L4ffd88.  v4:= v2.`z2.i$a.s` @type ^`z2.i` @kind object;
  #L4ffd8c.  call temp:= `v`(v4) @signature `Lz2/i;.v:(Lz2/i;)Lz2/a;` @kind static;
  #L4ffd92.  v4:= temp @kind object;
  #L4ffd94.  v0:= v2.`z2.i$a.q` @type ^`int`;
  #L4ffd98.  v0:= v0 + 1;
  #L4ffd9c.  call temp:= `i`(v4, v0) @signature `Lz2/a;.i:(I)I` @kind virtual;
  #L4ffda2.  v4:= temp;
  #L4ffda4.  v0:= v2.`z2.i$a.p` @type ^`x2.m0` @kind object;
  #L4ffda8.  call temp:= `C`(v0) @signature `Lx2/m0;.C:()I` @kind virtual;
  #L4ffdae.  v0:= temp;
  #L4ffdb0.  v4:= v4 - v0 @kind int;
  #L4ffdb2.  call temp:= `min`(v3, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4ffdb8.  v3:= temp;
  #L4ffdba.  v4:= v2.`z2.i$a.p` @type ^`x2.m0` @kind object;
  #L4ffdbe.  call `e0`(v4, v3) @signature `Lx2/m0;.e0:(I)V` @kind virtual;
  #L4ffdc4.  if v3 <= 0 then goto L4ffdce;
  #L4ffdc8.  call `a`(v2) @signature `Lz2/i$a;.a:()V` @kind direct;
  #L4ffdce.  return v3;
}
