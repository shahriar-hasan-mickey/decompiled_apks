record `v1.d3` @kind class @AccessFlag PUBLIC_ABSTRACT extends `v1.g` @kind interface {
}
global `v1.d3` `@@v1.d3.o` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lv1/d3;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L49ebc4.  v0:= new `v1.d3$a`;
  #L49ebc8.  call `<init>`(v0) @signature `Lv1/d3$a;.<init>:()V` @kind direct;
  #L49ebce.  `@@v1.d3.o` @type ^`v1.d3` := v0 @kind object;
  #L49ebd2.  return @kind void;
}
procedure `void` `<init>`(`v1.d3` v0 @kind this) @signature `Lv1/d3;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L49ebe4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49ebea.  return @kind void;
}
procedure `int` `a`(`v1.d3` v0 @kind this, `boolean` v1 ) @signature `Lv1/d3;.a:(Z)I` @AccessFlag PUBLIC {
    temp;

  #L49e954.  call temp:= `q`(v0) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L49e95a.  v1:= temp;
  #L49e95c.  if v1 == 0 then goto L49e964;
  #L49e960.  v1:= -1I;
  #L49e962.  goto L49e966;
  #L49e964.  v1:= 0I;
  #L49e966.  return v1;
}
procedure `int` `b`(`java.lang.Object` v0 @kind object) @signature `Lv1/d3;.b:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `c`(`v1.d3` v0 @kind this, `boolean` v1 ) @signature `Lv1/d3;.c:(Z)I` @AccessFlag PUBLIC {
    temp;

  #L49e978.  call temp:= `q`(v0) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L49e97e.  v1:= temp;
  #L49e980.  if v1 == 0 then goto L49e988;
  #L49e984.  v1:= -1I;
  #L49e986.  goto L49e994;
  #L49e988.  call temp:= `p`(v0) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49e98e.  v1:= temp;
  #L49e990.  v1:= v1 + -1;
  #L49e994.  return v1;
}
procedure `int` `d`(`v1.d3` v1 @kind this, `int` v2 , `v1.d3$b` v3 @kind object, `v1.d3$c` v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Lv1/d3;.d:(ILv1/d3$b;Lv1/d3$c;IZ)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e9a8.  call temp:= `f`(v1, v2, v3) @signature `Lv1/d3;.f:(ILv1/d3$b;)Lv1/d3$b;` @kind virtual;
  #L49e9ae.  v3:= temp @kind object;
  #L49e9b0.  v3:= v3.`v1.d3$b.q` @type ^`int`;
  #L49e9b4.  call temp:= `n`(v1, v3, v4) @signature `Lv1/d3;.n:(ILv1/d3$c;)Lv1/d3$c;` @kind virtual;
  #L49e9ba.  v0:= temp @kind object;
  #L49e9bc.  v0:= v0.`v1.d3$c.D` @type ^`int`;
  #L49e9c0.  if v0 != v2 then goto L49e9e2;
  #L49e9c4.  call temp:= `e`(v1, v3, v5, v6) @signature `Lv1/d3;.e:(IIZ)I` @kind virtual;
  #L49e9ca.  v2:= temp;
  #L49e9cc.  v3:= -1I;
  #L49e9ce.  if v2 != v3 then goto L49e9d4;
  #L49e9d2.  return v3;
  #L49e9d4.  call temp:= `n`(v1, v2, v4) @signature `Lv1/d3;.n:(ILv1/d3$c;)Lv1/d3$c;` @kind virtual;
  #L49e9da.  v2:= temp @kind object;
  #L49e9dc.  v2:= v2.`v1.d3$c.C` @type ^`int`;
  #L49e9e0.  return v2;
  #L49e9e2.  v2:= v2 + 1;
  #L49e9e6.  return v2;
}
procedure `int` `e`(`v1.d3` v2 @kind this, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lv1/d3;.e:(IIZ)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49e9f8.  v0:= 1I;
  #L49e9fa.  if v4 == 0 then goto L49ea30;
  #L49e9fe.  if v4 == v0 then goto L49ea2e;
  #L49ea02.  v1:= 2I;
  #L49ea04.  if v4 != v1 then goto L49ea22;
  #L49ea08.  call temp:= `c`(v2, v5) @signature `Lv1/d3;.c:(Z)I` @kind virtual;
  #L49ea0e.  v4:= temp;
  #L49ea10.  if v3 != v4 then goto L49ea1e;
  #L49ea14.  call temp:= `a`(v2, v5) @signature `Lv1/d3;.a:(Z)I` @kind virtual;
  #L49ea1a.  v3:= temp;
  #L49ea1c.  goto L49ea20;
  #L49ea1e.  v3:= v3 + v0 @kind int;
  #L49ea20.  return v3;
  #L49ea22.  v3:= new `java.lang.IllegalStateException`;
  #L49ea26.  call `<init>`(v3) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L49ea2c.  throw v3;
  #L49ea2e.  return v3;
  #L49ea30.  call temp:= `c`(v2, v5) @signature `Lv1/d3;.c:(Z)I` @kind virtual;
  #L49ea36.  v4:= temp;
  #L49ea38.  if v3 != v4 then goto L49ea40;
  #L49ea3c.  v3:= -1I;
  #L49ea3e.  goto L49ea42;
  #L49ea40.  v3:= v3 + v0 @kind int;
  #L49ea42.  return v3;
}
procedure `boolean` `equals`(`v1.d3` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lv1/d3;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49e7dc.  v0:= 1I;
  #L49e7de.  if v9 != v10 then goto L49e7e4;
  #L49e7e2.  return v0;
  #L49e7e4.  v1:= instanceof @variable v10 @type ^`v1.d3` @kind boolean;
  #L49e7e8.  v2:= 0I;
  #L49e7ea.  if v1 != 0 then goto L49e7f0;
  #L49e7ee.  return v2;
  #L49e7f0.  v10:= (`v1.d3`) v10 @kind object;
  #L49e7f4.  call temp:= `p`(v10) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49e7fa.  v1:= temp;
  #L49e7fc.  call temp:= `p`(v9) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49e802.  v3:= temp;
  #L49e804.  if v1 != v3 then goto L49e8f6;
  #L49e808.  call temp:= `i`(v10) @signature `Lv1/d3;.i:()I` @kind virtual;
  #L49e80e.  v1:= temp;
  #L49e810.  call temp:= `i`(v9) @signature `Lv1/d3;.i:()I` @kind virtual;
  #L49e816.  v3:= temp;
  #L49e818.  if v1 == v3 then goto L49e81e;
  #L49e81c.  goto L49e8f6;
  #L49e81e.  v1:= new `v1.d3$c`;
  #L49e822.  call `<init>`(v1) @signature `Lv1/d3$c;.<init>:()V` @kind direct;
  #L49e828.  v3:= new `v1.d3$b`;
  #L49e82c.  call `<init>`(v3) @signature `Lv1/d3$b;.<init>:()V` @kind direct;
  #L49e832.  v4:= new `v1.d3$c`;
  #L49e836.  call `<init>`(v4) @signature `Lv1/d3$c;.<init>:()V` @kind direct;
  #L49e83c.  v5:= new `v1.d3$b`;
  #L49e840.  call `<init>`(v5) @signature `Lv1/d3$b;.<init>:()V` @kind direct;
  #L49e846.  v6:= 0I;
  #L49e848.  call temp:= `p`(v9) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49e84e.  v7:= temp;
  #L49e850.  if v6 >= v7 then goto L49e878;
  #L49e854.  call temp:= `n`(v9, v6, v1) @signature `Lv1/d3;.n:(ILv1/d3$c;)Lv1/d3$c;` @kind virtual;
  #L49e85a.  v7:= temp @kind object;
  #L49e85c.  call temp:= `n`(v10, v6, v4) @signature `Lv1/d3;.n:(ILv1/d3$c;)Lv1/d3$c;` @kind virtual;
  #L49e862.  v8:= temp @kind object;
  #L49e864.  call temp:= `equals`(v7, v8) @signature `Lv1/d3$c;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L49e86a.  v7:= temp;
  #L49e86c.  if v7 != 0 then goto L49e872;
  #L49e870.  return v2;
  #L49e872.  v6:= v6 + 1;
  #L49e876.  goto L49e848;
  #L49e878.  v1:= 0I;
  #L49e87a.  call temp:= `i`(v9) @signature `Lv1/d3;.i:()I` @kind virtual;
  #L49e880.  v4:= temp;
  #L49e882.  if v1 >= v4 then goto L49e8aa;
  #L49e886.  call temp:= `g`(v9, v1, v3, v0) @signature `Lv1/d3;.g:(ILv1/d3$b;Z)Lv1/d3$b;` @kind virtual;
  #L49e88c.  v4:= temp @kind object;
  #L49e88e.  call temp:= `g`(v10, v1, v5, v0) @signature `Lv1/d3;.g:(ILv1/d3$b;Z)Lv1/d3$b;` @kind virtual;
  #L49e894.  v6:= temp @kind object;
  #L49e896.  call temp:= `equals`(v4, v6) @signature `Lv1/d3$b;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L49e89c.  v4:= temp;
  #L49e89e.  if v4 != 0 then goto L49e8a4;
  #L49e8a2.  return v2;
  #L49e8a4.  v1:= v1 + 1;
  #L49e8a8.  goto L49e87a;
  #L49e8aa.  call temp:= `a`(v9, v0) @signature `Lv1/d3;.a:(Z)I` @kind virtual;
  #L49e8b0.  v1:= temp;
  #L49e8b2.  call temp:= `a`(v10, v0) @signature `Lv1/d3;.a:(Z)I` @kind virtual;
  #L49e8b8.  v3:= temp;
  #L49e8ba.  if v1 == v3 then goto L49e8c0;
  #L49e8be.  return v2;
  #L49e8c0.  call temp:= `c`(v9, v0) @signature `Lv1/d3;.c:(Z)I` @kind virtual;
  #L49e8c6.  v3:= temp;
  #L49e8c8.  call temp:= `c`(v10, v0) @signature `Lv1/d3;.c:(Z)I` @kind virtual;
  #L49e8ce.  v4:= temp;
  #L49e8d0.  if v3 == v4 then goto L49e8d6;
  #L49e8d4.  return v2;
  #L49e8d6.  if v1 == v3 then goto L49e8f4;
  #L49e8da.  call temp:= `e`(v9, v1, v2, v0) @signature `Lv1/d3;.e:(IIZ)I` @kind virtual;
  #L49e8e0.  v4:= temp;
  #L49e8e2.  call temp:= `e`(v10, v1, v2, v0) @signature `Lv1/d3;.e:(IIZ)I` @kind virtual;
  #L49e8e8.  v1:= temp;
  #L49e8ea.  if v4 == v1 then goto L49e8f0;
  #L49e8ee.  return v2;
  #L49e8f0.  v1:= v4;
  #L49e8f2.  goto L49e8d6;
  #L49e8f4.  return v0;
  #L49e8f6.  return v2;
}
procedure `v1.d3$b` `f`(`v1.d3` v1 @kind this, `int` v2 , `v1.d3$b` v3 @kind object) @signature `Lv1/d3;.f:(ILv1/d3$b;)Lv1/d3$b;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49eb64.  v0:= 0I;
  #L49eb66.  call temp:= `g`(v1, v2, v3, v0) @signature `Lv1/d3;.g:(ILv1/d3$b;Z)Lv1/d3$b;` @kind virtual;
  #L49eb6c.  v2:= temp @kind object;
  #L49eb6e.  return v2 @kind object;
}
procedure `v1.d3$b` `g`(`int` v0 , `v1.d3$b` v1 @kind object, `boolean` v2 ) @signature `Lv1/d3;.g:(ILv1/d3$b;Z)Lv1/d3$b;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `v1.d3$b` `h`(`v1.d3` v1 @kind this, `java.lang.Object` v2 @kind object, `v1.d3$b` v3 @kind object) @signature `Lv1/d3;.h:(Ljava/lang/Object;Lv1/d3$b;)Lv1/d3$b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49eb80.  call temp:= `b`(v1, v2) @signature `Lv1/d3;.b:(Ljava/lang/Object;)I` @kind virtual;
  #L49eb86.  v2:= temp;
  #L49eb88.  v0:= 1I;
  #L49eb8a.  call temp:= `g`(v1, v2, v3, v0) @signature `Lv1/d3;.g:(ILv1/d3$b;Z)Lv1/d3$b;` @kind virtual;
  #L49eb90.  v2:= temp @kind object;
  #L49eb92.  return v2 @kind object;
}
procedure `int` `hashCode`(`v1.d3` v6 @kind this) @signature `Lv1/d3;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49eab0.  v0:= new `v1.d3$c`;
  #L49eab4.  call `<init>`(v0) @signature `Lv1/d3$c;.<init>:()V` @kind direct;
  #L49eaba.  v1:= new `v1.d3$b`;
  #L49eabe.  call `<init>`(v1) @signature `Lv1/d3$b;.<init>:()V` @kind direct;
  #L49eac4.  call temp:= `p`(v6) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49eaca.  v2:= temp;
  #L49eacc.  v3:= 217I;
  #L49ead0.  v3:= v3 + v2 @kind int;
  #L49ead2.  v2:= 0I;
  #L49ead4.  v4:= 0I;
  #L49ead6.  call temp:= `p`(v6) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49eadc.  v5:= temp;
  #L49eade.  v3:= v3 * 31;
  #L49eae2.  if v4 >= v5 then goto L49eafe;
  #L49eae6.  call temp:= `n`(v6, v4, v0) @signature `Lv1/d3;.n:(ILv1/d3$c;)Lv1/d3$c;` @kind virtual;
  #L49eaec.  v5:= temp @kind object;
  #L49eaee.  call temp:= `hashCode`(v5) @signature `Lv1/d3$c;.hashCode:()I` @kind virtual;
  #L49eaf4.  v5:= temp;
  #L49eaf6.  v3:= v3 + v5 @kind int;
  #L49eaf8.  v4:= v4 + 1;
  #L49eafc.  goto L49ead6;
  #L49eafe.  call temp:= `i`(v6) @signature `Lv1/d3;.i:()I` @kind virtual;
  #L49eb04.  v0:= temp;
  #L49eb06.  v3:= v3 + v0 @kind int;
  #L49eb08.  v0:= 0I;
  #L49eb0a.  call temp:= `i`(v6) @signature `Lv1/d3;.i:()I` @kind virtual;
  #L49eb10.  v4:= temp;
  #L49eb12.  v5:= 1I;
  #L49eb14.  if v0 >= v4 then goto L49eb34;
  #L49eb18.  v3:= v3 * 31;
  #L49eb1c.  call temp:= `g`(v6, v0, v1, v5) @signature `Lv1/d3;.g:(ILv1/d3$b;Z)Lv1/d3$b;` @kind virtual;
  #L49eb22.  v4:= temp @kind object;
  #L49eb24.  call temp:= `hashCode`(v4) @signature `Lv1/d3$b;.hashCode:()I` @kind virtual;
  #L49eb2a.  v4:= temp;
  #L49eb2c.  v3:= v3 + v4 @kind int;
  #L49eb2e.  v0:= v0 + 1;
  #L49eb32.  goto L49eb0a;
  #L49eb34.  call temp:= `a`(v6, v5) @signature `Lv1/d3;.a:(Z)I` @kind virtual;
  #L49eb3a.  v0:= temp;
  #L49eb3c.  v1:= -1I;
  #L49eb3e.  if v0 == v1 then goto L49eb52;
  #L49eb42.  v3:= v3 * 31;
  #L49eb46.  v3:= v3 + v0 @kind int;
  #L49eb48.  call temp:= `e`(v6, v0, v2, v5) @signature `Lv1/d3;.e:(IIZ)I` @kind virtual;
  #L49eb4e.  v0:= temp;
  #L49eb50.  goto L49eb3c;
  #L49eb52.  return v3;
}
procedure `int` `i`() @signature `Lv1/d3;.i:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `android.util.Pair` `j`(`v1.d3` v8 @kind this, `v1.d3$c` v9 @kind object, `v1.d3$b` v10 @kind object, `int` v11 , `long` v12 ) @signature `Lv1/d3;.j:(Lv1/d3$c;Lv1/d3$b;IJ)Landroid/util/Pair;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49e6d0.  v6:= 0L;
  #L49e6d4.  v0:= v8 @kind object;
  #L49e6d6.  v1:= v9 @kind object;
  #L49e6d8.  v2:= v10 @kind object;
  #L49e6da.  v3:= v11;
  #L49e6dc.  v4:= v12 @kind wide;
  #L49e6de.  call temp:= `k`(v0, v1, v2, v3, v4, v6) @signature `Lv1/d3;.k:(Lv1/d3$c;Lv1/d3$b;IJJ)Landroid/util/Pair;` @kind virtual;
  #L49e6e4.  v9:= temp @kind object;
  #L49e6e6.  call temp:= `e`(v9) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49e6ec.  v9:= temp @kind object;
  #L49e6ee.  v9:= (`android.util.Pair`) v9 @kind object;
  #L49e6f2.  return v9 @kind object;
}
procedure `android.util.Pair` `k`(`v1.d3` v4 @kind this, `v1.d3$c` v5 @kind object, `v1.d3$b` v6 @kind object, `int` v7 , `long` v8 , `long` v10 ) @signature `Lv1/d3;.k:(Lv1/d3$c;Lv1/d3$b;IJJ)Landroid/util/Pair;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49e704.  call temp:= `p`(v4) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49e70a.  v0:= temp;
  #L49e70c.  v1:= 0I;
  #L49e70e.  call temp:= `c`(v7, v1, v0) @signature `Ls3/a;.c:(III)I` @kind static;
  #L49e714.  call temp:= `o`(v4, v7, v5, v10) @signature `Lv1/d3;.o:(ILv1/d3$c;J)Lv1/d3$c;` @kind virtual;
  #L49e71a.  v10:= -4.9E-324D;
  #L49e724.  v7:= lcmp(v8, v10);
  #L49e728.  if v7 != 0 then goto L49e740;
  #L49e72c.  call temp:= `e`(v5) @signature `Lv1/d3$c;.e:()J` @kind virtual;
  #L49e732.  v8:= temp @kind wide;
  #L49e734.  v7:= lcmp(v8, v10);
  #L49e738.  if v7 != 0 then goto L49e740;
  #L49e73c.  v5:= 0I;
  #L49e73e.  return v5 @kind object;
  #L49e740.  v7:= v5.`v1.d3$c.C` @type ^`int`;
  #L49e744.  call temp:= `f`(v4, v7, v6) @signature `Lv1/d3;.f:(ILv1/d3$b;)Lv1/d3$b;` @kind virtual;
  #L49e74a.  v0:= v5.`v1.d3$c.D` @type ^`int`;
  #L49e74e.  if v7 >= v0 then goto L49e77a;
  #L49e752.  v0:= v6.`v1.d3$b.s` @type ^`long` @kind wide;
  #L49e756.  v2:= lcmp(v0, v8);
  #L49e75a.  if v2 == 0 then goto L49e77a;
  #L49e75e.  v0:= v7 + 1;
  #L49e762.  call temp:= `f`(v4, v0, v6) @signature `Lv1/d3;.f:(ILv1/d3$b;)Lv1/d3$b;` @kind virtual;
  #L49e768.  v1:= temp @kind object;
  #L49e76a.  v1:= v1.`v1.d3$b.s` @type ^`long` @kind wide;
  #L49e76e.  v3:= lcmp(v1, v8);
  #L49e772.  if v3 > 0 then goto L49e77a;
  #L49e776.  v7:= v0;
  #L49e778.  goto L49e74a;
  #L49e77a.  v5:= 1I;
  #L49e77c.  call temp:= `g`(v4, v7, v6, v5) @signature `Lv1/d3;.g:(ILv1/d3$b;Z)Lv1/d3$b;` @kind virtual;
  #L49e782.  v0:= v6.`v1.d3$b.s` @type ^`long` @kind wide;
  #L49e786.  v8:= v8 - v0 @kind long;
  #L49e788.  v0:= v6.`v1.d3$b.r` @type ^`long` @kind wide;
  #L49e78c.  v5:= lcmp(v0, v10);
  #L49e790.  if v5 == 0 then goto L49e7a2;
  #L49e794.  v10:= 1L;
  #L49e798.  v0:= v0 - v10 @kind long;
  #L49e79a.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L49e7a0.  v8:= temp @kind wide;
  #L49e7a2.  v10:= 0L;
  #L49e7a6.  call temp:= `max`(v10, v8) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L49e7ac.  v7:= temp @kind wide;
  #L49e7ae.  v5:= v6.`v1.d3$b.p` @type ^`java.lang.Object` @kind object;
  #L49e7b2.  call temp:= `e`(v5) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49e7b8.  v5:= temp @kind object;
  #L49e7ba.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L49e7c0.  v6:= temp @kind object;
  #L49e7c2.  call temp:= `create`(v5, v6) @signature `Landroid/util/Pair;.create:(Ljava/lang/Object;Ljava/lang/Object;)Landroid/util/Pair;` @kind static;
  #L49e7c8.  v5:= temp @kind object;
  #L49e7ca.  return v5 @kind object;
}
procedure `int` `l`(`v1.d3` v2 @kind this, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lv1/d3;.l:(IIZ)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49ea54.  v0:= 1I;
  #L49ea56.  if v4 == 0 then goto L49ea8c;
  #L49ea5a.  if v4 == v0 then goto L49ea8a;
  #L49ea5e.  v1:= 2I;
  #L49ea60.  if v4 != v1 then goto L49ea7e;
  #L49ea64.  call temp:= `a`(v2, v5) @signature `Lv1/d3;.a:(Z)I` @kind virtual;
  #L49ea6a.  v4:= temp;
  #L49ea6c.  if v3 != v4 then goto L49ea7a;
  #L49ea70.  call temp:= `c`(v2, v5) @signature `Lv1/d3;.c:(Z)I` @kind virtual;
  #L49ea76.  v3:= temp;
  #L49ea78.  goto L49ea7c;
  #L49ea7a.  v3:= v3 - v0 @kind int;
  #L49ea7c.  return v3;
  #L49ea7e.  v3:= new `java.lang.IllegalStateException`;
  #L49ea82.  call `<init>`(v3) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L49ea88.  throw v3;
  #L49ea8a.  return v3;
  #L49ea8c.  call temp:= `a`(v2, v5) @signature `Lv1/d3;.a:(Z)I` @kind virtual;
  #L49ea92.  v4:= temp;
  #L49ea94.  if v3 != v4 then goto L49ea9c;
  #L49ea98.  v3:= -1I;
  #L49ea9a.  goto L49ea9e;
  #L49ea9c.  v3:= v3 - v0 @kind int;
  #L49ea9e.  return v3;
}
procedure `java.lang.Object` `m`(`int` v0 ) @signature `Lv1/d3;.m:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `v1.d3$c` `n`(`v1.d3` v2 @kind this, `int` v3 , `v1.d3$c` v4 @kind object) @signature `Lv1/d3;.n:(ILv1/d3$c;)Lv1/d3$c;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49eba4.  v0:= 0L;
  #L49eba8.  call temp:= `o`(v2, v3, v4, v0) @signature `Lv1/d3;.o:(ILv1/d3$c;J)Lv1/d3$c;` @kind virtual;
  #L49ebae.  v3:= temp @kind object;
  #L49ebb0.  return v3 @kind object;
}
procedure `v1.d3$c` `o`(`int` v0 , `v1.d3$c` v1 @kind object, `long` v2 ) @signature `Lv1/d3;.o:(ILv1/d3$c;J)Lv1/d3$c;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `p`() @signature `Lv1/d3;.p:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `q`(`v1.d3` v1 @kind this) @signature `Lv1/d3;.q:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e908.  call temp:= `p`(v1) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49e90e.  v0:= temp;
  #L49e910.  if v0 != 0 then goto L49e918;
  #L49e914.  v0:= 1I;
  #L49e916.  goto L49e91a;
  #L49e918.  v0:= 0I;
  #L49e91a.  return v0;
}
procedure `boolean` `r`(`v1.d3` v0 @kind this, `int` v1 , `v1.d3$b` v2 @kind object, `v1.d3$c` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lv1/d3;.r:(ILv1/d3$b;Lv1/d3$c;IZ)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L49e92c.  call temp:= `d`(v0, v1, v2, v3, v4, v5) @signature `Lv1/d3;.d:(ILv1/d3$b;Lv1/d3$c;IZ)I` @kind virtual;
  #L49e932.  v1:= temp;
  #L49e934.  v2:= -1I;
  #L49e936.  if v1 != v2 then goto L49e93e;
  #L49e93a.  v1:= 1I;
  #L49e93c.  goto L49e940;
  #L49e93e.  v1:= 0I;
  #L49e940.  return v1;
}
