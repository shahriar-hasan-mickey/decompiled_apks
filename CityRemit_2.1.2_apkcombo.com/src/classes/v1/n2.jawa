record `v1.n2` @kind class @AccessFlag FINAL extends `v1.a` @kind class {
  `int` `v1.n2.s` @AccessFlag PRIVATE_FINAL;
  `int` `v1.n2.t` @AccessFlag PRIVATE_FINAL;
  `int`[] `v1.n2.u` @AccessFlag PRIVATE_FINAL;
  `int`[] `v1.n2.v` @AccessFlag PRIVATE_FINAL;
  `v1.d3`[] `v1.n2.w` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `v1.n2.x` @AccessFlag PRIVATE_FINAL;
  `java.util.HashMap` `v1.n2.y` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`v1.n2` v5 @kind this, `java.util.Collection` v6 @kind object, `x2.p0` v7 @kind object) @signature `Lv1/n2;.<init>:(Ljava/util/Collection;Lx2/p0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49cd0c.  v0:= 0I;
  #L49cd0e.  call `<init>`(v5, v0, v7) @signature `Lv1/a;.<init>:(ZLx2/p0;)V` @kind direct;
  #L49cd14.  call temp:= `size`(v6) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L49cd1a.  v7:= temp;
  #L49cd1c.  v1:= new `int`[v7];
  #L49cd20.  v5.`v1.n2.u` @type ^`int`[] := v1 @kind object;
  #L49cd24.  v1:= new `int`[v7];
  #L49cd28.  v5.`v1.n2.v` @type ^`int`[] := v1 @kind object;
  #L49cd2c.  v1:= new `v1.d3`[v7];
  #L49cd30.  v5.`v1.n2.w` @type ^`v1.d3`[] := v1 @kind object;
  #L49cd34.  v7:= new `java.lang.Object`[v7];
  #L49cd38.  v5.`v1.n2.x` @type ^`java.lang.Object`[] := v7 @kind object;
  #L49cd3c.  v7:= new `java.util.HashMap`;
  #L49cd40.  call `<init>`(v7) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L49cd46.  v5.`v1.n2.y` @type ^`java.util.HashMap` := v7 @kind object;
  #L49cd4a.  call temp:= `iterator`(v6) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49cd50.  v6:= temp @kind object;
  #L49cd52.  v7:= 0I;
  #L49cd54.  v1:= 0I;
  #L49cd56.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49cd5c.  v2:= temp;
  #L49cd5e.  if v2 == 0 then goto L49cde4;
  #L49cd62.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49cd68.  v2:= temp @kind object;
  #L49cd6a.  v2:= (`v1.b2`) v2 @kind object;
  #L49cd6e.  v3:= v5.`v1.n2.w` @type ^`v1.d3`[] @kind object;
  #L49cd72.  call temp:= `b`(v2) @signature `Lv1/b2;.b:()Lv1/d3;` @kind interface;
  #L49cd78.  v4:= temp @kind object;
  #L49cd7a.  v3[v1]:= v4 @kind object;
  #L49cd7e.  v3:= v5.`v1.n2.v` @type ^`int`[] @kind object;
  #L49cd82.  v3[v1]:= v0;
  #L49cd86.  v3:= v5.`v1.n2.u` @type ^`int`[] @kind object;
  #L49cd8a.  v3[v1]:= v7;
  #L49cd8e.  v3:= v5.`v1.n2.w` @type ^`v1.d3`[] @kind object;
  #L49cd92.  v3:= v3[v1] @kind object;
  #L49cd96.  call temp:= `p`(v3) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49cd9c.  v3:= temp;
  #L49cd9e.  v0:= v0 + v3 @kind int;
  #L49cda0.  v3:= v5.`v1.n2.w` @type ^`v1.d3`[] @kind object;
  #L49cda4.  v3:= v3[v1] @kind object;
  #L49cda8.  call temp:= `i`(v3) @signature `Lv1/d3;.i:()I` @kind virtual;
  #L49cdae.  v3:= temp;
  #L49cdb0.  v7:= v7 + v3 @kind int;
  #L49cdb2.  v3:= v5.`v1.n2.x` @type ^`java.lang.Object`[] @kind object;
  #L49cdb6.  call temp:= `a`(v2) @signature `Lv1/b2;.a:()Ljava/lang/Object;` @kind interface;
  #L49cdbc.  v2:= temp @kind object;
  #L49cdbe.  v3[v1]:= v2 @kind object;
  #L49cdc2.  v2:= v5.`v1.n2.y` @type ^`java.util.HashMap` @kind object;
  #L49cdc6.  v3:= v5.`v1.n2.x` @type ^`java.lang.Object`[] @kind object;
  #L49cdca.  v3:= v3[v1] @kind object;
  #L49cdce.  v4:= v1 + 1;
  #L49cdd2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49cdd8.  v1:= temp @kind object;
  #L49cdda.  call temp:= `put`(v2, v3, v1) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49cde0.  v1:= v4;
  #L49cde2.  goto L49cd56;
  #L49cde4.  v5.`v1.n2.s` @type ^`int` := v0;
  #L49cde8.  v5.`v1.n2.t` @type ^`int` := v7;
  #L49cdec.  return @kind void;
}
procedure `int` `A`(`v1.n2` v1 @kind this, `int` v2 ) @signature `Lv1/n2;.A:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L49cc68.  v0:= v1.`v1.n2.v` @type ^`int`[] @kind object;
  #L49cc6c.  v2:= v0[v2];
  #L49cc70.  return v2;
}
procedure `v1.d3` `D`(`v1.n2` v1 @kind this, `int` v2 ) @signature `Lv1/n2;.D:(I)Lv1/d3;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L49ccf0.  v0:= v1.`v1.n2.w` @type ^`v1.d3`[] @kind object;
  #L49ccf4.  v2:= v0[v2] @kind object;
  #L49ccf8.  return v2 @kind object;
}
procedure `java.util.List` `E`(`v1.n2` v1 @kind this) @signature `Lv1/n2;.E:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;

  #L49ccd0.  v0:= v1.`v1.n2.w` @type ^`v1.d3`[] @kind object;
  #L49ccd4.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L49ccda.  v0:= temp @kind object;
  #L49ccdc.  return v0 @kind object;
}
procedure `int` `i`(`v1.n2` v1 @kind this) @signature `Lv1/n2;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49cc84.  v0:= v1.`v1.n2.t` @type ^`int`;
  #L49cc88.  return v0;
}
procedure `int` `p`(`v1.n2` v1 @kind this) @signature `Lv1/n2;.p:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49cc9c.  v0:= v1.`v1.n2.s` @type ^`int`;
  #L49cca0.  return v0;
}
procedure `int` `s`(`v1.n2` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lv1/n2;.s:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L49cbd0.  v0:= v1.`v1.n2.y` @type ^`java.util.HashMap` @kind object;
  #L49cbd4.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49cbda.  v2:= temp @kind object;
  #L49cbdc.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L49cbe0.  if v2 != 0 then goto L49cbe8;
  #L49cbe4.  v2:= -1I;
  #L49cbe6.  goto L49cbf0;
  #L49cbe8.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L49cbee.  v2:= temp;
  #L49cbf0.  return v2;
}
procedure `int` `t`(`v1.n2` v2 @kind this, `int` v3 ) @signature `Lv1/n2;.t:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L49cc04.  v0:= v2.`v1.n2.u` @type ^`int`[] @kind object;
  #L49cc08.  v3:= v3 + 1;
  #L49cc0c.  v1:= 0I;
  #L49cc0e.  call temp:= `h`(v0, v3, v1, v1) @signature `Ls3/l0;.h:([IIZZ)I` @kind static;
  #L49cc14.  v3:= temp;
  #L49cc16.  return v3;
}
procedure `int` `u`(`v1.n2` v2 @kind this, `int` v3 ) @signature `Lv1/n2;.u:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L49cc28.  v0:= v2.`v1.n2.v` @type ^`int`[] @kind object;
  #L49cc2c.  v3:= v3 + 1;
  #L49cc30.  v1:= 0I;
  #L49cc32.  call temp:= `h`(v0, v3, v1, v1) @signature `Ls3/l0;.h:([IIZZ)I` @kind static;
  #L49cc38.  v3:= temp;
  #L49cc3a.  return v3;
}
procedure `java.lang.Object` `x`(`v1.n2` v1 @kind this, `int` v2 ) @signature `Lv1/n2;.x:(I)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L49ccb4.  v0:= v1.`v1.n2.x` @type ^`java.lang.Object`[] @kind object;
  #L49ccb8.  v2:= v0[v2] @kind object;
  #L49ccbc.  return v2 @kind object;
}
procedure `int` `z`(`v1.n2` v1 @kind this, `int` v2 ) @signature `Lv1/n2;.z:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L49cc4c.  v0:= v1.`v1.n2.u` @type ^`int`[] @kind object;
  #L49cc50.  v2:= v0[v2];
  #L49cc54.  return v2;
}
