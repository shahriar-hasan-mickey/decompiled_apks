record `v1.k2$b` @kind class @AccessFlag PUBLIC_FINAL extends `v1.g` @kind interface {
  `s3.k` `v1.k2$b.o` @AccessFlag PRIVATE_FINAL;
}
global `v1.k2$b` `@@v1.k2$b.p` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lv1/k2$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L49c42c.  v0:= new `v1.k2$b$a`;
  #L49c430.  call `<init>`(v0) @signature `Lv1/k2$b$a;.<init>:()V` @kind direct;
  #L49c436.  call temp:= `e`(v0) @signature `Lv1/k2$b$a;.e:()Lv1/k2$b;` @kind virtual;
  #L49c43c.  v0:= temp @kind object;
  #L49c43e.  `@@v1.k2$b.p` @type ^`v1.k2$b` := v0 @kind object;
  #L49c442.  return @kind void;
}
procedure `void` `<init>`(`v1.k2$b` v0 @kind this, `s3.k` v1 @kind object) @signature `Lv1/k2$b;.<init>:(Ls3/k;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L49c454.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49c45a.  v0.`v1.k2$b.o` @type ^`s3.k` := v1 @kind object;
  #L49c45e.  return @kind void;
}
procedure `void` `<init>`(`v1.k2$b` v0 @kind this, `s3.k` v1 @kind object, `v1.k2$a` v2 @kind object) @signature `Lv1/k2$b;.<init>:(Ls3/k;Lv1/k2$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L49c470.  call `<init>`(v0, v1) @signature `Lv1/k2$b;.<init>:(Ls3/k;)V` @kind direct;
  #L49c476.  return @kind void;
}
procedure `s3.k` `a`(`v1.k2$b` v0 @kind object) @signature `Lv1/k2$b;.a:(Lv1/k2$b;)Ls3/k;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49c414.  v0:= v0.`v1.k2$b.o` @type ^`s3.k` @kind object;
  #L49c418.  return v0 @kind object;
}
procedure `boolean` `equals`(`v1.k2$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lv1/k2$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49c3b8.  if v1 != v2 then goto L49c3c0;
  #L49c3bc.  v2:= 1I;
  #L49c3be.  return v2;
  #L49c3c0.  v0:= instanceof @variable v2 @type ^`v1.k2$b` @kind boolean;
  #L49c3c4.  if v0 != 0 then goto L49c3cc;
  #L49c3c8.  v2:= 0I;
  #L49c3ca.  return v2;
  #L49c3cc.  v2:= (`v1.k2$b`) v2 @kind object;
  #L49c3d0.  v0:= v1.`v1.k2$b.o` @type ^`s3.k` @kind object;
  #L49c3d4.  v2:= v2.`v1.k2$b.o` @type ^`s3.k` @kind object;
  #L49c3d8.  call temp:= `equals`(v0, v2) @signature `Ls3/k;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L49c3de.  v2:= temp;
  #L49c3e0.  return v2;
}
procedure `int` `hashCode`(`v1.k2$b` v1 @kind this) @signature `Lv1/k2$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49c3f4.  v0:= v1.`v1.k2$b.o` @type ^`s3.k` @kind object;
  #L49c3f8.  call temp:= `hashCode`(v0) @signature `Ls3/k;.hashCode:()I` @kind virtual;
  #L49c3fe.  v0:= temp;
  #L49c400.  return v0;
}
