record `v1.h3$a` @kind class @AccessFlag PUBLIC_FINAL extends `v1.g` @kind interface {
  `int` `v1.h3$a.o` @AccessFlag PUBLIC_FINAL;
  `x2.t0` `v1.h3$a.p` @AccessFlag PRIVATE_FINAL;
  `boolean` `v1.h3$a.q` @AccessFlag PRIVATE_FINAL;
  `int`[] `v1.h3$a.r` @AccessFlag PRIVATE_FINAL;
  `boolean`[] `v1.h3$a.s` @AccessFlag PRIVATE_FINAL;
}
global `v1.g$a` `@@v1.h3$a.t` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lv1/h3$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L49ee7c.  v0:= `@@v1.g3.a` @type ^`v1.g3` @kind object;
  #L49ee80.  `@@v1.h3$a.t` @type ^`v1.g$a` := v0 @kind object;
  #L49ee84.  return @kind void;
}
procedure `void` `<init>`(`v1.h3$a` v4 @kind this, `x2.t0` v5 @kind object, `boolean` v6 , `int`[] v7 @kind object, `boolean`[] v8 @kind object) @signature `Lv1/h3$a;.<init>:(Lx2/t0;Z[I[Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49ee98.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49ee9e.  v0:= v5.`x2.t0.o` @type ^`int`;
  #L49eea2.  v4.`v1.h3$a.o` @type ^`int` := v0;
  #L49eea6.  v1:= length @variable v7;
  #L49eea8.  v2:= 0I;
  #L49eeaa.  v3:= 1I;
  #L49eeac.  if v0 != v1 then goto L49eeba;
  #L49eeb0.  v1:= length @variable v8;
  #L49eeb2.  if v0 != v1 then goto L49eeba;
  #L49eeb6.  v1:= 1I;
  #L49eeb8.  goto L49eebc;
  #L49eeba.  v1:= 0I;
  #L49eebc.  call `a`(v1) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L49eec2.  v4.`v1.h3$a.p` @type ^`x2.t0` := v5 @kind object;
  #L49eec6.  if v6 == 0 then goto L49eed0;
  #L49eeca.  if v0 <= v3 then goto L49eed0;
  #L49eece.  v2:= 1I;
  #L49eed0.  v4.`v1.h3$a.q` @type ^`boolean` := v2 @kind boolean;
  #L49eed4.  call temp:= `clone`(v7) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L49eeda.  v5:= temp @kind object;
  #L49eedc.  v5:= (`int`[]) v5 @kind object;
  #L49eee0.  v4.`v1.h3$a.r` @type ^`int`[] := v5 @kind object;
  #L49eee4.  call temp:= `clone`(v8) @signature `[Z.clone:()Ljava/lang/Object;` @kind virtual;
  #L49eeea.  v5:= temp @kind object;
  #L49eeec.  v5:= (`boolean`[]) v5 @kind object;
  #L49eef0.  v4.`v1.h3$a.s` @type ^`boolean`[] := v5 @kind object;
  #L49eef4.  return @kind void;
}
procedure `v1.h3$a` `a`(`android.os.Bundle` v0 @kind object) @signature `Lv1/h3$a;.a:(Landroid/os/Bundle;)Lv1/h3$a;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L49edb8.  call temp:= `g`(v0) @signature `Lv1/h3$a;.g:(Landroid/os/Bundle;)Lv1/h3$a;` @kind static;
  #L49edbe.  v0:= temp @kind object;
  #L49edc0.  return v0 @kind object;
}
procedure `java.lang.String` `f`(`int` v1 ) @signature `Lv1/h3$a;.f:(I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L49ed78.  v0:= 36I;
  #L49ed7c.  call temp:= `toString`(v1, v0) @signature `Ljava/lang/Integer;.toString:(II)Ljava/lang/String;` @kind static;
  #L49ed82.  v1:= temp @kind object;
  #L49ed84.  return v1 @kind object;
}
procedure `v1.h3$a` `g`(`android.os.Bundle` v5 @kind object) @signature `Lv1/h3$a;.g:(Landroid/os/Bundle;)Lv1/h3$a;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49edd4.  v0:= `@@x2.t0.t` @type ^`v1.g$a` @kind object;
  #L49edd8.  v1:= 0I;
  #L49edda.  call temp:= `f`(v1) @signature `Lv1/h3$a;.f:(I)Ljava/lang/String;` @kind static;
  #L49ede0.  v2:= temp @kind object;
  #L49ede2.  call temp:= `getBundle`(v5, v2) @signature `Landroid/os/Bundle;.getBundle:(Ljava/lang/String;)Landroid/os/Bundle;` @kind virtual;
  #L49ede8.  v2:= temp @kind object;
  #L49edea.  call temp:= `e`(v2) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49edf0.  v2:= temp @kind object;
  #L49edf2.  v2:= (`android.os.Bundle`) v2 @kind object;
  #L49edf6.  call temp:= `a`(v0, v2) @signature `Lv1/g$a;.a:(Landroid/os/Bundle;)Lv1/g;` @kind interface;
  #L49edfc.  v0:= temp @kind object;
  #L49edfe.  v0:= (`x2.t0`) v0 @kind object;
  #L49ee02.  v2:= 1I;
  #L49ee04.  call temp:= `f`(v2) @signature `Lv1/h3$a;.f:(I)Ljava/lang/String;` @kind static;
  #L49ee0a.  v2:= temp @kind object;
  #L49ee0c.  call temp:= `getIntArray`(v5, v2) @signature `Landroid/os/Bundle;.getIntArray:(Ljava/lang/String;)[I` @kind virtual;
  #L49ee12.  v2:= temp @kind object;
  #L49ee14.  v3:= v0.`x2.t0.o` @type ^`int`;
  #L49ee18.  v3:= new `int`[v3];
  #L49ee1c.  call temp:= `a`(v2, v3) @signature `Ll5/g;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49ee22.  v2:= temp @kind object;
  #L49ee24.  v2:= (`int`[]) v2 @kind object;
  #L49ee28.  v3:= 3I;
  #L49ee2a.  call temp:= `f`(v3) @signature `Lv1/h3$a;.f:(I)Ljava/lang/String;` @kind static;
  #L49ee30.  v3:= temp @kind object;
  #L49ee32.  call temp:= `getBooleanArray`(v5, v3) @signature `Landroid/os/Bundle;.getBooleanArray:(Ljava/lang/String;)[Z` @kind virtual;
  #L49ee38.  v3:= temp @kind object;
  #L49ee3a.  v4:= v0.`x2.t0.o` @type ^`int`;
  #L49ee3e.  v4:= new `boolean`[v4];
  #L49ee42.  call temp:= `a`(v3, v4) @signature `Ll5/g;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49ee48.  v3:= temp @kind object;
  #L49ee4a.  v3:= (`boolean`[]) v3 @kind object;
  #L49ee4e.  v4:= 4I;
  #L49ee50.  call temp:= `f`(v4) @signature `Lv1/h3$a;.f:(I)Ljava/lang/String;` @kind static;
  #L49ee56.  v4:= temp @kind object;
  #L49ee58.  call temp:= `getBoolean`(v5, v4, v1) @signature `Landroid/os/Bundle;.getBoolean:(Ljava/lang/String;Z)Z` @kind virtual;
  #L49ee5e.  v5:= temp;
  #L49ee60.  v1:= new `v1.h3$a`;
  #L49ee64.  call `<init>`(v1, v0, v5, v2, v3) @signature `Lv1/h3$a;.<init>:(Lx2/t0;Z[I[Z)V` @kind direct;
  #L49ee6a.  return v1 @kind object;
}
procedure `v1.j1` `b`(`v1.h3$a` v1 @kind this, `int` v2 ) @signature `Lv1/h3$a;.b:(I)Lv1/j1;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ed98.  v0:= v1.`v1.h3$a.p` @type ^`x2.t0` @kind object;
  #L49ed9c.  call temp:= `b`(v0, v2) @signature `Lx2/t0;.b:(I)Lv1/j1;` @kind virtual;
  #L49eda2.  v2:= temp @kind object;
  #L49eda4.  return v2 @kind object;
}
procedure `int` `c`(`v1.h3$a` v1 @kind this) @signature `Lv1/h3$a;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ed10.  v0:= v1.`v1.h3$a.p` @type ^`x2.t0` @kind object;
  #L49ed14.  v0:= v0.`x2.t0.q` @type ^`int`;
  #L49ed18.  return v0;
}
procedure `boolean` `d`(`v1.h3$a` v2 @kind this) @signature `Lv1/h3$a;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49ecd4.  v0:= v2.`v1.h3$a.s` @type ^`boolean`[] @kind object;
  #L49ecd8.  v1:= 1I;
  #L49ecda.  call temp:= `b`(v0, v1) @signature `Lo5/a;.b:([ZZ)Z` @kind static;
  #L49ece0.  v0:= temp;
  #L49ece2.  return v0;
}
procedure `boolean` `e`(`v1.h3$a` v1 @kind this, `int` v2 ) @signature `Lv1/h3$a;.e:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ecf4.  v0:= v1.`v1.h3$a.s` @type ^`boolean`[] @kind object;
  #L49ecf8.  v2:= v0[v2] @kind boolean;
  #L49ecfc.  return v2;
}
procedure `boolean` `equals`(`v1.h3$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lv1/h3$a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49ec50.  v0:= 1I;
  #L49ec52.  if v4 != v5 then goto L49ec58;
  #L49ec56.  return v0;
  #L49ec58.  v1:= 0I;
  #L49ec5a.  if v5 == 0 then goto L49ecc2;
  #L49ec5e.  v2:= constclass @type ^`v1.h3$a` @kind object;
  #L49ec62.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L49ec68.  v3:= temp @kind object;
  #L49ec6a.  if v2 == v3 then goto L49ec70;
  #L49ec6e.  goto L49ecc2;
  #L49ec70.  v5:= (`v1.h3$a`) v5 @kind object;
  #L49ec74.  v2:= v4.`v1.h3$a.q` @type ^`boolean` @kind boolean;
  #L49ec78.  v3:= v5.`v1.h3$a.q` @type ^`boolean` @kind boolean;
  #L49ec7c.  if v2 != v3 then goto L49ecbe;
  #L49ec80.  v2:= v4.`v1.h3$a.p` @type ^`x2.t0` @kind object;
  #L49ec84.  v3:= v5.`v1.h3$a.p` @type ^`x2.t0` @kind object;
  #L49ec88.  call temp:= `equals`(v2, v3) @signature `Lx2/t0;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L49ec8e.  v2:= temp;
  #L49ec90.  if v2 == 0 then goto L49ecbe;
  #L49ec94.  v2:= v4.`v1.h3$a.r` @type ^`int`[] @kind object;
  #L49ec98.  v3:= v5.`v1.h3$a.r` @type ^`int`[] @kind object;
  #L49ec9c.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([I[I)Z` @kind static;
  #L49eca2.  v2:= temp;
  #L49eca4.  if v2 == 0 then goto L49ecbe;
  #L49eca8.  v2:= v4.`v1.h3$a.s` @type ^`boolean`[] @kind object;
  #L49ecac.  v5:= v5.`v1.h3$a.s` @type ^`boolean`[] @kind object;
  #L49ecb0.  call temp:= `equals`(v2, v5) @signature `Ljava/util/Arrays;.equals:([Z[Z)Z` @kind static;
  #L49ecb6.  v5:= temp;
  #L49ecb8.  if v5 == 0 then goto L49ecbe;
  #L49ecbc.  goto L49ecc0;
  #L49ecbe.  v0:= 0I;
  #L49ecc0.  return v0;
  #L49ecc2.  return v1;
}
procedure `int` `hashCode`(`v1.h3$a` v2 @kind this) @signature `Lv1/h3$a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49ed2c.  v0:= v2.`v1.h3$a.p` @type ^`x2.t0` @kind object;
  #L49ed30.  call temp:= `hashCode`(v0) @signature `Lx2/t0;.hashCode:()I` @kind virtual;
  #L49ed36.  v0:= temp;
  #L49ed38.  v0:= v0 * 31;
  #L49ed3c.  v1:= v2.`v1.h3$a.q` @type ^`boolean` @kind boolean;
  #L49ed40.  v0:= v0 + v1 @kind int;
  #L49ed42.  v0:= v0 * 31;
  #L49ed46.  v1:= v2.`v1.h3$a.r` @type ^`int`[] @kind object;
  #L49ed4a.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([I)I` @kind static;
  #L49ed50.  v1:= temp;
  #L49ed52.  v0:= v0 + v1 @kind int;
  #L49ed54.  v0:= v0 * 31;
  #L49ed58.  v1:= v2.`v1.h3$a.s` @type ^`boolean`[] @kind object;
  #L49ed5c.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Z)I` @kind static;
  #L49ed62.  v1:= temp;
  #L49ed64.  v0:= v0 + v1 @kind int;
  #L49ed66.  return v0;
}
