record `v1.f1$e` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `v1.f1$e.a` @AccessFlag PRIVATE;
  `v1.i2` `v1.f1$e.b` @AccessFlag PUBLIC;
  `int` `v1.f1$e.c` @AccessFlag PUBLIC;
  `boolean` `v1.f1$e.d` @AccessFlag PUBLIC;
  `int` `v1.f1$e.e` @AccessFlag PUBLIC;
  `boolean` `v1.f1$e.f` @AccessFlag PUBLIC;
  `int` `v1.f1$e.g` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`v1.f1$e` v0 @kind this, `v1.i2` v1 @kind object) @signature `Lv1/f1$e;.<init>:(Lv1/i2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48c714.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48c71a.  v0.`v1.f1$e.b` @type ^`v1.i2` := v1 @kind object;
  #L48c71e.  return @kind void;
}
procedure `boolean` `a`(`v1.f1$e` v0 @kind object) @signature `Lv1/f1$e;.a:(Lv1/f1$e;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L48c6fc.  v0:= v0.`v1.f1$e.a` @type ^`boolean` @kind boolean;
  #L48c700.  return v0;
}
procedure `void` `b`(`v1.f1$e` v2 @kind this, `int` v3 ) @signature `Lv1/f1$e;.b:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48c730.  v0:= v2.`v1.f1$e.a` @type ^`boolean` @kind boolean;
  #L48c734.  if v3 <= 0 then goto L48c73c;
  #L48c738.  v1:= 1I;
  #L48c73a.  goto L48c73e;
  #L48c73c.  v1:= 0I;
  #L48c73e.  v0:= v0 ^| v1 @kind int;
  #L48c740.  v2.`v1.f1$e.a` @type ^`boolean` := v0 @kind boolean;
  #L48c744.  v0:= v2.`v1.f1$e.c` @type ^`int`;
  #L48c748.  v0:= v0 + v3 @kind int;
  #L48c74a.  v2.`v1.f1$e.c` @type ^`int` := v0;
  #L48c74e.  return @kind void;
}
procedure `void` `c`(`v1.f1$e` v1 @kind this, `int` v2 ) @signature `Lv1/f1$e;.c:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c760.  v0:= 1I;
  #L48c762.  v1.`v1.f1$e.a` @type ^`boolean` := v0 @kind boolean;
  #L48c766.  v1.`v1.f1$e.f` @type ^`boolean` := v0 @kind boolean;
  #L48c76a.  v1.`v1.f1$e.g` @type ^`int` := v2;
  #L48c76e.  return @kind void;
}
procedure `void` `d`(`v1.f1$e` v2 @kind this, `v1.i2` v3 @kind object) @signature `Lv1/f1$e;.d:(Lv1/i2;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48c780.  v0:= v2.`v1.f1$e.a` @type ^`boolean` @kind boolean;
  #L48c784.  v1:= v2.`v1.f1$e.b` @type ^`v1.i2` @kind object;
  #L48c788.  if v1 == v3 then goto L48c790;
  #L48c78c.  v1:= 1I;
  #L48c78e.  goto L48c792;
  #L48c790.  v1:= 0I;
  #L48c792.  v0:= v0 ^| v1 @kind int;
  #L48c794.  v2.`v1.f1$e.a` @type ^`boolean` := v0 @kind boolean;
  #L48c798.  v2.`v1.f1$e.b` @type ^`v1.i2` := v3 @kind object;
  #L48c79c.  return @kind void;
}
procedure `void` `e`(`v1.f1$e` v3 @kind this, `int` v4 ) @signature `Lv1/f1$e;.e:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48c7b0.  v0:= v3.`v1.f1$e.d` @type ^`boolean` @kind boolean;
  #L48c7b4.  v1:= 1I;
  #L48c7b6.  if v0 == 0 then goto L48c7d4;
  #L48c7ba.  v0:= v3.`v1.f1$e.e` @type ^`int`;
  #L48c7be.  v2:= 5I;
  #L48c7c0.  if v0 == v2 then goto L48c7d4;
  #L48c7c4.  if v4 != v2 then goto L48c7ca;
  #L48c7c8.  goto L48c7cc;
  #L48c7ca.  v1:= 0I;
  #L48c7cc.  call `a`(v1) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L48c7d2.  return @kind void;
  #L48c7d4.  v3.`v1.f1$e.a` @type ^`boolean` := v1 @kind boolean;
  #L48c7d8.  v3.`v1.f1$e.d` @type ^`boolean` := v1 @kind boolean;
  #L48c7dc.  v3.`v1.f1$e.e` @type ^`int` := v4;
  #L48c7e0.  return @kind void;
}
