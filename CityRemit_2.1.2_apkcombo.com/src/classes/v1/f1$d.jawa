record `v1.f1$d` @kind class @AccessFlag FINAL extends `java.lang.Comparable` @kind interface {
  `v1.m2` `v1.f1$d.o` @AccessFlag PUBLIC_FINAL;
  `int` `v1.f1$d.p` @AccessFlag PUBLIC;
  `long` `v1.f1$d.q` @AccessFlag PUBLIC;
  `java.lang.Object` `v1.f1$d.r` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`v1.f1$d` v0 @kind this, `v1.m2` v1 @kind object) @signature `Lv1/f1$d;.<init>:(Lv1/m2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48c6c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48c6c6.  v0.`v1.f1$d.o` @type ^`v1.m2` := v1 @kind object;
  #L48c6ca.  return @kind void;
}
procedure `int` `c`(`v1.f1$d` v5 @kind this, `v1.f1$d` v6 @kind object) @signature `Lv1/f1$d;.c:(Lv1/f1$d;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48c65c.  v0:= v5.`v1.f1$d.r` @type ^`java.lang.Object` @kind object;
  #L48c660.  v1:= 1I;
  #L48c662.  v2:= 0I;
  #L48c664.  if v0 != 0 then goto L48c66c;
  #L48c668.  v3:= 1I;
  #L48c66a.  goto L48c66e;
  #L48c66c.  v3:= 0I;
  #L48c66e.  v4:= v6.`v1.f1$d.r` @type ^`java.lang.Object` @kind object;
  #L48c672.  if v4 != 0 then goto L48c67a;
  #L48c676.  v4:= 1I;
  #L48c678.  goto L48c67c;
  #L48c67a.  v4:= 0I;
  #L48c67c.  if v3 == v4 then goto L48c688;
  #L48c680.  if v0 == 0 then goto L48c686;
  #L48c684.  v1:= -1I;
  #L48c686.  return v1;
  #L48c688.  if v0 != 0 then goto L48c68e;
  #L48c68c.  return v2;
  #L48c68e.  v0:= v5.`v1.f1$d.p` @type ^`int`;
  #L48c692.  v1:= v6.`v1.f1$d.p` @type ^`int`;
  #L48c696.  v0:= v0 - v1 @kind int;
  #L48c698.  if v0 == 0 then goto L48c69e;
  #L48c69c.  return v0;
  #L48c69e.  v0:= v5.`v1.f1$d.q` @type ^`long` @kind wide;
  #L48c6a2.  v2:= v6.`v1.f1$d.q` @type ^`long` @kind wide;
  #L48c6a6.  call temp:= `o`(v0, v2) @signature `Ls3/l0;.o:(JJ)I` @kind static;
  #L48c6ac.  v6:= temp;
  #L48c6ae.  return v6;
}
procedure `int` `compareTo`(`v1.f1$d` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lv1/f1$d;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48c63c.  v1:= (`v1.f1$d`) v1 @kind object;
  #L48c640.  call temp:= `c`(v0, v1) @signature `Lv1/f1$d;.c:(Lv1/f1$d;)I` @kind virtual;
  #L48c646.  v1:= temp;
  #L48c648.  return v1;
}
procedure `void` `d`(`v1.f1$d` v0 @kind this, `int` v1 , `long` v2 , `java.lang.Object` v4 @kind object) @signature `Lv1/f1$d;.d:(IJLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L48c6dc.  v0.`v1.f1$d.p` @type ^`int` := v1;
  #L48c6e0.  v0.`v1.f1$d.q` @type ^`long` := v2 @kind wide;
  #L48c6e4.  v0.`v1.f1$d.r` @type ^`java.lang.Object` := v4 @kind object;
  #L48c6e8.  return @kind void;
}
