record `v1.j2` @kind class @AccessFlag PUBLIC_FINAL extends `v1.g` @kind interface {
  `float` `v1.j2.o` @AccessFlag PUBLIC_FINAL;
  `float` `v1.j2.p` @AccessFlag PUBLIC_FINAL;
  `int` `v1.j2.q` @AccessFlag PRIVATE_FINAL;
}
global `v1.j2` `@@v1.j2.r` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lv1/j2;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49c238.  v0:= new `v1.j2`;
  #L49c23c.  v1:= 1.0F;
  #L49c240.  call `<init>`(v0, v1) @signature `Lv1/j2;.<init>:(F)V` @kind direct;
  #L49c246.  `@@v1.j2.r` @type ^`v1.j2` := v0 @kind object;
  #L49c24a.  return @kind void;
}
procedure `void` `<init>`(`v1.j2` v1 @kind this, `float` v2 ) @signature `Lv1/j2;.<init>:(F)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L49c25c.  v0:= 1.0F;
  #L49c260.  call `<init>`(v1, v2, v0) @signature `Lv1/j2;.<init>:(FF)V` @kind direct;
  #L49c266.  return @kind void;
}
procedure `void` `<init>`(`v1.j2` v4 @kind this, `float` v5 , `float` v6 ) @signature `Lv1/j2;.<init>:(FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49c278.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49c27e.  v0:= 1I;
  #L49c280.  v1:= 0I;
  #L49c282.  v2:= 0I;
  #L49c284.  v3:= fcmpl(v5, v2);
  #L49c288.  if v3 <= 0 then goto L49c290;
  #L49c28c.  v3:= 1I;
  #L49c28e.  goto L49c292;
  #L49c290.  v3:= 0I;
  #L49c292.  call `a`(v3) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L49c298.  v2:= fcmpl(v6, v2);
  #L49c29c.  if v2 <= 0 then goto L49c2a2;
  #L49c2a0.  goto L49c2a4;
  #L49c2a2.  v0:= 0I;
  #L49c2a4.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L49c2aa.  v4.`v1.j2.o` @type ^`float` := v5;
  #L49c2ae.  v4.`v1.j2.p` @type ^`float` := v6;
  #L49c2b2.  v6:= 1000.0F;
  #L49c2b6.  v5:= v5 * v6 @kind float;
  #L49c2ba.  call temp:= `round`(v5) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L49c2c0.  v5:= temp;
  #L49c2c2.  v4.`v1.j2.q` @type ^`int` := v5;
  #L49c2c6.  return @kind void;
}
procedure `long` `a`(`v1.j2` v2 @kind this, `long` v3 ) @signature `Lv1/j2;.a:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49c1fc.  v0:= v2.`v1.j2.q` @type ^`int`;
  #L49c200.  v0:= (`long`) v0 @kind i2l;
  #L49c202.  v3:= v3 * v0 @kind long;
  #L49c206.  return v3 @kind wide;
}
procedure `v1.j2` `b`(`v1.j2` v2 @kind this, `float` v3 ) @signature `Lv1/j2;.b:(F)Lv1/j2;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49c218.  v0:= new `v1.j2`;
  #L49c21c.  v1:= v2.`v1.j2.p` @type ^`float`;
  #L49c220.  call `<init>`(v0, v3, v1) @signature `Lv1/j2;.<init>:(FF)V` @kind direct;
  #L49c226.  return v0 @kind object;
}
procedure `boolean` `equals`(`v1.j2` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lv1/j2;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49c120.  v0:= 1I;
  #L49c122.  if v4 != v5 then goto L49c128;
  #L49c126.  return v0;
  #L49c128.  v1:= 0I;
  #L49c12a.  if v5 == 0 then goto L49c16a;
  #L49c12e.  v2:= constclass @type ^`v1.j2` @kind object;
  #L49c132.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L49c138.  v3:= temp @kind object;
  #L49c13a.  if v2 == v3 then goto L49c140;
  #L49c13e.  goto L49c16a;
  #L49c140.  v5:= (`v1.j2`) v5 @kind object;
  #L49c144.  v2:= v4.`v1.j2.o` @type ^`float`;
  #L49c148.  v3:= v5.`v1.j2.o` @type ^`float`;
  #L49c14c.  v2:= fcmpl(v2, v3);
  #L49c150.  if v2 != 0 then goto L49c166;
  #L49c154.  v2:= v4.`v1.j2.p` @type ^`float`;
  #L49c158.  v5:= v5.`v1.j2.p` @type ^`float`;
  #L49c15c.  v5:= fcmpl(v2, v5);
  #L49c160.  if v5 != 0 then goto L49c166;
  #L49c164.  goto L49c168;
  #L49c166.  v0:= 0I;
  #L49c168.  return v0;
  #L49c16a.  return v1;
}
procedure `int` `hashCode`(`v1.j2` v2 @kind this) @signature `Lv1/j2;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49c17c.  v0:= v2.`v1.j2.o` @type ^`float`;
  #L49c180.  call temp:= `floatToRawIntBits`(v0) @signature `Ljava/lang/Float;.floatToRawIntBits:(F)I` @kind static;
  #L49c186.  v0:= temp;
  #L49c188.  v1:= 527I;
  #L49c18c.  v1:= v1 + v0 @kind int;
  #L49c18e.  v1:= v1 * 31;
  #L49c192.  v0:= v2.`v1.j2.p` @type ^`float`;
  #L49c196.  call temp:= `floatToRawIntBits`(v0) @signature `Ljava/lang/Float;.floatToRawIntBits:(F)I` @kind static;
  #L49c19c.  v0:= temp;
  #L49c19e.  v1:= v1 + v0 @kind int;
  #L49c1a0.  return v1;
}
procedure `java.lang.String` `toString`(`v1.j2` v3 @kind this) @signature `Lv1/j2;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49c1b4.  v0:= 2I;
  #L49c1b6.  v0:= new `java.lang.Object`[v0];
  #L49c1ba.  v1:= v3.`v1.j2.o` @type ^`float`;
  #L49c1be.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L49c1c4.  v1:= temp @kind object;
  #L49c1c6.  v2:= 0I;
  #L49c1c8.  v0[v2]:= v1 @kind object;
  #L49c1cc.  v1:= v3.`v1.j2.p` @type ^`float`;
  #L49c1d0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L49c1d6.  v1:= temp @kind object;
  #L49c1d8.  v2:= 1I;
  #L49c1da.  v0[v2]:= v1 @kind object;
  #L49c1de.  v1:= "PlaybackParameters(speed=%.2f, pitch=%.2f)" @kind object;
  #L49c1e2.  call temp:= `C`(v1, v0) @signature `Ls3/l0;.C:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L49c1e8.  v0:= temp @kind object;
  #L49c1ea.  return v0 @kind object;
}
