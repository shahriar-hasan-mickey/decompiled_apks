record `v1.k2$c` @kind class @AccessFlag PUBLIC_FINAL {
  `s3.k` `v1.k2$c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`v1.k2$c` v0 @kind this, `s3.k` v1 @kind object) @signature `Lv1/k2$c;.<init>:(Ls3/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49c4e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49c4ea.  v0.`v1.k2$c.a` @type ^`s3.k` := v1 @kind object;
  #L49c4ee.  return @kind void;
}
procedure `boolean` `equals`(`v1.k2$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lv1/k2$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49c488.  if v1 != v2 then goto L49c490;
  #L49c48c.  v2:= 1I;
  #L49c48e.  return v2;
  #L49c490.  v0:= instanceof @variable v2 @type ^`v1.k2$c` @kind boolean;
  #L49c494.  if v0 != 0 then goto L49c49c;
  #L49c498.  v2:= 0I;
  #L49c49a.  return v2;
  #L49c49c.  v2:= (`v1.k2$c`) v2 @kind object;
  #L49c4a0.  v0:= v1.`v1.k2$c.a` @type ^`s3.k` @kind object;
  #L49c4a4.  v2:= v2.`v1.k2$c.a` @type ^`s3.k` @kind object;
  #L49c4a8.  call temp:= `equals`(v0, v2) @signature `Ls3/k;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L49c4ae.  v2:= temp;
  #L49c4b0.  return v2;
}
procedure `int` `hashCode`(`v1.k2$c` v1 @kind this) @signature `Lv1/k2$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49c4c4.  v0:= v1.`v1.k2$c.a` @type ^`s3.k` @kind object;
  #L49c4c8.  call temp:= `hashCode`(v0) @signature `Ls3/k;.hashCode:()I` @kind virtual;
  #L49c4ce.  v0:= temp;
  #L49c4d0.  return v0;
}
