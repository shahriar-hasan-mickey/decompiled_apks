record `v1.x1` @kind class @AccessFlag FINAL {
  `x2.r` `v1.x1.a` @AccessFlag PUBLIC_FINAL;
  `java.lang.Object` `v1.x1.b` @AccessFlag PUBLIC_FINAL;
  `x2.n0`[] `v1.x1.c` @AccessFlag PUBLIC_FINAL;
  `boolean` `v1.x1.d` @AccessFlag PUBLIC;
  `boolean` `v1.x1.e` @AccessFlag PUBLIC;
  `v1.y1` `v1.x1.f` @AccessFlag PUBLIC;
  `boolean` `v1.x1.g` @AccessFlag PUBLIC;
  `boolean`[] `v1.x1.h` @AccessFlag PRIVATE_FINAL;
  `v1.t2`[] `v1.x1.i` @AccessFlag PRIVATE_FINAL;
  `q3.a0` `v1.x1.j` @AccessFlag PRIVATE_FINAL;
  `v1.d2` `v1.x1.k` @AccessFlag PRIVATE_FINAL;
  `v1.x1` `v1.x1.l` @AccessFlag PRIVATE;
  `x2.v0` `v1.x1.m` @AccessFlag PRIVATE;
  `q3.b0` `v1.x1.n` @AccessFlag PRIVATE;
  `long` `v1.x1.o` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`v1.x1` v7 @kind this, `v1.t2`[] v8 @kind object, `long` v9 , `q3.a0` v11 @kind object, `r3.b` v12 @kind object, `v1.d2` v13 @kind object, `v1.y1` v14 @kind object, `q3.b0` v15 @kind object) @signature `Lv1/x1;.<init>:([Lv1/t2;JLq3/a0;Lr3/b;Lv1/d2;Lv1/y1;Lq3/b0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49914c.  call `<init>`(v7) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L499152.  v7.`v1.x1.i` @type ^`v1.t2`[] := v8 @kind object;
  #L499156.  v7.`v1.x1.o` @type ^`long` := v9 @kind wide;
  #L49915a.  v7.`v1.x1.j` @type ^`q3.a0` := v11 @kind object;
  #L49915e.  v7.`v1.x1.k` @type ^`v1.d2` := v13 @kind object;
  #L499162.  v0:= v14.`v1.y1.a` @type ^`x2.u$b` @kind object;
  #L499166.  v9:= v0.`x2.s.a` @type ^`java.lang.Object` @kind object;
  #L49916a.  v7.`v1.x1.b` @type ^`java.lang.Object` := v9 @kind object;
  #L49916e.  v7.`v1.x1.f` @type ^`v1.y1` := v14 @kind object;
  #L499172.  v9:= `@@x2.v0.r` @type ^`x2.v0` @kind object;
  #L499176.  v7.`v1.x1.m` @type ^`x2.v0` := v9 @kind object;
  #L49917a.  v7.`v1.x1.n` @type ^`q3.b0` := v15 @kind object;
  #L49917e.  v9:= length @variable v8;
  #L499180.  v9:= new `x2.n0`[v9];
  #L499184.  v7.`v1.x1.c` @type ^`x2.n0`[] := v9 @kind object;
  #L499188.  v8:= length @variable v8;
  #L49918a.  v8:= new `boolean`[v8];
  #L49918e.  v7.`v1.x1.h` @type ^`boolean`[] := v8 @kind object;
  #L499192.  v3:= v14.`v1.y1.b` @type ^`long` @kind wide;
  #L499196.  v5:= v14.`v1.y1.d` @type ^`long` @kind wide;
  #L49919a.  v1:= v13 @kind object;
  #L49919c.  v2:= v12 @kind object;
  #L49919e.  call temp:= `e`(v0, v1, v2, v3, v5) @signature `Lv1/x1;.e:(Lx2/u$b;Lv1/d2;Lr3/b;JJ)Lx2/r;` @kind static;
  #L4991a4.  v8:= temp @kind object;
  #L4991a6.  v7.`v1.x1.a` @type ^`x2.r` := v8 @kind object;
  #L4991aa.  return @kind void;
}
procedure `void` `c`(`v1.x1` v3 @kind this, `x2.n0`[] v4 @kind object) @signature `Lv1/x1;.c:([Lx2/n0;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4991bc.  v0:= 0I;
  #L4991be.  v1:= v3.`v1.x1.i` @type ^`v1.t2`[] @kind object;
  #L4991c2.  v2:= length @variable v1;
  #L4991c4.  if v0 >= v2 then goto L4991fe;
  #L4991c8.  v1:= v1[v0] @kind object;
  #L4991cc.  call temp:= `j`(v1) @signature `Lv1/t2;.j:()I` @kind interface;
  #L4991d2.  v1:= temp;
  #L4991d4.  v2:= -2I;
  #L4991d6.  if v1 != v2 then goto L4991f8;
  #L4991da.  v1:= v3.`v1.x1.n` @type ^`q3.b0` @kind object;
  #L4991de.  call temp:= `c`(v1, v0) @signature `Lq3/b0;.c:(I)Z` @kind virtual;
  #L4991e4.  v1:= temp;
  #L4991e6.  if v1 == 0 then goto L4991f8;
  #L4991ea.  v1:= new `x2.k`;
  #L4991ee.  call `<init>`(v1) @signature `Lx2/k;.<init>:()V` @kind direct;
  #L4991f4.  v4[v0]:= v1 @kind object;
  #L4991f8.  v0:= v0 + 1;
  #L4991fc.  goto L4991be;
  #L4991fe.  return @kind void;
}
procedure `x2.r` `e`(`x2.u$b` v7 @kind object, `v1.d2` v8 @kind object, `r3.b` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lv1/x1;.e:(Lx2/u$b;Lv1/d2;Lr3/b;JJ)Lx2/r;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L499504.  call temp:= `h`(v8, v7, v9, v10) @signature `Lv1/d2;.h:(Lx2/u$b;Lr3/b;J)Lx2/r;` @kind virtual;
  #L49950a.  v1:= temp @kind object;
  #L49950c.  v7:= -4.9E-324D;
  #L499516.  v9:= lcmp(v12, v7);
  #L49951a.  if v9 == 0 then goto L499534;
  #L49951e.  v7:= new `x2.d`;
  #L499522.  v2:= 1I;
  #L499524.  v3:= 0L;
  #L499528.  v0:= v7 @kind object;
  #L49952a.  v5:= v12 @kind wide;
  #L49952c.  call `<init>`(v0, v1, v2, v3, v5) @signature `Lx2/d;.<init>:(Lx2/r;ZJJ)V` @kind direct;
  #L499532.  v1:= v7 @kind object;
  #L499534.  return v1 @kind object;
}
procedure `void` `f`(`v1.x1` v3 @kind this) @signature `Lv1/x1;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L499244.  call temp:= `r`(v3) @signature `Lv1/x1;.r:()Z` @kind direct;
  #L49924a.  v0:= temp;
  #L49924c.  if v0 != 0 then goto L499252;
  #L499250.  return @kind void;
  #L499252.  v0:= 0I;
  #L499254.  v1:= v3.`v1.x1.n` @type ^`q3.b0` @kind object;
  #L499258.  v2:= v1.`q3.b0.a` @type ^`int`;
  #L49925c.  if v0 >= v2 then goto L499288;
  #L499260.  call temp:= `c`(v1, v0) @signature `Lq3/b0;.c:(I)Z` @kind virtual;
  #L499266.  v1:= temp;
  #L499268.  v2:= v3.`v1.x1.n` @type ^`q3.b0` @kind object;
  #L49926c.  v2:= v2.`q3.b0.c` @type ^`q3.s`[] @kind object;
  #L499270.  v2:= v2[v0] @kind object;
  #L499274.  if v1 == 0 then goto L499282;
  #L499278.  if v2 == 0 then goto L499282;
  #L49927c.  call `f`(v2) @signature `Lq3/s;.f:()V` @kind interface;
  #L499282.  v0:= v0 + 1;
  #L499286.  goto L499254;
  #L499288.  return @kind void;
}
procedure `void` `g`(`v1.x1` v3 @kind this, `x2.n0`[] v4 @kind object) @signature `Lv1/x1;.g:([Lx2/n0;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L49929c.  v0:= 0I;
  #L49929e.  v1:= v3.`v1.x1.i` @type ^`v1.t2`[] @kind object;
  #L4992a2.  v2:= length @variable v1;
  #L4992a4.  if v0 >= v2 then goto L4992c6;
  #L4992a8.  v1:= v1[v0] @kind object;
  #L4992ac.  call temp:= `j`(v1) @signature `Lv1/t2;.j:()I` @kind interface;
  #L4992b2.  v1:= temp;
  #L4992b4.  v2:= -2I;
  #L4992b6.  if v1 != v2 then goto L4992c0;
  #L4992ba.  v1:= 0I;
  #L4992bc.  v4[v0]:= v1 @kind object;
  #L4992c0.  v0:= v0 + 1;
  #L4992c4.  goto L49929e;
  #L4992c6.  return @kind void;
}
procedure `void` `h`(`v1.x1` v3 @kind this) @signature `Lv1/x1;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4992d8.  call temp:= `r`(v3) @signature `Lv1/x1;.r:()Z` @kind direct;
  #L4992de.  v0:= temp;
  #L4992e0.  if v0 != 0 then goto L4992e6;
  #L4992e4.  return @kind void;
  #L4992e6.  v0:= 0I;
  #L4992e8.  v1:= v3.`v1.x1.n` @type ^`q3.b0` @kind object;
  #L4992ec.  v2:= v1.`q3.b0.a` @type ^`int`;
  #L4992f0.  if v0 >= v2 then goto L49931c;
  #L4992f4.  call temp:= `c`(v1, v0) @signature `Lq3/b0;.c:(I)Z` @kind virtual;
  #L4992fa.  v1:= temp;
  #L4992fc.  v2:= v3.`v1.x1.n` @type ^`q3.b0` @kind object;
  #L499300.  v2:= v2.`q3.b0.c` @type ^`q3.s`[] @kind object;
  #L499304.  v2:= v2[v0] @kind object;
  #L499308.  if v1 == 0 then goto L499316;
  #L49930c.  if v2 == 0 then goto L499316;
  #L499310.  call `j`(v2) @signature `Lq3/s;.j:()V` @kind interface;
  #L499316.  v0:= v0 + 1;
  #L49931a.  goto L4992e8;
  #L49931c.  return @kind void;
}
procedure `boolean` `r`(`v1.x1` v1 @kind this) @signature `Lv1/x1;.r:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L498ea4.  v0:= v1.`v1.x1.l` @type ^`v1.x1` @kind object;
  #L498ea8.  if v0 != 0 then goto L498eb0;
  #L498eac.  v0:= 1I;
  #L498eae.  goto L498eb2;
  #L498eb0.  v0:= 0I;
  #L498eb2.  return v0;
}
procedure `void` `u`(`v1.d2` v1 @kind object, `x2.r` v2 @kind object) @signature `Lv1/x1;.u:(Lv1/d2;Lx2/r;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L499428.  v0:= instanceof @variable v2 @type ^`x2.d` @kind boolean;
  #L49942c.  if v0 == 0 then goto L499438;
  #L499430.  v2:= (`x2.d`) v2 @kind object;
  #L499434.  v2:= v2.`x2.d.o` @type ^`x2.r` @kind object;
  #L499438.  call `z`(v1, v2) @signature `Lv1/d2;.z:(Lx2/r;)V` @kind virtual;
  #L49943e.  goto L499450;
  #L499440.  v1:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L499442.  v2:= "MediaPeriodHolder" @kind object;
  #L499446.  v0:= "Period release failed." @kind object;
  #L49944a.  call `d`(v2, v0, v1) @signature `Ls3/q;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind static;
  #L499450.  return @kind void;
  catch `java.lang.RuntimeException` @[L499428..L49943e] goto L499440;
}
procedure `void` `A`(`v1.x1` v6 @kind this) @signature `Lv1/x1;.A:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4994b8.  v0:= v6.`v1.x1.a` @type ^`x2.r` @kind object;
  #L4994bc.  v1:= instanceof @variable v0 @type ^`x2.d` @kind boolean;
  #L4994c0.  if v1 == 0 then goto L4994f0;
  #L4994c4.  v1:= v6.`v1.x1.f` @type ^`v1.y1` @kind object;
  #L4994c8.  v1:= v1.`v1.y1.d` @type ^`long` @kind wide;
  #L4994cc.  v3:= -4.9E-324D;
  #L4994d6.  v5:= lcmp(v1, v3);
  #L4994da.  if v5 != 0 then goto L4994e2;
  #L4994de.  v1:= -9223372036854775808L;
  #L4994e2.  v0:= (`x2.d`) v0 @kind object;
  #L4994e6.  v3:= 0L;
  #L4994ea.  call `v`(v0, v3, v1) @signature `Lx2/d;.v:(JJ)V` @kind virtual;
  #L4994f0.  return @kind void;
}
procedure `long` `a`(`v1.x1` v7 @kind this, `q3.b0` v8 @kind object, `long` v9 , `boolean` v11 ) @signature `Lv1/x1;.a:(Lq3/b0;JZ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L498ec4.  v0:= v7.`v1.x1.i` @type ^`v1.t2`[] @kind object;
  #L498ec8.  v0:= length @variable v0;
  #L498eca.  v6:= new `boolean`[v0];
  #L498ece.  v1:= v7 @kind object;
  #L498ed0.  v2:= v8 @kind object;
  #L498ed2.  v3:= v9 @kind wide;
  #L498ed4.  v5:= v11;
  #L498ed6.  call temp:= `b`(v1, v2, v3, v5, v6) @signature `Lv1/x1;.b:(Lq3/b0;JZ[Z)J` @kind virtual;
  #L498edc.  v8:= temp @kind wide;
  #L498ede.  return v8 @kind wide;
}
procedure `long` `b`(`v1.x1` v13 @kind this, `q3.b0` v14 @kind object, `long` v15 , `boolean` v17 , `boolean`[] v18 @kind object) @signature `Lv1/x1;.b:(Lq3/b0;JZ[Z)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L498ef0.  v0:= v13 @kind object;
  #L498ef2.  v1:= v14 @kind object;
  #L498ef4.  v2:= 0I;
  #L498ef6.  v3:= 0I;
  #L498ef8.  v4:= v1.`q3.b0.a` @type ^`int`;
  #L498efc.  v5:= 1I;
  #L498efe.  if v3 >= v4 then goto L498f28;
  #L498f02.  v4:= v0.`v1.x1.h` @type ^`boolean`[] @kind object;
  #L498f06.  if v17 != 0 then goto L498f1c;
  #L498f0a.  v6:= v0.`v1.x1.n` @type ^`q3.b0` @kind object;
  #L498f0e.  call temp:= `b`(v14, v6, v3) @signature `Lq3/b0;.b:(Lq3/b0;I)Z` @kind virtual;
  #L498f14.  v6:= temp;
  #L498f16.  if v6 == 0 then goto L498f1c;
  #L498f1a.  goto L498f1e;
  #L498f1c.  v5:= 0I;
  #L498f1e.  v4[v3]:= v5 @kind boolean;
  #L498f22.  v3:= v3 + 1;
  #L498f26.  goto L498ef8;
  #L498f28.  v3:= v0.`v1.x1.c` @type ^`x2.n0`[] @kind object;
  #L498f2c.  call `g`(v13, v3) @signature `Lv1/x1;.g:([Lx2/n0;)V` @kind direct;
  #L498f32.  call `f`(v13) @signature `Lv1/x1;.f:()V` @kind direct;
  #L498f38.  v0.`v1.x1.n` @type ^`q3.b0` := v1 @kind object;
  #L498f3c.  call `h`(v13) @signature `Lv1/x1;.h:()V` @kind direct;
  #L498f42.  v6:= v0.`v1.x1.a` @type ^`x2.r` @kind object;
  #L498f46.  v7:= v1.`q3.b0.c` @type ^`q3.s`[] @kind object;
  #L498f4a.  v8:= v0.`v1.x1.h` @type ^`boolean`[] @kind object;
  #L498f4e.  v9:= v0.`v1.x1.c` @type ^`x2.n0`[] @kind object;
  #L498f52.  v10:= v18 @kind object;
  #L498f56.  v11:= v15 @kind wide;
  #L498f58.  call temp:= `k`(v6, v7, v8, v9, v10, v11) @signature `Lx2/r;.k:([Lq3/s;[Z[Lx2/n0;[ZJ)J` @kind interface;
  #L498f5e.  v3:= temp @kind wide;
  #L498f60.  v6:= v0.`v1.x1.c` @type ^`x2.n0`[] @kind object;
  #L498f64.  call `c`(v13, v6) @signature `Lv1/x1;.c:([Lx2/n0;)V` @kind direct;
  #L498f6a.  v0.`v1.x1.e` @type ^`boolean` := v2 @kind boolean;
  #L498f6e.  v6:= 0I;
  #L498f70.  v7:= v0.`v1.x1.c` @type ^`x2.n0`[] @kind object;
  #L498f74.  v8:= length @variable v7;
  #L498f76.  if v6 >= v8 then goto L498fca;
  #L498f7a.  v7:= v7[v6] @kind object;
  #L498f7e.  if v7 == 0 then goto L498fac;
  #L498f82.  call temp:= `c`(v14, v6) @signature `Lq3/b0;.c:(I)Z` @kind virtual;
  #L498f88.  v7:= temp;
  #L498f8a.  call `f`(v7) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L498f90.  v7:= v0.`v1.x1.i` @type ^`v1.t2`[] @kind object;
  #L498f94.  v7:= v7[v6] @kind object;
  #L498f98.  call temp:= `j`(v7) @signature `Lv1/t2;.j:()I` @kind interface;
  #L498f9e.  v7:= temp;
  #L498fa0.  v8:= -2I;
  #L498fa2.  if v7 == v8 then goto L498fc4;
  #L498fa6.  v0.`v1.x1.e` @type ^`boolean` := v5 @kind boolean;
  #L498faa.  goto L498fc4;
  #L498fac.  v7:= v1.`q3.b0.c` @type ^`q3.s`[] @kind object;
  #L498fb0.  v7:= v7[v6] @kind object;
  #L498fb4.  if v7 != 0 then goto L498fbc;
  #L498fb8.  v7:= 1I;
  #L498fba.  goto L498fbe;
  #L498fbc.  v7:= 0I;
  #L498fbe.  call `f`(v7) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L498fc4.  v6:= v6 + 1;
  #L498fc8.  goto L498f70;
  #L498fca.  return v3 @kind wide;
}
procedure `void` `d`(`v1.x1` v1 @kind this, `long` v2 ) @signature `Lv1/x1;.d:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L499210.  call temp:= `r`(v1) @signature `Lv1/x1;.r:()Z` @kind direct;
  #L499216.  v0:= temp;
  #L499218.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L49921e.  call temp:= `y`(v1, v2) @signature `Lv1/x1;.y:(J)J` @kind virtual;
  #L499224.  v2:= temp @kind wide;
  #L499226.  v0:= v1.`v1.x1.a` @type ^`x2.r` @kind object;
  #L49922a.  call temp:= `g`(v0, v2) @signature `Lx2/r;.g:(J)Z` @kind interface;
  #L499230.  return @kind void;
}
procedure `long` `i`(`v1.x1` v5 @kind this) @signature `Lv1/x1;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L498fdc.  v0:= v5.`v1.x1.d` @type ^`boolean` @kind boolean;
  #L498fe0.  if v0 != 0 then goto L498fee;
  #L498fe4.  v0:= v5.`v1.x1.f` @type ^`v1.y1` @kind object;
  #L498fe8.  v0:= v0.`v1.y1.b` @type ^`long` @kind wide;
  #L498fec.  return v0 @kind wide;
  #L498fee.  v0:= v5.`v1.x1.e` @type ^`boolean` @kind boolean;
  #L498ff2.  v1:= -9223372036854775808L;
  #L498ff6.  if v0 == 0 then goto L499008;
  #L498ffa.  v0:= v5.`v1.x1.a` @type ^`x2.r` @kind object;
  #L498ffe.  call temp:= `f`(v0) @signature `Lx2/r;.f:()J` @kind interface;
  #L499004.  v3:= temp @kind wide;
  #L499006.  goto L49900a;
  #L499008.  v3:= v1 @kind wide;
  #L49900a.  v0:= lcmp(v3, v1);
  #L49900e.  if v0 != 0 then goto L49901a;
  #L499012.  v0:= v5.`v1.x1.f` @type ^`v1.y1` @kind object;
  #L499016.  v3:= v0.`v1.y1.e` @type ^`long` @kind wide;
  #L49901a.  return v3 @kind wide;
}
procedure `v1.x1` `j`(`v1.x1` v1 @kind this) @signature `Lv1/x1;.j:()Lv1/x1;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L499134.  v0:= v1.`v1.x1.l` @type ^`v1.x1` @kind object;
  #L499138.  return v0 @kind object;
}
procedure `long` `k`(`v1.x1` v2 @kind this) @signature `Lv1/x1;.k:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49902c.  v0:= v2.`v1.x1.d` @type ^`boolean` @kind boolean;
  #L499030.  if v0 != 0 then goto L49903a;
  #L499034.  v0:= 0L;
  #L499038.  goto L499046;
  #L49903a.  v0:= v2.`v1.x1.a` @type ^`x2.r` @kind object;
  #L49903e.  call temp:= `d`(v0) @signature `Lx2/r;.d:()J` @kind interface;
  #L499044.  v0:= temp @kind wide;
  #L499046.  return v0 @kind wide;
}
procedure `long` `l`(`v1.x1` v2 @kind this) @signature `Lv1/x1;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L499058.  v0:= v2.`v1.x1.o` @type ^`long` @kind wide;
  #L49905c.  return v0 @kind wide;
}
procedure `long` `m`(`v1.x1` v4 @kind this) @signature `Lv1/x1;.m:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L499070.  v0:= v4.`v1.x1.f` @type ^`v1.y1` @kind object;
  #L499074.  v0:= v0.`v1.y1.b` @type ^`long` @kind wide;
  #L499078.  v2:= v4.`v1.x1.o` @type ^`long` @kind wide;
  #L49907c.  v0:= v0 + v2 @kind long;
  #L49907e.  return v0 @kind wide;
}
procedure `x2.v0` `n`(`v1.x1` v1 @kind this) @signature `Lv1/x1;.n:()Lx2/v0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L499548.  v0:= v1.`v1.x1.m` @type ^`x2.v0` @kind object;
  #L49954c.  return v0 @kind object;
}
procedure `q3.b0` `o`(`v1.x1` v1 @kind this) @signature `Lv1/x1;.o:()Lq3/b0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4990c8.  v0:= v1.`v1.x1.n` @type ^`q3.b0` @kind object;
  #L4990cc.  return v0 @kind object;
}
procedure `void` `p`(`v1.x1` v6 @kind this, `float` v7 , `v1.d3` v8 @kind object) @signature `Lv1/x1;.p:(FLv1/d3;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L499330.  v0:= 1I;
  #L499332.  v6.`v1.x1.d` @type ^`boolean` := v0 @kind boolean;
  #L499336.  v0:= v6.`v1.x1.a` @type ^`x2.r` @kind object;
  #L49933a.  call temp:= `o`(v0) @signature `Lx2/r;.o:()Lx2/v0;` @kind interface;
  #L499340.  v0:= temp @kind object;
  #L499342.  v6.`v1.x1.m` @type ^`x2.v0` := v0 @kind object;
  #L499346.  call temp:= `v`(v6, v7, v8) @signature `Lv1/x1;.v:(FLv1/d3;)Lq3/b0;` @kind virtual;
  #L49934c.  v7:= temp @kind object;
  #L49934e.  v8:= v6.`v1.x1.f` @type ^`v1.y1` @kind object;
  #L499352.  v0:= v8.`v1.y1.b` @type ^`long` @kind wide;
  #L499356.  v2:= v8.`v1.y1.e` @type ^`long` @kind wide;
  #L49935a.  v4:= -4.9E-324D;
  #L499364.  v8:= lcmp(v2, v4);
  #L499368.  if v8 == 0 then goto L499386;
  #L49936c.  v8:= lcmp(v0, v2);
  #L499370.  if v8 < 0 then goto L499386;
  #L499374.  v0:= 0L;
  #L499378.  v4:= 1L;
  #L49937c.  v2:= v2 - v4 @kind long;
  #L49937e.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L499384.  v0:= temp @kind wide;
  #L499386.  v8:= 0I;
  #L499388.  call temp:= `a`(v6, v7, v0, v8) @signature `Lv1/x1;.a:(Lq3/b0;JZ)J` @kind virtual;
  #L49938e.  v7:= temp @kind wide;
  #L499390.  v0:= v6.`v1.x1.o` @type ^`long` @kind wide;
  #L499394.  v2:= v6.`v1.x1.f` @type ^`v1.y1` @kind object;
  #L499398.  v3:= v2.`v1.y1.b` @type ^`long` @kind wide;
  #L49939c.  v3:= v3 - v7 @kind long;
  #L49939e.  v0:= v0 + v3 @kind long;
  #L4993a0.  v6.`v1.x1.o` @type ^`long` := v0 @kind wide;
  #L4993a4.  call temp:= `b`(v2, v7) @signature `Lv1/y1;.b:(J)Lv1/y1;` @kind virtual;
  #L4993aa.  v7:= temp @kind object;
  #L4993ac.  v6.`v1.x1.f` @type ^`v1.y1` := v7 @kind object;
  #L4993b0.  return @kind void;
}
procedure `boolean` `q`(`v1.x1` v5 @kind this) @signature `Lv1/x1;.q:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L498e64.  v0:= v5.`v1.x1.d` @type ^`boolean` @kind boolean;
  #L498e68.  if v0 == 0 then goto L498e90;
  #L498e6c.  v0:= v5.`v1.x1.e` @type ^`boolean` @kind boolean;
  #L498e70.  if v0 == 0 then goto L498e8c;
  #L498e74.  v0:= v5.`v1.x1.a` @type ^`x2.r` @kind object;
  #L498e78.  call temp:= `f`(v0) @signature `Lx2/r;.f:()J` @kind interface;
  #L498e7e.  v0:= temp @kind wide;
  #L498e80.  v2:= -9223372036854775808L;
  #L498e84.  v4:= lcmp(v0, v2);
  #L498e88.  if v4 != 0 then goto L498e90;
  #L498e8c.  v0:= 1I;
  #L498e8e.  goto L498e92;
  #L498e90.  v0:= 0I;
  #L498e92.  return v0;
}
procedure `void` `s`(`v1.x1` v1 @kind this, `long` v2 ) @signature `Lv1/x1;.s:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4993c4.  call temp:= `r`(v1) @signature `Lv1/x1;.r:()Z` @kind direct;
  #L4993ca.  v0:= temp;
  #L4993cc.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L4993d2.  v0:= v1.`v1.x1.d` @type ^`boolean` @kind boolean;
  #L4993d6.  if v0 == 0 then goto L4993ec;
  #L4993da.  v0:= v1.`v1.x1.a` @type ^`x2.r` @kind object;
  #L4993de.  call temp:= `y`(v1, v2) @signature `Lv1/x1;.y:(J)J` @kind virtual;
  #L4993e4.  v2:= temp @kind wide;
  #L4993e6.  call `i`(v0, v2) @signature `Lx2/r;.i:(J)V` @kind interface;
  #L4993ec.  return @kind void;
}
procedure `void` `t`(`v1.x1` v2 @kind this) @signature `Lv1/x1;.t:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L499400.  call `f`(v2) @signature `Lv1/x1;.f:()V` @kind direct;
  #L499406.  v0:= v2.`v1.x1.k` @type ^`v1.d2` @kind object;
  #L49940a.  v1:= v2.`v1.x1.a` @type ^`x2.r` @kind object;
  #L49940e.  call `u`(v0, v1) @signature `Lv1/x1;.u:(Lv1/d2;Lx2/r;)V` @kind static;
  #L499414.  return @kind void;
}
procedure `q3.b0` `v`(`v1.x1` v4 @kind this, `float` v5 , `v1.d3` v6 @kind object) @signature `Lv1/x1;.v:(FLv1/d3;)Lq3/b0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4990e0.  v0:= v4.`v1.x1.j` @type ^`q3.a0` @kind object;
  #L4990e4.  v1:= v4.`v1.x1.i` @type ^`v1.t2`[] @kind object;
  #L4990e8.  call temp:= `n`(v4) @signature `Lv1/x1;.n:()Lx2/v0;` @kind virtual;
  #L4990ee.  v2:= temp @kind object;
  #L4990f0.  v3:= v4.`v1.x1.f` @type ^`v1.y1` @kind object;
  #L4990f4.  v3:= v3.`v1.y1.a` @type ^`x2.u$b` @kind object;
  #L4990f8.  call temp:= `g`(v0, v1, v2, v3, v6) @signature `Lq3/a0;.g:([Lv1/t2;Lx2/v0;Lx2/u$b;Lv1/d3;)Lq3/b0;` @kind virtual;
  #L4990fe.  v6:= temp @kind object;
  #L499100.  v0:= v6.`q3.b0.c` @type ^`q3.s`[] @kind object;
  #L499104.  v1:= length @variable v0;
  #L499106.  v2:= 0I;
  #L499108.  if v2 >= v1 then goto L499120;
  #L49910c.  v3:= v0[v2] @kind object;
  #L499110.  if v3 == 0 then goto L49911a;
  #L499114.  call `q`(v3, v5) @signature `Lq3/s;.q:(F)V` @kind interface;
  #L49911a.  v2:= v2 + 1;
  #L49911e.  goto L499108;
  #L499120.  return v6 @kind object;
}
procedure `void` `w`(`v1.x1` v1 @kind this, `v1.x1` v2 @kind object) @signature `Lv1/x1;.w:(Lv1/x1;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L499474.  v0:= v1.`v1.x1.l` @type ^`v1.x1` @kind object;
  #L499478.  if v2 != v0 then goto L49947e;
  #L49947c.  return @kind void;
  #L49947e.  call `f`(v1) @signature `Lv1/x1;.f:()V` @kind direct;
  #L499484.  v1.`v1.x1.l` @type ^`v1.x1` := v2 @kind object;
  #L499488.  call `h`(v1) @signature `Lv1/x1;.h:()V` @kind direct;
  #L49948e.  return @kind void;
}
procedure `void` `x`(`v1.x1` v0 @kind this, `long` v1 ) @signature `Lv1/x1;.x:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4994a0.  v0.`v1.x1.o` @type ^`long` := v1 @kind wide;
  #L4994a4.  return @kind void;
}
procedure `long` `y`(`v1.x1` v2 @kind this, `long` v3 ) @signature `Lv1/x1;.y:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L499090.  call temp:= `l`(v2) @signature `Lv1/x1;.l:()J` @kind virtual;
  #L499096.  v0:= temp @kind wide;
  #L499098.  v3:= v3 - v0 @kind long;
  #L49909a.  return v3 @kind wide;
}
procedure `long` `z`(`v1.x1` v2 @kind this, `long` v3 ) @signature `Lv1/x1;.z:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4990ac.  call temp:= `l`(v2) @signature `Lv1/x1;.l:()J` @kind virtual;
  #L4990b2.  v0:= temp @kind wide;
  #L4990b4.  v3:= v3 + v0 @kind long;
  #L4990b6.  return v3 @kind wide;
}
