record `v1.d2` @kind class @AccessFlag FINAL {
  `w1.t1` `v1.d2.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `v1.d2.b` @AccessFlag PRIVATE_FINAL;
  `java.util.IdentityHashMap` `v1.d2.c` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `v1.d2.d` @AccessFlag PRIVATE_FINAL;
  `v1.d2$d` `v1.d2.e` @AccessFlag PRIVATE_FINAL;
  `x2.b0$a` `v1.d2.f` @AccessFlag PRIVATE_FINAL;
  `z1.w$a` `v1.d2.g` @AccessFlag PRIVATE_FINAL;
  `java.util.HashMap` `v1.d2.h` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `v1.d2.i` @AccessFlag PRIVATE_FINAL;
  `x2.p0` `v1.d2.j` @AccessFlag PRIVATE;
  `boolean` `v1.d2.k` @AccessFlag PRIVATE;
  `r3.p0` `v1.d2.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`v1.d2` v1 @kind this, `v1.d2$d` v2 @kind object, `w1.a` v3 @kind object, `android.os.Handler` v4 @kind object, `w1.t1` v5 @kind object) @signature `Lv1/d2;.<init>:(Lv1/d2$d;Lw1/a;Landroid/os/Handler;Lw1/t1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L49b250.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49b256.  v1.`v1.d2.a` @type ^`w1.t1` := v5 @kind object;
  #L49b25a.  v1.`v1.d2.e` @type ^`v1.d2$d` := v2 @kind object;
  #L49b25e.  v2:= new `x2.p0$a`;
  #L49b262.  v5:= 0I;
  #L49b264.  call `<init>`(v2, v5) @signature `Lx2/p0$a;.<init>:(I)V` @kind direct;
  #L49b26a.  v1.`v1.d2.j` @type ^`x2.p0` := v2 @kind object;
  #L49b26e.  v2:= new `java.util.IdentityHashMap`;
  #L49b272.  call `<init>`(v2) @signature `Ljava/util/IdentityHashMap;.<init>:()V` @kind direct;
  #L49b278.  v1.`v1.d2.c` @type ^`java.util.IdentityHashMap` := v2 @kind object;
  #L49b27c.  v2:= new `java.util.HashMap`;
  #L49b280.  call `<init>`(v2) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L49b286.  v1.`v1.d2.d` @type ^`java.util.Map` := v2 @kind object;
  #L49b28a.  v2:= new `java.util.ArrayList`;
  #L49b28e.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L49b294.  v1.`v1.d2.b` @type ^`java.util.List` := v2 @kind object;
  #L49b298.  v2:= new `x2.b0$a`;
  #L49b29c.  call `<init>`(v2) @signature `Lx2/b0$a;.<init>:()V` @kind direct;
  #L49b2a2.  v1.`v1.d2.f` @type ^`x2.b0$a` := v2 @kind object;
  #L49b2a6.  v5:= new `z1.w$a`;
  #L49b2aa.  call `<init>`(v5) @signature `Lz1/w$a;.<init>:()V` @kind direct;
  #L49b2b0.  v1.`v1.d2.g` @type ^`z1.w$a` := v5 @kind object;
  #L49b2b4.  v0:= new `java.util.HashMap`;
  #L49b2b8.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L49b2be.  v1.`v1.d2.h` @type ^`java.util.HashMap` := v0 @kind object;
  #L49b2c2.  v0:= new `java.util.HashSet`;
  #L49b2c6.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L49b2cc.  v1.`v1.d2.i` @type ^`java.util.Set` := v0 @kind object;
  #L49b2d0.  call `g`(v2, v4, v3) @signature `Lx2/b0$a;.g:(Landroid/os/Handler;Lx2/b0;)V` @kind virtual;
  #L49b2d6.  call `g`(v5, v4, v3) @signature `Lz1/w$a;.g:(Landroid/os/Handler;Lz1/w;)V` @kind virtual;
  #L49b2dc.  return @kind void;
}
procedure `void` `B`(`v1.d2` v4 @kind this, `int` v5 , `int` v6 ) @signature `Lv1/d2;.B:(II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49b66c.  v0:= 1I;
  #L49b66e.  v6:= v6 - v0 @kind int;
  #L49b670.  if v6 < v5 then goto L49b6c6;
  #L49b674.  v1:= v4.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b678.  call temp:= `remove`(v1, v6) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L49b67e.  v1:= temp @kind object;
  #L49b680.  v1:= (`v1.d2$c`) v1 @kind object;
  #L49b684.  v2:= v4.`v1.d2.d` @type ^`java.util.Map` @kind object;
  #L49b688.  v3:= v1.`v1.d2$c.b` @type ^`java.lang.Object` @kind object;
  #L49b68c.  call temp:= `remove`(v2, v3) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49b692.  v2:= v1.`v1.d2$c.a` @type ^`x2.p` @kind object;
  #L49b696.  call temp:= `Q`(v2) @signature `Lx2/p;.Q:()Lv1/d3;` @kind virtual;
  #L49b69c.  v2:= temp @kind object;
  #L49b69e.  call temp:= `p`(v2) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49b6a4.  v2:= temp;
  #L49b6a6.  v2:= -v2 @kind int;
  #L49b6a8.  call `g`(v4, v6, v2) @signature `Lv1/d2;.g:(II)V` @kind direct;
  #L49b6ae.  v1.`v1.d2$c.e` @type ^`boolean` := v0 @kind boolean;
  #L49b6b2.  v2:= v4.`v1.d2.k` @type ^`boolean` @kind boolean;
  #L49b6b6.  if v2 == 0 then goto L49b6c0;
  #L49b6ba.  call `u`(v4, v1) @signature `Lv1/d2;.u:(Lv1/d2$c;)V` @kind direct;
  #L49b6c0.  v6:= v6 + -1;
  #L49b6c4.  goto L49b670;
  #L49b6c6.  return @kind void;
}
procedure `void` `a`(`v1.d2` v0 @kind object, `x2.u` v1 @kind object, `v1.d3` v2 @kind object) @signature `Lv1/d2;.a:(Lv1/d2;Lx2/u;Lv1/d3;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L49b238.  call `t`(v0, v1, v2) @signature `Lv1/d2;.t:(Lx2/u;Lv1/d3;)V` @kind direct;
  #L49b23e.  return @kind void;
}
procedure `x2.b0$a` `b`(`v1.d2` v0 @kind object) @signature `Lv1/d2;.b:(Lv1/d2;)Lx2/b0$a;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49b7d4.  v0:= v0.`v1.d2.f` @type ^`x2.b0$a` @kind object;
  #L49b7d8.  return v0 @kind object;
}
procedure `z1.w$a` `c`(`v1.d2` v0 @kind object) @signature `Lv1/d2;.c:(Lv1/d2;)Lz1/w$a;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49b7ec.  v0:= v0.`v1.d2.g` @type ^`z1.w$a` @kind object;
  #L49b7f0.  return v0 @kind object;
}
procedure `x2.u$b` `d`(`v1.d2$c` v0 @kind object, `x2.u$b` v1 @kind object) @signature `Lv1/d2;.d:(Lv1/d2$c;Lx2/u$b;)Lx2/u$b;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49b754.  call temp:= `n`(v0, v1) @signature `Lv1/d2;.n:(Lv1/d2$c;Lx2/u$b;)Lx2/u$b;` @kind static;
  #L49b75a.  v0:= temp @kind object;
  #L49b75c.  return v0 @kind object;
}
procedure `int` `e`(`v1.d2$c` v0 @kind object, `int` v1 ) @signature `Lv1/d2;.e:(Lv1/d2$c;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49ae90.  call temp:= `r`(v0, v1) @signature `Lv1/d2;.r:(Lv1/d2$c;I)I` @kind static;
  #L49ae96.  v0:= temp;
  #L49ae98.  return v0;
}
procedure `void` `g`(`v1.d2` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lv1/d2;.g:(II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L49b2f0.  v0:= v2.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b2f4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49b2fa.  v0:= temp;
  #L49b2fc.  if v3 >= v0 then goto L49b320;
  #L49b300.  v0:= v2.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b304.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L49b30a.  v0:= temp @kind object;
  #L49b30c.  v0:= (`v1.d2$c`) v0 @kind object;
  #L49b310.  v1:= v0.`v1.d2$c.d` @type ^`int`;
  #L49b314.  v1:= v1 + v4 @kind int;
  #L49b316.  v0.`v1.d2$c.d` @type ^`int` := v1;
  #L49b31a.  v3:= v3 + 1;
  #L49b31e.  goto L49b2f0;
  #L49b320.  return @kind void;
}
procedure `void` `j`(`v1.d2` v1 @kind this, `v1.d2$c` v2 @kind object) @signature `Lv1/d2;.j:(Lv1/d2$c;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L49b334.  v0:= v1.`v1.d2.h` @type ^`java.util.HashMap` @kind object;
  #L49b338.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49b33e.  v2:= temp @kind object;
  #L49b340.  v2:= (`v1.d2$b`) v2 @kind object;
  #L49b344.  if v2 == 0 then goto L49b356;
  #L49b348.  v0:= v2.`v1.d2$b.a` @type ^`x2.u` @kind object;
  #L49b34c.  v2:= v2.`v1.d2$b.b` @type ^`x2.u$c` @kind object;
  #L49b350.  call `o`(v0, v2) @signature `Lx2/u;.o:(Lx2/u$c;)V` @kind interface;
  #L49b356.  return @kind void;
}
procedure `void` `k`(`v1.d2` v3 @kind this) @signature `Lv1/d2;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L49b368.  v0:= v3.`v1.d2.i` @type ^`java.util.Set` @kind object;
  #L49b36c.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49b372.  v0:= temp @kind object;
  #L49b374.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49b37a.  v1:= temp;
  #L49b37c.  if v1 == 0 then goto L49b3aa;
  #L49b380.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49b386.  v1:= temp @kind object;
  #L49b388.  v1:= (`v1.d2$c`) v1 @kind object;
  #L49b38c.  v2:= v1.`v1.d2$c.c` @type ^`java.util.List` @kind object;
  #L49b390.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L49b396.  v2:= temp;
  #L49b398.  if v2 == 0 then goto L49b374;
  #L49b39c.  call `j`(v3, v1) @signature `Lv1/d2;.j:(Lv1/d2$c;)V` @kind direct;
  #L49b3a2.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L49b3a8.  goto L49b374;
  #L49b3aa.  return @kind void;
}
procedure `void` `l`(`v1.d2` v1 @kind this, `v1.d2$c` v2 @kind object) @signature `Lv1/d2;.l:(Lv1/d2$c;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L49b3bc.  v0:= v1.`v1.d2.i` @type ^`java.util.Set` @kind object;
  #L49b3c0.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49b3c6.  v0:= v1.`v1.d2.h` @type ^`java.util.HashMap` @kind object;
  #L49b3ca.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49b3d0.  v2:= temp @kind object;
  #L49b3d2.  v2:= (`v1.d2$b`) v2 @kind object;
  #L49b3d6.  if v2 == 0 then goto L49b3e8;
  #L49b3da.  v0:= v2.`v1.d2$b.a` @type ^`x2.u` @kind object;
  #L49b3de.  v2:= v2.`v1.d2$b.b` @type ^`x2.u$c` @kind object;
  #L49b3e2.  call `p`(v0, v2) @signature `Lx2/u;.p:(Lx2/u$c;)V` @kind interface;
  #L49b3e8.  return @kind void;
}
procedure `java.lang.Object` `m`(`java.lang.Object` v0 @kind object) @signature `Lv1/d2;.m:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L49aee4.  call temp:= `v`(v0) @signature `Lv1/a;.v:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49aeea.  v0:= temp @kind object;
  #L49aeec.  return v0 @kind object;
}
procedure `x2.u$b` `n`(`v1.d2$c` v6 @kind object, `x2.u$b` v7 @kind object) @signature `Lv1/d2;.n:(Lv1/d2$c;Lx2/u$b;)Lx2/u$b;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49b770.  v0:= 0I;
  #L49b772.  v1:= v6.`v1.d2$c.c` @type ^`java.util.List` @kind object;
  #L49b776.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49b77c.  v1:= temp;
  #L49b77e.  if v0 >= v1 then goto L49b7be;
  #L49b782.  v1:= v6.`v1.d2$c.c` @type ^`java.util.List` @kind object;
  #L49b786.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L49b78c.  v1:= temp @kind object;
  #L49b78e.  v1:= (`x2.u$b`) v1 @kind object;
  #L49b792.  v1:= v1.`x2.s.d` @type ^`long` @kind wide;
  #L49b796.  v3:= v7.`x2.s.d` @type ^`long` @kind wide;
  #L49b79a.  v5:= lcmp(v1, v3);
  #L49b79e.  if v5 != 0 then goto L49b7b8;
  #L49b7a2.  v0:= v7.`x2.s.a` @type ^`java.lang.Object` @kind object;
  #L49b7a6.  call temp:= `p`(v6, v0) @signature `Lv1/d2;.p:(Lv1/d2$c;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49b7ac.  v6:= temp @kind object;
  #L49b7ae.  call temp:= `c`(v7, v6) @signature `Lx2/u$b;.c:(Ljava/lang/Object;)Lx2/u$b;` @kind virtual;
  #L49b7b4.  v6:= temp @kind object;
  #L49b7b6.  return v6 @kind object;
  #L49b7b8.  v0:= v0 + 1;
  #L49b7bc.  goto L49b772;
  #L49b7be.  v6:= 0I;
  #L49b7c0.  return v6 @kind object;
}
procedure `java.lang.Object` `o`(`java.lang.Object` v0 @kind object) @signature `Lv1/d2;.o:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L49af00.  call temp:= `w`(v0) @signature `Lv1/a;.w:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49af06.  v0:= temp @kind object;
  #L49af08.  return v0 @kind object;
}
procedure `java.lang.Object` `p`(`v1.d2$c` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lv1/d2;.p:(Lv1/d2$c;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L49af1c.  v0:= v0.`v1.d2$c.b` @type ^`java.lang.Object` @kind object;
  #L49af20.  call temp:= `y`(v0, v1) @signature `Lv1/a;.y:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49af26.  v0:= temp @kind object;
  #L49af28.  return v0 @kind object;
}
procedure `int` `r`(`v1.d2$c` v0 @kind object, `int` v1 ) @signature `Lv1/d2;.r:(Lv1/d2$c;I)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L49aecc.  v0:= v0.`v1.d2$c.d` @type ^`int`;
  #L49aed0.  v1:= v1 + v0 @kind int;
  #L49aed2.  return v1;
}
procedure `void` `t`(`v1.d2` v0 @kind this, `x2.u` v1 @kind object, `v1.d3` v2 @kind object) @signature `Lv1/d2;.t:(Lx2/u;Lv1/d3;)V` @AccessFlag PRIVATE_SYNTHETIC {
    temp;

  #L49b3fc.  v1:= v0.`v1.d2.e` @type ^`v1.d2$d` @kind object;
  #L49b400.  call `a`(v1) @signature `Lv1/d2$d;.a:()V` @kind interface;
  #L49b406.  return @kind void;
}
procedure `void` `u`(`v1.d2` v3 @kind this, `v1.d2$c` v4 @kind object) @signature `Lv1/d2;.u:(Lv1/d2$c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L49b418.  v0:= v4.`v1.d2$c.e` @type ^`boolean` @kind boolean;
  #L49b41c.  if v0 == 0 then goto L49b480;
  #L49b420.  v0:= v4.`v1.d2$c.c` @type ^`java.util.List` @kind object;
  #L49b424.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L49b42a.  v0:= temp;
  #L49b42c.  if v0 == 0 then goto L49b480;
  #L49b430.  v0:= v3.`v1.d2.h` @type ^`java.util.HashMap` @kind object;
  #L49b434.  call temp:= `remove`(v0, v4) @signature `Ljava/util/HashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49b43a.  v0:= temp @kind object;
  #L49b43c.  v0:= (`v1.d2$b`) v0 @kind object;
  #L49b440.  call temp:= `e`(v0) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49b446.  v0:= temp @kind object;
  #L49b448.  v0:= (`v1.d2$b`) v0 @kind object;
  #L49b44c.  v1:= v0.`v1.d2$b.a` @type ^`x2.u` @kind object;
  #L49b450.  v2:= v0.`v1.d2$b.b` @type ^`x2.u$c` @kind object;
  #L49b454.  call `k`(v1, v2) @signature `Lx2/u;.k:(Lx2/u$c;)V` @kind interface;
  #L49b45a.  v1:= v0.`v1.d2$b.a` @type ^`x2.u` @kind object;
  #L49b45e.  v2:= v0.`v1.d2$b.c` @type ^`v1.d2$a` @kind object;
  #L49b462.  call `b`(v1, v2) @signature `Lx2/u;.b:(Lx2/b0;)V` @kind interface;
  #L49b468.  v1:= v0.`v1.d2$b.a` @type ^`x2.u` @kind object;
  #L49b46c.  v0:= v0.`v1.d2$b.c` @type ^`v1.d2$a` @kind object;
  #L49b470.  call `i`(v1, v0) @signature `Lx2/u;.i:(Lz1/w;)V` @kind interface;
  #L49b476.  v0:= v3.`v1.d2.i` @type ^`java.util.Set` @kind object;
  #L49b47a.  call temp:= `remove`(v0, v4) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L49b480.  return @kind void;
}
procedure `void` `x`(`v1.d2` v5 @kind this, `v1.d2$c` v6 @kind object) @signature `Lv1/d2;.x:(Lv1/d2$c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49b4f4.  v0:= v6.`v1.d2$c.a` @type ^`x2.p` @kind object;
  #L49b4f8.  v1:= new `v1.c2`;
  #L49b4fc.  call `<init>`(v1, v5) @signature `Lv1/c2;.<init>:(Lv1/d2;)V` @kind direct;
  #L49b502.  v2:= new `v1.d2$a`;
  #L49b506.  call `<init>`(v2, v5, v6) @signature `Lv1/d2$a;.<init>:(Lv1/d2;Lv1/d2$c;)V` @kind direct;
  #L49b50c.  v3:= v5.`v1.d2.h` @type ^`java.util.HashMap` @kind object;
  #L49b510.  v4:= new `v1.d2$b`;
  #L49b514.  call `<init>`(v4, v0, v1, v2) @signature `Lv1/d2$b;.<init>:(Lx2/u;Lx2/u$c;Lv1/d2$a;)V` @kind direct;
  #L49b51a.  call temp:= `put`(v3, v6, v4) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49b520.  call temp:= `y`() @signature `Ls3/l0;.y:()Landroid/os/Handler;` @kind static;
  #L49b526.  v6:= temp @kind object;
  #L49b528.  call `l`(v0, v6, v2) @signature `Lx2/u;.l:(Landroid/os/Handler;Lx2/b0;)V` @kind interface;
  #L49b52e.  call temp:= `y`() @signature `Ls3/l0;.y:()Landroid/os/Handler;` @kind static;
  #L49b534.  v6:= temp @kind object;
  #L49b536.  call `c`(v0, v6, v2) @signature `Lx2/u;.c:(Landroid/os/Handler;Lz1/w;)V` @kind interface;
  #L49b53c.  v6:= v5.`v1.d2.l` @type ^`r3.p0` @kind object;
  #L49b540.  v2:= v5.`v1.d2.a` @type ^`w1.t1` @kind object;
  #L49b544.  call `j`(v0, v1, v6, v2) @signature `Lx2/u;.j:(Lx2/u$c;Lr3/p0;Lw1/t1;)V` @kind interface;
  #L49b54a.  return @kind void;
}
procedure `v1.d3` `A`(`v1.d2` v1 @kind this, `int` v2 , `int` v3 , `x2.p0` v4 @kind object) @signature `Lv1/d2;.A:(IILx2/p0;)Lv1/d3;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b174.  if v2 < 0 then goto L49b18c;
  #L49b178.  if v2 > v3 then goto L49b18c;
  #L49b17c.  call temp:= `q`(v1) @signature `Lv1/d2;.q:()I` @kind virtual;
  #L49b182.  v0:= temp;
  #L49b184.  if v3 > v0 then goto L49b18c;
  #L49b188.  v0:= 1I;
  #L49b18a.  goto L49b18e;
  #L49b18c.  v0:= 0I;
  #L49b18e.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L49b194.  v1.`v1.d2.j` @type ^`x2.p0` := v4 @kind object;
  #L49b198.  call `B`(v1, v2, v3) @signature `Lv1/d2;.B:(II)V` @kind direct;
  #L49b19e.  call temp:= `i`(v1) @signature `Lv1/d2;.i:()Lv1/d3;` @kind virtual;
  #L49b1a4.  v2:= temp @kind object;
  #L49b1a6.  return v2 @kind object;
}
procedure `v1.d3` `C`(`v1.d2` v2 @kind this, `java.util.List` v3 @kind object, `x2.p0` v4 @kind object) @signature `Lv1/d2;.C:(Ljava/util/List;Lx2/p0;)Lv1/d3;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49b1b8.  v0:= v2.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b1bc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49b1c2.  v0:= temp;
  #L49b1c4.  v1:= 0I;
  #L49b1c6.  call `B`(v2, v1, v0) @signature `Lv1/d2;.B:(II)V` @kind direct;
  #L49b1cc.  v0:= v2.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b1d0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49b1d6.  v0:= temp;
  #L49b1d8.  call temp:= `f`(v2, v0, v3, v4) @signature `Lv1/d2;.f:(ILjava/util/List;Lx2/p0;)Lv1/d3;` @kind virtual;
  #L49b1de.  v3:= temp @kind object;
  #L49b1e0.  return v3 @kind object;
}
procedure `v1.d3` `D`(`v1.d2` v2 @kind this, `x2.p0` v3 @kind object) @signature `Lv1/d2;.D:(Lx2/p0;)Lv1/d3;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49b1f4.  call temp:= `q`(v2) @signature `Lv1/d2;.q:()I` @kind virtual;
  #L49b1fa.  v0:= temp;
  #L49b1fc.  call temp:= `a`(v3) @signature `Lx2/p0;.a:()I` @kind interface;
  #L49b202.  v1:= temp;
  #L49b204.  if v1 == v0 then goto L49b21a;
  #L49b208.  call temp:= `h`(v3) @signature `Lx2/p0;.h:()Lx2/p0;` @kind interface;
  #L49b20e.  v3:= temp @kind object;
  #L49b210.  v1:= 0I;
  #L49b212.  call temp:= `d`(v3, v1, v0) @signature `Lx2/p0;.d:(II)Lx2/p0;` @kind interface;
  #L49b218.  v3:= temp @kind object;
  #L49b21a.  v2.`v1.d2.j` @type ^`x2.p0` := v3 @kind object;
  #L49b21e.  call temp:= `i`(v2) @signature `Lv1/d2;.i:()Lv1/d3;` @kind virtual;
  #L49b224.  v3:= temp @kind object;
  #L49b226.  return v3 @kind object;
}
procedure `v1.d3` `f`(`v1.d2` v3 @kind this, `int` v4 , `java.util.List` v5 @kind object, `x2.p0` v6 @kind object) @signature `Lv1/d2;.f:(ILjava/util/List;Lx2/p0;)Lv1/d3;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49af3c.  call temp:= `isEmpty`(v5) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L49af42.  v0:= temp;
  #L49af44.  if v0 != 0 then goto L49b010;
  #L49af48.  v3.`v1.d2.j` @type ^`x2.p0` := v6 @kind object;
  #L49af4c.  v6:= v4;
  #L49af4e.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49af54.  v0:= temp;
  #L49af56.  v0:= v0 + v4 @kind int;
  #L49af58.  if v6 >= v0 then goto L49b010;
  #L49af5c.  v0:= v6 - v4 @kind int;
  #L49af60.  call temp:= `get`(v5, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L49af66.  v0:= temp @kind object;
  #L49af68.  v0:= (`v1.d2$c`) v0 @kind object;
  #L49af6c.  if v6 <= 0 then goto L49afa0;
  #L49af70.  v1:= v3.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49af74.  v2:= v6 + -1;
  #L49af78.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L49af7e.  v1:= temp @kind object;
  #L49af80.  v1:= (`v1.d2$c`) v1 @kind object;
  #L49af84.  v2:= v1.`v1.d2$c.a` @type ^`x2.p` @kind object;
  #L49af88.  call temp:= `Q`(v2) @signature `Lx2/p;.Q:()Lv1/d3;` @kind virtual;
  #L49af8e.  v2:= temp @kind object;
  #L49af90.  v1:= v1.`v1.d2$c.d` @type ^`int`;
  #L49af94.  call temp:= `p`(v2) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49af9a.  v2:= temp;
  #L49af9c.  v1:= v1 + v2 @kind int;
  #L49af9e.  goto L49afa2;
  #L49afa0.  v1:= 0I;
  #L49afa2.  call `c`(v0, v1) @signature `Lv1/d2$c;.c:(I)V` @kind virtual;
  #L49afa8.  v1:= v0.`v1.d2$c.a` @type ^`x2.p` @kind object;
  #L49afac.  call temp:= `Q`(v1) @signature `Lx2/p;.Q:()Lv1/d3;` @kind virtual;
  #L49afb2.  v1:= temp @kind object;
  #L49afb4.  call temp:= `p`(v1) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49afba.  v1:= temp;
  #L49afbc.  call `g`(v3, v6, v1) @signature `Lv1/d2;.g:(II)V` @kind direct;
  #L49afc2.  v1:= v3.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49afc6.  call `add`(v1, v6, v0) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L49afcc.  v1:= v3.`v1.d2.d` @type ^`java.util.Map` @kind object;
  #L49afd0.  v2:= v0.`v1.d2$c.b` @type ^`java.lang.Object` @kind object;
  #L49afd4.  call temp:= `put`(v1, v2, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49afda.  v1:= v3.`v1.d2.k` @type ^`boolean` @kind boolean;
  #L49afde.  if v1 == 0 then goto L49b00a;
  #L49afe2.  call `x`(v3, v0) @signature `Lv1/d2;.x:(Lv1/d2$c;)V` @kind direct;
  #L49afe8.  v1:= v3.`v1.d2.c` @type ^`java.util.IdentityHashMap` @kind object;
  #L49afec.  call temp:= `isEmpty`(v1) @signature `Ljava/util/IdentityHashMap;.isEmpty:()Z` @kind virtual;
  #L49aff2.  v1:= temp;
  #L49aff4.  if v1 == 0 then goto L49b004;
  #L49aff8.  v1:= v3.`v1.d2.i` @type ^`java.util.Set` @kind object;
  #L49affc.  call temp:= `add`(v1, v0) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49b002.  goto L49b00a;
  #L49b004.  call `j`(v3, v0) @signature `Lv1/d2;.j:(Lv1/d2$c;)V` @kind direct;
  #L49b00a.  v6:= v6 + 1;
  #L49b00e.  goto L49af4e;
  #L49b010.  call temp:= `i`(v3) @signature `Lv1/d2;.i:()Lv1/d3;` @kind virtual;
  #L49b016.  v4:= temp @kind object;
  #L49b018.  return v4 @kind object;
}
procedure `x2.r` `h`(`v1.d2` v2 @kind this, `x2.u$b` v3 @kind object, `r3.b` v4 @kind object, `long` v5 ) @signature `Lv1/d2;.h:(Lx2/u$b;Lr3/b;J)Lx2/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49b6d8.  v0:= v3.`x2.s.a` @type ^`java.lang.Object` @kind object;
  #L49b6dc.  call temp:= `o`(v0) @signature `Lv1/d2;.o:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49b6e2.  v0:= temp @kind object;
  #L49b6e4.  v1:= v3.`x2.s.a` @type ^`java.lang.Object` @kind object;
  #L49b6e8.  call temp:= `m`(v1) @signature `Lv1/d2;.m:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49b6ee.  v1:= temp @kind object;
  #L49b6f0.  call temp:= `c`(v3, v1) @signature `Lx2/u$b;.c:(Ljava/lang/Object;)Lx2/u$b;` @kind virtual;
  #L49b6f6.  v3:= temp @kind object;
  #L49b6f8.  v1:= v2.`v1.d2.d` @type ^`java.util.Map` @kind object;
  #L49b6fc.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49b702.  v0:= temp @kind object;
  #L49b704.  v0:= (`v1.d2$c`) v0 @kind object;
  #L49b708.  call temp:= `e`(v0) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49b70e.  v0:= temp @kind object;
  #L49b710.  v0:= (`v1.d2$c`) v0 @kind object;
  #L49b714.  call `l`(v2, v0) @signature `Lv1/d2;.l:(Lv1/d2$c;)V` @kind direct;
  #L49b71a.  v1:= v0.`v1.d2$c.c` @type ^`java.util.List` @kind object;
  #L49b71e.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49b724.  v1:= v0.`v1.d2$c.a` @type ^`x2.p` @kind object;
  #L49b728.  call temp:= `M`(v1, v3, v4, v5) @signature `Lx2/p;.M:(Lx2/u$b;Lr3/b;J)Lx2/o;` @kind virtual;
  #L49b72e.  v3:= temp @kind object;
  #L49b730.  v4:= v2.`v1.d2.c` @type ^`java.util.IdentityHashMap` @kind object;
  #L49b734.  call temp:= `put`(v4, v3, v0) @signature `Ljava/util/IdentityHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49b73a.  call `k`(v2) @signature `Lv1/d2;.k:()V` @kind direct;
  #L49b740.  return v3 @kind object;
}
procedure `v1.d3` `i`(`v1.d2` v3 @kind this) @signature `Lv1/d2;.i:()Lv1/d3;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49b02c.  v0:= v3.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b030.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L49b036.  v0:= temp;
  #L49b038.  if v0 == 0 then goto L49b042;
  #L49b03c.  v0:= `@@v1.d3.o` @type ^`v1.d3` @kind object;
  #L49b040.  return v0 @kind object;
  #L49b042.  v0:= 0I;
  #L49b044.  v1:= 0I;
  #L49b046.  v2:= v3.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b04a.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49b050.  v2:= temp;
  #L49b052.  if v0 >= v2 then goto L49b086;
  #L49b056.  v2:= v3.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b05a.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L49b060.  v2:= temp @kind object;
  #L49b062.  v2:= (`v1.d2$c`) v2 @kind object;
  #L49b066.  v2.`v1.d2$c.d` @type ^`int` := v1;
  #L49b06a.  v2:= v2.`v1.d2$c.a` @type ^`x2.p` @kind object;
  #L49b06e.  call temp:= `Q`(v2) @signature `Lx2/p;.Q:()Lv1/d3;` @kind virtual;
  #L49b074.  v2:= temp @kind object;
  #L49b076.  call temp:= `p`(v2) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49b07c.  v2:= temp;
  #L49b07e.  v1:= v1 + v2 @kind int;
  #L49b080.  v0:= v0 + 1;
  #L49b084.  goto L49b046;
  #L49b086.  v0:= new `v1.n2`;
  #L49b08a.  v1:= v3.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b08e.  v2:= v3.`v1.d2.j` @type ^`x2.p0` @kind object;
  #L49b092.  call `<init>`(v0, v1, v2) @signature `Lv1/n2;.<init>:(Ljava/util/Collection;Lx2/p0;)V` @kind direct;
  #L49b098.  return v0 @kind object;
}
procedure `int` `q`(`v1.d2` v1 @kind this) @signature `Lv1/d2;.q:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49aeac.  v0:= v1.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49aeb0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49aeb6.  v0:= temp;
  #L49aeb8.  return v0;
}
procedure `boolean` `s`(`v1.d2` v1 @kind this) @signature `Lv1/d2;.s:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ae78.  v0:= v1.`v1.d2.k` @type ^`boolean` @kind boolean;
  #L49ae7c.  return v0;
}
procedure `v1.d3` `v`(`v1.d2` v3 @kind this, `int` v4 , `int` v5 , `int` v6 , `x2.p0` v7 @kind object) @signature `Lv1/d2;.v:(IIILx2/p0;)Lv1/d3;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49b0ac.  v0:= 1I;
  #L49b0ae.  if v4 < 0 then goto L49b0ca;
  #L49b0b2.  if v4 > v5 then goto L49b0ca;
  #L49b0b6.  call temp:= `q`(v3) @signature `Lv1/d2;.q:()I` @kind virtual;
  #L49b0bc.  v1:= temp;
  #L49b0be.  if v5 > v1 then goto L49b0ca;
  #L49b0c2.  if v6 < 0 then goto L49b0ca;
  #L49b0c6.  v1:= 1I;
  #L49b0c8.  goto L49b0cc;
  #L49b0ca.  v1:= 0I;
  #L49b0cc.  call `a`(v1) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L49b0d2.  v3.`v1.d2.j` @type ^`x2.p0` := v7 @kind object;
  #L49b0d6.  if v4 == v5 then goto L49b158;
  #L49b0da.  if v4 != v6 then goto L49b0e0;
  #L49b0de.  goto L49b158;
  #L49b0e0.  call temp:= `min`(v4, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L49b0e6.  v7:= temp;
  #L49b0e8.  v1:= v5 - v4 @kind int;
  #L49b0ec.  v1:= v1 + v6 @kind int;
  #L49b0ee.  v1:= v1 - v0 @kind int;
  #L49b0f0.  v0:= v5 + -1;
  #L49b0f4.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L49b0fa.  v0:= temp;
  #L49b0fc.  v1:= v3.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b100.  call temp:= `get`(v1, v7) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L49b106.  v1:= temp @kind object;
  #L49b108.  v1:= (`v1.d2$c`) v1 @kind object;
  #L49b10c.  v1:= v1.`v1.d2$c.d` @type ^`int`;
  #L49b110.  v2:= v3.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b114.  call `z0`(v2, v4, v5, v6) @signature `Ls3/l0;.z0:(Ljava/util/List;III)V` @kind static;
  #L49b11a.  if v7 > v0 then goto L49b14e;
  #L49b11e.  v4:= v3.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b122.  call temp:= `get`(v4, v7) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L49b128.  v4:= temp @kind object;
  #L49b12a.  v4:= (`v1.d2$c`) v4 @kind object;
  #L49b12e.  v4.`v1.d2$c.d` @type ^`int` := v1;
  #L49b132.  v4:= v4.`v1.d2$c.a` @type ^`x2.p` @kind object;
  #L49b136.  call temp:= `Q`(v4) @signature `Lx2/p;.Q:()Lv1/d3;` @kind virtual;
  #L49b13c.  v4:= temp @kind object;
  #L49b13e.  call temp:= `p`(v4) @signature `Lv1/d3;.p:()I` @kind virtual;
  #L49b144.  v4:= temp;
  #L49b146.  v1:= v1 + v4 @kind int;
  #L49b148.  v7:= v7 + 1;
  #L49b14c.  goto L49b11a;
  #L49b14e.  call temp:= `i`(v3) @signature `Lv1/d2;.i:()Lv1/d3;` @kind virtual;
  #L49b154.  v4:= temp @kind object;
  #L49b156.  return v4 @kind object;
  #L49b158.  call temp:= `i`(v3) @signature `Lv1/d2;.i:()Lv1/d3;` @kind virtual;
  #L49b15e.  v4:= temp @kind object;
  #L49b160.  return v4 @kind object;
}
procedure `void` `w`(`v1.d2` v3 @kind this, `r3.p0` v4 @kind object) @signature `Lv1/d2;.w:(Lr3/p0;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49b494.  v0:= v3.`v1.d2.k` @type ^`boolean` @kind boolean;
  #L49b498.  v1:= 1I;
  #L49b49a.  v0:= v0 ^~ v1 @kind int;
  #L49b49c.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L49b4a2.  v3.`v1.d2.l` @type ^`r3.p0` := v4 @kind object;
  #L49b4a6.  v4:= 0I;
  #L49b4a8.  v0:= v3.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b4ac.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L49b4b2.  v0:= temp;
  #L49b4b4.  if v4 >= v0 then goto L49b4de;
  #L49b4b8.  v0:= v3.`v1.d2.b` @type ^`java.util.List` @kind object;
  #L49b4bc.  call temp:= `get`(v0, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L49b4c2.  v0:= temp @kind object;
  #L49b4c4.  v0:= (`v1.d2$c`) v0 @kind object;
  #L49b4c8.  call `x`(v3, v0) @signature `Lv1/d2;.x:(Lv1/d2$c;)V` @kind direct;
  #L49b4ce.  v2:= v3.`v1.d2.i` @type ^`java.util.Set` @kind object;
  #L49b4d2.  call temp:= `add`(v2, v0) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49b4d8.  v4:= v4 + 1;
  #L49b4dc.  goto L49b4a8;
  #L49b4de.  v3.`v1.d2.k` @type ^`boolean` := v1 @kind boolean;
  #L49b4e2.  return @kind void;
}
procedure `void` `y`(`v1.d2` v5 @kind this) @signature `Lv1/d2;.y:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49b55c.  v0:= v5.`v1.d2.h` @type ^`java.util.HashMap` @kind object;
  #L49b560.  call temp:= `values`(v0) @signature `Ljava/util/HashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L49b566.  v0:= temp @kind object;
  #L49b568.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49b56e.  v0:= temp @kind object;
  #L49b570.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49b576.  v1:= temp;
  #L49b578.  if v1 == 0 then goto L49b5c6;
  #L49b57c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49b582.  v1:= temp @kind object;
  #L49b584.  v1:= (`v1.d2$b`) v1 @kind object;
  #L49b588.  v2:= v1.`v1.d2$b.a` @type ^`x2.u` @kind object;
  #L49b58c.  v3:= v1.`v1.d2$b.b` @type ^`x2.u$c` @kind object;
  #L49b590.  call `k`(v2, v3) @signature `Lx2/u;.k:(Lx2/u$c;)V` @kind interface;
  #L49b596.  goto L49b5a8;
  #L49b598.  v2:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L49b59a.  v3:= "MediaSourceList" @kind object;
  #L49b59e.  v4:= "Failed to release child source." @kind object;
  #L49b5a2.  call `d`(v3, v4, v2) @signature `Ls3/q;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind static;
  #L49b5a8.  v2:= v1.`v1.d2$b.a` @type ^`x2.u` @kind object;
  #L49b5ac.  v3:= v1.`v1.d2$b.c` @type ^`v1.d2$a` @kind object;
  #L49b5b0.  call `b`(v2, v3) @signature `Lx2/u;.b:(Lx2/b0;)V` @kind interface;
  #L49b5b6.  v2:= v1.`v1.d2$b.a` @type ^`x2.u` @kind object;
  #L49b5ba.  v1:= v1.`v1.d2$b.c` @type ^`v1.d2$a` @kind object;
  #L49b5be.  call `i`(v2, v1) @signature `Lx2/u;.i:(Lz1/w;)V` @kind interface;
  #L49b5c4.  goto L49b570;
  #L49b5c6.  v0:= v5.`v1.d2.h` @type ^`java.util.HashMap` @kind object;
  #L49b5ca.  call `clear`(v0) @signature `Ljava/util/HashMap;.clear:()V` @kind virtual;
  #L49b5d0.  v0:= v5.`v1.d2.i` @type ^`java.util.Set` @kind object;
  #L49b5d4.  call `clear`(v0) @signature `Ljava/util/Set;.clear:()V` @kind interface;
  #L49b5da.  v0:= 0I;
  #L49b5dc.  v5.`v1.d2.k` @type ^`boolean` := v0 @kind boolean;
  #L49b5e0.  return @kind void;
  catch `java.lang.RuntimeException` @[L49b588..L49b596] goto L49b598;
}
procedure `void` `z`(`v1.d2` v2 @kind this, `x2.r` v3 @kind object) @signature `Lv1/d2;.z:(Lx2/r;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49b604.  v0:= v2.`v1.d2.c` @type ^`java.util.IdentityHashMap` @kind object;
  #L49b608.  call temp:= `remove`(v0, v3) @signature `Ljava/util/IdentityHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49b60e.  v0:= temp @kind object;
  #L49b610.  v0:= (`v1.d2$c`) v0 @kind object;
  #L49b614.  call temp:= `e`(v0) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49b61a.  v0:= temp @kind object;
  #L49b61c.  v0:= (`v1.d2$c`) v0 @kind object;
  #L49b620.  v1:= v0.`v1.d2$c.a` @type ^`x2.p` @kind object;
  #L49b624.  call `m`(v1, v3) @signature `Lx2/p;.m:(Lx2/r;)V` @kind virtual;
  #L49b62a.  v1:= v0.`v1.d2$c.c` @type ^`java.util.List` @kind object;
  #L49b62e.  v3:= (`x2.o`) v3 @kind object;
  #L49b632.  v3:= v3.`x2.o.o` @type ^`x2.u$b` @kind object;
  #L49b636.  call temp:= `remove`(v1, v3) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L49b63c.  v3:= v2.`v1.d2.c` @type ^`java.util.IdentityHashMap` @kind object;
  #L49b640.  call temp:= `isEmpty`(v3) @signature `Ljava/util/IdentityHashMap;.isEmpty:()Z` @kind virtual;
  #L49b646.  v3:= temp;
  #L49b648.  if v3 != 0 then goto L49b652;
  #L49b64c.  call `k`(v2) @signature `Lv1/d2;.k:()V` @kind direct;
  #L49b652.  call `u`(v2, v0) @signature `Lv1/d2;.u:(Lv1/d2$c;)V` @kind direct;
  #L49b658.  return @kind void;
}
