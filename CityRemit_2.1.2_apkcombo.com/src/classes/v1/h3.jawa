record `v1.h3` @kind class @AccessFlag PUBLIC_FINAL extends `v1.g` @kind interface {
  `m5.q` `v1.h3.o` @AccessFlag PRIVATE_FINAL;
}
global `v1.h3` `@@v1.h3.p` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lv1/h3;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49efe0.  v0:= new `v1.h3`;
  #L49efe4.  call temp:= `a0`() @signature `Lm5/q;.a0:()Lm5/q;` @kind static;
  #L49efea.  v1:= temp @kind object;
  #L49efec.  call `<init>`(v0, v1) @signature `Lv1/h3;.<init>:(Ljava/util/List;)V` @kind direct;
  #L49eff2.  `@@v1.h3.p` @type ^`v1.h3` := v0 @kind object;
  #L49eff6.  return @kind void;
}
procedure `void` `<init>`(`v1.h3` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lv1/h3;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49f008.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49f00e.  call temp:= `Q`(v1) @signature `Lm5/q;.Q:(Ljava/util/Collection;)Lm5/q;` @kind static;
  #L49f014.  v1:= temp @kind object;
  #L49f016.  v0.`v1.h3.o` @type ^`m5.q` := v1 @kind object;
  #L49f01a.  return @kind void;
}
procedure `m5.q` `a`(`v1.h3` v1 @kind this) @signature `Lv1/h3;.a:()Lm5/q;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49efc8.  v0:= v1.`v1.h3.o` @type ^`m5.q` @kind object;
  #L49efcc.  return v0 @kind object;
}
procedure `boolean` `b`(`v1.h3` v4 @kind this, `int` v5 ) @signature `Lv1/h3;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49ef50.  v0:= 0I;
  #L49ef52.  v1:= 0I;
  #L49ef54.  v2:= v4.`v1.h3.o` @type ^`m5.q` @kind object;
  #L49ef58.  call temp:= `size`(v2) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L49ef5e.  v2:= temp;
  #L49ef60.  if v1 >= v2 then goto L49ef96;
  #L49ef64.  v2:= v4.`v1.h3.o` @type ^`m5.q` @kind object;
  #L49ef68.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L49ef6e.  v2:= temp @kind object;
  #L49ef70.  v2:= (`v1.h3$a`) v2 @kind object;
  #L49ef74.  call temp:= `d`(v2) @signature `Lv1/h3$a;.d:()Z` @kind virtual;
  #L49ef7a.  v3:= temp;
  #L49ef7c.  if v3 == 0 then goto L49ef90;
  #L49ef80.  call temp:= `c`(v2) @signature `Lv1/h3$a;.c:()I` @kind virtual;
  #L49ef86.  v2:= temp;
  #L49ef88.  if v2 != v5 then goto L49ef90;
  #L49ef8c.  v5:= 1I;
  #L49ef8e.  return v5;
  #L49ef90.  v1:= v1 + 1;
  #L49ef94.  goto L49ef54;
  #L49ef96.  return v0;
}
procedure `boolean` `equals`(`v1.h3` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lv1/h3;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49ef08.  if v2 != v3 then goto L49ef10;
  #L49ef0c.  v3:= 1I;
  #L49ef0e.  return v3;
  #L49ef10.  if v3 == 0 then goto L49ef3c;
  #L49ef14.  v0:= constclass @type ^`v1.h3` @kind object;
  #L49ef18.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L49ef1e.  v1:= temp @kind object;
  #L49ef20.  if v0 == v1 then goto L49ef26;
  #L49ef24.  goto L49ef3c;
  #L49ef26.  v3:= (`v1.h3`) v3 @kind object;
  #L49ef2a.  v0:= v2.`v1.h3.o` @type ^`m5.q` @kind object;
  #L49ef2e.  v3:= v3.`v1.h3.o` @type ^`m5.q` @kind object;
  #L49ef32.  call temp:= `equals`(v0, v3) @signature `Lm5/q;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L49ef38.  v3:= temp;
  #L49ef3a.  return v3;
  #L49ef3c.  v3:= 0I;
  #L49ef3e.  return v3;
}
procedure `int` `hashCode`(`v1.h3` v1 @kind this) @signature `Lv1/h3;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49efa8.  v0:= v1.`v1.h3.o` @type ^`m5.q` @kind object;
  #L49efac.  call temp:= `hashCode`(v0) @signature `Lm5/q;.hashCode:()I` @kind virtual;
  #L49efb2.  v0:= temp;
  #L49efb4.  return v0;
}
