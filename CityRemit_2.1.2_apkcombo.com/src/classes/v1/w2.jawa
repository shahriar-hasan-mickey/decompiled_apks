record `v1.w2` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `v1.w2.a` @AccessFlag PUBLIC_FINAL;
  `long` `v1.w2.b` @AccessFlag PUBLIC_FINAL;
}
global `v1.w2` `@@v1.w2.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `v1.w2` `@@v1.w2.d` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lv1/w2;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49d214.  v0:= new `v1.w2`;
  #L49d218.  v1:= 0L;
  #L49d21c.  call `<init>`(v0, v1, v1) @signature `Lv1/w2;.<init>:(JJ)V` @kind direct;
  #L49d222.  `@@v1.w2.c` @type ^`v1.w2` := v0 @kind object;
  #L49d226.  v3:= new `v1.w2`;
  #L49d22a.  v4:= 9223372036854775807L;
  #L49d234.  call `<init>`(v3, v4, v4) @signature `Lv1/w2;.<init>:(JJ)V` @kind direct;
  #L49d23a.  v3:= new `v1.w2`;
  #L49d23e.  call `<init>`(v3, v4, v1) @signature `Lv1/w2;.<init>:(JJ)V` @kind direct;
  #L49d244.  v3:= new `v1.w2`;
  #L49d248.  call `<init>`(v3, v1, v4) @signature `Lv1/w2;.<init>:(JJ)V` @kind direct;
  #L49d24e.  `@@v1.w2.d` @type ^`v1.w2` := v0 @kind object;
  #L49d252.  return @kind void;
}
procedure `void` `<init>`(`v1.w2` v5 @kind this, `long` v6 , `long` v8 ) @signature `Lv1/w2;.<init>:(JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49d264.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49d26a.  v0:= 1I;
  #L49d26c.  v1:= 0I;
  #L49d26e.  v2:= 0L;
  #L49d272.  v4:= lcmp(v6, v2);
  #L49d276.  if v4 < 0 then goto L49d27e;
  #L49d27a.  v4:= 1I;
  #L49d27c.  goto L49d280;
  #L49d27e.  v4:= 0I;
  #L49d280.  call `a`(v4) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L49d286.  v4:= lcmp(v8, v2);
  #L49d28a.  if v4 < 0 then goto L49d290;
  #L49d28e.  goto L49d292;
  #L49d290.  v0:= 0I;
  #L49d292.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L49d298.  v5.`v1.w2.a` @type ^`long` := v6 @kind wide;
  #L49d29c.  v5.`v1.w2.b` @type ^`long` := v8 @kind wide;
  #L49d2a0.  return @kind void;
}
procedure `long` `a`(`v1.w2` v8 @kind this, `long` v9 , `long` v11 , `long` v13 ) @signature `Lv1/w2;.a:(JJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49d158.  v2:= v8.`v1.w2.a` @type ^`long` @kind wide;
  #L49d15c.  v0:= 0L;
  #L49d160.  v4:= lcmp(v2, v0);
  #L49d164.  if v4 != 0 then goto L49d176;
  #L49d168.  v4:= v8.`v1.w2.b` @type ^`long` @kind wide;
  #L49d16c.  v6:= lcmp(v4, v0);
  #L49d170.  if v6 != 0 then goto L49d176;
  #L49d174.  return v9 @kind wide;
  #L49d176.  v4:= -9223372036854775808L;
  #L49d17a.  v0:= v9 @kind wide;
  #L49d17c.  call temp:= `S0`(v0, v2, v4) @signature `Ls3/l0;.S0:(JJJ)J` @kind static;
  #L49d182.  v0:= temp @kind wide;
  #L49d184.  v4:= v8.`v1.w2.b` @type ^`long` @kind wide;
  #L49d188.  v6:= 9223372036854775807L;
  #L49d192.  v2:= v9 @kind wide;
  #L49d194.  call temp:= `b`(v2, v4, v6) @signature `Ls3/l0;.b:(JJJ)J` @kind static;
  #L49d19a.  v2:= temp @kind wide;
  #L49d19c.  v4:= 1I;
  #L49d19e.  v5:= 0I;
  #L49d1a0.  v6:= lcmp(v0, v11);
  #L49d1a4.  if v6 > 0 then goto L49d1b4;
  #L49d1a8.  v6:= lcmp(v11, v2);
  #L49d1ac.  if v6 > 0 then goto L49d1b4;
  #L49d1b0.  v6:= 1I;
  #L49d1b2.  goto L49d1b6;
  #L49d1b4.  v6:= 0I;
  #L49d1b6.  v7:= lcmp(v0, v13);
  #L49d1ba.  if v7 > 0 then goto L49d1c8;
  #L49d1be.  v7:= lcmp(v13, v2);
  #L49d1c2.  if v7 > 0 then goto L49d1c8;
  #L49d1c6.  goto L49d1ca;
  #L49d1c8.  v4:= 0I;
  #L49d1ca.  if v6 == 0 then goto L49d1f6;
  #L49d1ce.  if v4 == 0 then goto L49d1f6;
  #L49d1d2.  v0:= v11 - v9 @kind long;
  #L49d1d6.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L49d1dc.  v0:= temp @kind wide;
  #L49d1de.  v9:= v13 - v9 @kind long;
  #L49d1e2.  call temp:= `abs`(v9) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L49d1e8.  v9:= temp @kind wide;
  #L49d1ea.  v2:= lcmp(v0, v9);
  #L49d1ee.  if v2 > 0 then goto L49d1f4;
  #L49d1f2.  return v11 @kind wide;
  #L49d1f4.  return v13 @kind wide;
  #L49d1f6.  if v6 == 0 then goto L49d1fc;
  #L49d1fa.  return v11 @kind wide;
  #L49d1fc.  if v4 == 0 then goto L49d202;
  #L49d200.  return v13 @kind wide;
  #L49d202.  return v0 @kind wide;
}
procedure `boolean` `equals`(`v1.w2` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lv1/w2;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49d0d8.  v0:= 1I;
  #L49d0da.  if v7 != v8 then goto L49d0e0;
  #L49d0de.  return v0;
  #L49d0e0.  v1:= 0I;
  #L49d0e2.  if v8 == 0 then goto L49d122;
  #L49d0e6.  v2:= constclass @type ^`v1.w2` @kind object;
  #L49d0ea.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L49d0f0.  v3:= temp @kind object;
  #L49d0f2.  if v2 == v3 then goto L49d0f8;
  #L49d0f6.  goto L49d122;
  #L49d0f8.  v8:= (`v1.w2`) v8 @kind object;
  #L49d0fc.  v2:= v7.`v1.w2.a` @type ^`long` @kind wide;
  #L49d100.  v4:= v8.`v1.w2.a` @type ^`long` @kind wide;
  #L49d104.  v6:= lcmp(v2, v4);
  #L49d108.  if v6 != 0 then goto L49d11e;
  #L49d10c.  v2:= v7.`v1.w2.b` @type ^`long` @kind wide;
  #L49d110.  v4:= v8.`v1.w2.b` @type ^`long` @kind wide;
  #L49d114.  v8:= lcmp(v2, v4);
  #L49d118.  if v8 != 0 then goto L49d11e;
  #L49d11c.  goto L49d120;
  #L49d11e.  v0:= 0I;
  #L49d120.  return v0;
  #L49d122.  return v1;
}
procedure `int` `hashCode`(`v1.w2` v4 @kind this) @signature `Lv1/w2;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49d134.  v0:= v4.`v1.w2.a` @type ^`long` @kind wide;
  #L49d138.  v1:= (`int`) v0 @kind l2i;
  #L49d13a.  v1:= v1 * 31;
  #L49d13e.  v2:= v4.`v1.w2.b` @type ^`long` @kind wide;
  #L49d142.  v0:= (`int`) v2 @kind l2i;
  #L49d144.  v1:= v1 + v0 @kind int;
  #L49d146.  return v1;
}
