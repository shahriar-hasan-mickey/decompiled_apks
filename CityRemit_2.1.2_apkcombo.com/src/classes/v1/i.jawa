record `v1.i` @kind class @AccessFlag PUBLIC_FINAL extends `v1.o1` @kind interface {
  `float` `v1.i.a` @AccessFlag PRIVATE_FINAL;
  `float` `v1.i.b` @AccessFlag PRIVATE_FINAL;
  `long` `v1.i.c` @AccessFlag PRIVATE_FINAL;
  `float` `v1.i.d` @AccessFlag PRIVATE_FINAL;
  `long` `v1.i.e` @AccessFlag PRIVATE_FINAL;
  `long` `v1.i.f` @AccessFlag PRIVATE_FINAL;
  `float` `v1.i.g` @AccessFlag PRIVATE_FINAL;
  `long` `v1.i.h` @AccessFlag PRIVATE;
  `long` `v1.i.i` @AccessFlag PRIVATE;
  `long` `v1.i.j` @AccessFlag PRIVATE;
  `long` `v1.i.k` @AccessFlag PRIVATE;
  `long` `v1.i.l` @AccessFlag PRIVATE;
  `long` `v1.i.m` @AccessFlag PRIVATE;
  `float` `v1.i.n` @AccessFlag PRIVATE;
  `float` `v1.i.o` @AccessFlag PRIVATE;
  `float` `v1.i.p` @AccessFlag PRIVATE;
  `long` `v1.i.q` @AccessFlag PRIVATE;
  `long` `v1.i.r` @AccessFlag PRIVATE;
  `long` `v1.i.s` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`v1.i` v0 @kind this, `float` v1 , `float` v2 , `long` v3 , `float` v5 , `long` v6 , `long` v8 , `float` v10 ) @signature `Lv1/i;.<init>:(FFJFJJF)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4898e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4898e6.  v0.`v1.i.a` @type ^`float` := v1;
  #L4898ea.  v0.`v1.i.b` @type ^`float` := v2;
  #L4898ee.  v0.`v1.i.c` @type ^`long` := v3 @kind wide;
  #L4898f2.  v0.`v1.i.d` @type ^`float` := v5;
  #L4898f6.  v0.`v1.i.e` @type ^`long` := v6 @kind wide;
  #L4898fa.  v0.`v1.i.f` @type ^`long` := v8 @kind wide;
  #L4898fe.  v0.`v1.i.g` @type ^`float` := v10;
  #L489902.  v3:= -4.9E-324D;
  #L48990c.  v0.`v1.i.h` @type ^`long` := v3 @kind wide;
  #L489910.  v0.`v1.i.i` @type ^`long` := v3 @kind wide;
  #L489914.  v0.`v1.i.k` @type ^`long` := v3 @kind wide;
  #L489918.  v0.`v1.i.l` @type ^`long` := v3 @kind wide;
  #L48991c.  v0.`v1.i.o` @type ^`float` := v1;
  #L489920.  v0.`v1.i.n` @type ^`float` := v2;
  #L489924.  v1:= 1.0F;
  #L489928.  v0.`v1.i.p` @type ^`float` := v1;
  #L48992c.  v0.`v1.i.q` @type ^`long` := v3 @kind wide;
  #L489930.  v0.`v1.i.j` @type ^`long` := v3 @kind wide;
  #L489934.  v0.`v1.i.m` @type ^`long` := v3 @kind wide;
  #L489938.  v0.`v1.i.r` @type ^`long` := v3 @kind wide;
  #L48993c.  v0.`v1.i.s` @type ^`long` := v3 @kind wide;
  #L489940.  return @kind void;
}
procedure `void` `<init>`(`v1.i` v0 @kind this, `float` v1 , `float` v2 , `long` v3 , `float` v5 , `long` v6 , `long` v8 , `float` v10 , `v1.i$a` v11 @kind object) @signature `Lv1/i;.<init>:(FFJFJJFLv1/i$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L489954.  call `<init>`(v0, v1, v2, v3, v5, v6, v8, v10) @signature `Lv1/i;.<init>:(FFJFJJF)V` @kind direct;
  #L48995a.  return @kind void;
}
procedure `void` `f`(`v1.i` v10 @kind this, `long` v11 ) @signature `Lv1/i;.f:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L48996c.  v0:= v10.`v1.i.r` @type ^`long` @kind wide;
  #L489970.  v2:= v10.`v1.i.s` @type ^`long` @kind wide;
  #L489974.  v4:= 3L;
  #L489978.  v2:= v2 * v4 @kind long;
  #L48997c.  v8:= v0 + v2 @kind long;
  #L489980.  v0:= v10.`v1.i.m` @type ^`long` @kind wide;
  #L489984.  v2:= 1.0F;
  #L489988.  v3:= lcmp(v0, v8);
  #L48998c.  if v3 <= 0 then goto L4899e8;
  #L489990.  v11:= v10.`v1.i.c` @type ^`long` @kind wide;
  #L489994.  call temp:= `A0`(v11) @signature `Ls3/l0;.A0:(J)J` @kind static;
  #L48999a.  v11:= temp @kind wide;
  #L48999c.  v0:= v10.`v1.i.p` @type ^`float`;
  #L4899a0.  v0:= v0 - v2 @kind float;
  #L4899a2.  v11:= (`float`) v11 @kind l2f;
  #L4899a4.  v0:= v0 * v11 @kind float;
  #L4899a8.  v0:= (`long`) v0 @kind f2l;
  #L4899aa.  v12:= v10.`v1.i.n` @type ^`float`;
  #L4899ae.  v12:= v12 - v2 @kind float;
  #L4899b0.  v12:= v12 * v11 @kind float;
  #L4899b4.  v11:= (`long`) v12 @kind f2l;
  #L4899b6.  v0:= v0 + v11 @kind long;
  #L4899b8.  v11:= 3I;
  #L4899ba.  v11:= new `long`[v11];
  #L4899be.  v12:= 0I;
  #L4899c0.  v11[v12]:= v8 @kind wide;
  #L4899c4.  v12:= 1I;
  #L4899c6.  v2:= v10.`v1.i.j` @type ^`long` @kind wide;
  #L4899ca.  v11[v12]:= v2 @kind wide;
  #L4899ce.  v12:= 2I;
  #L4899d0.  v2:= v10.`v1.i.m` @type ^`long` @kind wide;
  #L4899d4.  v2:= v2 - v0 @kind long;
  #L4899d6.  v11[v12]:= v2 @kind wide;
  #L4899da.  call temp:= `b`(v11) @signature `Lo5/f;.b:([J)J` @kind static;
  #L4899e0.  v11:= temp @kind wide;
  #L4899e2.  v10.`v1.i.m` @type ^`long` := v11 @kind wide;
  #L4899e6.  goto L489a36;
  #L4899e8.  v0:= 0I;
  #L4899ea.  v1:= v10.`v1.i.p` @type ^`float`;
  #L4899ee.  v1:= v1 - v2 @kind float;
  #L4899f0.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L4899f6.  v0:= temp;
  #L4899f8.  v1:= v10.`v1.i.d` @type ^`float`;
  #L4899fc.  v0:= v0 / v1 @kind float;
  #L4899fe.  v0:= (`long`) v0 @kind f2l;
  #L489a00.  v4:= v11 - v0 @kind long;
  #L489a04.  v6:= v10.`v1.i.m` @type ^`long` @kind wide;
  #L489a08.  call temp:= `r`(v4, v6, v8) @signature `Ls3/l0;.r:(JJJ)J` @kind static;
  #L489a0e.  v11:= temp @kind wide;
  #L489a10.  v10.`v1.i.m` @type ^`long` := v11 @kind wide;
  #L489a14.  v0:= v10.`v1.i.l` @type ^`long` @kind wide;
  #L489a18.  v2:= -4.9E-324D;
  #L489a22.  v4:= lcmp(v0, v2);
  #L489a26.  if v4 == 0 then goto L489a36;
  #L489a2a.  v2:= lcmp(v11, v0);
  #L489a2e.  if v2 <= 0 then goto L489a36;
  #L489a32.  v10.`v1.i.m` @type ^`long` := v0 @kind wide;
  #L489a36.  return @kind void;
}
procedure `void` `g`(`v1.i` v7 @kind this) @signature `Lv1/i;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L489a48.  v0:= v7.`v1.i.h` @type ^`long` @kind wide;
  #L489a4c.  v2:= -4.9E-324D;
  #L489a56.  v4:= lcmp(v0, v2);
  #L489a5a.  if v4 == 0 then goto L489a9a;
  #L489a5e.  v4:= v7.`v1.i.i` @type ^`long` @kind wide;
  #L489a62.  v6:= lcmp(v4, v2);
  #L489a66.  if v6 == 0 then goto L489a6c;
  #L489a6a.  v0:= v4 @kind wide;
  #L489a6c.  v4:= v7.`v1.i.k` @type ^`long` @kind wide;
  #L489a70.  v6:= lcmp(v4, v2);
  #L489a74.  if v6 == 0 then goto L489a82;
  #L489a78.  v6:= lcmp(v0, v4);
  #L489a7c.  if v6 >= 0 then goto L489a82;
  #L489a80.  v0:= v4 @kind wide;
  #L489a82.  v4:= v7.`v1.i.l` @type ^`long` @kind wide;
  #L489a86.  v6:= lcmp(v4, v2);
  #L489a8a.  if v6 == 0 then goto L489a9c;
  #L489a8e.  v6:= lcmp(v0, v4);
  #L489a92.  if v6 <= 0 then goto L489a9c;
  #L489a96.  v0:= v4 @kind wide;
  #L489a98.  goto L489a9c;
  #L489a9a.  v0:= v2 @kind wide;
  #L489a9c.  v4:= v7.`v1.i.j` @type ^`long` @kind wide;
  #L489aa0.  v6:= lcmp(v4, v0);
  #L489aa4.  if v6 != 0 then goto L489aaa;
  #L489aa8.  return @kind void;
  #L489aaa.  v7.`v1.i.j` @type ^`long` := v0 @kind wide;
  #L489aae.  v7.`v1.i.m` @type ^`long` := v0 @kind wide;
  #L489ab2.  v7.`v1.i.r` @type ^`long` := v2 @kind wide;
  #L489ab6.  v7.`v1.i.s` @type ^`long` := v2 @kind wide;
  #L489aba.  v7.`v1.i.q` @type ^`long` := v2 @kind wide;
  #L489abe.  return @kind void;
}
procedure `long` `h`(`long` v0 , `long` v2 , `float` v4 ) @signature `Lv1/i;.h:(JJF)J` @AccessFlag PRIVATE_STATIC {
    temp;

  #L4898b8.  v0:= (`float`) v0 @kind l2f;
  #L4898ba.  v0:= v0 * v4 @kind float;
  #L4898be.  v1:= 1.0F;
  #L4898c2.  v1:= v1 - v4 @kind float;
  #L4898c4.  v2:= (`float`) v2 @kind l2f;
  #L4898c6.  v1:= v1 * v2 @kind float;
  #L4898ca.  v0:= v0 + v1 @kind float;
  #L4898cc.  v0:= (`long`) v0 @kind f2l;
  #L4898ce.  return v0 @kind wide;
}
procedure `void` `i`(`v1.i` v3 @kind this, `long` v4 , `long` v6 ) @signature `Lv1/i;.i:(JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L489bd8.  v4:= v4 - v6 @kind long;
  #L489bda.  v6:= v3.`v1.i.r` @type ^`long` @kind wide;
  #L489bde.  v0:= -4.9E-324D;
  #L489be8.  v2:= lcmp(v6, v0);
  #L489bec.  if v2 != 0 then goto L489bfa;
  #L489bf0.  v3.`v1.i.r` @type ^`long` := v4 @kind wide;
  #L489bf4.  v4:= 0L;
  #L489bf8.  goto L489c2c;
  #L489bfa.  v0:= v3.`v1.i.g` @type ^`float`;
  #L489bfe.  call temp:= `h`(v6, v4, v0) @signature `Lv1/i;.h:(JJF)J` @kind static;
  #L489c04.  v6:= temp @kind wide;
  #L489c06.  call temp:= `max`(v4, v6) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L489c0c.  v6:= temp @kind wide;
  #L489c0e.  v3.`v1.i.r` @type ^`long` := v6 @kind wide;
  #L489c12.  v4:= v4 - v6 @kind long;
  #L489c14.  call temp:= `abs`(v4) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L489c1a.  v4:= temp @kind wide;
  #L489c1c.  v6:= v3.`v1.i.s` @type ^`long` @kind wide;
  #L489c20.  v0:= v3.`v1.i.g` @type ^`float`;
  #L489c24.  call temp:= `h`(v6, v4, v0) @signature `Lv1/i;.h:(JJF)J` @kind static;
  #L489c2a.  v4:= temp @kind wide;
  #L489c2c.  v3.`v1.i.s` @type ^`long` := v4 @kind wide;
  #L489c30.  return @kind void;
}
procedure `void` `a`(`v1.i` v7 @kind this) @signature `Lv1/i;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L489ad0.  v0:= v7.`v1.i.m` @type ^`long` @kind wide;
  #L489ad4.  v2:= -4.9E-324D;
  #L489ade.  v4:= lcmp(v0, v2);
  #L489ae2.  if v4 != 0 then goto L489ae8;
  #L489ae6.  return @kind void;
  #L489ae8.  v4:= v7.`v1.i.f` @type ^`long` @kind wide;
  #L489aec.  v0:= v0 + v4 @kind long;
  #L489aee.  v7.`v1.i.m` @type ^`long` := v0 @kind wide;
  #L489af2.  v4:= v7.`v1.i.l` @type ^`long` @kind wide;
  #L489af6.  v6:= lcmp(v4, v2);
  #L489afa.  if v6 == 0 then goto L489b0a;
  #L489afe.  v6:= lcmp(v0, v4);
  #L489b02.  if v6 <= 0 then goto L489b0a;
  #L489b06.  v7.`v1.i.m` @type ^`long` := v4 @kind wide;
  #L489b0a.  v7.`v1.i.q` @type ^`long` := v2 @kind wide;
  #L489b0e.  return @kind void;
}
procedure `void` `b`(`v1.i` v3 @kind this, `v1.r1$g` v4 @kind object) @signature `Lv1/i;.b:(Lv1/r1$g;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L489b20.  v0:= v4.`v1.r1$g.o` @type ^`long` @kind wide;
  #L489b24.  call temp:= `A0`(v0) @signature `Ls3/l0;.A0:(J)J` @kind static;
  #L489b2a.  v0:= temp @kind wide;
  #L489b2c.  v3.`v1.i.h` @type ^`long` := v0 @kind wide;
  #L489b30.  v0:= v4.`v1.r1$g.p` @type ^`long` @kind wide;
  #L489b34.  call temp:= `A0`(v0) @signature `Ls3/l0;.A0:(J)J` @kind static;
  #L489b3a.  v0:= temp @kind wide;
  #L489b3c.  v3.`v1.i.k` @type ^`long` := v0 @kind wide;
  #L489b40.  v0:= v4.`v1.r1$g.q` @type ^`long` @kind wide;
  #L489b44.  call temp:= `A0`(v0) @signature `Ls3/l0;.A0:(J)J` @kind static;
  #L489b4a.  v0:= temp @kind wide;
  #L489b4c.  v3.`v1.i.l` @type ^`long` := v0 @kind wide;
  #L489b50.  v0:= v4.`v1.r1$g.r` @type ^`float`;
  #L489b54.  v1:= -8388609I;
  #L489b5a.  v2:= fcmpl(v0, v1);
  #L489b5e.  if v2 == 0 then goto L489b64;
  #L489b62.  goto L489b68;
  #L489b64.  v0:= v3.`v1.i.a` @type ^`float`;
  #L489b68.  v3.`v1.i.o` @type ^`float` := v0;
  #L489b6c.  v4:= v4.`v1.r1$g.s` @type ^`float`;
  #L489b70.  v1:= fcmpl(v4, v1);
  #L489b74.  if v1 == 0 then goto L489b7a;
  #L489b78.  goto L489b7e;
  #L489b7a.  v4:= v3.`v1.i.b` @type ^`float`;
  #L489b7e.  v3.`v1.i.n` @type ^`float` := v4;
  #L489b82.  v1:= 1.0F;
  #L489b86.  v0:= fcmpl(v0, v1);
  #L489b8a.  if v0 != 0 then goto L489ba4;
  #L489b8e.  v4:= fcmpl(v4, v1);
  #L489b92.  if v4 != 0 then goto L489ba4;
  #L489b96.  v0:= -4.9E-324D;
  #L489ba0.  v3.`v1.i.h` @type ^`long` := v0 @kind wide;
  #L489ba4.  call `g`(v3) @signature `Lv1/i;.g:()V` @kind direct;
  #L489baa.  return @kind void;
}
procedure `float` `c`(`v1.i` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lv1/i;.c:(JJ)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4897e8.  v0:= v6.`v1.i.h` @type ^`long` @kind wide;
  #L4897ec.  v2:= -4.9E-324D;
  #L4897f6.  v4:= 1.0F;
  #L4897fa.  v5:= lcmp(v0, v2);
  #L4897fe.  if v5 != 0 then goto L489804;
  #L489802.  return v4;
  #L489804.  call `i`(v6, v7, v9) @signature `Lv1/i;.i:(JJ)V` @kind direct;
  #L48980a.  v9:= v6.`v1.i.q` @type ^`long` @kind wide;
  #L48980e.  v0:= lcmp(v9, v2);
  #L489812.  if v0 == 0 then goto L489836;
  #L489816.  call temp:= `elapsedRealtime`() @signature `Landroid/os/SystemClock;.elapsedRealtime:()J` @kind static;
  #L48981c.  v9:= temp @kind wide;
  #L48981e.  v0:= v6.`v1.i.q` @type ^`long` @kind wide;
  #L489822.  v9:= v9 - v0 @kind long;
  #L489824.  v0:= v6.`v1.i.c` @type ^`long` @kind wide;
  #L489828.  v2:= lcmp(v9, v0);
  #L48982c.  if v2 >= 0 then goto L489836;
  #L489830.  v7:= v6.`v1.i.p` @type ^`float`;
  #L489834.  return v7;
  #L489836.  call temp:= `elapsedRealtime`() @signature `Landroid/os/SystemClock;.elapsedRealtime:()J` @kind static;
  #L48983c.  v9:= temp @kind wide;
  #L48983e.  v6.`v1.i.q` @type ^`long` := v9 @kind wide;
  #L489842.  call `f`(v6, v7) @signature `Lv1/i;.f:(J)V` @kind direct;
  #L489848.  v9:= v6.`v1.i.m` @type ^`long` @kind wide;
  #L48984c.  v7:= v7 - v9 @kind long;
  #L48984e.  call temp:= `abs`(v7) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L489854.  v9:= temp @kind wide;
  #L489856.  v0:= v6.`v1.i.e` @type ^`long` @kind wide;
  #L48985a.  v2:= lcmp(v9, v0);
  #L48985e.  if v2 >= 0 then goto L489868;
  #L489862.  v6.`v1.i.p` @type ^`float` := v4;
  #L489866.  goto L489888;
  #L489868.  v9:= v6.`v1.i.d` @type ^`float`;
  #L48986c.  v7:= (`float`) v7 @kind l2f;
  #L48986e.  v9:= v9 * v7 @kind float;
  #L489872.  v9:= v9 + v4 @kind float;
  #L489874.  v7:= v6.`v1.i.o` @type ^`float`;
  #L489878.  v8:= v6.`v1.i.n` @type ^`float`;
  #L48987c.  call temp:= `p`(v9, v7, v8) @signature `Ls3/l0;.p:(FFF)F` @kind static;
  #L489882.  v7:= temp;
  #L489884.  v6.`v1.i.p` @type ^`float` := v7;
  #L489888.  v7:= v6.`v1.i.p` @type ^`float`;
  #L48988c.  return v7;
}
procedure `void` `d`(`v1.i` v0 @kind this, `long` v1 ) @signature `Lv1/i;.d:(J)V` @AccessFlag PUBLIC {
    temp;

  #L489bbc.  v0.`v1.i.i` @type ^`long` := v1 @kind wide;
  #L489bc0.  call `g`(v0) @signature `Lv1/i;.g:()V` @kind direct;
  #L489bc6.  return @kind void;
}
procedure `long` `e`(`v1.i` v2 @kind this) @signature `Lv1/i;.e:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4898a0.  v0:= v2.`v1.i.m` @type ^`long` @kind wide;
  #L4898a4.  return v0 @kind wide;
}
