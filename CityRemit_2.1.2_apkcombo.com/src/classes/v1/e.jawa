record `v1.e` @kind class @AccessFlag PUBLIC_ABSTRACT extends `v1.k2` @kind interface {
  `v1.d3$c` `v1.e.a` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`v1.e` v1 @kind this) @signature `Lv1/e;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L489020.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L489026.  v0:= new `v1.d3$c`;
  #L48902a.  call `<init>`(v0) @signature `Lv1/d3$c;.<init>:()V` @kind direct;
  #L489030.  v1.`v1.e.a` @type ^`v1.d3$c` := v0 @kind object;
  #L489034.  return @kind void;
}
procedure `int` `N`(`v1.e` v2 @kind this) @signature `Lv1/e;.N:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L488fac.  call temp:= `B`(v2) @signature `Lv1/k2;.B:()I` @kind interface;
  #L488fb2.  v0:= temp;
  #L488fb4.  v1:= 1I;
  #L488fb6.  if v0 != v1 then goto L488fbc;
  #L488fba.  v0:= 0I;
  #L488fbc.  return v0;
}
procedure `void` `F`(`v1.e` v1 @kind this, `long` v2 ) @signature `Lv1/e;.F:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489048.  call temp:= `v`(v1) @signature `Lv1/k2;.v:()I` @kind interface;
  #L48904e.  v0:= temp;
  #L489050.  call `m`(v1, v0, v2) @signature `Lv1/k2;.m:(IJ)V` @kind interface;
  #L489056.  return @kind void;
}
procedure `boolean` `J`(`v1.e` v3 @kind this) @signature `Lv1/e;.J:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L488e80.  call temp:= `D`(v3) @signature `Lv1/k2;.D:()Lv1/d3;` @kind interface;
  #L488e86.  v0:= temp @kind object;
  #L488e88.  call temp:= `q`(v0) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L488e8e.  v1:= temp;
  #L488e90.  if v1 != 0 then goto L488eb8;
  #L488e94.  call temp:= `v`(v3) @signature `Lv1/k2;.v:()I` @kind interface;
  #L488e9a.  v1:= temp;
  #L488e9c.  v2:= v3.`v1.e.a` @type ^`v1.d3$c` @kind object;
  #L488ea0.  call temp:= `n`(v0, v1, v2) @signature `Lv1/d3;.n:(ILv1/d3$c;)Lv1/d3$c;` @kind virtual;
  #L488ea6.  v0:= temp @kind object;
  #L488ea8.  call temp:= `g`(v0) @signature `Lv1/d3$c;.g:()Z` @kind virtual;
  #L488eae.  v0:= temp;
  #L488eb0.  if v0 == 0 then goto L488eb8;
  #L488eb4.  v0:= 1I;
  #L488eb6.  goto L488eba;
  #L488eb8.  v0:= 0I;
  #L488eba.  return v0;
}
procedure `long` `K`(`v1.e` v3 @kind this) @signature `Lv1/e;.K:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L488fd0.  call temp:= `D`(v3) @signature `Lv1/k2;.D:()Lv1/d3;` @kind interface;
  #L488fd6.  v0:= temp @kind object;
  #L488fd8.  call temp:= `q`(v0) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L488fde.  v1:= temp;
  #L488fe0.  if v1 == 0 then goto L488ff0;
  #L488fe4.  v0:= -4.9E-324D;
  #L488fee.  goto L48900c;
  #L488ff0.  call temp:= `v`(v3) @signature `Lv1/k2;.v:()I` @kind interface;
  #L488ff6.  v1:= temp;
  #L488ff8.  v2:= v3.`v1.e.a` @type ^`v1.d3$c` @kind object;
  #L488ffc.  call temp:= `n`(v0, v1, v2) @signature `Lv1/d3;.n:(ILv1/d3$c;)Lv1/d3$c;` @kind virtual;
  #L489002.  v0:= temp @kind object;
  #L489004.  call temp:= `f`(v0) @signature `Lv1/d3$c;.f:()J` @kind virtual;
  #L48900a.  v0:= temp @kind wide;
  #L48900c.  return v0 @kind wide;
}
procedure `int` `L`(`v1.e` v4 @kind this) @signature `Lv1/e;.L:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L488f14.  call temp:= `D`(v4) @signature `Lv1/k2;.D:()Lv1/d3;` @kind interface;
  #L488f1a.  v0:= temp @kind object;
  #L488f1c.  call temp:= `q`(v0) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L488f22.  v1:= temp;
  #L488f24.  if v1 == 0 then goto L488f2c;
  #L488f28.  v0:= -1I;
  #L488f2a.  goto L488f4c;
  #L488f2c.  call temp:= `v`(v4) @signature `Lv1/k2;.v:()I` @kind interface;
  #L488f32.  v1:= temp;
  #L488f34.  call temp:= `N`(v4) @signature `Lv1/e;.N:()I` @kind direct;
  #L488f3a.  v2:= temp;
  #L488f3c.  call temp:= `E`(v4) @signature `Lv1/k2;.E:()Z` @kind interface;
  #L488f42.  v3:= temp;
  #L488f44.  call temp:= `e`(v0, v1, v2, v3) @signature `Lv1/d3;.e:(IIZ)I` @kind virtual;
  #L488f4a.  v0:= temp;
  #L488f4c.  return v0;
}
procedure `int` `M`(`v1.e` v4 @kind this) @signature `Lv1/e;.M:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L488f60.  call temp:= `D`(v4) @signature `Lv1/k2;.D:()Lv1/d3;` @kind interface;
  #L488f66.  v0:= temp @kind object;
  #L488f68.  call temp:= `q`(v0) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L488f6e.  v1:= temp;
  #L488f70.  if v1 == 0 then goto L488f78;
  #L488f74.  v0:= -1I;
  #L488f76.  goto L488f98;
  #L488f78.  call temp:= `v`(v4) @signature `Lv1/k2;.v:()I` @kind interface;
  #L488f7e.  v1:= temp;
  #L488f80.  call temp:= `N`(v4) @signature `Lv1/e;.N:()I` @kind direct;
  #L488f86.  v2:= temp;
  #L488f88.  call temp:= `E`(v4) @signature `Lv1/k2;.E:()Z` @kind interface;
  #L488f8e.  v3:= temp;
  #L488f90.  call temp:= `l`(v0, v1, v2, v3) @signature `Lv1/d3;.l:(IIZ)I` @kind virtual;
  #L488f96.  v0:= temp;
  #L488f98.  return v0;
}
procedure `boolean` `p`(`v1.e` v3 @kind this) @signature `Lv1/e;.p:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L488ecc.  call temp:= `D`(v3) @signature `Lv1/k2;.D:()Lv1/d3;` @kind interface;
  #L488ed2.  v0:= temp @kind object;
  #L488ed4.  call temp:= `q`(v0) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L488eda.  v1:= temp;
  #L488edc.  if v1 != 0 then goto L488f00;
  #L488ee0.  call temp:= `v`(v3) @signature `Lv1/k2;.v:()I` @kind interface;
  #L488ee6.  v1:= temp;
  #L488ee8.  v2:= v3.`v1.e.a` @type ^`v1.d3$c` @kind object;
  #L488eec.  call temp:= `n`(v0, v1, v2) @signature `Lv1/d3;.n:(ILv1/d3$c;)Lv1/d3$c;` @kind virtual;
  #L488ef2.  v0:= temp @kind object;
  #L488ef4.  v0:= v0.`v1.d3$c.v` @type ^`boolean` @kind boolean;
  #L488ef8.  if v0 == 0 then goto L488f00;
  #L488efc.  v0:= 1I;
  #L488efe.  goto L488f02;
  #L488f00.  v0:= 0I;
  #L488f02.  return v0;
}
procedure `boolean` `s`(`v1.e` v2 @kind this) @signature `Lv1/e;.s:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L488de8.  call temp:= `L`(v2) @signature `Lv1/e;.L:()I` @kind virtual;
  #L488dee.  v0:= temp;
  #L488df0.  v1:= -1I;
  #L488df2.  if v0 == v1 then goto L488dfa;
  #L488df6.  v0:= 1I;
  #L488df8.  goto L488dfc;
  #L488dfa.  v0:= 0I;
  #L488dfc.  return v0;
}
procedure `boolean` `x`(`v1.e` v2 @kind this) @signature `Lv1/e;.x:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L488e10.  call temp:= `M`(v2) @signature `Lv1/e;.M:()I` @kind virtual;
  #L488e16.  v0:= temp;
  #L488e18.  v1:= -1I;
  #L488e1a.  if v0 == v1 then goto L488e22;
  #L488e1e.  v0:= 1I;
  #L488e20.  goto L488e24;
  #L488e22.  v0:= 0I;
  #L488e24.  return v0;
}
procedure `boolean` `z`(`v1.e` v3 @kind this) @signature `Lv1/e;.z:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L488e38.  call temp:= `D`(v3) @signature `Lv1/k2;.D:()Lv1/d3;` @kind interface;
  #L488e3e.  v0:= temp @kind object;
  #L488e40.  call temp:= `q`(v0) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L488e46.  v1:= temp;
  #L488e48.  if v1 != 0 then goto L488e6c;
  #L488e4c.  call temp:= `v`(v3) @signature `Lv1/k2;.v:()I` @kind interface;
  #L488e52.  v1:= temp;
  #L488e54.  v2:= v3.`v1.e.a` @type ^`v1.d3$c` @kind object;
  #L488e58.  call temp:= `n`(v0, v1, v2) @signature `Lv1/d3;.n:(ILv1/d3$c;)Lv1/d3$c;` @kind virtual;
  #L488e5e.  v0:= temp @kind object;
  #L488e60.  v0:= v0.`v1.d3$c.w` @type ^`boolean` @kind boolean;
  #L488e64.  if v0 == 0 then goto L488e6c;
  #L488e68.  v0:= 1I;
  #L488e6a.  goto L488e6e;
  #L488e6c.  v0:= 0I;
  #L488e6e.  return v0;
}
