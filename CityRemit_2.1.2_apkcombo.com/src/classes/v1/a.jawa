record `v1.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `v1.d3` @kind class {
  `int` `v1.a.p` @AccessFlag PRIVATE_FINAL;
  `x2.p0` `v1.a.q` @AccessFlag PRIVATE_FINAL;
  `boolean` `v1.a.r` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`v1.a` v0 @kind this, `boolean` v1 , `x2.p0` v2 @kind object) @signature `Lv1/a;.<init>:(ZLx2/p0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4886a0.  call `<init>`(v0) @signature `Lv1/d3;.<init>:()V` @kind direct;
  #L4886a6.  v0.`v1.a.r` @type ^`boolean` := v1 @kind boolean;
  #L4886aa.  v0.`v1.a.q` @type ^`x2.p0` := v2 @kind object;
  #L4886ae.  call temp:= `a`(v2) @signature `Lx2/p0;.a:()I` @kind interface;
  #L4886b4.  v1:= temp;
  #L4886b6.  v0.`v1.a.p` @type ^`int` := v1;
  #L4886ba.  return @kind void;
}
procedure `int` `B`(`v1.a` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lv1/a;.B:(IZ)I` @AccessFlag PRIVATE {
    temp;

  #L488304.  if v2 == 0 then goto L488316;
  #L488308.  v2:= v0.`v1.a.q` @type ^`x2.p0` @kind object;
  #L48830c.  call temp:= `c`(v2, v1) @signature `Lx2/p0;.c:(I)I` @kind interface;
  #L488312.  v1:= temp;
  #L488314.  goto L48832a;
  #L488316.  v2:= v0.`v1.a.p` @type ^`int`;
  #L48831a.  v2:= v2 + -1;
  #L48831e.  if v1 >= v2 then goto L488328;
  #L488322.  v1:= v1 + 1;
  #L488326.  goto L48832a;
  #L488328.  v1:= -1I;
  #L48832a.  return v1;
}
procedure `int` `C`(`v1.a` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lv1/a;.C:(IZ)I` @AccessFlag PRIVATE {
    temp;

  #L4883f0.  if v2 == 0 then goto L488402;
  #L4883f4.  v2:= v0.`v1.a.q` @type ^`x2.p0` @kind object;
  #L4883f8.  call temp:= `f`(v2, v1) @signature `Lx2/p0;.f:(I)I` @kind interface;
  #L4883fe.  v1:= temp;
  #L488400.  goto L48840e;
  #L488402.  if v1 <= 0 then goto L48840c;
  #L488406.  v1:= v1 + -1;
  #L48840a.  goto L48840e;
  #L48840c.  v1:= -1I;
  #L48840e.  return v1;
}
procedure `java.lang.Object` `v`(`java.lang.Object` v0 @kind object) @signature `Lv1/a;.v:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4884d4.  v0:= (`android.util.Pair`) v0 @kind object;
  #L4884d8.  v0:= v0.`android.util.Pair.second` @type ^`java.lang.Object` @kind object;
  #L4884dc.  return v0 @kind object;
}
procedure `java.lang.Object` `w`(`java.lang.Object` v0 @kind object) @signature `Lv1/a;.w:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4884f0.  v0:= (`android.util.Pair`) v0 @kind object;
  #L4884f4.  v0:= v0.`android.util.Pair.first` @type ^`java.lang.Object` @kind object;
  #L4884f8.  return v0 @kind object;
}
procedure `java.lang.Object` `y`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lv1/a;.y:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48850c.  call temp:= `create`(v0, v1) @signature `Landroid/util/Pair;.create:(Ljava/lang/Object;Ljava/lang/Object;)Landroid/util/Pair;` @kind static;
  #L488512.  v0:= temp @kind object;
  #L488514.  return v0 @kind object;
}
procedure `int` `A`(`int` v0 ) @signature `Lv1/a;.A:(I)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `v1.d3` `D`(`int` v0 ) @signature `Lv1/a;.D:(I)Lv1/d3;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `a`(`v1.a` v3 @kind this, `boolean` v4 ) @signature `Lv1/a;.a:(Z)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4881b0.  v0:= v3.`v1.a.p` @type ^`int`;
  #L4881b4.  v1:= -1I;
  #L4881b6.  if v0 != 0 then goto L4881bc;
  #L4881ba.  return v1;
  #L4881bc.  v0:= v3.`v1.a.r` @type ^`boolean` @kind boolean;
  #L4881c0.  v2:= 0I;
  #L4881c2.  if v0 == 0 then goto L4881c8;
  #L4881c6.  v4:= 0I;
  #L4881c8.  if v4 == 0 then goto L4881d8;
  #L4881cc.  v0:= v3.`v1.a.q` @type ^`x2.p0` @kind object;
  #L4881d0.  call temp:= `e`(v0) @signature `Lx2/p0;.e:()I` @kind interface;
  #L4881d6.  v2:= temp;
  #L4881d8.  call temp:= `D`(v3, v2) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L4881de.  v0:= temp @kind object;
  #L4881e0.  call temp:= `q`(v0) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L4881e6.  v0:= temp;
  #L4881e8.  if v0 == 0 then goto L4881fa;
  #L4881ec.  call temp:= `B`(v3, v2, v4) @signature `Lv1/a;.B:(IZ)I` @kind direct;
  #L4881f2.  v2:= temp;
  #L4881f4.  if v2 != v1 then goto L4881d8;
  #L4881f8.  return v1;
  #L4881fa.  call temp:= `A`(v3, v2) @signature `Lv1/a;.A:(I)I` @kind virtual;
  #L488200.  v0:= temp;
  #L488202.  call temp:= `D`(v3, v2) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L488208.  v1:= temp @kind object;
  #L48820a.  call temp:= `a`(v1, v4) @signature `Lv1/d3;.a:(Z)I` @kind virtual;
  #L488210.  v4:= temp;
  #L488212.  v0:= v0 + v4 @kind int;
  #L488214.  return v0;
}
procedure `int` `b`(`v1.a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lv1/a;.b:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L488228.  v0:= instanceof @variable v4 @type ^`android.util.Pair` @kind boolean;
  #L48822c.  v1:= -1I;
  #L48822e.  if v0 != 0 then goto L488234;
  #L488232.  return v1;
  #L488234.  call temp:= `w`(v4) @signature `Lv1/a;.w:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48823a.  v0:= temp @kind object;
  #L48823c.  call temp:= `v`(v4) @signature `Lv1/a;.v:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488242.  v4:= temp @kind object;
  #L488244.  call temp:= `s`(v3, v0) @signature `Lv1/a;.s:(Ljava/lang/Object;)I` @kind virtual;
  #L48824a.  v0:= temp;
  #L48824c.  if v0 != v1 then goto L488252;
  #L488250.  return v1;
  #L488252.  call temp:= `D`(v3, v0) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L488258.  v2:= temp @kind object;
  #L48825a.  call temp:= `b`(v2, v4) @signature `Lv1/d3;.b:(Ljava/lang/Object;)I` @kind virtual;
  #L488260.  v4:= temp;
  #L488262.  if v4 != v1 then goto L488268;
  #L488266.  goto L488274;
  #L488268.  call temp:= `z`(v3, v0) @signature `Lv1/a;.z:(I)I` @kind virtual;
  #L48826e.  v0:= temp;
  #L488270.  v1:= v0 + v4 @kind int;
  #L488274.  return v1;
}
procedure `int` `c`(`v1.a` v3 @kind this, `boolean` v4 ) @signature `Lv1/a;.c:(Z)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L488288.  v0:= v3.`v1.a.p` @type ^`int`;
  #L48828c.  v1:= -1I;
  #L48828e.  if v0 != 0 then goto L488294;
  #L488292.  return v1;
  #L488294.  v2:= v3.`v1.a.r` @type ^`boolean` @kind boolean;
  #L488298.  if v2 == 0 then goto L48829e;
  #L48829c.  v4:= 0I;
  #L48829e.  if v4 == 0 then goto L4882b0;
  #L4882a2.  v0:= v3.`v1.a.q` @type ^`x2.p0` @kind object;
  #L4882a6.  call temp:= `g`(v0) @signature `Lx2/p0;.g:()I` @kind interface;
  #L4882ac.  v0:= temp;
  #L4882ae.  goto L4882b4;
  #L4882b0.  v0:= v0 + -1;
  #L4882b4.  call temp:= `D`(v3, v0) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L4882ba.  v2:= temp @kind object;
  #L4882bc.  call temp:= `q`(v2) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L4882c2.  v2:= temp;
  #L4882c4.  if v2 == 0 then goto L4882d6;
  #L4882c8.  call temp:= `C`(v3, v0, v4) @signature `Lv1/a;.C:(IZ)I` @kind direct;
  #L4882ce.  v0:= temp;
  #L4882d0.  if v0 != v1 then goto L4882b4;
  #L4882d4.  return v1;
  #L4882d6.  call temp:= `A`(v3, v0) @signature `Lv1/a;.A:(I)I` @kind virtual;
  #L4882dc.  v1:= temp;
  #L4882de.  call temp:= `D`(v3, v0) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L4882e4.  v0:= temp @kind object;
  #L4882e6.  call temp:= `c`(v0, v4) @signature `Lv1/d3;.c:(Z)I` @kind virtual;
  #L4882ec.  v4:= temp;
  #L4882ee.  v1:= v1 + v4 @kind int;
  #L4882f0.  return v1;
}
procedure `int` `e`(`v1.a` v5 @kind this, `int` v6 , `int` v7 , `boolean` v8 ) @signature `Lv1/a;.e:(IIZ)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48833c.  v0:= v5.`v1.a.r` @type ^`boolean` @kind boolean;
  #L488340.  v1:= 0I;
  #L488342.  v2:= 2I;
  #L488344.  if v0 == 0 then goto L488352;
  #L488348.  v8:= 1I;
  #L48834a.  if v7 != v8 then goto L488350;
  #L48834e.  v7:= 2I;
  #L488350.  v8:= 0I;
  #L488352.  call temp:= `u`(v5, v6) @signature `Lv1/a;.u:(I)I` @kind virtual;
  #L488358.  v0:= temp;
  #L48835a.  call temp:= `A`(v5, v0) @signature `Lv1/a;.A:(I)I` @kind virtual;
  #L488360.  v3:= temp;
  #L488362.  call temp:= `D`(v5, v0) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L488368.  v4:= temp @kind object;
  #L48836a.  v6:= v6 - v3 @kind int;
  #L48836c.  if v7 != v2 then goto L488372;
  #L488370.  goto L488374;
  #L488372.  v1:= v7;
  #L488374.  call temp:= `e`(v4, v6, v1, v8) @signature `Lv1/d3;.e:(IIZ)I` @kind virtual;
  #L48837a.  v6:= temp;
  #L48837c.  v1:= -1I;
  #L48837e.  if v6 == v1 then goto L488386;
  #L488382.  v3:= v3 + v6 @kind int;
  #L488384.  return v3;
  #L488386.  call temp:= `B`(v5, v0, v8) @signature `Lv1/a;.B:(IZ)I` @kind direct;
  #L48838c.  v6:= temp;
  #L48838e.  if v6 == v1 then goto L4883b0;
  #L488392.  call temp:= `D`(v5, v6) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L488398.  v0:= temp @kind object;
  #L48839a.  call temp:= `q`(v0) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L4883a0.  v0:= temp;
  #L4883a2.  if v0 == 0 then goto L4883b0;
  #L4883a6.  call temp:= `B`(v5, v6, v8) @signature `Lv1/a;.B:(IZ)I` @kind direct;
  #L4883ac.  v6:= temp;
  #L4883ae.  goto L48838e;
  #L4883b0.  if v6 == v1 then goto L4883d0;
  #L4883b4.  call temp:= `A`(v5, v6) @signature `Lv1/a;.A:(I)I` @kind virtual;
  #L4883ba.  v7:= temp;
  #L4883bc.  call temp:= `D`(v5, v6) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L4883c2.  v6:= temp @kind object;
  #L4883c4.  call temp:= `a`(v6, v8) @signature `Lv1/d3;.a:(Z)I` @kind virtual;
  #L4883ca.  v6:= temp;
  #L4883cc.  v7:= v7 + v6 @kind int;
  #L4883ce.  return v7;
  #L4883d0.  if v7 != v2 then goto L4883de;
  #L4883d4.  call temp:= `a`(v5, v8) @signature `Lv1/a;.a:(Z)I` @kind virtual;
  #L4883da.  v6:= temp;
  #L4883dc.  return v6;
  #L4883de.  return v1;
}
procedure `v1.d3$b` `g`(`v1.a` v4 @kind this, `int` v5 , `v1.d3$b` v6 @kind object, `boolean` v7 ) @signature `Lv1/a;.g:(ILv1/d3$b;Z)Lv1/d3$b;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48856c.  call temp:= `t`(v4, v5) @signature `Lv1/a;.t:(I)I` @kind virtual;
  #L488572.  v0:= temp;
  #L488574.  call temp:= `A`(v4, v0) @signature `Lv1/a;.A:(I)I` @kind virtual;
  #L48857a.  v1:= temp;
  #L48857c.  call temp:= `z`(v4, v0) @signature `Lv1/a;.z:(I)I` @kind virtual;
  #L488582.  v2:= temp;
  #L488584.  call temp:= `D`(v4, v0) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L48858a.  v3:= temp @kind object;
  #L48858c.  v5:= v5 - v2 @kind int;
  #L48858e.  call temp:= `g`(v3, v5, v6, v7) @signature `Lv1/d3;.g:(ILv1/d3$b;Z)Lv1/d3$b;` @kind virtual;
  #L488594.  v5:= v6.`v1.d3$b.q` @type ^`int`;
  #L488598.  v5:= v5 + v1 @kind int;
  #L48859a.  v6.`v1.d3$b.q` @type ^`int` := v5;
  #L48859e.  if v7 == 0 then goto L4885c2;
  #L4885a2.  call temp:= `x`(v4, v0) @signature `Lv1/a;.x:(I)Ljava/lang/Object;` @kind virtual;
  #L4885a8.  v5:= temp @kind object;
  #L4885aa.  v7:= v6.`v1.d3$b.p` @type ^`java.lang.Object` @kind object;
  #L4885ae.  call temp:= `e`(v7) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4885b4.  v7:= temp @kind object;
  #L4885b6.  call temp:= `y`(v5, v7) @signature `Lv1/a;.y:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4885bc.  v5:= temp @kind object;
  #L4885be.  v6.`v1.d3$b.p` @type ^`java.lang.Object` := v5 @kind object;
  #L4885c2.  return v6 @kind object;
}
procedure `v1.d3$b` `h`(`v1.a` v3 @kind this, `java.lang.Object` v4 @kind object, `v1.d3$b` v5 @kind object) @signature `Lv1/a;.h:(Ljava/lang/Object;Lv1/d3$b;)Lv1/d3$b;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4885d4.  call temp:= `w`(v4) @signature `Lv1/a;.w:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4885da.  v0:= temp @kind object;
  #L4885dc.  call temp:= `v`(v4) @signature `Lv1/a;.v:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4885e2.  v1:= temp @kind object;
  #L4885e4.  call temp:= `s`(v3, v0) @signature `Lv1/a;.s:(Ljava/lang/Object;)I` @kind virtual;
  #L4885ea.  v0:= temp;
  #L4885ec.  call temp:= `A`(v3, v0) @signature `Lv1/a;.A:(I)I` @kind virtual;
  #L4885f2.  v2:= temp;
  #L4885f4.  call temp:= `D`(v3, v0) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L4885fa.  v0:= temp @kind object;
  #L4885fc.  call temp:= `h`(v0, v1, v5) @signature `Lv1/d3;.h:(Ljava/lang/Object;Lv1/d3$b;)Lv1/d3$b;` @kind virtual;
  #L488602.  v0:= v5.`v1.d3$b.q` @type ^`int`;
  #L488606.  v0:= v0 + v2 @kind int;
  #L488608.  v5.`v1.d3$b.q` @type ^`int` := v0;
  #L48860c.  v5.`v1.d3$b.p` @type ^`java.lang.Object` := v4 @kind object;
  #L488610.  return v5 @kind object;
}
procedure `int` `l`(`v1.a` v5 @kind this, `int` v6 , `int` v7 , `boolean` v8 ) @signature `Lv1/a;.l:(IIZ)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L488420.  v0:= v5.`v1.a.r` @type ^`boolean` @kind boolean;
  #L488424.  v1:= 0I;
  #L488426.  v2:= 2I;
  #L488428.  if v0 == 0 then goto L488436;
  #L48842c.  v8:= 1I;
  #L48842e.  if v7 != v8 then goto L488434;
  #L488432.  v7:= 2I;
  #L488434.  v8:= 0I;
  #L488436.  call temp:= `u`(v5, v6) @signature `Lv1/a;.u:(I)I` @kind virtual;
  #L48843c.  v0:= temp;
  #L48843e.  call temp:= `A`(v5, v0) @signature `Lv1/a;.A:(I)I` @kind virtual;
  #L488444.  v3:= temp;
  #L488446.  call temp:= `D`(v5, v0) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L48844c.  v4:= temp @kind object;
  #L48844e.  v6:= v6 - v3 @kind int;
  #L488450.  if v7 != v2 then goto L488456;
  #L488454.  goto L488458;
  #L488456.  v1:= v7;
  #L488458.  call temp:= `l`(v4, v6, v1, v8) @signature `Lv1/d3;.l:(IIZ)I` @kind virtual;
  #L48845e.  v6:= temp;
  #L488460.  v1:= -1I;
  #L488462.  if v6 == v1 then goto L48846a;
  #L488466.  v3:= v3 + v6 @kind int;
  #L488468.  return v3;
  #L48846a.  call temp:= `C`(v5, v0, v8) @signature `Lv1/a;.C:(IZ)I` @kind direct;
  #L488470.  v6:= temp;
  #L488472.  if v6 == v1 then goto L488494;
  #L488476.  call temp:= `D`(v5, v6) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L48847c.  v0:= temp @kind object;
  #L48847e.  call temp:= `q`(v0) @signature `Lv1/d3;.q:()Z` @kind virtual;
  #L488484.  v0:= temp;
  #L488486.  if v0 == 0 then goto L488494;
  #L48848a.  call temp:= `C`(v5, v6, v8) @signature `Lv1/a;.C:(IZ)I` @kind direct;
  #L488490.  v6:= temp;
  #L488492.  goto L488472;
  #L488494.  if v6 == v1 then goto L4884b4;
  #L488498.  call temp:= `A`(v5, v6) @signature `Lv1/a;.A:(I)I` @kind virtual;
  #L48849e.  v7:= temp;
  #L4884a0.  call temp:= `D`(v5, v6) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L4884a6.  v6:= temp @kind object;
  #L4884a8.  call temp:= `c`(v6, v8) @signature `Lv1/d3;.c:(Z)I` @kind virtual;
  #L4884ae.  v6:= temp;
  #L4884b0.  v7:= v7 + v6 @kind int;
  #L4884b2.  return v7;
  #L4884b4.  if v7 != v2 then goto L4884c2;
  #L4884b8.  call temp:= `c`(v5, v8) @signature `Lv1/a;.c:(Z)I` @kind virtual;
  #L4884be.  v6:= temp;
  #L4884c0.  return v6;
  #L4884c2.  return v1;
}
procedure `java.lang.Object` `m`(`v1.a` v3 @kind this, `int` v4 ) @signature `Lv1/a;.m:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L488528.  call temp:= `t`(v3, v4) @signature `Lv1/a;.t:(I)I` @kind virtual;
  #L48852e.  v0:= temp;
  #L488530.  call temp:= `z`(v3, v0) @signature `Lv1/a;.z:(I)I` @kind virtual;
  #L488536.  v1:= temp;
  #L488538.  call temp:= `D`(v3, v0) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L48853e.  v2:= temp @kind object;
  #L488540.  v4:= v4 - v1 @kind int;
  #L488542.  call temp:= `m`(v2, v4) @signature `Lv1/d3;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L488548.  v4:= temp @kind object;
  #L48854a.  call temp:= `x`(v3, v0) @signature `Lv1/a;.x:(I)Ljava/lang/Object;` @kind virtual;
  #L488550.  v0:= temp @kind object;
  #L488552.  call temp:= `y`(v0, v4) @signature `Lv1/a;.y:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488558.  v4:= temp @kind object;
  #L48855a.  return v4 @kind object;
}
procedure `v1.d3$c` `o`(`v1.a` v4 @kind this, `int` v5 , `v1.d3$c` v6 @kind object, `long` v7 ) @signature `Lv1/a;.o:(ILv1/d3$c;J)Lv1/d3$c;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L488624.  call temp:= `u`(v4, v5) @signature `Lv1/a;.u:(I)I` @kind virtual;
  #L48862a.  v0:= temp;
  #L48862c.  call temp:= `A`(v4, v0) @signature `Lv1/a;.A:(I)I` @kind virtual;
  #L488632.  v1:= temp;
  #L488634.  call temp:= `z`(v4, v0) @signature `Lv1/a;.z:(I)I` @kind virtual;
  #L48863a.  v2:= temp;
  #L48863c.  call temp:= `D`(v4, v0) @signature `Lv1/a;.D:(I)Lv1/d3;` @kind virtual;
  #L488642.  v3:= temp @kind object;
  #L488644.  v5:= v5 - v1 @kind int;
  #L488646.  call temp:= `o`(v3, v5, v6, v7) @signature `Lv1/d3;.o:(ILv1/d3$c;J)Lv1/d3$c;` @kind virtual;
  #L48864c.  call temp:= `x`(v4, v0) @signature `Lv1/a;.x:(I)Ljava/lang/Object;` @kind virtual;
  #L488652.  v5:= temp @kind object;
  #L488654.  v7:= `@@v1.d3$c.F` @type ^`java.lang.Object` @kind object;
  #L488658.  v8:= v6.`v1.d3$c.o` @type ^`java.lang.Object` @kind object;
  #L48865c.  call temp:= `equals`(v7, v8) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L488662.  v7:= temp;
  #L488664.  if v7 == 0 then goto L48866a;
  #L488668.  goto L488676;
  #L48866a.  v7:= v6.`v1.d3$c.o` @type ^`java.lang.Object` @kind object;
  #L48866e.  call temp:= `y`(v5, v7) @signature `Lv1/a;.y:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488674.  v5:= temp @kind object;
  #L488676.  v6.`v1.d3$c.o` @type ^`java.lang.Object` := v5 @kind object;
  #L48867a.  v5:= v6.`v1.d3$c.C` @type ^`int`;
  #L48867e.  v5:= v5 + v2 @kind int;
  #L488680.  v6.`v1.d3$c.C` @type ^`int` := v5;
  #L488684.  v5:= v6.`v1.d3$c.D` @type ^`int`;
  #L488688.  v5:= v5 + v2 @kind int;
  #L48868a.  v6.`v1.d3$c.D` @type ^`int` := v5;
  #L48868e.  return v6 @kind object;
}
procedure `int` `s`(`java.lang.Object` v0 @kind object) @signature `Lv1/a;.s:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `t`(`int` v0 ) @signature `Lv1/a;.t:(I)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `u`(`int` v0 ) @signature `Lv1/a;.u:(I)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `x`(`int` v0 ) @signature `Lv1/a;.x:(I)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `z`(`int` v0 ) @signature `Lv1/a;.z:(I)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
