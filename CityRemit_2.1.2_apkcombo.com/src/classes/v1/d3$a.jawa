record `v1.d3$a` @kind class @AccessFlag  extends `v1.d3` @kind class {
}
procedure `void` `<init>`(`v1.d3$a` v0 @kind this) @signature `Lv1/d3$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49daec.  call `<init>`(v0) @signature `Lv1/d3;.<init>:()V` @kind direct;
  #L49daf2.  return @kind void;
}
procedure `int` `b`(`v1.d3$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lv1/d3$a;.b:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;

  #L49da5c.  v1:= -1I;
  #L49da5e.  return v1;
}
procedure `v1.d3$b` `g`(`v1.d3$a` v0 @kind this, `int` v1 , `v1.d3$b` v2 @kind object, `boolean` v3 ) @signature `Lv1/d3$a;.g:(ILv1/d3$b;Z)Lv1/d3$b;` @AccessFlag PUBLIC {
    temp;

  #L49dab4.  v1:= new `java.lang.IndexOutOfBoundsException`;
  #L49dab8.  call `<init>`(v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L49dabe.  throw v1;
}
procedure `int` `i`(`v1.d3$a` v1 @kind this) @signature `Lv1/d3$a;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49da70.  v0:= 0I;
  #L49da72.  return v0;
}
procedure `java.lang.Object` `m`(`v1.d3$a` v0 @kind this, `int` v1 ) @signature `Lv1/d3$a;.m:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L49da98.  v1:= new `java.lang.IndexOutOfBoundsException`;
  #L49da9c.  call `<init>`(v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L49daa2.  throw v1;
}
procedure `v1.d3$c` `o`(`v1.d3$a` v0 @kind this, `int` v1 , `v1.d3$c` v2 @kind object, `long` v3 ) @signature `Lv1/d3$a;.o:(ILv1/d3$c;J)Lv1/d3$c;` @AccessFlag PUBLIC {
    temp;

  #L49dad0.  v1:= new `java.lang.IndexOutOfBoundsException`;
  #L49dad4.  call `<init>`(v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L49dada.  throw v1;
}
procedure `int` `p`(`v1.d3$a` v1 @kind this) @signature `Lv1/d3$a;.p:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49da84.  v0:= 0I;
  #L49da86.  return v0;
}
