record `v1.u2` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `v1.u2.a` @AccessFlag PUBLIC_FINAL;
}
global `v1.u2` `@@v1.u2.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lv1/u2;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49d098.  v0:= new `v1.u2`;
  #L49d09c.  v1:= 0I;
  #L49d09e.  call `<init>`(v0, v1) @signature `Lv1/u2;.<init>:(Z)V` @kind direct;
  #L49d0a4.  `@@v1.u2.b` @type ^`v1.u2` := v0 @kind object;
  #L49d0a8.  return @kind void;
}
procedure `void` `<init>`(`v1.u2` v0 @kind this, `boolean` v1 ) @signature `Lv1/u2;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49d0bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49d0c2.  v0.`v1.u2.a` @type ^`boolean` := v1 @kind boolean;
  #L49d0c6.  return @kind void;
}
procedure `boolean` `equals`(`v1.u2` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lv1/u2;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49d034.  v0:= 1I;
  #L49d036.  if v4 != v5 then goto L49d03c;
  #L49d03a.  return v0;
  #L49d03c.  v1:= 0I;
  #L49d03e.  if v5 == 0 then goto L49d06a;
  #L49d042.  v2:= constclass @type ^`v1.u2` @kind object;
  #L49d046.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L49d04c.  v3:= temp @kind object;
  #L49d04e.  if v2 == v3 then goto L49d054;
  #L49d052.  goto L49d06a;
  #L49d054.  v5:= (`v1.u2`) v5 @kind object;
  #L49d058.  v2:= v4.`v1.u2.a` @type ^`boolean` @kind boolean;
  #L49d05c.  v5:= v5.`v1.u2.a` @type ^`boolean` @kind boolean;
  #L49d060.  if v2 != v5 then goto L49d066;
  #L49d064.  goto L49d068;
  #L49d066.  v0:= 0I;
  #L49d068.  return v0;
  #L49d06a.  return v1;
}
procedure `int` `hashCode`(`v1.u2` v1 @kind this) @signature `Lv1/u2;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d07c.  v0:= v1.`v1.u2.a` @type ^`boolean` @kind boolean;
  #L49d080.  v0:= v0 ^~ 1;
  #L49d084.  return v0;
}
