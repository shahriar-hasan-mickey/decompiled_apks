record `k6.e$c` @kind class @AccessFlag FINAL extends `java.io.InputStream` @kind class {
  `int` `k6.e$c.o` @AccessFlag PRIVATE;
  `int` `k6.e$c.p` @AccessFlag PRIVATE;
  `k6.e` `k6.e$c.q` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`k6.e$c` v1 @kind this, `k6.e` v2 @kind object, `k6.e$b` v3 @kind object) @signature `Lk6/e$c;.<init>:(Lk6/e;Lk6/e$b;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3ab680.  v1.`k6.e$c.q` @type ^`k6.e` := v2 @kind object;
  #L3ab684.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L3ab68a.  v0:= v3.`k6.e$b.a` @type ^`int`;
  #L3ab68e.  v0:= v0 + 4;
  #L3ab692.  call temp:= `a`(v2, v0) @signature `Lk6/e;.a:(Lk6/e;I)I` @kind static;
  #L3ab698.  v2:= temp;
  #L3ab69a.  v1.`k6.e$c.o` @type ^`int` := v2;
  #L3ab69e.  v2:= v3.`k6.e$b.b` @type ^`int`;
  #L3ab6a2.  v1.`k6.e$c.p` @type ^`int` := v2;
  #L3ab6a6.  return @kind void;
}
procedure `void` `<init>`(`k6.e$c` v0 @kind this, `k6.e` v1 @kind object, `k6.e$b` v2 @kind object, `k6.e$a` v3 @kind object) @signature `Lk6/e$c;.<init>:(Lk6/e;Lk6/e$b;Lk6/e$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3ab6b8.  call `<init>`(v0, v1, v2) @signature `Lk6/e$c;.<init>:(Lk6/e;Lk6/e$b;)V` @kind direct;
  #L3ab6be.  return @kind void;
}
procedure `int` `read`(`k6.e$c` v3 @kind this) @signature `Lk6/e$c;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ab598.  v0:= v3.`k6.e$c.p` @type ^`int`;
  #L3ab59c.  if v0 != 0 then goto L3ab5a4;
  #L3ab5a0.  v0:= -1I;
  #L3ab5a2.  return v0;
  #L3ab5a4.  v0:= v3.`k6.e$c.q` @type ^`k6.e` @kind object;
  #L3ab5a8.  call temp:= `h`(v0) @signature `Lk6/e;.h:(Lk6/e;)Ljava/io/RandomAccessFile;` @kind static;
  #L3ab5ae.  v0:= temp @kind object;
  #L3ab5b0.  v1:= v3.`k6.e$c.o` @type ^`int`;
  #L3ab5b4.  v1:= (`long`) v1 @kind i2l;
  #L3ab5b6.  call `seek`(v0, v1) @signature `Ljava/io/RandomAccessFile;.seek:(J)V` @kind virtual;
  #L3ab5bc.  v0:= v3.`k6.e$c.q` @type ^`k6.e` @kind object;
  #L3ab5c0.  call temp:= `h`(v0) @signature `Lk6/e;.h:(Lk6/e;)Ljava/io/RandomAccessFile;` @kind static;
  #L3ab5c6.  v0:= temp @kind object;
  #L3ab5c8.  call temp:= `read`(v0) @signature `Ljava/io/RandomAccessFile;.read:()I` @kind virtual;
  #L3ab5ce.  v0:= temp;
  #L3ab5d0.  v1:= v3.`k6.e$c.q` @type ^`k6.e` @kind object;
  #L3ab5d4.  v2:= v3.`k6.e$c.o` @type ^`int`;
  #L3ab5d8.  v2:= v2 + 1;
  #L3ab5dc.  call temp:= `a`(v1, v2) @signature `Lk6/e;.a:(Lk6/e;I)I` @kind static;
  #L3ab5e2.  v1:= temp;
  #L3ab5e4.  v3.`k6.e$c.o` @type ^`int` := v1;
  #L3ab5e8.  v1:= v3.`k6.e$c.p` @type ^`int`;
  #L3ab5ec.  v1:= v1 + -1;
  #L3ab5f0.  v3.`k6.e$c.p` @type ^`int` := v1;
  #L3ab5f4.  return v0;
}
procedure `int` `read`(`k6.e$c` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lk6/e$c;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ab608.  v0:= "buffer" @kind object;
  #L3ab60c.  call temp:= `c`(v3, v0) @signature `Lk6/e;.c:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ab612.  v0:= v4 ^| v5 @kind int;
  #L3ab616.  if v0 < 0 then goto L3ab664;
  #L3ab61a.  v0:= length @variable v3;
  #L3ab61c.  v0:= v0 - v4 @kind int;
  #L3ab61e.  if v5 > v0 then goto L3ab664;
  #L3ab622.  v0:= v2.`k6.e$c.p` @type ^`int`;
  #L3ab626.  if v0 <= 0 then goto L3ab660;
  #L3ab62a.  if v5 <= v0 then goto L3ab630;
  #L3ab62e.  v5:= v0;
  #L3ab630.  v0:= v2.`k6.e$c.q` @type ^`k6.e` @kind object;
  #L3ab634.  v1:= v2.`k6.e$c.o` @type ^`int`;
  #L3ab638.  call `e`(v0, v1, v3, v4, v5) @signature `Lk6/e;.e:(Lk6/e;I[BII)V` @kind static;
  #L3ab63e.  v3:= v2.`k6.e$c.q` @type ^`k6.e` @kind object;
  #L3ab642.  v4:= v2.`k6.e$c.o` @type ^`int`;
  #L3ab646.  v4:= v4 + v5 @kind int;
  #L3ab648.  call temp:= `a`(v3, v4) @signature `Lk6/e;.a:(Lk6/e;I)I` @kind static;
  #L3ab64e.  v3:= temp;
  #L3ab650.  v2.`k6.e$c.o` @type ^`int` := v3;
  #L3ab654.  v3:= v2.`k6.e$c.p` @type ^`int`;
  #L3ab658.  v3:= v3 - v5 @kind int;
  #L3ab65a.  v2.`k6.e$c.p` @type ^`int` := v3;
  #L3ab65e.  return v5;
  #L3ab660.  v3:= -1I;
  #L3ab662.  return v3;
  #L3ab664.  v3:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L3ab668.  call `<init>`(v3) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L3ab66e.  throw v3;
}
