record `k6.i$a` @kind class @AccessFlag  {
  `java.util.concurrent.atomic.AtomicMarkableReference` `k6.i$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `k6.i$a.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `k6.i$a.c` @AccessFlag PRIVATE_FINAL;
  `k6.i` `k6.i$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`k6.i$a` v1 @kind this, `k6.i` v2 @kind object, `boolean` v3 ) @signature `Lk6/i$a;.<init>:(Lk6/i;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ac750.  v1.`k6.i$a.d` @type ^`k6.i` := v2 @kind object;
  #L3ac754.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ac75a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3ac75e.  v0:= 0I;
  #L3ac760.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3ac766.  v1.`k6.i$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L3ac76a.  v1.`k6.i$a.c` @type ^`boolean` := v3 @kind boolean;
  #L3ac76e.  v2:= new `k6.b`;
  #L3ac772.  if v3 == 0 then goto L3ac77c;
  #L3ac776.  v3:= 8192I;
  #L3ac77a.  goto L3ac780;
  #L3ac77c.  v3:= 1024I;
  #L3ac780.  v0:= 64I;
  #L3ac784.  call `<init>`(v2, v0, v3) @signature `Lk6/b;.<init>:(II)V` @kind direct;
  #L3ac78a.  v3:= new `java.util.concurrent.atomic.AtomicMarkableReference`;
  #L3ac78e.  v0:= 0I;
  #L3ac790.  call `<init>`(v3, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.<init>:(Ljava/lang/Object;Z)V` @kind direct;
  #L3ac796.  v1.`k6.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` := v3 @kind object;
  #L3ac79a.  return @kind void;
}
procedure `java.lang.Void` `a`(`k6.i$a` v0 @kind object) @signature `Lk6/i$a;.a:(Lk6/i$a;)Ljava/lang/Void;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L3ac6e4.  call temp:= `c`(v0) @signature `Lk6/i$a;.c:()Ljava/lang/Void;` @kind direct;
  #L3ac6ea.  v0:= temp @kind object;
  #L3ac6ec.  return v0 @kind object;
}
procedure `java.lang.Void` `c`(`k6.i$a` v2 @kind this) @signature `Lk6/i$a;.c:()Ljava/lang/Void;` @AccessFlag PRIVATE_SYNTHETIC {
    temp;
    v0;
    v1;

  #L3ac700.  v0:= v2.`k6.i$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ac704.  v1:= 0I;
  #L3ac706.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L3ac70c.  call `e`(v2) @signature `Lk6/i$a;.e:()V` @kind direct;
  #L3ac712.  return v1 @kind object;
}
procedure `void` `d`(`k6.i$a` v3 @kind this) @signature `Lk6/i$a;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ac7ac.  v0:= new `k6.h`;
  #L3ac7b0.  call `<init>`(v0, v3) @signature `Lk6/h;.<init>:(Lk6/i$a;)V` @kind direct;
  #L3ac7b6.  v1:= v3.`k6.i$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3ac7ba.  v2:= 0I;
  #L3ac7bc.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3ac7c2.  v1:= temp;
  #L3ac7c4.  if v1 == 0 then goto L3ac7da;
  #L3ac7c8.  v1:= v3.`k6.i$a.d` @type ^`k6.i` @kind object;
  #L3ac7cc.  call temp:= `b`(v1) @signature `Lk6/i;.b:(Lk6/i;)Lj6/h;` @kind static;
  #L3ac7d2.  v1:= temp @kind object;
  #L3ac7d4.  call temp:= `h`(v1, v0) @signature `Lj6/h;.h:(Ljava/util/concurrent/Callable;)La5/l;` @kind virtual;
  #L3ac7da.  return @kind void;
}
procedure `void` `e`(`k6.i$a` v4 @kind this) @signature `Lk6/i$a;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ac7ec.  @monitorenter v4
  #L3ac7ee.  v0:= v4.`k6.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L3ac7f2.  call temp:= `isMarked`(v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.isMarked:()Z` @kind virtual;
  #L3ac7f8.  v0:= temp;
  #L3ac7fa.  if v0 == 0 then goto L3ac830;
  #L3ac7fe.  v0:= v4.`k6.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L3ac802.  call temp:= `getReference`(v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L3ac808.  v0:= temp @kind object;
  #L3ac80a.  v0:= (`k6.b`) v0 @kind object;
  #L3ac80e.  call temp:= `a`(v0) @signature `Lk6/b;.a:()Ljava/util/Map;` @kind virtual;
  #L3ac814.  v0:= temp @kind object;
  #L3ac816.  v1:= v4.`k6.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L3ac81a.  call temp:= `getReference`(v1) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L3ac820.  v2:= temp @kind object;
  #L3ac822.  v2:= (`k6.b`) v2 @kind object;
  #L3ac826.  v3:= 0I;
  #L3ac828.  call `set`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.set:(Ljava/lang/Object;Z)V` @kind virtual;
  #L3ac82e.  goto L3ac832;
  #L3ac830.  v0:= 0I;
  #L3ac832.  @monitorexit v4
  #L3ac834.  if v0 == 0 then goto L3ac85a;
  #L3ac838.  v1:= v4.`k6.i$a.d` @type ^`k6.i` @kind object;
  #L3ac83c.  call temp:= `d`(v1) @signature `Lk6/i;.d:(Lk6/i;)Lk6/d;` @kind static;
  #L3ac842.  v1:= temp @kind object;
  #L3ac844.  v2:= v4.`k6.i$a.d` @type ^`k6.i` @kind object;
  #L3ac848.  call temp:= `c`(v2) @signature `Lk6/i;.c:(Lk6/i;)Ljava/lang/String;` @kind static;
  #L3ac84e.  v2:= temp @kind object;
  #L3ac850.  v3:= v4.`k6.i$a.c` @type ^`boolean` @kind boolean;
  #L3ac854.  call `l`(v1, v2, v0, v3) @signature `Lk6/d;.l:(Ljava/lang/String;Ljava/util/Map;Z)V` @kind virtual;
  #L3ac85a.  return @kind void;
  #L3ac85c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ac85e.  @monitorexit v4
  #L3ac860.  throw v0;
  catch `java.lang.Throwable` @[L3ac7ee..L3ac834] goto L3ac85c;
  catch `java.lang.Throwable` @[L3ac85e..L3ac860] goto L3ac85c;
}
procedure `java.util.Map` `b`(`k6.i$a` v1 @kind this) @signature `Lk6/i$a;.b:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ac724.  v0:= v1.`k6.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L3ac728.  call temp:= `getReference`(v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L3ac72e.  v0:= temp @kind object;
  #L3ac730.  v0:= (`k6.b`) v0 @kind object;
  #L3ac734.  call temp:= `a`(v0) @signature `Lk6/b;.a:()Ljava/util/Map;` @kind virtual;
  #L3ac73a.  v0:= temp @kind object;
  #L3ac73c.  return v0 @kind object;
}
procedure `boolean` `f`(`k6.i$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lk6/i$a;.f:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ac674.  @monitorenter v1
  #L3ac676.  v0:= v1.`k6.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L3ac67a.  call temp:= `getReference`(v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L3ac680.  v0:= temp @kind object;
  #L3ac682.  v0:= (`k6.b`) v0 @kind object;
  #L3ac686.  call temp:= `d`(v0, v2, v3) @signature `Lk6/b;.d:(Ljava/lang/String;Ljava/lang/String;)Z` @kind virtual;
  #L3ac68c.  v2:= temp;
  #L3ac68e.  if v2 != 0 then goto L3ac698;
  #L3ac692.  v2:= 0I;
  #L3ac694.  @monitorexit v1
  #L3ac696.  return v2;
  #L3ac698.  v2:= v1.`k6.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L3ac69c.  call temp:= `getReference`(v2) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L3ac6a2.  v3:= temp @kind object;
  #L3ac6a4.  v3:= (`k6.b`) v3 @kind object;
  #L3ac6a8.  v0:= 1I;
  #L3ac6aa.  call `set`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.set:(Ljava/lang/Object;Z)V` @kind virtual;
  #L3ac6b0.  @monitorexit v1
  #L3ac6b2.  call `d`(v1) @signature `Lk6/i$a;.d:()V` @kind direct;
  #L3ac6b8.  return v0;
  #L3ac6ba.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ac6bc.  @monitorexit v1
  #L3ac6be.  throw v2;
  catch `java.lang.Throwable` @[L3ac676..L3ac6b2] goto L3ac6ba;
  catch `java.lang.Throwable` @[L3ac6bc..L3ac6be] goto L3ac6ba;
}
