record `k6.f$a` @kind class @AccessFlag  extends `k6.e$d` @kind interface {
  `byte`[] `k6.f$a.a` @AccessFlag FINAL_SYNTHETIC;
  `int`[] `k6.f$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`k6.f$a` v0 @kind this, `k6.f` v1 @kind object, `byte`[] v2 @kind object, `int`[] v3 @kind object) @signature `Lk6/f$a;.<init>:(Lk6/f;[B[I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ab77c.  v0.`k6.f$a.a` @type ^`byte`[] := v2 @kind object;
  #L3ab780.  v0.`k6.f$a.b` @type ^`int`[] := v3 @kind object;
  #L3ab784.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ab78a.  return @kind void;
}
procedure `void` `a`(`k6.f$a` v3 @kind this, `java.io.InputStream` v4 @kind object, `int` v5 ) @signature `Lk6/f$a;.a:(Ljava/io/InputStream;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ab79c.  v0:= v3.`k6.f$a.a` @type ^`byte`[] @kind object;
  #L3ab7a0.  v1:= v3.`k6.f$a.b` @type ^`int`[] @kind object;
  #L3ab7a4.  v2:= 0I;
  #L3ab7a6.  v1:= v1[v2];
  #L3ab7aa.  call temp:= `read`(v4, v0, v1, v5) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3ab7b0.  v0:= v3.`k6.f$a.b` @type ^`int`[] @kind object;
  #L3ab7b4.  v1:= v0[v2];
  #L3ab7b8.  v1:= v1 + v5 @kind int;
  #L3ab7ba.  v0[v2]:= v1;
  #L3ab7be.  call `close`(v4) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3ab7c4.  return @kind void;
  #L3ab7c6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ab7c8.  call `close`(v4) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3ab7ce.  throw v5;
  catch `java.lang.Throwable` @[L3ab79c..L3ab7be] goto L3ab7c6;
}
