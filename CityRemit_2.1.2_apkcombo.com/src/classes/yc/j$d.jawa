record `yc.j$d` @kind class @AccessFlag  extends `yc.k` @kind interface {
}
procedure `void` `<init>`(`yc.j$d` v0 @kind this) @signature `Lyc/j$d;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f9e04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f9e0a.  return @kind void;
}
procedure `java.lang.Object` `a`(`yc.j$d` v0 @kind this, `yc.e` v1 @kind object) @signature `Lyc/j$d;.a:(Lyc/e;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4f9dac.  call temp:= `b`(v0, v1) @signature `Lyc/j$d;.b:(Lyc/e;)Luc/q;` @kind virtual;
  #L4f9db2.  v1:= temp @kind object;
  #L4f9db4.  return v1 @kind object;
}
procedure `uc.q` `b`(`yc.j$d` v1 @kind this, `yc.e` v2 @kind object) @signature `Lyc/j$d;.b:(Lyc/e;)Luc/q;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9dc8.  v0:= `@@yc.j.a` @type ^`yc.k` @kind object;
  #L4f9dcc.  call temp:= `j`(v2, v0) @signature `Lyc/e;.j:(Lyc/k;)Ljava/lang/Object;` @kind interface;
  #L4f9dd2.  v0:= temp @kind object;
  #L4f9dd4.  v0:= (`uc.q`) v0 @kind object;
  #L4f9dd8.  if v0 == 0 then goto L4f9dde;
  #L4f9ddc.  goto L4f9df0;
  #L4f9dde.  v0:= `@@yc.j.e` @type ^`yc.k` @kind object;
  #L4f9de2.  call temp:= `j`(v2, v0) @signature `Lyc/e;.j:(Lyc/k;)Ljava/lang/Object;` @kind interface;
  #L4f9de8.  v2:= temp @kind object;
  #L4f9dea.  v0:= v2 @kind object;
  #L4f9dec.  v0:= (`uc.q`) v0 @kind object;
  #L4f9df0.  return v0 @kind object;
}
