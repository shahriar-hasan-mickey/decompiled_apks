record `yc.j$f` @kind class @AccessFlag  extends `yc.k` @kind interface {
}
procedure `void` `<init>`(`yc.j$f` v0 @kind this) @signature `Lyc/j$f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f9edc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f9ee2.  return @kind void;
}
procedure `java.lang.Object` `a`(`yc.j$f` v0 @kind this, `yc.e` v1 @kind object) @signature `Lyc/j$f;.a:(Lyc/e;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4f9e88.  call temp:= `b`(v0, v1) @signature `Lyc/j$f;.b:(Lyc/e;)Luc/f;` @kind virtual;
  #L4f9e8e.  v1:= temp @kind object;
  #L4f9e90.  return v1 @kind object;
}
procedure `uc.f` `b`(`yc.j$f` v2 @kind this, `yc.e` v3 @kind object) @signature `Lyc/j$f;.b:(Lyc/e;)Luc/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f9ea4.  v0:= `@@yc.a.M` @type ^`yc.a` @kind object;
  #L4f9ea8.  call temp:= `d`(v3, v0) @signature `Lyc/e;.d:(Lyc/i;)Z` @kind interface;
  #L4f9eae.  v1:= temp;
  #L4f9eb0.  if v1 == 0 then goto L4f9ec6;
  #L4f9eb4.  call temp:= `B`(v3, v0) @signature `Lyc/e;.B:(Lyc/i;)J` @kind interface;
  #L4f9eba.  v0:= temp @kind wide;
  #L4f9ebc.  call temp:= `E0`(v0) @signature `Luc/f;.E0:(J)Luc/f;` @kind static;
  #L4f9ec2.  v3:= temp @kind object;
  #L4f9ec4.  return v3 @kind object;
  #L4f9ec6.  v3:= 0I;
  #L4f9ec8.  return v3 @kind object;
}
