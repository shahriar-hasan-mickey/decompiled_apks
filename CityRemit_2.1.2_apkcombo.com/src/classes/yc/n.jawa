record `yc.n` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Serializable` @kind interface {
  `long` `yc.n.o` @AccessFlag PRIVATE_FINAL;
  `long` `yc.n.p` @AccessFlag PRIVATE_FINAL;
  `long` `yc.n.q` @AccessFlag PRIVATE_FINAL;
  `long` `yc.n.r` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`yc.n` v0 @kind this, `long` v1 , `long` v3 , `long` v5 , `long` v7 ) @signature `Lyc/n;.<init>:(JJJJ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4fa410.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fa416.  v0.`yc.n.o` @type ^`long` := v1 @kind wide;
  #L4fa41a.  v0.`yc.n.p` @type ^`long` := v3 @kind wide;
  #L4fa41e.  v0.`yc.n.q` @type ^`long` := v5 @kind wide;
  #L4fa422.  v0.`yc.n.r` @type ^`long` := v7 @kind wide;
  #L4fa426.  return @kind void;
}
procedure `yc.n` `i`(`long` v10 , `long` v12 ) @signature `Lyc/n;.i:(JJ)Lyc/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4fa438.  v0:= lcmp(v10, v12);
  #L4fa43c.  if v0 > 0 then goto L4fa456;
  #L4fa440.  v0:= new `yc.n`;
  #L4fa444.  v1:= v0 @kind object;
  #L4fa446.  v2:= v10 @kind wide;
  #L4fa448.  v4:= v10 @kind wide;
  #L4fa44a.  v6:= v12 @kind wide;
  #L4fa44c.  v8:= v12 @kind wide;
  #L4fa44e.  call `<init>`(v1, v2, v4, v6, v8) @signature `Lyc/n;.<init>:(JJJJ)V` @kind direct;
  #L4fa454.  return v0 @kind object;
  #L4fa456.  v10:= new `java.lang.IllegalArgumentException`;
  #L4fa45a.  v11:= "Minimum value must be less than maximum value" @kind object;
  #L4fa45e.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa464.  throw v10;
}
procedure `yc.n` `j`(`long` v8 , `long` v10 , `long` v12 ) @signature `Lyc/n;.j:(JJJ)Lyc/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4fa478.  v0:= v8 @kind wide;
  #L4fa47a.  v2:= v8 @kind wide;
  #L4fa47c.  v4:= v10 @kind wide;
  #L4fa47e.  v6:= v12 @kind wide;
  #L4fa480.  call temp:= `k`(v0, v2, v4, v6) @signature `Lyc/n;.k:(JJJJ)Lyc/n;` @kind static;
  #L4fa486.  v8:= temp @kind object;
  #L4fa488.  return v8 @kind object;
}
procedure `yc.n` `k`(`long` v10 , `long` v12 , `long` v14 , `long` v16 ) @signature `Lyc/n;.k:(JJJJ)Lyc/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4fa49c.  v0:= lcmp(v10, v12);
  #L4fa4a0.  if v0 > 0 then goto L4fa4ec;
  #L4fa4a4.  v0:= lcmp(v14, v16);
  #L4fa4a8.  if v0 > 0 then goto L4fa4dc;
  #L4fa4ac.  v0:= lcmp(v12, v16);
  #L4fa4b0.  if v0 > 0 then goto L4fa4cc;
  #L4fa4b4.  v9:= new `yc.n`;
  #L4fa4b8.  v0:= v9 @kind object;
  #L4fa4ba.  v1:= v10 @kind wide;
  #L4fa4bc.  v3:= v12 @kind wide;
  #L4fa4be.  v5:= v14 @kind wide;
  #L4fa4c0.  v7:= v16 @kind wide;
  #L4fa4c4.  call `<init>`(v0, v1, v3, v5, v7) @signature `Lyc/n;.<init>:(JJJJ)V` @kind direct;
  #L4fa4ca.  return v9 @kind object;
  #L4fa4cc.  v0:= new `java.lang.IllegalArgumentException`;
  #L4fa4d0.  v1:= "Minimum value must be less than maximum value" @kind object;
  #L4fa4d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa4da.  throw v0;
  #L4fa4dc.  v0:= new `java.lang.IllegalArgumentException`;
  #L4fa4e0.  v1:= "Smallest maximum value must be less than largest maximum value" @kind object;
  #L4fa4e4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa4ea.  throw v0;
  #L4fa4ec.  v0:= new `java.lang.IllegalArgumentException`;
  #L4fa4f0.  v1:= "Smallest minimum value must be less than largest minimum value" @kind object;
  #L4fa4f4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa4fa.  throw v0;
}
procedure `int` `a`(`yc.n` v3 @kind this, `long` v4 , `yc.i` v6 @kind object) @signature `Lyc/n;.a:(JLyc/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fa1e8.  call temp:= `g`(v3, v4) @signature `Lyc/n;.g:(J)Z` @kind virtual;
  #L4fa1ee.  v0:= temp;
  #L4fa1f0.  if v0 == 0 then goto L4fa1f8;
  #L4fa1f4.  v5:= (`int`) v4 @kind l2i;
  #L4fa1f6.  return v5;
  #L4fa1f8.  v0:= new `uc.b`;
  #L4fa1fc.  v1:= new `java.lang.StringBuilder`;
  #L4fa200.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4fa206.  v2:= "Invalid int value for " @kind object;
  #L4fa20a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa210.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa216.  v6:= ": " @kind object;
  #L4fa21a.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa220.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa226.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4fa22c.  v4:= temp @kind object;
  #L4fa22e.  call `<init>`(v0, v4) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa234.  throw v0;
}
procedure `long` `b`(`yc.n` v4 @kind this, `long` v5 , `yc.i` v7 @kind object) @signature `Lyc/n;.b:(JLyc/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4fa334.  call temp:= `h`(v4, v5) @signature `Lyc/n;.h:(J)Z` @kind virtual;
  #L4fa33a.  v0:= temp;
  #L4fa33c.  if v0 != 0 then goto L4fa3cc;
  #L4fa340.  v0:= "): " @kind object;
  #L4fa344.  if v7 == 0 then goto L4fa392;
  #L4fa348.  v1:= new `uc.b`;
  #L4fa34c.  v2:= new `java.lang.StringBuilder`;
  #L4fa350.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4fa356.  v3:= "Invalid value for " @kind object;
  #L4fa35a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa360.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa366.  v7:= " (valid values " @kind object;
  #L4fa36a.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa370.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa376.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa37c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa382.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4fa388.  v5:= temp @kind object;
  #L4fa38a.  call `<init>`(v1, v5) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa390.  throw v1;
  #L4fa392.  v7:= new `uc.b`;
  #L4fa396.  v1:= new `java.lang.StringBuilder`;
  #L4fa39a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4fa3a0.  v2:= "Invalid value (valid values " @kind object;
  #L4fa3a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa3aa.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa3b0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa3b6.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa3bc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4fa3c2.  v5:= temp @kind object;
  #L4fa3c4.  call `<init>`(v7, v5) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa3ca.  throw v7;
  #L4fa3cc.  return v5 @kind wide;
}
procedure `long` `c`(`yc.n` v2 @kind this) @signature `Lyc/n;.c:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fa3e0.  v0:= v2.`yc.n.r` @type ^`long` @kind wide;
  #L4fa3e4.  return v0 @kind wide;
}
procedure `long` `d`(`yc.n` v2 @kind this) @signature `Lyc/n;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fa3f8.  v0:= v2.`yc.n.o` @type ^`long` @kind wide;
  #L4fa3fc.  return v0 @kind wide;
}
procedure `boolean` `e`(`yc.n` v5 @kind this) @signature `Lyc/n;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fa104.  v0:= v5.`yc.n.o` @type ^`long` @kind wide;
  #L4fa108.  v2:= v5.`yc.n.p` @type ^`long` @kind wide;
  #L4fa10c.  v4:= lcmp(v0, v2);
  #L4fa110.  if v4 != 0 then goto L4fa128;
  #L4fa114.  v0:= v5.`yc.n.q` @type ^`long` @kind wide;
  #L4fa118.  v2:= v5.`yc.n.r` @type ^`long` @kind wide;
  #L4fa11c.  v4:= lcmp(v0, v2);
  #L4fa120.  if v4 != 0 then goto L4fa128;
  #L4fa124.  v0:= 1I;
  #L4fa126.  goto L4fa12a;
  #L4fa128.  v0:= 0I;
  #L4fa12a.  return v0;
}
procedure `boolean` `equals`(`yc.n` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lyc/n;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4fa094.  v0:= 1I;
  #L4fa096.  if v8 != v7 then goto L4fa09c;
  #L4fa09a.  return v0;
  #L4fa09c.  v1:= instanceof @variable v8 @type ^`yc.n` @kind boolean;
  #L4fa0a0.  v2:= 0I;
  #L4fa0a2.  if v1 == 0 then goto L4fa0f0;
  #L4fa0a6.  v8:= (`yc.n`) v8 @kind object;
  #L4fa0aa.  v3:= v7.`yc.n.o` @type ^`long` @kind wide;
  #L4fa0ae.  v5:= v8.`yc.n.o` @type ^`long` @kind wide;
  #L4fa0b2.  v1:= lcmp(v3, v5);
  #L4fa0b6.  if v1 != 0 then goto L4fa0ec;
  #L4fa0ba.  v3:= v7.`yc.n.p` @type ^`long` @kind wide;
  #L4fa0be.  v5:= v8.`yc.n.p` @type ^`long` @kind wide;
  #L4fa0c2.  v1:= lcmp(v3, v5);
  #L4fa0c6.  if v1 != 0 then goto L4fa0ec;
  #L4fa0ca.  v3:= v7.`yc.n.q` @type ^`long` @kind wide;
  #L4fa0ce.  v5:= v8.`yc.n.q` @type ^`long` @kind wide;
  #L4fa0d2.  v1:= lcmp(v3, v5);
  #L4fa0d6.  if v1 != 0 then goto L4fa0ec;
  #L4fa0da.  v3:= v7.`yc.n.r` @type ^`long` @kind wide;
  #L4fa0de.  v5:= v8.`yc.n.r` @type ^`long` @kind wide;
  #L4fa0e2.  v8:= lcmp(v3, v5);
  #L4fa0e6.  if v8 != 0 then goto L4fa0ec;
  #L4fa0ea.  goto L4fa0ee;
  #L4fa0ec.  v0:= 0I;
  #L4fa0ee.  return v0;
  #L4fa0f0.  return v2;
}
procedure `boolean` `f`(`yc.n` v5 @kind this) @signature `Lyc/n;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fa13c.  call temp:= `d`(v5) @signature `Lyc/n;.d:()J` @kind virtual;
  #L4fa142.  v0:= temp @kind wide;
  #L4fa144.  v2:= -2147483648L;
  #L4fa14a.  v4:= lcmp(v0, v2);
  #L4fa14e.  if v4 < 0 then goto L4fa16c;
  #L4fa152.  call temp:= `c`(v5) @signature `Lyc/n;.c:()J` @kind virtual;
  #L4fa158.  v0:= temp @kind wide;
  #L4fa15a.  v2:= 2147483647L;
  #L4fa160.  v4:= lcmp(v0, v2);
  #L4fa164.  if v4 > 0 then goto L4fa16c;
  #L4fa168.  v0:= 1I;
  #L4fa16a.  goto L4fa16e;
  #L4fa16c.  v0:= 0I;
  #L4fa16e.  return v0;
}
procedure `boolean` `g`(`yc.n` v1 @kind this, `long` v2 ) @signature `Lyc/n;.g:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fa180.  call temp:= `f`(v1) @signature `Lyc/n;.f:()Z` @kind virtual;
  #L4fa186.  v0:= temp;
  #L4fa188.  if v0 == 0 then goto L4fa19c;
  #L4fa18c.  call temp:= `h`(v1, v2) @signature `Lyc/n;.h:(J)Z` @kind virtual;
  #L4fa192.  v2:= temp;
  #L4fa194.  if v2 == 0 then goto L4fa19c;
  #L4fa198.  v2:= 1I;
  #L4fa19a.  goto L4fa19e;
  #L4fa19c.  v2:= 0I;
  #L4fa19e.  return v2;
}
procedure `boolean` `h`(`yc.n` v3 @kind this, `long` v4 ) @signature `Lyc/n;.h:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fa1b0.  call temp:= `d`(v3) @signature `Lyc/n;.d:()J` @kind virtual;
  #L4fa1b6.  v0:= temp @kind wide;
  #L4fa1b8.  v2:= lcmp(v4, v0);
  #L4fa1bc.  if v2 < 0 then goto L4fa1d4;
  #L4fa1c0.  call temp:= `c`(v3) @signature `Lyc/n;.c:()J` @kind virtual;
  #L4fa1c6.  v0:= temp @kind wide;
  #L4fa1c8.  v2:= lcmp(v4, v0);
  #L4fa1cc.  if v2 > 0 then goto L4fa1d4;
  #L4fa1d0.  v4:= 1I;
  #L4fa1d2.  goto L4fa1d6;
  #L4fa1d4.  v4:= 0I;
  #L4fa1d6.  return v4;
}
procedure `int` `hashCode`(`yc.n` v8 @kind this) @signature `Lyc/n;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4fa248.  v0:= v8.`yc.n.o` @type ^`long` @kind wide;
  #L4fa24c.  v2:= v8.`yc.n.p` @type ^`long` @kind wide;
  #L4fa250.  v0:= v0 + v2 @kind long;
  #L4fa252.  v4:= 16L;
  #L4fa256.  v2:= v2 + v4 @kind long;
  #L4fa258.  v3:= (`int`) v2 @kind l2i;
  #L4fa25a.  v0:= v0 ^< v3 @kind long;
  #L4fa25c.  v2:= v8.`yc.n.q` @type ^`long` @kind wide;
  #L4fa260.  v4:= 48L;
  #L4fa264.  v6:= v2 + v4 @kind long;
  #L4fa268.  v7:= (`int`) v6 @kind l2i;
  #L4fa26a.  v0:= v0 ^> v7 @kind long;
  #L4fa26c.  v6:= 32L;
  #L4fa270.  v2:= v2 + v6 @kind long;
  #L4fa272.  v3:= (`int`) v2 @kind l2i;
  #L4fa274.  v0:= v0 ^< v3 @kind long;
  #L4fa276.  v2:= v8.`yc.n.r` @type ^`long` @kind wide;
  #L4fa27a.  v6:= v6 + v2 @kind long;
  #L4fa27c.  v7:= (`int`) v6 @kind l2i;
  #L4fa27e.  v0:= v0 ^> v7 @kind long;
  #L4fa280.  v2:= v2 + v4 @kind long;
  #L4fa282.  v3:= (`int`) v2 @kind l2i;
  #L4fa284.  v0:= v0 ^< v3 @kind long;
  #L4fa286.  v2:= 16I;
  #L4fa28a.  v0:= v0 ^> v2 @kind long;
  #L4fa28c.  v2:= 32I;
  #L4fa290.  v2:= v0 ^>> v2 @kind long;
  #L4fa294.  v0:= v0 ^~ v2 @kind long;
  #L4fa296.  v1:= (`int`) v0 @kind l2i;
  #L4fa298.  return v1;
}
procedure `java.lang.String` `toString`(`yc.n` v7 @kind this) @signature `Lyc/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4fa2ac.  v0:= new `java.lang.StringBuilder`;
  #L4fa2b0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4fa2b6.  v1:= v7.`yc.n.o` @type ^`long` @kind wide;
  #L4fa2ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa2c0.  v1:= v7.`yc.n.o` @type ^`long` @kind wide;
  #L4fa2c4.  v3:= v7.`yc.n.p` @type ^`long` @kind wide;
  #L4fa2c8.  v5:= 47I;
  #L4fa2cc.  v6:= lcmp(v1, v3);
  #L4fa2d0.  if v6 == 0 then goto L4fa2e4;
  #L4fa2d4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa2da.  v1:= v7.`yc.n.p` @type ^`long` @kind wide;
  #L4fa2de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa2e4.  v1:= " - " @kind object;
  #L4fa2e8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa2ee.  v1:= v7.`yc.n.q` @type ^`long` @kind wide;
  #L4fa2f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa2f8.  v1:= v7.`yc.n.q` @type ^`long` @kind wide;
  #L4fa2fc.  v3:= v7.`yc.n.r` @type ^`long` @kind wide;
  #L4fa300.  v6:= lcmp(v1, v3);
  #L4fa304.  if v6 == 0 then goto L4fa318;
  #L4fa308.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa30e.  v1:= v7.`yc.n.r` @type ^`long` @kind wide;
  #L4fa312.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fa318.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4fa31e.  v0:= temp @kind object;
  #L4fa320.  return v0 @kind object;
}
