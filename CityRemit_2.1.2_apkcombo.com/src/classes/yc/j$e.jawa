record `yc.j$e` @kind class @AccessFlag  extends `yc.k` @kind interface {
}
procedure `void` `<init>`(`yc.j$e` v0 @kind this) @signature `Lyc/j$e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f9e70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f9e76.  return @kind void;
}
procedure `java.lang.Object` `a`(`yc.j$e` v0 @kind this, `yc.e` v1 @kind object) @signature `Lyc/j$e;.a:(Lyc/e;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4f9e1c.  call temp:= `b`(v0, v1) @signature `Lyc/j$e;.b:(Lyc/e;)Luc/r;` @kind virtual;
  #L4f9e22.  v1:= temp @kind object;
  #L4f9e24.  return v1 @kind object;
}
procedure `uc.r` `b`(`yc.j$e` v2 @kind this, `yc.e` v3 @kind object) @signature `Lyc/j$e;.b:(Lyc/e;)Luc/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f9e38.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L4f9e3c.  call temp:= `d`(v3, v0) @signature `Lyc/e;.d:(Lyc/i;)Z` @kind interface;
  #L4f9e42.  v1:= temp;
  #L4f9e44.  if v1 == 0 then goto L4f9e5a;
  #L4f9e48.  call temp:= `F`(v3, v0) @signature `Lyc/e;.F:(Lyc/i;)I` @kind interface;
  #L4f9e4e.  v3:= temp;
  #L4f9e50.  call temp:= `X`(v3) @signature `Luc/r;.X:(I)Luc/r;` @kind static;
  #L4f9e56.  v3:= temp @kind object;
  #L4f9e58.  return v3 @kind object;
  #L4f9e5a.  v3:= 0I;
  #L4f9e5c.  return v3 @kind object;
}
