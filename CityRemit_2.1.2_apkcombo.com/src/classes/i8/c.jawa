record `i8.c` @kind class @AccessFlag FINAL extends `i8.b` @kind class {
  `java.lang.Object` `i8.c.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Field` `i8.c.c` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.Class` `@@i8.c.d` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`i8.c` v1 @kind this) @signature `Li8/c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L35dde0.  call `<init>`(v1) @signature `Li8/b;.<init>:()V` @kind direct;
  #L35dde6.  call temp:= `d`() @signature `Li8/c;.d:()Ljava/lang/Object;` @kind static;
  #L35ddec.  v0:= temp @kind object;
  #L35ddee.  v1.`i8.c.b` @type ^`java.lang.Object` := v0 @kind object;
  #L35ddf2.  call temp:= `c`() @signature `Li8/c;.c:()Ljava/lang/reflect/Field;` @kind static;
  #L35ddf8.  v0:= temp @kind object;
  #L35ddfa.  v1.`i8.c.c` @type ^`java.lang.reflect.Field` := v0 @kind object;
  #L35ddfe.  return @kind void;
}
procedure `java.lang.reflect.Field` `c`() @signature `Li8/c;.c:()Ljava/lang/reflect/Field;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L35dda8.  v0:= constclass @type ^`java.lang.reflect.AccessibleObject` @kind object;
  #L35ddac.  v1:= "override" @kind object;
  #L35ddb0.  call temp:= `getDeclaredField`(v0, v1) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L35ddb6.  v0:= temp @kind object;
  #L35ddb8.  return v0 @kind object;
  #L35ddba.  v0:= 0I;
  #L35ddbc.  return v0 @kind object;
  catch `java.lang.Exception` @[L35dda8..L35ddb8] goto L35ddba;
}
procedure `java.lang.Object` `d`() @signature `Li8/c;.d:()Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L35dd58.  v0:= 0I;
  #L35dd5a.  v1:= "sun.misc.Unsafe" @kind object;
  #L35dd5e.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L35dd64.  v1:= temp @kind object;
  #L35dd66.  `@@i8.c.d` @type ^`java.lang.Class` := v1 @kind object;
  #L35dd6a.  v2:= "theUnsafe" @kind object;
  #L35dd6e.  call temp:= `getDeclaredField`(v1, v2) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L35dd74.  v1:= temp @kind object;
  #L35dd76.  v2:= 1I;
  #L35dd78.  call `setAccessible`(v1, v2) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #L35dd7e.  call temp:= `get`(v1, v0) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L35dd84.  v0:= temp @kind object;
  #L35dd86.  return v0 @kind object;
  catch `java.lang.Exception` @[L35dd5a..L35dd86] goto L35dd86;
}
procedure `void` `b`(`i8.c` v4 @kind this, `java.lang.reflect.AccessibleObject` v5 @kind object) @signature `Li8/c;.b:(Ljava/lang/reflect/AccessibleObject;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35de10.  call temp:= `e`(v4, v5) @signature `Li8/c;.e:(Ljava/lang/reflect/AccessibleObject;)Z` @kind virtual;
  #L35de16.  v0:= temp;
  #L35de18.  if v0 != 0 then goto L35de60;
  #L35de1c.  v0:= 1I;
  #L35de1e.  call `setAccessible`(v5, v0) @signature `Ljava/lang/reflect/AccessibleObject;.setAccessible:(Z)V` @kind virtual;
  #L35de24.  goto L35de60;
  #L35de26.  v0:= Exception @type ^`java.lang.SecurityException` @kind object;
  #L35de28.  v1:= new `d8.l`;
  #L35de2c.  v2:= new `java.lang.StringBuilder`;
  #L35de30.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L35de36.  v3:= "Gson couldn't modify fields for " @kind object;
  #L35de3a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35de40.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35de46.  v5:= "\nand sun.misc.Unsafe not found.\nEither write a custom type adapter, or make fields accessible, or include sun.misc.Unsafe." @kind object;
  #L35de4a.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35de50.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35de56.  v5:= temp @kind object;
  #L35de58.  call `<init>`(v1, v5, v0) @signature `Ld8/l;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L35de5e.  throw v1;
  #L35de60.  return @kind void;
  catch `java.lang.SecurityException` @[L35de1e..L35de24] goto L35de26;
}
procedure `boolean` `e`(`i8.c` v10 @kind this, `java.lang.reflect.AccessibleObject` v11 @kind object) @signature `Li8/c;.e:(Ljava/lang/reflect/AccessibleObject;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L35dc88.  v0:= v10.`i8.c.b` @type ^`java.lang.Object` @kind object;
  #L35dc8c.  v1:= 0I;
  #L35dc8e.  if v0 == 0 then goto L35dd34;
  #L35dc92.  v0:= v10.`i8.c.c` @type ^`java.lang.reflect.Field` @kind object;
  #L35dc96.  if v0 == 0 then goto L35dd34;
  #L35dc9a.  v0:= `@@i8.c.d` @type ^`java.lang.Class` @kind object;
  #L35dc9e.  v2:= "objectFieldOffset" @kind object;
  #L35dca2.  v3:= 1I;
  #L35dca4.  v4:= new `java.lang.Class`[v3];
  #L35dca8.  v5:= constclass @type ^`java.lang.reflect.Field` @kind object;
  #L35dcac.  v4[v1]:= v5 @kind object;
  #L35dcb0.  call temp:= `getMethod`(v0, v2, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L35dcb6.  v0:= temp @kind object;
  #L35dcb8.  v2:= v10.`i8.c.b` @type ^`java.lang.Object` @kind object;
  #L35dcbc.  v4:= new `java.lang.Object`[v3];
  #L35dcc0.  v5:= v10.`i8.c.c` @type ^`java.lang.reflect.Field` @kind object;
  #L35dcc4.  v4[v1]:= v5 @kind object;
  #L35dcc8.  call temp:= `invoke`(v0, v2, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L35dcce.  v0:= temp @kind object;
  #L35dcd0.  v0:= (`java.lang.Long`) v0 @kind object;
  #L35dcd4.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L35dcda.  v4:= temp @kind wide;
  #L35dcdc.  v0:= `@@i8.c.d` @type ^`java.lang.Class` @kind object;
  #L35dce0.  v2:= "putBoolean" @kind object;
  #L35dce4.  v6:= 3I;
  #L35dce6.  v7:= new `java.lang.Class`[v6];
  #L35dcea.  v8:= constclass @type ^`java.lang.Object` @kind object;
  #L35dcee.  v7[v1]:= v8 @kind object;
  #L35dcf2.  v8:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L35dcf6.  v7[v3]:= v8 @kind object;
  #L35dcfa.  v8:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L35dcfe.  v9:= 2I;
  #L35dd00.  v7[v9]:= v8 @kind object;
  #L35dd04.  call temp:= `getMethod`(v0, v2, v7) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L35dd0a.  v0:= temp @kind object;
  #L35dd0c.  v2:= v10.`i8.c.b` @type ^`java.lang.Object` @kind object;
  #L35dd10.  v6:= new `java.lang.Object`[v6];
  #L35dd14.  v6[v1]:= v11 @kind object;
  #L35dd18.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L35dd1e.  v11:= temp @kind object;
  #L35dd20.  v6[v3]:= v11 @kind object;
  #L35dd24.  v11:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L35dd28.  v6[v9]:= v11 @kind object;
  #L35dd2c.  call temp:= `invoke`(v0, v2, v6) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L35dd32.  return v3;
  #L35dd34.  return v1;
  catch `java.lang.Exception` @[L35dc9a..L35dd32] goto L35dd34;
}
