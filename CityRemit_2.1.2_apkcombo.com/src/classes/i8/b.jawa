record `i8.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `i8.b` `@@i8.b.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Li8/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L35dc34.  call temp:= `c`() @signature `Lf8/e;.c:()I` @kind static;
  #L35dc3a.  v0:= temp;
  #L35dc3c.  v1:= 9I;
  #L35dc40.  if v0 >= v1 then goto L35dc50;
  #L35dc44.  v0:= new `i8.a`;
  #L35dc48.  call `<init>`(v0) @signature `Li8/a;.<init>:()V` @kind direct;
  #L35dc4e.  goto L35dc5a;
  #L35dc50.  v0:= new `i8.c`;
  #L35dc54.  call `<init>`(v0) @signature `Li8/c;.<init>:()V` @kind direct;
  #L35dc5a.  `@@i8.b.a` @type ^`i8.b` := v0 @kind object;
  #L35dc5e.  return @kind void;
}
procedure `void` `<init>`(`i8.b` v0 @kind this) @signature `Li8/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L35dc70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35dc76.  return @kind void;
}
procedure `i8.b` `a`() @signature `Li8/b;.a:()Li8/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L35dc1c.  v0:= `@@i8.b.a` @type ^`i8.b` @kind object;
  #L35dc20.  return v0 @kind object;
}
procedure `void` `b`(`java.lang.reflect.AccessibleObject` v0 @kind object) @signature `Li8/b;.b:(Ljava/lang/reflect/AccessibleObject;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
