record `a3.b` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.Map` `a3.b.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `a3.b.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `a3.b.c` @AccessFlag PRIVATE_FINAL;
  `java.util.Random` `a3.b.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a3.b` v1 @kind this) @signature `La3/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15c7c4.  v0:= new `java.util.Random`;
  #L15c7c8.  call `<init>`(v0) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L15c7ce.  call `<init>`(v1, v0) @signature `La3/b;.<init>:(Ljava/util/Random;)V` @kind direct;
  #L15c7d4.  return @kind void;
}
procedure `void` `<init>`(`a3.b` v1 @kind this, `java.util.Random` v2 @kind object) @signature `La3/b;.<init>:(Ljava/util/Random;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L15c7e8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15c7ee.  v0:= new `java.util.HashMap`;
  #L15c7f2.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L15c7f8.  v1.`a3.b.c` @type ^`java.util.Map` := v0 @kind object;
  #L15c7fc.  v1.`a3.b.d` @type ^`java.util.Random` := v2 @kind object;
  #L15c800.  v2:= new `java.util.HashMap`;
  #L15c804.  call `<init>`(v2) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L15c80a.  v1.`a3.b.a` @type ^`java.util.Map` := v2 @kind object;
  #L15c80e.  v2:= new `java.util.HashMap`;
  #L15c812.  call `<init>`(v2) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L15c818.  v1.`a3.b.b` @type ^`java.util.Map` := v2 @kind object;
  #L15c81c.  return @kind void;
}
procedure `int` `a`(`b3.b` v0 @kind object, `b3.b` v1 @kind object) @signature `La3/b;.a:(Lb3/b;Lb3/b;)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L15c628.  call temp:= `d`(v0, v1) @signature `La3/b;.d:(Lb3/b;Lb3/b;)I` @kind static;
  #L15c62e.  v0:= temp;
  #L15c630.  return v0;
}
procedure `void` `b`(`java.lang.Object` v2 @kind object, `long` v3 , `java.util.Map` v5 @kind object) @signature `La3/b;.b:(Ljava/lang/Object;JLjava/util/Map;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L15c830.  call temp:= `containsKey`(v5, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L15c836.  v0:= temp;
  #L15c838.  if v0 == 0 then goto L15c864;
  #L15c83c.  call temp:= `get`(v5, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15c842.  v0:= temp @kind object;
  #L15c844.  v0:= (`java.lang.Long`) v0 @kind object;
  #L15c848.  call temp:= `j`(v0) @signature `Ls3/l0;.j:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L15c84e.  v0:= temp @kind object;
  #L15c850.  v0:= (`java.lang.Long`) v0 @kind object;
  #L15c854.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L15c85a.  v0:= temp @kind wide;
  #L15c85c.  call temp:= `max`(v3, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L15c862.  v3:= temp @kind wide;
  #L15c864.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L15c86a.  v3:= temp @kind object;
  #L15c86c.  call temp:= `put`(v5, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15c872.  return @kind void;
}
procedure `java.util.List` `c`(`a3.b` v5 @kind this, `java.util.List` v6 @kind object) @signature `La3/b;.c:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15c734.  call temp:= `elapsedRealtime`() @signature `Landroid/os/SystemClock;.elapsedRealtime:()J` @kind static;
  #L15c73a.  v0:= temp @kind wide;
  #L15c73c.  v2:= v5.`a3.b.a` @type ^`java.util.Map` @kind object;
  #L15c740.  call `h`(v0, v2) @signature `La3/b;.h:(JLjava/util/Map;)V` @kind static;
  #L15c746.  v2:= v5.`a3.b.b` @type ^`java.util.Map` @kind object;
  #L15c74a.  call `h`(v0, v2) @signature `La3/b;.h:(JLjava/util/Map;)V` @kind static;
  #L15c750.  v0:= new `java.util.ArrayList`;
  #L15c754.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L15c75a.  v1:= 0I;
  #L15c75c.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15c762.  v2:= temp;
  #L15c764.  if v1 >= v2 then goto L15c7b0;
  #L15c768.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L15c76e.  v2:= temp @kind object;
  #L15c770.  v2:= (`b3.b`) v2 @kind object;
  #L15c774.  v3:= v5.`a3.b.a` @type ^`java.util.Map` @kind object;
  #L15c778.  v4:= v2.`b3.b.b` @type ^`java.lang.String` @kind object;
  #L15c77c.  call temp:= `containsKey`(v3, v4) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L15c782.  v3:= temp;
  #L15c784.  if v3 != 0 then goto L15c7aa;
  #L15c788.  v3:= v5.`a3.b.b` @type ^`java.util.Map` @kind object;
  #L15c78c.  v4:= v2.`b3.b.c` @type ^`int`;
  #L15c790.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15c796.  v4:= temp @kind object;
  #L15c798.  call temp:= `containsKey`(v3, v4) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L15c79e.  v3:= temp;
  #L15c7a0.  if v3 != 0 then goto L15c7aa;
  #L15c7a4.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15c7aa.  v1:= v1 + 1;
  #L15c7ae.  goto L15c75c;
  #L15c7b0.  return v0 @kind object;
}
procedure `int` `d`(`b3.b` v2 @kind object, `b3.b` v3 @kind object) @signature `La3/b;.d:(Lb3/b;Lb3/b;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L15c644.  v0:= v2.`b3.b.c` @type ^`int`;
  #L15c648.  v1:= v3.`b3.b.c` @type ^`int`;
  #L15c64c.  call temp:= `compare`(v0, v1) @signature `Ljava/lang/Integer;.compare:(II)I` @kind static;
  #L15c652.  v0:= temp;
  #L15c654.  if v0 == 0 then goto L15c65a;
  #L15c658.  goto L15c66a;
  #L15c65a.  v2:= v2.`b3.b.b` @type ^`java.lang.String` @kind object;
  #L15c65e.  v3:= v3.`b3.b.b` @type ^`java.lang.String` @kind object;
  #L15c662.  call temp:= `compareTo`(v2, v3) @signature `Ljava/lang/String;.compareTo:(Ljava/lang/String;)I` @kind virtual;
  #L15c668.  v0:= temp;
  #L15c66a.  return v0;
}
procedure `int` `f`(`java.util.List` v3 @kind object) @signature `La3/b;.f:(Ljava/util/List;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L15c67c.  v0:= new `java.util.HashSet`;
  #L15c680.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L15c686.  v1:= 0I;
  #L15c688.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15c68e.  v2:= temp;
  #L15c690.  if v1 >= v2 then goto L15c6b8;
  #L15c694.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L15c69a.  v2:= temp @kind object;
  #L15c69c.  v2:= (`b3.b`) v2 @kind object;
  #L15c6a0.  v2:= v2.`b3.b.c` @type ^`int`;
  #L15c6a4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15c6aa.  v2:= temp @kind object;
  #L15c6ac.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15c6b2.  v1:= v1 + 1;
  #L15c6b6.  goto L15c688;
  #L15c6b8.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L15c6be.  v3:= temp;
  #L15c6c0.  return v3;
}
procedure `void` `h`(`long` v6 , `java.util.Map` v8 @kind object) @signature `La3/b;.h:(JLjava/util/Map;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15c8cc.  v0:= new `java.util.ArrayList`;
  #L15c8d0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L15c8d6.  call temp:= `entrySet`(v8) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L15c8dc.  v1:= temp @kind object;
  #L15c8de.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15c8e4.  v1:= temp @kind object;
  #L15c8e6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15c8ec.  v2:= temp;
  #L15c8ee.  if v2 == 0 then goto L15c92a;
  #L15c8f2.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15c8f8.  v2:= temp @kind object;
  #L15c8fa.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L15c8fe.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L15c904.  v3:= temp @kind object;
  #L15c906.  v3:= (`java.lang.Long`) v3 @kind object;
  #L15c90a.  call temp:= `longValue`(v3) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L15c910.  v3:= temp @kind wide;
  #L15c912.  v5:= lcmp(v3, v6);
  #L15c916.  if v5 > 0 then goto L15c8e6;
  #L15c91a.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L15c920.  v2:= temp @kind object;
  #L15c922.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15c928.  goto L15c8e6;
  #L15c92a.  v6:= 0I;
  #L15c92c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15c932.  v7:= temp;
  #L15c934.  if v6 >= v7 then goto L15c94c;
  #L15c938.  call temp:= `get`(v0, v6) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L15c93e.  v7:= temp @kind object;
  #L15c940.  call temp:= `remove`(v8, v7) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15c946.  v6:= v6 + 1;
  #L15c94a.  goto L15c92c;
  #L15c94c.  return @kind void;
}
procedure `b3.b` `k`(`a3.b` v5 @kind this, `java.util.List` v6 @kind object) @signature `La3/b;.k:(Ljava/util/List;)Lb3/b;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15c5a8.  v0:= 0I;
  #L15c5aa.  v1:= 0I;
  #L15c5ac.  v2:= 0I;
  #L15c5ae.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15c5b4.  v3:= temp;
  #L15c5b6.  if v1 >= v3 then goto L15c5d2;
  #L15c5ba.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L15c5c0.  v3:= temp @kind object;
  #L15c5c2.  v3:= (`b3.b`) v3 @kind object;
  #L15c5c6.  v3:= v3.`b3.b.d` @type ^`int`;
  #L15c5ca.  v2:= v2 + v3 @kind int;
  #L15c5cc.  v1:= v1 + 1;
  #L15c5d0.  goto L15c5ae;
  #L15c5d2.  v1:= v5.`a3.b.d` @type ^`java.util.Random` @kind object;
  #L15c5d6.  call temp:= `nextInt`(v1, v2) @signature `Ljava/util/Random;.nextInt:(I)I` @kind virtual;
  #L15c5dc.  v1:= temp;
  #L15c5de.  v2:= 0I;
  #L15c5e0.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15c5e6.  v3:= temp;
  #L15c5e8.  if v0 >= v3 then goto L15c60a;
  #L15c5ec.  call temp:= `get`(v6, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L15c5f2.  v3:= temp @kind object;
  #L15c5f4.  v3:= (`b3.b`) v3 @kind object;
  #L15c5f8.  v4:= v3.`b3.b.d` @type ^`int`;
  #L15c5fc.  v2:= v2 + v4 @kind int;
  #L15c5fe.  if v1 >= v2 then goto L15c604;
  #L15c602.  return v3 @kind object;
  #L15c604.  v0:= v0 + 1;
  #L15c608.  goto L15c5e0;
  #L15c60a.  call temp:= `c`(v6) @signature `Lm5/t;.c:(Ljava/lang/Iterable;)Ljava/lang/Object;` @kind static;
  #L15c610.  v6:= temp @kind object;
  #L15c612.  v6:= (`b3.b`) v6 @kind object;
  #L15c616.  return v6 @kind object;
}
procedure `void` `e`(`a3.b` v2 @kind this, `b3.b` v3 @kind object, `long` v4 ) @signature `La3/b;.e:(Lb3/b;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15c884.  call temp:= `elapsedRealtime`() @signature `Landroid/os/SystemClock;.elapsedRealtime:()J` @kind static;
  #L15c88a.  v0:= temp @kind wide;
  #L15c88c.  v0:= v0 + v4 @kind long;
  #L15c88e.  v4:= v3.`b3.b.b` @type ^`java.lang.String` @kind object;
  #L15c892.  v5:= v2.`a3.b.a` @type ^`java.util.Map` @kind object;
  #L15c896.  call `b`(v4, v0, v5) @signature `La3/b;.b:(Ljava/lang/Object;JLjava/util/Map;)V` @kind static;
  #L15c89c.  v3:= v3.`b3.b.c` @type ^`int`;
  #L15c8a0.  v4:= -2147483648I;
  #L15c8a4.  if v3 == v4 then goto L15c8ba;
  #L15c8a8.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15c8ae.  v3:= temp @kind object;
  #L15c8b0.  v4:= v2.`a3.b.b` @type ^`java.util.Map` @kind object;
  #L15c8b4.  call `b`(v3, v0, v4) @signature `La3/b;.b:(Ljava/lang/Object;JLjava/util/Map;)V` @kind static;
  #L15c8ba.  return @kind void;
}
procedure `int` `g`(`a3.b` v3 @kind this, `java.util.List` v4 @kind object) @signature `La3/b;.g:(Ljava/util/List;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15c6d4.  v0:= new `java.util.HashSet`;
  #L15c6d8.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L15c6de.  call temp:= `c`(v3, v4) @signature `La3/b;.c:(Ljava/util/List;)Ljava/util/List;` @kind direct;
  #L15c6e4.  v4:= temp @kind object;
  #L15c6e6.  v1:= 0I;
  #L15c6e8.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15c6ee.  v2:= temp;
  #L15c6f0.  if v1 >= v2 then goto L15c718;
  #L15c6f4.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L15c6fa.  v2:= temp @kind object;
  #L15c6fc.  v2:= (`b3.b`) v2 @kind object;
  #L15c700.  v2:= v2.`b3.b.c` @type ^`int`;
  #L15c704.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15c70a.  v2:= temp @kind object;
  #L15c70c.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15c712.  v1:= v1 + 1;
  #L15c716.  goto L15c6e8;
  #L15c718.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L15c71e.  v4:= temp;
  #L15c720.  return v4;
}
procedure `void` `i`(`a3.b` v1 @kind this) @signature `La3/b;.i:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c960.  v0:= v1.`a3.b.a` @type ^`java.util.Map` @kind object;
  #L15c964.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L15c96a.  v0:= v1.`a3.b.b` @type ^`java.util.Map` @kind object;
  #L15c96e.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L15c974.  v0:= v1.`a3.b.c` @type ^`java.util.Map` @kind object;
  #L15c978.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L15c97e.  return @kind void;
}
procedure `b3.b` `j`(`a3.b` v7 @kind this, `java.util.List` v8 @kind object) @signature `La3/b;.j:(Ljava/util/List;)Lb3/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L15c4b4.  call temp:= `c`(v7, v8) @signature `La3/b;.c:(Ljava/util/List;)Ljava/util/List;` @kind direct;
  #L15c4ba.  v8:= temp @kind object;
  #L15c4bc.  call temp:= `size`(v8) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15c4c2.  v0:= temp;
  #L15c4c4.  v1:= 2I;
  #L15c4c6.  if v0 >= v1 then goto L15c4da;
  #L15c4ca.  v0:= 0I;
  #L15c4cc.  call temp:= `b`(v8, v0) @signature `Lm5/t;.b:(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L15c4d2.  v8:= temp @kind object;
  #L15c4d4.  v8:= (`b3.b`) v8 @kind object;
  #L15c4d8.  return v8 @kind object;
  #L15c4da.  v0:= `@@a3.a.o` @type ^`a3.a` @kind object;
  #L15c4de.  call `sort`(v8, v0) @signature `Ljava/util/Collections;.sort:(Ljava/util/List;Ljava/util/Comparator;)V` @kind static;
  #L15c4e4.  v0:= new `java.util.ArrayList`;
  #L15c4e8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L15c4ee.  v1:= 0I;
  #L15c4f0.  call temp:= `get`(v8, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L15c4f6.  v2:= temp @kind object;
  #L15c4f8.  v2:= (`b3.b`) v2 @kind object;
  #L15c4fc.  v2:= v2.`b3.b.c` @type ^`int`;
  #L15c500.  v3:= 0I;
  #L15c502.  call temp:= `size`(v8) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15c508.  v4:= temp;
  #L15c50a.  if v3 >= v4 then goto L15c560;
  #L15c50e.  call temp:= `get`(v8, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L15c514.  v4:= temp @kind object;
  #L15c516.  v4:= (`b3.b`) v4 @kind object;
  #L15c51a.  v5:= v4.`b3.b.c` @type ^`int`;
  #L15c51e.  if v2 == v5 then goto L15c53a;
  #L15c522.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15c528.  v2:= temp;
  #L15c52a.  v3:= 1I;
  #L15c52c.  if v2 != v3 then goto L15c560;
  #L15c530.  call temp:= `get`(v8, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L15c536.  v8:= temp @kind object;
  #L15c538.  goto L15c4d4;
  #L15c53a.  v5:= new `android.util.Pair`;
  #L15c53e.  v6:= v4.`b3.b.b` @type ^`java.lang.String` @kind object;
  #L15c542.  v4:= v4.`b3.b.d` @type ^`int`;
  #L15c546.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15c54c.  v4:= temp @kind object;
  #L15c54e.  call `<init>`(v5, v6, v4) @signature `Landroid/util/Pair;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L15c554.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15c55a.  v3:= v3 + 1;
  #L15c55e.  goto L15c502;
  #L15c560.  v2:= v7.`a3.b.c` @type ^`java.util.Map` @kind object;
  #L15c564.  call temp:= `get`(v2, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15c56a.  v2:= temp @kind object;
  #L15c56c.  v2:= (`b3.b`) v2 @kind object;
  #L15c570.  if v2 != 0 then goto L15c596;
  #L15c574.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15c57a.  v2:= temp;
  #L15c57c.  call temp:= `subList`(v8, v1, v2) @signature `Ljava/util/List;.subList:(II)Ljava/util/List;` @kind interface;
  #L15c582.  v8:= temp @kind object;
  #L15c584.  call temp:= `k`(v7, v8) @signature `La3/b;.k:(Ljava/util/List;)Lb3/b;` @kind direct;
  #L15c58a.  v2:= temp @kind object;
  #L15c58c.  v8:= v7.`a3.b.c` @type ^`java.util.Map` @kind object;
  #L15c590.  call temp:= `put`(v8, v0, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15c596.  return v2 @kind object;
}
