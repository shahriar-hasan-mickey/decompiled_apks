record `lc.a$d` @kind class @AccessFlag  extends `lc.a$b` @kind class {
  `gc.r` `lc.a$d.s` @AccessFlag PRIVATE_FINAL;
  `long` `lc.a$d.t` @AccessFlag PRIVATE;
  `boolean` `lc.a$d.u` @AccessFlag PRIVATE;
  `lc.a` `lc.a$d.v` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`lc.a$d` v2 @kind this, `lc.a` v3 @kind object, `gc.r` v4 @kind object) @signature `Llc/a$d;.<init>:(Llc/a;Lgc/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3d0f30.  v2.`lc.a$d.v` @type ^`lc.a` := v3 @kind object;
  #L3d0f34.  v0:= 0I;
  #L3d0f36.  call `<init>`(v2, v3, v0) @signature `Llc/a$b;.<init>:(Llc/a;Llc/a$a;)V` @kind direct;
  #L3d0f3c.  v0:= -1L;
  #L3d0f40.  v2.`lc.a$d.t` @type ^`long` := v0 @kind wide;
  #L3d0f44.  v3:= 1I;
  #L3d0f46.  v2.`lc.a$d.u` @type ^`boolean` := v3 @kind boolean;
  #L3d0f4a.  v2.`lc.a$d.s` @type ^`gc.r` := v4 @kind object;
  #L3d0f4e.  return @kind void;
}
procedure `void` `c`(`lc.a$d` v6 @kind this) @signature `Llc/a$d;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d0fa8.  v0:= v6.`lc.a$d.t` @type ^`long` @kind wide;
  #L3d0fac.  v2:= -1L;
  #L3d0fb0.  v4:= lcmp(v0, v2);
  #L3d0fb4.  if v4 == 0 then goto L3d0fc6;
  #L3d0fb8.  v0:= v6.`lc.a$d.v` @type ^`lc.a` @kind object;
  #L3d0fbc.  v0:= v0.`lc.a.c` @type ^`qc.e` @kind object;
  #L3d0fc0.  call temp:= `u`(v0) @signature `Lqc/e;.u:()Ljava/lang/String;` @kind interface;
  #L3d0fc6.  v0:= v6.`lc.a$d.v` @type ^`lc.a` @kind object;
  #L3d0fca.  v0:= v0.`lc.a.c` @type ^`qc.e` @kind object;
  #L3d0fce.  call temp:= `Y`(v0) @signature `Lqc/e;.Y:()J` @kind interface;
  #L3d0fd4.  v0:= temp @kind wide;
  #L3d0fd6.  v6.`lc.a$d.t` @type ^`long` := v0 @kind wide;
  #L3d0fda.  v0:= v6.`lc.a$d.v` @type ^`lc.a` @kind object;
  #L3d0fde.  v0:= v0.`lc.a.c` @type ^`qc.e` @kind object;
  #L3d0fe2.  call temp:= `u`(v0) @signature `Lqc/e;.u:()Ljava/lang/String;` @kind interface;
  #L3d0fe8.  v0:= temp @kind object;
  #L3d0fea.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L3d0ff0.  v0:= temp @kind object;
  #L3d0ff2.  v1:= v6.`lc.a$d.t` @type ^`long` @kind wide;
  #L3d0ff6.  v3:= 0L;
  #L3d0ffa.  v5:= lcmp(v1, v3);
  #L3d0ffe.  if v5 < 0 then goto L3d1062;
  #L3d1002.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L3d1008.  v1:= temp;
  #L3d100a.  if v1 != 0 then goto L3d101e;
  #L3d100e.  v1:= ";" @kind object;
  #L3d1012.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3d1018.  v1:= temp;
  #L3d101a.  if v1 == 0 then goto L3d1062;
  #L3d101e.  v0:= v6.`lc.a$d.t` @type ^`long` @kind wide;
  #L3d1022.  v2:= lcmp(v0, v3);
  #L3d1026.  if v2 != 0 then goto L3d1060;
  #L3d102a.  v0:= 0I;
  #L3d102c.  v6.`lc.a$d.u` @type ^`boolean` := v0 @kind boolean;
  #L3d1030.  v0:= v6.`lc.a$d.v` @type ^`lc.a` @kind object;
  #L3d1034.  v0:= v0.`lc.a.a` @type ^`gc.u` @kind object;
  #L3d1038.  call temp:= `l`(v0) @signature `Lgc/u;.l:()Lgc/l;` @kind virtual;
  #L3d103e.  v0:= temp @kind object;
  #L3d1040.  v1:= v6.`lc.a$d.s` @type ^`gc.r` @kind object;
  #L3d1044.  v2:= v6.`lc.a$d.v` @type ^`lc.a` @kind object;
  #L3d1048.  call temp:= `n`(v2) @signature `Llc/a;.n:()Lgc/q;` @kind virtual;
  #L3d104e.  v2:= temp @kind object;
  #L3d1050.  call `e`(v0, v1, v2) @signature `Lkc/e;.e:(Lgc/l;Lgc/r;Lgc/q;)V` @kind static;
  #L3d1056.  v0:= 1I;
  #L3d1058.  v1:= 0I;
  #L3d105a.  call `a`(v6, v0, v1) @signature `Llc/a$b;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L3d1060.  return @kind void;
  #L3d1062.  v1:= new `java.net.ProtocolException`;
  #L3d1066.  v2:= new `java.lang.StringBuilder`;
  #L3d106a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d1070.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L3d1074.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d107a.  v3:= v6.`lc.a$d.t` @type ^`long` @kind wide;
  #L3d107e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d1084.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d108a.  v0:= "\"" @kind object;
  #L3d108e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d1094.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d109a.  v0:= temp @kind object;
  #L3d109c.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d10a2.  throw v1;
  #L3d10a4.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L3d10a6.  v1:= new `java.net.ProtocolException`;
  #L3d10aa.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L3d10b0.  v0:= temp @kind object;
  #L3d10b2.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d10b8.  throw v1;
  catch `java.lang.NumberFormatException` @[L3d0fc6..L3d101a] goto L3d10a4;
  catch `java.lang.NumberFormatException` @[L3d1062..L3d10a4] goto L3d10a4;
}
procedure `long` `T`(`lc.a$d` v7 @kind this, `qc.c` v8 @kind object, `long` v9 ) @signature `Llc/a$d;.T:(Lqc/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d0e5c.  v0:= 0L;
  #L3d0e60.  v2:= lcmp(v9, v0);
  #L3d0e64.  if v2 < 0 then goto L3d0ef2;
  #L3d0e68.  v2:= v7.`lc.a$b.p` @type ^`boolean` @kind boolean;
  #L3d0e6c.  if v2 != 0 then goto L3d0ee2;
  #L3d0e70.  v2:= v7.`lc.a$d.u` @type ^`boolean` @kind boolean;
  #L3d0e74.  v3:= -1L;
  #L3d0e78.  if v2 != 0 then goto L3d0e7e;
  #L3d0e7c.  return v3 @kind wide;
  #L3d0e7e.  v5:= v7.`lc.a$d.t` @type ^`long` @kind wide;
  #L3d0e82.  v2:= lcmp(v5, v0);
  #L3d0e86.  if v2 == 0 then goto L3d0e92;
  #L3d0e8a.  v0:= lcmp(v5, v3);
  #L3d0e8e.  if v0 != 0 then goto L3d0ea2;
  #L3d0e92.  call `c`(v7) @signature `Llc/a$d;.c:()V` @kind direct;
  #L3d0e98.  v0:= v7.`lc.a$d.u` @type ^`boolean` @kind boolean;
  #L3d0e9c.  if v0 != 0 then goto L3d0ea2;
  #L3d0ea0.  return v3 @kind wide;
  #L3d0ea2.  v0:= v7.`lc.a$d.t` @type ^`long` @kind wide;
  #L3d0ea6.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d0eac.  v9:= temp @kind wide;
  #L3d0eae.  call temp:= `T`(v7, v8, v9) @signature `Llc/a$b;.T:(Lqc/c;J)J` @kind super;
  #L3d0eb4.  v8:= temp @kind wide;
  #L3d0eb6.  v10:= lcmp(v8, v3);
  #L3d0eba.  if v10 == 0 then goto L3d0eca;
  #L3d0ebe.  v0:= v7.`lc.a$d.t` @type ^`long` @kind wide;
  #L3d0ec2.  v0:= v0 - v8 @kind long;
  #L3d0ec4.  v7.`lc.a$d.t` @type ^`long` := v0 @kind wide;
  #L3d0ec8.  return v8 @kind wide;
  #L3d0eca.  v8:= new `java.net.ProtocolException`;
  #L3d0ece.  v9:= "unexpected end of stream" @kind object;
  #L3d0ed2.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d0ed8.  v9:= 0I;
  #L3d0eda.  call `a`(v7, v9, v8) @signature `Llc/a$b;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L3d0ee0.  throw v8;
  #L3d0ee2.  v8:= new `java.lang.IllegalStateException`;
  #L3d0ee6.  v9:= "closed" @kind object;
  #L3d0eea.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d0ef0.  throw v8;
  #L3d0ef2.  v8:= new `java.lang.IllegalArgumentException`;
  #L3d0ef6.  v0:= new `java.lang.StringBuilder`;
  #L3d0efa.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d0f00.  v1:= "byteCount < 0: " @kind object;
  #L3d0f04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d0f0a.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d0f10.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d0f16.  v9:= temp @kind object;
  #L3d0f18.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d0f1e.  throw v8;
}
procedure `void` `close`(`lc.a$d` v2 @kind this) @signature `Llc/a$d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d0f60.  v0:= v2.`lc.a$b.p` @type ^`boolean` @kind boolean;
  #L3d0f64.  if v0 == 0 then goto L3d0f6a;
  #L3d0f68.  return @kind void;
  #L3d0f6a.  v0:= v2.`lc.a$d.u` @type ^`boolean` @kind boolean;
  #L3d0f6e.  if v0 == 0 then goto L3d0f90;
  #L3d0f72.  v0:= 100I;
  #L3d0f76.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3d0f7a.  call temp:= `n`(v2, v0, v1) @signature `Lhc/c;.n:(Lqc/s;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L3d0f80.  v0:= temp;
  #L3d0f82.  if v0 != 0 then goto L3d0f90;
  #L3d0f86.  v0:= 0I;
  #L3d0f88.  v1:= 0I;
  #L3d0f8a.  call `a`(v2, v0, v1) @signature `Llc/a$b;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L3d0f90.  v0:= 1I;
  #L3d0f92.  v2.`lc.a$b.p` @type ^`boolean` := v0 @kind boolean;
  #L3d0f96.  return @kind void;
}
