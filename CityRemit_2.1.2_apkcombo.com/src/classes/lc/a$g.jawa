record `lc.a$g` @kind class @AccessFlag  extends `lc.a$b` @kind class {
  `boolean` `lc.a$g.s` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`lc.a$g` v1 @kind this, `lc.a` v2 @kind object) @signature `Llc/a$g;.<init>:(Llc/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3d1440.  v0:= 0I;
  #L3d1442.  call `<init>`(v1, v2, v0) @signature `Llc/a$b;.<init>:(Llc/a;Llc/a$a;)V` @kind direct;
  #L3d1448.  return @kind void;
}
procedure `long` `T`(`lc.a$g` v3 @kind this, `qc.c` v4 @kind object, `long` v5 ) @signature `Llc/a$g;.T:(Lqc/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d13ac.  v0:= 0L;
  #L3d13b0.  v2:= lcmp(v5, v0);
  #L3d13b4.  if v2 < 0 then goto L3d1400;
  #L3d13b8.  v0:= v3.`lc.a$b.p` @type ^`boolean` @kind boolean;
  #L3d13bc.  if v0 != 0 then goto L3d13f0;
  #L3d13c0.  v0:= v3.`lc.a$g.s` @type ^`boolean` @kind boolean;
  #L3d13c4.  v1:= -1L;
  #L3d13c8.  if v0 == 0 then goto L3d13ce;
  #L3d13cc.  return v1 @kind wide;
  #L3d13ce.  call temp:= `T`(v3, v4, v5) @signature `Llc/a$b;.T:(Lqc/c;J)J` @kind super;
  #L3d13d4.  v4:= temp @kind wide;
  #L3d13d6.  v6:= lcmp(v4, v1);
  #L3d13da.  if v6 != 0 then goto L3d13ee;
  #L3d13de.  v4:= 1I;
  #L3d13e0.  v3.`lc.a$g.s` @type ^`boolean` := v4 @kind boolean;
  #L3d13e4.  v5:= 0I;
  #L3d13e6.  call `a`(v3, v4, v5) @signature `Llc/a$b;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L3d13ec.  return v1 @kind wide;
  #L3d13ee.  return v4 @kind wide;
  #L3d13f0.  v4:= new `java.lang.IllegalStateException`;
  #L3d13f4.  v5:= "closed" @kind object;
  #L3d13f8.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d13fe.  throw v4;
  #L3d1400.  v4:= new `java.lang.IllegalArgumentException`;
  #L3d1404.  v0:= new `java.lang.StringBuilder`;
  #L3d1408.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d140e.  v1:= "byteCount < 0: " @kind object;
  #L3d1412.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d1418.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d141e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d1424.  v5:= temp @kind object;
  #L3d1426.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d142c.  throw v4;
}
procedure `void` `close`(`lc.a$g` v2 @kind this) @signature `Llc/a$g;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d145c.  v0:= v2.`lc.a$b.p` @type ^`boolean` @kind boolean;
  #L3d1460.  if v0 == 0 then goto L3d1466;
  #L3d1464.  return @kind void;
  #L3d1466.  v0:= v2.`lc.a$g.s` @type ^`boolean` @kind boolean;
  #L3d146a.  if v0 != 0 then goto L3d1478;
  #L3d146e.  v0:= 0I;
  #L3d1470.  v1:= 0I;
  #L3d1472.  call `a`(v2, v0, v1) @signature `Llc/a$b;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L3d1478.  v0:= 1I;
  #L3d147a.  v2.`lc.a$b.p` @type ^`boolean` := v0 @kind boolean;
  #L3d147e.  return @kind void;
}
