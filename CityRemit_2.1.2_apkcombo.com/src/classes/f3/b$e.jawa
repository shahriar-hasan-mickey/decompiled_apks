record `f3.b$e` @kind class @AccessFlag  extends `f3.b$a` @kind class {
  `java.util.List` `f3.b$e.e` @AccessFlag PRIVATE_FINAL;
  `int` `f3.b$e.f` @AccessFlag PRIVATE;
  `int` `f3.b$e.g` @AccessFlag PRIVATE;
  `long` `f3.b$e.h` @AccessFlag PRIVATE;
  `long` `f3.b$e.i` @AccessFlag PRIVATE;
  `long` `f3.b$e.j` @AccessFlag PRIVATE;
  `int` `f3.b$e.k` @AccessFlag PRIVATE;
  `boolean` `f3.b$e.l` @AccessFlag PRIVATE;
  `f3.a$a` `f3.b$e.m` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`f3.b$e` v1 @kind this, `f3.b$a` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lf3/b$e;.<init>:(Lf3/b$a;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L305dc8.  v0:= "SmoothStreamingMedia" @kind object;
  #L305dcc.  call `<init>`(v1, v2, v3, v0) @signature `Lf3/b$a;.<init>:(Lf3/b$a;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L305dd2.  v2:= -1I;
  #L305dd4.  v1.`f3.b$e.k` @type ^`int` := v2;
  #L305dd8.  v2:= 0I;
  #L305dda.  v1.`f3.b$e.m` @type ^`f3.a$a` := v2 @kind object;
  #L305dde.  v2:= new `java.util.LinkedList`;
  #L305de2.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L305de8.  v1.`f3.b$e.e` @type ^`java.util.List` := v2 @kind object;
  #L305dec.  return @kind void;
}
procedure `void` `a`(`f3.b$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf3/b$e;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305e00.  v0:= instanceof @variable v2 @type ^`f3.a$b` @kind boolean;
  #L305e04.  if v0 == 0 then goto L305e18;
  #L305e08.  v0:= v1.`f3.b$e.e` @type ^`java.util.List` @kind object;
  #L305e0c.  v2:= (`f3.a$b`) v2 @kind object;
  #L305e10.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L305e16.  goto L305e3c;
  #L305e18.  v0:= instanceof @variable v2 @type ^`f3.a$a` @kind boolean;
  #L305e1c.  if v0 == 0 then goto L305e3c;
  #L305e20.  v0:= v1.`f3.b$e.m` @type ^`f3.a$a` @kind object;
  #L305e24.  if v0 != 0 then goto L305e2c;
  #L305e28.  v0:= 1I;
  #L305e2a.  goto L305e2e;
  #L305e2c.  v0:= 0I;
  #L305e2e.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L305e34.  v2:= (`f3.a$a`) v2 @kind object;
  #L305e38.  v1.`f3.b$e.m` @type ^`f3.a$a` := v2 @kind object;
  #L305e3c.  return @kind void;
}
procedure `java.lang.Object` `b`(`f3.b$e` v14 @kind this) @signature `Lf3/b$e;.b:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L305ce8.  v0:= v14.`f3.b$e.e` @type ^`java.util.List` @kind object;
  #L305cec.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L305cf2.  v0:= temp;
  #L305cf4.  v13:= new `f3.a$b`[v0];
  #L305cf8.  v1:= v14.`f3.b$e.e` @type ^`java.util.List` @kind object;
  #L305cfc.  call temp:= `toArray`(v1, v13) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L305d02.  v1:= v14.`f3.b$e.m` @type ^`f3.a$a` @kind object;
  #L305d06.  if v1 == 0 then goto L305d8a;
  #L305d0a.  v1:= new `z1.m`;
  #L305d0e.  v2:= 1I;
  #L305d10.  v3:= new `z1.m$b`[v2];
  #L305d14.  v4:= new `z1.m$b`;
  #L305d18.  v5:= v14.`f3.b$e.m` @type ^`f3.a$a` @kind object;
  #L305d1c.  v6:= v5.`f3.a$a.a` @type ^`java.util.UUID` @kind object;
  #L305d20.  v5:= v5.`f3.a$a.b` @type ^`byte`[] @kind object;
  #L305d24.  v7:= "video/mp4" @kind object;
  #L305d28.  call `<init>`(v4, v6, v7, v5) @signature `Lz1/m$b;.<init>:(Ljava/util/UUID;Ljava/lang/String;[B)V` @kind direct;
  #L305d2e.  v5:= 0I;
  #L305d30.  v3[v5]:= v4 @kind object;
  #L305d34.  call `<init>`(v1, v3) @signature `Lz1/m;.<init>:([Lz1/m$b;)V` @kind direct;
  #L305d3a.  v3:= 0I;
  #L305d3c.  if v3 >= v0 then goto L305d8a;
  #L305d40.  v4:= v13[v3] @kind object;
  #L305d44.  v6:= v4.`f3.a$b.a` @type ^`int`;
  #L305d48.  v7:= 2I;
  #L305d4a.  if v6 == v7 then goto L305d52;
  #L305d4e.  if v6 != v2 then goto L305d84;
  #L305d52.  v4:= v4.`f3.a$b.j` @type ^`v1.j1`[] @kind object;
  #L305d56.  v6:= 0I;
  #L305d58.  v7:= length @variable v4;
  #L305d5a.  if v6 >= v7 then goto L305d84;
  #L305d5e.  v7:= v4[v6] @kind object;
  #L305d62.  call temp:= `b`(v7) @signature `Lv1/j1;.b:()Lv1/j1$b;` @kind virtual;
  #L305d68.  v7:= temp @kind object;
  #L305d6a.  call temp:= `M`(v7, v1) @signature `Lv1/j1$b;.M:(Lz1/m;)Lv1/j1$b;` @kind virtual;
  #L305d70.  v7:= temp @kind object;
  #L305d72.  call temp:= `E`(v7) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L305d78.  v7:= temp @kind object;
  #L305d7a.  v4[v6]:= v7 @kind object;
  #L305d7e.  v6:= v6 + 1;
  #L305d82.  goto L305d58;
  #L305d84.  v3:= v3 + 1;
  #L305d88.  goto L305d3c;
  #L305d8a.  v0:= new `f3.a`;
  #L305d8e.  v2:= v14.`f3.b$e.f` @type ^`int`;
  #L305d92.  v3:= v14.`f3.b$e.g` @type ^`int`;
  #L305d96.  v4:= v14.`f3.b$e.h` @type ^`long` @kind wide;
  #L305d9a.  v6:= v14.`f3.b$e.i` @type ^`long` @kind wide;
  #L305d9e.  v8:= v14.`f3.b$e.j` @type ^`long` @kind wide;
  #L305da2.  v10:= v14.`f3.b$e.k` @type ^`int`;
  #L305da6.  v11:= v14.`f3.b$e.l` @type ^`boolean` @kind boolean;
  #L305daa.  v12:= v14.`f3.b$e.m` @type ^`f3.a$a` @kind object;
  #L305dae.  v1:= v0 @kind object;
  #L305db0.  call `<init>`(v1, v2, v3, v4, v6, v8, v10, v11, v12, v13) @signature `Lf3/a;.<init>:(IIJJJIZLf3/a$a;[Lf3/a$b;)V` @kind direct;
  #L305db6.  return v0 @kind object;
}
procedure `void` `n`(`f3.b$e` v4 @kind this, `org.xmlpull.v1.XmlPullParser` v5 @kind object) @signature `Lf3/b$e;.n:(Lorg/xmlpull/v1/XmlPullParser;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L305e50.  v0:= "MajorVersion" @kind object;
  #L305e54.  call temp:= `k`(v4, v5, v0) @signature `Lf3/b$a;.k:(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)I` @kind virtual;
  #L305e5a.  v0:= temp;
  #L305e5c.  v4.`f3.b$e.f` @type ^`int` := v0;
  #L305e60.  v0:= "MinorVersion" @kind object;
  #L305e64.  call temp:= `k`(v4, v5, v0) @signature `Lf3/b$a;.k:(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)I` @kind virtual;
  #L305e6a.  v0:= temp;
  #L305e6c.  v4.`f3.b$e.g` @type ^`int` := v0;
  #L305e70.  v0:= "TimeScale" @kind object;
  #L305e74.  v1:= 10000000L;
  #L305e7a.  call temp:= `j`(v4, v5, v0, v1) @signature `Lf3/b$a;.j:(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;J)J` @kind virtual;
  #L305e80.  v1:= temp @kind wide;
  #L305e82.  v4.`f3.b$e.h` @type ^`long` := v1 @kind wide;
  #L305e86.  v1:= "Duration" @kind object;
  #L305e8a.  call temp:= `l`(v4, v5, v1) @signature `Lf3/b$a;.l:(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)J` @kind virtual;
  #L305e90.  v1:= temp @kind wide;
  #L305e92.  v4.`f3.b$e.i` @type ^`long` := v1 @kind wide;
  #L305e96.  v1:= "DVRWindowLength" @kind object;
  #L305e9a.  v2:= 0L;
  #L305e9e.  call temp:= `j`(v4, v5, v1, v2) @signature `Lf3/b$a;.j:(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;J)J` @kind virtual;
  #L305ea4.  v1:= temp @kind wide;
  #L305ea6.  v4.`f3.b$e.j` @type ^`long` := v1 @kind wide;
  #L305eaa.  v1:= "LookaheadCount" @kind object;
  #L305eae.  v2:= -1I;
  #L305eb0.  call temp:= `i`(v4, v5, v1, v2) @signature `Lf3/b$a;.i:(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;I)I` @kind virtual;
  #L305eb6.  v1:= temp;
  #L305eb8.  v4.`f3.b$e.k` @type ^`int` := v1;
  #L305ebc.  v1:= "IsLive" @kind object;
  #L305ec0.  v2:= 0I;
  #L305ec2.  call temp:= `g`(v4, v5, v1, v2) @signature `Lf3/b$a;.g:(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Z)Z` @kind virtual;
  #L305ec8.  v5:= temp;
  #L305eca.  v4.`f3.b$e.l` @type ^`boolean` := v5 @kind boolean;
  #L305ece.  v1:= v4.`f3.b$e.h` @type ^`long` @kind wide;
  #L305ed2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L305ed8.  v5:= temp @kind object;
  #L305eda.  call `p`(v4, v0, v5) @signature `Lf3/b$a;.p:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L305ee0.  return @kind void;
}
