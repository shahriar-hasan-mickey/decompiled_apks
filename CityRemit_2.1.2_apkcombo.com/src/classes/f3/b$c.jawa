record `f3.b$c` @kind class @AccessFlag  extends `f3.b$a` @kind class {
  `boolean` `f3.b$c.e` @AccessFlag PRIVATE;
  `java.util.UUID` `f3.b$c.f` @AccessFlag PRIVATE;
  `byte`[] `f3.b$c.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`f3.b$c` v1 @kind this, `f3.b$a` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lf3/b$c;.<init>:(Lf3/b$a;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3057f4.  v0:= "Protection" @kind object;
  #L3057f8.  call `<init>`(v1, v2, v3, v0) @signature `Lf3/b$a;.<init>:(Lf3/b$a;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L3057fe.  return @kind void;
}
procedure `i2.p`[] `q`(`byte`[] v10 @kind object) @signature `Lf3/b$c;.q:([B)[Li2/p;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L305728.  v0:= 1I;
  #L30572a.  v0:= new `i2.p`[v0];
  #L30572e.  v9:= new `i2.p`;
  #L305732.  call temp:= `r`(v10) @signature `Lf3/b$c;.r:([B)[B` @kind static;
  #L305738.  v5:= temp @kind object;
  #L30573a.  v2:= 1I;
  #L30573c.  v3:= 0I;
  #L30573e.  v4:= 8I;
  #L305742.  v6:= 0I;
  #L305744.  v7:= 0I;
  #L305746.  v8:= 0I;
  #L305748.  v1:= v9 @kind object;
  #L30574a.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8) @signature `Li2/p;.<init>:(ZLjava/lang/String;I[BII[B)V` @kind direct;
  #L305750.  v10:= 0I;
  #L305752.  v0[v10]:= v9 @kind object;
  #L305756.  return v0 @kind object;
}
procedure `byte`[] `r`(`byte`[] v4 @kind object) @signature `Lf3/b$c;.r:([B)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L305698.  v0:= new `java.lang.StringBuilder`;
  #L30569c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3056a2.  v1:= 0I;
  #L3056a4.  v2:= 0I;
  #L3056a6.  v3:= length @variable v4;
  #L3056a8.  if v2 >= v3 then goto L3056be;
  #L3056ac.  v3:= v4[v2] @kind byte;
  #L3056b0.  v3:= (`char`) v3 @kind i2c;
  #L3056b2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3056b8.  v2:= v2 + 2;
  #L3056bc.  goto L3056a6;
  #L3056be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3056c4.  v4:= temp @kind object;
  #L3056c6.  v0:= "<KID>" @kind object;
  #L3056ca.  call temp:= `indexOf`(v4, v0) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L3056d0.  v0:= temp;
  #L3056d2.  v2:= 5I;
  #L3056d4.  v0:= v0 + v2 @kind int;
  #L3056d6.  v3:= "</KID>" @kind object;
  #L3056da.  call temp:= `indexOf`(v4, v3) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L3056e0.  v3:= temp;
  #L3056e2.  call temp:= `substring`(v4, v0, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3056e8.  v4:= temp @kind object;
  #L3056ea.  call temp:= `decode`(v4, v1) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L3056f0.  v4:= temp @kind object;
  #L3056f2.  v0:= 3I;
  #L3056f4.  call `t`(v4, v1, v0) @signature `Lf3/b$c;.t:([BII)V` @kind static;
  #L3056fa.  v0:= 1I;
  #L3056fc.  v1:= 2I;
  #L3056fe.  call `t`(v4, v0, v1) @signature `Lf3/b$c;.t:([BII)V` @kind static;
  #L305704.  v0:= 4I;
  #L305706.  call `t`(v4, v0, v2) @signature `Lf3/b$c;.t:([BII)V` @kind static;
  #L30570c.  v0:= 6I;
  #L30570e.  v1:= 7I;
  #L305710.  call `t`(v4, v0, v1) @signature `Lf3/b$c;.t:([BII)V` @kind static;
  #L305716.  return v4 @kind object;
}
procedure `java.lang.String` `s`(`java.lang.String` v3 @kind object) @signature `Lf3/b$c;.s:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3057a0.  v0:= 0I;
  #L3057a2.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3057a8.  v0:= temp;
  #L3057aa.  v1:= 123I;
  #L3057ae.  if v0 != v1 then goto L3057e0;
  #L3057b2.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3057b8.  v0:= temp;
  #L3057ba.  v1:= 1I;
  #L3057bc.  v0:= v0 - v1 @kind int;
  #L3057be.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3057c4.  v0:= temp;
  #L3057c6.  v2:= 125I;
  #L3057ca.  if v0 != v2 then goto L3057e0;
  #L3057ce.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3057d4.  v0:= temp;
  #L3057d6.  v0:= v0 - v1 @kind int;
  #L3057d8.  call temp:= `substring`(v3, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3057de.  v3:= temp @kind object;
  #L3057e0.  return v3 @kind object;
}
procedure `void` `t`(`byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lf3/b$c;.t:([BII)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3058c4.  v0:= v2[v3] @kind byte;
  #L3058c8.  v1:= v2[v4] @kind byte;
  #L3058cc.  v2[v3]:= v1 @kind byte;
  #L3058d0.  v2[v4]:= v0 @kind byte;
  #L3058d4.  return @kind void;
}
procedure `java.lang.Object` `b`(`f3.b$c` v4 @kind this) @signature `Lf3/b$c;.b:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L305768.  v0:= new `f3.a$a`;
  #L30576c.  v1:= v4.`f3.b$c.f` @type ^`java.util.UUID` @kind object;
  #L305770.  v2:= v4.`f3.b$c.g` @type ^`byte`[] @kind object;
  #L305774.  call temp:= `a`(v1, v2) @signature `Li2/l;.a:(Ljava/util/UUID;[B)[B` @kind static;
  #L30577a.  v2:= temp @kind object;
  #L30577c.  v3:= v4.`f3.b$c.g` @type ^`byte`[] @kind object;
  #L305780.  call temp:= `q`(v3) @signature `Lf3/b$c;.q:([B)[Li2/p;` @kind static;
  #L305786.  v3:= temp @kind object;
  #L305788.  call `<init>`(v0, v1, v2, v3) @signature `Lf3/a$a;.<init>:(Ljava/util/UUID;[B[Li2/p;)V` @kind direct;
  #L30578e.  return v0 @kind object;
}
procedure `boolean` `d`(`f3.b$c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lf3/b$c;.d:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305678.  v0:= "ProtectionHeader" @kind object;
  #L30567c.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L305682.  v2:= temp;
  #L305684.  return v2;
}
procedure `void` `h`(`f3.b$c` v1 @kind this, `org.xmlpull.v1.XmlPullParser` v2 @kind object) @signature `Lf3/b$c;.h:(Lorg/xmlpull/v1/XmlPullParser;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305810.  call temp:= `getName`(v2) @signature `Lorg/xmlpull/v1/XmlPullParser;.getName:()Ljava/lang/String;` @kind interface;
  #L305816.  v2:= temp @kind object;
  #L305818.  v0:= "ProtectionHeader" @kind object;
  #L30581c.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L305822.  v2:= temp;
  #L305824.  if v2 == 0 then goto L30582e;
  #L305828.  v2:= 0I;
  #L30582a.  v1.`f3.b$c.e` @type ^`boolean` := v2 @kind boolean;
  #L30582e.  return @kind void;
}
procedure `void` `n`(`f3.b$c` v2 @kind this, `org.xmlpull.v1.XmlPullParser` v3 @kind object) @signature `Lf3/b$c;.n:(Lorg/xmlpull/v1/XmlPullParser;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L305840.  call temp:= `getName`(v3) @signature `Lorg/xmlpull/v1/XmlPullParser;.getName:()Ljava/lang/String;` @kind interface;
  #L305846.  v0:= temp @kind object;
  #L305848.  v1:= "ProtectionHeader" @kind object;
  #L30584c.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L305852.  v0:= temp;
  #L305854.  if v0 == 0 then goto L305880;
  #L305858.  v0:= 1I;
  #L30585a.  v2.`f3.b$c.e` @type ^`boolean` := v0 @kind boolean;
  #L30585e.  v0:= 0I;
  #L305860.  v1:= "SystemID" @kind object;
  #L305864.  call temp:= `getAttributeValue`(v3, v0, v1) @signature `Lorg/xmlpull/v1/XmlPullParser;.getAttributeValue:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L30586a.  v3:= temp @kind object;
  #L30586c.  call temp:= `s`(v3) @signature `Lf3/b$c;.s:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L305872.  v3:= temp @kind object;
  #L305874.  call temp:= `fromString`(v3) @signature `Ljava/util/UUID;.fromString:(Ljava/lang/String;)Ljava/util/UUID;` @kind static;
  #L30587a.  v3:= temp @kind object;
  #L30587c.  v2.`f3.b$c.f` @type ^`java.util.UUID` := v3 @kind object;
  #L305880.  return @kind void;
}
procedure `void` `o`(`f3.b$c` v1 @kind this, `org.xmlpull.v1.XmlPullParser` v2 @kind object) @signature `Lf3/b$c;.o:(Lorg/xmlpull/v1/XmlPullParser;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305894.  v0:= v1.`f3.b$c.e` @type ^`boolean` @kind boolean;
  #L305898.  if v0 == 0 then goto L3058b2;
  #L30589c.  call temp:= `getText`(v2) @signature `Lorg/xmlpull/v1/XmlPullParser;.getText:()Ljava/lang/String;` @kind interface;
  #L3058a2.  v2:= temp @kind object;
  #L3058a4.  v0:= 0I;
  #L3058a6.  call temp:= `decode`(v2, v0) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L3058ac.  v2:= temp @kind object;
  #L3058ae.  v1.`f3.b$c.g` @type ^`byte`[] := v2 @kind object;
  #L3058b2.  return @kind void;
}
