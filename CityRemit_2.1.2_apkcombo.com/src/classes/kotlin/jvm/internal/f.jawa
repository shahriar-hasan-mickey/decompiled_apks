record `kotlin.jvm.internal.f` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.Object`[] `@@kotlin.jvm.internal.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/jvm/internal/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b6e1c.  v0:= 0I;
  #L3b6e1e.  v0:= new `java.lang.Object`[v0];
  #L3b6e22.  `@@kotlin.jvm.internal.f.a` @type ^`java.lang.Object`[] := v0 @kind object;
  #L3b6e26.  return @kind void;
}
procedure `java.lang.Object`[] `a`(`java.util.Collection` v4 @kind object) @signature `Lkotlin/jvm/internal/f;.a:(Ljava/util/Collection;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b6c20.  v0:= "collection" @kind object;
  #L3b6c24.  call `e`(v4, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b6c2a.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3b6c30.  v0:= temp;
  #L3b6c32.  if v0 != 0 then goto L3b6c3c;
  #L3b6c36.  v4:= `@@kotlin.jvm.internal.f.a` @type ^`java.lang.Object`[] @kind object;
  #L3b6c3a.  goto L3b6cde;
  #L3b6c3c.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3b6c42.  v4:= temp @kind object;
  #L3b6c44.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3b6c4a.  v1:= temp;
  #L3b6c4c.  if v1 != 0 then goto L3b6c52;
  #L3b6c50.  goto L3b6c36;
  #L3b6c52.  v0:= new `java.lang.Object`[v0];
  #L3b6c56.  v1:= 0I;
  #L3b6c58.  v2:= v1 + 1;
  #L3b6c5c.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3b6c62.  v3:= temp @kind object;
  #L3b6c64.  v0[v1]:= v3 @kind object;
  #L3b6c68.  v1:= length @variable v0;
  #L3b6c6a.  if v2 < v1 then goto L3b6cc0;
  #L3b6c6e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3b6c74.  v1:= temp;
  #L3b6c76.  if v1 != 0 then goto L3b6c7e;
  #L3b6c7a.  v4:= v0 @kind object;
  #L3b6c7c.  goto L3b6cde;
  #L3b6c7e.  v1:= v2 * 3;
  #L3b6c82.  v1:= v1 + 1;
  #L3b6c86.  v1:= v1 ^>> 1;
  #L3b6c8a.  v3:= 2147483645I;
  #L3b6c90.  if v1 > v2 then goto L3b6cac;
  #L3b6c94.  if v2 >= v3 then goto L3b6ca0;
  #L3b6c98.  v1:= 2147483645I;
  #L3b6c9e.  goto L3b6cac;
  #L3b6ca0.  v4:= new `java.lang.OutOfMemoryError`;
  #L3b6ca4.  call `<init>`(v4) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L3b6caa.  throw v4;
  #L3b6cac.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3b6cb2.  v0:= temp @kind object;
  #L3b6cb4.  v1:= "copyOf(result, newSize)" @kind object;
  #L3b6cb8.  call `d`(v0, v1) @signature `Lkotlin/jvm/internal/k;.d:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b6cbe.  goto L3b6ce0;
  #L3b6cc0.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3b6cc6.  v1:= temp;
  #L3b6cc8.  if v1 != 0 then goto L3b6ce0;
  #L3b6ccc.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3b6cd2.  v4:= temp @kind object;
  #L3b6cd4.  v0:= "copyOf(result, size)" @kind object;
  #L3b6cd8.  call `d`(v4, v0) @signature `Lkotlin/jvm/internal/k;.d:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b6cde.  return v4 @kind object;
  #L3b6ce0.  v1:= v2;
  #L3b6ce2.  goto L3b6c58;
}
procedure `java.lang.Object`[] `b`(`java.util.Collection` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Lkotlin/jvm/internal/f;.b:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b6cf4.  v0:= "collection" @kind object;
  #L3b6cf8.  call `e`(v5, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b6cfe.  call temp:= `requireNonNull`(v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3b6d04.  call temp:= `size`(v5) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3b6d0a.  v0:= temp;
  #L3b6d0c.  v1:= 0I;
  #L3b6d0e.  v2:= 0I;
  #L3b6d10.  if v0 != 0 then goto L3b6d22;
  #L3b6d14.  v5:= length @variable v6;
  #L3b6d16.  if v5 <= 0 then goto L3b6e04;
  #L3b6d1a.  v6[v2]:= v1 @kind object;
  #L3b6d1e.  goto L3b6e04;
  #L3b6d22.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3b6d28.  v5:= temp @kind object;
  #L3b6d2a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3b6d30.  v3:= temp;
  #L3b6d32.  if v3 != 0 then goto L3b6d42;
  #L3b6d36.  v5:= length @variable v6;
  #L3b6d38.  if v5 <= 0 then goto L3b6e04;
  #L3b6d3c.  v6[v2]:= v1 @kind object;
  #L3b6d40.  goto L3b6e04;
  #L3b6d42.  v3:= length @variable v6;
  #L3b6d44.  if v0 > v3 then goto L3b6d4c;
  #L3b6d48.  v0:= v6 @kind object;
  #L3b6d4a.  goto L3b6d72;
  #L3b6d4c.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3b6d52.  v3:= temp @kind object;
  #L3b6d54.  call temp:= `getComponentType`(v3) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L3b6d5a.  v3:= temp @kind object;
  #L3b6d5c.  call temp:= `newInstance`(v3, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L3b6d62.  v0:= temp @kind object;
  #L3b6d64.  v3:= "null cannot be cast to non-null type kotlin.Array<kotlin.Any?>" @kind object;
  #L3b6d68.  call `c`(v0, v3) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b6d6e.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L3b6d72.  v3:= v2 + 1;
  #L3b6d76.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3b6d7c.  v4:= temp @kind object;
  #L3b6d7e.  v0[v2]:= v4 @kind object;
  #L3b6d82.  v2:= length @variable v0;
  #L3b6d84.  if v3 < v2 then goto L3b6dda;
  #L3b6d88.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3b6d8e.  v2:= temp;
  #L3b6d90.  if v2 != 0 then goto L3b6d98;
  #L3b6d94.  v6:= v0 @kind object;
  #L3b6d96.  goto L3b6e04;
  #L3b6d98.  v2:= v3 * 3;
  #L3b6d9c.  v2:= v2 + 1;
  #L3b6da0.  v2:= v2 ^>> 1;
  #L3b6da4.  v4:= 2147483645I;
  #L3b6daa.  if v2 > v3 then goto L3b6dc6;
  #L3b6dae.  if v3 >= v4 then goto L3b6dba;
  #L3b6db2.  v2:= 2147483645I;
  #L3b6db8.  goto L3b6dc6;
  #L3b6dba.  v5:= new `java.lang.OutOfMemoryError`;
  #L3b6dbe.  call `<init>`(v5) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L3b6dc4.  throw v5;
  #L3b6dc6.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3b6dcc.  v0:= temp @kind object;
  #L3b6dce.  v2:= "copyOf(result, newSize)" @kind object;
  #L3b6dd2.  call `d`(v0, v2) @signature `Lkotlin/jvm/internal/k;.d:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b6dd8.  goto L3b6e06;
  #L3b6dda.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3b6de0.  v2:= temp;
  #L3b6de2.  if v2 != 0 then goto L3b6e06;
  #L3b6de6.  if v0 != v6 then goto L3b6df0;
  #L3b6dea.  v6[v3]:= v1 @kind object;
  #L3b6dee.  goto L3b6e04;
  #L3b6df0.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3b6df6.  v5:= temp @kind object;
  #L3b6df8.  v6:= "copyOf(result, size)" @kind object;
  #L3b6dfc.  call `d`(v5, v6) @signature `Lkotlin/jvm/internal/k;.d:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b6e02.  v6:= v5 @kind object;
  #L3b6e04.  return v6 @kind object;
  #L3b6e06.  v2:= v3;
  #L3b6e08.  goto L3b6d72;
}
