record `kotlin.coroutines.jvm.internal.j` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.coroutines.jvm.internal.a` @kind class {
}
procedure `void` `<init>`(`kotlin.coroutines.jvm.internal.j` v1 @kind this, `mb.d` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/j;.<init>:(Lmb/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b5f14.  call `<init>`(v1, v2) @signature `Lkotlin/coroutines/jvm/internal/a;.<init>:(Lmb/d;)V` @kind direct;
  #L3b5f1a.  if v2 == 0 then goto L3b5f52;
  #L3b5f1e.  call temp:= `getContext`(v2) @signature `Lmb/d;.getContext:()Lmb/g;` @kind interface;
  #L3b5f24.  v2:= temp @kind object;
  #L3b5f26.  v0:= `@@mb.h.o` @type ^`mb.h` @kind object;
  #L3b5f2a.  if v2 != v0 then goto L3b5f32;
  #L3b5f2e.  v2:= 1I;
  #L3b5f30.  goto L3b5f34;
  #L3b5f32.  v2:= 0I;
  #L3b5f34.  if v2 == 0 then goto L3b5f3a;
  #L3b5f38.  goto L3b5f52;
  #L3b5f3a.  v2:= new `java.lang.IllegalArgumentException`;
  #L3b5f3e.  v0:= "Coroutines with restricted suspension must have EmptyCoroutineContext" @kind object;
  #L3b5f42.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b5f48.  v0:= temp @kind object;
  #L3b5f4a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b5f50.  throw v2;
  #L3b5f52.  return @kind void;
}
procedure `mb.g` `getContext`(`kotlin.coroutines.jvm.internal.j` v1 @kind this) @signature `Lkotlin/coroutines/jvm/internal/j;.getContext:()Lmb/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b5efc.  v0:= `@@mb.h.o` @type ^`mb.h` @kind object;
  #L3b5f00.  return v0 @kind object;
}
