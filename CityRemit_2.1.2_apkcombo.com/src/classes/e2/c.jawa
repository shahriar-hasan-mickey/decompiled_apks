record `e2.c` @kind class @AccessFlag PUBLIC_FINAL extends `a2.l` @kind interface {
  `s3.z` `e2.c.a` @AccessFlag PRIVATE_FINAL;
  `s3.z` `e2.c.b` @AccessFlag PRIVATE_FINAL;
  `s3.z` `e2.c.c` @AccessFlag PRIVATE_FINAL;
  `s3.z` `e2.c.d` @AccessFlag PRIVATE_FINAL;
  `e2.d` `e2.c.e` @AccessFlag PRIVATE_FINAL;
  `a2.n` `e2.c.f` @AccessFlag PRIVATE;
  `int` `e2.c.g` @AccessFlag PRIVATE;
  `boolean` `e2.c.h` @AccessFlag PRIVATE;
  `long` `e2.c.i` @AccessFlag PRIVATE;
  `int` `e2.c.j` @AccessFlag PRIVATE;
  `int` `e2.c.k` @AccessFlag PRIVATE;
  `int` `e2.c.l` @AccessFlag PRIVATE;
  `long` `e2.c.m` @AccessFlag PRIVATE;
  `boolean` `e2.c.n` @AccessFlag PRIVATE;
  `e2.a` `e2.c.o` @AccessFlag PRIVATE;
  `e2.f` `e2.c.p` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Le2/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2fd2e4.  v0:= `@@e2.b.b` @type ^`e2.b` @kind object;
  #L2fd2e8.  return @kind void;
}
procedure `void` `<init>`(`e2.c` v2 @kind this) @signature `Le2/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2fd2fc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2fd302.  v0:= new `s3.z`;
  #L2fd306.  v1:= 4I;
  #L2fd308.  call `<init>`(v0, v1) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L2fd30e.  v2.`e2.c.a` @type ^`s3.z` := v0 @kind object;
  #L2fd312.  v0:= new `s3.z`;
  #L2fd316.  v1:= 9I;
  #L2fd31a.  call `<init>`(v0, v1) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L2fd320.  v2.`e2.c.b` @type ^`s3.z` := v0 @kind object;
  #L2fd324.  v0:= new `s3.z`;
  #L2fd328.  v1:= 11I;
  #L2fd32c.  call `<init>`(v0, v1) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L2fd332.  v2.`e2.c.c` @type ^`s3.z` := v0 @kind object;
  #L2fd336.  v0:= new `s3.z`;
  #L2fd33a.  call `<init>`(v0) @signature `Ls3/z;.<init>:()V` @kind direct;
  #L2fd340.  v2.`e2.c.d` @type ^`s3.z` := v0 @kind object;
  #L2fd344.  v0:= new `e2.d`;
  #L2fd348.  call `<init>`(v0) @signature `Le2/d;.<init>:()V` @kind direct;
  #L2fd34e.  v2.`e2.c.e` @type ^`e2.d` := v0 @kind object;
  #L2fd352.  v0:= 1I;
  #L2fd354.  v2.`e2.c.g` @type ^`int` := v0;
  #L2fd358.  return @kind void;
}
procedure `a2.l`[] `c`() @signature `Le2/c;.c:()[La2/l;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;

  #L2fcdbc.  call temp:= `h`() @signature `Le2/c;.h:()[La2/l;` @kind static;
  #L2fcdc2.  v0:= temp @kind object;
  #L2fcdc4.  return v0 @kind object;
}
procedure `void` `e`(`e2.c` v4 @kind this) @signature `Le2/c;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fd36c.  v0:= v4.`e2.c.n` @type ^`boolean` @kind boolean;
  #L2fd370.  if v0 != 0 then goto L2fd398;
  #L2fd374.  v0:= v4.`e2.c.f` @type ^`a2.n` @kind object;
  #L2fd378.  v1:= new `a2.a0$b`;
  #L2fd37c.  v2:= -4.9E-324D;
  #L2fd386.  call `<init>`(v1, v2) @signature `La2/a0$b;.<init>:(J)V` @kind direct;
  #L2fd38c.  call `m`(v0, v1) @signature `La2/n;.m:(La2/a0;)V` @kind interface;
  #L2fd392.  v0:= 1I;
  #L2fd394.  v4.`e2.c.n` @type ^`boolean` := v0 @kind boolean;
  #L2fd398.  return @kind void;
}
procedure `long` `f`(`e2.c` v5 @kind this) @signature `Le2/c;.f:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fd210.  v0:= v5.`e2.c.h` @type ^`boolean` @kind boolean;
  #L2fd214.  if v0 == 0 then goto L2fd224;
  #L2fd218.  v0:= v5.`e2.c.i` @type ^`long` @kind wide;
  #L2fd21c.  v2:= v5.`e2.c.m` @type ^`long` @kind wide;
  #L2fd220.  v0:= v0 + v2 @kind long;
  #L2fd222.  goto L2fd24c;
  #L2fd224.  v0:= v5.`e2.c.e` @type ^`e2.d` @kind object;
  #L2fd228.  call temp:= `d`(v0) @signature `Le2/d;.d:()J` @kind virtual;
  #L2fd22e.  v0:= temp @kind wide;
  #L2fd230.  v2:= -4.9E-324D;
  #L2fd23a.  v4:= lcmp(v0, v2);
  #L2fd23e.  if v4 != 0 then goto L2fd248;
  #L2fd242.  v0:= 0L;
  #L2fd246.  goto L2fd24c;
  #L2fd248.  v0:= v5.`e2.c.m` @type ^`long` @kind wide;
  #L2fd24c.  return v0 @kind wide;
}
procedure `a2.l`[] `h`() @signature `Le2/c;.h:()[La2/l;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L2fcdd8.  v0:= 1I;
  #L2fcdda.  v0:= new `a2.l`[v0];
  #L2fcdde.  v1:= new `e2.c`;
  #L2fcde2.  call `<init>`(v1) @signature `Le2/c;.<init>:()V` @kind direct;
  #L2fcde8.  v2:= 0I;
  #L2fcdea.  v0[v2]:= v1 @kind object;
  #L2fcdee.  return v0 @kind object;
}
procedure `s3.z` `i`(`e2.c` v4 @kind this, `a2.m` v5 @kind object) @signature `Le2/c;.i:(La2/m;)Ls3/z;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fd260.  v0:= v4.`e2.c.l` @type ^`int`;
  #L2fd264.  v1:= v4.`e2.c.d` @type ^`s3.z` @kind object;
  #L2fd268.  call temp:= `b`(v1) @signature `Ls3/z;.b:()I` @kind virtual;
  #L2fd26e.  v1:= temp;
  #L2fd270.  v2:= 0I;
  #L2fd272.  if v0 <= v1 then goto L2fd29e;
  #L2fd276.  v0:= v4.`e2.c.d` @type ^`s3.z` @kind object;
  #L2fd27a.  call temp:= `b`(v0) @signature `Ls3/z;.b:()I` @kind virtual;
  #L2fd280.  v1:= temp;
  #L2fd282.  v1:= v1 * 2;
  #L2fd286.  v3:= v4.`e2.c.l` @type ^`int`;
  #L2fd28a.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2fd290.  v1:= temp;
  #L2fd292.  v1:= new `byte`[v1];
  #L2fd296.  call `M`(v0, v1, v2) @signature `Ls3/z;.M:([BI)V` @kind virtual;
  #L2fd29c.  goto L2fd2a8;
  #L2fd29e.  v0:= v4.`e2.c.d` @type ^`s3.z` @kind object;
  #L2fd2a2.  call `O`(v0, v2) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L2fd2a8.  v0:= v4.`e2.c.d` @type ^`s3.z` @kind object;
  #L2fd2ac.  v1:= v4.`e2.c.l` @type ^`int`;
  #L2fd2b0.  call `N`(v0, v1) @signature `Ls3/z;.N:(I)V` @kind virtual;
  #L2fd2b6.  v0:= v4.`e2.c.d` @type ^`s3.z` @kind object;
  #L2fd2ba.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L2fd2c0.  v0:= temp @kind object;
  #L2fd2c2.  v1:= v4.`e2.c.l` @type ^`int`;
  #L2fd2c6.  call `readFully`(v5, v0, v2, v1) @signature `La2/m;.readFully:([BII)V` @kind interface;
  #L2fd2cc.  v5:= v4.`e2.c.d` @type ^`s3.z` @kind object;
  #L2fd2d0.  return v5 @kind object;
}
procedure `boolean` `k`(`e2.c` v6 @kind this, `a2.m` v7 @kind object) @signature `Le2/c;.k:(La2/m;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2fce00.  v0:= v6.`e2.c.b` @type ^`s3.z` @kind object;
  #L2fce04.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L2fce0a.  v0:= temp @kind object;
  #L2fce0c.  v1:= 0I;
  #L2fce0e.  v2:= 9I;
  #L2fce12.  v3:= 1I;
  #L2fce14.  call temp:= `f`(v7, v0, v1, v2, v3) @signature `La2/m;.f:([BIIZ)Z` @kind interface;
  #L2fce1a.  v7:= temp;
  #L2fce1c.  if v7 != 0 then goto L2fce22;
  #L2fce20.  return v1;
  #L2fce22.  v7:= v6.`e2.c.b` @type ^`s3.z` @kind object;
  #L2fce26.  call `O`(v7, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L2fce2c.  v7:= v6.`e2.c.b` @type ^`s3.z` @kind object;
  #L2fce30.  v0:= 4I;
  #L2fce32.  call `P`(v7, v0) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L2fce38.  v7:= v6.`e2.c.b` @type ^`s3.z` @kind object;
  #L2fce3c.  call temp:= `C`(v7) @signature `Ls3/z;.C:()I` @kind virtual;
  #L2fce42.  v7:= temp;
  #L2fce44.  v4:= v7 ^& 4;
  #L2fce48.  if v4 == 0 then goto L2fce50;
  #L2fce4c.  v4:= 1I;
  #L2fce4e.  goto L2fce52;
  #L2fce50.  v4:= 0I;
  #L2fce52.  v7:= v7 ^& v3 @kind int;
  #L2fce54.  if v7 == 0 then goto L2fce5a;
  #L2fce58.  v1:= 1I;
  #L2fce5a.  if v4 == 0 then goto L2fce84;
  #L2fce5e.  v7:= v6.`e2.c.o` @type ^`e2.a` @kind object;
  #L2fce62.  if v7 != 0 then goto L2fce84;
  #L2fce66.  v7:= new `e2.a`;
  #L2fce6a.  v4:= v6.`e2.c.f` @type ^`a2.n` @kind object;
  #L2fce6e.  v5:= 8I;
  #L2fce72.  call temp:= `e`(v4, v5, v3) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L2fce78.  v4:= temp @kind object;
  #L2fce7a.  call `<init>`(v7, v4) @signature `Le2/a;.<init>:(La2/d0;)V` @kind direct;
  #L2fce80.  v6.`e2.c.o` @type ^`e2.a` := v7 @kind object;
  #L2fce84.  v7:= 2I;
  #L2fce86.  if v1 == 0 then goto L2fceac;
  #L2fce8a.  v1:= v6.`e2.c.p` @type ^`e2.f` @kind object;
  #L2fce8e.  if v1 != 0 then goto L2fceac;
  #L2fce92.  v1:= new `e2.f`;
  #L2fce96.  v4:= v6.`e2.c.f` @type ^`a2.n` @kind object;
  #L2fce9a.  call temp:= `e`(v4, v2, v7) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L2fcea0.  v4:= temp @kind object;
  #L2fcea2.  call `<init>`(v1, v4) @signature `Le2/f;.<init>:(La2/d0;)V` @kind direct;
  #L2fcea8.  v6.`e2.c.p` @type ^`e2.f` := v1 @kind object;
  #L2fceac.  v1:= v6.`e2.c.f` @type ^`a2.n` @kind object;
  #L2fceb0.  call `h`(v1) @signature `La2/n;.h:()V` @kind interface;
  #L2fceb6.  v1:= v6.`e2.c.b` @type ^`s3.z` @kind object;
  #L2fceba.  call temp:= `m`(v1) @signature `Ls3/z;.m:()I` @kind virtual;
  #L2fcec0.  v1:= temp;
  #L2fcec2.  v1:= v1 - v2 @kind int;
  #L2fcec4.  v1:= v1 + v0 @kind int;
  #L2fcec6.  v6.`e2.c.j` @type ^`int` := v1;
  #L2fceca.  v6.`e2.c.g` @type ^`int` := v7;
  #L2fcece.  return v3;
}
procedure `boolean` `l`(`e2.c` v9 @kind this, `a2.m` v10 @kind object) @signature `Le2/c;.l:(La2/m;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2fcee0.  call temp:= `f`(v9) @signature `Le2/c;.f:()J` @kind direct;
  #L2fcee6.  v0:= temp @kind wide;
  #L2fcee8.  v2:= v9.`e2.c.k` @type ^`int`;
  #L2fceec.  v3:= -4.9E-324D;
  #L2fcef6.  v5:= 0I;
  #L2fcef8.  v6:= 1I;
  #L2fcefa.  v7:= 8I;
  #L2fcefe.  if v2 != v7 then goto L2fcf28;
  #L2fcf02.  v7:= v9.`e2.c.o` @type ^`e2.a` @kind object;
  #L2fcf06.  if v7 == 0 then goto L2fcf28;
  #L2fcf0a.  call `e`(v9) @signature `Le2/c;.e:()V` @kind direct;
  #L2fcf10.  v2:= v9.`e2.c.o` @type ^`e2.a` @kind object;
  #L2fcf14.  call temp:= `i`(v9, v10) @signature `Le2/c;.i:(La2/m;)Ls3/z;` @kind direct;
  #L2fcf1a.  v10:= temp @kind object;
  #L2fcf1c.  call temp:= `a`(v2, v10, v0) @signature `Le2/e;.a:(Ls3/z;J)Z` @kind virtual;
  #L2fcf22.  v5:= temp;
  #L2fcf24.  v10:= 1I;
  #L2fcf26.  goto L2fcfba;
  #L2fcf28.  v7:= 9I;
  #L2fcf2c.  if v2 != v7 then goto L2fcf44;
  #L2fcf30.  v7:= v9.`e2.c.p` @type ^`e2.f` @kind object;
  #L2fcf34.  if v7 == 0 then goto L2fcf44;
  #L2fcf38.  call `e`(v9) @signature `Le2/c;.e:()V` @kind direct;
  #L2fcf3e.  v2:= v9.`e2.c.p` @type ^`e2.f` @kind object;
  #L2fcf42.  goto L2fcf14;
  #L2fcf44.  v7:= 18I;
  #L2fcf48.  if v2 != v7 then goto L2fcfae;
  #L2fcf4c.  v2:= v9.`e2.c.n` @type ^`boolean` @kind boolean;
  #L2fcf50.  if v2 != 0 then goto L2fcfae;
  #L2fcf54.  v2:= v9.`e2.c.e` @type ^`e2.d` @kind object;
  #L2fcf58.  call temp:= `i`(v9, v10) @signature `Le2/c;.i:(La2/m;)Ls3/z;` @kind direct;
  #L2fcf5e.  v10:= temp @kind object;
  #L2fcf60.  call temp:= `a`(v2, v10, v0) @signature `Le2/e;.a:(Ls3/z;J)Z` @kind virtual;
  #L2fcf66.  v5:= temp;
  #L2fcf68.  v10:= v9.`e2.c.e` @type ^`e2.d` @kind object;
  #L2fcf6c.  call temp:= `d`(v10) @signature `Le2/d;.d:()J` @kind virtual;
  #L2fcf72.  v0:= temp @kind wide;
  #L2fcf74.  v10:= lcmp(v0, v3);
  #L2fcf78.  if v10 == 0 then goto L2fcf24;
  #L2fcf7c.  v10:= v9.`e2.c.f` @type ^`a2.n` @kind object;
  #L2fcf80.  v2:= new `a2.y`;
  #L2fcf84.  v7:= v9.`e2.c.e` @type ^`e2.d` @kind object;
  #L2fcf88.  call temp:= `e`(v7) @signature `Le2/d;.e:()[J` @kind virtual;
  #L2fcf8e.  v7:= temp @kind object;
  #L2fcf90.  v8:= v9.`e2.c.e` @type ^`e2.d` @kind object;
  #L2fcf94.  call temp:= `f`(v8) @signature `Le2/d;.f:()[J` @kind virtual;
  #L2fcf9a.  v8:= temp @kind object;
  #L2fcf9c.  call `<init>`(v2, v7, v8, v0) @signature `La2/y;.<init>:([J[JJ)V` @kind direct;
  #L2fcfa2.  call `m`(v10, v2) @signature `La2/n;.m:(La2/a0;)V` @kind interface;
  #L2fcfa8.  v9.`e2.c.n` @type ^`boolean` := v6 @kind boolean;
  #L2fcfac.  goto L2fcf24;
  #L2fcfae.  v0:= v9.`e2.c.l` @type ^`int`;
  #L2fcfb2.  call `j`(v10, v0) @signature `La2/m;.j:(I)V` @kind interface;
  #L2fcfb8.  v10:= 0I;
  #L2fcfba.  v0:= v9.`e2.c.h` @type ^`boolean` @kind boolean;
  #L2fcfbe.  if v0 != 0 then goto L2fcfee;
  #L2fcfc2.  if v5 == 0 then goto L2fcfee;
  #L2fcfc6.  v9.`e2.c.h` @type ^`boolean` := v6 @kind boolean;
  #L2fcfca.  v0:= v9.`e2.c.e` @type ^`e2.d` @kind object;
  #L2fcfce.  call temp:= `d`(v0) @signature `Le2/d;.d:()J` @kind virtual;
  #L2fcfd4.  v0:= temp @kind wide;
  #L2fcfd6.  v2:= lcmp(v0, v3);
  #L2fcfda.  if v2 != 0 then goto L2fcfe6;
  #L2fcfde.  v0:= v9.`e2.c.m` @type ^`long` @kind wide;
  #L2fcfe2.  v0:= -v0 @kind long;
  #L2fcfe4.  goto L2fcfea;
  #L2fcfe6.  v0:= 0L;
  #L2fcfea.  v9.`e2.c.i` @type ^`long` := v0 @kind wide;
  #L2fcfee.  v0:= 4I;
  #L2fcff0.  v9.`e2.c.j` @type ^`int` := v0;
  #L2fcff4.  v0:= 2I;
  #L2fcff6.  v9.`e2.c.g` @type ^`int` := v0;
  #L2fcffa.  return v10;
}
procedure `boolean` `m`(`e2.c` v6 @kind this, `a2.m` v7 @kind object) @signature `Le2/c;.m:(La2/m;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2fd00c.  v0:= v6.`e2.c.c` @type ^`s3.z` @kind object;
  #L2fd010.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L2fd016.  v0:= temp @kind object;
  #L2fd018.  v1:= 0I;
  #L2fd01a.  v2:= 11I;
  #L2fd01e.  v3:= 1I;
  #L2fd020.  call temp:= `f`(v7, v0, v1, v2, v3) @signature `La2/m;.f:([BIIZ)Z` @kind interface;
  #L2fd026.  v7:= temp;
  #L2fd028.  if v7 != 0 then goto L2fd02e;
  #L2fd02c.  return v1;
  #L2fd02e.  v7:= v6.`e2.c.c` @type ^`s3.z` @kind object;
  #L2fd032.  call `O`(v7, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L2fd038.  v7:= v6.`e2.c.c` @type ^`s3.z` @kind object;
  #L2fd03c.  call temp:= `C`(v7) @signature `Ls3/z;.C:()I` @kind virtual;
  #L2fd042.  v7:= temp;
  #L2fd044.  v6.`e2.c.k` @type ^`int` := v7;
  #L2fd048.  v7:= v6.`e2.c.c` @type ^`s3.z` @kind object;
  #L2fd04c.  call temp:= `F`(v7) @signature `Ls3/z;.F:()I` @kind virtual;
  #L2fd052.  v7:= temp;
  #L2fd054.  v6.`e2.c.l` @type ^`int` := v7;
  #L2fd058.  v7:= v6.`e2.c.c` @type ^`s3.z` @kind object;
  #L2fd05c.  call temp:= `F`(v7) @signature `Ls3/z;.F:()I` @kind virtual;
  #L2fd062.  v7:= temp;
  #L2fd064.  v0:= (`long`) v7 @kind i2l;
  #L2fd066.  v6.`e2.c.m` @type ^`long` := v0 @kind wide;
  #L2fd06a.  v7:= v6.`e2.c.c` @type ^`s3.z` @kind object;
  #L2fd06e.  call temp:= `C`(v7) @signature `Ls3/z;.C:()I` @kind virtual;
  #L2fd074.  v7:= temp;
  #L2fd076.  v7:= v7 ^< 24;
  #L2fd07a.  v0:= (`long`) v7 @kind i2l;
  #L2fd07c.  v4:= v6.`e2.c.m` @type ^`long` @kind wide;
  #L2fd080.  v0:= v0 ^| v4 @kind long;
  #L2fd082.  v4:= 1000L;
  #L2fd086.  v0:= v0 * v4 @kind long;
  #L2fd08a.  v6.`e2.c.m` @type ^`long` := v0 @kind wide;
  #L2fd08e.  v7:= v6.`e2.c.c` @type ^`s3.z` @kind object;
  #L2fd092.  v0:= 3I;
  #L2fd094.  call `P`(v7, v0) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L2fd09a.  v7:= 4I;
  #L2fd09c.  v6.`e2.c.g` @type ^`int` := v7;
  #L2fd0a0.  return v3;
}
procedure `void` `n`(`e2.c` v1 @kind this, `a2.m` v2 @kind object) @signature `Le2/c;.n:(La2/m;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2fd410.  v0:= v1.`e2.c.j` @type ^`int`;
  #L2fd414.  call `j`(v2, v0) @signature `La2/m;.j:(I)V` @kind interface;
  #L2fd41a.  v2:= 0I;
  #L2fd41c.  v1.`e2.c.j` @type ^`int` := v2;
  #L2fd420.  v2:= 3I;
  #L2fd422.  v1.`e2.c.g` @type ^`int` := v2;
  #L2fd426.  return @kind void;
}
procedure `void` `a`(`e2.c` v0 @kind this) @signature `Le2/c;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L2fd3c4.  return @kind void;
}
procedure `void` `b`(`e2.c` v2 @kind this, `long` v3 , `long` v5 ) @signature `Le2/c;.b:(JJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fd3d8.  v5:= 0I;
  #L2fd3da.  v0:= 0L;
  #L2fd3de.  v6:= lcmp(v3, v0);
  #L2fd3e2.  if v6 != 0 then goto L2fd3f2;
  #L2fd3e6.  v3:= 1I;
  #L2fd3e8.  v2.`e2.c.g` @type ^`int` := v3;
  #L2fd3ec.  v2.`e2.c.h` @type ^`boolean` := v5 @kind boolean;
  #L2fd3f0.  goto L2fd3f8;
  #L2fd3f2.  v3:= 3I;
  #L2fd3f4.  v2.`e2.c.g` @type ^`int` := v3;
  #L2fd3f8.  v2.`e2.c.j` @type ^`int` := v5;
  #L2fd3fc.  return @kind void;
}
procedure `void` `d`(`e2.c` v0 @kind this, `a2.n` v1 @kind object) @signature `Le2/c;.d:(La2/n;)V` @AccessFlag PUBLIC {
    temp;

  #L2fd3ac.  v0.`e2.c.f` @type ^`a2.n` := v1 @kind object;
  #L2fd3b0.  return @kind void;
}
procedure `boolean` `g`(`e2.c` v3 @kind this, `a2.m` v4 @kind object) @signature `Le2/c;.g:(La2/m;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fd0b4.  v0:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd0b8.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L2fd0be.  v0:= temp @kind object;
  #L2fd0c0.  v1:= 0I;
  #L2fd0c2.  v2:= 3I;
  #L2fd0c4.  call `o`(v4, v0, v1, v2) @signature `La2/m;.o:([BII)V` @kind interface;
  #L2fd0ca.  v0:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd0ce.  call `O`(v0, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L2fd0d4.  v0:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd0d8.  call temp:= `F`(v0) @signature `Ls3/z;.F:()I` @kind virtual;
  #L2fd0de.  v0:= temp;
  #L2fd0e0.  v2:= 4607062I;
  #L2fd0e6.  if v0 == v2 then goto L2fd0ec;
  #L2fd0ea.  return v1;
  #L2fd0ec.  v0:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd0f0.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L2fd0f6.  v0:= temp @kind object;
  #L2fd0f8.  v2:= 2I;
  #L2fd0fa.  call `o`(v4, v0, v1, v2) @signature `La2/m;.o:([BII)V` @kind interface;
  #L2fd100.  v0:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd104.  call `O`(v0, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L2fd10a.  v0:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd10e.  call temp:= `I`(v0) @signature `Ls3/z;.I:()I` @kind virtual;
  #L2fd114.  v0:= temp;
  #L2fd116.  v0:= v0 ^& 250;
  #L2fd11a.  if v0 == 0 then goto L2fd120;
  #L2fd11e.  return v1;
  #L2fd120.  v0:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd124.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L2fd12a.  v0:= temp @kind object;
  #L2fd12c.  v2:= 4I;
  #L2fd12e.  call `o`(v4, v0, v1, v2) @signature `La2/m;.o:([BII)V` @kind interface;
  #L2fd134.  v0:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd138.  call `O`(v0, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L2fd13e.  v0:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd142.  call temp:= `m`(v0) @signature `Ls3/z;.m:()I` @kind virtual;
  #L2fd148.  v0:= temp;
  #L2fd14a.  call `i`(v4) @signature `La2/m;.i:()V` @kind interface;
  #L2fd150.  call `p`(v4, v0) @signature `La2/m;.p:(I)V` @kind interface;
  #L2fd156.  v0:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd15a.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L2fd160.  v0:= temp @kind object;
  #L2fd162.  call `o`(v4, v0, v1, v2) @signature `La2/m;.o:([BII)V` @kind interface;
  #L2fd168.  v4:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd16c.  call `O`(v4, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L2fd172.  v4:= v3.`e2.c.a` @type ^`s3.z` @kind object;
  #L2fd176.  call temp:= `m`(v4) @signature `Ls3/z;.m:()I` @kind virtual;
  #L2fd17c.  v4:= temp;
  #L2fd17e.  if v4 != 0 then goto L2fd184;
  #L2fd182.  v1:= 1I;
  #L2fd184.  return v1;
}
procedure `int` `j`(`e2.c` v2 @kind this, `a2.m` v3 @kind object, `a2.z` v4 @kind object) @signature `Le2/c;.j:(La2/m;La2/z;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fd198.  v4:= v2.`e2.c.f` @type ^`a2.n` @kind object;
  #L2fd19c.  call temp:= `h`(v4) @signature `Ls3/a;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2fd1a2.  v4:= v2.`e2.c.g` @type ^`int`;
  #L2fd1a6.  v0:= 1I;
  #L2fd1a8.  v1:= -1I;
  #L2fd1aa.  if v4 == v0 then goto L2fd1f2;
  #L2fd1ae.  v0:= 2I;
  #L2fd1b0.  if v4 == v0 then goto L2fd1ea;
  #L2fd1b4.  v0:= 3I;
  #L2fd1b6.  if v4 == v0 then goto L2fd1dc;
  #L2fd1ba.  v0:= 4I;
  #L2fd1bc.  if v4 != v0 then goto L2fd1d0;
  #L2fd1c0.  call temp:= `l`(v2, v3) @signature `Le2/c;.l:(La2/m;)Z` @kind direct;
  #L2fd1c6.  v4:= temp;
  #L2fd1c8.  if v4 == 0 then goto L2fd1a2;
  #L2fd1cc.  v3:= 0I;
  #L2fd1ce.  return v3;
  #L2fd1d0.  v3:= new `java.lang.IllegalStateException`;
  #L2fd1d4.  call `<init>`(v3) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2fd1da.  throw v3;
  #L2fd1dc.  call temp:= `m`(v2, v3) @signature `Le2/c;.m:(La2/m;)Z` @kind direct;
  #L2fd1e2.  v4:= temp;
  #L2fd1e4.  if v4 != 0 then goto L2fd1a2;
  #L2fd1e8.  return v1;
  #L2fd1ea.  call `n`(v2, v3) @signature `Le2/c;.n:(La2/m;)V` @kind direct;
  #L2fd1f0.  goto L2fd1a2;
  #L2fd1f2.  call temp:= `k`(v2, v3) @signature `Le2/c;.k:(La2/m;)Z` @kind direct;
  #L2fd1f8.  v4:= temp;
  #L2fd1fa.  if v4 != 0 then goto L2fd1a2;
  #L2fd1fe.  return v1;
}
