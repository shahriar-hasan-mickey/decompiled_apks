record `m5.b` @kind class @AccessFlag PUBLIC_ABSTRACT extends `m5.s0` @kind class {
  `m5.b$b` `m5.b.o` @AccessFlag PRIVATE;
  `java.lang.Object` `m5.b.p` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`m5.b` v1 @kind this) @signature `Lm5/b;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L3db7ec.  call `<init>`(v1) @signature `Lm5/s0;.<init>:()V` @kind direct;
  #L3db7f2.  v0:= `@@m5.b$b.p` @type ^`m5.b$b` @kind object;
  #L3db7f6.  v1.`m5.b.o` @type ^`m5.b$b` := v0 @kind object;
  #L3db7fa.  return @kind void;
}
procedure `boolean` `e`(`m5.b` v2 @kind this) @signature `Lm5/b;.e:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3db74c.  v0:= `@@m5.b$b.r` @type ^`m5.b$b` @kind object;
  #L3db750.  v2.`m5.b.o` @type ^`m5.b$b` := v0 @kind object;
  #L3db754.  call temp:= `a`(v2) @signature `Lm5/b;.a:()Ljava/lang/Object;` @kind virtual;
  #L3db75a.  v0:= temp @kind object;
  #L3db75c.  v2.`m5.b.p` @type ^`java.lang.Object` := v0 @kind object;
  #L3db760.  v0:= v2.`m5.b.o` @type ^`m5.b$b` @kind object;
  #L3db764.  v1:= `@@m5.b$b.q` @type ^`m5.b$b` @kind object;
  #L3db768.  if v0 == v1 then goto L3db778;
  #L3db76c.  v0:= `@@m5.b$b.o` @type ^`m5.b$b` @kind object;
  #L3db770.  v2.`m5.b.o` @type ^`m5.b$b` := v0 @kind object;
  #L3db774.  v0:= 1I;
  #L3db776.  return v0;
  #L3db778.  v0:= 0I;
  #L3db77a.  return v0;
}
procedure `java.lang.Object` `a`() @signature `Lm5/b;.a:()Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `d`(`m5.b` v1 @kind this) @signature `Lm5/b;.d:()Ljava/lang/Object;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L3db78c.  v0:= `@@m5.b$b.q` @type ^`m5.b$b` @kind object;
  #L3db790.  v1.`m5.b.o` @type ^`m5.b$b` := v0 @kind object;
  #L3db794.  v0:= 0I;
  #L3db796.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`m5.b` v4 @kind this) @signature `Lm5/b;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3db6f4.  v0:= v4.`m5.b.o` @type ^`m5.b$b` @kind object;
  #L3db6f8.  v1:= `@@m5.b$b.r` @type ^`m5.b$b` @kind object;
  #L3db6fc.  v2:= 0I;
  #L3db6fe.  v3:= 1I;
  #L3db700.  if v0 == v1 then goto L3db708;
  #L3db704.  v0:= 1I;
  #L3db706.  goto L3db70a;
  #L3db708.  v0:= 0I;
  #L3db70a.  call `n`(v0) @signature `Ll5/j;.n:(Z)V` @kind static;
  #L3db710.  v0:= `@@m5.b$a.a` @type ^`int`[] @kind object;
  #L3db714.  v1:= v4.`m5.b.o` @type ^`m5.b$b` @kind object;
  #L3db718.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L3db71e.  v1:= temp;
  #L3db720.  v0:= v0[v1];
  #L3db724.  if v0 == v3 then goto L3db73a;
  #L3db728.  v1:= 2I;
  #L3db72a.  if v0 == v1 then goto L3db738;
  #L3db72e.  call temp:= `e`(v4) @signature `Lm5/b;.e:()Z` @kind direct;
  #L3db734.  v0:= temp;
  #L3db736.  return v0;
  #L3db738.  return v3;
  #L3db73a.  return v2;
}
procedure `java.lang.Object` `next`(`m5.b` v2 @kind this) @signature `Lm5/b;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3db7a8.  call temp:= `hasNext`(v2) @signature `Lm5/b;.hasNext:()Z` @kind virtual;
  #L3db7ae.  v0:= temp;
  #L3db7b0.  if v0 == 0 then goto L3db7d0;
  #L3db7b4.  v0:= `@@m5.b$b.p` @type ^`m5.b$b` @kind object;
  #L3db7b8.  v2.`m5.b.o` @type ^`m5.b$b` := v0 @kind object;
  #L3db7bc.  v0:= v2.`m5.b.p` @type ^`java.lang.Object` @kind object;
  #L3db7c0.  call temp:= `a`(v0) @signature `Lm5/f0;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3db7c6.  v0:= temp @kind object;
  #L3db7c8.  v1:= 0I;
  #L3db7ca.  v2.`m5.b.p` @type ^`java.lang.Object` := v1 @kind object;
  #L3db7ce.  return v0 @kind object;
  #L3db7d0.  v0:= new `java.util.NoSuchElementException`;
  #L3db7d4.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3db7da.  throw v0;
}
