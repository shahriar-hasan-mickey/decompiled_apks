record `m5.o` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@m5.o.o` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm5/o;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3deae8.  v0:= 0I;
  #L3deaea.  v0:= new `java.lang.Object`[v0];
  #L3deaee.  `@@m5.o.o` @type ^`java.lang.Object`[] := v0 @kind object;
  #L3deaf2.  return @kind void;
}
procedure `void` `<init>`(`m5.o` v0 @kind this) @signature `Lm5/o;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3deb04.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L3deb0a.  return @kind void;
}
procedure `boolean` `add`(`m5.o` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm5/o;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3de8f4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3de8f8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3de8fe.  throw v1;
}
procedure `boolean` `addAll`(`m5.o` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lm5/o;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3de910.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3de914.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3de91a.  throw v1;
}
procedure `m5.q` `b`(`m5.o` v1 @kind this) @signature `Lm5/o;.b:()Lm5/q;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3deab0.  call temp:= `isEmpty`(v1) @signature `Ljava/util/AbstractCollection;.isEmpty:()Z` @kind virtual;
  #L3deab6.  v0:= temp;
  #L3deab8.  if v0 == 0 then goto L3deac6;
  #L3deabc.  call temp:= `a0`() @signature `Lm5/q;.a0:()Lm5/q;` @kind static;
  #L3deac2.  v0:= temp @kind object;
  #L3deac4.  goto L3dead6;
  #L3deac6.  call temp:= `toArray`(v1) @signature `Lm5/o;.toArray:()[Ljava/lang/Object;` @kind virtual;
  #L3deacc.  v0:= temp @kind object;
  #L3deace.  call temp:= `y`(v0) @signature `Lm5/q;.y:([Ljava/lang/Object;)Lm5/q;` @kind static;
  #L3dead4.  v0:= temp @kind object;
  #L3dead6.  return v0 @kind object;
}
procedure `void` `clear`(`m5.o` v1 @kind this) @signature `Lm5/o;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3deb1c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3deb20.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3deb26.  throw v0;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Lm5/o;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `f`(`m5.o` v3 @kind this, `java.lang.Object`[] v4 @kind object, `int` v5 ) @signature `Lm5/o;.f:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3de980.  call temp:= `u`(v3) @signature `Lm5/o;.u:()Lm5/s0;` @kind virtual;
  #L3de986.  v0:= temp @kind object;
  #L3de988.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3de98e.  v1:= temp;
  #L3de990.  if v1 == 0 then goto L3de9a8;
  #L3de994.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3de99a.  v1:= temp @kind object;
  #L3de99c.  v2:= v5 + 1;
  #L3de9a0.  v4[v5]:= v1 @kind object;
  #L3de9a4.  v5:= v2;
  #L3de9a6.  goto L3de988;
  #L3de9a8.  return v5;
}
procedure `java.lang.Object`[] `h`(`m5.o` v1 @kind this) @signature `Lm5/o;.h:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L3de9f4.  v0:= 0I;
  #L3de9f6.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`m5.o` v1 @kind this) @signature `Lm5/o;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3dea94.  call temp:= `u`(v1) @signature `Lm5/o;.u:()Lm5/s0;` @kind virtual;
  #L3dea9a.  v0:= temp @kind object;
  #L3dea9c.  return v0 @kind object;
}
procedure `int` `l`(`m5.o` v1 @kind this) @signature `Lm5/o;.l:()I` @AccessFlag  {
    temp;
    v0;

  #L3de9bc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3de9c0.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3de9c6.  throw v0;
}
procedure `int` `n`(`m5.o` v1 @kind this) @signature `Lm5/o;.n:()I` @AccessFlag  {
    temp;
    v0;

  #L3de9d8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3de9dc.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3de9e2.  throw v0;
}
procedure `boolean` `p`() @signature `Lm5/o;.p:()Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `remove`(`m5.o` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm5/o;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3de92c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3de930.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3de936.  throw v1;
}
procedure `boolean` `removeAll`(`m5.o` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lm5/o;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3de948.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3de94c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3de952.  throw v1;
}
procedure `boolean` `retainAll`(`m5.o` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lm5/o;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3de964.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3de968.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3de96e.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`m5.o` v1 @kind this) @signature `Lm5/o;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3dea08.  v0:= `@@m5.o.o` @type ^`java.lang.Object`[] @kind object;
  #L3dea0c.  call temp:= `toArray`(v1, v0) @signature `Lm5/o;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L3dea12.  v0:= temp @kind object;
  #L3dea14.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`m5.o` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lm5/o;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3dea28.  call temp:= `i`(v4) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3dea2e.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L3dea34.  v0:= temp;
  #L3dea36.  v1:= length @variable v4;
  #L3dea38.  if v1 >= v0 then goto L3dea6c;
  #L3dea3c.  call temp:= `h`(v3) @signature `Lm5/o;.h:()[Ljava/lang/Object;` @kind virtual;
  #L3dea42.  v1:= temp @kind object;
  #L3dea44.  if v1 == 0 then goto L3dea62;
  #L3dea48.  call temp:= `n`(v3) @signature `Lm5/o;.n:()I` @kind virtual;
  #L3dea4e.  v0:= temp;
  #L3dea50.  call temp:= `l`(v3) @signature `Lm5/o;.l:()I` @kind virtual;
  #L3dea56.  v2:= temp;
  #L3dea58.  call temp:= `a`(v1, v0, v2, v4) @signature `Lm5/i0;.a:([Ljava/lang/Object;II[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L3dea5e.  v4:= temp @kind object;
  #L3dea60.  return v4 @kind object;
  #L3dea62.  call temp:= `d`(v4, v0) @signature `Lm5/g0;.d:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3dea68.  v4:= temp @kind object;
  #L3dea6a.  goto L3dea78;
  #L3dea6c.  v1:= length @variable v4;
  #L3dea6e.  if v1 <= v0 then goto L3dea78;
  #L3dea72.  v1:= 0I;
  #L3dea74.  v4[v0]:= v1 @kind object;
  #L3dea78.  v0:= 0I;
  #L3dea7a.  call temp:= `f`(v3, v4, v0) @signature `Lm5/o;.f:([Ljava/lang/Object;I)I` @kind virtual;
  #L3dea80.  return v4 @kind object;
}
procedure `m5.s0` `u`() @signature `Lm5/o;.u:()Lm5/s0;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
