record `m5.d$c` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface {
  `java.util.Iterator` `m5.d$c.o` @AccessFlag FINAL;
  `java.lang.Object` `m5.d$c.p` @AccessFlag ;
  `java.util.Collection` `m5.d$c.q` @AccessFlag ;
  `java.util.Iterator` `m5.d$c.r` @AccessFlag ;
  `m5.d` `m5.d$c.s` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m5.d$c` v0 @kind this, `m5.d` v1 @kind object) @signature `Lm5/d$c;.<init>:(Lm5/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3dbdc4.  v0.`m5.d$c.s` @type ^`m5.d` := v1 @kind object;
  #L3dbdc8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dbdce.  call temp:= `h`(v1) @signature `Lm5/d;.h:(Lm5/d;)Ljava/util/Map;` @kind static;
  #L3dbdd4.  v1:= temp @kind object;
  #L3dbdd6.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3dbddc.  v1:= temp @kind object;
  #L3dbdde.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dbde4.  v1:= temp @kind object;
  #L3dbde6.  v0.`m5.d$c.o` @type ^`java.util.Iterator` := v1 @kind object;
  #L3dbdea.  v1:= 0I;
  #L3dbdec.  v0.`m5.d$c.p` @type ^`java.lang.Object` := v1 @kind object;
  #L3dbdf0.  v0.`m5.d$c.q` @type ^`java.util.Collection` := v1 @kind object;
  #L3dbdf4.  call temp:= `f`() @signature `Lm5/u;.f:()Ljava/util/Iterator;` @kind static;
  #L3dbdfa.  v1:= temp @kind object;
  #L3dbdfc.  v0.`m5.d$c.r` @type ^`java.util.Iterator` := v1 @kind object;
  #L3dbe00.  return @kind void;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lm5/d$c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`m5.d$c` v1 @kind this) @signature `Lm5/d$c;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dbd0c.  v0:= v1.`m5.d$c.o` @type ^`java.util.Iterator` @kind object;
  #L3dbd10.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dbd16.  v0:= temp;
  #L3dbd18.  if v0 != 0 then goto L3dbd32;
  #L3dbd1c.  v0:= v1.`m5.d$c.r` @type ^`java.util.Iterator` @kind object;
  #L3dbd20.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dbd26.  v0:= temp;
  #L3dbd28.  if v0 == 0 then goto L3dbd2e;
  #L3dbd2c.  goto L3dbd32;
  #L3dbd2e.  v0:= 0I;
  #L3dbd30.  goto L3dbd34;
  #L3dbd32.  v0:= 1I;
  #L3dbd34.  return v0;
}
procedure `java.lang.Object` `next`(`m5.d$c` v2 @kind this) @signature `Lm5/d$c;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dbd48.  v0:= v2.`m5.d$c.r` @type ^`java.util.Iterator` @kind object;
  #L3dbd4c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dbd52.  v0:= temp;
  #L3dbd54.  if v0 != 0 then goto L3dbd90;
  #L3dbd58.  v0:= v2.`m5.d$c.o` @type ^`java.util.Iterator` @kind object;
  #L3dbd5c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dbd62.  v0:= temp @kind object;
  #L3dbd64.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L3dbd68.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3dbd6e.  v1:= temp @kind object;
  #L3dbd70.  v2.`m5.d$c.p` @type ^`java.lang.Object` := v1 @kind object;
  #L3dbd74.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3dbd7a.  v0:= temp @kind object;
  #L3dbd7c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3dbd80.  v2.`m5.d$c.q` @type ^`java.util.Collection` := v0 @kind object;
  #L3dbd84.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dbd8a.  v0:= temp @kind object;
  #L3dbd8c.  v2.`m5.d$c.r` @type ^`java.util.Iterator` := v0 @kind object;
  #L3dbd90.  v0:= v2.`m5.d$c.p` @type ^`java.lang.Object` @kind object;
  #L3dbd94.  call temp:= `a`(v0) @signature `Lm5/f0;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3dbd9a.  v0:= temp @kind object;
  #L3dbd9c.  v1:= v2.`m5.d$c.r` @type ^`java.util.Iterator` @kind object;
  #L3dbda0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dbda6.  v1:= temp @kind object;
  #L3dbda8.  call temp:= `a`(v2, v0, v1) @signature `Lm5/d$c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3dbdae.  v0:= temp @kind object;
  #L3dbdb0.  return v0 @kind object;
}
procedure `void` `remove`(`m5.d$c` v1 @kind this) @signature `Lm5/d$c;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dbe14.  v0:= v1.`m5.d$c.r` @type ^`java.util.Iterator` @kind object;
  #L3dbe18.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3dbe1e.  v0:= v1.`m5.d$c.q` @type ^`java.util.Collection` @kind object;
  #L3dbe22.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3dbe28.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3dbe2c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3dbe32.  v0:= temp;
  #L3dbe34.  if v0 == 0 then goto L3dbe42;
  #L3dbe38.  v0:= v1.`m5.d$c.o` @type ^`java.util.Iterator` @kind object;
  #L3dbe3c.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3dbe42.  v0:= v1.`m5.d$c.s` @type ^`m5.d` @kind object;
  #L3dbe46.  call temp:= `k`(v0) @signature `Lm5/d;.k:(Lm5/d;)I` @kind static;
  #L3dbe4c.  return @kind void;
}
