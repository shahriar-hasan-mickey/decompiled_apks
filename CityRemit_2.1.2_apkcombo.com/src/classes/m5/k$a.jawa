record `m5.k$a` @kind class @AccessFlag  extends `m5.k` @kind class {
}
procedure `void` `<init>`(`m5.k$a` v1 @kind this) @signature `Lm5/k$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3de328.  v0:= 0I;
  #L3de32a.  call `<init>`(v1, v0) @signature `Lm5/k;.<init>:(Lm5/k$a;)V` @kind direct;
  #L3de330.  return @kind void;
}
procedure `m5.k` `d`(`m5.k$a` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lm5/k$a;.d:(II)Lm5/k;` @AccessFlag PUBLIC {
    temp;

  #L3de298.  call temp:= `e`(v1, v2) @signature `Lo5/d;.e:(II)I` @kind static;
  #L3de29e.  v1:= temp;
  #L3de2a0.  call temp:= `j`(v0, v1) @signature `Lm5/k$a;.j:(I)Lm5/k;` @kind virtual;
  #L3de2a6.  v1:= temp @kind object;
  #L3de2a8.  return v1 @kind object;
}
procedure `m5.k` `e`(`m5.k$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.util.Comparator` v3 @kind object) @signature `Lm5/k$a;.e:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)Lm5/k;` @AccessFlag PUBLIC {
    temp;

  #L3de2bc.  call temp:= `compare`(v3, v1, v2) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L3de2c2.  v1:= temp;
  #L3de2c4.  call temp:= `j`(v0, v1) @signature `Lm5/k$a;.j:(I)Lm5/k;` @kind virtual;
  #L3de2ca.  v1:= temp @kind object;
  #L3de2cc.  return v1 @kind object;
}
procedure `m5.k` `f`(`m5.k$a` v0 @kind this, `boolean` v1 , `boolean` v2 ) @signature `Lm5/k$a;.f:(ZZ)Lm5/k;` @AccessFlag PUBLIC {
    temp;

  #L3de2e0.  call temp:= `a`(v1, v2) @signature `Lo5/a;.a:(ZZ)I` @kind static;
  #L3de2e6.  v1:= temp;
  #L3de2e8.  call temp:= `j`(v0, v1) @signature `Lm5/k$a;.j:(I)Lm5/k;` @kind virtual;
  #L3de2ee.  v1:= temp @kind object;
  #L3de2f0.  return v1 @kind object;
}
procedure `m5.k` `g`(`m5.k$a` v0 @kind this, `boolean` v1 , `boolean` v2 ) @signature `Lm5/k$a;.g:(ZZ)Lm5/k;` @AccessFlag PUBLIC {
    temp;

  #L3de304.  call temp:= `a`(v2, v1) @signature `Lo5/a;.a:(ZZ)I` @kind static;
  #L3de30a.  v1:= temp;
  #L3de30c.  call temp:= `j`(v0, v1) @signature `Lm5/k$a;.j:(I)Lm5/k;` @kind virtual;
  #L3de312.  v1:= temp @kind object;
  #L3de314.  return v1 @kind object;
}
procedure `int` `h`(`m5.k$a` v1 @kind this) @signature `Lm5/k$a;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3de24c.  v0:= 0I;
  #L3de24e.  return v0;
}
procedure `m5.k` `j`(`m5.k$a` v0 @kind this, `int` v1 ) @signature `Lm5/k$a;.j:(I)Lm5/k;` @AccessFlag  {
    temp;

  #L3de260.  if v1 >= 0 then goto L3de26e;
  #L3de264.  call temp:= `a`() @signature `Lm5/k;.a:()Lm5/k;` @kind static;
  #L3de26a.  v1:= temp @kind object;
  #L3de26c.  goto L3de284;
  #L3de26e.  if v1 <= 0 then goto L3de27c;
  #L3de272.  call temp:= `b`() @signature `Lm5/k;.b:()Lm5/k;` @kind static;
  #L3de278.  v1:= temp @kind object;
  #L3de27a.  goto L3de284;
  #L3de27c.  call temp:= `c`() @signature `Lm5/k;.c:()Lm5/k;` @kind static;
  #L3de282.  v1:= temp @kind object;
  #L3de284.  return v1 @kind object;
}
