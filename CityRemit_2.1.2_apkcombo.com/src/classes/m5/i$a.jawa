record `m5.i$a` @kind class @AccessFlag  extends `java.util.AbstractCollection` @kind class {
  `java.util.Collection` `m5.i$a.o` @AccessFlag FINAL;
  `l5.k` `m5.i$a.p` @AccessFlag FINAL;
}
procedure `void` `<init>`(`m5.i$a` v0 @kind this, `java.util.Collection` v1 @kind object, `l5.k` v2 @kind object) @signature `Lm5/i$a;.<init>:(Ljava/util/Collection;Ll5/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3de094.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L3de09a.  v0.`m5.i$a.o` @type ^`java.util.Collection` := v1 @kind object;
  #L3de09e.  v0.`m5.i$a.p` @type ^`l5.k` := v2 @kind object;
  #L3de0a2.  return @kind void;
}
procedure `boolean` `add`(`m5.i$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm5/i$a;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ddde0.  v0:= v1.`m5.i$a.p` @type ^`l5.k` @kind object;
  #L3ddde4.  call temp:= `apply`(v0, v2) @signature `Ll5/k;.apply:(Ljava/lang/Object;)Z` @kind interface;
  #L3dddea.  v0:= temp;
  #L3dddec.  call `d`(v0) @signature `Ll5/j;.d:(Z)V` @kind static;
  #L3dddf2.  v0:= v1.`m5.i$a.o` @type ^`java.util.Collection` @kind object;
  #L3dddf6.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dddfc.  v2:= temp;
  #L3dddfe.  return v2;
}
procedure `boolean` `addAll`(`m5.i$a` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lm5/i$a;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3dde10.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dde16.  v0:= temp @kind object;
  #L3dde18.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dde1e.  v1:= temp;
  #L3dde20.  if v1 == 0 then goto L3dde40;
  #L3dde24.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dde2a.  v1:= temp @kind object;
  #L3dde2c.  v2:= v3.`m5.i$a.p` @type ^`l5.k` @kind object;
  #L3dde30.  call temp:= `apply`(v2, v1) @signature `Ll5/k;.apply:(Ljava/lang/Object;)Z` @kind interface;
  #L3dde36.  v1:= temp;
  #L3dde38.  call `d`(v1) @signature `Ll5/j;.d:(Z)V` @kind static;
  #L3dde3e.  goto L3dde18;
  #L3dde40.  v0:= v3.`m5.i$a.o` @type ^`java.util.Collection` @kind object;
  #L3dde44.  call temp:= `addAll`(v0, v4) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3dde4a.  v4:= temp;
  #L3dde4c.  return v4;
}
procedure `void` `clear`(`m5.i$a` v2 @kind this) @signature `Lm5/i$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3de0b4.  v0:= v2.`m5.i$a.o` @type ^`java.util.Collection` @kind object;
  #L3de0b8.  v1:= v2.`m5.i$a.p` @type ^`l5.k` @kind object;
  #L3de0bc.  call temp:= `f`(v0, v1) @signature `Lm5/t;.f:(Ljava/lang/Iterable;Ll5/k;)Z` @kind static;
  #L3de0c2.  return @kind void;
}
procedure `boolean` `contains`(`m5.i$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm5/i$a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dde60.  v0:= v1.`m5.i$a.o` @type ^`java.util.Collection` @kind object;
  #L3dde64.  call temp:= `c`(v0, v2) @signature `Lm5/i;.c:(Ljava/util/Collection;Ljava/lang/Object;)Z` @kind static;
  #L3dde6a.  v0:= temp;
  #L3dde6c.  if v0 == 0 then goto L3dde7e;
  #L3dde70.  v0:= v1.`m5.i$a.p` @type ^`l5.k` @kind object;
  #L3dde74.  call temp:= `apply`(v0, v2) @signature `Ll5/k;.apply:(Ljava/lang/Object;)Z` @kind interface;
  #L3dde7a.  v2:= temp;
  #L3dde7c.  return v2;
  #L3dde7e.  v2:= 0I;
  #L3dde80.  return v2;
}
procedure `boolean` `containsAll`(`m5.i$a` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lm5/i$a;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3dde94.  call temp:= `a`(v0, v1) @signature `Lm5/i;.a:(Ljava/util/Collection;Ljava/util/Collection;)Z` @kind static;
  #L3dde9a.  v1:= temp;
  #L3dde9c.  return v1;
}
procedure `boolean` `isEmpty`(`m5.i$a` v2 @kind this) @signature `Lm5/i$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ddeb0.  v0:= v2.`m5.i$a.o` @type ^`java.util.Collection` @kind object;
  #L3ddeb4.  v1:= v2.`m5.i$a.p` @type ^`l5.k` @kind object;
  #L3ddeb8.  call temp:= `a`(v0, v1) @signature `Lm5/t;.a:(Ljava/lang/Iterable;Ll5/k;)Z` @kind static;
  #L3ddebe.  v0:= temp;
  #L3ddec0.  v0:= v0 ^~ 1;
  #L3ddec4.  return v0;
}
procedure `java.util.Iterator` `iterator`(`m5.i$a` v2 @kind this) @signature `Lm5/i$a;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3de068.  v0:= v2.`m5.i$a.o` @type ^`java.util.Collection` @kind object;
  #L3de06c.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3de072.  v0:= temp @kind object;
  #L3de074.  v1:= v2.`m5.i$a.p` @type ^`l5.k` @kind object;
  #L3de078.  call temp:= `g`(v0, v1) @signature `Lm5/u;.g:(Ljava/util/Iterator;Ll5/k;)Lm5/s0;` @kind static;
  #L3de07e.  v0:= temp @kind object;
  #L3de080.  return v0 @kind object;
}
procedure `boolean` `remove`(`m5.i$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm5/i$a;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dded8.  call temp:= `contains`(v1, v2) @signature `Lm5/i$a;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ddede.  v0:= temp;
  #L3ddee0.  if v0 == 0 then goto L3ddef8;
  #L3ddee4.  v0:= v1.`m5.i$a.o` @type ^`java.util.Collection` @kind object;
  #L3ddee8.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Collection;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L3ddeee.  v2:= temp;
  #L3ddef0.  if v2 == 0 then goto L3ddef8;
  #L3ddef4.  v2:= 1I;
  #L3ddef6.  goto L3ddefa;
  #L3ddef8.  v2:= 0I;
  #L3ddefa.  return v2;
}
procedure `boolean` `removeAll`(`m5.i$a` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lm5/i$a;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ddf0c.  v0:= v4.`m5.i$a.o` @type ^`java.util.Collection` @kind object;
  #L3ddf10.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ddf16.  v0:= temp @kind object;
  #L3ddf18.  v1:= 0I;
  #L3ddf1a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ddf20.  v2:= temp;
  #L3ddf22.  if v2 == 0 then goto L3ddf54;
  #L3ddf26.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ddf2c.  v2:= temp @kind object;
  #L3ddf2e.  v3:= v4.`m5.i$a.p` @type ^`l5.k` @kind object;
  #L3ddf32.  call temp:= `apply`(v3, v2) @signature `Ll5/k;.apply:(Ljava/lang/Object;)Z` @kind interface;
  #L3ddf38.  v3:= temp;
  #L3ddf3a.  if v3 == 0 then goto L3ddf1a;
  #L3ddf3e.  call temp:= `contains`(v5, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3ddf44.  v2:= temp;
  #L3ddf46.  if v2 == 0 then goto L3ddf1a;
  #L3ddf4a.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3ddf50.  v1:= 1I;
  #L3ddf52.  goto L3ddf1a;
  #L3ddf54.  return v1;
}
procedure `boolean` `retainAll`(`m5.i$a` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lm5/i$a;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ddf68.  v0:= v4.`m5.i$a.o` @type ^`java.util.Collection` @kind object;
  #L3ddf6c.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ddf72.  v0:= temp @kind object;
  #L3ddf74.  v1:= 0I;
  #L3ddf76.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ddf7c.  v2:= temp;
  #L3ddf7e.  if v2 == 0 then goto L3ddfb0;
  #L3ddf82.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ddf88.  v2:= temp @kind object;
  #L3ddf8a.  v3:= v4.`m5.i$a.p` @type ^`l5.k` @kind object;
  #L3ddf8e.  call temp:= `apply`(v3, v2) @signature `Ll5/k;.apply:(Ljava/lang/Object;)Z` @kind interface;
  #L3ddf94.  v3:= temp;
  #L3ddf96.  if v3 == 0 then goto L3ddf76;
  #L3ddf9a.  call temp:= `contains`(v5, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3ddfa0.  v2:= temp;
  #L3ddfa2.  if v2 != 0 then goto L3ddf76;
  #L3ddfa6.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3ddfac.  v1:= 1I;
  #L3ddfae.  goto L3ddf76;
  #L3ddfb0.  return v1;
}
procedure `int` `size`(`m5.i$a` v4 @kind this) @signature `Lm5/i$a;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ddfc4.  v0:= v4.`m5.i$a.o` @type ^`java.util.Collection` @kind object;
  #L3ddfc8.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ddfce.  v0:= temp @kind object;
  #L3ddfd0.  v1:= 0I;
  #L3ddfd2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ddfd8.  v2:= temp;
  #L3ddfda.  if v2 == 0 then goto L3ddffc;
  #L3ddfde.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ddfe4.  v2:= temp @kind object;
  #L3ddfe6.  v3:= v4.`m5.i$a.p` @type ^`l5.k` @kind object;
  #L3ddfea.  call temp:= `apply`(v3, v2) @signature `Ll5/k;.apply:(Ljava/lang/Object;)Z` @kind interface;
  #L3ddff0.  v2:= temp;
  #L3ddff2.  if v2 == 0 then goto L3ddfd2;
  #L3ddff6.  v1:= v1 + 1;
  #L3ddffa.  goto L3ddfd2;
  #L3ddffc.  return v1;
}
procedure `java.lang.Object`[] `toArray`(`m5.i$a` v1 @kind this) @signature `Lm5/i$a;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3de010.  call temp:= `iterator`(v1) @signature `Lm5/i$a;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3de016.  v0:= temp @kind object;
  #L3de018.  call temp:= `i`(v0) @signature `Lm5/w;.i:(Ljava/util/Iterator;)Ljava/util/ArrayList;` @kind static;
  #L3de01e.  v0:= temp @kind object;
  #L3de020.  call temp:= `toArray`(v0) @signature `Ljava/util/ArrayList;.toArray:()[Ljava/lang/Object;` @kind virtual;
  #L3de026.  v0:= temp @kind object;
  #L3de028.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`m5.i$a` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lm5/i$a;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3de03c.  call temp:= `iterator`(v1) @signature `Lm5/i$a;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3de042.  v0:= temp @kind object;
  #L3de044.  call temp:= `i`(v0) @signature `Lm5/w;.i:(Ljava/util/Iterator;)Ljava/util/ArrayList;` @kind static;
  #L3de04a.  v0:= temp @kind object;
  #L3de04c.  call temp:= `toArray`(v0, v2) @signature `Ljava/util/ArrayList;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L3de052.  v2:= temp @kind object;
  #L3de054.  return v2 @kind object;
}
