record `m5.g` @kind class @AccessFlag FINAL extends `m5.h0` @kind class, `java.io.Serializable` @kind interface {
  `l5.f` `m5.g.o` @AccessFlag FINAL;
  `m5.h0` `m5.g.p` @AccessFlag FINAL;
}
procedure `void` `<init>`(`m5.g` v0 @kind this, `l5.f` v1 @kind object, `m5.h0` v2 @kind object) @signature `Lm5/g;.<init>:(Ll5/f;Lm5/h0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ddc84.  call `<init>`(v0) @signature `Lm5/h0;.<init>:()V` @kind direct;
  #L3ddc8a.  call temp:= `i`(v1) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3ddc90.  v1:= temp @kind object;
  #L3ddc92.  v1:= (`l5.f`) v1 @kind object;
  #L3ddc96.  v0.`m5.g.o` @type ^`l5.f` := v1 @kind object;
  #L3ddc9a.  call temp:= `i`(v2) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3ddca0.  v1:= temp @kind object;
  #L3ddca2.  v1:= (`m5.h0`) v1 @kind object;
  #L3ddca6.  v0.`m5.g.p` @type ^`m5.h0` := v1 @kind object;
  #L3ddcaa.  return @kind void;
}
procedure `int` `compare`(`m5.g` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lm5/g;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ddba4.  v0:= v2.`m5.g.p` @type ^`m5.h0` @kind object;
  #L3ddba8.  v1:= v2.`m5.g.o` @type ^`l5.f` @kind object;
  #L3ddbac.  call temp:= `apply`(v1, v3) @signature `Ll5/f;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ddbb2.  v3:= temp @kind object;
  #L3ddbb4.  v1:= v2.`m5.g.o` @type ^`l5.f` @kind object;
  #L3ddbb8.  call temp:= `apply`(v1, v4) @signature `Ll5/f;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ddbbe.  v4:= temp @kind object;
  #L3ddbc0.  call temp:= `compare`(v0, v3, v4) @signature `Lm5/h0;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind virtual;
  #L3ddbc6.  v3:= temp;
  #L3ddbc8.  return v3;
}
procedure `boolean` `equals`(`m5.g` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lm5/g;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ddb4c.  v0:= 1I;
  #L3ddb4e.  if v5 != v4 then goto L3ddb54;
  #L3ddb52.  return v0;
  #L3ddb54.  v1:= instanceof @variable v5 @type ^`m5.g` @kind boolean;
  #L3ddb58.  v2:= 0I;
  #L3ddb5a.  if v1 == 0 then goto L3ddb90;
  #L3ddb5e.  v5:= (`m5.g`) v5 @kind object;
  #L3ddb62.  v1:= v4.`m5.g.o` @type ^`l5.f` @kind object;
  #L3ddb66.  v3:= v5.`m5.g.o` @type ^`l5.f` @kind object;
  #L3ddb6a.  call temp:= `equals`(v1, v3) @signature `Ll5/f;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3ddb70.  v1:= temp;
  #L3ddb72.  if v1 == 0 then goto L3ddb8c;
  #L3ddb76.  v1:= v4.`m5.g.p` @type ^`m5.h0` @kind object;
  #L3ddb7a.  v5:= v5.`m5.g.p` @type ^`m5.h0` @kind object;
  #L3ddb7e.  call temp:= `equals`(v1, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ddb84.  v5:= temp;
  #L3ddb86.  if v5 == 0 then goto L3ddb8c;
  #L3ddb8a.  goto L3ddb8e;
  #L3ddb8c.  v0:= 0I;
  #L3ddb8e.  return v0;
  #L3ddb90.  return v2;
}
procedure `int` `hashCode`(`m5.g` v3 @kind this) @signature `Lm5/g;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ddbdc.  v0:= 2I;
  #L3ddbde.  v0:= new `java.lang.Object`[v0];
  #L3ddbe2.  v1:= v3.`m5.g.o` @type ^`l5.f` @kind object;
  #L3ddbe6.  v2:= 0I;
  #L3ddbe8.  v0[v2]:= v1 @kind object;
  #L3ddbec.  v1:= v3.`m5.g.p` @type ^`m5.h0` @kind object;
  #L3ddbf0.  v2:= 1I;
  #L3ddbf2.  v0[v2]:= v1 @kind object;
  #L3ddbf6.  call temp:= `b`(v0) @signature `Ll5/i;.b:([Ljava/lang/Object;)I` @kind static;
  #L3ddbfc.  v0:= temp;
  #L3ddbfe.  return v0;
}
procedure `java.lang.String` `toString`(`m5.g` v4 @kind this) @signature `Lm5/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ddc10.  v0:= v4.`m5.g.p` @type ^`m5.h0` @kind object;
  #L3ddc14.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3ddc1a.  v0:= temp @kind object;
  #L3ddc1c.  v1:= v4.`m5.g.o` @type ^`l5.f` @kind object;
  #L3ddc20.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3ddc26.  v1:= temp @kind object;
  #L3ddc28.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3ddc2e.  v2:= temp;
  #L3ddc30.  v2:= v2 + 13;
  #L3ddc34.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3ddc3a.  v3:= temp;
  #L3ddc3c.  v2:= v2 + v3 @kind int;
  #L3ddc3e.  v3:= new `java.lang.StringBuilder`;
  #L3ddc42.  call `<init>`(v3, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3ddc48.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ddc4e.  v0:= ".onResultOf(" @kind object;
  #L3ddc52.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ddc58.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ddc5e.  v0:= ")" @kind object;
  #L3ddc62.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ddc68.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ddc6e.  v0:= temp @kind object;
  #L3ddc70.  return v0 @kind object;
}
