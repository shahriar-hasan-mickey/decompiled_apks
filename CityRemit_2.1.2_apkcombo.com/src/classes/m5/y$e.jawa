record `m5.y$e` @kind class @AccessFlag  extends `java.util.AbstractCollection` @kind class {
  `java.util.Map` `m5.y$e.o` @AccessFlag FINAL;
}
procedure `void` `<init>`(`m5.y$e` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lm5/y$e;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e0d70.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L3e0d76.  call temp:= `i`(v1) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e0d7c.  v1:= temp @kind object;
  #L3e0d7e.  v1:= (`java.util.Map`) v1 @kind object;
  #L3e0d82.  v0.`m5.y$e.o` @type ^`java.util.Map` := v1 @kind object;
  #L3e0d86.  return @kind void;
}
procedure `java.util.Map` `b`(`m5.y$e` v1 @kind this) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @AccessFlag FINAL {
    temp;
    v0;

  #L3e0d58.  v0:= v1.`m5.y$e.o` @type ^`java.util.Map` @kind object;
  #L3e0d5c.  return v0 @kind object;
}
procedure `void` `clear`(`m5.y$e` v1 @kind this) @signature `Lm5/y$e;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e0d98.  call temp:= `b`(v1) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0d9e.  v0:= temp @kind object;
  #L3e0da0.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L3e0da6.  return @kind void;
}
procedure `boolean` `contains`(`m5.y$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm5/y$e;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e0ad4.  call temp:= `b`(v1) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0ada.  v0:= temp @kind object;
  #L3e0adc.  call temp:= `containsValue`(v0, v2) @signature `Ljava/util/Map;.containsValue:(Ljava/lang/Object;)Z` @kind interface;
  #L3e0ae2.  v2:= temp;
  #L3e0ae4.  return v2;
}
procedure `boolean` `isEmpty`(`m5.y$e` v1 @kind this) @signature `Lm5/y$e;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e0af8.  call temp:= `b`(v1) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0afe.  v0:= temp @kind object;
  #L3e0b00.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L3e0b06.  v0:= temp;
  #L3e0b08.  return v0;
}
procedure `java.util.Iterator` `iterator`(`m5.y$e` v1 @kind this) @signature `Lm5/y$e;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e0d24.  call temp:= `b`(v1) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0d2a.  v0:= temp @kind object;
  #L3e0d2c.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3e0d32.  v0:= temp @kind object;
  #L3e0d34.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e0d3a.  v0:= temp @kind object;
  #L3e0d3c.  call temp:= `k`(v0) @signature `Lm5/y;.k:(Ljava/util/Iterator;)Ljava/util/Iterator;` @kind static;
  #L3e0d42.  v0:= temp @kind object;
  #L3e0d44.  return v0 @kind object;
}
procedure `boolean` `remove`(`m5.y$e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lm5/y$e;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e0b1c.  call temp:= `remove`(v3, v4) @signature `Ljava/util/AbstractCollection;.remove:(Ljava/lang/Object;)Z` @kind super;
  #L3e0b22.  v4:= temp;
  #L3e0b24.  return v4;
  #L3e0b26.  call temp:= `b`(v3) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0b2c.  v0:= temp @kind object;
  #L3e0b2e.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3e0b34.  v0:= temp @kind object;
  #L3e0b36.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e0b3c.  v0:= temp @kind object;
  #L3e0b3e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e0b44.  v1:= temp;
  #L3e0b46.  if v1 == 0 then goto L3e0b84;
  #L3e0b4a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e0b50.  v1:= temp @kind object;
  #L3e0b52.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L3e0b56.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3e0b5c.  v2:= temp @kind object;
  #L3e0b5e.  call temp:= `a`(v4, v2) @signature `Ll5/i;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3e0b64.  v2:= temp;
  #L3e0b66.  if v2 == 0 then goto L3e0b3e;
  #L3e0b6a.  call temp:= `b`(v3) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0b70.  v4:= temp @kind object;
  #L3e0b72.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3e0b78.  v0:= temp @kind object;
  #L3e0b7a.  call temp:= `remove`(v4, v0) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3e0b80.  v4:= 1I;
  #L3e0b82.  return v4;
  #L3e0b84.  v4:= 0I;
  #L3e0b86.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L3e0b1c..L3e0b24] goto L3e0b26;
}
procedure `boolean` `removeAll`(`m5.y$e` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lm5/y$e;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e0ba8.  call temp:= `i`(v5) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e0bae.  v0:= temp @kind object;
  #L3e0bb0.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3e0bb4.  call temp:= `removeAll`(v4, v0) @signature `Ljava/util/AbstractCollection;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L3e0bba.  v5:= temp;
  #L3e0bbc.  return v5;
  #L3e0bbe.  call temp:= `f`() @signature `Lm5/p0;.f:()Ljava/util/HashSet;` @kind static;
  #L3e0bc4.  v0:= temp @kind object;
  #L3e0bc6.  call temp:= `b`(v4) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0bcc.  v1:= temp @kind object;
  #L3e0bce.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3e0bd4.  v1:= temp @kind object;
  #L3e0bd6.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e0bdc.  v1:= temp @kind object;
  #L3e0bde.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e0be4.  v2:= temp;
  #L3e0be6.  if v2 == 0 then goto L3e0c1a;
  #L3e0bea.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e0bf0.  v2:= temp @kind object;
  #L3e0bf2.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L3e0bf6.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3e0bfc.  v3:= temp @kind object;
  #L3e0bfe.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3e0c04.  v3:= temp;
  #L3e0c06.  if v3 == 0 then goto L3e0bde;
  #L3e0c0a.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3e0c10.  v2:= temp @kind object;
  #L3e0c12.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e0c18.  goto L3e0bde;
  #L3e0c1a.  call temp:= `b`(v4) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0c20.  v5:= temp @kind object;
  #L3e0c22.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L3e0c28.  v5:= temp @kind object;
  #L3e0c2a.  call temp:= `removeAll`(v5, v0) @signature `Ljava/util/Set;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3e0c30.  v5:= temp;
  #L3e0c32.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L3e0ba8..L3e0bbc] goto L3e0bbe;
}
procedure `boolean` `retainAll`(`m5.y$e` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lm5/y$e;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e0c54.  call temp:= `i`(v5) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e0c5a.  v0:= temp @kind object;
  #L3e0c5c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3e0c60.  call temp:= `retainAll`(v4, v0) @signature `Ljava/util/AbstractCollection;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L3e0c66.  v5:= temp;
  #L3e0c68.  return v5;
  #L3e0c6a.  call temp:= `f`() @signature `Lm5/p0;.f:()Ljava/util/HashSet;` @kind static;
  #L3e0c70.  v0:= temp @kind object;
  #L3e0c72.  call temp:= `b`(v4) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0c78.  v1:= temp @kind object;
  #L3e0c7a.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3e0c80.  v1:= temp @kind object;
  #L3e0c82.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e0c88.  v1:= temp @kind object;
  #L3e0c8a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e0c90.  v2:= temp;
  #L3e0c92.  if v2 == 0 then goto L3e0cc6;
  #L3e0c96.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e0c9c.  v2:= temp @kind object;
  #L3e0c9e.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L3e0ca2.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3e0ca8.  v3:= temp @kind object;
  #L3e0caa.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3e0cb0.  v3:= temp;
  #L3e0cb2.  if v3 == 0 then goto L3e0c8a;
  #L3e0cb6.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3e0cbc.  v2:= temp @kind object;
  #L3e0cbe.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e0cc4.  goto L3e0c8a;
  #L3e0cc6.  call temp:= `b`(v4) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0ccc.  v5:= temp @kind object;
  #L3e0cce.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L3e0cd4.  v5:= temp @kind object;
  #L3e0cd6.  call temp:= `retainAll`(v5, v0) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3e0cdc.  v5:= temp;
  #L3e0cde.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L3e0c54..L3e0c68] goto L3e0c6a;
}
procedure `int` `size`(`m5.y$e` v1 @kind this) @signature `Lm5/y$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e0d00.  call temp:= `b`(v1) @signature `Lm5/y$e;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0d06.  v0:= temp @kind object;
  #L3e0d08.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3e0d0e.  v0:= temp;
  #L3e0d10.  return v0;
}
