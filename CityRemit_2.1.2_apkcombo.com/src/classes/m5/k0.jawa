record `m5.k0` @kind class @AccessFlag FINAL extends `m5.r` @kind class {
  `java.lang.Object` `m5.k0.r` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `java.lang.Object`[] `m5.k0.s` @AccessFlag FINAL_TRANSIENT;
  `int` `m5.k0.t` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
global `m5.r` `@@m5.k0.u` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm5/k0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e1fe0.  v0:= new `m5.k0`;
  #L3e1fe4.  v1:= 0I;
  #L3e1fe6.  v2:= new `java.lang.Object`[v1];
  #L3e1fea.  v3:= 0I;
  #L3e1fec.  call `<init>`(v0, v3, v2, v1) @signature `Lm5/k0;.<init>:(Ljava/lang/Object;[Ljava/lang/Object;I)V` @kind direct;
  #L3e1ff2.  `@@m5.k0.u` @type ^`m5.r` := v0 @kind object;
  #L3e1ff6.  return @kind void;
}
procedure `void` `<init>`(`m5.k0` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object`[] v2 @kind object, `int` v3 ) @signature `Lm5/k0;.<init>:(Ljava/lang/Object;[Ljava/lang/Object;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3e2008.  call `<init>`(v0) @signature `Lm5/r;.<init>:()V` @kind direct;
  #L3e200e.  v0.`m5.k0.r` @type ^`java.lang.Object` := v1 @kind object;
  #L3e2012.  v0.`m5.k0.s` @type ^`java.lang.Object`[] := v2 @kind object;
  #L3e2016.  v0.`m5.k0.t` @type ^`int` := v3;
  #L3e201a.  return @kind void;
}
procedure `m5.k0` `l`(`int` v3 , `java.lang.Object`[] v4 @kind object) @signature `Lm5/k0;.l:(I[Ljava/lang/Object;)Lm5/k0;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3e1f68.  if v3 != 0 then goto L3e1f76;
  #L3e1f6c.  v3:= `@@m5.k0.u` @type ^`m5.r` @kind object;
  #L3e1f70.  v3:= (`m5.k0`) v3 @kind object;
  #L3e1f74.  return v3 @kind object;
  #L3e1f76.  v0:= 0I;
  #L3e1f78.  v1:= 1I;
  #L3e1f7a.  if v3 != v1 then goto L3e1fa6;
  #L3e1f7e.  v3:= v4[v0] @kind object;
  #L3e1f82.  call temp:= `requireNonNull`(v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1f88.  v0:= v4[v1] @kind object;
  #L3e1f8c.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1f92.  call `a`(v3, v0) @signature `Lm5/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L3e1f98.  v3:= new `m5.k0`;
  #L3e1f9c.  v0:= 0I;
  #L3e1f9e.  call `<init>`(v3, v0, v4, v1) @signature `Lm5/k0;.<init>:(Ljava/lang/Object;[Ljava/lang/Object;I)V` @kind direct;
  #L3e1fa4.  return v3 @kind object;
  #L3e1fa6.  v2:= length @variable v4;
  #L3e1fa8.  v1:= v2 ^> 1;
  #L3e1fac.  call temp:= `k`(v3, v1) @signature `Ll5/j;.k:(II)I` @kind static;
  #L3e1fb2.  call temp:= `y`(v3) @signature `Lm5/s;.y:(I)I` @kind static;
  #L3e1fb8.  v1:= temp;
  #L3e1fba.  call temp:= `m`(v4, v3, v1, v0) @signature `Lm5/k0;.m:([Ljava/lang/Object;III)Ljava/lang/Object;` @kind static;
  #L3e1fc0.  v0:= temp @kind object;
  #L3e1fc2.  v1:= new `m5.k0`;
  #L3e1fc6.  call `<init>`(v1, v0, v4, v3) @signature `Lm5/k0;.<init>:(Ljava/lang/Object;[Ljava/lang/Object;I)V` @kind direct;
  #L3e1fcc.  return v1 @kind object;
}
procedure `java.lang.Object` `m`(`java.lang.Object`[] v9 @kind object, `int` v10 , `int` v11 , `int` v12 ) @signature `Lm5/k0;.m:([Ljava/lang/Object;III)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3e1bac.  v0:= 1I;
  #L3e1bae.  if v10 != v0 then goto L3e1bd4;
  #L3e1bb2.  v10:= v9[v12] @kind object;
  #L3e1bb6.  call temp:= `requireNonNull`(v10) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1bbc.  v11:= v12 ^~ 1;
  #L3e1bc0.  v9:= v9[v11] @kind object;
  #L3e1bc4.  call temp:= `requireNonNull`(v9) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1bca.  call `a`(v10, v9) @signature `Lm5/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L3e1bd0.  v9:= 0I;
  #L3e1bd2.  return v9 @kind object;
  #L3e1bd4.  v0:= v11 + -1;
  #L3e1bd8.  v1:= 128I;
  #L3e1bdc.  v2:= 0I;
  #L3e1bde.  v3:= -1I;
  #L3e1be0.  if v11 > v1 then goto L3e1c64;
  #L3e1be4.  v11:= new `byte`[v11];
  #L3e1be8.  call `fill`(v11, v3) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L3e1bee.  if v2 >= v10 then goto L3e1c62;
  #L3e1bf2.  v1:= v2 * 2;
  #L3e1bf6.  v1:= v1 + v12 @kind int;
  #L3e1bf8.  v3:= v9[v1] @kind object;
  #L3e1bfc.  call temp:= `requireNonNull`(v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1c02.  v4:= v1 ^~ 1;
  #L3e1c06.  v4:= v9[v4] @kind object;
  #L3e1c0a.  call temp:= `requireNonNull`(v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1c10.  call `a`(v3, v4) @signature `Lm5/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L3e1c16.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e1c1c.  v5:= temp;
  #L3e1c1e.  call temp:= `a`(v5) @signature `Lm5/n;.a:(I)I` @kind static;
  #L3e1c24.  v5:= temp;
  #L3e1c26.  v5:= v5 ^& v0 @kind int;
  #L3e1c28.  v6:= v11[v5] @kind byte;
  #L3e1c2c.  v7:= 255I;
  #L3e1c30.  v6:= v6 ^& v7 @kind int;
  #L3e1c32.  if v6 != v7 then goto L3e1c42;
  #L3e1c36.  v1:= (`byte`) v1 @kind i2b;
  #L3e1c38.  v11[v5]:= v1 @kind byte;
  #L3e1c3c.  v2:= v2 + 1;
  #L3e1c40.  goto L3e1bee;
  #L3e1c42.  v7:= v9[v6] @kind object;
  #L3e1c46.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e1c4c.  v7:= temp;
  #L3e1c4e.  if v7 != 0 then goto L3e1c58;
  #L3e1c52.  v5:= v5 + 1;
  #L3e1c56.  goto L3e1c26;
  #L3e1c58.  call temp:= `n`(v3, v4, v9, v6) @signature `Lm5/k0;.n:(Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;I)Ljava/lang/IllegalArgumentException;` @kind static;
  #L3e1c5e.  v9:= temp @kind object;
  #L3e1c60.  throw v9;
  #L3e1c62.  return v11 @kind object;
  #L3e1c64.  v1:= 32768I;
  #L3e1c6a.  if v11 > v1 then goto L3e1cf0;
  #L3e1c6e.  v11:= new `short`[v11];
  #L3e1c72.  call `fill`(v11, v3) @signature `Ljava/util/Arrays;.fill:([SS)V` @kind static;
  #L3e1c78.  if v2 >= v10 then goto L3e1cee;
  #L3e1c7c.  v1:= v2 * 2;
  #L3e1c80.  v1:= v1 + v12 @kind int;
  #L3e1c82.  v3:= v9[v1] @kind object;
  #L3e1c86.  call temp:= `requireNonNull`(v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1c8c.  v4:= v1 ^~ 1;
  #L3e1c90.  v4:= v9[v4] @kind object;
  #L3e1c94.  call temp:= `requireNonNull`(v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1c9a.  call `a`(v3, v4) @signature `Lm5/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L3e1ca0.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e1ca6.  v5:= temp;
  #L3e1ca8.  call temp:= `a`(v5) @signature `Lm5/n;.a:(I)I` @kind static;
  #L3e1cae.  v5:= temp;
  #L3e1cb0.  v5:= v5 ^& v0 @kind int;
  #L3e1cb2.  v6:= v11[v5] @kind short;
  #L3e1cb6.  v7:= 65535I;
  #L3e1cbc.  v6:= v6 ^& v7 @kind int;
  #L3e1cbe.  if v6 != v7 then goto L3e1cce;
  #L3e1cc2.  v1:= (`short`) v1 @kind i2s;
  #L3e1cc4.  v11[v5]:= v1 @kind short;
  #L3e1cc8.  v2:= v2 + 1;
  #L3e1ccc.  goto L3e1c78;
  #L3e1cce.  v7:= v9[v6] @kind object;
  #L3e1cd2.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e1cd8.  v7:= temp;
  #L3e1cda.  if v7 != 0 then goto L3e1ce4;
  #L3e1cde.  v5:= v5 + 1;
  #L3e1ce2.  goto L3e1cb0;
  #L3e1ce4.  call temp:= `n`(v3, v4, v9, v6) @signature `Lm5/k0;.n:(Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;I)Ljava/lang/IllegalArgumentException;` @kind static;
  #L3e1cea.  v9:= temp @kind object;
  #L3e1cec.  throw v9;
  #L3e1cee.  return v11 @kind object;
  #L3e1cf0.  v11:= new `int`[v11];
  #L3e1cf4.  call `fill`(v11, v3) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L3e1cfa.  if v2 >= v10 then goto L3e1d66;
  #L3e1cfe.  v1:= v2 * 2;
  #L3e1d02.  v1:= v1 + v12 @kind int;
  #L3e1d04.  v4:= v9[v1] @kind object;
  #L3e1d08.  call temp:= `requireNonNull`(v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1d0e.  v5:= v1 ^~ 1;
  #L3e1d12.  v5:= v9[v5] @kind object;
  #L3e1d16.  call temp:= `requireNonNull`(v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1d1c.  call `a`(v4, v5) @signature `Lm5/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L3e1d22.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e1d28.  v6:= temp;
  #L3e1d2a.  call temp:= `a`(v6) @signature `Lm5/n;.a:(I)I` @kind static;
  #L3e1d30.  v6:= temp;
  #L3e1d32.  v6:= v6 ^& v0 @kind int;
  #L3e1d34.  v7:= v11[v6];
  #L3e1d38.  if v7 != v3 then goto L3e1d46;
  #L3e1d3c.  v11[v6]:= v1;
  #L3e1d40.  v2:= v2 + 1;
  #L3e1d44.  goto L3e1cfa;
  #L3e1d46.  v8:= v9[v7] @kind object;
  #L3e1d4a.  call temp:= `equals`(v4, v8) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e1d50.  v8:= temp;
  #L3e1d52.  if v8 != 0 then goto L3e1d5c;
  #L3e1d56.  v6:= v6 + 1;
  #L3e1d5a.  goto L3e1d32;
  #L3e1d5c.  call temp:= `n`(v4, v5, v9, v7) @signature `Lm5/k0;.n:(Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;I)Ljava/lang/IllegalArgumentException;` @kind static;
  #L3e1d62.  v9:= temp @kind object;
  #L3e1d64.  throw v9;
  #L3e1d66.  return v11 @kind object;
}
procedure `java.lang.IllegalArgumentException` `n`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object, `int` v6 ) @signature `Lm5/k0;.n:(Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;I)Ljava/lang/IllegalArgumentException;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3e1aec.  v0:= new `java.lang.IllegalArgumentException`;
  #L3e1af0.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3e1af6.  v3:= temp @kind object;
  #L3e1af8.  call temp:= `valueOf`(v4) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3e1afe.  v4:= temp @kind object;
  #L3e1b00.  v1:= v5[v6] @kind object;
  #L3e1b04.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3e1b0a.  v1:= temp @kind object;
  #L3e1b0c.  v6:= v6 ^~ 1;
  #L3e1b10.  v5:= v5[v6] @kind object;
  #L3e1b14.  call temp:= `valueOf`(v5) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3e1b1a.  v5:= temp @kind object;
  #L3e1b1c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3e1b22.  v6:= temp;
  #L3e1b24.  v6:= v6 + 39;
  #L3e1b28.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3e1b2e.  v2:= temp;
  #L3e1b30.  v6:= v6 + v2 @kind int;
  #L3e1b32.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3e1b38.  v2:= temp;
  #L3e1b3a.  v6:= v6 + v2 @kind int;
  #L3e1b3c.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3e1b42.  v2:= temp;
  #L3e1b44.  v6:= v6 + v2 @kind int;
  #L3e1b46.  v2:= new `java.lang.StringBuilder`;
  #L3e1b4a.  call `<init>`(v2, v6) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3e1b50.  v6:= "Multiple entries with same key: " @kind object;
  #L3e1b54.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1b5a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1b60.  v3:= "=" @kind object;
  #L3e1b64.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1b6a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1b70.  v4:= " and " @kind object;
  #L3e1b74.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1b7a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1b80.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1b86.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1b8c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e1b92.  v3:= temp @kind object;
  #L3e1b94.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e1b9a.  return v0 @kind object;
}
procedure `java.lang.Object` `o`(`java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object, `int` v6 , `int` v7 , `java.lang.Object` v8 @kind object) @signature `Lm5/k0;.o:(Ljava/lang/Object;[Ljava/lang/Object;IILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e1da8.  v0:= 0I;
  #L3e1daa.  if v8 != 0 then goto L3e1db0;
  #L3e1dae.  return v0 @kind object;
  #L3e1db0.  v1:= 1I;
  #L3e1db2.  if v6 != v1 then goto L3e1ddc;
  #L3e1db6.  v4:= v5[v7] @kind object;
  #L3e1dba.  call temp:= `requireNonNull`(v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1dc0.  call temp:= `equals`(v4, v8) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e1dc6.  v4:= temp;
  #L3e1dc8.  if v4 == 0 then goto L3e1dda;
  #L3e1dcc.  v4:= v7 ^~ 1;
  #L3e1dd0.  v0:= v5[v4] @kind object;
  #L3e1dd4.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1dda.  return v0 @kind object;
  #L3e1ddc.  if v4 != 0 then goto L3e1de2;
  #L3e1de0.  return v0 @kind object;
  #L3e1de2.  v6:= instanceof @variable v4 @type ^`byte`[] @kind boolean;
  #L3e1de6.  if v6 == 0 then goto L3e1e38;
  #L3e1dea.  v6:= v4 @kind object;
  #L3e1dec.  v6:= (`byte`[]) v6 @kind object;
  #L3e1df0.  v4:= length @variable v6;
  #L3e1df2.  v7:= v4 + -1;
  #L3e1df6.  call temp:= `hashCode`(v8) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e1dfc.  v4:= temp;
  #L3e1dfe.  call temp:= `a`(v4) @signature `Lm5/n;.a:(I)I` @kind static;
  #L3e1e04.  v4:= temp;
  #L3e1e06.  v4:= v4 ^& v7 @kind int;
  #L3e1e08.  v2:= v6[v4] @kind byte;
  #L3e1e0c.  v3:= 255I;
  #L3e1e10.  v2:= v2 ^& v3 @kind int;
  #L3e1e12.  if v2 != v3 then goto L3e1e18;
  #L3e1e16.  return v0 @kind object;
  #L3e1e18.  v3:= v5[v2] @kind object;
  #L3e1e1c.  call temp:= `equals`(v8, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e1e22.  v3:= temp;
  #L3e1e24.  if v3 == 0 then goto L3e1e32;
  #L3e1e28.  v4:= v2 ^~ 1;
  #L3e1e2c.  v4:= v5[v4] @kind object;
  #L3e1e30.  return v4 @kind object;
  #L3e1e32.  v4:= v4 + 1;
  #L3e1e36.  goto L3e1e06;
  #L3e1e38.  v6:= instanceof @variable v4 @type ^`short`[] @kind boolean;
  #L3e1e3c.  if v6 == 0 then goto L3e1e90;
  #L3e1e40.  v6:= v4 @kind object;
  #L3e1e42.  v6:= (`short`[]) v6 @kind object;
  #L3e1e46.  v4:= length @variable v6;
  #L3e1e48.  v7:= v4 + -1;
  #L3e1e4c.  call temp:= `hashCode`(v8) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e1e52.  v4:= temp;
  #L3e1e54.  call temp:= `a`(v4) @signature `Lm5/n;.a:(I)I` @kind static;
  #L3e1e5a.  v4:= temp;
  #L3e1e5c.  v4:= v4 ^& v7 @kind int;
  #L3e1e5e.  v2:= v6[v4] @kind short;
  #L3e1e62.  v3:= 65535I;
  #L3e1e68.  v2:= v2 ^& v3 @kind int;
  #L3e1e6a.  if v2 != v3 then goto L3e1e70;
  #L3e1e6e.  return v0 @kind object;
  #L3e1e70.  v3:= v5[v2] @kind object;
  #L3e1e74.  call temp:= `equals`(v8, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e1e7a.  v3:= temp;
  #L3e1e7c.  if v3 == 0 then goto L3e1e8a;
  #L3e1e80.  v4:= v2 ^~ 1;
  #L3e1e84.  v4:= v5[v4] @kind object;
  #L3e1e88.  return v4 @kind object;
  #L3e1e8a.  v4:= v4 + 1;
  #L3e1e8e.  goto L3e1e5c;
  #L3e1e90.  v4:= (`int`[]) v4 @kind object;
  #L3e1e94.  v6:= length @variable v4;
  #L3e1e96.  v6:= v6 - v1 @kind int;
  #L3e1e98.  call temp:= `hashCode`(v8) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e1e9e.  v7:= temp;
  #L3e1ea0.  call temp:= `a`(v7) @signature `Lm5/n;.a:(I)I` @kind static;
  #L3e1ea6.  v7:= temp;
  #L3e1ea8.  v7:= v7 ^& v6 @kind int;
  #L3e1eaa.  v2:= v4[v7];
  #L3e1eae.  v3:= -1I;
  #L3e1eb0.  if v2 != v3 then goto L3e1eb6;
  #L3e1eb4.  return v0 @kind object;
  #L3e1eb6.  v3:= v5[v2] @kind object;
  #L3e1eba.  call temp:= `equals`(v8, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e1ec0.  v3:= temp;
  #L3e1ec2.  if v3 == 0 then goto L3e1ed0;
  #L3e1ec6.  v4:= v2 ^~ 1;
  #L3e1eca.  v4:= v5[v4] @kind object;
  #L3e1ece.  return v4 @kind object;
  #L3e1ed0.  v7:= v7 + 1;
  #L3e1ed4.  goto L3e1ea8;
}
procedure `m5.s` `d`(`m5.k0` v4 @kind this) @signature `Lm5/k0;.d:()Lm5/s;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e1f10.  v0:= new `m5.k0$a`;
  #L3e1f14.  v1:= v4.`m5.k0.s` @type ^`java.lang.Object`[] @kind object;
  #L3e1f18.  v2:= v4.`m5.k0.t` @type ^`int`;
  #L3e1f1c.  v3:= 0I;
  #L3e1f1e.  call `<init>`(v0, v4, v1, v3, v2) @signature `Lm5/k0$a;.<init>:(Lm5/r;[Ljava/lang/Object;II)V` @kind direct;
  #L3e1f24.  return v0 @kind object;
}
procedure `m5.s` `e`(`m5.k0` v4 @kind this) @signature `Lm5/k0;.e:()Lm5/s;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e1f38.  v0:= new `m5.k0$c`;
  #L3e1f3c.  v1:= v4.`m5.k0.s` @type ^`java.lang.Object`[] @kind object;
  #L3e1f40.  v2:= v4.`m5.k0.t` @type ^`int`;
  #L3e1f44.  v3:= 0I;
  #L3e1f46.  call `<init>`(v0, v1, v3, v2) @signature `Lm5/k0$c;.<init>:([Ljava/lang/Object;II)V` @kind direct;
  #L3e1f4c.  v1:= new `m5.k0$b`;
  #L3e1f50.  call `<init>`(v1, v4, v0) @signature `Lm5/k0$b;.<init>:(Lm5/r;Lm5/q;)V` @kind direct;
  #L3e1f56.  return v1 @kind object;
}
procedure `m5.o` `f`(`m5.k0` v4 @kind this) @signature `Lm5/k0;.f:()Lm5/o;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e1ee8.  v0:= new `m5.k0$c`;
  #L3e1eec.  v1:= v4.`m5.k0.s` @type ^`java.lang.Object`[] @kind object;
  #L3e1ef0.  v2:= v4.`m5.k0.t` @type ^`int`;
  #L3e1ef4.  v3:= 1I;
  #L3e1ef6.  call `<init>`(v0, v1, v3, v2) @signature `Lm5/k0$c;.<init>:([Ljava/lang/Object;II)V` @kind direct;
  #L3e1efc.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`m5.k0` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lm5/k0;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e1d78.  v0:= v4.`m5.k0.r` @type ^`java.lang.Object` @kind object;
  #L3e1d7c.  v1:= v4.`m5.k0.s` @type ^`java.lang.Object`[] @kind object;
  #L3e1d80.  v2:= v4.`m5.k0.t` @type ^`int`;
  #L3e1d84.  v3:= 0I;
  #L3e1d86.  call temp:= `o`(v0, v1, v2, v3, v5) @signature `Lm5/k0;.o:(Ljava/lang/Object;[Ljava/lang/Object;IILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e1d8c.  v5:= temp @kind object;
  #L3e1d8e.  if v5 != 0 then goto L3e1d94;
  #L3e1d92.  v5:= 0I;
  #L3e1d94.  return v5 @kind object;
}
procedure `boolean` `h`(`m5.k0` v1 @kind this) @signature `Lm5/k0;.h:()Z` @AccessFlag  {
    temp;
    v0;

  #L3e1ac0.  v0:= 0I;
  #L3e1ac2.  return v0;
}
procedure `int` `size`(`m5.k0` v1 @kind this) @signature `Lm5/k0;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e1ad4.  v0:= v1.`m5.k0.t` @type ^`int`;
  #L3e1ad8.  return v0;
}
