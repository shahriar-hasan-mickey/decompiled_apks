record `m5.c0$a` @kind class @AccessFlag  extends `m5.c` @kind class {
  `l5.o` `m5.c0$a.t` @AccessFlag TRANSIENT;
}
procedure `void` `<init>`(`m5.c0$a` v0 @kind this, `java.util.Map` v1 @kind object, `l5.o` v2 @kind object) @signature `Lm5/c0$a;.<init>:(Ljava/util/Map;Ll5/o;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e1300.  call `<init>`(v0, v1) @signature `Lm5/c;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L3e1306.  call temp:= `i`(v2) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e130c.  v1:= temp @kind object;
  #L3e130e.  v1:= (`l5.o`) v1 @kind object;
  #L3e1312.  v0.`m5.c0$a.t` @type ^`l5.o` := v1 @kind object;
  #L3e1316.  return @kind void;
}
procedure `java.util.Map` `c`(`m5.c0$a` v1 @kind this) @signature `Lm5/c0$a;.c:()Ljava/util/Map;` @AccessFlag  {
    temp;
    v0;

  #L3e12c8.  call temp:= `q`(v1) @signature `Lm5/d;.q:()Ljava/util/Map;` @kind virtual;
  #L3e12ce.  v0:= temp @kind object;
  #L3e12d0.  return v0 @kind object;
}
procedure `java.util.Set` `d`(`m5.c0$a` v1 @kind this) @signature `Lm5/c0$a;.d:()Ljava/util/Set;` @AccessFlag  {
    temp;
    v0;

  #L3e12e4.  call temp:= `r`(v1) @signature `Lm5/d;.r:()Ljava/util/Set;` @kind virtual;
  #L3e12ea.  v0:= temp @kind object;
  #L3e12ec.  return v0 @kind object;
}
procedure `java.util.Collection` `o`(`m5.c0$a` v1 @kind this) @signature `Lm5/c0$a;.o:()Ljava/util/Collection;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L3e1288.  call temp:= `x`(v1) @signature `Lm5/c0$a;.x:()Ljava/util/List;` @kind virtual;
  #L3e128e.  v0:= temp @kind object;
  #L3e1290.  return v0 @kind object;
}
procedure `java.util.List` `x`(`m5.c0$a` v1 @kind this) @signature `Lm5/c0$a;.x:()Ljava/util/List;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3e12a4.  v0:= v1.`m5.c0$a.t` @type ^`l5.o` @kind object;
  #L3e12a8.  call temp:= `get`(v0) @signature `Ll5/o;.get:()Ljava/lang/Object;` @kind interface;
  #L3e12ae.  v0:= temp @kind object;
  #L3e12b0.  v0:= (`java.util.List`) v0 @kind object;
  #L3e12b4.  return v0 @kind object;
}
