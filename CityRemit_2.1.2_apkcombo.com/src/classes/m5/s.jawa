record `m5.s` @kind class @AccessFlag PUBLIC_ABSTRACT extends `m5.o` @kind class, `java.util.Set` @kind interface {
  `m5.q` `m5.s.p` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`m5.s` v0 @kind this) @signature `Lm5/s;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3dfc58.  call `<init>`(v0) @signature `Lm5/o;.<init>:()V` @kind direct;
  #L3dfc5e.  return @kind void;
}
procedure `m5.s` `G`(`int` v13 , `java.lang.Object`[] v14 @kind object) @signature `Lm5/s;.G:(I[Ljava/lang/Object;)Lm5/s;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3dfa24.  if v13 == 0 then goto L3dfb12;
  #L3dfa28.  v0:= 0I;
  #L3dfa2a.  v1:= 1I;
  #L3dfa2c.  if v13 == v1 then goto L3dfafe;
  #L3dfa30.  call temp:= `y`(v13) @signature `Lm5/s;.y:(I)I` @kind static;
  #L3dfa36.  v2:= temp;
  #L3dfa38.  v6:= new `java.lang.Object`[v2];
  #L3dfa3c.  v7:= v2 + -1;
  #L3dfa40.  v3:= 0I;
  #L3dfa42.  v5:= 0I;
  #L3dfa44.  v8:= 0I;
  #L3dfa46.  if v3 >= v13 then goto L3dfa9c;
  #L3dfa4a.  v4:= v14[v3] @kind object;
  #L3dfa4e.  call temp:= `a`(v4, v3) @signature `Lm5/g0;.a:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L3dfa54.  v4:= temp @kind object;
  #L3dfa56.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3dfa5c.  v9:= temp;
  #L3dfa5e.  call temp:= `a`(v9) @signature `Lm5/n;.a:(I)I` @kind static;
  #L3dfa64.  v10:= temp;
  #L3dfa66.  v11:= v10 ^& v7 @kind int;
  #L3dfa6a.  v12:= v6[v11] @kind object;
  #L3dfa6e.  if v12 != 0 then goto L3dfa84;
  #L3dfa72.  v10:= v8 + 1;
  #L3dfa76.  v14[v8]:= v4 @kind object;
  #L3dfa7a.  v6[v11]:= v4 @kind object;
  #L3dfa7e.  v5:= v5 + v9 @kind int;
  #L3dfa80.  v8:= v10;
  #L3dfa82.  goto L3dfa90;
  #L3dfa84.  call temp:= `equals`(v12, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3dfa8a.  v11:= temp;
  #L3dfa8c.  if v11 == 0 then goto L3dfa96;
  #L3dfa90.  v3:= v3 + 1;
  #L3dfa94.  goto L3dfa46;
  #L3dfa96.  v10:= v10 + 1;
  #L3dfa9a.  goto L3dfa66;
  #L3dfa9c.  v3:= 0I;
  #L3dfa9e.  call `fill`(v14, v8, v13, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L3dfaa4.  if v8 != v1 then goto L3dfabe;
  #L3dfaa8.  v13:= v14[v0] @kind object;
  #L3dfaac.  call temp:= `requireNonNull`(v13) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3dfab2.  v14:= new `m5.q0`;
  #L3dfab6.  call `<init>`(v14, v13) @signature `Lm5/q0;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3dfabc.  return v14 @kind object;
  #L3dfabe.  call temp:= `y`(v8) @signature `Lm5/s;.y:(I)I` @kind static;
  #L3dfac4.  v13:= temp;
  #L3dfac6.  v2:= v2 / 2;
  #L3dfaca.  if v13 >= v2 then goto L3dfad8;
  #L3dface.  call temp:= `G`(v8, v14) @signature `Lm5/s;.G:(I[Ljava/lang/Object;)Lm5/s;` @kind static;
  #L3dfad4.  v13:= temp @kind object;
  #L3dfad6.  return v13 @kind object;
  #L3dfad8.  v13:= length @variable v14;
  #L3dfada.  call temp:= `c0`(v8, v13) @signature `Lm5/s;.c0:(II)Z` @kind static;
  #L3dfae0.  v13:= temp;
  #L3dfae2.  if v13 == 0 then goto L3dfaee;
  #L3dfae6.  call temp:= `copyOf`(v14, v8) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3dfaec.  v14:= temp @kind object;
  #L3dfaee.  v4:= v14 @kind object;
  #L3dfaf0.  v13:= new `m5.l0`;
  #L3dfaf4.  v3:= v13 @kind object;
  #L3dfaf6.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Lm5/l0;.<init>:([Ljava/lang/Object;I[Ljava/lang/Object;II)V` @kind direct;
  #L3dfafc.  return v13 @kind object;
  #L3dfafe.  v13:= v14[v0] @kind object;
  #L3dfb02.  call temp:= `requireNonNull`(v13) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3dfb08.  call temp:= `Y`(v13) @signature `Lm5/s;.Y:(Ljava/lang/Object;)Lm5/s;` @kind static;
  #L3dfb0e.  v13:= temp @kind object;
  #L3dfb10.  return v13 @kind object;
  #L3dfb12.  call temp:= `T`() @signature `Lm5/s;.T:()Lm5/s;` @kind static;
  #L3dfb18.  v13:= temp @kind object;
  #L3dfb1a.  return v13 @kind object;
}
procedure `m5.s` `N`(`java.util.Collection` v2 @kind object) @signature `Lm5/s;.N:(Ljava/util/Collection;)Lm5/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3dfb7c.  v0:= instanceof @variable v2 @type ^`m5.s` @kind boolean;
  #L3dfb80.  if v0 == 0 then goto L3dfba0;
  #L3dfb84.  v0:= instanceof @variable v2 @type ^`java.util.SortedSet` @kind boolean;
  #L3dfb88.  if v0 != 0 then goto L3dfba0;
  #L3dfb8c.  v0:= v2 @kind object;
  #L3dfb8e.  v0:= (`m5.s`) v0 @kind object;
  #L3dfb92.  call temp:= `p`(v0) @signature `Lm5/o;.p:()Z` @kind virtual;
  #L3dfb98.  v1:= temp;
  #L3dfb9a.  if v1 != 0 then goto L3dfba0;
  #L3dfb9e.  return v0 @kind object;
  #L3dfba0.  call temp:= `toArray`(v2) @signature `Ljava/util/Collection;.toArray:()[Ljava/lang/Object;` @kind interface;
  #L3dfba6.  v2:= temp @kind object;
  #L3dfba8.  v0:= length @variable v2;
  #L3dfbaa.  call temp:= `G`(v0, v2) @signature `Lm5/s;.G:(I[Ljava/lang/Object;)Lm5/s;` @kind static;
  #L3dfbb0.  v2:= temp @kind object;
  #L3dfbb2.  return v2 @kind object;
}
procedure `m5.s` `O`(`java.lang.Object`[] v2 @kind object) @signature `Lm5/s;.O:([Ljava/lang/Object;)Lm5/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3dfb2c.  v0:= length @variable v2;
  #L3dfb2e.  if v0 == 0 then goto L3dfb60;
  #L3dfb32.  v1:= 1I;
  #L3dfb34.  if v0 == v1 then goto L3dfb50;
  #L3dfb38.  v0:= length @variable v2;
  #L3dfb3a.  call temp:= `clone`(v2) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3dfb40.  v2:= temp @kind object;
  #L3dfb42.  v2:= (`java.lang.Object`[]) v2 @kind object;
  #L3dfb46.  call temp:= `G`(v0, v2) @signature `Lm5/s;.G:(I[Ljava/lang/Object;)Lm5/s;` @kind static;
  #L3dfb4c.  v2:= temp @kind object;
  #L3dfb4e.  return v2 @kind object;
  #L3dfb50.  v0:= 0I;
  #L3dfb52.  v2:= v2[v0] @kind object;
  #L3dfb56.  call temp:= `Y`(v2) @signature `Lm5/s;.Y:(Ljava/lang/Object;)Lm5/s;` @kind static;
  #L3dfb5c.  v2:= temp @kind object;
  #L3dfb5e.  return v2 @kind object;
  #L3dfb60.  call temp:= `T`() @signature `Lm5/s;.T:()Lm5/s;` @kind static;
  #L3dfb66.  v2:= temp @kind object;
  #L3dfb68.  return v2 @kind object;
}
procedure `m5.s` `T`() @signature `Lm5/s;.T:()Lm5/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3dfbc4.  v0:= `@@m5.l0.w` @type ^`m5.l0` @kind object;
  #L3dfbc8.  return v0 @kind object;
}
procedure `m5.s` `Y`(`java.lang.Object` v1 @kind object) @signature `Lm5/s;.Y:(Ljava/lang/Object;)Lm5/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3dfbdc.  v0:= new `m5.q0`;
  #L3dfbe0.  call `<init>`(v0, v1) @signature `Lm5/q0;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3dfbe6.  return v0 @kind object;
}
procedure `m5.s` `a0`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lm5/s;.a0:(Ljava/lang/Object;Ljava/lang/Object;)Lm5/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3dfbf8.  v0:= 2I;
  #L3dfbfa.  v1:= new `java.lang.Object`[v0];
  #L3dfbfe.  v2:= 0I;
  #L3dfc00.  v1[v2]:= v3 @kind object;
  #L3dfc04.  v3:= 1I;
  #L3dfc06.  v1[v3]:= v4 @kind object;
  #L3dfc0a.  call temp:= `G`(v0, v1) @signature `Lm5/s;.G:(I[Ljava/lang/Object;)Lm5/s;` @kind static;
  #L3dfc10.  v3:= temp @kind object;
  #L3dfc12.  return v3 @kind object;
}
procedure `m5.s` `b0`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lm5/s;.b0:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lm5/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3dfc24.  v0:= 3I;
  #L3dfc26.  v1:= new `java.lang.Object`[v0];
  #L3dfc2a.  v2:= 0I;
  #L3dfc2c.  v1[v2]:= v3 @kind object;
  #L3dfc30.  v3:= 1I;
  #L3dfc32.  v1[v3]:= v4 @kind object;
  #L3dfc36.  v3:= 2I;
  #L3dfc38.  v1[v3]:= v5 @kind object;
  #L3dfc3c.  call temp:= `G`(v0, v1) @signature `Lm5/s;.G:(I[Ljava/lang/Object;)Lm5/s;` @kind static;
  #L3dfc42.  v3:= temp @kind object;
  #L3dfc44.  return v3 @kind object;
}
procedure `boolean` `c0`(`int` v1 , `int` v2 ) @signature `Lm5/s;.c0:(II)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3df908.  v0:= v2 ^> 1;
  #L3df90c.  v2:= v2 ^> 2;
  #L3df910.  v0:= v0 + v2 @kind int;
  #L3df912.  if v1 >= v0 then goto L3df91a;
  #L3df916.  v1:= 1I;
  #L3df918.  goto L3df91c;
  #L3df91a.  v1:= 0I;
  #L3df91c.  return v1;
}
procedure `int` `y`(`int` v6 ) @signature `Lm5/s;.y:(I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3df930.  v0:= 2I;
  #L3df932.  call temp:= `max`(v6, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3df938.  v6:= temp;
  #L3df93a.  v0:= 1I;
  #L3df93c.  v1:= 751619276I;
  #L3df942.  if v6 >= v1 then goto L3df978;
  #L3df946.  v1:= v6 + -1;
  #L3df94a.  call temp:= `highestOneBit`(v1) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L3df950.  v1:= temp;
  #L3df952.  v0:= v1 ^< 1;
  #L3df956.  v1:= (`double`) v0 @kind i2d;
  #L3df958.  v3:= 0.7D;
  #L3df962.  v1:= v1 * v3 @kind double;
  #L3df966.  v3:= (`double`) v6 @kind i2d;
  #L3df968.  v5:= dcmpg(v1, v3);
  #L3df96c.  if v5 >= 0 then goto L3df976;
  #L3df970.  v0:= v0 ^< 1;
  #L3df974.  goto L3df956;
  #L3df976.  return v0;
  #L3df978.  v1:= 2.0F;
  #L3df97c.  if v6 >= v1 then goto L3df982;
  #L3df980.  goto L3df984;
  #L3df982.  v0:= 0I;
  #L3df984.  v6:= "collection too large" @kind object;
  #L3df988.  call `e`(v0, v6) @signature `Ll5/j;.e:(ZLjava/lang/Object;)V` @kind static;
  #L3df98e.  return v1;
}
procedure `m5.q` `Q`(`m5.s` v1 @kind this) @signature `Lm5/s;.Q:()Lm5/q;` @AccessFlag  {
    temp;
    v0;

  #L3dfa00.  call temp:= `toArray`(v1) @signature `Lm5/o;.toArray:()[Ljava/lang/Object;` @kind virtual;
  #L3dfa06.  v0:= temp @kind object;
  #L3dfa08.  call temp:= `y`(v0) @signature `Lm5/q;.y:([Ljava/lang/Object;)Lm5/q;` @kind static;
  #L3dfa0e.  v0:= temp @kind object;
  #L3dfa10.  return v0 @kind object;
}
procedure `boolean` `S`(`m5.s` v1 @kind this) @signature `Lm5/s;.S:()Z` @AccessFlag  {
    temp;
    v0;

  #L3df8f4.  v0:= 0I;
  #L3df8f6.  return v0;
}
procedure `m5.q` `b`(`m5.s` v1 @kind this) @signature `Lm5/s;.b:()Lm5/q;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df9d8.  v0:= v1.`m5.s.p` @type ^`m5.q` @kind object;
  #L3df9dc.  if v0 != 0 then goto L3df9ec;
  #L3df9e0.  call temp:= `Q`(v1) @signature `Lm5/s;.Q:()Lm5/q;` @kind virtual;
  #L3df9e6.  v0:= temp @kind object;
  #L3df9e8.  v1.`m5.s.p` @type ^`m5.q` := v0 @kind object;
  #L3df9ec.  return v0 @kind object;
}
procedure `boolean` `equals`(`m5.s` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lm5/s;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3df894.  if v3 != v2 then goto L3df89c;
  #L3df898.  v3:= 1I;
  #L3df89a.  return v3;
  #L3df89c.  v0:= instanceof @variable v3 @type ^`m5.s` @kind boolean;
  #L3df8a0.  if v0 == 0 then goto L3df8da;
  #L3df8a4.  call temp:= `S`(v2) @signature `Lm5/s;.S:()Z` @kind virtual;
  #L3df8aa.  v0:= temp;
  #L3df8ac.  if v0 == 0 then goto L3df8da;
  #L3df8b0.  v0:= v3 @kind object;
  #L3df8b2.  v0:= (`m5.s`) v0 @kind object;
  #L3df8b6.  call temp:= `S`(v0) @signature `Lm5/s;.S:()Z` @kind virtual;
  #L3df8bc.  v0:= temp;
  #L3df8be.  if v0 == 0 then goto L3df8da;
  #L3df8c2.  call temp:= `hashCode`(v2) @signature `Lm5/s;.hashCode:()I` @kind virtual;
  #L3df8c8.  v0:= temp;
  #L3df8ca.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3df8d0.  v1:= temp;
  #L3df8d2.  if v0 == v1 then goto L3df8da;
  #L3df8d6.  v3:= 0I;
  #L3df8d8.  return v3;
  #L3df8da.  call temp:= `a`(v2, v3) @signature `Lm5/p0;.a:(Ljava/util/Set;Ljava/lang/Object;)Z` @kind static;
  #L3df8e0.  v3:= temp;
  #L3df8e2.  return v3;
}
procedure `int` `hashCode`(`m5.s` v1 @kind this) @signature `Lm5/s;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df9a0.  call temp:= `d`(v1) @signature `Lm5/p0;.d:(Ljava/util/Set;)I` @kind static;
  #L3df9a6.  v0:= temp;
  #L3df9a8.  return v0;
}
procedure `java.util.Iterator` `iterator`(`m5.s` v1 @kind this) @signature `Lm5/s;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3df9bc.  call temp:= `u`(v1) @signature `Lm5/o;.u:()Lm5/s0;` @kind virtual;
  #L3df9c2.  v0:= temp @kind object;
  #L3df9c4.  return v0 @kind object;
}
