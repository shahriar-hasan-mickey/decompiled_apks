record `m5.d$j` @kind class @AccessFlag  extends `java.util.AbstractCollection` @kind class {
  `java.lang.Object` `m5.d$j.o` @AccessFlag FINAL;
  `java.util.Collection` `m5.d$j.p` @AccessFlag ;
  `m5.d$j` `m5.d$j.q` @AccessFlag FINAL;
  `java.util.Collection` `m5.d$j.r` @AccessFlag FINAL;
  `m5.d` `m5.d$j.s` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m5.d$j` v0 @kind this, `m5.d` v1 @kind object, `java.lang.Object` v2 @kind object, `java.util.Collection` v3 @kind object, `m5.d$j` v4 @kind object) @signature `Lm5/d$j;.<init>:(Lm5/d;Ljava/lang/Object;Ljava/util/Collection;Lm5/d$j;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3dcf6c.  v0.`m5.d$j.s` @type ^`m5.d` := v1 @kind object;
  #L3dcf70.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L3dcf76.  v0.`m5.d$j.o` @type ^`java.lang.Object` := v2 @kind object;
  #L3dcf7a.  v0.`m5.d$j.p` @type ^`java.util.Collection` := v3 @kind object;
  #L3dcf7e.  v0.`m5.d$j.q` @type ^`m5.d$j` := v4 @kind object;
  #L3dcf82.  if v4 != 0 then goto L3dcf8a;
  #L3dcf86.  v1:= 0I;
  #L3dcf88.  goto L3dcf92;
  #L3dcf8a.  call temp:= `h`(v4) @signature `Lm5/d$j;.h:()Ljava/util/Collection;` @kind virtual;
  #L3dcf90.  v1:= temp @kind object;
  #L3dcf92.  v0.`m5.d$j.r` @type ^`java.util.Collection` := v1 @kind object;
  #L3dcf96.  return @kind void;
}
procedure `boolean` `add`(`m5.d$j` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lm5/d$j;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dcc9c.  call `n`(v2) @signature `Lm5/d$j;.n:()V` @kind virtual;
  #L3dcca2.  v0:= v2.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcca6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3dccac.  v0:= temp;
  #L3dccae.  v1:= v2.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dccb2.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dccb8.  v3:= temp;
  #L3dccba.  if v3 == 0 then goto L3dccd2;
  #L3dccbe.  v1:= v2.`m5.d$j.s` @type ^`m5.d` @kind object;
  #L3dccc2.  call temp:= `j`(v1) @signature `Lm5/d;.j:(Lm5/d;)I` @kind static;
  #L3dccc8.  if v0 == 0 then goto L3dccd2;
  #L3dcccc.  call `b`(v2) @signature `Lm5/d$j;.b:()V` @kind virtual;
  #L3dccd2.  return v3;
}
procedure `boolean` `addAll`(`m5.d$j` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lm5/d$j;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3dcce4.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3dccea.  v0:= temp;
  #L3dccec.  if v0 == 0 then goto L3dccf4;
  #L3dccf0.  v4:= 0I;
  #L3dccf2.  return v4;
  #L3dccf4.  call temp:= `size`(v3) @signature `Lm5/d$j;.size:()I` @kind virtual;
  #L3dccfa.  v0:= temp;
  #L3dccfc.  v1:= v3.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcd00.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3dcd06.  v4:= temp;
  #L3dcd08.  if v4 == 0 then goto L3dcd2e;
  #L3dcd0c.  v1:= v3.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcd10.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3dcd16.  v1:= temp;
  #L3dcd18.  v2:= v3.`m5.d$j.s` @type ^`m5.d` @kind object;
  #L3dcd1c.  v1:= v1 - v0 @kind int;
  #L3dcd1e.  call temp:= `l`(v2, v1) @signature `Lm5/d;.l:(Lm5/d;I)I` @kind static;
  #L3dcd24.  if v0 != 0 then goto L3dcd2e;
  #L3dcd28.  call `b`(v3) @signature `Lm5/d$j;.b:()V` @kind virtual;
  #L3dcd2e.  return v4;
}
procedure `void` `b`(`m5.d$j` v3 @kind this) @signature `Lm5/d$j;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3dcfa8.  v0:= v3.`m5.d$j.q` @type ^`m5.d$j` @kind object;
  #L3dcfac.  if v0 == 0 then goto L3dcfb8;
  #L3dcfb0.  call `b`(v0) @signature `Lm5/d$j;.b:()V` @kind virtual;
  #L3dcfb6.  goto L3dcfd2;
  #L3dcfb8.  v0:= v3.`m5.d$j.s` @type ^`m5.d` @kind object;
  #L3dcfbc.  call temp:= `h`(v0) @signature `Lm5/d;.h:(Lm5/d;)Ljava/util/Map;` @kind static;
  #L3dcfc2.  v0:= temp @kind object;
  #L3dcfc4.  v1:= v3.`m5.d$j.o` @type ^`java.lang.Object` @kind object;
  #L3dcfc8.  v2:= v3.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcfcc.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3dcfd2.  return @kind void;
}
procedure `void` `clear`(`m5.d$j` v2 @kind this) @signature `Lm5/d$j;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dcfe4.  call temp:= `size`(v2) @signature `Lm5/d$j;.size:()I` @kind virtual;
  #L3dcfea.  v0:= temp;
  #L3dcfec.  if v0 != 0 then goto L3dcff2;
  #L3dcff0.  return @kind void;
  #L3dcff2.  v1:= v2.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcff6.  call `clear`(v1) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L3dcffc.  v1:= v2.`m5.d$j.s` @type ^`m5.d` @kind object;
  #L3dd000.  call temp:= `m`(v1, v0) @signature `Lm5/d;.m:(Lm5/d;I)I` @kind static;
  #L3dd006.  call `p`(v2) @signature `Lm5/d$j;.p:()V` @kind virtual;
  #L3dd00c.  return @kind void;
}
procedure `boolean` `contains`(`m5.d$j` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm5/d$j;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dcd40.  call `n`(v1) @signature `Lm5/d$j;.n:()V` @kind virtual;
  #L3dcd46.  v0:= v1.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcd4a.  call temp:= `contains`(v0, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3dcd50.  v2:= temp;
  #L3dcd52.  return v2;
}
procedure `boolean` `containsAll`(`m5.d$j` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lm5/d$j;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dcd64.  call `n`(v1) @signature `Lm5/d$j;.n:()V` @kind virtual;
  #L3dcd6a.  v0:= v1.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcd6e.  call temp:= `containsAll`(v0, v2) @signature `Ljava/util/Collection;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3dcd74.  v2:= temp;
  #L3dcd76.  return v2;
}
procedure `boolean` `equals`(`m5.d$j` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm5/d$j;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dcd88.  if v2 != v1 then goto L3dcd90;
  #L3dcd8c.  v2:= 1I;
  #L3dcd8e.  return v2;
  #L3dcd90.  call `n`(v1) @signature `Lm5/d$j;.n:()V` @kind virtual;
  #L3dcd96.  v0:= v1.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcd9a.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Collection;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3dcda0.  v2:= temp;
  #L3dcda2.  return v2;
}
procedure `m5.d$j` `f`(`m5.d$j` v1 @kind this) @signature `Lm5/d$j;.f:()Lm5/d$j;` @AccessFlag  {
    temp;
    v0;

  #L3dcf54.  v0:= v1.`m5.d$j.q` @type ^`m5.d$j` @kind object;
  #L3dcf58.  return v0 @kind object;
}
procedure `java.util.Collection` `h`(`m5.d$j` v1 @kind this) @signature `Lm5/d$j;.h:()Ljava/util/Collection;` @AccessFlag  {
    temp;
    v0;

  #L3dcf18.  v0:= v1.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcf1c.  return v0 @kind object;
}
procedure `int` `hashCode`(`m5.d$j` v1 @kind this) @signature `Lm5/d$j;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dce94.  call `n`(v1) @signature `Lm5/d$j;.n:()V` @kind virtual;
  #L3dce9a.  v0:= v1.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dce9e.  call temp:= `hashCode`(v0) @signature `Ljava/util/Collection;.hashCode:()I` @kind interface;
  #L3dcea4.  v0:= temp;
  #L3dcea6.  return v0;
}
procedure `java.util.Iterator` `iterator`(`m5.d$j` v1 @kind this) @signature `Lm5/d$j;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dcf30.  call `n`(v1) @signature `Lm5/d$j;.n:()V` @kind virtual;
  #L3dcf36.  v0:= new `m5.d$j$a`;
  #L3dcf3a.  call `<init>`(v0, v1) @signature `Lm5/d$j$a;.<init>:(Lm5/d$j;)V` @kind direct;
  #L3dcf40.  return v0 @kind object;
}
procedure `java.lang.Object` `l`(`m5.d$j` v1 @kind this) @signature `Lm5/d$j;.l:()Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L3dcedc.  v0:= v1.`m5.d$j.o` @type ^`java.lang.Object` @kind object;
  #L3dcee0.  return v0 @kind object;
}
procedure `void` `n`(`m5.d$j` v2 @kind this) @signature `Lm5/d$j;.n:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3dd020.  v0:= v2.`m5.d$j.q` @type ^`m5.d$j` @kind object;
  #L3dd024.  if v0 == 0 then goto L3dd050;
  #L3dd028.  call `n`(v0) @signature `Lm5/d$j;.n:()V` @kind virtual;
  #L3dd02e.  v0:= v2.`m5.d$j.q` @type ^`m5.d$j` @kind object;
  #L3dd032.  call temp:= `h`(v0) @signature `Lm5/d$j;.h:()Ljava/util/Collection;` @kind virtual;
  #L3dd038.  v0:= temp @kind object;
  #L3dd03a.  v1:= v2.`m5.d$j.r` @type ^`java.util.Collection` @kind object;
  #L3dd03e.  if v0 != v1 then goto L3dd044;
  #L3dd042.  goto L3dd084;
  #L3dd044.  v0:= new `java.util.ConcurrentModificationException`;
  #L3dd048.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L3dd04e.  throw v0;
  #L3dd050.  v0:= v2.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dd054.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3dd05a.  v0:= temp;
  #L3dd05c.  if v0 == 0 then goto L3dd084;
  #L3dd060.  v0:= v2.`m5.d$j.s` @type ^`m5.d` @kind object;
  #L3dd064.  call temp:= `h`(v0) @signature `Lm5/d;.h:(Lm5/d;)Ljava/util/Map;` @kind static;
  #L3dd06a.  v0:= temp @kind object;
  #L3dd06c.  v1:= v2.`m5.d$j.o` @type ^`java.lang.Object` @kind object;
  #L3dd070.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3dd076.  v0:= temp @kind object;
  #L3dd078.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3dd07c.  if v0 == 0 then goto L3dd084;
  #L3dd080.  v2.`m5.d$j.p` @type ^`java.util.Collection` := v0 @kind object;
  #L3dd084.  return @kind void;
}
procedure `void` `p`(`m5.d$j` v2 @kind this) @signature `Lm5/d$j;.p:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3dd098.  v0:= v2.`m5.d$j.q` @type ^`m5.d$j` @kind object;
  #L3dd09c.  if v0 == 0 then goto L3dd0a8;
  #L3dd0a0.  call `p`(v0) @signature `Lm5/d$j;.p:()V` @kind virtual;
  #L3dd0a6.  goto L3dd0ce;
  #L3dd0a8.  v0:= v2.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dd0ac.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3dd0b2.  v0:= temp;
  #L3dd0b4.  if v0 == 0 then goto L3dd0ce;
  #L3dd0b8.  v0:= v2.`m5.d$j.s` @type ^`m5.d` @kind object;
  #L3dd0bc.  call temp:= `h`(v0) @signature `Lm5/d;.h:(Lm5/d;)Ljava/util/Map;` @kind static;
  #L3dd0c2.  v0:= temp @kind object;
  #L3dd0c4.  v1:= v2.`m5.d$j.o` @type ^`java.lang.Object` @kind object;
  #L3dd0c8.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3dd0ce.  return @kind void;
}
procedure `boolean` `remove`(`m5.d$j` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm5/d$j;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dcdb4.  call `n`(v1) @signature `Lm5/d$j;.n:()V` @kind virtual;
  #L3dcdba.  v0:= v1.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcdbe.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Collection;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L3dcdc4.  v2:= temp;
  #L3dcdc6.  if v2 == 0 then goto L3dcdda;
  #L3dcdca.  v0:= v1.`m5.d$j.s` @type ^`m5.d` @kind object;
  #L3dcdce.  call temp:= `k`(v0) @signature `Lm5/d;.k:(Lm5/d;)I` @kind static;
  #L3dcdd4.  call `p`(v1) @signature `Lm5/d$j;.p:()V` @kind virtual;
  #L3dcdda.  return v2;
}
procedure `boolean` `removeAll`(`m5.d$j` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lm5/d$j;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3dcdec.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3dcdf2.  v0:= temp;
  #L3dcdf4.  if v0 == 0 then goto L3dcdfc;
  #L3dcdf8.  v4:= 0I;
  #L3dcdfa.  return v4;
  #L3dcdfc.  call temp:= `size`(v3) @signature `Lm5/d$j;.size:()I` @kind virtual;
  #L3dce02.  v0:= temp;
  #L3dce04.  v1:= v3.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dce08.  call temp:= `removeAll`(v1, v4) @signature `Ljava/util/Collection;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3dce0e.  v4:= temp;
  #L3dce10.  if v4 == 0 then goto L3dce32;
  #L3dce14.  v1:= v3.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dce18.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3dce1e.  v1:= temp;
  #L3dce20.  v2:= v3.`m5.d$j.s` @type ^`m5.d` @kind object;
  #L3dce24.  v1:= v1 - v0 @kind int;
  #L3dce26.  call temp:= `l`(v2, v1) @signature `Lm5/d;.l:(Lm5/d;I)I` @kind static;
  #L3dce2c.  call `p`(v3) @signature `Lm5/d$j;.p:()V` @kind virtual;
  #L3dce32.  return v4;
}
procedure `boolean` `retainAll`(`m5.d$j` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lm5/d$j;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3dce44.  call temp:= `i`(v4) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3dce4a.  call temp:= `size`(v3) @signature `Lm5/d$j;.size:()I` @kind virtual;
  #L3dce50.  v0:= temp;
  #L3dce52.  v1:= v3.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dce56.  call temp:= `retainAll`(v1, v4) @signature `Ljava/util/Collection;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3dce5c.  v4:= temp;
  #L3dce5e.  if v4 == 0 then goto L3dce80;
  #L3dce62.  v1:= v3.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dce66.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3dce6c.  v1:= temp;
  #L3dce6e.  v2:= v3.`m5.d$j.s` @type ^`m5.d` @kind object;
  #L3dce72.  v1:= v1 - v0 @kind int;
  #L3dce74.  call temp:= `l`(v2, v1) @signature `Lm5/d;.l:(Lm5/d;I)I` @kind static;
  #L3dce7a.  call `p`(v3) @signature `Lm5/d$j;.p:()V` @kind virtual;
  #L3dce80.  return v4;
}
procedure `int` `size`(`m5.d$j` v1 @kind this) @signature `Lm5/d$j;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dceb8.  call `n`(v1) @signature `Lm5/d$j;.n:()V` @kind virtual;
  #L3dcebe.  v0:= v1.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcec2.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3dcec8.  v0:= temp;
  #L3dceca.  return v0;
}
procedure `java.lang.String` `toString`(`m5.d$j` v1 @kind this) @signature `Lm5/d$j;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dcef4.  call `n`(v1) @signature `Lm5/d$j;.n:()V` @kind virtual;
  #L3dcefa.  v0:= v1.`m5.d$j.p` @type ^`java.util.Collection` @kind object;
  #L3dcefe.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3dcf04.  v0:= temp @kind object;
  #L3dcf06.  return v0 @kind object;
}
