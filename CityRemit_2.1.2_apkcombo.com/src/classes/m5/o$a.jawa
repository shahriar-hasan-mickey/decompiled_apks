record `m5.o$a` @kind class @AccessFlag ABSTRACT extends `m5.o$b` @kind class {
  `java.lang.Object`[] `m5.o$a.a` @AccessFlag ;
  `int` `m5.o$a.b` @AccessFlag ;
  `boolean` `m5.o$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`m5.o$a` v1 @kind this, `int` v2 ) @signature `Lm5/o$a;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3de7d0.  call `<init>`(v1) @signature `Lm5/o$b;.<init>:()V` @kind direct;
  #L3de7d6.  v0:= "initialCapacity" @kind object;
  #L3de7da.  call temp:= `b`(v2, v0) @signature `Lm5/h;.b:(ILjava/lang/String;)I` @kind static;
  #L3de7e0.  v2:= new `java.lang.Object`[v2];
  #L3de7e4.  v1.`m5.o$a.a` @type ^`java.lang.Object`[] := v2 @kind object;
  #L3de7e8.  v2:= 0I;
  #L3de7ea.  v1.`m5.o$a.b` @type ^`int` := v2;
  #L3de7ee.  return @kind void;
}
procedure `void` `e`(`m5.o$a` v3 @kind this, `int` v4 ) @signature `Lm5/o$a;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3de800.  v0:= v3.`m5.o$a.a` @type ^`java.lang.Object`[] @kind object;
  #L3de804.  v1:= length @variable v0;
  #L3de806.  v2:= 0I;
  #L3de808.  if v1 >= v4 then goto L3de828;
  #L3de80c.  v1:= length @variable v0;
  #L3de80e.  call temp:= `c`(v1, v4) @signature `Lm5/o$b;.c:(II)I` @kind static;
  #L3de814.  v4:= temp;
  #L3de816.  call temp:= `copyOf`(v0, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3de81c.  v4:= temp @kind object;
  #L3de81e.  v3.`m5.o$a.a` @type ^`java.lang.Object`[] := v4 @kind object;
  #L3de822.  v3.`m5.o$a.c` @type ^`boolean` := v2 @kind boolean;
  #L3de826.  goto L3de842;
  #L3de828.  v4:= v3.`m5.o$a.c` @type ^`boolean` @kind boolean;
  #L3de82c.  if v4 == 0 then goto L3de842;
  #L3de830.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3de836.  v4:= temp @kind object;
  #L3de838.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L3de83c.  v3.`m5.o$a.a` @type ^`java.lang.Object`[] := v4 @kind object;
  #L3de840.  goto L3de822;
  #L3de842.  return @kind void;
}
procedure `m5.o$b` `b`(`m5.o$a` v3 @kind this, `java.lang.Iterable` v4 @kind object) @signature `Lm5/o$a;.b:(Ljava/lang/Iterable;)Lm5/o$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3de774.  v0:= instanceof @variable v4 @type ^`java.util.Collection` @kind boolean;
  #L3de778.  if v0 == 0 then goto L3de7b8;
  #L3de77c.  v0:= v4 @kind object;
  #L3de77e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3de782.  v1:= v3.`m5.o$a.b` @type ^`int`;
  #L3de786.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3de78c.  v2:= temp;
  #L3de78e.  v1:= v1 + v2 @kind int;
  #L3de790.  call `e`(v3, v1) @signature `Lm5/o$a;.e:(I)V` @kind direct;
  #L3de796.  v1:= instanceof @variable v0 @type ^`m5.o` @kind boolean;
  #L3de79a.  if v1 == 0 then goto L3de7b8;
  #L3de79e.  v0:= (`m5.o`) v0 @kind object;
  #L3de7a2.  v4:= v3.`m5.o$a.a` @type ^`java.lang.Object`[] @kind object;
  #L3de7a6.  v1:= v3.`m5.o$a.b` @type ^`int`;
  #L3de7aa.  call temp:= `f`(v0, v4, v1) @signature `Lm5/o;.f:([Ljava/lang/Object;I)I` @kind virtual;
  #L3de7b0.  v4:= temp;
  #L3de7b2.  v3.`m5.o$a.b` @type ^`int` := v4;
  #L3de7b6.  return v3 @kind object;
  #L3de7b8.  call temp:= `b`(v3, v4) @signature `Lm5/o$b;.b:(Ljava/lang/Iterable;)Lm5/o$b;` @kind super;
  #L3de7be.  return v3 @kind object;
}
procedure `m5.o$a` `d`(`m5.o$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lm5/o$a;.d:(Ljava/lang/Object;)Lm5/o$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3de738.  call temp:= `i`(v4) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3de73e.  v0:= v3.`m5.o$a.b` @type ^`int`;
  #L3de742.  v0:= v0 + 1;
  #L3de746.  call `e`(v3, v0) @signature `Lm5/o$a;.e:(I)V` @kind direct;
  #L3de74c.  v0:= v3.`m5.o$a.a` @type ^`java.lang.Object`[] @kind object;
  #L3de750.  v1:= v3.`m5.o$a.b` @type ^`int`;
  #L3de754.  v2:= v1 + 1;
  #L3de758.  v3.`m5.o$a.b` @type ^`int` := v2;
  #L3de75c.  v0[v1]:= v4 @kind object;
  #L3de760.  return v3 @kind object;
}
