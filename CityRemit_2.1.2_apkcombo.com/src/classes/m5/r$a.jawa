record `m5.r$a` @kind class @AccessFlag PUBLIC {
  `java.util.Comparator` `m5.r$a.a` @AccessFlag ;
  `java.lang.Object`[] `m5.r$a.b` @AccessFlag ;
  `int` `m5.r$a.c` @AccessFlag ;
  `boolean` `m5.r$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`m5.r$a` v1 @kind this) @signature `Lm5/r$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3df414.  v0:= 4I;
  #L3df416.  call `<init>`(v1, v0) @signature `Lm5/r$a;.<init>:(I)V` @kind direct;
  #L3df41c.  return @kind void;
}
procedure `void` `<init>`(`m5.r$a` v0 @kind this, `int` v1 ) @signature `Lm5/r$a;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3df430.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3df436.  v1:= v1 * 2;
  #L3df43a.  v1:= new `java.lang.Object`[v1];
  #L3df43e.  v0.`m5.r$a.b` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3df442.  v1:= 0I;
  #L3df444.  v0.`m5.r$a.c` @type ^`int` := v1;
  #L3df448.  v0.`m5.r$a.d` @type ^`boolean` := v1 @kind boolean;
  #L3df44c.  return @kind void;
}
procedure `void` `c`(`m5.r$a` v2 @kind this, `int` v3 ) @signature `Lm5/r$a;.c:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3df460.  v3:= v3 * 2;
  #L3df464.  v0:= v2.`m5.r$a.b` @type ^`java.lang.Object`[] @kind object;
  #L3df468.  v1:= length @variable v0;
  #L3df46a.  if v3 <= v1 then goto L3df48a;
  #L3df46e.  v1:= length @variable v0;
  #L3df470.  call temp:= `c`(v1, v3) @signature `Lm5/o$b;.c:(II)I` @kind static;
  #L3df476.  v3:= temp;
  #L3df478.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3df47e.  v3:= temp @kind object;
  #L3df480.  v2.`m5.r$a.b` @type ^`java.lang.Object`[] := v3 @kind object;
  #L3df484.  v3:= 0I;
  #L3df486.  v2.`m5.r$a.d` @type ^`boolean` := v3 @kind boolean;
  #L3df48a.  return @kind void;
}
procedure `m5.r` `a`(`m5.r$a` v1 @kind this) @signature `Lm5/r$a;.a:()Lm5/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df2f4.  call temp:= `b`(v1) @signature `Lm5/r$a;.b:()Lm5/r;` @kind virtual;
  #L3df2fa.  v0:= temp @kind object;
  #L3df2fc.  return v0 @kind object;
}
procedure `m5.r` `b`(`m5.r$a` v2 @kind this) @signature `Lm5/r$a;.b:()Lm5/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3df310.  call `g`(v2) @signature `Lm5/r$a;.g:()V` @kind virtual;
  #L3df316.  v0:= 1I;
  #L3df318.  v2.`m5.r$a.d` @type ^`boolean` := v0 @kind boolean;
  #L3df31c.  v0:= v2.`m5.r$a.c` @type ^`int`;
  #L3df320.  v1:= v2.`m5.r$a.b` @type ^`java.lang.Object`[] @kind object;
  #L3df324.  call temp:= `l`(v0, v1) @signature `Lm5/k0;.l:(I[Ljava/lang/Object;)Lm5/k0;` @kind static;
  #L3df32a.  v0:= temp @kind object;
  #L3df32c.  return v0 @kind object;
}
procedure `m5.r$a` `d`(`m5.r$a` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lm5/r$a;.d:(Ljava/lang/Object;Ljava/lang/Object;)Lm5/r$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3df340.  v0:= v3.`m5.r$a.c` @type ^`int`;
  #L3df344.  v0:= v0 + 1;
  #L3df348.  call `c`(v3, v0) @signature `Lm5/r$a;.c:(I)V` @kind direct;
  #L3df34e.  call `a`(v4, v5) @signature `Lm5/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L3df354.  v0:= v3.`m5.r$a.b` @type ^`java.lang.Object`[] @kind object;
  #L3df358.  v1:= v3.`m5.r$a.c` @type ^`int`;
  #L3df35c.  v2:= v1 * 2;
  #L3df360.  v0[v2]:= v4 @kind object;
  #L3df364.  v4:= v1 * 2;
  #L3df368.  v4:= v4 + 1;
  #L3df36c.  v0[v4]:= v5 @kind object;
  #L3df370.  v1:= v1 + 1;
  #L3df374.  v3.`m5.r$a.c` @type ^`int` := v1;
  #L3df378.  return v3 @kind object;
}
procedure `m5.r$a` `e`(`m5.r$a` v1 @kind this, `java.util.Map$Entry` v2 @kind object) @signature `Lm5/r$a;.e:(Ljava/util/Map$Entry;)Lm5/r$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df38c.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3df392.  v0:= temp @kind object;
  #L3df394.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3df39a.  v2:= temp @kind object;
  #L3df39c.  call temp:= `d`(v1, v0, v2) @signature `Lm5/r$a;.d:(Ljava/lang/Object;Ljava/lang/Object;)Lm5/r$a;` @kind virtual;
  #L3df3a2.  v2:= temp @kind object;
  #L3df3a4.  return v2 @kind object;
}
procedure `m5.r$a` `f`(`m5.r$a` v2 @kind this, `java.lang.Iterable` v3 @kind object) @signature `Lm5/r$a;.f:(Ljava/lang/Iterable;)Lm5/r$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3df3b8.  v0:= instanceof @variable v3 @type ^`java.util.Collection` @kind boolean;
  #L3df3bc.  if v0 == 0 then goto L3df3da;
  #L3df3c0.  v0:= v2.`m5.r$a.c` @type ^`int`;
  #L3df3c4.  v1:= v3 @kind object;
  #L3df3c6.  v1:= (`java.util.Collection`) v1 @kind object;
  #L3df3ca.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3df3d0.  v1:= temp;
  #L3df3d2.  v0:= v0 + v1 @kind int;
  #L3df3d4.  call `c`(v2, v0) @signature `Lm5/r$a;.c:(I)V` @kind direct;
  #L3df3da.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3df3e0.  v3:= temp @kind object;
  #L3df3e2.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3df3e8.  v0:= temp;
  #L3df3ea.  if v0 == 0 then goto L3df402;
  #L3df3ee.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3df3f4.  v0:= temp @kind object;
  #L3df3f6.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L3df3fa.  call temp:= `e`(v2, v0) @signature `Lm5/r$a;.e:(Ljava/util/Map$Entry;)Lm5/r$a;` @kind virtual;
  #L3df400.  goto L3df3e2;
  #L3df402.  return v2 @kind object;
}
procedure `void` `g`(`m5.r$a` v7 @kind this) @signature `Lm5/r$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3df49c.  v0:= v7.`m5.r$a.a` @type ^`java.util.Comparator` @kind object;
  #L3df4a0.  if v0 == 0 then goto L3df570;
  #L3df4a4.  v0:= v7.`m5.r$a.d` @type ^`boolean` @kind boolean;
  #L3df4a8.  if v0 == 0 then goto L3df4c4;
  #L3df4ac.  v0:= v7.`m5.r$a.b` @type ^`java.lang.Object`[] @kind object;
  #L3df4b0.  v1:= v7.`m5.r$a.c` @type ^`int`;
  #L3df4b4.  v1:= v1 * 2;
  #L3df4b8.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3df4be.  v0:= temp @kind object;
  #L3df4c0.  v7.`m5.r$a.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L3df4c4.  v0:= v7.`m5.r$a.c` @type ^`int`;
  #L3df4c8.  v0:= new `java.util.Map$Entry`[v0];
  #L3df4cc.  v1:= 0I;
  #L3df4ce.  v2:= 0I;
  #L3df4d0.  v3:= v7.`m5.r$a.c` @type ^`int`;
  #L3df4d4.  if v2 >= v3 then goto L3df510;
  #L3df4d8.  v3:= new `java.util.AbstractMap$SimpleImmutableEntry`;
  #L3df4dc.  v4:= v7.`m5.r$a.b` @type ^`java.lang.Object`[] @kind object;
  #L3df4e0.  v5:= v2 * 2;
  #L3df4e4.  v4:= v4[v5] @kind object;
  #L3df4e8.  call temp:= `requireNonNull`(v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3df4ee.  v6:= v7.`m5.r$a.b` @type ^`java.lang.Object`[] @kind object;
  #L3df4f2.  v5:= v5 + 1;
  #L3df4f6.  v5:= v6[v5] @kind object;
  #L3df4fa.  call temp:= `requireNonNull`(v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3df500.  call `<init>`(v3, v4, v5) @signature `Ljava/util/AbstractMap$SimpleImmutableEntry;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L3df506.  v0[v2]:= v3 @kind object;
  #L3df50a.  v2:= v2 + 1;
  #L3df50e.  goto L3df4d0;
  #L3df510.  v2:= v7.`m5.r$a.a` @type ^`java.util.Comparator` @kind object;
  #L3df514.  call temp:= `a`(v2) @signature `Lm5/h0;.a:(Ljava/util/Comparator;)Lm5/h0;` @kind static;
  #L3df51a.  v2:= temp @kind object;
  #L3df51c.  call temp:= `j`() @signature `Lm5/y;.j:()Ll5/f;` @kind static;
  #L3df522.  v4:= temp @kind object;
  #L3df524.  call temp:= `c`(v2, v4) @signature `Lm5/h0;.c:(Ll5/f;)Lm5/h0;` @kind virtual;
  #L3df52a.  v2:= temp @kind object;
  #L3df52c.  call `sort`(v0, v1, v3, v2) @signature `Ljava/util/Arrays;.sort:([Ljava/lang/Object;IILjava/util/Comparator;)V` @kind static;
  #L3df532.  v2:= v7.`m5.r$a.c` @type ^`int`;
  #L3df536.  if v1 >= v2 then goto L3df570;
  #L3df53a.  v2:= v7.`m5.r$a.b` @type ^`java.lang.Object`[] @kind object;
  #L3df53e.  v3:= v1 * 2;
  #L3df542.  v4:= v0[v1] @kind object;
  #L3df546.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3df54c.  v4:= temp @kind object;
  #L3df54e.  v2[v3]:= v4 @kind object;
  #L3df552.  v2:= v7.`m5.r$a.b` @type ^`java.lang.Object`[] @kind object;
  #L3df556.  v3:= v3 + 1;
  #L3df55a.  v4:= v0[v1] @kind object;
  #L3df55e.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3df564.  v4:= temp @kind object;
  #L3df566.  v2[v3]:= v4 @kind object;
  #L3df56a.  v1:= v1 + 1;
  #L3df56e.  goto L3df532;
  #L3df570.  return @kind void;
}
