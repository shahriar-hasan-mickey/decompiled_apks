record `m5.r` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Map` @kind interface, `java.io.Serializable` @kind interface {
  `m5.s` `m5.r.o` @AccessFlag PRIVATE_TRANSIENT;
  `m5.s` `m5.r.p` @AccessFlag PRIVATE_TRANSIENT;
  `m5.o` `m5.r.q` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<clinit>`() @signature `Lm5/r;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L3df830.  return @kind void;
}
procedure `void` `<init>`(`m5.r` v0 @kind this) @signature `Lm5/r;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3df844.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3df84a.  return @kind void;
}
procedure `m5.r$a` `a`() @signature `Lm5/r;.a:()Lm5/r$a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3df7c4.  v0:= new `m5.r$a`;
  #L3df7c8.  call `<init>`(v0) @signature `Lm5/r$a;.<init>:()V` @kind direct;
  #L3df7ce.  return v0 @kind object;
}
procedure `m5.r` `b`(`java.lang.Iterable` v2 @kind object) @signature `Lm5/r;.b:(Ljava/lang/Iterable;)Lm5/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3df720.  v0:= instanceof @variable v2 @type ^`java.util.Collection` @kind boolean;
  #L3df724.  if v0 == 0 then goto L3df738;
  #L3df728.  v0:= v2 @kind object;
  #L3df72a.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3df72e.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3df734.  v0:= temp;
  #L3df736.  goto L3df73a;
  #L3df738.  v0:= 4I;
  #L3df73a.  v1:= new `m5.r$a`;
  #L3df73e.  call `<init>`(v1, v0) @signature `Lm5/r$a;.<init>:(I)V` @kind direct;
  #L3df744.  call temp:= `f`(v1, v2) @signature `Lm5/r$a;.f:(Ljava/lang/Iterable;)Lm5/r$a;` @kind virtual;
  #L3df74a.  call temp:= `a`(v1) @signature `Lm5/r$a;.a:()Lm5/r;` @kind virtual;
  #L3df750.  v2:= temp @kind object;
  #L3df752.  return v2 @kind object;
}
procedure `m5.r` `c`(`java.util.Map` v2 @kind object) @signature `Lm5/r;.c:(Ljava/util/Map;)Lm5/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3df764.  v0:= instanceof @variable v2 @type ^`m5.r` @kind boolean;
  #L3df768.  if v0 == 0 then goto L3df788;
  #L3df76c.  v0:= instanceof @variable v2 @type ^`java.util.SortedMap` @kind boolean;
  #L3df770.  if v0 != 0 then goto L3df788;
  #L3df774.  v0:= v2 @kind object;
  #L3df776.  v0:= (`m5.r`) v0 @kind object;
  #L3df77a.  call temp:= `h`(v0) @signature `Lm5/r;.h:()Z` @kind virtual;
  #L3df780.  v1:= temp;
  #L3df782.  if v1 != 0 then goto L3df788;
  #L3df786.  return v0 @kind object;
  #L3df788.  call temp:= `entrySet`(v2) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3df78e.  v2:= temp @kind object;
  #L3df790.  call temp:= `b`(v2) @signature `Lm5/r;.b:(Ljava/lang/Iterable;)Lm5/r;` @kind static;
  #L3df796.  v2:= temp @kind object;
  #L3df798.  return v2 @kind object;
}
procedure `m5.r` `j`() @signature `Lm5/r;.j:()Lm5/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3df7ac.  v0:= `@@m5.k0.u` @type ^`m5.r` @kind object;
  #L3df7b0.  return v0 @kind object;
}
procedure `void` `clear`(`m5.r` v1 @kind this) @signature `Lm5/r;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3df85c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3df860.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3df866.  throw v0;
}
procedure `boolean` `containsKey`(`m5.r` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm5/r;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3df584.  call temp:= `get`(v0, v1) @signature `Lm5/r;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3df58a.  v1:= temp @kind object;
  #L3df58c.  if v1 == 0 then goto L3df594;
  #L3df590.  v1:= 1I;
  #L3df592.  goto L3df596;
  #L3df594.  v1:= 0I;
  #L3df596.  return v1;
}
procedure `boolean` `containsValue`(`m5.r` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm5/r;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df5a8.  call temp:= `k`(v1) @signature `Lm5/r;.k:()Lm5/o;` @kind virtual;
  #L3df5ae.  v0:= temp @kind object;
  #L3df5b0.  call temp:= `contains`(v0, v2) @signature `Lm5/o;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3df5b6.  v2:= temp;
  #L3df5b8.  return v2;
}
procedure `m5.s` `d`() @signature `Lm5/r;.d:()Lm5/s;` @AccessFlag ABSTRACT {

  # return;
}
procedure `m5.s` `e`() @signature `Lm5/r;.e:()Lm5/s;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Set` `entrySet`(`m5.r` v1 @kind this) @signature `Lm5/r;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3df6c0.  call temp:= `g`(v1) @signature `Lm5/r;.g:()Lm5/s;` @kind virtual;
  #L3df6c6.  v0:= temp @kind object;
  #L3df6c8.  return v0 @kind object;
}
procedure `boolean` `equals`(`m5.r` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm5/r;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3df5cc.  call temp:= `c`(v0, v1) @signature `Lm5/y;.c:(Ljava/util/Map;Ljava/lang/Object;)Z` @kind static;
  #L3df5d2.  v1:= temp;
  #L3df5d4.  return v1;
}
procedure `m5.o` `f`() @signature `Lm5/r;.f:()Lm5/o;` @AccessFlag ABSTRACT {

  # return;
}
procedure `m5.s` `g`(`m5.r` v1 @kind this) @signature `Lm5/r;.g:()Lm5/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df7e0.  v0:= v1.`m5.r.o` @type ^`m5.s` @kind object;
  #L3df7e4.  if v0 != 0 then goto L3df7f4;
  #L3df7e8.  call temp:= `d`(v1) @signature `Lm5/r;.d:()Lm5/s;` @kind virtual;
  #L3df7ee.  v0:= temp @kind object;
  #L3df7f0.  v1.`m5.r.o` @type ^`m5.s` := v0 @kind object;
  #L3df7f4.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`java.lang.Object` v0 @kind object) @signature `Lm5/r;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getOrDefault`(`m5.r` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lm5/r;.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3df630.  call temp:= `get`(v0, v1) @signature `Lm5/r;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3df636.  v1:= temp @kind object;
  #L3df638.  if v1 == 0 then goto L3df63e;
  #L3df63c.  return v1 @kind object;
  #L3df63e.  return v2 @kind object;
}
procedure `boolean` `h`() @signature `Lm5/r;.h:()Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`m5.r` v1 @kind this) @signature `Lm5/r;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df60c.  call temp:= `g`(v1) @signature `Lm5/r;.g:()Lm5/s;` @kind virtual;
  #L3df612.  v0:= temp @kind object;
  #L3df614.  call temp:= `d`(v0) @signature `Lm5/p0;.d:(Ljava/util/Set;)I` @kind static;
  #L3df61a.  v0:= temp;
  #L3df61c.  return v0;
}
procedure `m5.s` `i`(`m5.r` v1 @kind this) @signature `Lm5/r;.i:()Lm5/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df808.  v0:= v1.`m5.r.p` @type ^`m5.s` @kind object;
  #L3df80c.  if v0 != 0 then goto L3df81c;
  #L3df810.  call temp:= `e`(v1) @signature `Lm5/r;.e:()Lm5/s;` @kind virtual;
  #L3df816.  v0:= temp @kind object;
  #L3df818.  v1.`m5.r.p` @type ^`m5.s` := v0 @kind object;
  #L3df81c.  return v0 @kind object;
}
procedure `boolean` `isEmpty`(`m5.r` v1 @kind this) @signature `Lm5/r;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df5e8.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3df5ee.  v0:= temp;
  #L3df5f0.  if v0 != 0 then goto L3df5f8;
  #L3df5f4.  v0:= 1I;
  #L3df5f6.  goto L3df5fa;
  #L3df5f8.  v0:= 0I;
  #L3df5fa.  return v0;
}
procedure `m5.o` `k`(`m5.r` v1 @kind this) @signature `Lm5/r;.k:()Lm5/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df6f8.  v0:= v1.`m5.r.q` @type ^`m5.o` @kind object;
  #L3df6fc.  if v0 != 0 then goto L3df70c;
  #L3df700.  call temp:= `f`(v1) @signature `Lm5/r;.f:()Lm5/o;` @kind virtual;
  #L3df706.  v0:= temp @kind object;
  #L3df708.  v1.`m5.r.q` @type ^`m5.o` := v0 @kind object;
  #L3df70c.  return v0 @kind object;
}
procedure `java.util.Set` `keySet`(`m5.r` v1 @kind this) @signature `Lm5/r;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3df6dc.  call temp:= `i`(v1) @signature `Lm5/r;.i:()Lm5/s;` @kind virtual;
  #L3df6e2.  v0:= temp @kind object;
  #L3df6e4.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`m5.r` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lm5/r;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3df650.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3df654.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3df65a.  throw v1;
}
procedure `void` `putAll`(`m5.r` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lm5/r;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3df878.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3df87c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3df882.  throw v1;
}
procedure `java.lang.Object` `remove`(`m5.r` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm5/r;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3df66c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3df670.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3df676.  throw v1;
}
procedure `java.lang.String` `toString`(`m5.r` v1 @kind this) @signature `Lm5/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df688.  call temp:= `i`(v1) @signature `Lm5/y;.i:(Ljava/util/Map;)Ljava/lang/String;` @kind static;
  #L3df68e.  v0:= temp @kind object;
  #L3df690.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`m5.r` v1 @kind this) @signature `Lm5/r;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3df6a4.  call temp:= `k`(v1) @signature `Lm5/r;.k:()Lm5/o;` @kind virtual;
  #L3df6aa.  v0:= temp @kind object;
  #L3df6ac.  return v0 @kind object;
}
