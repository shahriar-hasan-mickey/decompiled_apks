record `m5.d$d$a` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface {
  `java.util.Map$Entry` `m5.d$d$a.o` @AccessFlag ;
  `java.util.Iterator` `m5.d$d$a.p` @AccessFlag FINAL_SYNTHETIC;
  `m5.d$d` `m5.d$d$a.q` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m5.d$d$a` v0 @kind this, `m5.d$d` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lm5/d$d$a;.<init>:(Lm5/d$d;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3dbeb0.  v0.`m5.d$d$a.q` @type ^`m5.d$d` := v1 @kind object;
  #L3dbeb4.  v0.`m5.d$d$a.p` @type ^`java.util.Iterator` := v2 @kind object;
  #L3dbeb8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dbebe.  return @kind void;
}
procedure `boolean` `hasNext`(`m5.d$d$a` v1 @kind this) @signature `Lm5/d$d$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dbe60.  v0:= v1.`m5.d$d$a.p` @type ^`java.util.Iterator` @kind object;
  #L3dbe64.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dbe6a.  v0:= temp;
  #L3dbe6c.  return v0;
}
procedure `java.lang.Object` `next`(`m5.d$d$a` v1 @kind this) @signature `Lm5/d$d$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dbe80.  v0:= v1.`m5.d$d$a.p` @type ^`java.util.Iterator` @kind object;
  #L3dbe84.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dbe8a.  v0:= temp @kind object;
  #L3dbe8c.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L3dbe90.  v1.`m5.d$d$a.o` @type ^`java.util.Map$Entry` := v0 @kind object;
  #L3dbe94.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3dbe9a.  v0:= temp @kind object;
  #L3dbe9c.  return v0 @kind object;
}
procedure `void` `remove`(`m5.d$d$a` v3 @kind this) @signature `Lm5/d$d$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3dbed0.  v0:= v3.`m5.d$d$a.o` @type ^`java.util.Map$Entry` @kind object;
  #L3dbed4.  if v0 == 0 then goto L3dbedc;
  #L3dbed8.  v0:= 1I;
  #L3dbeda.  goto L3dbede;
  #L3dbedc.  v0:= 0I;
  #L3dbede.  v1:= "no calls to next() since the last call to remove()" @kind object;
  #L3dbee2.  call `o`(v0, v1) @signature `Ll5/j;.o:(ZLjava/lang/Object;)V` @kind static;
  #L3dbee8.  v0:= v3.`m5.d$d$a.o` @type ^`java.util.Map$Entry` @kind object;
  #L3dbeec.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3dbef2.  v0:= temp @kind object;
  #L3dbef4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3dbef8.  v1:= v3.`m5.d$d$a.p` @type ^`java.util.Iterator` @kind object;
  #L3dbefc.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3dbf02.  v1:= v3.`m5.d$d$a.q` @type ^`m5.d$d` @kind object;
  #L3dbf06.  v1:= v1.`m5.d$d.p` @type ^`m5.d` @kind object;
  #L3dbf0a.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3dbf10.  v2:= temp;
  #L3dbf12.  call temp:= `m`(v1, v2) @signature `Lm5/d;.m:(Lm5/d;I)I` @kind static;
  #L3dbf18.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L3dbf1e.  v0:= 0I;
  #L3dbf20.  v3.`m5.d$d$a.o` @type ^`java.util.Map$Entry` := v0 @kind object;
  #L3dbf24.  return @kind void;
}
