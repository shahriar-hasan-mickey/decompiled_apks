record `m5.y$c` @kind class @AccessFlag ABSTRACT extends `m5.p0$d` @kind class {
}
procedure `void` `<init>`(`m5.y$c` v0 @kind this) @signature `Lm5/y$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e09f0.  call `<init>`(v0) @signature `Lm5/p0$d;.<init>:()V` @kind direct;
  #L3e09f6.  return @kind void;
}
procedure `java.util.Map` `b`() @signature `Lm5/y$c;.b:()Ljava/util/Map;` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `clear`(`m5.y$c` v1 @kind this) @signature `Lm5/y$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e0a08.  call temp:= `b`(v1) @signature `Lm5/y$c;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0a0e.  v0:= temp @kind object;
  #L3e0a10.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L3e0a16.  return @kind void;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Lm5/y$c;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`m5.y$c` v1 @kind this) @signature `Lm5/y$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e08bc.  call temp:= `b`(v1) @signature `Lm5/y$c;.b:()Ljava/util/Map;` @kind virtual;
  #L3e08c2.  v0:= temp @kind object;
  #L3e08c4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L3e08ca.  v0:= temp;
  #L3e08cc.  return v0;
}
procedure `boolean` `removeAll`(`m5.y$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lm5/y$c;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e08e0.  call temp:= `i`(v2) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e08e6.  v0:= temp @kind object;
  #L3e08e8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3e08ec.  call temp:= `removeAll`(v1, v0) @signature `Lm5/p0$d;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L3e08f2.  v2:= temp;
  #L3e08f4.  return v2;
  #L3e08f6.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e08fc.  v2:= temp @kind object;
  #L3e08fe.  call temp:= `j`(v1, v2) @signature `Lm5/p0;.j:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L3e0904.  v2:= temp;
  #L3e0906.  return v2;
  catch `java.lang.UnsupportedOperationException` @[L3e08e0..L3e08f4] goto L3e08f6;
}
procedure `boolean` `retainAll`(`m5.y$c` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lm5/y$c;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e0928.  call temp:= `i`(v4) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e092e.  v0:= temp @kind object;
  #L3e0930.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3e0934.  call temp:= `retainAll`(v3, v0) @signature `Lm5/p0$d;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L3e093a.  v4:= temp;
  #L3e093c.  return v4;
  #L3e093e.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3e0944.  v0:= temp;
  #L3e0946.  call temp:= `g`(v0) @signature `Lm5/p0;.g:(I)Ljava/util/HashSet;` @kind static;
  #L3e094c.  v0:= temp @kind object;
  #L3e094e.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e0954.  v4:= temp @kind object;
  #L3e0956.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e095c.  v1:= temp;
  #L3e095e.  if v1 == 0 then goto L3e0992;
  #L3e0962.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e0968.  v1:= temp @kind object;
  #L3e096a.  call temp:= `contains`(v3, v1) @signature `Lm5/y$c;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e0970.  v2:= temp;
  #L3e0972.  if v2 == 0 then goto L3e0956;
  #L3e0976.  v2:= instanceof @variable v1 @type ^`java.util.Map$Entry` @kind boolean;
  #L3e097a.  if v2 == 0 then goto L3e0956;
  #L3e097e.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L3e0982.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3e0988.  v1:= temp @kind object;
  #L3e098a.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e0990.  goto L3e0956;
  #L3e0992.  call temp:= `b`(v3) @signature `Lm5/y$c;.b:()Ljava/util/Map;` @kind virtual;
  #L3e0998.  v4:= temp @kind object;
  #L3e099a.  call temp:= `keySet`(v4) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L3e09a0.  v4:= temp @kind object;
  #L3e09a2.  call temp:= `retainAll`(v4, v0) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3e09a8.  v4:= temp;
  #L3e09aa.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L3e0928..L3e093c] goto L3e093e;
}
procedure `int` `size`(`m5.y$c` v1 @kind this) @signature `Lm5/y$c;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e09cc.  call temp:= `b`(v1) @signature `Lm5/y$c;.b:()Ljava/util/Map;` @kind virtual;
  #L3e09d2.  v0:= temp @kind object;
  #L3e09d4.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3e09da.  v0:= temp;
  #L3e09dc.  return v0;
}
