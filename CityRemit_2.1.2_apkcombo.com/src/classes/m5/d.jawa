record `m5.d` @kind class @AccessFlag ABSTRACT extends `m5.f` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Map` `m5.d.r` @AccessFlag PRIVATE_TRANSIENT;
  `int` `m5.d.s` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`m5.d` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lm5/d;.<init>:(Ljava/util/Map;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L3dd768.  call `<init>`(v1) @signature `Lm5/f;.<init>:()V` @kind direct;
  #L3dd76e.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L3dd774.  v0:= temp;
  #L3dd776.  call `d`(v0) @signature `Ll5/j;.d:(Z)V` @kind static;
  #L3dd77c.  v1.`m5.d.r` @type ^`java.util.Map` := v2 @kind object;
  #L3dd780.  return @kind void;
}
procedure `java.util.Map` `h`(`m5.d` v0 @kind object) @signature `Lm5/d;.h:(Lm5/d;)Ljava/util/Map;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3dd698.  v0:= v0.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd69c.  return v0 @kind object;
}
procedure `java.util.Iterator` `i`(`java.util.Collection` v0 @kind object) @signature `Lm5/d;.i:(Ljava/util/Collection;)Ljava/util/Iterator;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3dd600.  call temp:= `s`(v0) @signature `Lm5/d;.s:(Ljava/util/Collection;)Ljava/util/Iterator;` @kind static;
  #L3dd606.  v0:= temp @kind object;
  #L3dd608.  return v0 @kind object;
}
procedure `int` `j`(`m5.d` v2 @kind object) @signature `Lm5/d;.j:(Lm5/d;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L3dd51c.  v0:= v2.`m5.d.s` @type ^`int`;
  #L3dd520.  v1:= v0 + 1;
  #L3dd524.  v2.`m5.d.s` @type ^`int` := v1;
  #L3dd528.  return v0;
}
procedure `int` `k`(`m5.d` v2 @kind object) @signature `Lm5/d;.k:(Lm5/d;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L3dd53c.  v0:= v2.`m5.d.s` @type ^`int`;
  #L3dd540.  v1:= v0 + -1;
  #L3dd544.  v2.`m5.d.s` @type ^`int` := v1;
  #L3dd548.  return v0;
}
procedure `int` `l`(`m5.d` v1 @kind object, `int` v2 ) @signature `Lm5/d;.l:(Lm5/d;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L3dd55c.  v0:= v1.`m5.d.s` @type ^`int`;
  #L3dd560.  v0:= v0 + v2 @kind int;
  #L3dd562.  v1.`m5.d.s` @type ^`int` := v0;
  #L3dd566.  return v0;
}
procedure `int` `m`(`m5.d` v1 @kind object, `int` v2 ) @signature `Lm5/d;.m:(Lm5/d;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L3dd578.  v0:= v1.`m5.d.s` @type ^`int`;
  #L3dd57c.  v0:= v0 - v2 @kind int;
  #L3dd57e.  v1.`m5.d.s` @type ^`int` := v0;
  #L3dd582.  return v0;
}
procedure `void` `n`(`m5.d` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lm5/d;.n:(Lm5/d;Ljava/lang/Object;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3dd794.  call `t`(v0, v1) @signature `Lm5/d;.t:(Ljava/lang/Object;)V` @kind direct;
  #L3dd79a.  return @kind void;
}
procedure `java.util.Iterator` `s`(`java.util.Collection` v1 @kind object) @signature `Lm5/d;.s:(Ljava/util/Collection;)Ljava/util/Iterator;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3dd61c.  v0:= instanceof @variable v1 @type ^`java.util.List` @kind boolean;
  #L3dd620.  if v0 == 0 then goto L3dd632;
  #L3dd624.  v1:= (`java.util.List`) v1 @kind object;
  #L3dd628.  call temp:= `listIterator`(v1) @signature `Ljava/util/List;.listIterator:()Ljava/util/ListIterator;` @kind interface;
  #L3dd62e.  v1:= temp @kind object;
  #L3dd630.  goto L3dd63a;
  #L3dd632.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dd638.  v1:= temp @kind object;
  #L3dd63a.  return v1 @kind object;
}
procedure `void` `t`(`m5.d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm5/d;.t:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3dd804.  v0:= v1.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd808.  call temp:= `h`(v0, v2) @signature `Lm5/y;.h:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3dd80e.  v2:= temp @kind object;
  #L3dd810.  v2:= (`java.util.Collection`) v2 @kind object;
  #L3dd814.  if v2 == 0 then goto L3dd830;
  #L3dd818.  call temp:= `size`(v2) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3dd81e.  v0:= temp;
  #L3dd820.  call `clear`(v2) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L3dd826.  v2:= v1.`m5.d.s` @type ^`int`;
  #L3dd82a.  v2:= v2 - v0 @kind int;
  #L3dd82c.  v1.`m5.d.s` @type ^`int` := v2;
  #L3dd830.  return @kind void;
}
procedure `void` `clear`(`m5.d` v2 @kind this) @signature `Lm5/d;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dd7ac.  v0:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd7b0.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3dd7b6.  v0:= temp @kind object;
  #L3dd7b8.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dd7be.  v0:= temp @kind object;
  #L3dd7c0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dd7c6.  v1:= temp;
  #L3dd7c8.  if v1 == 0 then goto L3dd7e0;
  #L3dd7cc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dd7d2.  v1:= temp @kind object;
  #L3dd7d4.  v1:= (`java.util.Collection`) v1 @kind object;
  #L3dd7d8.  call `clear`(v1) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L3dd7de.  goto L3dd7c0;
  #L3dd7e0.  v0:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd7e4.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L3dd7ea.  v0:= 0I;
  #L3dd7ec.  v2.`m5.d.s` @type ^`int` := v0;
  #L3dd7f0.  return @kind void;
}
procedure `java.util.Collection` `e`(`m5.d` v1 @kind this) @signature `Lm5/d;.e:()Ljava/util/Collection;` @AccessFlag  {
    temp;
    v0;

  #L3dd5c8.  v0:= new `m5.f$a`;
  #L3dd5cc.  call `<init>`(v0, v1) @signature `Lm5/f$a;.<init>:(Lm5/f;)V` @kind direct;
  #L3dd5d2.  return v0 @kind object;
}
procedure `java.util.Iterator` `g`(`m5.d` v1 @kind this) @signature `Lm5/d;.g:()Ljava/util/Iterator;` @AccessFlag  {
    temp;
    v0;

  #L3dd64c.  v0:= new `m5.d$a`;
  #L3dd650.  call `<init>`(v0, v1) @signature `Lm5/d$a;.<init>:(Lm5/d;)V` @kind direct;
  #L3dd656.  return v0 @kind object;
}
procedure `java.util.Collection` `o`() @signature `Lm5/d;.o:()Ljava/util/Collection;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Collection` `p`(`m5.d` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm5/d;.p:(Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag  {
    temp;

  #L3dd5ac.  call temp:= `o`(v0) @signature `Lm5/d;.o:()Ljava/util/Collection;` @kind virtual;
  #L3dd5b2.  v1:= temp @kind object;
  #L3dd5b4.  return v1 @kind object;
}
procedure `boolean` `put`(`m5.d` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lm5/d;.put:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dd4a0.  v0:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd4a4.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3dd4aa.  v0:= temp @kind object;
  #L3dd4ac.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3dd4b0.  v1:= 1I;
  #L3dd4b2.  if v0 != 0 then goto L3dd4f0;
  #L3dd4b6.  call temp:= `p`(v2, v3) @signature `Lm5/d;.p:(Ljava/lang/Object;)Ljava/util/Collection;` @kind virtual;
  #L3dd4bc.  v0:= temp @kind object;
  #L3dd4be.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dd4c4.  v4:= temp;
  #L3dd4c6.  if v4 == 0 then goto L3dd4e0;
  #L3dd4ca.  v4:= v2.`m5.d.s` @type ^`int`;
  #L3dd4ce.  v4:= v4 + v1 @kind int;
  #L3dd4d0.  v2.`m5.d.s` @type ^`int` := v4;
  #L3dd4d4.  v4:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd4d8.  call temp:= `put`(v4, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3dd4de.  return v1;
  #L3dd4e0.  v3:= new `java.lang.AssertionError`;
  #L3dd4e4.  v4:= "New Collection violated the Collection spec" @kind object;
  #L3dd4e8.  call `<init>`(v3, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3dd4ee.  throw v3;
  #L3dd4f0.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dd4f6.  v3:= temp;
  #L3dd4f8.  if v3 == 0 then goto L3dd508;
  #L3dd4fc.  v3:= v2.`m5.d.s` @type ^`int`;
  #L3dd500.  v3:= v3 + v1 @kind int;
  #L3dd502.  v2.`m5.d.s` @type ^`int` := v3;
  #L3dd506.  return v1;
  #L3dd508.  v3:= 0I;
  #L3dd50a.  return v3;
}
procedure `java.util.Map` `q`(`m5.d` v2 @kind this) @signature `Lm5/d;.q:()Ljava/util/Map;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L3dd6b0.  v0:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd6b4.  v1:= instanceof @variable v0 @type ^`java.util.NavigableMap` @kind boolean;
  #L3dd6b8.  if v1 == 0 then goto L3dd6d0;
  #L3dd6bc.  v0:= new `m5.d$e`;
  #L3dd6c0.  v1:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd6c4.  v1:= (`java.util.NavigableMap`) v1 @kind object;
  #L3dd6c8.  call `<init>`(v0, v2, v1) @signature `Lm5/d$e;.<init>:(Lm5/d;Ljava/util/NavigableMap;)V` @kind direct;
  #L3dd6ce.  return v0 @kind object;
  #L3dd6d0.  v0:= instanceof @variable v0 @type ^`java.util.SortedMap` @kind boolean;
  #L3dd6d4.  if v0 == 0 then goto L3dd6ec;
  #L3dd6d8.  v0:= new `m5.d$h`;
  #L3dd6dc.  v1:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd6e0.  v1:= (`java.util.SortedMap`) v1 @kind object;
  #L3dd6e4.  call `<init>`(v0, v2, v1) @signature `Lm5/d$h;.<init>:(Lm5/d;Ljava/util/SortedMap;)V` @kind direct;
  #L3dd6ea.  return v0 @kind object;
  #L3dd6ec.  v0:= new `m5.d$b`;
  #L3dd6f0.  v1:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd6f4.  call `<init>`(v0, v2, v1) @signature `Lm5/d$b;.<init>:(Lm5/d;Ljava/util/Map;)V` @kind direct;
  #L3dd6fa.  return v0 @kind object;
}
procedure `java.util.Set` `r`(`m5.d` v2 @kind this) @signature `Lm5/d;.r:()Ljava/util/Set;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L3dd70c.  v0:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd710.  v1:= instanceof @variable v0 @type ^`java.util.NavigableMap` @kind boolean;
  #L3dd714.  if v1 == 0 then goto L3dd72c;
  #L3dd718.  v0:= new `m5.d$f`;
  #L3dd71c.  v1:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd720.  v1:= (`java.util.NavigableMap`) v1 @kind object;
  #L3dd724.  call `<init>`(v0, v2, v1) @signature `Lm5/d$f;.<init>:(Lm5/d;Ljava/util/NavigableMap;)V` @kind direct;
  #L3dd72a.  return v0 @kind object;
  #L3dd72c.  v0:= instanceof @variable v0 @type ^`java.util.SortedMap` @kind boolean;
  #L3dd730.  if v0 == 0 then goto L3dd748;
  #L3dd734.  v0:= new `m5.d$i`;
  #L3dd738.  v1:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd73c.  v1:= (`java.util.SortedMap`) v1 @kind object;
  #L3dd740.  call `<init>`(v0, v2, v1) @signature `Lm5/d$i;.<init>:(Lm5/d;Ljava/util/SortedMap;)V` @kind direct;
  #L3dd746.  return v0 @kind object;
  #L3dd748.  v0:= new `m5.d$d`;
  #L3dd74c.  v1:= v2.`m5.d.r` @type ^`java.util.Map` @kind object;
  #L3dd750.  call `<init>`(v0, v2, v1) @signature `Lm5/d$d;.<init>:(Lm5/d;Ljava/util/Map;)V` @kind direct;
  #L3dd756.  return v0 @kind object;
}
procedure `int` `size`(`m5.d` v1 @kind this) @signature `Lm5/d;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd594.  v0:= v1.`m5.d.s` @type ^`int`;
  #L3dd598.  return v0;
}
procedure `java.util.Collection` `u`(`java.util.Collection` v0 @kind object) @signature `Lm5/d;.u:(Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Collection` `v`(`java.lang.Object` v0 @kind object, `java.util.Collection` v1 @kind object) @signature `Lm5/d;.v:(Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Collection` `values`(`m5.d` v1 @kind this) @signature `Lm5/d;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd5e4.  call temp:= `values`(v1) @signature `Lm5/f;.values:()Ljava/util/Collection;` @kind super;
  #L3dd5ea.  v0:= temp @kind object;
  #L3dd5ec.  return v0 @kind object;
}
procedure `java.util.List` `w`(`m5.d` v1 @kind this, `java.lang.Object` v2 @kind object, `java.util.List` v3 @kind object, `m5.d$j` v4 @kind object) @signature `Lm5/d;.w:(Ljava/lang/Object;Ljava/util/List;Lm5/d$j;)Ljava/util/List;` @AccessFlag FINAL {
    temp;
    v0;

  #L3dd668.  v0:= instanceof @variable v3 @type ^`java.util.RandomAccess` @kind boolean;
  #L3dd66c.  if v0 == 0 then goto L3dd67c;
  #L3dd670.  v0:= new `m5.d$g`;
  #L3dd674.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lm5/d$g;.<init>:(Lm5/d;Ljava/lang/Object;Ljava/util/List;Lm5/d$j;)V` @kind direct;
  #L3dd67a.  goto L3dd686;
  #L3dd67c.  v0:= new `m5.d$k`;
  #L3dd680.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lm5/d$k;.<init>:(Lm5/d;Ljava/lang/Object;Ljava/util/List;Lm5/d$j;)V` @kind direct;
  #L3dd686.  return v0 @kind object;
}
