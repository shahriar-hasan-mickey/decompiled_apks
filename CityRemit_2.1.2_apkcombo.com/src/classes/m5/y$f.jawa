record `m5.y$f` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractMap` @kind class {
  `java.util.Set` `m5.y$f.o` @AccessFlag PRIVATE_TRANSIENT;
  `java.util.Collection` `m5.y$f.p` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`m5.y$f` v0 @kind this) @signature `Lm5/y$f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e0e24.  call `<init>`(v0) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L3e0e2a.  return @kind void;
}
procedure `java.util.Set` `a`() @signature `Lm5/y$f;.a:()Ljava/util/Set;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Collection` `b`(`m5.y$f` v1 @kind this) @signature `Lm5/y$f;.b:()Ljava/util/Collection;` @AccessFlag  {
    temp;
    v0;

  #L3e0db8.  v0:= new `m5.y$e`;
  #L3e0dbc.  call `<init>`(v0, v1) @signature `Lm5/y$e;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L3e0dc2.  return v0 @kind object;
}
procedure `java.util.Set` `entrySet`(`m5.y$f` v1 @kind this) @signature `Lm5/y$f;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e0dfc.  v0:= v1.`m5.y$f.o` @type ^`java.util.Set` @kind object;
  #L3e0e00.  if v0 != 0 then goto L3e0e10;
  #L3e0e04.  call temp:= `a`(v1) @signature `Lm5/y$f;.a:()Ljava/util/Set;` @kind virtual;
  #L3e0e0a.  v0:= temp @kind object;
  #L3e0e0c.  v1.`m5.y$f.o` @type ^`java.util.Set` := v0 @kind object;
  #L3e0e10.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`m5.y$f` v1 @kind this) @signature `Lm5/y$f;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e0dd4.  v0:= v1.`m5.y$f.p` @type ^`java.util.Collection` @kind object;
  #L3e0dd8.  if v0 != 0 then goto L3e0de8;
  #L3e0ddc.  call temp:= `b`(v1) @signature `Lm5/y$f;.b:()Ljava/util/Collection;` @kind virtual;
  #L3e0de2.  v0:= temp @kind object;
  #L3e0de4.  v1.`m5.y$f.p` @type ^`java.util.Collection` := v0 @kind object;
  #L3e0de8.  return v0 @kind object;
}
