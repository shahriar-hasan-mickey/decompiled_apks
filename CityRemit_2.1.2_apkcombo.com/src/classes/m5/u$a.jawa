record `m5.u$a` @kind class @AccessFlag  extends `m5.b` @kind class {
  `java.util.Iterator` `m5.u$a.q` @AccessFlag FINAL_SYNTHETIC;
  `l5.k` `m5.u$a.r` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m5.u$a` v0 @kind this, `java.util.Iterator` v1 @kind object, `l5.k` v2 @kind object) @signature `Lm5/u$a;.<init>:(Ljava/util/Iterator;Ll5/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3dff00.  v0.`m5.u$a.q` @type ^`java.util.Iterator` := v1 @kind object;
  #L3dff04.  v0.`m5.u$a.r` @type ^`l5.k` := v2 @kind object;
  #L3dff08.  call `<init>`(v0) @signature `Lm5/b;.<init>:()V` @kind direct;
  #L3dff0e.  return @kind void;
}
procedure `java.lang.Object` `a`(`m5.u$a` v2 @kind this) @signature `Lm5/u$a;.a:()Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3dfeb8.  v0:= v2.`m5.u$a.q` @type ^`java.util.Iterator` @kind object;
  #L3dfebc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dfec2.  v0:= temp;
  #L3dfec4.  if v0 == 0 then goto L3dfee6;
  #L3dfec8.  v0:= v2.`m5.u$a.q` @type ^`java.util.Iterator` @kind object;
  #L3dfecc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dfed2.  v0:= temp @kind object;
  #L3dfed4.  v1:= v2.`m5.u$a.r` @type ^`l5.k` @kind object;
  #L3dfed8.  call temp:= `apply`(v1, v0) @signature `Ll5/k;.apply:(Ljava/lang/Object;)Z` @kind interface;
  #L3dfede.  v1:= temp;
  #L3dfee0.  if v1 == 0 then goto L3dfeb8;
  #L3dfee4.  return v0 @kind object;
  #L3dfee6.  call temp:= `d`(v2) @signature `Lm5/b;.d:()Ljava/lang/Object;` @kind virtual;
  #L3dfeec.  v0:= temp @kind object;
  #L3dfeee.  return v0 @kind object;
}
