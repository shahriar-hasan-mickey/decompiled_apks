record `m5.a` @kind class @AccessFlag ABSTRACT extends `m5.t0` @kind class {
  `int` `m5.a.o` @AccessFlag PRIVATE_FINAL;
  `int` `m5.a.p` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`m5.a` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lm5/a;.<init>:(II)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3db554.  call `<init>`(v0) @signature `Lm5/t0;.<init>:()V` @kind direct;
  #L3db55a.  call temp:= `k`(v2, v1) @signature `Ll5/j;.k:(II)I` @kind static;
  #L3db560.  v0.`m5.a.o` @type ^`int` := v1;
  #L3db564.  v0.`m5.a.p` @type ^`int` := v2;
  #L3db568.  return @kind void;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Lm5/a;.a:(I)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`m5.a` v2 @kind this) @signature `Lm5/a;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3db45c.  v0:= v2.`m5.a.p` @type ^`int`;
  #L3db460.  v1:= v2.`m5.a.o` @type ^`int`;
  #L3db464.  if v0 >= v1 then goto L3db46c;
  #L3db468.  v0:= 1I;
  #L3db46a.  goto L3db46e;
  #L3db46c.  v0:= 0I;
  #L3db46e.  return v0;
}
procedure `boolean` `hasPrevious`(`m5.a` v1 @kind this) @signature `Lm5/a;.hasPrevious:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3db480.  v0:= v1.`m5.a.p` @type ^`int`;
  #L3db484.  if v0 <= 0 then goto L3db48c;
  #L3db488.  v0:= 1I;
  #L3db48a.  goto L3db48e;
  #L3db48c.  v0:= 0I;
  #L3db48e.  return v0;
}
procedure `java.lang.Object` `next`(`m5.a` v2 @kind this) @signature `Lm5/a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3db4d4.  call temp:= `hasNext`(v2) @signature `Lm5/a;.hasNext:()Z` @kind virtual;
  #L3db4da.  v0:= temp;
  #L3db4dc.  if v0 == 0 then goto L3db4f6;
  #L3db4e0.  v0:= v2.`m5.a.p` @type ^`int`;
  #L3db4e4.  v1:= v0 + 1;
  #L3db4e8.  v2.`m5.a.p` @type ^`int` := v1;
  #L3db4ec.  call temp:= `a`(v2, v0) @signature `Lm5/a;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L3db4f2.  v0:= temp @kind object;
  #L3db4f4.  return v0 @kind object;
  #L3db4f6.  v0:= new `java.util.NoSuchElementException`;
  #L3db4fa.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3db500.  throw v0;
}
procedure `int` `nextIndex`(`m5.a` v1 @kind this) @signature `Lm5/a;.nextIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3db4a0.  v0:= v1.`m5.a.p` @type ^`int`;
  #L3db4a4.  return v0;
}
procedure `java.lang.Object` `previous`(`m5.a` v1 @kind this) @signature `Lm5/a;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3db514.  call temp:= `hasPrevious`(v1) @signature `Lm5/a;.hasPrevious:()Z` @kind virtual;
  #L3db51a.  v0:= temp;
  #L3db51c.  if v0 == 0 then goto L3db536;
  #L3db520.  v0:= v1.`m5.a.p` @type ^`int`;
  #L3db524.  v0:= v0 + -1;
  #L3db528.  v1.`m5.a.p` @type ^`int` := v0;
  #L3db52c.  call temp:= `a`(v1, v0) @signature `Lm5/a;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L3db532.  v0:= temp @kind object;
  #L3db534.  return v0 @kind object;
  #L3db536.  v0:= new `java.util.NoSuchElementException`;
  #L3db53a.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3db540.  throw v0;
}
procedure `int` `previousIndex`(`m5.a` v1 @kind this) @signature `Lm5/a;.previousIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3db4b8.  v0:= v1.`m5.a.p` @type ^`int`;
  #L3db4bc.  v0:= v0 + -1;
  #L3db4c0.  return v0;
}
