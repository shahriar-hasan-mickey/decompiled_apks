record `k2.y` @kind class @AccessFlag FINAL {
  `s3.h0` `k2.y.a` @AccessFlag PRIVATE_FINAL;
  `s3.z` `k2.y.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `k2.y.c` @AccessFlag PRIVATE;
  `boolean` `k2.y.d` @AccessFlag PRIVATE;
  `boolean` `k2.y.e` @AccessFlag PRIVATE;
  `long` `k2.y.f` @AccessFlag PRIVATE;
  `long` `k2.y.g` @AccessFlag PRIVATE;
  `long` `k2.y.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`k2.y` v3 @kind this) @signature `Lk2/y;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3a72b4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a72ba.  v0:= new `s3.h0`;
  #L3a72be.  v1:= 0L;
  #L3a72c2.  call `<init>`(v0, v1) @signature `Ls3/h0;.<init>:(J)V` @kind direct;
  #L3a72c8.  v3.`k2.y.a` @type ^`s3.h0` := v0 @kind object;
  #L3a72cc.  v0:= -4.9E-324D;
  #L3a72d6.  v3.`k2.y.f` @type ^`long` := v0 @kind wide;
  #L3a72da.  v3.`k2.y.g` @type ^`long` := v0 @kind wide;
  #L3a72de.  v3.`k2.y.h` @type ^`long` := v0 @kind wide;
  #L3a72e2.  v0:= new `s3.z`;
  #L3a72e6.  call `<init>`(v0) @signature `Ls3/z;.<init>:()V` @kind direct;
  #L3a72ec.  v3.`k2.y.b` @type ^`s3.z` := v0 @kind object;
  #L3a72f0.  return @kind void;
}
procedure `boolean` `a`(`byte`[] v3 @kind object) @signature `Lk2/y;.a:([B)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3a6dd4.  v0:= 0I;
  #L3a6dd6.  v1:= v3[v0] @kind byte;
  #L3a6dda.  v1:= v1 ^& 196;
  #L3a6dde.  v2:= 68I;
  #L3a6de2.  if v1 == v2 then goto L3a6de8;
  #L3a6de6.  return v0;
  #L3a6de8.  v1:= 2I;
  #L3a6dea.  v1:= v3[v1] @kind byte;
  #L3a6dee.  v2:= 4I;
  #L3a6df0.  v1:= v1 ^& v2 @kind int;
  #L3a6df2.  if v1 == v2 then goto L3a6df8;
  #L3a6df6.  return v0;
  #L3a6df8.  v1:= v3[v2] @kind byte;
  #L3a6dfc.  v1:= v1 ^& v2 @kind int;
  #L3a6dfe.  if v1 == v2 then goto L3a6e04;
  #L3a6e02.  return v0;
  #L3a6e04.  v1:= 5I;
  #L3a6e06.  v1:= v3[v1] @kind byte;
  #L3a6e0a.  v2:= 1I;
  #L3a6e0c.  v1:= v1 ^& v2 @kind int;
  #L3a6e0e.  if v1 == v2 then goto L3a6e14;
  #L3a6e12.  return v0;
  #L3a6e14.  v1:= 8I;
  #L3a6e18.  v3:= v3[v1] @kind byte;
  #L3a6e1c.  v1:= 3I;
  #L3a6e1e.  v3:= v3 ^& v1 @kind int;
  #L3a6e20.  if v3 != v1 then goto L3a6e26;
  #L3a6e24.  v0:= 1I;
  #L3a6e26.  return v0;
}
procedure `int` `b`(`k2.y` v2 @kind this, `a2.m` v3 @kind object) @signature `Lk2/y;.b:(La2/m;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3a6e50.  v0:= v2.`k2.y.b` @type ^`s3.z` @kind object;
  #L3a6e54.  v1:= `@@s3.l0.f` @type ^`byte`[] @kind object;
  #L3a6e58.  call `L`(v0, v1) @signature `Ls3/z;.L:([B)V` @kind virtual;
  #L3a6e5e.  v0:= 1I;
  #L3a6e60.  v2.`k2.y.c` @type ^`boolean` := v0 @kind boolean;
  #L3a6e64.  call `i`(v3) @signature `La2/m;.i:()V` @kind interface;
  #L3a6e6a.  v3:= 0I;
  #L3a6e6c.  return v3;
}
procedure `int` `f`(`k2.y` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lk2/y;.f:([BI)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3a6e80.  v0:= v3[v4] @kind byte;
  #L3a6e84.  v0:= v0 ^& 255;
  #L3a6e88.  v0:= v0 ^< 24;
  #L3a6e8c.  v1:= v4 + 1;
  #L3a6e90.  v1:= v3[v1] @kind byte;
  #L3a6e94.  v1:= v1 ^& 255;
  #L3a6e98.  v1:= v1 ^< 16;
  #L3a6e9c.  v0:= v0 ^| v1 @kind int;
  #L3a6e9e.  v1:= v4 + 2;
  #L3a6ea2.  v1:= v3[v1] @kind byte;
  #L3a6ea6.  v1:= v1 ^& 255;
  #L3a6eaa.  v1:= v1 ^< 8;
  #L3a6eae.  v0:= v0 ^| v1 @kind int;
  #L3a6eb0.  v4:= v4 + 3;
  #L3a6eb4.  v3:= v3[v4] @kind byte;
  #L3a6eb8.  v3:= v3 ^& 255;
  #L3a6ebc.  v3:= v3 ^| v0 @kind int;
  #L3a6ebe.  return v3;
}
procedure `int` `h`(`k2.y` v8 @kind this, `a2.m` v9 @kind object, `a2.z` v10 @kind object) @signature `Lk2/y;.h:(La2/m;La2/z;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3a6fb0.  call temp:= `a`(v9) @signature `La2/m;.a:()J` @kind interface;
  #L3a6fb6.  v0:= temp @kind wide;
  #L3a6fb8.  v2:= 20000L;
  #L3a6fbc.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3a6fc2.  v0:= temp @kind wide;
  #L3a6fc4.  v1:= (`int`) v0 @kind l2i;
  #L3a6fc6.  call temp:= `q`(v9) @signature `La2/m;.q:()J` @kind interface;
  #L3a6fcc.  v2:= temp @kind wide;
  #L3a6fce.  v0:= 0I;
  #L3a6fd0.  v4:= (`long`) v0 @kind i2l;
  #L3a6fd2.  v6:= 1I;
  #L3a6fd4.  v7:= lcmp(v2, v4);
  #L3a6fd8.  if v7 == 0 then goto L3a6fe2;
  #L3a6fdc.  v10.`a2.z.a` @type ^`long` := v4 @kind wide;
  #L3a6fe0.  return v6;
  #L3a6fe2.  v10:= v8.`k2.y.b` @type ^`s3.z` @kind object;
  #L3a6fe6.  call `K`(v10, v1) @signature `Ls3/z;.K:(I)V` @kind virtual;
  #L3a6fec.  call `i`(v9) @signature `La2/m;.i:()V` @kind interface;
  #L3a6ff2.  v10:= v8.`k2.y.b` @type ^`s3.z` @kind object;
  #L3a6ff6.  call temp:= `d`(v10) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a6ffc.  v10:= temp @kind object;
  #L3a6ffe.  call `o`(v9, v10, v0, v1) @signature `La2/m;.o:([BII)V` @kind interface;
  #L3a7004.  v9:= v8.`k2.y.b` @type ^`s3.z` @kind object;
  #L3a7008.  call temp:= `i`(v8, v9) @signature `Lk2/y;.i:(Ls3/z;)J` @kind direct;
  #L3a700e.  v9:= temp @kind wide;
  #L3a7010.  v8.`k2.y.f` @type ^`long` := v9 @kind wide;
  #L3a7014.  v8.`k2.y.d` @type ^`boolean` := v6 @kind boolean;
  #L3a7018.  return v0;
}
procedure `long` `i`(`k2.y` v7 @kind this, `s3.z` v8 @kind object) @signature `Lk2/y;.i:(Ls3/z;)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a70c0.  call temp:= `e`(v8) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a70c6.  v0:= temp;
  #L3a70c8.  call temp:= `f`(v8) @signature `Ls3/z;.f:()I` @kind virtual;
  #L3a70ce.  v1:= temp;
  #L3a70d0.  v2:= v1 + -3;
  #L3a70d4.  v3:= -4.9E-324D;
  #L3a70de.  if v0 >= v2 then goto L3a711c;
  #L3a70e2.  call temp:= `d`(v8) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a70e8.  v2:= temp @kind object;
  #L3a70ea.  call temp:= `f`(v7, v2, v0) @signature `Lk2/y;.f:([BI)I` @kind direct;
  #L3a70f0.  v2:= temp;
  #L3a70f2.  v5:= 442I;
  #L3a70f6.  if v2 != v5 then goto L3a7116;
  #L3a70fa.  v2:= v0 + 4;
  #L3a70fe.  call `O`(v8, v2) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a7104.  call temp:= `l`(v8) @signature `Lk2/y;.l:(Ls3/z;)J` @kind static;
  #L3a710a.  v5:= temp @kind wide;
  #L3a710c.  v2:= lcmp(v5, v3);
  #L3a7110.  if v2 == 0 then goto L3a7116;
  #L3a7114.  return v5 @kind wide;
  #L3a7116.  v0:= v0 + 1;
  #L3a711a.  goto L3a70d0;
  #L3a711c.  return v3 @kind wide;
}
procedure `int` `j`(`k2.y` v7 @kind this, `a2.m` v8 @kind object, `a2.z` v9 @kind object) @signature `Lk2/y;.j:(La2/m;La2/z;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a702c.  call temp:= `a`(v8) @signature `La2/m;.a:()J` @kind interface;
  #L3a7032.  v0:= temp @kind wide;
  #L3a7034.  v2:= 20000L;
  #L3a7038.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3a703e.  v2:= temp @kind wide;
  #L3a7040.  v3:= (`int`) v2 @kind l2i;
  #L3a7042.  v4:= (`long`) v3 @kind i2l;
  #L3a7044.  v0:= v0 - v4 @kind long;
  #L3a7046.  call temp:= `q`(v8) @signature `La2/m;.q:()J` @kind interface;
  #L3a704c.  v4:= temp @kind wide;
  #L3a704e.  v2:= 1I;
  #L3a7050.  v6:= lcmp(v4, v0);
  #L3a7054.  if v6 == 0 then goto L3a705e;
  #L3a7058.  v9.`a2.z.a` @type ^`long` := v0 @kind wide;
  #L3a705c.  return v2;
  #L3a705e.  v9:= v7.`k2.y.b` @type ^`s3.z` @kind object;
  #L3a7062.  call `K`(v9, v3) @signature `Ls3/z;.K:(I)V` @kind virtual;
  #L3a7068.  call `i`(v8) @signature `La2/m;.i:()V` @kind interface;
  #L3a706e.  v9:= v7.`k2.y.b` @type ^`s3.z` @kind object;
  #L3a7072.  call temp:= `d`(v9) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a7078.  v9:= temp @kind object;
  #L3a707a.  v0:= 0I;
  #L3a707c.  call `o`(v8, v9, v0, v3) @signature `La2/m;.o:([BII)V` @kind interface;
  #L3a7082.  v8:= v7.`k2.y.b` @type ^`s3.z` @kind object;
  #L3a7086.  call temp:= `k`(v7, v8) @signature `Lk2/y;.k:(Ls3/z;)J` @kind direct;
  #L3a708c.  v8:= temp @kind wide;
  #L3a708e.  v7.`k2.y.g` @type ^`long` := v8 @kind wide;
  #L3a7092.  v7.`k2.y.e` @type ^`boolean` := v2 @kind boolean;
  #L3a7096.  return v0;
}
procedure `long` `k`(`k2.y` v7 @kind this, `s3.z` v8 @kind object) @signature `Lk2/y;.k:(Ls3/z;)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a7130.  call temp:= `e`(v8) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a7136.  v0:= temp;
  #L3a7138.  call temp:= `f`(v8) @signature `Ls3/z;.f:()I` @kind virtual;
  #L3a713e.  v1:= temp;
  #L3a7140.  v1:= v1 + -4;
  #L3a7144.  v2:= -4.9E-324D;
  #L3a714e.  if v1 < v0 then goto L3a718c;
  #L3a7152.  call temp:= `d`(v8) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a7158.  v4:= temp @kind object;
  #L3a715a.  call temp:= `f`(v7, v4, v1) @signature `Lk2/y;.f:([BI)I` @kind direct;
  #L3a7160.  v4:= temp;
  #L3a7162.  v5:= 442I;
  #L3a7166.  if v4 != v5 then goto L3a7186;
  #L3a716a.  v4:= v1 + 4;
  #L3a716e.  call `O`(v8, v4) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a7174.  call temp:= `l`(v8) @signature `Lk2/y;.l:(Ls3/z;)J` @kind static;
  #L3a717a.  v4:= temp @kind wide;
  #L3a717c.  v6:= lcmp(v4, v2);
  #L3a7180.  if v6 == 0 then goto L3a7186;
  #L3a7184.  return v4 @kind wide;
  #L3a7186.  v1:= v1 + -1;
  #L3a718a.  goto L3a7144;
  #L3a718c.  return v2 @kind wide;
}
procedure `long` `l`(`s3.z` v6 @kind object) @signature `Lk2/y;.l:(Ls3/z;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a71a0.  call temp:= `e`(v6) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a71a6.  v0:= temp;
  #L3a71a8.  call temp:= `a`(v6) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a71ae.  v1:= temp;
  #L3a71b0.  v2:= -4.9E-324D;
  #L3a71ba.  v4:= 9I;
  #L3a71be.  if v1 >= v4 then goto L3a71c4;
  #L3a71c2.  return v2 @kind wide;
  #L3a71c4.  v1:= new `byte`[v4];
  #L3a71c8.  v5:= 0I;
  #L3a71ca.  call `j`(v6, v1, v5, v4) @signature `Ls3/z;.j:([BII)V` @kind virtual;
  #L3a71d0.  call `O`(v6, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a71d6.  call temp:= `a`(v1) @signature `Lk2/y;.a:([B)Z` @kind static;
  #L3a71dc.  v6:= temp;
  #L3a71de.  if v6 != 0 then goto L3a71e4;
  #L3a71e2.  return v2 @kind wide;
  #L3a71e4.  call temp:= `m`(v1) @signature `Lk2/y;.m:([B)J` @kind static;
  #L3a71ea.  v0:= temp @kind wide;
  #L3a71ec.  return v0 @kind wide;
}
procedure `long` `m`(`byte`[] v13 @kind object) @signature `Lk2/y;.m:([B)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3a7200.  v0:= 0I;
  #L3a7202.  v1:= v13[v0] @kind byte;
  #L3a7206.  v1:= (`long`) v1 @kind i2l;
  #L3a7208.  v3:= 56L;
  #L3a720c.  v1:= v1 ^& v3 @kind long;
  #L3a720e.  v3:= 3I;
  #L3a7210.  v1:= v1 ^> v3 @kind long;
  #L3a7212.  v4:= 30I;
  #L3a7216.  v1:= v1 ^< v4 @kind long;
  #L3a7218.  v0:= v13[v0] @kind byte;
  #L3a721c.  v4:= (`long`) v0 @kind i2l;
  #L3a721e.  v6:= 3L;
  #L3a7222.  v4:= v4 ^& v6 @kind long;
  #L3a7224.  v0:= 28I;
  #L3a7228.  v4:= v4 ^< v0 @kind long;
  #L3a722a.  v0:= v1 ^| v4 @kind long;
  #L3a722e.  v2:= 1I;
  #L3a7230.  v2:= v13[v2] @kind byte;
  #L3a7234.  v4:= (`long`) v2 @kind i2l;
  #L3a7236.  v8:= 255L;
  #L3a723a.  v4:= v4 ^& v8 @kind long;
  #L3a723c.  v2:= 20I;
  #L3a7240.  v4:= v4 ^< v2 @kind long;
  #L3a7242.  v0:= v0 ^| v4 @kind long;
  #L3a7244.  v2:= 2I;
  #L3a7246.  v4:= v13[v2] @kind byte;
  #L3a724a.  v4:= (`long`) v4 @kind i2l;
  #L3a724c.  v10:= 248L;
  #L3a7250.  v4:= v4 ^& v10 @kind long;
  #L3a7252.  v4:= v4 ^> v3 @kind long;
  #L3a7254.  v12:= 15I;
  #L3a7258.  v4:= v4 ^< v12 @kind long;
  #L3a725a.  v0:= v0 ^| v4 @kind long;
  #L3a725c.  v2:= v13[v2] @kind byte;
  #L3a7260.  v4:= (`long`) v2 @kind i2l;
  #L3a7262.  v4:= v4 ^& v6 @kind long;
  #L3a7264.  v2:= 13I;
  #L3a7268.  v4:= v4 ^< v2 @kind long;
  #L3a726a.  v0:= v0 ^| v4 @kind long;
  #L3a726c.  v2:= v13[v3] @kind byte;
  #L3a7270.  v4:= (`long`) v2 @kind i2l;
  #L3a7272.  v4:= v4 ^& v8 @kind long;
  #L3a7274.  v2:= 5I;
  #L3a7276.  v4:= v4 ^< v2 @kind long;
  #L3a7278.  v0:= v0 ^| v4 @kind long;
  #L3a727a.  v2:= 4I;
  #L3a727c.  v13:= v13[v2] @kind byte;
  #L3a7280.  v4:= (`long`) v13 @kind i2l;
  #L3a7282.  v4:= v4 ^& v10 @kind long;
  #L3a7284.  v2:= v4 ^> v3 @kind long;
  #L3a7288.  v0:= v0 ^| v2 @kind long;
  #L3a728a.  return v0 @kind wide;
}
procedure `long` `c`(`k2.y` v2 @kind this) @signature `Lk2/y;.c:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a70a8.  v0:= v2.`k2.y.h` @type ^`long` @kind wide;
  #L3a70ac.  return v0 @kind wide;
}
procedure `s3.h0` `d`(`k2.y` v1 @kind this) @signature `Lk2/y;.d:()Ls3/h0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a729c.  v0:= v1.`k2.y.a` @type ^`s3.h0` @kind object;
  #L3a72a0.  return v0 @kind object;
}
procedure `boolean` `e`(`k2.y` v1 @kind this) @signature `Lk2/y;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a6e38.  v0:= v1.`k2.y.c` @type ^`boolean` @kind boolean;
  #L3a6e3c.  return v0;
}
procedure `int` `g`(`k2.y` v6 @kind this, `a2.m` v7 @kind object, `a2.z` v8 @kind object) @signature `Lk2/y;.g:(La2/m;La2/z;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a6ed0.  v0:= v6.`k2.y.e` @type ^`boolean` @kind boolean;
  #L3a6ed4.  if v0 != 0 then goto L3a6ee2;
  #L3a6ed8.  call temp:= `j`(v6, v7, v8) @signature `Lk2/y;.j:(La2/m;La2/z;)I` @kind direct;
  #L3a6ede.  v7:= temp;
  #L3a6ee0.  return v7;
  #L3a6ee2.  v0:= v6.`k2.y.g` @type ^`long` @kind wide;
  #L3a6ee6.  v2:= -4.9E-324D;
  #L3a6ef0.  v4:= lcmp(v0, v2);
  #L3a6ef4.  if v4 != 0 then goto L3a6f02;
  #L3a6ef8.  call temp:= `b`(v6, v7) @signature `Lk2/y;.b:(La2/m;)I` @kind direct;
  #L3a6efe.  v7:= temp;
  #L3a6f00.  return v7;
  #L3a6f02.  v0:= v6.`k2.y.d` @type ^`boolean` @kind boolean;
  #L3a6f06.  if v0 != 0 then goto L3a6f14;
  #L3a6f0a.  call temp:= `h`(v6, v7, v8) @signature `Lk2/y;.h:(La2/m;La2/z;)I` @kind direct;
  #L3a6f10.  v7:= temp;
  #L3a6f12.  return v7;
  #L3a6f14.  v0:= v6.`k2.y.f` @type ^`long` @kind wide;
  #L3a6f18.  v8:= lcmp(v0, v2);
  #L3a6f1c.  if v8 != 0 then goto L3a6f2a;
  #L3a6f20.  call temp:= `b`(v6, v7) @signature `Lk2/y;.b:(La2/m;)I` @kind direct;
  #L3a6f26.  v7:= temp;
  #L3a6f28.  return v7;
  #L3a6f2a.  v8:= v6.`k2.y.a` @type ^`s3.h0` @kind object;
  #L3a6f2e.  call temp:= `b`(v8, v0) @signature `Ls3/h0;.b:(J)J` @kind virtual;
  #L3a6f34.  v0:= temp @kind wide;
  #L3a6f36.  v8:= v6.`k2.y.a` @type ^`s3.h0` @kind object;
  #L3a6f3a.  v4:= v6.`k2.y.g` @type ^`long` @kind wide;
  #L3a6f3e.  call temp:= `b`(v8, v4) @signature `Ls3/h0;.b:(J)J` @kind virtual;
  #L3a6f44.  v4:= temp @kind wide;
  #L3a6f46.  v4:= v4 - v0 @kind long;
  #L3a6f48.  v6.`k2.y.h` @type ^`long` := v4 @kind wide;
  #L3a6f4c.  v0:= 0L;
  #L3a6f50.  v8:= lcmp(v4, v0);
  #L3a6f54.  if v8 >= 0 then goto L3a6f96;
  #L3a6f58.  v8:= new `java.lang.StringBuilder`;
  #L3a6f5c.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a6f62.  v0:= "Invalid duration: " @kind object;
  #L3a6f66.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a6f6c.  v0:= v6.`k2.y.h` @type ^`long` @kind wide;
  #L3a6f70.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a6f76.  v0:= ". Using TIME_UNSET instead." @kind object;
  #L3a6f7a.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a6f80.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a6f86.  v8:= temp @kind object;
  #L3a6f88.  v0:= "PsDurationReader" @kind object;
  #L3a6f8c.  call `h`(v0, v8) @signature `Ls3/q;.h:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L3a6f92.  v6.`k2.y.h` @type ^`long` := v2 @kind wide;
  #L3a6f96.  call temp:= `b`(v6, v7) @signature `Lk2/y;.b:(La2/m;)I` @kind direct;
  #L3a6f9c.  v7:= temp;
  #L3a6f9e.  return v7;
}
