record `k2.n$a` @kind class @AccessFlag FINAL {
  `boolean` `k2.n$a.a` @AccessFlag PRIVATE;
  `int` `k2.n$a.b` @AccessFlag PUBLIC;
  `int` `k2.n$a.c` @AccessFlag PUBLIC;
  `byte`[] `k2.n$a.d` @AccessFlag PUBLIC;
}
global `byte`[] `@@k2.n$a.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lk2/n$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a2d40.  v0:= 3I;
  #L3a2d42.  v0:= new `byte`[v0];
  #L3a2d46.  goto L3a2d54;
  #L3a2d4c.  `@@k2.n$a.e` @type ^`byte`[] := v0 @kind object;
  #L3a2d50.  return @kind void;
  #L3a2d52.  
  #L3a2d54.  v0:= (0I, 0I, 1I) @kind object;
  #L3a2d5f.  goto L3a2d4c;
}
procedure `void` `<init>`(`k2.n$a` v0 @kind this, `int` v1 ) @signature `Lk2/n$a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a2d70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a2d76.  v1:= new `byte`[v1];
  #L3a2d7a.  v0.`k2.n$a.d` @type ^`byte`[] := v1 @kind object;
  #L3a2d7e.  return @kind void;
}
procedure `void` `a`(`k2.n$a` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lk2/n$a;.a:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a2d90.  v0:= v4.`k2.n$a.a` @type ^`boolean` @kind boolean;
  #L3a2d94.  if v0 != 0 then goto L3a2d9a;
  #L3a2d98.  return @kind void;
  #L3a2d9a.  v7:= v7 - v6 @kind int;
  #L3a2d9c.  v0:= v4.`k2.n$a.d` @type ^`byte`[] @kind object;
  #L3a2da0.  v1:= length @variable v0;
  #L3a2da2.  v2:= v4.`k2.n$a.b` @type ^`int`;
  #L3a2da6.  v3:= v2 + v7 @kind int;
  #L3a2daa.  if v1 >= v3 then goto L3a2dc0;
  #L3a2dae.  v2:= v2 + v7 @kind int;
  #L3a2db0.  v2:= v2 * 2;
  #L3a2db4.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L3a2dba.  v0:= temp @kind object;
  #L3a2dbc.  v4.`k2.n$a.d` @type ^`byte`[] := v0 @kind object;
  #L3a2dc0.  v0:= v4.`k2.n$a.d` @type ^`byte`[] @kind object;
  #L3a2dc4.  v1:= v4.`k2.n$a.b` @type ^`int`;
  #L3a2dc8.  call `arraycopy`(v5, v6, v0, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a2dce.  v5:= v4.`k2.n$a.b` @type ^`int`;
  #L3a2dd2.  v5:= v5 + v7 @kind int;
  #L3a2dd4.  v4.`k2.n$a.b` @type ^`int` := v5;
  #L3a2dd8.  return @kind void;
}
procedure `boolean` `b`(`k2.n$a` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lk2/n$a;.b:(II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a2ce4.  v0:= v3.`k2.n$a.a` @type ^`boolean` @kind boolean;
  #L3a2ce8.  v1:= 1I;
  #L3a2cea.  v2:= 0I;
  #L3a2cec.  if v0 == 0 then goto L3a2d16;
  #L3a2cf0.  v0:= v3.`k2.n$a.b` @type ^`int`;
  #L3a2cf4.  v0:= v0 - v5 @kind int;
  #L3a2cf6.  v3.`k2.n$a.b` @type ^`int` := v0;
  #L3a2cfa.  v5:= v3.`k2.n$a.c` @type ^`int`;
  #L3a2cfe.  if v5 != 0 then goto L3a2d10;
  #L3a2d02.  v5:= 181I;
  #L3a2d06.  if v4 != v5 then goto L3a2d10;
  #L3a2d0a.  v3.`k2.n$a.c` @type ^`int` := v0;
  #L3a2d0e.  goto L3a2d22;
  #L3a2d10.  v3.`k2.n$a.a` @type ^`boolean` := v2 @kind boolean;
  #L3a2d14.  return v1;
  #L3a2d16.  v5:= 179I;
  #L3a2d1a.  if v4 != v5 then goto L3a2d22;
  #L3a2d1e.  v3.`k2.n$a.a` @type ^`boolean` := v1 @kind boolean;
  #L3a2d22.  v4:= `@@k2.n$a.e` @type ^`byte`[] @kind object;
  #L3a2d26.  v5:= length @variable v4;
  #L3a2d28.  call `a`(v3, v4, v2, v5) @signature `Lk2/n$a;.a:([BII)V` @kind virtual;
  #L3a2d2e.  return v2;
}
procedure `void` `c`(`k2.n$a` v1 @kind this) @signature `Lk2/n$a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a2dec.  v0:= 0I;
  #L3a2dee.  v1.`k2.n$a.a` @type ^`boolean` := v0 @kind boolean;
  #L3a2df2.  v1.`k2.n$a.b` @type ^`int` := v0;
  #L3a2df6.  v1.`k2.n$a.c` @type ^`int` := v0;
  #L3a2dfa.  return @kind void;
}
