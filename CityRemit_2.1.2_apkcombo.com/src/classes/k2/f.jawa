record `k2.f` @kind class @AccessFlag PUBLIC_FINAL extends `k2.m` @kind interface {
  `s3.y` `k2.f.a` @AccessFlag PRIVATE_FINAL;
  `s3.z` `k2.f.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `k2.f.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `k2.f.d` @AccessFlag PRIVATE;
  `a2.d0` `k2.f.e` @AccessFlag PRIVATE;
  `int` `k2.f.f` @AccessFlag PRIVATE;
  `int` `k2.f.g` @AccessFlag PRIVATE;
  `boolean` `k2.f.h` @AccessFlag PRIVATE;
  `boolean` `k2.f.i` @AccessFlag PRIVATE;
  `long` `k2.f.j` @AccessFlag PRIVATE;
  `v1.j1` `k2.f.k` @AccessFlag PRIVATE;
  `int` `k2.f.l` @AccessFlag PRIVATE;
  `long` `k2.f.m` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`k2.f` v1 @kind this) @signature `Lk2/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a0f14.  v0:= 0I;
  #L3a0f16.  call `<init>`(v1, v0) @signature `Lk2/f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a0f1c.  return @kind void;
}
procedure `void` `<init>`(`k2.f` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lk2/f;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3a0f30.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a0f36.  v0:= new `s3.y`;
  #L3a0f3a.  v1:= 16I;
  #L3a0f3e.  v1:= new `byte`[v1];
  #L3a0f42.  call `<init>`(v0, v1) @signature `Ls3/y;.<init>:([B)V` @kind direct;
  #L3a0f48.  v2.`k2.f.a` @type ^`s3.y` := v0 @kind object;
  #L3a0f4c.  v1:= new `s3.z`;
  #L3a0f50.  v0:= v0.`s3.y.a` @type ^`byte`[] @kind object;
  #L3a0f54.  call `<init>`(v1, v0) @signature `Ls3/z;.<init>:([B)V` @kind direct;
  #L3a0f5a.  v2.`k2.f.b` @type ^`s3.z` := v1 @kind object;
  #L3a0f5e.  v0:= 0I;
  #L3a0f60.  v2.`k2.f.f` @type ^`int` := v0;
  #L3a0f64.  v2.`k2.f.g` @type ^`int` := v0;
  #L3a0f68.  v2.`k2.f.h` @type ^`boolean` := v0 @kind boolean;
  #L3a0f6c.  v2.`k2.f.i` @type ^`boolean` := v0 @kind boolean;
  #L3a0f70.  v0:= -4.9E-324D;
  #L3a0f7a.  v2.`k2.f.m` @type ^`long` := v0 @kind wide;
  #L3a0f7e.  v2.`k2.f.c` @type ^`java.lang.String` := v3 @kind object;
  #L3a0f82.  return @kind void;
}
procedure `boolean` `b`(`k2.f` v2 @kind this, `s3.z` v3 @kind object, `byte`[] v4 @kind object, `int` v5 ) @signature `Lk2/f;.b:(Ls3/z;[BI)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3a0e58.  call temp:= `a`(v3) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a0e5e.  v0:= temp;
  #L3a0e60.  v1:= v2.`k2.f.g` @type ^`int`;
  #L3a0e64.  v1:= v5 - v1 @kind int;
  #L3a0e68.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3a0e6e.  v0:= temp;
  #L3a0e70.  v1:= v2.`k2.f.g` @type ^`int`;
  #L3a0e74.  call `j`(v3, v4, v1, v0) @signature `Ls3/z;.j:([BII)V` @kind virtual;
  #L3a0e7a.  v3:= v2.`k2.f.g` @type ^`int`;
  #L3a0e7e.  v3:= v3 + v0 @kind int;
  #L3a0e80.  v2.`k2.f.g` @type ^`int` := v3;
  #L3a0e84.  if v3 != v5 then goto L3a0e8c;
  #L3a0e88.  v3:= 1I;
  #L3a0e8a.  goto L3a0e8e;
  #L3a0e8c.  v3:= 0I;
  #L3a0e8e.  return v3;
}
procedure `void` `g`(`k2.f` v5 @kind this) @signature `Lk2/f;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3a114c.  v0:= v5.`k2.f.a` @type ^`s3.y` @kind object;
  #L3a1150.  v1:= 0I;
  #L3a1152.  call `p`(v0, v1) @signature `Ls3/y;.p:(I)V` @kind virtual;
  #L3a1158.  v0:= v5.`k2.f.a` @type ^`s3.y` @kind object;
  #L3a115c.  call temp:= `d`(v0) @signature `Lx1/c;.d:(Ls3/y;)Lx1/c$b;` @kind static;
  #L3a1162.  v0:= temp @kind object;
  #L3a1164.  v1:= v5.`k2.f.k` @type ^`v1.j1` @kind object;
  #L3a1168.  v2:= "audio/ac4" @kind object;
  #L3a116c.  if v1 == 0 then goto L3a1198;
  #L3a1170.  v3:= v0.`x1.c$b.b` @type ^`int`;
  #L3a1174.  v4:= v1.`v1.j1.M` @type ^`int`;
  #L3a1178.  if v3 != v4 then goto L3a1198;
  #L3a117c.  v3:= v0.`x1.c$b.a` @type ^`int`;
  #L3a1180.  v4:= v1.`v1.j1.N` @type ^`int`;
  #L3a1184.  if v3 != v4 then goto L3a1198;
  #L3a1188.  v1:= v1.`v1.j1.z` @type ^`java.lang.String` @kind object;
  #L3a118c.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3a1192.  v1:= temp;
  #L3a1194.  if v1 != 0 then goto L3a11f0;
  #L3a1198.  v1:= new `v1.j1$b`;
  #L3a119c.  call `<init>`(v1) @signature `Lv1/j1$b;.<init>:()V` @kind direct;
  #L3a11a2.  v3:= v5.`k2.f.d` @type ^`java.lang.String` @kind object;
  #L3a11a6.  call temp:= `S`(v1, v3) @signature `Lv1/j1$b;.S:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a11ac.  v1:= temp @kind object;
  #L3a11ae.  call temp:= `e0`(v1, v2) @signature `Lv1/j1$b;.e0:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a11b4.  v1:= temp @kind object;
  #L3a11b6.  v2:= v0.`x1.c$b.b` @type ^`int`;
  #L3a11ba.  call temp:= `H`(v1, v2) @signature `Lv1/j1$b;.H:(I)Lv1/j1$b;` @kind virtual;
  #L3a11c0.  v1:= temp @kind object;
  #L3a11c2.  v2:= v0.`x1.c$b.a` @type ^`int`;
  #L3a11c6.  call temp:= `f0`(v1, v2) @signature `Lv1/j1$b;.f0:(I)Lv1/j1$b;` @kind virtual;
  #L3a11cc.  v1:= temp @kind object;
  #L3a11ce.  v2:= v5.`k2.f.c` @type ^`java.lang.String` @kind object;
  #L3a11d2.  call temp:= `V`(v1, v2) @signature `Lv1/j1$b;.V:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a11d8.  v1:= temp @kind object;
  #L3a11da.  call temp:= `E`(v1) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L3a11e0.  v1:= temp @kind object;
  #L3a11e2.  v5.`k2.f.k` @type ^`v1.j1` := v1 @kind object;
  #L3a11e6.  v2:= v5.`k2.f.e` @type ^`a2.d0` @kind object;
  #L3a11ea.  call `b`(v2, v1) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L3a11f0.  v1:= v0.`x1.c$b.c` @type ^`int`;
  #L3a11f4.  v5.`k2.f.l` @type ^`int` := v1;
  #L3a11f8.  v1:= 1000000L;
  #L3a11fe.  v0:= v0.`x1.c$b.d` @type ^`int`;
  #L3a1202.  v3:= (`long`) v0 @kind i2l;
  #L3a1204.  v3:= v3 * v1 @kind long;
  #L3a1208.  v0:= v5.`k2.f.k` @type ^`v1.j1` @kind object;
  #L3a120c.  v0:= v0.`v1.j1.N` @type ^`int`;
  #L3a1210.  v0:= (`long`) v0 @kind i2l;
  #L3a1212.  v3:= v3 / v0 @kind long;
  #L3a1214.  v5.`k2.f.j` @type ^`long` := v3 @kind wide;
  #L3a1218.  return @kind void;
}
procedure `boolean` `h`(`k2.f` v5 @kind this, `s3.z` v6 @kind object) @signature `Lk2/f;.h:(Ls3/z;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3a0ea0.  call temp:= `a`(v6) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a0ea6.  v0:= temp;
  #L3a0ea8.  v1:= 0I;
  #L3a0eaa.  if v0 <= 0 then goto L3a0f02;
  #L3a0eae.  v0:= v5.`k2.f.h` @type ^`boolean` @kind boolean;
  #L3a0eb2.  v2:= 172I;
  #L3a0eb6.  v3:= 1I;
  #L3a0eb8.  if v0 != 0 then goto L3a0ed0;
  #L3a0ebc.  call temp:= `C`(v6) @signature `Ls3/z;.C:()I` @kind virtual;
  #L3a0ec2.  v0:= temp;
  #L3a0ec4.  if v0 != v2 then goto L3a0eca;
  #L3a0ec8.  v1:= 1I;
  #L3a0eca.  v5.`k2.f.h` @type ^`boolean` := v1 @kind boolean;
  #L3a0ece.  goto L3a0ea0;
  #L3a0ed0.  call temp:= `C`(v6) @signature `Ls3/z;.C:()I` @kind virtual;
  #L3a0ed6.  v0:= temp;
  #L3a0ed8.  if v0 != v2 then goto L3a0ee0;
  #L3a0edc.  v2:= 1I;
  #L3a0ede.  goto L3a0ee2;
  #L3a0ee0.  v2:= 0I;
  #L3a0ee2.  v5.`k2.f.h` @type ^`boolean` := v2 @kind boolean;
  #L3a0ee6.  v2:= 64I;
  #L3a0eea.  v4:= 65I;
  #L3a0eee.  if v0 == v2 then goto L3a0ef6;
  #L3a0ef2.  if v0 != v4 then goto L3a0ea0;
  #L3a0ef6.  if v0 != v4 then goto L3a0efc;
  #L3a0efa.  v1:= 1I;
  #L3a0efc.  v5.`k2.f.i` @type ^`boolean` := v1 @kind boolean;
  #L3a0f00.  return v3;
  #L3a0f02.  return v1;
}
procedure `void` `a`(`k2.f` v2 @kind this) @signature `Lk2/f;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a122c.  v0:= 0I;
  #L3a122e.  v2.`k2.f.f` @type ^`int` := v0;
  #L3a1232.  v2.`k2.f.g` @type ^`int` := v0;
  #L3a1236.  v2.`k2.f.h` @type ^`boolean` := v0 @kind boolean;
  #L3a123a.  v2.`k2.f.i` @type ^`boolean` := v0 @kind boolean;
  #L3a123e.  v0:= -4.9E-324D;
  #L3a1248.  v2.`k2.f.m` @type ^`long` := v0 @kind wide;
  #L3a124c.  return @kind void;
}
procedure `void` `c`(`k2.f` v10 @kind this, `s3.z` v11 @kind object) @signature `Lk2/f;.c:(Ls3/z;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3a0f94.  v0:= v10.`k2.f.e` @type ^`a2.d0` @kind object;
  #L3a0f98.  call temp:= `h`(v0) @signature `Ls3/a;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3a0f9e.  call temp:= `a`(v11) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a0fa4.  v0:= temp;
  #L3a0fa6.  if v0 <= 0 then goto L3a10c2;
  #L3a0faa.  v0:= v10.`k2.f.f` @type ^`int`;
  #L3a0fae.  v1:= 0I;
  #L3a0fb0.  v2:= 2I;
  #L3a0fb2.  v3:= 1I;
  #L3a0fb4.  if v0 == 0 then goto L3a1072;
  #L3a0fb8.  if v0 == v3 then goto L3a1032;
  #L3a0fbc.  if v0 == v2 then goto L3a0fc2;
  #L3a0fc0.  goto L3a0f9e;
  #L3a0fc2.  call temp:= `a`(v11) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a0fc8.  v0:= temp;
  #L3a0fca.  v2:= v10.`k2.f.l` @type ^`int`;
  #L3a0fce.  v3:= v10.`k2.f.g` @type ^`int`;
  #L3a0fd2.  v2:= v2 - v3 @kind int;
  #L3a0fd4.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3a0fda.  v0:= temp;
  #L3a0fdc.  v2:= v10.`k2.f.e` @type ^`a2.d0` @kind object;
  #L3a0fe0.  call `c`(v2, v11, v0) @signature `La2/d0;.c:(Ls3/z;I)V` @kind interface;
  #L3a0fe6.  v2:= v10.`k2.f.g` @type ^`int`;
  #L3a0fea.  v2:= v2 + v0 @kind int;
  #L3a0fec.  v10.`k2.f.g` @type ^`int` := v2;
  #L3a0ff0.  v7:= v10.`k2.f.l` @type ^`int`;
  #L3a0ff4.  if v2 != v7 then goto L3a0f9e;
  #L3a0ff8.  v4:= v10.`k2.f.m` @type ^`long` @kind wide;
  #L3a0ffc.  v2:= -4.9E-324D;
  #L3a1006.  v0:= lcmp(v4, v2);
  #L3a100a.  if v0 == 0 then goto L3a102c;
  #L3a100e.  v3:= v10.`k2.f.e` @type ^`a2.d0` @kind object;
  #L3a1012.  v6:= 1I;
  #L3a1014.  v8:= 0I;
  #L3a1016.  v9:= 0I;
  #L3a1018.  call `f`(v3, v4, v6, v7, v8, v9) @signature `La2/d0;.f:(JIIILa2/d0$a;)V` @kind interface;
  #L3a101e.  v2:= v10.`k2.f.m` @type ^`long` @kind wide;
  #L3a1022.  v4:= v10.`k2.f.j` @type ^`long` @kind wide;
  #L3a1026.  v2:= v2 + v4 @kind long;
  #L3a1028.  v10.`k2.f.m` @type ^`long` := v2 @kind wide;
  #L3a102c.  v10.`k2.f.f` @type ^`int` := v1;
  #L3a1030.  goto L3a0f9e;
  #L3a1032.  v0:= v10.`k2.f.b` @type ^`s3.z` @kind object;
  #L3a1036.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a103c.  v0:= temp @kind object;
  #L3a103e.  v3:= 16I;
  #L3a1042.  call temp:= `b`(v10, v11, v0, v3) @signature `Lk2/f;.b:(Ls3/z;[BI)Z` @kind direct;
  #L3a1048.  v0:= temp;
  #L3a104a.  if v0 == 0 then goto L3a0f9e;
  #L3a104e.  call `g`(v10) @signature `Lk2/f;.g:()V` @kind direct;
  #L3a1054.  v0:= v10.`k2.f.b` @type ^`s3.z` @kind object;
  #L3a1058.  call `O`(v0, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a105e.  v0:= v10.`k2.f.e` @type ^`a2.d0` @kind object;
  #L3a1062.  v1:= v10.`k2.f.b` @type ^`s3.z` @kind object;
  #L3a1066.  call `c`(v0, v1, v3) @signature `La2/d0;.c:(Ls3/z;I)V` @kind interface;
  #L3a106c.  v10.`k2.f.f` @type ^`int` := v2;
  #L3a1070.  goto L3a0f9e;
  #L3a1072.  call temp:= `h`(v10, v11) @signature `Lk2/f;.h:(Ls3/z;)Z` @kind direct;
  #L3a1078.  v0:= temp;
  #L3a107a.  if v0 == 0 then goto L3a0f9e;
  #L3a107e.  v10.`k2.f.f` @type ^`int` := v3;
  #L3a1082.  v0:= v10.`k2.f.b` @type ^`s3.z` @kind object;
  #L3a1086.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a108c.  v0:= temp @kind object;
  #L3a108e.  v4:= -84I;
  #L3a1092.  v0[v1]:= v4 @kind byte;
  #L3a1096.  v0:= v10.`k2.f.b` @type ^`s3.z` @kind object;
  #L3a109a.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a10a0.  v0:= temp @kind object;
  #L3a10a2.  v1:= v10.`k2.f.i` @type ^`boolean` @kind boolean;
  #L3a10a6.  if v1 == 0 then goto L3a10b0;
  #L3a10aa.  v1:= 65I;
  #L3a10ae.  goto L3a10b4;
  #L3a10b0.  v1:= 64I;
  #L3a10b4.  v1:= (`byte`) v1 @kind i2b;
  #L3a10b6.  v0[v3]:= v1 @kind byte;
  #L3a10ba.  v10.`k2.f.g` @type ^`int` := v2;
  #L3a10be.  goto L3a0f9e;
  #L3a10c2.  return @kind void;
}
procedure `void` `d`(`k2.f` v1 @kind this, `a2.n` v2 @kind object, `k2.i0$d` v3 @kind object) @signature `Lk2/f;.d:(La2/n;Lk2/i0$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a10d4.  call `a`(v3) @signature `Lk2/i0$d;.a:()V` @kind virtual;
  #L3a10da.  call temp:= `b`(v3) @signature `Lk2/i0$d;.b:()Ljava/lang/String;` @kind virtual;
  #L3a10e0.  v0:= temp @kind object;
  #L3a10e2.  v1.`k2.f.d` @type ^`java.lang.String` := v0 @kind object;
  #L3a10e6.  call temp:= `c`(v3) @signature `Lk2/i0$d;.c:()I` @kind virtual;
  #L3a10ec.  v3:= temp;
  #L3a10ee.  v0:= 1I;
  #L3a10f0.  call temp:= `e`(v2, v3, v0) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L3a10f6.  v2:= temp @kind object;
  #L3a10f8.  v1.`k2.f.e` @type ^`a2.d0` := v2 @kind object;
  #L3a10fc.  return @kind void;
}
procedure `void` `e`(`k2.f` v0 @kind this) @signature `Lk2/f;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L3a1110.  return @kind void;
}
procedure `void` `f`(`k2.f` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lk2/f;.f:(JI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a1124.  v0:= -4.9E-324D;
  #L3a112e.  v5:= lcmp(v3, v0);
  #L3a1132.  if v5 == 0 then goto L3a113a;
  #L3a1136.  v2.`k2.f.m` @type ^`long` := v3 @kind wide;
  #L3a113a.  return @kind void;
}
