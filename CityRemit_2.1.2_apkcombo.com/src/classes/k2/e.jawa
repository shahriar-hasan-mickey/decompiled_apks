record `k2.e` @kind class @AccessFlag PUBLIC_FINAL extends `a2.l` @kind interface {
  `k2.f` `k2.e.a` @AccessFlag PRIVATE_FINAL;
  `s3.z` `k2.e.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `k2.e.c` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Lk2/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a0d84.  v0:= `@@k2.d.b` @type ^`k2.d` @kind object;
  #L3a0d88.  return @kind void;
}
procedure `void` `<init>`(`k2.e` v2 @kind this) @signature `Lk2/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3a0d9c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a0da2.  v0:= new `k2.f`;
  #L3a0da6.  call `<init>`(v0) @signature `Lk2/f;.<init>:()V` @kind direct;
  #L3a0dac.  v2.`k2.e.a` @type ^`k2.f` := v0 @kind object;
  #L3a0db0.  v0:= new `s3.z`;
  #L3a0db4.  v1:= 16384I;
  #L3a0db8.  call `<init>`(v0, v1) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L3a0dbe.  v2.`k2.e.b` @type ^`s3.z` := v0 @kind object;
  #L3a0dc2.  return @kind void;
}
procedure `a2.l`[] `c`() @signature `Lk2/e;.c:()[La2/l;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;

  #L3a0bd4.  call temp:= `e`() @signature `Lk2/e;.e:()[La2/l;` @kind static;
  #L3a0bda.  v0:= temp @kind object;
  #L3a0bdc.  return v0 @kind object;
}
procedure `a2.l`[] `e`() @signature `Lk2/e;.e:()[La2/l;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L3a0bf0.  v0:= 1I;
  #L3a0bf2.  v0:= new `a2.l`[v0];
  #L3a0bf6.  v1:= new `k2.e`;
  #L3a0bfa.  call `<init>`(v1) @signature `Lk2/e;.<init>:()V` @kind direct;
  #L3a0c00.  v2:= 0I;
  #L3a0c02.  v0[v2]:= v1 @kind object;
  #L3a0c06.  return v0 @kind object;
}
procedure `void` `a`(`k2.e` v0 @kind this) @signature `Lk2/e;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L3a0e20.  return @kind void;
}
procedure `void` `b`(`k2.e` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lk2/e;.b:(JJ)V` @AccessFlag PUBLIC {
    temp;

  #L3a0e34.  v1:= 0I;
  #L3a0e36.  v0.`k2.e.c` @type ^`boolean` := v1 @kind boolean;
  #L3a0e3a.  v1:= v0.`k2.e.a` @type ^`k2.f` @kind object;
  #L3a0e3e.  call `a`(v1) @signature `Lk2/f;.a:()V` @kind virtual;
  #L3a0e44.  return @kind void;
}
procedure `void` `d`(`k2.e` v4 @kind this, `a2.n` v5 @kind object) @signature `Lk2/e;.d:(La2/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a0dd4.  v0:= v4.`k2.e.a` @type ^`k2.f` @kind object;
  #L3a0dd8.  v1:= new `k2.i0$d`;
  #L3a0ddc.  v2:= 0I;
  #L3a0dde.  v3:= 1I;
  #L3a0de0.  call `<init>`(v1, v2, v3) @signature `Lk2/i0$d;.<init>:(II)V` @kind direct;
  #L3a0de6.  call `d`(v0, v5, v1) @signature `Lk2/f;.d:(La2/n;Lk2/i0$d;)V` @kind virtual;
  #L3a0dec.  call `h`(v5) @signature `La2/n;.h:()V` @kind interface;
  #L3a0df2.  v0:= new `a2.a0$b`;
  #L3a0df6.  v1:= -4.9E-324D;
  #L3a0e00.  call `<init>`(v0, v1) @signature `La2/a0$b;.<init>:(J)V` @kind direct;
  #L3a0e06.  call `m`(v5, v0) @signature `La2/n;.m:(La2/a0;)V` @kind interface;
  #L3a0e0c.  return @kind void;
}
procedure `boolean` `g`(`k2.e` v8 @kind this, `a2.m` v9 @kind object) @signature `Lk2/e;.g:(La2/m;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3a0c18.  v0:= new `s3.z`;
  #L3a0c1c.  v1:= 10I;
  #L3a0c20.  call `<init>`(v0, v1) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L3a0c26.  v2:= 0I;
  #L3a0c28.  v3:= 0I;
  #L3a0c2a.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a0c30.  v4:= temp @kind object;
  #L3a0c32.  call `o`(v9, v4, v2, v1) @signature `La2/m;.o:([BII)V` @kind interface;
  #L3a0c38.  call `O`(v0, v2) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a0c3e.  call temp:= `F`(v0) @signature `Ls3/z;.F:()I` @kind virtual;
  #L3a0c44.  v4:= temp;
  #L3a0c46.  v5:= 4801587I;
  #L3a0c4c.  if v4 == v5 then goto L3a0ce2;
  #L3a0c50.  call `i`(v9) @signature `La2/m;.i:()V` @kind interface;
  #L3a0c56.  call `p`(v9, v3) @signature `La2/m;.p:(I)V` @kind interface;
  #L3a0c5c.  v4:= v3;
  #L3a0c5e.  v1:= 0I;
  #L3a0c60.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a0c66.  v5:= temp @kind object;
  #L3a0c68.  v6:= 7I;
  #L3a0c6a.  call `o`(v9, v5, v2, v6) @signature `La2/m;.o:([BII)V` @kind interface;
  #L3a0c70.  call `O`(v0, v2) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a0c76.  call temp:= `I`(v0) @signature `Ls3/z;.I:()I` @kind virtual;
  #L3a0c7c.  v5:= temp;
  #L3a0c7e.  v6:= 44096I;
  #L3a0c84.  if v5 == v6 then goto L3a0cb2;
  #L3a0c88.  v6:= 44097I;
  #L3a0c8e.  if v5 == v6 then goto L3a0cb2;
  #L3a0c92.  call `i`(v9) @signature `La2/m;.i:()V` @kind interface;
  #L3a0c98.  v4:= v4 + 1;
  #L3a0c9c.  v1:= v4 - v3 @kind int;
  #L3a0ca0.  v5:= 8192I;
  #L3a0ca4.  if v1 < v5 then goto L3a0caa;
  #L3a0ca8.  return v2;
  #L3a0caa.  call `p`(v9, v4) @signature `La2/m;.p:(I)V` @kind interface;
  #L3a0cb0.  goto L3a0c5e;
  #L3a0cb2.  v6:= 1I;
  #L3a0cb4.  v1:= v1 + v6 @kind int;
  #L3a0cb6.  v7:= 4I;
  #L3a0cb8.  if v1 < v7 then goto L3a0cbe;
  #L3a0cbc.  return v6;
  #L3a0cbe.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a0cc4.  v6:= temp @kind object;
  #L3a0cc6.  call temp:= `e`(v6, v5) @signature `Lx1/c;.e:([BI)I` @kind static;
  #L3a0ccc.  v5:= temp;
  #L3a0cce.  v6:= -1I;
  #L3a0cd0.  if v5 != v6 then goto L3a0cd6;
  #L3a0cd4.  return v2;
  #L3a0cd6.  v5:= v5 + -7;
  #L3a0cda.  call `p`(v9, v5) @signature `La2/m;.p:(I)V` @kind interface;
  #L3a0ce0.  goto L3a0c60;
  #L3a0ce2.  v4:= 3I;
  #L3a0ce4.  call `P`(v0, v4) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L3a0cea.  call temp:= `B`(v0) @signature `Ls3/z;.B:()I` @kind virtual;
  #L3a0cf0.  v4:= temp;
  #L3a0cf2.  v5:= v4 + 10;
  #L3a0cf6.  v3:= v3 + v5 @kind int;
  #L3a0cf8.  call `p`(v9, v4) @signature `La2/m;.p:(I)V` @kind interface;
  #L3a0cfe.  goto L3a0c2a;
}
procedure `int` `j`(`k2.e` v3 @kind this, `a2.m` v4 @kind object, `a2.z` v5 @kind object) @signature `Lk2/e;.j:(La2/m;La2/z;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a0d10.  v5:= v3.`k2.e.b` @type ^`s3.z` @kind object;
  #L3a0d14.  call temp:= `d`(v5) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a0d1a.  v5:= temp @kind object;
  #L3a0d1c.  v0:= 0I;
  #L3a0d1e.  v1:= 16384I;
  #L3a0d22.  call temp:= `b`(v4, v5, v0, v1) @signature `La2/m;.b:([BII)I` @kind interface;
  #L3a0d28.  v4:= temp;
  #L3a0d2a.  v5:= -1I;
  #L3a0d2c.  if v4 != v5 then goto L3a0d32;
  #L3a0d30.  return v5;
  #L3a0d32.  v5:= v3.`k2.e.b` @type ^`s3.z` @kind object;
  #L3a0d36.  call `O`(v5, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a0d3c.  v5:= v3.`k2.e.b` @type ^`s3.z` @kind object;
  #L3a0d40.  call `N`(v5, v4) @signature `Ls3/z;.N:(I)V` @kind virtual;
  #L3a0d46.  v4:= v3.`k2.e.c` @type ^`boolean` @kind boolean;
  #L3a0d4a.  if v4 != 0 then goto L3a0d64;
  #L3a0d4e.  v4:= v3.`k2.e.a` @type ^`k2.f` @kind object;
  #L3a0d52.  v1:= 0L;
  #L3a0d56.  v5:= 4I;
  #L3a0d58.  call `f`(v4, v1, v5) @signature `Lk2/f;.f:(JI)V` @kind virtual;
  #L3a0d5e.  v4:= 1I;
  #L3a0d60.  v3.`k2.e.c` @type ^`boolean` := v4 @kind boolean;
  #L3a0d64.  v4:= v3.`k2.e.a` @type ^`k2.f` @kind object;
  #L3a0d68.  v5:= v3.`k2.e.b` @type ^`s3.z` @kind object;
  #L3a0d6c.  call `c`(v4, v5) @signature `Lk2/f;.c:(Ls3/z;)V` @kind virtual;
  #L3a0d72.  return v0;
}
