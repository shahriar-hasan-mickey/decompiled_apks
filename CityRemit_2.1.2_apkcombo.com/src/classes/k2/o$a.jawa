record `k2.o$a` @kind class @AccessFlag FINAL {
  `boolean` `k2.o$a.a` @AccessFlag PRIVATE;
  `int` `k2.o$a.b` @AccessFlag PRIVATE;
  `int` `k2.o$a.c` @AccessFlag PUBLIC;
  `int` `k2.o$a.d` @AccessFlag PUBLIC;
  `byte`[] `k2.o$a.e` @AccessFlag PUBLIC;
}
global `byte`[] `@@k2.o$a.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lk2/o$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a3494.  v0:= 3I;
  #L3a3496.  v0:= new `byte`[v0];
  #L3a349a.  goto L3a34a8;
  #L3a34a0.  `@@k2.o$a.f` @type ^`byte`[] := v0 @kind object;
  #L3a34a4.  return @kind void;
  #L3a34a6.  
  #L3a34a8.  v0:= (0I, 0I, 1I) @kind object;
  #L3a34b3.  goto L3a34a0;
}
procedure `void` `<init>`(`k2.o$a` v0 @kind this, `int` v1 ) @signature `Lk2/o$a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a34c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a34ca.  v1:= new `byte`[v1];
  #L3a34ce.  v0.`k2.o$a.e` @type ^`byte`[] := v1 @kind object;
  #L3a34d2.  return @kind void;
}
procedure `void` `a`(`k2.o$a` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lk2/o$a;.a:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a34e4.  v0:= v4.`k2.o$a.a` @type ^`boolean` @kind boolean;
  #L3a34e8.  if v0 != 0 then goto L3a34ee;
  #L3a34ec.  return @kind void;
  #L3a34ee.  v7:= v7 - v6 @kind int;
  #L3a34f0.  v0:= v4.`k2.o$a.e` @type ^`byte`[] @kind object;
  #L3a34f4.  v1:= length @variable v0;
  #L3a34f6.  v2:= v4.`k2.o$a.c` @type ^`int`;
  #L3a34fa.  v3:= v2 + v7 @kind int;
  #L3a34fe.  if v1 >= v3 then goto L3a3514;
  #L3a3502.  v2:= v2 + v7 @kind int;
  #L3a3504.  v2:= v2 * 2;
  #L3a3508.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L3a350e.  v0:= temp @kind object;
  #L3a3510.  v4.`k2.o$a.e` @type ^`byte`[] := v0 @kind object;
  #L3a3514.  v0:= v4.`k2.o$a.e` @type ^`byte`[] @kind object;
  #L3a3518.  v1:= v4.`k2.o$a.c` @type ^`int`;
  #L3a351c.  call `arraycopy`(v5, v6, v0, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a3522.  v5:= v4.`k2.o$a.c` @type ^`int`;
  #L3a3526.  v5:= v5 + v7 @kind int;
  #L3a3528.  v4.`k2.o$a.c` @type ^`int` := v5;
  #L3a352c.  return @kind void;
}
procedure `boolean` `b`(`k2.o$a` v8 @kind this, `int` v9 , `int` v10 ) @signature `Lk2/o$a;.b:(II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3a33d0.  v0:= v8.`k2.o$a.b` @type ^`int`;
  #L3a33d4.  v1:= 0I;
  #L3a33d6.  v2:= 1I;
  #L3a33d8.  if v0 == 0 then goto L3a3466;
  #L3a33dc.  v3:= 181I;
  #L3a33e0.  v4:= 2I;
  #L3a33e2.  v5:= "Unexpected start code value" @kind object;
  #L3a33e6.  v6:= "H263Reader" @kind object;
  #L3a33ea.  if v0 == v2 then goto L3a344e;
  #L3a33ee.  v7:= 3I;
  #L3a33f0.  if v0 == v4 then goto L3a343e;
  #L3a33f4.  v4:= 4I;
  #L3a33f6.  if v0 == v7 then goto L3a3426;
  #L3a33fa.  if v0 != v4 then goto L3a341a;
  #L3a33fe.  v0:= 179I;
  #L3a3402.  if v9 == v0 then goto L3a340a;
  #L3a3406.  if v9 != v3 then goto L3a3476;
  #L3a340a.  v9:= v8.`k2.o$a.c` @type ^`int`;
  #L3a340e.  v9:= v9 - v10 @kind int;
  #L3a3410.  v8.`k2.o$a.c` @type ^`int` := v9;
  #L3a3414.  v8.`k2.o$a.a` @type ^`boolean` := v1 @kind boolean;
  #L3a3418.  return v2;
  #L3a341a.  v9:= new `java.lang.IllegalStateException`;
  #L3a341e.  call `<init>`(v9) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3a3424.  throw v9;
  #L3a3426.  v9:= v9 ^& 240;
  #L3a342a.  v10:= 32I;
  #L3a342e.  if v9 == v10 then goto L3a3434;
  #L3a3432.  goto L3a3452;
  #L3a3434.  v9:= v8.`k2.o$a.c` @type ^`int`;
  #L3a3438.  v8.`k2.o$a.d` @type ^`int` := v9;
  #L3a343c.  goto L3a3460;
  #L3a343e.  v10:= 31I;
  #L3a3442.  if v9 <= v10 then goto L3a3448;
  #L3a3446.  goto L3a3452;
  #L3a3448.  v8.`k2.o$a.b` @type ^`int` := v7;
  #L3a344c.  goto L3a3476;
  #L3a344e.  if v9 == v3 then goto L3a3460;
  #L3a3452.  call `h`(v6, v5) @signature `Ls3/q;.h:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L3a3458.  call `c`(v8) @signature `Lk2/o$a;.c:()V` @kind virtual;
  #L3a345e.  goto L3a3476;
  #L3a3460.  v8.`k2.o$a.b` @type ^`int` := v4;
  #L3a3464.  goto L3a3476;
  #L3a3466.  v10:= 176I;
  #L3a346a.  if v9 != v10 then goto L3a3476;
  #L3a346e.  v8.`k2.o$a.b` @type ^`int` := v2;
  #L3a3472.  v8.`k2.o$a.a` @type ^`boolean` := v2 @kind boolean;
  #L3a3476.  v9:= `@@k2.o$a.f` @type ^`byte`[] @kind object;
  #L3a347a.  v10:= length @variable v9;
  #L3a347c.  call `a`(v8, v9, v1, v10) @signature `Lk2/o$a;.a:([BII)V` @kind virtual;
  #L3a3482.  return v1;
}
procedure `void` `c`(`k2.o$a` v1 @kind this) @signature `Lk2/o$a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a3540.  v0:= 0I;
  #L3a3542.  v1.`k2.o$a.a` @type ^`boolean` := v0 @kind boolean;
  #L3a3546.  v1.`k2.o$a.c` @type ^`int` := v0;
  #L3a354a.  v1.`k2.o$a.b` @type ^`int` := v0;
  #L3a354e.  return @kind void;
}
