record `k2.x$b` @kind class @AccessFlag FINAL extends `a2.a$f` @kind interface {
  `s3.h0` `k2.x$b.a` @AccessFlag PRIVATE_FINAL;
  `s3.z` `k2.x$b.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`k2.x$b` v0 @kind this, `s3.h0` v1 @kind object) @signature `Lk2/x$b;.<init>:(Ls3/h0;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3a6b64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a6b6a.  v0.`k2.x$b.a` @type ^`s3.h0` := v1 @kind object;
  #L3a6b6e.  v1:= new `s3.z`;
  #L3a6b72.  call `<init>`(v1) @signature `Ls3/z;.<init>:()V` @kind direct;
  #L3a6b78.  v0.`k2.x$b.b` @type ^`s3.z` := v1 @kind object;
  #L3a6b7c.  return @kind void;
}
procedure `void` `<init>`(`k2.x$b` v0 @kind this, `s3.h0` v1 @kind object, `k2.x$a` v2 @kind object) @signature `Lk2/x$b;.<init>:(Ls3/h0;Lk2/x$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3a6b90.  call `<init>`(v0, v1) @signature `Lk2/x$b;.<init>:(Ls3/h0;)V` @kind direct;
  #L3a6b96.  return @kind void;
}
procedure `a2.a$e` `c`(`k2.x$b` v9 @kind this, `s3.z` v10 @kind object, `long` v11 , `long` v13 ) @signature `Lk2/x$b;.c:(Ls3/z;JJ)La2/a$e;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3a6a04.  v0:= -1I;
  #L3a6a06.  v1:= -4.9E-324D;
  #L3a6a10.  v4:= v1 @kind wide;
  #L3a6a12.  v3:= -1I;
  #L3a6a14.  call temp:= `a`(v10) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a6a1a.  v6:= temp;
  #L3a6a1c.  v7:= 4I;
  #L3a6a1e.  if v6 < v7 then goto L3a6ad8;
  #L3a6a22.  call temp:= `d`(v10) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a6a28.  v6:= temp @kind object;
  #L3a6a2a.  call temp:= `e`(v10) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a6a30.  v8:= temp;
  #L3a6a32.  call temp:= `j`(v6, v8) @signature `Lk2/x;.j:([BI)I` @kind static;
  #L3a6a38.  v6:= temp;
  #L3a6a3a.  v8:= 442I;
  #L3a6a3e.  if v6 == v8 then goto L3a6a4c;
  #L3a6a42.  v6:= 1I;
  #L3a6a44.  call `P`(v10, v6) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L3a6a4a.  goto L3a6a14;
  #L3a6a4c.  call `P`(v10, v7) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L3a6a52.  call temp:= `l`(v10) @signature `Lk2/y;.l:(Ls3/z;)J` @kind static;
  #L3a6a58.  v6:= temp @kind wide;
  #L3a6a5a.  v0:= lcmp(v6, v1);
  #L3a6a5e.  if v0 == 0 then goto L3a6ac8;
  #L3a6a62.  v0:= v9.`k2.x$b.a` @type ^`s3.h0` @kind object;
  #L3a6a66.  call temp:= `b`(v0, v6) @signature `Ls3/h0;.b:(J)J` @kind virtual;
  #L3a6a6c.  v6:= temp @kind wide;
  #L3a6a6e.  v0:= lcmp(v6, v11);
  #L3a6a72.  if v0 <= 0 then goto L3a6a96;
  #L3a6a76.  v10:= lcmp(v4, v1);
  #L3a6a7a.  if v10 != 0 then goto L3a6a88;
  #L3a6a7e.  call temp:= `d`(v6, v13) @signature `La2/a$e;.d:(JJ)La2/a$e;` @kind static;
  #L3a6a84.  v10:= temp @kind object;
  #L3a6a86.  return v10 @kind object;
  #L3a6a88.  v10:= (`long`) v3 @kind i2l;
  #L3a6a8a.  v13:= v13 + v10 @kind long;
  #L3a6a8c.  call temp:= `e`(v13) @signature `La2/a$e;.e:(J)La2/a$e;` @kind static;
  #L3a6a92.  v10:= temp @kind object;
  #L3a6a94.  return v10 @kind object;
  #L3a6a96.  v3:= 100000L;
  #L3a6a9c.  v3:= v3 + v6 @kind long;
  #L3a6a9e.  v0:= lcmp(v3, v11);
  #L3a6aa2.  if v0 <= 0 then goto L3a6abc;
  #L3a6aa6.  call temp:= `e`(v10) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a6aac.  v10:= temp;
  #L3a6aae.  v10:= (`long`) v10 @kind i2l;
  #L3a6ab0.  v13:= v13 + v10 @kind long;
  #L3a6ab2.  call temp:= `e`(v13) @signature `La2/a$e;.e:(J)La2/a$e;` @kind static;
  #L3a6ab8.  v10:= temp @kind object;
  #L3a6aba.  return v10 @kind object;
  #L3a6abc.  call temp:= `e`(v10) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a6ac2.  v0:= temp;
  #L3a6ac4.  v3:= v0;
  #L3a6ac6.  v4:= v6 @kind wide;
  #L3a6ac8.  call `d`(v10) @signature `Lk2/x$b;.d:(Ls3/z;)V` @kind static;
  #L3a6ace.  call temp:= `e`(v10) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a6ad4.  v0:= temp;
  #L3a6ad6.  goto L3a6a14;
  #L3a6ad8.  v10:= lcmp(v4, v1);
  #L3a6adc.  if v10 == 0 then goto L3a6aee;
  #L3a6ae0.  v10:= (`long`) v0 @kind i2l;
  #L3a6ae2.  v13:= v13 + v10 @kind long;
  #L3a6ae4.  call temp:= `f`(v4, v13) @signature `La2/a$e;.f:(JJ)La2/a$e;` @kind static;
  #L3a6aea.  v10:= temp @kind object;
  #L3a6aec.  return v10 @kind object;
  #L3a6aee.  v10:= `@@a2.a$e.d` @type ^`a2.a$e` @kind object;
  #L3a6af2.  return v10 @kind object;
}
procedure `void` `d`(`s3.z` v5 @kind object) @signature `Lk2/x$b;.d:(Ls3/z;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3a6bc8.  call temp:= `f`(v5) @signature `Ls3/z;.f:()I` @kind virtual;
  #L3a6bce.  v0:= temp;
  #L3a6bd0.  call temp:= `a`(v5) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a6bd6.  v1:= temp;
  #L3a6bd8.  v2:= 10I;
  #L3a6bdc.  if v1 >= v2 then goto L3a6be8;
  #L3a6be0.  call `O`(v5, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a6be6.  return @kind void;
  #L3a6be8.  v1:= 9I;
  #L3a6bec.  call `P`(v5, v1) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L3a6bf2.  call temp:= `C`(v5) @signature `Ls3/z;.C:()I` @kind virtual;
  #L3a6bf8.  v1:= temp;
  #L3a6bfa.  v1:= v1 ^& 7;
  #L3a6bfe.  call temp:= `a`(v5) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a6c04.  v2:= temp;
  #L3a6c06.  if v2 >= v1 then goto L3a6c12;
  #L3a6c0a.  call `O`(v5, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a6c10.  return @kind void;
  #L3a6c12.  call `P`(v5, v1) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L3a6c18.  call temp:= `a`(v5) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a6c1e.  v1:= temp;
  #L3a6c20.  v2:= 4I;
  #L3a6c22.  if v1 >= v2 then goto L3a6c2e;
  #L3a6c26.  call `O`(v5, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a6c2c.  return @kind void;
  #L3a6c2e.  call temp:= `d`(v5) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a6c34.  v1:= temp @kind object;
  #L3a6c36.  call temp:= `e`(v5) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a6c3c.  v3:= temp;
  #L3a6c3e.  call temp:= `j`(v1, v3) @signature `Lk2/x;.j:([BI)I` @kind static;
  #L3a6c44.  v1:= temp;
  #L3a6c46.  v3:= 443I;
  #L3a6c4a.  if v1 != v3 then goto L3a6c76;
  #L3a6c4e.  call `P`(v5, v2) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L3a6c54.  call temp:= `I`(v5) @signature `Ls3/z;.I:()I` @kind virtual;
  #L3a6c5a.  v1:= temp;
  #L3a6c5c.  call temp:= `a`(v5) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a6c62.  v3:= temp;
  #L3a6c64.  if v3 >= v1 then goto L3a6c70;
  #L3a6c68.  call `O`(v5, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a6c6e.  return @kind void;
  #L3a6c70.  call `P`(v5, v1) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L3a6c76.  call temp:= `a`(v5) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a6c7c.  v1:= temp;
  #L3a6c7e.  if v1 < v2 then goto L3a6cfe;
  #L3a6c82.  call temp:= `d`(v5) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a6c88.  v1:= temp @kind object;
  #L3a6c8a.  call temp:= `e`(v5) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a6c90.  v3:= temp;
  #L3a6c92.  call temp:= `j`(v1, v3) @signature `Lk2/x;.j:([BI)I` @kind static;
  #L3a6c98.  v1:= temp;
  #L3a6c9a.  v3:= 442I;
  #L3a6c9e.  if v1 == v3 then goto L3a6cfe;
  #L3a6ca2.  v3:= 441I;
  #L3a6ca6.  if v1 != v3 then goto L3a6cac;
  #L3a6caa.  goto L3a6cfe;
  #L3a6cac.  v1:= v1 ^>> 8;
  #L3a6cb0.  v3:= 1I;
  #L3a6cb2.  if v1 == v3 then goto L3a6cb8;
  #L3a6cb6.  goto L3a6cfe;
  #L3a6cb8.  call `P`(v5, v2) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L3a6cbe.  call temp:= `a`(v5) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a6cc4.  v1:= temp;
  #L3a6cc6.  v3:= 2I;
  #L3a6cc8.  if v1 >= v3 then goto L3a6cd4;
  #L3a6ccc.  call `O`(v5, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a6cd2.  return @kind void;
  #L3a6cd4.  call temp:= `I`(v5) @signature `Ls3/z;.I:()I` @kind virtual;
  #L3a6cda.  v1:= temp;
  #L3a6cdc.  call temp:= `f`(v5) @signature `Ls3/z;.f:()I` @kind virtual;
  #L3a6ce2.  v3:= temp;
  #L3a6ce4.  call temp:= `e`(v5) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a6cea.  v4:= temp;
  #L3a6cec.  v4:= v4 + v1 @kind int;
  #L3a6cee.  call temp:= `min`(v3, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3a6cf4.  v1:= temp;
  #L3a6cf6.  call `O`(v5, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a6cfc.  goto L3a6c76;
  #L3a6cfe.  return @kind void;
}
procedure `a2.a$e` `a`(`k2.x$b` v6 @kind this, `a2.m` v7 @kind object, `long` v8 ) @signature `Lk2/x$b;.a:(La2/m;J)La2/a$e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a6b04.  call temp:= `q`(v7) @signature `La2/m;.q:()J` @kind interface;
  #L3a6b0a.  v4:= temp @kind wide;
  #L3a6b0c.  call temp:= `a`(v7) @signature `La2/m;.a:()J` @kind interface;
  #L3a6b12.  v0:= temp @kind wide;
  #L3a6b14.  v0:= v0 - v4 @kind long;
  #L3a6b16.  v2:= 20000L;
  #L3a6b1a.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3a6b20.  v0:= temp @kind wide;
  #L3a6b22.  v1:= (`int`) v0 @kind l2i;
  #L3a6b24.  v0:= v6.`k2.x$b.b` @type ^`s3.z` @kind object;
  #L3a6b28.  call `K`(v0, v1) @signature `Ls3/z;.K:(I)V` @kind virtual;
  #L3a6b2e.  v0:= v6.`k2.x$b.b` @type ^`s3.z` @kind object;
  #L3a6b32.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a6b38.  v0:= temp @kind object;
  #L3a6b3a.  v2:= 0I;
  #L3a6b3c.  call `o`(v7, v0, v2, v1) @signature `La2/m;.o:([BII)V` @kind interface;
  #L3a6b42.  v1:= v6.`k2.x$b.b` @type ^`s3.z` @kind object;
  #L3a6b46.  v0:= v6 @kind object;
  #L3a6b48.  v2:= v8 @kind wide;
  #L3a6b4a.  call temp:= `c`(v0, v1, v2, v4) @signature `Lk2/x$b;.c:(Ls3/z;JJ)La2/a$e;` @kind direct;
  #L3a6b50.  v7:= temp @kind object;
  #L3a6b52.  return v7 @kind object;
}
procedure `void` `b`(`k2.x$b` v2 @kind this) @signature `Lk2/x$b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a6ba8.  v0:= v2.`k2.x$b.b` @type ^`s3.z` @kind object;
  #L3a6bac.  v1:= `@@s3.l0.f` @type ^`byte`[] @kind object;
  #L3a6bb0.  call `L`(v0, v1) @signature `Ls3/z;.L:([B)V` @kind virtual;
  #L3a6bb6.  return @kind void;
}
