record `k2.l` @kind class @AccessFlag PUBLIC_FINAL extends `k2.m` @kind interface {
  `java.util.List` `k2.l.a` @AccessFlag PRIVATE_FINAL;
  `a2.d0`[] `k2.l.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `k2.l.c` @AccessFlag PRIVATE;
  `int` `k2.l.d` @AccessFlag PRIVATE;
  `int` `k2.l.e` @AccessFlag PRIVATE;
  `long` `k2.l.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`k2.l` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lk2/l;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3a2aa8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a2aae.  v2.`k2.l.a` @type ^`java.util.List` := v3 @kind object;
  #L3a2ab2.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3a2ab8.  v3:= temp;
  #L3a2aba.  v3:= new `a2.d0`[v3];
  #L3a2abe.  v2.`k2.l.b` @type ^`a2.d0`[] := v3 @kind object;
  #L3a2ac2.  v0:= -4.9E-324D;
  #L3a2acc.  v2.`k2.l.f` @type ^`long` := v0 @kind wide;
  #L3a2ad0.  return @kind void;
}
procedure `boolean` `b`(`k2.l` v2 @kind this, `s3.z` v3 @kind object, `int` v4 ) @signature `Lk2/l;.b:(Ls3/z;I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3a2a64.  call temp:= `a`(v3) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a2a6a.  v0:= temp;
  #L3a2a6c.  v1:= 0I;
  #L3a2a6e.  if v0 != 0 then goto L3a2a74;
  #L3a2a72.  return v1;
  #L3a2a74.  call temp:= `C`(v3) @signature `Ls3/z;.C:()I` @kind virtual;
  #L3a2a7a.  v3:= temp;
  #L3a2a7c.  if v3 == v4 then goto L3a2a84;
  #L3a2a80.  v2.`k2.l.c` @type ^`boolean` := v1 @kind boolean;
  #L3a2a84.  v3:= v2.`k2.l.d` @type ^`int`;
  #L3a2a88.  v3:= v3 + -1;
  #L3a2a8c.  v2.`k2.l.d` @type ^`int` := v3;
  #L3a2a90.  v3:= v2.`k2.l.c` @type ^`boolean` @kind boolean;
  #L3a2a94.  return v3;
}
procedure `void` `a`(`k2.l` v2 @kind this) @signature `Lk2/l;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2cbc.  v0:= 0I;
  #L3a2cbe.  v2.`k2.l.c` @type ^`boolean` := v0 @kind boolean;
  #L3a2cc2.  v0:= -4.9E-324D;
  #L3a2ccc.  v2.`k2.l.f` @type ^`long` := v0 @kind wide;
  #L3a2cd0.  return @kind void;
}
procedure `void` `c`(`k2.l` v6 @kind this, `s3.z` v7 @kind object) @signature `Lk2/l;.c:(Ls3/z;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a2ae4.  v0:= v6.`k2.l.c` @type ^`boolean` @kind boolean;
  #L3a2ae8.  if v0 == 0 then goto L3a2b5c;
  #L3a2aec.  v0:= v6.`k2.l.d` @type ^`int`;
  #L3a2af0.  v1:= 2I;
  #L3a2af2.  if v0 != v1 then goto L3a2b08;
  #L3a2af6.  v0:= 32I;
  #L3a2afa.  call temp:= `b`(v6, v7, v0) @signature `Lk2/l;.b:(Ls3/z;I)Z` @kind direct;
  #L3a2b00.  v0:= temp;
  #L3a2b02.  if v0 != 0 then goto L3a2b08;
  #L3a2b06.  return @kind void;
  #L3a2b08.  v0:= v6.`k2.l.d` @type ^`int`;
  #L3a2b0c.  v1:= 0I;
  #L3a2b0e.  v2:= 1I;
  #L3a2b10.  if v0 != v2 then goto L3a2b22;
  #L3a2b14.  call temp:= `b`(v6, v7, v1) @signature `Lk2/l;.b:(Ls3/z;I)Z` @kind direct;
  #L3a2b1a.  v0:= temp;
  #L3a2b1c.  if v0 != 0 then goto L3a2b22;
  #L3a2b20.  return @kind void;
  #L3a2b22.  call temp:= `e`(v7) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a2b28.  v0:= temp;
  #L3a2b2a.  call temp:= `a`(v7) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a2b30.  v2:= temp;
  #L3a2b32.  v3:= v6.`k2.l.b` @type ^`a2.d0`[] @kind object;
  #L3a2b36.  v4:= length @variable v3;
  #L3a2b38.  if v1 >= v4 then goto L3a2b52;
  #L3a2b3c.  v5:= v3[v1] @kind object;
  #L3a2b40.  call `O`(v7, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a2b46.  call `c`(v5, v7, v2) @signature `La2/d0;.c:(Ls3/z;I)V` @kind interface;
  #L3a2b4c.  v1:= v1 + 1;
  #L3a2b50.  goto L3a2b38;
  #L3a2b52.  v7:= v6.`k2.l.e` @type ^`int`;
  #L3a2b56.  v7:= v7 + v2 @kind int;
  #L3a2b58.  v6.`k2.l.e` @type ^`int` := v7;
  #L3a2b5c.  return @kind void;
}
procedure `void` `d`(`k2.l` v5 @kind this, `a2.n` v6 @kind object, `k2.i0$d` v7 @kind object) @signature `Lk2/l;.d:(La2/n;Lk2/i0$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3a2b70.  v0:= 0I;
  #L3a2b72.  v1:= v5.`k2.l.b` @type ^`a2.d0`[] @kind object;
  #L3a2b76.  v1:= length @variable v1;
  #L3a2b78.  if v0 >= v1 then goto L3a2c06;
  #L3a2b7c.  v1:= v5.`k2.l.a` @type ^`java.util.List` @kind object;
  #L3a2b80.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3a2b86.  v1:= temp @kind object;
  #L3a2b88.  v1:= (`k2.i0$a`) v1 @kind object;
  #L3a2b8c.  call `a`(v7) @signature `Lk2/i0$d;.a:()V` @kind virtual;
  #L3a2b92.  call temp:= `c`(v7) @signature `Lk2/i0$d;.c:()I` @kind virtual;
  #L3a2b98.  v2:= temp;
  #L3a2b9a.  v3:= 3I;
  #L3a2b9c.  call temp:= `e`(v6, v2, v3) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L3a2ba2.  v2:= temp @kind object;
  #L3a2ba4.  v3:= new `v1.j1$b`;
  #L3a2ba8.  call `<init>`(v3) @signature `Lv1/j1$b;.<init>:()V` @kind direct;
  #L3a2bae.  call temp:= `b`(v7) @signature `Lk2/i0$d;.b:()Ljava/lang/String;` @kind virtual;
  #L3a2bb4.  v4:= temp @kind object;
  #L3a2bb6.  call temp:= `S`(v3, v4) @signature `Lv1/j1$b;.S:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a2bbc.  v3:= temp @kind object;
  #L3a2bbe.  v4:= "application/dvbsubs" @kind object;
  #L3a2bc2.  call temp:= `e0`(v3, v4) @signature `Lv1/j1$b;.e0:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a2bc8.  v3:= temp @kind object;
  #L3a2bca.  v4:= v1.`k2.i0$a.b` @type ^`byte`[] @kind object;
  #L3a2bce.  call temp:= `singletonList`(v4) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3a2bd4.  v4:= temp @kind object;
  #L3a2bd6.  call temp:= `T`(v3, v4) @signature `Lv1/j1$b;.T:(Ljava/util/List;)Lv1/j1$b;` @kind virtual;
  #L3a2bdc.  v3:= temp @kind object;
  #L3a2bde.  v1:= v1.`k2.i0$a.a` @type ^`java.lang.String` @kind object;
  #L3a2be2.  call temp:= `V`(v3, v1) @signature `Lv1/j1$b;.V:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a2be8.  v1:= temp @kind object;
  #L3a2bea.  call temp:= `E`(v1) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L3a2bf0.  v1:= temp @kind object;
  #L3a2bf2.  call `b`(v2, v1) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L3a2bf8.  v1:= v5.`k2.l.b` @type ^`a2.d0`[] @kind object;
  #L3a2bfc.  v1[v0]:= v2 @kind object;
  #L3a2c00.  v0:= v0 + 1;
  #L3a2c04.  goto L3a2b72;
  #L3a2c06.  return @kind void;
}
procedure `void` `e`(`k2.l` v12 @kind this) @signature `Lk2/l;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3a2c18.  v0:= v12.`k2.l.c` @type ^`boolean` @kind boolean;
  #L3a2c1c.  if v0 == 0 then goto L3a2c66;
  #L3a2c20.  v0:= v12.`k2.l.f` @type ^`long` @kind wide;
  #L3a2c24.  v2:= -4.9E-324D;
  #L3a2c2e.  v4:= 0I;
  #L3a2c30.  v5:= lcmp(v0, v2);
  #L3a2c34.  if v5 == 0 then goto L3a2c62;
  #L3a2c38.  v0:= v12.`k2.l.b` @type ^`a2.d0`[] @kind object;
  #L3a2c3c.  v1:= length @variable v0;
  #L3a2c3e.  v2:= 0I;
  #L3a2c40.  if v2 >= v1 then goto L3a2c62;
  #L3a2c44.  v5:= v0[v2] @kind object;
  #L3a2c48.  v6:= v12.`k2.l.f` @type ^`long` @kind wide;
  #L3a2c4c.  v8:= 1I;
  #L3a2c4e.  v9:= v12.`k2.l.e` @type ^`int`;
  #L3a2c52.  v10:= 0I;
  #L3a2c54.  v11:= 0I;
  #L3a2c56.  call `f`(v5, v6, v8, v9, v10, v11) @signature `La2/d0;.f:(JIIILa2/d0$a;)V` @kind interface;
  #L3a2c5c.  v2:= v2 + 1;
  #L3a2c60.  goto L3a2c40;
  #L3a2c62.  v12.`k2.l.c` @type ^`boolean` := v4 @kind boolean;
  #L3a2c66.  return @kind void;
}
procedure `void` `f`(`k2.l` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lk2/l;.f:(JI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2c78.  v5:= v5 ^& 4;
  #L3a2c7c.  if v5 != 0 then goto L3a2c82;
  #L3a2c80.  return @kind void;
  #L3a2c82.  v5:= 1I;
  #L3a2c84.  v2.`k2.l.c` @type ^`boolean` := v5 @kind boolean;
  #L3a2c88.  v0:= -4.9E-324D;
  #L3a2c92.  v5:= lcmp(v3, v0);
  #L3a2c96.  if v5 == 0 then goto L3a2c9e;
  #L3a2c9a.  v2.`k2.l.f` @type ^`long` := v3 @kind wide;
  #L3a2c9e.  v3:= 0I;
  #L3a2ca0.  v2.`k2.l.e` @type ^`int` := v3;
  #L3a2ca4.  v3:= 2I;
  #L3a2ca6.  v2.`k2.l.d` @type ^`int` := v3;
  #L3a2caa.  return @kind void;
}
