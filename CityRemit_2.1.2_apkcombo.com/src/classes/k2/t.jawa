record `k2.t` @kind class @AccessFlag PUBLIC_FINAL extends `k2.m` @kind interface {
  `s3.z` `k2.t.a` @AccessFlag PRIVATE_FINAL;
  `x1.d0$a` `k2.t.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `k2.t.c` @AccessFlag PRIVATE_FINAL;
  `a2.d0` `k2.t.d` @AccessFlag PRIVATE;
  `java.lang.String` `k2.t.e` @AccessFlag PRIVATE;
  `int` `k2.t.f` @AccessFlag PRIVATE;
  `int` `k2.t.g` @AccessFlag PRIVATE;
  `boolean` `k2.t.h` @AccessFlag PRIVATE;
  `boolean` `k2.t.i` @AccessFlag PRIVATE;
  `long` `k2.t.j` @AccessFlag PRIVATE;
  `int` `k2.t.k` @AccessFlag PRIVATE;
  `long` `k2.t.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`k2.t` v1 @kind this) @signature `Lk2/t;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a5e80.  v0:= 0I;
  #L3a5e82.  call `<init>`(v1, v0) @signature `Lk2/t;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a5e88.  return @kind void;
}
procedure `void` `<init>`(`k2.t` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lk2/t;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3a5e9c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a5ea2.  v0:= 0I;
  #L3a5ea4.  v3.`k2.t.f` @type ^`int` := v0;
  #L3a5ea8.  v1:= new `s3.z`;
  #L3a5eac.  v2:= 4I;
  #L3a5eae.  call `<init>`(v1, v2) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L3a5eb4.  v3.`k2.t.a` @type ^`s3.z` := v1 @kind object;
  #L3a5eb8.  call temp:= `d`(v1) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a5ebe.  v1:= temp @kind object;
  #L3a5ec0.  v2:= -1I;
  #L3a5ec2.  v1[v0]:= v2 @kind byte;
  #L3a5ec6.  v0:= new `x1.d0$a`;
  #L3a5eca.  call `<init>`(v0) @signature `Lx1/d0$a;.<init>:()V` @kind direct;
  #L3a5ed0.  v3.`k2.t.b` @type ^`x1.d0$a` := v0 @kind object;
  #L3a5ed4.  v0:= -4.9E-324D;
  #L3a5ede.  v3.`k2.t.l` @type ^`long` := v0 @kind wide;
  #L3a5ee2.  v3.`k2.t.c` @type ^`java.lang.String` := v4 @kind object;
  #L3a5ee6.  return @kind void;
}
procedure `void` `b`(`k2.t` v8 @kind this, `s3.z` v9 @kind object) @signature `Lk2/t;.b:(Ls3/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3a5f94.  call temp:= `d`(v9) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a5f9a.  v0:= temp @kind object;
  #L3a5f9c.  call temp:= `e`(v9) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a5fa2.  v1:= temp;
  #L3a5fa4.  call temp:= `f`(v9) @signature `Ls3/z;.f:()I` @kind virtual;
  #L3a5faa.  v2:= temp;
  #L3a5fac.  if v1 >= v2 then goto L3a6020;
  #L3a5fb0.  v3:= v0[v1] @kind byte;
  #L3a5fb4.  v4:= 255I;
  #L3a5fb8.  v3:= v3 ^& v4 @kind int;
  #L3a5fba.  v5:= 0I;
  #L3a5fbc.  v6:= 1I;
  #L3a5fbe.  if v3 != v4 then goto L3a5fc6;
  #L3a5fc2.  v3:= 1I;
  #L3a5fc4.  goto L3a5fc8;
  #L3a5fc6.  v3:= 0I;
  #L3a5fc8.  v4:= v8.`k2.t.i` @type ^`boolean` @kind boolean;
  #L3a5fcc.  if v4 == 0 then goto L3a5fe2;
  #L3a5fd0.  v4:= v0[v1] @kind byte;
  #L3a5fd4.  v7:= 224I;
  #L3a5fd8.  v4:= v4 ^& v7 @kind int;
  #L3a5fda.  if v4 != v7 then goto L3a5fe2;
  #L3a5fde.  v4:= 1I;
  #L3a5fe0.  goto L3a5fe4;
  #L3a5fe2.  v4:= 0I;
  #L3a5fe4.  v8.`k2.t.i` @type ^`boolean` := v3 @kind boolean;
  #L3a5fe8.  if v4 == 0 then goto L3a601a;
  #L3a5fec.  v2:= v1 + 1;
  #L3a5ff0.  call `O`(v9, v2) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a5ff6.  v8.`k2.t.i` @type ^`boolean` := v5 @kind boolean;
  #L3a5ffa.  v9:= v8.`k2.t.a` @type ^`s3.z` @kind object;
  #L3a5ffe.  call temp:= `d`(v9) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a6004.  v9:= temp @kind object;
  #L3a6006.  v0:= v0[v1] @kind byte;
  #L3a600a.  v9[v6]:= v0 @kind byte;
  #L3a600e.  v9:= 2I;
  #L3a6010.  v8.`k2.t.g` @type ^`int` := v9;
  #L3a6014.  v8.`k2.t.f` @type ^`int` := v6;
  #L3a6018.  return @kind void;
  #L3a601a.  v1:= v1 + 1;
  #L3a601e.  goto L3a5fac;
  #L3a6020.  call `O`(v9, v2) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a6026.  return @kind void;
}
procedure `void` `g`(`k2.t` v7 @kind this, `s3.z` v8 @kind object) @signature `Lk2/t;.g:(Ls3/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a6074.  call temp:= `a`(v8) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a607a.  v0:= temp;
  #L3a607c.  v1:= v7.`k2.t.k` @type ^`int`;
  #L3a6080.  v2:= v7.`k2.t.g` @type ^`int`;
  #L3a6084.  v1:= v1 - v2 @kind int;
  #L3a6086.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3a608c.  v0:= temp;
  #L3a608e.  v1:= v7.`k2.t.d` @type ^`a2.d0` @kind object;
  #L3a6092.  call `c`(v1, v8, v0) @signature `La2/d0;.c:(Ls3/z;I)V` @kind interface;
  #L3a6098.  v8:= v7.`k2.t.g` @type ^`int`;
  #L3a609c.  v8:= v8 + v0 @kind int;
  #L3a609e.  v7.`k2.t.g` @type ^`int` := v8;
  #L3a60a2.  v4:= v7.`k2.t.k` @type ^`int`;
  #L3a60a6.  if v8 >= v4 then goto L3a60ac;
  #L3a60aa.  return @kind void;
  #L3a60ac.  v1:= v7.`k2.t.l` @type ^`long` @kind wide;
  #L3a60b0.  v5:= -4.9E-324D;
  #L3a60ba.  v8:= lcmp(v1, v5);
  #L3a60be.  if v8 == 0 then goto L3a60e0;
  #L3a60c2.  v0:= v7.`k2.t.d` @type ^`a2.d0` @kind object;
  #L3a60c6.  v3:= 1I;
  #L3a60c8.  v5:= 0I;
  #L3a60ca.  v6:= 0I;
  #L3a60cc.  call `f`(v0, v1, v3, v4, v5, v6) @signature `La2/d0;.f:(JIIILa2/d0$a;)V` @kind interface;
  #L3a60d2.  v0:= v7.`k2.t.l` @type ^`long` @kind wide;
  #L3a60d6.  v2:= v7.`k2.t.j` @type ^`long` @kind wide;
  #L3a60da.  v0:= v0 + v2 @kind long;
  #L3a60dc.  v7.`k2.t.l` @type ^`long` := v0 @kind wide;
  #L3a60e0.  v8:= 0I;
  #L3a60e2.  v7.`k2.t.g` @type ^`int` := v8;
  #L3a60e6.  v7.`k2.t.f` @type ^`int` := v8;
  #L3a60ea.  return @kind void;
}
procedure `void` `h`(`k2.t` v7 @kind this, `s3.z` v8 @kind object) @signature `Lk2/t;.h:(Ls3/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a60fc.  call temp:= `a`(v8) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a6102.  v0:= temp;
  #L3a6104.  v1:= v7.`k2.t.g` @type ^`int`;
  #L3a6108.  v2:= 4I;
  #L3a610a.  v1:= v1 - 4;
  #L3a610e.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3a6114.  v0:= temp;
  #L3a6116.  v1:= v7.`k2.t.a` @type ^`s3.z` @kind object;
  #L3a611a.  call temp:= `d`(v1) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a6120.  v1:= temp @kind object;
  #L3a6122.  v3:= v7.`k2.t.g` @type ^`int`;
  #L3a6126.  call `j`(v8, v1, v3, v0) @signature `Ls3/z;.j:([BII)V` @kind virtual;
  #L3a612c.  v8:= v7.`k2.t.g` @type ^`int`;
  #L3a6130.  v8:= v8 + v0 @kind int;
  #L3a6132.  v7.`k2.t.g` @type ^`int` := v8;
  #L3a6136.  if v8 >= v2 then goto L3a613c;
  #L3a613a.  return @kind void;
  #L3a613c.  v8:= v7.`k2.t.a` @type ^`s3.z` @kind object;
  #L3a6140.  v0:= 0I;
  #L3a6142.  call `O`(v8, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a6148.  v8:= v7.`k2.t.b` @type ^`x1.d0$a` @kind object;
  #L3a614c.  v1:= v7.`k2.t.a` @type ^`s3.z` @kind object;
  #L3a6150.  call temp:= `m`(v1) @signature `Ls3/z;.m:()I` @kind virtual;
  #L3a6156.  v1:= temp;
  #L3a6158.  call temp:= `a`(v8, v1) @signature `Lx1/d0$a;.a:(I)Z` @kind virtual;
  #L3a615e.  v8:= temp;
  #L3a6160.  v1:= 1I;
  #L3a6162.  if v8 != 0 then goto L3a6170;
  #L3a6166.  v7.`k2.t.g` @type ^`int` := v0;
  #L3a616a.  v7.`k2.t.f` @type ^`int` := v1;
  #L3a616e.  return @kind void;
  #L3a6170.  v8:= v7.`k2.t.b` @type ^`x1.d0$a` @kind object;
  #L3a6174.  v3:= v8.`x1.d0$a.c` @type ^`int`;
  #L3a6178.  v7.`k2.t.k` @type ^`int` := v3;
  #L3a617c.  v3:= v7.`k2.t.h` @type ^`boolean` @kind boolean;
  #L3a6180.  if v3 != 0 then goto L3a6214;
  #L3a6184.  v3:= 1000000L;
  #L3a618a.  v5:= v8.`x1.d0$a.g` @type ^`int`;
  #L3a618e.  v5:= (`long`) v5 @kind i2l;
  #L3a6190.  v5:= v5 * v3 @kind long;
  #L3a6194.  v8:= v8.`x1.d0$a.d` @type ^`int`;
  #L3a6198.  v3:= (`long`) v8 @kind i2l;
  #L3a619a.  v5:= v5 / v3 @kind long;
  #L3a619c.  v7.`k2.t.j` @type ^`long` := v5 @kind wide;
  #L3a61a0.  v8:= new `v1.j1$b`;
  #L3a61a4.  call `<init>`(v8) @signature `Lv1/j1$b;.<init>:()V` @kind direct;
  #L3a61aa.  v3:= v7.`k2.t.e` @type ^`java.lang.String` @kind object;
  #L3a61ae.  call temp:= `S`(v8, v3) @signature `Lv1/j1$b;.S:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a61b4.  v8:= temp @kind object;
  #L3a61b6.  v3:= v7.`k2.t.b` @type ^`x1.d0$a` @kind object;
  #L3a61ba.  v3:= v3.`x1.d0$a.b` @type ^`java.lang.String` @kind object;
  #L3a61be.  call temp:= `e0`(v8, v3) @signature `Lv1/j1$b;.e0:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a61c4.  v8:= temp @kind object;
  #L3a61c6.  v3:= 4096I;
  #L3a61ca.  call temp:= `W`(v8, v3) @signature `Lv1/j1$b;.W:(I)Lv1/j1$b;` @kind virtual;
  #L3a61d0.  v8:= temp @kind object;
  #L3a61d2.  v3:= v7.`k2.t.b` @type ^`x1.d0$a` @kind object;
  #L3a61d6.  v3:= v3.`x1.d0$a.e` @type ^`int`;
  #L3a61da.  call temp:= `H`(v8, v3) @signature `Lv1/j1$b;.H:(I)Lv1/j1$b;` @kind virtual;
  #L3a61e0.  v8:= temp @kind object;
  #L3a61e2.  v3:= v7.`k2.t.b` @type ^`x1.d0$a` @kind object;
  #L3a61e6.  v3:= v3.`x1.d0$a.d` @type ^`int`;
  #L3a61ea.  call temp:= `f0`(v8, v3) @signature `Lv1/j1$b;.f0:(I)Lv1/j1$b;` @kind virtual;
  #L3a61f0.  v8:= temp @kind object;
  #L3a61f2.  v3:= v7.`k2.t.c` @type ^`java.lang.String` @kind object;
  #L3a61f6.  call temp:= `V`(v8, v3) @signature `Lv1/j1$b;.V:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a61fc.  v8:= temp @kind object;
  #L3a61fe.  call temp:= `E`(v8) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L3a6204.  v8:= temp @kind object;
  #L3a6206.  v3:= v7.`k2.t.d` @type ^`a2.d0` @kind object;
  #L3a620a.  call `b`(v3, v8) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L3a6210.  v7.`k2.t.h` @type ^`boolean` := v1 @kind boolean;
  #L3a6214.  v8:= v7.`k2.t.a` @type ^`s3.z` @kind object;
  #L3a6218.  call `O`(v8, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a621e.  v8:= v7.`k2.t.d` @type ^`a2.d0` @kind object;
  #L3a6222.  v0:= v7.`k2.t.a` @type ^`s3.z` @kind object;
  #L3a6226.  call `c`(v8, v0, v2) @signature `La2/d0;.c:(Ls3/z;I)V` @kind interface;
  #L3a622c.  v8:= 2I;
  #L3a622e.  v7.`k2.t.f` @type ^`int` := v8;
  #L3a6232.  return @kind void;
}
procedure `void` `a`(`k2.t` v2 @kind this) @signature `Lk2/t;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a6244.  v0:= 0I;
  #L3a6246.  v2.`k2.t.f` @type ^`int` := v0;
  #L3a624a.  v2.`k2.t.g` @type ^`int` := v0;
  #L3a624e.  v2.`k2.t.i` @type ^`boolean` := v0 @kind boolean;
  #L3a6252.  v0:= -4.9E-324D;
  #L3a625c.  v2.`k2.t.l` @type ^`long` := v0 @kind wide;
  #L3a6260.  return @kind void;
}
procedure `void` `c`(`k2.t` v2 @kind this, `s3.z` v3 @kind object) @signature `Lk2/t;.c:(Ls3/z;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a5ef8.  v0:= v2.`k2.t.d` @type ^`a2.d0` @kind object;
  #L3a5efc.  call temp:= `h`(v0) @signature `Ls3/a;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3a5f02.  call temp:= `a`(v3) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a5f08.  v0:= temp;
  #L3a5f0a.  if v0 <= 0 then goto L3a5f46;
  #L3a5f0e.  v0:= v2.`k2.t.f` @type ^`int`;
  #L3a5f12.  if v0 == 0 then goto L3a5f3e;
  #L3a5f16.  v1:= 1I;
  #L3a5f18.  if v0 == v1 then goto L3a5f36;
  #L3a5f1c.  v1:= 2I;
  #L3a5f1e.  if v0 != v1 then goto L3a5f2a;
  #L3a5f22.  call `g`(v2, v3) @signature `Lk2/t;.g:(Ls3/z;)V` @kind direct;
  #L3a5f28.  goto L3a5f02;
  #L3a5f2a.  v3:= new `java.lang.IllegalStateException`;
  #L3a5f2e.  call `<init>`(v3) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3a5f34.  throw v3;
  #L3a5f36.  call `h`(v2, v3) @signature `Lk2/t;.h:(Ls3/z;)V` @kind direct;
  #L3a5f3c.  goto L3a5f02;
  #L3a5f3e.  call `b`(v2, v3) @signature `Lk2/t;.b:(Ls3/z;)V` @kind direct;
  #L3a5f44.  goto L3a5f02;
  #L3a5f46.  return @kind void;
}
procedure `void` `d`(`k2.t` v1 @kind this, `a2.n` v2 @kind object, `k2.i0$d` v3 @kind object) @signature `Lk2/t;.d:(La2/n;Lk2/i0$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a5f58.  call `a`(v3) @signature `Lk2/i0$d;.a:()V` @kind virtual;
  #L3a5f5e.  call temp:= `b`(v3) @signature `Lk2/i0$d;.b:()Ljava/lang/String;` @kind virtual;
  #L3a5f64.  v0:= temp @kind object;
  #L3a5f66.  v1.`k2.t.e` @type ^`java.lang.String` := v0 @kind object;
  #L3a5f6a.  call temp:= `c`(v3) @signature `Lk2/i0$d;.c:()I` @kind virtual;
  #L3a5f70.  v3:= temp;
  #L3a5f72.  v0:= 1I;
  #L3a5f74.  call temp:= `e`(v2, v3, v0) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L3a5f7a.  v2:= temp @kind object;
  #L3a5f7c.  v1.`k2.t.d` @type ^`a2.d0` := v2 @kind object;
  #L3a5f80.  return @kind void;
}
procedure `void` `e`(`k2.t` v0 @kind this) @signature `Lk2/t;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L3a6038.  return @kind void;
}
procedure `void` `f`(`k2.t` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lk2/t;.f:(JI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a604c.  v0:= -4.9E-324D;
  #L3a6056.  v5:= lcmp(v3, v0);
  #L3a605a.  if v5 == 0 then goto L3a6062;
  #L3a605e.  v2.`k2.t.l` @type ^`long` := v3 @kind wide;
  #L3a6062.  return @kind void;
}
