record `k2.u` @kind class @AccessFlag FINAL {
  `int` `k2.u.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `k2.u.b` @AccessFlag PRIVATE;
  `boolean` `k2.u.c` @AccessFlag PRIVATE;
  `byte`[] `k2.u.d` @AccessFlag PUBLIC;
  `int` `k2.u.e` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`k2.u` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lk2/u;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a62c0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a62c6.  v1.`k2.u.a` @type ^`int` := v2;
  #L3a62ca.  v3:= v3 + 3;
  #L3a62ce.  v2:= new `byte`[v3];
  #L3a62d2.  v1.`k2.u.d` @type ^`byte`[] := v2 @kind object;
  #L3a62d6.  v3:= 2I;
  #L3a62d8.  v0:= 1I;
  #L3a62da.  v2[v3]:= v0 @kind byte;
  #L3a62de.  return @kind void;
}
procedure `void` `a`(`k2.u` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lk2/u;.a:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a62f0.  v0:= v4.`k2.u.b` @type ^`boolean` @kind boolean;
  #L3a62f4.  if v0 != 0 then goto L3a62fa;
  #L3a62f8.  return @kind void;
  #L3a62fa.  v7:= v7 - v6 @kind int;
  #L3a62fc.  v0:= v4.`k2.u.d` @type ^`byte`[] @kind object;
  #L3a6300.  v1:= length @variable v0;
  #L3a6302.  v2:= v4.`k2.u.e` @type ^`int`;
  #L3a6306.  v3:= v2 + v7 @kind int;
  #L3a630a.  if v1 >= v3 then goto L3a6320;
  #L3a630e.  v2:= v2 + v7 @kind int;
  #L3a6310.  v2:= v2 * 2;
  #L3a6314.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L3a631a.  v0:= temp @kind object;
  #L3a631c.  v4.`k2.u.d` @type ^`byte`[] := v0 @kind object;
  #L3a6320.  v0:= v4.`k2.u.d` @type ^`byte`[] @kind object;
  #L3a6324.  v1:= v4.`k2.u.e` @type ^`int`;
  #L3a6328.  call `arraycopy`(v5, v6, v0, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a632e.  v5:= v4.`k2.u.e` @type ^`int`;
  #L3a6332.  v5:= v5 + v7 @kind int;
  #L3a6334.  v4.`k2.u.e` @type ^`int` := v5;
  #L3a6338.  return @kind void;
}
procedure `boolean` `b`(`k2.u` v2 @kind this, `int` v3 ) @signature `Lk2/u;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a6274.  v0:= v2.`k2.u.b` @type ^`boolean` @kind boolean;
  #L3a6278.  v1:= 0I;
  #L3a627a.  if v0 != 0 then goto L3a6280;
  #L3a627e.  return v1;
  #L3a6280.  v0:= v2.`k2.u.e` @type ^`int`;
  #L3a6284.  v0:= v0 - v3 @kind int;
  #L3a6286.  v2.`k2.u.e` @type ^`int` := v0;
  #L3a628a.  v2.`k2.u.b` @type ^`boolean` := v1 @kind boolean;
  #L3a628e.  v3:= 1I;
  #L3a6290.  v2.`k2.u.c` @type ^`boolean` := v3 @kind boolean;
  #L3a6294.  return v3;
}
procedure `boolean` `c`(`k2.u` v1 @kind this) @signature `Lk2/u;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a62a8.  v0:= v1.`k2.u.c` @type ^`boolean` @kind boolean;
  #L3a62ac.  return v0;
}
procedure `void` `d`(`k2.u` v1 @kind this) @signature `Lk2/u;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a634c.  v0:= 0I;
  #L3a634e.  v1.`k2.u.b` @type ^`boolean` := v0 @kind boolean;
  #L3a6352.  v1.`k2.u.c` @type ^`boolean` := v0 @kind boolean;
  #L3a6356.  return @kind void;
}
procedure `void` `e`(`k2.u` v3 @kind this, `int` v4 ) @signature `Lk2/u;.e:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a6368.  v0:= v3.`k2.u.b` @type ^`boolean` @kind boolean;
  #L3a636c.  v1:= 1I;
  #L3a636e.  v0:= v0 ^~ v1 @kind int;
  #L3a6370.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L3a6376.  v0:= v3.`k2.u.a` @type ^`int`;
  #L3a637a.  v2:= 0I;
  #L3a637c.  if v4 != v0 then goto L3a6382;
  #L3a6380.  goto L3a6384;
  #L3a6382.  v1:= 0I;
  #L3a6384.  v3.`k2.u.b` @type ^`boolean` := v1 @kind boolean;
  #L3a6388.  if v1 == 0 then goto L3a6396;
  #L3a638c.  v4:= 3I;
  #L3a638e.  v3.`k2.u.e` @type ^`int` := v4;
  #L3a6392.  v3.`k2.u.c` @type ^`boolean` := v2 @kind boolean;
  #L3a6396.  return @kind void;
}
