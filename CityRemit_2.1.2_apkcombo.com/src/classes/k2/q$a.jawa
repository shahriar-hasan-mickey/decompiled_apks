record `k2.q$a` @kind class @AccessFlag FINAL {
  `a2.d0` `k2.q$a.a` @AccessFlag PRIVATE_FINAL;
  `long` `k2.q$a.b` @AccessFlag PRIVATE;
  `boolean` `k2.q$a.c` @AccessFlag PRIVATE;
  `int` `k2.q$a.d` @AccessFlag PRIVATE;
  `long` `k2.q$a.e` @AccessFlag PRIVATE;
  `boolean` `k2.q$a.f` @AccessFlag PRIVATE;
  `boolean` `k2.q$a.g` @AccessFlag PRIVATE;
  `boolean` `k2.q$a.h` @AccessFlag PRIVATE;
  `boolean` `k2.q$a.i` @AccessFlag PRIVATE;
  `boolean` `k2.q$a.j` @AccessFlag PRIVATE;
  `long` `k2.q$a.k` @AccessFlag PRIVATE;
  `long` `k2.q$a.l` @AccessFlag PRIVATE;
  `boolean` `k2.q$a.m` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`k2.q$a` v0 @kind this, `a2.d0` v1 @kind object) @signature `Lk2/q$a;.<init>:(La2/d0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a49bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a49c2.  v0.`k2.q$a.a` @type ^`a2.d0` := v1 @kind object;
  #L3a49c6.  return @kind void;
}
procedure `boolean` `b`(`int` v1 ) @signature `Lk2/q$a;.b:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3a4960.  v0:= 32I;
  #L3a4964.  if v0 > v1 then goto L3a4970;
  #L3a4968.  v0:= 35I;
  #L3a496c.  if v1 <= v0 then goto L3a4978;
  #L3a4970.  v0:= 39I;
  #L3a4974.  if v1 != v0 then goto L3a497c;
  #L3a4978.  v1:= 1I;
  #L3a497a.  goto L3a497e;
  #L3a497c.  v1:= 0I;
  #L3a497e.  return v1;
}
procedure `boolean` `c`(`int` v1 ) @signature `Lk2/q$a;.c:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3a4990.  v0:= 32I;
  #L3a4994.  if v1 < v0 then goto L3a49a6;
  #L3a4998.  v0:= 40I;
  #L3a499c.  if v1 != v0 then goto L3a49a2;
  #L3a49a0.  goto L3a49a6;
  #L3a49a2.  v1:= 0I;
  #L3a49a4.  goto L3a49a8;
  #L3a49a6.  v1:= 1I;
  #L3a49a8.  return v1;
}
procedure `void` `d`(`k2.q$a` v8 @kind this, `int` v9 ) @signature `Lk2/q$a;.d:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3a4a54.  v1:= v8.`k2.q$a.l` @type ^`long` @kind wide;
  #L3a4a58.  v3:= -4.9E-324D;
  #L3a4a62.  v0:= lcmp(v1, v3);
  #L3a4a66.  if v0 != 0 then goto L3a4a6c;
  #L3a4a6a.  return @kind void;
  #L3a4a6c.  v3:= v8.`k2.q$a.m` @type ^`boolean` @kind boolean;
  #L3a4a70.  v4:= v8.`k2.q$a.b` @type ^`long` @kind wide;
  #L3a4a74.  v6:= v8.`k2.q$a.k` @type ^`long` @kind wide;
  #L3a4a78.  v4:= v4 - v6 @kind long;
  #L3a4a7a.  v4:= (`int`) v4 @kind l2i;
  #L3a4a7c.  v0:= v8.`k2.q$a.a` @type ^`a2.d0` @kind object;
  #L3a4a80.  v6:= 0I;
  #L3a4a82.  v5:= v9;
  #L3a4a84.  call `f`(v0, v1, v3, v4, v5, v6) @signature `La2/d0;.f:(JIIILa2/d0$a;)V` @kind interface;
  #L3a4a8a.  return @kind void;
}
procedure `void` `a`(`k2.q$a` v2 @kind this, `long` v3 , `int` v5 , `boolean` v6 ) @signature `Lk2/q$a;.a:(JIZ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a49d8.  v0:= v2.`k2.q$a.j` @type ^`boolean` @kind boolean;
  #L3a49dc.  if v0 == 0 then goto L3a49f8;
  #L3a49e0.  v0:= v2.`k2.q$a.g` @type ^`boolean` @kind boolean;
  #L3a49e4.  if v0 == 0 then goto L3a49f8;
  #L3a49e8.  v3:= v2.`k2.q$a.c` @type ^`boolean` @kind boolean;
  #L3a49ec.  v2.`k2.q$a.m` @type ^`boolean` := v3 @kind boolean;
  #L3a49f0.  v3:= 0I;
  #L3a49f2.  v2.`k2.q$a.j` @type ^`boolean` := v3 @kind boolean;
  #L3a49f6.  goto L3a4a42;
  #L3a49f8.  v0:= v2.`k2.q$a.h` @type ^`boolean` @kind boolean;
  #L3a49fc.  if v0 != 0 then goto L3a4a08;
  #L3a4a00.  v0:= v2.`k2.q$a.g` @type ^`boolean` @kind boolean;
  #L3a4a04.  if v0 == 0 then goto L3a4a42;
  #L3a4a08.  if v6 == 0 then goto L3a4a24;
  #L3a4a0c.  v6:= v2.`k2.q$a.i` @type ^`boolean` @kind boolean;
  #L3a4a10.  if v6 == 0 then goto L3a4a24;
  #L3a4a14.  v0:= v2.`k2.q$a.b` @type ^`long` @kind wide;
  #L3a4a18.  v3:= v3 - v0 @kind long;
  #L3a4a1a.  v4:= (`int`) v3 @kind l2i;
  #L3a4a1c.  v5:= v5 + v4 @kind int;
  #L3a4a1e.  call `d`(v2, v5) @signature `Lk2/q$a;.d:(I)V` @kind direct;
  #L3a4a24.  v3:= v2.`k2.q$a.b` @type ^`long` @kind wide;
  #L3a4a28.  v2.`k2.q$a.k` @type ^`long` := v3 @kind wide;
  #L3a4a2c.  v3:= v2.`k2.q$a.e` @type ^`long` @kind wide;
  #L3a4a30.  v2.`k2.q$a.l` @type ^`long` := v3 @kind wide;
  #L3a4a34.  v3:= v2.`k2.q$a.c` @type ^`boolean` @kind boolean;
  #L3a4a38.  v2.`k2.q$a.m` @type ^`boolean` := v3 @kind boolean;
  #L3a4a3c.  v3:= 1I;
  #L3a4a3e.  v2.`k2.q$a.i` @type ^`boolean` := v3 @kind boolean;
  #L3a4a42.  return @kind void;
}
procedure `void` `e`(`k2.q$a` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lk2/q$a;.e:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a4a9c.  v0:= v2.`k2.q$a.f` @type ^`boolean` @kind boolean;
  #L3a4aa0.  if v0 == 0 then goto L3a4ad8;
  #L3a4aa4.  v0:= v4 + 2;
  #L3a4aa8.  v1:= v2.`k2.q$a.d` @type ^`int`;
  #L3a4aac.  v0:= v0 - v1 @kind int;
  #L3a4aae.  if v0 >= v5 then goto L3a4ad0;
  #L3a4ab2.  v3:= v3[v0] @kind byte;
  #L3a4ab6.  v3:= v3 ^& 128;
  #L3a4aba.  v4:= 0I;
  #L3a4abc.  if v3 == 0 then goto L3a4ac4;
  #L3a4ac0.  v3:= 1I;
  #L3a4ac2.  goto L3a4ac6;
  #L3a4ac4.  v3:= 0I;
  #L3a4ac6.  v2.`k2.q$a.g` @type ^`boolean` := v3 @kind boolean;
  #L3a4aca.  v2.`k2.q$a.f` @type ^`boolean` := v4 @kind boolean;
  #L3a4ace.  goto L3a4ad8;
  #L3a4ad0.  v5:= v5 - v4 @kind int;
  #L3a4ad2.  v1:= v1 + v5 @kind int;
  #L3a4ad4.  v2.`k2.q$a.d` @type ^`int` := v1;
  #L3a4ad8.  return @kind void;
}
procedure `void` `f`(`k2.q$a` v1 @kind this) @signature `Lk2/q$a;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4aec.  v0:= 0I;
  #L3a4aee.  v1.`k2.q$a.f` @type ^`boolean` := v0 @kind boolean;
  #L3a4af2.  v1.`k2.q$a.g` @type ^`boolean` := v0 @kind boolean;
  #L3a4af6.  v1.`k2.q$a.h` @type ^`boolean` := v0 @kind boolean;
  #L3a4afa.  v1.`k2.q$a.i` @type ^`boolean` := v0 @kind boolean;
  #L3a4afe.  v1.`k2.q$a.j` @type ^`boolean` := v0 @kind boolean;
  #L3a4b02.  return @kind void;
}
procedure `void` `g`(`k2.q$a` v1 @kind this, `long` v2 , `int` v4 , `int` v5 , `long` v6 , `boolean` v8 ) @signature `Lk2/q$a;.g:(JIIJZ)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4b14.  v0:= 0I;
  #L3a4b16.  v1.`k2.q$a.g` @type ^`boolean` := v0 @kind boolean;
  #L3a4b1a.  v1.`k2.q$a.h` @type ^`boolean` := v0 @kind boolean;
  #L3a4b1e.  v1.`k2.q$a.e` @type ^`long` := v6 @kind wide;
  #L3a4b22.  v1.`k2.q$a.d` @type ^`int` := v0;
  #L3a4b26.  v1.`k2.q$a.b` @type ^`long` := v2 @kind wide;
  #L3a4b2a.  call temp:= `c`(v5) @signature `Lk2/q$a;.c:(I)Z` @kind static;
  #L3a4b30.  v2:= temp;
  #L3a4b32.  v3:= 1I;
  #L3a4b34.  if v2 != 0 then goto L3a4b70;
  #L3a4b38.  v2:= v1.`k2.q$a.i` @type ^`boolean` @kind boolean;
  #L3a4b3c.  if v2 == 0 then goto L3a4b56;
  #L3a4b40.  v2:= v1.`k2.q$a.j` @type ^`boolean` @kind boolean;
  #L3a4b44.  if v2 != 0 then goto L3a4b56;
  #L3a4b48.  if v8 == 0 then goto L3a4b52;
  #L3a4b4c.  call `d`(v1, v4) @signature `Lk2/q$a;.d:(I)V` @kind direct;
  #L3a4b52.  v1.`k2.q$a.i` @type ^`boolean` := v0 @kind boolean;
  #L3a4b56.  call temp:= `b`(v5) @signature `Lk2/q$a;.b:(I)Z` @kind static;
  #L3a4b5c.  v2:= temp;
  #L3a4b5e.  if v2 == 0 then goto L3a4b70;
  #L3a4b62.  v2:= v1.`k2.q$a.j` @type ^`boolean` @kind boolean;
  #L3a4b66.  v2:= v2 ^~ v3 @kind int;
  #L3a4b68.  v1.`k2.q$a.h` @type ^`boolean` := v2 @kind boolean;
  #L3a4b6c.  v1.`k2.q$a.j` @type ^`boolean` := v3 @kind boolean;
  #L3a4b70.  v2:= 16I;
  #L3a4b74.  if v5 < v2 then goto L3a4b84;
  #L3a4b78.  v2:= 21I;
  #L3a4b7c.  if v5 > v2 then goto L3a4b84;
  #L3a4b80.  v2:= 1I;
  #L3a4b82.  goto L3a4b86;
  #L3a4b84.  v2:= 0I;
  #L3a4b86.  v1.`k2.q$a.c` @type ^`boolean` := v2 @kind boolean;
  #L3a4b8a.  if v2 != 0 then goto L3a4b96;
  #L3a4b8e.  v2:= 9I;
  #L3a4b92.  if v5 > v2 then goto L3a4b98;
  #L3a4b96.  v0:= 1I;
  #L3a4b98.  v1.`k2.q$a.f` @type ^`boolean` := v0 @kind boolean;
  #L3a4b9c.  return @kind void;
}
