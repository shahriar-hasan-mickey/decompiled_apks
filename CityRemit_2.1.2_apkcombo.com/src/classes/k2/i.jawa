record `k2.i` @kind class @AccessFlag PUBLIC_FINAL extends `k2.m` @kind interface {
  `boolean` `k2.i.a` @AccessFlag PRIVATE_FINAL;
  `s3.y` `k2.i.b` @AccessFlag PRIVATE_FINAL;
  `s3.z` `k2.i.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `k2.i.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `k2.i.e` @AccessFlag PRIVATE;
  `a2.d0` `k2.i.f` @AccessFlag PRIVATE;
  `a2.d0` `k2.i.g` @AccessFlag PRIVATE;
  `int` `k2.i.h` @AccessFlag PRIVATE;
  `int` `k2.i.i` @AccessFlag PRIVATE;
  `int` `k2.i.j` @AccessFlag PRIVATE;
  `boolean` `k2.i.k` @AccessFlag PRIVATE;
  `boolean` `k2.i.l` @AccessFlag PRIVATE;
  `int` `k2.i.m` @AccessFlag PRIVATE;
  `int` `k2.i.n` @AccessFlag PRIVATE;
  `int` `k2.i.o` @AccessFlag PRIVATE;
  `boolean` `k2.i.p` @AccessFlag PRIVATE;
  `long` `k2.i.q` @AccessFlag PRIVATE;
  `int` `k2.i.r` @AccessFlag PRIVATE;
  `long` `k2.i.s` @AccessFlag PRIVATE;
  `a2.d0` `k2.i.t` @AccessFlag PRIVATE;
  `long` `k2.i.u` @AccessFlag PRIVATE;
}
global `byte`[] `@@k2.i.v` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lk2/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a1b0c.  v0:= 3I;
  #L3a1b0e.  v0:= new `byte`[v0];
  #L3a1b12.  goto L3a1b20;
  #L3a1b18.  `@@k2.i.v` @type ^`byte`[] := v0 @kind object;
  #L3a1b1c.  return @kind void;
  #L3a1b1e.  
  #L3a1b20.  v0:= (73I, 68I, 51I) @kind object;
  #L3a1b2b.  goto L3a1b18;
}
procedure `void` `<init>`(`k2.i` v1 @kind this, `boolean` v2 ) @signature `Lk2/i;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a1b3c.  v0:= 0I;
  #L3a1b3e.  call `<init>`(v1, v2, v0) @signature `Lk2/i;.<init>:(ZLjava/lang/String;)V` @kind direct;
  #L3a1b44.  return @kind void;
}
procedure `void` `<init>`(`k2.i` v3 @kind this, `boolean` v4 , `java.lang.String` v5 @kind object) @signature `Lk2/i;.<init>:(ZLjava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3a1b58.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a1b5e.  v0:= new `s3.y`;
  #L3a1b62.  v1:= 7I;
  #L3a1b64.  v1:= new `byte`[v1];
  #L3a1b68.  call `<init>`(v0, v1) @signature `Ls3/y;.<init>:([B)V` @kind direct;
  #L3a1b6e.  v3.`k2.i.b` @type ^`s3.y` := v0 @kind object;
  #L3a1b72.  v0:= new `s3.z`;
  #L3a1b76.  v1:= `@@k2.i.v` @type ^`byte`[] @kind object;
  #L3a1b7a.  v2:= 10I;
  #L3a1b7e.  call temp:= `copyOf`(v1, v2) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L3a1b84.  v1:= temp @kind object;
  #L3a1b86.  call `<init>`(v0, v1) @signature `Ls3/z;.<init>:([B)V` @kind direct;
  #L3a1b8c.  v3.`k2.i.c` @type ^`s3.z` := v0 @kind object;
  #L3a1b90.  call `s`(v3) @signature `Lk2/i;.s:()V` @kind direct;
  #L3a1b96.  v0:= -1I;
  #L3a1b98.  v3.`k2.i.m` @type ^`int` := v0;
  #L3a1b9c.  v3.`k2.i.n` @type ^`int` := v0;
  #L3a1ba0.  v0:= -4.9E-324D;
  #L3a1baa.  v3.`k2.i.q` @type ^`long` := v0 @kind wide;
  #L3a1bae.  v3.`k2.i.s` @type ^`long` := v0 @kind wide;
  #L3a1bb2.  v3.`k2.i.a` @type ^`boolean` := v4 @kind boolean;
  #L3a1bb6.  v3.`k2.i.d` @type ^`java.lang.String` := v5 @kind object;
  #L3a1bba.  return @kind void;
}
procedure `void` `b`(`k2.i` v1 @kind this) @signature `Lk2/i;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3a1bcc.  v0:= v1.`k2.i.f` @type ^`a2.d0` @kind object;
  #L3a1bd0.  call temp:= `e`(v0) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3a1bd6.  v0:= v1.`k2.i.t` @type ^`a2.d0` @kind object;
  #L3a1bda.  call temp:= `j`(v0) @signature `Ls3/l0;.j:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3a1be0.  v0:= v1.`k2.i.g` @type ^`a2.d0` @kind object;
  #L3a1be4.  call temp:= `j`(v0) @signature `Ls3/l0;.j:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3a1bea.  return @kind void;
}
procedure `void` `g`(`k2.i` v3 @kind this, `s3.z` v4 @kind object) @signature `Lk2/i;.g:(Ls3/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3a1bfc.  call temp:= `a`(v4) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a1c02.  v0:= temp;
  #L3a1c04.  if v0 != 0 then goto L3a1c0a;
  #L3a1c08.  return @kind void;
  #L3a1c0a.  v0:= v3.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a1c0e.  v0:= v0.`s3.y.a` @type ^`byte`[] @kind object;
  #L3a1c12.  v1:= 0I;
  #L3a1c14.  call temp:= `d`(v4) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a1c1a.  v2:= temp @kind object;
  #L3a1c1c.  call temp:= `e`(v4) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a1c22.  v4:= temp;
  #L3a1c24.  v4:= v2[v4] @kind byte;
  #L3a1c28.  v0[v1]:= v4 @kind byte;
  #L3a1c2c.  v4:= v3.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a1c30.  v0:= 2I;
  #L3a1c32.  call `p`(v4, v0) @signature `Ls3/y;.p:(I)V` @kind virtual;
  #L3a1c38.  v4:= v3.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a1c3c.  v0:= 4I;
  #L3a1c3e.  call temp:= `h`(v4, v0) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L3a1c44.  v4:= temp;
  #L3a1c46.  v0:= v3.`k2.i.n` @type ^`int`;
  #L3a1c4a.  v1:= -1I;
  #L3a1c4c.  if v0 == v1 then goto L3a1c5c;
  #L3a1c50.  if v4 == v0 then goto L3a1c5c;
  #L3a1c54.  call `q`(v3) @signature `Lk2/i;.q:()V` @kind direct;
  #L3a1c5a.  return @kind void;
  #L3a1c5c.  v0:= v3.`k2.i.l` @type ^`boolean` @kind boolean;
  #L3a1c60.  if v0 != 0 then goto L3a1c76;
  #L3a1c64.  v0:= 1I;
  #L3a1c66.  v3.`k2.i.l` @type ^`boolean` := v0 @kind boolean;
  #L3a1c6a.  v0:= v3.`k2.i.o` @type ^`int`;
  #L3a1c6e.  v3.`k2.i.m` @type ^`int` := v0;
  #L3a1c72.  v3.`k2.i.n` @type ^`int` := v4;
  #L3a1c76.  call `t`(v3) @signature `Lk2/i;.t:()V` @kind direct;
  #L3a1c7c.  return @kind void;
}
procedure `boolean` `h`(`k2.i` v8 @kind this, `s3.z` v9 @kind object, `int` v10 ) @signature `Lk2/i;.h:(Ls3/z;I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3a18bc.  v0:= v10 + 1;
  #L3a18c0.  call `O`(v9, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a18c6.  v0:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a18ca.  v0:= v0.`s3.y.a` @type ^`byte`[] @kind object;
  #L3a18ce.  v1:= 1I;
  #L3a18d0.  call temp:= `w`(v8, v9, v0, v1) @signature `Lk2/i;.w:(Ls3/z;[BI)Z` @kind direct;
  #L3a18d6.  v0:= temp;
  #L3a18d8.  v2:= 0I;
  #L3a18da.  if v0 != 0 then goto L3a18e0;
  #L3a18de.  return v2;
  #L3a18e0.  v0:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a18e4.  v3:= 4I;
  #L3a18e6.  call `p`(v0, v3) @signature `Ls3/y;.p:(I)V` @kind virtual;
  #L3a18ec.  v0:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a18f0.  call temp:= `h`(v0, v1) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L3a18f6.  v0:= temp;
  #L3a18f8.  v4:= v8.`k2.i.m` @type ^`int`;
  #L3a18fc.  v5:= -1I;
  #L3a18fe.  if v4 == v5 then goto L3a1908;
  #L3a1902.  if v0 == v4 then goto L3a1908;
  #L3a1906.  return v2;
  #L3a1908.  v4:= v8.`k2.i.n` @type ^`int`;
  #L3a190c.  v6:= 2I;
  #L3a190e.  if v4 == v5 then goto L3a1952;
  #L3a1912.  v4:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a1916.  v4:= v4.`s3.y.a` @type ^`byte`[] @kind object;
  #L3a191a.  call temp:= `w`(v8, v9, v4, v1) @signature `Lk2/i;.w:(Ls3/z;[BI)Z` @kind direct;
  #L3a1920.  v4:= temp;
  #L3a1922.  if v4 != 0 then goto L3a1928;
  #L3a1926.  return v1;
  #L3a1928.  v4:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a192c.  call `p`(v4, v6) @signature `Ls3/y;.p:(I)V` @kind virtual;
  #L3a1932.  v4:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a1936.  call temp:= `h`(v4, v3) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L3a193c.  v4:= temp;
  #L3a193e.  v7:= v8.`k2.i.n` @type ^`int`;
  #L3a1942.  if v4 == v7 then goto L3a1948;
  #L3a1946.  return v2;
  #L3a1948.  v4:= v10 + 2;
  #L3a194c.  call `O`(v9, v4) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a1952.  v4:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a1956.  v4:= v4.`s3.y.a` @type ^`byte`[] @kind object;
  #L3a195a.  call temp:= `w`(v8, v9, v4, v3) @signature `Lk2/i;.w:(Ls3/z;[BI)Z` @kind direct;
  #L3a1960.  v3:= temp;
  #L3a1962.  if v3 != 0 then goto L3a1968;
  #L3a1966.  return v1;
  #L3a1968.  v3:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a196c.  v4:= 14I;
  #L3a1970.  call `p`(v3, v4) @signature `Ls3/y;.p:(I)V` @kind virtual;
  #L3a1976.  v3:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a197a.  v4:= 13I;
  #L3a197e.  call temp:= `h`(v3, v4) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L3a1984.  v3:= temp;
  #L3a1986.  v4:= 7I;
  #L3a1988.  if v3 >= v4 then goto L3a198e;
  #L3a198c.  return v2;
  #L3a198e.  call temp:= `d`(v9) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a1994.  v4:= temp @kind object;
  #L3a1996.  call temp:= `f`(v9) @signature `Ls3/z;.f:()I` @kind virtual;
  #L3a199c.  v9:= temp;
  #L3a199e.  v10:= v10 + v3 @kind int;
  #L3a19a0.  if v10 < v9 then goto L3a19a6;
  #L3a19a4.  return v1;
  #L3a19a6.  v3:= v4[v10] @kind byte;
  #L3a19aa.  if v3 != v5 then goto L3a19dc;
  #L3a19ae.  v10:= v10 + v1 @kind int;
  #L3a19b0.  if v10 != v9 then goto L3a19b6;
  #L3a19b4.  return v1;
  #L3a19b6.  v9:= v4[v10] @kind byte;
  #L3a19ba.  call temp:= `l`(v8, v5, v9) @signature `Lk2/i;.l:(BB)Z` @kind direct;
  #L3a19c0.  v9:= temp;
  #L3a19c2.  if v9 == 0 then goto L3a19d8;
  #L3a19c6.  v9:= v4[v10] @kind byte;
  #L3a19ca.  v9:= v9 ^& 8;
  #L3a19ce.  v9:= v9 ^> 3;
  #L3a19d2.  if v9 != v0 then goto L3a19d8;
  #L3a19d6.  goto L3a19da;
  #L3a19d8.  v1:= 0I;
  #L3a19da.  return v1;
  #L3a19dc.  v0:= v4[v10] @kind byte;
  #L3a19e0.  v3:= 73I;
  #L3a19e4.  if v0 == v3 then goto L3a19ea;
  #L3a19e8.  return v2;
  #L3a19ea.  v0:= v10 + 1;
  #L3a19ee.  if v0 != v9 then goto L3a19f4;
  #L3a19f2.  return v1;
  #L3a19f4.  v0:= v4[v0] @kind byte;
  #L3a19f8.  v3:= 68I;
  #L3a19fc.  if v0 == v3 then goto L3a1a02;
  #L3a1a00.  return v2;
  #L3a1a02.  v10:= v10 + v6 @kind int;
  #L3a1a04.  if v10 != v9 then goto L3a1a0a;
  #L3a1a08.  return v1;
  #L3a1a0a.  v9:= v4[v10] @kind byte;
  #L3a1a0e.  v10:= 51I;
  #L3a1a12.  if v9 != v10 then goto L3a1a18;
  #L3a1a16.  goto L3a1a1a;
  #L3a1a18.  v1:= 0I;
  #L3a1a1a.  return v1;
}
procedure `boolean` `i`(`k2.i` v2 @kind this, `s3.z` v3 @kind object, `byte`[] v4 @kind object, `int` v5 ) @signature `Lk2/i;.i:(Ls3/z;[BI)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3a1a2c.  call temp:= `a`(v3) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a1a32.  v0:= temp;
  #L3a1a34.  v1:= v2.`k2.i.i` @type ^`int`;
  #L3a1a38.  v1:= v5 - v1 @kind int;
  #L3a1a3c.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3a1a42.  v0:= temp;
  #L3a1a44.  v1:= v2.`k2.i.i` @type ^`int`;
  #L3a1a48.  call `j`(v3, v4, v1, v0) @signature `Ls3/z;.j:([BII)V` @kind virtual;
  #L3a1a4e.  v3:= v2.`k2.i.i` @type ^`int`;
  #L3a1a52.  v3:= v3 + v0 @kind int;
  #L3a1a54.  v2.`k2.i.i` @type ^`int` := v3;
  #L3a1a58.  if v3 != v5 then goto L3a1a60;
  #L3a1a5c.  v3:= 1I;
  #L3a1a5e.  goto L3a1a62;
  #L3a1a60.  v3:= 0I;
  #L3a1a62.  return v3;
}
procedure `void` `j`(`k2.i` v7 @kind this, `s3.z` v8 @kind object) @signature `Lk2/i;.j:(Ls3/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a1df0.  call temp:= `d`(v8) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a1df6.  v0:= temp @kind object;
  #L3a1df8.  call temp:= `e`(v8) @signature `Ls3/z;.e:()I` @kind virtual;
  #L3a1dfe.  v1:= temp;
  #L3a1e00.  call temp:= `f`(v8) @signature `Ls3/z;.f:()I` @kind virtual;
  #L3a1e06.  v2:= temp;
  #L3a1e08.  if v1 >= v2 then goto L3a1ee4;
  #L3a1e0c.  v3:= v1 + 1;
  #L3a1e10.  v1:= v0[v1] @kind byte;
  #L3a1e14.  v1:= v1 ^& 255;
  #L3a1e18.  v4:= v7.`k2.i.j` @type ^`int`;
  #L3a1e1c.  v5:= 512I;
  #L3a1e20.  if v4 != v5 then goto L3a1e86;
  #L3a1e24.  v4:= (`byte`) v1 @kind i2b;
  #L3a1e26.  v6:= -1I;
  #L3a1e28.  call temp:= `l`(v7, v6, v4) @signature `Lk2/i;.l:(BB)Z` @kind direct;
  #L3a1e2e.  v4:= temp;
  #L3a1e30.  if v4 == 0 then goto L3a1e86;
  #L3a1e34.  v4:= v7.`k2.i.l` @type ^`boolean` @kind boolean;
  #L3a1e38.  if v4 != 0 then goto L3a1e4c;
  #L3a1e3c.  v4:= v3 + -2;
  #L3a1e40.  call temp:= `h`(v7, v8, v4) @signature `Lk2/i;.h:(Ls3/z;I)Z` @kind direct;
  #L3a1e46.  v4:= temp;
  #L3a1e48.  if v4 == 0 then goto L3a1e86;
  #L3a1e4c.  v0:= v1 ^& 8;
  #L3a1e50.  v0:= v0 ^> 3;
  #L3a1e54.  v7.`k2.i.o` @type ^`int` := v0;
  #L3a1e58.  v0:= 1I;
  #L3a1e5a.  v1:= v1 ^& v0 @kind int;
  #L3a1e5c.  if v1 != 0 then goto L3a1e62;
  #L3a1e60.  goto L3a1e64;
  #L3a1e62.  v0:= 0I;
  #L3a1e64.  v7.`k2.i.k` @type ^`boolean` := v0 @kind boolean;
  #L3a1e68.  v0:= v7.`k2.i.l` @type ^`boolean` @kind boolean;
  #L3a1e6c.  if v0 != 0 then goto L3a1e78;
  #L3a1e70.  call `r`(v7) @signature `Lk2/i;.r:()V` @kind direct;
  #L3a1e76.  goto L3a1e7e;
  #L3a1e78.  call `t`(v7) @signature `Lk2/i;.t:()V` @kind direct;
  #L3a1e7e.  call `O`(v8, v3) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a1e84.  return @kind void;
  #L3a1e86.  v4:= v7.`k2.i.j` @type ^`int`;
  #L3a1e8a.  v1:= v1 ^| v4 @kind int;
  #L3a1e8c.  v6:= 329I;
  #L3a1e90.  if v1 == v6 then goto L3a1ed8;
  #L3a1e94.  v6:= 511I;
  #L3a1e98.  if v1 == v6 then goto L3a1ed2;
  #L3a1e9c.  v5:= 836I;
  #L3a1ea0.  if v1 == v5 then goto L3a1ecc;
  #L3a1ea4.  v5:= 1075I;
  #L3a1ea8.  if v1 == v5 then goto L3a1ebe;
  #L3a1eac.  v1:= 256I;
  #L3a1eb0.  if v4 == v1 then goto L3a1ee0;
  #L3a1eb4.  v7.`k2.i.j` @type ^`int` := v1;
  #L3a1eb8.  v3:= v3 + -1;
  #L3a1ebc.  goto L3a1ee0;
  #L3a1ebe.  call `u`(v7) @signature `Lk2/i;.u:()V` @kind direct;
  #L3a1ec4.  call `O`(v8, v3) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a1eca.  return @kind void;
  #L3a1ecc.  v1:= 1024I;
  #L3a1ed0.  goto L3a1edc;
  #L3a1ed2.  v7.`k2.i.j` @type ^`int` := v5;
  #L3a1ed6.  goto L3a1ee0;
  #L3a1ed8.  v1:= 768I;
  #L3a1edc.  v7.`k2.i.j` @type ^`int` := v1;
  #L3a1ee0.  v1:= v3;
  #L3a1ee2.  goto L3a1e08;
  #L3a1ee4.  call `O`(v8, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a1eea.  return @kind void;
}
procedure `boolean` `l`(`k2.i` v0 @kind this, `byte` v1 , `byte` v2 ) @signature `Lk2/i;.l:(BB)Z` @AccessFlag PRIVATE {
    temp;

  #L3a1a74.  v1:= v1 ^& 255;
  #L3a1a78.  v1:= v1 ^< 8;
  #L3a1a7c.  v2:= v2 ^& 255;
  #L3a1a80.  v1:= v1 ^| v2 @kind int;
  #L3a1a82.  call temp:= `m`(v1) @signature `Lk2/i;.m:(I)Z` @kind static;
  #L3a1a88.  v1:= temp;
  #L3a1a8a.  return v1;
}
procedure `boolean` `m`(`int` v1 ) @signature `Lk2/i;.m:(I)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a1a9c.  v0:= 65526I;
  #L3a1aa2.  v1:= v1 ^& v0 @kind int;
  #L3a1aa4.  v0:= 65520I;
  #L3a1aaa.  if v1 != v0 then goto L3a1ab2;
  #L3a1aae.  v1:= 1I;
  #L3a1ab0.  goto L3a1ab4;
  #L3a1ab2.  v1:= 0I;
  #L3a1ab4.  return v1;
}
procedure `void` `n`(`k2.i` v8 @kind this) @signature `Lk2/i;.n:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3a1f38.  v0:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a1f3c.  v1:= 0I;
  #L3a1f3e.  call `p`(v0, v1) @signature `Ls3/y;.p:(I)V` @kind virtual;
  #L3a1f44.  v0:= v8.`k2.i.p` @type ^`boolean` @kind boolean;
  #L3a1f48.  v1:= 5I;
  #L3a1f4a.  v2:= 2I;
  #L3a1f4c.  if v0 != 0 then goto L3a2054;
  #L3a1f50.  v0:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a1f54.  call temp:= `h`(v0, v2) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L3a1f5a.  v0:= temp;
  #L3a1f5c.  v3:= 1I;
  #L3a1f5e.  v0:= v0 + v3 @kind int;
  #L3a1f60.  if v0 == v2 then goto L3a1f9c;
  #L3a1f64.  v4:= new `java.lang.StringBuilder`;
  #L3a1f68.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a1f6e.  v5:= "Detected audio object type: " @kind object;
  #L3a1f72.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a1f78.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a1f7e.  v0:= ", but assuming AAC LC." @kind object;
  #L3a1f82.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a1f88.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a1f8e.  v0:= temp @kind object;
  #L3a1f90.  v4:= "AdtsReader" @kind object;
  #L3a1f94.  call `h`(v4, v0) @signature `Ls3/q;.h:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L3a1f9a.  v0:= 2I;
  #L3a1f9c.  v4:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a1fa0.  call `r`(v4, v1) @signature `Ls3/y;.r:(I)V` @kind virtual;
  #L3a1fa6.  v4:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a1faa.  v5:= 3I;
  #L3a1fac.  call temp:= `h`(v4, v5) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L3a1fb2.  v4:= temp;
  #L3a1fb4.  v5:= v8.`k2.i.n` @type ^`int`;
  #L3a1fb8.  call temp:= `b`(v0, v5, v4) @signature `Lx1/a;.b:(III)[B` @kind static;
  #L3a1fbe.  v0:= temp @kind object;
  #L3a1fc0.  call temp:= `f`(v0) @signature `Lx1/a;.f:([B)Lx1/a$b;` @kind static;
  #L3a1fc6.  v4:= temp @kind object;
  #L3a1fc8.  v5:= new `v1.j1$b`;
  #L3a1fcc.  call `<init>`(v5) @signature `Lv1/j1$b;.<init>:()V` @kind direct;
  #L3a1fd2.  v6:= v8.`k2.i.e` @type ^`java.lang.String` @kind object;
  #L3a1fd6.  call temp:= `S`(v5, v6) @signature `Lv1/j1$b;.S:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a1fdc.  v5:= temp @kind object;
  #L3a1fde.  v6:= "audio/mp4a-latm" @kind object;
  #L3a1fe2.  call temp:= `e0`(v5, v6) @signature `Lv1/j1$b;.e0:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a1fe8.  v5:= temp @kind object;
  #L3a1fea.  v6:= v4.`x1.a$b.c` @type ^`java.lang.String` @kind object;
  #L3a1fee.  call temp:= `I`(v5, v6) @signature `Lv1/j1$b;.I:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a1ff4.  v5:= temp @kind object;
  #L3a1ff6.  v6:= v4.`x1.a$b.b` @type ^`int`;
  #L3a1ffa.  call temp:= `H`(v5, v6) @signature `Lv1/j1$b;.H:(I)Lv1/j1$b;` @kind virtual;
  #L3a2000.  v5:= temp @kind object;
  #L3a2002.  v4:= v4.`x1.a$b.a` @type ^`int`;
  #L3a2006.  call temp:= `f0`(v5, v4) @signature `Lv1/j1$b;.f0:(I)Lv1/j1$b;` @kind virtual;
  #L3a200c.  v4:= temp @kind object;
  #L3a200e.  call temp:= `singletonList`(v0) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3a2014.  v0:= temp @kind object;
  #L3a2016.  call temp:= `T`(v4, v0) @signature `Lv1/j1$b;.T:(Ljava/util/List;)Lv1/j1$b;` @kind virtual;
  #L3a201c.  v0:= temp @kind object;
  #L3a201e.  v4:= v8.`k2.i.d` @type ^`java.lang.String` @kind object;
  #L3a2022.  call temp:= `V`(v0, v4) @signature `Lv1/j1$b;.V:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a2028.  v0:= temp @kind object;
  #L3a202a.  call temp:= `E`(v0) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L3a2030.  v0:= temp @kind object;
  #L3a2032.  v4:= 1024000000L;
  #L3a2038.  v6:= v0.`v1.j1.N` @type ^`int`;
  #L3a203c.  v6:= (`long`) v6 @kind i2l;
  #L3a203e.  v4:= v4 / v6 @kind long;
  #L3a2040.  v8.`k2.i.q` @type ^`long` := v4 @kind wide;
  #L3a2044.  v4:= v8.`k2.i.f` @type ^`a2.d0` @kind object;
  #L3a2048.  call `b`(v4, v0) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L3a204e.  v8.`k2.i.p` @type ^`boolean` := v3 @kind boolean;
  #L3a2052.  goto L3a2062;
  #L3a2054.  v0:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a2058.  v3:= 10I;
  #L3a205c.  call `r`(v0, v3) @signature `Ls3/y;.r:(I)V` @kind virtual;
  #L3a2062.  v0:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a2066.  v3:= 4I;
  #L3a2068.  call `r`(v0, v3) @signature `Ls3/y;.r:(I)V` @kind virtual;
  #L3a206e.  v0:= v8.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a2072.  v3:= 13I;
  #L3a2076.  call temp:= `h`(v0, v3) @signature `Ls3/y;.h:(I)I` @kind virtual;
  #L3a207c.  v0:= temp;
  #L3a207e.  v0:= v0 - v2 @kind int;
  #L3a2080.  v0:= v0 - v1 @kind int;
  #L3a2082.  v1:= v8.`k2.i.k` @type ^`boolean` @kind boolean;
  #L3a2086.  if v1 == 0 then goto L3a208e;
  #L3a208a.  v0:= v0 + -2;
  #L3a208e.  v6:= v0;
  #L3a2090.  v2:= v8.`k2.i.f` @type ^`a2.d0` @kind object;
  #L3a2094.  v3:= v8.`k2.i.q` @type ^`long` @kind wide;
  #L3a2098.  v5:= 0I;
  #L3a209a.  v1:= v8 @kind object;
  #L3a209c.  call `v`(v1, v2, v3, v5, v6) @signature `Lk2/i;.v:(La2/d0;JII)V` @kind direct;
  #L3a20a2.  return @kind void;
}
procedure `void` `o`(`k2.i` v9 @kind this) @signature `Lk2/i;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3a20b4.  v0:= v9.`k2.i.g` @type ^`a2.d0` @kind object;
  #L3a20b8.  v1:= v9.`k2.i.c` @type ^`s3.z` @kind object;
  #L3a20bc.  v2:= 10I;
  #L3a20c0.  call `c`(v0, v1, v2) @signature `La2/d0;.c:(Ls3/z;I)V` @kind interface;
  #L3a20c6.  v0:= v9.`k2.i.c` @type ^`s3.z` @kind object;
  #L3a20ca.  v1:= 6I;
  #L3a20cc.  call `O`(v0, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a20d2.  v4:= v9.`k2.i.g` @type ^`a2.d0` @kind object;
  #L3a20d6.  v0:= v9.`k2.i.c` @type ^`s3.z` @kind object;
  #L3a20da.  call temp:= `B`(v0) @signature `Ls3/z;.B:()I` @kind virtual;
  #L3a20e0.  v0:= temp;
  #L3a20e2.  v8:= v0 + 10;
  #L3a20e6.  v5:= 0L;
  #L3a20ea.  v7:= 10I;
  #L3a20ee.  v3:= v9 @kind object;
  #L3a20f0.  call `v`(v3, v4, v5, v7, v8) @signature `Lk2/i;.v:(La2/d0;JII)V` @kind direct;
  #L3a20f6.  return @kind void;
}
procedure `void` `p`(`k2.i` v7 @kind this, `s3.z` v8 @kind object) @signature `Lk2/i;.p:(Ls3/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a2108.  call temp:= `a`(v8) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a210e.  v0:= temp;
  #L3a2110.  v1:= v7.`k2.i.r` @type ^`int`;
  #L3a2114.  v2:= v7.`k2.i.i` @type ^`int`;
  #L3a2118.  v1:= v1 - v2 @kind int;
  #L3a211a.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3a2120.  v0:= temp;
  #L3a2122.  v1:= v7.`k2.i.t` @type ^`a2.d0` @kind object;
  #L3a2126.  call `c`(v1, v8, v0) @signature `La2/d0;.c:(Ls3/z;I)V` @kind interface;
  #L3a212c.  v8:= v7.`k2.i.i` @type ^`int`;
  #L3a2130.  v8:= v8 + v0 @kind int;
  #L3a2132.  v7.`k2.i.i` @type ^`int` := v8;
  #L3a2136.  v4:= v7.`k2.i.r` @type ^`int`;
  #L3a213a.  if v8 != v4 then goto L3a2178;
  #L3a213e.  v1:= v7.`k2.i.s` @type ^`long` @kind wide;
  #L3a2142.  v5:= -4.9E-324D;
  #L3a214c.  v8:= lcmp(v1, v5);
  #L3a2150.  if v8 == 0 then goto L3a2172;
  #L3a2154.  v0:= v7.`k2.i.t` @type ^`a2.d0` @kind object;
  #L3a2158.  v3:= 1I;
  #L3a215a.  v5:= 0I;
  #L3a215c.  v6:= 0I;
  #L3a215e.  call `f`(v0, v1, v3, v4, v5, v6) @signature `La2/d0;.f:(JIIILa2/d0$a;)V` @kind interface;
  #L3a2164.  v0:= v7.`k2.i.s` @type ^`long` @kind wide;
  #L3a2168.  v2:= v7.`k2.i.u` @type ^`long` @kind wide;
  #L3a216c.  v0:= v0 + v2 @kind long;
  #L3a216e.  v7.`k2.i.s` @type ^`long` := v0 @kind wide;
  #L3a2172.  call `s`(v7) @signature `Lk2/i;.s:()V` @kind direct;
  #L3a2178.  return @kind void;
}
procedure `void` `q`(`k2.i` v1 @kind this) @signature `Lk2/i;.q:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3a218c.  v0:= 0I;
  #L3a218e.  v1.`k2.i.l` @type ^`boolean` := v0 @kind boolean;
  #L3a2192.  call `s`(v1) @signature `Lk2/i;.s:()V` @kind direct;
  #L3a2198.  return @kind void;
}
procedure `void` `r`(`k2.i` v1 @kind this) @signature `Lk2/i;.r:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3a21d4.  v0:= 1I;
  #L3a21d6.  v1.`k2.i.h` @type ^`int` := v0;
  #L3a21da.  v0:= 0I;
  #L3a21dc.  v1.`k2.i.i` @type ^`int` := v0;
  #L3a21e0.  return @kind void;
}
procedure `void` `s`(`k2.i` v1 @kind this) @signature `Lk2/i;.s:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3a21f4.  v0:= 0I;
  #L3a21f6.  v1.`k2.i.h` @type ^`int` := v0;
  #L3a21fa.  v1.`k2.i.i` @type ^`int` := v0;
  #L3a21fe.  v0:= 256I;
  #L3a2202.  v1.`k2.i.j` @type ^`int` := v0;
  #L3a2206.  return @kind void;
}
procedure `void` `t`(`k2.i` v1 @kind this) @signature `Lk2/i;.t:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3a2218.  v0:= 3I;
  #L3a221a.  v1.`k2.i.h` @type ^`int` := v0;
  #L3a221e.  v0:= 0I;
  #L3a2220.  v1.`k2.i.i` @type ^`int` := v0;
  #L3a2224.  return @kind void;
}
procedure `void` `u`(`k2.i` v2 @kind this) @signature `Lk2/i;.u:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3a2238.  v0:= 2I;
  #L3a223a.  v2.`k2.i.h` @type ^`int` := v0;
  #L3a223e.  v0:= `@@k2.i.v` @type ^`byte`[] @kind object;
  #L3a2242.  v0:= length @variable v0;
  #L3a2244.  v2.`k2.i.i` @type ^`int` := v0;
  #L3a2248.  v0:= 0I;
  #L3a224a.  v2.`k2.i.r` @type ^`int` := v0;
  #L3a224e.  v1:= v2.`k2.i.c` @type ^`s3.z` @kind object;
  #L3a2252.  call `O`(v1, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L3a2258.  return @kind void;
}
procedure `void` `v`(`k2.i` v1 @kind this, `a2.d0` v2 @kind object, `long` v3 , `int` v5 , `int` v6 ) @signature `Lk2/i;.v:(La2/d0;JII)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3a226c.  v0:= 4I;
  #L3a226e.  v1.`k2.i.h` @type ^`int` := v0;
  #L3a2272.  v1.`k2.i.i` @type ^`int` := v5;
  #L3a2276.  v1.`k2.i.t` @type ^`a2.d0` := v2 @kind object;
  #L3a227a.  v1.`k2.i.u` @type ^`long` := v3 @kind wide;
  #L3a227e.  v1.`k2.i.r` @type ^`int` := v6;
  #L3a2282.  return @kind void;
}
procedure `boolean` `w`(`k2.i` v2 @kind this, `s3.z` v3 @kind object, `byte`[] v4 @kind object, `int` v5 ) @signature `Lk2/i;.w:(Ls3/z;[BI)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3a1ac8.  call temp:= `a`(v3) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a1ace.  v0:= temp;
  #L3a1ad0.  v1:= 0I;
  #L3a1ad2.  if v0 >= v5 then goto L3a1ad8;
  #L3a1ad6.  return v1;
  #L3a1ad8.  call `j`(v3, v4, v1, v5) @signature `Ls3/z;.j:([BII)V` @kind virtual;
  #L3a1ade.  v3:= 1I;
  #L3a1ae0.  return v3;
}
procedure `void` `a`(`k2.i` v2 @kind this) @signature `Lk2/i;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a21ac.  v0:= -4.9E-324D;
  #L3a21b6.  v2.`k2.i.s` @type ^`long` := v0 @kind wide;
  #L3a21ba.  call `q`(v2) @signature `Lk2/i;.q:()V` @kind direct;
  #L3a21c0.  return @kind void;
}
procedure `void` `c`(`k2.i` v2 @kind this, `s3.z` v3 @kind object) @signature `Lk2/i;.c:(Ls3/z;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a1c90.  call `b`(v2) @signature `Lk2/i;.b:()V` @kind direct;
  #L3a1c96.  call temp:= `a`(v3) @signature `Ls3/z;.a:()I` @kind virtual;
  #L3a1c9c.  v0:= temp;
  #L3a1c9e.  if v0 <= 0 then goto L3a1d34;
  #L3a1ca2.  v0:= v2.`k2.i.h` @type ^`int`;
  #L3a1ca6.  if v0 == 0 then goto L3a1d2c;
  #L3a1caa.  v1:= 1I;
  #L3a1cac.  if v0 == v1 then goto L3a1d24;
  #L3a1cb0.  v1:= 2I;
  #L3a1cb2.  if v0 == v1 then goto L3a1d00;
  #L3a1cb6.  v1:= 3I;
  #L3a1cb8.  if v0 == v1 then goto L3a1cd6;
  #L3a1cbc.  v1:= 4I;
  #L3a1cbe.  if v0 != v1 then goto L3a1cca;
  #L3a1cc2.  call `p`(v2, v3) @signature `Lk2/i;.p:(Ls3/z;)V` @kind direct;
  #L3a1cc8.  goto L3a1c96;
  #L3a1cca.  v3:= new `java.lang.IllegalStateException`;
  #L3a1cce.  call `<init>`(v3) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3a1cd4.  throw v3;
  #L3a1cd6.  v0:= v2.`k2.i.k` @type ^`boolean` @kind boolean;
  #L3a1cda.  if v0 == 0 then goto L3a1ce2;
  #L3a1cde.  v0:= 7I;
  #L3a1ce0.  goto L3a1ce4;
  #L3a1ce2.  v0:= 5I;
  #L3a1ce4.  v1:= v2.`k2.i.b` @type ^`s3.y` @kind object;
  #L3a1ce8.  v1:= v1.`s3.y.a` @type ^`byte`[] @kind object;
  #L3a1cec.  call temp:= `i`(v2, v3, v1, v0) @signature `Lk2/i;.i:(Ls3/z;[BI)Z` @kind direct;
  #L3a1cf2.  v0:= temp;
  #L3a1cf4.  if v0 == 0 then goto L3a1c96;
  #L3a1cf8.  call `n`(v2) @signature `Lk2/i;.n:()V` @kind direct;
  #L3a1cfe.  goto L3a1c96;
  #L3a1d00.  v0:= v2.`k2.i.c` @type ^`s3.z` @kind object;
  #L3a1d04.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L3a1d0a.  v0:= temp @kind object;
  #L3a1d0c.  v1:= 10I;
  #L3a1d10.  call temp:= `i`(v2, v3, v0, v1) @signature `Lk2/i;.i:(Ls3/z;[BI)Z` @kind direct;
  #L3a1d16.  v0:= temp;
  #L3a1d18.  if v0 == 0 then goto L3a1c96;
  #L3a1d1c.  call `o`(v2) @signature `Lk2/i;.o:()V` @kind direct;
  #L3a1d22.  goto L3a1c96;
  #L3a1d24.  call `g`(v2, v3) @signature `Lk2/i;.g:(Ls3/z;)V` @kind direct;
  #L3a1d2a.  goto L3a1c96;
  #L3a1d2c.  call `j`(v2, v3) @signature `Lk2/i;.j:(Ls3/z;)V` @kind direct;
  #L3a1d32.  goto L3a1c96;
  #L3a1d34.  return @kind void;
}
procedure `void` `d`(`k2.i` v2 @kind this, `a2.n` v3 @kind object, `k2.i0$d` v4 @kind object) @signature `Lk2/i;.d:(La2/n;Lk2/i0$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a1d48.  call `a`(v4) @signature `Lk2/i0$d;.a:()V` @kind virtual;
  #L3a1d4e.  call temp:= `b`(v4) @signature `Lk2/i0$d;.b:()Ljava/lang/String;` @kind virtual;
  #L3a1d54.  v0:= temp @kind object;
  #L3a1d56.  v2.`k2.i.e` @type ^`java.lang.String` := v0 @kind object;
  #L3a1d5a.  call temp:= `c`(v4) @signature `Lk2/i0$d;.c:()I` @kind virtual;
  #L3a1d60.  v0:= temp;
  #L3a1d62.  v1:= 1I;
  #L3a1d64.  call temp:= `e`(v3, v0, v1) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L3a1d6a.  v0:= temp @kind object;
  #L3a1d6c.  v2.`k2.i.f` @type ^`a2.d0` := v0 @kind object;
  #L3a1d70.  v2.`k2.i.t` @type ^`a2.d0` := v0 @kind object;
  #L3a1d74.  v0:= v2.`k2.i.a` @type ^`boolean` @kind boolean;
  #L3a1d78.  if v0 == 0 then goto L3a1dce;
  #L3a1d7c.  call `a`(v4) @signature `Lk2/i0$d;.a:()V` @kind virtual;
  #L3a1d82.  call temp:= `c`(v4) @signature `Lk2/i0$d;.c:()I` @kind virtual;
  #L3a1d88.  v0:= temp;
  #L3a1d8a.  v1:= 5I;
  #L3a1d8c.  call temp:= `e`(v3, v0, v1) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L3a1d92.  v3:= temp @kind object;
  #L3a1d94.  v2.`k2.i.g` @type ^`a2.d0` := v3 @kind object;
  #L3a1d98.  v0:= new `v1.j1$b`;
  #L3a1d9c.  call `<init>`(v0) @signature `Lv1/j1$b;.<init>:()V` @kind direct;
  #L3a1da2.  call temp:= `b`(v4) @signature `Lk2/i0$d;.b:()Ljava/lang/String;` @kind virtual;
  #L3a1da8.  v4:= temp @kind object;
  #L3a1daa.  call temp:= `S`(v0, v4) @signature `Lv1/j1$b;.S:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a1db0.  v4:= temp @kind object;
  #L3a1db2.  v0:= "application/id3" @kind object;
  #L3a1db6.  call temp:= `e0`(v4, v0) @signature `Lv1/j1$b;.e0:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L3a1dbc.  v4:= temp @kind object;
  #L3a1dbe.  call temp:= `E`(v4) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L3a1dc4.  v4:= temp @kind object;
  #L3a1dc6.  call `b`(v3, v4) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L3a1dcc.  goto L3a1ddc;
  #L3a1dce.  v3:= new `a2.k`;
  #L3a1dd2.  call `<init>`(v3) @signature `La2/k;.<init>:()V` @kind direct;
  #L3a1dd8.  v2.`k2.i.g` @type ^`a2.d0` := v3 @kind object;
  #L3a1ddc.  return @kind void;
}
procedure `void` `e`(`k2.i` v0 @kind this) @signature `Lk2/i;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L3a1efc.  return @kind void;
}
procedure `void` `f`(`k2.i` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lk2/i;.f:(JI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a1f10.  v0:= -4.9E-324D;
  #L3a1f1a.  v5:= lcmp(v3, v0);
  #L3a1f1e.  if v5 == 0 then goto L3a1f26;
  #L3a1f22.  v2.`k2.i.s` @type ^`long` := v3 @kind wide;
  #L3a1f26.  return @kind void;
}
procedure `long` `k`(`k2.i` v2 @kind this) @signature `Lk2/i;.k:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a1af4.  v0:= v2.`k2.i.q` @type ^`long` @kind wide;
  #L3a1af8.  return v0 @kind wide;
}
