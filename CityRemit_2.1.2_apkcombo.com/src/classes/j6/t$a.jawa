record `j6.t$a` @kind class @AccessFlag  extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.lang.String` `j6.t$a.a` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicLong` `j6.t$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`j6.t$a` v0 @kind this, `java.lang.String` v1 @kind object, `java.util.concurrent.atomic.AtomicLong` v2 @kind object) @signature `Lj6/t$a;.<init>:(Ljava/lang/String;Ljava/util/concurrent/atomic/AtomicLong;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L398b0c.  v0.`j6.t$a.a` @type ^`java.lang.String` := v1 @kind object;
  #L398b10.  v0.`j6.t$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L398b14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L398b1a.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`j6.t$a` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lj6/t$a;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L398aac.  call temp:= `defaultThreadFactory`() @signature `Ljava/util/concurrent/Executors;.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L398ab2.  v0:= temp @kind object;
  #L398ab4.  v1:= new `j6.t$a$a`;
  #L398ab8.  call `<init>`(v1, v3, v4) @signature `Lj6/t$a$a;.<init>:(Lj6/t$a;Ljava/lang/Runnable;)V` @kind direct;
  #L398abe.  call temp:= `newThread`(v0, v1) @signature `Ljava/util/concurrent/ThreadFactory;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @kind interface;
  #L398ac4.  v4:= temp @kind object;
  #L398ac6.  v0:= new `java.lang.StringBuilder`;
  #L398aca.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L398ad0.  v1:= v3.`j6.t$a.a` @type ^`java.lang.String` @kind object;
  #L398ad4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L398ada.  v1:= v3.`j6.t$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L398ade.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L398ae4.  v1:= temp @kind wide;
  #L398ae6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L398aec.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L398af2.  v0:= temp @kind object;
  #L398af4.  call `setName`(v4, v0) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L398afa.  return v4 @kind object;
}
