record `j6.a0` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.atomic.AtomicInteger` `j6.a0.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `j6.a0.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`j6.a0` v1 @kind this) @signature `Lj6/a0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L399674.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39967a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L39967e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L399684.  v1.`j6.a0.a` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L399688.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L39968c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L399692.  v1.`j6.a0.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L399696.  return @kind void;
}
procedure `int` `a`(`j6.a0` v1 @kind this) @signature `Lj6/a0;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L399634.  v0:= v1.`j6.a0.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L399638.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39963e.  v0:= temp;
  #L399640.  return v0;
}
procedure `int` `b`(`j6.a0` v1 @kind this) @signature `Lj6/a0;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L399654.  v0:= v1.`j6.a0.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L399658.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39965e.  v0:= temp;
  #L399660.  return v0;
}
procedure `void` `c`(`j6.a0` v1 @kind this) @signature `Lj6/a0;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3996a8.  v0:= v1.`j6.a0.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3996ac.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3996b2.  return @kind void;
}
procedure `void` `d`(`j6.a0` v1 @kind this) @signature `Lj6/a0;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3996c4.  v0:= v1.`j6.a0.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3996c8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3996ce.  return @kind void;
}
procedure `void` `e`(`j6.a0` v2 @kind this) @signature `Lj6/a0;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3996e0.  v0:= v2.`j6.a0.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3996e4.  v1:= 0I;
  #L3996e6.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L3996ec.  return @kind void;
}
