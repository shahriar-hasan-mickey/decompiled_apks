record `z1.g0` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `void` `a`() @signature `Lz1/g0;.a:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `b`(`z1.g0$b` v0 @kind object) @signature `Lz1/g0;.b:(Lz1/g0$b;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `c`(`byte`[] v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lz1/g0;.c:([BLjava/lang/String;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `d`(`byte`[] v0 @kind object, `byte`[] v1 @kind object) @signature `Lz1/g0;.d:([B[B)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.Map` `e`(`byte`[] v0 @kind object) @signature `Lz1/g0;.e:([B)Ljava/util/Map;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `f`(`byte`[] v0 @kind object) @signature `Lz1/g0;.f:([B)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `g`(`byte`[] v0 @kind object, `w1.t1` v1 @kind object) @signature `Lz1/g0;.g:([BLw1/t1;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `h`(`byte`[] v0 @kind object, `byte`[] v1 @kind object) @signature `Lz1/g0;.h:([B[B)[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `z1.g0$d` `i`() @signature `Lz1/g0;.i:()Lz1/g0$d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `j`(`byte`[] v0 @kind object) @signature `Lz1/g0;.j:([B)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `z1.g0$a` `k`(`byte`[] v0 @kind object, `java.util.List` v1 @kind object, `int` v2 , `java.util.HashMap` v3 @kind object) @signature `Lz1/g0;.k:([BLjava/util/List;ILjava/util/HashMap;)Lz1/g0$a;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `l`() @signature `Lz1/g0;.l:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `y1.b` `m`(`byte`[] v0 @kind object) @signature `Lz1/g0;.m:([B)Ly1/b;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `n`() @signature `Lz1/g0;.n:()[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
