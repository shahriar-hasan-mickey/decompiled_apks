record `z1.h$g` @kind class @AccessFlag  extends `z1.g$a` @kind interface {
  `java.util.Set` `z1.h$g.a` @AccessFlag PRIVATE_FINAL;
  `z1.g` `z1.h$g.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`z1.h$g` v0 @kind this, `z1.h` v1 @kind object) @signature `Lz1/h$g;.<init>:(Lz1/h;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4fb52c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fb532.  v1:= new `java.util.HashSet`;
  #L4fb536.  call `<init>`(v1) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L4fb53c.  v0.`z1.h$g.a` @type ^`java.util.Set` := v1 @kind object;
  #L4fb540.  return @kind void;
}
procedure `void` `a`(`z1.h$g` v2 @kind this) @signature `Lz1/h$g;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fb554.  v0:= 0I;
  #L4fb556.  v2.`z1.h$g.b` @type ^`z1.g` := v0 @kind object;
  #L4fb55a.  v0:= v2.`z1.h$g.a` @type ^`java.util.Set` @kind object;
  #L4fb55e.  call temp:= `Q`(v0) @signature `Lm5/q;.Q:(Ljava/util/Collection;)Lm5/q;` @kind static;
  #L4fb564.  v0:= temp @kind object;
  #L4fb566.  v1:= v2.`z1.h$g.a` @type ^`java.util.Set` @kind object;
  #L4fb56a.  call `clear`(v1) @signature `Ljava/util/Set;.clear:()V` @kind interface;
  #L4fb570.  call temp:= `u`(v0) @signature `Lm5/q;.u:()Lm5/s0;` @kind virtual;
  #L4fb576.  v0:= temp @kind object;
  #L4fb578.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4fb57e.  v1:= temp;
  #L4fb580.  if v1 == 0 then goto L4fb598;
  #L4fb584.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4fb58a.  v1:= temp @kind object;
  #L4fb58c.  v1:= (`z1.g`) v1 @kind object;
  #L4fb590.  call `z`(v1) @signature `Lz1/g;.z:()V` @kind virtual;
  #L4fb596.  goto L4fb578;
  #L4fb598.  return @kind void;
}
procedure `void` `b`(`z1.h$g` v2 @kind this, `java.lang.Exception` v3 @kind object, `boolean` v4 ) @signature `Lz1/h$g;.b:(Ljava/lang/Exception;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fb5ac.  v0:= 0I;
  #L4fb5ae.  v2.`z1.h$g.b` @type ^`z1.g` := v0 @kind object;
  #L4fb5b2.  v0:= v2.`z1.h$g.a` @type ^`java.util.Set` @kind object;
  #L4fb5b6.  call temp:= `Q`(v0) @signature `Lm5/q;.Q:(Ljava/util/Collection;)Lm5/q;` @kind static;
  #L4fb5bc.  v0:= temp @kind object;
  #L4fb5be.  v1:= v2.`z1.h$g.a` @type ^`java.util.Set` @kind object;
  #L4fb5c2.  call `clear`(v1) @signature `Ljava/util/Set;.clear:()V` @kind interface;
  #L4fb5c8.  call temp:= `u`(v0) @signature `Lm5/q;.u:()Lm5/s0;` @kind virtual;
  #L4fb5ce.  v0:= temp @kind object;
  #L4fb5d0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4fb5d6.  v1:= temp;
  #L4fb5d8.  if v1 == 0 then goto L4fb5f0;
  #L4fb5dc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4fb5e2.  v1:= temp @kind object;
  #L4fb5e4.  v1:= (`z1.g`) v1 @kind object;
  #L4fb5e8.  call `A`(v1, v3, v4) @signature `Lz1/g;.A:(Ljava/lang/Exception;Z)V` @kind virtual;
  #L4fb5ee.  goto L4fb5d0;
  #L4fb5f0.  return @kind void;
}
procedure `void` `c`(`z1.h$g` v1 @kind this, `z1.g` v2 @kind object) @signature `Lz1/h$g;.c:(Lz1/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fb660.  v0:= v1.`z1.h$g.a` @type ^`java.util.Set` @kind object;
  #L4fb664.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fb66a.  v0:= v1.`z1.h$g.b` @type ^`z1.g` @kind object;
  #L4fb66e.  if v0 == 0 then goto L4fb674;
  #L4fb672.  return @kind void;
  #L4fb674.  v1.`z1.h$g.b` @type ^`z1.g` := v2 @kind object;
  #L4fb678.  call `E`(v2) @signature `Lz1/g;.E:()V` @kind virtual;
  #L4fb67e.  return @kind void;
}
procedure `void` `d`(`z1.h$g` v1 @kind this, `z1.g` v2 @kind object) @signature `Lz1/h$g;.d:(Lz1/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fb604.  v0:= v1.`z1.h$g.a` @type ^`java.util.Set` @kind object;
  #L4fb608.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4fb60e.  v0:= v1.`z1.h$g.b` @type ^`z1.g` @kind object;
  #L4fb612.  if v0 != v2 then goto L4fb64e;
  #L4fb616.  v2:= 0I;
  #L4fb618.  v1.`z1.h$g.b` @type ^`z1.g` := v2 @kind object;
  #L4fb61c.  v2:= v1.`z1.h$g.a` @type ^`java.util.Set` @kind object;
  #L4fb620.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L4fb626.  v2:= temp;
  #L4fb628.  if v2 != 0 then goto L4fb64e;
  #L4fb62c.  v2:= v1.`z1.h$g.a` @type ^`java.util.Set` @kind object;
  #L4fb630.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4fb636.  v2:= temp @kind object;
  #L4fb638.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4fb63e.  v2:= temp @kind object;
  #L4fb640.  v2:= (`z1.g`) v2 @kind object;
  #L4fb644.  v1.`z1.h$g.b` @type ^`z1.g` := v2 @kind object;
  #L4fb648.  call `E`(v2) @signature `Lz1/g;.E:()V` @kind virtual;
  #L4fb64e.  return @kind void;
}
