record `w6.b` @kind class @AccessFlag PUBLIC extends `java.io.Reader` @kind class {
  `java.util.List` `w6.b.o` @AccessFlag PRIVATE;
  `boolean` `w6.b.p` @AccessFlag PRIVATE;
  `int` `w6.b.q` @AccessFlag PRIVATE;
  `int` `w6.b.r` @AccessFlag PRIVATE;
  `int` `w6.b.s` @AccessFlag PRIVATE;
  `int` `w6.b.t` @AccessFlag PRIVATE;
  `boolean` `w6.b.u` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`w6.b` v2 @kind this) @signature `Lw6/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4c2a58.  call `<init>`(v2) @signature `Ljava/io/Reader;.<init>:()V` @kind direct;
  #L4c2a5e.  v0:= 0I;
  #L4c2a60.  v2.`w6.b.o` @type ^`java.util.List` := v0 @kind object;
  #L4c2a64.  v0:= 0I;
  #L4c2a66.  v2.`w6.b.p` @type ^`boolean` := v0 @kind boolean;
  #L4c2a6a.  v1:= v2.`w6.b.q` @type ^`int`;
  #L4c2a6e.  v2.`w6.b.s` @type ^`int` := v1;
  #L4c2a72.  v1:= v2.`w6.b.r` @type ^`int`;
  #L4c2a76.  v2.`w6.b.t` @type ^`int` := v1;
  #L4c2a7a.  v2.`w6.b.u` @type ^`boolean` := v0 @kind boolean;
  #L4c2a7e.  v0:= new `java.util.ArrayList`;
  #L4c2a82.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4c2a88.  v2.`w6.b.o` @type ^`java.util.List` := v0 @kind object;
  #L4c2a8c.  return @kind void;
}
procedure `long` `c`(`w6.b` v7 @kind this, `long` v8 ) @signature `Lw6/b;.c:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c29c8.  v0:= 0L;
  #L4c29cc.  v2:= v7.`w6.b.r` @type ^`int`;
  #L4c29d0.  v3:= v7.`w6.b.o` @type ^`java.util.List` @kind object;
  #L4c29d4.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4c29da.  v3:= temp;
  #L4c29dc.  if v2 >= v3 then goto L4c2a26;
  #L4c29e0.  v2:= lcmp(v0, v8);
  #L4c29e4.  if v2 >= 0 then goto L4c2a26;
  #L4c29e8.  call temp:= `i`(v7) @signature `Lw6/b;.i:()I` @kind direct;
  #L4c29ee.  v2:= temp;
  #L4c29f0.  v3:= v8 - v0 @kind long;
  #L4c29f4.  v5:= (`long`) v2 @kind i2l;
  #L4c29f6.  v2:= lcmp(v3, v5);
  #L4c29fa.  if v2 >= 0 then goto L4c2a10;
  #L4c29fe.  v2:= v7.`w6.b.q` @type ^`int`;
  #L4c2a02.  v5:= (`long`) v2 @kind i2l;
  #L4c2a04.  v5:= v5 + v3 @kind long;
  #L4c2a06.  v2:= (`int`) v5 @kind l2i;
  #L4c2a08.  v7.`w6.b.q` @type ^`int` := v2;
  #L4c2a0c.  v0:= v0 + v3 @kind long;
  #L4c2a0e.  goto L4c29cc;
  #L4c2a10.  v0:= v0 + v5 @kind long;
  #L4c2a12.  v2:= 0I;
  #L4c2a14.  v7.`w6.b.q` @type ^`int` := v2;
  #L4c2a18.  v2:= v7.`w6.b.r` @type ^`int`;
  #L4c2a1c.  v2:= v2 + 1;
  #L4c2a20.  v7.`w6.b.r` @type ^`int` := v2;
  #L4c2a24.  goto L4c29cc;
  #L4c2a26.  return v0 @kind wide;
}
procedure `void` `e`(`w6.b` v2 @kind this) @signature `Lw6/b;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4c2ae0.  v0:= v2.`w6.b.p` @type ^`boolean` @kind boolean;
  #L4c2ae4.  if v0 != 0 then goto L4c2b02;
  #L4c2ae8.  v0:= v2.`w6.b.u` @type ^`boolean` @kind boolean;
  #L4c2aec.  if v0 == 0 then goto L4c2af2;
  #L4c2af0.  return @kind void;
  #L4c2af2.  v0:= new `java.io.IOException`;
  #L4c2af6.  v1:= "Reader needs to be frozen before read operations can be called" @kind object;
  #L4c2afa.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c2b00.  throw v0;
  #L4c2b02.  v0:= new `java.io.IOException`;
  #L4c2b06.  v1:= "Stream already closed" @kind object;
  #L4c2b0a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c2b10.  throw v0;
}
procedure `java.lang.String` `h`(`w6.b` v2 @kind this) @signature `Lw6/b;.h:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4c2938.  v0:= v2.`w6.b.r` @type ^`int`;
  #L4c293c.  v1:= v2.`w6.b.o` @type ^`java.util.List` @kind object;
  #L4c2940.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4c2946.  v1:= temp;
  #L4c2948.  if v0 >= v1 then goto L4c2962;
  #L4c294c.  v0:= v2.`w6.b.o` @type ^`java.util.List` @kind object;
  #L4c2950.  v1:= v2.`w6.b.r` @type ^`int`;
  #L4c2954.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4c295a.  v0:= temp @kind object;
  #L4c295c.  v0:= (`java.lang.String`) v0 @kind object;
  #L4c2960.  goto L4c2964;
  #L4c2962.  v0:= 0I;
  #L4c2964.  return v0 @kind object;
}
procedure `int` `i`(`w6.b` v2 @kind this) @signature `Lw6/b;.i:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4c27c4.  call temp:= `h`(v2) @signature `Lw6/b;.h:()Ljava/lang/String;` @kind direct;
  #L4c27ca.  v0:= temp @kind object;
  #L4c27cc.  if v0 != 0 then goto L4c27d4;
  #L4c27d0.  v0:= 0I;
  #L4c27d2.  goto L4c27e2;
  #L4c27d4.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4c27da.  v0:= temp;
  #L4c27dc.  v1:= v2.`w6.b.q` @type ^`int`;
  #L4c27e0.  v0:= v0 - v1 @kind int;
  #L4c27e2.  return v0;
}
procedure `void` `a`(`w6.b` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lw6/b;.a:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2aa0.  v0:= v1.`w6.b.u` @type ^`boolean` @kind boolean;
  #L4c2aa4.  if v0 != 0 then goto L4c2ac0;
  #L4c2aa8.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4c2aae.  v0:= temp;
  #L4c2ab0.  if v0 <= 0 then goto L4c2abe;
  #L4c2ab4.  v0:= v1.`w6.b.o` @type ^`java.util.List` @kind object;
  #L4c2ab8.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4c2abe.  return @kind void;
  #L4c2ac0.  v2:= new `java.lang.IllegalStateException`;
  #L4c2ac4.  v0:= "Trying to add string after reading" @kind object;
  #L4c2ac8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c2ace.  throw v2;
}
procedure `void` `close`(`w6.b` v1 @kind this) @signature `Lw6/b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2b24.  call `e`(v1) @signature `Lw6/b;.e:()V` @kind direct;
  #L4c2b2a.  v0:= 1I;
  #L4c2b2c.  v1.`w6.b.p` @type ^`boolean` := v0 @kind boolean;
  #L4c2b30.  return @kind void;
}
procedure `void` `k`(`w6.b` v2 @kind this) @signature `Lw6/b;.k:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c2b44.  v0:= v2.`w6.b.u` @type ^`boolean` @kind boolean;
  #L4c2b48.  if v0 != 0 then goto L4c2b54;
  #L4c2b4c.  v0:= 1I;
  #L4c2b4e.  v2.`w6.b.u` @type ^`boolean` := v0 @kind boolean;
  #L4c2b52.  return @kind void;
  #L4c2b54.  v0:= new `java.lang.IllegalStateException`;
  #L4c2b58.  v1:= "Trying to freeze frozen StringListReader" @kind object;
  #L4c2b5c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c2b62.  throw v0;
}
procedure `void` `mark`(`w6.b` v0 @kind this, `int` v1 ) @signature `Lw6/b;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L4c2b74.  call `e`(v0) @signature `Lw6/b;.e:()V` @kind direct;
  #L4c2b7a.  v1:= v0.`w6.b.q` @type ^`int`;
  #L4c2b7e.  v0.`w6.b.s` @type ^`int` := v1;
  #L4c2b82.  v1:= v0.`w6.b.r` @type ^`int`;
  #L4c2b86.  v0.`w6.b.t` @type ^`int` := v1;
  #L4c2b8a.  return @kind void;
}
procedure `boolean` `markSupported`(`w6.b` v1 @kind this) @signature `Lw6/b;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2794.  v0:= 1I;
  #L4c2796.  return v0;
}
procedure `int` `read`(`w6.b` v3 @kind this) @signature `Lw6/b;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c27f4.  call `e`(v3) @signature `Lw6/b;.e:()V` @kind direct;
  #L4c27fa.  call temp:= `h`(v3) @signature `Lw6/b;.h:()Ljava/lang/String;` @kind direct;
  #L4c2800.  v0:= temp @kind object;
  #L4c2802.  if v0 != 0 then goto L4c280a;
  #L4c2806.  v0:= -1I;
  #L4c2808.  return v0;
  #L4c280a.  v1:= v3.`w6.b.q` @type ^`int`;
  #L4c280e.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4c2814.  v0:= temp;
  #L4c2816.  v1:= 1L;
  #L4c281a.  call temp:= `c`(v3, v1) @signature `Lw6/b;.c:(J)J` @kind direct;
  #L4c2820.  return v0;
}
procedure `int` `read`(`w6.b` v6 @kind this, `java.nio.CharBuffer` v7 @kind object) @signature `Lw6/b;.read:(Ljava/nio/CharBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c28a8.  call `e`(v6) @signature `Lw6/b;.e:()V` @kind direct;
  #L4c28ae.  call temp:= `remaining`(v7) @signature `Ljava/nio/CharBuffer;.remaining:()I` @kind virtual;
  #L4c28b4.  v0:= temp;
  #L4c28b6.  call temp:= `h`(v6) @signature `Lw6/b;.h:()Ljava/lang/String;` @kind direct;
  #L4c28bc.  v1:= temp @kind object;
  #L4c28be.  v2:= 0I;
  #L4c28c0.  if v0 <= 0 then goto L4c2916;
  #L4c28c4.  if v1 == 0 then goto L4c2916;
  #L4c28c8.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4c28ce.  v1:= temp;
  #L4c28d0.  v3:= v6.`w6.b.q` @type ^`int`;
  #L4c28d4.  v1:= v1 - v3 @kind int;
  #L4c28d6.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4c28dc.  v1:= temp;
  #L4c28de.  v3:= v6.`w6.b.o` @type ^`java.util.List` @kind object;
  #L4c28e2.  v4:= v6.`w6.b.r` @type ^`int`;
  #L4c28e6.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4c28ec.  v3:= temp @kind object;
  #L4c28ee.  v3:= (`java.lang.String`) v3 @kind object;
  #L4c28f2.  v4:= v6.`w6.b.q` @type ^`int`;
  #L4c28f6.  v5:= v4 + v1 @kind int;
  #L4c28fa.  call temp:= `put`(v7, v3, v4, v5) @signature `Ljava/nio/CharBuffer;.put:(Ljava/lang/String;II)Ljava/nio/CharBuffer;` @kind virtual;
  #L4c2900.  v0:= v0 - v1 @kind int;
  #L4c2902.  v2:= v2 + v1 @kind int;
  #L4c2904.  v3:= (`long`) v1 @kind i2l;
  #L4c2906.  call temp:= `c`(v6, v3) @signature `Lw6/b;.c:(J)J` @kind direct;
  #L4c290c.  call temp:= `h`(v6) @signature `Lw6/b;.h:()Ljava/lang/String;` @kind direct;
  #L4c2912.  v1:= temp @kind object;
  #L4c2914.  goto L4c28c0;
  #L4c2916.  if v2 > 0 then goto L4c2924;
  #L4c291a.  if v1 == 0 then goto L4c2920;
  #L4c291e.  goto L4c2924;
  #L4c2920.  v7:= -1I;
  #L4c2922.  return v7;
  #L4c2924.  return v2;
}
procedure `int` `read`(`w6.b` v6 @kind this, `char`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lw6/b;.read:([CII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c2834.  call `e`(v6) @signature `Lw6/b;.e:()V` @kind direct;
  #L4c283a.  call temp:= `h`(v6) @signature `Lw6/b;.h:()Ljava/lang/String;` @kind direct;
  #L4c2840.  v0:= temp @kind object;
  #L4c2842.  v1:= 0I;
  #L4c2844.  if v0 == 0 then goto L4c2886;
  #L4c2848.  if v1 >= v9 then goto L4c2886;
  #L4c284c.  call temp:= `i`(v6) @signature `Lw6/b;.i:()I` @kind direct;
  #L4c2852.  v2:= temp;
  #L4c2854.  v3:= v9 - v1 @kind int;
  #L4c2858.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4c285e.  v2:= temp;
  #L4c2860.  v3:= v6.`w6.b.q` @type ^`int`;
  #L4c2864.  v4:= v3 + v2 @kind int;
  #L4c2868.  v5:= v8 + v1 @kind int;
  #L4c286c.  call `getChars`(v0, v3, v4, v7, v5) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L4c2872.  v1:= v1 + v2 @kind int;
  #L4c2874.  v2:= (`long`) v2 @kind i2l;
  #L4c2876.  call temp:= `c`(v6, v2) @signature `Lw6/b;.c:(J)J` @kind direct;
  #L4c287c.  call temp:= `h`(v6) @signature `Lw6/b;.h:()Ljava/lang/String;` @kind direct;
  #L4c2882.  v0:= temp @kind object;
  #L4c2884.  goto L4c2844;
  #L4c2886.  if v1 > 0 then goto L4c2894;
  #L4c288a.  if v0 == 0 then goto L4c2890;
  #L4c288e.  goto L4c2894;
  #L4c2890.  v7:= -1I;
  #L4c2892.  return v7;
  #L4c2894.  return v1;
}
procedure `boolean` `ready`(`w6.b` v1 @kind this) @signature `Lw6/b;.ready:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c27a8.  call `e`(v1) @signature `Lw6/b;.e:()V` @kind direct;
  #L4c27ae.  v0:= 1I;
  #L4c27b0.  return v0;
}
procedure `void` `reset`(`w6.b` v1 @kind this) @signature `Lw6/b;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2b9c.  v0:= v1.`w6.b.s` @type ^`int`;
  #L4c2ba0.  v1.`w6.b.q` @type ^`int` := v0;
  #L4c2ba4.  v0:= v1.`w6.b.t` @type ^`int`;
  #L4c2ba8.  v1.`w6.b.r` @type ^`int` := v0;
  #L4c2bac.  return @kind void;
}
procedure `long` `skip`(`w6.b` v0 @kind this, `long` v1 ) @signature `Lw6/b;.skip:(J)J` @AccessFlag PUBLIC {
    temp;

  #L4c2a38.  call `e`(v0) @signature `Lw6/b;.e:()V` @kind direct;
  #L4c2a3e.  call temp:= `c`(v0, v1) @signature `Lw6/b;.c:(J)J` @kind direct;
  #L4c2a44.  v1:= temp @kind wide;
  #L4c2a46.  return v1 @kind wide;
}
procedure `java.lang.String` `toString`(`w6.b` v3 @kind this) @signature `Lw6/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c2978.  v0:= new `java.lang.StringBuilder`;
  #L4c297c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c2982.  v1:= v3.`w6.b.o` @type ^`java.util.List` @kind object;
  #L4c2986.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c298c.  v1:= temp @kind object;
  #L4c298e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c2994.  v2:= temp;
  #L4c2996.  if v2 == 0 then goto L4c29ae;
  #L4c299a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c29a0.  v2:= temp @kind object;
  #L4c29a2.  v2:= (`java.lang.String`) v2 @kind object;
  #L4c29a6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c29ac.  goto L4c298e;
  #L4c29ae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c29b4.  v0:= temp @kind object;
  #L4c29b6.  return v0 @kind object;
}
