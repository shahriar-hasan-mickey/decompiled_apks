record `k5.j` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `k5.e` `k5.j.o` @AccessFlag FINAL_SYNTHETIC;
  `k5.k` `k5.j.p` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`k5.j` v0 @kind this, `k5.k` v1 @kind object, `k5.e` v2 @kind object) @signature `Lk5/j;.<init>:(Lk5/k;Lk5/e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3aa16c.  v0.`k5.j.p` @type ^`k5.k` := v1 @kind object;
  #L3aa170.  v0.`k5.j.o` @type ^`k5.e` := v2 @kind object;
  #L3aa174.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3aa17a.  return @kind void;
}
procedure `void` `run`(`k5.j` v3 @kind this) @signature `Lk5/j;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3aa18c.  v0:= v3.`k5.j.p` @type ^`k5.k` @kind object;
  #L3aa190.  call temp:= `c`(v0) @signature `Lk5/k;.c:(Lk5/k;)Ljava/lang/Object;` @kind static;
  #L3aa196.  v0:= temp @kind object;
  #L3aa198.  @monitorenter v0
  #L3aa19a.  v1:= v3.`k5.j.p` @type ^`k5.k` @kind object;
  #L3aa19e.  call temp:= `b`(v1) @signature `Lk5/k;.b:(Lk5/k;)Lk5/b;` @kind static;
  #L3aa1a4.  v2:= temp @kind object;
  #L3aa1a6.  if v2 == 0 then goto L3aa1c4;
  #L3aa1aa.  call temp:= `b`(v1) @signature `Lk5/k;.b:(Lk5/k;)Lk5/b;` @kind static;
  #L3aa1b0.  v1:= temp @kind object;
  #L3aa1b2.  v2:= v3.`k5.j.o` @type ^`k5.e` @kind object;
  #L3aa1b6.  call temp:= `f`(v2) @signature `Lk5/e;.f:()Ljava/lang/Exception;` @kind virtual;
  #L3aa1bc.  v2:= temp @kind object;
  #L3aa1be.  call `a`(v1, v2) @signature `Lk5/b;.a:(Ljava/lang/Exception;)V` @kind interface;
  #L3aa1c4.  @monitorexit v0
  #L3aa1c6.  return @kind void;
  #L3aa1c8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa1ca.  @monitorexit v0
  #L3aa1cc.  throw v1;
  catch `java.lang.Throwable` @[L3aa19a..L3aa1cc] goto L3aa1c8;
}
