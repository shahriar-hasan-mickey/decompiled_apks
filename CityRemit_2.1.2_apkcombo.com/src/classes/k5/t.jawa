record `k5.t` @kind class @AccessFlag FINAL extends `k5.e` @kind class {
  `java.lang.Object` `k5.t.a` @AccessFlag PRIVATE_FINAL;
  `k5.o` `k5.t.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `k5.t.c` @AccessFlag PRIVATE;
  `java.lang.Object` `k5.t.d` @AccessFlag PRIVATE;
  `java.lang.Exception` `k5.t.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`k5.t` v1 @kind this) @signature `Lk5/t;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3aa8c0.  call `<init>`(v1) @signature `Lk5/e;.<init>:()V` @kind direct;
  #L3aa8c6.  v0:= new `java.lang.Object`;
  #L3aa8ca.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3aa8d0.  v1.`k5.t.a` @type ^`java.lang.Object` := v0 @kind object;
  #L3aa8d4.  v0:= new `k5.o`;
  #L3aa8d8.  call `<init>`(v0) @signature `Lk5/o;.<init>:()V` @kind direct;
  #L3aa8de.  v1.`k5.t.b` @type ^`k5.o` := v0 @kind object;
  #L3aa8e2.  return @kind void;
}
procedure `void` `n`(`k5.t` v2 @kind this) @signature `Lk5/t;.n:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3aa994.  v0:= v2.`k5.t.c` @type ^`boolean` @kind boolean;
  #L3aa998.  v1:= "Task is not yet complete" @kind object;
  #L3aa99c.  call `b`(v0, v1) @signature `Lh5/s;.b:(ZLjava/lang/Object;)V` @kind static;
  #L3aa9a2.  return @kind void;
}
procedure `void` `o`(`k5.t` v2 @kind this) @signature `Lk5/t;.o:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3aa9b4.  v0:= v2.`k5.t.c` @type ^`boolean` @kind boolean;
  #L3aa9b8.  v0:= v0 ^~ 1;
  #L3aa9bc.  v1:= "Task is already complete" @kind object;
  #L3aa9c0.  call `b`(v0, v1) @signature `Lh5/s;.b:(ZLjava/lang/Object;)V` @kind static;
  #L3aa9c6.  return @kind void;
}
procedure `void` `p`(`k5.t` v2 @kind this) @signature `Lk5/t;.p:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3aa9d8.  v0:= v2.`k5.t.a` @type ^`java.lang.Object` @kind object;
  #L3aa9dc.  @monitorenter v0
  #L3aa9de.  v1:= v2.`k5.t.c` @type ^`boolean` @kind boolean;
  #L3aa9e2.  if v1 != 0 then goto L3aa9ea;
  #L3aa9e6.  @monitorexit v0
  #L3aa9e8.  return @kind void;
  #L3aa9ea.  @monitorexit v0
  #L3aa9ec.  v0:= v2.`k5.t.b` @type ^`k5.o` @kind object;
  #L3aa9f0.  call `b`(v0, v2) @signature `Lk5/o;.b:(Lk5/e;)V` @kind virtual;
  #L3aa9f6.  return @kind void;
  #L3aa9f8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa9fa.  @monitorexit v0
  #L3aa9fc.  throw v1;
  catch `java.lang.Throwable` @[L3aa9de..L3aa9ec] goto L3aa9f8;
  catch `java.lang.Throwable` @[L3aa9fa..L3aa9fc] goto L3aa9f8;
}
procedure `k5.e` `a`(`k5.t` v3 @kind this, `k5.a` v4 @kind object) @signature `Lk5/t;.a:(Lk5/a;)Lk5/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3aa800.  v0:= `@@k5.f.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L3aa804.  v1:= v3.`k5.t.b` @type ^`k5.o` @kind object;
  #L3aa808.  v2:= new `k5.i`;
  #L3aa80c.  call `<init>`(v2, v0, v4) @signature `Lk5/i;.<init>:(Ljava/util/concurrent/Executor;Lk5/a;)V` @kind direct;
  #L3aa812.  call `a`(v1, v2) @signature `Lk5/o;.a:(Lk5/n;)V` @kind virtual;
  #L3aa818.  call `p`(v3) @signature `Lk5/t;.p:()V` @kind direct;
  #L3aa81e.  return v3 @kind object;
}
procedure `k5.e` `b`(`k5.t` v2 @kind this, `java.util.concurrent.Executor` v3 @kind object, `k5.b` v4 @kind object) @signature `Lk5/t;.b:(Ljava/util/concurrent/Executor;Lk5/b;)Lk5/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3aa830.  v0:= v2.`k5.t.b` @type ^`k5.o` @kind object;
  #L3aa834.  v1:= new `k5.k`;
  #L3aa838.  call `<init>`(v1, v3, v4) @signature `Lk5/k;.<init>:(Ljava/util/concurrent/Executor;Lk5/b;)V` @kind direct;
  #L3aa83e.  call `a`(v0, v1) @signature `Lk5/o;.a:(Lk5/n;)V` @kind virtual;
  #L3aa844.  call `p`(v2) @signature `Lk5/t;.p:()V` @kind direct;
  #L3aa84a.  return v2 @kind object;
}
procedure `k5.e` `c`(`k5.t` v1 @kind this, `k5.b` v2 @kind object) @signature `Lk5/t;.c:(Lk5/b;)Lk5/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3aa85c.  v0:= `@@k5.f.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L3aa860.  call temp:= `b`(v1, v0, v2) @signature `Lk5/t;.b:(Ljava/util/concurrent/Executor;Lk5/b;)Lk5/e;` @kind virtual;
  #L3aa866.  return v1 @kind object;
}
procedure `k5.e` `d`(`k5.t` v2 @kind this, `java.util.concurrent.Executor` v3 @kind object, `k5.c` v4 @kind object) @signature `Lk5/t;.d:(Ljava/util/concurrent/Executor;Lk5/c;)Lk5/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3aa878.  v0:= v2.`k5.t.b` @type ^`k5.o` @kind object;
  #L3aa87c.  v1:= new `k5.m`;
  #L3aa880.  call `<init>`(v1, v3, v4) @signature `Lk5/m;.<init>:(Ljava/util/concurrent/Executor;Lk5/c;)V` @kind direct;
  #L3aa886.  call `a`(v0, v1) @signature `Lk5/o;.a:(Lk5/n;)V` @kind virtual;
  #L3aa88c.  call `p`(v2) @signature `Lk5/t;.p:()V` @kind direct;
  #L3aa892.  return v2 @kind object;
}
procedure `k5.e` `e`(`k5.t` v1 @kind this, `k5.c` v2 @kind object) @signature `Lk5/t;.e:(Lk5/c;)Lk5/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3aa8a4.  v0:= `@@k5.f.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L3aa8a8.  call temp:= `d`(v1, v0, v2) @signature `Lk5/t;.d:(Ljava/util/concurrent/Executor;Lk5/c;)Lk5/e;` @kind virtual;
  #L3aa8ae.  return v1 @kind object;
}
procedure `java.lang.Exception` `f`(`k5.t` v2 @kind this) @signature `Lk5/t;.f:()Ljava/lang/Exception;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3aa784.  v0:= v2.`k5.t.a` @type ^`java.lang.Object` @kind object;
  #L3aa788.  @monitorenter v0
  #L3aa78a.  v1:= v2.`k5.t.e` @type ^`java.lang.Exception` @kind object;
  #L3aa78e.  @monitorexit v0
  #L3aa790.  return v1 @kind object;
  #L3aa792.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa794.  @monitorexit v0
  #L3aa796.  throw v1;
  catch `java.lang.Throwable` @[L3aa78a..L3aa796] goto L3aa792;
}
procedure `java.lang.Object` `g`(`k5.t` v3 @kind this) @signature `Lk5/t;.g:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3aa7b4.  v0:= v3.`k5.t.a` @type ^`java.lang.Object` @kind object;
  #L3aa7b8.  @monitorenter v0
  #L3aa7ba.  call `n`(v3) @signature `Lk5/t;.n:()V` @kind direct;
  #L3aa7c0.  v1:= v3.`k5.t.e` @type ^`java.lang.Exception` @kind object;
  #L3aa7c4.  if v1 != 0 then goto L3aa7d0;
  #L3aa7c8.  v1:= v3.`k5.t.d` @type ^`java.lang.Object` @kind object;
  #L3aa7cc.  @monitorexit v0
  #L3aa7ce.  return v1 @kind object;
  #L3aa7d0.  v2:= new `k5.d`;
  #L3aa7d4.  call `<init>`(v2, v1) @signature `Lk5/d;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3aa7da.  throw v2;
  #L3aa7dc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa7de.  @monitorexit v0
  #L3aa7e0.  throw v1;
  catch `java.lang.Throwable` @[L3aa7ba..L3aa7e0] goto L3aa7dc;
}
procedure `boolean` `h`(`k5.t` v2 @kind this) @signature `Lk5/t;.h:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3aa664.  v0:= v2.`k5.t.a` @type ^`java.lang.Object` @kind object;
  #L3aa668.  @monitorenter v0
  #L3aa66a.  v1:= v2.`k5.t.c` @type ^`boolean` @kind boolean;
  #L3aa66e.  @monitorexit v0
  #L3aa670.  return v1;
  #L3aa672.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa674.  @monitorexit v0
  #L3aa676.  throw v1;
  catch `java.lang.Throwable` @[L3aa66a..L3aa676] goto L3aa672;
}
procedure `boolean` `i`(`k5.t` v3 @kind this) @signature `Lk5/t;.i:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3aa694.  v0:= v3.`k5.t.a` @type ^`java.lang.Object` @kind object;
  #L3aa698.  @monitorenter v0
  #L3aa69a.  v1:= v3.`k5.t.c` @type ^`boolean` @kind boolean;
  #L3aa69e.  v2:= 0I;
  #L3aa6a0.  if v1 == 0 then goto L3aa6ae;
  #L3aa6a4.  v1:= v3.`k5.t.e` @type ^`java.lang.Exception` @kind object;
  #L3aa6a8.  if v1 != 0 then goto L3aa6ae;
  #L3aa6ac.  v2:= 1I;
  #L3aa6ae.  @monitorexit v0
  #L3aa6b0.  return v2;
  #L3aa6b2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa6b4.  @monitorexit v0
  #L3aa6b6.  throw v1;
  catch `java.lang.Throwable` @[L3aa69a..L3aa6b6] goto L3aa6b2;
}
procedure `void` `j`(`k5.t` v2 @kind this, `java.lang.Exception` v3 @kind object) @signature `Lk5/t;.j:(Ljava/lang/Exception;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3aa8f4.  v0:= v2.`k5.t.a` @type ^`java.lang.Object` @kind object;
  #L3aa8f8.  @monitorenter v0
  #L3aa8fa.  call `o`(v2) @signature `Lk5/t;.o:()V` @kind direct;
  #L3aa900.  v1:= 1I;
  #L3aa902.  v2.`k5.t.c` @type ^`boolean` := v1 @kind boolean;
  #L3aa906.  v2.`k5.t.e` @type ^`java.lang.Exception` := v3 @kind object;
  #L3aa90a.  @monitorexit v0
  #L3aa90c.  v3:= v2.`k5.t.b` @type ^`k5.o` @kind object;
  #L3aa910.  call `b`(v3, v2) @signature `Lk5/o;.b:(Lk5/e;)V` @kind virtual;
  #L3aa916.  return @kind void;
  #L3aa918.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa91a.  @monitorexit v0
  #L3aa91c.  throw v3;
  catch `java.lang.Throwable` @[L3aa8fa..L3aa90c] goto L3aa918;
  catch `java.lang.Throwable` @[L3aa91a..L3aa91c] goto L3aa918;
}
procedure `void` `k`(`k5.t` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lk5/t;.k:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3aa944.  v0:= v2.`k5.t.a` @type ^`java.lang.Object` @kind object;
  #L3aa948.  @monitorenter v0
  #L3aa94a.  call `o`(v2) @signature `Lk5/t;.o:()V` @kind direct;
  #L3aa950.  v1:= 1I;
  #L3aa952.  v2.`k5.t.c` @type ^`boolean` := v1 @kind boolean;
  #L3aa956.  v2.`k5.t.d` @type ^`java.lang.Object` := v3 @kind object;
  #L3aa95a.  @monitorexit v0
  #L3aa95c.  v3:= v2.`k5.t.b` @type ^`k5.o` @kind object;
  #L3aa960.  call `b`(v3, v2) @signature `Lk5/o;.b:(Lk5/e;)V` @kind virtual;
  #L3aa966.  return @kind void;
  #L3aa968.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa96a.  @monitorexit v0
  #L3aa96c.  throw v3;
  catch `java.lang.Throwable` @[L3aa94a..L3aa95c] goto L3aa968;
  catch `java.lang.Throwable` @[L3aa96a..L3aa96c] goto L3aa968;
}
procedure `boolean` `l`(`k5.t` v2 @kind this, `java.lang.Exception` v3 @kind object) @signature `Lk5/t;.l:(Ljava/lang/Exception;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3aa6d4.  v0:= v2.`k5.t.a` @type ^`java.lang.Object` @kind object;
  #L3aa6d8.  @monitorenter v0
  #L3aa6da.  v1:= v2.`k5.t.c` @type ^`boolean` @kind boolean;
  #L3aa6de.  if v1 == 0 then goto L3aa6e8;
  #L3aa6e2.  @monitorexit v0
  #L3aa6e4.  v3:= 0I;
  #L3aa6e6.  return v3;
  #L3aa6e8.  v1:= 1I;
  #L3aa6ea.  v2.`k5.t.c` @type ^`boolean` := v1 @kind boolean;
  #L3aa6ee.  v2.`k5.t.e` @type ^`java.lang.Exception` := v3 @kind object;
  #L3aa6f2.  @monitorexit v0
  #L3aa6f4.  v3:= v2.`k5.t.b` @type ^`k5.o` @kind object;
  #L3aa6f8.  call `b`(v3, v2) @signature `Lk5/o;.b:(Lk5/e;)V` @kind virtual;
  #L3aa6fe.  return v1;
  #L3aa700.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa702.  @monitorexit v0
  #L3aa704.  throw v3;
  catch `java.lang.Throwable` @[L3aa6da..L3aa6f4] goto L3aa700;
  catch `java.lang.Throwable` @[L3aa702..L3aa704] goto L3aa700;
}
procedure `boolean` `m`(`k5.t` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lk5/t;.m:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3aa72c.  v0:= v2.`k5.t.a` @type ^`java.lang.Object` @kind object;
  #L3aa730.  @monitorenter v0
  #L3aa732.  v1:= v2.`k5.t.c` @type ^`boolean` @kind boolean;
  #L3aa736.  if v1 == 0 then goto L3aa740;
  #L3aa73a.  @monitorexit v0
  #L3aa73c.  v3:= 0I;
  #L3aa73e.  return v3;
  #L3aa740.  v1:= 1I;
  #L3aa742.  v2.`k5.t.c` @type ^`boolean` := v1 @kind boolean;
  #L3aa746.  v2.`k5.t.d` @type ^`java.lang.Object` := v3 @kind object;
  #L3aa74a.  @monitorexit v0
  #L3aa74c.  v3:= v2.`k5.t.b` @type ^`k5.o` @kind object;
  #L3aa750.  call `b`(v3, v2) @signature `Lk5/o;.b:(Lk5/e;)V` @kind virtual;
  #L3aa756.  return v1;
  #L3aa758.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa75a.  @monitorexit v0
  #L3aa75c.  throw v3;
  catch `java.lang.Throwable` @[L3aa732..L3aa74c] goto L3aa758;
  catch `java.lang.Throwable` @[L3aa75a..L3aa75c] goto L3aa758;
}
