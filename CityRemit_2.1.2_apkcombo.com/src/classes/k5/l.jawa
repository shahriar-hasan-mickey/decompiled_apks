record `k5.l` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `k5.e` `k5.l.o` @AccessFlag FINAL_SYNTHETIC;
  `k5.m` `k5.l.p` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`k5.l` v0 @kind this, `k5.m` v1 @kind object, `k5.e` v2 @kind object) @signature `Lk5/l;.<init>:(Lk5/m;Lk5/e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3aa2b0.  v0.`k5.l.p` @type ^`k5.m` := v1 @kind object;
  #L3aa2b4.  v0.`k5.l.o` @type ^`k5.e` := v2 @kind object;
  #L3aa2b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3aa2be.  return @kind void;
}
procedure `void` `run`(`k5.l` v3 @kind this) @signature `Lk5/l;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3aa2d0.  v0:= v3.`k5.l.p` @type ^`k5.m` @kind object;
  #L3aa2d4.  call temp:= `c`(v0) @signature `Lk5/m;.c:(Lk5/m;)Ljava/lang/Object;` @kind static;
  #L3aa2da.  v0:= temp @kind object;
  #L3aa2dc.  @monitorenter v0
  #L3aa2de.  v1:= v3.`k5.l.p` @type ^`k5.m` @kind object;
  #L3aa2e2.  call temp:= `b`(v1) @signature `Lk5/m;.b:(Lk5/m;)Lk5/c;` @kind static;
  #L3aa2e8.  v2:= temp @kind object;
  #L3aa2ea.  if v2 == 0 then goto L3aa308;
  #L3aa2ee.  call temp:= `b`(v1) @signature `Lk5/m;.b:(Lk5/m;)Lk5/c;` @kind static;
  #L3aa2f4.  v1:= temp @kind object;
  #L3aa2f6.  v2:= v3.`k5.l.o` @type ^`k5.e` @kind object;
  #L3aa2fa.  call temp:= `g`(v2) @signature `Lk5/e;.g:()Ljava/lang/Object;` @kind virtual;
  #L3aa300.  v2:= temp @kind object;
  #L3aa302.  call `c`(v1, v2) @signature `Lk5/c;.c:(Ljava/lang/Object;)V` @kind interface;
  #L3aa308.  @monitorexit v0
  #L3aa30a.  return @kind void;
  #L3aa30c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa30e.  @monitorexit v0
  #L3aa310.  throw v1;
  catch `java.lang.Throwable` @[L3aa2de..L3aa310] goto L3aa30c;
}
