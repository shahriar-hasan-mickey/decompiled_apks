record `k5.g` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `a`(`k5.e` v2 @kind object) @signature `Lk5/g;.a:(Lk5/e;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3a9f2c.  v0:= "Task must not be null" @kind object;
  #L3a9f30.  call temp:= `a`(v2, v0) @signature `Lh5/s;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3a9f36.  call temp:= `h`(v2) @signature `Lk5/e;.h:()Z` @kind virtual;
  #L3a9f3c.  v0:= temp;
  #L3a9f3e.  if v0 == 0 then goto L3a9f4c;
  #L3a9f42.  call temp:= `d`(v2) @signature `Lk5/g;.d:(Lk5/e;)Ljava/lang/Object;` @kind static;
  #L3a9f48.  v2:= temp @kind object;
  #L3a9f4a.  return v2 @kind object;
  #L3a9f4c.  v0:= new `k5.v`;
  #L3a9f50.  v1:= 0I;
  #L3a9f52.  call `<init>`(v0, v1) @signature `Lk5/v;.<init>:(Lk5/u;)V` @kind direct;
  #L3a9f58.  call `e`(v2, v0) @signature `Lk5/g;.e:(Lk5/e;Lk5/w;)V` @kind static;
  #L3a9f5e.  call `b`(v0) @signature `Lk5/v;.b:()V` @kind virtual;
  #L3a9f64.  call temp:= `d`(v2) @signature `Lk5/g;.d:(Lk5/e;)Ljava/lang/Object;` @kind static;
  #L3a9f6a.  v2:= temp @kind object;
  #L3a9f6c.  return v2 @kind object;
}
procedure `k5.e` `b`(`java.lang.Exception` v1 @kind object) @signature `Lk5/g;.b:(Ljava/lang/Exception;)Lk5/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a9fbc.  v0:= new `k5.t`;
  #L3a9fc0.  call `<init>`(v0) @signature `Lk5/t;.<init>:()V` @kind direct;
  #L3a9fc6.  call `j`(v0, v1) @signature `Lk5/t;.j:(Ljava/lang/Exception;)V` @kind virtual;
  #L3a9fcc.  return v0 @kind object;
}
procedure `k5.e` `c`(`java.lang.Object` v1 @kind object) @signature `Lk5/g;.c:(Ljava/lang/Object;)Lk5/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a9fe0.  v0:= new `k5.t`;
  #L3a9fe4.  call `<init>`(v0) @signature `Lk5/t;.<init>:()V` @kind direct;
  #L3a9fea.  call `k`(v0, v1) @signature `Lk5/t;.k:(Ljava/lang/Object;)V` @kind virtual;
  #L3a9ff0.  return v0 @kind object;
}
procedure `java.lang.Object` `d`(`k5.e` v1 @kind object) @signature `Lk5/g;.d:(Lk5/e;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3a9f80.  call temp:= `i`(v1) @signature `Lk5/e;.i:()Z` @kind virtual;
  #L3a9f86.  v0:= temp;
  #L3a9f88.  if v0 == 0 then goto L3a9f96;
  #L3a9f8c.  call temp:= `g`(v1) @signature `Lk5/e;.g:()Ljava/lang/Object;` @kind virtual;
  #L3a9f92.  v1:= temp @kind object;
  #L3a9f94.  return v1 @kind object;
  #L3a9f96.  v0:= new `java.util.concurrent.ExecutionException`;
  #L3a9f9a.  call temp:= `f`(v1) @signature `Lk5/e;.f:()Ljava/lang/Exception;` @kind virtual;
  #L3a9fa0.  v1:= temp @kind object;
  #L3a9fa2.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3a9fa8.  throw v0;
}
procedure `void` `e`(`k5.e` v1 @kind object, `k5.w` v2 @kind object) @signature `Lk5/g;.e:(Lk5/e;Lk5/w;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3aa004.  v0:= `@@k5.f.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L3aa008.  call temp:= `d`(v1, v0, v2) @signature `Lk5/e;.d:(Ljava/util/concurrent/Executor;Lk5/c;)Lk5/e;` @kind virtual;
  #L3aa00e.  call temp:= `b`(v1, v0, v2) @signature `Lk5/e;.b:(Ljava/util/concurrent/Executor;Lk5/b;)Lk5/e;` @kind virtual;
  #L3aa014.  return @kind void;
}
