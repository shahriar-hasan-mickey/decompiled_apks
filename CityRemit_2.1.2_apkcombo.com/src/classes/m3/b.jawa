record `m3.b` @kind class @AccessFlag FINAL extends `g3.g` @kind interface {
  `g3.b`[] `m3.b.o` @AccessFlag PRIVATE_FINAL;
  `long`[] `m3.b.p` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`m3.b` v0 @kind this, `g3.b`[] v1 @kind object, `long`[] v2 @kind object) @signature `Lm3/b;.<init>:([Lg3/b;[J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3db330.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3db336.  v0.`m3.b.o` @type ^`g3.b`[] := v1 @kind object;
  #L3db33a.  v0.`m3.b.p` @type ^`long`[] := v2 @kind object;
  #L3db33e.  return @kind void;
}
procedure `int` `c`(`m3.b` v2 @kind this, `long` v3 ) @signature `Lm3/b;.c:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3db26c.  v0:= v2.`m3.b.p` @type ^`long`[] @kind object;
  #L3db270.  v1:= 0I;
  #L3db272.  call temp:= `e`(v0, v3, v1, v1) @signature `Ls3/l0;.e:([JJZZ)I` @kind static;
  #L3db278.  v3:= temp;
  #L3db27a.  v4:= v2.`m3.b.p` @type ^`long`[] @kind object;
  #L3db27e.  v4:= length @variable v4;
  #L3db280.  if v3 >= v4 then goto L3db286;
  #L3db284.  goto L3db288;
  #L3db286.  v3:= -1I;
  #L3db288.  return v3;
}
procedure `long` `d`(`m3.b` v3 @kind this, `int` v4 ) @signature `Lm3/b;.d:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3db2ec.  v0:= 1I;
  #L3db2ee.  v1:= 0I;
  #L3db2f0.  if v4 < 0 then goto L3db2f8;
  #L3db2f4.  v2:= 1I;
  #L3db2f6.  goto L3db2fa;
  #L3db2f8.  v2:= 0I;
  #L3db2fa.  call `a`(v2) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L3db300.  v2:= v3.`m3.b.p` @type ^`long`[] @kind object;
  #L3db304.  v2:= length @variable v2;
  #L3db306.  if v4 >= v2 then goto L3db30c;
  #L3db30a.  goto L3db30e;
  #L3db30c.  v0:= 0I;
  #L3db30e.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L3db314.  v0:= v3.`m3.b.p` @type ^`long`[] @kind object;
  #L3db318.  v1:= v0[v4] @kind wide;
  #L3db31c.  return v1 @kind wide;
}
procedure `java.util.List` `e`(`m3.b` v3 @kind this, `long` v4 ) @signature `Lm3/b;.e:(J)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3db29c.  v0:= v3.`m3.b.p` @type ^`long`[] @kind object;
  #L3db2a0.  v1:= 1I;
  #L3db2a2.  v2:= 0I;
  #L3db2a4.  call temp:= `i`(v0, v4, v1, v2) @signature `Ls3/l0;.i:([JJZZ)I` @kind static;
  #L3db2aa.  v4:= temp;
  #L3db2ac.  v5:= -1I;
  #L3db2ae.  if v4 == v5 then goto L3db2d2;
  #L3db2b2.  v5:= v3.`m3.b.o` @type ^`g3.b`[] @kind object;
  #L3db2b6.  v0:= v5[v4] @kind object;
  #L3db2ba.  v1:= `@@g3.b.F` @type ^`g3.b` @kind object;
  #L3db2be.  if v0 != v1 then goto L3db2c4;
  #L3db2c2.  goto L3db2d2;
  #L3db2c4.  v4:= v5[v4] @kind object;
  #L3db2c8.  call temp:= `singletonList`(v4) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3db2ce.  v4:= temp @kind object;
  #L3db2d0.  return v4 @kind object;
  #L3db2d2.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L3db2d8.  v4:= temp @kind object;
  #L3db2da.  return v4 @kind object;
}
procedure `int` `h`(`m3.b` v1 @kind this) @signature `Lm3/b;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db254.  v0:= v1.`m3.b.p` @type ^`long`[] @kind object;
  #L3db258.  v0:= length @variable v0;
  #L3db25a.  return v0;
}
