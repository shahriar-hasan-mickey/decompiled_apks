record `o9.e` @kind class @AccessFlag PUBLIC {
}
procedure `void` `a`(`android.content.Context` v8 @kind object, `android.net.Uri` v9 @kind object, `android.net.Uri` v10 @kind object) @signature `Lo9/e;.a:(Landroid/content/Context;Landroid/net/Uri;Landroid/net/Uri;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3ffe98.  call temp:= `equals`(v9, v10) @signature `Landroid/net/Uri;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ffe9e.  v0:= temp;
  #L3ffea0.  if v0 == 0 then goto L3ffea6;
  #L3ffea4.  return @kind void;
  #L3ffea6.  v0:= 0I;
  #L3ffea8.  call temp:= `getContentResolver`(v8) @signature `Landroid/content/Context;.getContentResolver:()Landroid/content/ContentResolver;` @kind virtual;
  #L3ffeae.  v1:= temp @kind object;
  #L3ffeb0.  call temp:= `openInputStream`(v1, v9) @signature `Landroid/content/ContentResolver;.openInputStream:(Landroid/net/Uri;)Ljava/io/InputStream;` @kind virtual;
  #L3ffeb6.  v9:= temp @kind object;
  #L3ffeb8.  call temp:= `getContentResolver`(v8) @signature `Landroid/content/Context;.getContentResolver:()Landroid/content/ContentResolver;` @kind virtual;
  #L3ffebe.  v8:= temp @kind object;
  #L3ffec0.  call temp:= `openOutputStream`(v8, v10) @signature `Landroid/content/ContentResolver;.openOutputStream:(Landroid/net/Uri;)Ljava/io/OutputStream;` @kind virtual;
  #L3ffec6.  v0:= temp @kind object;
  #L3ffec8.  v8:= instanceof @variable v9 @type ^`java.io.FileInputStream` @kind boolean;
  #L3ffecc.  if v8 == 0 then goto L3fff1c;
  #L3ffed0.  v8:= instanceof @variable v0 @type ^`java.io.FileOutputStream` @kind boolean;
  #L3ffed4.  if v8 == 0 then goto L3fff1c;
  #L3ffed8.  v8:= v9 @kind object;
  #L3ffeda.  v8:= (`java.io.FileInputStream`) v8 @kind object;
  #L3ffede.  call temp:= `getChannel`(v8) @signature `Ljava/io/FileInputStream;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L3ffee4.  v1:= temp @kind object;
  #L3ffee6.  v8:= v0 @kind object;
  #L3ffee8.  v8:= (`java.io.FileOutputStream`) v8 @kind object;
  #L3ffeec.  call temp:= `getChannel`(v8) @signature `Ljava/io/FileOutputStream;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L3ffef2.  v6:= temp @kind object;
  #L3ffef4.  v2:= 0L;
  #L3ffef8.  call temp:= `size`(v1) @signature `Ljava/nio/channels/FileChannel;.size:()J` @kind virtual;
  #L3ffefe.  v4:= temp @kind wide;
  #L3fff00.  call temp:= `transferTo`(v1, v2, v4, v6) @signature `Ljava/nio/channels/FileChannel;.transferTo:(JJLjava/nio/channels/WritableByteChannel;)J` @kind virtual;
  #L3fff06.  if v9 == 0 then goto L3fff10;
  #L3fff0a.  call `close`(v9) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3fff10.  if v0 == 0 then goto L3fff1a;
  #L3fff14.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L3fff1a.  return @kind void;
  #L3fff1c.  v8:= new `java.lang.IllegalArgumentException`;
  #L3fff20.  v10:= "The input or output URI don't represent a file. uCrop requires then to represent files in order to work properly." @kind object;
  #L3fff24.  call `<init>`(v8, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fff2a.  throw v8;
  #L3fff2c.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fff2e.  v7:= v0 @kind object;
  #L3fff30.  v0:= v9 @kind object;
  #L3fff32.  v9:= v7 @kind object;
  #L3fff34.  goto L3fff3a;
  #L3fff36.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fff38.  v9:= v0 @kind object;
  #L3fff3a.  if v0 == 0 then goto L3fff44;
  #L3fff3e.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3fff44.  if v9 == 0 then goto L3fff4e;
  #L3fff48.  call `close`(v9) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L3fff4e.  throw v8;
  catch `java.lang.Throwable` @[L3ffea8..L3ffeb8] goto L3fff36;
  catch `java.lang.Throwable` @[L3ffeb8..L3fff06] goto L3fff2c;
  catch `java.lang.Throwable` @[L3fff1c..L3fff2c] goto L3fff2c;
}
