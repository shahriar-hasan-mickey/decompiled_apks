record `o9.f$c` @kind class @AccessFlag  extends `o9.f$b` @kind interface {
  `java.io.InputStream` `o9.f$c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`o9.f$c` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lo9/f$c;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40012c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L400132.  v0.`o9.f$c.a` @type ^`java.io.InputStream` := v1 @kind object;
  #L400136.  return @kind void;
}
procedure `long` `d`(`o9.f$c` v7 @kind this, `long` v8 ) @signature `Lo9/f$c;.d:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4000a8.  v0:= 0L;
  #L4000ac.  v2:= lcmp(v8, v0);
  #L4000b0.  if v2 >= 0 then goto L4000b6;
  #L4000b4.  return v0 @kind wide;
  #L4000b6.  v2:= v8 @kind wide;
  #L4000b8.  v4:= lcmp(v2, v0);
  #L4000bc.  if v4 <= 0 then goto L4000f2;
  #L4000c0.  v4:= v7.`o9.f$c.a` @type ^`java.io.InputStream` @kind object;
  #L4000c4.  call temp:= `skip`(v4, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L4000ca.  v4:= temp @kind wide;
  #L4000cc.  v6:= lcmp(v4, v0);
  #L4000d0.  if v6 <= 0 then goto L4000d8;
  #L4000d4.  v2:= v2 - v4 @kind long;
  #L4000d6.  goto L4000b8;
  #L4000d8.  v4:= v7.`o9.f$c.a` @type ^`java.io.InputStream` @kind object;
  #L4000dc.  call temp:= `read`(v4) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L4000e2.  v4:= temp;
  #L4000e4.  v5:= -1I;
  #L4000e6.  if v4 != v5 then goto L4000ec;
  #L4000ea.  goto L4000f2;
  #L4000ec.  v4:= 1L;
  #L4000f0.  goto L4000d4;
  #L4000f2.  v8:= v8 - v2 @kind long;
  #L4000f4.  return v8 @kind wide;
}
procedure `int` `e`(`o9.f$c` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lo9/f$c;.e:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L400074.  v0:= v5;
  #L400076.  if v0 <= 0 then goto L400094;
  #L40007a.  v1:= v3.`o9.f$c.a` @type ^`java.io.InputStream` @kind object;
  #L40007e.  v2:= v5 - v0 @kind int;
  #L400082.  call temp:= `read`(v1, v4, v2, v0) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L400088.  v1:= temp;
  #L40008a.  v2:= -1I;
  #L40008c.  if v1 == v2 then goto L400094;
  #L400090.  v0:= v0 - v1 @kind int;
  #L400092.  goto L400076;
  #L400094.  v5:= v5 - v0 @kind int;
  #L400096.  return v5;
}
procedure `short` `f`(`o9.f$c` v1 @kind this) @signature `Lo9/f$c;.f:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400108.  v0:= v1.`o9.f$c.a` @type ^`java.io.InputStream` @kind object;
  #L40010c.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L400112.  v0:= temp;
  #L400114.  v0:= v0 ^& 255;
  #L400118.  v0:= (`short`) v0 @kind i2s;
  #L40011a.  return v0;
}
procedure `int` `g`(`o9.f$c` v2 @kind this) @signature `Lo9/f$c;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L400038.  v0:= v2.`o9.f$c.a` @type ^`java.io.InputStream` @kind object;
  #L40003c.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L400042.  v0:= temp;
  #L400044.  v0:= v0 ^< 8;
  #L400048.  v1:= 65280I;
  #L40004e.  v0:= v0 ^& v1 @kind int;
  #L400050.  v1:= v2.`o9.f$c.a` @type ^`java.io.InputStream` @kind object;
  #L400054.  call temp:= `read`(v1) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L40005a.  v1:= temp;
  #L40005c.  v1:= v1 ^& 255;
  #L400060.  v0:= v0 ^| v1 @kind int;
  #L400062.  return v0;
}
