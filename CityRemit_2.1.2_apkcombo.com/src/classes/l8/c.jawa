record `l8.c` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `java.io.Writer` `l8.c.o` @AccessFlag PRIVATE_FINAL;
  `int`[] `l8.c.p` @AccessFlag PRIVATE;
  `int` `l8.c.q` @AccessFlag PRIVATE;
  `java.lang.String` `l8.c.r` @AccessFlag PRIVATE;
  `java.lang.String` `l8.c.s` @AccessFlag PRIVATE;
  `boolean` `l8.c.t` @AccessFlag PRIVATE;
  `boolean` `l8.c.u` @AccessFlag PRIVATE;
  `java.lang.String` `l8.c.v` @AccessFlag PRIVATE;
  `boolean` `l8.c.w` @AccessFlag PRIVATE;
}
global `java.lang.String`[] `@@l8.c.x` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String`[] `@@l8.c.y` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ll8/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d00f8.  v0:= 128I;
  #L3d00fc.  v0:= new `java.lang.String`[v0];
  #L3d0100.  `@@l8.c.x` @type ^`java.lang.String`[] := v0 @kind object;
  #L3d0104.  v0:= 0I;
  #L3d0106.  v1:= 0I;
  #L3d0108.  v2:= 31I;
  #L3d010c.  if v1 > v2 then goto L3d013c;
  #L3d0110.  v2:= `@@l8.c.x` @type ^`java.lang.String`[] @kind object;
  #L3d0114.  v3:= 1I;
  #L3d0116.  v3:= new `java.lang.Object`[v3];
  #L3d011a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3d0120.  v4:= temp @kind object;
  #L3d0122.  v3[v0]:= v4 @kind object;
  #L3d0126.  v4:= "\\u%04x" @kind object;
  #L3d012a.  call temp:= `format`(v4, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3d0130.  v3:= temp @kind object;
  #L3d0132.  v2[v1]:= v3 @kind object;
  #L3d0136.  v1:= v1 + 1;
  #L3d013a.  goto L3d0108;
  #L3d013c.  v0:= `@@l8.c.x` @type ^`java.lang.String`[] @kind object;
  #L3d0140.  v1:= 34I;
  #L3d0144.  v2:= "\\\"" @kind object;
  #L3d0148.  v0[v1]:= v2 @kind object;
  #L3d014c.  v1:= 92I;
  #L3d0150.  v2:= "\\\\" @kind object;
  #L3d0154.  v0[v1]:= v2 @kind object;
  #L3d0158.  v1:= 9I;
  #L3d015c.  v2:= "\\t" @kind object;
  #L3d0160.  v0[v1]:= v2 @kind object;
  #L3d0164.  v1:= 8I;
  #L3d0168.  v2:= "\\b" @kind object;
  #L3d016c.  v0[v1]:= v2 @kind object;
  #L3d0170.  v1:= 10I;
  #L3d0174.  v2:= "\\n" @kind object;
  #L3d0178.  v0[v1]:= v2 @kind object;
  #L3d017c.  v1:= 13I;
  #L3d0180.  v2:= "\\r" @kind object;
  #L3d0184.  v0[v1]:= v2 @kind object;
  #L3d0188.  v1:= 12I;
  #L3d018c.  v2:= "\\f" @kind object;
  #L3d0190.  v0[v1]:= v2 @kind object;
  #L3d0194.  call temp:= `clone`(v0) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3d019a.  v0:= temp @kind object;
  #L3d019c.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L3d01a0.  `@@l8.c.y` @type ^`java.lang.String`[] := v0 @kind object;
  #L3d01a4.  v1:= 60I;
  #L3d01a8.  v2:= "\\u003c" @kind object;
  #L3d01ac.  v0[v1]:= v2 @kind object;
  #L3d01b0.  v1:= 62I;
  #L3d01b4.  v2:= "\\u003e" @kind object;
  #L3d01b8.  v0[v1]:= v2 @kind object;
  #L3d01bc.  v1:= 38I;
  #L3d01c0.  v2:= "\\u0026" @kind object;
  #L3d01c4.  v0[v1]:= v2 @kind object;
  #L3d01c8.  v1:= 61I;
  #L3d01cc.  v2:= "\\u003d" @kind object;
  #L3d01d0.  v0[v1]:= v2 @kind object;
  #L3d01d4.  v1:= 39I;
  #L3d01d8.  v2:= "\\u0027" @kind object;
  #L3d01dc.  v0[v1]:= v2 @kind object;
  #L3d01e0.  return @kind void;
}
procedure `void` `<init>`(`l8.c` v1 @kind this, `java.io.Writer` v2 @kind object) @signature `Ll8/c;.<init>:(Ljava/io/Writer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d01f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d01fa.  v0:= 32I;
  #L3d01fe.  v0:= new `int`[v0];
  #L3d0202.  v1.`l8.c.p` @type ^`int`[] := v0 @kind object;
  #L3d0206.  v0:= 0I;
  #L3d0208.  v1.`l8.c.q` @type ^`int` := v0;
  #L3d020c.  v0:= 6I;
  #L3d020e.  call `N`(v1, v0) @signature `Ll8/c;.N:(I)V` @kind direct;
  #L3d0214.  v0:= ":" @kind object;
  #L3d0218.  v1.`l8.c.s` @type ^`java.lang.String` := v0 @kind object;
  #L3d021c.  v0:= 1I;
  #L3d021e.  v1.`l8.c.w` @type ^`boolean` := v0 @kind boolean;
  #L3d0222.  v0:= "out == null" @kind object;
  #L3d0226.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d022c.  v1.`l8.c.o` @type ^`java.io.Writer` := v2 @kind object;
  #L3d0230.  return @kind void;
}
procedure `void` `G`(`l8.c` v4 @kind this) @signature `Ll8/c;.G:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d03bc.  v0:= v4.`l8.c.r` @type ^`java.lang.String` @kind object;
  #L3d03c0.  if v0 != 0 then goto L3d03c6;
  #L3d03c4.  return @kind void;
  #L3d03c6.  v0:= v4.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d03ca.  v1:= 10I;
  #L3d03ce.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3d03d4.  v0:= v4.`l8.c.q` @type ^`int`;
  #L3d03d8.  v1:= 1I;
  #L3d03da.  if v1 >= v0 then goto L3d03f2;
  #L3d03de.  v2:= v4.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d03e2.  v3:= v4.`l8.c.r` @type ^`java.lang.String` @kind object;
  #L3d03e6.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3d03ec.  v1:= v1 + 1;
  #L3d03f0.  goto L3d03da;
  #L3d03f2.  return @kind void;
}
procedure `l8.c` `K`(`l8.c` v0 @kind this, `int` v1 , `char` v2 ) @signature `Ll8/c;.K:(IC)Ll8/c;` @AccessFlag PRIVATE {
    temp;

  #L3cff40.  call `c`(v0) @signature `Ll8/c;.c:()V` @kind direct;
  #L3cff46.  call `N`(v0, v1) @signature `Ll8/c;.N:(I)V` @kind direct;
  #L3cff4c.  v1:= v0.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3cff50.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3cff56.  return v0 @kind object;
}
procedure `int` `M`(`l8.c` v2 @kind this) @signature `Ll8/c;.M:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3cfd4c.  v0:= v2.`l8.c.q` @type ^`int`;
  #L3cfd50.  if v0 == 0 then goto L3cfd62;
  #L3cfd54.  v1:= v2.`l8.c.p` @type ^`int`[] @kind object;
  #L3cfd58.  v0:= v0 + -1;
  #L3cfd5c.  v0:= v1[v0];
  #L3cfd60.  return v0;
  #L3cfd62.  v0:= new `java.lang.IllegalStateException`;
  #L3cfd66.  v1:= "JsonWriter is closed." @kind object;
  #L3cfd6a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cfd70.  throw v0;
}
procedure `void` `N`(`l8.c` v3 @kind this, `int` v4 ) @signature `Ll8/c;.N:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3d0404.  v0:= v3.`l8.c.q` @type ^`int`;
  #L3d0408.  v1:= v3.`l8.c.p` @type ^`int`[] @kind object;
  #L3d040c.  v2:= length @variable v1;
  #L3d040e.  if v0 != v2 then goto L3d0422;
  #L3d0412.  v0:= v0 * 2;
  #L3d0416.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L3d041c.  v0:= temp @kind object;
  #L3d041e.  v3.`l8.c.p` @type ^`int`[] := v0 @kind object;
  #L3d0422.  v0:= v3.`l8.c.p` @type ^`int`[] @kind object;
  #L3d0426.  v1:= v3.`l8.c.q` @type ^`int`;
  #L3d042a.  v2:= v1 + 1;
  #L3d042e.  v3.`l8.c.q` @type ^`int` := v2;
  #L3d0432.  v0[v1]:= v4;
  #L3d0436.  return @kind void;
}
procedure `void` `O`(`l8.c` v2 @kind this, `int` v3 ) @signature `Ll8/c;.O:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3d0448.  v0:= v2.`l8.c.p` @type ^`int`[] @kind object;
  #L3d044c.  v1:= v2.`l8.c.q` @type ^`int`;
  #L3d0450.  v1:= v1 + -1;
  #L3d0454.  v0[v1]:= v3;
  #L3d0458.  return @kind void;
}
procedure `void` `a`(`l8.c` v2 @kind this) @signature `Ll8/c;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3d0244.  call temp:= `M`(v2) @signature `Ll8/c;.M:()I` @kind direct;
  #L3d024a.  v0:= temp;
  #L3d024c.  v1:= 5I;
  #L3d024e.  if v0 != v1 then goto L3d0262;
  #L3d0252.  v0:= v2.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d0256.  v1:= 44I;
  #L3d025a.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3d0260.  goto L3d0268;
  #L3d0262.  v1:= 3I;
  #L3d0264.  if v0 != v1 then goto L3d0278;
  #L3d0268.  call `G`(v2) @signature `Ll8/c;.G:()V` @kind direct;
  #L3d026e.  v0:= 4I;
  #L3d0270.  call `O`(v2, v0) @signature `Ll8/c;.O:(I)V` @kind direct;
  #L3d0276.  return @kind void;
  #L3d0278.  v0:= new `java.lang.IllegalStateException`;
  #L3d027c.  v1:= "Nesting problem." @kind object;
  #L3d0280.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d0286.  throw v0;
}
procedure `void` `c`(`l8.c` v3 @kind this) @signature `Ll8/c;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3d0298.  call temp:= `M`(v3) @signature `Ll8/c;.M:()I` @kind direct;
  #L3d029e.  v0:= temp;
  #L3d02a0.  v1:= 1I;
  #L3d02a2.  v2:= 2I;
  #L3d02a4.  if v0 == v1 then goto L3d0318;
  #L3d02a8.  if v0 == v2 then goto L3d0308;
  #L3d02ac.  v1:= 4I;
  #L3d02ae.  if v0 == v1 then goto L3d02f0;
  #L3d02b2.  v1:= 6I;
  #L3d02b4.  v2:= 7I;
  #L3d02b6.  if v0 == v1 then goto L3d02e8;
  #L3d02ba.  if v0 != v2 then goto L3d02d8;
  #L3d02be.  v0:= v3.`l8.c.t` @type ^`boolean` @kind boolean;
  #L3d02c2.  if v0 == 0 then goto L3d02c8;
  #L3d02c6.  goto L3d02e8;
  #L3d02c8.  v0:= new `java.lang.IllegalStateException`;
  #L3d02cc.  v1:= "JSON must have only one top-level value." @kind object;
  #L3d02d0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d02d6.  throw v0;
  #L3d02d8.  v0:= new `java.lang.IllegalStateException`;
  #L3d02dc.  v1:= "Nesting problem." @kind object;
  #L3d02e0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d02e6.  throw v0;
  #L3d02e8.  call `O`(v3, v2) @signature `Ll8/c;.O:(I)V` @kind direct;
  #L3d02ee.  goto L3d0324;
  #L3d02f0.  v0:= v3.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d02f4.  v1:= v3.`l8.c.s` @type ^`java.lang.String` @kind object;
  #L3d02f8.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L3d02fe.  v0:= 5I;
  #L3d0300.  call `O`(v3, v0) @signature `Ll8/c;.O:(I)V` @kind direct;
  #L3d0306.  goto L3d0324;
  #L3d0308.  v0:= v3.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d030c.  v1:= 44I;
  #L3d0310.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(C)Ljava/io/Writer;` @kind virtual;
  #L3d0316.  goto L3d031e;
  #L3d0318.  call `O`(v3, v2) @signature `Ll8/c;.O:(I)V` @kind direct;
  #L3d031e.  call `G`(v3) @signature `Ll8/c;.G:()V` @kind direct;
  #L3d0324.  return @kind void;
}
procedure `void` `d0`(`l8.c` v8 @kind this, `java.lang.String` v9 @kind object) @signature `Ll8/c;.d0:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d04ec.  v0:= v8.`l8.c.u` @type ^`boolean` @kind boolean;
  #L3d04f0.  if v0 == 0 then goto L3d04fa;
  #L3d04f4.  v0:= `@@l8.c.y` @type ^`java.lang.String`[] @kind object;
  #L3d04f8.  goto L3d04fe;
  #L3d04fa.  v0:= `@@l8.c.x` @type ^`java.lang.String`[] @kind object;
  #L3d04fe.  v1:= v8.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d0502.  v2:= 34I;
  #L3d0506.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3d050c.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d0512.  v1:= temp;
  #L3d0514.  v3:= 0I;
  #L3d0516.  v4:= 0I;
  #L3d0518.  if v3 >= v1 then goto L3d0576;
  #L3d051c.  call temp:= `charAt`(v9, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3d0522.  v5:= temp;
  #L3d0524.  v6:= 128I;
  #L3d0528.  if v5 >= v6 then goto L3d0536;
  #L3d052c.  v5:= v0[v5] @kind object;
  #L3d0530.  if v5 != 0 then goto L3d0550;
  #L3d0534.  goto L3d0570;
  #L3d0536.  v6:= 8232I;
  #L3d053a.  if v5 != v6 then goto L3d0544;
  #L3d053e.  v5:= "\\u2028" @kind object;
  #L3d0542.  goto L3d0550;
  #L3d0544.  v6:= 8233I;
  #L3d0548.  if v5 != v6 then goto L3d0570;
  #L3d054c.  v5:= "\\u2029" @kind object;
  #L3d0550.  if v4 >= v3 then goto L3d0562;
  #L3d0554.  v6:= v8.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d0558.  v7:= v3 - v4 @kind int;
  #L3d055c.  call `write`(v6, v9, v4, v7) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L3d0562.  v4:= v8.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d0566.  call `write`(v4, v5) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3d056c.  v4:= v3 + 1;
  #L3d0570.  v3:= v3 + 1;
  #L3d0574.  goto L3d0518;
  #L3d0576.  if v4 >= v1 then goto L3d0586;
  #L3d057a.  v0:= v8.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d057e.  v1:= v1 - v4 @kind int;
  #L3d0580.  call `write`(v0, v9, v4, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L3d0586.  v9:= v8.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d058a.  call `write`(v9, v2) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3d0590.  return @kind void;
}
procedure `l8.c` `i`(`l8.c` v1 @kind this, `int` v2 , `int` v3 , `char` v4 ) @signature `Ll8/c;.i:(IIC)Ll8/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3cfdd4.  call temp:= `M`(v1) @signature `Ll8/c;.M:()I` @kind direct;
  #L3cfdda.  v0:= temp;
  #L3cfddc.  if v0 == v3 then goto L3cfdf6;
  #L3cfde0.  if v0 != v2 then goto L3cfde6;
  #L3cfde4.  goto L3cfdf6;
  #L3cfde6.  v2:= new `java.lang.IllegalStateException`;
  #L3cfdea.  v3:= "Nesting problem." @kind object;
  #L3cfdee.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cfdf4.  throw v2;
  #L3cfdf6.  v2:= v1.`l8.c.v` @type ^`java.lang.String` @kind object;
  #L3cfdfa.  if v2 != 0 then goto L3cfe20;
  #L3cfdfe.  v2:= v1.`l8.c.q` @type ^`int`;
  #L3cfe02.  v2:= v2 + -1;
  #L3cfe06.  v1.`l8.c.q` @type ^`int` := v2;
  #L3cfe0a.  if v0 != v3 then goto L3cfe14;
  #L3cfe0e.  call `G`(v1) @signature `Ll8/c;.G:()V` @kind direct;
  #L3cfe14.  v2:= v1.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3cfe18.  call `write`(v2, v4) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3cfe1e.  return v1 @kind object;
  #L3cfe20.  v2:= new `java.lang.IllegalStateException`;
  #L3cfe24.  v3:= new `java.lang.StringBuilder`;
  #L3cfe28.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cfe2e.  v4:= "Dangling name: " @kind object;
  #L3cfe32.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cfe38.  v4:= v1.`l8.c.v` @type ^`java.lang.String` @kind object;
  #L3cfe3c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cfe42.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cfe48.  v3:= temp @kind object;
  #L3cfe4a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cfe50.  throw v2;
}
procedure `void` `j0`(`l8.c` v1 @kind this) @signature `Ll8/c;.j0:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3d05a4.  v0:= v1.`l8.c.v` @type ^`java.lang.String` @kind object;
  #L3d05a8.  if v0 == 0 then goto L3d05c2;
  #L3d05ac.  call `a`(v1) @signature `Ll8/c;.a:()V` @kind direct;
  #L3d05b2.  v0:= v1.`l8.c.v` @type ^`java.lang.String` @kind object;
  #L3d05b6.  call `d0`(v1, v0) @signature `Ll8/c;.d0:(Ljava/lang/String;)V` @kind direct;
  #L3d05bc.  v0:= 0I;
  #L3d05be.  v1.`l8.c.v` @type ^`java.lang.String` := v0 @kind object;
  #L3d05c2.  return @kind void;
}
procedure `l8.c` `E`(`l8.c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Ll8/c;.E:(Ljava/lang/String;)Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cfeac.  v0:= "name == null" @kind object;
  #L3cfeb0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3cfeb6.  v0:= v1.`l8.c.v` @type ^`java.lang.String` @kind object;
  #L3cfeba.  if v0 != 0 then goto L3cfedc;
  #L3cfebe.  v0:= v1.`l8.c.q` @type ^`int`;
  #L3cfec2.  if v0 == 0 then goto L3cfecc;
  #L3cfec6.  v1.`l8.c.v` @type ^`java.lang.String` := v2 @kind object;
  #L3cfeca.  return v1 @kind object;
  #L3cfecc.  v2:= new `java.lang.IllegalStateException`;
  #L3cfed0.  v0:= "JsonWriter is closed." @kind object;
  #L3cfed4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cfeda.  throw v2;
  #L3cfedc.  v2:= new `java.lang.IllegalStateException`;
  #L3cfee0.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3cfee6.  throw v2;
}
procedure `l8.c` `J`(`l8.c` v2 @kind this) @signature `Ll8/c;.J:()Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cfef8.  v0:= v2.`l8.c.v` @type ^`java.lang.String` @kind object;
  #L3cfefc.  if v0 == 0 then goto L3cff18;
  #L3cff00.  v0:= v2.`l8.c.w` @type ^`boolean` @kind boolean;
  #L3cff04.  if v0 == 0 then goto L3cff10;
  #L3cff08.  call `j0`(v2) @signature `Ll8/c;.j0:()V` @kind direct;
  #L3cff0e.  goto L3cff18;
  #L3cff10.  v0:= 0I;
  #L3cff12.  v2.`l8.c.v` @type ^`java.lang.String` := v0 @kind object;
  #L3cff16.  return v2 @kind object;
  #L3cff18.  call `c`(v2) @signature `Ll8/c;.c:()V` @kind direct;
  #L3cff1e.  v0:= v2.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3cff22.  v1:= "null" @kind object;
  #L3cff26.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3cff2c.  return v2 @kind object;
}
procedure `void` `S`(`l8.c` v0 @kind this, `boolean` v1 ) @signature `Ll8/c;.S:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d046c.  v0.`l8.c.u` @type ^`boolean` := v1 @kind boolean;
  #L3d0470.  return @kind void;
}
procedure `void` `a0`(`l8.c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Ll8/c;.a0:(Ljava/lang/String;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d0484.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d048a.  v0:= temp;
  #L3d048c.  if v0 != 0 then goto L3d049c;
  #L3d0490.  v2:= 0I;
  #L3d0492.  v1.`l8.c.r` @type ^`java.lang.String` := v2 @kind object;
  #L3d0496.  v2:= ":" @kind object;
  #L3d049a.  goto L3d04a4;
  #L3d049c.  v1.`l8.c.r` @type ^`java.lang.String` := v2 @kind object;
  #L3d04a0.  v2:= ": " @kind object;
  #L3d04a4.  v1.`l8.c.s` @type ^`java.lang.String` := v2 @kind object;
  #L3d04a8.  return @kind void;
}
procedure `void` `b0`(`l8.c` v0 @kind this, `boolean` v1 ) @signature `Ll8/c;.b0:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d04bc.  v0.`l8.c.t` @type ^`boolean` := v1 @kind boolean;
  #L3d04c0.  return @kind void;
}
procedure `void` `c0`(`l8.c` v0 @kind this, `boolean` v1 ) @signature `Ll8/c;.c0:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d04d4.  v0.`l8.c.w` @type ^`boolean` := v1 @kind boolean;
  #L3d04d8.  return @kind void;
}
procedure `void` `close`(`l8.c` v3 @kind this) @signature `Ll8/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d0338.  v0:= v3.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d033c.  call `close`(v0) @signature `Ljava/io/Writer;.close:()V` @kind virtual;
  #L3d0342.  v0:= v3.`l8.c.q` @type ^`int`;
  #L3d0346.  v1:= 1I;
  #L3d0348.  if v0 > v1 then goto L3d0368;
  #L3d034c.  if v0 != v1 then goto L3d0360;
  #L3d0350.  v2:= v3.`l8.c.p` @type ^`int`[] @kind object;
  #L3d0354.  v0:= v0 - v1 @kind int;
  #L3d0356.  v0:= v2[v0];
  #L3d035a.  v1:= 7I;
  #L3d035c.  if v0 != v1 then goto L3d0368;
  #L3d0360.  v0:= 0I;
  #L3d0362.  v3.`l8.c.q` @type ^`int` := v0;
  #L3d0366.  return @kind void;
  #L3d0368.  v0:= new `java.io.IOException`;
  #L3d036c.  v1:= "Incomplete document" @kind object;
  #L3d0370.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d0376.  throw v0;
}
procedure `l8.c` `e`(`l8.c` v2 @kind this) @signature `Ll8/c;.e:()Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cfd84.  call `j0`(v2) @signature `Ll8/c;.j0:()V` @kind direct;
  #L3cfd8a.  v0:= 1I;
  #L3cfd8c.  v1:= 91I;
  #L3cfd90.  call temp:= `K`(v2, v0, v1) @signature `Ll8/c;.K:(IC)Ll8/c;` @kind direct;
  #L3cfd96.  v0:= temp @kind object;
  #L3cfd98.  return v0 @kind object;
}
procedure `l8.c` `e0`(`l8.c` v1 @kind this, `long` v2 ) @signature `Ll8/c;.e0:(J)Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d00c8.  call `j0`(v1) @signature `Ll8/c;.j0:()V` @kind direct;
  #L3d00ce.  call `c`(v1) @signature `Ll8/c;.c:()V` @kind direct;
  #L3d00d4.  v0:= v1.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d00d8.  call temp:= `toString`(v2) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L3d00de.  v2:= temp @kind object;
  #L3d00e0.  call `write`(v0, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3d00e6.  return v1 @kind object;
}
procedure `l8.c` `f0`(`l8.c` v1 @kind this, `java.lang.Boolean` v2 @kind object) @signature `Ll8/c;.f0:(Ljava/lang/Boolean;)Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cffa0.  if v2 != 0 then goto L3cffae;
  #L3cffa4.  call temp:= `J`(v1) @signature `Ll8/c;.J:()Ll8/c;` @kind virtual;
  #L3cffaa.  v2:= temp @kind object;
  #L3cffac.  return v2 @kind object;
  #L3cffae.  call `j0`(v1) @signature `Ll8/c;.j0:()V` @kind direct;
  #L3cffb4.  call `c`(v1) @signature `Ll8/c;.c:()V` @kind direct;
  #L3cffba.  v0:= v1.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3cffbe.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L3cffc4.  v2:= temp;
  #L3cffc6.  if v2 == 0 then goto L3cffd0;
  #L3cffca.  v2:= "true" @kind object;
  #L3cffce.  goto L3cffd4;
  #L3cffd0.  v2:= "false" @kind object;
  #L3cffd4.  call `write`(v0, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3cffda.  return v1 @kind object;
}
procedure `void` `flush`(`l8.c` v2 @kind this) @signature `Ll8/c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d0388.  v0:= v2.`l8.c.q` @type ^`int`;
  #L3d038c.  if v0 == 0 then goto L3d039c;
  #L3d0390.  v0:= v2.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d0394.  call `flush`(v0) @signature `Ljava/io/Writer;.flush:()V` @kind virtual;
  #L3d039a.  return @kind void;
  #L3d039c.  v0:= new `java.lang.IllegalStateException`;
  #L3d03a0.  v1:= "JsonWriter is closed." @kind object;
  #L3d03a4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d03aa.  throw v0;
}
procedure `l8.c` `g0`(`l8.c` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Ll8/c;.g0:(Ljava/lang/Number;)Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cffec.  if v4 != 0 then goto L3cfffa;
  #L3cfff0.  call temp:= `J`(v3) @signature `Ll8/c;.J:()Ll8/c;` @kind virtual;
  #L3cfff6.  v4:= temp @kind object;
  #L3cfff8.  return v4 @kind object;
  #L3cfffa.  call `j0`(v3) @signature `Ll8/c;.j0:()V` @kind direct;
  #L3d0000.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d0006.  v0:= temp @kind object;
  #L3d0008.  v1:= v3.`l8.c.t` @type ^`boolean` @kind boolean;
  #L3d000c.  if v1 != 0 then goto L3d0070;
  #L3d0010.  v1:= "-Infinity" @kind object;
  #L3d0014.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3d001a.  v1:= temp;
  #L3d001c.  if v1 != 0 then goto L3d0042;
  #L3d0020.  v1:= "Infinity" @kind object;
  #L3d0024.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3d002a.  v1:= temp;
  #L3d002c.  if v1 != 0 then goto L3d0042;
  #L3d0030.  v1:= "NaN" @kind object;
  #L3d0034.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3d003a.  v1:= temp;
  #L3d003c.  if v1 != 0 then goto L3d0042;
  #L3d0040.  goto L3d0070;
  #L3d0042.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d0046.  v1:= new `java.lang.StringBuilder`;
  #L3d004a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d0050.  v2:= "Numeric values must be finite, but was " @kind object;
  #L3d0054.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d005a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d0060.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d0066.  v4:= temp @kind object;
  #L3d0068.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d006e.  throw v0;
  #L3d0070.  call `c`(v3) @signature `Ll8/c;.c:()V` @kind direct;
  #L3d0076.  v4:= v3.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3d007a.  call temp:= `append`(v4, v0) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L3d0080.  return v3 @kind object;
}
procedure `l8.c` `h`(`l8.c` v2 @kind this) @signature `Ll8/c;.h:()Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cfdac.  call `j0`(v2) @signature `Ll8/c;.j0:()V` @kind direct;
  #L3cfdb2.  v0:= 3I;
  #L3cfdb4.  v1:= 123I;
  #L3cfdb8.  call temp:= `K`(v2, v0, v1) @signature `Ll8/c;.K:(IC)Ll8/c;` @kind direct;
  #L3cfdbe.  v0:= temp @kind object;
  #L3cfdc0.  return v0 @kind object;
}
procedure `l8.c` `h0`(`l8.c` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Ll8/c;.h0:(Ljava/lang/String;)Ll8/c;` @AccessFlag PUBLIC {
    temp;

  #L3d0094.  if v1 != 0 then goto L3d00a2;
  #L3d0098.  call temp:= `J`(v0) @signature `Ll8/c;.J:()Ll8/c;` @kind virtual;
  #L3d009e.  v1:= temp @kind object;
  #L3d00a0.  return v1 @kind object;
  #L3d00a2.  call `j0`(v0) @signature `Ll8/c;.j0:()V` @kind direct;
  #L3d00a8.  call `c`(v0) @signature `Ll8/c;.c:()V` @kind direct;
  #L3d00ae.  call `d0`(v0, v1) @signature `Ll8/c;.d0:(Ljava/lang/String;)V` @kind direct;
  #L3d00b4.  return v0 @kind object;
}
procedure `l8.c` `i0`(`l8.c` v1 @kind this, `boolean` v2 ) @signature `Ll8/c;.i0:(Z)Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cff68.  call `j0`(v1) @signature `Ll8/c;.j0:()V` @kind direct;
  #L3cff6e.  call `c`(v1) @signature `Ll8/c;.c:()V` @kind direct;
  #L3cff74.  v0:= v1.`l8.c.o` @type ^`java.io.Writer` @kind object;
  #L3cff78.  if v2 == 0 then goto L3cff82;
  #L3cff7c.  v2:= "true" @kind object;
  #L3cff80.  goto L3cff86;
  #L3cff82.  v2:= "false" @kind object;
  #L3cff86.  call `write`(v0, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3cff8c.  return v1 @kind object;
}
procedure `l8.c` `k`(`l8.c` v3 @kind this) @signature `Ll8/c;.k:()Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cfe64.  v0:= 1I;
  #L3cfe66.  v1:= 2I;
  #L3cfe68.  v2:= 93I;
  #L3cfe6c.  call temp:= `i`(v3, v0, v1, v2) @signature `Ll8/c;.i:(IIC)Ll8/c;` @kind direct;
  #L3cfe72.  v0:= temp @kind object;
  #L3cfe74.  return v0 @kind object;
}
procedure `l8.c` `o`(`l8.c` v3 @kind this) @signature `Ll8/c;.o:()Ll8/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cfe88.  v0:= 3I;
  #L3cfe8a.  v1:= 5I;
  #L3cfe8c.  v2:= 125I;
  #L3cfe90.  call temp:= `i`(v3, v0, v1, v2) @signature `Ll8/c;.i:(IIC)Ll8/c;` @kind direct;
  #L3cfe96.  v0:= temp @kind object;
  #L3cfe98.  return v0 @kind object;
}
procedure `boolean` `s`(`l8.c` v1 @kind this) @signature `Ll8/c;.s:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3cfd04.  v0:= v1.`l8.c.w` @type ^`boolean` @kind boolean;
  #L3cfd08.  return v0;
}
procedure `boolean` `v`(`l8.c` v1 @kind this) @signature `Ll8/c;.v:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3cfd1c.  v0:= v1.`l8.c.u` @type ^`boolean` @kind boolean;
  #L3cfd20.  return v0;
}
procedure `boolean` `x`(`l8.c` v1 @kind this) @signature `Ll8/c;.x:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cfd34.  v0:= v1.`l8.c.t` @type ^`boolean` @kind boolean;
  #L3cfd38.  return v0;
}
