record `l8.a` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface {
  `int` `l8.a.A` @AccessFlag PRIVATE;
  `java.lang.String`[] `l8.a.B` @AccessFlag PRIVATE;
  `int`[] `l8.a.C` @AccessFlag PRIVATE;
  `java.io.Reader` `l8.a.o` @AccessFlag PRIVATE_FINAL;
  `boolean` `l8.a.p` @AccessFlag PRIVATE;
  `char`[] `l8.a.q` @AccessFlag PRIVATE_FINAL;
  `int` `l8.a.r` @AccessFlag PRIVATE;
  `int` `l8.a.s` @AccessFlag PRIVATE;
  `int` `l8.a.t` @AccessFlag PRIVATE;
  `int` `l8.a.u` @AccessFlag PRIVATE;
  `int` `l8.a.v` @AccessFlag ;
  `long` `l8.a.w` @AccessFlag PRIVATE;
  `int` `l8.a.x` @AccessFlag PRIVATE;
  `java.lang.String` `l8.a.y` @AccessFlag PRIVATE;
  `int`[] `l8.a.z` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Ll8/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3cf3f8.  v0:= new `l8.a$a`;
  #L3cf3fc.  call `<init>`(v0) @signature `Ll8/a$a;.<init>:()V` @kind direct;
  #L3cf402.  `@@f8.f.a` @type ^`f8.f` := v0 @kind object;
  #L3cf406.  return @kind void;
}
procedure `void` `<init>`(`l8.a` v4 @kind this, `java.io.Reader` v5 @kind object) @signature `Ll8/a;.<init>:(Ljava/io/Reader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cf418.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cf41e.  v0:= 0I;
  #L3cf420.  v4.`l8.a.p` @type ^`boolean` := v0 @kind boolean;
  #L3cf424.  v1:= 1024I;
  #L3cf428.  v1:= new `char`[v1];
  #L3cf42c.  v4.`l8.a.q` @type ^`char`[] := v1 @kind object;
  #L3cf430.  v4.`l8.a.r` @type ^`int` := v0;
  #L3cf434.  v4.`l8.a.s` @type ^`int` := v0;
  #L3cf438.  v4.`l8.a.t` @type ^`int` := v0;
  #L3cf43c.  v4.`l8.a.u` @type ^`int` := v0;
  #L3cf440.  v4.`l8.a.v` @type ^`int` := v0;
  #L3cf444.  v1:= 32I;
  #L3cf448.  v2:= new `int`[v1];
  #L3cf44c.  v4.`l8.a.z` @type ^`int`[] := v2 @kind object;
  #L3cf450.  v4.`l8.a.A` @type ^`int` := v0;
  #L3cf454.  v3:= v0 + 1;
  #L3cf458.  v4.`l8.a.A` @type ^`int` := v3;
  #L3cf45c.  v3:= 6I;
  #L3cf45e.  v2[v0]:= v3;
  #L3cf462.  v0:= new `java.lang.String`[v1];
  #L3cf466.  v4.`l8.a.B` @type ^`java.lang.String`[] := v0 @kind object;
  #L3cf46a.  v0:= new `int`[v1];
  #L3cf46e.  v4.`l8.a.C` @type ^`int`[] := v0 @kind object;
  #L3cf472.  v0:= "in == null" @kind object;
  #L3cf476.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3cf47c.  v4.`l8.a.o` @type ^`java.io.Reader` := v5 @kind object;
  #L3cf480.  return @kind void;
}
procedure `boolean` `G`(`l8.a` v1 @kind this, `char` v2 ) @signature `Ll8/a;.G:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3cdcf8.  v0:= 9I;
  #L3cdcfc.  if v2 == v0 then goto L3cdd70;
  #L3cdd00.  v0:= 10I;
  #L3cdd04.  if v2 == v0 then goto L3cdd70;
  #L3cdd08.  v0:= 12I;
  #L3cdd0c.  if v2 == v0 then goto L3cdd70;
  #L3cdd10.  v0:= 13I;
  #L3cdd14.  if v2 == v0 then goto L3cdd70;
  #L3cdd18.  v0:= 32I;
  #L3cdd1c.  if v2 == v0 then goto L3cdd70;
  #L3cdd20.  v0:= 35I;
  #L3cdd24.  if v2 == v0 then goto L3cdd6a;
  #L3cdd28.  v0:= 44I;
  #L3cdd2c.  if v2 == v0 then goto L3cdd70;
  #L3cdd30.  v0:= 47I;
  #L3cdd34.  if v2 == v0 then goto L3cdd6a;
  #L3cdd38.  v0:= 61I;
  #L3cdd3c.  if v2 == v0 then goto L3cdd6a;
  #L3cdd40.  v0:= 123I;
  #L3cdd44.  if v2 == v0 then goto L3cdd70;
  #L3cdd48.  v0:= 125I;
  #L3cdd4c.  if v2 == v0 then goto L3cdd70;
  #L3cdd50.  v0:= 58I;
  #L3cdd54.  if v2 == v0 then goto L3cdd70;
  #L3cdd58.  v0:= 59I;
  #L3cdd5c.  if v2 == v0 then goto L3cdd6a;
  #L3cdd60.  goto L3cdd74;
  #L3cdd66.  v2:= 1I;
  #L3cdd68.  return v2;
  #L3cdd6a.  call `e`(v1) @signature `Ll8/a;.e:()V` @kind direct;
  #L3cdd70.  v2:= 0I;
  #L3cdd72.  return v2;
  #L3cdd74.  switch v2
                  | 91 => goto L3cdd70
                  | 92 => goto L3cdd6a
                  | 93 => goto L3cdd70
                  | else => goto L3cdd66;
}
procedure `int` `a0`(`l8.a` v7 @kind this, `boolean` v8 ) @signature `Ll8/a;.a0:(Z)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ce720.  v0:= v7.`l8.a.q` @type ^`char`[] @kind object;
  #L3ce724.  v1:= v7.`l8.a.r` @type ^`int`;
  #L3ce728.  v2:= v7.`l8.a.s` @type ^`int`;
  #L3ce72c.  v3:= 1I;
  #L3ce72e.  if v1 != v2 then goto L3ce788;
  #L3ce732.  v7.`l8.a.r` @type ^`int` := v1;
  #L3ce736.  call temp:= `s`(v7, v3) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3ce73c.  v1:= temp;
  #L3ce73e.  if v1 != 0 then goto L3ce780;
  #L3ce742.  if v8 != 0 then goto L3ce74a;
  #L3ce746.  v8:= -1I;
  #L3ce748.  return v8;
  #L3ce74a.  v8:= new `java.io.EOFException`;
  #L3ce74e.  v0:= new `java.lang.StringBuilder`;
  #L3ce752.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ce758.  v1:= "End of input" @kind object;
  #L3ce75c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce762.  call temp:= `J`(v7) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3ce768.  v1:= temp @kind object;
  #L3ce76a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce770.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ce776.  v0:= temp @kind object;
  #L3ce778.  call `<init>`(v8, v0) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ce77e.  throw v8;
  #L3ce780.  v1:= v7.`l8.a.r` @type ^`int`;
  #L3ce784.  v2:= v7.`l8.a.s` @type ^`int`;
  #L3ce788.  v4:= v1 + 1;
  #L3ce78c.  v1:= v0[v1] @kind char;
  #L3ce790.  v5:= 10I;
  #L3ce794.  if v1 != v5 then goto L3ce7a8;
  #L3ce798.  v1:= v7.`l8.a.t` @type ^`int`;
  #L3ce79c.  v1:= v1 + v3 @kind int;
  #L3ce79e.  v7.`l8.a.t` @type ^`int` := v1;
  #L3ce7a2.  v7.`l8.a.u` @type ^`int` := v4;
  #L3ce7a6.  goto L3ce866;
  #L3ce7a8.  v5:= 32I;
  #L3ce7ac.  if v1 == v5 then goto L3ce866;
  #L3ce7b0.  v5:= 13I;
  #L3ce7b4.  if v1 == v5 then goto L3ce866;
  #L3ce7b8.  v5:= 9I;
  #L3ce7bc.  if v1 != v5 then goto L3ce7c2;
  #L3ce7c0.  goto L3ce866;
  #L3ce7c2.  v5:= 47I;
  #L3ce7c6.  if v1 != v5 then goto L3ce850;
  #L3ce7ca.  v7.`l8.a.r` @type ^`int` := v4;
  #L3ce7ce.  v6:= 2I;
  #L3ce7d0.  if v4 != v2 then goto L3ce7f4;
  #L3ce7d4.  v4:= v4 + -1;
  #L3ce7d8.  v7.`l8.a.r` @type ^`int` := v4;
  #L3ce7dc.  call temp:= `s`(v7, v6) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3ce7e2.  v2:= temp;
  #L3ce7e4.  v4:= v7.`l8.a.r` @type ^`int`;
  #L3ce7e8.  v4:= v4 + v3 @kind int;
  #L3ce7ea.  v7.`l8.a.r` @type ^`int` := v4;
  #L3ce7ee.  if v2 != 0 then goto L3ce7f4;
  #L3ce7f2.  return v1;
  #L3ce7f4.  call `e`(v7) @signature `Ll8/a;.e:()V` @kind direct;
  #L3ce7fa.  v2:= v7.`l8.a.r` @type ^`int`;
  #L3ce7fe.  v3:= v0[v2] @kind char;
  #L3ce802.  v4:= 42I;
  #L3ce806.  if v3 == v4 then goto L3ce820;
  #L3ce80a.  if v3 == v5 then goto L3ce810;
  #L3ce80e.  return v1;
  #L3ce810.  v2:= v2 + 1;
  #L3ce814.  v7.`l8.a.r` @type ^`int` := v2;
  #L3ce818.  call `n0`(v7) @signature `Ll8/a;.n0:()V` @kind direct;
  #L3ce81e.  goto L3ce724;
  #L3ce820.  v2:= v2 + 1;
  #L3ce824.  v7.`l8.a.r` @type ^`int` := v2;
  #L3ce828.  v1:= "*/" @kind object;
  #L3ce82c.  call temp:= `m0`(v7, v1) @signature `Ll8/a;.m0:(Ljava/lang/String;)Z` @kind direct;
  #L3ce832.  v1:= temp;
  #L3ce834.  if v1 == 0 then goto L3ce842;
  #L3ce838.  v1:= v7.`l8.a.r` @type ^`int`;
  #L3ce83c.  v1:= v1 + v6 @kind int;
  #L3ce83e.  goto L3ce728;
  #L3ce842.  v8:= "Unterminated comment" @kind object;
  #L3ce846.  call temp:= `q0`(v7, v8) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3ce84c.  v8:= temp @kind object;
  #L3ce84e.  throw v8;
  #L3ce850.  v2:= 35I;
  #L3ce854.  v7.`l8.a.r` @type ^`int` := v4;
  #L3ce858.  if v1 != v2 then goto L3ce864;
  #L3ce85c.  call `e`(v7) @signature `Ll8/a;.e:()V` @kind direct;
  #L3ce862.  goto L3ce818;
  #L3ce864.  return v1;
  #L3ce866.  v1:= v4;
  #L3ce868.  goto L3ce72c;
}
procedure `java.lang.String` `c0`(`l8.a` v9 @kind this, `char` v10 ) @signature `Ll8/a;.c0:(C)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3cedb8.  v0:= v9.`l8.a.q` @type ^`char`[] @kind object;
  #L3cedbc.  v1:= 0I;
  #L3cedbe.  v2:= v9.`l8.a.r` @type ^`int`;
  #L3cedc2.  v3:= v9.`l8.a.s` @type ^`int`;
  #L3cedc6.  v4:= v3;
  #L3cedc8.  v3:= v2;
  #L3cedca.  v5:= 16I;
  #L3cedce.  v6:= 1I;
  #L3cedd0.  if v2 >= v4 then goto L3cee68;
  #L3cedd4.  v7:= v2 + 1;
  #L3cedd8.  v2:= v0[v2] @kind char;
  #L3ceddc.  if v2 != v10 then goto L3cee08;
  #L3cede0.  v9.`l8.a.r` @type ^`int` := v7;
  #L3cede4.  v7:= v7 - v3 @kind int;
  #L3cede6.  v7:= v7 - v6 @kind int;
  #L3cede8.  if v1 != 0 then goto L3cedf8;
  #L3cedec.  v10:= new `java.lang.String`;
  #L3cedf0.  call `<init>`(v10, v0, v3, v7) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L3cedf6.  return v10 @kind object;
  #L3cedf8.  call temp:= `append`(v1, v0, v3, v7) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cedfe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cee04.  v10:= temp @kind object;
  #L3cee06.  return v10 @kind object;
  #L3cee08.  v8:= 92I;
  #L3cee0c.  if v2 != v8 then goto L3cee4e;
  #L3cee10.  v9.`l8.a.r` @type ^`int` := v7;
  #L3cee14.  v7:= v7 - v3 @kind int;
  #L3cee16.  v7:= v7 - v6 @kind int;
  #L3cee18.  if v1 != 0 then goto L3cee38;
  #L3cee1c.  v1:= v7 + 1;
  #L3cee20.  v1:= v1 * 2;
  #L3cee24.  v2:= new `java.lang.StringBuilder`;
  #L3cee28.  call temp:= `max`(v1, v5) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3cee2e.  v1:= temp;
  #L3cee30.  call `<init>`(v2, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3cee36.  v1:= v2 @kind object;
  #L3cee38.  call temp:= `append`(v1, v0, v3, v7) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cee3e.  call temp:= `j0`(v9) @signature `Ll8/a;.j0:()C` @kind direct;
  #L3cee44.  v2:= temp;
  #L3cee46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cee4c.  goto L3cedbe;
  #L3cee4e.  v5:= 10I;
  #L3cee52.  if v2 != v5 then goto L3cee64;
  #L3cee56.  v2:= v9.`l8.a.t` @type ^`int`;
  #L3cee5a.  v2:= v2 + v6 @kind int;
  #L3cee5c.  v9.`l8.a.t` @type ^`int` := v2;
  #L3cee60.  v9.`l8.a.u` @type ^`int` := v7;
  #L3cee64.  v2:= v7;
  #L3cee66.  goto L3cedca;
  #L3cee68.  if v1 != 0 then goto L3cee88;
  #L3cee6c.  v1:= v2 - v3 @kind int;
  #L3cee70.  v1:= v1 * 2;
  #L3cee74.  v4:= new `java.lang.StringBuilder`;
  #L3cee78.  call temp:= `max`(v1, v5) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3cee7e.  v1:= temp;
  #L3cee80.  call `<init>`(v4, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3cee86.  v1:= v4 @kind object;
  #L3cee88.  v4:= v2 - v3 @kind int;
  #L3cee8c.  call temp:= `append`(v1, v0, v3, v4) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cee92.  v9.`l8.a.r` @type ^`int` := v2;
  #L3cee96.  call temp:= `s`(v9, v6) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3cee9c.  v2:= temp;
  #L3cee9e.  if v2 == 0 then goto L3ceea4;
  #L3ceea2.  goto L3cedbe;
  #L3ceea4.  v10:= "Unterminated string" @kind object;
  #L3ceea8.  call temp:= `q0`(v9, v10) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3ceeae.  v10:= temp @kind object;
  #L3ceeb0.  throw v10;
}
procedure `void` `e`(`l8.a` v1 @kind this) @signature `Ll8/a;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3cf598.  v0:= v1.`l8.a.p` @type ^`boolean` @kind boolean;
  #L3cf59c.  if v0 == 0 then goto L3cf5a2;
  #L3cf5a0.  return @kind void;
  #L3cf5a2.  v0:= "Use JsonReader.setLenient(true) to accept malformed JSON" @kind object;
  #L3cf5a6.  call temp:= `q0`(v1, v0) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3cf5ac.  v0:= temp @kind object;
  #L3cf5ae.  throw v0;
}
procedure `java.lang.String` `e0`(`l8.a` v6 @kind this) @signature `Ll8/a;.e0:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3cefd4.  v0:= 0I;
  #L3cefd6.  v1:= 0I;
  #L3cefd8.  v2:= 0I;
  #L3cefda.  v3:= v6.`l8.a.r` @type ^`int`;
  #L3cefde.  v4:= v3 + v2 @kind int;
  #L3cefe2.  v5:= v6.`l8.a.s` @type ^`int`;
  #L3cefe6.  if v4 >= v5 then goto L3cf070;
  #L3cefea.  v4:= v6.`l8.a.q` @type ^`char`[] @kind object;
  #L3cefee.  v3:= v3 + v2 @kind int;
  #L3ceff0.  v3:= v4[v3] @kind char;
  #L3ceff4.  v4:= 9I;
  #L3ceff8.  if v3 == v4 then goto L3cf08c;
  #L3ceffc.  v4:= 10I;
  #L3cf000.  if v3 == v4 then goto L3cf08c;
  #L3cf004.  v4:= 12I;
  #L3cf008.  if v3 == v4 then goto L3cf08c;
  #L3cf00c.  v4:= 13I;
  #L3cf010.  if v3 == v4 then goto L3cf08c;
  #L3cf014.  v4:= 32I;
  #L3cf018.  if v3 == v4 then goto L3cf08c;
  #L3cf01c.  v4:= 35I;
  #L3cf020.  if v3 == v4 then goto L3cf068;
  #L3cf024.  v4:= 44I;
  #L3cf028.  if v3 == v4 then goto L3cf08c;
  #L3cf02c.  v4:= 47I;
  #L3cf030.  if v3 == v4 then goto L3cf068;
  #L3cf034.  v4:= 61I;
  #L3cf038.  if v3 == v4 then goto L3cf068;
  #L3cf03c.  v4:= 123I;
  #L3cf040.  if v3 == v4 then goto L3cf08c;
  #L3cf044.  v4:= 125I;
  #L3cf048.  if v3 == v4 then goto L3cf08c;
  #L3cf04c.  v4:= 58I;
  #L3cf050.  if v3 == v4 then goto L3cf08c;
  #L3cf054.  v4:= 59I;
  #L3cf058.  if v3 == v4 then goto L3cf068;
  #L3cf05c.  goto L3cf10c;
  #L3cf062.  v2:= v2 + 1;
  #L3cf066.  goto L3cefda;
  #L3cf068.  call `e`(v6) @signature `Ll8/a;.e:()V` @kind direct;
  #L3cf06e.  goto L3cf08c;
  #L3cf070.  v3:= v6.`l8.a.q` @type ^`char`[] @kind object;
  #L3cf074.  v3:= length @variable v3;
  #L3cf076.  if v2 >= v3 then goto L3cf090;
  #L3cf07a.  v3:= v2 + 1;
  #L3cf07e.  call temp:= `s`(v6, v3) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3cf084.  v3:= temp;
  #L3cf086.  if v3 == 0 then goto L3cf08c;
  #L3cf08a.  goto L3cefda;
  #L3cf08c.  v0:= v2;
  #L3cf08e.  goto L3cf0d0;
  #L3cf090.  if v1 != 0 then goto L3cf0aa;
  #L3cf094.  v1:= new `java.lang.StringBuilder`;
  #L3cf098.  v3:= 16I;
  #L3cf09c.  call temp:= `max`(v2, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3cf0a2.  v3:= temp;
  #L3cf0a4.  call `<init>`(v1, v3) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3cf0aa.  v3:= v6.`l8.a.q` @type ^`char`[] @kind object;
  #L3cf0ae.  v4:= v6.`l8.a.r` @type ^`int`;
  #L3cf0b2.  call temp:= `append`(v1, v3, v4, v2) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf0b8.  v3:= v6.`l8.a.r` @type ^`int`;
  #L3cf0bc.  v3:= v3 + v2 @kind int;
  #L3cf0be.  v6.`l8.a.r` @type ^`int` := v3;
  #L3cf0c2.  v2:= 1I;
  #L3cf0c4.  call temp:= `s`(v6, v2) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3cf0ca.  v2:= temp;
  #L3cf0cc.  if v2 != 0 then goto L3cefd8;
  #L3cf0d0.  if v1 != 0 then goto L3cf0e8;
  #L3cf0d4.  v1:= new `java.lang.String`;
  #L3cf0d8.  v2:= v6.`l8.a.q` @type ^`char`[] @kind object;
  #L3cf0dc.  v3:= v6.`l8.a.r` @type ^`int`;
  #L3cf0e0.  call `<init>`(v1, v2, v3, v0) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L3cf0e6.  goto L3cf0fe;
  #L3cf0e8.  v2:= v6.`l8.a.q` @type ^`char`[] @kind object;
  #L3cf0ec.  v3:= v6.`l8.a.r` @type ^`int`;
  #L3cf0f0.  call temp:= `append`(v1, v2, v3, v0) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf0f6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cf0fc.  v1:= temp @kind object;
  #L3cf0fe.  v2:= v6.`l8.a.r` @type ^`int`;
  #L3cf102.  v2:= v2 + v0 @kind int;
  #L3cf104.  v6.`l8.a.r` @type ^`int` := v2;
  #L3cf108.  return v1 @kind object;
  #L3cf10a.  
  #L3cf10c.  switch v3
                  | 91 => goto L3cf08c
                  | 92 => goto L3cf068
                  | 93 => goto L3cf08c
                  | else => goto L3cf062;
}
procedure `int` `g0`(`l8.a` v8 @kind this) @signature `Ll8/a;.g0:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3ce87c.  v0:= v8.`l8.a.q` @type ^`char`[] @kind object;
  #L3ce880.  v1:= v8.`l8.a.r` @type ^`int`;
  #L3ce884.  v0:= v0[v1] @kind char;
  #L3ce888.  v1:= 0I;
  #L3ce88a.  v2:= 116I;
  #L3ce88e.  if v0 == v2 then goto L3ce8da;
  #L3ce892.  v2:= 84I;
  #L3ce896.  if v0 != v2 then goto L3ce89c;
  #L3ce89a.  goto L3ce8da;
  #L3ce89c.  v2:= 102I;
  #L3ce8a0.  if v0 == v2 then goto L3ce8ce;
  #L3ce8a4.  v2:= 70I;
  #L3ce8a8.  if v0 != v2 then goto L3ce8ae;
  #L3ce8ac.  goto L3ce8ce;
  #L3ce8ae.  v2:= 110I;
  #L3ce8b2.  if v0 == v2 then goto L3ce8c2;
  #L3ce8b6.  v2:= 78I;
  #L3ce8ba.  if v0 != v2 then goto L3ce8c0;
  #L3ce8be.  goto L3ce8c2;
  #L3ce8c0.  return v1;
  #L3ce8c2.  v0:= 7I;
  #L3ce8c4.  v2:= "null" @kind object;
  #L3ce8c8.  v3:= "NULL" @kind object;
  #L3ce8cc.  goto L3ce8e4;
  #L3ce8ce.  v0:= 6I;
  #L3ce8d0.  v2:= "false" @kind object;
  #L3ce8d4.  v3:= "FALSE" @kind object;
  #L3ce8d8.  goto L3ce8e4;
  #L3ce8da.  v0:= 5I;
  #L3ce8dc.  v2:= "true" @kind object;
  #L3ce8e0.  v3:= "TRUE" @kind object;
  #L3ce8e4.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3ce8ea.  v4:= temp;
  #L3ce8ec.  v5:= 1I;
  #L3ce8ee.  if v5 >= v4 then goto L3ce940;
  #L3ce8f2.  v6:= v8.`l8.a.r` @type ^`int`;
  #L3ce8f6.  v6:= v6 + v5 @kind int;
  #L3ce8f8.  v7:= v8.`l8.a.s` @type ^`int`;
  #L3ce8fc.  if v6 < v7 then goto L3ce912;
  #L3ce900.  v6:= v5 + 1;
  #L3ce904.  call temp:= `s`(v8, v6) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3ce90a.  v6:= temp;
  #L3ce90c.  if v6 != 0 then goto L3ce912;
  #L3ce910.  return v1;
  #L3ce912.  v6:= v8.`l8.a.q` @type ^`char`[] @kind object;
  #L3ce916.  v7:= v8.`l8.a.r` @type ^`int`;
  #L3ce91a.  v7:= v7 + v5 @kind int;
  #L3ce91c.  v6:= v6[v7] @kind char;
  #L3ce920.  call temp:= `charAt`(v2, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3ce926.  v7:= temp;
  #L3ce928.  if v6 == v7 then goto L3ce93a;
  #L3ce92c.  call temp:= `charAt`(v3, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3ce932.  v7:= temp;
  #L3ce934.  if v6 == v7 then goto L3ce93a;
  #L3ce938.  return v1;
  #L3ce93a.  v5:= v5 + 1;
  #L3ce93e.  goto L3ce8ee;
  #L3ce940.  v2:= v8.`l8.a.r` @type ^`int`;
  #L3ce944.  v2:= v2 + v4 @kind int;
  #L3ce946.  v3:= v8.`l8.a.s` @type ^`int`;
  #L3ce94a.  if v2 < v3 then goto L3ce95e;
  #L3ce94e.  v2:= v4 + 1;
  #L3ce952.  call temp:= `s`(v8, v2) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3ce958.  v2:= temp;
  #L3ce95a.  if v2 == 0 then goto L3ce97a;
  #L3ce95e.  v2:= v8.`l8.a.q` @type ^`char`[] @kind object;
  #L3ce962.  v3:= v8.`l8.a.r` @type ^`int`;
  #L3ce966.  v3:= v3 + v4 @kind int;
  #L3ce968.  v2:= v2[v3] @kind char;
  #L3ce96c.  call temp:= `G`(v8, v2) @signature `Ll8/a;.G:(C)Z` @kind direct;
  #L3ce972.  v2:= temp;
  #L3ce974.  if v2 == 0 then goto L3ce97a;
  #L3ce978.  return v1;
  #L3ce97a.  v1:= v8.`l8.a.r` @type ^`int`;
  #L3ce97e.  v1:= v1 + v4 @kind int;
  #L3ce980.  v8.`l8.a.r` @type ^`int` := v1;
  #L3ce984.  v8.`l8.a.v` @type ^`int` := v0;
  #L3ce988.  return v0;
}
procedure `void` `h`(`l8.a` v5 @kind this) @signature `Ll8/a;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3cf5f4.  v0:= 1I;
  #L3cf5f6.  call temp:= `a0`(v5, v0) @signature `Ll8/a;.a0:(Z)I` @kind direct;
  #L3cf5fc.  v1:= v5.`l8.a.r` @type ^`int`;
  #L3cf600.  v1:= v1 - v0 @kind int;
  #L3cf602.  v5.`l8.a.r` @type ^`int` := v1;
  #L3cf606.  v0:= v1 + 5;
  #L3cf60a.  v2:= v5.`l8.a.s` @type ^`int`;
  #L3cf60e.  v3:= 5I;
  #L3cf610.  if v0 <= v2 then goto L3cf622;
  #L3cf614.  call temp:= `s`(v5, v3) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3cf61a.  v0:= temp;
  #L3cf61c.  if v0 != 0 then goto L3cf622;
  #L3cf620.  return @kind void;
  #L3cf622.  v0:= v5.`l8.a.q` @type ^`char`[] @kind object;
  #L3cf626.  v2:= v0[v1] @kind char;
  #L3cf62a.  v4:= 41I;
  #L3cf62e.  if v2 != v4 then goto L3cf67e;
  #L3cf632.  v2:= v1 + 1;
  #L3cf636.  v2:= v0[v2] @kind char;
  #L3cf63a.  v4:= 93I;
  #L3cf63e.  if v2 != v4 then goto L3cf67e;
  #L3cf642.  v2:= v1 + 2;
  #L3cf646.  v2:= v0[v2] @kind char;
  #L3cf64a.  v4:= 125I;
  #L3cf64e.  if v2 != v4 then goto L3cf67e;
  #L3cf652.  v2:= v1 + 3;
  #L3cf656.  v2:= v0[v2] @kind char;
  #L3cf65a.  v4:= 39I;
  #L3cf65e.  if v2 != v4 then goto L3cf67e;
  #L3cf662.  v1:= v1 + 4;
  #L3cf666.  v0:= v0[v1] @kind char;
  #L3cf66a.  v1:= 10I;
  #L3cf66e.  if v0 == v1 then goto L3cf674;
  #L3cf672.  goto L3cf67e;
  #L3cf674.  v0:= v5.`l8.a.r` @type ^`int`;
  #L3cf678.  v0:= v0 + v3 @kind int;
  #L3cf67a.  v5.`l8.a.r` @type ^`int` := v0;
  #L3cf67e.  return @kind void;
}
procedure `int` `h0`(`l8.a` v18 @kind this) @signature `Ll8/a;.h0:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L3ce99c.  v0:= v18 @kind object;
  #L3ce9a0.  v1:= v0.`l8.a.q` @type ^`char`[] @kind object;
  #L3ce9a4.  v2:= v0.`l8.a.r` @type ^`int`;
  #L3ce9a8.  v3:= v0.`l8.a.s` @type ^`int`;
  #L3ce9ac.  v6:= 1I;
  #L3ce9ae.  v7:= 0I;
  #L3ce9b0.  v8:= 0I;
  #L3ce9b2.  v9:= 0I;
  #L3ce9b4.  v10:= 1I;
  #L3ce9b6.  v11:= 0L;
  #L3ce9ba.  v13:= 0I;
  #L3ce9bc.  v14:= v2 + v8 @kind int;
  #L3ce9c0.  v15:= 2I;
  #L3ce9c2.  if v14 != v3 then goto L3ce9ea;
  #L3ce9c6.  v2:= length @variable v1;
  #L3ce9c8.  if v8 != v2 then goto L3ce9ce;
  #L3ce9cc.  return v7;
  #L3ce9ce.  v2:= v8 + 1;
  #L3ce9d2.  call temp:= `s`(v0, v2) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3ce9d8.  v2:= temp;
  #L3ce9da.  if v2 != 0 then goto L3ce9e2;
  #L3ce9de.  goto L3ceaca;
  #L3ce9e2.  v2:= v0.`l8.a.r` @type ^`int`;
  #L3ce9e6.  v3:= v0.`l8.a.s` @type ^`int`;
  #L3ce9ea.  v14:= v2 + v8 @kind int;
  #L3ce9ee.  v14:= v1[v14] @kind char;
  #L3ce9f2.  v7:= 43I;
  #L3ce9f6.  v4:= 3I;
  #L3ce9f8.  v5:= 5I;
  #L3ce9fa.  if v14 == v7 then goto L3ceb78;
  #L3ce9fe.  v7:= 69I;
  #L3cea02.  if v14 == v7 then goto L3ceb60;
  #L3cea06.  v7:= 101I;
  #L3cea0a.  if v14 == v7 then goto L3ceb60;
  #L3cea0e.  v7:= 45I;
  #L3cea12.  if v14 == v7 then goto L3ceb46;
  #L3cea16.  v7:= 46I;
  #L3cea1a.  if v14 == v7 then goto L3ceb36;
  #L3cea1e.  v7:= 48I;
  #L3cea22.  if v14 < v7 then goto L3ceabe;
  #L3cea26.  v7:= 57I;
  #L3cea2a.  if v14 <= v7 then goto L3cea30;
  #L3cea2e.  goto L3ceabe;
  #L3cea30.  if v9 == v6 then goto L3ceaaa;
  #L3cea34.  if v9 != 0 then goto L3cea3a;
  #L3cea38.  goto L3ceaaa;
  #L3cea3a.  if v9 != v15 then goto L3cea8a;
  #L3cea3e.  v16:= 0L;
  #L3cea42.  v4:= lcmp(v11, v16);
  #L3cea46.  if v4 != 0 then goto L3cea4e;
  #L3cea4a.  v4:= 0I;
  #L3cea4c.  return v4;
  #L3cea4e.  v4:= 10L;
  #L3cea52.  v4:= v4 * v11 @kind long;
  #L3cea56.  v14:= v14 + -48;
  #L3cea5a.  v14:= (`long`) v14 @kind i2l;
  #L3cea5c.  v4:= v4 - v14 @kind long;
  #L3cea5e.  v14:= -922337203685477580L;
  #L3cea68.  v7:= lcmp(v11, v14);
  #L3cea6c.  if v7 > 0 then goto L3cea82;
  #L3cea70.  if v7 != 0 then goto L3cea7e;
  #L3cea74.  v7:= lcmp(v4, v11);
  #L3cea78.  if v7 >= 0 then goto L3cea7e;
  #L3cea7c.  goto L3cea82;
  #L3cea7e.  v7:= 0I;
  #L3cea80.  goto L3cea84;
  #L3cea82.  v7:= 1I;
  #L3cea84.  v10:= v10 ^& v7 @kind int;
  #L3cea86.  v11:= v4 @kind wide;
  #L3cea88.  goto L3ceaa0;
  #L3cea8a.  if v9 != v4 then goto L3cea94;
  #L3cea8e.  v7:= 0I;
  #L3cea90.  v9:= 4I;
  #L3cea92.  goto L3ceab6;
  #L3cea94.  if v9 == v5 then goto L3ceaa4;
  #L3cea98.  v4:= 6I;
  #L3cea9a.  if v9 != v4 then goto L3ceaa0;
  #L3cea9e.  goto L3ceaa4;
  #L3ceaa0.  v7:= 0I;
  #L3ceaa2.  goto L3ceab6;
  #L3ceaa4.  v7:= 0I;
  #L3ceaa6.  v9:= 7I;
  #L3ceaa8.  goto L3ceab6;
  #L3ceaaa.  v14:= v14 + -48;
  #L3ceaae.  v4:= -v14 @kind int;
  #L3ceab0.  v11:= (`long`) v4 @kind i2l;
  #L3ceab2.  v7:= 0I;
  #L3ceab4.  v9:= 2I;
  #L3ceab6.  v16:= 0L;
  #L3ceaba.  goto L3ceb86;
  #L3ceabe.  call temp:= `G`(v0, v14) @signature `Ll8/a;.G:(C)Z` @kind direct;
  #L3ceac4.  v1:= temp;
  #L3ceac6.  if v1 != 0 then goto L3ceb32;
  #L3ceaca.  if v9 != v15 then goto L3ceb12;
  #L3ceace.  if v10 == 0 then goto L3ceb12;
  #L3cead2.  v1:= -9223372036854775808L;
  #L3cead6.  v3:= lcmp(v11, v1);
  #L3ceada.  if v3 != 0 then goto L3ceae2;
  #L3ceade.  if v13 == 0 then goto L3ceb12;
  #L3ceae2.  v16:= 0L;
  #L3ceae6.  v1:= lcmp(v11, v16);
  #L3ceaea.  if v1 != 0 then goto L3ceaf2;
  #L3ceaee.  if v13 != 0 then goto L3ceb12;
  #L3ceaf2.  if v13 == 0 then goto L3ceaf8;
  #L3ceaf6.  goto L3ceafa;
  #L3ceaf8.  v11:= -v11 @kind long;
  #L3ceafa.  v0.`l8.a.w` @type ^`long` := v11 @kind wide;
  #L3ceafe.  v1:= v0.`l8.a.r` @type ^`int`;
  #L3ceb02.  v1:= v1 + v8 @kind int;
  #L3ceb04.  v0.`l8.a.r` @type ^`int` := v1;
  #L3ceb08.  v1:= 15I;
  #L3ceb0c.  v0.`l8.a.v` @type ^`int` := v1;
  #L3ceb10.  return v1;
  #L3ceb12.  if v9 == v15 then goto L3ceb28;
  #L3ceb16.  v1:= 4I;
  #L3ceb18.  if v9 == v1 then goto L3ceb28;
  #L3ceb1c.  v1:= 7I;
  #L3ceb1e.  if v9 != v1 then goto L3ceb24;
  #L3ceb22.  goto L3ceb28;
  #L3ceb24.  v7:= 0I;
  #L3ceb26.  return v7;
  #L3ceb28.  v0.`l8.a.x` @type ^`int` := v8;
  #L3ceb2c.  v1:= 16I;
  #L3ceb30.  goto L3ceb0c;
  #L3ceb32.  v7:= 0I;
  #L3ceb34.  return v7;
  #L3ceb36.  v7:= 0I;
  #L3ceb38.  v16:= 0L;
  #L3ceb3c.  if v9 != v15 then goto L3ceb44;
  #L3ceb40.  v9:= 3I;
  #L3ceb42.  goto L3ceb86;
  #L3ceb44.  return v7;
  #L3ceb46.  v4:= 6I;
  #L3ceb48.  v7:= 0I;
  #L3ceb4a.  v16:= 0L;
  #L3ceb4e.  if v9 != 0 then goto L3ceb58;
  #L3ceb52.  v9:= 1I;
  #L3ceb54.  v13:= 1I;
  #L3ceb56.  goto L3ceb86;
  #L3ceb58.  if v9 != v5 then goto L3ceb5e;
  #L3ceb5c.  goto L3ceb84;
  #L3ceb5e.  return v7;
  #L3ceb60.  v7:= 0I;
  #L3ceb62.  v16:= 0L;
  #L3ceb66.  if v9 == v15 then goto L3ceb74;
  #L3ceb6a.  v4:= 4I;
  #L3ceb6c.  if v9 != v4 then goto L3ceb72;
  #L3ceb70.  goto L3ceb74;
  #L3ceb72.  return v7;
  #L3ceb74.  v9:= 5I;
  #L3ceb76.  goto L3ceb86;
  #L3ceb78.  v4:= 6I;
  #L3ceb7a.  v7:= 0I;
  #L3ceb7c.  v16:= 0L;
  #L3ceb80.  if v9 != v5 then goto L3ceb8e;
  #L3ceb84.  v9:= 6I;
  #L3ceb86.  v8:= v8 + 1;
  #L3ceb8a.  goto L3ce9bc;
  #L3ceb8e.  return v7;
}
procedure `void` `i0`(`l8.a` v3 @kind this, `int` v4 ) @signature `Ll8/a;.i0:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3cf84c.  v0:= v3.`l8.a.A` @type ^`int`;
  #L3cf850.  v1:= v3.`l8.a.z` @type ^`int`[] @kind object;
  #L3cf854.  v2:= length @variable v1;
  #L3cf856.  if v0 != v2 then goto L3cf88e;
  #L3cf85a.  v0:= v0 * 2;
  #L3cf85e.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L3cf864.  v1:= temp @kind object;
  #L3cf866.  v3.`l8.a.z` @type ^`int`[] := v1 @kind object;
  #L3cf86a.  v1:= v3.`l8.a.C` @type ^`int`[] @kind object;
  #L3cf86e.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L3cf874.  v1:= temp @kind object;
  #L3cf876.  v3.`l8.a.C` @type ^`int`[] := v1 @kind object;
  #L3cf87a.  v1:= v3.`l8.a.B` @type ^`java.lang.String`[] @kind object;
  #L3cf87e.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3cf884.  v0:= temp @kind object;
  #L3cf886.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L3cf88a.  v3.`l8.a.B` @type ^`java.lang.String`[] := v0 @kind object;
  #L3cf88e.  v0:= v3.`l8.a.z` @type ^`int`[] @kind object;
  #L3cf892.  v1:= v3.`l8.a.A` @type ^`int`;
  #L3cf896.  v2:= v1 + 1;
  #L3cf89a.  v3.`l8.a.A` @type ^`int` := v2;
  #L3cf89e.  v0[v1]:= v4;
  #L3cf8a2.  return @kind void;
}
procedure `char` `j0`(`l8.a` v8 @kind this) @signature `Ll8/a;.j0:()C` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3cded4.  v0:= v8.`l8.a.r` @type ^`int`;
  #L3cded8.  v1:= v8.`l8.a.s` @type ^`int`;
  #L3cdedc.  v2:= "Unterminated escape sequence" @kind object;
  #L3cdee0.  v3:= 1I;
  #L3cdee2.  if v0 != v1 then goto L3cdefe;
  #L3cdee6.  call temp:= `s`(v8, v3) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3cdeec.  v0:= temp;
  #L3cdeee.  if v0 == 0 then goto L3cdef4;
  #L3cdef2.  goto L3cdefe;
  #L3cdef4.  call temp:= `q0`(v8, v2) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3cdefa.  v0:= temp @kind object;
  #L3cdefc.  throw v0;
  #L3cdefe.  v0:= v8.`l8.a.q` @type ^`char`[] @kind object;
  #L3cdf02.  v1:= v8.`l8.a.r` @type ^`int`;
  #L3cdf06.  v4:= v1 + 1;
  #L3cdf0a.  v8.`l8.a.r` @type ^`int` := v4;
  #L3cdf0e.  v0:= v0[v1] @kind char;
  #L3cdf12.  v1:= 10I;
  #L3cdf16.  if v0 == v1 then goto L3ce068;
  #L3cdf1a.  v3:= 34I;
  #L3cdf1e.  if v0 == v3 then goto L3ce076;
  #L3cdf22.  v3:= 39I;
  #L3cdf26.  if v0 == v3 then goto L3ce076;
  #L3cdf2a.  v3:= 47I;
  #L3cdf2e.  if v0 == v3 then goto L3ce076;
  #L3cdf32.  v3:= 92I;
  #L3cdf36.  if v0 == v3 then goto L3ce076;
  #L3cdf3a.  v3:= 98I;
  #L3cdf3e.  if v0 == v3 then goto L3ce062;
  #L3cdf42.  v3:= 102I;
  #L3cdf46.  if v0 == v3 then goto L3ce05c;
  #L3cdf4a.  v5:= 110I;
  #L3cdf4e.  if v0 == v5 then goto L3ce05a;
  #L3cdf52.  v5:= 114I;
  #L3cdf56.  if v0 == v5 then goto L3ce054;
  #L3cdf5a.  v5:= 116I;
  #L3cdf5e.  if v0 == v5 then goto L3ce04e;
  #L3cdf62.  v5:= 117I;
  #L3cdf66.  if v0 != v5 then goto L3ce040;
  #L3cdf6a.  v0:= 4I;
  #L3cdf6c.  v4:= v4 + v0 @kind int;
  #L3cdf6e.  v5:= v8.`l8.a.s` @type ^`int`;
  #L3cdf72.  if v4 <= v5 then goto L3cdf8e;
  #L3cdf76.  call temp:= `s`(v8, v0) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3cdf7c.  v4:= temp;
  #L3cdf7e.  if v4 == 0 then goto L3cdf84;
  #L3cdf82.  goto L3cdf8e;
  #L3cdf84.  call temp:= `q0`(v8, v2) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3cdf8a.  v0:= temp @kind object;
  #L3cdf8c.  throw v0;
  #L3cdf8e.  v2:= 0I;
  #L3cdf90.  v4:= v8.`l8.a.r` @type ^`int`;
  #L3cdf94.  v5:= v4 + 4;
  #L3cdf98.  if v4 >= v5 then goto L3ce034;
  #L3cdf9c.  v6:= v8.`l8.a.q` @type ^`char`[] @kind object;
  #L3cdfa0.  v6:= v6[v4] @kind char;
  #L3cdfa4.  v2:= v2 ^< 4;
  #L3cdfa8.  v2:= (`char`) v2 @kind i2c;
  #L3cdfaa.  v7:= 48I;
  #L3cdfae.  if v6 < v7 then goto L3cdfc4;
  #L3cdfb2.  v7:= 57I;
  #L3cdfb6.  if v6 > v7 then goto L3cdfc4;
  #L3cdfba.  v6:= v6 + -48;
  #L3cdfbe.  v2:= v2 + v6 @kind int;
  #L3cdfc0.  v2:= (`char`) v2 @kind i2c;
  #L3cdfc2.  goto L3cdfee;
  #L3cdfc4.  v7:= 97I;
  #L3cdfc8.  if v6 < v7 then goto L3cdfd8;
  #L3cdfcc.  if v6 > v3 then goto L3cdfd8;
  #L3cdfd0.  v6:= v6 + -97;
  #L3cdfd4.  v6:= v6 + v1 @kind int;
  #L3cdfd6.  goto L3cdfbe;
  #L3cdfd8.  v7:= 65I;
  #L3cdfdc.  if v6 < v7 then goto L3cdff4;
  #L3cdfe0.  v7:= 70I;
  #L3cdfe4.  if v6 > v7 then goto L3cdff4;
  #L3cdfe8.  v6:= v6 + -65;
  #L3cdfec.  goto L3cdfd4;
  #L3cdfee.  v4:= v4 + 1;
  #L3cdff2.  goto L3cdf98;
  #L3cdff4.  v1:= new `java.lang.NumberFormatException`;
  #L3cdff8.  v2:= new `java.lang.StringBuilder`;
  #L3cdffc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ce002.  v3:= "\\u" @kind object;
  #L3ce006.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce00c.  v3:= new `java.lang.String`;
  #L3ce010.  v4:= v8.`l8.a.q` @type ^`char`[] @kind object;
  #L3ce014.  v5:= v8.`l8.a.r` @type ^`int`;
  #L3ce018.  call `<init>`(v3, v4, v5, v0) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L3ce01e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce024.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ce02a.  v0:= temp @kind object;
  #L3ce02c.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ce032.  throw v1;
  #L3ce034.  v1:= v8.`l8.a.r` @type ^`int`;
  #L3ce038.  v1:= v1 + v0 @kind int;
  #L3ce03a.  v8.`l8.a.r` @type ^`int` := v1;
  #L3ce03e.  return v2;
  #L3ce040.  v0:= "Invalid escape sequence" @kind object;
  #L3ce044.  call temp:= `q0`(v8, v0) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3ce04a.  v0:= temp @kind object;
  #L3ce04c.  throw v0;
  #L3ce04e.  v0:= 9I;
  #L3ce052.  return v0;
  #L3ce054.  v0:= 13I;
  #L3ce058.  return v0;
  #L3ce05a.  return v1;
  #L3ce05c.  v0:= 12I;
  #L3ce060.  return v0;
  #L3ce062.  v0:= 8I;
  #L3ce066.  return v0;
  #L3ce068.  v1:= v8.`l8.a.t` @type ^`int`;
  #L3ce06c.  v1:= v1 + v3 @kind int;
  #L3ce06e.  v8.`l8.a.t` @type ^`int` := v1;
  #L3ce072.  v8.`l8.a.u` @type ^`int` := v4;
  #L3ce076.  return v0;
}
procedure `void` `l0`(`l8.a` v6 @kind this, `char` v7 ) @signature `Ll8/a;.l0:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3cf8cc.  v0:= v6.`l8.a.q` @type ^`char`[] @kind object;
  #L3cf8d0.  v1:= v6.`l8.a.r` @type ^`int`;
  #L3cf8d4.  v2:= v6.`l8.a.s` @type ^`int`;
  #L3cf8d8.  v3:= 1I;
  #L3cf8da.  if v1 >= v2 then goto L3cf91e;
  #L3cf8de.  v4:= v1 + 1;
  #L3cf8e2.  v1:= v0[v1] @kind char;
  #L3cf8e6.  if v1 != v7 then goto L3cf8f0;
  #L3cf8ea.  v6.`l8.a.r` @type ^`int` := v4;
  #L3cf8ee.  return @kind void;
  #L3cf8f0.  v5:= 92I;
  #L3cf8f4.  if v1 != v5 then goto L3cf904;
  #L3cf8f8.  v6.`l8.a.r` @type ^`int` := v4;
  #L3cf8fc.  call temp:= `j0`(v6) @signature `Ll8/a;.j0:()C` @kind direct;
  #L3cf902.  goto L3cf8d0;
  #L3cf904.  v5:= 10I;
  #L3cf908.  if v1 != v5 then goto L3cf91a;
  #L3cf90c.  v1:= v6.`l8.a.t` @type ^`int`;
  #L3cf910.  v1:= v1 + v3 @kind int;
  #L3cf912.  v6.`l8.a.t` @type ^`int` := v1;
  #L3cf916.  v6.`l8.a.u` @type ^`int` := v4;
  #L3cf91a.  v1:= v4;
  #L3cf91c.  goto L3cf8d8;
  #L3cf91e.  v6.`l8.a.r` @type ^`int` := v1;
  #L3cf922.  call temp:= `s`(v6, v3) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3cf928.  v1:= temp;
  #L3cf92a.  if v1 == 0 then goto L3cf930;
  #L3cf92e.  goto L3cf8d0;
  #L3cf930.  v7:= "Unterminated string" @kind object;
  #L3cf934.  call temp:= `q0`(v6, v7) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3cf93a.  v7:= temp @kind object;
  #L3cf93c.  throw v7;
}
procedure `boolean` `m0`(`l8.a` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Ll8/a;.m0:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3cde40.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3cde46.  v0:= temp;
  #L3cde48.  v1:= v6.`l8.a.r` @type ^`int`;
  #L3cde4c.  v1:= v1 + v0 @kind int;
  #L3cde4e.  v2:= v6.`l8.a.s` @type ^`int`;
  #L3cde52.  v3:= 0I;
  #L3cde54.  if v1 <= v2 then goto L3cde68;
  #L3cde58.  call temp:= `s`(v6, v0) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3cde5e.  v1:= temp;
  #L3cde60.  if v1 == 0 then goto L3cde66;
  #L3cde64.  goto L3cde68;
  #L3cde66.  return v3;
  #L3cde68.  v1:= v6.`l8.a.q` @type ^`char`[] @kind object;
  #L3cde6c.  v2:= v6.`l8.a.r` @type ^`int`;
  #L3cde70.  v1:= v1[v2] @kind char;
  #L3cde74.  v4:= 10I;
  #L3cde78.  v5:= 1I;
  #L3cde7a.  if v1 != v4 then goto L3cde92;
  #L3cde7e.  v1:= v6.`l8.a.t` @type ^`int`;
  #L3cde82.  v1:= v1 + v5 @kind int;
  #L3cde84.  v6.`l8.a.t` @type ^`int` := v1;
  #L3cde88.  v2:= v2 + 1;
  #L3cde8c.  v6.`l8.a.u` @type ^`int` := v2;
  #L3cde90.  goto L3cdeb0;
  #L3cde92.  if v3 >= v0 then goto L3cdec2;
  #L3cde96.  v1:= v6.`l8.a.q` @type ^`char`[] @kind object;
  #L3cde9a.  v2:= v6.`l8.a.r` @type ^`int`;
  #L3cde9e.  v2:= v2 + v3 @kind int;
  #L3cdea0.  v1:= v1[v2] @kind char;
  #L3cdea4.  call temp:= `charAt`(v7, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3cdeaa.  v2:= temp;
  #L3cdeac.  if v1 == v2 then goto L3cdebc;
  #L3cdeb0.  v1:= v6.`l8.a.r` @type ^`int`;
  #L3cdeb4.  v1:= v1 + v5 @kind int;
  #L3cdeb6.  v6.`l8.a.r` @type ^`int` := v1;
  #L3cdeba.  goto L3cde48;
  #L3cdebc.  v3:= v3 + 1;
  #L3cdec0.  goto L3cde92;
  #L3cdec2.  return v5;
}
procedure `void` `n0`(`l8.a` v4 @kind this) @signature `Ll8/a;.n0:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cf950.  v0:= v4.`l8.a.r` @type ^`int`;
  #L3cf954.  v1:= v4.`l8.a.s` @type ^`int`;
  #L3cf958.  v2:= 1I;
  #L3cf95a.  if v0 < v1 then goto L3cf96a;
  #L3cf95e.  call temp:= `s`(v4, v2) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3cf964.  v0:= temp;
  #L3cf966.  if v0 == 0 then goto L3cf99e;
  #L3cf96a.  v0:= v4.`l8.a.q` @type ^`char`[] @kind object;
  #L3cf96e.  v1:= v4.`l8.a.r` @type ^`int`;
  #L3cf972.  v3:= v1 + 1;
  #L3cf976.  v4.`l8.a.r` @type ^`int` := v3;
  #L3cf97a.  v0:= v0[v1] @kind char;
  #L3cf97e.  v1:= 10I;
  #L3cf982.  if v0 != v1 then goto L3cf996;
  #L3cf986.  v0:= v4.`l8.a.t` @type ^`int`;
  #L3cf98a.  v0:= v0 + v2 @kind int;
  #L3cf98c.  v4.`l8.a.t` @type ^`int` := v0;
  #L3cf990.  v4.`l8.a.u` @type ^`int` := v3;
  #L3cf994.  goto L3cf99e;
  #L3cf996.  v1:= 13I;
  #L3cf99a.  if v0 != v1 then goto L3cf950;
  #L3cf99e.  return @kind void;
}
procedure `void` `o0`(`l8.a` v4 @kind this) @signature `Ll8/a;.o0:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cf9b0.  v0:= 0I;
  #L3cf9b2.  v1:= v4.`l8.a.r` @type ^`int`;
  #L3cf9b6.  v2:= v1 + v0 @kind int;
  #L3cf9ba.  v3:= v4.`l8.a.s` @type ^`int`;
  #L3cf9be.  if v2 >= v3 then goto L3cfa52;
  #L3cf9c2.  v2:= v4.`l8.a.q` @type ^`char`[] @kind object;
  #L3cf9c6.  v1:= v1 + v0 @kind int;
  #L3cf9c8.  v1:= v2[v1] @kind char;
  #L3cf9cc.  v2:= 9I;
  #L3cf9d0.  if v1 == v2 then goto L3cfa46;
  #L3cf9d4.  v2:= 10I;
  #L3cf9d8.  if v1 == v2 then goto L3cfa46;
  #L3cf9dc.  v2:= 12I;
  #L3cf9e0.  if v1 == v2 then goto L3cfa46;
  #L3cf9e4.  v2:= 13I;
  #L3cf9e8.  if v1 == v2 then goto L3cfa46;
  #L3cf9ec.  v2:= 32I;
  #L3cf9f0.  if v1 == v2 then goto L3cfa46;
  #L3cf9f4.  v2:= 35I;
  #L3cf9f8.  if v1 == v2 then goto L3cfa40;
  #L3cf9fc.  v2:= 44I;
  #L3cfa00.  if v1 == v2 then goto L3cfa46;
  #L3cfa04.  v2:= 47I;
  #L3cfa08.  if v1 == v2 then goto L3cfa40;
  #L3cfa0c.  v2:= 61I;
  #L3cfa10.  if v1 == v2 then goto L3cfa40;
  #L3cfa14.  v2:= 123I;
  #L3cfa18.  if v1 == v2 then goto L3cfa46;
  #L3cfa1c.  v2:= 125I;
  #L3cfa20.  if v1 == v2 then goto L3cfa46;
  #L3cfa24.  v2:= 58I;
  #L3cfa28.  if v1 == v2 then goto L3cfa46;
  #L3cfa2c.  v2:= 59I;
  #L3cfa30.  if v1 == v2 then goto L3cfa40;
  #L3cfa34.  goto L3cfa68;
  #L3cfa3a.  v0:= v0 + 1;
  #L3cfa3e.  goto L3cf9b2;
  #L3cfa40.  call `e`(v4) @signature `Ll8/a;.e:()V` @kind direct;
  #L3cfa46.  v1:= v4.`l8.a.r` @type ^`int`;
  #L3cfa4a.  v1:= v1 + v0 @kind int;
  #L3cfa4c.  v4.`l8.a.r` @type ^`int` := v1;
  #L3cfa50.  return @kind void;
  #L3cfa52.  v1:= v1 + v0 @kind int;
  #L3cfa54.  v4.`l8.a.r` @type ^`int` := v1;
  #L3cfa58.  v0:= 1I;
  #L3cfa5a.  call temp:= `s`(v4, v0) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3cfa60.  v0:= temp;
  #L3cfa62.  if v0 != 0 then goto L3cf9b0;
  #L3cfa66.  return @kind void;
  #L3cfa68.  switch v1
                  | 91 => goto L3cfa46
                  | 92 => goto L3cfa40
                  | 93 => goto L3cfa46
                  | else => goto L3cfa3a;
}
procedure `java.io.IOException` `q0`(`l8.a` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ceba0.  v0:= new `l8.d`;
  #L3ceba4.  v1:= new `java.lang.StringBuilder`;
  #L3ceba8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cebae.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cebb4.  call temp:= `J`(v2) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3cebba.  v3:= temp @kind object;
  #L3cebbc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cebc2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cebc8.  v3:= temp @kind object;
  #L3cebca.  call `<init>`(v0, v3) @signature `Ll8/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cebd0.  throw v0;
}
procedure `boolean` `s`(`l8.a` v7 @kind this, `int` v8 ) @signature `Ll8/a;.s:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3cdc04.  v0:= v7.`l8.a.q` @type ^`char`[] @kind object;
  #L3cdc08.  v1:= v7.`l8.a.u` @type ^`int`;
  #L3cdc0c.  v2:= v7.`l8.a.r` @type ^`int`;
  #L3cdc10.  v1:= v1 - v2 @kind int;
  #L3cdc12.  v7.`l8.a.u` @type ^`int` := v1;
  #L3cdc16.  v1:= v7.`l8.a.s` @type ^`int`;
  #L3cdc1a.  v3:= 0I;
  #L3cdc1c.  if v1 == v2 then goto L3cdc2e;
  #L3cdc20.  v1:= v1 - v2 @kind int;
  #L3cdc22.  v7.`l8.a.s` @type ^`int` := v1;
  #L3cdc26.  call `arraycopy`(v0, v2, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3cdc2c.  goto L3cdc32;
  #L3cdc2e.  v7.`l8.a.s` @type ^`int` := v3;
  #L3cdc32.  v7.`l8.a.r` @type ^`int` := v3;
  #L3cdc36.  v1:= v7.`l8.a.o` @type ^`java.io.Reader` @kind object;
  #L3cdc3a.  v2:= v7.`l8.a.s` @type ^`int`;
  #L3cdc3e.  v4:= length @variable v0;
  #L3cdc40.  v4:= v4 - v2 @kind int;
  #L3cdc42.  call temp:= `read`(v1, v0, v2, v4) @signature `Ljava/io/Reader;.read:([CII)I` @kind virtual;
  #L3cdc48.  v1:= temp;
  #L3cdc4a.  v2:= -1I;
  #L3cdc4c.  if v1 == v2 then goto L3cdc9a;
  #L3cdc50.  v2:= v7.`l8.a.s` @type ^`int`;
  #L3cdc54.  v2:= v2 + v1 @kind int;
  #L3cdc56.  v7.`l8.a.s` @type ^`int` := v2;
  #L3cdc5a.  v1:= v7.`l8.a.t` @type ^`int`;
  #L3cdc5e.  v4:= 1I;
  #L3cdc60.  if v1 != 0 then goto L3cdc94;
  #L3cdc64.  v1:= v7.`l8.a.u` @type ^`int`;
  #L3cdc68.  if v1 != 0 then goto L3cdc94;
  #L3cdc6c.  if v2 <= 0 then goto L3cdc94;
  #L3cdc70.  v5:= v0[v3] @kind char;
  #L3cdc74.  v6:= 65279I;
  #L3cdc7a.  if v5 != v6 then goto L3cdc94;
  #L3cdc7e.  v5:= v7.`l8.a.r` @type ^`int`;
  #L3cdc82.  v5:= v5 + v4 @kind int;
  #L3cdc84.  v7.`l8.a.r` @type ^`int` := v5;
  #L3cdc88.  v1:= v1 + 1;
  #L3cdc8c.  v7.`l8.a.u` @type ^`int` := v1;
  #L3cdc90.  v8:= v8 + 1;
  #L3cdc94.  if v2 < v8 then goto L3cdc36;
  #L3cdc98.  return v4;
  #L3cdc9a.  return v3;
}
procedure `boolean` `E`(`l8.a` v1 @kind this) @signature `Ll8/a;.E:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3cdce0.  v0:= v1.`l8.a.p` @type ^`boolean` @kind boolean;
  #L3cdce4.  return v0;
}
procedure `java.lang.String` `J`(`l8.a` v4 @kind this) @signature `Ll8/a;.J:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cec90.  v0:= v4.`l8.a.t` @type ^`int`;
  #L3cec94.  v0:= v0 + 1;
  #L3cec98.  v1:= v4.`l8.a.r` @type ^`int`;
  #L3cec9c.  v2:= v4.`l8.a.u` @type ^`int`;
  #L3ceca0.  v1:= v1 - v2 @kind int;
  #L3ceca2.  v1:= v1 + 1;
  #L3ceca6.  v2:= new `java.lang.StringBuilder`;
  #L3cecaa.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cecb0.  v3:= " at line " @kind object;
  #L3cecb4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cecba.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cecc0.  v0:= " column " @kind object;
  #L3cecc4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cecca.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cecd0.  v0:= " path " @kind object;
  #L3cecd4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cecda.  call temp:= `v`(v4) @signature `Ll8/a;.v:()Ljava/lang/String;` @kind virtual;
  #L3cece0.  v0:= temp @kind object;
  #L3cece2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cece8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cecee.  v0:= temp @kind object;
  #L3cecf0.  return v0 @kind object;
}
procedure `boolean` `K`(`l8.a` v5 @kind this) @signature `Ll8/a;.K:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3cdd98.  v0:= v5.`l8.a.v` @type ^`int`;
  #L3cdd9c.  if v0 != 0 then goto L3cdda8;
  #L3cdda0.  call temp:= `i`(v5) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3cdda6.  v0:= temp;
  #L3cdda8.  v1:= 5I;
  #L3cddaa.  v2:= 0I;
  #L3cddac.  v3:= 1I;
  #L3cddae.  if v0 != v1 then goto L3cddcc;
  #L3cddb2.  v5.`l8.a.v` @type ^`int` := v2;
  #L3cddb6.  v0:= v5.`l8.a.C` @type ^`int`[] @kind object;
  #L3cddba.  v1:= v5.`l8.a.A` @type ^`int`;
  #L3cddbe.  v1:= v1 - v3 @kind int;
  #L3cddc0.  v2:= v0[v1];
  #L3cddc4.  v2:= v2 + v3 @kind int;
  #L3cddc6.  v0[v1]:= v2;
  #L3cddca.  return v3;
  #L3cddcc.  v1:= 6I;
  #L3cddce.  if v0 != v1 then goto L3cddec;
  #L3cddd2.  v5.`l8.a.v` @type ^`int` := v2;
  #L3cddd6.  v0:= v5.`l8.a.C` @type ^`int`[] @kind object;
  #L3cddda.  v1:= v5.`l8.a.A` @type ^`int`;
  #L3cddde.  v1:= v1 - v3 @kind int;
  #L3cdde0.  v4:= v0[v1];
  #L3cdde4.  v4:= v4 + v3 @kind int;
  #L3cdde6.  v0[v1]:= v4;
  #L3cddea.  return v2;
  #L3cddec.  v0:= new `java.lang.IllegalStateException`;
  #L3cddf0.  v1:= new `java.lang.StringBuilder`;
  #L3cddf4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cddfa.  v2:= "Expected a boolean but was " @kind object;
  #L3cddfe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cde04.  call temp:= `f0`(v5) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L3cde0a.  v2:= temp @kind object;
  #L3cde0c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cde12.  call temp:= `J`(v5) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3cde18.  v2:= temp @kind object;
  #L3cde1a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cde20.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cde26.  v1:= temp @kind object;
  #L3cde28.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cde2e.  throw v0;
}
procedure `double` `M`(`l8.a` v6 @kind this) @signature `Ll8/a;.M:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ce088.  v0:= v6.`l8.a.v` @type ^`int`;
  #L3ce08c.  if v0 != 0 then goto L3ce098;
  #L3ce090.  call temp:= `i`(v6) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3ce096.  v0:= temp;
  #L3ce098.  v1:= 15I;
  #L3ce09c.  v2:= 0I;
  #L3ce09e.  if v0 != v1 then goto L3ce0c6;
  #L3ce0a2.  v6.`l8.a.v` @type ^`int` := v2;
  #L3ce0a6.  v0:= v6.`l8.a.C` @type ^`int`[] @kind object;
  #L3ce0aa.  v1:= v6.`l8.a.A` @type ^`int`;
  #L3ce0ae.  v1:= v1 + -1;
  #L3ce0b2.  v2:= v0[v1];
  #L3ce0b6.  v2:= v2 + 1;
  #L3ce0ba.  v0[v1]:= v2;
  #L3ce0be.  v0:= v6.`l8.a.w` @type ^`long` @kind wide;
  #L3ce0c2.  v0:= (`double`) v0 @kind l2d;
  #L3ce0c4.  return v0 @kind wide;
  #L3ce0c6.  v1:= 16I;
  #L3ce0ca.  v3:= 11I;
  #L3ce0ce.  if v0 != v1 then goto L3ce0fc;
  #L3ce0d2.  v0:= new `java.lang.String`;
  #L3ce0d6.  v1:= v6.`l8.a.q` @type ^`char`[] @kind object;
  #L3ce0da.  v4:= v6.`l8.a.r` @type ^`int`;
  #L3ce0de.  v5:= v6.`l8.a.x` @type ^`int`;
  #L3ce0e2.  call `<init>`(v0, v1, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L3ce0e8.  v6.`l8.a.y` @type ^`java.lang.String` := v0 @kind object;
  #L3ce0ec.  v0:= v6.`l8.a.r` @type ^`int`;
  #L3ce0f0.  v1:= v6.`l8.a.x` @type ^`int`;
  #L3ce0f4.  v0:= v0 + v1 @kind int;
  #L3ce0f6.  v6.`l8.a.r` @type ^`int` := v0;
  #L3ce0fa.  goto L3ce184;
  #L3ce0fc.  v1:= 8I;
  #L3ce100.  if v0 == v1 then goto L3ce16a;
  #L3ce104.  v4:= 9I;
  #L3ce108.  if v0 != v4 then goto L3ce10e;
  #L3ce10c.  goto L3ce16a;
  #L3ce10e.  v1:= 10I;
  #L3ce112.  if v0 != v1 then goto L3ce120;
  #L3ce116.  call temp:= `e0`(v6) @signature `Ll8/a;.e0:()Ljava/lang/String;` @kind direct;
  #L3ce11c.  v0:= temp @kind object;
  #L3ce11e.  goto L3ce180;
  #L3ce120.  if v0 != v3 then goto L3ce126;
  #L3ce124.  goto L3ce184;
  #L3ce126.  v0:= new `java.lang.IllegalStateException`;
  #L3ce12a.  v1:= new `java.lang.StringBuilder`;
  #L3ce12e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ce134.  v2:= "Expected a double but was " @kind object;
  #L3ce138.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce13e.  call temp:= `f0`(v6) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L3ce144.  v2:= temp @kind object;
  #L3ce146.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce14c.  call temp:= `J`(v6) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3ce152.  v2:= temp @kind object;
  #L3ce154.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce15a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ce160.  v1:= temp @kind object;
  #L3ce162.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ce168.  throw v0;
  #L3ce16a.  if v0 != v1 then goto L3ce174;
  #L3ce16e.  v0:= 39I;
  #L3ce172.  goto L3ce178;
  #L3ce174.  v0:= 34I;
  #L3ce178.  call temp:= `c0`(v6, v0) @signature `Ll8/a;.c0:(C)Ljava/lang/String;` @kind direct;
  #L3ce17e.  v0:= temp @kind object;
  #L3ce180.  v6.`l8.a.y` @type ^`java.lang.String` := v0 @kind object;
  #L3ce184.  v6.`l8.a.v` @type ^`int` := v3;
  #L3ce188.  v0:= v6.`l8.a.y` @type ^`java.lang.String` @kind object;
  #L3ce18c.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L3ce192.  v0:= temp @kind wide;
  #L3ce194.  v3:= v6.`l8.a.p` @type ^`boolean` @kind boolean;
  #L3ce198.  if v3 != 0 then goto L3ce1f2;
  #L3ce19c.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L3ce1a2.  v3:= temp;
  #L3ce1a4.  if v3 != 0 then goto L3ce1b6;
  #L3ce1a8.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L3ce1ae.  v3:= temp;
  #L3ce1b0.  if v3 != 0 then goto L3ce1b6;
  #L3ce1b4.  goto L3ce1f2;
  #L3ce1b6.  v2:= new `l8.d`;
  #L3ce1ba.  v3:= new `java.lang.StringBuilder`;
  #L3ce1be.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ce1c4.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L3ce1c8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce1ce.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce1d4.  call temp:= `J`(v6) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3ce1da.  v0:= temp @kind object;
  #L3ce1dc.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce1e2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ce1e8.  v0:= temp @kind object;
  #L3ce1ea.  call `<init>`(v2, v0) @signature `Ll8/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ce1f0.  throw v2;
  #L3ce1f2.  v3:= 0I;
  #L3ce1f4.  v6.`l8.a.y` @type ^`java.lang.String` := v3 @kind object;
  #L3ce1f8.  v6.`l8.a.v` @type ^`int` := v2;
  #L3ce1fc.  v2:= v6.`l8.a.C` @type ^`int`[] @kind object;
  #L3ce200.  v3:= v6.`l8.a.A` @type ^`int`;
  #L3ce204.  v3:= v3 + -1;
  #L3ce208.  v4:= v2[v3];
  #L3ce20c.  v4:= v4 + 1;
  #L3ce210.  v2[v3]:= v4;
  #L3ce214.  return v0 @kind wide;
}
procedure `int` `N`(`l8.a` v8 @kind this) @signature `Ll8/a;.N:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3ce514.  v0:= v8.`l8.a.v` @type ^`int`;
  #L3ce518.  if v0 != 0 then goto L3ce524;
  #L3ce51c.  call temp:= `i`(v8) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3ce522.  v0:= temp;
  #L3ce524.  v1:= 15I;
  #L3ce528.  v2:= "Expected an int but was " @kind object;
  #L3ce52c.  v3:= 0I;
  #L3ce52e.  if v0 != v1 then goto L3ce59c;
  #L3ce532.  v0:= v8.`l8.a.w` @type ^`long` @kind wide;
  #L3ce536.  v4:= (`int`) v0 @kind l2i;
  #L3ce538.  v5:= (`long`) v4 @kind i2l;
  #L3ce53a.  v7:= lcmp(v0, v5);
  #L3ce53e.  if v7 != 0 then goto L3ce560;
  #L3ce542.  v8.`l8.a.v` @type ^`int` := v3;
  #L3ce546.  v0:= v8.`l8.a.C` @type ^`int`[] @kind object;
  #L3ce54a.  v1:= v8.`l8.a.A` @type ^`int`;
  #L3ce54e.  v1:= v1 + -1;
  #L3ce552.  v2:= v0[v1];
  #L3ce556.  v2:= v2 + 1;
  #L3ce55a.  v0[v1]:= v2;
  #L3ce55e.  return v4;
  #L3ce560.  v0:= new `java.lang.NumberFormatException`;
  #L3ce564.  v1:= new `java.lang.StringBuilder`;
  #L3ce568.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ce56e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce574.  v2:= v8.`l8.a.w` @type ^`long` @kind wide;
  #L3ce578.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce57e.  call temp:= `J`(v8) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3ce584.  v2:= temp @kind object;
  #L3ce586.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce58c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ce592.  v1:= temp @kind object;
  #L3ce594.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ce59a.  throw v0;
  #L3ce59c.  v1:= 16I;
  #L3ce5a0.  if v0 != v1 then goto L3ce5ce;
  #L3ce5a4.  v0:= new `java.lang.String`;
  #L3ce5a8.  v1:= v8.`l8.a.q` @type ^`char`[] @kind object;
  #L3ce5ac.  v4:= v8.`l8.a.r` @type ^`int`;
  #L3ce5b0.  v5:= v8.`l8.a.x` @type ^`int`;
  #L3ce5b4.  call `<init>`(v0, v1, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L3ce5ba.  v8.`l8.a.y` @type ^`java.lang.String` := v0 @kind object;
  #L3ce5be.  v0:= v8.`l8.a.r` @type ^`int`;
  #L3ce5c2.  v1:= v8.`l8.a.x` @type ^`int`;
  #L3ce5c6.  v0:= v0 + v1 @kind int;
  #L3ce5c8.  v8.`l8.a.r` @type ^`int` := v0;
  #L3ce5cc.  goto L3ce67e;
  #L3ce5ce.  v1:= 10I;
  #L3ce5d2.  v4:= 8I;
  #L3ce5d6.  if v0 == v4 then goto L3ce628;
  #L3ce5da.  v5:= 9I;
  #L3ce5de.  if v0 == v5 then goto L3ce628;
  #L3ce5e2.  if v0 != v1 then goto L3ce5e8;
  #L3ce5e6.  goto L3ce628;
  #L3ce5e8.  v0:= new `java.lang.IllegalStateException`;
  #L3ce5ec.  v1:= new `java.lang.StringBuilder`;
  #L3ce5f0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ce5f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce5fc.  call temp:= `f0`(v8) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L3ce602.  v2:= temp @kind object;
  #L3ce604.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce60a.  call temp:= `J`(v8) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3ce610.  v2:= temp @kind object;
  #L3ce612.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce618.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ce61e.  v1:= temp @kind object;
  #L3ce620.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ce626.  throw v0;
  #L3ce628.  if v0 != v1 then goto L3ce63a;
  #L3ce62c.  call temp:= `e0`(v8) @signature `Ll8/a;.e0:()Ljava/lang/String;` @kind direct;
  #L3ce632.  v0:= temp @kind object;
  #L3ce634.  v8.`l8.a.y` @type ^`java.lang.String` := v0 @kind object;
  #L3ce638.  goto L3ce652;
  #L3ce63a.  if v0 != v4 then goto L3ce644;
  #L3ce63e.  v0:= 39I;
  #L3ce642.  goto L3ce648;
  #L3ce644.  v0:= 34I;
  #L3ce648.  call temp:= `c0`(v8, v0) @signature `Ll8/a;.c0:(C)Ljava/lang/String;` @kind direct;
  #L3ce64e.  v0:= temp @kind object;
  #L3ce650.  goto L3ce634;
  #L3ce652.  v0:= v8.`l8.a.y` @type ^`java.lang.String` @kind object;
  #L3ce656.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3ce65c.  v0:= temp;
  #L3ce65e.  v8.`l8.a.v` @type ^`int` := v3;
  #L3ce662.  v1:= v8.`l8.a.C` @type ^`int`[] @kind object;
  #L3ce666.  v4:= v8.`l8.a.A` @type ^`int`;
  #L3ce66a.  v4:= v4 + -1;
  #L3ce66e.  v5:= v1[v4];
  #L3ce672.  v5:= v5 + 1;
  #L3ce676.  v1[v4]:= v5;
  #L3ce67a.  return v0;
  #L3ce67c.  
  #L3ce67e.  v0:= 11I;
  #L3ce682.  v8.`l8.a.v` @type ^`int` := v0;
  #L3ce686.  v0:= v8.`l8.a.y` @type ^`java.lang.String` @kind object;
  #L3ce68a.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L3ce690.  v0:= temp @kind wide;
  #L3ce692.  v4:= (`int`) v0 @kind d2i;
  #L3ce694.  v5:= (`double`) v4 @kind i2d;
  #L3ce696.  v7:= dcmpl(v5, v0);
  #L3ce69a.  if v7 != 0 then goto L3ce6c2;
  #L3ce69e.  v0:= 0I;
  #L3ce6a0.  v8.`l8.a.y` @type ^`java.lang.String` := v0 @kind object;
  #L3ce6a4.  v8.`l8.a.v` @type ^`int` := v3;
  #L3ce6a8.  v0:= v8.`l8.a.C` @type ^`int`[] @kind object;
  #L3ce6ac.  v1:= v8.`l8.a.A` @type ^`int`;
  #L3ce6b0.  v1:= v1 + -1;
  #L3ce6b4.  v2:= v0[v1];
  #L3ce6b8.  v2:= v2 + 1;
  #L3ce6bc.  v0[v1]:= v2;
  #L3ce6c0.  return v4;
  #L3ce6c2.  v0:= new `java.lang.NumberFormatException`;
  #L3ce6c6.  v1:= new `java.lang.StringBuilder`;
  #L3ce6ca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ce6d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce6d6.  v2:= v8.`l8.a.y` @type ^`java.lang.String` @kind object;
  #L3ce6da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce6e0.  call temp:= `J`(v8) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3ce6e6.  v2:= temp @kind object;
  #L3ce6e8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce6ee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ce6f4.  v1:= temp @kind object;
  #L3ce6f6.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ce6fc.  throw v0;
  catch `java.lang.NumberFormatException` @[L3ce652..L3ce67a] goto L3ce67c;
}
procedure `long` `O`(`l8.a` v9 @kind this) @signature `Ll8/a;.O:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3cf234.  v0:= v9.`l8.a.v` @type ^`int`;
  #L3cf238.  if v0 != 0 then goto L3cf244;
  #L3cf23c.  call temp:= `i`(v9) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3cf242.  v0:= temp;
  #L3cf244.  v1:= 15I;
  #L3cf248.  v2:= 0I;
  #L3cf24a.  if v0 != v1 then goto L3cf270;
  #L3cf24e.  v9.`l8.a.v` @type ^`int` := v2;
  #L3cf252.  v0:= v9.`l8.a.C` @type ^`int`[] @kind object;
  #L3cf256.  v1:= v9.`l8.a.A` @type ^`int`;
  #L3cf25a.  v1:= v1 + -1;
  #L3cf25e.  v2:= v0[v1];
  #L3cf262.  v2:= v2 + 1;
  #L3cf266.  v0[v1]:= v2;
  #L3cf26a.  v0:= v9.`l8.a.w` @type ^`long` @kind wide;
  #L3cf26e.  return v0 @kind wide;
  #L3cf270.  v1:= 16I;
  #L3cf274.  v3:= "Expected a long but was " @kind object;
  #L3cf278.  if v0 != v1 then goto L3cf2a6;
  #L3cf27c.  v0:= new `java.lang.String`;
  #L3cf280.  v1:= v9.`l8.a.q` @type ^`char`[] @kind object;
  #L3cf284.  v4:= v9.`l8.a.r` @type ^`int`;
  #L3cf288.  v5:= v9.`l8.a.x` @type ^`int`;
  #L3cf28c.  call `<init>`(v0, v1, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L3cf292.  v9.`l8.a.y` @type ^`java.lang.String` := v0 @kind object;
  #L3cf296.  v0:= v9.`l8.a.r` @type ^`int`;
  #L3cf29a.  v1:= v9.`l8.a.x` @type ^`int`;
  #L3cf29e.  v0:= v0 + v1 @kind int;
  #L3cf2a0.  v9.`l8.a.r` @type ^`int` := v0;
  #L3cf2a4.  goto L3cf356;
  #L3cf2a6.  v1:= 10I;
  #L3cf2aa.  v4:= 8I;
  #L3cf2ae.  if v0 == v4 then goto L3cf300;
  #L3cf2b2.  v5:= 9I;
  #L3cf2b6.  if v0 == v5 then goto L3cf300;
  #L3cf2ba.  if v0 != v1 then goto L3cf2c0;
  #L3cf2be.  goto L3cf300;
  #L3cf2c0.  v0:= new `java.lang.IllegalStateException`;
  #L3cf2c4.  v1:= new `java.lang.StringBuilder`;
  #L3cf2c8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cf2ce.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf2d4.  call temp:= `f0`(v9) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L3cf2da.  v2:= temp @kind object;
  #L3cf2dc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf2e2.  call temp:= `J`(v9) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3cf2e8.  v2:= temp @kind object;
  #L3cf2ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf2f0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cf2f6.  v1:= temp @kind object;
  #L3cf2f8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf2fe.  throw v0;
  #L3cf300.  if v0 != v1 then goto L3cf312;
  #L3cf304.  call temp:= `e0`(v9) @signature `Ll8/a;.e0:()Ljava/lang/String;` @kind direct;
  #L3cf30a.  v0:= temp @kind object;
  #L3cf30c.  v9.`l8.a.y` @type ^`java.lang.String` := v0 @kind object;
  #L3cf310.  goto L3cf32a;
  #L3cf312.  if v0 != v4 then goto L3cf31c;
  #L3cf316.  v0:= 39I;
  #L3cf31a.  goto L3cf320;
  #L3cf31c.  v0:= 34I;
  #L3cf320.  call temp:= `c0`(v9, v0) @signature `Ll8/a;.c0:(C)Ljava/lang/String;` @kind direct;
  #L3cf326.  v0:= temp @kind object;
  #L3cf328.  goto L3cf30c;
  #L3cf32a.  v0:= v9.`l8.a.y` @type ^`java.lang.String` @kind object;
  #L3cf32e.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L3cf334.  v0:= temp @kind wide;
  #L3cf336.  v9.`l8.a.v` @type ^`int` := v2;
  #L3cf33a.  v4:= v9.`l8.a.C` @type ^`int`[] @kind object;
  #L3cf33e.  v5:= v9.`l8.a.A` @type ^`int`;
  #L3cf342.  v5:= v5 + -1;
  #L3cf346.  v6:= v4[v5];
  #L3cf34a.  v6:= v6 + 1;
  #L3cf34e.  v4[v5]:= v6;
  #L3cf352.  return v0 @kind wide;
  #L3cf354.  
  #L3cf356.  v0:= 11I;
  #L3cf35a.  v9.`l8.a.v` @type ^`int` := v0;
  #L3cf35e.  v0:= v9.`l8.a.y` @type ^`java.lang.String` @kind object;
  #L3cf362.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L3cf368.  v0:= temp @kind wide;
  #L3cf36a.  v4:= (`long`) v0 @kind d2l;
  #L3cf36c.  v6:= (`double`) v4 @kind l2d;
  #L3cf36e.  v8:= dcmpl(v6, v0);
  #L3cf372.  if v8 != 0 then goto L3cf39a;
  #L3cf376.  v0:= 0I;
  #L3cf378.  v9.`l8.a.y` @type ^`java.lang.String` := v0 @kind object;
  #L3cf37c.  v9.`l8.a.v` @type ^`int` := v2;
  #L3cf380.  v0:= v9.`l8.a.C` @type ^`int`[] @kind object;
  #L3cf384.  v1:= v9.`l8.a.A` @type ^`int`;
  #L3cf388.  v1:= v1 + -1;
  #L3cf38c.  v2:= v0[v1];
  #L3cf390.  v2:= v2 + 1;
  #L3cf394.  v0[v1]:= v2;
  #L3cf398.  return v4 @kind wide;
  #L3cf39a.  v0:= new `java.lang.NumberFormatException`;
  #L3cf39e.  v1:= new `java.lang.StringBuilder`;
  #L3cf3a2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cf3a8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf3ae.  v2:= v9.`l8.a.y` @type ^`java.lang.String` @kind object;
  #L3cf3b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf3b8.  call temp:= `J`(v9) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3cf3be.  v2:= temp @kind object;
  #L3cf3c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf3c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cf3cc.  v1:= temp @kind object;
  #L3cf3ce.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf3d4.  throw v0;
  catch `java.lang.NumberFormatException` @[L3cf32a..L3cf352] goto L3cf354;
}
procedure `java.lang.String` `S`(`l8.a` v3 @kind this) @signature `Ll8/a;.S:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ced04.  v0:= v3.`l8.a.v` @type ^`int`;
  #L3ced08.  if v0 != 0 then goto L3ced14;
  #L3ced0c.  call temp:= `i`(v3) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3ced12.  v0:= temp;
  #L3ced14.  v1:= 14I;
  #L3ced18.  if v0 != v1 then goto L3ced26;
  #L3ced1c.  call temp:= `e0`(v3) @signature `Ll8/a;.e0:()Ljava/lang/String;` @kind direct;
  #L3ced22.  v0:= temp @kind object;
  #L3ced24.  goto L3ced4a;
  #L3ced26.  v1:= 12I;
  #L3ced2a.  if v0 != v1 then goto L3ced3c;
  #L3ced2e.  v0:= 39I;
  #L3ced32.  call temp:= `c0`(v3, v0) @signature `Ll8/a;.c0:(C)Ljava/lang/String;` @kind direct;
  #L3ced38.  v0:= temp @kind object;
  #L3ced3a.  goto L3ced4a;
  #L3ced3c.  v1:= 13I;
  #L3ced40.  if v0 != v1 then goto L3ced62;
  #L3ced44.  v0:= 34I;
  #L3ced48.  goto L3ced32;
  #L3ced4a.  v1:= 0I;
  #L3ced4c.  v3.`l8.a.v` @type ^`int` := v1;
  #L3ced50.  v1:= v3.`l8.a.B` @type ^`java.lang.String`[] @kind object;
  #L3ced54.  v2:= v3.`l8.a.A` @type ^`int`;
  #L3ced58.  v2:= v2 + -1;
  #L3ced5c.  v1[v2]:= v0 @kind object;
  #L3ced60.  return v0 @kind object;
  #L3ced62.  v0:= new `java.lang.IllegalStateException`;
  #L3ced66.  v1:= new `java.lang.StringBuilder`;
  #L3ced6a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ced70.  v2:= "Expected a name but was " @kind object;
  #L3ced74.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ced7a.  call temp:= `f0`(v3) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L3ced80.  v2:= temp @kind object;
  #L3ced82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ced88.  call temp:= `J`(v3) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3ced8e.  v2:= temp @kind object;
  #L3ced90.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ced96.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ced9c.  v1:= temp @kind object;
  #L3ced9e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ceda4.  throw v0;
}
procedure `void` `a`(`l8.a` v3 @kind this) @signature `Ll8/a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cf494.  v0:= v3.`l8.a.v` @type ^`int`;
  #L3cf498.  if v0 != 0 then goto L3cf4a4;
  #L3cf49c.  call temp:= `i`(v3) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3cf4a2.  v0:= temp;
  #L3cf4a4.  v1:= 3I;
  #L3cf4a6.  if v0 != v1 then goto L3cf4c8;
  #L3cf4aa.  v0:= 1I;
  #L3cf4ac.  call `i0`(v3, v0) @signature `Ll8/a;.i0:(I)V` @kind direct;
  #L3cf4b2.  v1:= v3.`l8.a.C` @type ^`int`[] @kind object;
  #L3cf4b6.  v2:= v3.`l8.a.A` @type ^`int`;
  #L3cf4ba.  v2:= v2 - v0 @kind int;
  #L3cf4bc.  v0:= 0I;
  #L3cf4be.  v1[v2]:= v0;
  #L3cf4c2.  v3.`l8.a.v` @type ^`int` := v0;
  #L3cf4c6.  return @kind void;
  #L3cf4c8.  v0:= new `java.lang.IllegalStateException`;
  #L3cf4cc.  v1:= new `java.lang.StringBuilder`;
  #L3cf4d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cf4d6.  v2:= "Expected BEGIN_ARRAY but was " @kind object;
  #L3cf4da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf4e0.  call temp:= `f0`(v3) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L3cf4e6.  v2:= temp @kind object;
  #L3cf4e8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf4ee.  call temp:= `J`(v3) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3cf4f4.  v2:= temp @kind object;
  #L3cf4f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf4fc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cf502.  v1:= temp @kind object;
  #L3cf504.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf50a.  throw v0;
}
procedure `void` `b0`(`l8.a` v3 @kind this) @signature `Ll8/a;.b0:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cf7c0.  v0:= v3.`l8.a.v` @type ^`int`;
  #L3cf7c4.  if v0 != 0 then goto L3cf7d0;
  #L3cf7c8.  call temp:= `i`(v3) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3cf7ce.  v0:= temp;
  #L3cf7d0.  v1:= 7I;
  #L3cf7d2.  if v0 != v1 then goto L3cf7f6;
  #L3cf7d6.  v0:= 0I;
  #L3cf7d8.  v3.`l8.a.v` @type ^`int` := v0;
  #L3cf7dc.  v0:= v3.`l8.a.C` @type ^`int`[] @kind object;
  #L3cf7e0.  v1:= v3.`l8.a.A` @type ^`int`;
  #L3cf7e4.  v1:= v1 + -1;
  #L3cf7e8.  v2:= v0[v1];
  #L3cf7ec.  v2:= v2 + 1;
  #L3cf7f0.  v0[v1]:= v2;
  #L3cf7f4.  return @kind void;
  #L3cf7f6.  v0:= new `java.lang.IllegalStateException`;
  #L3cf7fa.  v1:= new `java.lang.StringBuilder`;
  #L3cf7fe.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cf804.  v2:= "Expected null but was " @kind object;
  #L3cf808.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf80e.  call temp:= `f0`(v3) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L3cf814.  v2:= temp @kind object;
  #L3cf816.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf81c.  call temp:= `J`(v3) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3cf822.  v2:= temp @kind object;
  #L3cf824.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf82a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cf830.  v1:= temp @kind object;
  #L3cf832.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf838.  throw v0;
}
procedure `void` `c`(`l8.a` v3 @kind this) @signature `Ll8/a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cf51c.  v0:= v3.`l8.a.v` @type ^`int`;
  #L3cf520.  if v0 != 0 then goto L3cf52c;
  #L3cf524.  call temp:= `i`(v3) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3cf52a.  v0:= temp;
  #L3cf52c.  v1:= 1I;
  #L3cf52e.  if v0 != v1 then goto L3cf542;
  #L3cf532.  v0:= 3I;
  #L3cf534.  call `i0`(v3, v0) @signature `Ll8/a;.i0:(I)V` @kind direct;
  #L3cf53a.  v0:= 0I;
  #L3cf53c.  v3.`l8.a.v` @type ^`int` := v0;
  #L3cf540.  return @kind void;
  #L3cf542.  v0:= new `java.lang.IllegalStateException`;
  #L3cf546.  v1:= new `java.lang.StringBuilder`;
  #L3cf54a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cf550.  v2:= "Expected BEGIN_OBJECT but was " @kind object;
  #L3cf554.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf55a.  call temp:= `f0`(v3) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L3cf560.  v2:= temp @kind object;
  #L3cf562.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf568.  call temp:= `J`(v3) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3cf56e.  v2:= temp @kind object;
  #L3cf570.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf576.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cf57c.  v1:= temp @kind object;
  #L3cf57e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf584.  throw v0;
}
procedure `void` `close`(`l8.a` v3 @kind this) @signature `Ll8/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cf5c0.  v0:= 0I;
  #L3cf5c2.  v3.`l8.a.v` @type ^`int` := v0;
  #L3cf5c6.  v1:= v3.`l8.a.z` @type ^`int`[] @kind object;
  #L3cf5ca.  v2:= 8I;
  #L3cf5ce.  v1[v0]:= v2;
  #L3cf5d2.  v0:= 1I;
  #L3cf5d4.  v3.`l8.a.A` @type ^`int` := v0;
  #L3cf5d8.  v0:= v3.`l8.a.o` @type ^`java.io.Reader` @kind object;
  #L3cf5dc.  call `close`(v0) @signature `Ljava/io/Reader;.close:()V` @kind virtual;
  #L3cf5e2.  return @kind void;
}
procedure `java.lang.String` `d0`(`l8.a` v4 @kind this) @signature `Ll8/a;.d0:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ceec4.  v0:= v4.`l8.a.v` @type ^`int`;
  #L3ceec8.  if v0 != 0 then goto L3ceed4;
  #L3ceecc.  call temp:= `i`(v4) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3ceed2.  v0:= temp;
  #L3ceed4.  v1:= 10I;
  #L3ceed8.  if v0 != v1 then goto L3ceee6;
  #L3ceedc.  call temp:= `e0`(v4) @signature `Ll8/a;.e0:()Ljava/lang/String;` @kind direct;
  #L3ceee2.  v0:= temp @kind object;
  #L3ceee4.  goto L3cef60;
  #L3ceee6.  v1:= 8I;
  #L3ceeea.  if v0 != v1 then goto L3ceefc;
  #L3ceeee.  v0:= 39I;
  #L3ceef2.  call temp:= `c0`(v4, v0) @signature `Ll8/a;.c0:(C)Ljava/lang/String;` @kind direct;
  #L3ceef8.  v0:= temp @kind object;
  #L3ceefa.  goto L3cef60;
  #L3ceefc.  v1:= 9I;
  #L3cef00.  if v0 != v1 then goto L3cef0a;
  #L3cef04.  v0:= 34I;
  #L3cef08.  goto L3ceef2;
  #L3cef0a.  v1:= 11I;
  #L3cef0e.  if v0 != v1 then goto L3cef1e;
  #L3cef12.  v0:= v4.`l8.a.y` @type ^`java.lang.String` @kind object;
  #L3cef16.  v1:= 0I;
  #L3cef18.  v4.`l8.a.y` @type ^`java.lang.String` := v1 @kind object;
  #L3cef1c.  goto L3cef60;
  #L3cef1e.  v1:= 15I;
  #L3cef22.  if v0 != v1 then goto L3cef34;
  #L3cef26.  v0:= v4.`l8.a.w` @type ^`long` @kind wide;
  #L3cef2a.  call temp:= `toString`(v0) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L3cef30.  v0:= temp @kind object;
  #L3cef32.  goto L3cef60;
  #L3cef34.  v1:= 16I;
  #L3cef38.  if v0 != v1 then goto L3cef80;
  #L3cef3c.  v0:= new `java.lang.String`;
  #L3cef40.  v1:= v4.`l8.a.q` @type ^`char`[] @kind object;
  #L3cef44.  v2:= v4.`l8.a.r` @type ^`int`;
  #L3cef48.  v3:= v4.`l8.a.x` @type ^`int`;
  #L3cef4c.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L3cef52.  v1:= v4.`l8.a.r` @type ^`int`;
  #L3cef56.  v2:= v4.`l8.a.x` @type ^`int`;
  #L3cef5a.  v1:= v1 + v2 @kind int;
  #L3cef5c.  v4.`l8.a.r` @type ^`int` := v1;
  #L3cef60.  v1:= 0I;
  #L3cef62.  v4.`l8.a.v` @type ^`int` := v1;
  #L3cef66.  v1:= v4.`l8.a.C` @type ^`int`[] @kind object;
  #L3cef6a.  v2:= v4.`l8.a.A` @type ^`int`;
  #L3cef6e.  v2:= v2 + -1;
  #L3cef72.  v3:= v1[v2];
  #L3cef76.  v3:= v3 + 1;
  #L3cef7a.  v1[v2]:= v3;
  #L3cef7e.  return v0 @kind object;
  #L3cef80.  v0:= new `java.lang.IllegalStateException`;
  #L3cef84.  v1:= new `java.lang.StringBuilder`;
  #L3cef88.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cef8e.  v2:= "Expected a string but was " @kind object;
  #L3cef92.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cef98.  call temp:= `f0`(v4) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L3cef9e.  v2:= temp @kind object;
  #L3cefa0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cefa6.  call temp:= `J`(v4) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3cefac.  v2:= temp @kind object;
  #L3cefae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cefb4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cefba.  v1:= temp @kind object;
  #L3cefbc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cefc2.  throw v0;
}
procedure `l8.b` `f0`(`l8.a` v1 @kind this) @signature `Ll8/a;.f0:()Ll8/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cf178.  v0:= v1.`l8.a.v` @type ^`int`;
  #L3cf17c.  if v0 != 0 then goto L3cf188;
  #L3cf180.  call temp:= `i`(v1) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3cf186.  v0:= temp;
  #L3cf188.  goto L3cf1d8;
  #L3cf18e.  v0:= new `java.lang.AssertionError`;
  #L3cf192.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3cf198.  throw v0;
  #L3cf19a.  v0:= `@@l8.b.x` @type ^`l8.b` @kind object;
  #L3cf19e.  return v0 @kind object;
  #L3cf1a0.  v0:= `@@l8.b.u` @type ^`l8.b` @kind object;
  #L3cf1a4.  return v0 @kind object;
  #L3cf1a6.  v0:= `@@l8.b.s` @type ^`l8.b` @kind object;
  #L3cf1aa.  return v0 @kind object;
  #L3cf1ac.  v0:= `@@l8.b.t` @type ^`l8.b` @kind object;
  #L3cf1b0.  return v0 @kind object;
  #L3cf1b2.  v0:= `@@l8.b.w` @type ^`l8.b` @kind object;
  #L3cf1b6.  return v0 @kind object;
  #L3cf1b8.  v0:= `@@l8.b.v` @type ^`l8.b` @kind object;
  #L3cf1bc.  return v0 @kind object;
  #L3cf1be.  v0:= `@@l8.b.p` @type ^`l8.b` @kind object;
  #L3cf1c2.  return v0 @kind object;
  #L3cf1c4.  v0:= `@@l8.b.o` @type ^`l8.b` @kind object;
  #L3cf1c8.  return v0 @kind object;
  #L3cf1ca.  v0:= `@@l8.b.r` @type ^`l8.b` @kind object;
  #L3cf1ce.  return v0 @kind object;
  #L3cf1d0.  v0:= `@@l8.b.q` @type ^`l8.b` @kind object;
  #L3cf1d4.  return v0 @kind object;
  #L3cf1d6.  
  #L3cf1d8.  switch v0
                  | 1 => goto L3cf1d0
                  | 2 => goto L3cf1ca
                  | 3 => goto L3cf1c4
                  | 4 => goto L3cf1be
                  | 5 => goto L3cf1b8
                  | 6 => goto L3cf1b8
                  | 7 => goto L3cf1b2
                  | 8 => goto L3cf1ac
                  | 9 => goto L3cf1ac
                  | 10 => goto L3cf1ac
                  | 11 => goto L3cf1ac
                  | 12 => goto L3cf1a6
                  | 13 => goto L3cf1a6
                  | 14 => goto L3cf1a6
                  | 15 => goto L3cf1a0
                  | 16 => goto L3cf1a0
                  | 17 => goto L3cf19a
                  | else => goto L3cf18e;
}
procedure `int` `i`(`l8.a` v15 @kind this) @signature `Ll8/a;.i:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L3ce228.  v0:= v15.`l8.a.z` @type ^`int`[] @kind object;
  #L3ce22c.  v1:= v15.`l8.a.A` @type ^`int`;
  #L3ce230.  v2:= v1 + -1;
  #L3ce234.  v2:= v0[v2];
  #L3ce238.  v3:= 8I;
  #L3ce23c.  v4:= 39I;
  #L3ce240.  v5:= 34I;
  #L3ce244.  v6:= 93I;
  #L3ce248.  v7:= 3I;
  #L3ce24a.  v8:= 7I;
  #L3ce24c.  v9:= 59I;
  #L3ce250.  v10:= 44I;
  #L3ce254.  v11:= 4I;
  #L3ce256.  v12:= 2I;
  #L3ce258.  v13:= 1I;
  #L3ce25a.  if v2 != v13 then goto L3ce268;
  #L3ce25e.  v1:= v1 - v13 @kind int;
  #L3ce260.  v0[v1]:= v12;
  #L3ce264.  goto L3ce36c;
  #L3ce268.  if v2 != v12 then goto L3ce29c;
  #L3ce26c.  call temp:= `a0`(v15, v13) @signature `Ll8/a;.a0:(Z)I` @kind direct;
  #L3ce272.  v0:= temp;
  #L3ce274.  if v0 == v10 then goto L3ce36c;
  #L3ce278.  if v0 == v9 then goto L3ce294;
  #L3ce27c.  if v0 != v6 then goto L3ce286;
  #L3ce280.  v15.`l8.a.v` @type ^`int` := v11;
  #L3ce284.  return v11;
  #L3ce286.  v0:= "Unterminated array" @kind object;
  #L3ce28a.  call temp:= `q0`(v15, v0) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3ce290.  v0:= temp @kind object;
  #L3ce292.  throw v0;
  #L3ce294.  call `e`(v15) @signature `Ll8/a;.e:()V` @kind direct;
  #L3ce29a.  goto L3ce36c;
  #L3ce29c.  v14:= 5I;
  #L3ce29e.  if v2 == v7 then goto L3ce456;
  #L3ce2a2.  if v2 != v14 then goto L3ce2aa;
  #L3ce2a6.  goto L3ce456;
  #L3ce2aa.  if v2 != v11 then goto L3ce314;
  #L3ce2ae.  v1:= v1 - v13 @kind int;
  #L3ce2b0.  v0[v1]:= v14;
  #L3ce2b4.  call temp:= `a0`(v15, v13) @signature `Ll8/a;.a0:(Z)I` @kind direct;
  #L3ce2ba.  v0:= temp;
  #L3ce2bc.  v1:= 58I;
  #L3ce2c0.  if v0 == v1 then goto L3ce36c;
  #L3ce2c4.  v1:= 61I;
  #L3ce2c8.  if v0 != v1 then goto L3ce306;
  #L3ce2cc.  call `e`(v15) @signature `Ll8/a;.e:()V` @kind direct;
  #L3ce2d2.  v0:= v15.`l8.a.r` @type ^`int`;
  #L3ce2d6.  v1:= v15.`l8.a.s` @type ^`int`;
  #L3ce2da.  if v0 < v1 then goto L3ce2ea;
  #L3ce2de.  call temp:= `s`(v15, v13) @signature `Ll8/a;.s:(I)Z` @kind direct;
  #L3ce2e4.  v0:= temp;
  #L3ce2e6.  if v0 == 0 then goto L3ce36c;
  #L3ce2ea.  v0:= v15.`l8.a.q` @type ^`char`[] @kind object;
  #L3ce2ee.  v1:= v15.`l8.a.r` @type ^`int`;
  #L3ce2f2.  v0:= v0[v1] @kind char;
  #L3ce2f6.  v14:= 62I;
  #L3ce2fa.  if v0 != v14 then goto L3ce36c;
  #L3ce2fe.  v1:= v1 + v13 @kind int;
  #L3ce300.  v15.`l8.a.r` @type ^`int` := v1;
  #L3ce304.  goto L3ce36c;
  #L3ce306.  v0:= "Expected ':'" @kind object;
  #L3ce30a.  call temp:= `q0`(v15, v0) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3ce310.  v0:= temp @kind object;
  #L3ce312.  throw v0;
  #L3ce314.  v0:= 6I;
  #L3ce316.  if v2 != v0 then goto L3ce338;
  #L3ce31a.  v0:= v15.`l8.a.p` @type ^`boolean` @kind boolean;
  #L3ce31e.  if v0 == 0 then goto L3ce328;
  #L3ce322.  call `h`(v15) @signature `Ll8/a;.h:()V` @kind direct;
  #L3ce328.  v0:= v15.`l8.a.z` @type ^`int`[] @kind object;
  #L3ce32c.  v1:= v15.`l8.a.A` @type ^`int`;
  #L3ce330.  v1:= v1 - v13 @kind int;
  #L3ce332.  v0[v1]:= v8;
  #L3ce336.  goto L3ce36c;
  #L3ce338.  if v2 != v8 then goto L3ce368;
  #L3ce33c.  v0:= 0I;
  #L3ce33e.  call temp:= `a0`(v15, v0) @signature `Ll8/a;.a0:(Z)I` @kind direct;
  #L3ce344.  v0:= temp;
  #L3ce346.  v1:= -1I;
  #L3ce348.  if v0 != v1 then goto L3ce356;
  #L3ce34c.  v0:= 17I;
  #L3ce350.  v15.`l8.a.v` @type ^`int` := v0;
  #L3ce354.  return v0;
  #L3ce356.  call `e`(v15) @signature `Ll8/a;.e:()V` @kind direct;
  #L3ce35c.  v0:= v15.`l8.a.r` @type ^`int`;
  #L3ce360.  v0:= v0 - v13 @kind int;
  #L3ce362.  v15.`l8.a.r` @type ^`int` := v0;
  #L3ce366.  goto L3ce36c;
  #L3ce368.  if v2 == v3 then goto L3ce446;
  #L3ce36c.  call temp:= `a0`(v15, v13) @signature `Ll8/a;.a0:(Z)I` @kind direct;
  #L3ce372.  v0:= temp;
  #L3ce374.  if v0 == v5 then goto L3ce440;
  #L3ce378.  if v0 == v4 then goto L3ce434;
  #L3ce37c.  if v0 == v10 then goto L3ce406;
  #L3ce380.  if v0 == v9 then goto L3ce406;
  #L3ce384.  v1:= 91I;
  #L3ce388.  if v0 == v1 then goto L3ce400;
  #L3ce38c.  if v0 == v6 then goto L3ce3f6;
  #L3ce390.  v1:= 123I;
  #L3ce394.  if v0 == v1 then goto L3ce3f0;
  #L3ce398.  v0:= v15.`l8.a.r` @type ^`int`;
  #L3ce39c.  v0:= v0 - v13 @kind int;
  #L3ce39e.  v15.`l8.a.r` @type ^`int` := v0;
  #L3ce3a2.  call temp:= `g0`(v15) @signature `Ll8/a;.g0:()I` @kind direct;
  #L3ce3a8.  v0:= temp;
  #L3ce3aa.  if v0 == 0 then goto L3ce3b0;
  #L3ce3ae.  return v0;
  #L3ce3b0.  call temp:= `h0`(v15) @signature `Ll8/a;.h0:()I` @kind direct;
  #L3ce3b6.  v0:= temp;
  #L3ce3b8.  if v0 == 0 then goto L3ce3be;
  #L3ce3bc.  return v0;
  #L3ce3be.  v0:= v15.`l8.a.q` @type ^`char`[] @kind object;
  #L3ce3c2.  v1:= v15.`l8.a.r` @type ^`int`;
  #L3ce3c6.  v0:= v0[v1] @kind char;
  #L3ce3ca.  call temp:= `G`(v15, v0) @signature `Ll8/a;.G:(C)Z` @kind direct;
  #L3ce3d0.  v0:= temp;
  #L3ce3d2.  if v0 == 0 then goto L3ce3e2;
  #L3ce3d6.  call `e`(v15) @signature `Ll8/a;.e:()V` @kind direct;
  #L3ce3dc.  v0:= 10I;
  #L3ce3e0.  goto L3ce350;
  #L3ce3e2.  v0:= "Expected value" @kind object;
  #L3ce3e6.  call temp:= `q0`(v15, v0) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3ce3ec.  v0:= temp @kind object;
  #L3ce3ee.  throw v0;
  #L3ce3f0.  v15.`l8.a.v` @type ^`int` := v13;
  #L3ce3f4.  return v13;
  #L3ce3f6.  if v2 != v13 then goto L3ce406;
  #L3ce3fa.  v15.`l8.a.v` @type ^`int` := v11;
  #L3ce3fe.  return v11;
  #L3ce400.  v15.`l8.a.v` @type ^`int` := v7;
  #L3ce404.  return v7;
  #L3ce406.  if v2 == v13 then goto L3ce41e;
  #L3ce40a.  if v2 != v12 then goto L3ce410;
  #L3ce40e.  goto L3ce41e;
  #L3ce410.  v0:= "Unexpected value" @kind object;
  #L3ce414.  call temp:= `q0`(v15, v0) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3ce41a.  v0:= temp @kind object;
  #L3ce41c.  throw v0;
  #L3ce41e.  call `e`(v15) @signature `Ll8/a;.e:()V` @kind direct;
  #L3ce424.  v0:= v15.`l8.a.r` @type ^`int`;
  #L3ce428.  v0:= v0 - v13 @kind int;
  #L3ce42a.  v15.`l8.a.r` @type ^`int` := v0;
  #L3ce42e.  v15.`l8.a.v` @type ^`int` := v8;
  #L3ce432.  return v8;
  #L3ce434.  call `e`(v15) @signature `Ll8/a;.e:()V` @kind direct;
  #L3ce43a.  v15.`l8.a.v` @type ^`int` := v3;
  #L3ce43e.  return v3;
  #L3ce440.  v0:= 9I;
  #L3ce444.  goto L3ce350;
  #L3ce446.  v0:= new `java.lang.IllegalStateException`;
  #L3ce44a.  v1:= "JsonReader is closed" @kind object;
  #L3ce44e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ce454.  throw v0;
  #L3ce456.  v1:= v1 - v13 @kind int;
  #L3ce458.  v0[v1]:= v11;
  #L3ce45c.  v0:= 125I;
  #L3ce460.  if v2 != v14 then goto L3ce492;
  #L3ce464.  call temp:= `a0`(v15, v13) @signature `Ll8/a;.a0:(Z)I` @kind direct;
  #L3ce46a.  v1:= temp;
  #L3ce46c.  if v1 == v10 then goto L3ce492;
  #L3ce470.  if v1 == v9 then goto L3ce48c;
  #L3ce474.  if v1 != v0 then goto L3ce47e;
  #L3ce478.  v15.`l8.a.v` @type ^`int` := v12;
  #L3ce47c.  return v12;
  #L3ce47e.  v0:= "Unterminated object" @kind object;
  #L3ce482.  call temp:= `q0`(v15, v0) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3ce488.  v0:= temp @kind object;
  #L3ce48a.  throw v0;
  #L3ce48c.  call `e`(v15) @signature `Ll8/a;.e:()V` @kind direct;
  #L3ce492.  call temp:= `a0`(v15, v13) @signature `Ll8/a;.a0:(Z)I` @kind direct;
  #L3ce498.  v1:= temp;
  #L3ce49a.  if v1 == v5 then goto L3ce4fc;
  #L3ce49e.  if v1 == v4 then goto L3ce4ee;
  #L3ce4a2.  v3:= "Expected name" @kind object;
  #L3ce4a6.  if v1 == v0 then goto L3ce4da;
  #L3ce4aa.  call `e`(v15) @signature `Ll8/a;.e:()V` @kind direct;
  #L3ce4b0.  v0:= v15.`l8.a.r` @type ^`int`;
  #L3ce4b4.  v0:= v0 - v13 @kind int;
  #L3ce4b6.  v15.`l8.a.r` @type ^`int` := v0;
  #L3ce4ba.  v0:= (`char`) v1 @kind i2c;
  #L3ce4bc.  call temp:= `G`(v15, v0) @signature `Ll8/a;.G:(C)Z` @kind direct;
  #L3ce4c2.  v0:= temp;
  #L3ce4c4.  if v0 == 0 then goto L3ce4d0;
  #L3ce4c8.  v0:= 14I;
  #L3ce4cc.  goto L3ce350;
  #L3ce4d0.  call temp:= `q0`(v15, v3) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3ce4d6.  v0:= temp @kind object;
  #L3ce4d8.  throw v0;
  #L3ce4da.  if v2 == v14 then goto L3ce4e4;
  #L3ce4de.  v15.`l8.a.v` @type ^`int` := v12;
  #L3ce4e2.  return v12;
  #L3ce4e4.  call temp:= `q0`(v15, v3) @signature `Ll8/a;.q0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L3ce4ea.  v0:= temp @kind object;
  #L3ce4ec.  throw v0;
  #L3ce4ee.  call `e`(v15) @signature `Ll8/a;.e:()V` @kind direct;
  #L3ce4f4.  v0:= 12I;
  #L3ce4f8.  goto L3ce350;
  #L3ce4fc.  v0:= 13I;
  #L3ce500.  goto L3ce350;
}
procedure `void` `k`(`l8.a` v3 @kind this) @signature `Ll8/a;.k:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cf690.  v0:= v3.`l8.a.v` @type ^`int`;
  #L3cf694.  if v0 != 0 then goto L3cf6a0;
  #L3cf698.  call temp:= `i`(v3) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3cf69e.  v0:= temp;
  #L3cf6a0.  v1:= 4I;
  #L3cf6a2.  if v0 != v1 then goto L3cf6ce;
  #L3cf6a6.  v0:= v3.`l8.a.A` @type ^`int`;
  #L3cf6aa.  v0:= v0 + -1;
  #L3cf6ae.  v3.`l8.a.A` @type ^`int` := v0;
  #L3cf6b2.  v1:= v3.`l8.a.C` @type ^`int`[] @kind object;
  #L3cf6b6.  v0:= v0 + -1;
  #L3cf6ba.  v2:= v1[v0];
  #L3cf6be.  v2:= v2 + 1;
  #L3cf6c2.  v1[v0]:= v2;
  #L3cf6c6.  v0:= 0I;
  #L3cf6c8.  v3.`l8.a.v` @type ^`int` := v0;
  #L3cf6cc.  return @kind void;
  #L3cf6ce.  v0:= new `java.lang.IllegalStateException`;
  #L3cf6d2.  v1:= new `java.lang.StringBuilder`;
  #L3cf6d6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cf6dc.  v2:= "Expected END_ARRAY but was " @kind object;
  #L3cf6e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf6e6.  call temp:= `f0`(v3) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L3cf6ec.  v2:= temp @kind object;
  #L3cf6ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf6f4.  call temp:= `J`(v3) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3cf6fa.  v2:= temp @kind object;
  #L3cf6fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf702.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cf708.  v1:= temp @kind object;
  #L3cf70a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf710.  throw v0;
}
procedure `void` `k0`(`l8.a` v0 @kind this, `boolean` v1 ) @signature `Ll8/a;.k0:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3cf8b4.  v0.`l8.a.p` @type ^`boolean` := v1 @kind boolean;
  #L3cf8b8.  return @kind void;
}
procedure `void` `o`(`l8.a` v3 @kind this) @signature `Ll8/a;.o:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cf724.  v0:= v3.`l8.a.v` @type ^`int`;
  #L3cf728.  if v0 != 0 then goto L3cf734;
  #L3cf72c.  call temp:= `i`(v3) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3cf732.  v0:= temp;
  #L3cf734.  v1:= 2I;
  #L3cf736.  if v0 != v1 then goto L3cf76c;
  #L3cf73a.  v0:= v3.`l8.a.A` @type ^`int`;
  #L3cf73e.  v0:= v0 + -1;
  #L3cf742.  v3.`l8.a.A` @type ^`int` := v0;
  #L3cf746.  v1:= v3.`l8.a.B` @type ^`java.lang.String`[] @kind object;
  #L3cf74a.  v2:= 0I;
  #L3cf74c.  v1[v0]:= v2 @kind object;
  #L3cf750.  v1:= v3.`l8.a.C` @type ^`int`[] @kind object;
  #L3cf754.  v0:= v0 + -1;
  #L3cf758.  v2:= v1[v0];
  #L3cf75c.  v2:= v2 + 1;
  #L3cf760.  v1[v0]:= v2;
  #L3cf764.  v0:= 0I;
  #L3cf766.  v3.`l8.a.v` @type ^`int` := v0;
  #L3cf76a.  return @kind void;
  #L3cf76c.  v0:= new `java.lang.IllegalStateException`;
  #L3cf770.  v1:= new `java.lang.StringBuilder`;
  #L3cf774.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cf77a.  v2:= "Expected END_OBJECT but was " @kind object;
  #L3cf77e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf784.  call temp:= `f0`(v3) @signature `Ll8/a;.f0:()Ll8/b;` @kind virtual;
  #L3cf78a.  v2:= temp @kind object;
  #L3cf78c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf792.  call temp:= `J`(v3) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3cf798.  v2:= temp @kind object;
  #L3cf79a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf7a0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cf7a6.  v1:= temp @kind object;
  #L3cf7a8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf7ae.  throw v0;
}
procedure `void` `p0`(`l8.a` v5 @kind this) @signature `Ll8/a;.p0:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3cfa8c.  v0:= 0I;
  #L3cfa8e.  v1:= 0I;
  #L3cfa90.  v2:= v5.`l8.a.v` @type ^`int`;
  #L3cfa94.  if v2 != 0 then goto L3cfaa0;
  #L3cfa98.  call temp:= `i`(v5) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3cfa9e.  v2:= temp;
  #L3cfaa0.  v3:= 3I;
  #L3cfaa2.  v4:= 1I;
  #L3cfaa4.  if v2 != v3 then goto L3cfab4;
  #L3cfaa8.  call `i0`(v5, v4) @signature `Ll8/a;.i0:(I)V` @kind direct;
  #L3cfaae.  v1:= v1 + 1;
  #L3cfab2.  goto L3cfb44;
  #L3cfab4.  if v2 != v4 then goto L3cfac0;
  #L3cfab8.  call `i0`(v5, v3) @signature `Ll8/a;.i0:(I)V` @kind direct;
  #L3cfabe.  goto L3cfaae;
  #L3cfac0.  v3:= 4I;
  #L3cfac2.  if v2 != v3 then goto L3cfad6;
  #L3cfac6.  v2:= v5.`l8.a.A` @type ^`int`;
  #L3cfaca.  v2:= v2 - v4 @kind int;
  #L3cfacc.  v5.`l8.a.A` @type ^`int` := v2;
  #L3cfad0.  v1:= v1 + -1;
  #L3cfad4.  goto L3cfb44;
  #L3cfad6.  v3:= 2I;
  #L3cfad8.  if v2 != v3 then goto L3cfade;
  #L3cfadc.  goto L3cfac6;
  #L3cfade.  v3:= 14I;
  #L3cfae2.  if v2 == v3 then goto L3cfb3e;
  #L3cfae6.  v3:= 10I;
  #L3cfaea.  if v2 != v3 then goto L3cfaf0;
  #L3cfaee.  goto L3cfb3e;
  #L3cfaf0.  v3:= 8I;
  #L3cfaf4.  if v2 == v3 then goto L3cfb32;
  #L3cfaf8.  v3:= 12I;
  #L3cfafc.  if v2 != v3 then goto L3cfb02;
  #L3cfb00.  goto L3cfb32;
  #L3cfb02.  v3:= 9I;
  #L3cfb06.  if v2 == v3 then goto L3cfb2c;
  #L3cfb0a.  v3:= 13I;
  #L3cfb0e.  if v2 != v3 then goto L3cfb14;
  #L3cfb12.  goto L3cfb2c;
  #L3cfb14.  v3:= 16I;
  #L3cfb18.  if v2 != v3 then goto L3cfb44;
  #L3cfb1c.  v2:= v5.`l8.a.r` @type ^`int`;
  #L3cfb20.  v3:= v5.`l8.a.x` @type ^`int`;
  #L3cfb24.  v2:= v2 + v3 @kind int;
  #L3cfb26.  v5.`l8.a.r` @type ^`int` := v2;
  #L3cfb2a.  goto L3cfb44;
  #L3cfb2c.  v2:= 34I;
  #L3cfb30.  goto L3cfb36;
  #L3cfb32.  v2:= 39I;
  #L3cfb36.  call `l0`(v5, v2) @signature `Ll8/a;.l0:(C)V` @kind direct;
  #L3cfb3c.  goto L3cfb44;
  #L3cfb3e.  call `o0`(v5) @signature `Ll8/a;.o0:()V` @kind direct;
  #L3cfb44.  v5.`l8.a.v` @type ^`int` := v0;
  #L3cfb48.  if v1 != 0 then goto L3cfa90;
  #L3cfb4c.  v0:= v5.`l8.a.C` @type ^`int`[] @kind object;
  #L3cfb50.  v1:= v5.`l8.a.A` @type ^`int`;
  #L3cfb54.  v2:= v1 + -1;
  #L3cfb58.  v3:= v0[v2];
  #L3cfb5c.  v3:= v3 + v4 @kind int;
  #L3cfb5e.  v0[v2]:= v3;
  #L3cfb62.  v0:= v5.`l8.a.B` @type ^`java.lang.String`[] @kind object;
  #L3cfb66.  v1:= v1 - v4 @kind int;
  #L3cfb68.  v2:= "null" @kind object;
  #L3cfb6c.  v0[v1]:= v2 @kind object;
  #L3cfb70.  return @kind void;
}
procedure `java.lang.String` `toString`(`l8.a` v2 @kind this) @signature `Ll8/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cf130.  v0:= new `java.lang.StringBuilder`;
  #L3cf134.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cf13a.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3cf140.  v1:= temp @kind object;
  #L3cf142.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L3cf148.  v1:= temp @kind object;
  #L3cf14a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf150.  call temp:= `J`(v2) @signature `Ll8/a;.J:()Ljava/lang/String;` @kind virtual;
  #L3cf156.  v1:= temp @kind object;
  #L3cf158.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf15e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cf164.  v0:= temp @kind object;
  #L3cf166.  return v0 @kind object;
}
procedure `java.lang.String` `v`(`l8.a` v5 @kind this) @signature `Ll8/a;.v:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3cebe4.  v0:= new `java.lang.StringBuilder`;
  #L3cebe8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cebee.  v1:= 36I;
  #L3cebf2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cebf8.  v1:= v5.`l8.a.A` @type ^`int`;
  #L3cebfc.  v2:= 0I;
  #L3cebfe.  if v2 >= v1 then goto L3cec74;
  #L3cec02.  v3:= v5.`l8.a.z` @type ^`int`[] @kind object;
  #L3cec06.  v3:= v3[v2];
  #L3cec0a.  v4:= 1I;
  #L3cec0c.  if v3 == v4 then goto L3cec4c;
  #L3cec10.  v4:= 2I;
  #L3cec12.  if v3 == v4 then goto L3cec4c;
  #L3cec16.  v4:= 3I;
  #L3cec18.  if v3 == v4 then goto L3cec2a;
  #L3cec1c.  v4:= 4I;
  #L3cec1e.  if v3 == v4 then goto L3cec2a;
  #L3cec22.  v4:= 5I;
  #L3cec24.  if v3 == v4 then goto L3cec2a;
  #L3cec28.  goto L3cec6e;
  #L3cec2a.  v3:= 46I;
  #L3cec2e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cec34.  v3:= v5.`l8.a.B` @type ^`java.lang.String`[] @kind object;
  #L3cec38.  v4:= v3[v2] @kind object;
  #L3cec3c.  if v4 == 0 then goto L3cec6e;
  #L3cec40.  v3:= v3[v2] @kind object;
  #L3cec44.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cec4a.  goto L3cec6e;
  #L3cec4c.  v3:= 91I;
  #L3cec50.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cec56.  v3:= v5.`l8.a.C` @type ^`int`[] @kind object;
  #L3cec5a.  v3:= v3[v2];
  #L3cec5e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cec64.  v3:= 93I;
  #L3cec68.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cec6e.  v2:= v2 + 1;
  #L3cec72.  goto L3cebfe;
  #L3cec74.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cec7a.  v0:= temp @kind object;
  #L3cec7c.  return v0 @kind object;
}
procedure `boolean` `x`(`l8.a` v2 @kind this) @signature `Ll8/a;.x:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cdcac.  v0:= v2.`l8.a.v` @type ^`int`;
  #L3cdcb0.  if v0 != 0 then goto L3cdcbc;
  #L3cdcb4.  call temp:= `i`(v2) @signature `Ll8/a;.i:()I` @kind virtual;
  #L3cdcba.  v0:= temp;
  #L3cdcbc.  v1:= 2I;
  #L3cdcbe.  if v0 == v1 then goto L3cdccc;
  #L3cdcc2.  v1:= 4I;
  #L3cdcc4.  if v0 == v1 then goto L3cdccc;
  #L3cdcc8.  v0:= 1I;
  #L3cdcca.  goto L3cdcce;
  #L3cdccc.  v0:= 0I;
  #L3cdcce.  return v0;
}
