record `xc.d` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Lxc/d;.a:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4f02d8.  if v0 >= v1 then goto L4f02e0;
  #L4f02dc.  v0:= -1I;
  #L4f02de.  return v0;
  #L4f02e0.  if v0 <= v1 then goto L4f02e8;
  #L4f02e4.  v0:= 1I;
  #L4f02e6.  return v0;
  #L4f02e8.  v0:= 0I;
  #L4f02ea.  return v0;
}
procedure `int` `b`(`long` v1 , `long` v3 ) @signature `Lxc/d;.b:(JJ)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f02fc.  v0:= lcmp(v1, v3);
  #L4f0300.  if v0 >= 0 then goto L4f0308;
  #L4f0304.  v1:= -1I;
  #L4f0306.  return v1;
  #L4f0308.  if v0 <= 0 then goto L4f0310;
  #L4f030c.  v1:= 1I;
  #L4f030e.  return v1;
  #L4f0310.  v1:= 0I;
  #L4f0312.  return v1;
}
procedure `boolean` `c`(`java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lxc/d;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f02a8.  v0:= 0I;
  #L4f02aa.  if v1 != 0 then goto L4f02b6;
  #L4f02ae.  if v2 != 0 then goto L4f02b4;
  #L4f02b2.  v0:= 1I;
  #L4f02b4.  return v0;
  #L4f02b6.  if v2 != 0 then goto L4f02bc;
  #L4f02ba.  return v0;
  #L4f02bc.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f02c2.  v1:= temp;
  #L4f02c4.  return v1;
}
procedure `int` `d`(`int` v0 , `int` v1 ) @signature `Lxc/d;.d:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4f0324.  if v0 < 0 then goto L4f032c;
  #L4f0328.  v0:= v0 / v1 @kind int;
  #L4f032a.  goto L4f0336;
  #L4f032c.  v0:= v0 + 1;
  #L4f0330.  v0:= v0 / v1 @kind int;
  #L4f0332.  v0:= v0 + -1;
  #L4f0336.  return v0;
}
procedure `long` `e`(`long` v3 , `long` v5 ) @signature `Lxc/d;.e:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4f04f0.  v0:= 0L;
  #L4f04f4.  v2:= lcmp(v3, v0);
  #L4f04f8.  if v2 < 0 then goto L4f0500;
  #L4f04fc.  v3:= v3 / v5 @kind long;
  #L4f04fe.  goto L4f050a;
  #L4f0500.  v0:= 1L;
  #L4f0504.  v3:= v3 + v0 @kind long;
  #L4f0506.  v3:= v3 / v5 @kind long;
  #L4f0508.  v3:= v3 - v0 @kind long;
  #L4f050a.  return v3 @kind wide;
}
procedure `int` `f`(`int` v0 , `int` v1 ) @signature `Lxc/d;.f:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4f0348.  v0:= v0 %% v1 @kind int;
  #L4f034a.  v0:= v0 + v1 @kind int;
  #L4f034c.  v0:= v0 %% v1 @kind int;
  #L4f034e.  return v0;
}
procedure `int` `g`(`long` v2 , `int` v4 ) @signature `Lxc/d;.g:(JI)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4f0360.  v0:= (`long`) v4 @kind i2l;
  #L4f0362.  v2:= v2 %% v0 @kind long;
  #L4f0364.  v2:= v2 + v0 @kind long;
  #L4f0366.  v2:= v2 %% v0 @kind long;
  #L4f0368.  v3:= (`int`) v2 @kind l2i;
  #L4f036a.  return v3;
}
procedure `long` `h`(`long` v0 , `long` v2 ) @signature `Lxc/d;.h:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4f051c.  v0:= v0 %% v2 @kind long;
  #L4f051e.  v0:= v0 + v2 @kind long;
  #L4f0520.  v0:= v0 %% v2 @kind long;
  #L4f0522.  return v0 @kind wide;
}
procedure `java.lang.Object` `i`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f04ac.  if v1 == 0 then goto L4f04b2;
  #L4f04b0.  return v1 @kind object;
  #L4f04b2.  v1:= new `java.lang.NullPointerException`;
  #L4f04b6.  v0:= new `java.lang.StringBuilder`;
  #L4f04ba.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f04c0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f04c6.  v2:= " must not be null" @kind object;
  #L4f04ca.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f04d0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f04d6.  v2:= temp @kind object;
  #L4f04d8.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f04de.  throw v1;
}
procedure `int` `j`(`int` v3 , `int` v4 ) @signature `Lxc/d;.j:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4f037c.  v0:= v3 + v4 @kind int;
  #L4f0380.  v1:= v3 ^~ v0 @kind int;
  #L4f0384.  if v1 >= 0 then goto L4f03d0;
  #L4f0388.  v1:= v3 ^~ v4 @kind int;
  #L4f038c.  if v1 >= 0 then goto L4f0392;
  #L4f0390.  goto L4f03d0;
  #L4f0392.  v0:= new `java.lang.ArithmeticException`;
  #L4f0396.  v1:= new `java.lang.StringBuilder`;
  #L4f039a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f03a0.  v2:= "Addition overflows an int: " @kind object;
  #L4f03a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f03aa.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f03b0.  v3:= " + " @kind object;
  #L4f03b4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f03ba.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f03c0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f03c6.  v3:= temp @kind object;
  #L4f03c8.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f03ce.  throw v0;
  #L4f03d0.  return v0;
}
procedure `long` `k`(`long` v7 , `long` v9 ) @signature `Lxc/d;.k:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f0534.  v0:= v7 + v9 @kind long;
  #L4f0538.  v2:= v7 ^~ v0 @kind long;
  #L4f053c.  v4:= 0L;
  #L4f0540.  v6:= lcmp(v2, v4);
  #L4f0544.  if v6 >= 0 then goto L4f0594;
  #L4f0548.  v2:= v7 ^~ v9 @kind long;
  #L4f054c.  v6:= lcmp(v2, v4);
  #L4f0550.  if v6 >= 0 then goto L4f0556;
  #L4f0554.  goto L4f0594;
  #L4f0556.  v0:= new `java.lang.ArithmeticException`;
  #L4f055a.  v1:= new `java.lang.StringBuilder`;
  #L4f055e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f0564.  v2:= "Addition overflows a long: " @kind object;
  #L4f0568.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f056e.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0574.  v7:= " + " @kind object;
  #L4f0578.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f057e.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0584.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f058a.  v7:= temp @kind object;
  #L4f058c.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f0592.  throw v0;
  #L4f0594.  return v0 @kind wide;
}
procedure `long` `l`(`long` v7 , `int` v9 ) @signature `Lxc/d;.l:(JI)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f05a8.  v0:= -1I;
  #L4f05aa.  v1:= " * " @kind object;
  #L4f05ae.  v2:= "Multiplication overflows a long: " @kind object;
  #L4f05b2.  if v9 == v0 then goto L4f0612;
  #L4f05b6.  if v9 == 0 then goto L4f060c;
  #L4f05ba.  v0:= 1I;
  #L4f05bc.  if v9 == v0 then goto L4f060a;
  #L4f05c0.  v3:= (`long`) v9 @kind i2l;
  #L4f05c2.  v5:= v7 * v3 @kind long;
  #L4f05c6.  v3:= v5 / v3 @kind long;
  #L4f05ca.  v0:= lcmp(v3, v7);
  #L4f05ce.  if v0 != 0 then goto L4f05d4;
  #L4f05d2.  return v5 @kind wide;
  #L4f05d4.  v0:= new `java.lang.ArithmeticException`;
  #L4f05d8.  v3:= new `java.lang.StringBuilder`;
  #L4f05dc.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f05e2.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f05e8.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f05ee.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f05f4.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f05fa.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f0600.  v7:= temp @kind object;
  #L4f0602.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f0608.  throw v0;
  #L4f060a.  return v7 @kind wide;
  #L4f060c.  v7:= 0L;
  #L4f0610.  return v7 @kind wide;
  #L4f0612.  v3:= -9223372036854775808L;
  #L4f0616.  v0:= lcmp(v7, v3);
  #L4f061a.  if v0 == 0 then goto L4f0622;
  #L4f061e.  v7:= -v7 @kind long;
  #L4f0620.  return v7 @kind wide;
  #L4f0622.  v0:= new `java.lang.ArithmeticException`;
  #L4f0626.  v3:= new `java.lang.StringBuilder`;
  #L4f062a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f0630.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0636.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f063c.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0642.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0648.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f064e.  v7:= temp @kind object;
  #L4f0650.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f0656.  throw v0;
}
procedure `long` `m`(`long` v7 , `long` v9 ) @signature `Lxc/d;.m:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f0668.  v0:= 1L;
  #L4f066c.  v2:= lcmp(v9, v0);
  #L4f0670.  if v2 != 0 then goto L4f0676;
  #L4f0674.  return v7 @kind wide;
  #L4f0676.  v2:= lcmp(v7, v0);
  #L4f067a.  if v2 != 0 then goto L4f0680;
  #L4f067e.  return v9 @kind wide;
  #L4f0680.  v0:= 0L;
  #L4f0684.  v2:= lcmp(v7, v0);
  #L4f0688.  if v2 == 0 then goto L4f070e;
  #L4f068c.  v2:= lcmp(v9, v0);
  #L4f0690.  if v2 != 0 then goto L4f0696;
  #L4f0694.  goto L4f070e;
  #L4f0696.  v0:= v7 * v9 @kind long;
  #L4f069a.  v2:= v0 / v9 @kind long;
  #L4f069e.  v4:= lcmp(v2, v7);
  #L4f06a2.  if v4 != 0 then goto L4f06d0;
  #L4f06a6.  v2:= -1L;
  #L4f06aa.  v4:= -9223372036854775808L;
  #L4f06ae.  v6:= lcmp(v7, v4);
  #L4f06b2.  if v6 != 0 then goto L4f06be;
  #L4f06b6.  v6:= lcmp(v9, v2);
  #L4f06ba.  if v6 == 0 then goto L4f06d0;
  #L4f06be.  v6:= lcmp(v9, v4);
  #L4f06c2.  if v6 != 0 then goto L4f06ce;
  #L4f06c6.  v4:= lcmp(v7, v2);
  #L4f06ca.  if v4 == 0 then goto L4f06d0;
  #L4f06ce.  return v0 @kind wide;
  #L4f06d0.  v0:= new `java.lang.ArithmeticException`;
  #L4f06d4.  v1:= new `java.lang.StringBuilder`;
  #L4f06d8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f06de.  v2:= "Multiplication overflows a long: " @kind object;
  #L4f06e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f06e8.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f06ee.  v7:= " * " @kind object;
  #L4f06f2.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f06f8.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f06fe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f0704.  v7:= temp @kind object;
  #L4f0706.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f070c.  throw v0;
  #L4f070e.  return v0 @kind wide;
}
procedure `int` `n`(`int` v3 , `int` v4 ) @signature `Lxc/d;.n:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4f03e4.  v0:= v3 - v4 @kind int;
  #L4f03e8.  v1:= v3 ^~ v0 @kind int;
  #L4f03ec.  if v1 >= 0 then goto L4f0438;
  #L4f03f0.  v1:= v3 ^~ v4 @kind int;
  #L4f03f4.  if v1 < 0 then goto L4f03fa;
  #L4f03f8.  goto L4f0438;
  #L4f03fa.  v0:= new `java.lang.ArithmeticException`;
  #L4f03fe.  v1:= new `java.lang.StringBuilder`;
  #L4f0402.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f0408.  v2:= "Subtraction overflows an int: " @kind object;
  #L4f040c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0412.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0418.  v3:= " - " @kind object;
  #L4f041c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0422.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0428.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f042e.  v3:= temp @kind object;
  #L4f0430.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f0436.  throw v0;
  #L4f0438.  return v0;
}
procedure `long` `o`(`long` v7 , `long` v9 ) @signature `Lxc/d;.o:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f0720.  v0:= v7 - v9 @kind long;
  #L4f0724.  v2:= v7 ^~ v0 @kind long;
  #L4f0728.  v4:= 0L;
  #L4f072c.  v6:= lcmp(v2, v4);
  #L4f0730.  if v6 >= 0 then goto L4f0780;
  #L4f0734.  v2:= v7 ^~ v9 @kind long;
  #L4f0738.  v6:= lcmp(v2, v4);
  #L4f073c.  if v6 < 0 then goto L4f0742;
  #L4f0740.  goto L4f0780;
  #L4f0742.  v0:= new `java.lang.ArithmeticException`;
  #L4f0746.  v1:= new `java.lang.StringBuilder`;
  #L4f074a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f0750.  v2:= "Subtraction overflows a long: " @kind object;
  #L4f0754.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f075a.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0760.  v7:= " - " @kind object;
  #L4f0764.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f076a.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0770.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f0776.  v7:= temp @kind object;
  #L4f0778.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f077e.  throw v0;
  #L4f0780.  return v0 @kind wide;
}
procedure `int` `p`(`long` v3 ) @signature `Lxc/d;.p:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4f044c.  v0:= 2147483647L;
  #L4f0452.  v2:= lcmp(v3, v0);
  #L4f0456.  if v2 > 0 then goto L4f046c;
  #L4f045a.  v0:= -2147483648L;
  #L4f0460.  v2:= lcmp(v3, v0);
  #L4f0464.  if v2 < 0 then goto L4f046c;
  #L4f0468.  v4:= (`int`) v3 @kind l2i;
  #L4f046a.  return v4;
  #L4f046c.  v0:= new `java.lang.ArithmeticException`;
  #L4f0470.  v1:= new `java.lang.StringBuilder`;
  #L4f0474.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f047a.  v2:= "Calculation overflows an int: " @kind object;
  #L4f047e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f0484.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f048a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f0490.  v3:= temp @kind object;
  #L4f0492.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f0498.  throw v0;
}
