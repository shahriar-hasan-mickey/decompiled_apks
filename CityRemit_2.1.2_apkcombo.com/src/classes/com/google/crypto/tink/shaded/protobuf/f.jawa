record `com.google.crypto.tink.shaded.protobuf.f` @kind class @AccessFlag ABSTRACT extends `com.google.crypto.tink.shaded.protobuf.g1` @kind interface {
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.f` v0 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/f;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2bd438.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bd43e.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.f` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.f$a` v1 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/f;.<init>:(Lcom/google/crypto/tink/shaded/protobuf/f$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2bd450.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/f;.<init>:()V` @kind direct;
  #L2bd456.  return @kind void;
}
procedure `com.google.crypto.tink.shaded.protobuf.f` `Q`(`java.nio.ByteBuffer` v1 @kind object, `boolean` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/f;.Q:(Ljava/nio/ByteBuffer;Z)Lcom/google/crypto/tink/shaded/protobuf/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2bd400.  call temp:= `hasArray`(v1) @signature `Ljava/nio/ByteBuffer;.hasArray:()Z` @kind virtual;
  #L2bd406.  v0:= temp;
  #L2bd408.  if v0 == 0 then goto L2bd418;
  #L2bd40c.  v0:= new `com.google.crypto.tink.shaded.protobuf.f$b`;
  #L2bd410.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/f$b;.<init>:(Ljava/nio/ByteBuffer;Z)V` @kind direct;
  #L2bd416.  return v0 @kind object;
  #L2bd418.  v1:= new `java.lang.IllegalArgumentException`;
  #L2bd41c.  v2:= "Direct buffers not yet supported" @kind object;
  #L2bd420.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bd426.  throw v1;
}
