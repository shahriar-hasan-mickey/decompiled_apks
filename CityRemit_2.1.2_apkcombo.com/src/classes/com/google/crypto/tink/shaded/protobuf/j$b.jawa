record `com.google.crypto.tink.shaded.protobuf.j$b` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.j` @kind class {
  `byte`[] `com.google.crypto.tink.shaded.protobuf.j$b.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.crypto.tink.shaded.protobuf.j$b.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.shaded.protobuf.j$b.f` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.j$b.g` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.j$b.h` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.j$b.i` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.j$b.j` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.shaded.protobuf.j$b.k` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.j$b.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.<init>:([BIIZ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2befec.  v0:= 0I;
  #L2befee.  call `<init>`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/j;.<init>:(Lcom/google/crypto/tink/shaded/protobuf/j$a;)V` @kind direct;
  #L2beff4.  v0:= 2147483647I;
  #L2beffa.  v1.`com.google.crypto.tink.shaded.protobuf.j$b.l` @type ^`int` := v0;
  #L2beffe.  v1.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] := v2 @kind object;
  #L2bf002.  v4:= v4 + v3 @kind int;
  #L2bf004.  v1.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int` := v4;
  #L2bf008.  v1.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v3;
  #L2bf00c.  v1.`com.google.crypto.tink.shaded.protobuf.j$b.i` @type ^`int` := v3;
  #L2bf010.  v1.`com.google.crypto.tink.shaded.protobuf.j$b.e` @type ^`boolean` := v5 @kind boolean;
  #L2bf014.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.j$b` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `com.google.crypto.tink.shaded.protobuf.j$a` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.<init>:([BIIZLcom/google/crypto/tink/shaded/protobuf/j$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2bf028.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.<init>:([BIIZ)V` @kind direct;
  #L2bf02e.  return @kind void;
}
procedure `void` `K`(`com.google.crypto.tink.shaded.protobuf.j$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.K:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2bf080.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2bf084.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.g` @type ^`int`;
  #L2bf088.  v0:= v0 + v1 @kind int;
  #L2bf08a.  v3.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int` := v0;
  #L2bf08e.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.i` @type ^`int`;
  #L2bf092.  v1:= v0 - v1 @kind int;
  #L2bf096.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.l` @type ^`int`;
  #L2bf09a.  if v1 <= v2 then goto L2bf0ac;
  #L2bf09e.  v1:= v1 - v2 @kind int;
  #L2bf0a0.  v3.`com.google.crypto.tink.shaded.protobuf.j$b.g` @type ^`int` := v1;
  #L2bf0a4.  v0:= v0 - v1 @kind int;
  #L2bf0a6.  v3.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int` := v0;
  #L2bf0aa.  goto L2bf0b2;
  #L2bf0ac.  v0:= 0I;
  #L2bf0ae.  v3.`com.google.crypto.tink.shaded.protobuf.j$b.g` @type ^`int` := v0;
  #L2bf0b2.  return @kind void;
}
procedure `void` `N`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.N:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2bf134.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2bf138.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2bf13c.  v0:= v0 - v1 @kind int;
  #L2bf13e.  v1:= 10I;
  #L2bf142.  if v0 < v1 then goto L2bf14e;
  #L2bf146.  call `O`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.O:()V` @kind direct;
  #L2bf14c.  goto L2bf154;
  #L2bf14e.  call `P`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.P:()V` @kind direct;
  #L2bf154.  return @kind void;
}
procedure `void` `O`(`com.google.crypto.tink.shaded.protobuf.j$b` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.O:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bf168.  v0:= 0I;
  #L2bf16a.  v1:= 10I;
  #L2bf16e.  if v0 >= v1 then goto L2bf192;
  #L2bf172.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] @kind object;
  #L2bf176.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2bf17a.  v3:= v2 + 1;
  #L2bf17e.  v4.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v3;
  #L2bf182.  v1:= v1[v2] @kind byte;
  #L2bf186.  if v1 < 0 then goto L2bf18c;
  #L2bf18a.  return @kind void;
  #L2bf18c.  v0:= v0 + 1;
  #L2bf190.  goto L2bf16a;
  #L2bf192.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.e:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bf198.  v0:= temp @kind object;
  #L2bf19a.  throw v0;
}
procedure `void` `P`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.P:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2bf1ac.  v0:= 0I;
  #L2bf1ae.  v1:= 10I;
  #L2bf1b2.  if v0 >= v1 then goto L2bf1ca;
  #L2bf1b6.  call temp:= `D`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.D:()B` @kind virtual;
  #L2bf1bc.  v1:= temp;
  #L2bf1be.  if v1 < 0 then goto L2bf1c4;
  #L2bf1c2.  return @kind void;
  #L2bf1c4.  v0:= v0 + 1;
  #L2bf1c8.  goto L2bf1ae;
  #L2bf1ca.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.e:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bf1d0.  v0:= temp @kind object;
  #L2bf1d2.  throw v0;
}
procedure `int` `A`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.A:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bebc0.  call temp:= `H`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.H:()I` @kind virtual;
  #L2bebc6.  v0:= temp;
  #L2bebc8.  return v0;
}
procedure `long` `B`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.B:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2befd0.  call temp:= `I`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.I:()J` @kind virtual;
  #L2befd6.  v0:= temp @kind wide;
  #L2befd8.  return v0 @kind wide;
}
procedure `boolean` `C`(`com.google.crypto.tink.shaded.protobuf.j$b` v4 @kind this, `int` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.C:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2be724.  call temp:= `b`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/u1;.b:(I)I` @kind static;
  #L2be72a.  v0:= temp;
  #L2be72c.  v1:= 1I;
  #L2be72e.  if v0 == 0 then goto L2be79e;
  #L2be732.  if v0 == v1 then goto L2be792;
  #L2be736.  v2:= 2I;
  #L2be738.  if v0 == v2 then goto L2be782;
  #L2be73c.  v2:= 3I;
  #L2be73e.  v3:= 4I;
  #L2be740.  if v0 == v2 then goto L2be764;
  #L2be744.  if v0 == v3 then goto L2be760;
  #L2be748.  v5:= 5I;
  #L2be74a.  if v0 != v5 then goto L2be756;
  #L2be74e.  call `M`(v4, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.M:(I)V` @kind virtual;
  #L2be754.  return v1;
  #L2be756.  call temp:= `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.d:()Lcom/google/crypto/tink/shaded/protobuf/c0$a;` @kind static;
  #L2be75c.  v5:= temp @kind object;
  #L2be75e.  throw v5;
  #L2be760.  v5:= 0I;
  #L2be762.  return v5;
  #L2be764.  call `L`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.L:()V` @kind virtual;
  #L2be76a.  call temp:= `a`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/u1;.a:(I)I` @kind static;
  #L2be770.  v5:= temp;
  #L2be772.  call temp:= `c`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/u1;.c:(II)I` @kind static;
  #L2be778.  v5:= temp;
  #L2be77a.  call `a`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.a:(I)V` @kind virtual;
  #L2be780.  return v1;
  #L2be782.  call temp:= `H`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.H:()I` @kind virtual;
  #L2be788.  v5:= temp;
  #L2be78a.  call `M`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.M:(I)V` @kind virtual;
  #L2be790.  return v1;
  #L2be792.  v5:= 8I;
  #L2be796.  call `M`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.M:(I)V` @kind virtual;
  #L2be79c.  return v1;
  #L2be79e.  call `N`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.N:()V` @kind direct;
  #L2be7a4.  return v1;
}
procedure `byte` `D`(`com.google.crypto.tink.shaded.protobuf.j$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.D:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2be7b8.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2be7bc.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2be7c0.  if v0 == v1 then goto L2be7d6;
  #L2be7c4.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] @kind object;
  #L2be7c8.  v2:= v0 + 1;
  #L2be7cc.  v3.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v2;
  #L2be7d0.  v0:= v1[v0] @kind byte;
  #L2be7d4.  return v0;
  #L2be7d6.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.j:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2be7dc.  v0:= temp @kind object;
  #L2be7de.  throw v0;
}
procedure `byte`[] `E`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.E:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2be7f0.  if v3 <= 0 then goto L2be816;
  #L2be7f4.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2be7f8.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2be7fc.  v0:= v0 - v1 @kind int;
  #L2be7fe.  if v3 > v0 then goto L2be816;
  #L2be802.  v3:= v3 + v1 @kind int;
  #L2be804.  v2.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v3;
  #L2be808.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] @kind object;
  #L2be80c.  call temp:= `copyOfRange`(v0, v1, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L2be812.  v3:= temp @kind object;
  #L2be814.  return v3 @kind object;
  #L2be816.  if v3 > 0 then goto L2be82e;
  #L2be81a.  if v3 != 0 then goto L2be824;
  #L2be81e.  v3:= `@@com.google.crypto.tink.shaded.protobuf.b0.b` @type ^`byte`[] @kind object;
  #L2be822.  return v3 @kind object;
  #L2be824.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.f:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2be82a.  v3:= temp @kind object;
  #L2be82c.  throw v3;
  #L2be82e.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.j:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2be834.  v3:= temp @kind object;
  #L2be836.  throw v3;
}
procedure `int` `F`(`com.google.crypto.tink.shaded.protobuf.j$b` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.F:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2be9c4.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2be9c8.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2be9cc.  v1:= v1 - v0 @kind int;
  #L2be9ce.  v2:= 4I;
  #L2be9d0.  if v1 < v2 then goto L2bea20;
  #L2be9d4.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] @kind object;
  #L2be9d8.  v2:= v0 + 4;
  #L2be9dc.  v4.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v2;
  #L2be9e0.  v2:= v1[v0] @kind byte;
  #L2be9e4.  v2:= v2 ^& 255;
  #L2be9e8.  v3:= v0 + 1;
  #L2be9ec.  v3:= v1[v3] @kind byte;
  #L2be9f0.  v3:= v3 ^& 255;
  #L2be9f4.  v3:= v3 ^< 8;
  #L2be9f8.  v2:= v2 ^| v3 @kind int;
  #L2be9fa.  v3:= v0 + 2;
  #L2be9fe.  v3:= v1[v3] @kind byte;
  #L2bea02.  v3:= v3 ^& 255;
  #L2bea06.  v3:= v3 ^< 16;
  #L2bea0a.  v2:= v2 ^| v3 @kind int;
  #L2bea0c.  v0:= v0 + 3;
  #L2bea10.  v0:= v1[v0] @kind byte;
  #L2bea14.  v0:= v0 ^& 255;
  #L2bea18.  v0:= v0 ^< 24;
  #L2bea1c.  v0:= v0 ^| v2 @kind int;
  #L2bea1e.  return v0;
  #L2bea20.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.j:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bea26.  v0:= temp @kind object;
  #L2bea28.  throw v0;
}
procedure `long` `G`(`com.google.crypto.tink.shaded.protobuf.j$b` v9 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.G:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2bece4.  v0:= v9.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2bece8.  v1:= v9.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2becec.  v1:= v1 - v0 @kind int;
  #L2becee.  v2:= 8I;
  #L2becf2.  if v1 < v2 then goto L2bed9a;
  #L2becf6.  v1:= v9.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] @kind object;
  #L2becfa.  v3:= v0 + 8;
  #L2becfe.  v9.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v3;
  #L2bed02.  v3:= v1[v0] @kind byte;
  #L2bed06.  v3:= (`long`) v3 @kind i2l;
  #L2bed08.  v5:= 255L;
  #L2bed0c.  v3:= v3 ^& v5 @kind long;
  #L2bed0e.  v7:= v0 + 1;
  #L2bed12.  v7:= v1[v7] @kind byte;
  #L2bed16.  v7:= (`long`) v7 @kind i2l;
  #L2bed18.  v7:= v7 ^& v5 @kind long;
  #L2bed1a.  v7:= v7 ^< v2 @kind long;
  #L2bed1c.  v2:= v3 ^| v7 @kind long;
  #L2bed20.  v4:= v0 + 2;
  #L2bed24.  v4:= v1[v4] @kind byte;
  #L2bed28.  v7:= (`long`) v4 @kind i2l;
  #L2bed2a.  v7:= v7 ^& v5 @kind long;
  #L2bed2c.  v4:= 16I;
  #L2bed30.  v7:= v7 ^< v4 @kind long;
  #L2bed32.  v2:= v2 ^| v7 @kind long;
  #L2bed34.  v4:= v0 + 3;
  #L2bed38.  v4:= v1[v4] @kind byte;
  #L2bed3c.  v7:= (`long`) v4 @kind i2l;
  #L2bed3e.  v7:= v7 ^& v5 @kind long;
  #L2bed40.  v4:= 24I;
  #L2bed44.  v7:= v7 ^< v4 @kind long;
  #L2bed46.  v2:= v2 ^| v7 @kind long;
  #L2bed48.  v4:= v0 + 4;
  #L2bed4c.  v4:= v1[v4] @kind byte;
  #L2bed50.  v7:= (`long`) v4 @kind i2l;
  #L2bed52.  v7:= v7 ^& v5 @kind long;
  #L2bed54.  v4:= 32I;
  #L2bed58.  v7:= v7 ^< v4 @kind long;
  #L2bed5a.  v2:= v2 ^| v7 @kind long;
  #L2bed5c.  v4:= v0 + 5;
  #L2bed60.  v4:= v1[v4] @kind byte;
  #L2bed64.  v7:= (`long`) v4 @kind i2l;
  #L2bed66.  v7:= v7 ^& v5 @kind long;
  #L2bed68.  v4:= 40I;
  #L2bed6c.  v7:= v7 ^< v4 @kind long;
  #L2bed6e.  v2:= v2 ^| v7 @kind long;
  #L2bed70.  v4:= v0 + 6;
  #L2bed74.  v4:= v1[v4] @kind byte;
  #L2bed78.  v7:= (`long`) v4 @kind i2l;
  #L2bed7a.  v7:= v7 ^& v5 @kind long;
  #L2bed7c.  v4:= 48I;
  #L2bed80.  v7:= v7 ^< v4 @kind long;
  #L2bed82.  v2:= v2 ^| v7 @kind long;
  #L2bed84.  v0:= v0 + 7;
  #L2bed88.  v0:= v1[v0] @kind byte;
  #L2bed8c.  v0:= (`long`) v0 @kind i2l;
  #L2bed8e.  v0:= v0 ^& v5 @kind long;
  #L2bed90.  v4:= 56I;
  #L2bed94.  v0:= v0 ^< v4 @kind long;
  #L2bed96.  v0:= v0 ^| v2 @kind long;
  #L2bed98.  return v0 @kind wide;
  #L2bed9a.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.j:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2beda0.  v0:= temp @kind object;
  #L2beda2.  throw v0;
}
procedure `int` `H`(`com.google.crypto.tink.shaded.protobuf.j$b` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.H:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bea3c.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2bea40.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2bea44.  if v1 != v0 then goto L2bea4a;
  #L2bea48.  goto L2beb10;
  #L2bea4a.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] @kind object;
  #L2bea4e.  v3:= v0 + 1;
  #L2bea52.  v0:= v2[v0] @kind byte;
  #L2bea56.  if v0 < 0 then goto L2bea60;
  #L2bea5a.  v5.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v3;
  #L2bea5e.  return v0;
  #L2bea60.  v1:= v1 - v3 @kind int;
  #L2bea62.  v4:= 9I;
  #L2bea66.  if v1 >= v4 then goto L2bea6c;
  #L2bea6a.  goto L2beb10;
  #L2bea6c.  v1:= v3 + 1;
  #L2bea70.  v3:= v2[v3] @kind byte;
  #L2bea74.  v3:= v3 ^< 7;
  #L2bea78.  v0:= v0 ^~ v3 @kind int;
  #L2bea7a.  if v0 >= 0 then goto L2bea84;
  #L2bea7e.  v0:= v0 ^~ -128;
  #L2bea82.  goto L2beb1c;
  #L2bea84.  v3:= v1 + 1;
  #L2bea88.  v1:= v2[v1] @kind byte;
  #L2bea8c.  v1:= v1 ^< 14;
  #L2bea90.  v0:= v0 ^~ v1 @kind int;
  #L2bea92.  if v0 < 0 then goto L2bea9e;
  #L2bea96.  v0:= v0 ^~ 16256;
  #L2bea9a.  v1:= v3;
  #L2bea9c.  goto L2beb1c;
  #L2bea9e.  v1:= v3 + 1;
  #L2beaa2.  v3:= v2[v3] @kind byte;
  #L2beaa6.  v3:= v3 ^< 21;
  #L2beaaa.  v0:= v0 ^~ v3 @kind int;
  #L2beaac.  if v0 >= 0 then goto L2beaba;
  #L2beab0.  v2:= -2080896I;
  #L2beab6.  v0:= v0 ^~ v2 @kind int;
  #L2beab8.  goto L2beb1c;
  #L2beaba.  v3:= v1 + 1;
  #L2beabe.  v1:= v2[v1] @kind byte;
  #L2beac2.  v4:= v1 ^< 28;
  #L2beac6.  v0:= v0 ^~ v4 @kind int;
  #L2beac8.  v4:= 266354560I;
  #L2beace.  v0:= v0 ^~ v4 @kind int;
  #L2bead0.  if v1 >= 0 then goto L2bea9a;
  #L2bead4.  v1:= v3 + 1;
  #L2bead8.  v3:= v2[v3] @kind byte;
  #L2beadc.  if v3 >= 0 then goto L2beb1c;
  #L2beae0.  v3:= v1 + 1;
  #L2beae4.  v1:= v2[v1] @kind byte;
  #L2beae8.  if v1 >= 0 then goto L2bea9a;
  #L2beaec.  v1:= v3 + 1;
  #L2beaf0.  v3:= v2[v3] @kind byte;
  #L2beaf4.  if v3 >= 0 then goto L2beb1c;
  #L2beaf8.  v3:= v1 + 1;
  #L2beafc.  v1:= v2[v1] @kind byte;
  #L2beb00.  if v1 >= 0 then goto L2bea9a;
  #L2beb04.  v1:= v3 + 1;
  #L2beb08.  v2:= v2[v3] @kind byte;
  #L2beb0c.  if v2 >= 0 then goto L2beb1c;
  #L2beb10.  call temp:= `J`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.J:()J` @kind virtual;
  #L2beb16.  v0:= temp @kind wide;
  #L2beb18.  v1:= (`int`) v0 @kind l2i;
  #L2beb1a.  return v1;
  #L2beb1c.  v5.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v1;
  #L2beb20.  return v0;
}
procedure `long` `I`(`com.google.crypto.tink.shaded.protobuf.j$b` v11 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.I:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2bedb4.  v0:= v11.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2bedb8.  v1:= v11.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2bedbc.  if v1 != v0 then goto L2bedc4;
  #L2bedc0.  goto L2bef20;
  #L2bedc4.  v2:= v11.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] @kind object;
  #L2bedc8.  v3:= v0 + 1;
  #L2bedcc.  v0:= v2[v0] @kind byte;
  #L2bedd0.  if v0 < 0 then goto L2beddc;
  #L2bedd4.  v11.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v3;
  #L2bedd8.  v0:= (`long`) v0 @kind i2l;
  #L2bedda.  return v0 @kind wide;
  #L2beddc.  v1:= v1 - v3 @kind int;
  #L2bedde.  v4:= 9I;
  #L2bede2.  if v1 >= v4 then goto L2bedea;
  #L2bede6.  goto L2bef20;
  #L2bedea.  v1:= v3 + 1;
  #L2bedee.  v3:= v2[v3] @kind byte;
  #L2bedf2.  v3:= v3 ^< 7;
  #L2bedf6.  v0:= v0 ^~ v3 @kind int;
  #L2bedf8.  if v0 >= 0 then goto L2bee06;
  #L2bedfc.  v0:= v0 ^~ -128;
  #L2bee00.  v2:= (`long`) v0 @kind i2l;
  #L2bee02.  goto L2bef2e;
  #L2bee06.  v3:= v1 + 1;
  #L2bee0a.  v1:= v2[v1] @kind byte;
  #L2bee0e.  v1:= v1 ^< 14;
  #L2bee12.  v0:= v0 ^~ v1 @kind int;
  #L2bee14.  if v0 < 0 then goto L2bee28;
  #L2bee18.  v0:= v0 ^~ 16256;
  #L2bee1c.  v0:= (`long`) v0 @kind i2l;
  #L2bee1e.  v9:= v0 @kind wide;
  #L2bee20.  v1:= v3;
  #L2bee22.  v2:= v9 @kind wide;
  #L2bee24.  goto L2bef2e;
  #L2bee28.  v1:= v3 + 1;
  #L2bee2c.  v3:= v2[v3] @kind byte;
  #L2bee30.  v3:= v3 ^< 21;
  #L2bee34.  v0:= v0 ^~ v3 @kind int;
  #L2bee36.  if v0 >= 0 then goto L2bee44;
  #L2bee3a.  v2:= -2080896I;
  #L2bee40.  v0:= v0 ^~ v2 @kind int;
  #L2bee42.  goto L2bee00;
  #L2bee44.  v3:= (`long`) v0 @kind i2l;
  #L2bee46.  v0:= v1 + 1;
  #L2bee4a.  v1:= v2[v1] @kind byte;
  #L2bee4e.  v5:= (`long`) v1 @kind i2l;
  #L2bee50.  v1:= 28I;
  #L2bee54.  v5:= v5 ^< v1 @kind long;
  #L2bee56.  v3:= v3 ^~ v5 @kind long;
  #L2bee58.  v5:= 0L;
  #L2bee5c.  v1:= lcmp(v3, v5);
  #L2bee60.  if v1 < 0 then goto L2bee72;
  #L2bee64.  v1:= 266354560L;
  #L2bee6a.  v2:= v3 ^~ v1 @kind long;
  #L2bee6e.  v1:= v0;
  #L2bee70.  goto L2bef2e;
  #L2bee72.  v1:= v0 + 1;
  #L2bee76.  v0:= v2[v0] @kind byte;
  #L2bee7a.  v7:= (`long`) v0 @kind i2l;
  #L2bee7c.  v0:= 35I;
  #L2bee80.  v7:= v7 ^< v0 @kind long;
  #L2bee82.  v3:= v3 ^~ v7 @kind long;
  #L2bee84.  v0:= lcmp(v3, v5);
  #L2bee88.  if v0 >= 0 then goto L2bee9c;
  #L2bee8c.  v5:= -34093383808L;
  #L2bee96.  v2:= v3 ^~ v5 @kind long;
  #L2bee9a.  goto L2bef2e;
  #L2bee9c.  v0:= v1 + 1;
  #L2beea0.  v1:= v2[v1] @kind byte;
  #L2beea4.  v7:= (`long`) v1 @kind i2l;
  #L2beea6.  v1:= 42I;
  #L2beeaa.  v7:= v7 ^< v1 @kind long;
  #L2beeac.  v3:= v3 ^~ v7 @kind long;
  #L2beeae.  v1:= lcmp(v3, v5);
  #L2beeb2.  if v1 < 0 then goto L2beec2;
  #L2beeb6.  v1:= 4363953127296L;
  #L2beec0.  goto L2bee6a;
  #L2beec2.  v1:= v0 + 1;
  #L2beec6.  v0:= v2[v0] @kind byte;
  #L2beeca.  v7:= (`long`) v0 @kind i2l;
  #L2beecc.  v0:= 49I;
  #L2beed0.  v7:= v7 ^< v0 @kind long;
  #L2beed2.  v3:= v3 ^~ v7 @kind long;
  #L2beed4.  v0:= lcmp(v3, v5);
  #L2beed8.  if v0 >= 0 then goto L2beee8;
  #L2beedc.  v5:= -558586000294016L;
  #L2beee6.  goto L2bee96;
  #L2beee8.  v0:= v1 + 1;
  #L2beeec.  v1:= v2[v1] @kind byte;
  #L2beef0.  v7:= (`long`) v1 @kind i2l;
  #L2beef2.  v1:= 56I;
  #L2beef6.  v7:= v7 ^< v1 @kind long;
  #L2beef8.  v3:= v3 ^~ v7 @kind long;
  #L2beefa.  v7:= 71499008037633920L;
  #L2bef04.  v3:= v3 ^~ v7 @kind long;
  #L2bef06.  v1:= lcmp(v3, v5);
  #L2bef0a.  if v1 >= 0 then goto L2bef2a;
  #L2bef0e.  v1:= v0 + 1;
  #L2bef12.  v0:= v2[v0] @kind byte;
  #L2bef16.  v7:= (`long`) v0 @kind i2l;
  #L2bef18.  v0:= lcmp(v7, v5);
  #L2bef1c.  if v0 >= 0 then goto L2bef2c;
  #L2bef20.  call temp:= `J`(v11) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.J:()J` @kind virtual;
  #L2bef26.  v0:= temp @kind wide;
  #L2bef28.  return v0 @kind wide;
  #L2bef2a.  v1:= v0;
  #L2bef2c.  v2:= v3 @kind wide;
  #L2bef2e.  v11.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v1;
  #L2bef32.  return v2 @kind wide;
}
procedure `long` `J`(`com.google.crypto.tink.shaded.protobuf.j$b` v6 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.J:()J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2bef44.  v0:= 0L;
  #L2bef48.  v2:= 0I;
  #L2bef4a.  v3:= 64I;
  #L2bef4e.  if v2 >= v3 then goto L2bef74;
  #L2bef52.  call temp:= `D`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.D:()B` @kind virtual;
  #L2bef58.  v3:= temp;
  #L2bef5a.  v4:= v3 ^& 127;
  #L2bef5e.  v4:= (`long`) v4 @kind i2l;
  #L2bef60.  v4:= v4 ^< v2 @kind long;
  #L2bef62.  v0:= v0 ^| v4 @kind long;
  #L2bef64.  v3:= v3 ^& 128;
  #L2bef68.  if v3 != 0 then goto L2bef6e;
  #L2bef6c.  return v0 @kind wide;
  #L2bef6e.  v2:= v2 + 7;
  #L2bef72.  goto L2bef4a;
  #L2bef74.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.e:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bef7a.  v0:= temp @kind object;
  #L2bef7c.  throw v0;
}
procedure `void` `L`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.L:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf0c4.  call temp:= `z`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.z:()I` @kind virtual;
  #L2bf0ca.  v0:= temp;
  #L2bf0cc.  if v0 == 0 then goto L2bf0dc;
  #L2bf0d0.  call temp:= `C`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.C:(I)Z` @kind virtual;
  #L2bf0d6.  v0:= temp;
  #L2bf0d8.  if v0 != 0 then goto L2bf0c4;
  #L2bf0dc.  return @kind void;
}
procedure `void` `M`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.M:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bf0f0.  if v3 < 0 then goto L2bf10a;
  #L2bf0f4.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2bf0f8.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2bf0fc.  v0:= v0 - v1 @kind int;
  #L2bf0fe.  if v3 > v0 then goto L2bf10a;
  #L2bf102.  v1:= v1 + v3 @kind int;
  #L2bf104.  v2.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v1;
  #L2bf108.  return @kind void;
  #L2bf10a.  if v3 >= 0 then goto L2bf118;
  #L2bf10e.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.f:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bf114.  v3:= temp @kind object;
  #L2bf116.  throw v3;
  #L2bf118.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.j:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bf11e.  v3:= temp @kind object;
  #L2bf120.  throw v3;
}
procedure `void` `a`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.a:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf040.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.j$b.j` @type ^`int`;
  #L2bf044.  if v0 != v2 then goto L2bf04a;
  #L2bf048.  return @kind void;
  #L2bf04a.  call temp:= `a`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.a:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bf050.  v2:= temp @kind object;
  #L2bf052.  throw v2;
}
procedure `int` `d`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2be90c.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2be910.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.j$b.i` @type ^`int`;
  #L2be914.  v0:= v0 - v1 @kind int;
  #L2be916.  return v0;
}
procedure `boolean` `e`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2be6d4.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2be6d8.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2be6dc.  if v0 != v1 then goto L2be6e4;
  #L2be6e0.  v0:= 1I;
  #L2be6e2.  goto L2be6e6;
  #L2be6e4.  v0:= 0I;
  #L2be6e6.  return v0;
}
procedure `void` `i`(`com.google.crypto.tink.shaded.protobuf.j$b` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.i:(I)V` @AccessFlag PUBLIC {
    temp;

  #L2bf064.  v0.`com.google.crypto.tink.shaded.protobuf.j$b.l` @type ^`int` := v1;
  #L2bf068.  call `K`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.K:()V` @kind direct;
  #L2bf06e.  return @kind void;
}
procedure `int` `j`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.j:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2be928.  if v2 < 0 then goto L2be954;
  #L2be92c.  call temp:= `d`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.d:()I` @kind virtual;
  #L2be932.  v0:= temp;
  #L2be934.  v2:= v2 + v0 @kind int;
  #L2be936.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.j$b.l` @type ^`int`;
  #L2be93a.  if v2 > v0 then goto L2be94a;
  #L2be93e.  v1.`com.google.crypto.tink.shaded.protobuf.j$b.l` @type ^`int` := v2;
  #L2be942.  call `K`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.K:()V` @kind direct;
  #L2be948.  return v0;
  #L2be94a.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.j:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2be950.  v2:= temp @kind object;
  #L2be952.  throw v2;
  #L2be954.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.f:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2be95a.  v2:= temp @kind object;
  #L2be95c.  throw v2;
}
procedure `boolean` `k`(`com.google.crypto.tink.shaded.protobuf.j$b` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.k:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2be6f8.  call temp:= `I`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.I:()J` @kind virtual;
  #L2be6fe.  v0:= temp @kind wide;
  #L2be700.  v2:= 0L;
  #L2be704.  v4:= lcmp(v0, v2);
  #L2be708.  if v4 == 0 then goto L2be710;
  #L2be70c.  v0:= 1I;
  #L2be70e.  goto L2be712;
  #L2be710.  v0:= 0I;
  #L2be712.  return v0;
}
procedure `com.google.crypto.tink.shaded.protobuf.i` `l`(`com.google.crypto.tink.shaded.protobuf.j$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.l:()Lcom/google/crypto/tink/shaded/protobuf/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2be848.  call temp:= `H`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.H:()I` @kind virtual;
  #L2be84e.  v0:= temp;
  #L2be850.  if v0 <= 0 then goto L2be898;
  #L2be854.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2be858.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2be85c.  v1:= v1 - v2 @kind int;
  #L2be85e.  if v0 > v1 then goto L2be898;
  #L2be862.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.e` @type ^`boolean` @kind boolean;
  #L2be866.  if v1 == 0 then goto L2be880;
  #L2be86a.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.k` @type ^`boolean` @kind boolean;
  #L2be86e.  if v1 == 0 then goto L2be880;
  #L2be872.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] @kind object;
  #L2be876.  call temp:= `i0`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/i;.i0:([BII)Lcom/google/crypto/tink/shaded/protobuf/i;` @kind static;
  #L2be87c.  v1:= temp @kind object;
  #L2be87e.  goto L2be88c;
  #L2be880.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] @kind object;
  #L2be884.  call temp:= `p`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/i;.p:([BII)Lcom/google/crypto/tink/shaded/protobuf/i;` @kind static;
  #L2be88a.  v1:= temp @kind object;
  #L2be88c.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2be890.  v2:= v2 + v0 @kind int;
  #L2be892.  v3.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v2;
  #L2be896.  return v1 @kind object;
  #L2be898.  if v0 != 0 then goto L2be8a2;
  #L2be89c.  v0:= `@@com.google.crypto.tink.shaded.protobuf.i.p` @type ^`com.google.crypto.tink.shaded.protobuf.i` @kind object;
  #L2be8a0.  return v0 @kind object;
  #L2be8a2.  call temp:= `E`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.E:(I)[B` @kind virtual;
  #L2be8a8.  v0:= temp @kind object;
  #L2be8aa.  call temp:= `h0`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/i;.h0:([B)Lcom/google/crypto/tink/shaded/protobuf/i;` @kind static;
  #L2be8b0.  v0:= temp @kind object;
  #L2be8b2.  return v0 @kind object;
}
procedure `double` `m`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.m:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2be8c4.  call temp:= `G`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.G:()J` @kind virtual;
  #L2be8ca.  v0:= temp @kind wide;
  #L2be8cc.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L2be8d2.  v0:= temp @kind wide;
  #L2be8d4.  return v0 @kind wide;
}
procedure `int` `n`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.n:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2be970.  call temp:= `H`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.H:()I` @kind virtual;
  #L2be976.  v0:= temp;
  #L2be978.  return v0;
}
procedure `int` `o`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.o:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2be98c.  call temp:= `F`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.F:()I` @kind virtual;
  #L2be992.  v0:= temp;
  #L2be994.  return v0;
}
procedure `long` `p`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.p:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2becac.  call temp:= `G`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.G:()J` @kind virtual;
  #L2becb2.  v0:= temp @kind wide;
  #L2becb4.  return v0 @kind wide;
}
procedure `float` `q`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.q:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2be8e8.  call temp:= `F`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.F:()I` @kind virtual;
  #L2be8ee.  v0:= temp;
  #L2be8f0.  call temp:= `intBitsToFloat`(v0) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L2be8f6.  v0:= temp;
  #L2be8f8.  return v0;
}
procedure `int` `r`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.r:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2be9a8.  call temp:= `H`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.H:()I` @kind virtual;
  #L2be9ae.  v0:= temp;
  #L2be9b0.  return v0;
}
procedure `long` `s`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.s:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2becc8.  call temp:= `I`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.I:()J` @kind virtual;
  #L2becce.  v0:= temp @kind wide;
  #L2becd0.  return v0 @kind wide;
}
procedure `int` `t`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.t:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2beb34.  call temp:= `F`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.F:()I` @kind virtual;
  #L2beb3a.  v0:= temp;
  #L2beb3c.  return v0;
}
procedure `long` `u`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.u:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bef90.  call temp:= `G`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.G:()J` @kind virtual;
  #L2bef96.  v0:= temp @kind wide;
  #L2bef98.  return v0 @kind wide;
}
procedure `int` `v`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.v:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2beb50.  call temp:= `H`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.H:()I` @kind virtual;
  #L2beb56.  v0:= temp;
  #L2beb58.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/j;.b:(I)I` @kind static;
  #L2beb5e.  v0:= temp;
  #L2beb60.  return v0;
}
procedure `long` `w`(`com.google.crypto.tink.shaded.protobuf.j$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.w:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2befac.  call temp:= `I`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.I:()J` @kind virtual;
  #L2befb2.  v0:= temp @kind wide;
  #L2befb4.  call temp:= `c`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/j;.c:(J)J` @kind static;
  #L2befba.  v0:= temp @kind wide;
  #L2befbc.  return v0 @kind wide;
}
procedure `java.lang.String` `x`(`com.google.crypto.tink.shaded.protobuf.j$b` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.x:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bebdc.  call temp:= `H`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.H:()I` @kind virtual;
  #L2bebe2.  v0:= temp;
  #L2bebe4.  if v0 <= 0 then goto L2bec14;
  #L2bebe8.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2bebec.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2bebf0.  v1:= v1 - v2 @kind int;
  #L2bebf2.  if v0 > v1 then goto L2bec14;
  #L2bebf6.  v1:= new `java.lang.String`;
  #L2bebfa.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] @kind object;
  #L2bebfe.  v4:= `@@com.google.crypto.tink.shaded.protobuf.b0.a` @type ^`java.nio.charset.Charset` @kind object;
  #L2bec02.  call `<init>`(v1, v3, v2, v0, v4) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L2bec08.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2bec0c.  v2:= v2 + v0 @kind int;
  #L2bec0e.  v5.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v2;
  #L2bec12.  return v1 @kind object;
  #L2bec14.  if v0 != 0 then goto L2bec1e;
  #L2bec18.  v0:= "" @kind object;
  #L2bec1c.  return v0 @kind object;
  #L2bec1e.  if v0 >= 0 then goto L2bec2c;
  #L2bec22.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.f:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bec28.  v0:= temp @kind object;
  #L2bec2a.  throw v0;
  #L2bec2c.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.j:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bec32.  v0:= temp @kind object;
  #L2bec34.  throw v0;
}
procedure `java.lang.String` `y`(`com.google.crypto.tink.shaded.protobuf.j$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.y:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bec48.  call temp:= `H`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.H:()I` @kind virtual;
  #L2bec4e.  v0:= temp;
  #L2bec50.  if v0 <= 0 then goto L2bec7a;
  #L2bec54.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.f` @type ^`int`;
  #L2bec58.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2bec5c.  v1:= v1 - v2 @kind int;
  #L2bec5e.  if v0 > v1 then goto L2bec7a;
  #L2bec62.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.d` @type ^`byte`[] @kind object;
  #L2bec66.  call temp:= `e`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1;.e:([BII)Ljava/lang/String;` @kind static;
  #L2bec6c.  v1:= temp @kind object;
  #L2bec6e.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int`;
  #L2bec72.  v2:= v2 + v0 @kind int;
  #L2bec74.  v3.`com.google.crypto.tink.shaded.protobuf.j$b.h` @type ^`int` := v2;
  #L2bec78.  return v1 @kind object;
  #L2bec7a.  if v0 != 0 then goto L2bec84;
  #L2bec7e.  v0:= "" @kind object;
  #L2bec82.  return v0 @kind object;
  #L2bec84.  if v0 > 0 then goto L2bec92;
  #L2bec88.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.f:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bec8e.  v0:= temp @kind object;
  #L2bec90.  throw v0;
  #L2bec92.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.j:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bec98.  v0:= temp @kind object;
  #L2bec9a.  throw v0;
}
procedure `int` `z`(`com.google.crypto.tink.shaded.protobuf.j$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.z:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2beb74.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.e:()Z` @kind virtual;
  #L2beb7a.  v0:= temp;
  #L2beb7c.  if v0 == 0 then goto L2beb88;
  #L2beb80.  v0:= 0I;
  #L2beb82.  v1.`com.google.crypto.tink.shaded.protobuf.j$b.j` @type ^`int` := v0;
  #L2beb86.  return v0;
  #L2beb88.  call temp:= `H`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/j$b;.H:()I` @kind virtual;
  #L2beb8e.  v0:= temp;
  #L2beb90.  v1.`com.google.crypto.tink.shaded.protobuf.j$b.j` @type ^`int` := v0;
  #L2beb94.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/u1;.a:(I)I` @kind static;
  #L2beb9a.  v0:= temp;
  #L2beb9c.  if v0 == 0 then goto L2beba6;
  #L2beba0.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.j$b.j` @type ^`int`;
  #L2beba4.  return v0;
  #L2beba6.  call temp:= `b`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.b:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2bebac.  v0:= temp @kind object;
  #L2bebae.  throw v0;
}
