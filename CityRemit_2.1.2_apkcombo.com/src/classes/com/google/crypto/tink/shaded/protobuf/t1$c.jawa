record `com.google.crypto.tink.shaded.protobuf.t1$c` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.t1$b` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.t1$c` v0 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2d86fc.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$b;.<init>:()V` @kind direct;
  #L2d8702.  return @kind void;
}
procedure `int` `e`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$c;.e:([BII)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2d8310.  if v2 >= v3 then goto L2d8322;
  #L2d8314.  v0:= v1[v2] @kind byte;
  #L2d8318.  if v0 < 0 then goto L2d8322;
  #L2d831c.  v2:= v2 + 1;
  #L2d8320.  goto L2d8310;
  #L2d8322.  if v2 < v3 then goto L2d832a;
  #L2d8326.  v1:= 0I;
  #L2d8328.  goto L2d8332;
  #L2d832a.  call temp:= `f`(v1, v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$c;.f:([BII)I` @kind static;
  #L2d8330.  v1:= temp;
  #L2d8332.  return v1;
}
procedure `int` `f`(`byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$c;.f:([BII)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2d8464.  if v7 < v8 then goto L2d846c;
  #L2d8468.  v6:= 0I;
  #L2d846a.  return v6;
  #L2d846c.  v0:= v7 + 1;
  #L2d8470.  v7:= v6[v7] @kind byte;
  #L2d8474.  if v7 >= 0 then goto L2d8538;
  #L2d8478.  v1:= -32I;
  #L2d847c.  v2:= -1I;
  #L2d847e.  v3:= -65I;
  #L2d8482.  if v7 >= v1 then goto L2d84a2;
  #L2d8486.  if v0 < v8 then goto L2d848c;
  #L2d848a.  return v7;
  #L2d848c.  v1:= -62I;
  #L2d8490.  if v7 < v1 then goto L2d84a0;
  #L2d8494.  v7:= v0 + 1;
  #L2d8498.  v0:= v6[v0] @kind byte;
  #L2d849c.  if v0 <= v3 then goto L2d8464;
  #L2d84a0.  return v2;
  #L2d84a2.  v4:= -16I;
  #L2d84a6.  if v7 >= v4 then goto L2d84ee;
  #L2d84aa.  v4:= v8 + -1;
  #L2d84ae.  if v0 < v4 then goto L2d84bc;
  #L2d84b2.  call temp:= `c`(v6, v0, v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1;.c:([BII)I` @kind static;
  #L2d84b8.  v6:= temp;
  #L2d84ba.  return v6;
  #L2d84bc.  v4:= v0 + 1;
  #L2d84c0.  v0:= v6[v0] @kind byte;
  #L2d84c4.  if v0 > v3 then goto L2d84ec;
  #L2d84c8.  v5:= -96I;
  #L2d84cc.  if v7 != v1 then goto L2d84d4;
  #L2d84d0.  if v0 < v5 then goto L2d84ec;
  #L2d84d4.  v1:= -19I;
  #L2d84d8.  if v7 != v1 then goto L2d84e0;
  #L2d84dc.  if v0 >= v5 then goto L2d84ec;
  #L2d84e0.  v7:= v4 + 1;
  #L2d84e4.  v0:= v6[v4] @kind byte;
  #L2d84e8.  if v0 <= v3 then goto L2d8464;
  #L2d84ec.  return v2;
  #L2d84ee.  v1:= v8 + -2;
  #L2d84f2.  if v0 < v1 then goto L2d8500;
  #L2d84f6.  call temp:= `c`(v6, v0, v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1;.c:([BII)I` @kind static;
  #L2d84fc.  v6:= temp;
  #L2d84fe.  return v6;
  #L2d8500.  v1:= v0 + 1;
  #L2d8504.  v0:= v6[v0] @kind byte;
  #L2d8508.  if v0 > v3 then goto L2d8536;
  #L2d850c.  v7:= v7 ^< 28;
  #L2d8510.  v0:= v0 + 112;
  #L2d8514.  v7:= v7 + v0 @kind int;
  #L2d8516.  v7:= v7 ^> 30;
  #L2d851a.  if v7 != 0 then goto L2d8536;
  #L2d851e.  v7:= v1 + 1;
  #L2d8522.  v0:= v6[v1] @kind byte;
  #L2d8526.  if v0 > v3 then goto L2d8536;
  #L2d852a.  v0:= v7 + 1;
  #L2d852e.  v7:= v6[v7] @kind byte;
  #L2d8532.  if v7 <= v3 then goto L2d8538;
  #L2d8536.  return v2;
  #L2d8538.  v7:= v0;
  #L2d853a.  goto L2d8464;
}
procedure `java.lang.String` `a`(`com.google.crypto.tink.shaded.protobuf.t1$c` v11 @kind this, `byte`[] v12 @kind object, `int` v13 , `int` v14 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$c;.a:([BII)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2d854c.  v0:= v13 ^| v14 @kind int;
  #L2d8550.  v1:= length @variable v12;
  #L2d8552.  v1:= v1 - v13 @kind int;
  #L2d8554.  v1:= v1 - v14 @kind int;
  #L2d8556.  v0:= v0 ^| v1 @kind int;
  #L2d8558.  v1:= 0I;
  #L2d855a.  v2:= 1I;
  #L2d855c.  if v0 < 0 then goto L2d86a6;
  #L2d8560.  v0:= v13 + v14 @kind int;
  #L2d8564.  v14:= new `char`[v14];
  #L2d8568.  v3:= 0I;
  #L2d856a.  if v13 >= v0 then goto L2d8592;
  #L2d856e.  v4:= v12[v13] @kind byte;
  #L2d8572.  call temp:= `b`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$a;.b:(B)Z` @kind static;
  #L2d8578.  v5:= temp;
  #L2d857a.  if v5 != 0 then goto L2d8580;
  #L2d857e.  goto L2d8592;
  #L2d8580.  v13:= v13 + 1;
  #L2d8584.  v5:= v3 + 1;
  #L2d8588.  call `c`(v4, v14, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$a;.c:(B[CI)V` @kind static;
  #L2d858e.  v3:= v5;
  #L2d8590.  goto L2d856a;
  #L2d8592.  v8:= v3;
  #L2d8594.  if v13 >= v0 then goto L2d869a;
  #L2d8598.  v3:= v13 + 1;
  #L2d859c.  v13:= v12[v13] @kind byte;
  #L2d85a0.  call temp:= `b`(v13) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$a;.b:(B)Z` @kind static;
  #L2d85a6.  v4:= temp;
  #L2d85a8.  if v4 == 0 then goto L2d85e4;
  #L2d85ac.  v4:= v8 + 1;
  #L2d85b0.  call `c`(v13, v14, v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$a;.c:(B[CI)V` @kind static;
  #L2d85b6.  if v3 >= v0 then goto L2d85de;
  #L2d85ba.  v13:= v12[v3] @kind byte;
  #L2d85be.  call temp:= `b`(v13) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$a;.b:(B)Z` @kind static;
  #L2d85c4.  v5:= temp;
  #L2d85c6.  if v5 != 0 then goto L2d85cc;
  #L2d85ca.  goto L2d85de;
  #L2d85cc.  v3:= v3 + 1;
  #L2d85d0.  v5:= v4 + 1;
  #L2d85d4.  call `c`(v13, v14, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$a;.c:(B[CI)V` @kind static;
  #L2d85da.  v4:= v5;
  #L2d85dc.  goto L2d85b6;
  #L2d85de.  v13:= v3;
  #L2d85e0.  v8:= v4;
  #L2d85e2.  goto L2d8594;
  #L2d85e4.  call temp:= `d`(v13) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$a;.d:(B)Z` @kind static;
  #L2d85ea.  v4:= temp;
  #L2d85ec.  if v4 == 0 then goto L2d8616;
  #L2d85f0.  if v3 >= v0 then goto L2d860c;
  #L2d85f4.  v4:= v3 + 1;
  #L2d85f8.  v3:= v12[v3] @kind byte;
  #L2d85fc.  v5:= v8 + 1;
  #L2d8600.  call `e`(v13, v3, v14, v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$a;.e:(BB[CI)V` @kind static;
  #L2d8606.  v13:= v4;
  #L2d8608.  v8:= v5;
  #L2d860a.  goto L2d8594;
  #L2d860c.  call temp:= `c`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.c:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2d8612.  v12:= temp @kind object;
  #L2d8614.  throw v12;
  #L2d8616.  call temp:= `f`(v13) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$a;.f:(B)Z` @kind static;
  #L2d861c.  v4:= temp;
  #L2d861e.  if v4 == 0 then goto L2d8654;
  #L2d8622.  v4:= v0 + -1;
  #L2d8626.  if v3 >= v4 then goto L2d864a;
  #L2d862a.  v4:= v3 + 1;
  #L2d862e.  v3:= v12[v3] @kind byte;
  #L2d8632.  v5:= v4 + 1;
  #L2d8636.  v4:= v12[v4] @kind byte;
  #L2d863a.  v6:= v8 + 1;
  #L2d863e.  call `g`(v13, v3, v4, v14, v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$a;.g:(BBB[CI)V` @kind static;
  #L2d8644.  v13:= v5;
  #L2d8646.  v8:= v6;
  #L2d8648.  goto L2d8594;
  #L2d864a.  call temp:= `c`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.c:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2d8650.  v12:= temp @kind object;
  #L2d8652.  throw v12;
  #L2d8654.  v4:= v0 + -2;
  #L2d8658.  if v3 >= v4 then goto L2d8690;
  #L2d865c.  v4:= v3 + 1;
  #L2d8660.  v5:= v12[v3] @kind byte;
  #L2d8664.  v3:= v4 + 1;
  #L2d8668.  v6:= v12[v4] @kind byte;
  #L2d866c.  v9:= v3 + 1;
  #L2d8670.  v7:= v12[v3] @kind byte;
  #L2d8674.  v10:= v8 + 1;
  #L2d8678.  v3:= v13;
  #L2d867a.  v4:= v5;
  #L2d867c.  v5:= v6;
  #L2d867e.  v6:= v7;
  #L2d8680.  v7:= v14 @kind object;
  #L2d8682.  call `a`(v3, v4, v5, v6, v7, v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$a;.a:(BBBB[CI)V` @kind static;
  #L2d8688.  v10:= v10 + v2 @kind int;
  #L2d868a.  v13:= v9;
  #L2d868c.  v8:= v10;
  #L2d868e.  goto L2d8594;
  #L2d8690.  call temp:= `c`() @signature `Lcom/google/crypto/tink/shaded/protobuf/c0;.c:()Lcom/google/crypto/tink/shaded/protobuf/c0;` @kind static;
  #L2d8696.  v12:= temp @kind object;
  #L2d8698.  throw v12;
  #L2d869a.  v12:= new `java.lang.String`;
  #L2d869e.  call `<init>`(v12, v14, v1, v8) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L2d86a4.  return v12 @kind object;
  #L2d86a6.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L2d86aa.  v3:= 3I;
  #L2d86ac.  v3:= new `java.lang.Object`[v3];
  #L2d86b0.  v12:= length @variable v12;
  #L2d86b2.  call temp:= `valueOf`(v12) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2d86b8.  v12:= temp @kind object;
  #L2d86ba.  v3[v1]:= v12 @kind object;
  #L2d86be.  call temp:= `valueOf`(v13) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2d86c4.  v12:= temp @kind object;
  #L2d86c6.  v3[v2]:= v12 @kind object;
  #L2d86ca.  call temp:= `valueOf`(v14) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2d86d0.  v12:= temp @kind object;
  #L2d86d2.  v13:= 2I;
  #L2d86d4.  v3[v13]:= v12 @kind object;
  #L2d86d8.  v12:= "buffer length=%d, index=%d, size=%d" @kind object;
  #L2d86dc.  call temp:= `format`(v12, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2d86e2.  v12:= temp @kind object;
  #L2d86e4.  call `<init>`(v0, v12) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d86ea.  throw v0;
}
procedure `int` `b`(`com.google.crypto.tink.shaded.protobuf.t1$c` v7 @kind this, `java.lang.CharSequence` v8 @kind object, `byte`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$c;.b:(Ljava/lang/CharSequence;[BII)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2d8104.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2d810a.  v0:= temp;
  #L2d810c.  v11:= v11 + v10 @kind int;
  #L2d810e.  v1:= 0I;
  #L2d8110.  v2:= 128I;
  #L2d8114.  if v1 >= v0 then goto L2d8138;
  #L2d8118.  v3:= v1 + v10 @kind int;
  #L2d811c.  if v3 >= v11 then goto L2d8138;
  #L2d8120.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2d8126.  v4:= temp;
  #L2d8128.  if v4 >= v2 then goto L2d8138;
  #L2d812c.  v2:= (`byte`) v4 @kind i2b;
  #L2d812e.  v9[v3]:= v2 @kind byte;
  #L2d8132.  v1:= v1 + 1;
  #L2d8136.  goto L2d8110;
  #L2d8138.  if v1 != v0 then goto L2d8140;
  #L2d813c.  v10:= v10 + v0 @kind int;
  #L2d813e.  return v10;
  #L2d8140.  v10:= v10 + v1 @kind int;
  #L2d8142.  if v1 >= v0 then goto L2d82fe;
  #L2d8146.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2d814c.  v3:= temp;
  #L2d814e.  if v3 >= v2 then goto L2d8166;
  #L2d8152.  if v10 >= v11 then goto L2d8166;
  #L2d8156.  v4:= v10 + 1;
  #L2d815a.  v3:= (`byte`) v3 @kind i2b;
  #L2d815c.  v9[v10]:= v3 @kind byte;
  #L2d8160.  v10:= v4;
  #L2d8162.  goto L2d826e;
  #L2d8166.  v4:= 2048I;
  #L2d816a.  if v3 >= v4 then goto L2d819a;
  #L2d816e.  v4:= v11 + -2;
  #L2d8172.  if v10 > v4 then goto L2d819a;
  #L2d8176.  v4:= v10 + 1;
  #L2d817a.  v5:= v3 ^>> 6;
  #L2d817e.  v5:= v5 ^| 960;
  #L2d8182.  v5:= (`byte`) v5 @kind i2b;
  #L2d8184.  v9[v10]:= v5 @kind byte;
  #L2d8188.  v10:= v4 + 1;
  #L2d818c.  v3:= v3 ^& 63;
  #L2d8190.  v3:= v3 ^| v2 @kind int;
  #L2d8192.  v3:= (`byte`) v3 @kind i2b;
  #L2d8194.  v9[v4]:= v3 @kind byte;
  #L2d8198.  goto L2d826e;
  #L2d819a.  v4:= 57343I;
  #L2d81a0.  v5:= 55296I;
  #L2d81a6.  if v3 < v5 then goto L2d81ae;
  #L2d81aa.  if v4 >= v3 then goto L2d81ee;
  #L2d81ae.  v6:= v11 + -3;
  #L2d81b2.  if v10 > v6 then goto L2d81ee;
  #L2d81b6.  v4:= v10 + 1;
  #L2d81ba.  v5:= v3 ^>> 12;
  #L2d81be.  v5:= v5 ^| 480;
  #L2d81c2.  v5:= (`byte`) v5 @kind i2b;
  #L2d81c4.  v9[v10]:= v5 @kind byte;
  #L2d81c8.  v10:= v4 + 1;
  #L2d81cc.  v5:= v3 ^>> 6;
  #L2d81d0.  v5:= v5 ^& 63;
  #L2d81d4.  v5:= v5 ^| v2 @kind int;
  #L2d81d6.  v5:= (`byte`) v5 @kind i2b;
  #L2d81d8.  v9[v4]:= v5 @kind byte;
  #L2d81dc.  v4:= v10 + 1;
  #L2d81e0.  v3:= v3 ^& 63;
  #L2d81e4.  v3:= v3 ^| v2 @kind int;
  #L2d81e6.  v3:= (`byte`) v3 @kind i2b;
  #L2d81e8.  v9[v10]:= v3 @kind byte;
  #L2d81ec.  goto L2d8160;
  #L2d81ee.  v6:= v11 + -4;
  #L2d81f2.  if v10 > v6 then goto L2d8288;
  #L2d81f6.  v4:= v1 + 1;
  #L2d81fa.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2d8200.  v5:= temp;
  #L2d8202.  if v4 == v5 then goto L2d8278;
  #L2d8206.  call temp:= `charAt`(v8, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2d820c.  v1:= temp;
  #L2d820e.  call temp:= `isSurrogatePair`(v3, v1) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L2d8214.  v5:= temp;
  #L2d8216.  if v5 == 0 then goto L2d8276;
  #L2d821a.  call temp:= `toCodePoint`(v3, v1) @signature `Ljava/lang/Character;.toCodePoint:(CC)I` @kind static;
  #L2d8220.  v1:= temp;
  #L2d8222.  v3:= v10 + 1;
  #L2d8226.  v5:= v1 ^>> 18;
  #L2d822a.  v5:= v5 ^| 240;
  #L2d822e.  v5:= (`byte`) v5 @kind i2b;
  #L2d8230.  v9[v10]:= v5 @kind byte;
  #L2d8234.  v10:= v3 + 1;
  #L2d8238.  v5:= v1 ^>> 12;
  #L2d823c.  v5:= v5 ^& 63;
  #L2d8240.  v5:= v5 ^| v2 @kind int;
  #L2d8242.  v5:= (`byte`) v5 @kind i2b;
  #L2d8244.  v9[v3]:= v5 @kind byte;
  #L2d8248.  v3:= v10 + 1;
  #L2d824c.  v5:= v1 ^>> 6;
  #L2d8250.  v5:= v5 ^& 63;
  #L2d8254.  v5:= v5 ^| v2 @kind int;
  #L2d8256.  v5:= (`byte`) v5 @kind i2b;
  #L2d8258.  v9[v10]:= v5 @kind byte;
  #L2d825c.  v10:= v3 + 1;
  #L2d8260.  v1:= v1 ^& 63;
  #L2d8264.  v1:= v1 ^| v2 @kind int;
  #L2d8266.  v1:= (`byte`) v1 @kind i2b;
  #L2d8268.  v9[v3]:= v1 @kind byte;
  #L2d826c.  v1:= v4;
  #L2d826e.  v1:= v1 + 1;
  #L2d8272.  goto L2d8142;
  #L2d8276.  v1:= v4;
  #L2d8278.  v8:= new `com.google.crypto.tink.shaded.protobuf.t1$d`;
  #L2d827c.  v1:= v1 + -1;
  #L2d8280.  call `<init>`(v8, v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$d;.<init>:(II)V` @kind direct;
  #L2d8286.  throw v8;
  #L2d8288.  if v5 > v3 then goto L2d82c0;
  #L2d828c.  if v3 > v4 then goto L2d82c0;
  #L2d8290.  v9:= v1 + 1;
  #L2d8294.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2d829a.  v11:= temp;
  #L2d829c.  if v9 == v11 then goto L2d82b4;
  #L2d82a0.  call temp:= `charAt`(v8, v9) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2d82a6.  v8:= temp;
  #L2d82a8.  call temp:= `isSurrogatePair`(v3, v8) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L2d82ae.  v8:= temp;
  #L2d82b0.  if v8 != 0 then goto L2d82c0;
  #L2d82b4.  v8:= new `com.google.crypto.tink.shaded.protobuf.t1$d`;
  #L2d82b8.  call `<init>`(v8, v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$d;.<init>:(II)V` @kind direct;
  #L2d82be.  throw v8;
  #L2d82c0.  v8:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L2d82c4.  v9:= new `java.lang.StringBuilder`;
  #L2d82c8.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d82ce.  v11:= "Failed writing " @kind object;
  #L2d82d2.  call temp:= `append`(v9, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d82d8.  call temp:= `append`(v9, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d82de.  v11:= " at index " @kind object;
  #L2d82e2.  call temp:= `append`(v9, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d82e8.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d82ee.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d82f4.  v9:= temp @kind object;
  #L2d82f6.  call `<init>`(v8, v9) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d82fc.  throw v8;
  #L2d82fe.  return v10;
}
procedure `int` `d`(`com.google.crypto.tink.shaded.protobuf.t1$c` v6 @kind this, `int` v7 , `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$c;.d:(I[BII)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2d8344.  if v7 == 0 then goto L2d8448;
  #L2d8348.  if v9 < v10 then goto L2d834e;
  #L2d834c.  return v7;
  #L2d834e.  v0:= (`byte`) v7 @kind i2b;
  #L2d8350.  v1:= -32I;
  #L2d8354.  v2:= -1I;
  #L2d8356.  v3:= -65I;
  #L2d835a.  if v0 >= v1 then goto L2d837c;
  #L2d835e.  v7:= -62I;
  #L2d8362.  if v0 < v7 then goto L2d837a;
  #L2d8366.  v7:= v9 + 1;
  #L2d836a.  v9:= v8[v9] @kind byte;
  #L2d836e.  if v9 <= v3 then goto L2d8374;
  #L2d8372.  goto L2d837a;
  #L2d8374.  v9:= v7;
  #L2d8376.  goto L2d8448;
  #L2d837a.  return v2;
  #L2d837c.  v4:= -16I;
  #L2d8380.  if v0 >= v4 then goto L2d83d6;
  #L2d8384.  v7:= v7 ^> 8;
  #L2d8388.  v7:= ~v7 @kind int;
  #L2d838a.  v7:= (`byte`) v7 @kind i2b;
  #L2d838c.  if v7 != 0 then goto L2d83ac;
  #L2d8390.  v7:= v9 + 1;
  #L2d8394.  v9:= v8[v9] @kind byte;
  #L2d8398.  if v7 < v10 then goto L2d83a6;
  #L2d839c.  call temp:= `a`(v0, v9) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1;.a:(II)I` @kind static;
  #L2d83a2.  v7:= temp;
  #L2d83a4.  return v7;
  #L2d83a6.  v5:= v9;
  #L2d83a8.  v9:= v7;
  #L2d83aa.  v7:= v5;
  #L2d83ac.  if v7 > v3 then goto L2d83d4;
  #L2d83b0.  v4:= -96I;
  #L2d83b4.  if v0 != v1 then goto L2d83bc;
  #L2d83b8.  if v7 < v4 then goto L2d83d4;
  #L2d83bc.  v1:= -19I;
  #L2d83c0.  if v0 != v1 then goto L2d83c8;
  #L2d83c4.  if v7 >= v4 then goto L2d83d4;
  #L2d83c8.  v7:= v9 + 1;
  #L2d83cc.  v9:= v8[v9] @kind byte;
  #L2d83d0.  if v9 <= v3 then goto L2d8374;
  #L2d83d4.  return v2;
  #L2d83d6.  v1:= v7 ^> 8;
  #L2d83da.  v1:= ~v1 @kind int;
  #L2d83dc.  v1:= (`byte`) v1 @kind i2b;
  #L2d83de.  v4:= 0I;
  #L2d83e0.  if v1 != 0 then goto L2d83fe;
  #L2d83e4.  v7:= v9 + 1;
  #L2d83e8.  v1:= v8[v9] @kind byte;
  #L2d83ec.  if v7 < v10 then goto L2d83fa;
  #L2d83f0.  call temp:= `a`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1;.a:(II)I` @kind static;
  #L2d83f6.  v7:= temp;
  #L2d83f8.  return v7;
  #L2d83fa.  v9:= v7;
  #L2d83fc.  goto L2d8404;
  #L2d83fe.  v7:= v7 ^> 16;
  #L2d8402.  v4:= (`byte`) v7 @kind i2b;
  #L2d8404.  if v4 != 0 then goto L2d8420;
  #L2d8408.  v7:= v9 + 1;
  #L2d840c.  v4:= v8[v9] @kind byte;
  #L2d8410.  if v7 < v10 then goto L2d841e;
  #L2d8414.  call temp:= `b`(v0, v1, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1;.b:(III)I` @kind static;
  #L2d841a.  v7:= temp;
  #L2d841c.  return v7;
  #L2d841e.  v9:= v7;
  #L2d8420.  if v1 > v3 then goto L2d8446;
  #L2d8424.  v7:= v0 ^< 28;
  #L2d8428.  v1:= v1 + 112;
  #L2d842c.  v7:= v7 + v1 @kind int;
  #L2d842e.  v7:= v7 ^> 30;
  #L2d8432.  if v7 != 0 then goto L2d8446;
  #L2d8436.  if v4 > v3 then goto L2d8446;
  #L2d843a.  v7:= v9 + 1;
  #L2d843e.  v9:= v8[v9] @kind byte;
  #L2d8442.  if v9 <= v3 then goto L2d8374;
  #L2d8446.  return v2;
  #L2d8448.  call temp:= `e`(v8, v9, v10) @signature `Lcom/google/crypto/tink/shaded/protobuf/t1$c;.e:([BII)I` @kind static;
  #L2d844e.  v7:= temp;
  #L2d8450.  return v7;
}
