record `p3.f$c` @kind class @AccessFlag FINAL {
  `java.lang.String` `p3.f$c.a` @AccessFlag PUBLIC_FINAL;
  `int` `p3.f$c.b` @AccessFlag PUBLIC_FINAL;
  `java.lang.String` `p3.f$c.c` @AccessFlag PUBLIC_FINAL;
  `java.util.Set` `p3.f$c.d` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`p3.f$c` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object, `java.util.Set` v4 @kind object) @signature `Lp3/f$c;.<init>:(Ljava/lang/String;ILjava/lang/String;Ljava/util/Set;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L403e00.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L403e06.  v0.`p3.f$c.b` @type ^`int` := v2;
  #L403e0a.  v0.`p3.f$c.a` @type ^`java.lang.String` := v1 @kind object;
  #L403e0e.  v0.`p3.f$c.c` @type ^`java.lang.String` := v3 @kind object;
  #L403e12.  v0.`p3.f$c.d` @type ^`java.util.Set` := v4 @kind object;
  #L403e16.  return @kind void;
}
procedure `p3.f$c` `a`(`java.lang.String` v5 @kind object, `int` v6 ) @signature `Lp3/f$c;.a:(Ljava/lang/String;I)Lp3/f$c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L403d38.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L403d3e.  v5:= temp @kind object;
  #L403d40.  call temp:= `isEmpty`(v5) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L403d46.  v0:= temp;
  #L403d48.  v1:= 1I;
  #L403d4a.  v0:= v0 ^~ v1 @kind int;
  #L403d4c.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L403d52.  v0:= " " @kind object;
  #L403d56.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L403d5c.  v0:= temp;
  #L403d5e.  v2:= -1I;
  #L403d60.  v3:= 0I;
  #L403d62.  if v0 != v2 then goto L403d6c;
  #L403d66.  v0:= "" @kind object;
  #L403d6a.  goto L403d86;
  #L403d6c.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L403d72.  v2:= temp @kind object;
  #L403d74.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L403d7a.  v2:= temp @kind object;
  #L403d7c.  call temp:= `substring`(v5, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L403d82.  v5:= temp @kind object;
  #L403d84.  v0:= v2 @kind object;
  #L403d86.  v2:= "\\." @kind object;
  #L403d8a.  call temp:= `P0`(v5, v2) @signature `Ls3/l0;.P0:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L403d90.  v5:= temp @kind object;
  #L403d92.  v2:= v5[v3] @kind object;
  #L403d96.  v3:= new `java.util.HashSet`;
  #L403d9a.  call `<init>`(v3) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L403da0.  v4:= length @variable v5;
  #L403da2.  if v1 >= v4 then goto L403db6;
  #L403da6.  v4:= v5[v1] @kind object;
  #L403daa.  call temp:= `add`(v3, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L403db0.  v1:= v1 + 1;
  #L403db4.  goto L403da0;
  #L403db6.  v5:= new `p3.f$c`;
  #L403dba.  call `<init>`(v5, v2, v6, v0, v3) @signature `Lp3/f$c;.<init>:(Ljava/lang/String;ILjava/lang/String;Ljava/util/Set;)V` @kind direct;
  #L403dc0.  return v5 @kind object;
}
procedure `p3.f$c` `b`() @signature `Lp3/f$c;.b:()Lp3/f$c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L403dd4.  v0:= new `p3.f$c`;
  #L403dd8.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L403dde.  v1:= temp @kind object;
  #L403de0.  v2:= "" @kind object;
  #L403de4.  v3:= 0I;
  #L403de6.  call `<init>`(v0, v2, v3, v2, v1) @signature `Lp3/f$c;.<init>:(Ljava/lang/String;ILjava/lang/String;Ljava/util/Set;)V` @kind direct;
  #L403dec.  return v0 @kind object;
}
