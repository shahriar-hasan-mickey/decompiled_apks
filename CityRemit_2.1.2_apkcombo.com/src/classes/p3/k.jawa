record `p3.k` @kind class @AccessFlag FINAL extends `g3.g` @kind interface {
  `java.util.List` `p3.k.o` @AccessFlag PRIVATE_FINAL;
  `long`[] `p3.k.p` @AccessFlag PRIVATE_FINAL;
  `long`[] `p3.k.q` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`p3.k` v6 @kind this, `java.util.List` v7 @kind object) @signature `Lp3/k;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L405c2c.  call `<init>`(v6) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L405c32.  v0:= new `java.util.ArrayList`;
  #L405c36.  call `<init>`(v0, v7) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L405c3c.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L405c42.  v0:= temp @kind object;
  #L405c44.  v6.`p3.k.o` @type ^`java.util.List` := v0 @kind object;
  #L405c48.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L405c4e.  v0:= temp;
  #L405c50.  v0:= v0 * 2;
  #L405c54.  v0:= new `long`[v0];
  #L405c58.  v6.`p3.k.p` @type ^`long`[] := v0 @kind object;
  #L405c5c.  v0:= 0I;
  #L405c5e.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L405c64.  v1:= temp;
  #L405c66.  if v0 >= v1 then goto L405c98;
  #L405c6a.  call temp:= `get`(v7, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L405c70.  v1:= temp @kind object;
  #L405c72.  v1:= (`p3.e`) v1 @kind object;
  #L405c76.  v2:= v0 * 2;
  #L405c7a.  v3:= v6.`p3.k.p` @type ^`long`[] @kind object;
  #L405c7e.  v4:= v1.`p3.e.b` @type ^`long` @kind wide;
  #L405c82.  v3[v2]:= v4 @kind wide;
  #L405c86.  v2:= v2 + 1;
  #L405c8a.  v4:= v1.`p3.e.c` @type ^`long` @kind wide;
  #L405c8e.  v3[v2]:= v4 @kind wide;
  #L405c92.  v0:= v0 + 1;
  #L405c96.  goto L405c5e;
  #L405c98.  v7:= v6.`p3.k.p` @type ^`long`[] @kind object;
  #L405c9c.  v0:= length @variable v7;
  #L405c9e.  call temp:= `copyOf`(v7, v0) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L405ca4.  v7:= temp @kind object;
  #L405ca6.  v6.`p3.k.q` @type ^`long`[] := v7 @kind object;
  #L405caa.  call `sort`(v7) @signature `Ljava/util/Arrays;.sort:([J)V` @kind static;
  #L405cb0.  return @kind void;
}
procedure `int` `a`(`p3.e` v0 @kind object, `p3.e` v1 @kind object) @signature `Lp3/k;.a:(Lp3/e;Lp3/e;)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L405a74.  call temp:= `b`(v0, v1) @signature `Lp3/k;.b:(Lp3/e;Lp3/e;)I` @kind static;
  #L405a7a.  v0:= temp;
  #L405a7c.  return v0;
}
procedure `int` `b`(`p3.e` v2 @kind object, `p3.e` v3 @kind object) @signature `Lp3/k;.b:(Lp3/e;Lp3/e;)I` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L405ad8.  v0:= v2.`p3.e.b` @type ^`long` @kind wide;
  #L405adc.  v2:= v3.`p3.e.b` @type ^`long` @kind wide;
  #L405ae0.  call temp:= `compare`(v0, v2) @signature `Ljava/lang/Long;.compare:(JJ)I` @kind static;
  #L405ae6.  v2:= temp;
  #L405ae8.  return v2;
}
procedure `int` `c`(`p3.k` v2 @kind this, `long` v3 ) @signature `Lp3/k;.c:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L405aa8.  v0:= v2.`p3.k.q` @type ^`long`[] @kind object;
  #L405aac.  v1:= 0I;
  #L405aae.  call temp:= `e`(v0, v3, v1, v1) @signature `Ls3/l0;.e:([JJZZ)I` @kind static;
  #L405ab4.  v3:= temp;
  #L405ab6.  v4:= v2.`p3.k.q` @type ^`long`[] @kind object;
  #L405aba.  v4:= length @variable v4;
  #L405abc.  if v3 >= v4 then goto L405ac2;
  #L405ac0.  goto L405ac4;
  #L405ac2.  v3:= -1I;
  #L405ac4.  return v3;
}
procedure `long` `d`(`p3.k` v3 @kind this, `int` v4 ) @signature `Lp3/k;.d:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L405be8.  v0:= 1I;
  #L405bea.  v1:= 0I;
  #L405bec.  if v4 < 0 then goto L405bf4;
  #L405bf0.  v2:= 1I;
  #L405bf2.  goto L405bf6;
  #L405bf4.  v2:= 0I;
  #L405bf6.  call `a`(v2) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L405bfc.  v2:= v3.`p3.k.q` @type ^`long`[] @kind object;
  #L405c00.  v2:= length @variable v2;
  #L405c02.  if v4 >= v2 then goto L405c08;
  #L405c06.  goto L405c0a;
  #L405c08.  v0:= 0I;
  #L405c0a.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L405c10.  v0:= v3.`p3.k.q` @type ^`long`[] @kind object;
  #L405c14.  v1:= v0[v4] @kind wide;
  #L405c18.  return v1 @kind wide;
}
procedure `java.util.List` `e`(`p3.k` v9 @kind this, `long` v10 ) @signature `Lp3/k;.e:(J)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L405afc.  v0:= new `java.util.ArrayList`;
  #L405b00.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L405b06.  v1:= new `java.util.ArrayList`;
  #L405b0a.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L405b10.  v2:= 0I;
  #L405b12.  v3:= 0I;
  #L405b14.  v4:= v9.`p3.k.o` @type ^`java.util.List` @kind object;
  #L405b18.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L405b1e.  v4:= temp;
  #L405b20.  if v3 >= v4 then goto L405b82;
  #L405b24.  v4:= v9.`p3.k.p` @type ^`long`[] @kind object;
  #L405b28.  v5:= v3 * 2;
  #L405b2c.  v6:= v4[v5] @kind wide;
  #L405b30.  v8:= lcmp(v6, v10);
  #L405b34.  if v8 > 0 then goto L405b7c;
  #L405b38.  v5:= v5 + 1;
  #L405b3c.  v5:= v4[v5] @kind wide;
  #L405b40.  v4:= lcmp(v10, v5);
  #L405b44.  if v4 >= 0 then goto L405b7c;
  #L405b48.  v4:= v9.`p3.k.o` @type ^`java.util.List` @kind object;
  #L405b4c.  call temp:= `get`(v4, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L405b52.  v4:= temp @kind object;
  #L405b54.  v4:= (`p3.e`) v4 @kind object;
  #L405b58.  v5:= v4.`p3.e.a` @type ^`g3.b` @kind object;
  #L405b5c.  v6:= v5.`g3.b.s` @type ^`float`;
  #L405b60.  v7:= -8388609I;
  #L405b66.  v6:= fcmpl(v6, v7);
  #L405b6a.  if v6 != 0 then goto L405b76;
  #L405b6e.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L405b74.  goto L405b7c;
  #L405b76.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L405b7c.  v3:= v3 + 1;
  #L405b80.  goto L405b14;
  #L405b82.  v10:= `@@p3.j.o` @type ^`p3.j` @kind object;
  #L405b86.  call `sort`(v1, v10) @signature `Ljava/util/Collections;.sort:(Ljava/util/List;Ljava/util/Comparator;)V` @kind static;
  #L405b8c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L405b92.  v10:= temp;
  #L405b94.  if v2 >= v10 then goto L405bd4;
  #L405b98.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L405b9e.  v10:= temp @kind object;
  #L405ba0.  v10:= (`p3.e`) v10 @kind object;
  #L405ba4.  v10:= v10.`p3.e.a` @type ^`g3.b` @kind object;
  #L405ba8.  call temp:= `b`(v10) @signature `Lg3/b;.b:()Lg3/b$b;` @kind virtual;
  #L405bae.  v10:= temp @kind object;
  #L405bb0.  v11:= v2 - -1;
  #L405bb4.  v11:= (`float`) v11 @kind i2f;
  #L405bb6.  v3:= 1I;
  #L405bb8.  call temp:= `h`(v10, v11, v3) @signature `Lg3/b$b;.h:(FI)Lg3/b$b;` @kind virtual;
  #L405bbe.  v10:= temp @kind object;
  #L405bc0.  call temp:= `a`(v10) @signature `Lg3/b$b;.a:()Lg3/b;` @kind virtual;
  #L405bc6.  v10:= temp @kind object;
  #L405bc8.  call temp:= `add`(v0, v10) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L405bce.  v2:= v2 + 1;
  #L405bd2.  goto L405b8c;
  #L405bd4.  return v0 @kind object;
}
procedure `int` `h`(`p3.k` v1 @kind this) @signature `Lp3/k;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405a90.  v0:= v1.`p3.k.q` @type ^`long`[] @kind object;
  #L405a94.  v0:= length @variable v0;
  #L405a96.  return v0;
}
