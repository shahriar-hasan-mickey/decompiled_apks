record `qc.l$b` @kind class @AccessFlag FINAL extends `qc.s` @kind interface {
  `qc.t` `qc.l$b.o` @AccessFlag FINAL_SYNTHETIC;
  `java.io.InputStream` `qc.l$b.p` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`qc.l$b` v0 @kind this, `qc.t` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lqc/l$b;.<init>:(Lqc/t;Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d1a0.  v0.`qc.l$b.o` @type ^`qc.t` := v1 @kind object;
  #L42d1a4.  v0.`qc.l$b.p` @type ^`java.io.InputStream` := v2 @kind object;
  #L42d1a8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42d1ae.  return @kind void;
}
procedure `long` `T`(`qc.l$b` v3 @kind this, `qc.c` v4 @kind object, `long` v5 ) @signature `Lqc/l$b;.T:(Lqc/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42d0ac.  v0:= 0L;
  #L42d0b0.  v2:= lcmp(v5, v0);
  #L42d0b4.  if v2 < 0 then goto L42d13a;
  #L42d0b8.  if v2 != 0 then goto L42d0be;
  #L42d0bc.  return v0 @kind wide;
  #L42d0be.  v0:= v3.`qc.l$b.o` @type ^`qc.t` @kind object;
  #L42d0c2.  call `f`(v0) @signature `Lqc/t;.f:()V` @kind virtual;
  #L42d0c8.  v0:= 1I;
  #L42d0ca.  call temp:= `k0`(v4, v0) @signature `Lqc/c;.k0:(I)Lqc/o;` @kind virtual;
  #L42d0d0.  v0:= temp @kind object;
  #L42d0d2.  v1:= v0.`qc.o.c` @type ^`int`;
  #L42d0d6.  v1:= v1 - 8192;
  #L42d0da.  v1:= (`long`) v1 @kind i2l;
  #L42d0dc.  call temp:= `min`(v5, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L42d0e2.  v5:= temp @kind wide;
  #L42d0e4.  v6:= (`int`) v5 @kind l2i;
  #L42d0e6.  v5:= v3.`qc.l$b.p` @type ^`java.io.InputStream` @kind object;
  #L42d0ea.  v1:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42d0ee.  v2:= v0.`qc.o.c` @type ^`int`;
  #L42d0f2.  call temp:= `read`(v5, v1, v2, v6) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L42d0f8.  v5:= temp;
  #L42d0fa.  v6:= -1I;
  #L42d0fc.  if v5 != v6 then goto L42d106;
  #L42d100.  v4:= -1L;
  #L42d104.  return v4 @kind wide;
  #L42d106.  v6:= v0.`qc.o.c` @type ^`int`;
  #L42d10a.  v6:= v6 + v5 @kind int;
  #L42d10c.  v0.`qc.o.c` @type ^`int` := v6;
  #L42d110.  v0:= v4.`qc.c.p` @type ^`long` @kind wide;
  #L42d114.  v5:= (`long`) v5 @kind i2l;
  #L42d116.  v0:= v0 + v5 @kind long;
  #L42d118.  v4.`qc.c.p` @type ^`long` := v0 @kind wide;
  #L42d11c.  return v5 @kind wide;
  #L42d11e.  v4:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L42d120.  call temp:= `c`(v4) @signature `Lqc/l;.c:(Ljava/lang/AssertionError;)Z` @kind static;
  #L42d126.  v5:= temp;
  #L42d128.  if v5 == 0 then goto L42d138;
  #L42d12c.  v5:= new `java.io.IOException`;
  #L42d130.  call `<init>`(v5, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L42d136.  throw v5;
  #L42d138.  throw v4;
  #L42d13a.  v4:= new `java.lang.IllegalArgumentException`;
  #L42d13e.  v0:= new `java.lang.StringBuilder`;
  #L42d142.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42d148.  v1:= "byteCount < 0: " @kind object;
  #L42d14c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d152.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d158.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42d15e.  v5:= temp @kind object;
  #L42d160.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d166.  throw v4;
  catch `java.lang.AssertionError` @[L42d0be..L42d11c] goto L42d11e;
}
procedure `void` `close`(`qc.l$b` v1 @kind this) @signature `Lqc/l$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d1c0.  v0:= v1.`qc.l$b.p` @type ^`java.io.InputStream` @kind object;
  #L42d1c4.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L42d1ca.  return @kind void;
}
procedure `qc.t` `f`(`qc.l$b` v1 @kind this) @signature `Lqc/l$b;.f:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d188.  v0:= v1.`qc.l$b.o` @type ^`qc.t` @kind object;
  #L42d18c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`qc.l$b` v2 @kind this) @signature `Lqc/l$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d068.  v0:= new `java.lang.StringBuilder`;
  #L42d06c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42d072.  v1:= "source(" @kind object;
  #L42d076.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d07c.  v1:= v2.`qc.l$b.p` @type ^`java.io.InputStream` @kind object;
  #L42d080.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d086.  v1:= ")" @kind object;
  #L42d08a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d090.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42d096.  v0:= temp @kind object;
  #L42d098.  return v0 @kind object;
}
