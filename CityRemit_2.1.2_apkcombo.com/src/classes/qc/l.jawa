record `qc.l` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@qc.l.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lqc/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42d4e0.  v0:= constclass @type ^`qc.l` @kind object;
  #L42d4e4.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L42d4ea.  v0:= temp @kind object;
  #L42d4ec.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L42d4f2.  v0:= temp @kind object;
  #L42d4f4.  `@@qc.l.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L42d4f8.  return @kind void;
}
procedure `void` `<init>`(`qc.l` v0 @kind this) @signature `Lqc/l;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L42d50c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42d512.  return @kind void;
}
procedure `qc.d` `a`(`qc.r` v1 @kind object) @signature `Lqc/l;.a:(Lqc/r;)Lqc/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42d310.  v0:= new `qc.m`;
  #L42d314.  call `<init>`(v0, v1) @signature `Lqc/m;.<init>:(Lqc/r;)V` @kind direct;
  #L42d31a.  return v0 @kind object;
}
procedure `qc.e` `b`(`qc.s` v1 @kind object) @signature `Lqc/l;.b:(Lqc/s;)Lqc/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42d32c.  v0:= new `qc.n`;
  #L42d330.  call `<init>`(v0, v1) @signature `Lqc/n;.<init>:(Lqc/s;)V` @kind direct;
  #L42d336.  return v0 @kind object;
}
procedure `boolean` `c`(`java.lang.AssertionError` v1 @kind object) @signature `Lqc/l;.c:(Ljava/lang/AssertionError;)Z` @AccessFlag STATIC {
    temp;
    v0;

  #L42d2ac.  call temp:= `getCause`(v1) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L42d2b2.  v0:= temp @kind object;
  #L42d2b4.  if v0 == 0 then goto L42d2e0;
  #L42d2b8.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L42d2be.  v0:= temp @kind object;
  #L42d2c0.  if v0 == 0 then goto L42d2e0;
  #L42d2c4.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L42d2ca.  v1:= temp @kind object;
  #L42d2cc.  v0:= "getsockname failed" @kind object;
  #L42d2d0.  call temp:= `contains`(v1, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L42d2d6.  v1:= temp;
  #L42d2d8.  if v1 == 0 then goto L42d2e0;
  #L42d2dc.  v1:= 1I;
  #L42d2de.  goto L42d2e2;
  #L42d2e0.  v1:= 0I;
  #L42d2e2.  return v1;
}
procedure `qc.r` `d`(`java.io.OutputStream` v1 @kind object) @signature `Lqc/l;.d:(Ljava/io/OutputStream;)Lqc/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42d348.  v0:= new `qc.t`;
  #L42d34c.  call `<init>`(v0) @signature `Lqc/t;.<init>:()V` @kind direct;
  #L42d352.  call temp:= `e`(v1, v0) @signature `Lqc/l;.e:(Ljava/io/OutputStream;Lqc/t;)Lqc/r;` @kind static;
  #L42d358.  v1:= temp @kind object;
  #L42d35a.  return v1 @kind object;
}
procedure `qc.r` `e`(`java.io.OutputStream` v1 @kind object, `qc.t` v2 @kind object) @signature `Lqc/l;.e:(Ljava/io/OutputStream;Lqc/t;)Lqc/r;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42d36c.  if v1 == 0 then goto L42d390;
  #L42d370.  if v2 == 0 then goto L42d380;
  #L42d374.  v0:= new `qc.l$a`;
  #L42d378.  call `<init>`(v0, v2, v1) @signature `Lqc/l$a;.<init>:(Lqc/t;Ljava/io/OutputStream;)V` @kind direct;
  #L42d37e.  return v0 @kind object;
  #L42d380.  v1:= new `java.lang.IllegalArgumentException`;
  #L42d384.  v2:= "timeout == null" @kind object;
  #L42d388.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d38e.  throw v1;
  #L42d390.  v1:= new `java.lang.IllegalArgumentException`;
  #L42d394.  v2:= "out == null" @kind object;
  #L42d398.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d39e.  throw v1;
}
procedure `qc.r` `f`(`java.net.Socket` v1 @kind object) @signature `Lqc/l;.f:(Ljava/net/Socket;)Lqc/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42d3b0.  if v1 == 0 then goto L42d3f2;
  #L42d3b4.  call temp:= `getOutputStream`(v1) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L42d3ba.  v0:= temp @kind object;
  #L42d3bc.  if v0 == 0 then goto L42d3e2;
  #L42d3c0.  call temp:= `j`(v1) @signature `Lqc/l;.j:(Ljava/net/Socket;)Lqc/a;` @kind static;
  #L42d3c6.  v0:= temp @kind object;
  #L42d3c8.  call temp:= `getOutputStream`(v1) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L42d3ce.  v1:= temp @kind object;
  #L42d3d0.  call temp:= `e`(v1, v0) @signature `Lqc/l;.e:(Ljava/io/OutputStream;Lqc/t;)Lqc/r;` @kind static;
  #L42d3d6.  v1:= temp @kind object;
  #L42d3d8.  call temp:= `r`(v0, v1) @signature `Lqc/a;.r:(Lqc/r;)Lqc/r;` @kind virtual;
  #L42d3de.  v1:= temp @kind object;
  #L42d3e0.  return v1 @kind object;
  #L42d3e2.  v1:= new `java.io.IOException`;
  #L42d3e6.  v0:= "socket's output stream == null" @kind object;
  #L42d3ea.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d3f0.  throw v1;
  #L42d3f2.  v1:= new `java.lang.IllegalArgumentException`;
  #L42d3f6.  v0:= "socket == null" @kind object;
  #L42d3fa.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d400.  throw v1;
}
procedure `qc.s` `g`(`java.io.InputStream` v1 @kind object) @signature `Lqc/l;.g:(Ljava/io/InputStream;)Lqc/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42d414.  v0:= new `qc.t`;
  #L42d418.  call `<init>`(v0) @signature `Lqc/t;.<init>:()V` @kind direct;
  #L42d41e.  call temp:= `h`(v1, v0) @signature `Lqc/l;.h:(Ljava/io/InputStream;Lqc/t;)Lqc/s;` @kind static;
  #L42d424.  v1:= temp @kind object;
  #L42d426.  return v1 @kind object;
}
procedure `qc.s` `h`(`java.io.InputStream` v1 @kind object, `qc.t` v2 @kind object) @signature `Lqc/l;.h:(Ljava/io/InputStream;Lqc/t;)Lqc/s;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42d438.  if v1 == 0 then goto L42d45c;
  #L42d43c.  if v2 == 0 then goto L42d44c;
  #L42d440.  v0:= new `qc.l$b`;
  #L42d444.  call `<init>`(v0, v2, v1) @signature `Lqc/l$b;.<init>:(Lqc/t;Ljava/io/InputStream;)V` @kind direct;
  #L42d44a.  return v0 @kind object;
  #L42d44c.  v1:= new `java.lang.IllegalArgumentException`;
  #L42d450.  v2:= "timeout == null" @kind object;
  #L42d454.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d45a.  throw v1;
  #L42d45c.  v1:= new `java.lang.IllegalArgumentException`;
  #L42d460.  v2:= "in == null" @kind object;
  #L42d464.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d46a.  throw v1;
}
procedure `qc.s` `i`(`java.net.Socket` v1 @kind object) @signature `Lqc/l;.i:(Ljava/net/Socket;)Lqc/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42d47c.  if v1 == 0 then goto L42d4be;
  #L42d480.  call temp:= `getInputStream`(v1) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L42d486.  v0:= temp @kind object;
  #L42d488.  if v0 == 0 then goto L42d4ae;
  #L42d48c.  call temp:= `j`(v1) @signature `Lqc/l;.j:(Ljava/net/Socket;)Lqc/a;` @kind static;
  #L42d492.  v0:= temp @kind object;
  #L42d494.  call temp:= `getInputStream`(v1) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L42d49a.  v1:= temp @kind object;
  #L42d49c.  call temp:= `h`(v1, v0) @signature `Lqc/l;.h:(Ljava/io/InputStream;Lqc/t;)Lqc/s;` @kind static;
  #L42d4a2.  v1:= temp @kind object;
  #L42d4a4.  call temp:= `s`(v0, v1) @signature `Lqc/a;.s:(Lqc/s;)Lqc/s;` @kind virtual;
  #L42d4aa.  v1:= temp @kind object;
  #L42d4ac.  return v1 @kind object;
  #L42d4ae.  v1:= new `java.io.IOException`;
  #L42d4b2.  v0:= "socket's input stream == null" @kind object;
  #L42d4b6.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d4bc.  throw v1;
  #L42d4be.  v1:= new `java.lang.IllegalArgumentException`;
  #L42d4c2.  v0:= "socket == null" @kind object;
  #L42d4c6.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d4cc.  throw v1;
}
procedure `qc.a` `j`(`java.net.Socket` v1 @kind object) @signature `Lqc/l;.j:(Ljava/net/Socket;)Lqc/a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42d2f4.  v0:= new `qc.l$c`;
  #L42d2f8.  call `<init>`(v0, v1) @signature `Lqc/l$c;.<init>:(Ljava/net/Socket;)V` @kind direct;
  #L42d2fe.  return v0 @kind object;
}
