record `qc.o` @kind class @AccessFlag FINAL {
  `byte`[] `qc.o.a` @AccessFlag FINAL;
  `int` `qc.o.b` @AccessFlag ;
  `int` `qc.o.c` @AccessFlag ;
  `boolean` `qc.o.d` @AccessFlag ;
  `boolean` `qc.o.e` @AccessFlag ;
  `qc.o` `qc.o.f` @AccessFlag ;
  `qc.o` `qc.o.g` @AccessFlag ;
}
procedure `void` `<init>`(`qc.o` v1 @kind this) @signature `Lqc/o;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L42ea4c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42ea52.  v0:= 8192I;
  #L42ea56.  v0:= new `byte`[v0];
  #L42ea5a.  v1.`qc.o.a` @type ^`byte`[] := v0 @kind object;
  #L42ea5e.  v0:= 1I;
  #L42ea60.  v1.`qc.o.e` @type ^`boolean` := v0 @kind boolean;
  #L42ea64.  v0:= 0I;
  #L42ea66.  v1.`qc.o.d` @type ^`boolean` := v0 @kind boolean;
  #L42ea6a.  return @kind void;
}
procedure `void` `<init>`(`qc.o` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `boolean` v5 ) @signature `Lqc/o;.<init>:([BIIZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42ea7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42ea82.  v0.`qc.o.a` @type ^`byte`[] := v1 @kind object;
  #L42ea86.  v0.`qc.o.b` @type ^`int` := v2;
  #L42ea8a.  v0.`qc.o.c` @type ^`int` := v3;
  #L42ea8e.  v0.`qc.o.d` @type ^`boolean` := v4 @kind boolean;
  #L42ea92.  v0.`qc.o.e` @type ^`boolean` := v5 @kind boolean;
  #L42ea96.  return @kind void;
}
procedure `void` `a`(`qc.o` v4 @kind this) @signature `Lqc/o;.a:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42eaa8.  v0:= v4.`qc.o.g` @type ^`qc.o` @kind object;
  #L42eaac.  if v0 == v4 then goto L42eaf8;
  #L42eab0.  v1:= v0.`qc.o.e` @type ^`boolean` @kind boolean;
  #L42eab4.  if v1 != 0 then goto L42eaba;
  #L42eab8.  return @kind void;
  #L42eaba.  v1:= v4.`qc.o.c` @type ^`int`;
  #L42eabe.  v2:= v4.`qc.o.b` @type ^`int`;
  #L42eac2.  v1:= v1 - v2 @kind int;
  #L42eac4.  v2:= v0.`qc.o.c` @type ^`int`;
  #L42eac8.  v2:= v2 - 8192;
  #L42eacc.  v3:= v0.`qc.o.d` @type ^`boolean` @kind boolean;
  #L42ead0.  if v3 == 0 then goto L42ead8;
  #L42ead4.  v3:= 0I;
  #L42ead6.  goto L42eadc;
  #L42ead8.  v3:= v0.`qc.o.b` @type ^`int`;
  #L42eadc.  v2:= v2 + v3 @kind int;
  #L42eade.  if v1 <= v2 then goto L42eae4;
  #L42eae2.  return @kind void;
  #L42eae4.  call `f`(v4, v0, v1) @signature `Lqc/o;.f:(Lqc/o;I)V` @kind virtual;
  #L42eaea.  call temp:= `b`(v4) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42eaf0.  call `a`(v4) @signature `Lqc/p;.a:(Lqc/o;)V` @kind static;
  #L42eaf6.  return @kind void;
  #L42eaf8.  v0:= new `java.lang.IllegalStateException`;
  #L42eafc.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L42eb02.  throw v0;
}
procedure `qc.o` `b`(`qc.o` v4 @kind this) @signature `Lqc/o;.b:()Lqc/o;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42e934.  v0:= v4.`qc.o.f` @type ^`qc.o` @kind object;
  #L42e938.  v1:= 0I;
  #L42e93a.  if v0 == v4 then goto L42e942;
  #L42e93e.  v2:= v0 @kind object;
  #L42e940.  goto L42e944;
  #L42e942.  v2:= v1 @kind object;
  #L42e944.  v3:= v4.`qc.o.g` @type ^`qc.o` @kind object;
  #L42e948.  v3.`qc.o.f` @type ^`qc.o` := v0 @kind object;
  #L42e94c.  v0:= v4.`qc.o.f` @type ^`qc.o` @kind object;
  #L42e950.  v0.`qc.o.g` @type ^`qc.o` := v3 @kind object;
  #L42e954.  v4.`qc.o.f` @type ^`qc.o` := v1 @kind object;
  #L42e958.  v4.`qc.o.g` @type ^`qc.o` := v1 @kind object;
  #L42e95c.  return v2 @kind object;
}
procedure `qc.o` `c`(`qc.o` v1 @kind this, `qc.o` v2 @kind object) @signature `Lqc/o;.c:(Lqc/o;)Lqc/o;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42e970.  v2.`qc.o.g` @type ^`qc.o` := v1 @kind object;
  #L42e974.  v0:= v1.`qc.o.f` @type ^`qc.o` @kind object;
  #L42e978.  v2.`qc.o.f` @type ^`qc.o` := v0 @kind object;
  #L42e97c.  v0:= v1.`qc.o.f` @type ^`qc.o` @kind object;
  #L42e980.  v0.`qc.o.g` @type ^`qc.o` := v2 @kind object;
  #L42e984.  v1.`qc.o.f` @type ^`qc.o` := v2 @kind object;
  #L42e988.  return v2 @kind object;
}
procedure `qc.o` `d`(`qc.o` v7 @kind this) @signature `Lqc/o;.d:()Lqc/o;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42e99c.  v0:= 1I;
  #L42e99e.  v7.`qc.o.d` @type ^`boolean` := v0 @kind boolean;
  #L42e9a2.  v0:= new `qc.o`;
  #L42e9a6.  v2:= v7.`qc.o.a` @type ^`byte`[] @kind object;
  #L42e9aa.  v3:= v7.`qc.o.b` @type ^`int`;
  #L42e9ae.  v4:= v7.`qc.o.c` @type ^`int`;
  #L42e9b2.  v5:= 1I;
  #L42e9b4.  v6:= 0I;
  #L42e9b6.  v1:= v0 @kind object;
  #L42e9b8.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lqc/o;.<init>:([BIIZZ)V` @kind direct;
  #L42e9be.  return v0 @kind object;
}
procedure `qc.o` `e`(`qc.o` v5 @kind this, `int` v6 ) @signature `Lqc/o;.e:(I)Lqc/o;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42e9d0.  if v6 <= 0 then goto L42ea30;
  #L42e9d4.  v0:= v5.`qc.o.c` @type ^`int`;
  #L42e9d8.  v1:= v5.`qc.o.b` @type ^`int`;
  #L42e9dc.  v0:= v0 - v1 @kind int;
  #L42e9de.  if v6 > v0 then goto L42ea30;
  #L42e9e2.  v0:= 1024I;
  #L42e9e6.  if v6 < v0 then goto L42e9f4;
  #L42e9ea.  call temp:= `d`(v5) @signature `Lqc/o;.d:()Lqc/o;` @kind virtual;
  #L42e9f0.  v0:= temp @kind object;
  #L42e9f2.  goto L42ea10;
  #L42e9f4.  call temp:= `b`() @signature `Lqc/p;.b:()Lqc/o;` @kind static;
  #L42e9fa.  v0:= temp @kind object;
  #L42e9fc.  v1:= v5.`qc.o.a` @type ^`byte`[] @kind object;
  #L42ea00.  v2:= v5.`qc.o.b` @type ^`int`;
  #L42ea04.  v3:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42ea08.  v4:= 0I;
  #L42ea0a.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42ea10.  v1:= v0.`qc.o.b` @type ^`int`;
  #L42ea14.  v1:= v1 + v6 @kind int;
  #L42ea16.  v0.`qc.o.c` @type ^`int` := v1;
  #L42ea1a.  v1:= v5.`qc.o.b` @type ^`int`;
  #L42ea1e.  v1:= v1 + v6 @kind int;
  #L42ea20.  v5.`qc.o.b` @type ^`int` := v1;
  #L42ea24.  v6:= v5.`qc.o.g` @type ^`qc.o` @kind object;
  #L42ea28.  call temp:= `c`(v6, v0) @signature `Lqc/o;.c:(Lqc/o;)Lqc/o;` @kind virtual;
  #L42ea2e.  return v0 @kind object;
  #L42ea30.  v6:= new `java.lang.IllegalArgumentException`;
  #L42ea34.  call `<init>`(v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L42ea3a.  throw v6;
}
procedure `void` `f`(`qc.o` v4 @kind this, `qc.o` v5 @kind object, `int` v6 ) @signature `Lqc/o;.f:(Lqc/o;I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42eb14.  v0:= v5.`qc.o.e` @type ^`boolean` @kind boolean;
  #L42eb18.  if v0 == 0 then goto L42eba8;
  #L42eb1c.  v0:= v5.`qc.o.c` @type ^`int`;
  #L42eb20.  v1:= v0 + v6 @kind int;
  #L42eb24.  v2:= 8192I;
  #L42eb28.  if v1 <= v2 then goto L42eb7c;
  #L42eb2c.  v1:= v5.`qc.o.d` @type ^`boolean` @kind boolean;
  #L42eb30.  if v1 != 0 then goto L42eb70;
  #L42eb34.  v1:= v0 + v6 @kind int;
  #L42eb38.  v3:= v5.`qc.o.b` @type ^`int`;
  #L42eb3c.  v1:= v1 - v3 @kind int;
  #L42eb3e.  if v1 > v2 then goto L42eb64;
  #L42eb42.  v1:= v5.`qc.o.a` @type ^`byte`[] @kind object;
  #L42eb46.  v0:= v0 - v3 @kind int;
  #L42eb48.  v2:= 0I;
  #L42eb4a.  call `arraycopy`(v1, v3, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42eb50.  v0:= v5.`qc.o.c` @type ^`int`;
  #L42eb54.  v1:= v5.`qc.o.b` @type ^`int`;
  #L42eb58.  v0:= v0 - v1 @kind int;
  #L42eb5a.  v5.`qc.o.c` @type ^`int` := v0;
  #L42eb5e.  v5.`qc.o.b` @type ^`int` := v2;
  #L42eb62.  goto L42eb7c;
  #L42eb64.  v5:= new `java.lang.IllegalArgumentException`;
  #L42eb68.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L42eb6e.  throw v5;
  #L42eb70.  v5:= new `java.lang.IllegalArgumentException`;
  #L42eb74.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L42eb7a.  throw v5;
  #L42eb7c.  v0:= v4.`qc.o.a` @type ^`byte`[] @kind object;
  #L42eb80.  v1:= v4.`qc.o.b` @type ^`int`;
  #L42eb84.  v2:= v5.`qc.o.a` @type ^`byte`[] @kind object;
  #L42eb88.  v3:= v5.`qc.o.c` @type ^`int`;
  #L42eb8c.  call `arraycopy`(v0, v1, v2, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42eb92.  v0:= v5.`qc.o.c` @type ^`int`;
  #L42eb96.  v0:= v0 + v6 @kind int;
  #L42eb98.  v5.`qc.o.c` @type ^`int` := v0;
  #L42eb9c.  v5:= v4.`qc.o.b` @type ^`int`;
  #L42eba0.  v5:= v5 + v6 @kind int;
  #L42eba2.  v4.`qc.o.b` @type ^`int` := v5;
  #L42eba6.  return @kind void;
  #L42eba8.  v5:= new `java.lang.IllegalArgumentException`;
  #L42ebac.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L42ebb2.  throw v5;
}
