record `qc.h` @kind class @AccessFlag PUBLIC_ABSTRACT extends `qc.s` @kind interface {
  `qc.s` `qc.h.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`qc.h` v1 @kind this, `qc.s` v2 @kind object) @signature `Lqc/h;.<init>:(Lqc/s;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42c618.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42c61e.  if v2 == 0 then goto L42c628;
  #L42c622.  v1.`qc.h.o` @type ^`qc.s` := v2 @kind object;
  #L42c626.  return @kind void;
  #L42c628.  v2:= new `java.lang.IllegalArgumentException`;
  #L42c62c.  v0:= "delegate == null" @kind object;
  #L42c630.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c636.  throw v2;
}
procedure `qc.s` `a`(`qc.h` v1 @kind this) @signature `Lqc/h;.a:()Lqc/s;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42c5e0.  v0:= v1.`qc.h.o` @type ^`qc.s` @kind object;
  #L42c5e4.  return v0 @kind object;
}
procedure `void` `close`(`qc.h` v1 @kind this) @signature `Lqc/h;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c648.  v0:= v1.`qc.h.o` @type ^`qc.s` @kind object;
  #L42c64c.  call `close`(v0) @signature `Lqc/s;.close:()V` @kind interface;
  #L42c652.  return @kind void;
}
procedure `qc.t` `f`(`qc.h` v1 @kind this) @signature `Lqc/h;.f:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c5f8.  v0:= v1.`qc.h.o` @type ^`qc.s` @kind object;
  #L42c5fc.  call temp:= `f`(v0) @signature `Lqc/s;.f:()Lqc/t;` @kind interface;
  #L42c602.  v0:= temp @kind object;
  #L42c604.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`qc.h` v2 @kind this) @signature `Lqc/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42c580.  v0:= new `java.lang.StringBuilder`;
  #L42c584.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42c58a.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L42c590.  v1:= temp @kind object;
  #L42c592.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L42c598.  v1:= temp @kind object;
  #L42c59a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c5a0.  v1:= "(" @kind object;
  #L42c5a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c5aa.  v1:= v2.`qc.h.o` @type ^`qc.s` @kind object;
  #L42c5ae.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c5b4.  v1:= temp @kind object;
  #L42c5b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c5bc.  v1:= ")" @kind object;
  #L42c5c0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c5c6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c5cc.  v0:= temp @kind object;
  #L42c5ce.  return v0 @kind object;
}
