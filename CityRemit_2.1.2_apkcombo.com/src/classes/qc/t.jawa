record `qc.t` @kind class @AccessFlag PUBLIC {
  `boolean` `qc.t.a` @AccessFlag PRIVATE;
  `long` `qc.t.b` @AccessFlag PRIVATE;
  `long` `qc.t.c` @AccessFlag PRIVATE;
}
global `qc.t` `@@qc.t.d` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lqc/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42ed34.  v0:= new `qc.t$a`;
  #L42ed38.  call `<init>`(v0) @signature `Lqc/t$a;.<init>:()V` @kind direct;
  #L42ed3e.  `@@qc.t.d` @type ^`qc.t` := v0 @kind object;
  #L42ed42.  return @kind void;
}
procedure `void` `<init>`(`qc.t` v0 @kind this) @signature `Lqc/t;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42ed54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42ed5a.  return @kind void;
}
procedure `qc.t` `a`(`qc.t` v1 @kind this) @signature `Lqc/t;.a:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ec78.  v0:= 0I;
  #L42ec7a.  v1.`qc.t.a` @type ^`boolean` := v0 @kind boolean;
  #L42ec7e.  return v1 @kind object;
}
procedure `qc.t` `b`(`qc.t` v2 @kind this) @signature `Lqc/t;.b:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ec90.  v0:= 0L;
  #L42ec94.  v2.`qc.t.c` @type ^`long` := v0 @kind wide;
  #L42ec98.  return v2 @kind object;
}
procedure `long` `c`(`qc.t` v2 @kind this) @signature `Lqc/t;.c:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ec30.  v0:= v2.`qc.t.a` @type ^`boolean` @kind boolean;
  #L42ec34.  if v0 == 0 then goto L42ec3e;
  #L42ec38.  v0:= v2.`qc.t.b` @type ^`long` @kind wide;
  #L42ec3c.  return v0 @kind wide;
  #L42ec3e.  v0:= new `java.lang.IllegalStateException`;
  #L42ec42.  v1:= "No deadline" @kind object;
  #L42ec46.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ec4c.  throw v0;
}
procedure `qc.t` `d`(`qc.t` v1 @kind this, `long` v2 ) @signature `Lqc/t;.d:(J)Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ecac.  v0:= 1I;
  #L42ecae.  v1.`qc.t.a` @type ^`boolean` := v0 @kind boolean;
  #L42ecb2.  v1.`qc.t.b` @type ^`long` := v2 @kind wide;
  #L42ecb6.  return v1 @kind object;
}
procedure `boolean` `e`(`qc.t` v1 @kind this) @signature `Lqc/t;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ec18.  v0:= v1.`qc.t.a` @type ^`boolean` @kind boolean;
  #L42ec1c.  return v0;
}
procedure `void` `f`(`qc.t` v5 @kind this) @signature `Lqc/t;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42ed6c.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L42ed72.  v0:= temp;
  #L42ed74.  if v0 != 0 then goto L42edae;
  #L42ed78.  v0:= v5.`qc.t.a` @type ^`boolean` @kind boolean;
  #L42ed7c.  if v0 == 0 then goto L42edac;
  #L42ed80.  v0:= v5.`qc.t.b` @type ^`long` @kind wide;
  #L42ed84.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L42ed8a.  v2:= temp @kind wide;
  #L42ed8c.  v0:= v0 - v2 @kind long;
  #L42ed8e.  v2:= 0L;
  #L42ed92.  v4:= lcmp(v0, v2);
  #L42ed96.  if v4 <= 0 then goto L42ed9c;
  #L42ed9a.  goto L42edac;
  #L42ed9c.  v0:= new `java.io.InterruptedIOException`;
  #L42eda0.  v1:= "deadline reached" @kind object;
  #L42eda4.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42edaa.  throw v0;
  #L42edac.  return @kind void;
  #L42edae.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L42edb4.  v0:= temp @kind object;
  #L42edb6.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L42edbc.  v0:= new `java.io.InterruptedIOException`;
  #L42edc0.  v1:= "interrupted" @kind object;
  #L42edc4.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42edca.  throw v0;
}
procedure `qc.t` `g`(`qc.t` v3 @kind this, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lqc/t;.g:(JLjava/util/concurrent/TimeUnit;)Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42ecc8.  v0:= 0L;
  #L42eccc.  v2:= lcmp(v4, v0);
  #L42ecd0.  if v2 < 0 then goto L42ecf6;
  #L42ecd4.  if v6 == 0 then goto L42ece6;
  #L42ecd8.  call temp:= `toNanos`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L42ecde.  v4:= temp @kind wide;
  #L42ece0.  v3.`qc.t.c` @type ^`long` := v4 @kind wide;
  #L42ece4.  return v3 @kind object;
  #L42ece6.  v4:= new `java.lang.IllegalArgumentException`;
  #L42ecea.  v5:= "unit == null" @kind object;
  #L42ecee.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ecf4.  throw v4;
  #L42ecf6.  v6:= new `java.lang.IllegalArgumentException`;
  #L42ecfa.  v0:= new `java.lang.StringBuilder`;
  #L42ecfe.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42ed04.  v1:= "timeout < 0: " @kind object;
  #L42ed08.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ed0e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ed14.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42ed1a.  v4:= temp @kind object;
  #L42ed1c.  call `<init>`(v6, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ed22.  throw v6;
}
procedure `long` `h`(`qc.t` v2 @kind this) @signature `Lqc/t;.h:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ec60.  v0:= v2.`qc.t.c` @type ^`long` @kind wide;
  #L42ec64.  return v0 @kind wide;
}
