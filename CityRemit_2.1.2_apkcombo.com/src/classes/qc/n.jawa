record `qc.n` @kind class @AccessFlag FINAL extends `qc.e` @kind interface {
  `qc.c` `qc.n.o` @AccessFlag PUBLIC_FINAL;
  `qc.s` `qc.n.p` @AccessFlag PUBLIC_FINAL;
  `boolean` `qc.n.q` @AccessFlag ;
}
procedure `void` `<init>`(`qc.n` v1 @kind this, `qc.s` v2 @kind object) @signature `Lqc/n;.<init>:(Lqc/s;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L42e0e8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42e0ee.  v0:= new `qc.c`;
  #L42e0f2.  call `<init>`(v0) @signature `Lqc/c;.<init>:()V` @kind direct;
  #L42e0f8.  v1.`qc.n.o` @type ^`qc.c` := v0 @kind object;
  #L42e0fc.  v0:= "source == null" @kind object;
  #L42e100.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42e106.  v1.`qc.n.p` @type ^`qc.s` := v2 @kind object;
  #L42e10a.  return @kind void;
}
procedure `byte`[] `B`(`qc.n` v1 @kind this, `long` v2 ) @signature `Lqc/n;.B:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42da68.  call `U`(v1, v2) @signature `Lqc/n;.U:(J)V` @kind virtual;
  #L42da6e.  v0:= v1.`qc.n.o` @type ^`qc.c` @kind object;
  #L42da72.  call temp:= `B`(v0, v2) @signature `Lqc/c;.B:(J)[B` @kind virtual;
  #L42da78.  v2:= temp @kind object;
  #L42da7a.  return v2 @kind object;
}
procedure `short` `H`(`qc.n` v2 @kind this) @signature `Lqc/n;.H:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e0c0.  v0:= 2L;
  #L42e0c4.  call `U`(v2, v0) @signature `Lqc/n;.U:(J)V` @kind virtual;
  #L42e0ca.  v0:= v2.`qc.n.o` @type ^`qc.c` @kind object;
  #L42e0ce.  call temp:= `H`(v0) @signature `Lqc/c;.H:()S` @kind virtual;
  #L42e0d4.  v0:= temp;
  #L42e0d6.  return v0;
}
procedure `java.lang.String` `L`(`qc.n` v12 @kind this, `long` v13 ) @signature `Lqc/n;.L:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L42db54.  v0:= 0L;
  #L42db58.  v2:= lcmp(v13, v0);
  #L42db5c.  if v2 < 0 then goto L42dca2;
  #L42db60.  v0:= 1L;
  #L42db64.  v2:= 9223372036854775807L;
  #L42db6e.  v4:= lcmp(v13, v2);
  #L42db72.  if v4 != 0 then goto L42db7a;
  #L42db76.  v4:= v2 @kind wide;
  #L42db78.  goto L42db7e;
  #L42db7a.  v4:= v13 + v0 @kind long;
  #L42db7e.  v7:= 10I;
  #L42db82.  v8:= 0L;
  #L42db86.  v6:= v12 @kind object;
  #L42db88.  v10:= v4 @kind wide;
  #L42db8a.  call temp:= `a`(v6, v7, v8, v10) @signature `Lqc/n;.a:(BJJ)J` @kind virtual;
  #L42db90.  v6:= temp @kind wide;
  #L42db92.  v8:= -1L;
  #L42db96.  v10:= lcmp(v6, v8);
  #L42db9a.  if v10 == 0 then goto L42dbac;
  #L42db9e.  v13:= v12.`qc.n.o` @type ^`qc.c` @kind object;
  #L42dba2.  call temp:= `g0`(v13, v6) @signature `Lqc/c;.g0:(J)Ljava/lang/String;` @kind virtual;
  #L42dba8.  v13:= temp @kind object;
  #L42dbaa.  return v13 @kind object;
  #L42dbac.  v6:= lcmp(v4, v2);
  #L42dbb0.  if v6 >= 0 then goto L42dc08;
  #L42dbb4.  call temp:= `c`(v12, v4) @signature `Lqc/n;.c:(J)Z` @kind virtual;
  #L42dbba.  v2:= temp;
  #L42dbbc.  if v2 == 0 then goto L42dc08;
  #L42dbc0.  v2:= v12.`qc.n.o` @type ^`qc.c` @kind object;
  #L42dbc4.  v6:= v4 - v0 @kind long;
  #L42dbc8.  call temp:= `N`(v2, v6) @signature `Lqc/c;.N:(J)B` @kind virtual;
  #L42dbce.  v2:= temp;
  #L42dbd0.  v3:= 13I;
  #L42dbd4.  if v2 != v3 then goto L42dc08;
  #L42dbd8.  v0:= v0 + v4 @kind long;
  #L42dbda.  call temp:= `c`(v12, v0) @signature `Lqc/n;.c:(J)Z` @kind virtual;
  #L42dbe0.  v0:= temp;
  #L42dbe2.  if v0 == 0 then goto L42dc08;
  #L42dbe6.  v0:= v12.`qc.n.o` @type ^`qc.c` @kind object;
  #L42dbea.  call temp:= `N`(v0, v4) @signature `Lqc/c;.N:(J)B` @kind virtual;
  #L42dbf0.  v0:= temp;
  #L42dbf2.  v1:= 10I;
  #L42dbf6.  if v0 != v1 then goto L42dc08;
  #L42dbfa.  v13:= v12.`qc.n.o` @type ^`qc.c` @kind object;
  #L42dbfe.  call temp:= `g0`(v13, v4) @signature `Lqc/c;.g0:(J)Ljava/lang/String;` @kind virtual;
  #L42dc04.  v13:= temp @kind object;
  #L42dc06.  return v13 @kind object;
  #L42dc08.  v6:= new `qc.c`;
  #L42dc0c.  call `<init>`(v6) @signature `Lqc/c;.<init>:()V` @kind direct;
  #L42dc12.  v0:= v12.`qc.n.o` @type ^`qc.c` @kind object;
  #L42dc16.  v2:= 0L;
  #L42dc1a.  v4:= 32L;
  #L42dc1e.  call temp:= `h0`(v0) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L42dc24.  v7:= temp @kind wide;
  #L42dc26.  call temp:= `min`(v4, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L42dc2c.  v4:= temp @kind wide;
  #L42dc2e.  v1:= v6 @kind object;
  #L42dc30.  call temp:= `J`(v0, v1, v2, v4) @signature `Lqc/c;.J:(Lqc/c;JJ)Lqc/c;` @kind virtual;
  #L42dc36.  v0:= new `java.io.EOFException`;
  #L42dc3a.  v1:= new `java.lang.StringBuilder`;
  #L42dc3e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42dc44.  v2:= "\\n not found: limit=" @kind object;
  #L42dc48.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dc4e.  v2:= v12.`qc.n.o` @type ^`qc.c` @kind object;
  #L42dc52.  call temp:= `h0`(v2) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L42dc58.  v2:= temp @kind wide;
  #L42dc5a.  call temp:= `min`(v2, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L42dc60.  v13:= temp @kind wide;
  #L42dc62.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dc68.  v13:= " content=" @kind object;
  #L42dc6c.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dc72.  call temp:= `c0`(v6) @signature `Lqc/c;.c0:()Lqc/f;` @kind virtual;
  #L42dc78.  v13:= temp @kind object;
  #L42dc7a.  call temp:= `r`(v13) @signature `Lqc/f;.r:()Ljava/lang/String;` @kind virtual;
  #L42dc80.  v13:= temp @kind object;
  #L42dc82.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dc88.  v13:= 8230I;
  #L42dc8c.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dc92.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42dc98.  v13:= temp @kind object;
  #L42dc9a.  call `<init>`(v0, v13) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42dca0.  throw v0;
  #L42dca2.  v0:= new `java.lang.IllegalArgumentException`;
  #L42dca6.  v1:= new `java.lang.StringBuilder`;
  #L42dcaa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42dcb0.  v2:= "limit < 0: " @kind object;
  #L42dcb4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dcba.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dcc0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42dcc6.  v13:= temp @kind object;
  #L42dcc8.  call `<init>`(v0, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42dcce.  throw v0;
}
procedure `long` `T`(`qc.n` v6 @kind this, `qc.c` v7 @kind object, `long` v8 ) @signature `Lqc/n;.T:(Lqc/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42de24.  if v7 == 0 then goto L42dec6;
  #L42de28.  v0:= 0L;
  #L42de2c.  v2:= lcmp(v8, v0);
  #L42de30.  if v2 < 0 then goto L42de98;
  #L42de34.  v2:= v6.`qc.n.q` @type ^`boolean` @kind boolean;
  #L42de38.  if v2 != 0 then goto L42de88;
  #L42de3c.  v2:= v6.`qc.n.o` @type ^`qc.c` @kind object;
  #L42de40.  v3:= v2.`qc.c.p` @type ^`long` @kind wide;
  #L42de44.  v5:= lcmp(v3, v0);
  #L42de48.  if v5 != 0 then goto L42de6a;
  #L42de4c.  v0:= v6.`qc.n.p` @type ^`qc.s` @kind object;
  #L42de50.  v3:= 8192L;
  #L42de54.  call temp:= `T`(v0, v2, v3) @signature `Lqc/s;.T:(Lqc/c;J)J` @kind interface;
  #L42de5a.  v0:= temp @kind wide;
  #L42de5c.  v2:= -1L;
  #L42de60.  v4:= lcmp(v0, v2);
  #L42de64.  if v4 != 0 then goto L42de6a;
  #L42de68.  return v2 @kind wide;
  #L42de6a.  v0:= v6.`qc.n.o` @type ^`qc.c` @kind object;
  #L42de6e.  v0:= v0.`qc.c.p` @type ^`long` @kind wide;
  #L42de72.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L42de78.  v8:= temp @kind wide;
  #L42de7a.  v0:= v6.`qc.n.o` @type ^`qc.c` @kind object;
  #L42de7e.  call temp:= `T`(v0, v7, v8) @signature `Lqc/c;.T:(Lqc/c;J)J` @kind virtual;
  #L42de84.  v7:= temp @kind wide;
  #L42de86.  return v7 @kind wide;
  #L42de88.  v7:= new `java.lang.IllegalStateException`;
  #L42de8c.  v8:= "closed" @kind object;
  #L42de90.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42de96.  throw v7;
  #L42de98.  v7:= new `java.lang.IllegalArgumentException`;
  #L42de9c.  v0:= new `java.lang.StringBuilder`;
  #L42dea0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42dea6.  v1:= "byteCount < 0: " @kind object;
  #L42deaa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42deb0.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42deb6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42debc.  v8:= temp @kind object;
  #L42debe.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42dec4.  throw v7;
  #L42dec6.  v7:= new `java.lang.IllegalArgumentException`;
  #L42deca.  v8:= "sink == null" @kind object;
  #L42dece.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ded4.  throw v7;
}
procedure `void` `U`(`qc.n` v0 @kind this, `long` v1 ) @signature `Lqc/n;.U:(J)V` @AccessFlag PUBLIC {
    temp;

  #L42e1c4.  call temp:= `c`(v0, v1) @signature `Lqc/n;.c:(J)Z` @kind virtual;
  #L42e1ca.  v1:= temp;
  #L42e1cc.  if v1 == 0 then goto L42e1d2;
  #L42e1d0.  return @kind void;
  #L42e1d2.  v1:= new `java.io.EOFException`;
  #L42e1d6.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L42e1dc.  throw v1;
}
procedure `long` `W`(`qc.n` v6 @kind this, `byte` v7 ) @signature `Lqc/n;.W:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42dd24.  v2:= 0L;
  #L42dd28.  v4:= 9223372036854775807L;
  #L42dd32.  v0:= v6 @kind object;
  #L42dd34.  v1:= v7;
  #L42dd36.  call temp:= `a`(v0, v1, v2, v4) @signature `Lqc/n;.a:(BJJ)J` @kind virtual;
  #L42dd3c.  v0:= temp @kind wide;
  #L42dd3e.  return v0 @kind wide;
}
procedure `long` `Y`(`qc.n` v6 @kind this) @signature `Lqc/n;.Y:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42df88.  v0:= 1L;
  #L42df8c.  call `U`(v6, v0) @signature `Lqc/n;.U:(J)V` @kind virtual;
  #L42df92.  v0:= 0I;
  #L42df94.  v1:= 0I;
  #L42df96.  v2:= v1 + 1;
  #L42df9a.  v3:= (`long`) v2 @kind i2l;
  #L42df9c.  call temp:= `c`(v6, v3) @signature `Lqc/n;.c:(J)Z` @kind virtual;
  #L42dfa2.  v3:= temp;
  #L42dfa4.  if v3 == 0 then goto L42e01c;
  #L42dfa8.  v3:= v6.`qc.n.o` @type ^`qc.c` @kind object;
  #L42dfac.  v4:= (`long`) v1 @kind i2l;
  #L42dfae.  call temp:= `N`(v3, v4) @signature `Lqc/c;.N:(J)B` @kind virtual;
  #L42dfb4.  v3:= temp;
  #L42dfb6.  v4:= 48I;
  #L42dfba.  if v3 < v4 then goto L42dfc6;
  #L42dfbe.  v4:= 57I;
  #L42dfc2.  if v3 <= v4 then goto L42dfe8;
  #L42dfc6.  v4:= 97I;
  #L42dfca.  if v3 < v4 then goto L42dfd6;
  #L42dfce.  v4:= 102I;
  #L42dfd2.  if v3 <= v4 then goto L42dfe8;
  #L42dfd6.  v4:= 65I;
  #L42dfda.  if v3 < v4 then goto L42dfec;
  #L42dfde.  v4:= 70I;
  #L42dfe2.  if v3 <= v4 then goto L42dfe8;
  #L42dfe6.  goto L42dfec;
  #L42dfe8.  v1:= v2;
  #L42dfea.  goto L42df96;
  #L42dfec.  if v1 == 0 then goto L42dff2;
  #L42dff0.  goto L42e01c;
  #L42dff2.  v1:= new `java.lang.NumberFormatException`;
  #L42dff6.  v2:= 1I;
  #L42dff8.  v2:= new `java.lang.Object`[v2];
  #L42dffc.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L42e002.  v3:= temp @kind object;
  #L42e004.  v2[v0]:= v3 @kind object;
  #L42e008.  v0:= "Expected leading [0-9a-fA-F] character but was %#x" @kind object;
  #L42e00c.  call temp:= `format`(v0, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L42e012.  v0:= temp @kind object;
  #L42e014.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e01a.  throw v1;
  #L42e01c.  v0:= v6.`qc.n.o` @type ^`qc.c` @kind object;
  #L42e020.  call temp:= `Y`(v0) @signature `Lqc/c;.Y:()J` @kind virtual;
  #L42e026.  v0:= temp @kind wide;
  #L42e028.  return v0 @kind wide;
}
procedure `long` `Z`(`qc.n` v9 @kind this, `qc.r` v10 @kind object) @signature `Lqc/n;.Z:(Lqc/r;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L42dee8.  if v10 == 0 then goto L42df66;
  #L42deec.  v0:= 0L;
  #L42def0.  v2:= v0 @kind wide;
  #L42def2.  v4:= v9.`qc.n.p` @type ^`qc.s` @kind object;
  #L42def6.  v5:= v9.`qc.n.o` @type ^`qc.c` @kind object;
  #L42defa.  v6:= 8192L;
  #L42defe.  call temp:= `T`(v4, v5, v6) @signature `Lqc/s;.T:(Lqc/c;J)J` @kind interface;
  #L42df04.  v4:= temp @kind wide;
  #L42df06.  v6:= -1L;
  #L42df0a.  v8:= lcmp(v4, v6);
  #L42df0e.  v4:= v9.`qc.n.o` @type ^`qc.c` @kind object;
  #L42df12.  if v8 == 0 then goto L42df34;
  #L42df16.  call temp:= `G`(v4) @signature `Lqc/c;.G:()J` @kind virtual;
  #L42df1c.  v4:= temp @kind wide;
  #L42df1e.  v6:= lcmp(v4, v0);
  #L42df22.  if v6 <= 0 then goto L42def2;
  #L42df26.  v2:= v2 + v4 @kind long;
  #L42df28.  v6:= v9.`qc.n.o` @type ^`qc.c` @kind object;
  #L42df2c.  call `q`(v10, v6, v4) @signature `Lqc/r;.q:(Lqc/c;J)V` @kind interface;
  #L42df32.  goto L42def2;
  #L42df34.  call temp:= `h0`(v4) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L42df3a.  v4:= temp @kind wide;
  #L42df3c.  v6:= lcmp(v4, v0);
  #L42df40.  if v6 <= 0 then goto L42df64;
  #L42df44.  v0:= v9.`qc.n.o` @type ^`qc.c` @kind object;
  #L42df48.  call temp:= `h0`(v0) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L42df4e.  v0:= temp @kind wide;
  #L42df50.  v2:= v2 + v0 @kind long;
  #L42df52.  v0:= v9.`qc.n.o` @type ^`qc.c` @kind object;
  #L42df56.  call temp:= `h0`(v0) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L42df5c.  v4:= temp @kind wide;
  #L42df5e.  call `q`(v10, v0, v4) @signature `Lqc/r;.q:(Lqc/c;J)V` @kind interface;
  #L42df64.  return v2 @kind wide;
  #L42df66.  v10:= new `java.lang.IllegalArgumentException`;
  #L42df6a.  v0:= "sink == null" @kind object;
  #L42df6e.  call `<init>`(v10, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42df74.  throw v10;
}
procedure `long` `a`(`qc.n` v9 @kind this, `byte` v10 , `long` v11 , `long` v13 ) @signature `Lqc/n;.a:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L42dd50.  v0:= v9.`qc.n.q` @type ^`boolean` @kind boolean;
  #L42dd54.  if v0 != 0 then goto L42de04;
  #L42dd58.  v0:= 0L;
  #L42dd5c.  v2:= lcmp(v11, v0);
  #L42dd60.  if v2 < 0 then goto L42ddca;
  #L42dd64.  v0:= lcmp(v13, v11);
  #L42dd68.  if v0 < 0 then goto L42ddca;
  #L42dd6c.  v7:= -1L;
  #L42dd70.  v0:= lcmp(v11, v13);
  #L42dd74.  if v0 >= 0 then goto L42ddc8;
  #L42dd78.  v1:= v9.`qc.n.o` @type ^`qc.c` @kind object;
  #L42dd7c.  v2:= v10;
  #L42dd7e.  v3:= v11 @kind wide;
  #L42dd80.  v5:= v13 @kind wide;
  #L42dd82.  call temp:= `O`(v1, v2, v3, v5) @signature `Lqc/c;.O:(BJJ)J` @kind virtual;
  #L42dd88.  v0:= temp @kind wide;
  #L42dd8a.  v2:= lcmp(v0, v7);
  #L42dd8e.  if v2 == 0 then goto L42dd94;
  #L42dd92.  return v0 @kind wide;
  #L42dd94.  v0:= v9.`qc.n.o` @type ^`qc.c` @kind object;
  #L42dd98.  v1:= v0.`qc.c.p` @type ^`long` @kind wide;
  #L42dd9c.  v3:= lcmp(v1, v13);
  #L42dda0.  if v3 >= 0 then goto L42ddc8;
  #L42dda4.  v3:= v9.`qc.n.p` @type ^`qc.s` @kind object;
  #L42dda8.  v4:= 8192L;
  #L42ddac.  call temp:= `T`(v3, v0, v4) @signature `Lqc/s;.T:(Lqc/c;J)J` @kind interface;
  #L42ddb2.  v3:= temp @kind wide;
  #L42ddb4.  v0:= lcmp(v3, v7);
  #L42ddb8.  if v0 != 0 then goto L42ddbe;
  #L42ddbc.  goto L42ddc8;
  #L42ddbe.  call temp:= `max`(v11, v1) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L42ddc4.  v11:= temp @kind wide;
  #L42ddc6.  goto L42dd6c;
  #L42ddc8.  return v7 @kind wide;
  #L42ddca.  v10:= new `java.lang.IllegalArgumentException`;
  #L42ddce.  v0:= 2I;
  #L42ddd0.  v0:= new `java.lang.Object`[v0];
  #L42ddd4.  v1:= 0I;
  #L42ddd6.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L42dddc.  v11:= temp @kind object;
  #L42ddde.  v0[v1]:= v11 @kind object;
  #L42dde2.  v11:= 1I;
  #L42dde4.  call temp:= `valueOf`(v13) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L42ddea.  v12:= temp @kind object;
  #L42ddec.  v0[v11]:= v12 @kind object;
  #L42ddf0.  v11:= "fromIndex=%s toIndex=%s" @kind object;
  #L42ddf4.  call temp:= `format`(v11, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L42ddfa.  v11:= temp @kind object;
  #L42ddfc.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42de02.  throw v10;
  #L42de04.  v10:= new `java.lang.IllegalStateException`;
  #L42de08.  v11:= "closed" @kind object;
  #L42de0c.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42de12.  throw v10;
}
procedure `qc.c` `b`(`qc.n` v1 @kind this) @signature `Lqc/n;.b:()Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e03c.  v0:= v1.`qc.n.o` @type ^`qc.c` @kind object;
  #L42e040.  return v0 @kind object;
}
procedure `boolean` `c`(`qc.n` v5 @kind this, `long` v6 ) @signature `Lqc/n;.c:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42d9a8.  v0:= 0L;
  #L42d9ac.  v2:= lcmp(v6, v0);
  #L42d9b0.  if v2 < 0 then goto L42da00;
  #L42d9b4.  v0:= v5.`qc.n.q` @type ^`boolean` @kind boolean;
  #L42d9b8.  if v0 != 0 then goto L42d9f0;
  #L42d9bc.  v0:= v5.`qc.n.o` @type ^`qc.c` @kind object;
  #L42d9c0.  v1:= v0.`qc.c.p` @type ^`long` @kind wide;
  #L42d9c4.  v3:= lcmp(v1, v6);
  #L42d9c8.  if v3 >= 0 then goto L42d9ec;
  #L42d9cc.  v1:= v5.`qc.n.p` @type ^`qc.s` @kind object;
  #L42d9d0.  v2:= 8192L;
  #L42d9d4.  call temp:= `T`(v1, v0, v2) @signature `Lqc/s;.T:(Lqc/c;J)J` @kind interface;
  #L42d9da.  v0:= temp @kind wide;
  #L42d9dc.  v2:= -1L;
  #L42d9e0.  v4:= lcmp(v0, v2);
  #L42d9e4.  if v4 != 0 then goto L42d9bc;
  #L42d9e8.  v6:= 0I;
  #L42d9ea.  return v6;
  #L42d9ec.  v6:= 1I;
  #L42d9ee.  return v6;
  #L42d9f0.  v6:= new `java.lang.IllegalStateException`;
  #L42d9f4.  v7:= "closed" @kind object;
  #L42d9f8.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d9fe.  throw v6;
  #L42da00.  v0:= new `java.lang.IllegalArgumentException`;
  #L42da04.  v1:= new `java.lang.StringBuilder`;
  #L42da08.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42da0e.  v2:= "byteCount < 0: " @kind object;
  #L42da12.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42da18.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42da1e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42da24.  v6:= temp @kind object;
  #L42da26.  call `<init>`(v0, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42da2c.  throw v0;
}
procedure `void` `close`(`qc.n` v1 @kind this) @signature `Lqc/n;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e11c.  v0:= v1.`qc.n.q` @type ^`boolean` @kind boolean;
  #L42e120.  if v0 == 0 then goto L42e126;
  #L42e124.  return @kind void;
  #L42e126.  v0:= 1I;
  #L42e128.  v1.`qc.n.q` @type ^`boolean` := v0 @kind boolean;
  #L42e12c.  v0:= v1.`qc.n.p` @type ^`qc.s` @kind object;
  #L42e130.  call `close`(v0) @signature `Lqc/s;.close:()V` @kind interface;
  #L42e136.  v0:= v1.`qc.n.o` @type ^`qc.c` @kind object;
  #L42e13a.  call `a`(v0) @signature `Lqc/c;.a:()V` @kind virtual;
  #L42e140.  return @kind void;
}
procedure `void` `d`(`qc.n` v6 @kind this, `long` v7 ) @signature `Lqc/n;.d:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42e1f0.  v0:= v6.`qc.n.q` @type ^`boolean` @kind boolean;
  #L42e1f4.  if v0 != 0 then goto L42e262;
  #L42e1f8.  v0:= 0L;
  #L42e1fc.  v2:= lcmp(v7, v0);
  #L42e200.  if v2 <= 0 then goto L42e260;
  #L42e204.  v2:= v6.`qc.n.o` @type ^`qc.c` @kind object;
  #L42e208.  v3:= v2.`qc.c.p` @type ^`long` @kind wide;
  #L42e20c.  v5:= lcmp(v3, v0);
  #L42e210.  if v5 != 0 then goto L42e23e;
  #L42e214.  v0:= v6.`qc.n.p` @type ^`qc.s` @kind object;
  #L42e218.  v3:= 8192L;
  #L42e21c.  call temp:= `T`(v0, v2, v3) @signature `Lqc/s;.T:(Lqc/c;J)J` @kind interface;
  #L42e222.  v0:= temp @kind wide;
  #L42e224.  v2:= -1L;
  #L42e228.  v4:= lcmp(v0, v2);
  #L42e22c.  if v4 == 0 then goto L42e232;
  #L42e230.  goto L42e23e;
  #L42e232.  v7:= new `java.io.EOFException`;
  #L42e236.  call `<init>`(v7) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L42e23c.  throw v7;
  #L42e23e.  v0:= v6.`qc.n.o` @type ^`qc.c` @kind object;
  #L42e242.  call temp:= `h0`(v0) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L42e248.  v0:= temp @kind wide;
  #L42e24a.  call temp:= `min`(v7, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L42e250.  v0:= temp @kind wide;
  #L42e252.  v2:= v6.`qc.n.o` @type ^`qc.c` @kind object;
  #L42e256.  call `d`(v2, v0) @signature `Lqc/c;.d:(J)V` @kind virtual;
  #L42e25c.  v7:= v7 - v0 @kind long;
  #L42e25e.  goto L42e1f8;
  #L42e260.  return @kind void;
  #L42e262.  v7:= new `java.lang.IllegalStateException`;
  #L42e266.  v8:= "closed" @kind object;
  #L42e26a.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e270.  throw v7;
}
procedure `qc.t` `f`(`qc.n` v1 @kind this) @signature `Lqc/n;.f:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e078.  v0:= v1.`qc.n.p` @type ^`qc.s` @kind object;
  #L42e07c.  call temp:= `f`(v0) @signature `Lqc/s;.f:()Lqc/t;` @kind interface;
  #L42e082.  v0:= temp @kind object;
  #L42e084.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`qc.n` v1 @kind this) @signature `Lqc/n;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d98c.  v0:= v1.`qc.n.q` @type ^`boolean` @kind boolean;
  #L42d990.  v0:= v0 ^~ 1;
  #L42d994.  return v0;
}
procedure `qc.f` `n`(`qc.n` v1 @kind this, `long` v2 ) @signature `Lqc/n;.n:(J)Lqc/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e054.  call `U`(v1, v2) @signature `Lqc/n;.U:(J)V` @kind virtual;
  #L42e05a.  v0:= v1.`qc.n.o` @type ^`qc.c` @kind object;
  #L42e05e.  call temp:= `n`(v0, v2) @signature `Lqc/c;.n:(J)Lqc/f;` @kind virtual;
  #L42e064.  v2:= temp @kind object;
  #L42e066.  return v2 @kind object;
}
procedure `int` `read`(`qc.n` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lqc/n;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42da8c.  v0:= v6.`qc.n.o` @type ^`qc.c` @kind object;
  #L42da90.  v1:= v0.`qc.c.p` @type ^`long` @kind wide;
  #L42da94.  v3:= 0L;
  #L42da98.  v5:= lcmp(v1, v3);
  #L42da9c.  if v5 != 0 then goto L42dac0;
  #L42daa0.  v1:= v6.`qc.n.p` @type ^`qc.s` @kind object;
  #L42daa4.  v2:= 8192L;
  #L42daa8.  call temp:= `T`(v1, v0, v2) @signature `Lqc/s;.T:(Lqc/c;J)J` @kind interface;
  #L42daae.  v0:= temp @kind wide;
  #L42dab0.  v2:= -1L;
  #L42dab4.  v4:= lcmp(v0, v2);
  #L42dab8.  if v4 != 0 then goto L42dac0;
  #L42dabc.  v7:= -1I;
  #L42dabe.  return v7;
  #L42dac0.  v0:= v6.`qc.n.o` @type ^`qc.c` @kind object;
  #L42dac4.  call temp:= `read`(v0, v7) @signature `Lqc/c;.read:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L42daca.  v7:= temp;
  #L42dacc.  return v7;
}
procedure `byte` `readByte`(`qc.n` v2 @kind this) @signature `Lqc/n;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42da40.  v0:= 1L;
  #L42da44.  call `U`(v2, v0) @signature `Lqc/n;.U:(J)V` @kind virtual;
  #L42da4a.  v0:= v2.`qc.n.o` @type ^`qc.c` @kind object;
  #L42da4e.  call temp:= `readByte`(v0) @signature `Lqc/c;.readByte:()B` @kind virtual;
  #L42da54.  v0:= temp;
  #L42da56.  return v0;
}
procedure `void` `readFully`(`qc.n` v8 @kind this, `byte`[] v9 @kind object) @signature `Lqc/n;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L42e154.  v0:= length @variable v9;
  #L42e156.  v0:= (`long`) v0 @kind i2l;
  #L42e158.  call `U`(v8, v0) @signature `Lqc/n;.U:(J)V` @kind virtual;
  #L42e15e.  v0:= v8.`qc.n.o` @type ^`qc.c` @kind object;
  #L42e162.  call `readFully`(v0, v9) @signature `Lqc/c;.readFully:([B)V` @kind virtual;
  #L42e168.  return @kind void;
  #L42e16a.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L42e16c.  v1:= 0I;
  #L42e16e.  v2:= v8.`qc.n.o` @type ^`qc.c` @kind object;
  #L42e172.  v3:= v2.`qc.c.p` @type ^`long` @kind wide;
  #L42e176.  v5:= 0L;
  #L42e17a.  v7:= lcmp(v3, v5);
  #L42e17e.  if v7 <= 0 then goto L42e1a2;
  #L42e182.  v4:= (`int`) v3 @kind l2i;
  #L42e184.  call temp:= `a0`(v2, v9, v1, v4) @signature `Lqc/c;.a0:([BII)I` @kind virtual;
  #L42e18a.  v2:= temp;
  #L42e18c.  v3:= -1I;
  #L42e18e.  if v2 == v3 then goto L42e196;
  #L42e192.  v1:= v1 + v2 @kind int;
  #L42e194.  goto L42e16e;
  #L42e196.  v9:= new `java.lang.AssertionError`;
  #L42e19a.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L42e1a0.  throw v9;
  #L42e1a2.  throw v0;
  catch `java.io.EOFException` @[L42e154..L42e15e] goto L42e16a;
}
procedure `int` `readInt`(`qc.n` v2 @kind this) @signature `Lqc/n;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42dae0.  v0:= 4L;
  #L42dae4.  call `U`(v2, v0) @signature `Lqc/n;.U:(J)V` @kind virtual;
  #L42daea.  v0:= v2.`qc.n.o` @type ^`qc.c` @kind object;
  #L42daee.  call temp:= `readInt`(v0) @signature `Lqc/c;.readInt:()I` @kind virtual;
  #L42daf4.  v0:= temp;
  #L42daf6.  return v0;
}
procedure `short` `readShort`(`qc.n` v2 @kind this) @signature `Lqc/n;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e098.  v0:= 2L;
  #L42e09c.  call `U`(v2, v0) @signature `Lqc/n;.U:(J)V` @kind virtual;
  #L42e0a2.  v0:= v2.`qc.n.o` @type ^`qc.c` @kind object;
  #L42e0a6.  call temp:= `readShort`(v0) @signature `Lqc/c;.readShort:()S` @kind virtual;
  #L42e0ac.  v0:= temp;
  #L42e0ae.  return v0;
}
procedure `java.lang.String` `toString`(`qc.n` v2 @kind this) @signature `Lqc/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42dce0.  v0:= new `java.lang.StringBuilder`;
  #L42dce4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42dcea.  v1:= "buffer(" @kind object;
  #L42dcee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dcf4.  v1:= v2.`qc.n.p` @type ^`qc.s` @kind object;
  #L42dcf8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dcfe.  v1:= ")" @kind object;
  #L42dd02.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dd08.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42dd0e.  v0:= temp @kind object;
  #L42dd10.  return v0 @kind object;
}
procedure `java.lang.String` `u`(`qc.n` v2 @kind this) @signature `Lqc/n;.u:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42db30.  v0:= 9223372036854775807L;
  #L42db3a.  call temp:= `L`(v2, v0) @signature `Lqc/n;.L:(J)Ljava/lang/String;` @kind virtual;
  #L42db40.  v0:= temp @kind object;
  #L42db42.  return v0 @kind object;
}
procedure `int` `y`(`qc.n` v2 @kind this) @signature `Lqc/n;.y:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42db08.  v0:= 4L;
  #L42db0c.  call `U`(v2, v0) @signature `Lqc/n;.U:(J)V` @kind virtual;
  #L42db12.  v0:= v2.`qc.n.o` @type ^`qc.c` @kind object;
  #L42db16.  call temp:= `y`(v0) @signature `Lqc/c;.y:()I` @kind virtual;
  #L42db1c.  v0:= temp;
  #L42db1e.  return v0;
}
procedure `boolean` `z`(`qc.n` v5 @kind this) @signature `Lqc/n;.z:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42d92c.  v0:= v5.`qc.n.q` @type ^`boolean` @kind boolean;
  #L42d930.  if v0 != 0 then goto L42d96c;
  #L42d934.  v0:= v5.`qc.n.o` @type ^`qc.c` @kind object;
  #L42d938.  call temp:= `z`(v0) @signature `Lqc/c;.z:()Z` @kind virtual;
  #L42d93e.  v0:= temp;
  #L42d940.  if v0 == 0 then goto L42d968;
  #L42d944.  v0:= v5.`qc.n.p` @type ^`qc.s` @kind object;
  #L42d948.  v1:= v5.`qc.n.o` @type ^`qc.c` @kind object;
  #L42d94c.  v2:= 8192L;
  #L42d950.  call temp:= `T`(v0, v1, v2) @signature `Lqc/s;.T:(Lqc/c;J)J` @kind interface;
  #L42d956.  v0:= temp @kind wide;
  #L42d958.  v2:= -1L;
  #L42d95c.  v4:= lcmp(v0, v2);
  #L42d960.  if v4 != 0 then goto L42d968;
  #L42d964.  v0:= 1I;
  #L42d966.  goto L42d96a;
  #L42d968.  v0:= 0I;
  #L42d96a.  return v0;
  #L42d96c.  v0:= new `java.lang.IllegalStateException`;
  #L42d970.  v1:= "closed" @kind object;
  #L42d974.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d97a.  throw v0;
}
