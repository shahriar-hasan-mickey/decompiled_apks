record `qc.q` @kind class @AccessFlag FINAL extends `qc.f` @kind class {
  `byte`[][] `qc.q.t` @AccessFlag FINAL_TRANSIENT;
  `int`[] `qc.q.u` @AccessFlag FINAL_TRANSIENT;
}
procedure `void` `<init>`(`qc.q` v7 @kind this, `qc.c` v8 @kind object, `int` v9 ) @signature `Lqc/q;.<init>:(Lqc/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42e7f0.  v0:= 0I;
  #L42e7f2.  call `<init>`(v7, v0) @signature `Lqc/f;.<init>:([B)V` @kind direct;
  #L42e7f8.  v1:= v8.`qc.c.p` @type ^`long` @kind wide;
  #L42e7fc.  v5:= (`long`) v9 @kind i2l;
  #L42e7fe.  v3:= 0L;
  #L42e802.  call `b`(v1, v3, v5) @signature `Lqc/u;.b:(JJJ)V` @kind static;
  #L42e808.  v0:= v8.`qc.c.o` @type ^`qc.o` @kind object;
  #L42e80c.  v1:= 0I;
  #L42e80e.  v2:= 0I;
  #L42e810.  v3:= 0I;
  #L42e812.  if v2 >= v9 then goto L42e840;
  #L42e816.  v4:= v0.`qc.o.c` @type ^`int`;
  #L42e81a.  v5:= v0.`qc.o.b` @type ^`int`;
  #L42e81e.  if v4 == v5 then goto L42e830;
  #L42e822.  v4:= v4 - v5 @kind int;
  #L42e824.  v2:= v2 + v4 @kind int;
  #L42e826.  v3:= v3 + 1;
  #L42e82a.  v0:= v0.`qc.o.f` @type ^`qc.o` @kind object;
  #L42e82e.  goto L42e812;
  #L42e830.  v8:= new `java.lang.AssertionError`;
  #L42e834.  v9:= "s.limit == s.pos" @kind object;
  #L42e838.  call `<init>`(v8, v9) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42e83e.  throw v8;
  #L42e840.  v0:= new `byte`[][v3];
  #L42e844.  v7.`qc.q.t` @type ^`byte`[][] := v0 @kind object;
  #L42e848.  v3:= v3 * 2;
  #L42e84c.  v0:= new `int`[v3];
  #L42e850.  v7.`qc.q.u` @type ^`int`[] := v0 @kind object;
  #L42e854.  v8:= v8.`qc.c.o` @type ^`qc.o` @kind object;
  #L42e858.  v0:= 0I;
  #L42e85a.  if v1 >= v9 then goto L42e89c;
  #L42e85e.  v2:= v7.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e862.  v3:= v8.`qc.o.a` @type ^`byte`[] @kind object;
  #L42e866.  v2[v0]:= v3 @kind object;
  #L42e86a.  v3:= v8.`qc.o.c` @type ^`int`;
  #L42e86e.  v4:= v8.`qc.o.b` @type ^`int`;
  #L42e872.  v3:= v3 - v4 @kind int;
  #L42e874.  v1:= v1 + v3 @kind int;
  #L42e876.  if v1 <= v9 then goto L42e87c;
  #L42e87a.  v1:= v9;
  #L42e87c.  v3:= v7.`qc.q.u` @type ^`int`[] @kind object;
  #L42e880.  v3[v0]:= v1;
  #L42e884.  v2:= length @variable v2;
  #L42e886.  v2:= v2 + v0 @kind int;
  #L42e888.  v3[v2]:= v4;
  #L42e88c.  v2:= 1I;
  #L42e88e.  v8.`qc.o.d` @type ^`boolean` := v2 @kind boolean;
  #L42e892.  v0:= v0 + 1;
  #L42e896.  v8:= v8.`qc.o.f` @type ^`qc.o` @kind object;
  #L42e89a.  goto L42e85a;
  #L42e89c.  return @kind void;
}
procedure `int` `T`(`qc.q` v3 @kind this, `int` v4 ) @signature `Lqc/q;.T:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L42e654.  v0:= v3.`qc.q.u` @type ^`int`[] @kind object;
  #L42e658.  v1:= v3.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e65c.  v1:= length @variable v1;
  #L42e65e.  v4:= v4 + 1;
  #L42e662.  v2:= 0I;
  #L42e664.  call temp:= `binarySearch`(v0, v2, v1, v4) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L42e66a.  v4:= temp;
  #L42e66c.  if v4 < 0 then goto L42e672;
  #L42e670.  goto L42e674;
  #L42e672.  v4:= ~v4 @kind int;
  #L42e674.  return v4;
}
procedure `qc.f` `V`(`qc.q` v2 @kind this) @signature `Lqc/q;.V:()Lqc/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L42e7cc.  v0:= new `qc.f`;
  #L42e7d0.  call temp:= `L`(v2) @signature `Lqc/q;.L:()[B` @kind virtual;
  #L42e7d6.  v1:= temp @kind object;
  #L42e7d8.  call `<init>`(v0, v1) @signature `Lqc/f;.<init>:([B)V` @kind direct;
  #L42e7de.  return v0 @kind object;
}
procedure `qc.f` `B`(`qc.q` v1 @kind this) @signature `Lqc/q;.B:()Lqc/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e760.  call temp:= `V`(v1) @signature `Lqc/q;.V:()Lqc/f;` @kind direct;
  #L42e766.  v0:= temp @kind object;
  #L42e768.  call temp:= `B`(v0) @signature `Lqc/f;.B:()Lqc/f;` @kind virtual;
  #L42e76e.  v0:= temp @kind object;
  #L42e770.  return v0 @kind object;
}
procedure `int` `D`(`qc.q` v2 @kind this) @signature `Lqc/q;.D:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e688.  v0:= v2.`qc.q.u` @type ^`int`[] @kind object;
  #L42e68c.  v1:= v2.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e690.  v1:= length @variable v1;
  #L42e692.  v1:= v1 + -1;
  #L42e696.  v0:= v0[v1];
  #L42e69a.  return v0;
}
procedure `qc.f` `I`(`qc.q` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lqc/q;.I:(II)Lqc/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e784.  call temp:= `V`(v1) @signature `Lqc/q;.V:()Lqc/f;` @kind direct;
  #L42e78a.  v0:= temp @kind object;
  #L42e78c.  call temp:= `I`(v0, v2, v3) @signature `Lqc/f;.I:(II)Lqc/f;` @kind virtual;
  #L42e792.  v2:= temp @kind object;
  #L42e794.  return v2 @kind object;
}
procedure `qc.f` `K`(`qc.q` v1 @kind this) @signature `Lqc/q;.K:()Lqc/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e7a8.  call temp:= `V`(v1) @signature `Lqc/q;.V:()Lqc/f;` @kind direct;
  #L42e7ae.  v0:= temp @kind object;
  #L42e7b0.  call temp:= `K`(v0) @signature `Lqc/f;.K:()Lqc/f;` @kind virtual;
  #L42e7b6.  v0:= temp @kind object;
  #L42e7b8.  return v0 @kind object;
}
procedure `byte`[] `L`(`qc.q` v8 @kind this) @signature `Lqc/q;.L:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L42e58c.  v0:= v8.`qc.q.u` @type ^`int`[] @kind object;
  #L42e590.  v1:= v8.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e594.  v2:= length @variable v1;
  #L42e596.  v2:= v2 + -1;
  #L42e59a.  v0:= v0[v2];
  #L42e59e.  v0:= new `byte`[v0];
  #L42e5a2.  v1:= length @variable v1;
  #L42e5a4.  v2:= 0I;
  #L42e5a6.  v3:= 0I;
  #L42e5a8.  if v2 >= v1 then goto L42e5d6;
  #L42e5ac.  v4:= v8.`qc.q.u` @type ^`int`[] @kind object;
  #L42e5b0.  v5:= v1 + v2 @kind int;
  #L42e5b4.  v5:= v4[v5];
  #L42e5b8.  v4:= v4[v2];
  #L42e5bc.  v6:= v8.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e5c0.  v6:= v6[v2] @kind object;
  #L42e5c4.  v7:= v4 - v3 @kind int;
  #L42e5c8.  call `arraycopy`(v6, v5, v0, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42e5ce.  v2:= v2 + 1;
  #L42e5d2.  v3:= v4;
  #L42e5d4.  goto L42e5a8;
  #L42e5d6.  return v0 @kind object;
}
procedure `java.lang.String` `P`(`qc.q` v1 @kind this) @signature `Lqc/q;.P:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e718.  call temp:= `V`(v1) @signature `Lqc/q;.V:()Lqc/f;` @kind direct;
  #L42e71e.  v0:= temp @kind object;
  #L42e720.  call temp:= `P`(v0) @signature `Lqc/f;.P:()Ljava/lang/String;` @kind virtual;
  #L42e726.  v0:= temp @kind object;
  #L42e728.  return v0 @kind object;
}
procedure `void` `S`(`qc.q` v11 @kind this, `qc.c` v12 @kind object) @signature `Lqc/q;.S:(Lqc/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L42e8b0.  v0:= v11.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e8b4.  v0:= length @variable v0;
  #L42e8b6.  v1:= 0I;
  #L42e8b8.  v2:= 0I;
  #L42e8ba.  if v1 >= v0 then goto L42e916;
  #L42e8be.  v3:= v11.`qc.q.u` @type ^`int`[] @kind object;
  #L42e8c2.  v4:= v0 + v1 @kind int;
  #L42e8c6.  v7:= v3[v4];
  #L42e8ca.  v3:= v3[v1];
  #L42e8ce.  v4:= new `qc.o`;
  #L42e8d2.  v5:= v11.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e8d6.  v6:= v5[v1] @kind object;
  #L42e8da.  v5:= v7 + v3 @kind int;
  #L42e8de.  v8:= v5 - v2 @kind int;
  #L42e8e2.  v9:= 1I;
  #L42e8e4.  v10:= 0I;
  #L42e8e6.  v5:= v4 @kind object;
  #L42e8e8.  call `<init>`(v5, v6, v7, v8, v9, v10) @signature `Lqc/o;.<init>:([BIIZZ)V` @kind direct;
  #L42e8ee.  v2:= v12.`qc.c.o` @type ^`qc.o` @kind object;
  #L42e8f2.  if v2 != 0 then goto L42e904;
  #L42e8f6.  v4.`qc.o.g` @type ^`qc.o` := v4 @kind object;
  #L42e8fa.  v4.`qc.o.f` @type ^`qc.o` := v4 @kind object;
  #L42e8fe.  v12.`qc.c.o` @type ^`qc.o` := v4 @kind object;
  #L42e902.  goto L42e90e;
  #L42e904.  v2:= v2.`qc.o.g` @type ^`qc.o` @kind object;
  #L42e908.  call temp:= `c`(v2, v4) @signature `Lqc/o;.c:(Lqc/o;)Lqc/o;` @kind virtual;
  #L42e90e.  v1:= v1 + 1;
  #L42e912.  v2:= v3;
  #L42e914.  goto L42e8ba;
  #L42e916.  v0:= v12.`qc.c.p` @type ^`long` @kind wide;
  #L42e91a.  v2:= (`long`) v2 @kind i2l;
  #L42e91c.  v0:= v0 + v2 @kind long;
  #L42e91e.  v12.`qc.c.p` @type ^`long` := v0 @kind wide;
  #L42e922.  return @kind void;
}
procedure `java.lang.String` `c`(`qc.q` v1 @kind this) @signature `Lqc/q;.c:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e6ac.  call temp:= `V`(v1) @signature `Lqc/q;.V:()Lqc/f;` @kind direct;
  #L42e6b2.  v0:= temp @kind object;
  #L42e6b4.  call temp:= `c`(v0) @signature `Lqc/f;.c:()Ljava/lang/String;` @kind virtual;
  #L42e6ba.  v0:= temp @kind object;
  #L42e6bc.  return v0 @kind object;
}
procedure `boolean` `equals`(`qc.q` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lqc/q;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42e390.  v0:= 1I;
  #L42e392.  if v5 != v4 then goto L42e398;
  #L42e396.  return v0;
  #L42e398.  v1:= instanceof @variable v5 @type ^`qc.f` @kind boolean;
  #L42e39c.  v2:= 0I;
  #L42e39e.  if v1 == 0 then goto L42e3d0;
  #L42e3a2.  v5:= (`qc.f`) v5 @kind object;
  #L42e3a6.  call temp:= `D`(v5) @signature `Lqc/f;.D:()I` @kind virtual;
  #L42e3ac.  v1:= temp;
  #L42e3ae.  call temp:= `D`(v4) @signature `Lqc/q;.D:()I` @kind virtual;
  #L42e3b4.  v3:= temp;
  #L42e3b6.  if v1 != v3 then goto L42e3d0;
  #L42e3ba.  call temp:= `D`(v4) @signature `Lqc/q;.D:()I` @kind virtual;
  #L42e3c0.  v1:= temp;
  #L42e3c2.  call temp:= `t`(v4, v2, v5, v2, v1) @signature `Lqc/q;.t:(ILqc/f;II)Z` @kind virtual;
  #L42e3c8.  v5:= temp;
  #L42e3ca.  if v5 == 0 then goto L42e3d0;
  #L42e3ce.  goto L42e3d2;
  #L42e3d0.  v0:= 0I;
  #L42e3d2.  return v0;
}
procedure `int` `hashCode`(`qc.q` v8 @kind this) @signature `Lqc/q;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L42e5e8.  v0:= v8.`qc.f.p` @type ^`int`;
  #L42e5ec.  if v0 == 0 then goto L42e5f2;
  #L42e5f0.  return v0;
  #L42e5f2.  v0:= v8.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e5f6.  v0:= length @variable v0;
  #L42e5f8.  v1:= 0I;
  #L42e5fa.  v2:= 1I;
  #L42e5fc.  v2:= 0I;
  #L42e5fe.  v3:= 1I;
  #L42e600.  if v1 >= v0 then goto L42e63e;
  #L42e604.  v4:= v8.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e608.  v4:= v4[v1] @kind object;
  #L42e60c.  v5:= v8.`qc.q.u` @type ^`int`[] @kind object;
  #L42e610.  v6:= v0 + v1 @kind int;
  #L42e614.  v6:= v5[v6];
  #L42e618.  v5:= v5[v1];
  #L42e61c.  v2:= v5 - v2 @kind int;
  #L42e620.  v2:= v2 + v6 @kind int;
  #L42e622.  if v6 >= v2 then goto L42e636;
  #L42e626.  v3:= v3 * 31;
  #L42e62a.  v7:= v4[v6] @kind byte;
  #L42e62e.  v3:= v3 + v7 @kind int;
  #L42e630.  v6:= v6 + 1;
  #L42e634.  goto L42e622;
  #L42e636.  v1:= v1 + 1;
  #L42e63a.  v2:= v5;
  #L42e63c.  goto L42e600;
  #L42e63e.  v8.`qc.f.p` @type ^`int` := v3;
  #L42e642.  return v3;
}
procedure `byte` `o`(`qc.q` v7 @kind this, `int` v8 ) @signature `Lqc/q;.o:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42e520.  v0:= v7.`qc.q.u` @type ^`int`[] @kind object;
  #L42e524.  v1:= v7.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e528.  v1:= length @variable v1;
  #L42e52a.  v1:= v1 + -1;
  #L42e52e.  v0:= v0[v1];
  #L42e532.  v1:= (`long`) v0 @kind i2l;
  #L42e534.  v3:= (`long`) v8 @kind i2l;
  #L42e536.  v5:= 1L;
  #L42e53a.  call `b`(v1, v3, v5) @signature `Lqc/u;.b:(JJJ)V` @kind static;
  #L42e540.  call temp:= `T`(v7, v8) @signature `Lqc/q;.T:(I)I` @kind direct;
  #L42e546.  v0:= temp;
  #L42e548.  if v0 != 0 then goto L42e550;
  #L42e54c.  v1:= 0I;
  #L42e54e.  goto L42e55c;
  #L42e550.  v1:= v7.`qc.q.u` @type ^`int`[] @kind object;
  #L42e554.  v2:= v0 + -1;
  #L42e558.  v1:= v1[v2];
  #L42e55c.  v2:= v7.`qc.q.u` @type ^`int`[] @kind object;
  #L42e560.  v3:= v7.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e564.  v4:= length @variable v3;
  #L42e566.  v4:= v4 + v0 @kind int;
  #L42e568.  v2:= v2[v4];
  #L42e56c.  v0:= v3[v0] @kind object;
  #L42e570.  v8:= v8 - v1 @kind int;
  #L42e572.  v8:= v8 + v2 @kind int;
  #L42e574.  v8:= v0[v8] @kind byte;
  #L42e578.  return v8;
}
procedure `java.lang.String` `r`(`qc.q` v1 @kind this) @signature `Lqc/q;.r:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e6d0.  call temp:= `V`(v1) @signature `Lqc/q;.V:()Lqc/f;` @kind direct;
  #L42e6d6.  v0:= temp @kind object;
  #L42e6d8.  call temp:= `r`(v0) @signature `Lqc/f;.r:()Ljava/lang/String;` @kind virtual;
  #L42e6de.  v0:= temp @kind object;
  #L42e6e0.  return v0 @kind object;
}
procedure `boolean` `t`(`qc.q` v7 @kind this, `int` v8 , `qc.f` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lqc/q;.t:(ILqc/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42e488.  v0:= 0I;
  #L42e48a.  if v8 < 0 then goto L42e50c;
  #L42e48e.  call temp:= `D`(v7) @signature `Lqc/q;.D:()I` @kind virtual;
  #L42e494.  v1:= temp;
  #L42e496.  v1:= v1 - v11 @kind int;
  #L42e498.  if v8 <= v1 then goto L42e49e;
  #L42e49c.  goto L42e50c;
  #L42e49e.  call temp:= `T`(v7, v8) @signature `Lqc/q;.T:(I)I` @kind direct;
  #L42e4a4.  v1:= temp;
  #L42e4a6.  if v11 <= 0 then goto L42e508;
  #L42e4aa.  if v1 != 0 then goto L42e4b2;
  #L42e4ae.  v2:= 0I;
  #L42e4b0.  goto L42e4be;
  #L42e4b2.  v2:= v7.`qc.q.u` @type ^`int`[] @kind object;
  #L42e4b6.  v3:= v1 + -1;
  #L42e4ba.  v2:= v2[v3];
  #L42e4be.  v3:= v7.`qc.q.u` @type ^`int`[] @kind object;
  #L42e4c2.  v3:= v3[v1];
  #L42e4c6.  v3:= v3 - v2 @kind int;
  #L42e4c8.  v3:= v3 + v2 @kind int;
  #L42e4ca.  v3:= v3 - v8 @kind int;
  #L42e4cc.  call temp:= `min`(v11, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L42e4d2.  v3:= temp;
  #L42e4d4.  v4:= v7.`qc.q.u` @type ^`int`[] @kind object;
  #L42e4d8.  v5:= v7.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e4dc.  v6:= length @variable v5;
  #L42e4de.  v6:= v6 + v1 @kind int;
  #L42e4e0.  v4:= v4[v6];
  #L42e4e4.  v2:= v8 - v2 @kind int;
  #L42e4e8.  v2:= v2 + v4 @kind int;
  #L42e4ea.  v4:= v5[v1] @kind object;
  #L42e4ee.  call temp:= `v`(v9, v10, v4, v2, v3) @signature `Lqc/f;.v:(I[BII)Z` @kind virtual;
  #L42e4f4.  v2:= temp;
  #L42e4f6.  if v2 != 0 then goto L42e4fc;
  #L42e4fa.  return v0;
  #L42e4fc.  v8:= v8 + v3 @kind int;
  #L42e4fe.  v10:= v10 + v3 @kind int;
  #L42e500.  v11:= v11 - v3 @kind int;
  #L42e502.  v1:= v1 + 1;
  #L42e506.  goto L42e4a6;
  #L42e508.  v8:= 1I;
  #L42e50a.  return v8;
  #L42e50c.  return v0;
}
procedure `java.lang.String` `toString`(`qc.q` v1 @kind this) @signature `Lqc/q;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e6f4.  call temp:= `V`(v1) @signature `Lqc/q;.V:()Lqc/f;` @kind direct;
  #L42e6fa.  v0:= temp @kind object;
  #L42e6fc.  call temp:= `toString`(v0) @signature `Lqc/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L42e702.  v0:= temp @kind object;
  #L42e704.  return v0 @kind object;
}
procedure `boolean` `v`(`qc.q` v7 @kind this, `int` v8 , `byte`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lqc/q;.v:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42e3e4.  v0:= 0I;
  #L42e3e6.  if v8 < 0 then goto L42e474;
  #L42e3ea.  call temp:= `D`(v7) @signature `Lqc/q;.D:()I` @kind virtual;
  #L42e3f0.  v1:= temp;
  #L42e3f2.  v1:= v1 - v11 @kind int;
  #L42e3f4.  if v8 > v1 then goto L42e474;
  #L42e3f8.  if v10 < 0 then goto L42e474;
  #L42e3fc.  v1:= length @variable v9;
  #L42e3fe.  v1:= v1 - v11 @kind int;
  #L42e400.  if v10 <= v1 then goto L42e406;
  #L42e404.  goto L42e474;
  #L42e406.  call temp:= `T`(v7, v8) @signature `Lqc/q;.T:(I)I` @kind direct;
  #L42e40c.  v1:= temp;
  #L42e40e.  if v11 <= 0 then goto L42e470;
  #L42e412.  if v1 != 0 then goto L42e41a;
  #L42e416.  v2:= 0I;
  #L42e418.  goto L42e426;
  #L42e41a.  v2:= v7.`qc.q.u` @type ^`int`[] @kind object;
  #L42e41e.  v3:= v1 + -1;
  #L42e422.  v2:= v2[v3];
  #L42e426.  v3:= v7.`qc.q.u` @type ^`int`[] @kind object;
  #L42e42a.  v3:= v3[v1];
  #L42e42e.  v3:= v3 - v2 @kind int;
  #L42e430.  v3:= v3 + v2 @kind int;
  #L42e432.  v3:= v3 - v8 @kind int;
  #L42e434.  call temp:= `min`(v11, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L42e43a.  v3:= temp;
  #L42e43c.  v4:= v7.`qc.q.u` @type ^`int`[] @kind object;
  #L42e440.  v5:= v7.`qc.q.t` @type ^`byte`[][] @kind object;
  #L42e444.  v6:= length @variable v5;
  #L42e446.  v6:= v6 + v1 @kind int;
  #L42e448.  v4:= v4[v6];
  #L42e44c.  v2:= v8 - v2 @kind int;
  #L42e450.  v2:= v2 + v4 @kind int;
  #L42e452.  v4:= v5[v1] @kind object;
  #L42e456.  call temp:= `a`(v4, v2, v9, v10, v3) @signature `Lqc/u;.a:([BI[BII)Z` @kind static;
  #L42e45c.  v2:= temp;
  #L42e45e.  if v2 != 0 then goto L42e464;
  #L42e462.  return v0;
  #L42e464.  v8:= v8 + v3 @kind int;
  #L42e466.  v10:= v10 + v3 @kind int;
  #L42e468.  v11:= v11 - v3 @kind int;
  #L42e46a.  v1:= v1 + 1;
  #L42e46e.  goto L42e40e;
  #L42e470.  v8:= 1I;
  #L42e472.  return v8;
  #L42e474.  return v0;
}
procedure `qc.f` `x`(`qc.q` v1 @kind this) @signature `Lqc/q;.x:()Lqc/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e73c.  call temp:= `V`(v1) @signature `Lqc/q;.V:()Lqc/f;` @kind direct;
  #L42e742.  v0:= temp @kind object;
  #L42e744.  call temp:= `x`(v0) @signature `Lqc/f;.x:()Lqc/f;` @kind virtual;
  #L42e74a.  v0:= temp @kind object;
  #L42e74c.  return v0 @kind object;
}
