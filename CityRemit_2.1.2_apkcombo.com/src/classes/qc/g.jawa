record `qc.g` @kind class @AccessFlag PUBLIC_ABSTRACT extends `qc.r` @kind interface {
  `qc.r` `qc.g.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`qc.g` v1 @kind this, `qc.r` v2 @kind object) @signature `Lqc/g;.<init>:(Lqc/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42c4fc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42c502.  if v2 == 0 then goto L42c50c;
  #L42c506.  v1.`qc.g.o` @type ^`qc.r` := v2 @kind object;
  #L42c50a.  return @kind void;
  #L42c50c.  v2:= new `java.lang.IllegalArgumentException`;
  #L42c510.  v0:= "delegate == null" @kind object;
  #L42c514.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c51a.  throw v2;
}
procedure `void` `close`(`qc.g` v1 @kind this) @signature `Lqc/g;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c52c.  v0:= v1.`qc.g.o` @type ^`qc.r` @kind object;
  #L42c530.  call `close`(v0) @signature `Lqc/r;.close:()V` @kind interface;
  #L42c536.  return @kind void;
}
procedure `qc.t` `f`(`qc.g` v1 @kind this) @signature `Lqc/g;.f:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c4dc.  v0:= v1.`qc.g.o` @type ^`qc.r` @kind object;
  #L42c4e0.  call temp:= `f`(v0) @signature `Lqc/r;.f:()Lqc/t;` @kind interface;
  #L42c4e6.  v0:= temp @kind object;
  #L42c4e8.  return v0 @kind object;
}
procedure `void` `flush`(`qc.g` v1 @kind this) @signature `Lqc/g;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c548.  v0:= v1.`qc.g.o` @type ^`qc.r` @kind object;
  #L42c54c.  call `flush`(v0) @signature `Lqc/r;.flush:()V` @kind interface;
  #L42c552.  return @kind void;
}
procedure `void` `q`(`qc.g` v1 @kind this, `qc.c` v2 @kind object, `long` v3 ) @signature `Lqc/g;.q:(Lqc/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c564.  v0:= v1.`qc.g.o` @type ^`qc.r` @kind object;
  #L42c568.  call `q`(v0, v2, v3) @signature `Lqc/r;.q:(Lqc/c;J)V` @kind interface;
  #L42c56e.  return @kind void;
}
procedure `java.lang.String` `toString`(`qc.g` v2 @kind this) @signature `Lqc/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42c47c.  v0:= new `java.lang.StringBuilder`;
  #L42c480.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42c486.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L42c48c.  v1:= temp @kind object;
  #L42c48e.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L42c494.  v1:= temp @kind object;
  #L42c496.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c49c.  v1:= "(" @kind object;
  #L42c4a0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c4a6.  v1:= v2.`qc.g.o` @type ^`qc.r` @kind object;
  #L42c4aa.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c4b0.  v1:= temp @kind object;
  #L42c4b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c4b8.  v1:= ")" @kind object;
  #L42c4bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c4c2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c4c8.  v0:= temp @kind object;
  #L42c4ca.  return v0 @kind object;
}
