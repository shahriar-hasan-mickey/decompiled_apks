record `qc.l$a` @kind class @AccessFlag FINAL extends `qc.r` @kind interface {
  `qc.t` `qc.l$a.o` @AccessFlag FINAL_SYNTHETIC;
  `java.io.OutputStream` `qc.l$a.p` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`qc.l$a` v0 @kind this, `qc.t` v1 @kind object, `java.io.OutputStream` v2 @kind object) @signature `Lqc/l$a;.<init>:(Lqc/t;Ljava/io/OutputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42cf78.  v0.`qc.l$a.o` @type ^`qc.t` := v1 @kind object;
  #L42cf7c.  v0.`qc.l$a.p` @type ^`java.io.OutputStream` := v2 @kind object;
  #L42cf80.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42cf86.  return @kind void;
}
procedure `void` `close`(`qc.l$a` v1 @kind this) @signature `Lqc/l$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cf98.  v0:= v1.`qc.l$a.p` @type ^`java.io.OutputStream` @kind object;
  #L42cf9c.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L42cfa2.  return @kind void;
}
procedure `qc.t` `f`(`qc.l$a` v1 @kind this) @signature `Lqc/l$a;.f:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cf60.  v0:= v1.`qc.l$a.o` @type ^`qc.t` @kind object;
  #L42cf64.  return v0 @kind object;
}
procedure `void` `flush`(`qc.l$a` v1 @kind this) @signature `Lqc/l$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cfb4.  v0:= v1.`qc.l$a.p` @type ^`java.io.OutputStream` @kind object;
  #L42cfb8.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L42cfbe.  return @kind void;
}
procedure `void` `q`(`qc.l$a` v6 @kind this, `qc.c` v7 @kind object, `long` v8 ) @signature `Lqc/l$a;.q:(Lqc/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42cfd0.  v0:= v7.`qc.c.p` @type ^`long` @kind wide;
  #L42cfd4.  v2:= 0L;
  #L42cfd8.  v4:= v8 @kind wide;
  #L42cfda.  call `b`(v0, v2, v4) @signature `Lqc/u;.b:(JJJ)V` @kind static;
  #L42cfe0.  v0:= 0L;
  #L42cfe4.  v2:= lcmp(v8, v0);
  #L42cfe8.  if v2 <= 0 then goto L42d056;
  #L42cfec.  v0:= v6.`qc.l$a.o` @type ^`qc.t` @kind object;
  #L42cff0.  call `f`(v0) @signature `Lqc/t;.f:()V` @kind virtual;
  #L42cff6.  v0:= v7.`qc.c.o` @type ^`qc.o` @kind object;
  #L42cffa.  v1:= v0.`qc.o.c` @type ^`int`;
  #L42cffe.  v2:= v0.`qc.o.b` @type ^`int`;
  #L42d002.  v1:= v1 - v2 @kind int;
  #L42d004.  v1:= (`long`) v1 @kind i2l;
  #L42d006.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L42d00c.  v1:= temp @kind wide;
  #L42d00e.  v2:= (`int`) v1 @kind l2i;
  #L42d010.  v1:= v6.`qc.l$a.p` @type ^`java.io.OutputStream` @kind object;
  #L42d014.  v3:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42d018.  v4:= v0.`qc.o.b` @type ^`int`;
  #L42d01c.  call `write`(v1, v3, v4, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L42d022.  v1:= v0.`qc.o.b` @type ^`int`;
  #L42d026.  v1:= v1 + v2 @kind int;
  #L42d028.  v0.`qc.o.b` @type ^`int` := v1;
  #L42d02c.  v2:= (`long`) v2 @kind i2l;
  #L42d02e.  v8:= v8 - v2 @kind long;
  #L42d030.  v4:= v7.`qc.c.p` @type ^`long` @kind wide;
  #L42d034.  v4:= v4 - v2 @kind long;
  #L42d036.  v7.`qc.c.p` @type ^`long` := v4 @kind wide;
  #L42d03a.  v2:= v0.`qc.o.c` @type ^`int`;
  #L42d03e.  if v1 != v2 then goto L42cfe0;
  #L42d042.  call temp:= `b`(v0) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42d048.  v1:= temp @kind object;
  #L42d04a.  v7.`qc.c.o` @type ^`qc.o` := v1 @kind object;
  #L42d04e.  call `a`(v0) @signature `Lqc/p;.a:(Lqc/o;)V` @kind static;
  #L42d054.  goto L42cfe0;
  #L42d056.  return @kind void;
}
procedure `java.lang.String` `toString`(`qc.l$a` v2 @kind this) @signature `Lqc/l$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42cf1c.  v0:= new `java.lang.StringBuilder`;
  #L42cf20.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42cf26.  v1:= "sink(" @kind object;
  #L42cf2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cf30.  v1:= v2.`qc.l$a.p` @type ^`java.io.OutputStream` @kind object;
  #L42cf34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cf3a.  v1:= ")" @kind object;
  #L42cf3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cf44.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42cf4a.  v0:= temp @kind object;
  #L42cf4c.  return v0 @kind object;
}
