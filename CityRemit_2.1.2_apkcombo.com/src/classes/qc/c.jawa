record `qc.c` @kind class @AccessFlag PUBLIC_FINAL extends `qc.e` @kind interface, `qc.d` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `qc.o` `qc.c.o` @AccessFlag ;
  `long` `qc.c.p` @AccessFlag ;
}
global `byte`[] `@@qc.c.q` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lqc/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42b918.  v0:= 16I;
  #L42b91c.  v0:= new `byte`[v0];
  #L42b920.  goto L42b92c;
  #L42b926.  `@@qc.c.q` @type ^`byte`[] := v0 @kind object;
  #L42b92a.  return @kind void;
  #L42b92c.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L42b943.  goto L42b926;
}
procedure `void` `<init>`(`qc.c` v0 @kind this) @signature `Lqc/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42b954.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42b95a.  return @kind void;
}
procedure `qc.d` `A`(`qc.c` v0 @kind this, `int` v1 ) @signature `Lqc/c;.A:(I)Lqc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42b63c.  call temp:= `p0`(v0, v1) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b642.  v1:= temp @kind object;
  #L42b644.  return v1 @kind object;
}
procedure `byte`[] `B`(`qc.c` v6 @kind this, `long` v7 ) @signature `Lqc/c;.B:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42a230.  v0:= v6.`qc.c.p` @type ^`long` @kind wide;
  #L42a234.  v2:= 0L;
  #L42a238.  v4:= v7 @kind wide;
  #L42a23a.  call `b`(v0, v2, v4) @signature `Lqc/u;.b:(JJJ)V` @kind static;
  #L42a240.  v0:= 2147483647L;
  #L42a246.  v2:= lcmp(v7, v0);
  #L42a24a.  if v2 > 0 then goto L42a25c;
  #L42a24e.  v8:= (`int`) v7 @kind l2i;
  #L42a250.  v7:= new `byte`[v8];
  #L42a254.  call `readFully`(v6, v7) @signature `Lqc/c;.readFully:([B)V` @kind virtual;
  #L42a25a.  return v7 @kind object;
  #L42a25c.  v0:= new `java.lang.IllegalArgumentException`;
  #L42a260.  v1:= new `java.lang.StringBuilder`;
  #L42a264.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42a26a.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L42a26e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a274.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a27a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42a280.  v7:= temp @kind object;
  #L42a282.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a288.  throw v0;
}
procedure `qc.d` `D`(`qc.c` v0 @kind this, `byte`[] v1 @kind object) @signature `Lqc/c;.D:([B)Lqc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42b604.  call temp:= `m0`(v0, v1) @signature `Lqc/c;.m0:([B)Lqc/c;` @kind virtual;
  #L42b60a.  v1:= temp @kind object;
  #L42b60c.  return v1 @kind object;
}
procedure `qc.c` `E`(`qc.c` v6 @kind this) @signature `Lqc/c;.E:()Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42ad6c.  v0:= new `qc.c`;
  #L42ad70.  call `<init>`(v0) @signature `Lqc/c;.<init>:()V` @kind direct;
  #L42ad76.  v1:= v6.`qc.c.p` @type ^`long` @kind wide;
  #L42ad7a.  v3:= 0L;
  #L42ad7e.  v5:= lcmp(v1, v3);
  #L42ad82.  if v5 != 0 then goto L42ad88;
  #L42ad86.  return v0 @kind object;
  #L42ad88.  v1:= v6.`qc.c.o` @type ^`qc.o` @kind object;
  #L42ad8c.  call temp:= `d`(v1) @signature `Lqc/o;.d:()Lqc/o;` @kind virtual;
  #L42ad92.  v1:= temp @kind object;
  #L42ad94.  v0.`qc.c.o` @type ^`qc.o` := v1 @kind object;
  #L42ad98.  v1.`qc.o.g` @type ^`qc.o` := v1 @kind object;
  #L42ad9c.  v1.`qc.o.f` @type ^`qc.o` := v1 @kind object;
  #L42ada0.  v1:= v6.`qc.c.o` @type ^`qc.o` @kind object;
  #L42ada4.  v1:= v1.`qc.o.f` @type ^`qc.o` @kind object;
  #L42ada8.  v2:= v6.`qc.c.o` @type ^`qc.o` @kind object;
  #L42adac.  if v1 == v2 then goto L42adc8;
  #L42adb0.  v2:= v0.`qc.c.o` @type ^`qc.o` @kind object;
  #L42adb4.  v2:= v2.`qc.o.g` @type ^`qc.o` @kind object;
  #L42adb8.  call temp:= `d`(v1) @signature `Lqc/o;.d:()Lqc/o;` @kind virtual;
  #L42adbe.  v3:= temp @kind object;
  #L42adc0.  call temp:= `c`(v2, v3) @signature `Lqc/o;.c:(Lqc/o;)Lqc/o;` @kind virtual;
  #L42adc6.  goto L42ada4;
  #L42adc8.  v1:= v6.`qc.c.p` @type ^`long` @kind wide;
  #L42adcc.  v0.`qc.c.p` @type ^`long` := v1 @kind wide;
  #L42add0.  return v0 @kind object;
}
procedure `long` `G`(`qc.c` v5 @kind this) @signature `Lqc/c;.G:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42a900.  v0:= v5.`qc.c.p` @type ^`long` @kind wide;
  #L42a904.  v2:= 0L;
  #L42a908.  v4:= lcmp(v0, v2);
  #L42a90c.  if v4 != 0 then goto L42a912;
  #L42a910.  return v2 @kind wide;
  #L42a912.  v2:= v5.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a916.  v2:= v2.`qc.o.g` @type ^`qc.o` @kind object;
  #L42a91a.  v3:= v2.`qc.o.c` @type ^`int`;
  #L42a91e.  v4:= 8192I;
  #L42a922.  if v3 >= v4 then goto L42a938;
  #L42a926.  v4:= v2.`qc.o.e` @type ^`boolean` @kind boolean;
  #L42a92a.  if v4 == 0 then goto L42a938;
  #L42a92e.  v2:= v2.`qc.o.b` @type ^`int`;
  #L42a932.  v3:= v3 - v2 @kind int;
  #L42a934.  v2:= (`long`) v3 @kind i2l;
  #L42a936.  v0:= v0 - v2 @kind long;
  #L42a938.  return v0 @kind wide;
}
procedure `short` `H`(`qc.c` v1 @kind this) @signature `Lqc/c;.H:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b8f4.  call temp:= `readShort`(v1) @signature `Lqc/c;.readShort:()S` @kind virtual;
  #L42b8fa.  v0:= temp;
  #L42b8fc.  call temp:= `d`(v0) @signature `Lqc/u;.d:(S)S` @kind static;
  #L42b902.  v0:= temp;
  #L42b904.  return v0;
}
procedure `qc.d` `I`(`qc.c` v1 @kind this) @signature `Lqc/c;.I:()Lqc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L42b5e8.  call temp:= `M`(v1) @signature `Lqc/c;.M:()Lqc/c;` @kind virtual;
  #L42b5ee.  v0:= temp @kind object;
  #L42b5f0.  return v0 @kind object;
}
procedure `qc.c` `J`(`qc.c` v8 @kind this, `qc.c` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lqc/c;.J:(Lqc/c;JJ)Lqc/c;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L42ade4.  if v9 == 0 then goto L42ae9e;
  #L42ade8.  v0:= v8.`qc.c.p` @type ^`long` @kind wide;
  #L42adec.  v2:= v10 @kind wide;
  #L42adee.  v4:= v12 @kind wide;
  #L42adf0.  call `b`(v0, v2, v4) @signature `Lqc/u;.b:(JJJ)V` @kind static;
  #L42adf6.  v0:= 0L;
  #L42adfa.  v2:= lcmp(v12, v0);
  #L42adfe.  if v2 != 0 then goto L42ae04;
  #L42ae02.  return v8 @kind object;
  #L42ae04.  v2:= v9.`qc.c.p` @type ^`long` @kind wide;
  #L42ae08.  v2:= v2 + v12 @kind long;
  #L42ae0a.  v9.`qc.c.p` @type ^`long` := v2 @kind wide;
  #L42ae0e.  v2:= v8.`qc.c.o` @type ^`qc.o` @kind object;
  #L42ae12.  v3:= v2.`qc.o.c` @type ^`int`;
  #L42ae16.  v4:= v2.`qc.o.b` @type ^`int`;
  #L42ae1a.  v5:= v3 - v4 @kind int;
  #L42ae1e.  v5:= (`long`) v5 @kind i2l;
  #L42ae20.  v7:= lcmp(v10, v5);
  #L42ae24.  if v7 < 0 then goto L42ae34;
  #L42ae28.  v3:= v3 - v4 @kind int;
  #L42ae2a.  v3:= (`long`) v3 @kind i2l;
  #L42ae2c.  v10:= v10 - v3 @kind long;
  #L42ae2e.  v2:= v2.`qc.o.f` @type ^`qc.o` @kind object;
  #L42ae32.  goto L42ae12;
  #L42ae34.  v3:= lcmp(v12, v0);
  #L42ae38.  if v3 <= 0 then goto L42ae9c;
  #L42ae3c.  call temp:= `d`(v2) @signature `Lqc/o;.d:()Lqc/o;` @kind virtual;
  #L42ae42.  v3:= temp @kind object;
  #L42ae44.  v4:= v3.`qc.o.b` @type ^`int`;
  #L42ae48.  v4:= (`long`) v4 @kind i2l;
  #L42ae4a.  v4:= v4 + v10 @kind long;
  #L42ae4c.  v10:= (`int`) v4 @kind l2i;
  #L42ae4e.  v3.`qc.o.b` @type ^`int` := v10;
  #L42ae52.  v11:= (`int`) v12 @kind l2i;
  #L42ae54.  v10:= v10 + v11 @kind int;
  #L42ae56.  v11:= v3.`qc.o.c` @type ^`int`;
  #L42ae5a.  call temp:= `min`(v10, v11) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L42ae60.  v10:= temp;
  #L42ae62.  v3.`qc.o.c` @type ^`int` := v10;
  #L42ae66.  v10:= v9.`qc.c.o` @type ^`qc.o` @kind object;
  #L42ae6a.  if v10 != 0 then goto L42ae7c;
  #L42ae6e.  v3.`qc.o.g` @type ^`qc.o` := v3 @kind object;
  #L42ae72.  v3.`qc.o.f` @type ^`qc.o` := v3 @kind object;
  #L42ae76.  v9.`qc.c.o` @type ^`qc.o` := v3 @kind object;
  #L42ae7a.  goto L42ae86;
  #L42ae7c.  v10:= v10.`qc.o.g` @type ^`qc.o` @kind object;
  #L42ae80.  call temp:= `c`(v10, v3) @signature `Lqc/o;.c:(Lqc/o;)Lqc/o;` @kind virtual;
  #L42ae86.  v10:= v3.`qc.o.c` @type ^`int`;
  #L42ae8a.  v11:= v3.`qc.o.b` @type ^`int`;
  #L42ae8e.  v10:= v10 - v11 @kind int;
  #L42ae90.  v10:= (`long`) v10 @kind i2l;
  #L42ae92.  v12:= v12 - v10 @kind long;
  #L42ae94.  v2:= v2.`qc.o.f` @type ^`qc.o` @kind object;
  #L42ae98.  v10:= v0 @kind wide;
  #L42ae9a.  goto L42ae34;
  #L42ae9c.  return v8 @kind object;
  #L42ae9e.  v9:= new `java.lang.IllegalArgumentException`;
  #L42aea2.  v10:= "out == null" @kind object;
  #L42aea6.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42aeac.  throw v9;
}
procedure `java.lang.String` `L`(`qc.c` v10 @kind this, `long` v11 ) @signature `Lqc/c;.L:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L42a778.  v0:= 0L;
  #L42a77c.  v2:= lcmp(v11, v0);
  #L42a780.  if v2 < 0 then goto L42a89c;
  #L42a784.  v0:= 1L;
  #L42a788.  v2:= 9223372036854775807L;
  #L42a792.  v4:= lcmp(v11, v2);
  #L42a796.  if v4 != 0 then goto L42a79c;
  #L42a79a.  goto L42a7a0;
  #L42a79c.  v2:= v11 + v0 @kind long;
  #L42a7a0.  v5:= 10I;
  #L42a7a4.  v6:= 0L;
  #L42a7a8.  v4:= v10 @kind object;
  #L42a7aa.  v8:= v2 @kind wide;
  #L42a7ac.  call temp:= `O`(v4, v5, v6, v8) @signature `Lqc/c;.O:(BJJ)J` @kind virtual;
  #L42a7b2.  v4:= temp @kind wide;
  #L42a7b4.  v6:= -1L;
  #L42a7b8.  v8:= lcmp(v4, v6);
  #L42a7bc.  if v8 == 0 then goto L42a7ca;
  #L42a7c0.  call temp:= `g0`(v10, v4) @signature `Lqc/c;.g0:(J)Ljava/lang/String;` @kind virtual;
  #L42a7c6.  v11:= temp @kind object;
  #L42a7c8.  return v11 @kind object;
  #L42a7ca.  call temp:= `h0`(v10) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L42a7d0.  v4:= temp @kind wide;
  #L42a7d2.  v6:= lcmp(v2, v4);
  #L42a7d6.  if v6 >= 0 then goto L42a808;
  #L42a7da.  v0:= v2 - v0 @kind long;
  #L42a7de.  call temp:= `N`(v10, v0) @signature `Lqc/c;.N:(J)B` @kind virtual;
  #L42a7e4.  v0:= temp;
  #L42a7e6.  v1:= 13I;
  #L42a7ea.  if v0 != v1 then goto L42a808;
  #L42a7ee.  call temp:= `N`(v10, v2) @signature `Lqc/c;.N:(J)B` @kind virtual;
  #L42a7f4.  v0:= temp;
  #L42a7f6.  v1:= 10I;
  #L42a7fa.  if v0 != v1 then goto L42a808;
  #L42a7fe.  call temp:= `g0`(v10, v2) @signature `Lqc/c;.g0:(J)Ljava/lang/String;` @kind virtual;
  #L42a804.  v11:= temp @kind object;
  #L42a806.  return v11 @kind object;
  #L42a808.  v6:= new `qc.c`;
  #L42a80c.  call `<init>`(v6) @signature `Lqc/c;.<init>:()V` @kind direct;
  #L42a812.  v2:= 0L;
  #L42a816.  v0:= 32L;
  #L42a81a.  call temp:= `h0`(v10) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L42a820.  v4:= temp @kind wide;
  #L42a822.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L42a828.  v4:= temp @kind wide;
  #L42a82a.  v0:= v10 @kind object;
  #L42a82c.  v1:= v6 @kind object;
  #L42a82e.  call temp:= `J`(v0, v1, v2, v4) @signature `Lqc/c;.J:(Lqc/c;JJ)Lqc/c;` @kind virtual;
  #L42a834.  v0:= new `java.io.EOFException`;
  #L42a838.  v1:= new `java.lang.StringBuilder`;
  #L42a83c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42a842.  v2:= "\\n not found: limit=" @kind object;
  #L42a846.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a84c.  call temp:= `h0`(v10) @signature `Lqc/c;.h0:()J` @kind virtual;
  #L42a852.  v2:= temp @kind wide;
  #L42a854.  call temp:= `min`(v2, v11) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L42a85a.  v11:= temp @kind wide;
  #L42a85c.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a862.  v11:= " content=" @kind object;
  #L42a866.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a86c.  call temp:= `c0`(v6) @signature `Lqc/c;.c0:()Lqc/f;` @kind virtual;
  #L42a872.  v11:= temp @kind object;
  #L42a874.  call temp:= `r`(v11) @signature `Lqc/f;.r:()Ljava/lang/String;` @kind virtual;
  #L42a87a.  v11:= temp @kind object;
  #L42a87c.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a882.  v11:= 8230I;
  #L42a886.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a88c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42a892.  v11:= temp @kind object;
  #L42a894.  call `<init>`(v0, v11) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a89a.  throw v0;
  #L42a89c.  v0:= new `java.lang.IllegalArgumentException`;
  #L42a8a0.  v1:= new `java.lang.StringBuilder`;
  #L42a8a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42a8aa.  v2:= "limit < 0: " @kind object;
  #L42a8ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a8b4.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a8ba.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42a8c0.  v11:= temp @kind object;
  #L42a8c2.  call `<init>`(v0, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a8c8.  throw v0;
}
procedure `qc.c` `M`(`qc.c` v0 @kind this) @signature `Lqc/c;.M:()Lqc/c;` @AccessFlag PUBLIC {
    temp;

  #L42aec0.  return v0 @kind object;
}
procedure `byte` `N`(`qc.c` v6 @kind this, `long` v7 ) @signature `Lqc/c;.N:(J)B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42a0f4.  v0:= v6.`qc.c.p` @type ^`long` @kind wide;
  #L42a0f8.  v4:= 1L;
  #L42a0fc.  v2:= v7 @kind wide;
  #L42a0fe.  call `b`(v0, v2, v4) @signature `Lqc/u;.b:(JJJ)V` @kind static;
  #L42a104.  v0:= v6.`qc.c.p` @type ^`long` @kind wide;
  #L42a108.  v2:= v0 - v7 @kind long;
  #L42a10c.  v4:= lcmp(v2, v7);
  #L42a110.  if v4 <= 0 then goto L42a142;
  #L42a114.  v0:= v6.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a118.  v1:= v0.`qc.o.c` @type ^`int`;
  #L42a11c.  v2:= v0.`qc.o.b` @type ^`int`;
  #L42a120.  v1:= v1 - v2 @kind int;
  #L42a122.  v3:= (`long`) v1 @kind i2l;
  #L42a124.  v1:= lcmp(v7, v3);
  #L42a128.  if v1 >= 0 then goto L42a13a;
  #L42a12c.  v0:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42a130.  v8:= (`int`) v7 @kind l2i;
  #L42a132.  v2:= v2 + v8 @kind int;
  #L42a134.  v7:= v0[v2] @kind byte;
  #L42a138.  return v7;
  #L42a13a.  v7:= v7 - v3 @kind long;
  #L42a13c.  v0:= v0.`qc.o.f` @type ^`qc.o` @kind object;
  #L42a140.  goto L42a118;
  #L42a142.  v7:= v7 - v0 @kind long;
  #L42a144.  v0:= v6.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a148.  v0:= v0.`qc.o.g` @type ^`qc.o` @kind object;
  #L42a14c.  v1:= v0.`qc.o.c` @type ^`int`;
  #L42a150.  v2:= v0.`qc.o.b` @type ^`int`;
  #L42a154.  v1:= v1 - v2 @kind int;
  #L42a156.  v3:= (`long`) v1 @kind i2l;
  #L42a158.  v7:= v7 + v3 @kind long;
  #L42a15a.  v3:= 0L;
  #L42a15e.  v1:= lcmp(v7, v3);
  #L42a162.  if v1 < 0 then goto L42a148;
  #L42a166.  v0:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42a16a.  v8:= (`int`) v7 @kind l2i;
  #L42a16c.  v2:= v2 + v8 @kind int;
  #L42a16e.  v7:= v0[v2] @kind byte;
  #L42a172.  return v7;
}
procedure `long` `O`(`qc.c` v15 @kind this, `byte` v16 , `long` v17 , `long` v19 ) @signature `Lqc/c;.O:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L42a978.  v0:= v15 @kind object;
  #L42a97a.  v1:= 0L;
  #L42a97e.  v3:= lcmp(v17, v1);
  #L42a982.  if v3 < 0 then goto L42aa76;
  #L42a986.  v3:= lcmp(v19, v17);
  #L42a98a.  if v3 < 0 then goto L42aa76;
  #L42a98e.  v3:= v0.`qc.c.p` @type ^`long` @kind wide;
  #L42a992.  v5:= lcmp(v19, v3);
  #L42a996.  if v5 <= 0 then goto L42a99e;
  #L42a99a.  v5:= v3 @kind wide;
  #L42a99c.  goto L42a9a2;
  #L42a99e.  v5:= v19 @kind wide;
  #L42a9a2.  v7:= -1L;
  #L42a9a6.  v9:= lcmp(v17, v5);
  #L42a9aa.  if v9 != 0 then goto L42a9b0;
  #L42a9ae.  return v7 @kind wide;
  #L42a9b0.  v9:= v0.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a9b4.  if v9 != 0 then goto L42a9ba;
  #L42a9b8.  return v7 @kind wide;
  #L42a9ba.  v10:= v3 - v17 @kind long;
  #L42a9be.  v12:= lcmp(v10, v17);
  #L42a9c2.  if v12 >= 0 then goto L42a9e2;
  #L42a9c6.  v1:= lcmp(v3, v17);
  #L42a9ca.  if v1 <= 0 then goto L42aa02;
  #L42a9ce.  v9:= v9.`qc.o.g` @type ^`qc.o` @kind object;
  #L42a9d2.  v1:= v9.`qc.o.c` @type ^`int`;
  #L42a9d6.  v2:= v9.`qc.o.b` @type ^`int`;
  #L42a9da.  v1:= v1 - v2 @kind int;
  #L42a9dc.  v1:= (`long`) v1 @kind i2l;
  #L42a9de.  v3:= v3 - v1 @kind long;
  #L42a9e0.  goto L42a9c6;
  #L42a9e2.  v3:= v9.`qc.o.c` @type ^`int`;
  #L42a9e6.  v4:= v9.`qc.o.b` @type ^`int`;
  #L42a9ea.  v3:= v3 - v4 @kind int;
  #L42a9ec.  v3:= (`long`) v3 @kind i2l;
  #L42a9ee.  v3:= v3 + v1 @kind long;
  #L42a9f0.  v10:= lcmp(v3, v17);
  #L42a9f4.  if v10 >= 0 then goto L42aa00;
  #L42a9f8.  v9:= v9.`qc.o.f` @type ^`qc.o` @kind object;
  #L42a9fc.  v1:= v3 @kind wide;
  #L42a9fe.  goto L42a9e2;
  #L42aa00.  v3:= v1 @kind wide;
  #L42aa02.  v1:= v17 @kind wide;
  #L42aa06.  v10:= lcmp(v3, v5);
  #L42aa0a.  if v10 >= 0 then goto L42aa74;
  #L42aa0e.  v10:= v9.`qc.o.a` @type ^`byte`[] @kind object;
  #L42aa12.  v11:= v9.`qc.o.c` @type ^`int`;
  #L42aa16.  v11:= (`long`) v11 @kind i2l;
  #L42aa18.  v13:= v9.`qc.o.b` @type ^`int`;
  #L42aa1c.  v13:= (`long`) v13 @kind i2l;
  #L42aa1e.  v13:= v13 + v5 @kind long;
  #L42aa20.  v13:= v13 - v3 @kind long;
  #L42aa22.  call temp:= `min`(v11, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L42aa28.  v11:= temp @kind wide;
  #L42aa2a.  v12:= (`int`) v11 @kind l2i;
  #L42aa2c.  v11:= v9.`qc.o.b` @type ^`int`;
  #L42aa30.  v13:= (`long`) v11 @kind i2l;
  #L42aa32.  v13:= v13 + v1 @kind long;
  #L42aa34.  v13:= v13 - v3 @kind long;
  #L42aa36.  v1:= (`int`) v13 @kind l2i;
  #L42aa38.  if v1 >= v12 then goto L42aa5a;
  #L42aa3c.  v2:= v10[v1] @kind byte;
  #L42aa40.  v11:= v16;
  #L42aa44.  if v2 != v11 then goto L42aa54;
  #L42aa48.  v2:= v9.`qc.o.b` @type ^`int`;
  #L42aa4c.  v1:= v1 - v2 @kind int;
  #L42aa4e.  v1:= (`long`) v1 @kind i2l;
  #L42aa50.  v1:= v1 + v3 @kind long;
  #L42aa52.  return v1 @kind wide;
  #L42aa54.  v1:= v1 + 1;
  #L42aa58.  goto L42aa38;
  #L42aa5a.  v11:= v16;
  #L42aa5e.  v1:= v9.`qc.o.c` @type ^`int`;
  #L42aa62.  v2:= v9.`qc.o.b` @type ^`int`;
  #L42aa66.  v1:= v1 - v2 @kind int;
  #L42aa68.  v1:= (`long`) v1 @kind i2l;
  #L42aa6a.  v3:= v3 + v1 @kind long;
  #L42aa6c.  v9:= v9.`qc.o.f` @type ^`qc.o` @kind object;
  #L42aa70.  v1:= v3 @kind wide;
  #L42aa72.  goto L42aa06;
  #L42aa74.  return v7 @kind wide;
  #L42aa76.  v1:= new `java.lang.IllegalArgumentException`;
  #L42aa7a.  v2:= 3I;
  #L42aa7c.  v2:= new `java.lang.Object`[v2];
  #L42aa80.  v3:= 0I;
  #L42aa82.  v4:= v0.`qc.c.p` @type ^`long` @kind wide;
  #L42aa86.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L42aa8c.  v4:= temp @kind object;
  #L42aa8e.  v2[v3]:= v4 @kind object;
  #L42aa92.  call temp:= `valueOf`(v17) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L42aa98.  v3:= temp @kind object;
  #L42aa9a.  v4:= 1I;
  #L42aa9c.  v2[v4]:= v3 @kind object;
  #L42aaa0.  v3:= 2I;
  #L42aaa2.  call temp:= `valueOf`(v19) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L42aaa8.  v4:= temp @kind object;
  #L42aaaa.  v2[v3]:= v4 @kind object;
  #L42aaae.  v3:= "size=%s fromIndex=%s toIndex=%s" @kind object;
  #L42aab2.  call temp:= `format`(v3, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L42aab8.  v2:= temp @kind object;
  #L42aaba.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42aac0.  throw v1;
}
procedure `long` `T`(`qc.c` v5 @kind this, `qc.c` v6 @kind object, `long` v7 ) @signature `Lqc/c;.T:(Lqc/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42aad4.  if v6 == 0 then goto L42ab36;
  #L42aad8.  v0:= 0L;
  #L42aadc.  v2:= lcmp(v7, v0);
  #L42aae0.  if v2 < 0 then goto L42ab08;
  #L42aae4.  v2:= v5.`qc.c.p` @type ^`long` @kind wide;
  #L42aae8.  v4:= lcmp(v2, v0);
  #L42aaec.  if v4 != 0 then goto L42aaf6;
  #L42aaf0.  v6:= -1L;
  #L42aaf4.  return v6 @kind wide;
  #L42aaf6.  v0:= lcmp(v7, v2);
  #L42aafa.  if v0 <= 0 then goto L42ab00;
  #L42aafe.  v7:= v2 @kind wide;
  #L42ab00.  call `q`(v6, v5, v7) @signature `Lqc/c;.q:(Lqc/c;J)V` @kind virtual;
  #L42ab06.  return v7 @kind wide;
  #L42ab08.  v6:= new `java.lang.IllegalArgumentException`;
  #L42ab0c.  v0:= new `java.lang.StringBuilder`;
  #L42ab10.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42ab16.  v1:= "byteCount < 0: " @kind object;
  #L42ab1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ab20.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ab26.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42ab2c.  v7:= temp @kind object;
  #L42ab2e.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ab34.  throw v6;
  #L42ab36.  v6:= new `java.lang.IllegalArgumentException`;
  #L42ab3a.  v7:= "sink == null" @kind object;
  #L42ab3e.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ab44.  throw v6;
}
procedure `void` `U`(`qc.c` v3 @kind this, `long` v4 ) @signature `Lqc/c;.U:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42ba0c.  v0:= v3.`qc.c.p` @type ^`long` @kind wide;
  #L42ba10.  v2:= lcmp(v0, v4);
  #L42ba14.  if v2 < 0 then goto L42ba1a;
  #L42ba18.  return @kind void;
  #L42ba1a.  v4:= new `java.io.EOFException`;
  #L42ba1e.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L42ba24.  throw v4;
}
procedure `qc.d` `V`(`qc.c` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lqc/c;.V:(Ljava/lang/String;)Lqc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42b6ac.  call temp:= `u0`(v0, v1) @signature `Lqc/c;.u0:(Ljava/lang/String;)Lqc/c;` @kind virtual;
  #L42b6b2.  v1:= temp @kind object;
  #L42b6b4.  return v1 @kind object;
}
procedure `long` `W`(`qc.c` v6 @kind this, `byte` v7 ) @signature `Lqc/c;.W:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42a94c.  v2:= 0L;
  #L42a950.  v4:= 9223372036854775807L;
  #L42a95a.  v0:= v6 @kind object;
  #L42a95c.  v1:= v7;
  #L42a95e.  call temp:= `O`(v0, v1, v2, v4) @signature `Lqc/c;.O:(BJJ)J` @kind virtual;
  #L42a964.  v0:= temp @kind wide;
  #L42a966.  return v0 @kind wide;
}
procedure `long` `Y`(`qc.c` v15 @kind this) @signature `Lqc/c;.Y:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L42ab80.  v0:= v15.`qc.c.p` @type ^`long` @kind wide;
  #L42ab84.  v2:= 0L;
  #L42ab88.  v4:= lcmp(v0, v2);
  #L42ab8c.  if v4 == 0 then goto L42acd8;
  #L42ab90.  v0:= 0I;
  #L42ab92.  v4:= v2 @kind wide;
  #L42ab94.  v1:= 0I;
  #L42ab96.  v6:= v15.`qc.c.o` @type ^`qc.o` @kind object;
  #L42ab9a.  v7:= v6.`qc.o.a` @type ^`byte`[] @kind object;
  #L42ab9e.  v8:= v6.`qc.o.b` @type ^`int`;
  #L42aba2.  v9:= v6.`qc.o.c` @type ^`int`;
  #L42aba6.  if v8 >= v9 then goto L42aca2;
  #L42abaa.  v10:= v7[v8] @kind byte;
  #L42abae.  v11:= 48I;
  #L42abb2.  if v10 < v11 then goto L42abc4;
  #L42abb6.  v11:= 57I;
  #L42abba.  if v10 > v11 then goto L42abc4;
  #L42abbe.  v11:= v10 + -48;
  #L42abc2.  goto L42abf4;
  #L42abc4.  v11:= 97I;
  #L42abc8.  if v10 < v11 then goto L42abde;
  #L42abcc.  v11:= 102I;
  #L42abd0.  if v10 > v11 then goto L42abde;
  #L42abd4.  v11:= v10 + -97;
  #L42abd8.  v11:= v11 + 10;
  #L42abdc.  goto L42abf4;
  #L42abde.  v11:= 65I;
  #L42abe2.  if v10 < v11 then goto L42ac64;
  #L42abe6.  v11:= 70I;
  #L42abea.  if v10 > v11 then goto L42ac64;
  #L42abee.  v11:= v10 + -65;
  #L42abf2.  goto L42abd8;
  #L42abf4.  v12:= -3.105036184601418E231D;
  #L42abf8.  v12:= v12 ^& v4 @kind long;
  #L42abfa.  v14:= lcmp(v12, v2);
  #L42abfe.  if v14 != 0 then goto L42ac14;
  #L42ac02.  v10:= 4I;
  #L42ac04.  v4:= v4 ^< v10 @kind long;
  #L42ac06.  v10:= (`long`) v11 @kind i2l;
  #L42ac08.  v4:= v4 ^| v10 @kind long;
  #L42ac0a.  v8:= v8 + 1;
  #L42ac0e.  v0:= v0 + 1;
  #L42ac12.  goto L42aba6;
  #L42ac14.  v0:= new `qc.c`;
  #L42ac18.  call `<init>`(v0) @signature `Lqc/c;.<init>:()V` @kind direct;
  #L42ac1e.  call temp:= `q0`(v0, v4) @signature `Lqc/c;.q0:(J)Lqc/c;` @kind virtual;
  #L42ac24.  v0:= temp @kind object;
  #L42ac26.  call temp:= `p0`(v0, v10) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42ac2c.  v0:= temp @kind object;
  #L42ac2e.  v1:= new `java.lang.NumberFormatException`;
  #L42ac32.  v2:= new `java.lang.StringBuilder`;
  #L42ac36.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42ac3c.  v3:= "Number too large: " @kind object;
  #L42ac40.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ac46.  call temp:= `e0`(v0) @signature `Lqc/c;.e0:()Ljava/lang/String;` @kind virtual;
  #L42ac4c.  v0:= temp @kind object;
  #L42ac4e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ac54.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42ac5a.  v0:= temp @kind object;
  #L42ac5c.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ac62.  throw v1;
  #L42ac64.  if v0 == 0 then goto L42ac6c;
  #L42ac68.  v1:= 1I;
  #L42ac6a.  goto L42aca2;
  #L42ac6c.  v0:= new `java.lang.NumberFormatException`;
  #L42ac70.  v1:= new `java.lang.StringBuilder`;
  #L42ac74.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42ac7a.  v2:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L42ac7e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ac84.  call temp:= `toHexString`(v10) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L42ac8a.  v2:= temp @kind object;
  #L42ac8c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ac92.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42ac98.  v1:= temp @kind object;
  #L42ac9a.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42aca0.  throw v0;
  #L42aca2.  if v8 != v9 then goto L42acba;
  #L42aca6.  call temp:= `b`(v6) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42acac.  v7:= temp @kind object;
  #L42acae.  v15.`qc.c.o` @type ^`qc.o` := v7 @kind object;
  #L42acb2.  call `a`(v6) @signature `Lqc/p;.a:(Lqc/o;)V` @kind static;
  #L42acb8.  goto L42acbe;
  #L42acba.  v6.`qc.o.b` @type ^`int` := v8;
  #L42acbe.  if v1 != 0 then goto L42acca;
  #L42acc2.  v6:= v15.`qc.c.o` @type ^`qc.o` @kind object;
  #L42acc6.  if v6 != 0 then goto L42ab96;
  #L42acca.  v1:= v15.`qc.c.p` @type ^`long` @kind wide;
  #L42acce.  v6:= (`long`) v0 @kind i2l;
  #L42acd0.  v1:= v1 - v6 @kind long;
  #L42acd2.  v15.`qc.c.p` @type ^`long` := v1 @kind wide;
  #L42acd6.  return v4 @kind wide;
  #L42acd8.  v0:= new `java.lang.IllegalStateException`;
  #L42acdc.  v1:= "size == 0" @kind object;
  #L42ace0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ace6.  throw v0;
}
procedure `long` `Z`(`qc.c` v5 @kind this, `qc.r` v6 @kind object) @signature `Lqc/c;.Z:(Lqc/r;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42ab58.  v0:= v5.`qc.c.p` @type ^`long` @kind wide;
  #L42ab5c.  v2:= 0L;
  #L42ab60.  v4:= lcmp(v0, v2);
  #L42ab64.  if v4 <= 0 then goto L42ab6e;
  #L42ab68.  call `q`(v6, v5, v0) @signature `Lqc/r;.q:(Lqc/c;J)V` @kind interface;
  #L42ab6e.  return v0 @kind wide;
}
procedure `void` `a`(`qc.c` v2 @kind this) @signature `Lqc/c;.a:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L42b96c.  v0:= v2.`qc.c.p` @type ^`long` @kind wide;
  #L42b970.  call `d`(v2, v0) @signature `Lqc/c;.d:(J)V` @kind virtual;
  #L42b976.  return @kind void;
  #L42b978.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L42b97a.  v1:= new `java.lang.AssertionError`;
  #L42b97e.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42b984.  throw v1;
  catch `java.io.EOFException` @[L42b96c..L42b976] goto L42b978;
}
procedure `int` `a0`(`qc.c` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lqc/c;.a0:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42a2e8.  v0:= length @variable v8;
  #L42a2ea.  v1:= (`long`) v0 @kind i2l;
  #L42a2ec.  v3:= (`long`) v9 @kind i2l;
  #L42a2ee.  v5:= (`long`) v10 @kind i2l;
  #L42a2f0.  call `b`(v1, v3, v5) @signature `Lqc/u;.b:(JJJ)V` @kind static;
  #L42a2f6.  v0:= v7.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a2fa.  if v0 != 0 then goto L42a302;
  #L42a2fe.  v8:= -1I;
  #L42a300.  return v8;
  #L42a302.  v1:= v0.`qc.o.c` @type ^`int`;
  #L42a306.  v2:= v0.`qc.o.b` @type ^`int`;
  #L42a30a.  v1:= v1 - v2 @kind int;
  #L42a30c.  call temp:= `min`(v10, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L42a312.  v10:= temp;
  #L42a314.  v1:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42a318.  v2:= v0.`qc.o.b` @type ^`int`;
  #L42a31c.  call `arraycopy`(v1, v2, v8, v9, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42a322.  v8:= v0.`qc.o.b` @type ^`int`;
  #L42a326.  v8:= v8 + v10 @kind int;
  #L42a328.  v0.`qc.o.b` @type ^`int` := v8;
  #L42a32c.  v1:= v7.`qc.c.p` @type ^`long` @kind wide;
  #L42a330.  v3:= (`long`) v10 @kind i2l;
  #L42a332.  v1:= v1 - v3 @kind long;
  #L42a334.  v7.`qc.c.p` @type ^`long` := v1 @kind wide;
  #L42a338.  v9:= v0.`qc.o.c` @type ^`int`;
  #L42a33c.  if v8 != v9 then goto L42a352;
  #L42a340.  call temp:= `b`(v0) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42a346.  v8:= temp @kind object;
  #L42a348.  v7.`qc.c.o` @type ^`qc.o` := v8 @kind object;
  #L42a34c.  call `a`(v0) @signature `Lqc/p;.a:(Lqc/o;)V` @kind static;
  #L42a352.  return v10;
}
procedure `qc.c` `b`(`qc.c` v0 @kind this) @signature `Lqc/c;.b:()Lqc/c;` @AccessFlag PUBLIC {
    temp;

  #L42ad58.  return v0 @kind object;
}
procedure `byte`[] `b0`(`qc.c` v2 @kind this) @signature `Lqc/c;.b0:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a1f4.  v0:= v2.`qc.c.p` @type ^`long` @kind wide;
  #L42a1f8.  call temp:= `B`(v2, v0) @signature `Lqc/c;.B:(J)[B` @kind virtual;
  #L42a1fe.  v0:= temp @kind object;
  #L42a200.  return v0 @kind object;
  #L42a202.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L42a204.  v1:= new `java.lang.AssertionError`;
  #L42a208.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42a20e.  throw v1;
  catch `java.io.EOFException` @[L42a1f4..L42a200] goto L42a202;
}
procedure `qc.f` `c0`(`qc.c` v2 @kind this) @signature `Lqc/c;.c0:()Lqc/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b6c8.  v0:= new `qc.f`;
  #L42b6cc.  call temp:= `b0`(v2) @signature `Lqc/c;.b0:()[B` @kind virtual;
  #L42b6d2.  v1:= temp @kind object;
  #L42b6d4.  call `<init>`(v0, v1) @signature `Lqc/f;.<init>:([B)V` @kind direct;
  #L42b6da.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`qc.c` v1 @kind this) @signature `Lqc/c;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L42a590.  call temp:= `E`(v1) @signature `Lqc/c;.E:()Lqc/c;` @kind virtual;
  #L42a596.  v0:= temp @kind object;
  #L42a598.  return v0 @kind object;
}
procedure `void` `close`(`qc.c` v0 @kind this) @signature `Lqc/c;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L42b9a8.  return @kind void;
}
procedure `void` `d`(`qc.c` v6 @kind this, `long` v7 ) @signature `Lqc/c;.d:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42ba38.  v0:= 0L;
  #L42ba3c.  v2:= lcmp(v7, v0);
  #L42ba40.  if v2 <= 0 then goto L42baa6;
  #L42ba44.  v0:= v6.`qc.c.o` @type ^`qc.o` @kind object;
  #L42ba48.  if v0 == 0 then goto L42ba9a;
  #L42ba4c.  v1:= v0.`qc.o.c` @type ^`int`;
  #L42ba50.  v0:= v0.`qc.o.b` @type ^`int`;
  #L42ba54.  v1:= v1 - v0 @kind int;
  #L42ba56.  v0:= (`long`) v1 @kind i2l;
  #L42ba58.  call temp:= `min`(v7, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L42ba5e.  v0:= temp @kind wide;
  #L42ba60.  v1:= (`int`) v0 @kind l2i;
  #L42ba62.  v2:= v6.`qc.c.p` @type ^`long` @kind wide;
  #L42ba66.  v4:= (`long`) v1 @kind i2l;
  #L42ba68.  v2:= v2 - v4 @kind long;
  #L42ba6a.  v6.`qc.c.p` @type ^`long` := v2 @kind wide;
  #L42ba6e.  v7:= v7 - v4 @kind long;
  #L42ba70.  v0:= v6.`qc.c.o` @type ^`qc.o` @kind object;
  #L42ba74.  v2:= v0.`qc.o.b` @type ^`int`;
  #L42ba78.  v2:= v2 + v1 @kind int;
  #L42ba7a.  v0.`qc.o.b` @type ^`int` := v2;
  #L42ba7e.  v1:= v0.`qc.o.c` @type ^`int`;
  #L42ba82.  if v2 != v1 then goto L42ba38;
  #L42ba86.  call temp:= `b`(v0) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42ba8c.  v1:= temp @kind object;
  #L42ba8e.  v6.`qc.c.o` @type ^`qc.o` := v1 @kind object;
  #L42ba92.  call `a`(v0) @signature `Lqc/p;.a:(Lqc/o;)V` @kind static;
  #L42ba98.  goto L42ba38;
  #L42ba9a.  v7:= new `java.io.EOFException`;
  #L42ba9e.  call `<init>`(v7) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L42baa4.  throw v7;
  #L42baa6.  return @kind void;
}
procedure `java.lang.String` `d0`(`qc.c` v7 @kind this, `long` v8 , `java.nio.charset.Charset` v10 @kind object) @signature `Lqc/c;.d0:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42a5ac.  v0:= v7.`qc.c.p` @type ^`long` @kind wide;
  #L42a5b0.  v2:= 0L;
  #L42a5b4.  v4:= v8 @kind wide;
  #L42a5b6.  call `b`(v0, v2, v4) @signature `Lqc/u;.b:(JJJ)V` @kind static;
  #L42a5bc.  if v10 == 0 then goto L42a680;
  #L42a5c0.  v0:= 2147483647L;
  #L42a5c6.  v2:= lcmp(v8, v0);
  #L42a5ca.  if v2 > 0 then goto L42a652;
  #L42a5ce.  v0:= 0L;
  #L42a5d2.  v2:= lcmp(v8, v0);
  #L42a5d6.  if v2 != 0 then goto L42a5e0;
  #L42a5da.  v8:= "" @kind object;
  #L42a5de.  return v8 @kind object;
  #L42a5e0.  v0:= v7.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a5e4.  v1:= v0.`qc.o.b` @type ^`int`;
  #L42a5e8.  v2:= (`long`) v1 @kind i2l;
  #L42a5ea.  v2:= v2 + v8 @kind long;
  #L42a5ec.  v4:= v0.`qc.o.c` @type ^`int`;
  #L42a5f0.  v4:= (`long`) v4 @kind i2l;
  #L42a5f2.  v6:= lcmp(v2, v4);
  #L42a5f6.  if v6 <= 0 then goto L42a60e;
  #L42a5fa.  v0:= new `java.lang.String`;
  #L42a5fe.  call temp:= `B`(v7, v8) @signature `Lqc/c;.B:(J)[B` @kind virtual;
  #L42a604.  v8:= temp @kind object;
  #L42a606.  call `<init>`(v0, v8, v10) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L42a60c.  return v0 @kind object;
  #L42a60e.  v2:= new `java.lang.String`;
  #L42a612.  v3:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42a616.  v4:= (`int`) v8 @kind l2i;
  #L42a618.  call `<init>`(v2, v3, v1, v4, v10) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L42a61e.  v10:= v0.`qc.o.b` @type ^`int`;
  #L42a622.  v3:= (`long`) v10 @kind i2l;
  #L42a624.  v3:= v3 + v8 @kind long;
  #L42a626.  v10:= (`int`) v3 @kind l2i;
  #L42a628.  v0.`qc.o.b` @type ^`int` := v10;
  #L42a62c.  v3:= v7.`qc.c.p` @type ^`long` @kind wide;
  #L42a630.  v3:= v3 - v8 @kind long;
  #L42a632.  v7.`qc.c.p` @type ^`long` := v3 @kind wide;
  #L42a636.  v8:= v0.`qc.o.c` @type ^`int`;
  #L42a63a.  if v10 != v8 then goto L42a650;
  #L42a63e.  call temp:= `b`(v0) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42a644.  v8:= temp @kind object;
  #L42a646.  v7.`qc.c.o` @type ^`qc.o` := v8 @kind object;
  #L42a64a.  call `a`(v0) @signature `Lqc/p;.a:(Lqc/o;)V` @kind static;
  #L42a650.  return v2 @kind object;
  #L42a652.  v10:= new `java.lang.IllegalArgumentException`;
  #L42a656.  v0:= new `java.lang.StringBuilder`;
  #L42a65a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42a660.  v1:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L42a664.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a66a.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a670.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42a676.  v8:= temp @kind object;
  #L42a678.  call `<init>`(v10, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a67e.  throw v10;
  #L42a680.  v8:= new `java.lang.IllegalArgumentException`;
  #L42a684.  v9:= "charset == null" @kind object;
  #L42a688.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a68e.  throw v8;
}
procedure `java.lang.String` `e0`(`qc.c` v3 @kind this) @signature `Lqc/c;.e0:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42a6a0.  v0:= v3.`qc.c.p` @type ^`long` @kind wide;
  #L42a6a4.  v2:= `@@qc.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L42a6a8.  call temp:= `d0`(v3, v0, v2) @signature `Lqc/c;.d0:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L42a6ae.  v0:= temp @kind object;
  #L42a6b0.  return v0 @kind object;
  #L42a6b2.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L42a6b4.  v1:= new `java.lang.AssertionError`;
  #L42a6b8.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42a6be.  throw v1;
  catch `java.io.EOFException` @[L42a6a0..L42a6b0] goto L42a6b2;
}
procedure `boolean` `equals`(`qc.c` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lqc/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L429fe4.  v0:= 1I;
  #L429fe6.  if v13 != v14 then goto L429fec;
  #L429fea.  return v0;
  #L429fec.  v1:= instanceof @variable v14 @type ^`qc.c` @kind boolean;
  #L429ff0.  v2:= 0I;
  #L429ff2.  if v1 != 0 then goto L429ff8;
  #L429ff6.  return v2;
  #L429ff8.  v14:= (`qc.c`) v14 @kind object;
  #L429ffc.  v3:= v13.`qc.c.p` @type ^`long` @kind wide;
  #L42a000.  v5:= v14.`qc.c.p` @type ^`long` @kind wide;
  #L42a004.  v1:= lcmp(v3, v5);
  #L42a008.  if v1 == 0 then goto L42a00e;
  #L42a00c.  return v2;
  #L42a00e.  v5:= 0L;
  #L42a012.  v1:= lcmp(v3, v5);
  #L42a016.  if v1 != 0 then goto L42a01c;
  #L42a01a.  return v0;
  #L42a01c.  v1:= v13.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a020.  v14:= v14.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a024.  v3:= v1.`qc.o.b` @type ^`int`;
  #L42a028.  v4:= v14.`qc.o.b` @type ^`int`;
  #L42a02c.  v7:= v13.`qc.c.p` @type ^`long` @kind wide;
  #L42a030.  v9:= lcmp(v5, v7);
  #L42a034.  if v9 >= 0 then goto L42a0a6;
  #L42a038.  v7:= v1.`qc.o.c` @type ^`int`;
  #L42a03c.  v7:= v7 - v3 @kind int;
  #L42a03e.  v8:= v14.`qc.o.c` @type ^`int`;
  #L42a042.  v8:= v8 - v4 @kind int;
  #L42a044.  call temp:= `min`(v7, v8) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L42a04a.  v7:= temp;
  #L42a04c.  v7:= (`long`) v7 @kind i2l;
  #L42a04e.  v9:= 0I;
  #L42a050.  v10:= (`long`) v9 @kind i2l;
  #L42a052.  v12:= lcmp(v10, v7);
  #L42a056.  if v12 >= 0 then goto L42a082;
  #L42a05a.  v10:= v1.`qc.o.a` @type ^`byte`[] @kind object;
  #L42a05e.  v11:= v3 + 1;
  #L42a062.  v3:= v10[v3] @kind byte;
  #L42a066.  v10:= v14.`qc.o.a` @type ^`byte`[] @kind object;
  #L42a06a.  v12:= v4 + 1;
  #L42a06e.  v4:= v10[v4] @kind byte;
  #L42a072.  if v3 == v4 then goto L42a078;
  #L42a076.  return v2;
  #L42a078.  v9:= v9 + 1;
  #L42a07c.  v3:= v11;
  #L42a07e.  v4:= v12;
  #L42a080.  goto L42a050;
  #L42a082.  v9:= v1.`qc.o.c` @type ^`int`;
  #L42a086.  if v3 != v9 then goto L42a092;
  #L42a08a.  v1:= v1.`qc.o.f` @type ^`qc.o` @kind object;
  #L42a08e.  v3:= v1.`qc.o.b` @type ^`int`;
  #L42a092.  v9:= v14.`qc.o.c` @type ^`int`;
  #L42a096.  if v4 != v9 then goto L42a0a2;
  #L42a09a.  v14:= v14.`qc.o.f` @type ^`qc.o` @kind object;
  #L42a09e.  v4:= v14.`qc.o.b` @type ^`int`;
  #L42a0a2.  v5:= v5 + v7 @kind long;
  #L42a0a4.  goto L42a02c;
  #L42a0a6.  return v0;
}
procedure `qc.t` `f`(`qc.c` v1 @kind this) @signature `Lqc/c;.f:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b808.  v0:= `@@qc.t.d` @type ^`qc.t` @kind object;
  #L42b80c.  return v0 @kind object;
}
procedure `java.lang.String` `f0`(`qc.c` v1 @kind this, `long` v2 ) @signature `Lqc/c;.f0:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a6e0.  v0:= `@@qc.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L42a6e4.  call temp:= `d0`(v1, v2, v0) @signature `Lqc/c;.d0:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L42a6ea.  v2:= temp @kind object;
  #L42a6ec.  return v2 @kind object;
}
procedure `void` `flush`(`qc.c` v0 @kind this) @signature `Lqc/c;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L42b9bc.  return @kind void;
}
procedure `qc.d` `g`(`qc.c` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lqc/c;.g:([BII)Lqc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42b620.  call temp:= `n0`(v0, v1, v2, v3) @signature `Lqc/c;.n0:([BII)Lqc/c;` @kind virtual;
  #L42b626.  v1:= temp @kind object;
  #L42b628.  return v1 @kind object;
}
procedure `java.lang.String` `g0`(`qc.c` v6 @kind this, `long` v7 ) @signature `Lqc/c;.g0:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42a700.  v0:= 1L;
  #L42a704.  v2:= 0L;
  #L42a708.  v4:= lcmp(v7, v2);
  #L42a70c.  if v4 <= 0 then goto L42a738;
  #L42a710.  v2:= v7 - v0 @kind long;
  #L42a714.  call temp:= `N`(v6, v2) @signature `Lqc/c;.N:(J)B` @kind virtual;
  #L42a71a.  v4:= temp;
  #L42a71c.  v5:= 13I;
  #L42a720.  if v4 != v5 then goto L42a738;
  #L42a724.  call temp:= `f0`(v6, v2) @signature `Lqc/c;.f0:(J)Ljava/lang/String;` @kind virtual;
  #L42a72a.  v7:= temp @kind object;
  #L42a72c.  v0:= 2L;
  #L42a730.  call `d`(v6, v0) @signature `Lqc/c;.d:(J)V` @kind virtual;
  #L42a736.  return v7 @kind object;
  #L42a738.  call temp:= `f0`(v6, v7) @signature `Lqc/c;.f0:(J)Ljava/lang/String;` @kind virtual;
  #L42a73e.  v7:= temp @kind object;
  #L42a740.  goto L42a730;
}
procedure `long` `h0`(`qc.c` v2 @kind this) @signature `Lqc/c;.h0:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L42acf8.  v0:= v2.`qc.c.p` @type ^`long` @kind wide;
  #L42acfc.  return v0 @kind wide;
}
procedure `int` `hashCode`(`qc.c` v5 @kind this) @signature `Lqc/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42a29c.  v0:= v5.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a2a0.  if v0 != 0 then goto L42a2a8;
  #L42a2a4.  v0:= 0I;
  #L42a2a6.  return v0;
  #L42a2a8.  v1:= 1I;
  #L42a2aa.  v2:= v0.`qc.o.b` @type ^`int`;
  #L42a2ae.  v3:= v0.`qc.o.c` @type ^`int`;
  #L42a2b2.  if v2 >= v3 then goto L42a2ca;
  #L42a2b6.  v1:= v1 * 31;
  #L42a2ba.  v4:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42a2be.  v4:= v4[v2] @kind byte;
  #L42a2c2.  v1:= v1 + v4 @kind int;
  #L42a2c4.  v2:= v2 + 1;
  #L42a2c8.  goto L42a2b2;
  #L42a2ca.  v0:= v0.`qc.o.f` @type ^`qc.o` @kind object;
  #L42a2ce.  v2:= v5.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a2d2.  if v0 != v2 then goto L42a2aa;
  #L42a2d6.  return v1;
}
procedure `qc.f` `i0`(`qc.c` v5 @kind this) @signature `Lqc/c;.i0:()Lqc/f;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b710.  v0:= v5.`qc.c.p` @type ^`long` @kind wide;
  #L42b714.  v2:= 2147483647L;
  #L42b71a.  v4:= lcmp(v0, v2);
  #L42b71e.  if v4 > 0 then goto L42b72e;
  #L42b722.  v1:= (`int`) v0 @kind l2i;
  #L42b724.  call temp:= `j0`(v5, v1) @signature `Lqc/c;.j0:(I)Lqc/f;` @kind virtual;
  #L42b72a.  v0:= temp @kind object;
  #L42b72c.  return v0 @kind object;
  #L42b72e.  v0:= new `java.lang.IllegalArgumentException`;
  #L42b732.  v1:= new `java.lang.StringBuilder`;
  #L42b736.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42b73c.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L42b740.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b746.  v2:= v5.`qc.c.p` @type ^`long` @kind wide;
  #L42b74a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b750.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42b756.  v1:= temp @kind object;
  #L42b758.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b75e.  throw v0;
}
procedure `boolean` `isOpen`(`qc.c` v1 @kind this) @signature `Lqc/c;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a0e0.  v0:= 1I;
  #L42a0e2.  return v0;
}
procedure `qc.f` `j0`(`qc.c` v1 @kind this, `int` v2 ) @signature `Lqc/c;.j0:(I)Lqc/f;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42b770.  if v2 != 0 then goto L42b77a;
  #L42b774.  v2:= `@@qc.f.s` @type ^`qc.f` @kind object;
  #L42b778.  return v2 @kind object;
  #L42b77a.  v0:= new `qc.q`;
  #L42b77e.  call `<init>`(v0, v1, v2) @signature `Lqc/q;.<init>:(Lqc/c;I)V` @kind direct;
  #L42b784.  return v0 @kind object;
}
procedure `qc.o` `k0`(`qc.c` v3 @kind this, `int` v4 ) @signature `Lqc/c;.k0:(I)Lqc/o;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L42b798.  v0:= 1I;
  #L42b79a.  if v4 < v0 then goto L42b7ec;
  #L42b79e.  v0:= 8192I;
  #L42b7a2.  if v4 > v0 then goto L42b7ec;
  #L42b7a6.  v1:= v3.`qc.c.o` @type ^`qc.o` @kind object;
  #L42b7aa.  if v1 != 0 then goto L42b7c4;
  #L42b7ae.  call temp:= `b`() @signature `Lqc/p;.b:()Lqc/o;` @kind static;
  #L42b7b4.  v4:= temp @kind object;
  #L42b7b6.  v3.`qc.c.o` @type ^`qc.o` := v4 @kind object;
  #L42b7ba.  v4.`qc.o.g` @type ^`qc.o` := v4 @kind object;
  #L42b7be.  v4.`qc.o.f` @type ^`qc.o` := v4 @kind object;
  #L42b7c2.  return v4 @kind object;
  #L42b7c4.  v1:= v1.`qc.o.g` @type ^`qc.o` @kind object;
  #L42b7c8.  v2:= v1.`qc.o.c` @type ^`int`;
  #L42b7cc.  v2:= v2 + v4 @kind int;
  #L42b7ce.  if v2 > v0 then goto L42b7da;
  #L42b7d2.  v4:= v1.`qc.o.e` @type ^`boolean` @kind boolean;
  #L42b7d6.  if v4 != 0 then goto L42b7ea;
  #L42b7da.  call temp:= `b`() @signature `Lqc/p;.b:()Lqc/o;` @kind static;
  #L42b7e0.  v4:= temp @kind object;
  #L42b7e2.  call temp:= `c`(v1, v4) @signature `Lqc/o;.c:(Lqc/o;)Lqc/o;` @kind virtual;
  #L42b7e8.  v1:= temp @kind object;
  #L42b7ea.  return v1 @kind object;
  #L42b7ec.  v4:= new `java.lang.IllegalArgumentException`;
  #L42b7f0.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L42b7f6.  throw v4;
}
procedure `qc.c` `l0`(`qc.c` v1 @kind this, `qc.f` v2 @kind object) @signature `Lqc/c;.l0:(Lqc/f;)Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42af88.  if v2 == 0 then goto L42af94;
  #L42af8c.  call `S`(v2, v1) @signature `Lqc/f;.S:(Lqc/c;)V` @kind virtual;
  #L42af92.  return v1 @kind object;
  #L42af94.  v2:= new `java.lang.IllegalArgumentException`;
  #L42af98.  v0:= "byteString == null" @kind object;
  #L42af9c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42afa2.  throw v2;
}
procedure `qc.d` `m`(`qc.c` v0 @kind this, `long` v1 ) @signature `Lqc/c;.m:(J)Lqc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42b658.  call temp:= `q0`(v0, v1) @signature `Lqc/c;.q0:(J)Lqc/c;` @kind virtual;
  #L42b65e.  v1:= temp @kind object;
  #L42b660.  return v1 @kind object;
}
procedure `qc.c` `m0`(`qc.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Lqc/c;.m0:([B)Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42aed4.  if v3 == 0 then goto L42aee6;
  #L42aed8.  v0:= 0I;
  #L42aeda.  v1:= length @variable v3;
  #L42aedc.  call temp:= `n0`(v2, v3, v0, v1) @signature `Lqc/c;.n0:([BII)Lqc/c;` @kind virtual;
  #L42aee2.  v3:= temp @kind object;
  #L42aee4.  return v3 @kind object;
  #L42aee6.  v3:= new `java.lang.IllegalArgumentException`;
  #L42aeea.  v0:= "source == null" @kind object;
  #L42aeee.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42aef4.  throw v3;
}
procedure `qc.f` `n`(`qc.c` v1 @kind this, `long` v2 ) @signature `Lqc/c;.n:(J)Lqc/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b6ec.  v0:= new `qc.f`;
  #L42b6f0.  call temp:= `B`(v1, v2) @signature `Lqc/c;.B:(J)[B` @kind virtual;
  #L42b6f6.  v2:= temp @kind object;
  #L42b6f8.  call `<init>`(v0, v2) @signature `Lqc/f;.<init>:([B)V` @kind direct;
  #L42b6fe.  return v0 @kind object;
}
procedure `qc.c` `n0`(`qc.c` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Lqc/c;.n0:([BII)Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L42af08.  if v10 == 0 then goto L42af68;
  #L42af0c.  v0:= length @variable v10;
  #L42af0e.  v1:= (`long`) v0 @kind i2l;
  #L42af10.  v3:= (`long`) v11 @kind i2l;
  #L42af12.  v7:= (`long`) v12 @kind i2l;
  #L42af14.  v5:= v7 @kind wide;
  #L42af16.  call `b`(v1, v3, v5) @signature `Lqc/u;.b:(JJJ)V` @kind static;
  #L42af1c.  v12:= v12 + v11 @kind int;
  #L42af1e.  if v11 >= v12 then goto L42af5c;
  #L42af22.  v0:= 1I;
  #L42af24.  call temp:= `k0`(v9, v0) @signature `Lqc/c;.k0:(I)Lqc/o;` @kind virtual;
  #L42af2a.  v0:= temp @kind object;
  #L42af2c.  v1:= v12 - v11 @kind int;
  #L42af30.  v2:= v0.`qc.o.c` @type ^`int`;
  #L42af34.  v2:= v2 - 8192;
  #L42af38.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L42af3e.  v1:= temp;
  #L42af40.  v2:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42af44.  v3:= v0.`qc.o.c` @type ^`int`;
  #L42af48.  call `arraycopy`(v10, v11, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42af4e.  v11:= v11 + v1 @kind int;
  #L42af50.  v2:= v0.`qc.o.c` @type ^`int`;
  #L42af54.  v2:= v2 + v1 @kind int;
  #L42af56.  v0.`qc.o.c` @type ^`int` := v2;
  #L42af5a.  goto L42af1e;
  #L42af5c.  v10:= v9.`qc.c.p` @type ^`long` @kind wide;
  #L42af60.  v10:= v10 + v7 @kind long;
  #L42af62.  v9.`qc.c.p` @type ^`long` := v10 @kind wide;
  #L42af66.  return v9 @kind object;
  #L42af68.  v10:= new `java.lang.IllegalArgumentException`;
  #L42af6c.  v11:= "source == null" @kind object;
  #L42af70.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42af76.  throw v10;
}
procedure `long` `o0`(`qc.c` v7 @kind this, `qc.s` v8 @kind object) @signature `Lqc/c;.o0:(Lqc/s;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42ad10.  if v8 == 0 then goto L42ad36;
  #L42ad14.  v0:= 0L;
  #L42ad18.  v2:= 8192L;
  #L42ad1c.  call temp:= `T`(v8, v7, v2) @signature `Lqc/s;.T:(Lqc/c;J)J` @kind interface;
  #L42ad22.  v2:= temp @kind wide;
  #L42ad24.  v4:= -1L;
  #L42ad28.  v6:= lcmp(v2, v4);
  #L42ad2c.  if v6 == 0 then goto L42ad34;
  #L42ad30.  v0:= v0 + v2 @kind long;
  #L42ad32.  goto L42ad18;
  #L42ad34.  return v0 @kind wide;
  #L42ad36.  v8:= new `java.lang.IllegalArgumentException`;
  #L42ad3a.  v0:= "source == null" @kind object;
  #L42ad3e.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ad44.  throw v8;
}
procedure `qc.c` `p0`(`qc.c` v4 @kind this, `int` v5 ) @signature `Lqc/c;.p0:(I)Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42afb4.  v0:= 1I;
  #L42afb6.  call temp:= `k0`(v4, v0) @signature `Lqc/c;.k0:(I)Lqc/o;` @kind virtual;
  #L42afbc.  v0:= temp @kind object;
  #L42afbe.  v1:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42afc2.  v2:= v0.`qc.o.c` @type ^`int`;
  #L42afc6.  v3:= v2 + 1;
  #L42afca.  v0.`qc.o.c` @type ^`int` := v3;
  #L42afce.  v5:= (`byte`) v5 @kind i2b;
  #L42afd0.  v1[v2]:= v5 @kind byte;
  #L42afd4.  v0:= v4.`qc.c.p` @type ^`long` @kind wide;
  #L42afd8.  v2:= 1L;
  #L42afdc.  v0:= v0 + v2 @kind long;
  #L42afde.  v4.`qc.c.p` @type ^`long` := v0 @kind wide;
  #L42afe2.  return v4 @kind object;
}
procedure `void` `q`(`qc.c` v7 @kind this, `qc.c` v8 @kind object, `long` v9 ) @signature `Lqc/c;.q:(Lqc/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42bab8.  if v8 == 0 then goto L42bbd2;
  #L42babc.  if v8 == v7 then goto L42bbc2;
  #L42bac0.  v0:= v8.`qc.c.p` @type ^`long` @kind wide;
  #L42bac4.  v2:= 0L;
  #L42bac8.  v4:= v9 @kind wide;
  #L42baca.  call `b`(v0, v2, v4) @signature `Lqc/u;.b:(JJJ)V` @kind static;
  #L42bad0.  v0:= 0L;
  #L42bad4.  v2:= lcmp(v9, v0);
  #L42bad8.  if v2 <= 0 then goto L42bbc0;
  #L42badc.  v0:= v8.`qc.c.o` @type ^`qc.o` @kind object;
  #L42bae0.  v1:= v0.`qc.o.c` @type ^`int`;
  #L42bae4.  v2:= v0.`qc.o.b` @type ^`int`;
  #L42bae8.  v1:= v1 - v2 @kind int;
  #L42baea.  v1:= (`long`) v1 @kind i2l;
  #L42baec.  v3:= lcmp(v9, v1);
  #L42baf0.  if v3 >= 0 then goto L42bb64;
  #L42baf4.  v1:= v7.`qc.c.o` @type ^`qc.o` @kind object;
  #L42baf8.  if v1 == 0 then goto L42bb02;
  #L42bafc.  v1:= v1.`qc.o.g` @type ^`qc.o` @kind object;
  #L42bb00.  goto L42bb04;
  #L42bb02.  v1:= 0I;
  #L42bb04.  if v1 == 0 then goto L42bb56;
  #L42bb08.  v2:= v1.`qc.o.e` @type ^`boolean` @kind boolean;
  #L42bb0c.  if v2 == 0 then goto L42bb56;
  #L42bb10.  v2:= v1.`qc.o.c` @type ^`int`;
  #L42bb14.  v2:= (`long`) v2 @kind i2l;
  #L42bb16.  v2:= v2 + v9 @kind long;
  #L42bb18.  v4:= v1.`qc.o.d` @type ^`boolean` @kind boolean;
  #L42bb1c.  if v4 == 0 then goto L42bb24;
  #L42bb20.  v4:= 0I;
  #L42bb22.  goto L42bb28;
  #L42bb24.  v4:= v1.`qc.o.b` @type ^`int`;
  #L42bb28.  v4:= (`long`) v4 @kind i2l;
  #L42bb2a.  v2:= v2 - v4 @kind long;
  #L42bb2c.  v4:= 8192L;
  #L42bb30.  v6:= lcmp(v2, v4);
  #L42bb34.  if v6 > 0 then goto L42bb56;
  #L42bb38.  v2:= (`int`) v9 @kind l2i;
  #L42bb3a.  call `f`(v0, v1, v2) @signature `Lqc/o;.f:(Lqc/o;I)V` @kind virtual;
  #L42bb40.  v0:= v8.`qc.c.p` @type ^`long` @kind wide;
  #L42bb44.  v0:= v0 - v9 @kind long;
  #L42bb46.  v8.`qc.c.p` @type ^`long` := v0 @kind wide;
  #L42bb4a.  v0:= v7.`qc.c.p` @type ^`long` @kind wide;
  #L42bb4e.  v0:= v0 + v9 @kind long;
  #L42bb50.  v7.`qc.c.p` @type ^`long` := v0 @kind wide;
  #L42bb54.  return @kind void;
  #L42bb56.  v1:= (`int`) v9 @kind l2i;
  #L42bb58.  call temp:= `e`(v0, v1) @signature `Lqc/o;.e:(I)Lqc/o;` @kind virtual;
  #L42bb5e.  v0:= temp @kind object;
  #L42bb60.  v8.`qc.c.o` @type ^`qc.o` := v0 @kind object;
  #L42bb64.  v0:= v8.`qc.c.o` @type ^`qc.o` @kind object;
  #L42bb68.  v1:= v0.`qc.o.c` @type ^`int`;
  #L42bb6c.  v2:= v0.`qc.o.b` @type ^`int`;
  #L42bb70.  v1:= v1 - v2 @kind int;
  #L42bb72.  v1:= (`long`) v1 @kind i2l;
  #L42bb74.  call temp:= `b`(v0) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42bb7a.  v3:= temp @kind object;
  #L42bb7c.  v8.`qc.c.o` @type ^`qc.o` := v3 @kind object;
  #L42bb80.  v3:= v7.`qc.c.o` @type ^`qc.o` @kind object;
  #L42bb84.  if v3 != 0 then goto L42bb96;
  #L42bb88.  v7.`qc.c.o` @type ^`qc.o` := v0 @kind object;
  #L42bb8c.  v0.`qc.o.g` @type ^`qc.o` := v0 @kind object;
  #L42bb90.  v0.`qc.o.f` @type ^`qc.o` := v0 @kind object;
  #L42bb94.  goto L42bba8;
  #L42bb96.  v3:= v3.`qc.o.g` @type ^`qc.o` @kind object;
  #L42bb9a.  call temp:= `c`(v3, v0) @signature `Lqc/o;.c:(Lqc/o;)Lqc/o;` @kind virtual;
  #L42bba0.  v0:= temp @kind object;
  #L42bba2.  call `a`(v0) @signature `Lqc/o;.a:()V` @kind virtual;
  #L42bba8.  v3:= v8.`qc.c.p` @type ^`long` @kind wide;
  #L42bbac.  v3:= v3 - v1 @kind long;
  #L42bbae.  v8.`qc.c.p` @type ^`long` := v3 @kind wide;
  #L42bbb2.  v3:= v7.`qc.c.p` @type ^`long` @kind wide;
  #L42bbb6.  v3:= v3 + v1 @kind long;
  #L42bbb8.  v7.`qc.c.p` @type ^`long` := v3 @kind wide;
  #L42bbbc.  v9:= v9 - v1 @kind long;
  #L42bbbe.  goto L42bad0;
  #L42bbc0.  return @kind void;
  #L42bbc2.  v8:= new `java.lang.IllegalArgumentException`;
  #L42bbc6.  v9:= "source == this" @kind object;
  #L42bbca.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42bbd0.  throw v8;
  #L42bbd2.  v8:= new `java.lang.IllegalArgumentException`;
  #L42bbd6.  v9:= "source == null" @kind object;
  #L42bbda.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42bbe0.  throw v8;
}
procedure `qc.c` `q0`(`qc.c` v9 @kind this, `long` v10 ) @signature `Lqc/c;.q0:(J)Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L42aff4.  v0:= 0L;
  #L42aff8.  v2:= lcmp(v10, v0);
  #L42affc.  if v2 != 0 then goto L42b00e;
  #L42b000.  v10:= 48I;
  #L42b004.  call temp:= `p0`(v9, v10) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b00a.  v10:= temp @kind object;
  #L42b00c.  return v10 @kind object;
  #L42b00e.  call temp:= `highestOneBit`(v10) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L42b014.  v0:= temp @kind wide;
  #L42b016.  call temp:= `numberOfTrailingZeros`(v0) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L42b01c.  v0:= temp;
  #L42b01e.  v1:= 4I;
  #L42b020.  v0:= v0 / v1 @kind int;
  #L42b022.  v0:= v0 + 1;
  #L42b026.  call temp:= `k0`(v9, v0) @signature `Lqc/c;.k0:(I)Lqc/o;` @kind virtual;
  #L42b02c.  v2:= temp @kind object;
  #L42b02e.  v3:= v2.`qc.o.a` @type ^`byte`[] @kind object;
  #L42b032.  v4:= v2.`qc.o.c` @type ^`int`;
  #L42b036.  v5:= v4 + v0 @kind int;
  #L42b03a.  v5:= v5 + -1;
  #L42b03e.  if v5 < v4 then goto L42b05e;
  #L42b042.  v6:= `@@qc.c.q` @type ^`byte`[] @kind object;
  #L42b046.  v7:= 15L;
  #L42b04a.  v7:= v7 ^& v10 @kind long;
  #L42b04c.  v8:= (`int`) v7 @kind l2i;
  #L42b04e.  v6:= v6[v8] @kind byte;
  #L42b052.  v3[v5]:= v6 @kind byte;
  #L42b056.  v10:= v10 ^>> v1 @kind long;
  #L42b058.  v5:= v5 + -1;
  #L42b05c.  goto L42b03e;
  #L42b05e.  v10:= v2.`qc.o.c` @type ^`int`;
  #L42b062.  v10:= v10 + v0 @kind int;
  #L42b064.  v2.`qc.o.c` @type ^`int` := v10;
  #L42b068.  v10:= v9.`qc.c.p` @type ^`long` @kind wide;
  #L42b06c.  v0:= (`long`) v0 @kind i2l;
  #L42b06e.  v10:= v10 + v0 @kind long;
  #L42b070.  v9.`qc.c.p` @type ^`long` := v10 @kind wide;
  #L42b074.  return v9 @kind object;
}
procedure `qc.d` `r`(`qc.c` v0 @kind this, `int` v1 ) @signature `Lqc/c;.r:(I)Lqc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42b690.  call temp:= `s0`(v0, v1) @signature `Lqc/c;.s0:(I)Lqc/c;` @kind virtual;
  #L42b696.  v1:= temp @kind object;
  #L42b698.  return v1 @kind object;
}
procedure `qc.c` `r0`(`qc.c` v5 @kind this, `int` v6 ) @signature `Lqc/c;.r0:(I)Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b088.  v0:= 4I;
  #L42b08a.  call temp:= `k0`(v5, v0) @signature `Lqc/c;.k0:(I)Lqc/o;` @kind virtual;
  #L42b090.  v0:= temp @kind object;
  #L42b092.  v1:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42b096.  v2:= v0.`qc.o.c` @type ^`int`;
  #L42b09a.  v3:= v2 + 1;
  #L42b09e.  v4:= v6 ^>> 24;
  #L42b0a2.  v4:= v4 ^& 255;
  #L42b0a6.  v4:= (`byte`) v4 @kind i2b;
  #L42b0a8.  v1[v2]:= v4 @kind byte;
  #L42b0ac.  v2:= v3 + 1;
  #L42b0b0.  v4:= v6 ^>> 16;
  #L42b0b4.  v4:= v4 ^& 255;
  #L42b0b8.  v4:= (`byte`) v4 @kind i2b;
  #L42b0ba.  v1[v3]:= v4 @kind byte;
  #L42b0be.  v3:= v2 + 1;
  #L42b0c2.  v4:= v6 ^>> 8;
  #L42b0c6.  v4:= v4 ^& 255;
  #L42b0ca.  v4:= (`byte`) v4 @kind i2b;
  #L42b0cc.  v1[v2]:= v4 @kind byte;
  #L42b0d0.  v2:= v3 + 1;
  #L42b0d4.  v6:= v6 ^& 255;
  #L42b0d8.  v6:= (`byte`) v6 @kind i2b;
  #L42b0da.  v1[v3]:= v6 @kind byte;
  #L42b0de.  v0.`qc.o.c` @type ^`int` := v2;
  #L42b0e2.  v0:= v5.`qc.c.p` @type ^`long` @kind wide;
  #L42b0e6.  v2:= 4L;
  #L42b0ea.  v0:= v0 + v2 @kind long;
  #L42b0ec.  v5.`qc.c.p` @type ^`long` := v0 @kind wide;
  #L42b0f0.  return v5 @kind object;
}
procedure `int` `read`(`qc.c` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lqc/c;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42a364.  v0:= v6.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a368.  if v0 != 0 then goto L42a370;
  #L42a36c.  v7:= -1I;
  #L42a36e.  return v7;
  #L42a370.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L42a376.  v1:= temp;
  #L42a378.  v2:= v0.`qc.o.c` @type ^`int`;
  #L42a37c.  v3:= v0.`qc.o.b` @type ^`int`;
  #L42a380.  v2:= v2 - v3 @kind int;
  #L42a382.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L42a388.  v1:= temp;
  #L42a38a.  v2:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42a38e.  v3:= v0.`qc.o.b` @type ^`int`;
  #L42a392.  call temp:= `put`(v7, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L42a398.  v7:= v0.`qc.o.b` @type ^`int`;
  #L42a39c.  v7:= v7 + v1 @kind int;
  #L42a39e.  v0.`qc.o.b` @type ^`int` := v7;
  #L42a3a2.  v2:= v6.`qc.c.p` @type ^`long` @kind wide;
  #L42a3a6.  v4:= (`long`) v1 @kind i2l;
  #L42a3a8.  v2:= v2 - v4 @kind long;
  #L42a3aa.  v6.`qc.c.p` @type ^`long` := v2 @kind wide;
  #L42a3ae.  v2:= v0.`qc.o.c` @type ^`int`;
  #L42a3b2.  if v7 != v2 then goto L42a3c8;
  #L42a3b6.  call temp:= `b`(v0) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42a3bc.  v7:= temp @kind object;
  #L42a3be.  v6.`qc.c.o` @type ^`qc.o` := v7 @kind object;
  #L42a3c2.  call `a`(v0) @signature `Lqc/p;.a:(Lqc/o;)V` @kind static;
  #L42a3c8.  return v1;
}
procedure `byte` `readByte`(`qc.c` v9 @kind this) @signature `Lqc/c;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L42a184.  v0:= v9.`qc.c.p` @type ^`long` @kind wide;
  #L42a188.  v2:= 0L;
  #L42a18c.  v4:= lcmp(v0, v2);
  #L42a190.  if v4 == 0 then goto L42a1d4;
  #L42a194.  v2:= v9.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a198.  v3:= v2.`qc.o.b` @type ^`int`;
  #L42a19c.  v4:= v2.`qc.o.c` @type ^`int`;
  #L42a1a0.  v5:= v2.`qc.o.a` @type ^`byte`[] @kind object;
  #L42a1a4.  v6:= v3 + 1;
  #L42a1a8.  v3:= v5[v3] @kind byte;
  #L42a1ac.  v7:= 1L;
  #L42a1b0.  v0:= v0 - v7 @kind long;
  #L42a1b2.  v9.`qc.c.p` @type ^`long` := v0 @kind wide;
  #L42a1b6.  if v6 != v4 then goto L42a1ce;
  #L42a1ba.  call temp:= `b`(v2) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42a1c0.  v0:= temp @kind object;
  #L42a1c2.  v9.`qc.c.o` @type ^`qc.o` := v0 @kind object;
  #L42a1c6.  call `a`(v2) @signature `Lqc/p;.a:(Lqc/o;)V` @kind static;
  #L42a1cc.  goto L42a1d2;
  #L42a1ce.  v2.`qc.o.b` @type ^`int` := v6;
  #L42a1d2.  return v3;
  #L42a1d4.  v0:= new `java.lang.IllegalStateException`;
  #L42a1d8.  v1:= "size == 0" @kind object;
  #L42a1dc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a1e2.  throw v0;
}
procedure `void` `readFully`(`qc.c` v3 @kind this, `byte`[] v4 @kind object) @signature `Lqc/c;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42b9d0.  v0:= 0I;
  #L42b9d2.  v1:= length @variable v4;
  #L42b9d4.  if v0 >= v1 then goto L42b9fa;
  #L42b9d8.  v1:= length @variable v4;
  #L42b9da.  v1:= v1 - v0 @kind int;
  #L42b9dc.  call temp:= `a0`(v3, v4, v0, v1) @signature `Lqc/c;.a0:([BII)I` @kind virtual;
  #L42b9e2.  v1:= temp;
  #L42b9e4.  v2:= -1I;
  #L42b9e6.  if v1 == v2 then goto L42b9ee;
  #L42b9ea.  v0:= v0 + v1 @kind int;
  #L42b9ec.  goto L42b9d2;
  #L42b9ee.  v4:= new `java.io.EOFException`;
  #L42b9f2.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L42b9f8.  throw v4;
  #L42b9fa.  return @kind void;
}
procedure `int` `readInt`(`qc.c` v10 @kind this) @signature `Lqc/c;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L42a3dc.  v0:= v10.`qc.c.p` @type ^`long` @kind wide;
  #L42a3e0.  v2:= 4L;
  #L42a3e4.  v4:= lcmp(v0, v2);
  #L42a3e8.  if v4 < 0 then goto L42a4b0;
  #L42a3ec.  v4:= v10.`qc.c.o` @type ^`qc.o` @kind object;
  #L42a3f0.  v5:= v4.`qc.o.b` @type ^`int`;
  #L42a3f4.  v6:= v4.`qc.o.c` @type ^`int`;
  #L42a3f8.  v7:= v6 - v5 @kind int;
  #L42a3fc.  v8:= 4I;
  #L42a3fe.  if v7 >= v8 then goto L42a446;
  #L42a402.  call temp:= `readByte`(v10) @signature `Lqc/c;.readByte:()B` @kind virtual;
  #L42a408.  v0:= temp;
  #L42a40a.  v0:= v0 ^& 255;
  #L42a40e.  v0:= v0 ^< 24;
  #L42a412.  call temp:= `readByte`(v10) @signature `Lqc/c;.readByte:()B` @kind virtual;
  #L42a418.  v1:= temp;
  #L42a41a.  v1:= v1 ^& 255;
  #L42a41e.  v1:= v1 ^< 16;
  #L42a422.  v0:= v0 ^| v1 @kind int;
  #L42a424.  call temp:= `readByte`(v10) @signature `Lqc/c;.readByte:()B` @kind virtual;
  #L42a42a.  v1:= temp;
  #L42a42c.  v1:= v1 ^& 255;
  #L42a430.  v1:= v1 ^< 8;
  #L42a434.  v0:= v0 ^| v1 @kind int;
  #L42a436.  call temp:= `readByte`(v10) @signature `Lqc/c;.readByte:()B` @kind virtual;
  #L42a43c.  v1:= temp;
  #L42a43e.  v1:= v1 ^& 255;
  #L42a442.  v0:= v0 ^| v1 @kind int;
  #L42a444.  return v0;
  #L42a446.  v7:= v4.`qc.o.a` @type ^`byte`[] @kind object;
  #L42a44a.  v8:= v5 + 1;
  #L42a44e.  v5:= v7[v5] @kind byte;
  #L42a452.  v5:= v5 ^& 255;
  #L42a456.  v5:= v5 ^< 24;
  #L42a45a.  v9:= v8 + 1;
  #L42a45e.  v8:= v7[v8] @kind byte;
  #L42a462.  v8:= v8 ^& 255;
  #L42a466.  v8:= v8 ^< 16;
  #L42a46a.  v5:= v5 ^| v8 @kind int;
  #L42a46c.  v8:= v9 + 1;
  #L42a470.  v9:= v7[v9] @kind byte;
  #L42a474.  v9:= v9 ^& 255;
  #L42a478.  v9:= v9 ^< 8;
  #L42a47c.  v5:= v5 ^| v9 @kind int;
  #L42a47e.  v9:= v8 + 1;
  #L42a482.  v7:= v7[v8] @kind byte;
  #L42a486.  v7:= v7 ^& 255;
  #L42a48a.  v5:= v5 ^| v7 @kind int;
  #L42a48c.  v0:= v0 - v2 @kind long;
  #L42a48e.  v10.`qc.c.p` @type ^`long` := v0 @kind wide;
  #L42a492.  if v9 != v6 then goto L42a4aa;
  #L42a496.  call temp:= `b`(v4) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42a49c.  v0:= temp @kind object;
  #L42a49e.  v10.`qc.c.o` @type ^`qc.o` := v0 @kind object;
  #L42a4a2.  call `a`(v4) @signature `Lqc/p;.a:(Lqc/o;)V` @kind static;
  #L42a4a8.  goto L42a4ae;
  #L42a4aa.  v4.`qc.o.b` @type ^`int` := v9;
  #L42a4ae.  return v5;
  #L42a4b0.  v0:= new `java.lang.IllegalStateException`;
  #L42a4b4.  v1:= new `java.lang.StringBuilder`;
  #L42a4b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42a4be.  v2:= "size < 4: " @kind object;
  #L42a4c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a4c8.  v2:= v10.`qc.c.p` @type ^`long` @kind wide;
  #L42a4cc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a4d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42a4d8.  v1:= temp @kind object;
  #L42a4da.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a4e0.  throw v0;
}
procedure `short` `readShort`(`qc.c` v10 @kind this) @signature `Lqc/c;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L42b820.  v0:= v10.`qc.c.p` @type ^`long` @kind wide;
  #L42b824.  v2:= 2L;
  #L42b828.  v4:= lcmp(v0, v2);
  #L42b82c.  if v4 < 0 then goto L42b8b0;
  #L42b830.  v4:= v10.`qc.c.o` @type ^`qc.o` @kind object;
  #L42b834.  v5:= v4.`qc.o.b` @type ^`int`;
  #L42b838.  v6:= v4.`qc.o.c` @type ^`int`;
  #L42b83c.  v7:= v6 - v5 @kind int;
  #L42b840.  v8:= 2I;
  #L42b842.  if v7 >= v8 then goto L42b868;
  #L42b846.  call temp:= `readByte`(v10) @signature `Lqc/c;.readByte:()B` @kind virtual;
  #L42b84c.  v0:= temp;
  #L42b84e.  v0:= v0 ^& 255;
  #L42b852.  v0:= v0 ^< 8;
  #L42b856.  call temp:= `readByte`(v10) @signature `Lqc/c;.readByte:()B` @kind virtual;
  #L42b85c.  v1:= temp;
  #L42b85e.  v1:= v1 ^& 255;
  #L42b862.  v0:= v0 ^| v1 @kind int;
  #L42b864.  v0:= (`short`) v0 @kind i2s;
  #L42b866.  return v0;
  #L42b868.  v7:= v4.`qc.o.a` @type ^`byte`[] @kind object;
  #L42b86c.  v8:= v5 + 1;
  #L42b870.  v5:= v7[v5] @kind byte;
  #L42b874.  v5:= v5 ^& 255;
  #L42b878.  v5:= v5 ^< 8;
  #L42b87c.  v9:= v8 + 1;
  #L42b880.  v7:= v7[v8] @kind byte;
  #L42b884.  v7:= v7 ^& 255;
  #L42b888.  v5:= v5 ^| v7 @kind int;
  #L42b88a.  v0:= v0 - v2 @kind long;
  #L42b88c.  v10.`qc.c.p` @type ^`long` := v0 @kind wide;
  #L42b890.  if v9 != v6 then goto L42b8a8;
  #L42b894.  call temp:= `b`(v4) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42b89a.  v0:= temp @kind object;
  #L42b89c.  v10.`qc.c.o` @type ^`qc.o` := v0 @kind object;
  #L42b8a0.  call `a`(v4) @signature `Lqc/p;.a:(Lqc/o;)V` @kind static;
  #L42b8a6.  goto L42b8ac;
  #L42b8a8.  v4.`qc.o.b` @type ^`int` := v9;
  #L42b8ac.  v0:= (`short`) v5 @kind i2s;
  #L42b8ae.  return v0;
  #L42b8b0.  v0:= new `java.lang.IllegalStateException`;
  #L42b8b4.  v1:= new `java.lang.StringBuilder`;
  #L42b8b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42b8be.  v2:= "size < 2: " @kind object;
  #L42b8c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b8c8.  v2:= v10.`qc.c.p` @type ^`long` @kind wide;
  #L42b8cc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b8d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42b8d8.  v1:= temp @kind object;
  #L42b8da.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b8e0.  throw v0;
}
procedure `qc.c` `s0`(`qc.c` v5 @kind this, `int` v6 ) @signature `Lqc/c;.s0:(I)Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b104.  v0:= 2I;
  #L42b106.  call temp:= `k0`(v5, v0) @signature `Lqc/c;.k0:(I)Lqc/o;` @kind virtual;
  #L42b10c.  v0:= temp @kind object;
  #L42b10e.  v1:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42b112.  v2:= v0.`qc.o.c` @type ^`int`;
  #L42b116.  v3:= v2 + 1;
  #L42b11a.  v4:= v6 ^>> 8;
  #L42b11e.  v4:= v4 ^& 255;
  #L42b122.  v4:= (`byte`) v4 @kind i2b;
  #L42b124.  v1[v2]:= v4 @kind byte;
  #L42b128.  v2:= v3 + 1;
  #L42b12c.  v6:= v6 ^& 255;
  #L42b130.  v6:= (`byte`) v6 @kind i2b;
  #L42b132.  v1[v3]:= v6 @kind byte;
  #L42b136.  v0.`qc.o.c` @type ^`int` := v2;
  #L42b13a.  v0:= v5.`qc.c.p` @type ^`long` @kind wide;
  #L42b13e.  v2:= 2L;
  #L42b142.  v0:= v0 + v2 @kind long;
  #L42b144.  v5.`qc.c.p` @type ^`long` := v0 @kind wide;
  #L42b148.  return v5 @kind object;
}
procedure `qc.d` `t`(`qc.c` v0 @kind this, `int` v1 ) @signature `Lqc/c;.t:(I)Lqc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42b674.  call temp:= `r0`(v0, v1) @signature `Lqc/c;.r0:(I)Lqc/c;` @kind virtual;
  #L42b67a.  v1:= temp @kind object;
  #L42b67c.  return v1 @kind object;
}
procedure `qc.c` `t0`(`qc.c` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lqc/c;.t0:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b15c.  if v2 == 0 then goto L42b272;
  #L42b160.  if v3 < 0 then goto L42b244;
  #L42b164.  if v4 < v3 then goto L42b206;
  #L42b168.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L42b16e.  v0:= temp;
  #L42b170.  if v4 > v0 then goto L42b1c0;
  #L42b174.  if v5 == 0 then goto L42b1b0;
  #L42b178.  v0:= `@@qc.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L42b17c.  call temp:= `equals`(v5, v0) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42b182.  v0:= temp;
  #L42b184.  if v0 == 0 then goto L42b192;
  #L42b188.  call temp:= `v0`(v1, v2, v3, v4) @signature `Lqc/c;.v0:(Ljava/lang/String;II)Lqc/c;` @kind virtual;
  #L42b18e.  v2:= temp @kind object;
  #L42b190.  return v2 @kind object;
  #L42b192.  call temp:= `substring`(v2, v3, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L42b198.  v2:= temp @kind object;
  #L42b19a.  call temp:= `getBytes`(v2, v5) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L42b1a0.  v2:= temp @kind object;
  #L42b1a2.  v3:= 0I;
  #L42b1a4.  v4:= length @variable v2;
  #L42b1a6.  call temp:= `n0`(v1, v2, v3, v4) @signature `Lqc/c;.n0:([BII)Lqc/c;` @kind virtual;
  #L42b1ac.  v2:= temp @kind object;
  #L42b1ae.  return v2 @kind object;
  #L42b1b0.  v2:= new `java.lang.IllegalArgumentException`;
  #L42b1b4.  v3:= "charset == null" @kind object;
  #L42b1b8.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b1be.  throw v2;
  #L42b1c0.  v3:= new `java.lang.IllegalArgumentException`;
  #L42b1c4.  v5:= new `java.lang.StringBuilder`;
  #L42b1c8.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42b1ce.  v0:= "endIndex > string.length: " @kind object;
  #L42b1d2.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b1d8.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b1de.  v4:= " > " @kind object;
  #L42b1e2.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b1e8.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L42b1ee.  v2:= temp;
  #L42b1f0.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b1f6.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42b1fc.  v2:= temp @kind object;
  #L42b1fe.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b204.  throw v3;
  #L42b206.  v2:= new `java.lang.IllegalArgumentException`;
  #L42b20a.  v5:= new `java.lang.StringBuilder`;
  #L42b20e.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42b214.  v0:= "endIndex < beginIndex: " @kind object;
  #L42b218.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b21e.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b224.  v4:= " < " @kind object;
  #L42b228.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b22e.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b234.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42b23a.  v3:= temp @kind object;
  #L42b23c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b242.  throw v2;
  #L42b244.  v2:= new `java.lang.IllegalAccessError`;
  #L42b248.  v4:= new `java.lang.StringBuilder`;
  #L42b24c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42b252.  v5:= "beginIndex < 0: " @kind object;
  #L42b256.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b25c.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b262.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42b268.  v3:= temp @kind object;
  #L42b26a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b270.  throw v2;
  #L42b272.  v2:= new `java.lang.IllegalArgumentException`;
  #L42b276.  v3:= "string == null" @kind object;
  #L42b27a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b280.  throw v2;
}
procedure `java.lang.String` `toString`(`qc.c` v1 @kind this) @signature `Lqc/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a8dc.  call temp:= `i0`(v1) @signature `Lqc/c;.i0:()Lqc/f;` @kind virtual;
  #L42a8e2.  v0:= temp @kind object;
  #L42a8e4.  call temp:= `toString`(v0) @signature `Lqc/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L42a8ea.  v0:= temp @kind object;
  #L42a8ec.  return v0 @kind object;
}
procedure `java.lang.String` `u`(`qc.c` v2 @kind this) @signature `Lqc/c;.u:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a754.  v0:= 9223372036854775807L;
  #L42a75e.  call temp:= `L`(v2, v0) @signature `Lqc/c;.L:(J)Ljava/lang/String;` @kind virtual;
  #L42a764.  v0:= temp @kind object;
  #L42a766.  return v0 @kind object;
}
procedure `qc.c` `u0`(`qc.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lqc/c;.u0:(Ljava/lang/String;)Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b294.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L42b29a.  v0:= temp;
  #L42b29c.  v1:= 0I;
  #L42b29e.  call temp:= `v0`(v2, v3, v1, v0) @signature `Lqc/c;.v0:(Ljava/lang/String;II)Lqc/c;` @kind virtual;
  #L42b2a4.  v3:= temp @kind object;
  #L42b2a6.  return v3 @kind object;
}
procedure `qc.c` `v0`(`qc.c` v7 @kind this, `java.lang.String` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lqc/c;.v0:(Ljava/lang/String;II)Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42b2b8.  if v8 == 0 then goto L42b4f0;
  #L42b2bc.  if v9 < 0 then goto L42b4c2;
  #L42b2c0.  if v10 < v9 then goto L42b484;
  #L42b2c4.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L42b2ca.  v0:= temp;
  #L42b2cc.  if v10 > v0 then goto L42b43e;
  #L42b2d0.  if v9 >= v10 then goto L42b43c;
  #L42b2d4.  call temp:= `charAt`(v8, v9) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L42b2da.  v0:= temp;
  #L42b2dc.  v1:= 128I;
  #L42b2e0.  if v0 >= v1 then goto L42b350;
  #L42b2e4.  v2:= 1I;
  #L42b2e6.  call temp:= `k0`(v7, v2) @signature `Lqc/c;.k0:(I)Lqc/o;` @kind virtual;
  #L42b2ec.  v2:= temp @kind object;
  #L42b2ee.  v3:= v2.`qc.o.a` @type ^`byte`[] @kind object;
  #L42b2f2.  v4:= v2.`qc.o.c` @type ^`int`;
  #L42b2f6.  v4:= v4 - v9 @kind int;
  #L42b2f8.  v5:= v4 - 8192;
  #L42b2fc.  call temp:= `min`(v10, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L42b302.  v5:= temp;
  #L42b304.  v6:= v9 + 1;
  #L42b308.  v9:= v9 + v4 @kind int;
  #L42b30a.  v0:= (`byte`) v0 @kind i2b;
  #L42b30c.  v3[v9]:= v0 @kind byte;
  #L42b310.  if v6 >= v5 then goto L42b332;
  #L42b314.  call temp:= `charAt`(v8, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L42b31a.  v9:= temp;
  #L42b31c.  if v9 < v1 then goto L42b322;
  #L42b320.  goto L42b332;
  #L42b322.  v0:= v6 + 1;
  #L42b326.  v6:= v6 + v4 @kind int;
  #L42b328.  v9:= (`byte`) v9 @kind i2b;
  #L42b32a.  v3[v6]:= v9 @kind byte;
  #L42b32e.  v6:= v0;
  #L42b330.  goto L42b310;
  #L42b332.  v4:= v4 + v6 @kind int;
  #L42b334.  v9:= v2.`qc.o.c` @type ^`int`;
  #L42b338.  v4:= v4 - v9 @kind int;
  #L42b33a.  v9:= v9 + v4 @kind int;
  #L42b33c.  v2.`qc.o.c` @type ^`int` := v9;
  #L42b340.  v0:= v7.`qc.c.p` @type ^`long` @kind wide;
  #L42b344.  v2:= (`long`) v4 @kind i2l;
  #L42b346.  v0:= v0 + v2 @kind long;
  #L42b348.  v7.`qc.c.p` @type ^`long` := v0 @kind wide;
  #L42b34c.  v9:= v6;
  #L42b34e.  goto L42b2d0;
  #L42b350.  v2:= 2048I;
  #L42b354.  if v0 >= v2 then goto L42b378;
  #L42b358.  v2:= v0 ^> 6;
  #L42b35c.  v2:= v2 ^| 192;
  #L42b360.  call temp:= `p0`(v7, v2) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b366.  v0:= v0 ^& 63;
  #L42b36a.  v0:= v0 ^| v1 @kind int;
  #L42b36c.  call temp:= `p0`(v7, v0) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b372.  v9:= v9 + 1;
  #L42b376.  goto L42b2d0;
  #L42b378.  v2:= 55296I;
  #L42b37e.  v3:= 63I;
  #L42b382.  if v0 < v2 then goto L42b424;
  #L42b386.  v2:= 57343I;
  #L42b38c.  if v0 <= v2 then goto L42b392;
  #L42b390.  goto L42b424;
  #L42b392.  v4:= v9 + 1;
  #L42b396.  if v4 >= v10 then goto L42b3a4;
  #L42b39a.  call temp:= `charAt`(v8, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L42b3a0.  v5:= temp;
  #L42b3a2.  goto L42b3a6;
  #L42b3a4.  v5:= 0I;
  #L42b3a6.  v6:= 56319I;
  #L42b3ac.  if v0 > v6 then goto L42b418;
  #L42b3b0.  v6:= 56320I;
  #L42b3b6.  if v5 < v6 then goto L42b418;
  #L42b3ba.  if v5 <= v2 then goto L42b3c0;
  #L42b3be.  goto L42b418;
  #L42b3c0.  v2:= 65536I;
  #L42b3c4.  v4:= -55297I;
  #L42b3ca.  v0:= v0 ^& v4 @kind int;
  #L42b3cc.  v0:= v0 ^< 10;
  #L42b3d0.  v4:= -56321I;
  #L42b3d6.  v4:= v4 ^& v5 @kind int;
  #L42b3d8.  v0:= v0 ^| v4 @kind int;
  #L42b3da.  v0:= v0 + v2 @kind int;
  #L42b3dc.  v2:= v0 ^> 18;
  #L42b3e0.  v2:= v2 ^| 240;
  #L42b3e4.  call temp:= `p0`(v7, v2) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b3ea.  v2:= v0 ^> 12;
  #L42b3ee.  v2:= v2 ^& v3 @kind int;
  #L42b3f0.  v2:= v2 ^| v1 @kind int;
  #L42b3f2.  call temp:= `p0`(v7, v2) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b3f8.  v2:= v0 ^> 6;
  #L42b3fc.  v2:= v2 ^& v3 @kind int;
  #L42b3fe.  v2:= v2 ^| v1 @kind int;
  #L42b400.  call temp:= `p0`(v7, v2) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b406.  v0:= v0 ^& v3 @kind int;
  #L42b408.  v0:= v0 ^| v1 @kind int;
  #L42b40a.  call temp:= `p0`(v7, v0) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b410.  v9:= v9 + 2;
  #L42b414.  goto L42b2d0;
  #L42b418.  call temp:= `p0`(v7, v3) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b41e.  v9:= v4;
  #L42b420.  goto L42b2d0;
  #L42b424.  v2:= v0 ^> 12;
  #L42b428.  v2:= v2 ^| 224;
  #L42b42c.  call temp:= `p0`(v7, v2) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b432.  v2:= v0 ^> 6;
  #L42b436.  v2:= v2 ^& v3 @kind int;
  #L42b438.  v2:= v2 ^| v1 @kind int;
  #L42b43a.  goto L42b360;
  #L42b43c.  return v7 @kind object;
  #L42b43e.  v9:= new `java.lang.IllegalArgumentException`;
  #L42b442.  v0:= new `java.lang.StringBuilder`;
  #L42b446.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42b44c.  v1:= "endIndex > string.length: " @kind object;
  #L42b450.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b456.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b45c.  v10:= " > " @kind object;
  #L42b460.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b466.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L42b46c.  v8:= temp;
  #L42b46e.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b474.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42b47a.  v8:= temp @kind object;
  #L42b47c.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b482.  throw v9;
  #L42b484.  v8:= new `java.lang.IllegalArgumentException`;
  #L42b488.  v0:= new `java.lang.StringBuilder`;
  #L42b48c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42b492.  v1:= "endIndex < beginIndex: " @kind object;
  #L42b496.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b49c.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b4a2.  v10:= " < " @kind object;
  #L42b4a6.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b4ac.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b4b2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42b4b8.  v9:= temp @kind object;
  #L42b4ba.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b4c0.  throw v8;
  #L42b4c2.  v8:= new `java.lang.IllegalArgumentException`;
  #L42b4c6.  v10:= new `java.lang.StringBuilder`;
  #L42b4ca.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42b4d0.  v0:= "beginIndex < 0: " @kind object;
  #L42b4d4.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b4da.  call temp:= `append`(v10, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b4e0.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42b4e6.  v9:= temp @kind object;
  #L42b4e8.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b4ee.  throw v8;
  #L42b4f0.  v8:= new `java.lang.IllegalArgumentException`;
  #L42b4f4.  v9:= "string == null" @kind object;
  #L42b4f8.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b4fe.  throw v8;
}
procedure `qc.c` `w0`(`qc.c` v3 @kind this, `int` v4 ) @signature `Lqc/c;.w0:(I)Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42b510.  v0:= 128I;
  #L42b514.  if v4 >= v0 then goto L42b520;
  #L42b518.  call temp:= `p0`(v3, v4) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b51e.  goto L42b59e;
  #L42b520.  v1:= 2048I;
  #L42b524.  v2:= 63I;
  #L42b528.  if v4 >= v1 then goto L42b540;
  #L42b52c.  v1:= v4 ^> 6;
  #L42b530.  v1:= v1 ^| 192;
  #L42b534.  call temp:= `p0`(v3, v1) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b53a.  v4:= v4 ^& v2 @kind int;
  #L42b53c.  v4:= v4 ^| v0 @kind int;
  #L42b53e.  goto L42b518;
  #L42b540.  v1:= 65536I;
  #L42b544.  if v4 >= v1 then goto L42b56e;
  #L42b548.  v1:= 55296I;
  #L42b54e.  if v4 < v1 then goto L42b564;
  #L42b552.  v1:= 57343I;
  #L42b558.  if v4 > v1 then goto L42b564;
  #L42b55c.  call temp:= `p0`(v3, v2) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b562.  goto L42b59e;
  #L42b564.  v1:= v4 ^> 12;
  #L42b568.  v1:= v1 ^| 224;
  #L42b56c.  goto L42b58e;
  #L42b56e.  v1:= 1114111I;
  #L42b574.  if v4 > v1 then goto L42b5a0;
  #L42b578.  v1:= v4 ^> 18;
  #L42b57c.  v1:= v1 ^| 240;
  #L42b580.  call temp:= `p0`(v3, v1) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b586.  v1:= v4 ^> 12;
  #L42b58a.  v1:= v1 ^& v2 @kind int;
  #L42b58c.  v1:= v1 ^| v0 @kind int;
  #L42b58e.  call temp:= `p0`(v3, v1) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42b594.  v1:= v4 ^> 6;
  #L42b598.  v1:= v1 ^& v2 @kind int;
  #L42b59a.  v1:= v1 ^| v0 @kind int;
  #L42b59c.  goto L42b534;
  #L42b59e.  return v3 @kind object;
  #L42b5a0.  v0:= new `java.lang.IllegalArgumentException`;
  #L42b5a4.  v1:= new `java.lang.StringBuilder`;
  #L42b5a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42b5ae.  v2:= "Unexpected code point: " @kind object;
  #L42b5b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b5b8.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L42b5be.  v4:= temp @kind object;
  #L42b5c0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b5c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42b5cc.  v4:= temp @kind object;
  #L42b5ce.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42b5d4.  throw v0;
}
procedure `int` `write`(`qc.c` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lqc/c;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42a518.  if v7 == 0 then goto L42a56e;
  #L42a51c.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L42a522.  v0:= temp;
  #L42a524.  v1:= v0;
  #L42a526.  if v1 <= 0 then goto L42a560;
  #L42a52a.  v2:= 1I;
  #L42a52c.  call temp:= `k0`(v6, v2) @signature `Lqc/c;.k0:(I)Lqc/o;` @kind virtual;
  #L42a532.  v2:= temp @kind object;
  #L42a534.  v3:= v2.`qc.o.c` @type ^`int`;
  #L42a538.  v3:= v3 - 8192;
  #L42a53c.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L42a542.  v3:= temp;
  #L42a544.  v4:= v2.`qc.o.a` @type ^`byte`[] @kind object;
  #L42a548.  v5:= v2.`qc.o.c` @type ^`int`;
  #L42a54c.  call temp:= `get`(v7, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L42a552.  v1:= v1 - v3 @kind int;
  #L42a554.  v4:= v2.`qc.o.c` @type ^`int`;
  #L42a558.  v4:= v4 + v3 @kind int;
  #L42a55a.  v2.`qc.o.c` @type ^`int` := v4;
  #L42a55e.  goto L42a526;
  #L42a560.  v1:= v6.`qc.c.p` @type ^`long` @kind wide;
  #L42a564.  v3:= (`long`) v0 @kind i2l;
  #L42a566.  v1:= v1 + v3 @kind long;
  #L42a568.  v6.`qc.c.p` @type ^`long` := v1 @kind wide;
  #L42a56c.  return v0;
  #L42a56e.  v7:= new `java.lang.IllegalArgumentException`;
  #L42a572.  v0:= "source == null" @kind object;
  #L42a576.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a57c.  throw v7;
}
procedure `int` `y`(`qc.c` v1 @kind this) @signature `Lqc/c;.y:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a4f4.  call temp:= `readInt`(v1) @signature `Lqc/c;.readInt:()I` @kind virtual;
  #L42a4fa.  v0:= temp;
  #L42a4fc.  call temp:= `c`(v0) @signature `Lqc/u;.c:(I)I` @kind static;
  #L42a502.  v0:= temp;
  #L42a504.  return v0;
}
procedure `boolean` `z`(`qc.c` v5 @kind this) @signature `Lqc/c;.z:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42a0b8.  v0:= v5.`qc.c.p` @type ^`long` @kind wide;
  #L42a0bc.  v2:= 0L;
  #L42a0c0.  v4:= lcmp(v0, v2);
  #L42a0c4.  if v4 != 0 then goto L42a0cc;
  #L42a0c8.  v0:= 1I;
  #L42a0ca.  goto L42a0ce;
  #L42a0cc.  v0:= 0I;
  #L42a0ce.  return v0;
}
