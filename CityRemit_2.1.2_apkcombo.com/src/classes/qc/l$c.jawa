record `qc.l$c` @kind class @AccessFlag FINAL extends `qc.a` @kind class {
  `java.net.Socket` `qc.l$c.k` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`qc.l$c` v0 @kind this, `java.net.Socket` v1 @kind object) @signature `Lqc/l$c;.<init>:(Ljava/net/Socket;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d208.  v0.`qc.l$c.k` @type ^`java.net.Socket` := v1 @kind object;
  #L42d20c.  call `<init>`(v0) @signature `Lqc/a;.<init>:()V` @kind direct;
  #L42d212.  return @kind void;
}
procedure `java.io.IOException` `o`(`qc.l$c` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lqc/l$c;.o:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L42d1dc.  v0:= new `java.net.SocketTimeoutException`;
  #L42d1e0.  v1:= "timeout" @kind object;
  #L42d1e4.  call `<init>`(v0, v1) @signature `Ljava/net/SocketTimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d1ea.  if v3 == 0 then goto L42d1f4;
  #L42d1ee.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L42d1f4.  return v0 @kind object;
}
procedure `void` `t`(`qc.l$c` v5 @kind this) @signature `Lqc/l$c;.t:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42d224.  v0:= "Failed to close timed out socket " @kind object;
  #L42d228.  v1:= v5.`qc.l$c.k` @type ^`java.net.Socket` @kind object;
  #L42d22c.  call `close`(v1) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #L42d232.  goto L42d28a;
  #L42d234.  v1:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L42d236.  call temp:= `c`(v1) @signature `Lqc/l;.c:(Ljava/lang/AssertionError;)Z` @kind static;
  #L42d23c.  v2:= temp;
  #L42d23e.  if v2 == 0 then goto L42d256;
  #L42d242.  v2:= `@@qc.l.a` @type ^`java.util.logging.Logger` @kind object;
  #L42d246.  v3:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L42d24a.  v4:= new `java.lang.StringBuilder`;
  #L42d24e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42d254.  goto L42d26c;
  #L42d256.  throw v1;
  #L42d258.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L42d25a.  v2:= `@@qc.l.a` @type ^`java.util.logging.Logger` @kind object;
  #L42d25e.  v3:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L42d262.  v4:= new `java.lang.StringBuilder`;
  #L42d266.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42d26c.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d272.  v0:= v5.`qc.l$c.k` @type ^`java.net.Socket` @kind object;
  #L42d276.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d27c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42d282.  v0:= temp @kind object;
  #L42d284.  call `log`(v2, v3, v0, v1) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L42d28a.  return @kind void;
  catch `java.lang.Exception` @[L42d228..L42d232] goto L42d258;
  catch `java.lang.AssertionError` @[L42d228..L42d232] goto L42d234;
}
