record `qc.a` @kind class @AccessFlag PUBLIC extends `qc.t` @kind class {
  `boolean` `qc.a.e` @AccessFlag PRIVATE;
  `qc.a` `qc.a.f` @AccessFlag PRIVATE;
  `long` `qc.a.g` @AccessFlag PRIVATE;
}
global `long` `@@qc.a.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@qc.a.i` @AccessFlag PRIVATE_STATIC_FINAL;
global `qc.a` `@@qc.a.j` @AccessFlag STATIC;
procedure `void` `<clinit>`() @signature `Lqc/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L429be8.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L429bec.  v1:= 60L;
  #L429bf0.  call temp:= `toMillis`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L429bf6.  v0:= temp @kind wide;
  #L429bf8.  `@@qc.a.h` @type ^`long` := v0 @kind wide;
  #L429bfc.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L429c00.  call temp:= `toNanos`(v2, v0) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L429c06.  v0:= temp @kind wide;
  #L429c08.  `@@qc.a.i` @type ^`long` := v0 @kind wide;
  #L429c0c.  return @kind void;
}
procedure `void` `<init>`(`qc.a` v0 @kind this) @signature `Lqc/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L429c20.  call `<init>`(v0) @signature `Lqc/t;.<init>:()V` @kind direct;
  #L429c26.  return @kind void;
}
procedure `qc.a` `i`() @signature `Lqc/a;.i:()Lqc/a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L429b14.  v0:= constclass @type ^`qc.a` @kind object;
  #L429b18.  v1:= `@@qc.a.j` @type ^`qc.a` @kind object;
  #L429b1c.  v1:= v1.`qc.a.f` @type ^`qc.a` @kind object;
  #L429b20.  v2:= 0I;
  #L429b22.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L429b28.  v3:= temp @kind wide;
  #L429b2a.  if v1 != 0 then goto L429b60;
  #L429b2e.  v5:= `@@qc.a.h` @type ^`long` @kind wide;
  #L429b32.  call `wait`(v0, v5) @signature `Ljava/lang/Object;.wait:(J)V` @kind virtual;
  #L429b38.  v0:= `@@qc.a.j` @type ^`qc.a` @kind object;
  #L429b3c.  v0:= v0.`qc.a.f` @type ^`qc.a` @kind object;
  #L429b40.  if v0 != 0 then goto L429b5e;
  #L429b44.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L429b4a.  v0:= temp @kind wide;
  #L429b4c.  v0:= v0 - v3 @kind long;
  #L429b4e.  v3:= `@@qc.a.i` @type ^`long` @kind wide;
  #L429b52.  v5:= lcmp(v0, v3);
  #L429b56.  if v5 < 0 then goto L429b5e;
  #L429b5a.  v2:= `@@qc.a.j` @type ^`qc.a` @kind object;
  #L429b5e.  return v2 @kind object;
  #L429b60.  call temp:= `p`(v1, v3) @signature `Lqc/a;.p:(J)J` @kind direct;
  #L429b66.  v3:= temp @kind wide;
  #L429b68.  v5:= 0L;
  #L429b6c.  v7:= lcmp(v3, v5);
  #L429b70.  if v7 <= 0 then goto L429b8e;
  #L429b74.  v5:= 1000000L;
  #L429b7a.  v7:= v3 / v5 @kind long;
  #L429b7e.  v5:= v5 * v7 @kind long;
  #L429b82.  v3:= v3 - v5 @kind long;
  #L429b84.  v1:= (`int`) v3 @kind l2i;
  #L429b86.  call `wait`(v0, v7, v1) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L429b8c.  return v2 @kind object;
  #L429b8e.  v0:= `@@qc.a.j` @type ^`qc.a` @kind object;
  #L429b92.  v3:= v1.`qc.a.f` @type ^`qc.a` @kind object;
  #L429b96.  v0.`qc.a.f` @type ^`qc.a` := v3 @kind object;
  #L429b9a.  v1.`qc.a.f` @type ^`qc.a` := v2 @kind object;
  #L429b9e.  return v1 @kind object;
}
procedure `boolean` `j`(`qc.a` v3 @kind object) @signature `Lqc/a;.j:(Lqc/a;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L429a28.  v0:= constclass @type ^`qc.a` @kind object;
  #L429a2c.  @monitorenter v0
  #L429a2e.  v1:= `@@qc.a.j` @type ^`qc.a` @kind object;
  #L429a32.  if v1 == 0 then goto L429a56;
  #L429a36.  v2:= v1.`qc.a.f` @type ^`qc.a` @kind object;
  #L429a3a.  if v2 != v3 then goto L429a52;
  #L429a3e.  v2:= v3.`qc.a.f` @type ^`qc.a` @kind object;
  #L429a42.  v1.`qc.a.f` @type ^`qc.a` := v2 @kind object;
  #L429a46.  v1:= 0I;
  #L429a48.  v3.`qc.a.f` @type ^`qc.a` := v1 @kind object;
  #L429a4c.  v3:= 0I;
  #L429a4e.  @monitorexit v0
  #L429a50.  return v3;
  #L429a52.  v1:= v2 @kind object;
  #L429a54.  goto L429a32;
  #L429a56.  v3:= 1I;
  #L429a58.  goto L429a4e;
  #L429a5a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L429a5c.  @monitorexit v0
  #L429a5e.  throw v3;
  catch `java.lang.Throwable` @[L429a2e..L429a4c] goto L429a5a;
}
procedure `long` `p`(`qc.a` v2 @kind this, `long` v3 ) @signature `Lqc/a;.p:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L429afc.  v0:= v2.`qc.a.g` @type ^`long` @kind wide;
  #L429b00.  v0:= v0 - v3 @kind long;
  #L429b02.  return v0 @kind wide;
}
procedure `void` `q`(`qc.a` v6 @kind object, `long` v7 , `boolean` v9 ) @signature `Lqc/a;.q:(Lqc/a;JZ)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L429cc0.  v0:= constclass @type ^`qc.a` @kind object;
  #L429cc4.  @monitorenter v0
  #L429cc6.  v1:= `@@qc.a.j` @type ^`qc.a` @kind object;
  #L429cca.  if v1 != 0 then goto L429cec;
  #L429cce.  v1:= new `qc.a`;
  #L429cd2.  call `<init>`(v1) @signature `Lqc/a;.<init>:()V` @kind direct;
  #L429cd8.  `@@qc.a.j` @type ^`qc.a` := v1 @kind object;
  #L429cdc.  v1:= new `qc.a$c`;
  #L429ce0.  call `<init>`(v1) @signature `Lqc/a$c;.<init>:()V` @kind direct;
  #L429ce6.  call `start`(v1) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L429cec.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L429cf2.  v1:= temp @kind wide;
  #L429cf4.  v3:= 0L;
  #L429cf8.  v5:= lcmp(v7, v3);
  #L429cfc.  if v5 == 0 then goto L429d1e;
  #L429d00.  if v9 == 0 then goto L429d1e;
  #L429d04.  call temp:= `c`(v6) @signature `Lqc/t;.c:()J` @kind virtual;
  #L429d0a.  v3:= temp @kind wide;
  #L429d0c.  v3:= v3 - v1 @kind long;
  #L429d0e.  call temp:= `min`(v7, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L429d14.  v7:= temp @kind wide;
  #L429d16.  v7:= v7 + v1 @kind long;
  #L429d18.  v6.`qc.a.g` @type ^`long` := v7 @kind wide;
  #L429d1c.  goto L429d34;
  #L429d1e.  if v5 == 0 then goto L429d24;
  #L429d22.  goto L429d16;
  #L429d24.  if v9 == 0 then goto L429d7e;
  #L429d28.  call temp:= `c`(v6) @signature `Lqc/t;.c:()J` @kind virtual;
  #L429d2e.  v7:= temp @kind wide;
  #L429d30.  v6.`qc.a.g` @type ^`long` := v7 @kind wide;
  #L429d34.  call temp:= `p`(v6, v1) @signature `Lqc/a;.p:(J)J` @kind direct;
  #L429d3a.  v7:= temp @kind wide;
  #L429d3c.  v9:= `@@qc.a.j` @type ^`qc.a` @kind object;
  #L429d40.  v3:= v9.`qc.a.f` @type ^`qc.a` @kind object;
  #L429d44.  if v3 == 0 then goto L429d60;
  #L429d48.  call temp:= `p`(v3, v1) @signature `Lqc/a;.p:(J)J` @kind direct;
  #L429d4e.  v3:= temp @kind wide;
  #L429d50.  v5:= lcmp(v7, v3);
  #L429d54.  if v5 >= 0 then goto L429d5a;
  #L429d58.  goto L429d60;
  #L429d5a.  v9:= v9.`qc.a.f` @type ^`qc.a` @kind object;
  #L429d5e.  goto L429d40;
  #L429d60.  v7:= v9.`qc.a.f` @type ^`qc.a` @kind object;
  #L429d64.  v6.`qc.a.f` @type ^`qc.a` := v7 @kind object;
  #L429d68.  v9.`qc.a.f` @type ^`qc.a` := v6 @kind object;
  #L429d6c.  v6:= `@@qc.a.j` @type ^`qc.a` @kind object;
  #L429d70.  if v9 != v6 then goto L429d7a;
  #L429d74.  call `notify`(v0) @signature `Ljava/lang/Object;.notify:()V` @kind virtual;
  #L429d7a.  @monitorexit v0
  #L429d7c.  return @kind void;
  #L429d7e.  v6:= new `java.lang.AssertionError`;
  #L429d82.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L429d88.  throw v6;
  #L429d8a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L429d8c.  @monitorexit v0
  #L429d8e.  throw v6;
  catch `java.lang.Throwable` @[L429cc6..L429d7a] goto L429d8a;
  catch `java.lang.Throwable` @[L429d7e..L429d8a] goto L429d8a;
}
procedure `void` `k`(`qc.a` v6 @kind this) @signature `Lqc/a;.k:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L429c38.  v0:= v6.`qc.a.e` @type ^`boolean` @kind boolean;
  #L429c3c.  if v0 != 0 then goto L429c70;
  #L429c40.  call temp:= `h`(v6) @signature `Lqc/t;.h:()J` @kind virtual;
  #L429c46.  v0:= temp @kind wide;
  #L429c48.  call temp:= `e`(v6) @signature `Lqc/t;.e:()Z` @kind virtual;
  #L429c4e.  v2:= temp;
  #L429c50.  v3:= 0L;
  #L429c54.  v5:= lcmp(v0, v3);
  #L429c58.  if v5 != 0 then goto L429c62;
  #L429c5c.  if v2 != 0 then goto L429c62;
  #L429c60.  return @kind void;
  #L429c62.  v3:= 1I;
  #L429c64.  v6.`qc.a.e` @type ^`boolean` := v3 @kind boolean;
  #L429c68.  call `q`(v6, v0, v2) @signature `Lqc/a;.q:(Lqc/a;JZ)V` @kind static;
  #L429c6e.  return @kind void;
  #L429c70.  v0:= new `java.lang.IllegalStateException`;
  #L429c74.  v1:= "Unbalanced enter/exit" @kind object;
  #L429c78.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L429c7e.  throw v0;
}
procedure `java.io.IOException` `l`(`qc.a` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `Lqc/a;.l:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag FINAL {
    temp;
    v0;

  #L429aa8.  call temp:= `n`(v1) @signature `Lqc/a;.n:()Z` @kind virtual;
  #L429aae.  v0:= temp;
  #L429ab0.  if v0 != 0 then goto L429ab6;
  #L429ab4.  return v2 @kind object;
  #L429ab6.  call temp:= `o`(v1, v2) @signature `Lqc/a;.o:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L429abc.  v2:= temp @kind object;
  #L429abe.  return v2 @kind object;
}
procedure `void` `m`(`qc.a` v1 @kind this, `boolean` v2 ) @signature `Lqc/a;.m:(Z)V` @AccessFlag FINAL {
    temp;
    v0;

  #L429c90.  call temp:= `n`(v1) @signature `Lqc/a;.n:()Z` @kind virtual;
  #L429c96.  v0:= temp;
  #L429c98.  if v0 == 0 then goto L429cae;
  #L429c9c.  if v2 != 0 then goto L429ca2;
  #L429ca0.  goto L429cae;
  #L429ca2.  v2:= 0I;
  #L429ca4.  call temp:= `o`(v1, v2) @signature `Lqc/a;.o:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L429caa.  v2:= temp @kind object;
  #L429cac.  throw v2;
  #L429cae.  return @kind void;
}
procedure `boolean` `n`(`qc.a` v2 @kind this) @signature `Lqc/a;.n:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L429a7c.  v0:= v2.`qc.a.e` @type ^`boolean` @kind boolean;
  #L429a80.  v1:= 0I;
  #L429a82.  if v0 != 0 then goto L429a88;
  #L429a86.  return v1;
  #L429a88.  v2.`qc.a.e` @type ^`boolean` := v1 @kind boolean;
  #L429a8c.  call temp:= `j`(v2) @signature `Lqc/a;.j:(Lqc/a;)Z` @kind static;
  #L429a92.  v0:= temp;
  #L429a94.  return v0;
}
procedure `java.io.IOException` `o`(`qc.a` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lqc/a;.o:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L429ad0.  v0:= new `java.io.InterruptedIOException`;
  #L429ad4.  v1:= "timeout" @kind object;
  #L429ad8.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L429ade.  if v3 == 0 then goto L429ae8;
  #L429ae2.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L429ae8.  return v0 @kind object;
}
procedure `qc.r` `r`(`qc.a` v1 @kind this, `qc.r` v2 @kind object) @signature `Lqc/a;.r:(Lqc/r;)Lqc/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L429bb0.  v0:= new `qc.a$a`;
  #L429bb4.  call `<init>`(v0, v1, v2) @signature `Lqc/a$a;.<init>:(Lqc/a;Lqc/r;)V` @kind direct;
  #L429bba.  return v0 @kind object;
}
procedure `qc.s` `s`(`qc.a` v1 @kind this, `qc.s` v2 @kind object) @signature `Lqc/a;.s:(Lqc/s;)Lqc/s;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L429bcc.  v0:= new `qc.a$b`;
  #L429bd0.  call `<init>`(v0, v1, v2) @signature `Lqc/a$b;.<init>:(Lqc/a;Lqc/s;)V` @kind direct;
  #L429bd6.  return v0 @kind object;
}
procedure `void` `t`(`qc.a` v0 @kind this) @signature `Lqc/a;.t:()V` @AccessFlag PROTECTED {
    temp;

  #L429db4.  return @kind void;
}
