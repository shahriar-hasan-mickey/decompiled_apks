record `qc.f` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface, `java.lang.Comparable` @kind interface {
  `byte`[] `qc.f.o` @AccessFlag FINAL;
  `int` `qc.f.p` @AccessFlag TRANSIENT;
  `java.lang.String` `qc.f.q` @AccessFlag TRANSIENT;
}
global `char`[] `@@qc.f.r` @AccessFlag STATIC_FINAL;
global `qc.f` `@@qc.f.s` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lqc/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42c3e0.  v0:= 16I;
  #L42c3e4.  v0:= new `char`[v0];
  #L42c3e8.  goto L42c408;
  #L42c3ee.  `@@qc.f.r` @type ^`char`[] := v0 @kind object;
  #L42c3f2.  v0:= 0I;
  #L42c3f4.  v0:= new `byte`[v0];
  #L42c3f8.  call temp:= `s`(v0) @signature `Lqc/f;.s:([B)Lqc/f;` @kind static;
  #L42c3fe.  v0:= temp @kind object;
  #L42c400.  `@@qc.f.s` @type ^`qc.f` := v0 @kind object;
  #L42c404.  return @kind void;
  #L42c406.  
  #L42c408.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L42c42f.  goto L42c3ee;
}
procedure `void` `<init>`(`qc.f` v0 @kind this, `byte`[] v1 @kind object) @signature `Lqc/f;.<init>:([B)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42c440.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42c446.  v0.`qc.f.o` @type ^`byte`[] := v1 @kind object;
  #L42c44a.  return @kind void;
}
procedure `int` `d`(`java.lang.String` v5 @kind object, `int` v6 ) @signature `Lqc/f;.d:(Ljava/lang/String;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42bd04.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L42bd0a.  v0:= temp;
  #L42bd0c.  v1:= 0I;
  #L42bd0e.  v2:= 0I;
  #L42bd10.  if v1 >= v0 then goto L42bd5c;
  #L42bd14.  if v2 != v6 then goto L42bd1a;
  #L42bd18.  return v1;
  #L42bd1a.  call temp:= `codePointAt`(v5, v1) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L42bd20.  v3:= temp;
  #L42bd22.  call temp:= `isISOControl`(v3) @signature `Ljava/lang/Character;.isISOControl:(I)Z` @kind static;
  #L42bd28.  v4:= temp;
  #L42bd2a.  if v4 == 0 then goto L42bd3e;
  #L42bd2e.  v4:= 10I;
  #L42bd32.  if v3 == v4 then goto L42bd3e;
  #L42bd36.  v4:= 13I;
  #L42bd3a.  if v3 != v4 then goto L42bd48;
  #L42bd3e.  v4:= 65533I;
  #L42bd44.  if v3 != v4 then goto L42bd4c;
  #L42bd48.  v5:= -1I;
  #L42bd4a.  return v5;
  #L42bd4c.  v2:= v2 + 1;
  #L42bd50.  call temp:= `charCount`(v3) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L42bd56.  v3:= temp;
  #L42bd58.  v1:= v1 + v3 @kind int;
  #L42bd5a.  goto L42bd10;
  #L42bd5c.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L42bd62.  v5:= temp;
  #L42bd64.  return v5;
}
procedure `qc.f` `h`(`java.lang.String` v5 @kind object) @signature `Lqc/f;.h:(Ljava/lang/String;)Lqc/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42c0f0.  if v5 == 0 then goto L42c18c;
  #L42c0f4.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L42c0fa.  v0:= temp;
  #L42c0fc.  v0:= v0 %% 2;
  #L42c100.  if v0 != 0 then goto L42c15e;
  #L42c104.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L42c10a.  v0:= temp;
  #L42c10c.  v0:= v0 / 2;
  #L42c110.  v1:= new `byte`[v0];
  #L42c114.  v2:= 0I;
  #L42c116.  if v2 >= v0 then goto L42c154;
  #L42c11a.  v3:= v2 * 2;
  #L42c11e.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L42c124.  v4:= temp;
  #L42c126.  call temp:= `i`(v4) @signature `Lqc/f;.i:(C)I` @kind static;
  #L42c12c.  v4:= temp;
  #L42c12e.  v4:= v4 ^< 4;
  #L42c132.  v3:= v3 + 1;
  #L42c136.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L42c13c.  v3:= temp;
  #L42c13e.  call temp:= `i`(v3) @signature `Lqc/f;.i:(C)I` @kind static;
  #L42c144.  v3:= temp;
  #L42c146.  v4:= v4 + v3 @kind int;
  #L42c148.  v3:= (`byte`) v4 @kind i2b;
  #L42c14a.  v1[v2]:= v3 @kind byte;
  #L42c14e.  v2:= v2 + 1;
  #L42c152.  goto L42c116;
  #L42c154.  call temp:= `s`(v1) @signature `Lqc/f;.s:([B)Lqc/f;` @kind static;
  #L42c15a.  v5:= temp @kind object;
  #L42c15c.  return v5 @kind object;
  #L42c15e.  v0:= new `java.lang.IllegalArgumentException`;
  #L42c162.  v1:= new `java.lang.StringBuilder`;
  #L42c166.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42c16c.  v2:= "Unexpected hex string: " @kind object;
  #L42c170.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c176.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c17c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c182.  v5:= temp @kind object;
  #L42c184.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c18a.  throw v0;
  #L42c18c.  v5:= new `java.lang.IllegalArgumentException`;
  #L42c190.  v0:= "hex == null" @kind object;
  #L42c194.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c19a.  throw v5;
}
procedure `int` `i`(`char` v3 ) @signature `Lqc/f;.i:(C)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L42be08.  v0:= 48I;
  #L42be0c.  if v3 < v0 then goto L42be1c;
  #L42be10.  v1:= 57I;
  #L42be14.  if v3 > v1 then goto L42be1c;
  #L42be18.  v3:= v3 - v0 @kind int;
  #L42be1a.  return v3;
  #L42be1c.  v0:= 97I;
  #L42be20.  if v3 < v0 then goto L42be34;
  #L42be24.  v1:= 102I;
  #L42be28.  if v3 > v1 then goto L42be34;
  #L42be2c.  v3:= v3 - v0 @kind int;
  #L42be2e.  v3:= v3 + 10;
  #L42be32.  return v3;
  #L42be34.  v0:= 65I;
  #L42be38.  if v3 < v0 then goto L42be46;
  #L42be3c.  v1:= 70I;
  #L42be40.  if v3 > v1 then goto L42be46;
  #L42be44.  goto L42be2c;
  #L42be46.  v0:= new `java.lang.IllegalArgumentException`;
  #L42be4a.  v1:= new `java.lang.StringBuilder`;
  #L42be4e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42be54.  v2:= "Unexpected hex digit: " @kind object;
  #L42be58.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42be5e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L42be64.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42be6a.  v3:= temp @kind object;
  #L42be6c.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42be72.  throw v0;
}
procedure `qc.f` `j`(`qc.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lqc/f;.j:(Ljava/lang/String;)Lqc/f;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L42c1ac.  call temp:= `getInstance`(v2) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L42c1b2.  v2:= temp @kind object;
  #L42c1b4.  v0:= v1.`qc.f.o` @type ^`byte`[] @kind object;
  #L42c1b8.  call temp:= `digest`(v2, v0) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L42c1be.  v2:= temp @kind object;
  #L42c1c0.  call temp:= `s`(v2) @signature `Lqc/f;.s:([B)Lqc/f;` @kind static;
  #L42c1c6.  v2:= temp @kind object;
  #L42c1c8.  return v2 @kind object;
  #L42c1ca.  v2:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L42c1cc.  v0:= new `java.lang.AssertionError`;
  #L42c1d0.  call `<init>`(v0, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42c1d6.  throw v0;
  catch `java.security.NoSuchAlgorithmException` @[L42c1ac..L42c1c8] goto L42c1ca;
}
procedure `qc.f` `k`(`java.lang.String` v2 @kind object) @signature `Lqc/f;.k:(Ljava/lang/String;)Lqc/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L42c1f8.  if v2 == 0 then goto L42c218;
  #L42c1fc.  v0:= new `qc.f`;
  #L42c200.  v1:= `@@qc.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L42c204.  call temp:= `getBytes`(v2, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L42c20a.  v1:= temp @kind object;
  #L42c20c.  call `<init>`(v0, v1) @signature `Lqc/f;.<init>:([B)V` @kind direct;
  #L42c212.  v0.`qc.f.q` @type ^`java.lang.String` := v2 @kind object;
  #L42c216.  return v0 @kind object;
  #L42c218.  v2:= new `java.lang.IllegalArgumentException`;
  #L42c21c.  v0:= "s == null" @kind object;
  #L42c220.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c226.  throw v2;
}
procedure `qc.f` `s`(`byte`[] v1 @kind object) @signature `Lqc/f;.s:([B)Lqc/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42c238.  if v1 == 0 then goto L42c254;
  #L42c23c.  v0:= new `qc.f`;
  #L42c240.  call temp:= `clone`(v1) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L42c246.  v1:= temp @kind object;
  #L42c248.  v1:= (`byte`[]) v1 @kind object;
  #L42c24c.  call `<init>`(v0, v1) @signature `Lqc/f;.<init>:([B)V` @kind direct;
  #L42c252.  return v0 @kind object;
  #L42c254.  v1:= new `java.lang.IllegalArgumentException`;
  #L42c258.  v0:= "data == null" @kind object;
  #L42c25c.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c262.  throw v1;
}
procedure `qc.f` `B`(`qc.f` v1 @kind this) @signature `Lqc/f;.B:()Lqc/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c294.  v0:= "SHA-256" @kind object;
  #L42c298.  call temp:= `j`(v1, v0) @signature `Lqc/f;.j:(Ljava/lang/String;)Lqc/f;` @kind direct;
  #L42c29e.  v0:= temp @kind object;
  #L42c2a0.  return v0 @kind object;
}
procedure `int` `D`(`qc.f` v1 @kind this) @signature `Lqc/f;.D:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42beb0.  v0:= v1.`qc.f.o` @type ^`byte`[] @kind object;
  #L42beb4.  v0:= length @variable v0;
  #L42beb6.  return v0;
}
procedure `boolean` `F`(`qc.f` v2 @kind this, `qc.f` v3 @kind object) @signature `Lqc/f;.F:(Lqc/f;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L42bca0.  call temp:= `D`(v3) @signature `Lqc/f;.D:()I` @kind virtual;
  #L42bca6.  v0:= temp;
  #L42bca8.  v1:= 0I;
  #L42bcaa.  call temp:= `t`(v2, v1, v3, v1, v0) @signature `Lqc/f;.t:(ILqc/f;II)Z` @kind virtual;
  #L42bcb0.  v3:= temp;
  #L42bcb2.  return v3;
}
procedure `qc.f` `I`(`qc.f` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lqc/f;.I:(II)Lqc/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42c2b4.  if v4 < 0 then goto L42c33c;
  #L42c2b8.  v0:= v3.`qc.f.o` @type ^`byte`[] @kind object;
  #L42c2bc.  v1:= length @variable v0;
  #L42c2be.  if v5 > v1 then goto L42c2fe;
  #L42c2c2.  v1:= v5 - v4 @kind int;
  #L42c2c6.  if v1 < 0 then goto L42c2ee;
  #L42c2ca.  if v4 != 0 then goto L42c2d6;
  #L42c2ce.  v2:= length @variable v0;
  #L42c2d0.  if v5 != v2 then goto L42c2d6;
  #L42c2d4.  return v3 @kind object;
  #L42c2d6.  v5:= new `byte`[v1];
  #L42c2da.  v2:= 0I;
  #L42c2dc.  call `arraycopy`(v0, v4, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42c2e2.  v4:= new `qc.f`;
  #L42c2e6.  call `<init>`(v4, v5) @signature `Lqc/f;.<init>:([B)V` @kind direct;
  #L42c2ec.  return v4 @kind object;
  #L42c2ee.  v4:= new `java.lang.IllegalArgumentException`;
  #L42c2f2.  v5:= "endIndex < beginIndex" @kind object;
  #L42c2f6.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c2fc.  throw v4;
  #L42c2fe.  v4:= new `java.lang.IllegalArgumentException`;
  #L42c302.  v5:= new `java.lang.StringBuilder`;
  #L42c306.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42c30c.  v0:= "endIndex > length(" @kind object;
  #L42c310.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c316.  v0:= v3.`qc.f.o` @type ^`byte`[] @kind object;
  #L42c31a.  v0:= length @variable v0;
  #L42c31c.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c322.  v0:= ")" @kind object;
  #L42c326.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c32c.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c332.  v5:= temp @kind object;
  #L42c334.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c33a.  throw v4;
  #L42c33c.  v4:= new `java.lang.IllegalArgumentException`;
  #L42c340.  v5:= "beginIndex < 0" @kind object;
  #L42c344.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c34a.  throw v4;
}
procedure `qc.f` `K`(`qc.f` v6 @kind this) @signature `Lqc/f;.K:()Lqc/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42c35c.  v0:= 0I;
  #L42c35e.  v1:= v6.`qc.f.o` @type ^`byte`[] @kind object;
  #L42c362.  v2:= length @variable v1;
  #L42c364.  if v0 >= v2 then goto L42c3ce;
  #L42c368.  v2:= v1[v0] @kind byte;
  #L42c36c.  v3:= 65I;
  #L42c370.  if v2 < v3 then goto L42c3c8;
  #L42c374.  v4:= 90I;
  #L42c378.  if v2 <= v4 then goto L42c37e;
  #L42c37c.  goto L42c3c8;
  #L42c37e.  call temp:= `clone`(v1) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L42c384.  v1:= temp @kind object;
  #L42c386.  v1:= (`byte`[]) v1 @kind object;
  #L42c38a.  v5:= v0 + 1;
  #L42c38e.  v2:= v2 + 32;
  #L42c392.  v2:= (`byte`) v2 @kind i2b;
  #L42c394.  v1[v0]:= v2 @kind byte;
  #L42c398.  v0:= length @variable v1;
  #L42c39a.  if v5 >= v0 then goto L42c3bc;
  #L42c39e.  v0:= v1[v5] @kind byte;
  #L42c3a2.  if v0 < v3 then goto L42c3b6;
  #L42c3a6.  if v0 <= v4 then goto L42c3ac;
  #L42c3aa.  goto L42c3b6;
  #L42c3ac.  v0:= v0 + 32;
  #L42c3b0.  v0:= (`byte`) v0 @kind i2b;
  #L42c3b2.  v1[v5]:= v0 @kind byte;
  #L42c3b6.  v5:= v5 + 1;
  #L42c3ba.  goto L42c398;
  #L42c3bc.  v0:= new `qc.f`;
  #L42c3c0.  call `<init>`(v0, v1) @signature `Lqc/f;.<init>:([B)V` @kind direct;
  #L42c3c6.  return v0 @kind object;
  #L42c3c8.  v0:= v0 + 1;
  #L42c3cc.  goto L42c35e;
  #L42c3ce.  return v6 @kind object;
}
procedure `byte`[] `L`(`qc.f` v1 @kind this) @signature `Lqc/f;.L:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bce0.  v0:= v1.`qc.f.o` @type ^`byte`[] @kind object;
  #L42bce4.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L42bcea.  v0:= temp @kind object;
  #L42bcec.  v0:= (`byte`[]) v0 @kind object;
  #L42bcf0.  return v0 @kind object;
}
procedure `java.lang.String` `P`(`qc.f` v3 @kind this) @signature `Lqc/f;.P:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42c0bc.  v0:= v3.`qc.f.q` @type ^`java.lang.String` @kind object;
  #L42c0c0.  if v0 == 0 then goto L42c0c6;
  #L42c0c4.  goto L42c0dc;
  #L42c0c6.  v0:= new `java.lang.String`;
  #L42c0ca.  v1:= v3.`qc.f.o` @type ^`byte`[] @kind object;
  #L42c0ce.  v2:= `@@qc.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L42c0d2.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L42c0d8.  v3.`qc.f.q` @type ^`java.lang.String` := v0 @kind object;
  #L42c0dc.  return v0 @kind object;
}
procedure `void` `S`(`qc.f` v3 @kind this, `qc.c` v4 @kind object) @signature `Lqc/f;.S:(Lqc/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L42c45c.  v0:= v3.`qc.f.o` @type ^`byte`[] @kind object;
  #L42c460.  v1:= length @variable v0;
  #L42c462.  v2:= 0I;
  #L42c464.  call temp:= `n0`(v4, v0, v2, v1) @signature `Lqc/c;.n0:([BII)Lqc/c;` @kind virtual;
  #L42c46a.  return @kind void;
}
procedure `java.lang.String` `c`(`qc.f` v1 @kind this) @signature `Lqc/f;.c:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bec8.  v0:= v1.`qc.f.o` @type ^`byte`[] @kind object;
  #L42becc.  call temp:= `a`(v0) @signature `Lqc/b;.a:([B)Ljava/lang/String;` @kind static;
  #L42bed2.  v0:= temp @kind object;
  #L42bed4.  return v0 @kind object;
}
procedure `int` `compareTo`(`qc.f` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lqc/f;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42bd78.  v1:= (`qc.f`) v1 @kind object;
  #L42bd7c.  call temp:= `e`(v0, v1) @signature `Lqc/f;.e:(Lqc/f;)I` @kind virtual;
  #L42bd82.  v1:= temp;
  #L42bd84.  return v1;
}
procedure `int` `e`(`qc.f` v9 @kind this, `qc.f` v10 @kind object) @signature `Lqc/f;.e:(Lqc/f;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L42bd98.  call temp:= `D`(v9) @signature `Lqc/f;.D:()I` @kind virtual;
  #L42bd9e.  v0:= temp;
  #L42bda0.  call temp:= `D`(v10) @signature `Lqc/f;.D:()I` @kind virtual;
  #L42bda6.  v1:= temp;
  #L42bda8.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L42bdae.  v2:= temp;
  #L42bdb0.  v3:= 0I;
  #L42bdb2.  v4:= 0I;
  #L42bdb4.  v5:= -1I;
  #L42bdb6.  v6:= 1I;
  #L42bdb8.  if v4 >= v2 then goto L42bde8;
  #L42bdbc.  call temp:= `o`(v9, v4) @signature `Lqc/f;.o:(I)B` @kind virtual;
  #L42bdc2.  v7:= temp;
  #L42bdc4.  v7:= v7 ^& 255;
  #L42bdc8.  call temp:= `o`(v10, v4) @signature `Lqc/f;.o:(I)B` @kind virtual;
  #L42bdce.  v8:= temp;
  #L42bdd0.  v8:= v8 ^& 255;
  #L42bdd4.  if v7 != v8 then goto L42bdde;
  #L42bdd8.  v4:= v4 + 1;
  #L42bddc.  goto L42bdb4;
  #L42bdde.  if v7 >= v8 then goto L42bde4;
  #L42bde2.  goto L42bde6;
  #L42bde4.  v5:= 1I;
  #L42bde6.  return v5;
  #L42bde8.  if v0 != v1 then goto L42bdee;
  #L42bdec.  return v3;
  #L42bdee.  if v0 >= v1 then goto L42bdf4;
  #L42bdf2.  goto L42bdf6;
  #L42bdf4.  v5:= 1I;
  #L42bdf6.  return v5;
}
procedure `boolean` `equals`(`qc.f` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lqc/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42bbf4.  v0:= 1I;
  #L42bbf6.  if v6 != v5 then goto L42bbfc;
  #L42bbfa.  return v0;
  #L42bbfc.  v1:= instanceof @variable v6 @type ^`qc.f` @kind boolean;
  #L42bc00.  v2:= 0I;
  #L42bc02.  if v1 == 0 then goto L42bc2c;
  #L42bc06.  v6:= (`qc.f`) v6 @kind object;
  #L42bc0a.  call temp:= `D`(v6) @signature `Lqc/f;.D:()I` @kind virtual;
  #L42bc10.  v1:= temp;
  #L42bc12.  v3:= v5.`qc.f.o` @type ^`byte`[] @kind object;
  #L42bc16.  v4:= length @variable v3;
  #L42bc18.  if v1 != v4 then goto L42bc2c;
  #L42bc1c.  v1:= length @variable v3;
  #L42bc1e.  call temp:= `v`(v6, v2, v3, v2, v1) @signature `Lqc/f;.v:(I[BII)Z` @kind virtual;
  #L42bc24.  v6:= temp;
  #L42bc26.  if v6 == 0 then goto L42bc2c;
  #L42bc2a.  goto L42bc2e;
  #L42bc2c.  v0:= 0I;
  #L42bc2e.  return v0;
}
procedure `int` `hashCode`(`qc.f` v1 @kind this) @signature `Lqc/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42be84.  v0:= v1.`qc.f.p` @type ^`int`;
  #L42be88.  if v0 == 0 then goto L42be8e;
  #L42be8c.  goto L42be9e;
  #L42be8e.  v0:= v1.`qc.f.o` @type ^`byte`[] @kind object;
  #L42be92.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L42be98.  v0:= temp;
  #L42be9a.  v1.`qc.f.p` @type ^`int` := v0;
  #L42be9e.  return v0;
}
procedure `byte` `o`(`qc.f` v1 @kind this, `int` v2 ) @signature `Lqc/f;.o:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bcc4.  v0:= v1.`qc.f.o` @type ^`byte`[] @kind object;
  #L42bcc8.  v2:= v0[v2] @kind byte;
  #L42bccc.  return v2;
}
procedure `java.lang.String` `r`(`qc.f` v9 @kind this) @signature `Lqc/f;.r:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L42bee8.  v0:= v9.`qc.f.o` @type ^`byte`[] @kind object;
  #L42beec.  v1:= length @variable v0;
  #L42beee.  v1:= v1 * 2;
  #L42bef2.  v1:= new `char`[v1];
  #L42bef6.  v2:= length @variable v0;
  #L42bef8.  v3:= 0I;
  #L42befa.  v4:= 0I;
  #L42befc.  if v3 >= v2 then goto L42bf32;
  #L42bf00.  v5:= v0[v3] @kind byte;
  #L42bf04.  v6:= v4 + 1;
  #L42bf08.  v7:= `@@qc.f.r` @type ^`char`[] @kind object;
  #L42bf0c.  v8:= v5 ^> 4;
  #L42bf10.  v8:= v8 ^& 15;
  #L42bf14.  v8:= v7[v8] @kind char;
  #L42bf18.  v1[v4]:= v8 @kind char;
  #L42bf1c.  v4:= v6 + 1;
  #L42bf20.  v5:= v5 ^& 15;
  #L42bf24.  v5:= v7[v5] @kind char;
  #L42bf28.  v1[v6]:= v5 @kind char;
  #L42bf2c.  v3:= v3 + 1;
  #L42bf30.  goto L42befc;
  #L42bf32.  v0:= new `java.lang.String`;
  #L42bf36.  call `<init>`(v0, v1) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L42bf3c.  return v0 @kind object;
}
procedure `boolean` `t`(`qc.f` v1 @kind this, `int` v2 , `qc.f` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lqc/f;.t:(ILqc/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bc80.  v0:= v1.`qc.f.o` @type ^`byte`[] @kind object;
  #L42bc84.  call temp:= `v`(v3, v4, v0, v2, v5) @signature `Lqc/f;.v:(I[BII)Z` @kind virtual;
  #L42bc8a.  v2:= temp;
  #L42bc8c.  return v2;
}
procedure `java.lang.String` `toString`(`qc.f` v8 @kind this) @signature `Lqc/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L42bf50.  v0:= v8.`qc.f.o` @type ^`byte`[] @kind object;
  #L42bf54.  v0:= length @variable v0;
  #L42bf56.  if v0 != 0 then goto L42bf60;
  #L42bf5a.  v0:= "[size=0]" @kind object;
  #L42bf5e.  return v0 @kind object;
  #L42bf60.  call temp:= `P`(v8) @signature `Lqc/f;.P:()Ljava/lang/String;` @kind virtual;
  #L42bf66.  v0:= temp @kind object;
  #L42bf68.  v1:= 64I;
  #L42bf6c.  call temp:= `d`(v0, v1) @signature `Lqc/f;.d:(Ljava/lang/String;I)I` @kind static;
  #L42bf72.  v2:= temp;
  #L42bf74.  v3:= -1I;
  #L42bf76.  v4:= "…]" @kind object;
  #L42bf7a.  v5:= "[size=" @kind object;
  #L42bf7e.  v6:= "]" @kind object;
  #L42bf82.  v7:= 0I;
  #L42bf84.  if v2 != v3 then goto L42c008;
  #L42bf88.  v0:= v8.`qc.f.o` @type ^`byte`[] @kind object;
  #L42bf8c.  v0:= length @variable v0;
  #L42bf8e.  if v0 > v1 then goto L42bfbc;
  #L42bf92.  v0:= new `java.lang.StringBuilder`;
  #L42bf96.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42bf9c.  v1:= "[hex=" @kind object;
  #L42bfa0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42bfa6.  call temp:= `r`(v8) @signature `Lqc/f;.r:()Ljava/lang/String;` @kind virtual;
  #L42bfac.  v1:= temp @kind object;
  #L42bfae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42bfb4.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42bfba.  goto L42bffe;
  #L42bfbc.  v0:= new `java.lang.StringBuilder`;
  #L42bfc0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42bfc6.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42bfcc.  v2:= v8.`qc.f.o` @type ^`byte`[] @kind object;
  #L42bfd0.  v2:= length @variable v2;
  #L42bfd2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42bfd8.  v2:= " hex=" @kind object;
  #L42bfdc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42bfe2.  call temp:= `I`(v8, v7, v1) @signature `Lqc/f;.I:(II)Lqc/f;` @kind virtual;
  #L42bfe8.  v1:= temp @kind object;
  #L42bfea.  call temp:= `r`(v1) @signature `Lqc/f;.r:()Ljava/lang/String;` @kind virtual;
  #L42bff0.  v1:= temp @kind object;
  #L42bff2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42bff8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42bffe.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c004.  v0:= temp @kind object;
  #L42c006.  return v0 @kind object;
  #L42c008.  call temp:= `substring`(v0, v7, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L42c00e.  v1:= temp @kind object;
  #L42c010.  v3:= "\\" @kind object;
  #L42c014.  v7:= "\\\\" @kind object;
  #L42c018.  call temp:= `replace`(v1, v3, v7) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L42c01e.  v1:= temp @kind object;
  #L42c020.  v3:= "\n" @kind object;
  #L42c024.  v7:= "\\n" @kind object;
  #L42c028.  call temp:= `replace`(v1, v3, v7) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L42c02e.  v1:= temp @kind object;
  #L42c030.  v3:= "\r" @kind object;
  #L42c034.  v7:= "\\r" @kind object;
  #L42c038.  call temp:= `replace`(v1, v3, v7) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L42c03e.  v1:= temp @kind object;
  #L42c040.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L42c046.  v0:= temp;
  #L42c048.  if v2 >= v0 then goto L42c080;
  #L42c04c.  v0:= new `java.lang.StringBuilder`;
  #L42c050.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42c056.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c05c.  v2:= v8.`qc.f.o` @type ^`byte`[] @kind object;
  #L42c060.  v2:= length @variable v2;
  #L42c062.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c068.  v2:= " text=" @kind object;
  #L42c06c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c072.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c078.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c07e.  goto L42c0a0;
  #L42c080.  v0:= new `java.lang.StringBuilder`;
  #L42c084.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42c08a.  v2:= "[text=" @kind object;
  #L42c08e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c094.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c09a.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c0a0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c0a6.  v0:= temp @kind object;
  #L42c0a8.  return v0 @kind object;
}
procedure `boolean` `v`(`qc.f` v2 @kind this, `int` v3 , `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lqc/f;.v:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42bc40.  if v3 < 0 then goto L42bc6c;
  #L42bc44.  v0:= v2.`qc.f.o` @type ^`byte`[] @kind object;
  #L42bc48.  v1:= length @variable v0;
  #L42bc4a.  v1:= v1 - v6 @kind int;
  #L42bc4c.  if v3 > v1 then goto L42bc6c;
  #L42bc50.  if v5 < 0 then goto L42bc6c;
  #L42bc54.  v1:= length @variable v4;
  #L42bc56.  v1:= v1 - v6 @kind int;
  #L42bc58.  if v5 > v1 then goto L42bc6c;
  #L42bc5c.  call temp:= `a`(v0, v3, v4, v5, v6) @signature `Lqc/u;.a:([BI[BII)Z` @kind static;
  #L42bc62.  v3:= temp;
  #L42bc64.  if v3 == 0 then goto L42bc6c;
  #L42bc68.  v3:= 1I;
  #L42bc6a.  goto L42bc6e;
  #L42bc6c.  v3:= 0I;
  #L42bc6e.  return v3;
}
procedure `qc.f` `x`(`qc.f` v1 @kind this) @signature `Lqc/f;.x:()Lqc/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c274.  v0:= "SHA-1" @kind object;
  #L42c278.  call temp:= `j`(v1, v0) @signature `Lqc/f;.j:(Ljava/lang/String;)Lqc/f;` @kind direct;
  #L42c27e.  v0:= temp @kind object;
  #L42c280.  return v0 @kind object;
}
