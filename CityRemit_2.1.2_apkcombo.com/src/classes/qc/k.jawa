record `qc.k` @kind class @AccessFlag PUBLIC_FINAL extends `qc.s` @kind interface {
  `qc.e` `qc.k.o` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `qc.k.p` @AccessFlag PRIVATE_FINAL;
  `int` `qc.k.q` @AccessFlag PRIVATE;
  `boolean` `qc.k.r` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`qc.k` v0 @kind this, `qc.e` v1 @kind object, `java.util.zip.Inflater` v2 @kind object) @signature `Lqc/k;.<init>:(Lqc/e;Ljava/util/zip/Inflater;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42ce5c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42ce62.  if v1 == 0 then goto L42ce84;
  #L42ce66.  if v2 == 0 then goto L42ce74;
  #L42ce6a.  v0.`qc.k.o` @type ^`qc.e` := v1 @kind object;
  #L42ce6e.  v0.`qc.k.p` @type ^`java.util.zip.Inflater` := v2 @kind object;
  #L42ce72.  return @kind void;
  #L42ce74.  v1:= new `java.lang.IllegalArgumentException`;
  #L42ce78.  v2:= "inflater == null" @kind object;
  #L42ce7c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ce82.  throw v1;
  #L42ce84.  v1:= new `java.lang.IllegalArgumentException`;
  #L42ce88.  v2:= "source == null" @kind object;
  #L42ce8c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ce92.  throw v1;
}
procedure `void` `c`(`qc.k` v4 @kind this) @signature `Lqc/k;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42cedc.  v0:= v4.`qc.k.q` @type ^`int`;
  #L42cee0.  if v0 != 0 then goto L42cee6;
  #L42cee4.  return @kind void;
  #L42cee6.  v1:= v4.`qc.k.p` @type ^`java.util.zip.Inflater` @kind object;
  #L42ceea.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L42cef0.  v1:= temp;
  #L42cef2.  v0:= v0 - v1 @kind int;
  #L42cef4.  v1:= v4.`qc.k.q` @type ^`int`;
  #L42cef8.  v1:= v1 - v0 @kind int;
  #L42cefa.  v4.`qc.k.q` @type ^`int` := v1;
  #L42cefe.  v1:= v4.`qc.k.o` @type ^`qc.e` @kind object;
  #L42cf02.  v2:= (`long`) v0 @kind i2l;
  #L42cf04.  call `d`(v1, v2) @signature `Lqc/e;.d:(J)V` @kind interface;
  #L42cf0a.  return @kind void;
}
procedure `long` `T`(`qc.k` v6 @kind this, `qc.c` v7 @kind object, `long` v8 ) @signature `Lqc/k;.T:(Lqc/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42ccfc.  v0:= 0L;
  #L42cd00.  v2:= lcmp(v8, v0);
  #L42cd04.  if v2 < 0 then goto L42cdec;
  #L42cd08.  v3:= v6.`qc.k.r` @type ^`boolean` @kind boolean;
  #L42cd0c.  if v3 != 0 then goto L42cddc;
  #L42cd10.  if v2 != 0 then goto L42cd16;
  #L42cd14.  return v0 @kind wide;
  #L42cd16.  call temp:= `a`(v6) @signature `Lqc/k;.a:()Z` @kind virtual;
  #L42cd1c.  v0:= temp;
  #L42cd1e.  v1:= 1I;
  #L42cd20.  call temp:= `k0`(v7, v1) @signature `Lqc/c;.k0:(I)Lqc/o;` @kind virtual;
  #L42cd26.  v1:= temp @kind object;
  #L42cd28.  v2:= v1.`qc.o.c` @type ^`int`;
  #L42cd2c.  v2:= v2 - 8192;
  #L42cd30.  v2:= (`long`) v2 @kind i2l;
  #L42cd32.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L42cd38.  v2:= temp @kind wide;
  #L42cd3a.  v3:= (`int`) v2 @kind l2i;
  #L42cd3c.  v2:= v6.`qc.k.p` @type ^`java.util.zip.Inflater` @kind object;
  #L42cd40.  v4:= v1.`qc.o.a` @type ^`byte`[] @kind object;
  #L42cd44.  v5:= v1.`qc.o.c` @type ^`int`;
  #L42cd48.  call temp:= `inflate`(v2, v4, v5, v3) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L42cd4e.  v2:= temp;
  #L42cd50.  if v2 <= 0 then goto L42cd6c;
  #L42cd54.  v8:= v1.`qc.o.c` @type ^`int`;
  #L42cd58.  v8:= v8 + v2 @kind int;
  #L42cd5a.  v1.`qc.o.c` @type ^`int` := v8;
  #L42cd5e.  v8:= v7.`qc.c.p` @type ^`long` @kind wide;
  #L42cd62.  v0:= (`long`) v2 @kind i2l;
  #L42cd64.  v8:= v8 + v0 @kind long;
  #L42cd66.  v7.`qc.c.p` @type ^`long` := v8 @kind wide;
  #L42cd6a.  return v0 @kind wide;
  #L42cd6c.  v2:= v6.`qc.k.p` @type ^`java.util.zip.Inflater` @kind object;
  #L42cd70.  call temp:= `finished`(v2) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L42cd76.  v2:= temp;
  #L42cd78.  if v2 != 0 then goto L42cda4;
  #L42cd7c.  v2:= v6.`qc.k.p` @type ^`java.util.zip.Inflater` @kind object;
  #L42cd80.  call temp:= `needsDictionary`(v2) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L42cd86.  v2:= temp;
  #L42cd88.  if v2 == 0 then goto L42cd8e;
  #L42cd8c.  goto L42cda4;
  #L42cd8e.  if v0 != 0 then goto L42cd94;
  #L42cd92.  goto L42cd16;
  #L42cd94.  v7:= new `java.io.EOFException`;
  #L42cd98.  v8:= "source exhausted prematurely" @kind object;
  #L42cd9c.  call `<init>`(v7, v8) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42cda2.  throw v7;
  #L42cda4.  call `c`(v6) @signature `Lqc/k;.c:()V` @kind direct;
  #L42cdaa.  v8:= v1.`qc.o.b` @type ^`int`;
  #L42cdae.  v9:= v1.`qc.o.c` @type ^`int`;
  #L42cdb2.  if v8 != v9 then goto L42cdc8;
  #L42cdb6.  call temp:= `b`(v1) @signature `Lqc/o;.b:()Lqc/o;` @kind virtual;
  #L42cdbc.  v8:= temp @kind object;
  #L42cdbe.  v7.`qc.c.o` @type ^`qc.o` := v8 @kind object;
  #L42cdc2.  call `a`(v1) @signature `Lqc/p;.a:(Lqc/o;)V` @kind static;
  #L42cdc8.  v7:= -1L;
  #L42cdcc.  return v7 @kind wide;
  #L42cdce.  v7:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L42cdd0.  v8:= new `java.io.IOException`;
  #L42cdd4.  call `<init>`(v8, v7) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L42cdda.  throw v8;
  #L42cddc.  v7:= new `java.lang.IllegalStateException`;
  #L42cde0.  v8:= "closed" @kind object;
  #L42cde4.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42cdea.  throw v7;
  #L42cdec.  v7:= new `java.lang.IllegalArgumentException`;
  #L42cdf0.  v0:= new `java.lang.StringBuilder`;
  #L42cdf4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42cdfa.  v1:= "byteCount < 0: " @kind object;
  #L42cdfe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ce04.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ce0a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42ce10.  v8:= temp @kind object;
  #L42ce12.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ce18.  throw v7;
  catch `java.util.zip.DataFormatException` @[L42cd20..L42cdc8] goto L42cdce;
}
procedure `boolean` `a`(`qc.k` v5 @kind this) @signature `Lqc/k;.a:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42cc70.  v0:= v5.`qc.k.p` @type ^`java.util.zip.Inflater` @kind object;
  #L42cc74.  call temp:= `needsInput`(v0) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L42cc7a.  v0:= temp;
  #L42cc7c.  v1:= 0I;
  #L42cc7e.  if v0 != 0 then goto L42cc84;
  #L42cc82.  return v1;
  #L42cc84.  call `c`(v5) @signature `Lqc/k;.c:()V` @kind direct;
  #L42cc8a.  v0:= v5.`qc.k.p` @type ^`java.util.zip.Inflater` @kind object;
  #L42cc8e.  call temp:= `getRemaining`(v0) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L42cc94.  v0:= temp;
  #L42cc96.  if v0 != 0 then goto L42ccdc;
  #L42cc9a.  v0:= v5.`qc.k.o` @type ^`qc.e` @kind object;
  #L42cc9e.  call temp:= `z`(v0) @signature `Lqc/e;.z:()Z` @kind interface;
  #L42cca4.  v0:= temp;
  #L42cca6.  if v0 == 0 then goto L42ccae;
  #L42ccaa.  v0:= 1I;
  #L42ccac.  return v0;
  #L42ccae.  v0:= v5.`qc.k.o` @type ^`qc.e` @kind object;
  #L42ccb2.  call temp:= `b`(v0) @signature `Lqc/e;.b:()Lqc/c;` @kind interface;
  #L42ccb8.  v0:= temp @kind object;
  #L42ccba.  v0:= v0.`qc.c.o` @type ^`qc.o` @kind object;
  #L42ccbe.  v2:= v0.`qc.o.c` @type ^`int`;
  #L42ccc2.  v3:= v0.`qc.o.b` @type ^`int`;
  #L42ccc6.  v2:= v2 - v3 @kind int;
  #L42ccc8.  v5.`qc.k.q` @type ^`int` := v2;
  #L42cccc.  v4:= v5.`qc.k.p` @type ^`java.util.zip.Inflater` @kind object;
  #L42ccd0.  v0:= v0.`qc.o.a` @type ^`byte`[] @kind object;
  #L42ccd4.  call `setInput`(v4, v0, v3, v2) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L42ccda.  return v1;
  #L42ccdc.  v0:= new `java.lang.IllegalStateException`;
  #L42cce0.  v1:= "?" @kind object;
  #L42cce4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ccea.  throw v0;
}
procedure `void` `close`(`qc.k` v1 @kind this) @signature `Lqc/k;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cea4.  v0:= v1.`qc.k.r` @type ^`boolean` @kind boolean;
  #L42cea8.  if v0 == 0 then goto L42ceae;
  #L42ceac.  return @kind void;
  #L42ceae.  v0:= v1.`qc.k.p` @type ^`java.util.zip.Inflater` @kind object;
  #L42ceb2.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L42ceb8.  v0:= 1I;
  #L42ceba.  v1.`qc.k.r` @type ^`boolean` := v0 @kind boolean;
  #L42cebe.  v0:= v1.`qc.k.o` @type ^`qc.e` @kind object;
  #L42cec2.  call `close`(v0) @signature `Lqc/s;.close:()V` @kind interface;
  #L42cec8.  return @kind void;
}
procedure `qc.t` `f`(`qc.k` v1 @kind this) @signature `Lqc/k;.f:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ce3c.  v0:= v1.`qc.k.o` @type ^`qc.e` @kind object;
  #L42ce40.  call temp:= `f`(v0) @signature `Lqc/s;.f:()Lqc/t;` @kind interface;
  #L42ce46.  v0:= temp @kind object;
  #L42ce48.  return v0 @kind object;
}
