record `qc.m` @kind class @AccessFlag FINAL extends `qc.d` @kind interface {
  `qc.c` `qc.m.o` @AccessFlag PUBLIC_FINAL;
  `qc.r` `qc.m.p` @AccessFlag PUBLIC_FINAL;
  `boolean` `qc.m.q` @AccessFlag ;
}
procedure `void` `<init>`(`qc.m` v1 @kind this, `qc.r` v2 @kind object) @signature `Lqc/m;.<init>:(Lqc/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L42d7ec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42d7f2.  v0:= new `qc.c`;
  #L42d7f6.  call `<init>`(v0) @signature `Lqc/c;.<init>:()V` @kind direct;
  #L42d7fc.  v1.`qc.m.o` @type ^`qc.c` := v0 @kind object;
  #L42d800.  v0:= "sink == null" @kind object;
  #L42d804.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42d80a.  v1.`qc.m.p` @type ^`qc.r` := v2 @kind object;
  #L42d80e.  return @kind void;
}
procedure `qc.d` `A`(`qc.m` v1 @kind this, `int` v2 ) @signature `Lqc/m;.A:(I)Lqc/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d6a0.  v0:= v1.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d6a4.  if v0 != 0 then goto L42d6bc;
  #L42d6a8.  v0:= v1.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d6ac.  call temp:= `p0`(v0, v2) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L42d6b2.  call temp:= `I`(v1) @signature `Lqc/m;.I:()Lqc/d;` @kind virtual;
  #L42d6b8.  v2:= temp @kind object;
  #L42d6ba.  return v2 @kind object;
  #L42d6bc.  v2:= new `java.lang.IllegalStateException`;
  #L42d6c0.  v0:= "closed" @kind object;
  #L42d6c4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d6ca.  throw v2;
}
procedure `qc.d` `D`(`qc.m` v1 @kind this, `byte`[] v2 @kind object) @signature `Lqc/m;.D:([B)Lqc/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d628.  v0:= v1.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d62c.  if v0 != 0 then goto L42d644;
  #L42d630.  v0:= v1.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d634.  call temp:= `m0`(v0, v2) @signature `Lqc/c;.m0:([B)Lqc/c;` @kind virtual;
  #L42d63a.  call temp:= `I`(v1) @signature `Lqc/m;.I:()Lqc/d;` @kind virtual;
  #L42d640.  v2:= temp @kind object;
  #L42d642.  return v2 @kind object;
  #L42d644.  v2:= new `java.lang.IllegalStateException`;
  #L42d648.  v0:= "closed" @kind object;
  #L42d64c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d652.  throw v2;
}
procedure `qc.d` `I`(`qc.m` v5 @kind this) @signature `Lqc/m;.I:()Lqc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42d5d8.  v0:= v5.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d5dc.  if v0 != 0 then goto L42d608;
  #L42d5e0.  v0:= v5.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d5e4.  call temp:= `G`(v0) @signature `Lqc/c;.G:()J` @kind virtual;
  #L42d5ea.  v0:= temp @kind wide;
  #L42d5ec.  v2:= 0L;
  #L42d5f0.  v4:= lcmp(v0, v2);
  #L42d5f4.  if v4 <= 0 then goto L42d606;
  #L42d5f8.  v2:= v5.`qc.m.p` @type ^`qc.r` @kind object;
  #L42d5fc.  v3:= v5.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d600.  call `q`(v2, v3, v0) @signature `Lqc/r;.q:(Lqc/c;J)V` @kind interface;
  #L42d606.  return v5 @kind object;
  #L42d608.  v0:= new `java.lang.IllegalStateException`;
  #L42d60c.  v1:= "closed" @kind object;
  #L42d610.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d616.  throw v0;
}
procedure `qc.d` `V`(`qc.m` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lqc/m;.V:(Ljava/lang/String;)Lqc/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d790.  v0:= v1.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d794.  if v0 != 0 then goto L42d7ac;
  #L42d798.  v0:= v1.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d79c.  call temp:= `u0`(v0, v2) @signature `Lqc/c;.u0:(Ljava/lang/String;)Lqc/c;` @kind virtual;
  #L42d7a2.  call temp:= `I`(v1) @signature `Lqc/m;.I:()Lqc/d;` @kind virtual;
  #L42d7a8.  v2:= temp @kind object;
  #L42d7aa.  return v2 @kind object;
  #L42d7ac.  v2:= new `java.lang.IllegalStateException`;
  #L42d7b0.  v0:= "closed" @kind object;
  #L42d7b4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d7ba.  throw v2;
}
procedure `qc.c` `b`(`qc.m` v1 @kind this) @signature `Lqc/m;.b:()Lqc/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d5c0.  v0:= v1.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d5c4.  return v0 @kind object;
}
procedure `void` `close`(`qc.m` v7 @kind this) @signature `Lqc/m;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42d820.  v0:= v7.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d824.  if v0 == 0 then goto L42d82a;
  #L42d828.  return @kind void;
  #L42d82a.  v0:= 0I;
  #L42d82c.  v1:= v7.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d830.  v2:= v1.`qc.c.p` @type ^`long` @kind wide;
  #L42d834.  v4:= 0L;
  #L42d838.  v6:= lcmp(v2, v4);
  #L42d83c.  if v6 <= 0 then goto L42d84e;
  #L42d840.  v4:= v7.`qc.m.p` @type ^`qc.r` @kind object;
  #L42d844.  call `q`(v4, v1, v2) @signature `Lqc/r;.q:(Lqc/c;J)V` @kind interface;
  #L42d84a.  goto L42d84e;
  #L42d84c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42d84e.  v1:= v7.`qc.m.p` @type ^`qc.r` @kind object;
  #L42d852.  call `close`(v1) @signature `Lqc/r;.close:()V` @kind interface;
  #L42d858.  goto L42d862;
  #L42d85a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42d85c.  if v0 != 0 then goto L42d862;
  #L42d860.  v0:= v1 @kind object;
  #L42d862.  v1:= 1I;
  #L42d864.  v7.`qc.m.q` @type ^`boolean` := v1 @kind boolean;
  #L42d868.  if v0 == 0 then goto L42d872;
  #L42d86c.  call `e`(v0) @signature `Lqc/u;.e:(Ljava/lang/Throwable;)V` @kind static;
  #L42d872.  return @kind void;
  catch `java.lang.Throwable` @[L42d82c..L42d84a] goto L42d84c;
  catch `java.lang.Throwable` @[L42d84e..L42d858] goto L42d85a;
}
procedure `qc.t` `f`(`qc.m` v1 @kind this) @signature `Lqc/m;.f:()Lqc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d7cc.  v0:= v1.`qc.m.p` @type ^`qc.r` @kind object;
  #L42d7d0.  call temp:= `f`(v0) @signature `Lqc/r;.f:()Lqc/t;` @kind interface;
  #L42d7d6.  v0:= temp @kind object;
  #L42d7d8.  return v0 @kind object;
}
procedure `void` `flush`(`qc.m` v6 @kind this) @signature `Lqc/m;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42d89c.  v0:= v6.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d8a0.  if v0 != 0 then goto L42d8ce;
  #L42d8a4.  v0:= v6.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d8a8.  v1:= v0.`qc.c.p` @type ^`long` @kind wide;
  #L42d8ac.  v3:= 0L;
  #L42d8b0.  v5:= lcmp(v1, v3);
  #L42d8b4.  if v5 <= 0 then goto L42d8c2;
  #L42d8b8.  v3:= v6.`qc.m.p` @type ^`qc.r` @kind object;
  #L42d8bc.  call `q`(v3, v0, v1) @signature `Lqc/r;.q:(Lqc/c;J)V` @kind interface;
  #L42d8c2.  v0:= v6.`qc.m.p` @type ^`qc.r` @kind object;
  #L42d8c6.  call `flush`(v0) @signature `Lqc/r;.flush:()V` @kind interface;
  #L42d8cc.  return @kind void;
  #L42d8ce.  v0:= new `java.lang.IllegalStateException`;
  #L42d8d2.  v1:= "closed" @kind object;
  #L42d8d6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d8dc.  throw v0;
}
procedure `qc.d` `g`(`qc.m` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lqc/m;.g:([BII)Lqc/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d664.  v0:= v1.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d668.  if v0 != 0 then goto L42d680;
  #L42d66c.  v0:= v1.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d670.  call temp:= `n0`(v0, v2, v3, v4) @signature `Lqc/c;.n0:([BII)Lqc/c;` @kind virtual;
  #L42d676.  call temp:= `I`(v1) @signature `Lqc/m;.I:()Lqc/d;` @kind virtual;
  #L42d67c.  v2:= temp @kind object;
  #L42d67e.  return v2 @kind object;
  #L42d680.  v2:= new `java.lang.IllegalStateException`;
  #L42d684.  v3:= "closed" @kind object;
  #L42d688.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d68e.  throw v2;
}
procedure `boolean` `isOpen`(`qc.m` v1 @kind this) @signature `Lqc/m;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d524.  v0:= v1.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d528.  v0:= v0 ^~ 1;
  #L42d52c.  return v0;
}
procedure `qc.d` `m`(`qc.m` v1 @kind this, `long` v2 ) @signature `Lqc/m;.m:(J)Lqc/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d6dc.  v0:= v1.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d6e0.  if v0 != 0 then goto L42d6f8;
  #L42d6e4.  v0:= v1.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d6e8.  call temp:= `q0`(v0, v2) @signature `Lqc/c;.q0:(J)Lqc/c;` @kind virtual;
  #L42d6ee.  call temp:= `I`(v1) @signature `Lqc/m;.I:()Lqc/d;` @kind virtual;
  #L42d6f4.  v2:= temp @kind object;
  #L42d6f6.  return v2 @kind object;
  #L42d6f8.  v2:= new `java.lang.IllegalStateException`;
  #L42d6fc.  v3:= "closed" @kind object;
  #L42d700.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d706.  throw v2;
}
procedure `void` `q`(`qc.m` v1 @kind this, `qc.c` v2 @kind object, `long` v3 ) @signature `Lqc/m;.q:(Lqc/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d8f0.  v0:= v1.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d8f4.  if v0 != 0 then goto L42d90a;
  #L42d8f8.  v0:= v1.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d8fc.  call `q`(v0, v2, v3) @signature `Lqc/c;.q:(Lqc/c;J)V` @kind virtual;
  #L42d902.  call temp:= `I`(v1) @signature `Lqc/m;.I:()Lqc/d;` @kind virtual;
  #L42d908.  return @kind void;
  #L42d90a.  v2:= new `java.lang.IllegalStateException`;
  #L42d90e.  v3:= "closed" @kind object;
  #L42d912.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d918.  throw v2;
}
procedure `qc.d` `r`(`qc.m` v1 @kind this, `int` v2 ) @signature `Lqc/m;.r:(I)Lqc/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d754.  v0:= v1.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d758.  if v0 != 0 then goto L42d770;
  #L42d75c.  v0:= v1.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d760.  call temp:= `s0`(v0, v2) @signature `Lqc/c;.s0:(I)Lqc/c;` @kind virtual;
  #L42d766.  call temp:= `I`(v1) @signature `Lqc/m;.I:()Lqc/d;` @kind virtual;
  #L42d76c.  v2:= temp @kind object;
  #L42d76e.  return v2 @kind object;
  #L42d770.  v2:= new `java.lang.IllegalStateException`;
  #L42d774.  v0:= "closed" @kind object;
  #L42d778.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d77e.  throw v2;
}
procedure `qc.d` `t`(`qc.m` v1 @kind this, `int` v2 ) @signature `Lqc/m;.t:(I)Lqc/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d718.  v0:= v1.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d71c.  if v0 != 0 then goto L42d734;
  #L42d720.  v0:= v1.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d724.  call temp:= `r0`(v0, v2) @signature `Lqc/c;.r0:(I)Lqc/c;` @kind virtual;
  #L42d72a.  call temp:= `I`(v1) @signature `Lqc/m;.I:()Lqc/d;` @kind virtual;
  #L42d730.  v2:= temp @kind object;
  #L42d732.  return v2 @kind object;
  #L42d734.  v2:= new `java.lang.IllegalStateException`;
  #L42d738.  v0:= "closed" @kind object;
  #L42d73c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d742.  throw v2;
}
procedure `java.lang.String` `toString`(`qc.m` v2 @kind this) @signature `Lqc/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d57c.  v0:= new `java.lang.StringBuilder`;
  #L42d580.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42d586.  v1:= "buffer(" @kind object;
  #L42d58a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d590.  v1:= v2.`qc.m.p` @type ^`qc.r` @kind object;
  #L42d594.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d59a.  v1:= ")" @kind object;
  #L42d59e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d5a4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42d5aa.  v0:= temp @kind object;
  #L42d5ac.  return v0 @kind object;
}
procedure `int` `write`(`qc.m` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lqc/m;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d540.  v0:= v1.`qc.m.q` @type ^`boolean` @kind boolean;
  #L42d544.  if v0 != 0 then goto L42d55c;
  #L42d548.  v0:= v1.`qc.m.o` @type ^`qc.c` @kind object;
  #L42d54c.  call temp:= `write`(v0, v2) @signature `Lqc/c;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L42d552.  v2:= temp;
  #L42d554.  call temp:= `I`(v1) @signature `Lqc/m;.I:()Lqc/d;` @kind virtual;
  #L42d55a.  return v2;
  #L42d55c.  v2:= new `java.lang.IllegalStateException`;
  #L42d560.  v0:= "closed" @kind object;
  #L42d564.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d56a.  throw v2;
}
