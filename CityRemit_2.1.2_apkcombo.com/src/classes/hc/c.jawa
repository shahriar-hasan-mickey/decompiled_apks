record `hc.c` @kind class @AccessFlag PUBLIC_FINAL {
}
global `byte`[] `@@hc.c.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String`[] `@@hc.c.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `gc.a0` `@@hc.c.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.nio.charset.Charset` `@@hc.c.d` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.TimeZone` `@@hc.c.e` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.Comparator` `@@hc.c.f` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.reflect.Method` `@@hc.c.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@hc.c.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lhc/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L346bc8.  v0:= 0I;
  #L346bca.  v1:= new `byte`[v0];
  #L346bce.  `@@hc.c.a` @type ^`byte`[] := v1 @kind object;
  #L346bd2.  v2:= new `java.lang.String`[v0];
  #L346bd6.  `@@hc.c.b` @type ^`java.lang.String`[] := v2 @kind object;
  #L346bda.  v2:= 0I;
  #L346bdc.  call temp:= `e`(v2, v1) @signature `Lgc/a0;.e:(Lgc/t;[B)Lgc/a0;` @kind static;
  #L346be2.  v3:= temp @kind object;
  #L346be4.  `@@hc.c.c` @type ^`gc.a0` := v3 @kind object;
  #L346be8.  call temp:= `c`(v2, v1) @signature `Lgc/y;.c:(Lgc/t;[B)Lgc/y;` @kind static;
  #L346bee.  v1:= "efbbbf" @kind object;
  #L346bf2.  call temp:= `h`(v1) @signature `Lqc/f;.h:(Ljava/lang/String;)Lqc/f;` @kind static;
  #L346bf8.  v1:= "feff" @kind object;
  #L346bfc.  call temp:= `h`(v1) @signature `Lqc/f;.h:(Ljava/lang/String;)Lqc/f;` @kind static;
  #L346c02.  v1:= "fffe" @kind object;
  #L346c06.  call temp:= `h`(v1) @signature `Lqc/f;.h:(Ljava/lang/String;)Lqc/f;` @kind static;
  #L346c0c.  v1:= "0000ffff" @kind object;
  #L346c10.  call temp:= `h`(v1) @signature `Lqc/f;.h:(Ljava/lang/String;)Lqc/f;` @kind static;
  #L346c16.  v1:= "ffff0000" @kind object;
  #L346c1a.  call temp:= `h`(v1) @signature `Lqc/f;.h:(Ljava/lang/String;)Lqc/f;` @kind static;
  #L346c20.  v1:= "UTF-8" @kind object;
  #L346c24.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L346c2a.  v1:= temp @kind object;
  #L346c2c.  `@@hc.c.d` @type ^`java.nio.charset.Charset` := v1 @kind object;
  #L346c30.  v1:= "ISO-8859-1" @kind object;
  #L346c34.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L346c3a.  v1:= "UTF-16BE" @kind object;
  #L346c3e.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L346c44.  v1:= "UTF-16LE" @kind object;
  #L346c48.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L346c4e.  v1:= "UTF-32BE" @kind object;
  #L346c52.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L346c58.  v1:= "UTF-32LE" @kind object;
  #L346c5c.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L346c62.  v1:= "GMT" @kind object;
  #L346c66.  call temp:= `getTimeZone`(v1) @signature `Ljava/util/TimeZone;.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;` @kind static;
  #L346c6c.  v1:= temp @kind object;
  #L346c6e.  `@@hc.c.e` @type ^`java.util.TimeZone` := v1 @kind object;
  #L346c72.  v1:= new `hc.c$a`;
  #L346c76.  call `<init>`(v1) @signature `Lhc/c$a;.<init>:()V` @kind direct;
  #L346c7c.  `@@hc.c.f` @type ^`java.util.Comparator` := v1 @kind object;
  #L346c80.  v1:= constclass @type ^`java.lang.Throwable` @kind object;
  #L346c84.  v3:= "addSuppressed" @kind object;
  #L346c88.  v4:= 1I;
  #L346c8a.  v4:= new `java.lang.Class`[v4];
  #L346c8e.  v5:= constclass @type ^`java.lang.Throwable` @kind object;
  #L346c92.  v4[v0]:= v5 @kind object;
  #L346c96.  call temp:= `getDeclaredMethod`(v1, v3, v4) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L346c9c.  v2:= temp @kind object;
  #L346c9e.  `@@hc.c.g` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L346ca2.  v0:= "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)" @kind object;
  #L346ca6.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L346cac.  v0:= temp @kind object;
  #L346cae.  `@@hc.c.h` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L346cb2.  return @kind void;
  catch `java.lang.Exception` @[L346c80..L346c9e] goto L346c9e;
}
procedure `javax.net.ssl.X509TrustManager` `A`() @signature `Lhc/c;.A:()Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L346b20.  call temp:= `getDefaultAlgorithm`() @signature `Ljavax/net/ssl/TrustManagerFactory;.getDefaultAlgorithm:()Ljava/lang/String;` @kind static;
  #L346b26.  v0:= temp @kind object;
  #L346b28.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/TrustManagerFactory;` @kind static;
  #L346b2e.  v0:= temp @kind object;
  #L346b30.  v1:= 0I;
  #L346b32.  call `init`(v0, v1) @signature `Ljavax/net/ssl/TrustManagerFactory;.init:(Ljava/security/KeyStore;)V` @kind virtual;
  #L346b38.  call temp:= `getTrustManagers`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getTrustManagers:()[Ljavax/net/ssl/TrustManager;` @kind virtual;
  #L346b3e.  v0:= temp @kind object;
  #L346b40.  v1:= length @variable v0;
  #L346b42.  v2:= 1I;
  #L346b44.  if v1 != v2 then goto L346b60;
  #L346b48.  v1:= 0I;
  #L346b4a.  v2:= v0[v1] @kind object;
  #L346b4e.  v2:= instanceof @variable v2 @type ^`javax.net.ssl.X509TrustManager` @kind boolean;
  #L346b52.  if v2 == 0 then goto L346b60;
  #L346b56.  v0:= v0[v1] @kind object;
  #L346b5a.  v0:= (`javax.net.ssl.X509TrustManager`) v0 @kind object;
  #L346b5e.  return v0 @kind object;
  #L346b60.  v1:= new `java.lang.IllegalStateException`;
  #L346b64.  v2:= new `java.lang.StringBuilder`;
  #L346b68.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L346b6e.  v3:= "Unexpected default trust managers:" @kind object;
  #L346b72.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L346b78.  call temp:= `toString`(v0) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L346b7e.  v0:= temp @kind object;
  #L346b80.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L346b86.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L346b8c.  v0:= temp @kind object;
  #L346b8e.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L346b94.  throw v1;
  #L346b96.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L346b98.  v1:= "No System TLS" @kind object;
  #L346b9c.  call temp:= `b`(v1, v0) @signature `Lhc/c;.b:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L346ba2.  v0:= temp @kind object;
  #L346ba4.  throw v0;
  catch `java.security.GeneralSecurityException` @[L346b20..L346b96] goto L346b96;
}
procedure `boolean` `B`(`qc.s` v11 @kind object, `int` v12 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lhc/c;.B:(Lqc/s;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L34620c.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L346212.  v0:= temp @kind wide;
  #L346214.  call temp:= `f`(v11) @signature `Lqc/s;.f:()Lqc/t;` @kind interface;
  #L34621a.  v2:= temp @kind object;
  #L34621c.  call temp:= `e`(v2) @signature `Lqc/t;.e:()Z` @kind virtual;
  #L346222.  v2:= temp;
  #L346224.  v3:= 9223372036854775807L;
  #L34622e.  if v2 == 0 then goto L346246;
  #L346232.  call temp:= `f`(v11) @signature `Lqc/s;.f:()Lqc/t;` @kind interface;
  #L346238.  v2:= temp @kind object;
  #L34623a.  call temp:= `c`(v2) @signature `Lqc/t;.c:()J` @kind virtual;
  #L346240.  v5:= temp @kind wide;
  #L346242.  v5:= v5 - v0 @kind long;
  #L346244.  goto L346248;
  #L346246.  v5:= v3 @kind wide;
  #L346248.  call temp:= `f`(v11) @signature `Lqc/s;.f:()Lqc/t;` @kind interface;
  #L34624e.  v2:= temp @kind object;
  #L346250.  v7:= (`long`) v12 @kind i2l;
  #L346252.  call temp:= `toNanos`(v13, v7) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L346258.  v12:= temp @kind wide;
  #L34625a.  call temp:= `min`(v5, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L346260.  v12:= temp @kind wide;
  #L346262.  v12:= v12 + v0 @kind long;
  #L346264.  call temp:= `d`(v2, v12) @signature `Lqc/t;.d:(J)Lqc/t;` @kind virtual;
  #L34626a.  v12:= new `qc.c`;
  #L34626e.  call `<init>`(v12) @signature `Lqc/c;.<init>:()V` @kind direct;
  #L346274.  v7:= 8192L;
  #L346278.  call temp:= `T`(v11, v12, v7) @signature `Lqc/s;.T:(Lqc/c;J)J` @kind interface;
  #L34627e.  v7:= temp @kind wide;
  #L346280.  v9:= -1L;
  #L346284.  v13:= lcmp(v7, v9);
  #L346288.  if v13 == 0 then goto L346294;
  #L34628c.  call `a`(v12) @signature `Lqc/c;.a:()V` @kind virtual;
  #L346292.  goto L346274;
  #L346294.  v12:= 1I;
  #L346296.  v13:= lcmp(v5, v3);
  #L34629a.  call temp:= `f`(v11) @signature `Lqc/s;.f:()Lqc/t;` @kind interface;
  #L3462a0.  v11:= temp @kind object;
  #L3462a2.  if v13 != 0 then goto L3462ae;
  #L3462a6.  call temp:= `a`(v11) @signature `Lqc/t;.a:()Lqc/t;` @kind virtual;
  #L3462ac.  goto L3462b6;
  #L3462ae.  v0:= v0 + v5 @kind long;
  #L3462b0.  call temp:= `d`(v11, v0) @signature `Lqc/t;.d:(J)Lqc/t;` @kind virtual;
  #L3462b6.  return v12;
  #L3462b8.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3462ba.  v13:= lcmp(v5, v3);
  #L3462be.  call temp:= `f`(v11) @signature `Lqc/s;.f:()Lqc/t;` @kind interface;
  #L3462c4.  v11:= temp @kind object;
  #L3462c6.  if v13 != 0 then goto L3462d2;
  #L3462ca.  call temp:= `a`(v11) @signature `Lqc/t;.a:()Lqc/t;` @kind virtual;
  #L3462d0.  goto L3462da;
  #L3462d2.  v0:= v0 + v5 @kind long;
  #L3462d4.  call temp:= `d`(v11, v0) @signature `Lqc/t;.d:(J)Lqc/t;` @kind virtual;
  #L3462da.  throw v12;
  #L3462dc.  
  #L3462de.  v12:= 0I;
  #L3462e0.  v13:= lcmp(v5, v3);
  #L3462e4.  call temp:= `f`(v11) @signature `Lqc/s;.f:()Lqc/t;` @kind interface;
  #L3462ea.  v11:= temp @kind object;
  #L3462ec.  if v13 != 0 then goto L3462f8;
  #L3462f0.  call temp:= `a`(v11) @signature `Lqc/t;.a:()Lqc/t;` @kind virtual;
  #L3462f6.  goto L346300;
  #L3462f8.  v0:= v0 + v5 @kind long;
  #L3462fa.  call temp:= `d`(v11, v0) @signature `Lqc/t;.d:(J)Lqc/t;` @kind virtual;
  #L346300.  return v12;
  catch `java.io.InterruptedIOException` @[L34626a..L346292] goto L3462dc;
  catch `java.lang.Throwable` @[L34626a..L346292] goto L3462b8;
}
procedure `int` `C`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lhc/c;.C:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3464e0.  if v3 >= v4 then goto L34651c;
  #L3464e4.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3464ea.  v0:= temp;
  #L3464ec.  v1:= 9I;
  #L3464f0.  if v0 == v1 then goto L346516;
  #L3464f4.  v1:= 10I;
  #L3464f8.  if v0 == v1 then goto L346516;
  #L3464fc.  v1:= 12I;
  #L346500.  if v0 == v1 then goto L346516;
  #L346504.  v1:= 13I;
  #L346508.  if v0 == v1 then goto L346516;
  #L34650c.  v1:= 32I;
  #L346510.  if v0 == v1 then goto L346516;
  #L346514.  return v3;
  #L346516.  v3:= v3 + 1;
  #L34651a.  goto L3464e0;
  #L34651c.  return v4;
}
procedure `int` `D`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lhc/c;.D:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L346530.  v4:= v4 + -1;
  #L346534.  if v4 < v3 then goto L346574;
  #L346538.  call temp:= `charAt`(v2, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L34653e.  v0:= temp;
  #L346540.  v1:= 9I;
  #L346544.  if v0 == v1 then goto L34656e;
  #L346548.  v1:= 10I;
  #L34654c.  if v0 == v1 then goto L34656e;
  #L346550.  v1:= 12I;
  #L346554.  if v0 == v1 then goto L34656e;
  #L346558.  v1:= 13I;
  #L34655c.  if v0 == v1 then goto L34656e;
  #L346560.  v1:= 32I;
  #L346564.  if v0 == v1 then goto L34656e;
  #L346568.  v4:= v4 + 1;
  #L34656c.  return v4;
  #L34656e.  v4:= v4 + -1;
  #L346572.  goto L346534;
  #L346574.  return v3;
}
procedure `java.util.concurrent.ThreadFactory` `E`(`java.lang.String` v1 @kind object, `boolean` v2 ) @signature `Lhc/c;.E:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L346b04.  v0:= new `hc.c$b`;
  #L346b08.  call `<init>`(v0, v1, v2) @signature `Lhc/c$b;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L346b0e.  return v0 @kind object;
}
procedure `gc.q` `F`(`java.util.List` v4 @kind object) @signature `Lhc/c;.F:(Ljava/util/List;)Lgc/q;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L34634c.  v0:= new `gc.q$a`;
  #L346350.  call `<init>`(v0) @signature `Lgc/q$a;.<init>:()V` @kind direct;
  #L346356.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L34635c.  v4:= temp @kind object;
  #L34635e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L346364.  v1:= temp;
  #L346366.  if v1 == 0 then goto L34639a;
  #L34636a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L346370.  v1:= temp @kind object;
  #L346372.  v1:= (`mc.c`) v1 @kind object;
  #L346376.  v2:= `@@hc.a.a` @type ^`hc.a` @kind object;
  #L34637a.  v3:= v1.`mc.c.a` @type ^`qc.f` @kind object;
  #L34637e.  call temp:= `P`(v3) @signature `Lqc/f;.P:()Ljava/lang/String;` @kind virtual;
  #L346384.  v3:= temp @kind object;
  #L346386.  v1:= v1.`mc.c.b` @type ^`qc.f` @kind object;
  #L34638a.  call temp:= `P`(v1) @signature `Lqc/f;.P:()Ljava/lang/String;` @kind virtual;
  #L346390.  v1:= temp @kind object;
  #L346392.  call `b`(v2, v0, v3, v1) @signature `Lhc/a;.b:(Lgc/q$a;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L346398.  goto L34635e;
  #L34639a.  call temp:= `d`(v0) @signature `Lgc/q$a;.d:()Lgc/q;` @kind virtual;
  #L3463a0.  v4:= temp @kind object;
  #L3463a2.  return v4 @kind object;
}
procedure `java.lang.String` `G`(`java.lang.String` v0 @kind object, `int` v1 , `int` v2 ) @signature `Lhc/c;.G:(Ljava/lang/String;II)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L34685c.  call temp:= `C`(v0, v1, v2) @signature `Lhc/c;.C:(Ljava/lang/String;II)I` @kind static;
  #L346862.  v1:= temp;
  #L346864.  call temp:= `D`(v0, v1, v2) @signature `Lhc/c;.D:(Ljava/lang/String;II)I` @kind static;
  #L34686a.  v2:= temp;
  #L34686c.  call temp:= `substring`(v0, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L346872.  v0:= temp @kind object;
  #L346874.  return v0 @kind object;
}
procedure `boolean` `H`(`java.lang.String` v1 @kind object) @signature `Lhc/c;.H:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L346324.  v0:= `@@hc.c.h` @type ^`java.util.regex.Pattern` @kind object;
  #L346328.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L34632e.  v1:= temp @kind object;
  #L346330.  call temp:= `matches`(v1) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L346336.  v1:= temp;
  #L346338.  return v1;
}
procedure `void` `a`(`java.lang.Throwable` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lhc/c;.a:(Ljava/lang/Throwable;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L346cd4.  v0:= `@@hc.c.g` @type ^`java.lang.reflect.Method` @kind object;
  #L346cd8.  if v0 == 0 then goto L346cee;
  #L346cdc.  v1:= 1I;
  #L346cde.  v1:= new `java.lang.Object`[v1];
  #L346ce2.  v2:= 0I;
  #L346ce4.  v1[v2]:= v4 @kind object;
  #L346ce8.  call temp:= `invoke`(v0, v3, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L346cee.  return @kind void;
  catch `java.lang.reflect.InvocationTargetException` @[L346cde..L346cee] goto L346cee;
  catch `java.lang.IllegalAccessException` @[L346cde..L346cee] goto L346cee;
}
procedure `java.lang.AssertionError` `b`(`java.lang.String` v1 @kind object, `java.lang.Exception` v2 @kind object) @signature `Lhc/c;.b:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L346588.  v0:= new `java.lang.AssertionError`;
  #L34658c.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L346592.  call temp:= `initCause`(v0, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L346598.  return v0 @kind object;
  catch `java.lang.IllegalStateException` @[L346592..L346598] goto L346598;
}
procedure `java.lang.String` `c`(`java.lang.String` v3 @kind object) @signature `Lhc/c;.c:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3465bc.  v0:= ":" @kind object;
  #L3465c0.  call temp:= `contains`(v3, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L3465c6.  v0:= temp;
  #L3465c8.  v1:= 0I;
  #L3465ca.  if v0 == 0 then goto L346670;
  #L3465ce.  v0:= "[" @kind object;
  #L3465d2.  call temp:= `startsWith`(v3, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3465d8.  v0:= temp;
  #L3465da.  if v0 == 0 then goto L346604;
  #L3465de.  v0:= "]" @kind object;
  #L3465e2.  call temp:= `endsWith`(v3, v0) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3465e8.  v0:= temp;
  #L3465ea.  if v0 == 0 then goto L346604;
  #L3465ee.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3465f4.  v0:= temp;
  #L3465f6.  v2:= 1I;
  #L3465f8.  v0:= v0 - v2 @kind int;
  #L3465fa.  call temp:= `k`(v3, v2, v0) @signature `Lhc/c;.k:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L346600.  v0:= temp @kind object;
  #L346602.  goto L346616;
  #L346604.  v0:= 0I;
  #L346606.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L34660c.  v2:= temp;
  #L34660e.  call temp:= `k`(v3, v0, v2) @signature `Lhc/c;.k:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L346614.  v0:= temp @kind object;
  #L346616.  if v0 != 0 then goto L34661c;
  #L34661a.  return v1 @kind object;
  #L34661c.  call temp:= `getAddress`(v0) @signature `Ljava/net/InetAddress;.getAddress:()[B` @kind virtual;
  #L346622.  v0:= temp @kind object;
  #L346624.  v1:= length @variable v0;
  #L346626.  v2:= 16I;
  #L34662a.  if v1 != v2 then goto L346638;
  #L34662e.  call temp:= `w`(v0) @signature `Lhc/c;.w:([B)Ljava/lang/String;` @kind static;
  #L346634.  v3:= temp @kind object;
  #L346636.  return v3 @kind object;
  #L346638.  v0:= new `java.lang.AssertionError`;
  #L34663c.  v1:= new `java.lang.StringBuilder`;
  #L346640.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L346646.  v2:= "Invalid IPv6 address: '" @kind object;
  #L34664a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L346650.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L346656.  v3:= "'" @kind object;
  #L34665a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L346660.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L346666.  v3:= temp @kind object;
  #L346668.  call `<init>`(v0, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L34666e.  throw v0;
  #L346670.  call temp:= `toASCII`(v3) @signature `Ljava/net/IDN;.toASCII:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L346676.  v3:= temp @kind object;
  #L346678.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L34667c.  call temp:= `toLowerCase`(v3, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L346682.  v3:= temp @kind object;
  #L346684.  call temp:= `isEmpty`(v3) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L34668a.  v0:= temp;
  #L34668c.  if v0 == 0 then goto L346692;
  #L346690.  return v1 @kind object;
  #L346692.  call temp:= `h`(v3) @signature `Lhc/c;.h:(Ljava/lang/String;)Z` @kind static;
  #L346698.  v0:= temp;
  #L34669a.  if v0 == 0 then goto L3466a0;
  #L34669e.  return v1 @kind object;
  #L3466a0.  return v3 @kind object;
  #L3466a2.  return v1 @kind object;
  catch `java.lang.IllegalArgumentException` @[L346670..L34669a] goto L3466a2;
}
procedure `void` `d`(`long` v5 , `long` v7 , `long` v9 ) @signature `Lhc/c;.d:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L346d10.  v0:= v7 ^| v9 @kind long;
  #L346d14.  v2:= 0L;
  #L346d18.  v4:= lcmp(v0, v2);
  #L346d1c.  if v4 < 0 then goto L346d34;
  #L346d20.  v0:= lcmp(v7, v5);
  #L346d24.  if v0 > 0 then goto L346d34;
  #L346d28.  v5:= v5 - v7 @kind long;
  #L346d2a.  v7:= lcmp(v5, v9);
  #L346d2e.  if v7 < 0 then goto L346d34;
  #L346d32.  return @kind void;
  #L346d34.  v5:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L346d38.  call `<init>`(v5) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L346d3e.  throw v5;
}
procedure `void` `e`(`java.io.Closeable` v0 @kind object) @signature `Lhc/c;.e:(Ljava/io/Closeable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L346d50.  if v0 == 0 then goto L346d60;
  #L346d54.  call `close`(v0) @signature `Ljava/io/Closeable;.close:()V` @kind interface;
  #L346d5a.  goto L346d60;
  #L346d5c.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L346d5e.  throw v0;
  #L346d60.  return @kind void;
  catch `java.lang.RuntimeException` @[L346d54..L346d5a] goto L346d5c;
  catch `java.lang.Exception` @[L346d54..L346d5a] goto L346d60;
}
procedure `void` `f`(`java.net.Socket` v2 @kind object) @signature `Lhc/c;.f:(Ljava/net/Socket;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L346d84.  if v2 == 0 then goto L346dc0;
  #L346d88.  call `close`(v2) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #L346d8e.  goto L346dc0;
  #L346d90.  v2:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L346d92.  call temp:= `getMessage`(v2) @signature `Ljava/lang/RuntimeException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L346d98.  v0:= temp @kind object;
  #L346d9a.  v1:= "bio == null" @kind object;
  #L346d9e.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L346da4.  v0:= temp;
  #L346da6.  if v0 == 0 then goto L346dac;
  #L346daa.  return @kind void;
  #L346dac.  throw v2;
  #L346dae.  v2:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L346db0.  call temp:= `y`(v2) @signature `Lhc/c;.y:(Ljava/lang/AssertionError;)Z` @kind static;
  #L346db6.  v0:= temp;
  #L346db8.  if v0 == 0 then goto L346dbe;
  #L346dbc.  goto L346dc0;
  #L346dbe.  throw v2;
  #L346dc0.  return @kind void;
  catch `java.lang.AssertionError` @[L346d88..L346d8e] goto L346dae;
  catch `java.lang.RuntimeException` @[L346d88..L346d8e] goto L346d90;
  catch `java.lang.Exception` @[L346d88..L346d8e] goto L346dc0;
}
procedure `java.lang.String`[] `g`(`java.lang.String`[] v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lhc/c;.g:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L346888.  v0:= length @variable v4;
  #L34688a.  v0:= v0 + 1;
  #L34688e.  v1:= new `java.lang.String`[v0];
  #L346892.  v2:= length @variable v4;
  #L346894.  v3:= 0I;
  #L346896.  call `arraycopy`(v4, v3, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L34689c.  v0:= v0 + -1;
  #L3468a0.  v1[v0]:= v5 @kind object;
  #L3468a4.  return v1 @kind object;
}
procedure `boolean` `h`(`java.lang.String` v5 @kind object) @signature `Lhc/c;.h:(Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L346000.  v0:= 0I;
  #L346002.  v1:= 0I;
  #L346004.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L34600a.  v2:= temp;
  #L34600c.  if v1 >= v2 then goto L346048;
  #L346010.  call temp:= `charAt`(v5, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L346016.  v2:= temp;
  #L346018.  v3:= 31I;
  #L34601c.  v4:= 1I;
  #L34601e.  if v2 <= v3 then goto L346046;
  #L346022.  v3:= 127I;
  #L346026.  if v2 < v3 then goto L34602c;
  #L34602a.  goto L346046;
  #L34602c.  v3:= " #%/:?@[\\]" @kind object;
  #L346030.  call temp:= `indexOf`(v3, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L346036.  v2:= temp;
  #L346038.  v3:= -1I;
  #L34603a.  if v2 == v3 then goto L346040;
  #L34603e.  return v4;
  #L346040.  v1:= v1 + 1;
  #L346044.  goto L346004;
  #L346046.  return v4;
  #L346048.  return v0;
}
procedure `int` `i`(`char` v2 ) @signature `Lhc/c;.i:(C)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3463b4.  v0:= 48I;
  #L3463b8.  if v2 < v0 then goto L3463c8;
  #L3463bc.  v1:= 57I;
  #L3463c0.  if v2 > v1 then goto L3463c8;
  #L3463c4.  v2:= v2 - v0 @kind int;
  #L3463c6.  return v2;
  #L3463c8.  v0:= 97I;
  #L3463cc.  if v2 < v0 then goto L3463e0;
  #L3463d0.  v1:= 102I;
  #L3463d4.  if v2 > v1 then goto L3463e0;
  #L3463d8.  v2:= v2 - v0 @kind int;
  #L3463da.  v2:= v2 + 10;
  #L3463de.  return v2;
  #L3463e0.  v0:= 65I;
  #L3463e4.  if v2 < v0 then goto L3463f2;
  #L3463e8.  v1:= 70I;
  #L3463ec.  if v2 > v1 then goto L3463f2;
  #L3463f0.  goto L3463d8;
  #L3463f2.  v2:= -1I;
  #L3463f4.  return v2;
}
procedure `boolean` `j`(`java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `byte`[] v10 @kind object, `int` v11 ) @signature `Lhc/c;.j:(Ljava/lang/String;II[BI)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L34605c.  v0:= v11;
  #L34605e.  v1:= 0I;
  #L346060.  if v8 >= v9 then goto L3460e4;
  #L346064.  v2:= length @variable v10;
  #L346066.  if v0 != v2 then goto L34606c;
  #L34606a.  return v1;
  #L34606c.  if v0 == v11 then goto L346086;
  #L346070.  call temp:= `charAt`(v7, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L346076.  v2:= temp;
  #L346078.  v3:= 46I;
  #L34607c.  if v2 == v3 then goto L346082;
  #L346080.  return v1;
  #L346082.  v8:= v8 + 1;
  #L346086.  v2:= v8;
  #L346088.  v3:= 0I;
  #L34608a.  if v2 >= v9 then goto L3460ca;
  #L34608e.  call temp:= `charAt`(v7, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L346094.  v4:= temp;
  #L346096.  v5:= 48I;
  #L34609a.  if v4 < v5 then goto L3460ca;
  #L34609e.  v6:= 57I;
  #L3460a2.  if v4 <= v6 then goto L3460a8;
  #L3460a6.  goto L3460ca;
  #L3460a8.  if v3 != 0 then goto L3460b2;
  #L3460ac.  if v8 == v2 then goto L3460b2;
  #L3460b0.  return v1;
  #L3460b2.  v3:= v3 * 10;
  #L3460b6.  v3:= v3 + v4 @kind int;
  #L3460b8.  v3:= v3 - v5 @kind int;
  #L3460ba.  v4:= 255I;
  #L3460be.  if v3 <= v4 then goto L3460c4;
  #L3460c2.  return v1;
  #L3460c4.  v2:= v2 + 1;
  #L3460c8.  goto L34608a;
  #L3460ca.  v8:= v2 - v8 @kind int;
  #L3460ce.  if v8 != 0 then goto L3460d4;
  #L3460d2.  return v1;
  #L3460d4.  v8:= v0 + 1;
  #L3460d8.  v1:= (`byte`) v3 @kind i2b;
  #L3460da.  v10[v0]:= v1 @kind byte;
  #L3460de.  v0:= v8;
  #L3460e0.  v8:= v2;
  #L3460e2.  goto L34605e;
  #L3460e4.  v11:= v11 + 4;
  #L3460e8.  if v0 == v11 then goto L3460ee;
  #L3460ec.  return v1;
  #L3460ee.  v7:= 1I;
  #L3460f0.  return v7;
}
procedure `java.net.InetAddress` `k`(`java.lang.String` v11 @kind object, `int` v12 , `int` v13 ) @signature `Lhc/c;.k:(Ljava/lang/String;II)Ljava/net/InetAddress;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L346928.  v0:= 16I;
  #L34692c.  v1:= new `byte`[v0];
  #L346930.  v2:= -1I;
  #L346932.  v3:= 0I;
  #L346934.  v4:= 0I;
  #L346936.  v5:= -1I;
  #L346938.  v6:= -1I;
  #L34693a.  v7:= 0I;
  #L34693c.  if v12 >= v13 then goto L346a1c;
  #L346940.  if v4 != v0 then goto L346946;
  #L346944.  return v7 @kind object;
  #L346946.  v8:= v12 + 2;
  #L34694a.  if v8 > v13 then goto L346976;
  #L34694e.  v9:= "::" @kind object;
  #L346952.  v10:= 2I;
  #L346954.  call temp:= `regionMatches`(v11, v12, v9, v3, v10) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L34695a.  v9:= temp;
  #L34695c.  if v9 == 0 then goto L346976;
  #L346960.  if v5 == v2 then goto L346966;
  #L346964.  return v7 @kind object;
  #L346966.  v4:= v4 + 2;
  #L34696a.  v5:= v4;
  #L34696c.  if v8 != v13 then goto L346972;
  #L346970.  goto L346a1c;
  #L346972.  v6:= v8;
  #L346974.  goto L3469be;
  #L346976.  if v4 == 0 then goto L3469bc;
  #L34697a.  v8:= ":" @kind object;
  #L34697e.  v9:= 1I;
  #L346980.  call temp:= `regionMatches`(v11, v12, v8, v3, v9) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L346986.  v8:= temp;
  #L346988.  if v8 == 0 then goto L346992;
  #L34698c.  v12:= v12 + 1;
  #L346990.  goto L3469bc;
  #L346992.  v8:= "." @kind object;
  #L346996.  call temp:= `regionMatches`(v11, v12, v8, v3, v9) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L34699c.  v12:= temp;
  #L34699e.  if v12 == 0 then goto L3469ba;
  #L3469a2.  v12:= v4 + -2;
  #L3469a6.  call temp:= `j`(v11, v6, v13, v1, v12) @signature `Lhc/c;.j:(Ljava/lang/String;II[BI)Z` @kind static;
  #L3469ac.  v11:= temp;
  #L3469ae.  if v11 != 0 then goto L3469b4;
  #L3469b2.  return v7 @kind object;
  #L3469b4.  v4:= v4 + 2;
  #L3469b8.  goto L346a1c;
  #L3469ba.  return v7 @kind object;
  #L3469bc.  v6:= v12;
  #L3469be.  v12:= v6;
  #L3469c0.  v8:= 0I;
  #L3469c2.  if v12 >= v13 then goto L3469e8;
  #L3469c6.  call temp:= `charAt`(v11, v12) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3469cc.  v9:= temp;
  #L3469ce.  call temp:= `i`(v9) @signature `Lhc/c;.i:(C)I` @kind static;
  #L3469d4.  v9:= temp;
  #L3469d6.  if v9 != v2 then goto L3469dc;
  #L3469da.  goto L3469e8;
  #L3469dc.  v8:= v8 ^< 4;
  #L3469e0.  v8:= v8 + v9 @kind int;
  #L3469e2.  v12:= v12 + 1;
  #L3469e6.  goto L3469c2;
  #L3469e8.  v9:= v12 - v6 @kind int;
  #L3469ec.  if v9 == 0 then goto L346a1a;
  #L3469f0.  v10:= 4I;
  #L3469f2.  if v9 <= v10 then goto L3469f8;
  #L3469f6.  goto L346a1a;
  #L3469f8.  v7:= v4 + 1;
  #L3469fc.  v9:= v8 ^>> 8;
  #L346a00.  v9:= v9 ^& 255;
  #L346a04.  v9:= (`byte`) v9 @kind i2b;
  #L346a06.  v1[v4]:= v9 @kind byte;
  #L346a0a.  v4:= v7 + 1;
  #L346a0e.  v8:= v8 ^& 255;
  #L346a12.  v8:= (`byte`) v8 @kind i2b;
  #L346a14.  v1[v7]:= v8 @kind byte;
  #L346a18.  goto L34693a;
  #L346a1a.  return v7 @kind object;
  #L346a1c.  if v4 == v0 then goto L346a3e;
  #L346a20.  if v5 != v2 then goto L346a26;
  #L346a24.  return v7 @kind object;
  #L346a26.  v11:= v4 - v5 @kind int;
  #L346a2a.  v12:= v11 - 16;
  #L346a2e.  call `arraycopy`(v1, v5, v1, v12, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L346a34.  v0:= v0 - v4 @kind int;
  #L346a36.  v0:= v0 + v5 @kind int;
  #L346a38.  call `fill`(v1, v5, v0, v3) @signature `Ljava/util/Arrays;.fill:([BIIB)V` @kind static;
  #L346a3e.  call temp:= `getByAddress`(v1) @signature `Ljava/net/InetAddress;.getByAddress:([B)Ljava/net/InetAddress;` @kind static;
  #L346a44.  v11:= temp @kind object;
  #L346a46.  return v11 @kind object;
  #L346a48.  v11:= new `java.lang.AssertionError`;
  #L346a4c.  call `<init>`(v11) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L346a52.  throw v11;
  catch `java.net.UnknownHostException` @[L346a3e..L346a46] goto L346a48;
}
procedure `int` `l`(`java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `char` v4 ) @signature `Lhc/c;.l:(Ljava/lang/String;IIC)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L346408.  if v2 >= v3 then goto L346420;
  #L34640c.  call temp:= `charAt`(v1, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L346412.  v0:= temp;
  #L346414.  if v0 != v4 then goto L34641a;
  #L346418.  return v2;
  #L34641a.  v2:= v2 + 1;
  #L34641e.  goto L346408;
  #L346420.  return v3;
}
procedure `int` `m`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.lang.String` v5 @kind object) @signature `Lhc/c;.m:(Ljava/lang/String;IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L346434.  if v3 >= v4 then goto L346456;
  #L346438.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L34643e.  v0:= temp;
  #L346440.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L346446.  v0:= temp;
  #L346448.  v1:= -1I;
  #L34644a.  if v0 == v1 then goto L346450;
  #L34644e.  return v3;
  #L346450.  v3:= v3 + 1;
  #L346454.  goto L346434;
  #L346456.  return v4;
}
procedure `boolean` `n`(`qc.s` v0 @kind object, `int` v1 , `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lhc/c;.n:(Lqc/s;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L346104.  call temp:= `B`(v0, v1, v2) @signature `Lhc/c;.B:(Lqc/s;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L34610a.  v0:= temp;
  #L34610c.  return v0;
  #L34610e.  v0:= 0I;
  #L346110.  return v0;
  catch `java.io.IOException` @[L346104..L34610c] goto L34610e;
}
procedure `boolean` `o`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lhc/c;.o:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L346134.  if v0 == v1 then goto L34614e;
  #L346138.  if v0 == 0 then goto L34614a;
  #L34613c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L346142.  v0:= temp;
  #L346144.  if v0 == 0 then goto L34614a;
  #L346148.  goto L34614e;
  #L34614a.  v0:= 0I;
  #L34614c.  goto L346150;
  #L34614e.  v0:= 1I;
  #L346150.  return v0;
}
procedure `java.lang.String` `p`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lhc/c;.p:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3466c4.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L3466c8.  call temp:= `format`(v0, v1, v2) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3466ce.  v1:= temp @kind object;
  #L3466d0.  return v1 @kind object;
}
procedure `java.lang.String` `q`(`gc.r` v3 @kind object, `boolean` v4 ) @signature `Lhc/c;.q:(Lgc/r;Z)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3466e4.  call temp:= `l`(v3) @signature `Lgc/r;.l:()Ljava/lang/String;` @kind virtual;
  #L3466ea.  v0:= temp @kind object;
  #L3466ec.  v1:= ":" @kind object;
  #L3466f0.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L3466f6.  v0:= temp;
  #L3466f8.  if v0 == 0 then goto L346732;
  #L3466fc.  v0:= new `java.lang.StringBuilder`;
  #L346700.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L346706.  v2:= "[" @kind object;
  #L34670a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L346710.  call temp:= `l`(v3) @signature `Lgc/r;.l:()Ljava/lang/String;` @kind virtual;
  #L346716.  v2:= temp @kind object;
  #L346718.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L34671e.  v2:= "]" @kind object;
  #L346722.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L346728.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L34672e.  v0:= temp @kind object;
  #L346730.  goto L34673a;
  #L346732.  call temp:= `l`(v3) @signature `Lgc/r;.l:()Ljava/lang/String;` @kind virtual;
  #L346738.  v0:= temp @kind object;
  #L34673a.  if v4 != 0 then goto L34675a;
  #L34673e.  call temp:= `w`(v3) @signature `Lgc/r;.w:()I` @kind virtual;
  #L346744.  v4:= temp;
  #L346746.  call temp:= `B`(v3) @signature `Lgc/r;.B:()Ljava/lang/String;` @kind virtual;
  #L34674c.  v2:= temp @kind object;
  #L34674e.  call temp:= `d`(v2) @signature `Lgc/r;.d:(Ljava/lang/String;)I` @kind static;
  #L346754.  v2:= temp;
  #L346756.  if v4 == v2 then goto L346786;
  #L34675a.  v4:= new `java.lang.StringBuilder`;
  #L34675e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L346764.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L34676a.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L346770.  call temp:= `w`(v3) @signature `Lgc/r;.w:()I` @kind virtual;
  #L346776.  v3:= temp;
  #L346778.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L34677e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L346784.  v0:= temp @kind object;
  #L346786.  return v0 @kind object;
}
procedure `java.util.List` `r`(`java.util.List` v1 @kind object) @signature `Lhc/c;.r:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L346aa4.  v0:= new `java.util.ArrayList`;
  #L346aa8.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L346aae.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L346ab4.  v1:= temp @kind object;
  #L346ab6.  return v1 @kind object;
}
procedure `java.util.List` `s`(`java.lang.Object`[] v0 @kind object) @signature `Lhc/c;.s:([Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L346a74.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L346a7a.  v0:= temp @kind object;
  #L346a7c.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L346a80.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L346a86.  v0:= temp @kind object;
  #L346a88.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L346a8e.  v0:= temp @kind object;
  #L346a90.  return v0 @kind object;
}
procedure `java.util.Map` `t`(`java.util.Map` v1 @kind object) @signature `Lhc/c;.t:(Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L346ac8.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L346ace.  v0:= temp;
  #L346ad0.  if v0 == 0 then goto L346ade;
  #L346ad4.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L346ada.  v1:= temp @kind object;
  #L346adc.  goto L346af0;
  #L346ade.  v0:= new `java.util.LinkedHashMap`;
  #L346ae2.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L346ae8.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L346aee.  v1:= temp @kind object;
  #L346af0.  return v1 @kind object;
}
procedure `int` `u`(`java.util.Comparator` v3 @kind object, `java.lang.String`[] v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lhc/c;.u:(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L346468.  v0:= length @variable v4;
  #L34646a.  v1:= 0I;
  #L34646c.  if v1 >= v0 then goto L346488;
  #L346470.  v2:= v4[v1] @kind object;
  #L346474.  call temp:= `compare`(v3, v2, v5) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L34647a.  v2:= temp;
  #L34647c.  if v2 != 0 then goto L346482;
  #L346480.  return v1;
  #L346482.  v1:= v1 + 1;
  #L346486.  goto L34646c;
  #L346488.  v3:= -1I;
  #L34648a.  return v3;
}
procedure `int` `v`(`java.lang.String` v4 @kind object) @signature `Lhc/c;.v:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L34649c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3464a2.  v0:= temp;
  #L3464a4.  v1:= 0I;
  #L3464a6.  if v1 >= v0 then goto L3464cc;
  #L3464aa.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3464b0.  v2:= temp;
  #L3464b2.  v3:= 31I;
  #L3464b6.  if v2 <= v3 then goto L3464ca;
  #L3464ba.  v3:= 127I;
  #L3464be.  if v2 < v3 then goto L3464c4;
  #L3464c2.  goto L3464ca;
  #L3464c4.  v1:= v1 + 1;
  #L3464c8.  goto L3464a6;
  #L3464ca.  return v1;
  #L3464cc.  v4:= -1I;
  #L3464ce.  return v4;
}
procedure `java.lang.String` `w`(`byte`[] v8 @kind object) @signature `Lhc/c;.w:([B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L346798.  v0:= 0I;
  #L34679a.  v1:= -1I;
  #L34679c.  v2:= 0I;
  #L34679e.  v3:= 0I;
  #L3467a0.  v4:= length @variable v8;
  #L3467a2.  v5:= 16I;
  #L3467a6.  if v2 >= v4 then goto L3467e2;
  #L3467aa.  v4:= v2;
  #L3467ac.  if v4 >= v5 then goto L3467ca;
  #L3467b0.  v6:= v8[v4] @kind byte;
  #L3467b4.  if v6 != 0 then goto L3467ca;
  #L3467b8.  v6:= v4 + 1;
  #L3467bc.  v6:= v8[v6] @kind byte;
  #L3467c0.  if v6 != 0 then goto L3467ca;
  #L3467c4.  v4:= v4 + 2;
  #L3467c8.  goto L3467ac;
  #L3467ca.  v5:= v4 - v2 @kind int;
  #L3467ce.  if v5 <= v3 then goto L3467dc;
  #L3467d2.  v6:= 4I;
  #L3467d4.  if v5 < v6 then goto L3467dc;
  #L3467d8.  v1:= v2;
  #L3467da.  v3:= v5;
  #L3467dc.  v2:= v4 + 2;
  #L3467e0.  goto L3467a0;
  #L3467e2.  v2:= new `qc.c`;
  #L3467e6.  call `<init>`(v2) @signature `Lqc/c;.<init>:()V` @kind direct;
  #L3467ec.  v4:= length @variable v8;
  #L3467ee.  if v0 >= v4 then goto L346840;
  #L3467f2.  v4:= 58I;
  #L3467f6.  if v0 != v1 then goto L34680e;
  #L3467fa.  call temp:= `p0`(v2, v4) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L346800.  v0:= v0 + v3 @kind int;
  #L346802.  if v0 != v5 then goto L3467ec;
  #L346806.  call temp:= `p0`(v2, v4) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L34680c.  goto L3467ec;
  #L34680e.  if v0 <= 0 then goto L346818;
  #L346812.  call temp:= `p0`(v2, v4) @signature `Lqc/c;.p0:(I)Lqc/c;` @kind virtual;
  #L346818.  v4:= v8[v0] @kind byte;
  #L34681c.  v4:= v4 ^& 255;
  #L346820.  v4:= v4 ^< 8;
  #L346824.  v6:= v0 + 1;
  #L346828.  v6:= v8[v6] @kind byte;
  #L34682c.  v6:= v6 ^& 255;
  #L346830.  v4:= v4 ^| v6 @kind int;
  #L346832.  v6:= (`long`) v4 @kind i2l;
  #L346834.  call temp:= `q0`(v2, v6) @signature `Lqc/c;.q0:(J)Lqc/c;` @kind virtual;
  #L34683a.  v0:= v0 + 2;
  #L34683e.  goto L3467ec;
  #L346840.  call temp:= `e0`(v2) @signature `Lqc/c;.e0:()Ljava/lang/String;` @kind virtual;
  #L346846.  v8:= temp @kind object;
  #L346848.  return v8 @kind object;
}
procedure `java.lang.String`[] `x`(`java.util.Comparator` v8 @kind object, `java.lang.String`[] v9 @kind object, `java.lang.String`[] v10 @kind object) @signature `Lhc/c;.x:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3468b8.  v0:= new `java.util.ArrayList`;
  #L3468bc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3468c2.  v1:= length @variable v9;
  #L3468c4.  v2:= 0I;
  #L3468c6.  v3:= 0I;
  #L3468c8.  if v3 >= v1 then goto L3468fc;
  #L3468cc.  v4:= v9[v3] @kind object;
  #L3468d0.  v5:= length @variable v10;
  #L3468d2.  v6:= 0I;
  #L3468d4.  if v6 >= v5 then goto L3468f6;
  #L3468d8.  v7:= v10[v6] @kind object;
  #L3468dc.  call temp:= `compare`(v8, v4, v7) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L3468e2.  v7:= temp;
  #L3468e4.  if v7 != 0 then goto L3468f0;
  #L3468e8.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3468ee.  goto L3468f6;
  #L3468f0.  v6:= v6 + 1;
  #L3468f4.  goto L3468d4;
  #L3468f6.  v3:= v3 + 1;
  #L3468fa.  goto L3468c8;
  #L3468fc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L346902.  v8:= temp;
  #L346904.  v8:= new `java.lang.String`[v8];
  #L346908.  call temp:= `toArray`(v0, v8) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L34690e.  v8:= temp @kind object;
  #L346910.  v8:= (`java.lang.String`[]) v8 @kind object;
  #L346914.  return v8 @kind object;
}
procedure `boolean` `y`(`java.lang.AssertionError` v1 @kind object) @signature `Lhc/c;.y:(Ljava/lang/AssertionError;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L346164.  call temp:= `getCause`(v1) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L34616a.  v0:= temp @kind object;
  #L34616c.  if v0 == 0 then goto L346198;
  #L346170.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L346176.  v0:= temp @kind object;
  #L346178.  if v0 == 0 then goto L346198;
  #L34617c.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L346182.  v1:= temp @kind object;
  #L346184.  v0:= "getsockname failed" @kind object;
  #L346188.  call temp:= `contains`(v1, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L34618e.  v1:= temp;
  #L346190.  if v1 == 0 then goto L346198;
  #L346194.  v1:= 1I;
  #L346196.  goto L34619a;
  #L346198.  v1:= 0I;
  #L34619a.  return v1;
}
procedure `boolean` `z`(`java.util.Comparator` v7 @kind object, `java.lang.String`[] v8 @kind object, `java.lang.String`[] v9 @kind object) @signature `Lhc/c;.z:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3461ac.  v0:= 0I;
  #L3461ae.  if v8 == 0 then goto L3461f8;
  #L3461b2.  if v9 == 0 then goto L3461f8;
  #L3461b6.  v1:= length @variable v8;
  #L3461b8.  if v1 == 0 then goto L3461f8;
  #L3461bc.  v1:= length @variable v9;
  #L3461be.  if v1 != 0 then goto L3461c4;
  #L3461c2.  goto L3461f8;
  #L3461c4.  v1:= length @variable v8;
  #L3461c6.  v2:= 0I;
  #L3461c8.  if v2 >= v1 then goto L3461f8;
  #L3461cc.  v3:= v8[v2] @kind object;
  #L3461d0.  v4:= length @variable v9;
  #L3461d2.  v5:= 0I;
  #L3461d4.  if v5 >= v4 then goto L3461f2;
  #L3461d8.  v6:= v9[v5] @kind object;
  #L3461dc.  call temp:= `compare`(v7, v3, v6) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L3461e2.  v6:= temp;
  #L3461e4.  if v6 != 0 then goto L3461ec;
  #L3461e8.  v7:= 1I;
  #L3461ea.  return v7;
  #L3461ec.  v5:= v5 + 1;
  #L3461f0.  goto L3461d4;
  #L3461f2.  v2:= v2 + 1;
  #L3461f6.  goto L3461c8;
  #L3461f8.  return v0;
}
