record `mb.g$a$a` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.l` @kind class, `tb.p` @kind interface {
}
global `mb.g$a$a` `@@mb.g$a$a.o` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lmb/g$a$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e5c14.  v0:= new `mb.g$a$a`;
  #L3e5c18.  call `<init>`(v0) @signature `Lmb/g$a$a;.<init>:()V` @kind direct;
  #L3e5c1e.  `@@mb.g$a$a.o` @type ^`mb.g$a$a` := v0 @kind object;
  #L3e5c22.  return @kind void;
}
procedure `void` `<init>`(`mb.g$a$a` v1 @kind this) @signature `Lmb/g$a$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3e5c34.  v0:= 2I;
  #L3e5c36.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/l;.<init>:(I)V` @kind direct;
  #L3e5c3c.  return @kind void;
}
procedure `mb.g` `a`(`mb.g$a$a` v3 @kind this, `mb.g` v4 @kind object, `mb.g$b` v5 @kind object) @signature `Lmb/g$a$a;.a:(Lmb/g;Lmb/g$b;)Lmb/g;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3e5b80.  v0:= "acc" @kind object;
  #L3e5b84.  call `e`(v4, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3e5b8a.  v0:= "element" @kind object;
  #L3e5b8e.  call `e`(v5, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3e5b94.  call temp:= `getKey`(v5) @signature `Lmb/g$b;.getKey:()Lmb/g$c;` @kind interface;
  #L3e5b9a.  v0:= temp @kind object;
  #L3e5b9c.  call temp:= `M`(v4, v0) @signature `Lmb/g;.M:(Lmb/g$c;)Lmb/g;` @kind interface;
  #L3e5ba2.  v4:= temp @kind object;
  #L3e5ba4.  v0:= `@@mb.h.o` @type ^`mb.h` @kind object;
  #L3e5ba8.  if v4 != v0 then goto L3e5bae;
  #L3e5bac.  goto L3e5c00;
  #L3e5bae.  v1:= `@@mb.e.n` @type ^`mb.e$b` @kind object;
  #L3e5bb2.  call temp:= `c`(v4, v1) @signature `Lmb/g;.c:(Lmb/g$c;)Lmb/g$b;` @kind interface;
  #L3e5bb8.  v2:= temp @kind object;
  #L3e5bba.  v2:= (`mb.e`) v2 @kind object;
  #L3e5bbe.  if v2 != 0 then goto L3e5bd0;
  #L3e5bc2.  v0:= new `mb.c`;
  #L3e5bc6.  call `<init>`(v0, v4, v5) @signature `Lmb/c;.<init>:(Lmb/g;Lmb/g$b;)V` @kind direct;
  #L3e5bcc.  v5:= v0 @kind object;
  #L3e5bce.  goto L3e5c00;
  #L3e5bd0.  call temp:= `M`(v4, v1) @signature `Lmb/g;.M:(Lmb/g$c;)Lmb/g;` @kind interface;
  #L3e5bd6.  v4:= temp @kind object;
  #L3e5bd8.  if v4 != v0 then goto L3e5bea;
  #L3e5bdc.  v4:= new `mb.c`;
  #L3e5be0.  call `<init>`(v4, v5, v2) @signature `Lmb/c;.<init>:(Lmb/g;Lmb/g$b;)V` @kind direct;
  #L3e5be6.  v5:= v4 @kind object;
  #L3e5be8.  goto L3e5c00;
  #L3e5bea.  v0:= new `mb.c`;
  #L3e5bee.  v1:= new `mb.c`;
  #L3e5bf2.  call `<init>`(v1, v4, v5) @signature `Lmb/c;.<init>:(Lmb/g;Lmb/g$b;)V` @kind direct;
  #L3e5bf8.  call `<init>`(v0, v1, v2) @signature `Lmb/c;.<init>:(Lmb/g;Lmb/g$b;)V` @kind direct;
  #L3e5bfe.  goto L3e5bcc;
  #L3e5c00.  return v5 @kind object;
}
procedure `java.lang.Object` `invoke`(`mb.g$a$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lmb/g$a$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3e5b5c.  v1:= (`mb.g`) v1 @kind object;
  #L3e5b60.  v2:= (`mb.g$b`) v2 @kind object;
  #L3e5b64.  call temp:= `a`(v0, v1, v2) @signature `Lmb/g$a$a;.a:(Lmb/g;Lmb/g$b;)Lmb/g;` @kind virtual;
  #L3e5b6a.  v1:= temp @kind object;
  #L3e5b6c.  return v1 @kind object;
}
