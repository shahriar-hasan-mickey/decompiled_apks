record `c5.e` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.InputStream` @kind class {
  `java.util.Enumeration` `c5.e.o` @AccessFlag PRIVATE_FINAL;
  `java.io.InputStream` `c5.e.p` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c5.e` v0 @kind this, `java.util.Enumeration` v1 @kind object) @signature `Lc5/e;.<init>:(Ljava/util/Enumeration;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1f69ac.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L1f69b2.  v0.`c5.e.o` @type ^`java.util.Enumeration` := v1 @kind object;
  #L1f69b6.  call `a`(v0) @signature `Lc5/e;.a:()V` @kind virtual;
  #L1f69bc.  return @kind void;
}
procedure `void` `a`(`c5.e` v2 @kind this) @signature `Lc5/e;.a:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L1f69fc.  v0:= v2.`c5.e.p` @type ^`java.io.InputStream` @kind object;
  #L1f6a00.  if v0 == 0 then goto L1f6a0a;
  #L1f6a04.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L1f6a0a.  v0:= v2.`c5.e.o` @type ^`java.util.Enumeration` @kind object;
  #L1f6a0e.  call temp:= `hasMoreElements`(v0) @signature `Ljava/util/Enumeration;.hasMoreElements:()Z` @kind interface;
  #L1f6a14.  v0:= temp;
  #L1f6a16.  if v0 == 0 then goto L1f6a3a;
  #L1f6a1a.  v0:= new `java.io.FileInputStream`;
  #L1f6a1e.  v1:= v2.`c5.e.o` @type ^`java.util.Enumeration` @kind object;
  #L1f6a22.  call temp:= `nextElement`(v1) @signature `Ljava/util/Enumeration;.nextElement:()Ljava/lang/Object;` @kind interface;
  #L1f6a28.  v1:= temp @kind object;
  #L1f6a2a.  v1:= (`java.io.File`) v1 @kind object;
  #L1f6a2e.  call `<init>`(v0, v1) @signature `Ljava/io/FileInputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L1f6a34.  v2.`c5.e.p` @type ^`java.io.InputStream` := v0 @kind object;
  #L1f6a38.  return @kind void;
  #L1f6a3a.  v0:= 0I;
  #L1f6a3c.  goto L1f6a34;
}
procedure `void` `close`(`c5.e` v1 @kind this) @signature `Lc5/e;.close:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1f69d0.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind super;
  #L1f69d6.  v0:= v1.`c5.e.p` @type ^`java.io.InputStream` @kind object;
  #L1f69da.  if v0 == 0 then goto L1f69ea;
  #L1f69de.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L1f69e4.  v0:= 0I;
  #L1f69e6.  v1.`c5.e.p` @type ^`java.io.InputStream` := v0 @kind object;
  #L1f69ea.  return @kind void;
}
procedure `int` `read`(`c5.e` v2 @kind this) @signature `Lc5/e;.read:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1f6910.  v0:= v2.`c5.e.p` @type ^`java.io.InputStream` @kind object;
  #L1f6914.  v1:= -1I;
  #L1f6916.  if v0 == 0 then goto L1f6930;
  #L1f691a.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L1f6920.  v0:= temp;
  #L1f6922.  if v0 == v1 then goto L1f6928;
  #L1f6926.  return v0;
  #L1f6928.  call `a`(v2) @signature `Lc5/e;.a:()V` @kind virtual;
  #L1f692e.  goto L1f6910;
  #L1f6930.  return v1;
}
procedure `int` `read`(`c5.e` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lc5/e;.read:([BII)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1f6944.  v0:= v2.`c5.e.p` @type ^`java.io.InputStream` @kind object;
  #L1f6948.  v1:= -1I;
  #L1f694a.  if v0 != 0 then goto L1f6950;
  #L1f694e.  return v1;
  #L1f6950.  call temp:= `requireNonNull`(v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1f6956.  if v4 < 0 then goto L1f6990;
  #L1f695a.  if v5 < 0 then goto L1f6990;
  #L1f695e.  v0:= length @variable v3;
  #L1f6960.  v0:= v0 - v4 @kind int;
  #L1f6962.  if v5 > v0 then goto L1f6990;
  #L1f6966.  if v5 == 0 then goto L1f698c;
  #L1f696a.  v0:= v2.`c5.e.p` @type ^`java.io.InputStream` @kind object;
  #L1f696e.  call temp:= `read`(v0, v3, v4, v5) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L1f6974.  v0:= temp;
  #L1f6976.  if v0 <= 0 then goto L1f697c;
  #L1f697a.  return v0;
  #L1f697c.  call `a`(v2) @signature `Lc5/e;.a:()V` @kind virtual;
  #L1f6982.  v0:= v2.`c5.e.p` @type ^`java.io.InputStream` @kind object;
  #L1f6986.  if v0 != 0 then goto L1f696a;
  #L1f698a.  return v1;
  #L1f698c.  v3:= 0I;
  #L1f698e.  return v3;
  #L1f6990.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L1f6994.  call `<init>`(v3) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L1f699a.  throw v3;
}
