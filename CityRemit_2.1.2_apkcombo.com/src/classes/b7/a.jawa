record `b7.a` @kind class @AccessFlag PUBLIC {
}
global `java.util.concurrent.ConcurrentMap` `@@b7.a.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb7/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1f2500.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L1f2504.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L1f250a.  `@@b7.a.a` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L1f250e.  return @kind void;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v0 @kind object) @signature `Lb7/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1f2274.  call temp:= `e`(v0) @signature `Lb7/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1f227a.  v0:= temp @kind object;
  #L1f227c.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`java.lang.Object` v0 @kind object) @signature `Lb7/a;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1f2290.  call temp:= `e`(v0) @signature `Lb7/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1f2296.  v0:= temp @kind object;
  #L1f2298.  return v0 @kind object;
}
procedure `java.util.Map` `c`(`java.util.Map` v1 @kind object) @signature `Lb7/a;.c:(Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f24d8.  call temp:= `e`(v1) @signature `Lb7/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1f24de.  v1:= temp @kind object;
  #L1f24e0.  v0:= instanceof @variable v1 @type ^`java.util.Map` @kind boolean;
  #L1f24e4.  call `f`(v0) @signature `La7/m;.f:(Z)V` @kind static;
  #L1f24ea.  v1:= (`java.util.Map`) v1 @kind object;
  #L1f24ee.  return v1 @kind object;
}
procedure `b7.a$a` `d`(`java.lang.Class` v2 @kind object) @signature `Lb7/a;.d:(Ljava/lang/Class;)Lb7/a$a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1f223c.  v0:= `@@b7.a.a` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L1f2240.  call temp:= `get`(v0, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f2246.  v1:= temp @kind object;
  #L1f2248.  v1:= (`b7.a$a`) v1 @kind object;
  #L1f224c.  if v1 != 0 then goto L1f2260;
  #L1f2250.  v1:= new `b7.a$a`;
  #L1f2254.  call `<init>`(v1, v2) @signature `Lb7/a$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1f225a.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f2260.  return v1 @kind object;
}
procedure `java.lang.Object` `e`(`java.lang.Object` v5 @kind object) @signature `Lb7/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f22ac.  if v5 != 0 then goto L1f22b4;
  #L1f22b0.  v5:= 0I;
  #L1f22b2.  return v5 @kind object;
  #L1f22b4.  v0:= instanceof @variable v5 @type ^`java.lang.Number` @kind boolean;
  #L1f22b8.  if v0 == 0 then goto L1f2366;
  #L1f22bc.  v0:= instanceof @variable v5 @type ^`java.lang.Float` @kind boolean;
  #L1f22c0.  if v0 != 0 then goto L1f2316;
  #L1f22c4.  v0:= instanceof @variable v5 @type ^`java.lang.Double` @kind boolean;
  #L1f22c8.  if v0 == 0 then goto L1f22ce;
  #L1f22cc.  goto L1f2316;
  #L1f22ce.  v0:= instanceof @variable v5 @type ^`java.lang.Long` @kind boolean;
  #L1f22d2.  if v0 != 0 then goto L1f2314;
  #L1f22d6.  v0:= instanceof @variable v5 @type ^`java.lang.Integer` @kind boolean;
  #L1f22da.  if v0 == 0 then goto L1f22e0;
  #L1f22de.  goto L1f2314;
  #L1f22e0.  v0:= new `s6.c`;
  #L1f22e4.  v1:= 1I;
  #L1f22e6.  v1:= new `java.lang.Object`[v1];
  #L1f22ea.  v2:= 0I;
  #L1f22ec.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1f22f2.  v5:= temp @kind object;
  #L1f22f4.  call temp:= `getSimpleName`(v5) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1f22fa.  v5:= temp @kind object;
  #L1f22fc.  v1[v2]:= v5 @kind object;
  #L1f2300.  v5:= "Numbers of type %s are not supported, please use an int, long, float or double" @kind object;
  #L1f2304.  call temp:= `format`(v5, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f230a.  v5:= temp @kind object;
  #L1f230c.  call `<init>`(v0, v5) @signature `Ls6/c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f2312.  throw v0;
  #L1f2314.  return v5 @kind object;
  #L1f2316.  v5:= (`java.lang.Number`) v5 @kind object;
  #L1f231a.  call temp:= `doubleValue`(v5) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L1f2320.  v0:= temp @kind wide;
  #L1f2322.  v2:= 9.223372036854776E18D;
  #L1f2326.  v4:= dcmpg(v0, v2);
  #L1f232a.  if v4 > 0 then goto L1f235c;
  #L1f232e.  v2:= -9.223372036854776E18D;
  #L1f2332.  v4:= dcmpl(v0, v2);
  #L1f2336.  if v4 < 0 then goto L1f235c;
  #L1f233a.  call temp:= `floor`(v0) @signature `Ljava/lang/Math;.floor:(D)D` @kind static;
  #L1f2340.  v2:= temp @kind wide;
  #L1f2342.  v4:= dcmpl(v2, v0);
  #L1f2346.  if v4 != 0 then goto L1f235c;
  #L1f234a.  call temp:= `longValue`(v5) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L1f2350.  v0:= temp @kind wide;
  #L1f2352.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1f2358.  v5:= temp @kind object;
  #L1f235a.  return v5 @kind object;
  #L1f235c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1f2362.  v5:= temp @kind object;
  #L1f2364.  return v5 @kind object;
  #L1f2366.  v0:= instanceof @variable v5 @type ^`java.lang.String` @kind boolean;
  #L1f236a.  if v0 == 0 then goto L1f2370;
  #L1f236e.  return v5 @kind object;
  #L1f2370.  v0:= instanceof @variable v5 @type ^`java.lang.Boolean` @kind boolean;
  #L1f2374.  if v0 == 0 then goto L1f237a;
  #L1f2378.  return v5 @kind object;
  #L1f237a.  v0:= instanceof @variable v5 @type ^`java.lang.Character` @kind boolean;
  #L1f237e.  if v0 != 0 then goto L1f24b6;
  #L1f2382.  v0:= instanceof @variable v5 @type ^`java.util.Map` @kind boolean;
  #L1f2386.  if v0 == 0 then goto L1f23fe;
  #L1f238a.  v0:= new `java.util.HashMap`;
  #L1f238e.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L1f2394.  v5:= (`java.util.Map`) v5 @kind object;
  #L1f2398.  call temp:= `entrySet`(v5) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L1f239e.  v5:= temp @kind object;
  #L1f23a0.  call temp:= `iterator`(v5) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f23a6.  v5:= temp @kind object;
  #L1f23a8.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f23ae.  v1:= temp;
  #L1f23b0.  if v1 == 0 then goto L1f23fc;
  #L1f23b4.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f23ba.  v1:= temp @kind object;
  #L1f23bc.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L1f23c0.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1f23c6.  v2:= temp @kind object;
  #L1f23c8.  v3:= instanceof @variable v2 @type ^`java.lang.String` @kind boolean;
  #L1f23cc.  if v3 == 0 then goto L1f23ec;
  #L1f23d0.  v2:= (`java.lang.String`) v2 @kind object;
  #L1f23d4.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1f23da.  v1:= temp @kind object;
  #L1f23dc.  call temp:= `e`(v1) @signature `Lb7/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1f23e2.  v1:= temp @kind object;
  #L1f23e4.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1f23ea.  goto L1f23a8;
  #L1f23ec.  v5:= new `s6.c`;
  #L1f23f0.  v0:= "Maps with non-string keys are not supported" @kind object;
  #L1f23f4.  call `<init>`(v5, v0) @signature `Ls6/c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f23fa.  throw v5;
  #L1f23fc.  return v0 @kind object;
  #L1f23fe.  v0:= instanceof @variable v5 @type ^`java.util.Collection` @kind boolean;
  #L1f2402.  if v0 == 0 then goto L1f2462;
  #L1f2406.  v0:= instanceof @variable v5 @type ^`java.util.List` @kind boolean;
  #L1f240a.  if v0 == 0 then goto L1f2452;
  #L1f240e.  v5:= (`java.util.List`) v5 @kind object;
  #L1f2412.  v0:= new `java.util.ArrayList`;
  #L1f2416.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1f241c.  v1:= temp;
  #L1f241e.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1f2424.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f242a.  v5:= temp @kind object;
  #L1f242c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f2432.  v1:= temp;
  #L1f2434.  if v1 == 0 then goto L1f2450;
  #L1f2438.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f243e.  v1:= temp @kind object;
  #L1f2440.  call temp:= `e`(v1) @signature `Lb7/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1f2446.  v1:= temp @kind object;
  #L1f2448.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f244e.  goto L1f242c;
  #L1f2450.  return v0 @kind object;
  #L1f2452.  v5:= new `s6.c`;
  #L1f2456.  v0:= "Serializing Collections is not supported, please use Lists instead" @kind object;
  #L1f245a.  call `<init>`(v5, v0) @signature `Ls6/c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f2460.  throw v5;
  #L1f2462.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1f2468.  v0:= temp @kind object;
  #L1f246a.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1f2470.  v0:= temp;
  #L1f2472.  if v0 != 0 then goto L1f24a6;
  #L1f2476.  v0:= instanceof @variable v5 @type ^`java.lang.Enum` @kind boolean;
  #L1f247a.  if v0 == 0 then goto L1f248c;
  #L1f247e.  v5:= (`java.lang.Enum`) v5 @kind object;
  #L1f2482.  call temp:= `name`(v5) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L1f2488.  v5:= temp @kind object;
  #L1f248a.  return v5 @kind object;
  #L1f248c.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1f2492.  v0:= temp @kind object;
  #L1f2494.  call temp:= `d`(v0) @signature `Lb7/a;.d:(Ljava/lang/Class;)Lb7/a$a;` @kind static;
  #L1f249a.  v0:= temp @kind object;
  #L1f249c.  call temp:= `f`(v0, v5) @signature `Lb7/a$a;.f:(Ljava/lang/Object;)Ljava/util/Map;` @kind virtual;
  #L1f24a2.  v5:= temp @kind object;
  #L1f24a4.  return v5 @kind object;
  #L1f24a6.  v5:= new `s6.c`;
  #L1f24aa.  v0:= "Serializing Arrays is not supported, please use Lists instead" @kind object;
  #L1f24ae.  call `<init>`(v5, v0) @signature `Ls6/c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f24b4.  throw v5;
  #L1f24b6.  v5:= new `s6.c`;
  #L1f24ba.  v0:= "Characters are not supported, please use Strings" @kind object;
  #L1f24be.  call `<init>`(v5, v0) @signature `Ls6/c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f24c4.  throw v5;
}
