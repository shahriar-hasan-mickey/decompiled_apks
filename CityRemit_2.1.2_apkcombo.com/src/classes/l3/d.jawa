record `l3.d` @kind class @AccessFlag FINAL extends `g3.g` @kind interface {
  `java.util.List` `l3.d.o` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `l3.d.p` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`l3.d` v0 @kind this, `java.util.List` v1 @kind object, `java.util.List` v2 @kind object) @signature `Ll3/d;.<init>:(Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3c3d38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c3d3e.  v0.`l3.d.o` @type ^`java.util.List` := v1 @kind object;
  #L3c3d42.  v0.`l3.d.p` @type ^`java.util.List` := v2 @kind object;
  #L3c3d46.  return @kind void;
}
procedure `int` `c`(`l3.d` v1 @kind this, `long` v2 ) @signature `Ll3/d;.c:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c3c58.  v0:= v1.`l3.d.p` @type ^`java.util.List` @kind object;
  #L3c3c5c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3c3c62.  v2:= temp @kind object;
  #L3c3c64.  v3:= 0I;
  #L3c3c66.  call temp:= `d`(v0, v2, v3, v3) @signature `Ls3/l0;.d:(Ljava/util/List;Ljava/lang/Comparable;ZZ)I` @kind static;
  #L3c3c6c.  v2:= temp;
  #L3c3c6e.  v3:= v1.`l3.d.p` @type ^`java.util.List` @kind object;
  #L3c3c72.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3c3c78.  v3:= temp;
  #L3c3c7a.  if v2 >= v3 then goto L3c3c80;
  #L3c3c7e.  goto L3c3c82;
  #L3c3c80.  v2:= -1I;
  #L3c3c82.  return v2;
}
procedure `long` `d`(`l3.d` v3 @kind this, `int` v4 ) @signature `Ll3/d;.d:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3c3ce0.  v0:= 1I;
  #L3c3ce2.  v1:= 0I;
  #L3c3ce4.  if v4 < 0 then goto L3c3cec;
  #L3c3ce8.  v2:= 1I;
  #L3c3cea.  goto L3c3cee;
  #L3c3cec.  v2:= 0I;
  #L3c3cee.  call `a`(v2) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L3c3cf4.  v2:= v3.`l3.d.p` @type ^`java.util.List` @kind object;
  #L3c3cf8.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3c3cfe.  v2:= temp;
  #L3c3d00.  if v4 >= v2 then goto L3c3d06;
  #L3c3d04.  goto L3c3d08;
  #L3c3d06.  v0:= 0I;
  #L3c3d08.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L3c3d0e.  v0:= v3.`l3.d.p` @type ^`java.util.List` @kind object;
  #L3c3d12.  call temp:= `get`(v0, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3c3d18.  v4:= temp @kind object;
  #L3c3d1a.  v4:= (`java.lang.Long`) v4 @kind object;
  #L3c3d1e.  call temp:= `longValue`(v4) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L3c3d24.  v0:= temp @kind wide;
  #L3c3d26.  return v0 @kind wide;
}
procedure `java.util.List` `e`(`l3.d` v2 @kind this, `long` v3 ) @signature `Ll3/d;.e:(J)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c3c94.  v0:= v2.`l3.d.p` @type ^`java.util.List` @kind object;
  #L3c3c98.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3c3c9e.  v3:= temp @kind object;
  #L3c3ca0.  v4:= 1I;
  #L3c3ca2.  v1:= 0I;
  #L3c3ca4.  call temp:= `f`(v0, v3, v4, v1) @signature `Ls3/l0;.f:(Ljava/util/List;Ljava/lang/Comparable;ZZ)I` @kind static;
  #L3c3caa.  v3:= temp;
  #L3c3cac.  v4:= -1I;
  #L3c3cae.  if v3 != v4 then goto L3c3cbc;
  #L3c3cb2.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L3c3cb8.  v3:= temp @kind object;
  #L3c3cba.  return v3 @kind object;
  #L3c3cbc.  v4:= v2.`l3.d.o` @type ^`java.util.List` @kind object;
  #L3c3cc0.  call temp:= `get`(v4, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3c3cc6.  v3:= temp @kind object;
  #L3c3cc8.  v3:= (`java.util.List`) v3 @kind object;
  #L3c3ccc.  return v3 @kind object;
}
procedure `int` `h`(`l3.d` v1 @kind this) @signature `Ll3/d;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c3c38.  v0:= v1.`l3.d.p` @type ^`java.util.List` @kind object;
  #L3c3c3c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3c3c42.  v0:= temp;
  #L3c3c44.  return v0;
}
