record `q3.a$a` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `q3.a$a.a` @AccessFlag PUBLIC_FINAL;
  `long` `q3.a$a.b` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`q3.a$a` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lq3/a$a;.<init>:(JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40de9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40dea2.  v0.`q3.a$a.a` @type ^`long` := v1 @kind wide;
  #L40dea6.  v0.`q3.a$a.b` @type ^`long` := v3 @kind wide;
  #L40deaa.  return @kind void;
}
procedure `boolean` `equals`(`q3.a$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lq3/a$a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40de28.  v0:= 1I;
  #L40de2a.  if v7 != v8 then goto L40de30;
  #L40de2e.  return v0;
  #L40de30.  v1:= instanceof @variable v8 @type ^`q3.a$a` @kind boolean;
  #L40de34.  v2:= 0I;
  #L40de36.  if v1 != 0 then goto L40de3c;
  #L40de3a.  return v2;
  #L40de3c.  v8:= (`q3.a$a`) v8 @kind object;
  #L40de40.  v3:= v7.`q3.a$a.a` @type ^`long` @kind wide;
  #L40de44.  v5:= v8.`q3.a$a.a` @type ^`long` @kind wide;
  #L40de48.  v1:= lcmp(v3, v5);
  #L40de4c.  if v1 != 0 then goto L40de62;
  #L40de50.  v3:= v7.`q3.a$a.b` @type ^`long` @kind wide;
  #L40de54.  v5:= v8.`q3.a$a.b` @type ^`long` @kind wide;
  #L40de58.  v8:= lcmp(v3, v5);
  #L40de5c.  if v8 != 0 then goto L40de62;
  #L40de60.  goto L40de64;
  #L40de62.  v0:= 0I;
  #L40de64.  return v0;
}
procedure `int` `hashCode`(`q3.a$a` v4 @kind this) @signature `Lq3/a$a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40de78.  v0:= v4.`q3.a$a.a` @type ^`long` @kind wide;
  #L40de7c.  v1:= (`int`) v0 @kind l2i;
  #L40de7e.  v1:= v1 * 31;
  #L40de82.  v2:= v4.`q3.a$a.b` @type ^`long` @kind wide;
  #L40de86.  v0:= (`int`) v2 @kind l2i;
  #L40de88.  v1:= v1 + v0 @kind int;
  #L40de8a.  return v1;
}
