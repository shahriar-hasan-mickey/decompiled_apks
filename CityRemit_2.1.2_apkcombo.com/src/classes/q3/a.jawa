record `q3.a` @kind class @AccessFlag PUBLIC extends `q3.c` @kind class {
  `r3.f` `q3.a.g` @AccessFlag PRIVATE_FINAL;
  `long` `q3.a.h` @AccessFlag PRIVATE_FINAL;
  `long` `q3.a.i` @AccessFlag PRIVATE_FINAL;
  `long` `q3.a.j` @AccessFlag PRIVATE_FINAL;
  `int` `q3.a.k` @AccessFlag PRIVATE_FINAL;
  `int` `q3.a.l` @AccessFlag PRIVATE_FINAL;
  `float` `q3.a.m` @AccessFlag PRIVATE_FINAL;
  `float` `q3.a.n` @AccessFlag PRIVATE_FINAL;
  `m5.q` `q3.a.o` @AccessFlag PRIVATE_FINAL;
  `s3.c` `q3.a.p` @AccessFlag PRIVATE_FINAL;
  `float` `q3.a.q` @AccessFlag PRIVATE;
  `int` `q3.a.r` @AccessFlag PRIVATE;
  `int` `q3.a.s` @AccessFlag PRIVATE;
  `long` `q3.a.t` @AccessFlag PRIVATE;
  `z2.n` `q3.a.u` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`q3.a` v7 @kind this, `x2.t0` v8 @kind object, `int`[] v9 @kind object, `int` v10 , `r3.f` v11 @kind object, `long` v12 , `long` v14 , `long` v16 , `int` v18 , `int` v19 , `float` v20 , `float` v21 , `java.util.List` v22 @kind object, `s3.c` v23 @kind object) @signature `Lq3/a;.<init>:(Lx2/t0;[IILr3/f;JJJIIFFLjava/util/List;Ls3/c;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40e824.  v0:= v7 @kind object;
  #L40e826.  call `<init>`(v7, v8, v9, v10) @signature `Lq3/c;.<init>:(Lx2/t0;[II)V` @kind direct;
  #L40e82c.  v1:= lcmp(v16, v12);
  #L40e830.  if v1 >= 0 then goto L40e848;
  #L40e834.  v1:= "AdaptiveTrackSelection" @kind object;
  #L40e838.  v2:= "Adjusting minDurationToRetainAfterDiscardMs to be at least minDurationForQualityIncreaseMs" @kind object;
  #L40e83c.  call `h`(v1, v2) @signature `Ls3/q;.h:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L40e842.  v3:= v11 @kind object;
  #L40e844.  v1:= v12 @kind wide;
  #L40e846.  goto L40e84e;
  #L40e848.  v3:= v11 @kind object;
  #L40e84a.  v1:= v16 @kind wide;
  #L40e84e.  v0.`q3.a.g` @type ^`r3.f` := v3 @kind object;
  #L40e852.  v3:= 1000L;
  #L40e856.  v5:= v12 * v3 @kind long;
  #L40e85a.  v0.`q3.a.h` @type ^`long` := v5 @kind wide;
  #L40e85e.  v5:= v14 * v3 @kind long;
  #L40e862.  v0.`q3.a.i` @type ^`long` := v5 @kind wide;
  #L40e866.  v1:= v1 * v3 @kind long;
  #L40e86a.  v0.`q3.a.j` @type ^`long` := v1 @kind wide;
  #L40e86e.  v1:= v18;
  #L40e872.  v0.`q3.a.k` @type ^`int` := v1;
  #L40e876.  v1:= v19;
  #L40e87a.  v0.`q3.a.l` @type ^`int` := v1;
  #L40e87e.  v1:= v20;
  #L40e882.  v0.`q3.a.m` @type ^`float` := v1;
  #L40e886.  v1:= v21;
  #L40e88a.  v0.`q3.a.n` @type ^`float` := v1;
  #L40e88e.  call temp:= `Q`(v22) @signature `Lm5/q;.Q:(Ljava/util/Collection;)Lm5/q;` @kind static;
  #L40e894.  v1:= temp @kind object;
  #L40e896.  v0.`q3.a.o` @type ^`m5.q` := v1 @kind object;
  #L40e89a.  v1:= v23 @kind object;
  #L40e89e.  v0.`q3.a.p` @type ^`s3.c` := v1 @kind object;
  #L40e8a2.  v1:= 1.0F;
  #L40e8a6.  v0.`q3.a.q` @type ^`float` := v1;
  #L40e8aa.  v1:= 0I;
  #L40e8ac.  v0.`q3.a.s` @type ^`int` := v1;
  #L40e8b0.  v1:= -4.9E-324D;
  #L40e8ba.  v0.`q3.a.t` @type ^`long` := v1 @kind wide;
  #L40e8be.  return @kind void;
}
procedure `int` `A`(`q3.a` v5 @kind this, `long` v6 , `long` v8 ) @signature `Lq3/a;.A:(JJ)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40e0d4.  call temp:= `C`(v5, v8) @signature `Lq3/a;.C:(J)J` @kind direct;
  #L40e0da.  v8:= temp @kind wide;
  #L40e0dc.  v0:= 0I;
  #L40e0de.  v1:= 0I;
  #L40e0e0.  v2:= v5.`q3.c.b` @type ^`int`;
  #L40e0e4.  if v0 >= v2 then goto L40e122;
  #L40e0e8.  v2:= -9223372036854775808L;
  #L40e0ec.  v4:= lcmp(v6, v2);
  #L40e0f0.  if v4 == 0 then goto L40e100;
  #L40e0f4.  call temp:= `h`(v5, v0, v6) @signature `Lq3/c;.h:(IJ)Z` @kind virtual;
  #L40e0fa.  v2:= temp;
  #L40e0fc.  if v2 != 0 then goto L40e11c;
  #L40e100.  call temp:= `a`(v5, v0) @signature `Lq3/c;.a:(I)Lv1/j1;` @kind virtual;
  #L40e106.  v1:= temp @kind object;
  #L40e108.  v2:= v1.`v1.j1.v` @type ^`int`;
  #L40e10c.  call temp:= `z`(v5, v1, v2, v8) @signature `Lq3/a;.z:(Lv1/j1;IJ)Z` @kind virtual;
  #L40e112.  v1:= temp;
  #L40e114.  if v1 == 0 then goto L40e11a;
  #L40e118.  return v0;
  #L40e11a.  v1:= v0;
  #L40e11c.  v0:= v0 + 1;
  #L40e120.  goto L40e0e0;
  #L40e122.  return v1;
}
procedure `m5.q` `B`(`q3.s$a`[] v12 @kind object) @signature `Lq3/a;.B:([Lq3/s$a;)Lm5/q;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L40e5ac.  v0:= new `java.util.ArrayList`;
  #L40e5b0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L40e5b6.  v1:= 0I;
  #L40e5b8.  v2:= 0I;
  #L40e5ba.  v3:= length @variable v12;
  #L40e5bc.  v4:= 0L;
  #L40e5c0.  v6:= 1I;
  #L40e5c2.  if v2 >= v3 then goto L40e604;
  #L40e5c6.  v3:= v12[v2] @kind object;
  #L40e5ca.  if v3 == 0 then goto L40e5f6;
  #L40e5ce.  v3:= v12[v2] @kind object;
  #L40e5d2.  v3:= v3.`q3.s$a.b` @type ^`int`[] @kind object;
  #L40e5d6.  v3:= length @variable v3;
  #L40e5d8.  if v3 <= v6 then goto L40e5f6;
  #L40e5dc.  call temp:= `N`() @signature `Lm5/q;.N:()Lm5/q$a;` @kind static;
  #L40e5e2.  v3:= temp @kind object;
  #L40e5e4.  v6:= new `q3.a$a`;
  #L40e5e8.  call `<init>`(v6, v4, v4) @signature `Lq3/a$a;.<init>:(JJ)V` @kind direct;
  #L40e5ee.  call temp:= `f`(v3, v6) @signature `Lm5/q$a;.f:(Ljava/lang/Object;)Lm5/q$a;` @kind virtual;
  #L40e5f4.  goto L40e5f8;
  #L40e5f6.  v3:= 0I;
  #L40e5f8.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40e5fe.  v2:= v2 + 1;
  #L40e602.  goto L40e5ba;
  #L40e604.  call temp:= `G`(v12) @signature `Lq3/a;.G:([Lq3/s$a;)[[J` @kind static;
  #L40e60a.  v2:= temp @kind object;
  #L40e60c.  v3:= length @variable v2;
  #L40e60e.  v3:= new `int`[v3];
  #L40e612.  v7:= length @variable v2;
  #L40e614.  v7:= new `long`[v7];
  #L40e618.  v8:= 0I;
  #L40e61a.  v9:= length @variable v2;
  #L40e61c.  if v8 >= v9 then goto L40e640;
  #L40e620.  v9:= v2[v8] @kind object;
  #L40e624.  v9:= length @variable v9;
  #L40e626.  if v9 != 0 then goto L40e62e;
  #L40e62a.  v10:= v4 @kind wide;
  #L40e62c.  goto L40e636;
  #L40e62e.  v9:= v2[v8] @kind object;
  #L40e632.  v10:= v9[v1] @kind wide;
  #L40e636.  v7[v8]:= v10 @kind wide;
  #L40e63a.  v8:= v8 + 1;
  #L40e63e.  goto L40e61a;
  #L40e640.  call `y`(v0, v7) @signature `Lq3/a;.y:(Ljava/util/List;[J)V` @kind static;
  #L40e646.  call temp:= `H`(v2) @signature `Lq3/a;.H:([[J)Lm5/q;` @kind static;
  #L40e64c.  v4:= temp @kind object;
  #L40e64e.  v5:= 0I;
  #L40e650.  call temp:= `size`(v4) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L40e656.  v8:= temp;
  #L40e658.  if v5 >= v8 then goto L40e692;
  #L40e65c.  call temp:= `get`(v4, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40e662.  v8:= temp @kind object;
  #L40e664.  v8:= (`java.lang.Integer`) v8 @kind object;
  #L40e668.  call temp:= `intValue`(v8) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L40e66e.  v8:= temp;
  #L40e670.  v9:= v3[v8];
  #L40e674.  v9:= v9 + v6 @kind int;
  #L40e676.  v3[v8]:= v9;
  #L40e67a.  v10:= v2[v8] @kind object;
  #L40e67e.  v9:= v10[v9] @kind wide;
  #L40e682.  v7[v8]:= v9 @kind wide;
  #L40e686.  call `y`(v0, v7) @signature `Lq3/a;.y:(Ljava/util/List;[J)V` @kind static;
  #L40e68c.  v5:= v5 + 1;
  #L40e690.  goto L40e650;
  #L40e692.  v2:= 0I;
  #L40e694.  v3:= length @variable v12;
  #L40e696.  if v2 >= v3 then goto L40e6bc;
  #L40e69a.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40e6a0.  v3:= temp @kind object;
  #L40e6a2.  if v3 == 0 then goto L40e6b6;
  #L40e6a6.  v3:= v7[v2] @kind wide;
  #L40e6aa.  v5:= 2L;
  #L40e6ae.  v3:= v3 * v5 @kind long;
  #L40e6b2.  v7[v2]:= v3 @kind wide;
  #L40e6b6.  v2:= v2 + 1;
  #L40e6ba.  goto L40e694;
  #L40e6bc.  call `y`(v0, v7) @signature `Lq3/a;.y:(Ljava/util/List;[J)V` @kind static;
  #L40e6c2.  call temp:= `N`() @signature `Lm5/q;.N:()Lm5/q$a;` @kind static;
  #L40e6c8.  v12:= temp @kind object;
  #L40e6ca.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L40e6d0.  v2:= temp;
  #L40e6d2.  if v1 >= v2 then goto L40e704;
  #L40e6d6.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40e6dc.  v2:= temp @kind object;
  #L40e6de.  v2:= (`m5.q$a`) v2 @kind object;
  #L40e6e2.  if v2 != 0 then goto L40e6f0;
  #L40e6e6.  call temp:= `a0`() @signature `Lm5/q;.a0:()Lm5/q;` @kind static;
  #L40e6ec.  v2:= temp @kind object;
  #L40e6ee.  goto L40e6f8;
  #L40e6f0.  call temp:= `h`(v2) @signature `Lm5/q$a;.h:()Lm5/q;` @kind virtual;
  #L40e6f6.  v2:= temp @kind object;
  #L40e6f8.  call temp:= `f`(v12, v2) @signature `Lm5/q$a;.f:(Ljava/lang/Object;)Lm5/q$a;` @kind virtual;
  #L40e6fe.  v1:= v1 + 1;
  #L40e702.  goto L40e6ca;
  #L40e704.  call temp:= `h`(v12) @signature `Lm5/q$a;.h:()Lm5/q;` @kind virtual;
  #L40e70a.  v12:= temp @kind object;
  #L40e70c.  return v12 @kind object;
}
procedure `long` `C`(`q3.a` v6 @kind this, `long` v7 ) @signature `Lq3/a;.C:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40e2a0.  call temp:= `I`(v6, v7) @signature `Lq3/a;.I:(J)J` @kind direct;
  #L40e2a6.  v7:= temp @kind wide;
  #L40e2a8.  v0:= v6.`q3.a.o` @type ^`m5.q` @kind object;
  #L40e2ac.  call temp:= `isEmpty`(v0) @signature `Ljava/util/AbstractCollection;.isEmpty:()Z` @kind virtual;
  #L40e2b2.  v0:= temp;
  #L40e2b4.  if v0 == 0 then goto L40e2ba;
  #L40e2b8.  return v7 @kind wide;
  #L40e2ba.  v0:= 1I;
  #L40e2bc.  v1:= 1I;
  #L40e2be.  v2:= v6.`q3.a.o` @type ^`m5.q` @kind object;
  #L40e2c2.  call temp:= `size`(v2) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L40e2c8.  v2:= temp;
  #L40e2ca.  v2:= v2 - v0 @kind int;
  #L40e2cc.  if v1 >= v2 then goto L40e2f2;
  #L40e2d0.  v2:= v6.`q3.a.o` @type ^`m5.q` @kind object;
  #L40e2d4.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40e2da.  v2:= temp @kind object;
  #L40e2dc.  v2:= (`q3.a$a`) v2 @kind object;
  #L40e2e0.  v2:= v2.`q3.a$a.a` @type ^`long` @kind wide;
  #L40e2e4.  v4:= lcmp(v2, v7);
  #L40e2e8.  if v4 >= 0 then goto L40e2f2;
  #L40e2ec.  v1:= v1 + 1;
  #L40e2f0.  goto L40e2be;
  #L40e2f2.  v0:= v6.`q3.a.o` @type ^`m5.q` @kind object;
  #L40e2f6.  v2:= v1 + -1;
  #L40e2fa.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40e300.  v0:= temp @kind object;
  #L40e302.  v0:= (`q3.a$a`) v0 @kind object;
  #L40e306.  v2:= v6.`q3.a.o` @type ^`m5.q` @kind object;
  #L40e30a.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40e310.  v1:= temp @kind object;
  #L40e312.  v1:= (`q3.a$a`) v1 @kind object;
  #L40e316.  v2:= v0.`q3.a$a.a` @type ^`long` @kind wide;
  #L40e31a.  v7:= v7 - v2 @kind long;
  #L40e31c.  v7:= (`float`) v7 @kind l2f;
  #L40e31e.  v4:= v1.`q3.a$a.a` @type ^`long` @kind wide;
  #L40e322.  v4:= v4 - v2 @kind long;
  #L40e324.  v8:= (`float`) v4 @kind l2f;
  #L40e326.  v7:= v7 / v8 @kind float;
  #L40e328.  v2:= v0.`q3.a$a.b` @type ^`long` @kind wide;
  #L40e32c.  v0:= v1.`q3.a$a.b` @type ^`long` @kind wide;
  #L40e330.  v0:= v0 - v2 @kind long;
  #L40e332.  v8:= (`float`) v0 @kind l2f;
  #L40e334.  v7:= v7 * v8 @kind float;
  #L40e338.  v7:= (`long`) v7 @kind f2l;
  #L40e33a.  v2:= v2 + v7 @kind long;
  #L40e33c.  return v2 @kind wide;
}
procedure `long` `D`(`q3.a` v7 @kind this, `java.util.List` v8 @kind object) @signature `Lq3/a;.D:(Ljava/util/List;)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40e350.  call temp:= `isEmpty`(v8) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L40e356.  v0:= temp;
  #L40e358.  v1:= -4.9E-324D;
  #L40e362.  if v0 == 0 then goto L40e368;
  #L40e366.  return v1 @kind wide;
  #L40e368.  call temp:= `c`(v8) @signature `Lm5/t;.c:(Ljava/lang/Iterable;)Ljava/lang/Object;` @kind static;
  #L40e36e.  v8:= temp @kind object;
  #L40e370.  v8:= (`z2.n`) v8 @kind object;
  #L40e374.  v3:= v8.`z2.f.g` @type ^`long` @kind wide;
  #L40e378.  v0:= lcmp(v3, v1);
  #L40e37c.  if v0 == 0 then goto L40e390;
  #L40e380.  v5:= v8.`z2.f.h` @type ^`long` @kind wide;
  #L40e384.  v8:= lcmp(v5, v1);
  #L40e388.  if v8 == 0 then goto L40e390;
  #L40e38c.  v1:= v5 - v3 @kind long;
  #L40e390.  return v1 @kind wide;
}
procedure `long` `F`(`q3.a` v4 @kind this, `z2.o`[] v5 @kind object, `java.util.List` v6 @kind object) @signature `Lq3/a;.F:([Lz2/o;Ljava/util/List;)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40e3bc.  v0:= v4.`q3.a.r` @type ^`int`;
  #L40e3c0.  v1:= length @variable v5;
  #L40e3c2.  if v0 >= v1 then goto L40e3f2;
  #L40e3c6.  v0:= v5[v0] @kind object;
  #L40e3ca.  call temp:= `next`(v0) @signature `Lz2/o;.next:()Z` @kind interface;
  #L40e3d0.  v0:= temp;
  #L40e3d2.  if v0 == 0 then goto L40e3f2;
  #L40e3d6.  v6:= v4.`q3.a.r` @type ^`int`;
  #L40e3da.  v5:= v5[v6] @kind object;
  #L40e3de.  call temp:= `a`(v5) @signature `Lz2/o;.a:()J` @kind interface;
  #L40e3e4.  v0:= temp @kind wide;
  #L40e3e6.  call temp:= `b`(v5) @signature `Lz2/o;.b:()J` @kind interface;
  #L40e3ec.  v5:= temp @kind wide;
  #L40e3ee.  v0:= v0 - v5 @kind long;
  #L40e3f0.  return v0 @kind wide;
  #L40e3f2.  v0:= length @variable v5;
  #L40e3f4.  v1:= 0I;
  #L40e3f6.  if v1 >= v0 then goto L40e424;
  #L40e3fa.  v2:= v5[v1] @kind object;
  #L40e3fe.  call temp:= `next`(v2) @signature `Lz2/o;.next:()Z` @kind interface;
  #L40e404.  v3:= temp;
  #L40e406.  if v3 == 0 then goto L40e41e;
  #L40e40a.  call temp:= `a`(v2) @signature `Lz2/o;.a:()J` @kind interface;
  #L40e410.  v5:= temp @kind wide;
  #L40e412.  call temp:= `b`(v2) @signature `Lz2/o;.b:()J` @kind interface;
  #L40e418.  v0:= temp @kind wide;
  #L40e41a.  v5:= v5 - v0 @kind long;
  #L40e41c.  return v5 @kind wide;
  #L40e41e.  v1:= v1 + 1;
  #L40e422.  goto L40e3f6;
  #L40e424.  call temp:= `D`(v4, v6) @signature `Lq3/a;.D:(Ljava/util/List;)J` @kind direct;
  #L40e42a.  v5:= temp @kind wide;
  #L40e42c.  return v5 @kind wide;
}
procedure `long`[][] `G`(`q3.s$a`[] v9 @kind object) @signature `Lq3/a;.G:([Lq3/s$a;)[[J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L40e50c.  v0:= length @variable v9;
  #L40e50e.  v0:= new `long`[][v0];
  #L40e512.  v1:= 0I;
  #L40e514.  v2:= 0I;
  #L40e516.  v3:= length @variable v9;
  #L40e518.  if v2 >= v3 then goto L40e57c;
  #L40e51c.  v3:= v9[v2] @kind object;
  #L40e520.  if v3 != 0 then goto L40e52e;
  #L40e524.  v3:= new `long`[v1];
  #L40e528.  v0[v2]:= v3 @kind object;
  #L40e52c.  goto L40e576;
  #L40e52e.  v4:= v3.`q3.s$a.b` @type ^`int`[] @kind object;
  #L40e532.  v4:= length @variable v4;
  #L40e534.  v4:= new `long`[v4];
  #L40e538.  v0[v2]:= v4 @kind object;
  #L40e53c.  v4:= 0I;
  #L40e53e.  v5:= v3.`q3.s$a.b` @type ^`int`[] @kind object;
  #L40e542.  v6:= length @variable v5;
  #L40e544.  if v4 >= v6 then goto L40e56c;
  #L40e548.  v6:= v0[v2] @kind object;
  #L40e54c.  v7:= v3.`q3.s$a.a` @type ^`x2.t0` @kind object;
  #L40e550.  v5:= v5[v4];
  #L40e554.  call temp:= `b`(v7, v5) @signature `Lx2/t0;.b:(I)Lv1/j1;` @kind virtual;
  #L40e55a.  v5:= temp @kind object;
  #L40e55c.  v5:= v5.`v1.j1.v` @type ^`int`;
  #L40e560.  v7:= (`long`) v5 @kind i2l;
  #L40e562.  v6[v4]:= v7 @kind wide;
  #L40e566.  v4:= v4 + 1;
  #L40e56a.  goto L40e53e;
  #L40e56c.  v3:= v0[v2] @kind object;
  #L40e570.  call `sort`(v3) @signature `Ljava/util/Arrays;.sort:([J)V` @kind static;
  #L40e576.  v2:= v2 + 1;
  #L40e57a.  goto L40e516;
  #L40e57c.  return v0 @kind object;
}
procedure `m5.q` `H`(`long`[][] v17 @kind object) @signature `Lq3/a;.H:([[J)Lm5/q;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L40e720.  v0:= v17 @kind object;
  #L40e724.  call temp:= `a`() @signature `Lm5/b0;.a:()Lm5/b0$d;` @kind static;
  #L40e72a.  v1:= temp @kind object;
  #L40e72c.  call temp:= `a`(v1) @signature `Lm5/b0$d;.a:()Lm5/b0$c;` @kind virtual;
  #L40e732.  v1:= temp @kind object;
  #L40e734.  call temp:= `c`(v1) @signature `Lm5/b0$c;.c:()Lm5/v;` @kind virtual;
  #L40e73a.  v1:= temp @kind object;
  #L40e73c.  v2:= 0I;
  #L40e73e.  v3:= 0I;
  #L40e740.  v4:= length @variable v0;
  #L40e742.  if v3 >= v4 then goto L40e800;
  #L40e746.  v4:= v0[v3] @kind object;
  #L40e74a.  v4:= length @variable v4;
  #L40e74c.  v5:= 1I;
  #L40e74e.  if v4 > v5 then goto L40e754;
  #L40e752.  goto L40e7fa;
  #L40e754.  v4:= v0[v3] @kind object;
  #L40e758.  v4:= length @variable v4;
  #L40e75a.  v5:= new `double`[v4];
  #L40e75e.  v6:= 0I;
  #L40e760.  v7:= v0[v3] @kind object;
  #L40e764.  v7:= length @variable v7;
  #L40e766.  v8:= 0L;
  #L40e76a.  if v6 >= v7 then goto L40e7a0;
  #L40e76e.  v7:= v0[v3] @kind object;
  #L40e772.  v10:= v7[v6] @kind wide;
  #L40e776.  v12:= -1L;
  #L40e77a.  v7:= lcmp(v10, v12);
  #L40e77e.  if v7 != 0 then goto L40e784;
  #L40e782.  goto L40e796;
  #L40e784.  v7:= v0[v3] @kind object;
  #L40e788.  v8:= v7[v6] @kind wide;
  #L40e78c.  v7:= (`double`) v8 @kind l2d;
  #L40e78e.  call temp:= `log`(v7) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L40e794.  v8:= temp @kind wide;
  #L40e796.  v5[v6]:= v8 @kind wide;
  #L40e79a.  v6:= v6 + 1;
  #L40e79e.  goto L40e760;
  #L40e7a0.  v4:= v4 + -1;
  #L40e7a4.  v6:= v5[v4] @kind wide;
  #L40e7a8.  v10:= v5[v2] @kind wide;
  #L40e7ac.  v6:= v6 - v10 @kind double;
  #L40e7ae.  v10:= 0I;
  #L40e7b0.  if v10 >= v4 then goto L40e7fa;
  #L40e7b4.  v11:= 0.5D;
  #L40e7b8.  v13:= v5[v10] @kind wide;
  #L40e7bc.  v10:= v10 + 1;
  #L40e7c0.  v15:= v5[v10] @kind wide;
  #L40e7c4.  v13:= v13 + v15 @kind double;
  #L40e7c6.  v13:= v13 * v11 @kind double;
  #L40e7ca.  v11:= dcmpl(v6, v8);
  #L40e7ce.  if v11 != 0 then goto L40e7d8;
  #L40e7d2.  v11:= 1.0D;
  #L40e7d6.  goto L40e7e2;
  #L40e7d8.  v11:= v5[v2] @kind wide;
  #L40e7dc.  v13:= v13 - v11 @kind double;
  #L40e7de.  v11:= v13 / v6 @kind double;
  #L40e7e2.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L40e7e8.  v11:= temp @kind object;
  #L40e7ea.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L40e7f0.  v12:= temp @kind object;
  #L40e7f2.  call temp:= `put`(v1, v11, v12) @signature `Lm5/z;.put:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L40e7f8.  goto L40e7b0;
  #L40e7fa.  v3:= v3 + 1;
  #L40e7fe.  goto L40e740;
  #L40e800.  call temp:= `values`(v1) @signature `Lm5/z;.values:()Ljava/util/Collection;` @kind interface;
  #L40e806.  v0:= temp @kind object;
  #L40e808.  call temp:= `Q`(v0) @signature `Lm5/q;.Q:(Ljava/util/Collection;)Lm5/q;` @kind static;
  #L40e80e.  v0:= temp @kind object;
  #L40e810.  return v0 @kind object;
}
procedure `long` `I`(`q3.a` v7 @kind this, `long` v8 ) @signature `Lq3/a;.I:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40e440.  v0:= v7.`q3.a.g` @type ^`r3.f` @kind object;
  #L40e444.  call temp:= `h`(v0) @signature `Lr3/f;.h:()J` @kind interface;
  #L40e44a.  v0:= temp @kind wide;
  #L40e44c.  v0:= (`float`) v0 @kind l2f;
  #L40e44e.  v1:= v7.`q3.a.m` @type ^`float`;
  #L40e452.  v0:= v0 * v1 @kind float;
  #L40e456.  v0:= (`long`) v0 @kind f2l;
  #L40e458.  v2:= v7.`q3.a.g` @type ^`r3.f` @kind object;
  #L40e45c.  call temp:= `f`(v2) @signature `Lr3/f;.f:()J` @kind interface;
  #L40e462.  v2:= temp @kind wide;
  #L40e464.  v4:= -4.9E-324D;
  #L40e46e.  v6:= lcmp(v2, v4);
  #L40e472.  if v6 == 0 then goto L40e4a4;
  #L40e476.  v6:= lcmp(v8, v4);
  #L40e47a.  if v6 != 0 then goto L40e480;
  #L40e47e.  goto L40e4a4;
  #L40e480.  v8:= (`float`) v8 @kind l2f;
  #L40e482.  v9:= v7.`q3.a.q` @type ^`float`;
  #L40e486.  v9:= v8 / v9 @kind float;
  #L40e48a.  v2:= (`float`) v2 @kind l2f;
  #L40e48c.  v9:= v9 - v2 @kind float;
  #L40e48e.  v2:= 0I;
  #L40e490.  call temp:= `max`(v9, v2) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L40e496.  v9:= temp;
  #L40e498.  v0:= (`float`) v0 @kind l2f;
  #L40e49a.  v0:= v0 * v9 @kind float;
  #L40e49e.  v0:= v0 / v8 @kind float;
  #L40e4a0.  v8:= (`long`) v0 @kind f2l;
  #L40e4a2.  return v8 @kind wide;
  #L40e4a4.  v8:= (`float`) v0 @kind l2f;
  #L40e4a6.  v9:= v7.`q3.a.q` @type ^`float`;
  #L40e4aa.  v8:= v8 / v9 @kind float;
  #L40e4ac.  v8:= (`long`) v8 @kind f2l;
  #L40e4ae.  return v8 @kind wide;
}
procedure `long` `J`(`q3.a` v3 @kind this, `long` v4 , `long` v6 ) @signature `Lq3/a;.J:(JJ)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L40e4c0.  v0:= -4.9E-324D;
  #L40e4ca.  v2:= lcmp(v4, v0);
  #L40e4ce.  if v2 != 0 then goto L40e4d8;
  #L40e4d2.  v4:= v3.`q3.a.h` @type ^`long` @kind wide;
  #L40e4d6.  return v4 @kind wide;
  #L40e4d8.  v2:= lcmp(v6, v0);
  #L40e4dc.  if v2 == 0 then goto L40e4e2;
  #L40e4e0.  v4:= v4 - v6 @kind long;
  #L40e4e2.  v4:= (`float`) v4 @kind l2f;
  #L40e4e4.  v5:= v3.`q3.a.n` @type ^`float`;
  #L40e4e8.  v4:= v4 * v5 @kind float;
  #L40e4ec.  v4:= (`long`) v4 @kind f2l;
  #L40e4ee.  v6:= v3.`q3.a.h` @type ^`long` @kind wide;
  #L40e4f2.  call temp:= `min`(v4, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L40e4f8.  v4:= temp @kind wide;
  #L40e4fa.  return v4 @kind wide;
}
procedure `m5.q` `x`(`q3.s$a`[] v0 @kind object) @signature `Lq3/a;.x:([Lq3/s$a;)Lm5/q;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L40e590.  call temp:= `B`(v0) @signature `Lq3/a;.B:([Lq3/s$a;)Lm5/q;` @kind static;
  #L40e596.  v0:= temp @kind object;
  #L40e598.  return v0 @kind object;
}
procedure `void` `y`(`java.util.List` v7 @kind object, `long`[] v8 @kind object) @signature `Lq3/a;.y:(Ljava/util/List;[J)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40e8d0.  v0:= 0I;
  #L40e8d2.  v1:= 0L;
  #L40e8d6.  v3:= 0I;
  #L40e8d8.  v4:= length @variable v8;
  #L40e8da.  if v3 >= v4 then goto L40e8ea;
  #L40e8de.  v4:= v8[v3] @kind wide;
  #L40e8e2.  v1:= v1 + v4 @kind long;
  #L40e8e4.  v3:= v3 + 1;
  #L40e8e8.  goto L40e8d8;
  #L40e8ea.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L40e8f0.  v3:= temp;
  #L40e8f2.  if v0 >= v3 then goto L40e922;
  #L40e8f6.  call temp:= `get`(v7, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40e8fc.  v3:= temp @kind object;
  #L40e8fe.  v3:= (`m5.q$a`) v3 @kind object;
  #L40e902.  if v3 != 0 then goto L40e908;
  #L40e906.  goto L40e91c;
  #L40e908.  v4:= new `q3.a$a`;
  #L40e90c.  v5:= v8[v0] @kind wide;
  #L40e910.  call `<init>`(v4, v1, v5) @signature `Lq3/a$a;.<init>:(JJ)V` @kind direct;
  #L40e916.  call temp:= `f`(v3, v4) @signature `Lm5/q$a;.f:(Ljava/lang/Object;)Lm5/q$a;` @kind virtual;
  #L40e91c.  v0:= v0 + 1;
  #L40e920.  goto L40e8ea;
  #L40e922.  return @kind void;
}
procedure `long` `E`(`q3.a` v2 @kind this) @signature `Lq3/a;.E:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L40e3a4.  v0:= v2.`q3.a.j` @type ^`long` @kind wide;
  #L40e3a8.  return v0 @kind wide;
}
procedure `boolean` `K`(`q3.a` v5 @kind this, `long` v6 , `java.util.List` v8 @kind object) @signature `Lq3/a;.K:(JLjava/util/List;)Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40e06c.  v0:= v5.`q3.a.t` @type ^`long` @kind wide;
  #L40e070.  v2:= -4.9E-324D;
  #L40e07a.  v4:= lcmp(v0, v2);
  #L40e07e.  if v4 == 0 then goto L40e0be;
  #L40e082.  v6:= v6 - v0 @kind long;
  #L40e084.  v0:= 1000L;
  #L40e088.  v2:= lcmp(v6, v0);
  #L40e08c.  if v2 >= 0 then goto L40e0be;
  #L40e090.  call temp:= `isEmpty`(v8) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L40e096.  v6:= temp;
  #L40e098.  if v6 != 0 then goto L40e0ba;
  #L40e09c.  call temp:= `c`(v8) @signature `Lm5/t;.c:(Ljava/lang/Iterable;)Ljava/lang/Object;` @kind static;
  #L40e0a2.  v6:= temp @kind object;
  #L40e0a4.  v6:= (`z2.n`) v6 @kind object;
  #L40e0a8.  v7:= v5.`q3.a.u` @type ^`z2.n` @kind object;
  #L40e0ac.  call temp:= `equals`(v6, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L40e0b2.  v6:= temp;
  #L40e0b4.  if v6 != 0 then goto L40e0ba;
  #L40e0b8.  goto L40e0be;
  #L40e0ba.  v6:= 0I;
  #L40e0bc.  goto L40e0c0;
  #L40e0be.  v6:= 1I;
  #L40e0c0.  return v6;
}
procedure `void` `f`(`q3.a` v1 @kind this) @signature `Lq3/a;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40e934.  v0:= 0I;
  #L40e936.  v1.`q3.a.u` @type ^`z2.n` := v0 @kind object;
  #L40e93a.  return @kind void;
}
procedure `void` `j`(`q3.a` v2 @kind this) @signature `Lq3/a;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40e94c.  v0:= -4.9E-324D;
  #L40e956.  v2.`q3.a.t` @type ^`long` := v0 @kind wide;
  #L40e95a.  v0:= 0I;
  #L40e95c.  v2.`q3.a.u` @type ^`z2.n` := v0 @kind object;
  #L40e960.  return @kind void;
}
procedure `int` `k`(`q3.a` v10 @kind this, `long` v11 , `java.util.List` v13 @kind object) @signature `Lq3/a;.k:(JLjava/util/List;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L40e134.  v0:= v10.`q3.a.p` @type ^`s3.c` @kind object;
  #L40e138.  call temp:= `b`(v0) @signature `Ls3/c;.b:()J` @kind interface;
  #L40e13e.  v0:= temp @kind wide;
  #L40e140.  call temp:= `K`(v10, v0, v13) @signature `Lq3/a;.K:(JLjava/util/List;)Z` @kind virtual;
  #L40e146.  v2:= temp;
  #L40e148.  if v2 != 0 then goto L40e156;
  #L40e14c.  call temp:= `size`(v13) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L40e152.  v11:= temp;
  #L40e154.  return v11;
  #L40e156.  v10.`q3.a.t` @type ^`long` := v0 @kind wide;
  #L40e15a.  call temp:= `isEmpty`(v13) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L40e160.  v2:= temp;
  #L40e162.  if v2 == 0 then goto L40e16a;
  #L40e166.  v2:= 0I;
  #L40e168.  goto L40e176;
  #L40e16a.  call temp:= `c`(v13) @signature `Lm5/t;.c:(Ljava/lang/Iterable;)Ljava/lang/Object;` @kind static;
  #L40e170.  v2:= temp @kind object;
  #L40e172.  v2:= (`z2.n`) v2 @kind object;
  #L40e176.  v10.`q3.a.u` @type ^`z2.n` := v2 @kind object;
  #L40e17a.  call temp:= `isEmpty`(v13) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L40e180.  v2:= temp;
  #L40e182.  v3:= 0I;
  #L40e184.  if v2 == 0 then goto L40e18a;
  #L40e188.  return v3;
  #L40e18a.  call temp:= `size`(v13) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L40e190.  v2:= temp;
  #L40e192.  v4:= v2 + -1;
  #L40e196.  call temp:= `get`(v13, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40e19c.  v4:= temp @kind object;
  #L40e19e.  v4:= (`z2.n`) v4 @kind object;
  #L40e1a2.  v4:= v4.`z2.f.g` @type ^`long` @kind wide;
  #L40e1a6.  v4:= v4 - v11 @kind long;
  #L40e1a8.  v6:= v10.`q3.a.q` @type ^`float`;
  #L40e1ac.  call temp:= `e0`(v4, v6) @signature `Ls3/l0;.e0:(JF)J` @kind static;
  #L40e1b2.  v4:= temp @kind wide;
  #L40e1b4.  call temp:= `E`(v10) @signature `Lq3/a;.E:()J` @kind virtual;
  #L40e1ba.  v6:= temp @kind wide;
  #L40e1bc.  v8:= lcmp(v4, v6);
  #L40e1c0.  if v8 >= 0 then goto L40e1c6;
  #L40e1c4.  return v2;
  #L40e1c6.  call temp:= `D`(v10, v13) @signature `Lq3/a;.D:(Ljava/util/List;)J` @kind direct;
  #L40e1cc.  v4:= temp @kind wide;
  #L40e1ce.  call temp:= `A`(v10, v0, v4) @signature `Lq3/a;.A:(JJ)I` @kind direct;
  #L40e1d4.  v0:= temp;
  #L40e1d6.  call temp:= `a`(v10, v0) @signature `Lq3/c;.a:(I)Lv1/j1;` @kind virtual;
  #L40e1dc.  v0:= temp @kind object;
  #L40e1de.  if v3 >= v2 then goto L40e24a;
  #L40e1e2.  call temp:= `get`(v13, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40e1e8.  v1:= temp @kind object;
  #L40e1ea.  v1:= (`z2.n`) v1 @kind object;
  #L40e1ee.  v4:= v1.`z2.f.d` @type ^`v1.j1` @kind object;
  #L40e1f2.  v8:= v1.`z2.f.g` @type ^`long` @kind wide;
  #L40e1f6.  v8:= v8 - v11 @kind long;
  #L40e1f8.  v1:= v10.`q3.a.q` @type ^`float`;
  #L40e1fc.  call temp:= `e0`(v8, v1) @signature `Ls3/l0;.e0:(JF)J` @kind static;
  #L40e202.  v8:= temp @kind wide;
  #L40e204.  v1:= lcmp(v8, v6);
  #L40e208.  if v1 < 0 then goto L40e244;
  #L40e20c.  v1:= v4.`v1.j1.v` @type ^`int`;
  #L40e210.  v5:= v0.`v1.j1.v` @type ^`int`;
  #L40e214.  if v1 >= v5 then goto L40e244;
  #L40e218.  v1:= v4.`v1.j1.F` @type ^`int`;
  #L40e21c.  v5:= -1I;
  #L40e21e.  if v1 == v5 then goto L40e244;
  #L40e222.  v8:= v10.`q3.a.l` @type ^`int`;
  #L40e226.  if v1 > v8 then goto L40e244;
  #L40e22a.  v4:= v4.`v1.j1.E` @type ^`int`;
  #L40e22e.  if v4 == v5 then goto L40e244;
  #L40e232.  v5:= v10.`q3.a.k` @type ^`int`;
  #L40e236.  if v4 > v5 then goto L40e244;
  #L40e23a.  v4:= v0.`v1.j1.F` @type ^`int`;
  #L40e23e.  if v1 >= v4 then goto L40e244;
  #L40e242.  return v3;
  #L40e244.  v3:= v3 + 1;
  #L40e248.  goto L40e1de;
  #L40e24a.  return v2;
}
procedure `void` `l`(`q3.a` v5 @kind this, `long` v6 , `long` v8 , `long` v10 , `java.util.List` v12 @kind object, `z2.o`[] v13 @kind object) @signature `Lq3/a;.l:(JJJLjava/util/List;[Lz2/o;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40e98c.  v6:= v5.`q3.a.p` @type ^`s3.c` @kind object;
  #L40e990.  call temp:= `b`(v6) @signature `Ls3/c;.b:()J` @kind interface;
  #L40e996.  v6:= temp @kind wide;
  #L40e998.  call temp:= `F`(v5, v13, v12) @signature `Lq3/a;.F:([Lz2/o;Ljava/util/List;)J` @kind direct;
  #L40e99e.  v0:= temp @kind wide;
  #L40e9a0.  v13:= v5.`q3.a.s` @type ^`int`;
  #L40e9a4.  if v13 != 0 then goto L40e9bc;
  #L40e9a8.  v8:= 1I;
  #L40e9aa.  v5.`q3.a.s` @type ^`int` := v8;
  #L40e9ae.  call temp:= `A`(v5, v6, v0) @signature `Lq3/a;.A:(JJ)I` @kind direct;
  #L40e9b4.  v6:= temp;
  #L40e9b6.  v5.`q3.a.r` @type ^`int` := v6;
  #L40e9ba.  return @kind void;
  #L40e9bc.  v2:= v5.`q3.a.r` @type ^`int`;
  #L40e9c0.  call temp:= `isEmpty`(v12) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L40e9c6.  v3:= temp;
  #L40e9c8.  v4:= -1I;
  #L40e9ca.  if v3 == 0 then goto L40e9d2;
  #L40e9ce.  v3:= -1I;
  #L40e9d0.  goto L40e9ea;
  #L40e9d2.  call temp:= `c`(v12) @signature `Lm5/t;.c:(Ljava/lang/Iterable;)Ljava/lang/Object;` @kind static;
  #L40e9d8.  v3:= temp @kind object;
  #L40e9da.  v3:= (`z2.n`) v3 @kind object;
  #L40e9de.  v3:= v3.`z2.f.d` @type ^`v1.j1` @kind object;
  #L40e9e2.  call temp:= `d`(v5, v3) @signature `Lq3/c;.d:(Lv1/j1;)I` @kind virtual;
  #L40e9e8.  v3:= temp;
  #L40e9ea.  if v3 == v4 then goto L40ea00;
  #L40e9ee.  call temp:= `c`(v12) @signature `Lm5/t;.c:(Ljava/lang/Iterable;)Ljava/lang/Object;` @kind static;
  #L40e9f4.  v12:= temp @kind object;
  #L40e9f6.  v12:= (`z2.n`) v12 @kind object;
  #L40e9fa.  v13:= v12.`z2.f.e` @type ^`int`;
  #L40e9fe.  v2:= v3;
  #L40ea00.  call temp:= `A`(v5, v6, v0) @signature `Lq3/a;.A:(JJ)I` @kind direct;
  #L40ea06.  v12:= temp;
  #L40ea08.  call temp:= `h`(v5, v2, v6) @signature `Lq3/c;.h:(IJ)Z` @kind virtual;
  #L40ea0e.  v6:= temp;
  #L40ea10.  if v6 != 0 then goto L40ea54;
  #L40ea14.  call temp:= `a`(v5, v2) @signature `Lq3/c;.a:(I)Lv1/j1;` @kind virtual;
  #L40ea1a.  v6:= temp @kind object;
  #L40ea1c.  call temp:= `a`(v5, v12) @signature `Lq3/c;.a:(I)Lv1/j1;` @kind virtual;
  #L40ea22.  v7:= temp @kind object;
  #L40ea24.  call temp:= `J`(v5, v10, v0) @signature `Lq3/a;.J:(JJ)J` @kind direct;
  #L40ea2a.  v10:= temp @kind wide;
  #L40ea2c.  v7:= v7.`v1.j1.v` @type ^`int`;
  #L40ea30.  v6:= v6.`v1.j1.v` @type ^`int`;
  #L40ea34.  if v7 <= v6 then goto L40ea42;
  #L40ea38.  v0:= lcmp(v8, v10);
  #L40ea3c.  if v0 >= 0 then goto L40ea42;
  #L40ea40.  goto L40ea52;
  #L40ea42.  if v7 >= v6 then goto L40ea54;
  #L40ea46.  v6:= v5.`q3.a.i` @type ^`long` @kind wide;
  #L40ea4a.  v10:= lcmp(v8, v6);
  #L40ea4e.  if v10 < 0 then goto L40ea54;
  #L40ea52.  v12:= v2;
  #L40ea54.  if v12 != v2 then goto L40ea5a;
  #L40ea58.  goto L40ea5c;
  #L40ea5a.  v13:= 3I;
  #L40ea5c.  v5.`q3.a.s` @type ^`int` := v13;
  #L40ea60.  v5.`q3.a.r` @type ^`int` := v12;
  #L40ea64.  return @kind void;
}
procedure `int` `o`(`q3.a` v1 @kind this) @signature `Lq3/a;.o:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40e274.  v0:= v1.`q3.a.s` @type ^`int`;
  #L40e278.  return v0;
}
procedure `int` `p`(`q3.a` v1 @kind this) @signature `Lq3/a;.p:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40e25c.  v0:= v1.`q3.a.r` @type ^`int`;
  #L40e260.  return v0;
}
procedure `void` `q`(`q3.a` v0 @kind this, `float` v1 ) @signature `Lq3/a;.q:(F)V` @AccessFlag PUBLIC {
    temp;

  #L40e974.  v0.`q3.a.q` @type ^`float` := v1;
  #L40e978.  return @kind void;
}
procedure `java.lang.Object` `r`(`q3.a` v1 @kind this) @signature `Lq3/a;.r:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40e28c.  v0:= 0I;
  #L40e28e.  return v0 @kind object;
}
procedure `boolean` `z`(`q3.a` v1 @kind this, `v1.j1` v2 @kind object, `int` v3 , `long` v4 ) @signature `Lq3/a;.z:(Lv1/j1;IJ)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L40e048.  v2:= (`long`) v3 @kind i2l;
  #L40e04a.  v0:= lcmp(v2, v4);
  #L40e04e.  if v0 > 0 then goto L40e056;
  #L40e052.  v2:= 1I;
  #L40e054.  goto L40e058;
  #L40e056.  v2:= 0I;
  #L40e058.  return v2;
}
