record `z6.g` @kind class @AccessFlag PUBLIC {
  `a7.d` `z6.g.a` @AccessFlag PRIVATE_FINAL;
}
global `a7.i` `@@z6.g.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `a7.i` `@@z6.g.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `a7.d` `@@z6.g.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `a7.d` `@@z6.g.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lz6/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L504878.  v0:= new `z6.g$a`;
  #L50487c.  call `<init>`(v0) @signature `Lz6/g$a;.<init>:()V` @kind direct;
  #L504882.  `@@z6.g.b` @type ^`a7.i` := v0 @kind object;
  #L504886.  v0:= new `z6.g$b`;
  #L50488a.  call `<init>`(v0) @signature `Lz6/g$b;.<init>:()V` @kind direct;
  #L504890.  `@@z6.g.c` @type ^`a7.i` := v0 @kind object;
  #L504894.  v0:= new `a7.d`;
  #L504898.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L50489c.  call `<init>`(v0, v1) @signature `La7/d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L5048a2.  `@@z6.g.d` @type ^`a7.d` := v0 @kind object;
  #L5048a6.  v0:= new `a7.d`;
  #L5048aa.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L5048ae.  call `<init>`(v0, v1) @signature `La7/d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L5048b4.  `@@z6.g.e` @type ^`a7.d` := v0 @kind object;
  #L5048b8.  return @kind void;
}
procedure `void` `<init>`(`z6.g` v1 @kind this) @signature `Lz6/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L5048cc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5048d2.  call temp:= `f`() @signature `La7/d;.f:()La7/d;` @kind static;
  #L5048d8.  v0:= temp @kind object;
  #L5048da.  v1.`z6.g.a` @type ^`a7.d` := v0 @kind object;
  #L5048de.  return @kind void;
}
procedure `void` `<init>`(`z6.g` v0 @kind this, `a7.d` v1 @kind object) @signature `Lz6/g;.<init>:(La7/d;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L5048f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5048f6.  v0.`z6.g.a` @type ^`a7.d` := v1 @kind object;
  #L5048fa.  return @kind void;
}
procedure `z6.g` `a`(`z6.g` v2 @kind this, `f7.b` v3 @kind object) @signature `Lz6/g;.a:(Lf7/b;)Lz6/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50490c.  v0:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L504910.  call temp:= `G`(v0, v3) @signature `La7/d;.G:(Lf7/b;)La7/d;` @kind virtual;
  #L504916.  v3:= temp @kind object;
  #L504918.  if v3 != 0 then goto L504938;
  #L50491c.  v3:= new `a7.d`;
  #L504920.  v0:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L504924.  call temp:= `getValue`(v0) @signature `La7/d;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L50492a.  v0:= temp @kind object;
  #L50492c.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L504930.  call `<init>`(v3, v0) @signature `La7/d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L504936.  goto L504974;
  #L504938.  call temp:= `getValue`(v3) @signature `La7/d;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L50493e.  v0:= temp @kind object;
  #L504940.  if v0 != 0 then goto L504974;
  #L504944.  v0:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L504948.  call temp:= `getValue`(v0) @signature `La7/d;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L50494e.  v0:= temp @kind object;
  #L504950.  if v0 == 0 then goto L504974;
  #L504954.  call temp:= `g0`() @signature `Lx6/l;.g0:()Lx6/l;` @kind static;
  #L50495a.  v0:= temp @kind object;
  #L50495c.  v1:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L504960.  call temp:= `getValue`(v1) @signature `La7/d;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L504966.  v1:= temp @kind object;
  #L504968.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L50496c.  call temp:= `Y`(v3, v0, v1) @signature `La7/d;.Y:(Lx6/l;Ljava/lang/Object;)La7/d;` @kind virtual;
  #L504972.  v3:= temp @kind object;
  #L504974.  v0:= new `z6.g`;
  #L504978.  call `<init>`(v0, v3) @signature `Lz6/g;.<init>:(La7/d;)V` @kind direct;
  #L50497e.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`z6.g` v2 @kind this, `java.lang.Object` v3 @kind object, `a7.d$c` v4 @kind object) @signature `Lz6/g;.b:(Ljava/lang/Object;La7/d$c;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L504804.  v0:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L504808.  v1:= new `z6.g$c`;
  #L50480c.  call `<init>`(v1, v2, v4) @signature `Lz6/g$c;.<init>:(Lz6/g;La7/d$c;)V` @kind direct;
  #L504812.  call temp:= `n`(v0, v3, v1) @signature `La7/d;.n:(Ljava/lang/Object;La7/d$c;)Ljava/lang/Object;` @kind virtual;
  #L504818.  v3:= temp @kind object;
  #L50481a.  return v3 @kind object;
}
procedure `z6.g` `c`(`z6.g` v2 @kind this, `x6.l` v3 @kind object) @signature `Lz6/g;.c:(Lx6/l;)Lz6/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L504990.  v0:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L504994.  v1:= `@@z6.g.b` @type ^`a7.i` @kind object;
  #L504998.  call temp:= `T`(v0, v3, v1) @signature `La7/d;.T:(Lx6/l;La7/i;)Ljava/lang/Object;` @kind virtual;
  #L50499e.  v0:= temp @kind object;
  #L5049a0.  if v0 == 0 then goto L5049a6;
  #L5049a4.  return v2 @kind object;
  #L5049a6.  v0:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L5049aa.  v1:= `@@z6.g.e` @type ^`a7.d` @kind object;
  #L5049ae.  call temp:= `a0`(v0, v3, v1) @signature `La7/d;.a0:(Lx6/l;La7/d;)La7/d;` @kind virtual;
  #L5049b4.  v3:= temp @kind object;
  #L5049b6.  v0:= new `z6.g`;
  #L5049ba.  call `<init>`(v0, v3) @signature `Lz6/g;.<init>:(La7/d;)V` @kind direct;
  #L5049c0.  return v0 @kind object;
}
procedure `z6.g` `d`(`z6.g` v2 @kind this, `x6.l` v3 @kind object) @signature `Lz6/g;.d:(Lx6/l;)Lz6/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5049d4.  v0:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L5049d8.  v1:= `@@z6.g.b` @type ^`a7.i` @kind object;
  #L5049dc.  call temp:= `T`(v0, v3, v1) @signature `La7/d;.T:(Lx6/l;La7/i;)Ljava/lang/Object;` @kind virtual;
  #L5049e2.  v0:= temp @kind object;
  #L5049e4.  if v0 != 0 then goto L504a1a;
  #L5049e8.  v0:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L5049ec.  v1:= `@@z6.g.c` @type ^`a7.i` @kind object;
  #L5049f0.  call temp:= `T`(v0, v3, v1) @signature `La7/d;.T:(Lx6/l;La7/i;)Ljava/lang/Object;` @kind virtual;
  #L5049f6.  v0:= temp @kind object;
  #L5049f8.  if v0 == 0 then goto L5049fe;
  #L5049fc.  return v2 @kind object;
  #L5049fe.  v0:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L504a02.  v1:= `@@z6.g.d` @type ^`a7.d` @kind object;
  #L504a06.  call temp:= `a0`(v0, v3, v1) @signature `La7/d;.a0:(Lx6/l;La7/d;)La7/d;` @kind virtual;
  #L504a0c.  v3:= temp @kind object;
  #L504a0e.  v0:= new `z6.g`;
  #L504a12.  call `<init>`(v0, v3) @signature `Lz6/g;.<init>:(La7/d;)V` @kind direct;
  #L504a18.  return v0 @kind object;
  #L504a1a.  v3:= new `java.lang.IllegalArgumentException`;
  #L504a1e.  v0:= "Can't prune path that was kept previously!" @kind object;
  #L504a22.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L504a28.  throw v3;
}
procedure `boolean` `e`(`z6.g` v2 @kind this) @signature `Lz6/g;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L504750.  v0:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L504754.  v1:= `@@z6.g.c` @type ^`a7.i` @kind object;
  #L504758.  call temp:= `b`(v0, v1) @signature `La7/d;.b:(La7/i;)Z` @kind virtual;
  #L50475e.  v0:= temp;
  #L504760.  return v0;
}
procedure `boolean` `equals`(`z6.g` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lz6/g;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L504710.  v0:= 1I;
  #L504712.  if v3 != v4 then goto L504718;
  #L504716.  return v0;
  #L504718.  v1:= instanceof @variable v4 @type ^`z6.g` @kind boolean;
  #L50471c.  v2:= 0I;
  #L50471e.  if v1 != 0 then goto L504724;
  #L504722.  return v2;
  #L504724.  v4:= (`z6.g`) v4 @kind object;
  #L504728.  v1:= v3.`z6.g.a` @type ^`a7.d` @kind object;
  #L50472c.  v4:= v4.`z6.g.a` @type ^`a7.d` @kind object;
  #L504730.  call temp:= `equals`(v1, v4) @signature `La7/d;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L504736.  v4:= temp;
  #L504738.  if v4 != 0 then goto L50473e;
  #L50473c.  return v2;
  #L50473e.  return v0;
}
procedure `boolean` `f`(`z6.g` v1 @kind this, `x6.l` v2 @kind object) @signature `Lz6/g;.f:(Lx6/l;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L504774.  v0:= v1.`z6.g.a` @type ^`a7.d` @kind object;
  #L504778.  call temp:= `O`(v0, v2) @signature `La7/d;.O:(Lx6/l;)Ljava/lang/Object;` @kind virtual;
  #L50477e.  v2:= temp @kind object;
  #L504780.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L504784.  if v2 == 0 then goto L504798;
  #L504788.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L50478e.  v2:= temp;
  #L504790.  if v2 != 0 then goto L504798;
  #L504794.  v2:= 1I;
  #L504796.  goto L50479a;
  #L504798.  v2:= 0I;
  #L50479a.  return v2;
}
procedure `boolean` `g`(`z6.g` v1 @kind this, `x6.l` v2 @kind object) @signature `Lz6/g;.g:(Lx6/l;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5047ac.  v0:= v1.`z6.g.a` @type ^`a7.d` @kind object;
  #L5047b0.  call temp:= `O`(v0, v2) @signature `La7/d;.O:(Lx6/l;)Ljava/lang/Object;` @kind virtual;
  #L5047b6.  v2:= temp @kind object;
  #L5047b8.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L5047bc.  if v2 == 0 then goto L5047d0;
  #L5047c0.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L5047c6.  v2:= temp;
  #L5047c8.  if v2 == 0 then goto L5047d0;
  #L5047cc.  v2:= 1I;
  #L5047ce.  goto L5047d2;
  #L5047d0.  v2:= 0I;
  #L5047d2.  return v2;
}
procedure `int` `hashCode`(`z6.g` v1 @kind this) @signature `Lz6/g;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5047e4.  v0:= v1.`z6.g.a` @type ^`a7.d` @kind object;
  #L5047e8.  call temp:= `hashCode`(v0) @signature `La7/d;.hashCode:()I` @kind virtual;
  #L5047ee.  v0:= temp;
  #L5047f0.  return v0;
}
procedure `java.lang.String` `toString`(`z6.g` v2 @kind this) @signature `Lz6/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50482c.  v0:= new `java.lang.StringBuilder`;
  #L504830.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L504836.  v1:= "{PruneForest:" @kind object;
  #L50483a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L504840.  v1:= v2.`z6.g.a` @type ^`a7.d` @kind object;
  #L504844.  call temp:= `toString`(v1) @signature `La7/d;.toString:()Ljava/lang/String;` @kind virtual;
  #L50484a.  v1:= temp @kind object;
  #L50484c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L504852.  v1:= "}" @kind object;
  #L504856.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50485c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L504862.  v0:= temp @kind object;
  #L504864.  return v0 @kind object;
}
