record `z6.h` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `z6.h.a` @AccessFlag PUBLIC_FINAL;
  `c7.i` `z6.h.b` @AccessFlag PUBLIC_FINAL;
  `long` `z6.h.c` @AccessFlag PUBLIC_FINAL;
  `boolean` `z6.h.d` @AccessFlag PUBLIC_FINAL;
  `boolean` `z6.h.e` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`z6.h` v0 @kind this, `long` v1 , `c7.i` v3 @kind object, `long` v4 , `boolean` v6 , `boolean` v7 ) @signature `Lz6/h;.<init>:(JLc7/i;JZZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L505860.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L505866.  v0.`z6.h.a` @type ^`long` := v1 @kind wide;
  #L50586a.  call temp:= `g`(v3) @signature `Lc7/i;.g:()Z` @kind virtual;
  #L505870.  v1:= temp;
  #L505872.  if v1 == 0 then goto L505894;
  #L505876.  call temp:= `f`(v3) @signature `Lc7/i;.f:()Z` @kind virtual;
  #L50587c.  v1:= temp;
  #L50587e.  if v1 == 0 then goto L505884;
  #L505882.  goto L505894;
  #L505884.  v1:= new `java.lang.IllegalArgumentException`;
  #L505888.  v2:= "Can't create TrackedQuery for a non-default query that loads all data" @kind object;
  #L50588c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L505892.  throw v1;
  #L505894.  v0.`z6.h.b` @type ^`c7.i` := v3 @kind object;
  #L505898.  v0.`z6.h.c` @type ^`long` := v4 @kind wide;
  #L50589c.  v0.`z6.h.d` @type ^`boolean` := v6 @kind boolean;
  #L5058a0.  v0.`z6.h.e` @type ^`boolean` := v7 @kind boolean;
  #L5058a4.  return @kind void;
}
procedure `z6.h` `a`(`z6.h` v9 @kind this, `boolean` v10 ) @signature `Lz6/h;.a:(Z)Lz6/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L5058b8.  v8:= new `z6.h`;
  #L5058bc.  v1:= v9.`z6.h.a` @type ^`long` @kind wide;
  #L5058c0.  v3:= v9.`z6.h.b` @type ^`c7.i` @kind object;
  #L5058c4.  v4:= v9.`z6.h.c` @type ^`long` @kind wide;
  #L5058c8.  v6:= v9.`z6.h.d` @type ^`boolean` @kind boolean;
  #L5058cc.  v0:= v8 @kind object;
  #L5058ce.  v7:= v10;
  #L5058d0.  call `<init>`(v0, v1, v3, v4, v6, v7) @signature `Lz6/h;.<init>:(JLc7/i;JZZ)V` @kind direct;
  #L5058d6.  return v8 @kind object;
}
procedure `z6.h` `b`(`z6.h` v9 @kind this) @signature `Lz6/h;.b:()Lz6/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L5058e8.  v8:= new `z6.h`;
  #L5058ec.  v1:= v9.`z6.h.a` @type ^`long` @kind wide;
  #L5058f0.  v3:= v9.`z6.h.b` @type ^`c7.i` @kind object;
  #L5058f4.  v4:= v9.`z6.h.c` @type ^`long` @kind wide;
  #L5058f8.  v7:= v9.`z6.h.e` @type ^`boolean` @kind boolean;
  #L5058fc.  v6:= 1I;
  #L5058fe.  v0:= v8 @kind object;
  #L505900.  call `<init>`(v0, v1, v3, v4, v6, v7) @signature `Lz6/h;.<init>:(JLc7/i;JZZ)V` @kind direct;
  #L505906.  return v8 @kind object;
}
procedure `z6.h` `c`(`z6.h` v9 @kind this, `long` v10 ) @signature `Lz6/h;.c:(J)Lz6/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L505918.  v8:= new `z6.h`;
  #L50591c.  v1:= v9.`z6.h.a` @type ^`long` @kind wide;
  #L505920.  v3:= v9.`z6.h.b` @type ^`c7.i` @kind object;
  #L505924.  v6:= v9.`z6.h.d` @type ^`boolean` @kind boolean;
  #L505928.  v7:= v9.`z6.h.e` @type ^`boolean` @kind boolean;
  #L50592c.  v0:= v8 @kind object;
  #L50592e.  v4:= v10 @kind wide;
  #L505930.  call `<init>`(v0, v1, v3, v4, v6, v7) @signature `Lz6/h;.<init>:(JLc7/i;JZZ)V` @kind direct;
  #L505936.  return v8 @kind object;
}
procedure `boolean` `equals`(`z6.h` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lz6/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L5056bc.  v0:= 1I;
  #L5056be.  if v8 != v7 then goto L5056c4;
  #L5056c2.  return v0;
  #L5056c4.  v1:= 0I;
  #L5056c6.  if v8 == 0 then goto L505732;
  #L5056ca.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L5056d0.  v2:= temp @kind object;
  #L5056d2.  v3:= constclass @type ^`z6.h` @kind object;
  #L5056d6.  if v2 == v3 then goto L5056dc;
  #L5056da.  goto L505732;
  #L5056dc.  v8:= (`z6.h`) v8 @kind object;
  #L5056e0.  v2:= v7.`z6.h.a` @type ^`long` @kind wide;
  #L5056e4.  v4:= v8.`z6.h.a` @type ^`long` @kind wide;
  #L5056e8.  v6:= lcmp(v2, v4);
  #L5056ec.  if v6 != 0 then goto L50572e;
  #L5056f0.  v2:= v7.`z6.h.b` @type ^`c7.i` @kind object;
  #L5056f4.  v3:= v8.`z6.h.b` @type ^`c7.i` @kind object;
  #L5056f8.  call temp:= `equals`(v2, v3) @signature `Lc7/i;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L5056fe.  v2:= temp;
  #L505700.  if v2 == 0 then goto L50572e;
  #L505704.  v2:= v7.`z6.h.c` @type ^`long` @kind wide;
  #L505708.  v4:= v8.`z6.h.c` @type ^`long` @kind wide;
  #L50570c.  v6:= lcmp(v2, v4);
  #L505710.  if v6 != 0 then goto L50572e;
  #L505714.  v2:= v7.`z6.h.d` @type ^`boolean` @kind boolean;
  #L505718.  v3:= v8.`z6.h.d` @type ^`boolean` @kind boolean;
  #L50571c.  if v2 != v3 then goto L50572e;
  #L505720.  v2:= v7.`z6.h.e` @type ^`boolean` @kind boolean;
  #L505724.  v8:= v8.`z6.h.e` @type ^`boolean` @kind boolean;
  #L505728.  if v2 != v8 then goto L50572e;
  #L50572c.  goto L505730;
  #L50572e.  v0:= 0I;
  #L505730.  return v0;
  #L505732.  return v1;
}
procedure `int` `hashCode`(`z6.h` v3 @kind this) @signature `Lz6/h;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L505744.  v0:= v3.`z6.h.a` @type ^`long` @kind wide;
  #L505748.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L50574e.  v0:= temp @kind object;
  #L505750.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Long;.hashCode:()I` @kind virtual;
  #L505756.  v0:= temp;
  #L505758.  v0:= v0 * 31;
  #L50575c.  v1:= v3.`z6.h.b` @type ^`c7.i` @kind object;
  #L505760.  call temp:= `hashCode`(v1) @signature `Lc7/i;.hashCode:()I` @kind virtual;
  #L505766.  v1:= temp;
  #L505768.  v0:= v0 + v1 @kind int;
  #L50576a.  v0:= v0 * 31;
  #L50576e.  v1:= v3.`z6.h.c` @type ^`long` @kind wide;
  #L505772.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L505778.  v1:= temp @kind object;
  #L50577a.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Long;.hashCode:()I` @kind virtual;
  #L505780.  v1:= temp;
  #L505782.  v0:= v0 + v1 @kind int;
  #L505784.  v0:= v0 * 31;
  #L505788.  v1:= v3.`z6.h.d` @type ^`boolean` @kind boolean;
  #L50578c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L505792.  v1:= temp @kind object;
  #L505794.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Boolean;.hashCode:()I` @kind virtual;
  #L50579a.  v1:= temp;
  #L50579c.  v0:= v0 + v1 @kind int;
  #L50579e.  v0:= v0 * 31;
  #L5057a2.  v1:= v3.`z6.h.e` @type ^`boolean` @kind boolean;
  #L5057a6.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L5057ac.  v1:= temp @kind object;
  #L5057ae.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Boolean;.hashCode:()I` @kind virtual;
  #L5057b4.  v1:= temp;
  #L5057b6.  v0:= v0 + v1 @kind int;
  #L5057b8.  return v0;
}
procedure `java.lang.String` `toString`(`z6.h` v3 @kind this) @signature `Lz6/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L5057cc.  v0:= new `java.lang.StringBuilder`;
  #L5057d0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5057d6.  v1:= "TrackedQuery{id=" @kind object;
  #L5057da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5057e0.  v1:= v3.`z6.h.a` @type ^`long` @kind wide;
  #L5057e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L5057ea.  v1:= ", querySpec=" @kind object;
  #L5057ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5057f4.  v1:= v3.`z6.h.b` @type ^`c7.i` @kind object;
  #L5057f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5057fe.  v1:= ", lastUse=" @kind object;
  #L505802.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L505808.  v1:= v3.`z6.h.c` @type ^`long` @kind wide;
  #L50580c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L505812.  v1:= ", complete=" @kind object;
  #L505816.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50581c.  v1:= v3.`z6.h.d` @type ^`boolean` @kind boolean;
  #L505820.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L505826.  v1:= ", active=" @kind object;
  #L50582a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L505830.  v1:= v3.`z6.h.e` @type ^`boolean` @kind boolean;
  #L505834.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L50583a.  v1:= "}" @kind object;
  #L50583e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L505844.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50584a.  v0:= temp @kind object;
  #L50584c.  return v0 @kind object;
}
