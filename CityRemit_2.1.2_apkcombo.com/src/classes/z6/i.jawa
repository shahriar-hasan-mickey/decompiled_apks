record `z6.i` @kind class @AccessFlag PUBLIC {
  `a7.d` `z6.i.a` @AccessFlag PRIVATE;
  `z6.f` `z6.i.b` @AccessFlag PRIVATE_FINAL;
  `e7.c` `z6.i.c` @AccessFlag PRIVATE_FINAL;
  `a7.a` `z6.i.d` @AccessFlag PRIVATE_FINAL;
  `long` `z6.i.e` @AccessFlag PRIVATE;
}
global `a7.i` `@@z6.i.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `a7.i` `@@z6.i.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `a7.i` `@@z6.i.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `a7.i` `@@z6.i.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lz6/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L505044.  v0:= new `z6.i$a`;
  #L505048.  call `<init>`(v0) @signature `Lz6/i$a;.<init>:()V` @kind direct;
  #L50504e.  `@@z6.i.f` @type ^`a7.i` := v0 @kind object;
  #L505052.  v0:= new `z6.i$b`;
  #L505056.  call `<init>`(v0) @signature `Lz6/i$b;.<init>:()V` @kind direct;
  #L50505c.  `@@z6.i.g` @type ^`a7.i` := v0 @kind object;
  #L505060.  v0:= new `z6.i$c`;
  #L505064.  call `<init>`(v0) @signature `Lz6/i$c;.<init>:()V` @kind direct;
  #L50506a.  `@@z6.i.h` @type ^`a7.i` := v0 @kind object;
  #L50506e.  v0:= new `z6.i$d`;
  #L505072.  call `<init>`(v0) @signature `Lz6/i$d;.<init>:()V` @kind direct;
  #L505078.  `@@z6.i.i` @type ^`a7.i` := v0 @kind object;
  #L50507c.  return @kind void;
}
procedure `void` `<init>`(`z6.i` v4 @kind this, `z6.f` v5 @kind object, `e7.c` v6 @kind object, `a7.a` v7 @kind object) @signature `Lz6/i;.<init>:(Lz6/f;Le7/c;La7/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L505090.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L505096.  v0:= 0L;
  #L50509a.  v4.`z6.i.e` @type ^`long` := v0 @kind wide;
  #L50509e.  v4.`z6.i.b` @type ^`z6.f` := v5 @kind object;
  #L5050a2.  v4.`z6.i.c` @type ^`e7.c` := v6 @kind object;
  #L5050a6.  v4.`z6.i.d` @type ^`a7.a` := v7 @kind object;
  #L5050aa.  v6:= new `a7.d`;
  #L5050ae.  v7:= 0I;
  #L5050b0.  call `<init>`(v6, v7) @signature `La7/d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L5050b6.  v4.`z6.i.a` @type ^`a7.d` := v6 @kind object;
  #L5050ba.  call `r`(v4) @signature `Lz6/i;.r:()V` @kind direct;
  #L5050c0.  call temp:= `q`(v5) @signature `Lz6/f;.q:()Ljava/util/List;` @kind interface;
  #L5050c6.  v5:= temp @kind object;
  #L5050c8.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L5050ce.  v5:= temp @kind object;
  #L5050d0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L5050d6.  v6:= temp;
  #L5050d8.  if v6 == 0 then goto L50510a;
  #L5050dc.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L5050e2.  v6:= temp @kind object;
  #L5050e4.  v6:= (`z6.h`) v6 @kind object;
  #L5050e8.  v0:= v6.`z6.h.a` @type ^`long` @kind wide;
  #L5050ec.  v2:= 1L;
  #L5050f0.  v0:= v0 + v2 @kind long;
  #L5050f2.  v2:= v4.`z6.i.e` @type ^`long` @kind wide;
  #L5050f6.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L5050fc.  v0:= temp @kind wide;
  #L5050fe.  v4.`z6.i.e` @type ^`long` := v0 @kind wide;
  #L505102.  call `d`(v4, v6) @signature `Lz6/i;.d:(Lz6/h;)V` @kind direct;
  #L505108.  goto L5050d0;
  #L50510a.  return @kind void;
}
procedure `a7.i` `a`() @signature `Lz6/i;.a:()La7/i;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L504ccc.  v0:= `@@z6.i.h` @type ^`a7.i` @kind object;
  #L504cd0.  return v0 @kind object;
}
procedure `void` `b`(`z6.i` v0 @kind object, `z6.h` v1 @kind object) @signature `Lz6/i;.b:(Lz6/i;Lz6/h;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L50511c.  call `s`(v0, v1) @signature `Lz6/i;.s:(Lz6/h;)V` @kind direct;
  #L505122.  return @kind void;
}
procedure `void` `c`(`c7.i` v1 @kind object) @signature `Lz6/i;.c:(Lc7/i;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L505134.  call temp:= `g`(v1) @signature `Lc7/i;.g:()Z` @kind virtual;
  #L50513a.  v0:= temp;
  #L50513c.  if v0 == 0 then goto L505152;
  #L505140.  call temp:= `f`(v1) @signature `Lc7/i;.f:()Z` @kind virtual;
  #L505146.  v1:= temp;
  #L505148.  if v1 == 0 then goto L50514e;
  #L50514c.  goto L505152;
  #L50514e.  v1:= 0I;
  #L505150.  goto L505154;
  #L505152.  v1:= 1I;
  #L505154.  v0:= "Can't have tracked non-default query that loads all data" @kind object;
  #L505158.  call `g`(v1, v0) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L50515e.  return @kind void;
}
procedure `void` `d`(`z6.i` v6 @kind this, `z6.h` v7 @kind object) @signature `Lz6/i;.d:(Lz6/h;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L505170.  v0:= v7.`z6.h.b` @type ^`c7.i` @kind object;
  #L505174.  call `c`(v0) @signature `Lz6/i;.c:(Lc7/i;)V` @kind static;
  #L50517a.  v0:= v6.`z6.i.a` @type ^`a7.d` @kind object;
  #L50517e.  v1:= v7.`z6.h.b` @type ^`c7.i` @kind object;
  #L505182.  call temp:= `e`(v1) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L505188.  v1:= temp @kind object;
  #L50518a.  call temp:= `y`(v0, v1) @signature `La7/d;.y:(Lx6/l;)Ljava/lang/Object;` @kind virtual;
  #L505190.  v0:= temp @kind object;
  #L505192.  v0:= (`java.util.Map`) v0 @kind object;
  #L505196.  if v0 != 0 then goto L5051c0;
  #L50519a.  v0:= new `java.util.HashMap`;
  #L50519e.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L5051a4.  v1:= v6.`z6.i.a` @type ^`a7.d` @kind object;
  #L5051a8.  v2:= v7.`z6.h.b` @type ^`c7.i` @kind object;
  #L5051ac.  call temp:= `e`(v2) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L5051b2.  v2:= temp @kind object;
  #L5051b4.  call temp:= `Y`(v1, v2, v0) @signature `La7/d;.Y:(Lx6/l;Ljava/lang/Object;)La7/d;` @kind virtual;
  #L5051ba.  v1:= temp @kind object;
  #L5051bc.  v6.`z6.i.a` @type ^`a7.d` := v1 @kind object;
  #L5051c0.  v1:= v7.`z6.h.b` @type ^`c7.i` @kind object;
  #L5051c4.  call temp:= `d`(v1) @signature `Lc7/i;.d:()Lc7/h;` @kind virtual;
  #L5051ca.  v1:= temp @kind object;
  #L5051cc.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L5051d2.  v1:= temp @kind object;
  #L5051d4.  v1:= (`z6.h`) v1 @kind object;
  #L5051d8.  if v1 == 0 then goto L5051f2;
  #L5051dc.  v1:= v1.`z6.h.a` @type ^`long` @kind wide;
  #L5051e0.  v3:= v7.`z6.h.a` @type ^`long` @kind wide;
  #L5051e4.  v5:= lcmp(v1, v3);
  #L5051e8.  if v5 != 0 then goto L5051ee;
  #L5051ec.  goto L5051f2;
  #L5051ee.  v1:= 0I;
  #L5051f0.  goto L5051f4;
  #L5051f2.  v1:= 1I;
  #L5051f4.  call `f`(v1) @signature `La7/m;.f:(Z)V` @kind static;
  #L5051fa.  v1:= v7.`z6.h.b` @type ^`c7.i` @kind object;
  #L5051fe.  call temp:= `d`(v1) @signature `Lc7/i;.d:()Lc7/h;` @kind virtual;
  #L505204.  v1:= temp @kind object;
  #L505206.  call temp:= `put`(v0, v1, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50520c.  return @kind void;
}
procedure `long` `e`(`z6.a` v4 @kind object, `long` v5 ) @signature `Lz6/i;.e:(Lz6/a;J)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L504fd8.  call temp:= `b`(v4) @signature `Lz6/a;.b:()F` @kind interface;
  #L504fde.  v0:= temp;
  #L504fe0.  v1:= 1.0F;
  #L504fe4.  v1:= v1 - v0 @kind float;
  #L504fe6.  v0:= (`float`) v5 @kind l2f;
  #L504fe8.  v0:= v0 * v1 @kind float;
  #L504fec.  v0:= (`double`) v0 @kind f2d;
  #L504fee.  call temp:= `floor`(v0) @signature `Ljava/lang/Math;.floor:(D)D` @kind static;
  #L504ff4.  v0:= temp @kind wide;
  #L504ff6.  v0:= (`long`) v0 @kind d2l;
  #L504ff8.  call temp:= `c`(v4) @signature `Lz6/a;.c:()J` @kind interface;
  #L504ffe.  v2:= temp @kind wide;
  #L505000.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L505006.  v0:= temp @kind wide;
  #L505008.  v5:= v5 - v0 @kind long;
  #L50500a.  return v5 @kind wide;
}
procedure `java.util.Set` `h`(`z6.i` v3 @kind this, `x6.l` v4 @kind object) @signature `Lz6/i;.h:(Lx6/l;)Ljava/util/Set;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L504e80.  v0:= new `java.util.HashSet`;
  #L504e84.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L504e8a.  v1:= v3.`z6.i.a` @type ^`a7.d` @kind object;
  #L504e8e.  call temp:= `y`(v1, v4) @signature `La7/d;.y:(Lx6/l;)Ljava/lang/Object;` @kind virtual;
  #L504e94.  v4:= temp @kind object;
  #L504e96.  v4:= (`java.util.Map`) v4 @kind object;
  #L504e9a.  if v4 == 0 then goto L504eea;
  #L504e9e.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L504ea4.  v4:= temp @kind object;
  #L504ea6.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L504eac.  v4:= temp @kind object;
  #L504eae.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L504eb4.  v1:= temp;
  #L504eb6.  if v1 == 0 then goto L504eea;
  #L504eba.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L504ec0.  v1:= temp @kind object;
  #L504ec2.  v1:= (`z6.h`) v1 @kind object;
  #L504ec6.  v2:= v1.`z6.h.b` @type ^`c7.i` @kind object;
  #L504eca.  call temp:= `g`(v2) @signature `Lc7/i;.g:()Z` @kind virtual;
  #L504ed0.  v2:= temp;
  #L504ed2.  if v2 != 0 then goto L504eae;
  #L504ed6.  v1:= v1.`z6.h.a` @type ^`long` @kind wide;
  #L504eda.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L504ee0.  v1:= temp @kind object;
  #L504ee2.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L504ee8.  goto L504eae;
  #L504eea.  return v0 @kind object;
}
procedure `java.util.List` `k`(`z6.i` v5 @kind this, `a7.i` v6 @kind object) @signature `Lz6/i;.k:(La7/i;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L504df8.  v0:= new `java.util.ArrayList`;
  #L504dfc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L504e02.  v1:= v5.`z6.i.a` @type ^`a7.d` @kind object;
  #L504e06.  call temp:= `iterator`(v1) @signature `La7/d;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L504e0c.  v1:= temp @kind object;
  #L504e0e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L504e14.  v2:= temp;
  #L504e16.  if v2 == 0 then goto L504e6e;
  #L504e1a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L504e20.  v2:= temp @kind object;
  #L504e22.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L504e26.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L504e2c.  v2:= temp @kind object;
  #L504e2e.  v2:= (`java.util.Map`) v2 @kind object;
  #L504e32.  call temp:= `values`(v2) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L504e38.  v2:= temp @kind object;
  #L504e3a.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L504e40.  v2:= temp @kind object;
  #L504e42.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L504e48.  v3:= temp;
  #L504e4a.  if v3 == 0 then goto L504e0e;
  #L504e4e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L504e54.  v3:= temp @kind object;
  #L504e56.  v3:= (`z6.h`) v3 @kind object;
  #L504e5a.  call temp:= `a`(v6, v3) @signature `La7/i;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L504e60.  v4:= temp;
  #L504e62.  if v4 == 0 then goto L504e42;
  #L504e66.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L504e6c.  goto L504e42;
  #L504e6e.  return v0 @kind object;
}
procedure `boolean` `m`(`z6.i` v2 @kind this, `x6.l` v3 @kind object) @signature `Lz6/i;.m:(Lx6/l;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L504d10.  v0:= v2.`z6.i.a` @type ^`a7.d` @kind object;
  #L504d14.  v1:= `@@z6.i.f` @type ^`a7.i` @kind object;
  #L504d18.  call temp:= `h`(v0, v3, v1) @signature `La7/d;.h:(Lx6/l;La7/i;)Lx6/l;` @kind virtual;
  #L504d1e.  v3:= temp @kind object;
  #L504d20.  if v3 == 0 then goto L504d28;
  #L504d24.  v3:= 1I;
  #L504d26.  goto L504d2a;
  #L504d28.  v3:= 0I;
  #L504d2a.  return v3;
}
procedure `c7.i` `o`(`c7.i` v1 @kind object) @signature `Lz6/i;.o:(Lc7/i;)Lc7/i;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L504dc8.  call temp:= `g`(v1) @signature `Lc7/i;.g:()Z` @kind virtual;
  #L504dce.  v0:= temp;
  #L504dd0.  if v0 == 0 then goto L504de4;
  #L504dd4.  call temp:= `e`(v1) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L504dda.  v1:= temp @kind object;
  #L504ddc.  call temp:= `a`(v1) @signature `Lc7/i;.a:(Lx6/l;)Lc7/i;` @kind static;
  #L504de2.  v1:= temp @kind object;
  #L504de4.  return v1 @kind object;
}
procedure `void` `r`(`z6.i` v3 @kind this) @signature `Lz6/i;.r:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L505330.  v0:= v3.`z6.i.b` @type ^`z6.f` @kind object;
  #L505334.  call `g`(v0) @signature `Lz6/f;.g:()V` @kind interface;
  #L50533a.  v0:= v3.`z6.i.b` @type ^`z6.f` @kind object;
  #L50533e.  v1:= v3.`z6.i.d` @type ^`a7.a` @kind object;
  #L505342.  call temp:= `a`(v1) @signature `La7/a;.a:()J` @kind interface;
  #L505348.  v1:= temp @kind wide;
  #L50534a.  call `k`(v0, v1) @signature `Lz6/f;.k:(J)V` @kind interface;
  #L505350.  v0:= v3.`z6.i.b` @type ^`z6.f` @kind object;
  #L505354.  call `s`(v0) @signature `Lz6/f;.s:()V` @kind interface;
  #L50535a.  v0:= v3.`z6.i.b` @type ^`z6.f` @kind object;
  #L50535e.  call `f`(v0) @signature `Lz6/f;.f:()V` @kind interface;
  #L505364.  return @kind void;
  #L505366.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L505368.  v1:= v3.`z6.i.b` @type ^`z6.f` @kind object;
  #L50536c.  call `f`(v1) @signature `Lz6/f;.f:()V` @kind interface;
  #L505372.  throw v0;
  catch `java.lang.Throwable` @[L505330..L50535a] goto L505366;
}
procedure `void` `s`(`z6.i` v1 @kind this, `z6.h` v2 @kind object) @signature `Lz6/i;.s:(Lz6/h;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L505390.  call `d`(v1, v2) @signature `Lz6/i;.d:(Lz6/h;)V` @kind direct;
  #L505396.  v0:= v1.`z6.i.b` @type ^`z6.f` @kind object;
  #L50539a.  call `j`(v0, v2) @signature `Lz6/f;.j:(Lz6/h;)V` @kind interface;
  #L5053a0.  return @kind void;
}
procedure `void` `v`(`z6.i` v8 @kind this, `c7.i` v9 @kind object, `boolean` v10 ) @signature `Lz6/i;.v:(Lc7/i;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L505400.  call temp:= `o`(v9) @signature `Lz6/i;.o:(Lc7/i;)Lc7/i;` @kind static;
  #L505406.  v3:= temp @kind object;
  #L505408.  call temp:= `i`(v8, v3) @signature `Lz6/i;.i:(Lc7/i;)Lz6/h;` @kind virtual;
  #L50540e.  v9:= temp @kind object;
  #L505410.  v0:= v8.`z6.i.d` @type ^`a7.a` @kind object;
  #L505414.  call temp:= `a`(v0) @signature `La7/a;.a:()J` @kind interface;
  #L50541a.  v4:= temp @kind wide;
  #L50541c.  if v9 == 0 then goto L505432;
  #L505420.  call temp:= `c`(v9, v4) @signature `Lz6/h;.c:(J)Lz6/h;` @kind virtual;
  #L505426.  v9:= temp @kind object;
  #L505428.  call temp:= `a`(v9, v10) @signature `Lz6/h;.a:(Z)Lz6/h;` @kind virtual;
  #L50542e.  v9:= temp @kind object;
  #L505430.  goto L50545a;
  #L505432.  v9:= "If we're setting the query to inactive, we should already be tracking it!" @kind object;
  #L505436.  call `g`(v10, v9) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L50543c.  v9:= new `z6.h`;
  #L505440.  v1:= v8.`z6.i.e` @type ^`long` @kind wide;
  #L505444.  v6:= 1L;
  #L505448.  v6:= v6 + v1 @kind long;
  #L50544a.  v8.`z6.i.e` @type ^`long` := v6 @kind wide;
  #L50544e.  v6:= 0I;
  #L505450.  v0:= v9 @kind object;
  #L505452.  v7:= v10;
  #L505454.  call `<init>`(v0, v1, v3, v4, v6, v7) @signature `Lz6/h;.<init>:(JLc7/i;JZZ)V` @kind direct;
  #L50545a.  call `s`(v8, v9) @signature `Lz6/i;.s:(Lz6/h;)V` @kind direct;
  #L505460.  return @kind void;
}
procedure `long` `f`(`z6.i` v2 @kind this) @signature `Lz6/i;.f:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50501c.  v0:= `@@z6.i.h` @type ^`a7.i` @kind object;
  #L505020.  call temp:= `k`(v2, v0) @signature `Lz6/i;.k:(La7/i;)Ljava/util/List;` @kind direct;
  #L505026.  v0:= temp @kind object;
  #L505028.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L50502e.  v0:= temp;
  #L505030.  v0:= (`long`) v0 @kind i2l;
  #L505032.  return v0 @kind wide;
}
procedure `void` `g`(`z6.i` v9 @kind this, `x6.l` v10 @kind object) @signature `Lz6/i;.g:(Lx6/l;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L505220.  call temp:= `m`(v9, v10) @signature `Lz6/i;.m:(Lx6/l;)Z` @kind direct;
  #L505226.  v0:= temp;
  #L505228.  if v0 != 0 then goto L50528c;
  #L50522c.  call temp:= `a`(v10) @signature `Lc7/i;.a:(Lx6/l;)Lc7/i;` @kind static;
  #L505232.  v4:= temp @kind object;
  #L505234.  call temp:= `i`(v9, v4) @signature `Lz6/i;.i:(Lc7/i;)Lz6/h;` @kind virtual;
  #L50523a.  v10:= temp @kind object;
  #L50523c.  if v10 != 0 then goto L50526c;
  #L505240.  v10:= new `z6.h`;
  #L505244.  v2:= v9.`z6.i.e` @type ^`long` @kind wide;
  #L505248.  v0:= 1L;
  #L50524c.  v0:= v0 + v2 @kind long;
  #L50524e.  v9.`z6.i.e` @type ^`long` := v0 @kind wide;
  #L505252.  v0:= v9.`z6.i.d` @type ^`a7.a` @kind object;
  #L505256.  call temp:= `a`(v0) @signature `La7/a;.a:()J` @kind interface;
  #L50525c.  v5:= temp @kind wide;
  #L50525e.  v7:= 1I;
  #L505260.  v8:= 0I;
  #L505262.  v1:= v10 @kind object;
  #L505264.  call `<init>`(v1, v2, v4, v5, v7, v8) @signature `Lz6/h;.<init>:(JLc7/i;JZZ)V` @kind direct;
  #L50526a.  goto L505286;
  #L50526c.  v0:= v10.`z6.h.d` @type ^`boolean` @kind boolean;
  #L505270.  v0:= v0 ^~ 1;
  #L505274.  v1:= "This should have been handled above!" @kind object;
  #L505278.  call `g`(v0, v1) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L50527e.  call temp:= `b`(v10) @signature `Lz6/h;.b:()Lz6/h;` @kind virtual;
  #L505284.  v10:= temp @kind object;
  #L505286.  call `s`(v9, v10) @signature `Lz6/i;.s:(Lz6/h;)V` @kind direct;
  #L50528c.  return @kind void;
}
procedure `z6.h` `i`(`z6.i` v2 @kind this, `c7.i` v3 @kind object) @signature `Lz6/i;.i:(Lc7/i;)Lz6/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50566c.  call temp:= `o`(v3) @signature `Lz6/i;.o:(Lc7/i;)Lc7/i;` @kind static;
  #L505672.  v3:= temp @kind object;
  #L505674.  v0:= v2.`z6.i.a` @type ^`a7.d` @kind object;
  #L505678.  call temp:= `e`(v3) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L50567e.  v1:= temp @kind object;
  #L505680.  call temp:= `y`(v0, v1) @signature `La7/d;.y:(Lx6/l;)Ljava/lang/Object;` @kind virtual;
  #L505686.  v0:= temp @kind object;
  #L505688.  v0:= (`java.util.Map`) v0 @kind object;
  #L50568c.  if v0 == 0 then goto L5056a6;
  #L505690.  call temp:= `d`(v3) @signature `Lc7/i;.d:()Lc7/h;` @kind virtual;
  #L505696.  v3:= temp @kind object;
  #L505698.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50569e.  v3:= temp @kind object;
  #L5056a0.  v3:= (`z6.h`) v3 @kind object;
  #L5056a4.  goto L5056a8;
  #L5056a6.  v3:= 0I;
  #L5056a8.  return v3 @kind object;
}
procedure `java.util.Set` `j`(`z6.i` v4 @kind this, `x6.l` v5 @kind object) @signature `Lz6/i;.j:(Lx6/l;)Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L504efc.  call temp:= `a`(v5) @signature `Lc7/i;.a:(Lx6/l;)Lc7/i;` @kind static;
  #L504f02.  v0:= temp @kind object;
  #L504f04.  call temp:= `n`(v4, v0) @signature `Lz6/i;.n:(Lc7/i;)Z` @kind virtual;
  #L504f0a.  v0:= temp;
  #L504f0c.  v0:= v0 ^~ 1;
  #L504f10.  v1:= "Path is fully complete." @kind object;
  #L504f14.  call `g`(v0, v1) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L504f1a.  v0:= new `java.util.HashSet`;
  #L504f1e.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L504f24.  call temp:= `h`(v4, v5) @signature `Lz6/i;.h:(Lx6/l;)Ljava/util/Set;` @kind direct;
  #L504f2a.  v1:= temp @kind object;
  #L504f2c.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L504f32.  v2:= temp;
  #L504f34.  if v2 != 0 then goto L504f4a;
  #L504f38.  v2:= v4.`z6.i.b` @type ^`z6.f` @kind object;
  #L504f3c.  call temp:= `v`(v2, v1) @signature `Lz6/f;.v:(Ljava/util/Set;)Ljava/util/Set;` @kind interface;
  #L504f42.  v1:= temp @kind object;
  #L504f44.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L504f4a.  v1:= v4.`z6.i.a` @type ^`a7.d` @kind object;
  #L504f4e.  call temp:= `b0`(v1, v5) @signature `La7/d;.b0:(Lx6/l;)La7/d;` @kind virtual;
  #L504f54.  v5:= temp @kind object;
  #L504f56.  call temp:= `N`(v5) @signature `La7/d;.N:()Lu6/c;` @kind virtual;
  #L504f5c.  v5:= temp @kind object;
  #L504f5e.  call temp:= `iterator`(v5) @signature `Lu6/c;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L504f64.  v5:= temp @kind object;
  #L504f66.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L504f6c.  v1:= temp;
  #L504f6e.  if v1 == 0 then goto L504fc6;
  #L504f72.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L504f78.  v1:= temp @kind object;
  #L504f7a.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L504f7e.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L504f84.  v2:= temp @kind object;
  #L504f86.  v2:= (`f7.b`) v2 @kind object;
  #L504f8a.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L504f90.  v1:= temp @kind object;
  #L504f92.  v1:= (`a7.d`) v1 @kind object;
  #L504f96.  call temp:= `getValue`(v1) @signature `La7/d;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L504f9c.  v3:= temp @kind object;
  #L504f9e.  if v3 == 0 then goto L504f66;
  #L504fa2.  v3:= `@@z6.i.f` @type ^`a7.i` @kind object;
  #L504fa6.  call temp:= `getValue`(v1) @signature `La7/d;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L504fac.  v1:= temp @kind object;
  #L504fae.  v1:= (`java.util.Map`) v1 @kind object;
  #L504fb2.  call temp:= `a`(v3, v1) @signature `La7/i;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L504fb8.  v1:= temp;
  #L504fba.  if v1 == 0 then goto L504f66;
  #L504fbe.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L504fc4.  goto L504f66;
  #L504fc6.  return v0 @kind object;
}
procedure `boolean` `l`(`z6.i` v2 @kind this, `x6.l` v3 @kind object) @signature `Lz6/i;.l:(Lx6/l;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L504ce4.  v0:= v2.`z6.i.a` @type ^`a7.d` @kind object;
  #L504ce8.  v1:= `@@z6.i.g` @type ^`a7.i` @kind object;
  #L504cec.  call temp:= `T`(v0, v3, v1) @signature `La7/d;.T:(Lx6/l;La7/i;)Ljava/lang/Object;` @kind virtual;
  #L504cf2.  v3:= temp @kind object;
  #L504cf4.  if v3 == 0 then goto L504cfc;
  #L504cf8.  v3:= 1I;
  #L504cfa.  goto L504cfe;
  #L504cfc.  v3:= 0I;
  #L504cfe.  return v3;
}
procedure `boolean` `n`(`z6.i` v4 @kind this, `c7.i` v5 @kind object) @signature `Lz6/i;.n:(Lc7/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L504d3c.  call temp:= `e`(v5) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L504d42.  v0:= temp @kind object;
  #L504d44.  call temp:= `m`(v4, v0) @signature `Lz6/i;.m:(Lx6/l;)Z` @kind direct;
  #L504d4a.  v0:= temp;
  #L504d4c.  v1:= 1I;
  #L504d4e.  if v0 == 0 then goto L504d54;
  #L504d52.  return v1;
  #L504d54.  call temp:= `g`(v5) @signature `Lc7/i;.g:()Z` @kind virtual;
  #L504d5a.  v0:= temp;
  #L504d5c.  v2:= 0I;
  #L504d5e.  if v0 == 0 then goto L504d64;
  #L504d62.  return v2;
  #L504d64.  v0:= v4.`z6.i.a` @type ^`a7.d` @kind object;
  #L504d68.  call temp:= `e`(v5) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L504d6e.  v3:= temp @kind object;
  #L504d70.  call temp:= `y`(v0, v3) @signature `La7/d;.y:(Lx6/l;)Ljava/lang/Object;` @kind virtual;
  #L504d76.  v0:= temp @kind object;
  #L504d78.  v0:= (`java.util.Map`) v0 @kind object;
  #L504d7c.  if v0 == 0 then goto L504db2;
  #L504d80.  call temp:= `d`(v5) @signature `Lc7/i;.d:()Lc7/h;` @kind virtual;
  #L504d86.  v3:= temp @kind object;
  #L504d88.  call temp:= `containsKey`(v0, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L504d8e.  v3:= temp;
  #L504d90.  if v3 == 0 then goto L504db2;
  #L504d94.  call temp:= `d`(v5) @signature `Lc7/i;.d:()Lc7/h;` @kind virtual;
  #L504d9a.  v5:= temp @kind object;
  #L504d9c.  call temp:= `get`(v0, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L504da2.  v5:= temp @kind object;
  #L504da4.  v5:= (`z6.h`) v5 @kind object;
  #L504da8.  v5:= v5.`z6.h.d` @type ^`boolean` @kind boolean;
  #L504dac.  if v5 == 0 then goto L504db2;
  #L504db0.  goto L504db4;
  #L504db2.  v1:= 0I;
  #L504db4.  return v1;
}
procedure `z6.g` `p`(`z6.i` v8 @kind this, `z6.a` v9 @kind object) @signature `Lz6/i;.p:(Lz6/a;)Lz6/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L5054cc.  v0:= `@@z6.i.h` @type ^`a7.i` @kind object;
  #L5054d0.  call temp:= `k`(v8, v0) @signature `Lz6/i;.k:(La7/i;)Ljava/util/List;` @kind direct;
  #L5054d6.  v0:= temp @kind object;
  #L5054d8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L5054de.  v1:= temp;
  #L5054e0.  v1:= (`long`) v1 @kind i2l;
  #L5054e2.  call temp:= `e`(v9, v1) @signature `Lz6/i;.e:(Lz6/a;J)J` @kind static;
  #L5054e8.  v1:= temp @kind wide;
  #L5054ea.  v9:= new `z6.g`;
  #L5054ee.  call `<init>`(v9) @signature `Lz6/g;.<init>:()V` @kind direct;
  #L5054f4.  v3:= v8.`z6.i.c` @type ^`e7.c` @kind object;
  #L5054f8.  call temp:= `f`(v3) @signature `Le7/c;.f:()Z` @kind virtual;
  #L5054fe.  v3:= temp;
  #L505500.  v4:= 0I;
  #L505502.  if v3 == 0 then goto L50554e;
  #L505506.  v3:= v8.`z6.i.c` @type ^`e7.c` @kind object;
  #L50550a.  v5:= new `java.lang.StringBuilder`;
  #L50550e.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L505514.  v6:= "Pruning old queries.  Prunable: " @kind object;
  #L505518.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50551e.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L505524.  v6:= temp;
  #L505526.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50552c.  v6:= " Count to prune: " @kind object;
  #L505530.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L505536.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L50553c.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L505542.  v5:= temp @kind object;
  #L505544.  v6:= new `java.lang.Object`[v4];
  #L505548.  call `b`(v3, v5, v6) @signature `Le7/c;.b:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L50554e.  v3:= new `z6.i$f`;
  #L505552.  call `<init>`(v3, v8) @signature `Lz6/i$f;.<init>:(Lz6/i;)V` @kind direct;
  #L505558.  call `sort`(v0, v3) @signature `Ljava/util/Collections;.sort:(Ljava/util/List;Ljava/util/Comparator;)V` @kind static;
  #L50555e.  v3:= 0I;
  #L505560.  v5:= (`long`) v3 @kind i2l;
  #L505562.  v7:= lcmp(v5, v1);
  #L505566.  if v7 >= 0 then goto L50559a;
  #L50556a.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L505570.  v5:= temp @kind object;
  #L505572.  v5:= (`z6.h`) v5 @kind object;
  #L505576.  v6:= v5.`z6.h.b` @type ^`c7.i` @kind object;
  #L50557a.  call temp:= `e`(v6) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L505580.  v6:= temp @kind object;
  #L505582.  call temp:= `d`(v9, v6) @signature `Lz6/g;.d:(Lx6/l;)Lz6/g;` @kind virtual;
  #L505588.  v9:= temp @kind object;
  #L50558a.  v5:= v5.`z6.h.b` @type ^`c7.i` @kind object;
  #L50558e.  call `q`(v8, v5) @signature `Lz6/i;.q:(Lc7/i;)V` @kind virtual;
  #L505594.  v3:= v3 + 1;
  #L505598.  goto L505560;
  #L50559a.  v2:= (`int`) v1 @kind l2i;
  #L50559c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L5055a2.  v1:= temp;
  #L5055a4.  if v2 >= v1 then goto L5055ce;
  #L5055a8.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L5055ae.  v1:= temp @kind object;
  #L5055b0.  v1:= (`z6.h`) v1 @kind object;
  #L5055b4.  v1:= v1.`z6.h.b` @type ^`c7.i` @kind object;
  #L5055b8.  call temp:= `e`(v1) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L5055be.  v1:= temp @kind object;
  #L5055c0.  call temp:= `c`(v9, v1) @signature `Lz6/g;.c:(Lx6/l;)Lz6/g;` @kind virtual;
  #L5055c6.  v9:= temp @kind object;
  #L5055c8.  v2:= v2 + 1;
  #L5055cc.  goto L50559c;
  #L5055ce.  v0:= `@@z6.i.i` @type ^`a7.i` @kind object;
  #L5055d2.  call temp:= `k`(v8, v0) @signature `Lz6/i;.k:(La7/i;)Ljava/util/List;` @kind direct;
  #L5055d8.  v0:= temp @kind object;
  #L5055da.  v1:= v8.`z6.i.c` @type ^`e7.c` @kind object;
  #L5055de.  call temp:= `f`(v1) @signature `Le7/c;.f:()Z` @kind virtual;
  #L5055e4.  v1:= temp;
  #L5055e6.  if v1 == 0 then goto L505622;
  #L5055ea.  v1:= v8.`z6.i.c` @type ^`e7.c` @kind object;
  #L5055ee.  v2:= new `java.lang.StringBuilder`;
  #L5055f2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5055f8.  v3:= "Unprunable queries: " @kind object;
  #L5055fc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L505602.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L505608.  v3:= temp;
  #L50560a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L505610.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L505616.  v2:= temp @kind object;
  #L505618.  v3:= new `java.lang.Object`[v4];
  #L50561c.  call `b`(v1, v2, v3) @signature `Le7/c;.b:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L505622.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L505628.  v0:= temp @kind object;
  #L50562a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L505630.  v1:= temp;
  #L505632.  if v1 == 0 then goto L505658;
  #L505636.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L50563c.  v1:= temp @kind object;
  #L50563e.  v1:= (`z6.h`) v1 @kind object;
  #L505642.  v1:= v1.`z6.h.b` @type ^`c7.i` @kind object;
  #L505646.  call temp:= `e`(v1) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L50564c.  v1:= temp @kind object;
  #L50564e.  call temp:= `c`(v9, v1) @signature `Lz6/g;.c:(Lx6/l;)Lz6/g;` @kind virtual;
  #L505654.  v9:= temp @kind object;
  #L505656.  goto L50562a;
  #L505658.  return v9 @kind object;
}
procedure `void` `q`(`z6.i` v4 @kind this, `c7.i` v5 @kind object) @signature `Lz6/i;.q:(Lc7/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5052a0.  call temp:= `o`(v5) @signature `Lz6/i;.o:(Lc7/i;)Lc7/i;` @kind static;
  #L5052a6.  v5:= temp @kind object;
  #L5052a8.  call temp:= `i`(v4, v5) @signature `Lz6/i;.i:(Lc7/i;)Lz6/h;` @kind virtual;
  #L5052ae.  v0:= temp @kind object;
  #L5052b0.  if v0 == 0 then goto L5052b8;
  #L5052b4.  v1:= 1I;
  #L5052b6.  goto L5052ba;
  #L5052b8.  v1:= 0I;
  #L5052ba.  v2:= "Query must exist to be removed." @kind object;
  #L5052be.  call `g`(v1, v2) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L5052c4.  v1:= v4.`z6.i.b` @type ^`z6.f` @kind object;
  #L5052c8.  v2:= v0.`z6.h.a` @type ^`long` @kind wide;
  #L5052cc.  call `h`(v1, v2) @signature `Lz6/f;.h:(J)V` @kind interface;
  #L5052d2.  v0:= v4.`z6.i.a` @type ^`a7.d` @kind object;
  #L5052d6.  call temp:= `e`(v5) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L5052dc.  v1:= temp @kind object;
  #L5052de.  call temp:= `y`(v0, v1) @signature `La7/d;.y:(Lx6/l;)Ljava/lang/Object;` @kind virtual;
  #L5052e4.  v0:= temp @kind object;
  #L5052e6.  v0:= (`java.util.Map`) v0 @kind object;
  #L5052ea.  call temp:= `d`(v5) @signature `Lc7/i;.d:()Lc7/h;` @kind virtual;
  #L5052f0.  v1:= temp @kind object;
  #L5052f2.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L5052f8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L5052fe.  v0:= temp;
  #L505300.  if v0 == 0 then goto L50531c;
  #L505304.  v0:= v4.`z6.i.a` @type ^`a7.d` @kind object;
  #L505308.  call temp:= `e`(v5) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L50530e.  v5:= temp @kind object;
  #L505310.  call temp:= `S`(v0, v5) @signature `La7/d;.S:(Lx6/l;)La7/d;` @kind virtual;
  #L505316.  v5:= temp @kind object;
  #L505318.  v4.`z6.i.a` @type ^`a7.d` := v5 @kind object;
  #L50531c.  return @kind void;
}
procedure `void` `t`(`z6.i` v1 @kind this, `x6.l` v2 @kind object) @signature `Lz6/i;.t:(Lx6/l;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5053b4.  v0:= v1.`z6.i.a` @type ^`a7.d` @kind object;
  #L5053b8.  call temp:= `b0`(v0, v2) @signature `La7/d;.b0:(Lx6/l;)La7/d;` @kind virtual;
  #L5053be.  v2:= temp @kind object;
  #L5053c0.  v0:= new `z6.i$e`;
  #L5053c4.  call `<init>`(v0, v1) @signature `Lz6/i$e;.<init>:(Lz6/i;)V` @kind direct;
  #L5053ca.  call `u`(v2, v0) @signature `La7/d;.u:(La7/d$c;)V` @kind virtual;
  #L5053d0.  return @kind void;
}
procedure `void` `u`(`z6.i` v1 @kind this, `c7.i` v2 @kind object) @signature `Lz6/i;.u:(Lc7/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5053e4.  v0:= 1I;
  #L5053e6.  call `v`(v1, v2, v0) @signature `Lz6/i;.v:(Lc7/i;Z)V` @kind direct;
  #L5053ec.  return @kind void;
}
procedure `void` `w`(`z6.i` v1 @kind this, `c7.i` v2 @kind object) @signature `Lz6/i;.w:(Lc7/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L505474.  call temp:= `o`(v2) @signature `Lz6/i;.o:(Lc7/i;)Lc7/i;` @kind static;
  #L50547a.  v2:= temp @kind object;
  #L50547c.  call temp:= `i`(v1, v2) @signature `Lz6/i;.i:(Lc7/i;)Lz6/h;` @kind virtual;
  #L505482.  v2:= temp @kind object;
  #L505484.  if v2 == 0 then goto L50549e;
  #L505488.  v0:= v2.`z6.h.d` @type ^`boolean` @kind boolean;
  #L50548c.  if v0 != 0 then goto L50549e;
  #L505490.  call temp:= `b`(v2) @signature `Lz6/h;.b:()Lz6/h;` @kind virtual;
  #L505496.  v2:= temp @kind object;
  #L505498.  call `s`(v1, v2) @signature `Lz6/i;.s:(Lz6/h;)V` @kind direct;
  #L50549e.  return @kind void;
}
procedure `void` `x`(`z6.i` v1 @kind this, `c7.i` v2 @kind object) @signature `Lz6/i;.x:(Lc7/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5054b0.  v0:= 0I;
  #L5054b2.  call `v`(v1, v2, v0) @signature `Lz6/i;.v:(Lc7/i;Z)V` @kind direct;
  #L5054b8.  return @kind void;
}
