record `o.g` @kind class @AccessFlag PUBLIC {
  `int`[] `o.g.o` @AccessFlag ;
  `java.lang.Object`[] `o.g.p` @AccessFlag ;
  `int` `o.g.q` @AccessFlag ;
}
global `java.lang.Object`[] `@@o.g.r` @AccessFlag STATIC;
global `int` `@@o.g.s` @AccessFlag STATIC;
global `java.lang.Object`[] `@@o.g.t` @AccessFlag STATIC;
global `int` `@@o.g.u` @AccessFlag STATIC;
procedure `void` `<init>`(`o.g` v1 @kind this) @signature `Lo/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f8bbc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f8bc2.  v0:= `@@o.c.a` @type ^`int`[] @kind object;
  #L3f8bc6.  v1.`o.g.o` @type ^`int`[] := v0 @kind object;
  #L3f8bca.  v0:= `@@o.c.c` @type ^`java.lang.Object`[] @kind object;
  #L3f8bce.  v1.`o.g.p` @type ^`java.lang.Object`[] := v0 @kind object;
  #L3f8bd2.  v0:= 0I;
  #L3f8bd4.  v1.`o.g.q` @type ^`int` := v0;
  #L3f8bd8.  return @kind void;
}
procedure `void` `<init>`(`o.g` v0 @kind this, `int` v1 ) @signature `Lo/g;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f8bec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f8bf2.  if v1 != 0 then goto L3f8c08;
  #L3f8bf6.  v1:= `@@o.c.a` @type ^`int`[] @kind object;
  #L3f8bfa.  v0.`o.g.o` @type ^`int`[] := v1 @kind object;
  #L3f8bfe.  v1:= `@@o.c.c` @type ^`java.lang.Object`[] @kind object;
  #L3f8c02.  v0.`o.g.p` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3f8c06.  goto L3f8c0e;
  #L3f8c08.  call `a`(v0, v1) @signature `Lo/g;.a:(I)V` @kind direct;
  #L3f8c0e.  v1:= 0I;
  #L3f8c10.  v0.`o.g.q` @type ^`int` := v1;
  #L3f8c14.  return @kind void;
}
procedure `void` `<init>`(`o.g` v0 @kind this, `o.g` v1 @kind object) @signature `Lo/g;.<init>:(Lo/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f8c28.  call `<init>`(v0) @signature `Lo/g;.<init>:()V` @kind direct;
  #L3f8c2e.  if v1 == 0 then goto L3f8c38;
  #L3f8c32.  call `j`(v0, v1) @signature `Lo/g;.j:(Lo/g;)V` @kind virtual;
  #L3f8c38.  return @kind void;
}
procedure `void` `a`(`o.g` v5 @kind this, `int` v6 ) @signature `Lo/g;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f8c4c.  v0:= constclass @type ^`o.g` @kind object;
  #L3f8c50.  v1:= 0I;
  #L3f8c52.  v2:= 0I;
  #L3f8c54.  v3:= 1I;
  #L3f8c56.  v4:= 8I;
  #L3f8c5a.  if v6 != v4 then goto L3f8ca4;
  #L3f8c5e.  @monitorenter v0
  #L3f8c60.  v4:= `@@o.g.t` @type ^`java.lang.Object`[] @kind object;
  #L3f8c64.  if v4 == 0 then goto L3f8c9a;
  #L3f8c68.  v5.`o.g.p` @type ^`java.lang.Object`[] := v4 @kind object;
  #L3f8c6c.  v6:= v4[v2] @kind object;
  #L3f8c70.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L3f8c74.  `@@o.g.t` @type ^`java.lang.Object`[] := v6 @kind object;
  #L3f8c78.  v6:= v4[v3] @kind object;
  #L3f8c7c.  v6:= (`int`[]) v6 @kind object;
  #L3f8c80.  v5.`o.g.o` @type ^`int`[] := v6 @kind object;
  #L3f8c84.  v4[v3]:= v1 @kind object;
  #L3f8c88.  v4[v2]:= v1 @kind object;
  #L3f8c8c.  v6:= `@@o.g.u` @type ^`int`;
  #L3f8c90.  v6:= v6 - v3 @kind int;
  #L3f8c92.  `@@o.g.u` @type ^`int` := v6;
  #L3f8c96.  @monitorexit v0
  #L3f8c98.  return @kind void;
  #L3f8c9a.  @monitorexit v0
  #L3f8c9c.  goto L3f8cf0;
  #L3f8c9e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f8ca0.  @monitorexit v0
  #L3f8ca2.  throw v6;
  #L3f8ca4.  v4:= 4I;
  #L3f8ca6.  if v6 != v4 then goto L3f8cf0;
  #L3f8caa.  @monitorenter v0
  #L3f8cac.  v4:= `@@o.g.r` @type ^`java.lang.Object`[] @kind object;
  #L3f8cb0.  if v4 == 0 then goto L3f8ce6;
  #L3f8cb4.  v5.`o.g.p` @type ^`java.lang.Object`[] := v4 @kind object;
  #L3f8cb8.  v6:= v4[v2] @kind object;
  #L3f8cbc.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L3f8cc0.  `@@o.g.r` @type ^`java.lang.Object`[] := v6 @kind object;
  #L3f8cc4.  v6:= v4[v3] @kind object;
  #L3f8cc8.  v6:= (`int`[]) v6 @kind object;
  #L3f8ccc.  v5.`o.g.o` @type ^`int`[] := v6 @kind object;
  #L3f8cd0.  v4[v3]:= v1 @kind object;
  #L3f8cd4.  v4[v2]:= v1 @kind object;
  #L3f8cd8.  v6:= `@@o.g.s` @type ^`int`;
  #L3f8cdc.  v6:= v6 - v3 @kind int;
  #L3f8cde.  `@@o.g.s` @type ^`int` := v6;
  #L3f8ce2.  @monitorexit v0
  #L3f8ce4.  return @kind void;
  #L3f8ce6.  @monitorexit v0
  #L3f8ce8.  goto L3f8cf0;
  #L3f8cea.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f8cec.  @monitorexit v0
  #L3f8cee.  throw v6;
  #L3f8cf0.  v0:= new `int`[v6];
  #L3f8cf4.  v5.`o.g.o` @type ^`int`[] := v0 @kind object;
  #L3f8cf8.  v6:= v6 ^< v3 @kind int;
  #L3f8cfa.  v6:= new `java.lang.Object`[v6];
  #L3f8cfe.  v5.`o.g.p` @type ^`java.lang.Object`[] := v6 @kind object;
  #L3f8d02.  return @kind void;
  catch `java.lang.Throwable` @[L3f8c60..L3f8ca2] goto L3f8c9e;
  catch `java.lang.Throwable` @[L3f8cac..L3f8cee] goto L3f8cea;
}
procedure `int` `b`(`int`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lo/g;.b:([III)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L3f84fc.  call temp:= `a`(v0, v1, v2) @signature `Lo/c;.a:([III)I` @kind static;
  #L3f8502.  v0:= temp;
  #L3f8504.  return v0;
  #L3f8506.  v0:= new `java.util.ConcurrentModificationException`;
  #L3f850a.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L3f8510.  throw v0;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L3f84fc..L3f8504] goto L3f8506;
}
procedure `void` `d`(`int`[] v8 @kind object, `java.lang.Object`[] v9 @kind object, `int` v10 ) @signature `Lo/g;.d:([I[Ljava/lang/Object;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f8de8.  v0:= constclass @type ^`o.g` @kind object;
  #L3f8dec.  v1:= length @variable v8;
  #L3f8dee.  v2:= 0I;
  #L3f8df0.  v3:= 2I;
  #L3f8df2.  v4:= 0I;
  #L3f8df4.  v5:= 10I;
  #L3f8df8.  v6:= 1I;
  #L3f8dfa.  v7:= 8I;
  #L3f8dfe.  if v1 != v7 then goto L3f8e44;
  #L3f8e02.  @monitorenter v0
  #L3f8e04.  v1:= `@@o.g.u` @type ^`int`;
  #L3f8e08.  if v1 >= v5 then goto L3f8e3a;
  #L3f8e0c.  v1:= `@@o.g.t` @type ^`java.lang.Object`[] @kind object;
  #L3f8e10.  v9[v4]:= v1 @kind object;
  #L3f8e14.  v9[v6]:= v8 @kind object;
  #L3f8e18.  v8:= v10 ^< 1;
  #L3f8e1c.  v8:= v8 - v6 @kind int;
  #L3f8e1e.  if v8 < v3 then goto L3f8e2c;
  #L3f8e22.  v9[v8]:= v2 @kind object;
  #L3f8e26.  v8:= v8 + -1;
  #L3f8e2a.  goto L3f8e1e;
  #L3f8e2c.  `@@o.g.t` @type ^`java.lang.Object`[] := v9 @kind object;
  #L3f8e30.  v8:= `@@o.g.u` @type ^`int`;
  #L3f8e34.  v8:= v8 + v6 @kind int;
  #L3f8e36.  `@@o.g.u` @type ^`int` := v8;
  #L3f8e3a.  @monitorexit v0
  #L3f8e3c.  goto L3f8e8e;
  #L3f8e3e.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f8e40.  @monitorexit v0
  #L3f8e42.  throw v8;
  #L3f8e44.  v1:= length @variable v8;
  #L3f8e46.  v7:= 4I;
  #L3f8e48.  if v1 != v7 then goto L3f8e8e;
  #L3f8e4c.  @monitorenter v0
  #L3f8e4e.  v1:= `@@o.g.s` @type ^`int`;
  #L3f8e52.  if v1 >= v5 then goto L3f8e84;
  #L3f8e56.  v1:= `@@o.g.r` @type ^`java.lang.Object`[] @kind object;
  #L3f8e5a.  v9[v4]:= v1 @kind object;
  #L3f8e5e.  v9[v6]:= v8 @kind object;
  #L3f8e62.  v8:= v10 ^< 1;
  #L3f8e66.  v8:= v8 - v6 @kind int;
  #L3f8e68.  if v8 < v3 then goto L3f8e76;
  #L3f8e6c.  v9[v8]:= v2 @kind object;
  #L3f8e70.  v8:= v8 + -1;
  #L3f8e74.  goto L3f8e68;
  #L3f8e76.  `@@o.g.r` @type ^`java.lang.Object`[] := v9 @kind object;
  #L3f8e7a.  v8:= `@@o.g.s` @type ^`int`;
  #L3f8e7e.  v8:= v8 + v6 @kind int;
  #L3f8e80.  `@@o.g.s` @type ^`int` := v8;
  #L3f8e84.  @monitorexit v0
  #L3f8e86.  goto L3f8e8e;
  #L3f8e88.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f8e8a.  @monitorexit v0
  #L3f8e8c.  throw v8;
  #L3f8e8e.  return @kind void;
  catch `java.lang.Throwable` @[L3f8e04..L3f8e42] goto L3f8e3e;
  catch `java.lang.Throwable` @[L3f8e4e..L3f8e8c] goto L3f8e88;
}
procedure `void` `c`(`o.g` v5 @kind this, `int` v6 ) @signature `Lo/g;.c:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f8d80.  v0:= v5.`o.g.q` @type ^`int`;
  #L3f8d84.  v1:= v5.`o.g.o` @type ^`int`[] @kind object;
  #L3f8d88.  v2:= length @variable v1;
  #L3f8d8a.  if v2 >= v6 then goto L3f8dc0;
  #L3f8d8e.  v2:= v5.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8d92.  call `a`(v5, v6) @signature `Lo/g;.a:(I)V` @kind direct;
  #L3f8d98.  v6:= v5.`o.g.q` @type ^`int`;
  #L3f8d9c.  if v6 <= 0 then goto L3f8dba;
  #L3f8da0.  v6:= v5.`o.g.o` @type ^`int`[] @kind object;
  #L3f8da4.  v3:= 0I;
  #L3f8da6.  call `arraycopy`(v1, v3, v6, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f8dac.  v6:= v5.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8db0.  v4:= v0 ^< 1;
  #L3f8db4.  call `arraycopy`(v2, v3, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f8dba.  call `d`(v1, v2, v0) @signature `Lo/g;.d:([I[Ljava/lang/Object;I)V` @kind static;
  #L3f8dc0.  v6:= v5.`o.g.q` @type ^`int`;
  #L3f8dc4.  if v6 != v0 then goto L3f8dca;
  #L3f8dc8.  return @kind void;
  #L3f8dca.  v6:= new `java.util.ConcurrentModificationException`;
  #L3f8dce.  call `<init>`(v6) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L3f8dd4.  throw v6;
}
procedure `void` `clear`(`o.g` v4 @kind this) @signature `Lo/g;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f8d2c.  v0:= v4.`o.g.q` @type ^`int`;
  #L3f8d30.  if v0 <= 0 then goto L3f8d58;
  #L3f8d34.  v1:= v4.`o.g.o` @type ^`int`[] @kind object;
  #L3f8d38.  v2:= v4.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8d3c.  v3:= `@@o.c.a` @type ^`int`[] @kind object;
  #L3f8d40.  v4.`o.g.o` @type ^`int`[] := v3 @kind object;
  #L3f8d44.  v3:= `@@o.c.c` @type ^`java.lang.Object`[] @kind object;
  #L3f8d48.  v4.`o.g.p` @type ^`java.lang.Object`[] := v3 @kind object;
  #L3f8d4c.  v3:= 0I;
  #L3f8d4e.  v4.`o.g.q` @type ^`int` := v3;
  #L3f8d52.  call `d`(v1, v2, v0) @signature `Lo/g;.d:([I[Ljava/lang/Object;I)V` @kind static;
  #L3f8d58.  v0:= v4.`o.g.q` @type ^`int`;
  #L3f8d5c.  if v0 > 0 then goto L3f8d62;
  #L3f8d60.  return @kind void;
  #L3f8d62.  v0:= new `java.util.ConcurrentModificationException`;
  #L3f8d66.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L3f8d6c.  throw v0;
}
procedure `boolean` `containsKey`(`o.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/g;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f82e4.  call temp:= `f`(v0, v1) @signature `Lo/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L3f82ea.  v1:= temp;
  #L3f82ec.  if v1 < 0 then goto L3f82f4;
  #L3f82f0.  v1:= 1I;
  #L3f82f2.  goto L3f82f6;
  #L3f82f4.  v1:= 0I;
  #L3f82f6.  return v1;
}
procedure `boolean` `containsValue`(`o.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/g;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f8308.  call temp:= `h`(v0, v1) @signature `Lo/g;.h:(Ljava/lang/Object;)I` @kind virtual;
  #L3f830e.  v1:= temp;
  #L3f8310.  if v1 < 0 then goto L3f8318;
  #L3f8314.  v1:= 1I;
  #L3f8316.  goto L3f831a;
  #L3f8318.  v1:= 0I;
  #L3f831a.  return v1;
}
procedure `int` `e`(`o.g` v5 @kind this, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lo/g;.e:(Ljava/lang/Object;I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f8584.  v0:= v5.`o.g.q` @type ^`int`;
  #L3f8588.  if v0 != 0 then goto L3f8590;
  #L3f858c.  v6:= -1I;
  #L3f858e.  return v6;
  #L3f8590.  v1:= v5.`o.g.o` @type ^`int`[] @kind object;
  #L3f8594.  call temp:= `b`(v1, v0, v7) @signature `Lo/g;.b:([III)I` @kind static;
  #L3f859a.  v1:= temp;
  #L3f859c.  if v1 >= 0 then goto L3f85a2;
  #L3f85a0.  return v1;
  #L3f85a2.  v2:= v5.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f85a6.  v3:= v1 ^< 1;
  #L3f85aa.  v2:= v2[v3] @kind object;
  #L3f85ae.  call temp:= `equals`(v6, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f85b4.  v2:= temp;
  #L3f85b6.  if v2 == 0 then goto L3f85bc;
  #L3f85ba.  return v1;
  #L3f85bc.  v2:= v1 + 1;
  #L3f85c0.  if v2 >= v0 then goto L3f85f0;
  #L3f85c4.  v3:= v5.`o.g.o` @type ^`int`[] @kind object;
  #L3f85c8.  v3:= v3[v2];
  #L3f85cc.  if v3 != v7 then goto L3f85f0;
  #L3f85d0.  v3:= v5.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f85d4.  v4:= v2 ^< 1;
  #L3f85d8.  v3:= v3[v4] @kind object;
  #L3f85dc.  call temp:= `equals`(v6, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f85e2.  v3:= temp;
  #L3f85e4.  if v3 == 0 then goto L3f85ea;
  #L3f85e8.  return v2;
  #L3f85ea.  v2:= v2 + 1;
  #L3f85ee.  goto L3f85c0;
  #L3f85f0.  v1:= v1 + -1;
  #L3f85f4.  if v1 < 0 then goto L3f8624;
  #L3f85f8.  v0:= v5.`o.g.o` @type ^`int`[] @kind object;
  #L3f85fc.  v0:= v0[v1];
  #L3f8600.  if v0 != v7 then goto L3f8624;
  #L3f8604.  v0:= v5.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8608.  v3:= v1 ^< 1;
  #L3f860c.  v0:= v0[v3] @kind object;
  #L3f8610.  call temp:= `equals`(v6, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f8616.  v0:= temp;
  #L3f8618.  if v0 == 0 then goto L3f861e;
  #L3f861c.  return v1;
  #L3f861e.  v1:= v1 + -1;
  #L3f8622.  goto L3f85f4;
  #L3f8624.  v6:= ~v2 @kind int;
  #L3f8626.  return v6;
}
procedure `boolean` `equals`(`o.g` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lo/g;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f832c.  v0:= 1I;
  #L3f832e.  if v6 != v7 then goto L3f8334;
  #L3f8332.  return v0;
  #L3f8334.  v1:= instanceof @variable v7 @type ^`o.g` @kind boolean;
  #L3f8338.  v2:= 0I;
  #L3f833a.  if v1 == 0 then goto L3f83a8;
  #L3f833e.  v7:= (`o.g`) v7 @kind object;
  #L3f8342.  call temp:= `size`(v6) @signature `Lo/g;.size:()I` @kind virtual;
  #L3f8348.  v1:= temp;
  #L3f834a.  call temp:= `size`(v7) @signature `Lo/g;.size:()I` @kind virtual;
  #L3f8350.  v3:= temp;
  #L3f8352.  if v1 == v3 then goto L3f8358;
  #L3f8356.  return v2;
  #L3f8358.  v1:= 0I;
  #L3f835a.  v3:= v6.`o.g.q` @type ^`int`;
  #L3f835e.  if v1 >= v3 then goto L3f83a4;
  #L3f8362.  call temp:= `i`(v6, v1) @signature `Lo/g;.i:(I)Ljava/lang/Object;` @kind virtual;
  #L3f8368.  v3:= temp @kind object;
  #L3f836a.  call temp:= `m`(v6, v1) @signature `Lo/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L3f8370.  v4:= temp @kind object;
  #L3f8372.  call temp:= `get`(v7, v3) @signature `Lo/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f8378.  v5:= temp @kind object;
  #L3f837a.  if v4 != 0 then goto L3f8390;
  #L3f837e.  if v5 != 0 then goto L3f838e;
  #L3f8382.  call temp:= `containsKey`(v7, v3) @signature `Lo/g;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f8388.  v3:= temp;
  #L3f838a.  if v3 != 0 then goto L3f839e;
  #L3f838e.  return v2;
  #L3f8390.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f8396.  v3:= temp;
  #L3f8398.  if v3 != 0 then goto L3f839e;
  #L3f839c.  return v2;
  #L3f839e.  v1:= v1 + 1;
  #L3f83a2.  goto L3f835a;
  #L3f83a4.  return v0;
  #L3f83a6.  return v2;
  #L3f83a8.  v1:= instanceof @variable v7 @type ^`java.util.Map` @kind boolean;
  #L3f83ac.  if v1 == 0 then goto L3f8418;
  #L3f83b0.  v7:= (`java.util.Map`) v7 @kind object;
  #L3f83b4.  call temp:= `size`(v6) @signature `Lo/g;.size:()I` @kind virtual;
  #L3f83ba.  v1:= temp;
  #L3f83bc.  call temp:= `size`(v7) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3f83c2.  v3:= temp;
  #L3f83c4.  if v1 == v3 then goto L3f83ca;
  #L3f83c8.  return v2;
  #L3f83ca.  v1:= 0I;
  #L3f83cc.  v3:= v6.`o.g.q` @type ^`int`;
  #L3f83d0.  if v1 >= v3 then goto L3f8416;
  #L3f83d4.  call temp:= `i`(v6, v1) @signature `Lo/g;.i:(I)Ljava/lang/Object;` @kind virtual;
  #L3f83da.  v3:= temp @kind object;
  #L3f83dc.  call temp:= `m`(v6, v1) @signature `Lo/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L3f83e2.  v4:= temp @kind object;
  #L3f83e4.  call temp:= `get`(v7, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f83ea.  v5:= temp @kind object;
  #L3f83ec.  if v4 != 0 then goto L3f8402;
  #L3f83f0.  if v5 != 0 then goto L3f8400;
  #L3f83f4.  call temp:= `containsKey`(v7, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L3f83fa.  v3:= temp;
  #L3f83fc.  if v3 != 0 then goto L3f8410;
  #L3f8400.  return v2;
  #L3f8402.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f8408.  v3:= temp;
  #L3f840a.  if v3 != 0 then goto L3f8410;
  #L3f840e.  return v2;
  #L3f8410.  v1:= v1 + 1;
  #L3f8414.  goto L3f83cc;
  #L3f8416.  return v0;
  #L3f8418.  return v2;
  catch `java.lang.NullPointerException` @[L3f835a..L3f8398] goto L3f83a6;
  catch `java.lang.ClassCastException` @[L3f835a..L3f8398] goto L3f83a6;
  catch `java.lang.NullPointerException` @[L3f83cc..L3f840a] goto L3f8418;
  catch `java.lang.ClassCastException` @[L3f83cc..L3f840a] goto L3f8418;
}
procedure `int` `f`(`o.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lo/g;.f:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8638.  if v2 != 0 then goto L3f8646;
  #L3f863c.  call temp:= `g`(v1) @signature `Lo/g;.g:()I` @kind virtual;
  #L3f8642.  v2:= temp;
  #L3f8644.  goto L3f8656;
  #L3f8646.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f864c.  v0:= temp;
  #L3f864e.  call temp:= `e`(v1, v2, v0) @signature `Lo/g;.e:(Ljava/lang/Object;I)I` @kind virtual;
  #L3f8654.  v2:= temp;
  #L3f8656.  return v2;
}
procedure `int` `g`(`o.g` v5 @kind this) @signature `Lo/g;.g:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f8668.  v0:= v5.`o.g.q` @type ^`int`;
  #L3f866c.  if v0 != 0 then goto L3f8674;
  #L3f8670.  v0:= -1I;
  #L3f8672.  return v0;
  #L3f8674.  v1:= v5.`o.g.o` @type ^`int`[] @kind object;
  #L3f8678.  v2:= 0I;
  #L3f867a.  call temp:= `b`(v1, v0, v2) @signature `Lo/g;.b:([III)I` @kind static;
  #L3f8680.  v1:= temp;
  #L3f8682.  if v1 >= 0 then goto L3f8688;
  #L3f8686.  return v1;
  #L3f8688.  v2:= v5.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f868c.  v3:= v1 ^< 1;
  #L3f8690.  v2:= v2[v3] @kind object;
  #L3f8694.  if v2 != 0 then goto L3f869a;
  #L3f8698.  return v1;
  #L3f869a.  v2:= v1 + 1;
  #L3f869e.  if v2 >= v0 then goto L3f86c6;
  #L3f86a2.  v3:= v5.`o.g.o` @type ^`int`[] @kind object;
  #L3f86a6.  v3:= v3[v2];
  #L3f86aa.  if v3 != 0 then goto L3f86c6;
  #L3f86ae.  v3:= v5.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f86b2.  v4:= v2 ^< 1;
  #L3f86b6.  v3:= v3[v4] @kind object;
  #L3f86ba.  if v3 != 0 then goto L3f86c0;
  #L3f86be.  return v2;
  #L3f86c0.  v2:= v2 + 1;
  #L3f86c4.  goto L3f869e;
  #L3f86c6.  v1:= v1 + -1;
  #L3f86ca.  if v1 < 0 then goto L3f86f2;
  #L3f86ce.  v0:= v5.`o.g.o` @type ^`int`[] @kind object;
  #L3f86d2.  v0:= v0[v1];
  #L3f86d6.  if v0 != 0 then goto L3f86f2;
  #L3f86da.  v0:= v5.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f86de.  v3:= v1 ^< 1;
  #L3f86e2.  v0:= v0[v3] @kind object;
  #L3f86e6.  if v0 != 0 then goto L3f86ec;
  #L3f86ea.  return v1;
  #L3f86ec.  v1:= v1 + -1;
  #L3f86f0.  goto L3f86ca;
  #L3f86f2.  v0:= ~v2 @kind int;
  #L3f86f4.  return v0;
}
procedure `java.lang.Object` `get`(`o.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lo/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8780.  v0:= 0I;
  #L3f8782.  call temp:= `getOrDefault`(v1, v2, v0) @signature `Lo/g;.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f8788.  v2:= temp @kind object;
  #L3f878a.  return v2 @kind object;
}
procedure `java.lang.Object` `getOrDefault`(`o.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lo/g;.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L3f879c.  call temp:= `f`(v0, v1) @signature `Lo/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L3f87a2.  v1:= temp;
  #L3f87a4.  if v1 < 0 then goto L3f87b8;
  #L3f87a8.  v2:= v0.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f87ac.  v1:= v1 ^< 1;
  #L3f87b0.  v1:= v1 + 1;
  #L3f87b4.  v2:= v2[v1] @kind object;
  #L3f87b8.  return v2 @kind object;
}
procedure `int` `h`(`o.g` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lo/g;.h:(Ljava/lang/Object;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f8708.  v0:= v5.`o.g.q` @type ^`int`;
  #L3f870c.  v0:= v0 * 2;
  #L3f8710.  v1:= v5.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8714.  v2:= 1I;
  #L3f8716.  if v6 != 0 then goto L3f8732;
  #L3f871a.  v6:= 1I;
  #L3f871c.  if v6 >= v0 then goto L3f8754;
  #L3f8720.  v3:= v1[v6] @kind object;
  #L3f8724.  if v3 != 0 then goto L3f872c;
  #L3f8728.  v6:= v6 ^> v2 @kind int;
  #L3f872a.  return v6;
  #L3f872c.  v6:= v6 + 2;
  #L3f8730.  goto L3f871c;
  #L3f8732.  v3:= 1I;
  #L3f8734.  if v3 >= v0 then goto L3f8754;
  #L3f8738.  v4:= v1[v3] @kind object;
  #L3f873c.  call temp:= `equals`(v6, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f8742.  v4:= temp;
  #L3f8744.  if v4 == 0 then goto L3f874e;
  #L3f8748.  v6:= v3 ^> 1;
  #L3f874c.  return v6;
  #L3f874e.  v3:= v3 + 2;
  #L3f8752.  goto L3f8734;
  #L3f8754.  v6:= -1I;
  #L3f8756.  return v6;
}
procedure `int` `hashCode`(`o.g` v9 @kind this) @signature `Lo/g;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f8534.  v0:= v9.`o.g.o` @type ^`int`[] @kind object;
  #L3f8538.  v1:= v9.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f853c.  v2:= v9.`o.g.q` @type ^`int`;
  #L3f8540.  v3:= 1I;
  #L3f8542.  v4:= 0I;
  #L3f8544.  v5:= 0I;
  #L3f8546.  v6:= 0I;
  #L3f8548.  if v5 >= v2 then goto L3f8572;
  #L3f854c.  v7:= v1[v3] @kind object;
  #L3f8550.  v8:= v0[v5];
  #L3f8554.  if v7 != 0 then goto L3f855c;
  #L3f8558.  v7:= 0I;
  #L3f855a.  goto L3f8564;
  #L3f855c.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f8562.  v7:= temp;
  #L3f8564.  v7:= v7 ^~ v8 @kind int;
  #L3f8566.  v6:= v6 + v7 @kind int;
  #L3f8568.  v5:= v5 + 1;
  #L3f856c.  v3:= v3 + 2;
  #L3f8570.  goto L3f8548;
  #L3f8572.  return v6;
}
procedure `java.lang.Object` `i`(`o.g` v1 @kind this, `int` v2 ) @signature `Lo/g;.i:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f87cc.  v0:= v1.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f87d0.  v2:= v2 ^< 1;
  #L3f87d4.  v2:= v0[v2] @kind object;
  #L3f87d8.  return v2 @kind object;
}
procedure `boolean` `isEmpty`(`o.g` v1 @kind this) @signature `Lo/g;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f844c.  v0:= v1.`o.g.q` @type ^`int`;
  #L3f8450.  if v0 > 0 then goto L3f8458;
  #L3f8454.  v0:= 1I;
  #L3f8456.  goto L3f845a;
  #L3f8458.  v0:= 0I;
  #L3f845a.  return v0;
}
procedure `void` `j`(`o.g` v4 @kind this, `o.g` v5 @kind object) @signature `Lo/g;.j:(Lo/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f8eb8.  v0:= v5.`o.g.q` @type ^`int`;
  #L3f8ebc.  v1:= v4.`o.g.q` @type ^`int`;
  #L3f8ec0.  v1:= v1 + v0 @kind int;
  #L3f8ec2.  call `c`(v4, v1) @signature `Lo/g;.c:(I)V` @kind virtual;
  #L3f8ec8.  v1:= v4.`o.g.q` @type ^`int`;
  #L3f8ecc.  v2:= 0I;
  #L3f8ece.  if v1 != 0 then goto L3f8efc;
  #L3f8ed2.  if v0 <= 0 then goto L3f8f1c;
  #L3f8ed6.  v1:= v5.`o.g.o` @type ^`int`[] @kind object;
  #L3f8eda.  v3:= v4.`o.g.o` @type ^`int`[] @kind object;
  #L3f8ede.  call `arraycopy`(v1, v2, v3, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f8ee4.  v5:= v5.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8ee8.  v1:= v4.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8eec.  v3:= v0 ^< 1;
  #L3f8ef0.  call `arraycopy`(v5, v2, v1, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f8ef6.  v4.`o.g.q` @type ^`int` := v0;
  #L3f8efa.  goto L3f8f1c;
  #L3f8efc.  if v2 >= v0 then goto L3f8f1c;
  #L3f8f00.  call temp:= `i`(v5, v2) @signature `Lo/g;.i:(I)Ljava/lang/Object;` @kind virtual;
  #L3f8f06.  v1:= temp @kind object;
  #L3f8f08.  call temp:= `m`(v5, v2) @signature `Lo/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L3f8f0e.  v3:= temp @kind object;
  #L3f8f10.  call temp:= `put`(v4, v1, v3) @signature `Lo/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f8f16.  v2:= v2 + 1;
  #L3f8f1a.  goto L3f8efc;
  #L3f8f1c.  return @kind void;
}
procedure `java.lang.Object` `k`(`o.g` v10 @kind this, `int` v11 ) @signature `Lo/g;.k:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3f8974.  v0:= v10.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8978.  v1:= v11 ^< 1;
  #L3f897c.  v2:= v1 + 1;
  #L3f8980.  v2:= v0[v2] @kind object;
  #L3f8984.  v3:= v10.`o.g.q` @type ^`int`;
  #L3f8988.  v4:= 0I;
  #L3f898a.  v5:= 1I;
  #L3f898c.  if v3 > v5 then goto L3f89ac;
  #L3f8990.  v11:= v10.`o.g.o` @type ^`int`[] @kind object;
  #L3f8994.  call `d`(v11, v0, v3) @signature `Lo/g;.d:([I[Ljava/lang/Object;I)V` @kind static;
  #L3f899a.  v11:= `@@o.c.a` @type ^`int`[] @kind object;
  #L3f899e.  v10.`o.g.o` @type ^`int`[] := v11 @kind object;
  #L3f89a2.  v11:= `@@o.c.c` @type ^`java.lang.Object`[] @kind object;
  #L3f89a6.  v10.`o.g.p` @type ^`java.lang.Object`[] := v11 @kind object;
  #L3f89aa.  goto L3f8a66;
  #L3f89ac.  v6:= v3 + -1;
  #L3f89b0.  v7:= v10.`o.g.o` @type ^`int`[] @kind object;
  #L3f89b4.  v8:= length @variable v7;
  #L3f89b6.  v9:= 8I;
  #L3f89ba.  if v8 <= v9 then goto L3f8a30;
  #L3f89be.  v8:= length @variable v7;
  #L3f89c0.  v8:= v8 / 3;
  #L3f89c4.  if v3 >= v8 then goto L3f8a30;
  #L3f89c8.  if v3 <= v9 then goto L3f89d4;
  #L3f89cc.  v8:= v3 ^> 1;
  #L3f89d0.  v9:= v3 + v8 @kind int;
  #L3f89d4.  call `a`(v10, v9) @signature `Lo/g;.a:(I)V` @kind direct;
  #L3f89da.  v8:= v10.`o.g.q` @type ^`int`;
  #L3f89de.  if v3 != v8 then goto L3f8a24;
  #L3f89e2.  if v11 <= 0 then goto L3f89fa;
  #L3f89e6.  v8:= v10.`o.g.o` @type ^`int`[] @kind object;
  #L3f89ea.  call `arraycopy`(v7, v4, v8, v4, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f89f0.  v8:= v10.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f89f4.  call `arraycopy`(v0, v4, v8, v4, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f89fa.  if v11 >= v6 then goto L3f8a64;
  #L3f89fe.  v4:= v11 + 1;
  #L3f8a02.  v8:= v10.`o.g.o` @type ^`int`[] @kind object;
  #L3f8a06.  v9:= v6 - v11 @kind int;
  #L3f8a0a.  call `arraycopy`(v7, v4, v8, v11, v9) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f8a10.  v11:= v4 ^< 1;
  #L3f8a14.  v4:= v10.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8a18.  v5:= v9 ^< 1;
  #L3f8a1c.  call `arraycopy`(v0, v11, v4, v1, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f8a22.  goto L3f8a64;
  #L3f8a24.  v11:= new `java.util.ConcurrentModificationException`;
  #L3f8a28.  call `<init>`(v11) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L3f8a2e.  throw v11;
  #L3f8a30.  if v11 >= v6 then goto L3f8a50;
  #L3f8a34.  v0:= v11 + 1;
  #L3f8a38.  v4:= v6 - v11 @kind int;
  #L3f8a3c.  call `arraycopy`(v7, v0, v7, v11, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f8a42.  v11:= v10.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8a46.  v0:= v0 ^< v5 @kind int;
  #L3f8a48.  v4:= v4 ^< v5 @kind int;
  #L3f8a4a.  call `arraycopy`(v11, v0, v11, v1, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f8a50.  v11:= v10.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8a54.  v0:= v6 ^< 1;
  #L3f8a58.  v1:= 0I;
  #L3f8a5a.  v11[v0]:= v1 @kind object;
  #L3f8a5e.  v0:= v0 + v5 @kind int;
  #L3f8a60.  v11[v0]:= v1 @kind object;
  #L3f8a64.  v4:= v6;
  #L3f8a66.  v11:= v10.`o.g.q` @type ^`int`;
  #L3f8a6a.  if v3 != v11 then goto L3f8a74;
  #L3f8a6e.  v10.`o.g.q` @type ^`int` := v4;
  #L3f8a72.  return v2 @kind object;
  #L3f8a74.  v11:= new `java.util.ConcurrentModificationException`;
  #L3f8a78.  call `<init>`(v11) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L3f8a7e.  throw v11;
}
procedure `java.lang.Object` `l`(`o.g` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lo/g;.l:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f8abc.  v3:= v3 ^< 1;
  #L3f8ac0.  v3:= v3 + 1;
  #L3f8ac4.  v0:= v2.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8ac8.  v1:= v0[v3] @kind object;
  #L3f8acc.  v0[v3]:= v4 @kind object;
  #L3f8ad0.  return v1 @kind object;
}
procedure `java.lang.Object` `m`(`o.g` v1 @kind this, `int` v2 ) @signature `Lo/g;.m:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8ae4.  v0:= v1.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8ae8.  v2:= v2 ^< 1;
  #L3f8aec.  v2:= v2 + 1;
  #L3f8af0.  v2:= v0[v2] @kind object;
  #L3f8af4.  return v2 @kind object;
}
procedure `java.lang.Object` `put`(`o.g` v9 @kind this, `java.lang.Object` v10 @kind object, `java.lang.Object` v11 @kind object) @signature `Lo/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f87ec.  v0:= v9.`o.g.q` @type ^`int`;
  #L3f87f0.  v1:= 0I;
  #L3f87f2.  if v10 != 0 then goto L3f8802;
  #L3f87f6.  call temp:= `g`(v9) @signature `Lo/g;.g:()I` @kind virtual;
  #L3f87fc.  v2:= temp;
  #L3f87fe.  v3:= 0I;
  #L3f8800.  goto L3f8818;
  #L3f8802.  call temp:= `hashCode`(v10) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f8808.  v2:= temp;
  #L3f880a.  call temp:= `e`(v9, v10, v2) @signature `Lo/g;.e:(Ljava/lang/Object;I)I` @kind virtual;
  #L3f8810.  v3:= temp;
  #L3f8812.  v8:= v3;
  #L3f8814.  v3:= v2;
  #L3f8816.  v2:= v8;
  #L3f8818.  if v2 < 0 then goto L3f8832;
  #L3f881c.  v10:= v2 ^< 1;
  #L3f8820.  v10:= v10 + 1;
  #L3f8824.  v0:= v9.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8828.  v1:= v0[v10] @kind object;
  #L3f882c.  v0[v10]:= v11 @kind object;
  #L3f8830.  return v1 @kind object;
  #L3f8832.  v2:= ~v2 @kind int;
  #L3f8834.  v4:= v9.`o.g.o` @type ^`int`[] @kind object;
  #L3f8838.  v5:= length @variable v4;
  #L3f883a.  if v0 < v5 then goto L3f889c;
  #L3f883e.  v5:= 4I;
  #L3f8840.  v6:= 8I;
  #L3f8844.  if v0 < v6 then goto L3f8850;
  #L3f8848.  v5:= v0 ^> 1;
  #L3f884c.  v5:= v5 + v0 @kind int;
  #L3f884e.  goto L3f8858;
  #L3f8850.  if v0 < v5 then goto L3f8858;
  #L3f8854.  v5:= 8I;
  #L3f8858.  v6:= v9.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f885c.  call `a`(v9, v5) @signature `Lo/g;.a:(I)V` @kind direct;
  #L3f8862.  v5:= v9.`o.g.q` @type ^`int`;
  #L3f8866.  if v0 != v5 then goto L3f8890;
  #L3f886a.  v5:= v9.`o.g.o` @type ^`int`[] @kind object;
  #L3f886e.  v7:= length @variable v5;
  #L3f8870.  if v7 <= 0 then goto L3f8888;
  #L3f8874.  v7:= length @variable v4;
  #L3f8876.  call `arraycopy`(v4, v1, v5, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f887c.  v5:= v9.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f8880.  v7:= length @variable v6;
  #L3f8882.  call `arraycopy`(v6, v1, v5, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f8888.  call `d`(v4, v6, v0) @signature `Lo/g;.d:([I[Ljava/lang/Object;I)V` @kind static;
  #L3f888e.  goto L3f889c;
  #L3f8890.  v10:= new `java.util.ConcurrentModificationException`;
  #L3f8894.  call `<init>`(v10) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L3f889a.  throw v10;
  #L3f889c.  if v2 >= v0 then goto L3f88ce;
  #L3f88a0.  v1:= v9.`o.g.o` @type ^`int`[] @kind object;
  #L3f88a4.  v4:= v2 + 1;
  #L3f88a8.  v5:= v0 - v2 @kind int;
  #L3f88ac.  call `arraycopy`(v1, v2, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f88b2.  v1:= v9.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f88b6.  v5:= v2 ^< 1;
  #L3f88ba.  v4:= v4 ^< 1;
  #L3f88be.  v6:= v9.`o.g.q` @type ^`int`;
  #L3f88c2.  v6:= v6 - v2 @kind int;
  #L3f88c4.  v6:= v6 ^< 1;
  #L3f88c8.  call `arraycopy`(v1, v5, v1, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f88ce.  v1:= v9.`o.g.q` @type ^`int`;
  #L3f88d2.  if v0 != v1 then goto L3f8904;
  #L3f88d6.  v0:= v9.`o.g.o` @type ^`int`[] @kind object;
  #L3f88da.  v4:= length @variable v0;
  #L3f88dc.  if v2 >= v4 then goto L3f8904;
  #L3f88e0.  v0[v2]:= v3;
  #L3f88e4.  v0:= v9.`o.g.p` @type ^`java.lang.Object`[] @kind object;
  #L3f88e8.  v2:= v2 ^< 1;
  #L3f88ec.  v0[v2]:= v10 @kind object;
  #L3f88f0.  v2:= v2 + 1;
  #L3f88f4.  v0[v2]:= v11 @kind object;
  #L3f88f8.  v1:= v1 + 1;
  #L3f88fc.  v9.`o.g.q` @type ^`int` := v1;
  #L3f8900.  v10:= 0I;
  #L3f8902.  return v10 @kind object;
  #L3f8904.  v10:= new `java.util.ConcurrentModificationException`;
  #L3f8908.  call `<init>`(v10) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L3f890e.  throw v10;
}
procedure `java.lang.Object` `putIfAbsent`(`o.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lo/g;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8920.  call temp:= `get`(v1, v2) @signature `Lo/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f8926.  v0:= temp @kind object;
  #L3f8928.  if v0 != 0 then goto L3f8934;
  #L3f892c.  call temp:= `put`(v1, v2, v3) @signature `Lo/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f8932.  v0:= temp @kind object;
  #L3f8934.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`o.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/g;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L3f8948.  call temp:= `f`(v0, v1) @signature `Lo/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L3f894e.  v1:= temp;
  #L3f8950.  if v1 < 0 then goto L3f895e;
  #L3f8954.  call temp:= `k`(v0, v1) @signature `Lo/g;.k:(I)Ljava/lang/Object;` @kind virtual;
  #L3f895a.  v1:= temp @kind object;
  #L3f895c.  return v1 @kind object;
  #L3f895e.  v1:= 0I;
  #L3f8960.  return v1 @kind object;
}
procedure `boolean` `remove`(`o.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lo/g;.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f846c.  call temp:= `f`(v1, v2) @signature `Lo/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L3f8472.  v2:= temp;
  #L3f8474.  if v2 < 0 then goto L3f849e;
  #L3f8478.  call temp:= `m`(v1, v2) @signature `Lo/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L3f847e.  v0:= temp @kind object;
  #L3f8480.  if v3 == v0 then goto L3f8494;
  #L3f8484.  if v3 == 0 then goto L3f849e;
  #L3f8488.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f848e.  v3:= temp;
  #L3f8490.  if v3 == 0 then goto L3f849e;
  #L3f8494.  call temp:= `k`(v1, v2) @signature `Lo/g;.k:(I)Ljava/lang/Object;` @kind virtual;
  #L3f849a.  v2:= 1I;
  #L3f849c.  return v2;
  #L3f849e.  v2:= 0I;
  #L3f84a0.  return v2;
}
procedure `java.lang.Object` `replace`(`o.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lo/g;.replace:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L3f8a90.  call temp:= `f`(v0, v1) @signature `Lo/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L3f8a96.  v1:= temp;
  #L3f8a98.  if v1 < 0 then goto L3f8aa6;
  #L3f8a9c.  call temp:= `l`(v0, v1, v2) @signature `Lo/g;.l:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f8aa2.  v1:= temp @kind object;
  #L3f8aa4.  return v1 @kind object;
  #L3f8aa6.  v1:= 0I;
  #L3f8aa8.  return v1 @kind object;
}
procedure `boolean` `replace`(`o.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lo/g;.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f84b4.  call temp:= `f`(v1, v2) @signature `Lo/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L3f84ba.  v2:= temp;
  #L3f84bc.  if v2 < 0 then goto L3f84e6;
  #L3f84c0.  call temp:= `m`(v1, v2) @signature `Lo/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L3f84c6.  v0:= temp @kind object;
  #L3f84c8.  if v0 == v3 then goto L3f84dc;
  #L3f84cc.  if v3 == 0 then goto L3f84e6;
  #L3f84d0.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f84d6.  v3:= temp;
  #L3f84d8.  if v3 == 0 then goto L3f84e6;
  #L3f84dc.  call temp:= `l`(v1, v2, v4) @signature `Lo/g;.l:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f84e2.  v2:= 1I;
  #L3f84e4.  return v2;
  #L3f84e6.  v2:= 0I;
  #L3f84e8.  return v2;
}
procedure `int` `size`(`o.g` v1 @kind this) @signature `Lo/g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8768.  v0:= v1.`o.g.q` @type ^`int`;
  #L3f876c.  return v0;
}
procedure `java.lang.String` `toString`(`o.g` v4 @kind this) @signature `Lo/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f8b08.  call temp:= `isEmpty`(v4) @signature `Lo/g;.isEmpty:()Z` @kind virtual;
  #L3f8b0e.  v0:= temp;
  #L3f8b10.  if v0 == 0 then goto L3f8b1a;
  #L3f8b14.  v0:= "{}" @kind object;
  #L3f8b18.  return v0 @kind object;
  #L3f8b1a.  v0:= new `java.lang.StringBuilder`;
  #L3f8b1e.  v1:= v4.`o.g.q` @type ^`int`;
  #L3f8b22.  v1:= v1 * 28;
  #L3f8b26.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3f8b2c.  v1:= 123I;
  #L3f8b30.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b36.  v1:= 0I;
  #L3f8b38.  v2:= v4.`o.g.q` @type ^`int`;
  #L3f8b3c.  if v1 >= v2 then goto L3f8b96;
  #L3f8b40.  if v1 <= 0 then goto L3f8b4e;
  #L3f8b44.  v2:= ", " @kind object;
  #L3f8b48.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b4e.  call temp:= `i`(v4, v1) @signature `Lo/g;.i:(I)Ljava/lang/Object;` @kind virtual;
  #L3f8b54.  v2:= temp @kind object;
  #L3f8b56.  v3:= "(this Map)" @kind object;
  #L3f8b5a.  if v2 == v4 then goto L3f8b66;
  #L3f8b5e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b64.  goto L3f8b6c;
  #L3f8b66.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b6c.  v2:= 61I;
  #L3f8b70.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b76.  call temp:= `m`(v4, v1) @signature `Lo/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L3f8b7c.  v2:= temp @kind object;
  #L3f8b7e.  if v2 == v4 then goto L3f8b8a;
  #L3f8b82.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b88.  goto L3f8b90;
  #L3f8b8a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b90.  v1:= v1 + 1;
  #L3f8b94.  goto L3f8b38;
  #L3f8b96.  v1:= 125I;
  #L3f8b9a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8ba0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f8ba6.  v0:= temp @kind object;
  #L3f8ba8.  return v0 @kind object;
}
