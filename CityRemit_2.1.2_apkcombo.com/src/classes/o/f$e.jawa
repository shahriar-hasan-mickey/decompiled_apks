record `o.f$e` @kind class @AccessFlag FINAL extends `java.util.Collection` @kind interface {
  `o.f` `o.f$e.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`o.f$e` v0 @kind this, `o.f` v1 @kind object) @signature `Lo/f$e;.<init>:(Lo/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f8024.  v0.`o.f$e.o` @type ^`o.f` := v1 @kind object;
  #L3f8028.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f802e.  return @kind void;
}
procedure `boolean` `add`(`o.f$e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/f$e;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f7df4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3f7df8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f7dfe.  throw v1;
}
procedure `boolean` `addAll`(`o.f$e` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lo/f$e;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f7e10.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3f7e14.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f7e1a.  throw v1;
}
procedure `void` `clear`(`o.f$e` v1 @kind this) @signature `Lo/f$e;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8040.  v0:= v1.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f8044.  call `a`(v0) @signature `Lo/f;.a:()V` @kind virtual;
  #L3f804a.  return @kind void;
}
procedure `boolean` `contains`(`o.f$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lo/f$e;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7e2c.  v0:= v1.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7e30.  call temp:= `f`(v0, v2) @signature `Lo/f;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L3f7e36.  v2:= temp;
  #L3f7e38.  if v2 < 0 then goto L3f7e40;
  #L3f7e3c.  v2:= 1I;
  #L3f7e3e.  goto L3f7e42;
  #L3f7e40.  v2:= 0I;
  #L3f7e42.  return v2;
}
procedure `boolean` `containsAll`(`o.f$e` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lo/f$e;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7e54.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f7e5a.  v2:= temp @kind object;
  #L3f7e5c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f7e62.  v0:= temp;
  #L3f7e64.  if v0 == 0 then goto L3f7e80;
  #L3f7e68.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f7e6e.  v0:= temp @kind object;
  #L3f7e70.  call temp:= `contains`(v1, v0) @signature `Lo/f$e;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f7e76.  v0:= temp;
  #L3f7e78.  if v0 != 0 then goto L3f7e5c;
  #L3f7e7c.  v2:= 0I;
  #L3f7e7e.  return v2;
  #L3f7e80.  v2:= 1I;
  #L3f7e82.  return v2;
}
procedure `boolean` `isEmpty`(`o.f$e` v1 @kind this) @signature `Lo/f$e;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7e94.  v0:= v1.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7e98.  call temp:= `d`(v0) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f7e9e.  v0:= temp;
  #L3f7ea0.  if v0 != 0 then goto L3f7ea8;
  #L3f7ea4.  v0:= 1I;
  #L3f7ea6.  goto L3f7eaa;
  #L3f7ea8.  v0:= 0I;
  #L3f7eaa.  return v0;
}
procedure `java.util.Iterator` `iterator`(`o.f$e` v3 @kind this) @signature `Lo/f$e;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f8000.  v0:= new `o.f$a`;
  #L3f8004.  v1:= v3.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f8008.  v2:= 1I;
  #L3f800a.  call `<init>`(v0, v1, v2) @signature `Lo/f$a;.<init>:(Lo/f;I)V` @kind direct;
  #L3f8010.  return v0 @kind object;
}
procedure `boolean` `remove`(`o.f$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lo/f$e;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7ebc.  v0:= v1.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7ec0.  call temp:= `f`(v0, v2) @signature `Lo/f;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L3f7ec6.  v2:= temp;
  #L3f7ec8.  if v2 < 0 then goto L3f7eda;
  #L3f7ecc.  v0:= v1.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7ed0.  call `h`(v0, v2) @signature `Lo/f;.h:(I)V` @kind virtual;
  #L3f7ed6.  v2:= 1I;
  #L3f7ed8.  return v2;
  #L3f7eda.  v2:= 0I;
  #L3f7edc.  return v2;
}
procedure `boolean` `removeAll`(`o.f$e` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lo/f$e;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f7ef0.  v0:= v5.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7ef4.  call temp:= `d`(v0) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f7efa.  v0:= temp;
  #L3f7efc.  v1:= 0I;
  #L3f7efe.  v2:= 0I;
  #L3f7f00.  if v1 >= v0 then goto L3f7f36;
  #L3f7f04.  v3:= v5.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7f08.  v4:= 1I;
  #L3f7f0a.  call temp:= `b`(v3, v1, v4) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f7f10.  v3:= temp @kind object;
  #L3f7f12.  call temp:= `contains`(v6, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3f7f18.  v3:= temp;
  #L3f7f1a.  if v3 == 0 then goto L3f7f32;
  #L3f7f1e.  v2:= v5.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7f22.  call `h`(v2, v1) @signature `Lo/f;.h:(I)V` @kind virtual;
  #L3f7f28.  v1:= v1 + -1;
  #L3f7f2c.  v0:= v0 + -1;
  #L3f7f30.  v2:= 1I;
  #L3f7f32.  v1:= v1 + v4 @kind int;
  #L3f7f34.  goto L3f7f00;
  #L3f7f36.  return v2;
}
procedure `boolean` `retainAll`(`o.f$e` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lo/f$e;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f7f48.  v0:= v5.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7f4c.  call temp:= `d`(v0) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f7f52.  v0:= temp;
  #L3f7f54.  v1:= 0I;
  #L3f7f56.  v2:= 0I;
  #L3f7f58.  if v1 >= v0 then goto L3f7f8e;
  #L3f7f5c.  v3:= v5.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7f60.  v4:= 1I;
  #L3f7f62.  call temp:= `b`(v3, v1, v4) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f7f68.  v3:= temp @kind object;
  #L3f7f6a.  call temp:= `contains`(v6, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3f7f70.  v3:= temp;
  #L3f7f72.  if v3 != 0 then goto L3f7f8a;
  #L3f7f76.  v2:= v5.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7f7a.  call `h`(v2, v1) @signature `Lo/f;.h:(I)V` @kind virtual;
  #L3f7f80.  v1:= v1 + -1;
  #L3f7f84.  v0:= v0 + -1;
  #L3f7f88.  v2:= 1I;
  #L3f7f8a.  v1:= v1 + v4 @kind int;
  #L3f7f8c.  goto L3f7f58;
  #L3f7f8e.  return v2;
}
procedure `int` `size`(`o.f$e` v1 @kind this) @signature `Lo/f$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7fa0.  v0:= v1.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7fa4.  call temp:= `d`(v0) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f7faa.  v0:= temp;
  #L3f7fac.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`o.f$e` v2 @kind this) @signature `Lo/f$e;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7fc0.  v0:= v2.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7fc4.  v1:= 1I;
  #L3f7fc6.  call temp:= `q`(v0, v1) @signature `Lo/f;.q:(I)[Ljava/lang/Object;` @kind virtual;
  #L3f7fcc.  v0:= temp @kind object;
  #L3f7fce.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`o.f$e` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lo/f$e;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7fe0.  v0:= v2.`o.f$e.o` @type ^`o.f` @kind object;
  #L3f7fe4.  v1:= 1I;
  #L3f7fe6.  call temp:= `r`(v0, v3, v1) @signature `Lo/f;.r:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind virtual;
  #L3f7fec.  v3:= temp @kind object;
  #L3f7fee.  return v3 @kind object;
}
