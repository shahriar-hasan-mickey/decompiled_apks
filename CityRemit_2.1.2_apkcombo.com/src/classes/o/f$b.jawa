record `o.f$b` @kind class @AccessFlag FINAL extends `java.util.Set` @kind interface {
  `o.f` `o.f$b.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`o.f$b` v0 @kind this, `o.f` v1 @kind object) @signature `Lo/f$b;.<init>:(Lo/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f7860.  v0.`o.f$b.o` @type ^`o.f` := v1 @kind object;
  #L3f7864.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f786a.  return @kind void;
}
procedure `boolean` `add`(`o.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/f$b;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f759c.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L3f75a0.  call temp:= `b`(v0, v1) @signature `Lo/f$b;.b:(Ljava/util/Map$Entry;)Z` @kind virtual;
  #L3f75a6.  v1:= temp;
  #L3f75a8.  return v1;
}
procedure `boolean` `addAll`(`o.f$b` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lo/f$b;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f75d8.  v0:= v4.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f75dc.  call temp:= `d`(v0) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f75e2.  v0:= temp;
  #L3f75e4.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f75ea.  v5:= temp @kind object;
  #L3f75ec.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f75f2.  v1:= temp;
  #L3f75f4.  if v1 == 0 then goto L3f7620;
  #L3f75f8.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f75fe.  v1:= temp @kind object;
  #L3f7600.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L3f7604.  v2:= v4.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f7608.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3f760e.  v3:= temp @kind object;
  #L3f7610.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3f7616.  v1:= temp @kind object;
  #L3f7618.  call `g`(v2, v3, v1) @signature `Lo/f;.g:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3f761e.  goto L3f75ec;
  #L3f7620.  v5:= v4.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f7624.  call temp:= `d`(v5) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f762a.  v5:= temp;
  #L3f762c.  if v0 == v5 then goto L3f7634;
  #L3f7630.  v5:= 1I;
  #L3f7632.  goto L3f7636;
  #L3f7634.  v5:= 0I;
  #L3f7636.  return v5;
}
procedure `boolean` `b`(`o.f$b` v0 @kind this, `java.util.Map$Entry` v1 @kind object) @signature `Lo/f$b;.b:(Ljava/util/Map$Entry;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f75bc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3f75c0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f75c6.  throw v1;
}
procedure `void` `clear`(`o.f$b` v1 @kind this) @signature `Lo/f$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f787c.  v0:= v1.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f7880.  call `a`(v0) @signature `Lo/f;.a:()V` @kind virtual;
  #L3f7886.  return @kind void;
}
procedure `boolean` `contains`(`o.f$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lo/f$b;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f7648.  v0:= instanceof @variable v4 @type ^`java.util.Map$Entry` @kind boolean;
  #L3f764c.  v1:= 0I;
  #L3f764e.  if v0 != 0 then goto L3f7654;
  #L3f7652.  return v1;
  #L3f7654.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L3f7658.  v0:= v3.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f765c.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3f7662.  v2:= temp @kind object;
  #L3f7664.  call temp:= `e`(v0, v2) @signature `Lo/f;.e:(Ljava/lang/Object;)I` @kind virtual;
  #L3f766a.  v0:= temp;
  #L3f766c.  if v0 >= 0 then goto L3f7672;
  #L3f7670.  return v1;
  #L3f7672.  v1:= v3.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f7676.  v2:= 1I;
  #L3f7678.  call temp:= `b`(v1, v0, v2) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f767e.  v0:= temp @kind object;
  #L3f7680.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3f7686.  v4:= temp @kind object;
  #L3f7688.  call temp:= `c`(v0, v4) @signature `Lo/c;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3f768e.  v4:= temp;
  #L3f7690.  return v4;
}
procedure `boolean` `containsAll`(`o.f$b` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lo/f$b;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f76a4.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f76aa.  v2:= temp @kind object;
  #L3f76ac.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f76b2.  v0:= temp;
  #L3f76b4.  if v0 == 0 then goto L3f76d0;
  #L3f76b8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f76be.  v0:= temp @kind object;
  #L3f76c0.  call temp:= `contains`(v1, v0) @signature `Lo/f$b;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f76c6.  v0:= temp;
  #L3f76c8.  if v0 != 0 then goto L3f76ac;
  #L3f76cc.  v2:= 0I;
  #L3f76ce.  return v2;
  #L3f76d0.  v2:= 1I;
  #L3f76d2.  return v2;
}
procedure `boolean` `equals`(`o.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/f$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f76e4.  call temp:= `k`(v0, v1) @signature `Lo/f;.k:(Ljava/util/Set;Ljava/lang/Object;)Z` @kind static;
  #L3f76ea.  v1:= temp;
  #L3f76ec.  return v1;
}
procedure `int` `hashCode`(`o.f$b` v6 @kind this) @signature `Lo/f$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f777c.  v0:= v6.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f7780.  call temp:= `d`(v0) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f7786.  v0:= temp;
  #L3f7788.  v1:= 1I;
  #L3f778a.  v0:= v0 - v1 @kind int;
  #L3f778c.  v2:= 0I;
  #L3f778e.  v3:= 0I;
  #L3f7790.  if v0 < 0 then goto L3f77d6;
  #L3f7794.  v4:= v6.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f7798.  call temp:= `b`(v4, v0, v2) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f779e.  v4:= temp @kind object;
  #L3f77a0.  v5:= v6.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f77a4.  call temp:= `b`(v5, v0, v1) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f77aa.  v5:= temp @kind object;
  #L3f77ac.  if v4 != 0 then goto L3f77b4;
  #L3f77b0.  v4:= 0I;
  #L3f77b2.  goto L3f77bc;
  #L3f77b4.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f77ba.  v4:= temp;
  #L3f77bc.  if v5 != 0 then goto L3f77c4;
  #L3f77c0.  v5:= 0I;
  #L3f77c2.  goto L3f77cc;
  #L3f77c4.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f77ca.  v5:= temp;
  #L3f77cc.  v4:= v4 ^~ v5 @kind int;
  #L3f77ce.  v3:= v3 + v4 @kind int;
  #L3f77d0.  v0:= v0 + -1;
  #L3f77d4.  goto L3f7790;
  #L3f77d6.  return v3;
}
procedure `boolean` `isEmpty`(`o.f$b` v1 @kind this) @signature `Lo/f$b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7700.  v0:= v1.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f7704.  call temp:= `d`(v0) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f770a.  v0:= temp;
  #L3f770c.  if v0 != 0 then goto L3f7714;
  #L3f7710.  v0:= 1I;
  #L3f7712.  goto L3f7716;
  #L3f7714.  v0:= 0I;
  #L3f7716.  return v0;
}
procedure `java.util.Iterator` `iterator`(`o.f$b` v2 @kind this) @signature `Lo/f$b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7840.  v0:= new `o.f$d`;
  #L3f7844.  v1:= v2.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f7848.  call `<init>`(v0, v1) @signature `Lo/f$d;.<init>:(Lo/f;)V` @kind direct;
  #L3f784e.  return v0 @kind object;
}
procedure `boolean` `remove`(`o.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/f$b;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f7728.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3f772c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f7732.  throw v1;
}
procedure `boolean` `removeAll`(`o.f$b` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lo/f$b;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f7744.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3f7748.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f774e.  throw v1;
}
procedure `boolean` `retainAll`(`o.f$b` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lo/f$b;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f7760.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3f7764.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f776a.  throw v1;
}
procedure `int` `size`(`o.f$b` v1 @kind this) @signature `Lo/f$b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f77e8.  v0:= v1.`o.f$b.o` @type ^`o.f` @kind object;
  #L3f77ec.  call temp:= `d`(v0) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f77f2.  v0:= temp;
  #L3f77f4.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`o.f$b` v1 @kind this) @signature `Lo/f$b;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7808.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3f780c.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f7812.  throw v0;
}
procedure `java.lang.Object`[] `toArray`(`o.f$b` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lo/f$b;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L3f7824.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3f7828.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f782e.  throw v1;
}
