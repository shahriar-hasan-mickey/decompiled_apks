record `o.f$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `int` `o.f$a.o` @AccessFlag FINAL;
  `int` `o.f$a.p` @AccessFlag ;
  `int` `o.f$a.q` @AccessFlag ;
  `boolean` `o.f$a.r` @AccessFlag ;
  `o.f` `o.f$a.s` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`o.f$a` v1 @kind this, `o.f` v2 @kind object, `int` v3 ) @signature `Lo/f$a;.<init>:(Lo/f;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f7518.  v1.`o.f$a.s` @type ^`o.f` := v2 @kind object;
  #L3f751c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f7522.  v0:= 0I;
  #L3f7524.  v1.`o.f$a.r` @type ^`boolean` := v0 @kind boolean;
  #L3f7528.  v1.`o.f$a.o` @type ^`int` := v3;
  #L3f752c.  call temp:= `d`(v2) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f7532.  v2:= temp;
  #L3f7534.  v1.`o.f$a.p` @type ^`int` := v2;
  #L3f7538.  return @kind void;
}
procedure `boolean` `hasNext`(`o.f$a` v2 @kind this) @signature `Lo/f$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f74a4.  v0:= v2.`o.f$a.q` @type ^`int`;
  #L3f74a8.  v1:= v2.`o.f$a.p` @type ^`int`;
  #L3f74ac.  if v0 >= v1 then goto L3f74b4;
  #L3f74b0.  v0:= 1I;
  #L3f74b2.  goto L3f74b6;
  #L3f74b4.  v0:= 0I;
  #L3f74b6.  return v0;
}
procedure `java.lang.Object` `next`(`o.f$a` v3 @kind this) @signature `Lo/f$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f74c8.  call temp:= `hasNext`(v3) @signature `Lo/f$a;.hasNext:()Z` @kind virtual;
  #L3f74ce.  v0:= temp;
  #L3f74d0.  if v0 == 0 then goto L3f74fa;
  #L3f74d4.  v0:= v3.`o.f$a.s` @type ^`o.f` @kind object;
  #L3f74d8.  v1:= v3.`o.f$a.q` @type ^`int`;
  #L3f74dc.  v2:= v3.`o.f$a.o` @type ^`int`;
  #L3f74e0.  call temp:= `b`(v0, v1, v2) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f74e6.  v0:= temp @kind object;
  #L3f74e8.  v1:= v3.`o.f$a.q` @type ^`int`;
  #L3f74ec.  v2:= 1I;
  #L3f74ee.  v1:= v1 + v2 @kind int;
  #L3f74f0.  v3.`o.f$a.q` @type ^`int` := v1;
  #L3f74f4.  v3.`o.f$a.r` @type ^`boolean` := v2 @kind boolean;
  #L3f74f8.  return v0 @kind object;
  #L3f74fa.  v0:= new `java.util.NoSuchElementException`;
  #L3f74fe.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3f7504.  throw v0;
}
procedure `void` `remove`(`o.f$a` v2 @kind this) @signature `Lo/f$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f754c.  v0:= v2.`o.f$a.r` @type ^`boolean` @kind boolean;
  #L3f7550.  if v0 == 0 then goto L3f757e;
  #L3f7554.  v0:= v2.`o.f$a.q` @type ^`int`;
  #L3f7558.  v0:= v0 + -1;
  #L3f755c.  v2.`o.f$a.q` @type ^`int` := v0;
  #L3f7560.  v1:= v2.`o.f$a.p` @type ^`int`;
  #L3f7564.  v1:= v1 + -1;
  #L3f7568.  v2.`o.f$a.p` @type ^`int` := v1;
  #L3f756c.  v1:= 0I;
  #L3f756e.  v2.`o.f$a.r` @type ^`boolean` := v1 @kind boolean;
  #L3f7572.  v1:= v2.`o.f$a.s` @type ^`o.f` @kind object;
  #L3f7576.  call `h`(v1, v0) @signature `Lo/f;.h:(I)V` @kind virtual;
  #L3f757c.  return @kind void;
  #L3f757e.  v0:= new `java.lang.IllegalStateException`;
  #L3f7582.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3f7588.  throw v0;
}
