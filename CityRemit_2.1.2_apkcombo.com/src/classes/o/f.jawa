record `o.f` @kind class @AccessFlag ABSTRACT {
  `o.f$b` `o.f.a` @AccessFlag ;
  `o.f$c` `o.f.b` @AccessFlag ;
  `o.f$e` `o.f.c` @AccessFlag ;
}
procedure `void` `<init>`(`o.f` v0 @kind this) @signature `Lo/f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f82cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f82d2.  return @kind void;
}
procedure `boolean` `j`(`java.util.Map` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lo/f;.j:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f805c.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f8062.  v2:= temp @kind object;
  #L3f8064.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f806a.  v0:= temp;
  #L3f806c.  if v0 == 0 then goto L3f8088;
  #L3f8070.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f8076.  v0:= temp @kind object;
  #L3f8078.  call temp:= `containsKey`(v1, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L3f807e.  v0:= temp;
  #L3f8080.  if v0 != 0 then goto L3f8064;
  #L3f8084.  v1:= 0I;
  #L3f8086.  return v1;
  #L3f8088.  v1:= 1I;
  #L3f808a.  return v1;
}
procedure `boolean` `k`(`java.util.Set` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lo/f;.k:(Ljava/util/Set;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f809c.  v0:= 1I;
  #L3f809e.  if v4 != v5 then goto L3f80a4;
  #L3f80a2.  return v0;
  #L3f80a4.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L3f80a8.  v2:= 0I;
  #L3f80aa.  if v1 == 0 then goto L3f80d8;
  #L3f80ae.  v5:= (`java.util.Set`) v5 @kind object;
  #L3f80b2.  call temp:= `size`(v4) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L3f80b8.  v1:= temp;
  #L3f80ba.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L3f80c0.  v3:= temp;
  #L3f80c2.  if v1 != v3 then goto L3f80d4;
  #L3f80c6.  call temp:= `containsAll`(v4, v5) @signature `Ljava/util/Set;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3f80cc.  v4:= temp;
  #L3f80ce.  if v4 == 0 then goto L3f80d4;
  #L3f80d2.  goto L3f80d6;
  #L3f80d4.  v0:= 0I;
  #L3f80d6.  return v0;
  #L3f80d8.  return v2;
  catch `java.lang.NullPointerException` @[L3f80b2..L3f80ce] goto L3f80d8;
  catch `java.lang.ClassCastException` @[L3f80b2..L3f80ce] goto L3f80d8;
}
procedure `boolean` `o`(`java.util.Map` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lo/f;.o:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f80fc.  call temp:= `size`(v2) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3f8102.  v0:= temp;
  #L3f8104.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f810a.  v3:= temp @kind object;
  #L3f810c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f8112.  v1:= temp;
  #L3f8114.  if v1 == 0 then goto L3f8128;
  #L3f8118.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f811e.  v1:= temp @kind object;
  #L3f8120.  call temp:= `remove`(v2, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f8126.  goto L3f810c;
  #L3f8128.  call temp:= `size`(v2) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3f812e.  v2:= temp;
  #L3f8130.  if v0 == v2 then goto L3f8138;
  #L3f8134.  v2:= 1I;
  #L3f8136.  goto L3f813a;
  #L3f8138.  v2:= 0I;
  #L3f813a.  return v2;
}
procedure `boolean` `p`(`java.util.Map` v3 @kind object, `java.util.Collection` v4 @kind object) @signature `Lo/f;.p:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f814c.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3f8152.  v0:= temp;
  #L3f8154.  call temp:= `keySet`(v3) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L3f815a.  v1:= temp @kind object;
  #L3f815c.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f8162.  v1:= temp @kind object;
  #L3f8164.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f816a.  v2:= temp;
  #L3f816c.  if v2 == 0 then goto L3f818c;
  #L3f8170.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f8176.  v2:= temp @kind object;
  #L3f8178.  call temp:= `contains`(v4, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3f817e.  v2:= temp;
  #L3f8180.  if v2 != 0 then goto L3f8164;
  #L3f8184.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3f818a.  goto L3f8164;
  #L3f818c.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3f8192.  v3:= temp;
  #L3f8194.  if v0 == v3 then goto L3f819c;
  #L3f8198.  v3:= 1I;
  #L3f819a.  goto L3f819e;
  #L3f819c.  v3:= 0I;
  #L3f819e.  return v3;
}
procedure `void` `a`() @signature `Lo/f;.a:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `b`(`int` v0 , `int` v1 ) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.Map` `c`() @signature `Lo/f;.c:()Ljava/util/Map;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `d`() @signature `Lo/f;.d:()I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `e`(`java.lang.Object` v0 @kind object) @signature `Lo/f;.e:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `f`(`java.lang.Object` v0 @kind object) @signature `Lo/f;.f:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `g`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lo/f;.g:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `h`(`int` v0 ) @signature `Lo/f;.h:(I)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `i`(`int` v0 , `java.lang.Object` v1 @kind object) @signature `Lo/f;.i:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.Set` `l`(`o.f` v1 @kind this) @signature `Lo/f;.l:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8274.  v0:= v1.`o.f.a` @type ^`o.f$b` @kind object;
  #L3f8278.  if v0 != 0 then goto L3f828a;
  #L3f827c.  v0:= new `o.f$b`;
  #L3f8280.  call `<init>`(v0, v1) @signature `Lo/f$b;.<init>:(Lo/f;)V` @kind direct;
  #L3f8286.  v1.`o.f.a` @type ^`o.f$b` := v0 @kind object;
  #L3f828a.  v0:= v1.`o.f.a` @type ^`o.f$b` @kind object;
  #L3f828e.  return v0 @kind object;
}
procedure `java.util.Set` `m`(`o.f` v1 @kind this) @signature `Lo/f;.m:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f82a0.  v0:= v1.`o.f.b` @type ^`o.f$c` @kind object;
  #L3f82a4.  if v0 != 0 then goto L3f82b6;
  #L3f82a8.  v0:= new `o.f$c`;
  #L3f82ac.  call `<init>`(v0, v1) @signature `Lo/f$c;.<init>:(Lo/f;)V` @kind direct;
  #L3f82b2.  v1.`o.f.b` @type ^`o.f$c` := v0 @kind object;
  #L3f82b6.  v0:= v1.`o.f.b` @type ^`o.f$c` @kind object;
  #L3f82ba.  return v0 @kind object;
}
procedure `java.util.Collection` `n`(`o.f` v1 @kind this) @signature `Lo/f;.n:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8248.  v0:= v1.`o.f.c` @type ^`o.f$e` @kind object;
  #L3f824c.  if v0 != 0 then goto L3f825e;
  #L3f8250.  v0:= new `o.f$e`;
  #L3f8254.  call `<init>`(v0, v1) @signature `Lo/f$e;.<init>:(Lo/f;)V` @kind direct;
  #L3f825a.  v1.`o.f.c` @type ^`o.f$e` := v0 @kind object;
  #L3f825e.  v0:= v1.`o.f.c` @type ^`o.f$e` @kind object;
  #L3f8262.  return v0 @kind object;
}
procedure `java.lang.Object`[] `q`(`o.f` v4 @kind this, `int` v5 ) @signature `Lo/f;.q:(I)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f81b0.  call temp:= `d`(v4) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f81b6.  v0:= temp;
  #L3f81b8.  v1:= new `java.lang.Object`[v0];
  #L3f81bc.  v2:= 0I;
  #L3f81be.  if v2 >= v0 then goto L3f81d4;
  #L3f81c2.  call temp:= `b`(v4, v2, v5) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f81c8.  v3:= temp @kind object;
  #L3f81ca.  v1[v2]:= v3 @kind object;
  #L3f81ce.  v2:= v2 + 1;
  #L3f81d2.  goto L3f81be;
  #L3f81d4.  return v1 @kind object;
}
procedure `java.lang.Object`[] `r`(`o.f` v3 @kind this, `java.lang.Object`[] v4 @kind object, `int` v5 ) @signature `Lo/f;.r:([Ljava/lang/Object;I)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f81e8.  call temp:= `d`(v3) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f81ee.  v0:= temp;
  #L3f81f0.  v1:= length @variable v4;
  #L3f81f2.  if v1 >= v0 then goto L3f8212;
  #L3f81f6.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f81fc.  v4:= temp @kind object;
  #L3f81fe.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L3f8204.  v4:= temp @kind object;
  #L3f8206.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L3f820c.  v4:= temp @kind object;
  #L3f820e.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L3f8212.  v1:= 0I;
  #L3f8214.  if v1 >= v0 then goto L3f822a;
  #L3f8218.  call temp:= `b`(v3, v1, v5) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f821e.  v2:= temp @kind object;
  #L3f8220.  v4[v1]:= v2 @kind object;
  #L3f8224.  v1:= v1 + 1;
  #L3f8228.  goto L3f8214;
  #L3f822a.  v5:= length @variable v4;
  #L3f822c.  if v5 <= v0 then goto L3f8236;
  #L3f8230.  v5:= 0I;
  #L3f8232.  v4[v0]:= v5 @kind object;
  #L3f8236.  return v4 @kind object;
}
