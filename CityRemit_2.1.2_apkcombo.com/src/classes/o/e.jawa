record `o.e` @kind class @AccessFlag PUBLIC {
  `java.util.LinkedHashMap` `o.e.a` @AccessFlag PRIVATE_FINAL;
  `int` `o.e.b` @AccessFlag PRIVATE;
  `int` `o.e.c` @AccessFlag PRIVATE;
  `int` `o.e.d` @AccessFlag PRIVATE;
  `int` `o.e.e` @AccessFlag PRIVATE;
  `int` `o.e.f` @AccessFlag PRIVATE;
  `int` `o.e.g` @AccessFlag PRIVATE;
  `int` `o.e.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`o.e` v3 @kind this, `int` v4 ) @signature `Lo/e;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3f733c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f7342.  if v4 <= 0 then goto L3f7362;
  #L3f7346.  v3.`o.e.c` @type ^`int` := v4;
  #L3f734a.  v4:= new `java.util.LinkedHashMap`;
  #L3f734e.  v0:= 0I;
  #L3f7350.  v1:= 0.75F;
  #L3f7354.  v2:= 1I;
  #L3f7356.  call `<init>`(v4, v0, v1, v2) @signature `Ljava/util/LinkedHashMap;.<init>:(IFZ)V` @kind direct;
  #L3f735c.  v3.`o.e.a` @type ^`java.util.LinkedHashMap` := v4 @kind object;
  #L3f7360.  return @kind void;
  #L3f7362.  v4:= new `java.lang.IllegalArgumentException`;
  #L3f7366.  v0:= "maxSize <= 0" @kind object;
  #L3f736a.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7370.  throw v4;
}
procedure `int` `f`(`o.e` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lo/e;.f:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f6ff0.  call temp:= `g`(v3, v4, v5) @signature `Lo/e;.g:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind virtual;
  #L3f6ff6.  v0:= temp;
  #L3f6ff8.  if v0 < 0 then goto L3f6ffe;
  #L3f6ffc.  return v0;
  #L3f6ffe.  v0:= new `java.lang.IllegalStateException`;
  #L3f7002.  v1:= new `java.lang.StringBuilder`;
  #L3f7006.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f700c.  v2:= "Negative size: " @kind object;
  #L3f7010.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f7016.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f701c.  v4:= "=" @kind object;
  #L3f7020.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f7026.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f702c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f7032.  v4:= temp @kind object;
  #L3f7034.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f703a.  throw v0;
}
procedure `java.lang.Object` `a`(`o.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/e;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L3f7060.  v1:= 0I;
  #L3f7062.  return v1 @kind object;
}
procedure `void` `b`(`o.e` v0 @kind this, `boolean` v1 , `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lo/e;.b:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L3f7384.  return @kind void;
}
procedure `java.lang.Object` `c`(`o.e` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lo/e;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7074.  v0:= "key == null" @kind object;
  #L3f7078.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f707e.  @monitorenter v4
  #L3f7080.  v0:= v4.`o.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3f7084.  call temp:= `get`(v0, v5) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f708a.  v0:= temp @kind object;
  #L3f708c.  if v0 == 0 then goto L3f70a0;
  #L3f7090.  v5:= v4.`o.e.g` @type ^`int`;
  #L3f7094.  v5:= v5 + 1;
  #L3f7098.  v4.`o.e.g` @type ^`int` := v5;
  #L3f709c.  @monitorexit v4
  #L3f709e.  return v0 @kind object;
  #L3f70a0.  v0:= v4.`o.e.h` @type ^`int`;
  #L3f70a4.  v0:= v0 + 1;
  #L3f70a8.  v4.`o.e.h` @type ^`int` := v0;
  #L3f70ac.  @monitorexit v4
  #L3f70ae.  call temp:= `a`(v4, v5) @signature `Lo/e;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f70b4.  v0:= temp @kind object;
  #L3f70b6.  if v0 != 0 then goto L3f70be;
  #L3f70ba.  v5:= 0I;
  #L3f70bc.  return v5 @kind object;
  #L3f70be.  @monitorenter v4
  #L3f70c0.  v1:= v4.`o.e.e` @type ^`int`;
  #L3f70c4.  v1:= v1 + 1;
  #L3f70c8.  v4.`o.e.e` @type ^`int` := v1;
  #L3f70cc.  v1:= v4.`o.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3f70d0.  call temp:= `put`(v1, v5, v0) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f70d6.  v1:= temp @kind object;
  #L3f70d8.  if v1 == 0 then goto L3f70e8;
  #L3f70dc.  v2:= v4.`o.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3f70e0.  call temp:= `put`(v2, v5, v1) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f70e6.  goto L3f70fa;
  #L3f70e8.  v2:= v4.`o.e.b` @type ^`int`;
  #L3f70ec.  call temp:= `f`(v4, v5, v0) @signature `Lo/e;.f:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L3f70f2.  v3:= temp;
  #L3f70f4.  v2:= v2 + v3 @kind int;
  #L3f70f6.  v4.`o.e.b` @type ^`int` := v2;
  #L3f70fa.  @monitorexit v4
  #L3f70fc.  if v1 == 0 then goto L3f710a;
  #L3f7100.  v2:= 0I;
  #L3f7102.  call `b`(v4, v2, v5, v0, v1) @signature `Lo/e;.b:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3f7108.  return v1 @kind object;
  #L3f710a.  v5:= v4.`o.e.c` @type ^`int`;
  #L3f710e.  call `i`(v4, v5) @signature `Lo/e;.i:(I)V` @kind virtual;
  #L3f7114.  return v0 @kind object;
  #L3f7116.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f7118.  @monitorexit v4
  #L3f711a.  throw v5;
  #L3f711c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f711e.  @monitorexit v4
  #L3f7120.  throw v5;
  catch `java.lang.Throwable` @[L3f7080..L3f70ae] goto L3f711c;
  catch `java.lang.Throwable` @[L3f70c0..L3f70fc] goto L3f7116;
  catch `java.lang.Throwable` @[L3f7118..L3f711a] goto L3f7116;
  catch `java.lang.Throwable` @[L3f711e..L3f7120] goto L3f711c;
}
procedure `java.lang.Object` `d`(`o.e` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lo/e;.d:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f715c.  if v4 == 0 then goto L3f71c6;
  #L3f7160.  if v5 == 0 then goto L3f71c6;
  #L3f7164.  @monitorenter v3
  #L3f7166.  v0:= v3.`o.e.d` @type ^`int`;
  #L3f716a.  v0:= v0 + 1;
  #L3f716e.  v3.`o.e.d` @type ^`int` := v0;
  #L3f7172.  v0:= v3.`o.e.b` @type ^`int`;
  #L3f7176.  call temp:= `f`(v3, v4, v5) @signature `Lo/e;.f:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L3f717c.  v1:= temp;
  #L3f717e.  v0:= v0 + v1 @kind int;
  #L3f7180.  v3.`o.e.b` @type ^`int` := v0;
  #L3f7184.  v0:= v3.`o.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3f7188.  call temp:= `put`(v0, v4, v5) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f718e.  v0:= temp @kind object;
  #L3f7190.  if v0 == 0 then goto L3f71a6;
  #L3f7194.  v1:= v3.`o.e.b` @type ^`int`;
  #L3f7198.  call temp:= `f`(v3, v4, v0) @signature `Lo/e;.f:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L3f719e.  v2:= temp;
  #L3f71a0.  v1:= v1 - v2 @kind int;
  #L3f71a2.  v3.`o.e.b` @type ^`int` := v1;
  #L3f71a6.  @monitorexit v3
  #L3f71a8.  if v0 == 0 then goto L3f71b4;
  #L3f71ac.  v1:= 0I;
  #L3f71ae.  call `b`(v3, v1, v4, v0, v5) @signature `Lo/e;.b:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3f71b4.  v4:= v3.`o.e.c` @type ^`int`;
  #L3f71b8.  call `i`(v3, v4) @signature `Lo/e;.i:(I)V` @kind virtual;
  #L3f71be.  return v0 @kind object;
  #L3f71c0.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f71c2.  @monitorexit v3
  #L3f71c4.  throw v4;
  #L3f71c6.  v4:= new `java.lang.NullPointerException`;
  #L3f71ca.  v5:= "key == null || value == null" @kind object;
  #L3f71ce.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f71d4.  throw v4;
  catch `java.lang.Throwable` @[L3f7166..L3f71a8] goto L3f71c0;
  catch `java.lang.Throwable` @[L3f71c2..L3f71c4] goto L3f71c0;
}
procedure `java.lang.Object` `e`(`o.e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lo/e;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3f71fc.  v0:= "key == null" @kind object;
  #L3f7200.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f7206.  @monitorenter v3
  #L3f7208.  v0:= v3.`o.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3f720c.  call temp:= `remove`(v0, v4) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f7212.  v0:= temp @kind object;
  #L3f7214.  if v0 == 0 then goto L3f722a;
  #L3f7218.  v1:= v3.`o.e.b` @type ^`int`;
  #L3f721c.  call temp:= `f`(v3, v4, v0) @signature `Lo/e;.f:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L3f7222.  v2:= temp;
  #L3f7224.  v1:= v1 - v2 @kind int;
  #L3f7226.  v3.`o.e.b` @type ^`int` := v1;
  #L3f722a.  @monitorexit v3
  #L3f722c.  if v0 == 0 then goto L3f723a;
  #L3f7230.  v1:= 0I;
  #L3f7232.  v2:= 0I;
  #L3f7234.  call `b`(v3, v1, v4, v0, v2) @signature `Lo/e;.b:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3f723a.  return v0 @kind object;
  #L3f723c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f723e.  @monitorexit v3
  #L3f7240.  throw v4;
  catch `java.lang.Throwable` @[L3f7208..L3f722c] goto L3f723c;
  catch `java.lang.Throwable` @[L3f723e..L3f7240] goto L3f723c;
}
procedure `int` `g`(`o.e` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lo/e;.g:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;

  #L3f704c.  v1:= 1I;
  #L3f704e.  return v1;
}
procedure `java.util.Map` `h`(`o.e` v2 @kind this) @signature `Lo/e;.h:()Ljava/util/Map;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f7304.  @monitorenter v2
  #L3f7306.  v0:= new `java.util.LinkedHashMap`;
  #L3f730a.  v1:= v2.`o.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3f730e.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L3f7314.  @monitorexit v2
  #L3f7316.  return v0 @kind object;
  #L3f7318.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f731a.  @monitorexit v2
  #L3f731c.  throw v0;
  catch `java.lang.Throwable` @[L3f7306..L3f7314] goto L3f7318;
}
procedure `void` `i`(`o.e` v4 @kind this, `int` v5 ) @signature `Lo/e;.i:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7398.  @monitorenter v4
  #L3f739a.  v0:= v4.`o.e.b` @type ^`int`;
  #L3f739e.  if v0 < 0 then goto L3f743c;
  #L3f73a2.  v0:= v4.`o.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3f73a6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/LinkedHashMap;.isEmpty:()Z` @kind virtual;
  #L3f73ac.  v0:= temp;
  #L3f73ae.  if v0 == 0 then goto L3f73ba;
  #L3f73b2.  v0:= v4.`o.e.b` @type ^`int`;
  #L3f73b6.  if v0 != 0 then goto L3f743c;
  #L3f73ba.  v0:= v4.`o.e.b` @type ^`int`;
  #L3f73be.  if v0 <= v5 then goto L3f7438;
  #L3f73c2.  v0:= v4.`o.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3f73c6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/LinkedHashMap;.isEmpty:()Z` @kind virtual;
  #L3f73cc.  v0:= temp;
  #L3f73ce.  if v0 == 0 then goto L3f73d4;
  #L3f73d2.  goto L3f7438;
  #L3f73d4.  v0:= v4.`o.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3f73d8.  call temp:= `entrySet`(v0) @signature `Ljava/util/LinkedHashMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L3f73de.  v0:= temp @kind object;
  #L3f73e0.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f73e6.  v0:= temp @kind object;
  #L3f73e8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f73ee.  v0:= temp @kind object;
  #L3f73f0.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L3f73f4.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3f73fa.  v1:= temp @kind object;
  #L3f73fc.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3f7402.  v0:= temp @kind object;
  #L3f7404.  v2:= v4.`o.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3f7408.  call temp:= `remove`(v2, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f740e.  v2:= v4.`o.e.b` @type ^`int`;
  #L3f7412.  call temp:= `f`(v4, v1, v0) @signature `Lo/e;.f:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L3f7418.  v3:= temp;
  #L3f741a.  v2:= v2 - v3 @kind int;
  #L3f741c.  v4.`o.e.b` @type ^`int` := v2;
  #L3f7420.  v2:= v4.`o.e.f` @type ^`int`;
  #L3f7424.  v3:= 1I;
  #L3f7426.  v2:= v2 + v3 @kind int;
  #L3f7428.  v4.`o.e.f` @type ^`int` := v2;
  #L3f742c.  @monitorexit v4
  #L3f742e.  v2:= 0I;
  #L3f7430.  call `b`(v4, v3, v1, v0, v2) @signature `Lo/e;.b:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3f7436.  goto L3f7398;
  #L3f7438.  @monitorexit v4
  #L3f743a.  return @kind void;
  #L3f743c.  v5:= new `java.lang.IllegalStateException`;
  #L3f7440.  v0:= new `java.lang.StringBuilder`;
  #L3f7444.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f744a.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f7450.  v1:= temp @kind object;
  #L3f7452.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3f7458.  v1:= temp @kind object;
  #L3f745a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f7460.  v1:= ".sizeOf() is reporting inconsistent results!" @kind object;
  #L3f7464.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f746a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f7470.  v0:= temp @kind object;
  #L3f7472.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7478.  throw v5;
  #L3f747a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f747c.  @monitorexit v4
  #L3f747e.  throw v5;
  catch `java.lang.Throwable` @[L3f739a..L3f742e] goto L3f747a;
  catch `java.lang.Throwable` @[L3f7438..L3f747e] goto L3f747a;
}
procedure `java.lang.String` `toString`(`o.e` v6 @kind this) @signature `Lo/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f7268.  @monitorenter v6
  #L3f726a.  v0:= v6.`o.e.g` @type ^`int`;
  #L3f726e.  v1:= v6.`o.e.h` @type ^`int`;
  #L3f7272.  v1:= v1 + v0 @kind int;
  #L3f7274.  v2:= 0I;
  #L3f7276.  if v1 == 0 then goto L3f7282;
  #L3f727a.  v0:= v0 * 100;
  #L3f727e.  v0:= v0 / v1 @kind int;
  #L3f7280.  goto L3f7284;
  #L3f7282.  v0:= 0I;
  #L3f7284.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L3f7288.  v3:= "LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]" @kind object;
  #L3f728c.  v4:= 4I;
  #L3f728e.  v4:= new `java.lang.Object`[v4];
  #L3f7292.  v5:= v6.`o.e.c` @type ^`int`;
  #L3f7296.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f729c.  v5:= temp @kind object;
  #L3f729e.  v4[v2]:= v5 @kind object;
  #L3f72a2.  v2:= 1I;
  #L3f72a4.  v5:= v6.`o.e.g` @type ^`int`;
  #L3f72a8.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f72ae.  v5:= temp @kind object;
  #L3f72b0.  v4[v2]:= v5 @kind object;
  #L3f72b4.  v2:= 2I;
  #L3f72b6.  v5:= v6.`o.e.h` @type ^`int`;
  #L3f72ba.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f72c0.  v5:= temp @kind object;
  #L3f72c2.  v4[v2]:= v5 @kind object;
  #L3f72c6.  v2:= 3I;
  #L3f72c8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f72ce.  v0:= temp @kind object;
  #L3f72d0.  v4[v2]:= v0 @kind object;
  #L3f72d4.  call temp:= `format`(v1, v3, v4) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3f72da.  v0:= temp @kind object;
  #L3f72dc.  @monitorexit v6
  #L3f72de.  return v0 @kind object;
  #L3f72e0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f72e2.  @monitorexit v6
  #L3f72e4.  throw v0;
  catch `java.lang.Throwable` @[L3f726a..L3f72dc] goto L3f72e0;
}
