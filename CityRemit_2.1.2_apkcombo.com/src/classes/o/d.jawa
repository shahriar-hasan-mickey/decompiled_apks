record `o.d` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface {
  `boolean` `o.d.o` @AccessFlag PRIVATE;
  `long`[] `o.d.p` @AccessFlag PRIVATE;
  `java.lang.Object`[] `o.d.q` @AccessFlag PRIVATE;
  `int` `o.d.r` @AccessFlag PRIVATE;
}
global `java.lang.Object` `@@o.d.s` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lo/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f6cd8.  v0:= new `java.lang.Object`;
  #L3f6cdc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f6ce2.  `@@o.d.s` @type ^`java.lang.Object` := v0 @kind object;
  #L3f6ce6.  return @kind void;
}
procedure `void` `<init>`(`o.d` v1 @kind this) @signature `Lo/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f6cf8.  v0:= 10I;
  #L3f6cfc.  call `<init>`(v1, v0) @signature `Lo/d;.<init>:(I)V` @kind direct;
  #L3f6d02.  return @kind void;
}
procedure `void` `<init>`(`o.d` v1 @kind this, `int` v2 ) @signature `Lo/d;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f6d14.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f6d1a.  v0:= 0I;
  #L3f6d1c.  v1.`o.d.o` @type ^`boolean` := v0 @kind boolean;
  #L3f6d20.  if v2 != 0 then goto L3f6d36;
  #L3f6d24.  v2:= `@@o.c.b` @type ^`long`[] @kind object;
  #L3f6d28.  v1.`o.d.p` @type ^`long`[] := v2 @kind object;
  #L3f6d2c.  v2:= `@@o.c.c` @type ^`java.lang.Object`[] @kind object;
  #L3f6d30.  v1.`o.d.q` @type ^`java.lang.Object`[] := v2 @kind object;
  #L3f6d34.  goto L3f6d4e;
  #L3f6d36.  call temp:= `f`(v2) @signature `Lo/c;.f:(I)I` @kind static;
  #L3f6d3c.  v2:= temp;
  #L3f6d3e.  v0:= new `long`[v2];
  #L3f6d42.  v1.`o.d.p` @type ^`long`[] := v0 @kind object;
  #L3f6d46.  v2:= new `java.lang.Object`[v2];
  #L3f6d4a.  v1.`o.d.q` @type ^`java.lang.Object`[] := v2 @kind object;
  #L3f6d4e.  return @kind void;
}
procedure `void` `f`(`o.d` v9 @kind this) @signature `Lo/d;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f6e44.  v0:= v9.`o.d.r` @type ^`int`;
  #L3f6e48.  v1:= v9.`o.d.p` @type ^`long`[] @kind object;
  #L3f6e4c.  v2:= v9.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6e50.  v3:= 0I;
  #L3f6e52.  v4:= 0I;
  #L3f6e54.  v5:= 0I;
  #L3f6e56.  if v4 >= v0 then goto L3f6e86;
  #L3f6e5a.  v6:= v2[v4] @kind object;
  #L3f6e5e.  v7:= `@@o.d.s` @type ^`java.lang.Object` @kind object;
  #L3f6e62.  if v6 == v7 then goto L3f6e80;
  #L3f6e66.  if v4 == v5 then goto L3f6e7c;
  #L3f6e6a.  v7:= v1[v4] @kind wide;
  #L3f6e6e.  v1[v5]:= v7 @kind wide;
  #L3f6e72.  v2[v5]:= v6 @kind object;
  #L3f6e76.  v6:= 0I;
  #L3f6e78.  v2[v4]:= v6 @kind object;
  #L3f6e7c.  v5:= v5 + 1;
  #L3f6e80.  v4:= v4 + 1;
  #L3f6e84.  goto L3f6e56;
  #L3f6e86.  v9.`o.d.o` @type ^`boolean` := v3 @kind boolean;
  #L3f6e8a.  v9.`o.d.r` @type ^`int` := v5;
  #L3f6e8e.  return @kind void;
}
procedure `void` `a`(`o.d` v6 @kind this, `long` v7 , `java.lang.Object` v9 @kind object) @signature `Lo/d;.a:(JLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f6d60.  v0:= v6.`o.d.r` @type ^`int`;
  #L3f6d64.  if v0 == 0 then goto L3f6d84;
  #L3f6d68.  v1:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6d6c.  v2:= v0 + -1;
  #L3f6d70.  v2:= v1[v2] @kind wide;
  #L3f6d74.  v1:= lcmp(v7, v2);
  #L3f6d78.  if v1 > 0 then goto L3f6d84;
  #L3f6d7c.  call `n`(v6, v7, v9) @signature `Lo/d;.n:(JLjava/lang/Object;)V` @kind virtual;
  #L3f6d82.  return @kind void;
  #L3f6d84.  v1:= v6.`o.d.o` @type ^`boolean` @kind boolean;
  #L3f6d88.  if v1 == 0 then goto L3f6d9c;
  #L3f6d8c.  v1:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6d90.  v1:= length @variable v1;
  #L3f6d92.  if v0 < v1 then goto L3f6d9c;
  #L3f6d96.  call `f`(v6) @signature `Lo/d;.f:()V` @kind direct;
  #L3f6d9c.  v0:= v6.`o.d.r` @type ^`int`;
  #L3f6da0.  v1:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6da4.  v1:= length @variable v1;
  #L3f6da6.  if v0 < v1 then goto L3f6de0;
  #L3f6daa.  v1:= v0 + 1;
  #L3f6dae.  call temp:= `f`(v1) @signature `Lo/c;.f:(I)I` @kind static;
  #L3f6db4.  v1:= temp;
  #L3f6db6.  v2:= new `long`[v1];
  #L3f6dba.  v1:= new `java.lang.Object`[v1];
  #L3f6dbe.  v3:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6dc2.  v4:= length @variable v3;
  #L3f6dc4.  v5:= 0I;
  #L3f6dc6.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6dcc.  v3:= v6.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6dd0.  v4:= length @variable v3;
  #L3f6dd2.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6dd8.  v6.`o.d.p` @type ^`long`[] := v2 @kind object;
  #L3f6ddc.  v6.`o.d.q` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3f6de0.  v1:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6de4.  v1[v0]:= v7 @kind wide;
  #L3f6de8.  v7:= v6.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6dec.  v7[v0]:= v9 @kind object;
  #L3f6df0.  v0:= v0 + 1;
  #L3f6df4.  v6.`o.d.r` @type ^`int` := v0;
  #L3f6df8.  return @kind void;
}
procedure `void` `b`(`o.d` v5 @kind this) @signature `Lo/d;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f6e0c.  v0:= v5.`o.d.r` @type ^`int`;
  #L3f6e10.  v1:= v5.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6e14.  v2:= 0I;
  #L3f6e16.  v3:= 0I;
  #L3f6e18.  if v3 >= v0 then goto L3f6e28;
  #L3f6e1c.  v4:= 0I;
  #L3f6e1e.  v1[v3]:= v4 @kind object;
  #L3f6e22.  v3:= v3 + 1;
  #L3f6e26.  goto L3f6e18;
  #L3f6e28.  v5.`o.d.r` @type ^`int` := v2;
  #L3f6e2c.  v5.`o.d.o` @type ^`boolean` := v2 @kind boolean;
  #L3f6e30.  return @kind void;
}
procedure `java.lang.Object` `clone`(`o.d` v1 @kind this) @signature `Lo/d;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3f6b04.  call temp:= `d`(v1) @signature `Lo/d;.d:()Lo/d;` @kind virtual;
  #L3f6b0a.  v0:= temp @kind object;
  #L3f6b0c.  return v0 @kind object;
}
procedure `o.d` `d`(`o.d` v2 @kind this) @signature `Lo/d;.d:()Lo/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6c74.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L3f6c7a.  v0:= temp @kind object;
  #L3f6c7c.  v0:= (`o.d`) v0 @kind object;
  #L3f6c80.  v1:= v2.`o.d.p` @type ^`long`[] @kind object;
  #L3f6c84.  call temp:= `clone`(v1) @signature `[J.clone:()Ljava/lang/Object;` @kind virtual;
  #L3f6c8a.  v1:= temp @kind object;
  #L3f6c8c.  v1:= (`long`[]) v1 @kind object;
  #L3f6c90.  v0.`o.d.p` @type ^`long`[] := v1 @kind object;
  #L3f6c94.  v1:= v2.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6c98.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3f6c9e.  v1:= temp @kind object;
  #L3f6ca0.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L3f6ca4.  v0.`o.d.q` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3f6ca8.  return v0 @kind object;
  #L3f6caa.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L3f6cac.  v1:= new `java.lang.AssertionError`;
  #L3f6cb0.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f6cb6.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L3f6c74..L3f6ca8] goto L3f6caa;
}
procedure `java.lang.Object` `g`(`o.d` v1 @kind this, `long` v2 ) @signature `Lo/d;.g:(J)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6b20.  v0:= 0I;
  #L3f6b22.  call temp:= `j`(v1, v2, v0) @signature `Lo/d;.j:(JLjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f6b28.  v2:= temp @kind object;
  #L3f6b2a.  return v2 @kind object;
}
procedure `java.lang.Object` `j`(`o.d` v2 @kind this, `long` v3 , `java.lang.Object` v5 @kind object) @signature `Lo/d;.j:(JLjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6b3c.  v0:= v2.`o.d.p` @type ^`long`[] @kind object;
  #L3f6b40.  v1:= v2.`o.d.r` @type ^`int`;
  #L3f6b44.  call temp:= `b`(v0, v1, v3) @signature `Lo/c;.b:([JIJ)I` @kind static;
  #L3f6b4a.  v3:= temp;
  #L3f6b4c.  if v3 < 0 then goto L3f6b68;
  #L3f6b50.  v4:= v2.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6b54.  v0:= v4[v3] @kind object;
  #L3f6b58.  v1:= `@@o.d.s` @type ^`java.lang.Object` @kind object;
  #L3f6b5c.  if v0 != v1 then goto L3f6b62;
  #L3f6b60.  goto L3f6b68;
  #L3f6b62.  v3:= v4[v3] @kind object;
  #L3f6b66.  return v3 @kind object;
  #L3f6b68.  return v5 @kind object;
}
procedure `int` `l`(`o.d` v2 @kind this, `long` v3 ) @signature `Lo/d;.l:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6ab0.  v0:= v2.`o.d.o` @type ^`boolean` @kind boolean;
  #L3f6ab4.  if v0 == 0 then goto L3f6abe;
  #L3f6ab8.  call `f`(v2) @signature `Lo/d;.f:()V` @kind direct;
  #L3f6abe.  v0:= v2.`o.d.p` @type ^`long`[] @kind object;
  #L3f6ac2.  v1:= v2.`o.d.r` @type ^`int`;
  #L3f6ac6.  call temp:= `b`(v0, v1, v3) @signature `Lo/c;.b:([JIJ)I` @kind static;
  #L3f6acc.  v3:= temp;
  #L3f6ace.  return v3;
}
procedure `long` `m`(`o.d` v3 @kind this, `int` v4 ) @signature `Lo/d;.m:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f6c4c.  v0:= v3.`o.d.o` @type ^`boolean` @kind boolean;
  #L3f6c50.  if v0 == 0 then goto L3f6c5a;
  #L3f6c54.  call `f`(v3) @signature `Lo/d;.f:()V` @kind direct;
  #L3f6c5a.  v0:= v3.`o.d.p` @type ^`long`[] @kind object;
  #L3f6c5e.  v1:= v0[v4] @kind wide;
  #L3f6c62.  return v1 @kind wide;
}
procedure `void` `n`(`o.d` v6 @kind this, `long` v7 , `java.lang.Object` v9 @kind object) @signature `Lo/d;.n:(JLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f6ea0.  v0:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6ea4.  v1:= v6.`o.d.r` @type ^`int`;
  #L3f6ea8.  call temp:= `b`(v0, v1, v7) @signature `Lo/c;.b:([JIJ)I` @kind static;
  #L3f6eae.  v0:= temp;
  #L3f6eb0.  if v0 < 0 then goto L3f6ebe;
  #L3f6eb4.  v7:= v6.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6eb8.  v7[v0]:= v9 @kind object;
  #L3f6ebc.  goto L3f6f9c;
  #L3f6ebe.  v0:= ~v0 @kind int;
  #L3f6ec0.  v1:= v6.`o.d.r` @type ^`int`;
  #L3f6ec4.  if v0 >= v1 then goto L3f6ee6;
  #L3f6ec8.  v2:= v6.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6ecc.  v3:= v2[v0] @kind object;
  #L3f6ed0.  v4:= `@@o.d.s` @type ^`java.lang.Object` @kind object;
  #L3f6ed4.  if v3 != v4 then goto L3f6ee6;
  #L3f6ed8.  v1:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6edc.  v1[v0]:= v7 @kind wide;
  #L3f6ee0.  v2[v0]:= v9 @kind object;
  #L3f6ee4.  return @kind void;
  #L3f6ee6.  v2:= v6.`o.d.o` @type ^`boolean` @kind boolean;
  #L3f6eea.  if v2 == 0 then goto L3f6f10;
  #L3f6eee.  v2:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6ef2.  v2:= length @variable v2;
  #L3f6ef4.  if v1 < v2 then goto L3f6f10;
  #L3f6ef8.  call `f`(v6) @signature `Lo/d;.f:()V` @kind direct;
  #L3f6efe.  v0:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6f02.  v1:= v6.`o.d.r` @type ^`int`;
  #L3f6f06.  call temp:= `b`(v0, v1, v7) @signature `Lo/c;.b:([JIJ)I` @kind static;
  #L3f6f0c.  v0:= temp;
  #L3f6f0e.  v0:= ~v0 @kind int;
  #L3f6f10.  v1:= v6.`o.d.r` @type ^`int`;
  #L3f6f14.  v2:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6f18.  v2:= length @variable v2;
  #L3f6f1a.  if v1 < v2 then goto L3f6f54;
  #L3f6f1e.  v1:= v1 + 1;
  #L3f6f22.  call temp:= `f`(v1) @signature `Lo/c;.f:(I)I` @kind static;
  #L3f6f28.  v1:= temp;
  #L3f6f2a.  v2:= new `long`[v1];
  #L3f6f2e.  v1:= new `java.lang.Object`[v1];
  #L3f6f32.  v3:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6f36.  v4:= length @variable v3;
  #L3f6f38.  v5:= 0I;
  #L3f6f3a.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6f40.  v3:= v6.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6f44.  v4:= length @variable v3;
  #L3f6f46.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6f4c.  v6.`o.d.p` @type ^`long`[] := v2 @kind object;
  #L3f6f50.  v6.`o.d.q` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3f6f54.  v1:= v6.`o.d.r` @type ^`int`;
  #L3f6f58.  v2:= v1 - v0 @kind int;
  #L3f6f5c.  if v2 == 0 then goto L3f6f80;
  #L3f6f60.  v2:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6f64.  v3:= v0 + 1;
  #L3f6f68.  v1:= v1 - v0 @kind int;
  #L3f6f6a.  call `arraycopy`(v2, v0, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6f70.  v1:= v6.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6f74.  v2:= v6.`o.d.r` @type ^`int`;
  #L3f6f78.  v2:= v2 - v0 @kind int;
  #L3f6f7a.  call `arraycopy`(v1, v0, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6f80.  v1:= v6.`o.d.p` @type ^`long`[] @kind object;
  #L3f6f84.  v1[v0]:= v7 @kind wide;
  #L3f6f88.  v7:= v6.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6f8c.  v7[v0]:= v9 @kind object;
  #L3f6f90.  v7:= v6.`o.d.r` @type ^`int`;
  #L3f6f94.  v7:= v7 + 1;
  #L3f6f98.  v6.`o.d.r` @type ^`int` := v7;
  #L3f6f9c.  return @kind void;
}
procedure `void` `p`(`o.d` v2 @kind this, `long` v3 ) @signature `Lo/d;.p:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6fb0.  v0:= v2.`o.d.p` @type ^`long`[] @kind object;
  #L3f6fb4.  v1:= v2.`o.d.r` @type ^`int`;
  #L3f6fb8.  call temp:= `b`(v0, v1, v3) @signature `Lo/c;.b:([JIJ)I` @kind static;
  #L3f6fbe.  v3:= temp;
  #L3f6fc0.  if v3 < 0 then goto L3f6fde;
  #L3f6fc4.  v4:= v2.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6fc8.  v0:= v4[v3] @kind object;
  #L3f6fcc.  v1:= `@@o.d.s` @type ^`java.lang.Object` @kind object;
  #L3f6fd0.  if v0 == v1 then goto L3f6fde;
  #L3f6fd4.  v4[v3]:= v1 @kind object;
  #L3f6fd8.  v3:= 1I;
  #L3f6fda.  v2.`o.d.o` @type ^`boolean` := v3 @kind boolean;
  #L3f6fde.  return @kind void;
}
procedure `int` `q`(`o.d` v1 @kind this) @signature `Lo/d;.q:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6ae0.  v0:= v1.`o.d.o` @type ^`boolean` @kind boolean;
  #L3f6ae4.  if v0 == 0 then goto L3f6aee;
  #L3f6ae8.  call `f`(v1) @signature `Lo/d;.f:()V` @kind direct;
  #L3f6aee.  v0:= v1.`o.d.r` @type ^`int`;
  #L3f6af2.  return v0;
}
procedure `java.lang.Object` `r`(`o.d` v1 @kind this, `int` v2 ) @signature `Lo/d;.r:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6b7c.  v0:= v1.`o.d.o` @type ^`boolean` @kind boolean;
  #L3f6b80.  if v0 == 0 then goto L3f6b8a;
  #L3f6b84.  call `f`(v1) @signature `Lo/d;.f:()V` @kind direct;
  #L3f6b8a.  v0:= v1.`o.d.q` @type ^`java.lang.Object`[] @kind object;
  #L3f6b8e.  v2:= v0[v2] @kind object;
  #L3f6b92.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`o.d` v4 @kind this) @signature `Lo/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f6ba4.  call temp:= `q`(v4) @signature `Lo/d;.q:()I` @kind virtual;
  #L3f6baa.  v0:= temp;
  #L3f6bac.  if v0 > 0 then goto L3f6bb6;
  #L3f6bb0.  v0:= "{}" @kind object;
  #L3f6bb4.  return v0 @kind object;
  #L3f6bb6.  v0:= new `java.lang.StringBuilder`;
  #L3f6bba.  v1:= v4.`o.d.r` @type ^`int`;
  #L3f6bbe.  v1:= v1 * 28;
  #L3f6bc2.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3f6bc8.  v1:= 123I;
  #L3f6bcc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6bd2.  v1:= 0I;
  #L3f6bd4.  v2:= v4.`o.d.r` @type ^`int`;
  #L3f6bd8.  if v1 >= v2 then goto L3f6c26;
  #L3f6bdc.  if v1 <= 0 then goto L3f6bea;
  #L3f6be0.  v2:= ", " @kind object;
  #L3f6be4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6bea.  call temp:= `m`(v4, v1) @signature `Lo/d;.m:(I)J` @kind virtual;
  #L3f6bf0.  v2:= temp @kind wide;
  #L3f6bf2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6bf8.  v2:= 61I;
  #L3f6bfc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6c02.  call temp:= `r`(v4, v1) @signature `Lo/d;.r:(I)Ljava/lang/Object;` @kind virtual;
  #L3f6c08.  v2:= temp @kind object;
  #L3f6c0a.  if v2 == v4 then goto L3f6c16;
  #L3f6c0e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6c14.  goto L3f6c20;
  #L3f6c16.  v2:= "(this Map)" @kind object;
  #L3f6c1a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6c20.  v1:= v1 + 1;
  #L3f6c24.  goto L3f6bd4;
  #L3f6c26.  v1:= 125I;
  #L3f6c2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6c30.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f6c36.  v0:= temp @kind object;
  #L3f6c38.  return v0 @kind object;
}
