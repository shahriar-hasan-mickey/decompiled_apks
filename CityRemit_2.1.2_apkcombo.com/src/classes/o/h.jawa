record `o.h` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface {
  `boolean` `o.h.o` @AccessFlag PRIVATE;
  `int`[] `o.h.p` @AccessFlag PRIVATE;
  `java.lang.Object`[] `o.h.q` @AccessFlag PRIVATE;
  `int` `o.h.r` @AccessFlag PRIVATE;
}
global `java.lang.Object` `@@o.h.s` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lo/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f9128.  v0:= new `java.lang.Object`;
  #L3f912c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f9132.  `@@o.h.s` @type ^`java.lang.Object` := v0 @kind object;
  #L3f9136.  return @kind void;
}
procedure `void` `<init>`(`o.h` v1 @kind this) @signature `Lo/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f9148.  v0:= 10I;
  #L3f914c.  call `<init>`(v1, v0) @signature `Lo/h;.<init>:(I)V` @kind direct;
  #L3f9152.  return @kind void;
}
procedure `void` `<init>`(`o.h` v1 @kind this, `int` v2 ) @signature `Lo/h;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f9164.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f916a.  v0:= 0I;
  #L3f916c.  v1.`o.h.o` @type ^`boolean` := v0 @kind boolean;
  #L3f9170.  if v2 != 0 then goto L3f9186;
  #L3f9174.  v2:= `@@o.c.a` @type ^`int`[] @kind object;
  #L3f9178.  v1.`o.h.p` @type ^`int`[] := v2 @kind object;
  #L3f917c.  v2:= `@@o.c.c` @type ^`java.lang.Object`[] @kind object;
  #L3f9180.  v1.`o.h.q` @type ^`java.lang.Object`[] := v2 @kind object;
  #L3f9184.  goto L3f919e;
  #L3f9186.  call temp:= `e`(v2) @signature `Lo/c;.e:(I)I` @kind static;
  #L3f918c.  v2:= temp;
  #L3f918e.  v0:= new `int`[v2];
  #L3f9192.  v1.`o.h.p` @type ^`int`[] := v0 @kind object;
  #L3f9196.  v2:= new `java.lang.Object`[v2];
  #L3f919a.  v1.`o.h.q` @type ^`java.lang.Object`[] := v2 @kind object;
  #L3f919e.  return @kind void;
}
procedure `void` `f`(`o.h` v8 @kind this) @signature `Lo/h;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f9290.  v0:= v8.`o.h.r` @type ^`int`;
  #L3f9294.  v1:= v8.`o.h.p` @type ^`int`[] @kind object;
  #L3f9298.  v2:= v8.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f929c.  v3:= 0I;
  #L3f929e.  v4:= 0I;
  #L3f92a0.  v5:= 0I;
  #L3f92a2.  if v4 >= v0 then goto L3f92d2;
  #L3f92a6.  v6:= v2[v4] @kind object;
  #L3f92aa.  v7:= `@@o.h.s` @type ^`java.lang.Object` @kind object;
  #L3f92ae.  if v6 == v7 then goto L3f92cc;
  #L3f92b2.  if v4 == v5 then goto L3f92c8;
  #L3f92b6.  v7:= v1[v4];
  #L3f92ba.  v1[v5]:= v7;
  #L3f92be.  v2[v5]:= v6 @kind object;
  #L3f92c2.  v6:= 0I;
  #L3f92c4.  v2[v4]:= v6 @kind object;
  #L3f92c8.  v5:= v5 + 1;
  #L3f92cc.  v4:= v4 + 1;
  #L3f92d0.  goto L3f92a2;
  #L3f92d2.  v8.`o.h.o` @type ^`boolean` := v3 @kind boolean;
  #L3f92d6.  v8.`o.h.r` @type ^`int` := v5;
  #L3f92da.  return @kind void;
}
procedure `void` `a`(`o.h` v6 @kind this, `int` v7 , `java.lang.Object` v8 @kind object) @signature `Lo/h;.a:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f91b0.  v0:= v6.`o.h.r` @type ^`int`;
  #L3f91b4.  if v0 == 0 then goto L3f91d0;
  #L3f91b8.  v1:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f91bc.  v2:= v0 + -1;
  #L3f91c0.  v1:= v1[v2];
  #L3f91c4.  if v7 > v1 then goto L3f91d0;
  #L3f91c8.  call `m`(v6, v7, v8) @signature `Lo/h;.m:(ILjava/lang/Object;)V` @kind virtual;
  #L3f91ce.  return @kind void;
  #L3f91d0.  v1:= v6.`o.h.o` @type ^`boolean` @kind boolean;
  #L3f91d4.  if v1 == 0 then goto L3f91e8;
  #L3f91d8.  v1:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f91dc.  v1:= length @variable v1;
  #L3f91de.  if v0 < v1 then goto L3f91e8;
  #L3f91e2.  call `f`(v6) @signature `Lo/h;.f:()V` @kind direct;
  #L3f91e8.  v0:= v6.`o.h.r` @type ^`int`;
  #L3f91ec.  v1:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f91f0.  v1:= length @variable v1;
  #L3f91f2.  if v0 < v1 then goto L3f922c;
  #L3f91f6.  v1:= v0 + 1;
  #L3f91fa.  call temp:= `e`(v1) @signature `Lo/c;.e:(I)I` @kind static;
  #L3f9200.  v1:= temp;
  #L3f9202.  v2:= new `int`[v1];
  #L3f9206.  v1:= new `java.lang.Object`[v1];
  #L3f920a.  v3:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f920e.  v4:= length @variable v3;
  #L3f9210.  v5:= 0I;
  #L3f9212.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f9218.  v3:= v6.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f921c.  v4:= length @variable v3;
  #L3f921e.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f9224.  v6.`o.h.p` @type ^`int`[] := v2 @kind object;
  #L3f9228.  v6.`o.h.q` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3f922c.  v1:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f9230.  v1[v0]:= v7;
  #L3f9234.  v7:= v6.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f9238.  v7[v0]:= v8 @kind object;
  #L3f923c.  v0:= v0 + 1;
  #L3f9240.  v6.`o.h.r` @type ^`int` := v0;
  #L3f9244.  return @kind void;
}
procedure `void` `b`(`o.h` v5 @kind this) @signature `Lo/h;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f9258.  v0:= v5.`o.h.r` @type ^`int`;
  #L3f925c.  v1:= v5.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f9260.  v2:= 0I;
  #L3f9262.  v3:= 0I;
  #L3f9264.  if v3 >= v0 then goto L3f9274;
  #L3f9268.  v4:= 0I;
  #L3f926a.  v1[v3]:= v4 @kind object;
  #L3f926e.  v3:= v3 + 1;
  #L3f9272.  goto L3f9264;
  #L3f9274.  v5.`o.h.r` @type ^`int` := v2;
  #L3f9278.  v5.`o.h.o` @type ^`boolean` := v2 @kind boolean;
  #L3f927c.  return @kind void;
}
procedure `java.lang.Object` `clone`(`o.h` v1 @kind this) @signature `Lo/h;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3f8f7c.  call temp:= `d`(v1) @signature `Lo/h;.d:()Lo/h;` @kind virtual;
  #L3f8f82.  v0:= temp @kind object;
  #L3f8f84.  return v0 @kind object;
}
procedure `o.h` `d`(`o.h` v2 @kind this) @signature `Lo/h;.d:()Lo/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f90c4.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L3f90ca.  v0:= temp @kind object;
  #L3f90cc.  v0:= (`o.h`) v0 @kind object;
  #L3f90d0.  v1:= v2.`o.h.p` @type ^`int`[] @kind object;
  #L3f90d4.  call temp:= `clone`(v1) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L3f90da.  v1:= temp @kind object;
  #L3f90dc.  v1:= (`int`[]) v1 @kind object;
  #L3f90e0.  v0.`o.h.p` @type ^`int`[] := v1 @kind object;
  #L3f90e4.  v1:= v2.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f90e8.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3f90ee.  v1:= temp @kind object;
  #L3f90f0.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L3f90f4.  v0.`o.h.q` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3f90f8.  return v0 @kind object;
  #L3f90fa.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L3f90fc.  v1:= new `java.lang.AssertionError`;
  #L3f9100.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f9106.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L3f90c4..L3f90f8] goto L3f90fa;
}
procedure `java.lang.Object` `g`(`o.h` v1 @kind this, `int` v2 ) @signature `Lo/h;.g:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8f98.  v0:= 0I;
  #L3f8f9a.  call temp:= `j`(v1, v2, v0) @signature `Lo/h;.j:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f8fa0.  v2:= temp @kind object;
  #L3f8fa2.  return v2 @kind object;
}
procedure `java.lang.Object` `j`(`o.h` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lo/h;.j:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f8fb4.  v0:= v3.`o.h.p` @type ^`int`[] @kind object;
  #L3f8fb8.  v1:= v3.`o.h.r` @type ^`int`;
  #L3f8fbc.  call temp:= `a`(v0, v1, v4) @signature `Lo/c;.a:([III)I` @kind static;
  #L3f8fc2.  v4:= temp;
  #L3f8fc4.  if v4 < 0 then goto L3f8fe0;
  #L3f8fc8.  v0:= v3.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f8fcc.  v1:= v0[v4] @kind object;
  #L3f8fd0.  v2:= `@@o.h.s` @type ^`java.lang.Object` @kind object;
  #L3f8fd4.  if v1 != v2 then goto L3f8fda;
  #L3f8fd8.  goto L3f8fe0;
  #L3f8fda.  v4:= v0[v4] @kind object;
  #L3f8fde.  return v4 @kind object;
  #L3f8fe0.  return v5 @kind object;
}
procedure `int` `l`(`o.h` v1 @kind this, `int` v2 ) @signature `Lo/h;.l:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8f30.  v0:= v1.`o.h.o` @type ^`boolean` @kind boolean;
  #L3f8f34.  if v0 == 0 then goto L3f8f3e;
  #L3f8f38.  call `f`(v1) @signature `Lo/h;.f:()V` @kind direct;
  #L3f8f3e.  v0:= v1.`o.h.p` @type ^`int`[] @kind object;
  #L3f8f42.  v2:= v0[v2];
  #L3f8f46.  return v2;
}
procedure `void` `m`(`o.h` v6 @kind this, `int` v7 , `java.lang.Object` v8 @kind object) @signature `Lo/h;.m:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f92ec.  v0:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f92f0.  v1:= v6.`o.h.r` @type ^`int`;
  #L3f92f4.  call temp:= `a`(v0, v1, v7) @signature `Lo/c;.a:([III)I` @kind static;
  #L3f92fa.  v0:= temp;
  #L3f92fc.  if v0 < 0 then goto L3f930a;
  #L3f9300.  v7:= v6.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f9304.  v7[v0]:= v8 @kind object;
  #L3f9308.  goto L3f93e8;
  #L3f930a.  v0:= ~v0 @kind int;
  #L3f930c.  v1:= v6.`o.h.r` @type ^`int`;
  #L3f9310.  if v0 >= v1 then goto L3f9332;
  #L3f9314.  v2:= v6.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f9318.  v3:= v2[v0] @kind object;
  #L3f931c.  v4:= `@@o.h.s` @type ^`java.lang.Object` @kind object;
  #L3f9320.  if v3 != v4 then goto L3f9332;
  #L3f9324.  v1:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f9328.  v1[v0]:= v7;
  #L3f932c.  v2[v0]:= v8 @kind object;
  #L3f9330.  return @kind void;
  #L3f9332.  v2:= v6.`o.h.o` @type ^`boolean` @kind boolean;
  #L3f9336.  if v2 == 0 then goto L3f935c;
  #L3f933a.  v2:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f933e.  v2:= length @variable v2;
  #L3f9340.  if v1 < v2 then goto L3f935c;
  #L3f9344.  call `f`(v6) @signature `Lo/h;.f:()V` @kind direct;
  #L3f934a.  v0:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f934e.  v1:= v6.`o.h.r` @type ^`int`;
  #L3f9352.  call temp:= `a`(v0, v1, v7) @signature `Lo/c;.a:([III)I` @kind static;
  #L3f9358.  v0:= temp;
  #L3f935a.  v0:= ~v0 @kind int;
  #L3f935c.  v1:= v6.`o.h.r` @type ^`int`;
  #L3f9360.  v2:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f9364.  v2:= length @variable v2;
  #L3f9366.  if v1 < v2 then goto L3f93a0;
  #L3f936a.  v1:= v1 + 1;
  #L3f936e.  call temp:= `e`(v1) @signature `Lo/c;.e:(I)I` @kind static;
  #L3f9374.  v1:= temp;
  #L3f9376.  v2:= new `int`[v1];
  #L3f937a.  v1:= new `java.lang.Object`[v1];
  #L3f937e.  v3:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f9382.  v4:= length @variable v3;
  #L3f9384.  v5:= 0I;
  #L3f9386.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f938c.  v3:= v6.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f9390.  v4:= length @variable v3;
  #L3f9392.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f9398.  v6.`o.h.p` @type ^`int`[] := v2 @kind object;
  #L3f939c.  v6.`o.h.q` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3f93a0.  v1:= v6.`o.h.r` @type ^`int`;
  #L3f93a4.  v2:= v1 - v0 @kind int;
  #L3f93a8.  if v2 == 0 then goto L3f93cc;
  #L3f93ac.  v2:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f93b0.  v3:= v0 + 1;
  #L3f93b4.  v1:= v1 - v0 @kind int;
  #L3f93b6.  call `arraycopy`(v2, v0, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f93bc.  v1:= v6.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f93c0.  v2:= v6.`o.h.r` @type ^`int`;
  #L3f93c4.  v2:= v2 - v0 @kind int;
  #L3f93c6.  call `arraycopy`(v1, v0, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f93cc.  v1:= v6.`o.h.p` @type ^`int`[] @kind object;
  #L3f93d0.  v1[v0]:= v7;
  #L3f93d4.  v7:= v6.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f93d8.  v7[v0]:= v8 @kind object;
  #L3f93dc.  v7:= v6.`o.h.r` @type ^`int`;
  #L3f93e0.  v7:= v7 + 1;
  #L3f93e4.  v6.`o.h.r` @type ^`int` := v7;
  #L3f93e8.  return @kind void;
}
procedure `int` `n`(`o.h` v1 @kind this) @signature `Lo/h;.n:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8f58.  v0:= v1.`o.h.o` @type ^`boolean` @kind boolean;
  #L3f8f5c.  if v0 == 0 then goto L3f8f66;
  #L3f8f60.  call `f`(v1) @signature `Lo/h;.f:()V` @kind direct;
  #L3f8f66.  v0:= v1.`o.h.r` @type ^`int`;
  #L3f8f6a.  return v0;
}
procedure `java.lang.Object` `p`(`o.h` v1 @kind this, `int` v2 ) @signature `Lo/h;.p:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8ff4.  v0:= v1.`o.h.o` @type ^`boolean` @kind boolean;
  #L3f8ff8.  if v0 == 0 then goto L3f9002;
  #L3f8ffc.  call `f`(v1) @signature `Lo/h;.f:()V` @kind direct;
  #L3f9002.  v0:= v1.`o.h.q` @type ^`java.lang.Object`[] @kind object;
  #L3f9006.  v2:= v0[v2] @kind object;
  #L3f900a.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`o.h` v3 @kind this) @signature `Lo/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f901c.  call temp:= `n`(v3) @signature `Lo/h;.n:()I` @kind virtual;
  #L3f9022.  v0:= temp;
  #L3f9024.  if v0 > 0 then goto L3f902e;
  #L3f9028.  v0:= "{}" @kind object;
  #L3f902c.  return v0 @kind object;
  #L3f902e.  v0:= new `java.lang.StringBuilder`;
  #L3f9032.  v1:= v3.`o.h.r` @type ^`int`;
  #L3f9036.  v1:= v1 * 28;
  #L3f903a.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3f9040.  v1:= 123I;
  #L3f9044.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f904a.  v1:= 0I;
  #L3f904c.  v2:= v3.`o.h.r` @type ^`int`;
  #L3f9050.  if v1 >= v2 then goto L3f909e;
  #L3f9054.  if v1 <= 0 then goto L3f9062;
  #L3f9058.  v2:= ", " @kind object;
  #L3f905c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9062.  call temp:= `l`(v3, v1) @signature `Lo/h;.l:(I)I` @kind virtual;
  #L3f9068.  v2:= temp;
  #L3f906a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9070.  v2:= 61I;
  #L3f9074.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f907a.  call temp:= `p`(v3, v1) @signature `Lo/h;.p:(I)Ljava/lang/Object;` @kind virtual;
  #L3f9080.  v2:= temp @kind object;
  #L3f9082.  if v2 == v3 then goto L3f908e;
  #L3f9086.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f908c.  goto L3f9098;
  #L3f908e.  v2:= "(this Map)" @kind object;
  #L3f9092.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9098.  v1:= v1 + 1;
  #L3f909c.  goto L3f904c;
  #L3f909e.  v1:= 125I;
  #L3f90a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f90a8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f90ae.  v0:= temp @kind object;
  #L3f90b0.  return v0 @kind object;
}
