record `o.f$c` @kind class @AccessFlag FINAL extends `java.util.Set` @kind interface {
  `o.f` `o.f$c.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`o.f$c` v0 @kind this, `o.f` v1 @kind object) @signature `Lo/f$c;.<init>:(Lo/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f7abc.  v0.`o.f$c.o` @type ^`o.f` := v1 @kind object;
  #L3f7ac0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f7ac6.  return @kind void;
}
procedure `boolean` `add`(`o.f$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/f$c;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f7898.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3f789c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f78a2.  throw v1;
}
procedure `boolean` `addAll`(`o.f$c` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lo/f$c;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f78b4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3f78b8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f78be.  throw v1;
}
procedure `void` `clear`(`o.f$c` v1 @kind this) @signature `Lo/f$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7ad8.  v0:= v1.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f7adc.  call `a`(v0) @signature `Lo/f;.a:()V` @kind virtual;
  #L3f7ae2.  return @kind void;
}
procedure `boolean` `contains`(`o.f$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lo/f$c;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f78d0.  v0:= v1.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f78d4.  call temp:= `e`(v0, v2) @signature `Lo/f;.e:(Ljava/lang/Object;)I` @kind virtual;
  #L3f78da.  v2:= temp;
  #L3f78dc.  if v2 < 0 then goto L3f78e4;
  #L3f78e0.  v2:= 1I;
  #L3f78e2.  goto L3f78e6;
  #L3f78e4.  v2:= 0I;
  #L3f78e6.  return v2;
}
procedure `boolean` `containsAll`(`o.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lo/f$c;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f78f8.  v0:= v1.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f78fc.  call temp:= `c`(v0) @signature `Lo/f;.c:()Ljava/util/Map;` @kind virtual;
  #L3f7902.  v0:= temp @kind object;
  #L3f7904.  call temp:= `j`(v0, v2) @signature `Lo/f;.j:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L3f790a.  v2:= temp;
  #L3f790c.  return v2;
}
procedure `boolean` `equals`(`o.f$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/f$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f7920.  call temp:= `k`(v0, v1) @signature `Lo/f;.k:(Ljava/util/Set;Ljava/lang/Object;)Z` @kind static;
  #L3f7926.  v1:= temp;
  #L3f7928.  return v1;
}
procedure `int` `hashCode`(`o.f$c` v4 @kind this) @signature `Lo/f$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f79e8.  v0:= v4.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f79ec.  call temp:= `d`(v0) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f79f2.  v0:= temp;
  #L3f79f4.  v0:= v0 + -1;
  #L3f79f8.  v1:= 0I;
  #L3f79fa.  v2:= 0I;
  #L3f79fc.  if v0 < 0 then goto L3f7a24;
  #L3f7a00.  v3:= v4.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f7a04.  call temp:= `b`(v3, v0, v1) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f7a0a.  v3:= temp @kind object;
  #L3f7a0c.  if v3 != 0 then goto L3f7a14;
  #L3f7a10.  v3:= 0I;
  #L3f7a12.  goto L3f7a1c;
  #L3f7a14.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f7a1a.  v3:= temp;
  #L3f7a1c.  v2:= v2 + v3 @kind int;
  #L3f7a1e.  v0:= v0 + -1;
  #L3f7a22.  goto L3f79fc;
  #L3f7a24.  return v2;
}
procedure `boolean` `isEmpty`(`o.f$c` v1 @kind this) @signature `Lo/f$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f793c.  v0:= v1.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f7940.  call temp:= `d`(v0) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f7946.  v0:= temp;
  #L3f7948.  if v0 != 0 then goto L3f7950;
  #L3f794c.  v0:= 1I;
  #L3f794e.  goto L3f7952;
  #L3f7950.  v0:= 0I;
  #L3f7952.  return v0;
}
procedure `java.util.Iterator` `iterator`(`o.f$c` v3 @kind this) @signature `Lo/f$c;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f7a98.  v0:= new `o.f$a`;
  #L3f7a9c.  v1:= v3.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f7aa0.  v2:= 0I;
  #L3f7aa2.  call `<init>`(v0, v1, v2) @signature `Lo/f$a;.<init>:(Lo/f;I)V` @kind direct;
  #L3f7aa8.  return v0 @kind object;
}
procedure `boolean` `remove`(`o.f$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lo/f$c;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7964.  v0:= v1.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f7968.  call temp:= `e`(v0, v2) @signature `Lo/f;.e:(Ljava/lang/Object;)I` @kind virtual;
  #L3f796e.  v2:= temp;
  #L3f7970.  if v2 < 0 then goto L3f7982;
  #L3f7974.  v0:= v1.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f7978.  call `h`(v0, v2) @signature `Lo/f;.h:(I)V` @kind virtual;
  #L3f797e.  v2:= 1I;
  #L3f7980.  return v2;
  #L3f7982.  v2:= 0I;
  #L3f7984.  return v2;
}
procedure `boolean` `removeAll`(`o.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lo/f$c;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7998.  v0:= v1.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f799c.  call temp:= `c`(v0) @signature `Lo/f;.c:()Ljava/util/Map;` @kind virtual;
  #L3f79a2.  v0:= temp @kind object;
  #L3f79a4.  call temp:= `o`(v0, v2) @signature `Lo/f;.o:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L3f79aa.  v2:= temp;
  #L3f79ac.  return v2;
}
procedure `boolean` `retainAll`(`o.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lo/f$c;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f79c0.  v0:= v1.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f79c4.  call temp:= `c`(v0) @signature `Lo/f;.c:()Ljava/util/Map;` @kind virtual;
  #L3f79ca.  v0:= temp @kind object;
  #L3f79cc.  call temp:= `p`(v0, v2) @signature `Lo/f;.p:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L3f79d2.  v2:= temp;
  #L3f79d4.  return v2;
}
procedure `int` `size`(`o.f$c` v1 @kind this) @signature `Lo/f$c;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7a38.  v0:= v1.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f7a3c.  call temp:= `d`(v0) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f7a42.  v0:= temp;
  #L3f7a44.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`o.f$c` v2 @kind this) @signature `Lo/f$c;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7a58.  v0:= v2.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f7a5c.  v1:= 0I;
  #L3f7a5e.  call temp:= `q`(v0, v1) @signature `Lo/f;.q:(I)[Ljava/lang/Object;` @kind virtual;
  #L3f7a64.  v0:= temp @kind object;
  #L3f7a66.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`o.f$c` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lo/f$c;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7a78.  v0:= v2.`o.f$c.o` @type ^`o.f` @kind object;
  #L3f7a7c.  v1:= 0I;
  #L3f7a7e.  call temp:= `r`(v0, v3, v1) @signature `Lo/f;.r:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind virtual;
  #L3f7a84.  v3:= temp @kind object;
  #L3f7a86.  return v3 @kind object;
}
