record `o.c` @kind class @AccessFlag  {
}
global `int`[] `@@o.c.a` @AccessFlag STATIC_FINAL;
global `long`[] `@@o.c.b` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@o.c.c` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lo/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f6a84.  v0:= 0I;
  #L3f6a86.  v1:= new `int`[v0];
  #L3f6a8a.  `@@o.c.a` @type ^`int`[] := v1 @kind object;
  #L3f6a8e.  v1:= new `long`[v0];
  #L3f6a92.  `@@o.c.b` @type ^`long`[] := v1 @kind object;
  #L3f6a96.  v0:= new `java.lang.Object`[v0];
  #L3f6a9a.  `@@o.c.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L3f6a9e.  return @kind void;
}
procedure `int` `a`(`int`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lo/c;.a:([III)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f6980.  v4:= v4 + -1;
  #L3f6984.  v0:= 0I;
  #L3f6986.  if v0 > v4 then goto L3f69b0;
  #L3f698a.  v1:= v0 + v4 @kind int;
  #L3f698e.  v1:= v1 ^>> 1;
  #L3f6992.  v2:= v3[v1];
  #L3f6996.  if v2 >= v5 then goto L3f69a2;
  #L3f699a.  v1:= v1 + 1;
  #L3f699e.  v0:= v1;
  #L3f69a0.  goto L3f6986;
  #L3f69a2.  if v2 <= v5 then goto L3f69ae;
  #L3f69a6.  v1:= v1 + -1;
  #L3f69aa.  v4:= v1;
  #L3f69ac.  goto L3f6986;
  #L3f69ae.  return v1;
  #L3f69b0.  v3:= ~v0 @kind int;
  #L3f69b2.  return v3;
}
procedure `int` `b`(`long`[] v5 @kind object, `int` v6 , `long` v7 ) @signature `Lo/c;.b:([JIJ)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f69c4.  v6:= v6 + -1;
  #L3f69c8.  v0:= 0I;
  #L3f69ca.  if v0 > v6 then goto L3f69f8;
  #L3f69ce.  v1:= v0 + v6 @kind int;
  #L3f69d2.  v1:= v1 ^>> 1;
  #L3f69d6.  v2:= v5[v1] @kind wide;
  #L3f69da.  v4:= lcmp(v2, v7);
  #L3f69de.  if v4 >= 0 then goto L3f69ea;
  #L3f69e2.  v1:= v1 + 1;
  #L3f69e6.  v0:= v1;
  #L3f69e8.  goto L3f69ca;
  #L3f69ea.  if v4 <= 0 then goto L3f69f6;
  #L3f69ee.  v1:= v1 + -1;
  #L3f69f2.  v6:= v1;
  #L3f69f4.  goto L3f69ca;
  #L3f69f6.  return v1;
  #L3f69f8.  v5:= ~v0 @kind int;
  #L3f69fa.  return v5;
}
procedure `boolean` `c`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lo/c;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f6950.  if v0 == v1 then goto L3f696a;
  #L3f6954.  if v0 == 0 then goto L3f6966;
  #L3f6958.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f695e.  v0:= temp;
  #L3f6960.  if v0 == 0 then goto L3f6966;
  #L3f6964.  goto L3f696a;
  #L3f6966.  v0:= 0I;
  #L3f6968.  goto L3f696c;
  #L3f696a.  v0:= 1I;
  #L3f696c.  return v0;
}
procedure `int` `d`(`int` v2 ) @signature `Lo/c;.d:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f6a0c.  v0:= 4I;
  #L3f6a0e.  v1:= 32I;
  #L3f6a12.  if v0 >= v1 then goto L3f6a2a;
  #L3f6a16.  v1:= 1I;
  #L3f6a18.  v1:= v1 ^< v0 @kind int;
  #L3f6a1a.  v1:= v1 + -12;
  #L3f6a1e.  if v2 > v1 then goto L3f6a24;
  #L3f6a22.  return v1;
  #L3f6a24.  v0:= v0 + 1;
  #L3f6a28.  goto L3f6a0e;
  #L3f6a2a.  return v2;
}
procedure `int` `e`(`int` v0 ) @signature `Lo/c;.e:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f6a3c.  v0:= v0 * 4;
  #L3f6a40.  call temp:= `d`(v0) @signature `Lo/c;.d:(I)I` @kind static;
  #L3f6a46.  v0:= temp;
  #L3f6a48.  v0:= v0 / 4;
  #L3f6a4c.  return v0;
}
procedure `int` `f`(`int` v0 ) @signature `Lo/c;.f:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f6a60.  v0:= v0 * 8;
  #L3f6a64.  call temp:= `d`(v0) @signature `Lo/c;.d:(I)I` @kind static;
  #L3f6a6a.  v0:= temp;
  #L3f6a6c.  v0:= v0 / 8;
  #L3f6a70.  return v0;
}
