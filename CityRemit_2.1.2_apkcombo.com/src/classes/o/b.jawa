record `o.b` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `java.util.Set` @kind interface {
  `int`[] `o.b.o` @AccessFlag PRIVATE;
  `java.lang.Object`[] `o.b.p` @AccessFlag ;
  `int` `o.b.q` @AccessFlag ;
  `o.f` `o.b.r` @AccessFlag PRIVATE;
}
global `int`[] `@@o.b.s` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object`[] `@@o.b.t` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object`[] `@@o.b.u` @AccessFlag PRIVATE_STATIC;
global `int` `@@o.b.v` @AccessFlag PRIVATE_STATIC;
global `java.lang.Object`[] `@@o.b.w` @AccessFlag PRIVATE_STATIC;
global `int` `@@o.b.x` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lo/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f6690.  v0:= 0I;
  #L3f6692.  v1:= new `int`[v0];
  #L3f6696.  `@@o.b.s` @type ^`int`[] := v1 @kind object;
  #L3f669a.  v0:= new `java.lang.Object`[v0];
  #L3f669e.  `@@o.b.t` @type ^`java.lang.Object`[] := v0 @kind object;
  #L3f66a2.  return @kind void;
}
procedure `void` `<init>`(`o.b` v1 @kind this) @signature `Lo/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f66b4.  v0:= 0I;
  #L3f66b6.  call `<init>`(v1, v0) @signature `Lo/b;.<init>:(I)V` @kind direct;
  #L3f66bc.  return @kind void;
}
procedure `void` `<init>`(`o.b` v0 @kind this, `int` v1 ) @signature `Lo/b;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f66d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f66d6.  if v1 != 0 then goto L3f66ec;
  #L3f66da.  v1:= `@@o.b.s` @type ^`int`[] @kind object;
  #L3f66de.  v0.`o.b.o` @type ^`int`[] := v1 @kind object;
  #L3f66e2.  v1:= `@@o.b.t` @type ^`java.lang.Object`[] @kind object;
  #L3f66e6.  v0.`o.b.p` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3f66ea.  goto L3f66f2;
  #L3f66ec.  call `b`(v0, v1) @signature `Lo/b;.b:(I)V` @kind direct;
  #L3f66f2.  v1:= 0I;
  #L3f66f4.  v0.`o.b.q` @type ^`int` := v1;
  #L3f66f8.  return @kind void;
}
procedure `void` `b`(`o.b` v5 @kind this, `int` v6 ) @signature `Lo/b;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f670c.  v0:= 0I;
  #L3f670e.  v1:= 0I;
  #L3f6710.  v2:= 1I;
  #L3f6712.  v3:= 8I;
  #L3f6716.  if v6 != v3 then goto L3f6764;
  #L3f671a.  v3:= constclass @type ^`o.b` @kind object;
  #L3f671e.  @monitorenter v3
  #L3f6720.  v4:= `@@o.b.w` @type ^`java.lang.Object`[] @kind object;
  #L3f6724.  if v4 == 0 then goto L3f675a;
  #L3f6728.  v5.`o.b.p` @type ^`java.lang.Object`[] := v4 @kind object;
  #L3f672c.  v6:= v4[v1] @kind object;
  #L3f6730.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L3f6734.  `@@o.b.w` @type ^`java.lang.Object`[] := v6 @kind object;
  #L3f6738.  v6:= v4[v2] @kind object;
  #L3f673c.  v6:= (`int`[]) v6 @kind object;
  #L3f6740.  v5.`o.b.o` @type ^`int`[] := v6 @kind object;
  #L3f6744.  v4[v2]:= v0 @kind object;
  #L3f6748.  v4[v1]:= v0 @kind object;
  #L3f674c.  v6:= `@@o.b.x` @type ^`int`;
  #L3f6750.  v6:= v6 - v2 @kind int;
  #L3f6752.  `@@o.b.x` @type ^`int` := v6;
  #L3f6756.  @monitorexit v3
  #L3f6758.  return @kind void;
  #L3f675a.  @monitorexit v3
  #L3f675c.  goto L3f67b4;
  #L3f675e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f6760.  @monitorexit v3
  #L3f6762.  throw v6;
  #L3f6764.  v3:= 4I;
  #L3f6766.  if v6 != v3 then goto L3f67b4;
  #L3f676a.  v3:= constclass @type ^`o.b` @kind object;
  #L3f676e.  @monitorenter v3
  #L3f6770.  v4:= `@@o.b.u` @type ^`java.lang.Object`[] @kind object;
  #L3f6774.  if v4 == 0 then goto L3f67aa;
  #L3f6778.  v5.`o.b.p` @type ^`java.lang.Object`[] := v4 @kind object;
  #L3f677c.  v6:= v4[v1] @kind object;
  #L3f6780.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L3f6784.  `@@o.b.u` @type ^`java.lang.Object`[] := v6 @kind object;
  #L3f6788.  v6:= v4[v2] @kind object;
  #L3f678c.  v6:= (`int`[]) v6 @kind object;
  #L3f6790.  v5.`o.b.o` @type ^`int`[] := v6 @kind object;
  #L3f6794.  v4[v2]:= v0 @kind object;
  #L3f6798.  v4[v1]:= v0 @kind object;
  #L3f679c.  v6:= `@@o.b.v` @type ^`int`;
  #L3f67a0.  v6:= v6 - v2 @kind int;
  #L3f67a2.  `@@o.b.v` @type ^`int` := v6;
  #L3f67a6.  @monitorexit v3
  #L3f67a8.  return @kind void;
  #L3f67aa.  @monitorexit v3
  #L3f67ac.  goto L3f67b4;
  #L3f67ae.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f67b0.  @monitorexit v3
  #L3f67b2.  throw v6;
  #L3f67b4.  v0:= new `int`[v6];
  #L3f67b8.  v5.`o.b.o` @type ^`int`[] := v0 @kind object;
  #L3f67bc.  v6:= new `java.lang.Object`[v6];
  #L3f67c0.  v5.`o.b.p` @type ^`java.lang.Object`[] := v6 @kind object;
  #L3f67c4.  return @kind void;
  catch `java.lang.Throwable` @[L3f6720..L3f6762] goto L3f675e;
  catch `java.lang.Throwable` @[L3f6770..L3f67b2] goto L3f67ae;
}
procedure `void` `h`(`int`[] v7 @kind object, `java.lang.Object`[] v8 @kind object, `int` v9 ) @signature `Lo/b;.h:([I[Ljava/lang/Object;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f6884.  v0:= length @variable v7;
  #L3f6886.  v1:= 0I;
  #L3f6888.  v2:= 2I;
  #L3f688a.  v3:= 0I;
  #L3f688c.  v4:= 10I;
  #L3f6890.  v5:= 1I;
  #L3f6892.  v6:= 8I;
  #L3f6896.  if v0 != v6 then goto L3f68dc;
  #L3f689a.  v0:= constclass @type ^`o.b` @kind object;
  #L3f689e.  @monitorenter v0
  #L3f68a0.  v6:= `@@o.b.x` @type ^`int`;
  #L3f68a4.  if v6 >= v4 then goto L3f68d2;
  #L3f68a8.  v4:= `@@o.b.w` @type ^`java.lang.Object`[] @kind object;
  #L3f68ac.  v8[v3]:= v4 @kind object;
  #L3f68b0.  v8[v5]:= v7 @kind object;
  #L3f68b4.  v9:= v9 - v5 @kind int;
  #L3f68b6.  if v9 < v2 then goto L3f68c4;
  #L3f68ba.  v8[v9]:= v1 @kind object;
  #L3f68be.  v9:= v9 + -1;
  #L3f68c2.  goto L3f68b6;
  #L3f68c4.  `@@o.b.w` @type ^`java.lang.Object`[] := v8 @kind object;
  #L3f68c8.  v7:= `@@o.b.x` @type ^`int`;
  #L3f68cc.  v7:= v7 + v5 @kind int;
  #L3f68ce.  `@@o.b.x` @type ^`int` := v7;
  #L3f68d2.  @monitorexit v0
  #L3f68d4.  goto L3f6926;
  #L3f68d6.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f68d8.  @monitorexit v0
  #L3f68da.  throw v7;
  #L3f68dc.  v0:= length @variable v7;
  #L3f68de.  v6:= 4I;
  #L3f68e0.  if v0 != v6 then goto L3f6926;
  #L3f68e4.  v0:= constclass @type ^`o.b` @kind object;
  #L3f68e8.  @monitorenter v0
  #L3f68ea.  v6:= `@@o.b.v` @type ^`int`;
  #L3f68ee.  if v6 >= v4 then goto L3f691c;
  #L3f68f2.  v4:= `@@o.b.u` @type ^`java.lang.Object`[] @kind object;
  #L3f68f6.  v8[v3]:= v4 @kind object;
  #L3f68fa.  v8[v5]:= v7 @kind object;
  #L3f68fe.  v9:= v9 - v5 @kind int;
  #L3f6900.  if v9 < v2 then goto L3f690e;
  #L3f6904.  v8[v9]:= v1 @kind object;
  #L3f6908.  v9:= v9 + -1;
  #L3f690c.  goto L3f6900;
  #L3f690e.  `@@o.b.u` @type ^`java.lang.Object`[] := v8 @kind object;
  #L3f6912.  v7:= `@@o.b.v` @type ^`int`;
  #L3f6916.  v7:= v7 + v5 @kind int;
  #L3f6918.  `@@o.b.v` @type ^`int` := v7;
  #L3f691c.  @monitorexit v0
  #L3f691e.  goto L3f6926;
  #L3f6920.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f6922.  @monitorexit v0
  #L3f6924.  throw v7;
  #L3f6926.  return @kind void;
  catch `java.lang.Throwable` @[L3f68a0..L3f68da] goto L3f68d6;
  catch `java.lang.Throwable` @[L3f68ea..L3f6924] goto L3f6920;
}
procedure `o.f` `l`(`o.b` v1 @kind this) @signature `Lo/b;.l:()Lo/f;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f6664.  v0:= v1.`o.b.r` @type ^`o.f` @kind object;
  #L3f6668.  if v0 != 0 then goto L3f667a;
  #L3f666c.  v0:= new `o.b$a`;
  #L3f6670.  call `<init>`(v0, v1) @signature `Lo/b$a;.<init>:(Lo/b;)V` @kind direct;
  #L3f6676.  v1.`o.b.r` @type ^`o.f` := v0 @kind object;
  #L3f667a.  v0:= v1.`o.b.r` @type ^`o.f` @kind object;
  #L3f667e.  return v0 @kind object;
}
procedure `int` `n`(`o.b` v4 @kind this, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lo/b;.n:(Ljava/lang/Object;I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f62c4.  v0:= v4.`o.b.q` @type ^`int`;
  #L3f62c8.  if v0 != 0 then goto L3f62d0;
  #L3f62cc.  v5:= -1I;
  #L3f62ce.  return v5;
  #L3f62d0.  v1:= v4.`o.b.o` @type ^`int`[] @kind object;
  #L3f62d4.  call temp:= `a`(v1, v0, v6) @signature `Lo/c;.a:([III)I` @kind static;
  #L3f62da.  v1:= temp;
  #L3f62dc.  if v1 >= 0 then goto L3f62e2;
  #L3f62e0.  return v1;
  #L3f62e2.  v2:= v4.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f62e6.  v2:= v2[v1] @kind object;
  #L3f62ea.  call temp:= `equals`(v5, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f62f0.  v2:= temp;
  #L3f62f2.  if v2 == 0 then goto L3f62f8;
  #L3f62f6.  return v1;
  #L3f62f8.  v2:= v1 + 1;
  #L3f62fc.  if v2 >= v0 then goto L3f6328;
  #L3f6300.  v3:= v4.`o.b.o` @type ^`int`[] @kind object;
  #L3f6304.  v3:= v3[v2];
  #L3f6308.  if v3 != v6 then goto L3f6328;
  #L3f630c.  v3:= v4.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f6310.  v3:= v3[v2] @kind object;
  #L3f6314.  call temp:= `equals`(v5, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f631a.  v3:= temp;
  #L3f631c.  if v3 == 0 then goto L3f6322;
  #L3f6320.  return v2;
  #L3f6322.  v2:= v2 + 1;
  #L3f6326.  goto L3f62fc;
  #L3f6328.  v1:= v1 + -1;
  #L3f632c.  if v1 < 0 then goto L3f6358;
  #L3f6330.  v0:= v4.`o.b.o` @type ^`int`[] @kind object;
  #L3f6334.  v0:= v0[v1];
  #L3f6338.  if v0 != v6 then goto L3f6358;
  #L3f633c.  v0:= v4.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f6340.  v0:= v0[v1] @kind object;
  #L3f6344.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f634a.  v0:= temp;
  #L3f634c.  if v0 == 0 then goto L3f6352;
  #L3f6350.  return v1;
  #L3f6352.  v1:= v1 + -1;
  #L3f6356.  goto L3f632c;
  #L3f6358.  v5:= ~v2 @kind int;
  #L3f635a.  return v5;
}
procedure `int` `p`(`o.b` v4 @kind this) @signature `Lo/b;.p:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f636c.  v0:= v4.`o.b.q` @type ^`int`;
  #L3f6370.  if v0 != 0 then goto L3f6378;
  #L3f6374.  v0:= -1I;
  #L3f6376.  return v0;
  #L3f6378.  v1:= v4.`o.b.o` @type ^`int`[] @kind object;
  #L3f637c.  v2:= 0I;
  #L3f637e.  call temp:= `a`(v1, v0, v2) @signature `Lo/c;.a:([III)I` @kind static;
  #L3f6384.  v1:= temp;
  #L3f6386.  if v1 >= 0 then goto L3f638c;
  #L3f638a.  return v1;
  #L3f638c.  v2:= v4.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f6390.  v2:= v2[v1] @kind object;
  #L3f6394.  if v2 != 0 then goto L3f639a;
  #L3f6398.  return v1;
  #L3f639a.  v2:= v1 + 1;
  #L3f639e.  if v2 >= v0 then goto L3f63c2;
  #L3f63a2.  v3:= v4.`o.b.o` @type ^`int`[] @kind object;
  #L3f63a6.  v3:= v3[v2];
  #L3f63aa.  if v3 != 0 then goto L3f63c2;
  #L3f63ae.  v3:= v4.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f63b2.  v3:= v3[v2] @kind object;
  #L3f63b6.  if v3 != 0 then goto L3f63bc;
  #L3f63ba.  return v2;
  #L3f63bc.  v2:= v2 + 1;
  #L3f63c0.  goto L3f639e;
  #L3f63c2.  v1:= v1 + -1;
  #L3f63c6.  if v1 < 0 then goto L3f63ea;
  #L3f63ca.  v0:= v4.`o.b.o` @type ^`int`[] @kind object;
  #L3f63ce.  v0:= v0[v1];
  #L3f63d2.  if v0 != 0 then goto L3f63ea;
  #L3f63d6.  v0:= v4.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f63da.  v0:= v0[v1] @kind object;
  #L3f63de.  if v0 != 0 then goto L3f63e4;
  #L3f63e2.  return v1;
  #L3f63e4.  v1:= v1 + -1;
  #L3f63e8.  goto L3f63c6;
  #L3f63ea.  v0:= ~v2 @kind int;
  #L3f63ec.  return v0;
}
procedure `boolean` `add`(`o.b` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lo/b;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f5f8c.  v0:= 0I;
  #L3f5f8e.  if v9 != 0 then goto L3f5f9e;
  #L3f5f92.  call temp:= `p`(v8) @signature `Lo/b;.p:()I` @kind direct;
  #L3f5f98.  v1:= temp;
  #L3f5f9a.  v2:= 0I;
  #L3f5f9c.  goto L3f5fb4;
  #L3f5f9e.  call temp:= `hashCode`(v9) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f5fa4.  v1:= temp;
  #L3f5fa6.  call temp:= `n`(v8, v9, v1) @signature `Lo/b;.n:(Ljava/lang/Object;I)I` @kind direct;
  #L3f5fac.  v2:= temp;
  #L3f5fae.  v7:= v2;
  #L3f5fb0.  v2:= v1;
  #L3f5fb2.  v1:= v7;
  #L3f5fb4.  if v1 < 0 then goto L3f5fba;
  #L3f5fb8.  return v0;
  #L3f5fba.  v1:= ~v1 @kind int;
  #L3f5fbc.  v3:= v8.`o.b.q` @type ^`int`;
  #L3f5fc0.  v4:= v8.`o.b.o` @type ^`int`[] @kind object;
  #L3f5fc4.  v5:= length @variable v4;
  #L3f5fc6.  if v3 < v5 then goto L3f6016;
  #L3f5fca.  v5:= 4I;
  #L3f5fcc.  v6:= 8I;
  #L3f5fd0.  if v3 < v6 then goto L3f5fdc;
  #L3f5fd4.  v5:= v3 ^> 1;
  #L3f5fd8.  v5:= v5 + v3 @kind int;
  #L3f5fda.  goto L3f5fe4;
  #L3f5fdc.  if v3 < v5 then goto L3f5fe4;
  #L3f5fe0.  v5:= 8I;
  #L3f5fe4.  v3:= v8.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f5fe8.  call `b`(v8, v5) @signature `Lo/b;.b:(I)V` @kind direct;
  #L3f5fee.  v5:= v8.`o.b.o` @type ^`int`[] @kind object;
  #L3f5ff2.  v6:= length @variable v5;
  #L3f5ff4.  if v6 <= 0 then goto L3f600c;
  #L3f5ff8.  v6:= length @variable v4;
  #L3f5ffa.  call `arraycopy`(v4, v0, v5, v0, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6000.  v5:= v8.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f6004.  v6:= length @variable v3;
  #L3f6006.  call `arraycopy`(v3, v0, v5, v0, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f600c.  v0:= v8.`o.b.q` @type ^`int`;
  #L3f6010.  call `h`(v4, v3, v0) @signature `Lo/b;.h:([I[Ljava/lang/Object;I)V` @kind static;
  #L3f6016.  v0:= v8.`o.b.q` @type ^`int`;
  #L3f601a.  if v1 >= v0 then goto L3f603e;
  #L3f601e.  v3:= v8.`o.b.o` @type ^`int`[] @kind object;
  #L3f6022.  v4:= v1 + 1;
  #L3f6026.  v0:= v0 - v1 @kind int;
  #L3f6028.  call `arraycopy`(v3, v1, v3, v4, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f602e.  v0:= v8.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f6032.  v3:= v8.`o.b.q` @type ^`int`;
  #L3f6036.  v3:= v3 - v1 @kind int;
  #L3f6038.  call `arraycopy`(v0, v1, v0, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f603e.  v0:= v8.`o.b.o` @type ^`int`[] @kind object;
  #L3f6042.  v0[v1]:= v2;
  #L3f6046.  v0:= v8.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f604a.  v0[v1]:= v9 @kind object;
  #L3f604e.  v9:= v8.`o.b.q` @type ^`int`;
  #L3f6052.  v0:= 1I;
  #L3f6054.  v9:= v9 + v0 @kind int;
  #L3f6056.  v8.`o.b.q` @type ^`int` := v9;
  #L3f605a.  return v0;
}
procedure `boolean` `addAll`(`o.b` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lo/b;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f606c.  v0:= v2.`o.b.q` @type ^`int`;
  #L3f6070.  call temp:= `size`(v3) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3f6076.  v1:= temp;
  #L3f6078.  v0:= v0 + v1 @kind int;
  #L3f607a.  call `f`(v2, v0) @signature `Lo/b;.f:(I)V` @kind virtual;
  #L3f6080.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f6086.  v3:= temp @kind object;
  #L3f6088.  v0:= 0I;
  #L3f608a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f6090.  v1:= temp;
  #L3f6092.  if v1 == 0 then goto L3f60aa;
  #L3f6096.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f609c.  v1:= temp @kind object;
  #L3f609e.  call temp:= `add`(v2, v1) @signature `Lo/b;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f60a4.  v1:= temp;
  #L3f60a6.  v0:= v0 ^| v1 @kind int;
  #L3f60a8.  goto L3f608a;
  #L3f60aa.  return v0;
}
procedure `void` `clear`(`o.b` v3 @kind this) @signature `Lo/b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f67f0.  v0:= v3.`o.b.q` @type ^`int`;
  #L3f67f4.  if v0 == 0 then goto L3f681c;
  #L3f67f8.  v1:= v3.`o.b.o` @type ^`int`[] @kind object;
  #L3f67fc.  v2:= v3.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f6800.  call `h`(v1, v2, v0) @signature `Lo/b;.h:([I[Ljava/lang/Object;I)V` @kind static;
  #L3f6806.  v0:= `@@o.b.s` @type ^`int`[] @kind object;
  #L3f680a.  v3.`o.b.o` @type ^`int`[] := v0 @kind object;
  #L3f680e.  v0:= `@@o.b.t` @type ^`java.lang.Object`[] @kind object;
  #L3f6812.  v3.`o.b.p` @type ^`java.lang.Object`[] := v0 @kind object;
  #L3f6816.  v0:= 0I;
  #L3f6818.  v3.`o.b.q` @type ^`int` := v0;
  #L3f681c.  return @kind void;
}
procedure `boolean` `contains`(`o.b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/b;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f60bc.  call temp:= `indexOf`(v0, v1) @signature `Lo/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L3f60c2.  v1:= temp;
  #L3f60c4.  if v1 < 0 then goto L3f60cc;
  #L3f60c8.  v1:= 1I;
  #L3f60ca.  goto L3f60ce;
  #L3f60cc.  v1:= 0I;
  #L3f60ce.  return v1;
}
procedure `boolean` `containsAll`(`o.b` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lo/b;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f60e0.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f60e6.  v2:= temp @kind object;
  #L3f60e8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f60ee.  v0:= temp;
  #L3f60f0.  if v0 == 0 then goto L3f610c;
  #L3f60f4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f60fa.  v0:= temp @kind object;
  #L3f60fc.  call temp:= `contains`(v1, v0) @signature `Lo/b;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f6102.  v0:= temp;
  #L3f6104.  if v0 != 0 then goto L3f60e8;
  #L3f6108.  v2:= 0I;
  #L3f610a.  return v2;
  #L3f610c.  v2:= 1I;
  #L3f610e.  return v2;
}
procedure `boolean` `equals`(`o.b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lo/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f6120.  v0:= 1I;
  #L3f6122.  if v4 != v5 then goto L3f6128;
  #L3f6126.  return v0;
  #L3f6128.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L3f612c.  v2:= 0I;
  #L3f612e.  if v1 == 0 then goto L3f6174;
  #L3f6132.  v5:= (`java.util.Set`) v5 @kind object;
  #L3f6136.  call temp:= `size`(v4) @signature `Lo/b;.size:()I` @kind virtual;
  #L3f613c.  v1:= temp;
  #L3f613e.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L3f6144.  v3:= temp;
  #L3f6146.  if v1 == v3 then goto L3f614c;
  #L3f614a.  return v2;
  #L3f614c.  v1:= 0I;
  #L3f614e.  v3:= v4.`o.b.q` @type ^`int`;
  #L3f6152.  if v1 >= v3 then goto L3f6172;
  #L3f6156.  call temp:= `y`(v4, v1) @signature `Lo/b;.y:(I)Ljava/lang/Object;` @kind virtual;
  #L3f615c.  v3:= temp @kind object;
  #L3f615e.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3f6164.  v3:= temp;
  #L3f6166.  if v3 != 0 then goto L3f616c;
  #L3f616a.  return v2;
  #L3f616c.  v1:= v1 + 1;
  #L3f6170.  goto L3f614e;
  #L3f6172.  return v0;
  #L3f6174.  return v2;
  catch `java.lang.NullPointerException` @[L3f614e..L3f6166] goto L3f6174;
  catch `java.lang.ClassCastException` @[L3f614e..L3f6166] goto L3f6174;
}
procedure `void` `f`(`o.b` v4 @kind this, `int` v5 ) @signature `Lo/b;.f:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f6830.  v0:= v4.`o.b.o` @type ^`int`[] @kind object;
  #L3f6834.  v1:= length @variable v0;
  #L3f6836.  if v1 >= v5 then goto L3f6870;
  #L3f683a.  v1:= v4.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f683e.  call `b`(v4, v5) @signature `Lo/b;.b:(I)V` @kind direct;
  #L3f6844.  v5:= v4.`o.b.q` @type ^`int`;
  #L3f6848.  if v5 <= 0 then goto L3f6866;
  #L3f684c.  v2:= v4.`o.b.o` @type ^`int`[] @kind object;
  #L3f6850.  v3:= 0I;
  #L3f6852.  call `arraycopy`(v0, v3, v2, v3, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6858.  v5:= v4.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f685c.  v2:= v4.`o.b.q` @type ^`int`;
  #L3f6860.  call `arraycopy`(v1, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6866.  v5:= v4.`o.b.q` @type ^`int`;
  #L3f686a.  call `h`(v0, v1, v5) @signature `Lo/b;.h:([I[Ljava/lang/Object;I)V` @kind static;
  #L3f6870.  return @kind void;
}
procedure `int` `hashCode`(`o.b` v5 @kind this) @signature `Lo/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f6264.  v0:= v5.`o.b.o` @type ^`int`[] @kind object;
  #L3f6268.  v1:= v5.`o.b.q` @type ^`int`;
  #L3f626c.  v2:= 0I;
  #L3f626e.  v3:= 0I;
  #L3f6270.  if v2 >= v1 then goto L3f6280;
  #L3f6274.  v4:= v0[v2];
  #L3f6278.  v3:= v3 + v4 @kind int;
  #L3f627a.  v2:= v2 + 1;
  #L3f627e.  goto L3f6270;
  #L3f6280.  return v3;
}
procedure `int` `indexOf`(`o.b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lo/b;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6294.  if v2 != 0 then goto L3f62a2;
  #L3f6298.  call temp:= `p`(v1) @signature `Lo/b;.p:()I` @kind direct;
  #L3f629e.  v2:= temp;
  #L3f62a0.  goto L3f62b2;
  #L3f62a2.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f62a8.  v0:= temp;
  #L3f62aa.  call temp:= `n`(v1, v2, v0) @signature `Lo/b;.n:(Ljava/lang/Object;I)I` @kind direct;
  #L3f62b0.  v2:= temp;
  #L3f62b2.  return v2;
}
procedure `boolean` `isEmpty`(`o.b` v1 @kind this) @signature `Lo/b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6198.  v0:= v1.`o.b.q` @type ^`int`;
  #L3f619c.  if v0 > 0 then goto L3f61a4;
  #L3f61a0.  v0:= 1I;
  #L3f61a2.  goto L3f61a6;
  #L3f61a4.  v0:= 0I;
  #L3f61a6.  return v0;
}
procedure `java.util.Iterator` `iterator`(`o.b` v1 @kind this) @signature `Lo/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6638.  call temp:= `l`(v1) @signature `Lo/b;.l:()Lo/f;` @kind direct;
  #L3f663e.  v0:= temp @kind object;
  #L3f6640.  call temp:= `m`(v0) @signature `Lo/f;.m:()Ljava/util/Set;` @kind virtual;
  #L3f6646.  v0:= temp @kind object;
  #L3f6648.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f664e.  v0:= temp @kind object;
  #L3f6650.  return v0 @kind object;
}
procedure `boolean` `remove`(`o.b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lo/b;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f61b8.  call temp:= `indexOf`(v0, v1) @signature `Lo/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L3f61be.  v1:= temp;
  #L3f61c0.  if v1 < 0 then goto L3f61ce;
  #L3f61c4.  call temp:= `u`(v0, v1) @signature `Lo/b;.u:(I)Ljava/lang/Object;` @kind virtual;
  #L3f61ca.  v1:= 1I;
  #L3f61cc.  return v1;
  #L3f61ce.  v1:= 0I;
  #L3f61d0.  return v1;
}
procedure `boolean` `removeAll`(`o.b` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lo/b;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f61e4.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f61ea.  v3:= temp @kind object;
  #L3f61ec.  v0:= 0I;
  #L3f61ee.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f61f4.  v1:= temp;
  #L3f61f6.  if v1 == 0 then goto L3f620e;
  #L3f61fa.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f6200.  v1:= temp @kind object;
  #L3f6202.  call temp:= `remove`(v2, v1) @signature `Lo/b;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f6208.  v1:= temp;
  #L3f620a.  v0:= v0 ^| v1 @kind int;
  #L3f620c.  goto L3f61ee;
  #L3f620e.  return v0;
}
procedure `boolean` `retainAll`(`o.b` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lo/b;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f6220.  v0:= v4.`o.b.q` @type ^`int`;
  #L3f6224.  v1:= 1I;
  #L3f6226.  v0:= v0 - v1 @kind int;
  #L3f6228.  v2:= 0I;
  #L3f622a.  if v0 < 0 then goto L3f6250;
  #L3f622e.  v3:= v4.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f6232.  v3:= v3[v0] @kind object;
  #L3f6236.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3f623c.  v3:= temp;
  #L3f623e.  if v3 != 0 then goto L3f624a;
  #L3f6242.  call temp:= `u`(v4, v0) @signature `Lo/b;.u:(I)Ljava/lang/Object;` @kind virtual;
  #L3f6248.  v2:= 1I;
  #L3f624a.  v0:= v0 + -1;
  #L3f624e.  goto L3f622a;
  #L3f6250.  return v2;
}
procedure `int` `size`(`o.b` v1 @kind this) @signature `Lo/b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6400.  v0:= v1.`o.b.q` @type ^`int`;
  #L3f6404.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`o.b` v4 @kind this) @signature `Lo/b;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f6524.  v0:= v4.`o.b.q` @type ^`int`;
  #L3f6528.  v1:= new `java.lang.Object`[v0];
  #L3f652c.  v2:= v4.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f6530.  v3:= 0I;
  #L3f6532.  call `arraycopy`(v2, v3, v1, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6538.  return v1 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`o.b` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lo/b;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f654c.  v0:= length @variable v4;
  #L3f654e.  v1:= v3.`o.b.q` @type ^`int`;
  #L3f6552.  if v0 >= v1 then goto L3f6576;
  #L3f6556.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f655c.  v4:= temp @kind object;
  #L3f655e.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L3f6564.  v4:= temp @kind object;
  #L3f6566.  v0:= v3.`o.b.q` @type ^`int`;
  #L3f656a.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L3f6570.  v4:= temp @kind object;
  #L3f6572.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L3f6576.  v0:= v3.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f657a.  v1:= v3.`o.b.q` @type ^`int`;
  #L3f657e.  v2:= 0I;
  #L3f6580.  call `arraycopy`(v0, v2, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6586.  v0:= length @variable v4;
  #L3f6588.  v1:= v3.`o.b.q` @type ^`int`;
  #L3f658c.  if v0 <= v1 then goto L3f6596;
  #L3f6590.  v0:= 0I;
  #L3f6592.  v4[v1]:= v0 @kind object;
  #L3f6596.  return v4 @kind object;
}
procedure `java.lang.String` `toString`(`o.b` v3 @kind this) @signature `Lo/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f65a8.  call temp:= `isEmpty`(v3) @signature `Lo/b;.isEmpty:()Z` @kind virtual;
  #L3f65ae.  v0:= temp;
  #L3f65b0.  if v0 == 0 then goto L3f65ba;
  #L3f65b4.  v0:= "{}" @kind object;
  #L3f65b8.  return v0 @kind object;
  #L3f65ba.  v0:= new `java.lang.StringBuilder`;
  #L3f65be.  v1:= v3.`o.b.q` @type ^`int`;
  #L3f65c2.  v1:= v1 * 14;
  #L3f65c6.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3f65cc.  v1:= 123I;
  #L3f65d0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f65d6.  v1:= 0I;
  #L3f65d8.  v2:= v3.`o.b.q` @type ^`int`;
  #L3f65dc.  if v1 >= v2 then goto L3f6612;
  #L3f65e0.  if v1 <= 0 then goto L3f65ee;
  #L3f65e4.  v2:= ", " @kind object;
  #L3f65e8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f65ee.  call temp:= `y`(v3, v1) @signature `Lo/b;.y:(I)Ljava/lang/Object;` @kind virtual;
  #L3f65f4.  v2:= temp @kind object;
  #L3f65f6.  if v2 == v3 then goto L3f6602;
  #L3f65fa.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6600.  goto L3f660c;
  #L3f6602.  v2:= "(this Set)" @kind object;
  #L3f6606.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f660c.  v1:= v1 + 1;
  #L3f6610.  goto L3f65d8;
  #L3f6612.  v1:= 125I;
  #L3f6616.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f661c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f6622.  v0:= temp @kind object;
  #L3f6624.  return v0 @kind object;
}
procedure `java.lang.Object` `u`(`o.b` v8 @kind this, `int` v9 ) @signature `Lo/b;.u:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f6418.  v0:= v8.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f641c.  v1:= v0[v9] @kind object;
  #L3f6420.  v2:= v8.`o.b.q` @type ^`int`;
  #L3f6424.  v3:= 0I;
  #L3f6426.  v4:= 1I;
  #L3f6428.  if v2 > v4 then goto L3f644c;
  #L3f642c.  v9:= v8.`o.b.o` @type ^`int`[] @kind object;
  #L3f6430.  call `h`(v9, v0, v2) @signature `Lo/b;.h:([I[Ljava/lang/Object;I)V` @kind static;
  #L3f6436.  v9:= `@@o.b.s` @type ^`int`[] @kind object;
  #L3f643a.  v8.`o.b.o` @type ^`int`[] := v9 @kind object;
  #L3f643e.  v9:= `@@o.b.t` @type ^`java.lang.Object`[] @kind object;
  #L3f6442.  v8.`o.b.p` @type ^`java.lang.Object`[] := v9 @kind object;
  #L3f6446.  v8.`o.b.q` @type ^`int` := v3;
  #L3f644a.  goto L3f64f6;
  #L3f644c.  v5:= v8.`o.b.o` @type ^`int`[] @kind object;
  #L3f6450.  v6:= length @variable v5;
  #L3f6452.  v7:= 8I;
  #L3f6456.  if v6 <= v7 then goto L3f64c2;
  #L3f645a.  v6:= length @variable v5;
  #L3f645c.  v6:= v6 / 3;
  #L3f6460.  if v2 >= v6 then goto L3f64c2;
  #L3f6464.  if v2 <= v7 then goto L3f6470;
  #L3f6468.  v6:= v2 ^> 1;
  #L3f646c.  v7:= v2 + v6 @kind int;
  #L3f6470.  call `b`(v8, v7) @signature `Lo/b;.b:(I)V` @kind direct;
  #L3f6476.  v2:= v8.`o.b.q` @type ^`int`;
  #L3f647a.  v2:= v2 - v4 @kind int;
  #L3f647c.  v8.`o.b.q` @type ^`int` := v2;
  #L3f6480.  if v9 <= 0 then goto L3f6498;
  #L3f6484.  v2:= v8.`o.b.o` @type ^`int`[] @kind object;
  #L3f6488.  call `arraycopy`(v5, v3, v2, v3, v9) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f648e.  v2:= v8.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f6492.  call `arraycopy`(v0, v3, v2, v3, v9) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f6498.  v2:= v8.`o.b.q` @type ^`int`;
  #L3f649c.  if v9 >= v2 then goto L3f64f6;
  #L3f64a0.  v3:= v9 + 1;
  #L3f64a4.  v4:= v8.`o.b.o` @type ^`int`[] @kind object;
  #L3f64a8.  v2:= v2 - v9 @kind int;
  #L3f64aa.  call `arraycopy`(v5, v3, v4, v9, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f64b0.  v2:= v8.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f64b4.  v4:= v8.`o.b.q` @type ^`int`;
  #L3f64b8.  v4:= v4 - v9 @kind int;
  #L3f64ba.  call `arraycopy`(v0, v3, v2, v9, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f64c0.  goto L3f64f6;
  #L3f64c2.  v2:= v2 - v4 @kind int;
  #L3f64c4.  v8.`o.b.q` @type ^`int` := v2;
  #L3f64c8.  if v9 >= v2 then goto L3f64e8;
  #L3f64cc.  v0:= v9 + 1;
  #L3f64d0.  v2:= v2 - v9 @kind int;
  #L3f64d2.  call `arraycopy`(v5, v0, v5, v9, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f64d8.  v2:= v8.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f64dc.  v3:= v8.`o.b.q` @type ^`int`;
  #L3f64e0.  v3:= v3 - v9 @kind int;
  #L3f64e2.  call `arraycopy`(v2, v0, v2, v9, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f64e8.  v9:= v8.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f64ec.  v0:= v8.`o.b.q` @type ^`int`;
  #L3f64f0.  v2:= 0I;
  #L3f64f2.  v9[v0]:= v2 @kind object;
  #L3f64f6.  return v1 @kind object;
}
procedure `java.lang.Object` `y`(`o.b` v1 @kind this, `int` v2 ) @signature `Lo/b;.y:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6508.  v0:= v1.`o.b.p` @type ^`java.lang.Object`[] @kind object;
  #L3f650c.  v2:= v0[v2] @kind object;
  #L3f6510.  return v2 @kind object;
}
