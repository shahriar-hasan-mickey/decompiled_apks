record `o.f$d` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `java.util.Map$Entry` @kind interface {
  `int` `o.f$d.o` @AccessFlag ;
  `int` `o.f$d.p` @AccessFlag ;
  `boolean` `o.f$d.q` @AccessFlag ;
  `o.f` `o.f$d.r` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`o.f$d` v1 @kind this, `o.f` v2 @kind object) @signature `Lo/f$d;.<init>:(Lo/f;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f7d68.  v1.`o.f$d.r` @type ^`o.f` := v2 @kind object;
  #L3f7d6c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f7d72.  v0:= 0I;
  #L3f7d74.  v1.`o.f$d.q` @type ^`boolean` := v0 @kind boolean;
  #L3f7d78.  call temp:= `d`(v2) @signature `Lo/f;.d:()I` @kind virtual;
  #L3f7d7e.  v2:= temp;
  #L3f7d80.  v2:= v2 + -1;
  #L3f7d84.  v1.`o.f$d.o` @type ^`int` := v2;
  #L3f7d88.  v2:= -1I;
  #L3f7d8a.  v1.`o.f$d.p` @type ^`int` := v2;
  #L3f7d8e.  return @kind void;
}
procedure `java.util.Map$Entry` `a`(`o.f$d` v2 @kind this) @signature `Lo/f$d;.a:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7d2c.  call temp:= `hasNext`(v2) @signature `Lo/f$d;.hasNext:()Z` @kind virtual;
  #L3f7d32.  v0:= temp;
  #L3f7d34.  if v0 == 0 then goto L3f7d4a;
  #L3f7d38.  v0:= v2.`o.f$d.p` @type ^`int`;
  #L3f7d3c.  v1:= 1I;
  #L3f7d3e.  v0:= v0 + v1 @kind int;
  #L3f7d40.  v2.`o.f$d.p` @type ^`int` := v0;
  #L3f7d44.  v2.`o.f$d.q` @type ^`boolean` := v1 @kind boolean;
  #L3f7d48.  return v2 @kind object;
  #L3f7d4a.  v0:= new `java.util.NoSuchElementException`;
  #L3f7d4e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3f7d54.  throw v0;
}
procedure `boolean` `equals`(`o.f$d` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lo/f$d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7af4.  v0:= v4.`o.f$d.q` @type ^`boolean` @kind boolean;
  #L3f7af8.  if v0 == 0 then goto L3f7b5a;
  #L3f7afc.  v0:= instanceof @variable v5 @type ^`java.util.Map$Entry` @kind boolean;
  #L3f7b00.  v1:= 0I;
  #L3f7b02.  if v0 != 0 then goto L3f7b08;
  #L3f7b06.  return v1;
  #L3f7b08.  v5:= (`java.util.Map$Entry`) v5 @kind object;
  #L3f7b0c.  call temp:= `getKey`(v5) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3f7b12.  v0:= temp @kind object;
  #L3f7b14.  v2:= v4.`o.f$d.r` @type ^`o.f` @kind object;
  #L3f7b18.  v3:= v4.`o.f$d.p` @type ^`int`;
  #L3f7b1c.  call temp:= `b`(v2, v3, v1) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f7b22.  v2:= temp @kind object;
  #L3f7b24.  call temp:= `c`(v0, v2) @signature `Lo/c;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3f7b2a.  v0:= temp;
  #L3f7b2c.  v2:= 1I;
  #L3f7b2e.  if v0 == 0 then goto L3f7b58;
  #L3f7b32.  call temp:= `getValue`(v5) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3f7b38.  v5:= temp @kind object;
  #L3f7b3a.  v0:= v4.`o.f$d.r` @type ^`o.f` @kind object;
  #L3f7b3e.  v3:= v4.`o.f$d.p` @type ^`int`;
  #L3f7b42.  call temp:= `b`(v0, v3, v2) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f7b48.  v0:= temp @kind object;
  #L3f7b4a.  call temp:= `c`(v5, v0) @signature `Lo/c;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3f7b50.  v5:= temp;
  #L3f7b52.  if v5 == 0 then goto L3f7b58;
  #L3f7b56.  v1:= 1I;
  #L3f7b58.  return v1;
  #L3f7b5a.  v5:= new `java.lang.IllegalStateException`;
  #L3f7b5e.  v0:= "This container does not support retaining Map.Entry objects" @kind object;
  #L3f7b62.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7b68.  throw v5;
}
procedure `java.lang.Object` `getKey`(`o.f$d` v3 @kind this) @signature `Lo/f$d;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f7c10.  v0:= v3.`o.f$d.q` @type ^`boolean` @kind boolean;
  #L3f7c14.  if v0 == 0 then goto L3f7c2c;
  #L3f7c18.  v0:= v3.`o.f$d.r` @type ^`o.f` @kind object;
  #L3f7c1c.  v1:= v3.`o.f$d.p` @type ^`int`;
  #L3f7c20.  v2:= 0I;
  #L3f7c22.  call temp:= `b`(v0, v1, v2) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f7c28.  v0:= temp @kind object;
  #L3f7c2a.  return v0 @kind object;
  #L3f7c2c.  v0:= new `java.lang.IllegalStateException`;
  #L3f7c30.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L3f7c34.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7c3a.  throw v0;
}
procedure `java.lang.Object` `getValue`(`o.f$d` v3 @kind this) @signature `Lo/f$d;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f7c4c.  v0:= v3.`o.f$d.q` @type ^`boolean` @kind boolean;
  #L3f7c50.  if v0 == 0 then goto L3f7c68;
  #L3f7c54.  v0:= v3.`o.f$d.r` @type ^`o.f` @kind object;
  #L3f7c58.  v1:= v3.`o.f$d.p` @type ^`int`;
  #L3f7c5c.  v2:= 1I;
  #L3f7c5e.  call temp:= `b`(v0, v1, v2) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f7c64.  v0:= temp @kind object;
  #L3f7c66.  return v0 @kind object;
  #L3f7c68.  v0:= new `java.lang.IllegalStateException`;
  #L3f7c6c.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L3f7c70.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7c76.  throw v0;
}
procedure `boolean` `hasNext`(`o.f$d` v2 @kind this) @signature `Lo/f$d;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7b7c.  v0:= v2.`o.f$d.p` @type ^`int`;
  #L3f7b80.  v1:= v2.`o.f$d.o` @type ^`int`;
  #L3f7b84.  if v0 >= v1 then goto L3f7b8c;
  #L3f7b88.  v0:= 1I;
  #L3f7b8a.  goto L3f7b8e;
  #L3f7b8c.  v0:= 0I;
  #L3f7b8e.  return v0;
}
procedure `int` `hashCode`(`o.f$d` v5 @kind this) @signature `Lo/f$d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f7ba0.  v0:= v5.`o.f$d.q` @type ^`boolean` @kind boolean;
  #L3f7ba4.  if v0 == 0 then goto L3f7bee;
  #L3f7ba8.  v0:= v5.`o.f$d.r` @type ^`o.f` @kind object;
  #L3f7bac.  v1:= v5.`o.f$d.p` @type ^`int`;
  #L3f7bb0.  v2:= 0I;
  #L3f7bb2.  call temp:= `b`(v0, v1, v2) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f7bb8.  v0:= temp @kind object;
  #L3f7bba.  v1:= v5.`o.f$d.r` @type ^`o.f` @kind object;
  #L3f7bbe.  v3:= v5.`o.f$d.p` @type ^`int`;
  #L3f7bc2.  v4:= 1I;
  #L3f7bc4.  call temp:= `b`(v1, v3, v4) @signature `Lo/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L3f7bca.  v1:= temp @kind object;
  #L3f7bcc.  if v0 != 0 then goto L3f7bd4;
  #L3f7bd0.  v0:= 0I;
  #L3f7bd2.  goto L3f7bdc;
  #L3f7bd4.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f7bda.  v0:= temp;
  #L3f7bdc.  if v1 != 0 then goto L3f7be2;
  #L3f7be0.  goto L3f7bea;
  #L3f7be2.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f7be8.  v2:= temp;
  #L3f7bea.  v0:= v0 ^~ v2 @kind int;
  #L3f7bec.  return v0;
  #L3f7bee.  v0:= new `java.lang.IllegalStateException`;
  #L3f7bf2.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L3f7bf6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7bfc.  throw v0;
}
procedure `java.lang.Object` `next`(`o.f$d` v1 @kind this) @signature `Lo/f$d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3f7c88.  call temp:= `a`(v1) @signature `Lo/f$d;.a:()Ljava/util/Map$Entry;` @kind virtual;
  #L3f7c8e.  v0:= temp @kind object;
  #L3f7c90.  return v0 @kind object;
}
procedure `void` `remove`(`o.f$d` v2 @kind this) @signature `Lo/f$d;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7da0.  v0:= v2.`o.f$d.q` @type ^`boolean` @kind boolean;
  #L3f7da4.  if v0 == 0 then goto L3f7dd6;
  #L3f7da8.  v0:= v2.`o.f$d.r` @type ^`o.f` @kind object;
  #L3f7dac.  v1:= v2.`o.f$d.p` @type ^`int`;
  #L3f7db0.  call `h`(v0, v1) @signature `Lo/f;.h:(I)V` @kind virtual;
  #L3f7db6.  v0:= v2.`o.f$d.p` @type ^`int`;
  #L3f7dba.  v0:= v0 + -1;
  #L3f7dbe.  v2.`o.f$d.p` @type ^`int` := v0;
  #L3f7dc2.  v0:= v2.`o.f$d.o` @type ^`int`;
  #L3f7dc6.  v0:= v0 + -1;
  #L3f7dca.  v2.`o.f$d.o` @type ^`int` := v0;
  #L3f7dce.  v0:= 0I;
  #L3f7dd0.  v2.`o.f$d.q` @type ^`boolean` := v0 @kind boolean;
  #L3f7dd4.  return @kind void;
  #L3f7dd6.  v0:= new `java.lang.IllegalStateException`;
  #L3f7dda.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3f7de0.  throw v0;
}
procedure `java.lang.Object` `setValue`(`o.f$d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lo/f$d;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7ca4.  v0:= v2.`o.f$d.q` @type ^`boolean` @kind boolean;
  #L3f7ca8.  if v0 == 0 then goto L3f7cbe;
  #L3f7cac.  v0:= v2.`o.f$d.r` @type ^`o.f` @kind object;
  #L3f7cb0.  v1:= v2.`o.f$d.p` @type ^`int`;
  #L3f7cb4.  call temp:= `i`(v0, v1, v3) @signature `Lo/f;.i:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f7cba.  v3:= temp @kind object;
  #L3f7cbc.  return v3 @kind object;
  #L3f7cbe.  v3:= new `java.lang.IllegalStateException`;
  #L3f7cc2.  v0:= "This container does not support retaining Map.Entry objects" @kind object;
  #L3f7cc6.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7ccc.  throw v3;
}
procedure `java.lang.String` `toString`(`o.f$d` v2 @kind this) @signature `Lo/f$d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7ce0.  v0:= new `java.lang.StringBuilder`;
  #L3f7ce4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f7cea.  call temp:= `getKey`(v2) @signature `Lo/f$d;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L3f7cf0.  v1:= temp @kind object;
  #L3f7cf2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f7cf8.  v1:= "=" @kind object;
  #L3f7cfc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f7d02.  call temp:= `getValue`(v2) @signature `Lo/f$d;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L3f7d08.  v1:= temp @kind object;
  #L3f7d0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f7d10.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f7d16.  v0:= temp @kind object;
  #L3f7d18.  return v0 @kind object;
}
