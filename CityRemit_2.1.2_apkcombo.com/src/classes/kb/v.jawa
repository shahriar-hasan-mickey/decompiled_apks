record `kb.v` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Set` @kind interface, `java.io.Serializable` @kind interface {
}
global `kb.v` `@@kb.v.o` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkb/v;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b3754.  v0:= new `kb.v`;
  #L3b3758.  call `<init>`(v0) @signature `Lkb/v;.<init>:()V` @kind direct;
  #L3b375e.  `@@kb.v.o` @type ^`kb.v` := v0 @kind object;
  #L3b3762.  return @kind void;
}
procedure `void` `<init>`(`kb.v` v0 @kind this) @signature `Lkb/v;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3b3774.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b377a.  return @kind void;
}
procedure `boolean` `add`(`kb.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/v;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3b354c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b3550.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b3554.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b355a.  throw v2;
}
procedure `boolean` `addAll`(`kb.v` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkb/v;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b356c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b3570.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b3574.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b357a.  throw v2;
}
procedure `boolean` `b`(`kb.v` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkb/v;.b:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b35b8.  v0:= "element" @kind object;
  #L3b35bc.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b35c2.  v2:= 0I;
  #L3b35c4.  return v2;
}
procedure `void` `clear`(`kb.v` v2 @kind this) @signature `Lkb/v;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b378c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3b3790.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L3b3794.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b379a.  throw v0;
}
procedure `boolean` `contains`(`kb.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/v;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b358c.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L3b3590.  if v0 != 0 then goto L3b3598;
  #L3b3594.  v2:= 0I;
  #L3b3596.  return v2;
  #L3b3598.  v2:= (`java.lang.Void`) v2 @kind object;
  #L3b359c.  call temp:= `b`(v1, v2) @signature `Lkb/v;.b:(Ljava/lang/Void;)Z` @kind virtual;
  #L3b35a2.  v2:= temp;
  #L3b35a4.  return v2;
}
procedure `boolean` `containsAll`(`kb.v` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkb/v;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b35d8.  v0:= "elements" @kind object;
  #L3b35dc.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b35e2.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3b35e8.  v2:= temp;
  #L3b35ea.  return v2;
}
procedure `boolean` `equals`(`kb.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/v;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b35fc.  v0:= instanceof @variable v2 @type ^`java.util.Set` @kind boolean;
  #L3b3600.  if v0 == 0 then goto L3b3618;
  #L3b3604.  v2:= (`java.util.Set`) v2 @kind object;
  #L3b3608.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L3b360e.  v2:= temp;
  #L3b3610.  if v2 == 0 then goto L3b3618;
  #L3b3614.  v2:= 1I;
  #L3b3616.  goto L3b361a;
  #L3b3618.  v2:= 0I;
  #L3b361a.  return v2;
}
procedure `int` `f`(`kb.v` v1 @kind this) @signature `Lkb/v;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b36a0.  v0:= 0I;
  #L3b36a2.  return v0;
}
procedure `int` `hashCode`(`kb.v` v1 @kind this) @signature `Lkb/v;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b36b4.  v0:= 0I;
  #L3b36b6.  return v0;
}
procedure `boolean` `isEmpty`(`kb.v` v1 @kind this) @signature `Lkb/v;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b362c.  v0:= 1I;
  #L3b362e.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kb.v` v1 @kind this) @signature `Lkb/v;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b373c.  v0:= `@@kb.s.o` @type ^`kb.s` @kind object;
  #L3b3740.  return v0 @kind object;
}
procedure `boolean` `remove`(`kb.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/v;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3640.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b3644.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b3648.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b364e.  throw v2;
}
procedure `boolean` `removeAll`(`kb.v` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkb/v;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3660.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b3664.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b3668.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b366e.  throw v2;
}
procedure `boolean` `retainAll`(`kb.v` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkb/v;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3680.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b3684.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b3688.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b368e.  throw v2;
}
procedure `int` `size`(`kb.v` v1 @kind this) @signature `Lkb/v;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b36c8.  call temp:= `f`(v1) @signature `Lkb/v;.f:()I` @kind virtual;
  #L3b36ce.  v0:= temp;
  #L3b36d0.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kb.v` v1 @kind this) @signature `Lkb/v;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b36e4.  call temp:= `a`(v1) @signature `Lkotlin/jvm/internal/f;.a:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L3b36ea.  v0:= temp @kind object;
  #L3b36ec.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kb.v` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkb/v;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3700.  v0:= "array" @kind object;
  #L3b3704.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b370a.  call temp:= `b`(v1, v2) @signature `Lkotlin/jvm/internal/f;.b:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L3b3710.  v2:= temp @kind object;
  #L3b3712.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kb.v` v1 @kind this) @signature `Lkb/v;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3724.  v0:= "[]" @kind object;
  #L3b3728.  return v0 @kind object;
}
