record `kb.t` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.List` @kind interface, `java.io.Serializable` @kind interface, `java.util.RandomAccess` @kind interface {
}
global `kb.t` `@@kb.t.o` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkb/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b3234.  v0:= new `kb.t`;
  #L3b3238.  call `<init>`(v0) @signature `Lkb/t;.<init>:()V` @kind direct;
  #L3b323e.  `@@kb.t.o` @type ^`kb.t` := v0 @kind object;
  #L3b3242.  return @kind void;
}
procedure `void` `<init>`(`kb.t` v0 @kind this) @signature `Lkb/t;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3b3254.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b325a.  return @kind void;
}
procedure `void` `add`(`kb.t` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkb/t;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3b326c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3b3270.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L3b3274.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b327a.  throw v1;
}
procedure `boolean` `add`(`kb.t` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/t;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3b2e18.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b2e1c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b2e20.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b2e26.  throw v2;
}
procedure `boolean` `addAll`(`kb.t` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Lkb/t;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3b2e38.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3b2e3c.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L3b2e40.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b2e46.  throw v1;
}
procedure `boolean` `addAll`(`kb.t` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkb/t;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2e58.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b2e5c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b2e60.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b2e66.  throw v2;
}
procedure `boolean` `b`(`kb.t` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkb/t;.b:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2ea4.  v0:= "element" @kind object;
  #L3b2ea8.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b2eae.  v2:= 0I;
  #L3b2eb0.  return v2;
}
procedure `void` `clear`(`kb.t` v2 @kind this) @signature `Lkb/t;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b328c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3b3290.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L3b3294.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b329a.  throw v0;
}
procedure `boolean` `contains`(`kb.t` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/t;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b2e78.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L3b2e7c.  if v0 != 0 then goto L3b2e84;
  #L3b2e80.  v2:= 0I;
  #L3b2e82.  return v2;
  #L3b2e84.  v2:= (`java.lang.Void`) v2 @kind object;
  #L3b2e88.  call temp:= `b`(v1, v2) @signature `Lkb/t;.b:(Ljava/lang/Void;)Z` @kind virtual;
  #L3b2e8e.  v2:= temp;
  #L3b2e90.  return v2;
}
procedure `boolean` `containsAll`(`kb.t` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkb/t;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2ec4.  v0:= "elements" @kind object;
  #L3b2ec8.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b2ece.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3b2ed4.  v2:= temp;
  #L3b2ed6.  return v2;
}
procedure `boolean` `equals`(`kb.t` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/t;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2ee8.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L3b2eec.  if v0 == 0 then goto L3b2f04;
  #L3b2ef0.  v2:= (`java.util.List`) v2 @kind object;
  #L3b2ef4.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3b2efa.  v2:= temp;
  #L3b2efc.  if v2 == 0 then goto L3b2f04;
  #L3b2f00.  v2:= 1I;
  #L3b2f02.  goto L3b2f06;
  #L3b2f04.  v2:= 0I;
  #L3b2f06.  return v2;
}
procedure `java.lang.Void` `f`(`kb.t` v3 @kind this, `int` v4 ) @signature `Lkb/t;.f:(I)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b311c.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3b3120.  v1:= new `java.lang.StringBuilder`;
  #L3b3124.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b312a.  v2:= "Empty list doesn't contain element at index " @kind object;
  #L3b312e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b3134.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b313a.  v4:= 46I;
  #L3b313e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b3144.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b314a.  v4:= temp @kind object;
  #L3b314c.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b3152.  throw v0;
}
procedure `java.lang.Object` `get`(`kb.t` v0 @kind this, `int` v1 ) @signature `Lkb/t;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3b3068.  call temp:= `f`(v0, v1) @signature `Lkb/t;.f:(I)Ljava/lang/Void;` @kind virtual;
  #L3b306e.  v1:= temp @kind object;
  #L3b3070.  return v1 @kind object;
}
procedure `int` `h`(`kb.t` v1 @kind this) @signature `Lkb/t;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2f8c.  v0:= 0I;
  #L3b2f8e.  return v0;
}
procedure `int` `hashCode`(`kb.t` v1 @kind this) @signature `Lkb/t;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2fa0.  v0:= 1I;
  #L3b2fa2.  return v0;
}
procedure `int` `indexOf`(`kb.t` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/t;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b2fb4.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L3b2fb8.  if v0 != 0 then goto L3b2fc0;
  #L3b2fbc.  v2:= -1I;
  #L3b2fbe.  return v2;
  #L3b2fc0.  v2:= (`java.lang.Void`) v2 @kind object;
  #L3b2fc4.  call temp:= `l`(v1, v2) @signature `Lkb/t;.l:(Ljava/lang/Void;)I` @kind virtual;
  #L3b2fca.  v2:= temp;
  #L3b2fcc.  return v2;
}
procedure `boolean` `isEmpty`(`kb.t` v1 @kind this) @signature `Lkb/t;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2f18.  v0:= 1I;
  #L3b2f1a.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kb.t` v1 @kind this) @signature `Lkb/t;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3164.  v0:= `@@kb.s.o` @type ^`kb.s` @kind object;
  #L3b3168.  return v0 @kind object;
}
procedure `int` `l`(`kb.t` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkb/t;.l:(Ljava/lang/Void;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2fe0.  v0:= "element" @kind object;
  #L3b2fe4.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b2fea.  v2:= -1I;
  #L3b2fec.  return v2;
}
procedure `int` `lastIndexOf`(`kb.t` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/t;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b3000.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L3b3004.  if v0 != 0 then goto L3b300c;
  #L3b3008.  v2:= -1I;
  #L3b300a.  return v2;
  #L3b300c.  v2:= (`java.lang.Void`) v2 @kind object;
  #L3b3010.  call temp:= `n`(v1, v2) @signature `Lkb/t;.n:(Ljava/lang/Void;)I` @kind virtual;
  #L3b3016.  v2:= temp;
  #L3b3018.  return v2;
}
procedure `java.util.ListIterator` `listIterator`(`kb.t` v1 @kind this) @signature `Lkb/t;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b31d4.  v0:= `@@kb.s.o` @type ^`kb.s` @kind object;
  #L3b31d8.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`kb.t` v3 @kind this, `int` v4 ) @signature `Lkb/t;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b31ec.  if v4 != 0 then goto L3b31f6;
  #L3b31f0.  v4:= `@@kb.s.o` @type ^`kb.s` @kind object;
  #L3b31f4.  return v4 @kind object;
  #L3b31f6.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3b31fa.  v1:= new `java.lang.StringBuilder`;
  #L3b31fe.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b3204.  v2:= "Index: " @kind object;
  #L3b3208.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b320e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b3214.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b321a.  v4:= temp @kind object;
  #L3b321c.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b3222.  throw v0;
}
procedure `int` `n`(`kb.t` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkb/t;.n:(Ljava/lang/Void;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b302c.  v0:= "element" @kind object;
  #L3b3030.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b3036.  v2:= -1I;
  #L3b3038.  return v2;
}
procedure `java.lang.Object` `remove`(`kb.t` v1 @kind this, `int` v2 ) @signature `Lkb/t;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3b3084.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b3088.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b308c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b3092.  throw v2;
}
procedure `boolean` `remove`(`kb.t` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/t;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2f2c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b2f30.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b2f34.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b2f3a.  throw v2;
}
procedure `boolean` `removeAll`(`kb.t` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkb/t;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2f4c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b2f50.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b2f54.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b2f5a.  throw v2;
}
procedure `boolean` `retainAll`(`kb.t` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkb/t;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2f6c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b2f70.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b2f74.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b2f7a.  throw v2;
}
procedure `java.lang.Object` `set`(`kb.t` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkb/t;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3b30a4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3b30a8.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L3b30ac.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b30b2.  throw v1;
}
procedure `int` `size`(`kb.t` v1 @kind this) @signature `Lkb/t;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b304c.  call temp:= `h`(v1) @signature `Lkb/t;.h:()I` @kind virtual;
  #L3b3052.  v0:= temp;
  #L3b3054.  return v0;
}
procedure `java.util.List` `subList`(`kb.t` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkb/t;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b317c.  if v4 != 0 then goto L3b3186;
  #L3b3180.  if v5 != 0 then goto L3b3186;
  #L3b3184.  return v3 @kind object;
  #L3b3186.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3b318a.  v1:= new `java.lang.StringBuilder`;
  #L3b318e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b3194.  v2:= "fromIndex: " @kind object;
  #L3b3198.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b319e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b31a4.  v4:= ", toIndex: " @kind object;
  #L3b31a8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b31ae.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b31b4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b31ba.  v4:= temp @kind object;
  #L3b31bc.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b31c2.  throw v0;
}
procedure `java.lang.Object`[] `toArray`(`kb.t` v1 @kind this) @signature `Lkb/t;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b30c4.  call temp:= `a`(v1) @signature `Lkotlin/jvm/internal/f;.a:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L3b30ca.  v0:= temp @kind object;
  #L3b30cc.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kb.t` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkb/t;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b30e0.  v0:= "array" @kind object;
  #L3b30e4.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b30ea.  call temp:= `b`(v1, v2) @signature `Lkotlin/jvm/internal/f;.b:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L3b30f0.  v2:= temp @kind object;
  #L3b30f2.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kb.t` v1 @kind this) @signature `Lkb/t;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3104.  v0:= "[]" @kind object;
  #L3b3108.  return v0 @kind object;
}
