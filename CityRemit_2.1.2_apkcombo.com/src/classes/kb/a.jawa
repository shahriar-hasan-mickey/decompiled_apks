record `kb.a` @kind class @AccessFlag FINAL extends `java.util.Collection` @kind interface {
  `java.lang.Object`[] `kb.a.o` @AccessFlag PRIVATE_FINAL;
  `boolean` `kb.a.p` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kb.a` v1 @kind this, `java.lang.Object`[] v2 @kind object, `boolean` v3 ) @signature `Lkb/a;.<init>:([Ljava/lang/Object;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b1ba8.  v0:= "values" @kind object;
  #L3b1bac.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b1bb2.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b1bb8.  v1.`kb.a.o` @type ^`java.lang.Object`[] := v2 @kind object;
  #L3b1bbc.  v1.`kb.a.p` @type ^`boolean` := v3 @kind boolean;
  #L3b1bc0.  return @kind void;
}
procedure `boolean` `add`(`kb.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/a;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b19d0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b19d4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b19d8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b19de.  throw v2;
}
procedure `boolean` `addAll`(`kb.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkb/a;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b19f0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b19f4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b19f8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b19fe.  throw v2;
}
procedure `int` `b`(`kb.a` v1 @kind this) @signature `Lkb/a;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1b0c.  v0:= v1.`kb.a.o` @type ^`java.lang.Object`[] @kind object;
  #L3b1b10.  v0:= length @variable v0;
  #L3b1b12.  return v0;
}
procedure `void` `clear`(`kb.a` v2 @kind this) @signature `Lkb/a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b1bd4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3b1bd8.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L3b1bdc.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b1be2.  throw v0;
}
procedure `boolean` `contains`(`kb.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1a10.  v0:= v1.`kb.a.o` @type ^`java.lang.Object`[] @kind object;
  #L3b1a14.  call temp:= `h`(v0, v2) @signature `Lkb/f;.h:([Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3b1a1a.  v2:= temp;
  #L3b1a1c.  return v2;
}
procedure `boolean` `containsAll`(`kb.a` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkb/a;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b1a30.  v0:= "elements" @kind object;
  #L3b1a34.  call `e`(v3, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b1a3a.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3b1a40.  v0:= temp;
  #L3b1a42.  v1:= 1I;
  #L3b1a44.  if v0 == 0 then goto L3b1a4a;
  #L3b1a48.  goto L3b1a74;
  #L3b1a4a.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3b1a50.  v3:= temp @kind object;
  #L3b1a52.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3b1a58.  v0:= temp;
  #L3b1a5a.  if v0 == 0 then goto L3b1a74;
  #L3b1a5e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3b1a64.  v0:= temp @kind object;
  #L3b1a66.  call temp:= `contains`(v2, v0) @signature `Lkb/a;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b1a6c.  v0:= temp;
  #L3b1a6e.  if v0 != 0 then goto L3b1a52;
  #L3b1a72.  v1:= 0I;
  #L3b1a74.  return v1;
}
procedure `boolean` `isEmpty`(`kb.a` v1 @kind this) @signature `Lkb/a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1a88.  v0:= v1.`kb.a.o` @type ^`java.lang.Object`[] @kind object;
  #L3b1a8c.  v0:= length @variable v0;
  #L3b1a8e.  if v0 != 0 then goto L3b1a96;
  #L3b1a92.  v0:= 1I;
  #L3b1a94.  goto L3b1a98;
  #L3b1a96.  v0:= 0I;
  #L3b1a98.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kb.a` v1 @kind this) @signature `Lkb/a;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1b88.  v0:= v1.`kb.a.o` @type ^`java.lang.Object`[] @kind object;
  #L3b1b8c.  call temp:= `a`(v0) @signature `Lkotlin/jvm/internal/b;.a:([Ljava/lang/Object;)Ljava/util/Iterator;` @kind static;
  #L3b1b92.  v0:= temp @kind object;
  #L3b1b94.  return v0 @kind object;
}
procedure `boolean` `remove`(`kb.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/a;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1aac.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b1ab0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b1ab4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b1aba.  throw v2;
}
procedure `boolean` `removeAll`(`kb.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkb/a;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1acc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b1ad0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b1ad4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b1ada.  throw v2;
}
procedure `boolean` `retainAll`(`kb.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkb/a;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1aec.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b1af0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b1af4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b1afa.  throw v2;
}
procedure `int` `size`(`kb.a` v1 @kind this) @signature `Lkb/a;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b1b24.  call temp:= `b`(v1) @signature `Lkb/a;.b:()I` @kind virtual;
  #L3b1b2a.  v0:= temp;
  #L3b1b2c.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kb.a` v2 @kind this) @signature `Lkb/a;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3b1b40.  v0:= v2.`kb.a.o` @type ^`java.lang.Object`[] @kind object;
  #L3b1b44.  v1:= v2.`kb.a.p` @type ^`boolean` @kind boolean;
  #L3b1b48.  call temp:= `a`(v0, v1) @signature `Lkb/i;.a:([Ljava/lang/Object;Z)[Ljava/lang/Object;` @kind static;
  #L3b1b4e.  v0:= temp @kind object;
  #L3b1b50.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kb.a` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkb/a;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1b64.  v0:= "array" @kind object;
  #L3b1b68.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b1b6e.  call temp:= `b`(v1, v2) @signature `Lkotlin/jvm/internal/f;.b:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L3b1b74.  v2:= temp @kind object;
  #L3b1b76.  return v2 @kind object;
}
