record `kb.u` @kind class @AccessFlag FINAL extends `java.util.Map` @kind interface, `java.io.Serializable` @kind interface {
}
global `kb.u` `@@kb.u.o` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkb/u;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b34d4.  v0:= new `kb.u`;
  #L3b34d8.  call `<init>`(v0) @signature `Lkb/u;.<init>:()V` @kind direct;
  #L3b34de.  `@@kb.u.o` @type ^`kb.u` := v0 @kind object;
  #L3b34e2.  return @kind void;
}
procedure `void` `<init>`(`kb.u` v0 @kind this) @signature `Lkb/u;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3b34f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b34fa.  return @kind void;
}
procedure `boolean` `a`(`kb.u` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkb/u;.a:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b32ec.  v0:= "value" @kind object;
  #L3b32f0.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b32f6.  v2:= 0I;
  #L3b32f8.  return v2;
}
procedure `java.lang.Void` `b`(`kb.u` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkb/u;.b:(Ljava/lang/Object;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;

  #L3b3404.  v1:= 0I;
  #L3b3406.  return v1 @kind object;
}
procedure `java.util.Set` `c`(`kb.u` v1 @kind this) @signature `Lkb/u;.c:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3488.  v0:= `@@kb.v.o` @type ^`kb.v` @kind object;
  #L3b348c.  return v0 @kind object;
}
procedure `void` `clear`(`kb.u` v2 @kind this) @signature `Lkb/u;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b350c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3b3510.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L3b3514.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b351a.  throw v0;
}
procedure `boolean` `containsKey`(`kb.u` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkb/u;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3b32ac.  v1:= 0I;
  #L3b32ae.  return v1;
}
procedure `boolean` `containsValue`(`kb.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/u;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b32c0.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L3b32c4.  if v0 != 0 then goto L3b32cc;
  #L3b32c8.  v2:= 0I;
  #L3b32ca.  return v2;
  #L3b32cc.  v2:= (`java.lang.Void`) v2 @kind object;
  #L3b32d0.  call temp:= `a`(v1, v2) @signature `Lkb/u;.a:(Ljava/lang/Void;)Z` @kind virtual;
  #L3b32d6.  v2:= temp;
  #L3b32d8.  return v2;
}
procedure `java.util.Set` `d`(`kb.u` v1 @kind this) @signature `Lkb/u;.d:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b34a0.  v0:= `@@kb.v.o` @type ^`kb.v` @kind object;
  #L3b34a4.  return v0 @kind object;
}
procedure `int` `e`(`kb.u` v1 @kind this) @signature `Lkb/u;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3350.  v0:= 0I;
  #L3b3352.  return v0;
}
procedure `java.util.Set` `entrySet`(`kb.u` v1 @kind this) @signature `Lkb/u;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b346c.  call temp:= `c`(v1) @signature `Lkb/u;.c:()Ljava/util/Set;` @kind virtual;
  #L3b3472.  v0:= temp @kind object;
  #L3b3474.  return v0 @kind object;
}
procedure `boolean` `equals`(`kb.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/u;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b330c.  v0:= instanceof @variable v2 @type ^`java.util.Map` @kind boolean;
  #L3b3310.  if v0 == 0 then goto L3b3328;
  #L3b3314.  v2:= (`java.util.Map`) v2 @kind object;
  #L3b3318.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L3b331e.  v2:= temp;
  #L3b3320.  if v2 == 0 then goto L3b3328;
  #L3b3324.  v2:= 1I;
  #L3b3326.  goto L3b332a;
  #L3b3328.  v2:= 0I;
  #L3b332a.  return v2;
}
procedure `java.util.Collection` `f`(`kb.u` v1 @kind this) @signature `Lkb/u;.f:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3438.  v0:= `@@kb.t.o` @type ^`kb.t` @kind object;
  #L3b343c.  return v0 @kind object;
}
procedure `java.lang.Void` `g`(`kb.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkb/u;.g:(Ljava/lang/Object;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3418.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b341c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b3420.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b3426.  throw v2;
}
procedure `java.lang.Object` `get`(`kb.u` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkb/u;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3b3394.  call temp:= `b`(v0, v1) @signature `Lkb/u;.b:(Ljava/lang/Object;)Ljava/lang/Void;` @kind virtual;
  #L3b339a.  v1:= temp @kind object;
  #L3b339c.  return v1 @kind object;
}
procedure `int` `hashCode`(`kb.u` v1 @kind this) @signature `Lkb/u;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3364.  v0:= 0I;
  #L3b3366.  return v0;
}
procedure `boolean` `isEmpty`(`kb.u` v1 @kind this) @signature `Lkb/u;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b333c.  v0:= 1I;
  #L3b333e.  return v0;
}
procedure `java.util.Set` `keySet`(`kb.u` v1 @kind this) @signature `Lkb/u;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b34b8.  call temp:= `d`(v1) @signature `Lkb/u;.d:()Ljava/util/Set;` @kind virtual;
  #L3b34be.  v0:= temp @kind object;
  #L3b34c0.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`kb.u` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkb/u;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3b33b0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3b33b4.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L3b33b8.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b33be.  throw v1;
}
procedure `void` `putAll`(`kb.u` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lkb/u;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b352c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3b3530.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3b3534.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b353a.  throw v2;
}
procedure `java.lang.Object` `remove`(`kb.u` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkb/u;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3b33d0.  call temp:= `g`(v0, v1) @signature `Lkb/u;.g:(Ljava/lang/Object;)Ljava/lang/Void;` @kind virtual;
  #L3b33d6.  v1:= temp @kind object;
  #L3b33d8.  return v1 @kind object;
}
procedure `int` `size`(`kb.u` v1 @kind this) @signature `Lkb/u;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b3378.  call temp:= `e`(v1) @signature `Lkb/u;.e:()I` @kind virtual;
  #L3b337e.  v0:= temp;
  #L3b3380.  return v0;
}
procedure `java.lang.String` `toString`(`kb.u` v1 @kind this) @signature `Lkb/u;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b33ec.  v0:= "{}" @kind object;
  #L3b33f0.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`kb.u` v1 @kind this) @signature `Lkb/u;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b3450.  call temp:= `f`(v1) @signature `Lkb/u;.f:()Ljava/util/Collection;` @kind virtual;
  #L3b3456.  v0:= temp @kind object;
  #L3b3458.  return v0 @kind object;
}
