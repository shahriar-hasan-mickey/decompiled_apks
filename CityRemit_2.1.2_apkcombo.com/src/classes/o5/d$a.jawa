record `o5.d$a` @kind class @AccessFlag  extends `java.util.AbstractList` @kind class, `java.util.RandomAccess` @kind interface, `java.io.Serializable` @kind interface {
  `int`[] `o5.d$a.o` @AccessFlag FINAL;
  `int` `o5.d$a.p` @AccessFlag FINAL;
  `int` `o5.d$a.q` @AccessFlag FINAL;
}
procedure `void` `<init>`(`o5.d$a` v2 @kind this, `int`[] v3 @kind object) @signature `Lo5/d$a;.<init>:([I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3fcfa8.  v0:= length @variable v3;
  #L3fcfaa.  v1:= 0I;
  #L3fcfac.  call `<init>`(v2, v3, v1, v0) @signature `Lo5/d$a;.<init>:([III)V` @kind direct;
  #L3fcfb2.  return @kind void;
}
procedure `void` `<init>`(`o5.d$a` v0 @kind this, `int`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lo5/d$a;.<init>:([III)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fcfc4.  call `<init>`(v0) @signature `Ljava/util/AbstractList;.<init>:()V` @kind direct;
  #L3fcfca.  v0.`o5.d$a.o` @type ^`int`[] := v1 @kind object;
  #L3fcfce.  v0.`o5.d$a.p` @type ^`int` := v2;
  #L3fcfd2.  v0.`o5.d$a.q` @type ^`int` := v3;
  #L3fcfd6.  return @kind void;
}
procedure `java.lang.Integer` `b`(`o5.d$a` v2 @kind this, `int` v3 ) @signature `Lo5/d$a;.b:(I)Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fce1c.  call temp:= `size`(v2) @signature `Lo5/d$a;.size:()I` @kind virtual;
  #L3fce22.  v0:= temp;
  #L3fce24.  call temp:= `g`(v3, v0) @signature `Ll5/j;.g:(II)I` @kind static;
  #L3fce2a.  v0:= v2.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fce2e.  v1:= v2.`o5.d$a.p` @type ^`int`;
  #L3fce32.  v1:= v1 + v3 @kind int;
  #L3fce34.  v3:= v0[v1];
  #L3fce38.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fce3e.  v3:= temp @kind object;
  #L3fce40.  return v3 @kind object;
}
procedure `boolean` `contains`(`o5.d$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lo5/d$a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fcc38.  v0:= instanceof @variable v4 @type ^`java.lang.Integer` @kind boolean;
  #L3fcc3c.  if v0 == 0 then goto L3fcc6a;
  #L3fcc40.  v0:= v3.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fcc44.  v4:= (`java.lang.Integer`) v4 @kind object;
  #L3fcc48.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3fcc4e.  v4:= temp;
  #L3fcc50.  v1:= v3.`o5.d$a.p` @type ^`int`;
  #L3fcc54.  v2:= v3.`o5.d$a.q` @type ^`int`;
  #L3fcc58.  call temp:= `a`(v0, v4, v1, v2) @signature `Lo5/d;.a:([IIII)I` @kind static;
  #L3fcc5e.  v4:= temp;
  #L3fcc60.  v0:= -1I;
  #L3fcc62.  if v4 == v0 then goto L3fcc6a;
  #L3fcc66.  v4:= 1I;
  #L3fcc68.  goto L3fcc6c;
  #L3fcc6a.  v4:= 0I;
  #L3fcc6c.  return v4;
}
procedure `boolean` `equals`(`o5.d$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lo5/d$a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3fcc80.  v0:= 1I;
  #L3fcc82.  if v8 != v7 then goto L3fcc88;
  #L3fcc86.  return v0;
  #L3fcc88.  v1:= instanceof @variable v8 @type ^`o5.d$a` @kind boolean;
  #L3fcc8c.  if v1 == 0 then goto L3fccdc;
  #L3fcc90.  v8:= (`o5.d$a`) v8 @kind object;
  #L3fcc94.  call temp:= `size`(v7) @signature `Lo5/d$a;.size:()I` @kind virtual;
  #L3fcc9a.  v1:= temp;
  #L3fcc9c.  call temp:= `size`(v8) @signature `Lo5/d$a;.size:()I` @kind virtual;
  #L3fcca2.  v2:= temp;
  #L3fcca4.  v3:= 0I;
  #L3fcca6.  if v2 == v1 then goto L3fccac;
  #L3fccaa.  return v3;
  #L3fccac.  v2:= 0I;
  #L3fccae.  if v2 >= v1 then goto L3fccda;
  #L3fccb2.  v4:= v7.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fccb6.  v5:= v7.`o5.d$a.p` @type ^`int`;
  #L3fccba.  v5:= v5 + v2 @kind int;
  #L3fccbc.  v4:= v4[v5];
  #L3fccc0.  v5:= v8.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fccc4.  v6:= v8.`o5.d$a.p` @type ^`int`;
  #L3fccc8.  v6:= v6 + v2 @kind int;
  #L3fccca.  v5:= v5[v6];
  #L3fccce.  if v4 == v5 then goto L3fccd4;
  #L3fccd2.  return v3;
  #L3fccd4.  v2:= v2 + 1;
  #L3fccd8.  goto L3fccae;
  #L3fccda.  return v0;
  #L3fccdc.  call temp:= `equals`(v7, v8) @signature `Ljava/util/AbstractList;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L3fcce2.  v8:= temp;
  #L3fcce4.  return v8;
}
procedure `java.lang.Integer` `f`(`o5.d$a` v3 @kind this, `int` v4 , `java.lang.Integer` v5 @kind object) @signature `Lo5/d$a;.f:(ILjava/lang/Integer;)Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fce54.  call temp:= `size`(v3) @signature `Lo5/d$a;.size:()I` @kind virtual;
  #L3fce5a.  v0:= temp;
  #L3fce5c.  call temp:= `g`(v4, v0) @signature `Ll5/j;.g:(II)I` @kind static;
  #L3fce62.  v0:= v3.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fce66.  v1:= v3.`o5.d$a.p` @type ^`int`;
  #L3fce6a.  v2:= v1 + v4 @kind int;
  #L3fce6e.  v2:= v0[v2];
  #L3fce72.  v1:= v1 + v4 @kind int;
  #L3fce74.  call temp:= `i`(v5) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3fce7a.  v4:= temp @kind object;
  #L3fce7c.  v4:= (`java.lang.Integer`) v4 @kind object;
  #L3fce80.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3fce86.  v4:= temp;
  #L3fce88.  v0[v1]:= v4;
  #L3fce8c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fce92.  v4:= temp @kind object;
  #L3fce94.  return v4 @kind object;
}
procedure `java.lang.Object` `get`(`o5.d$a` v0 @kind this, `int` v1 ) @signature `Lo5/d$a;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3fcea8.  call temp:= `b`(v0, v1) @signature `Lo5/d$a;.b:(I)Ljava/lang/Integer;` @kind virtual;
  #L3fceae.  v1:= temp @kind object;
  #L3fceb0.  return v1 @kind object;
}
procedure `int`[] `h`(`o5.d$a` v3 @kind this) @signature `Lo5/d$a;.h:()[I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3fcdf4.  v0:= v3.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fcdf8.  v1:= v3.`o5.d$a.p` @type ^`int`;
  #L3fcdfc.  v2:= v3.`o5.d$a.q` @type ^`int`;
  #L3fce00.  call temp:= `copyOfRange`(v0, v1, v2) @signature `Ljava/util/Arrays;.copyOfRange:([III)[I` @kind static;
  #L3fce06.  v0:= temp @kind object;
  #L3fce08.  return v0 @kind object;
}
procedure `int` `hashCode`(`o5.d$a` v3 @kind this) @signature `Lo5/d$a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fcd0c.  v0:= v3.`o5.d$a.p` @type ^`int`;
  #L3fcd10.  v1:= 1I;
  #L3fcd12.  v2:= v3.`o5.d$a.q` @type ^`int`;
  #L3fcd16.  if v0 >= v2 then goto L3fcd36;
  #L3fcd1a.  v1:= v1 * 31;
  #L3fcd1e.  v2:= v3.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fcd22.  v2:= v2[v0];
  #L3fcd26.  call temp:= `f`(v2) @signature `Lo5/d;.f:(I)I` @kind static;
  #L3fcd2c.  v2:= temp;
  #L3fcd2e.  v1:= v1 + v2 @kind int;
  #L3fcd30.  v0:= v0 + 1;
  #L3fcd34.  goto L3fcd12;
  #L3fcd36.  return v1;
}
procedure `int` `indexOf`(`o5.d$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lo5/d$a;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fcd48.  v0:= instanceof @variable v4 @type ^`java.lang.Integer` @kind boolean;
  #L3fcd4c.  if v0 == 0 then goto L3fcd7c;
  #L3fcd50.  v0:= v3.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fcd54.  v4:= (`java.lang.Integer`) v4 @kind object;
  #L3fcd58.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3fcd5e.  v4:= temp;
  #L3fcd60.  v1:= v3.`o5.d$a.p` @type ^`int`;
  #L3fcd64.  v2:= v3.`o5.d$a.q` @type ^`int`;
  #L3fcd68.  call temp:= `a`(v0, v4, v1, v2) @signature `Lo5/d;.a:([IIII)I` @kind static;
  #L3fcd6e.  v4:= temp;
  #L3fcd70.  if v4 < 0 then goto L3fcd7c;
  #L3fcd74.  v0:= v3.`o5.d$a.p` @type ^`int`;
  #L3fcd78.  v4:= v4 - v0 @kind int;
  #L3fcd7a.  return v4;
  #L3fcd7c.  v4:= -1I;
  #L3fcd7e.  return v4;
}
procedure `boolean` `isEmpty`(`o5.d$a` v1 @kind this) @signature `Lo5/d$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fccf8.  v0:= 0I;
  #L3fccfa.  return v0;
}
procedure `int` `lastIndexOf`(`o5.d$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lo5/d$a;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fcd90.  v0:= instanceof @variable v4 @type ^`java.lang.Integer` @kind boolean;
  #L3fcd94.  if v0 == 0 then goto L3fcdc4;
  #L3fcd98.  v0:= v3.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fcd9c.  v4:= (`java.lang.Integer`) v4 @kind object;
  #L3fcda0.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3fcda6.  v4:= temp;
  #L3fcda8.  v1:= v3.`o5.d$a.p` @type ^`int`;
  #L3fcdac.  v2:= v3.`o5.d$a.q` @type ^`int`;
  #L3fcdb0.  call temp:= `b`(v0, v4, v1, v2) @signature `Lo5/d;.b:([IIII)I` @kind static;
  #L3fcdb6.  v4:= temp;
  #L3fcdb8.  if v4 < 0 then goto L3fcdc4;
  #L3fcdbc.  v0:= v3.`o5.d$a.p` @type ^`int`;
  #L3fcdc0.  v4:= v4 - v0 @kind int;
  #L3fcdc2.  return v4;
  #L3fcdc4.  v4:= -1I;
  #L3fcdc6.  return v4;
}
procedure `java.lang.Object` `set`(`o5.d$a` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lo5/d$a;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3fcec4.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L3fcec8.  call temp:= `f`(v0, v1, v2) @signature `Lo5/d$a;.f:(ILjava/lang/Integer;)Ljava/lang/Integer;` @kind virtual;
  #L3fcece.  v1:= temp @kind object;
  #L3fced0.  return v1 @kind object;
}
procedure `int` `size`(`o5.d$a` v2 @kind this) @signature `Lo5/d$a;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fcdd8.  v0:= v2.`o5.d$a.q` @type ^`int`;
  #L3fcddc.  v1:= v2.`o5.d$a.p` @type ^`int`;
  #L3fcde0.  v0:= v0 - v1 @kind int;
  #L3fcde2.  return v0;
}
procedure `java.util.List` `subList`(`o5.d$a` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lo5/d$a;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fcf64.  call temp:= `size`(v3) @signature `Lo5/d$a;.size:()I` @kind virtual;
  #L3fcf6a.  v0:= temp;
  #L3fcf6c.  call `m`(v4, v5, v0) @signature `Ll5/j;.m:(III)V` @kind static;
  #L3fcf72.  if v4 != v5 then goto L3fcf80;
  #L3fcf76.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L3fcf7c.  v4:= temp @kind object;
  #L3fcf7e.  return v4 @kind object;
  #L3fcf80.  v0:= new `o5.d$a`;
  #L3fcf84.  v1:= v3.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fcf88.  v2:= v3.`o5.d$a.p` @type ^`int`;
  #L3fcf8c.  v4:= v4 + v2 @kind int;
  #L3fcf8e.  v2:= v2 + v5 @kind int;
  #L3fcf90.  call `<init>`(v0, v1, v4, v2) @signature `Lo5/d$a;.<init>:([III)V` @kind direct;
  #L3fcf96.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`o5.d$a` v3 @kind this) @signature `Lo5/d$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fcee4.  v0:= new `java.lang.StringBuilder`;
  #L3fcee8.  call temp:= `size`(v3) @signature `Lo5/d$a;.size:()I` @kind virtual;
  #L3fceee.  v1:= temp;
  #L3fcef0.  v1:= v1 * 5;
  #L3fcef4.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3fcefa.  v1:= 91I;
  #L3fcefe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fcf04.  v1:= v3.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fcf08.  v2:= v3.`o5.d$a.p` @type ^`int`;
  #L3fcf0c.  v1:= v1[v2];
  #L3fcf10.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fcf16.  v1:= v3.`o5.d$a.p` @type ^`int`;
  #L3fcf1a.  v1:= v1 + 1;
  #L3fcf1e.  v2:= v3.`o5.d$a.q` @type ^`int`;
  #L3fcf22.  if v1 >= v2 then goto L3fcf40;
  #L3fcf26.  v2:= ", " @kind object;
  #L3fcf2a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fcf30.  v2:= v3.`o5.d$a.o` @type ^`int`[] @kind object;
  #L3fcf34.  v2:= v2[v1];
  #L3fcf38.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fcf3e.  goto L3fcf1a;
  #L3fcf40.  v1:= 93I;
  #L3fcf44.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fcf4a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fcf50.  v0:= temp @kind object;
  #L3fcf52.  return v0 @kind object;
}
