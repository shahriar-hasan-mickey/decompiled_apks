record `g7.i` @kind class @AccessFlag  {
  `java.util.concurrent.BlockingQueue` `g7.i.a` @AccessFlag PRIVATE;
  `java.util.Random` `g7.i.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `g7.i.c` @AccessFlag PRIVATE_VOLATILE;
  `boolean` `g7.i.d` @AccessFlag PRIVATE;
  `g7.c` `g7.i.e` @AccessFlag PRIVATE;
  `java.nio.channels.WritableByteChannel` `g7.i.f` @AccessFlag PRIVATE;
  `java.lang.Thread` `g7.i.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`g7.i` v3 @kind this, `g7.c` v4 @kind object, `java.lang.String` v5 @kind object, `int` v6 ) @signature `Lg7/i;.<init>:(Lg7/c;Ljava/lang/String;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L323c9c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L323ca2.  v0:= new `java.util.Random`;
  #L323ca6.  call `<init>`(v0) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L323cac.  v3.`g7.i.b` @type ^`java.util.Random` := v0 @kind object;
  #L323cb0.  v0:= 0I;
  #L323cb2.  v3.`g7.i.c` @type ^`boolean` := v0 @kind boolean;
  #L323cb6.  v3.`g7.i.d` @type ^`boolean` := v0 @kind boolean;
  #L323cba.  call temp:= `j`() @signature `Lg7/c;.j:()Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L323cc0.  v0:= temp @kind object;
  #L323cc2.  v1:= new `g7.i$a`;
  #L323cc6.  call `<init>`(v1, v3) @signature `Lg7/i$a;.<init>:(Lg7/i;)V` @kind direct;
  #L323ccc.  call temp:= `newThread`(v0, v1) @signature `Ljava/util/concurrent/ThreadFactory;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @kind interface;
  #L323cd2.  v0:= temp @kind object;
  #L323cd4.  v3.`g7.i.g` @type ^`java.lang.Thread` := v0 @kind object;
  #L323cd8.  call temp:= `i`() @signature `Lg7/c;.i:()Lg7/b;` @kind static;
  #L323cde.  v0:= temp @kind object;
  #L323ce0.  call temp:= `d`(v3) @signature `Lg7/i;.d:()Ljava/lang/Thread;` @kind virtual;
  #L323ce6.  v1:= temp @kind object;
  #L323ce8.  v2:= new `java.lang.StringBuilder`;
  #L323cec.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L323cf2.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L323cf8.  v5:= "Writer-" @kind object;
  #L323cfc.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L323d02.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L323d08.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L323d0e.  v5:= temp @kind object;
  #L323d10.  call `a`(v0, v1, v5) @signature `Lg7/b;.a:(Ljava/lang/Thread;Ljava/lang/String;)V` @kind interface;
  #L323d16.  v3.`g7.i.e` @type ^`g7.c` := v4 @kind object;
  #L323d1a.  v4:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L323d1e.  call `<init>`(v4) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L323d24.  v3.`g7.i.a` @type ^`java.util.concurrent.BlockingQueue` := v4 @kind object;
  #L323d28.  return @kind void;
}
procedure `void` `a`(`g7.i` v0 @kind object) @signature `Lg7/i;.a:(Lg7/i;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L323d3c.  call `f`(v0) @signature `Lg7/i;.f:()V` @kind direct;
  #L323d42.  return @kind void;
}
procedure `java.nio.ByteBuffer` `b`(`g7.i` v5 @kind this, `byte` v6 , `boolean` v7 , `byte`[] v8 @kind object) @signature `Lg7/i;.b:(BZ[B)Ljava/nio/ByteBuffer;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L323bb8.  if v7 == 0 then goto L323bc0;
  #L323bbc.  v0:= 6I;
  #L323bbe.  goto L323bc2;
  #L323bc0.  v0:= 2I;
  #L323bc2.  v1:= length @variable v8;
  #L323bc4.  v2:= 65535I;
  #L323bca.  v3:= 126I;
  #L323bce.  if v1 >= v3 then goto L323bd4;
  #L323bd2.  goto L323be2;
  #L323bd4.  if v1 > v2 then goto L323bde;
  #L323bd8.  v0:= v0 + 2;
  #L323bdc.  goto L323be2;
  #L323bde.  v0:= v0 + 8;
  #L323be2.  v4:= length @variable v8;
  #L323be4.  v4:= v4 + v0 @kind int;
  #L323be6.  call temp:= `allocate`(v4) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L323bec.  v0:= temp @kind object;
  #L323bee.  v6:= v6 ^| -128;
  #L323bf2.  v6:= (`byte`) v6 @kind i2b;
  #L323bf4.  call temp:= `put`(v0, v6) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L323bfa.  v6:= 0I;
  #L323bfc.  if v1 >= v3 then goto L323c12;
  #L323c00.  if v7 == 0 then goto L323c08;
  #L323c04.  v1:= v1 ^| 128;
  #L323c08.  v1:= (`byte`) v1 @kind i2b;
  #L323c0a.  call temp:= `put`(v0, v1) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L323c10.  goto L323c50;
  #L323c12.  if v1 > v2 then goto L323c30;
  #L323c16.  if v7 == 0 then goto L323c1e;
  #L323c1a.  v3:= 254I;
  #L323c1e.  v2:= (`byte`) v3 @kind i2b;
  #L323c20.  call temp:= `put`(v0, v2) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L323c26.  v1:= (`short`) v1 @kind i2s;
  #L323c28.  call temp:= `putShort`(v0, v1) @signature `Ljava/nio/ByteBuffer;.putShort:(S)Ljava/nio/ByteBuffer;` @kind virtual;
  #L323c2e.  goto L323c50;
  #L323c30.  v2:= 127I;
  #L323c34.  if v7 == 0 then goto L323c3c;
  #L323c38.  v2:= 255I;
  #L323c3c.  v2:= (`byte`) v2 @kind i2b;
  #L323c3e.  call temp:= `put`(v0, v2) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L323c44.  call temp:= `putInt`(v0, v6) @signature `Ljava/nio/ByteBuffer;.putInt:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L323c4a.  call temp:= `putInt`(v0, v1) @signature `Ljava/nio/ByteBuffer;.putInt:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L323c50.  if v7 == 0 then goto L323c84;
  #L323c54.  call temp:= `c`(v5) @signature `Lg7/i;.c:()[B` @kind direct;
  #L323c5a.  v7:= temp @kind object;
  #L323c5c.  call temp:= `put`(v0, v7) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L323c62.  v1:= length @variable v8;
  #L323c64.  if v6 >= v1 then goto L323c84;
  #L323c68.  v1:= v8[v6] @kind byte;
  #L323c6c.  v2:= v6 %% 4;
  #L323c70.  v2:= v7[v2] @kind byte;
  #L323c74.  v1:= v1 ^~ v2 @kind int;
  #L323c76.  v1:= (`byte`) v1 @kind i2b;
  #L323c78.  call temp:= `put`(v0, v1) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L323c7e.  v6:= v6 + 1;
  #L323c82.  goto L323c62;
  #L323c84.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L323c8a.  return v0 @kind object;
}
procedure `byte`[] `c`(`g7.i` v2 @kind this) @signature `Lg7/i;.c:()[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L323b7c.  v0:= 4I;
  #L323b7e.  v0:= new `byte`[v0];
  #L323b82.  v1:= v2.`g7.i.b` @type ^`java.util.Random` @kind object;
  #L323b86.  call `nextBytes`(v1, v0) @signature `Ljava/util/Random;.nextBytes:([B)V` @kind virtual;
  #L323b8c.  return v0 @kind object;
}
procedure `void` `e`(`g7.i` v1 @kind this, `g7.e` v2 @kind object) @signature `Lg7/i;.e:(Lg7/e;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L323d54.  v0:= v1.`g7.i.e` @type ^`g7.c` @kind object;
  #L323d58.  call `k`(v0, v2) @signature `Lg7/c;.k:(Lg7/e;)V` @kind virtual;
  #L323d5e.  return @kind void;
}
procedure `void` `f`(`g7.i` v3 @kind this) @signature `Lg7/i;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L323d70.  v0:= v3.`g7.i.c` @type ^`boolean` @kind boolean;
  #L323d74.  if v0 != 0 then goto L323d8c;
  #L323d78.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L323d7e.  v0:= temp;
  #L323d80.  if v0 != 0 then goto L323d8c;
  #L323d84.  call `j`(v3) @signature `Lg7/i;.j:()V` @kind direct;
  #L323d8a.  goto L323d70;
  #L323d8c.  v0:= 0I;
  #L323d8e.  v1:= v3.`g7.i.a` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L323d92.  call temp:= `size`(v1) @signature `Ljava/util/concurrent/BlockingQueue;.size:()I` @kind interface;
  #L323d98.  v1:= temp;
  #L323d9a.  if v0 >= v1 then goto L323dc0;
  #L323d9e.  call `j`(v3) @signature `Lg7/i;.j:()V` @kind direct;
  #L323da4.  v0:= v0 + 1;
  #L323da8.  goto L323d8e;
  #L323daa.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L323dac.  v1:= new `g7.e`;
  #L323db0.  v2:= "IO Exception" @kind object;
  #L323db4.  call `<init>`(v1, v2, v0) @signature `Lg7/e;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L323dba.  call `e`(v3, v1) @signature `Lg7/i;.e:(Lg7/e;)V` @kind direct;
  #L323dc0.  return @kind void;
  catch `java.io.IOException` @[L323d70..L323da4] goto L323daa;
  catch `java.lang.InterruptedException` @[L323d70..L323da4] goto L323dc0;
}
procedure `void` `j`(`g7.i` v2 @kind this) @signature `Lg7/i;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L323e8c.  v0:= v2.`g7.i.a` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L323e90.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L323e96.  v0:= temp @kind object;
  #L323e98.  v0:= (`java.nio.ByteBuffer`) v0 @kind object;
  #L323e9c.  v1:= v2.`g7.i.f` @type ^`java.nio.channels.WritableByteChannel` @kind object;
  #L323ea0.  call temp:= `write`(v1, v0) @signature `Ljava/nio/channels/WritableByteChannel;.write:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L323ea6.  return @kind void;
}
procedure `java.lang.Thread` `d`(`g7.i` v1 @kind this) @signature `Lg7/i;.d:()Ljava/lang/Thread;` @AccessFlag  {
    temp;
    v0;

  #L323ba0.  v0:= v1.`g7.i.g` @type ^`java.lang.Thread` @kind object;
  #L323ba4.  return v0 @kind object;
}
procedure `void` `g`(`g7.i` v1 @kind this, `byte` v2 , `boolean` v3 , `byte`[] v4 @kind object) @signature `Lg7/i;.g:(BZ[B)V` @AccessFlag  {
    temp;
    v0;

  #L323de4.  @monitorenter v1
  #L323de6.  call temp:= `b`(v1, v2, v3, v4) @signature `Lg7/i;.b:(BZ[B)Ljava/nio/ByteBuffer;` @kind direct;
  #L323dec.  v3:= temp @kind object;
  #L323dee.  v4:= v1.`g7.i.c` @type ^`boolean` @kind boolean;
  #L323df2.  v0:= 8I;
  #L323df6.  if v4 == 0 then goto L323e18;
  #L323dfa.  v4:= v1.`g7.i.d` @type ^`boolean` @kind boolean;
  #L323dfe.  if v4 != 0 then goto L323e08;
  #L323e02.  if v2 != v0 then goto L323e08;
  #L323e06.  goto L323e18;
  #L323e08.  v2:= new `g7.e`;
  #L323e0c.  v3:= "Shouldn't be sending" @kind object;
  #L323e10.  call `<init>`(v2, v3) @signature `Lg7/e;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L323e16.  throw v2;
  #L323e18.  if v2 != v0 then goto L323e22;
  #L323e1c.  v2:= 1I;
  #L323e1e.  v1.`g7.i.d` @type ^`boolean` := v2 @kind boolean;
  #L323e22.  v2:= v1.`g7.i.a` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L323e26.  call temp:= `add`(v2, v3) @signature `Ljava/util/concurrent/BlockingQueue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L323e2c.  @monitorexit v1
  #L323e2e.  return @kind void;
  #L323e30.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L323e32.  @monitorexit v1
  #L323e34.  throw v2;
  catch `java.lang.Throwable` @[L323de6..L323e2c] goto L323e30;
}
procedure `void` `h`(`g7.i` v0 @kind this, `java.io.OutputStream` v1 @kind object) @signature `Lg7/i;.h:(Ljava/io/OutputStream;)V` @AccessFlag  {
    temp;

  #L323e54.  call temp:= `newChannel`(v1) @signature `Ljava/nio/channels/Channels;.newChannel:(Ljava/io/OutputStream;)Ljava/nio/channels/WritableByteChannel;` @kind static;
  #L323e5a.  v1:= temp @kind object;
  #L323e5c.  v0.`g7.i.f` @type ^`java.nio.channels.WritableByteChannel` := v1 @kind object;
  #L323e60.  return @kind void;
}
procedure `void` `i`(`g7.i` v1 @kind this) @signature `Lg7/i;.i:()V` @AccessFlag  {
    temp;
    v0;

  #L323e74.  v0:= 1I;
  #L323e76.  v1.`g7.i.c` @type ^`boolean` := v0 @kind boolean;
  #L323e7a.  return @kind void;
}
