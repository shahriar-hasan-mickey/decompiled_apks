record `n.a` @kind class @AccessFlag PUBLIC extends `n.b` @kind class {
  `java.util.HashMap` `n.a.s` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n.a` v1 @kind this) @signature `Ln/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ec72c.  call `<init>`(v1) @signature `Ln/b;.<init>:()V` @kind direct;
  #L3ec732.  v0:= new `java.util.HashMap`;
  #L3ec736.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3ec73c.  v1.`n.a.s` @type ^`java.util.HashMap` := v0 @kind object;
  #L3ec740.  return @kind void;
}
procedure `boolean` `contains`(`n.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ec654.  v0:= v1.`n.a.s` @type ^`java.util.HashMap` @kind object;
  #L3ec658.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ec65e.  v2:= temp;
  #L3ec660.  return v2;
}
procedure `n.b$c` `f`(`n.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/a;.f:(Ljava/lang/Object;)Ln/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ec708.  v0:= v1.`n.a.s` @type ^`java.util.HashMap` @kind object;
  #L3ec70c.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ec712.  v2:= temp @kind object;
  #L3ec714.  v2:= (`n.b$c`) v2 @kind object;
  #L3ec718.  return v2 @kind object;
}
procedure `java.lang.Object` `p`(`n.a` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Ln/a;.p:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ec674.  call temp:= `f`(v1, v2) @signature `Ln/a;.f:(Ljava/lang/Object;)Ln/b$c;` @kind virtual;
  #L3ec67a.  v0:= temp @kind object;
  #L3ec67c.  if v0 == 0 then goto L3ec686;
  #L3ec680.  v2:= v0.`n.b$c.p` @type ^`java.lang.Object` @kind object;
  #L3ec684.  return v2 @kind object;
  #L3ec686.  v0:= v1.`n.a.s` @type ^`java.util.HashMap` @kind object;
  #L3ec68a.  call temp:= `n`(v1, v2, v3) @signature `Ln/b;.n:(Ljava/lang/Object;Ljava/lang/Object;)Ln/b$c;` @kind virtual;
  #L3ec690.  v3:= temp @kind object;
  #L3ec692.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ec698.  v2:= 0I;
  #L3ec69a.  return v2 @kind object;
}
procedure `java.lang.Object` `u`(`n.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Ln/a;.u:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ec6ac.  call temp:= `u`(v2, v3) @signature `Ln/b;.u:(Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L3ec6b2.  v0:= temp @kind object;
  #L3ec6b4.  v1:= v2.`n.a.s` @type ^`java.util.HashMap` @kind object;
  #L3ec6b8.  call temp:= `remove`(v1, v3) @signature `Ljava/util/HashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ec6be.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `y`(`n.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/a;.y:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ec6d0.  call temp:= `contains`(v1, v2) @signature `Ln/a;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ec6d6.  v0:= temp;
  #L3ec6d8.  if v0 == 0 then goto L3ec6f2;
  #L3ec6dc.  v0:= v1.`n.a.s` @type ^`java.util.HashMap` @kind object;
  #L3ec6e0.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ec6e6.  v2:= temp @kind object;
  #L3ec6e8.  v2:= (`n.b$c`) v2 @kind object;
  #L3ec6ec.  v2:= v2.`n.b$c.r` @type ^`n.b$c` @kind object;
  #L3ec6f0.  return v2 @kind object;
  #L3ec6f2.  v2:= 0I;
  #L3ec6f4.  return v2 @kind object;
}
