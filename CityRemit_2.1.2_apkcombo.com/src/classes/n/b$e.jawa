record `n.b$e` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface, `n.b$f` @kind interface {
  `n.b$c` `n.b$e.o` @AccessFlag ;
  `n.b$c` `n.b$e.p` @AccessFlag ;
}
procedure `void` `<init>`(`n.b$e` v0 @kind this, `n.b$c` v1 @kind object, `n.b$c` v2 @kind object) @signature `Ln/b$e;.<init>:(Ln/b$c;Ln/b$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ecaa4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ecaaa.  v0.`n.b$e.o` @type ^`n.b$c` := v2 @kind object;
  #L3ecaae.  v0.`n.b$e.p` @type ^`n.b$c` := v1 @kind object;
  #L3ecab2.  return @kind void;
}
procedure `n.b$c` `g`(`n.b$e` v2 @kind this) @signature `Ln/b$e;.g:()Ln/b$c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3eca74.  v0:= v2.`n.b$e.p` @type ^`n.b$c` @kind object;
  #L3eca78.  v1:= v2.`n.b$e.o` @type ^`n.b$c` @kind object;
  #L3eca7c.  if v0 == v1 then goto L3eca90;
  #L3eca80.  if v1 != 0 then goto L3eca86;
  #L3eca84.  goto L3eca90;
  #L3eca86.  call temp:= `e`(v2, v0) @signature `Ln/b$e;.e:(Ln/b$c;)Ln/b$c;` @kind virtual;
  #L3eca8c.  v0:= temp @kind object;
  #L3eca8e.  return v0 @kind object;
  #L3eca90.  v0:= 0I;
  #L3eca92.  return v0 @kind object;
}
procedure `void` `a`(`n.b$e` v1 @kind this, `n.b$c` v2 @kind object) @signature `Ln/b$e;.a:(Ln/b$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecac4.  v0:= v1.`n.b$e.o` @type ^`n.b$c` @kind object;
  #L3ecac8.  if v0 != v2 then goto L3ecade;
  #L3ecacc.  v0:= v1.`n.b$e.p` @type ^`n.b$c` @kind object;
  #L3ecad0.  if v2 != v0 then goto L3ecade;
  #L3ecad4.  v0:= 0I;
  #L3ecad6.  v1.`n.b$e.p` @type ^`n.b$c` := v0 @kind object;
  #L3ecada.  v1.`n.b$e.o` @type ^`n.b$c` := v0 @kind object;
  #L3ecade.  v0:= v1.`n.b$e.o` @type ^`n.b$c` @kind object;
  #L3ecae2.  if v0 != v2 then goto L3ecaf2;
  #L3ecae6.  call temp:= `d`(v1, v0) @signature `Ln/b$e;.d:(Ln/b$c;)Ln/b$c;` @kind virtual;
  #L3ecaec.  v0:= temp @kind object;
  #L3ecaee.  v1.`n.b$e.o` @type ^`n.b$c` := v0 @kind object;
  #L3ecaf2.  v0:= v1.`n.b$e.p` @type ^`n.b$c` @kind object;
  #L3ecaf6.  if v0 != v2 then goto L3ecb06;
  #L3ecafa.  call temp:= `g`(v1) @signature `Ln/b$e;.g:()Ln/b$c;` @kind direct;
  #L3ecb00.  v2:= temp @kind object;
  #L3ecb02.  v1.`n.b$e.p` @type ^`n.b$c` := v2 @kind object;
  #L3ecb06.  return @kind void;
}
procedure `n.b$c` `d`(`n.b$c` v0 @kind object) @signature `Ln/b$e;.d:(Ln/b$c;)Ln/b$c;` @AccessFlag ABSTRACT {

  # return;
}
procedure `n.b$c` `e`(`n.b$c` v0 @kind object) @signature `Ln/b$e;.e:(Ln/b$c;)Ln/b$c;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Map$Entry` `f`(`n.b$e` v2 @kind this) @signature `Ln/b$e;.f:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eca50.  v0:= v2.`n.b$e.p` @type ^`n.b$c` @kind object;
  #L3eca54.  call temp:= `g`(v2) @signature `Ln/b$e;.g:()Ln/b$c;` @kind direct;
  #L3eca5a.  v1:= temp @kind object;
  #L3eca5c.  v2.`n.b$e.p` @type ^`n.b$c` := v1 @kind object;
  #L3eca60.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`n.b$e` v1 @kind this) @signature `Ln/b$e;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eca14.  v0:= v1.`n.b$e.p` @type ^`n.b$c` @kind object;
  #L3eca18.  if v0 == 0 then goto L3eca20;
  #L3eca1c.  v0:= 1I;
  #L3eca1e.  goto L3eca22;
  #L3eca20.  v0:= 0I;
  #L3eca22.  return v0;
}
procedure `java.lang.Object` `next`(`n.b$e` v1 @kind this) @signature `Ln/b$e;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3eca34.  call temp:= `f`(v1) @signature `Ln/b$e;.f:()Ljava/util/Map$Entry;` @kind virtual;
  #L3eca3a.  v0:= temp @kind object;
  #L3eca3c.  return v0 @kind object;
}
