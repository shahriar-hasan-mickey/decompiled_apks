record `n.b$d` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface, `n.b$f` @kind interface {
  `n.b$c` `n.b$d.o` @AccessFlag PRIVATE;
  `boolean` `n.b$d.p` @AccessFlag PRIVATE;
  `n.b` `n.b$d.q` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`n.b$d` v0 @kind this, `n.b` v1 @kind object) @signature `Ln/b$d;.<init>:(Ln/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ec9c0.  v0.`n.b$d.q` @type ^`n.b` := v1 @kind object;
  #L3ec9c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ec9ca.  v1:= 1I;
  #L3ec9cc.  v0.`n.b$d.p` @type ^`boolean` := v1 @kind boolean;
  #L3ec9d0.  return @kind void;
}
procedure `void` `a`(`n.b$d` v1 @kind this, `n.b$c` v2 @kind object) @signature `Ln/b$d;.a:(Ln/b$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ec9e4.  v0:= v1.`n.b$d.o` @type ^`n.b$c` @kind object;
  #L3ec9e8.  if v2 != v0 then goto L3eca02;
  #L3ec9ec.  v2:= v0.`n.b$c.r` @type ^`n.b$c` @kind object;
  #L3ec9f0.  v1.`n.b$d.o` @type ^`n.b$c` := v2 @kind object;
  #L3ec9f4.  if v2 != 0 then goto L3ec9fc;
  #L3ec9f8.  v2:= 1I;
  #L3ec9fa.  goto L3ec9fe;
  #L3ec9fc.  v2:= 0I;
  #L3ec9fe.  v1.`n.b$d.p` @type ^`boolean` := v2 @kind boolean;
  #L3eca02.  return @kind void;
}
procedure `java.util.Map$Entry` `d`(`n.b$d` v1 @kind this) @signature `Ln/b$d;.d:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ec97c.  v0:= v1.`n.b$d.p` @type ^`boolean` @kind boolean;
  #L3ec980.  if v0 == 0 then goto L3ec998;
  #L3ec984.  v0:= 0I;
  #L3ec986.  v1.`n.b$d.p` @type ^`boolean` := v0 @kind boolean;
  #L3ec98a.  v0:= v1.`n.b$d.q` @type ^`n.b` @kind object;
  #L3ec98e.  v0:= v0.`n.b.o` @type ^`n.b$c` @kind object;
  #L3ec992.  v1.`n.b$d.o` @type ^`n.b$c` := v0 @kind object;
  #L3ec996.  goto L3ec9aa;
  #L3ec998.  v0:= v1.`n.b$d.o` @type ^`n.b$c` @kind object;
  #L3ec99c.  if v0 == 0 then goto L3ec9a6;
  #L3ec9a0.  v0:= v0.`n.b$c.q` @type ^`n.b$c` @kind object;
  #L3ec9a4.  goto L3ec992;
  #L3ec9a6.  v0:= 0I;
  #L3ec9a8.  goto L3ec992;
  #L3ec9aa.  v0:= v1.`n.b$d.o` @type ^`n.b$c` @kind object;
  #L3ec9ae.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`n.b$d` v3 @kind this) @signature `Ln/b$d;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ec91c.  v0:= v3.`n.b$d.p` @type ^`boolean` @kind boolean;
  #L3ec920.  v1:= 1I;
  #L3ec922.  v2:= 0I;
  #L3ec924.  if v0 == 0 then goto L3ec93a;
  #L3ec928.  v0:= v3.`n.b$d.q` @type ^`n.b` @kind object;
  #L3ec92c.  v0:= v0.`n.b.o` @type ^`n.b$c` @kind object;
  #L3ec930.  if v0 == 0 then goto L3ec936;
  #L3ec934.  goto L3ec938;
  #L3ec936.  v1:= 0I;
  #L3ec938.  return v1;
  #L3ec93a.  v0:= v3.`n.b$d.o` @type ^`n.b$c` @kind object;
  #L3ec93e.  if v0 == 0 then goto L3ec94c;
  #L3ec942.  v0:= v0.`n.b$c.q` @type ^`n.b$c` @kind object;
  #L3ec946.  if v0 == 0 then goto L3ec94c;
  #L3ec94a.  goto L3ec94e;
  #L3ec94c.  v1:= 0I;
  #L3ec94e.  return v1;
}
procedure `java.lang.Object` `next`(`n.b$d` v1 @kind this) @signature `Ln/b$d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3ec960.  call temp:= `d`(v1) @signature `Ln/b$d;.d:()Ljava/util/Map$Entry;` @kind virtual;
  #L3ec966.  v0:= temp @kind object;
  #L3ec968.  return v0 @kind object;
}
