record `n.b` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface {
  `n.b$c` `n.b.o` @AccessFlag ;
  `n.b$c` `n.b.p` @AccessFlag PRIVATE;
  `java.util.WeakHashMap` `n.b.q` @AccessFlag PRIVATE;
  `int` `n.b.r` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n.b` v1 @kind this) @signature `Ln/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3eceb4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3eceba.  v0:= new `java.util.WeakHashMap`;
  #L3ecebe.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L3ecec4.  v1.`n.b.q` @type ^`java.util.WeakHashMap` := v0 @kind object;
  #L3ecec8.  v0:= 0I;
  #L3ececa.  v1.`n.b.r` @type ^`int` := v0;
  #L3ecece.  return @kind void;
}
procedure `java.util.Map$Entry` `b`(`n.b` v1 @kind this) @signature `Ln/b;.b:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecde0.  v0:= v1.`n.b.o` @type ^`n.b$c` @kind object;
  #L3ecde4.  return v0 @kind object;
}
procedure `java.util.Iterator` `descendingIterator`(`n.b` v3 @kind this) @signature `Ln/b;.descendingIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ecd78.  v0:= new `n.b$b`;
  #L3ecd7c.  v1:= v3.`n.b.p` @type ^`n.b$c` @kind object;
  #L3ecd80.  v2:= v3.`n.b.o` @type ^`n.b$c` @kind object;
  #L3ecd84.  call `<init>`(v0, v1, v2) @signature `Ln/b$b;.<init>:(Ln/b$c;Ln/b$c;)V` @kind direct;
  #L3ecd8a.  v1:= v3.`n.b.q` @type ^`java.util.WeakHashMap` @kind object;
  #L3ecd8e.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L3ecd92.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ecd98.  return v0 @kind object;
}
procedure `boolean` `equals`(`n.b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Ln/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ecb18.  v0:= 1I;
  #L3ecb1a.  if v6 != v5 then goto L3ecb20;
  #L3ecb1e.  return v0;
  #L3ecb20.  v1:= instanceof @variable v6 @type ^`n.b` @kind boolean;
  #L3ecb24.  v2:= 0I;
  #L3ecb26.  if v1 != 0 then goto L3ecb2c;
  #L3ecb2a.  return v2;
  #L3ecb2c.  v6:= (`n.b`) v6 @kind object;
  #L3ecb30.  call temp:= `size`(v5) @signature `Ln/b;.size:()I` @kind virtual;
  #L3ecb36.  v1:= temp;
  #L3ecb38.  call temp:= `size`(v6) @signature `Ln/b;.size:()I` @kind virtual;
  #L3ecb3e.  v3:= temp;
  #L3ecb40.  if v1 == v3 then goto L3ecb46;
  #L3ecb44.  return v2;
  #L3ecb46.  call temp:= `iterator`(v5) @signature `Ln/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3ecb4c.  v1:= temp @kind object;
  #L3ecb4e.  call temp:= `iterator`(v6) @signature `Ln/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3ecb54.  v6:= temp @kind object;
  #L3ecb56.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ecb5c.  v3:= temp;
  #L3ecb5e.  if v3 == 0 then goto L3ecb9c;
  #L3ecb62.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ecb68.  v3:= temp;
  #L3ecb6a.  if v3 == 0 then goto L3ecb9c;
  #L3ecb6e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ecb74.  v3:= temp @kind object;
  #L3ecb76.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L3ecb7a.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ecb80.  v4:= temp @kind object;
  #L3ecb82.  if v3 != 0 then goto L3ecb8a;
  #L3ecb86.  if v4 != 0 then goto L3ecb9a;
  #L3ecb8a.  if v3 == 0 then goto L3ecb56;
  #L3ecb8e.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Map$Entry;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3ecb94.  v3:= temp;
  #L3ecb96.  if v3 != 0 then goto L3ecb56;
  #L3ecb9a.  return v2;
  #L3ecb9c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ecba2.  v1:= temp;
  #L3ecba4.  if v1 != 0 then goto L3ecbb6;
  #L3ecba8.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ecbae.  v6:= temp;
  #L3ecbb0.  if v6 != 0 then goto L3ecbb6;
  #L3ecbb4.  goto L3ecbb8;
  #L3ecbb6.  v0:= 0I;
  #L3ecbb8.  return v0;
}
procedure `n.b$c` `f`(`n.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Ln/b;.f:(Ljava/lang/Object;)Ln/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3ece10.  v0:= v2.`n.b.o` @type ^`n.b$c` @kind object;
  #L3ece14.  if v0 == 0 then goto L3ece30;
  #L3ece18.  v1:= v0.`n.b$c.o` @type ^`java.lang.Object` @kind object;
  #L3ece1c.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ece22.  v1:= temp;
  #L3ece24.  if v1 == 0 then goto L3ece2a;
  #L3ece28.  goto L3ece30;
  #L3ece2a.  v0:= v0.`n.b$c.q` @type ^`n.b$c` @kind object;
  #L3ece2e.  goto L3ece14;
  #L3ece30.  return v0 @kind object;
}
procedure `n.b$d` `h`(`n.b` v3 @kind this) @signature `Ln/b;.h:()Ln/b$d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ece88.  v0:= new `n.b$d`;
  #L3ece8c.  call `<init>`(v0, v3) @signature `Ln/b$d;.<init>:(Ln/b;)V` @kind direct;
  #L3ece92.  v1:= v3.`n.b.q` @type ^`java.util.WeakHashMap` @kind object;
  #L3ece96.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L3ece9a.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ecea0.  return v0 @kind object;
}
procedure `int` `hashCode`(`n.b` v3 @kind this) @signature `Ln/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ecbcc.  call temp:= `iterator`(v3) @signature `Ln/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3ecbd2.  v0:= temp @kind object;
  #L3ecbd4.  v1:= 0I;
  #L3ecbd6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ecbdc.  v2:= temp;
  #L3ecbde.  if v2 == 0 then goto L3ecbfa;
  #L3ecbe2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ecbe8.  v2:= temp @kind object;
  #L3ecbea.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L3ecbee.  call temp:= `hashCode`(v2) @signature `Ljava/util/Map$Entry;.hashCode:()I` @kind interface;
  #L3ecbf4.  v2:= temp;
  #L3ecbf6.  v1:= v1 + v2 @kind int;
  #L3ecbf8.  goto L3ecbd6;
  #L3ecbfa.  return v1;
}
procedure `java.util.Iterator` `iterator`(`n.b` v3 @kind this) @signature `Ln/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ecdac.  v0:= new `n.b$a`;
  #L3ecdb0.  v1:= v3.`n.b.o` @type ^`n.b$c` @kind object;
  #L3ecdb4.  v2:= v3.`n.b.p` @type ^`n.b$c` @kind object;
  #L3ecdb8.  call `<init>`(v0, v1, v2) @signature `Ln/b$a;.<init>:(Ln/b$c;Ln/b$c;)V` @kind direct;
  #L3ecdbe.  v1:= v3.`n.b.q` @type ^`java.util.WeakHashMap` @kind object;
  #L3ecdc2.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L3ecdc6.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ecdcc.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `l`(`n.b` v1 @kind this) @signature `Ln/b;.l:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecdf8.  v0:= v1.`n.b.p` @type ^`n.b$c` @kind object;
  #L3ecdfc.  return v0 @kind object;
}
procedure `n.b$c` `n`(`n.b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Ln/b;.n:(Ljava/lang/Object;Ljava/lang/Object;)Ln/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ece44.  v0:= new `n.b$c`;
  #L3ece48.  call `<init>`(v0, v2, v3) @signature `Ln/b$c;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L3ece4e.  v2:= v1.`n.b.r` @type ^`int`;
  #L3ece52.  v2:= v2 + 1;
  #L3ece56.  v1.`n.b.r` @type ^`int` := v2;
  #L3ece5a.  v2:= v1.`n.b.p` @type ^`n.b$c` @kind object;
  #L3ece5e.  if v2 != 0 then goto L3ece6c;
  #L3ece62.  v1.`n.b.o` @type ^`n.b$c` := v0 @kind object;
  #L3ece66.  v1.`n.b.p` @type ^`n.b$c` := v0 @kind object;
  #L3ece6a.  return v0 @kind object;
  #L3ece6c.  v2.`n.b$c.q` @type ^`n.b$c` := v0 @kind object;
  #L3ece70.  v0.`n.b$c.r` @type ^`n.b$c` := v2 @kind object;
  #L3ece74.  goto L3ece66;
}
procedure `java.lang.Object` `p`(`n.b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Ln/b;.p:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecc24.  call temp:= `f`(v1, v2) @signature `Ln/b;.f:(Ljava/lang/Object;)Ln/b$c;` @kind virtual;
  #L3ecc2a.  v0:= temp @kind object;
  #L3ecc2c.  if v0 == 0 then goto L3ecc36;
  #L3ecc30.  v2:= v0.`n.b$c.p` @type ^`java.lang.Object` @kind object;
  #L3ecc34.  return v2 @kind object;
  #L3ecc36.  call temp:= `n`(v1, v2, v3) @signature `Ln/b;.n:(Ljava/lang/Object;Ljava/lang/Object;)Ln/b$c;` @kind virtual;
  #L3ecc3c.  v2:= 0I;
  #L3ecc3e.  return v2 @kind object;
}
procedure `int` `size`(`n.b` v1 @kind this) @signature `Ln/b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecc0c.  v0:= v1.`n.b.r` @type ^`int`;
  #L3ecc10.  return v0;
}
procedure `java.lang.String` `toString`(`n.b` v3 @kind this) @signature `Ln/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eccf8.  v0:= new `java.lang.StringBuilder`;
  #L3eccfc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ecd02.  v1:= "[" @kind object;
  #L3ecd06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ecd0c.  call temp:= `iterator`(v3) @signature `Ln/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3ecd12.  v1:= temp @kind object;
  #L3ecd14.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ecd1a.  v2:= temp;
  #L3ecd1c.  if v2 == 0 then goto L3ecd52;
  #L3ecd20.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ecd26.  v2:= temp @kind object;
  #L3ecd28.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L3ecd2c.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ecd32.  v2:= temp @kind object;
  #L3ecd34.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ecd3a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ecd40.  v2:= temp;
  #L3ecd42.  if v2 == 0 then goto L3ecd14;
  #L3ecd46.  v2:= ", " @kind object;
  #L3ecd4a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ecd50.  goto L3ecd14;
  #L3ecd52.  v1:= "]" @kind object;
  #L3ecd56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ecd5c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ecd62.  v0:= temp @kind object;
  #L3ecd64.  return v0 @kind object;
}
procedure `java.lang.Object` `u`(`n.b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Ln/b;.u:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ecc50.  call temp:= `f`(v3, v4) @signature `Ln/b;.f:(Ljava/lang/Object;)Ln/b$c;` @kind virtual;
  #L3ecc56.  v4:= temp @kind object;
  #L3ecc58.  v0:= 0I;
  #L3ecc5a.  if v4 != 0 then goto L3ecc60;
  #L3ecc5e.  return v0 @kind object;
  #L3ecc60.  v1:= v3.`n.b.r` @type ^`int`;
  #L3ecc64.  v1:= v1 + -1;
  #L3ecc68.  v3.`n.b.r` @type ^`int` := v1;
  #L3ecc6c.  v1:= v3.`n.b.q` @type ^`java.util.WeakHashMap` @kind object;
  #L3ecc70.  call temp:= `isEmpty`(v1) @signature `Ljava/util/WeakHashMap;.isEmpty:()Z` @kind virtual;
  #L3ecc76.  v1:= temp;
  #L3ecc78.  if v1 != 0 then goto L3eccb0;
  #L3ecc7c.  v1:= v3.`n.b.q` @type ^`java.util.WeakHashMap` @kind object;
  #L3ecc80.  call temp:= `keySet`(v1) @signature `Ljava/util/WeakHashMap;.keySet:()Ljava/util/Set;` @kind virtual;
  #L3ecc86.  v1:= temp @kind object;
  #L3ecc88.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ecc8e.  v1:= temp @kind object;
  #L3ecc90.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ecc96.  v2:= temp;
  #L3ecc98.  if v2 == 0 then goto L3eccb0;
  #L3ecc9c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ecca2.  v2:= temp @kind object;
  #L3ecca4.  v2:= (`n.b$f`) v2 @kind object;
  #L3ecca8.  call `a`(v2, v4) @signature `Ln/b$f;.a:(Ln/b$c;)V` @kind interface;
  #L3eccae.  goto L3ecc90;
  #L3eccb0.  v1:= v4.`n.b$c.r` @type ^`n.b$c` @kind object;
  #L3eccb4.  v2:= v4.`n.b$c.q` @type ^`n.b$c` @kind object;
  #L3eccb8.  if v1 == 0 then goto L3eccc2;
  #L3eccbc.  v1.`n.b$c.q` @type ^`n.b$c` := v2 @kind object;
  #L3eccc0.  goto L3eccc6;
  #L3eccc2.  v3.`n.b.o` @type ^`n.b$c` := v2 @kind object;
  #L3eccc6.  v2:= v4.`n.b$c.q` @type ^`n.b$c` @kind object;
  #L3eccca.  if v2 == 0 then goto L3eccd4;
  #L3eccce.  v2.`n.b$c.r` @type ^`n.b$c` := v1 @kind object;
  #L3eccd2.  goto L3eccd8;
  #L3eccd4.  v3.`n.b.p` @type ^`n.b$c` := v1 @kind object;
  #L3eccd8.  v4.`n.b$c.q` @type ^`n.b$c` := v0 @kind object;
  #L3eccdc.  v4.`n.b$c.r` @type ^`n.b$c` := v0 @kind object;
  #L3ecce0.  v4:= v4.`n.b$c.p` @type ^`java.lang.Object` @kind object;
  #L3ecce4.  return v4 @kind object;
}
