record `p5.p$c` @kind class @AccessFlag  extends `java.lang.Comparable` @kind interface {
  `byte`[] `p5.p$c.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`p5.p$c` v1 @kind this, `byte`[] v2 @kind object) @signature `Lp5/p$c;.<init>:([B)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4093f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4093fa.  v0:= length @variable v2;
  #L4093fc.  call temp:= `copyOf`(v2, v0) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L409402.  v2:= temp @kind object;
  #L409404.  v1.`p5.p$c.o` @type ^`byte`[] := v2 @kind object;
  #L409408.  return @kind void;
}
procedure `void` `<init>`(`p5.p$c` v0 @kind this, `byte`[] v1 @kind object, `p5.p$a` v2 @kind object) @signature `Lp5/p$c;.<init>:([BLp5/p$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L40941c.  call `<init>`(v0, v1) @signature `Lp5/p$c;.<init>:([B)V` @kind direct;
  #L409422.  return @kind void;
}
procedure `int` `c`(`p5.p$c` v6 @kind this, `p5.p$c` v7 @kind object) @signature `Lp5/p$c;.c:(Lp5/p$c;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40935c.  v0:= v6.`p5.p$c.o` @type ^`byte`[] @kind object;
  #L409360.  v1:= length @variable v0;
  #L409362.  v2:= v7.`p5.p$c.o` @type ^`byte`[] @kind object;
  #L409366.  v3:= length @variable v2;
  #L409368.  if v1 == v3 then goto L409374;
  #L40936c.  v7:= length @variable v0;
  #L40936e.  v0:= length @variable v2;
  #L409370.  v7:= v7 - v0 @kind int;
  #L409372.  return v7;
  #L409374.  v0:= 0I;
  #L409376.  v1:= 0I;
  #L409378.  v2:= v6.`p5.p$c.o` @type ^`byte`[] @kind object;
  #L40937c.  v3:= length @variable v2;
  #L40937e.  if v1 >= v3 then goto L4093a2;
  #L409382.  v3:= v2[v1] @kind byte;
  #L409386.  v4:= v7.`p5.p$c.o` @type ^`byte`[] @kind object;
  #L40938a.  v5:= v4[v1] @kind byte;
  #L40938e.  if v3 == v5 then goto L40939c;
  #L409392.  v7:= v2[v1] @kind byte;
  #L409396.  v0:= v4[v1] @kind byte;
  #L40939a.  goto L409370;
  #L40939c.  v1:= v1 + 1;
  #L4093a0.  goto L409378;
  #L4093a2.  return v0;
}
procedure `int` `compareTo`(`p5.p$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lp5/p$c;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L40933c.  v1:= (`p5.p$c`) v1 @kind object;
  #L409340.  call temp:= `c`(v0, v1) @signature `Lp5/p$c;.c:(Lp5/p$c;)I` @kind virtual;
  #L409346.  v1:= temp;
  #L409348.  return v1;
}
procedure `boolean` `equals`(`p5.p$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lp5/p$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L409308.  v0:= instanceof @variable v2 @type ^`p5.p$c` @kind boolean;
  #L40930c.  if v0 != 0 then goto L409314;
  #L409310.  v2:= 0I;
  #L409312.  return v2;
  #L409314.  v2:= (`p5.p$c`) v2 @kind object;
  #L409318.  v0:= v1.`p5.p$c.o` @type ^`byte`[] @kind object;
  #L40931c.  v2:= v2.`p5.p$c.o` @type ^`byte`[] @kind object;
  #L409320.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L409326.  v2:= temp;
  #L409328.  return v2;
}
procedure `int` `hashCode`(`p5.p$c` v1 @kind this) @signature `Lp5/p$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4093b4.  v0:= v1.`p5.p$c.o` @type ^`byte`[] @kind object;
  #L4093b8.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L4093be.  v0:= temp;
  #L4093c0.  return v0;
}
procedure `java.lang.String` `toString`(`p5.p$c` v1 @kind this) @signature `Lp5/p$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4093d4.  v0:= v1.`p5.p$c.o` @type ^`byte`[] @kind object;
  #L4093d8.  call temp:= `b`(v0) @signature `Lx5/o;.b:([B)Ljava/lang/String;` @kind static;
  #L4093de.  v0:= temp @kind object;
  #L4093e0.  return v0 @kind object;
}
