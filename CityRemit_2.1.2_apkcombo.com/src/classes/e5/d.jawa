record `e5.d` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.Map` `e5.d.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `e5.d.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e5.d` v2 @kind this) @signature `Le5/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2fe0b4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2fe0ba.  v0:= new `java.util.HashMap`;
  #L2fe0be.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2fe0c4.  v2.`e5.d.a` @type ^`java.util.Map` := v0 @kind object;
  #L2fe0c8.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L2fe0cc.  v1:= 0I;
  #L2fe0ce.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L2fe0d4.  v2.`e5.d.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L2fe0d8.  return @kind void;
}
procedure `void` `b`(`e5.d` v3 @kind this) @signature `Le5/d;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2fe0ec.  @monitorenter v3
  #L2fe0ee.  v0:= v3.`e5.d.a` @type ^`java.util.Map` @kind object;
  #L2fe0f2.  v1:= "assetOnlyUpdates" @kind object;
  #L2fe0f6.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L2fe0fa.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fe100.  @monitorexit v3
  #L2fe102.  return @kind void;
  #L2fe104.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fe106.  @monitorexit v3
  #L2fe108.  throw v0;
  catch `java.lang.Throwable` @[L2fe0ee..L2fe100] goto L2fe104;
}
procedure `boolean` `a`(`e5.d` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Le5/d;.a:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2fe044.  @monitorenter v1
  #L2fe046.  v2:= v1.`e5.d.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L2fe04a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L2fe050.  v2:= temp;
  #L2fe052.  if v2 != 0 then goto L2fe05c;
  #L2fe056.  call `b`(v1) @signature `Le5/d;.b:()V` @kind direct;
  #L2fe05c.  v2:= v1.`e5.d.a` @type ^`java.util.Map` @kind object;
  #L2fe060.  v0:= "assetOnlyUpdates" @kind object;
  #L2fe064.  call temp:= `get`(v2, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fe06a.  v2:= temp @kind object;
  #L2fe06c.  v0:= instanceof @variable v2 @type ^`java.lang.Boolean` @kind boolean;
  #L2fe070.  if v0 != 0 then goto L2fe07a;
  #L2fe074.  v2:= 0I;
  #L2fe076.  @monitorexit v1
  #L2fe078.  return v2;
  #L2fe07a.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L2fe07e.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2fe084.  v2:= temp;
  #L2fe086.  @monitorexit v1
  #L2fe088.  return v2;
  #L2fe08a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fe08c.  @monitorexit v1
  #L2fe08e.  throw v2;
  catch `java.lang.Throwable` @[L2fe046..L2fe070] goto L2fe08a;
  catch `java.lang.Throwable` @[L2fe07a..L2fe086] goto L2fe08a;
}
