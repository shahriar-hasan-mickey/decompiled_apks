record `jb.e` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Comparable` @kind interface {
  `int` `jb.e.o` @AccessFlag PRIVATE_FINAL;
  `int` `jb.e.p` @AccessFlag PRIVATE_FINAL;
  `int` `jb.e.q` @AccessFlag PRIVATE_FINAL;
  `int` `jb.e.r` @AccessFlag PRIVATE_FINAL;
}
global `jb.e` `@@jb.e.s` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ljb/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39b740.  v0:= new `jb.e$a`;
  #L39b744.  v1:= 0I;
  #L39b746.  call `<init>`(v0, v1) @signature `Ljb/e$a;.<init>:(Lkotlin/jvm/internal/g;)V` @kind direct;
  #L39b74c.  call temp:= `a`() @signature `Ljb/f;.a:()Ljb/e;` @kind static;
  #L39b752.  v0:= temp @kind object;
  #L39b754.  `@@jb.e.s` @type ^`jb.e` := v0 @kind object;
  #L39b758.  return @kind void;
}
procedure `void` `<init>`(`jb.e` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Ljb/e;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39b76c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39b772.  v0.`jb.e.o` @type ^`int` := v1;
  #L39b776.  v0.`jb.e.p` @type ^`int` := v2;
  #L39b77a.  v0.`jb.e.q` @type ^`int` := v3;
  #L39b77e.  call temp:= `d`(v0, v1, v2, v3) @signature `Ljb/e;.d:(III)I` @kind direct;
  #L39b784.  v1:= temp;
  #L39b786.  v0.`jb.e.r` @type ^`int` := v1;
  #L39b78a.  return @kind void;
}
procedure `int` `d`(`jb.e` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `Ljb/e;.d:(III)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L39b62c.  v0:= new `wb.c`;
  #L39b630.  v1:= 0I;
  #L39b632.  v2:= 255I;
  #L39b636.  call `<init>`(v0, v1, v2) @signature `Lwb/c;.<init>:(II)V` @kind direct;
  #L39b63c.  call temp:= `p`(v0, v4) @signature `Lwb/c;.p:(I)Z` @kind virtual;
  #L39b642.  v0:= temp;
  #L39b644.  if v0 == 0 then goto L39b676;
  #L39b648.  v0:= new `wb.c`;
  #L39b64c.  call `<init>`(v0, v1, v2) @signature `Lwb/c;.<init>:(II)V` @kind direct;
  #L39b652.  call temp:= `p`(v0, v5) @signature `Lwb/c;.p:(I)Z` @kind virtual;
  #L39b658.  v0:= temp;
  #L39b65a.  if v0 == 0 then goto L39b676;
  #L39b65e.  v0:= new `wb.c`;
  #L39b662.  call `<init>`(v0, v1, v2) @signature `Lwb/c;.<init>:(II)V` @kind direct;
  #L39b668.  call temp:= `p`(v0, v6) @signature `Lwb/c;.p:(I)Z` @kind virtual;
  #L39b66e.  v0:= temp;
  #L39b670.  if v0 == 0 then goto L39b676;
  #L39b674.  v1:= 1I;
  #L39b676.  if v1 == 0 then goto L39b688;
  #L39b67a.  v4:= v4 ^< 16;
  #L39b67e.  v5:= v5 ^< 8;
  #L39b682.  v4:= v4 + v5 @kind int;
  #L39b684.  v4:= v4 + v6 @kind int;
  #L39b686.  return v4;
  #L39b688.  v0:= new `java.lang.StringBuilder`;
  #L39b68c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39b692.  v1:= "Version components are out of range: " @kind object;
  #L39b696.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b69c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b6a2.  v4:= 46I;
  #L39b6a6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b6ac.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b6b2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b6b8.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b6be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39b6c4.  v4:= temp @kind object;
  #L39b6c6.  v5:= new `java.lang.IllegalArgumentException`;
  #L39b6ca.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L39b6d0.  v4:= temp @kind object;
  #L39b6d2.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39b6d8.  throw v5;
}
procedure `int` `c`(`jb.e` v1 @kind this, `jb.e` v2 @kind object) @signature `Ljb/e;.c:(Ljb/e;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b5ec.  v0:= "other" @kind object;
  #L39b5f0.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L39b5f6.  v0:= v1.`jb.e.r` @type ^`int`;
  #L39b5fa.  v2:= v2.`jb.e.r` @type ^`int`;
  #L39b5fe.  v0:= v0 - v2 @kind int;
  #L39b600.  return v0;
}
procedure `int` `compareTo`(`jb.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ljb/e;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L39b5cc.  v1:= (`jb.e`) v1 @kind object;
  #L39b5d0.  call temp:= `c`(v0, v1) @signature `Ljb/e;.c:(Ljb/e;)I` @kind virtual;
  #L39b5d6.  v1:= temp;
  #L39b5d8.  return v1;
}
procedure `boolean` `equals`(`jb.e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Ljb/e;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39b588.  v0:= 1I;
  #L39b58a.  if v3 != v4 then goto L39b590;
  #L39b58e.  return v0;
  #L39b590.  v1:= instanceof @variable v4 @type ^`jb.e` @kind boolean;
  #L39b594.  if v1 == 0 then goto L39b59e;
  #L39b598.  v4:= (`jb.e`) v4 @kind object;
  #L39b59c.  goto L39b5a0;
  #L39b59e.  v4:= 0I;
  #L39b5a0.  v1:= 0I;
  #L39b5a2.  if v4 != 0 then goto L39b5a8;
  #L39b5a6.  return v1;
  #L39b5a8.  v2:= v3.`jb.e.r` @type ^`int`;
  #L39b5ac.  v4:= v4.`jb.e.r` @type ^`int`;
  #L39b5b0.  if v2 != v4 then goto L39b5b6;
  #L39b5b4.  goto L39b5b8;
  #L39b5b6.  v0:= 0I;
  #L39b5b8.  return v0;
}
procedure `int` `hashCode`(`jb.e` v1 @kind this) @signature `Ljb/e;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b614.  v0:= v1.`jb.e.r` @type ^`int`;
  #L39b618.  return v0;
}
procedure `java.lang.String` `toString`(`jb.e` v3 @kind this) @signature `Ljb/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39b6ec.  v0:= new `java.lang.StringBuilder`;
  #L39b6f0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39b6f6.  v1:= v3.`jb.e.o` @type ^`int`;
  #L39b6fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b700.  v1:= 46I;
  #L39b704.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b70a.  v2:= v3.`jb.e.p` @type ^`int`;
  #L39b70e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b714.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b71a.  v1:= v3.`jb.e.q` @type ^`int`;
  #L39b71e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b724.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39b72a.  v0:= temp @kind object;
  #L39b72c.  return v0 @kind object;
}
