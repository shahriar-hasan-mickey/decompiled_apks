record `jb.o` @kind class @AccessFlag FINAL extends `jb.g` @kind interface, `java.io.Serializable` @kind interface {
  `tb.a` `jb.o.o` @AccessFlag PRIVATE;
  `java.lang.Object` `jb.o.p` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `jb.o.q` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`jb.o` v1 @kind this, `tb.a` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Ljb/o;.<init>:(Ltb/a;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39bbf8.  v0:= "initializer" @kind object;
  #L39bbfc.  call `e`(v2, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L39bc02.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39bc08.  v1.`jb.o.o` @type ^`tb.a` := v2 @kind object;
  #L39bc0c.  v2:= `@@jb.q.a` @type ^`jb.q` @kind object;
  #L39bc10.  v1.`jb.o.p` @type ^`java.lang.Object` := v2 @kind object;
  #L39bc14.  if v3 != 0 then goto L39bc1a;
  #L39bc18.  v3:= v1 @kind object;
  #L39bc1a.  v1.`jb.o.q` @type ^`java.lang.Object` := v3 @kind object;
  #L39bc1e.  return @kind void;
}
procedure `void` `<init>`(`jb.o` v0 @kind this, `tb.a` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 , `kotlin.jvm.internal.g` v4 @kind object) @signature `Ljb/o;.<init>:(Ltb/a;Ljava/lang/Object;ILkotlin/jvm/internal/g;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L39bc30.  v3:= v3 ^& 2;
  #L39bc34.  if v3 == 0 then goto L39bc3a;
  #L39bc38.  v2:= 0I;
  #L39bc3a.  call `<init>`(v0, v1, v2) @signature `Ljb/o;.<init>:(Ltb/a;Ljava/lang/Object;)V` @kind direct;
  #L39bc40.  return @kind void;
}
procedure `boolean` `a`(`jb.o` v2 @kind this) @signature `Ljb/o;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39bb40.  v0:= v2.`jb.o.p` @type ^`java.lang.Object` @kind object;
  #L39bb44.  v1:= `@@jb.q.a` @type ^`jb.q` @kind object;
  #L39bb48.  if v0 == v1 then goto L39bb50;
  #L39bb4c.  v0:= 1I;
  #L39bb4e.  goto L39bb52;
  #L39bb50.  v0:= 0I;
  #L39bb52.  return v0;
}
procedure `java.lang.Object` `getValue`(`jb.o` v3 @kind this) @signature `Ljb/o;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39bb64.  v0:= v3.`jb.o.p` @type ^`java.lang.Object` @kind object;
  #L39bb68.  v1:= `@@jb.q.a` @type ^`jb.q` @kind object;
  #L39bb6c.  if v0 == v1 then goto L39bb72;
  #L39bb70.  return v0 @kind object;
  #L39bb72.  v0:= v3.`jb.o.q` @type ^`java.lang.Object` @kind object;
  #L39bb76.  @monitorenter v0
  #L39bb78.  v2:= v3.`jb.o.p` @type ^`java.lang.Object` @kind object;
  #L39bb7c.  if v2 == v1 then goto L39bb82;
  #L39bb80.  goto L39bb9e;
  #L39bb82.  v1:= v3.`jb.o.o` @type ^`tb.a` @kind object;
  #L39bb86.  call `b`(v1) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L39bb8c.  call temp:= `invoke`(v1) @signature `Ltb/a;.invoke:()Ljava/lang/Object;` @kind interface;
  #L39bb92.  v2:= temp @kind object;
  #L39bb94.  v3.`jb.o.p` @type ^`java.lang.Object` := v2 @kind object;
  #L39bb98.  v1:= 0I;
  #L39bb9a.  v3.`jb.o.o` @type ^`tb.a` := v1 @kind object;
  #L39bb9e.  @monitorexit v0
  #L39bba0.  return v2 @kind object;
  #L39bba2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39bba4.  @monitorexit v0
  #L39bba6.  throw v1;
  catch `java.lang.Throwable` @[L39bb78..L39bb9e] goto L39bba2;
}
procedure `java.lang.String` `toString`(`jb.o` v1 @kind this) @signature `Ljb/o;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39bbc4.  call temp:= `a`(v1) @signature `Ljb/o;.a:()Z` @kind virtual;
  #L39bbca.  v0:= temp;
  #L39bbcc.  if v0 == 0 then goto L39bbe2;
  #L39bbd0.  call temp:= `getValue`(v1) @signature `Ljb/o;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L39bbd6.  v0:= temp @kind object;
  #L39bbd8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L39bbde.  v0:= temp @kind object;
  #L39bbe0.  goto L39bbe6;
  #L39bbe2.  v0:= "Lazy value not initialized yet." @kind object;
  #L39bbe6.  return v0 @kind object;
}
