record `b2.b` @kind class @AccessFlag PUBLIC_FINAL extends `a2.l` @kind interface {
  `byte`[] `b2.b.a` @AccessFlag PRIVATE_FINAL;
  `int` `b2.b.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `b2.b.c` @AccessFlag PRIVATE;
  `long` `b2.b.d` @AccessFlag PRIVATE;
  `int` `b2.b.e` @AccessFlag PRIVATE;
  `int` `b2.b.f` @AccessFlag PRIVATE;
  `boolean` `b2.b.g` @AccessFlag PRIVATE;
  `long` `b2.b.h` @AccessFlag PRIVATE;
  `int` `b2.b.i` @AccessFlag PRIVATE;
  `int` `b2.b.j` @AccessFlag PRIVATE;
  `long` `b2.b.k` @AccessFlag PRIVATE;
  `a2.n` `b2.b.l` @AccessFlag PRIVATE;
  `a2.d0` `b2.b.m` @AccessFlag PRIVATE;
  `a2.a0` `b2.b.n` @AccessFlag PRIVATE;
  `boolean` `b2.b.o` @AccessFlag PRIVATE;
}
global `int`[] `@@b2.b.p` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@b2.b.q` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@b2.b.r` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@b2.b.s` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@b2.b.t` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb2/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1e92e0.  v0:= `@@b2.a.b` @type ^`b2.a` @kind object;
  #L1e92e4.  v0:= 16I;
  #L1e92e8.  v1:= new `int`[v0];
  #L1e92ec.  goto L1e9334;
  #L1e92f2.  `@@b2.b.p` @type ^`int`[] := v1 @kind object;
  #L1e92f6.  v0:= new `int`[v0];
  #L1e92fa.  goto L1e937c;
  #L1e9300.  `@@b2.b.q` @type ^`int`[] := v0 @kind object;
  #L1e9304.  v1:= "#!AMR\n" @kind object;
  #L1e9308.  call temp:= `l0`(v1) @signature `Ls3/l0;.l0:(Ljava/lang/String;)[B` @kind static;
  #L1e930e.  v1:= temp @kind object;
  #L1e9310.  `@@b2.b.r` @type ^`byte`[] := v1 @kind object;
  #L1e9314.  v1:= "#!AMR-WB\n" @kind object;
  #L1e9318.  call temp:= `l0`(v1) @signature `Ls3/l0;.l0:(Ljava/lang/String;)[B` @kind static;
  #L1e931e.  v1:= temp @kind object;
  #L1e9320.  `@@b2.b.s` @type ^`byte`[] := v1 @kind object;
  #L1e9324.  v1:= 8I;
  #L1e9328.  v0:= v0[v1];
  #L1e932c.  `@@b2.b.t` @type ^`int` := v0;
  #L1e9330.  return @kind void;
  #L1e9332.  
  #L1e9334.  v1:= (13I, 14I, 16I, 18I, 20I, 21I, 27I, 32I, 6I, 7I, 6I, 6I, 1I, 1I, 1I, 1I) @kind object;
  #L1e937b.  goto L1e92f2;
  #L1e937c.  v0:= (18I, 24I, 33I, 37I, 41I, 47I, 51I, 59I, 61I, 6I, 1I, 1I, 1I, 1I, 1I, 1I) @kind object;
  #L1e93c3.  goto L1e9300;
}
procedure `void` `<init>`(`b2.b` v1 @kind this) @signature `Lb2/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e93d4.  v0:= 0I;
  #L1e93d6.  call `<init>`(v1, v0) @signature `Lb2/b;.<init>:(I)V` @kind direct;
  #L1e93dc.  return @kind void;
}
procedure `void` `<init>`(`b2.b` v1 @kind this, `int` v2 ) @signature `Lb2/b;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e93f0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e93f6.  v0:= v2 ^& 2;
  #L1e93fa.  if v0 == 0 then goto L1e9402;
  #L1e93fe.  v2:= v2 ^| 1;
  #L1e9402.  v1.`b2.b.b` @type ^`int` := v2;
  #L1e9406.  v2:= 1I;
  #L1e9408.  v2:= new `byte`[v2];
  #L1e940c.  v1.`b2.b.a` @type ^`byte`[] := v2 @kind object;
  #L1e9410.  v2:= -1I;
  #L1e9412.  v1.`b2.b.i` @type ^`int` := v2;
  #L1e9416.  return @kind void;
}
procedure `a2.l`[] `c`() @signature `Lb2/b;.c:()[La2/l;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;

  #L1e8ed4.  call temp:= `n`() @signature `Lb2/b;.n:()[La2/l;` @kind static;
  #L1e8eda.  v0:= temp @kind object;
  #L1e8edc.  return v0 @kind object;
}
procedure `void` `e`(`b2.b` v1 @kind this) @signature `Lb2/b;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1e9428.  v0:= v1.`b2.b.m` @type ^`a2.d0` @kind object;
  #L1e942c.  call temp:= `h`(v0) @signature `Ls3/a;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1e9432.  v0:= v1.`b2.b.l` @type ^`a2.n` @kind object;
  #L1e9436.  call temp:= `j`(v0) @signature `Ls3/l0;.j:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1e943c.  return @kind void;
}
procedure `int` `f`(`int` v4 , `long` v5 ) @signature `Lb2/b;.f:(IJ)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e9088.  v0:= (`long`) v4 @kind i2l;
  #L1e908a.  v2:= 8L;
  #L1e908e.  v0:= v0 * v2 @kind long;
  #L1e9092.  v2:= 1000000L;
  #L1e9098.  v0:= v0 * v2 @kind long;
  #L1e909c.  v0:= v0 / v5 @kind long;
  #L1e909e.  v4:= (`int`) v0 @kind l2i;
  #L1e90a0.  return v4;
}
procedure `a2.a0` `h`(`b2.b` v11 @kind this, `long` v12 , `boolean` v14 ) @signature `Lb2/b;.h:(JZ)La2/a0;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1e8f18.  v0:= v11.`b2.b.i` @type ^`int`;
  #L1e8f1c.  v1:= 20000L;
  #L1e8f20.  call temp:= `f`(v0, v1) @signature `Lb2/b;.f:(IJ)I` @kind static;
  #L1e8f26.  v8:= temp;
  #L1e8f28.  v0:= new `a2.e`;
  #L1e8f2c.  v6:= v11.`b2.b.h` @type ^`long` @kind wide;
  #L1e8f30.  v9:= v11.`b2.b.i` @type ^`int`;
  #L1e8f34.  v3:= v0 @kind object;
  #L1e8f36.  v4:= v12 @kind wide;
  #L1e8f38.  v10:= v14;
  #L1e8f3a.  call `<init>`(v3, v4, v6, v8, v9, v10) @signature `La2/e;.<init>:(JJIIZ)V` @kind direct;
  #L1e8f40.  return v0 @kind object;
}
procedure `int` `i`(`b2.b` v2 @kind this, `int` v3 ) @signature `Lb2/b;.i:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1e90b4.  call temp:= `l`(v2, v3) @signature `Lb2/b;.l:(I)Z` @kind direct;
  #L1e90ba.  v0:= temp;
  #L1e90bc.  if v0 != 0 then goto L1e9110;
  #L1e90c0.  v0:= new `java.lang.StringBuilder`;
  #L1e90c4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e90ca.  v1:= "Illegal AMR " @kind object;
  #L1e90ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e90d4.  v1:= v2.`b2.b.c` @type ^`boolean` @kind boolean;
  #L1e90d8.  if v1 == 0 then goto L1e90e2;
  #L1e90dc.  v1:= "WB" @kind object;
  #L1e90e0.  goto L1e90e6;
  #L1e90e2.  v1:= "NB" @kind object;
  #L1e90e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e90ec.  v1:= " frame type " @kind object;
  #L1e90f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e90f6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e90fc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e9102.  v3:= temp @kind object;
  #L1e9104.  v0:= 0I;
  #L1e9106.  call temp:= `a`(v3, v0) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L1e910c.  v3:= temp @kind object;
  #L1e910e.  throw v3;
  #L1e9110.  v0:= v2.`b2.b.c` @type ^`boolean` @kind boolean;
  #L1e9114.  if v0 == 0 then goto L1e9122;
  #L1e9118.  v0:= `@@b2.b.q` @type ^`int`[] @kind object;
  #L1e911c.  v3:= v0[v3];
  #L1e9120.  goto L1e912a;
  #L1e9122.  v0:= `@@b2.b.p` @type ^`int`[] @kind object;
  #L1e9126.  v3:= v0[v3];
  #L1e912a.  return v3;
}
procedure `boolean` `k`(`b2.b` v1 @kind this, `int` v2 ) @signature `Lb2/b;.k:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1e8f54.  v0:= v1.`b2.b.c` @type ^`boolean` @kind boolean;
  #L1e8f58.  if v0 != 0 then goto L1e8f70;
  #L1e8f5c.  v0:= 12I;
  #L1e8f60.  if v2 < v0 then goto L1e8f6c;
  #L1e8f64.  v0:= 14I;
  #L1e8f68.  if v2 <= v0 then goto L1e8f70;
  #L1e8f6c.  v2:= 1I;
  #L1e8f6e.  goto L1e8f72;
  #L1e8f70.  v2:= 0I;
  #L1e8f72.  return v2;
}
procedure `boolean` `l`(`b2.b` v1 @kind this, `int` v2 ) @signature `Lb2/b;.l:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1e8f84.  if v2 < 0 then goto L1e8fac;
  #L1e8f88.  v0:= 15I;
  #L1e8f8c.  if v2 > v0 then goto L1e8fac;
  #L1e8f90.  call temp:= `m`(v1, v2) @signature `Lb2/b;.m:(I)Z` @kind direct;
  #L1e8f96.  v0:= temp;
  #L1e8f98.  if v0 != 0 then goto L1e8fa8;
  #L1e8f9c.  call temp:= `k`(v1, v2) @signature `Lb2/b;.k:(I)Z` @kind direct;
  #L1e8fa2.  v2:= temp;
  #L1e8fa4.  if v2 == 0 then goto L1e8fac;
  #L1e8fa8.  v2:= 1I;
  #L1e8faa.  goto L1e8fae;
  #L1e8fac.  v2:= 0I;
  #L1e8fae.  return v2;
}
procedure `boolean` `m`(`b2.b` v1 @kind this, `int` v2 ) @signature `Lb2/b;.m:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1e8fc0.  v0:= v1.`b2.b.c` @type ^`boolean` @kind boolean;
  #L1e8fc4.  if v0 == 0 then goto L1e8fdc;
  #L1e8fc8.  v0:= 10I;
  #L1e8fcc.  if v2 < v0 then goto L1e8fd8;
  #L1e8fd0.  v0:= 13I;
  #L1e8fd4.  if v2 <= v0 then goto L1e8fdc;
  #L1e8fd8.  v2:= 1I;
  #L1e8fda.  goto L1e8fde;
  #L1e8fdc.  v2:= 0I;
  #L1e8fde.  return v2;
}
procedure `a2.l`[] `n`() @signature `Lb2/b;.n:()[La2/l;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L1e8ef0.  v0:= 1I;
  #L1e8ef2.  v0:= new `a2.l`[v0];
  #L1e8ef6.  v1:= new `b2.b`;
  #L1e8efa.  call `<init>`(v1) @signature `Lb2/b;.<init>:()V` @kind direct;
  #L1e8f00.  v2:= 0I;
  #L1e8f02.  v0[v2]:= v1 @kind object;
  #L1e8f06.  return v0 @kind object;
}
procedure `void` `o`(`b2.b` v5 @kind this) @signature `Lb2/b;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e947c.  v0:= v5.`b2.b.o` @type ^`boolean` @kind boolean;
  #L1e9480.  if v0 != 0 then goto L1e94ea;
  #L1e9484.  v0:= 1I;
  #L1e9486.  v5.`b2.b.o` @type ^`boolean` := v0 @kind boolean;
  #L1e948a.  v1:= v5.`b2.b.c` @type ^`boolean` @kind boolean;
  #L1e948e.  if v1 == 0 then goto L1e9498;
  #L1e9492.  v2:= "audio/amr-wb" @kind object;
  #L1e9496.  goto L1e949c;
  #L1e9498.  v2:= "audio/3gpp" @kind object;
  #L1e949c.  if v1 == 0 then goto L1e94a6;
  #L1e94a0.  v1:= 16000I;
  #L1e94a4.  goto L1e94aa;
  #L1e94a6.  v1:= 8000I;
  #L1e94aa.  v3:= v5.`b2.b.m` @type ^`a2.d0` @kind object;
  #L1e94ae.  v4:= new `v1.j1$b`;
  #L1e94b2.  call `<init>`(v4) @signature `Lv1/j1$b;.<init>:()V` @kind direct;
  #L1e94b8.  call temp:= `e0`(v4, v2) @signature `Lv1/j1$b;.e0:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L1e94be.  v2:= temp @kind object;
  #L1e94c0.  v4:= `@@b2.b.t` @type ^`int`;
  #L1e94c4.  call temp:= `W`(v2, v4) @signature `Lv1/j1$b;.W:(I)Lv1/j1$b;` @kind virtual;
  #L1e94ca.  v2:= temp @kind object;
  #L1e94cc.  call temp:= `H`(v2, v0) @signature `Lv1/j1$b;.H:(I)Lv1/j1$b;` @kind virtual;
  #L1e94d2.  v0:= temp @kind object;
  #L1e94d4.  call temp:= `f0`(v0, v1) @signature `Lv1/j1$b;.f0:(I)Lv1/j1$b;` @kind virtual;
  #L1e94da.  v0:= temp @kind object;
  #L1e94dc.  call temp:= `E`(v0) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L1e94e2.  v0:= temp @kind object;
  #L1e94e4.  call `b`(v3, v0) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L1e94ea.  return @kind void;
}
procedure `void` `p`(`b2.b` v5 @kind this, `long` v6 , `int` v8 ) @signature `Lb2/b;.p:(JI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e94fc.  v0:= v5.`b2.b.g` @type ^`boolean` @kind boolean;
  #L1e9500.  if v0 == 0 then goto L1e9506;
  #L1e9504.  return @kind void;
  #L1e9506.  v0:= v5.`b2.b.b` @type ^`int`;
  #L1e950a.  v1:= v0 ^& 1;
  #L1e950e.  v2:= 1I;
  #L1e9510.  if v1 == 0 then goto L1e955c;
  #L1e9514.  v3:= -1L;
  #L1e9518.  v1:= lcmp(v6, v3);
  #L1e951c.  if v1 == 0 then goto L1e955c;
  #L1e9520.  v1:= v5.`b2.b.i` @type ^`int`;
  #L1e9524.  v3:= -1I;
  #L1e9526.  if v1 == v3 then goto L1e9534;
  #L1e952a.  v4:= v5.`b2.b.e` @type ^`int`;
  #L1e952e.  if v1 == v4 then goto L1e9534;
  #L1e9532.  goto L1e955c;
  #L1e9534.  v1:= v5.`b2.b.j` @type ^`int`;
  #L1e9538.  v4:= 20I;
  #L1e953c.  if v1 >= v4 then goto L1e9544;
  #L1e9540.  if v8 != v3 then goto L1e9582;
  #L1e9544.  v8:= v0 ^& 2;
  #L1e9548.  if v8 == 0 then goto L1e9550;
  #L1e954c.  v8:= 1I;
  #L1e954e.  goto L1e9552;
  #L1e9550.  v8:= 0I;
  #L1e9552.  call temp:= `h`(v5, v6, v8) @signature `Lb2/b;.h:(JZ)La2/a0;` @kind direct;
  #L1e9558.  v6:= temp @kind object;
  #L1e955a.  goto L1e9570;
  #L1e955c.  v6:= new `a2.a0$b`;
  #L1e9560.  v7:= -4.9E-324D;
  #L1e956a.  call `<init>`(v6, v7) @signature `La2/a0$b;.<init>:(J)V` @kind direct;
  #L1e9570.  v5.`b2.b.n` @type ^`a2.a0` := v6 @kind object;
  #L1e9574.  v7:= v5.`b2.b.l` @type ^`a2.n` @kind object;
  #L1e9578.  call `m`(v7, v6) @signature `La2/n;.m:(La2/a0;)V` @kind interface;
  #L1e957e.  v5.`b2.b.g` @type ^`boolean` := v2 @kind boolean;
  #L1e9582.  return @kind void;
}
procedure `boolean` `q`(`a2.m` v3 @kind object, `byte`[] v4 @kind object) @signature `Lb2/b;.q:(La2/m;[B)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1e8ff0.  call `i`(v3) @signature `La2/m;.i:()V` @kind interface;
  #L1e8ff6.  v0:= length @variable v4;
  #L1e8ff8.  v0:= new `byte`[v0];
  #L1e8ffc.  v1:= length @variable v4;
  #L1e8ffe.  v2:= 0I;
  #L1e9000.  call `o`(v3, v0, v2, v1) @signature `La2/m;.o:([BII)V` @kind interface;
  #L1e9006.  call temp:= `equals`(v0, v4) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L1e900c.  v3:= temp;
  #L1e900e.  return v3;
}
procedure `int` `r`(`b2.b` v3 @kind this, `a2.m` v4 @kind object) @signature `Lb2/b;.r:(La2/m;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1e913c.  call `i`(v4) @signature `La2/m;.i:()V` @kind interface;
  #L1e9142.  v0:= v3.`b2.b.a` @type ^`byte`[] @kind object;
  #L1e9146.  v1:= 0I;
  #L1e9148.  v2:= 1I;
  #L1e914a.  call `o`(v4, v0, v1, v2) @signature `La2/m;.o:([BII)V` @kind interface;
  #L1e9150.  v4:= v3.`b2.b.a` @type ^`byte`[] @kind object;
  #L1e9154.  v4:= v4[v1] @kind byte;
  #L1e9158.  v0:= v4 ^& 131;
  #L1e915c.  if v0 > 0 then goto L1e9172;
  #L1e9160.  v4:= v4 ^> 3;
  #L1e9164.  v4:= v4 ^& 15;
  #L1e9168.  call temp:= `i`(v3, v4) @signature `Lb2/b;.i:(I)I` @kind direct;
  #L1e916e.  v4:= temp;
  #L1e9170.  return v4;
  #L1e9172.  v0:= new `java.lang.StringBuilder`;
  #L1e9176.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e917c.  v1:= "Invalid padding bits for frame header " @kind object;
  #L1e9180.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e9186.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e918c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e9192.  v4:= temp @kind object;
  #L1e9194.  v0:= 0I;
  #L1e9196.  call temp:= `a`(v4, v0) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L1e919c.  v4:= temp @kind object;
  #L1e919e.  throw v4;
}
procedure `boolean` `s`(`b2.b` v4 @kind this, `a2.m` v5 @kind object) @signature `Lb2/b;.s:(La2/m;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e9020.  v0:= `@@b2.b.r` @type ^`byte`[] @kind object;
  #L1e9024.  call temp:= `q`(v5, v0) @signature `Lb2/b;.q:(La2/m;[B)Z` @kind static;
  #L1e902a.  v1:= temp;
  #L1e902c.  v2:= 0I;
  #L1e902e.  v3:= 1I;
  #L1e9030.  if v1 == 0 then goto L1e9042;
  #L1e9034.  v4.`b2.b.c` @type ^`boolean` := v2 @kind boolean;
  #L1e9038.  v0:= length @variable v0;
  #L1e903a.  call `j`(v5, v0) @signature `La2/m;.j:(I)V` @kind interface;
  #L1e9040.  return v3;
  #L1e9042.  v0:= `@@b2.b.s` @type ^`byte`[] @kind object;
  #L1e9046.  call temp:= `q`(v5, v0) @signature `Lb2/b;.q:(La2/m;[B)Z` @kind static;
  #L1e904c.  v1:= temp;
  #L1e904e.  if v1 == 0 then goto L1e905a;
  #L1e9052.  v4.`b2.b.c` @type ^`boolean` := v3 @kind boolean;
  #L1e9056.  v0:= length @variable v0;
  #L1e9058.  goto L1e903a;
  #L1e905a.  return v2;
}
procedure `int` `t`(`b2.b` v8 @kind this, `a2.m` v9 @kind object) @signature `Lb2/b;.t:(La2/m;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1e9218.  v0:= v8.`b2.b.f` @type ^`int`;
  #L1e921c.  v1:= 1I;
  #L1e921e.  v2:= -1I;
  #L1e9220.  if v0 != 0 then goto L1e926a;
  #L1e9224.  call temp:= `r`(v8, v9) @signature `Lb2/b;.r:(La2/m;)I` @kind direct;
  #L1e922a.  v0:= temp;
  #L1e922c.  v8.`b2.b.e` @type ^`int` := v0;
  #L1e9230.  v8.`b2.b.f` @type ^`int` := v0;
  #L1e9234.  v0:= v8.`b2.b.i` @type ^`int`;
  #L1e9238.  if v0 != v2 then goto L1e9250;
  #L1e923c.  call temp:= `q`(v9) @signature `La2/m;.q:()J` @kind interface;
  #L1e9242.  v3:= temp @kind wide;
  #L1e9244.  v8.`b2.b.h` @type ^`long` := v3 @kind wide;
  #L1e9248.  v0:= v8.`b2.b.e` @type ^`int`;
  #L1e924c.  v8.`b2.b.i` @type ^`int` := v0;
  #L1e9250.  v0:= v8.`b2.b.i` @type ^`int`;
  #L1e9254.  v3:= v8.`b2.b.e` @type ^`int`;
  #L1e9258.  if v0 != v3 then goto L1e926a;
  #L1e925c.  v0:= v8.`b2.b.j` @type ^`int`;
  #L1e9260.  v0:= v0 + v1 @kind int;
  #L1e9262.  v8.`b2.b.j` @type ^`int` := v0;
  #L1e9266.  goto L1e926a;
  #L1e9268.  return v2;
  #L1e926a.  v0:= v8.`b2.b.m` @type ^`a2.d0` @kind object;
  #L1e926e.  v3:= v8.`b2.b.f` @type ^`int`;
  #L1e9272.  call temp:= `d`(v0, v9, v3, v1) @signature `La2/d0;.d:(Lr3/i;IZ)I` @kind interface;
  #L1e9278.  v9:= temp;
  #L1e927a.  if v9 != v2 then goto L1e9280;
  #L1e927e.  return v2;
  #L1e9280.  v0:= v8.`b2.b.f` @type ^`int`;
  #L1e9284.  v0:= v0 - v9 @kind int;
  #L1e9286.  v8.`b2.b.f` @type ^`int` := v0;
  #L1e928a.  v9:= 0I;
  #L1e928c.  if v0 <= 0 then goto L1e9292;
  #L1e9290.  return v9;
  #L1e9292.  v1:= v8.`b2.b.m` @type ^`a2.d0` @kind object;
  #L1e9296.  v2:= v8.`b2.b.k` @type ^`long` @kind wide;
  #L1e929a.  v4:= v8.`b2.b.d` @type ^`long` @kind wide;
  #L1e929e.  v2:= v2 + v4 @kind long;
  #L1e92a0.  v4:= 1I;
  #L1e92a2.  v5:= v8.`b2.b.e` @type ^`int`;
  #L1e92a6.  v6:= 0I;
  #L1e92a8.  v7:= 0I;
  #L1e92aa.  call `f`(v1, v2, v4, v5, v6, v7) @signature `La2/d0;.f:(JIIILa2/d0$a;)V` @kind interface;
  #L1e92b0.  v0:= v8.`b2.b.d` @type ^`long` @kind wide;
  #L1e92b4.  v2:= 20000L;
  #L1e92b8.  v0:= v0 + v2 @kind long;
  #L1e92ba.  v8.`b2.b.d` @type ^`long` := v0 @kind wide;
  #L1e92be.  return v9;
  catch `java.io.EOFException` @[L1e9224..L1e9230] goto L1e9268;
}
procedure `void` `a`(`b2.b` v0 @kind this) @signature `Lb2/b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L1e9594.  return @kind void;
}
procedure `void` `b`(`b2.b` v2 @kind this, `long` v3 , `long` v5 ) @signature `Lb2/b;.b:(JJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e95a8.  v5:= 0L;
  #L1e95ac.  v2.`b2.b.d` @type ^`long` := v5 @kind wide;
  #L1e95b0.  v0:= 0I;
  #L1e95b2.  v2.`b2.b.e` @type ^`int` := v0;
  #L1e95b6.  v2.`b2.b.f` @type ^`int` := v0;
  #L1e95ba.  v0:= lcmp(v3, v5);
  #L1e95be.  if v0 == 0 then goto L1e95e0;
  #L1e95c2.  v0:= v2.`b2.b.n` @type ^`a2.a0` @kind object;
  #L1e95c6.  v1:= instanceof @variable v0 @type ^`a2.e` @kind boolean;
  #L1e95ca.  if v1 == 0 then goto L1e95e0;
  #L1e95ce.  v0:= (`a2.e`) v0 @kind object;
  #L1e95d2.  call temp:= `b`(v0, v3) @signature `La2/e;.b:(J)J` @kind virtual;
  #L1e95d8.  v3:= temp @kind wide;
  #L1e95da.  v2.`b2.b.k` @type ^`long` := v3 @kind wide;
  #L1e95de.  goto L1e95e4;
  #L1e95e0.  v2.`b2.b.k` @type ^`long` := v5 @kind wide;
  #L1e95e4.  return @kind void;
}
procedure `void` `d`(`b2.b` v2 @kind this, `a2.n` v3 @kind object) @signature `Lb2/b;.d:(La2/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e9450.  v2.`b2.b.l` @type ^`a2.n` := v3 @kind object;
  #L1e9454.  v0:= 0I;
  #L1e9456.  v1:= 1I;
  #L1e9458.  call temp:= `e`(v3, v0, v1) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L1e945e.  v0:= temp @kind object;
  #L1e9460.  v2.`b2.b.m` @type ^`a2.d0` := v0 @kind object;
  #L1e9464.  call `h`(v3) @signature `La2/n;.h:()V` @kind interface;
  #L1e946a.  return @kind void;
}
procedure `boolean` `g`(`b2.b` v0 @kind this, `a2.m` v1 @kind object) @signature `Lb2/b;.g:(La2/m;)Z` @AccessFlag PUBLIC {
    temp;

  #L1e906c.  call temp:= `s`(v0, v1) @signature `Lb2/b;.s:(La2/m;)Z` @kind direct;
  #L1e9072.  v1:= temp;
  #L1e9074.  return v1;
}
procedure `int` `j`(`b2.b` v4 @kind this, `a2.m` v5 @kind object, `a2.z` v6 @kind object) @signature `Lb2/b;.j:(La2/m;La2/z;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e91b0.  call `e`(v4) @signature `Lb2/b;.e:()V` @kind direct;
  #L1e91b6.  call temp:= `q`(v5) @signature `La2/m;.q:()J` @kind interface;
  #L1e91bc.  v0:= temp @kind wide;
  #L1e91be.  v2:= 0L;
  #L1e91c2.  v6:= lcmp(v0, v2);
  #L1e91c6.  if v6 != 0 then goto L1e91e8;
  #L1e91ca.  call temp:= `s`(v4, v5) @signature `Lb2/b;.s:(La2/m;)Z` @kind direct;
  #L1e91d0.  v6:= temp;
  #L1e91d2.  if v6 == 0 then goto L1e91d8;
  #L1e91d6.  goto L1e91e8;
  #L1e91d8.  v5:= 0I;
  #L1e91da.  v6:= "Could not find AMR header." @kind object;
  #L1e91de.  call temp:= `a`(v6, v5) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L1e91e4.  v5:= temp @kind object;
  #L1e91e6.  throw v5;
  #L1e91e8.  call `o`(v4) @signature `Lb2/b;.o:()V` @kind direct;
  #L1e91ee.  call temp:= `t`(v4, v5) @signature `Lb2/b;.t:(La2/m;)I` @kind direct;
  #L1e91f4.  v6:= temp;
  #L1e91f6.  call temp:= `a`(v5) @signature `La2/m;.a:()J` @kind interface;
  #L1e91fc.  v0:= temp @kind wide;
  #L1e91fe.  call `p`(v4, v0, v6) @signature `Lb2/b;.p:(JI)V` @kind direct;
  #L1e9204.  return v6;
}
