record `wb.a` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface {
  `int` `wb.a.o` @AccessFlag PRIVATE_FINAL;
  `int` `wb.a.p` @AccessFlag PRIVATE_FINAL;
  `int` `wb.a.q` @AccessFlag PRIVATE_FINAL;
}
global `wb.a$a` `@@wb.a.r` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lwb/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4c582c.  v0:= new `wb.a$a`;
  #L4c5830.  v1:= 0I;
  #L4c5832.  call `<init>`(v0, v1) @signature `Lwb/a$a;.<init>:(Lkotlin/jvm/internal/g;)V` @kind direct;
  #L4c5838.  `@@wb.a.r` @type ^`wb.a$a` := v0 @kind object;
  #L4c583c.  return @kind void;
}
procedure `void` `<init>`(`wb.a` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lwb/a;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c5850.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c5856.  if v4 == 0 then goto L4c5888;
  #L4c585a.  v0:= -2147483648I;
  #L4c585e.  if v4 == v0 then goto L4c5878;
  #L4c5862.  v1.`wb.a.o` @type ^`int` := v2;
  #L4c5866.  call temp:= `b`(v2, v3, v4) @signature `Lob/c;.b:(III)I` @kind static;
  #L4c586c.  v2:= temp;
  #L4c586e.  v1.`wb.a.p` @type ^`int` := v2;
  #L4c5872.  v1.`wb.a.q` @type ^`int` := v4;
  #L4c5876.  return @kind void;
  #L4c5878.  v2:= new `java.lang.IllegalArgumentException`;
  #L4c587c.  v3:= "Step must be greater than Int.MIN_VALUE to avoid overflow on negation." @kind object;
  #L4c5880.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5886.  throw v2;
  #L4c5888.  v2:= new `java.lang.IllegalArgumentException`;
  #L4c588c.  v3:= "Step must be non-zero." @kind object;
  #L4c5890.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5896.  throw v2;
}
procedure `int` `b`(`wb.a` v1 @kind this) @signature `Lwb/a;.b:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4c56d0.  v0:= v1.`wb.a.o` @type ^`int`;
  #L4c56d4.  return v0;
}
procedure `boolean` `equals`(`wb.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lwb/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c562c.  v0:= instanceof @variable v3 @type ^`wb.a` @kind boolean;
  #L4c5630.  if v0 == 0 then goto L4c567e;
  #L4c5634.  call temp:= `isEmpty`(v2) @signature `Lwb/a;.isEmpty:()Z` @kind virtual;
  #L4c563a.  v0:= temp;
  #L4c563c.  if v0 == 0 then goto L4c5652;
  #L4c5640.  v0:= v3 @kind object;
  #L4c5642.  v0:= (`wb.a`) v0 @kind object;
  #L4c5646.  call temp:= `isEmpty`(v0) @signature `Lwb/a;.isEmpty:()Z` @kind virtual;
  #L4c564c.  v0:= temp;
  #L4c564e.  if v0 != 0 then goto L4c567a;
  #L4c5652.  v0:= v2.`wb.a.o` @type ^`int`;
  #L4c5656.  v3:= (`wb.a`) v3 @kind object;
  #L4c565a.  v1:= v3.`wb.a.o` @type ^`int`;
  #L4c565e.  if v0 != v1 then goto L4c567e;
  #L4c5662.  v0:= v2.`wb.a.p` @type ^`int`;
  #L4c5666.  v1:= v3.`wb.a.p` @type ^`int`;
  #L4c566a.  if v0 != v1 then goto L4c567e;
  #L4c566e.  v0:= v2.`wb.a.q` @type ^`int`;
  #L4c5672.  v3:= v3.`wb.a.q` @type ^`int`;
  #L4c5676.  if v0 != v3 then goto L4c567e;
  #L4c567a.  v3:= 1I;
  #L4c567c.  goto L4c5680;
  #L4c567e.  v3:= 0I;
  #L4c5680.  return v3;
}
procedure `int` `f`(`wb.a` v1 @kind this) @signature `Lwb/a;.f:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4c56e8.  v0:= v1.`wb.a.p` @type ^`int`;
  #L4c56ec.  return v0;
}
procedure `int` `h`(`wb.a` v1 @kind this) @signature `Lwb/a;.h:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4c5700.  v0:= v1.`wb.a.q` @type ^`int`;
  #L4c5704.  return v0;
}
procedure `int` `hashCode`(`wb.a` v2 @kind this) @signature `Lwb/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c5718.  call temp:= `isEmpty`(v2) @signature `Lwb/a;.isEmpty:()Z` @kind virtual;
  #L4c571e.  v0:= temp;
  #L4c5720.  if v0 == 0 then goto L4c5728;
  #L4c5724.  v0:= -1I;
  #L4c5726.  goto L4c5740;
  #L4c5728.  v0:= v2.`wb.a.o` @type ^`int`;
  #L4c572c.  v0:= v0 * 31;
  #L4c5730.  v1:= v2.`wb.a.p` @type ^`int`;
  #L4c5734.  v0:= v0 + v1 @kind int;
  #L4c5736.  v0:= v0 * 31;
  #L4c573a.  v1:= v2.`wb.a.q` @type ^`int`;
  #L4c573e.  v0:= v0 + v1 @kind int;
  #L4c5740.  return v0;
}
procedure `boolean` `isEmpty`(`wb.a` v4 @kind this) @signature `Lwb/a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c5694.  v0:= v4.`wb.a.q` @type ^`int`;
  #L4c5698.  v1:= 1I;
  #L4c569a.  v2:= 0I;
  #L4c569c.  if v0 <= 0 then goto L4c56ae;
  #L4c56a0.  v0:= v4.`wb.a.o` @type ^`int`;
  #L4c56a4.  v3:= v4.`wb.a.p` @type ^`int`;
  #L4c56a8.  if v0 <= v3 then goto L4c56bc;
  #L4c56ac.  goto L4c56be;
  #L4c56ae.  v0:= v4.`wb.a.o` @type ^`int`;
  #L4c56b2.  v3:= v4.`wb.a.p` @type ^`int`;
  #L4c56b6.  if v0 >= v3 then goto L4c56bc;
  #L4c56ba.  goto L4c56be;
  #L4c56bc.  v1:= 0I;
  #L4c56be.  return v1;
}
procedure `java.util.Iterator` `iterator`(`wb.a` v1 @kind this) @signature `Lwb/a;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4c57e8.  call temp:= `l`(v1) @signature `Lwb/a;.l:()Lkb/w;` @kind virtual;
  #L4c57ee.  v0:= temp @kind object;
  #L4c57f0.  return v0 @kind object;
}
procedure `kb.w` `l`(`wb.a` v4 @kind this) @signature `Lwb/a;.l:()Lkb/w;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c5804.  v0:= new `wb.b`;
  #L4c5808.  v1:= v4.`wb.a.o` @type ^`int`;
  #L4c580c.  v2:= v4.`wb.a.p` @type ^`int`;
  #L4c5810.  v3:= v4.`wb.a.q` @type ^`int`;
  #L4c5814.  call `<init>`(v0, v1, v2, v3) @signature `Lwb/b;.<init>:(III)V` @kind direct;
  #L4c581a.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`wb.a` v3 @kind this) @signature `Lwb/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c5754.  v0:= v3.`wb.a.q` @type ^`int`;
  #L4c5758.  v1:= " step " @kind object;
  #L4c575c.  if v0 <= 0 then goto L4c5794;
  #L4c5760.  v0:= new `java.lang.StringBuilder`;
  #L4c5764.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c576a.  v2:= v3.`wb.a.o` @type ^`int`;
  #L4c576e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5774.  v2:= ".." @kind object;
  #L4c5778.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c577e.  v2:= v3.`wb.a.p` @type ^`int`;
  #L4c5782.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5788.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c578e.  v1:= v3.`wb.a.q` @type ^`int`;
  #L4c5792.  goto L4c57c8;
  #L4c5794.  v0:= new `java.lang.StringBuilder`;
  #L4c5798.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c579e.  v2:= v3.`wb.a.o` @type ^`int`;
  #L4c57a2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c57a8.  v2:= " downTo " @kind object;
  #L4c57ac.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c57b2.  v2:= v3.`wb.a.p` @type ^`int`;
  #L4c57b6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c57bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c57c2.  v1:= v3.`wb.a.q` @type ^`int`;
  #L4c57c6.  v1:= -v1 @kind int;
  #L4c57c8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c57ce.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c57d4.  v0:= temp @kind object;
  #L4c57d6.  return v0 @kind object;
}
