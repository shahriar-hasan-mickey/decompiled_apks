record `wb.f` @kind class @AccessFlag  extends `wb.e` @kind class {
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Lwb/f;.a:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4c5af0.  if v0 >= v1 then goto L4c5af6;
  #L4c5af4.  v0:= v1;
  #L4c5af6.  return v0;
}
procedure `long` `b`(`long` v1 , `long` v3 ) @signature `Lwb/f;.b:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c5b8c.  v0:= lcmp(v1, v3);
  #L4c5b90.  if v0 >= 0 then goto L4c5b96;
  #L4c5b94.  v1:= v3 @kind wide;
  #L4c5b96.  return v1 @kind wide;
}
procedure `int` `c`(`int` v0 , `int` v1 ) @signature `Lwb/f;.c:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4c5b08.  if v0 <= v1 then goto L4c5b0e;
  #L4c5b0c.  v0:= v1;
  #L4c5b0e.  return v0;
}
procedure `long` `d`(`long` v1 , `long` v3 ) @signature `Lwb/f;.d:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c5ba8.  v0:= lcmp(v1, v3);
  #L4c5bac.  if v0 <= 0 then goto L4c5bb2;
  #L4c5bb0.  v1:= v3 @kind wide;
  #L4c5bb2.  return v1 @kind wide;
}
procedure `int` `e`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lwb/f;.e:(III)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4c5b20.  if v3 > v4 then goto L4c5b32;
  #L4c5b24.  if v2 >= v3 then goto L4c5b2a;
  #L4c5b28.  return v3;
  #L4c5b2a.  if v2 <= v4 then goto L4c5b30;
  #L4c5b2e.  return v4;
  #L4c5b30.  return v2;
  #L4c5b32.  v2:= new `java.lang.IllegalArgumentException`;
  #L4c5b36.  v0:= new `java.lang.StringBuilder`;
  #L4c5b3a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c5b40.  v1:= "Cannot coerce value to an empty range: maximum " @kind object;
  #L4c5b44.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5b4a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5b50.  v4:= " is less than minimum " @kind object;
  #L4c5b54.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5b5a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5b60.  v3:= 46I;
  #L4c5b64.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5b6a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c5b70.  v3:= temp @kind object;
  #L4c5b72.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5b78.  throw v2;
}
procedure `wb.a` `f`(`int` v2 , `int` v3 ) @signature `Lwb/f;.f:(II)Lwb/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4c5bc4.  v0:= `@@wb.a.r` @type ^`wb.a$a` @kind object;
  #L4c5bc8.  v1:= -1I;
  #L4c5bca.  call temp:= `a`(v0, v2, v3, v1) @signature `Lwb/a$a;.a:(III)Lwb/a;` @kind virtual;
  #L4c5bd0.  v2:= temp @kind object;
  #L4c5bd2.  return v2 @kind object;
}
procedure `wb.c` `g`(`int` v1 , `int` v2 ) @signature `Lwb/f;.g:(II)Lwb/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4c5be4.  v0:= -2147483648I;
  #L4c5be8.  if v2 > v0 then goto L4c5bfa;
  #L4c5bec.  v1:= `@@wb.c.s` @type ^`wb.c$a` @kind object;
  #L4c5bf0.  call temp:= `a`(v1) @signature `Lwb/c$a;.a:()Lwb/c;` @kind virtual;
  #L4c5bf6.  v1:= temp @kind object;
  #L4c5bf8.  return v1 @kind object;
  #L4c5bfa.  v0:= new `wb.c`;
  #L4c5bfe.  v2:= v2 + -1;
  #L4c5c02.  call `<init>`(v0, v1, v2) @signature `Lwb/c;.<init>:(II)V` @kind direct;
  #L4c5c08.  return v0 @kind object;
}
