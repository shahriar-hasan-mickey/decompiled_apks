record `ga.n` @kind class @AccessFlag PUBLIC {
  `ha.k` `ga.n.a` @AccessFlag PUBLIC_FINAL;
  `ga.n$b` `ga.n.b` @AccessFlag PRIVATE;
  `ha.k$c` `ga.n.c` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`ga.n` v4 @kind this, `u9.a` v5 @kind object) @signature `Lga/n;.<init>:(Lu9/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32d464.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32d46a.  v0:= new `ga.n$a`;
  #L32d46e.  call `<init>`(v0, v4) @signature `Lga/n$a;.<init>:(Lga/n;)V` @kind direct;
  #L32d474.  v4.`ga.n.c` @type ^`ha.k$c` := v0 @kind object;
  #L32d478.  v1:= new `ha.k`;
  #L32d47c.  v2:= `@@ha.g.a` @type ^`ha.g` @kind object;
  #L32d480.  v3:= "flutter/spellcheck" @kind object;
  #L32d484.  call `<init>`(v1, v5, v3, v2) @signature `Lha/k;.<init>:(Lha/c;Ljava/lang/String;Lha/l;)V` @kind direct;
  #L32d48a.  v4.`ga.n.a` @type ^`ha.k` := v1 @kind object;
  #L32d48e.  call `e`(v1, v0) @signature `Lha/k;.e:(Lha/k$c;)V` @kind virtual;
  #L32d494.  return @kind void;
}
procedure `ga.n$b` `a`(`ga.n` v0 @kind object) @signature `Lga/n;.a:(Lga/n;)Lga/n$b;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L32d44c.  v0:= v0.`ga.n.b` @type ^`ga.n$b` @kind object;
  #L32d450.  return v0 @kind object;
}
procedure `void` `b`(`ga.n` v0 @kind this, `ga.n$b` v1 @kind object) @signature `Lga/n;.b:(Lga/n$b;)V` @AccessFlag PUBLIC {
    temp;

  #L32d4a8.  v0.`ga.n.b` @type ^`ga.n$b` := v1 @kind object;
  #L32d4ac.  return @kind void;
}
