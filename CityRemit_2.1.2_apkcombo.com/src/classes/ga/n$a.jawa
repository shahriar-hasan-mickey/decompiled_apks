record `ga.n$a` @kind class @AccessFlag  extends `ha.k$c` @kind interface {
  `ga.n` `ga.n$a.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`ga.n$a` v0 @kind this, `ga.n` v1 @kind object) @signature `Lga/n$a;.<init>:(Lga/n;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L32d354.  v0.`ga.n$a.o` @type ^`ga.n` := v1 @kind object;
  #L32d358.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32d35e.  return @kind void;
}
procedure `void` `onMethodCall`(`ga.n$a` v4 @kind this, `ha.j` v5 @kind object, `ha.k$d` v6 @kind object) @signature `Lga/n$a;.onMethodCall:(Lha/j;Lha/k$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32d370.  v0:= v4.`ga.n$a.o` @type ^`ga.n` @kind object;
  #L32d374.  call temp:= `a`(v0) @signature `Lga/n;.a:(Lga/n;)Lga/n$b;` @kind static;
  #L32d37a.  v0:= temp @kind object;
  #L32d37c.  v1:= "SpellCheckChannel" @kind object;
  #L32d380.  if v0 != 0 then goto L32d390;
  #L32d384.  v5:= "No SpellCheckeMethodHandler registered, call not forwarded to spell check API." @kind object;
  #L32d388.  call `e`(v1, v5) @signature `Lt9/b;.e:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L32d38e.  return @kind void;
  #L32d390.  v0:= v5.`ha.j.a` @type ^`java.lang.String` @kind object;
  #L32d394.  v5:= v5.`ha.j.b` @type ^`java.lang.Object` @kind object;
  #L32d398.  v2:= new `java.lang.StringBuilder`;
  #L32d39c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32d3a2.  v3:= "Received '" @kind object;
  #L32d3a6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32d3ac.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32d3b2.  v3:= "' message." @kind object;
  #L32d3b6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32d3bc.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32d3c2.  v2:= temp @kind object;
  #L32d3c4.  call `e`(v1, v2) @signature `Lt9/b;.e:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L32d3ca.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L32d3d0.  v1:= "SpellCheck.initiateSpellCheck" @kind object;
  #L32d3d4.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32d3da.  v0:= temp;
  #L32d3dc.  if v0 != 0 then goto L32d3e8;
  #L32d3e0.  call `c`(v6) @signature `Lha/k$d;.c:()V` @kind interface;
  #L32d3e6.  goto L32d42a;
  #L32d3e8.  v5:= (`org.json.JSONArray`) v5 @kind object;
  #L32d3ec.  v0:= 0I;
  #L32d3ee.  call temp:= `getString`(v5, v0) @signature `Lorg/json/JSONArray;.getString:(I)Ljava/lang/String;` @kind virtual;
  #L32d3f4.  v0:= temp @kind object;
  #L32d3f6.  v1:= 1I;
  #L32d3f8.  call temp:= `getString`(v5, v1) @signature `Lorg/json/JSONArray;.getString:(I)Ljava/lang/String;` @kind virtual;
  #L32d3fe.  v5:= temp @kind object;
  #L32d400.  v1:= v4.`ga.n$a.o` @type ^`ga.n` @kind object;
  #L32d404.  call temp:= `a`(v1) @signature `Lga/n;.a:(Lga/n;)Lga/n$b;` @kind static;
  #L32d40a.  v1:= temp @kind object;
  #L32d40c.  call `a`(v1, v0, v5, v6) @signature `Lga/n$b;.a:(Ljava/lang/String;Ljava/lang/String;Lha/k$d;)V` @kind interface;
  #L32d412.  goto L32d42a;
  #L32d414.  v5:= Exception @type ^`org.json.JSONException` @kind object;
  #L32d416.  call temp:= `getMessage`(v5) @signature `Lorg/json/JSONException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L32d41c.  v5:= temp @kind object;
  #L32d41e.  v0:= 0I;
  #L32d420.  v1:= "error" @kind object;
  #L32d424.  call `b`(v6, v1, v5, v0) @signature `Lha/k$d;.b:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V` @kind interface;
  #L32d42a.  return @kind void;
  catch `org.json.JSONException` @[L32d3e8..L32d412] goto L32d414;
}
