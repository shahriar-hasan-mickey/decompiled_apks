record `ga.l$b` @kind class @AccessFlag  extends `ha.k$c` @kind interface {
  `ga.l` `ga.l$b.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`ga.l$b` v0 @kind this, `ga.l` v1 @kind object) @signature `Lga/l$b;.<init>:(Lga/l;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L32ce3c.  v0.`ga.l$b.o` @type ^`ga.l` := v1 @kind object;
  #L32ce40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32ce46.  return @kind void;
}
procedure `void` `onMethodCall`(`ga.l$b` v2 @kind this, `ha.j` v3 @kind object, `ha.k$d` v4 @kind object) @signature `Lga/l$b;.onMethodCall:(Lha/j;Lha/k$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32ce58.  v0:= v3.`ha.j.a` @type ^`java.lang.String` @kind object;
  #L32ce5c.  v3:= v3.`ha.j.b` @type ^`java.lang.Object` @kind object;
  #L32ce60.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L32ce66.  v1:= "get" @kind object;
  #L32ce6a.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32ce70.  v1:= temp;
  #L32ce72.  if v1 != 0 then goto L32cea6;
  #L32ce76.  v1:= "put" @kind object;
  #L32ce7a.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32ce80.  v0:= temp;
  #L32ce82.  if v0 != 0 then goto L32ce8e;
  #L32ce86.  call `c`(v4) @signature `Lha/k$d;.c:()V` @kind interface;
  #L32ce8c.  goto L32ceee;
  #L32ce8e.  v0:= v2.`ga.l$b.o` @type ^`ga.l` @kind object;
  #L32ce92.  v3:= (`byte`[]) v3 @kind object;
  #L32ce96.  call temp:= `b`(v0, v3) @signature `Lga/l;.b:(Lga/l;[B)[B` @kind static;
  #L32ce9c.  v3:= 0I;
  #L32ce9e.  call `a`(v4, v3) @signature `Lha/k$d;.a:(Ljava/lang/Object;)V` @kind interface;
  #L32cea4.  goto L32ceee;
  #L32cea6.  v3:= v2.`ga.l$b.o` @type ^`ga.l` @kind object;
  #L32ceaa.  v0:= 1I;
  #L32ceac.  call temp:= `c`(v3, v0) @signature `Lga/l;.c:(Lga/l;Z)Z` @kind static;
  #L32ceb2.  v3:= v2.`ga.l$b.o` @type ^`ga.l` @kind object;
  #L32ceb6.  call temp:= `d`(v3) @signature `Lga/l;.d:(Lga/l;)Z` @kind static;
  #L32cebc.  v3:= temp;
  #L32cebe.  if v3 != 0 then goto L32ced8;
  #L32cec2.  v3:= v2.`ga.l$b.o` @type ^`ga.l` @kind object;
  #L32cec6.  v0:= v3.`ga.l.a` @type ^`boolean` @kind boolean;
  #L32ceca.  if v0 != 0 then goto L32ced0;
  #L32cece.  goto L32ced8;
  #L32ced0.  call temp:= `f`(v3, v4) @signature `Lga/l;.f:(Lga/l;Lha/k$d;)Lha/k$d;` @kind static;
  #L32ced6.  goto L32ceee;
  #L32ced8.  v3:= v2.`ga.l$b.o` @type ^`ga.l` @kind object;
  #L32cedc.  call temp:= `a`(v3) @signature `Lga/l;.a:(Lga/l;)[B` @kind static;
  #L32cee2.  v0:= temp @kind object;
  #L32cee4.  call temp:= `e`(v3, v0) @signature `Lga/l;.e:(Lga/l;[B)Ljava/util/Map;` @kind static;
  #L32ceea.  v3:= temp @kind object;
  #L32ceec.  goto L32ce9e;
  #L32ceee.  return @kind void;
}
