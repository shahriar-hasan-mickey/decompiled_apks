record `ga.k` @kind class @AccessFlag PUBLIC {
  `ha.k` `ga.k.a` @AccessFlag PRIVATE_FINAL;
  `ga.k$g` `ga.k.b` @AccessFlag PRIVATE;
  `ha.k$c` `ga.k.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`ga.k` v4 @kind this, `u9.a` v5 @kind object) @signature `Lga/k;.<init>:(Lu9/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32cd0c.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32cd12.  v0:= new `ga.k$a`;
  #L32cd16.  call `<init>`(v0, v4) @signature `Lga/k$a;.<init>:(Lga/k;)V` @kind direct;
  #L32cd1c.  v4.`ga.k.c` @type ^`ha.k$c` := v0 @kind object;
  #L32cd20.  v1:= new `ha.k`;
  #L32cd24.  v2:= `@@ha.s.b` @type ^`ha.s` @kind object;
  #L32cd28.  v3:= "flutter/platform_views" @kind object;
  #L32cd2c.  call `<init>`(v1, v5, v3, v2) @signature `Lha/k;.<init>:(Lha/c;Ljava/lang/String;Lha/l;)V` @kind direct;
  #L32cd32.  v4.`ga.k.a` @type ^`ha.k` := v1 @kind object;
  #L32cd36.  call `e`(v1, v0) @signature `Lha/k;.e:(Lha/k$c;)V` @kind virtual;
  #L32cd3c.  return @kind void;
}
procedure `ga.k$g` `a`(`ga.k` v0 @kind object) @signature `Lga/k;.a:(Lga/k;)Lga/k$g;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L32cca4.  v0:= v0.`ga.k.b` @type ^`ga.k$g` @kind object;
  #L32cca8.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`java.lang.Exception` v0 @kind object) @signature `Lga/k;.b:(Ljava/lang/Exception;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L32ccbc.  call temp:= `c`(v0) @signature `Lga/k;.c:(Ljava/lang/Exception;)Ljava/lang/String;` @kind static;
  #L32ccc2.  v0:= temp @kind object;
  #L32ccc4.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`java.lang.Exception` v2 @kind object) @signature `Lga/k;.c:(Ljava/lang/Exception;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L32ccd8.  v0:= new `java.io.StringWriter`;
  #L32ccdc.  call `<init>`(v0) @signature `Ljava/io/StringWriter;.<init>:()V` @kind direct;
  #L32cce2.  v1:= new `java.io.PrintWriter`;
  #L32cce6.  call `<init>`(v1, v0) @signature `Ljava/io/PrintWriter;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L32ccec.  call `printStackTrace`(v2, v1) @signature `Ljava/lang/Exception;.printStackTrace:(Ljava/io/PrintWriter;)V` @kind virtual;
  #L32ccf2.  call temp:= `toString`(v0) @signature `Ljava/io/StringWriter;.toString:()Ljava/lang/String;` @kind virtual;
  #L32ccf8.  v2:= temp @kind object;
  #L32ccfa.  return v2 @kind object;
}
procedure `void` `d`(`ga.k` v2 @kind this, `int` v3 ) @signature `Lga/k;.d:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32cd50.  v0:= v2.`ga.k.a` @type ^`ha.k` @kind object;
  #L32cd54.  if v0 != 0 then goto L32cd5a;
  #L32cd58.  return @kind void;
  #L32cd5a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L32cd60.  v3:= temp @kind object;
  #L32cd62.  v1:= "viewFocused" @kind object;
  #L32cd66.  call `c`(v0, v1, v3) @signature `Lha/k;.c:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L32cd6c.  return @kind void;
}
procedure `void` `e`(`ga.k` v0 @kind this, `ga.k$g` v1 @kind object) @signature `Lga/k;.e:(Lga/k$g;)V` @AccessFlag PUBLIC {
    temp;

  #L32cd80.  v0.`ga.k.b` @type ^`ga.k$g` := v1 @kind object;
  #L32cd84.  return @kind void;
}
