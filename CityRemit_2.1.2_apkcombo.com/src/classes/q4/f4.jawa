record `q4.f4` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Lq4/f4;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41d254.  if v5 < 0 then goto L41d260;
  #L41d258.  if v5 < v6 then goto L41d25e;
  #L41d25c.  goto L41d260;
  #L41d25e.  return v5;
  #L41d260.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L41d264.  v0:= "index" @kind object;
  #L41d268.  v1:= 1I;
  #L41d26a.  v2:= 0I;
  #L41d26c.  v3:= 2I;
  #L41d26e.  if v5 < 0 then goto L41d2d8;
  #L41d272.  if v6 >= 0 then goto L41d2a8;
  #L41d276.  v5:= new `java.lang.IllegalArgumentException`;
  #L41d27a.  v7:= new `java.lang.StringBuilder`;
  #L41d27e.  v0:= 26I;
  #L41d282.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L41d288.  v0:= "negative size: " @kind object;
  #L41d28c.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41d292.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41d298.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41d29e.  v6:= temp @kind object;
  #L41d2a0.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41d2a6.  throw v5;
  #L41d2a8.  v4:= 3I;
  #L41d2aa.  v4:= new `java.lang.Object`[v4];
  #L41d2ae.  v4[v2]:= v0 @kind object;
  #L41d2b2.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41d2b8.  v5:= temp @kind object;
  #L41d2ba.  v4[v1]:= v5 @kind object;
  #L41d2be.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41d2c4.  v5:= temp @kind object;
  #L41d2c6.  v4[v3]:= v5 @kind object;
  #L41d2ca.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L41d2ce.  call temp:= `a`(v5, v4) @signature `Lq4/g5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L41d2d4.  v5:= temp @kind object;
  #L41d2d6.  goto L41d2f8;
  #L41d2d8.  v6:= new `java.lang.Object`[v3];
  #L41d2dc.  v6[v2]:= v0 @kind object;
  #L41d2e0.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41d2e6.  v5:= temp @kind object;
  #L41d2e8.  v6[v1]:= v5 @kind object;
  #L41d2ec.  v5:= "%s (%s) must not be negative" @kind object;
  #L41d2f0.  call temp:= `a`(v5, v6) @signature `Lq4/g5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L41d2f6.  v5:= temp @kind object;
  #L41d2f8.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41d2fe.  throw v7;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Lq4/f4;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41d310.  if v1 < 0 then goto L41d31a;
  #L41d314.  if v1 > v2 then goto L41d31a;
  #L41d318.  return v1;
  #L41d31a.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L41d31e.  v0:= "index" @kind object;
  #L41d322.  call temp:= `d`(v1, v2, v0) @signature `Lq4/f4;.d:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L41d328.  v1:= temp @kind object;
  #L41d32a.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41d330.  throw v3;
}
procedure `void` `c`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lq4/f4;.c:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41deec.  if v2 < 0 then goto L41defc;
  #L41def0.  if v3 < v2 then goto L41defc;
  #L41def4.  if v3 <= v4 then goto L41defa;
  #L41def8.  goto L41defc;
  #L41defa.  return @kind void;
  #L41defc.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L41df00.  if v2 < 0 then goto L41df50;
  #L41df04.  if v2 > v4 then goto L41df50;
  #L41df08.  if v3 < 0 then goto L41df42;
  #L41df0c.  if v3 <= v4 then goto L41df12;
  #L41df10.  goto L41df42;
  #L41df12.  v4:= 2I;
  #L41df14.  v4:= new `java.lang.Object`[v4];
  #L41df18.  v1:= 0I;
  #L41df1a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41df20.  v3:= temp @kind object;
  #L41df22.  v4[v1]:= v3 @kind object;
  #L41df26.  v3:= 1I;
  #L41df28.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41df2e.  v2:= temp @kind object;
  #L41df30.  v4[v3]:= v2 @kind object;
  #L41df34.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L41df38.  call temp:= `a`(v2, v4) @signature `Lq4/g5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L41df3e.  v2:= temp @kind object;
  #L41df40.  goto L41df5c;
  #L41df42.  v2:= "end index" @kind object;
  #L41df46.  call temp:= `d`(v3, v4, v2) @signature `Lq4/f4;.d:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L41df4c.  v2:= temp @kind object;
  #L41df4e.  goto L41df5c;
  #L41df50.  v3:= "start index" @kind object;
  #L41df54.  call temp:= `d`(v2, v4, v3) @signature `Lq4/f4;.d:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L41df5a.  v2:= temp @kind object;
  #L41df5c.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41df62.  throw v0;
}
procedure `java.lang.String` `d`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Lq4/f4;.d:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41d400.  v0:= 1I;
  #L41d402.  v1:= 0I;
  #L41d404.  v2:= 2I;
  #L41d406.  if v4 >= 0 then goto L41d42c;
  #L41d40a.  v5:= new `java.lang.Object`[v2];
  #L41d40e.  v5[v1]:= v6 @kind object;
  #L41d412.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41d418.  v4:= temp @kind object;
  #L41d41a.  v5[v0]:= v4 @kind object;
  #L41d41e.  v4:= "%s (%s) must not be negative" @kind object;
  #L41d422.  call temp:= `a`(v4, v5) @signature `Lq4/g5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L41d428.  v4:= temp @kind object;
  #L41d42a.  return v4 @kind object;
  #L41d42c.  if v5 < 0 then goto L41d460;
  #L41d430.  v3:= 3I;
  #L41d432.  v3:= new `java.lang.Object`[v3];
  #L41d436.  v3[v1]:= v6 @kind object;
  #L41d43a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41d440.  v4:= temp @kind object;
  #L41d442.  v3[v0]:= v4 @kind object;
  #L41d446.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L41d44c.  v4:= temp @kind object;
  #L41d44e.  v3[v2]:= v4 @kind object;
  #L41d452.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L41d456.  call temp:= `a`(v4, v3) @signature `Lq4/g5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L41d45c.  v4:= temp @kind object;
  #L41d45e.  return v4 @kind object;
  #L41d460.  v4:= new `java.lang.IllegalArgumentException`;
  #L41d464.  v6:= new `java.lang.StringBuilder`;
  #L41d468.  v0:= 26I;
  #L41d46c.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L41d472.  v0:= "negative size: " @kind object;
  #L41d476.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41d47c.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41d482.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41d488.  v5:= temp @kind object;
  #L41d48a.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41d490.  throw v4;
}
