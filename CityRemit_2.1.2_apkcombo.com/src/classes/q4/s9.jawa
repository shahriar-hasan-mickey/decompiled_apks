record `q4.s9` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@q4.s9.o` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lq4/s9;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L421dc0.  v0:= 0I;
  #L421dc2.  v0:= new `java.lang.Object`[v0];
  #L421dc6.  `@@q4.s9.o` @type ^`java.lang.Object`[] := v0 @kind object;
  #L421dca.  return @kind void;
}
procedure `void` `<init>`(`q4.s9` v0 @kind this) @signature `Lq4/s9;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L421ddc.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L421de2.  return @kind void;
}
procedure `boolean` `add`(`q4.s9` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lq4/s9;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L421c44.  v1:= new `java.lang.UnsupportedOperationException`;
  #L421c48.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L421c4e.  throw v1;
}
procedure `boolean` `addAll`(`q4.s9` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lq4/s9;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L421c60.  v1:= new `java.lang.UnsupportedOperationException`;
  #L421c64.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L421c6a.  throw v1;
}
procedure `int` `b`(`java.lang.Object`[] v0 @kind object, `int` v1 ) @signature `Lq4/s9;.b:([Ljava/lang/Object;I)I` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `clear`(`q4.s9` v1 @kind this) @signature `Lq4/s9;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L421df4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L421df8.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L421dfe.  throw v0;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Lq4/s9;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `f`(`q4.s9` v1 @kind this) @signature `Lq4/s9;.f:()I` @AccessFlag  {
    temp;
    v0;

  #L421cd0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L421cd4.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L421cda.  throw v0;
}
procedure `int` `h`(`q4.s9` v1 @kind this) @signature `Lq4/s9;.h:()I` @AccessFlag  {
    temp;
    v0;

  #L421cec.  v0:= new `java.lang.UnsupportedOperationException`;
  #L421cf0.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L421cf6.  throw v0;
}
procedure `java.lang.Object`[] `l`(`q4.s9` v1 @kind this) @signature `Lq4/s9;.l:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L421dac.  v0:= 0I;
  #L421dae.  return v0 @kind object;
}
procedure `boolean` `remove`(`q4.s9` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lq4/s9;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L421c7c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L421c80.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L421c86.  throw v1;
}
procedure `boolean` `removeAll`(`q4.s9` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lq4/s9;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L421c98.  v1:= new `java.lang.UnsupportedOperationException`;
  #L421c9c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L421ca2.  throw v1;
}
procedure `boolean` `retainAll`(`q4.s9` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lq4/s9;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L421cb4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L421cb8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L421cbe.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`q4.s9` v1 @kind this) @signature `Lq4/s9;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L421d08.  v0:= `@@q4.s9.o` @type ^`java.lang.Object`[] @kind object;
  #L421d0c.  call temp:= `toArray`(v1, v0) @signature `Lq4/s9;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L421d12.  v0:= temp @kind object;
  #L421d14.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`q4.s9` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lq4/s9;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L421d28.  call temp:= `requireNonNull`(v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L421d2e.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L421d34.  v0:= temp;
  #L421d36.  v1:= length @variable v4;
  #L421d38.  if v1 >= v0 then goto L421d88;
  #L421d3c.  call temp:= `l`(v3) @signature `Lq4/s9;.l:()[Ljava/lang/Object;` @kind virtual;
  #L421d42.  v1:= temp @kind object;
  #L421d44.  if v1 != 0 then goto L421d66;
  #L421d48.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L421d4e.  v4:= temp @kind object;
  #L421d50.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L421d56.  v4:= temp @kind object;
  #L421d58.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L421d5e.  v4:= temp @kind object;
  #L421d60.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L421d64.  goto L421d92;
  #L421d66.  call temp:= `h`(v3) @signature `Lq4/s9;.h:()I` @kind virtual;
  #L421d6c.  v0:= temp;
  #L421d6e.  call temp:= `f`(v3) @signature `Lq4/s9;.f:()I` @kind virtual;
  #L421d74.  v2:= temp;
  #L421d76.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L421d7c.  v4:= temp @kind object;
  #L421d7e.  call temp:= `copyOfRange`(v1, v0, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L421d84.  v4:= temp @kind object;
  #L421d86.  return v4 @kind object;
  #L421d88.  if v1 <= v0 then goto L421d92;
  #L421d8c.  v1:= 0I;
  #L421d8e.  v4[v0]:= v1 @kind object;
  #L421d92.  v0:= 0I;
  #L421d94.  call temp:= `b`(v3, v4, v0) @signature `Lq4/s9;.b:([Ljava/lang/Object;I)I` @kind virtual;
  #L421d9a.  return v4 @kind object;
}
