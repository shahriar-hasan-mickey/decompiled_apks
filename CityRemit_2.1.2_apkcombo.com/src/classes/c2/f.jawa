record `c2.f` @kind class @AccessFlag FINAL extends `c2.a` @kind interface {
  `m5.q` `c2.f.a` @AccessFlag PUBLIC_FINAL;
  `int` `c2.f.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c2.f` v0 @kind this, `int` v1 , `m5.q` v2 @kind object) @signature `Lc2/f;.<init>:(ILm5/q;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1f4c34.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f4c3a.  v0.`c2.f.b` @type ^`int` := v1;
  #L1f4c3e.  v0.`c2.f.a` @type ^`m5.q` := v2 @kind object;
  #L1f4c42.  return @kind void;
}
procedure `c2.a` `a`(`int` v0 , `int` v1 , `s3.z` v2 @kind object) @signature `Lc2/f;.a:(IILs3/z;)Lc2/a;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1f4aa8.  goto L1f4adc;
  #L1f4aae.  v0:= 0I;
  #L1f4ab0.  return v0 @kind object;
  #L1f4ab2.  call temp:= `a`(v2) @signature `Lc2/h;.a:(Ls3/z;)Lc2/h;` @kind static;
  #L1f4ab8.  v0:= temp @kind object;
  #L1f4aba.  return v0 @kind object;
  #L1f4abc.  call temp:= `c`(v2) @signature `Lc2/d;.c:(Ls3/z;)Lc2/d;` @kind static;
  #L1f4ac2.  v0:= temp @kind object;
  #L1f4ac4.  return v0 @kind object;
  #L1f4ac6.  call temp:= `b`(v2) @signature `Lc2/c;.b:(Ls3/z;)Lc2/c;` @kind static;
  #L1f4acc.  v0:= temp @kind object;
  #L1f4ace.  return v0 @kind object;
  #L1f4ad0.  call temp:= `d`(v1, v2) @signature `Lc2/g;.d:(ILs3/z;)Lc2/a;` @kind static;
  #L1f4ad6.  v0:= temp @kind object;
  #L1f4ad8.  return v0 @kind object;
  #L1f4ada.  
  #L1f4adc.  switch v0
                  | 1718776947 => goto L1f4ad0
                  | 1751742049 => goto L1f4ac6
                  | 1752331379 => goto L1f4abc
                  | 1852994675 => goto L1f4ab2
                  | else => goto L1f4aae;
}
procedure `c2.f` `c`(`int` v7 , `s3.z` v8 @kind object) @signature `Lc2/f;.c:(ILs3/z;)Lc2/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1f4b58.  v0:= new `m5.q$a`;
  #L1f4b5c.  call `<init>`(v0) @signature `Lm5/q$a;.<init>:()V` @kind direct;
  #L1f4b62.  call temp:= `f`(v8) @signature `Ls3/z;.f:()I` @kind virtual;
  #L1f4b68.  v1:= temp;
  #L1f4b6a.  v2:= -2I;
  #L1f4b6c.  call temp:= `a`(v8) @signature `Ls3/z;.a:()I` @kind virtual;
  #L1f4b72.  v3:= temp;
  #L1f4b74.  v4:= 8I;
  #L1f4b78.  if v3 <= v4 then goto L1f4bf8;
  #L1f4b7c.  call temp:= `p`(v8) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f4b82.  v3:= temp;
  #L1f4b84.  call temp:= `p`(v8) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f4b8a.  v4:= temp;
  #L1f4b8c.  call temp:= `e`(v8) @signature `Ls3/z;.e:()I` @kind virtual;
  #L1f4b92.  v5:= temp;
  #L1f4b94.  v5:= v5 + v4 @kind int;
  #L1f4b96.  call `N`(v8, v5) @signature `Ls3/z;.N:(I)V` @kind virtual;
  #L1f4b9c.  v4:= 1414744396I;
  #L1f4ba2.  if v3 != v4 then goto L1f4bb8;
  #L1f4ba6.  call temp:= `p`(v8) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f4bac.  v3:= temp;
  #L1f4bae.  call temp:= `c`(v3, v8) @signature `Lc2/f;.c:(ILs3/z;)Lc2/f;` @kind static;
  #L1f4bb4.  v3:= temp @kind object;
  #L1f4bb6.  goto L1f4bc0;
  #L1f4bb8.  call temp:= `a`(v3, v2, v8) @signature `Lc2/f;.a:(IILs3/z;)Lc2/a;` @kind static;
  #L1f4bbe.  v3:= temp @kind object;
  #L1f4bc0.  if v3 == 0 then goto L1f4bea;
  #L1f4bc4.  call temp:= `getType`(v3) @signature `Lc2/a;.getType:()I` @kind interface;
  #L1f4bca.  v4:= temp;
  #L1f4bcc.  v6:= 1752331379I;
  #L1f4bd2.  if v4 != v6 then goto L1f4be4;
  #L1f4bd6.  v2:= v3 @kind object;
  #L1f4bd8.  v2:= (`c2.d`) v2 @kind object;
  #L1f4bdc.  call temp:= `b`(v2) @signature `Lc2/d;.b:()I` @kind virtual;
  #L1f4be2.  v2:= temp;
  #L1f4be4.  call temp:= `f`(v0, v3) @signature `Lm5/q$a;.f:(Ljava/lang/Object;)Lm5/q$a;` @kind virtual;
  #L1f4bea.  call `O`(v8, v5) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L1f4bf0.  call `N`(v8, v1) @signature `Ls3/z;.N:(I)V` @kind virtual;
  #L1f4bf6.  goto L1f4b6c;
  #L1f4bf8.  v8:= new `c2.f`;
  #L1f4bfc.  call temp:= `h`(v0) @signature `Lm5/q$a;.h:()Lm5/q;` @kind virtual;
  #L1f4c02.  v0:= temp @kind object;
  #L1f4c04.  call `<init>`(v8, v7, v0) @signature `Lc2/f;.<init>:(ILm5/q;)V` @kind direct;
  #L1f4c0a.  return v8 @kind object;
}
procedure `c2.a` `b`(`c2.f` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lc2/f;.b:(Ljava/lang/Class;)Lc2/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f4b10.  v0:= v3.`c2.f.a` @type ^`m5.q` @kind object;
  #L1f4b14.  call temp:= `u`(v0) @signature `Lm5/q;.u:()Lm5/s0;` @kind virtual;
  #L1f4b1a.  v0:= temp @kind object;
  #L1f4b1c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f4b22.  v1:= temp;
  #L1f4b24.  if v1 == 0 then goto L1f4b42;
  #L1f4b28.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f4b2e.  v1:= temp @kind object;
  #L1f4b30.  v1:= (`c2.a`) v1 @kind object;
  #L1f4b34.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1f4b3a.  v2:= temp @kind object;
  #L1f4b3c.  if v2 != v4 then goto L1f4b1c;
  #L1f4b40.  return v1 @kind object;
  #L1f4b42.  v4:= 0I;
  #L1f4b44.  return v4 @kind object;
}
procedure `int` `getType`(`c2.f` v1 @kind this) @signature `Lc2/f;.getType:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4c1c.  v0:= v1.`c2.f.b` @type ^`int`;
  #L1f4c20.  return v0;
}
