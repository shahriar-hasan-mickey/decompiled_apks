record `c2.b` @kind class @AccessFlag PUBLIC_FINAL extends `a2.l` @kind interface {
  `s3.z` `c2.b.a` @AccessFlag PRIVATE_FINAL;
  `c2.b$c` `c2.b.b` @AccessFlag PRIVATE_FINAL;
  `int` `c2.b.c` @AccessFlag PRIVATE;
  `a2.n` `c2.b.d` @AccessFlag PRIVATE;
  `c2.c` `c2.b.e` @AccessFlag PRIVATE;
  `long` `c2.b.f` @AccessFlag PRIVATE;
  `c2.e`[] `c2.b.g` @AccessFlag PRIVATE;
  `long` `c2.b.h` @AccessFlag PRIVATE;
  `c2.e` `c2.b.i` @AccessFlag PRIVATE;
  `int` `c2.b.j` @AccessFlag PRIVATE;
  `long` `c2.b.k` @AccessFlag PRIVATE;
  `long` `c2.b.l` @AccessFlag PRIVATE;
  `int` `c2.b.m` @AccessFlag PRIVATE;
  `boolean` `c2.b.n` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c2.b` v2 @kind this) @signature `Lc2/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1f41b8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f41be.  v0:= new `s3.z`;
  #L1f41c2.  v1:= 12I;
  #L1f41c6.  call `<init>`(v0, v1) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L1f41cc.  v2.`c2.b.a` @type ^`s3.z` := v0 @kind object;
  #L1f41d0.  v0:= new `c2.b$c`;
  #L1f41d4.  v1:= 0I;
  #L1f41d6.  call `<init>`(v0, v1) @signature `Lc2/b$c;.<init>:(Lc2/b$a;)V` @kind direct;
  #L1f41dc.  v2.`c2.b.b` @type ^`c2.b$c` := v0 @kind object;
  #L1f41e0.  v0:= new `a2.j`;
  #L1f41e4.  call `<init>`(v0) @signature `La2/j;.<init>:()V` @kind direct;
  #L1f41ea.  v2.`c2.b.d` @type ^`a2.n` := v0 @kind object;
  #L1f41ee.  v0:= 0I;
  #L1f41f0.  v0:= new `c2.e`[v0];
  #L1f41f4.  v2.`c2.b.g` @type ^`c2.e`[] := v0 @kind object;
  #L1f41f8.  v0:= -1L;
  #L1f41fc.  v2.`c2.b.k` @type ^`long` := v0 @kind wide;
  #L1f4200.  v2.`c2.b.l` @type ^`long` := v0 @kind wide;
  #L1f4204.  v0:= -1I;
  #L1f4206.  v2.`c2.b.j` @type ^`int` := v0;
  #L1f420a.  v0:= -4.9E-324D;
  #L1f4214.  v2.`c2.b.f` @type ^`long` := v0 @kind wide;
  #L1f4218.  return @kind void;
}
procedure `c2.e`[] `c`(`c2.b` v0 @kind object) @signature `Lc2/b;.c:(Lc2/b;)[Lc2/e;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1f3d10.  v0:= v0.`c2.b.g` @type ^`c2.e`[] @kind object;
  #L1f3d14.  return v0 @kind object;
}
procedure `void` `e`(`a2.m` v5 @kind object) @signature `Lc2/b;.e:(La2/m;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f422c.  call temp:= `q`(v5) @signature `La2/m;.q:()J` @kind interface;
  #L1f4232.  v0:= temp @kind wide;
  #L1f4234.  v2:= 1L;
  #L1f4238.  v0:= v0 ^& v2 @kind long;
  #L1f423a.  v4:= lcmp(v0, v2);
  #L1f423e.  if v4 != 0 then goto L1f424a;
  #L1f4242.  v0:= 1I;
  #L1f4244.  call `j`(v5, v0) @signature `La2/m;.j:(I)V` @kind interface;
  #L1f424a.  return @kind void;
}
procedure `c2.e` `f`(`c2.b` v5 @kind this, `int` v6 ) @signature `Lc2/b;.f:(I)Lc2/e;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f3bf0.  v0:= v5.`c2.b.g` @type ^`c2.e`[] @kind object;
  #L1f3bf4.  v1:= length @variable v0;
  #L1f3bf6.  v2:= 0I;
  #L1f3bf8.  if v2 >= v1 then goto L1f3c14;
  #L1f3bfc.  v3:= v0[v2] @kind object;
  #L1f3c00.  call temp:= `j`(v3, v6) @signature `Lc2/e;.j:(I)Z` @kind virtual;
  #L1f3c06.  v4:= temp;
  #L1f3c08.  if v4 == 0 then goto L1f3c0e;
  #L1f3c0c.  return v3 @kind object;
  #L1f3c0e.  v2:= v2 + 1;
  #L1f3c12.  goto L1f3bf8;
  #L1f3c14.  v6:= 0I;
  #L1f3c16.  return v6 @kind object;
}
procedure `void` `h`(`c2.b` v6 @kind this, `s3.z` v7 @kind object) @signature `Lc2/b;.h:(Ls3/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1f4280.  v0:= 1819436136I;
  #L1f4286.  call temp:= `c`(v0, v7) @signature `Lc2/f;.c:(ILs3/z;)Lc2/f;` @kind static;
  #L1f428c.  v7:= temp @kind object;
  #L1f428e.  call temp:= `getType`(v7) @signature `Lc2/f;.getType:()I` @kind virtual;
  #L1f4294.  v1:= temp;
  #L1f4296.  v2:= 0I;
  #L1f4298.  if v1 != v0 then goto L1f4358;
  #L1f429c.  v0:= constclass @type ^`c2.c` @kind object;
  #L1f42a0.  call temp:= `b`(v7, v0) @signature `Lc2/f;.b:(Ljava/lang/Class;)Lc2/a;` @kind virtual;
  #L1f42a6.  v0:= temp @kind object;
  #L1f42a8.  v0:= (`c2.c`) v0 @kind object;
  #L1f42ac.  if v0 == 0 then goto L1f434a;
  #L1f42b0.  v6.`c2.b.e` @type ^`c2.c` := v0 @kind object;
  #L1f42b4.  v1:= v0.`c2.c.c` @type ^`int`;
  #L1f42b8.  v1:= (`long`) v1 @kind i2l;
  #L1f42ba.  v0:= v0.`c2.c.a` @type ^`int`;
  #L1f42be.  v3:= (`long`) v0 @kind i2l;
  #L1f42c0.  v1:= v1 * v3 @kind long;
  #L1f42c4.  v6.`c2.b.f` @type ^`long` := v1 @kind wide;
  #L1f42c8.  v0:= new `java.util.ArrayList`;
  #L1f42cc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f42d2.  v7:= v7.`c2.f.a` @type ^`m5.q` @kind object;
  #L1f42d6.  call temp:= `u`(v7) @signature `Lm5/q;.u:()Lm5/s0;` @kind virtual;
  #L1f42dc.  v7:= temp @kind object;
  #L1f42de.  v1:= 0I;
  #L1f42e0.  v2:= 0I;
  #L1f42e2.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f42e8.  v3:= temp;
  #L1f42ea.  if v3 == 0 then goto L1f432a;
  #L1f42ee.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f42f4.  v3:= temp @kind object;
  #L1f42f6.  v3:= (`c2.a`) v3 @kind object;
  #L1f42fa.  call temp:= `getType`(v3) @signature `Lc2/a;.getType:()I` @kind interface;
  #L1f4300.  v4:= temp;
  #L1f4302.  v5:= 1819440243I;
  #L1f4308.  if v4 != v5 then goto L1f42e2;
  #L1f430c.  v3:= (`c2.f`) v3 @kind object;
  #L1f4310.  v4:= v2 + 1;
  #L1f4314.  call temp:= `l`(v6, v3, v2) @signature `Lc2/b;.l:(Lc2/f;I)Lc2/e;` @kind direct;
  #L1f431a.  v2:= temp @kind object;
  #L1f431c.  if v2 == 0 then goto L1f4326;
  #L1f4320.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f4326.  v2:= v4;
  #L1f4328.  goto L1f42e2;
  #L1f432a.  v7:= new `c2.e`[v1];
  #L1f432e.  call temp:= `toArray`(v0, v7) @signature `Ljava/util/ArrayList;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L1f4334.  v7:= temp @kind object;
  #L1f4336.  v7:= (`c2.e`[]) v7 @kind object;
  #L1f433a.  v6.`c2.b.g` @type ^`c2.e`[] := v7 @kind object;
  #L1f433e.  v7:= v6.`c2.b.d` @type ^`a2.n` @kind object;
  #L1f4342.  call `h`(v7) @signature `La2/n;.h:()V` @kind interface;
  #L1f4348.  return @kind void;
  #L1f434a.  v7:= "AviHeader not found" @kind object;
  #L1f434e.  call temp:= `a`(v7, v2) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L1f4354.  v7:= temp @kind object;
  #L1f4356.  throw v7;
  #L1f4358.  v0:= new `java.lang.StringBuilder`;
  #L1f435c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f4362.  v1:= "Unexpected header list type " @kind object;
  #L1f4366.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f436c.  call temp:= `getType`(v7) @signature `Lc2/f;.getType:()I` @kind virtual;
  #L1f4372.  v7:= temp;
  #L1f4374.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f437a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f4380.  v7:= temp @kind object;
  #L1f4382.  call temp:= `a`(v7, v2) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L1f4388.  v7:= temp @kind object;
  #L1f438a.  throw v7;
}
procedure `void` `i`(`c2.b` v7 @kind this, `s3.z` v8 @kind object) @signature `Lc2/b;.i:(Ls3/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1f439c.  call temp:= `k`(v7, v8) @signature `Lc2/b;.k:(Ls3/z;)J` @kind direct;
  #L1f43a2.  v0:= temp @kind wide;
  #L1f43a4.  call temp:= `a`(v8) @signature `Ls3/z;.a:()I` @kind virtual;
  #L1f43aa.  v2:= temp;
  #L1f43ac.  v3:= 16I;
  #L1f43b0.  if v2 < v3 then goto L1f43f8;
  #L1f43b4.  call temp:= `p`(v8) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f43ba.  v2:= temp;
  #L1f43bc.  call temp:= `p`(v8) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f43c2.  v4:= temp;
  #L1f43c4.  call temp:= `p`(v8) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f43ca.  v5:= temp;
  #L1f43cc.  v5:= (`long`) v5 @kind i2l;
  #L1f43ce.  v5:= v5 + v0 @kind long;
  #L1f43d0.  call temp:= `p`(v8) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f43d6.  call temp:= `f`(v7, v2) @signature `Lc2/b;.f:(I)Lc2/e;` @kind direct;
  #L1f43dc.  v2:= temp @kind object;
  #L1f43de.  if v2 != 0 then goto L1f43e4;
  #L1f43e2.  goto L1f43a4;
  #L1f43e4.  v4:= v4 ^& v3 @kind int;
  #L1f43e6.  if v4 != v3 then goto L1f43f0;
  #L1f43ea.  call `b`(v2, v5) @signature `Lc2/e;.b:(J)V` @kind virtual;
  #L1f43f0.  call `k`(v2) @signature `Lc2/e;.k:()V` @kind virtual;
  #L1f43f6.  goto L1f43a4;
  #L1f43f8.  v8:= v7.`c2.b.g` @type ^`c2.e`[] @kind object;
  #L1f43fc.  v0:= length @variable v8;
  #L1f43fe.  v1:= 0I;
  #L1f4400.  if v1 >= v0 then goto L1f4414;
  #L1f4404.  v2:= v8[v1] @kind object;
  #L1f4408.  call `c`(v2) @signature `Lc2/e;.c:()V` @kind virtual;
  #L1f440e.  v1:= v1 + 1;
  #L1f4412.  goto L1f4400;
  #L1f4414.  v8:= 1I;
  #L1f4416.  v7.`c2.b.n` @type ^`boolean` := v8 @kind boolean;
  #L1f441a.  v8:= v7.`c2.b.d` @type ^`a2.n` @kind object;
  #L1f441e.  v0:= new `c2.b$b`;
  #L1f4422.  v1:= v7.`c2.b.f` @type ^`long` @kind wide;
  #L1f4426.  call `<init>`(v0, v7, v1) @signature `Lc2/b$b;.<init>:(Lc2/b;J)V` @kind direct;
  #L1f442c.  call `m`(v8, v0) @signature `La2/n;.m:(La2/a0;)V` @kind interface;
  #L1f4432.  return @kind void;
}
procedure `long` `k`(`c2.b` v8 @kind this, `s3.z` v9 @kind object) @signature `Lc2/b;.k:(Ls3/z;)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1f4158.  call temp:= `a`(v9) @signature `Ls3/z;.a:()I` @kind virtual;
  #L1f415e.  v0:= temp;
  #L1f4160.  v1:= 0L;
  #L1f4164.  v3:= 16I;
  #L1f4168.  if v0 >= v3 then goto L1f416e;
  #L1f416c.  return v1 @kind wide;
  #L1f416e.  call temp:= `e`(v9) @signature `Ls3/z;.e:()I` @kind virtual;
  #L1f4174.  v0:= temp;
  #L1f4176.  v3:= 8I;
  #L1f417a.  call `P`(v9, v3) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L1f4180.  call temp:= `p`(v9) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f4186.  v3:= temp;
  #L1f4188.  v3:= (`long`) v3 @kind i2l;
  #L1f418a.  v5:= v8.`c2.b.k` @type ^`long` @kind wide;
  #L1f418e.  v7:= lcmp(v3, v5);
  #L1f4192.  if v7 <= 0 then goto L1f4198;
  #L1f4196.  goto L1f419e;
  #L1f4198.  v1:= 8L;
  #L1f419c.  v1:= v1 + v5 @kind long;
  #L1f419e.  call `O`(v9, v0) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L1f41a4.  return v1 @kind wide;
}
procedure `c2.e` `l`(`c2.b` v13 @kind this, `c2.f` v14 @kind object, `int` v15 ) @signature `Lc2/b;.l:(Lc2/f;I)Lc2/e;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1f3c28.  v0:= constclass @type ^`c2.d` @kind object;
  #L1f3c2c.  call temp:= `b`(v14, v0) @signature `Lc2/f;.b:(Ljava/lang/Class;)Lc2/a;` @kind virtual;
  #L1f3c32.  v0:= temp @kind object;
  #L1f3c34.  v0:= (`c2.d`) v0 @kind object;
  #L1f3c38.  v1:= constclass @type ^`c2.g` @kind object;
  #L1f3c3c.  call temp:= `b`(v14, v1) @signature `Lc2/f;.b:(Ljava/lang/Class;)Lc2/a;` @kind virtual;
  #L1f3c42.  v1:= temp @kind object;
  #L1f3c44.  v1:= (`c2.g`) v1 @kind object;
  #L1f3c48.  v2:= "AviExtractor" @kind object;
  #L1f3c4c.  v3:= 0I;
  #L1f3c4e.  if v0 != 0 then goto L1f3c5e;
  #L1f3c52.  v14:= "Missing Stream Header" @kind object;
  #L1f3c56.  call `h`(v2, v14) @signature `Ls3/q;.h:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L1f3c5c.  return v3 @kind object;
  #L1f3c5e.  if v1 != 0 then goto L1f3c68;
  #L1f3c62.  v14:= "Missing Stream Format" @kind object;
  #L1f3c66.  goto L1f3c56;
  #L1f3c68.  call temp:= `a`(v0) @signature `Lc2/d;.a:()J` @kind virtual;
  #L1f3c6e.  v11:= temp @kind wide;
  #L1f3c70.  v1:= v1.`c2.g.a` @type ^`v1.j1` @kind object;
  #L1f3c74.  call temp:= `b`(v1) @signature `Lv1/j1;.b:()Lv1/j1$b;` @kind virtual;
  #L1f3c7a.  v2:= temp @kind object;
  #L1f3c7c.  call temp:= `R`(v2, v15) @signature `Lv1/j1$b;.R:(I)Lv1/j1$b;` @kind virtual;
  #L1f3c82.  v4:= v0.`c2.d.e` @type ^`int`;
  #L1f3c86.  if v4 == 0 then goto L1f3c90;
  #L1f3c8a.  call temp:= `W`(v2, v4) @signature `Lv1/j1$b;.W:(I)Lv1/j1$b;` @kind virtual;
  #L1f3c90.  v4:= constclass @type ^`c2.h` @kind object;
  #L1f3c94.  call temp:= `b`(v14, v4) @signature `Lc2/f;.b:(Ljava/lang/Class;)Lc2/a;` @kind virtual;
  #L1f3c9a.  v14:= temp @kind object;
  #L1f3c9c.  v14:= (`c2.h`) v14 @kind object;
  #L1f3ca0.  if v14 == 0 then goto L1f3cae;
  #L1f3ca4.  v14:= v14.`c2.h.a` @type ^`java.lang.String` @kind object;
  #L1f3ca8.  call temp:= `U`(v2, v14) @signature `Lv1/j1$b;.U:(Ljava/lang/String;)Lv1/j1$b;` @kind virtual;
  #L1f3cae.  v14:= v1.`v1.j1.z` @type ^`java.lang.String` @kind object;
  #L1f3cb2.  call temp:= `k`(v14) @signature `Ls3/u;.k:(Ljava/lang/String;)I` @kind static;
  #L1f3cb8.  v6:= temp;
  #L1f3cba.  v14:= 1I;
  #L1f3cbc.  if v6 == v14 then goto L1f3cca;
  #L1f3cc0.  v14:= 2I;
  #L1f3cc2.  if v6 != v14 then goto L1f3cc8;
  #L1f3cc6.  goto L1f3cca;
  #L1f3cc8.  return v3 @kind object;
  #L1f3cca.  v14:= v13.`c2.b.d` @type ^`a2.n` @kind object;
  #L1f3cce.  call temp:= `e`(v14, v15, v6) @signature `La2/n;.e:(II)La2/d0;` @kind interface;
  #L1f3cd4.  v10:= temp @kind object;
  #L1f3cd6.  call temp:= `E`(v2) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L1f3cdc.  v14:= temp @kind object;
  #L1f3cde.  call `b`(v10, v14) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L1f3ce4.  v14:= new `c2.e`;
  #L1f3ce8.  v9:= v0.`c2.d.d` @type ^`int`;
  #L1f3cec.  v4:= v14 @kind object;
  #L1f3cee.  v5:= v15;
  #L1f3cf0.  v7:= v11 @kind wide;
  #L1f3cf2.  call `<init>`(v4, v5, v6, v7, v9, v10) @signature `Lc2/e;.<init>:(IIJILa2/d0;)V` @kind direct;
  #L1f3cf8.  v13.`c2.b.f` @type ^`long` := v11 @kind wide;
  #L1f3cfc.  return v14 @kind object;
}
procedure `int` `m`(`c2.b` v7 @kind this, `a2.m` v8 @kind object) @signature `Lc2/b;.m:(La2/m;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1f4038.  call temp:= `q`(v8) @signature `La2/m;.q:()J` @kind interface;
  #L1f403e.  v0:= temp @kind wide;
  #L1f4040.  v2:= v7.`c2.b.l` @type ^`long` @kind wide;
  #L1f4044.  v4:= lcmp(v0, v2);
  #L1f4048.  if v4 < 0 then goto L1f4050;
  #L1f404c.  v8:= -1I;
  #L1f404e.  return v8;
  #L1f4050.  v0:= v7.`c2.b.i` @type ^`c2.e` @kind object;
  #L1f4054.  v1:= 0I;
  #L1f4056.  if v0 == 0 then goto L1f406e;
  #L1f405a.  call temp:= `m`(v0, v8) @signature `Lc2/e;.m:(La2/m;)Z` @kind virtual;
  #L1f4060.  v8:= temp;
  #L1f4062.  if v8 == 0 then goto L1f4144;
  #L1f4066.  v8:= 0I;
  #L1f4068.  v7.`c2.b.i` @type ^`c2.e` := v8 @kind object;
  #L1f406c.  goto L1f4144;
  #L1f406e.  call `e`(v8) @signature `Lc2/b;.e:(La2/m;)V` @kind static;
  #L1f4074.  v0:= v7.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f4078.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L1f407e.  v0:= temp @kind object;
  #L1f4080.  v2:= 12I;
  #L1f4084.  call `o`(v8, v0, v1, v2) @signature `La2/m;.o:([BII)V` @kind interface;
  #L1f408a.  v0:= v7.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f408e.  call `O`(v0, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L1f4094.  v0:= v7.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f4098.  call temp:= `p`(v0) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f409e.  v0:= temp;
  #L1f40a0.  v3:= 1414744396I;
  #L1f40a6.  v4:= 8I;
  #L1f40aa.  if v0 != v3 then goto L1f40e2;
  #L1f40ae.  v0:= v7.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f40b2.  call `O`(v0, v4) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L1f40b8.  v0:= v7.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f40bc.  call temp:= `p`(v0) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f40c2.  v0:= temp;
  #L1f40c4.  v3:= 1769369453I;
  #L1f40ca.  if v0 != v3 then goto L1f40d0;
  #L1f40ce.  goto L1f40d4;
  #L1f40d0.  v2:= 8I;
  #L1f40d4.  call `j`(v8, v2) @signature `La2/m;.j:(I)V` @kind interface;
  #L1f40da.  call `i`(v8) @signature `La2/m;.i:()V` @kind interface;
  #L1f40e0.  return v1;
  #L1f40e2.  v2:= v7.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f40e6.  call temp:= `p`(v2) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f40ec.  v2:= temp;
  #L1f40ee.  v3:= 1263424842I;
  #L1f40f4.  if v0 != v3 then goto L1f4110;
  #L1f40f8.  call temp:= `q`(v8) @signature `La2/m;.q:()J` @kind interface;
  #L1f40fe.  v3:= temp @kind wide;
  #L1f4100.  v5:= (`long`) v2 @kind i2l;
  #L1f4102.  v3:= v3 + v5 @kind long;
  #L1f4104.  v5:= 8L;
  #L1f4108.  v3:= v3 + v5 @kind long;
  #L1f410a.  v7.`c2.b.h` @type ^`long` := v3 @kind wide;
  #L1f410e.  return v1;
  #L1f4110.  call `j`(v8, v4) @signature `La2/m;.j:(I)V` @kind interface;
  #L1f4116.  call `i`(v8) @signature `La2/m;.i:()V` @kind interface;
  #L1f411c.  call temp:= `f`(v7, v0) @signature `Lc2/b;.f:(I)Lc2/e;` @kind direct;
  #L1f4122.  v0:= temp @kind object;
  #L1f4124.  if v0 != 0 then goto L1f413a;
  #L1f4128.  call temp:= `q`(v8) @signature `La2/m;.q:()J` @kind interface;
  #L1f412e.  v3:= temp @kind wide;
  #L1f4130.  v5:= (`long`) v2 @kind i2l;
  #L1f4132.  v3:= v3 + v5 @kind long;
  #L1f4134.  v7.`c2.b.h` @type ^`long` := v3 @kind wide;
  #L1f4138.  return v1;
  #L1f413a.  call `n`(v0, v2) @signature `Lc2/e;.n:(I)V` @kind virtual;
  #L1f4140.  v7.`c2.b.i` @type ^`c2.e` := v0 @kind object;
  #L1f4144.  return v1;
}
procedure `boolean` `n`(`c2.b` v9 @kind this, `a2.m` v10 @kind object, `a2.z` v11 @kind object) @signature `Lc2/b;.n:(La2/m;La2/z;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1f3b1c.  v0:= v9.`c2.b.h` @type ^`long` @kind wide;
  #L1f3b20.  v2:= -1L;
  #L1f3b24.  v4:= lcmp(v0, v2);
  #L1f3b28.  if v4 == 0 then goto L1f3b66;
  #L1f3b2c.  call temp:= `q`(v10) @signature `La2/m;.q:()J` @kind interface;
  #L1f3b32.  v0:= temp @kind wide;
  #L1f3b34.  v4:= v9.`c2.b.h` @type ^`long` @kind wide;
  #L1f3b38.  v6:= lcmp(v4, v0);
  #L1f3b3c.  if v6 < 0 then goto L1f3b5e;
  #L1f3b40.  v6:= 262144L;
  #L1f3b46.  v6:= v6 + v0 @kind long;
  #L1f3b48.  v8:= lcmp(v4, v6);
  #L1f3b4c.  if v8 <= 0 then goto L1f3b52;
  #L1f3b50.  goto L1f3b5e;
  #L1f3b52.  v4:= v4 - v0 @kind long;
  #L1f3b54.  v11:= (`int`) v4 @kind l2i;
  #L1f3b56.  call `j`(v10, v11) @signature `La2/m;.j:(I)V` @kind interface;
  #L1f3b5c.  goto L1f3b66;
  #L1f3b5e.  v11.`a2.z.a` @type ^`long` := v4 @kind wide;
  #L1f3b62.  v10:= 1I;
  #L1f3b64.  goto L1f3b68;
  #L1f3b66.  v10:= 0I;
  #L1f3b68.  v9.`c2.b.h` @type ^`long` := v2 @kind wide;
  #L1f3b6c.  return v10;
}
procedure `void` `a`(`c2.b` v0 @kind this) @signature `Lc2/b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L1f4444.  return @kind void;
}
procedure `void` `b`(`c2.b` v3 @kind this, `long` v4 , `long` v6 ) @signature `Lc2/b;.b:(JJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f4458.  v6:= -1L;
  #L1f445c.  v3.`c2.b.h` @type ^`long` := v6 @kind wide;
  #L1f4460.  v6:= 0I;
  #L1f4462.  v3.`c2.b.i` @type ^`c2.e` := v6 @kind object;
  #L1f4466.  v6:= v3.`c2.b.g` @type ^`c2.e`[] @kind object;
  #L1f446a.  v7:= length @variable v6;
  #L1f446c.  v0:= 0I;
  #L1f446e.  v1:= 0I;
  #L1f4470.  if v1 >= v7 then goto L1f4484;
  #L1f4474.  v2:= v6[v1] @kind object;
  #L1f4478.  call `o`(v2, v4) @signature `Lc2/e;.o:(J)V` @kind virtual;
  #L1f447e.  v1:= v1 + 1;
  #L1f4482.  goto L1f4470;
  #L1f4484.  v6:= 0L;
  #L1f4488.  v1:= lcmp(v4, v6);
  #L1f448c.  if v1 != 0 then goto L1f44a8;
  #L1f4490.  v4:= v3.`c2.b.g` @type ^`c2.e`[] @kind object;
  #L1f4494.  v4:= length @variable v4;
  #L1f4496.  if v4 != 0 then goto L1f44a0;
  #L1f449a.  v3.`c2.b.c` @type ^`int` := v0;
  #L1f449e.  goto L1f44a6;
  #L1f44a0.  v4:= 3I;
  #L1f44a2.  v3.`c2.b.c` @type ^`int` := v4;
  #L1f44a6.  return @kind void;
  #L1f44a8.  v4:= 6I;
  #L1f44aa.  v3.`c2.b.c` @type ^`int` := v4;
  #L1f44ae.  return @kind void;
}
procedure `void` `d`(`c2.b` v2 @kind this, `a2.n` v3 @kind object) @signature `Lc2/b;.d:(La2/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f425c.  v0:= 0I;
  #L1f425e.  v2.`c2.b.c` @type ^`int` := v0;
  #L1f4262.  v2.`c2.b.d` @type ^`a2.n` := v3 @kind object;
  #L1f4266.  v0:= -1L;
  #L1f426a.  v2.`c2.b.h` @type ^`long` := v0 @kind wide;
  #L1f426e.  return @kind void;
}
procedure `boolean` `g`(`c2.b` v3 @kind this, `a2.m` v4 @kind object) @signature `Lc2/b;.g:(La2/m;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f3b80.  v0:= v3.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3b84.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L1f3b8a.  v0:= temp @kind object;
  #L1f3b8c.  v1:= 0I;
  #L1f3b8e.  v2:= 12I;
  #L1f3b92.  call `o`(v4, v0, v1, v2) @signature `La2/m;.o:([BII)V` @kind interface;
  #L1f3b98.  v4:= v3.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3b9c.  call `O`(v4, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L1f3ba2.  v4:= v3.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3ba6.  call temp:= `p`(v4) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f3bac.  v4:= temp;
  #L1f3bae.  v0:= 1179011410I;
  #L1f3bb4.  if v4 == v0 then goto L1f3bba;
  #L1f3bb8.  return v1;
  #L1f3bba.  v4:= v3.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3bbe.  v0:= 4I;
  #L1f3bc0.  call `P`(v4, v0) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L1f3bc6.  v4:= v3.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3bca.  call temp:= `p`(v4) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f3bd0.  v4:= temp;
  #L1f3bd2.  v0:= 541677121I;
  #L1f3bd8.  if v4 != v0 then goto L1f3bde;
  #L1f3bdc.  v1:= 1I;
  #L1f3bde.  return v1;
}
procedure `int` `j`(`c2.b` v12 @kind this, `a2.m` v13 @kind object, `a2.z` v14 @kind object) @signature `Lc2/b;.j:(La2/m;La2/z;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1f3d28.  call temp:= `n`(v12, v13, v14) @signature `Lc2/b;.n:(La2/m;La2/z;)Z` @kind direct;
  #L1f3d2e.  v14:= temp;
  #L1f3d30.  v0:= 1I;
  #L1f3d32.  if v14 == 0 then goto L1f3d38;
  #L1f3d36.  return v0;
  #L1f3d38.  v14:= v12.`c2.b.c` @type ^`int`;
  #L1f3d3c.  v1:= 0I;
  #L1f3d3e.  v2:= 6I;
  #L1f3d40.  v3:= 4I;
  #L1f3d42.  v4:= 12I;
  #L1f3d46.  v5:= 0I;
  #L1f3d48.  goto L1f4004;
  #L1f3d4e.  v13:= new `java.lang.AssertionError`;
  #L1f3d52.  call `<init>`(v13) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1f3d58.  throw v13;
  #L1f3d5a.  call temp:= `m`(v12, v13) @signature `Lc2/b;.m:(La2/m;)I` @kind direct;
  #L1f3d60.  v13:= temp;
  #L1f3d62.  return v13;
  #L1f3d64.  v14:= new `s3.z`;
  #L1f3d68.  v0:= v12.`c2.b.m` @type ^`int`;
  #L1f3d6c.  call `<init>`(v14, v0) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L1f3d72.  call temp:= `d`(v14) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L1f3d78.  v0:= temp @kind object;
  #L1f3d7a.  v1:= v12.`c2.b.m` @type ^`int`;
  #L1f3d7e.  call `readFully`(v13, v0, v5, v1) @signature `La2/m;.readFully:([BII)V` @kind interface;
  #L1f3d84.  call `i`(v12, v14) @signature `Lc2/b;.i:(Ls3/z;)V` @kind direct;
  #L1f3d8a.  v12.`c2.b.c` @type ^`int` := v2;
  #L1f3d8e.  v13:= v12.`c2.b.k` @type ^`long` @kind wide;
  #L1f3d92.  v12.`c2.b.h` @type ^`long` := v13 @kind wide;
  #L1f3d96.  return v5;
  #L1f3d98.  v14:= v12.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3d9c.  call temp:= `d`(v14) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L1f3da2.  v14:= temp @kind object;
  #L1f3da4.  v0:= 8I;
  #L1f3da8.  call `readFully`(v13, v14, v5, v0) @signature `La2/m;.readFully:([BII)V` @kind interface;
  #L1f3dae.  v14:= v12.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3db2.  call `O`(v14, v5) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L1f3db8.  v14:= v12.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3dbc.  call temp:= `p`(v14) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f3dc2.  v14:= temp;
  #L1f3dc4.  v0:= v12.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3dc8.  call temp:= `p`(v0) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f3dce.  v0:= temp;
  #L1f3dd0.  v1:= 829973609I;
  #L1f3dd6.  if v14 != v1 then goto L1f3de6;
  #L1f3dda.  v13:= 5I;
  #L1f3ddc.  v12.`c2.b.c` @type ^`int` := v13;
  #L1f3de0.  v12.`c2.b.m` @type ^`int` := v0;
  #L1f3de4.  goto L1f3df6;
  #L1f3de6.  call temp:= `q`(v13) @signature `La2/m;.q:()J` @kind interface;
  #L1f3dec.  v13:= temp @kind wide;
  #L1f3dee.  v0:= (`long`) v0 @kind i2l;
  #L1f3df0.  v13:= v13 + v0 @kind long;
  #L1f3df2.  v12.`c2.b.h` @type ^`long` := v13 @kind wide;
  #L1f3df6.  return v5;
  #L1f3df8.  v6:= v12.`c2.b.k` @type ^`long` @kind wide;
  #L1f3dfc.  v8:= -1L;
  #L1f3e00.  v14:= lcmp(v6, v8);
  #L1f3e04.  if v14 == 0 then goto L1f3e22;
  #L1f3e08.  call temp:= `q`(v13) @signature `La2/m;.q:()J` @kind interface;
  #L1f3e0e.  v6:= temp @kind wide;
  #L1f3e10.  v8:= v12.`c2.b.k` @type ^`long` @kind wide;
  #L1f3e14.  v14:= lcmp(v6, v8);
  #L1f3e18.  if v14 == 0 then goto L1f3e22;
  #L1f3e1c.  v12.`c2.b.h` @type ^`long` := v8 @kind wide;
  #L1f3e20.  return v5;
  #L1f3e22.  v14:= v12.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3e26.  call temp:= `d`(v14) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L1f3e2c.  v14:= temp @kind object;
  #L1f3e2e.  call `o`(v13, v14, v5, v4) @signature `La2/m;.o:([BII)V` @kind interface;
  #L1f3e34.  call `i`(v13) @signature `La2/m;.i:()V` @kind interface;
  #L1f3e3a.  v14:= v12.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3e3e.  call `O`(v14, v5) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L1f3e44.  v14:= v12.`c2.b.b` @type ^`c2.b$c` @kind object;
  #L1f3e48.  v1:= v12.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3e4c.  call `a`(v14, v1) @signature `Lc2/b$c;.a:(Ls3/z;)V` @kind virtual;
  #L1f3e52.  v14:= v12.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3e56.  call temp:= `p`(v14) @signature `Ls3/z;.p:()I` @kind virtual;
  #L1f3e5c.  v14:= temp;
  #L1f3e5e.  v1:= v12.`c2.b.b` @type ^`c2.b$c` @kind object;
  #L1f3e62.  v1:= v1.`c2.b$c.a` @type ^`int`;
  #L1f3e66.  v6:= 1179011410I;
  #L1f3e6c.  if v1 != v6 then goto L1f3e78;
  #L1f3e70.  call `j`(v13, v4) @signature `La2/m;.j:(I)V` @kind interface;
  #L1f3e76.  return v5;
  #L1f3e78.  v4:= 1414744396I;
  #L1f3e7e.  v6:= 8L;
  #L1f3e82.  if v1 != v4 then goto L1f3f16;
  #L1f3e86.  v1:= 1769369453I;
  #L1f3e8c.  if v14 == v1 then goto L1f3e92;
  #L1f3e90.  goto L1f3f16;
  #L1f3e92.  call temp:= `q`(v13) @signature `La2/m;.q:()J` @kind interface;
  #L1f3e98.  v8:= temp @kind wide;
  #L1f3e9a.  v12.`c2.b.k` @type ^`long` := v8 @kind wide;
  #L1f3e9e.  v14:= v12.`c2.b.b` @type ^`c2.b$c` @kind object;
  #L1f3ea2.  v14:= v14.`c2.b$c.b` @type ^`int`;
  #L1f3ea6.  v10:= (`long`) v14 @kind i2l;
  #L1f3ea8.  v8:= v8 + v10 @kind long;
  #L1f3eaa.  v8:= v8 + v6 @kind long;
  #L1f3eac.  v12.`c2.b.l` @type ^`long` := v8 @kind wide;
  #L1f3eb0.  v14:= v12.`c2.b.n` @type ^`boolean` @kind boolean;
  #L1f3eb4.  if v14 != 0 then goto L1f3efe;
  #L1f3eb8.  v14:= v12.`c2.b.e` @type ^`c2.c` @kind object;
  #L1f3ebc.  call temp:= `e`(v14) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1f3ec2.  v14:= temp @kind object;
  #L1f3ec4.  v14:= (`c2.c`) v14 @kind object;
  #L1f3ec8.  call temp:= `a`(v14) @signature `Lc2/c;.a:()Z` @kind virtual;
  #L1f3ece.  v14:= temp;
  #L1f3ed0.  if v14 == 0 then goto L1f3ee2;
  #L1f3ed4.  v12.`c2.b.c` @type ^`int` := v3;
  #L1f3ed8.  v13:= v12.`c2.b.l` @type ^`long` @kind wide;
  #L1f3edc.  v12.`c2.b.h` @type ^`long` := v13 @kind wide;
  #L1f3ee0.  return v5;
  #L1f3ee2.  v14:= v12.`c2.b.d` @type ^`a2.n` @kind object;
  #L1f3ee6.  v1:= new `a2.a0$b`;
  #L1f3eea.  v3:= v12.`c2.b.f` @type ^`long` @kind wide;
  #L1f3eee.  call `<init>`(v1, v3) @signature `La2/a0$b;.<init>:(J)V` @kind direct;
  #L1f3ef4.  call `m`(v14, v1) @signature `La2/n;.m:(La2/a0;)V` @kind interface;
  #L1f3efa.  v12.`c2.b.n` @type ^`boolean` := v0 @kind boolean;
  #L1f3efe.  call temp:= `q`(v13) @signature `La2/m;.q:()J` @kind interface;
  #L1f3f04.  v13:= temp @kind wide;
  #L1f3f06.  v0:= 12L;
  #L1f3f0a.  v13:= v13 + v0 @kind long;
  #L1f3f0c.  v12.`c2.b.h` @type ^`long` := v13 @kind wide;
  #L1f3f10.  v12.`c2.b.c` @type ^`int` := v2;
  #L1f3f14.  return v5;
  #L1f3f16.  call temp:= `q`(v13) @signature `La2/m;.q:()J` @kind interface;
  #L1f3f1c.  v13:= temp @kind wide;
  #L1f3f1e.  v0:= v12.`c2.b.b` @type ^`c2.b$c` @kind object;
  #L1f3f22.  v0:= v0.`c2.b$c.b` @type ^`int`;
  #L1f3f26.  v0:= (`long`) v0 @kind i2l;
  #L1f3f28.  v13:= v13 + v0 @kind long;
  #L1f3f2a.  v13:= v13 + v6 @kind long;
  #L1f3f2c.  v12.`c2.b.h` @type ^`long` := v13 @kind wide;
  #L1f3f30.  return v5;
  #L1f3f32.  v14:= v12.`c2.b.j` @type ^`int`;
  #L1f3f36.  v14:= v14 - v3 @kind int;
  #L1f3f38.  v0:= new `s3.z`;
  #L1f3f3c.  call `<init>`(v0, v14) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L1f3f42.  call temp:= `d`(v0) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L1f3f48.  v1:= temp @kind object;
  #L1f3f4a.  call `readFully`(v13, v1, v5, v14) @signature `La2/m;.readFully:([BII)V` @kind interface;
  #L1f3f50.  call `h`(v12, v0) @signature `Lc2/b;.h:(Ls3/z;)V` @kind direct;
  #L1f3f56.  v13:= 3I;
  #L1f3f58.  v12.`c2.b.c` @type ^`int` := v13;
  #L1f3f5c.  return v5;
  #L1f3f5e.  v14:= v12.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3f62.  call temp:= `d`(v14) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L1f3f68.  v14:= temp @kind object;
  #L1f3f6a.  call `readFully`(v13, v14, v5, v4) @signature `La2/m;.readFully:([BII)V` @kind interface;
  #L1f3f70.  v13:= v12.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3f74.  call `O`(v13, v5) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L1f3f7a.  v13:= v12.`c2.b.b` @type ^`c2.b$c` @kind object;
  #L1f3f7e.  v14:= v12.`c2.b.a` @type ^`s3.z` @kind object;
  #L1f3f82.  call `b`(v13, v14) @signature `Lc2/b$c;.b:(Ls3/z;)V` @kind virtual;
  #L1f3f88.  v13:= v12.`c2.b.b` @type ^`c2.b$c` @kind object;
  #L1f3f8c.  v14:= v13.`c2.b$c.c` @type ^`int`;
  #L1f3f90.  v0:= 1819436136I;
  #L1f3f96.  if v14 != v0 then goto L1f3faa;
  #L1f3f9a.  v13:= v13.`c2.b$c.b` @type ^`int`;
  #L1f3f9e.  v12.`c2.b.j` @type ^`int` := v13;
  #L1f3fa2.  v13:= 2I;
  #L1f3fa4.  v12.`c2.b.c` @type ^`int` := v13;
  #L1f3fa8.  return v5;
  #L1f3faa.  v13:= new `java.lang.StringBuilder`;
  #L1f3fae.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f3fb4.  v14:= "hdrl expected, found: " @kind object;
  #L1f3fb8.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f3fbe.  v14:= v12.`c2.b.b` @type ^`c2.b$c` @kind object;
  #L1f3fc2.  v14:= v14.`c2.b$c.c` @type ^`int`;
  #L1f3fc6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f3fcc.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f3fd2.  v13:= temp @kind object;
  #L1f3fd4.  call temp:= `a`(v13, v1) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L1f3fda.  v13:= temp @kind object;
  #L1f3fdc.  throw v13;
  #L1f3fde.  call temp:= `g`(v12, v13) @signature `Lc2/b;.g:(La2/m;)Z` @kind virtual;
  #L1f3fe4.  v14:= temp;
  #L1f3fe6.  if v14 == 0 then goto L1f3ff6;
  #L1f3fea.  call `j`(v13, v4) @signature `La2/m;.j:(I)V` @kind interface;
  #L1f3ff0.  v12.`c2.b.c` @type ^`int` := v0;
  #L1f3ff4.  return v5;
  #L1f3ff6.  v13:= "AVI Header List not found" @kind object;
  #L1f3ffa.  call temp:= `a`(v13, v1) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L1f4000.  v13:= temp @kind object;
  #L1f4002.  throw v13;
  #L1f4004.  switch v14
                  | 0 => goto L1f3fde
                  | 1 => goto L1f3f5e
                  | 2 => goto L1f3f32
                  | 3 => goto L1f3df8
                  | 4 => goto L1f3d98
                  | 5 => goto L1f3d64
                  | 6 => goto L1f3d5a
                  | else => goto L1f3d4e;
}
