record `tc.a` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<clinit>`() @signature `Ltc/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L472d18.  return @kind void;
}
procedure `void` `<init>`(`tc.a` v0 @kind this) @signature `Ltc/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L472d2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L472d32.  return @kind void;
}
procedure `java.lang.Object` `a`(`java.lang.Class` v3 @kind object, `java.lang.reflect.InvocationHandler` v4 @kind object) @signature `Ltc/a;.a:(Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L472cd4.  if v4 != 0 then goto L472cdc;
  #L472cd8.  v3:= 0I;
  #L472cda.  return v3 @kind object;
  #L472cdc.  v0:= constclass @type ^`tc.a` @kind object;
  #L472ce0.  call temp:= `getClassLoader`(v0) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L472ce6.  v0:= temp @kind object;
  #L472ce8.  v1:= 1I;
  #L472cea.  v1:= new `java.lang.Class`[v1];
  #L472cee.  v2:= 0I;
  #L472cf0.  v1[v2]:= v3 @kind object;
  #L472cf4.  call temp:= `newProxyInstance`(v0, v1, v4) @signature `Ljava/lang/reflect/Proxy;.newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;` @kind static;
  #L472cfa.  v4:= temp @kind object;
  #L472cfc.  call temp:= `cast`(v3, v4) @signature `Ljava/lang/Class;.cast:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L472d02.  v3:= temp @kind object;
  #L472d04.  return v3 @kind object;
}
procedure `boolean` `b`(`java.util.Collection` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Ltc/a;.b:(Ljava/util/Collection;Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L472c34.  call temp:= `contains`(v1, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L472c3a.  v0:= temp;
  #L472c3c.  if v0 != 0 then goto L472c80;
  #L472c40.  call temp:= `c`() @signature `Ltc/a;.c:()Z` @kind static;
  #L472c46.  v0:= temp;
  #L472c48.  if v0 == 0 then goto L472c7c;
  #L472c4c.  v0:= new `java.lang.StringBuilder`;
  #L472c50.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L472c56.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L472c5c.  v2:= ":dev" @kind object;
  #L472c60.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L472c66.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L472c6c.  v2:= temp @kind object;
  #L472c6e.  call temp:= `contains`(v1, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L472c74.  v1:= temp;
  #L472c76.  if v1 == 0 then goto L472c7c;
  #L472c7a.  goto L472c80;
  #L472c7c.  v1:= 0I;
  #L472c7e.  goto L472c82;
  #L472c80.  v1:= 1I;
  #L472c82.  return v1;
}
procedure `boolean` `c`() @signature `Ltc/a;.c:()Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L472c94.  v0:= `@@android.os.Build.TYPE` @type ^`java.lang.String` @kind object;
  #L472c98.  v1:= "eng" @kind object;
  #L472c9c.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L472ca2.  v1:= temp;
  #L472ca4.  if v1 != 0 then goto L472cbe;
  #L472ca8.  v1:= "userdebug" @kind object;
  #L472cac.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L472cb2.  v0:= temp;
  #L472cb4.  if v0 == 0 then goto L472cba;
  #L472cb8.  goto L472cbe;
  #L472cba.  v0:= 0I;
  #L472cbc.  goto L472cc0;
  #L472cbe.  v0:= 1I;
  #L472cc0.  return v0;
}
