record `f7.d` @kind class @AccessFlag PUBLIC {
  `java.util.List` `f7.d.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `f7.d.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f7.d` v2 @kind this, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lf7/d;.<init>:(Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L308f70.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L308f76.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L308f7c.  v0:= temp;
  #L308f7e.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L308f84.  v1:= temp;
  #L308f86.  v1:= v1 + -1;
  #L308f8a.  if v0 != v1 then goto L308f98;
  #L308f8e.  v2.`f7.d.a` @type ^`java.util.List` := v3 @kind object;
  #L308f92.  v2.`f7.d.b` @type ^`java.util.List` := v4 @kind object;
  #L308f96.  return @kind void;
  #L308f98.  v3:= new `java.lang.IllegalArgumentException`;
  #L308f9c.  v4:= "Number of posts need to be n-1 for n hashes in CompoundHash" @kind object;
  #L308fa0.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L308fa6.  throw v3;
}
procedure `void` `a`(`f7.n` v0 @kind object, `f7.d$b` v1 @kind object) @signature `Lf7/d;.a:(Lf7/n;Lf7/d$b;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L308fb8.  call `f`(v0, v1) @signature `Lf7/d;.f:(Lf7/n;Lf7/d$b;)V` @kind static;
  #L308fbe.  return @kind void;
}
procedure `f7.d` `b`(`f7.n` v1 @kind object) @signature `Lf7/d;.b:(Lf7/n;)Lf7/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L308e9c.  v0:= new `f7.d$c`;
  #L308ea0.  call `<init>`(v0, v1) @signature `Lf7/d$c;.<init>:(Lf7/n;)V` @kind direct;
  #L308ea6.  call temp:= `c`(v1, v0) @signature `Lf7/d;.c:(Lf7/n;Lf7/d$d;)Lf7/d;` @kind static;
  #L308eac.  v1:= temp @kind object;
  #L308eae.  return v1 @kind object;
}
procedure `f7.d` `c`(`f7.n` v1 @kind object, `f7.d$d` v2 @kind object) @signature `Lf7/d;.c:(Lf7/n;Lf7/d$d;)Lf7/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L308ec0.  call temp:= `isEmpty`(v1) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L308ec6.  v0:= temp;
  #L308ec8.  if v0 == 0 then goto L308eec;
  #L308ecc.  v1:= new `f7.d`;
  #L308ed0.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L308ed6.  v2:= temp @kind object;
  #L308ed8.  v0:= "" @kind object;
  #L308edc.  call temp:= `singletonList`(v0) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L308ee2.  v0:= temp @kind object;
  #L308ee4.  call `<init>`(v1, v2, v0) @signature `Lf7/d;.<init>:(Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L308eea.  return v1 @kind object;
  #L308eec.  v0:= new `f7.d$b`;
  #L308ef0.  call `<init>`(v0, v2) @signature `Lf7/d$b;.<init>:(Lf7/d$d;)V` @kind direct;
  #L308ef6.  call `f`(v1, v0) @signature `Lf7/d;.f:(Lf7/n;Lf7/d$b;)V` @kind static;
  #L308efc.  call `a`(v0) @signature `Lf7/d$b;.a:(Lf7/d$b;)V` @kind static;
  #L308f02.  v1:= new `f7.d`;
  #L308f06.  call temp:= `b`(v0) @signature `Lf7/d$b;.b:(Lf7/d$b;)Ljava/util/List;` @kind static;
  #L308f0c.  v2:= temp @kind object;
  #L308f0e.  call temp:= `c`(v0) @signature `Lf7/d$b;.c:(Lf7/d$b;)Ljava/util/List;` @kind static;
  #L308f14.  v0:= temp @kind object;
  #L308f16.  call `<init>`(v1, v2, v0) @signature `Lf7/d;.<init>:(Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L308f1c.  return v1 @kind object;
}
procedure `void` `f`(`f7.n` v2 @kind object, `f7.d$b` v3 @kind object) @signature `Lf7/d;.f:(Lf7/n;Lf7/d$b;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L308fd0.  call temp:= `A`(v2) @signature `Lf7/n;.A:()Z` @kind interface;
  #L308fd6.  v0:= temp;
  #L308fd8.  if v0 == 0 then goto L308fe8;
  #L308fdc.  v2:= (`f7.k`) v2 @kind object;
  #L308fe0.  call `d`(v3, v2) @signature `Lf7/d$b;.d:(Lf7/d$b;Lf7/k;)V` @kind static;
  #L308fe6.  goto L309012;
  #L308fe8.  call temp:= `isEmpty`(v2) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L308fee.  v0:= temp;
  #L308ff0.  if v0 != 0 then goto L309042;
  #L308ff4.  v0:= instanceof @variable v2 @type ^`f7.c` @kind boolean;
  #L308ff8.  if v0 == 0 then goto L309014;
  #L308ffc.  v2:= (`f7.c`) v2 @kind object;
  #L309000.  v0:= new `f7.d$a`;
  #L309004.  call `<init>`(v0, v3) @signature `Lf7/d$a;.<init>:(Lf7/d$b;)V` @kind direct;
  #L30900a.  v3:= 1I;
  #L30900c.  call `a0`(v2, v0, v3) @signature `Lf7/c;.a0:(Lf7/c$c;Z)V` @kind virtual;
  #L309012.  return @kind void;
  #L309014.  v3:= new `java.lang.IllegalStateException`;
  #L309018.  v0:= new `java.lang.StringBuilder`;
  #L30901c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L309022.  v1:= "Expected children node, but got: " @kind object;
  #L309026.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30902c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L309032.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L309038.  v2:= temp @kind object;
  #L30903a.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L309040.  throw v3;
  #L309042.  v2:= new `java.lang.IllegalArgumentException`;
  #L309046.  v3:= "Can't calculate hash on empty node!" @kind object;
  #L30904a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L309050.  throw v2;
}
procedure `java.util.List` `d`(`f7.d` v1 @kind this) @signature `Lf7/d;.d:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308f30.  v0:= v1.`f7.d.b` @type ^`java.util.List` @kind object;
  #L308f34.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L308f3a.  v0:= temp @kind object;
  #L308f3c.  return v0 @kind object;
}
procedure `java.util.List` `e`(`f7.d` v1 @kind this) @signature `Lf7/d;.e:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308f50.  v0:= v1.`f7.d.a` @type ^`java.util.List` @kind object;
  #L308f54.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L308f5a.  v0:= temp @kind object;
  #L308f5c.  return v0 @kind object;
}
