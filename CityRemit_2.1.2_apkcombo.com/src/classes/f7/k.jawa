record `f7.k` @kind class @AccessFlag PUBLIC_ABSTRACT extends `f7.n` @kind interface {
  `f7.n` `f7.k.o` @AccessFlag PROTECTED_FINAL;
  `java.lang.String` `f7.k.p` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`f7.k` v0 @kind this, `f7.n` v1 @kind object) @signature `Lf7/k;.<init>:(Lf7/n;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30a460.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30a466.  v0.`f7.k.o` @type ^`f7.n` := v1 @kind object;
  #L30a46a.  return @kind void;
}
procedure `int` `S`(`f7.l` v2 @kind object, `f7.f` v3 @kind object) @signature `Lf7/k;.S:(Lf7/l;Lf7/f;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L30a11c.  call temp:= `getValue`(v2) @signature `Lf7/l;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L30a122.  v2:= temp @kind object;
  #L30a124.  v2:= (`java.lang.Long`) v2 @kind object;
  #L30a128.  call temp:= `longValue`(v2) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L30a12e.  v0:= temp @kind wide;
  #L30a130.  v0:= (`double`) v0 @kind l2d;
  #L30a132.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L30a138.  v2:= temp @kind object;
  #L30a13a.  call temp:= `getValue`(v3) @signature `Lf7/f;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L30a140.  v3:= temp @kind object;
  #L30a142.  v3:= (`java.lang.Double`) v3 @kind object;
  #L30a146.  call temp:= `compareTo`(v2, v3) @signature `Ljava/lang/Double;.compareTo:(Ljava/lang/Double;)I` @kind virtual;
  #L30a14c.  v2:= temp;
  #L30a14e.  return v2;
}
procedure `boolean` `A`(`f7.k` v1 @kind this) @signature `Lf7/k;.A:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L309f90.  v0:= 1I;
  #L309f92.  return v0;
}
procedure `int` `C`(`f7.k` v1 @kind this) @signature `Lf7/k;.C:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30a218.  v0:= 0I;
  #L30a21a.  return v0;
}
procedure `f7.n` `H`(`f7.k` v1 @kind this, `x6.l` v2 @kind object) @signature `Lf7/k;.H:(Lx6/l;)Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L309fb8.  call temp:= `isEmpty`(v2) @signature `Lx6/l;.isEmpty:()Z` @kind virtual;
  #L309fbe.  v0:= temp;
  #L309fc0.  if v0 == 0 then goto L309fc6;
  #L309fc4.  return v1 @kind object;
  #L309fc6.  call temp:= `h0`(v2) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L309fcc.  v2:= temp @kind object;
  #L309fce.  call temp:= `t`(v2) @signature `Lf7/b;.t:()Z` @kind virtual;
  #L309fd4.  v2:= temp;
  #L309fd6.  if v2 == 0 then goto L309fe0;
  #L309fda.  v2:= v1.`f7.k.o` @type ^`f7.n` @kind object;
  #L309fde.  return v2 @kind object;
  #L309fe0.  call temp:= `e0`() @signature `Lf7/g;.e0:()Lf7/g;` @kind static;
  #L309fe6.  v2:= temp @kind object;
  #L309fe8.  return v2 @kind object;
}
procedure `boolean` `J`(`f7.k` v0 @kind this, `f7.b` v1 @kind object) @signature `Lf7/k;.J:(Lf7/b;)Z` @AccessFlag PUBLIC {
    temp;

  #L309f68.  v1:= 0I;
  #L309f6a.  return v1;
}
procedure `java.lang.Object` `R`(`f7.k` v2 @kind this, `boolean` v3 ) @signature `Lf7/k;.R:(Z)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30a26c.  if v3 == 0 then goto L30a2b6;
  #L30a270.  v3:= v2.`f7.k.o` @type ^`f7.n` @kind object;
  #L30a274.  call temp:= `isEmpty`(v3) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L30a27a.  v3:= temp;
  #L30a27c.  if v3 == 0 then goto L30a282;
  #L30a280.  goto L30a2b6;
  #L30a282.  v3:= new `java.util.HashMap`;
  #L30a286.  call `<init>`(v3) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L30a28c.  call temp:= `getValue`(v2) @signature `Lf7/n;.getValue:()Ljava/lang/Object;` @kind interface;
  #L30a292.  v0:= temp @kind object;
  #L30a294.  v1:= ".value" @kind object;
  #L30a298.  call temp:= `put`(v3, v1, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30a29e.  v0:= v2.`f7.k.o` @type ^`f7.n` @kind object;
  #L30a2a2.  call temp:= `getValue`(v0) @signature `Lf7/n;.getValue:()Ljava/lang/Object;` @kind interface;
  #L30a2a8.  v0:= temp @kind object;
  #L30a2aa.  v1:= ".priority" @kind object;
  #L30a2ae.  call temp:= `put`(v3, v1, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30a2b4.  return v3 @kind object;
  #L30a2b6.  call temp:= `getValue`(v2) @signature `Lf7/n;.getValue:()Ljava/lang/Object;` @kind interface;
  #L30a2bc.  v3:= temp @kind object;
  #L30a2be.  return v3 @kind object;
}
procedure `int` `T`(`f7.k` v3 @kind this, `f7.n` v4 @kind object) @signature `Lf7/k;.T:(Lf7/n;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30a160.  call temp:= `isEmpty`(v4) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L30a166.  v0:= temp;
  #L30a168.  if v0 == 0 then goto L30a170;
  #L30a16c.  v4:= 1I;
  #L30a16e.  return v4;
  #L30a170.  v0:= instanceof @variable v4 @type ^`f7.c` @kind boolean;
  #L30a174.  v1:= -1I;
  #L30a176.  if v0 == 0 then goto L30a17c;
  #L30a17a.  return v1;
  #L30a17c.  call temp:= `A`(v4) @signature `Lf7/n;.A:()Z` @kind interface;
  #L30a182.  v0:= temp;
  #L30a184.  v2:= "Node is not leaf node!" @kind object;
  #L30a188.  call `g`(v0, v2) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L30a18e.  v0:= instanceof @variable v3 @type ^`f7.l` @kind boolean;
  #L30a192.  if v0 == 0 then goto L30a1b2;
  #L30a196.  v0:= instanceof @variable v4 @type ^`f7.f` @kind boolean;
  #L30a19a.  if v0 == 0 then goto L30a1b2;
  #L30a19e.  v0:= v3 @kind object;
  #L30a1a0.  v0:= (`f7.l`) v0 @kind object;
  #L30a1a4.  v4:= (`f7.f`) v4 @kind object;
  #L30a1a8.  call temp:= `S`(v0, v4) @signature `Lf7/k;.S:(Lf7/l;Lf7/f;)I` @kind static;
  #L30a1ae.  v4:= temp;
  #L30a1b0.  return v4;
  #L30a1b2.  v0:= instanceof @variable v3 @type ^`f7.f` @kind boolean;
  #L30a1b6.  if v0 == 0 then goto L30a1da;
  #L30a1ba.  v0:= instanceof @variable v4 @type ^`f7.l` @kind boolean;
  #L30a1be.  if v0 == 0 then goto L30a1da;
  #L30a1c2.  v4:= (`f7.l`) v4 @kind object;
  #L30a1c6.  v0:= v3 @kind object;
  #L30a1c8.  v0:= (`f7.f`) v0 @kind object;
  #L30a1cc.  call temp:= `S`(v4, v0) @signature `Lf7/k;.S:(Lf7/l;Lf7/f;)I` @kind static;
  #L30a1d2.  v4:= temp;
  #L30a1d4.  v4:= v4 * -1;
  #L30a1d8.  return v4;
  #L30a1da.  v4:= (`f7.k`) v4 @kind object;
  #L30a1de.  call temp:= `c0`(v3, v4) @signature `Lf7/k;.c0:(Lf7/k;)I` @kind virtual;
  #L30a1e4.  v4:= temp;
  #L30a1e6.  return v4;
}
procedure `f7.n` `U`(`f7.k` v3 @kind this, `x6.l` v4 @kind object, `f7.n` v5 @kind object) @signature `Lf7/k;.U:(Lx6/l;Lf7/n;)Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30a040.  call temp:= `h0`(v4) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L30a046.  v0:= temp @kind object;
  #L30a048.  if v0 != 0 then goto L30a04e;
  #L30a04c.  return v5 @kind object;
  #L30a04e.  call temp:= `isEmpty`(v5) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L30a054.  v1:= temp;
  #L30a056.  if v1 == 0 then goto L30a068;
  #L30a05a.  call temp:= `t`(v0) @signature `Lf7/b;.t:()Z` @kind virtual;
  #L30a060.  v1:= temp;
  #L30a062.  if v1 != 0 then goto L30a068;
  #L30a066.  return v3 @kind object;
  #L30a068.  call temp:= `h0`(v4) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L30a06e.  v1:= temp @kind object;
  #L30a070.  call temp:= `t`(v1) @signature `Lf7/b;.t:()Z` @kind virtual;
  #L30a076.  v1:= temp;
  #L30a078.  v2:= 1I;
  #L30a07a.  if v1 == 0 then goto L30a08e;
  #L30a07e.  call temp:= `size`(v4) @signature `Lx6/l;.size:()I` @kind virtual;
  #L30a084.  v1:= temp;
  #L30a086.  if v1 != v2 then goto L30a08c;
  #L30a08a.  goto L30a08e;
  #L30a08c.  v2:= 0I;
  #L30a08e.  call `f`(v2) @signature `La7/m;.f:(Z)V` @kind static;
  #L30a094.  call temp:= `e0`() @signature `Lf7/g;.e0:()Lf7/g;` @kind static;
  #L30a09a.  v1:= temp @kind object;
  #L30a09c.  call temp:= `k0`(v4) @signature `Lx6/l;.k0:()Lx6/l;` @kind virtual;
  #L30a0a2.  v4:= temp @kind object;
  #L30a0a4.  call temp:= `U`(v1, v4, v5) @signature `Lf7/g;.U:(Lx6/l;Lf7/n;)Lf7/n;` @kind virtual;
  #L30a0aa.  v4:= temp @kind object;
  #L30a0ac.  call temp:= `m`(v3, v0, v4) @signature `Lf7/k;.m:(Lf7/b;Lf7/n;)Lf7/n;` @kind virtual;
  #L30a0b2.  v4:= temp @kind object;
  #L30a0b4.  return v4 @kind object;
}
procedure `java.util.Iterator` `W`(`f7.k` v1 @kind this) @signature `Lf7/k;.W:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30a43c.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L30a442.  v0:= temp @kind object;
  #L30a444.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30a44a.  v0:= temp @kind object;
  #L30a44c.  return v0 @kind object;
}
procedure `java.lang.String` `Z`(`f7.k` v1 @kind this) @signature `Lf7/k;.Z:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30a2d0.  v0:= v1.`f7.k.p` @type ^`java.lang.String` @kind object;
  #L30a2d4.  if v0 != 0 then goto L30a2f0;
  #L30a2d8.  v0:= `@@f7.n$b.o` @type ^`f7.n$b` @kind object;
  #L30a2dc.  call temp:= `M`(v1, v0) @signature `Lf7/n;.M:(Lf7/n$b;)Ljava/lang/String;` @kind interface;
  #L30a2e2.  v0:= temp @kind object;
  #L30a2e4.  call temp:= `i`(v0) @signature `La7/m;.i:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L30a2ea.  v0:= temp @kind object;
  #L30a2ec.  v1.`f7.k.p` @type ^`java.lang.String` := v0 @kind object;
  #L30a2f0.  v0:= v1.`f7.k.p` @type ^`java.lang.String` @kind object;
  #L30a2f4.  return v0 @kind object;
}
procedure `f7.k$b` `a0`() @signature `Lf7/k;.a0:()Lf7/k$b;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.String` `b0`(`f7.k` v3 @kind this, `f7.n$b` v4 @kind object) @signature `Lf7/k;.b0:(Lf7/n$b;)Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L30a308.  v0:= `@@f7.k$a.a` @type ^`int`[] @kind object;
  #L30a30c.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L30a312.  v1:= temp;
  #L30a314.  v0:= v0[v1];
  #L30a318.  v1:= 1I;
  #L30a31a.  if v0 == v1 then goto L30a354;
  #L30a31e.  v1:= 2I;
  #L30a320.  if v0 != v1 then goto L30a326;
  #L30a324.  goto L30a354;
  #L30a326.  v0:= new `java.lang.IllegalArgumentException`;
  #L30a32a.  v1:= new `java.lang.StringBuilder`;
  #L30a32e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30a334.  v2:= "Unknown hash version: " @kind object;
  #L30a338.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a33e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a344.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30a34a.  v4:= temp @kind object;
  #L30a34c.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30a352.  throw v0;
  #L30a354.  v0:= v3.`f7.k.o` @type ^`f7.n` @kind object;
  #L30a358.  call temp:= `isEmpty`(v0) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L30a35e.  v0:= temp;
  #L30a360.  if v0 == 0 then goto L30a36a;
  #L30a364.  v4:= "" @kind object;
  #L30a368.  return v4 @kind object;
  #L30a36a.  v0:= new `java.lang.StringBuilder`;
  #L30a36e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30a374.  v1:= "priority:" @kind object;
  #L30a378.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a37e.  v1:= v3.`f7.k.o` @type ^`f7.n` @kind object;
  #L30a382.  call temp:= `M`(v1, v4) @signature `Lf7/n;.M:(Lf7/n$b;)Ljava/lang/String;` @kind interface;
  #L30a388.  v4:= temp @kind object;
  #L30a38a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a390.  v4:= ":" @kind object;
  #L30a394.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a39a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30a3a0.  v4:= temp @kind object;
  #L30a3a2.  return v4 @kind object;
}
procedure `int` `c0`(`f7.k` v3 @kind this, `f7.k` v4 @kind object) @signature `Lf7/k;.c0:(Lf7/k;)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L30a22c.  call temp:= `a0`(v3) @signature `Lf7/k;.a0:()Lf7/k$b;` @kind virtual;
  #L30a232.  v0:= temp @kind object;
  #L30a234.  call temp:= `a0`(v4) @signature `Lf7/k;.a0:()Lf7/k$b;` @kind virtual;
  #L30a23a.  v1:= temp @kind object;
  #L30a23c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30a242.  v2:= temp;
  #L30a244.  if v2 == 0 then goto L30a252;
  #L30a248.  call temp:= `h`(v3, v4) @signature `Lf7/k;.h:(Lf7/k;)I` @kind virtual;
  #L30a24e.  v4:= temp;
  #L30a250.  return v4;
  #L30a252.  call temp:= `compareTo`(v0, v1) @signature `Ljava/lang/Enum;.compareTo:(Ljava/lang/Enum;)I` @kind virtual;
  #L30a258.  v4:= temp;
  #L30a25a.  return v4;
}
procedure `int` `compareTo`(`f7.k` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lf7/k;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L30a1f8.  v1:= (`f7.n`) v1 @kind object;
  #L30a1fc.  call temp:= `T`(v0, v1) @signature `Lf7/k;.T:(Lf7/n;)I` @kind virtual;
  #L30a202.  v1:= temp;
  #L30a204.  return v1;
}
procedure `int` `h`(`f7.k` v0 @kind object) @signature `Lf7/k;.h:(Lf7/k;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`f7.k` v1 @kind this) @signature `Lf7/k;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L309f7c.  v0:= 0I;
  #L309f7e.  return v0;
}
procedure `java.util.Iterator` `iterator`(`f7.k` v1 @kind this) @signature `Lf7/k;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30a418.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L30a41e.  v0:= temp @kind object;
  #L30a420.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30a426.  v0:= temp @kind object;
  #L30a428.  return v0 @kind object;
}
procedure `f7.n` `m`(`f7.k` v1 @kind this, `f7.b` v2 @kind object, `f7.n` v3 @kind object) @signature `Lf7/k;.m:(Lf7/b;Lf7/n;)Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30a0c8.  call temp:= `t`(v2) @signature `Lf7/b;.t:()Z` @kind virtual;
  #L30a0ce.  v0:= temp;
  #L30a0d0.  if v0 == 0 then goto L30a0de;
  #L30a0d4.  call temp:= `E`(v1, v3) @signature `Lf7/n;.E:(Lf7/n;)Lf7/n;` @kind interface;
  #L30a0da.  v2:= temp @kind object;
  #L30a0dc.  return v2 @kind object;
  #L30a0de.  call temp:= `isEmpty`(v3) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L30a0e4.  v0:= temp;
  #L30a0e6.  if v0 == 0 then goto L30a0ec;
  #L30a0ea.  return v1 @kind object;
  #L30a0ec.  call temp:= `e0`() @signature `Lf7/g;.e0:()Lf7/g;` @kind static;
  #L30a0f2.  v0:= temp @kind object;
  #L30a0f4.  call temp:= `m`(v0, v2, v3) @signature `Lf7/g;.m:(Lf7/b;Lf7/n;)Lf7/n;` @kind virtual;
  #L30a0fa.  v2:= temp @kind object;
  #L30a0fc.  v3:= v1.`f7.k.o` @type ^`f7.n` @kind object;
  #L30a100.  call temp:= `E`(v2, v3) @signature `Lf7/n;.E:(Lf7/n;)Lf7/n;` @kind interface;
  #L30a106.  v2:= temp @kind object;
  #L30a108.  return v2 @kind object;
}
procedure `f7.n` `q`(`f7.k` v1 @kind this) @signature `Lf7/k;.q:()Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30a028.  v0:= v1.`f7.k.o` @type ^`f7.n` @kind object;
  #L30a02c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`f7.k` v4 @kind this) @signature `Lf7/k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30a3b4.  v0:= 1I;
  #L30a3b6.  call temp:= `R`(v4, v0) @signature `Lf7/k;.R:(Z)Ljava/lang/Object;` @kind virtual;
  #L30a3bc.  v0:= temp @kind object;
  #L30a3be.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L30a3c4.  v0:= temp @kind object;
  #L30a3c6.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L30a3cc.  v1:= temp;
  #L30a3ce.  v2:= 100I;
  #L30a3d2.  if v1 > v2 then goto L30a3d8;
  #L30a3d6.  goto L30a404;
  #L30a3d8.  v1:= new `java.lang.StringBuilder`;
  #L30a3dc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30a3e2.  v3:= 0I;
  #L30a3e4.  call temp:= `substring`(v0, v3, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L30a3ea.  v0:= temp @kind object;
  #L30a3ec.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a3f2.  v0:= "..." @kind object;
  #L30a3f6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a3fc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30a402.  v0:= temp @kind object;
  #L30a404.  return v0 @kind object;
}
procedure `f7.b` `w`(`f7.k` v0 @kind this, `f7.b` v1 @kind object) @signature `Lf7/k;.w:(Lf7/b;)Lf7/b;` @AccessFlag PUBLIC {
    temp;

  #L309fa4.  v1:= 0I;
  #L309fa6.  return v1 @kind object;
}
procedure `f7.n` `z`(`f7.k` v0 @kind this, `f7.b` v1 @kind object) @signature `Lf7/k;.z:(Lf7/b;)Lf7/n;` @AccessFlag PUBLIC {
    temp;

  #L309ffc.  call temp:= `t`(v1) @signature `Lf7/b;.t:()Z` @kind virtual;
  #L30a002.  v1:= temp;
  #L30a004.  if v1 == 0 then goto L30a00e;
  #L30a008.  v1:= v0.`f7.k.o` @type ^`f7.n` @kind object;
  #L30a00c.  return v1 @kind object;
  #L30a00e.  call temp:= `e0`() @signature `Lf7/g;.e0:()Lf7/g;` @kind static;
  #L30a014.  v1:= temp @kind object;
  #L30a016.  return v1 @kind object;
}
