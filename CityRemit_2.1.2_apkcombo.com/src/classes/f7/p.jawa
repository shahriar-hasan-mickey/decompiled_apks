record `f7.p` @kind class @AccessFlag PUBLIC_FINAL extends `f7.h` @kind class {
  `x6.l` `f7.p.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f7.p` v2 @kind this, `x6.l` v3 @kind object) @signature `Lf7/p;.<init>:(Lx6/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L30ae54.  call `<init>`(v2) @signature `Lf7/h;.<init>:()V` @kind direct;
  #L30ae5a.  call temp:= `size`(v3) @signature `Lx6/l;.size:()I` @kind virtual;
  #L30ae60.  v0:= temp;
  #L30ae62.  v1:= 1I;
  #L30ae64.  if v0 != v1 then goto L30ae8e;
  #L30ae68.  call temp:= `h0`(v3) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L30ae6e.  v0:= temp @kind object;
  #L30ae70.  call temp:= `t`(v0) @signature `Lf7/b;.t:()Z` @kind virtual;
  #L30ae76.  v0:= temp;
  #L30ae78.  if v0 != 0 then goto L30ae7e;
  #L30ae7c.  goto L30ae8e;
  #L30ae7e.  v3:= new `java.lang.IllegalArgumentException`;
  #L30ae82.  v0:= "Can't create PathIndex with '.priority' as key. Please use PriorityIndex instead!" @kind object;
  #L30ae86.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30ae8c.  throw v3;
  #L30ae8e.  v2.`f7.p.o` @type ^`x6.l` := v3 @kind object;
  #L30ae92.  return @kind void;
}
procedure `java.lang.String` `c`(`f7.p` v1 @kind this) @signature `Lf7/p;.c:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30ae34.  v0:= v1.`f7.p.o` @type ^`x6.l` @kind object;
  #L30ae38.  call temp:= `l0`(v0) @signature `Lx6/l;.l0:()Ljava/lang/String;` @kind virtual;
  #L30ae3e.  v0:= temp @kind object;
  #L30ae40.  return v0 @kind object;
}
procedure `int` `compare`(`f7.p` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lf7/p;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L30adf0.  v1:= (`f7.m`) v1 @kind object;
  #L30adf4.  v2:= (`f7.m`) v2 @kind object;
  #L30adf8.  call temp:= `i`(v0, v1, v2) @signature `Lf7/p;.i:(Lf7/m;Lf7/m;)I` @kind virtual;
  #L30adfe.  v1:= temp;
  #L30ae00.  return v1;
}
procedure `boolean` `e`(`f7.p` v1 @kind this, `f7.n` v2 @kind object) @signature `Lf7/p;.e:(Lf7/n;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30acf8.  v0:= v1.`f7.p.o` @type ^`x6.l` @kind object;
  #L30acfc.  call temp:= `H`(v2, v0) @signature `Lf7/n;.H:(Lx6/l;)Lf7/n;` @kind interface;
  #L30ad02.  v2:= temp @kind object;
  #L30ad04.  call temp:= `isEmpty`(v2) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L30ad0a.  v2:= temp;
  #L30ad0c.  v2:= v2 ^~ 1;
  #L30ad10.  return v2;
}
procedure `boolean` `equals`(`f7.p` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lf7/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30aca8.  v0:= 1I;
  #L30acaa.  if v4 != v5 then goto L30acb0;
  #L30acae.  return v0;
  #L30acb0.  v1:= 0I;
  #L30acb2.  if v5 == 0 then goto L30ace4;
  #L30acb6.  v2:= constclass @type ^`f7.p` @kind object;
  #L30acba.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L30acc0.  v3:= temp @kind object;
  #L30acc2.  if v2 == v3 then goto L30acc8;
  #L30acc6.  goto L30ace4;
  #L30acc8.  v5:= (`f7.p`) v5 @kind object;
  #L30accc.  v2:= v4.`f7.p.o` @type ^`x6.l` @kind object;
  #L30acd0.  v5:= v5.`f7.p.o` @type ^`x6.l` @kind object;
  #L30acd4.  call temp:= `equals`(v2, v5) @signature `Lx6/l;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30acda.  v5:= temp;
  #L30acdc.  if v5 != 0 then goto L30ace2;
  #L30ace0.  return v1;
  #L30ace2.  return v0;
  #L30ace4.  return v1;
}
procedure `f7.m` `f`(`f7.p` v2 @kind this, `f7.b` v3 @kind object, `f7.n` v4 @kind object) @signature `Lf7/p;.f:(Lf7/b;Lf7/n;)Lf7/m;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30ad24.  call temp:= `e0`() @signature `Lf7/g;.e0:()Lf7/g;` @kind static;
  #L30ad2a.  v0:= temp @kind object;
  #L30ad2c.  v1:= v2.`f7.p.o` @type ^`x6.l` @kind object;
  #L30ad30.  call temp:= `U`(v0, v1, v4) @signature `Lf7/g;.U:(Lx6/l;Lf7/n;)Lf7/n;` @kind virtual;
  #L30ad36.  v4:= temp @kind object;
  #L30ad38.  v0:= new `f7.m`;
  #L30ad3c.  call `<init>`(v0, v3, v4) @signature `Lf7/m;.<init>:(Lf7/b;Lf7/n;)V` @kind direct;
  #L30ad42.  return v0 @kind object;
}
procedure `f7.m` `g`(`f7.p` v3 @kind this) @signature `Lf7/p;.g:()Lf7/m;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30ad54.  call temp:= `e0`() @signature `Lf7/g;.e0:()Lf7/g;` @kind static;
  #L30ad5a.  v0:= temp @kind object;
  #L30ad5c.  v1:= v3.`f7.p.o` @type ^`x6.l` @kind object;
  #L30ad60.  v2:= `@@f7.n.m` @type ^`f7.c` @kind object;
  #L30ad64.  call temp:= `U`(v0, v1, v2) @signature `Lf7/g;.U:(Lx6/l;Lf7/n;)Lf7/n;` @kind virtual;
  #L30ad6a.  v0:= temp @kind object;
  #L30ad6c.  v1:= new `f7.m`;
  #L30ad70.  call temp:= `j`() @signature `Lf7/b;.j:()Lf7/b;` @kind static;
  #L30ad76.  v2:= temp @kind object;
  #L30ad78.  call `<init>`(v1, v2, v0) @signature `Lf7/m;.<init>:(Lf7/b;Lf7/n;)V` @kind direct;
  #L30ad7e.  return v1 @kind object;
}
procedure `int` `hashCode`(`f7.p` v1 @kind this) @signature `Lf7/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30ae14.  v0:= v1.`f7.p.o` @type ^`x6.l` @kind object;
  #L30ae18.  call temp:= `hashCode`(v0) @signature `Lx6/l;.hashCode:()I` @kind virtual;
  #L30ae1e.  v0:= temp;
  #L30ae20.  return v0;
}
procedure `int` `i`(`f7.p` v3 @kind this, `f7.m` v4 @kind object, `f7.m` v5 @kind object) @signature `Lf7/p;.i:(Lf7/m;Lf7/m;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30ad90.  call temp:= `d`(v4) @signature `Lf7/m;.d:()Lf7/n;` @kind virtual;
  #L30ad96.  v0:= temp @kind object;
  #L30ad98.  v1:= v3.`f7.p.o` @type ^`x6.l` @kind object;
  #L30ad9c.  call temp:= `H`(v0, v1) @signature `Lf7/n;.H:(Lx6/l;)Lf7/n;` @kind interface;
  #L30ada2.  v0:= temp @kind object;
  #L30ada4.  call temp:= `d`(v5) @signature `Lf7/m;.d:()Lf7/n;` @kind virtual;
  #L30adaa.  v1:= temp @kind object;
  #L30adac.  v2:= v3.`f7.p.o` @type ^`x6.l` @kind object;
  #L30adb0.  call temp:= `H`(v1, v2) @signature `Lf7/n;.H:(Lx6/l;)Lf7/n;` @kind interface;
  #L30adb6.  v1:= temp @kind object;
  #L30adb8.  call temp:= `compareTo`(v0, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L30adbe.  v0:= temp;
  #L30adc0.  if v0 != 0 then goto L30adde;
  #L30adc4.  call temp:= `c`(v4) @signature `Lf7/m;.c:()Lf7/b;` @kind virtual;
  #L30adca.  v4:= temp @kind object;
  #L30adcc.  call temp:= `c`(v5) @signature `Lf7/m;.c:()Lf7/b;` @kind virtual;
  #L30add2.  v5:= temp @kind object;
  #L30add4.  call temp:= `e`(v4, v5) @signature `Lf7/b;.e:(Lf7/b;)I` @kind virtual;
  #L30adda.  v4:= temp;
  #L30addc.  return v4;
  #L30adde.  return v0;
}
