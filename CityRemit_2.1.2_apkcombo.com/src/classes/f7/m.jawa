record `f7.m` @kind class @AccessFlag PUBLIC_FINAL {
  `f7.b` `f7.m.a` @AccessFlag PRIVATE_FINAL;
  `f7.n` `f7.m.b` @AccessFlag PRIVATE_FINAL;
}
global `f7.m` `@@f7.m.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `f7.m` `@@f7.m.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf7/m;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L30a78c.  v0:= new `f7.m`;
  #L30a790.  call temp:= `k`() @signature `Lf7/b;.k:()Lf7/b;` @kind static;
  #L30a796.  v1:= temp @kind object;
  #L30a798.  call temp:= `e0`() @signature `Lf7/g;.e0:()Lf7/g;` @kind static;
  #L30a79e.  v2:= temp @kind object;
  #L30a7a0.  call `<init>`(v0, v1, v2) @signature `Lf7/m;.<init>:(Lf7/b;Lf7/n;)V` @kind direct;
  #L30a7a6.  `@@f7.m.c` @type ^`f7.m` := v0 @kind object;
  #L30a7aa.  v0:= new `f7.m`;
  #L30a7ae.  call temp:= `j`() @signature `Lf7/b;.j:()Lf7/b;` @kind static;
  #L30a7b4.  v1:= temp @kind object;
  #L30a7b6.  v2:= `@@f7.n.m` @type ^`f7.c` @kind object;
  #L30a7ba.  call `<init>`(v0, v1, v2) @signature `Lf7/m;.<init>:(Lf7/b;Lf7/n;)V` @kind direct;
  #L30a7c0.  `@@f7.m.d` @type ^`f7.m` := v0 @kind object;
  #L30a7c4.  return @kind void;
}
procedure `void` `<init>`(`f7.m` v0 @kind this, `f7.b` v1 @kind object, `f7.n` v2 @kind object) @signature `Lf7/m;.<init>:(Lf7/b;Lf7/n;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L30a7d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30a7de.  v0.`f7.m.a` @type ^`f7.b` := v1 @kind object;
  #L30a7e2.  v0.`f7.m.b` @type ^`f7.n` := v2 @kind object;
  #L30a7e6.  return @kind void;
}
procedure `f7.m` `a`() @signature `Lf7/m;.a:()Lf7/m;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30a6bc.  v0:= `@@f7.m.d` @type ^`f7.m` @kind object;
  #L30a6c0.  return v0 @kind object;
}
procedure `f7.m` `b`() @signature `Lf7/m;.b:()Lf7/m;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30a6d4.  v0:= `@@f7.m.c` @type ^`f7.m` @kind object;
  #L30a6d8.  return v0 @kind object;
}
procedure `f7.b` `c`(`f7.m` v1 @kind this) @signature `Lf7/m;.c:()Lf7/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30a6a4.  v0:= v1.`f7.m.a` @type ^`f7.b` @kind object;
  #L30a6a8.  return v0 @kind object;
}
procedure `f7.n` `d`(`f7.m` v1 @kind this) @signature `Lf7/m;.d:()Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30a6ec.  v0:= v1.`f7.m.b` @type ^`f7.n` @kind object;
  #L30a6f0.  return v0 @kind object;
}
procedure `boolean` `equals`(`f7.m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lf7/m;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30a640.  v0:= 1I;
  #L30a642.  if v4 != v5 then goto L30a648;
  #L30a646.  return v0;
  #L30a648.  v1:= 0I;
  #L30a64a.  if v5 == 0 then goto L30a692;
  #L30a64e.  v2:= constclass @type ^`f7.m` @kind object;
  #L30a652.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L30a658.  v3:= temp @kind object;
  #L30a65a.  if v2 == v3 then goto L30a660;
  #L30a65e.  goto L30a692;
  #L30a660.  v5:= (`f7.m`) v5 @kind object;
  #L30a664.  v2:= v4.`f7.m.a` @type ^`f7.b` @kind object;
  #L30a668.  v3:= v5.`f7.m.a` @type ^`f7.b` @kind object;
  #L30a66c.  call temp:= `equals`(v2, v3) @signature `Lf7/b;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30a672.  v2:= temp;
  #L30a674.  if v2 != 0 then goto L30a67a;
  #L30a678.  return v1;
  #L30a67a.  v2:= v4.`f7.m.b` @type ^`f7.n` @kind object;
  #L30a67e.  v5:= v5.`f7.m.b` @type ^`f7.n` @kind object;
  #L30a682.  call temp:= `equals`(v2, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30a688.  v5:= temp;
  #L30a68a.  if v5 != 0 then goto L30a690;
  #L30a68e.  return v1;
  #L30a690.  return v0;
  #L30a692.  return v1;
}
procedure `int` `hashCode`(`f7.m` v2 @kind this) @signature `Lf7/m;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30a704.  v0:= v2.`f7.m.a` @type ^`f7.b` @kind object;
  #L30a708.  call temp:= `hashCode`(v0) @signature `Lf7/b;.hashCode:()I` @kind virtual;
  #L30a70e.  v0:= temp;
  #L30a710.  v0:= v0 * 31;
  #L30a714.  v1:= v2.`f7.m.b` @type ^`f7.n` @kind object;
  #L30a718.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30a71e.  v1:= temp;
  #L30a720.  v0:= v0 + v1 @kind int;
  #L30a722.  return v0;
}
procedure `java.lang.String` `toString`(`f7.m` v2 @kind this) @signature `Lf7/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30a734.  v0:= new `java.lang.StringBuilder`;
  #L30a738.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30a73e.  v1:= "NamedNode{name=" @kind object;
  #L30a742.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a748.  v1:= v2.`f7.m.a` @type ^`f7.b` @kind object;
  #L30a74c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a752.  v1:= ", node=" @kind object;
  #L30a756.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a75c.  v1:= v2.`f7.m.b` @type ^`f7.n` @kind object;
  #L30a760.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a766.  v1:= 125I;
  #L30a76a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a770.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30a776.  v0:= temp @kind object;
  #L30a778.  return v0 @kind object;
}
