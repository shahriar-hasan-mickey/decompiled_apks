record `f7.l` @kind class @AccessFlag PUBLIC extends `f7.k` @kind class {
  `long` `f7.l.q` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f7.l` v0 @kind this, `java.lang.Long` v1 @kind object, `f7.n` v2 @kind object) @signature `Lf7/l;.<init>:(Ljava/lang/Long;Lf7/n;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L30a61c.  call `<init>`(v0, v2) @signature `Lf7/k;.<init>:(Lf7/n;)V` @kind direct;
  #L30a622.  call temp:= `longValue`(v1) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L30a628.  v1:= temp @kind wide;
  #L30a62a.  v0.`f7.l.q` @type ^`long` := v1 @kind wide;
  #L30a62e.  return @kind void;
}
procedure `f7.n` `E`(`f7.l` v0 @kind this, `f7.n` v1 @kind object) @signature `Lf7/l;.E:(Lf7/n;)Lf7/n;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L30a504.  call temp:= `e0`(v0, v1) @signature `Lf7/l;.e0:(Lf7/n;)Lf7/l;` @kind virtual;
  #L30a50a.  v1:= temp @kind object;
  #L30a50c.  return v1 @kind object;
}
procedure `java.lang.String` `M`(`f7.l` v3 @kind this, `f7.n$b` v4 @kind object) @signature `Lf7/l;.M:(Lf7/n$b;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30a5b4.  call temp:= `b0`(v3, v4) @signature `Lf7/k;.b0:(Lf7/n$b;)Ljava/lang/String;` @kind virtual;
  #L30a5ba.  v4:= temp @kind object;
  #L30a5bc.  v0:= new `java.lang.StringBuilder`;
  #L30a5c0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30a5c6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a5cc.  v4:= "number:" @kind object;
  #L30a5d0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a5d6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30a5dc.  v4:= temp @kind object;
  #L30a5de.  v0:= new `java.lang.StringBuilder`;
  #L30a5e2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30a5e8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a5ee.  v1:= v3.`f7.l.q` @type ^`long` @kind wide;
  #L30a5f2.  v1:= (`double`) v1 @kind l2d;
  #L30a5f4.  call temp:= `c`(v1) @signature `La7/m;.c:(D)Ljava/lang/String;` @kind static;
  #L30a5fa.  v4:= temp @kind object;
  #L30a5fc.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a602.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30a608.  v4:= temp @kind object;
  #L30a60a.  return v4 @kind object;
}
procedure `f7.k$b` `a0`(`f7.l` v1 @kind this) @signature `Lf7/l;.a0:()Lf7/k$b;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L30a4c4.  v0:= `@@f7.k$b.q` @type ^`f7.k$b` @kind object;
  #L30a4c8.  return v0 @kind object;
}
procedure `int` `d0`(`f7.l` v4 @kind this, `f7.l` v5 @kind object) @signature `Lf7/l;.d0:(Lf7/l;)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30a540.  v0:= v4.`f7.l.q` @type ^`long` @kind wide;
  #L30a544.  v2:= v5.`f7.l.q` @type ^`long` @kind wide;
  #L30a548.  call temp:= `b`(v0, v2) @signature `La7/m;.b:(JJ)I` @kind static;
  #L30a54e.  v5:= temp;
  #L30a550.  return v5;
}
procedure `f7.l` `e0`(`f7.l` v3 @kind this, `f7.n` v4 @kind object) @signature `Lf7/l;.e0:(Lf7/n;)Lf7/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30a4dc.  v0:= new `f7.l`;
  #L30a4e0.  v1:= v3.`f7.l.q` @type ^`long` @kind wide;
  #L30a4e4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L30a4ea.  v1:= temp @kind object;
  #L30a4ec.  call `<init>`(v0, v1, v4) @signature `Lf7/l;.<init>:(Ljava/lang/Long;Lf7/n;)V` @kind direct;
  #L30a4f2.  return v0 @kind object;
}
procedure `boolean` `equals`(`f7.l` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lf7/l;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30a47c.  v0:= instanceof @variable v7 @type ^`f7.l` @kind boolean;
  #L30a480.  v1:= 0I;
  #L30a482.  if v0 != 0 then goto L30a488;
  #L30a486.  return v1;
  #L30a488.  v7:= (`f7.l`) v7 @kind object;
  #L30a48c.  v2:= v6.`f7.l.q` @type ^`long` @kind wide;
  #L30a490.  v4:= v7.`f7.l.q` @type ^`long` @kind wide;
  #L30a494.  v0:= lcmp(v2, v4);
  #L30a498.  if v0 != 0 then goto L30a4b2;
  #L30a49c.  v0:= v6.`f7.k.o` @type ^`f7.n` @kind object;
  #L30a4a0.  v7:= v7.`f7.k.o` @type ^`f7.n` @kind object;
  #L30a4a4.  call temp:= `equals`(v0, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30a4aa.  v7:= temp;
  #L30a4ac.  if v7 == 0 then goto L30a4b2;
  #L30a4b0.  v1:= 1I;
  #L30a4b2.  return v1;
}
procedure `java.lang.Object` `getValue`(`f7.l` v2 @kind this) @signature `Lf7/l;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30a594.  v0:= v2.`f7.l.q` @type ^`long` @kind wide;
  #L30a598.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L30a59e.  v0:= temp @kind object;
  #L30a5a0.  return v0 @kind object;
}
procedure `int` `h`(`f7.l` v0 @kind this, `f7.k` v1 @kind object) @signature `Lf7/l;.h:(Lf7/k;)I` @AccessFlag PROTECTED_SYNTHETIC {
    temp;

  #L30a520.  v1:= (`f7.l`) v1 @kind object;
  #L30a524.  call temp:= `d0`(v0, v1) @signature `Lf7/l;.d0:(Lf7/l;)I` @kind virtual;
  #L30a52a.  v1:= temp;
  #L30a52c.  return v1;
}
procedure `int` `hashCode`(`f7.l` v4 @kind this) @signature `Lf7/l;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30a564.  v0:= v4.`f7.l.q` @type ^`long` @kind wide;
  #L30a568.  v2:= 32I;
  #L30a56c.  v2:= v0 ^>> v2 @kind long;
  #L30a570.  v0:= v0 ^~ v2 @kind long;
  #L30a572.  v1:= (`int`) v0 @kind l2i;
  #L30a574.  v0:= v4.`f7.k.o` @type ^`f7.n` @kind object;
  #L30a578.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30a57e.  v0:= temp;
  #L30a580.  v1:= v1 + v0 @kind int;
  #L30a582.  return v1;
}
