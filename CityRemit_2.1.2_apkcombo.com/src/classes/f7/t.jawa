record `f7.t` @kind class @AccessFlag PUBLIC extends `f7.k` @kind class {
  `java.lang.String` `f7.t.q` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f7.t` v0 @kind this, `java.lang.String` v1 @kind object, `f7.n` v2 @kind object) @signature `Lf7/t;.<init>:(Ljava/lang/String;Lf7/n;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L30b6d8.  call `<init>`(v0, v2) @signature `Lf7/k;.<init>:(Lf7/n;)V` @kind direct;
  #L30b6de.  v0.`f7.t.q` @type ^`java.lang.String` := v1 @kind object;
  #L30b6e2.  return @kind void;
}
procedure `f7.n` `E`(`f7.t` v0 @kind this, `f7.n` v1 @kind object) @signature `Lf7/t;.E:(Lf7/n;)Lf7/n;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L30b558.  call temp:= `e0`(v0, v1) @signature `Lf7/t;.e0:(Lf7/n;)Lf7/t;` @kind virtual;
  #L30b55e.  v1:= temp @kind object;
  #L30b560.  return v1 @kind object;
}
procedure `java.lang.String` `M`(`f7.t` v3 @kind this, `f7.n$b` v4 @kind object) @signature `Lf7/t;.M:(Lf7/n$b;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30b61c.  v0:= `@@f7.t$a.a` @type ^`int`[] @kind object;
  #L30b620.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L30b626.  v1:= temp;
  #L30b628.  v0:= v0[v1];
  #L30b62c.  v1:= 1I;
  #L30b62e.  v2:= "string:" @kind object;
  #L30b632.  if v0 == v1 then goto L30b6a4;
  #L30b636.  v1:= 2I;
  #L30b638.  if v0 != v1 then goto L30b676;
  #L30b63c.  v0:= new `java.lang.StringBuilder`;
  #L30b640.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b646.  call temp:= `b0`(v3, v4) @signature `Lf7/k;.b0:(Lf7/n$b;)Ljava/lang/String;` @kind virtual;
  #L30b64c.  v4:= temp @kind object;
  #L30b64e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b654.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b65a.  v4:= v3.`f7.t.q` @type ^`java.lang.String` @kind object;
  #L30b65e.  call temp:= `j`(v4) @signature `La7/m;.j:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L30b664.  v4:= temp @kind object;
  #L30b666.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b66c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30b672.  v4:= temp @kind object;
  #L30b674.  return v4 @kind object;
  #L30b676.  v0:= new `java.lang.IllegalArgumentException`;
  #L30b67a.  v1:= new `java.lang.StringBuilder`;
  #L30b67e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b684.  v2:= "Invalid hash version for string node: " @kind object;
  #L30b688.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b68e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b694.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30b69a.  v4:= temp @kind object;
  #L30b69c.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30b6a2.  throw v0;
  #L30b6a4.  v0:= new `java.lang.StringBuilder`;
  #L30b6a8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b6ae.  call temp:= `b0`(v3, v4) @signature `Lf7/k;.b0:(Lf7/n$b;)Ljava/lang/String;` @kind virtual;
  #L30b6b4.  v4:= temp @kind object;
  #L30b6b6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b6bc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b6c2.  v4:= v3.`f7.t.q` @type ^`java.lang.String` @kind object;
  #L30b6c6.  goto L30b666;
}
procedure `f7.k$b` `a0`(`f7.t` v1 @kind this) @signature `Lf7/t;.a0:()Lf7/k$b;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L30b540.  v0:= `@@f7.k$b.r` @type ^`f7.k$b` @kind object;
  #L30b544.  return v0 @kind object;
}
procedure `int` `d0`(`f7.t` v1 @kind this, `f7.t` v2 @kind object) @signature `Lf7/t;.d0:(Lf7/t;)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L30b5b4.  v0:= v1.`f7.t.q` @type ^`java.lang.String` @kind object;
  #L30b5b8.  v2:= v2.`f7.t.q` @type ^`java.lang.String` @kind object;
  #L30b5bc.  call temp:= `compareTo`(v0, v2) @signature `Ljava/lang/String;.compareTo:(Ljava/lang/String;)I` @kind virtual;
  #L30b5c2.  v2:= temp;
  #L30b5c4.  return v2;
}
procedure `f7.t` `e0`(`f7.t` v2 @kind this, `f7.n` v3 @kind object) @signature `Lf7/t;.e0:(Lf7/n;)Lf7/t;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30b574.  v0:= new `f7.t`;
  #L30b578.  v1:= v2.`f7.t.q` @type ^`java.lang.String` @kind object;
  #L30b57c.  call `<init>`(v0, v1, v3) @signature `Lf7/t;.<init>:(Ljava/lang/String;Lf7/n;)V` @kind direct;
  #L30b582.  return v0 @kind object;
}
procedure `boolean` `equals`(`f7.t` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lf7/t;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30b4f4.  v0:= instanceof @variable v4 @type ^`f7.t` @kind boolean;
  #L30b4f8.  v1:= 0I;
  #L30b4fa.  if v0 != 0 then goto L30b500;
  #L30b4fe.  return v1;
  #L30b500.  v4:= (`f7.t`) v4 @kind object;
  #L30b504.  v0:= v3.`f7.t.q` @type ^`java.lang.String` @kind object;
  #L30b508.  v2:= v4.`f7.t.q` @type ^`java.lang.String` @kind object;
  #L30b50c.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30b512.  v0:= temp;
  #L30b514.  if v0 == 0 then goto L30b52e;
  #L30b518.  v0:= v3.`f7.k.o` @type ^`f7.n` @kind object;
  #L30b51c.  v4:= v4.`f7.k.o` @type ^`f7.n` @kind object;
  #L30b520.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30b526.  v4:= temp;
  #L30b528.  if v4 == 0 then goto L30b52e;
  #L30b52c.  v1:= 1I;
  #L30b52e.  return v1;
}
procedure `java.lang.Object` `getValue`(`f7.t` v1 @kind this) @signature `Lf7/t;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30b604.  v0:= v1.`f7.t.q` @type ^`java.lang.String` @kind object;
  #L30b608.  return v0 @kind object;
}
procedure `int` `h`(`f7.t` v0 @kind this, `f7.k` v1 @kind object) @signature `Lf7/t;.h:(Lf7/k;)I` @AccessFlag PROTECTED_SYNTHETIC {
    temp;

  #L30b594.  v1:= (`f7.t`) v1 @kind object;
  #L30b598.  call temp:= `d0`(v0, v1) @signature `Lf7/t;.d0:(Lf7/t;)I` @kind virtual;
  #L30b59e.  v1:= temp;
  #L30b5a0.  return v1;
}
procedure `int` `hashCode`(`f7.t` v2 @kind this) @signature `Lf7/t;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30b5d8.  v0:= v2.`f7.t.q` @type ^`java.lang.String` @kind object;
  #L30b5dc.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L30b5e2.  v0:= temp;
  #L30b5e4.  v1:= v2.`f7.k.o` @type ^`f7.n` @kind object;
  #L30b5e8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30b5ee.  v1:= temp;
  #L30b5f0.  v0:= v0 + v1 @kind int;
  #L30b5f2.  return v0;
}
