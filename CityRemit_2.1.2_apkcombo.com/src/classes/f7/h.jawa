record `f7.h` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`f7.h` v0 @kind this) @signature `Lf7/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L309c98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L309c9e.  return @kind void;
}
procedure `f7.h` `b`(`java.lang.String` v2 @kind object) @signature `Lf7/h;.b:(Ljava/lang/String;)Lf7/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L309bd8.  v0:= ".value" @kind object;
  #L309bdc.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L309be2.  v0:= temp;
  #L309be4.  if v0 == 0 then goto L309bf2;
  #L309be8.  call temp:= `j`() @signature `Lf7/u;.j:()Lf7/u;` @kind static;
  #L309bee.  v2:= temp @kind object;
  #L309bf0.  return v2 @kind object;
  #L309bf2.  v0:= ".key" @kind object;
  #L309bf6.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L309bfc.  v0:= temp;
  #L309bfe.  if v0 == 0 then goto L309c0c;
  #L309c02.  call temp:= `j`() @signature `Lf7/j;.j:()Lf7/j;` @kind static;
  #L309c08.  v2:= temp @kind object;
  #L309c0a.  return v2 @kind object;
  #L309c0c.  v0:= ".priority" @kind object;
  #L309c10.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L309c16.  v0:= temp;
  #L309c18.  if v0 != 0 then goto L309c32;
  #L309c1c.  v0:= new `f7.p`;
  #L309c20.  v1:= new `x6.l`;
  #L309c24.  call `<init>`(v1, v2) @signature `Lx6/l;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L309c2a.  call `<init>`(v0, v1) @signature `Lf7/p;.<init>:(Lx6/l;)V` @kind direct;
  #L309c30.  return v0 @kind object;
  #L309c32.  v2:= new `java.lang.IllegalStateException`;
  #L309c36.  v0:= "queryDefinition shouldn't ever be .priority since it's the default" @kind object;
  #L309c3a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L309c40.  throw v2;
}
procedure `int` `a`(`f7.h` v0 @kind this, `f7.m` v1 @kind object, `f7.m` v2 @kind object, `boolean` v3 ) @signature `Lf7/h;.a:(Lf7/m;Lf7/m;Z)I` @AccessFlag PUBLIC {
    temp;

  #L309c70.  if v3 == 0 then goto L309c7e;
  #L309c74.  call temp:= `compare`(v0, v2, v1) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L309c7a.  v1:= temp;
  #L309c7c.  return v1;
  #L309c7e.  call temp:= `compare`(v0, v1, v2) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L309c84.  v1:= temp;
  #L309c86.  return v1;
}
procedure `java.lang.String` `c`() @signature `Lf7/h;.c:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `d`(`f7.h` v2 @kind this, `f7.n` v3 @kind object, `f7.n` v4 @kind object) @signature `Lf7/h;.d:(Lf7/n;Lf7/n;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3096c4.  v0:= new `f7.m`;
  #L3096c8.  call temp:= `k`() @signature `Lf7/b;.k:()Lf7/b;` @kind static;
  #L3096ce.  v1:= temp @kind object;
  #L3096d0.  call `<init>`(v0, v1, v3) @signature `Lf7/m;.<init>:(Lf7/b;Lf7/n;)V` @kind direct;
  #L3096d6.  v3:= new `f7.m`;
  #L3096da.  call temp:= `k`() @signature `Lf7/b;.k:()Lf7/b;` @kind static;
  #L3096e0.  v1:= temp @kind object;
  #L3096e2.  call `<init>`(v3, v1, v4) @signature `Lf7/m;.<init>:(Lf7/b;Lf7/n;)V` @kind direct;
  #L3096e8.  call temp:= `compare`(v2, v0, v3) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L3096ee.  v3:= temp;
  #L3096f0.  if v3 == 0 then goto L3096f8;
  #L3096f4.  v3:= 1I;
  #L3096f6.  goto L3096fa;
  #L3096f8.  v3:= 0I;
  #L3096fa.  return v3;
}
procedure `boolean` `e`(`f7.n` v0 @kind object) @signature `Lf7/h;.e:(Lf7/n;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `f7.m` `f`(`f7.b` v0 @kind object, `f7.n` v1 @kind object) @signature `Lf7/h;.f:(Lf7/b;Lf7/n;)Lf7/m;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `f7.m` `g`() @signature `Lf7/h;.g:()Lf7/m;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `f7.m` `h`(`f7.h` v1 @kind this) @signature `Lf7/h;.h:()Lf7/m;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L309c54.  call temp:= `b`() @signature `Lf7/m;.b:()Lf7/m;` @kind static;
  #L309c5a.  v0:= temp @kind object;
  #L309c5c.  return v0 @kind object;
}
