record `f7.d$b` @kind class @AccessFlag  {
  `java.lang.StringBuilder` `f7.d$b.a` @AccessFlag PRIVATE;
  `java.util.Stack` `f7.d$b.b` @AccessFlag PRIVATE;
  `int` `f7.d$b.c` @AccessFlag PRIVATE;
  `int` `f7.d$b.d` @AccessFlag PRIVATE;
  `boolean` `f7.d$b.e` @AccessFlag PRIVATE;
  `java.util.List` `f7.d$b.f` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `f7.d$b.g` @AccessFlag PRIVATE_FINAL;
  `f7.d$d` `f7.d$b.h` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f7.d$b` v1 @kind this, `f7.d$d` v2 @kind object) @signature `Lf7/d$b;.<init>:(Lf7/d$d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L308a40.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L308a46.  v0:= 0I;
  #L308a48.  v1.`f7.d$b.a` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L308a4c.  v0:= new `java.util.Stack`;
  #L308a50.  call `<init>`(v0) @signature `Ljava/util/Stack;.<init>:()V` @kind direct;
  #L308a56.  v1.`f7.d$b.b` @type ^`java.util.Stack` := v0 @kind object;
  #L308a5a.  v0:= -1I;
  #L308a5c.  v1.`f7.d$b.c` @type ^`int` := v0;
  #L308a60.  v0:= 1I;
  #L308a62.  v1.`f7.d$b.e` @type ^`boolean` := v0 @kind boolean;
  #L308a66.  v0:= new `java.util.ArrayList`;
  #L308a6a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L308a70.  v1.`f7.d$b.f` @type ^`java.util.List` := v0 @kind object;
  #L308a74.  v0:= new `java.util.ArrayList`;
  #L308a78.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L308a7e.  v1.`f7.d$b.g` @type ^`java.util.List` := v0 @kind object;
  #L308a82.  v1.`f7.d$b.h` @type ^`f7.d$d` := v2 @kind object;
  #L308a86.  return @kind void;
}
procedure `void` `a`(`f7.d$b` v0 @kind object) @signature `Lf7/d$b;.a:(Lf7/d$b;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L308a98.  call `o`(v0) @signature `Lf7/d$b;.o:()V` @kind direct;
  #L308a9e.  return @kind void;
}
procedure `java.util.List` `b`(`f7.d$b` v0 @kind object) @signature `Lf7/d$b;.b:(Lf7/d$b;)Ljava/util/List;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L308a10.  v0:= v0.`f7.d$b.f` @type ^`java.util.List` @kind object;
  #L308a14.  return v0 @kind object;
}
procedure `java.util.List` `c`(`f7.d$b` v0 @kind object) @signature `Lf7/d$b;.c:(Lf7/d$b;)Ljava/util/List;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L308a28.  v0:= v0.`f7.d$b.g` @type ^`java.util.List` @kind object;
  #L308a2c.  return v0 @kind object;
}
procedure `void` `d`(`f7.d$b` v0 @kind object, `f7.k` v1 @kind object) @signature `Lf7/d$b;.d:(Lf7/d$b;Lf7/k;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L308ab0.  call `p`(v0, v1) @signature `Lf7/d$b;.p:(Lf7/k;)V` @kind direct;
  #L308ab6.  return @kind void;
}
procedure `void` `e`(`f7.d$b` v0 @kind object, `f7.b` v1 @kind object) @signature `Lf7/d$b;.e:(Lf7/d$b;Lf7/b;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L308ac8.  call `q`(v0, v1) @signature `Lf7/d$b;.q:(Lf7/b;)V` @kind direct;
  #L308ace.  return @kind void;
}
procedure `void` `f`(`f7.d$b` v0 @kind object) @signature `Lf7/d$b;.f:(Lf7/d$b;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L308ae0.  call `l`(v0) @signature `Lf7/d$b;.l:()V` @kind direct;
  #L308ae6.  return @kind void;
}
procedure `void` `g`(`f7.d$b` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `f7.b` v2 @kind object) @signature `Lf7/d$b;.g:(Ljava/lang/StringBuilder;Lf7/b;)V` @AccessFlag PRIVATE {
    temp;

  #L308af8.  call temp:= `d`(v2) @signature `Lf7/b;.d:()Ljava/lang/String;` @kind virtual;
  #L308afe.  v2:= temp @kind object;
  #L308b00.  call temp:= `j`(v2) @signature `La7/m;.j:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L308b06.  v2:= temp @kind object;
  #L308b08.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L308b0e.  return @kind void;
}
procedure `x6.l` `k`(`f7.d$b` v3 @kind this, `int` v4 ) @signature `Lf7/d$b;.k:(I)Lx6/l;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L308db0.  v0:= new `f7.b`[v4];
  #L308db4.  v1:= 0I;
  #L308db6.  if v1 >= v4 then goto L308dd4;
  #L308dba.  v2:= v3.`f7.d$b.b` @type ^`java.util.Stack` @kind object;
  #L308dbe.  call temp:= `get`(v2, v1) @signature `Ljava/util/Stack;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L308dc4.  v2:= temp @kind object;
  #L308dc6.  v2:= (`f7.b`) v2 @kind object;
  #L308dca.  v0[v1]:= v2 @kind object;
  #L308dce.  v1:= v1 + 1;
  #L308dd2.  goto L308db6;
  #L308dd4.  v4:= new `x6.l`;
  #L308dd8.  call `<init>`(v4, v0) @signature `Lx6/l;.<init>:([Lf7/b;)V` @kind direct;
  #L308dde.  return v4 @kind object;
}
procedure `void` `l`(`f7.d$b` v3 @kind this) @signature `Lf7/d$b;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L308b20.  v0:= v3.`f7.d$b.d` @type ^`int`;
  #L308b24.  v1:= 1I;
  #L308b26.  v0:= v0 - v1 @kind int;
  #L308b28.  v3.`f7.d$b.d` @type ^`int` := v0;
  #L308b2c.  call temp:= `h`(v3) @signature `Lf7/d$b;.h:()Z` @kind virtual;
  #L308b32.  v0:= temp;
  #L308b34.  if v0 == 0 then goto L308b46;
  #L308b38.  v0:= v3.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L308b3c.  v2:= ")" @kind object;
  #L308b40.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L308b46.  v3.`f7.d$b.e` @type ^`boolean` := v1 @kind boolean;
  #L308b4a.  return @kind void;
}
procedure `void` `m`(`f7.d$b` v3 @kind this) @signature `Lf7/d$b;.m:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L308b5c.  call temp:= `h`(v3) @signature `Lf7/d$b;.h:()Z` @kind virtual;
  #L308b62.  v0:= temp;
  #L308b64.  v1:= "Can't end range without starting a range!" @kind object;
  #L308b68.  call `g`(v0, v1) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L308b6e.  v0:= 0I;
  #L308b70.  v1:= v3.`f7.d$b.d` @type ^`int`;
  #L308b74.  v2:= ")" @kind object;
  #L308b78.  if v0 >= v1 then goto L308b8c;
  #L308b7c.  v1:= v3.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L308b80.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L308b86.  v0:= v0 + 1;
  #L308b8a.  goto L308b70;
  #L308b8c.  v0:= v3.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L308b90.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L308b96.  v0:= v3.`f7.d$b.c` @type ^`int`;
  #L308b9a.  call temp:= `k`(v3, v0) @signature `Lf7/d$b;.k:(I)Lx6/l;` @kind direct;
  #L308ba0.  v0:= temp @kind object;
  #L308ba2.  v1:= v3.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L308ba6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L308bac.  v1:= temp @kind object;
  #L308bae.  call temp:= `i`(v1) @signature `La7/m;.i:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L308bb4.  v1:= temp @kind object;
  #L308bb6.  v2:= v3.`f7.d$b.g` @type ^`java.util.List` @kind object;
  #L308bba.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L308bc0.  v1:= v3.`f7.d$b.f` @type ^`java.util.List` @kind object;
  #L308bc4.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L308bca.  v0:= 0I;
  #L308bcc.  v3.`f7.d$b.a` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L308bd0.  return @kind void;
}
procedure `void` `n`(`f7.d$b` v3 @kind this) @signature `Lf7/d$b;.n:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L308be4.  call temp:= `h`(v3) @signature `Lf7/d$b;.h:()Z` @kind virtual;
  #L308bea.  v0:= temp;
  #L308bec.  if v0 != 0 then goto L308c54;
  #L308bf0.  v0:= new `java.lang.StringBuilder`;
  #L308bf4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L308bfa.  v3.`f7.d$b.a` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L308bfe.  v1:= "(" @kind object;
  #L308c02.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L308c08.  v0:= v3.`f7.d$b.d` @type ^`int`;
  #L308c0c.  call temp:= `k`(v3, v0) @signature `Lf7/d$b;.k:(I)Lx6/l;` @kind direct;
  #L308c12.  v0:= temp @kind object;
  #L308c14.  call temp:= `iterator`(v0) @signature `Lx6/l;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L308c1a.  v0:= temp @kind object;
  #L308c1c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L308c22.  v1:= temp;
  #L308c24.  if v1 == 0 then goto L308c4e;
  #L308c28.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L308c2e.  v1:= temp @kind object;
  #L308c30.  v1:= (`f7.b`) v1 @kind object;
  #L308c34.  v2:= v3.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L308c38.  call `g`(v3, v2, v1) @signature `Lf7/d$b;.g:(Ljava/lang/StringBuilder;Lf7/b;)V` @kind direct;
  #L308c3e.  v1:= v3.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L308c42.  v2:= ":(" @kind object;
  #L308c46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L308c4c.  goto L308c1c;
  #L308c4e.  v0:= 0I;
  #L308c50.  v3.`f7.d$b.e` @type ^`boolean` := v0 @kind boolean;
  #L308c54.  return @kind void;
}
procedure `void` `o`(`f7.d$b` v2 @kind this) @signature `Lf7/d$b;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L308c68.  v0:= v2.`f7.d$b.d` @type ^`int`;
  #L308c6c.  if v0 != 0 then goto L308c74;
  #L308c70.  v0:= 1I;
  #L308c72.  goto L308c76;
  #L308c74.  v0:= 0I;
  #L308c76.  v1:= "Can't finish hashing in the middle processing a child" @kind object;
  #L308c7a.  call `g`(v0, v1) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L308c80.  call temp:= `h`(v2) @signature `Lf7/d$b;.h:()Z` @kind virtual;
  #L308c86.  v0:= temp;
  #L308c88.  if v0 == 0 then goto L308c92;
  #L308c8c.  call `m`(v2) @signature `Lf7/d$b;.m:()V` @kind direct;
  #L308c92.  v0:= v2.`f7.d$b.g` @type ^`java.util.List` @kind object;
  #L308c96.  v1:= "" @kind object;
  #L308c9a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L308ca0.  return @kind void;
}
procedure `void` `p`(`f7.d$b` v2 @kind this, `f7.k` v3 @kind object) @signature `Lf7/d$b;.p:(Lf7/k;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L308cb4.  call `n`(v2) @signature `Lf7/d$b;.n:()V` @kind direct;
  #L308cba.  v0:= v2.`f7.d$b.d` @type ^`int`;
  #L308cbe.  v2.`f7.d$b.c` @type ^`int` := v0;
  #L308cc2.  v0:= v2.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L308cc6.  v1:= `@@f7.n$b.p` @type ^`f7.n$b` @kind object;
  #L308cca.  call temp:= `M`(v3, v1) @signature `Lf7/n;.M:(Lf7/n$b;)Ljava/lang/String;` @kind interface;
  #L308cd0.  v3:= temp @kind object;
  #L308cd2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L308cd8.  v3:= 1I;
  #L308cda.  v2.`f7.d$b.e` @type ^`boolean` := v3 @kind boolean;
  #L308cde.  v3:= v2.`f7.d$b.h` @type ^`f7.d$d` @kind object;
  #L308ce2.  call temp:= `a`(v3, v2) @signature `Lf7/d$d;.a:(Lf7/d$b;)Z` @kind interface;
  #L308ce8.  v3:= temp;
  #L308cea.  if v3 == 0 then goto L308cf4;
  #L308cee.  call `m`(v2) @signature `Lf7/d$b;.m:()V` @kind direct;
  #L308cf4.  return @kind void;
}
procedure `void` `q`(`f7.d$b` v2 @kind this, `f7.b` v3 @kind object) @signature `Lf7/d$b;.q:(Lf7/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L308d08.  call `n`(v2) @signature `Lf7/d$b;.n:()V` @kind direct;
  #L308d0e.  v0:= v2.`f7.d$b.e` @type ^`boolean` @kind boolean;
  #L308d12.  if v0 == 0 then goto L308d24;
  #L308d16.  v0:= v2.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L308d1a.  v1:= "," @kind object;
  #L308d1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L308d24.  v0:= v2.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L308d28.  call `g`(v2, v0, v3) @signature `Lf7/d$b;.g:(Ljava/lang/StringBuilder;Lf7/b;)V` @kind direct;
  #L308d2e.  v0:= v2.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L308d32.  v1:= ":(" @kind object;
  #L308d36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L308d3c.  v0:= v2.`f7.d$b.d` @type ^`int`;
  #L308d40.  v1:= v2.`f7.d$b.b` @type ^`java.util.Stack` @kind object;
  #L308d44.  call temp:= `size`(v1) @signature `Ljava/util/Stack;.size:()I` @kind virtual;
  #L308d4a.  v1:= temp;
  #L308d4c.  if v0 != v1 then goto L308d5c;
  #L308d50.  v0:= v2.`f7.d$b.b` @type ^`java.util.Stack` @kind object;
  #L308d54.  call temp:= `add`(v0, v3) @signature `Ljava/util/Stack;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L308d5a.  goto L308d6a;
  #L308d5c.  v0:= v2.`f7.d$b.b` @type ^`java.util.Stack` @kind object;
  #L308d60.  v1:= v2.`f7.d$b.d` @type ^`int`;
  #L308d64.  call temp:= `set`(v0, v1, v3) @signature `Ljava/util/Stack;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L308d6a.  v3:= v2.`f7.d$b.d` @type ^`int`;
  #L308d6e.  v3:= v3 + 1;
  #L308d72.  v2.`f7.d$b.d` @type ^`int` := v3;
  #L308d76.  v3:= 0I;
  #L308d78.  v2.`f7.d$b.e` @type ^`boolean` := v3 @kind boolean;
  #L308d7c.  return @kind void;
}
procedure `boolean` `h`(`f7.d$b` v1 @kind this) @signature `Lf7/d$b;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3089d0.  v0:= v1.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L3089d4.  if v0 == 0 then goto L3089dc;
  #L3089d8.  v0:= 1I;
  #L3089da.  goto L3089de;
  #L3089dc.  v0:= 0I;
  #L3089de.  return v0;
}
procedure `int` `i`(`f7.d$b` v1 @kind this) @signature `Lf7/d$b;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3089f0.  v0:= v1.`f7.d$b.a` @type ^`java.lang.StringBuilder` @kind object;
  #L3089f4.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L3089fa.  v0:= temp;
  #L3089fc.  return v0;
}
procedure `x6.l` `j`(`f7.d$b` v1 @kind this) @signature `Lf7/d$b;.j:()Lx6/l;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308d90.  v0:= v1.`f7.d$b.d` @type ^`int`;
  #L308d94.  call temp:= `k`(v1, v0) @signature `Lf7/d$b;.k:(I)Lx6/l;` @kind direct;
  #L308d9a.  v0:= temp @kind object;
  #L308d9c.  return v0 @kind object;
}
