record `f7.a` @kind class @AccessFlag PUBLIC extends `f7.k` @kind class {
  `boolean` `f7.a.q` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f7.a` v0 @kind this, `java.lang.Boolean` v1 @kind object, `f7.n` v2 @kind object) @signature `Lf7/a;.<init>:(Ljava/lang/Boolean;Lf7/n;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L307898.  call `<init>`(v0, v2) @signature `Lf7/k;.<init>:(Lf7/n;)V` @kind direct;
  #L30789e.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L3078a4.  v1:= temp;
  #L3078a6.  v0.`f7.a.q` @type ^`boolean` := v1 @kind boolean;
  #L3078aa.  return @kind void;
}
procedure `f7.n` `E`(`f7.a` v0 @kind this, `f7.n` v1 @kind object) @signature `Lf7/a;.E:(Lf7/n;)Lf7/n;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3077a4.  call temp:= `e0`(v0, v1) @signature `Lf7/a;.e0:(Lf7/n;)Lf7/a;` @kind virtual;
  #L3077aa.  v1:= temp @kind object;
  #L3077ac.  return v1 @kind object;
}
procedure `java.lang.String` `M`(`f7.a` v1 @kind this, `f7.n$b` v2 @kind object) @signature `Lf7/a;.M:(Lf7/n$b;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L307850.  v0:= new `java.lang.StringBuilder`;
  #L307854.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30785a.  call temp:= `b0`(v1, v2) @signature `Lf7/k;.b0:(Lf7/n$b;)Ljava/lang/String;` @kind virtual;
  #L307860.  v2:= temp @kind object;
  #L307862.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L307868.  v2:= "boolean:" @kind object;
  #L30786c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L307872.  v2:= v1.`f7.a.q` @type ^`boolean` @kind boolean;
  #L307876.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L30787c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L307882.  v2:= temp @kind object;
  #L307884.  return v2 @kind object;
}
procedure `f7.k$b` `a0`(`f7.a` v1 @kind this) @signature `Lf7/a;.a0:()Lf7/k$b;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L30778c.  v0:= `@@f7.k$b.p` @type ^`f7.k$b` @kind object;
  #L307790.  return v0 @kind object;
}
procedure `int` `d0`(`f7.a` v1 @kind this, `f7.a` v2 @kind object) @signature `Lf7/a;.d0:(Lf7/a;)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3077c0.  v0:= v1.`f7.a.q` @type ^`boolean` @kind boolean;
  #L3077c4.  v2:= v2.`f7.a.q` @type ^`boolean` @kind boolean;
  #L3077c8.  if v0 != v2 then goto L3077d0;
  #L3077cc.  v2:= 0I;
  #L3077ce.  goto L3077da;
  #L3077d0.  if v0 == 0 then goto L3077d8;
  #L3077d4.  v2:= 1I;
  #L3077d6.  goto L3077da;
  #L3077d8.  v2:= -1I;
  #L3077da.  return v2;
}
procedure `f7.a` `e0`(`f7.a` v2 @kind this, `f7.n` v3 @kind object) @signature `Lf7/a;.e0:(Lf7/n;)Lf7/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L307764.  v0:= new `f7.a`;
  #L307768.  v1:= v2.`f7.a.q` @type ^`boolean` @kind boolean;
  #L30776c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L307772.  v1:= temp @kind object;
  #L307774.  call `<init>`(v0, v1, v3) @signature `Lf7/a;.<init>:(Ljava/lang/Boolean;Lf7/n;)V` @kind direct;
  #L30777a.  return v0 @kind object;
}
procedure `boolean` `equals`(`f7.a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lf7/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L307720.  v0:= instanceof @variable v4 @type ^`f7.a` @kind boolean;
  #L307724.  v1:= 0I;
  #L307726.  if v0 != 0 then goto L30772c;
  #L30772a.  return v1;
  #L30772c.  v4:= (`f7.a`) v4 @kind object;
  #L307730.  v0:= v3.`f7.a.q` @type ^`boolean` @kind boolean;
  #L307734.  v2:= v4.`f7.a.q` @type ^`boolean` @kind boolean;
  #L307738.  if v0 != v2 then goto L307752;
  #L30773c.  v0:= v3.`f7.k.o` @type ^`f7.n` @kind object;
  #L307740.  v4:= v4.`f7.k.o` @type ^`f7.n` @kind object;
  #L307744.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30774a.  v4:= temp;
  #L30774c.  if v4 == 0 then goto L307752;
  #L307750.  v1:= 1I;
  #L307752.  return v1;
}
procedure `java.lang.Object` `getValue`(`f7.a` v1 @kind this) @signature `Lf7/a;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L307830.  v0:= v1.`f7.a.q` @type ^`boolean` @kind boolean;
  #L307834.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L30783a.  v0:= temp @kind object;
  #L30783c.  return v0 @kind object;
}
procedure `int` `h`(`f7.a` v0 @kind this, `f7.k` v1 @kind object) @signature `Lf7/a;.h:(Lf7/k;)I` @AccessFlag PROTECTED_SYNTHETIC {
    temp;

  #L3077ec.  v1:= (`f7.a`) v1 @kind object;
  #L3077f0.  call temp:= `d0`(v0, v1) @signature `Lf7/a;.d0:(Lf7/a;)I` @kind virtual;
  #L3077f6.  v1:= temp;
  #L3077f8.  return v1;
}
procedure `int` `hashCode`(`f7.a` v2 @kind this) @signature `Lf7/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30780c.  v0:= v2.`f7.a.q` @type ^`boolean` @kind boolean;
  #L307810.  v1:= v2.`f7.k.o` @type ^`f7.n` @kind object;
  #L307814.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30781a.  v1:= temp;
  #L30781c.  v0:= v0 + v1 @kind int;
  #L30781e.  return v0;
}
