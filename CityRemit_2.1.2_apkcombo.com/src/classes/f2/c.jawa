record `f2.c` @kind class @AccessFlag FINAL extends `a2.v` @kind class {
  `long` `f2.c.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f2.c` v2 @kind this, `a2.m` v3 @kind object, `long` v4 ) @signature `Lf2/c;.<init>:(La2/m;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L304978.  call `<init>`(v2, v3) @signature `La2/v;.<init>:(La2/m;)V` @kind direct;
  #L30497e.  call temp:= `q`(v3) @signature `La2/m;.q:()J` @kind interface;
  #L304984.  v0:= temp @kind wide;
  #L304986.  v3:= lcmp(v0, v4);
  #L30498a.  if v3 < 0 then goto L304992;
  #L30498e.  v3:= 1I;
  #L304990.  goto L304994;
  #L304992.  v3:= 0I;
  #L304994.  call `a`(v3) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L30499a.  v2.`f2.c.b` @type ^`long` := v4 @kind wide;
  #L30499e.  return @kind void;
}
procedure `long` `a`(`f2.c` v4 @kind this) @signature `Lf2/c;.a:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L304918.  call temp:= `a`(v4) @signature `La2/v;.a:()J` @kind super;
  #L30491e.  v0:= temp @kind wide;
  #L304920.  v2:= v4.`f2.c.b` @type ^`long` @kind wide;
  #L304924.  v0:= v0 - v2 @kind long;
  #L304926.  return v0 @kind wide;
}
procedure `long` `n`(`f2.c` v4 @kind this) @signature `Lf2/c;.n:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L304938.  call temp:= `n`(v4) @signature `La2/v;.n:()J` @kind super;
  #L30493e.  v0:= temp @kind wide;
  #L304940.  v2:= v4.`f2.c.b` @type ^`long` @kind wide;
  #L304944.  v0:= v0 - v2 @kind long;
  #L304946.  return v0 @kind wide;
}
procedure `long` `q`(`f2.c` v4 @kind this) @signature `Lf2/c;.q:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L304958.  call temp:= `q`(v4) @signature `La2/v;.q:()J` @kind super;
  #L30495e.  v0:= temp @kind wide;
  #L304960.  v2:= v4.`f2.c.b` @type ^`long` @kind wide;
  #L304964.  v0:= v0 - v2 @kind long;
  #L304966.  return v0 @kind wide;
}
