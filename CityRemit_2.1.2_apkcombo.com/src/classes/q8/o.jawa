record `q8.o` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `q8.o.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `q8.o.b` @AccessFlag PRIVATE;
  `java.util.Queue` `q8.o.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `q8.o.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`q8.o` v1 @kind this) @signature `Lq8/o;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L427da8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L427dae.  v0:= new `java.lang.Object`;
  #L427db2.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L427db8.  v1.`q8.o.a` @type ^`java.lang.Object` := v0 @kind object;
  #L427dbc.  v0:= new `java.util.ArrayDeque`;
  #L427dc0.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L427dc6.  v1.`q8.o.c` @type ^`java.util.Queue` := v0 @kind object;
  #L427dca.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L427dce.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L427dd4.  v1.`q8.o.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L427dd8.  return @kind void;
}
procedure `java.util.concurrent.atomic.AtomicReference` `b`(`q8.o` v0 @kind object) @signature `Lq8/o;.b:(Lq8/o;)Ljava/util/concurrent/atomic/AtomicReference;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L427d90.  v0:= v0.`q8.o.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L427d94.  return v0 @kind object;
}
procedure `void` `c`(`q8.o` v0 @kind object) @signature `Lq8/o;.c:(Lq8/o;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L427e50.  call `d`(v0) @signature `Lq8/o;.d:()V` @kind direct;
  #L427e56.  return @kind void;
}
procedure `void` `d`(`q8.o` v2 @kind this) @signature `Lq8/o;.d:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L427e68.  v0:= v2.`q8.o.a` @type ^`java.lang.Object` @kind object;
  #L427e6c.  @monitorenter v0
  #L427e6e.  v1:= v2.`q8.o.c` @type ^`java.util.Queue` @kind object;
  #L427e72.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L427e78.  v1:= temp;
  #L427e7a.  if v1 == 0 then goto L427e88;
  #L427e7e.  v1:= 0I;
  #L427e80.  v2.`q8.o.b` @type ^`boolean` := v1 @kind boolean;
  #L427e84.  @monitorexit v0
  #L427e86.  return @kind void;
  #L427e88.  v1:= v2.`q8.o.c` @type ^`java.util.Queue` @kind object;
  #L427e8c.  call temp:= `remove`(v1) @signature `Ljava/util/Queue;.remove:()Ljava/lang/Object;` @kind interface;
  #L427e92.  v1:= temp @kind object;
  #L427e94.  v1:= (`q8.e0`) v1 @kind object;
  #L427e98.  @monitorexit v0
  #L427e9a.  v0:= v1.`q8.e0.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L427e9e.  v1:= v1.`q8.e0.b` @type ^`java.lang.Runnable` @kind object;
  #L427ea2.  call `e`(v2, v0, v1) @signature `Lq8/o;.e:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)V` @kind direct;
  #L427ea8.  return @kind void;
  #L427eaa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L427eac.  @monitorexit v0
  #L427eae.  throw v1;
  catch `java.lang.Throwable` @[L427e6e..L427e9a] goto L427eaa;
  catch `java.lang.Throwable` @[L427eac..L427eae] goto L427eaa;
}
procedure `void` `e`(`q8.o` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object, `java.lang.Runnable` v3 @kind object) @signature `Lq8/o;.e:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L427ed4.  v0:= new `q8.c0`;
  #L427ed8.  call `<init>`(v0, v1, v3) @signature `Lq8/c0;.<init>:(Lq8/o;Ljava/lang/Runnable;)V` @kind direct;
  #L427ede.  call `execute`(v2, v0) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L427ee4.  return @kind void;
  #L427ee6.  call `d`(v1) @signature `Lq8/o;.d:()V` @kind direct;
  #L427eec.  return @kind void;
  catch `java.util.concurrent.RejectedExecutionException` @[L427ede..L427ee4] goto L427ee6;
}
procedure `void` `a`(`q8.o` v4 @kind this, `java.util.concurrent.Executor` v5 @kind object, `java.lang.Runnable` v6 @kind object) @signature `Lq8/o;.a:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L427dec.  v0:= v4.`q8.o.a` @type ^`java.lang.Object` @kind object;
  #L427df0.  @monitorenter v0
  #L427df2.  v1:= v4.`q8.o.b` @type ^`boolean` @kind boolean;
  #L427df6.  if v1 == 0 then goto L427e14;
  #L427dfa.  v1:= v4.`q8.o.c` @type ^`java.util.Queue` @kind object;
  #L427dfe.  v2:= new `q8.e0`;
  #L427e02.  v3:= 0I;
  #L427e04.  call `<init>`(v2, v5, v6, v3) @signature `Lq8/e0;.<init>:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;Lq8/d0;)V` @kind direct;
  #L427e0a.  call temp:= `add`(v1, v2) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L427e10.  @monitorexit v0
  #L427e12.  return @kind void;
  #L427e14.  v1:= 1I;
  #L427e16.  v4.`q8.o.b` @type ^`boolean` := v1 @kind boolean;
  #L427e1a.  @monitorexit v0
  #L427e1c.  call `e`(v4, v5, v6) @signature `Lq8/o;.e:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)V` @kind direct;
  #L427e22.  return @kind void;
  #L427e24.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L427e26.  @monitorexit v0
  #L427e28.  throw v5;
  catch `java.lang.Throwable` @[L427df2..L427e1c] goto L427e24;
  catch `java.lang.Throwable` @[L427e26..L427e28] goto L427e24;
}
