record `cc.h` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `cc.f` `a`(`int` v2 , `cc.e` v3 @kind object, `tb.l` v4 @kind object) @signature `Lcc/h;.a:(ILcc/e;Ltb/l;)Lcc/f;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1fb464.  v0:= -2I;
  #L1fb466.  v1:= 1I;
  #L1fb468.  if v2 == v0 then goto L1fb506;
  #L1fb46c.  v0:= -1I;
  #L1fb46e.  if v2 == v0 then goto L1fb4d2;
  #L1fb472.  if v2 == 0 then goto L1fb4b2;
  #L1fb476.  v0:= 2147483647I;
  #L1fb47c.  if v2 == v0 then goto L1fb4a6;
  #L1fb480.  if v2 != v1 then goto L1fb498;
  #L1fb484.  v0:= `@@cc.e.p` @type ^`cc.e` @kind object;
  #L1fb488.  if v3 != v0 then goto L1fb498;
  #L1fb48c.  v2:= new `cc.m`;
  #L1fb490.  call `<init>`(v2, v4) @signature `Lcc/m;.<init>:(Ltb/l;)V` @kind direct;
  #L1fb496.  goto L1fb524;
  #L1fb498.  v0:= new `cc.d`;
  #L1fb49c.  call `<init>`(v0, v2, v3, v4) @signature `Lcc/d;.<init>:(ILcc/e;Ltb/l;)V` @kind direct;
  #L1fb4a2.  v2:= v0 @kind object;
  #L1fb4a4.  goto L1fb524;
  #L1fb4a6.  v2:= new `cc.n`;
  #L1fb4aa.  call `<init>`(v2, v4) @signature `Lcc/n;.<init>:(Ltb/l;)V` @kind direct;
  #L1fb4b0.  goto L1fb524;
  #L1fb4b2.  v2:= `@@cc.e.o` @type ^`cc.e` @kind object;
  #L1fb4b6.  if v3 != v2 then goto L1fb4c6;
  #L1fb4ba.  v2:= new `cc.r`;
  #L1fb4be.  call `<init>`(v2, v4) @signature `Lcc/r;.<init>:(Ltb/l;)V` @kind direct;
  #L1fb4c4.  goto L1fb524;
  #L1fb4c6.  v2:= new `cc.d`;
  #L1fb4ca.  call `<init>`(v2, v1, v3, v4) @signature `Lcc/d;.<init>:(ILcc/e;Ltb/l;)V` @kind direct;
  #L1fb4d0.  goto L1fb524;
  #L1fb4d2.  v2:= `@@cc.e.o` @type ^`cc.e` @kind object;
  #L1fb4d6.  if v3 != v2 then goto L1fb4dc;
  #L1fb4da.  goto L1fb4de;
  #L1fb4dc.  v1:= 0I;
  #L1fb4de.  if v1 == 0 then goto L1fb4ee;
  #L1fb4e2.  v2:= new `cc.m`;
  #L1fb4e6.  call `<init>`(v2, v4) @signature `Lcc/m;.<init>:(Ltb/l;)V` @kind direct;
  #L1fb4ec.  goto L1fb524;
  #L1fb4ee.  v2:= new `java.lang.IllegalArgumentException`;
  #L1fb4f2.  v3:= "CONFLATED capacity cannot be used with non-default onBufferOverflow" @kind object;
  #L1fb4f6.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fb4fc.  v3:= temp @kind object;
  #L1fb4fe.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fb504.  throw v2;
  #L1fb506.  v2:= new `cc.d`;
  #L1fb50a.  v0:= `@@cc.e.o` @type ^`cc.e` @kind object;
  #L1fb50e.  if v3 != v0 then goto L1fb51e;
  #L1fb512.  v0:= `@@cc.f.a` @type ^`cc.f$a` @kind object;
  #L1fb516.  call temp:= `a`(v0) @signature `Lcc/f$a;.a:()I` @kind virtual;
  #L1fb51c.  v1:= temp;
  #L1fb51e.  call `<init>`(v2, v1, v3, v4) @signature `Lcc/d;.<init>:(ILcc/e;Ltb/l;)V` @kind direct;
  #L1fb524.  return v2 @kind object;
}
procedure `cc.f` `b`(`int` v0 , `cc.e` v1 @kind object, `tb.l` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lcc/h;.b:(ILcc/e;Ltb/l;ILjava/lang/Object;)Lcc/f;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1fb428.  v4:= v3 ^& 1;
  #L1fb42c.  if v4 == 0 then goto L1fb432;
  #L1fb430.  v0:= 0I;
  #L1fb432.  v4:= v3 ^& 2;
  #L1fb436.  if v4 == 0 then goto L1fb43e;
  #L1fb43a.  v1:= `@@cc.e.o` @type ^`cc.e` @kind object;
  #L1fb43e.  v3:= v3 ^& 4;
  #L1fb442.  if v3 == 0 then goto L1fb448;
  #L1fb446.  v2:= 0I;
  #L1fb448.  call temp:= `a`(v0, v1, v2) @signature `Lcc/h;.a:(ILcc/e;Ltb/l;)Lcc/f;` @kind static;
  #L1fb44e.  v0:= temp @kind object;
  #L1fb450.  return v0 @kind object;
}
