record `cc.m` @kind class @AccessFlag PUBLIC extends `cc.a` @kind class {
  `java.util.concurrent.locks.ReentrantLock` `cc.m.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `cc.m.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`cc.m` v0 @kind this, `tb.l` v1 @kind object) @signature `Lcc/m;.<init>:(Ltb/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1fbb78.  call `<init>`(v0, v1) @signature `Lcc/a;.<init>:(Ltb/l;)V` @kind direct;
  #L1fbb7e.  v1:= new `java.util.concurrent.locks.ReentrantLock`;
  #L1fbb82.  call `<init>`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L1fbb88.  v0.`cc.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` := v1 @kind object;
  #L1fbb8c.  v1:= `@@cc.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fbb90.  v0.`cc.m.e` @type ^`java.lang.Object` := v1 @kind object;
  #L1fbb94.  return @kind void;
}
procedure `kotlinx.coroutines.internal.n0` `x`(`cc.m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcc/m;.x:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/n0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fbb40.  v0:= v4.`cc.m.e` @type ^`java.lang.Object` @kind object;
  #L1fbb44.  v1:= `@@cc.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fbb48.  v2:= 0I;
  #L1fbb4a.  if v0 != v1 then goto L1fbb50;
  #L1fbb4e.  goto L1fbb62;
  #L1fbb50.  v1:= v4.`cc.c.b` @type ^`tb.l` @kind object;
  #L1fbb54.  if v1 == 0 then goto L1fbb62;
  #L1fbb58.  v3:= 2I;
  #L1fbb5a.  call temp:= `d`(v1, v0, v2, v3, v2) @signature `Lkotlinx/coroutines/internal/z;.d:(Ltb/l;Ljava/lang/Object;Lkotlinx/coroutines/internal/n0;ILjava/lang/Object;)Lkotlinx/coroutines/internal/n0;` @kind static;
  #L1fbb60.  v2:= temp @kind object;
  #L1fbb62.  v4.`cc.m.e` @type ^`java.lang.Object` := v5 @kind object;
  #L1fbb66.  return v2 @kind object;
}
procedure `java.lang.String` `c`(`cc.m` v3 @kind this) @signature `Lcc/m;.c:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L1fbad8.  v0:= v3.`cc.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1fbadc.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L1fbae2.  v1:= new `java.lang.StringBuilder`;
  #L1fbae6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fbaec.  v2:= "(value=" @kind object;
  #L1fbaf0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fbaf6.  v2:= v3.`cc.m.e` @type ^`java.lang.Object` @kind object;
  #L1fbafa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fbb00.  v2:= 41I;
  #L1fbb04.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fbb0a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fbb10.  v1:= temp @kind object;
  #L1fbb12.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fbb18.  return v1 @kind object;
  #L1fbb1a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fbb1c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fbb22.  throw v1;
  catch `java.lang.Throwable` @[L1fbae2..L1fbb12] goto L1fbb1a;
}
procedure `java.lang.Object` `i`(`cc.m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcc/m;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fb968.  v0:= v4.`cc.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1fb96c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L1fb972.  call temp:= `d`(v4) @signature `Lcc/c;.d:()Lcc/j;` @kind virtual;
  #L1fb978.  v1:= temp @kind object;
  #L1fb97a.  if v1 == 0 then goto L1fb986;
  #L1fb97e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fb984.  return v1 @kind object;
  #L1fb986.  v1:= v4.`cc.m.e` @type ^`java.lang.Object` @kind object;
  #L1fb98a.  v2:= `@@cc.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fb98e.  if v1 != v2 then goto L1fba0a;
  #L1fb992.  call temp:= `l`(v4) @signature `Lcc/a;.l:()Lcc/q;` @kind virtual;
  #L1fb998.  v1:= temp @kind object;
  #L1fb99a.  if v1 != 0 then goto L1fb9a0;
  #L1fb99e.  goto L1fba0a;
  #L1fb9a0.  v2:= instanceof @variable v1 @type ^`cc.j` @kind boolean;
  #L1fb9a4.  if v2 == 0 then goto L1fb9b0;
  #L1fb9a8.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fb9ae.  return v1 @kind object;
  #L1fb9b0.  call `b`(v1) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L1fb9b6.  v2:= 0I;
  #L1fb9b8.  call temp:= `f`(v1, v5, v2) @signature `Lcc/q;.f:(Ljava/lang/Object;Lkotlinx/coroutines/internal/r$b;)Lkotlinx/coroutines/internal/f0;` @kind interface;
  #L1fb9be.  v2:= temp @kind object;
  #L1fb9c0.  if v2 == 0 then goto L1fb992;
  #L1fb9c4.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L1fb9ca.  v3:= temp;
  #L1fb9cc.  if v3 == 0 then goto L1fb9f0;
  #L1fb9d0.  v3:= `@@ac.m.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fb9d4.  if v2 != v3 then goto L1fb9dc;
  #L1fb9d8.  v2:= 1I;
  #L1fb9da.  goto L1fb9de;
  #L1fb9dc.  v2:= 0I;
  #L1fb9de.  if v2 == 0 then goto L1fb9e4;
  #L1fb9e2.  goto L1fb9f0;
  #L1fb9e4.  v5:= new `java.lang.AssertionError`;
  #L1fb9e8.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1fb9ee.  throw v5;
  #L1fb9f0.  v2:= `@@jb.s.a` @type ^`jb.s` @kind object;
  #L1fb9f4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fb9fa.  call `b`(v1, v5) @signature `Lcc/q;.b:(Ljava/lang/Object;)V` @kind interface;
  #L1fba00.  call temp:= `e`(v1) @signature `Lcc/q;.e:()Ljava/lang/Object;` @kind interface;
  #L1fba06.  v5:= temp @kind object;
  #L1fba08.  return v5 @kind object;
  #L1fba0a.  call temp:= `x`(v4, v5) @signature `Lcc/m;.x:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/n0;` @kind direct;
  #L1fba10.  v5:= temp @kind object;
  #L1fba12.  if v5 != 0 then goto L1fba22;
  #L1fba16.  v5:= `@@cc.b.b` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fba1a.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fba20.  return v5 @kind object;
  #L1fba22.  throw v5;
  #L1fba24.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fba26.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fba2c.  throw v5;
  catch `java.lang.Throwable` @[L1fb972..L1fb97a] goto L1fba24;
  catch `java.lang.Throwable` @[L1fb986..L1fb9a4] goto L1fba24;
  catch `java.lang.Throwable` @[L1fb9b0..L1fb9f4] goto L1fba24;
  catch `java.lang.Throwable` @[L1fba0a..L1fba1a] goto L1fba24;
  catch `java.lang.Throwable` @[L1fba22..L1fba24] goto L1fba24;
}
procedure `boolean` `q`(`cc.m` v1 @kind this, `cc.o` v2 @kind object) @signature `Lcc/m;.q:(Lcc/o;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1fb8c8.  v0:= v1.`cc.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1fb8cc.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L1fb8d2.  call temp:= `q`(v1, v2) @signature `Lcc/a;.q:(Lcc/o;)Z` @kind super;
  #L1fb8d8.  v2:= temp;
  #L1fb8da.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fb8e0.  return v2;
  #L1fb8e2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fb8e4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fb8ea.  throw v2;
  catch `java.lang.Throwable` @[L1fb8d2..L1fb8da] goto L1fb8e2;
}
procedure `boolean` `r`(`cc.m` v1 @kind this) @signature `Lcc/m;.r:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1fb908.  v0:= 0I;
  #L1fb90a.  return v0;
}
procedure `boolean` `s`(`cc.m` v3 @kind this) @signature `Lcc/m;.s:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1fb91c.  v0:= v3.`cc.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1fb920.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L1fb926.  v1:= v3.`cc.m.e` @type ^`java.lang.Object` @kind object;
  #L1fb92a.  v2:= `@@cc.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fb92e.  if v1 != v2 then goto L1fb936;
  #L1fb932.  v1:= 1I;
  #L1fb934.  goto L1fb938;
  #L1fb936.  v1:= 0I;
  #L1fb938.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fb93e.  return v1;
  #L1fb940.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fb942.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fb948.  throw v1;
  catch `java.lang.Throwable` @[L1fb926..L1fb92e] goto L1fb940;
}
procedure `java.lang.Object` `v`(`cc.m` v3 @kind this) @signature `Lcc/m;.v:()Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L1fba6c.  v0:= v3.`cc.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1fba70.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L1fba76.  v1:= v3.`cc.m.e` @type ^`java.lang.Object` @kind object;
  #L1fba7a.  v2:= `@@cc.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fba7e.  if v1 != v2 then goto L1fba9a;
  #L1fba82.  call temp:= `d`(v3) @signature `Lcc/c;.d:()Lcc/j;` @kind virtual;
  #L1fba88.  v1:= temp @kind object;
  #L1fba8a.  if v1 != 0 then goto L1fba92;
  #L1fba8e.  v1:= `@@cc.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fba92.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fba98.  return v1 @kind object;
  #L1fba9a.  v3.`cc.m.e` @type ^`java.lang.Object` := v2 @kind object;
  #L1fba9e.  v2:= `@@jb.s.a` @type ^`jb.s` @kind object;
  #L1fbaa2.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fbaa8.  return v1 @kind object;
  #L1fbaaa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fbaac.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fbab2.  throw v1;
  catch `java.lang.Throwable` @[L1fba76..L1fba92] goto L1fbaaa;
  catch `java.lang.Throwable` @[L1fba9a..L1fbaa2] goto L1fbaaa;
}
