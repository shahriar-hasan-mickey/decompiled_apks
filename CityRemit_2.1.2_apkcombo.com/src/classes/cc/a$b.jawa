record `cc.a$b` @kind class @AccessFlag  extends `cc.o` @kind class {
  `cc.a$a` `cc.a$b.r` @AccessFlag PUBLIC_FINAL;
  `ac.k` `cc.a$b.s` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`cc.a$b` v0 @kind this, `cc.a$a` v1 @kind object, `ac.k` v2 @kind object) @signature `Lcc/a$b;.<init>:(Lcc/a$a;Lac/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1fa2cc.  call `<init>`(v0) @signature `Lcc/o;.<init>:()V` @kind direct;
  #L1fa2d2.  v0.`cc.a$b.r` @type ^`cc.a$a` := v1 @kind object;
  #L1fa2d6.  v0.`cc.a$b.s` @type ^`ac.k` := v2 @kind object;
  #L1fa2da.  return @kind void;
}
procedure `tb.l` `A`(`cc.a$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcc/a$b;.A:(Ljava/lang/Object;)Ltb/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fa290.  v0:= v2.`cc.a$b.r` @type ^`cc.a$a` @kind object;
  #L1fa294.  v0:= v0.`cc.a$a.a` @type ^`cc.a` @kind object;
  #L1fa298.  v0:= v0.`cc.c.b` @type ^`tb.l` @kind object;
  #L1fa29c.  if v0 == 0 then goto L1fa2b6;
  #L1fa2a0.  v1:= v2.`cc.a$b.s` @type ^`ac.k` @kind object;
  #L1fa2a4.  call temp:= `getContext`(v1) @signature `Lmb/d;.getContext:()Lmb/g;` @kind interface;
  #L1fa2aa.  v1:= temp @kind object;
  #L1fa2ac.  call temp:= `a`(v0, v3, v1) @signature `Lkotlinx/coroutines/internal/z;.a:(Ltb/l;Ljava/lang/Object;Lmb/g;)Ltb/l;` @kind static;
  #L1fa2b2.  v3:= temp @kind object;
  #L1fa2b4.  goto L1fa2b8;
  #L1fa2b6.  v3:= 0I;
  #L1fa2b8.  return v3 @kind object;
}
procedure `void` `b`(`cc.a$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcc/a$b;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fa2ec.  v0:= v1.`cc.a$b.r` @type ^`cc.a$a` @kind object;
  #L1fa2f0.  call `d`(v0, v2) @signature `Lcc/a$a;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L1fa2f6.  v2:= v1.`cc.a$b.s` @type ^`ac.k` @kind object;
  #L1fa2fa.  v0:= `@@ac.m.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fa2fe.  call `m`(v2, v0) @signature `Lac/k;.m:(Ljava/lang/Object;)V` @kind interface;
  #L1fa304.  return @kind void;
}
procedure `kotlinx.coroutines.internal.f0` `f`(`cc.a$b` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlinx.coroutines.internal.r$b` v4 @kind object) @signature `Lcc/a$b;.f:(Ljava/lang/Object;Lkotlinx/coroutines/internal/r$b;)Lkotlinx/coroutines/internal/f0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fa22c.  v4:= v2.`cc.a$b.s` @type ^`ac.k` @kind object;
  #L1fa230.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L1fa234.  call temp:= `A`(v2, v3) @signature `Lcc/a$b;.A:(Ljava/lang/Object;)Ltb/l;` @kind virtual;
  #L1fa23a.  v3:= temp @kind object;
  #L1fa23c.  v1:= 0I;
  #L1fa23e.  call temp:= `g`(v4, v0, v1, v3) @signature `Lac/k;.g:(Ljava/lang/Object;Ljava/lang/Object;Ltb/l;)Ljava/lang/Object;` @kind interface;
  #L1fa244.  v3:= temp @kind object;
  #L1fa246.  if v3 != 0 then goto L1fa24c;
  #L1fa24a.  return v1 @kind object;
  #L1fa24c.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L1fa252.  v4:= temp;
  #L1fa254.  if v4 == 0 then goto L1fa278;
  #L1fa258.  v4:= `@@ac.m.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fa25c.  if v3 != v4 then goto L1fa264;
  #L1fa260.  v3:= 1I;
  #L1fa262.  goto L1fa266;
  #L1fa264.  v3:= 0I;
  #L1fa266.  if v3 == 0 then goto L1fa26c;
  #L1fa26a.  goto L1fa278;
  #L1fa26c.  v3:= new `java.lang.AssertionError`;
  #L1fa270.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1fa276.  throw v3;
  #L1fa278.  v3:= `@@ac.m.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fa27c.  return v3 @kind object;
}
procedure `java.lang.String` `toString`(`cc.a$b` v2 @kind this) @signature `Lcc/a$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fa1f0.  v0:= new `java.lang.StringBuilder`;
  #L1fa1f4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fa1fa.  v1:= "ReceiveHasNext@" @kind object;
  #L1fa1fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa204.  call temp:= `b`(v2) @signature `Lac/q0;.b:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1fa20a.  v1:= temp @kind object;
  #L1fa20c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa212.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fa218.  v0:= temp @kind object;
  #L1fa21a.  return v0 @kind object;
}
procedure `void` `z`(`cc.a$b` v4 @kind this, `cc.j` v5 @kind object) @signature `Lcc/a$b;.z:(Lcc/j;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fa318.  v0:= v5.`cc.j.r` @type ^`java.lang.Throwable` @kind object;
  #L1fa31c.  if v0 != 0 then goto L1fa336;
  #L1fa320.  v0:= v4.`cc.a$b.s` @type ^`ac.k` @kind object;
  #L1fa324.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L1fa328.  v2:= 2I;
  #L1fa32a.  v3:= 0I;
  #L1fa32c.  call temp:= `a`(v0, v1, v3, v2, v3) @signature `Lac/k$a;.a:(Lac/k;Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1fa332.  v0:= temp @kind object;
  #L1fa334.  goto L1fa34a;
  #L1fa336.  v0:= v4.`cc.a$b.s` @type ^`ac.k` @kind object;
  #L1fa33a.  call temp:= `E`(v5) @signature `Lcc/j;.E:()Ljava/lang/Throwable;` @kind virtual;
  #L1fa340.  v1:= temp @kind object;
  #L1fa342.  call temp:= `l`(v0, v1) @signature `Lac/k;.l:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind interface;
  #L1fa348.  v0:= temp @kind object;
  #L1fa34a.  if v0 == 0 then goto L1fa362;
  #L1fa34e.  v1:= v4.`cc.a$b.r` @type ^`cc.a$a` @kind object;
  #L1fa352.  call `d`(v1, v5) @signature `Lcc/a$a;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L1fa358.  v5:= v4.`cc.a$b.s` @type ^`ac.k` @kind object;
  #L1fa35c.  call `m`(v5, v0) @signature `Lac/k;.m:(Ljava/lang/Object;)V` @kind interface;
  #L1fa362.  return @kind void;
}
