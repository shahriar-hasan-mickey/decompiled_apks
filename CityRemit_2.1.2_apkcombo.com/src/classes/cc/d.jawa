record `cc.d` @kind class @AccessFlag PUBLIC extends `cc.a` @kind class {
  `int` `cc.d.d` @AccessFlag PRIVATE_FINAL;
  `cc.e` `cc.d.e` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.locks.ReentrantLock` `cc.d.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `cc.d.g` @AccessFlag PRIVATE;
  `int` `cc.d.h` @AccessFlag PRIVATE;
  `int` `cc.d.size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
procedure `void` `<init>`(`cc.d` v6 @kind this, `int` v7 , `cc.e` v8 @kind object, `tb.l` v9 @kind object) @signature `Lcc/d;.<init>:(ILcc/e;Ltb/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1fb124.  call `<init>`(v6, v9) @signature `Lcc/a;.<init>:(Ltb/l;)V` @kind direct;
  #L1fb12a.  v6.`cc.d.d` @type ^`int` := v7;
  #L1fb12e.  v6.`cc.d.e` @type ^`cc.e` := v8 @kind object;
  #L1fb132.  v8:= 0I;
  #L1fb134.  v9:= 1I;
  #L1fb136.  if v7 < v9 then goto L1fb13c;
  #L1fb13a.  goto L1fb13e;
  #L1fb13c.  v9:= 0I;
  #L1fb13e.  if v9 == 0 then goto L1fb17e;
  #L1fb142.  v9:= new `java.util.concurrent.locks.ReentrantLock`;
  #L1fb146.  call `<init>`(v9) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L1fb14c.  v6.`cc.d.f` @type ^`java.util.concurrent.locks.ReentrantLock` := v9 @kind object;
  #L1fb150.  v9:= 8I;
  #L1fb154.  call temp:= `min`(v7, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1fb15a.  v7:= temp;
  #L1fb15c.  v7:= new `java.lang.Object`[v7];
  #L1fb160.  v1:= `@@cc.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fb164.  v2:= 0I;
  #L1fb166.  v3:= 0I;
  #L1fb168.  v4:= 6I;
  #L1fb16a.  v5:= 0I;
  #L1fb16c.  v0:= v7 @kind object;
  #L1fb16e.  call `f`(v0, v1, v2, v3, v4, v5) @signature `Lkb/b;.f:([Ljava/lang/Object;Ljava/lang/Object;IIILjava/lang/Object;)V` @kind static;
  #L1fb174.  v6.`cc.d.g` @type ^`java.lang.Object`[] := v7 @kind object;
  #L1fb178.  v6.`cc.d.size` @type ^`int` := v8;
  #L1fb17c.  return @kind void;
  #L1fb17e.  v8:= new `java.lang.StringBuilder`;
  #L1fb182.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fb188.  v9:= "ArrayChannel capacity must be at least 1, but " @kind object;
  #L1fb18c.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fb192.  call temp:= `append`(v8, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fb198.  v7:= " was specified" @kind object;
  #L1fb19c.  call temp:= `append`(v8, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fb1a2.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fb1a8.  v7:= temp @kind object;
  #L1fb1aa.  v8:= new `java.lang.IllegalArgumentException`;
  #L1fb1ae.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fb1b4.  v7:= temp @kind object;
  #L1fb1b6.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fb1bc.  throw v8;
}
procedure `void` `x`(`cc.d` v5 @kind this, `int` v6 , `java.lang.Object` v7 @kind object) @signature `Lcc/d;.x:(ILjava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fb1d0.  v0:= v5.`cc.d.d` @type ^`int`;
  #L1fb1d4.  if v6 >= v0 then goto L1fb1f2;
  #L1fb1d8.  call `y`(v5, v6) @signature `Lcc/d;.y:(I)V` @kind direct;
  #L1fb1de.  v0:= v5.`cc.d.g` @type ^`java.lang.Object`[] @kind object;
  #L1fb1e2.  v1:= v5.`cc.d.h` @type ^`int`;
  #L1fb1e6.  v1:= v1 + v6 @kind int;
  #L1fb1e8.  v6:= length @variable v0;
  #L1fb1ea.  v1:= v1 %% v6 @kind int;
  #L1fb1ec.  v0[v1]:= v7 @kind object;
  #L1fb1f0.  goto L1fb24c;
  #L1fb1f2.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L1fb1f8.  v0:= temp;
  #L1fb1fa.  v1:= 1I;
  #L1fb1fc.  if v0 == 0 then goto L1fb224;
  #L1fb200.  v0:= v5.`cc.d.e` @type ^`cc.e` @kind object;
  #L1fb204.  v2:= `@@cc.e.p` @type ^`cc.e` @kind object;
  #L1fb208.  if v0 != v2 then goto L1fb210;
  #L1fb20c.  v0:= 1I;
  #L1fb20e.  goto L1fb212;
  #L1fb210.  v0:= 0I;
  #L1fb212.  if v0 == 0 then goto L1fb218;
  #L1fb216.  goto L1fb224;
  #L1fb218.  v6:= new `java.lang.AssertionError`;
  #L1fb21c.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1fb222.  throw v6;
  #L1fb224.  v0:= v5.`cc.d.g` @type ^`java.lang.Object`[] @kind object;
  #L1fb228.  v2:= v5.`cc.d.h` @type ^`int`;
  #L1fb22c.  v3:= length @variable v0;
  #L1fb22e.  v3:= v2 %% v3 @kind int;
  #L1fb232.  v4:= 0I;
  #L1fb234.  v0[v3]:= v4 @kind object;
  #L1fb238.  v6:= v6 + v2 @kind int;
  #L1fb23a.  v3:= length @variable v0;
  #L1fb23c.  v6:= v6 %% v3 @kind int;
  #L1fb23e.  v0[v6]:= v7 @kind object;
  #L1fb242.  v2:= v2 + v1 @kind int;
  #L1fb244.  v6:= length @variable v0;
  #L1fb246.  v2:= v2 %% v6 @kind int;
  #L1fb248.  v5.`cc.d.h` @type ^`int` := v2;
  #L1fb24c.  return @kind void;
}
procedure `void` `y`(`cc.d` v7 @kind this, `int` v8 ) @signature `Lcc/d;.y:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1fb260.  v0:= v7.`cc.d.g` @type ^`java.lang.Object`[] @kind object;
  #L1fb264.  v1:= length @variable v0;
  #L1fb266.  if v8 < v1 then goto L1fb2b6;
  #L1fb26a.  v0:= length @variable v0;
  #L1fb26c.  v0:= v0 * 2;
  #L1fb270.  v1:= v7.`cc.d.d` @type ^`int`;
  #L1fb274.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1fb27a.  v0:= temp;
  #L1fb27c.  v1:= new `java.lang.Object`[v0];
  #L1fb280.  v2:= 0I;
  #L1fb282.  v3:= 0I;
  #L1fb284.  if v3 >= v8 then goto L1fb2a4;
  #L1fb288.  v4:= v7.`cc.d.g` @type ^`java.lang.Object`[] @kind object;
  #L1fb28c.  v5:= v7.`cc.d.h` @type ^`int`;
  #L1fb290.  v5:= v5 + v3 @kind int;
  #L1fb292.  v6:= length @variable v4;
  #L1fb294.  v5:= v5 %% v6 @kind int;
  #L1fb296.  v4:= v4[v5] @kind object;
  #L1fb29a.  v1[v3]:= v4 @kind object;
  #L1fb29e.  v3:= v3 + 1;
  #L1fb2a2.  goto L1fb284;
  #L1fb2a4.  v3:= `@@cc.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fb2a8.  call `e`(v1, v3, v8, v0) @signature `Lkb/b;.e:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L1fb2ae.  v7.`cc.d.g` @type ^`java.lang.Object`[] := v1 @kind object;
  #L1fb2b2.  v7.`cc.d.h` @type ^`int` := v2;
  #L1fb2b6.  return @kind void;
}
procedure `kotlinx.coroutines.internal.f0` `z`(`cc.d` v3 @kind this, `int` v4 ) @signature `Lcc/d;.z:(I)Lkotlinx/coroutines/internal/f0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1fb0c0.  v0:= v3.`cc.d.d` @type ^`int`;
  #L1fb0c4.  v1:= 0I;
  #L1fb0c6.  v2:= 1I;
  #L1fb0c8.  if v4 >= v0 then goto L1fb0d4;
  #L1fb0cc.  v4:= v4 + v2 @kind int;
  #L1fb0ce.  v3.`cc.d.size` @type ^`int` := v4;
  #L1fb0d2.  return v1 @kind object;
  #L1fb0d4.  v4:= v3.`cc.d.e` @type ^`cc.e` @kind object;
  #L1fb0d8.  v0:= `@@cc.d$a.a` @type ^`int`[] @kind object;
  #L1fb0dc.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1fb0e2.  v4:= temp;
  #L1fb0e4.  v4:= v0[v4];
  #L1fb0e8.  if v4 == v2 then goto L1fb10c;
  #L1fb0ec.  v0:= 2I;
  #L1fb0ee.  if v4 == v0 then goto L1fb106;
  #L1fb0f2.  v0:= 3I;
  #L1fb0f4.  if v4 != v0 then goto L1fb0fa;
  #L1fb0f8.  goto L1fb110;
  #L1fb0fa.  v4:= new `jb.k`;
  #L1fb0fe.  call `<init>`(v4) @signature `Ljb/k;.<init>:()V` @kind direct;
  #L1fb104.  throw v4;
  #L1fb106.  v1:= `@@cc.b.b` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fb10a.  goto L1fb110;
  #L1fb10c.  v1:= `@@cc.b.c` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fb110.  return v1 @kind object;
}
procedure `java.lang.String` `c`(`cc.d` v2 @kind this) @signature `Lcc/d;.c:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1fb068.  v0:= new `java.lang.StringBuilder`;
  #L1fb06c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fb072.  v1:= "(buffer:capacity=" @kind object;
  #L1fb076.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fb07c.  v1:= v2.`cc.d.d` @type ^`int`;
  #L1fb080.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fb086.  v1:= ",size=" @kind object;
  #L1fb08a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fb090.  v1:= v2.`cc.d.size` @type ^`int`;
  #L1fb094.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fb09a.  v1:= 41I;
  #L1fb09e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fb0a4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fb0aa.  v0:= temp @kind object;
  #L1fb0ac.  return v0 @kind object;
}
procedure `java.lang.Object` `i`(`cc.d` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lcc/d;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fae18.  v0:= v5.`cc.d.f` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1fae1c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L1fae22.  v1:= v5.`cc.d.size` @type ^`int`;
  #L1fae26.  call temp:= `d`(v5) @signature `Lcc/c;.d:()Lcc/j;` @kind virtual;
  #L1fae2c.  v2:= temp @kind object;
  #L1fae2e.  if v2 == 0 then goto L1fae3a;
  #L1fae32.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fae38.  return v2 @kind object;
  #L1fae3a.  call temp:= `z`(v5, v1) @signature `Lcc/d;.z:(I)Lkotlinx/coroutines/internal/f0;` @kind direct;
  #L1fae40.  v2:= temp @kind object;
  #L1fae42.  if v2 == 0 then goto L1fae4e;
  #L1fae46.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fae4c.  return v2 @kind object;
  #L1fae4e.  if v1 != 0 then goto L1faed2;
  #L1fae52.  call temp:= `l`(v5) @signature `Lcc/a;.l:()Lcc/q;` @kind virtual;
  #L1fae58.  v2:= temp @kind object;
  #L1fae5a.  if v2 != 0 then goto L1fae60;
  #L1fae5e.  goto L1faed2;
  #L1fae60.  v3:= instanceof @variable v2 @type ^`cc.j` @kind boolean;
  #L1fae64.  if v3 == 0 then goto L1fae74;
  #L1fae68.  v5.`cc.d.size` @type ^`int` := v1;
  #L1fae6c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fae72.  return v2 @kind object;
  #L1fae74.  call `b`(v2) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L1fae7a.  v3:= 0I;
  #L1fae7c.  call temp:= `f`(v2, v6, v3) @signature `Lcc/q;.f:(Ljava/lang/Object;Lkotlinx/coroutines/internal/r$b;)Lkotlinx/coroutines/internal/f0;` @kind interface;
  #L1fae82.  v3:= temp @kind object;
  #L1fae84.  if v3 == 0 then goto L1fae52;
  #L1fae88.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L1fae8e.  v4:= temp;
  #L1fae90.  if v4 == 0 then goto L1faeb4;
  #L1fae94.  v4:= `@@ac.m.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fae98.  if v3 != v4 then goto L1faea0;
  #L1fae9c.  v3:= 1I;
  #L1fae9e.  goto L1faea2;
  #L1faea0.  v3:= 0I;
  #L1faea2.  if v3 == 0 then goto L1faea8;
  #L1faea6.  goto L1faeb4;
  #L1faea8.  v6:= new `java.lang.AssertionError`;
  #L1faeac.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1faeb2.  throw v6;
  #L1faeb4.  v5.`cc.d.size` @type ^`int` := v1;
  #L1faeb8.  v1:= `@@jb.s.a` @type ^`jb.s` @kind object;
  #L1faebc.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1faec2.  call `b`(v2, v6) @signature `Lcc/q;.b:(Ljava/lang/Object;)V` @kind interface;
  #L1faec8.  call temp:= `e`(v2) @signature `Lcc/q;.e:()Ljava/lang/Object;` @kind interface;
  #L1faece.  v6:= temp @kind object;
  #L1faed0.  return v6 @kind object;
  #L1faed2.  call `x`(v5, v1, v6) @signature `Lcc/d;.x:(ILjava/lang/Object;)V` @kind direct;
  #L1faed8.  v6:= `@@cc.b.b` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1faedc.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1faee2.  return v6 @kind object;
  #L1faee4.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1faee6.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1faeec.  throw v6;
  catch `java.lang.Throwable` @[L1fae22..L1fae2e] goto L1faee4;
  catch `java.lang.Throwable` @[L1fae3a..L1fae42] goto L1faee4;
  catch `java.lang.Throwable` @[L1fae52..L1fae6c] goto L1faee4;
  catch `java.lang.Throwable` @[L1fae74..L1faebc] goto L1faee4;
  catch `java.lang.Throwable` @[L1faed2..L1faedc] goto L1faee4;
}
procedure `boolean` `q`(`cc.d` v1 @kind this, `cc.o` v2 @kind object) @signature `Lcc/d;.q:(Lcc/o;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1fada4.  v0:= v1.`cc.d.f` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1fada8.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L1fadae.  call temp:= `q`(v1, v2) @signature `Lcc/a;.q:(Lcc/o;)Z` @kind super;
  #L1fadb4.  v2:= temp;
  #L1fadb6.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fadbc.  return v2;
  #L1fadbe.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fadc0.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fadc6.  throw v2;
  catch `java.lang.Throwable` @[L1fadae..L1fadb6] goto L1fadbe;
}
procedure `boolean` `r`(`cc.d` v1 @kind this) @signature `Lcc/d;.r:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1fade4.  v0:= 0I;
  #L1fade6.  return v0;
}
procedure `boolean` `s`(`cc.d` v1 @kind this) @signature `Lcc/d;.s:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1fadf8.  v0:= v1.`cc.d.size` @type ^`int`;
  #L1fadfc.  if v0 != 0 then goto L1fae04;
  #L1fae00.  v0:= 1I;
  #L1fae02.  goto L1fae06;
  #L1fae04.  v0:= 0I;
  #L1fae06.  return v0;
}
procedure `java.lang.Object` `v`(`cc.d` v9 @kind this) @signature `Lcc/d;.v:()Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1faf2c.  v0:= v9.`cc.d.f` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1faf30.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L1faf36.  v1:= v9.`cc.d.size` @type ^`int`;
  #L1faf3a.  if v1 != 0 then goto L1faf56;
  #L1faf3e.  call temp:= `d`(v9) @signature `Lcc/c;.d:()Lcc/j;` @kind virtual;
  #L1faf44.  v1:= temp @kind object;
  #L1faf46.  if v1 != 0 then goto L1faf4e;
  #L1faf4a.  v1:= `@@cc.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1faf4e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1faf54.  return v1 @kind object;
  #L1faf56.  v2:= v9.`cc.d.g` @type ^`java.lang.Object`[] @kind object;
  #L1faf5a.  v3:= v9.`cc.d.h` @type ^`int`;
  #L1faf5e.  v4:= v2[v3] @kind object;
  #L1faf62.  v5:= 0I;
  #L1faf64.  v2[v3]:= v5 @kind object;
  #L1faf68.  v2:= v1 + -1;
  #L1faf6c.  v9.`cc.d.size` @type ^`int` := v2;
  #L1faf70.  v2:= `@@cc.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1faf74.  v3:= v9.`cc.d.d` @type ^`int`;
  #L1faf78.  v6:= 0I;
  #L1faf7a.  v7:= 1I;
  #L1faf7c.  if v1 != v3 then goto L1fafe4;
  #L1faf80.  v3:= v5 @kind object;
  #L1faf82.  call temp:= `m`(v9) @signature `Lcc/c;.m:()Lcc/s;` @kind virtual;
  #L1faf88.  v8:= temp @kind object;
  #L1faf8a.  if v8 != 0 then goto L1faf92;
  #L1faf8e.  v5:= v3 @kind object;
  #L1faf90.  goto L1fafe4;
  #L1faf92.  call `b`(v8) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L1faf98.  call temp:= `A`(v8, v5) @signature `Lcc/s;.A:(Lkotlinx/coroutines/internal/r$b;)Lkotlinx/coroutines/internal/f0;` @kind virtual;
  #L1faf9e.  v3:= temp @kind object;
  #L1fafa0.  if v3 == 0 then goto L1fafda;
  #L1fafa4.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L1fafaa.  v2:= temp;
  #L1fafac.  if v2 == 0 then goto L1fafcc;
  #L1fafb0.  v2:= `@@ac.m.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fafb4.  if v3 != v2 then goto L1fafba;
  #L1fafb8.  v6:= 1I;
  #L1fafba.  if v6 == 0 then goto L1fafc0;
  #L1fafbe.  goto L1fafcc;
  #L1fafc0.  v1:= new `java.lang.AssertionError`;
  #L1fafc4.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1fafca.  throw v1;
  #L1fafcc.  call temp:= `z`(v8) @signature `Lcc/s;.z:()Ljava/lang/Object;` @kind virtual;
  #L1fafd2.  v2:= temp @kind object;
  #L1fafd4.  v5:= v8 @kind object;
  #L1fafd6.  v6:= 1I;
  #L1fafd8.  goto L1fafe4;
  #L1fafda.  call `B`(v8) @signature `Lcc/s;.B:()V` @kind virtual;
  #L1fafe0.  v3:= v8 @kind object;
  #L1fafe2.  goto L1faf82;
  #L1fafe4.  v3:= `@@cc.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fafe8.  if v2 == v3 then goto L1fb00a;
  #L1fafec.  v3:= instanceof @variable v2 @type ^`cc.j` @kind boolean;
  #L1faff0.  if v3 != 0 then goto L1fb00a;
  #L1faff4.  v9.`cc.d.size` @type ^`int` := v1;
  #L1faff8.  v3:= v9.`cc.d.g` @type ^`java.lang.Object`[] @kind object;
  #L1faffc.  v8:= v9.`cc.d.h` @type ^`int`;
  #L1fb000.  v8:= v8 + v1 @kind int;
  #L1fb002.  v1:= length @variable v3;
  #L1fb004.  v8:= v8 %% v1 @kind int;
  #L1fb006.  v3[v8]:= v2 @kind object;
  #L1fb00a.  v1:= v9.`cc.d.h` @type ^`int`;
  #L1fb00e.  v1:= v1 + v7 @kind int;
  #L1fb010.  v2:= v9.`cc.d.g` @type ^`java.lang.Object`[] @kind object;
  #L1fb014.  v2:= length @variable v2;
  #L1fb016.  v1:= v1 %% v2 @kind int;
  #L1fb018.  v9.`cc.d.h` @type ^`int` := v1;
  #L1fb01c.  v1:= `@@jb.s.a` @type ^`jb.s` @kind object;
  #L1fb020.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fb026.  if v6 == 0 then goto L1fb036;
  #L1fb02a.  call `b`(v5) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L1fb030.  call `y`(v5) @signature `Lcc/s;.y:()V` @kind virtual;
  #L1fb036.  return v4 @kind object;
  #L1fb038.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fb03a.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1fb040.  throw v1;
  catch `java.lang.Throwable` @[L1faf36..L1faf4e] goto L1fb038;
  catch `java.lang.Throwable` @[L1faf56..L1fb020] goto L1fb038;
}
