record `cc.a$a` @kind class @AccessFlag FINAL extends `cc.g` @kind interface {
  `cc.a` `cc.a$a.a` @AccessFlag PUBLIC_FINAL;
  `java.lang.Object` `cc.a$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`cc.a$a` v0 @kind this, `cc.a` v1 @kind object) @signature `Lcc/a$a;.<init>:(Lcc/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1fa1b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1fa1ba.  v0.`cc.a$a.a` @type ^`cc.a` := v1 @kind object;
  #L1fa1be.  v1:= `@@cc.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fa1c2.  v0.`cc.a$a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L1fa1c6.  return @kind void;
}
procedure `boolean` `b`(`cc.a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcc/a$a;.b:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1f9fe0.  v0:= instanceof @variable v2 @type ^`cc.j` @kind boolean;
  #L1f9fe4.  if v0 == 0 then goto L1fa00a;
  #L1f9fe8.  v2:= (`cc.j`) v2 @kind object;
  #L1f9fec.  v0:= v2.`cc.j.r` @type ^`java.lang.Throwable` @kind object;
  #L1f9ff0.  if v0 != 0 then goto L1f9ff8;
  #L1f9ff4.  v2:= 0I;
  #L1f9ff6.  return v2;
  #L1f9ff8.  call temp:= `E`(v2) @signature `Lcc/j;.E:()Ljava/lang/Throwable;` @kind virtual;
  #L1f9ffe.  v2:= temp @kind object;
  #L1fa000.  call temp:= `k`(v2) @signature `Lkotlinx/coroutines/internal/e0;.k:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L1fa006.  v2:= temp @kind object;
  #L1fa008.  throw v2;
  #L1fa00a.  v2:= 1I;
  #L1fa00c.  return v2;
}
procedure `java.lang.Object` `c`(`cc.a$a` v5 @kind this, `mb.d` v6 @kind object) @signature `Lcc/a$a;.c:(Lmb/d;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fa070.  call temp:= `b`(v6) @signature `Lnb/b;.b:(Lmb/d;)Lmb/d;` @kind static;
  #L1fa076.  v0:= temp @kind object;
  #L1fa078.  call temp:= `a`(v0) @signature `Lac/n;.a:(Lmb/d;)Lac/l;` @kind static;
  #L1fa07e.  v0:= temp @kind object;
  #L1fa080.  v1:= new `cc.a$b`;
  #L1fa084.  call `<init>`(v1, v5, v0) @signature `Lcc/a$b;.<init>:(Lcc/a$a;Lac/k;)V` @kind direct;
  #L1fa08a.  v2:= v5.`cc.a$a.a` @type ^`cc.a` @kind object;
  #L1fa08e.  call temp:= `n`(v2, v1) @signature `Lcc/a;.n:(Lcc/a;Lcc/o;)Z` @kind static;
  #L1fa094.  v2:= temp;
  #L1fa096.  if v2 == 0 then goto L1fa0a6;
  #L1fa09a.  v2:= v5.`cc.a$a.a` @type ^`cc.a` @kind object;
  #L1fa09e.  call `o`(v2, v0, v1) @signature `Lcc/a;.o:(Lcc/a;Lac/k;Lcc/o;)V` @kind static;
  #L1fa0a4.  goto L1fa138;
  #L1fa0a6.  v2:= v5.`cc.a$a.a` @type ^`cc.a` @kind object;
  #L1fa0aa.  call temp:= `v`(v2) @signature `Lcc/a;.v:()Ljava/lang/Object;` @kind virtual;
  #L1fa0b0.  v2:= temp @kind object;
  #L1fa0b2.  call `d`(v5, v2) @signature `Lcc/a$a;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L1fa0b8.  v3:= instanceof @variable v2 @type ^`cc.j` @kind boolean;
  #L1fa0bc.  if v3 == 0 then goto L1fa100;
  #L1fa0c0.  v2:= (`cc.j`) v2 @kind object;
  #L1fa0c4.  v1:= v2.`cc.j.r` @type ^`java.lang.Throwable` @kind object;
  #L1fa0c8.  if v1 != 0 then goto L1fa0dc;
  #L1fa0cc.  v1:= `@@jb.m.o` @type ^`jb.m$a` @kind object;
  #L1fa0d0.  v1:= 0I;
  #L1fa0d2.  call temp:= `a`(v1) @signature `Lkotlin/coroutines/jvm/internal/b;.a:(Z)Ljava/lang/Boolean;` @kind static;
  #L1fa0d8.  v1:= temp @kind object;
  #L1fa0da.  goto L1fa0f0;
  #L1fa0dc.  v1:= `@@jb.m.o` @type ^`jb.m$a` @kind object;
  #L1fa0e0.  call temp:= `E`(v2) @signature `Lcc/j;.E:()Ljava/lang/Throwable;` @kind virtual;
  #L1fa0e6.  v1:= temp @kind object;
  #L1fa0e8.  call temp:= `a`(v1) @signature `Ljb/n;.a:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L1fa0ee.  v1:= temp @kind object;
  #L1fa0f0.  call temp:= `a`(v1) @signature `Ljb/m;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1fa0f6.  v1:= temp @kind object;
  #L1fa0f8.  call `resumeWith`(v0, v1) @signature `Lmb/d;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L1fa0fe.  goto L1fa138;
  #L1fa100.  v3:= `@@cc.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fa104.  if v2 == v3 then goto L1fa08a;
  #L1fa108.  v1:= 1I;
  #L1fa10a.  call temp:= `a`(v1) @signature `Lkotlin/coroutines/jvm/internal/b;.a:(Z)Ljava/lang/Boolean;` @kind static;
  #L1fa110.  v1:= temp @kind object;
  #L1fa112.  v3:= v5.`cc.a$a.a` @type ^`cc.a` @kind object;
  #L1fa116.  v3:= v3.`cc.c.b` @type ^`tb.l` @kind object;
  #L1fa11a.  if v3 == 0 then goto L1fa130;
  #L1fa11e.  call temp:= `getContext`(v0) @signature `Lmb/d;.getContext:()Lmb/g;` @kind interface;
  #L1fa124.  v4:= temp @kind object;
  #L1fa126.  call temp:= `a`(v3, v2, v4) @signature `Lkotlinx/coroutines/internal/z;.a:(Ltb/l;Ljava/lang/Object;Lmb/g;)Ltb/l;` @kind static;
  #L1fa12c.  v2:= temp @kind object;
  #L1fa12e.  goto L1fa132;
  #L1fa130.  v2:= 0I;
  #L1fa132.  call `f`(v0, v1, v2) @signature `Lac/k;.f:(Ljava/lang/Object;Ltb/l;)V` @kind interface;
  #L1fa138.  call temp:= `w`(v0) @signature `Lac/l;.w:()Ljava/lang/Object;` @kind virtual;
  #L1fa13e.  v0:= temp @kind object;
  #L1fa140.  call temp:= `c`() @signature `Lnb/b;.c:()Ljava/lang/Object;` @kind static;
  #L1fa146.  v1:= temp @kind object;
  #L1fa148.  if v0 != v1 then goto L1fa152;
  #L1fa14c.  call `c`(v6) @signature `Lkotlin/coroutines/jvm/internal/h;.c:(Lmb/d;)V` @kind static;
  #L1fa152.  return v0 @kind object;
}
procedure `java.lang.Object` `a`(`cc.a$a` v2 @kind this, `mb.d` v3 @kind object) @signature `Lcc/a$a;.a:(Lmb/d;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fa020.  v0:= v2.`cc.a$a.b` @type ^`java.lang.Object` @kind object;
  #L1fa024.  v1:= `@@cc.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fa028.  if v0 == v1 then goto L1fa03e;
  #L1fa02c.  call temp:= `b`(v2, v0) @signature `Lcc/a$a;.b:(Ljava/lang/Object;)Z` @kind direct;
  #L1fa032.  v3:= temp;
  #L1fa034.  call temp:= `a`(v3) @signature `Lkotlin/coroutines/jvm/internal/b;.a:(Z)Ljava/lang/Boolean;` @kind static;
  #L1fa03a.  v3:= temp @kind object;
  #L1fa03c.  return v3 @kind object;
  #L1fa03e.  v0:= v2.`cc.a$a.a` @type ^`cc.a` @kind object;
  #L1fa042.  call temp:= `v`(v0) @signature `Lcc/a;.v:()Ljava/lang/Object;` @kind virtual;
  #L1fa048.  v0:= temp @kind object;
  #L1fa04a.  v2.`cc.a$a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L1fa04e.  if v0 == v1 then goto L1fa054;
  #L1fa052.  goto L1fa02c;
  #L1fa054.  call temp:= `c`(v2, v3) @signature `Lcc/a$a;.c:(Lmb/d;)Ljava/lang/Object;` @kind direct;
  #L1fa05a.  v3:= temp @kind object;
  #L1fa05c.  return v3 @kind object;
}
procedure `void` `d`(`cc.a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcc/a$a;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1fa1d8.  v0.`cc.a$a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L1fa1dc.  return @kind void;
}
procedure `java.lang.Object` `next`(`cc.a$a` v2 @kind this) @signature `Lcc/a$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fa164.  v0:= v2.`cc.a$a.b` @type ^`java.lang.Object` @kind object;
  #L1fa168.  v1:= instanceof @variable v0 @type ^`cc.j` @kind boolean;
  #L1fa16c.  if v1 != 0 then goto L1fa18e;
  #L1fa170.  v1:= `@@cc.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1fa174.  if v0 == v1 then goto L1fa17e;
  #L1fa178.  v2.`cc.a$a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L1fa17c.  return v0 @kind object;
  #L1fa17e.  v0:= new `java.lang.IllegalStateException`;
  #L1fa182.  v1:= "'hasNext' should be called prior to 'next' invocation" @kind object;
  #L1fa186.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fa18c.  throw v0;
  #L1fa18e.  v0:= (`cc.j`) v0 @kind object;
  #L1fa192.  call temp:= `E`(v0) @signature `Lcc/j;.E:()Ljava/lang/Throwable;` @kind virtual;
  #L1fa198.  v0:= temp @kind object;
  #L1fa19a.  call temp:= `k`(v0) @signature `Lkotlinx/coroutines/internal/e0;.k:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L1fa1a0.  v0:= temp @kind object;
  #L1fa1a2.  throw v0;
}
