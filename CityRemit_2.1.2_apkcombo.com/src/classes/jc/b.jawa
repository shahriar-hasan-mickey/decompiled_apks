record `jc.b` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `jc.b.a` @AccessFlag PRIVATE_FINAL;
  `int` `jc.b.b` @AccessFlag PRIVATE;
  `boolean` `jc.b.c` @AccessFlag PRIVATE;
  `boolean` `jc.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`jc.b` v1 @kind this, `java.util.List` v2 @kind object) @signature `Ljc/b;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39bf38.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39bf3e.  v0:= 0I;
  #L39bf40.  v1.`jc.b.b` @type ^`int` := v0;
  #L39bf44.  v1.`jc.b.a` @type ^`java.util.List` := v2 @kind object;
  #L39bf48.  return @kind void;
}
procedure `boolean` `c`(`jc.b` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object) @signature `Ljc/b;.c:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L39be14.  v0:= v2.`jc.b.b` @type ^`int`;
  #L39be18.  v1:= v2.`jc.b.a` @type ^`java.util.List` @kind object;
  #L39be1c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39be22.  v1:= temp;
  #L39be24.  if v0 >= v1 then goto L39be4e;
  #L39be28.  v1:= v2.`jc.b.a` @type ^`java.util.List` @kind object;
  #L39be2c.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39be32.  v1:= temp @kind object;
  #L39be34.  v1:= (`gc.j`) v1 @kind object;
  #L39be38.  call temp:= `c`(v1, v3) @signature `Lgc/j;.c:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L39be3e.  v1:= temp;
  #L39be40.  if v1 == 0 then goto L39be48;
  #L39be44.  v3:= 1I;
  #L39be46.  return v3;
  #L39be48.  v0:= v0 + 1;
  #L39be4c.  goto L39be18;
  #L39be4e.  v3:= 0I;
  #L39be50.  return v3;
}
procedure `gc.j` `a`(`jc.b` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Ljc/b;.a:(Ljavax/net/ssl/SSLSocket;)Lgc/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39be64.  v0:= v4.`jc.b.b` @type ^`int`;
  #L39be68.  v1:= v4.`jc.b.a` @type ^`java.util.List` @kind object;
  #L39be6c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39be72.  v1:= temp;
  #L39be74.  if v0 >= v1 then goto L39be9e;
  #L39be78.  v2:= v4.`jc.b.a` @type ^`java.util.List` @kind object;
  #L39be7c.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39be82.  v2:= temp @kind object;
  #L39be84.  v2:= (`gc.j`) v2 @kind object;
  #L39be88.  call temp:= `c`(v2, v5) @signature `Lgc/j;.c:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L39be8e.  v3:= temp;
  #L39be90.  v0:= v0 + 1;
  #L39be94.  if v3 == 0 then goto L39be74;
  #L39be98.  v4.`jc.b.b` @type ^`int` := v0;
  #L39be9c.  goto L39bea0;
  #L39be9e.  v2:= 0I;
  #L39bea0.  if v2 == 0 then goto L39bec0;
  #L39bea4.  call temp:= `c`(v4, v5) @signature `Ljc/b;.c:(Ljavax/net/ssl/SSLSocket;)Z` @kind direct;
  #L39beaa.  v0:= temp;
  #L39beac.  v4.`jc.b.c` @type ^`boolean` := v0 @kind boolean;
  #L39beb0.  v0:= `@@hc.a.a` @type ^`hc.a` @kind object;
  #L39beb4.  v1:= v4.`jc.b.d` @type ^`boolean` @kind boolean;
  #L39beb8.  call `c`(v0, v2, v5, v1) @signature `Lhc/a;.c:(Lgc/j;Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L39bebe.  return v2 @kind object;
  #L39bec0.  v0:= new `java.net.UnknownServiceException`;
  #L39bec4.  v1:= new `java.lang.StringBuilder`;
  #L39bec8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39bece.  v2:= "Unable to find acceptable protocols. isFallback=" @kind object;
  #L39bed2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bed8.  v2:= v4.`jc.b.d` @type ^`boolean` @kind boolean;
  #L39bedc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bee2.  v2:= ", modes=" @kind object;
  #L39bee6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39beec.  v2:= v4.`jc.b.a` @type ^`java.util.List` @kind object;
  #L39bef0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bef6.  v2:= ", supported protocols=" @kind object;
  #L39befa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bf00.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L39bf06.  v5:= temp @kind object;
  #L39bf08.  call temp:= `toString`(v5) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L39bf0e.  v5:= temp @kind object;
  #L39bf10.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bf16.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39bf1c.  v5:= temp @kind object;
  #L39bf1e.  call `<init>`(v0, v5) @signature `Ljava/net/UnknownServiceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39bf24.  throw v0;
}
procedure `boolean` `b`(`jc.b` v4 @kind this, `java.io.IOException` v5 @kind object) @signature `Ljc/b;.b:(Ljava/io/IOException;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39bda0.  v0:= 1I;
  #L39bda2.  v4.`jc.b.d` @type ^`boolean` := v0 @kind boolean;
  #L39bda6.  v1:= v4.`jc.b.c` @type ^`boolean` @kind boolean;
  #L39bdaa.  v2:= 0I;
  #L39bdac.  if v1 != 0 then goto L39bdb2;
  #L39bdb0.  return v2;
  #L39bdb2.  v1:= instanceof @variable v5 @type ^`java.net.ProtocolException` @kind boolean;
  #L39bdb6.  if v1 == 0 then goto L39bdbc;
  #L39bdba.  return v2;
  #L39bdbc.  v1:= instanceof @variable v5 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L39bdc0.  if v1 == 0 then goto L39bdc6;
  #L39bdc4.  return v2;
  #L39bdc6.  v1:= instanceof @variable v5 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L39bdca.  if v1 == 0 then goto L39bde0;
  #L39bdce.  call temp:= `getCause`(v5) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L39bdd4.  v3:= temp @kind object;
  #L39bdd6.  v3:= instanceof @variable v3 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L39bdda.  if v3 == 0 then goto L39bde0;
  #L39bdde.  return v2;
  #L39bde0.  v3:= instanceof @variable v5 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L39bde4.  if v3 == 0 then goto L39bdea;
  #L39bde8.  return v2;
  #L39bdea.  if v1 != 0 then goto L39be02;
  #L39bdee.  v1:= instanceof @variable v5 @type ^`javax.net.ssl.SSLProtocolException` @kind boolean;
  #L39bdf2.  if v1 != 0 then goto L39be02;
  #L39bdf6.  v5:= instanceof @variable v5 @type ^`javax.net.ssl.SSLException` @kind boolean;
  #L39bdfa.  if v5 == 0 then goto L39be00;
  #L39bdfe.  goto L39be02;
  #L39be00.  v0:= 0I;
  #L39be02.  return v0;
}
