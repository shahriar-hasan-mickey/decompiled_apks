record `jc.f` @kind class @AccessFlag PUBLIC_FINAL {
  `gc.a` `jc.f.a` @AccessFlag PRIVATE_FINAL;
  `jc.d` `jc.f.b` @AccessFlag PRIVATE_FINAL;
  `gc.d` `jc.f.c` @AccessFlag PRIVATE_FINAL;
  `gc.o` `jc.f.d` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `jc.f.e` @AccessFlag PRIVATE;
  `int` `jc.f.f` @AccessFlag PRIVATE;
  `java.util.List` `jc.f.g` @AccessFlag PRIVATE;
  `java.util.List` `jc.f.h` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`jc.f` v1 @kind this, `gc.a` v2 @kind object, `jc.d` v3 @kind object, `gc.d` v4 @kind object, `gc.o` v5 @kind object) @signature `Ljc/f;.<init>:(Lgc/a;Ljc/d;Lgc/d;Lgc/o;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39d498.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39d49e.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L39d4a4.  v0:= temp @kind object;
  #L39d4a6.  v1.`jc.f.e` @type ^`java.util.List` := v0 @kind object;
  #L39d4aa.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L39d4b0.  v0:= temp @kind object;
  #L39d4b2.  v1.`jc.f.g` @type ^`java.util.List` := v0 @kind object;
  #L39d4b6.  v0:= new `java.util.ArrayList`;
  #L39d4ba.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L39d4c0.  v1.`jc.f.h` @type ^`java.util.List` := v0 @kind object;
  #L39d4c4.  v1.`jc.f.a` @type ^`gc.a` := v2 @kind object;
  #L39d4c8.  v1.`jc.f.b` @type ^`jc.d` := v3 @kind object;
  #L39d4cc.  v1.`jc.f.c` @type ^`gc.d` := v4 @kind object;
  #L39d4d0.  v1.`jc.f.d` @type ^`gc.o` := v5 @kind object;
  #L39d4d4.  call temp:= `l`(v2) @signature `Lgc/a;.l:()Lgc/r;` @kind virtual;
  #L39d4da.  v3:= temp @kind object;
  #L39d4dc.  call temp:= `g`(v2) @signature `Lgc/a;.g:()Ljava/net/Proxy;` @kind virtual;
  #L39d4e2.  v2:= temp @kind object;
  #L39d4e4.  call `h`(v1, v3, v2) @signature `Ljc/f;.h:(Lgc/r;Ljava/net/Proxy;)V` @kind direct;
  #L39d4ea.  return @kind void;
}
procedure `java.lang.String` `b`(`java.net.InetSocketAddress` v1 @kind object) @signature `Ljc/f;.b:(Ljava/net/InetSocketAddress;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L39d2f8.  call temp:= `getAddress`(v1) @signature `Ljava/net/InetSocketAddress;.getAddress:()Ljava/net/InetAddress;` @kind virtual;
  #L39d2fe.  v0:= temp @kind object;
  #L39d300.  if v0 != 0 then goto L39d30e;
  #L39d304.  call temp:= `getHostName`(v1) @signature `Ljava/net/InetSocketAddress;.getHostName:()Ljava/lang/String;` @kind virtual;
  #L39d30a.  v1:= temp @kind object;
  #L39d30c.  return v1 @kind object;
  #L39d30e.  call temp:= `getHostAddress`(v0) @signature `Ljava/net/InetAddress;.getHostAddress:()Ljava/lang/String;` @kind virtual;
  #L39d314.  v1:= temp @kind object;
  #L39d316.  return v1 @kind object;
}
procedure `boolean` `d`(`jc.f` v2 @kind this) @signature `Ljc/f;.d:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L39d2cc.  v0:= v2.`jc.f.f` @type ^`int`;
  #L39d2d0.  v1:= v2.`jc.f.e` @type ^`java.util.List` @kind object;
  #L39d2d4.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39d2da.  v1:= temp;
  #L39d2dc.  if v0 >= v1 then goto L39d2e4;
  #L39d2e0.  v0:= 1I;
  #L39d2e2.  goto L39d2e6;
  #L39d2e4.  v0:= 0I;
  #L39d2e6.  return v0;
}
procedure `java.net.Proxy` `f`(`jc.f` v3 @kind this) @signature `Ljc/f;.f:()Ljava/net/Proxy;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L39d328.  call temp:= `d`(v3) @signature `Ljc/f;.d:()Z` @kind direct;
  #L39d32e.  v0:= temp;
  #L39d330.  if v0 == 0 then goto L39d358;
  #L39d334.  v0:= v3.`jc.f.e` @type ^`java.util.List` @kind object;
  #L39d338.  v1:= v3.`jc.f.f` @type ^`int`;
  #L39d33c.  v2:= v1 + 1;
  #L39d340.  v3.`jc.f.f` @type ^`int` := v2;
  #L39d344.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39d34a.  v0:= temp @kind object;
  #L39d34c.  v0:= (`java.net.Proxy`) v0 @kind object;
  #L39d350.  call `g`(v3, v0) @signature `Ljc/f;.g:(Ljava/net/Proxy;)V` @kind direct;
  #L39d356.  return v0 @kind object;
  #L39d358.  v0:= new `java.net.SocketException`;
  #L39d35c.  v1:= new `java.lang.StringBuilder`;
  #L39d360.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39d366.  v2:= "No route to " @kind object;
  #L39d36a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d370.  v2:= v3.`jc.f.a` @type ^`gc.a` @kind object;
  #L39d374.  call temp:= `l`(v2) @signature `Lgc/a;.l:()Lgc/r;` @kind virtual;
  #L39d37a.  v2:= temp @kind object;
  #L39d37c.  call temp:= `l`(v2) @signature `Lgc/r;.l:()Ljava/lang/String;` @kind virtual;
  #L39d382.  v2:= temp @kind object;
  #L39d384.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d38a.  v2:= "; exhausted proxy configurations: " @kind object;
  #L39d38e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d394.  v2:= v3.`jc.f.e` @type ^`java.util.List` @kind object;
  #L39d398.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d39e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39d3a4.  v1:= temp @kind object;
  #L39d3a6.  call `<init>`(v0, v1) @signature `Ljava/net/SocketException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39d3ac.  throw v0;
}
procedure `void` `g`(`jc.f` v6 @kind this, `java.net.Proxy` v7 @kind object) @signature `Ljc/f;.g:(Ljava/net/Proxy;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L39d578.  v0:= new `java.util.ArrayList`;
  #L39d57c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L39d582.  v6.`jc.f.g` @type ^`java.util.List` := v0 @kind object;
  #L39d586.  call temp:= `type`(v7) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L39d58c.  v0:= temp @kind object;
  #L39d58e.  v1:= `@@java.net.Proxy$Type.DIRECT` @type ^`java.net.Proxy$Type` @kind object;
  #L39d592.  if v0 == v1 then goto L39d604;
  #L39d596.  call temp:= `type`(v7) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L39d59c.  v0:= temp @kind object;
  #L39d59e.  v1:= `@@java.net.Proxy$Type.SOCKS` @type ^`java.net.Proxy$Type` @kind object;
  #L39d5a2.  if v0 != v1 then goto L39d5a8;
  #L39d5a6.  goto L39d604;
  #L39d5a8.  call temp:= `address`(v7) @signature `Ljava/net/Proxy;.address:()Ljava/net/SocketAddress;` @kind virtual;
  #L39d5ae.  v0:= temp @kind object;
  #L39d5b0.  v1:= instanceof @variable v0 @type ^`java.net.InetSocketAddress` @kind boolean;
  #L39d5b4.  if v1 == 0 then goto L39d5ce;
  #L39d5b8.  v0:= (`java.net.InetSocketAddress`) v0 @kind object;
  #L39d5bc.  call temp:= `b`(v0) @signature `Ljc/f;.b:(Ljava/net/InetSocketAddress;)Ljava/lang/String;` @kind static;
  #L39d5c2.  v1:= temp @kind object;
  #L39d5c4.  call temp:= `getPort`(v0) @signature `Ljava/net/InetSocketAddress;.getPort:()I` @kind virtual;
  #L39d5ca.  v0:= temp;
  #L39d5cc.  goto L39d62c;
  #L39d5ce.  v7:= new `java.lang.IllegalArgumentException`;
  #L39d5d2.  v1:= new `java.lang.StringBuilder`;
  #L39d5d6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39d5dc.  v2:= "Proxy.address() is not an InetSocketAddress: " @kind object;
  #L39d5e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d5e6.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L39d5ec.  v0:= temp @kind object;
  #L39d5ee.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d5f4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39d5fa.  v0:= temp @kind object;
  #L39d5fc.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39d602.  throw v7;
  #L39d604.  v0:= v6.`jc.f.a` @type ^`gc.a` @kind object;
  #L39d608.  call temp:= `l`(v0) @signature `Lgc/a;.l:()Lgc/r;` @kind virtual;
  #L39d60e.  v0:= temp @kind object;
  #L39d610.  call temp:= `l`(v0) @signature `Lgc/r;.l:()Ljava/lang/String;` @kind virtual;
  #L39d616.  v1:= temp @kind object;
  #L39d618.  v0:= v6.`jc.f.a` @type ^`gc.a` @kind object;
  #L39d61c.  call temp:= `l`(v0) @signature `Lgc/a;.l:()Lgc/r;` @kind virtual;
  #L39d622.  v0:= temp @kind object;
  #L39d624.  call temp:= `w`(v0) @signature `Lgc/r;.w:()I` @kind virtual;
  #L39d62a.  v0:= temp;
  #L39d62c.  v2:= 1I;
  #L39d62e.  if v0 < v2 then goto L39d712;
  #L39d632.  v2:= 65535I;
  #L39d638.  if v0 > v2 then goto L39d712;
  #L39d63c.  call temp:= `type`(v7) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L39d642.  v7:= temp @kind object;
  #L39d644.  v2:= `@@java.net.Proxy$Type.SOCKS` @type ^`java.net.Proxy$Type` @kind object;
  #L39d648.  if v7 != v2 then goto L39d660;
  #L39d64c.  v7:= v6.`jc.f.g` @type ^`java.util.List` @kind object;
  #L39d650.  call temp:= `createUnresolved`(v1, v0) @signature `Ljava/net/InetSocketAddress;.createUnresolved:(Ljava/lang/String;I)Ljava/net/InetSocketAddress;` @kind static;
  #L39d656.  v0:= temp @kind object;
  #L39d658.  call temp:= `add`(v7, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L39d65e.  goto L39d6d0;
  #L39d660.  v7:= v6.`jc.f.d` @type ^`gc.o` @kind object;
  #L39d664.  v2:= v6.`jc.f.c` @type ^`gc.d` @kind object;
  #L39d668.  call `j`(v7, v2, v1) @signature `Lgc/o;.j:(Lgc/d;Ljava/lang/String;)V` @kind virtual;
  #L39d66e.  v7:= v6.`jc.f.a` @type ^`gc.a` @kind object;
  #L39d672.  call temp:= `c`(v7) @signature `Lgc/a;.c:()Lgc/n;` @kind virtual;
  #L39d678.  v7:= temp @kind object;
  #L39d67a.  call temp:= `a`(v7, v1) @signature `Lgc/n;.a:(Ljava/lang/String;)Ljava/util/List;` @kind interface;
  #L39d680.  v7:= temp @kind object;
  #L39d682.  call temp:= `isEmpty`(v7) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L39d688.  v2:= temp;
  #L39d68a.  if v2 != 0 then goto L39d6d2;
  #L39d68e.  v2:= v6.`jc.f.d` @type ^`gc.o` @kind object;
  #L39d692.  v3:= v6.`jc.f.c` @type ^`gc.d` @kind object;
  #L39d696.  call `i`(v2, v3, v1, v7) @signature `Lgc/o;.i:(Lgc/d;Ljava/lang/String;Ljava/util/List;)V` @kind virtual;
  #L39d69c.  v1:= 0I;
  #L39d69e.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39d6a4.  v2:= temp;
  #L39d6a6.  if v1 >= v2 then goto L39d6d0;
  #L39d6aa.  call temp:= `get`(v7, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39d6b0.  v3:= temp @kind object;
  #L39d6b2.  v3:= (`java.net.InetAddress`) v3 @kind object;
  #L39d6b6.  v4:= v6.`jc.f.g` @type ^`java.util.List` @kind object;
  #L39d6ba.  v5:= new `java.net.InetSocketAddress`;
  #L39d6be.  call `<init>`(v5, v3, v0) @signature `Ljava/net/InetSocketAddress;.<init>:(Ljava/net/InetAddress;I)V` @kind direct;
  #L39d6c4.  call temp:= `add`(v4, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L39d6ca.  v1:= v1 + 1;
  #L39d6ce.  goto L39d6a6;
  #L39d6d0.  return @kind void;
  #L39d6d2.  v7:= new `java.net.UnknownHostException`;
  #L39d6d6.  v0:= new `java.lang.StringBuilder`;
  #L39d6da.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39d6e0.  v2:= v6.`jc.f.a` @type ^`gc.a` @kind object;
  #L39d6e4.  call temp:= `c`(v2) @signature `Lgc/a;.c:()Lgc/n;` @kind virtual;
  #L39d6ea.  v2:= temp @kind object;
  #L39d6ec.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d6f2.  v2:= " returned no addresses for " @kind object;
  #L39d6f6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d6fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d702.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39d708.  v0:= temp @kind object;
  #L39d70a.  call `<init>`(v7, v0) @signature `Ljava/net/UnknownHostException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39d710.  throw v7;
  #L39d712.  v7:= new `java.net.SocketException`;
  #L39d716.  v2:= new `java.lang.StringBuilder`;
  #L39d71a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39d720.  v3:= "No route to " @kind object;
  #L39d724.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d72a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d730.  v1:= ":" @kind object;
  #L39d734.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d73a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d740.  v0:= "; port is out of range" @kind object;
  #L39d744.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d74a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39d750.  v0:= temp @kind object;
  #L39d752.  call `<init>`(v7, v0) @signature `Ljava/net/SocketException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39d758.  throw v7;
}
procedure `void` `h`(`jc.f` v1 @kind this, `gc.r` v2 @kind object, `java.net.Proxy` v3 @kind object) @signature `Ljc/f;.h:(Lgc/r;Ljava/net/Proxy;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L39d76c.  v0:= 0I;
  #L39d76e.  if v3 == 0 then goto L39d780;
  #L39d772.  call temp:= `singletonList`(v3) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L39d778.  v2:= temp @kind object;
  #L39d77a.  v1.`jc.f.e` @type ^`java.util.List` := v2 @kind object;
  #L39d77e.  goto L39d7ce;
  #L39d780.  v3:= v1.`jc.f.a` @type ^`gc.a` @kind object;
  #L39d784.  call temp:= `i`(v3) @signature `Lgc/a;.i:()Ljava/net/ProxySelector;` @kind virtual;
  #L39d78a.  v3:= temp @kind object;
  #L39d78c.  call temp:= `C`(v2) @signature `Lgc/r;.C:()Ljava/net/URI;` @kind virtual;
  #L39d792.  v2:= temp @kind object;
  #L39d794.  call temp:= `select`(v3, v2) @signature `Ljava/net/ProxySelector;.select:(Ljava/net/URI;)Ljava/util/List;` @kind virtual;
  #L39d79a.  v2:= temp @kind object;
  #L39d79c.  if v2 == 0 then goto L39d7b6;
  #L39d7a0.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L39d7a6.  v3:= temp;
  #L39d7a8.  if v3 != 0 then goto L39d7b6;
  #L39d7ac.  call temp:= `r`(v2) @signature `Lhc/c;.r:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L39d7b2.  v2:= temp @kind object;
  #L39d7b4.  goto L39d77a;
  #L39d7b6.  v2:= 1I;
  #L39d7b8.  v2:= new `java.net.Proxy`[v2];
  #L39d7bc.  v3:= `@@java.net.Proxy.NO_PROXY` @type ^`java.net.Proxy` @kind object;
  #L39d7c0.  v2[v0]:= v3 @kind object;
  #L39d7c4.  call temp:= `s`(v2) @signature `Lhc/c;.s:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L39d7ca.  v2:= temp @kind object;
  #L39d7cc.  goto L39d77a;
  #L39d7ce.  v1.`jc.f.f` @type ^`int` := v0;
  #L39d7d2.  return @kind void;
}
procedure `void` `a`(`jc.f` v3 @kind this, `gc.b0` v4 @kind object, `java.io.IOException` v5 @kind object) @signature `Ljc/f;.a:(Lgc/b0;Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39d4fc.  call temp:= `b`(v4) @signature `Lgc/b0;.b:()Ljava/net/Proxy;` @kind virtual;
  #L39d502.  v0:= temp @kind object;
  #L39d504.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L39d50a.  v0:= temp @kind object;
  #L39d50c.  v1:= `@@java.net.Proxy$Type.DIRECT` @type ^`java.net.Proxy$Type` @kind object;
  #L39d510.  if v0 == v1 then goto L39d55a;
  #L39d514.  v0:= v3.`jc.f.a` @type ^`gc.a` @kind object;
  #L39d518.  call temp:= `i`(v0) @signature `Lgc/a;.i:()Ljava/net/ProxySelector;` @kind virtual;
  #L39d51e.  v0:= temp @kind object;
  #L39d520.  if v0 == 0 then goto L39d55a;
  #L39d524.  v0:= v3.`jc.f.a` @type ^`gc.a` @kind object;
  #L39d528.  call temp:= `i`(v0) @signature `Lgc/a;.i:()Ljava/net/ProxySelector;` @kind virtual;
  #L39d52e.  v0:= temp @kind object;
  #L39d530.  v1:= v3.`jc.f.a` @type ^`gc.a` @kind object;
  #L39d534.  call temp:= `l`(v1) @signature `Lgc/a;.l:()Lgc/r;` @kind virtual;
  #L39d53a.  v1:= temp @kind object;
  #L39d53c.  call temp:= `C`(v1) @signature `Lgc/r;.C:()Ljava/net/URI;` @kind virtual;
  #L39d542.  v1:= temp @kind object;
  #L39d544.  call temp:= `b`(v4) @signature `Lgc/b0;.b:()Ljava/net/Proxy;` @kind virtual;
  #L39d54a.  v2:= temp @kind object;
  #L39d54c.  call temp:= `address`(v2) @signature `Ljava/net/Proxy;.address:()Ljava/net/SocketAddress;` @kind virtual;
  #L39d552.  v2:= temp @kind object;
  #L39d554.  call `connectFailed`(v0, v1, v2, v5) @signature `Ljava/net/ProxySelector;.connectFailed:(Ljava/net/URI;Ljava/net/SocketAddress;Ljava/io/IOException;)V` @kind virtual;
  #L39d55a.  v5:= v3.`jc.f.b` @type ^`jc.d` @kind object;
  #L39d55e.  call `b`(v5, v4) @signature `Ljc/d;.b:(Lgc/b0;)V` @kind virtual;
  #L39d564.  return @kind void;
}
procedure `boolean` `c`(`jc.f` v1 @kind this) @signature `Ljc/f;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39d294.  call temp:= `d`(v1) @signature `Ljc/f;.d:()Z` @kind direct;
  #L39d29a.  v0:= temp;
  #L39d29c.  if v0 != 0 then goto L39d2b6;
  #L39d2a0.  v0:= v1.`jc.f.h` @type ^`java.util.List` @kind object;
  #L39d2a4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L39d2aa.  v0:= temp;
  #L39d2ac.  if v0 != 0 then goto L39d2b2;
  #L39d2b0.  goto L39d2b6;
  #L39d2b2.  v0:= 0I;
  #L39d2b4.  goto L39d2b8;
  #L39d2b6.  v0:= 1I;
  #L39d2b8.  return v0;
}
procedure `jc.f$a` `e`(`jc.f` v7 @kind this) @signature `Ljc/f;.e:()Ljc/f$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39d3c0.  call temp:= `c`(v7) @signature `Ljc/f;.c:()Z` @kind virtual;
  #L39d3c6.  v0:= temp;
  #L39d3c8.  if v0 == 0 then goto L39d47a;
  #L39d3cc.  v0:= new `java.util.ArrayList`;
  #L39d3d0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L39d3d6.  call temp:= `d`(v7) @signature `Ljc/f;.d:()Z` @kind direct;
  #L39d3dc.  v1:= temp;
  #L39d3de.  if v1 == 0 then goto L39d44e;
  #L39d3e2.  call temp:= `f`(v7) @signature `Ljc/f;.f:()Ljava/net/Proxy;` @kind direct;
  #L39d3e8.  v1:= temp @kind object;
  #L39d3ea.  v2:= 0I;
  #L39d3ec.  v3:= v7.`jc.f.g` @type ^`java.util.List` @kind object;
  #L39d3f0.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39d3f6.  v3:= temp;
  #L39d3f8.  if v2 >= v3 then goto L39d442;
  #L39d3fc.  v4:= new `gc.b0`;
  #L39d400.  v5:= v7.`jc.f.a` @type ^`gc.a` @kind object;
  #L39d404.  v6:= v7.`jc.f.g` @type ^`java.util.List` @kind object;
  #L39d408.  call temp:= `get`(v6, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39d40e.  v6:= temp @kind object;
  #L39d410.  v6:= (`java.net.InetSocketAddress`) v6 @kind object;
  #L39d414.  call `<init>`(v4, v5, v1, v6) @signature `Lgc/b0;.<init>:(Lgc/a;Ljava/net/Proxy;Ljava/net/InetSocketAddress;)V` @kind direct;
  #L39d41a.  v5:= v7.`jc.f.b` @type ^`jc.d` @kind object;
  #L39d41e.  call temp:= `c`(v5, v4) @signature `Ljc/d;.c:(Lgc/b0;)Z` @kind virtual;
  #L39d424.  v5:= temp;
  #L39d426.  if v5 == 0 then goto L39d436;
  #L39d42a.  v5:= v7.`jc.f.h` @type ^`java.util.List` @kind object;
  #L39d42e.  call temp:= `add`(v5, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L39d434.  goto L39d43c;
  #L39d436.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L39d43c.  v2:= v2 + 1;
  #L39d440.  goto L39d3f8;
  #L39d442.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L39d448.  v1:= temp;
  #L39d44a.  if v1 != 0 then goto L39d3d6;
  #L39d44e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L39d454.  v1:= temp;
  #L39d456.  if v1 == 0 then goto L39d46e;
  #L39d45a.  v1:= v7.`jc.f.h` @type ^`java.util.List` @kind object;
  #L39d45e.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L39d464.  v1:= v7.`jc.f.h` @type ^`java.util.List` @kind object;
  #L39d468.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L39d46e.  v1:= new `jc.f$a`;
  #L39d472.  call `<init>`(v1, v0) @signature `Ljc/f$a;.<init>:(Ljava/util/List;)V` @kind direct;
  #L39d478.  return v1 @kind object;
  #L39d47a.  v0:= new `java.util.NoSuchElementException`;
  #L39d47e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L39d484.  throw v0;
}
