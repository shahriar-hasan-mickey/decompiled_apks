record `wc.c$f` @kind class @AccessFlag FINAL extends `wc.c$g` @kind interface {
  `wc.c$g`[] `wc.c$f.o` @AccessFlag PRIVATE_FINAL;
  `boolean` `wc.c$f.p` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`wc.c$f` v1 @kind this, `java.util.List` v2 @kind object, `boolean` v3 ) @signature `Lwc/c$f;.<init>:(Ljava/util/List;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c76ec.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4c76f2.  v0:= temp;
  #L4c76f4.  v0:= new `wc.c$g`[v0];
  #L4c76f8.  call temp:= `toArray`(v2, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4c76fe.  v2:= temp @kind object;
  #L4c7700.  v2:= (`wc.c$g`[]) v2 @kind object;
  #L4c7704.  call `<init>`(v1, v2, v3) @signature `Lwc/c$f;.<init>:([Lwc/c$g;Z)V` @kind direct;
  #L4c770a.  return @kind void;
}
procedure `void` `<init>`(`wc.c$f` v0 @kind this, `wc.c$g`[] v1 @kind object, `boolean` v2 ) @signature `Lwc/c$f;.<init>:([Lwc/c$g;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c771c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c7722.  v0.`wc.c$f.o` @type ^`wc.c$g`[] := v1 @kind object;
  #L4c7726.  v0.`wc.c$f.p` @type ^`boolean` := v2 @kind boolean;
  #L4c772a.  return @kind void;
}
procedure `wc.c$f` `a`(`wc.c$f` v2 @kind this, `boolean` v3 ) @signature `Lwc/c$f;.a:(Z)Lwc/c$f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c773c.  v0:= v2.`wc.c$f.p` @type ^`boolean` @kind boolean;
  #L4c7740.  if v3 != v0 then goto L4c7746;
  #L4c7744.  return v2 @kind object;
  #L4c7746.  v0:= new `wc.c$f`;
  #L4c774a.  v1:= v2.`wc.c$f.o` @type ^`wc.c$g`[] @kind object;
  #L4c774e.  call `<init>`(v0, v1, v3) @signature `Lwc/c$f;.<init>:([Lwc/c$g;Z)V` @kind direct;
  #L4c7754.  return v0 @kind object;
}
procedure `boolean` `c`(`wc.c$f` v6 @kind this, `wc.f` v7 @kind object, `java.lang.StringBuilder` v8 @kind object) @signature `Lwc/c$f;.c:(Lwc/f;Ljava/lang/StringBuilder;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c7568.  call temp:= `length`(v8) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L4c756e.  v0:= temp;
  #L4c7570.  v1:= v6.`wc.c$f.p` @type ^`boolean` @kind boolean;
  #L4c7574.  if v1 == 0 then goto L4c757e;
  #L4c7578.  call `h`(v7) @signature `Lwc/f;.h:()V` @kind virtual;
  #L4c757e.  v1:= v6.`wc.c$f.o` @type ^`wc.c$g`[] @kind object;
  #L4c7582.  v2:= length @variable v1;
  #L4c7584.  v3:= 0I;
  #L4c7586.  v4:= 1I;
  #L4c7588.  if v3 >= v2 then goto L4c75b8;
  #L4c758c.  v5:= v1[v3] @kind object;
  #L4c7590.  call temp:= `c`(v5, v7, v8) @signature `Lwc/c$g;.c:(Lwc/f;Ljava/lang/StringBuilder;)Z` @kind interface;
  #L4c7596.  v5:= temp;
  #L4c7598.  if v5 != 0 then goto L4c75b2;
  #L4c759c.  call `setLength`(v8, v0) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L4c75a2.  v8:= v6.`wc.c$f.p` @type ^`boolean` @kind boolean;
  #L4c75a6.  if v8 == 0 then goto L4c75b0;
  #L4c75aa.  call `b`(v7) @signature `Lwc/f;.b:()V` @kind virtual;
  #L4c75b0.  return v4;
  #L4c75b2.  v3:= v3 + 1;
  #L4c75b6.  goto L4c7586;
  #L4c75b8.  v8:= v6.`wc.c$f.p` @type ^`boolean` @kind boolean;
  #L4c75bc.  if v8 == 0 then goto L4c75c6;
  #L4c75c0.  call `b`(v7) @signature `Lwc/f;.b:()V` @kind virtual;
  #L4c75c6.  return v4;
  #L4c75c8.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c75ca.  v0:= v6.`wc.c$f.p` @type ^`boolean` @kind boolean;
  #L4c75ce.  if v0 == 0 then goto L4c75d8;
  #L4c75d2.  call `b`(v7) @signature `Lwc/f;.b:()V` @kind virtual;
  #L4c75d8.  throw v8;
  catch `java.lang.Throwable` @[L4c757e..L4c75a2] goto L4c75c8;
}
procedure `int` `d`(`wc.c$f` v6 @kind this, `wc.d` v7 @kind object, `java.lang.CharSequence` v8 @kind object, `int` v9 ) @signature `Lwc/c$f;.d:(Lwc/d;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c75f8.  v0:= v6.`wc.c$f.p` @type ^`boolean` @kind boolean;
  #L4c75fc.  v1:= 0I;
  #L4c75fe.  if v0 == 0 then goto L4c763e;
  #L4c7602.  call `r`(v7) @signature `Lwc/d;.r:()V` @kind virtual;
  #L4c7608.  v0:= v6.`wc.c$f.o` @type ^`wc.c$g`[] @kind object;
  #L4c760c.  v2:= length @variable v0;
  #L4c760e.  v4:= v9;
  #L4c7610.  v3:= 0I;
  #L4c7612.  if v3 >= v2 then goto L4c7634;
  #L4c7616.  v5:= v0[v3] @kind object;
  #L4c761a.  call temp:= `d`(v5, v7, v8, v4) @signature `Lwc/c$g;.d:(Lwc/d;Ljava/lang/CharSequence;I)I` @kind interface;
  #L4c7620.  v4:= temp;
  #L4c7622.  if v4 >= 0 then goto L4c762e;
  #L4c7626.  call `f`(v7, v1) @signature `Lwc/d;.f:(Z)V` @kind virtual;
  #L4c762c.  return v9;
  #L4c762e.  v3:= v3 + 1;
  #L4c7632.  goto L4c7612;
  #L4c7634.  v8:= 1I;
  #L4c7636.  call `f`(v7, v8) @signature `Lwc/d;.f:(Z)V` @kind virtual;
  #L4c763c.  return v4;
  #L4c763e.  v0:= v6.`wc.c$f.o` @type ^`wc.c$g`[] @kind object;
  #L4c7642.  v2:= length @variable v0;
  #L4c7644.  if v1 >= v2 then goto L4c7660;
  #L4c7648.  v3:= v0[v1] @kind object;
  #L4c764c.  call temp:= `d`(v3, v7, v8, v9) @signature `Lwc/c$g;.d:(Lwc/d;Ljava/lang/CharSequence;I)I` @kind interface;
  #L4c7652.  v9:= temp;
  #L4c7654.  if v9 >= 0 then goto L4c765a;
  #L4c7658.  goto L4c7660;
  #L4c765a.  v1:= v1 + 1;
  #L4c765e.  goto L4c7644;
  #L4c7660.  return v9;
}
procedure `java.lang.String` `toString`(`wc.c$f` v5 @kind this) @signature `Lwc/c$f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c7674.  v0:= new `java.lang.StringBuilder`;
  #L4c7678.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c767e.  v1:= v5.`wc.c$f.o` @type ^`wc.c$g`[] @kind object;
  #L4c7682.  if v1 == 0 then goto L4c76d2;
  #L4c7686.  v1:= v5.`wc.c$f.p` @type ^`boolean` @kind boolean;
  #L4c768a.  if v1 == 0 then goto L4c7694;
  #L4c768e.  v1:= "[" @kind object;
  #L4c7692.  goto L4c7698;
  #L4c7694.  v1:= "(" @kind object;
  #L4c7698.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c769e.  v1:= v5.`wc.c$f.o` @type ^`wc.c$g`[] @kind object;
  #L4c76a2.  v2:= length @variable v1;
  #L4c76a4.  v3:= 0I;
  #L4c76a6.  if v3 >= v2 then goto L4c76ba;
  #L4c76aa.  v4:= v1[v3] @kind object;
  #L4c76ae.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c76b4.  v3:= v3 + 1;
  #L4c76b8.  goto L4c76a6;
  #L4c76ba.  v1:= v5.`wc.c$f.p` @type ^`boolean` @kind boolean;
  #L4c76be.  if v1 == 0 then goto L4c76c8;
  #L4c76c2.  v1:= "]" @kind object;
  #L4c76c6.  goto L4c76cc;
  #L4c76c8.  v1:= ")" @kind object;
  #L4c76cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c76d2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c76d8.  v0:= temp @kind object;
  #L4c76da.  return v0 @kind object;
}
