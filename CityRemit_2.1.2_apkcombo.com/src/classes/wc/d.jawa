record `wc.d` @kind class @AccessFlag FINAL {
  `java.util.Locale` `wc.d.a` @AccessFlag PRIVATE;
  `wc.h` `wc.d.b` @AccessFlag PRIVATE;
  `vc.h` `wc.d.c` @AccessFlag PRIVATE;
  `uc.q` `wc.d.d` @AccessFlag PRIVATE;
  `boolean` `wc.d.e` @AccessFlag PRIVATE;
  `boolean` `wc.d.f` @AccessFlag PRIVATE;
  `java.util.ArrayList` `wc.d.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`wc.d` v2 @kind this, `wc.b` v3 @kind object) @signature `Lwc/d;.<init>:(Lwc/b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4cb318.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cb31e.  v0:= 1I;
  #L4cb320.  v2.`wc.d.e` @type ^`boolean` := v0 @kind boolean;
  #L4cb324.  v2.`wc.d.f` @type ^`boolean` := v0 @kind boolean;
  #L4cb328.  v0:= new `java.util.ArrayList`;
  #L4cb32c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4cb332.  v2.`wc.d.g` @type ^`java.util.ArrayList` := v0 @kind object;
  #L4cb336.  call temp:= `f`(v3) @signature `Lwc/b;.f:()Ljava/util/Locale;` @kind virtual;
  #L4cb33c.  v1:= temp @kind object;
  #L4cb33e.  v2.`wc.d.a` @type ^`java.util.Locale` := v1 @kind object;
  #L4cb342.  call temp:= `e`(v3) @signature `Lwc/b;.e:()Lwc/h;` @kind virtual;
  #L4cb348.  v1:= temp @kind object;
  #L4cb34a.  v2.`wc.d.b` @type ^`wc.h` := v1 @kind object;
  #L4cb34e.  call temp:= `d`(v3) @signature `Lwc/b;.d:()Lvc/h;` @kind virtual;
  #L4cb354.  v1:= temp @kind object;
  #L4cb356.  v2.`wc.d.c` @type ^`vc.h` := v1 @kind object;
  #L4cb35a.  call temp:= `g`(v3) @signature `Lwc/b;.g:()Luc/q;` @kind virtual;
  #L4cb360.  v3:= temp @kind object;
  #L4cb362.  v2.`wc.d.d` @type ^`uc.q` := v3 @kind object;
  #L4cb366.  v3:= new `wc.d$b`;
  #L4cb36a.  v1:= 0I;
  #L4cb36c.  call `<init>`(v3, v2, v1) @signature `Lwc/d$b;.<init>:(Lwc/d;Lwc/d$a;)V` @kind direct;
  #L4cb372.  call temp:= `add`(v0, v3) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4cb378.  return @kind void;
}
procedure `void` `<init>`(`wc.d` v2 @kind this, `wc.d` v3 @kind object) @signature `Lwc/d;.<init>:(Lwc/d;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4cb38c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cb392.  v0:= 1I;
  #L4cb394.  v2.`wc.d.e` @type ^`boolean` := v0 @kind boolean;
  #L4cb398.  v2.`wc.d.f` @type ^`boolean` := v0 @kind boolean;
  #L4cb39c.  v0:= new `java.util.ArrayList`;
  #L4cb3a0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4cb3a6.  v2.`wc.d.g` @type ^`java.util.ArrayList` := v0 @kind object;
  #L4cb3aa.  v1:= v3.`wc.d.a` @type ^`java.util.Locale` @kind object;
  #L4cb3ae.  v2.`wc.d.a` @type ^`java.util.Locale` := v1 @kind object;
  #L4cb3b2.  v1:= v3.`wc.d.b` @type ^`wc.h` @kind object;
  #L4cb3b6.  v2.`wc.d.b` @type ^`wc.h` := v1 @kind object;
  #L4cb3ba.  v1:= v3.`wc.d.c` @type ^`vc.h` @kind object;
  #L4cb3be.  v2.`wc.d.c` @type ^`vc.h` := v1 @kind object;
  #L4cb3c2.  v1:= v3.`wc.d.d` @type ^`uc.q` @kind object;
  #L4cb3c6.  v2.`wc.d.d` @type ^`uc.q` := v1 @kind object;
  #L4cb3ca.  v1:= v3.`wc.d.e` @type ^`boolean` @kind boolean;
  #L4cb3ce.  v2.`wc.d.e` @type ^`boolean` := v1 @kind boolean;
  #L4cb3d2.  v3:= v3.`wc.d.f` @type ^`boolean` @kind boolean;
  #L4cb3d6.  v2.`wc.d.f` @type ^`boolean` := v3 @kind boolean;
  #L4cb3da.  v3:= new `wc.d$b`;
  #L4cb3de.  v1:= 0I;
  #L4cb3e0.  call `<init>`(v3, v2, v1) @signature `Lwc/d$b;.<init>:(Lwc/d;Lwc/d$a;)V` @kind direct;
  #L4cb3e6.  call temp:= `add`(v0, v3) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4cb3ec.  return @kind void;
}
procedure `uc.q` `a`(`wc.d` v0 @kind object) @signature `Lwc/d;.a:(Lwc/d;)Luc/q;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4cb2d0.  v0:= v0.`wc.d.d` @type ^`uc.q` @kind object;
  #L4cb2d4.  return v0 @kind object;
}
procedure `boolean` `c`(`char` v2 , `char` v3 ) @signature `Lwc/d;.c:(CC)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L4cb0d8.  if v2 == v3 then goto L4cb10a;
  #L4cb0dc.  call temp:= `toUpperCase`(v2) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L4cb0e2.  v0:= temp;
  #L4cb0e4.  call temp:= `toUpperCase`(v3) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L4cb0ea.  v1:= temp;
  #L4cb0ec.  if v0 == v1 then goto L4cb10a;
  #L4cb0f0.  call temp:= `toLowerCase`(v2) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L4cb0f6.  v2:= temp;
  #L4cb0f8.  call temp:= `toLowerCase`(v3) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L4cb0fe.  v3:= temp;
  #L4cb100.  if v2 != v3 then goto L4cb106;
  #L4cb104.  goto L4cb10a;
  #L4cb106.  v2:= 0I;
  #L4cb108.  goto L4cb10c;
  #L4cb10a.  v2:= 1I;
  #L4cb10c.  return v2;
}
procedure `wc.d$b` `e`(`wc.d` v2 @kind this) @signature `Lwc/d;.e:()Lwc/d$b;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4cb500.  v0:= v2.`wc.d.g` @type ^`java.util.ArrayList` @kind object;
  #L4cb504.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L4cb50a.  v1:= temp;
  #L4cb50c.  v1:= v1 + -1;
  #L4cb510.  call temp:= `get`(v0, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4cb516.  v0:= temp @kind object;
  #L4cb518.  v0:= (`wc.d$b`) v0 @kind object;
  #L4cb51c.  return v0 @kind object;
}
procedure `boolean` `b`(`wc.d` v1 @kind this, `char` v2 , `char` v3 ) @signature `Lwc/d;.b:(CC)Z` @AccessFlag  {
    temp;
    v0;

  #L4cb0a4.  call temp:= `k`(v1) @signature `Lwc/d;.k:()Z` @kind virtual;
  #L4cb0aa.  v0:= temp;
  #L4cb0ac.  if v0 == 0 then goto L4cb0bc;
  #L4cb0b0.  if v2 != v3 then goto L4cb0b8;
  #L4cb0b4.  v2:= 1I;
  #L4cb0b6.  goto L4cb0ba;
  #L4cb0b8.  v2:= 0I;
  #L4cb0ba.  return v2;
  #L4cb0bc.  call temp:= `c`(v2, v3) @signature `Lwc/d;.c:(CC)Z` @kind static;
  #L4cb0c2.  v2:= temp;
  #L4cb0c4.  return v2;
}
procedure `wc.d` `d`(`wc.d` v1 @kind this) @signature `Lwc/d;.d:()Lwc/d;` @AccessFlag  {
    temp;
    v0;

  #L4cb4e4.  v0:= new `wc.d`;
  #L4cb4e8.  call `<init>`(v0, v1) @signature `Lwc/d;.<init>:(Lwc/d;)V` @kind direct;
  #L4cb4ee.  return v0 @kind object;
}
procedure `void` `f`(`wc.d` v1 @kind this, `boolean` v2 ) @signature `Lwc/d;.f:(Z)V` @AccessFlag  {
    temp;
    v0;

  #L4cb400.  if v2 == 0 then goto L4cb416;
  #L4cb404.  v2:= v1.`wc.d.g` @type ^`java.util.ArrayList` @kind object;
  #L4cb408.  call temp:= `size`(v2) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L4cb40e.  v0:= temp;
  #L4cb410.  v0:= v0 + -2;
  #L4cb414.  goto L4cb426;
  #L4cb416.  v2:= v1.`wc.d.g` @type ^`java.util.ArrayList` @kind object;
  #L4cb41a.  call temp:= `size`(v2) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L4cb420.  v0:= temp;
  #L4cb422.  v0:= v0 + -1;
  #L4cb426.  call temp:= `remove`(v2, v0) @signature `Ljava/util/ArrayList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L4cb42c.  return @kind void;
}
procedure `vc.h` `g`(`wc.d` v1 @kind this) @signature `Lwc/d;.g:()Lvc/h;` @AccessFlag  {
    temp;
    v0;

  #L4cb2e8.  call temp:= `e`(v1) @signature `Lwc/d;.e:()Lwc/d$b;` @kind direct;
  #L4cb2ee.  v0:= temp @kind object;
  #L4cb2f0.  v0:= v0.`wc.d$b.o` @type ^`vc.h` @kind object;
  #L4cb2f4.  if v0 != 0 then goto L4cb304;
  #L4cb2f8.  v0:= v1.`wc.d.c` @type ^`vc.h` @kind object;
  #L4cb2fc.  if v0 != 0 then goto L4cb304;
  #L4cb300.  v0:= `@@vc.m.q` @type ^`vc.m` @kind object;
  #L4cb304.  return v0 @kind object;
}
procedure `java.util.Locale` `h`(`wc.d` v1 @kind this) @signature `Lwc/d;.h:()Ljava/util/Locale;` @AccessFlag  {
    temp;
    v0;

  #L4cb2b8.  v0:= v1.`wc.d.a` @type ^`java.util.Locale` @kind object;
  #L4cb2bc.  return v0 @kind object;
}
procedure `java.lang.Long` `i`(`wc.d` v1 @kind this, `yc.i` v2 @kind object) @signature `Lwc/d;.i:(Lyc/i;)Ljava/lang/Long;` @AccessFlag  {
    temp;
    v0;

  #L4cb268.  call temp:= `e`(v1) @signature `Lwc/d;.e:()Lwc/d$b;` @kind direct;
  #L4cb26e.  v0:= temp @kind object;
  #L4cb270.  v0:= v0.`wc.d$b.q` @type ^`java.util.Map` @kind object;
  #L4cb274.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4cb27a.  v2:= temp @kind object;
  #L4cb27c.  v2:= (`java.lang.Long`) v2 @kind object;
  #L4cb280.  return v2 @kind object;
}
procedure `wc.h` `j`(`wc.d` v1 @kind this) @signature `Lwc/d;.j:()Lwc/h;` @AccessFlag  {
    temp;
    v0;

  #L4cb54c.  v0:= v1.`wc.d.b` @type ^`wc.h` @kind object;
  #L4cb550.  return v0 @kind object;
}
procedure `boolean` `k`(`wc.d` v1 @kind this) @signature `Lwc/d;.k:()Z` @AccessFlag  {
    temp;
    v0;

  #L4cb120.  v0:= v1.`wc.d.e` @type ^`boolean` @kind boolean;
  #L4cb124.  return v0;
}
procedure `boolean` `l`(`wc.d` v1 @kind this) @signature `Lwc/d;.l:()Z` @AccessFlag  {
    temp;
    v0;

  #L4cb138.  v0:= v1.`wc.d.f` @type ^`boolean` @kind boolean;
  #L4cb13c.  return v0;
}
procedure `void` `m`(`wc.d` v0 @kind this, `boolean` v1 ) @signature `Lwc/d;.m:(Z)V` @AccessFlag  {
    temp;

  #L4cb440.  v0.`wc.d.e` @type ^`boolean` := v1 @kind boolean;
  #L4cb444.  return @kind void;
}
procedure `void` `n`(`wc.d` v1 @kind this, `uc.q` v2 @kind object) @signature `Lwc/d;.n:(Luc/q;)V` @AccessFlag  {
    temp;
    v0;

  #L4cb458.  v0:= "zone" @kind object;
  #L4cb45c.  call temp:= `i`(v2, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4cb462.  call temp:= `e`(v1) @signature `Lwc/d;.e:()Lwc/d$b;` @kind direct;
  #L4cb468.  v0:= temp @kind object;
  #L4cb46a.  v0.`wc.d$b.p` @type ^`uc.q` := v2 @kind object;
  #L4cb46e.  return @kind void;
}
procedure `int` `o`(`wc.d` v2 @kind this, `yc.i` v3 @kind object, `long` v4 , `int` v6 , `int` v7 ) @signature `Lwc/d;.o:(Lyc/i;JII)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4cb214.  v0:= "field" @kind object;
  #L4cb218.  call temp:= `i`(v3, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4cb21e.  call temp:= `e`(v2) @signature `Lwc/d;.e:()Lwc/d$b;` @kind direct;
  #L4cb224.  v0:= temp @kind object;
  #L4cb226.  v0:= v0.`wc.d$b.q` @type ^`java.util.Map` @kind object;
  #L4cb22a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4cb230.  v1:= temp @kind object;
  #L4cb232.  call temp:= `put`(v0, v3, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4cb238.  v3:= temp @kind object;
  #L4cb23a.  v3:= (`java.lang.Long`) v3 @kind object;
  #L4cb23e.  if v3 == 0 then goto L4cb254;
  #L4cb242.  call temp:= `longValue`(v3) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4cb248.  v0:= temp @kind wide;
  #L4cb24a.  v3:= lcmp(v0, v4);
  #L4cb24e.  if v3 == 0 then goto L4cb254;
  #L4cb252.  v7:= ~v6 @kind int;
  #L4cb254.  return v7;
}
procedure `void` `p`(`wc.d` v2 @kind this) @signature `Lwc/d;.p:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4cb480.  call temp:= `e`(v2) @signature `Lwc/d;.e:()Lwc/d$b;` @kind direct;
  #L4cb486.  v0:= temp @kind object;
  #L4cb488.  v1:= 1I;
  #L4cb48a.  v0.`wc.d$b.r` @type ^`boolean` := v1 @kind boolean;
  #L4cb48e.  return @kind void;
}
procedure `void` `q`(`wc.d` v0 @kind this, `boolean` v1 ) @signature `Lwc/d;.q:(Z)V` @AccessFlag  {
    temp;

  #L4cb4a0.  v0.`wc.d.f` @type ^`boolean` := v1 @kind boolean;
  #L4cb4a4.  return @kind void;
}
procedure `void` `r`(`wc.d` v2 @kind this) @signature `Lwc/d;.r:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4cb4b8.  v0:= v2.`wc.d.g` @type ^`java.util.ArrayList` @kind object;
  #L4cb4bc.  call temp:= `e`(v2) @signature `Lwc/d;.e:()Lwc/d$b;` @kind direct;
  #L4cb4c2.  v1:= temp @kind object;
  #L4cb4c4.  call temp:= `T`(v1) @signature `Lwc/d$b;.T:()Lwc/d$b;` @kind virtual;
  #L4cb4ca.  v1:= temp @kind object;
  #L4cb4cc.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4cb4d2.  return @kind void;
}
procedure `boolean` `s`(`wc.d` v6 @kind this, `java.lang.CharSequence` v7 @kind object, `int` v8 , `java.lang.CharSequence` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lwc/d;.s:(Ljava/lang/CharSequence;ILjava/lang/CharSequence;II)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cb150.  v0:= v8 + v11 @kind int;
  #L4cb154.  call temp:= `length`(v7) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4cb15a.  v1:= temp;
  #L4cb15c.  v2:= 0I;
  #L4cb15e.  if v0 > v1 then goto L4cb200;
  #L4cb162.  v0:= v10 + v11 @kind int;
  #L4cb166.  call temp:= `length`(v9) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4cb16c.  v1:= temp;
  #L4cb16e.  if v0 <= v1 then goto L4cb174;
  #L4cb172.  goto L4cb200;
  #L4cb174.  call temp:= `k`(v6) @signature `Lwc/d;.k:()Z` @kind virtual;
  #L4cb17a.  v0:= temp;
  #L4cb17c.  if v0 == 0 then goto L4cb1aa;
  #L4cb180.  v0:= 0I;
  #L4cb182.  if v0 >= v11 then goto L4cb1fc;
  #L4cb186.  v1:= v8 + v0 @kind int;
  #L4cb18a.  call temp:= `charAt`(v7, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4cb190.  v1:= temp;
  #L4cb192.  v3:= v10 + v0 @kind int;
  #L4cb196.  call temp:= `charAt`(v9, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4cb19c.  v3:= temp;
  #L4cb19e.  if v1 == v3 then goto L4cb1a4;
  #L4cb1a2.  return v2;
  #L4cb1a4.  v0:= v0 + 1;
  #L4cb1a8.  goto L4cb182;
  #L4cb1aa.  v0:= 0I;
  #L4cb1ac.  if v0 >= v11 then goto L4cb1fc;
  #L4cb1b0.  v1:= v8 + v0 @kind int;
  #L4cb1b4.  call temp:= `charAt`(v7, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4cb1ba.  v1:= temp;
  #L4cb1bc.  v3:= v10 + v0 @kind int;
  #L4cb1c0.  call temp:= `charAt`(v9, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4cb1c6.  v3:= temp;
  #L4cb1c8.  if v1 == v3 then goto L4cb1f6;
  #L4cb1cc.  call temp:= `toUpperCase`(v1) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L4cb1d2.  v4:= temp;
  #L4cb1d4.  call temp:= `toUpperCase`(v3) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L4cb1da.  v5:= temp;
  #L4cb1dc.  if v4 == v5 then goto L4cb1f6;
  #L4cb1e0.  call temp:= `toLowerCase`(v1) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L4cb1e6.  v1:= temp;
  #L4cb1e8.  call temp:= `toLowerCase`(v3) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L4cb1ee.  v3:= temp;
  #L4cb1f0.  if v1 == v3 then goto L4cb1f6;
  #L4cb1f4.  return v2;
  #L4cb1f6.  v0:= v0 + 1;
  #L4cb1fa.  goto L4cb1ac;
  #L4cb1fc.  v7:= 1I;
  #L4cb1fe.  return v7;
  #L4cb200.  return v2;
}
procedure `wc.d$b` `t`(`wc.d` v1 @kind this) @signature `Lwc/d;.t:()Lwc/d$b;` @AccessFlag  {
    temp;
    v0;

  #L4cb530.  call temp:= `e`(v1) @signature `Lwc/d;.e:()Lwc/d$b;` @kind direct;
  #L4cb536.  v0:= temp @kind object;
  #L4cb538.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`wc.d` v1 @kind this) @signature `Lwc/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb294.  call temp:= `e`(v1) @signature `Lwc/d;.e:()Lwc/d$b;` @kind direct;
  #L4cb29a.  v0:= temp @kind object;
  #L4cb29c.  call temp:= `toString`(v0) @signature `Lwc/d$b;.toString:()Ljava/lang/String;` @kind virtual;
  #L4cb2a2.  v0:= temp @kind object;
  #L4cb2a4.  return v0 @kind object;
}
