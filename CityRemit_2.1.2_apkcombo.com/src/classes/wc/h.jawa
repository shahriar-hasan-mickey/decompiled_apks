record `wc.h` @kind class @AccessFlag PUBLIC_FINAL {
  `char` `wc.h.a` @AccessFlag PRIVATE_FINAL;
  `char` `wc.h.b` @AccessFlag PRIVATE_FINAL;
  `char` `wc.h.c` @AccessFlag PRIVATE_FINAL;
  `char` `wc.h.d` @AccessFlag PRIVATE_FINAL;
}
global `wc.h` `@@wc.h.e` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lwc/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cbc38.  v0:= new `wc.h`;
  #L4cbc3c.  v1:= 48I;
  #L4cbc40.  v2:= 43I;
  #L4cbc44.  v3:= 45I;
  #L4cbc48.  v4:= 46I;
  #L4cbc4c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lwc/h;.<init>:(CCCC)V` @kind direct;
  #L4cbc52.  `@@wc.h.e` @type ^`wc.h` := v0 @kind object;
  #L4cbc56.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4cbc5a.  v1:= 16I;
  #L4cbc5e.  v2:= 0.75F;
  #L4cbc62.  v3:= 2I;
  #L4cbc64.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:(IFI)V` @kind direct;
  #L4cbc6a.  return @kind void;
}
procedure `void` `<init>`(`wc.h` v0 @kind this, `char` v1 , `char` v2 , `char` v3 , `char` v4 ) @signature `Lwc/h;.<init>:(CCCC)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4cbc7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cbc82.  v0.`wc.h.a` @type ^`char` := v1 @kind char;
  #L4cbc86.  v0.`wc.h.b` @type ^`char` := v2 @kind char;
  #L4cbc8a.  v0.`wc.h.c` @type ^`char` := v3 @kind char;
  #L4cbc8e.  v0.`wc.h.d` @type ^`char` := v4 @kind char;
  #L4cbc92.  return @kind void;
}
procedure `java.lang.String` `a`(`wc.h` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lwc/h;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4cbb88.  v0:= v3.`wc.h.a` @type ^`char` @kind char;
  #L4cbb8c.  v1:= 48I;
  #L4cbb90.  if v0 != v1 then goto L4cbb96;
  #L4cbb94.  return v4 @kind object;
  #L4cbb96.  v0:= v0 - v1 @kind int;
  #L4cbb98.  call temp:= `toCharArray`(v4) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L4cbb9e.  v4:= temp @kind object;
  #L4cbba0.  v1:= 0I;
  #L4cbba2.  v2:= length @variable v4;
  #L4cbba4.  if v1 >= v2 then goto L4cbbba;
  #L4cbba8.  v2:= v4[v1] @kind char;
  #L4cbbac.  v2:= v2 + v0 @kind int;
  #L4cbbae.  v2:= (`char`) v2 @kind i2c;
  #L4cbbb0.  v4[v1]:= v2 @kind char;
  #L4cbbb4.  v1:= v1 + 1;
  #L4cbbb8.  goto L4cbba2;
  #L4cbbba.  v0:= new `java.lang.String`;
  #L4cbbbe.  call `<init>`(v0, v4) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L4cbbc4.  return v0 @kind object;
}
procedure `int` `b`(`wc.h` v1 @kind this, `char` v2 ) @signature `Lwc/h;.b:(C)I` @AccessFlag  {
    temp;
    v0;

  #L4cbb38.  v0:= v1.`wc.h.a` @type ^`char` @kind char;
  #L4cbb3c.  v2:= v2 - v0 @kind int;
  #L4cbb3e.  if v2 < 0 then goto L4cbb4c;
  #L4cbb42.  v0:= 9I;
  #L4cbb46.  if v2 > v0 then goto L4cbb4c;
  #L4cbb4a.  goto L4cbb4e;
  #L4cbb4c.  v2:= -1I;
  #L4cbb4e.  return v2;
}
procedure `char` `c`(`wc.h` v1 @kind this) @signature `Lwc/h;.c:()C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cbad8.  v0:= v1.`wc.h.d` @type ^`char` @kind char;
  #L4cbadc.  return v0;
}
procedure `char` `d`(`wc.h` v1 @kind this) @signature `Lwc/h;.d:()C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cbaf0.  v0:= v1.`wc.h.c` @type ^`char` @kind char;
  #L4cbaf4.  return v0;
}
procedure `char` `e`(`wc.h` v1 @kind this) @signature `Lwc/h;.e:()C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cbb08.  v0:= v1.`wc.h.b` @type ^`char` @kind char;
  #L4cbb0c.  return v0;
}
procedure `boolean` `equals`(`wc.h` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lwc/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cba78.  v0:= 1I;
  #L4cba7a.  if v4 != v5 then goto L4cba80;
  #L4cba7e.  return v0;
  #L4cba80.  v1:= instanceof @variable v5 @type ^`wc.h` @kind boolean;
  #L4cba84.  v2:= 0I;
  #L4cba86.  if v1 == 0 then goto L4cbac4;
  #L4cba8a.  v5:= (`wc.h`) v5 @kind object;
  #L4cba8e.  v1:= v4.`wc.h.a` @type ^`char` @kind char;
  #L4cba92.  v3:= v5.`wc.h.a` @type ^`char` @kind char;
  #L4cba96.  if v1 != v3 then goto L4cbac0;
  #L4cba9a.  v1:= v4.`wc.h.b` @type ^`char` @kind char;
  #L4cba9e.  v3:= v5.`wc.h.b` @type ^`char` @kind char;
  #L4cbaa2.  if v1 != v3 then goto L4cbac0;
  #L4cbaa6.  v1:= v4.`wc.h.c` @type ^`char` @kind char;
  #L4cbaaa.  v3:= v5.`wc.h.c` @type ^`char` @kind char;
  #L4cbaae.  if v1 != v3 then goto L4cbac0;
  #L4cbab2.  v1:= v4.`wc.h.d` @type ^`char` @kind char;
  #L4cbab6.  v5:= v5.`wc.h.d` @type ^`char` @kind char;
  #L4cbaba.  if v1 != v5 then goto L4cbac0;
  #L4cbabe.  goto L4cbac2;
  #L4cbac0.  v0:= 0I;
  #L4cbac2.  return v0;
  #L4cbac4.  return v2;
}
procedure `char` `f`(`wc.h` v1 @kind this) @signature `Lwc/h;.f:()C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cbb20.  v0:= v1.`wc.h.a` @type ^`char` @kind char;
  #L4cbb24.  return v0;
}
procedure `int` `hashCode`(`wc.h` v2 @kind this) @signature `Lwc/h;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cbb60.  v0:= v2.`wc.h.a` @type ^`char` @kind char;
  #L4cbb64.  v1:= v2.`wc.h.b` @type ^`char` @kind char;
  #L4cbb68.  v0:= v0 + v1 @kind int;
  #L4cbb6a.  v1:= v2.`wc.h.c` @type ^`char` @kind char;
  #L4cbb6e.  v0:= v0 + v1 @kind int;
  #L4cbb70.  v1:= v2.`wc.h.d` @type ^`char` @kind char;
  #L4cbb74.  v0:= v0 + v1 @kind int;
  #L4cbb76.  return v0;
}
procedure `java.lang.String` `toString`(`wc.h` v2 @kind this) @signature `Lwc/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cbbd8.  v0:= new `java.lang.StringBuilder`;
  #L4cbbdc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4cbbe2.  v1:= "DecimalStyle[" @kind object;
  #L4cbbe6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cbbec.  v1:= v2.`wc.h.a` @type ^`char` @kind char;
  #L4cbbf0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cbbf6.  v1:= v2.`wc.h.b` @type ^`char` @kind char;
  #L4cbbfa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cbc00.  v1:= v2.`wc.h.c` @type ^`char` @kind char;
  #L4cbc04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cbc0a.  v1:= v2.`wc.h.d` @type ^`char` @kind char;
  #L4cbc0e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cbc14.  v1:= "]" @kind object;
  #L4cbc18.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cbc1e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4cbc24.  v0:= temp @kind object;
  #L4cbc26.  return v0 @kind object;
}
