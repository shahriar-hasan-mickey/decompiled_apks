record `wc.c$j` @kind class @AccessFlag  extends `wc.c$g` @kind interface {
  `yc.i` `wc.c$j.o` @AccessFlag FINAL;
  `int` `wc.c$j.p` @AccessFlag FINAL;
  `int` `wc.c$j.q` @AccessFlag FINAL;
  `wc.j` `wc.c$j.r` @AccessFlag FINAL;
  `int` `wc.c$j.s` @AccessFlag FINAL;
}
global `int`[] `@@wc.c$j.t` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lwc/c$j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c8700.  v0:= 10I;
  #L4c8704.  v0:= new `int`[v0];
  #L4c8708.  goto L4c8714;
  #L4c870e.  `@@wc.c$j.t` @type ^`int`[] := v0 @kind object;
  #L4c8712.  return @kind void;
  #L4c8714.  v0:= (0I, 10I, 100I, 1000I, 10000I, 100000I, 1000000I, 10000000I, 100000000I, 1000000000I) @kind object;
  #L4c8743.  goto L4c870e;
}
procedure `void` `<init>`(`wc.c$j` v0 @kind this, `yc.i` v1 @kind object, `int` v2 , `int` v3 , `wc.j` v4 @kind object) @signature `Lwc/c$j;.<init>:(Lyc/i;IILwc/j;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c8754.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c875a.  v0.`wc.c$j.o` @type ^`yc.i` := v1 @kind object;
  #L4c875e.  v0.`wc.c$j.p` @type ^`int` := v2;
  #L4c8762.  v0.`wc.c$j.q` @type ^`int` := v3;
  #L4c8766.  v0.`wc.c$j.r` @type ^`wc.j` := v4 @kind object;
  #L4c876a.  v1:= 0I;
  #L4c876c.  v0.`wc.c$j.s` @type ^`int` := v1;
  #L4c8770.  return @kind void;
}
procedure `void` `<init>`(`wc.c$j` v0 @kind this, `yc.i` v1 @kind object, `int` v2 , `int` v3 , `wc.j` v4 @kind object, `int` v5 ) @signature `Lwc/c$j;.<init>:(Lyc/i;IILwc/j;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4c8784.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c878a.  v0.`wc.c$j.o` @type ^`yc.i` := v1 @kind object;
  #L4c878e.  v0.`wc.c$j.p` @type ^`int` := v2;
  #L4c8792.  v0.`wc.c$j.q` @type ^`int` := v3;
  #L4c8796.  v0.`wc.c$j.r` @type ^`wc.j` := v4 @kind object;
  #L4c879a.  v0.`wc.c$j.s` @type ^`int` := v5;
  #L4c879e.  return @kind void;
}
procedure `long` `a`(`wc.c$j` v0 @kind this, `wc.f` v1 @kind object, `long` v2 ) @signature `Lwc/c$j;.a:(Lwc/f;J)J` @AccessFlag  {
    temp;

  #L4c86ec.  return v2 @kind wide;
}
procedure `boolean` `b`(`wc.c$j` v1 @kind this, `wc.d` v2 @kind object) @signature `Lwc/c$j;.b:(Lwc/d;)Z` @AccessFlag  {
    temp;
    v0;

  #L4c80bc.  v2:= v1.`wc.c$j.s` @type ^`int`;
  #L4c80c0.  v0:= -1I;
  #L4c80c2.  if v2 == v0 then goto L4c80e8;
  #L4c80c6.  if v2 <= 0 then goto L4c80e4;
  #L4c80ca.  v2:= v1.`wc.c$j.p` @type ^`int`;
  #L4c80ce.  v0:= v1.`wc.c$j.q` @type ^`int`;
  #L4c80d2.  if v2 != v0 then goto L4c80e4;
  #L4c80d6.  v2:= v1.`wc.c$j.r` @type ^`wc.j` @kind object;
  #L4c80da.  v0:= `@@wc.j.r` @type ^`wc.j` @kind object;
  #L4c80de.  if v2 != v0 then goto L4c80e4;
  #L4c80e2.  goto L4c80e8;
  #L4c80e4.  v2:= 0I;
  #L4c80e6.  goto L4c80ea;
  #L4c80e8.  v2:= 1I;
  #L4c80ea.  return v2;
}
procedure `boolean` `c`(`wc.c$j` v11 @kind this, `wc.f` v12 @kind object, `java.lang.StringBuilder` v13 @kind object) @signature `Lwc/c$j;.c:(Lwc/f;Ljava/lang/StringBuilder;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4c80fc.  v0:= v11.`wc.c$j.o` @type ^`yc.i` @kind object;
  #L4c8100.  call temp:= `f`(v12, v0) @signature `Lwc/f;.f:(Lyc/i;)Ljava/lang/Long;` @kind virtual;
  #L4c8106.  v0:= temp @kind object;
  #L4c8108.  v1:= 0I;
  #L4c810a.  if v0 != 0 then goto L4c8110;
  #L4c810e.  return v1;
  #L4c8110.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4c8116.  v2:= temp @kind wide;
  #L4c8118.  call temp:= `a`(v11, v12, v2) @signature `Lwc/c$j;.a:(Lwc/f;J)J` @kind virtual;
  #L4c811e.  v2:= temp @kind wide;
  #L4c8120.  call temp:= `d`(v12) @signature `Lwc/f;.d:()Lwc/h;` @kind virtual;
  #L4c8126.  v12:= temp @kind object;
  #L4c8128.  v4:= -9223372036854775808L;
  #L4c812c.  v0:= lcmp(v2, v4);
  #L4c8130.  if v0 != 0 then goto L4c813a;
  #L4c8134.  v0:= "9223372036854775808" @kind object;
  #L4c8138.  goto L4c814a;
  #L4c813a.  call temp:= `abs`(v2) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L4c8140.  v4:= temp @kind wide;
  #L4c8142.  call temp:= `toString`(v4) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L4c8148.  v0:= temp @kind object;
  #L4c814a.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4c8150.  v4:= temp;
  #L4c8152.  v5:= v11.`wc.c$j.q` @type ^`int`;
  #L4c8156.  v6:= " cannot be printed as the value " @kind object;
  #L4c815a.  v7:= "Field " @kind object;
  #L4c815e.  if v4 > v5 then goto L4c825e;
  #L4c8162.  call temp:= `a`(v12, v0) @signature `Lwc/h;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L4c8168.  v0:= temp @kind object;
  #L4c816a.  v4:= 0L;
  #L4c816e.  v8:= 2I;
  #L4c8170.  v9:= 1I;
  #L4c8172.  v10:= lcmp(v2, v4);
  #L4c8176.  v4:= `@@wc.c$d.a` @type ^`int`[] @kind object;
  #L4c817a.  v5:= v11.`wc.c$j.r` @type ^`wc.j` @kind object;
  #L4c817e.  call temp:= `ordinal`(v5) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4c8184.  v5:= temp;
  #L4c8186.  if v10 < 0 then goto L4c81c8;
  #L4c818a.  v4:= v4[v5];
  #L4c818e.  if v4 == v9 then goto L4c81a8;
  #L4c8192.  if v4 == v8 then goto L4c8198;
  #L4c8196.  goto L4c8230;
  #L4c8198.  call temp:= `e`(v12) @signature `Lwc/h;.e:()C` @kind virtual;
  #L4c819e.  v2:= temp;
  #L4c81a0.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c81a6.  goto L4c8230;
  #L4c81a8.  v4:= v11.`wc.c$j.p` @type ^`int`;
  #L4c81ac.  v5:= 19I;
  #L4c81b0.  if v4 >= v5 then goto L4c8230;
  #L4c81b4.  v5:= `@@wc.c$j.t` @type ^`int`[] @kind object;
  #L4c81b8.  v4:= v5[v4];
  #L4c81bc.  v4:= (`long`) v4 @kind i2l;
  #L4c81be.  v6:= lcmp(v2, v4);
  #L4c81c2.  if v6 < 0 then goto L4c8230;
  #L4c81c6.  goto L4c8198;
  #L4c81c8.  v4:= v4[v5];
  #L4c81cc.  if v4 == v9 then goto L4c8226;
  #L4c81d0.  if v4 == v8 then goto L4c8226;
  #L4c81d4.  v5:= 3I;
  #L4c81d6.  if v4 == v5 then goto L4c8226;
  #L4c81da.  v5:= 4I;
  #L4c81dc.  if v4 == v5 then goto L4c81e2;
  #L4c81e0.  goto L4c8230;
  #L4c81e2.  v12:= new `uc.b`;
  #L4c81e6.  v13:= new `java.lang.StringBuilder`;
  #L4c81ea.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c81f0.  call temp:= `append`(v13, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c81f6.  v0:= v11.`wc.c$j.o` @type ^`yc.i` @kind object;
  #L4c81fa.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8200.  call temp:= `append`(v13, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8206.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c820c.  v0:= " cannot be negative according to the SignStyle" @kind object;
  #L4c8210.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8216.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c821c.  v13:= temp @kind object;
  #L4c821e.  call `<init>`(v12, v13) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c8224.  throw v12;
  #L4c8226.  call temp:= `d`(v12) @signature `Lwc/h;.d:()C` @kind virtual;
  #L4c822c.  v2:= temp;
  #L4c822e.  goto L4c81a0;
  #L4c8230.  v2:= v11.`wc.c$j.p` @type ^`int`;
  #L4c8234.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4c823a.  v3:= temp;
  #L4c823c.  v2:= v2 - v3 @kind int;
  #L4c823e.  if v1 >= v2 then goto L4c8256;
  #L4c8242.  call temp:= `f`(v12) @signature `Lwc/h;.f:()C` @kind virtual;
  #L4c8248.  v2:= temp;
  #L4c824a.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8250.  v1:= v1 + 1;
  #L4c8254.  goto L4c8230;
  #L4c8256.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c825c.  return v9;
  #L4c825e.  v12:= new `uc.b`;
  #L4c8262.  v13:= new `java.lang.StringBuilder`;
  #L4c8266.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c826c.  call temp:= `append`(v13, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8272.  v0:= v11.`wc.c$j.o` @type ^`yc.i` @kind object;
  #L4c8276.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c827c.  call temp:= `append`(v13, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8282.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8288.  v0:= " exceeds the maximum print width of " @kind object;
  #L4c828c.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8292.  v0:= v11.`wc.c$j.q` @type ^`int`;
  #L4c8296.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c829c.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c82a2.  v13:= temp @kind object;
  #L4c82a4.  call `<init>`(v12, v13) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c82aa.  throw v12;
}
procedure `int` `d`(`wc.c$j` v19 @kind this, `wc.d` v20 @kind object, `java.lang.CharSequence` v21 @kind object, `int` v22 ) @signature `Lwc/c$j;.d:(Lwc/d;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L4c82bc.  v6:= v19 @kind object;
  #L4c82c0.  v0:= v22;
  #L4c82c4.  call temp:= `length`(v21) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4c82ca.  v1:= temp;
  #L4c82cc.  if v0 != v1 then goto L4c82d4;
  #L4c82d0.  v0:= ~v0 @kind int;
  #L4c82d2.  return v0;
  #L4c82d4.  call temp:= `charAt`(v21, v22) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4c82da.  v2:= temp;
  #L4c82dc.  call temp:= `j`(v20) @signature `Lwc/d;.j:()Lwc/h;` @kind virtual;
  #L4c82e2.  v3:= temp @kind object;
  #L4c82e4.  call temp:= `e`(v3) @signature `Lwc/h;.e:()C` @kind virtual;
  #L4c82ea.  v3:= temp;
  #L4c82ec.  v4:= 0I;
  #L4c82ee.  v5:= 1I;
  #L4c82f0.  if v2 != v3 then goto L4c832e;
  #L4c82f4.  v2:= v6.`wc.c$j.r` @type ^`wc.j` @kind object;
  #L4c82f8.  call temp:= `l`(v20) @signature `Lwc/d;.l:()Z` @kind virtual;
  #L4c82fe.  v3:= temp;
  #L4c8300.  v7:= v6.`wc.c$j.p` @type ^`int`;
  #L4c8304.  v8:= v6.`wc.c$j.q` @type ^`int`;
  #L4c8308.  if v7 != v8 then goto L4c8310;
  #L4c830c.  v7:= 1I;
  #L4c830e.  goto L4c8312;
  #L4c8310.  v7:= 0I;
  #L4c8312.  call temp:= `c`(v2, v5, v3, v7) @signature `Lwc/j;.c:(ZZZ)Z` @kind virtual;
  #L4c8318.  v2:= temp;
  #L4c831a.  if v2 != 0 then goto L4c8322;
  #L4c831e.  v0:= ~v0 @kind int;
  #L4c8320.  return v0;
  #L4c8322.  v0:= v0 + 1;
  #L4c8326.  v7:= v0;
  #L4c8328.  v0:= 0I;
  #L4c832a.  v2:= 1I;
  #L4c832c.  goto L4c839c;
  #L4c832e.  call temp:= `j`(v20) @signature `Lwc/d;.j:()Lwc/h;` @kind virtual;
  #L4c8334.  v3:= temp @kind object;
  #L4c8336.  call temp:= `d`(v3) @signature `Lwc/h;.d:()C` @kind virtual;
  #L4c833c.  v3:= temp;
  #L4c833e.  if v2 != v3 then goto L4c837a;
  #L4c8342.  v2:= v6.`wc.c$j.r` @type ^`wc.j` @kind object;
  #L4c8346.  call temp:= `l`(v20) @signature `Lwc/d;.l:()Z` @kind virtual;
  #L4c834c.  v3:= temp;
  #L4c834e.  v7:= v6.`wc.c$j.p` @type ^`int`;
  #L4c8352.  v8:= v6.`wc.c$j.q` @type ^`int`;
  #L4c8356.  if v7 != v8 then goto L4c835e;
  #L4c835a.  v7:= 1I;
  #L4c835c.  goto L4c8360;
  #L4c835e.  v7:= 0I;
  #L4c8360.  call temp:= `c`(v2, v4, v3, v7) @signature `Lwc/j;.c:(ZZZ)Z` @kind virtual;
  #L4c8366.  v2:= temp;
  #L4c8368.  if v2 != 0 then goto L4c8370;
  #L4c836c.  v0:= ~v0 @kind int;
  #L4c836e.  return v0;
  #L4c8370.  v0:= v0 + 1;
  #L4c8374.  v7:= v0;
  #L4c8376.  v0:= 1I;
  #L4c8378.  goto L4c839a;
  #L4c837a.  v2:= v6.`wc.c$j.r` @type ^`wc.j` @kind object;
  #L4c837e.  v3:= `@@wc.j.p` @type ^`wc.j` @kind object;
  #L4c8382.  if v2 != v3 then goto L4c8396;
  #L4c8386.  call temp:= `l`(v20) @signature `Lwc/d;.l:()Z` @kind virtual;
  #L4c838c.  v2:= temp;
  #L4c838e.  if v2 == 0 then goto L4c8396;
  #L4c8392.  v0:= ~v0 @kind int;
  #L4c8394.  return v0;
  #L4c8396.  v7:= v0;
  #L4c8398.  v0:= 0I;
  #L4c839a.  v2:= 0I;
  #L4c839c.  call temp:= `l`(v20) @signature `Lwc/d;.l:()Z` @kind virtual;
  #L4c83a2.  v3:= temp;
  #L4c83a4.  if v3 != 0 then goto L4c83ba;
  #L4c83a8.  call temp:= `b`(v19, v20) @signature `Lwc/c$j;.b:(Lwc/d;)Z` @kind virtual;
  #L4c83ae.  v3:= temp;
  #L4c83b0.  if v3 == 0 then goto L4c83b6;
  #L4c83b4.  goto L4c83ba;
  #L4c83b6.  v3:= 1I;
  #L4c83b8.  goto L4c83be;
  #L4c83ba.  v3:= v6.`wc.c$j.p` @type ^`int`;
  #L4c83be.  v8:= v7 + v3 @kind int;
  #L4c83c2.  if v8 <= v1 then goto L4c83ca;
  #L4c83c6.  v0:= ~v7 @kind int;
  #L4c83c8.  return v0;
  #L4c83ca.  call temp:= `l`(v20) @signature `Lwc/d;.l:()Z` @kind virtual;
  #L4c83d0.  v9:= temp;
  #L4c83d2.  if v9 != 0 then goto L4c83ea;
  #L4c83d6.  call temp:= `b`(v19, v20) @signature `Lwc/c$j;.b:(Lwc/d;)Z` @kind virtual;
  #L4c83dc.  v9:= temp;
  #L4c83de.  if v9 == 0 then goto L4c83e4;
  #L4c83e2.  goto L4c83ea;
  #L4c83e4.  v9:= 9I;
  #L4c83e8.  goto L4c83ee;
  #L4c83ea.  v9:= v6.`wc.c$j.q` @type ^`int`;
  #L4c83ee.  v10:= v6.`wc.c$j.s` @type ^`int`;
  #L4c83f2.  call temp:= `max`(v10, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4c83f8.  v10:= temp;
  #L4c83fa.  v9:= v9 + v10 @kind int;
  #L4c83fc.  v10:= 0I;
  #L4c83fe.  v11:= 2I;
  #L4c8400.  if v4 >= v11 then goto L4c84d2;
  #L4c8404.  v9:= v9 + v7 @kind int;
  #L4c8406.  call temp:= `min`(v9, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4c840c.  v9:= temp;
  #L4c840e.  v11:= v7;
  #L4c8410.  v14:= 0L;
  #L4c8414.  if v11 >= v9 then goto L4c84a6;
  #L4c8418.  v16:= v11 + 1;
  #L4c841c.  v12:= v21 @kind object;
  #L4c8420.  call temp:= `charAt`(v12, v11) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4c8426.  v11:= temp;
  #L4c8428.  call temp:= `j`(v20) @signature `Lwc/d;.j:()Lwc/h;` @kind virtual;
  #L4c842e.  v13:= temp @kind object;
  #L4c8430.  call temp:= `b`(v13, v11) @signature `Lwc/h;.b:(C)I` @kind virtual;
  #L4c8436.  v11:= temp;
  #L4c8438.  if v11 >= 0 then goto L4c8448;
  #L4c843c.  v11:= v16 + -1;
  #L4c8440.  if v11 >= v8 then goto L4c84aa;
  #L4c8444.  v0:= ~v7 @kind int;
  #L4c8446.  return v0;
  #L4c8448.  v13:= v16 - v7 @kind int;
  #L4c844c.  v5:= 18I;
  #L4c8450.  if v13 <= v5 then goto L4c8486;
  #L4c8454.  if v10 != 0 then goto L4c8460;
  #L4c8458.  call temp:= `valueOf`(v14) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L4c845e.  v10:= temp @kind object;
  #L4c8460.  v5:= `@@java.math.BigInteger.TEN` @type ^`java.math.BigInteger` @kind object;
  #L4c8464.  call temp:= `multiply`(v10, v5) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4c846a.  v5:= temp @kind object;
  #L4c846c.  v10:= (`long`) v11 @kind i2l;
  #L4c846e.  call temp:= `valueOf`(v10) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L4c8474.  v10:= temp @kind object;
  #L4c8476.  call temp:= `add`(v5, v10) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4c847c.  v10:= temp @kind object;
  #L4c847e.  v5:= v8;
  #L4c8480.  v22:= v9;
  #L4c8484.  goto L4c8498;
  #L4c8486.  v17:= 10L;
  #L4c848a.  v14:= v14 * v17 @kind long;
  #L4c848e.  v5:= v8;
  #L4c8490.  v22:= v9;
  #L4c8494.  v8:= (`long`) v11 @kind i2l;
  #L4c8496.  v14:= v14 + v8 @kind long;
  #L4c8498.  v9:= v22;
  #L4c849c.  v8:= v5;
  #L4c849e.  v11:= v16;
  #L4c84a2.  v5:= 1I;
  #L4c84a4.  goto L4c8414;
  #L4c84a6.  v12:= v21 @kind object;
  #L4c84aa.  v5:= v8;
  #L4c84ac.  v8:= v6.`wc.c$j.s` @type ^`int`;
  #L4c84b0.  if v8 <= 0 then goto L4c84ce;
  #L4c84b4.  if v4 != 0 then goto L4c84ce;
  #L4c84b8.  v11:= v11 - v7 @kind int;
  #L4c84ba.  v11:= v11 - v8 @kind int;
  #L4c84bc.  call temp:= `max`(v3, v11) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4c84c2.  v9:= temp;
  #L4c84c4.  v4:= v4 + 1;
  #L4c84c8.  v8:= v5;
  #L4c84ca.  v5:= 1I;
  #L4c84cc.  goto L4c83fc;
  #L4c84ce.  v5:= v11;
  #L4c84d0.  goto L4c84d8;
  #L4c84d2.  v5:= v7;
  #L4c84d4.  v14:= 0L;
  #L4c84d8.  if v0 == 0 then goto L4c8534;
  #L4c84dc.  if v10 == 0 then goto L4c850e;
  #L4c84e0.  v0:= `@@java.math.BigInteger.ZERO` @type ^`java.math.BigInteger` @kind object;
  #L4c84e4.  call temp:= `equals`(v10, v0) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c84ea.  v0:= temp;
  #L4c84ec.  if v0 == 0 then goto L4c8504;
  #L4c84f0.  call temp:= `l`(v20) @signature `Lwc/d;.l:()Z` @kind virtual;
  #L4c84f6.  v0:= temp;
  #L4c84f8.  if v0 == 0 then goto L4c8504;
  #L4c84fc.  v0:= 1I;
  #L4c84fe.  v7:= v7 - v0 @kind int;
  #L4c8500.  v0:= ~v7 @kind int;
  #L4c8502.  return v0;
  #L4c8504.  call temp:= `negate`(v10) @signature `Ljava/math/BigInteger;.negate:()Ljava/math/BigInteger;` @kind virtual;
  #L4c850a.  v10:= temp @kind object;
  #L4c850c.  goto L4c856c;
  #L4c850e.  v0:= 1I;
  #L4c8510.  v1:= 0L;
  #L4c8514.  v3:= lcmp(v14, v1);
  #L4c8518.  if v3 != 0 then goto L4c852e;
  #L4c851c.  call temp:= `l`(v20) @signature `Lwc/d;.l:()Z` @kind virtual;
  #L4c8522.  v1:= temp;
  #L4c8524.  if v1 == 0 then goto L4c852e;
  #L4c8528.  v7:= v7 - v0 @kind int;
  #L4c852a.  v0:= ~v7 @kind int;
  #L4c852c.  return v0;
  #L4c852e.  v0:= -v14 @kind long;
  #L4c8530.  v2:= v0 @kind wide;
  #L4c8532.  goto L4c856e;
  #L4c8534.  v0:= v6.`wc.c$j.r` @type ^`wc.j` @kind object;
  #L4c8538.  v1:= `@@wc.j.s` @type ^`wc.j` @kind object;
  #L4c853c.  if v0 != v1 then goto L4c856c;
  #L4c8540.  call temp:= `l`(v20) @signature `Lwc/d;.l:()Z` @kind virtual;
  #L4c8546.  v0:= temp;
  #L4c8548.  if v0 == 0 then goto L4c856c;
  #L4c854c.  v0:= v5 - v7 @kind int;
  #L4c8550.  v1:= v6.`wc.c$j.p` @type ^`int`;
  #L4c8554.  if v2 == 0 then goto L4c8564;
  #L4c8558.  if v0 > v1 then goto L4c856c;
  #L4c855c.  v0:= 1I;
  #L4c855e.  v7:= v7 - v0 @kind int;
  #L4c8560.  v0:= ~v7 @kind int;
  #L4c8562.  return v0;
  #L4c8564.  if v0 <= v1 then goto L4c856c;
  #L4c8568.  v0:= ~v7 @kind int;
  #L4c856a.  return v0;
  #L4c856c.  v2:= v14 @kind wide;
  #L4c856e.  if v10 == 0 then goto L4c85ae;
  #L4c8572.  call temp:= `bitLength`(v10) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L4c8578.  v0:= temp;
  #L4c857a.  v1:= 63I;
  #L4c857e.  if v0 <= v1 then goto L4c8592;
  #L4c8582.  v0:= `@@java.math.BigInteger.TEN` @type ^`java.math.BigInteger` @kind object;
  #L4c8586.  call temp:= `divide`(v10, v0) @signature `Ljava/math/BigInteger;.divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4c858c.  v10:= temp @kind object;
  #L4c858e.  v5:= v5 + -1;
  #L4c8592.  call temp:= `longValue`(v10) @signature `Ljava/math/BigInteger;.longValue:()J` @kind virtual;
  #L4c8598.  v2:= temp @kind wide;
  #L4c859a.  v0:= v19 @kind object;
  #L4c859e.  v1:= v20 @kind object;
  #L4c85a2.  v4:= v7;
  #L4c85a4.  call temp:= `e`(v0, v1, v2, v4, v5) @signature `Lwc/c$j;.e:(Lwc/d;JII)I` @kind virtual;
  #L4c85aa.  v0:= temp;
  #L4c85ac.  return v0;
  #L4c85ae.  v0:= v19 @kind object;
  #L4c85b2.  v1:= v20 @kind object;
  #L4c85b6.  v4:= v7;
  #L4c85b8.  call temp:= `e`(v0, v1, v2, v4, v5) @signature `Lwc/c$j;.e:(Lwc/d;JII)I` @kind virtual;
  #L4c85be.  v0:= temp;
  #L4c85c0.  return v0;
}
procedure `int` `e`(`wc.c$j` v6 @kind this, `wc.d` v7 @kind object, `long` v8 , `int` v10 , `int` v11 ) @signature `Lwc/c$j;.e:(Lwc/d;JII)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c85d4.  v1:= v6.`wc.c$j.o` @type ^`yc.i` @kind object;
  #L4c85d8.  v0:= v7 @kind object;
  #L4c85da.  v2:= v8 @kind wide;
  #L4c85dc.  v4:= v10;
  #L4c85de.  v5:= v11;
  #L4c85e0.  call temp:= `o`(v0, v1, v2, v4, v5) @signature `Lwc/d;.o:(Lyc/i;JII)I` @kind virtual;
  #L4c85e6.  v7:= temp;
  #L4c85e8.  return v7;
}
procedure `wc.c$j` `f`(`wc.c$j` v8 @kind this) @signature `Lwc/c$j;.f:()Lwc/c$j;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4c87b0.  v0:= v8.`wc.c$j.s` @type ^`int`;
  #L4c87b4.  v1:= -1I;
  #L4c87b6.  if v0 != v1 then goto L4c87bc;
  #L4c87ba.  return v8 @kind object;
  #L4c87bc.  v0:= new `wc.c$j`;
  #L4c87c0.  v3:= v8.`wc.c$j.o` @type ^`yc.i` @kind object;
  #L4c87c4.  v4:= v8.`wc.c$j.p` @type ^`int`;
  #L4c87c8.  v5:= v8.`wc.c$j.q` @type ^`int`;
  #L4c87cc.  v6:= v8.`wc.c$j.r` @type ^`wc.j` @kind object;
  #L4c87d0.  v7:= -1I;
  #L4c87d2.  v2:= v0 @kind object;
  #L4c87d4.  call `<init>`(v2, v3, v4, v5, v6, v7) @signature `Lwc/c$j;.<init>:(Lyc/i;IILwc/j;I)V` @kind direct;
  #L4c87da.  return v0 @kind object;
}
procedure `wc.c$j` `g`(`wc.c$j` v7 @kind this, `int` v8 ) @signature `Lwc/c$j;.g:(I)Lwc/c$j;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c87ec.  v6:= new `wc.c$j`;
  #L4c87f0.  v1:= v7.`wc.c$j.o` @type ^`yc.i` @kind object;
  #L4c87f4.  v2:= v7.`wc.c$j.p` @type ^`int`;
  #L4c87f8.  v3:= v7.`wc.c$j.q` @type ^`int`;
  #L4c87fc.  v4:= v7.`wc.c$j.r` @type ^`wc.j` @kind object;
  #L4c8800.  v0:= v7.`wc.c$j.s` @type ^`int`;
  #L4c8804.  v5:= v0 + v8 @kind int;
  #L4c8808.  v0:= v6 @kind object;
  #L4c880a.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lwc/c$j;.<init>:(Lyc/i;IILwc/j;I)V` @kind direct;
  #L4c8810.  return v6 @kind object;
}
procedure `java.lang.String` `toString`(`wc.c$j` v5 @kind this) @signature `Lwc/c$j;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c85fc.  v0:= v5.`wc.c$j.p` @type ^`int`;
  #L4c8600.  v1:= ")" @kind object;
  #L4c8604.  v2:= "Value(" @kind object;
  #L4c8608.  v3:= 1I;
  #L4c860a.  if v0 != v3 then goto L4c8650;
  #L4c860e.  v3:= v5.`wc.c$j.q` @type ^`int`;
  #L4c8612.  v4:= 19I;
  #L4c8616.  if v3 != v4 then goto L4c8650;
  #L4c861a.  v3:= v5.`wc.c$j.r` @type ^`wc.j` @kind object;
  #L4c861e.  v4:= `@@wc.j.o` @type ^`wc.j` @kind object;
  #L4c8622.  if v3 != v4 then goto L4c8650;
  #L4c8626.  v0:= new `java.lang.StringBuilder`;
  #L4c862a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c8630.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8636.  v2:= v5.`wc.c$j.o` @type ^`yc.i` @kind object;
  #L4c863a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8640.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8646.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c864c.  v0:= temp @kind object;
  #L4c864e.  return v0 @kind object;
  #L4c8650.  v3:= v5.`wc.c$j.q` @type ^`int`;
  #L4c8654.  v4:= "," @kind object;
  #L4c8658.  if v0 != v3 then goto L4c8694;
  #L4c865c.  v0:= v5.`wc.c$j.r` @type ^`wc.j` @kind object;
  #L4c8660.  v3:= `@@wc.j.r` @type ^`wc.j` @kind object;
  #L4c8664.  if v0 != v3 then goto L4c8694;
  #L4c8668.  v0:= new `java.lang.StringBuilder`;
  #L4c866c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c8672.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8678.  v2:= v5.`wc.c$j.o` @type ^`yc.i` @kind object;
  #L4c867c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8682.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8688.  v2:= v5.`wc.c$j.p` @type ^`int`;
  #L4c868c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8692.  goto L4c8640;
  #L4c8694.  v0:= new `java.lang.StringBuilder`;
  #L4c8698.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c869e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c86a4.  v2:= v5.`wc.c$j.o` @type ^`yc.i` @kind object;
  #L4c86a8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c86ae.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c86b4.  v2:= v5.`wc.c$j.p` @type ^`int`;
  #L4c86b8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c86be.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c86c4.  v2:= v5.`wc.c$j.q` @type ^`int`;
  #L4c86c8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c86ce.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c86d4.  v2:= v5.`wc.c$j.r` @type ^`wc.j` @kind object;
  #L4c86d8.  goto L4c863a;
}
