record `wc.k$a` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`wc.k$a` v0 @kind this) @signature `Lwc/k$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cbf00.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cbf06.  return @kind void;
}
procedure `int` `a`(`wc.k$a` v0 @kind this, `java.util.Map$Entry` v1 @kind object, `java.util.Map$Entry` v2 @kind object) @signature `Lwc/k$a;.a:(Ljava/util/Map$Entry;Ljava/util/Map$Entry;)I` @AccessFlag PUBLIC {
    temp;

  #L4cbec4.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L4cbeca.  v2:= temp @kind object;
  #L4cbecc.  v2:= (`java.lang.String`) v2 @kind object;
  #L4cbed0.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4cbed6.  v2:= temp;
  #L4cbed8.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L4cbede.  v1:= temp @kind object;
  #L4cbee0.  v1:= (`java.lang.String`) v1 @kind object;
  #L4cbee4.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4cbeea.  v1:= temp;
  #L4cbeec.  v2:= v2 - v1 @kind int;
  #L4cbeee.  return v2;
}
procedure `int` `compare`(`wc.k$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lwc/k$a;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4cbea0.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L4cbea4.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L4cbea8.  call temp:= `a`(v0, v1, v2) @signature `Lwc/k$a;.a:(Ljava/util/Map$Entry;Ljava/util/Map$Entry;)I` @kind virtual;
  #L4cbeae.  v1:= temp;
  #L4cbeb0.  return v1;
}
