record `wc.c$k` @kind class @AccessFlag FINAL extends `wc.c$g` @kind interface {
  `java.lang.String` `wc.c$k.o` @AccessFlag PRIVATE_FINAL;
  `int` `wc.c$k.p` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String`[] `@@wc.c$k.q` @AccessFlag STATIC_FINAL;
global `wc.c$k` `@@wc.c$k.r` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lwc/c$k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4c8c6c.  v0:= "+HH" @kind object;
  #L4c8c70.  v1:= "+HHmm" @kind object;
  #L4c8c74.  v2:= "+HH:mm" @kind object;
  #L4c8c78.  v3:= "+HHMM" @kind object;
  #L4c8c7c.  v4:= "+HH:MM" @kind object;
  #L4c8c80.  v5:= "+HHMMss" @kind object;
  #L4c8c84.  v6:= "+HH:MM:ss" @kind object;
  #L4c8c88.  v7:= "+HHMMSS" @kind object;
  #L4c8c8c.  v8:= "+HH:MM:SS" @kind object;
  #L4c8c90.  temp:= new `java.lang.String`[v0, v1, v2, v3, v4, v5, v6, v7, v8];
  #L4c8c96.  v0:= temp @kind object;
  #L4c8c98.  `@@wc.c$k.q` @type ^`java.lang.String`[] := v0 @kind object;
  #L4c8c9c.  v0:= new `wc.c$k`;
  #L4c8ca0.  v1:= "Z" @kind object;
  #L4c8ca4.  v2:= "+HH:MM:ss" @kind object;
  #L4c8ca8.  call `<init>`(v0, v1, v2) @signature `Lwc/c$k;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4c8cae.  `@@wc.c$k.r` @type ^`wc.c$k` := v0 @kind object;
  #L4c8cb2.  return @kind void;
}
procedure `void` `<init>`(`wc.c$k` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lwc/c$k;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c8cc4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c8cca.  v0:= "noOffsetText" @kind object;
  #L4c8cce.  call temp:= `i`(v2, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c8cd4.  v0:= "pattern" @kind object;
  #L4c8cd8.  call temp:= `i`(v3, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c8cde.  v1.`wc.c$k.o` @type ^`java.lang.String` := v2 @kind object;
  #L4c8ce2.  call temp:= `a`(v1, v3) @signature `Lwc/c$k;.a:(Ljava/lang/String;)I` @kind direct;
  #L4c8ce8.  v2:= temp;
  #L4c8cea.  v1.`wc.c$k.p` @type ^`int` := v2;
  #L4c8cee.  return @kind void;
}
procedure `int` `a`(`wc.c$k` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lwc/c$k;.a:(Ljava/lang/String;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4c8a44.  v0:= 0I;
  #L4c8a46.  v1:= `@@wc.c$k.q` @type ^`java.lang.String`[] @kind object;
  #L4c8a4a.  v2:= length @variable v1;
  #L4c8a4c.  if v0 >= v2 then goto L4c8a68;
  #L4c8a50.  v1:= v1[v0] @kind object;
  #L4c8a54.  call temp:= `equals`(v1, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c8a5a.  v1:= temp;
  #L4c8a5c.  if v1 == 0 then goto L4c8a62;
  #L4c8a60.  return v0;
  #L4c8a62.  v0:= v0 + 1;
  #L4c8a66.  goto L4c8a46;
  #L4c8a68.  v0:= new `java.lang.IllegalArgumentException`;
  #L4c8a6c.  v1:= new `java.lang.StringBuilder`;
  #L4c8a70.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c8a76.  v2:= "Invalid zone offset pattern: " @kind object;
  #L4c8a7a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8a80.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8a86.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c8a8c.  v4:= temp @kind object;
  #L4c8a8e.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c8a94.  throw v0;
}
procedure `boolean` `b`(`wc.c$k` v5 @kind this, `int`[] v6 @kind object, `int` v7 , `java.lang.CharSequence` v8 @kind object, `boolean` v9 ) @signature `Lwc/c$k;.b:([IILjava/lang/CharSequence;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c8824.  v0:= v5.`wc.c$k.p` @type ^`int`;
  #L4c8828.  v1:= v0 + 3;
  #L4c882c.  v1:= v1 / 2;
  #L4c8830.  v2:= 0I;
  #L4c8832.  if v1 >= v7 then goto L4c8838;
  #L4c8836.  return v2;
  #L4c8838.  v1:= v6[v2];
  #L4c883c.  v0:= v0 %% 2;
  #L4c8840.  if v0 != 0 then goto L4c8872;
  #L4c8844.  v0:= 1I;
  #L4c8846.  if v7 <= v0 then goto L4c8872;
  #L4c884a.  v0:= v1 + 1;
  #L4c884e.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4c8854.  v3:= temp;
  #L4c8856.  if v0 > v3 then goto L4c8870;
  #L4c885a.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4c8860.  v1:= temp;
  #L4c8862.  v3:= 58I;
  #L4c8866.  if v1 == v3 then goto L4c886c;
  #L4c886a.  goto L4c8870;
  #L4c886c.  v1:= v0;
  #L4c886e.  goto L4c8872;
  #L4c8870.  return v9;
  #L4c8872.  v0:= v1 + 2;
  #L4c8876.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4c887c.  v3:= temp;
  #L4c887e.  if v0 <= v3 then goto L4c8884;
  #L4c8882.  return v9;
  #L4c8884.  v0:= v1 + 1;
  #L4c8888.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4c888e.  v1:= temp;
  #L4c8890.  v3:= v0 + 1;
  #L4c8894.  call temp:= `charAt`(v8, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4c889a.  v8:= temp;
  #L4c889c.  v0:= 48I;
  #L4c88a0.  if v1 < v0 then goto L4c88d8;
  #L4c88a4.  v4:= 57I;
  #L4c88a8.  if v1 > v4 then goto L4c88d8;
  #L4c88ac.  if v8 < v0 then goto L4c88d8;
  #L4c88b0.  if v8 <= v4 then goto L4c88b6;
  #L4c88b4.  goto L4c88d8;
  #L4c88b6.  v1:= v1 - v0 @kind int;
  #L4c88b8.  v1:= v1 * 10;
  #L4c88bc.  v8:= v8 - v0 @kind int;
  #L4c88be.  v1:= v1 + v8 @kind int;
  #L4c88c0.  if v1 < 0 then goto L4c88d8;
  #L4c88c4.  v8:= 59I;
  #L4c88c8.  if v1 <= v8 then goto L4c88ce;
  #L4c88cc.  goto L4c88d8;
  #L4c88ce.  v6[v7]:= v1;
  #L4c88d2.  v6[v2]:= v3;
  #L4c88d6.  return v2;
  #L4c88d8.  return v9;
}
procedure `boolean` `c`(`wc.c$k` v7 @kind this, `wc.f` v8 @kind object, `java.lang.StringBuilder` v9 @kind object) @signature `Lwc/c$k;.c:(Lwc/f;Ljava/lang/StringBuilder;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c88ec.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L4c88f0.  call temp:= `f`(v8, v0) @signature `Lwc/f;.f:(Lyc/i;)Ljava/lang/Long;` @kind virtual;
  #L4c88f6.  v8:= temp @kind object;
  #L4c88f8.  if v8 != 0 then goto L4c8900;
  #L4c88fc.  v8:= 0I;
  #L4c88fe.  return v8;
  #L4c8900.  call temp:= `longValue`(v8) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4c8906.  v0:= temp @kind wide;
  #L4c8908.  call temp:= `p`(v0) @signature `Lxc/d;.p:(J)I` @kind static;
  #L4c890e.  v8:= temp;
  #L4c8910.  v0:= 1I;
  #L4c8912.  if v8 != 0 then goto L4c8924;
  #L4c8916.  v8:= v7.`wc.c$k.o` @type ^`java.lang.String` @kind object;
  #L4c891a.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8920.  goto L4c8a32;
  #L4c8924.  v1:= v8 / 3600;
  #L4c8928.  v1:= v1 %% 100;
  #L4c892c.  call temp:= `abs`(v1) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L4c8932.  v1:= temp;
  #L4c8934.  v2:= v8 / 60;
  #L4c8938.  v2:= v2 %% 60;
  #L4c893c.  call temp:= `abs`(v2) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L4c8942.  v2:= temp;
  #L4c8944.  v3:= v8 %% 60;
  #L4c8948.  call temp:= `abs`(v3) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L4c894e.  v3:= temp;
  #L4c8950.  call temp:= `length`(v9) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L4c8956.  v4:= temp;
  #L4c8958.  if v8 >= 0 then goto L4c8962;
  #L4c895c.  v8:= "-" @kind object;
  #L4c8960.  goto L4c8966;
  #L4c8962.  v8:= "+" @kind object;
  #L4c8966.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c896c.  v8:= v1 / 10;
  #L4c8970.  v8:= v8 + 48;
  #L4c8974.  v8:= (`char`) v8 @kind i2c;
  #L4c8976.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c897c.  v8:= v1 %% 10;
  #L4c8980.  v8:= v8 + 48;
  #L4c8984.  v8:= (`char`) v8 @kind i2c;
  #L4c8986.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c898c.  v8:= v7.`wc.c$k.p` @type ^`int`;
  #L4c8990.  v5:= 3I;
  #L4c8992.  if v8 >= v5 then goto L4c899e;
  #L4c8996.  if v8 < v0 then goto L4c8a24;
  #L4c899a.  if v2 <= 0 then goto L4c8a24;
  #L4c899e.  v8:= v8 %% 2;
  #L4c89a2.  v5:= ":" @kind object;
  #L4c89a6.  v6:= "" @kind object;
  #L4c89aa.  if v8 != 0 then goto L4c89b2;
  #L4c89ae.  v8:= v5 @kind object;
  #L4c89b0.  goto L4c89b4;
  #L4c89b2.  v8:= v6 @kind object;
  #L4c89b4.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c89ba.  v8:= v2 / 10;
  #L4c89be.  v8:= v8 + 48;
  #L4c89c2.  v8:= (`char`) v8 @kind i2c;
  #L4c89c4.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c89ca.  v8:= v2 %% 10;
  #L4c89ce.  v8:= v8 + 48;
  #L4c89d2.  v8:= (`char`) v8 @kind i2c;
  #L4c89d4.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c89da.  v1:= v1 + v2 @kind int;
  #L4c89dc.  v8:= v7.`wc.c$k.p` @type ^`int`;
  #L4c89e0.  v2:= 7I;
  #L4c89e2.  if v8 >= v2 then goto L4c89f0;
  #L4c89e6.  v2:= 5I;
  #L4c89e8.  if v8 < v2 then goto L4c8a24;
  #L4c89ec.  if v3 <= 0 then goto L4c8a24;
  #L4c89f0.  v8:= v8 %% 2;
  #L4c89f4.  if v8 != 0 then goto L4c89fa;
  #L4c89f8.  goto L4c89fc;
  #L4c89fa.  v5:= v6 @kind object;
  #L4c89fc.  call temp:= `append`(v9, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8a02.  v8:= v3 / 10;
  #L4c8a06.  v8:= v8 + 48;
  #L4c8a0a.  v8:= (`char`) v8 @kind i2c;
  #L4c8a0c.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8a12.  v8:= v3 %% 10;
  #L4c8a16.  v8:= v8 + 48;
  #L4c8a1a.  v8:= (`char`) v8 @kind i2c;
  #L4c8a1c.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8a22.  v1:= v1 + v3 @kind int;
  #L4c8a24.  if v1 != 0 then goto L4c8a32;
  #L4c8a28.  call `setLength`(v9, v4) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L4c8a2e.  goto L4c8916;
  #L4c8a32.  return v0;
}
procedure `int` `d`(`wc.c$k` v15 @kind this, `wc.d` v16 @kind object, `java.lang.CharSequence` v17 @kind object, `int` v18 ) @signature `Lwc/c$k;.d:(Lwc/d;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4c8aa8.  v0:= v15 @kind object;
  #L4c8aaa.  v7:= v17 @kind object;
  #L4c8aae.  v8:= v18;
  #L4c8ab2.  call temp:= `length`(v17) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4c8ab8.  v1:= temp;
  #L4c8aba.  v2:= v0.`wc.c$k.o` @type ^`java.lang.String` @kind object;
  #L4c8abe.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4c8ac4.  v9:= temp;
  #L4c8ac6.  if v9 != 0 then goto L4c8aec;
  #L4c8aca.  if v8 != v1 then goto L4c8b2a;
  #L4c8ace.  v2:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L4c8ad2.  v3:= 0L;
  #L4c8ad6.  v1:= v16 @kind object;
  #L4c8ada.  v5:= v18;
  #L4c8ade.  v6:= v18;
  #L4c8ae2.  call temp:= `o`(v1, v2, v3, v5, v6) @signature `Lwc/d;.o:(Lyc/i;JII)I` @kind virtual;
  #L4c8ae8.  v1:= temp;
  #L4c8aea.  return v1;
  #L4c8aec.  if v8 != v1 then goto L4c8af4;
  #L4c8af0.  v1:= ~v8 @kind int;
  #L4c8af2.  return v1;
  #L4c8af4.  v4:= v0.`wc.c$k.o` @type ^`java.lang.String` @kind object;
  #L4c8af8.  v5:= 0I;
  #L4c8afa.  v1:= v16 @kind object;
  #L4c8afe.  v2:= v17 @kind object;
  #L4c8b02.  v3:= v18;
  #L4c8b06.  v6:= v9;
  #L4c8b08.  call temp:= `s`(v1, v2, v3, v4, v5, v6) @signature `Lwc/d;.s:(Ljava/lang/CharSequence;ILjava/lang/CharSequence;II)Z` @kind virtual;
  #L4c8b0e.  v1:= temp;
  #L4c8b10.  if v1 == 0 then goto L4c8b2a;
  #L4c8b14.  v2:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L4c8b18.  v3:= 0L;
  #L4c8b1c.  v6:= v8 + v9 @kind int;
  #L4c8b20.  v1:= v16 @kind object;
  #L4c8b24.  v5:= v18;
  #L4c8b28.  goto L4c8ae2;
  #L4c8b2a.  call temp:= `charAt`(v17, v18) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4c8b30.  v1:= temp;
  #L4c8b32.  v2:= 43I;
  #L4c8b36.  v3:= 45I;
  #L4c8b3a.  if v1 == v2 then goto L4c8b42;
  #L4c8b3e.  if v1 != v3 then goto L4c8be2;
  #L4c8b42.  v2:= 1I;
  #L4c8b44.  if v1 != v3 then goto L4c8b4c;
  #L4c8b48.  v1:= -1I;
  #L4c8b4a.  goto L4c8b4e;
  #L4c8b4c.  v1:= 1I;
  #L4c8b4e.  v3:= 4I;
  #L4c8b50.  v3:= new `int`[v3];
  #L4c8b54.  v4:= v8 + 1;
  #L4c8b58.  v5:= 0I;
  #L4c8b5a.  v3[v5]:= v4;
  #L4c8b5e.  call temp:= `b`(v15, v3, v2, v7, v2) @signature `Lwc/c$k;.b:([IILjava/lang/CharSequence;Z)Z` @kind direct;
  #L4c8b64.  v4:= temp;
  #L4c8b66.  v6:= 2I;
  #L4c8b68.  v10:= 3I;
  #L4c8b6a.  if v4 != 0 then goto L4c8b9a;
  #L4c8b6e.  v4:= v0.`wc.c$k.p` @type ^`int`;
  #L4c8b72.  if v4 < v10 then goto L4c8b7a;
  #L4c8b76.  v4:= 1I;
  #L4c8b78.  goto L4c8b7c;
  #L4c8b7a.  v4:= 0I;
  #L4c8b7c.  call temp:= `b`(v15, v3, v6, v7, v4) @signature `Lwc/c$k;.b:([IILjava/lang/CharSequence;Z)Z` @kind direct;
  #L4c8b82.  v4:= temp;
  #L4c8b84.  if v4 != 0 then goto L4c8b9a;
  #L4c8b88.  call temp:= `b`(v15, v3, v10, v7, v5) @signature `Lwc/c$k;.b:([IILjava/lang/CharSequence;Z)Z` @kind direct;
  #L4c8b8e.  v4:= temp;
  #L4c8b90.  if v4 == 0 then goto L4c8b96;
  #L4c8b94.  goto L4c8b9a;
  #L4c8b96.  v4:= 0I;
  #L4c8b98.  goto L4c8b9c;
  #L4c8b9a.  v4:= 1I;
  #L4c8b9c.  if v4 != 0 then goto L4c8be2;
  #L4c8ba0.  v11:= (`long`) v1 @kind i2l;
  #L4c8ba2.  v1:= v3[v2];
  #L4c8ba6.  v1:= (`long`) v1 @kind i2l;
  #L4c8ba8.  v13:= 3600L;
  #L4c8bac.  v1:= v1 * v13 @kind long;
  #L4c8bb0.  v4:= v3[v6];
  #L4c8bb4.  v6:= (`long`) v4 @kind i2l;
  #L4c8bb6.  v13:= 60L;
  #L4c8bba.  v6:= v6 * v13 @kind long;
  #L4c8bbe.  v1:= v1 + v6 @kind long;
  #L4c8bc0.  v4:= v3[v10];
  #L4c8bc4.  v6:= (`long`) v4 @kind i2l;
  #L4c8bc6.  v1:= v1 + v6 @kind long;
  #L4c8bc8.  v6:= v11 * v1 @kind long;
  #L4c8bcc.  v2:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L4c8bd0.  v9:= v3[v5];
  #L4c8bd4.  v1:= v16 @kind object;
  #L4c8bd8.  v3:= v6 @kind wide;
  #L4c8bda.  v5:= v18;
  #L4c8bde.  v6:= v9;
  #L4c8be0.  goto L4c8ae2;
  #L4c8be2.  if v9 != 0 then goto L4c8be8;
  #L4c8be6.  goto L4c8b14;
  #L4c8be8.  v1:= ~v8 @kind int;
  #L4c8bea.  return v1;
}
procedure `java.lang.String` `toString`(`wc.c$k` v4 @kind this) @signature `Lwc/c$k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c8bfc.  v0:= v4.`wc.c$k.o` @type ^`java.lang.String` @kind object;
  #L4c8c00.  v1:= "'" @kind object;
  #L4c8c04.  v2:= "''" @kind object;
  #L4c8c08.  call temp:= `replace`(v0, v1, v2) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L4c8c0e.  v0:= temp @kind object;
  #L4c8c10.  v1:= new `java.lang.StringBuilder`;
  #L4c8c14.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c8c1a.  v2:= "Offset(" @kind object;
  #L4c8c1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8c24.  v2:= `@@wc.c$k.q` @type ^`java.lang.String`[] @kind object;
  #L4c8c28.  v3:= v4.`wc.c$k.p` @type ^`int`;
  #L4c8c2c.  v2:= v2[v3] @kind object;
  #L4c8c30.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8c36.  v2:= ",'" @kind object;
  #L4c8c3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8c40.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8c46.  v0:= "')" @kind object;
  #L4c8c4a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8c50.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c8c56.  v0:= temp @kind object;
  #L4c8c58.  return v0 @kind object;
}
