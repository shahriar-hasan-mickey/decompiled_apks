record `wc.c$l` @kind class @AccessFlag FINAL extends `wc.c$g` @kind interface {
  `wc.c$g` `wc.c$l.o` @AccessFlag PRIVATE_FINAL;
  `int` `wc.c$l.p` @AccessFlag PRIVATE_FINAL;
  `char` `wc.c$l.q` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`wc.c$l` v0 @kind this, `wc.c$g` v1 @kind object, `int` v2 , `char` v3 ) @signature `Lwc/c$l;.<init>:(Lwc/c$g;IC)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c8ef0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c8ef6.  v0.`wc.c$l.o` @type ^`wc.c$g` := v1 @kind object;
  #L4c8efa.  v0.`wc.c$l.p` @type ^`int` := v2;
  #L4c8efe.  v0.`wc.c$l.q` @type ^`char` := v3 @kind char;
  #L4c8f02.  return @kind void;
}
procedure `boolean` `c`(`wc.c$l` v3 @kind this, `wc.f` v4 @kind object, `java.lang.StringBuilder` v5 @kind object) @signature `Lwc/c$l;.c:(Lwc/f;Ljava/lang/StringBuilder;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c8d00.  call temp:= `length`(v5) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L4c8d06.  v0:= temp;
  #L4c8d08.  v1:= v3.`wc.c$l.o` @type ^`wc.c$g` @kind object;
  #L4c8d0c.  call temp:= `c`(v1, v4, v5) @signature `Lwc/c$g;.c:(Lwc/f;Ljava/lang/StringBuilder;)Z` @kind interface;
  #L4c8d12.  v4:= temp;
  #L4c8d14.  v1:= 0I;
  #L4c8d16.  if v4 != 0 then goto L4c8d1c;
  #L4c8d1a.  return v1;
  #L4c8d1c.  call temp:= `length`(v5) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L4c8d22.  v4:= temp;
  #L4c8d24.  v4:= v4 - v0 @kind int;
  #L4c8d26.  v2:= v3.`wc.c$l.p` @type ^`int`;
  #L4c8d2a.  if v4 > v2 then goto L4c8d4c;
  #L4c8d2e.  v2:= v3.`wc.c$l.p` @type ^`int`;
  #L4c8d32.  v2:= v2 - v4 @kind int;
  #L4c8d34.  if v1 >= v2 then goto L4c8d48;
  #L4c8d38.  v2:= v3.`wc.c$l.q` @type ^`char` @kind char;
  #L4c8d3c.  call temp:= `insert`(v5, v0, v2) @signature `Ljava/lang/StringBuilder;.insert:(IC)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8d42.  v1:= v1 + 1;
  #L4c8d46.  goto L4c8d2e;
  #L4c8d48.  v4:= 1I;
  #L4c8d4a.  return v4;
  #L4c8d4c.  v5:= new `uc.b`;
  #L4c8d50.  v0:= new `java.lang.StringBuilder`;
  #L4c8d54.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c8d5a.  v1:= "Cannot print as output of " @kind object;
  #L4c8d5e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8d64.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8d6a.  v4:= " characters exceeds pad width of " @kind object;
  #L4c8d6e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8d74.  v4:= v3.`wc.c$l.p` @type ^`int`;
  #L4c8d78.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8d7e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c8d84.  v4:= temp @kind object;
  #L4c8d86.  call `<init>`(v5, v4) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c8d8c.  throw v5;
}
procedure `int` `d`(`wc.c$l` v6 @kind this, `wc.d` v7 @kind object, `java.lang.CharSequence` v8 @kind object, `int` v9 ) @signature `Lwc/c$l;.d:(Lwc/d;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c8da0.  call temp:= `l`(v7) @signature `Lwc/d;.l:()Z` @kind virtual;
  #L4c8da6.  v0:= temp;
  #L4c8da8.  call temp:= `k`(v7) @signature `Lwc/d;.k:()Z` @kind virtual;
  #L4c8dae.  v1:= temp;
  #L4c8db0.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4c8db6.  v2:= temp;
  #L4c8db8.  if v9 > v2 then goto L4c8e40;
  #L4c8dbc.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4c8dc2.  v2:= temp;
  #L4c8dc4.  if v9 != v2 then goto L4c8dcc;
  #L4c8dc8.  v7:= ~v9 @kind int;
  #L4c8dca.  return v7;
  #L4c8dcc.  v2:= v6.`wc.c$l.p` @type ^`int`;
  #L4c8dd0.  v2:= v2 + v9 @kind int;
  #L4c8dd2.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4c8dd8.  v3:= temp;
  #L4c8dda.  if v2 <= v3 then goto L4c8dee;
  #L4c8dde.  if v0 == 0 then goto L4c8de6;
  #L4c8de2.  v7:= ~v9 @kind int;
  #L4c8de4.  return v7;
  #L4c8de6.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4c8dec.  v2:= temp;
  #L4c8dee.  v3:= v9;
  #L4c8df0.  if v3 >= v2 then goto L4c8e1c;
  #L4c8df4.  call temp:= `charAt`(v8, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4c8dfa.  v4:= temp;
  #L4c8dfc.  v5:= v6.`wc.c$l.q` @type ^`char` @kind char;
  #L4c8e00.  if v1 == 0 then goto L4c8e0a;
  #L4c8e04.  if v4 != v5 then goto L4c8e1c;
  #L4c8e08.  goto L4c8e16;
  #L4c8e0a.  call temp:= `b`(v7, v4, v5) @signature `Lwc/d;.b:(CC)Z` @kind virtual;
  #L4c8e10.  v4:= temp;
  #L4c8e12.  if v4 == 0 then goto L4c8e1c;
  #L4c8e16.  v3:= v3 + 1;
  #L4c8e1a.  goto L4c8df0;
  #L4c8e1c.  v1:= 0I;
  #L4c8e1e.  call temp:= `subSequence`(v8, v1, v2) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L4c8e24.  v8:= temp @kind object;
  #L4c8e26.  v1:= v6.`wc.c$l.o` @type ^`wc.c$g` @kind object;
  #L4c8e2a.  call temp:= `d`(v1, v7, v8, v3) @signature `Lwc/c$g;.d:(Lwc/d;Ljava/lang/CharSequence;I)I` @kind interface;
  #L4c8e30.  v7:= temp;
  #L4c8e32.  if v7 == v2 then goto L4c8e3e;
  #L4c8e36.  if v0 == 0 then goto L4c8e3e;
  #L4c8e3a.  v9:= v9 + v3 @kind int;
  #L4c8e3c.  v7:= ~v9 @kind int;
  #L4c8e3e.  return v7;
  #L4c8e40.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L4c8e44.  call `<init>`(v7) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L4c8e4a.  throw v7;
}
procedure `java.lang.String` `toString`(`wc.c$l` v3 @kind this) @signature `Lwc/c$l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c8e5c.  v0:= new `java.lang.StringBuilder`;
  #L4c8e60.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c8e66.  v1:= "Pad(" @kind object;
  #L4c8e6a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8e70.  v1:= v3.`wc.c$l.o` @type ^`wc.c$g` @kind object;
  #L4c8e74.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8e7a.  v1:= "," @kind object;
  #L4c8e7e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8e84.  v1:= v3.`wc.c$l.p` @type ^`int`;
  #L4c8e88.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8e8e.  v1:= v3.`wc.c$l.q` @type ^`char` @kind char;
  #L4c8e92.  v2:= 32I;
  #L4c8e96.  if v1 != v2 then goto L4c8ea0;
  #L4c8e9a.  v1:= ")" @kind object;
  #L4c8e9e.  goto L4c8ed0;
  #L4c8ea0.  v1:= new `java.lang.StringBuilder`;
  #L4c8ea4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c8eaa.  v2:= ",'" @kind object;
  #L4c8eae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8eb4.  v2:= v3.`wc.c$l.q` @type ^`char` @kind char;
  #L4c8eb8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8ebe.  v2:= "')" @kind object;
  #L4c8ec2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8ec8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c8ece.  v1:= temp @kind object;
  #L4c8ed0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8ed6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c8edc.  v0:= temp @kind object;
  #L4c8ede.  return v0 @kind object;
}
