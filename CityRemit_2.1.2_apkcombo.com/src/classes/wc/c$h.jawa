record `wc.c$h` @kind class @AccessFlag FINAL extends `wc.c$g` @kind interface {
  `yc.i` `wc.c$h.o` @AccessFlag PRIVATE_FINAL;
  `int` `wc.c$h.p` @AccessFlag PRIVATE_FINAL;
  `int` `wc.c$h.q` @AccessFlag PRIVATE_FINAL;
  `boolean` `wc.c$h.r` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`wc.c$h` v2 @kind this, `yc.i` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lwc/c$h;.<init>:(Lyc/i;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4c7aec.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c7af2.  v0:= "field" @kind object;
  #L4c7af6.  call temp:= `i`(v3, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c7afc.  call temp:= `k`(v3) @signature `Lyc/i;.k:()Lyc/n;` @kind interface;
  #L4c7b02.  v0:= temp @kind object;
  #L4c7b04.  call temp:= `e`(v0) @signature `Lyc/n;.e:()Z` @kind virtual;
  #L4c7b0a.  v0:= temp;
  #L4c7b0c.  if v0 == 0 then goto L4c7bd6;
  #L4c7b10.  if v4 < 0 then goto L4c7ba8;
  #L4c7b14.  v0:= 9I;
  #L4c7b18.  if v4 > v0 then goto L4c7ba8;
  #L4c7b1c.  v1:= 1I;
  #L4c7b1e.  if v5 < v1 then goto L4c7b7a;
  #L4c7b22.  if v5 > v0 then goto L4c7b7a;
  #L4c7b26.  if v5 < v4 then goto L4c7b3c;
  #L4c7b2a.  v2.`wc.c$h.o` @type ^`yc.i` := v3 @kind object;
  #L4c7b2e.  v2.`wc.c$h.p` @type ^`int` := v4;
  #L4c7b32.  v2.`wc.c$h.q` @type ^`int` := v5;
  #L4c7b36.  v2.`wc.c$h.r` @type ^`boolean` := v6 @kind boolean;
  #L4c7b3a.  return @kind void;
  #L4c7b3c.  v3:= new `java.lang.IllegalArgumentException`;
  #L4c7b40.  v6:= new `java.lang.StringBuilder`;
  #L4c7b44.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c7b4a.  v0:= "Maximum width must exceed or equal the minimum width but " @kind object;
  #L4c7b4e.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7b54.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7b5a.  v5:= " < " @kind object;
  #L4c7b5e.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7b64.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7b6a.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c7b70.  v4:= temp @kind object;
  #L4c7b72.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c7b78.  throw v3;
  #L4c7b7a.  v3:= new `java.lang.IllegalArgumentException`;
  #L4c7b7e.  v4:= new `java.lang.StringBuilder`;
  #L4c7b82.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c7b88.  v6:= "Maximum width must be from 1 to 9 inclusive but was " @kind object;
  #L4c7b8c.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7b92.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7b98.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c7b9e.  v4:= temp @kind object;
  #L4c7ba0.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c7ba6.  throw v3;
  #L4c7ba8.  v3:= new `java.lang.IllegalArgumentException`;
  #L4c7bac.  v5:= new `java.lang.StringBuilder`;
  #L4c7bb0.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c7bb6.  v6:= "Minimum width must be from 0 to 9 inclusive but was " @kind object;
  #L4c7bba.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7bc0.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7bc6.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c7bcc.  v4:= temp @kind object;
  #L4c7bce.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c7bd4.  throw v3;
  #L4c7bd6.  v4:= new `java.lang.IllegalArgumentException`;
  #L4c7bda.  v5:= new `java.lang.StringBuilder`;
  #L4c7bde.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c7be4.  v6:= "Field must have a fixed set of values: " @kind object;
  #L4c7be8.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7bee.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7bf4.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c7bfa.  v3:= temp @kind object;
  #L4c7bfc.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c7c02.  throw v4;
}
procedure `long` `a`(`wc.c$h` v4 @kind this, `java.math.BigDecimal` v5 @kind object) @signature `Lwc/c$h;.a:(Ljava/math/BigDecimal;)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c7a74.  v0:= v4.`wc.c$h.o` @type ^`yc.i` @kind object;
  #L4c7a78.  call temp:= `k`(v0) @signature `Lyc/i;.k:()Lyc/n;` @kind interface;
  #L4c7a7e.  v0:= temp @kind object;
  #L4c7a80.  call temp:= `d`(v0) @signature `Lyc/n;.d:()J` @kind virtual;
  #L4c7a86.  v1:= temp @kind wide;
  #L4c7a88.  call temp:= `valueOf`(v1) @signature `Ljava/math/BigDecimal;.valueOf:(J)Ljava/math/BigDecimal;` @kind static;
  #L4c7a8e.  v1:= temp @kind object;
  #L4c7a90.  call temp:= `c`(v0) @signature `Lyc/n;.c:()J` @kind virtual;
  #L4c7a96.  v2:= temp @kind wide;
  #L4c7a98.  call temp:= `valueOf`(v2) @signature `Ljava/math/BigDecimal;.valueOf:(J)Ljava/math/BigDecimal;` @kind static;
  #L4c7a9e.  v0:= temp @kind object;
  #L4c7aa0.  call temp:= `subtract`(v0, v1) @signature `Ljava/math/BigDecimal;.subtract:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L4c7aa6.  v0:= temp @kind object;
  #L4c7aa8.  v2:= `@@java.math.BigDecimal.ONE` @type ^`java.math.BigDecimal` @kind object;
  #L4c7aac.  call temp:= `add`(v0, v2) @signature `Ljava/math/BigDecimal;.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L4c7ab2.  v0:= temp @kind object;
  #L4c7ab4.  call temp:= `multiply`(v5, v0) @signature `Ljava/math/BigDecimal;.multiply:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L4c7aba.  v5:= temp @kind object;
  #L4c7abc.  v0:= `@@java.math.RoundingMode.FLOOR` @type ^`java.math.RoundingMode` @kind object;
  #L4c7ac0.  v2:= 0I;
  #L4c7ac2.  call temp:= `setScale`(v5, v2, v0) @signature `Ljava/math/BigDecimal;.setScale:(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;` @kind virtual;
  #L4c7ac8.  v5:= temp @kind object;
  #L4c7aca.  call temp:= `add`(v5, v1) @signature `Ljava/math/BigDecimal;.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L4c7ad0.  v5:= temp @kind object;
  #L4c7ad2.  call temp:= `longValueExact`(v5) @signature `Ljava/math/BigDecimal;.longValueExact:()J` @kind virtual;
  #L4c7ad8.  v0:= temp @kind wide;
  #L4c7ada.  return v0 @kind wide;
}
procedure `java.math.BigDecimal` `b`(`wc.c$h` v4 @kind this, `long` v5 ) @signature `Lwc/c$h;.b:(J)Ljava/math/BigDecimal;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c79d8.  v0:= v4.`wc.c$h.o` @type ^`yc.i` @kind object;
  #L4c79dc.  call temp:= `k`(v0) @signature `Lyc/i;.k:()Lyc/n;` @kind interface;
  #L4c79e2.  v0:= temp @kind object;
  #L4c79e4.  v1:= v4.`wc.c$h.o` @type ^`yc.i` @kind object;
  #L4c79e8.  call temp:= `b`(v0, v5, v1) @signature `Lyc/n;.b:(JLyc/i;)J` @kind virtual;
  #L4c79ee.  call temp:= `d`(v0) @signature `Lyc/n;.d:()J` @kind virtual;
  #L4c79f4.  v1:= temp @kind wide;
  #L4c79f6.  call temp:= `valueOf`(v1) @signature `Ljava/math/BigDecimal;.valueOf:(J)Ljava/math/BigDecimal;` @kind static;
  #L4c79fc.  v1:= temp @kind object;
  #L4c79fe.  call temp:= `c`(v0) @signature `Lyc/n;.c:()J` @kind virtual;
  #L4c7a04.  v2:= temp @kind wide;
  #L4c7a06.  call temp:= `valueOf`(v2) @signature `Ljava/math/BigDecimal;.valueOf:(J)Ljava/math/BigDecimal;` @kind static;
  #L4c7a0c.  v0:= temp @kind object;
  #L4c7a0e.  call temp:= `subtract`(v0, v1) @signature `Ljava/math/BigDecimal;.subtract:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L4c7a14.  v0:= temp @kind object;
  #L4c7a16.  v2:= `@@java.math.BigDecimal.ONE` @type ^`java.math.BigDecimal` @kind object;
  #L4c7a1a.  call temp:= `add`(v0, v2) @signature `Ljava/math/BigDecimal;.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L4c7a20.  v0:= temp @kind object;
  #L4c7a22.  call temp:= `valueOf`(v5) @signature `Ljava/math/BigDecimal;.valueOf:(J)Ljava/math/BigDecimal;` @kind static;
  #L4c7a28.  v5:= temp @kind object;
  #L4c7a2a.  call temp:= `subtract`(v5, v1) @signature `Ljava/math/BigDecimal;.subtract:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L4c7a30.  v5:= temp @kind object;
  #L4c7a32.  v6:= `@@java.math.RoundingMode.FLOOR` @type ^`java.math.RoundingMode` @kind object;
  #L4c7a36.  v1:= 9I;
  #L4c7a3a.  call temp:= `divide`(v5, v0, v1, v6) @signature `Ljava/math/BigDecimal;.divide:(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;` @kind virtual;
  #L4c7a40.  v5:= temp @kind object;
  #L4c7a42.  v6:= `@@java.math.BigDecimal.ZERO` @type ^`java.math.BigDecimal` @kind object;
  #L4c7a46.  call temp:= `compareTo`(v5, v6) @signature `Ljava/math/BigDecimal;.compareTo:(Ljava/math/BigDecimal;)I` @kind virtual;
  #L4c7a4c.  v6:= temp;
  #L4c7a4e.  if v6 != 0 then goto L4c7a58;
  #L4c7a52.  v5:= `@@java.math.BigDecimal.ZERO` @type ^`java.math.BigDecimal` @kind object;
  #L4c7a56.  goto L4c7a60;
  #L4c7a58.  call temp:= `stripTrailingZeros`(v5) @signature `Ljava/math/BigDecimal;.stripTrailingZeros:()Ljava/math/BigDecimal;` @kind virtual;
  #L4c7a5e.  v5:= temp @kind object;
  #L4c7a60.  return v5 @kind object;
}
procedure `boolean` `c`(`wc.c$h` v4 @kind this, `wc.f` v5 @kind object, `java.lang.StringBuilder` v6 @kind object) @signature `Lwc/c$h;.c:(Lwc/f;Ljava/lang/StringBuilder;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c7768.  v0:= v4.`wc.c$h.o` @type ^`yc.i` @kind object;
  #L4c776c.  call temp:= `f`(v5, v0) @signature `Lwc/f;.f:(Lyc/i;)Ljava/lang/Long;` @kind virtual;
  #L4c7772.  v0:= temp @kind object;
  #L4c7774.  v1:= 0I;
  #L4c7776.  if v0 != 0 then goto L4c777c;
  #L4c777a.  return v1;
  #L4c777c.  call temp:= `d`(v5) @signature `Lwc/f;.d:()Lwc/h;` @kind virtual;
  #L4c7782.  v5:= temp @kind object;
  #L4c7784.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4c778a.  v2:= temp @kind wide;
  #L4c778c.  call temp:= `b`(v4, v2) @signature `Lwc/c$h;.b:(J)Ljava/math/BigDecimal;` @kind direct;
  #L4c7792.  v0:= temp @kind object;
  #L4c7794.  call temp:= `scale`(v0) @signature `Ljava/math/BigDecimal;.scale:()I` @kind virtual;
  #L4c779a.  v2:= temp;
  #L4c779c.  if v2 != 0 then goto L4c77da;
  #L4c77a0.  v0:= v4.`wc.c$h.p` @type ^`int`;
  #L4c77a4.  if v0 <= 0 then goto L4c783c;
  #L4c77a8.  v0:= v4.`wc.c$h.r` @type ^`boolean` @kind boolean;
  #L4c77ac.  if v0 == 0 then goto L4c77be;
  #L4c77b0.  call temp:= `c`(v5) @signature `Lwc/h;.c:()C` @kind virtual;
  #L4c77b6.  v0:= temp;
  #L4c77b8.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c77be.  v0:= v4.`wc.c$h.p` @type ^`int`;
  #L4c77c2.  if v1 >= v0 then goto L4c783c;
  #L4c77c6.  call temp:= `f`(v5) @signature `Lwc/h;.f:()C` @kind virtual;
  #L4c77cc.  v0:= temp;
  #L4c77ce.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c77d4.  v1:= v1 + 1;
  #L4c77d8.  goto L4c77be;
  #L4c77da.  call temp:= `scale`(v0) @signature `Ljava/math/BigDecimal;.scale:()I` @kind virtual;
  #L4c77e0.  v1:= temp;
  #L4c77e2.  v2:= v4.`wc.c$h.p` @type ^`int`;
  #L4c77e6.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4c77ec.  v1:= temp;
  #L4c77ee.  v2:= v4.`wc.c$h.q` @type ^`int`;
  #L4c77f2.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4c77f8.  v1:= temp;
  #L4c77fa.  v2:= `@@java.math.RoundingMode.FLOOR` @type ^`java.math.RoundingMode` @kind object;
  #L4c77fe.  call temp:= `setScale`(v0, v1, v2) @signature `Ljava/math/BigDecimal;.setScale:(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;` @kind virtual;
  #L4c7804.  v0:= temp @kind object;
  #L4c7806.  call temp:= `toPlainString`(v0) @signature `Ljava/math/BigDecimal;.toPlainString:()Ljava/lang/String;` @kind virtual;
  #L4c780c.  v0:= temp @kind object;
  #L4c780e.  v1:= 2I;
  #L4c7810.  call temp:= `substring`(v0, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L4c7816.  v0:= temp @kind object;
  #L4c7818.  call temp:= `a`(v5, v0) @signature `Lwc/h;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L4c781e.  v0:= temp @kind object;
  #L4c7820.  v1:= v4.`wc.c$h.r` @type ^`boolean` @kind boolean;
  #L4c7824.  if v1 == 0 then goto L4c7836;
  #L4c7828.  call temp:= `c`(v5) @signature `Lwc/h;.c:()C` @kind virtual;
  #L4c782e.  v5:= temp;
  #L4c7830.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7836.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c783c.  v5:= 1I;
  #L4c783e.  return v5;
}
procedure `int` `d`(`wc.c$h` v10 @kind this, `wc.d` v11 @kind object, `java.lang.CharSequence` v12 @kind object, `int` v13 ) @signature `Lwc/c$h;.d:(Lwc/d;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4c7850.  call temp:= `l`(v11) @signature `Lwc/d;.l:()Z` @kind virtual;
  #L4c7856.  v0:= temp;
  #L4c7858.  v1:= 0I;
  #L4c785a.  if v0 == 0 then goto L4c7864;
  #L4c785e.  v0:= v10.`wc.c$h.p` @type ^`int`;
  #L4c7862.  goto L4c7866;
  #L4c7864.  v0:= 0I;
  #L4c7866.  call temp:= `l`(v11) @signature `Lwc/d;.l:()Z` @kind virtual;
  #L4c786c.  v2:= temp;
  #L4c786e.  if v2 == 0 then goto L4c7878;
  #L4c7872.  v2:= v10.`wc.c$h.q` @type ^`int`;
  #L4c7876.  goto L4c787c;
  #L4c7878.  v2:= 9I;
  #L4c787c.  call temp:= `length`(v12) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4c7882.  v3:= temp;
  #L4c7884.  if v13 != v3 then goto L4c7890;
  #L4c7888.  if v0 <= 0 then goto L4c788e;
  #L4c788c.  v13:= ~v13 @kind int;
  #L4c788e.  return v13;
  #L4c7890.  v4:= v10.`wc.c$h.r` @type ^`boolean` @kind boolean;
  #L4c7894.  if v4 == 0 then goto L4c78c0;
  #L4c7898.  call temp:= `charAt`(v12, v13) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4c789e.  v4:= temp;
  #L4c78a0.  call temp:= `j`(v11) @signature `Lwc/d;.j:()Lwc/h;` @kind virtual;
  #L4c78a6.  v5:= temp @kind object;
  #L4c78a8.  call temp:= `c`(v5) @signature `Lwc/h;.c:()C` @kind virtual;
  #L4c78ae.  v5:= temp;
  #L4c78b0.  if v4 == v5 then goto L4c78bc;
  #L4c78b4.  if v0 <= 0 then goto L4c78ba;
  #L4c78b8.  v13:= ~v13 @kind int;
  #L4c78ba.  return v13;
  #L4c78bc.  v13:= v13 + 1;
  #L4c78c0.  v8:= v13;
  #L4c78c2.  v0:= v0 + v8 @kind int;
  #L4c78c4.  if v0 <= v3 then goto L4c78cc;
  #L4c78c8.  v11:= ~v8 @kind int;
  #L4c78ca.  return v11;
  #L4c78cc.  v2:= v2 + v8 @kind int;
  #L4c78ce.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4c78d4.  v13:= temp;
  #L4c78d6.  v2:= v8;
  #L4c78d8.  if v2 >= v13 then goto L4c7916;
  #L4c78dc.  v3:= v2 + 1;
  #L4c78e0.  call temp:= `charAt`(v12, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4c78e6.  v2:= temp;
  #L4c78e8.  call temp:= `j`(v11) @signature `Lwc/d;.j:()Lwc/h;` @kind virtual;
  #L4c78ee.  v4:= temp @kind object;
  #L4c78f0.  call temp:= `b`(v4, v2) @signature `Lwc/h;.b:(C)I` @kind virtual;
  #L4c78f6.  v2:= temp;
  #L4c78f8.  if v2 >= 0 then goto L4c790c;
  #L4c78fc.  if v3 >= v0 then goto L4c7904;
  #L4c7900.  v11:= ~v8 @kind int;
  #L4c7902.  return v11;
  #L4c7904.  v3:= v3 + -1;
  #L4c7908.  v9:= v3;
  #L4c790a.  goto L4c7918;
  #L4c790c.  v1:= v1 * 10;
  #L4c7910.  v1:= v1 + v2 @kind int;
  #L4c7912.  v2:= v3;
  #L4c7914.  goto L4c78d8;
  #L4c7916.  v9:= v2;
  #L4c7918.  v12:= new `java.math.BigDecimal`;
  #L4c791c.  call `<init>`(v12, v1) @signature `Ljava/math/BigDecimal;.<init>:(I)V` @kind direct;
  #L4c7922.  v13:= v9 - v8 @kind int;
  #L4c7926.  call temp:= `movePointLeft`(v12, v13) @signature `Ljava/math/BigDecimal;.movePointLeft:(I)Ljava/math/BigDecimal;` @kind virtual;
  #L4c792c.  v12:= temp @kind object;
  #L4c792e.  call temp:= `a`(v10, v12) @signature `Lwc/c$h;.a:(Ljava/math/BigDecimal;)J` @kind direct;
  #L4c7934.  v6:= temp @kind wide;
  #L4c7936.  v5:= v10.`wc.c$h.o` @type ^`yc.i` @kind object;
  #L4c793a.  v4:= v11 @kind object;
  #L4c793c.  call temp:= `o`(v4, v5, v6, v8, v9) @signature `Lwc/d;.o:(Lyc/i;JII)I` @kind virtual;
  #L4c7942.  v11:= temp;
  #L4c7944.  return v11;
}
procedure `java.lang.String` `toString`(`wc.c$h` v4 @kind this) @signature `Lwc/c$h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c7958.  v0:= v4.`wc.c$h.r` @type ^`boolean` @kind boolean;
  #L4c795c.  if v0 == 0 then goto L4c7966;
  #L4c7960.  v0:= ",DecimalPoint" @kind object;
  #L4c7964.  goto L4c796a;
  #L4c7966.  v0:= "" @kind object;
  #L4c796a.  v1:= new `java.lang.StringBuilder`;
  #L4c796e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c7974.  v2:= "Fraction(" @kind object;
  #L4c7978.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c797e.  v2:= v4.`wc.c$h.o` @type ^`yc.i` @kind object;
  #L4c7982.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7988.  v2:= "," @kind object;
  #L4c798c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c7992.  v3:= v4.`wc.c$h.p` @type ^`int`;
  #L4c7996.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c799c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c79a2.  v2:= v4.`wc.c$h.q` @type ^`int`;
  #L4c79a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c79ac.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c79b2.  v0:= ")" @kind object;
  #L4c79b6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c79bc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c79c2.  v0:= temp @kind object;
  #L4c79c4.  return v0 @kind object;
}
