record `h2.b` @kind class @AccessFlag FINAL extends `h2.g` @kind interface {
  `long` `h2.b.a` @AccessFlag PRIVATE_FINAL;
  `s3.r` `h2.b.b` @AccessFlag PRIVATE_FINAL;
  `s3.r` `h2.b.c` @AccessFlag PRIVATE_FINAL;
  `long` `h2.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`h2.b` v0 @kind this, `long` v1 , `long` v3 , `long` v5 ) @signature `Lh2/b;.<init>:(JJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L337ad0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L337ad6.  v0.`h2.b.d` @type ^`long` := v1 @kind wide;
  #L337ada.  v0.`h2.b.a` @type ^`long` := v5 @kind wide;
  #L337ade.  v1:= new `s3.r`;
  #L337ae2.  call `<init>`(v1) @signature `Ls3/r;.<init>:()V` @kind direct;
  #L337ae8.  v0.`h2.b.b` @type ^`s3.r` := v1 @kind object;
  #L337aec.  v2:= new `s3.r`;
  #L337af0.  call `<init>`(v2) @signature `Ls3/r;.<init>:()V` @kind direct;
  #L337af6.  v0.`h2.b.c` @type ^`s3.r` := v2 @kind object;
  #L337afa.  v5:= 0L;
  #L337afe.  call `a`(v1, v5) @signature `Ls3/r;.a:(J)V` @kind virtual;
  #L337b04.  call `a`(v2, v3) @signature `Ls3/r;.a:(J)V` @kind virtual;
  #L337b0a.  return @kind void;
}
procedure `boolean` `a`(`h2.b` v4 @kind this, `long` v5 ) @signature `Lh2/b;.a:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L337a34.  v0:= v4.`h2.b.b` @type ^`s3.r` @kind object;
  #L337a38.  call temp:= `c`(v0) @signature `Ls3/r;.c:()I` @kind virtual;
  #L337a3e.  v1:= temp;
  #L337a40.  v2:= 1I;
  #L337a42.  v1:= v1 - v2 @kind int;
  #L337a44.  call temp:= `b`(v0, v1) @signature `Ls3/r;.b:(I)J` @kind virtual;
  #L337a4a.  v0:= temp @kind wide;
  #L337a4c.  v5:= v5 - v0 @kind long;
  #L337a4e.  v0:= 100000L;
  #L337a54.  v3:= lcmp(v5, v0);
  #L337a58.  if v3 >= 0 then goto L337a5e;
  #L337a5c.  goto L337a60;
  #L337a5e.  v2:= 0I;
  #L337a60.  return v2;
}
procedure `void` `b`(`h2.b` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lh2/b;.b:(JJ)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L337b1c.  call temp:= `a`(v1, v2) @signature `Lh2/b;.a:(J)Z` @kind virtual;
  #L337b22.  v0:= temp;
  #L337b24.  if v0 == 0 then goto L337b2a;
  #L337b28.  return @kind void;
  #L337b2a.  v0:= v1.`h2.b.b` @type ^`s3.r` @kind object;
  #L337b2e.  call `a`(v0, v2) @signature `Ls3/r;.a:(J)V` @kind virtual;
  #L337b34.  v2:= v1.`h2.b.c` @type ^`s3.r` @kind object;
  #L337b38.  call `a`(v2, v4) @signature `Ls3/r;.a:(J)V` @kind virtual;
  #L337b3e.  return @kind void;
}
procedure `long` `c`(`h2.b` v2 @kind this, `long` v3 ) @signature `Lh2/b;.c:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L337aa4.  v0:= v2.`h2.b.c` @type ^`s3.r` @kind object;
  #L337aa8.  v1:= 1I;
  #L337aaa.  call temp:= `g`(v0, v3, v1, v1) @signature `Ls3/l0;.g:(Ls3/r;JZZ)I` @kind static;
  #L337ab0.  v3:= temp;
  #L337ab2.  v4:= v2.`h2.b.b` @type ^`s3.r` @kind object;
  #L337ab6.  call temp:= `b`(v4, v3) @signature `Ls3/r;.b:(I)J` @kind virtual;
  #L337abc.  v3:= temp @kind wide;
  #L337abe.  return v3 @kind wide;
}
procedure `void` `d`(`h2.b` v0 @kind this, `long` v1 ) @signature `Lh2/b;.d:(J)V` @AccessFlag  {
    temp;

  #L337b50.  v0.`h2.b.d` @type ^`long` := v1 @kind wide;
  #L337b54.  return @kind void;
}
procedure `long` `e`(`h2.b` v2 @kind this) @signature `Lh2/b;.e:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L337a74.  v0:= v2.`h2.b.a` @type ^`long` @kind wide;
  #L337a78.  return v0 @kind wide;
}
procedure `boolean` `f`(`h2.b` v1 @kind this) @signature `Lh2/b;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L337a20.  v0:= 1I;
  #L337a22.  return v0;
}
procedure `a2.a0$a` `h`(`h2.b` v7 @kind this, `long` v8 ) @signature `Lh2/b;.h:(J)La2/a0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L337984.  v0:= v7.`h2.b.b` @type ^`s3.r` @kind object;
  #L337988.  v1:= 1I;
  #L33798a.  call temp:= `g`(v0, v8, v1, v1) @signature `Ls3/l0;.g:(Ls3/r;JZZ)I` @kind static;
  #L337990.  v0:= temp;
  #L337992.  v2:= new `a2.b0`;
  #L337996.  v3:= v7.`h2.b.b` @type ^`s3.r` @kind object;
  #L33799a.  call temp:= `b`(v3, v0) @signature `Ls3/r;.b:(I)J` @kind virtual;
  #L3379a0.  v3:= temp @kind wide;
  #L3379a2.  v5:= v7.`h2.b.c` @type ^`s3.r` @kind object;
  #L3379a6.  call temp:= `b`(v5, v0) @signature `Ls3/r;.b:(I)J` @kind virtual;
  #L3379ac.  v5:= temp @kind wide;
  #L3379ae.  call `<init>`(v2, v3, v5) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L3379b4.  v3:= v2.`a2.b0.a` @type ^`long` @kind wide;
  #L3379b8.  v5:= lcmp(v3, v8);
  #L3379bc.  if v5 == 0 then goto L337a04;
  #L3379c0.  v8:= v7.`h2.b.b` @type ^`s3.r` @kind object;
  #L3379c4.  call temp:= `c`(v8) @signature `Ls3/r;.c:()I` @kind virtual;
  #L3379ca.  v8:= temp;
  #L3379cc.  v8:= v8 - v1 @kind int;
  #L3379ce.  if v0 != v8 then goto L3379d4;
  #L3379d2.  goto L337a04;
  #L3379d4.  v8:= new `a2.b0`;
  #L3379d8.  v9:= v7.`h2.b.b` @type ^`s3.r` @kind object;
  #L3379dc.  v0:= v0 + v1 @kind int;
  #L3379de.  call temp:= `b`(v9, v0) @signature `Ls3/r;.b:(I)J` @kind virtual;
  #L3379e4.  v3:= temp @kind wide;
  #L3379e6.  v9:= v7.`h2.b.c` @type ^`s3.r` @kind object;
  #L3379ea.  call temp:= `b`(v9, v0) @signature `Ls3/r;.b:(I)J` @kind virtual;
  #L3379f0.  v0:= temp @kind wide;
  #L3379f2.  call `<init>`(v8, v3, v0) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L3379f8.  v9:= new `a2.a0$a`;
  #L3379fc.  call `<init>`(v9, v2, v8) @signature `La2/a0$a;.<init>:(La2/b0;La2/b0;)V` @kind direct;
  #L337a02.  return v9 @kind object;
  #L337a04.  v8:= new `a2.a0$a`;
  #L337a08.  call `<init>`(v8, v2) @signature `La2/a0$a;.<init>:(La2/b0;)V` @kind direct;
  #L337a0e.  return v8 @kind object;
}
procedure `long` `i`(`h2.b` v2 @kind this) @signature `Lh2/b;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L337a8c.  v0:= v2.`h2.b.d` @type ^`long` @kind wide;
  #L337a90.  return v0 @kind wide;
}
