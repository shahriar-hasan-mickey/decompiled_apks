record `a4.m` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.UnsupportedOperationException` @kind class {
  `z3.d` `a4.m.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a4.m` v0 @kind this, `z3.d` v1 @kind object) @signature `La4/m;.<init>:(Lz3/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15d630.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L15d636.  v0.`a4.m.o` @type ^`z3.d` := v1 @kind object;
  #L15d63a.  return @kind void;
}
procedure `java.lang.String` `getMessage`(`a4.m` v2 @kind this) @signature `La4/m;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15d604.  v0:= v2.`a4.m.o` @type ^`z3.d` @kind object;
  #L15d608.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L15d60e.  v0:= temp @kind object;
  #L15d610.  v1:= "Missing " @kind object;
  #L15d614.  call temp:= `concat`(v1, v0) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L15d61a.  v0:= temp @kind object;
  #L15d61c.  return v0 @kind object;
}
