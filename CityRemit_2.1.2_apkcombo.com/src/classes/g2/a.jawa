record `g2.a` @kind class @AccessFlag FINAL extends `g2.c` @kind interface {
  `byte`[] `g2.a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `g2.a.b` @AccessFlag PRIVATE_FINAL;
  `g2.g` `g2.a.c` @AccessFlag PRIVATE_FINAL;
  `g2.b` `g2.a.d` @AccessFlag PRIVATE;
  `int` `g2.a.e` @AccessFlag PRIVATE;
  `int` `g2.a.f` @AccessFlag PRIVATE;
  `long` `g2.a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`g2.a` v1 @kind this) @signature `Lg2/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L31be7c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L31be82.  v0:= 8I;
  #L31be86.  v0:= new `byte`[v0];
  #L31be8a.  v1.`g2.a.a` @type ^`byte`[] := v0 @kind object;
  #L31be8e.  v0:= new `java.util.ArrayDeque`;
  #L31be92.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L31be98.  v1.`g2.a.b` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L31be9c.  v0:= new `g2.g`;
  #L31bea0.  call `<init>`(v0) @signature `Lg2/g;.<init>:()V` @kind direct;
  #L31bea6.  v1.`g2.a.c` @type ^`g2.g` := v0 @kind object;
  #L31beaa.  return @kind void;
}
procedure `long` `a`(`g2.a` v4 @kind this, `a2.m` v5 @kind object) @signature `Lg2/a;.a:(La2/m;)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L31bdc8.  call `i`(v5) @signature `La2/m;.i:()V` @kind interface;
  #L31bdce.  v0:= v4.`g2.a.a` @type ^`byte`[] @kind object;
  #L31bdd2.  v1:= 0I;
  #L31bdd4.  v2:= 4I;
  #L31bdd6.  call `o`(v5, v0, v1, v2) @signature `La2/m;.o:([BII)V` @kind interface;
  #L31bddc.  v0:= v4.`g2.a.a` @type ^`byte`[] @kind object;
  #L31bde0.  v0:= v0[v1] @kind byte;
  #L31bde4.  call temp:= `c`(v0) @signature `Lg2/g;.c:(I)I` @kind static;
  #L31bdea.  v0:= temp;
  #L31bdec.  v3:= -1I;
  #L31bdee.  if v0 == v3 then goto L31be1e;
  #L31bdf2.  if v0 > v2 then goto L31be1e;
  #L31bdf6.  v2:= v4.`g2.a.a` @type ^`byte`[] @kind object;
  #L31bdfa.  call temp:= `a`(v2, v0, v1) @signature `Lg2/g;.a:([BIZ)J` @kind static;
  #L31be00.  v1:= temp @kind wide;
  #L31be02.  v2:= (`int`) v1 @kind l2i;
  #L31be04.  v1:= v4.`g2.a.d` @type ^`g2.b` @kind object;
  #L31be08.  call temp:= `e`(v1, v2) @signature `Lg2/b;.e:(I)Z` @kind interface;
  #L31be0e.  v1:= temp;
  #L31be10.  if v1 == 0 then goto L31be1e;
  #L31be14.  call `j`(v5, v0) @signature `La2/m;.j:(I)V` @kind interface;
  #L31be1a.  v0:= (`long`) v2 @kind i2l;
  #L31be1c.  return v0 @kind wide;
  #L31be1e.  v0:= 1I;
  #L31be20.  call `j`(v5, v0) @signature `La2/m;.j:(I)V` @kind interface;
  #L31be26.  goto L31bdce;
}
procedure `double` `e`(`g2.a` v2 @kind this, `a2.m` v3 @kind object, `int` v4 ) @signature `Lg2/a;.e:(La2/m;I)D` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L31bd48.  call temp:= `f`(v2, v3, v4) @signature `Lg2/a;.f:(La2/m;I)J` @kind direct;
  #L31bd4e.  v0:= temp @kind wide;
  #L31bd50.  v3:= 4I;
  #L31bd52.  if v4 != v3 then goto L31bd64;
  #L31bd56.  v3:= (`int`) v0 @kind l2i;
  #L31bd58.  call temp:= `intBitsToFloat`(v3) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L31bd5e.  v3:= temp;
  #L31bd60.  v3:= (`double`) v3 @kind f2d;
  #L31bd62.  goto L31bd6c;
  #L31bd64.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L31bd6a.  v3:= temp @kind wide;
  #L31bd6c.  return v3 @kind wide;
}
procedure `long` `f`(`g2.a` v6 @kind this, `a2.m` v7 @kind object, `int` v8 ) @signature `Lg2/a;.f:(La2/m;I)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L31be38.  v0:= v6.`g2.a.a` @type ^`byte`[] @kind object;
  #L31be3c.  v1:= 0I;
  #L31be3e.  call `readFully`(v7, v0, v1, v8) @signature `La2/m;.readFully:([BII)V` @kind interface;
  #L31be44.  v2:= 0L;
  #L31be48.  if v1 >= v8 then goto L31be68;
  #L31be4c.  v7:= 8I;
  #L31be50.  v2:= v2 ^< v7 @kind long;
  #L31be52.  v7:= v6.`g2.a.a` @type ^`byte`[] @kind object;
  #L31be56.  v7:= v7[v1] @kind byte;
  #L31be5a.  v7:= v7 ^& 255;
  #L31be5e.  v4:= (`long`) v7 @kind i2l;
  #L31be60.  v2:= v2 ^| v4 @kind long;
  #L31be62.  v1:= v1 + 1;
  #L31be66.  goto L31be48;
  #L31be68.  return v2 @kind wide;
}
procedure `java.lang.String` `g`(`a2.m` v2 @kind object, `int` v3 ) @signature `Lg2/a;.g:(La2/m;I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L31bd80.  if v3 != 0 then goto L31bd8a;
  #L31bd84.  v2:= "" @kind object;
  #L31bd88.  return v2 @kind object;
  #L31bd8a.  v0:= new `byte`[v3];
  #L31bd8e.  v1:= 0I;
  #L31bd90.  call `readFully`(v2, v0, v1, v3) @signature `La2/m;.readFully:([BII)V` @kind interface;
  #L31bd96.  if v3 <= 0 then goto L31bdac;
  #L31bd9a.  v2:= v3 + -1;
  #L31bd9e.  v2:= v0[v2] @kind byte;
  #L31bda2.  if v2 != 0 then goto L31bdac;
  #L31bda6.  v3:= v3 + -1;
  #L31bdaa.  goto L31bd96;
  #L31bdac.  v2:= new `java.lang.String`;
  #L31bdb0.  call `<init>`(v2, v0, v1, v3) @signature `Ljava/lang/String;.<init>:([BII)V` @kind direct;
  #L31bdb6.  return v2 @kind object;
}
procedure `boolean` `b`(`g2.a` v12 @kind this, `a2.m` v13 @kind object) @signature `Lg2/a;.b:(La2/m;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L31ba88.  v0:= v12.`g2.a.d` @type ^`g2.b` @kind object;
  #L31ba8c.  call temp:= `h`(v0) @signature `Ls3/a;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L31ba92.  v0:= v12.`g2.a.b` @type ^`java.util.ArrayDeque` @kind object;
  #L31ba96.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L31ba9c.  v0:= temp @kind object;
  #L31ba9e.  v0:= (`g2.a$b`) v0 @kind object;
  #L31baa2.  v1:= 1I;
  #L31baa4.  if v0 == 0 then goto L31bae4;
  #L31baa8.  call temp:= `q`(v13) @signature `La2/m;.q:()J` @kind interface;
  #L31baae.  v2:= temp @kind wide;
  #L31bab0.  call temp:= `a`(v0) @signature `Lg2/a$b;.a:(Lg2/a$b;)J` @kind static;
  #L31bab6.  v4:= temp @kind wide;
  #L31bab8.  v0:= lcmp(v2, v4);
  #L31babc.  if v0 < 0 then goto L31bae4;
  #L31bac0.  v13:= v12.`g2.a.d` @type ^`g2.b` @kind object;
  #L31bac4.  v0:= v12.`g2.a.b` @type ^`java.util.ArrayDeque` @kind object;
  #L31bac8.  call temp:= `pop`(v0) @signature `Ljava/util/ArrayDeque;.pop:()Ljava/lang/Object;` @kind virtual;
  #L31bace.  v0:= temp @kind object;
  #L31bad0.  v0:= (`g2.a$b`) v0 @kind object;
  #L31bad4.  call temp:= `b`(v0) @signature `Lg2/a$b;.b:(Lg2/a$b;)I` @kind static;
  #L31bada.  v0:= temp;
  #L31badc.  call `a`(v13, v0) @signature `Lg2/b;.a:(I)V` @kind interface;
  #L31bae2.  return v1;
  #L31bae4.  v0:= v12.`g2.a.e` @type ^`int`;
  #L31bae8.  v2:= 4I;
  #L31baea.  v3:= 0I;
  #L31baec.  if v0 != 0 then goto L31bb28;
  #L31baf0.  v0:= v12.`g2.a.c` @type ^`g2.g` @kind object;
  #L31baf4.  call temp:= `d`(v0, v13, v1, v3, v2) @signature `Lg2/g;.d:(La2/m;ZZI)J` @kind virtual;
  #L31bafa.  v4:= temp @kind wide;
  #L31bafc.  v6:= -2L;
  #L31bb00.  v0:= lcmp(v4, v6);
  #L31bb04.  if v0 != 0 then goto L31bb10;
  #L31bb08.  call temp:= `a`(v12, v13) @signature `Lg2/a;.a:(La2/m;)J` @kind direct;
  #L31bb0e.  v4:= temp @kind wide;
  #L31bb10.  v6:= -1L;
  #L31bb14.  v0:= lcmp(v4, v6);
  #L31bb18.  if v0 != 0 then goto L31bb1e;
  #L31bb1c.  return v3;
  #L31bb1e.  v0:= (`int`) v4 @kind l2i;
  #L31bb20.  v12.`g2.a.f` @type ^`int` := v0;
  #L31bb24.  v12.`g2.a.e` @type ^`int` := v1;
  #L31bb28.  v0:= v12.`g2.a.e` @type ^`int`;
  #L31bb2c.  v4:= 2I;
  #L31bb2e.  if v0 != v1 then goto L31bb4a;
  #L31bb32.  v0:= v12.`g2.a.c` @type ^`g2.g` @kind object;
  #L31bb36.  v5:= 8I;
  #L31bb3a.  call temp:= `d`(v0, v13, v3, v1, v5) @signature `Lg2/g;.d:(La2/m;ZZI)J` @kind virtual;
  #L31bb40.  v5:= temp @kind wide;
  #L31bb42.  v12.`g2.a.g` @type ^`long` := v5 @kind wide;
  #L31bb46.  v12.`g2.a.e` @type ^`int` := v4;
  #L31bb4a.  v0:= v12.`g2.a.d` @type ^`g2.b` @kind object;
  #L31bb4e.  v5:= v12.`g2.a.f` @type ^`int`;
  #L31bb52.  call temp:= `b`(v0, v5) @signature `Lg2/b;.b:(I)I` @kind interface;
  #L31bb58.  v0:= temp;
  #L31bb5a.  if v0 == 0 then goto L31bd22;
  #L31bb5e.  v5:= 0I;
  #L31bb60.  if v0 == v1 then goto L31bce4;
  #L31bb64.  v6:= 8L;
  #L31bb68.  if v0 == v4 then goto L31bc8a;
  #L31bb6c.  v4:= 3I;
  #L31bb6e.  if v0 == v4 then goto L31bc2a;
  #L31bb72.  if v0 == v2 then goto L31bc10;
  #L31bb76.  v2:= 5I;
  #L31bb78.  if v0 != v2 then goto L31bbe4;
  #L31bb7c.  v8:= v12.`g2.a.g` @type ^`long` @kind wide;
  #L31bb80.  v10:= 4L;
  #L31bb84.  v0:= lcmp(v8, v10);
  #L31bb88.  if v0 == 0 then goto L31bbc6;
  #L31bb8c.  v0:= lcmp(v8, v6);
  #L31bb90.  if v0 != 0 then goto L31bb96;
  #L31bb94.  goto L31bbc6;
  #L31bb96.  v13:= new `java.lang.StringBuilder`;
  #L31bb9a.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L31bba0.  v0:= "Invalid float size: " @kind object;
  #L31bba4.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31bbaa.  v0:= v12.`g2.a.g` @type ^`long` @kind wide;
  #L31bbae.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L31bbb4.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31bbba.  v13:= temp @kind object;
  #L31bbbc.  call temp:= `a`(v13, v5) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L31bbc2.  v13:= temp @kind object;
  #L31bbc4.  throw v13;
  #L31bbc6.  v0:= v12.`g2.a.d` @type ^`g2.b` @kind object;
  #L31bbca.  v2:= v12.`g2.a.f` @type ^`int`;
  #L31bbce.  v4:= (`int`) v8 @kind l2i;
  #L31bbd0.  call temp:= `e`(v12, v13, v4) @signature `Lg2/a;.e:(La2/m;I)D` @kind direct;
  #L31bbd6.  v4:= temp @kind wide;
  #L31bbd8.  call `c`(v0, v2, v4) @signature `Lg2/b;.c:(ID)V` @kind interface;
  #L31bbde.  v12.`g2.a.e` @type ^`int` := v3;
  #L31bbe2.  return v1;
  #L31bbe4.  v13:= new `java.lang.StringBuilder`;
  #L31bbe8.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L31bbee.  v1:= "Invalid element type " @kind object;
  #L31bbf2.  call temp:= `append`(v13, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31bbf8.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L31bbfe.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31bc04.  v13:= temp @kind object;
  #L31bc06.  call temp:= `a`(v13, v5) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L31bc0c.  v13:= temp @kind object;
  #L31bc0e.  throw v13;
  #L31bc10.  v0:= v12.`g2.a.d` @type ^`g2.b` @kind object;
  #L31bc14.  v2:= v12.`g2.a.f` @type ^`int`;
  #L31bc18.  v4:= v12.`g2.a.g` @type ^`long` @kind wide;
  #L31bc1c.  v5:= (`int`) v4 @kind l2i;
  #L31bc1e.  call `d`(v0, v2, v5, v13) @signature `Lg2/b;.d:(IILa2/m;)V` @kind interface;
  #L31bc24.  v12.`g2.a.e` @type ^`int` := v3;
  #L31bc28.  return v1;
  #L31bc2a.  v6:= v12.`g2.a.g` @type ^`long` @kind wide;
  #L31bc2e.  v8:= 2147483647L;
  #L31bc34.  v0:= lcmp(v6, v8);
  #L31bc38.  if v0 > 0 then goto L31bc5a;
  #L31bc3c.  v0:= v12.`g2.a.d` @type ^`g2.b` @kind object;
  #L31bc40.  v2:= v12.`g2.a.f` @type ^`int`;
  #L31bc44.  v4:= (`int`) v6 @kind l2i;
  #L31bc46.  call temp:= `g`(v13, v4) @signature `Lg2/a;.g:(La2/m;I)Ljava/lang/String;` @kind static;
  #L31bc4c.  v13:= temp @kind object;
  #L31bc4e.  call `f`(v0, v2, v13) @signature `Lg2/b;.f:(ILjava/lang/String;)V` @kind interface;
  #L31bc54.  v12.`g2.a.e` @type ^`int` := v3;
  #L31bc58.  return v1;
  #L31bc5a.  v13:= new `java.lang.StringBuilder`;
  #L31bc5e.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L31bc64.  v0:= "String element size: " @kind object;
  #L31bc68.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31bc6e.  v0:= v12.`g2.a.g` @type ^`long` @kind wide;
  #L31bc72.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L31bc78.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31bc7e.  v13:= temp @kind object;
  #L31bc80.  call temp:= `a`(v13, v5) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L31bc86.  v13:= temp @kind object;
  #L31bc88.  throw v13;
  #L31bc8a.  v8:= v12.`g2.a.g` @type ^`long` @kind wide;
  #L31bc8e.  v0:= lcmp(v8, v6);
  #L31bc92.  if v0 > 0 then goto L31bcb4;
  #L31bc96.  v0:= v12.`g2.a.d` @type ^`g2.b` @kind object;
  #L31bc9a.  v2:= v12.`g2.a.f` @type ^`int`;
  #L31bc9e.  v4:= (`int`) v8 @kind l2i;
  #L31bca0.  call temp:= `f`(v12, v13, v4) @signature `Lg2/a;.f:(La2/m;I)J` @kind direct;
  #L31bca6.  v4:= temp @kind wide;
  #L31bca8.  call `h`(v0, v2, v4) @signature `Lg2/b;.h:(IJ)V` @kind interface;
  #L31bcae.  v12.`g2.a.e` @type ^`int` := v3;
  #L31bcb2.  return v1;
  #L31bcb4.  v13:= new `java.lang.StringBuilder`;
  #L31bcb8.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L31bcbe.  v0:= "Invalid integer size: " @kind object;
  #L31bcc2.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31bcc8.  v0:= v12.`g2.a.g` @type ^`long` @kind wide;
  #L31bccc.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L31bcd2.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31bcd8.  v13:= temp @kind object;
  #L31bcda.  call temp:= `a`(v13, v5) @signature `Lv1/e2;.a:(Ljava/lang/String;Ljava/lang/Throwable;)Lv1/e2;` @kind static;
  #L31bce0.  v13:= temp @kind object;
  #L31bce2.  throw v13;
  #L31bce4.  call temp:= `q`(v13) @signature `La2/m;.q:()J` @kind interface;
  #L31bcea.  v6:= temp @kind wide;
  #L31bcec.  v8:= v12.`g2.a.g` @type ^`long` @kind wide;
  #L31bcf0.  v8:= v8 + v6 @kind long;
  #L31bcf2.  v13:= v12.`g2.a.b` @type ^`java.util.ArrayDeque` @kind object;
  #L31bcf6.  v0:= new `g2.a$b`;
  #L31bcfa.  v2:= v12.`g2.a.f` @type ^`int`;
  #L31bcfe.  call `<init>`(v0, v2, v8, v5) @signature `Lg2/a$b;.<init>:(IJLg2/a$a;)V` @kind direct;
  #L31bd04.  call `push`(v13, v0) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L31bd0a.  v4:= v12.`g2.a.d` @type ^`g2.b` @kind object;
  #L31bd0e.  v5:= v12.`g2.a.f` @type ^`int`;
  #L31bd12.  v8:= v12.`g2.a.g` @type ^`long` @kind wide;
  #L31bd16.  call `g`(v4, v5, v6, v8) @signature `Lg2/b;.g:(IJJ)V` @kind interface;
  #L31bd1c.  v12.`g2.a.e` @type ^`int` := v3;
  #L31bd20.  return v1;
  #L31bd22.  v0:= v12.`g2.a.g` @type ^`long` @kind wide;
  #L31bd26.  v1:= (`int`) v0 @kind l2i;
  #L31bd28.  call `j`(v13, v1) @signature `La2/m;.j:(I)V` @kind interface;
  #L31bd2e.  v12.`g2.a.e` @type ^`int` := v3;
  #L31bd32.  goto L31ba92;
}
procedure `void` `c`(`g2.a` v1 @kind this) @signature `Lg2/a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31bed4.  v0:= 0I;
  #L31bed6.  v1.`g2.a.e` @type ^`int` := v0;
  #L31beda.  v0:= v1.`g2.a.b` @type ^`java.util.ArrayDeque` @kind object;
  #L31bede.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L31bee4.  v0:= v1.`g2.a.c` @type ^`g2.g` @kind object;
  #L31bee8.  call `e`(v0) @signature `Lg2/g;.e:()V` @kind virtual;
  #L31beee.  return @kind void;
}
procedure `void` `d`(`g2.a` v0 @kind this, `g2.b` v1 @kind object) @signature `Lg2/a;.d:(Lg2/b;)V` @AccessFlag PUBLIC {
    temp;

  #L31bebc.  v0.`g2.a.d` @type ^`g2.b` := v1 @kind object;
  #L31bec0.  return @kind void;
}
