record `x6.i0` @kind class @AccessFlag PUBLIC extends `x6.j` @kind interface {
  `java.util.HashMap` `x6.i0.a` @AccessFlag FINAL;
}
global `x6.i0` `@@x6.i0.b` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lx6/i0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ef3cc.  v0:= new `x6.i0`;
  #L4ef3d0.  call `<init>`(v0) @signature `Lx6/i0;.<init>:()V` @kind direct;
  #L4ef3d6.  `@@x6.i0.b` @type ^`x6.i0` := v0 @kind object;
  #L4ef3da.  return @kind void;
}
procedure `void` `<init>`(`x6.i0` v1 @kind this) @signature `Lx6/i0;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4ef3ec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ef3f2.  v0:= new `java.util.HashMap`;
  #L4ef3f6.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L4ef3fc.  v1.`x6.i0.a` @type ^`java.util.HashMap` := v0 @kind object;
  #L4ef400.  return @kind void;
}
procedure `x6.i0` `b`() @signature `Lx6/i0;.b:()Lx6/i0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ef6e4.  v0:= `@@x6.i0.b` @type ^`x6.i0` @kind object;
  #L4ef6e8.  return v0 @kind object;
}
procedure `void` `d`(`x6.i0` v6 @kind this, `x6.i` v7 @kind object) @signature `Lx6/i0;.d:(Lx6/i;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ef4f8.  v0:= v6.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef4fc.  @monitorenter v0
  #L4ef4fe.  v1:= v6.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef502.  call temp:= `get`(v1, v7) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ef508.  v1:= temp @kind object;
  #L4ef50a.  v1:= (`java.util.List`) v1 @kind object;
  #L4ef50e.  v2:= 1I;
  #L4ef510.  v3:= 0I;
  #L4ef512.  v4:= 0I;
  #L4ef514.  if v1 == 0 then goto L4ef558;
  #L4ef518.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ef51e.  v5:= temp;
  #L4ef520.  if v4 >= v5 then goto L4ef540;
  #L4ef524.  call temp:= `get`(v1, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4ef52a.  v5:= temp @kind object;
  #L4ef52c.  if v5 != v7 then goto L4ef53a;
  #L4ef530.  call temp:= `remove`(v1, v4) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L4ef536.  v4:= 1I;
  #L4ef538.  goto L4ef542;
  #L4ef53a.  v4:= v4 + 1;
  #L4ef53e.  goto L4ef518;
  #L4ef540.  v4:= 0I;
  #L4ef542.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4ef548.  v1:= temp;
  #L4ef54a.  if v1 == 0 then goto L4ef558;
  #L4ef54e.  v1:= v6.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef552.  call temp:= `remove`(v1, v7) @signature `Ljava/util/HashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ef558.  if v4 != 0 then goto L4ef56c;
  #L4ef55c.  call temp:= `g`(v7) @signature `Lx6/i;.g:()Z` @kind virtual;
  #L4ef562.  v1:= temp;
  #L4ef564.  if v1 != 0 then goto L4ef56a;
  #L4ef568.  goto L4ef56c;
  #L4ef56a.  v2:= 0I;
  #L4ef56c.  call `f`(v2) @signature `La7/m;.f:(Z)V` @kind static;
  #L4ef572.  call temp:= `e`(v7) @signature `Lx6/i;.e:()Lc7/i;` @kind virtual;
  #L4ef578.  v1:= temp @kind object;
  #L4ef57a.  call temp:= `f`(v1) @signature `Lc7/i;.f:()Z` @kind virtual;
  #L4ef580.  v1:= temp;
  #L4ef582.  if v1 != 0 then goto L4ef5f6;
  #L4ef586.  call temp:= `e`(v7) @signature `Lx6/i;.e:()Lc7/i;` @kind virtual;
  #L4ef58c.  v1:= temp @kind object;
  #L4ef58e.  call temp:= `e`(v1) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L4ef594.  v1:= temp @kind object;
  #L4ef596.  call temp:= `a`(v1) @signature `Lc7/i;.a:(Lx6/l;)Lc7/i;` @kind static;
  #L4ef59c.  v1:= temp @kind object;
  #L4ef59e.  call temp:= `a`(v7, v1) @signature `Lx6/i;.a:(Lc7/i;)Lx6/i;` @kind virtual;
  #L4ef5a4.  v1:= temp @kind object;
  #L4ef5a6.  v2:= v6.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef5aa.  call temp:= `get`(v2, v1) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ef5b0.  v2:= temp @kind object;
  #L4ef5b2.  v2:= (`java.util.List`) v2 @kind object;
  #L4ef5b6.  if v2 == 0 then goto L4ef5f6;
  #L4ef5ba.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ef5c0.  v4:= temp;
  #L4ef5c2.  if v3 >= v4 then goto L4ef5e0;
  #L4ef5c6.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4ef5cc.  v4:= temp @kind object;
  #L4ef5ce.  if v4 != v7 then goto L4ef5da;
  #L4ef5d2.  call temp:= `remove`(v2, v3) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L4ef5d8.  goto L4ef5e0;
  #L4ef5da.  v3:= v3 + 1;
  #L4ef5de.  goto L4ef5ba;
  #L4ef5e0.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4ef5e6.  v7:= temp;
  #L4ef5e8.  if v7 == 0 then goto L4ef5f6;
  #L4ef5ec.  v7:= v6.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef5f0.  call temp:= `remove`(v7, v1) @signature `Ljava/util/HashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ef5f6.  @monitorexit v0
  #L4ef5f8.  return @kind void;
  #L4ef5fa.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef5fc.  @monitorexit v0
  #L4ef5fe.  throw v7;
  catch `java.lang.Throwable` @[L4ef4fe..L4ef5fe] goto L4ef5fa;
}
procedure `void` `a`(`x6.i0` v0 @kind this, `x6.i` v1 @kind object) @signature `Lx6/i0;.a:(Lx6/i;)V` @AccessFlag PUBLIC {
    temp;

  #L4ef414.  call `d`(v0, v1) @signature `Lx6/i0;.d:(Lx6/i;)V` @kind direct;
  #L4ef41a.  return @kind void;
}
procedure `void` `c`(`x6.i0` v4 @kind this, `x6.i` v5 @kind object) @signature `Lx6/i0;.c:(Lx6/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ef42c.  v0:= v4.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef430.  @monitorenter v0
  #L4ef432.  v1:= v4.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef436.  call temp:= `get`(v1, v5) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ef43c.  v1:= temp @kind object;
  #L4ef43e.  v1:= (`java.util.List`) v1 @kind object;
  #L4ef442.  if v1 != 0 then goto L4ef45a;
  #L4ef446.  v1:= new `java.util.ArrayList`;
  #L4ef44a.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ef450.  v2:= v4.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef454.  call temp:= `put`(v2, v5, v1) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ef45a.  call temp:= `add`(v1, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ef460.  call temp:= `e`(v5) @signature `Lx6/i;.e:()Lc7/i;` @kind virtual;
  #L4ef466.  v1:= temp @kind object;
  #L4ef468.  call temp:= `f`(v1) @signature `Lc7/i;.f:()Z` @kind virtual;
  #L4ef46e.  v1:= temp;
  #L4ef470.  if v1 != 0 then goto L4ef4c2;
  #L4ef474.  call temp:= `e`(v5) @signature `Lx6/i;.e:()Lc7/i;` @kind virtual;
  #L4ef47a.  v1:= temp @kind object;
  #L4ef47c.  call temp:= `e`(v1) @signature `Lc7/i;.e:()Lx6/l;` @kind virtual;
  #L4ef482.  v1:= temp @kind object;
  #L4ef484.  call temp:= `a`(v1) @signature `Lc7/i;.a:(Lx6/l;)Lc7/i;` @kind static;
  #L4ef48a.  v1:= temp @kind object;
  #L4ef48c.  call temp:= `a`(v5, v1) @signature `Lx6/i;.a:(Lc7/i;)Lx6/i;` @kind virtual;
  #L4ef492.  v1:= temp @kind object;
  #L4ef494.  v2:= v4.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef498.  call temp:= `get`(v2, v1) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ef49e.  v2:= temp @kind object;
  #L4ef4a0.  v2:= (`java.util.List`) v2 @kind object;
  #L4ef4a4.  if v2 != 0 then goto L4ef4bc;
  #L4ef4a8.  v2:= new `java.util.ArrayList`;
  #L4ef4ac.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ef4b2.  v3:= v4.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef4b6.  call temp:= `put`(v3, v1, v2) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ef4bc.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ef4c2.  v1:= 1I;
  #L4ef4c4.  call `j`(v5, v1) @signature `Lx6/i;.j:(Z)V` @kind virtual;
  #L4ef4ca.  call `k`(v5, v4) @signature `Lx6/i;.k:(Lx6/j;)V` @kind virtual;
  #L4ef4d0.  @monitorexit v0
  #L4ef4d2.  return @kind void;
  #L4ef4d4.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef4d6.  @monitorexit v0
  #L4ef4d8.  throw v5;
  catch `java.lang.Throwable` @[L4ef432..L4ef4d8] goto L4ef4d4;
}
procedure `void` `e`(`x6.i0` v5 @kind this, `x6.i` v6 @kind object) @signature `Lx6/i0;.e:(Lx6/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ef61c.  v0:= v5.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef620.  @monitorenter v0
  #L4ef622.  v1:= v5.`x6.i0.a` @type ^`java.util.HashMap` @kind object;
  #L4ef626.  call temp:= `get`(v1, v6) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ef62c.  v1:= temp @kind object;
  #L4ef62e.  v1:= (`java.util.List`) v1 @kind object;
  #L4ef632.  if v1 == 0 then goto L4ef6be;
  #L4ef636.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4ef63c.  v2:= temp;
  #L4ef63e.  if v2 != 0 then goto L4ef6be;
  #L4ef642.  call temp:= `e`(v6) @signature `Lx6/i;.e:()Lc7/i;` @kind virtual;
  #L4ef648.  v6:= temp @kind object;
  #L4ef64a.  call temp:= `f`(v6) @signature `Lc7/i;.f:()Z` @kind virtual;
  #L4ef650.  v6:= temp;
  #L4ef652.  if v6 == 0 then goto L4ef6aa;
  #L4ef656.  v6:= new `java.util.HashSet`;
  #L4ef65a.  call `<init>`(v6) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L4ef660.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ef666.  v2:= temp;
  #L4ef668.  v2:= v2 + -1;
  #L4ef66c.  if v2 < 0 then goto L4ef6be;
  #L4ef670.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4ef676.  v3:= temp @kind object;
  #L4ef678.  v3:= (`x6.i`) v3 @kind object;
  #L4ef67c.  call temp:= `e`(v3) @signature `Lx6/i;.e:()Lc7/i;` @kind virtual;
  #L4ef682.  v4:= temp @kind object;
  #L4ef684.  call temp:= `contains`(v6, v4) @signature `Ljava/util/HashSet;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ef68a.  v4:= temp;
  #L4ef68c.  if v4 != 0 then goto L4ef6a4;
  #L4ef690.  call temp:= `e`(v3) @signature `Lx6/i;.e:()Lc7/i;` @kind virtual;
  #L4ef696.  v4:= temp @kind object;
  #L4ef698.  call temp:= `add`(v6, v4) @signature `Ljava/util/HashSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ef69e.  call `l`(v3) @signature `Lx6/i;.l:()V` @kind virtual;
  #L4ef6a4.  v2:= v2 + -1;
  #L4ef6a8.  goto L4ef66c;
  #L4ef6aa.  v6:= 0I;
  #L4ef6ac.  call temp:= `get`(v1, v6) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4ef6b2.  v6:= temp @kind object;
  #L4ef6b4.  v6:= (`x6.i`) v6 @kind object;
  #L4ef6b8.  call `l`(v6) @signature `Lx6/i;.l:()V` @kind virtual;
  #L4ef6be.  @monitorexit v0
  #L4ef6c0.  return @kind void;
  #L4ef6c2.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef6c4.  @monitorexit v0
  #L4ef6c6.  throw v6;
  catch `java.lang.Throwable` @[L4ef622..L4ef6c6] goto L4ef6c2;
}
