record `x6.d0` @kind class @AccessFlag PUBLIC {
  `java.util.List` `x6.d0.a` @AccessFlag PRIVATE_FINAL;
  `int` `x6.d0.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x6.d0` v3 @kind this, `x6.l` v4 @kind object) @signature `Lx6/d0;.<init>:(Lx6/l;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4ee2a4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ee2aa.  v0:= new `java.util.ArrayList`;
  #L4ee2ae.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ee2b4.  v3.`x6.d0.a` @type ^`java.util.List` := v0 @kind object;
  #L4ee2b8.  v0:= 0I;
  #L4ee2ba.  v3.`x6.d0.b` @type ^`int` := v0;
  #L4ee2be.  call temp:= `iterator`(v4) @signature `Lx6/l;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4ee2c4.  v4:= temp @kind object;
  #L4ee2c6.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ee2cc.  v1:= temp;
  #L4ee2ce.  if v1 == 0 then goto L4ee2f2;
  #L4ee2d2.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ee2d8.  v1:= temp @kind object;
  #L4ee2da.  v1:= (`f7.b`) v1 @kind object;
  #L4ee2de.  v2:= v3.`x6.d0.a` @type ^`java.util.List` @kind object;
  #L4ee2e2.  call temp:= `d`(v1) @signature `Lf7/b;.d:()Ljava/lang/String;` @kind virtual;
  #L4ee2e8.  v1:= temp @kind object;
  #L4ee2ea.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ee2f0.  goto L4ee2c6;
  #L4ee2f2.  v4:= v3.`x6.d0.a` @type ^`java.util.List` @kind object;
  #L4ee2f6.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ee2fc.  v4:= temp;
  #L4ee2fe.  v1:= 1I;
  #L4ee300.  call temp:= `max`(v1, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4ee306.  v4:= temp;
  #L4ee308.  v3.`x6.d0.b` @type ^`int` := v4;
  #L4ee30c.  v4:= v3.`x6.d0.a` @type ^`java.util.List` @kind object;
  #L4ee310.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ee316.  v4:= temp;
  #L4ee318.  if v0 >= v4 then goto L4ee344;
  #L4ee31c.  v4:= v3.`x6.d0.b` @type ^`int`;
  #L4ee320.  v1:= v3.`x6.d0.a` @type ^`java.util.List` @kind object;
  #L4ee324.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4ee32a.  v1:= temp @kind object;
  #L4ee32c.  v1:= (`java.lang.CharSequence`) v1 @kind object;
  #L4ee330.  call temp:= `f`(v1) @signature `Lx6/d0;.f:(Ljava/lang/CharSequence;)I` @kind static;
  #L4ee336.  v1:= temp;
  #L4ee338.  v4:= v4 + v1 @kind int;
  #L4ee33a.  v3.`x6.d0.b` @type ^`int` := v4;
  #L4ee33e.  v0:= v0 + 1;
  #L4ee342.  goto L4ee30c;
  #L4ee344.  call `a`(v3) @signature `Lx6/d0;.a:()V` @kind direct;
  #L4ee34a.  return @kind void;
}
procedure `void` `a`(`x6.d0` v3 @kind this) @signature `Lx6/d0;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4ee35c.  v0:= v3.`x6.d0.b` @type ^`int`;
  #L4ee360.  v1:= 768I;
  #L4ee364.  if v0 > v1 then goto L4ee3b4;
  #L4ee368.  v0:= v3.`x6.d0.a` @type ^`java.util.List` @kind object;
  #L4ee36c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ee372.  v0:= temp;
  #L4ee374.  v1:= 32I;
  #L4ee378.  if v0 > v1 then goto L4ee37e;
  #L4ee37c.  return @kind void;
  #L4ee37e.  v0:= new `s6.c`;
  #L4ee382.  v1:= new `java.lang.StringBuilder`;
  #L4ee386.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ee38c.  v2:= "Path specified exceeds the maximum depth that can be written (32) or object contains a cycle " @kind object;
  #L4ee390.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee396.  call temp:= `e`(v3) @signature `Lx6/d0;.e:()Ljava/lang/String;` @kind direct;
  #L4ee39c.  v2:= temp @kind object;
  #L4ee39e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee3a4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ee3aa.  v1:= temp @kind object;
  #L4ee3ac.  call `<init>`(v0, v1) @signature `Ls6/c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ee3b2.  throw v0;
  #L4ee3b4.  v0:= new `s6.c`;
  #L4ee3b8.  v1:= new `java.lang.StringBuilder`;
  #L4ee3bc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ee3c2.  v2:= "Data has a key path longer than 768 bytes (" @kind object;
  #L4ee3c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee3cc.  v2:= v3.`x6.d0.b` @type ^`int`;
  #L4ee3d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee3d6.  v2:= ")." @kind object;
  #L4ee3da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee3e0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ee3e6.  v1:= temp @kind object;
  #L4ee3e8.  call `<init>`(v0, v1) @signature `Ls6/c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ee3ee.  throw v0;
}
procedure `java.lang.String` `b`(`java.lang.String` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lx6/d0;.b:(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4ee190.  v0:= new `java.lang.StringBuilder`;
  #L4ee194.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ee19a.  v1:= 0I;
  #L4ee19c.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ee1a2.  v2:= temp;
  #L4ee1a4.  if v1 >= v2 then goto L4ee1ca;
  #L4ee1a8.  if v1 <= 0 then goto L4ee1b2;
  #L4ee1ac.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee1b2.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4ee1b8.  v2:= temp @kind object;
  #L4ee1ba.  v2:= (`java.lang.String`) v2 @kind object;
  #L4ee1be.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee1c4.  v1:= v1 + 1;
  #L4ee1c8.  goto L4ee19c;
  #L4ee1ca.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ee1d0.  v3:= temp @kind object;
  #L4ee1d2.  return v3 @kind object;
}
procedure `java.lang.String` `c`(`x6.d0` v3 @kind this) @signature `Lx6/d0;.c:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4ee1e4.  v0:= v3.`x6.d0.a` @type ^`java.util.List` @kind object;
  #L4ee1e8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ee1ee.  v1:= temp;
  #L4ee1f0.  v1:= v1 + -1;
  #L4ee1f4.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L4ee1fa.  v0:= temp @kind object;
  #L4ee1fc.  v0:= (`java.lang.String`) v0 @kind object;
  #L4ee200.  v1:= v3.`x6.d0.b` @type ^`int`;
  #L4ee204.  call temp:= `f`(v0) @signature `Lx6/d0;.f:(Ljava/lang/CharSequence;)I` @kind static;
  #L4ee20a.  v2:= temp;
  #L4ee20c.  v1:= v1 - v2 @kind int;
  #L4ee20e.  v3.`x6.d0.b` @type ^`int` := v1;
  #L4ee212.  v1:= v3.`x6.d0.a` @type ^`java.util.List` @kind object;
  #L4ee216.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ee21c.  v1:= temp;
  #L4ee21e.  if v1 <= 0 then goto L4ee22e;
  #L4ee222.  v1:= v3.`x6.d0.b` @type ^`int`;
  #L4ee226.  v1:= v1 + -1;
  #L4ee22a.  v3.`x6.d0.b` @type ^`int` := v1;
  #L4ee22e.  return v0 @kind object;
}
procedure `void` `d`(`x6.d0` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lx6/d0;.d:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4ee400.  v0:= v1.`x6.d0.a` @type ^`java.util.List` @kind object;
  #L4ee404.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ee40a.  v0:= temp;
  #L4ee40c.  if v0 <= 0 then goto L4ee41c;
  #L4ee410.  v0:= v1.`x6.d0.b` @type ^`int`;
  #L4ee414.  v0:= v0 + 1;
  #L4ee418.  v1.`x6.d0.b` @type ^`int` := v0;
  #L4ee41c.  v0:= v1.`x6.d0.a` @type ^`java.util.List` @kind object;
  #L4ee420.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ee426.  v0:= v1.`x6.d0.b` @type ^`int`;
  #L4ee42a.  call temp:= `f`(v2) @signature `Lx6/d0;.f:(Ljava/lang/CharSequence;)I` @kind static;
  #L4ee430.  v2:= temp;
  #L4ee432.  v0:= v0 + v2 @kind int;
  #L4ee434.  v1.`x6.d0.b` @type ^`int` := v0;
  #L4ee438.  call `a`(v1) @signature `Lx6/d0;.a:()V` @kind direct;
  #L4ee43e.  return @kind void;
}
procedure `java.lang.String` `e`(`x6.d0` v3 @kind this) @signature `Lx6/d0;.e:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4ee240.  v0:= v3.`x6.d0.a` @type ^`java.util.List` @kind object;
  #L4ee244.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ee24a.  v0:= temp;
  #L4ee24c.  if v0 != 0 then goto L4ee256;
  #L4ee250.  v0:= "" @kind object;
  #L4ee254.  return v0 @kind object;
  #L4ee256.  v0:= new `java.lang.StringBuilder`;
  #L4ee25a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ee260.  v1:= "in path '" @kind object;
  #L4ee264.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee26a.  v1:= v3.`x6.d0.a` @type ^`java.util.List` @kind object;
  #L4ee26e.  v2:= "/" @kind object;
  #L4ee272.  call temp:= `b`(v2, v1) @signature `Lx6/d0;.b:(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;` @kind static;
  #L4ee278.  v1:= temp @kind object;
  #L4ee27a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee280.  v1:= "'" @kind object;
  #L4ee284.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee28a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ee290.  v0:= temp @kind object;
  #L4ee292.  return v0 @kind object;
}
procedure `int` `f`(`java.lang.CharSequence` v5 @kind object) @signature `Lx6/d0;.f:(Ljava/lang/CharSequence;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ee128.  call temp:= `length`(v5) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4ee12e.  v0:= temp;
  #L4ee130.  v1:= 0I;
  #L4ee132.  v2:= 0I;
  #L4ee134.  if v1 >= v0 then goto L4ee17c;
  #L4ee138.  call temp:= `charAt`(v5, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4ee13e.  v3:= temp;
  #L4ee140.  v4:= 127I;
  #L4ee144.  if v3 > v4 then goto L4ee14e;
  #L4ee148.  v2:= v2 + 1;
  #L4ee14c.  goto L4ee176;
  #L4ee14e.  v4:= 2047I;
  #L4ee152.  if v3 > v4 then goto L4ee15c;
  #L4ee156.  v2:= v2 + 2;
  #L4ee15a.  goto L4ee176;
  #L4ee15c.  call temp:= `isHighSurrogate`(v3) @signature `Ljava/lang/Character;.isHighSurrogate:(C)Z` @kind static;
  #L4ee162.  v3:= temp;
  #L4ee164.  if v3 == 0 then goto L4ee172;
  #L4ee168.  v2:= v2 + 4;
  #L4ee16c.  v1:= v1 + 1;
  #L4ee170.  goto L4ee176;
  #L4ee172.  v2:= v2 + 3;
  #L4ee176.  v1:= v1 + 1;
  #L4ee17a.  goto L4ee134;
  #L4ee17c.  return v2;
}
procedure `void` `g`(`x6.l` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lx6/d0;.g:(Lx6/l;Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ee450.  v0:= new `x6.d0`;
  #L4ee454.  call `<init>`(v0, v1) @signature `Lx6/d0;.<init>:(Lx6/l;)V` @kind direct;
  #L4ee45a.  call `h`(v0, v2) @signature `Lx6/d0;.h:(Ljava/lang/Object;)V` @kind direct;
  #L4ee460.  return @kind void;
}
procedure `void` `h`(`x6.d0` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lx6/d0;.h:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4ee474.  v0:= instanceof @variable v4 @type ^`java.util.Map` @kind boolean;
  #L4ee478.  if v0 == 0 then goto L4ee4d8;
  #L4ee47c.  v4:= (`java.util.Map`) v4 @kind object;
  #L4ee480.  call temp:= `keySet`(v4) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L4ee486.  v0:= temp @kind object;
  #L4ee488.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ee48e.  v0:= temp @kind object;
  #L4ee490.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ee496.  v1:= temp;
  #L4ee498.  if v1 == 0 then goto L4ee4d6;
  #L4ee49c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ee4a2.  v1:= temp @kind object;
  #L4ee4a4.  v1:= (`java.lang.String`) v1 @kind object;
  #L4ee4a8.  v2:= "." @kind object;
  #L4ee4ac.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4ee4b2.  v2:= temp;
  #L4ee4b4.  if v2 == 0 then goto L4ee4ba;
  #L4ee4b8.  goto L4ee490;
  #L4ee4ba.  call `d`(v3, v1) @signature `Lx6/d0;.d:(Ljava/lang/String;)V` @kind direct;
  #L4ee4c0.  call temp:= `get`(v4, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ee4c6.  v1:= temp @kind object;
  #L4ee4c8.  call `h`(v3, v1) @signature `Lx6/d0;.h:(Ljava/lang/Object;)V` @kind direct;
  #L4ee4ce.  call temp:= `c`(v3) @signature `Lx6/d0;.c:()Ljava/lang/String;` @kind direct;
  #L4ee4d4.  goto L4ee490;
  #L4ee4d6.  return @kind void;
  #L4ee4d8.  v0:= instanceof @variable v4 @type ^`java.util.List` @kind boolean;
  #L4ee4dc.  if v0 == 0 then goto L4ee51a;
  #L4ee4e0.  v4:= (`java.util.List`) v4 @kind object;
  #L4ee4e4.  v0:= 0I;
  #L4ee4e6.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ee4ec.  v1:= temp;
  #L4ee4ee.  if v0 >= v1 then goto L4ee51a;
  #L4ee4f2.  call temp:= `toString`(v0) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L4ee4f8.  v1:= temp @kind object;
  #L4ee4fa.  call `d`(v3, v1) @signature `Lx6/d0;.d:(Ljava/lang/String;)V` @kind direct;
  #L4ee500.  call temp:= `get`(v4, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4ee506.  v1:= temp @kind object;
  #L4ee508.  call `h`(v3, v1) @signature `Lx6/d0;.h:(Ljava/lang/Object;)V` @kind direct;
  #L4ee50e.  call temp:= `c`(v3) @signature `Lx6/d0;.c:()Ljava/lang/String;` @kind direct;
  #L4ee514.  v0:= v0 + 1;
  #L4ee518.  goto L4ee4e6;
  #L4ee51a.  return @kind void;
}
