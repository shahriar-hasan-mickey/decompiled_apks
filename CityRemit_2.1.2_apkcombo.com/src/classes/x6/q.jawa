record `x6.q` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `x6.q.a` @AccessFlag PUBLIC;
  `boolean` `x6.q.b` @AccessFlag PUBLIC;
  `java.lang.String` `x6.q.c` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`x6.q` v0 @kind this) @signature `Lx6/q;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4e8bfc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e8c02.  return @kind void;
}
procedure `void` `a`(`x6.q` v2 @kind this, `k7.a` v3 @kind object) @signature `Lx6/q;.a:(Lk7/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e8c14.  if v3 != 0 then goto L4e8c1a;
  #L4e8c18.  return @kind void;
  #L4e8c1a.  v0:= new `java.lang.StringBuilder`;
  #L4e8c1e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e8c24.  call temp:= `a`(v3) @signature `Lk7/a;.a:()Ljava/lang/String;` @kind virtual;
  #L4e8c2a.  v1:= temp @kind object;
  #L4e8c2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8c32.  v1:= ":" @kind object;
  #L4e8c36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8c3c.  call temp:= `b`(v3) @signature `Lk7/a;.b:()I` @kind virtual;
  #L4e8c42.  v3:= temp;
  #L4e8c44.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8c4a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e8c50.  v3:= temp @kind object;
  #L4e8c52.  v2.`x6.q.a` @type ^`java.lang.String` := v3 @kind object;
  #L4e8c56.  v3:= 0I;
  #L4e8c58.  v2.`x6.q.b` @type ^`boolean` := v3 @kind boolean;
  #L4e8c5c.  return @kind void;
}
procedure `boolean` `equals`(`x6.q` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lx6/q;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e8af8.  if v3 != v4 then goto L4e8b00;
  #L4e8afc.  v4:= 1I;
  #L4e8afe.  return v4;
  #L4e8b00.  v0:= 0I;
  #L4e8b02.  if v4 == 0 then goto L4e8b52;
  #L4e8b06.  v1:= constclass @type ^`x6.q` @kind object;
  #L4e8b0a.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4e8b10.  v2:= temp @kind object;
  #L4e8b12.  if v1 == v2 then goto L4e8b18;
  #L4e8b16.  goto L4e8b52;
  #L4e8b18.  v4:= (`x6.q`) v4 @kind object;
  #L4e8b1c.  v1:= v3.`x6.q.b` @type ^`boolean` @kind boolean;
  #L4e8b20.  v2:= v4.`x6.q.b` @type ^`boolean` @kind boolean;
  #L4e8b24.  if v1 == v2 then goto L4e8b2a;
  #L4e8b28.  return v0;
  #L4e8b2a.  v1:= v3.`x6.q.a` @type ^`java.lang.String` @kind object;
  #L4e8b2e.  v2:= v4.`x6.q.a` @type ^`java.lang.String` @kind object;
  #L4e8b32.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e8b38.  v1:= temp;
  #L4e8b3a.  if v1 != 0 then goto L4e8b40;
  #L4e8b3e.  return v0;
  #L4e8b40.  v0:= v3.`x6.q.c` @type ^`java.lang.String` @kind object;
  #L4e8b44.  v4:= v4.`x6.q.c` @type ^`java.lang.String` @kind object;
  #L4e8b48.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e8b4e.  v4:= temp;
  #L4e8b50.  return v4;
  #L4e8b52.  return v0;
}
procedure `int` `hashCode`(`x6.q` v2 @kind this) @signature `Lx6/q;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e8b64.  v0:= v2.`x6.q.a` @type ^`java.lang.String` @kind object;
  #L4e8b68.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L4e8b6e.  v0:= temp;
  #L4e8b70.  v0:= v0 * 31;
  #L4e8b74.  v1:= v2.`x6.q.b` @type ^`boolean` @kind boolean;
  #L4e8b78.  v0:= v0 + v1 @kind int;
  #L4e8b7a.  v0:= v0 * 31;
  #L4e8b7e.  v1:= v2.`x6.q.c` @type ^`java.lang.String` @kind object;
  #L4e8b82.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L4e8b88.  v1:= temp;
  #L4e8b8a.  v0:= v0 + v1 @kind int;
  #L4e8b8c.  return v0;
}
procedure `java.lang.String` `toString`(`x6.q` v2 @kind this) @signature `Lx6/q;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e8ba0.  v0:= new `java.lang.StringBuilder`;
  #L4e8ba4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e8baa.  v1:= "http" @kind object;
  #L4e8bae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8bb4.  v1:= v2.`x6.q.b` @type ^`boolean` @kind boolean;
  #L4e8bb8.  if v1 == 0 then goto L4e8bc2;
  #L4e8bbc.  v1:= "s" @kind object;
  #L4e8bc0.  goto L4e8bc6;
  #L4e8bc2.  v1:= "" @kind object;
  #L4e8bc6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8bcc.  v1:= "://" @kind object;
  #L4e8bd0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8bd6.  v1:= v2.`x6.q.a` @type ^`java.lang.String` @kind object;
  #L4e8bda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8be0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e8be6.  v0:= temp @kind object;
  #L4e8be8.  return v0 @kind object;
}
