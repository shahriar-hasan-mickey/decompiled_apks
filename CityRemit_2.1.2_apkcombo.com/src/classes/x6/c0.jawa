record `x6.c0` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `x6.c0.a` @AccessFlag PRIVATE_FINAL;
  `x6.l` `x6.c0.b` @AccessFlag PRIVATE_FINAL;
  `f7.n` `x6.c0.c` @AccessFlag PRIVATE_FINAL;
  `x6.b` `x6.c0.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `x6.c0.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`x6.c0` v0 @kind this, `long` v1 , `x6.l` v3 @kind object, `f7.n` v4 @kind object, `boolean` v5 ) @signature `Lx6/c0;.<init>:(JLx6/l;Lf7/n;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ee084.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ee08a.  v0.`x6.c0.a` @type ^`long` := v1 @kind wide;
  #L4ee08e.  v0.`x6.c0.b` @type ^`x6.l` := v3 @kind object;
  #L4ee092.  v0.`x6.c0.c` @type ^`f7.n` := v4 @kind object;
  #L4ee096.  v1:= 0I;
  #L4ee098.  v0.`x6.c0.d` @type ^`x6.b` := v1 @kind object;
  #L4ee09c.  v0.`x6.c0.e` @type ^`boolean` := v5 @kind boolean;
  #L4ee0a0.  return @kind void;
}
procedure `void` `<init>`(`x6.c0` v0 @kind this, `long` v1 , `x6.l` v3 @kind object, `x6.b` v4 @kind object) @signature `Lx6/c0;.<init>:(JLx6/l;Lx6/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ee0b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ee0ba.  v0.`x6.c0.a` @type ^`long` := v1 @kind wide;
  #L4ee0be.  v0.`x6.c0.b` @type ^`x6.l` := v3 @kind object;
  #L4ee0c2.  v1:= 0I;
  #L4ee0c4.  v0.`x6.c0.c` @type ^`f7.n` := v1 @kind object;
  #L4ee0c8.  v0.`x6.c0.d` @type ^`x6.b` := v4 @kind object;
  #L4ee0cc.  v1:= 1I;
  #L4ee0ce.  v0.`x6.c0.e` @type ^`boolean` := v1 @kind boolean;
  #L4ee0d2.  return @kind void;
}
procedure `x6.b` `a`(`x6.c0` v2 @kind this) @signature `Lx6/c0;.a:()Lx6/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ee0e4.  v0:= v2.`x6.c0.d` @type ^`x6.b` @kind object;
  #L4ee0e8.  if v0 == 0 then goto L4ee0ee;
  #L4ee0ec.  return v0 @kind object;
  #L4ee0ee.  v0:= new `java.lang.IllegalArgumentException`;
  #L4ee0f2.  v1:= "Can't access merge when write is an overwrite!" @kind object;
  #L4ee0f6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ee0fc.  throw v0;
}
procedure `f7.n` `b`(`x6.c0` v2 @kind this) @signature `Lx6/c0;.b:()Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4edf28.  v0:= v2.`x6.c0.c` @type ^`f7.n` @kind object;
  #L4edf2c.  if v0 == 0 then goto L4edf32;
  #L4edf30.  return v0 @kind object;
  #L4edf32.  v0:= new `java.lang.IllegalArgumentException`;
  #L4edf36.  v1:= "Can't access overwrite when write is a merge!" @kind object;
  #L4edf3a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4edf40.  throw v0;
}
procedure `x6.l` `c`(`x6.c0` v1 @kind this) @signature `Lx6/c0;.c:()Lx6/l;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ee110.  v0:= v1.`x6.c0.b` @type ^`x6.l` @kind object;
  #L4ee114.  return v0 @kind object;
}
procedure `long` `d`(`x6.c0` v2 @kind this) @signature `Lx6/c0;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ee06c.  v0:= v2.`x6.c0.a` @type ^`long` @kind wide;
  #L4ee070.  return v0 @kind wide;
}
procedure `boolean` `e`(`x6.c0` v1 @kind this) @signature `Lx6/c0;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4edef0.  v0:= v1.`x6.c0.c` @type ^`f7.n` @kind object;
  #L4edef4.  if v0 == 0 then goto L4edefc;
  #L4edef8.  v0:= 1I;
  #L4edefa.  goto L4edefe;
  #L4edefc.  v0:= 0I;
  #L4edefe.  return v0;
}
procedure `boolean` `equals`(`x6.c0` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lx6/c0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ede3c.  v0:= 1I;
  #L4ede3e.  if v7 != v8 then goto L4ede44;
  #L4ede42.  return v0;
  #L4ede44.  v1:= 0I;
  #L4ede46.  if v8 == 0 then goto L4ededc;
  #L4ede4a.  v2:= constclass @type ^`x6.c0` @kind object;
  #L4ede4e.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4ede54.  v3:= temp @kind object;
  #L4ede56.  if v2 == v3 then goto L4ede5c;
  #L4ede5a.  goto L4ededc;
  #L4ede5c.  v8:= (`x6.c0`) v8 @kind object;
  #L4ede60.  v2:= v7.`x6.c0.a` @type ^`long` @kind wide;
  #L4ede64.  v4:= v8.`x6.c0.a` @type ^`long` @kind wide;
  #L4ede68.  v6:= lcmp(v2, v4);
  #L4ede6c.  if v6 == 0 then goto L4ede72;
  #L4ede70.  return v1;
  #L4ede72.  v2:= v7.`x6.c0.b` @type ^`x6.l` @kind object;
  #L4ede76.  v3:= v8.`x6.c0.b` @type ^`x6.l` @kind object;
  #L4ede7a.  call temp:= `equals`(v2, v3) @signature `Lx6/l;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ede80.  v2:= temp;
  #L4ede82.  if v2 != 0 then goto L4ede88;
  #L4ede86.  return v1;
  #L4ede88.  v2:= v7.`x6.c0.e` @type ^`boolean` @kind boolean;
  #L4ede8c.  v3:= v8.`x6.c0.e` @type ^`boolean` @kind boolean;
  #L4ede90.  if v2 == v3 then goto L4ede96;
  #L4ede94.  return v1;
  #L4ede96.  v2:= v7.`x6.c0.c` @type ^`f7.n` @kind object;
  #L4ede9a.  if v2 == 0 then goto L4edeb0;
  #L4ede9e.  v3:= v8.`x6.c0.c` @type ^`f7.n` @kind object;
  #L4edea2.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4edea8.  v2:= temp;
  #L4edeaa.  if v2 == 0 then goto L4edeb8;
  #L4edeae.  goto L4edeba;
  #L4edeb0.  v2:= v8.`x6.c0.c` @type ^`f7.n` @kind object;
  #L4edeb4.  if v2 == 0 then goto L4edeba;
  #L4edeb8.  return v1;
  #L4edeba.  v2:= v7.`x6.c0.d` @type ^`x6.b` @kind object;
  #L4edebe.  v8:= v8.`x6.c0.d` @type ^`x6.b` @kind object;
  #L4edec2.  if v2 == 0 then goto L4eded4;
  #L4edec6.  call temp:= `equals`(v2, v8) @signature `Lx6/b;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4edecc.  v8:= temp;
  #L4edece.  if v8 == 0 then goto L4eded8;
  #L4eded2.  goto L4ededa;
  #L4eded4.  if v8 == 0 then goto L4ededa;
  #L4eded8.  return v1;
  #L4ededa.  return v0;
  #L4ededc.  return v1;
}
procedure `boolean` `f`(`x6.c0` v1 @kind this) @signature `Lx6/c0;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4edf10.  v0:= v1.`x6.c0.e` @type ^`boolean` @kind boolean;
  #L4edf14.  return v0;
}
procedure `int` `hashCode`(`x6.c0` v3 @kind this) @signature `Lx6/c0;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4edf54.  v0:= v3.`x6.c0.a` @type ^`long` @kind wide;
  #L4edf58.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4edf5e.  v0:= temp @kind object;
  #L4edf60.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Long;.hashCode:()I` @kind virtual;
  #L4edf66.  v0:= temp;
  #L4edf68.  v0:= v0 * 31;
  #L4edf6c.  v1:= v3.`x6.c0.e` @type ^`boolean` @kind boolean;
  #L4edf70.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4edf76.  v1:= temp @kind object;
  #L4edf78.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Boolean;.hashCode:()I` @kind virtual;
  #L4edf7e.  v1:= temp;
  #L4edf80.  v0:= v0 + v1 @kind int;
  #L4edf82.  v0:= v0 * 31;
  #L4edf86.  v1:= v3.`x6.c0.b` @type ^`x6.l` @kind object;
  #L4edf8a.  call temp:= `hashCode`(v1) @signature `Lx6/l;.hashCode:()I` @kind virtual;
  #L4edf90.  v1:= temp;
  #L4edf92.  v0:= v0 + v1 @kind int;
  #L4edf94.  v0:= v0 * 31;
  #L4edf98.  v1:= v3.`x6.c0.c` @type ^`f7.n` @kind object;
  #L4edf9c.  v2:= 0I;
  #L4edf9e.  if v1 == 0 then goto L4edfac;
  #L4edfa2.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4edfa8.  v1:= temp;
  #L4edfaa.  goto L4edfae;
  #L4edfac.  v1:= 0I;
  #L4edfae.  v0:= v0 + v1 @kind int;
  #L4edfb0.  v0:= v0 * 31;
  #L4edfb4.  v1:= v3.`x6.c0.d` @type ^`x6.b` @kind object;
  #L4edfb8.  if v1 == 0 then goto L4edfc4;
  #L4edfbc.  call temp:= `hashCode`(v1) @signature `Lx6/b;.hashCode:()I` @kind virtual;
  #L4edfc2.  v2:= temp;
  #L4edfc4.  v0:= v0 + v2 @kind int;
  #L4edfc6.  return v0;
}
procedure `java.lang.String` `toString`(`x6.c0` v3 @kind this) @signature `Lx6/c0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4edfd8.  v0:= new `java.lang.StringBuilder`;
  #L4edfdc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4edfe2.  v1:= "UserWriteRecord{id=" @kind object;
  #L4edfe6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4edfec.  v1:= v3.`x6.c0.a` @type ^`long` @kind wide;
  #L4edff0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4edff6.  v1:= " path=" @kind object;
  #L4edffa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee000.  v1:= v3.`x6.c0.b` @type ^`x6.l` @kind object;
  #L4ee004.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee00a.  v1:= " visible=" @kind object;
  #L4ee00e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee014.  v1:= v3.`x6.c0.e` @type ^`boolean` @kind boolean;
  #L4ee018.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee01e.  v1:= " overwrite=" @kind object;
  #L4ee022.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee028.  v1:= v3.`x6.c0.c` @type ^`f7.n` @kind object;
  #L4ee02c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee032.  v1:= " merge=" @kind object;
  #L4ee036.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee03c.  v1:= v3.`x6.c0.d` @type ^`x6.b` @kind object;
  #L4ee040.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee046.  v1:= "}" @kind object;
  #L4ee04a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ee050.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ee056.  v0:= temp @kind object;
  #L4ee058.  return v0 @kind object;
}
