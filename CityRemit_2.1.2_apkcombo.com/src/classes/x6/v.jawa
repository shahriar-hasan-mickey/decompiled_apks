record `x6.v` @kind class @AccessFlag  {
  `f7.n` `x6.v.a` @AccessFlag PRIVATE;
  `java.util.Map` `x6.v.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x6.v` v1 @kind this) @signature `Lx6/v;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4eb378.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4eb37e.  v0:= 0I;
  #L4eb380.  v1.`x6.v.a` @type ^`f7.n` := v0 @kind object;
  #L4eb384.  v1.`x6.v.b` @type ^`java.util.Map` := v0 @kind object;
  #L4eb388.  return @kind void;
}
procedure `void` `a`(`x6.v` v3 @kind this, `x6.v$c` v4 @kind object) @signature `Lx6/v;.a:(Lx6/v$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4eb39c.  v0:= v3.`x6.v.b` @type ^`java.util.Map` @kind object;
  #L4eb3a0.  if v0 == 0 then goto L4eb3ec;
  #L4eb3a4.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L4eb3aa.  v0:= temp @kind object;
  #L4eb3ac.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4eb3b2.  v0:= temp @kind object;
  #L4eb3b4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eb3ba.  v1:= temp;
  #L4eb3bc.  if v1 == 0 then goto L4eb3ec;
  #L4eb3c0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4eb3c6.  v1:= temp @kind object;
  #L4eb3c8.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L4eb3cc.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L4eb3d2.  v2:= temp @kind object;
  #L4eb3d4.  v2:= (`f7.b`) v2 @kind object;
  #L4eb3d8.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L4eb3de.  v1:= temp @kind object;
  #L4eb3e0.  v1:= (`x6.v`) v1 @kind object;
  #L4eb3e4.  call `a`(v4, v2, v1) @signature `Lx6/v$c;.a:(Lf7/b;Lx6/v;)V` @kind interface;
  #L4eb3ea.  goto L4eb3b4;
  #L4eb3ec.  return @kind void;
}
procedure `void` `b`(`x6.v` v1 @kind this, `x6.l` v2 @kind object, `x6.v$d` v3 @kind object) @signature `Lx6/v;.b:(Lx6/l;Lx6/v$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb400.  v0:= v1.`x6.v.a` @type ^`f7.n` @kind object;
  #L4eb404.  if v0 == 0 then goto L4eb410;
  #L4eb408.  call `a`(v3, v2, v0) @signature `Lx6/v$d;.a:(Lx6/l;Lf7/n;)V` @kind interface;
  #L4eb40e.  goto L4eb420;
  #L4eb410.  v0:= new `x6.v$b`;
  #L4eb414.  call `<init>`(v0, v1, v2, v3) @signature `Lx6/v$b;.<init>:(Lx6/v;Lx6/l;Lx6/v$d;)V` @kind direct;
  #L4eb41a.  call `a`(v1, v0) @signature `Lx6/v;.a:(Lx6/v$c;)V` @kind virtual;
  #L4eb420.  return @kind void;
}
procedure `boolean` `c`(`x6.v` v5 @kind this, `x6.l` v6 @kind object) @signature `Lx6/v;.c:(Lx6/l;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4eb2a8.  call temp:= `isEmpty`(v6) @signature `Lx6/l;.isEmpty:()Z` @kind virtual;
  #L4eb2ae.  v0:= temp;
  #L4eb2b0.  v1:= 1I;
  #L4eb2b2.  v2:= 0I;
  #L4eb2b4.  if v0 == 0 then goto L4eb2c2;
  #L4eb2b8.  v5.`x6.v.a` @type ^`f7.n` := v2 @kind object;
  #L4eb2bc.  v5.`x6.v.b` @type ^`java.util.Map` := v2 @kind object;
  #L4eb2c0.  return v1;
  #L4eb2c2.  v0:= v5.`x6.v.a` @type ^`f7.n` @kind object;
  #L4eb2c6.  v3:= 0I;
  #L4eb2c8.  if v0 == 0 then goto L4eb300;
  #L4eb2cc.  call temp:= `A`(v0) @signature `Lf7/n;.A:()Z` @kind interface;
  #L4eb2d2.  v0:= temp;
  #L4eb2d4.  if v0 == 0 then goto L4eb2da;
  #L4eb2d8.  return v3;
  #L4eb2da.  v0:= v5.`x6.v.a` @type ^`f7.n` @kind object;
  #L4eb2de.  v0:= (`f7.c`) v0 @kind object;
  #L4eb2e2.  v5.`x6.v.a` @type ^`f7.n` := v2 @kind object;
  #L4eb2e6.  v1:= new `x6.v$a`;
  #L4eb2ea.  call `<init>`(v1, v5, v6) @signature `Lx6/v$a;.<init>:(Lx6/v;Lx6/l;)V` @kind direct;
  #L4eb2f0.  call `T`(v0, v1) @signature `Lf7/c;.T:(Lf7/c$c;)V` @kind virtual;
  #L4eb2f6.  call temp:= `c`(v5, v6) @signature `Lx6/v;.c:(Lx6/l;)Z` @kind virtual;
  #L4eb2fc.  v6:= temp;
  #L4eb2fe.  return v6;
  #L4eb300.  v0:= v5.`x6.v.b` @type ^`java.util.Map` @kind object;
  #L4eb304.  if v0 == 0 then goto L4eb366;
  #L4eb308.  call temp:= `h0`(v6) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L4eb30e.  v0:= temp @kind object;
  #L4eb310.  call temp:= `k0`(v6) @signature `Lx6/l;.k0:()Lx6/l;` @kind virtual;
  #L4eb316.  v6:= temp @kind object;
  #L4eb318.  v4:= v5.`x6.v.b` @type ^`java.util.Map` @kind object;
  #L4eb31c.  call temp:= `containsKey`(v4, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L4eb322.  v4:= temp;
  #L4eb324.  if v4 == 0 then goto L4eb34e;
  #L4eb328.  v4:= v5.`x6.v.b` @type ^`java.util.Map` @kind object;
  #L4eb32c.  call temp:= `get`(v4, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4eb332.  v4:= temp @kind object;
  #L4eb334.  v4:= (`x6.v`) v4 @kind object;
  #L4eb338.  call temp:= `c`(v4, v6) @signature `Lx6/v;.c:(Lx6/l;)Z` @kind virtual;
  #L4eb33e.  v6:= temp;
  #L4eb340.  if v6 == 0 then goto L4eb34e;
  #L4eb344.  v6:= v5.`x6.v.b` @type ^`java.util.Map` @kind object;
  #L4eb348.  call temp:= `remove`(v6, v0) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4eb34e.  v6:= v5.`x6.v.b` @type ^`java.util.Map` @kind object;
  #L4eb352.  call temp:= `isEmpty`(v6) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L4eb358.  v6:= temp;
  #L4eb35a.  if v6 == 0 then goto L4eb364;
  #L4eb35e.  v5.`x6.v.b` @type ^`java.util.Map` := v2 @kind object;
  #L4eb362.  return v1;
  #L4eb364.  return v3;
  #L4eb366.  return v1;
}
procedure `void` `d`(`x6.v` v3 @kind this, `x6.l` v4 @kind object, `f7.n` v5 @kind object) @signature `Lx6/v;.d:(Lx6/l;Lf7/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4eb434.  call temp:= `isEmpty`(v4) @signature `Lx6/l;.isEmpty:()Z` @kind virtual;
  #L4eb43a.  v0:= temp;
  #L4eb43c.  if v0 == 0 then goto L4eb44c;
  #L4eb440.  v3.`x6.v.a` @type ^`f7.n` := v5 @kind object;
  #L4eb444.  v4:= 0I;
  #L4eb446.  v3.`x6.v.b` @type ^`java.util.Map` := v4 @kind object;
  #L4eb44a.  goto L4eb4c2;
  #L4eb44c.  v0:= v3.`x6.v.a` @type ^`f7.n` @kind object;
  #L4eb450.  if v0 == 0 then goto L4eb462;
  #L4eb454.  call temp:= `U`(v0, v4, v5) @signature `Lf7/n;.U:(Lx6/l;Lf7/n;)Lf7/n;` @kind interface;
  #L4eb45a.  v4:= temp @kind object;
  #L4eb45c.  v3.`x6.v.a` @type ^`f7.n` := v4 @kind object;
  #L4eb460.  goto L4eb4c2;
  #L4eb462.  v0:= v3.`x6.v.b` @type ^`java.util.Map` @kind object;
  #L4eb466.  if v0 != 0 then goto L4eb478;
  #L4eb46a.  v0:= new `java.util.HashMap`;
  #L4eb46e.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L4eb474.  v3.`x6.v.b` @type ^`java.util.Map` := v0 @kind object;
  #L4eb478.  call temp:= `h0`(v4) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L4eb47e.  v0:= temp @kind object;
  #L4eb480.  v1:= v3.`x6.v.b` @type ^`java.util.Map` @kind object;
  #L4eb484.  call temp:= `containsKey`(v1, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L4eb48a.  v1:= temp;
  #L4eb48c.  if v1 != 0 then goto L4eb4a4;
  #L4eb490.  v1:= v3.`x6.v.b` @type ^`java.util.Map` @kind object;
  #L4eb494.  v2:= new `x6.v`;
  #L4eb498.  call `<init>`(v2) @signature `Lx6/v;.<init>:()V` @kind direct;
  #L4eb49e.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4eb4a4.  v1:= v3.`x6.v.b` @type ^`java.util.Map` @kind object;
  #L4eb4a8.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4eb4ae.  v0:= temp @kind object;
  #L4eb4b0.  v0:= (`x6.v`) v0 @kind object;
  #L4eb4b4.  call temp:= `k0`(v4) @signature `Lx6/l;.k0:()Lx6/l;` @kind virtual;
  #L4eb4ba.  v4:= temp @kind object;
  #L4eb4bc.  call `d`(v0, v4, v5) @signature `Lx6/v;.d:(Lx6/l;Lf7/n;)V` @kind virtual;
  #L4eb4c2.  return @kind void;
}
