record `x6.i` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.util.concurrent.atomic.AtomicBoolean` `x6.i.a` @AccessFlag PRIVATE;
  `x6.j` `x6.i.b` @AccessFlag PRIVATE;
  `boolean` `x6.i.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x6.i` v2 @kind this) @signature `Lx6/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e6f68.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e6f6e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4e6f72.  v1:= 0I;
  #L4e6f74.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L4e6f7a.  v2.`x6.i.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4e6f7e.  v2.`x6.i.c` @type ^`boolean` := v1 @kind boolean;
  #L4e6f82.  return @kind void;
}
procedure `x6.i` `a`(`c7.i` v0 @kind object) @signature `Lx6/i;.a:(Lc7/i;)Lx6/i;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `c7.d` `b`(`c7.c` v0 @kind object, `c7.i` v1 @kind object) @signature `Lx6/i;.b:(Lc7/c;Lc7/i;)Lc7/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `c`(`s6.b` v0 @kind object) @signature `Lx6/i;.c:(Ls6/b;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `d`(`c7.d` v0 @kind object) @signature `Lx6/i;.d:(Lc7/d;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `c7.i` `e`() @signature `Lx6/i;.e:()Lc7/i;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `f`(`x6.i` v0 @kind object) @signature `Lx6/i;.f:(Lx6/i;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `g`(`x6.i` v1 @kind this) @signature `Lx6/i;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e6f30.  v0:= v1.`x6.i.c` @type ^`boolean` @kind boolean;
  #L4e6f34.  return v0;
}
procedure `boolean` `h`(`x6.i` v1 @kind this) @signature `Lx6/i;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e6f48.  v0:= v1.`x6.i.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4e6f4c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4e6f52.  v0:= temp;
  #L4e6f54.  return v0;
}
procedure `boolean` `i`(`c7.e$a` v0 @kind object) @signature `Lx6/i;.i:(Lc7/e$a;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `j`(`x6.i` v0 @kind this, `boolean` v1 ) @signature `Lx6/i;.j:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L4e6f94.  v0.`x6.i.c` @type ^`boolean` := v1 @kind boolean;
  #L4e6f98.  return @kind void;
}
procedure `void` `k`(`x6.i` v2 @kind this, `x6.j` v3 @kind object) @signature `Lx6/i;.k:(Lx6/j;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e6fac.  call temp:= `h`(v2) @signature `Lx6/i;.h:()Z` @kind virtual;
  #L4e6fb2.  v0:= temp;
  #L4e6fb4.  v1:= 1I;
  #L4e6fb6.  v0:= v0 ^~ v1 @kind int;
  #L4e6fb8.  call `f`(v0) @signature `La7/m;.f:(Z)V` @kind static;
  #L4e6fbe.  v0:= v2.`x6.i.b` @type ^`x6.j` @kind object;
  #L4e6fc2.  if v0 != 0 then goto L4e6fc8;
  #L4e6fc6.  goto L4e6fca;
  #L4e6fc8.  v1:= 0I;
  #L4e6fca.  call `f`(v1) @signature `La7/m;.f:(Z)V` @kind static;
  #L4e6fd0.  v2.`x6.i.b` @type ^`x6.j` := v3 @kind object;
  #L4e6fd4.  return @kind void;
}
procedure `void` `l`(`x6.i` v3 @kind this) @signature `Lx6/i;.l:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e6fe8.  v0:= v3.`x6.i.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4e6fec.  v1:= 0I;
  #L4e6fee.  v2:= 1I;
  #L4e6ff0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4e6ff6.  v0:= temp;
  #L4e6ff8.  if v0 == 0 then goto L4e7010;
  #L4e6ffc.  v0:= v3.`x6.i.b` @type ^`x6.j` @kind object;
  #L4e7000.  if v0 == 0 then goto L4e7010;
  #L4e7004.  call `a`(v0, v3) @signature `Lx6/j;.a:(Lx6/i;)V` @kind interface;
  #L4e700a.  v0:= 0I;
  #L4e700c.  v3.`x6.i.b` @type ^`x6.j` := v0 @kind object;
  #L4e7010.  return @kind void;
}
