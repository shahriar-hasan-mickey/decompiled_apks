record `x6.f0$b` @kind class @AccessFlag PUBLIC extends `x6.f0` @kind class {
  `f7.n` `x6.f0$b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`x6.f0$b` v0 @kind this, `f7.n` v1 @kind object) @signature `Lx6/f0$b;.<init>:(Lf7/n;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ee7c8.  call `<init>`(v0) @signature `Lx6/f0;.<init>:()V` @kind direct;
  #L4ee7ce.  v0.`x6.f0$b.a` @type ^`f7.n` := v1 @kind object;
  #L4ee7d2.  return @kind void;
}
procedure `x6.f0` `a`(`x6.f0$b` v1 @kind this, `f7.b` v2 @kind object) @signature `Lx6/f0$b;.a:(Lf7/b;)Lx6/f0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ee7e4.  v0:= v1.`x6.f0$b.a` @type ^`f7.n` @kind object;
  #L4ee7e8.  call temp:= `z`(v0, v2) @signature `Lf7/n;.z:(Lf7/b;)Lf7/n;` @kind interface;
  #L4ee7ee.  v2:= temp @kind object;
  #L4ee7f0.  v0:= new `x6.f0$b`;
  #L4ee7f4.  call `<init>`(v0, v2) @signature `Lx6/f0$b;.<init>:(Lf7/n;)V` @kind direct;
  #L4ee7fa.  return v0 @kind object;
}
procedure `f7.n` `b`(`x6.f0$b` v1 @kind this) @signature `Lx6/f0$b;.b:()Lf7/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ee7b0.  v0:= v1.`x6.f0$b.a` @type ^`f7.n` @kind object;
  #L4ee7b4.  return v0 @kind object;
}
