record `x6.l` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface, `java.lang.Comparable` @kind interface {
  `f7.b`[] `x6.l.o` @AccessFlag PRIVATE_FINAL;
  `int` `x6.l.p` @AccessFlag PRIVATE_FINAL;
  `int` `x6.l.q` @AccessFlag PRIVATE_FINAL;
}
global `x6.l` `@@x6.l.r` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx6/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e74d8.  v0:= new `x6.l`;
  #L4e74dc.  v1:= "" @kind object;
  #L4e74e0.  call `<init>`(v0, v1) @signature `Lx6/l;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e74e6.  `@@x6.l.r` @type ^`x6.l` := v0 @kind object;
  #L4e74ea.  return @kind void;
}
procedure `void` `<init>`(`x6.l` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lx6/l;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4e757c.  call `<init>`(v7) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e7582.  v0:= "/" @kind object;
  #L4e7586.  v1:= -1I;
  #L4e7588.  call temp:= `split`(v8, v0, v1) @signature `Ljava/lang/String;.split:(Ljava/lang/String;I)[Ljava/lang/String;` @kind virtual;
  #L4e758e.  v8:= temp @kind object;
  #L4e7590.  v0:= length @variable v8;
  #L4e7592.  v1:= 0I;
  #L4e7594.  v2:= 0I;
  #L4e7596.  v3:= 0I;
  #L4e7598.  if v2 >= v0 then goto L4e75b6;
  #L4e759c.  v4:= v8[v2] @kind object;
  #L4e75a0.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4e75a6.  v4:= temp;
  #L4e75a8.  if v4 <= 0 then goto L4e75b0;
  #L4e75ac.  v3:= v3 + 1;
  #L4e75b0.  v2:= v2 + 1;
  #L4e75b4.  goto L4e7598;
  #L4e75b6.  v0:= new `f7.b`[v3];
  #L4e75ba.  v7.`x6.l.o` @type ^`f7.b`[] := v0 @kind object;
  #L4e75be.  v0:= length @variable v8;
  #L4e75c0.  v2:= 0I;
  #L4e75c2.  v3:= 0I;
  #L4e75c4.  if v2 >= v0 then goto L4e75f4;
  #L4e75c8.  v4:= v8[v2] @kind object;
  #L4e75cc.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4e75d2.  v5:= temp;
  #L4e75d4.  if v5 <= 0 then goto L4e75ee;
  #L4e75d8.  v5:= v7.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e75dc.  v6:= v3 + 1;
  #L4e75e0.  call temp:= `h`(v4) @signature `Lf7/b;.h:(Ljava/lang/String;)Lf7/b;` @kind static;
  #L4e75e6.  v4:= temp @kind object;
  #L4e75e8.  v5[v3]:= v4 @kind object;
  #L4e75ec.  v3:= v6;
  #L4e75ee.  v2:= v2 + 1;
  #L4e75f2.  goto L4e75c4;
  #L4e75f4.  v7.`x6.l.p` @type ^`int` := v1;
  #L4e75f8.  v8:= v7.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e75fc.  v8:= length @variable v8;
  #L4e75fe.  v7.`x6.l.q` @type ^`int` := v8;
  #L4e7602.  return @kind void;
}
procedure `void` `<init>`(`x6.l` v6 @kind this, `java.util.List` v7 @kind object) @signature `Lx6/l;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e7614.  call `<init>`(v6) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e761a.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e7620.  v0:= temp;
  #L4e7622.  v0:= new `f7.b`[v0];
  #L4e7626.  v6.`x6.l.o` @type ^`f7.b`[] := v0 @kind object;
  #L4e762a.  call temp:= `iterator`(v7) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e7630.  v0:= temp @kind object;
  #L4e7632.  v1:= 0I;
  #L4e7634.  v2:= 0I;
  #L4e7636.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e763c.  v3:= temp;
  #L4e763e.  if v3 == 0 then goto L4e7666;
  #L4e7642.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e7648.  v3:= temp @kind object;
  #L4e764a.  v3:= (`java.lang.String`) v3 @kind object;
  #L4e764e.  v4:= v6.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e7652.  v5:= v2 + 1;
  #L4e7656.  call temp:= `h`(v3) @signature `Lf7/b;.h:(Ljava/lang/String;)Lf7/b;` @kind static;
  #L4e765c.  v3:= temp @kind object;
  #L4e765e.  v4[v2]:= v3 @kind object;
  #L4e7662.  v2:= v5;
  #L4e7664.  goto L4e7636;
  #L4e7666.  v6.`x6.l.p` @type ^`int` := v1;
  #L4e766a.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e7670.  v7:= temp;
  #L4e7672.  v6.`x6.l.q` @type ^`int` := v7;
  #L4e7676.  return @kind void;
}
procedure `void` `<init>`(`x6.l` v5 @kind this, `f7.b`[] v6 @kind object) @signature `Lx6/l;.<init>:([Lf7/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e74fc.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e7502.  v0:= length @variable v6;
  #L4e7504.  call temp:= `copyOf`(v6, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L4e750a.  v0:= temp @kind object;
  #L4e750c.  v0:= (`f7.b`[]) v0 @kind object;
  #L4e7510.  v5.`x6.l.o` @type ^`f7.b`[] := v0 @kind object;
  #L4e7514.  v0:= 0I;
  #L4e7516.  v5.`x6.l.p` @type ^`int` := v0;
  #L4e751a.  v1:= length @variable v6;
  #L4e751c.  v5.`x6.l.q` @type ^`int` := v1;
  #L4e7520.  v1:= length @variable v6;
  #L4e7522.  v2:= 0I;
  #L4e7524.  if v2 >= v1 then goto L4e7546;
  #L4e7528.  v3:= v6[v2] @kind object;
  #L4e752c.  if v3 == 0 then goto L4e7534;
  #L4e7530.  v3:= 1I;
  #L4e7532.  goto L4e7536;
  #L4e7534.  v3:= 0I;
  #L4e7536.  v4:= "Can't construct a path with a null value!" @kind object;
  #L4e753a.  call `g`(v3, v4) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L4e7540.  v2:= v2 + 1;
  #L4e7544.  goto L4e7524;
  #L4e7546.  return @kind void;
}
procedure `void` `<init>`(`x6.l` v0 @kind this, `f7.b`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lx6/l;.<init>:([Lf7/b;II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4e7558.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e755e.  v0.`x6.l.o` @type ^`f7.b`[] := v1 @kind object;
  #L4e7562.  v0.`x6.l.p` @type ^`int` := v2;
  #L4e7566.  v0.`x6.l.q` @type ^`int` := v3;
  #L4e756a.  return @kind void;
}
procedure `int` `S`(`x6.l` v0 @kind object) @signature `Lx6/l;.S:(Lx6/l;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4e729c.  v0:= v0.`x6.l.q` @type ^`int`;
  #L4e72a0.  return v0;
}
procedure `f7.b`[] `T`(`x6.l` v0 @kind object) @signature `Lx6/l;.T:(Lx6/l;)[Lf7/b;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4e726c.  v0:= v0.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e7270.  return v0 @kind object;
}
procedure `x6.l` `g0`() @signature `Lx6/l;.g0:()Lx6/l;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4e7730.  v0:= `@@x6.l.r` @type ^`x6.l` @kind object;
  #L4e7734.  return v0 @kind object;
}
procedure `int` `h`(`x6.l` v0 @kind object) @signature `Lx6/l;.h:(Lx6/l;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4e7284.  v0:= v0.`x6.l.p` @type ^`int`;
  #L4e7288.  return v0;
}
procedure `x6.l` `j0`(`x6.l` v3 @kind object, `x6.l` v4 @kind object) @signature `Lx6/l;.j0:(Lx6/l;Lx6/l;)Lx6/l;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4e7784.  call temp:= `h0`(v3) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L4e778a.  v0:= temp @kind object;
  #L4e778c.  call temp:= `h0`(v4) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L4e7792.  v1:= temp @kind object;
  #L4e7794.  if v0 != 0 then goto L4e779a;
  #L4e7798.  return v4 @kind object;
  #L4e779a.  call temp:= `equals`(v0, v1) @signature `Lf7/b;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e77a0.  v0:= temp;
  #L4e77a2.  if v0 == 0 then goto L4e77c0;
  #L4e77a6.  call temp:= `k0`(v3) @signature `Lx6/l;.k0:()Lx6/l;` @kind virtual;
  #L4e77ac.  v3:= temp @kind object;
  #L4e77ae.  call temp:= `k0`(v4) @signature `Lx6/l;.k0:()Lx6/l;` @kind virtual;
  #L4e77b4.  v4:= temp @kind object;
  #L4e77b6.  call temp:= `j0`(v3, v4) @signature `Lx6/l;.j0:(Lx6/l;Lx6/l;)Lx6/l;` @kind static;
  #L4e77bc.  v3:= temp @kind object;
  #L4e77be.  return v3 @kind object;
  #L4e77c0.  v0:= new `s6.c`;
  #L4e77c4.  v1:= new `java.lang.StringBuilder`;
  #L4e77c8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e77ce.  v2:= "INTERNAL ERROR: " @kind object;
  #L4e77d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e77d8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e77de.  v4:= " is not contained in " @kind object;
  #L4e77e2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e77e8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e77ee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e77f4.  v3:= temp @kind object;
  #L4e77f6.  call `<init>`(v0, v3) @signature `Ls6/c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e77fc.  throw v0;
}
procedure `java.util.List` `a0`(`x6.l` v3 @kind this) @signature `Lx6/l;.a0:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e7484.  v0:= new `java.util.ArrayList`;
  #L4e7488.  call temp:= `size`(v3) @signature `Lx6/l;.size:()I` @kind virtual;
  #L4e748e.  v1:= temp;
  #L4e7490.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4e7496.  call temp:= `iterator`(v3) @signature `Lx6/l;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4e749c.  v1:= temp @kind object;
  #L4e749e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e74a4.  v2:= temp;
  #L4e74a6.  if v2 == 0 then goto L4e74c6;
  #L4e74aa.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e74b0.  v2:= temp @kind object;
  #L4e74b2.  v2:= (`f7.b`) v2 @kind object;
  #L4e74b6.  call temp:= `d`(v2) @signature `Lf7/b;.d:()Ljava/lang/String;` @kind virtual;
  #L4e74bc.  v2:= temp @kind object;
  #L4e74be.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e74c4.  goto L4e749e;
  #L4e74c6.  return v0 @kind object;
}
procedure `x6.l` `b0`(`x6.l` v6 @kind this, `f7.b` v7 @kind object) @signature `Lx6/l;.b0:(Lf7/b;)Lx6/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e7688.  call temp:= `size`(v6) @signature `Lx6/l;.size:()I` @kind virtual;
  #L4e768e.  v0:= temp;
  #L4e7690.  v1:= v0 + 1;
  #L4e7694.  v2:= new `f7.b`[v1];
  #L4e7698.  v3:= v6.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e769c.  v4:= v6.`x6.l.p` @type ^`int`;
  #L4e76a0.  v5:= 0I;
  #L4e76a2.  call `arraycopy`(v3, v4, v2, v5, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4e76a8.  v2[v0]:= v7 @kind object;
  #L4e76ac.  v7:= new `x6.l`;
  #L4e76b0.  call `<init>`(v7, v2, v5, v1) @signature `Lx6/l;.<init>:([Lf7/b;II)V` @kind direct;
  #L4e76b6.  return v7 @kind object;
}
procedure `x6.l` `c0`(`x6.l` v6 @kind this, `x6.l` v7 @kind object) @signature `Lx6/l;.c0:(Lx6/l;)Lx6/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e76c8.  call temp:= `size`(v6) @signature `Lx6/l;.size:()I` @kind virtual;
  #L4e76ce.  v0:= temp;
  #L4e76d0.  call temp:= `size`(v7) @signature `Lx6/l;.size:()I` @kind virtual;
  #L4e76d6.  v1:= temp;
  #L4e76d8.  v0:= v0 + v1 @kind int;
  #L4e76da.  v1:= new `f7.b`[v0];
  #L4e76de.  v2:= v6.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e76e2.  v3:= v6.`x6.l.p` @type ^`int`;
  #L4e76e6.  call temp:= `size`(v6) @signature `Lx6/l;.size:()I` @kind virtual;
  #L4e76ec.  v4:= temp;
  #L4e76ee.  v5:= 0I;
  #L4e76f0.  call `arraycopy`(v2, v3, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4e76f6.  v2:= v7.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e76fa.  v3:= v7.`x6.l.p` @type ^`int`;
  #L4e76fe.  call temp:= `size`(v6) @signature `Lx6/l;.size:()I` @kind virtual;
  #L4e7704.  v4:= temp;
  #L4e7706.  call temp:= `size`(v7) @signature `Lx6/l;.size:()I` @kind virtual;
  #L4e770c.  v7:= temp;
  #L4e770e.  call `arraycopy`(v2, v3, v1, v4, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4e7714.  v7:= new `x6.l`;
  #L4e7718.  call `<init>`(v7, v1, v5, v0) @signature `Lx6/l;.<init>:([Lf7/b;II)V` @kind direct;
  #L4e771e.  return v7 @kind object;
}
procedure `int` `compareTo`(`x6.l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lx6/l;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4e72b4.  v1:= (`x6.l`) v1 @kind object;
  #L4e72b8.  call temp:= `d0`(v0, v1) @signature `Lx6/l;.d0:(Lx6/l;)I` @kind virtual;
  #L4e72be.  v1:= temp;
  #L4e72c0.  return v1;
}
procedure `int` `d0`(`x6.l` v4 @kind this, `x6.l` v5 @kind object) @signature `Lx6/l;.d0:(Lx6/l;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e72d4.  v0:= v4.`x6.l.p` @type ^`int`;
  #L4e72d8.  v1:= v5.`x6.l.p` @type ^`int`;
  #L4e72dc.  v2:= v4.`x6.l.q` @type ^`int`;
  #L4e72e0.  if v0 >= v2 then goto L4e7314;
  #L4e72e4.  v3:= v5.`x6.l.q` @type ^`int`;
  #L4e72e8.  if v1 >= v3 then goto L4e7314;
  #L4e72ec.  v2:= v4.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e72f0.  v2:= v2[v0] @kind object;
  #L4e72f4.  v3:= v5.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e72f8.  v3:= v3[v1] @kind object;
  #L4e72fc.  call temp:= `e`(v2, v3) @signature `Lf7/b;.e:(Lf7/b;)I` @kind virtual;
  #L4e7302.  v2:= temp;
  #L4e7304.  if v2 == 0 then goto L4e730a;
  #L4e7308.  return v2;
  #L4e730a.  v0:= v0 + 1;
  #L4e730e.  v1:= v1 + 1;
  #L4e7312.  goto L4e72dc;
  #L4e7314.  if v0 != v2 then goto L4e7324;
  #L4e7318.  v5:= v5.`x6.l.q` @type ^`int`;
  #L4e731c.  if v1 != v5 then goto L4e7324;
  #L4e7320.  v5:= 0I;
  #L4e7322.  return v5;
  #L4e7324.  if v0 != v2 then goto L4e732c;
  #L4e7328.  v5:= -1I;
  #L4e732a.  return v5;
  #L4e732c.  v5:= 1I;
  #L4e732e.  return v5;
}
procedure `boolean` `e0`(`x6.l` v5 @kind this, `x6.l` v6 @kind object) @signature `Lx6/l;.e0:(Lx6/l;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e7100.  call temp:= `size`(v5) @signature `Lx6/l;.size:()I` @kind virtual;
  #L4e7106.  v0:= temp;
  #L4e7108.  call temp:= `size`(v6) @signature `Lx6/l;.size:()I` @kind virtual;
  #L4e710e.  v1:= temp;
  #L4e7110.  v2:= 0I;
  #L4e7112.  if v0 <= v1 then goto L4e7118;
  #L4e7116.  return v2;
  #L4e7118.  v0:= v5.`x6.l.p` @type ^`int`;
  #L4e711c.  v1:= v6.`x6.l.p` @type ^`int`;
  #L4e7120.  v3:= v5.`x6.l.q` @type ^`int`;
  #L4e7124.  if v0 >= v3 then goto L4e7150;
  #L4e7128.  v3:= v5.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e712c.  v3:= v3[v0] @kind object;
  #L4e7130.  v4:= v6.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e7134.  v4:= v4[v1] @kind object;
  #L4e7138.  call temp:= `equals`(v3, v4) @signature `Lf7/b;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e713e.  v3:= temp;
  #L4e7140.  if v3 != 0 then goto L4e7146;
  #L4e7144.  return v2;
  #L4e7146.  v0:= v0 + 1;
  #L4e714a.  v1:= v1 + 1;
  #L4e714e.  goto L4e7120;
  #L4e7150.  v6:= 1I;
  #L4e7152.  return v6;
}
procedure `boolean` `equals`(`x6.l` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lx6/l;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e7164.  v0:= instanceof @variable v7 @type ^`x6.l` @kind boolean;
  #L4e7168.  v1:= 0I;
  #L4e716a.  if v0 != 0 then goto L4e7170;
  #L4e716e.  return v1;
  #L4e7170.  v0:= 1I;
  #L4e7172.  if v6 != v7 then goto L4e7178;
  #L4e7176.  return v0;
  #L4e7178.  v7:= (`x6.l`) v7 @kind object;
  #L4e717c.  call temp:= `size`(v6) @signature `Lx6/l;.size:()I` @kind virtual;
  #L4e7182.  v2:= temp;
  #L4e7184.  call temp:= `size`(v7) @signature `Lx6/l;.size:()I` @kind virtual;
  #L4e718a.  v3:= temp;
  #L4e718c.  if v2 == v3 then goto L4e7192;
  #L4e7190.  return v1;
  #L4e7192.  v2:= v6.`x6.l.p` @type ^`int`;
  #L4e7196.  v3:= v7.`x6.l.p` @type ^`int`;
  #L4e719a.  v4:= v6.`x6.l.q` @type ^`int`;
  #L4e719e.  if v2 >= v4 then goto L4e71d2;
  #L4e71a2.  v4:= v7.`x6.l.q` @type ^`int`;
  #L4e71a6.  if v3 >= v4 then goto L4e71d2;
  #L4e71aa.  v4:= v6.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e71ae.  v4:= v4[v2] @kind object;
  #L4e71b2.  v5:= v7.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e71b6.  v5:= v5[v3] @kind object;
  #L4e71ba.  call temp:= `equals`(v4, v5) @signature `Lf7/b;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e71c0.  v4:= temp;
  #L4e71c2.  if v4 != 0 then goto L4e71c8;
  #L4e71c6.  return v1;
  #L4e71c8.  v2:= v2 + 1;
  #L4e71cc.  v3:= v3 + 1;
  #L4e71d0.  goto L4e719a;
  #L4e71d2.  return v0;
}
procedure `f7.b` `f0`(`x6.l` v2 @kind this) @signature `Lx6/l;.f0:()Lf7/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e7208.  call temp:= `isEmpty`(v2) @signature `Lx6/l;.isEmpty:()Z` @kind virtual;
  #L4e720e.  v0:= temp;
  #L4e7210.  if v0 != 0 then goto L4e7226;
  #L4e7214.  v0:= v2.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e7218.  v1:= v2.`x6.l.q` @type ^`int`;
  #L4e721c.  v1:= v1 + -1;
  #L4e7220.  v0:= v0[v1] @kind object;
  #L4e7224.  return v0 @kind object;
  #L4e7226.  v0:= 0I;
  #L4e7228.  return v0 @kind object;
}
procedure `f7.b` `h0`(`x6.l` v2 @kind this) @signature `Lx6/l;.h0:()Lf7/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e723c.  call temp:= `isEmpty`(v2) @signature `Lx6/l;.isEmpty:()Z` @kind virtual;
  #L4e7242.  v0:= temp;
  #L4e7244.  if v0 == 0 then goto L4e724c;
  #L4e7248.  v0:= 0I;
  #L4e724a.  return v0 @kind object;
  #L4e724c.  v0:= v2.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e7250.  v1:= v2.`x6.l.p` @type ^`int`;
  #L4e7254.  v0:= v0[v1] @kind object;
  #L4e7258.  return v0 @kind object;
}
procedure `int` `hashCode`(`x6.l` v3 @kind this) @signature `Lx6/l;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e7340.  v0:= v3.`x6.l.p` @type ^`int`;
  #L4e7344.  v1:= 0I;
  #L4e7346.  v2:= v3.`x6.l.q` @type ^`int`;
  #L4e734a.  if v0 >= v2 then goto L4e736a;
  #L4e734e.  v1:= v1 * 37;
  #L4e7352.  v2:= v3.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e7356.  v2:= v2[v0] @kind object;
  #L4e735a.  call temp:= `hashCode`(v2) @signature `Lf7/b;.hashCode:()I` @kind virtual;
  #L4e7360.  v2:= temp;
  #L4e7362.  v1:= v1 + v2 @kind int;
  #L4e7364.  v0:= v0 + 1;
  #L4e7368.  goto L4e7346;
  #L4e736a.  return v1;
}
procedure `x6.l` `i0`(`x6.l` v4 @kind this) @signature `Lx6/l;.i0:()Lx6/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e7748.  call temp:= `isEmpty`(v4) @signature `Lx6/l;.isEmpty:()Z` @kind virtual;
  #L4e774e.  v0:= temp;
  #L4e7750.  if v0 == 0 then goto L4e7758;
  #L4e7754.  v0:= 0I;
  #L4e7756.  return v0 @kind object;
  #L4e7758.  v0:= new `x6.l`;
  #L4e775c.  v1:= v4.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e7760.  v2:= v4.`x6.l.p` @type ^`int`;
  #L4e7764.  v3:= v4.`x6.l.q` @type ^`int`;
  #L4e7768.  v3:= v3 + -1;
  #L4e776c.  call `<init>`(v0, v1, v2, v3) @signature `Lx6/l;.<init>:([Lf7/b;II)V` @kind direct;
  #L4e7772.  return v0 @kind object;
}
procedure `boolean` `isEmpty`(`x6.l` v2 @kind this) @signature `Lx6/l;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e71e4.  v0:= v2.`x6.l.p` @type ^`int`;
  #L4e71e8.  v1:= v2.`x6.l.q` @type ^`int`;
  #L4e71ec.  if v0 < v1 then goto L4e71f4;
  #L4e71f0.  v0:= 1I;
  #L4e71f2.  goto L4e71f6;
  #L4e71f4.  v0:= 0I;
  #L4e71f6.  return v0;
}
procedure `java.util.Iterator` `iterator`(`x6.l` v1 @kind this) @signature `Lx6/l;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e7468.  v0:= new `x6.l$a`;
  #L4e746c.  call `<init>`(v0, v1) @signature `Lx6/l$a;.<init>:(Lx6/l;)V` @kind direct;
  #L4e7472.  return v0 @kind object;
}
procedure `x6.l` `k0`(`x6.l` v4 @kind this) @signature `Lx6/l;.k0:()Lx6/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e7810.  v0:= v4.`x6.l.p` @type ^`int`;
  #L4e7814.  call temp:= `isEmpty`(v4) @signature `Lx6/l;.isEmpty:()Z` @kind virtual;
  #L4e781a.  v1:= temp;
  #L4e781c.  if v1 != 0 then goto L4e7824;
  #L4e7820.  v0:= v0 + 1;
  #L4e7824.  v1:= new `x6.l`;
  #L4e7828.  v2:= v4.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e782c.  v3:= v4.`x6.l.q` @type ^`int`;
  #L4e7830.  call `<init>`(v1, v2, v0, v3) @signature `Lx6/l;.<init>:([Lf7/b;II)V` @kind direct;
  #L4e7836.  return v1 @kind object;
}
procedure `java.lang.String` `l0`(`x6.l` v4 @kind this) @signature `Lx6/l;.l0:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e73fc.  call temp:= `isEmpty`(v4) @signature `Lx6/l;.isEmpty:()Z` @kind virtual;
  #L4e7402.  v0:= temp;
  #L4e7404.  v1:= "/" @kind object;
  #L4e7408.  if v0 == 0 then goto L4e740e;
  #L4e740c.  return v1 @kind object;
  #L4e740e.  v0:= new `java.lang.StringBuilder`;
  #L4e7412.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e7418.  v2:= v4.`x6.l.p` @type ^`int`;
  #L4e741c.  v3:= v4.`x6.l.q` @type ^`int`;
  #L4e7420.  if v2 >= v3 then goto L4e744e;
  #L4e7424.  v3:= v4.`x6.l.p` @type ^`int`;
  #L4e7428.  if v2 <= v3 then goto L4e7432;
  #L4e742c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e7432.  v3:= v4.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e7436.  v3:= v3[v2] @kind object;
  #L4e743a.  call temp:= `d`(v3) @signature `Lf7/b;.d:()Ljava/lang/String;` @kind virtual;
  #L4e7440.  v3:= temp @kind object;
  #L4e7442.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e7448.  v2:= v2 + 1;
  #L4e744c.  goto L4e741c;
  #L4e744e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e7454.  v0:= temp @kind object;
  #L4e7456.  return v0 @kind object;
}
procedure `int` `size`(`x6.l` v2 @kind this) @signature `Lx6/l;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e737c.  v0:= v2.`x6.l.q` @type ^`int`;
  #L4e7380.  v1:= v2.`x6.l.p` @type ^`int`;
  #L4e7384.  v0:= v0 - v1 @kind int;
  #L4e7386.  return v0;
}
procedure `java.lang.String` `toString`(`x6.l` v4 @kind this) @signature `Lx6/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e7398.  call temp:= `isEmpty`(v4) @signature `Lx6/l;.isEmpty:()Z` @kind virtual;
  #L4e739e.  v0:= temp;
  #L4e73a0.  v1:= "/" @kind object;
  #L4e73a4.  if v0 == 0 then goto L4e73aa;
  #L4e73a8.  return v1 @kind object;
  #L4e73aa.  v0:= new `java.lang.StringBuilder`;
  #L4e73ae.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e73b4.  v2:= v4.`x6.l.p` @type ^`int`;
  #L4e73b8.  v3:= v4.`x6.l.q` @type ^`int`;
  #L4e73bc.  if v2 >= v3 then goto L4e73e2;
  #L4e73c0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e73c6.  v3:= v4.`x6.l.o` @type ^`f7.b`[] @kind object;
  #L4e73ca.  v3:= v3[v2] @kind object;
  #L4e73ce.  call temp:= `d`(v3) @signature `Lf7/b;.d:()Ljava/lang/String;` @kind virtual;
  #L4e73d4.  v3:= temp @kind object;
  #L4e73d6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e73dc.  v2:= v2 + 1;
  #L4e73e0.  goto L4e73b8;
  #L4e73e2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e73e8.  v0:= temp @kind object;
  #L4e73ea.  return v0 @kind object;
}
