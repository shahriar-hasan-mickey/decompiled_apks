record `m.a` @kind class @AccessFlag PUBLIC extends `m.c` @kind class {
  `m.c` `m.a.a` @AccessFlag PRIVATE;
  `m.c` `m.a.b` @AccessFlag PRIVATE;
}
global `m.a` `@@m.a.c` @AccessFlag PRIVATE_STATIC_VOLATILE;
procedure `void` `<clinit>`() @signature `Lm/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d1c28.  v0:= new `m.a$a`;
  #L3d1c2c.  call `<init>`(v0) @signature `Lm/a$a;.<init>:()V` @kind direct;
  #L3d1c32.  v0:= new `m.a$b`;
  #L3d1c36.  call `<init>`(v0) @signature `Lm/a$b;.<init>:()V` @kind direct;
  #L3d1c3c.  return @kind void;
}
procedure `void` `<init>`(`m.a` v1 @kind this) @signature `Lm/a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3d1c50.  call `<init>`(v1) @signature `Lm/c;.<init>:()V` @kind direct;
  #L3d1c56.  v0:= new `m.b`;
  #L3d1c5a.  call `<init>`(v0) @signature `Lm/b;.<init>:()V` @kind direct;
  #L3d1c60.  v1.`m.a.b` @type ^`m.c` := v0 @kind object;
  #L3d1c64.  v1.`m.a.a` @type ^`m.c` := v0 @kind object;
  #L3d1c68.  return @kind void;
}
procedure `m.a` `d`() @signature `Lm/a;.d:()Lm/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d1bcc.  v0:= `@@m.a.c` @type ^`m.a` @kind object;
  #L3d1bd0.  if v0 == 0 then goto L3d1bda;
  #L3d1bd4.  v0:= `@@m.a.c` @type ^`m.a` @kind object;
  #L3d1bd8.  return v0 @kind object;
  #L3d1bda.  v0:= constclass @type ^`m.a` @kind object;
  #L3d1bde.  @monitorenter v0
  #L3d1be0.  v1:= `@@m.a.c` @type ^`m.a` @kind object;
  #L3d1be4.  if v1 != 0 then goto L3d1bf6;
  #L3d1be8.  v1:= new `m.a`;
  #L3d1bec.  call `<init>`(v1) @signature `Lm/a;.<init>:()V` @kind direct;
  #L3d1bf2.  `@@m.a.c` @type ^`m.a` := v1 @kind object;
  #L3d1bf6.  @monitorexit v0
  #L3d1bf8.  v0:= `@@m.a.c` @type ^`m.a` @kind object;
  #L3d1bfc.  return v0 @kind object;
  #L3d1bfe.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d1c00.  @monitorexit v0
  #L3d1c02.  throw v1;
  catch `java.lang.Throwable` @[L3d1be0..L3d1bf8] goto L3d1bfe;
  catch `java.lang.Throwable` @[L3d1c00..L3d1c02] goto L3d1bfe;
}
procedure `void` `a`(`m.a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lm/a;.a:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d1c7c.  v0:= v1.`m.a.a` @type ^`m.c` @kind object;
  #L3d1c80.  call `a`(v0, v2) @signature `Lm/c;.a:(Ljava/lang/Runnable;)V` @kind virtual;
  #L3d1c86.  return @kind void;
}
procedure `boolean` `b`(`m.a` v1 @kind this) @signature `Lm/a;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d1bac.  v0:= v1.`m.a.a` @type ^`m.c` @kind object;
  #L3d1bb0.  call temp:= `b`(v0) @signature `Lm/c;.b:()Z` @kind virtual;
  #L3d1bb6.  v0:= temp;
  #L3d1bb8.  return v0;
}
procedure `void` `c`(`m.a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lm/a;.c:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d1c98.  v0:= v1.`m.a.a` @type ^`m.c` @kind object;
  #L3d1c9c.  call `c`(v0, v2) @signature `Lm/c;.c:(Ljava/lang/Runnable;)V` @kind virtual;
  #L3d1ca2.  return @kind void;
}
