record `a7.c` @kind class @AccessFlag PUBLIC_ABSTRACT extends `x6.s` @kind interface {
  `java.util.concurrent.ScheduledThreadPoolExecutor` `a7.c.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a7.c` v4 @kind this) @signature `La7/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15f4d8.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15f4de.  v0:= new `a7.c$b`;
  #L15f4e2.  v1:= 0I;
  #L15f4e4.  call `<init>`(v0, v4, v1) @signature `La7/c$b;.<init>:(La7/c;La7/c$a;)V` @kind direct;
  #L15f4ea.  v1:= new `a7.c$a`;
  #L15f4ee.  v2:= 1I;
  #L15f4f0.  call `<init>`(v1, v4, v2, v0) @signature `La7/c$a;.<init>:(La7/c;ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L15f4f6.  v4.`a7.c.a` @type ^`java.util.concurrent.ScheduledThreadPoolExecutor` := v1 @kind object;
  #L15f4fa.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L15f4fe.  v2:= 3L;
  #L15f502.  call `setKeepAliveTime`(v1, v2, v0) @signature `Ljava/util/concurrent/ScheduledThreadPoolExecutor;.setKeepAliveTime:(JLjava/util/concurrent/TimeUnit;)V` @kind virtual;
  #L15f508.  return @kind void;
}
procedure `java.lang.String` `h`(`java.lang.Throwable` v1 @kind object) @signature `La7/c;.h:(Ljava/lang/Throwable;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15f410.  v0:= instanceof @variable v1 @type ^`java.lang.OutOfMemoryError` @kind boolean;
  #L15f414.  if v0 == 0 then goto L15f41e;
  #L15f418.  v1:= "Firebase Database encountered an OutOfMemoryError. You may need to reduce the amount of data you are syncing to the client (e.g. by using queries or syncing a deeper path). See https://firebase.google.com/docs/database/ios/structure-data#best_practices_for_data_structure and https://firebase.google.com/docs/database/android/retrieve-data#filtering_data" @kind object;
  #L15f41c.  return v1 @kind object;
  #L15f41e.  v0:= instanceof @variable v1 @type ^`java.lang.NoClassDefFoundError` @kind boolean;
  #L15f422.  if v0 == 0 then goto L15f42c;
  #L15f426.  v1:= "A symbol that the Firebase Database SDK depends on failed to load. This usually indicates that your project includes an incompatible version of another Firebase dependency. If updating your dependencies to the latest version does not resolve this issue, please file a report at https://github.com/firebase/firebase-android-sdk" @kind object;
  #L15f42a.  return v1 @kind object;
  #L15f42c.  v1:= instanceof @variable v1 @type ^`s6.c` @kind boolean;
  #L15f430.  if v1 == 0 then goto L15f43a;
  #L15f434.  v1:= "" @kind object;
  #L15f438.  return v1 @kind object;
  #L15f43a.  v1:= new `java.lang.StringBuilder`;
  #L15f43e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f444.  v0:= "Uncaught exception in Firebase Database runloop (" @kind object;
  #L15f448.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f44e.  call temp:= `g`() @signature `Lcom/google/firebase/database/c;.g:()Ljava/lang/String;` @kind static;
  #L15f454.  v0:= temp @kind object;
  #L15f456.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f45c.  v0:= "). If you are not already on the latest version of the Firebase SDKs, try updating your dependencies. Should this problem persist, please file a report at https://github.com/firebase/firebase-android-sdk" @kind object;
  #L15f460.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f466.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f46c.  v1:= temp @kind object;
  #L15f46e.  return v1 @kind object;
}
procedure `void` `a`(`a7.c` v2 @kind this) @signature `La7/c;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15f51c.  v0:= v2.`a7.c.a` @type ^`java.util.concurrent.ScheduledThreadPoolExecutor` @kind object;
  #L15f520.  v1:= 1I;
  #L15f522.  call `setCorePoolSize`(v0, v1) @signature `Ljava/util/concurrent/ScheduledThreadPoolExecutor;.setCorePoolSize:(I)V` @kind virtual;
  #L15f528.  return @kind void;
}
procedure `java.util.concurrent.ScheduledFuture` `b`(`a7.c` v2 @kind this, `java.lang.Runnable` v3 @kind object, `long` v4 ) @signature `La7/c;.b:(Ljava/lang/Runnable;J)Ljava/util/concurrent/ScheduledFuture;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15f498.  v0:= v2.`a7.c.a` @type ^`java.util.concurrent.ScheduledThreadPoolExecutor` @kind object;
  #L15f49c.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L15f4a0.  call temp:= `schedule`(v0, v3, v4, v1) @signature `Ljava/util/concurrent/ScheduledThreadPoolExecutor;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind virtual;
  #L15f4a6.  v3:= temp @kind object;
  #L15f4a8.  return v3 @kind object;
}
procedure `void` `c`(`a7.c` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `La7/c;.c:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f53c.  v0:= v1.`a7.c.a` @type ^`java.util.concurrent.ScheduledThreadPoolExecutor` @kind object;
  #L15f540.  call `execute`(v0, v2) @signature `Ljava/util/concurrent/ScheduledThreadPoolExecutor;.execute:(Ljava/lang/Runnable;)V` @kind virtual;
  #L15f546.  return @kind void;
}
procedure `java.util.concurrent.ScheduledExecutorService` `d`(`a7.c` v1 @kind this) @signature `La7/c;.d:()Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f480.  v0:= v1.`a7.c.a` @type ^`java.util.concurrent.ScheduledThreadPoolExecutor` @kind object;
  #L15f484.  return v0 @kind object;
}
procedure `java.util.concurrent.ThreadFactory` `e`(`a7.c` v1 @kind this) @signature `La7/c;.e:()Ljava/util/concurrent/ThreadFactory;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15f4bc.  call temp:= `defaultThreadFactory`() @signature `Ljava/util/concurrent/Executors;.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L15f4c2.  v0:= temp @kind object;
  #L15f4c4.  return v0 @kind object;
}
procedure `x6.a0` `f`(`a7.c` v1 @kind this) @signature `La7/c;.f:()Lx6/a0;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15f558.  v0:= `@@x6.a0.a` @type ^`x6.a0` @kind object;
  #L15f55c.  return v0 @kind object;
}
procedure `void` `g`(`java.lang.Throwable` v0 @kind object) @signature `La7/c;.g:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
