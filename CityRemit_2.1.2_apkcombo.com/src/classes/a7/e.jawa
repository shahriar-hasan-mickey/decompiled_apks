record `a7.e` @kind class @AccessFlag PUBLIC {
}
procedure `long` `a`(`f7.k` v5 @kind object) @signature `La7/e;.a:(Lf7/k;)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15ff20.  v0:= instanceof @variable v5 @type ^`f7.f` @kind boolean;
  #L15ff24.  v1:= 8L;
  #L15ff28.  if v0 == 0 then goto L15ff2e;
  #L15ff2c.  goto L15ff6c;
  #L15ff2e.  v0:= instanceof @variable v5 @type ^`f7.l` @kind boolean;
  #L15ff32.  if v0 == 0 then goto L15ff38;
  #L15ff36.  goto L15ff6c;
  #L15ff38.  v0:= instanceof @variable v5 @type ^`f7.a` @kind boolean;
  #L15ff3c.  if v0 == 0 then goto L15ff46;
  #L15ff40.  v1:= 4L;
  #L15ff44.  goto L15ff6c;
  #L15ff46.  v0:= instanceof @variable v5 @type ^`f7.t` @kind boolean;
  #L15ff4a.  if v0 == 0 then goto L15ffa0;
  #L15ff4e.  v0:= 2L;
  #L15ff52.  call temp:= `getValue`(v5) @signature `Lf7/n;.getValue:()Ljava/lang/Object;` @kind interface;
  #L15ff58.  v2:= temp @kind object;
  #L15ff5a.  v2:= (`java.lang.String`) v2 @kind object;
  #L15ff5e.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15ff64.  v2:= temp;
  #L15ff66.  v2:= (`long`) v2 @kind i2l;
  #L15ff68.  v1:= v2 + v0 @kind long;
  #L15ff6c.  call temp:= `q`(v5) @signature `Lf7/k;.q:()Lf7/n;` @kind virtual;
  #L15ff72.  v0:= temp @kind object;
  #L15ff74.  call temp:= `isEmpty`(v0) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L15ff7a.  v0:= temp;
  #L15ff7c.  if v0 == 0 then goto L15ff82;
  #L15ff80.  return v1 @kind wide;
  #L15ff82.  v3:= 24L;
  #L15ff86.  v1:= v1 + v3 @kind long;
  #L15ff88.  call temp:= `q`(v5) @signature `Lf7/k;.q:()Lf7/n;` @kind virtual;
  #L15ff8e.  v5:= temp @kind object;
  #L15ff90.  v5:= (`f7.k`) v5 @kind object;
  #L15ff94.  call temp:= `a`(v5) @signature `La7/e;.a:(Lf7/k;)J` @kind static;
  #L15ff9a.  v3:= temp @kind wide;
  #L15ff9c.  v1:= v1 + v3 @kind long;
  #L15ff9e.  return v1 @kind wide;
  #L15ffa0.  v0:= new `java.lang.IllegalArgumentException`;
  #L15ffa4.  v1:= new `java.lang.StringBuilder`;
  #L15ffa8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15ffae.  v2:= "Unknown leaf node type: " @kind object;
  #L15ffb2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ffb8.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15ffbe.  v5:= temp @kind object;
  #L15ffc0.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ffc6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ffcc.  v5:= temp @kind object;
  #L15ffce.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ffd4.  throw v0;
}
procedure `long` `b`(`f7.n` v8 @kind object) @signature `La7/e;.b:(Lf7/n;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L15ffe8.  call temp:= `isEmpty`(v8) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L15ffee.  v0:= temp;
  #L15fff0.  v1:= 4L;
  #L15fff4.  if v0 == 0 then goto L15fffa;
  #L15fff8.  return v1 @kind wide;
  #L15fffa.  call temp:= `A`(v8) @signature `Lf7/n;.A:()Z` @kind interface;
  #L160000.  v0:= temp;
  #L160002.  if v0 == 0 then goto L160014;
  #L160006.  v8:= (`f7.k`) v8 @kind object;
  #L16000a.  call temp:= `a`(v8) @signature `La7/e;.a:(Lf7/k;)J` @kind static;
  #L160010.  v0:= temp @kind wide;
  #L160012.  return v0 @kind wide;
  #L160014.  v0:= instanceof @variable v8 @type ^`f7.c` @kind boolean;
  #L160018.  v3:= new `java.lang.StringBuilder`;
  #L16001c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160022.  v4:= "Unexpected node type: " @kind object;
  #L160026.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16002c.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L160032.  v4:= temp @kind object;
  #L160034.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16003a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160040.  v3:= temp @kind object;
  #L160042.  call `g`(v0, v3) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L160048.  v3:= 1L;
  #L16004c.  call temp:= `iterator`(v8) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L160052.  v0:= temp @kind object;
  #L160054.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L16005a.  v5:= temp;
  #L16005c.  if v5 == 0 then goto L16009e;
  #L160060.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L160066.  v5:= temp @kind object;
  #L160068.  v5:= (`f7.m`) v5 @kind object;
  #L16006c.  call temp:= `c`(v5) @signature `Lf7/m;.c:()Lf7/b;` @kind virtual;
  #L160072.  v6:= temp @kind object;
  #L160074.  call temp:= `d`(v6) @signature `Lf7/b;.d:()Ljava/lang/String;` @kind virtual;
  #L16007a.  v6:= temp @kind object;
  #L16007c.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L160082.  v6:= temp;
  #L160084.  v6:= (`long`) v6 @kind i2l;
  #L160086.  v3:= v3 + v6 @kind long;
  #L160088.  v3:= v3 + v1 @kind long;
  #L16008a.  call temp:= `d`(v5) @signature `Lf7/m;.d:()Lf7/n;` @kind virtual;
  #L160090.  v5:= temp @kind object;
  #L160092.  call temp:= `b`(v5) @signature `La7/e;.b:(Lf7/n;)J` @kind static;
  #L160098.  v5:= temp @kind wide;
  #L16009a.  v3:= v3 + v5 @kind long;
  #L16009c.  goto L160054;
  #L16009e.  call temp:= `q`(v8) @signature `Lf7/n;.q:()Lf7/n;` @kind interface;
  #L1600a4.  v0:= temp @kind object;
  #L1600a6.  call temp:= `isEmpty`(v0) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L1600ac.  v0:= temp;
  #L1600ae.  if v0 != 0 then goto L1600ce;
  #L1600b2.  v0:= 12L;
  #L1600b6.  v3:= v3 + v0 @kind long;
  #L1600b8.  call temp:= `q`(v8) @signature `Lf7/n;.q:()Lf7/n;` @kind interface;
  #L1600be.  v8:= temp @kind object;
  #L1600c0.  v8:= (`f7.k`) v8 @kind object;
  #L1600c4.  call temp:= `a`(v8) @signature `La7/e;.a:(Lf7/k;)J` @kind static;
  #L1600ca.  v0:= temp @kind wide;
  #L1600cc.  v3:= v3 + v0 @kind long;
  #L1600ce.  return v3 @kind wide;
}
procedure `int` `c`(`f7.n` v4 @kind object) @signature `La7/e;.c:(Lf7/n;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15fe84.  call temp:= `isEmpty`(v4) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L15fe8a.  v0:= temp;
  #L15fe8c.  v1:= 0I;
  #L15fe8e.  if v0 == 0 then goto L15fe94;
  #L15fe92.  return v1;
  #L15fe94.  call temp:= `A`(v4) @signature `Lf7/n;.A:()Z` @kind interface;
  #L15fe9a.  v0:= temp;
  #L15fe9c.  if v0 == 0 then goto L15fea4;
  #L15fea0.  v4:= 1I;
  #L15fea2.  return v4;
  #L15fea4.  v0:= instanceof @variable v4 @type ^`f7.c` @kind boolean;
  #L15fea8.  v2:= new `java.lang.StringBuilder`;
  #L15feac.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15feb2.  v3:= "Unexpected node type: " @kind object;
  #L15feb6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15febc.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15fec2.  v3:= temp @kind object;
  #L15fec4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15feca.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15fed0.  v2:= temp @kind object;
  #L15fed2.  call `g`(v0, v2) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L15fed8.  call temp:= `iterator`(v4) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15fede.  v4:= temp @kind object;
  #L15fee0.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15fee6.  v0:= temp;
  #L15fee8.  if v0 == 0 then goto L15ff0c;
  #L15feec.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15fef2.  v0:= temp @kind object;
  #L15fef4.  v0:= (`f7.m`) v0 @kind object;
  #L15fef8.  call temp:= `d`(v0) @signature `Lf7/m;.d:()Lf7/n;` @kind virtual;
  #L15fefe.  v0:= temp @kind object;
  #L15ff00.  call temp:= `c`(v0) @signature `La7/e;.c:(Lf7/n;)I` @kind static;
  #L15ff06.  v0:= temp;
  #L15ff08.  v1:= v1 + v0 @kind int;
  #L15ff0a.  goto L15fee0;
  #L15ff0c.  return v1;
}
