record `a7.k` @kind class @AccessFlag PUBLIC {
  `f7.b` `a7.k.a` @AccessFlag PRIVATE;
  `a7.k` `a7.k.b` @AccessFlag PRIVATE;
  `a7.l` `a7.k.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a7.k` v2 @kind this) @signature `La7/k;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L160940.  v0:= new `a7.l`;
  #L160944.  call `<init>`(v0) @signature `La7/l;.<init>:()V` @kind direct;
  #L16094a.  v1:= 0I;
  #L16094c.  call `<init>`(v2, v1, v1, v0) @signature `La7/k;.<init>:(Lf7/b;La7/k;La7/l;)V` @kind direct;
  #L160952.  return @kind void;
}
procedure `void` `<init>`(`a7.k` v0 @kind this, `f7.b` v1 @kind object, `a7.k` v2 @kind object, `a7.l` v3 @kind object) @signature `La7/k;.<init>:(Lf7/b;La7/k;La7/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L160964.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16096a.  v0.`a7.k.a` @type ^`f7.b` := v1 @kind object;
  #L16096e.  v0.`a7.k.b` @type ^`a7.k` := v2 @kind object;
  #L160972.  v0.`a7.k.c` @type ^`a7.l` := v3 @kind object;
  #L160976.  return @kind void;
}
procedure `void` `m`(`a7.k` v2 @kind this, `f7.b` v3 @kind object, `a7.k` v4 @kind object) @signature `La7/k;.m:(Lf7/b;La7/k;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L160a6c.  call temp:= `i`(v4) @signature `La7/k;.i:()Z` @kind virtual;
  #L160a72.  v0:= temp;
  #L160a74.  v1:= v2.`a7.k.c` @type ^`a7.l` @kind object;
  #L160a78.  v1:= v1.`a7.l.a` @type ^`java.util.Map` @kind object;
  #L160a7c.  call temp:= `containsKey`(v1, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L160a82.  v1:= temp;
  #L160a84.  if v0 == 0 then goto L160aa2;
  #L160a88.  if v1 == 0 then goto L160aa2;
  #L160a8c.  v4:= v2.`a7.k.c` @type ^`a7.l` @kind object;
  #L160a90.  v4:= v4.`a7.l.a` @type ^`java.util.Map` @kind object;
  #L160a94.  call temp:= `remove`(v4, v3) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L160a9a.  call `n`(v2) @signature `La7/k;.n:()V` @kind direct;
  #L160aa0.  goto L160abe;
  #L160aa2.  if v0 != 0 then goto L160abe;
  #L160aa6.  if v1 != 0 then goto L160abe;
  #L160aaa.  v0:= v2.`a7.k.c` @type ^`a7.l` @kind object;
  #L160aae.  v0:= v0.`a7.l.a` @type ^`java.util.Map` @kind object;
  #L160ab2.  v4:= v4.`a7.k.c` @type ^`a7.l` @kind object;
  #L160ab6.  call temp:= `put`(v0, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L160abc.  goto L160a9a;
  #L160abe.  return @kind void;
}
procedure `void` `n`(`a7.k` v2 @kind this) @signature `La7/k;.n:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L160ad0.  v0:= v2.`a7.k.b` @type ^`a7.k` @kind object;
  #L160ad4.  if v0 == 0 then goto L160ae2;
  #L160ad8.  v1:= v2.`a7.k.a` @type ^`f7.b` @kind object;
  #L160adc.  call `m`(v0, v1, v2) @signature `La7/k;.m:(Lf7/b;La7/k;)V` @kind direct;
  #L160ae2.  return @kind void;
}
procedure `boolean` `a`(`a7.k` v1 @kind this, `a7.k$b` v2 @kind object) @signature `La7/k;.a:(La7/k$b;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1607cc.  v0:= 0I;
  #L1607ce.  call temp:= `b`(v1, v2, v0) @signature `La7/k;.b:(La7/k$b;Z)Z` @kind virtual;
  #L1607d4.  v2:= temp;
  #L1607d6.  return v2;
}
procedure `boolean` `b`(`a7.k` v1 @kind this, `a7.k$b` v2 @kind object, `boolean` v3 ) @signature `La7/k;.b:(La7/k$b;Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1607e8.  if v3 == 0 then goto L1607f0;
  #L1607ec.  v3:= v1 @kind object;
  #L1607ee.  goto L1607f4;
  #L1607f0.  v3:= v1.`a7.k.b` @type ^`a7.k` @kind object;
  #L1607f4.  if v3 == 0 then goto L16080e;
  #L1607f8.  call temp:= `a`(v2, v3) @signature `La7/k$b;.a:(La7/k;)Z` @kind interface;
  #L1607fe.  v0:= temp;
  #L160800.  if v0 == 0 then goto L160808;
  #L160804.  v2:= 1I;
  #L160806.  return v2;
  #L160808.  v3:= v3.`a7.k.b` @type ^`a7.k` @kind object;
  #L16080c.  goto L1607f4;
  #L16080e.  v2:= 0I;
  #L160810.  return v2;
}
procedure `void` `c`(`a7.k` v5 @kind this, `a7.k$c` v6 @kind object) @signature `La7/k;.c:(La7/k$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L160988.  v0:= v5.`a7.k.c` @type ^`a7.l` @kind object;
  #L16098c.  v0:= v0.`a7.l.a` @type ^`java.util.Map` @kind object;
  #L160990.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L160996.  v0:= temp @kind object;
  #L160998.  call temp:= `toArray`(v0) @signature `Ljava/util/Set;.toArray:()[Ljava/lang/Object;` @kind interface;
  #L16099e.  v0:= temp @kind object;
  #L1609a0.  v1:= 0I;
  #L1609a2.  v2:= length @variable v0;
  #L1609a4.  if v1 >= v2 then goto L1609de;
  #L1609a8.  v2:= v0[v1] @kind object;
  #L1609ac.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L1609b0.  v3:= new `a7.k`;
  #L1609b4.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1609ba.  v4:= temp @kind object;
  #L1609bc.  v4:= (`f7.b`) v4 @kind object;
  #L1609c0.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1609c6.  v2:= temp @kind object;
  #L1609c8.  v2:= (`a7.l`) v2 @kind object;
  #L1609cc.  call `<init>`(v3, v4, v5, v2) @signature `La7/k;.<init>:(Lf7/b;La7/k;La7/l;)V` @kind direct;
  #L1609d2.  call `a`(v6, v3) @signature `La7/k$c;.a:(La7/k;)V` @kind interface;
  #L1609d8.  v1:= v1 + 1;
  #L1609dc.  goto L1609a2;
  #L1609de.  return @kind void;
}
procedure `void` `d`(`a7.k` v1 @kind this, `a7.k$c` v2 @kind object) @signature `La7/k;.d:(La7/k$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1609f0.  v0:= 0I;
  #L1609f2.  call `e`(v1, v2, v0, v0) @signature `La7/k;.e:(La7/k$c;ZZ)V` @kind virtual;
  #L1609f8.  return @kind void;
}
procedure `void` `e`(`a7.k` v1 @kind this, `a7.k$c` v2 @kind object, `boolean` v3 , `boolean` v4 ) @signature `La7/k;.e:(La7/k$c;ZZ)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160a0c.  if v3 == 0 then goto L160a1a;
  #L160a10.  if v4 != 0 then goto L160a1a;
  #L160a14.  call `a`(v2, v1) @signature `La7/k$c;.a:(La7/k;)V` @kind interface;
  #L160a1a.  v0:= new `a7.k$a`;
  #L160a1e.  call `<init>`(v0, v1, v2, v4) @signature `La7/k$a;.<init>:(La7/k;La7/k$c;Z)V` @kind direct;
  #L160a24.  call `c`(v1, v0) @signature `La7/k;.c:(La7/k$c;)V` @kind virtual;
  #L160a2a.  if v3 == 0 then goto L160a38;
  #L160a2e.  if v4 == 0 then goto L160a38;
  #L160a32.  call `a`(v2, v1) @signature `La7/k$c;.a:(La7/k;)V` @kind interface;
  #L160a38.  return @kind void;
}
procedure `x6.l` `f`(`a7.k` v4 @kind this) @signature `La7/k;.f:()Lx6/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L160af4.  v0:= v4.`a7.k.b` @type ^`a7.k` @kind object;
  #L160af8.  v1:= 0I;
  #L160afa.  v2:= 1I;
  #L160afc.  if v0 == 0 then goto L160b2a;
  #L160b00.  v0:= v4.`a7.k.a` @type ^`f7.b` @kind object;
  #L160b04.  if v0 == 0 then goto L160b0a;
  #L160b08.  v1:= 1I;
  #L160b0a.  call `f`(v1) @signature `La7/m;.f:(Z)V` @kind static;
  #L160b10.  v0:= v4.`a7.k.b` @type ^`a7.k` @kind object;
  #L160b14.  call temp:= `f`(v0) @signature `La7/k;.f:()Lx6/l;` @kind virtual;
  #L160b1a.  v0:= temp @kind object;
  #L160b1c.  v1:= v4.`a7.k.a` @type ^`f7.b` @kind object;
  #L160b20.  call temp:= `b0`(v0, v1) @signature `Lx6/l;.b0:(Lf7/b;)Lx6/l;` @kind virtual;
  #L160b26.  v0:= temp @kind object;
  #L160b28.  return v0 @kind object;
  #L160b2a.  v0:= v4.`a7.k.a` @type ^`f7.b` @kind object;
  #L160b2e.  if v0 == 0 then goto L160b4a;
  #L160b32.  v0:= new `x6.l`;
  #L160b36.  v2:= new `f7.b`[v2];
  #L160b3a.  v3:= v4.`a7.k.a` @type ^`f7.b` @kind object;
  #L160b3e.  v2[v1]:= v3 @kind object;
  #L160b42.  call `<init>`(v0, v2) @signature `Lx6/l;.<init>:([Lf7/b;)V` @kind direct;
  #L160b48.  goto L160b52;
  #L160b4a.  call temp:= `g0`() @signature `Lx6/l;.g0:()Lx6/l;` @kind static;
  #L160b50.  v0:= temp @kind object;
  #L160b52.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`a7.k` v1 @kind this) @signature `La7/k;.g:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160880.  v0:= v1.`a7.k.c` @type ^`a7.l` @kind object;
  #L160884.  v0:= v0.`a7.l.b` @type ^`java.lang.Object` @kind object;
  #L160888.  return v0 @kind object;
}
procedure `boolean` `h`(`a7.k` v1 @kind this) @signature `La7/k;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160824.  v0:= v1.`a7.k.c` @type ^`a7.l` @kind object;
  #L160828.  v0:= v0.`a7.l.a` @type ^`java.util.Map` @kind object;
  #L16082c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L160832.  v0:= temp;
  #L160834.  v0:= v0 ^~ 1;
  #L160838.  return v0;
}
procedure `boolean` `i`(`a7.k` v2 @kind this) @signature `La7/k;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16084c.  v0:= v2.`a7.k.c` @type ^`a7.l` @kind object;
  #L160850.  v1:= v0.`a7.l.b` @type ^`java.lang.Object` @kind object;
  #L160854.  if v1 != 0 then goto L16086c;
  #L160858.  v0:= v0.`a7.l.a` @type ^`java.util.Map` @kind object;
  #L16085c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L160862.  v0:= temp;
  #L160864.  if v0 == 0 then goto L16086c;
  #L160868.  v0:= 1I;
  #L16086a.  goto L16086e;
  #L16086c.  v0:= 0I;
  #L16086e.  return v0;
}
procedure `void` `j`(`a7.k` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `La7/k;.j:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160a4c.  v0:= v1.`a7.k.c` @type ^`a7.l` @kind object;
  #L160a50.  v0.`a7.l.b` @type ^`java.lang.Object` := v2 @kind object;
  #L160a54.  call `n`(v1) @signature `La7/k;.n:()V` @kind direct;
  #L160a5a.  return @kind void;
}
procedure `a7.k` `k`(`a7.k` v4 @kind this, `x6.l` v5 @kind object) @signature `La7/k;.k:(Lx6/l;)La7/k;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L160758.  call temp:= `h0`(v5) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L16075e.  v0:= temp @kind object;
  #L160760.  v1:= v4 @kind object;
  #L160762.  if v0 == 0 then goto L1607b8;
  #L160766.  v2:= v1.`a7.k.c` @type ^`a7.l` @kind object;
  #L16076a.  v2:= v2.`a7.l.a` @type ^`java.util.Map` @kind object;
  #L16076e.  call temp:= `containsKey`(v2, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L160774.  v2:= temp;
  #L160776.  if v2 == 0 then goto L160790;
  #L16077a.  v2:= v1.`a7.k.c` @type ^`a7.l` @kind object;
  #L16077e.  v2:= v2.`a7.l.a` @type ^`java.util.Map` @kind object;
  #L160782.  call temp:= `get`(v2, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L160788.  v2:= temp @kind object;
  #L16078a.  v2:= (`a7.l`) v2 @kind object;
  #L16078e.  goto L16079a;
  #L160790.  v2:= new `a7.l`;
  #L160794.  call `<init>`(v2) @signature `La7/l;.<init>:()V` @kind direct;
  #L16079a.  v3:= new `a7.k`;
  #L16079e.  call `<init>`(v3, v0, v1, v2) @signature `La7/k;.<init>:(Lf7/b;La7/k;La7/l;)V` @kind direct;
  #L1607a4.  call temp:= `k0`(v5) @signature `Lx6/l;.k0:()Lx6/l;` @kind virtual;
  #L1607aa.  v5:= temp @kind object;
  #L1607ac.  call temp:= `h0`(v5) @signature `Lx6/l;.h0:()Lf7/b;` @kind virtual;
  #L1607b2.  v0:= temp @kind object;
  #L1607b4.  v1:= v3 @kind object;
  #L1607b6.  goto L160762;
  #L1607b8.  return v1 @kind object;
}
procedure `java.lang.String` `l`(`a7.k` v3 @kind this, `java.lang.String` v4 @kind object) @signature `La7/k;.l:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1608bc.  v0:= v3.`a7.k.a` @type ^`f7.b` @kind object;
  #L1608c0.  if v0 != 0 then goto L1608ca;
  #L1608c4.  v0:= "<anon>" @kind object;
  #L1608c8.  goto L1608d2;
  #L1608ca.  call temp:= `d`(v0) @signature `Lf7/b;.d:()Ljava/lang/String;` @kind virtual;
  #L1608d0.  v0:= temp @kind object;
  #L1608d2.  v1:= new `java.lang.StringBuilder`;
  #L1608d6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1608dc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1608e2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1608e8.  v0:= "\n" @kind object;
  #L1608ec.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1608f2.  v0:= v3.`a7.k.c` @type ^`a7.l` @kind object;
  #L1608f6.  v2:= new `java.lang.StringBuilder`;
  #L1608fa.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160900.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160906.  v4:= "\t" @kind object;
  #L16090a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160910.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160916.  v4:= temp @kind object;
  #L160918.  call temp:= `a`(v0, v4) @signature `La7/l;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L16091e.  v4:= temp @kind object;
  #L160920.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160926.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16092c.  v4:= temp @kind object;
  #L16092e.  return v4 @kind object;
}
procedure `java.lang.String` `toString`(`a7.k` v1 @kind this) @signature `La7/k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16089c.  v0:= "" @kind object;
  #L1608a0.  call temp:= `l`(v1, v0) @signature `La7/k;.l:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1608a6.  v0:= temp @kind object;
  #L1608a8.  return v0 @kind object;
}
