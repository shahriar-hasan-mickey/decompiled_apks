record `kotlinx.coroutines.scheduling.n` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.scheduling.n.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.scheduling.n.blockingTasksInBuffer` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.n.consumerIndex` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.scheduling.n.lastScheduledTask` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.n.producerIndex` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.scheduling.n.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.n.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.n.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.n.e` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3be370.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L3be374.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L3be378.  v2:= "lastScheduledTask" @kind object;
  #L3be37c.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L3be382.  v1:= temp @kind object;
  #L3be384.  `@@kotlinx.coroutines.scheduling.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v1 @kind object;
  #L3be388.  v1:= "producerIndex" @kind object;
  #L3be38c.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L3be392.  v1:= temp @kind object;
  #L3be394.  `@@kotlinx.coroutines.scheduling.n.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L3be398.  v1:= "consumerIndex" @kind object;
  #L3be39c.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L3be3a2.  v1:= temp @kind object;
  #L3be3a4.  `@@kotlinx.coroutines.scheduling.n.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L3be3a8.  v1:= "blockingTasksInBuffer" @kind object;
  #L3be3ac.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L3be3b2.  v0:= temp @kind object;
  #L3be3b4.  `@@kotlinx.coroutines.scheduling.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L3be3b8.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.n` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3be3cc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3be3d2.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L3be3d6.  v1:= 128I;
  #L3be3da.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L3be3e0.  v2.`kotlinx.coroutines.scheduling.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L3be3e4.  v0:= 0I;
  #L3be3e6.  v2.`kotlinx.coroutines.scheduling.n.lastScheduledTask` @type ^`java.lang.Object` := v0 @kind object;
  #L3be3ea.  v0:= 0I;
  #L3be3ec.  v2.`kotlinx.coroutines.scheduling.n.producerIndex` @type ^`int` := v0;
  #L3be3f0.  v2.`kotlinx.coroutines.scheduling.n.consumerIndex` @type ^`int` := v0;
  #L3be3f4.  v2.`kotlinx.coroutines.scheduling.n.blockingTasksInBuffer` @type ^`int` := v0;
  #L3be3f8.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `b`(`kotlinx.coroutines.scheduling.n` v0 @kind object, `kotlinx.coroutines.scheduling.h` v1 @kind object, `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.b:(Lkotlinx/coroutines/scheduling/n;Lkotlinx/coroutines/scheduling/h;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L3be028.  v3:= v3 ^& 2;
  #L3be02c.  if v3 == 0 then goto L3be032;
  #L3be030.  v2:= 0I;
  #L3be032.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/scheduling/n;.a:(Lkotlinx/coroutines/scheduling/h;Z)Lkotlinx/coroutines/scheduling/h;` @kind virtual;
  #L3be038.  v0:= temp @kind object;
  #L3be03a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.scheduling.h` `c`(`kotlinx.coroutines.scheduling.n` v2 @kind this, `kotlinx.coroutines.scheduling.h` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.c:(Lkotlinx/coroutines/scheduling/h;)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3be08c.  v0:= v3.`kotlinx.coroutines.scheduling.h.p` @type ^`kotlinx.coroutines.scheduling.i` @kind object;
  #L3be090.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/scheduling/i;.b:()I` @kind interface;
  #L3be096.  v0:= temp;
  #L3be098.  v1:= 1I;
  #L3be09a.  if v0 != v1 then goto L3be0a0;
  #L3be09e.  goto L3be0a2;
  #L3be0a0.  v1:= 0I;
  #L3be0a2.  if v1 == 0 then goto L3be0b0;
  #L3be0a6.  v0:= `@@kotlinx.coroutines.scheduling.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L3be0aa.  call temp:= `incrementAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L3be0b0.  call temp:= `e`(v2) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @kind virtual;
  #L3be0b6.  v0:= temp;
  #L3be0b8.  v1:= 127I;
  #L3be0bc.  if v0 != v1 then goto L3be0c2;
  #L3be0c0.  return v3 @kind object;
  #L3be0c2.  v0:= v2.`kotlinx.coroutines.scheduling.n.producerIndex` @type ^`int`;
  #L3be0c6.  v0:= v0 ^& v1 @kind int;
  #L3be0c8.  v1:= v2.`kotlinx.coroutines.scheduling.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3be0cc.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3be0d2.  v1:= temp @kind object;
  #L3be0d4.  if v1 == 0 then goto L3be0e0;
  #L3be0d8.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L3be0de.  goto L3be0c8;
  #L3be0e0.  v1:= v2.`kotlinx.coroutines.scheduling.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3be0e4.  call `lazySet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L3be0ea.  v3:= `@@kotlinx.coroutines.scheduling.n.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L3be0ee.  call temp:= `incrementAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L3be0f4.  v3:= 0I;
  #L3be0f6.  return v3 @kind object;
}
procedure `void` `d`(`kotlinx.coroutines.scheduling.n` v3 @kind this, `kotlinx.coroutines.scheduling.h` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.d:(Lkotlinx/coroutines/scheduling/h;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3be40c.  if v4 == 0 then goto L3be45e;
  #L3be410.  v4:= v4.`kotlinx.coroutines.scheduling.h.p` @type ^`kotlinx.coroutines.scheduling.i` @kind object;
  #L3be414.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/scheduling/i;.b:()I` @kind interface;
  #L3be41a.  v4:= temp;
  #L3be41c.  v0:= 0I;
  #L3be41e.  v1:= 1I;
  #L3be420.  if v4 != v1 then goto L3be428;
  #L3be424.  v4:= 1I;
  #L3be426.  goto L3be42a;
  #L3be428.  v4:= 0I;
  #L3be42a.  if v4 == 0 then goto L3be45e;
  #L3be42e.  v4:= `@@kotlinx.coroutines.scheduling.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L3be432.  call temp:= `decrementAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L3be438.  v4:= temp;
  #L3be43a.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3be440.  v2:= temp;
  #L3be442.  if v2 == 0 then goto L3be45e;
  #L3be446.  if v4 < 0 then goto L3be44c;
  #L3be44a.  v0:= 1I;
  #L3be44c.  if v0 == 0 then goto L3be452;
  #L3be450.  goto L3be45e;
  #L3be452.  v4:= new `java.lang.AssertionError`;
  #L3be456.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3be45c.  throw v4;
  #L3be45e.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `i`(`kotlinx.coroutines.scheduling.n` v5 @kind this) @signature `Lkotlinx/coroutines/scheduling/n;.i:()Lkotlinx/coroutines/scheduling/h;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3be138.  v0:= v5.`kotlinx.coroutines.scheduling.n.consumerIndex` @type ^`int`;
  #L3be13c.  v1:= v5.`kotlinx.coroutines.scheduling.n.producerIndex` @type ^`int`;
  #L3be140.  v1:= v0 - v1 @kind int;
  #L3be144.  v2:= 0I;
  #L3be146.  if v1 != 0 then goto L3be14c;
  #L3be14a.  return v2 @kind object;
  #L3be14c.  v1:= v0 ^& 127;
  #L3be150.  v3:= `@@kotlinx.coroutines.scheduling.n.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L3be154.  v4:= v0 + 1;
  #L3be158.  call temp:= `compareAndSet`(v3, v5, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L3be15e.  v0:= temp;
  #L3be160.  if v0 == 0 then goto L3be138;
  #L3be164.  v0:= v5.`kotlinx.coroutines.scheduling.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3be168.  call temp:= `getAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3be16e.  v0:= temp @kind object;
  #L3be170.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L3be174.  if v0 != 0 then goto L3be17a;
  #L3be178.  goto L3be138;
  #L3be17a.  call `d`(v5, v0) @signature `Lkotlinx/coroutines/scheduling/n;.d:(Lkotlinx/coroutines/scheduling/h;)V` @kind direct;
  #L3be180.  return v0 @kind object;
}
procedure `boolean` `j`(`kotlinx.coroutines.scheduling.n` v1 @kind this, `kotlinx.coroutines.scheduling.d` v2 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.j:(Lkotlinx/coroutines/scheduling/d;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L3bdfb0.  call temp:= `i`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.i:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3bdfb6.  v0:= temp @kind object;
  #L3bdfb8.  if v0 != 0 then goto L3bdfc0;
  #L3bdfbc.  v2:= 0I;
  #L3bdfbe.  return v2;
  #L3bdfc0.  call temp:= `a`(v2, v0) @signature `Lkotlinx/coroutines/internal/s;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L3bdfc6.  v2:= 1I;
  #L3bdfc8.  return v2;
}
procedure `long` `m`(`kotlinx.coroutines.scheduling.n` v7 @kind this, `kotlinx.coroutines.scheduling.n` v8 @kind object, `boolean` v9 ) @signature `Lkotlinx/coroutines/scheduling/n;.m:(Lkotlinx/coroutines/scheduling/n;Z)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3be2e8.  v0:= v8.`kotlinx.coroutines.scheduling.n.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L3be2ec.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L3be2f0.  v1:= -2L;
  #L3be2f4.  if v0 != 0 then goto L3be2fa;
  #L3be2f8.  return v1 @kind wide;
  #L3be2fa.  v3:= 0I;
  #L3be2fc.  if v9 == 0 then goto L3be31c;
  #L3be300.  v4:= v0.`kotlinx.coroutines.scheduling.h.p` @type ^`kotlinx.coroutines.scheduling.i` @kind object;
  #L3be304.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/scheduling/i;.b:()I` @kind interface;
  #L3be30a.  v4:= temp;
  #L3be30c.  v5:= 1I;
  #L3be30e.  if v4 != v5 then goto L3be314;
  #L3be312.  goto L3be316;
  #L3be314.  v5:= 0I;
  #L3be316.  if v5 != 0 then goto L3be31c;
  #L3be31a.  return v1 @kind wide;
  #L3be31c.  v1:= `@@kotlinx.coroutines.scheduling.l.e` @type ^`kotlinx.coroutines.scheduling.g` @kind object;
  #L3be320.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/scheduling/g;.a:()J` @kind virtual;
  #L3be326.  v1:= temp @kind wide;
  #L3be328.  v4:= v0.`kotlinx.coroutines.scheduling.h.o` @type ^`long` @kind wide;
  #L3be32c.  v1:= v1 - v4 @kind long;
  #L3be32e.  v4:= `@@kotlinx.coroutines.scheduling.l.a` @type ^`long` @kind wide;
  #L3be332.  v6:= lcmp(v1, v4);
  #L3be336.  if v6 >= 0 then goto L3be33e;
  #L3be33a.  v4:= v4 - v1 @kind long;
  #L3be33c.  return v4 @kind wide;
  #L3be33e.  v1:= `@@kotlinx.coroutines.scheduling.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3be342.  v2:= 0I;
  #L3be344.  call temp:= `compareAndSet`(v1, v8, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3be34a.  v1:= temp;
  #L3be34c.  if v1 == 0 then goto L3be2e8;
  #L3be350.  v8:= 2I;
  #L3be352.  call temp:= `b`(v7, v0, v3, v8, v2) @signature `Lkotlinx/coroutines/scheduling/n;.b:(Lkotlinx/coroutines/scheduling/n;Lkotlinx/coroutines/scheduling/h;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/h;` @kind static;
  #L3be358.  v8:= -1L;
  #L3be35c.  return v8 @kind wide;
}
procedure `kotlinx.coroutines.scheduling.h` `a`(`kotlinx.coroutines.scheduling.n` v0 @kind this, `kotlinx.coroutines.scheduling.h` v1 @kind object, `boolean` v2 ) @signature `Lkotlinx/coroutines/scheduling/n;.a:(Lkotlinx/coroutines/scheduling/h;Z)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3be04c.  if v2 == 0 then goto L3be05a;
  #L3be050.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/n;.c:(Lkotlinx/coroutines/scheduling/h;)Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3be056.  v1:= temp @kind object;
  #L3be058.  return v1 @kind object;
  #L3be05a.  v2:= `@@kotlinx.coroutines.scheduling.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3be05e.  call temp:= `getAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3be064.  v1:= temp @kind object;
  #L3be066.  v1:= (`kotlinx.coroutines.scheduling.h`) v1 @kind object;
  #L3be06a.  if v1 != 0 then goto L3be072;
  #L3be06e.  v1:= 0I;
  #L3be070.  return v1 @kind object;
  #L3be072.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/n;.c:(Lkotlinx/coroutines/scheduling/h;)Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3be078.  v1:= temp @kind object;
  #L3be07a.  return v1 @kind object;
}
procedure `int` `e`(`kotlinx.coroutines.scheduling.n` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3bdfdc.  v0:= v2.`kotlinx.coroutines.scheduling.n.producerIndex` @type ^`int`;
  #L3bdfe0.  v1:= v2.`kotlinx.coroutines.scheduling.n.consumerIndex` @type ^`int`;
  #L3bdfe4.  v0:= v0 - v1 @kind int;
  #L3bdfe6.  return v0;
}
procedure `int` `f`(`kotlinx.coroutines.scheduling.n` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/n;.f:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bdff8.  v0:= v1.`kotlinx.coroutines.scheduling.n.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L3bdffc.  if v0 == 0 then goto L3be00e;
  #L3be000.  call temp:= `e`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @kind virtual;
  #L3be006.  v0:= temp;
  #L3be008.  v0:= v0 + 1;
  #L3be00c.  goto L3be016;
  #L3be00e.  call temp:= `e`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @kind virtual;
  #L3be014.  v0:= temp;
  #L3be016.  return v0;
}
procedure `void` `g`(`kotlinx.coroutines.scheduling.n` v2 @kind this, `kotlinx.coroutines.scheduling.d` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.g:(Lkotlinx/coroutines/scheduling/d;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3be470.  v0:= `@@kotlinx.coroutines.scheduling.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3be474.  v1:= 0I;
  #L3be476.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3be47c.  v0:= temp @kind object;
  #L3be47e.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L3be482.  if v0 == 0 then goto L3be48c;
  #L3be486.  call temp:= `a`(v3, v0) @signature `Lkotlinx/coroutines/internal/s;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L3be48c.  call temp:= `j`(v2, v3) @signature `Lkotlinx/coroutines/scheduling/n;.j:(Lkotlinx/coroutines/scheduling/d;)Z` @kind direct;
  #L3be492.  v0:= temp;
  #L3be494.  if v0 != 0 then goto L3be48c;
  #L3be498.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `h`(`kotlinx.coroutines.scheduling.n` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/n;.h:()Lkotlinx/coroutines/scheduling/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3be108.  v0:= `@@kotlinx.coroutines.scheduling.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3be10c.  v1:= 0I;
  #L3be10e.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3be114.  v0:= temp @kind object;
  #L3be116.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L3be11a.  if v0 != 0 then goto L3be126;
  #L3be11e.  call temp:= `i`(v2) @signature `Lkotlinx/coroutines/scheduling/n;.i:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3be124.  v0:= temp @kind object;
  #L3be126.  return v0 @kind object;
}
procedure `long` `k`(`kotlinx.coroutines.scheduling.n` v8 @kind this, `kotlinx.coroutines.scheduling.n` v9 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.k:(Lkotlinx/coroutines/scheduling/n;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3be194.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3be19a.  v0:= temp;
  #L3be19c.  v1:= 0I;
  #L3be19e.  v2:= 1I;
  #L3be1a0.  if v0 == 0 then goto L3be1c8;
  #L3be1a4.  call temp:= `e`(v8) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @kind virtual;
  #L3be1aa.  v0:= temp;
  #L3be1ac.  if v0 != 0 then goto L3be1b4;
  #L3be1b0.  v0:= 1I;
  #L3be1b2.  goto L3be1b6;
  #L3be1b4.  v0:= 0I;
  #L3be1b6.  if v0 == 0 then goto L3be1bc;
  #L3be1ba.  goto L3be1c8;
  #L3be1bc.  v9:= new `java.lang.AssertionError`;
  #L3be1c0.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3be1c6.  throw v9;
  #L3be1c8.  v0:= v9.`kotlinx.coroutines.scheduling.n.consumerIndex` @type ^`int`;
  #L3be1cc.  v3:= v9.`kotlinx.coroutines.scheduling.n.producerIndex` @type ^`int`;
  #L3be1d0.  v4:= v9.`kotlinx.coroutines.scheduling.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3be1d4.  if v0 == v3 then goto L3be23a;
  #L3be1d8.  v5:= v0 ^& 127;
  #L3be1dc.  v6:= v9.`kotlinx.coroutines.scheduling.n.blockingTasksInBuffer` @type ^`int`;
  #L3be1e0.  if v6 == 0 then goto L3be23a;
  #L3be1e4.  call temp:= `get`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3be1ea.  v6:= temp @kind object;
  #L3be1ec.  v6:= (`kotlinx.coroutines.scheduling.h`) v6 @kind object;
  #L3be1f0.  if v6 == 0 then goto L3be234;
  #L3be1f4.  v7:= v6.`kotlinx.coroutines.scheduling.h.p` @type ^`kotlinx.coroutines.scheduling.i` @kind object;
  #L3be1f8.  call temp:= `b`(v7) @signature `Lkotlinx/coroutines/scheduling/i;.b:()I` @kind interface;
  #L3be1fe.  v7:= temp;
  #L3be200.  if v7 != v2 then goto L3be208;
  #L3be204.  v7:= 1I;
  #L3be206.  goto L3be20a;
  #L3be208.  v7:= 0I;
  #L3be20a.  if v7 == 0 then goto L3be234;
  #L3be20e.  v7:= 0I;
  #L3be210.  call temp:= `compareAndSet`(v4, v5, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3be216.  v5:= temp;
  #L3be218.  if v5 == 0 then goto L3be234;
  #L3be21c.  v0:= `@@kotlinx.coroutines.scheduling.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L3be220.  call temp:= `decrementAndGet`(v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L3be226.  v9:= 2I;
  #L3be228.  call temp:= `b`(v8, v6, v1, v9, v7) @signature `Lkotlinx/coroutines/scheduling/n;.b:(Lkotlinx/coroutines/scheduling/n;Lkotlinx/coroutines/scheduling/h;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/h;` @kind static;
  #L3be22e.  v0:= -1L;
  #L3be232.  return v0 @kind wide;
  #L3be234.  v0:= v0 + 1;
  #L3be238.  goto L3be1d4;
  #L3be23a.  call temp:= `m`(v8, v9, v2) @signature `Lkotlinx/coroutines/scheduling/n;.m:(Lkotlinx/coroutines/scheduling/n;Z)J` @kind direct;
  #L3be240.  v0:= temp @kind wide;
  #L3be242.  return v0 @kind wide;
}
procedure `long` `l`(`kotlinx.coroutines.scheduling.n` v4 @kind this, `kotlinx.coroutines.scheduling.n` v5 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.l:(Lkotlinx/coroutines/scheduling/n;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3be254.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3be25a.  v0:= temp;
  #L3be25c.  v1:= 1I;
  #L3be25e.  v2:= 0I;
  #L3be260.  if v0 == 0 then goto L3be288;
  #L3be264.  call temp:= `e`(v4) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @kind virtual;
  #L3be26a.  v0:= temp;
  #L3be26c.  if v0 != 0 then goto L3be274;
  #L3be270.  v0:= 1I;
  #L3be272.  goto L3be276;
  #L3be274.  v0:= 0I;
  #L3be276.  if v0 == 0 then goto L3be27c;
  #L3be27a.  goto L3be288;
  #L3be27c.  v5:= new `java.lang.AssertionError`;
  #L3be280.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3be286.  throw v5;
  #L3be288.  call temp:= `i`(v5) @signature `Lkotlinx/coroutines/scheduling/n;.i:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3be28e.  v0:= temp @kind object;
  #L3be290.  if v0 == 0 then goto L3be2cc;
  #L3be294.  v5:= 2I;
  #L3be296.  v3:= 0I;
  #L3be298.  call temp:= `b`(v4, v0, v2, v5, v3) @signature `Lkotlinx/coroutines/scheduling/n;.b:(Lkotlinx/coroutines/scheduling/n;Lkotlinx/coroutines/scheduling/h;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/h;` @kind static;
  #L3be29e.  v5:= temp @kind object;
  #L3be2a0.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3be2a6.  v0:= temp;
  #L3be2a8.  if v0 == 0 then goto L3be2c6;
  #L3be2ac.  if v5 != 0 then goto L3be2b2;
  #L3be2b0.  goto L3be2b4;
  #L3be2b2.  v1:= 0I;
  #L3be2b4.  if v1 == 0 then goto L3be2ba;
  #L3be2b8.  goto L3be2c6;
  #L3be2ba.  v5:= new `java.lang.AssertionError`;
  #L3be2be.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3be2c4.  throw v5;
  #L3be2c6.  v0:= -1L;
  #L3be2ca.  return v0 @kind wide;
  #L3be2cc.  call temp:= `m`(v4, v5, v2) @signature `Lkotlinx/coroutines/scheduling/n;.m:(Lkotlinx/coroutines/scheduling/n;Z)J` @kind direct;
  #L3be2d2.  v0:= temp @kind wide;
  #L3be2d4.  return v0 @kind wide;
}
