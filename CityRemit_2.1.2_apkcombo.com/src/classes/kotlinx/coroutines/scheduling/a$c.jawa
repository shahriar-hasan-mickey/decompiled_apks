record `kotlinx.coroutines.scheduling.a$c` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Thread` @kind class {
  `int` `kotlinx.coroutines.scheduling.a$c.indexInArray` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `kotlinx.coroutines.scheduling.a$c.nextParkedWorker` @AccessFlag PRIVATE_VOLATILE;
  `kotlinx.coroutines.scheduling.n` `kotlinx.coroutines.scheduling.a$c.o` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.scheduling.a$d` `kotlinx.coroutines.scheduling.a$c.p` @AccessFlag PUBLIC;
  `long` `kotlinx.coroutines.scheduling.a$c.q` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.scheduling.a$c.r` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.scheduling.a$c.s` @AccessFlag PRIVATE;
  `boolean` `kotlinx.coroutines.scheduling.a$c.t` @AccessFlag PUBLIC;
  `kotlinx.coroutines.scheduling.a` `kotlinx.coroutines.scheduling.a$c.u` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.a$c.workerCtl` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.a$c.v` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/a$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3bc854.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.a$c` @kind object;
  #L3bc858.  v1:= "workerCtl" @kind object;
  #L3bc85c.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L3bc862.  v0:= temp @kind object;
  #L3bc864.  `@@kotlinx.coroutines.scheduling.a$c.v` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L3bc868.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.a$c` v0 @kind this, `kotlinx.coroutines.scheduling.a` v1 @kind object) @signature `Lkotlinx/coroutines/scheduling/a$c;.<init>:(Lkotlinx/coroutines/scheduling/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3bc87c.  v0.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` := v1 @kind object;
  #L3bc880.  call `<init>`(v0) @signature `Ljava/lang/Thread;.<init>:()V` @kind direct;
  #L3bc886.  v1:= 1I;
  #L3bc888.  call `setDaemon`(v0, v1) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L3bc88e.  v1:= new `kotlinx.coroutines.scheduling.n`;
  #L3bc892.  call `<init>`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.<init>:()V` @kind direct;
  #L3bc898.  v0.`kotlinx.coroutines.scheduling.a$c.o` @type ^`kotlinx.coroutines.scheduling.n` := v1 @kind object;
  #L3bc89c.  v1:= `@@kotlinx.coroutines.scheduling.a$d.r` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc8a0.  v0.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` := v1 @kind object;
  #L3bc8a4.  v1:= 0I;
  #L3bc8a6.  v0.`kotlinx.coroutines.scheduling.a$c.workerCtl` @type ^`int` := v1;
  #L3bc8aa.  v1:= `@@kotlinx.coroutines.scheduling.a.y` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L3bc8ae.  v0.`kotlinx.coroutines.scheduling.a$c.nextParkedWorker` @type ^`java.lang.Object` := v1 @kind object;
  #L3bc8b2.  v1:= `@@ub.c.o` @type ^`ub.c$a` @kind object;
  #L3bc8b6.  call temp:= `b`(v1) @signature `Lub/c$a;.b:()I` @kind virtual;
  #L3bc8bc.  v1:= temp;
  #L3bc8be.  v0.`kotlinx.coroutines.scheduling.a$c.s` @type ^`int` := v1;
  #L3bc8c2.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.a$c` v0 @kind this, `kotlinx.coroutines.scheduling.a` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.<init>:(Lkotlinx/coroutines/scheduling/a;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3bc8d4.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.<init>:(Lkotlinx/coroutines/scheduling/a;)V` @kind direct;
  #L3bc8da.  call `o`(v0, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.o:(I)V` @kind virtual;
  #L3bc8e0.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.a` `a`(`kotlinx.coroutines.scheduling.a$c` v0 @kind object) @signature `Lkotlinx/coroutines/scheduling/a$c;.a:(Lkotlinx/coroutines/scheduling/a$c;)Lkotlinx/coroutines/scheduling/a;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L3bc5a4.  v0:= v0.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc5a8.  return v0 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.scheduling.a$c` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3bc8f4.  if v4 != 0 then goto L3bc8fa;
  #L3bc8f8.  return @kind void;
  #L3bc8fa.  v4:= v3.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc8fe.  v0:= `@@kotlinx.coroutines.scheduling.a.w` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L3bc902.  v1:= -2097152L;
  #L3bc908.  call temp:= `addAndGet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.addAndGet:(Ljava/lang/Object;J)J` @kind virtual;
  #L3bc90e.  v4:= v3.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc912.  v0:= `@@kotlinx.coroutines.scheduling.a$d.s` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc916.  if v4 == v0 then goto L3bc94e;
  #L3bc91a.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3bc920.  v0:= temp;
  #L3bc922.  if v0 == 0 then goto L3bc946;
  #L3bc926.  v0:= `@@kotlinx.coroutines.scheduling.a$d.p` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc92a.  if v4 != v0 then goto L3bc932;
  #L3bc92e.  v4:= 1I;
  #L3bc930.  goto L3bc934;
  #L3bc932.  v4:= 0I;
  #L3bc934.  if v4 == 0 then goto L3bc93a;
  #L3bc938.  goto L3bc946;
  #L3bc93a.  v4:= new `java.lang.AssertionError`;
  #L3bc93e.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3bc944.  throw v4;
  #L3bc946.  v4:= `@@kotlinx.coroutines.scheduling.a$d.r` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc94a.  v3.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` := v4 @kind object;
  #L3bc94e.  return @kind void;
}
procedure `void` `c`(`kotlinx.coroutines.scheduling.a$c` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.c:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L3bc960.  if v1 != 0 then goto L3bc966;
  #L3bc964.  return @kind void;
  #L3bc966.  v1:= `@@kotlinx.coroutines.scheduling.a$d.p` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc96a.  call temp:= `s`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.s:(Lkotlinx/coroutines/scheduling/a$d;)Z` @kind virtual;
  #L3bc970.  v1:= temp;
  #L3bc972.  if v1 == 0 then goto L3bc980;
  #L3bc976.  v1:= v0.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc97a.  call `K`(v1) @signature `Lkotlinx/coroutines/scheduling/a;.K:()V` @kind virtual;
  #L3bc980.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.scheduling.a$c` v2 @kind this, `kotlinx.coroutines.scheduling.h` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/a$c;.d:(Lkotlinx/coroutines/scheduling/h;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3bc994.  v0:= v3.`kotlinx.coroutines.scheduling.h.p` @type ^`kotlinx.coroutines.scheduling.i` @kind object;
  #L3bc998.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/scheduling/i;.b:()I` @kind interface;
  #L3bc99e.  v0:= temp;
  #L3bc9a0.  call `i`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.i:(I)V` @kind direct;
  #L3bc9a6.  call `c`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.c:(I)V` @kind direct;
  #L3bc9ac.  v1:= v2.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc9b0.  call `E`(v1, v3) @signature `Lkotlinx/coroutines/scheduling/a;.E:(Lkotlinx/coroutines/scheduling/h;)V` @kind virtual;
  #L3bc9b6.  call `b`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.b:(I)V` @kind direct;
  #L3bc9bc.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `e`(`kotlinx.coroutines.scheduling.a$c` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.e:(Z)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3bc5bc.  v0:= 0I;
  #L3bc5be.  if v3 == 0 then goto L3bc616;
  #L3bc5c2.  v3:= v2.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc5c6.  v3:= v3.`kotlinx.coroutines.scheduling.a.o` @type ^`int`;
  #L3bc5ca.  v3:= v3 * 2;
  #L3bc5ce.  call temp:= `k`(v2, v3) @signature `Lkotlinx/coroutines/scheduling/a$c;.k:(I)I` @kind virtual;
  #L3bc5d4.  v3:= temp;
  #L3bc5d6.  if v3 != 0 then goto L3bc5de;
  #L3bc5da.  v3:= 1I;
  #L3bc5dc.  goto L3bc5e0;
  #L3bc5de.  v3:= 0I;
  #L3bc5e0.  if v3 == 0 then goto L3bc5f2;
  #L3bc5e4.  call temp:= `m`(v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.m:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3bc5ea.  v1:= temp @kind object;
  #L3bc5ec.  if v1 == 0 then goto L3bc5f2;
  #L3bc5f0.  return v1 @kind object;
  #L3bc5f2.  v1:= v2.`kotlinx.coroutines.scheduling.a$c.o` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L3bc5f6.  call temp:= `h`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.h:()Lkotlinx/coroutines/scheduling/h;` @kind virtual;
  #L3bc5fc.  v1:= temp @kind object;
  #L3bc5fe.  if v1 == 0 then goto L3bc604;
  #L3bc602.  return v1 @kind object;
  #L3bc604.  if v3 != 0 then goto L3bc624;
  #L3bc608.  call temp:= `m`(v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.m:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3bc60e.  v3:= temp @kind object;
  #L3bc610.  if v3 == 0 then goto L3bc624;
  #L3bc614.  return v3 @kind object;
  #L3bc616.  call temp:= `m`(v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.m:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3bc61c.  v3:= temp @kind object;
  #L3bc61e.  if v3 == 0 then goto L3bc624;
  #L3bc622.  return v3 @kind object;
  #L3bc624.  call temp:= `t`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.t:(Z)Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3bc62a.  v3:= temp @kind object;
  #L3bc62c.  return v3 @kind object;
}
procedure `void` `i`(`kotlinx.coroutines.scheduling.a$c` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.i:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3bc9d0.  v0:= 0L;
  #L3bc9d4.  v2.`kotlinx.coroutines.scheduling.a$c.q` @type ^`long` := v0 @kind wide;
  #L3bc9d8.  v0:= v2.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc9dc.  v1:= `@@kotlinx.coroutines.scheduling.a$d.q` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc9e0.  if v0 != v1 then goto L3bca14;
  #L3bc9e4.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3bc9ea.  v0:= temp;
  #L3bc9ec.  if v0 == 0 then goto L3bca0c;
  #L3bc9f0.  v0:= 1I;
  #L3bc9f2.  if v3 != v0 then goto L3bc9f8;
  #L3bc9f6.  goto L3bc9fa;
  #L3bc9f8.  v0:= 0I;
  #L3bc9fa.  if v0 == 0 then goto L3bca00;
  #L3bc9fe.  goto L3bca0c;
  #L3bca00.  v3:= new `java.lang.AssertionError`;
  #L3bca04.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3bca0a.  throw v3;
  #L3bca0c.  v3:= `@@kotlinx.coroutines.scheduling.a$d.p` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bca10.  v2.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` := v3 @kind object;
  #L3bca14.  return @kind void;
}
procedure `boolean` `j`(`kotlinx.coroutines.scheduling.a$c` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.j:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3bc444.  v0:= v2.`kotlinx.coroutines.scheduling.a$c.nextParkedWorker` @type ^`java.lang.Object` @kind object;
  #L3bc448.  v1:= `@@kotlinx.coroutines.scheduling.a.y` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L3bc44c.  if v0 == v1 then goto L3bc454;
  #L3bc450.  v0:= 1I;
  #L3bc452.  goto L3bc456;
  #L3bc454.  v0:= 0I;
  #L3bc456.  return v0;
}
procedure `void` `l`(`kotlinx.coroutines.scheduling.a$c` v6 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.l:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3bca28.  v0:= v6.`kotlinx.coroutines.scheduling.a$c.q` @type ^`long` @kind wide;
  #L3bca2c.  v2:= 0L;
  #L3bca30.  v4:= lcmp(v0, v2);
  #L3bca34.  if v4 != 0 then goto L3bca4e;
  #L3bca38.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3bca3e.  v0:= temp @kind wide;
  #L3bca40.  v4:= v6.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bca44.  v4:= v4.`kotlinx.coroutines.scheduling.a.q` @type ^`long` @kind wide;
  #L3bca48.  v0:= v0 + v4 @kind long;
  #L3bca4a.  v6.`kotlinx.coroutines.scheduling.a$c.q` @type ^`long` := v0 @kind wide;
  #L3bca4e.  v0:= v6.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bca52.  v0:= v0.`kotlinx.coroutines.scheduling.a.q` @type ^`long` @kind wide;
  #L3bca56.  call `parkNanos`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(J)V` @kind static;
  #L3bca5c.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3bca62.  v0:= temp @kind wide;
  #L3bca64.  v4:= v6.`kotlinx.coroutines.scheduling.a$c.q` @type ^`long` @kind wide;
  #L3bca68.  v0:= v0 - v4 @kind long;
  #L3bca6a.  v4:= lcmp(v0, v2);
  #L3bca6e.  if v4 < 0 then goto L3bca7c;
  #L3bca72.  v6.`kotlinx.coroutines.scheduling.a$c.q` @type ^`long` := v2 @kind wide;
  #L3bca76.  call `u`(v6) @signature `Lkotlinx/coroutines/scheduling/a$c;.u:()V` @kind direct;
  #L3bca7c.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `m`(`kotlinx.coroutines.scheduling.a$c` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.m:()Lkotlinx/coroutines/scheduling/h;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L3bc6a0.  v0:= 2I;
  #L3bc6a2.  call temp:= `k`(v1, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.k:(I)I` @kind virtual;
  #L3bc6a8.  v0:= temp;
  #L3bc6aa.  if v0 != 0 then goto L3bc6de;
  #L3bc6ae.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc6b2.  v0:= v0.`kotlinx.coroutines.scheduling.a.s` @type ^`kotlinx.coroutines.scheduling.d` @kind object;
  #L3bc6b6.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @kind virtual;
  #L3bc6bc.  v0:= temp @kind object;
  #L3bc6be.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L3bc6c2.  if v0 == 0 then goto L3bc6c8;
  #L3bc6c6.  return v0 @kind object;
  #L3bc6c8.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc6cc.  v0:= v0.`kotlinx.coroutines.scheduling.a.t` @type ^`kotlinx.coroutines.scheduling.d` @kind object;
  #L3bc6d0.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @kind virtual;
  #L3bc6d6.  v0:= temp @kind object;
  #L3bc6d8.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L3bc6dc.  return v0 @kind object;
  #L3bc6de.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc6e2.  v0:= v0.`kotlinx.coroutines.scheduling.a.t` @type ^`kotlinx.coroutines.scheduling.d` @kind object;
  #L3bc6e6.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @kind virtual;
  #L3bc6ec.  v0:= temp @kind object;
  #L3bc6ee.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L3bc6f2.  if v0 == 0 then goto L3bc6f8;
  #L3bc6f6.  return v0 @kind object;
  #L3bc6f8.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc6fc.  v0:= v0.`kotlinx.coroutines.scheduling.a.s` @type ^`kotlinx.coroutines.scheduling.d` @kind object;
  #L3bc700.  goto L3bc6d0;
}
procedure `void` `n`(`kotlinx.coroutines.scheduling.a$c` v7 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.n:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3bcaa8.  v0:= 0I;
  #L3bcaaa.  v1:= 0I;
  #L3bcaac.  v2:= v7.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bcab0.  call temp:= `isTerminated`(v2) @signature `Lkotlinx/coroutines/scheduling/a;.isTerminated:()Z` @kind virtual;
  #L3bcab6.  v2:= temp;
  #L3bcab8.  if v2 != 0 then goto L3bcb28;
  #L3bcabc.  v2:= v7.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bcac0.  v3:= `@@kotlinx.coroutines.scheduling.a$d.s` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bcac4.  if v2 == v3 then goto L3bcb28;
  #L3bcac8.  v2:= v7.`kotlinx.coroutines.scheduling.a$c.t` @type ^`boolean` @kind boolean;
  #L3bcacc.  call temp:= `f`(v7, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.f:(Z)Lkotlinx/coroutines/scheduling/h;` @kind virtual;
  #L3bcad2.  v2:= temp @kind object;
  #L3bcad4.  v3:= 0L;
  #L3bcad8.  if v2 == 0 then goto L3bcae8;
  #L3bcadc.  v7.`kotlinx.coroutines.scheduling.a$c.r` @type ^`long` := v3 @kind wide;
  #L3bcae0.  call `d`(v7, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.d:(Lkotlinx/coroutines/scheduling/h;)V` @kind direct;
  #L3bcae6.  goto L3bcaaa;
  #L3bcae8.  v7.`kotlinx.coroutines.scheduling.a$c.t` @type ^`boolean` := v0 @kind boolean;
  #L3bcaec.  v5:= v7.`kotlinx.coroutines.scheduling.a$c.r` @type ^`long` @kind wide;
  #L3bcaf0.  v2:= lcmp(v5, v3);
  #L3bcaf4.  if v2 == 0 then goto L3bcb20;
  #L3bcaf8.  if v1 != 0 then goto L3bcb00;
  #L3bcafc.  v1:= 1I;
  #L3bcafe.  goto L3bcaac;
  #L3bcb00.  v1:= `@@kotlinx.coroutines.scheduling.a$d.q` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bcb04.  call temp:= `s`(v7, v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.s:(Lkotlinx/coroutines/scheduling/a$d;)Z` @kind virtual;
  #L3bcb0a.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L3bcb10.  v1:= v7.`kotlinx.coroutines.scheduling.a$c.r` @type ^`long` @kind wide;
  #L3bcb14.  call `parkNanos`(v1) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(J)V` @kind static;
  #L3bcb1a.  v7.`kotlinx.coroutines.scheduling.a$c.r` @type ^`long` := v3 @kind wide;
  #L3bcb1e.  goto L3bcaaa;
  #L3bcb20.  call `r`(v7) @signature `Lkotlinx/coroutines/scheduling/a$c;.r:()V` @kind direct;
  #L3bcb26.  goto L3bcaac;
  #L3bcb28.  v0:= `@@kotlinx.coroutines.scheduling.a$d.s` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bcb2c.  call temp:= `s`(v7, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.s:(Lkotlinx/coroutines/scheduling/a$d;)Z` @kind virtual;
  #L3bcb32.  return @kind void;
}
procedure `boolean` `q`(`kotlinx.coroutines.scheduling.a$c` v10 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.q:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3bc468.  v0:= v10.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc46c.  v1:= `@@kotlinx.coroutines.scheduling.a$d.o` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc470.  v2:= 0I;
  #L3bc472.  v3:= 1I;
  #L3bc474.  if v0 != v1 then goto L3bc47c;
  #L3bc478.  v2:= 1I;
  #L3bc47a.  goto L3bc4d0;
  #L3bc47c.  v0:= v10.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc480.  v6:= v0.`kotlinx.coroutines.scheduling.a.controlState` @type ^`long` @kind wide;
  #L3bc484.  v4:= 9223367638808264704L;
  #L3bc48e.  v4:= v4 ^& v6 @kind long;
  #L3bc490.  v1:= 42I;
  #L3bc494.  v4:= v4 ^> v1 @kind long;
  #L3bc496.  v1:= (`int`) v4 @kind l2i;
  #L3bc498.  if v1 != 0 then goto L3bc4a0;
  #L3bc49c.  v0:= 0I;
  #L3bc49e.  goto L3bc4c2;
  #L3bc4a0.  v4:= 4398046511104L;
  #L3bc4aa.  v8:= v6 - v4 @kind long;
  #L3bc4ae.  v4:= `@@kotlinx.coroutines.scheduling.a.w` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L3bc4b2.  v5:= v0 @kind object;
  #L3bc4b4.  call temp:= `compareAndSet`(v4, v5, v6, v8) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L3bc4ba.  v1:= temp;
  #L3bc4bc.  if v1 == 0 then goto L3bc480;
  #L3bc4c0.  v0:= 1I;
  #L3bc4c2.  if v0 == 0 then goto L3bc4d0;
  #L3bc4c6.  v0:= `@@kotlinx.coroutines.scheduling.a$d.o` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc4ca.  v10.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` := v0 @kind object;
  #L3bc4ce.  goto L3bc478;
  #L3bc4d0.  return v2;
}
procedure `void` `r`(`kotlinx.coroutines.scheduling.a$c` v3 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.r:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3bcbbc.  call temp:= `j`(v3) @signature `Lkotlinx/coroutines/scheduling/a$c;.j:()Z` @kind direct;
  #L3bcbc2.  v0:= temp;
  #L3bcbc4.  if v0 != 0 then goto L3bcbd4;
  #L3bcbc8.  v0:= v3.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bcbcc.  call temp:= `v`(v0, v3) @signature `Lkotlinx/coroutines/scheduling/a;.v:(Lkotlinx/coroutines/scheduling/a$c;)Z` @kind virtual;
  #L3bcbd2.  return @kind void;
  #L3bcbd4.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3bcbda.  v0:= temp;
  #L3bcbdc.  if v0 == 0 then goto L3bcc08;
  #L3bcbe0.  v0:= v3.`kotlinx.coroutines.scheduling.a$c.o` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L3bcbe4.  call temp:= `f`(v0) @signature `Lkotlinx/coroutines/scheduling/n;.f:()I` @kind virtual;
  #L3bcbea.  v0:= temp;
  #L3bcbec.  if v0 != 0 then goto L3bcbf4;
  #L3bcbf0.  v0:= 1I;
  #L3bcbf2.  goto L3bcbf6;
  #L3bcbf4.  v0:= 0I;
  #L3bcbf6.  if v0 == 0 then goto L3bcbfc;
  #L3bcbfa.  goto L3bcc08;
  #L3bcbfc.  v0:= new `java.lang.AssertionError`;
  #L3bcc00.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3bcc06.  throw v0;
  #L3bcc08.  v0:= -1I;
  #L3bcc0a.  v3.`kotlinx.coroutines.scheduling.a$c.workerCtl` @type ^`int` := v0;
  #L3bcc0e.  call temp:= `j`(v3) @signature `Lkotlinx/coroutines/scheduling/a$c;.j:()Z` @kind direct;
  #L3bcc14.  v1:= temp;
  #L3bcc16.  if v1 == 0 then goto L3bcc58;
  #L3bcc1a.  v1:= v3.`kotlinx.coroutines.scheduling.a$c.workerCtl` @type ^`int`;
  #L3bcc1e.  if v1 != v0 then goto L3bcc58;
  #L3bcc22.  v1:= v3.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bcc26.  call temp:= `isTerminated`(v1) @signature `Lkotlinx/coroutines/scheduling/a;.isTerminated:()Z` @kind virtual;
  #L3bcc2c.  v1:= temp;
  #L3bcc2e.  if v1 != 0 then goto L3bcc58;
  #L3bcc32.  v1:= v3.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bcc36.  v2:= `@@kotlinx.coroutines.scheduling.a$d.s` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bcc3a.  if v1 != v2 then goto L3bcc40;
  #L3bcc3e.  goto L3bcc58;
  #L3bcc40.  v1:= `@@kotlinx.coroutines.scheduling.a$d.q` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bcc44.  call temp:= `s`(v3, v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.s:(Lkotlinx/coroutines/scheduling/a$d;)Z` @kind virtual;
  #L3bcc4a.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L3bcc50.  call `l`(v3) @signature `Lkotlinx/coroutines/scheduling/a$c;.l:()V` @kind direct;
  #L3bcc56.  goto L3bcc0e;
  #L3bcc58.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `t`(`kotlinx.coroutines.scheduling.a$c` v19 @kind this, `boolean` v20 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.t:(Z)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L3bc714.  v0:= v19 @kind object;
  #L3bc718.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3bc71e.  v1:= temp;
  #L3bc720.  v2:= 0I;
  #L3bc722.  v3:= 1I;
  #L3bc724.  if v1 == 0 then goto L3bc750;
  #L3bc728.  v1:= v0.`kotlinx.coroutines.scheduling.a$c.o` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L3bc72c.  call temp:= `f`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.f:()I` @kind virtual;
  #L3bc732.  v1:= temp;
  #L3bc734.  if v1 != 0 then goto L3bc73c;
  #L3bc738.  v1:= 1I;
  #L3bc73a.  goto L3bc73e;
  #L3bc73c.  v1:= 0I;
  #L3bc73e.  if v1 == 0 then goto L3bc744;
  #L3bc742.  goto L3bc750;
  #L3bc744.  v1:= new `java.lang.AssertionError`;
  #L3bc748.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3bc74e.  throw v1;
  #L3bc750.  v1:= v0.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc754.  v4:= v1.`kotlinx.coroutines.scheduling.a.controlState` @type ^`long` @kind wide;
  #L3bc758.  v6:= 2097151L;
  #L3bc75e.  v4:= v4 ^& v6 @kind long;
  #L3bc760.  v1:= (`int`) v4 @kind l2i;
  #L3bc762.  v4:= 2I;
  #L3bc764.  v5:= 0I;
  #L3bc766.  if v1 >= v4 then goto L3bc76c;
  #L3bc76a.  return v5 @kind object;
  #L3bc76c.  call temp:= `k`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.k:(I)I` @kind virtual;
  #L3bc772.  v4:= temp;
  #L3bc774.  v6:= v0.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc778.  v7:= 9223372036854775807L;
  #L3bc782.  v10:= v7 @kind wide;
  #L3bc784.  v9:= 0I;
  #L3bc786.  v12:= 0L;
  #L3bc78a.  if v9 >= v1 then goto L3bc830;
  #L3bc78e.  v4:= v4 + v3 @kind int;
  #L3bc790.  if v4 <= v1 then goto L3bc796;
  #L3bc794.  v4:= 1I;
  #L3bc796.  v14:= v6.`kotlinx.coroutines.scheduling.a.u` @type ^`kotlinx.coroutines.internal.c0` @kind object;
  #L3bc79a.  call temp:= `b`(v14, v4) @signature `Lkotlinx/coroutines/internal/c0;.b:(I)Ljava/lang/Object;` @kind virtual;
  #L3bc7a0.  v14:= temp @kind object;
  #L3bc7a2.  v14:= (`kotlinx.coroutines.scheduling.a$c`) v14 @kind object;
  #L3bc7a6.  if v14 == 0 then goto L3bc82a;
  #L3bc7aa.  if v14 == v0 then goto L3bc82a;
  #L3bc7ae.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3bc7b4.  v15:= temp;
  #L3bc7b6.  if v15 == 0 then goto L3bc7e2;
  #L3bc7ba.  v15:= v0.`kotlinx.coroutines.scheduling.a$c.o` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L3bc7be.  call temp:= `f`(v15) @signature `Lkotlinx/coroutines/scheduling/n;.f:()I` @kind virtual;
  #L3bc7c4.  v15:= temp;
  #L3bc7c6.  if v15 != 0 then goto L3bc7ce;
  #L3bc7ca.  v15:= 1I;
  #L3bc7cc.  goto L3bc7d0;
  #L3bc7ce.  v15:= 0I;
  #L3bc7d0.  if v15 == 0 then goto L3bc7d6;
  #L3bc7d4.  goto L3bc7e2;
  #L3bc7d6.  v1:= new `java.lang.AssertionError`;
  #L3bc7da.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3bc7e0.  throw v1;
  #L3bc7e2.  v15:= v0.`kotlinx.coroutines.scheduling.a$c.o` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L3bc7e6.  v14:= v14.`kotlinx.coroutines.scheduling.a$c.o` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L3bc7ea.  if v20 == 0 then goto L3bc7f8;
  #L3bc7ee.  call temp:= `k`(v15, v14) @signature `Lkotlinx/coroutines/scheduling/n;.k:(Lkotlinx/coroutines/scheduling/n;)J` @kind virtual;
  #L3bc7f4.  v14:= temp @kind wide;
  #L3bc7f6.  goto L3bc800;
  #L3bc7f8.  call temp:= `l`(v15, v14) @signature `Lkotlinx/coroutines/scheduling/n;.l:(Lkotlinx/coroutines/scheduling/n;)J` @kind virtual;
  #L3bc7fe.  v14:= temp @kind wide;
  #L3bc800.  v16:= -1L;
  #L3bc804.  v18:= lcmp(v14, v16);
  #L3bc808.  if v18 != 0 then goto L3bc81a;
  #L3bc80c.  v1:= v0.`kotlinx.coroutines.scheduling.a$c.o` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L3bc810.  call temp:= `h`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.h:()Lkotlinx/coroutines/scheduling/h;` @kind virtual;
  #L3bc816.  v1:= temp @kind object;
  #L3bc818.  return v1 @kind object;
  #L3bc81a.  v16:= lcmp(v14, v12);
  #L3bc81e.  if v16 <= 0 then goto L3bc82a;
  #L3bc822.  call temp:= `min`(v10, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3bc828.  v10:= temp @kind wide;
  #L3bc82a.  v9:= v9 + 1;
  #L3bc82e.  goto L3bc786;
  #L3bc830.  v1:= lcmp(v10, v7);
  #L3bc834.  if v1 == 0 then goto L3bc83a;
  #L3bc838.  goto L3bc83c;
  #L3bc83a.  v10:= v12 @kind wide;
  #L3bc83c.  v0.`kotlinx.coroutines.scheduling.a$c.r` @type ^`long` := v10 @kind wide;
  #L3bc840.  return v5 @kind object;
}
procedure `void` `u`(`kotlinx.coroutines.scheduling.a$c` v8 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.u:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3bcc6c.  v0:= v8.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bcc70.  v1:= v0.`kotlinx.coroutines.scheduling.a.u` @type ^`kotlinx.coroutines.internal.c0` @kind object;
  #L3bcc74.  @monitorenter v1
  #L3bcc76.  call temp:= `isTerminated`(v0) @signature `Lkotlinx/coroutines/scheduling/a;.isTerminated:()Z` @kind virtual;
  #L3bcc7c.  v2:= temp;
  #L3bcc7e.  if v2 == 0 then goto L3bcc86;
  #L3bcc82.  @monitorexit v1
  #L3bcc84.  return @kind void;
  #L3bcc86.  v2:= v0.`kotlinx.coroutines.scheduling.a.controlState` @type ^`long` @kind wide;
  #L3bcc8a.  v4:= 2097151L;
  #L3bcc90.  v2:= v2 ^& v4 @kind long;
  #L3bcc92.  v3:= (`int`) v2 @kind l2i;
  #L3bcc94.  v2:= v0.`kotlinx.coroutines.scheduling.a.o` @type ^`int`;
  #L3bcc98.  if v3 > v2 then goto L3bcca0;
  #L3bcc9c.  @monitorexit v1
  #L3bcc9e.  return @kind void;
  #L3bcca0.  v2:= `@@kotlinx.coroutines.scheduling.a$c.v` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L3bcca4.  v3:= -1I;
  #L3bcca6.  v6:= 1I;
  #L3bcca8.  call temp:= `compareAndSet`(v2, v8, v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L3bccae.  v2:= temp;
  #L3bccb0.  if v2 != 0 then goto L3bccb8;
  #L3bccb4.  @monitorexit v1
  #L3bccb6.  return @kind void;
  #L3bccb8.  v2:= v8.`kotlinx.coroutines.scheduling.a$c.indexInArray` @type ^`int`;
  #L3bccbc.  v3:= 0I;
  #L3bccbe.  call `o`(v8, v3) @signature `Lkotlinx/coroutines/scheduling/a$c;.o:(I)V` @kind virtual;
  #L3bccc4.  call `x`(v0, v8, v2, v3) @signature `Lkotlinx/coroutines/scheduling/a;.x:(Lkotlinx/coroutines/scheduling/a$c;II)V` @kind virtual;
  #L3bccca.  v3:= `@@kotlinx.coroutines.scheduling.a.w` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L3bccce.  call temp:= `getAndDecrement`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.getAndDecrement:(Ljava/lang/Object;)J` @kind virtual;
  #L3bccd4.  v6:= temp @kind wide;
  #L3bccd6.  v3:= v6 ^& v4 @kind long;
  #L3bccda.  v4:= (`int`) v3 @kind l2i;
  #L3bccdc.  if v4 == v2 then goto L3bcd0c;
  #L3bcce0.  v3:= v0.`kotlinx.coroutines.scheduling.a.u` @type ^`kotlinx.coroutines.internal.c0` @kind object;
  #L3bcce4.  call temp:= `b`(v3, v4) @signature `Lkotlinx/coroutines/internal/c0;.b:(I)Ljava/lang/Object;` @kind virtual;
  #L3bccea.  v3:= temp @kind object;
  #L3bccec.  call `b`(v3) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bccf2.  v3:= (`kotlinx.coroutines.scheduling.a$c`) v3 @kind object;
  #L3bccf6.  v5:= v0.`kotlinx.coroutines.scheduling.a.u` @type ^`kotlinx.coroutines.internal.c0` @kind object;
  #L3bccfa.  call `c`(v5, v2, v3) @signature `Lkotlinx/coroutines/internal/c0;.c:(ILjava/lang/Object;)V` @kind virtual;
  #L3bcd00.  call `o`(v3, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.o:(I)V` @kind virtual;
  #L3bcd06.  call `x`(v0, v3, v4, v2) @signature `Lkotlinx/coroutines/scheduling/a;.x:(Lkotlinx/coroutines/scheduling/a$c;II)V` @kind virtual;
  #L3bcd0c.  v0:= v0.`kotlinx.coroutines.scheduling.a.u` @type ^`kotlinx.coroutines.internal.c0` @kind object;
  #L3bcd10.  v2:= 0I;
  #L3bcd12.  call `c`(v0, v4, v2) @signature `Lkotlinx/coroutines/internal/c0;.c:(ILjava/lang/Object;)V` @kind virtual;
  #L3bcd18.  v0:= `@@jb.s.a` @type ^`jb.s` @kind object;
  #L3bcd1c.  @monitorexit v1
  #L3bcd1e.  v0:= `@@kotlinx.coroutines.scheduling.a$d.s` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bcd22.  v8.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` := v0 @kind object;
  #L3bcd26.  return @kind void;
  #L3bcd28.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3bcd2a.  @monitorexit v1
  #L3bcd2c.  throw v0;
  catch `java.lang.Throwable` @[L3bcc76..L3bcc7e] goto L3bcd28;
  catch `java.lang.Throwable` @[L3bcc86..L3bcc98] goto L3bcd28;
  catch `java.lang.Throwable` @[L3bcca0..L3bccb0] goto L3bcd28;
  catch `java.lang.Throwable` @[L3bccb8..L3bcd1c] goto L3bcd28;
}
procedure `kotlinx.coroutines.scheduling.h` `f`(`kotlinx.coroutines.scheduling.a$c` v1 @kind this, `boolean` v2 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.f:(Z)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bc640.  call temp:= `q`(v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.q:()Z` @kind direct;
  #L3bc646.  v0:= temp;
  #L3bc648.  if v0 == 0 then goto L3bc656;
  #L3bc64c.  call temp:= `e`(v1, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.e:(Z)Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3bc652.  v2:= temp @kind object;
  #L3bc654.  return v2 @kind object;
  #L3bc656.  if v2 == 0 then goto L3bc66a;
  #L3bc65a.  v2:= v1.`kotlinx.coroutines.scheduling.a$c.o` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L3bc65e.  call temp:= `h`(v2) @signature `Lkotlinx/coroutines/scheduling/n;.h:()Lkotlinx/coroutines/scheduling/h;` @kind virtual;
  #L3bc664.  v2:= temp @kind object;
  #L3bc666.  if v2 != 0 then goto L3bc67e;
  #L3bc66a.  v2:= v1.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc66e.  v2:= v2.`kotlinx.coroutines.scheduling.a.t` @type ^`kotlinx.coroutines.scheduling.d` @kind object;
  #L3bc672.  call temp:= `d`(v2) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @kind virtual;
  #L3bc678.  v2:= temp @kind object;
  #L3bc67a.  v2:= (`kotlinx.coroutines.scheduling.h`) v2 @kind object;
  #L3bc67e.  if v2 != 0 then goto L3bc68c;
  #L3bc682.  v2:= 1I;
  #L3bc684.  call temp:= `t`(v1, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.t:(Z)Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3bc68a.  v2:= temp @kind object;
  #L3bc68c.  return v2 @kind object;
}
procedure `int` `g`(`kotlinx.coroutines.scheduling.a$c` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.g:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bc52c.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.indexInArray` @type ^`int`;
  #L3bc530.  return v0;
}
procedure `java.lang.Object` `h`(`kotlinx.coroutines.scheduling.a$c` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.h:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bc58c.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.nextParkedWorker` @type ^`java.lang.Object` @kind object;
  #L3bc590.  return v0 @kind object;
}
procedure `int` `k`(`kotlinx.coroutines.scheduling.a$c` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.k:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3bc544.  v0:= v3.`kotlinx.coroutines.scheduling.a$c.s` @type ^`int`;
  #L3bc548.  v1:= v0 ^< 13;
  #L3bc54c.  v0:= v0 ^~ v1 @kind int;
  #L3bc54e.  v1:= v0 ^> 17;
  #L3bc552.  v0:= v0 ^~ v1 @kind int;
  #L3bc554.  v1:= v0 ^< 5;
  #L3bc558.  v0:= v0 ^~ v1 @kind int;
  #L3bc55a.  v3.`kotlinx.coroutines.scheduling.a$c.s` @type ^`int` := v0;
  #L3bc55e.  v1:= v4 + -1;
  #L3bc562.  v2:= v1 ^& v4 @kind int;
  #L3bc566.  if v2 != 0 then goto L3bc570;
  #L3bc56a.  v4:= v0 ^& v1 @kind int;
  #L3bc56e.  return v4;
  #L3bc570.  v1:= 2147483647I;
  #L3bc576.  v0:= v0 ^& v1 @kind int;
  #L3bc578.  v0:= v0 %% v4 @kind int;
  #L3bc57a.  return v0;
}
procedure `void` `o`(`kotlinx.coroutines.scheduling.a$c` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.o:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3bcb44.  v0:= new `java.lang.StringBuilder`;
  #L3bcb48.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bcb4e.  v1:= v2.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bcb52.  v1:= v1.`kotlinx.coroutines.scheduling.a.r` @type ^`java.lang.String` @kind object;
  #L3bcb56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bcb5c.  v1:= "-worker-" @kind object;
  #L3bcb60.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bcb66.  if v3 != 0 then goto L3bcb70;
  #L3bcb6a.  v1:= "TERMINATED" @kind object;
  #L3bcb6e.  goto L3bcb78;
  #L3bcb70.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L3bcb76.  v1:= temp @kind object;
  #L3bcb78.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bcb7e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bcb84.  v0:= temp @kind object;
  #L3bcb86.  call `setName`(v2, v0) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L3bcb8c.  v2.`kotlinx.coroutines.scheduling.a$c.indexInArray` @type ^`int` := v3;
  #L3bcb90.  return @kind void;
}
procedure `void` `p`(`kotlinx.coroutines.scheduling.a$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/scheduling/a$c;.p:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3bcba4.  v0.`kotlinx.coroutines.scheduling.a$c.nextParkedWorker` @type ^`java.lang.Object` := v1 @kind object;
  #L3bcba8.  return @kind void;
}
procedure `void` `run`(`kotlinx.coroutines.scheduling.a$c` v0 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L3bca90.  call `n`(v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.n:()V` @kind direct;
  #L3bca96.  return @kind void;
}
procedure `boolean` `s`(`kotlinx.coroutines.scheduling.a$c` v6 @kind this, `kotlinx.coroutines.scheduling.a$d` v7 @kind object) @signature `Lkotlinx/coroutines/scheduling/a$c;.s:(Lkotlinx/coroutines/scheduling/a$d;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3bc4e4.  v0:= v6.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc4e8.  v1:= `@@kotlinx.coroutines.scheduling.a$d.o` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3bc4ec.  if v0 != v1 then goto L3bc4f4;
  #L3bc4f0.  v1:= 1I;
  #L3bc4f2.  goto L3bc4f6;
  #L3bc4f4.  v1:= 0I;
  #L3bc4f6.  if v1 == 0 then goto L3bc512;
  #L3bc4fa.  v2:= v6.`kotlinx.coroutines.scheduling.a$c.u` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3bc4fe.  v3:= `@@kotlinx.coroutines.scheduling.a.w` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L3bc502.  v4:= 4398046511104L;
  #L3bc50c.  call temp:= `addAndGet`(v3, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.addAndGet:(Ljava/lang/Object;J)J` @kind virtual;
  #L3bc512.  if v0 == v7 then goto L3bc51a;
  #L3bc516.  v6.`kotlinx.coroutines.scheduling.a$c.p` @type ^`kotlinx.coroutines.scheduling.a$d` := v7 @kind object;
  #L3bc51a.  return v1;
}
