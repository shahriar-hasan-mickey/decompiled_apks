record `kotlinx.coroutines.internal.o0` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.g` @kind class {
}
global `kotlinx.coroutines.internal.o0` `@@kotlinx.coroutines.internal.o0.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.locks.ReentrantReadWriteLock` `@@kotlinx.coroutines.internal.o0.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.WeakHashMap` `@@kotlinx.coroutines.internal.o0.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/o0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3bc210.  v0:= new `kotlinx.coroutines.internal.o0`;
  #L3bc214.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/o0;.<init>:()V` @kind direct;
  #L3bc21a.  `@@kotlinx.coroutines.internal.o0.a` @type ^`kotlinx.coroutines.internal.o0` := v0 @kind object;
  #L3bc21e.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L3bc222.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L3bc228.  `@@kotlinx.coroutines.internal.o0.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` := v0 @kind object;
  #L3bc22c.  v0:= new `java.util.WeakHashMap`;
  #L3bc230.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L3bc236.  `@@kotlinx.coroutines.internal.o0.c` @type ^`java.util.WeakHashMap` := v0 @kind object;
  #L3bc23a.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.o0` v0 @kind this) @signature `Lkotlinx/coroutines/internal/o0;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3bc24c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/g;.<init>:()V` @kind direct;
  #L3bc252.  return @kind void;
}
procedure `tb.l` `a`(`kotlinx.coroutines.internal.o0` v6 @kind this, `java.lang.Class` v7 @kind object) @signature `Lkotlinx/coroutines/internal/o0;.a:(Ljava/lang/Class;)Ltb/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3bc0f8.  v0:= `@@kotlinx.coroutines.internal.o0.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` @kind object;
  #L3bc0fc.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L3bc102.  v1:= temp @kind object;
  #L3bc104.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L3bc10a.  v2:= `@@kotlinx.coroutines.internal.o0.c` @type ^`java.util.WeakHashMap` @kind object;
  #L3bc10e.  call temp:= `get`(v2, v7) @signature `Ljava/util/WeakHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3bc114.  v2:= temp @kind object;
  #L3bc116.  v2:= (`tb.l`) v2 @kind object;
  #L3bc11a.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L3bc120.  if v2 == 0 then goto L3bc126;
  #L3bc124.  return v2 @kind object;
  #L3bc126.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L3bc12c.  v1:= temp @kind object;
  #L3bc12e.  call temp:= `getWriteHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getWriteHoldCount:()I` @kind virtual;
  #L3bc134.  v2:= temp;
  #L3bc136.  v3:= 0I;
  #L3bc138.  if v2 != 0 then goto L3bc146;
  #L3bc13c.  call temp:= `getReadHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getReadHoldCount:()I` @kind virtual;
  #L3bc142.  v2:= temp;
  #L3bc144.  goto L3bc148;
  #L3bc146.  v2:= 0I;
  #L3bc148.  v4:= 0I;
  #L3bc14a.  if v4 >= v2 then goto L3bc15a;
  #L3bc14e.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L3bc154.  v4:= v4 + 1;
  #L3bc158.  goto L3bc14a;
  #L3bc15a.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;` @kind virtual;
  #L3bc160.  v0:= temp @kind object;
  #L3bc162.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.lock:()V` @kind virtual;
  #L3bc168.  v4:= `@@kotlinx.coroutines.internal.o0.c` @type ^`java.util.WeakHashMap` @kind object;
  #L3bc16c.  call temp:= `get`(v4, v7) @signature `Ljava/util/WeakHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3bc172.  v5:= temp @kind object;
  #L3bc174.  v5:= (`tb.l`) v5 @kind object;
  #L3bc178.  if v5 == 0 then goto L3bc194;
  #L3bc17c.  if v3 >= v2 then goto L3bc18c;
  #L3bc180.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L3bc186.  v3:= v3 + 1;
  #L3bc18a.  goto L3bc17c;
  #L3bc18c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L3bc192.  return v5 @kind object;
  #L3bc194.  call temp:= `a`(v7) @signature `Lkotlinx/coroutines/internal/j;.a:(Ljava/lang/Class;)Ltb/l;` @kind static;
  #L3bc19a.  v5:= temp @kind object;
  #L3bc19c.  call temp:= `put`(v4, v7, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3bc1a2.  if v3 >= v2 then goto L3bc1b2;
  #L3bc1a6.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L3bc1ac.  v3:= v3 + 1;
  #L3bc1b0.  goto L3bc1a2;
  #L3bc1b2.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L3bc1b8.  return v5 @kind object;
  #L3bc1ba.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3bc1bc.  if v3 >= v2 then goto L3bc1cc;
  #L3bc1c0.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L3bc1c6.  v3:= v3 + 1;
  #L3bc1ca.  goto L3bc1bc;
  #L3bc1cc.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L3bc1d2.  throw v7;
  #L3bc1d4.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3bc1d6.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L3bc1dc.  throw v7;
  catch `java.lang.Throwable` @[L3bc10a..L3bc11a] goto L3bc1d4;
  catch `java.lang.Throwable` @[L3bc168..L3bc178] goto L3bc1ba;
  catch `java.lang.Throwable` @[L3bc194..L3bc1a2] goto L3bc1ba;
}
