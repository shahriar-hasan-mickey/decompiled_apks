record `kotlinx.coroutines.internal.c0` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.internal.c0.array` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.c0` v1 @kind this, `int` v2 ) @signature `Lkotlinx/coroutines/internal/c0;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3bae00.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3bae06.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L3bae0a.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L3bae10.  v1.`kotlinx.coroutines.internal.c0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L3bae14.  return @kind void;
}
procedure `int` `a`(`kotlinx.coroutines.internal.c0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/c0;.a:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3badb0.  v0:= v1.`kotlinx.coroutines.internal.c0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3badb4.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L3badba.  v0:= temp;
  #L3badbc.  return v0;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.internal.c0` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/internal/c0;.b:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3badd0.  v0:= v2.`kotlinx.coroutines.internal.c0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3badd4.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L3badda.  v1:= temp;
  #L3baddc.  if v3 >= v1 then goto L3badea;
  #L3bade0.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3bade6.  v3:= temp @kind object;
  #L3bade8.  goto L3badec;
  #L3badea.  v3:= 0I;
  #L3badec.  return v3 @kind object;
}
procedure `void` `c`(`kotlinx.coroutines.internal.c0` v5 @kind this, `int` v6 , `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/internal/c0;.c:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3bae28.  v0:= v5.`kotlinx.coroutines.internal.c0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3bae2c.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L3bae32.  v1:= temp;
  #L3bae34.  if v6 >= v1 then goto L3bae40;
  #L3bae38.  call `set`(v0, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L3bae3e.  goto L3bae7e;
  #L3bae40.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L3bae44.  v3:= v6 + 1;
  #L3bae48.  v4:= v1 * 2;
  #L3bae4c.  call temp:= `a`(v3, v4) @signature `Lwb/d;.a:(II)I` @kind static;
  #L3bae52.  v3:= temp;
  #L3bae54.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L3bae5a.  v3:= 0I;
  #L3bae5c.  if v3 >= v1 then goto L3bae74;
  #L3bae60.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3bae66.  v4:= temp @kind object;
  #L3bae68.  call `set`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L3bae6e.  v3:= v3 + 1;
  #L3bae72.  goto L3bae5c;
  #L3bae74.  call `set`(v2, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L3bae7a.  v5.`kotlinx.coroutines.internal.c0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L3bae7e.  return @kind void;
}
