record `kotlinx.coroutines.internal.t` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `kotlinx.coroutines.internal.t._next` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `long` `kotlinx.coroutines.internal.t._state` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.internal.t.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlinx.coroutines.internal.t.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.internal.t.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.internal.t.d` @AccessFlag PRIVATE_SYNTHETIC;
}
global `kotlinx.coroutines.internal.t$a` `@@kotlinx.coroutines.internal.t.e` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.t.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.internal.t.g` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `kotlinx.coroutines.internal.f0` `@@kotlinx.coroutines.internal.t.h` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3ba504.  v0:= constclass @type ^`kotlinx.coroutines.internal.t` @kind object;
  #L3ba508.  v1:= new `kotlinx.coroutines.internal.t$a`;
  #L3ba50c.  v2:= 0I;
  #L3ba50e.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/t$a;.<init>:(Lkotlin/jvm/internal/g;)V` @kind direct;
  #L3ba514.  `@@kotlinx.coroutines.internal.t.e` @type ^`kotlinx.coroutines.internal.t$a` := v1 @kind object;
  #L3ba518.  v1:= new `kotlinx.coroutines.internal.f0`;
  #L3ba51c.  v2:= "REMOVE_FROZEN" @kind object;
  #L3ba520.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/f0;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ba526.  `@@kotlinx.coroutines.internal.t.h` @type ^`kotlinx.coroutines.internal.f0` := v1 @kind object;
  #L3ba52a.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L3ba52e.  v2:= "_next" @kind object;
  #L3ba532.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L3ba538.  v1:= temp @kind object;
  #L3ba53a.  `@@kotlinx.coroutines.internal.t.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v1 @kind object;
  #L3ba53e.  v1:= "_state" @kind object;
  #L3ba542.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L3ba548.  v0:= temp @kind object;
  #L3ba54a.  `@@kotlinx.coroutines.internal.t.g` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L3ba54e.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.t` v4 @kind this, `int` v5 , `boolean` v6 ) @signature `Lkotlinx/coroutines/internal/t;.<init>:(IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ba560.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ba566.  v4.`kotlinx.coroutines.internal.t.a` @type ^`int` := v5;
  #L3ba56a.  v4.`kotlinx.coroutines.internal.t.b` @type ^`boolean` := v6 @kind boolean;
  #L3ba56e.  v6:= v5 + -1;
  #L3ba572.  v4.`kotlinx.coroutines.internal.t.c` @type ^`int` := v6;
  #L3ba576.  v0:= 0I;
  #L3ba578.  v4.`kotlinx.coroutines.internal.t._next` @type ^`java.lang.Object` := v0 @kind object;
  #L3ba57c.  v0:= 0L;
  #L3ba580.  v4.`kotlinx.coroutines.internal.t._state` @type ^`long` := v0 @kind wide;
  #L3ba584.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L3ba588.  call `<init>`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L3ba58e.  v4.`kotlinx.coroutines.internal.t.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L3ba592.  v0:= 0I;
  #L3ba594.  v1:= 1I;
  #L3ba596.  v2:= 1073741823I;
  #L3ba59c.  if v6 > v2 then goto L3ba5a4;
  #L3ba5a0.  v2:= 1I;
  #L3ba5a2.  goto L3ba5a6;
  #L3ba5a4.  v2:= 0I;
  #L3ba5a6.  v3:= "Check failed." @kind object;
  #L3ba5aa.  if v2 == 0 then goto L3ba5d0;
  #L3ba5ae.  v5:= v5 ^& v6 @kind int;
  #L3ba5b0.  if v5 != 0 then goto L3ba5b6;
  #L3ba5b4.  v0:= 1I;
  #L3ba5b6.  if v0 == 0 then goto L3ba5bc;
  #L3ba5ba.  return @kind void;
  #L3ba5bc.  v5:= new `java.lang.IllegalStateException`;
  #L3ba5c0.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ba5c6.  v6:= temp @kind object;
  #L3ba5c8.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ba5ce.  throw v5;
  #L3ba5d0.  v5:= new `java.lang.IllegalStateException`;
  #L3ba5d4.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ba5da.  v6:= temp @kind object;
  #L3ba5dc.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ba5e2.  throw v5;
}
procedure `kotlinx.coroutines.internal.t` `b`(`kotlinx.coroutines.internal.t` v6 @kind this, `long` v7 ) @signature `Lkotlinx/coroutines/internal/t;.b:(J)Lkotlinx/coroutines/internal/t;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ba2e4.  v0:= new `kotlinx.coroutines.internal.t`;
  #L3ba2e8.  v1:= v6.`kotlinx.coroutines.internal.t.a` @type ^`int`;
  #L3ba2ec.  v1:= v1 * 2;
  #L3ba2f0.  v2:= v6.`kotlinx.coroutines.internal.t.b` @type ^`boolean` @kind boolean;
  #L3ba2f4.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/t;.<init>:(IZ)V` @kind direct;
  #L3ba2fa.  v1:= 1073741823L;
  #L3ba300.  v1:= v1 ^& v7 @kind long;
  #L3ba302.  v3:= 0I;
  #L3ba304.  v1:= v1 ^> v3 @kind long;
  #L3ba306.  v2:= (`int`) v1 @kind l2i;
  #L3ba308.  v3:= 1152921503533105152L;
  #L3ba312.  v3:= v3 ^& v7 @kind long;
  #L3ba314.  v1:= 30I;
  #L3ba318.  v3:= v3 ^> v1 @kind long;
  #L3ba31a.  v1:= (`int`) v3 @kind l2i;
  #L3ba31c.  v3:= v6.`kotlinx.coroutines.internal.t.c` @type ^`int`;
  #L3ba320.  v4:= v2 ^& v3 @kind int;
  #L3ba324.  v5:= v1 ^& v3 @kind int;
  #L3ba328.  if v4 == v5 then goto L3ba35e;
  #L3ba32c.  v4:= v6.`kotlinx.coroutines.internal.t.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3ba330.  v3:= v3 ^& v2 @kind int;
  #L3ba332.  call temp:= `get`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3ba338.  v3:= temp @kind object;
  #L3ba33a.  if v3 != 0 then goto L3ba348;
  #L3ba33e.  v3:= new `kotlinx.coroutines.internal.t$b`;
  #L3ba342.  call `<init>`(v3, v2) @signature `Lkotlinx/coroutines/internal/t$b;.<init>:(I)V` @kind direct;
  #L3ba348.  v4:= v0.`kotlinx.coroutines.internal.t.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3ba34c.  v5:= v0.`kotlinx.coroutines.internal.t.c` @type ^`int`;
  #L3ba350.  v5:= v5 ^& v2 @kind int;
  #L3ba352.  call `set`(v4, v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L3ba358.  v2:= v2 + 1;
  #L3ba35c.  goto L3ba31c;
  #L3ba35e.  v1:= `@@kotlinx.coroutines.internal.t.e` @type ^`kotlinx.coroutines.internal.t$a` @kind object;
  #L3ba362.  v2:= 1152921504606846976L;
  #L3ba366.  call temp:= `d`(v1, v7, v2) @signature `Lkotlinx/coroutines/internal/t$a;.d:(JJ)J` @kind virtual;
  #L3ba36c.  v7:= temp @kind wide;
  #L3ba36e.  v0.`kotlinx.coroutines.internal.t._state` @type ^`long` := v7 @kind wide;
  #L3ba372.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.t` `c`(`kotlinx.coroutines.internal.t` v3 @kind this, `long` v4 ) @signature `Lkotlinx/coroutines/internal/t;.c:(J)Lkotlinx/coroutines/internal/t;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3ba384.  v0:= v3.`kotlinx.coroutines.internal.t._next` @type ^`java.lang.Object` @kind object;
  #L3ba388.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L3ba38c.  if v0 == 0 then goto L3ba392;
  #L3ba390.  return v0 @kind object;
  #L3ba392.  v0:= `@@kotlinx.coroutines.internal.t.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3ba396.  v1:= 0I;
  #L3ba398.  call temp:= `b`(v3, v4) @signature `Lkotlinx/coroutines/internal/t;.b:(J)Lkotlinx/coroutines/internal/t;` @kind direct;
  #L3ba39e.  v2:= temp @kind object;
  #L3ba3a0.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3ba3a6.  goto L3ba384;
}
procedure `kotlinx.coroutines.internal.t` `e`(`kotlinx.coroutines.internal.t` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/t;.e:(ILjava/lang/Object;)Lkotlinx/coroutines/internal/t;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3ba3b8.  v0:= v2.`kotlinx.coroutines.internal.t.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3ba3bc.  v1:= v2.`kotlinx.coroutines.internal.t.c` @type ^`int`;
  #L3ba3c0.  v1:= v1 ^& v3 @kind int;
  #L3ba3c2.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3ba3c8.  v0:= temp @kind object;
  #L3ba3ca.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.t$b` @kind boolean;
  #L3ba3ce.  if v1 == 0 then goto L3ba3f0;
  #L3ba3d2.  v0:= (`kotlinx.coroutines.internal.t$b`) v0 @kind object;
  #L3ba3d6.  v0:= v0.`kotlinx.coroutines.internal.t$b.a` @type ^`int`;
  #L3ba3da.  if v0 != v3 then goto L3ba3f0;
  #L3ba3de.  v0:= v2.`kotlinx.coroutines.internal.t.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3ba3e2.  v1:= v2.`kotlinx.coroutines.internal.t.c` @type ^`int`;
  #L3ba3e6.  v3:= v3 ^& v1 @kind int;
  #L3ba3e8.  call `set`(v0, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L3ba3ee.  return v2 @kind object;
  #L3ba3f0.  v3:= 0I;
  #L3ba3f2.  return v3 @kind object;
}
procedure `long` `h`(`kotlinx.coroutines.internal.t` v9 @kind this) @signature `Lkotlinx/coroutines/internal/t;.h:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3ba4c0.  v2:= v9.`kotlinx.coroutines.internal.t._state` @type ^`long` @kind wide;
  #L3ba4c4.  v0:= 1152921504606846976L;
  #L3ba4c8.  v4:= v2 ^& v0 @kind long;
  #L3ba4cc.  v6:= 0L;
  #L3ba4d0.  v8:= lcmp(v4, v6);
  #L3ba4d4.  if v8 == 0 then goto L3ba4da;
  #L3ba4d8.  return v2 @kind wide;
  #L3ba4da.  v6:= v2 ^| v0 @kind long;
  #L3ba4de.  v0:= `@@kotlinx.coroutines.internal.t.g` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L3ba4e2.  v1:= v9 @kind object;
  #L3ba4e4.  v4:= v6 @kind wide;
  #L3ba4e6.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L3ba4ec.  v0:= temp;
  #L3ba4ee.  if v0 == 0 then goto L3ba4c0;
  #L3ba4f2.  return v6 @kind wide;
}
procedure `kotlinx.coroutines.internal.t` `k`(`kotlinx.coroutines.internal.t` v9 @kind this, `int` v10 , `int` v11 ) @signature `Lkotlinx/coroutines/internal/t;.k:(II)Lkotlinx/coroutines/internal/t;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3ba428.  v2:= v9.`kotlinx.coroutines.internal.t._state` @type ^`long` @kind wide;
  #L3ba42c.  v0:= `@@kotlinx.coroutines.internal.t.e` @type ^`kotlinx.coroutines.internal.t$a` @kind object;
  #L3ba430.  v4:= 1073741823L;
  #L3ba436.  v4:= v4 ^& v2 @kind long;
  #L3ba438.  v1:= 0I;
  #L3ba43a.  v4:= v4 ^> v1 @kind long;
  #L3ba43c.  v6:= (`int`) v4 @kind l2i;
  #L3ba43e.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3ba444.  v4:= temp;
  #L3ba446.  if v4 == 0 then goto L3ba462;
  #L3ba44a.  if v6 != v10 then goto L3ba450;
  #L3ba44e.  v1:= 1I;
  #L3ba450.  if v1 == 0 then goto L3ba456;
  #L3ba454.  goto L3ba462;
  #L3ba456.  v10:= new `java.lang.AssertionError`;
  #L3ba45a.  call `<init>`(v10) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3ba460.  throw v10;
  #L3ba462.  v4:= 1152921504606846976L;
  #L3ba466.  v4:= v4 ^& v2 @kind long;
  #L3ba468.  v7:= 0L;
  #L3ba46c.  v1:= lcmp(v4, v7);
  #L3ba470.  if v1 == 0 then goto L3ba47e;
  #L3ba474.  call temp:= `i`(v9) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/t;` @kind virtual;
  #L3ba47a.  v10:= temp @kind object;
  #L3ba47c.  return v10 @kind object;
  #L3ba47e.  v1:= `@@kotlinx.coroutines.internal.t.g` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L3ba482.  call temp:= `b`(v0, v2, v11) @signature `Lkotlinx/coroutines/internal/t$a;.b:(JI)J` @kind virtual;
  #L3ba488.  v4:= temp @kind wide;
  #L3ba48a.  v0:= v1 @kind object;
  #L3ba48c.  v1:= v9 @kind object;
  #L3ba48e.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L3ba494.  v0:= temp;
  #L3ba496.  if v0 == 0 then goto L3ba428;
  #L3ba49a.  v10:= v9.`kotlinx.coroutines.internal.t.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3ba49e.  v11:= v9.`kotlinx.coroutines.internal.t.c` @type ^`int`;
  #L3ba4a2.  v11:= v11 ^& v6 @kind int;
  #L3ba4a4.  v0:= 0I;
  #L3ba4a6.  call `set`(v10, v11, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L3ba4ac.  return v0 @kind object;
}
procedure `int` `a`(`kotlinx.coroutines.internal.t` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lkotlinx/coroutines/internal/t;.a:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3ba0b4.  v2:= v13.`kotlinx.coroutines.internal.t._state` @type ^`long` @kind wide;
  #L3ba0b8.  v0:= 1.727233711018889E-77D;
  #L3ba0bc.  v0:= v0 ^& v2 @kind long;
  #L3ba0be.  v6:= 0L;
  #L3ba0c2.  v4:= lcmp(v0, v6);
  #L3ba0c6.  if v4 == 0 then goto L3ba0d8;
  #L3ba0ca.  v14:= `@@kotlinx.coroutines.internal.t.e` @type ^`kotlinx.coroutines.internal.t$a` @kind object;
  #L3ba0ce.  call temp:= `a`(v14, v2) @signature `Lkotlinx/coroutines/internal/t$a;.a:(J)I` @kind virtual;
  #L3ba0d4.  v14:= temp;
  #L3ba0d6.  return v14;
  #L3ba0d8.  v0:= `@@kotlinx.coroutines.internal.t.e` @type ^`kotlinx.coroutines.internal.t$a` @kind object;
  #L3ba0dc.  v4:= 1073741823L;
  #L3ba0e2.  v4:= v4 ^& v2 @kind long;
  #L3ba0e4.  v8:= 0I;
  #L3ba0e6.  v4:= v4 ^> v8 @kind long;
  #L3ba0e8.  v1:= (`int`) v4 @kind l2i;
  #L3ba0ea.  v4:= 1152921503533105152L;
  #L3ba0f4.  v4:= v4 ^& v2 @kind long;
  #L3ba0f6.  v9:= 30I;
  #L3ba0fa.  v4:= v4 ^> v9 @kind long;
  #L3ba0fc.  v9:= (`int`) v4 @kind l2i;
  #L3ba0fe.  v10:= v13.`kotlinx.coroutines.internal.t.c` @type ^`int`;
  #L3ba102.  v4:= v9 + 2;
  #L3ba106.  v4:= v4 ^& v10 @kind int;
  #L3ba108.  v5:= v1 ^& v10 @kind int;
  #L3ba10c.  v11:= 1I;
  #L3ba10e.  if v4 != v5 then goto L3ba114;
  #L3ba112.  return v11;
  #L3ba114.  v4:= v13.`kotlinx.coroutines.internal.t.b` @type ^`boolean` @kind boolean;
  #L3ba118.  v5:= 1073741823I;
  #L3ba11e.  if v4 != 0 then goto L3ba152;
  #L3ba122.  v4:= v13.`kotlinx.coroutines.internal.t.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3ba126.  v12:= v9 ^& v10 @kind int;
  #L3ba12a.  call temp:= `get`(v4, v12) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3ba130.  v4:= temp @kind object;
  #L3ba132.  if v4 == 0 then goto L3ba152;
  #L3ba136.  v0:= v13.`kotlinx.coroutines.internal.t.a` @type ^`int`;
  #L3ba13a.  v2:= 1024I;
  #L3ba13e.  if v0 < v2 then goto L3ba150;
  #L3ba142.  v9:= v9 - v1 @kind int;
  #L3ba144.  v1:= v9 ^& v5 @kind int;
  #L3ba148.  v0:= v0 ^> 1;
  #L3ba14c.  if v1 <= v0 then goto L3ba0b4;
  #L3ba150.  return v11;
  #L3ba152.  v1:= v9 + 1;
  #L3ba156.  v1:= v1 ^& v5 @kind int;
  #L3ba158.  v4:= `@@kotlinx.coroutines.internal.t.g` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L3ba15c.  call temp:= `c`(v0, v2, v1) @signature `Lkotlinx/coroutines/internal/t$a;.c:(JI)J` @kind virtual;
  #L3ba162.  v11:= temp @kind wide;
  #L3ba164.  v0:= v4 @kind object;
  #L3ba166.  v1:= v13 @kind object;
  #L3ba168.  v4:= v11 @kind wide;
  #L3ba16a.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L3ba170.  v0:= temp;
  #L3ba172.  if v0 == 0 then goto L3ba0b4;
  #L3ba176.  v0:= v13.`kotlinx.coroutines.internal.t.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3ba17a.  v1:= v9 ^& v10 @kind int;
  #L3ba17e.  call `set`(v0, v1, v14) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L3ba184.  v0:= v13 @kind object;
  #L3ba186.  v1:= v0.`kotlinx.coroutines.internal.t._state` @type ^`long` @kind wide;
  #L3ba18a.  v3:= 1152921504606846976L;
  #L3ba18e.  v1:= v1 ^& v3 @kind long;
  #L3ba190.  v3:= lcmp(v1, v6);
  #L3ba194.  if v3 == 0 then goto L3ba1ac;
  #L3ba198.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/t;` @kind virtual;
  #L3ba19e.  v0:= temp @kind object;
  #L3ba1a0.  call temp:= `e`(v0, v9, v14) @signature `Lkotlinx/coroutines/internal/t;.e:(ILjava/lang/Object;)Lkotlinx/coroutines/internal/t;` @kind direct;
  #L3ba1a6.  v0:= temp @kind object;
  #L3ba1a8.  if v0 != 0 then goto L3ba186;
  #L3ba1ac.  return v8;
}
procedure `boolean` `d`(`kotlinx.coroutines.internal.t` v10 @kind this) @signature `Lkotlinx/coroutines/internal/t;.d:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3ba01c.  v2:= v10.`kotlinx.coroutines.internal.t._state` @type ^`long` @kind wide;
  #L3ba020.  v0:= 2305843009213693952L;
  #L3ba024.  v4:= v2 ^& v0 @kind long;
  #L3ba028.  v6:= 1I;
  #L3ba02a.  v7:= 0L;
  #L3ba02e.  v9:= lcmp(v4, v7);
  #L3ba032.  if v9 == 0 then goto L3ba038;
  #L3ba036.  return v6;
  #L3ba038.  v4:= 1152921504606846976L;
  #L3ba03c.  v4:= v4 ^& v2 @kind long;
  #L3ba03e.  v9:= lcmp(v4, v7);
  #L3ba042.  if v9 == 0 then goto L3ba04a;
  #L3ba046.  v0:= 0I;
  #L3ba048.  return v0;
  #L3ba04a.  v4:= v2 ^| v0 @kind long;
  #L3ba04e.  v0:= `@@kotlinx.coroutines.internal.t.g` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L3ba052.  v1:= v10 @kind object;
  #L3ba054.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L3ba05a.  v0:= temp;
  #L3ba05c.  if v0 != 0 then goto L3ba062;
  #L3ba060.  goto L3ba01c;
  #L3ba062.  return v6;
}
procedure `int` `f`(`kotlinx.coroutines.internal.t` v6 @kind this) @signature `Lkotlinx/coroutines/internal/t;.f:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ba1c0.  v0:= v6.`kotlinx.coroutines.internal.t._state` @type ^`long` @kind wide;
  #L3ba1c4.  v2:= 1073741823L;
  #L3ba1ca.  v2:= v2 ^& v0 @kind long;
  #L3ba1cc.  v4:= 0I;
  #L3ba1ce.  v2:= v2 ^> v4 @kind long;
  #L3ba1d0.  v3:= (`int`) v2 @kind l2i;
  #L3ba1d2.  v4:= 1152921503533105152L;
  #L3ba1dc.  v0:= v0 ^& v4 @kind long;
  #L3ba1de.  v2:= 30I;
  #L3ba1e2.  v0:= v0 ^> v2 @kind long;
  #L3ba1e4.  v1:= (`int`) v0 @kind l2i;
  #L3ba1e6.  v1:= v1 - v3 @kind int;
  #L3ba1e8.  v0:= 1073741823I;
  #L3ba1ee.  v0:= v0 ^& v1 @kind int;
  #L3ba1f0.  return v0;
}
procedure `boolean` `g`(`kotlinx.coroutines.internal.t` v7 @kind this) @signature `Lkotlinx/coroutines/internal/t;.g:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ba074.  v0:= v7.`kotlinx.coroutines.internal.t._state` @type ^`long` @kind wide;
  #L3ba078.  v2:= 1073741823L;
  #L3ba07e.  v2:= v2 ^& v0 @kind long;
  #L3ba080.  v4:= 0I;
  #L3ba082.  v2:= v2 ^> v4 @kind long;
  #L3ba084.  v3:= (`int`) v2 @kind l2i;
  #L3ba086.  v5:= 1152921503533105152L;
  #L3ba090.  v0:= v0 ^& v5 @kind long;
  #L3ba092.  v2:= 30I;
  #L3ba096.  v0:= v0 ^> v2 @kind long;
  #L3ba098.  v1:= (`int`) v0 @kind l2i;
  #L3ba09a.  if v3 != v1 then goto L3ba0a0;
  #L3ba09e.  v4:= 1I;
  #L3ba0a0.  return v4;
}
procedure `kotlinx.coroutines.internal.t` `i`(`kotlinx.coroutines.internal.t` v2 @kind this) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/t;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3ba404.  call temp:= `h`(v2) @signature `Lkotlinx/coroutines/internal/t;.h:()J` @kind direct;
  #L3ba40a.  v0:= temp @kind wide;
  #L3ba40c.  call temp:= `c`(v2, v0) @signature `Lkotlinx/coroutines/internal/t;.c:(J)Lkotlinx/coroutines/internal/t;` @kind direct;
  #L3ba412.  v0:= temp @kind object;
  #L3ba414.  return v0 @kind object;
}
procedure `java.lang.Object` `j`(`kotlinx.coroutines.internal.t` v10 @kind this) @signature `Lkotlinx/coroutines/internal/t;.j:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3ba204.  v2:= v10.`kotlinx.coroutines.internal.t._state` @type ^`long` @kind wide;
  #L3ba208.  v0:= 1152921504606846976L;
  #L3ba20c.  v0:= v0 ^& v2 @kind long;
  #L3ba20e.  v4:= 0L;
  #L3ba212.  v6:= lcmp(v0, v4);
  #L3ba216.  if v6 == 0 then goto L3ba220;
  #L3ba21a.  v0:= `@@kotlinx.coroutines.internal.t.h` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L3ba21e.  return v0 @kind object;
  #L3ba220.  v0:= `@@kotlinx.coroutines.internal.t.e` @type ^`kotlinx.coroutines.internal.t$a` @kind object;
  #L3ba224.  v4:= 1073741823L;
  #L3ba22a.  v4:= v4 ^& v2 @kind long;
  #L3ba22c.  v1:= 0I;
  #L3ba22e.  v4:= v4 ^> v1 @kind long;
  #L3ba230.  v6:= (`int`) v4 @kind l2i;
  #L3ba232.  v4:= 1152921503533105152L;
  #L3ba23c.  v4:= v4 ^& v2 @kind long;
  #L3ba23e.  v1:= 30I;
  #L3ba242.  v4:= v4 ^> v1 @kind long;
  #L3ba244.  v1:= (`int`) v4 @kind l2i;
  #L3ba246.  v4:= v10.`kotlinx.coroutines.internal.t.c` @type ^`int`;
  #L3ba24a.  v1:= v1 ^& v4 @kind int;
  #L3ba24c.  v5:= v6 ^& v4 @kind int;
  #L3ba250.  v7:= 0I;
  #L3ba252.  if v1 != v5 then goto L3ba258;
  #L3ba256.  return v7 @kind object;
  #L3ba258.  v1:= v10.`kotlinx.coroutines.internal.t.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3ba25c.  v4:= v4 ^& v6 @kind int;
  #L3ba25e.  call temp:= `get`(v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3ba264.  v8:= temp @kind object;
  #L3ba266.  if v8 != 0 then goto L3ba274;
  #L3ba26a.  v0:= v10.`kotlinx.coroutines.internal.t.b` @type ^`boolean` @kind boolean;
  #L3ba26e.  if v0 == 0 then goto L3ba204;
  #L3ba272.  return v7 @kind object;
  #L3ba274.  v1:= instanceof @variable v8 @type ^`kotlinx.coroutines.internal.t$b` @kind boolean;
  #L3ba278.  if v1 == 0 then goto L3ba27e;
  #L3ba27c.  return v7 @kind object;
  #L3ba27e.  v1:= v6 + 1;
  #L3ba282.  v4:= 1073741823I;
  #L3ba288.  v9:= v1 ^& v4 @kind int;
  #L3ba28c.  v1:= `@@kotlinx.coroutines.internal.t.g` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L3ba290.  call temp:= `b`(v0, v2, v9) @signature `Lkotlinx/coroutines/internal/t$a;.b:(JI)J` @kind virtual;
  #L3ba296.  v4:= temp @kind wide;
  #L3ba298.  v0:= v1 @kind object;
  #L3ba29a.  v1:= v10 @kind object;
  #L3ba29c.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L3ba2a2.  v0:= temp;
  #L3ba2a4.  if v0 == 0 then goto L3ba2ba;
  #L3ba2a8.  v0:= v10.`kotlinx.coroutines.internal.t.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3ba2ac.  v1:= v10.`kotlinx.coroutines.internal.t.c` @type ^`int`;
  #L3ba2b0.  v1:= v1 ^& v6 @kind int;
  #L3ba2b2.  call `set`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L3ba2b8.  return v8 @kind object;
  #L3ba2ba.  v0:= v10.`kotlinx.coroutines.internal.t.b` @type ^`boolean` @kind boolean;
  #L3ba2be.  if v0 == 0 then goto L3ba204;
  #L3ba2c2.  v0:= v10 @kind object;
  #L3ba2c4.  call temp:= `k`(v0, v6, v9) @signature `Lkotlinx/coroutines/internal/t;.k:(II)Lkotlinx/coroutines/internal/t;` @kind direct;
  #L3ba2ca.  v0:= temp @kind object;
  #L3ba2cc.  if v0 != 0 then goto L3ba2c4;
  #L3ba2d0.  return v8 @kind object;
}
