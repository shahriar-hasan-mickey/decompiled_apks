record `kotlinx.coroutines.internal.r$a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.c` @kind class {
  `kotlinx.coroutines.internal.r` `kotlinx.coroutines.internal.r$a.b` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.r` `kotlinx.coroutines.internal.r$a.c` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.r$a` v0 @kind this, `kotlinx.coroutines.internal.r` v1 @kind object) @signature `Lkotlinx/coroutines/internal/r$a;.<init>:(Lkotlinx/coroutines/internal/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3b99b8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/c;.<init>:()V` @kind direct;
  #L3b99be.  v0.`kotlinx.coroutines.internal.r$a.b` @type ^`kotlinx.coroutines.internal.r` := v1 @kind object;
  #L3b99c2.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.internal.r$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/internal/r$a;.d:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3b99d4.  v1:= (`kotlinx.coroutines.internal.r`) v1 @kind object;
  #L3b99d8.  call `h`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/r$a;.h:(Lkotlinx/coroutines/internal/r;Ljava/lang/Object;)V` @kind virtual;
  #L3b99de.  return @kind void;
}
procedure `void` `h`(`kotlinx.coroutines.internal.r$a` v2 @kind this, `kotlinx.coroutines.internal.r` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/r$a;.h:(Lkotlinx/coroutines/internal/r;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b99f0.  if v4 != 0 then goto L3b99f8;
  #L3b99f4.  v4:= 1I;
  #L3b99f6.  goto L3b99fa;
  #L3b99f8.  v4:= 0I;
  #L3b99fa.  if v4 == 0 then goto L3b9a04;
  #L3b99fe.  v0:= v2.`kotlinx.coroutines.internal.r$a.b` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L3b9a02.  goto L3b9a08;
  #L3b9a04.  v0:= v2.`kotlinx.coroutines.internal.r$a.c` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L3b9a08.  if v0 == 0 then goto L3b9a34;
  #L3b9a0c.  v1:= `@@kotlinx.coroutines.internal.r.o` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9a10.  call temp:= `compareAndSet`(v1, v3, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3b9a16.  v3:= temp;
  #L3b9a18.  if v3 == 0 then goto L3b9a34;
  #L3b9a1c.  if v4 == 0 then goto L3b9a34;
  #L3b9a20.  v3:= v2.`kotlinx.coroutines.internal.r$a.b` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L3b9a24.  v4:= v2.`kotlinx.coroutines.internal.r$a.c` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L3b9a28.  call `b`(v4) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3b9a2e.  call `h`(v3, v4) @signature `Lkotlinx/coroutines/internal/r;.h:(Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r;)V` @kind static;
  #L3b9a34.  return @kind void;
}
