record `kotlinx.coroutines.internal.r` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `kotlinx.coroutines.internal.r._next` @AccessFlag VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.r._prev` @AccessFlag VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.r._removedRef` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.r.o` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.r.p` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.r.q` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/r;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3b9dfc.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L3b9e00.  v1:= constclass @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L3b9e04.  v2:= "_next" @kind object;
  #L3b9e08.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L3b9e0e.  v2:= temp @kind object;
  #L3b9e10.  `@@kotlinx.coroutines.internal.r.o` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L3b9e14.  v2:= "_prev" @kind object;
  #L3b9e18.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L3b9e1e.  v2:= temp @kind object;
  #L3b9e20.  `@@kotlinx.coroutines.internal.r.p` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L3b9e24.  v2:= "_removedRef" @kind object;
  #L3b9e28.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L3b9e2e.  v0:= temp @kind object;
  #L3b9e30.  `@@kotlinx.coroutines.internal.r.q` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L3b9e34.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b9e48.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b9e4e.  v1.`kotlinx.coroutines.internal.r._next` @type ^`java.lang.Object` := v1 @kind object;
  #L3b9e52.  v1.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` := v1 @kind object;
  #L3b9e56.  v0:= 0I;
  #L3b9e58.  v1.`kotlinx.coroutines.internal.r._removedRef` @type ^`java.lang.Object` := v0 @kind object;
  #L3b9e5c.  return @kind void;
}
procedure `void` `h`(`kotlinx.coroutines.internal.r` v0 @kind object, `kotlinx.coroutines.internal.r` v1 @kind object) @signature `Lkotlinx/coroutines/internal/r;.h:(Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L3b9e70.  call `n`(v0, v1) @signature `Lkotlinx/coroutines/internal/r;.n:(Lkotlinx/coroutines/internal/r;)V` @kind direct;
  #L3b9e76.  return @kind void;
}
procedure `kotlinx.coroutines.internal.r` `l`(`kotlinx.coroutines.internal.r` v7 @kind this, `kotlinx.coroutines.internal.a0` v8 @kind object) @signature `Lkotlinx/coroutines/internal/r;.l:(Lkotlinx/coroutines/internal/a0;)Lkotlinx/coroutines/internal/r;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b9c2c.  v0:= v7.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` @kind object;
  #L3b9c30.  v0:= (`kotlinx.coroutines.internal.r`) v0 @kind object;
  #L3b9c34.  v1:= 0I;
  #L3b9c36.  v2:= v0 @kind object;
  #L3b9c38.  v3:= v1 @kind object;
  #L3b9c3a.  v4:= v2.`kotlinx.coroutines.internal.r._next` @type ^`java.lang.Object` @kind object;
  #L3b9c3e.  if v4 != v7 then goto L3b9c5c;
  #L3b9c42.  if v0 != v2 then goto L3b9c48;
  #L3b9c46.  return v2 @kind object;
  #L3b9c48.  v1:= `@@kotlinx.coroutines.internal.r.p` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9c4c.  call temp:= `compareAndSet`(v1, v7, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3b9c52.  v0:= temp;
  #L3b9c54.  if v0 != 0 then goto L3b9c5a;
  #L3b9c58.  goto L3b9c2c;
  #L3b9c5a.  return v2 @kind object;
  #L3b9c5c.  call temp:= `t`(v7) @signature `Lkotlinx/coroutines/internal/r;.t:()Z` @kind virtual;
  #L3b9c62.  v5:= temp;
  #L3b9c64.  if v5 == 0 then goto L3b9c6a;
  #L3b9c68.  return v1 @kind object;
  #L3b9c6a.  if v4 != v8 then goto L3b9c70;
  #L3b9c6e.  return v2 @kind object;
  #L3b9c70.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.a0` @kind boolean;
  #L3b9c74.  if v5 == 0 then goto L3b9c9c;
  #L3b9c78.  if v8 == 0 then goto L3b9c90;
  #L3b9c7c.  v0:= v4 @kind object;
  #L3b9c7e.  v0:= (`kotlinx.coroutines.internal.a0`) v0 @kind object;
  #L3b9c82.  call temp:= `b`(v8, v0) @signature `Lkotlinx/coroutines/internal/a0;.b:(Lkotlinx/coroutines/internal/a0;)Z` @kind virtual;
  #L3b9c88.  v0:= temp;
  #L3b9c8a.  if v0 == 0 then goto L3b9c90;
  #L3b9c8e.  return v1 @kind object;
  #L3b9c90.  v4:= (`kotlinx.coroutines.internal.a0`) v4 @kind object;
  #L3b9c94.  call temp:= `c`(v4, v2) @signature `Lkotlinx/coroutines/internal/a0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b9c9a.  goto L3b9c2c;
  #L3b9c9c.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L3b9ca0.  if v5 == 0 then goto L3b9cd0;
  #L3b9ca4.  if v3 == 0 then goto L3b9cc6;
  #L3b9ca8.  v5:= `@@kotlinx.coroutines.internal.r.o` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9cac.  v4:= (`kotlinx.coroutines.internal.b0`) v4 @kind object;
  #L3b9cb0.  v4:= v4.`kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L3b9cb4.  call temp:= `compareAndSet`(v5, v3, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3b9cba.  v2:= temp;
  #L3b9cbc.  if v2 != 0 then goto L3b9cc2;
  #L3b9cc0.  goto L3b9c2c;
  #L3b9cc2.  v2:= v3 @kind object;
  #L3b9cc4.  goto L3b9c38;
  #L3b9cc6.  v2:= v2.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` @kind object;
  #L3b9cca.  v2:= (`kotlinx.coroutines.internal.r`) v2 @kind object;
  #L3b9cce.  goto L3b9c3a;
  #L3b9cd0.  v3:= v4 @kind object;
  #L3b9cd2.  v3:= (`kotlinx.coroutines.internal.r`) v3 @kind object;
  #L3b9cd6.  v6:= v3 @kind object;
  #L3b9cd8.  v3:= v2 @kind object;
  #L3b9cda.  v2:= v6 @kind object;
  #L3b9cdc.  goto L3b9c3a;
}
procedure `kotlinx.coroutines.internal.r` `m`(`kotlinx.coroutines.internal.r` v1 @kind this, `kotlinx.coroutines.internal.r` v2 @kind object) @signature `Lkotlinx/coroutines/internal/r;.m:(Lkotlinx/coroutines/internal/r;)Lkotlinx/coroutines/internal/r;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L3b9cf0.  call temp:= `t`(v2) @signature `Lkotlinx/coroutines/internal/r;.t:()Z` @kind virtual;
  #L3b9cf6.  v0:= temp;
  #L3b9cf8.  if v0 != 0 then goto L3b9cfe;
  #L3b9cfc.  return v2 @kind object;
  #L3b9cfe.  v2:= v2.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` @kind object;
  #L3b9d02.  v2:= (`kotlinx.coroutines.internal.r`) v2 @kind object;
  #L3b9d06.  goto L3b9cf0;
}
procedure `void` `n`(`kotlinx.coroutines.internal.r` v2 @kind this, `kotlinx.coroutines.internal.r` v3 @kind object) @signature `Lkotlinx/coroutines/internal/r;.n:(Lkotlinx/coroutines/internal/r;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3b9e88.  v0:= v3.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` @kind object;
  #L3b9e8c.  v0:= (`kotlinx.coroutines.internal.r`) v0 @kind object;
  #L3b9e90.  call temp:= `o`(v2) @signature `Lkotlinx/coroutines/internal/r;.o:()Ljava/lang/Object;` @kind virtual;
  #L3b9e96.  v1:= temp @kind object;
  #L3b9e98.  if v1 == v3 then goto L3b9e9e;
  #L3b9e9c.  return @kind void;
  #L3b9e9e.  v1:= `@@kotlinx.coroutines.internal.r.p` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9ea2.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3b9ea8.  v0:= temp;
  #L3b9eaa.  if v0 == 0 then goto L3b9e88;
  #L3b9eae.  call temp:= `t`(v2) @signature `Lkotlinx/coroutines/internal/r;.t:()Z` @kind virtual;
  #L3b9eb4.  v0:= temp;
  #L3b9eb6.  if v0 == 0 then goto L3b9ec2;
  #L3b9eba.  v0:= 0I;
  #L3b9ebc.  call temp:= `l`(v3, v0) @signature `Lkotlinx/coroutines/internal/r;.l:(Lkotlinx/coroutines/internal/a0;)Lkotlinx/coroutines/internal/r;` @kind direct;
  #L3b9ec2.  return @kind void;
}
procedure `kotlinx.coroutines.internal.b0` `w`(`kotlinx.coroutines.internal.r` v2 @kind this) @signature `Lkotlinx/coroutines/internal/r;.w:()Lkotlinx/coroutines/internal/b0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3b9dc8.  v0:= v2.`kotlinx.coroutines.internal.r._removedRef` @type ^`java.lang.Object` @kind object;
  #L3b9dcc.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L3b9dd0.  if v0 != 0 then goto L3b9de8;
  #L3b9dd4.  v0:= new `kotlinx.coroutines.internal.b0`;
  #L3b9dd8.  call `<init>`(v0, v2) @signature `Lkotlinx/coroutines/internal/b0;.<init>:(Lkotlinx/coroutines/internal/r;)V` @kind direct;
  #L3b9dde.  v1:= `@@kotlinx.coroutines.internal.r.q` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9de2.  call `lazySet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3b9de8.  return v0 @kind object;
}
procedure `boolean` `j`(`kotlinx.coroutines.internal.r` v1 @kind this, `kotlinx.coroutines.internal.r` v2 @kind object, `kotlinx.coroutines.internal.r` v3 @kind object) @signature `Lkotlinx/coroutines/internal/r;.j:(Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b9a94.  v0:= `@@kotlinx.coroutines.internal.r.p` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9a98.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3b9a9e.  v0:= `@@kotlinx.coroutines.internal.r.o` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9aa2.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3b9aa8.  call temp:= `compareAndSet`(v0, v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3b9aae.  v0:= temp;
  #L3b9ab0.  if v0 != 0 then goto L3b9ab8;
  #L3b9ab4.  v2:= 0I;
  #L3b9ab6.  return v2;
  #L3b9ab8.  call `n`(v2, v3) @signature `Lkotlinx/coroutines/internal/r;.n:(Lkotlinx/coroutines/internal/r;)V` @kind direct;
  #L3b9abe.  v2:= 1I;
  #L3b9ac0.  return v2;
}
procedure `boolean` `k`(`kotlinx.coroutines.internal.r` v1 @kind this, `kotlinx.coroutines.internal.r` v2 @kind object) @signature `Lkotlinx/coroutines/internal/r;.k:(Lkotlinx/coroutines/internal/r;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b9ad4.  v0:= `@@kotlinx.coroutines.internal.r.p` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9ad8.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3b9ade.  v0:= `@@kotlinx.coroutines.internal.r.o` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9ae2.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3b9ae8.  call temp:= `o`(v1) @signature `Lkotlinx/coroutines/internal/r;.o:()Ljava/lang/Object;` @kind virtual;
  #L3b9aee.  v0:= temp @kind object;
  #L3b9af0.  if v0 == v1 then goto L3b9af8;
  #L3b9af4.  v2:= 0I;
  #L3b9af6.  return v2;
  #L3b9af8.  v0:= `@@kotlinx.coroutines.internal.r.o` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9afc.  call temp:= `compareAndSet`(v0, v1, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3b9b02.  v0:= temp;
  #L3b9b04.  if v0 == 0 then goto L3b9ae8;
  #L3b9b08.  call `n`(v2, v1) @signature `Lkotlinx/coroutines/internal/r;.n:(Lkotlinx/coroutines/internal/r;)V` @kind direct;
  #L3b9b0e.  v2:= 1I;
  #L3b9b10.  return v2;
}
procedure `java.lang.Object` `o`(`kotlinx.coroutines.internal.r` v2 @kind this) @signature `Lkotlinx/coroutines/internal/r;.o:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3b9bb4.  v0:= v2.`kotlinx.coroutines.internal.r._next` @type ^`java.lang.Object` @kind object;
  #L3b9bb8.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.a0` @kind boolean;
  #L3b9bbc.  if v1 != 0 then goto L3b9bc2;
  #L3b9bc0.  return v0 @kind object;
  #L3b9bc2.  v0:= (`kotlinx.coroutines.internal.a0`) v0 @kind object;
  #L3b9bc6.  call temp:= `c`(v0, v2) @signature `Lkotlinx/coroutines/internal/a0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b9bcc.  goto L3b9bb4;
}
procedure `kotlinx.coroutines.internal.r` `p`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.p:()Lkotlinx/coroutines/internal/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b9d18.  call temp:= `o`(v1) @signature `Lkotlinx/coroutines/internal/r;.o:()Ljava/lang/Object;` @kind virtual;
  #L3b9d1e.  v0:= temp @kind object;
  #L3b9d20.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/internal/q;.b:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/r;` @kind static;
  #L3b9d26.  v0:= temp @kind object;
  #L3b9d28.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.r` `q`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.q:()Lkotlinx/coroutines/internal/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b9d3c.  v0:= 0I;
  #L3b9d3e.  call temp:= `l`(v1, v0) @signature `Lkotlinx/coroutines/internal/r;.l:(Lkotlinx/coroutines/internal/a0;)Lkotlinx/coroutines/internal/r;` @kind direct;
  #L3b9d44.  v0:= temp @kind object;
  #L3b9d46.  if v0 != 0 then goto L3b9d5a;
  #L3b9d4a.  v0:= v1.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` @kind object;
  #L3b9d4e.  v0:= (`kotlinx.coroutines.internal.r`) v0 @kind object;
  #L3b9d52.  call temp:= `m`(v1, v0) @signature `Lkotlinx/coroutines/internal/r;.m:(Lkotlinx/coroutines/internal/r;)Lkotlinx/coroutines/internal/r;` @kind direct;
  #L3b9d58.  v0:= temp @kind object;
  #L3b9d5a.  return v0 @kind object;
}
procedure `void` `r`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.r:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b9ed4.  call temp:= `o`(v1) @signature `Lkotlinx/coroutines/internal/r;.o:()Ljava/lang/Object;` @kind virtual;
  #L3b9eda.  v0:= temp @kind object;
  #L3b9edc.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L3b9ee0.  v0:= v0.`kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L3b9ee4.  call `s`(v0) @signature `Lkotlinx/coroutines/internal/r;.s:()V` @kind virtual;
  #L3b9eea.  return @kind void;
}
procedure `void` `s`(`kotlinx.coroutines.internal.r` v3 @kind this) @signature `Lkotlinx/coroutines/internal/r;.s:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3b9efc.  v0:= v3 @kind object;
  #L3b9efe.  call temp:= `o`(v0) @signature `Lkotlinx/coroutines/internal/r;.o:()Ljava/lang/Object;` @kind virtual;
  #L3b9f04.  v1:= temp @kind object;
  #L3b9f06.  v2:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L3b9f0a.  if v2 == 0 then goto L3b9f18;
  #L3b9f0e.  v1:= (`kotlinx.coroutines.internal.b0`) v1 @kind object;
  #L3b9f12.  v0:= v1.`kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L3b9f16.  goto L3b9efe;
  #L3b9f18.  v1:= 0I;
  #L3b9f1a.  call temp:= `l`(v0, v1) @signature `Lkotlinx/coroutines/internal/r;.l:(Lkotlinx/coroutines/internal/a0;)Lkotlinx/coroutines/internal/r;` @kind direct;
  #L3b9f20.  return @kind void;
}
procedure `boolean` `t`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.t:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b9b24.  call temp:= `o`(v1) @signature `Lkotlinx/coroutines/internal/r;.o:()Ljava/lang/Object;` @kind virtual;
  #L3b9b2a.  v0:= temp @kind object;
  #L3b9b2c.  v0:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L3b9b30.  return v0;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.r` v2 @kind this) @signature `Lkotlinx/coroutines/internal/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b9be0.  v0:= new `java.lang.StringBuilder`;
  #L3b9be4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b9bea.  v1:= new `kotlinx.coroutines.internal.r$c`;
  #L3b9bee.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/r$c;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3b9bf4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b9bfa.  v1:= 64I;
  #L3b9bfe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b9c04.  call temp:= `b`(v2) @signature `Lac/q0;.b:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3b9c0a.  v1:= temp @kind object;
  #L3b9c0c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b9c12.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b9c18.  v0:= temp @kind object;
  #L3b9c1a.  return v0 @kind object;
}
procedure `boolean` `u`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.u:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b9b44.  call temp:= `v`(v1) @signature `Lkotlinx/coroutines/internal/r;.v:()Lkotlinx/coroutines/internal/r;` @kind virtual;
  #L3b9b4a.  v0:= temp @kind object;
  #L3b9b4c.  if v0 != 0 then goto L3b9b54;
  #L3b9b50.  v0:= 1I;
  #L3b9b52.  goto L3b9b56;
  #L3b9b54.  v0:= 0I;
  #L3b9b56.  return v0;
}
procedure `kotlinx.coroutines.internal.r` `v`(`kotlinx.coroutines.internal.r` v4 @kind this) @signature `Lkotlinx/coroutines/internal/r;.v:()Lkotlinx/coroutines/internal/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b9d6c.  call temp:= `o`(v4) @signature `Lkotlinx/coroutines/internal/r;.o:()Ljava/lang/Object;` @kind virtual;
  #L3b9d72.  v0:= temp @kind object;
  #L3b9d74.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L3b9d78.  if v1 == 0 then goto L3b9d86;
  #L3b9d7c.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L3b9d80.  v0:= v0.`kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L3b9d84.  return v0 @kind object;
  #L3b9d86.  if v0 != v4 then goto L3b9d90;
  #L3b9d8a.  v0:= (`kotlinx.coroutines.internal.r`) v0 @kind object;
  #L3b9d8e.  return v0 @kind object;
  #L3b9d90.  v1:= v0 @kind object;
  #L3b9d92.  v1:= (`kotlinx.coroutines.internal.r`) v1 @kind object;
  #L3b9d96.  call temp:= `w`(v1) @signature `Lkotlinx/coroutines/internal/r;.w:()Lkotlinx/coroutines/internal/b0;` @kind direct;
  #L3b9d9c.  v2:= temp @kind object;
  #L3b9d9e.  v3:= `@@kotlinx.coroutines.internal.r.o` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9da2.  call temp:= `compareAndSet`(v3, v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3b9da8.  v0:= temp;
  #L3b9daa.  if v0 == 0 then goto L3b9d6c;
  #L3b9dae.  v0:= 0I;
  #L3b9db0.  call temp:= `l`(v1, v0) @signature `Lkotlinx/coroutines/internal/r;.l:(Lkotlinx/coroutines/internal/a0;)Lkotlinx/coroutines/internal/r;` @kind direct;
  #L3b9db6.  return v0 @kind object;
}
procedure `int` `x`(`kotlinx.coroutines.internal.r` v1 @kind this, `kotlinx.coroutines.internal.r` v2 @kind object, `kotlinx.coroutines.internal.r` v3 @kind object, `kotlinx.coroutines.internal.r$a` v4 @kind object) @signature `Lkotlinx/coroutines/internal/r;.x:(Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r$a;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b9b68.  v0:= `@@kotlinx.coroutines.internal.r.p` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9b6c.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3b9b72.  v0:= `@@kotlinx.coroutines.internal.r.o` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b9b76.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3b9b7c.  v4.`kotlinx.coroutines.internal.r$a.c` @type ^`kotlinx.coroutines.internal.r` := v3 @kind object;
  #L3b9b80.  call temp:= `compareAndSet`(v0, v1, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3b9b86.  v2:= temp;
  #L3b9b88.  if v2 != 0 then goto L3b9b90;
  #L3b9b8c.  v2:= 0I;
  #L3b9b8e.  return v2;
  #L3b9b90.  call temp:= `c`(v4, v1) @signature `Lkotlinx/coroutines/internal/c;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b9b96.  v2:= temp @kind object;
  #L3b9b98.  if v2 != 0 then goto L3b9ba0;
  #L3b9b9c.  v2:= 1I;
  #L3b9b9e.  goto L3b9ba2;
  #L3b9ba0.  v2:= 2I;
  #L3b9ba2.  return v2;
}
