record `kotlinx.coroutines.internal.s` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `kotlinx.coroutines.internal.s._cur` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.s.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/s;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3ba6a4.  v0:= constclass @type ^`kotlinx.coroutines.internal.s` @kind object;
  #L3ba6a8.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L3ba6ac.  v2:= "_cur" @kind object;
  #L3ba6b0.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L3ba6b6.  v0:= temp @kind object;
  #L3ba6b8.  `@@kotlinx.coroutines.internal.s.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L3ba6bc.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.s` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/internal/s;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ba6d0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ba6d6.  v0:= new `kotlinx.coroutines.internal.t`;
  #L3ba6da.  v1:= 8I;
  #L3ba6de.  call `<init>`(v0, v1, v3) @signature `Lkotlinx/coroutines/internal/t;.<init>:(IZ)V` @kind direct;
  #L3ba6e4.  v2.`kotlinx.coroutines.internal.s._cur` @type ^`java.lang.Object` := v0 @kind object;
  #L3ba6e8.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.internal.s` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/s;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3ba5f4.  v0:= v3.`kotlinx.coroutines.internal.s._cur` @type ^`java.lang.Object` @kind object;
  #L3ba5f8.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L3ba5fc.  call temp:= `a`(v0, v4) @signature `Lkotlinx/coroutines/internal/t;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L3ba602.  v1:= temp;
  #L3ba604.  v2:= 1I;
  #L3ba606.  if v1 == 0 then goto L3ba62e;
  #L3ba60a.  if v1 == v2 then goto L3ba61a;
  #L3ba60e.  v0:= 2I;
  #L3ba610.  if v1 == v0 then goto L3ba616;
  #L3ba614.  goto L3ba5f4;
  #L3ba616.  v4:= 0I;
  #L3ba618.  return v4;
  #L3ba61a.  v1:= `@@kotlinx.coroutines.internal.s.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3ba61e.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/t;` @kind virtual;
  #L3ba624.  v2:= temp @kind object;
  #L3ba626.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3ba62c.  goto L3ba5f4;
  #L3ba62e.  return v2;
}
procedure `void` `b`(`kotlinx.coroutines.internal.s` v3 @kind this) @signature `Lkotlinx/coroutines/internal/s;.b:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3ba6fc.  v0:= v3.`kotlinx.coroutines.internal.s._cur` @type ^`java.lang.Object` @kind object;
  #L3ba700.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L3ba704.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/t;.d:()Z` @kind virtual;
  #L3ba70a.  v1:= temp;
  #L3ba70c.  if v1 == 0 then goto L3ba712;
  #L3ba710.  return @kind void;
  #L3ba712.  v1:= `@@kotlinx.coroutines.internal.s.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3ba716.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/t;` @kind virtual;
  #L3ba71c.  v2:= temp @kind object;
  #L3ba71e.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3ba724.  goto L3ba6fc;
}
procedure `int` `c`(`kotlinx.coroutines.internal.s` v1 @kind this) @signature `Lkotlinx/coroutines/internal/s;.c:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3ba640.  v0:= v1.`kotlinx.coroutines.internal.s._cur` @type ^`java.lang.Object` @kind object;
  #L3ba644.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L3ba648.  call temp:= `f`(v0) @signature `Lkotlinx/coroutines/internal/t;.f:()I` @kind virtual;
  #L3ba64e.  v0:= temp;
  #L3ba650.  return v0;
}
procedure `java.lang.Object` `d`(`kotlinx.coroutines.internal.s` v3 @kind this) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3ba664.  v0:= v3.`kotlinx.coroutines.internal.s._cur` @type ^`java.lang.Object` @kind object;
  #L3ba668.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L3ba66c.  call temp:= `j`(v0) @signature `Lkotlinx/coroutines/internal/t;.j:()Ljava/lang/Object;` @kind virtual;
  #L3ba672.  v1:= temp @kind object;
  #L3ba674.  v2:= `@@kotlinx.coroutines.internal.t.h` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L3ba678.  if v1 == v2 then goto L3ba67e;
  #L3ba67c.  return v1 @kind object;
  #L3ba67e.  v1:= `@@kotlinx.coroutines.internal.s.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3ba682.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/t;` @kind virtual;
  #L3ba688.  v2:= temp @kind object;
  #L3ba68a.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3ba690.  goto L3ba664;
}
