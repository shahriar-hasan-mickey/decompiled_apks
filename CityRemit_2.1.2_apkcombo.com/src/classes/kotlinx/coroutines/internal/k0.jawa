record `kotlinx.coroutines.internal.k0` @kind class @AccessFlag PUBLIC {
  `int` `kotlinx.coroutines.internal.k0._size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlinx.coroutines.internal.l0`[] `kotlinx.coroutines.internal.k0.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.k0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3bbe58.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3bbe5e.  v0:= 0I;
  #L3bbe60.  v1.`kotlinx.coroutines.internal.k0._size` @type ^`int` := v0;
  #L3bbe64.  return @kind void;
}
procedure `kotlinx.coroutines.internal.l0`[] `f`(`kotlinx.coroutines.internal.k0` v3 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.f:()[Lkotlinx/coroutines/internal/l0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3bbdfc.  v0:= v3.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L3bbe00.  if v0 != 0 then goto L3bbe10;
  #L3bbe04.  v0:= 4I;
  #L3bbe06.  v0:= new `kotlinx.coroutines.internal.l0`[v0];
  #L3bbe0a.  v3.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] := v0 @kind object;
  #L3bbe0e.  goto L3bbe44;
  #L3bbe10.  call temp:= `c`(v3) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbe16.  v1:= temp;
  #L3bbe18.  v2:= length @variable v0;
  #L3bbe1a.  if v1 < v2 then goto L3bbe44;
  #L3bbe1e.  call temp:= `c`(v3) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbe24.  v1:= temp;
  #L3bbe26.  v1:= v1 * 2;
  #L3bbe2a.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3bbe30.  v0:= temp @kind object;
  #L3bbe32.  v1:= "copyOf(this, newSize)" @kind object;
  #L3bbe36.  call `d`(v0, v1) @signature `Lkotlin/jvm/internal/k;.d:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3bbe3c.  v0:= (`kotlinx.coroutines.internal.l0`[]) v0 @kind object;
  #L3bbe40.  v3.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] := v0 @kind object;
  #L3bbe44.  return v0 @kind object;
}
procedure `void` `j`(`kotlinx.coroutines.internal.k0` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/internal/k0;.j:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L3bbeec.  v0.`kotlinx.coroutines.internal.k0._size` @type ^`int` := v1;
  #L3bbef0.  return @kind void;
}
procedure `void` `k`(`kotlinx.coroutines.internal.k0` v5 @kind this, `int` v6 ) @signature `Lkotlinx/coroutines/internal/k0;.k:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3bbf04.  v0:= v6 * 2;
  #L3bbf08.  v0:= v0 + 1;
  #L3bbf0c.  call temp:= `c`(v5) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbf12.  v1:= temp;
  #L3bbf14.  if v0 < v1 then goto L3bbf1a;
  #L3bbf18.  return @kind void;
  #L3bbf1a.  v1:= v5.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L3bbf1e.  call `b`(v1) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbf24.  v2:= v0 + 1;
  #L3bbf28.  call temp:= `c`(v5) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbf2e.  v3:= temp;
  #L3bbf30.  if v2 >= v3 then goto L3bbf5a;
  #L3bbf34.  v3:= v1[v2] @kind object;
  #L3bbf38.  call `b`(v3) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbf3e.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L3bbf42.  v4:= v1[v0] @kind object;
  #L3bbf46.  call `b`(v4) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbf4c.  call temp:= `compareTo`(v3, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L3bbf52.  v3:= temp;
  #L3bbf54.  if v3 >= 0 then goto L3bbf5a;
  #L3bbf58.  v0:= v2;
  #L3bbf5a.  v2:= v1[v6] @kind object;
  #L3bbf5e.  call `b`(v2) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbf64.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L3bbf68.  v1:= v1[v0] @kind object;
  #L3bbf6c.  call `b`(v1) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbf72.  call temp:= `compareTo`(v2, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L3bbf78.  v1:= temp;
  #L3bbf7a.  if v1 > 0 then goto L3bbf80;
  #L3bbf7e.  return @kind void;
  #L3bbf80.  call `m`(v5, v6, v0) @signature `Lkotlinx/coroutines/internal/k0;.m:(II)V` @kind direct;
  #L3bbf86.  v6:= v0;
  #L3bbf88.  goto L3bbf04;
}
procedure `void` `l`(`kotlinx.coroutines.internal.k0` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/internal/k0;.l:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3bbf9c.  if v4 > 0 then goto L3bbfa2;
  #L3bbfa0.  return @kind void;
  #L3bbfa2.  v0:= v3.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L3bbfa6.  call `b`(v0) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbfac.  v1:= v4 + -1;
  #L3bbfb0.  v1:= v1 / 2;
  #L3bbfb4.  v2:= v0[v1] @kind object;
  #L3bbfb8.  call `b`(v2) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbfbe.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L3bbfc2.  v0:= v0[v4] @kind object;
  #L3bbfc6.  call `b`(v0) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbfcc.  call temp:= `compareTo`(v2, v0) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L3bbfd2.  v0:= temp;
  #L3bbfd4.  if v0 > 0 then goto L3bbfda;
  #L3bbfd8.  return @kind void;
  #L3bbfda.  call `m`(v3, v4, v1) @signature `Lkotlinx/coroutines/internal/k0;.m:(II)V` @kind direct;
  #L3bbfe0.  v4:= v1;
  #L3bbfe2.  goto L3bbf9c;
}
procedure `void` `m`(`kotlinx.coroutines.internal.k0` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlinx/coroutines/internal/k0;.m:(II)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3bbff4.  v0:= v3.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L3bbff8.  call `b`(v0) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbffe.  v1:= v0[v5] @kind object;
  #L3bc002.  call `b`(v1) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bc008.  v2:= v0[v4] @kind object;
  #L3bc00c.  call `b`(v2) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bc012.  v0[v4]:= v1 @kind object;
  #L3bc016.  v0[v5]:= v2 @kind object;
  #L3bc01a.  call `e`(v1, v4) @signature `Lkotlinx/coroutines/internal/l0;.e:(I)V` @kind interface;
  #L3bc020.  call `e`(v2, v5) @signature `Lkotlinx/coroutines/internal/l0;.e:(I)V` @kind interface;
  #L3bc026.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.internal.k0` v3 @kind this, `kotlinx.coroutines.internal.l0` v4 @kind object) @signature `Lkotlinx/coroutines/internal/k0;.a:(Lkotlinx/coroutines/internal/l0;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3bbe78.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3bbe7e.  v0:= temp;
  #L3bbe80.  if v0 == 0 then goto L3bbea8;
  #L3bbe84.  call temp:= `j`(v4) @signature `Lkotlinx/coroutines/internal/l0;.j:()Lkotlinx/coroutines/internal/k0;` @kind interface;
  #L3bbe8a.  v0:= temp @kind object;
  #L3bbe8c.  if v0 != 0 then goto L3bbe94;
  #L3bbe90.  v0:= 1I;
  #L3bbe92.  goto L3bbe96;
  #L3bbe94.  v0:= 0I;
  #L3bbe96.  if v0 == 0 then goto L3bbe9c;
  #L3bbe9a.  goto L3bbea8;
  #L3bbe9c.  v4:= new `java.lang.AssertionError`;
  #L3bbea0.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3bbea6.  throw v4;
  #L3bbea8.  call `h`(v4, v3) @signature `Lkotlinx/coroutines/internal/l0;.h:(Lkotlinx/coroutines/internal/k0;)V` @kind interface;
  #L3bbeae.  call temp:= `f`(v3) @signature `Lkotlinx/coroutines/internal/k0;.f:()[Lkotlinx/coroutines/internal/l0;` @kind direct;
  #L3bbeb4.  v0:= temp @kind object;
  #L3bbeb6.  call temp:= `c`(v3) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbebc.  v1:= temp;
  #L3bbebe.  v2:= v1 + 1;
  #L3bbec2.  call `j`(v3, v2) @signature `Lkotlinx/coroutines/internal/k0;.j:(I)V` @kind direct;
  #L3bbec8.  v0[v1]:= v4 @kind object;
  #L3bbecc.  call `e`(v4, v1) @signature `Lkotlinx/coroutines/internal/l0;.e:(I)V` @kind interface;
  #L3bbed2.  call `l`(v3, v1) @signature `Lkotlinx/coroutines/internal/k0;.l:(I)V` @kind direct;
  #L3bbed8.  return @kind void;
}
procedure `kotlinx.coroutines.internal.l0` `b`(`kotlinx.coroutines.internal.k0` v2 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.b:()Lkotlinx/coroutines/internal/l0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3bbc4c.  v0:= v2.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L3bbc50.  if v0 == 0 then goto L3bbc5c;
  #L3bbc54.  v1:= 0I;
  #L3bbc56.  v0:= v0[v1] @kind object;
  #L3bbc5a.  goto L3bbc5e;
  #L3bbc5c.  v0:= 0I;
  #L3bbc5e.  return v0 @kind object;
}
procedure `int` `c`(`kotlinx.coroutines.internal.k0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bbc34.  v0:= v1.`kotlinx.coroutines.internal.k0._size` @type ^`int`;
  #L3bbc38.  return v0;
}
procedure `boolean` `d`(`kotlinx.coroutines.internal.k0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.d:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bbba0.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbba6.  v0:= temp;
  #L3bbba8.  if v0 != 0 then goto L3bbbb0;
  #L3bbbac.  v0:= 1I;
  #L3bbbae.  goto L3bbbb2;
  #L3bbbb0.  v0:= 0I;
  #L3bbbb2.  return v0;
}
procedure `kotlinx.coroutines.internal.l0` `e`(`kotlinx.coroutines.internal.k0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.e:()Lkotlinx/coroutines/internal/l0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bbc70.  @monitorenter v1
  #L3bbc72.  call temp:= `b`(v1) @signature `Lkotlinx/coroutines/internal/k0;.b:()Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L3bbc78.  v0:= temp @kind object;
  #L3bbc7a.  @monitorexit v1
  #L3bbc7c.  return v0 @kind object;
  #L3bbc7e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3bbc80.  @monitorexit v1
  #L3bbc82.  throw v0;
  catch `java.lang.Throwable` @[L3bbc72..L3bbc7a] goto L3bbc7e;
}
procedure `boolean` `g`(`kotlinx.coroutines.internal.k0` v3 @kind this, `kotlinx.coroutines.internal.l0` v4 @kind object) @signature `Lkotlinx/coroutines/internal/k0;.g:(Lkotlinx/coroutines/internal/l0;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3bbbc4.  @monitorenter v3
  #L3bbbc6.  call temp:= `j`(v4) @signature `Lkotlinx/coroutines/internal/l0;.j:()Lkotlinx/coroutines/internal/k0;` @kind interface;
  #L3bbbcc.  v0:= temp @kind object;
  #L3bbbce.  v1:= 1I;
  #L3bbbd0.  v2:= 0I;
  #L3bbbd2.  if v0 != 0 then goto L3bbbda;
  #L3bbbd6.  v1:= 0I;
  #L3bbbd8.  goto L3bbc0c;
  #L3bbbda.  call temp:= `d`(v4) @signature `Lkotlinx/coroutines/internal/l0;.d:()I` @kind interface;
  #L3bbbe0.  v4:= temp;
  #L3bbbe2.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3bbbe8.  v0:= temp;
  #L3bbbea.  if v0 == 0 then goto L3bbc06;
  #L3bbbee.  if v4 < 0 then goto L3bbbf4;
  #L3bbbf2.  v2:= 1I;
  #L3bbbf4.  if v2 == 0 then goto L3bbbfa;
  #L3bbbf8.  goto L3bbc06;
  #L3bbbfa.  v4:= new `java.lang.AssertionError`;
  #L3bbbfe.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3bbc04.  throw v4;
  #L3bbc06.  call temp:= `h`(v3, v4) @signature `Lkotlinx/coroutines/internal/k0;.h:(I)Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L3bbc0c.  @monitorexit v3
  #L3bbc0e.  return v1;
  #L3bbc10.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3bbc12.  @monitorexit v3
  #L3bbc14.  throw v4;
  catch `java.lang.Throwable` @[L3bbbc6..L3bbc0c] goto L3bbc10;
}
procedure `kotlinx.coroutines.internal.l0` `h`(`kotlinx.coroutines.internal.k0` v7 @kind this, `int` v8 ) @signature `Lkotlinx/coroutines/internal/k0;.h:(I)Lkotlinx/coroutines/internal/l0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3bbca0.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3bbca6.  v0:= temp;
  #L3bbca8.  v1:= 0I;
  #L3bbcaa.  v2:= 1I;
  #L3bbcac.  if v0 == 0 then goto L3bbcd4;
  #L3bbcb0.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbcb6.  v0:= temp;
  #L3bbcb8.  if v0 <= 0 then goto L3bbcc0;
  #L3bbcbc.  v0:= 1I;
  #L3bbcbe.  goto L3bbcc2;
  #L3bbcc0.  v0:= 0I;
  #L3bbcc2.  if v0 == 0 then goto L3bbcc8;
  #L3bbcc6.  goto L3bbcd4;
  #L3bbcc8.  v8:= new `java.lang.AssertionError`;
  #L3bbccc.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3bbcd2.  throw v8;
  #L3bbcd4.  v0:= v7.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L3bbcd8.  call `b`(v0) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbcde.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbce4.  v3:= temp;
  #L3bbce6.  v4:= -1I;
  #L3bbce8.  v3:= v3 + v4 @kind int;
  #L3bbcea.  call `j`(v7, v3) @signature `Lkotlinx/coroutines/internal/k0;.j:(I)V` @kind direct;
  #L3bbcf0.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbcf6.  v3:= temp;
  #L3bbcf8.  if v8 >= v3 then goto L3bbd4e;
  #L3bbcfc.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbd02.  v3:= temp;
  #L3bbd04.  call `m`(v7, v8, v3) @signature `Lkotlinx/coroutines/internal/k0;.m:(II)V` @kind direct;
  #L3bbd0a.  v3:= v8 + -1;
  #L3bbd0e.  v3:= v3 / 2;
  #L3bbd12.  if v8 <= 0 then goto L3bbd48;
  #L3bbd16.  v5:= v0[v8] @kind object;
  #L3bbd1a.  call `b`(v5) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbd20.  v5:= (`java.lang.Comparable`) v5 @kind object;
  #L3bbd24.  v6:= v0[v3] @kind object;
  #L3bbd28.  call `b`(v6) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbd2e.  call temp:= `compareTo`(v5, v6) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L3bbd34.  v5:= temp;
  #L3bbd36.  if v5 >= 0 then goto L3bbd48;
  #L3bbd3a.  call `m`(v7, v8, v3) @signature `Lkotlinx/coroutines/internal/k0;.m:(II)V` @kind direct;
  #L3bbd40.  call `l`(v7, v3) @signature `Lkotlinx/coroutines/internal/k0;.l:(I)V` @kind direct;
  #L3bbd46.  goto L3bbd4e;
  #L3bbd48.  call `k`(v7, v8) @signature `Lkotlinx/coroutines/internal/k0;.k:(I)V` @kind direct;
  #L3bbd4e.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbd54.  v8:= temp;
  #L3bbd56.  v8:= v0[v8] @kind object;
  #L3bbd5a.  call `b`(v8) @signature `Lkotlin/jvm/internal/k;.b:(Ljava/lang/Object;)V` @kind static;
  #L3bbd60.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3bbd66.  v3:= temp;
  #L3bbd68.  if v3 == 0 then goto L3bbd8c;
  #L3bbd6c.  call temp:= `j`(v8) @signature `Lkotlinx/coroutines/internal/l0;.j:()Lkotlinx/coroutines/internal/k0;` @kind interface;
  #L3bbd72.  v3:= temp @kind object;
  #L3bbd74.  if v3 != v7 then goto L3bbd7a;
  #L3bbd78.  v1:= 1I;
  #L3bbd7a.  if v1 == 0 then goto L3bbd80;
  #L3bbd7e.  goto L3bbd8c;
  #L3bbd80.  v8:= new `java.lang.AssertionError`;
  #L3bbd84.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3bbd8a.  throw v8;
  #L3bbd8c.  v1:= 0I;
  #L3bbd8e.  call `h`(v8, v1) @signature `Lkotlinx/coroutines/internal/l0;.h:(Lkotlinx/coroutines/internal/k0;)V` @kind interface;
  #L3bbd94.  call `e`(v8, v4) @signature `Lkotlinx/coroutines/internal/l0;.e:(I)V` @kind interface;
  #L3bbd9a.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbda0.  v2:= temp;
  #L3bbda2.  v0[v2]:= v1 @kind object;
  #L3bbda6.  return v8 @kind object;
}
procedure `kotlinx.coroutines.internal.l0` `i`(`kotlinx.coroutines.internal.k0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.i:()Lkotlinx/coroutines/internal/l0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bbdb8.  @monitorenter v1
  #L3bbdba.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L3bbdc0.  v0:= temp;
  #L3bbdc2.  if v0 <= 0 then goto L3bbdd2;
  #L3bbdc6.  v0:= 0I;
  #L3bbdc8.  call temp:= `h`(v1, v0) @signature `Lkotlinx/coroutines/internal/k0;.h:(I)Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L3bbdce.  v0:= temp @kind object;
  #L3bbdd0.  goto L3bbdd4;
  #L3bbdd2.  v0:= 0I;
  #L3bbdd4.  @monitorexit v1
  #L3bbdd6.  return v0 @kind object;
  #L3bbdd8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3bbdda.  @monitorexit v1
  #L3bbddc.  throw v0;
  catch `java.lang.Throwable` @[L3bbdba..L3bbdd0] goto L3bbdd8;
}
