record `kotlinx.coroutines.internal.c` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.a0` @kind class {
  `java.lang.Object` `kotlinx.coroutines.internal.c._consensus` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.c.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3b7ffc.  v0:= constclass @type ^`kotlinx.coroutines.internal.c` @kind object;
  #L3b8000.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L3b8004.  v2:= "_consensus" @kind object;
  #L3b8008.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L3b800e.  v0:= temp @kind object;
  #L3b8010.  `@@kotlinx.coroutines.internal.c.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L3b8014.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.c` v1 @kind this) @signature `Lkotlinx/coroutines/internal/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b8028.  call `<init>`(v1) @signature `Lkotlinx/coroutines/internal/a0;.<init>:()V` @kind direct;
  #L3b802e.  v0:= `@@kotlinx.coroutines.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L3b8032.  v1.`kotlinx.coroutines.internal.c._consensus` @type ^`java.lang.Object` := v0 @kind object;
  #L3b8036.  return @kind void;
}
procedure `kotlinx.coroutines.internal.c` `a`(`kotlinx.coroutines.internal.c` v0 @kind this) @signature `Lkotlinx/coroutines/internal/c;.a:()Lkotlinx/coroutines/internal/c;` @AccessFlag PUBLIC {
    temp;

  #L3b7fd0.  return v0 @kind object;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.internal.c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/internal/c;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3b7f9c.  v0:= v2.`kotlinx.coroutines.internal.c._consensus` @type ^`java.lang.Object` @kind object;
  #L3b7fa0.  v1:= `@@kotlinx.coroutines.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L3b7fa4.  if v0 != v1 then goto L3b7fb8;
  #L3b7fa8.  call temp:= `g`(v2, v3) @signature `Lkotlinx/coroutines/internal/c;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b7fae.  v0:= temp @kind object;
  #L3b7fb0.  call temp:= `e`(v2, v0) @signature `Lkotlinx/coroutines/internal/c;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b7fb6.  v0:= temp @kind object;
  #L3b7fb8.  call `d`(v2, v3, v0) @signature `Lkotlinx/coroutines/internal/c;.d:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3b7fbe.  return v0 @kind object;
}
procedure `void` `d`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/internal/c;.d:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `e`(`kotlinx.coroutines.internal.c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/internal/c;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3b7f38.  call temp:= `a`() @signature `Lac/p0;.a:()Z` @kind static;
  #L3b7f3e.  v0:= temp;
  #L3b7f40.  if v0 == 0 then goto L3b7f64;
  #L3b7f44.  v0:= `@@kotlinx.coroutines.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L3b7f48.  if v3 == v0 then goto L3b7f50;
  #L3b7f4c.  v0:= 1I;
  #L3b7f4e.  goto L3b7f52;
  #L3b7f50.  v0:= 0I;
  #L3b7f52.  if v0 == 0 then goto L3b7f58;
  #L3b7f56.  goto L3b7f64;
  #L3b7f58.  v3:= new `java.lang.AssertionError`;
  #L3b7f5c.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3b7f62.  throw v3;
  #L3b7f64.  v0:= v2.`kotlinx.coroutines.internal.c._consensus` @type ^`java.lang.Object` @kind object;
  #L3b7f68.  v1:= `@@kotlinx.coroutines.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L3b7f6c.  if v0 == v1 then goto L3b7f72;
  #L3b7f70.  return v0 @kind object;
  #L3b7f72.  v0:= `@@kotlinx.coroutines.internal.c.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3b7f76.  call temp:= `compareAndSet`(v0, v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3b7f7c.  v0:= temp;
  #L3b7f7e.  if v0 == 0 then goto L3b7f84;
  #L3b7f82.  return v3 @kind object;
  #L3b7f84.  v3:= v2.`kotlinx.coroutines.internal.c._consensus` @type ^`java.lang.Object` @kind object;
  #L3b7f88.  return v3 @kind object;
}
procedure `long` `f`(`kotlinx.coroutines.internal.c` v2 @kind this) @signature `Lkotlinx/coroutines/internal/c;.f:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b7fe4.  v0:= 0L;
  #L3b7fe8.  return v0 @kind wide;
}
procedure `java.lang.Object` `g`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/internal/c;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
