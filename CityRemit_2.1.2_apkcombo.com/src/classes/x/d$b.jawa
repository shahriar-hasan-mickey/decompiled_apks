record `x.d$b` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `x.d$b.a` @AccessFlag PRIVATE_FINAL;
  `java.io.FileDescriptor` `x.d$b.b` @AccessFlag PRIVATE_FINAL;
  `int` `x.d$b.c` @AccessFlag PRIVATE_FINAL;
  `int` `x.d$b.d` @AccessFlag PRIVATE_FINAL;
  `int` `x.d$b.e` @AccessFlag PRIVATE_FINAL;
  `boolean` `x.d$b.f` @AccessFlag PRIVATE;
  `int` `x.d$b.g` @AccessFlag PRIVATE;
  `int` `x.d$b.h` @AccessFlag PRIVATE;
  `int` `x.d$b.i` @AccessFlag PRIVATE;
  `int` `x.d$b.j` @AccessFlag PRIVATE;
  `android.os.Handler` `x.d$b.k` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x.d$b` v6 @kind this, `java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `int` v10 ) @signature `Lx/d$b;.<init>:(Ljava/lang/String;III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cdae0.  v2:= 0I;
  #L4cdae2.  v0:= v6 @kind object;
  #L4cdae4.  v1:= v7 @kind object;
  #L4cdae6.  v3:= v8;
  #L4cdae8.  v4:= v9;
  #L4cdaea.  v5:= v10;
  #L4cdaec.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lx/d$b;.<init>:(Ljava/lang/String;Ljava/io/FileDescriptor;III)V` @kind direct;
  #L4cdaf2.  return @kind void;
}
procedure `void` `<init>`(`x.d$b` v2 @kind this, `java.lang.String` v3 @kind object, `java.io.FileDescriptor` v4 @kind object, `int` v5 , `int` v6 , `int` v7 ) @signature `Lx/d$b;.<init>:(Ljava/lang/String;Ljava/io/FileDescriptor;III)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4cdb04.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cdb0a.  v0:= 1I;
  #L4cdb0c.  v2.`x.d$b.f` @type ^`boolean` := v0 @kind boolean;
  #L4cdb10.  v1:= 100I;
  #L4cdb14.  v2.`x.d$b.g` @type ^`int` := v1;
  #L4cdb18.  v2.`x.d$b.h` @type ^`int` := v0;
  #L4cdb1c.  v0:= 0I;
  #L4cdb1e.  v2.`x.d$b.i` @type ^`int` := v0;
  #L4cdb22.  v2.`x.d$b.j` @type ^`int` := v0;
  #L4cdb26.  if v5 <= 0 then goto L4cdb44;
  #L4cdb2a.  if v6 <= 0 then goto L4cdb44;
  #L4cdb2e.  v2.`x.d$b.a` @type ^`java.lang.String` := v3 @kind object;
  #L4cdb32.  v2.`x.d$b.b` @type ^`java.io.FileDescriptor` := v4 @kind object;
  #L4cdb36.  v2.`x.d$b.c` @type ^`int` := v5;
  #L4cdb3a.  v2.`x.d$b.d` @type ^`int` := v6;
  #L4cdb3e.  v2.`x.d$b.e` @type ^`int` := v7;
  #L4cdb42.  return @kind void;
  #L4cdb44.  v3:= new `java.lang.IllegalArgumentException`;
  #L4cdb48.  v4:= new `java.lang.StringBuilder`;
  #L4cdb4c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4cdb52.  v7:= "Invalid image size: " @kind object;
  #L4cdb56.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cdb5c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cdb62.  v5:= "x" @kind object;
  #L4cdb66.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cdb6c.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cdb72.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4cdb78.  v4:= temp @kind object;
  #L4cdb7a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4cdb80.  throw v3;
}
procedure `x.d` `a`(`x.d$b` v13 @kind this) @signature `Lx/d$b;.a:()Lx/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4cdb94.  v12:= new `x.d`;
  #L4cdb98.  v1:= v13.`x.d$b.a` @type ^`java.lang.String` @kind object;
  #L4cdb9c.  v2:= v13.`x.d$b.b` @type ^`java.io.FileDescriptor` @kind object;
  #L4cdba0.  v3:= v13.`x.d$b.c` @type ^`int`;
  #L4cdba4.  v4:= v13.`x.d$b.d` @type ^`int`;
  #L4cdba8.  v5:= v13.`x.d$b.j` @type ^`int`;
  #L4cdbac.  v6:= v13.`x.d$b.f` @type ^`boolean` @kind boolean;
  #L4cdbb0.  v7:= v13.`x.d$b.g` @type ^`int`;
  #L4cdbb4.  v8:= v13.`x.d$b.h` @type ^`int`;
  #L4cdbb8.  v9:= v13.`x.d$b.i` @type ^`int`;
  #L4cdbbc.  v10:= v13.`x.d$b.e` @type ^`int`;
  #L4cdbc0.  v11:= v13.`x.d$b.k` @type ^`android.os.Handler` @kind object;
  #L4cdbc4.  v0:= v12 @kind object;
  #L4cdbc6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lx/d;.<init>:(Ljava/lang/String;Ljava/io/FileDescriptor;IIIZIIIILandroid/os/Handler;)V` @kind direct;
  #L4cdbcc.  return v12 @kind object;
}
procedure `x.d$b` `b`(`x.d$b` v3 @kind this, `int` v4 ) @signature `Lx/d$b;.b:(I)Lx/d$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cdbe0.  if v4 <= 0 then goto L4cdbea;
  #L4cdbe4.  v3.`x.d$b.h` @type ^`int` := v4;
  #L4cdbe8.  return v3 @kind object;
  #L4cdbea.  v0:= new `java.lang.IllegalArgumentException`;
  #L4cdbee.  v1:= new `java.lang.StringBuilder`;
  #L4cdbf2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4cdbf8.  v2:= "Invalid maxImage: " @kind object;
  #L4cdbfc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cdc02.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cdc08.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4cdc0e.  v4:= temp @kind object;
  #L4cdc10.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4cdc16.  throw v0;
}
procedure `x.d$b` `c`(`x.d$b` v3 @kind this, `int` v4 ) @signature `Lx/d$b;.c:(I)Lx/d$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cdc28.  if v4 < 0 then goto L4cdc3a;
  #L4cdc2c.  v0:= 100I;
  #L4cdc30.  if v4 > v0 then goto L4cdc3a;
  #L4cdc34.  v3.`x.d$b.g` @type ^`int` := v4;
  #L4cdc38.  return v3 @kind object;
  #L4cdc3a.  v0:= new `java.lang.IllegalArgumentException`;
  #L4cdc3e.  v1:= new `java.lang.StringBuilder`;
  #L4cdc42.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4cdc48.  v2:= "Invalid quality: " @kind object;
  #L4cdc4c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cdc52.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4cdc58.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4cdc5e.  v4:= temp @kind object;
  #L4cdc60.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4cdc66.  throw v0;
}
