record `x.d$d` @kind class @AccessFlag  {
  `boolean` `x.d$d.a` @AccessFlag PRIVATE;
  `java.lang.Exception` `x.d$d.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x.d$d` v0 @kind this) @signature `Lx/d$d;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cdf04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cdf0a.  return @kind void;
}
procedure `void` `a`(`x.d$d` v1 @kind this, `java.lang.Exception` v2 @kind object) @signature `Lx/d$d;.a:(Ljava/lang/Exception;)V` @AccessFlag  {
    temp;
    v0;

  #L4cdf1c.  @monitorenter v1
  #L4cdf1e.  v0:= v1.`x.d$d.a` @type ^`boolean` @kind boolean;
  #L4cdf22.  if v0 != 0 then goto L4cdf36;
  #L4cdf26.  v0:= 1I;
  #L4cdf28.  v1.`x.d$d.a` @type ^`boolean` := v0 @kind boolean;
  #L4cdf2c.  v1.`x.d$d.b` @type ^`java.lang.Exception` := v2 @kind object;
  #L4cdf30.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L4cdf36.  @monitorexit v1
  #L4cdf38.  return @kind void;
  #L4cdf3a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cdf3c.  @monitorexit v1
  #L4cdf3e.  throw v2;
  catch `java.lang.Throwable` @[L4cdf1e..L4cdf36] goto L4cdf3a;
}
procedure `void` `b`(`x.d$d` v6 @kind this, `long` v7 ) @signature `Lx/d$d;.b:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cdf5c.  @monitorenter v6
  #L4cdf5e.  v0:= 0L;
  #L4cdf62.  v2:= lcmp(v7, v0);
  #L4cdf66.  if v2 < 0 then goto L4cdfd8;
  #L4cdf6a.  if v2 != 0 then goto L4cdf7e;
  #L4cdf6e.  v7:= v6.`x.d$d.a` @type ^`boolean` @kind boolean;
  #L4cdf72.  if v7 != 0 then goto L4cdfaa;
  #L4cdf76.  call `wait`(v6) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L4cdf7c.  goto L4cdf6e;
  #L4cdf7e.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L4cdf84.  v2:= temp @kind wide;
  #L4cdf86.  v4:= v6.`x.d$d.a` @type ^`boolean` @kind boolean;
  #L4cdf8a.  if v4 != 0 then goto L4cdfaa;
  #L4cdf8e.  v4:= lcmp(v7, v0);
  #L4cdf92.  if v4 <= 0 then goto L4cdfaa;
  #L4cdf96.  call `wait`(v6, v7) @signature `Ljava/lang/Object;.wait:(J)V` @kind virtual;
  #L4cdf9c.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L4cdfa2.  v4:= temp @kind wide;
  #L4cdfa4.  v4:= v4 - v2 @kind long;
  #L4cdfa6.  v7:= v7 - v4 @kind long;
  #L4cdfa8.  goto L4cdf86;
  #L4cdfaa.  v7:= v6.`x.d$d.a` @type ^`boolean` @kind boolean;
  #L4cdfae.  if v7 != 0 then goto L4cdfca;
  #L4cdfb2.  v7:= 1I;
  #L4cdfb4.  v6.`x.d$d.a` @type ^`boolean` := v7 @kind boolean;
  #L4cdfb8.  v7:= new `java.util.concurrent.TimeoutException`;
  #L4cdfbc.  v8:= "timed out waiting for result" @kind object;
  #L4cdfc0.  call `<init>`(v7, v8) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4cdfc6.  v6.`x.d$d.b` @type ^`java.lang.Exception` := v7 @kind object;
  #L4cdfca.  v7:= v6.`x.d$d.b` @type ^`java.lang.Exception` @kind object;
  #L4cdfce.  if v7 != 0 then goto L4cdfd6;
  #L4cdfd2.  @monitorexit v6
  #L4cdfd4.  return @kind void;
  #L4cdfd6.  throw v7;
  #L4cdfd8.  v7:= new `java.lang.IllegalArgumentException`;
  #L4cdfdc.  v8:= "timeoutMs is negative" @kind object;
  #L4cdfe0.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4cdfe6.  throw v7;
  #L4cdfe8.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cdfea.  @monitorexit v6
  #L4cdfec.  throw v7;
  catch `java.lang.Throwable` @[L4cdf6e..L4cdf72] goto L4cdfe8;
  catch `java.lang.InterruptedException` @[L4cdf76..L4cdf7c] goto L4cdf6e;
  catch `java.lang.Throwable` @[L4cdf76..L4cdf7c] goto L4cdfe8;
  catch `java.lang.Throwable` @[L4cdf7e..L4cdf8a] goto L4cdfe8;
  catch `java.lang.InterruptedException` @[L4cdf96..L4cdf9c] goto L4cdf9c;
  catch `java.lang.Throwable` @[L4cdf96..L4cdf9c] goto L4cdfe8;
  catch `java.lang.Throwable` @[L4cdf9c..L4cdfce] goto L4cdfe8;
  catch `java.lang.Throwable` @[L4cdfd6..L4cdfe8] goto L4cdfe8;
}
