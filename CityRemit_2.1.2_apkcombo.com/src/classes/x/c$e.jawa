record `x.c$e` @kind class @AccessFlag  {
  `boolean` `x.c$e.a` @AccessFlag FINAL;
  `long` `x.c$e.b` @AccessFlag ;
  `long` `x.c$e.c` @AccessFlag ;
  `long` `x.c$e.d` @AccessFlag ;
  `long` `x.c$e.e` @AccessFlag ;
  `long` `x.c$e.f` @AccessFlag ;
  `boolean` `x.c$e.g` @AccessFlag ;
  `x.c` `x.c$e.h` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`x.c$e` v2 @kind this, `x.c` v3 @kind object, `boolean` v4 ) @signature `Lx/c$e;.<init>:(Lx/c;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4ccbd0.  v2.`x.c$e.h` @type ^`x.c` := v3 @kind object;
  #L4ccbd4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ccbda.  v0:= -1L;
  #L4ccbde.  v2.`x.c$e.b` @type ^`long` := v0 @kind wide;
  #L4ccbe2.  v2.`x.c$e.c` @type ^`long` := v0 @kind wide;
  #L4ccbe6.  v2.`x.c$e.d` @type ^`long` := v0 @kind wide;
  #L4ccbea.  v2.`x.c$e.e` @type ^`long` := v0 @kind wide;
  #L4ccbee.  v2.`x.c$e.f` @type ^`long` := v0 @kind wide;
  #L4ccbf2.  v2.`x.c$e.a` @type ^`boolean` := v4 @kind boolean;
  #L4ccbf6.  return @kind void;
}
procedure `void` `a`(`x.c$e` v2 @kind this) @signature `Lx/c$e;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4ccc08.  v0:= v2.`x.c$e.h` @type ^`x.c` @kind object;
  #L4ccc0c.  v0:= v0.`x.c.r` @type ^`android.os.Handler` @kind object;
  #L4ccc10.  v1:= new `x.c$e$a`;
  #L4ccc14.  call `<init>`(v1, v2) @signature `Lx/c$e$a;.<init>:(Lx/c$e;)V` @kind direct;
  #L4ccc1a.  call temp:= `post`(v0, v1) @signature `Landroid/os/Handler;.post:(Ljava/lang/Runnable;)Z` @kind virtual;
  #L4ccc20.  v0:= 1I;
  #L4ccc22.  v2.`x.c$e.g` @type ^`boolean` := v0 @kind boolean;
  #L4ccc26.  return @kind void;
}
procedure `void` `b`(`x.c$e` v7 @kind this) @signature `Lx/c$e;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ccc38.  v0:= v7.`x.c$e.g` @type ^`boolean` @kind boolean;
  #L4ccc3c.  if v0 == 0 then goto L4ccc42;
  #L4ccc40.  return @kind void;
  #L4ccc42.  v0:= v7.`x.c$e.d` @type ^`long` @kind wide;
  #L4ccc46.  v2:= 0L;
  #L4ccc4a.  v4:= lcmp(v0, v2);
  #L4ccc4e.  if v4 >= 0 then goto L4ccc82;
  #L4ccc52.  v0:= v7.`x.c$e.b` @type ^`long` @kind wide;
  #L4ccc56.  v4:= lcmp(v0, v2);
  #L4ccc5a.  if v4 < 0 then goto L4ccc82;
  #L4ccc5e.  v4:= v7.`x.c$e.c` @type ^`long` @kind wide;
  #L4ccc62.  v6:= lcmp(v4, v0);
  #L4ccc66.  if v6 < 0 then goto L4ccc82;
  #L4ccc6a.  v0:= v7.`x.c$e.e` @type ^`long` @kind wide;
  #L4ccc6e.  v4:= lcmp(v0, v2);
  #L4ccc72.  if v4 >= 0 then goto L4ccc7e;
  #L4ccc76.  call `a`(v7) @signature `Lx/c$e;.a:()V` @kind direct;
  #L4ccc7c.  return @kind void;
  #L4ccc7e.  v7.`x.c$e.d` @type ^`long` := v0 @kind wide;
  #L4ccc82.  v0:= v7.`x.c$e.d` @type ^`long` @kind wide;
  #L4ccc86.  v4:= lcmp(v0, v2);
  #L4ccc8a.  if v4 < 0 then goto L4ccca0;
  #L4ccc8e.  v2:= v7.`x.c$e.f` @type ^`long` @kind wide;
  #L4ccc92.  v4:= lcmp(v0, v2);
  #L4ccc96.  if v4 > 0 then goto L4ccca0;
  #L4ccc9a.  call `a`(v7) @signature `Lx/c$e;.a:()V` @kind direct;
  #L4ccca0.  return @kind void;
}
procedure `void` `c`(`x.c$e` v5 @kind this, `long` v6 ) @signature `Lx/c$e;.c:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cccb4.  @monitorenter v5
  #L4cccb6.  v0:= v5.`x.c$e.a` @type ^`boolean` @kind boolean;
  #L4cccba.  v1:= 0L;
  #L4cccbe.  if v0 == 0 then goto L4cccd4;
  #L4cccc2.  v3:= v5.`x.c$e.b` @type ^`long` @kind wide;
  #L4cccc6.  v0:= lcmp(v3, v1);
  #L4cccca.  if v0 >= 0 then goto L4cccea;
  #L4cccce.  v5.`x.c$e.b` @type ^`long` := v6 @kind wide;
  #L4cccd2.  goto L4cccea;
  #L4cccd4.  v3:= v5.`x.c$e.d` @type ^`long` @kind wide;
  #L4cccd8.  v0:= lcmp(v3, v1);
  #L4cccdc.  if v0 >= 0 then goto L4cccea;
  #L4ccce0.  v0:= 1000L;
  #L4ccce4.  v6:= v6 / v0 @kind long;
  #L4ccce6.  v5.`x.c$e.d` @type ^`long` := v6 @kind wide;
  #L4cccea.  call `b`(v5) @signature `Lx/c$e;.b:()V` @kind direct;
  #L4cccf0.  @monitorexit v5
  #L4cccf2.  return @kind void;
  #L4cccf4.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cccf6.  @monitorexit v5
  #L4cccf8.  throw v6;
  catch `java.lang.Throwable` @[L4cccb6..L4cccf0] goto L4cccf4;
}
procedure `boolean` `d`(`x.c$e` v5 @kind this, `long` v6 , `long` v8 ) @signature `Lx/c$e;.d:(JJ)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ccb74.  @monitorenter v5
  #L4ccb76.  v0:= v5.`x.c$e.b` @type ^`long` @kind wide;
  #L4ccb7a.  v2:= 0L;
  #L4ccb7e.  v4:= lcmp(v0, v2);
  #L4ccb82.  if v4 < 0 then goto L4ccb94;
  #L4ccb86.  v2:= lcmp(v6, v0);
  #L4ccb8a.  if v2 > 0 then goto L4ccb90;
  #L4ccb8e.  goto L4ccb94;
  #L4ccb90.  v0:= 0I;
  #L4ccb92.  goto L4ccb96;
  #L4ccb94.  v0:= 1I;
  #L4ccb96.  if v0 == 0 then goto L4ccb9e;
  #L4ccb9a.  v5.`x.c$e.e` @type ^`long` := v8 @kind wide;
  #L4ccb9e.  v5.`x.c$e.c` @type ^`long` := v6 @kind wide;
  #L4ccba2.  call `b`(v5) @signature `Lx/c$e;.b:()V` @kind direct;
  #L4ccba8.  @monitorexit v5
  #L4ccbaa.  return v0;
  #L4ccbac.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ccbae.  @monitorexit v5
  #L4ccbb0.  throw v6;
  catch `java.lang.Throwable` @[L4ccb76..L4ccba8] goto L4ccbac;
}
procedure `void` `e`(`x.c$e` v0 @kind this, `long` v1 ) @signature `Lx/c$e;.e:(J)V` @AccessFlag  {
    temp;

  #L4ccd18.  @monitorenter v0
  #L4ccd1a.  v0.`x.c$e.f` @type ^`long` := v1 @kind wide;
  #L4ccd1e.  call `b`(v0) @signature `Lx/c$e;.b:()V` @kind direct;
  #L4ccd24.  @monitorexit v0
  #L4ccd26.  return @kind void;
  #L4ccd28.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ccd2a.  @monitorexit v0
  #L4ccd2c.  throw v1;
  catch `java.lang.Throwable` @[L4ccd1a..L4ccd24] goto L4ccd28;
}
