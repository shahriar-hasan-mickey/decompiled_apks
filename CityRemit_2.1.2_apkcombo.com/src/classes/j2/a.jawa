record `j2.a` @kind class @AccessFlag FINAL extends `j2.g` @kind interface {
  `j2.f` `j2.a.a` @AccessFlag PRIVATE_FINAL;
  `long` `j2.a.b` @AccessFlag PRIVATE_FINAL;
  `long` `j2.a.c` @AccessFlag PRIVATE_FINAL;
  `j2.i` `j2.a.d` @AccessFlag PRIVATE_FINAL;
  `int` `j2.a.e` @AccessFlag PRIVATE;
  `long` `j2.a.f` @AccessFlag PRIVATE;
  `long` `j2.a.g` @AccessFlag PRIVATE;
  `long` `j2.a.h` @AccessFlag PRIVATE;
  `long` `j2.a.i` @AccessFlag PRIVATE;
  `long` `j2.a.j` @AccessFlag PRIVATE;
  `long` `j2.a.k` @AccessFlag PRIVATE;
  `long` `j2.a.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`j2.a` v4 @kind this, `j2.i` v5 @kind object, `long` v6 , `long` v8 , `long` v10 , `long` v12 , `boolean` v14 ) @signature `Lj2/a;.<init>:(Lj2/i;JJJJZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L391b18.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L391b1e.  v0:= 0I;
  #L391b20.  v1:= 0L;
  #L391b24.  v3:= lcmp(v6, v1);
  #L391b28.  if v3 < 0 then goto L391b38;
  #L391b2c.  v1:= lcmp(v8, v6);
  #L391b30.  if v1 <= 0 then goto L391b38;
  #L391b34.  v1:= 1I;
  #L391b36.  goto L391b3a;
  #L391b38.  v1:= 0I;
  #L391b3a.  call `a`(v1) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L391b40.  v4.`j2.a.d` @type ^`j2.i` := v5 @kind object;
  #L391b44.  v4.`j2.a.b` @type ^`long` := v6 @kind wide;
  #L391b48.  v4.`j2.a.c` @type ^`long` := v8 @kind wide;
  #L391b4c.  v8:= v8 - v6 @kind long;
  #L391b4e.  v5:= lcmp(v10, v8);
  #L391b52.  if v5 == 0 then goto L391b62;
  #L391b56.  if v14 == 0 then goto L391b5c;
  #L391b5a.  goto L391b62;
  #L391b5c.  v4.`j2.a.e` @type ^`int` := v0;
  #L391b60.  goto L391b6c;
  #L391b62.  v4.`j2.a.f` @type ^`long` := v12 @kind wide;
  #L391b66.  v5:= 4I;
  #L391b68.  v4.`j2.a.e` @type ^`int` := v5;
  #L391b6c.  v5:= new `j2.f`;
  #L391b70.  call `<init>`(v5) @signature `Lj2/f;.<init>:()V` @kind direct;
  #L391b76.  v4.`j2.a.a` @type ^`j2.f` := v5 @kind object;
  #L391b7a.  return @kind void;
}
procedure `j2.i` `d`(`j2.a` v0 @kind object) @signature `Lj2/a;.d:(Lj2/a;)Lj2/i;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L391804.  v0:= v0.`j2.a.d` @type ^`j2.i` @kind object;
  #L391808.  return v0 @kind object;
}
procedure `long` `e`(`j2.a` v2 @kind object) @signature `Lj2/a;.e:(Lj2/a;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L39181c.  v0:= v2.`j2.a.b` @type ^`long` @kind wide;
  #L391820.  return v0 @kind wide;
}
procedure `long` `f`(`j2.a` v2 @kind object) @signature `Lj2/a;.f:(Lj2/a;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L391834.  v0:= v2.`j2.a.c` @type ^`long` @kind wide;
  #L391838.  return v0 @kind wide;
}
procedure `long` `g`(`j2.a` v2 @kind object) @signature `Lj2/a;.g:(Lj2/a;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L39184c.  v0:= v2.`j2.a.f` @type ^`long` @kind wide;
  #L391850.  return v0 @kind wide;
}
procedure `long` `i`(`j2.a` v17 @kind this, `a2.m` v18 @kind object) @signature `Lj2/a;.i:(La2/m;)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L391864.  v0:= v17 @kind object;
  #L391868.  v1:= v18 @kind object;
  #L39186c.  v2:= v0.`j2.a.i` @type ^`long` @kind wide;
  #L391870.  v4:= v0.`j2.a.j` @type ^`long` @kind wide;
  #L391874.  v6:= -1L;
  #L391878.  v8:= lcmp(v2, v4);
  #L39187c.  if v8 != 0 then goto L391882;
  #L391880.  return v6 @kind wide;
  #L391882.  call temp:= `q`(v18) @signature `La2/m;.q:()J` @kind interface;
  #L391888.  v2:= temp @kind wide;
  #L39188a.  v4:= v0.`j2.a.a` @type ^`j2.f` @kind object;
  #L39188e.  v8:= v0.`j2.a.j` @type ^`long` @kind wide;
  #L391892.  call temp:= `d`(v4, v1, v8) @signature `Lj2/f;.d:(La2/m;J)Z` @kind virtual;
  #L391898.  v4:= temp;
  #L39189a.  if v4 != 0 then goto L3918bc;
  #L39189e.  v4:= v0.`j2.a.i` @type ^`long` @kind wide;
  #L3918a2.  v1:= lcmp(v4, v2);
  #L3918a6.  if v1 == 0 then goto L3918ac;
  #L3918aa.  return v4 @kind wide;
  #L3918ac.  v1:= new `java.io.IOException`;
  #L3918b0.  v2:= "No ogg page can be found." @kind object;
  #L3918b4.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3918ba.  throw v1;
  #L3918bc.  v4:= v0.`j2.a.a` @type ^`j2.f` @kind object;
  #L3918c0.  v5:= 0I;
  #L3918c2.  call temp:= `a`(v4, v1, v5) @signature `Lj2/f;.a:(La2/m;Z)Z` @kind virtual;
  #L3918c8.  call `i`(v18) @signature `La2/m;.i:()V` @kind interface;
  #L3918ce.  v4:= v0.`j2.a.h` @type ^`long` @kind wide;
  #L3918d2.  v8:= v0.`j2.a.a` @type ^`j2.f` @kind object;
  #L3918d6.  v9:= v8.`j2.f.c` @type ^`long` @kind wide;
  #L3918da.  v4:= v4 - v9 @kind long;
  #L3918dc.  v11:= v8.`j2.f.e` @type ^`int`;
  #L3918e0.  v8:= v8.`j2.f.f` @type ^`int`;
  #L3918e4.  v11:= v11 + v8 @kind int;
  #L3918e6.  v12:= 0L;
  #L3918ea.  v8:= lcmp(v12, v4);
  #L3918ee.  if v8 > 0 then goto L391902;
  #L3918f2.  v14:= 72000L;
  #L3918f8.  v8:= lcmp(v4, v14);
  #L3918fc.  if v8 >= 0 then goto L391902;
  #L391900.  return v6 @kind wide;
  #L391902.  v6:= lcmp(v4, v12);
  #L391906.  if v6 >= 0 then goto L391914;
  #L39190a.  v0.`j2.a.j` @type ^`long` := v2 @kind wide;
  #L39190e.  v0.`j2.a.l` @type ^`long` := v9 @kind wide;
  #L391912.  goto L391930;
  #L391914.  call temp:= `q`(v18) @signature `La2/m;.q:()J` @kind interface;
  #L39191a.  v2:= temp @kind wide;
  #L39191c.  v7:= (`long`) v11 @kind i2l;
  #L39191e.  v2:= v2 + v7 @kind long;
  #L391920.  v0.`j2.a.i` @type ^`long` := v2 @kind wide;
  #L391924.  v2:= v0.`j2.a.a` @type ^`j2.f` @kind object;
  #L391928.  v2:= v2.`j2.f.c` @type ^`long` @kind wide;
  #L39192c.  v0.`j2.a.k` @type ^`long` := v2 @kind wide;
  #L391930.  v2:= v0.`j2.a.j` @type ^`long` @kind wide;
  #L391934.  v7:= v0.`j2.a.i` @type ^`long` @kind wide;
  #L391938.  v2:= v2 - v7 @kind long;
  #L39193a.  v9:= 100000L;
  #L391940.  v12:= lcmp(v2, v9);
  #L391944.  if v12 >= 0 then goto L39194e;
  #L391948.  v0.`j2.a.j` @type ^`long` := v7 @kind wide;
  #L39194c.  return v7 @kind wide;
  #L39194e.  v2:= (`long`) v11 @kind i2l;
  #L391950.  if v6 > 0 then goto L39195a;
  #L391954.  v9:= 2L;
  #L391958.  goto L39195e;
  #L39195a.  v9:= 1L;
  #L39195e.  v2:= v2 * v9 @kind long;
  #L391962.  call temp:= `q`(v18) @signature `La2/m;.q:()J` @kind interface;
  #L391968.  v9:= temp @kind wide;
  #L39196a.  v9:= v9 - v2 @kind long;
  #L39196c.  v1:= v0.`j2.a.j` @type ^`long` @kind wide;
  #L391970.  v13:= v0.`j2.a.i` @type ^`long` @kind wide;
  #L391974.  v11:= v1 - v13 @kind long;
  #L391978.  v4:= v4 * v11 @kind long;
  #L39197c.  v11:= v0.`j2.a.l` @type ^`long` @kind wide;
  #L391980.  v7:= v0.`j2.a.k` @type ^`long` @kind wide;
  #L391984.  v11:= v11 - v7 @kind long;
  #L391986.  v4:= v4 / v11 @kind long;
  #L391988.  v11:= v9 + v4 @kind long;
  #L39198c.  v3:= 1L;
  #L391990.  v15:= v1 - v3 @kind long;
  #L391994.  call temp:= `r`(v11, v13, v15) @signature `Ls3/l0;.r:(JJJ)J` @kind static;
  #L39199a.  v1:= temp @kind wide;
  #L39199c.  return v1 @kind wide;
}
procedure `void` `k`(`j2.a` v6 @kind this, `a2.m` v7 @kind object) @signature `Lj2/a;.k:(La2/m;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L391b8c.  v0:= v6.`j2.a.a` @type ^`j2.f` @kind object;
  #L391b90.  call temp:= `c`(v0, v7) @signature `Lj2/f;.c:(La2/m;)Z` @kind virtual;
  #L391b96.  v0:= v6.`j2.a.a` @type ^`j2.f` @kind object;
  #L391b9a.  v1:= 0I;
  #L391b9c.  call temp:= `a`(v0, v7, v1) @signature `Lj2/f;.a:(La2/m;Z)Z` @kind virtual;
  #L391ba2.  v0:= v6.`j2.a.a` @type ^`j2.f` @kind object;
  #L391ba6.  v1:= v0.`j2.f.c` @type ^`long` @kind wide;
  #L391baa.  v3:= v6.`j2.a.h` @type ^`long` @kind wide;
  #L391bae.  v5:= lcmp(v1, v3);
  #L391bb2.  if v5 <= 0 then goto L391bbe;
  #L391bb6.  call `i`(v7) @signature `La2/m;.i:()V` @kind interface;
  #L391bbc.  return @kind void;
  #L391bbe.  v1:= v0.`j2.f.e` @type ^`int`;
  #L391bc2.  v0:= v0.`j2.f.f` @type ^`int`;
  #L391bc6.  v1:= v1 + v0 @kind int;
  #L391bc8.  call `j`(v7, v1) @signature `La2/m;.j:(I)V` @kind interface;
  #L391bce.  call temp:= `q`(v7) @signature `La2/m;.q:()J` @kind interface;
  #L391bd4.  v0:= temp @kind wide;
  #L391bd6.  v6.`j2.a.i` @type ^`long` := v0 @kind wide;
  #L391bda.  v0:= v6.`j2.a.a` @type ^`j2.f` @kind object;
  #L391bde.  v0:= v0.`j2.f.c` @type ^`long` @kind wide;
  #L391be2.  v6.`j2.a.k` @type ^`long` := v0 @kind wide;
  #L391be6.  goto L391b8c;
}
procedure `a2.a0` `a`(`j2.a` v1 @kind this) @signature `Lj2/a;.a:()La2/a0;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3917b8.  call temp:= `h`(v1) @signature `Lj2/a;.h:()Lj2/a$b;` @kind virtual;
  #L3917be.  v0:= temp @kind object;
  #L3917c0.  return v0 @kind object;
}
procedure `long` `b`(`j2.a` v7 @kind this, `a2.m` v8 @kind object) @signature `Lj2/a;.b:(La2/m;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3919b0.  v0:= v7.`j2.a.e` @type ^`int`;
  #L3919b4.  v1:= 1I;
  #L3919b6.  v2:= 4I;
  #L3919b8.  if v0 == 0 then goto L391a10;
  #L3919bc.  if v0 == v1 then goto L391a36;
  #L3919c0.  v1:= 2I;
  #L3919c2.  v3:= -1L;
  #L3919c6.  v5:= 3I;
  #L3919c8.  if v0 == v1 then goto L3919e2;
  #L3919cc.  if v0 == v5 then goto L3919f8;
  #L3919d0.  if v0 != v2 then goto L3919d6;
  #L3919d4.  return v3 @kind wide;
  #L3919d6.  v8:= new `java.lang.IllegalStateException`;
  #L3919da.  call `<init>`(v8) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3919e0.  throw v8;
  #L3919e2.  call temp:= `i`(v7, v8) @signature `Lj2/a;.i:(La2/m;)J` @kind direct;
  #L3919e8.  v0:= temp @kind wide;
  #L3919ea.  v6:= lcmp(v0, v3);
  #L3919ee.  if v6 == 0 then goto L3919f4;
  #L3919f2.  return v0 @kind wide;
  #L3919f4.  v7.`j2.a.e` @type ^`int` := v5;
  #L3919f8.  call `k`(v7, v8) @signature `Lj2/a;.k:(La2/m;)V` @kind direct;
  #L3919fe.  v7.`j2.a.e` @type ^`int` := v2;
  #L391a02.  v0:= v7.`j2.a.k` @type ^`long` @kind wide;
  #L391a06.  v2:= 2L;
  #L391a0a.  v0:= v0 + v2 @kind long;
  #L391a0c.  v0:= -v0 @kind long;
  #L391a0e.  return v0 @kind wide;
  #L391a10.  call temp:= `q`(v8) @signature `La2/m;.q:()J` @kind interface;
  #L391a16.  v3:= temp @kind wide;
  #L391a18.  v7.`j2.a.g` @type ^`long` := v3 @kind wide;
  #L391a1c.  v7.`j2.a.e` @type ^`int` := v1;
  #L391a20.  v0:= v7.`j2.a.c` @type ^`long` @kind wide;
  #L391a24.  v5:= 65307L;
  #L391a2a.  v0:= v0 - v5 @kind long;
  #L391a2c.  v5:= lcmp(v0, v3);
  #L391a30.  if v5 <= 0 then goto L391a36;
  #L391a34.  return v0 @kind wide;
  #L391a36.  call temp:= `j`(v7, v8) @signature `Lj2/a;.j:(La2/m;)J` @kind virtual;
  #L391a3c.  v0:= temp @kind wide;
  #L391a3e.  v7.`j2.a.f` @type ^`long` := v0 @kind wide;
  #L391a42.  v7.`j2.a.e` @type ^`int` := v2;
  #L391a46.  v0:= v7.`j2.a.g` @type ^`long` @kind wide;
  #L391a4a.  return v0 @kind wide;
}
procedure `void` `c`(`j2.a` v10 @kind this, `long` v11 ) @signature `Lj2/a;.c:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L391bf8.  v0:= v10.`j2.a.f` @type ^`long` @kind wide;
  #L391bfc.  v2:= 1L;
  #L391c00.  v8:= v0 - v2 @kind long;
  #L391c04.  v6:= 0L;
  #L391c08.  v4:= v11 @kind wide;
  #L391c0a.  call temp:= `r`(v4, v6, v8) @signature `Ls3/l0;.r:(JJJ)J` @kind static;
  #L391c10.  v11:= temp @kind wide;
  #L391c12.  v10.`j2.a.h` @type ^`long` := v11 @kind wide;
  #L391c16.  v11:= 2I;
  #L391c18.  v10.`j2.a.e` @type ^`int` := v11;
  #L391c1c.  v11:= v10.`j2.a.b` @type ^`long` @kind wide;
  #L391c20.  v10.`j2.a.i` @type ^`long` := v11 @kind wide;
  #L391c24.  v11:= v10.`j2.a.c` @type ^`long` @kind wide;
  #L391c28.  v10.`j2.a.j` @type ^`long` := v11 @kind wide;
  #L391c2c.  v11:= 0L;
  #L391c30.  v10.`j2.a.k` @type ^`long` := v11 @kind wide;
  #L391c34.  v11:= v10.`j2.a.f` @type ^`long` @kind wide;
  #L391c38.  v10.`j2.a.l` @type ^`long` := v11 @kind wide;
  #L391c3c.  return @kind void;
}
procedure `j2.a$b` `h`(`j2.a` v6 @kind this) @signature `Lj2/a;.h:()Lj2/a$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3917d4.  v0:= v6.`j2.a.f` @type ^`long` @kind wide;
  #L3917d8.  v2:= 0I;
  #L3917da.  v3:= 0L;
  #L3917de.  v5:= lcmp(v0, v3);
  #L3917e2.  if v5 == 0 then goto L3917f2;
  #L3917e6.  v0:= new `j2.a$b`;
  #L3917ea.  call `<init>`(v0, v6, v2) @signature `Lj2/a$b;.<init>:(Lj2/a;Lj2/a$a;)V` @kind direct;
  #L3917f0.  v2:= v0 @kind object;
  #L3917f2.  return v2 @kind object;
}
procedure `long` `j`(`j2.a` v7 @kind this, `a2.m` v8 @kind object) @signature `Lj2/a;.j:(La2/m;)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L391a5c.  v0:= v7.`j2.a.a` @type ^`j2.f` @kind object;
  #L391a60.  call `b`(v0) @signature `Lj2/f;.b:()V` @kind virtual;
  #L391a66.  v0:= v7.`j2.a.a` @type ^`j2.f` @kind object;
  #L391a6a.  call temp:= `c`(v0, v8) @signature `Lj2/f;.c:(La2/m;)Z` @kind virtual;
  #L391a70.  v0:= temp;
  #L391a72.  if v0 == 0 then goto L391afc;
  #L391a76.  v0:= v7.`j2.a.a` @type ^`j2.f` @kind object;
  #L391a7a.  v1:= 0I;
  #L391a7c.  call temp:= `a`(v0, v8, v1) @signature `Lj2/f;.a:(La2/m;Z)Z` @kind virtual;
  #L391a82.  v0:= v7.`j2.a.a` @type ^`j2.f` @kind object;
  #L391a86.  v1:= v0.`j2.f.e` @type ^`int`;
  #L391a8a.  v0:= v0.`j2.f.f` @type ^`int`;
  #L391a8e.  v1:= v1 + v0 @kind int;
  #L391a90.  call `j`(v8, v1) @signature `La2/m;.j:(I)V` @kind interface;
  #L391a96.  v0:= v7.`j2.a.a` @type ^`j2.f` @kind object;
  #L391a9a.  v0:= v0.`j2.f.c` @type ^`long` @kind wide;
  #L391a9e.  v2:= v7.`j2.a.a` @type ^`j2.f` @kind object;
  #L391aa2.  v3:= v2.`j2.f.b` @type ^`int`;
  #L391aa6.  v4:= 4I;
  #L391aa8.  v3:= v3 ^& v4 @kind int;
  #L391aaa.  if v3 == v4 then goto L391afa;
  #L391aae.  call temp:= `c`(v2, v8) @signature `Lj2/f;.c:(La2/m;)Z` @kind virtual;
  #L391ab4.  v2:= temp;
  #L391ab6.  if v2 == 0 then goto L391afa;
  #L391aba.  call temp:= `q`(v8) @signature `La2/m;.q:()J` @kind interface;
  #L391ac0.  v2:= temp @kind wide;
  #L391ac2.  v4:= v7.`j2.a.c` @type ^`long` @kind wide;
  #L391ac6.  v6:= lcmp(v2, v4);
  #L391aca.  if v6 >= 0 then goto L391afa;
  #L391ace.  v2:= v7.`j2.a.a` @type ^`j2.f` @kind object;
  #L391ad2.  v3:= 1I;
  #L391ad4.  call temp:= `a`(v2, v8, v3) @signature `Lj2/f;.a:(La2/m;Z)Z` @kind virtual;
  #L391ada.  v2:= temp;
  #L391adc.  if v2 == 0 then goto L391afa;
  #L391ae0.  v2:= v7.`j2.a.a` @type ^`j2.f` @kind object;
  #L391ae4.  v3:= v2.`j2.f.e` @type ^`int`;
  #L391ae8.  v2:= v2.`j2.f.f` @type ^`int`;
  #L391aec.  v3:= v3 + v2 @kind int;
  #L391aee.  call temp:= `e`(v8, v3) @signature `La2/o;.e:(La2/m;I)Z` @kind static;
  #L391af4.  v2:= temp;
  #L391af6.  if v2 != 0 then goto L391a96;
  #L391afa.  return v0 @kind wide;
  #L391afc.  v8:= new `java.io.EOFException`;
  #L391b00.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L391b06.  throw v8;
}
