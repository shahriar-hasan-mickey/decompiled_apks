record `j2.b` @kind class @AccessFlag FINAL extends `j2.i` @kind class {
  `a2.u` `j2.b.n` @AccessFlag PRIVATE;
  `j2.b$a` `j2.b.o` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`j2.b` v0 @kind this) @signature `Lj2/b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L391ee4.  call `<init>`(v0) @signature `Lj2/i;.<init>:()V` @kind direct;
  #L391eea.  return @kind void;
}
procedure `int` `n`(`j2.b` v3 @kind this, `s3.z` v4 @kind object) @signature `Lj2/b;.n:(Ls3/z;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L391e5c.  call temp:= `d`(v4) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L391e62.  v0:= temp @kind object;
  #L391e64.  v1:= 2I;
  #L391e66.  v0:= v0[v1] @kind byte;
  #L391e6a.  v0:= v0 ^& 255;
  #L391e6e.  v1:= 4I;
  #L391e70.  v0:= v0 ^> v1 @kind int;
  #L391e72.  v2:= 6I;
  #L391e74.  if v0 == v2 then goto L391e7e;
  #L391e78.  v2:= 7I;
  #L391e7a.  if v0 != v2 then goto L391e8a;
  #L391e7e.  call `P`(v4, v1) @signature `Ls3/z;.P:(I)V` @kind virtual;
  #L391e84.  call temp:= `J`(v4) @signature `Ls3/z;.J:()J` @kind virtual;
  #L391e8a.  call temp:= `j`(v4, v0) @signature `La2/r;.j:(Ls3/z;I)I` @kind static;
  #L391e90.  v0:= temp;
  #L391e92.  v1:= 0I;
  #L391e94.  call `O`(v4, v1) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L391e9a.  return v0;
}
procedure `boolean` `o`(`byte`[] v2 @kind object) @signature `Lj2/b;.o:([B)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L391d34.  v0:= 0I;
  #L391d36.  v2:= v2[v0] @kind byte;
  #L391d3a.  v1:= -1I;
  #L391d3c.  if v2 != v1 then goto L391d42;
  #L391d40.  v0:= 1I;
  #L391d42.  return v0;
}
procedure `boolean` `p`(`s3.z` v4 @kind object) @signature `Lj2/b;.p:(Ls3/z;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L391e10.  call temp:= `a`(v4) @signature `Ls3/z;.a:()I` @kind virtual;
  #L391e16.  v0:= temp;
  #L391e18.  v1:= 5I;
  #L391e1a.  if v0 < v1 then goto L391e48;
  #L391e1e.  call temp:= `C`(v4) @signature `Ls3/z;.C:()I` @kind virtual;
  #L391e24.  v0:= temp;
  #L391e26.  v1:= 127I;
  #L391e2a.  if v0 != v1 then goto L391e48;
  #L391e2e.  call temp:= `E`(v4) @signature `Ls3/z;.E:()J` @kind virtual;
  #L391e34.  v0:= temp @kind wide;
  #L391e36.  v2:= 1179402563L;
  #L391e3c.  v4:= lcmp(v0, v2);
  #L391e40.  if v4 != 0 then goto L391e48;
  #L391e44.  v4:= 1I;
  #L391e46.  goto L391e4a;
  #L391e48.  v4:= 0I;
  #L391e4a.  return v4;
}
procedure `long` `f`(`j2.b` v2 @kind this, `s3.z` v3 @kind object) @signature `Lj2/b;.f:(Ls3/z;)J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L391eac.  call temp:= `d`(v3) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L391eb2.  v0:= temp @kind object;
  #L391eb4.  call temp:= `o`(v0) @signature `Lj2/b;.o:([B)Z` @kind static;
  #L391eba.  v0:= temp;
  #L391ebc.  if v0 != 0 then goto L391ec6;
  #L391ec0.  v0:= -1L;
  #L391ec4.  return v0 @kind wide;
  #L391ec6.  call temp:= `n`(v2, v3) @signature `Lj2/b;.n:(Ls3/z;)I` @kind direct;
  #L391ecc.  v3:= temp;
  #L391ece.  v0:= (`long`) v3 @kind i2l;
  #L391ed0.  return v0 @kind wide;
}
procedure `boolean` `i`(`j2.b` v6 @kind this, `s3.z` v7 @kind object, `long` v8 , `j2.i$b` v10 @kind object) @signature `Lj2/b;.i:(Ls3/z;JLj2/i$b;)Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L391d54.  call temp:= `d`(v7) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L391d5a.  v0:= temp @kind object;
  #L391d5c.  v1:= v6.`j2.b.n` @type ^`a2.u` @kind object;
  #L391d60.  v2:= 1I;
  #L391d62.  if v1 != 0 then goto L391d9c;
  #L391d66.  v8:= new `a2.u`;
  #L391d6a.  v9:= 17I;
  #L391d6e.  call `<init>`(v8, v0, v9) @signature `La2/u;.<init>:([BI)V` @kind direct;
  #L391d74.  v6.`j2.b.n` @type ^`a2.u` := v8 @kind object;
  #L391d78.  v9:= 9I;
  #L391d7c.  call temp:= `f`(v7) @signature `Ls3/z;.f:()I` @kind virtual;
  #L391d82.  v7:= temp;
  #L391d84.  call temp:= `copyOfRange`(v0, v9, v7) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L391d8a.  v7:= temp @kind object;
  #L391d8c.  v9:= 0I;
  #L391d8e.  call temp:= `g`(v8, v7, v9) @signature `La2/u;.g:([BLn2/a;)Lv1/j1;` @kind virtual;
  #L391d94.  v7:= temp @kind object;
  #L391d96.  v10.`j2.i$b.a` @type ^`v1.j1` := v7 @kind object;
  #L391d9a.  return v2;
  #L391d9c.  v3:= 0I;
  #L391d9e.  v4:= v0[v3] @kind byte;
  #L391da2.  v4:= v4 ^& 127;
  #L391da6.  v5:= 3I;
  #L391da8.  if v4 != v5 then goto L391dd0;
  #L391dac.  call temp:= `g`(v7) @signature `La2/s;.g:(Ls3/z;)La2/u$a;` @kind static;
  #L391db2.  v7:= temp @kind object;
  #L391db4.  call temp:= `b`(v1, v7) @signature `La2/u;.b:(La2/u$a;)La2/u;` @kind virtual;
  #L391dba.  v8:= temp @kind object;
  #L391dbc.  v6.`j2.b.n` @type ^`a2.u` := v8 @kind object;
  #L391dc0.  v9:= new `j2.b$a`;
  #L391dc4.  call `<init>`(v9, v8, v7) @signature `Lj2/b$a;.<init>:(La2/u;La2/u$a;)V` @kind direct;
  #L391dca.  v6.`j2.b.o` @type ^`j2.b$a` := v9 @kind object;
  #L391dce.  return v2;
  #L391dd0.  call temp:= `o`(v0) @signature `Lj2/b;.o:([B)Z` @kind static;
  #L391dd6.  v7:= temp;
  #L391dd8.  if v7 == 0 then goto L391dfe;
  #L391ddc.  v7:= v6.`j2.b.o` @type ^`j2.b$a` @kind object;
  #L391de0.  if v7 == 0 then goto L391df2;
  #L391de4.  call `d`(v7, v8) @signature `Lj2/b$a;.d:(J)V` @kind virtual;
  #L391dea.  v7:= v6.`j2.b.o` @type ^`j2.b$a` @kind object;
  #L391dee.  v10.`j2.i$b.b` @type ^`j2.g` := v7 @kind object;
  #L391df2.  v7:= v10.`j2.i$b.a` @type ^`v1.j1` @kind object;
  #L391df6.  call temp:= `e`(v7) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L391dfc.  return v3;
  #L391dfe.  return v2;
}
procedure `void` `l`(`j2.b` v0 @kind this, `boolean` v1 ) @signature `Lj2/b;.l:(Z)V` @AccessFlag PROTECTED {
    temp;

  #L391efc.  call `l`(v0, v1) @signature `Lj2/i;.l:(Z)V` @kind super;
  #L391f02.  if v1 == 0 then goto L391f10;
  #L391f06.  v1:= 0I;
  #L391f08.  v0.`j2.b.n` @type ^`a2.u` := v1 @kind object;
  #L391f0c.  v0.`j2.b.o` @type ^`j2.b$a` := v1 @kind object;
  #L391f10.  return @kind void;
}
