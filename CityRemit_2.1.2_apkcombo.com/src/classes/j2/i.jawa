record `j2.i` @kind class @AccessFlag ABSTRACT {
  `j2.e` `j2.i.a` @AccessFlag PRIVATE_FINAL;
  `a2.d0` `j2.i.b` @AccessFlag PRIVATE;
  `a2.n` `j2.i.c` @AccessFlag PRIVATE;
  `j2.g` `j2.i.d` @AccessFlag PRIVATE;
  `long` `j2.i.e` @AccessFlag PRIVATE;
  `long` `j2.i.f` @AccessFlag PRIVATE;
  `long` `j2.i.g` @AccessFlag PRIVATE;
  `int` `j2.i.h` @AccessFlag PRIVATE;
  `int` `j2.i.i` @AccessFlag PRIVATE;
  `j2.i$b` `j2.i.j` @AccessFlag PRIVATE;
  `long` `j2.i.k` @AccessFlag PRIVATE;
  `boolean` `j2.i.l` @AccessFlag PRIVATE;
  `boolean` `j2.i.m` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`j2.i` v1 @kind this) @signature `Lj2/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L392dcc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L392dd2.  v0:= new `j2.e`;
  #L392dd6.  call `<init>`(v0) @signature `Lj2/e;.<init>:()V` @kind direct;
  #L392ddc.  v1.`j2.i.a` @type ^`j2.e` := v0 @kind object;
  #L392de0.  v0:= new `j2.i$b`;
  #L392de4.  call `<init>`(v0) @signature `Lj2/i$b;.<init>:()V` @kind direct;
  #L392dea.  v1.`j2.i.j` @type ^`j2.i$b` := v0 @kind object;
  #L392dee.  return @kind void;
}
procedure `void` `a`(`j2.i` v1 @kind this) @signature `Lj2/i;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L392e00.  v0:= v1.`j2.i.b` @type ^`a2.d0` @kind object;
  #L392e04.  call temp:= `h`(v0) @signature `Ls3/a;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L392e0a.  v0:= v1.`j2.i.c` @type ^`a2.n` @kind object;
  #L392e0e.  call temp:= `j`(v0) @signature `Ls3/l0;.j:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L392e14.  return @kind void;
}
procedure `boolean` `h`(`j2.i` v4 @kind this, `a2.m` v5 @kind object) @signature `Lj2/i;.h:(La2/m;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L392aa0.  v0:= v4.`j2.i.a` @type ^`j2.e` @kind object;
  #L392aa4.  call temp:= `d`(v0, v5) @signature `Lj2/e;.d:(La2/m;)Z` @kind virtual;
  #L392aaa.  v0:= temp;
  #L392aac.  if v0 != 0 then goto L392aba;
  #L392ab0.  v5:= 3I;
  #L392ab2.  v4.`j2.i.h` @type ^`int` := v5;
  #L392ab6.  v5:= 0I;
  #L392ab8.  return v5;
  #L392aba.  call temp:= `q`(v5) @signature `La2/m;.q:()J` @kind interface;
  #L392ac0.  v0:= temp @kind wide;
  #L392ac2.  v2:= v4.`j2.i.f` @type ^`long` @kind wide;
  #L392ac6.  v0:= v0 - v2 @kind long;
  #L392ac8.  v4.`j2.i.k` @type ^`long` := v0 @kind wide;
  #L392acc.  v0:= v4.`j2.i.a` @type ^`j2.e` @kind object;
  #L392ad0.  call temp:= `c`(v0) @signature `Lj2/e;.c:()Ls3/z;` @kind virtual;
  #L392ad6.  v0:= temp @kind object;
  #L392ad8.  v1:= v4.`j2.i.f` @type ^`long` @kind wide;
  #L392adc.  v3:= v4.`j2.i.j` @type ^`j2.i$b` @kind object;
  #L392ae0.  call temp:= `i`(v4, v0, v1, v3) @signature `Lj2/i;.i:(Ls3/z;JLj2/i$b;)Z` @kind virtual;
  #L392ae6.  v0:= temp;
  #L392ae8.  if v0 == 0 then goto L392afa;
  #L392aec.  call temp:= `q`(v5) @signature `La2/m;.q:()J` @kind interface;
  #L392af2.  v0:= temp @kind wide;
  #L392af4.  v4.`j2.i.f` @type ^`long` := v0 @kind wide;
  #L392af8.  goto L392aa0;
  #L392afa.  v5:= 1I;
  #L392afc.  return v5;
}
procedure `int` `j`(`j2.i` v13 @kind this, `a2.m` v14 @kind object) @signature `Lj2/i;.j:(La2/m;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L392b84.  call temp:= `h`(v13, v14) @signature `Lj2/i;.h:(La2/m;)Z` @kind direct;
  #L392b8a.  v0:= temp;
  #L392b8c.  if v0 != 0 then goto L392b94;
  #L392b90.  v0:= -1I;
  #L392b92.  return v0;
  #L392b94.  v0:= v13.`j2.i.j` @type ^`j2.i$b` @kind object;
  #L392b98.  v0:= v0.`j2.i$b.a` @type ^`v1.j1` @kind object;
  #L392b9c.  v1:= v0.`v1.j1.N` @type ^`int`;
  #L392ba0.  v13.`j2.i.i` @type ^`int` := v1;
  #L392ba4.  v1:= v13.`j2.i.m` @type ^`boolean` @kind boolean;
  #L392ba8.  v2:= 1I;
  #L392baa.  if v1 != 0 then goto L392bbc;
  #L392bae.  v1:= v13.`j2.i.b` @type ^`a2.d0` @kind object;
  #L392bb2.  call `b`(v1, v0) @signature `La2/d0;.b:(Lv1/j1;)V` @kind interface;
  #L392bb8.  v13.`j2.i.m` @type ^`boolean` := v2 @kind boolean;
  #L392bbc.  v0:= v13.`j2.i.j` @type ^`j2.i$b` @kind object;
  #L392bc0.  v0:= v0.`j2.i$b.b` @type ^`j2.g` @kind object;
  #L392bc4.  v11:= 0I;
  #L392bc6.  if v0 == 0 then goto L392bd0;
  #L392bca.  v13.`j2.i.d` @type ^`j2.g` := v0 @kind object;
  #L392bce.  goto L392c3e;
  #L392bd0.  call temp:= `a`(v14) @signature `La2/m;.a:()J` @kind interface;
  #L392bd6.  v0:= temp @kind wide;
  #L392bd8.  v3:= -1L;
  #L392bdc.  v5:= lcmp(v0, v3);
  #L392be0.  if v5 != 0 then goto L392bf2;
  #L392be4.  v0:= new `j2.i$c`;
  #L392be8.  v1:= 0I;
  #L392bea.  call `<init>`(v0, v1) @signature `Lj2/i$c;.<init>:(Lj2/i$a;)V` @kind direct;
  #L392bf0.  goto L392bca;
  #L392bf2.  v0:= v13.`j2.i.a` @type ^`j2.e` @kind object;
  #L392bf6.  call temp:= `b`(v0) @signature `Lj2/e;.b:()Lj2/f;` @kind virtual;
  #L392bfc.  v0:= temp @kind object;
  #L392bfe.  v1:= v0.`j2.f.b` @type ^`int`;
  #L392c02.  v1:= v1 ^& 4;
  #L392c06.  if v1 == 0 then goto L392c0e;
  #L392c0a.  v10:= 1I;
  #L392c0c.  goto L392c10;
  #L392c0e.  v10:= 0I;
  #L392c10.  v12:= new `j2.a`;
  #L392c14.  v2:= v13.`j2.i.f` @type ^`long` @kind wide;
  #L392c18.  call temp:= `a`(v14) @signature `La2/m;.a:()J` @kind interface;
  #L392c1e.  v4:= temp @kind wide;
  #L392c20.  v1:= v0.`j2.f.e` @type ^`int`;
  #L392c24.  v6:= v0.`j2.f.f` @type ^`int`;
  #L392c28.  v1:= v1 + v6 @kind int;
  #L392c2a.  v6:= (`long`) v1 @kind i2l;
  #L392c2c.  v8:= v0.`j2.f.c` @type ^`long` @kind wide;
  #L392c30.  v0:= v12 @kind object;
  #L392c32.  v1:= v13 @kind object;
  #L392c34.  call `<init>`(v0, v1, v2, v4, v6, v8, v10) @signature `Lj2/a;.<init>:(Lj2/i;JJJJZ)V` @kind direct;
  #L392c3a.  v13.`j2.i.d` @type ^`j2.g` := v12 @kind object;
  #L392c3e.  v0:= 2I;
  #L392c40.  v13.`j2.i.h` @type ^`int` := v0;
  #L392c44.  v0:= v13.`j2.i.a` @type ^`j2.e` @kind object;
  #L392c48.  call `f`(v0) @signature `Lj2/e;.f:()V` @kind virtual;
  #L392c4e.  return v11;
}
procedure `int` `k`(`j2.i` v16 @kind this, `a2.m` v17 @kind object, `a2.z` v18 @kind object) @signature `Lj2/i;.k:(La2/m;La2/z;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L392c60.  v0:= v16 @kind object;
  #L392c64.  v1:= v17 @kind object;
  #L392c68.  v2:= v0.`j2.i.d` @type ^`j2.g` @kind object;
  #L392c6c.  call temp:= `b`(v2, v1) @signature `Lj2/g;.b:(La2/m;)J` @kind interface;
  #L392c72.  v2:= temp @kind wide;
  #L392c74.  v4:= 1I;
  #L392c76.  v5:= 0L;
  #L392c7a.  v7:= lcmp(v2, v5);
  #L392c7e.  if v7 < 0 then goto L392c8c;
  #L392c82.  v7:= v18 @kind object;
  #L392c86.  v7.`a2.z.a` @type ^`long` := v2 @kind wide;
  #L392c8a.  return v4;
  #L392c8c.  v7:= -1L;
  #L392c90.  v9:= lcmp(v2, v7);
  #L392c94.  if v9 >= 0 then goto L392ca6;
  #L392c98.  v9:= 2L;
  #L392c9c.  v2:= v2 + v9 @kind long;
  #L392c9e.  v2:= -v2 @kind long;
  #L392ca0.  call `e`(v0, v2) @signature `Lj2/i;.e:(J)V` @kind virtual;
  #L392ca6.  v2:= v0.`j2.i.l` @type ^`boolean` @kind boolean;
  #L392caa.  if v2 != 0 then goto L392cd4;
  #L392cae.  v2:= v0.`j2.i.d` @type ^`j2.g` @kind object;
  #L392cb2.  call temp:= `a`(v2) @signature `Lj2/g;.a:()La2/a0;` @kind interface;
  #L392cb8.  v2:= temp @kind object;
  #L392cba.  call temp:= `h`(v2) @signature `Ls3/a;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L392cc0.  v2:= temp @kind object;
  #L392cc2.  v2:= (`a2.a0`) v2 @kind object;
  #L392cc6.  v3:= v0.`j2.i.c` @type ^`a2.n` @kind object;
  #L392cca.  call `m`(v3, v2) @signature `La2/n;.m:(La2/a0;)V` @kind interface;
  #L392cd0.  v0.`j2.i.l` @type ^`boolean` := v4 @kind boolean;
  #L392cd4.  v2:= v0.`j2.i.k` @type ^`long` @kind wide;
  #L392cd8.  v4:= lcmp(v2, v5);
  #L392cdc.  if v4 > 0 then goto L392cfc;
  #L392ce0.  v2:= v0.`j2.i.a` @type ^`j2.e` @kind object;
  #L392ce4.  call temp:= `d`(v2, v1) @signature `Lj2/e;.d:(La2/m;)Z` @kind virtual;
  #L392cea.  v1:= temp;
  #L392cec.  if v1 == 0 then goto L392cf2;
  #L392cf0.  goto L392cfc;
  #L392cf2.  v1:= 3I;
  #L392cf4.  v0.`j2.i.h` @type ^`int` := v1;
  #L392cf8.  v1:= -1I;
  #L392cfa.  return v1;
  #L392cfc.  v0.`j2.i.k` @type ^`long` := v5 @kind wide;
  #L392d00.  v1:= v0.`j2.i.a` @type ^`j2.e` @kind object;
  #L392d04.  call temp:= `c`(v1) @signature `Lj2/e;.c:()Ls3/z;` @kind virtual;
  #L392d0a.  v1:= temp @kind object;
  #L392d0c.  call temp:= `f`(v0, v1) @signature `Lj2/i;.f:(Ls3/z;)J` @kind virtual;
  #L392d12.  v2:= temp @kind wide;
  #L392d14.  v4:= lcmp(v2, v5);
  #L392d18.  if v4 < 0 then goto L392d66;
  #L392d1c.  v4:= v0.`j2.i.g` @type ^`long` @kind wide;
  #L392d20.  v9:= v4 + v2 @kind long;
  #L392d24.  v11:= v0.`j2.i.e` @type ^`long` @kind wide;
  #L392d28.  v6:= lcmp(v9, v11);
  #L392d2c.  if v6 < 0 then goto L392d66;
  #L392d30.  call temp:= `b`(v0, v4) @signature `Lj2/i;.b:(J)J` @kind virtual;
  #L392d36.  v10:= temp @kind wide;
  #L392d38.  v4:= v0.`j2.i.b` @type ^`a2.d0` @kind object;
  #L392d3c.  call temp:= `f`(v1) @signature `Ls3/z;.f:()I` @kind virtual;
  #L392d42.  v5:= temp;
  #L392d44.  call `c`(v4, v1, v5) @signature `La2/d0;.c:(Ls3/z;I)V` @kind interface;
  #L392d4a.  v9:= v0.`j2.i.b` @type ^`a2.d0` @kind object;
  #L392d4e.  v12:= 1I;
  #L392d50.  call temp:= `f`(v1) @signature `Ls3/z;.f:()I` @kind virtual;
  #L392d56.  v13:= temp;
  #L392d58.  v14:= 0I;
  #L392d5a.  v15:= 0I;
  #L392d5c.  call `f`(v9, v10, v12, v13, v14, v15) @signature `La2/d0;.f:(JIIILa2/d0$a;)V` @kind interface;
  #L392d62.  v0.`j2.i.e` @type ^`long` := v7 @kind wide;
  #L392d66.  v4:= v0.`j2.i.g` @type ^`long` @kind wide;
  #L392d6a.  v4:= v4 + v2 @kind long;
  #L392d6c.  v0.`j2.i.g` @type ^`long` := v4 @kind wide;
  #L392d70.  v1:= 0I;
  #L392d72.  return v1;
}
procedure `long` `b`(`j2.i` v2 @kind this, `long` v3 ) @signature `Lj2/i;.b:(J)J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L392d84.  v0:= 1000000L;
  #L392d8a.  v3:= v3 * v0 @kind long;
  #L392d8e.  v0:= v2.`j2.i.i` @type ^`int`;
  #L392d92.  v0:= (`long`) v0 @kind i2l;
  #L392d94.  v3:= v3 / v0 @kind long;
  #L392d96.  return v3 @kind wide;
}
procedure `long` `c`(`j2.i` v2 @kind this, `long` v3 ) @signature `Lj2/i;.c:(J)J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L392da8.  v0:= v2.`j2.i.i` @type ^`int`;
  #L392dac.  v0:= (`long`) v0 @kind i2l;
  #L392dae.  v0:= v0 * v3 @kind long;
  #L392db2.  v3:= 1000000L;
  #L392db8.  v0:= v0 / v3 @kind long;
  #L392dba.  return v0 @kind wide;
}
procedure `void` `d`(`j2.i` v0 @kind this, `a2.n` v1 @kind object, `a2.d0` v2 @kind object) @signature `Lj2/i;.d:(La2/n;La2/d0;)V` @AccessFlag  {
    temp;

  #L392e28.  v0.`j2.i.c` @type ^`a2.n` := v1 @kind object;
  #L392e2c.  v0.`j2.i.b` @type ^`a2.d0` := v2 @kind object;
  #L392e30.  v1:= 1I;
  #L392e32.  call `l`(v0, v1) @signature `Lj2/i;.l:(Z)V` @kind virtual;
  #L392e38.  return @kind void;
}
procedure `void` `e`(`j2.i` v0 @kind this, `long` v1 ) @signature `Lj2/i;.e:(J)V` @AccessFlag PROTECTED {
    temp;

  #L392e4c.  v0.`j2.i.g` @type ^`long` := v1 @kind wide;
  #L392e50.  return @kind void;
}
procedure `long` `f`(`s3.z` v0 @kind object) @signature `Lj2/i;.f:(Ls3/z;)J` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `g`(`j2.i` v3 @kind this, `a2.m` v4 @kind object, `a2.z` v5 @kind object) @signature `Lj2/i;.g:(La2/m;La2/z;)I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L392b10.  call `a`(v3) @signature `Lj2/i;.a:()V` @kind direct;
  #L392b16.  v0:= v3.`j2.i.h` @type ^`int`;
  #L392b1a.  if v0 == 0 then goto L392b68;
  #L392b1e.  v1:= 1I;
  #L392b20.  v2:= 2I;
  #L392b22.  if v0 == v1 then goto L392b54;
  #L392b26.  if v0 == v2 then goto L392b40;
  #L392b2a.  v4:= 3I;
  #L392b2c.  if v0 != v4 then goto L392b34;
  #L392b30.  v4:= -1I;
  #L392b32.  return v4;
  #L392b34.  v4:= new `java.lang.IllegalStateException`;
  #L392b38.  call `<init>`(v4) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L392b3e.  throw v4;
  #L392b40.  v0:= v3.`j2.i.d` @type ^`j2.g` @kind object;
  #L392b44.  call temp:= `j`(v0) @signature `Ls3/l0;.j:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L392b4a.  call temp:= `k`(v3, v4, v5) @signature `Lj2/i;.k:(La2/m;La2/z;)I` @kind direct;
  #L392b50.  v4:= temp;
  #L392b52.  return v4;
  #L392b54.  v0:= v3.`j2.i.f` @type ^`long` @kind wide;
  #L392b58.  v5:= (`int`) v0 @kind l2i;
  #L392b5a.  call `j`(v4, v5) @signature `La2/m;.j:(I)V` @kind interface;
  #L392b60.  v3.`j2.i.h` @type ^`int` := v2;
  #L392b64.  v4:= 0I;
  #L392b66.  return v4;
  #L392b68.  call temp:= `j`(v3, v4) @signature `Lj2/i;.j:(La2/m;)I` @kind direct;
  #L392b6e.  v4:= temp;
  #L392b70.  return v4;
}
procedure `boolean` `i`(`s3.z` v0 @kind object, `long` v1 , `j2.i$b` v3 @kind object) @signature `Lj2/i;.i:(Ls3/z;JLj2/i$b;)Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `l`(`j2.i` v4 @kind this, `boolean` v5 ) @signature `Lj2/i;.l:(Z)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L392e64.  v0:= 0L;
  #L392e68.  if v5 == 0 then goto L392e82;
  #L392e6c.  v5:= new `j2.i$b`;
  #L392e70.  call `<init>`(v5) @signature `Lj2/i$b;.<init>:()V` @kind direct;
  #L392e76.  v4.`j2.i.j` @type ^`j2.i$b` := v5 @kind object;
  #L392e7a.  v4.`j2.i.f` @type ^`long` := v0 @kind wide;
  #L392e7e.  v5:= 0I;
  #L392e80.  goto L392e84;
  #L392e82.  v5:= 1I;
  #L392e84.  v4.`j2.i.h` @type ^`int` := v5;
  #L392e88.  v2:= -1L;
  #L392e8c.  v4.`j2.i.e` @type ^`long` := v2 @kind wide;
  #L392e90.  v4.`j2.i.g` @type ^`long` := v0 @kind wide;
  #L392e94.  return @kind void;
}
procedure `void` `m`(`j2.i` v3 @kind this, `long` v4 , `long` v6 ) @signature `Lj2/i;.m:(JJ)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L392ea8.  v0:= v3.`j2.i.a` @type ^`j2.e` @kind object;
  #L392eac.  call `e`(v0) @signature `Lj2/e;.e:()V` @kind virtual;
  #L392eb2.  v0:= 0L;
  #L392eb6.  v2:= lcmp(v4, v0);
  #L392eba.  if v2 != 0 then goto L392ece;
  #L392ebe.  v4:= v3.`j2.i.l` @type ^`boolean` @kind boolean;
  #L392ec2.  v4:= v4 ^~ 1;
  #L392ec6.  call `l`(v3, v4) @signature `Lj2/i;.l:(Z)V` @kind virtual;
  #L392ecc.  goto L392f02;
  #L392ece.  v4:= v3.`j2.i.h` @type ^`int`;
  #L392ed2.  if v4 == 0 then goto L392f02;
  #L392ed6.  call temp:= `c`(v3, v6) @signature `Lj2/i;.c:(J)J` @kind virtual;
  #L392edc.  v4:= temp @kind wide;
  #L392ede.  v3.`j2.i.e` @type ^`long` := v4 @kind wide;
  #L392ee2.  v4:= v3.`j2.i.d` @type ^`j2.g` @kind object;
  #L392ee6.  call temp:= `j`(v4) @signature `Ls3/l0;.j:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L392eec.  v4:= temp @kind object;
  #L392eee.  v4:= (`j2.g`) v4 @kind object;
  #L392ef2.  v5:= v3.`j2.i.e` @type ^`long` @kind wide;
  #L392ef6.  call `c`(v4, v5) @signature `Lj2/g;.c:(J)V` @kind interface;
  #L392efc.  v4:= 2I;
  #L392efe.  v3.`j2.i.h` @type ^`int` := v4;
  #L392f02.  return @kind void;
}
