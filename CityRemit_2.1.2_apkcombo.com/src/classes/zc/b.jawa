record `zc.b` @kind class @AccessFlag FINAL extends `zc.f` @kind class, `java.io.Serializable` @kind interface {
  `long`[] `zc.b.o` @AccessFlag PRIVATE_FINAL;
  `uc.r`[] `zc.b.p` @AccessFlag PRIVATE_FINAL;
  `long`[] `zc.b.q` @AccessFlag PRIVATE_FINAL;
  `uc.g`[] `zc.b.r` @AccessFlag PRIVATE_FINAL;
  `uc.r`[] `zc.b.s` @AccessFlag PRIVATE_FINAL;
  `zc.e`[] `zc.b.t` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentMap` `zc.b.u` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`zc.b` v5 @kind this, `long`[] v6 @kind object, `uc.r`[] v7 @kind object, `long`[] v8 @kind object, `uc.r`[] v9 @kind object, `zc.e`[] v10 @kind object) @signature `Lzc/b;.<init>:([J[Luc/r;[J[Luc/r;[Lzc/e;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L508c44.  call `<init>`(v5) @signature `Lzc/f;.<init>:()V` @kind direct;
  #L508c4a.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L508c4e.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L508c54.  v5.`zc.b.u` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L508c58.  v5.`zc.b.o` @type ^`long`[] := v6 @kind object;
  #L508c5c.  v5.`zc.b.p` @type ^`uc.r`[] := v7 @kind object;
  #L508c60.  v5.`zc.b.q` @type ^`long`[] := v8 @kind object;
  #L508c64.  v5.`zc.b.s` @type ^`uc.r`[] := v9 @kind object;
  #L508c68.  v5.`zc.b.t` @type ^`zc.e`[] := v10 @kind object;
  #L508c6c.  v6:= new `java.util.ArrayList`;
  #L508c70.  call `<init>`(v6) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L508c76.  v7:= 0I;
  #L508c78.  v10:= length @variable v8;
  #L508c7a.  if v7 >= v10 then goto L508cdc;
  #L508c7e.  v10:= v9[v7] @kind object;
  #L508c82.  v0:= v7 + 1;
  #L508c86.  v1:= v9[v0] @kind object;
  #L508c8a.  v2:= new `zc.d`;
  #L508c8e.  v3:= v8[v7] @kind wide;
  #L508c92.  call `<init>`(v2, v3, v10, v1) @signature `Lzc/d;.<init>:(JLuc/r;Luc/r;)V` @kind direct;
  #L508c98.  call temp:= `s`(v2) @signature `Lzc/d;.s:()Z` @kind virtual;
  #L508c9e.  v7:= temp;
  #L508ca0.  if v7 == 0 then goto L508cbc;
  #L508ca4.  call temp:= `e`(v2) @signature `Lzc/d;.e:()Luc/g;` @kind virtual;
  #L508caa.  v7:= temp @kind object;
  #L508cac.  call temp:= `add`(v6, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L508cb2.  call temp:= `d`(v2) @signature `Lzc/d;.d:()Luc/g;` @kind virtual;
  #L508cb8.  v7:= temp @kind object;
  #L508cba.  goto L508cd2;
  #L508cbc.  call temp:= `d`(v2) @signature `Lzc/d;.d:()Luc/g;` @kind virtual;
  #L508cc2.  v7:= temp @kind object;
  #L508cc4.  call temp:= `add`(v6, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L508cca.  call temp:= `e`(v2) @signature `Lzc/d;.e:()Luc/g;` @kind virtual;
  #L508cd0.  v7:= temp @kind object;
  #L508cd2.  call temp:= `add`(v6, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L508cd8.  v7:= v0;
  #L508cda.  goto L508c78;
  #L508cdc.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L508ce2.  v7:= temp;
  #L508ce4.  v7:= new `uc.g`[v7];
  #L508ce8.  call temp:= `toArray`(v6, v7) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L508cee.  v6:= temp @kind object;
  #L508cf0.  v6:= (`uc.g`[]) v6 @kind object;
  #L508cf4.  v5.`zc.b.r` @type ^`uc.g`[] := v6 @kind object;
  #L508cf8.  return @kind void;
}
procedure `java.lang.Object` `g`(`zc.b` v2 @kind this, `uc.g` v3 @kind object, `zc.d` v4 @kind object) @signature `Lzc/b;.g:(Luc/g;Lzc/d;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L508920.  call temp:= `e`(v4) @signature `Lzc/d;.e:()Luc/g;` @kind virtual;
  #L508926.  v0:= temp @kind object;
  #L508928.  call temp:= `s`(v4) @signature `Lzc/d;.s:()Z` @kind virtual;
  #L50892e.  v1:= temp;
  #L508930.  call temp:= `c0`(v3, v0) @signature `Luc/g;.c0:(Lvc/c;)Z` @kind virtual;
  #L508936.  v0:= temp;
  #L508938.  if v1 == 0 then goto L50896a;
  #L50893c.  if v0 == 0 then goto L50894a;
  #L508940.  call temp:= `o`(v4) @signature `Lzc/d;.o:()Luc/r;` @kind virtual;
  #L508946.  v3:= temp @kind object;
  #L508948.  return v3 @kind object;
  #L50894a.  call temp:= `d`(v4) @signature `Lzc/d;.d:()Luc/g;` @kind virtual;
  #L508950.  v0:= temp @kind object;
  #L508952.  call temp:= `c0`(v3, v0) @signature `Luc/g;.c0:(Lvc/c;)Z` @kind virtual;
  #L508958.  v3:= temp;
  #L50895a.  if v3 == 0 then goto L508960;
  #L50895e.  return v4 @kind object;
  #L508960.  call temp:= `k`(v4) @signature `Lzc/d;.k:()Luc/r;` @kind virtual;
  #L508966.  v3:= temp @kind object;
  #L508968.  return v3 @kind object;
  #L50896a.  if v0 != 0 then goto L508978;
  #L50896e.  call temp:= `k`(v4) @signature `Lzc/d;.k:()Luc/r;` @kind virtual;
  #L508974.  v3:= temp @kind object;
  #L508976.  return v3 @kind object;
  #L508978.  call temp:= `d`(v4) @signature `Lzc/d;.d:()Luc/g;` @kind virtual;
  #L50897e.  v0:= temp @kind object;
  #L508980.  call temp:= `c0`(v3, v0) @signature `Luc/g;.c0:(Lvc/c;)Z` @kind virtual;
  #L508986.  v3:= temp;
  #L508988.  if v3 == 0 then goto L508996;
  #L50898c.  call temp:= `o`(v4) @signature `Lzc/d;.o:()Luc/r;` @kind virtual;
  #L508992.  v3:= temp @kind object;
  #L508994.  return v3 @kind object;
  #L508996.  return v4 @kind object;
}
procedure `zc.d`[] `h`(`zc.b` v5 @kind this, `int` v6 ) @signature `Lzc/b;.h:(I)[Lzc/d;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L508ec8.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L508ece.  v0:= temp @kind object;
  #L508ed0.  v1:= v5.`zc.b.u` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L508ed4.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L508eda.  v1:= temp @kind object;
  #L508edc.  v1:= (`zc.d`[]) v1 @kind object;
  #L508ee0.  if v1 == 0 then goto L508ee6;
  #L508ee4.  return v1 @kind object;
  #L508ee6.  v1:= v5.`zc.b.t` @type ^`zc.e`[] @kind object;
  #L508eea.  v2:= length @variable v1;
  #L508eec.  v2:= new `zc.d`[v2];
  #L508ef0.  v3:= 0I;
  #L508ef2.  v4:= length @variable v1;
  #L508ef4.  if v3 >= v4 then goto L508f0e;
  #L508ef8.  v4:= v1[v3] @kind object;
  #L508efc.  call temp:= `b`(v4, v6) @signature `Lzc/e;.b:(I)Lzc/d;` @kind virtual;
  #L508f02.  v4:= temp @kind object;
  #L508f04.  v2[v3]:= v4 @kind object;
  #L508f08.  v3:= v3 + 1;
  #L508f0c.  goto L508ef2;
  #L508f0e.  v1:= 2100I;
  #L508f12.  if v6 >= v1 then goto L508f20;
  #L508f16.  v6:= v5.`zc.b.u` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L508f1a.  call temp:= `putIfAbsent`(v6, v0, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L508f20.  return v2 @kind object;
}
procedure `int` `i`(`zc.b` v2 @kind this, `long` v3 , `uc.r` v5 @kind object) @signature `Lzc/b;.i:(JLuc/r;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L50888c.  call temp:= `S`(v5) @signature `Luc/r;.S:()I` @kind virtual;
  #L508892.  v5:= temp;
  #L508894.  v0:= (`long`) v5 @kind i2l;
  #L508896.  v3:= v3 + v0 @kind long;
  #L508898.  v0:= 86400L;
  #L50889e.  call temp:= `e`(v3, v0) @signature `Lxc/d;.e:(JJ)J` @kind static;
  #L5088a4.  v3:= temp @kind wide;
  #L5088a6.  call temp:= `E0`(v3) @signature `Luc/f;.E0:(J)Luc/f;` @kind static;
  #L5088ac.  v3:= temp @kind object;
  #L5088ae.  call temp:= `v0`(v3) @signature `Luc/f;.v0:()I` @kind virtual;
  #L5088b4.  v3:= temp;
  #L5088b6.  return v3;
}
procedure `java.lang.Object` `j`(`zc.b` v6 @kind this, `uc.g` v7 @kind object) @signature `Lzc/b;.j:(Luc/g;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L5089a8.  v0:= v6.`zc.b.t` @type ^`zc.e`[] @kind object;
  #L5089ac.  v0:= length @variable v0;
  #L5089ae.  v1:= 0I;
  #L5089b0.  if v0 <= 0 then goto L508a1c;
  #L5089b4.  v0:= v6.`zc.b.r` @type ^`uc.g`[] @kind object;
  #L5089b8.  v2:= length @variable v0;
  #L5089ba.  v2:= v2 + -1;
  #L5089be.  v0:= v0[v2] @kind object;
  #L5089c2.  call temp:= `b0`(v7, v0) @signature `Luc/g;.b0:(Lvc/c;)Z` @kind virtual;
  #L5089c8.  v0:= temp;
  #L5089ca.  if v0 == 0 then goto L508a1c;
  #L5089ce.  call temp:= `w0`(v7) @signature `Luc/g;.w0:()I` @kind virtual;
  #L5089d4.  v0:= temp;
  #L5089d6.  call temp:= `h`(v6, v0) @signature `Lzc/b;.h:(I)[Lzc/d;` @kind direct;
  #L5089dc.  v0:= temp @kind object;
  #L5089de.  v2:= 0I;
  #L5089e0.  v3:= length @variable v0;
  #L5089e2.  if v1 >= v3 then goto L508a1a;
  #L5089e6.  v2:= v0[v1] @kind object;
  #L5089ea.  call temp:= `g`(v6, v7, v2) @signature `Lzc/b;.g:(Luc/g;Lzc/d;)Ljava/lang/Object;` @kind direct;
  #L5089f0.  v4:= temp @kind object;
  #L5089f2.  v5:= instanceof @variable v4 @type ^`zc.d` @kind boolean;
  #L5089f6.  if v5 != 0 then goto L508a18;
  #L5089fa.  call temp:= `o`(v2) @signature `Lzc/d;.o:()Luc/r;` @kind virtual;
  #L508a00.  v2:= temp @kind object;
  #L508a02.  call temp:= `equals`(v4, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L508a08.  v2:= temp;
  #L508a0a.  if v2 == 0 then goto L508a10;
  #L508a0e.  goto L508a18;
  #L508a10.  v1:= v1 + 1;
  #L508a14.  v2:= v4 @kind object;
  #L508a16.  goto L5089e2;
  #L508a18.  return v4 @kind object;
  #L508a1a.  return v2 @kind object;
  #L508a1c.  v0:= v6.`zc.b.r` @type ^`uc.g`[] @kind object;
  #L508a20.  call temp:= `binarySearch`(v0, v7) @signature `Ljava/util/Arrays;.binarySearch:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L508a26.  v7:= temp;
  #L508a28.  v0:= -1I;
  #L508a2a.  if v7 != v0 then goto L508a38;
  #L508a2e.  v7:= v6.`zc.b.s` @type ^`uc.r`[] @kind object;
  #L508a32.  v7:= v7[v1] @kind object;
  #L508a36.  return v7 @kind object;
  #L508a38.  if v7 >= 0 then goto L508a44;
  #L508a3c.  v7:= -v7 @kind int;
  #L508a3e.  v7:= v7 + -2;
  #L508a42.  goto L508a6c;
  #L508a44.  v0:= v6.`zc.b.r` @type ^`uc.g`[] @kind object;
  #L508a48.  v1:= length @variable v0;
  #L508a4a.  v1:= v1 + -1;
  #L508a4e.  if v7 >= v1 then goto L508a6c;
  #L508a52.  v1:= v0[v7] @kind object;
  #L508a56.  v2:= v7 + 1;
  #L508a5a.  v0:= v0[v2] @kind object;
  #L508a5e.  call temp:= `equals`(v1, v0) @signature `Luc/g;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L508a64.  v0:= temp;
  #L508a66.  if v0 == 0 then goto L508a6c;
  #L508a6a.  v7:= v2;
  #L508a6c.  v0:= v7 ^& 1;
  #L508a70.  if v0 != 0 then goto L508ac4;
  #L508a74.  v0:= v6.`zc.b.r` @type ^`uc.g`[] @kind object;
  #L508a78.  v1:= v0[v7] @kind object;
  #L508a7c.  v2:= v7 + 1;
  #L508a80.  v0:= v0[v2] @kind object;
  #L508a84.  v2:= v6.`zc.b.s` @type ^`uc.r`[] @kind object;
  #L508a88.  v7:= v7 / 2;
  #L508a8c.  v3:= v2[v7] @kind object;
  #L508a90.  v7:= v7 + 1;
  #L508a94.  v7:= v2[v7] @kind object;
  #L508a98.  call temp:= `S`(v7) @signature `Luc/r;.S:()I` @kind virtual;
  #L508a9e.  v2:= temp;
  #L508aa0.  call temp:= `S`(v3) @signature `Luc/r;.S:()I` @kind virtual;
  #L508aa6.  v4:= temp;
  #L508aa8.  if v2 <= v4 then goto L508ab8;
  #L508aac.  v0:= new `zc.d`;
  #L508ab0.  call `<init>`(v0, v1, v3, v7) @signature `Lzc/d;.<init>:(Luc/g;Luc/r;Luc/r;)V` @kind direct;
  #L508ab6.  return v0 @kind object;
  #L508ab8.  v1:= new `zc.d`;
  #L508abc.  call `<init>`(v1, v0, v3, v7) @signature `Lzc/d;.<init>:(Luc/g;Luc/r;Luc/r;)V` @kind direct;
  #L508ac2.  return v1 @kind object;
  #L508ac4.  v0:= v6.`zc.b.s` @type ^`uc.r`[] @kind object;
  #L508ac8.  v7:= v7 / 2;
  #L508acc.  v7:= v7 + 1;
  #L508ad0.  v7:= v0[v7] @kind object;
  #L508ad4.  return v7 @kind object;
}
procedure `zc.b` `k`(`java.io.DataInput` v8 @kind object) @signature `Lzc/b;.k:(Ljava/io/DataInput;)Lzc/b;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L508dd0.  call temp:= `readInt`(v8) @signature `Ljava/io/DataInput;.readInt:()I` @kind interface;
  #L508dd6.  v0:= temp;
  #L508dd8.  v2:= new `long`[v0];
  #L508ddc.  v1:= 0I;
  #L508dde.  v3:= 0I;
  #L508de0.  if v3 >= v0 then goto L508df6;
  #L508de4.  call temp:= `b`(v8) @signature `Lzc/a;.b:(Ljava/io/DataInput;)J` @kind static;
  #L508dea.  v4:= temp @kind wide;
  #L508dec.  v2[v3]:= v4 @kind wide;
  #L508df0.  v3:= v3 + 1;
  #L508df4.  goto L508de0;
  #L508df6.  v0:= v0 + 1;
  #L508dfa.  v3:= new `uc.r`[v0];
  #L508dfe.  v4:= 0I;
  #L508e00.  if v4 >= v0 then goto L508e16;
  #L508e04.  call temp:= `d`(v8) @signature `Lzc/a;.d:(Ljava/io/DataInput;)Luc/r;` @kind static;
  #L508e0a.  v5:= temp @kind object;
  #L508e0c.  v3[v4]:= v5 @kind object;
  #L508e10.  v4:= v4 + 1;
  #L508e14.  goto L508e00;
  #L508e16.  call temp:= `readInt`(v8) @signature `Ljava/io/DataInput;.readInt:()I` @kind interface;
  #L508e1c.  v0:= temp;
  #L508e1e.  v4:= new `long`[v0];
  #L508e22.  v5:= 0I;
  #L508e24.  if v5 >= v0 then goto L508e3a;
  #L508e28.  call temp:= `b`(v8) @signature `Lzc/a;.b:(Ljava/io/DataInput;)J` @kind static;
  #L508e2e.  v6:= temp @kind wide;
  #L508e30.  v4[v5]:= v6 @kind wide;
  #L508e34.  v5:= v5 + 1;
  #L508e38.  goto L508e24;
  #L508e3a.  v0:= v0 + 1;
  #L508e3e.  v5:= new `uc.r`[v0];
  #L508e42.  v6:= 0I;
  #L508e44.  if v6 >= v0 then goto L508e5a;
  #L508e48.  call temp:= `d`(v8) @signature `Lzc/a;.d:(Ljava/io/DataInput;)Luc/r;` @kind static;
  #L508e4e.  v7:= temp @kind object;
  #L508e50.  v5[v6]:= v7 @kind object;
  #L508e54.  v6:= v6 + 1;
  #L508e58.  goto L508e44;
  #L508e5a.  call temp:= `readByte`(v8) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L508e60.  v0:= temp;
  #L508e62.  v6:= new `zc.e`[v0];
  #L508e66.  if v1 >= v0 then goto L508e7c;
  #L508e6a.  call temp:= `c`(v8) @signature `Lzc/e;.c:(Ljava/io/DataInput;)Lzc/e;` @kind static;
  #L508e70.  v7:= temp @kind object;
  #L508e72.  v6[v1]:= v7 @kind object;
  #L508e76.  v1:= v1 + 1;
  #L508e7a.  goto L508e66;
  #L508e7c.  v8:= new `zc.b`;
  #L508e80.  v1:= v8 @kind object;
  #L508e82.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lzc/b;.<init>:([J[Luc/r;[J[Luc/r;[Lzc/e;)V` @kind direct;
  #L508e88.  return v8 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`zc.b` v2 @kind this) @signature `Lzc/b;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L508ae8.  v0:= new `zc.a`;
  #L508aec.  v1:= 1I;
  #L508aee.  call `<init>`(v0, v1, v2) @signature `Lzc/a;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L508af4.  return v0 @kind object;
}
procedure `uc.r` `a`(`zc.b` v7 @kind this, `uc.e` v8 @kind object) @signature `Lzc/b;.a:(Luc/e;)Luc/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L508b90.  call temp:= `a0`(v8) @signature `Luc/e;.a0:()J` @kind virtual;
  #L508b96.  v0:= temp @kind wide;
  #L508b98.  v8:= v7.`zc.b.t` @type ^`zc.e`[] @kind object;
  #L508b9c.  v8:= length @variable v8;
  #L508b9e.  if v8 <= 0 then goto L508c0e;
  #L508ba2.  v8:= v7.`zc.b.q` @type ^`long`[] @kind object;
  #L508ba6.  v2:= length @variable v8;
  #L508ba8.  v2:= v2 + -1;
  #L508bac.  v2:= v8[v2] @kind wide;
  #L508bb0.  v8:= lcmp(v0, v2);
  #L508bb4.  if v8 <= 0 then goto L508c0e;
  #L508bb8.  v8:= v7.`zc.b.s` @type ^`uc.r`[] @kind object;
  #L508bbc.  v2:= length @variable v8;
  #L508bbe.  v2:= v2 + -1;
  #L508bc2.  v8:= v8[v2] @kind object;
  #L508bc6.  call temp:= `i`(v7, v0, v8) @signature `Lzc/b;.i:(JLuc/r;)I` @kind direct;
  #L508bcc.  v8:= temp;
  #L508bce.  call temp:= `h`(v7, v8) @signature `Lzc/b;.h:(I)[Lzc/d;` @kind direct;
  #L508bd4.  v8:= temp @kind object;
  #L508bd6.  v2:= 0I;
  #L508bd8.  v3:= 0I;
  #L508bda.  v4:= length @variable v8;
  #L508bdc.  if v3 >= v4 then goto L508c04;
  #L508be0.  v2:= v8[v3] @kind object;
  #L508be4.  call temp:= `v`(v2) @signature `Lzc/d;.v:()J` @kind virtual;
  #L508bea.  v4:= temp @kind wide;
  #L508bec.  v6:= lcmp(v0, v4);
  #L508bf0.  if v6 >= 0 then goto L508bfe;
  #L508bf4.  call temp:= `o`(v2) @signature `Lzc/d;.o:()Luc/r;` @kind virtual;
  #L508bfa.  v8:= temp @kind object;
  #L508bfc.  return v8 @kind object;
  #L508bfe.  v3:= v3 + 1;
  #L508c02.  goto L508bda;
  #L508c04.  call temp:= `k`(v2) @signature `Lzc/d;.k:()Luc/r;` @kind virtual;
  #L508c0a.  v8:= temp @kind object;
  #L508c0c.  return v8 @kind object;
  #L508c0e.  v8:= v7.`zc.b.q` @type ^`long`[] @kind object;
  #L508c12.  call temp:= `binarySearch`(v8, v0) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L508c18.  v8:= temp;
  #L508c1a.  if v8 >= 0 then goto L508c24;
  #L508c1e.  v8:= -v8 @kind int;
  #L508c20.  v8:= v8 + -2;
  #L508c24.  v0:= v7.`zc.b.s` @type ^`uc.r`[] @kind object;
  #L508c28.  v8:= v8 + 1;
  #L508c2c.  v8:= v0[v8] @kind object;
  #L508c30.  return v8 @kind object;
}
procedure `zc.d` `b`(`zc.b` v1 @kind this, `uc.g` v2 @kind object) @signature `Lzc/b;.b:(Luc/g;)Lzc/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L508e9c.  call temp:= `j`(v1, v2) @signature `Lzc/b;.j:(Luc/g;)Ljava/lang/Object;` @kind direct;
  #L508ea2.  v2:= temp @kind object;
  #L508ea4.  v0:= instanceof @variable v2 @type ^`zc.d` @kind boolean;
  #L508ea8.  if v0 == 0 then goto L508eb2;
  #L508eac.  v2:= (`zc.d`) v2 @kind object;
  #L508eb0.  goto L508eb4;
  #L508eb2.  v2:= 0I;
  #L508eb4.  return v2 @kind object;
}
procedure `java.util.List` `c`(`zc.b` v1 @kind this, `uc.g` v2 @kind object) @signature `Lzc/b;.c:(Luc/g;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L508b54.  call temp:= `j`(v1, v2) @signature `Lzc/b;.j:(Luc/g;)Ljava/lang/Object;` @kind direct;
  #L508b5a.  v2:= temp @kind object;
  #L508b5c.  v0:= instanceof @variable v2 @type ^`zc.d` @kind boolean;
  #L508b60.  if v0 == 0 then goto L508b72;
  #L508b64.  v2:= (`zc.d`) v2 @kind object;
  #L508b68.  call temp:= `r`(v2) @signature `Lzc/d;.r:()Ljava/util/List;` @kind virtual;
  #L508b6e.  v2:= temp @kind object;
  #L508b70.  return v2 @kind object;
  #L508b72.  v2:= (`uc.r`) v2 @kind object;
  #L508b76.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L508b7c.  v2:= temp @kind object;
  #L508b7e.  return v2 @kind object;
}
procedure `boolean` `d`(`zc.b` v1 @kind this) @signature `Lzc/b;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L508844.  v0:= v1.`zc.b.q` @type ^`long`[] @kind object;
  #L508848.  v0:= length @variable v0;
  #L50884a.  if v0 != 0 then goto L508852;
  #L50884e.  v0:= 1I;
  #L508850.  goto L508854;
  #L508852.  v0:= 0I;
  #L508854.  return v0;
}
procedure `boolean` `e`(`zc.b` v0 @kind this, `uc.g` v1 @kind object, `uc.r` v2 @kind object) @signature `Lzc/b;.e:(Luc/g;Luc/r;)Z` @AccessFlag PUBLIC {
    temp;

  #L508868.  call temp:= `c`(v0, v1) @signature `Lzc/b;.c:(Luc/g;)Ljava/util/List;` @kind virtual;
  #L50886e.  v1:= temp @kind object;
  #L508870.  call temp:= `contains`(v1, v2) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L508876.  v1:= temp;
  #L508878.  return v1;
}
procedure `boolean` `equals`(`zc.b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lzc/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L508774.  v0:= 1I;
  #L508776.  if v4 != v5 then goto L50877c;
  #L50877a.  return v0;
  #L50877c.  v1:= instanceof @variable v5 @type ^`zc.b` @kind boolean;
  #L508780.  v2:= 0I;
  #L508782.  if v1 == 0 then goto L5087f4;
  #L508786.  v5:= (`zc.b`) v5 @kind object;
  #L50878a.  v1:= v4.`zc.b.o` @type ^`long`[] @kind object;
  #L50878e.  v3:= v5.`zc.b.o` @type ^`long`[] @kind object;
  #L508792.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([J[J)Z` @kind static;
  #L508798.  v1:= temp;
  #L50879a.  if v1 == 0 then goto L5087f0;
  #L50879e.  v1:= v4.`zc.b.p` @type ^`uc.r`[] @kind object;
  #L5087a2.  v3:= v5.`zc.b.p` @type ^`uc.r`[] @kind object;
  #L5087a6.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L5087ac.  v1:= temp;
  #L5087ae.  if v1 == 0 then goto L5087f0;
  #L5087b2.  v1:= v4.`zc.b.q` @type ^`long`[] @kind object;
  #L5087b6.  v3:= v5.`zc.b.q` @type ^`long`[] @kind object;
  #L5087ba.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([J[J)Z` @kind static;
  #L5087c0.  v1:= temp;
  #L5087c2.  if v1 == 0 then goto L5087f0;
  #L5087c6.  v1:= v4.`zc.b.s` @type ^`uc.r`[] @kind object;
  #L5087ca.  v3:= v5.`zc.b.s` @type ^`uc.r`[] @kind object;
  #L5087ce.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L5087d4.  v1:= temp;
  #L5087d6.  if v1 == 0 then goto L5087f0;
  #L5087da.  v1:= v4.`zc.b.t` @type ^`zc.e`[] @kind object;
  #L5087de.  v5:= v5.`zc.b.t` @type ^`zc.e`[] @kind object;
  #L5087e2.  call temp:= `equals`(v1, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L5087e8.  v5:= temp;
  #L5087ea.  if v5 == 0 then goto L5087f0;
  #L5087ee.  goto L5087f2;
  #L5087f0.  v0:= 0I;
  #L5087f2.  return v0;
  #L5087f4.  v1:= instanceof @variable v5 @type ^`zc.f$a` @kind boolean;
  #L5087f8.  if v1 == 0 then goto L508832;
  #L5087fc.  call temp:= `d`(v4) @signature `Lzc/b;.d:()Z` @kind virtual;
  #L508802.  v1:= temp;
  #L508804.  if v1 == 0 then goto L50882e;
  #L508808.  v1:= `@@uc.e.q` @type ^`uc.e` @kind object;
  #L50880c.  call temp:= `a`(v4, v1) @signature `Lzc/b;.a:(Luc/e;)Luc/r;` @kind virtual;
  #L508812.  v3:= temp @kind object;
  #L508814.  v5:= (`zc.f$a`) v5 @kind object;
  #L508818.  call temp:= `a`(v5, v1) @signature `Lzc/f$a;.a:(Luc/e;)Luc/r;` @kind virtual;
  #L50881e.  v5:= temp @kind object;
  #L508820.  call temp:= `equals`(v3, v5) @signature `Luc/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L508826.  v5:= temp;
  #L508828.  if v5 == 0 then goto L50882e;
  #L50882c.  goto L508830;
  #L50882e.  v0:= 0I;
  #L508830.  return v0;
  #L508832.  return v2;
}
procedure `int` `hashCode`(`zc.b` v2 @kind this) @signature `Lzc/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5088c8.  v0:= v2.`zc.b.o` @type ^`long`[] @kind object;
  #L5088cc.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([J)I` @kind static;
  #L5088d2.  v0:= temp;
  #L5088d4.  v1:= v2.`zc.b.p` @type ^`uc.r`[] @kind object;
  #L5088d8.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L5088de.  v1:= temp;
  #L5088e0.  v0:= v0 ^~ v1 @kind int;
  #L5088e2.  v1:= v2.`zc.b.q` @type ^`long`[] @kind object;
  #L5088e6.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([J)I` @kind static;
  #L5088ec.  v1:= temp;
  #L5088ee.  v0:= v0 ^~ v1 @kind int;
  #L5088f0.  v1:= v2.`zc.b.s` @type ^`uc.r`[] @kind object;
  #L5088f4.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L5088fa.  v1:= temp;
  #L5088fc.  v0:= v0 ^~ v1 @kind int;
  #L5088fe.  v1:= v2.`zc.b.t` @type ^`zc.e`[] @kind object;
  #L508902.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L508908.  v1:= temp;
  #L50890a.  v0:= v0 ^~ v1 @kind int;
  #L50890c.  return v0;
}
procedure `void` `l`(`zc.b` v6 @kind this, `java.io.DataOutput` v7 @kind object) @signature `Lzc/b;.l:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L508d0c.  v0:= v6.`zc.b.o` @type ^`long`[] @kind object;
  #L508d10.  v0:= length @variable v0;
  #L508d12.  call `writeInt`(v7, v0) @signature `Ljava/io/DataOutput;.writeInt:(I)V` @kind interface;
  #L508d18.  v0:= v6.`zc.b.o` @type ^`long`[] @kind object;
  #L508d1c.  v1:= length @variable v0;
  #L508d1e.  v2:= 0I;
  #L508d20.  v3:= 0I;
  #L508d22.  if v3 >= v1 then goto L508d36;
  #L508d26.  v4:= v0[v3] @kind wide;
  #L508d2a.  call `e`(v4, v7) @signature `Lzc/a;.e:(JLjava/io/DataOutput;)V` @kind static;
  #L508d30.  v3:= v3 + 1;
  #L508d34.  goto L508d22;
  #L508d36.  v0:= v6.`zc.b.p` @type ^`uc.r`[] @kind object;
  #L508d3a.  v1:= length @variable v0;
  #L508d3c.  v3:= 0I;
  #L508d3e.  if v3 >= v1 then goto L508d52;
  #L508d42.  v4:= v0[v3] @kind object;
  #L508d46.  call `g`(v4, v7) @signature `Lzc/a;.g:(Luc/r;Ljava/io/DataOutput;)V` @kind static;
  #L508d4c.  v3:= v3 + 1;
  #L508d50.  goto L508d3e;
  #L508d52.  v0:= v6.`zc.b.q` @type ^`long`[] @kind object;
  #L508d56.  v0:= length @variable v0;
  #L508d58.  call `writeInt`(v7, v0) @signature `Ljava/io/DataOutput;.writeInt:(I)V` @kind interface;
  #L508d5e.  v0:= v6.`zc.b.q` @type ^`long`[] @kind object;
  #L508d62.  v1:= length @variable v0;
  #L508d64.  v3:= 0I;
  #L508d66.  if v3 >= v1 then goto L508d7a;
  #L508d6a.  v4:= v0[v3] @kind wide;
  #L508d6e.  call `e`(v4, v7) @signature `Lzc/a;.e:(JLjava/io/DataOutput;)V` @kind static;
  #L508d74.  v3:= v3 + 1;
  #L508d78.  goto L508d66;
  #L508d7a.  v0:= v6.`zc.b.s` @type ^`uc.r`[] @kind object;
  #L508d7e.  v1:= length @variable v0;
  #L508d80.  v3:= 0I;
  #L508d82.  if v3 >= v1 then goto L508d96;
  #L508d86.  v4:= v0[v3] @kind object;
  #L508d8a.  call `g`(v4, v7) @signature `Lzc/a;.g:(Luc/r;Ljava/io/DataOutput;)V` @kind static;
  #L508d90.  v3:= v3 + 1;
  #L508d94.  goto L508d82;
  #L508d96.  v0:= v6.`zc.b.t` @type ^`zc.e`[] @kind object;
  #L508d9a.  v0:= length @variable v0;
  #L508d9c.  call `writeByte`(v7, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L508da2.  v0:= v6.`zc.b.t` @type ^`zc.e`[] @kind object;
  #L508da6.  v1:= length @variable v0;
  #L508da8.  if v2 >= v1 then goto L508dbc;
  #L508dac.  v3:= v0[v2] @kind object;
  #L508db0.  call `d`(v3, v7) @signature `Lzc/e;.d:(Ljava/io/DataOutput;)V` @kind virtual;
  #L508db6.  v2:= v2 + 1;
  #L508dba.  goto L508da8;
  #L508dbc.  return @kind void;
}
procedure `java.lang.String` `toString`(`zc.b` v3 @kind this) @signature `Lzc/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L508b08.  v0:= new `java.lang.StringBuilder`;
  #L508b0c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L508b12.  v1:= "StandardZoneRules[currentStandardOffset=" @kind object;
  #L508b16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L508b1c.  v1:= v3.`zc.b.p` @type ^`uc.r`[] @kind object;
  #L508b20.  v2:= length @variable v1;
  #L508b22.  v2:= v2 + -1;
  #L508b26.  v1:= v1[v2] @kind object;
  #L508b2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L508b30.  v1:= "]" @kind object;
  #L508b34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L508b3a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L508b40.  v0:= temp @kind object;
  #L508b42.  return v0 @kind object;
}
