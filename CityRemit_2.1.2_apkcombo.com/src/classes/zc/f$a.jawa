record `zc.f$a` @kind class @AccessFlag FINAL extends `zc.f` @kind class, `java.io.Serializable` @kind interface {
  `uc.r` `zc.f$a.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`zc.f$a` v0 @kind this, `uc.r` v1 @kind object) @signature `Lzc/f$a;.<init>:(Luc/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50a194.  call `<init>`(v0) @signature `Lzc/f;.<init>:()V` @kind direct;
  #L50a19a.  v0.`zc.f$a.o` @type ^`uc.r` := v1 @kind object;
  #L50a19e.  return @kind void;
}
procedure `uc.r` `a`(`zc.f$a` v0 @kind this, `uc.e` v1 @kind object) @signature `Lzc/f$a;.a:(Luc/e;)Luc/r;` @AccessFlag PUBLIC {
    temp;

  #L50a17c.  v1:= v0.`zc.f$a.o` @type ^`uc.r` @kind object;
  #L50a180.  return v1 @kind object;
}
procedure `zc.d` `b`(`zc.f$a` v0 @kind this, `uc.g` v1 @kind object) @signature `Lzc/f$a;.b:(Luc/g;)Lzc/d;` @AccessFlag PUBLIC {
    temp;

  #L50a1b0.  v1:= 0I;
  #L50a1b2.  return v1 @kind object;
}
procedure `java.util.List` `c`(`zc.f$a` v0 @kind this, `uc.g` v1 @kind object) @signature `Lzc/f$a;.c:(Luc/g;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;

  #L50a15c.  v1:= v0.`zc.f$a.o` @type ^`uc.r` @kind object;
  #L50a160.  call temp:= `singletonList`(v1) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L50a166.  v1:= temp @kind object;
  #L50a168.  return v1 @kind object;
}
procedure `boolean` `d`(`zc.f$a` v1 @kind this) @signature `Lzc/f$a;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50a0b0.  v0:= 1I;
  #L50a0b2.  return v0;
}
procedure `boolean` `e`(`zc.f$a` v0 @kind this, `uc.g` v1 @kind object, `uc.r` v2 @kind object) @signature `Lzc/f$a;.e:(Luc/g;Luc/r;)Z` @AccessFlag PUBLIC {
    temp;

  #L50a0c4.  v1:= v0.`zc.f$a.o` @type ^`uc.r` @kind object;
  #L50a0c8.  call temp:= `equals`(v1, v2) @signature `Luc/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L50a0ce.  v1:= temp;
  #L50a0d0.  return v1;
}
procedure `boolean` `equals`(`zc.f$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lzc/f$a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50a03c.  v0:= 1I;
  #L50a03e.  if v4 != v5 then goto L50a044;
  #L50a042.  return v0;
  #L50a044.  v1:= instanceof @variable v5 @type ^`zc.f$a` @kind boolean;
  #L50a048.  if v1 == 0 then goto L50a062;
  #L50a04c.  v0:= v4.`zc.f$a.o` @type ^`uc.r` @kind object;
  #L50a050.  v5:= (`zc.f$a`) v5 @kind object;
  #L50a054.  v5:= v5.`zc.f$a.o` @type ^`uc.r` @kind object;
  #L50a058.  call temp:= `equals`(v0, v5) @signature `Luc/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L50a05e.  v5:= temp;
  #L50a060.  return v5;
  #L50a062.  v1:= instanceof @variable v5 @type ^`zc.b` @kind boolean;
  #L50a066.  v2:= 0I;
  #L50a068.  if v1 == 0 then goto L50a09e;
  #L50a06c.  v5:= (`zc.b`) v5 @kind object;
  #L50a070.  call temp:= `d`(v5) @signature `Lzc/b;.d:()Z` @kind virtual;
  #L50a076.  v1:= temp;
  #L50a078.  if v1 == 0 then goto L50a09a;
  #L50a07c.  v1:= v4.`zc.f$a.o` @type ^`uc.r` @kind object;
  #L50a080.  v3:= `@@uc.e.q` @type ^`uc.e` @kind object;
  #L50a084.  call temp:= `a`(v5, v3) @signature `Lzc/b;.a:(Luc/e;)Luc/r;` @kind virtual;
  #L50a08a.  v5:= temp @kind object;
  #L50a08c.  call temp:= `equals`(v1, v5) @signature `Luc/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L50a092.  v5:= temp;
  #L50a094.  if v5 == 0 then goto L50a09a;
  #L50a098.  goto L50a09c;
  #L50a09a.  v0:= 0I;
  #L50a09c.  return v0;
  #L50a09e.  return v2;
}
procedure `int` `hashCode`(`zc.f$a` v2 @kind this) @signature `Lzc/f$a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50a0e4.  v0:= v2.`zc.f$a.o` @type ^`uc.r` @kind object;
  #L50a0e8.  call temp:= `hashCode`(v0) @signature `Luc/r;.hashCode:()I` @kind virtual;
  #L50a0ee.  v0:= temp;
  #L50a0f0.  v0:= v0 + 31;
  #L50a0f4.  v0:= v0 ^~ 1;
  #L50a0f8.  v0:= v0 ^~ 1;
  #L50a0fc.  v1:= v2.`zc.f$a.o` @type ^`uc.r` @kind object;
  #L50a100.  call temp:= `hashCode`(v1) @signature `Luc/r;.hashCode:()I` @kind virtual;
  #L50a106.  v1:= temp;
  #L50a108.  v1:= v1 + 31;
  #L50a10c.  v0:= v0 ^~ v1 @kind int;
  #L50a10e.  v0:= v0 ^~ 1;
  #L50a112.  return v0;
}
procedure `java.lang.String` `toString`(`zc.f$a` v2 @kind this) @signature `Lzc/f$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50a124.  v0:= new `java.lang.StringBuilder`;
  #L50a128.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50a12e.  v1:= "FixedRules:" @kind object;
  #L50a132.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a138.  v1:= v2.`zc.f$a.o` @type ^`uc.r` @kind object;
  #L50a13c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a142.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50a148.  v0:= temp @kind object;
  #L50a14a.  return v0 @kind object;
}
