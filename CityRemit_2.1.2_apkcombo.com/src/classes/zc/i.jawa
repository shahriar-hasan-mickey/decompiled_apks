record `zc.i` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `java.util.concurrent.CopyOnWriteArrayList` `@@zc.i.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@zc.i.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lzc/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50a3d8.  v0:= new `java.util.concurrent.CopyOnWriteArrayList`;
  #L50a3dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/CopyOnWriteArrayList;.<init>:()V` @kind direct;
  #L50a3e2.  `@@zc.i.a` @type ^`java.util.concurrent.CopyOnWriteArrayList` := v0 @kind object;
  #L50a3e6.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L50a3ea.  v1:= 512I;
  #L50a3ee.  v2:= 0.75F;
  #L50a3f2.  v3:= 2I;
  #L50a3f4.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:(IFI)V` @kind direct;
  #L50a3fa.  `@@zc.i.b` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L50a3fe.  call `a`() @signature `Lzc/h;.a:()V` @kind static;
  #L50a404.  return @kind void;
}
procedure `void` `<init>`(`zc.i` v0 @kind this) @signature `Lzc/i;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L50a418.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50a41e.  return @kind void;
}
procedure `java.util.Set` `a`() @signature `Lzc/i;.a:()Ljava/util/Set;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50a3b0.  v0:= `@@zc.i.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L50a3b4.  call temp:= `keySet`(v0) @signature `Ljava/util/concurrent/ConcurrentMap;.keySet:()Ljava/util/Set;` @kind interface;
  #L50a3ba.  v0:= temp @kind object;
  #L50a3bc.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L50a3c2.  v0:= temp @kind object;
  #L50a3c4.  return v0 @kind object;
}
procedure `zc.i` `b`(`java.lang.String` v3 @kind object) @signature `Lzc/i;.b:(Ljava/lang/String;)Lzc/i;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L50a520.  v0:= `@@zc.i.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L50a524.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50a52a.  v1:= temp @kind object;
  #L50a52c.  v1:= (`zc.i`) v1 @kind object;
  #L50a530.  if v1 != 0 then goto L50a57e;
  #L50a534.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentMap;.isEmpty:()Z` @kind interface;
  #L50a53a.  v0:= temp;
  #L50a53c.  if v0 == 0 then goto L50a550;
  #L50a540.  v3:= new `zc.g`;
  #L50a544.  v0:= "No time-zone data files registered" @kind object;
  #L50a548.  call `<init>`(v3, v0) @signature `Lzc/g;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a54e.  throw v3;
  #L50a550.  v0:= new `zc.g`;
  #L50a554.  v1:= new `java.lang.StringBuilder`;
  #L50a558.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50a55e.  v2:= "Unknown time-zone ID: " @kind object;
  #L50a562.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a568.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a56e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50a574.  v3:= temp @kind object;
  #L50a576.  call `<init>`(v0, v3) @signature `Lzc/g;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a57c.  throw v0;
  #L50a57e.  return v1 @kind object;
}
procedure `zc.f` `c`(`java.lang.String` v1 @kind object, `boolean` v2 ) @signature `Lzc/i;.c:(Ljava/lang/String;Z)Lzc/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50a4f4.  v0:= "zoneId" @kind object;
  #L50a4f8.  call temp:= `i`(v1, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L50a4fe.  call temp:= `b`(v1) @signature `Lzc/i;.b:(Ljava/lang/String;)Lzc/i;` @kind static;
  #L50a504.  v0:= temp @kind object;
  #L50a506.  call temp:= `d`(v0, v1, v2) @signature `Lzc/i;.d:(Ljava/lang/String;Z)Lzc/f;` @kind virtual;
  #L50a50c.  v1:= temp @kind object;
  #L50a50e.  return v1 @kind object;
}
procedure `void` `f`(`zc.i` v1 @kind object) @signature `Lzc/i;.f:(Lzc/i;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50a430.  v0:= "provider" @kind object;
  #L50a434.  call temp:= `i`(v1, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L50a43a.  call `g`(v1) @signature `Lzc/i;.g:(Lzc/i;)V` @kind static;
  #L50a440.  v0:= `@@zc.i.a` @type ^`java.util.concurrent.CopyOnWriteArrayList` @kind object;
  #L50a444.  call temp:= `add`(v0, v1) @signature `Ljava/util/concurrent/CopyOnWriteArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L50a44a.  return @kind void;
}
procedure `void` `g`(`zc.i` v4 @kind object) @signature `Lzc/i;.g:(Lzc/i;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50a45c.  call temp:= `e`(v4) @signature `Lzc/i;.e:()Ljava/util/Set;` @kind virtual;
  #L50a462.  v0:= temp @kind object;
  #L50a464.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L50a46a.  v0:= temp @kind object;
  #L50a46c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50a472.  v1:= temp;
  #L50a474.  if v1 == 0 then goto L50a4e2;
  #L50a478.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L50a47e.  v1:= temp @kind object;
  #L50a480.  v1:= (`java.lang.String`) v1 @kind object;
  #L50a484.  v2:= "zoneId" @kind object;
  #L50a488.  call temp:= `i`(v1, v2) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L50a48e.  v2:= `@@zc.i.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L50a492.  call temp:= `putIfAbsent`(v2, v1, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50a498.  v2:= temp @kind object;
  #L50a49a.  v2:= (`zc.i`) v2 @kind object;
  #L50a49e.  if v2 != 0 then goto L50a4a4;
  #L50a4a2.  goto L50a46c;
  #L50a4a4.  v0:= new `zc.g`;
  #L50a4a8.  v2:= new `java.lang.StringBuilder`;
  #L50a4ac.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50a4b2.  v3:= "Unable to register zone as one already registered with that ID: " @kind object;
  #L50a4b6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a4bc.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a4c2.  v1:= ", currently loading from provider: " @kind object;
  #L50a4c6.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a4cc.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a4d2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50a4d8.  v4:= temp @kind object;
  #L50a4da.  call `<init>`(v0, v4) @signature `Lzc/g;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a4e0.  throw v0;
  #L50a4e2.  return @kind void;
}
procedure `zc.f` `d`(`java.lang.String` v0 @kind object, `boolean` v1 ) @signature `Lzc/i;.d:(Ljava/lang/String;Z)Lzc/f;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.Set` `e`() @signature `Lzc/i;.e:()Ljava/util/Set;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
