record `zc.h` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `java.util.concurrent.atomic.AtomicBoolean` `@@zc.h.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@zc.h.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lzc/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L50a2ac.  v0:= new `zc.h$a`;
  #L50a2b0.  call `<init>`(v0) @signature `Lzc/h$a;.<init>:()V` @kind direct;
  #L50a2b6.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L50a2ba.  v1:= 0I;
  #L50a2bc.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L50a2c2.  `@@zc.h.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L50a2c6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L50a2ca.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L50a2d0.  `@@zc.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L50a2d4.  return @kind void;
}
procedure `void` `<init>`(`zc.h` v0 @kind this) @signature `Lzc/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L50a2e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50a2ee.  return @kind void;
}
procedure `void` `a`() @signature `Lzc/h;.a:()V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L50a300.  v0:= `@@zc.h.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L50a304.  v1:= 1I;
  #L50a306.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.getAndSet:(Z)Z` @kind virtual;
  #L50a30c.  v0:= temp;
  #L50a30e.  if v0 != 0 then goto L50a33c;
  #L50a312.  v0:= `@@zc.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50a316.  v1:= 0I;
  #L50a318.  v2:= new `zc.h$b`;
  #L50a31c.  call `<init>`(v2) @signature `Lzc/h$b;.<init>:()V` @kind direct;
  #L50a322.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50a328.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50a32e.  v0:= temp @kind object;
  #L50a330.  v0:= (`zc.h`) v0 @kind object;
  #L50a334.  call `b`(v0) @signature `Lzc/h;.b:()V` @kind virtual;
  #L50a33a.  return @kind void;
  #L50a33c.  v0:= new `java.lang.IllegalStateException`;
  #L50a340.  v1:= "Already initialized" @kind object;
  #L50a344.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a34a.  throw v0;
}
procedure `void` `c`(`zc.h` v2 @kind object) @signature `Lzc/h;.c:(Lzc/h;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50a35c.  v0:= `@@zc.h.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L50a360.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L50a366.  v0:= temp;
  #L50a368.  if v0 != 0 then goto L50a390;
  #L50a36c.  v0:= `@@zc.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50a370.  v1:= 0I;
  #L50a372.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50a378.  v2:= temp;
  #L50a37a.  if v2 == 0 then goto L50a380;
  #L50a37e.  return @kind void;
  #L50a380.  v2:= new `java.lang.IllegalStateException`;
  #L50a384.  v0:= "Initializer was already set, possibly with a default during initialization" @kind object;
  #L50a388.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a38e.  throw v2;
  #L50a390.  v2:= new `java.lang.IllegalStateException`;
  #L50a394.  v0:= "Already initialized" @kind object;
  #L50a398.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a39e.  throw v2;
}
procedure `void` `b`() @signature `Lzc/h;.b:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
