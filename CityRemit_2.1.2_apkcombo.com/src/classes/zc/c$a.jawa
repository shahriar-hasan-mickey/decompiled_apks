record `zc.c$a` @kind class @AccessFlag  {
  `java.lang.String` `zc.c$a.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String`[] `zc.c$a.b` @AccessFlag PRIVATE_FINAL;
  `short`[] `zc.c$a.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `zc.c$a.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`zc.c$a` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String`[] v2 @kind object, `short`[] v3 @kind object, `java.util.concurrent.atomic.AtomicReferenceArray` v4 @kind object) @signature `Lzc/c$a;.<init>:(Ljava/lang/String;[Ljava/lang/String;[SLjava/util/concurrent/atomic/AtomicReferenceArray;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L508f64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L508f6a.  v0.`zc.c$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v4 @kind object;
  #L508f6e.  v0.`zc.c$a.a` @type ^`java.lang.String` := v1 @kind object;
  #L508f72.  v0.`zc.c$a.b` @type ^`java.lang.String`[] := v2 @kind object;
  #L508f76.  v0.`zc.c$a.c` @type ^`short`[] := v3 @kind object;
  #L508f7a.  return @kind void;
}
procedure `java.lang.String` `a`(`zc.c$a` v0 @kind object) @signature `Lzc/c$a;.a:(Lzc/c$a;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L508f34.  v0:= v0.`zc.c$a.a` @type ^`java.lang.String` @kind object;
  #L508f38.  return v0 @kind object;
}
procedure `zc.f` `b`(`zc.c$a` v3 @kind this, `short` v4 ) @signature `Lzc/c$a;.b:(S)Lzc/f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L508f8c.  v0:= v3.`zc.c$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L508f90.  call temp:= `get`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L508f96.  v0:= temp @kind object;
  #L508f98.  v1:= instanceof @variable v0 @type ^`byte`[] @kind boolean;
  #L508f9c.  if v1 == 0 then goto L508fca;
  #L508fa0.  v0:= (`byte`[]) v0 @kind object;
  #L508fa4.  v1:= new `java.io.DataInputStream`;
  #L508fa8.  v2:= new `java.io.ByteArrayInputStream`;
  #L508fac.  call `<init>`(v2, v0) @signature `Ljava/io/ByteArrayInputStream;.<init>:([B)V` @kind direct;
  #L508fb2.  call `<init>`(v1, v2) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L508fb8.  call temp:= `a`(v1) @signature `Lzc/a;.a:(Ljava/io/DataInput;)Ljava/lang/Object;` @kind static;
  #L508fbe.  v0:= temp @kind object;
  #L508fc0.  v1:= v3.`zc.c$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L508fc4.  call `set`(v1, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L508fca.  v0:= (`zc.f`) v0 @kind object;
  #L508fce.  return v0 @kind object;
}
procedure `zc.f` `c`(`zc.c$a` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lzc/c$a;.c:(Ljava/lang/String;)Lzc/f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L508fe0.  v0:= v4.`zc.c$a.b` @type ^`java.lang.String`[] @kind object;
  #L508fe4.  call temp:= `binarySearch`(v0, v5) @signature `Ljava/util/Arrays;.binarySearch:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L508fea.  v0:= temp;
  #L508fec.  if v0 >= 0 then goto L508ff4;
  #L508ff0.  v5:= 0I;
  #L508ff2.  return v5 @kind object;
  #L508ff4.  v1:= v4.`zc.c$a.c` @type ^`short`[] @kind object;
  #L508ff8.  v0:= v1[v0] @kind short;
  #L508ffc.  call temp:= `b`(v4, v0) @signature `Lzc/c$a;.b:(S)Lzc/f;` @kind virtual;
  #L509002.  v5:= temp @kind object;
  #L509004.  return v5 @kind object;
  #L509006.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L509008.  v1:= new `zc.g`;
  #L50900c.  v2:= new `java.lang.StringBuilder`;
  #L509010.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L509016.  v3:= "Invalid binary time-zone data: TZDB:" @kind object;
  #L50901a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509020.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509026.  v5:= ", version: " @kind object;
  #L50902a.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509030.  v5:= v4.`zc.c$a.a` @type ^`java.lang.String` @kind object;
  #L509034.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50903a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L509040.  v5:= temp @kind object;
  #L509042.  call `<init>`(v1, v5, v0) @signature `Lzc/g;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L509048.  throw v1;
  catch `java.lang.Exception` @[L508ff4..L509004] goto L509006;
}
procedure `java.lang.String` `toString`(`zc.c$a` v1 @kind this) @signature `Lzc/c$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L508f4c.  v0:= v1.`zc.c$a.a` @type ^`java.lang.String` @kind object;
  #L508f50.  return v0 @kind object;
}
