record `zc.c` @kind class @AccessFlag PUBLIC_FINAL extends `zc.i` @kind class {
  `java.util.List` `zc.c.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ConcurrentNavigableMap` `zc.c.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`zc.c` v2 @kind this, `java.io.InputStream` v3 @kind object) @signature `Lzc/c;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5092a4.  call `<init>`(v2) @signature `Lzc/i;.<init>:()V` @kind direct;
  #L5092aa.  v0:= new `java.util.concurrent.ConcurrentSkipListMap`;
  #L5092ae.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentSkipListMap;.<init>:()V` @kind direct;
  #L5092b4.  v2.`zc.c.d` @type ^`java.util.concurrent.ConcurrentNavigableMap` := v0 @kind object;
  #L5092b8.  v0:= new `java.util.concurrent.CopyOnWriteArraySet`;
  #L5092bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/CopyOnWriteArraySet;.<init>:()V` @kind direct;
  #L5092c2.  call temp:= `h`(v2, v3) @signature `Lzc/c;.h:(Ljava/io/InputStream;)Z` @kind direct;
  #L5092c8.  return @kind void;
  #L5092ca.  v3:= Exception @type ^`java.lang.Exception` @kind object;
  #L5092cc.  v0:= new `zc.g`;
  #L5092d0.  v1:= "Unable to load TZDB time-zone rules" @kind object;
  #L5092d4.  call `<init>`(v0, v1, v3) @signature `Lzc/g;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L5092da.  throw v0;
  catch `java.lang.Exception` @[L5092c2..L5092c8] goto L5092ca;
}
procedure `boolean` `h`(`zc.c` v3 @kind this, `java.io.InputStream` v4 @kind object) @signature `Lzc/c;.h:(Ljava/io/InputStream;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L50906c.  call temp:= `i`(v3, v4) @signature `Lzc/c;.i:(Ljava/io/InputStream;)Ljava/lang/Iterable;` @kind direct;
  #L509072.  v4:= temp @kind object;
  #L509074.  call temp:= `iterator`(v4) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L50907a.  v4:= temp @kind object;
  #L50907c.  v0:= 0I;
  #L50907e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L509084.  v1:= temp;
  #L509086.  if v1 == 0 then goto L50910a;
  #L50908a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L509090.  v0:= temp @kind object;
  #L509092.  v0:= (`zc.c$a`) v0 @kind object;
  #L509096.  v1:= v3.`zc.c.d` @type ^`java.util.concurrent.ConcurrentNavigableMap` @kind object;
  #L50909a.  call temp:= `a`(v0) @signature `Lzc/c$a;.a:(Lzc/c$a;)Ljava/lang/String;` @kind static;
  #L5090a0.  v2:= temp @kind object;
  #L5090a2.  call temp:= `putIfAbsent`(v1, v2, v0) @signature `Ljava/util/concurrent/ConcurrentNavigableMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L5090a8.  v1:= temp @kind object;
  #L5090aa.  v1:= (`zc.c$a`) v1 @kind object;
  #L5090ae.  if v1 == 0 then goto L509106;
  #L5090b2.  call temp:= `a`(v1) @signature `Lzc/c$a;.a:(Lzc/c$a;)Ljava/lang/String;` @kind static;
  #L5090b8.  v1:= temp @kind object;
  #L5090ba.  call temp:= `a`(v0) @signature `Lzc/c$a;.a:(Lzc/c$a;)Ljava/lang/String;` @kind static;
  #L5090c0.  v2:= temp @kind object;
  #L5090c2.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L5090c8.  v1:= temp;
  #L5090ca.  if v1 == 0 then goto L5090d0;
  #L5090ce.  goto L509106;
  #L5090d0.  v4:= new `zc.g`;
  #L5090d4.  v1:= new `java.lang.StringBuilder`;
  #L5090d8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5090de.  v2:= "Data already loaded for TZDB time-zone rules version: " @kind object;
  #L5090e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5090e8.  call temp:= `a`(v0) @signature `Lzc/c$a;.a:(Lzc/c$a;)Ljava/lang/String;` @kind static;
  #L5090ee.  v0:= temp @kind object;
  #L5090f0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5090f6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5090fc.  v0:= temp @kind object;
  #L5090fe.  call `<init>`(v4, v0) @signature `Lzc/g;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509104.  throw v4;
  #L509106.  v0:= 1I;
  #L509108.  goto L50907e;
  #L50910a.  return v0;
}
procedure `java.lang.Iterable` `i`(`zc.c` v12 @kind this, `java.io.InputStream` v13 @kind object) @signature `Lzc/c;.i:(Ljava/io/InputStream;)Ljava/lang/Iterable;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L50911c.  v0:= new `java.io.DataInputStream`;
  #L509120.  call `<init>`(v0, v13) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L509126.  call temp:= `readByte`(v0) @signature `Ljava/io/DataInputStream;.readByte:()B` @kind virtual;
  #L50912c.  v13:= temp;
  #L50912e.  v1:= "File format not recognised" @kind object;
  #L509132.  v2:= 1I;
  #L509134.  if v13 != v2 then goto L50924e;
  #L509138.  call temp:= `readUTF`(v0) @signature `Ljava/io/DataInputStream;.readUTF:()Ljava/lang/String;` @kind virtual;
  #L50913e.  v13:= temp @kind object;
  #L509140.  v2:= "TZDB" @kind object;
  #L509144.  call temp:= `equals`(v2, v13) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L50914a.  v13:= temp;
  #L50914c.  if v13 == 0 then goto L509242;
  #L509150.  call temp:= `readShort`(v0) @signature `Ljava/io/DataInputStream;.readShort:()S` @kind virtual;
  #L509156.  v13:= temp;
  #L509158.  v1:= new `java.lang.String`[v13];
  #L50915c.  v2:= 0I;
  #L50915e.  v3:= 0I;
  #L509160.  if v3 >= v13 then goto L509176;
  #L509164.  call temp:= `readUTF`(v0) @signature `Ljava/io/DataInputStream;.readUTF:()Ljava/lang/String;` @kind virtual;
  #L50916a.  v4:= temp @kind object;
  #L50916c.  v1[v3]:= v4 @kind object;
  #L509170.  v3:= v3 + 1;
  #L509174.  goto L509160;
  #L509176.  call temp:= `readShort`(v0) @signature `Ljava/io/DataInputStream;.readShort:()S` @kind virtual;
  #L50917c.  v3:= temp;
  #L50917e.  v4:= new `java.lang.String`[v3];
  #L509182.  v5:= 0I;
  #L509184.  if v5 >= v3 then goto L50919a;
  #L509188.  call temp:= `readUTF`(v0) @signature `Ljava/io/DataInputStream;.readUTF:()Ljava/lang/String;` @kind virtual;
  #L50918e.  v6:= temp @kind object;
  #L509190.  v4[v5]:= v6 @kind object;
  #L509194.  v5:= v5 + 1;
  #L509198.  goto L509184;
  #L50919a.  call temp:= `asList`(v4) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L5091a0.  v3:= temp @kind object;
  #L5091a2.  v12.`zc.c.c` @type ^`java.util.List` := v3 @kind object;
  #L5091a6.  call temp:= `readShort`(v0) @signature `Ljava/io/DataInputStream;.readShort:()S` @kind virtual;
  #L5091ac.  v3:= temp;
  #L5091ae.  v5:= new `java.lang.Object`[v3];
  #L5091b2.  v6:= 0I;
  #L5091b4.  if v6 >= v3 then goto L5091d4;
  #L5091b8.  call temp:= `readShort`(v0) @signature `Ljava/io/DataInputStream;.readShort:()S` @kind virtual;
  #L5091be.  v7:= temp;
  #L5091c0.  v7:= new `byte`[v7];
  #L5091c4.  call `readFully`(v0, v7) @signature `Ljava/io/DataInputStream;.readFully:([B)V` @kind virtual;
  #L5091ca.  v5[v6]:= v7 @kind object;
  #L5091ce.  v6:= v6 + 1;
  #L5091d2.  goto L5091b4;
  #L5091d4.  v3:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L5091d8.  call `<init>`(v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L5091de.  v5:= new `java.util.HashSet`;
  #L5091e2.  call `<init>`(v5, v13) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L5091e8.  v6:= 0I;
  #L5091ea.  if v6 >= v13 then goto L509240;
  #L5091ee.  call temp:= `readShort`(v0) @signature `Ljava/io/DataInputStream;.readShort:()S` @kind virtual;
  #L5091f4.  v7:= temp;
  #L5091f6.  v8:= new `java.lang.String`[v7];
  #L5091fa.  v9:= new `short`[v7];
  #L5091fe.  v10:= 0I;
  #L509200.  if v10 >= v7 then goto L509226;
  #L509204.  call temp:= `readShort`(v0) @signature `Ljava/io/DataInputStream;.readShort:()S` @kind virtual;
  #L50920a.  v11:= temp;
  #L50920c.  v11:= v4[v11] @kind object;
  #L509210.  v8[v10]:= v11 @kind object;
  #L509214.  call temp:= `readShort`(v0) @signature `Ljava/io/DataInputStream;.readShort:()S` @kind virtual;
  #L50921a.  v11:= temp;
  #L50921c.  v9[v10]:= v11 @kind short;
  #L509220.  v10:= v10 + 1;
  #L509224.  goto L509200;
  #L509226.  v7:= new `zc.c$a`;
  #L50922a.  v10:= v1[v6] @kind object;
  #L50922e.  call `<init>`(v7, v10, v8, v9, v3) @signature `Lzc/c$a;.<init>:(Ljava/lang/String;[Ljava/lang/String;[SLjava/util/concurrent/atomic/AtomicReferenceArray;)V` @kind direct;
  #L509234.  call temp:= `add`(v5, v7) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L50923a.  v6:= v6 + 1;
  #L50923e.  goto L5091ea;
  #L509240.  return v5 @kind object;
  #L509242.  v13:= new `java.io.StreamCorruptedException`;
  #L509246.  call `<init>`(v13, v1) @signature `Ljava/io/StreamCorruptedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50924c.  throw v13;
  #L50924e.  v13:= new `java.io.StreamCorruptedException`;
  #L509252.  call `<init>`(v13, v1) @signature `Ljava/io/StreamCorruptedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509258.  throw v13;
}
procedure `zc.f` `d`(`zc.c` v2 @kind this, `java.lang.String` v3 @kind object, `boolean` v4 ) @signature `Lzc/c;.d:(Ljava/lang/String;Z)Lzc/f;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L5092fc.  v4:= "zoneId" @kind object;
  #L509300.  call temp:= `i`(v3, v4) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L509306.  v4:= v2.`zc.c.d` @type ^`java.util.concurrent.ConcurrentNavigableMap` @kind object;
  #L50930a.  call temp:= `lastEntry`(v4) @signature `Ljava/util/concurrent/ConcurrentNavigableMap;.lastEntry:()Ljava/util/Map$Entry;` @kind interface;
  #L509310.  v4:= temp @kind object;
  #L509312.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L509318.  v4:= temp @kind object;
  #L50931a.  v4:= (`zc.c$a`) v4 @kind object;
  #L50931e.  call temp:= `c`(v4, v3) @signature `Lzc/c$a;.c:(Ljava/lang/String;)Lzc/f;` @kind virtual;
  #L509324.  v4:= temp @kind object;
  #L509326.  if v4 == 0 then goto L50932c;
  #L50932a.  return v4 @kind object;
  #L50932c.  v4:= new `zc.g`;
  #L509330.  v0:= new `java.lang.StringBuilder`;
  #L509334.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50933a.  v1:= "Unknown time-zone ID: " @kind object;
  #L50933e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509344.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50934a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L509350.  v3:= temp @kind object;
  #L509352.  call `<init>`(v4, v3) @signature `Lzc/g;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509358.  throw v4;
}
procedure `java.util.Set` `e`(`zc.c` v2 @kind this) @signature `Lzc/c;.e:()Ljava/util/Set;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L509284.  v0:= new `java.util.HashSet`;
  #L509288.  v1:= v2.`zc.c.c` @type ^`java.util.List` @kind object;
  #L50928c.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L509292.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`zc.c` v1 @kind this) @signature `Lzc/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50926c.  v0:= "TZDB" @kind object;
  #L509270.  return v0 @kind object;
}
