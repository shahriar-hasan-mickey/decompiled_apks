record `zc.d` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Comparable` @kind interface, `java.io.Serializable` @kind interface {
  `uc.g` `zc.d.o` @AccessFlag PRIVATE_FINAL;
  `uc.r` `zc.d.p` @AccessFlag PRIVATE_FINAL;
  `uc.r` `zc.d.q` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`zc.d` v1 @kind this, `long` v2 , `uc.r` v4 @kind object, `uc.r` v5 @kind object) @signature `Lzc/d;.<init>:(JLuc/r;Luc/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L509f64.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L509f6a.  v0:= 0I;
  #L509f6c.  call temp:= `A0`(v2, v0, v4) @signature `Luc/g;.A0:(JILuc/r;)Luc/g;` @kind static;
  #L509f72.  v2:= temp @kind object;
  #L509f74.  v1.`zc.d.o` @type ^`uc.g` := v2 @kind object;
  #L509f78.  v1.`zc.d.p` @type ^`uc.r` := v4 @kind object;
  #L509f7c.  v1.`zc.d.q` @type ^`uc.r` := v5 @kind object;
  #L509f80.  return @kind void;
}
procedure `void` `<init>`(`zc.d` v0 @kind this, `uc.g` v1 @kind object, `uc.r` v2 @kind object, `uc.r` v3 @kind object) @signature `Lzc/d;.<init>:(Luc/g;Luc/r;Luc/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L509f94.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L509f9a.  v0.`zc.d.o` @type ^`uc.g` := v1 @kind object;
  #L509f9e.  v0.`zc.d.p` @type ^`uc.r` := v2 @kind object;
  #L509fa2.  v0.`zc.d.q` @type ^`uc.r` := v3 @kind object;
  #L509fa6.  return @kind void;
}
procedure `int` `i`(`zc.d` v2 @kind this) @signature `Lzc/d;.i:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L509d10.  call temp:= `k`(v2) @signature `Lzc/d;.k:()Luc/r;` @kind virtual;
  #L509d16.  v0:= temp @kind object;
  #L509d18.  call temp:= `S`(v0) @signature `Luc/r;.S:()I` @kind virtual;
  #L509d1e.  v0:= temp;
  #L509d20.  call temp:= `o`(v2) @signature `Lzc/d;.o:()Luc/r;` @kind virtual;
  #L509d26.  v1:= temp @kind object;
  #L509d28.  call temp:= `S`(v1) @signature `Luc/r;.S:()I` @kind virtual;
  #L509d2e.  v1:= temp;
  #L509d30.  v0:= v0 - v1 @kind int;
  #L509d32.  return v0;
}
procedure `zc.d` `t`(`java.io.DataInput` v4 @kind object) @signature `Lzc/d;.t:(Ljava/io/DataInput;)Lzc/d;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L509fec.  call temp:= `b`(v4) @signature `Lzc/a;.b:(Ljava/io/DataInput;)J` @kind static;
  #L509ff2.  v0:= temp @kind wide;
  #L509ff4.  call temp:= `d`(v4) @signature `Lzc/a;.d:(Ljava/io/DataInput;)Luc/r;` @kind static;
  #L509ffa.  v2:= temp @kind object;
  #L509ffc.  call temp:= `d`(v4) @signature `Lzc/a;.d:(Ljava/io/DataInput;)Luc/r;` @kind static;
  #L50a002.  v4:= temp @kind object;
  #L50a004.  call temp:= `equals`(v2, v4) @signature `Luc/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L50a00a.  v3:= temp;
  #L50a00c.  if v3 != 0 then goto L50a01c;
  #L50a010.  v3:= new `zc.d`;
  #L50a014.  call `<init>`(v3, v0, v2, v4) @signature `Lzc/d;.<init>:(JLuc/r;Luc/r;)V` @kind direct;
  #L50a01a.  return v3 @kind object;
  #L50a01c.  v4:= new `java.lang.IllegalArgumentException`;
  #L50a020.  v0:= "Offsets must not be equal" @kind object;
  #L50a024.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a02a.  throw v4;
}
procedure `java.lang.Object` `writeReplace`(`zc.d` v2 @kind this) @signature `Lzc/d;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L509d8c.  v0:= new `zc.a`;
  #L509d90.  v1:= 2I;
  #L509d92.  call `<init>`(v0, v1, v2) @signature `Lzc/a;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L509d98.  return v0 @kind object;
}
procedure `int` `c`(`zc.d` v1 @kind this, `zc.d` v2 @kind object) @signature `Lzc/d;.c:(Lzc/d;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L509ce4.  call temp:= `j`(v1) @signature `Lzc/d;.j:()Luc/e;` @kind virtual;
  #L509cea.  v0:= temp @kind object;
  #L509cec.  call temp:= `j`(v2) @signature `Lzc/d;.j:()Luc/e;` @kind virtual;
  #L509cf2.  v2:= temp @kind object;
  #L509cf4.  call temp:= `T`(v0, v2) @signature `Luc/e;.T:(Luc/e;)I` @kind virtual;
  #L509cfa.  v2:= temp;
  #L509cfc.  return v2;
}
procedure `int` `compareTo`(`zc.d` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lzc/d;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L509cc4.  v1:= (`zc.d`) v1 @kind object;
  #L509cc8.  call temp:= `c`(v0, v1) @signature `Lzc/d;.c:(Lzc/d;)I` @kind virtual;
  #L509cce.  v1:= temp;
  #L509cd0.  return v1;
}
procedure `uc.g` `d`(`zc.d` v3 @kind this) @signature `Lzc/d;.d:()Luc/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L509ef4.  v0:= v3.`zc.d.o` @type ^`uc.g` @kind object;
  #L509ef8.  call temp:= `i`(v3) @signature `Lzc/d;.i:()I` @kind direct;
  #L509efe.  v1:= temp;
  #L509f00.  v1:= (`long`) v1 @kind i2l;
  #L509f02.  call temp:= `I0`(v0, v1) @signature `Luc/g;.I0:(J)Luc/g;` @kind virtual;
  #L509f08.  v0:= temp @kind object;
  #L509f0a.  return v0 @kind object;
}
procedure `uc.g` `e`(`zc.d` v1 @kind this) @signature `Lzc/d;.e:()Luc/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L509f1c.  v0:= v1.`zc.d.o` @type ^`uc.g` @kind object;
  #L509f20.  return v0 @kind object;
}
procedure `boolean` `equals`(`zc.d` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lzc/d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L509c1c.  v0:= 1I;
  #L509c1e.  if v5 != v4 then goto L509c24;
  #L509c22.  return v0;
  #L509c24.  v1:= instanceof @variable v5 @type ^`zc.d` @kind boolean;
  #L509c28.  v2:= 0I;
  #L509c2a.  if v1 == 0 then goto L509c74;
  #L509c2e.  v5:= (`zc.d`) v5 @kind object;
  #L509c32.  v1:= v4.`zc.d.o` @type ^`uc.g` @kind object;
  #L509c36.  v3:= v5.`zc.d.o` @type ^`uc.g` @kind object;
  #L509c3a.  call temp:= `equals`(v1, v3) @signature `Luc/g;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L509c40.  v1:= temp;
  #L509c42.  if v1 == 0 then goto L509c70;
  #L509c46.  v1:= v4.`zc.d.p` @type ^`uc.r` @kind object;
  #L509c4a.  v3:= v5.`zc.d.p` @type ^`uc.r` @kind object;
  #L509c4e.  call temp:= `equals`(v1, v3) @signature `Luc/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L509c54.  v1:= temp;
  #L509c56.  if v1 == 0 then goto L509c70;
  #L509c5a.  v1:= v4.`zc.d.q` @type ^`uc.r` @kind object;
  #L509c5e.  v5:= v5.`zc.d.q` @type ^`uc.r` @kind object;
  #L509c62.  call temp:= `equals`(v1, v5) @signature `Luc/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L509c68.  v5:= temp;
  #L509c6a.  if v5 == 0 then goto L509c70;
  #L509c6e.  goto L509c72;
  #L509c70.  v0:= 0I;
  #L509c72.  return v0;
  #L509c74.  return v2;
}
procedure `uc.d` `h`(`zc.d` v2 @kind this) @signature `Lzc/d;.h:()Luc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L509eac.  call temp:= `i`(v2) @signature `Lzc/d;.i:()I` @kind direct;
  #L509eb2.  v0:= temp;
  #L509eb4.  v0:= (`long`) v0 @kind i2l;
  #L509eb6.  call temp:= `j`(v0) @signature `Luc/d;.j:(J)Luc/d;` @kind static;
  #L509ebc.  v0:= temp @kind object;
  #L509ebe.  return v0 @kind object;
}
procedure `int` `hashCode`(`zc.d` v3 @kind this) @signature `Lzc/d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L509d44.  v0:= v3.`zc.d.o` @type ^`uc.g` @kind object;
  #L509d48.  call temp:= `hashCode`(v0) @signature `Luc/g;.hashCode:()I` @kind virtual;
  #L509d4e.  v0:= temp;
  #L509d50.  v1:= v3.`zc.d.p` @type ^`uc.r` @kind object;
  #L509d54.  call temp:= `hashCode`(v1) @signature `Luc/r;.hashCode:()I` @kind virtual;
  #L509d5a.  v1:= temp;
  #L509d5c.  v0:= v0 ^~ v1 @kind int;
  #L509d5e.  v1:= v3.`zc.d.q` @type ^`uc.r` @kind object;
  #L509d62.  call temp:= `hashCode`(v1) @signature `Luc/r;.hashCode:()I` @kind virtual;
  #L509d68.  v1:= temp;
  #L509d6a.  v2:= 16I;
  #L509d6e.  call temp:= `rotateLeft`(v1, v2) @signature `Ljava/lang/Integer;.rotateLeft:(II)I` @kind static;
  #L509d74.  v1:= temp;
  #L509d76.  v0:= v0 ^~ v1 @kind int;
  #L509d78.  return v0;
}
procedure `uc.e` `j`(`zc.d` v2 @kind this) @signature `Lzc/d;.j:()Luc/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L509ed0.  v0:= v2.`zc.d.o` @type ^`uc.g` @kind object;
  #L509ed4.  v1:= v2.`zc.d.p` @type ^`uc.r` @kind object;
  #L509ed8.  call temp:= `g0`(v0, v1) @signature `Lvc/c;.g0:(Luc/r;)Luc/e;` @kind virtual;
  #L509ede.  v0:= temp @kind object;
  #L509ee0.  return v0 @kind object;
}
procedure `uc.r` `k`(`zc.d` v1 @kind this) @signature `Lzc/d;.k:()Luc/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L509f34.  v0:= v1.`zc.d.q` @type ^`uc.r` @kind object;
  #L509f38.  return v0 @kind object;
}
procedure `uc.r` `o`(`zc.d` v1 @kind this) @signature `Lzc/d;.o:()Luc/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L509f4c.  v0:= v1.`zc.d.p` @type ^`uc.r` @kind object;
  #L509f50.  return v0 @kind object;
}
procedure `java.util.List` `r`(`zc.d` v3 @kind this) @signature `Lzc/d;.r:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L509e34.  call temp:= `s`(v3) @signature `Lzc/d;.s:()Z` @kind virtual;
  #L509e3a.  v0:= temp;
  #L509e3c.  if v0 == 0 then goto L509e4a;
  #L509e40.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L509e46.  v0:= temp @kind object;
  #L509e48.  return v0 @kind object;
  #L509e4a.  v0:= 2I;
  #L509e4c.  v0:= new `uc.r`[v0];
  #L509e50.  v1:= 0I;
  #L509e52.  call temp:= `o`(v3) @signature `Lzc/d;.o:()Luc/r;` @kind virtual;
  #L509e58.  v2:= temp @kind object;
  #L509e5a.  v0[v1]:= v2 @kind object;
  #L509e5e.  v1:= 1I;
  #L509e60.  call temp:= `k`(v3) @signature `Lzc/d;.k:()Luc/r;` @kind virtual;
  #L509e66.  v2:= temp @kind object;
  #L509e68.  v0[v1]:= v2 @kind object;
  #L509e6c.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L509e72.  v0:= temp @kind object;
  #L509e74.  return v0 @kind object;
}
procedure `boolean` `s`(`zc.d` v2 @kind this) @signature `Lzc/d;.s:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L509c88.  call temp:= `k`(v2) @signature `Lzc/d;.k:()Luc/r;` @kind virtual;
  #L509c8e.  v0:= temp @kind object;
  #L509c90.  call temp:= `S`(v0) @signature `Luc/r;.S:()I` @kind virtual;
  #L509c96.  v0:= temp;
  #L509c98.  call temp:= `o`(v2) @signature `Lzc/d;.o:()Luc/r;` @kind virtual;
  #L509c9e.  v1:= temp @kind object;
  #L509ca0.  call temp:= `S`(v1) @signature `Luc/r;.S:()I` @kind virtual;
  #L509ca6.  v1:= temp;
  #L509ca8.  if v0 <= v1 then goto L509cb0;
  #L509cac.  v0:= 1I;
  #L509cae.  goto L509cb2;
  #L509cb0.  v0:= 0I;
  #L509cb2.  return v0;
}
procedure `java.lang.String` `toString`(`zc.d` v2 @kind this) @signature `Lzc/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L509dac.  v0:= new `java.lang.StringBuilder`;
  #L509db0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L509db6.  v1:= "Transition[" @kind object;
  #L509dba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509dc0.  call temp:= `s`(v2) @signature `Lzc/d;.s:()Z` @kind virtual;
  #L509dc6.  v1:= temp;
  #L509dc8.  if v1 == 0 then goto L509dd2;
  #L509dcc.  v1:= "Gap" @kind object;
  #L509dd0.  goto L509dd6;
  #L509dd2.  v1:= "Overlap" @kind object;
  #L509dd6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509ddc.  v1:= " at " @kind object;
  #L509de0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509de6.  v1:= v2.`zc.d.o` @type ^`uc.g` @kind object;
  #L509dea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509df0.  v1:= v2.`zc.d.p` @type ^`uc.r` @kind object;
  #L509df4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509dfa.  v1:= " to " @kind object;
  #L509dfe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e04.  v1:= v2.`zc.d.q` @type ^`uc.r` @kind object;
  #L509e08.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e0e.  v1:= 93I;
  #L509e12.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e18.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L509e1e.  v0:= temp @kind object;
  #L509e20.  return v0 @kind object;
}
procedure `long` `v`(`zc.d` v2 @kind this) @signature `Lzc/d;.v:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L509e88.  v0:= v2.`zc.d.o` @type ^`uc.g` @kind object;
  #L509e8c.  v1:= v2.`zc.d.p` @type ^`uc.r` @kind object;
  #L509e90.  call temp:= `f0`(v0, v1) @signature `Lvc/c;.f0:(Luc/r;)J` @kind virtual;
  #L509e96.  v0:= temp @kind wide;
  #L509e98.  return v0 @kind wide;
}
procedure `void` `x`(`zc.d` v2 @kind this, `java.io.DataOutput` v3 @kind object) @signature `Lzc/d;.x:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L509fb8.  call temp:= `v`(v2) @signature `Lzc/d;.v:()J` @kind virtual;
  #L509fbe.  v0:= temp @kind wide;
  #L509fc0.  call `e`(v0, v3) @signature `Lzc/a;.e:(JLjava/io/DataOutput;)V` @kind static;
  #L509fc6.  v0:= v2.`zc.d.p` @type ^`uc.r` @kind object;
  #L509fca.  call `g`(v0, v3) @signature `Lzc/a;.g:(Luc/r;Ljava/io/DataOutput;)V` @kind static;
  #L509fd0.  v0:= v2.`zc.d.q` @type ^`uc.r` @kind object;
  #L509fd4.  call `g`(v0, v3) @signature `Lzc/a;.g:(Luc/r;Ljava/io/DataOutput;)V` @kind static;
  #L509fda.  return @kind void;
}
