record `zc.f` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`zc.f` v0 @kind this) @signature `Lzc/f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50a590.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50a596.  return @kind void;
}
procedure `zc.f` `f`(`uc.r` v1 @kind object) @signature `Lzc/f;.f:(Luc/r;)Lzc/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50a5a8.  v0:= "offset" @kind object;
  #L50a5ac.  call temp:= `i`(v1, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L50a5b2.  v0:= new `zc.f$a`;
  #L50a5b6.  call `<init>`(v0, v1) @signature `Lzc/f$a;.<init>:(Luc/r;)V` @kind direct;
  #L50a5bc.  return v0 @kind object;
}
procedure `uc.r` `a`(`uc.e` v0 @kind object) @signature `Lzc/f;.a:(Luc/e;)Luc/r;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `zc.d` `b`(`uc.g` v0 @kind object) @signature `Lzc/f;.b:(Luc/g;)Lzc/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.List` `c`(`uc.g` v0 @kind object) @signature `Lzc/f;.c:(Luc/g;)Ljava/util/List;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `d`() @signature `Lzc/f;.d:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `e`(`uc.g` v0 @kind object, `uc.r` v1 @kind object) @signature `Lzc/f;.e:(Luc/g;Luc/r;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
