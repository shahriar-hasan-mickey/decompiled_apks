record `r1.b` @kind class @AccessFlag FINAL extends `r1.k` @kind class {
  `long` `r1.b.a` @AccessFlag PRIVATE_FINAL;
  `j1.p` `r1.b.b` @AccessFlag PRIVATE_FINAL;
  `j1.i` `r1.b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`r1.b` v0 @kind this, `long` v1 , `j1.p` v3 @kind object, `j1.i` v4 @kind object) @signature `Lr1/b;.<init>:(JLj1/p;Lj1/i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43138c.  call `<init>`(v0) @signature `Lr1/k;.<init>:()V` @kind direct;
  #L431392.  v0.`r1.b.a` @type ^`long` := v1 @kind wide;
  #L431396.  v1:= "Null transportContext" @kind object;
  #L43139a.  call temp:= `requireNonNull`(v3, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4313a0.  v0.`r1.b.b` @type ^`j1.p` := v3 @kind object;
  #L4313a4.  v1:= "Null event" @kind object;
  #L4313a8.  call temp:= `requireNonNull`(v4, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4313ae.  v0.`r1.b.c` @type ^`j1.i` := v4 @kind object;
  #L4313b2.  return @kind void;
}
procedure `j1.i` `b`(`r1.b` v1 @kind this) @signature `Lr1/b;.b:()Lj1/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4312d8.  v0:= v1.`r1.b.c` @type ^`j1.i` @kind object;
  #L4312dc.  return v0 @kind object;
}
procedure `long` `c`(`r1.b` v2 @kind this) @signature `Lr1/b;.c:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431374.  v0:= v2.`r1.b.a` @type ^`long` @kind wide;
  #L431378.  return v0 @kind wide;
}
procedure `j1.p` `d`(`r1.b` v1 @kind this) @signature `Lr1/b;.d:()Lj1/p;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4312f0.  v0:= v1.`r1.b.b` @type ^`j1.p` @kind object;
  #L4312f4.  return v0 @kind object;
}
procedure `boolean` `equals`(`r1.b` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lr1/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L431214.  v0:= 1I;
  #L431216.  if v8 != v7 then goto L43121c;
  #L43121a.  return v0;
  #L43121c.  v1:= instanceof @variable v8 @type ^`r1.k` @kind boolean;
  #L431220.  v2:= 0I;
  #L431222.  if v1 == 0 then goto L431274;
  #L431226.  v8:= (`r1.k`) v8 @kind object;
  #L43122a.  v3:= v7.`r1.b.a` @type ^`long` @kind wide;
  #L43122e.  call temp:= `c`(v8) @signature `Lr1/k;.c:()J` @kind virtual;
  #L431234.  v5:= temp @kind wide;
  #L431236.  v1:= lcmp(v3, v5);
  #L43123a.  if v1 != 0 then goto L431270;
  #L43123e.  v1:= v7.`r1.b.b` @type ^`j1.p` @kind object;
  #L431242.  call temp:= `d`(v8) @signature `Lr1/k;.d:()Lj1/p;` @kind virtual;
  #L431248.  v3:= temp @kind object;
  #L43124a.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L431250.  v1:= temp;
  #L431252.  if v1 == 0 then goto L431270;
  #L431256.  v1:= v7.`r1.b.c` @type ^`j1.i` @kind object;
  #L43125a.  call temp:= `b`(v8) @signature `Lr1/k;.b:()Lj1/i;` @kind virtual;
  #L431260.  v8:= temp @kind object;
  #L431262.  call temp:= `equals`(v1, v8) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L431268.  v8:= temp;
  #L43126a.  if v8 == 0 then goto L431270;
  #L43126e.  goto L431272;
  #L431270.  v0:= 0I;
  #L431272.  return v0;
  #L431274.  return v2;
}
procedure `int` `hashCode`(`r1.b` v4 @kind this) @signature `Lr1/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L431288.  v0:= v4.`r1.b.a` @type ^`long` @kind wide;
  #L43128c.  v2:= 32I;
  #L431290.  v2:= v0 ^>> v2 @kind long;
  #L431294.  v0:= v0 ^~ v2 @kind long;
  #L431296.  v1:= (`int`) v0 @kind l2i;
  #L431298.  v0:= 1000003I;
  #L43129e.  v1:= v1 ^~ v0 @kind int;
  #L4312a0.  v1:= v1 * v0 @kind int;
  #L4312a4.  v2:= v4.`r1.b.b` @type ^`j1.p` @kind object;
  #L4312a8.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4312ae.  v2:= temp;
  #L4312b0.  v1:= v1 ^~ v2 @kind int;
  #L4312b2.  v1:= v1 * v0 @kind int;
  #L4312b6.  v0:= v4.`r1.b.c` @type ^`j1.i` @kind object;
  #L4312ba.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4312c0.  v0:= temp;
  #L4312c2.  v0:= v0 ^~ v1 @kind int;
  #L4312c4.  return v0;
}
procedure `java.lang.String` `toString`(`r1.b` v3 @kind this) @signature `Lr1/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L431308.  v0:= new `java.lang.StringBuilder`;
  #L43130c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L431312.  v1:= "PersistedEvent{id=" @kind object;
  #L431316.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43131c.  v1:= v3.`r1.b.a` @type ^`long` @kind wide;
  #L431320.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L431326.  v1:= ", transportContext=" @kind object;
  #L43132a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431330.  v1:= v3.`r1.b.b` @type ^`j1.p` @kind object;
  #L431334.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43133a.  v1:= ", event=" @kind object;
  #L43133e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431344.  v1:= v3.`r1.b.c` @type ^`j1.i` @kind object;
  #L431348.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43134e.  v1:= "}" @kind object;
  #L431352.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431358.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43135e.  v0:= temp @kind object;
  #L431360.  return v0 @kind object;
}
