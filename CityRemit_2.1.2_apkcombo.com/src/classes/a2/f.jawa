record `a2.f` @kind class @AccessFlag PUBLIC_FINAL extends `a2.m` @kind interface {
  `byte`[] `a2.f.a` @AccessFlag PRIVATE_FINAL;
  `r3.i` `a2.f.b` @AccessFlag PRIVATE_FINAL;
  `long` `a2.f.c` @AccessFlag PRIVATE_FINAL;
  `long` `a2.f.d` @AccessFlag PRIVATE;
  `byte`[] `a2.f.e` @AccessFlag PRIVATE;
  `int` `a2.f.f` @AccessFlag PRIVATE;
  `int` `a2.f.g` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `La2/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15933c.  v0:= "goog.exo.extractor" @kind object;
  #L159340.  call `a`(v0) @signature `Lv1/g1;.a:(Ljava/lang/String;)V` @kind static;
  #L159346.  return @kind void;
}
procedure `void` `<init>`(`a2.f` v0 @kind this, `r3.i` v1 @kind object, `long` v2 , `long` v4 ) @signature `La2/f;.<init>:(Lr3/i;JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L159358.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15935e.  v0.`a2.f.b` @type ^`r3.i` := v1 @kind object;
  #L159362.  v0.`a2.f.d` @type ^`long` := v2 @kind wide;
  #L159366.  v0.`a2.f.c` @type ^`long` := v4 @kind wide;
  #L15936a.  v1:= 65536I;
  #L15936e.  v1:= new `byte`[v1];
  #L159372.  v0.`a2.f.e` @type ^`byte`[] := v1 @kind object;
  #L159376.  v1:= 4096I;
  #L15937a.  v1:= new `byte`[v1];
  #L15937e.  v0.`a2.f.a` @type ^`byte`[] := v1 @kind object;
  #L159382.  return @kind void;
}
procedure `void` `r`(`a2.f` v4 @kind this, `int` v5 ) @signature `La2/f;.r:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1593b0.  v0:= -1I;
  #L1593b2.  if v5 == v0 then goto L1593c2;
  #L1593b6.  v0:= v4.`a2.f.d` @type ^`long` @kind wide;
  #L1593ba.  v2:= (`long`) v5 @kind i2l;
  #L1593bc.  v0:= v0 + v2 @kind long;
  #L1593be.  v4.`a2.f.d` @type ^`long` := v0 @kind wide;
  #L1593c2.  return @kind void;
}
procedure `void` `s`(`a2.f` v3 @kind this, `int` v4 ) @signature `La2/f;.s:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1593d4.  v0:= v3.`a2.f.f` @type ^`int`;
  #L1593d8.  v0:= v0 + v4 @kind int;
  #L1593da.  v4:= v3.`a2.f.e` @type ^`byte`[] @kind object;
  #L1593de.  v1:= length @variable v4;
  #L1593e0.  if v0 <= v1 then goto L15940e;
  #L1593e4.  v4:= length @variable v4;
  #L1593e6.  v4:= v4 * 2;
  #L1593ea.  v1:= 65536I;
  #L1593ee.  v1:= v1 + v0 @kind int;
  #L1593f0.  v2:= 524288I;
  #L1593f4.  v0:= v0 + v2 @kind int;
  #L1593f6.  call temp:= `q`(v4, v1, v0) @signature `Ls3/l0;.q:(III)I` @kind static;
  #L1593fc.  v4:= temp;
  #L1593fe.  v0:= v3.`a2.f.e` @type ^`byte`[] @kind object;
  #L159402.  call temp:= `copyOf`(v0, v4) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L159408.  v4:= temp @kind object;
  #L15940a.  v3.`a2.f.e` @type ^`byte`[] := v4 @kind object;
  #L15940e.  return @kind void;
}
procedure `int` `t`(`a2.f` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `La2/f;.t:([BII)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1591f4.  v0:= v2.`a2.f.g` @type ^`int`;
  #L1591f8.  v1:= 0I;
  #L1591fa.  if v0 != 0 then goto L159200;
  #L1591fe.  return v1;
  #L159200.  call temp:= `min`(v0, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L159206.  v5:= temp;
  #L159208.  v0:= v2.`a2.f.e` @type ^`byte`[] @kind object;
  #L15920c.  call `arraycopy`(v0, v1, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L159212.  call `x`(v2, v5) @signature `La2/f;.x:(I)V` @kind direct;
  #L159218.  return v5;
}
procedure `int` `u`(`a2.f` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 , `int` v5 , `boolean` v6 ) @signature `La2/f;.u:([BIIIZ)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L15922c.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L159232.  v0:= temp;
  #L159234.  if v0 != 0 then goto L159268;
  #L159238.  v0:= v1.`a2.f.b` @type ^`r3.i` @kind object;
  #L15923c.  v3:= v3 + v5 @kind int;
  #L15923e.  v4:= v4 - v5 @kind int;
  #L159240.  call temp:= `b`(v0, v2, v3, v4) @signature `Lr3/i;.b:([BII)I` @kind interface;
  #L159246.  v2:= temp;
  #L159248.  v3:= -1I;
  #L15924a.  if v2 != v3 then goto L159264;
  #L15924e.  if v5 != 0 then goto L159258;
  #L159252.  if v6 == 0 then goto L159258;
  #L159256.  return v3;
  #L159258.  v2:= new `java.io.EOFException`;
  #L15925c.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L159262.  throw v2;
  #L159264.  v5:= v5 + v2 @kind int;
  #L159266.  return v5;
  #L159268.  v2:= new `java.io.InterruptedIOException`;
  #L15926c.  call `<init>`(v2) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L159272.  throw v2;
}
procedure `int` `v`(`a2.f` v1 @kind this, `int` v2 ) @signature `La2/f;.v:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1592c8.  v0:= v1.`a2.f.g` @type ^`int`;
  #L1592cc.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1592d2.  v2:= temp;
  #L1592d4.  call `x`(v1, v2) @signature `La2/f;.x:(I)V` @kind direct;
  #L1592da.  return v2;
}
procedure `void` `x`(`a2.f` v5 @kind this, `int` v6 ) @signature `La2/f;.x:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15948c.  v0:= v5.`a2.f.g` @type ^`int`;
  #L159490.  v0:= v0 - v6 @kind int;
  #L159492.  v5.`a2.f.g` @type ^`int` := v0;
  #L159496.  v1:= 0I;
  #L159498.  v5.`a2.f.f` @type ^`int` := v1;
  #L15949c.  v2:= v5.`a2.f.e` @type ^`byte`[] @kind object;
  #L1594a0.  v3:= length @variable v2;
  #L1594a2.  v4:= 524288I;
  #L1594a6.  v3:= v3 - v4 @kind int;
  #L1594a8.  if v0 >= v3 then goto L1594b8;
  #L1594ac.  v3:= 65536I;
  #L1594b0.  v3:= v3 + v0 @kind int;
  #L1594b2.  v3:= new `byte`[v3];
  #L1594b6.  goto L1594ba;
  #L1594b8.  v3:= v2 @kind object;
  #L1594ba.  call `arraycopy`(v2, v6, v3, v1, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1594c0.  v5.`a2.f.e` @type ^`byte`[] := v3 @kind object;
  #L1594c4.  return @kind void;
}
procedure `long` `a`(`a2.f` v2 @kind this) @signature `La2/f;.a:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1592ec.  v0:= v2.`a2.f.c` @type ^`long` @kind wide;
  #L1592f0.  return v0 @kind wide;
}
procedure `int` `b`(`a2.f` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `La2/f;.b:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1591bc.  call temp:= `t`(v7, v8, v9, v10) @signature `La2/f;.t:([BII)I` @kind direct;
  #L1591c2.  v0:= temp;
  #L1591c4.  if v0 != 0 then goto L1591dc;
  #L1591c8.  v5:= 0I;
  #L1591ca.  v6:= 1I;
  #L1591cc.  v1:= v7 @kind object;
  #L1591ce.  v2:= v8 @kind object;
  #L1591d0.  v3:= v9;
  #L1591d2.  v4:= v10;
  #L1591d4.  call temp:= `u`(v1, v2, v3, v4, v5, v6) @signature `La2/f;.u:([BIIIZ)I` @kind direct;
  #L1591da.  v0:= temp;
  #L1591dc.  call `r`(v7, v0) @signature `La2/f;.r:(I)V` @kind direct;
  #L1591e2.  return v0;
}
procedure `int` `d`(`a2.f` v7 @kind this, `int` v8 ) @signature `La2/f;.d:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L159284.  call temp:= `v`(v7, v8) @signature `La2/f;.v:(I)I` @kind direct;
  #L15928a.  v0:= temp;
  #L15928c.  if v0 != 0 then goto L1592ae;
  #L159290.  v2:= v7.`a2.f.a` @type ^`byte`[] @kind object;
  #L159294.  v3:= 0I;
  #L159296.  v0:= length @variable v2;
  #L159298.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L15929e.  v4:= temp;
  #L1592a0.  v5:= 0I;
  #L1592a2.  v6:= 1I;
  #L1592a4.  v1:= v7 @kind object;
  #L1592a6.  call temp:= `u`(v1, v2, v3, v4, v5, v6) @signature `La2/f;.u:([BIIIZ)I` @kind direct;
  #L1592ac.  v0:= temp;
  #L1592ae.  call `r`(v7, v0) @signature `La2/f;.r:(I)V` @kind direct;
  #L1592b4.  return v0;
}
procedure `boolean` `f`(`a2.f` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 , `boolean` v11 ) @signature `La2/f;.f:([BIIZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1590a4.  call temp:= `t`(v7, v8, v9, v10) @signature `La2/f;.t:([BII)I` @kind direct;
  #L1590aa.  v0:= temp;
  #L1590ac.  v5:= v0;
  #L1590ae.  v0:= -1I;
  #L1590b0.  if v5 >= v10 then goto L1590cc;
  #L1590b4.  if v5 == v0 then goto L1590cc;
  #L1590b8.  v1:= v7 @kind object;
  #L1590ba.  v2:= v8 @kind object;
  #L1590bc.  v3:= v9;
  #L1590be.  v4:= v10;
  #L1590c0.  v6:= v11;
  #L1590c2.  call temp:= `u`(v1, v2, v3, v4, v5, v6) @signature `La2/f;.u:([BIIIZ)I` @kind direct;
  #L1590c8.  v5:= temp;
  #L1590ca.  goto L1590ae;
  #L1590cc.  call `r`(v7, v5) @signature `La2/f;.r:(I)V` @kind direct;
  #L1590d2.  if v5 == v0 then goto L1590da;
  #L1590d6.  v8:= 1I;
  #L1590d8.  goto L1590dc;
  #L1590da.  v8:= 0I;
  #L1590dc.  return v8;
}
procedure `int` `g`(`a2.f` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `La2/f;.g:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L15914c.  call `s`(v7, v10) @signature `La2/f;.s:(I)V` @kind direct;
  #L159152.  v0:= v7.`a2.f.g` @type ^`int`;
  #L159156.  v3:= v7.`a2.f.f` @type ^`int`;
  #L15915a.  v0:= v0 - v3 @kind int;
  #L15915c.  if v0 != 0 then goto L159188;
  #L159160.  v2:= v7.`a2.f.e` @type ^`byte`[] @kind object;
  #L159164.  v5:= 0I;
  #L159166.  v6:= 1I;
  #L159168.  v1:= v7 @kind object;
  #L15916a.  v4:= v10;
  #L15916c.  call temp:= `u`(v1, v2, v3, v4, v5, v6) @signature `La2/f;.u:([BIIIZ)I` @kind direct;
  #L159172.  v10:= temp;
  #L159174.  v0:= -1I;
  #L159176.  if v10 != v0 then goto L15917c;
  #L15917a.  return v0;
  #L15917c.  v0:= v7.`a2.f.g` @type ^`int`;
  #L159180.  v0:= v0 + v10 @kind int;
  #L159182.  v7.`a2.f.g` @type ^`int` := v0;
  #L159186.  goto L159190;
  #L159188.  call temp:= `min`(v10, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L15918e.  v10:= temp;
  #L159190.  v0:= v7.`a2.f.e` @type ^`byte`[] @kind object;
  #L159194.  v1:= v7.`a2.f.f` @type ^`int`;
  #L159198.  call `arraycopy`(v0, v1, v8, v9, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15919e.  v8:= v7.`a2.f.f` @type ^`int`;
  #L1591a2.  v8:= v8 + v10 @kind int;
  #L1591a4.  v7.`a2.f.f` @type ^`int` := v8;
  #L1591a8.  return v10;
}
procedure `void` `i`(`a2.f` v1 @kind this) @signature `La2/f;.i:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159458.  v0:= 0I;
  #L15945a.  v1.`a2.f.f` @type ^`int` := v0;
  #L15945e.  return @kind void;
}
procedure `void` `j`(`a2.f` v1 @kind this, `int` v2 ) @signature `La2/f;.j:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159470.  v0:= 0I;
  #L159472.  call temp:= `w`(v1, v2, v0) @signature `La2/f;.w:(IZ)Z` @kind virtual;
  #L159478.  return @kind void;
}
procedure `boolean` `k`(`a2.f` v7 @kind this, `int` v8 , `boolean` v9 ) @signature `La2/f;.k:(IZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L159010.  call `s`(v7, v8) @signature `La2/f;.s:(I)V` @kind direct;
  #L159016.  v0:= v7.`a2.f.g` @type ^`int`;
  #L15901a.  v1:= v7.`a2.f.f` @type ^`int`;
  #L15901e.  v0:= v0 - v1 @kind int;
  #L159020.  v5:= v0;
  #L159022.  if v5 >= v8 then goto L159052;
  #L159026.  v2:= v7.`a2.f.e` @type ^`byte`[] @kind object;
  #L15902a.  v3:= v7.`a2.f.f` @type ^`int`;
  #L15902e.  v1:= v7 @kind object;
  #L159030.  v4:= v8;
  #L159032.  v6:= v9;
  #L159034.  call temp:= `u`(v1, v2, v3, v4, v5, v6) @signature `La2/f;.u:([BIIIZ)I` @kind direct;
  #L15903a.  v5:= temp;
  #L15903c.  v0:= -1I;
  #L15903e.  if v5 != v0 then goto L159046;
  #L159042.  v8:= 0I;
  #L159044.  return v8;
  #L159046.  v0:= v7.`a2.f.f` @type ^`int`;
  #L15904a.  v0:= v0 + v5 @kind int;
  #L15904c.  v7.`a2.f.g` @type ^`int` := v0;
  #L159050.  goto L159022;
  #L159052.  v9:= v7.`a2.f.f` @type ^`int`;
  #L159056.  v9:= v9 + v8 @kind int;
  #L159058.  v7.`a2.f.f` @type ^`int` := v9;
  #L15905c.  v8:= 1I;
  #L15905e.  return v8;
}
procedure `boolean` `m`(`a2.f` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `La2/f;.m:([BIIZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159070.  call temp:= `k`(v1, v4, v5) @signature `La2/f;.k:(IZ)Z` @kind virtual;
  #L159076.  v5:= temp;
  #L159078.  if v5 != 0 then goto L159080;
  #L15907c.  v2:= 0I;
  #L15907e.  return v2;
  #L159080.  v5:= v1.`a2.f.e` @type ^`byte`[] @kind object;
  #L159084.  v0:= v1.`a2.f.f` @type ^`int`;
  #L159088.  v0:= v0 - v4 @kind int;
  #L15908a.  call `arraycopy`(v5, v0, v2, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L159090.  v2:= 1I;
  #L159092.  return v2;
}
procedure `long` `n`(`a2.f` v4 @kind this) @signature `La2/f;.n:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L159304.  v0:= v4.`a2.f.d` @type ^`long` @kind wide;
  #L159308.  v2:= v4.`a2.f.f` @type ^`int`;
  #L15930c.  v2:= (`long`) v2 @kind i2l;
  #L15930e.  v0:= v0 + v2 @kind long;
  #L159310.  return v0 @kind wide;
}
procedure `void` `o`(`a2.f` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `La2/f;.o:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159420.  v0:= 0I;
  #L159422.  call temp:= `m`(v1, v2, v3, v4, v0) @signature `La2/f;.m:([BIIZ)Z` @kind virtual;
  #L159428.  return @kind void;
}
procedure `void` `p`(`a2.f` v1 @kind this, `int` v2 ) @signature `La2/f;.p:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159394.  v0:= 0I;
  #L159396.  call temp:= `k`(v1, v2, v0) @signature `La2/f;.k:(IZ)Z` @kind virtual;
  #L15939c.  return @kind void;
}
procedure `long` `q`(`a2.f` v2 @kind this) @signature `La2/f;.q:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159324.  v0:= v2.`a2.f.d` @type ^`long` @kind wide;
  #L159328.  return v0 @kind wide;
}
procedure `void` `readFully`(`a2.f` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `La2/f;.readFully:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15943c.  v0:= 0I;
  #L15943e.  call temp:= `f`(v1, v2, v3, v4, v0) @signature `La2/f;.f:([BIIZ)Z` @kind virtual;
  #L159444.  return @kind void;
}
procedure `boolean` `w`(`a2.f` v7 @kind this, `int` v8 , `boolean` v9 ) @signature `La2/f;.w:(IZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1590f0.  call temp:= `v`(v7, v8) @signature `La2/f;.v:(I)I` @kind direct;
  #L1590f6.  v0:= temp;
  #L1590f8.  v5:= v0;
  #L1590fa.  v0:= -1I;
  #L1590fc.  if v5 >= v8 then goto L159128;
  #L159100.  if v5 == v0 then goto L159128;
  #L159104.  v0:= v7.`a2.f.a` @type ^`byte`[] @kind object;
  #L159108.  v0:= length @variable v0;
  #L15910a.  v0:= v0 + v5 @kind int;
  #L15910c.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L159112.  v4:= temp;
  #L159114.  v2:= v7.`a2.f.a` @type ^`byte`[] @kind object;
  #L159118.  v3:= -v5 @kind int;
  #L15911a.  v1:= v7 @kind object;
  #L15911c.  v6:= v9;
  #L15911e.  call temp:= `u`(v1, v2, v3, v4, v5, v6) @signature `La2/f;.u:([BIIIZ)I` @kind direct;
  #L159124.  v5:= temp;
  #L159126.  goto L1590fa;
  #L159128.  call `r`(v7, v5) @signature `La2/f;.r:(I)V` @kind direct;
  #L15912e.  if v5 == v0 then goto L159136;
  #L159132.  v8:= 1I;
  #L159134.  goto L159138;
  #L159136.  v8:= 0I;
  #L159138.  return v8;
}
