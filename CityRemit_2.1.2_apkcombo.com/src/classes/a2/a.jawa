record `a2.a` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `a2.a$a` `a2.a.a` @AccessFlag PROTECTED_FINAL;
  `a2.a$f` `a2.a.b` @AccessFlag PROTECTED_FINAL;
  `a2.a$c` `a2.a.c` @AccessFlag PROTECTED;
  `int` `a2.a.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a2.a` v16 @kind this, `a2.a$d` v17 @kind object, `a2.a$f` v18 @kind object, `long` v19 , `long` v21 , `long` v23 , `long` v25 , `long` v27 , `long` v29 , `int` v31 ) @signature `La2/a;.<init>:(La2/a$d;La2/a$f;JJJJJJI)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L158994.  v0:= v16 @kind object;
  #L158998.  call `<init>`(v16) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15899e.  v1:= v18 @kind object;
  #L1589a2.  v0.`a2.a.b` @type ^`a2.a$f` := v1 @kind object;
  #L1589a6.  v1:= v31;
  #L1589aa.  v0.`a2.a.d` @type ^`int` := v1;
  #L1589ae.  v15:= new `a2.a$a`;
  #L1589b2.  v1:= v15 @kind object;
  #L1589b4.  v2:= v17 @kind object;
  #L1589b8.  v3:= v19 @kind wide;
  #L1589bc.  v5:= v21 @kind wide;
  #L1589c0.  v7:= v23 @kind wide;
  #L1589c4.  v9:= v25 @kind wide;
  #L1589c8.  v11:= v27 @kind wide;
  #L1589cc.  v13:= v29 @kind wide;
  #L1589d0.  call `<init>`(v1, v2, v3, v5, v7, v9, v11, v13) @signature `La2/a$a;.<init>:(La2/a$d;JJJJJJ)V` @kind direct;
  #L1589d6.  v0.`a2.a.a` @type ^`a2.a$a` := v15 @kind object;
  #L1589da.  return @kind void;
}
procedure `a2.a$c` `a`(`a2.a` v17 @kind this, `long` v18 ) @signature `La2/a;.a:(J)La2/a$c;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L158750.  v0:= v17 @kind object;
  #L158754.  v16:= new `a2.a$c`;
  #L158758.  v1:= v0.`a2.a.a` @type ^`a2.a$a` @kind object;
  #L15875c.  v2:= v18 @kind wide;
  #L158760.  call temp:= `k`(v1, v2) @signature `La2/a$a;.k:(J)J` @kind virtual;
  #L158766.  v4:= temp @kind wide;
  #L158768.  v1:= v0.`a2.a.a` @type ^`a2.a$a` @kind object;
  #L15876c.  call temp:= `a`(v1) @signature `La2/a$a;.a:(La2/a$a;)J` @kind static;
  #L158772.  v6:= temp @kind wide;
  #L158774.  v1:= v0.`a2.a.a` @type ^`a2.a$a` @kind object;
  #L158778.  call temp:= `b`(v1) @signature `La2/a$a;.b:(La2/a$a;)J` @kind static;
  #L15877e.  v8:= temp @kind wide;
  #L158780.  v1:= v0.`a2.a.a` @type ^`a2.a$a` @kind object;
  #L158784.  call temp:= `d`(v1) @signature `La2/a$a;.d:(La2/a$a;)J` @kind static;
  #L15878a.  v10:= temp @kind wide;
  #L15878c.  v1:= v0.`a2.a.a` @type ^`a2.a$a` @kind object;
  #L158790.  call temp:= `g`(v1) @signature `La2/a$a;.g:(La2/a$a;)J` @kind static;
  #L158796.  v12:= temp @kind wide;
  #L158798.  v1:= v0.`a2.a.a` @type ^`a2.a$a` @kind object;
  #L15879c.  call temp:= `j`(v1) @signature `La2/a$a;.j:(La2/a$a;)J` @kind static;
  #L1587a2.  v14:= temp @kind wide;
  #L1587a4.  v1:= v16 @kind object;
  #L1587a8.  call `<init>`(v1, v2, v4, v6, v8, v10, v12, v14) @signature `La2/a$c;.<init>:(JJJJJJJ)V` @kind direct;
  #L1587ae.  return v16 @kind object;
}
procedure `a2.a0` `b`(`a2.a` v1 @kind this) @signature `La2/a;.b:()La2/a0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1587c0.  v0:= v1.`a2.a.a` @type ^`a2.a$a` @kind object;
  #L1587c4.  return v0 @kind object;
}
procedure `int` `c`(`a2.a` v11 @kind this, `a2.m` v12 @kind object, `a2.z` v13 @kind object) @signature `La2/a;.c:(La2/m;La2/z;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L15883c.  v0:= v11.`a2.a.c` @type ^`a2.a$c` @kind object;
  #L158840.  call temp:= `h`(v0) @signature `Ls3/a;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L158846.  v0:= temp @kind object;
  #L158848.  v0:= (`a2.a$c`) v0 @kind object;
  #L15884c.  call temp:= `b`(v0) @signature `La2/a$c;.b:(La2/a$c;)J` @kind static;
  #L158852.  v1:= temp @kind wide;
  #L158854.  call temp:= `c`(v0) @signature `La2/a$c;.c:(La2/a$c;)J` @kind static;
  #L15885a.  v3:= temp @kind wide;
  #L15885c.  call temp:= `d`(v0) @signature `La2/a$c;.d:(La2/a$c;)J` @kind static;
  #L158862.  v5:= temp @kind wide;
  #L158864.  v3:= v3 - v1 @kind long;
  #L158866.  v7:= v11.`a2.a.d` @type ^`int`;
  #L15886a.  v7:= (`long`) v7 @kind i2l;
  #L15886c.  v9:= 0I;
  #L15886e.  v10:= lcmp(v3, v7);
  #L158872.  if v10 > 0 then goto L158886;
  #L158876.  call `e`(v11, v9, v1) @signature `La2/a;.e:(ZJ)V` @kind virtual;
  #L15887c.  call temp:= `g`(v11, v12, v1, v13) @signature `La2/a;.g:(La2/m;JLa2/z;)I` @kind virtual;
  #L158882.  v12:= temp;
  #L158884.  return v12;
  #L158886.  call temp:= `i`(v11, v12, v5) @signature `La2/a;.i:(La2/m;J)Z` @kind virtual;
  #L15888c.  v1:= temp;
  #L15888e.  if v1 != 0 then goto L15889c;
  #L158892.  call temp:= `g`(v11, v12, v5, v13) @signature `La2/a;.g:(La2/m;JLa2/z;)I` @kind virtual;
  #L158898.  v12:= temp;
  #L15889a.  return v12;
  #L15889c.  call `i`(v12) @signature `La2/m;.i:()V` @kind interface;
  #L1588a2.  v1:= v11.`a2.a.b` @type ^`a2.a$f` @kind object;
  #L1588a6.  call temp:= `e`(v0) @signature `La2/a$c;.e:(La2/a$c;)J` @kind static;
  #L1588ac.  v2:= temp @kind wide;
  #L1588ae.  call temp:= `a`(v1, v12, v2) @signature `La2/a$f;.a:(La2/m;J)La2/a$e;` @kind interface;
  #L1588b4.  v1:= temp @kind object;
  #L1588b6.  call temp:= `a`(v1) @signature `La2/a$e;.a:(La2/a$e;)I` @kind static;
  #L1588bc.  v2:= temp;
  #L1588be.  v3:= -3I;
  #L1588c0.  if v2 == v3 then goto L158946;
  #L1588c4.  v3:= -2I;
  #L1588c6.  if v2 == v3 then goto L15892c;
  #L1588ca.  v3:= -1I;
  #L1588cc.  if v2 == v3 then goto L158914;
  #L1588d0.  if v2 != 0 then goto L158904;
  #L1588d4.  call temp:= `c`(v1) @signature `La2/a$e;.c:(La2/a$e;)J` @kind static;
  #L1588da.  v2:= temp @kind wide;
  #L1588dc.  call temp:= `i`(v11, v12, v2) @signature `La2/a;.i:(La2/m;J)Z` @kind virtual;
  #L1588e2.  v0:= 1I;
  #L1588e4.  call temp:= `c`(v1) @signature `La2/a$e;.c:(La2/a$e;)J` @kind static;
  #L1588ea.  v2:= temp @kind wide;
  #L1588ec.  call `e`(v11, v0, v2) @signature `La2/a;.e:(ZJ)V` @kind virtual;
  #L1588f2.  call temp:= `c`(v1) @signature `La2/a$e;.c:(La2/a$e;)J` @kind static;
  #L1588f8.  v0:= temp @kind wide;
  #L1588fa.  call temp:= `g`(v11, v12, v0, v13) @signature `La2/a;.g:(La2/m;JLa2/z;)I` @kind virtual;
  #L158900.  v12:= temp;
  #L158902.  return v12;
  #L158904.  v12:= new `java.lang.IllegalStateException`;
  #L158908.  v13:= "Invalid case" @kind object;
  #L15890c.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158912.  throw v12;
  #L158914.  call temp:= `b`(v1) @signature `La2/a$e;.b:(La2/a$e;)J` @kind static;
  #L15891a.  v2:= temp @kind wide;
  #L15891c.  call temp:= `c`(v1) @signature `La2/a$e;.c:(La2/a$e;)J` @kind static;
  #L158922.  v4:= temp @kind wide;
  #L158924.  call `f`(v0, v2, v4) @signature `La2/a$c;.f:(La2/a$c;JJ)V` @kind static;
  #L15892a.  goto L15883c;
  #L15892c.  call temp:= `b`(v1) @signature `La2/a$e;.b:(La2/a$e;)J` @kind static;
  #L158932.  v2:= temp @kind wide;
  #L158934.  call temp:= `c`(v1) @signature `La2/a$e;.c:(La2/a$e;)J` @kind static;
  #L15893a.  v4:= temp @kind wide;
  #L15893c.  call `g`(v0, v2, v4) @signature `La2/a$c;.g:(La2/a$c;JJ)V` @kind static;
  #L158942.  goto L15883c;
  #L158946.  call `e`(v11, v9, v5) @signature `La2/a;.e:(ZJ)V` @kind virtual;
  #L15894c.  call temp:= `g`(v11, v12, v5, v13) @signature `La2/a;.g:(La2/m;JLa2/z;)I` @kind virtual;
  #L158952.  v12:= temp;
  #L158954.  return v12;
}
procedure `boolean` `d`(`a2.a` v1 @kind this) @signature `La2/a;.d:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1587d8.  v0:= v1.`a2.a.c` @type ^`a2.a$c` @kind object;
  #L1587dc.  if v0 == 0 then goto L1587e4;
  #L1587e0.  v0:= 1I;
  #L1587e2.  goto L1587e6;
  #L1587e4.  v0:= 0I;
  #L1587e6.  return v0;
}
procedure `void` `e`(`a2.a` v1 @kind this, `boolean` v2 , `long` v3 ) @signature `La2/a;.e:(ZJ)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1589ec.  v0:= 0I;
  #L1589ee.  v1.`a2.a.c` @type ^`a2.a$c` := v0 @kind object;
  #L1589f2.  v0:= v1.`a2.a.b` @type ^`a2.a$f` @kind object;
  #L1589f6.  call `b`(v0) @signature `La2/a$f;.b:()V` @kind interface;
  #L1589fc.  call `f`(v1, v2, v3) @signature `La2/a;.f:(ZJ)V` @kind virtual;
  #L158a02.  return @kind void;
}
procedure `void` `f`(`a2.a` v0 @kind this, `boolean` v1 , `long` v2 ) @signature `La2/a;.f:(ZJ)V` @AccessFlag PROTECTED {
    temp;

  #L158a14.  return @kind void;
}
procedure `int` `g`(`a2.a` v2 @kind this, `a2.m` v3 @kind object, `long` v4 , `a2.z` v6 @kind object) @signature `La2/a;.g:(La2/m;JLa2/z;)I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L158968.  call temp:= `q`(v3) @signature `La2/m;.q:()J` @kind interface;
  #L15896e.  v0:= temp @kind wide;
  #L158970.  v3:= lcmp(v4, v0);
  #L158974.  if v3 != 0 then goto L15897c;
  #L158978.  v3:= 0I;
  #L15897a.  return v3;
  #L15897c.  v6.`a2.z.a` @type ^`long` := v4 @kind wide;
  #L158980.  v3:= 1I;
  #L158982.  return v3;
}
procedure `void` `h`(`a2.a` v3 @kind this, `long` v4 ) @signature `La2/a;.h:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L158a28.  v0:= v3.`a2.a.c` @type ^`a2.a$c` @kind object;
  #L158a2c.  if v0 == 0 then goto L158a42;
  #L158a30.  call temp:= `a`(v0) @signature `La2/a$c;.a:(La2/a$c;)J` @kind static;
  #L158a36.  v0:= temp @kind wide;
  #L158a38.  v2:= lcmp(v0, v4);
  #L158a3c.  if v2 != 0 then goto L158a42;
  #L158a40.  return @kind void;
  #L158a42.  call temp:= `a`(v3, v4) @signature `La2/a;.a:(J)La2/a$c;` @kind virtual;
  #L158a48.  v4:= temp @kind object;
  #L158a4a.  v3.`a2.a.c` @type ^`a2.a$c` := v4 @kind object;
  #L158a4e.  return @kind void;
}
procedure `boolean` `i`(`a2.a` v3 @kind this, `a2.m` v4 @kind object, `long` v5 ) @signature `La2/a;.i:(La2/m;J)Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1587f8.  call temp:= `q`(v4) @signature `La2/m;.q:()J` @kind interface;
  #L1587fe.  v0:= temp @kind wide;
  #L158800.  v5:= v5 - v0 @kind long;
  #L158802.  v0:= 0L;
  #L158806.  v2:= lcmp(v5, v0);
  #L15880a.  if v2 < 0 then goto L158828;
  #L15880e.  v0:= 262144L;
  #L158814.  v2:= lcmp(v5, v0);
  #L158818.  if v2 > 0 then goto L158828;
  #L15881c.  v6:= (`int`) v5 @kind l2i;
  #L15881e.  call `j`(v4, v6) @signature `La2/m;.j:(I)V` @kind interface;
  #L158824.  v4:= 1I;
  #L158826.  return v4;
  #L158828.  v4:= 0I;
  #L15882a.  return v4;
}
