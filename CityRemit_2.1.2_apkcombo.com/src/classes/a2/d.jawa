record `a2.d` @kind class @AccessFlag PUBLIC_FINAL extends `a2.a0` @kind interface {
  `int` `a2.d.a` @AccessFlag PUBLIC_FINAL;
  `int`[] `a2.d.b` @AccessFlag PUBLIC_FINAL;
  `long`[] `a2.d.c` @AccessFlag PUBLIC_FINAL;
  `long`[] `a2.d.d` @AccessFlag PUBLIC_FINAL;
  `long`[] `a2.d.e` @AccessFlag PUBLIC_FINAL;
  `long` `a2.d.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a2.d` v2 @kind this, `int`[] v3 @kind object, `long`[] v4 @kind object, `long`[] v5 @kind object, `long`[] v6 @kind object) @signature `La2/d;.<init>:([I[J[J[J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L158d98.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L158d9e.  v2.`a2.d.b` @type ^`int`[] := v3 @kind object;
  #L158da2.  v2.`a2.d.c` @type ^`long`[] := v4 @kind object;
  #L158da6.  v2.`a2.d.d` @type ^`long`[] := v5 @kind object;
  #L158daa.  v2.`a2.d.e` @type ^`long`[] := v6 @kind object;
  #L158dae.  v3:= length @variable v3;
  #L158db0.  v2.`a2.d.a` @type ^`int` := v3;
  #L158db4.  if v3 <= 0 then goto L158dd0;
  #L158db8.  v4:= v3 + -1;
  #L158dbc.  v4:= v5[v4] @kind wide;
  #L158dc0.  v3:= v3 + -1;
  #L158dc4.  v0:= v6[v3] @kind wide;
  #L158dc8.  v4:= v4 + v0 @kind long;
  #L158dca.  v2.`a2.d.f` @type ^`long` := v4 @kind wide;
  #L158dce.  goto L158dd8;
  #L158dd0.  v3:= 0L;
  #L158dd4.  v2.`a2.d.f` @type ^`long` := v3 @kind wide;
  #L158dd8.  return @kind void;
}
procedure `int` `a`(`a2.d` v2 @kind this, `long` v3 ) @signature `La2/d;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L158cac.  v0:= v2.`a2.d.e` @type ^`long`[] @kind object;
  #L158cb0.  v1:= 1I;
  #L158cb2.  call temp:= `i`(v0, v3, v1, v1) @signature `Ls3/l0;.i:([JJZZ)I` @kind static;
  #L158cb8.  v3:= temp;
  #L158cba.  return v3;
}
procedure `boolean` `f`(`a2.d` v1 @kind this) @signature `La2/d;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L158c98.  v0:= 1I;
  #L158c9a.  return v0;
}
procedure `a2.a0$a` `h`(`a2.d` v7 @kind this, `long` v8 ) @signature `La2/d;.h:(J)La2/a0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L158c14.  call temp:= `a`(v7, v8) @signature `La2/d;.a:(J)I` @kind virtual;
  #L158c1a.  v0:= temp;
  #L158c1c.  v1:= new `a2.b0`;
  #L158c20.  v2:= v7.`a2.d.e` @type ^`long`[] @kind object;
  #L158c24.  v3:= v2[v0] @kind wide;
  #L158c28.  v2:= v7.`a2.d.c` @type ^`long`[] @kind object;
  #L158c2c.  v5:= v2[v0] @kind wide;
  #L158c30.  call `<init>`(v1, v3, v5) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L158c36.  v2:= v1.`a2.b0.a` @type ^`long` @kind wide;
  #L158c3a.  v4:= lcmp(v2, v8);
  #L158c3e.  if v4 >= 0 then goto L158c7a;
  #L158c42.  v8:= v7.`a2.d.a` @type ^`int`;
  #L158c46.  v8:= v8 + -1;
  #L158c4a.  if v0 != v8 then goto L158c50;
  #L158c4e.  goto L158c7a;
  #L158c50.  v8:= new `a2.b0`;
  #L158c54.  v9:= v7.`a2.d.e` @type ^`long`[] @kind object;
  #L158c58.  v0:= v0 + 1;
  #L158c5c.  v2:= v9[v0] @kind wide;
  #L158c60.  v9:= v7.`a2.d.c` @type ^`long`[] @kind object;
  #L158c64.  v4:= v9[v0] @kind wide;
  #L158c68.  call `<init>`(v8, v2, v4) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L158c6e.  v9:= new `a2.a0$a`;
  #L158c72.  call `<init>`(v9, v1, v8) @signature `La2/a0$a;.<init>:(La2/b0;La2/b0;)V` @kind direct;
  #L158c78.  return v9 @kind object;
  #L158c7a.  v8:= new `a2.a0$a`;
  #L158c7e.  call `<init>`(v8, v1) @signature `La2/a0$a;.<init>:(La2/b0;)V` @kind direct;
  #L158c84.  return v8 @kind object;
}
procedure `long` `i`(`a2.d` v2 @kind this) @signature `La2/d;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L158d80.  v0:= v2.`a2.d.f` @type ^`long` @kind wide;
  #L158d84.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`a2.d` v2 @kind this) @signature `La2/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L158ccc.  v0:= new `java.lang.StringBuilder`;
  #L158cd0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158cd6.  v1:= "ChunkIndex(length=" @kind object;
  #L158cda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158ce0.  v1:= v2.`a2.d.a` @type ^`int`;
  #L158ce4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L158cea.  v1:= ", sizes=" @kind object;
  #L158cee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158cf4.  v1:= v2.`a2.d.b` @type ^`int`[] @kind object;
  #L158cf8.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([I)Ljava/lang/String;` @kind static;
  #L158cfe.  v1:= temp @kind object;
  #L158d00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158d06.  v1:= ", offsets=" @kind object;
  #L158d0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158d10.  v1:= v2.`a2.d.c` @type ^`long`[] @kind object;
  #L158d14.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([J)Ljava/lang/String;` @kind static;
  #L158d1a.  v1:= temp @kind object;
  #L158d1c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158d22.  v1:= ", timeUs=" @kind object;
  #L158d26.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158d2c.  v1:= v2.`a2.d.e` @type ^`long`[] @kind object;
  #L158d30.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([J)Ljava/lang/String;` @kind static;
  #L158d36.  v1:= temp @kind object;
  #L158d38.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158d3e.  v1:= ", durationsUs=" @kind object;
  #L158d42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158d48.  v1:= v2.`a2.d.d` @type ^`long`[] @kind object;
  #L158d4c.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([J)Ljava/lang/String;` @kind static;
  #L158d52.  v1:= temp @kind object;
  #L158d54.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158d5a.  v1:= ")" @kind object;
  #L158d5e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158d64.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158d6a.  v0:= temp @kind object;
  #L158d6c.  return v0 @kind object;
}
