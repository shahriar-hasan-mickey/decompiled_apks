record `a2.e` @kind class @AccessFlag PUBLIC extends `a2.a0` @kind interface {
  `long` `a2.e.a` @AccessFlag PRIVATE_FINAL;
  `long` `a2.e.b` @AccessFlag PRIVATE_FINAL;
  `int` `a2.e.c` @AccessFlag PRIVATE_FINAL;
  `long` `a2.e.d` @AccessFlag PRIVATE_FINAL;
  `int` `a2.e.e` @AccessFlag PRIVATE_FINAL;
  `long` `a2.e.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `a2.e.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a2.e` v1 @kind this, `long` v2 , `long` v4 , `int` v6 , `int` v7 , `boolean` v8 ) @signature `La2/e;.<init>:(JJIIZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L158fac.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L158fb2.  v1.`a2.e.a` @type ^`long` := v2 @kind wide;
  #L158fb6.  v1.`a2.e.b` @type ^`long` := v4 @kind wide;
  #L158fba.  v0:= -1I;
  #L158fbc.  if v7 != v0 then goto L158fc2;
  #L158fc0.  v7:= 1I;
  #L158fc2.  v1.`a2.e.c` @type ^`int` := v7;
  #L158fc6.  v1.`a2.e.e` @type ^`int` := v6;
  #L158fca.  v1.`a2.e.g` @type ^`boolean` := v8 @kind boolean;
  #L158fce.  v7:= -1L;
  #L158fd2.  v0:= lcmp(v2, v7);
  #L158fd6.  if v0 != 0 then goto L158fea;
  #L158fda.  v1.`a2.e.d` @type ^`long` := v7 @kind wide;
  #L158fde.  v2:= -4.9E-324D;
  #L158fe8.  goto L158ffa;
  #L158fea.  v7:= v2 - v4 @kind long;
  #L158fee.  v1.`a2.e.d` @type ^`long` := v7 @kind wide;
  #L158ff2.  call temp:= `d`(v2, v4, v6) @signature `La2/e;.d:(JJI)J` @kind static;
  #L158ff8.  v2:= temp @kind wide;
  #L158ffa.  v1.`a2.e.f` @type ^`long` := v2 @kind wide;
  #L158ffe.  return @kind void;
}
procedure `long` `a`(`a2.e` v6 @kind this, `long` v7 ) @signature `La2/e;.a:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L158ef0.  v0:= v6.`a2.e.e` @type ^`int`;
  #L158ef4.  v0:= (`long`) v0 @kind i2l;
  #L158ef6.  v7:= v7 * v0 @kind long;
  #L158efa.  v0:= 8000000L;
  #L158f00.  v7:= v7 / v0 @kind long;
  #L158f02.  v0:= v6.`a2.e.c` @type ^`int`;
  #L158f06.  v1:= (`long`) v0 @kind i2l;
  #L158f08.  v7:= v7 / v1 @kind long;
  #L158f0a.  v1:= (`long`) v0 @kind i2l;
  #L158f0c.  v7:= v7 * v1 @kind long;
  #L158f10.  v1:= v6.`a2.e.d` @type ^`long` @kind wide;
  #L158f14.  v3:= -1L;
  #L158f18.  v5:= lcmp(v1, v3);
  #L158f1c.  if v5 == 0 then goto L158f2c;
  #L158f20.  v3:= (`long`) v0 @kind i2l;
  #L158f22.  v1:= v1 - v3 @kind long;
  #L158f24.  call temp:= `min`(v7, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L158f2a.  v7:= temp @kind wide;
  #L158f2c.  v0:= 0L;
  #L158f30.  call temp:= `max`(v7, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L158f36.  v7:= temp @kind wide;
  #L158f38.  v0:= v6.`a2.e.b` @type ^`long` @kind wide;
  #L158f3c.  v0:= v0 + v7 @kind long;
  #L158f3e.  return v0 @kind wide;
}
procedure `long` `d`(`long` v0 , `long` v2 , `int` v4 ) @signature `La2/e;.d:(JJI)J` @AccessFlag PRIVATE_STATIC {
    temp;

  #L158f74.  v0:= v0 - v2 @kind long;
  #L158f76.  v2:= 0L;
  #L158f7a.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L158f80.  v0:= temp @kind wide;
  #L158f82.  v2:= 8L;
  #L158f86.  v0:= v0 * v2 @kind long;
  #L158f8a.  v2:= 1000000L;
  #L158f90.  v0:= v0 * v2 @kind long;
  #L158f94.  v2:= (`long`) v4 @kind i2l;
  #L158f96.  v0:= v0 / v2 @kind long;
  #L158f98.  return v0 @kind wide;
}
procedure `long` `b`(`a2.e` v3 @kind this, `long` v4 ) @signature `La2/e;.b:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L158f50.  v0:= v3.`a2.e.b` @type ^`long` @kind wide;
  #L158f54.  v2:= v3.`a2.e.e` @type ^`int`;
  #L158f58.  call temp:= `d`(v4, v0, v2) @signature `La2/e;.d:(JJI)J` @kind static;
  #L158f5e.  v4:= temp @kind wide;
  #L158f60.  return v4 @kind wide;
}
procedure `boolean` `f`(`a2.e` v5 @kind this) @signature `La2/e;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L158ea4.  v0:= v5.`a2.e.d` @type ^`long` @kind wide;
  #L158ea8.  v2:= -1L;
  #L158eac.  v4:= lcmp(v0, v2);
  #L158eb0.  if v4 != 0 then goto L158ec2;
  #L158eb4.  v0:= v5.`a2.e.g` @type ^`boolean` @kind boolean;
  #L158eb8.  if v0 == 0 then goto L158ebe;
  #L158ebc.  goto L158ec2;
  #L158ebe.  v0:= 0I;
  #L158ec0.  goto L158ec4;
  #L158ec2.  v0:= 1I;
  #L158ec4.  return v0;
}
procedure `a2.a0$a` `h`(`a2.e` v10 @kind this, `long` v11 ) @signature `La2/e;.h:(J)La2/a0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L158dec.  v0:= v10.`a2.e.d` @type ^`long` @kind wide;
  #L158df0.  v2:= -1L;
  #L158df4.  v4:= lcmp(v0, v2);
  #L158df8.  if v4 != 0 then goto L158e22;
  #L158dfc.  v0:= v10.`a2.e.g` @type ^`boolean` @kind boolean;
  #L158e00.  if v0 != 0 then goto L158e22;
  #L158e04.  v11:= new `a2.a0$a`;
  #L158e08.  v12:= new `a2.b0`;
  #L158e0c.  v0:= 0L;
  #L158e10.  v2:= v10.`a2.e.b` @type ^`long` @kind wide;
  #L158e14.  call `<init>`(v12, v0, v2) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L158e1a.  call `<init>`(v11, v12) @signature `La2/a0$a;.<init>:(La2/b0;)V` @kind direct;
  #L158e20.  return v11 @kind object;
  #L158e22.  call temp:= `a`(v10, v11) @signature `La2/e;.a:(J)J` @kind direct;
  #L158e28.  v0:= temp @kind wide;
  #L158e2a.  call temp:= `b`(v10, v0) @signature `La2/e;.b:(J)J` @kind virtual;
  #L158e30.  v4:= temp @kind wide;
  #L158e32.  v6:= new `a2.b0`;
  #L158e36.  call `<init>`(v6, v4, v0) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L158e3c.  v7:= v10.`a2.e.d` @type ^`long` @kind wide;
  #L158e40.  v9:= lcmp(v7, v2);
  #L158e44.  if v9 == 0 then goto L158e88;
  #L158e48.  v2:= lcmp(v4, v11);
  #L158e4c.  if v2 >= 0 then goto L158e88;
  #L158e50.  v11:= v10.`a2.e.c` @type ^`int`;
  #L158e54.  v2:= (`long`) v11 @kind i2l;
  #L158e56.  v2:= v2 + v0 @kind long;
  #L158e58.  v4:= v10.`a2.e.a` @type ^`long` @kind wide;
  #L158e5c.  v12:= lcmp(v2, v4);
  #L158e60.  if v12 < 0 then goto L158e66;
  #L158e64.  goto L158e88;
  #L158e66.  v11:= (`long`) v11 @kind i2l;
  #L158e68.  v0:= v0 + v11 @kind long;
  #L158e6a.  call temp:= `b`(v10, v0) @signature `La2/e;.b:(J)J` @kind virtual;
  #L158e70.  v11:= temp @kind wide;
  #L158e72.  v2:= new `a2.b0`;
  #L158e76.  call `<init>`(v2, v11, v0) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L158e7c.  v11:= new `a2.a0$a`;
  #L158e80.  call `<init>`(v11, v6, v2) @signature `La2/a0$a;.<init>:(La2/b0;La2/b0;)V` @kind direct;
  #L158e86.  return v11 @kind object;
  #L158e88.  v11:= new `a2.a0$a`;
  #L158e8c.  call `<init>`(v11, v6) @signature `La2/a0$a;.<init>:(La2/b0;)V` @kind direct;
  #L158e92.  return v11 @kind object;
}
procedure `long` `i`(`a2.e` v2 @kind this) @signature `La2/e;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L158ed8.  v0:= v2.`a2.e.f` @type ^`long` @kind wide;
  #L158edc.  return v0 @kind wide;
}
