record `a2.t` @kind class @AccessFlag PUBLIC_FINAL extends `a2.a0` @kind interface {
  `a2.u` `a2.t.a` @AccessFlag PRIVATE_FINAL;
  `long` `a2.t.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a2.t` v0 @kind this, `a2.u` v1 @kind object, `long` v2 ) @signature `La2/t;.<init>:(La2/u;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15a764.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15a76a.  v0.`a2.t.a` @type ^`a2.u` := v1 @kind object;
  #L15a76e.  v0.`a2.t.b` @type ^`long` := v2 @kind wide;
  #L15a772.  return @kind void;
}
procedure `a2.b0` `a`(`a2.t` v2 @kind this, `long` v3 , `long` v5 ) @signature `La2/t;.a:(JJ)La2/b0;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L15a6f8.  v0:= 1000000L;
  #L15a6fe.  v3:= v3 * v0 @kind long;
  #L15a702.  v0:= v2.`a2.t.a` @type ^`a2.u` @kind object;
  #L15a706.  v0:= v0.`a2.u.e` @type ^`int`;
  #L15a70a.  v0:= (`long`) v0 @kind i2l;
  #L15a70c.  v3:= v3 / v0 @kind long;
  #L15a70e.  v0:= v2.`a2.t.b` @type ^`long` @kind wide;
  #L15a712.  v0:= v0 + v5 @kind long;
  #L15a714.  v5:= new `a2.b0`;
  #L15a718.  call `<init>`(v5, v3, v0) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L15a71e.  return v5 @kind object;
}
procedure `boolean` `f`(`a2.t` v1 @kind this) @signature `La2/t;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a730.  v0:= 1I;
  #L15a732.  return v0;
}
procedure `a2.a0$a` `h`(`a2.t` v9 @kind this, `long` v10 ) @signature `La2/t;.h:(J)La2/a0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L15a650.  v0:= v9.`a2.t.a` @type ^`a2.u` @kind object;
  #L15a654.  v0:= v0.`a2.u.k` @type ^`a2.u$a` @kind object;
  #L15a658.  call temp:= `h`(v0) @signature `Ls3/a;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L15a65e.  v0:= v9.`a2.t.a` @type ^`a2.u` @kind object;
  #L15a662.  v1:= v0.`a2.u.k` @type ^`a2.u$a` @kind object;
  #L15a666.  v2:= v1.`a2.u$a.a` @type ^`long`[] @kind object;
  #L15a66a.  v1:= v1.`a2.u$a.b` @type ^`long`[] @kind object;
  #L15a66e.  call temp:= `i`(v0, v10) @signature `La2/u;.i:(J)J` @kind virtual;
  #L15a674.  v3:= temp @kind wide;
  #L15a676.  v0:= 1I;
  #L15a678.  v5:= 0I;
  #L15a67a.  call temp:= `i`(v2, v3, v0, v5) @signature `Ls3/l0;.i:([JJZZ)I` @kind static;
  #L15a680.  v3:= temp;
  #L15a682.  v4:= 0L;
  #L15a686.  v6:= -1I;
  #L15a688.  if v3 != v6 then goto L15a690;
  #L15a68c.  v7:= v4 @kind wide;
  #L15a68e.  goto L15a694;
  #L15a690.  v7:= v2[v3] @kind wide;
  #L15a694.  if v3 != v6 then goto L15a69a;
  #L15a698.  goto L15a69e;
  #L15a69a.  v4:= v1[v3] @kind wide;
  #L15a69e.  call temp:= `a`(v9, v7, v4) @signature `La2/t;.a:(JJ)La2/b0;` @kind direct;
  #L15a6a4.  v4:= temp @kind object;
  #L15a6a6.  v5:= v4.`a2.b0.a` @type ^`long` @kind wide;
  #L15a6aa.  v7:= lcmp(v5, v10);
  #L15a6ae.  if v7 == 0 then goto L15a6da;
  #L15a6b2.  v10:= length @variable v2;
  #L15a6b4.  v10:= v10 - v0 @kind int;
  #L15a6b6.  if v3 != v10 then goto L15a6bc;
  #L15a6ba.  goto L15a6da;
  #L15a6bc.  v3:= v3 + v0 @kind int;
  #L15a6be.  v10:= v2[v3] @kind wide;
  #L15a6c2.  v0:= v1[v3] @kind wide;
  #L15a6c6.  call temp:= `a`(v9, v10, v0) @signature `La2/t;.a:(JJ)La2/b0;` @kind direct;
  #L15a6cc.  v10:= temp @kind object;
  #L15a6ce.  v11:= new `a2.a0$a`;
  #L15a6d2.  call `<init>`(v11, v4, v10) @signature `La2/a0$a;.<init>:(La2/b0;La2/b0;)V` @kind direct;
  #L15a6d8.  return v11 @kind object;
  #L15a6da.  v10:= new `a2.a0$a`;
  #L15a6de.  call `<init>`(v10, v4) @signature `La2/a0$a;.<init>:(La2/b0;)V` @kind direct;
  #L15a6e4.  return v10 @kind object;
}
procedure `long` `i`(`a2.t` v2 @kind this) @signature `La2/t;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15a744.  v0:= v2.`a2.t.a` @type ^`a2.u` @kind object;
  #L15a748.  call temp:= `f`(v0) @signature `La2/u;.f:()J` @kind virtual;
  #L15a74e.  v0:= temp @kind wide;
  #L15a750.  return v0 @kind wide;
}
