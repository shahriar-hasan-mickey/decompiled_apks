record `a2.f0` @kind class @AccessFlag PUBLIC_FINAL {
  `byte`[] `a2.f0.a` @AccessFlag PRIVATE_FINAL;
  `int` `a2.f0.b` @AccessFlag PRIVATE_FINAL;
  `int` `a2.f0.c` @AccessFlag PRIVATE;
  `int` `a2.f0.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a2.f0` v0 @kind this, `byte`[] v1 @kind object) @signature `La2/f0;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15b8a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15b8a6.  v0.`a2.f0.a` @type ^`byte`[] := v1 @kind object;
  #L15b8aa.  v1:= length @variable v1;
  #L15b8ac.  v0.`a2.f0.b` @type ^`int` := v1;
  #L15b8b0.  return @kind void;
}
procedure `void` `a`(`a2.f0` v2 @kind this) @signature `La2/f0;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L15b8c4.  v0:= v2.`a2.f0.c` @type ^`int`;
  #L15b8c8.  if v0 < 0 then goto L15b8e4;
  #L15b8cc.  v1:= v2.`a2.f0.b` @type ^`int`;
  #L15b8d0.  if v0 < v1 then goto L15b8e0;
  #L15b8d4.  if v0 != v1 then goto L15b8e4;
  #L15b8d8.  v0:= v2.`a2.f0.d` @type ^`int`;
  #L15b8dc.  if v0 != 0 then goto L15b8e4;
  #L15b8e0.  v0:= 1I;
  #L15b8e2.  goto L15b8e6;
  #L15b8e4.  v0:= 0I;
  #L15b8e6.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L15b8ec.  return @kind void;
}
procedure `int` `b`(`a2.f0` v2 @kind this) @signature `La2/f0;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b808.  v0:= v2.`a2.f0.c` @type ^`int`;
  #L15b80c.  v0:= v0 * 8;
  #L15b810.  v1:= v2.`a2.f0.d` @type ^`int`;
  #L15b814.  v0:= v0 + v1 @kind int;
  #L15b816.  return v0;
}
procedure `boolean` `c`(`a2.f0` v2 @kind this) @signature `La2/f0;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b7cc.  v0:= v2.`a2.f0.a` @type ^`byte`[] @kind object;
  #L15b7d0.  v1:= v2.`a2.f0.c` @type ^`int`;
  #L15b7d4.  v0:= v0[v1] @kind byte;
  #L15b7d8.  v0:= v0 ^& 255;
  #L15b7dc.  v1:= v2.`a2.f0.d` @type ^`int`;
  #L15b7e0.  v0:= v0 ^> v1 @kind int;
  #L15b7e2.  v1:= 1I;
  #L15b7e4.  v0:= v0 ^& v1 @kind int;
  #L15b7e6.  if v0 != v1 then goto L15b7ee;
  #L15b7ea.  v0:= 1I;
  #L15b7ec.  goto L15b7f0;
  #L15b7ee.  v0:= 0I;
  #L15b7f0.  call `e`(v2, v1) @signature `La2/f0;.e:(I)V` @kind virtual;
  #L15b7f6.  return v0;
}
procedure `int` `d`(`a2.f0` v6 @kind this, `int` v7 ) @signature `La2/f0;.d:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15b828.  v0:= v6.`a2.f0.c` @type ^`int`;
  #L15b82c.  v1:= v6.`a2.f0.d` @type ^`int`;
  #L15b830.  v1:= v1 - 8;
  #L15b834.  call temp:= `min`(v7, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L15b83a.  v1:= temp;
  #L15b83c.  v2:= v6.`a2.f0.a` @type ^`byte`[] @kind object;
  #L15b840.  v3:= v0 + 1;
  #L15b844.  v0:= v2[v0] @kind byte;
  #L15b848.  v2:= 255I;
  #L15b84c.  v0:= v0 ^& v2 @kind int;
  #L15b84e.  v4:= v6.`a2.f0.d` @type ^`int`;
  #L15b852.  v0:= v0 ^> v4 @kind int;
  #L15b854.  v4:= v1 - 8;
  #L15b858.  v4:= v2 ^> v4 @kind int;
  #L15b85c.  v0:= v0 ^& v4 @kind int;
  #L15b85e.  if v1 >= v7 then goto L15b87c;
  #L15b862.  v4:= v6.`a2.f0.a` @type ^`byte`[] @kind object;
  #L15b866.  v5:= v3 + 1;
  #L15b86a.  v3:= v4[v3] @kind byte;
  #L15b86e.  v3:= v3 ^& v2 @kind int;
  #L15b870.  v3:= v3 ^< v1 @kind int;
  #L15b872.  v0:= v0 ^| v3 @kind int;
  #L15b874.  v1:= v1 + 8;
  #L15b878.  v3:= v5;
  #L15b87a.  goto L15b85e;
  #L15b87c.  v1:= -1I;
  #L15b87e.  v2:= v7 - 32;
  #L15b882.  v1:= v1 ^>> v2 @kind int;
  #L15b884.  v0:= v0 ^& v1 @kind int;
  #L15b886.  call `e`(v6, v7) @signature `La2/f0;.e:(I)V` @kind virtual;
  #L15b88c.  return v0;
}
procedure `void` `e`(`a2.f0` v3 @kind this, `int` v4 ) @signature `La2/f0;.e:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15b900.  v0:= v4 / 8;
  #L15b904.  v1:= v3.`a2.f0.c` @type ^`int`;
  #L15b908.  v1:= v1 + v0 @kind int;
  #L15b90a.  v3.`a2.f0.c` @type ^`int` := v1;
  #L15b90e.  v2:= v3.`a2.f0.d` @type ^`int`;
  #L15b912.  v0:= v0 * 8;
  #L15b916.  v4:= v4 - v0 @kind int;
  #L15b918.  v2:= v2 + v4 @kind int;
  #L15b91a.  v3.`a2.f0.d` @type ^`int` := v2;
  #L15b91e.  v4:= 7I;
  #L15b920.  if v2 <= v4 then goto L15b934;
  #L15b924.  v1:= v1 + 1;
  #L15b928.  v3.`a2.f0.c` @type ^`int` := v1;
  #L15b92c.  v2:= v2 + -8;
  #L15b930.  v3.`a2.f0.d` @type ^`int` := v2;
  #L15b934.  call `a`(v3) @signature `La2/f0;.a:()V` @kind direct;
  #L15b93a.  return @kind void;
}
