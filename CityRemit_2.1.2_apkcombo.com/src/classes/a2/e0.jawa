record `a2.e0` @kind class @AccessFlag PUBLIC_FINAL {
  `byte`[] `a2.e0.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `a2.e0.b` @AccessFlag PRIVATE;
  `int` `a2.e0.c` @AccessFlag PRIVATE;
  `long` `a2.e0.d` @AccessFlag PRIVATE;
  `int` `a2.e0.e` @AccessFlag PRIVATE;
  `int` `a2.e0.f` @AccessFlag PRIVATE;
  `int` `a2.e0.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a2.e0` v1 @kind this) @signature `La2/e0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15b690.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15b696.  v0:= 10I;
  #L15b69a.  v0:= new `byte`[v0];
  #L15b69e.  v1.`a2.e0.a` @type ^`byte`[] := v0 @kind object;
  #L15b6a2.  return @kind void;
}
procedure `void` `a`(`a2.e0` v8 @kind this, `a2.d0` v9 @kind object, `a2.d0$a` v10 @kind object) @signature `La2/e0;.a:(La2/d0;La2/d0$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L15b6b4.  v0:= v8.`a2.e0.c` @type ^`int`;
  #L15b6b8.  if v0 <= 0 then goto L15b6dc;
  #L15b6bc.  v2:= v8.`a2.e0.d` @type ^`long` @kind wide;
  #L15b6c0.  v4:= v8.`a2.e0.e` @type ^`int`;
  #L15b6c4.  v5:= v8.`a2.e0.f` @type ^`int`;
  #L15b6c8.  v6:= v8.`a2.e0.g` @type ^`int`;
  #L15b6cc.  v1:= v9 @kind object;
  #L15b6ce.  v7:= v10 @kind object;
  #L15b6d0.  call `f`(v1, v2, v4, v5, v6, v7) @signature `La2/d0;.f:(JIIILa2/d0$a;)V` @kind interface;
  #L15b6d6.  v9:= 0I;
  #L15b6d8.  v8.`a2.e0.c` @type ^`int` := v9;
  #L15b6dc.  return @kind void;
}
procedure `void` `b`(`a2.e0` v1 @kind this) @signature `La2/e0;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b6f0.  v0:= 0I;
  #L15b6f2.  v1.`a2.e0.b` @type ^`boolean` := v0 @kind boolean;
  #L15b6f6.  v1.`a2.e0.c` @type ^`int` := v0;
  #L15b6fa.  return @kind void;
}
procedure `void` `c`(`a2.e0` v3 @kind this, `a2.d0` v4 @kind object, `long` v5 , `int` v7 , `int` v8 , `int` v9 , `a2.d0$a` v10 @kind object) @signature `La2/e0;.c:(La2/d0;JIIILa2/d0$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15b70c.  v0:= v3.`a2.e0.g` @type ^`int`;
  #L15b710.  v1:= v8 + v9 @kind int;
  #L15b714.  v2:= 0I;
  #L15b716.  if v0 > v1 then goto L15b71e;
  #L15b71a.  v0:= 1I;
  #L15b71c.  goto L15b720;
  #L15b71e.  v0:= 0I;
  #L15b720.  v1:= "TrueHD chunk samples must be contiguous in the sample queue." @kind object;
  #L15b724.  call `g`(v0, v1) @signature `Ls3/a;.g:(ZLjava/lang/Object;)V` @kind static;
  #L15b72a.  v0:= v3.`a2.e0.b` @type ^`boolean` @kind boolean;
  #L15b72e.  if v0 != 0 then goto L15b734;
  #L15b732.  return @kind void;
  #L15b734.  v0:= v3.`a2.e0.c` @type ^`int`;
  #L15b738.  v1:= v0 + 1;
  #L15b73c.  v3.`a2.e0.c` @type ^`int` := v1;
  #L15b740.  if v0 != 0 then goto L15b750;
  #L15b744.  v3.`a2.e0.d` @type ^`long` := v5 @kind wide;
  #L15b748.  v3.`a2.e0.e` @type ^`int` := v7;
  #L15b74c.  v3.`a2.e0.f` @type ^`int` := v2;
  #L15b750.  v5:= v3.`a2.e0.f` @type ^`int`;
  #L15b754.  v5:= v5 + v8 @kind int;
  #L15b756.  v3.`a2.e0.f` @type ^`int` := v5;
  #L15b75a.  v3.`a2.e0.g` @type ^`int` := v9;
  #L15b75e.  v5:= 16I;
  #L15b762.  if v1 < v5 then goto L15b76c;
  #L15b766.  call `a`(v3, v4, v10) @signature `La2/e0;.a:(La2/d0;La2/d0$a;)V` @kind virtual;
  #L15b76c.  return @kind void;
}
procedure `void` `d`(`a2.e0` v3 @kind this, `a2.m` v4 @kind object) @signature `La2/e0;.d:(La2/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15b780.  v0:= v3.`a2.e0.b` @type ^`boolean` @kind boolean;
  #L15b784.  if v0 == 0 then goto L15b78a;
  #L15b788.  return @kind void;
  #L15b78a.  v0:= v3.`a2.e0.a` @type ^`byte`[] @kind object;
  #L15b78e.  v1:= 0I;
  #L15b790.  v2:= 10I;
  #L15b794.  call `o`(v4, v0, v1, v2) @signature `La2/m;.o:([BII)V` @kind interface;
  #L15b79a.  call `i`(v4) @signature `La2/m;.i:()V` @kind interface;
  #L15b7a0.  v4:= v3.`a2.e0.a` @type ^`byte`[] @kind object;
  #L15b7a4.  call temp:= `i`(v4) @signature `Lx1/b;.i:([B)I` @kind static;
  #L15b7aa.  v4:= temp;
  #L15b7ac.  if v4 != 0 then goto L15b7b2;
  #L15b7b0.  return @kind void;
  #L15b7b2.  v4:= 1I;
  #L15b7b4.  v3.`a2.e0.b` @type ^`boolean` := v4 @kind boolean;
  #L15b7b8.  return @kind void;
}
