record `a2.y` @kind class @AccessFlag PUBLIC_FINAL extends `a2.a0` @kind interface {
  `long`[] `a2.y.a` @AccessFlag PRIVATE_FINAL;
  `long`[] `a2.y.b` @AccessFlag PRIVATE_FINAL;
  `long` `a2.y.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `a2.y.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a2.y` v8 @kind this, `long`[] v9 @kind object, `long`[] v10 @kind object, `long` v11 ) @signature `La2/y;.<init>:([J[JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L15b1b4.  call `<init>`(v8) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15b1ba.  v0:= length @variable v9;
  #L15b1bc.  v1:= length @variable v10;
  #L15b1be.  v2:= 1I;
  #L15b1c0.  v3:= 0I;
  #L15b1c2.  if v0 != v1 then goto L15b1ca;
  #L15b1c6.  v0:= 1I;
  #L15b1c8.  goto L15b1cc;
  #L15b1ca.  v0:= 0I;
  #L15b1cc.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L15b1d2.  v0:= length @variable v10;
  #L15b1d4.  if v0 <= 0 then goto L15b1dc;
  #L15b1d8.  v1:= 1I;
  #L15b1da.  goto L15b1de;
  #L15b1dc.  v1:= 0I;
  #L15b1de.  v8.`a2.y.d` @type ^`boolean` := v1 @kind boolean;
  #L15b1e2.  if v1 == 0 then goto L15b218;
  #L15b1e6.  v4:= v10[v3] @kind wide;
  #L15b1ea.  v6:= 0L;
  #L15b1ee.  v1:= lcmp(v4, v6);
  #L15b1f2.  if v1 <= 0 then goto L15b218;
  #L15b1f6.  v1:= v0 + 1;
  #L15b1fa.  v4:= new `long`[v1];
  #L15b1fe.  v8.`a2.y.a` @type ^`long`[] := v4 @kind object;
  #L15b202.  v1:= new `long`[v1];
  #L15b206.  v8.`a2.y.b` @type ^`long`[] := v1 @kind object;
  #L15b20a.  call `arraycopy`(v9, v3, v4, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15b210.  call `arraycopy`(v10, v3, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15b216.  goto L15b220;
  #L15b218.  v8.`a2.y.a` @type ^`long`[] := v9 @kind object;
  #L15b21c.  v8.`a2.y.b` @type ^`long`[] := v10 @kind object;
  #L15b220.  v8.`a2.y.c` @type ^`long` := v11 @kind wide;
  #L15b224.  return @kind void;
}
procedure `boolean` `f`(`a2.y` v1 @kind this) @signature `La2/y;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b184.  v0:= v1.`a2.y.d` @type ^`boolean` @kind boolean;
  #L15b188.  return v0;
}
procedure `a2.a0$a` `h`(`a2.y` v8 @kind this, `long` v9 ) @signature `La2/y;.h:(J)La2/a0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L15b0e4.  v0:= v8.`a2.y.d` @type ^`boolean` @kind boolean;
  #L15b0e8.  if v0 != 0 then goto L15b0fc;
  #L15b0ec.  v9:= new `a2.a0$a`;
  #L15b0f0.  v10:= `@@a2.b0.c` @type ^`a2.b0` @kind object;
  #L15b0f4.  call `<init>`(v9, v10) @signature `La2/a0$a;.<init>:(La2/b0;)V` @kind direct;
  #L15b0fa.  return v9 @kind object;
  #L15b0fc.  v0:= v8.`a2.y.b` @type ^`long`[] @kind object;
  #L15b100.  v1:= 1I;
  #L15b102.  call temp:= `i`(v0, v9, v1, v1) @signature `Ls3/l0;.i:([JJZZ)I` @kind static;
  #L15b108.  v0:= temp;
  #L15b10a.  v2:= new `a2.b0`;
  #L15b10e.  v3:= v8.`a2.y.b` @type ^`long`[] @kind object;
  #L15b112.  v4:= v3[v0] @kind wide;
  #L15b116.  v3:= v8.`a2.y.a` @type ^`long`[] @kind object;
  #L15b11a.  v6:= v3[v0] @kind wide;
  #L15b11e.  call `<init>`(v2, v4, v6) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L15b124.  v3:= v2.`a2.b0.a` @type ^`long` @kind wide;
  #L15b128.  v5:= lcmp(v3, v9);
  #L15b12c.  if v5 == 0 then goto L15b166;
  #L15b130.  v9:= v8.`a2.y.b` @type ^`long`[] @kind object;
  #L15b134.  v9:= length @variable v9;
  #L15b136.  v9:= v9 - v1 @kind int;
  #L15b138.  if v0 != v9 then goto L15b13e;
  #L15b13c.  goto L15b166;
  #L15b13e.  v9:= new `a2.b0`;
  #L15b142.  v10:= v8.`a2.y.b` @type ^`long`[] @kind object;
  #L15b146.  v0:= v0 + v1 @kind int;
  #L15b148.  v3:= v10[v0] @kind wide;
  #L15b14c.  v10:= v8.`a2.y.a` @type ^`long`[] @kind object;
  #L15b150.  v0:= v10[v0] @kind wide;
  #L15b154.  call `<init>`(v9, v3, v0) @signature `La2/b0;.<init>:(JJ)V` @kind direct;
  #L15b15a.  v10:= new `a2.a0$a`;
  #L15b15e.  call `<init>`(v10, v2, v9) @signature `La2/a0$a;.<init>:(La2/b0;La2/b0;)V` @kind direct;
  #L15b164.  return v10 @kind object;
  #L15b166.  v9:= new `a2.a0$a`;
  #L15b16a.  call `<init>`(v9, v2) @signature `La2/a0$a;.<init>:(La2/b0;)V` @kind direct;
  #L15b170.  return v9 @kind object;
}
procedure `long` `i`(`a2.y` v2 @kind this) @signature `La2/y;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b19c.  v0:= v2.`a2.y.c` @type ^`long` @kind wide;
  #L15b1a0.  return v0 @kind wide;
}
