record `a2.a0$a` @kind class @AccessFlag PUBLIC_FINAL {
  `a2.b0` `a2.a0$a.a` @AccessFlag PUBLIC_FINAL;
  `a2.b0` `a2.a0$a.b` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`a2.a0$a` v0 @kind this, `a2.b0` v1 @kind object) @signature `La2/a0$a;.<init>:(La2/b0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15b36c.  call `<init>`(v0, v1, v1) @signature `La2/a0$a;.<init>:(La2/b0;La2/b0;)V` @kind direct;
  #L15b372.  return @kind void;
}
procedure `void` `<init>`(`a2.a0$a` v0 @kind this, `a2.b0` v1 @kind object, `a2.b0` v2 @kind object) @signature `La2/a0$a;.<init>:(La2/b0;La2/b0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15b384.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15b38a.  call temp:= `e`(v1) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L15b390.  v1:= temp @kind object;
  #L15b392.  v1:= (`a2.b0`) v1 @kind object;
  #L15b396.  v0.`a2.a0$a.a` @type ^`a2.b0` := v1 @kind object;
  #L15b39a.  call temp:= `e`(v2) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L15b3a0.  v1:= temp @kind object;
  #L15b3a2.  v1:= (`a2.b0`) v1 @kind object;
  #L15b3a6.  v0.`a2.a0$a.b` @type ^`a2.b0` := v1 @kind object;
  #L15b3aa.  return @kind void;
}
procedure `boolean` `equals`(`a2.a0$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `La2/a0$a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15b250.  v0:= 1I;
  #L15b252.  if v4 != v5 then goto L15b258;
  #L15b256.  return v0;
  #L15b258.  v1:= 0I;
  #L15b25a.  if v5 == 0 then goto L15b2a2;
  #L15b25e.  v2:= constclass @type ^`a2.a0$a` @kind object;
  #L15b262.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15b268.  v3:= temp @kind object;
  #L15b26a.  if v2 == v3 then goto L15b270;
  #L15b26e.  goto L15b2a2;
  #L15b270.  v5:= (`a2.a0$a`) v5 @kind object;
  #L15b274.  v2:= v4.`a2.a0$a.a` @type ^`a2.b0` @kind object;
  #L15b278.  v3:= v5.`a2.a0$a.a` @type ^`a2.b0` @kind object;
  #L15b27c.  call temp:= `equals`(v2, v3) @signature `La2/b0;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15b282.  v2:= temp;
  #L15b284.  if v2 == 0 then goto L15b29e;
  #L15b288.  v2:= v4.`a2.a0$a.b` @type ^`a2.b0` @kind object;
  #L15b28c.  v5:= v5.`a2.a0$a.b` @type ^`a2.b0` @kind object;
  #L15b290.  call temp:= `equals`(v2, v5) @signature `La2/b0;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15b296.  v5:= temp;
  #L15b298.  if v5 == 0 then goto L15b29e;
  #L15b29c.  goto L15b2a0;
  #L15b29e.  v0:= 0I;
  #L15b2a0.  return v0;
  #L15b2a2.  return v1;
}
procedure `int` `hashCode`(`a2.a0$a` v2 @kind this) @signature `La2/a0$a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b2b4.  v0:= v2.`a2.a0$a.a` @type ^`a2.b0` @kind object;
  #L15b2b8.  call temp:= `hashCode`(v0) @signature `La2/b0;.hashCode:()I` @kind virtual;
  #L15b2be.  v0:= temp;
  #L15b2c0.  v0:= v0 * 31;
  #L15b2c4.  v1:= v2.`a2.a0$a.b` @type ^`a2.b0` @kind object;
  #L15b2c8.  call temp:= `hashCode`(v1) @signature `La2/b0;.hashCode:()I` @kind virtual;
  #L15b2ce.  v1:= temp;
  #L15b2d0.  v0:= v0 + v1 @kind int;
  #L15b2d2.  return v0;
}
procedure `java.lang.String` `toString`(`a2.a0$a` v3 @kind this) @signature `La2/a0$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15b2e4.  v0:= new `java.lang.StringBuilder`;
  #L15b2e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15b2ee.  v1:= "[" @kind object;
  #L15b2f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b2f8.  v1:= v3.`a2.a0$a.a` @type ^`a2.b0` @kind object;
  #L15b2fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b302.  v1:= v3.`a2.a0$a.a` @type ^`a2.b0` @kind object;
  #L15b306.  v2:= v3.`a2.a0$a.b` @type ^`a2.b0` @kind object;
  #L15b30a.  call temp:= `equals`(v1, v2) @signature `La2/b0;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15b310.  v1:= temp;
  #L15b312.  if v1 == 0 then goto L15b31c;
  #L15b316.  v1:= "" @kind object;
  #L15b31a.  goto L15b342;
  #L15b31c.  v1:= new `java.lang.StringBuilder`;
  #L15b320.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15b326.  v2:= ", " @kind object;
  #L15b32a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b330.  v2:= v3.`a2.a0$a.b` @type ^`a2.b0` @kind object;
  #L15b334.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b33a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b340.  v1:= temp @kind object;
  #L15b342.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b348.  v1:= "]" @kind object;
  #L15b34c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b352.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b358.  v0:= temp @kind object;
  #L15b35a.  return v0 @kind object;
}
