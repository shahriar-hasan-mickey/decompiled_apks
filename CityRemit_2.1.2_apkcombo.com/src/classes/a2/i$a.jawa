record `a2.i$a` @kind class @AccessFlag FINAL {
  `a2.i$a$a` `a2.i$a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `a2.i$a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Constructor` `a2.i$a.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a2.i$a` v1 @kind this, `a2.i$a$a` v2 @kind object) @signature `La2/i$a;.<init>:(La2/i$a$a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L159660.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L159666.  v1.`a2.i$a.a` @type ^`a2.i$a$a` := v2 @kind object;
  #L15966a.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L15966e.  v0:= 0I;
  #L159670.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L159676.  v1.`a2.i$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L15967a.  return @kind void;
}
procedure `java.lang.reflect.Constructor` `b`(`a2.i$a` v4 @kind this) @signature `La2/i$a;.b:()Ljava/lang/reflect/Constructor;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1595d0.  v0:= v4.`a2.i$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L1595d4.  @monitorenter v0
  #L1595d6.  v1:= v4.`a2.i$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L1595da.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L1595e0.  v1:= temp;
  #L1595e2.  if v1 == 0 then goto L1595ee;
  #L1595e6.  v1:= v4.`a2.i$a.c` @type ^`java.lang.reflect.Constructor` @kind object;
  #L1595ea.  @monitorexit v0
  #L1595ec.  return v1 @kind object;
  #L1595ee.  v1:= v4.`a2.i$a.a` @type ^`a2.i$a$a` @kind object;
  #L1595f2.  call temp:= `a`(v1) @signature `La2/i$a$a;.a:()Ljava/lang/reflect/Constructor;` @kind interface;
  #L1595f8.  v1:= temp @kind object;
  #L1595fa.  @monitorexit v0
  #L1595fc.  return v1 @kind object;
  #L1595fe.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L159600.  v2:= new `java.lang.RuntimeException`;
  #L159604.  v3:= "Error instantiating extension" @kind object;
  #L159608.  call `<init>`(v2, v3, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L15960e.  throw v2;
  #L159610.  v1:= v4.`a2.i$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L159614.  v2:= 1I;
  #L159616.  call `set`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L15961c.  v1:= v4.`a2.i$a.c` @type ^`java.lang.reflect.Constructor` @kind object;
  #L159620.  @monitorexit v0
  #L159622.  return v1 @kind object;
  #L159624.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L159626.  @monitorexit v0
  #L159628.  throw v1;
  catch `java.lang.Throwable` @[L1595d6..L1595ec] goto L159624;
  catch `java.lang.ClassNotFoundException` @[L1595ee..L1595fa] goto L159610;
  catch `java.lang.Exception` @[L1595ee..L1595fa] goto L1595fe;
  catch `java.lang.Throwable` @[L1595ee..L1595fa] goto L159624;
  catch `java.lang.Throwable` @[L1595fa..L159628] goto L159624;
}
procedure `a2.l` `a`(`a2.i$a` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `La2/i$a;.a:([Ljava/lang/Object;)La2/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159580.  call temp:= `b`(v2) @signature `La2/i$a;.b:()Ljava/lang/reflect/Constructor;` @kind direct;
  #L159586.  v0:= temp @kind object;
  #L159588.  if v0 != 0 then goto L159590;
  #L15958c.  v3:= 0I;
  #L15958e.  return v3 @kind object;
  #L159590.  call temp:= `newInstance`(v0, v3) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L159596.  v3:= temp @kind object;
  #L159598.  v3:= (`a2.l`) v3 @kind object;
  #L15959c.  return v3 @kind object;
  #L15959e.  v3:= Exception @type ^`java.lang.Exception` @kind object;
  #L1595a0.  v0:= new `java.lang.IllegalStateException`;
  #L1595a4.  v1:= "Unexpected error creating extractor" @kind object;
  #L1595a8.  call `<init>`(v0, v1, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1595ae.  throw v0;
  catch `java.lang.Exception` @[L159590..L15959c] goto L15959e;
}
