record `f8.b$c` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface, `java.io.Serializable` @kind interface {
  `java.lang.reflect.Type` `f8.b$c.o` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `f8.b$c.p` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f8.b$c` v4 @kind this, `java.lang.reflect.Type`[] v5 @kind object, `java.lang.reflect.Type`[] v6 @kind object) @signature `Lf8/b$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30bcdc.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L30bce0.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30bce6.  v1:= length @variable v6;
  #L30bce8.  v2:= 1I;
  #L30bcea.  v3:= 0I;
  #L30bcec.  if v1 > v2 then goto L30bcf4;
  #L30bcf0.  v1:= 1I;
  #L30bcf2.  goto L30bcf6;
  #L30bcf4.  v1:= 0I;
  #L30bcf6.  call `a`(v1) @signature `Lf8/a;.a:(Z)V` @kind static;
  #L30bcfc.  v1:= length @variable v5;
  #L30bcfe.  if v1 != v2 then goto L30bd06;
  #L30bd02.  v1:= 1I;
  #L30bd04.  goto L30bd08;
  #L30bd06.  v1:= 0I;
  #L30bd08.  call `a`(v1) @signature `Lf8/a;.a:(Z)V` @kind static;
  #L30bd0e.  v1:= length @variable v6;
  #L30bd10.  if v1 != v2 then goto L30bd50;
  #L30bd14.  v1:= v6[v3] @kind object;
  #L30bd18.  call temp:= `b`(v1) @signature `Lf8/a;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L30bd1e.  v1:= v6[v3] @kind object;
  #L30bd22.  call `c`(v1) @signature `Lf8/b;.c:(Ljava/lang/reflect/Type;)V` @kind static;
  #L30bd28.  v5:= v5[v3] @kind object;
  #L30bd2c.  if v5 != v0 then goto L30bd32;
  #L30bd30.  goto L30bd34;
  #L30bd32.  v2:= 0I;
  #L30bd34.  call `a`(v2) @signature `Lf8/a;.a:(Z)V` @kind static;
  #L30bd3a.  v5:= v6[v3] @kind object;
  #L30bd3e.  call temp:= `b`(v5) @signature `Lf8/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L30bd44.  v5:= temp @kind object;
  #L30bd46.  v4.`f8.b$c.p` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L30bd4a.  v4.`f8.b$c.o` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L30bd4e.  goto L30bd7a;
  #L30bd50.  v6:= v5[v3] @kind object;
  #L30bd54.  call temp:= `b`(v6) @signature `Lf8/a;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L30bd5a.  v6:= v5[v3] @kind object;
  #L30bd5e.  call `c`(v6) @signature `Lf8/b;.c:(Ljava/lang/reflect/Type;)V` @kind static;
  #L30bd64.  v6:= 0I;
  #L30bd66.  v4.`f8.b$c.p` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L30bd6a.  v5:= v5[v3] @kind object;
  #L30bd6e.  call temp:= `b`(v5) @signature `Lf8/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L30bd74.  v5:= temp @kind object;
  #L30bd76.  v4.`f8.b$c.o` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L30bd7a.  return @kind void;
}
procedure `boolean` `equals`(`f8.b$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf8/b$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30bbac.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L30bbb0.  if v0 == 0 then goto L30bbc8;
  #L30bbb4.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L30bbb8.  call temp:= `f`(v1, v2) @signature `Lf8/b;.f:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L30bbbe.  v2:= temp;
  #L30bbc0.  if v2 == 0 then goto L30bbc8;
  #L30bbc4.  v2:= 1I;
  #L30bbc6.  goto L30bbca;
  #L30bbc8.  v2:= 0I;
  #L30bbca.  return v2;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`f8.b$c` v3 @kind this) @signature `Lf8/b$c;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30bc8c.  v0:= v3.`f8.b$c.p` @type ^`java.lang.reflect.Type` @kind object;
  #L30bc90.  if v0 == 0 then goto L30bca2;
  #L30bc94.  v1:= 1I;
  #L30bc96.  v1:= new `java.lang.reflect.Type`[v1];
  #L30bc9a.  v2:= 0I;
  #L30bc9c.  v1[v2]:= v0 @kind object;
  #L30bca0.  goto L30bca6;
  #L30bca2.  v1:= `@@f8.b.a` @type ^`java.lang.reflect.Type`[] @kind object;
  #L30bca6.  return v1 @kind object;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`f8.b$c` v3 @kind this) @signature `Lf8/b$c;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30bcb8.  v0:= 1I;
  #L30bcba.  v0:= new `java.lang.reflect.Type`[v0];
  #L30bcbe.  v1:= v3.`f8.b$c.o` @type ^`java.lang.reflect.Type` @kind object;
  #L30bcc2.  v2:= 0I;
  #L30bcc4.  v0[v2]:= v1 @kind object;
  #L30bcc8.  return v0 @kind object;
}
procedure `int` `hashCode`(`f8.b$c` v2 @kind this) @signature `Lf8/b$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30bbdc.  v0:= v2.`f8.b$c.p` @type ^`java.lang.reflect.Type` @kind object;
  #L30bbe0.  if v0 == 0 then goto L30bbf2;
  #L30bbe4.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30bbea.  v0:= temp;
  #L30bbec.  v0:= v0 + 31;
  #L30bbf0.  goto L30bbf4;
  #L30bbf2.  v0:= 1I;
  #L30bbf4.  v1:= v2.`f8.b$c.o` @type ^`java.lang.reflect.Type` @kind object;
  #L30bbf8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30bbfe.  v1:= temp;
  #L30bc00.  v1:= v1 + 31;
  #L30bc04.  v0:= v0 ^~ v1 @kind int;
  #L30bc06.  return v0;
}
procedure `java.lang.String` `toString`(`f8.b$c` v2 @kind this) @signature `Lf8/b$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30bc18.  v0:= v2.`f8.b$c.p` @type ^`java.lang.reflect.Type` @kind object;
  #L30bc1c.  if v0 == 0 then goto L30bc50;
  #L30bc20.  v0:= new `java.lang.StringBuilder`;
  #L30bc24.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30bc2a.  v1:= "? super " @kind object;
  #L30bc2e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30bc34.  v1:= v2.`f8.b$c.p` @type ^`java.lang.reflect.Type` @kind object;
  #L30bc38.  call temp:= `u`(v1) @signature `Lf8/b;.u:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L30bc3e.  v1:= temp @kind object;
  #L30bc40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30bc46.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30bc4c.  v0:= temp @kind object;
  #L30bc4e.  return v0 @kind object;
  #L30bc50.  v0:= v2.`f8.b$c.o` @type ^`java.lang.reflect.Type` @kind object;
  #L30bc54.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L30bc58.  if v0 != v1 then goto L30bc62;
  #L30bc5c.  v0:= "?" @kind object;
  #L30bc60.  return v0 @kind object;
  #L30bc62.  v0:= new `java.lang.StringBuilder`;
  #L30bc66.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30bc6c.  v1:= "? extends " @kind object;
  #L30bc70.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30bc76.  v1:= v2.`f8.b$c.o` @type ^`java.lang.reflect.Type` @kind object;
  #L30bc7a.  goto L30bc38;
}
