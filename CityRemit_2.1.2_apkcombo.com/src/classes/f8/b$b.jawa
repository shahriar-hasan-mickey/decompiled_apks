record `f8.b$b` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface, `java.io.Serializable` @kind interface {
  `java.lang.reflect.Type` `f8.b$b.o` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `f8.b$b.p` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `f8.b$b.q` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f8.b$b` v4 @kind this, `java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lf8/b$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30badc.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30bae2.  v0:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L30bae6.  v1:= 0I;
  #L30bae8.  if v0 == 0 then goto L30bb2e;
  #L30baec.  v0:= v6 @kind object;
  #L30baee.  v0:= (`java.lang.Class`) v0 @kind object;
  #L30baf2.  call temp:= `getModifiers`(v0) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L30baf8.  v2:= temp;
  #L30bafa.  call temp:= `isStatic`(v2) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L30bb00.  v2:= temp;
  #L30bb02.  v3:= 1I;
  #L30bb04.  if v2 != 0 then goto L30bb1a;
  #L30bb08.  call temp:= `getEnclosingClass`(v0) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L30bb0e.  v0:= temp @kind object;
  #L30bb10.  if v0 != 0 then goto L30bb16;
  #L30bb14.  goto L30bb1a;
  #L30bb16.  v0:= 0I;
  #L30bb18.  goto L30bb1c;
  #L30bb1a.  v0:= 1I;
  #L30bb1c.  if v5 != 0 then goto L30bb28;
  #L30bb20.  if v0 == 0 then goto L30bb26;
  #L30bb24.  goto L30bb28;
  #L30bb26.  v3:= 0I;
  #L30bb28.  call `a`(v3) @signature `Lf8/a;.a:(Z)V` @kind static;
  #L30bb2e.  if v5 != 0 then goto L30bb36;
  #L30bb32.  v5:= 0I;
  #L30bb34.  goto L30bb3e;
  #L30bb36.  call temp:= `b`(v5) @signature `Lf8/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L30bb3c.  v5:= temp @kind object;
  #L30bb3e.  v4.`f8.b$b.o` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L30bb42.  call temp:= `b`(v6) @signature `Lf8/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L30bb48.  v5:= temp @kind object;
  #L30bb4a.  v4.`f8.b$b.p` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L30bb4e.  call temp:= `clone`(v7) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L30bb54.  v5:= temp @kind object;
  #L30bb56.  v5:= (`java.lang.reflect.Type`[]) v5 @kind object;
  #L30bb5a.  v4.`f8.b$b.q` @type ^`java.lang.reflect.Type`[] := v5 @kind object;
  #L30bb5e.  v5:= length @variable v5;
  #L30bb60.  if v1 >= v5 then goto L30bb9a;
  #L30bb64.  v6:= v4.`f8.b$b.q` @type ^`java.lang.reflect.Type`[] @kind object;
  #L30bb68.  v6:= v6[v1] @kind object;
  #L30bb6c.  call temp:= `b`(v6) @signature `Lf8/a;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L30bb72.  v6:= v4.`f8.b$b.q` @type ^`java.lang.reflect.Type`[] @kind object;
  #L30bb76.  v6:= v6[v1] @kind object;
  #L30bb7a.  call `c`(v6) @signature `Lf8/b;.c:(Ljava/lang/reflect/Type;)V` @kind static;
  #L30bb80.  v6:= v4.`f8.b$b.q` @type ^`java.lang.reflect.Type`[] @kind object;
  #L30bb84.  v7:= v6[v1] @kind object;
  #L30bb88.  call temp:= `b`(v7) @signature `Lf8/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L30bb8e.  v7:= temp @kind object;
  #L30bb90.  v6[v1]:= v7 @kind object;
  #L30bb94.  v1:= v1 + 1;
  #L30bb98.  goto L30bb60;
  #L30bb9a.  return @kind void;
}
procedure `boolean` `equals`(`f8.b$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf8/b$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30b96c.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L30b970.  if v0 == 0 then goto L30b988;
  #L30b974.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L30b978.  call temp:= `f`(v1, v2) @signature `Lf8/b;.f:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L30b97e.  v2:= temp;
  #L30b980.  if v2 == 0 then goto L30b988;
  #L30b984.  v2:= 1I;
  #L30b986.  goto L30b98a;
  #L30b988.  v2:= 0I;
  #L30b98a.  return v2;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`f8.b$b` v1 @kind this) @signature `Lf8/b$b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30bab8.  v0:= v1.`f8.b$b.q` @type ^`java.lang.reflect.Type`[] @kind object;
  #L30babc.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L30bac2.  v0:= temp @kind object;
  #L30bac4.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L30bac8.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`f8.b$b` v1 @kind this) @signature `Lf8/b$b;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30ba88.  v0:= v1.`f8.b$b.o` @type ^`java.lang.reflect.Type` @kind object;
  #L30ba8c.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`f8.b$b` v1 @kind this) @signature `Lf8/b$b;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30baa0.  v0:= v1.`f8.b$b.p` @type ^`java.lang.reflect.Type` @kind object;
  #L30baa4.  return v0 @kind object;
}
procedure `int` `hashCode`(`f8.b$b` v2 @kind this) @signature `Lf8/b$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30b99c.  v0:= v2.`f8.b$b.q` @type ^`java.lang.reflect.Type`[] @kind object;
  #L30b9a0.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L30b9a6.  v0:= temp;
  #L30b9a8.  v1:= v2.`f8.b$b.p` @type ^`java.lang.reflect.Type` @kind object;
  #L30b9ac.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30b9b2.  v1:= temp;
  #L30b9b4.  v0:= v0 ^~ v1 @kind int;
  #L30b9b6.  v1:= v2.`f8.b$b.o` @type ^`java.lang.reflect.Type` @kind object;
  #L30b9ba.  call temp:= `m`(v1) @signature `Lf8/b;.m:(Ljava/lang/Object;)I` @kind static;
  #L30b9c0.  v1:= temp;
  #L30b9c2.  v0:= v0 ^~ v1 @kind int;
  #L30b9c4.  return v0;
}
procedure `java.lang.String` `toString`(`f8.b$b` v4 @kind this) @signature `Lf8/b$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30b9d8.  v0:= v4.`f8.b$b.q` @type ^`java.lang.reflect.Type`[] @kind object;
  #L30b9dc.  v0:= length @variable v0;
  #L30b9de.  if v0 != 0 then goto L30b9f0;
  #L30b9e2.  v0:= v4.`f8.b$b.p` @type ^`java.lang.reflect.Type` @kind object;
  #L30b9e6.  call temp:= `u`(v0) @signature `Lf8/b;.u:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L30b9ec.  v0:= temp @kind object;
  #L30b9ee.  return v0 @kind object;
  #L30b9f0.  v1:= new `java.lang.StringBuilder`;
  #L30b9f4.  v2:= v0 + 1;
  #L30b9f8.  v2:= v2 * 30;
  #L30b9fc.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L30ba02.  v2:= v4.`f8.b$b.p` @type ^`java.lang.reflect.Type` @kind object;
  #L30ba06.  call temp:= `u`(v2) @signature `Lf8/b;.u:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L30ba0c.  v2:= temp @kind object;
  #L30ba0e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30ba14.  v2:= "<" @kind object;
  #L30ba18.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30ba1e.  v2:= v4.`f8.b$b.q` @type ^`java.lang.reflect.Type`[] @kind object;
  #L30ba22.  v3:= 0I;
  #L30ba24.  v2:= v2[v3] @kind object;
  #L30ba28.  call temp:= `u`(v2) @signature `Lf8/b;.u:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L30ba2e.  v2:= temp @kind object;
  #L30ba30.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30ba36.  v2:= 1I;
  #L30ba38.  if v2 >= v0 then goto L30ba62;
  #L30ba3c.  v3:= ", " @kind object;
  #L30ba40.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30ba46.  v3:= v4.`f8.b$b.q` @type ^`java.lang.reflect.Type`[] @kind object;
  #L30ba4a.  v3:= v3[v2] @kind object;
  #L30ba4e.  call temp:= `u`(v3) @signature `Lf8/b;.u:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L30ba54.  v3:= temp @kind object;
  #L30ba56.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30ba5c.  v2:= v2 + 1;
  #L30ba60.  goto L30ba38;
  #L30ba62.  v0:= ">" @kind object;
  #L30ba66.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30ba6c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30ba72.  v0:= temp @kind object;
  #L30ba74.  return v0 @kind object;
}
