record `f8.l$a$a` @kind class @AccessFlag  extends `java.lang.CharSequence` @kind interface {
  `char`[] `f8.l$a$a.o` @AccessFlag ;
}
procedure `void` `<init>`(`f8.l$a$a` v0 @kind this) @signature `Lf8/l$a$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30e4ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30e4f2.  return @kind void;
}
procedure `char` `charAt`(`f8.l$a$a` v1 @kind this, `int` v2 ) @signature `Lf8/l$a$a;.charAt:(I)C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30e494.  v0:= v1.`f8.l$a$a.o` @type ^`char`[] @kind object;
  #L30e498.  v2:= v0[v2] @kind char;
  #L30e49c.  return v2;
}
procedure `int` `length`(`f8.l$a$a` v1 @kind this) @signature `Lf8/l$a$a;.length:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30e4b0.  v0:= v1.`f8.l$a$a.o` @type ^`char`[] @kind object;
  #L30e4b4.  v0:= length @variable v0;
  #L30e4b6.  return v0;
}
procedure `java.lang.CharSequence` `subSequence`(`f8.l$a$a` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lf8/l$a$a;.subSequence:(II)Ljava/lang/CharSequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30e4c8.  v0:= new `java.lang.String`;
  #L30e4cc.  v1:= v2.`f8.l$a$a.o` @type ^`char`[] @kind object;
  #L30e4d0.  v4:= v4 - v3 @kind int;
  #L30e4d2.  call `<init>`(v0, v1, v3, v4) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L30e4d8.  return v0 @kind object;
}
