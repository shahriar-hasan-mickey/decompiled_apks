record `f8.d` @kind class @AccessFlag PUBLIC_FINAL extends `d8.x` @kind interface, `java.lang.Cloneable` @kind interface {
  `double` `f8.d.o` @AccessFlag PRIVATE;
  `int` `f8.d.p` @AccessFlag PRIVATE;
  `boolean` `f8.d.q` @AccessFlag PRIVATE;
  `boolean` `f8.d.r` @AccessFlag PRIVATE;
  `java.util.List` `f8.d.s` @AccessFlag PRIVATE;
  `java.util.List` `f8.d.t` @AccessFlag PRIVATE;
}
global `f8.d` `@@f8.d.u` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf8/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L30d360.  v0:= new `f8.d`;
  #L30d364.  call `<init>`(v0) @signature `Lf8/d;.<init>:()V` @kind direct;
  #L30d36a.  `@@f8.d.u` @type ^`f8.d` := v0 @kind object;
  #L30d36e.  return @kind void;
}
procedure `void` `<init>`(`f8.d` v2 @kind this) @signature `Lf8/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L30d380.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30d386.  v0:= -1.0D;
  #L30d38a.  v2.`f8.d.o` @type ^`double` := v0 @kind wide;
  #L30d38e.  v0:= 136I;
  #L30d392.  v2.`f8.d.p` @type ^`int` := v0;
  #L30d396.  v0:= 1I;
  #L30d398.  v2.`f8.d.q` @type ^`boolean` := v0 @kind boolean;
  #L30d39c.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L30d3a2.  v0:= temp @kind object;
  #L30d3a4.  v2.`f8.d.s` @type ^`java.util.List` := v0 @kind object;
  #L30d3a8.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L30d3ae.  v0:= temp @kind object;
  #L30d3b0.  v2.`f8.d.t` @type ^`java.util.List` := v0 @kind object;
  #L30d3b4.  return @kind void;
}
procedure `boolean` `d`(`f8.d` v6 @kind this, `java.lang.Class` v7 @kind object) @signature `Lf8/d;.d:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30cf5c.  v0:= v6.`f8.d.o` @type ^`double` @kind wide;
  #L30cf60.  v2:= 1I;
  #L30cf62.  v3:= -1.0D;
  #L30cf66.  v5:= dcmpl(v0, v3);
  #L30cf6a.  if v5 == 0 then goto L30cf9c;
  #L30cf6e.  v0:= constclass @type ^`e8.d` @kind object;
  #L30cf72.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L30cf78.  v0:= temp @kind object;
  #L30cf7a.  v0:= (`e8.d`) v0 @kind object;
  #L30cf7e.  v1:= constclass @type ^`e8.e` @kind object;
  #L30cf82.  call temp:= `getAnnotation`(v7, v1) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L30cf88.  v1:= temp @kind object;
  #L30cf8a.  v1:= (`e8.e`) v1 @kind object;
  #L30cf8e.  call temp:= `q`(v6, v0, v1) @signature `Lf8/d;.q:(Le8/d;Le8/e;)Z` @kind direct;
  #L30cf94.  v0:= temp;
  #L30cf96.  if v0 != 0 then goto L30cf9c;
  #L30cf9a.  return v2;
  #L30cf9c.  v0:= v6.`f8.d.q` @type ^`boolean` @kind boolean;
  #L30cfa0.  if v0 != 0 then goto L30cfb2;
  #L30cfa4.  call temp:= `l`(v6, v7) @signature `Lf8/d;.l:(Ljava/lang/Class;)Z` @kind direct;
  #L30cfaa.  v0:= temp;
  #L30cfac.  if v0 == 0 then goto L30cfb2;
  #L30cfb0.  return v2;
  #L30cfb2.  call temp:= `j`(v6, v7) @signature `Lf8/d;.j:(Ljava/lang/Class;)Z` @kind direct;
  #L30cfb8.  v7:= temp;
  #L30cfba.  if v7 == 0 then goto L30cfc0;
  #L30cfbe.  return v2;
  #L30cfc0.  v7:= 0I;
  #L30cfc2.  return v7;
}
procedure `boolean` `f`(`f8.d` v1 @kind this, `java.lang.Class` v2 @kind object, `boolean` v3 ) @signature `Lf8/d;.f:(Ljava/lang/Class;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L30cfd4.  if v3 == 0 then goto L30cfde;
  #L30cfd8.  v3:= v1.`f8.d.s` @type ^`java.util.List` @kind object;
  #L30cfdc.  goto L30cfe2;
  #L30cfde.  v3:= v1.`f8.d.t` @type ^`java.util.List` @kind object;
  #L30cfe2.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30cfe8.  v3:= temp @kind object;
  #L30cfea.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30cff0.  v0:= temp;
  #L30cff2.  if v0 == 0 then goto L30d012;
  #L30cff6.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30cffc.  v0:= temp @kind object;
  #L30cffe.  v0:= (`d8.a`) v0 @kind object;
  #L30d002.  call temp:= `a`(v0, v2) @signature `Ld8/a;.a:(Ljava/lang/Class;)Z` @kind interface;
  #L30d008.  v0:= temp;
  #L30d00a.  if v0 == 0 then goto L30cfea;
  #L30d00e.  v2:= 1I;
  #L30d010.  return v2;
  #L30d012.  v2:= 0I;
  #L30d014.  return v2;
}
procedure `boolean` `j`(`f8.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lf8/d;.j:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L30d160.  v0:= constclass @type ^`java.lang.Enum` @kind object;
  #L30d164.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30d16a.  v0:= temp;
  #L30d16c.  if v0 != 0 then goto L30d198;
  #L30d170.  call temp:= `m`(v1, v2) @signature `Lf8/d;.m:(Ljava/lang/Class;)Z` @kind direct;
  #L30d176.  v0:= temp;
  #L30d178.  if v0 != 0 then goto L30d198;
  #L30d17c.  call temp:= `isAnonymousClass`(v2) @signature `Ljava/lang/Class;.isAnonymousClass:()Z` @kind virtual;
  #L30d182.  v0:= temp;
  #L30d184.  if v0 != 0 then goto L30d194;
  #L30d188.  call temp:= `isLocalClass`(v2) @signature `Ljava/lang/Class;.isLocalClass:()Z` @kind virtual;
  #L30d18e.  v2:= temp;
  #L30d190.  if v2 == 0 then goto L30d198;
  #L30d194.  v2:= 1I;
  #L30d196.  goto L30d19a;
  #L30d198.  v2:= 0I;
  #L30d19a.  return v2;
}
procedure `boolean` `l`(`f8.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lf8/d;.l:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L30d1ac.  call temp:= `isMemberClass`(v2) @signature `Ljava/lang/Class;.isMemberClass:()Z` @kind virtual;
  #L30d1b2.  v0:= temp;
  #L30d1b4.  if v0 == 0 then goto L30d1c8;
  #L30d1b8.  call temp:= `m`(v1, v2) @signature `Lf8/d;.m:(Ljava/lang/Class;)Z` @kind direct;
  #L30d1be.  v2:= temp;
  #L30d1c0.  if v2 != 0 then goto L30d1c8;
  #L30d1c4.  v2:= 1I;
  #L30d1c6.  goto L30d1ca;
  #L30d1c8.  v2:= 0I;
  #L30d1ca.  return v2;
}
procedure `boolean` `m`(`f8.d` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lf8/d;.m:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;

  #L30d1dc.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L30d1e2.  v1:= temp;
  #L30d1e4.  v1:= v1 ^& 8;
  #L30d1e8.  if v1 == 0 then goto L30d1f0;
  #L30d1ec.  v1:= 1I;
  #L30d1ee.  goto L30d1f2;
  #L30d1f0.  v1:= 0I;
  #L30d1f2.  return v1;
}
procedure `boolean` `n`(`f8.d` v4 @kind this, `e8.d` v5 @kind object) @signature `Lf8/d;.n:(Le8/d;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30d204.  if v5 == 0 then goto L30d220;
  #L30d208.  call temp:= `value`(v5) @signature `Le8/d;.value:()D` @kind interface;
  #L30d20e.  v0:= temp @kind wide;
  #L30d210.  v2:= v4.`f8.d.o` @type ^`double` @kind wide;
  #L30d214.  v5:= dcmpl(v0, v2);
  #L30d218.  if v5 <= 0 then goto L30d220;
  #L30d21c.  v5:= 0I;
  #L30d21e.  return v5;
  #L30d220.  v5:= 1I;
  #L30d222.  return v5;
}
procedure `boolean` `p`(`f8.d` v4 @kind this, `e8.e` v5 @kind object) @signature `Lf8/d;.p:(Le8/e;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30d234.  if v5 == 0 then goto L30d250;
  #L30d238.  call temp:= `value`(v5) @signature `Le8/e;.value:()D` @kind interface;
  #L30d23e.  v0:= temp @kind wide;
  #L30d240.  v2:= v4.`f8.d.o` @type ^`double` @kind wide;
  #L30d244.  v5:= dcmpg(v0, v2);
  #L30d248.  if v5 > 0 then goto L30d250;
  #L30d24c.  v5:= 0I;
  #L30d24e.  return v5;
  #L30d250.  v5:= 1I;
  #L30d252.  return v5;
}
procedure `boolean` `q`(`f8.d` v0 @kind this, `e8.d` v1 @kind object, `e8.e` v2 @kind object) @signature `Lf8/d;.q:(Le8/d;Le8/e;)Z` @AccessFlag PRIVATE {
    temp;

  #L30d264.  call temp:= `n`(v0, v1) @signature `Lf8/d;.n:(Le8/d;)Z` @kind direct;
  #L30d26a.  v1:= temp;
  #L30d26c.  if v1 == 0 then goto L30d280;
  #L30d270.  call temp:= `p`(v0, v2) @signature `Lf8/d;.p:(Le8/e;)Z` @kind direct;
  #L30d276.  v1:= temp;
  #L30d278.  if v1 == 0 then goto L30d280;
  #L30d27c.  v1:= 1I;
  #L30d27e.  goto L30d282;
  #L30d280.  v1:= 0I;
  #L30d282.  return v1;
}
procedure `f8.d` `a`(`f8.d` v2 @kind this) @signature `Lf8/d;.a:()Lf8/d;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L30d308.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L30d30e.  v0:= temp @kind object;
  #L30d310.  v0:= (`f8.d`) v0 @kind object;
  #L30d314.  return v0 @kind object;
  #L30d316.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L30d318.  v1:= new `java.lang.AssertionError`;
  #L30d31c.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L30d322.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L30d308..L30d314] goto L30d316;
}
procedure `boolean` `b`(`f8.d` v1 @kind this, `java.lang.Class` v2 @kind object, `boolean` v3 ) @signature `Lf8/d;.b:(Ljava/lang/Class;Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30cf28.  call temp:= `d`(v1, v2) @signature `Lf8/d;.d:(Ljava/lang/Class;)Z` @kind direct;
  #L30cf2e.  v0:= temp;
  #L30cf30.  if v0 != 0 then goto L30cf46;
  #L30cf34.  call temp:= `f`(v1, v2, v3) @signature `Lf8/d;.f:(Ljava/lang/Class;Z)Z` @kind direct;
  #L30cf3a.  v2:= temp;
  #L30cf3c.  if v2 == 0 then goto L30cf42;
  #L30cf40.  goto L30cf46;
  #L30cf42.  v2:= 0I;
  #L30cf44.  goto L30cf48;
  #L30cf46.  v2:= 1I;
  #L30cf48.  return v2;
}
procedure `java.lang.Object` `clone`(`f8.d` v1 @kind this) @signature `Lf8/d;.clone:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L30d344.  call temp:= `a`(v1) @signature `Lf8/d;.a:()Lf8/d;` @kind virtual;
  #L30d34a.  v0:= temp @kind object;
  #L30d34c.  return v0 @kind object;
}
procedure `d8.w` `create`(`f8.d` v11 @kind this, `d8.e` v12 @kind object, `k8.a` v13 @kind object) @signature `Lf8/d;.create:(Ld8/e;Lk8/a;)Ld8/w;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L30d294.  call temp:= `c`(v13) @signature `Lk8/a;.c:()Ljava/lang/Class;` @kind virtual;
  #L30d29a.  v0:= temp @kind object;
  #L30d29c.  call temp:= `d`(v11, v0) @signature `Lf8/d;.d:(Ljava/lang/Class;)Z` @kind direct;
  #L30d2a2.  v1:= temp;
  #L30d2a4.  v2:= 0I;
  #L30d2a6.  v3:= 1I;
  #L30d2a8.  if v1 != 0 then goto L30d2be;
  #L30d2ac.  call temp:= `f`(v11, v0, v3) @signature `Lf8/d;.f:(Ljava/lang/Class;Z)Z` @kind direct;
  #L30d2b2.  v4:= temp;
  #L30d2b4.  if v4 == 0 then goto L30d2ba;
  #L30d2b8.  goto L30d2be;
  #L30d2ba.  v8:= 0I;
  #L30d2bc.  goto L30d2c0;
  #L30d2be.  v8:= 1I;
  #L30d2c0.  if v1 != 0 then goto L30d2d6;
  #L30d2c4.  call temp:= `f`(v11, v0, v2) @signature `Lf8/d;.f:(Ljava/lang/Class;Z)Z` @kind direct;
  #L30d2ca.  v0:= temp;
  #L30d2cc.  if v0 == 0 then goto L30d2d2;
  #L30d2d0.  goto L30d2d6;
  #L30d2d2.  v7:= 0I;
  #L30d2d4.  goto L30d2d8;
  #L30d2d6.  v7:= 1I;
  #L30d2d8.  if v8 != 0 then goto L30d2e4;
  #L30d2dc.  if v7 != 0 then goto L30d2e4;
  #L30d2e0.  v12:= 0I;
  #L30d2e2.  return v12 @kind object;
  #L30d2e4.  v0:= new `f8.d$a`;
  #L30d2e8.  v5:= v0 @kind object;
  #L30d2ea.  v6:= v11 @kind object;
  #L30d2ec.  v9:= v12 @kind object;
  #L30d2ee.  v10:= v13 @kind object;
  #L30d2f0.  call `<init>`(v5, v6, v7, v8, v9, v10) @signature `Lf8/d$a;.<init>:(Lf8/d;ZZLd8/e;Lk8/a;)V` @kind direct;
  #L30d2f6.  return v0 @kind object;
}
procedure `boolean` `g`(`f8.d` v6 @kind this, `java.lang.reflect.Field` v7 @kind object, `boolean` v8 ) @signature `Lf8/d;.g:(Ljava/lang/reflect/Field;Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30d028.  v0:= v6.`f8.d.p` @type ^`int`;
  #L30d02c.  call temp:= `getModifiers`(v7) @signature `Ljava/lang/reflect/Field;.getModifiers:()I` @kind virtual;
  #L30d032.  v1:= temp;
  #L30d034.  v0:= v0 ^& v1 @kind int;
  #L30d036.  v1:= 1I;
  #L30d038.  if v0 == 0 then goto L30d03e;
  #L30d03c.  return v1;
  #L30d03e.  v2:= v6.`f8.d.o` @type ^`double` @kind wide;
  #L30d042.  v4:= -1.0D;
  #L30d046.  v0:= dcmpl(v2, v4);
  #L30d04a.  if v0 == 0 then goto L30d07c;
  #L30d04e.  v0:= constclass @type ^`e8.d` @kind object;
  #L30d052.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L30d058.  v0:= temp @kind object;
  #L30d05a.  v0:= (`e8.d`) v0 @kind object;
  #L30d05e.  v2:= constclass @type ^`e8.e` @kind object;
  #L30d062.  call temp:= `getAnnotation`(v7, v2) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L30d068.  v2:= temp @kind object;
  #L30d06a.  v2:= (`e8.e`) v2 @kind object;
  #L30d06e.  call temp:= `q`(v6, v0, v2) @signature `Lf8/d;.q:(Le8/d;Le8/e;)Z` @kind direct;
  #L30d074.  v0:= temp;
  #L30d076.  if v0 != 0 then goto L30d07c;
  #L30d07a.  return v1;
  #L30d07c.  call temp:= `isSynthetic`(v7) @signature `Ljava/lang/reflect/Field;.isSynthetic:()Z` @kind virtual;
  #L30d082.  v0:= temp;
  #L30d084.  if v0 == 0 then goto L30d08a;
  #L30d088.  return v1;
  #L30d08a.  v0:= v6.`f8.d.r` @type ^`boolean` @kind boolean;
  #L30d08e.  if v0 == 0 then goto L30d0c6;
  #L30d092.  v0:= constclass @type ^`e8.a` @kind object;
  #L30d096.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L30d09c.  v0:= temp @kind object;
  #L30d09e.  v0:= (`e8.a`) v0 @kind object;
  #L30d0a2.  if v0 == 0 then goto L30d0c4;
  #L30d0a6.  if v8 == 0 then goto L30d0b8;
  #L30d0aa.  call temp:= `serialize`(v0) @signature `Le8/a;.serialize:()Z` @kind interface;
  #L30d0b0.  v0:= temp;
  #L30d0b2.  if v0 != 0 then goto L30d0c6;
  #L30d0b6.  goto L30d0c4;
  #L30d0b8.  call temp:= `deserialize`(v0) @signature `Le8/a;.deserialize:()Z` @kind interface;
  #L30d0be.  v0:= temp;
  #L30d0c0.  if v0 != 0 then goto L30d0c6;
  #L30d0c4.  return v1;
  #L30d0c6.  v0:= v6.`f8.d.q` @type ^`boolean` @kind boolean;
  #L30d0ca.  if v0 != 0 then goto L30d0e4;
  #L30d0ce.  call temp:= `getType`(v7) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L30d0d4.  v0:= temp @kind object;
  #L30d0d6.  call temp:= `l`(v6, v0) @signature `Lf8/d;.l:(Ljava/lang/Class;)Z` @kind direct;
  #L30d0dc.  v0:= temp;
  #L30d0de.  if v0 == 0 then goto L30d0e4;
  #L30d0e2.  return v1;
  #L30d0e4.  call temp:= `getType`(v7) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L30d0ea.  v0:= temp @kind object;
  #L30d0ec.  call temp:= `j`(v6, v0) @signature `Lf8/d;.j:(Ljava/lang/Class;)Z` @kind direct;
  #L30d0f2.  v0:= temp;
  #L30d0f4.  if v0 == 0 then goto L30d0fa;
  #L30d0f8.  return v1;
  #L30d0fa.  if v8 == 0 then goto L30d104;
  #L30d0fe.  v8:= v6.`f8.d.s` @type ^`java.util.List` @kind object;
  #L30d102.  goto L30d108;
  #L30d104.  v8:= v6.`f8.d.t` @type ^`java.util.List` @kind object;
  #L30d108.  call temp:= `isEmpty`(v8) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L30d10e.  v0:= temp;
  #L30d110.  if v0 != 0 then goto L30d14c;
  #L30d114.  v0:= new `d8.b`;
  #L30d118.  call `<init>`(v0, v7) @signature `Ld8/b;.<init>:(Ljava/lang/reflect/Field;)V` @kind direct;
  #L30d11e.  call temp:= `iterator`(v8) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30d124.  v7:= temp @kind object;
  #L30d126.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30d12c.  v8:= temp;
  #L30d12e.  if v8 == 0 then goto L30d14c;
  #L30d132.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30d138.  v8:= temp @kind object;
  #L30d13a.  v8:= (`d8.a`) v8 @kind object;
  #L30d13e.  call temp:= `b`(v8, v0) @signature `Ld8/a;.b:(Ld8/b;)Z` @kind interface;
  #L30d144.  v8:= temp;
  #L30d146.  if v8 == 0 then goto L30d126;
  #L30d14a.  return v1;
  #L30d14c.  v7:= 0I;
  #L30d14e.  return v7;
}
