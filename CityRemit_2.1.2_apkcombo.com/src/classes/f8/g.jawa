record `f8.g` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Number` @kind class {
  `java.lang.String` `f8.g.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f8.g` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lf8/g;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L30d6cc.  call `<init>`(v0) @signature `Ljava/lang/Number;.<init>:()V` @kind direct;
  #L30d6d2.  v0.`f8.g.o` @type ^`java.lang.String` := v1 @kind object;
  #L30d6d6.  return @kind void;
}
procedure `double` `doubleValue`(`f8.g` v2 @kind this) @signature `Lf8/g;.doubleValue:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30d5a8.  v0:= v2.`f8.g.o` @type ^`java.lang.String` @kind object;
  #L30d5ac.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L30d5b2.  v0:= temp @kind wide;
  #L30d5b4.  return v0 @kind wide;
}
procedure `boolean` `equals`(`f8.g` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lf8/g;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30d560.  v0:= 1I;
  #L30d562.  if v3 != v4 then goto L30d568;
  #L30d566.  return v0;
  #L30d568.  v1:= instanceof @variable v4 @type ^`f8.g` @kind boolean;
  #L30d56c.  v2:= 0I;
  #L30d56e.  if v1 == 0 then goto L30d594;
  #L30d572.  v4:= (`f8.g`) v4 @kind object;
  #L30d576.  v1:= v3.`f8.g.o` @type ^`java.lang.String` @kind object;
  #L30d57a.  v4:= v4.`f8.g.o` @type ^`java.lang.String` @kind object;
  #L30d57e.  if v1 == v4 then goto L30d592;
  #L30d582.  call temp:= `equals`(v1, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30d588.  v4:= temp;
  #L30d58a.  if v4 == 0 then goto L30d590;
  #L30d58e.  goto L30d592;
  #L30d590.  v0:= 0I;
  #L30d592.  return v0;
  #L30d594.  return v2;
}
procedure `float` `floatValue`(`f8.g` v1 @kind this) @signature `Lf8/g;.floatValue:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d5c8.  v0:= v1.`f8.g.o` @type ^`java.lang.String` @kind object;
  #L30d5cc.  call temp:= `parseFloat`(v0) @signature `Ljava/lang/Float;.parseFloat:(Ljava/lang/String;)F` @kind static;
  #L30d5d2.  v0:= temp;
  #L30d5d4.  return v0;
}
procedure `int` `hashCode`(`f8.g` v1 @kind this) @signature `Lf8/g;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d5e8.  v0:= v1.`f8.g.o` @type ^`java.lang.String` @kind object;
  #L30d5ec.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L30d5f2.  v0:= temp;
  #L30d5f4.  return v0;
}
procedure `int` `intValue`(`f8.g` v2 @kind this) @signature `Lf8/g;.intValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30d608.  v0:= v2.`f8.g.o` @type ^`java.lang.String` @kind object;
  #L30d60c.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L30d612.  v0:= temp;
  #L30d614.  return v0;
  #L30d616.  v0:= v2.`f8.g.o` @type ^`java.lang.String` @kind object;
  #L30d61a.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L30d620.  v0:= temp @kind wide;
  #L30d622.  v1:= (`int`) v0 @kind l2i;
  #L30d624.  return v1;
  #L30d626.  v0:= new `java.math.BigDecimal`;
  #L30d62a.  v1:= v2.`f8.g.o` @type ^`java.lang.String` @kind object;
  #L30d62e.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30d634.  call temp:= `intValue`(v0) @signature `Ljava/math/BigDecimal;.intValue:()I` @kind virtual;
  #L30d63a.  v0:= temp;
  #L30d63c.  return v0;
  catch `java.lang.NumberFormatException` @[L30d608..L30d614] goto L30d616;
  catch `java.lang.NumberFormatException` @[L30d616..L30d622] goto L30d626;
}
procedure `long` `longValue`(`f8.g` v2 @kind this) @signature `Lf8/g;.longValue:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30d684.  v0:= v2.`f8.g.o` @type ^`java.lang.String` @kind object;
  #L30d688.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L30d68e.  v0:= temp @kind wide;
  #L30d690.  return v0 @kind wide;
  #L30d692.  v0:= new `java.math.BigDecimal`;
  #L30d696.  v1:= v2.`f8.g.o` @type ^`java.lang.String` @kind object;
  #L30d69a.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30d6a0.  call temp:= `longValue`(v0) @signature `Ljava/math/BigDecimal;.longValue:()J` @kind virtual;
  #L30d6a6.  v0:= temp @kind wide;
  #L30d6a8.  return v0 @kind wide;
  catch `java.lang.NumberFormatException` @[L30d684..L30d690] goto L30d692;
}
procedure `java.lang.String` `toString`(`f8.g` v1 @kind this) @signature `Lf8/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d66c.  v0:= v1.`f8.g.o` @type ^`java.lang.String` @kind object;
  #L30d670.  return v0 @kind object;
}
