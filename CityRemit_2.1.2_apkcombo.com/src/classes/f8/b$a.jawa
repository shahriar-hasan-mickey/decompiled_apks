record `f8.b$a` @kind class @AccessFlag FINAL extends `java.lang.reflect.GenericArrayType` @kind interface, `java.io.Serializable` @kind interface {
  `java.lang.reflect.Type` `f8.b$a.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f8.b$a` v0 @kind this, `java.lang.reflect.Type` v1 @kind object) @signature `Lf8/b$a;.<init>:(Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L30b948.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30b94e.  call temp:= `b`(v1) @signature `Lf8/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L30b954.  v1:= temp @kind object;
  #L30b956.  v0.`f8.b$a.o` @type ^`java.lang.reflect.Type` := v1 @kind object;
  #L30b95a.  return @kind void;
}
procedure `boolean` `equals`(`f8.b$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf8/b$a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30b8a0.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L30b8a4.  if v0 == 0 then goto L30b8bc;
  #L30b8a8.  v2:= (`java.lang.reflect.GenericArrayType`) v2 @kind object;
  #L30b8ac.  call temp:= `f`(v1, v2) @signature `Lf8/b;.f:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L30b8b2.  v2:= temp;
  #L30b8b4.  if v2 == 0 then goto L30b8bc;
  #L30b8b8.  v2:= 1I;
  #L30b8ba.  goto L30b8be;
  #L30b8bc.  v2:= 0I;
  #L30b8be.  return v2;
}
procedure `java.lang.reflect.Type` `getGenericComponentType`(`f8.b$a` v1 @kind this) @signature `Lf8/b$a;.getGenericComponentType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30b930.  v0:= v1.`f8.b$a.o` @type ^`java.lang.reflect.Type` @kind object;
  #L30b934.  return v0 @kind object;
}
procedure `int` `hashCode`(`f8.b$a` v1 @kind this) @signature `Lf8/b$a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30b8d0.  v0:= v1.`f8.b$a.o` @type ^`java.lang.reflect.Type` @kind object;
  #L30b8d4.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30b8da.  v0:= temp;
  #L30b8dc.  return v0;
}
procedure `java.lang.String` `toString`(`f8.b$a` v2 @kind this) @signature `Lf8/b$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30b8f0.  v0:= new `java.lang.StringBuilder`;
  #L30b8f4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b8fa.  v1:= v2.`f8.b$a.o` @type ^`java.lang.reflect.Type` @kind object;
  #L30b8fe.  call temp:= `u`(v1) @signature `Lf8/b;.u:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L30b904.  v1:= temp @kind object;
  #L30b906.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b90c.  v1:= "[]" @kind object;
  #L30b910.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b916.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30b91c.  v0:= temp @kind object;
  #L30b91e.  return v0 @kind object;
}
