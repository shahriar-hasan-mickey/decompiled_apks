record `f8.h$e` @kind class @AccessFlag FINAL extends `java.util.Map$Entry` @kind interface {
  `f8.h$e` `f8.h$e.o` @AccessFlag ;
  `f8.h$e` `f8.h$e.p` @AccessFlag ;
  `f8.h$e` `f8.h$e.q` @AccessFlag ;
  `f8.h$e` `f8.h$e.r` @AccessFlag ;
  `f8.h$e` `f8.h$e.s` @AccessFlag ;
  `java.lang.Object` `f8.h$e.t` @AccessFlag FINAL;
  `java.lang.Object` `f8.h$e.u` @AccessFlag ;
  `int` `f8.h$e.v` @AccessFlag ;
}
procedure `void` `<init>`(`f8.h$e` v1 @kind this) @signature `Lf8/h$e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L30dbf0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30dbf6.  v0:= 0I;
  #L30dbf8.  v1.`f8.h$e.t` @type ^`java.lang.Object` := v0 @kind object;
  #L30dbfc.  v1.`f8.h$e.s` @type ^`f8.h$e` := v1 @kind object;
  #L30dc00.  v1.`f8.h$e.r` @type ^`f8.h$e` := v1 @kind object;
  #L30dc04.  return @kind void;
}
procedure `void` `<init>`(`f8.h$e` v0 @kind this, `f8.h$e` v1 @kind object, `java.lang.Object` v2 @kind object, `f8.h$e` v3 @kind object, `f8.h$e` v4 @kind object) @signature `Lf8/h$e;.<init>:(Lf8/h$e;Ljava/lang/Object;Lf8/h$e;Lf8/h$e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30dc18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30dc1e.  v0.`f8.h$e.o` @type ^`f8.h$e` := v1 @kind object;
  #L30dc22.  v0.`f8.h$e.t` @type ^`java.lang.Object` := v2 @kind object;
  #L30dc26.  v1:= 1I;
  #L30dc28.  v0.`f8.h$e.v` @type ^`int` := v1;
  #L30dc2c.  v0.`f8.h$e.r` @type ^`f8.h$e` := v3 @kind object;
  #L30dc30.  v0.`f8.h$e.s` @type ^`f8.h$e` := v4 @kind object;
  #L30dc34.  v4.`f8.h$e.r` @type ^`f8.h$e` := v0 @kind object;
  #L30dc38.  v3.`f8.h$e.s` @type ^`f8.h$e` := v0 @kind object;
  #L30dc3c.  return @kind void;
}
procedure `f8.h$e` `a`(`f8.h$e` v3 @kind this) @signature `Lf8/h$e;.a:()Lf8/h$e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30dad4.  v0:= v3.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30dad8.  v1:= v3 @kind object;
  #L30dada.  if v0 == 0 then goto L30daea;
  #L30dade.  v1:= v0.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30dae2.  v2:= v1 @kind object;
  #L30dae4.  v1:= v0 @kind object;
  #L30dae6.  v0:= v2 @kind object;
  #L30dae8.  goto L30dada;
  #L30daea.  return v1 @kind object;
}
procedure `f8.h$e` `b`(`f8.h$e` v3 @kind this) @signature `Lf8/h$e;.b:()Lf8/h$e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30dafc.  v0:= v3.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30db00.  v1:= v3 @kind object;
  #L30db02.  if v0 == 0 then goto L30db12;
  #L30db06.  v1:= v0.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30db0a.  v2:= v1 @kind object;
  #L30db0c.  v1:= v0 @kind object;
  #L30db0e.  v0:= v2 @kind object;
  #L30db10.  goto L30db02;
  #L30db12.  return v1 @kind object;
}
procedure `boolean` `equals`(`f8.h$e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lf8/h$e;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30da64.  v0:= instanceof @variable v4 @type ^`java.util.Map$Entry` @kind boolean;
  #L30da68.  v1:= 0I;
  #L30da6a.  if v0 == 0 then goto L30dac0;
  #L30da6e.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L30da72.  v0:= v3.`f8.h$e.t` @type ^`java.lang.Object` @kind object;
  #L30da76.  if v0 != 0 then goto L30da88;
  #L30da7a.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L30da80.  v0:= temp @kind object;
  #L30da82.  if v0 != 0 then goto L30dac0;
  #L30da86.  goto L30da9c;
  #L30da88.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L30da8e.  v2:= temp @kind object;
  #L30da90.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30da96.  v0:= temp;
  #L30da98.  if v0 == 0 then goto L30dac0;
  #L30da9c.  v0:= v3.`f8.h$e.u` @type ^`java.lang.Object` @kind object;
  #L30daa0.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L30daa6.  v4:= temp @kind object;
  #L30daa8.  if v0 != 0 then goto L30dab2;
  #L30daac.  if v4 != 0 then goto L30dac0;
  #L30dab0.  goto L30dabe;
  #L30dab2.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30dab8.  v4:= temp;
  #L30daba.  if v4 == 0 then goto L30dac0;
  #L30dabe.  v1:= 1I;
  #L30dac0.  return v1;
}
procedure `java.lang.Object` `getKey`(`f8.h$e` v1 @kind this) @signature `Lf8/h$e;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30db60.  v0:= v1.`f8.h$e.t` @type ^`java.lang.Object` @kind object;
  #L30db64.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`f8.h$e` v1 @kind this) @signature `Lf8/h$e;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30db78.  v0:= v1.`f8.h$e.u` @type ^`java.lang.Object` @kind object;
  #L30db7c.  return v0 @kind object;
}
procedure `int` `hashCode`(`f8.h$e` v3 @kind this) @signature `Lf8/h$e;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30db24.  v0:= v3.`f8.h$e.t` @type ^`java.lang.Object` @kind object;
  #L30db28.  v1:= 0I;
  #L30db2a.  if v0 != 0 then goto L30db32;
  #L30db2e.  v0:= 0I;
  #L30db30.  goto L30db3a;
  #L30db32.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30db38.  v0:= temp;
  #L30db3a.  v2:= v3.`f8.h$e.u` @type ^`java.lang.Object` @kind object;
  #L30db3e.  if v2 != 0 then goto L30db44;
  #L30db42.  goto L30db4c;
  #L30db44.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30db4a.  v1:= temp;
  #L30db4c.  v0:= v0 ^~ v1 @kind int;
  #L30db4e.  return v0;
}
procedure `java.lang.Object` `setValue`(`f8.h$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf8/h$e;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30db90.  v0:= v1.`f8.h$e.u` @type ^`java.lang.Object` @kind object;
  #L30db94.  v1.`f8.h$e.u` @type ^`java.lang.Object` := v2 @kind object;
  #L30db98.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`f8.h$e` v2 @kind this) @signature `Lf8/h$e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30dbac.  v0:= new `java.lang.StringBuilder`;
  #L30dbb0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30dbb6.  v1:= v2.`f8.h$e.t` @type ^`java.lang.Object` @kind object;
  #L30dbba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30dbc0.  v1:= "=" @kind object;
  #L30dbc4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30dbca.  v1:= v2.`f8.h$e.u` @type ^`java.lang.Object` @kind object;
  #L30dbce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30dbd4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30dbda.  v0:= temp @kind object;
  #L30dbdc.  return v0 @kind object;
}
