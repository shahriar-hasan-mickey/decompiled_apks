record `f8.b` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.reflect.Type`[] `@@f8.b.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf8/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L30c6d4.  v0:= 0I;
  #L30c6d6.  v0:= new `java.lang.reflect.Type`[v0];
  #L30c6da.  `@@f8.b.a` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L30c6de.  return @kind void;
}
procedure `java.lang.reflect.GenericArrayType` `a`(`java.lang.reflect.Type` v1 @kind object) @signature `Lf8/b;.a:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/GenericArrayType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30c0f4.  v0:= new `f8.b$a`;
  #L30c0f8.  call `<init>`(v0, v1) @signature `Lf8/b$a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L30c0fe.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `b`(`java.lang.reflect.Type` v3 @kind object) @signature `Lf8/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L30c12c.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L30c130.  if v0 == 0 then goto L30c162;
  #L30c134.  v3:= (`java.lang.Class`) v3 @kind object;
  #L30c138.  call temp:= `isArray`(v3) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L30c13e.  v0:= temp;
  #L30c140.  if v0 == 0 then goto L30c160;
  #L30c144.  v0:= new `f8.b$a`;
  #L30c148.  call temp:= `getComponentType`(v3) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L30c14e.  v3:= temp @kind object;
  #L30c150.  call temp:= `b`(v3) @signature `Lf8/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L30c156.  v3:= temp @kind object;
  #L30c158.  call `<init>`(v0, v3) @signature `Lf8/b$a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L30c15e.  v3:= v0 @kind object;
  #L30c160.  return v3 @kind object;
  #L30c162.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L30c166.  if v0 == 0 then goto L30c192;
  #L30c16a.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L30c16e.  v0:= new `f8.b$b`;
  #L30c172.  call temp:= `getOwnerType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30c178.  v1:= temp @kind object;
  #L30c17a.  call temp:= `getRawType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30c180.  v2:= temp @kind object;
  #L30c182.  call temp:= `getActualTypeArguments`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c188.  v3:= temp @kind object;
  #L30c18a.  call `<init>`(v0, v1, v2, v3) @signature `Lf8/b$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L30c190.  return v0 @kind object;
  #L30c192.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L30c196.  if v0 == 0 then goto L30c1b2;
  #L30c19a.  v3:= (`java.lang.reflect.GenericArrayType`) v3 @kind object;
  #L30c19e.  v0:= new `f8.b$a`;
  #L30c1a2.  call temp:= `getGenericComponentType`(v3) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30c1a8.  v3:= temp @kind object;
  #L30c1aa.  call `<init>`(v0, v3) @signature `Lf8/b$a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L30c1b0.  return v0 @kind object;
  #L30c1b2.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L30c1b6.  if v0 == 0 then goto L30c1da;
  #L30c1ba.  v3:= (`java.lang.reflect.WildcardType`) v3 @kind object;
  #L30c1be.  v0:= new `f8.b$c`;
  #L30c1c2.  call temp:= `getUpperBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c1c8.  v1:= temp @kind object;
  #L30c1ca.  call temp:= `getLowerBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c1d0.  v3:= temp @kind object;
  #L30c1d2.  call `<init>`(v0, v1, v3) @signature `Lf8/b$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L30c1d8.  return v0 @kind object;
  #L30c1da.  return v3 @kind object;
}
procedure `void` `c`(`java.lang.reflect.Type` v1 @kind object) @signature `Lf8/b;.c:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L30c6f0.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L30c6f4.  if v0 == 0 then goto L30c70e;
  #L30c6f8.  v1:= (`java.lang.Class`) v1 @kind object;
  #L30c6fc.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L30c702.  v1:= temp;
  #L30c704.  if v1 != 0 then goto L30c70a;
  #L30c708.  goto L30c70e;
  #L30c70a.  v1:= 0I;
  #L30c70c.  goto L30c710;
  #L30c70e.  v1:= 1I;
  #L30c710.  call `a`(v1) @signature `Lf8/a;.a:(Z)V` @kind static;
  #L30c716.  return @kind void;
}
procedure `java.lang.Class` `d`(`java.lang.reflect.TypeVariable` v1 @kind object) @signature `Lf8/b;.d:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L30bf9c.  call temp:= `getGenericDeclaration`(v1) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L30bfa2.  v1:= temp @kind object;
  #L30bfa4.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L30bfa8.  if v0 == 0 then goto L30bfb2;
  #L30bfac.  v1:= (`java.lang.Class`) v1 @kind object;
  #L30bfb0.  goto L30bfb4;
  #L30bfb2.  v1:= 0I;
  #L30bfb4.  return v1 @kind object;
}
procedure `boolean` `e`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lf8/b;.e:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag STATIC {
    temp;

  #L30bd8c.  if v0 == v1 then goto L30bda6;
  #L30bd90.  if v0 == 0 then goto L30bda2;
  #L30bd94.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30bd9a.  v0:= temp;
  #L30bd9c.  if v0 == 0 then goto L30bda2;
  #L30bda0.  goto L30bda6;
  #L30bda2.  v0:= 0I;
  #L30bda4.  goto L30bda8;
  #L30bda6.  v0:= 1I;
  #L30bda8.  return v0;
}
procedure `boolean` `f`(`java.lang.reflect.Type` v4 @kind object, `java.lang.reflect.Type` v5 @kind object) @signature `Lf8/b;.f:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30bdbc.  v0:= 1I;
  #L30bdbe.  if v4 != v5 then goto L30bdc4;
  #L30bdc2.  return v0;
  #L30bdc4.  v1:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L30bdc8.  if v1 == 0 then goto L30bdd6;
  #L30bdcc.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30bdd2.  v4:= temp;
  #L30bdd4.  return v4;
  #L30bdd6.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L30bdda.  v2:= 0I;
  #L30bddc.  if v1 == 0 then goto L30be4c;
  #L30bde0.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L30bde4.  if v1 != 0 then goto L30bdea;
  #L30bde8.  return v2;
  #L30bdea.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L30bdee.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L30bdf2.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30bdf8.  v1:= temp @kind object;
  #L30bdfa.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30be00.  v3:= temp @kind object;
  #L30be02.  call temp:= `e`(v1, v3) @signature `Lf8/b;.e:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L30be08.  v1:= temp;
  #L30be0a.  if v1 == 0 then goto L30be48;
  #L30be0e.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30be14.  v1:= temp @kind object;
  #L30be16.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30be1c.  v3:= temp @kind object;
  #L30be1e.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30be24.  v1:= temp;
  #L30be26.  if v1 == 0 then goto L30be48;
  #L30be2a.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30be30.  v4:= temp @kind object;
  #L30be32.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30be38.  v5:= temp @kind object;
  #L30be3a.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L30be40.  v4:= temp;
  #L30be42.  if v4 == 0 then goto L30be48;
  #L30be46.  goto L30be4a;
  #L30be48.  v0:= 0I;
  #L30be4a.  return v0;
  #L30be4c.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L30be50.  if v1 == 0 then goto L30be80;
  #L30be54.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L30be58.  if v0 != 0 then goto L30be5e;
  #L30be5c.  return v2;
  #L30be5e.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L30be62.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L30be66.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30be6c.  v4:= temp @kind object;
  #L30be6e.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30be74.  v5:= temp @kind object;
  #L30be76.  call temp:= `f`(v4, v5) @signature `Lf8/b;.f:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L30be7c.  v4:= temp;
  #L30be7e.  return v4;
  #L30be80.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L30be84.  if v1 == 0 then goto L30bed8;
  #L30be88.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L30be8c.  if v1 != 0 then goto L30be92;
  #L30be90.  return v2;
  #L30be92.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L30be96.  v5:= (`java.lang.reflect.WildcardType`) v5 @kind object;
  #L30be9a.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30bea0.  v1:= temp @kind object;
  #L30bea2.  call temp:= `getUpperBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30bea8.  v3:= temp @kind object;
  #L30beaa.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L30beb0.  v1:= temp;
  #L30beb2.  if v1 == 0 then goto L30bed4;
  #L30beb6.  call temp:= `getLowerBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30bebc.  v4:= temp @kind object;
  #L30bebe.  call temp:= `getLowerBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30bec4.  v5:= temp @kind object;
  #L30bec6.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L30becc.  v4:= temp;
  #L30bece.  if v4 == 0 then goto L30bed4;
  #L30bed2.  goto L30bed6;
  #L30bed4.  v0:= 0I;
  #L30bed6.  return v0;
  #L30bed8.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L30bedc.  if v1 == 0 then goto L30bf28;
  #L30bee0.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L30bee4.  if v1 != 0 then goto L30beea;
  #L30bee8.  return v2;
  #L30beea.  v4:= (`java.lang.reflect.TypeVariable`) v4 @kind object;
  #L30beee.  v5:= (`java.lang.reflect.TypeVariable`) v5 @kind object;
  #L30bef2.  call temp:= `getGenericDeclaration`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L30bef8.  v1:= temp @kind object;
  #L30befa.  call temp:= `getGenericDeclaration`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L30bf00.  v3:= temp @kind object;
  #L30bf02.  if v1 != v3 then goto L30bf24;
  #L30bf06.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L30bf0c.  v4:= temp @kind object;
  #L30bf0e.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L30bf14.  v5:= temp @kind object;
  #L30bf16.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30bf1c.  v4:= temp;
  #L30bf1e.  if v4 == 0 then goto L30bf24;
  #L30bf22.  goto L30bf26;
  #L30bf24.  v0:= 0I;
  #L30bf26.  return v0;
  #L30bf28.  return v2;
}
procedure `java.lang.reflect.Type` `g`(`java.lang.reflect.Type` v1 @kind object) @signature `Lf8/b;.g:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30c1ec.  v0:= instanceof @variable v1 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L30c1f0.  if v0 == 0 then goto L30c202;
  #L30c1f4.  v1:= (`java.lang.reflect.GenericArrayType`) v1 @kind object;
  #L30c1f8.  call temp:= `getGenericComponentType`(v1) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30c1fe.  v1:= temp @kind object;
  #L30c200.  goto L30c20e;
  #L30c202.  v1:= (`java.lang.Class`) v1 @kind object;
  #L30c206.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L30c20c.  v1:= temp @kind object;
  #L30c20e.  return v1 @kind object;
}
procedure `java.lang.reflect.Type` `h`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lf8/b;.h:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30c220.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L30c224.  call temp:= `l`(v1, v2, v0) @signature `Lf8/b;.l:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L30c22a.  v1:= temp @kind object;
  #L30c22c.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L30c230.  v0:= 0I;
  #L30c232.  if v2 == 0 then goto L30c246;
  #L30c236.  v1:= (`java.lang.reflect.WildcardType`) v1 @kind object;
  #L30c23a.  call temp:= `getUpperBounds`(v1) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c240.  v1:= temp @kind object;
  #L30c242.  v1:= v1[v0] @kind object;
  #L30c246.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L30c24a.  if v2 == 0 then goto L30c260;
  #L30c24e.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L30c252.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c258.  v1:= temp @kind object;
  #L30c25a.  v1:= v1[v0] @kind object;
  #L30c25e.  return v1 @kind object;
  #L30c260.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L30c264.  return v1 @kind object;
}
procedure `java.lang.reflect.Type` `i`(`java.lang.reflect.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lf8/b;.i:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L30c278.  if v5 != v4 then goto L30c27e;
  #L30c27c.  return v3 @kind object;
  #L30c27e.  call temp:= `isInterface`(v5) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L30c284.  v3:= temp;
  #L30c286.  if v3 == 0 then goto L30c2e0;
  #L30c28a.  call temp:= `getInterfaces`(v4) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L30c290.  v3:= temp @kind object;
  #L30c292.  v0:= 0I;
  #L30c294.  v1:= length @variable v3;
  #L30c296.  if v0 >= v1 then goto L30c2e0;
  #L30c29a.  v2:= v3[v0] @kind object;
  #L30c29e.  if v2 != v5 then goto L30c2b0;
  #L30c2a2.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L30c2a8.  v3:= temp @kind object;
  #L30c2aa.  v3:= v3[v0] @kind object;
  #L30c2ae.  return v3 @kind object;
  #L30c2b0.  v2:= v3[v0] @kind object;
  #L30c2b4.  call temp:= `isAssignableFrom`(v5, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30c2ba.  v2:= temp;
  #L30c2bc.  if v2 == 0 then goto L30c2da;
  #L30c2c0.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L30c2c6.  v4:= temp @kind object;
  #L30c2c8.  v4:= v4[v0] @kind object;
  #L30c2cc.  v3:= v3[v0] @kind object;
  #L30c2d0.  call temp:= `i`(v4, v3, v5) @signature `Lf8/b;.i:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L30c2d6.  v3:= temp @kind object;
  #L30c2d8.  return v3 @kind object;
  #L30c2da.  v0:= v0 + 1;
  #L30c2de.  goto L30c296;
  #L30c2e0.  call temp:= `isInterface`(v4) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L30c2e6.  v3:= temp;
  #L30c2e8.  if v3 != 0 then goto L30c32c;
  #L30c2ec.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L30c2f0.  if v4 == v3 then goto L30c32c;
  #L30c2f4.  call temp:= `getSuperclass`(v4) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L30c2fa.  v3:= temp @kind object;
  #L30c2fc.  if v3 != v5 then goto L30c30a;
  #L30c300.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L30c306.  v3:= temp @kind object;
  #L30c308.  return v3 @kind object;
  #L30c30a.  call temp:= `isAssignableFrom`(v5, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30c310.  v0:= temp;
  #L30c312.  if v0 == 0 then goto L30c328;
  #L30c316.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L30c31c.  v4:= temp @kind object;
  #L30c31e.  call temp:= `i`(v4, v3, v5) @signature `Lf8/b;.i:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L30c324.  v3:= temp @kind object;
  #L30c326.  return v3 @kind object;
  #L30c328.  v4:= v3 @kind object;
  #L30c32a.  goto L30c2ec;
  #L30c32c.  return v5 @kind object;
}
procedure `java.lang.reflect.Type`[] `j`(`java.lang.reflect.Type` v6 @kind object, `java.lang.Class` v7 @kind object) @signature `Lf8/b;.j:(Ljava/lang/reflect/Type;Ljava/lang/Class;)[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30c5e0.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L30c5e4.  v1:= constclass @type ^`java.lang.String` @kind object;
  #L30c5e8.  v2:= constclass @type ^`java.util.Properties` @kind object;
  #L30c5ec.  v3:= 1I;
  #L30c5ee.  v4:= 0I;
  #L30c5f0.  v5:= 2I;
  #L30c5f2.  if v6 != v2 then goto L30c604;
  #L30c5f6.  v6:= new `java.lang.reflect.Type`[v5];
  #L30c5fa.  v6[v4]:= v1 @kind object;
  #L30c5fe.  v6[v3]:= v1 @kind object;
  #L30c602.  return v6 @kind object;
  #L30c604.  v1:= constclass @type ^`java.util.Map` @kind object;
  #L30c608.  call temp:= `l`(v6, v7, v1) @signature `Lf8/b;.l:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L30c60e.  v6:= temp @kind object;
  #L30c610.  v7:= instanceof @variable v6 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L30c614.  if v7 == 0 then goto L30c626;
  #L30c618.  v6:= (`java.lang.reflect.ParameterizedType`) v6 @kind object;
  #L30c61c.  call temp:= `getActualTypeArguments`(v6) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c622.  v6:= temp @kind object;
  #L30c624.  return v6 @kind object;
  #L30c626.  v6:= new `java.lang.reflect.Type`[v5];
  #L30c62a.  v6[v4]:= v0 @kind object;
  #L30c62e.  v6[v3]:= v0 @kind object;
  #L30c632.  return v6 @kind object;
}
procedure `java.lang.Class` `k`(`java.lang.reflect.Type` v4 @kind object) @signature `Lf8/b;.k:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30bfc8.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L30bfcc.  if v0 == 0 then goto L30bfd6;
  #L30bfd0.  v4:= (`java.lang.Class`) v4 @kind object;
  #L30bfd4.  return v4 @kind object;
  #L30bfd6.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L30bfda.  if v0 == 0 then goto L30bffa;
  #L30bfde.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L30bfe2.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30bfe8.  v4:= temp @kind object;
  #L30bfea.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L30bfee.  call `a`(v0) @signature `Lf8/a;.a:(Z)V` @kind static;
  #L30bff4.  v4:= (`java.lang.Class`) v4 @kind object;
  #L30bff8.  return v4 @kind object;
  #L30bffa.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L30bffe.  v1:= 0I;
  #L30c000.  if v0 == 0 then goto L30c02a;
  #L30c004.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L30c008.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30c00e.  v4:= temp @kind object;
  #L30c010.  call temp:= `k`(v4) @signature `Lf8/b;.k:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L30c016.  v4:= temp @kind object;
  #L30c018.  call temp:= `newInstance`(v4, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L30c01e.  v4:= temp @kind object;
  #L30c020.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L30c026.  v4:= temp @kind object;
  #L30c028.  return v4 @kind object;
  #L30c02a.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L30c02e.  if v0 == 0 then goto L30c038;
  #L30c032.  v4:= constclass @type ^`java.lang.Object` @kind object;
  #L30c036.  return v4 @kind object;
  #L30c038.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L30c03c.  if v0 == 0 then goto L30c05a;
  #L30c040.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L30c044.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c04a.  v4:= temp @kind object;
  #L30c04c.  v4:= v4[v1] @kind object;
  #L30c050.  call temp:= `k`(v4) @signature `Lf8/b;.k:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L30c056.  v4:= temp @kind object;
  #L30c058.  return v4 @kind object;
  #L30c05a.  if v4 != 0 then goto L30c064;
  #L30c05e.  v0:= "null" @kind object;
  #L30c062.  goto L30c074;
  #L30c064.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L30c06a.  v0:= temp @kind object;
  #L30c06c.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L30c072.  v0:= temp @kind object;
  #L30c074.  v1:= new `java.lang.IllegalArgumentException`;
  #L30c078.  v2:= new `java.lang.StringBuilder`;
  #L30c07c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30c082.  v3:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L30c086.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30c08c.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30c092.  v4:= "> is of type " @kind object;
  #L30c096.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30c09c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30c0a2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30c0a8.  v4:= temp @kind object;
  #L30c0aa.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30c0b0.  throw v1;
}
procedure `java.lang.reflect.Type` `l`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lf8/b;.l:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L30c340.  v0:= instanceof @variable v1 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L30c344.  if v0 == 0 then goto L30c35a;
  #L30c348.  v1:= (`java.lang.reflect.WildcardType`) v1 @kind object;
  #L30c34c.  call temp:= `getUpperBounds`(v1) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c352.  v1:= temp @kind object;
  #L30c354.  v0:= 0I;
  #L30c356.  v1:= v1[v0] @kind object;
  #L30c35a.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30c360.  v0:= temp;
  #L30c362.  call `a`(v0) @signature `Lf8/a;.a:(Z)V` @kind static;
  #L30c368.  call temp:= `i`(v1, v2, v3) @signature `Lf8/b;.i:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L30c36e.  v3:= temp @kind object;
  #L30c370.  call temp:= `p`(v1, v2, v3) @signature `Lf8/b;.p:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L30c376.  v1:= temp @kind object;
  #L30c378.  return v1 @kind object;
}
procedure `int` `m`(`java.lang.Object` v0 @kind object) @signature `Lf8/b;.m:(Ljava/lang/Object;)I` @AccessFlag STATIC {
    temp;

  #L30bf3c.  if v0 == 0 then goto L30bf4a;
  #L30bf40.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30bf46.  v0:= temp;
  #L30bf48.  goto L30bf4c;
  #L30bf4a.  v0:= 0I;
  #L30bf4c.  return v0;
}
procedure `int` `n`(`java.lang.Object`[] v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lf8/b;.n:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L30bf60.  v0:= length @variable v3;
  #L30bf62.  v1:= 0I;
  #L30bf64.  if v1 >= v0 then goto L30bf80;
  #L30bf68.  v2:= v3[v1] @kind object;
  #L30bf6c.  call temp:= `equals`(v4, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30bf72.  v2:= temp;
  #L30bf74.  if v2 == 0 then goto L30bf7a;
  #L30bf78.  return v1;
  #L30bf7a.  v1:= v1 + 1;
  #L30bf7e.  goto L30bf64;
  #L30bf80.  v3:= new `java.util.NoSuchElementException`;
  #L30bf84.  call `<init>`(v3) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L30bf8a.  throw v3;
}
procedure `java.lang.reflect.ParameterizedType` `o`(`java.lang.reflect.Type` v1 @kind object, `java.lang.reflect.Type` v2 @kind object, `java.lang.reflect.Type`[] v3 @kind object) @signature `Lf8/b;.o:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30c110.  v0:= new `f8.b$b`;
  #L30c114.  call `<init>`(v0, v1, v2, v3) @signature `Lf8/b$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L30c11a.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `p`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.reflect.Type` v3 @kind object) @signature `Lf8/b;.p:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30c38c.  v0:= new `java.util.HashMap`;
  #L30c390.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L30c396.  call temp:= `q`(v1, v2, v3, v0) @signature `Lf8/b;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/reflect/Type;` @kind static;
  #L30c39c.  v1:= temp @kind object;
  #L30c39e.  return v1 @kind object;
}
procedure `java.lang.reflect.Type` `q`(`java.lang.reflect.Type` v9 @kind object, `java.lang.Class` v10 @kind object, `java.lang.reflect.Type` v11 @kind object, `java.util.Map` v12 @kind object) @signature `Lf8/b;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L30c3b0.  v0:= 0I;
  #L30c3b2.  v1:= instanceof @variable v11 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L30c3b6.  if v1 == 0 then goto L30c3fe;
  #L30c3ba.  v1:= v11 @kind object;
  #L30c3bc.  v1:= (`java.lang.reflect.TypeVariable`) v1 @kind object;
  #L30c3c0.  call temp:= `get`(v12, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30c3c6.  v2:= temp @kind object;
  #L30c3c8.  v2:= (`java.lang.reflect.Type`) v2 @kind object;
  #L30c3cc.  if v2 == 0 then goto L30c3de;
  #L30c3d0.  v9:= `@@java.lang.Void.TYPE` @type ^`java.lang.Class` @kind object;
  #L30c3d4.  if v2 != v9 then goto L30c3da;
  #L30c3d8.  goto L30c3dc;
  #L30c3da.  v11:= v2 @kind object;
  #L30c3dc.  return v11 @kind object;
  #L30c3de.  v11:= `@@java.lang.Void.TYPE` @type ^`java.lang.Class` @kind object;
  #L30c3e2.  call temp:= `put`(v12, v1, v11) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30c3e8.  if v0 != 0 then goto L30c3ee;
  #L30c3ec.  v0:= v1 @kind object;
  #L30c3ee.  call temp:= `r`(v9, v10, v1) @signature `Lf8/b;.r:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L30c3f4.  v11:= temp @kind object;
  #L30c3f6.  if v11 != v1 then goto L30c3b2;
  #L30c3fa.  goto L30c55e;
  #L30c3fe.  v1:= instanceof @variable v11 @type ^`java.lang.Class` @kind boolean;
  #L30c402.  if v1 == 0 then goto L30c448;
  #L30c406.  v1:= v11 @kind object;
  #L30c408.  v1:= (`java.lang.Class`) v1 @kind object;
  #L30c40c.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L30c412.  v2:= temp;
  #L30c414.  if v2 == 0 then goto L30c448;
  #L30c418.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L30c41e.  v11:= temp @kind object;
  #L30c420.  call temp:= `q`(v9, v10, v11, v12) @signature `Lf8/b;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/reflect/Type;` @kind static;
  #L30c426.  v9:= temp @kind object;
  #L30c428.  call temp:= `e`(v11, v9) @signature `Lf8/b;.e:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L30c42e.  v10:= temp;
  #L30c430.  if v10 == 0 then goto L30c43a;
  #L30c434.  v11:= v1 @kind object;
  #L30c436.  goto L30c55e;
  #L30c43a.  call temp:= `a`(v9) @signature `Lf8/b;.a:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/GenericArrayType;` @kind static;
  #L30c440.  v9:= temp @kind object;
  #L30c442.  v11:= v9 @kind object;
  #L30c444.  goto L30c55e;
  #L30c448.  v1:= instanceof @variable v11 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L30c44c.  if v1 == 0 then goto L30c474;
  #L30c450.  v11:= (`java.lang.reflect.GenericArrayType`) v11 @kind object;
  #L30c454.  call temp:= `getGenericComponentType`(v11) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30c45a.  v1:= temp @kind object;
  #L30c45c.  call temp:= `q`(v9, v10, v1, v12) @signature `Lf8/b;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/reflect/Type;` @kind static;
  #L30c462.  v9:= temp @kind object;
  #L30c464.  call temp:= `e`(v1, v9) @signature `Lf8/b;.e:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L30c46a.  v10:= temp;
  #L30c46c.  if v10 == 0 then goto L30c43a;
  #L30c470.  goto L30c55e;
  #L30c474.  v1:= instanceof @variable v11 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L30c478.  v2:= 0I;
  #L30c47a.  v3:= 1I;
  #L30c47c.  if v1 == 0 then goto L30c4fc;
  #L30c480.  v11:= (`java.lang.reflect.ParameterizedType`) v11 @kind object;
  #L30c484.  call temp:= `getOwnerType`(v11) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30c48a.  v1:= temp @kind object;
  #L30c48c.  call temp:= `q`(v9, v10, v1, v12) @signature `Lf8/b;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/reflect/Type;` @kind static;
  #L30c492.  v4:= temp @kind object;
  #L30c494.  call temp:= `e`(v4, v1) @signature `Lf8/b;.e:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L30c49a.  v1:= temp;
  #L30c49c.  v1:= v1 ^~ v3 @kind int;
  #L30c49e.  call temp:= `getActualTypeArguments`(v11) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c4a4.  v5:= temp @kind object;
  #L30c4a6.  v6:= length @variable v5;
  #L30c4a8.  if v2 >= v6 then goto L30c4e6;
  #L30c4ac.  v7:= v5[v2] @kind object;
  #L30c4b0.  call temp:= `q`(v9, v10, v7, v12) @signature `Lf8/b;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/reflect/Type;` @kind static;
  #L30c4b6.  v7:= temp @kind object;
  #L30c4b8.  v8:= v5[v2] @kind object;
  #L30c4bc.  call temp:= `e`(v7, v8) @signature `Lf8/b;.e:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L30c4c2.  v8:= temp;
  #L30c4c4.  if v8 != 0 then goto L30c4e0;
  #L30c4c8.  if v1 != 0 then goto L30c4dc;
  #L30c4cc.  call temp:= `clone`(v5) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L30c4d2.  v1:= temp @kind object;
  #L30c4d4.  v5:= v1 @kind object;
  #L30c4d6.  v5:= (`java.lang.reflect.Type`[]) v5 @kind object;
  #L30c4da.  v1:= 1I;
  #L30c4dc.  v5[v2]:= v7 @kind object;
  #L30c4e0.  v2:= v2 + 1;
  #L30c4e4.  goto L30c4a8;
  #L30c4e6.  if v1 == 0 then goto L30c55e;
  #L30c4ea.  call temp:= `getRawType`(v11) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L30c4f0.  v9:= temp @kind object;
  #L30c4f2.  call temp:= `o`(v4, v9, v5) @signature `Lf8/b;.o:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L30c4f8.  v9:= temp @kind object;
  #L30c4fa.  goto L30c442;
  #L30c4fc.  v1:= instanceof @variable v11 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L30c500.  if v1 == 0 then goto L30c55e;
  #L30c504.  v11:= (`java.lang.reflect.WildcardType`) v11 @kind object;
  #L30c508.  call temp:= `getLowerBounds`(v11) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c50e.  v1:= temp @kind object;
  #L30c510.  call temp:= `getUpperBounds`(v11) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c516.  v4:= temp @kind object;
  #L30c518.  v5:= length @variable v1;
  #L30c51a.  if v5 != v3 then goto L30c53c;
  #L30c51e.  v3:= v1[v2] @kind object;
  #L30c522.  call temp:= `q`(v9, v10, v3, v12) @signature `Lf8/b;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/reflect/Type;` @kind static;
  #L30c528.  v9:= temp @kind object;
  #L30c52a.  v10:= v1[v2] @kind object;
  #L30c52e.  if v9 == v10 then goto L30c55e;
  #L30c532.  call temp:= `t`(v9) @signature `Lf8/b;.t:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;` @kind static;
  #L30c538.  v11:= temp @kind object;
  #L30c53a.  goto L30c55e;
  #L30c53c.  v1:= length @variable v4;
  #L30c53e.  if v1 != v3 then goto L30c55e;
  #L30c542.  v1:= v4[v2] @kind object;
  #L30c546.  call temp:= `q`(v9, v10, v1, v12) @signature `Lf8/b;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/reflect/Type;` @kind static;
  #L30c54c.  v9:= temp @kind object;
  #L30c54e.  v10:= v4[v2] @kind object;
  #L30c552.  if v9 == v10 then goto L30c55e;
  #L30c556.  call temp:= `s`(v9) @signature `Lf8/b;.s:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;` @kind static;
  #L30c55c.  v11:= temp @kind object;
  #L30c55e.  if v0 == 0 then goto L30c568;
  #L30c562.  call temp:= `put`(v12, v0, v11) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30c568.  return v11 @kind object;
  #L30c56a.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L30c56c.  throw v9;
  catch `java.lang.Throwable` @[L30c546..L30c54e] goto L30c56a;
}
procedure `java.lang.reflect.Type` `r`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.reflect.TypeVariable` v3 @kind object) @signature `Lf8/b;.r:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L30c58c.  call temp:= `d`(v3) @signature `Lf8/b;.d:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L30c592.  v0:= temp @kind object;
  #L30c594.  if v0 != 0 then goto L30c59a;
  #L30c598.  return v3 @kind object;
  #L30c59a.  call temp:= `i`(v1, v2, v0) @signature `Lf8/b;.i:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L30c5a0.  v1:= temp @kind object;
  #L30c5a2.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L30c5a6.  if v2 == 0 then goto L30c5cc;
  #L30c5aa.  call temp:= `getTypeParameters`(v0) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L30c5b0.  v2:= temp @kind object;
  #L30c5b2.  call temp:= `n`(v2, v3) @signature `Lf8/b;.n:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L30c5b8.  v2:= temp;
  #L30c5ba.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L30c5be.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c5c4.  v1:= temp @kind object;
  #L30c5c6.  v1:= v1[v2] @kind object;
  #L30c5ca.  return v1 @kind object;
  #L30c5cc.  return v3 @kind object;
}
procedure `java.lang.reflect.WildcardType` `s`(`java.lang.reflect.Type` v2 @kind object) @signature `Lf8/b;.s:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L30c644.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L30c648.  if v0 == 0 then goto L30c65a;
  #L30c64c.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L30c650.  call temp:= `getUpperBounds`(v2) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c656.  v2:= temp @kind object;
  #L30c658.  goto L30c668;
  #L30c65a.  v0:= 1I;
  #L30c65c.  v0:= new `java.lang.reflect.Type`[v0];
  #L30c660.  v1:= 0I;
  #L30c662.  v0[v1]:= v2 @kind object;
  #L30c666.  v2:= v0 @kind object;
  #L30c668.  v0:= new `f8.b$c`;
  #L30c66c.  v1:= `@@f8.b.a` @type ^`java.lang.reflect.Type`[] @kind object;
  #L30c670.  call `<init>`(v0, v2, v1) @signature `Lf8/b$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L30c676.  return v0 @kind object;
}
procedure `java.lang.reflect.WildcardType` `t`(`java.lang.reflect.Type` v4 @kind object) @signature `Lf8/b;.t:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30c688.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L30c68c.  v1:= 0I;
  #L30c68e.  v2:= 1I;
  #L30c690.  if v0 == 0 then goto L30c6a2;
  #L30c694.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L30c698.  call temp:= `getLowerBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30c69e.  v4:= temp @kind object;
  #L30c6a0.  goto L30c6ac;
  #L30c6a2.  v0:= new `java.lang.reflect.Type`[v2];
  #L30c6a6.  v0[v1]:= v4 @kind object;
  #L30c6aa.  v4:= v0 @kind object;
  #L30c6ac.  v0:= new `f8.b$c`;
  #L30c6b0.  v2:= new `java.lang.reflect.Type`[v2];
  #L30c6b4.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L30c6b8.  v2[v1]:= v3 @kind object;
  #L30c6bc.  call `<init>`(v0, v2, v4) @signature `Lf8/b$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L30c6c2.  return v0 @kind object;
}
procedure `java.lang.String` `u`(`java.lang.reflect.Type` v1 @kind object) @signature `Lf8/b;.u:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30c0c4.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L30c0c8.  if v0 == 0 then goto L30c0da;
  #L30c0cc.  v1:= (`java.lang.Class`) v1 @kind object;
  #L30c0d0.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L30c0d6.  v1:= temp @kind object;
  #L30c0d8.  goto L30c0e2;
  #L30c0da.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L30c0e0.  v1:= temp @kind object;
  #L30c0e2.  return v1 @kind object;
}
