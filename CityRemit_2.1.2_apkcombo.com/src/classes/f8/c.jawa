record `f8.c` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.Map` `f8.c.a` @AccessFlag PRIVATE_FINAL;
  `i8.b` `f8.c.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f8.c` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lf8/c;.<init>:(Ljava/util/Map;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L30ce3c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30ce42.  call temp:= `a`() @signature `Li8/b;.a:()Li8/b;` @kind static;
  #L30ce48.  v0:= temp @kind object;
  #L30ce4a.  v1.`f8.c.b` @type ^`i8.b` := v0 @kind object;
  #L30ce4e.  v1.`f8.c.a` @type ^`java.util.Map` := v2 @kind object;
  #L30ce52.  return @kind void;
}
procedure `f8.i` `b`(`f8.c` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lf8/c;.b:(Ljava/lang/Class;)Lf8/i;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L30cc54.  v0:= 0I;
  #L30cc56.  v0:= new `java.lang.Class`[v0];
  #L30cc5a.  call temp:= `getDeclaredConstructor`(v2, v0) @signature `Ljava/lang/Class;.getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L30cc60.  v2:= temp @kind object;
  #L30cc62.  call temp:= `isAccessible`(v2) @signature `Ljava/lang/reflect/Constructor;.isAccessible:()Z` @kind virtual;
  #L30cc68.  v0:= temp;
  #L30cc6a.  if v0 != 0 then goto L30cc78;
  #L30cc6e.  v0:= v1.`f8.c.b` @type ^`i8.b` @kind object;
  #L30cc72.  call `b`(v0, v2) @signature `Li8/b;.b:(Ljava/lang/reflect/AccessibleObject;)V` @kind virtual;
  #L30cc78.  v0:= new `f8.c$h`;
  #L30cc7c.  call `<init>`(v0, v1, v2) @signature `Lf8/c$h;.<init>:(Lf8/c;Ljava/lang/reflect/Constructor;)V` @kind direct;
  #L30cc82.  return v0 @kind object;
  #L30cc84.  v2:= 0I;
  #L30cc86.  return v2 @kind object;
  catch `java.lang.NoSuchMethodException` @[L30cc56..L30cc82] goto L30cc84;
}
procedure `f8.i` `c`(`f8.c` v1 @kind this, `java.lang.reflect.Type` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lf8/c;.c:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lf8/i;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L30cca8.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L30ccac.  call temp:= `isAssignableFrom`(v0, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30ccb2.  v0:= temp;
  #L30ccb4.  if v0 == 0 then goto L30cd34;
  #L30ccb8.  v0:= constclass @type ^`java.util.SortedSet` @kind object;
  #L30ccbc.  call temp:= `isAssignableFrom`(v0, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30ccc2.  v0:= temp;
  #L30ccc4.  if v0 == 0 then goto L30ccd4;
  #L30ccc8.  v2:= new `f8.c$i`;
  #L30cccc.  call `<init>`(v2, v1) @signature `Lf8/c$i;.<init>:(Lf8/c;)V` @kind direct;
  #L30ccd2.  return v2 @kind object;
  #L30ccd4.  v0:= constclass @type ^`java.util.EnumSet` @kind object;
  #L30ccd8.  call temp:= `isAssignableFrom`(v0, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30ccde.  v0:= temp;
  #L30cce0.  if v0 == 0 then goto L30ccf0;
  #L30cce4.  v3:= new `f8.c$j`;
  #L30cce8.  call `<init>`(v3, v1, v2) @signature `Lf8/c$j;.<init>:(Lf8/c;Ljava/lang/reflect/Type;)V` @kind direct;
  #L30ccee.  return v3 @kind object;
  #L30ccf0.  v2:= constclass @type ^`java.util.Set` @kind object;
  #L30ccf4.  call temp:= `isAssignableFrom`(v2, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30ccfa.  v2:= temp;
  #L30ccfc.  if v2 == 0 then goto L30cd0c;
  #L30cd00.  v2:= new `f8.c$k`;
  #L30cd04.  call `<init>`(v2, v1) @signature `Lf8/c$k;.<init>:(Lf8/c;)V` @kind direct;
  #L30cd0a.  return v2 @kind object;
  #L30cd0c.  v2:= constclass @type ^`java.util.Queue` @kind object;
  #L30cd10.  call temp:= `isAssignableFrom`(v2, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30cd16.  v2:= temp;
  #L30cd18.  if v2 == 0 then goto L30cd28;
  #L30cd1c.  v2:= new `f8.c$l`;
  #L30cd20.  call `<init>`(v2, v1) @signature `Lf8/c$l;.<init>:(Lf8/c;)V` @kind direct;
  #L30cd26.  return v2 @kind object;
  #L30cd28.  v2:= new `f8.c$m`;
  #L30cd2c.  call `<init>`(v2, v1) @signature `Lf8/c$m;.<init>:(Lf8/c;)V` @kind direct;
  #L30cd32.  return v2 @kind object;
  #L30cd34.  v0:= constclass @type ^`java.util.Map` @kind object;
  #L30cd38.  call temp:= `isAssignableFrom`(v0, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30cd3e.  v0:= temp;
  #L30cd40.  if v0 == 0 then goto L30cdea;
  #L30cd44.  v0:= constclass @type ^`java.util.concurrent.ConcurrentNavigableMap` @kind object;
  #L30cd48.  call temp:= `isAssignableFrom`(v0, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30cd4e.  v0:= temp;
  #L30cd50.  if v0 == 0 then goto L30cd60;
  #L30cd54.  v2:= new `f8.c$n`;
  #L30cd58.  call `<init>`(v2, v1) @signature `Lf8/c$n;.<init>:(Lf8/c;)V` @kind direct;
  #L30cd5e.  return v2 @kind object;
  #L30cd60.  v0:= constclass @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L30cd64.  call temp:= `isAssignableFrom`(v0, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30cd6a.  v0:= temp;
  #L30cd6c.  if v0 == 0 then goto L30cd7c;
  #L30cd70.  v2:= new `f8.c$a`;
  #L30cd74.  call `<init>`(v2, v1) @signature `Lf8/c$a;.<init>:(Lf8/c;)V` @kind direct;
  #L30cd7a.  return v2 @kind object;
  #L30cd7c.  v0:= constclass @type ^`java.util.SortedMap` @kind object;
  #L30cd80.  call temp:= `isAssignableFrom`(v0, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30cd86.  v3:= temp;
  #L30cd88.  if v3 == 0 then goto L30cd98;
  #L30cd8c.  v2:= new `f8.c$b`;
  #L30cd90.  call `<init>`(v2, v1) @signature `Lf8/c$b;.<init>:(Lf8/c;)V` @kind direct;
  #L30cd96.  return v2 @kind object;
  #L30cd98.  v3:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L30cd9c.  if v3 == 0 then goto L30cdde;
  #L30cda0.  v3:= constclass @type ^`java.lang.String` @kind object;
  #L30cda4.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L30cda8.  call temp:= `getActualTypeArguments`(v2) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L30cdae.  v2:= temp @kind object;
  #L30cdb0.  v0:= 0I;
  #L30cdb2.  v2:= v2[v0] @kind object;
  #L30cdb6.  call temp:= `b`(v2) @signature `Lk8/a;.b:(Ljava/lang/reflect/Type;)Lk8/a;` @kind static;
  #L30cdbc.  v2:= temp @kind object;
  #L30cdbe.  call temp:= `c`(v2) @signature `Lk8/a;.c:()Ljava/lang/Class;` @kind virtual;
  #L30cdc4.  v2:= temp @kind object;
  #L30cdc6.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L30cdcc.  v2:= temp;
  #L30cdce.  if v2 != 0 then goto L30cdde;
  #L30cdd2.  v2:= new `f8.c$c`;
  #L30cdd6.  call `<init>`(v2, v1) @signature `Lf8/c$c;.<init>:(Lf8/c;)V` @kind direct;
  #L30cddc.  return v2 @kind object;
  #L30cdde.  v2:= new `f8.c$d`;
  #L30cde2.  call `<init>`(v2, v1) @signature `Lf8/c$d;.<init>:(Lf8/c;)V` @kind direct;
  #L30cde8.  return v2 @kind object;
  #L30cdea.  v2:= 0I;
  #L30cdec.  return v2 @kind object;
}
procedure `f8.i` `d`(`f8.c` v1 @kind this, `java.lang.reflect.Type` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lf8/c;.d:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lf8/i;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L30ce00.  v0:= new `f8.c$e`;
  #L30ce04.  call `<init>`(v0, v1, v3, v2) @signature `Lf8/c$e;.<init>:(Lf8/c;Ljava/lang/Class;Ljava/lang/reflect/Type;)V` @kind direct;
  #L30ce0a.  return v0 @kind object;
}
procedure `f8.i` `a`(`f8.c` v2 @kind this, `k8.a` v3 @kind object) @signature `Lf8/c;.a:(Lk8/a;)Lf8/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30cbcc.  call temp:= `e`(v3) @signature `Lk8/a;.e:()Ljava/lang/reflect/Type;` @kind virtual;
  #L30cbd2.  v0:= temp @kind object;
  #L30cbd4.  call temp:= `c`(v3) @signature `Lk8/a;.c:()Ljava/lang/Class;` @kind virtual;
  #L30cbda.  v3:= temp @kind object;
  #L30cbdc.  v1:= v2.`f8.c.a` @type ^`java.util.Map` @kind object;
  #L30cbe0.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30cbe6.  v1:= temp @kind object;
  #L30cbe8.  v1:= (`d8.g`) v1 @kind object;
  #L30cbec.  if v1 == 0 then goto L30cbfc;
  #L30cbf0.  v3:= new `f8.c$f`;
  #L30cbf4.  call `<init>`(v3, v2, v1, v0) @signature `Lf8/c$f;.<init>:(Lf8/c;Ld8/g;Ljava/lang/reflect/Type;)V` @kind direct;
  #L30cbfa.  return v3 @kind object;
  #L30cbfc.  v1:= v2.`f8.c.a` @type ^`java.util.Map` @kind object;
  #L30cc00.  call temp:= `get`(v1, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30cc06.  v1:= temp @kind object;
  #L30cc08.  v1:= (`d8.g`) v1 @kind object;
  #L30cc0c.  if v1 == 0 then goto L30cc1c;
  #L30cc10.  v3:= new `f8.c$g`;
  #L30cc14.  call `<init>`(v3, v2, v1, v0) @signature `Lf8/c$g;.<init>:(Lf8/c;Ld8/g;Ljava/lang/reflect/Type;)V` @kind direct;
  #L30cc1a.  return v3 @kind object;
  #L30cc1c.  call temp:= `b`(v2, v3) @signature `Lf8/c;.b:(Ljava/lang/Class;)Lf8/i;` @kind direct;
  #L30cc22.  v1:= temp @kind object;
  #L30cc24.  if v1 == 0 then goto L30cc2a;
  #L30cc28.  return v1 @kind object;
  #L30cc2a.  call temp:= `c`(v2, v0, v3) @signature `Lf8/c;.c:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lf8/i;` @kind direct;
  #L30cc30.  v1:= temp @kind object;
  #L30cc32.  if v1 == 0 then goto L30cc38;
  #L30cc36.  return v1 @kind object;
  #L30cc38.  call temp:= `d`(v2, v0, v3) @signature `Lf8/c;.d:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lf8/i;` @kind direct;
  #L30cc3e.  v3:= temp @kind object;
  #L30cc40.  return v3 @kind object;
}
procedure `java.lang.String` `toString`(`f8.c` v1 @kind this) @signature `Lf8/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30ce1c.  v0:= v1.`f8.c.a` @type ^`java.util.Map` @kind object;
  #L30ce20.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L30ce26.  v0:= temp @kind object;
  #L30ce28.  return v0 @kind object;
}
