record `f8.h` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.AbstractMap` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Comparator` `f8.h.o` @AccessFlag ;
  `f8.h$e` `f8.h.p` @AccessFlag ;
  `int` `f8.h.q` @AccessFlag ;
  `int` `f8.h.r` @AccessFlag ;
  `f8.h$e` `f8.h.s` @AccessFlag FINAL;
  `f8.h$b` `f8.h.t` @AccessFlag PRIVATE;
  `f8.h$c` `f8.h.u` @AccessFlag PRIVATE;
}
global `java.util.Comparator` `@@f8.h.v` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf8/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L30df54.  v0:= constclass @type ^`f8.h` @kind object;
  #L30df58.  v0:= new `f8.h$a`;
  #L30df5c.  call `<init>`(v0) @signature `Lf8/h$a;.<init>:()V` @kind direct;
  #L30df62.  `@@f8.h.v` @type ^`java.util.Comparator` := v0 @kind object;
  #L30df66.  return @kind void;
}
procedure `void` `<init>`(`f8.h` v1 @kind this) @signature `Lf8/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L30df78.  v0:= `@@f8.h.v` @type ^`java.util.Comparator` @kind object;
  #L30df7c.  call `<init>`(v1, v0) @signature `Lf8/h;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L30df82.  return @kind void;
}
procedure `void` `<init>`(`f8.h` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lf8/h;.<init>:(Ljava/util/Comparator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L30df94.  call `<init>`(v1) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L30df9a.  v0:= 0I;
  #L30df9c.  v1.`f8.h.q` @type ^`int` := v0;
  #L30dfa0.  v1.`f8.h.r` @type ^`int` := v0;
  #L30dfa4.  v0:= new `f8.h$e`;
  #L30dfa8.  call `<init>`(v0) @signature `Lf8/h$e;.<init>:()V` @kind direct;
  #L30dfae.  v1.`f8.h.s` @type ^`f8.h$e` := v0 @kind object;
  #L30dfb2.  if v2 == 0 then goto L30dfb8;
  #L30dfb6.  goto L30dfbc;
  #L30dfb8.  v2:= `@@f8.h.v` @type ^`java.util.Comparator` @kind object;
  #L30dfbc.  v1.`f8.h.o` @type ^`java.util.Comparator` := v2 @kind object;
  #L30dfc0.  return @kind void;
}
procedure `boolean` `a`(`f8.h` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lf8/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;

  #L30dc74.  if v1 == v2 then goto L30dc8e;
  #L30dc78.  if v1 == 0 then goto L30dc8a;
  #L30dc7c.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30dc82.  v1:= temp;
  #L30dc84.  if v1 == 0 then goto L30dc8a;
  #L30dc88.  goto L30dc8e;
  #L30dc8a.  v1:= 0I;
  #L30dc8c.  goto L30dc90;
  #L30dc8e.  v1:= 1I;
  #L30dc90.  return v1;
}
procedure `void` `e`(`f8.h` v7 @kind this, `f8.h$e` v8 @kind object, `boolean` v9 ) @signature `Lf8/h;.e:(Lf8/h$e;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L30e00c.  if v8 == 0 then goto L30e0ee;
  #L30e010.  v0:= v8.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30e014.  v1:= v8.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30e018.  v2:= 0I;
  #L30e01a.  if v0 == 0 then goto L30e024;
  #L30e01e.  v3:= v0.`f8.h$e.v` @type ^`int`;
  #L30e022.  goto L30e026;
  #L30e024.  v3:= 0I;
  #L30e026.  if v1 == 0 then goto L30e030;
  #L30e02a.  v4:= v1.`f8.h$e.v` @type ^`int`;
  #L30e02e.  goto L30e032;
  #L30e030.  v4:= 0I;
  #L30e032.  v5:= v3 - v4 @kind int;
  #L30e036.  v6:= -2I;
  #L30e038.  if v5 != v6 then goto L30e07c;
  #L30e03c.  v0:= v1.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30e040.  v3:= v1.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30e044.  if v3 == 0 then goto L30e04e;
  #L30e048.  v3:= v3.`f8.h$e.v` @type ^`int`;
  #L30e04c.  goto L30e050;
  #L30e04e.  v3:= 0I;
  #L30e050.  if v0 == 0 then goto L30e058;
  #L30e054.  v2:= v0.`f8.h$e.v` @type ^`int`;
  #L30e058.  v2:= v2 - v3 @kind int;
  #L30e05a.  v0:= -1I;
  #L30e05c.  if v2 == v0 then goto L30e070;
  #L30e060.  if v2 != 0 then goto L30e06a;
  #L30e064.  if v9 != 0 then goto L30e06a;
  #L30e068.  goto L30e070;
  #L30e06a.  call `j`(v7, v1) @signature `Lf8/h;.j:(Lf8/h$e;)V` @kind direct;
  #L30e070.  call `i`(v7, v8) @signature `Lf8/h;.i:(Lf8/h$e;)V` @kind direct;
  #L30e076.  if v9 == 0 then goto L30e0e8;
  #L30e07a.  goto L30e0ee;
  #L30e07c.  v1:= 2I;
  #L30e07e.  v6:= 1I;
  #L30e080.  if v5 != v1 then goto L30e0c2;
  #L30e084.  v1:= v0.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30e088.  v3:= v0.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30e08c.  if v3 == 0 then goto L30e096;
  #L30e090.  v3:= v3.`f8.h$e.v` @type ^`int`;
  #L30e094.  goto L30e098;
  #L30e096.  v3:= 0I;
  #L30e098.  if v1 == 0 then goto L30e0a0;
  #L30e09c.  v2:= v1.`f8.h$e.v` @type ^`int`;
  #L30e0a0.  v2:= v2 - v3 @kind int;
  #L30e0a2.  if v2 == v6 then goto L30e0b6;
  #L30e0a6.  if v2 != 0 then goto L30e0b0;
  #L30e0aa.  if v9 != 0 then goto L30e0b0;
  #L30e0ae.  goto L30e0b6;
  #L30e0b0.  call `i`(v7, v0) @signature `Lf8/h;.i:(Lf8/h$e;)V` @kind direct;
  #L30e0b6.  call `j`(v7, v8) @signature `Lf8/h;.j:(Lf8/h$e;)V` @kind direct;
  #L30e0bc.  if v9 == 0 then goto L30e0e8;
  #L30e0c0.  goto L30e0ee;
  #L30e0c2.  if v5 != 0 then goto L30e0d4;
  #L30e0c6.  v3:= v3 + 1;
  #L30e0ca.  v8.`f8.h$e.v` @type ^`int` := v3;
  #L30e0ce.  if v9 == 0 then goto L30e0e8;
  #L30e0d2.  goto L30e0ee;
  #L30e0d4.  call temp:= `max`(v3, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L30e0da.  v0:= temp;
  #L30e0dc.  v0:= v0 + v6 @kind int;
  #L30e0de.  v8.`f8.h$e.v` @type ^`int` := v0;
  #L30e0e2.  if v9 != 0 then goto L30e0e8;
  #L30e0e6.  goto L30e0ee;
  #L30e0e8.  v8:= v8.`f8.h$e.o` @type ^`f8.h$e` @kind object;
  #L30e0ec.  goto L30e00c;
  #L30e0ee.  return @kind void;
}
procedure `void` `h`(`f8.h` v2 @kind this, `f8.h$e` v3 @kind object, `f8.h$e` v4 @kind object) @signature `Lf8/h;.h:(Lf8/h$e;Lf8/h$e;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L30e1f8.  v0:= v3.`f8.h$e.o` @type ^`f8.h$e` @kind object;
  #L30e1fc.  v1:= 0I;
  #L30e1fe.  v3.`f8.h$e.o` @type ^`f8.h$e` := v1 @kind object;
  #L30e202.  if v4 == 0 then goto L30e20a;
  #L30e206.  v4.`f8.h$e.o` @type ^`f8.h$e` := v0 @kind object;
  #L30e20a.  if v0 == 0 then goto L30e222;
  #L30e20e.  v1:= v0.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30e212.  if v1 != v3 then goto L30e21c;
  #L30e216.  v0.`f8.h$e.p` @type ^`f8.h$e` := v4 @kind object;
  #L30e21a.  goto L30e226;
  #L30e21c.  v0.`f8.h$e.q` @type ^`f8.h$e` := v4 @kind object;
  #L30e220.  goto L30e226;
  #L30e222.  v2.`f8.h.p` @type ^`f8.h$e` := v4 @kind object;
  #L30e226.  return @kind void;
}
procedure `void` `i`(`f8.h` v5 @kind this, `f8.h$e` v6 @kind object) @signature `Lf8/h;.i:(Lf8/h$e;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L30e238.  v0:= v6.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30e23c.  v1:= v6.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30e240.  v2:= v1.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30e244.  v3:= v1.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30e248.  v6.`f8.h$e.q` @type ^`f8.h$e` := v2 @kind object;
  #L30e24c.  if v2 == 0 then goto L30e254;
  #L30e250.  v2.`f8.h$e.o` @type ^`f8.h$e` := v6 @kind object;
  #L30e254.  call `h`(v5, v6, v1) @signature `Lf8/h;.h:(Lf8/h$e;Lf8/h$e;)V` @kind direct;
  #L30e25a.  v1.`f8.h$e.p` @type ^`f8.h$e` := v6 @kind object;
  #L30e25e.  v6.`f8.h$e.o` @type ^`f8.h$e` := v1 @kind object;
  #L30e262.  v4:= 0I;
  #L30e264.  if v0 == 0 then goto L30e26e;
  #L30e268.  v0:= v0.`f8.h$e.v` @type ^`int`;
  #L30e26c.  goto L30e270;
  #L30e26e.  v0:= 0I;
  #L30e270.  if v2 == 0 then goto L30e27a;
  #L30e274.  v2:= v2.`f8.h$e.v` @type ^`int`;
  #L30e278.  goto L30e27c;
  #L30e27a.  v2:= 0I;
  #L30e27c.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L30e282.  v0:= temp;
  #L30e284.  v0:= v0 + 1;
  #L30e288.  v6.`f8.h$e.v` @type ^`int` := v0;
  #L30e28c.  if v3 == 0 then goto L30e294;
  #L30e290.  v4:= v3.`f8.h$e.v` @type ^`int`;
  #L30e294.  call temp:= `max`(v0, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L30e29a.  v6:= temp;
  #L30e29c.  v6:= v6 + 1;
  #L30e2a0.  v1.`f8.h$e.v` @type ^`int` := v6;
  #L30e2a4.  return @kind void;
}
procedure `void` `j`(`f8.h` v5 @kind this, `f8.h$e` v6 @kind object) @signature `Lf8/h;.j:(Lf8/h$e;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L30e2b8.  v0:= v6.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30e2bc.  v1:= v6.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30e2c0.  v2:= v0.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30e2c4.  v3:= v0.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30e2c8.  v6.`f8.h$e.p` @type ^`f8.h$e` := v3 @kind object;
  #L30e2cc.  if v3 == 0 then goto L30e2d4;
  #L30e2d0.  v3.`f8.h$e.o` @type ^`f8.h$e` := v6 @kind object;
  #L30e2d4.  call `h`(v5, v6, v0) @signature `Lf8/h;.h:(Lf8/h$e;Lf8/h$e;)V` @kind direct;
  #L30e2da.  v0.`f8.h$e.q` @type ^`f8.h$e` := v6 @kind object;
  #L30e2de.  v6.`f8.h$e.o` @type ^`f8.h$e` := v0 @kind object;
  #L30e2e2.  v4:= 0I;
  #L30e2e4.  if v1 == 0 then goto L30e2ee;
  #L30e2e8.  v1:= v1.`f8.h$e.v` @type ^`int`;
  #L30e2ec.  goto L30e2f0;
  #L30e2ee.  v1:= 0I;
  #L30e2f0.  if v3 == 0 then goto L30e2fa;
  #L30e2f4.  v3:= v3.`f8.h$e.v` @type ^`int`;
  #L30e2f8.  goto L30e2fc;
  #L30e2fa.  v3:= 0I;
  #L30e2fc.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L30e302.  v1:= temp;
  #L30e304.  v1:= v1 + 1;
  #L30e308.  v6.`f8.h$e.v` @type ^`int` := v1;
  #L30e30c.  if v2 == 0 then goto L30e314;
  #L30e310.  v4:= v2.`f8.h$e.v` @type ^`int`;
  #L30e314.  call temp:= `max`(v1, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L30e31a.  v6:= temp;
  #L30e31c.  v6:= v6 + 1;
  #L30e320.  v0.`f8.h$e.v` @type ^`int` := v6;
  #L30e324.  return @kind void;
}
procedure `f8.h$e` `b`(`f8.h` v6 @kind this, `java.lang.Object` v7 @kind object, `boolean` v8 ) @signature `Lf8/h;.b:(Ljava/lang/Object;Z)Lf8/h$e;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30dca4.  v0:= v6.`f8.h.o` @type ^`java.util.Comparator` @kind object;
  #L30dca8.  v1:= v6.`f8.h.p` @type ^`f8.h$e` @kind object;
  #L30dcac.  v2:= 0I;
  #L30dcae.  if v1 == 0 then goto L30dcfc;
  #L30dcb2.  v3:= `@@f8.h.v` @type ^`java.util.Comparator` @kind object;
  #L30dcb6.  if v0 != v3 then goto L30dcc2;
  #L30dcba.  v3:= v7 @kind object;
  #L30dcbc.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L30dcc0.  goto L30dcc4;
  #L30dcc2.  v3:= v2 @kind object;
  #L30dcc4.  v4:= v1.`f8.h$e.t` @type ^`java.lang.Object` @kind object;
  #L30dcc8.  if v3 == 0 then goto L30dcd6;
  #L30dccc.  call temp:= `compareTo`(v3, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L30dcd2.  v4:= temp;
  #L30dcd4.  goto L30dcde;
  #L30dcd6.  call temp:= `compare`(v0, v7, v4) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L30dcdc.  v4:= temp;
  #L30dcde.  if v4 != 0 then goto L30dce4;
  #L30dce2.  return v1 @kind object;
  #L30dce4.  if v4 >= 0 then goto L30dcee;
  #L30dce8.  v5:= v1.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30dcec.  goto L30dcf2;
  #L30dcee.  v5:= v1.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30dcf2.  if v5 != 0 then goto L30dcf8;
  #L30dcf6.  goto L30dcfe;
  #L30dcf8.  v1:= v5 @kind object;
  #L30dcfa.  goto L30dcc4;
  #L30dcfc.  v4:= 0I;
  #L30dcfe.  if v8 != 0 then goto L30dd04;
  #L30dd02.  return v2 @kind object;
  #L30dd04.  v8:= v6.`f8.h.s` @type ^`f8.h$e` @kind object;
  #L30dd08.  v2:= 1I;
  #L30dd0a.  if v1 != 0 then goto L30dd72;
  #L30dd0e.  v3:= `@@f8.h.v` @type ^`java.util.Comparator` @kind object;
  #L30dd12.  if v0 != v3 then goto L30dd5e;
  #L30dd16.  v0:= instanceof @variable v7 @type ^`java.lang.Comparable` @kind boolean;
  #L30dd1a.  if v0 == 0 then goto L30dd20;
  #L30dd1e.  goto L30dd5e;
  #L30dd20.  v8:= new `java.lang.ClassCastException`;
  #L30dd24.  v0:= new `java.lang.StringBuilder`;
  #L30dd28.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30dd2e.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L30dd34.  v7:= temp @kind object;
  #L30dd36.  call temp:= `getName`(v7) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L30dd3c.  v7:= temp @kind object;
  #L30dd3e.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30dd44.  v7:= " is not Comparable" @kind object;
  #L30dd48.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30dd4e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30dd54.  v7:= temp @kind object;
  #L30dd56.  call `<init>`(v8, v7) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30dd5c.  throw v8;
  #L30dd5e.  v0:= new `f8.h$e`;
  #L30dd62.  v3:= v8.`f8.h$e.s` @type ^`f8.h$e` @kind object;
  #L30dd66.  call `<init>`(v0, v1, v7, v8, v3) @signature `Lf8/h$e;.<init>:(Lf8/h$e;Ljava/lang/Object;Lf8/h$e;Lf8/h$e;)V` @kind direct;
  #L30dd6c.  v6.`f8.h.p` @type ^`f8.h$e` := v0 @kind object;
  #L30dd70.  goto L30dd94;
  #L30dd72.  v0:= new `f8.h$e`;
  #L30dd76.  v3:= v8.`f8.h$e.s` @type ^`f8.h$e` @kind object;
  #L30dd7a.  call `<init>`(v0, v1, v7, v8, v3) @signature `Lf8/h$e;.<init>:(Lf8/h$e;Ljava/lang/Object;Lf8/h$e;Lf8/h$e;)V` @kind direct;
  #L30dd80.  if v4 >= 0 then goto L30dd8a;
  #L30dd84.  v1.`f8.h$e.p` @type ^`f8.h$e` := v0 @kind object;
  #L30dd88.  goto L30dd8e;
  #L30dd8a.  v1.`f8.h$e.q` @type ^`f8.h$e` := v0 @kind object;
  #L30dd8e.  call `e`(v6, v1, v2) @signature `Lf8/h;.e:(Lf8/h$e;Z)V` @kind direct;
  #L30dd94.  v7:= v6.`f8.h.q` @type ^`int`;
  #L30dd98.  v7:= v7 + v2 @kind int;
  #L30dd9a.  v6.`f8.h.q` @type ^`int` := v7;
  #L30dd9e.  v7:= v6.`f8.h.r` @type ^`int`;
  #L30dda2.  v7:= v7 + v2 @kind int;
  #L30dda4.  v6.`f8.h.r` @type ^`int` := v7;
  #L30dda8.  return v0 @kind object;
}
procedure `f8.h$e` `c`(`f8.h` v2 @kind this, `java.util.Map$Entry` v3 @kind object) @signature `Lf8/h;.c:(Ljava/util/Map$Entry;)Lf8/h$e;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L30ddbc.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L30ddc2.  v0:= temp @kind object;
  #L30ddc4.  call temp:= `d`(v2, v0) @signature `Lf8/h;.d:(Ljava/lang/Object;)Lf8/h$e;` @kind virtual;
  #L30ddca.  v0:= temp @kind object;
  #L30ddcc.  if v0 == 0 then goto L30ddec;
  #L30ddd0.  v1:= v0.`f8.h$e.u` @type ^`java.lang.Object` @kind object;
  #L30ddd4.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L30ddda.  v3:= temp @kind object;
  #L30dddc.  call temp:= `a`(v2, v1, v3) @signature `Lf8/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L30dde2.  v3:= temp;
  #L30dde4.  if v3 == 0 then goto L30ddec;
  #L30dde8.  v3:= 1I;
  #L30ddea.  goto L30ddee;
  #L30ddec.  v3:= 0I;
  #L30ddee.  if v3 == 0 then goto L30ddf4;
  #L30ddf2.  goto L30ddf6;
  #L30ddf4.  v0:= 0I;
  #L30ddf6.  return v0 @kind object;
}
procedure `void` `clear`(`f8.h` v1 @kind this) @signature `Lf8/h;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30dfd4.  v0:= 0I;
  #L30dfd6.  v1.`f8.h.p` @type ^`f8.h$e` := v0 @kind object;
  #L30dfda.  v0:= 0I;
  #L30dfdc.  v1.`f8.h.q` @type ^`int` := v0;
  #L30dfe0.  v0:= v1.`f8.h.r` @type ^`int`;
  #L30dfe4.  v0:= v0 + 1;
  #L30dfe8.  v1.`f8.h.r` @type ^`int` := v0;
  #L30dfec.  v0:= v1.`f8.h.s` @type ^`f8.h$e` @kind object;
  #L30dff0.  v0.`f8.h$e.s` @type ^`f8.h$e` := v0 @kind object;
  #L30dff4.  v0.`f8.h$e.r` @type ^`f8.h$e` := v0 @kind object;
  #L30dff8.  return @kind void;
}
procedure `boolean` `containsKey`(`f8.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lf8/h;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L30dc50.  call temp:= `d`(v0, v1) @signature `Lf8/h;.d:(Ljava/lang/Object;)Lf8/h$e;` @kind virtual;
  #L30dc56.  v1:= temp @kind object;
  #L30dc58.  if v1 == 0 then goto L30dc60;
  #L30dc5c.  v1:= 1I;
  #L30dc5e.  goto L30dc62;
  #L30dc60.  v1:= 0I;
  #L30dc62.  return v1;
}
procedure `f8.h$e` `d`(`f8.h` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lf8/h;.d:(Ljava/lang/Object;)Lf8/h$e;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L30de08.  v0:= 0I;
  #L30de0a.  if v3 == 0 then goto L30de1a;
  #L30de0e.  v1:= 0I;
  #L30de10.  call temp:= `b`(v2, v3, v1) @signature `Lf8/h;.b:(Ljava/lang/Object;Z)Lf8/h$e;` @kind virtual;
  #L30de16.  v0:= temp @kind object;
  #L30de18.  
  #L30de1a.  return v0 @kind object;
  catch `java.lang.ClassCastException` @[L30de10..L30de18] goto L30de1a;
}
procedure `java.util.Set` `entrySet`(`f8.h` v1 @kind this) @signature `Lf8/h;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30defc.  v0:= v1.`f8.h.t` @type ^`f8.h$b` @kind object;
  #L30df00.  if v0 == 0 then goto L30df06;
  #L30df04.  goto L30df14;
  #L30df06.  v0:= new `f8.h$b`;
  #L30df0a.  call `<init>`(v0, v1) @signature `Lf8/h$b;.<init>:(Lf8/h;)V` @kind direct;
  #L30df10.  v1.`f8.h.t` @type ^`f8.h$b` := v0 @kind object;
  #L30df14.  return v0 @kind object;
}
procedure `void` `f`(`f8.h` v5 @kind this, `f8.h$e` v6 @kind object, `boolean` v7 ) @signature `Lf8/h;.f:(Lf8/h$e;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L30e100.  if v7 == 0 then goto L30e118;
  #L30e104.  v7:= v6.`f8.h$e.s` @type ^`f8.h$e` @kind object;
  #L30e108.  v0:= v6.`f8.h$e.r` @type ^`f8.h$e` @kind object;
  #L30e10c.  v7.`f8.h$e.r` @type ^`f8.h$e` := v0 @kind object;
  #L30e110.  v0:= v6.`f8.h$e.r` @type ^`f8.h$e` @kind object;
  #L30e114.  v0.`f8.h$e.s` @type ^`f8.h$e` := v7 @kind object;
  #L30e118.  v7:= v6.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30e11c.  v0:= v6.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30e120.  v1:= v6.`f8.h$e.o` @type ^`f8.h$e` @kind object;
  #L30e124.  v2:= 0I;
  #L30e126.  v3:= 0I;
  #L30e128.  if v7 == 0 then goto L30e1a0;
  #L30e12c.  if v0 == 0 then goto L30e1a0;
  #L30e130.  v1:= v7.`f8.h$e.v` @type ^`int`;
  #L30e134.  v4:= v0.`f8.h$e.v` @type ^`int`;
  #L30e138.  if v1 <= v4 then goto L30e146;
  #L30e13c.  call temp:= `b`(v7) @signature `Lf8/h$e;.b:()Lf8/h$e;` @kind virtual;
  #L30e142.  v7:= temp @kind object;
  #L30e144.  goto L30e14e;
  #L30e146.  call temp:= `a`(v0) @signature `Lf8/h$e;.a:()Lf8/h$e;` @kind virtual;
  #L30e14c.  v7:= temp @kind object;
  #L30e14e.  call `f`(v5, v7, v2) @signature `Lf8/h;.f:(Lf8/h$e;Z)V` @kind virtual;
  #L30e154.  v0:= v6.`f8.h$e.p` @type ^`f8.h$e` @kind object;
  #L30e158.  if v0 == 0 then goto L30e16e;
  #L30e15c.  v1:= v0.`f8.h$e.v` @type ^`int`;
  #L30e160.  v7.`f8.h$e.p` @type ^`f8.h$e` := v0 @kind object;
  #L30e164.  v0.`f8.h$e.o` @type ^`f8.h$e` := v7 @kind object;
  #L30e168.  v6.`f8.h$e.p` @type ^`f8.h$e` := v3 @kind object;
  #L30e16c.  goto L30e170;
  #L30e16e.  v1:= 0I;
  #L30e170.  v0:= v6.`f8.h$e.q` @type ^`f8.h$e` @kind object;
  #L30e174.  if v0 == 0 then goto L30e188;
  #L30e178.  v2:= v0.`f8.h$e.v` @type ^`int`;
  #L30e17c.  v7.`f8.h$e.q` @type ^`f8.h$e` := v0 @kind object;
  #L30e180.  v0.`f8.h$e.o` @type ^`f8.h$e` := v7 @kind object;
  #L30e184.  v6.`f8.h$e.q` @type ^`f8.h$e` := v3 @kind object;
  #L30e188.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L30e18e.  v0:= temp;
  #L30e190.  v0:= v0 + 1;
  #L30e194.  v7.`f8.h$e.v` @type ^`int` := v0;
  #L30e198.  call `h`(v5, v6, v7) @signature `Lf8/h;.h:(Lf8/h$e;Lf8/h$e;)V` @kind direct;
  #L30e19e.  return @kind void;
  #L30e1a0.  if v7 == 0 then goto L30e1b0;
  #L30e1a4.  call `h`(v5, v6, v7) @signature `Lf8/h;.h:(Lf8/h$e;Lf8/h$e;)V` @kind direct;
  #L30e1aa.  v6.`f8.h$e.p` @type ^`f8.h$e` := v3 @kind object;
  #L30e1ae.  goto L30e1c6;
  #L30e1b0.  if v0 == 0 then goto L30e1c0;
  #L30e1b4.  call `h`(v5, v6, v0) @signature `Lf8/h;.h:(Lf8/h$e;Lf8/h$e;)V` @kind direct;
  #L30e1ba.  v6.`f8.h$e.q` @type ^`f8.h$e` := v3 @kind object;
  #L30e1be.  goto L30e1c6;
  #L30e1c0.  call `h`(v5, v6, v3) @signature `Lf8/h;.h:(Lf8/h$e;Lf8/h$e;)V` @kind direct;
  #L30e1c6.  call `e`(v5, v1, v2) @signature `Lf8/h;.e:(Lf8/h$e;Z)V` @kind direct;
  #L30e1cc.  v6:= v5.`f8.h.q` @type ^`int`;
  #L30e1d0.  v6:= v6 + -1;
  #L30e1d4.  v5.`f8.h.q` @type ^`int` := v6;
  #L30e1d8.  v6:= v5.`f8.h.r` @type ^`int`;
  #L30e1dc.  v6:= v6 + 1;
  #L30e1e0.  v5.`f8.h.r` @type ^`int` := v6;
  #L30e1e4.  return @kind void;
}
procedure `f8.h$e` `g`(`f8.h` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf8/h;.g:(Ljava/lang/Object;)Lf8/h$e;` @AccessFlag  {
    temp;
    v0;

  #L30de3c.  call temp:= `d`(v1, v2) @signature `Lf8/h;.d:(Ljava/lang/Object;)Lf8/h$e;` @kind virtual;
  #L30de42.  v2:= temp @kind object;
  #L30de44.  if v2 == 0 then goto L30de50;
  #L30de48.  v0:= 1I;
  #L30de4a.  call `f`(v1, v2, v0) @signature `Lf8/h;.f:(Lf8/h$e;Z)V` @kind virtual;
  #L30de50.  return v2 @kind object;
}
procedure `java.lang.Object` `get`(`f8.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lf8/h;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L30de7c.  call temp:= `d`(v0, v1) @signature `Lf8/h;.d:(Ljava/lang/Object;)Lf8/h$e;` @kind virtual;
  #L30de82.  v1:= temp @kind object;
  #L30de84.  if v1 == 0 then goto L30de8e;
  #L30de88.  v1:= v1.`f8.h$e.u` @type ^`java.lang.Object` @kind object;
  #L30de8c.  goto L30de90;
  #L30de8e.  v1:= 0I;
  #L30de90.  return v1 @kind object;
}
procedure `java.util.Set` `keySet`(`f8.h` v1 @kind this) @signature `Lf8/h;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30df28.  v0:= v1.`f8.h.u` @type ^`f8.h$c` @kind object;
  #L30df2c.  if v0 == 0 then goto L30df32;
  #L30df30.  goto L30df40;
  #L30df32.  v0:= new `f8.h$c`;
  #L30df36.  call `<init>`(v0, v1) @signature `Lf8/h$c;.<init>:(Lf8/h;)V` @kind direct;
  #L30df3c.  v1.`f8.h.u` @type ^`f8.h$c` := v0 @kind object;
  #L30df40.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`f8.h` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lf8/h;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30dea4.  v0:= "key == null" @kind object;
  #L30dea8.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L30deae.  v0:= 1I;
  #L30deb0.  call temp:= `b`(v1, v2, v0) @signature `Lf8/h;.b:(Ljava/lang/Object;Z)Lf8/h$e;` @kind virtual;
  #L30deb6.  v2:= temp @kind object;
  #L30deb8.  v0:= v2.`f8.h$e.u` @type ^`java.lang.Object` @kind object;
  #L30debc.  v2.`f8.h$e.u` @type ^`java.lang.Object` := v3 @kind object;
  #L30dec0.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`f8.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lf8/h;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L30ded4.  call temp:= `g`(v0, v1) @signature `Lf8/h;.g:(Ljava/lang/Object;)Lf8/h$e;` @kind virtual;
  #L30deda.  v1:= temp @kind object;
  #L30dedc.  if v1 == 0 then goto L30dee6;
  #L30dee0.  v1:= v1.`f8.h$e.u` @type ^`java.lang.Object` @kind object;
  #L30dee4.  goto L30dee8;
  #L30dee6.  v1:= 0I;
  #L30dee8.  return v1 @kind object;
}
procedure `int` `size`(`f8.h` v1 @kind this) @signature `Lf8/h;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30de64.  v0:= v1.`f8.h.q` @type ^`int`;
  #L30de68.  return v0;
}
