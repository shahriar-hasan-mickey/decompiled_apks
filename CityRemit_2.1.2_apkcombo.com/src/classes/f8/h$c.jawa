record `f8.h$c` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `f8.h` `f8.h$c.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`f8.h$c` v0 @kind this, `f8.h` v1 @kind object) @signature `Lf8/h$c;.<init>:(Lf8/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30d934.  v0.`f8.h$c.o` @type ^`f8.h` := v1 @kind object;
  #L30d938.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L30d93e.  return @kind void;
}
procedure `void` `clear`(`f8.h$c` v1 @kind this) @signature `Lf8/h$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d950.  v0:= v1.`f8.h$c.o` @type ^`f8.h` @kind object;
  #L30d954.  call `clear`(v0) @signature `Lf8/h;.clear:()V` @kind virtual;
  #L30d95a.  return @kind void;
}
procedure `boolean` `contains`(`f8.h$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf8/h$c;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d8b4.  v0:= v1.`f8.h$c.o` @type ^`f8.h` @kind object;
  #L30d8b8.  call temp:= `containsKey`(v0, v2) @signature `Lf8/h;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L30d8be.  v2:= temp;
  #L30d8c0.  return v2;
}
procedure `java.util.Iterator` `iterator`(`f8.h$c` v1 @kind this) @signature `Lf8/h$c;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d918.  v0:= new `f8.h$c$a`;
  #L30d91c.  call `<init>`(v0, v1) @signature `Lf8/h$c$a;.<init>:(Lf8/h$c;)V` @kind direct;
  #L30d922.  return v0 @kind object;
}
procedure `boolean` `remove`(`f8.h$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf8/h$c;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d8d4.  v0:= v1.`f8.h$c.o` @type ^`f8.h` @kind object;
  #L30d8d8.  call temp:= `g`(v0, v2) @signature `Lf8/h;.g:(Ljava/lang/Object;)Lf8/h$e;` @kind virtual;
  #L30d8de.  v2:= temp @kind object;
  #L30d8e0.  if v2 == 0 then goto L30d8e8;
  #L30d8e4.  v2:= 1I;
  #L30d8e6.  goto L30d8ea;
  #L30d8e8.  v2:= 0I;
  #L30d8ea.  return v2;
}
procedure `int` `size`(`f8.h$c` v1 @kind this) @signature `Lf8/h$c;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d8fc.  v0:= v1.`f8.h$c.o` @type ^`f8.h` @kind object;
  #L30d900.  v0:= v0.`f8.h.q` @type ^`int`;
  #L30d904.  return v0;
}
