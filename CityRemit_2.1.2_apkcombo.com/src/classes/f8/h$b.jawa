record `f8.h$b` @kind class @AccessFlag  extends `java.util.AbstractSet` @kind class {
  `f8.h` `f8.h$b.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`f8.h$b` v0 @kind this, `f8.h` v1 @kind object) @signature `Lf8/h$b;.<init>:(Lf8/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30d840.  v0.`f8.h$b.o` @type ^`f8.h` := v1 @kind object;
  #L30d844.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L30d84a.  return @kind void;
}
procedure `void` `clear`(`f8.h$b` v1 @kind this) @signature `Lf8/h$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d85c.  v0:= v1.`f8.h$b.o` @type ^`f8.h` @kind object;
  #L30d860.  call `clear`(v0) @signature `Lf8/h;.clear:()V` @kind virtual;
  #L30d866.  return @kind void;
}
procedure `boolean` `contains`(`f8.h$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf8/h$b;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d794.  v0:= instanceof @variable v2 @type ^`java.util.Map$Entry` @kind boolean;
  #L30d798.  if v0 == 0 then goto L30d7b4;
  #L30d79c.  v0:= v1.`f8.h$b.o` @type ^`f8.h` @kind object;
  #L30d7a0.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L30d7a4.  call temp:= `c`(v0, v2) @signature `Lf8/h;.c:(Ljava/util/Map$Entry;)Lf8/h$e;` @kind virtual;
  #L30d7aa.  v2:= temp @kind object;
  #L30d7ac.  if v2 == 0 then goto L30d7b4;
  #L30d7b0.  v2:= 1I;
  #L30d7b2.  goto L30d7b6;
  #L30d7b4.  v2:= 0I;
  #L30d7b6.  return v2;
}
procedure `java.util.Iterator` `iterator`(`f8.h$b` v1 @kind this) @signature `Lf8/h$b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d824.  v0:= new `f8.h$b$a`;
  #L30d828.  call `<init>`(v0, v1) @signature `Lf8/h$b$a;.<init>:(Lf8/h$b;)V` @kind direct;
  #L30d82e.  return v0 @kind object;
}
procedure `boolean` `remove`(`f8.h$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lf8/h$b;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30d7c8.  v0:= instanceof @variable v3 @type ^`java.util.Map$Entry` @kind boolean;
  #L30d7cc.  v1:= 0I;
  #L30d7ce.  if v0 != 0 then goto L30d7d4;
  #L30d7d2.  return v1;
  #L30d7d4.  v0:= v2.`f8.h$b.o` @type ^`f8.h` @kind object;
  #L30d7d8.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L30d7dc.  call temp:= `c`(v0, v3) @signature `Lf8/h;.c:(Ljava/util/Map$Entry;)Lf8/h$e;` @kind virtual;
  #L30d7e2.  v3:= temp @kind object;
  #L30d7e4.  if v3 != 0 then goto L30d7ea;
  #L30d7e8.  return v1;
  #L30d7ea.  v0:= v2.`f8.h$b.o` @type ^`f8.h` @kind object;
  #L30d7ee.  v1:= 1I;
  #L30d7f0.  call `f`(v0, v3, v1) @signature `Lf8/h;.f:(Lf8/h$e;Z)V` @kind virtual;
  #L30d7f6.  return v1;
}
procedure `int` `size`(`f8.h$b` v1 @kind this) @signature `Lf8/h$b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d808.  v0:= v1.`f8.h$b.o` @type ^`f8.h` @kind object;
  #L30d80c.  v0:= v0.`f8.h.q` @type ^`int`;
  #L30d810.  return v0;
}
