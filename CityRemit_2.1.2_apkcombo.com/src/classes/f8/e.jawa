record `f8.e` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int` `@@f8.e.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf8/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L30d528.  call temp:= `a`() @signature `Lf8/e;.a:()I` @kind static;
  #L30d52e.  v0:= temp;
  #L30d530.  `@@f8.e.a` @type ^`int` := v0;
  #L30d534.  return @kind void;
}
procedure `int` `a`() @signature `Lf8/e;.a:()I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L30d3ec.  v0:= "java.version" @kind object;
  #L30d3f0.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L30d3f6.  v0:= temp @kind object;
  #L30d3f8.  call temp:= `d`(v0) @signature `Lf8/e;.d:(Ljava/lang/String;)I` @kind static;
  #L30d3fe.  v0:= temp;
  #L30d400.  return v0;
}
procedure `int` `b`(`java.lang.String` v4 @kind object) @signature `Lf8/e;.b:(Ljava/lang/String;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30d414.  v0:= new `java.lang.StringBuilder`;
  #L30d418.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30d41e.  v1:= 0I;
  #L30d420.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L30d426.  v2:= temp;
  #L30d428.  if v1 >= v2 then goto L30d44c;
  #L30d42c.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L30d432.  v2:= temp;
  #L30d434.  call temp:= `isDigit`(v2) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L30d43a.  v3:= temp;
  #L30d43c.  if v3 == 0 then goto L30d44c;
  #L30d440.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L30d446.  v1:= v1 + 1;
  #L30d44a.  goto L30d420;
  #L30d44c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30d452.  v4:= temp @kind object;
  #L30d454.  call temp:= `parseInt`(v4) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L30d45a.  v4:= temp;
  #L30d45c.  return v4;
  #L30d45e.  v4:= -1I;
  #L30d460.  return v4;
  catch `java.lang.NumberFormatException` @[L30d414..L30d45c] goto L30d45e;
}
procedure `int` `c`() @signature `Lf8/e;.c:()I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30d484.  v0:= `@@f8.e.a` @type ^`int`;
  #L30d488.  return v0;
}
procedure `int` `d`(`java.lang.String` v2 @kind object) @signature `Lf8/e;.d:(Ljava/lang/String;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L30d49c.  call temp:= `f`(v2) @signature `Lf8/e;.f:(Ljava/lang/String;)I` @kind static;
  #L30d4a2.  v0:= temp;
  #L30d4a4.  v1:= -1I;
  #L30d4a6.  if v0 != v1 then goto L30d4b2;
  #L30d4aa.  call temp:= `b`(v2) @signature `Lf8/e;.b:(Ljava/lang/String;)I` @kind static;
  #L30d4b0.  v0:= temp;
  #L30d4b2.  if v0 != v1 then goto L30d4ba;
  #L30d4b6.  v2:= 6I;
  #L30d4b8.  return v2;
  #L30d4ba.  return v0;
}
procedure `boolean` `e`() @signature `Lf8/e;.e:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L30d3c8.  v0:= `@@f8.e.a` @type ^`int`;
  #L30d3cc.  v1:= 9I;
  #L30d3d0.  if v0 < v1 then goto L30d3d8;
  #L30d3d4.  v0:= 1I;
  #L30d3d6.  goto L30d3da;
  #L30d3d8.  v0:= 0I;
  #L30d3da.  return v0;
}
procedure `int` `f`(`java.lang.String` v3 @kind object) @signature `Lf8/e;.f:(Ljava/lang/String;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L30d4cc.  v0:= "[._]" @kind object;
  #L30d4d0.  call temp:= `split`(v3, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L30d4d6.  v3:= temp @kind object;
  #L30d4d8.  v0:= 0I;
  #L30d4da.  v0:= v3[v0] @kind object;
  #L30d4de.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L30d4e4.  v0:= temp;
  #L30d4e6.  v1:= 1I;
  #L30d4e8.  if v0 != v1 then goto L30d500;
  #L30d4ec.  v2:= length @variable v3;
  #L30d4ee.  if v2 <= v1 then goto L30d500;
  #L30d4f2.  v3:= v3[v1] @kind object;
  #L30d4f6.  call temp:= `parseInt`(v3) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L30d4fc.  v3:= temp;
  #L30d4fe.  return v3;
  #L30d500.  return v0;
  #L30d502.  v3:= -1I;
  #L30d504.  return v3;
  catch `java.lang.NumberFormatException` @[L30d4cc..L30d4fe] goto L30d502;
}
