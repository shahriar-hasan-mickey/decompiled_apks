record `f8.m$d` @kind class @AccessFlag  extends `f8.m` @kind class {
}
procedure `void` `<init>`(`f8.m$d` v0 @kind this) @signature `Lf8/m$d;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30e7d8.  call `<init>`(v0) @signature `Lf8/m;.<init>:()V` @kind direct;
  #L30e7de.  return @kind void;
}
procedure `java.lang.Object` `c`(`f8.m$d` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lf8/m$d;.c:(Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30e798.  v0:= new `java.lang.UnsupportedOperationException`;
  #L30e79c.  v1:= new `java.lang.StringBuilder`;
  #L30e7a0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30e7a6.  v2:= "Cannot allocate " @kind object;
  #L30e7aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e7b0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e7b6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30e7bc.  v4:= temp @kind object;
  #L30e7be.  call `<init>`(v0, v4) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30e7c4.  throw v0;
}
