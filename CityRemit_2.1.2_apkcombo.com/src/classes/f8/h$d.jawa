record `f8.h$d` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface {
  `f8.h$e` `f8.h$d.o` @AccessFlag ;
  `f8.h$e` `f8.h$d.p` @AccessFlag ;
  `int` `f8.h$d.q` @AccessFlag ;
  `f8.h` `f8.h$d.r` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`f8.h$d` v1 @kind this, `f8.h` v2 @kind object) @signature `Lf8/h$d;.<init>:(Lf8/h;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L30d9e8.  v1.`f8.h$d.r` @type ^`f8.h` := v2 @kind object;
  #L30d9ec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30d9f2.  v0:= v2.`f8.h.s` @type ^`f8.h$e` @kind object;
  #L30d9f6.  v0:= v0.`f8.h$e.r` @type ^`f8.h$e` @kind object;
  #L30d9fa.  v1.`f8.h$d.o` @type ^`f8.h$e` := v0 @kind object;
  #L30d9fe.  v0:= 0I;
  #L30da00.  v1.`f8.h$d.p` @type ^`f8.h$e` := v0 @kind object;
  #L30da04.  v2:= v2.`f8.h.r` @type ^`int`;
  #L30da08.  v1.`f8.h$d.q` @type ^`int` := v2;
  #L30da0c.  return @kind void;
}
procedure `f8.h$e` `a`(`f8.h$d` v3 @kind this) @signature `Lf8/h$d;.a:()Lf8/h$e;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30d994.  v0:= v3.`f8.h$d.o` @type ^`f8.h$e` @kind object;
  #L30d998.  v1:= v3.`f8.h$d.r` @type ^`f8.h` @kind object;
  #L30d99c.  v2:= v1.`f8.h.s` @type ^`f8.h$e` @kind object;
  #L30d9a0.  if v0 == v2 then goto L30d9ca;
  #L30d9a4.  v1:= v1.`f8.h.r` @type ^`int`;
  #L30d9a8.  v2:= v3.`f8.h$d.q` @type ^`int`;
  #L30d9ac.  if v1 != v2 then goto L30d9be;
  #L30d9b0.  v1:= v0.`f8.h$e.r` @type ^`f8.h$e` @kind object;
  #L30d9b4.  v3.`f8.h$d.o` @type ^`f8.h$e` := v1 @kind object;
  #L30d9b8.  v3.`f8.h$d.p` @type ^`f8.h$e` := v0 @kind object;
  #L30d9bc.  return v0 @kind object;
  #L30d9be.  v0:= new `java.util.ConcurrentModificationException`;
  #L30d9c2.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L30d9c8.  throw v0;
  #L30d9ca.  v0:= new `java.util.NoSuchElementException`;
  #L30d9ce.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L30d9d4.  throw v0;
}
procedure `boolean` `hasNext`(`f8.h$d` v2 @kind this) @signature `Lf8/h$d;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L30d96c.  v0:= v2.`f8.h$d.o` @type ^`f8.h$e` @kind object;
  #L30d970.  v1:= v2.`f8.h$d.r` @type ^`f8.h` @kind object;
  #L30d974.  v1:= v1.`f8.h.s` @type ^`f8.h$e` @kind object;
  #L30d978.  if v0 == v1 then goto L30d980;
  #L30d97c.  v0:= 1I;
  #L30d97e.  goto L30d982;
  #L30d980.  v0:= 0I;
  #L30d982.  return v0;
}
procedure `void` `remove`(`f8.h$d` v3 @kind this) @signature `Lf8/h$d;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30da20.  v0:= v3.`f8.h$d.p` @type ^`f8.h$e` @kind object;
  #L30da24.  if v0 == 0 then goto L30da48;
  #L30da28.  v1:= v3.`f8.h$d.r` @type ^`f8.h` @kind object;
  #L30da2c.  v2:= 1I;
  #L30da2e.  call `f`(v1, v0, v2) @signature `Lf8/h;.f:(Lf8/h$e;Z)V` @kind virtual;
  #L30da34.  v0:= 0I;
  #L30da36.  v3.`f8.h$d.p` @type ^`f8.h$e` := v0 @kind object;
  #L30da3a.  v0:= v3.`f8.h$d.r` @type ^`f8.h` @kind object;
  #L30da3e.  v0:= v0.`f8.h.r` @type ^`int`;
  #L30da42.  v3.`f8.h$d.q` @type ^`int` := v0;
  #L30da46.  return @kind void;
  #L30da48.  v0:= new `java.lang.IllegalStateException`;
  #L30da4c.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L30da52.  throw v0;
}
