record `uc.p` @kind class @AccessFlag PUBLIC_FINAL extends `xc.c` @kind class, `yc.d` @kind interface, `yc.f` @kind interface, `java.lang.Comparable` @kind interface, `java.io.Serializable` @kind interface {
  `int` `uc.p.o` @AccessFlag PRIVATE_FINAL;
  `int` `uc.p.p` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Luc/p;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L485480.  v0:= new `uc.p$a`;
  #L485484.  call `<init>`(v0) @signature `Luc/p$a;.<init>:()V` @kind direct;
  #L48548a.  v0:= new `wc.c`;
  #L48548e.  call `<init>`(v0) @signature `Lwc/c;.<init>:()V` @kind direct;
  #L485494.  v1:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L485498.  v2:= `@@wc.j.s` @type ^`wc.j` @kind object;
  #L48549c.  v3:= 4I;
  #L48549e.  v4:= 10I;
  #L4854a2.  call temp:= `l`(v0, v1, v3, v4, v2) @signature `Lwc/c;.l:(Lyc/i;IILwc/j;)Lwc/c;` @kind virtual;
  #L4854a8.  v0:= temp @kind object;
  #L4854aa.  v1:= 45I;
  #L4854ae.  call temp:= `e`(v0, v1) @signature `Lwc/c;.e:(C)Lwc/c;` @kind virtual;
  #L4854b4.  v0:= temp @kind object;
  #L4854b6.  v1:= `@@yc.a.P` @type ^`yc.a` @kind object;
  #L4854ba.  v2:= 2I;
  #L4854bc.  call temp:= `k`(v0, v1, v2) @signature `Lwc/c;.k:(Lyc/i;I)Lwc/c;` @kind virtual;
  #L4854c2.  v0:= temp @kind object;
  #L4854c4.  call temp:= `s`(v0) @signature `Lwc/c;.s:()Lwc/b;` @kind virtual;
  #L4854ca.  return @kind void;
}
procedure `void` `<init>`(`uc.p` v0 @kind this, `int` v1 , `int` v2 ) @signature `Luc/p;.<init>:(II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4854dc.  call `<init>`(v0) @signature `Lxc/c;.<init>:()V` @kind direct;
  #L4854e2.  v0.`uc.p.o` @type ^`int` := v1;
  #L4854e6.  v0.`uc.p.p` @type ^`int` := v2;
  #L4854ea.  return @kind void;
}
procedure `uc.p` `V`(`yc.e` v3 @kind object) @signature `Luc/p;.V:(Lyc/e;)Luc/p;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L484fc0.  v0:= instanceof @variable v3 @type ^`uc.p` @kind boolean;
  #L484fc4.  if v0 == 0 then goto L484fce;
  #L484fc8.  v3:= (`uc.p`) v3 @kind object;
  #L484fcc.  return v3 @kind object;
  #L484fce.  v0:= `@@vc.m.q` @type ^`vc.m` @kind object;
  #L484fd2.  call temp:= `k`(v3) @signature `Lvc/h;.k:(Lyc/e;)Lvc/h;` @kind static;
  #L484fd8.  v1:= temp @kind object;
  #L484fda.  call temp:= `equals`(v0, v1) @signature `Lvc/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L484fe0.  v0:= temp;
  #L484fe2.  if v0 != 0 then goto L484fee;
  #L484fe6.  call temp:= `m0`(v3) @signature `Luc/f;.m0:(Lyc/e;)Luc/f;` @kind static;
  #L484fec.  v3:= temp @kind object;
  #L484fee.  v0:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L484ff2.  call temp:= `F`(v3, v0) @signature `Lyc/e;.F:(Lyc/i;)I` @kind interface;
  #L484ff8.  v0:= temp;
  #L484ffa.  v1:= `@@yc.a.P` @type ^`yc.a` @kind object;
  #L484ffe.  call temp:= `F`(v3, v1) @signature `Lyc/e;.F:(Lyc/i;)I` @kind interface;
  #L485004.  v1:= temp;
  #L485006.  call temp:= `c0`(v0, v1) @signature `Luc/p;.c0:(II)Luc/p;` @kind static;
  #L48500c.  v3:= temp @kind object;
  #L48500e.  return v3 @kind object;
  #L485010.  v0:= new `uc.b`;
  #L485014.  v1:= new `java.lang.StringBuilder`;
  #L485018.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48501e.  v2:= "Unable to obtain YearMonth from TemporalAccessor: " @kind object;
  #L485022.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485028.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48502e.  v2:= ", type " @kind object;
  #L485032.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485038.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L48503e.  v3:= temp @kind object;
  #L485040.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L485046.  v3:= temp @kind object;
  #L485048.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48504e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L485054.  v3:= temp @kind object;
  #L485056.  call `<init>`(v0, v3) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48505c.  throw v0;
  catch `uc.b` @[L484fce..L48500e] goto L485010;
}
procedure `long` `X`(`uc.p` v4 @kind this) @signature `Luc/p;.X:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L484f94.  v0:= v4.`uc.p.o` @type ^`int`;
  #L484f98.  v0:= (`long`) v0 @kind i2l;
  #L484f9a.  v2:= 12L;
  #L484f9e.  v0:= v0 * v2 @kind long;
  #L484fa2.  v2:= v4.`uc.p.p` @type ^`int`;
  #L484fa6.  v2:= v2 + -1;
  #L484faa.  v2:= (`long`) v2 @kind i2l;
  #L484fac.  v0:= v0 + v2 @kind long;
  #L484fae.  return v0 @kind wide;
}
procedure `uc.p` `c0`(`int` v3 , `int` v4 ) @signature `Luc/p;.c0:(II)Luc/p;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4850c8.  v0:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L4850cc.  v1:= (`long`) v3 @kind i2l;
  #L4850ce.  call temp:= `s`(v0, v1) @signature `Lyc/a;.s:(J)J` @kind virtual;
  #L4850d4.  v0:= `@@yc.a.P` @type ^`yc.a` @kind object;
  #L4850d8.  v1:= (`long`) v4 @kind i2l;
  #L4850da.  call temp:= `s`(v0, v1) @signature `Lyc/a;.s:(J)J` @kind virtual;
  #L4850e0.  v0:= new `uc.p`;
  #L4850e4.  call `<init>`(v0, v3, v4) @signature `Luc/p;.<init>:(II)V` @kind direct;
  #L4850ea.  return v0 @kind object;
}
procedure `uc.p` `g0`(`java.io.DataInput` v1 @kind object) @signature `Luc/p;.g0:(Ljava/io/DataInput;)Luc/p;` @AccessFlag STATIC {
    temp;
    v0;

  #L4852a8.  call temp:= `readInt`(v1) @signature `Ljava/io/DataInput;.readInt:()I` @kind interface;
  #L4852ae.  v0:= temp;
  #L4852b0.  call temp:= `readByte`(v1) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L4852b6.  v1:= temp;
  #L4852b8.  call temp:= `c0`(v0, v1) @signature `Luc/p;.c0:(II)Luc/p;` @kind static;
  #L4852be.  v1:= temp @kind object;
  #L4852c0.  return v1 @kind object;
}
procedure `uc.p` `h0`(`uc.p` v1 @kind this, `int` v2 , `int` v3 ) @signature `Luc/p;.h0:(II)Luc/p;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4852d4.  v0:= v1.`uc.p.o` @type ^`int`;
  #L4852d8.  if v0 != v2 then goto L4852e6;
  #L4852dc.  v0:= v1.`uc.p.p` @type ^`int`;
  #L4852e0.  if v0 != v3 then goto L4852e6;
  #L4852e4.  return v1 @kind object;
  #L4852e6.  v0:= new `uc.p`;
  #L4852ea.  call `<init>`(v0, v2, v3) @signature `Luc/p;.<init>:(II)V` @kind direct;
  #L4852f0.  return v0 @kind object;
}
procedure `java.lang.Object` `readResolve`(`uc.p` v2 @kind this) @signature `Luc/p;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L484e00.  v0:= new `java.io.InvalidObjectException`;
  #L484e04.  v1:= "Deserialization via serialization delegate" @kind object;
  #L484e08.  call `<init>`(v0, v1) @signature `Ljava/io/InvalidObjectException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L484e0e.  throw v0;
}
procedure `java.lang.Object` `writeReplace`(`uc.p` v2 @kind this) @signature `Luc/p;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L484e20.  v0:= new `uc.n`;
  #L484e24.  v1:= 68I;
  #L484e28.  call `<init>`(v0, v1, v2) @signature `Luc/n;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L484e2e.  return v0 @kind object;
}
procedure `long` `B`(`uc.p` v3 @kind this, `yc.i` v4 @kind object) @signature `Luc/p;.B:(Lyc/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L484ed8.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L484edc.  if v0 == 0 then goto L484f78;
  #L484ee0.  v0:= `@@uc.p$b.a` @type ^`int`[] @kind object;
  #L484ee4.  v1:= v4 @kind object;
  #L484ee6.  v1:= (`yc.a`) v1 @kind object;
  #L484eea.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L484ef0.  v1:= temp;
  #L484ef2.  v0:= v0[v1];
  #L484ef6.  v1:= 1I;
  #L484ef8.  if v0 == v1 then goto L484f72;
  #L484efc.  v2:= 2I;
  #L484efe.  if v0 == v2 then goto L484f68;
  #L484f02.  v2:= 3I;
  #L484f04.  if v0 == v2 then goto L484f58;
  #L484f08.  v2:= 4I;
  #L484f0a.  if v0 == v2 then goto L484f50;
  #L484f0e.  v2:= 5I;
  #L484f10.  if v0 != v2 then goto L484f22;
  #L484f14.  v4:= v3.`uc.p.o` @type ^`int`;
  #L484f18.  if v4 >= v1 then goto L484f1e;
  #L484f1c.  v1:= 0I;
  #L484f1e.  v0:= (`long`) v1 @kind i2l;
  #L484f20.  return v0 @kind wide;
  #L484f22.  v0:= new `yc.m`;
  #L484f26.  v1:= new `java.lang.StringBuilder`;
  #L484f2a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L484f30.  v2:= "Unsupported field: " @kind object;
  #L484f34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L484f3a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L484f40.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L484f46.  v4:= temp @kind object;
  #L484f48.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L484f4e.  throw v0;
  #L484f50.  v4:= v3.`uc.p.o` @type ^`int`;
  #L484f54.  v0:= (`long`) v4 @kind i2l;
  #L484f56.  return v0 @kind wide;
  #L484f58.  v4:= v3.`uc.p.o` @type ^`int`;
  #L484f5c.  if v4 >= v1 then goto L484f64;
  #L484f60.  v4:= v4 - 1;
  #L484f64.  v0:= (`long`) v4 @kind i2l;
  #L484f66.  return v0 @kind wide;
  #L484f68.  call temp:= `X`(v3) @signature `Luc/p;.X:()J` @kind direct;
  #L484f6e.  v0:= temp @kind wide;
  #L484f70.  return v0 @kind wide;
  #L484f72.  v4:= v3.`uc.p.p` @type ^`int`;
  #L484f76.  goto L484f54;
  #L484f78.  call temp:= `o`(v4, v3) @signature `Lyc/i;.o:(Lyc/e;)J` @kind interface;
  #L484f7e.  v0:= temp @kind wide;
  #L484f80.  return v0 @kind wide;
}
procedure `yc.d` `D`(`uc.p` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Luc/p;.D:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L485590.  call temp:= `d0`(v0, v1, v3) @signature `Luc/p;.d0:(JLyc/l;)Luc/p;` @kind virtual;
  #L485596.  v1:= temp @kind object;
  #L485598.  return v1 @kind object;
}
procedure `int` `F`(`uc.p` v3 @kind this, `yc.i` v4 @kind object) @signature `Luc/p;.F:(Lyc/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L484d1c.  call temp:= `t`(v3, v4) @signature `Luc/p;.t:(Lyc/i;)Lyc/n;` @kind virtual;
  #L484d22.  v0:= temp @kind object;
  #L484d24.  call temp:= `B`(v3, v4) @signature `Luc/p;.B:(Lyc/i;)J` @kind virtual;
  #L484d2a.  v1:= temp @kind wide;
  #L484d2c.  call temp:= `a`(v0, v1, v4) @signature `Lyc/n;.a:(JLyc/i;)I` @kind virtual;
  #L484d32.  v4:= temp;
  #L484d34.  return v4;
}
procedure `yc.d` `I`(`uc.p` v3 @kind this, `yc.d` v4 @kind object) @signature `Luc/p;.I:(Lyc/d;)Lyc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485524.  call temp:= `k`(v4) @signature `Lvc/h;.k:(Lyc/e;)Lvc/h;` @kind static;
  #L48552a.  v0:= temp @kind object;
  #L48552c.  v1:= `@@vc.m.q` @type ^`vc.m` @kind object;
  #L485530.  call temp:= `equals`(v0, v1) @signature `Lvc/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L485536.  v0:= temp;
  #L485538.  if v0 == 0 then goto L485552;
  #L48553c.  v0:= `@@yc.a.Q` @type ^`yc.a` @kind object;
  #L485540.  call temp:= `X`(v3) @signature `Luc/p;.X:()J` @kind direct;
  #L485546.  v1:= temp @kind wide;
  #L485548.  call temp:= `P`(v4, v0, v1) @signature `Lyc/d;.P:(Lyc/i;J)Lyc/d;` @kind interface;
  #L48554e.  v4:= temp @kind object;
  #L485550.  return v4 @kind object;
  #L485552.  v4:= new `uc.b`;
  #L485556.  v0:= "Adjustment only supported on ISO date-time" @kind object;
  #L48555a.  call `<init>`(v4, v0) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L485560.  throw v4;
}
procedure `yc.d` `L`(`uc.p` v0 @kind this, `yc.f` v1 @kind object) @signature `Luc/p;.L:(Lyc/f;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4855ac.  call temp:= `i0`(v0, v1) @signature `Luc/p;.i0:(Lyc/f;)Luc/p;` @kind virtual;
  #L4855b2.  v1:= temp @kind object;
  #L4855b4.  return v1 @kind object;
}
procedure `yc.d` `P`(`uc.p` v0 @kind this, `yc.i` v1 @kind object, `long` v2 ) @signature `Luc/p;.P:(Lyc/i;J)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4855c8.  call temp:= `j0`(v0, v1, v2) @signature `Luc/p;.j0:(Lyc/i;J)Luc/p;` @kind virtual;
  #L4855ce.  v1:= temp @kind object;
  #L4855d0.  return v1 @kind object;
}
procedure `int` `T`(`uc.p` v2 @kind this, `uc.p` v3 @kind object) @signature `Luc/p;.T:(Luc/p;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L484cf0.  v0:= v2.`uc.p.o` @type ^`int`;
  #L484cf4.  v1:= v3.`uc.p.o` @type ^`int`;
  #L484cf8.  v0:= v0 - v1 @kind int;
  #L484cfa.  if v0 != 0 then goto L484d08;
  #L484cfe.  v0:= v2.`uc.p.p` @type ^`int`;
  #L484d02.  v3:= v3.`uc.p.p` @type ^`int`;
  #L484d06.  v0:= v0 - v3 @kind int;
  #L484d08.  return v0;
}
procedure `int` `a0`(`uc.p` v1 @kind this) @signature `Luc/p;.a0:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L484d48.  v0:= v1.`uc.p.o` @type ^`int`;
  #L484d4c.  return v0;
}
procedure `uc.p` `b0`(`uc.p` v3 @kind this, `long` v4 , `yc.l` v6 @kind object) @signature `Luc/p;.b0:(JLyc/l;)Luc/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485080.  v0:= -9223372036854775808L;
  #L485084.  v2:= lcmp(v4, v0);
  #L485088.  if v2 != 0 then goto L4850ac;
  #L48508c.  v4:= 9223372036854775807L;
  #L485096.  call temp:= `d0`(v3, v4, v6) @signature `Luc/p;.d0:(JLyc/l;)Luc/p;` @kind virtual;
  #L48509c.  v4:= temp @kind object;
  #L48509e.  v0:= 1L;
  #L4850a2.  call temp:= `d0`(v4, v0, v6) @signature `Luc/p;.d0:(JLyc/l;)Luc/p;` @kind virtual;
  #L4850a8.  v4:= temp @kind object;
  #L4850aa.  goto L4850b6;
  #L4850ac.  v4:= -v4 @kind long;
  #L4850ae.  call temp:= `d0`(v3, v4, v6) @signature `Luc/p;.d0:(JLyc/l;)Luc/p;` @kind virtual;
  #L4850b4.  v4:= temp @kind object;
  #L4850b6.  return v4 @kind object;
}
procedure `int` `compareTo`(`uc.p` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Luc/p;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L484cd0.  v1:= (`uc.p`) v1 @kind object;
  #L484cd4.  call temp:= `T`(v0, v1) @signature `Luc/p;.T:(Luc/p;)I` @kind virtual;
  #L484cda.  v1:= temp;
  #L484cdc.  return v1;
}
procedure `boolean` `d`(`uc.p` v3 @kind this, `yc.i` v4 @kind object) @signature `Luc/p;.d:(Lyc/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L484c70.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L484c74.  v1:= 1I;
  #L484c76.  v2:= 0I;
  #L484c78.  if v0 == 0 then goto L484caa;
  #L484c7c.  v0:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L484c80.  if v4 == v0 then goto L484ca8;
  #L484c84.  v0:= `@@yc.a.P` @type ^`yc.a` @kind object;
  #L484c88.  if v4 == v0 then goto L484ca8;
  #L484c8c.  v0:= `@@yc.a.Q` @type ^`yc.a` @kind object;
  #L484c90.  if v4 == v0 then goto L484ca8;
  #L484c94.  v0:= `@@yc.a.R` @type ^`yc.a` @kind object;
  #L484c98.  if v4 == v0 then goto L484ca8;
  #L484c9c.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L484ca0.  if v4 != v0 then goto L484ca6;
  #L484ca4.  goto L484ca8;
  #L484ca6.  v1:= 0I;
  #L484ca8.  return v1;
  #L484caa.  if v4 == 0 then goto L484cbc;
  #L484cae.  call temp:= `j`(v4, v3) @signature `Lyc/i;.j:(Lyc/e;)Z` @kind interface;
  #L484cb4.  v4:= temp;
  #L484cb6.  if v4 == 0 then goto L484cbc;
  #L484cba.  goto L484cbe;
  #L484cbc.  v1:= 0I;
  #L484cbe.  return v1;
}
procedure `uc.p` `d0`(`uc.p` v2 @kind this, `long` v3 , `yc.l` v5 @kind object) @signature `Luc/p;.d0:(JLyc/l;)Luc/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4850fc.  v0:= instanceof @variable v5 @type ^`yc.b` @kind boolean;
  #L485100.  if v0 == 0 then goto L4851c2;
  #L485104.  v0:= `@@uc.p$b.b` @type ^`int`[] @kind object;
  #L485108.  v1:= v5 @kind object;
  #L48510a.  v1:= (`yc.b`) v1 @kind object;
  #L48510e.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L485114.  v1:= temp;
  #L485116.  v0:= v0[v1];
  #L48511a.  goto L4851d0;
  #L485120.  v3:= new `yc.m`;
  #L485124.  v4:= new `java.lang.StringBuilder`;
  #L485128.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48512e.  v0:= "Unsupported unit: " @kind object;
  #L485132.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485138.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48513e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L485144.  v4:= temp @kind object;
  #L485146.  call `<init>`(v3, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48514c.  throw v3;
  #L48514e.  v5:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L485152.  call temp:= `B`(v2, v5) @signature `Luc/p;.B:(Lyc/i;)J` @kind virtual;
  #L485158.  v0:= temp @kind wide;
  #L48515a.  call temp:= `k`(v0, v3) @signature `Lxc/d;.k:(JJ)J` @kind static;
  #L485160.  v3:= temp @kind wide;
  #L485162.  call temp:= `j0`(v2, v5, v3) @signature `Luc/p;.j0:(Lyc/i;J)Luc/p;` @kind virtual;
  #L485168.  v3:= temp @kind object;
  #L48516a.  return v3 @kind object;
  #L48516c.  v5:= 1000I;
  #L485170.  call temp:= `l`(v3, v5) @signature `Lxc/d;.l:(JI)J` @kind static;
  #L485176.  v3:= temp @kind wide;
  #L485178.  call temp:= `f0`(v2, v3) @signature `Luc/p;.f0:(J)Luc/p;` @kind virtual;
  #L48517e.  v3:= temp @kind object;
  #L485180.  return v3 @kind object;
  #L485182.  v5:= 100I;
  #L485186.  call temp:= `l`(v3, v5) @signature `Lxc/d;.l:(JI)J` @kind static;
  #L48518c.  v3:= temp @kind wide;
  #L48518e.  call temp:= `f0`(v2, v3) @signature `Luc/p;.f0:(J)Luc/p;` @kind virtual;
  #L485194.  v3:= temp @kind object;
  #L485196.  return v3 @kind object;
  #L485198.  v5:= 10I;
  #L48519c.  call temp:= `l`(v3, v5) @signature `Lxc/d;.l:(JI)J` @kind static;
  #L4851a2.  v3:= temp @kind wide;
  #L4851a4.  call temp:= `f0`(v2, v3) @signature `Luc/p;.f0:(J)Luc/p;` @kind virtual;
  #L4851aa.  v3:= temp @kind object;
  #L4851ac.  return v3 @kind object;
  #L4851ae.  call temp:= `f0`(v2, v3) @signature `Luc/p;.f0:(J)Luc/p;` @kind virtual;
  #L4851b4.  v3:= temp @kind object;
  #L4851b6.  return v3 @kind object;
  #L4851b8.  call temp:= `e0`(v2, v3) @signature `Luc/p;.e0:(J)Luc/p;` @kind virtual;
  #L4851be.  v3:= temp @kind object;
  #L4851c0.  return v3 @kind object;
  #L4851c2.  call temp:= `d`(v5, v2, v3) @signature `Lyc/l;.d:(Lyc/d;J)Lyc/d;` @kind interface;
  #L4851c8.  v3:= temp @kind object;
  #L4851ca.  v3:= (`uc.p`) v3 @kind object;
  #L4851ce.  return v3 @kind object;
  #L4851d0.  switch v0
                  | 1 => goto L4851b8
                  | 2 => goto L4851ae
                  | 3 => goto L485198
                  | 4 => goto L485182
                  | 5 => goto L48516c
                  | 6 => goto L48514e
                  | else => goto L485120;
}
procedure `uc.p` `e0`(`uc.p` v6 @kind this, `long` v7 ) @signature `Luc/p;.e0:(J)Luc/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L485200.  v0:= 0L;
  #L485204.  v2:= lcmp(v7, v0);
  #L485208.  if v2 != 0 then goto L48520e;
  #L48520c.  return v6 @kind object;
  #L48520e.  v0:= v6.`uc.p.o` @type ^`int`;
  #L485212.  v0:= (`long`) v0 @kind i2l;
  #L485214.  v2:= 12L;
  #L485218.  v0:= v0 * v2 @kind long;
  #L48521c.  v4:= v6.`uc.p.p` @type ^`int`;
  #L485220.  v4:= v4 + -1;
  #L485224.  v4:= (`long`) v4 @kind i2l;
  #L485226.  v0:= v0 + v4 @kind long;
  #L485228.  v0:= v0 + v7 @kind long;
  #L48522a.  v7:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L48522e.  call temp:= `e`(v0, v2) @signature `Lxc/d;.e:(JJ)J` @kind static;
  #L485234.  v2:= temp @kind wide;
  #L485236.  call temp:= `r`(v7, v2) @signature `Lyc/a;.r:(J)I` @kind virtual;
  #L48523c.  v7:= temp;
  #L48523e.  v8:= 12I;
  #L485242.  call temp:= `g`(v0, v8) @signature `Lxc/d;.g:(JI)I` @kind static;
  #L485248.  v8:= temp;
  #L48524a.  v8:= v8 + 1;
  #L48524e.  call temp:= `h0`(v6, v7, v8) @signature `Luc/p;.h0:(II)Luc/p;` @kind direct;
  #L485254.  v7:= temp @kind object;
  #L485256.  return v7 @kind object;
}
procedure `boolean` `equals`(`uc.p` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Luc/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L484c28.  v0:= 1I;
  #L484c2a.  if v4 != v5 then goto L484c30;
  #L484c2e.  return v0;
  #L484c30.  v1:= instanceof @variable v5 @type ^`uc.p` @kind boolean;
  #L484c34.  v2:= 0I;
  #L484c36.  if v1 == 0 then goto L484c5c;
  #L484c3a.  v5:= (`uc.p`) v5 @kind object;
  #L484c3e.  v1:= v4.`uc.p.o` @type ^`int`;
  #L484c42.  v3:= v5.`uc.p.o` @type ^`int`;
  #L484c46.  if v1 != v3 then goto L484c58;
  #L484c4a.  v1:= v4.`uc.p.p` @type ^`int`;
  #L484c4e.  v5:= v5.`uc.p.p` @type ^`int`;
  #L484c52.  if v1 != v5 then goto L484c58;
  #L484c56.  goto L484c5a;
  #L484c58.  v0:= 0I;
  #L484c5a.  return v0;
  #L484c5c.  return v2;
}
procedure `uc.p` `f0`(`uc.p` v3 @kind this, `long` v4 ) @signature `Luc/p;.f0:(J)Luc/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485268.  v0:= 0L;
  #L48526c.  v2:= lcmp(v4, v0);
  #L485270.  if v2 != 0 then goto L485276;
  #L485274.  return v3 @kind object;
  #L485276.  v0:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L48527a.  v1:= v3.`uc.p.o` @type ^`int`;
  #L48527e.  v1:= (`long`) v1 @kind i2l;
  #L485280.  v1:= v1 + v4 @kind long;
  #L485282.  call temp:= `r`(v0, v1) @signature `Lyc/a;.r:(J)I` @kind virtual;
  #L485288.  v4:= temp;
  #L48528a.  v5:= v3.`uc.p.p` @type ^`int`;
  #L48528e.  call temp:= `h0`(v3, v4, v5) @signature `Luc/p;.h0:(II)Luc/p;` @kind direct;
  #L485294.  v4:= temp @kind object;
  #L485296.  return v4 @kind object;
}
procedure `int` `hashCode`(`uc.p` v2 @kind this) @signature `Luc/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L484d60.  v0:= v2.`uc.p.o` @type ^`int`;
  #L484d64.  v1:= v2.`uc.p.p` @type ^`int`;
  #L484d68.  v1:= v1 ^< 27;
  #L484d6c.  v0:= v0 ^~ v1 @kind int;
  #L484d6e.  return v0;
}
procedure `uc.p` `i0`(`uc.p` v0 @kind this, `yc.f` v1 @kind object) @signature `Luc/p;.i0:(Lyc/f;)Luc/p;` @AccessFlag PUBLIC {
    temp;

  #L485304.  call temp:= `I`(v1, v0) @signature `Lyc/f;.I:(Lyc/d;)Lyc/d;` @kind interface;
  #L48530a.  v1:= temp @kind object;
  #L48530c.  v1:= (`uc.p`) v1 @kind object;
  #L485310.  return v1 @kind object;
}
procedure `java.lang.Object` `j`(`uc.p` v1 @kind this, `yc.k` v2 @kind object) @signature `Luc/p;.j:(Lyc/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L484d80.  call temp:= `a`() @signature `Lyc/j;.a:()Lyc/k;` @kind static;
  #L484d86.  v0:= temp @kind object;
  #L484d88.  if v2 != v0 then goto L484d92;
  #L484d8c.  v2:= `@@vc.m.q` @type ^`vc.m` @kind object;
  #L484d90.  return v2 @kind object;
  #L484d92.  call temp:= `e`() @signature `Lyc/j;.e:()Lyc/k;` @kind static;
  #L484d98.  v0:= temp @kind object;
  #L484d9a.  if v2 != v0 then goto L484da4;
  #L484d9e.  v2:= `@@yc.b.y` @type ^`yc.b` @kind object;
  #L484da2.  return v2 @kind object;
  #L484da4.  call temp:= `b`() @signature `Lyc/j;.b:()Lyc/k;` @kind static;
  #L484daa.  v0:= temp @kind object;
  #L484dac.  if v2 == v0 then goto L484dec;
  #L484db0.  call temp:= `c`() @signature `Lyc/j;.c:()Lyc/k;` @kind static;
  #L484db6.  v0:= temp @kind object;
  #L484db8.  if v2 == v0 then goto L484dec;
  #L484dbc.  call temp:= `f`() @signature `Lyc/j;.f:()Lyc/k;` @kind static;
  #L484dc2.  v0:= temp @kind object;
  #L484dc4.  if v2 == v0 then goto L484dec;
  #L484dc8.  call temp:= `g`() @signature `Lyc/j;.g:()Lyc/k;` @kind static;
  #L484dce.  v0:= temp @kind object;
  #L484dd0.  if v2 == v0 then goto L484dec;
  #L484dd4.  call temp:= `d`() @signature `Lyc/j;.d:()Lyc/k;` @kind static;
  #L484dda.  v0:= temp @kind object;
  #L484ddc.  if v2 != v0 then goto L484de2;
  #L484de0.  goto L484dec;
  #L484de2.  call temp:= `j`(v1, v2) @signature `Lxc/c;.j:(Lyc/k;)Ljava/lang/Object;` @kind super;
  #L484de8.  v2:= temp @kind object;
  #L484dea.  return v2 @kind object;
  #L484dec.  v2:= 0I;
  #L484dee.  return v2 @kind object;
}
procedure `uc.p` `j0`(`uc.p` v4 @kind this, `yc.i` v5 @kind object, `long` v6 ) @signature `Luc/p;.j0:(Lyc/i;J)Luc/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L485324.  v0:= instanceof @variable v5 @type ^`yc.a` @kind boolean;
  #L485328.  if v0 == 0 then goto L485408;
  #L48532c.  v0:= v5 @kind object;
  #L48532e.  v0:= (`yc.a`) v0 @kind object;
  #L485332.  call temp:= `s`(v0, v6) @signature `Lyc/a;.s:(J)J` @kind virtual;
  #L485338.  v1:= `@@uc.p$b.a` @type ^`int`[] @kind object;
  #L48533c.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L485342.  v0:= temp;
  #L485344.  v0:= v1[v0];
  #L485348.  v1:= 1I;
  #L48534a.  if v0 == v1 then goto L4853fc;
  #L48534e.  v2:= 2I;
  #L485350.  if v0 == v2 then goto L4853e4;
  #L485354.  v2:= 3I;
  #L485356.  if v0 == v2 then goto L4853c8;
  #L48535a.  v2:= 4I;
  #L48535c.  if v0 == v2 then goto L4853bc;
  #L485360.  v2:= 5I;
  #L485362.  if v0 != v2 then goto L48538e;
  #L485366.  v5:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L48536a.  call temp:= `B`(v4, v5) @signature `Luc/p;.B:(Lyc/i;)J` @kind virtual;
  #L485370.  v2:= temp @kind wide;
  #L485372.  v5:= lcmp(v2, v6);
  #L485376.  if v5 != 0 then goto L48537e;
  #L48537a.  v5:= v4 @kind object;
  #L48537c.  goto L48538c;
  #L48537e.  v5:= v4.`uc.p.o` @type ^`int`;
  #L485382.  v1:= v1 - v5 @kind int;
  #L485384.  call temp:= `l0`(v4, v1) @signature `Luc/p;.l0:(I)Luc/p;` @kind virtual;
  #L48538a.  v5:= temp @kind object;
  #L48538c.  return v5 @kind object;
  #L48538e.  v6:= new `yc.m`;
  #L485392.  v7:= new `java.lang.StringBuilder`;
  #L485396.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48539c.  v0:= "Unsupported field: " @kind object;
  #L4853a0.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4853a6.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4853ac.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4853b2.  v5:= temp @kind object;
  #L4853b4.  call `<init>`(v6, v5) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4853ba.  throw v6;
  #L4853bc.  v5:= (`int`) v6 @kind l2i;
  #L4853be.  call temp:= `l0`(v4, v5) @signature `Luc/p;.l0:(I)Luc/p;` @kind virtual;
  #L4853c4.  v5:= temp @kind object;
  #L4853c6.  return v5 @kind object;
  #L4853c8.  v5:= v4.`uc.p.o` @type ^`int`;
  #L4853cc.  if v5 >= v1 then goto L4853d8;
  #L4853d0.  v0:= 1L;
  #L4853d4.  v6:= v0 - v6 @kind long;
  #L4853d8.  v5:= (`int`) v6 @kind l2i;
  #L4853da.  call temp:= `l0`(v4, v5) @signature `Luc/p;.l0:(I)Luc/p;` @kind virtual;
  #L4853e0.  v5:= temp @kind object;
  #L4853e2.  return v5 @kind object;
  #L4853e4.  v5:= `@@yc.a.Q` @type ^`yc.a` @kind object;
  #L4853e8.  call temp:= `B`(v4, v5) @signature `Luc/p;.B:(Lyc/i;)J` @kind virtual;
  #L4853ee.  v0:= temp @kind wide;
  #L4853f0.  v6:= v6 - v0 @kind long;
  #L4853f2.  call temp:= `e0`(v4, v6) @signature `Luc/p;.e0:(J)Luc/p;` @kind virtual;
  #L4853f8.  v5:= temp @kind object;
  #L4853fa.  return v5 @kind object;
  #L4853fc.  v5:= (`int`) v6 @kind l2i;
  #L4853fe.  call temp:= `k0`(v4, v5) @signature `Luc/p;.k0:(I)Luc/p;` @kind virtual;
  #L485404.  v5:= temp @kind object;
  #L485406.  return v5 @kind object;
  #L485408.  call temp:= `e`(v5, v4, v6) @signature `Lyc/i;.e:(Lyc/d;J)Lyc/d;` @kind interface;
  #L48540e.  v5:= temp @kind object;
  #L485410.  v5:= (`uc.p`) v5 @kind object;
  #L485414.  return v5 @kind object;
}
procedure `uc.p` `k0`(`uc.p` v3 @kind this, `int` v4 ) @signature `Luc/p;.k0:(I)Luc/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485428.  v0:= `@@yc.a.P` @type ^`yc.a` @kind object;
  #L48542c.  v1:= (`long`) v4 @kind i2l;
  #L48542e.  call temp:= `s`(v0, v1) @signature `Lyc/a;.s:(J)J` @kind virtual;
  #L485434.  v0:= v3.`uc.p.o` @type ^`int`;
  #L485438.  call temp:= `h0`(v3, v0, v4) @signature `Luc/p;.h0:(II)Luc/p;` @kind direct;
  #L48543e.  v4:= temp @kind object;
  #L485440.  return v4 @kind object;
}
procedure `uc.p` `l0`(`uc.p` v3 @kind this, `int` v4 ) @signature `Luc/p;.l0:(I)Luc/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485454.  v0:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L485458.  v1:= (`long`) v4 @kind i2l;
  #L48545a.  call temp:= `s`(v0, v1) @signature `Lyc/a;.s:(J)J` @kind virtual;
  #L485460.  v0:= v3.`uc.p.p` @type ^`int`;
  #L485464.  call temp:= `h0`(v3, v4, v0) @signature `Luc/p;.h0:(II)Luc/p;` @kind direct;
  #L48546a.  v4:= temp @kind object;
  #L48546c.  return v4 @kind object;
}
procedure `void` `m0`(`uc.p` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Luc/p;.m0:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L4854fc.  v0:= v1.`uc.p.o` @type ^`int`;
  #L485500.  call `writeInt`(v2, v0) @signature `Ljava/io/DataOutput;.writeInt:(I)V` @kind interface;
  #L485506.  v0:= v1.`uc.p.p` @type ^`int`;
  #L48550a.  call `writeByte`(v2, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L485510.  return @kind void;
}
procedure `yc.d` `r`(`uc.p` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Luc/p;.r:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L485574.  call temp:= `b0`(v0, v1, v3) @signature `Luc/p;.b0:(JLyc/l;)Luc/p;` @kind virtual;
  #L48557a.  v1:= temp @kind object;
  #L48557c.  return v1 @kind object;
}
procedure `yc.n` `t`(`uc.p` v4 @kind this, `yc.i` v5 @kind object) @signature `Luc/p;.t:(Lyc/i;)Lyc/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4855e4.  v0:= `@@yc.a.R` @type ^`yc.a` @kind object;
  #L4855e8.  if v5 != v0 then goto L485614;
  #L4855ec.  call temp:= `a0`(v4) @signature `Luc/p;.a0:()I` @kind virtual;
  #L4855f2.  v5:= temp;
  #L4855f4.  v0:= 1L;
  #L4855f8.  if v5 > 0 then goto L485604;
  #L4855fc.  v2:= 1000000000L;
  #L485602.  goto L48560a;
  #L485604.  v2:= 999999999L;
  #L48560a.  call temp:= `i`(v0, v2) @signature `Lyc/n;.i:(JJ)Lyc/n;` @kind static;
  #L485610.  v5:= temp @kind object;
  #L485612.  return v5 @kind object;
  #L485614.  call temp:= `t`(v4, v5) @signature `Lxc/c;.t:(Lyc/i;)Lyc/n;` @kind super;
  #L48561a.  v5:= temp @kind object;
  #L48561c.  return v5 @kind object;
}
procedure `java.lang.String` `toString`(`uc.p` v3 @kind this) @signature `Luc/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L484e40.  v0:= v3.`uc.p.o` @type ^`int`;
  #L484e44.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L484e4a.  v0:= temp;
  #L484e4c.  v1:= new `java.lang.StringBuilder`;
  #L484e50.  v2:= 9I;
  #L484e54.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L484e5a.  v2:= 1000I;
  #L484e5e.  if v0 >= v2 then goto L484e8c;
  #L484e62.  v0:= v3.`uc.p.o` @type ^`int`;
  #L484e66.  if v0 >= 0 then goto L484e78;
  #L484e6a.  v0:= v0 + -10000;
  #L484e6e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L484e74.  v0:= 1I;
  #L484e76.  goto L484e84;
  #L484e78.  v0:= v0 + 10000;
  #L484e7c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L484e82.  v0:= 0I;
  #L484e84.  call temp:= `deleteCharAt`(v1, v0) @signature `Ljava/lang/StringBuilder;.deleteCharAt:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L484e8a.  goto L484e96;
  #L484e8c.  v0:= v3.`uc.p.o` @type ^`int`;
  #L484e90.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L484e96.  v0:= v3.`uc.p.p` @type ^`int`;
  #L484e9a.  v2:= 10I;
  #L484e9e.  if v0 >= v2 then goto L484ea8;
  #L484ea2.  v0:= "-0" @kind object;
  #L484ea6.  goto L484eac;
  #L484ea8.  v0:= "-" @kind object;
  #L484eac.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L484eb2.  v0:= v3.`uc.p.p` @type ^`int`;
  #L484eb6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L484ebc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L484ec2.  v0:= temp @kind object;
  #L484ec4.  return v0 @kind object;
}
