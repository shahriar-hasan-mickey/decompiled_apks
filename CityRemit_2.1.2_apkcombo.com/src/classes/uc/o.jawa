record `uc.o` @kind class @AccessFlag PUBLIC_FINAL extends `xc.c` @kind class, `yc.d` @kind interface, `yc.f` @kind interface, `java.lang.Comparable` @kind interface, `java.io.Serializable` @kind interface {
  `int` `uc.o.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Luc/o;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L485c70.  v0:= new `uc.o$a`;
  #L485c74.  call `<init>`(v0) @signature `Luc/o$a;.<init>:()V` @kind direct;
  #L485c7a.  v0:= new `wc.c`;
  #L485c7e.  call `<init>`(v0) @signature `Lwc/c;.<init>:()V` @kind direct;
  #L485c84.  v1:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L485c88.  v2:= `@@wc.j.s` @type ^`wc.j` @kind object;
  #L485c8c.  v3:= 4I;
  #L485c8e.  v4:= 10I;
  #L485c92.  call temp:= `l`(v0, v1, v3, v4, v2) @signature `Lwc/c;.l:(Lyc/i;IILwc/j;)Lwc/c;` @kind virtual;
  #L485c98.  v0:= temp @kind object;
  #L485c9a.  call temp:= `s`(v0) @signature `Lwc/c;.s:()Lwc/b;` @kind virtual;
  #L485ca0.  return @kind void;
}
procedure `void` `<init>`(`uc.o` v0 @kind this, `int` v1 ) @signature `Luc/o;.<init>:(I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L485cb4.  call `<init>`(v0) @signature `Lxc/c;.<init>:()V` @kind direct;
  #L485cba.  v0.`uc.o.o` @type ^`int` := v1;
  #L485cbe.  return @kind void;
}
procedure `uc.o` `V`(`yc.e` v3 @kind object) @signature `Luc/o;.V:(Lyc/e;)Luc/o;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L485904.  v0:= instanceof @variable v3 @type ^`uc.o` @kind boolean;
  #L485908.  if v0 == 0 then goto L485912;
  #L48590c.  v3:= (`uc.o`) v3 @kind object;
  #L485910.  return v3 @kind object;
  #L485912.  v0:= `@@vc.m.q` @type ^`vc.m` @kind object;
  #L485916.  call temp:= `k`(v3) @signature `Lvc/h;.k:(Lyc/e;)Lvc/h;` @kind static;
  #L48591c.  v1:= temp @kind object;
  #L48591e.  call temp:= `equals`(v0, v1) @signature `Lvc/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L485924.  v0:= temp;
  #L485926.  if v0 != 0 then goto L485932;
  #L48592a.  call temp:= `m0`(v3) @signature `Luc/f;.m0:(Lyc/e;)Luc/f;` @kind static;
  #L485930.  v3:= temp @kind object;
  #L485932.  v0:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L485936.  call temp:= `F`(v3, v0) @signature `Lyc/e;.F:(Lyc/i;)I` @kind interface;
  #L48593c.  v0:= temp;
  #L48593e.  call temp:= `b0`(v0) @signature `Luc/o;.b0:(I)Luc/o;` @kind static;
  #L485944.  v3:= temp @kind object;
  #L485946.  return v3 @kind object;
  #L485948.  v0:= new `uc.b`;
  #L48594c.  v1:= new `java.lang.StringBuilder`;
  #L485950.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L485956.  v2:= "Unable to obtain Year from TemporalAccessor: " @kind object;
  #L48595a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485960.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485966.  v2:= ", type " @kind object;
  #L48596a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485970.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L485976.  v3:= temp @kind object;
  #L485978.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L48597e.  v3:= temp @kind object;
  #L485980.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485986.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48598c.  v3:= temp @kind object;
  #L48598e.  call `<init>`(v0, v3) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L485994.  throw v0;
  catch `uc.b` @[L485912..L485946] goto L485948;
}
procedure `boolean` `X`(`long` v5 ) @signature `Luc/o;.X:(J)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48566c.  v0:= 3L;
  #L485670.  v0:= v0 ^& v5 @kind long;
  #L485672.  v2:= 0L;
  #L485676.  v4:= lcmp(v0, v2);
  #L48567a.  if v4 != 0 then goto L4856a0;
  #L48567e.  v0:= 100L;
  #L485682.  v0:= v5 %% v0 @kind long;
  #L485686.  v4:= lcmp(v0, v2);
  #L48568a.  if v4 != 0 then goto L48569c;
  #L48568e.  v0:= 400L;
  #L485692.  v5:= v5 %% v0 @kind long;
  #L485694.  v0:= lcmp(v5, v2);
  #L485698.  if v0 != 0 then goto L4856a0;
  #L48569c.  v5:= 1I;
  #L48569e.  goto L4856a2;
  #L4856a0.  v5:= 0I;
  #L4856a2.  return v5;
}
procedure `uc.o` `b0`(`int` v3 ) @signature `Luc/o;.b0:(I)Luc/o;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L485a00.  v0:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L485a04.  v1:= (`long`) v3 @kind i2l;
  #L485a06.  call temp:= `s`(v0, v1) @signature `Lyc/a;.s:(J)J` @kind virtual;
  #L485a0c.  v0:= new `uc.o`;
  #L485a10.  call `<init>`(v0, v3) @signature `Luc/o;.<init>:(I)V` @kind direct;
  #L485a16.  return v0 @kind object;
}
procedure `uc.o` `e0`(`java.io.DataInput` v0 @kind object) @signature `Luc/o;.e0:(Ljava/io/DataInput;)Luc/o;` @AccessFlag STATIC {
    temp;

  #L485b58.  call temp:= `readInt`(v0) @signature `Ljava/io/DataInput;.readInt:()I` @kind interface;
  #L485b5e.  v0:= temp;
  #L485b60.  call temp:= `b0`(v0) @signature `Luc/o;.b0:(I)Luc/o;` @kind static;
  #L485b66.  v0:= temp @kind object;
  #L485b68.  return v0 @kind object;
}
procedure `java.lang.Object` `readResolve`(`uc.o` v2 @kind this) @signature `Luc/o;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L485804.  v0:= new `java.io.InvalidObjectException`;
  #L485808.  v1:= "Deserialization via serialization delegate" @kind object;
  #L48580c.  call `<init>`(v0, v1) @signature `Ljava/io/InvalidObjectException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L485812.  throw v0;
}
procedure `java.lang.Object` `writeReplace`(`uc.o` v2 @kind this) @signature `Luc/o;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L485824.  v0:= new `uc.n`;
  #L485828.  v1:= 67I;
  #L48582c.  call `<init>`(v0, v1, v2) @signature `Luc/n;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L485832.  return v0 @kind object;
}
procedure `long` `B`(`uc.o` v3 @kind this, `yc.i` v4 @kind object) @signature `Luc/o;.B:(Lyc/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485864.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L485868.  if v0 == 0 then goto L4858e8;
  #L48586c.  v0:= `@@uc.o$b.a` @type ^`int`[] @kind object;
  #L485870.  v1:= v4 @kind object;
  #L485872.  v1:= (`yc.a`) v1 @kind object;
  #L485876.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L48587c.  v1:= temp;
  #L48587e.  v0:= v0[v1];
  #L485882.  v1:= 1I;
  #L485884.  if v0 == v1 then goto L4858d8;
  #L485888.  v2:= 2I;
  #L48588a.  if v0 == v2 then goto L4858d0;
  #L48588e.  v2:= 3I;
  #L485890.  if v0 != v2 then goto L4858a2;
  #L485894.  v4:= v3.`uc.o.o` @type ^`int`;
  #L485898.  if v4 >= v1 then goto L48589e;
  #L48589c.  v1:= 0I;
  #L48589e.  v0:= (`long`) v1 @kind i2l;
  #L4858a0.  return v0 @kind wide;
  #L4858a2.  v0:= new `yc.m`;
  #L4858a6.  v1:= new `java.lang.StringBuilder`;
  #L4858aa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4858b0.  v2:= "Unsupported field: " @kind object;
  #L4858b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4858ba.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4858c0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4858c6.  v4:= temp @kind object;
  #L4858c8.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4858ce.  throw v0;
  #L4858d0.  v4:= v3.`uc.o.o` @type ^`int`;
  #L4858d4.  v0:= (`long`) v4 @kind i2l;
  #L4858d6.  return v0 @kind wide;
  #L4858d8.  v4:= v3.`uc.o.o` @type ^`int`;
  #L4858dc.  if v4 >= v1 then goto L4858e4;
  #L4858e0.  v4:= v4 - 1;
  #L4858e4.  v0:= (`long`) v4 @kind i2l;
  #L4858e6.  return v0 @kind wide;
  #L4858e8.  call temp:= `o`(v4, v3) @signature `Lyc/i;.o:(Lyc/e;)J` @kind interface;
  #L4858ee.  v0:= temp @kind wide;
  #L4858f0.  return v0 @kind wide;
}
procedure `yc.d` `D`(`uc.o` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Luc/o;.D:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L485d54.  call temp:= `c0`(v0, v1, v3) @signature `Luc/o;.c0:(JLyc/l;)Luc/o;` @kind virtual;
  #L485d5a.  v1:= temp @kind object;
  #L485d5c.  return v1 @kind object;
}
procedure `int` `F`(`uc.o` v3 @kind this, `yc.i` v4 @kind object) @signature `Luc/o;.F:(Lyc/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485740.  call temp:= `t`(v3, v4) @signature `Luc/o;.t:(Lyc/i;)Lyc/n;` @kind virtual;
  #L485746.  v0:= temp @kind object;
  #L485748.  call temp:= `B`(v3, v4) @signature `Luc/o;.B:(Lyc/i;)J` @kind virtual;
  #L48574e.  v1:= temp @kind wide;
  #L485750.  call temp:= `a`(v0, v1, v4) @signature `Lyc/n;.a:(JLyc/i;)I` @kind virtual;
  #L485756.  v4:= temp;
  #L485758.  return v4;
}
procedure `yc.d` `I`(`uc.o` v3 @kind this, `yc.d` v4 @kind object) @signature `Luc/o;.I:(Lyc/d;)Lyc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485cec.  call temp:= `k`(v4) @signature `Lvc/h;.k:(Lyc/e;)Lvc/h;` @kind static;
  #L485cf2.  v0:= temp @kind object;
  #L485cf4.  v1:= `@@vc.m.q` @type ^`vc.m` @kind object;
  #L485cf8.  call temp:= `equals`(v0, v1) @signature `Lvc/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L485cfe.  v0:= temp;
  #L485d00.  if v0 == 0 then goto L485d18;
  #L485d04.  v0:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L485d08.  v1:= v3.`uc.o.o` @type ^`int`;
  #L485d0c.  v1:= (`long`) v1 @kind i2l;
  #L485d0e.  call temp:= `P`(v4, v0, v1) @signature `Lyc/d;.P:(Lyc/i;J)Lyc/d;` @kind interface;
  #L485d14.  v4:= temp @kind object;
  #L485d16.  return v4 @kind object;
  #L485d18.  v4:= new `uc.b`;
  #L485d1c.  v0:= "Adjustment only supported on ISO date-time" @kind object;
  #L485d20.  call `<init>`(v4, v0) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L485d26.  throw v4;
}
procedure `yc.d` `L`(`uc.o` v0 @kind this, `yc.f` v1 @kind object) @signature `Luc/o;.L:(Lyc/f;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L485d70.  call temp:= `f0`(v0, v1) @signature `Luc/o;.f0:(Lyc/f;)Luc/o;` @kind virtual;
  #L485d76.  v1:= temp @kind object;
  #L485d78.  return v1 @kind object;
}
procedure `yc.d` `P`(`uc.o` v0 @kind this, `yc.i` v1 @kind object, `long` v2 ) @signature `Luc/o;.P:(Lyc/i;J)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L485d8c.  call temp:= `g0`(v0, v1, v2) @signature `Luc/o;.g0:(Lyc/i;J)Luc/o;` @kind virtual;
  #L485d92.  v1:= temp @kind object;
  #L485d94.  return v1 @kind object;
}
procedure `int` `T`(`uc.o` v1 @kind this, `uc.o` v2 @kind object) @signature `Luc/o;.T:(Luc/o;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L485724.  v0:= v1.`uc.o.o` @type ^`int`;
  #L485728.  v2:= v2.`uc.o.o` @type ^`int`;
  #L48572c.  v0:= v0 - v2 @kind int;
  #L48572e.  return v0;
}
procedure `uc.o` `a0`(`uc.o` v3 @kind this, `long` v4 , `yc.l` v6 @kind object) @signature `Luc/o;.a0:(JLyc/l;)Luc/o;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4859b8.  v0:= -9223372036854775808L;
  #L4859bc.  v2:= lcmp(v4, v0);
  #L4859c0.  if v2 != 0 then goto L4859e4;
  #L4859c4.  v4:= 9223372036854775807L;
  #L4859ce.  call temp:= `c0`(v3, v4, v6) @signature `Luc/o;.c0:(JLyc/l;)Luc/o;` @kind virtual;
  #L4859d4.  v4:= temp @kind object;
  #L4859d6.  v0:= 1L;
  #L4859da.  call temp:= `c0`(v4, v0, v6) @signature `Luc/o;.c0:(JLyc/l;)Luc/o;` @kind virtual;
  #L4859e0.  v4:= temp @kind object;
  #L4859e2.  goto L4859ee;
  #L4859e4.  v4:= -v4 @kind long;
  #L4859e6.  call temp:= `c0`(v3, v4, v6) @signature `Luc/o;.c0:(JLyc/l;)Luc/o;` @kind virtual;
  #L4859ec.  v4:= temp @kind object;
  #L4859ee.  return v4 @kind object;
}
procedure `uc.o` `c0`(`uc.o` v2 @kind this, `long` v3 , `yc.l` v5 @kind object) @signature `Luc/o;.c0:(JLyc/l;)Luc/o;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L485a28.  v0:= instanceof @variable v5 @type ^`yc.b` @kind boolean;
  #L485a2c.  if v0 == 0 then goto L485afc;
  #L485a30.  v0:= `@@uc.o$b.b` @type ^`int`[] @kind object;
  #L485a34.  v1:= v5 @kind object;
  #L485a36.  v1:= (`yc.b`) v1 @kind object;
  #L485a3a.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L485a40.  v1:= temp;
  #L485a42.  v0:= v0[v1];
  #L485a46.  v1:= 1I;
  #L485a48.  if v0 == v1 then goto L485af2;
  #L485a4c.  v1:= 2I;
  #L485a4e.  if v0 == v1 then goto L485adc;
  #L485a52.  v1:= 3I;
  #L485a54.  if v0 == v1 then goto L485ac6;
  #L485a58.  v1:= 4I;
  #L485a5a.  if v0 == v1 then goto L485ab0;
  #L485a5e.  v1:= 5I;
  #L485a60.  if v0 != v1 then goto L485a82;
  #L485a64.  v5:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L485a68.  call temp:= `B`(v2, v5) @signature `Luc/o;.B:(Lyc/i;)J` @kind virtual;
  #L485a6e.  v0:= temp @kind wide;
  #L485a70.  call temp:= `k`(v0, v3) @signature `Lxc/d;.k:(JJ)J` @kind static;
  #L485a76.  v3:= temp @kind wide;
  #L485a78.  call temp:= `g0`(v2, v5, v3) @signature `Luc/o;.g0:(Lyc/i;J)Luc/o;` @kind virtual;
  #L485a7e.  v3:= temp @kind object;
  #L485a80.  return v3 @kind object;
  #L485a82.  v3:= new `yc.m`;
  #L485a86.  v4:= new `java.lang.StringBuilder`;
  #L485a8a.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L485a90.  v0:= "Unsupported unit: " @kind object;
  #L485a94.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485a9a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485aa0.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L485aa6.  v4:= temp @kind object;
  #L485aa8.  call `<init>`(v3, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L485aae.  throw v3;
  #L485ab0.  v5:= 1000I;
  #L485ab4.  call temp:= `l`(v3, v5) @signature `Lxc/d;.l:(JI)J` @kind static;
  #L485aba.  v3:= temp @kind wide;
  #L485abc.  call temp:= `d0`(v2, v3) @signature `Luc/o;.d0:(J)Luc/o;` @kind virtual;
  #L485ac2.  v3:= temp @kind object;
  #L485ac4.  return v3 @kind object;
  #L485ac6.  v5:= 100I;
  #L485aca.  call temp:= `l`(v3, v5) @signature `Lxc/d;.l:(JI)J` @kind static;
  #L485ad0.  v3:= temp @kind wide;
  #L485ad2.  call temp:= `d0`(v2, v3) @signature `Luc/o;.d0:(J)Luc/o;` @kind virtual;
  #L485ad8.  v3:= temp @kind object;
  #L485ada.  return v3 @kind object;
  #L485adc.  v5:= 10I;
  #L485ae0.  call temp:= `l`(v3, v5) @signature `Lxc/d;.l:(JI)J` @kind static;
  #L485ae6.  v3:= temp @kind wide;
  #L485ae8.  call temp:= `d0`(v2, v3) @signature `Luc/o;.d0:(J)Luc/o;` @kind virtual;
  #L485aee.  v3:= temp @kind object;
  #L485af0.  return v3 @kind object;
  #L485af2.  call temp:= `d0`(v2, v3) @signature `Luc/o;.d0:(J)Luc/o;` @kind virtual;
  #L485af8.  v3:= temp @kind object;
  #L485afa.  return v3 @kind object;
  #L485afc.  call temp:= `d`(v5, v2, v3) @signature `Lyc/l;.d:(Lyc/d;J)Lyc/d;` @kind interface;
  #L485b02.  v3:= temp @kind object;
  #L485b04.  v3:= (`uc.o`) v3 @kind object;
  #L485b08.  return v3 @kind object;
}
procedure `int` `compareTo`(`uc.o` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Luc/o;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L485704.  v1:= (`uc.o`) v1 @kind object;
  #L485708.  call temp:= `T`(v0, v1) @signature `Luc/o;.T:(Luc/o;)I` @kind virtual;
  #L48570e.  v1:= temp;
  #L485710.  return v1;
}
procedure `boolean` `d`(`uc.o` v3 @kind this, `yc.i` v4 @kind object) @signature `Luc/o;.d:(Lyc/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4856b4.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4856b8.  v1:= 1I;
  #L4856ba.  v2:= 0I;
  #L4856bc.  if v0 == 0 then goto L4856de;
  #L4856c0.  v0:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L4856c4.  if v4 == v0 then goto L4856dc;
  #L4856c8.  v0:= `@@yc.a.R` @type ^`yc.a` @kind object;
  #L4856cc.  if v4 == v0 then goto L4856dc;
  #L4856d0.  v0:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L4856d4.  if v4 != v0 then goto L4856da;
  #L4856d8.  goto L4856dc;
  #L4856da.  v1:= 0I;
  #L4856dc.  return v1;
  #L4856de.  if v4 == 0 then goto L4856f0;
  #L4856e2.  call temp:= `j`(v4, v3) @signature `Lyc/i;.j:(Lyc/e;)Z` @kind interface;
  #L4856e8.  v4:= temp;
  #L4856ea.  if v4 == 0 then goto L4856f0;
  #L4856ee.  goto L4856f2;
  #L4856f0.  v1:= 0I;
  #L4856f2.  return v1;
}
procedure `uc.o` `d0`(`uc.o` v3 @kind this, `long` v4 ) @signature `Luc/o;.d0:(J)Luc/o;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485b1c.  v0:= 0L;
  #L485b20.  v2:= lcmp(v4, v0);
  #L485b24.  if v2 != 0 then goto L485b2a;
  #L485b28.  return v3 @kind object;
  #L485b2a.  v0:= `@@yc.a.S` @type ^`yc.a` @kind object;
  #L485b2e.  v1:= v3.`uc.o.o` @type ^`int`;
  #L485b32.  v1:= (`long`) v1 @kind i2l;
  #L485b34.  v1:= v1 + v4 @kind long;
  #L485b36.  call temp:= `r`(v0, v1) @signature `Lyc/a;.r:(J)I` @kind virtual;
  #L485b3c.  v4:= temp;
  #L485b3e.  call temp:= `b0`(v4) @signature `Luc/o;.b0:(I)Luc/o;` @kind static;
  #L485b44.  v4:= temp @kind object;
  #L485b46.  return v4 @kind object;
}
procedure `boolean` `equals`(`uc.o` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Luc/o;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485630.  v0:= 1I;
  #L485632.  if v3 != v4 then goto L485638;
  #L485636.  return v0;
  #L485638.  v1:= instanceof @variable v4 @type ^`uc.o` @kind boolean;
  #L48563c.  v2:= 0I;
  #L48563e.  if v1 == 0 then goto L485658;
  #L485642.  v1:= v3.`uc.o.o` @type ^`int`;
  #L485646.  v4:= (`uc.o`) v4 @kind object;
  #L48564a.  v4:= v4.`uc.o.o` @type ^`int`;
  #L48564e.  if v1 != v4 then goto L485654;
  #L485652.  goto L485656;
  #L485654.  v0:= 0I;
  #L485656.  return v0;
  #L485658.  return v2;
}
procedure `uc.o` `f0`(`uc.o` v0 @kind this, `yc.f` v1 @kind object) @signature `Luc/o;.f0:(Lyc/f;)Luc/o;` @AccessFlag PUBLIC {
    temp;

  #L485b7c.  call temp:= `I`(v1, v0) @signature `Lyc/f;.I:(Lyc/d;)Lyc/d;` @kind interface;
  #L485b82.  v1:= temp @kind object;
  #L485b84.  v1:= (`uc.o`) v1 @kind object;
  #L485b88.  return v1 @kind object;
}
procedure `uc.o` `g0`(`uc.o` v4 @kind this, `yc.i` v5 @kind object, `long` v6 ) @signature `Luc/o;.g0:(Lyc/i;J)Luc/o;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L485b9c.  v0:= instanceof @variable v5 @type ^`yc.a` @kind boolean;
  #L485ba0.  if v0 == 0 then goto L485c50;
  #L485ba4.  v0:= v5 @kind object;
  #L485ba6.  v0:= (`yc.a`) v0 @kind object;
  #L485baa.  call temp:= `s`(v0, v6) @signature `Lyc/a;.s:(J)J` @kind virtual;
  #L485bb0.  v1:= `@@uc.o$b.a` @type ^`int`[] @kind object;
  #L485bb4.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L485bba.  v0:= temp;
  #L485bbc.  v0:= v1[v0];
  #L485bc0.  v1:= 1I;
  #L485bc2.  if v0 == v1 then goto L485c34;
  #L485bc6.  v2:= 2I;
  #L485bc8.  if v0 == v2 then goto L485c28;
  #L485bcc.  v2:= 3I;
  #L485bce.  if v0 != v2 then goto L485bfa;
  #L485bd2.  v5:= `@@yc.a.T` @type ^`yc.a` @kind object;
  #L485bd6.  call temp:= `B`(v4, v5) @signature `Luc/o;.B:(Lyc/i;)J` @kind virtual;
  #L485bdc.  v2:= temp @kind wide;
  #L485bde.  v5:= lcmp(v2, v6);
  #L485be2.  if v5 != 0 then goto L485bea;
  #L485be6.  v5:= v4 @kind object;
  #L485be8.  goto L485bf8;
  #L485bea.  v5:= v4.`uc.o.o` @type ^`int`;
  #L485bee.  v1:= v1 - v5 @kind int;
  #L485bf0.  call temp:= `b0`(v1) @signature `Luc/o;.b0:(I)Luc/o;` @kind static;
  #L485bf6.  v5:= temp @kind object;
  #L485bf8.  return v5 @kind object;
  #L485bfa.  v6:= new `yc.m`;
  #L485bfe.  v7:= new `java.lang.StringBuilder`;
  #L485c02.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L485c08.  v0:= "Unsupported field: " @kind object;
  #L485c0c.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485c12.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485c18.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L485c1e.  v5:= temp @kind object;
  #L485c20.  call `<init>`(v6, v5) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L485c26.  throw v6;
  #L485c28.  v5:= (`int`) v6 @kind l2i;
  #L485c2a.  call temp:= `b0`(v5) @signature `Luc/o;.b0:(I)Luc/o;` @kind static;
  #L485c30.  v5:= temp @kind object;
  #L485c32.  return v5 @kind object;
  #L485c34.  v5:= v4.`uc.o.o` @type ^`int`;
  #L485c38.  if v5 >= v1 then goto L485c44;
  #L485c3c.  v0:= 1L;
  #L485c40.  v6:= v0 - v6 @kind long;
  #L485c44.  v5:= (`int`) v6 @kind l2i;
  #L485c46.  call temp:= `b0`(v5) @signature `Luc/o;.b0:(I)Luc/o;` @kind static;
  #L485c4c.  v5:= temp @kind object;
  #L485c4e.  return v5 @kind object;
  #L485c50.  call temp:= `e`(v5, v4, v6) @signature `Lyc/i;.e:(Lyc/d;J)Lyc/d;` @kind interface;
  #L485c56.  v5:= temp @kind object;
  #L485c58.  v5:= (`uc.o`) v5 @kind object;
  #L485c5c.  return v5 @kind object;
}
procedure `void` `h0`(`uc.o` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Luc/o;.h0:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L485cd0.  v0:= v1.`uc.o.o` @type ^`int`;
  #L485cd4.  call `writeInt`(v2, v0) @signature `Ljava/io/DataOutput;.writeInt:(I)V` @kind interface;
  #L485cda.  return @kind void;
}
procedure `int` `hashCode`(`uc.o` v1 @kind this) @signature `Luc/o;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48576c.  v0:= v1.`uc.o.o` @type ^`int`;
  #L485770.  return v0;
}
procedure `java.lang.Object` `j`(`uc.o` v1 @kind this, `yc.k` v2 @kind object) @signature `Luc/o;.j:(Lyc/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L485784.  call temp:= `a`() @signature `Lyc/j;.a:()Lyc/k;` @kind static;
  #L48578a.  v0:= temp @kind object;
  #L48578c.  if v2 != v0 then goto L485796;
  #L485790.  v2:= `@@vc.m.q` @type ^`vc.m` @kind object;
  #L485794.  return v2 @kind object;
  #L485796.  call temp:= `e`() @signature `Lyc/j;.e:()Lyc/k;` @kind static;
  #L48579c.  v0:= temp @kind object;
  #L48579e.  if v2 != v0 then goto L4857a8;
  #L4857a2.  v2:= `@@yc.b.z` @type ^`yc.b` @kind object;
  #L4857a6.  return v2 @kind object;
  #L4857a8.  call temp:= `b`() @signature `Lyc/j;.b:()Lyc/k;` @kind static;
  #L4857ae.  v0:= temp @kind object;
  #L4857b0.  if v2 == v0 then goto L4857f0;
  #L4857b4.  call temp:= `c`() @signature `Lyc/j;.c:()Lyc/k;` @kind static;
  #L4857ba.  v0:= temp @kind object;
  #L4857bc.  if v2 == v0 then goto L4857f0;
  #L4857c0.  call temp:= `f`() @signature `Lyc/j;.f:()Lyc/k;` @kind static;
  #L4857c6.  v0:= temp @kind object;
  #L4857c8.  if v2 == v0 then goto L4857f0;
  #L4857cc.  call temp:= `g`() @signature `Lyc/j;.g:()Lyc/k;` @kind static;
  #L4857d2.  v0:= temp @kind object;
  #L4857d4.  if v2 == v0 then goto L4857f0;
  #L4857d8.  call temp:= `d`() @signature `Lyc/j;.d:()Lyc/k;` @kind static;
  #L4857de.  v0:= temp @kind object;
  #L4857e0.  if v2 != v0 then goto L4857e6;
  #L4857e4.  goto L4857f0;
  #L4857e6.  call temp:= `j`(v1, v2) @signature `Lxc/c;.j:(Lyc/k;)Ljava/lang/Object;` @kind super;
  #L4857ec.  v2:= temp @kind object;
  #L4857ee.  return v2 @kind object;
  #L4857f0.  v2:= 0I;
  #L4857f2.  return v2 @kind object;
}
procedure `yc.d` `r`(`uc.o` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Luc/o;.r:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L485d38.  call temp:= `a0`(v0, v1, v3) @signature `Luc/o;.a0:(JLyc/l;)Luc/o;` @kind virtual;
  #L485d3e.  v1:= temp @kind object;
  #L485d40.  return v1 @kind object;
}
procedure `yc.n` `t`(`uc.o` v4 @kind this, `yc.i` v5 @kind object) @signature `Luc/o;.t:(Lyc/i;)Lyc/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L485da8.  v0:= `@@yc.a.R` @type ^`yc.a` @kind object;
  #L485dac.  if v5 != v0 then goto L485dd4;
  #L485db0.  v5:= v4.`uc.o.o` @type ^`int`;
  #L485db4.  v0:= 1L;
  #L485db8.  if v5 > 0 then goto L485dc4;
  #L485dbc.  v2:= 1000000000L;
  #L485dc2.  goto L485dca;
  #L485dc4.  v2:= 999999999L;
  #L485dca.  call temp:= `i`(v0, v2) @signature `Lyc/n;.i:(JJ)Lyc/n;` @kind static;
  #L485dd0.  v5:= temp @kind object;
  #L485dd2.  return v5 @kind object;
  #L485dd4.  call temp:= `t`(v4, v5) @signature `Lxc/c;.t:(Lyc/i;)Lyc/n;` @kind super;
  #L485dda.  v5:= temp @kind object;
  #L485ddc.  return v5 @kind object;
}
procedure `java.lang.String` `toString`(`uc.o` v1 @kind this) @signature `Luc/o;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L485844.  v0:= v1.`uc.o.o` @type ^`int`;
  #L485848.  call temp:= `toString`(v0) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L48584e.  v0:= temp @kind object;
  #L485850.  return v0 @kind object;
}
