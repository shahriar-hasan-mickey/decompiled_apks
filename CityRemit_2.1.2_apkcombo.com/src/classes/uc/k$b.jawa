record `uc.k$b` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`uc.k$b` v0 @kind this) @signature `Luc/k$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4831d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4831de.  return @kind void;
}
procedure `int` `a`(`uc.k$b` v4 @kind this, `uc.k` v5 @kind object, `uc.k` v6 @kind object) @signature `Luc/k$b;.a:(Luc/k;Luc/k;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48318c.  call temp:= `h0`(v5) @signature `Luc/k;.h0:()J` @kind virtual;
  #L483192.  v0:= temp @kind wide;
  #L483194.  call temp:= `h0`(v6) @signature `Luc/k;.h0:()J` @kind virtual;
  #L48319a.  v2:= temp @kind wide;
  #L48319c.  call temp:= `b`(v0, v2) @signature `Lxc/d;.b:(JJ)I` @kind static;
  #L4831a2.  v0:= temp;
  #L4831a4.  if v0 != 0 then goto L4831c4;
  #L4831a8.  call temp:= `a0`(v5) @signature `Luc/k;.a0:()I` @kind virtual;
  #L4831ae.  v5:= temp;
  #L4831b0.  v0:= (`long`) v5 @kind i2l;
  #L4831b2.  call temp:= `a0`(v6) @signature `Luc/k;.a0:()I` @kind virtual;
  #L4831b8.  v5:= temp;
  #L4831ba.  v5:= (`long`) v5 @kind i2l;
  #L4831bc.  call temp:= `b`(v0, v5) @signature `Lxc/d;.b:(JJ)I` @kind static;
  #L4831c2.  v0:= temp;
  #L4831c4.  return v0;
}
procedure `int` `compare`(`uc.k$b` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Luc/k$b;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L483168.  v1:= (`uc.k`) v1 @kind object;
  #L48316c.  v2:= (`uc.k`) v2 @kind object;
  #L483170.  call temp:= `a`(v0, v1, v2) @signature `Luc/k$b;.a:(Luc/k;Luc/k;)I` @kind virtual;
  #L483176.  v1:= temp;
  #L483178.  return v1;
}
