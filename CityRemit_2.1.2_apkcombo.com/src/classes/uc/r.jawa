record `uc.r` @kind class @AccessFlag PUBLIC_FINAL extends `uc.q` @kind class, `yc.e` @kind interface, `yc.f` @kind interface, `java.lang.Comparable` @kind interface {
  `int` `uc.r.o` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `uc.r.p` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
global `java.util.concurrent.ConcurrentMap` `@@uc.r.q` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@uc.r.r` @AccessFlag PRIVATE_STATIC_FINAL;
global `uc.r` `@@uc.r.s` @AccessFlag PUBLIC_STATIC_FINAL;
global `uc.r` `@@uc.r.t` @AccessFlag PUBLIC_STATIC_FINAL;
global `uc.r` `@@uc.r.u` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Luc/r;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L486c34.  v0:= new `uc.r$a`;
  #L486c38.  call `<init>`(v0) @signature `Luc/r$a;.<init>:()V` @kind direct;
  #L486c3e.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L486c42.  v1:= 16I;
  #L486c46.  v2:= 0.75F;
  #L486c4a.  v3:= 4I;
  #L486c4c.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:(IFI)V` @kind direct;
  #L486c52.  `@@uc.r.q` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L486c56.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L486c5a.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:(IFI)V` @kind direct;
  #L486c60.  `@@uc.r.r` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L486c64.  v0:= 0I;
  #L486c66.  call temp:= `X`(v0) @signature `Luc/r;.X:(I)Luc/r;` @kind static;
  #L486c6c.  v0:= temp @kind object;
  #L486c6e.  `@@uc.r.s` @type ^`uc.r` := v0 @kind object;
  #L486c72.  v0:= -64800I;
  #L486c78.  call temp:= `X`(v0) @signature `Luc/r;.X:(I)Luc/r;` @kind static;
  #L486c7e.  v0:= temp @kind object;
  #L486c80.  `@@uc.r.t` @type ^`uc.r` := v0 @kind object;
  #L486c84.  v0:= 64800I;
  #L486c8a.  call temp:= `X`(v0) @signature `Luc/r;.X:(I)Luc/r;` @kind static;
  #L486c90.  v0:= temp @kind object;
  #L486c92.  `@@uc.r.u` @type ^`uc.r` := v0 @kind object;
  #L486c96.  return @kind void;
}
procedure `void` `<init>`(`uc.r` v0 @kind this, `int` v1 ) @signature `Luc/r;.<init>:(I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L486ca8.  call `<init>`(v0) @signature `Luc/q;.<init>:()V` @kind direct;
  #L486cae.  v0.`uc.r.o` @type ^`int` := v1;
  #L486cb2.  call temp:= `v`(v1) @signature `Luc/r;.v:(I)Ljava/lang/String;` @kind static;
  #L486cb8.  v1:= temp @kind object;
  #L486cba.  v0.`uc.r.p` @type ^`java.lang.String` := v1 @kind object;
  #L486cbe.  return @kind void;
}
procedure `uc.r` `K`(`yc.e` v3 @kind object) @signature `Luc/r;.K:(Lyc/e;)Luc/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L48692c.  call temp:= `d`() @signature `Lyc/j;.d:()Lyc/k;` @kind static;
  #L486932.  v0:= temp @kind object;
  #L486934.  call temp:= `j`(v3, v0) @signature `Lyc/e;.j:(Lyc/k;)Ljava/lang/Object;` @kind interface;
  #L48693a.  v0:= temp @kind object;
  #L48693c.  v0:= (`uc.r`) v0 @kind object;
  #L486940.  if v0 == 0 then goto L486946;
  #L486944.  return v0 @kind object;
  #L486946.  v0:= new `uc.b`;
  #L48694a.  v1:= new `java.lang.StringBuilder`;
  #L48694e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L486954.  v2:= "Unable to obtain ZoneOffset from TemporalAccessor: " @kind object;
  #L486958.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48695e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486964.  v2:= ", type " @kind object;
  #L486968.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48696e.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L486974.  v3:= temp @kind object;
  #L486976.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L48697c.  v3:= temp @kind object;
  #L48697e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486984.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48698a.  v3:= temp @kind object;
  #L48698c.  call `<init>`(v0, v3) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486992.  throw v0;
}
procedure `uc.r` `T`(`java.lang.String` v7 @kind object) @signature `Luc/r;.T:(Ljava/lang/String;)Luc/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4869a4.  v0:= "offsetId" @kind object;
  #L4869a8.  call temp:= `i`(v7, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4869ae.  v0:= `@@uc.r.r` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4869b2.  call temp:= `get`(v0, v7) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4869b8.  v0:= temp @kind object;
  #L4869ba.  v0:= (`uc.r`) v0 @kind object;
  #L4869be.  if v0 == 0 then goto L4869c4;
  #L4869c2.  return v0 @kind object;
  #L4869c4.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4869ca.  v0:= temp;
  #L4869cc.  v1:= 2I;
  #L4869ce.  v2:= 1I;
  #L4869d0.  v3:= 0I;
  #L4869d2.  if v0 == v1 then goto L486a7e;
  #L4869d6.  v1:= 3I;
  #L4869d8.  if v0 == v1 then goto L486ab6;
  #L4869dc.  v4:= 5I;
  #L4869de.  if v0 == v4 then goto L486a6c;
  #L4869e2.  v5:= 6I;
  #L4869e4.  v6:= 4I;
  #L4869e6.  if v0 == v5 then goto L486a5a;
  #L4869ea.  v5:= 7I;
  #L4869ec.  if v0 == v5 then goto L486a40;
  #L4869f0.  v1:= 9I;
  #L4869f4.  if v0 != v1 then goto L486a12;
  #L4869f8.  call temp:= `a0`(v7, v2, v3) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L4869fe.  v0:= temp;
  #L486a00.  call temp:= `a0`(v7, v6, v2) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L486a06.  v1:= temp;
  #L486a08.  call temp:= `a0`(v7, v5, v2) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L486a0e.  v2:= temp;
  #L486a10.  goto L486ac2;
  #L486a12.  v0:= new `uc.b`;
  #L486a16.  v1:= new `java.lang.StringBuilder`;
  #L486a1a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L486a20.  v2:= "Invalid ID for ZoneOffset, invalid format: " @kind object;
  #L486a24.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486a2a.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486a30.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L486a36.  v7:= temp @kind object;
  #L486a38.  call `<init>`(v0, v7) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486a3e.  throw v0;
  #L486a40.  call temp:= `a0`(v7, v2, v3) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L486a46.  v0:= temp;
  #L486a48.  call temp:= `a0`(v7, v1, v3) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L486a4e.  v1:= temp;
  #L486a50.  call temp:= `a0`(v7, v4, v3) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L486a56.  v2:= temp;
  #L486a58.  goto L486ac2;
  #L486a5a.  call temp:= `a0`(v7, v2, v3) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L486a60.  v0:= temp;
  #L486a62.  call temp:= `a0`(v7, v6, v2) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L486a68.  v1:= temp;
  #L486a6a.  goto L486ac0;
  #L486a6c.  call temp:= `a0`(v7, v2, v3) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L486a72.  v0:= temp;
  #L486a74.  call temp:= `a0`(v7, v1, v3) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L486a7a.  v1:= temp;
  #L486a7c.  goto L486ac0;
  #L486a7e.  v0:= new `java.lang.StringBuilder`;
  #L486a82.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L486a88.  call temp:= `charAt`(v7, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L486a8e.  v1:= temp;
  #L486a90.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L486a96.  v1:= "0" @kind object;
  #L486a9a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486aa0.  call temp:= `charAt`(v7, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L486aa6.  v7:= temp;
  #L486aa8.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L486aae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L486ab4.  v7:= temp @kind object;
  #L486ab6.  call temp:= `a0`(v7, v2, v3) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L486abc.  v0:= temp;
  #L486abe.  v1:= 0I;
  #L486ac0.  v2:= 0I;
  #L486ac2.  call temp:= `charAt`(v7, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L486ac8.  v3:= temp;
  #L486aca.  v4:= 43I;
  #L486ace.  v5:= 45I;
  #L486ad2.  if v3 == v4 then goto L486b0a;
  #L486ad6.  if v3 != v5 then goto L486adc;
  #L486ada.  goto L486b0a;
  #L486adc.  v0:= new `uc.b`;
  #L486ae0.  v1:= new `java.lang.StringBuilder`;
  #L486ae4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L486aea.  v2:= "Invalid ID for ZoneOffset, plus/minus not found when expected: " @kind object;
  #L486aee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486af4.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486afa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L486b00.  v7:= temp @kind object;
  #L486b02.  call `<init>`(v0, v7) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486b08.  throw v0;
  #L486b0a.  if v3 != v5 then goto L486b1e;
  #L486b0e.  v7:= -v0 @kind int;
  #L486b10.  v0:= -v1 @kind int;
  #L486b12.  v1:= -v2 @kind int;
  #L486b14.  call temp:= `V`(v7, v0, v1) @signature `Luc/r;.V:(III)Luc/r;` @kind static;
  #L486b1a.  v7:= temp @kind object;
  #L486b1c.  return v7 @kind object;
  #L486b1e.  call temp:= `V`(v0, v1, v2) @signature `Luc/r;.V:(III)Luc/r;` @kind static;
  #L486b24.  v7:= temp @kind object;
  #L486b26.  return v7 @kind object;
}
procedure `uc.r` `V`(`int` v0 , `int` v1 , `int` v2 ) @signature `Luc/r;.V:(III)Luc/r;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L486b38.  call `d0`(v0, v1, v2) @signature `Luc/r;.d0:(III)V` @kind static;
  #L486b3e.  call temp:= `c0`(v0, v1, v2) @signature `Luc/r;.c0:(III)I` @kind static;
  #L486b44.  v0:= temp;
  #L486b46.  call temp:= `X`(v0) @signature `Luc/r;.X:(I)Luc/r;` @kind static;
  #L486b4c.  v0:= temp @kind object;
  #L486b4e.  return v0 @kind object;
}
procedure `uc.r` `X`(`int` v3 ) @signature `Luc/r;.X:(I)Luc/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L486b60.  call temp:= `abs`(v3) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L486b66.  v0:= temp;
  #L486b68.  v1:= 64800I;
  #L486b6e.  if v0 > v1 then goto L486bd4;
  #L486b72.  v0:= v3 %% 900;
  #L486b76.  if v0 != 0 then goto L486bc8;
  #L486b7a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L486b80.  v0:= temp @kind object;
  #L486b82.  v1:= `@@uc.r.q` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L486b86.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L486b8c.  v2:= temp @kind object;
  #L486b8e.  v2:= (`uc.r`) v2 @kind object;
  #L486b92.  if v2 != 0 then goto L486bc6;
  #L486b96.  v2:= new `uc.r`;
  #L486b9a.  call `<init>`(v2, v3) @signature `Luc/r;.<init>:(I)V` @kind direct;
  #L486ba0.  call temp:= `putIfAbsent`(v1, v0, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L486ba6.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L486bac.  v3:= temp @kind object;
  #L486bae.  v2:= v3 @kind object;
  #L486bb0.  v2:= (`uc.r`) v2 @kind object;
  #L486bb4.  v3:= `@@uc.r.r` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L486bb8.  call temp:= `e`(v2) @signature `Luc/r;.e:()Ljava/lang/String;` @kind virtual;
  #L486bbe.  v0:= temp @kind object;
  #L486bc0.  call temp:= `putIfAbsent`(v3, v0, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L486bc6.  return v2 @kind object;
  #L486bc8.  v0:= new `uc.r`;
  #L486bcc.  call `<init>`(v0, v3) @signature `Luc/r;.<init>:(I)V` @kind direct;
  #L486bd2.  return v0 @kind object;
  #L486bd4.  v3:= new `uc.b`;
  #L486bd8.  v0:= "Zone offset not in valid range: -18:00 to +18:00" @kind object;
  #L486bdc.  call `<init>`(v3, v0) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486be2.  throw v3;
}
procedure `int` `a0`(`java.lang.CharSequence` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Luc/r;.a0:(Ljava/lang/CharSequence;IZ)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L486654.  if v4 == 0 then goto L48669c;
  #L486658.  v4:= v3 + -1;
  #L48665c.  call temp:= `charAt`(v2, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L486662.  v4:= temp;
  #L486664.  v0:= 58I;
  #L486668.  if v4 != v0 then goto L48666e;
  #L48666c.  goto L48669c;
  #L48666e.  v3:= new `uc.b`;
  #L486672.  v4:= new `java.lang.StringBuilder`;
  #L486676.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48667c.  v0:= "Invalid ID for ZoneOffset, colon not found when expected: " @kind object;
  #L486680.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486686.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48668c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L486692.  v2:= temp @kind object;
  #L486694.  call `<init>`(v3, v2) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48669a.  throw v3;
  #L48669c.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4866a2.  v4:= temp;
  #L4866a4.  v3:= v3 + 1;
  #L4866a8.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4866ae.  v3:= temp;
  #L4866b0.  v0:= 48I;
  #L4866b4.  if v4 < v0 then goto L4866d4;
  #L4866b8.  v1:= 57I;
  #L4866bc.  if v4 > v1 then goto L4866d4;
  #L4866c0.  if v3 < v0 then goto L4866d4;
  #L4866c4.  if v3 > v1 then goto L4866d4;
  #L4866c8.  v4:= v4 - v0 @kind int;
  #L4866ca.  v4:= v4 * 10;
  #L4866ce.  v3:= v3 - v0 @kind int;
  #L4866d0.  v4:= v4 + v3 @kind int;
  #L4866d2.  return v4;
  #L4866d4.  v3:= new `uc.b`;
  #L4866d8.  v4:= new `java.lang.StringBuilder`;
  #L4866dc.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4866e2.  v0:= "Invalid ID for ZoneOffset, non numeric characters found: " @kind object;
  #L4866e6.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4866ec.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4866f2.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4866f8.  v2:= temp @kind object;
  #L4866fa.  call `<init>`(v3, v2) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486700.  throw v3;
}
procedure `uc.r` `b0`(`java.io.DataInput` v2 @kind object) @signature `Luc/r;.b0:(Ljava/io/DataInput;)Luc/r;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L486bf4.  call temp:= `readByte`(v2) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L486bfa.  v0:= temp;
  #L486bfc.  v1:= 127I;
  #L486c00.  if v0 != v1 then goto L486c16;
  #L486c04.  call temp:= `readInt`(v2) @signature `Ljava/io/DataInput;.readInt:()I` @kind interface;
  #L486c0a.  v2:= temp;
  #L486c0c.  call temp:= `X`(v2) @signature `Luc/r;.X:(I)Luc/r;` @kind static;
  #L486c12.  v2:= temp @kind object;
  #L486c14.  goto L486c22;
  #L486c16.  v0:= v0 * 900;
  #L486c1a.  call temp:= `X`(v0) @signature `Luc/r;.X:(I)Luc/r;` @kind static;
  #L486c20.  v2:= temp @kind object;
  #L486c22.  return v2 @kind object;
}
procedure `int` `c0`(`int` v0 , `int` v1 , `int` v2 ) @signature `Luc/r;.c0:(III)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L486714.  v0:= v0 * 3600;
  #L486718.  v1:= v1 * 60;
  #L48671c.  v0:= v0 + v1 @kind int;
  #L48671e.  v0:= v0 + v2 @kind int;
  #L486720.  return v0;
}
procedure `void` `d0`(`int` v4 , `int` v5 , `int` v6 ) @signature `Luc/r;.d0:(III)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L486cd0.  v0:= -18I;
  #L486cd4.  if v4 < v0 then goto L486e0e;
  #L486cd8.  v0:= 18I;
  #L486cdc.  if v4 > v0 then goto L486e0e;
  #L486ce0.  if v4 <= 0 then goto L486cfe;
  #L486ce4.  if v5 < 0 then goto L486cee;
  #L486ce8.  if v6 < 0 then goto L486cee;
  #L486cec.  goto L486d3e;
  #L486cee.  v4:= new `uc.b`;
  #L486cf2.  v5:= "Zone offset minutes and seconds must be positive because hours is positive" @kind object;
  #L486cf6.  call `<init>`(v4, v5) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486cfc.  throw v4;
  #L486cfe.  if v4 >= 0 then goto L486d1c;
  #L486d02.  if v5 > 0 then goto L486d0c;
  #L486d06.  if v6 > 0 then goto L486d0c;
  #L486d0a.  goto L486d3e;
  #L486d0c.  v4:= new `uc.b`;
  #L486d10.  v5:= "Zone offset minutes and seconds must be negative because hours is negative" @kind object;
  #L486d14.  call `<init>`(v4, v5) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486d1a.  throw v4;
  #L486d1c.  if v5 <= 0 then goto L486d24;
  #L486d20.  if v6 < 0 then goto L486d2e;
  #L486d24.  if v5 >= 0 then goto L486d3e;
  #L486d28.  if v6 > 0 then goto L486d2e;
  #L486d2c.  goto L486d3e;
  #L486d2e.  v4:= new `uc.b`;
  #L486d32.  v5:= "Zone offset minutes and seconds must have the same sign" @kind object;
  #L486d36.  call `<init>`(v4, v5) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486d3c.  throw v4;
  #L486d3e.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L486d44.  v1:= temp;
  #L486d46.  v2:= " is not in the range 0 to 59" @kind object;
  #L486d4a.  v3:= 59I;
  #L486d4e.  if v1 > v3 then goto L486dd2;
  #L486d52.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L486d58.  v1:= temp;
  #L486d5a.  if v1 > v3 then goto L486d96;
  #L486d5e.  call temp:= `abs`(v4) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L486d64.  v4:= temp;
  #L486d66.  if v4 != v0 then goto L486d94;
  #L486d6a.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L486d70.  v4:= temp;
  #L486d72.  if v4 > 0 then goto L486d84;
  #L486d76.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L486d7c.  v4:= temp;
  #L486d7e.  if v4 > 0 then goto L486d84;
  #L486d82.  goto L486d94;
  #L486d84.  v4:= new `uc.b`;
  #L486d88.  v5:= "Zone offset not in valid range: -18:00 to +18:00" @kind object;
  #L486d8c.  call `<init>`(v4, v5) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486d92.  throw v4;
  #L486d94.  return @kind void;
  #L486d96.  v4:= new `uc.b`;
  #L486d9a.  v5:= new `java.lang.StringBuilder`;
  #L486d9e.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L486da4.  v0:= "Zone offset seconds not in valid range: abs(value) " @kind object;
  #L486da8.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486dae.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L486db4.  v6:= temp;
  #L486db6.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L486dbc.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486dc2.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L486dc8.  v5:= temp @kind object;
  #L486dca.  call `<init>`(v4, v5) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486dd0.  throw v4;
  #L486dd2.  v4:= new `uc.b`;
  #L486dd6.  v6:= new `java.lang.StringBuilder`;
  #L486dda.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L486de0.  v0:= "Zone offset minutes not in valid range: abs(value) " @kind object;
  #L486de4.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486dea.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L486df0.  v5:= temp;
  #L486df2.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L486df8.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486dfe.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L486e04.  v5:= temp @kind object;
  #L486e06.  call `<init>`(v4, v5) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486e0c.  throw v4;
  #L486e0e.  v5:= new `uc.b`;
  #L486e12.  v6:= new `java.lang.StringBuilder`;
  #L486e16.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L486e1c.  v0:= "Zone offset hours not in valid range: value " @kind object;
  #L486e20.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486e26.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L486e2c.  v4:= " is not in the range -18 to 18" @kind object;
  #L486e30.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486e36.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L486e3c.  v4:= temp @kind object;
  #L486e3e.  call `<init>`(v5, v4) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486e44.  throw v5;
}
procedure `java.lang.Object` `readResolve`(`uc.r` v2 @kind this) @signature `Luc/r;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4867ac.  v0:= new `java.io.InvalidObjectException`;
  #L4867b0.  v1:= "Deserialization via serialization delegate" @kind object;
  #L4867b4.  call `<init>`(v0, v1) @signature `Ljava/io/InvalidObjectException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4867ba.  throw v0;
}
procedure `java.lang.String` `v`(`int` v6 ) @signature `Luc/r;.v:(I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4867ec.  if v6 != 0 then goto L4867f6;
  #L4867f0.  v6:= "Z" @kind object;
  #L4867f4.  return v6 @kind object;
  #L4867f6.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L4867fc.  v0:= temp;
  #L4867fe.  v1:= new `java.lang.StringBuilder`;
  #L486802.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L486808.  v2:= v0 / 3600;
  #L48680c.  v3:= v0 / 60;
  #L486810.  v3:= v3 %% 60;
  #L486814.  if v6 >= 0 then goto L48681e;
  #L486818.  v6:= "-" @kind object;
  #L48681c.  goto L486822;
  #L48681e.  v6:= "+" @kind object;
  #L486822.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486828.  v6:= 10I;
  #L48682c.  if v2 >= v6 then goto L486836;
  #L486830.  v4:= "0" @kind object;
  #L486834.  goto L48683a;
  #L486836.  v4:= "" @kind object;
  #L48683a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486840.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L486846.  v2:= ":0" @kind object;
  #L48684a.  v4:= ":" @kind object;
  #L48684e.  if v3 >= v6 then goto L486856;
  #L486852.  v5:= v2 @kind object;
  #L486854.  goto L486858;
  #L486856.  v5:= v4 @kind object;
  #L486858.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48685e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L486864.  v0:= v0 %% 60;
  #L486868.  if v0 == 0 then goto L486880;
  #L48686c.  if v0 >= v6 then goto L486872;
  #L486870.  goto L486874;
  #L486872.  v2:= v4 @kind object;
  #L486874.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48687a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L486880.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L486886.  v6:= temp @kind object;
  #L486888.  return v6 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`uc.r` v2 @kind this) @signature `Luc/r;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4867cc.  v0:= new `uc.n`;
  #L4867d0.  v1:= 8I;
  #L4867d4.  call `<init>`(v0, v1, v2) @signature `Luc/n;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L4867da.  return v0 @kind object;
}
procedure `long` `B`(`uc.r` v3 @kind this, `yc.i` v4 @kind object) @signature `Luc/r;.B:(Lyc/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4868cc.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L4868d0.  if v4 != v0 then goto L4868dc;
  #L4868d4.  v4:= v3.`uc.r.o` @type ^`int`;
  #L4868d8.  v0:= (`long`) v4 @kind i2l;
  #L4868da.  return v0 @kind wide;
  #L4868dc.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4868e0.  if v0 != 0 then goto L4868ee;
  #L4868e4.  call temp:= `o`(v4, v3) @signature `Lyc/i;.o:(Lyc/e;)J` @kind interface;
  #L4868ea.  v0:= temp @kind wide;
  #L4868ec.  return v0 @kind wide;
  #L4868ee.  v0:= new `uc.b`;
  #L4868f2.  v1:= new `java.lang.StringBuilder`;
  #L4868f6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4868fc.  v2:= "Unsupported field: " @kind object;
  #L486900.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486906.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48690c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L486912.  v4:= temp @kind object;
  #L486914.  call `<init>`(v0, v4) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48691a.  throw v0;
}
procedure `int` `F`(`uc.r` v3 @kind this, `yc.i` v4 @kind object) @signature `Luc/r;.F:(Lyc/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4865b4.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L4865b8.  if v4 != v0 then goto L4865c2;
  #L4865bc.  v4:= v3.`uc.r.o` @type ^`int`;
  #L4865c0.  return v4;
  #L4865c2.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L4865c6.  if v0 != 0 then goto L4865e4;
  #L4865ca.  call temp:= `t`(v3, v4) @signature `Luc/r;.t:(Lyc/i;)Lyc/n;` @kind virtual;
  #L4865d0.  v0:= temp @kind object;
  #L4865d2.  call temp:= `B`(v3, v4) @signature `Luc/r;.B:(Lyc/i;)J` @kind virtual;
  #L4865d8.  v1:= temp @kind wide;
  #L4865da.  call temp:= `a`(v0, v1, v4) @signature `Lyc/n;.a:(JLyc/i;)I` @kind virtual;
  #L4865e0.  v4:= temp;
  #L4865e2.  return v4;
  #L4865e4.  v0:= new `yc.m`;
  #L4865e8.  v1:= new `java.lang.StringBuilder`;
  #L4865ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4865f2.  v2:= "Unsupported field: " @kind object;
  #L4865f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4865fc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486602.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L486608.  v4:= temp @kind object;
  #L48660a.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486610.  throw v0;
}
procedure `yc.d` `I`(`uc.r` v3 @kind this, `yc.d` v4 @kind object) @signature `Luc/r;.I:(Lyc/d;)Lyc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L486eb8.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L486ebc.  v1:= v3.`uc.r.o` @type ^`int`;
  #L486ec0.  v1:= (`long`) v1 @kind i2l;
  #L486ec2.  call temp:= `P`(v4, v0, v1) @signature `Lyc/d;.P:(Lyc/i;J)Lyc/d;` @kind interface;
  #L486ec8.  v4:= temp @kind object;
  #L486eca.  return v4 @kind object;
}
procedure `int` `S`(`uc.r` v1 @kind this) @signature `Luc/r;.S:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486624.  v0:= v1.`uc.r.o` @type ^`int`;
  #L486628.  return v0;
}
procedure `int` `compareTo`(`uc.r` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Luc/r;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L486578.  v1:= (`uc.r`) v1 @kind object;
  #L48657c.  call temp:= `x`(v0, v1) @signature `Luc/r;.x:(Luc/r;)I` @kind virtual;
  #L486582.  v1:= temp;
  #L486584.  return v1;
}
procedure `boolean` `d`(`uc.r` v3 @kind this, `yc.i` v4 @kind object) @signature `Luc/r;.d:(Lyc/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L486538.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L48653c.  v1:= 1I;
  #L48653e.  v2:= 0I;
  #L486540.  if v0 == 0 then goto L486552;
  #L486544.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L486548.  if v4 != v0 then goto L48654e;
  #L48654c.  goto L486550;
  #L48654e.  v1:= 0I;
  #L486550.  return v1;
  #L486552.  if v4 == 0 then goto L486564;
  #L486556.  call temp:= `j`(v4, v3) @signature `Lyc/i;.j:(Lyc/e;)Z` @kind interface;
  #L48655c.  v4:= temp;
  #L48655e.  if v4 == 0 then goto L486564;
  #L486562.  goto L486566;
  #L486564.  v1:= 0I;
  #L486566.  return v1;
}
procedure `java.lang.String` `e`(`uc.r` v1 @kind this) @signature `Luc/r;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48689c.  v0:= v1.`uc.r.p` @type ^`java.lang.String` @kind object;
  #L4868a0.  return v0 @kind object;
}
procedure `void` `e0`(`uc.r` v3 @kind this, `java.io.DataOutput` v4 @kind object) @signature `Luc/r;.e0:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L486e7c.  v0:= v3.`uc.r.o` @type ^`int`;
  #L486e80.  v1:= v0 %% 900;
  #L486e84.  v2:= 127I;
  #L486e88.  if v1 != 0 then goto L486e92;
  #L486e8c.  v1:= v0 / 900;
  #L486e90.  goto L486e96;
  #L486e92.  v1:= 127I;
  #L486e96.  call `writeByte`(v4, v1) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L486e9c.  if v1 != v2 then goto L486ea6;
  #L486ea0.  call `writeInt`(v4, v0) @signature `Ljava/io/DataOutput;.writeInt:(I)V` @kind interface;
  #L486ea6.  return @kind void;
}
procedure `boolean` `equals`(`uc.r` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Luc/r;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4864fc.  v0:= 1I;
  #L4864fe.  if v3 != v4 then goto L486504;
  #L486502.  return v0;
  #L486504.  v1:= instanceof @variable v4 @type ^`uc.r` @kind boolean;
  #L486508.  v2:= 0I;
  #L48650a.  if v1 == 0 then goto L486524;
  #L48650e.  v1:= v3.`uc.r.o` @type ^`int`;
  #L486512.  v4:= (`uc.r`) v4 @kind object;
  #L486516.  v4:= v4.`uc.r.o` @type ^`int`;
  #L48651a.  if v1 != v4 then goto L486520;
  #L48651e.  goto L486522;
  #L486520.  v0:= 0I;
  #L486522.  return v0;
  #L486524.  return v2;
}
procedure `zc.f` `h`(`uc.r` v1 @kind this) @signature `Luc/r;.h:()Lzc/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486f40.  call temp:= `f`(v1) @signature `Lzc/f;.f:(Luc/r;)Lzc/f;` @kind static;
  #L486f46.  v0:= temp @kind object;
  #L486f48.  return v0 @kind object;
}
procedure `int` `hashCode`(`uc.r` v1 @kind this) @signature `Luc/r;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48663c.  v0:= v1.`uc.r.o` @type ^`int`;
  #L486640.  return v0;
}
procedure `java.lang.Object` `j`(`uc.r` v1 @kind this, `yc.k` v2 @kind object) @signature `Luc/r;.j:(Lyc/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486734.  call temp:= `d`() @signature `Lyc/j;.d:()Lyc/k;` @kind static;
  #L48673a.  v0:= temp @kind object;
  #L48673c.  if v2 == v0 then goto L48679a;
  #L486740.  call temp:= `f`() @signature `Lyc/j;.f:()Lyc/k;` @kind static;
  #L486746.  v0:= temp @kind object;
  #L486748.  if v2 != v0 then goto L48674e;
  #L48674c.  goto L48679a;
  #L48674e.  call temp:= `b`() @signature `Lyc/j;.b:()Lyc/k;` @kind static;
  #L486754.  v0:= temp @kind object;
  #L486756.  if v2 == v0 then goto L486796;
  #L48675a.  call temp:= `c`() @signature `Lyc/j;.c:()Lyc/k;` @kind static;
  #L486760.  v0:= temp @kind object;
  #L486762.  if v2 == v0 then goto L486796;
  #L486766.  call temp:= `e`() @signature `Lyc/j;.e:()Lyc/k;` @kind static;
  #L48676c.  v0:= temp @kind object;
  #L48676e.  if v2 == v0 then goto L486796;
  #L486772.  call temp:= `a`() @signature `Lyc/j;.a:()Lyc/k;` @kind static;
  #L486778.  v0:= temp @kind object;
  #L48677a.  if v2 == v0 then goto L486796;
  #L48677e.  call temp:= `g`() @signature `Lyc/j;.g:()Lyc/k;` @kind static;
  #L486784.  v0:= temp @kind object;
  #L486786.  if v2 != v0 then goto L48678c;
  #L48678a.  goto L486796;
  #L48678c.  call temp:= `a`(v2, v1) @signature `Lyc/k;.a:(Lyc/e;)Ljava/lang/Object;` @kind interface;
  #L486792.  v2:= temp @kind object;
  #L486794.  return v2 @kind object;
  #L486796.  v2:= 0I;
  #L486798.  return v2 @kind object;
  #L48679a.  return v1 @kind object;
}
procedure `void` `s`(`uc.r` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Luc/r;.s:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L486e58.  v0:= 8I;
  #L486e5c.  call `writeByte`(v2, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L486e62.  call `e0`(v1, v2) @signature `Luc/r;.e0:(Ljava/io/DataOutput;)V` @kind virtual;
  #L486e68.  return @kind void;
}
procedure `yc.n` `t`(`uc.r` v3 @kind this, `yc.i` v4 @kind object) @signature `Luc/r;.t:(Lyc/i;)Lyc/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L486edc.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L486ee0.  if v4 != v0 then goto L486eee;
  #L486ee4.  call temp:= `k`(v4) @signature `Lyc/i;.k:()Lyc/n;` @kind interface;
  #L486eea.  v4:= temp @kind object;
  #L486eec.  return v4 @kind object;
  #L486eee.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L486ef2.  if v0 != 0 then goto L486f00;
  #L486ef6.  call temp:= `h`(v4, v3) @signature `Lyc/i;.h:(Lyc/e;)Lyc/n;` @kind interface;
  #L486efc.  v4:= temp @kind object;
  #L486efe.  return v4 @kind object;
  #L486f00.  v0:= new `yc.m`;
  #L486f04.  v1:= new `java.lang.StringBuilder`;
  #L486f08.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L486f0e.  v2:= "Unsupported field: " @kind object;
  #L486f12.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486f18.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L486f1e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L486f24.  v4:= temp @kind object;
  #L486f26.  call `<init>`(v0, v4) @signature `Lyc/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486f2c.  throw v0;
}
procedure `java.lang.String` `toString`(`uc.r` v1 @kind this) @signature `Luc/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4868b4.  v0:= v1.`uc.r.p` @type ^`java.lang.String` @kind object;
  #L4868b8.  return v0 @kind object;
}
procedure `int` `x`(`uc.r` v1 @kind this, `uc.r` v2 @kind object) @signature `Luc/r;.x:(Luc/r;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486598.  v2:= v2.`uc.r.o` @type ^`int`;
  #L48659c.  v0:= v1.`uc.r.o` @type ^`int`;
  #L4865a0.  v2:= v2 - v0 @kind int;
  #L4865a2.  return v2;
}
