record `uc.l` @kind class @AccessFlag PUBLIC_FINAL extends `xc.c` @kind class, `yc.d` @kind interface, `yc.f` @kind interface, `java.lang.Comparable` @kind interface, `java.io.Serializable` @kind interface {
  `uc.h` `uc.l.o` @AccessFlag PRIVATE_FINAL;
  `uc.r` `uc.l.p` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Luc/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4841b0.  v0:= `@@uc.h.s` @type ^`uc.h` @kind object;
  #L4841b4.  v1:= `@@uc.r.u` @type ^`uc.r` @kind object;
  #L4841b8.  call temp:= `T`(v0, v1) @signature `Luc/h;.T:(Luc/r;)Luc/l;` @kind virtual;
  #L4841be.  v0:= `@@uc.h.t` @type ^`uc.h` @kind object;
  #L4841c2.  v1:= `@@uc.r.t` @type ^`uc.r` @kind object;
  #L4841c6.  call temp:= `T`(v0, v1) @signature `Luc/h;.T:(Luc/r;)Luc/l;` @kind virtual;
  #L4841cc.  v0:= new `uc.l$a`;
  #L4841d0.  call `<init>`(v0) @signature `Luc/l$a;.<init>:()V` @kind direct;
  #L4841d6.  return @kind void;
}
procedure `void` `<init>`(`uc.l` v1 @kind this, `uc.h` v2 @kind object, `uc.r` v3 @kind object) @signature `Luc/l;.<init>:(Luc/h;Luc/r;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4841e8.  call `<init>`(v1) @signature `Lxc/c;.<init>:()V` @kind direct;
  #L4841ee.  v0:= "time" @kind object;
  #L4841f2.  call temp:= `i`(v2, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4841f8.  v2:= temp @kind object;
  #L4841fa.  v2:= (`uc.h`) v2 @kind object;
  #L4841fe.  v1.`uc.l.o` @type ^`uc.h` := v2 @kind object;
  #L484202.  v2:= "offset" @kind object;
  #L484206.  call temp:= `i`(v3, v2) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48420c.  v2:= temp @kind object;
  #L48420e.  v2:= (`uc.r`) v2 @kind object;
  #L484212.  v1.`uc.l.p` @type ^`uc.r` := v2 @kind object;
  #L484216.  return @kind void;
}
procedure `uc.l` `V`(`yc.e` v3 @kind object) @signature `Luc/l;.V:(Lyc/e;)Luc/l;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L483f2c.  v0:= instanceof @variable v3 @type ^`uc.l` @kind boolean;
  #L483f30.  if v0 == 0 then goto L483f3a;
  #L483f34.  v3:= (`uc.l`) v3 @kind object;
  #L483f38.  return v3 @kind object;
  #L483f3a.  call temp:= `a0`(v3) @signature `Luc/h;.a0:(Lyc/e;)Luc/h;` @kind static;
  #L483f40.  v0:= temp @kind object;
  #L483f42.  call temp:= `K`(v3) @signature `Luc/r;.K:(Lyc/e;)Luc/r;` @kind static;
  #L483f48.  v1:= temp @kind object;
  #L483f4a.  v2:= new `uc.l`;
  #L483f4e.  call `<init>`(v2, v0, v1) @signature `Luc/l;.<init>:(Luc/h;Luc/r;)V` @kind direct;
  #L483f54.  return v2 @kind object;
  #L483f56.  v0:= new `uc.b`;
  #L483f5a.  v1:= new `java.lang.StringBuilder`;
  #L483f5e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L483f64.  v2:= "Unable to obtain OffsetTime from TemporalAccessor: " @kind object;
  #L483f68.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L483f6e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L483f74.  v2:= ", type " @kind object;
  #L483f78.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L483f7e.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L483f84.  v3:= temp @kind object;
  #L483f86.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L483f8c.  v3:= temp @kind object;
  #L483f8e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L483f94.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L483f9a.  v3:= temp @kind object;
  #L483f9c.  call `<init>`(v0, v3) @signature `Luc/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L483fa2.  throw v0;
  catch `uc.b` @[L483f3a..L483f54] goto L483f56;
}
procedure `uc.l` `b0`(`uc.h` v1 @kind object, `uc.r` v2 @kind object) @signature `Luc/l;.b0:(Luc/h;Luc/r;)Luc/l;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48400c.  v0:= new `uc.l`;
  #L484010.  call `<init>`(v0, v1, v2) @signature `Luc/l;.<init>:(Luc/h;Luc/r;)V` @kind direct;
  #L484016.  return v0 @kind object;
}
procedure `uc.l` `d0`(`java.io.DataInput` v1 @kind object) @signature `Luc/l;.d0:(Ljava/io/DataInput;)Luc/l;` @AccessFlag STATIC {
    temp;
    v0;

  #L484068.  call temp:= `s0`(v1) @signature `Luc/h;.s0:(Ljava/io/DataInput;)Luc/h;` @kind static;
  #L48406e.  v0:= temp @kind object;
  #L484070.  call temp:= `b0`(v1) @signature `Luc/r;.b0:(Ljava/io/DataInput;)Luc/r;` @kind static;
  #L484076.  v1:= temp @kind object;
  #L484078.  call temp:= `b0`(v0, v1) @signature `Luc/l;.b0:(Luc/h;Luc/r;)Luc/l;` @kind static;
  #L48407e.  v1:= temp @kind object;
  #L484080.  return v1 @kind object;
}
procedure `long` `e0`(`uc.l` v6 @kind this) @signature `Luc/l;.e0:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L483ef4.  v0:= v6.`uc.l.o` @type ^`uc.h` @kind object;
  #L483ef8.  call temp:= `t0`(v0) @signature `Luc/h;.t0:()J` @kind virtual;
  #L483efe.  v0:= temp @kind wide;
  #L483f00.  v2:= v6.`uc.l.p` @type ^`uc.r` @kind object;
  #L483f04.  call temp:= `S`(v2) @signature `Luc/r;.S:()I` @kind virtual;
  #L483f0a.  v2:= temp;
  #L483f0c.  v2:= (`long`) v2 @kind i2l;
  #L483f0e.  v4:= 1000000000L;
  #L483f14.  v2:= v2 * v4 @kind long;
  #L483f18.  v0:= v0 - v2 @kind long;
  #L483f1a.  return v0 @kind wide;
}
procedure `uc.l` `f0`(`uc.l` v1 @kind this, `uc.h` v2 @kind object, `uc.r` v3 @kind object) @signature `Luc/l;.f0:(Luc/h;Luc/r;)Luc/l;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L484094.  v0:= v1.`uc.l.o` @type ^`uc.h` @kind object;
  #L484098.  if v0 != v2 then goto L4840ae;
  #L48409c.  v0:= v1.`uc.l.p` @type ^`uc.r` @kind object;
  #L4840a0.  call temp:= `equals`(v0, v3) @signature `Luc/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4840a6.  v0:= temp;
  #L4840a8.  if v0 == 0 then goto L4840ae;
  #L4840ac.  return v1 @kind object;
  #L4840ae.  v0:= new `uc.l`;
  #L4840b2.  call `<init>`(v0, v2, v3) @signature `Luc/l;.<init>:(Luc/h;Luc/r;)V` @kind direct;
  #L4840b8.  return v0 @kind object;
}
procedure `java.lang.Object` `readResolve`(`uc.l` v2 @kind this) @signature `Luc/l;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L483e20.  v0:= new `java.io.InvalidObjectException`;
  #L483e24.  v1:= "Deserialization via serialization delegate" @kind object;
  #L483e28.  call `<init>`(v0, v1) @signature `Ljava/io/InvalidObjectException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L483e2e.  throw v0;
}
procedure `java.lang.Object` `writeReplace`(`uc.l` v2 @kind this) @signature `Luc/l;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L483e40.  v0:= new `uc.n`;
  #L483e44.  v1:= 66I;
  #L483e48.  call `<init>`(v0, v1, v2) @signature `Luc/n;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L483e4e.  return v0 @kind object;
}
procedure `long` `B`(`uc.l` v2 @kind this, `yc.i` v3 @kind object) @signature `Luc/l;.B:(Lyc/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L483ea8.  v0:= instanceof @variable v3 @type ^`yc.a` @kind boolean;
  #L483eac.  if v0 == 0 then goto L483eda;
  #L483eb0.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L483eb4.  if v3 != v0 then goto L483ecc;
  #L483eb8.  call temp:= `X`(v2) @signature `Luc/l;.X:()Luc/r;` @kind virtual;
  #L483ebe.  v3:= temp @kind object;
  #L483ec0.  call temp:= `S`(v3) @signature `Luc/r;.S:()I` @kind virtual;
  #L483ec6.  v3:= temp;
  #L483ec8.  v0:= (`long`) v3 @kind i2l;
  #L483eca.  return v0 @kind wide;
  #L483ecc.  v0:= v2.`uc.l.o` @type ^`uc.h` @kind object;
  #L483ed0.  call temp:= `B`(v0, v3) @signature `Luc/h;.B:(Lyc/i;)J` @kind virtual;
  #L483ed6.  v0:= temp @kind wide;
  #L483ed8.  return v0 @kind wide;
  #L483eda.  call temp:= `o`(v3, v2) @signature `Lyc/i;.o:(Lyc/e;)J` @kind interface;
  #L483ee0.  v0:= temp @kind wide;
  #L483ee2.  return v0 @kind wide;
}
procedure `yc.d` `D`(`uc.l` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Luc/l;.D:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4842b4.  call temp:= `c0`(v0, v1, v3) @signature `Luc/l;.c0:(JLyc/l;)Luc/l;` @kind virtual;
  #L4842ba.  v1:= temp @kind object;
  #L4842bc.  return v1 @kind object;
}
procedure `int` `F`(`uc.l` v0 @kind this, `yc.i` v1 @kind object) @signature `Luc/l;.F:(Lyc/i;)I` @AccessFlag PUBLIC {
    temp;

  #L483d4c.  call temp:= `F`(v0, v1) @signature `Lxc/c;.F:(Lyc/i;)I` @kind super;
  #L483d52.  v1:= temp;
  #L483d54.  return v1;
}
procedure `yc.d` `I`(`uc.l` v3 @kind this, `yc.d` v4 @kind object) @signature `Luc/l;.I:(Lyc/d;)Lyc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L484250.  v0:= `@@yc.a.t` @type ^`yc.a` @kind object;
  #L484254.  v1:= v3.`uc.l.o` @type ^`uc.h` @kind object;
  #L484258.  call temp:= `t0`(v1) @signature `Luc/h;.t0:()J` @kind virtual;
  #L48425e.  v1:= temp @kind wide;
  #L484260.  call temp:= `P`(v4, v0, v1) @signature `Lyc/d;.P:(Lyc/i;J)Lyc/d;` @kind interface;
  #L484266.  v4:= temp @kind object;
  #L484268.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L48426c.  call temp:= `X`(v3) @signature `Luc/l;.X:()Luc/r;` @kind virtual;
  #L484272.  v1:= temp @kind object;
  #L484274.  call temp:= `S`(v1) @signature `Luc/r;.S:()I` @kind virtual;
  #L48427a.  v1:= temp;
  #L48427c.  v1:= (`long`) v1 @kind i2l;
  #L48427e.  call temp:= `P`(v4, v0, v1) @signature `Lyc/d;.P:(Lyc/i;J)Lyc/d;` @kind interface;
  #L484284.  v4:= temp @kind object;
  #L484286.  return v4 @kind object;
}
procedure `yc.d` `L`(`uc.l` v0 @kind this, `yc.f` v1 @kind object) @signature `Luc/l;.L:(Lyc/f;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4842d0.  call temp:= `g0`(v0, v1) @signature `Luc/l;.g0:(Lyc/f;)Luc/l;` @kind virtual;
  #L4842d6.  v1:= temp @kind object;
  #L4842d8.  return v1 @kind object;
}
procedure `yc.d` `P`(`uc.l` v0 @kind this, `yc.i` v1 @kind object, `long` v2 ) @signature `Luc/l;.P:(Lyc/i;J)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4842ec.  call temp:= `h0`(v0, v1, v2) @signature `Luc/l;.h0:(Lyc/i;J)Luc/l;` @kind virtual;
  #L4842f2.  v1:= temp @kind object;
  #L4842f4.  return v1 @kind object;
}
procedure `int` `T`(`uc.l` v4 @kind this, `uc.l` v5 @kind object) @signature `Luc/l;.T:(Luc/l;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L483ce8.  v0:= v4.`uc.l.p` @type ^`uc.r` @kind object;
  #L483cec.  v1:= v5.`uc.l.p` @type ^`uc.r` @kind object;
  #L483cf0.  call temp:= `equals`(v0, v1) @signature `Luc/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L483cf6.  v0:= temp;
  #L483cf8.  if v0 == 0 then goto L483d0e;
  #L483cfc.  v0:= v4.`uc.l.o` @type ^`uc.h` @kind object;
  #L483d00.  v5:= v5.`uc.l.o` @type ^`uc.h` @kind object;
  #L483d04.  call temp:= `V`(v0, v5) @signature `Luc/h;.V:(Luc/h;)I` @kind virtual;
  #L483d0a.  v5:= temp;
  #L483d0c.  return v5;
  #L483d0e.  call temp:= `e0`(v4) @signature `Luc/l;.e0:()J` @kind direct;
  #L483d14.  v0:= temp @kind wide;
  #L483d16.  call temp:= `e0`(v5) @signature `Luc/l;.e0:()J` @kind direct;
  #L483d1c.  v2:= temp @kind wide;
  #L483d1e.  call temp:= `b`(v0, v2) @signature `Lxc/d;.b:(JJ)I` @kind static;
  #L483d24.  v0:= temp;
  #L483d26.  if v0 != 0 then goto L483d3a;
  #L483d2a.  v0:= v4.`uc.l.o` @type ^`uc.h` @kind object;
  #L483d2e.  v5:= v5.`uc.l.o` @type ^`uc.h` @kind object;
  #L483d32.  call temp:= `V`(v0, v5) @signature `Luc/h;.V:(Luc/h;)I` @kind virtual;
  #L483d38.  v0:= temp;
  #L483d3a.  return v0;
}
procedure `uc.r` `X`(`uc.l` v1 @kind this) @signature `Luc/l;.X:()Luc/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L484198.  v0:= v1.`uc.l.p` @type ^`uc.r` @kind object;
  #L48419c.  return v0 @kind object;
}
procedure `uc.l` `a0`(`uc.l` v3 @kind this, `long` v4 , `yc.l` v6 @kind object) @signature `Luc/l;.a0:(JLyc/l;)Luc/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L483fc4.  v0:= -9223372036854775808L;
  #L483fc8.  v2:= lcmp(v4, v0);
  #L483fcc.  if v2 != 0 then goto L483ff0;
  #L483fd0.  v4:= 9223372036854775807L;
  #L483fda.  call temp:= `c0`(v3, v4, v6) @signature `Luc/l;.c0:(JLyc/l;)Luc/l;` @kind virtual;
  #L483fe0.  v4:= temp @kind object;
  #L483fe2.  v0:= 1L;
  #L483fe6.  call temp:= `c0`(v4, v0, v6) @signature `Luc/l;.c0:(JLyc/l;)Luc/l;` @kind virtual;
  #L483fec.  v4:= temp @kind object;
  #L483fee.  goto L483ffa;
  #L483ff0.  v4:= -v4 @kind long;
  #L483ff2.  call temp:= `c0`(v3, v4, v6) @signature `Luc/l;.c0:(JLyc/l;)Luc/l;` @kind virtual;
  #L483ff8.  v4:= temp @kind object;
  #L483ffa.  return v4 @kind object;
}
procedure `uc.l` `c0`(`uc.l` v1 @kind this, `long` v2 , `yc.l` v4 @kind object) @signature `Luc/l;.c0:(JLyc/l;)Luc/l;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L484028.  v0:= instanceof @variable v4 @type ^`yc.b` @kind boolean;
  #L48402c.  if v0 == 0 then goto L48404a;
  #L484030.  v0:= v1.`uc.l.o` @type ^`uc.h` @kind object;
  #L484034.  call temp:= `n0`(v0, v2, v4) @signature `Luc/h;.n0:(JLyc/l;)Luc/h;` @kind virtual;
  #L48403a.  v2:= temp @kind object;
  #L48403c.  v3:= v1.`uc.l.p` @type ^`uc.r` @kind object;
  #L484040.  call temp:= `f0`(v1, v2, v3) @signature `Luc/l;.f0:(Luc/h;Luc/r;)Luc/l;` @kind direct;
  #L484046.  v2:= temp @kind object;
  #L484048.  return v2 @kind object;
  #L48404a.  call temp:= `d`(v4, v1, v2) @signature `Lyc/l;.d:(Lyc/d;J)Lyc/d;` @kind interface;
  #L484050.  v2:= temp @kind object;
  #L484052.  v2:= (`uc.l`) v2 @kind object;
  #L484056.  return v2 @kind object;
}
procedure `int` `compareTo`(`uc.l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Luc/l;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L483cc8.  v1:= (`uc.l`) v1 @kind object;
  #L483ccc.  call temp:= `T`(v0, v1) @signature `Luc/l;.T:(Luc/l;)I` @kind virtual;
  #L483cd2.  v1:= temp;
  #L483cd4.  return v1;
}
procedure `boolean` `d`(`uc.l` v3 @kind this, `yc.i` v4 @kind object) @signature `Luc/l;.d:(Lyc/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L483c7c.  v0:= instanceof @variable v4 @type ^`yc.a` @kind boolean;
  #L483c80.  v1:= 1I;
  #L483c82.  v2:= 0I;
  #L483c84.  if v0 == 0 then goto L483ca2;
  #L483c88.  call temp:= `i`(v4) @signature `Lyc/i;.i:()Z` @kind interface;
  #L483c8e.  v0:= temp;
  #L483c90.  if v0 != 0 then goto L483ca0;
  #L483c94.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L483c98.  if v4 != v0 then goto L483c9e;
  #L483c9c.  goto L483ca0;
  #L483c9e.  v1:= 0I;
  #L483ca0.  return v1;
  #L483ca2.  if v4 == 0 then goto L483cb4;
  #L483ca6.  call temp:= `j`(v4, v3) @signature `Lyc/i;.j:(Lyc/e;)Z` @kind interface;
  #L483cac.  v4:= temp;
  #L483cae.  if v4 == 0 then goto L483cb4;
  #L483cb2.  goto L483cb6;
  #L483cb4.  v1:= 0I;
  #L483cb6.  return v1;
}
procedure `boolean` `equals`(`uc.l` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Luc/l;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L483c24.  v0:= 1I;
  #L483c26.  if v4 != v5 then goto L483c2c;
  #L483c2a.  return v0;
  #L483c2c.  v1:= instanceof @variable v5 @type ^`uc.l` @kind boolean;
  #L483c30.  v2:= 0I;
  #L483c32.  if v1 == 0 then goto L483c68;
  #L483c36.  v5:= (`uc.l`) v5 @kind object;
  #L483c3a.  v1:= v4.`uc.l.o` @type ^`uc.h` @kind object;
  #L483c3e.  v3:= v5.`uc.l.o` @type ^`uc.h` @kind object;
  #L483c42.  call temp:= `equals`(v1, v3) @signature `Luc/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L483c48.  v1:= temp;
  #L483c4a.  if v1 == 0 then goto L483c64;
  #L483c4e.  v1:= v4.`uc.l.p` @type ^`uc.r` @kind object;
  #L483c52.  v5:= v5.`uc.l.p` @type ^`uc.r` @kind object;
  #L483c56.  call temp:= `equals`(v1, v5) @signature `Luc/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L483c5c.  v5:= temp;
  #L483c5e.  if v5 == 0 then goto L483c64;
  #L483c62.  goto L483c66;
  #L483c64.  v0:= 0I;
  #L483c66.  return v0;
  #L483c68.  return v2;
}
procedure `uc.l` `g0`(`uc.l` v1 @kind this, `yc.f` v2 @kind object) @signature `Luc/l;.g0:(Lyc/f;)Luc/l;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4840cc.  v0:= instanceof @variable v2 @type ^`uc.h` @kind boolean;
  #L4840d0.  if v0 == 0 then goto L4840e6;
  #L4840d4.  v2:= (`uc.h`) v2 @kind object;
  #L4840d8.  v0:= v1.`uc.l.p` @type ^`uc.r` @kind object;
  #L4840dc.  call temp:= `f0`(v1, v2, v0) @signature `Luc/l;.f0:(Luc/h;Luc/r;)Luc/l;` @kind direct;
  #L4840e2.  v2:= temp @kind object;
  #L4840e4.  return v2 @kind object;
  #L4840e6.  v0:= instanceof @variable v2 @type ^`uc.r` @kind boolean;
  #L4840ea.  if v0 == 0 then goto L484100;
  #L4840ee.  v0:= v1.`uc.l.o` @type ^`uc.h` @kind object;
  #L4840f2.  v2:= (`uc.r`) v2 @kind object;
  #L4840f6.  call temp:= `f0`(v1, v0, v2) @signature `Luc/l;.f0:(Luc/h;Luc/r;)Luc/l;` @kind direct;
  #L4840fc.  v2:= temp @kind object;
  #L4840fe.  return v2 @kind object;
  #L484100.  v0:= instanceof @variable v2 @type ^`uc.l` @kind boolean;
  #L484104.  if v0 == 0 then goto L48410e;
  #L484108.  v2:= (`uc.l`) v2 @kind object;
  #L48410c.  return v2 @kind object;
  #L48410e.  call temp:= `I`(v2, v1) @signature `Lyc/f;.I:(Lyc/d;)Lyc/d;` @kind interface;
  #L484114.  v2:= temp @kind object;
  #L484116.  v2:= (`uc.l`) v2 @kind object;
  #L48411a.  return v2 @kind object;
}
procedure `uc.l` `h0`(`uc.l` v1 @kind this, `yc.i` v2 @kind object, `long` v3 ) @signature `Luc/l;.h0:(Lyc/i;J)Luc/l;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48412c.  v0:= instanceof @variable v2 @type ^`yc.a` @kind boolean;
  #L484130.  if v0 == 0 then goto L484178;
  #L484134.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L484138.  if v2 != v0 then goto L48415e;
  #L48413c.  v2:= (`yc.a`) v2 @kind object;
  #L484140.  v0:= v1.`uc.l.o` @type ^`uc.h` @kind object;
  #L484144.  call temp:= `r`(v2, v3) @signature `Lyc/a;.r:(J)I` @kind virtual;
  #L48414a.  v2:= temp;
  #L48414c.  call temp:= `X`(v2) @signature `Luc/r;.X:(I)Luc/r;` @kind static;
  #L484152.  v2:= temp @kind object;
  #L484154.  call temp:= `f0`(v1, v0, v2) @signature `Luc/l;.f0:(Luc/h;Luc/r;)Luc/l;` @kind direct;
  #L48415a.  v2:= temp @kind object;
  #L48415c.  return v2 @kind object;
  #L48415e.  v0:= v1.`uc.l.o` @type ^`uc.h` @kind object;
  #L484162.  call temp:= `w0`(v0, v2, v3) @signature `Luc/h;.w0:(Lyc/i;J)Luc/h;` @kind virtual;
  #L484168.  v2:= temp @kind object;
  #L48416a.  v3:= v1.`uc.l.p` @type ^`uc.r` @kind object;
  #L48416e.  call temp:= `f0`(v1, v2, v3) @signature `Luc/l;.f0:(Luc/h;Luc/r;)Luc/l;` @kind direct;
  #L484174.  v2:= temp @kind object;
  #L484176.  return v2 @kind object;
  #L484178.  call temp:= `e`(v2, v1, v3) @signature `Lyc/i;.e:(Lyc/d;J)Lyc/d;` @kind interface;
  #L48417e.  v2:= temp @kind object;
  #L484180.  v2:= (`uc.l`) v2 @kind object;
  #L484184.  return v2 @kind object;
}
procedure `int` `hashCode`(`uc.l` v2 @kind this) @signature `Luc/l;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L483d68.  v0:= v2.`uc.l.o` @type ^`uc.h` @kind object;
  #L483d6c.  call temp:= `hashCode`(v0) @signature `Luc/h;.hashCode:()I` @kind virtual;
  #L483d72.  v0:= temp;
  #L483d74.  v1:= v2.`uc.l.p` @type ^`uc.r` @kind object;
  #L483d78.  call temp:= `hashCode`(v1) @signature `Luc/r;.hashCode:()I` @kind virtual;
  #L483d7e.  v1:= temp;
  #L483d80.  v0:= v0 ^~ v1 @kind int;
  #L483d82.  return v0;
}
procedure `void` `i0`(`uc.l` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Luc/l;.i0:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L484228.  v0:= v1.`uc.l.o` @type ^`uc.h` @kind object;
  #L48422c.  call `B0`(v0, v2) @signature `Luc/h;.B0:(Ljava/io/DataOutput;)V` @kind virtual;
  #L484232.  v0:= v1.`uc.l.p` @type ^`uc.r` @kind object;
  #L484236.  call `e0`(v0, v2) @signature `Luc/r;.e0:(Ljava/io/DataOutput;)V` @kind virtual;
  #L48423c.  return @kind void;
}
procedure `java.lang.Object` `j`(`uc.l` v1 @kind this, `yc.k` v2 @kind object) @signature `Luc/l;.j:(Lyc/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L483d94.  call temp:= `e`() @signature `Lyc/j;.e:()Lyc/k;` @kind static;
  #L483d9a.  v0:= temp @kind object;
  #L483d9c.  if v2 != v0 then goto L483da6;
  #L483da0.  v2:= `@@yc.b.p` @type ^`yc.b` @kind object;
  #L483da4.  return v2 @kind object;
  #L483da6.  call temp:= `d`() @signature `Lyc/j;.d:()Lyc/k;` @kind static;
  #L483dac.  v0:= temp @kind object;
  #L483dae.  if v2 == v0 then goto L483e06;
  #L483db2.  call temp:= `f`() @signature `Lyc/j;.f:()Lyc/k;` @kind static;
  #L483db8.  v0:= temp @kind object;
  #L483dba.  if v2 != v0 then goto L483dc0;
  #L483dbe.  goto L483e06;
  #L483dc0.  call temp:= `c`() @signature `Lyc/j;.c:()Lyc/k;` @kind static;
  #L483dc6.  v0:= temp @kind object;
  #L483dc8.  if v2 != v0 then goto L483dd2;
  #L483dcc.  v2:= v1.`uc.l.o` @type ^`uc.h` @kind object;
  #L483dd0.  return v2 @kind object;
  #L483dd2.  call temp:= `a`() @signature `Lyc/j;.a:()Lyc/k;` @kind static;
  #L483dd8.  v0:= temp @kind object;
  #L483dda.  if v2 == v0 then goto L483e02;
  #L483dde.  call temp:= `b`() @signature `Lyc/j;.b:()Lyc/k;` @kind static;
  #L483de4.  v0:= temp @kind object;
  #L483de6.  if v2 == v0 then goto L483e02;
  #L483dea.  call temp:= `g`() @signature `Lyc/j;.g:()Lyc/k;` @kind static;
  #L483df0.  v0:= temp @kind object;
  #L483df2.  if v2 != v0 then goto L483df8;
  #L483df6.  goto L483e02;
  #L483df8.  call temp:= `j`(v1, v2) @signature `Lxc/c;.j:(Lyc/k;)Ljava/lang/Object;` @kind super;
  #L483dfe.  v2:= temp @kind object;
  #L483e00.  return v2 @kind object;
  #L483e02.  v2:= 0I;
  #L483e04.  return v2 @kind object;
  #L483e06.  call temp:= `X`(v1) @signature `Luc/l;.X:()Luc/r;` @kind virtual;
  #L483e0c.  v2:= temp @kind object;
  #L483e0e.  return v2 @kind object;
}
procedure `yc.d` `r`(`uc.l` v0 @kind this, `long` v1 , `yc.l` v3 @kind object) @signature `Luc/l;.r:(JLyc/l;)Lyc/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L484298.  call temp:= `a0`(v0, v1, v3) @signature `Luc/l;.a0:(JLyc/l;)Luc/l;` @kind virtual;
  #L48429e.  v1:= temp @kind object;
  #L4842a0.  return v1 @kind object;
}
procedure `yc.n` `t`(`uc.l` v1 @kind this, `yc.i` v2 @kind object) @signature `Luc/l;.t:(Lyc/i;)Lyc/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L484308.  v0:= instanceof @variable v2 @type ^`yc.a` @kind boolean;
  #L48430c.  if v0 == 0 then goto L484330;
  #L484310.  v0:= `@@yc.a.V` @type ^`yc.a` @kind object;
  #L484314.  if v2 != v0 then goto L484322;
  #L484318.  call temp:= `k`(v2) @signature `Lyc/i;.k:()Lyc/n;` @kind interface;
  #L48431e.  v2:= temp @kind object;
  #L484320.  return v2 @kind object;
  #L484322.  v0:= v1.`uc.l.o` @type ^`uc.h` @kind object;
  #L484326.  call temp:= `t`(v0, v2) @signature `Luc/h;.t:(Lyc/i;)Lyc/n;` @kind virtual;
  #L48432c.  v2:= temp @kind object;
  #L48432e.  return v2 @kind object;
  #L484330.  call temp:= `h`(v2, v1) @signature `Lyc/i;.h:(Lyc/e;)Lyc/n;` @kind interface;
  #L484336.  v2:= temp @kind object;
  #L484338.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`uc.l` v2 @kind this) @signature `Luc/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L483e60.  v0:= new `java.lang.StringBuilder`;
  #L483e64.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L483e6a.  v1:= v2.`uc.l.o` @type ^`uc.h` @kind object;
  #L483e6e.  call temp:= `toString`(v1) @signature `Luc/h;.toString:()Ljava/lang/String;` @kind virtual;
  #L483e74.  v1:= temp @kind object;
  #L483e76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L483e7c.  v1:= v2.`uc.l.p` @type ^`uc.r` @kind object;
  #L483e80.  call temp:= `toString`(v1) @signature `Luc/r;.toString:()Ljava/lang/String;` @kind virtual;
  #L483e86.  v1:= temp @kind object;
  #L483e88.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L483e8e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L483e94.  v0:= temp @kind object;
  #L483e96.  return v0 @kind object;
}
