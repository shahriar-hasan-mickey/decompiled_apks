record `uc.m` @kind class @AccessFlag PUBLIC_FINAL extends `vc.e` @kind class, `java.io.Serializable` @kind interface {
  `int` `uc.m.o` @AccessFlag PRIVATE_FINAL;
  `int` `uc.m.p` @AccessFlag PRIVATE_FINAL;
  `int` `uc.m.q` @AccessFlag PRIVATE_FINAL;
}
global `uc.m` `@@uc.m.r` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Luc/m;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48451c.  v0:= new `uc.m`;
  #L484520.  v1:= 0I;
  #L484522.  call `<init>`(v0, v1, v1, v1) @signature `Luc/m;.<init>:(III)V` @kind direct;
  #L484528.  `@@uc.m.r` @type ^`uc.m` := v0 @kind object;
  #L48452c.  v0:= "([-+]?)P(?:([-+]?[0-9]+)Y)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)W)?(?:([-+]?[0-9]+)D)?" @kind object;
  #L484530.  v1:= 2I;
  #L484532.  call temp:= `compile`(v0, v1) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;I)Ljava/util/regex/Pattern;` @kind static;
  #L484538.  return @kind void;
}
procedure `void` `<init>`(`uc.m` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Luc/m;.<init>:(III)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L48454c.  call `<init>`(v0) @signature `Lvc/e;.<init>:()V` @kind direct;
  #L484552.  v0.`uc.m.o` @type ^`int` := v1;
  #L484556.  v0.`uc.m.p` @type ^`int` := v2;
  #L48455a.  v0.`uc.m.q` @type ^`int` := v3;
  #L48455e.  return @kind void;
}
procedure `uc.m` `a`(`int` v1 , `int` v2 , `int` v3 ) @signature `Luc/m;.a:(III)Luc/m;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4844d4.  v0:= v1 ^| v2 @kind int;
  #L4844d8.  v0:= v0 ^| v3 @kind int;
  #L4844da.  if v0 != 0 then goto L4844e4;
  #L4844de.  v1:= `@@uc.m.r` @type ^`uc.m` @kind object;
  #L4844e2.  return v1 @kind object;
  #L4844e4.  v0:= new `uc.m`;
  #L4844e8.  call `<init>`(v0, v1, v2, v3) @signature `Luc/m;.<init>:(III)V` @kind direct;
  #L4844ee.  return v0 @kind object;
}
procedure `uc.m` `d`(`int` v1 ) @signature `Luc/m;.d:(I)Luc/m;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L484500.  v0:= 0I;
  #L484502.  call temp:= `a`(v0, v0, v1) @signature `Luc/m;.a:(III)Luc/m;` @kind static;
  #L484508.  v1:= temp @kind object;
  #L48450a.  return v1 @kind object;
}
procedure `java.lang.Object` `readResolve`(`uc.m` v2 @kind this) @signature `Luc/m;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4843fc.  v0:= v2.`uc.m.o` @type ^`int`;
  #L484400.  v1:= v2.`uc.m.p` @type ^`int`;
  #L484404.  v0:= v0 ^| v1 @kind int;
  #L484406.  v1:= v2.`uc.m.q` @type ^`int`;
  #L48440a.  v0:= v0 ^| v1 @kind int;
  #L48440c.  if v0 != 0 then goto L484416;
  #L484410.  v0:= `@@uc.m.r` @type ^`uc.m` @kind object;
  #L484414.  return v0 @kind object;
  #L484416.  return v2 @kind object;
}
procedure `boolean` `b`(`uc.m` v1 @kind this) @signature `Luc/m;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4843a0.  v0:= `@@uc.m.r` @type ^`uc.m` @kind object;
  #L4843a4.  if v1 != v0 then goto L4843ac;
  #L4843a8.  v0:= 1I;
  #L4843aa.  goto L4843ae;
  #L4843ac.  v0:= 0I;
  #L4843ae.  return v0;
}
procedure `yc.d` `c`(`uc.m` v3 @kind this, `yc.d` v4 @kind object) @signature `Luc/m;.c:(Lyc/d;)Lyc/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L484570.  v0:= "temporal" @kind object;
  #L484574.  call temp:= `i`(v4, v0) @signature `Lxc/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48457a.  v0:= v3.`uc.m.o` @type ^`int`;
  #L48457e.  if v0 == 0 then goto L48459c;
  #L484582.  v1:= v3.`uc.m.p` @type ^`int`;
  #L484586.  if v1 == 0 then goto L484594;
  #L48458a.  call temp:= `e`(v3) @signature `Luc/m;.e:()J` @kind virtual;
  #L484590.  v0:= temp @kind wide;
  #L484592.  goto L4845a6;
  #L484594.  v0:= (`long`) v0 @kind i2l;
  #L484596.  v2:= `@@yc.b.z` @type ^`yc.b` @kind object;
  #L48459a.  goto L4845aa;
  #L48459c.  v0:= v3.`uc.m.p` @type ^`int`;
  #L4845a0.  if v0 == 0 then goto L4845b2;
  #L4845a4.  v0:= (`long`) v0 @kind i2l;
  #L4845a6.  v2:= `@@yc.b.y` @type ^`yc.b` @kind object;
  #L4845aa.  call temp:= `D`(v4, v0, v2) @signature `Lyc/d;.D:(JLyc/l;)Lyc/d;` @kind interface;
  #L4845b0.  v4:= temp @kind object;
  #L4845b2.  v0:= v3.`uc.m.q` @type ^`int`;
  #L4845b6.  if v0 == 0 then goto L4845c8;
  #L4845ba.  v0:= (`long`) v0 @kind i2l;
  #L4845bc.  v2:= `@@yc.b.w` @type ^`yc.b` @kind object;
  #L4845c0.  call temp:= `D`(v4, v0, v2) @signature `Lyc/d;.D:(JLyc/l;)Lyc/d;` @kind interface;
  #L4845c6.  v4:= temp @kind object;
  #L4845c8.  return v4 @kind object;
}
procedure `long` `e`(`uc.m` v4 @kind this) @signature `Luc/m;.e:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4844ac.  v0:= v4.`uc.m.o` @type ^`int`;
  #L4844b0.  v0:= (`long`) v0 @kind i2l;
  #L4844b2.  v2:= 12L;
  #L4844b6.  v0:= v0 * v2 @kind long;
  #L4844ba.  v2:= v4.`uc.m.p` @type ^`int`;
  #L4844be.  v2:= (`long`) v2 @kind i2l;
  #L4844c0.  v0:= v0 + v2 @kind long;
  #L4844c2.  return v0 @kind wide;
}
procedure `boolean` `equals`(`uc.m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Luc/m;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48434c.  v0:= 1I;
  #L48434e.  if v4 != v5 then goto L484354;
  #L484352.  return v0;
  #L484354.  v1:= instanceof @variable v5 @type ^`uc.m` @kind boolean;
  #L484358.  v2:= 0I;
  #L48435a.  if v1 == 0 then goto L48438c;
  #L48435e.  v5:= (`uc.m`) v5 @kind object;
  #L484362.  v1:= v4.`uc.m.o` @type ^`int`;
  #L484366.  v3:= v5.`uc.m.o` @type ^`int`;
  #L48436a.  if v1 != v3 then goto L484388;
  #L48436e.  v1:= v4.`uc.m.p` @type ^`int`;
  #L484372.  v3:= v5.`uc.m.p` @type ^`int`;
  #L484376.  if v1 != v3 then goto L484388;
  #L48437a.  v1:= v4.`uc.m.q` @type ^`int`;
  #L48437e.  v5:= v5.`uc.m.q` @type ^`int`;
  #L484382.  if v1 != v5 then goto L484388;
  #L484386.  goto L48438a;
  #L484388.  v0:= 0I;
  #L48438a.  return v0;
  #L48438c.  return v2;
}
procedure `int` `hashCode`(`uc.m` v3 @kind this) @signature `Luc/m;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4843c0.  v0:= v3.`uc.m.o` @type ^`int`;
  #L4843c4.  v1:= v3.`uc.m.p` @type ^`int`;
  #L4843c8.  v2:= 8I;
  #L4843cc.  call temp:= `rotateLeft`(v1, v2) @signature `Ljava/lang/Integer;.rotateLeft:(II)I` @kind static;
  #L4843d2.  v1:= temp;
  #L4843d4.  v0:= v0 + v1 @kind int;
  #L4843d6.  v1:= v3.`uc.m.q` @type ^`int`;
  #L4843da.  v2:= 16I;
  #L4843de.  call temp:= `rotateLeft`(v1, v2) @signature `Ljava/lang/Integer;.rotateLeft:(II)I` @kind static;
  #L4843e4.  v1:= temp;
  #L4843e6.  v0:= v0 + v1 @kind int;
  #L4843e8.  return v0;
}
procedure `java.lang.String` `toString`(`uc.m` v2 @kind this) @signature `Luc/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L484428.  v0:= `@@uc.m.r` @type ^`uc.m` @kind object;
  #L48442c.  if v2 != v0 then goto L484436;
  #L484430.  v0:= "P0D" @kind object;
  #L484434.  return v0 @kind object;
  #L484436.  v0:= new `java.lang.StringBuilder`;
  #L48443a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L484440.  v1:= 80I;
  #L484444.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L48444a.  v1:= v2.`uc.m.o` @type ^`int`;
  #L48444e.  if v1 == 0 then goto L484462;
  #L484452.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L484458.  v1:= 89I;
  #L48445c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L484462.  v1:= v2.`uc.m.p` @type ^`int`;
  #L484466.  if v1 == 0 then goto L48447a;
  #L48446a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L484470.  v1:= 77I;
  #L484474.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L48447a.  v1:= v2.`uc.m.q` @type ^`int`;
  #L48447e.  if v1 == 0 then goto L484492;
  #L484482.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L484488.  v1:= 68I;
  #L48448c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L484492.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L484498.  v0:= temp @kind object;
  #L48449a.  return v0 @kind object;
}
