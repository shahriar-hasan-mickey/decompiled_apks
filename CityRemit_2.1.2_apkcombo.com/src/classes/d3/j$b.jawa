record `d3.j$b` @kind class @AccessFlag  {
  `java.io.BufferedReader` `d3.j$b.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Queue` `d3.j$b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `d3.j$b.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`d3.j$b` v0 @kind this, `java.util.Queue` v1 @kind object, `java.io.BufferedReader` v2 @kind object) @signature `Ld3/j$b;.<init>:(Ljava/util/Queue;Ljava/io/BufferedReader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f4b80.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f4b86.  v0.`d3.j$b.b` @type ^`java.util.Queue` := v1 @kind object;
  #L2f4b8a.  v0.`d3.j$b.a` @type ^`java.io.BufferedReader` := v2 @kind object;
  #L2f4b8e.  return @kind void;
}
procedure `boolean` `a`(`d3.j$b` v2 @kind this) @signature `Ld3/j$b;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f4acc.  v0:= v2.`d3.j$b.c` @type ^`java.lang.String` @kind object;
  #L2f4ad0.  v1:= 1I;
  #L2f4ad2.  if v0 == 0 then goto L2f4ad8;
  #L2f4ad6.  return v1;
  #L2f4ad8.  v0:= v2.`d3.j$b.b` @type ^`java.util.Queue` @kind object;
  #L2f4adc.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L2f4ae2.  v0:= temp;
  #L2f4ae4.  if v0 != 0 then goto L2f4b0a;
  #L2f4ae8.  v0:= v2.`d3.j$b.b` @type ^`java.util.Queue` @kind object;
  #L2f4aec.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L2f4af2.  v0:= temp @kind object;
  #L2f4af4.  v0:= (`java.lang.String`) v0 @kind object;
  #L2f4af8.  call temp:= `e`(v0) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2f4afe.  v0:= temp @kind object;
  #L2f4b00.  v0:= (`java.lang.String`) v0 @kind object;
  #L2f4b04.  v2.`d3.j$b.c` @type ^`java.lang.String` := v0 @kind object;
  #L2f4b08.  return v1;
  #L2f4b0a.  v0:= v2.`d3.j$b.a` @type ^`java.io.BufferedReader` @kind object;
  #L2f4b0e.  call temp:= `readLine`(v0) @signature `Ljava/io/BufferedReader;.readLine:()Ljava/lang/String;` @kind virtual;
  #L2f4b14.  v0:= temp @kind object;
  #L2f4b16.  v2.`d3.j$b.c` @type ^`java.lang.String` := v0 @kind object;
  #L2f4b1a.  if v0 == 0 then goto L2f4b38;
  #L2f4b1e.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2f4b24.  v0:= temp @kind object;
  #L2f4b26.  v2.`d3.j$b.c` @type ^`java.lang.String` := v0 @kind object;
  #L2f4b2a.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2f4b30.  v0:= temp;
  #L2f4b32.  if v0 != 0 then goto L2f4b0a;
  #L2f4b36.  return v1;
  #L2f4b38.  v0:= 0I;
  #L2f4b3a.  return v0;
}
procedure `java.lang.String` `b`(`d3.j$b` v2 @kind this) @signature `Ld3/j$b;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f4b4c.  call temp:= `a`(v2) @signature `Ld3/j$b;.a:()Z` @kind virtual;
  #L2f4b52.  v0:= temp;
  #L2f4b54.  if v0 == 0 then goto L2f4b64;
  #L2f4b58.  v0:= v2.`d3.j$b.c` @type ^`java.lang.String` @kind object;
  #L2f4b5c.  v1:= 0I;
  #L2f4b5e.  v2.`d3.j$b.c` @type ^`java.lang.String` := v1 @kind object;
  #L2f4b62.  return v0 @kind object;
  #L2f4b64.  v0:= new `java.util.NoSuchElementException`;
  #L2f4b68.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2f4b6e.  throw v0;
}
