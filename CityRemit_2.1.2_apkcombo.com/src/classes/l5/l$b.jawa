record `l5.l$b` @kind class @AccessFlag  extends `l5.k` @kind interface, `java.io.Serializable` @kind interface {
  `java.util.List` `l5.l$b.o` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`l5.l$b` v0 @kind this, `java.util.List` v1 @kind object) @signature `Ll5/l$b;.<init>:(Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3c4d10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c4d16.  v0.`l5.l$b.o` @type ^`java.util.List` := v1 @kind object;
  #L3c4d1a.  return @kind void;
}
procedure `void` `<init>`(`l5.l$b` v0 @kind this, `java.util.List` v1 @kind object, `l5.l$a` v2 @kind object) @signature `Ll5/l$b;.<init>:(Ljava/util/List;Ll5/l$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3c4d2c.  call `<init>`(v0, v1) @signature `Ll5/l$b;.<init>:(Ljava/util/List;)V` @kind direct;
  #L3c4d32.  return @kind void;
}
procedure `boolean` `apply`(`l5.l$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Ll5/l$b;.apply:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3c4c44.  v0:= 0I;
  #L3c4c46.  v1:= 0I;
  #L3c4c48.  v2:= v3.`l5.l$b.o` @type ^`java.util.List` @kind object;
  #L3c4c4c.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3c4c52.  v2:= temp;
  #L3c4c54.  if v1 >= v2 then goto L3c4c7c;
  #L3c4c58.  v2:= v3.`l5.l$b.o` @type ^`java.util.List` @kind object;
  #L3c4c5c.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3c4c62.  v2:= temp @kind object;
  #L3c4c64.  v2:= (`l5.k`) v2 @kind object;
  #L3c4c68.  call temp:= `apply`(v2, v4) @signature `Ll5/k;.apply:(Ljava/lang/Object;)Z` @kind interface;
  #L3c4c6e.  v2:= temp;
  #L3c4c70.  if v2 != 0 then goto L3c4c76;
  #L3c4c74.  return v0;
  #L3c4c76.  v1:= v1 + 1;
  #L3c4c7a.  goto L3c4c48;
  #L3c4c7c.  v4:= 1I;
  #L3c4c7e.  return v4;
}
procedure `boolean` `equals`(`l5.l$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ll5/l$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c4c90.  v0:= instanceof @variable v2 @type ^`l5.l$b` @kind boolean;
  #L3c4c94.  if v0 == 0 then goto L3c4cae;
  #L3c4c98.  v2:= (`l5.l$b`) v2 @kind object;
  #L3c4c9c.  v0:= v1.`l5.l$b.o` @type ^`java.util.List` @kind object;
  #L3c4ca0.  v2:= v2.`l5.l$b.o` @type ^`java.util.List` @kind object;
  #L3c4ca4.  call temp:= `equals`(v0, v2) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3c4caa.  v2:= temp;
  #L3c4cac.  return v2;
  #L3c4cae.  v2:= 0I;
  #L3c4cb0.  return v2;
}
procedure `int` `hashCode`(`l5.l$b` v2 @kind this) @signature `Ll5/l$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c4cc4.  v0:= v2.`l5.l$b.o` @type ^`java.util.List` @kind object;
  #L3c4cc8.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L3c4cce.  v0:= temp;
  #L3c4cd0.  v1:= 306654252I;
  #L3c4cd6.  v0:= v0 + v1 @kind int;
  #L3c4cd8.  return v0;
}
procedure `java.lang.String` `toString`(`l5.l$b` v2 @kind this) @signature `Ll5/l$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c4cec.  v0:= v2.`l5.l$b.o` @type ^`java.util.List` @kind object;
  #L3c4cf0.  v1:= "and" @kind object;
  #L3c4cf4.  call temp:= `a`(v1, v0) @signature `Ll5/l;.a:(Ljava/lang/String;Ljava/lang/Iterable;)Ljava/lang/String;` @kind static;
  #L3c4cfa.  v0:= temp @kind object;
  #L3c4cfc.  return v0 @kind object;
}
