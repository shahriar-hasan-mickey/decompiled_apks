record `l5.c$d` @kind class @AccessFlag FINAL extends `l5.c$c` @kind class {
}
global `l5.c$d` `@@l5.c$d.p` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ll5/c$d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3c4634.  v0:= new `l5.c$d`;
  #L3c4638.  call `<init>`(v0) @signature `Ll5/c$d;.<init>:()V` @kind direct;
  #L3c463e.  `@@l5.c$d.p` @type ^`l5.c$d` := v0 @kind object;
  #L3c4642.  return @kind void;
}
procedure `void` `<init>`(`l5.c$d` v1 @kind this) @signature `Ll5/c$d;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3c4654.  v0:= "CharMatcher.none()" @kind object;
  #L3c4658.  call `<init>`(v1, v0) @signature `Ll5/c$c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c465e.  return @kind void;
}
procedure `int` `c`(`l5.c$d` v0 @kind this, `java.lang.CharSequence` v1 @kind object, `int` v2 ) @signature `Ll5/c$d;.c:(Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;

  #L3c4610.  call temp:= `length`(v1) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c4616.  v1:= temp;
  #L3c4618.  call temp:= `k`(v2, v1) @signature `Ll5/j;.k:(II)I` @kind static;
  #L3c461e.  v1:= -1I;
  #L3c4620.  return v1;
}
procedure `boolean` `e`(`l5.c$d` v0 @kind this, `char` v1 ) @signature `Ll5/c$d;.e:(C)Z` @AccessFlag PUBLIC {
    temp;

  #L3c45fc.  v1:= 0I;
  #L3c45fe.  return v1;
}
