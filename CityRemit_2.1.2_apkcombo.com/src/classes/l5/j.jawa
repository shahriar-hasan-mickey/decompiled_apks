record `l5.j` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.String` `a`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Ll5/j;.a:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3c4978.  v0:= 1I;
  #L3c497a.  v1:= 0I;
  #L3c497c.  v2:= 2I;
  #L3c497e.  if v4 >= 0 then goto L3c49a4;
  #L3c4982.  v5:= new `java.lang.Object`[v2];
  #L3c4986.  v5[v1]:= v6 @kind object;
  #L3c498a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c4990.  v4:= temp @kind object;
  #L3c4992.  v5[v0]:= v4 @kind object;
  #L3c4996.  v4:= "%s (%s) must not be negative" @kind object;
  #L3c499a.  call temp:= `a`(v4, v5) @signature `Ll5/n;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3c49a0.  v4:= temp @kind object;
  #L3c49a2.  return v4 @kind object;
  #L3c49a4.  if v5 < 0 then goto L3c49d8;
  #L3c49a8.  v3:= 3I;
  #L3c49aa.  v3:= new `java.lang.Object`[v3];
  #L3c49ae.  v3[v1]:= v6 @kind object;
  #L3c49b2.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c49b8.  v4:= temp @kind object;
  #L3c49ba.  v3[v0]:= v4 @kind object;
  #L3c49be.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c49c4.  v4:= temp @kind object;
  #L3c49c6.  v3[v2]:= v4 @kind object;
  #L3c49ca.  v4:= "%s (%s) must be less than size (%s)" @kind object;
  #L3c49ce.  call temp:= `a`(v4, v3) @signature `Ll5/n;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3c49d4.  v4:= temp @kind object;
  #L3c49d6.  return v4 @kind object;
  #L3c49d8.  v4:= new `java.lang.IllegalArgumentException`;
  #L3c49dc.  v6:= 26I;
  #L3c49e0.  v0:= new `java.lang.StringBuilder`;
  #L3c49e4.  call `<init>`(v0, v6) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3c49ea.  v6:= "negative size: " @kind object;
  #L3c49ee.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c49f4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c49fa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c4a00.  v5:= temp @kind object;
  #L3c4a02.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c4a08.  throw v4;
}
procedure `java.lang.String` `b`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Ll5/j;.b:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3c4a1c.  v0:= 1I;
  #L3c4a1e.  v1:= 0I;
  #L3c4a20.  v2:= 2I;
  #L3c4a22.  if v4 >= 0 then goto L3c4a48;
  #L3c4a26.  v5:= new `java.lang.Object`[v2];
  #L3c4a2a.  v5[v1]:= v6 @kind object;
  #L3c4a2e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c4a34.  v4:= temp @kind object;
  #L3c4a36.  v5[v0]:= v4 @kind object;
  #L3c4a3a.  v4:= "%s (%s) must not be negative" @kind object;
  #L3c4a3e.  call temp:= `a`(v4, v5) @signature `Ll5/n;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3c4a44.  v4:= temp @kind object;
  #L3c4a46.  return v4 @kind object;
  #L3c4a48.  if v5 < 0 then goto L3c4a7c;
  #L3c4a4c.  v3:= 3I;
  #L3c4a4e.  v3:= new `java.lang.Object`[v3];
  #L3c4a52.  v3[v1]:= v6 @kind object;
  #L3c4a56.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c4a5c.  v4:= temp @kind object;
  #L3c4a5e.  v3[v0]:= v4 @kind object;
  #L3c4a62.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c4a68.  v4:= temp @kind object;
  #L3c4a6a.  v3[v2]:= v4 @kind object;
  #L3c4a6e.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L3c4a72.  call temp:= `a`(v4, v3) @signature `Ll5/n;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3c4a78.  v4:= temp @kind object;
  #L3c4a7a.  return v4 @kind object;
  #L3c4a7c.  v4:= new `java.lang.IllegalArgumentException`;
  #L3c4a80.  v6:= 26I;
  #L3c4a84.  v0:= new `java.lang.StringBuilder`;
  #L3c4a88.  call `<init>`(v0, v6) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3c4a8e.  v6:= "negative size: " @kind object;
  #L3c4a92.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c4a98.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c4a9e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c4aa4.  v5:= temp @kind object;
  #L3c4aa6.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c4aac.  throw v4;
}
procedure `java.lang.String` `c`(`int` v1 , `int` v2 , `int` v3 ) @signature `Ll5/j;.c:(III)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3c4ac0.  if v1 < 0 then goto L3c4b12;
  #L3c4ac4.  if v1 <= v3 then goto L3c4aca;
  #L3c4ac8.  goto L3c4b12;
  #L3c4aca.  if v2 < 0 then goto L3c4b04;
  #L3c4ace.  if v2 <= v3 then goto L3c4ad4;
  #L3c4ad2.  goto L3c4b04;
  #L3c4ad4.  v3:= 2I;
  #L3c4ad6.  v3:= new `java.lang.Object`[v3];
  #L3c4ada.  v0:= 0I;
  #L3c4adc.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c4ae2.  v2:= temp @kind object;
  #L3c4ae4.  v3[v0]:= v2 @kind object;
  #L3c4ae8.  v2:= 1I;
  #L3c4aea.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c4af0.  v1:= temp @kind object;
  #L3c4af2.  v3[v2]:= v1 @kind object;
  #L3c4af6.  v1:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L3c4afa.  call temp:= `a`(v1, v3) @signature `Ll5/n;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3c4b00.  v1:= temp @kind object;
  #L3c4b02.  return v1 @kind object;
  #L3c4b04.  v1:= "end index" @kind object;
  #L3c4b08.  call temp:= `b`(v2, v3, v1) @signature `Ll5/j;.b:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L3c4b0e.  v1:= temp @kind object;
  #L3c4b10.  return v1 @kind object;
  #L3c4b12.  v2:= "start index" @kind object;
  #L3c4b16.  call temp:= `b`(v1, v3, v2) @signature `Ll5/j;.b:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L3c4b1c.  v1:= temp @kind object;
  #L3c4b1e.  return v1 @kind object;
}
procedure `void` `d`(`boolean` v0 ) @signature `Ll5/j;.d:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3c4b30.  if v0 == 0 then goto L3c4b36;
  #L3c4b34.  return @kind void;
  #L3c4b36.  v0:= new `java.lang.IllegalArgumentException`;
  #L3c4b3a.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3c4b40.  throw v0;
}
procedure `void` `e`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Ll5/j;.e:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3c4b54.  if v0 == 0 then goto L3c4b5a;
  #L3c4b58.  return @kind void;
  #L3c4b5a.  v0:= new `java.lang.IllegalArgumentException`;
  #L3c4b5e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3c4b64.  v1:= temp @kind object;
  #L3c4b66.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c4b6c.  throw v0;
}
procedure `void` `f`(`boolean` v2 , `java.lang.String` v3 @kind object, `long` v4 ) @signature `Ll5/j;.f:(ZLjava/lang/String;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3c4b80.  if v2 == 0 then goto L3c4b86;
  #L3c4b84.  return @kind void;
  #L3c4b86.  v2:= new `java.lang.IllegalArgumentException`;
  #L3c4b8a.  v0:= 1I;
  #L3c4b8c.  v0:= new `java.lang.Object`[v0];
  #L3c4b90.  v1:= 0I;
  #L3c4b92.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3c4b98.  v4:= temp @kind object;
  #L3c4b9a.  v0[v1]:= v4 @kind object;
  #L3c4b9e.  call temp:= `a`(v3, v0) @signature `Ll5/n;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3c4ba4.  v3:= temp @kind object;
  #L3c4ba6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c4bac.  throw v2;
}
procedure `int` `g`(`int` v1 , `int` v2 ) @signature `Ll5/j;.g:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c4894.  v0:= "index" @kind object;
  #L3c4898.  call temp:= `h`(v1, v2, v0) @signature `Ll5/j;.h:(IILjava/lang/String;)I` @kind static;
  #L3c489e.  v1:= temp;
  #L3c48a0.  return v1;
}
procedure `int` `h`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Ll5/j;.h:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c48b4.  if v1 < 0 then goto L3c48be;
  #L3c48b8.  if v1 >= v2 then goto L3c48be;
  #L3c48bc.  return v1;
  #L3c48be.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3c48c2.  call temp:= `a`(v1, v2, v3) @signature `Ll5/j;.a:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L3c48c8.  v1:= temp @kind object;
  #L3c48ca.  call `<init>`(v0, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c48d0.  throw v0;
}
procedure `java.lang.Object` `i`(`java.lang.Object` v0 @kind object) @signature `Ll5/j;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3c4934.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3c493a.  return v0 @kind object;
}
procedure `java.lang.Object` `j`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Ll5/j;.j:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3c494c.  if v0 == 0 then goto L3c4952;
  #L3c4950.  return v0 @kind object;
  #L3c4952.  v0:= new `java.lang.NullPointerException`;
  #L3c4956.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3c495c.  v1:= temp @kind object;
  #L3c495e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c4964.  throw v0;
}
procedure `int` `k`(`int` v1 , `int` v2 ) @signature `Ll5/j;.k:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c48e4.  v0:= "index" @kind object;
  #L3c48e8.  call temp:= `l`(v1, v2, v0) @signature `Ll5/j;.l:(IILjava/lang/String;)I` @kind static;
  #L3c48ee.  v1:= temp;
  #L3c48f0.  return v1;
}
procedure `int` `l`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Ll5/j;.l:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c4904.  if v1 < 0 then goto L3c490e;
  #L3c4908.  if v1 > v2 then goto L3c490e;
  #L3c490c.  return v1;
  #L3c490e.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3c4912.  call temp:= `b`(v1, v2, v3) @signature `Ll5/j;.b:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L3c4918.  v1:= temp @kind object;
  #L3c491a.  call `<init>`(v0, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c4920.  throw v0;
}
procedure `void` `m`(`int` v1 , `int` v2 , `int` v3 ) @signature `Ll5/j;.m:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c4bc0.  if v1 < 0 then goto L3c4bce;
  #L3c4bc4.  if v2 < v1 then goto L3c4bce;
  #L3c4bc8.  if v2 > v3 then goto L3c4bce;
  #L3c4bcc.  return @kind void;
  #L3c4bce.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3c4bd2.  call temp:= `c`(v1, v2, v3) @signature `Ll5/j;.c:(III)Ljava/lang/String;` @kind static;
  #L3c4bd8.  v1:= temp @kind object;
  #L3c4bda.  call `<init>`(v0, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c4be0.  throw v0;
}
procedure `void` `n`(`boolean` v0 ) @signature `Ll5/j;.n:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3c4bf4.  if v0 == 0 then goto L3c4bfa;
  #L3c4bf8.  return @kind void;
  #L3c4bfa.  v0:= new `java.lang.IllegalStateException`;
  #L3c4bfe.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3c4c04.  throw v0;
}
procedure `void` `o`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Ll5/j;.o:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3c4c18.  if v0 == 0 then goto L3c4c1e;
  #L3c4c1c.  return @kind void;
  #L3c4c1e.  v0:= new `java.lang.IllegalStateException`;
  #L3c4c22.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3c4c28.  v1:= temp @kind object;
  #L3c4c2a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c4c30.  throw v0;
}
