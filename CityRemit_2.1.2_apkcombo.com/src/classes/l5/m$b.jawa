record `l5.m$b` @kind class @AccessFlag ABSTRACT extends `l5.a` @kind class {
  `java.lang.CharSequence` `l5.m$b.q` @AccessFlag FINAL;
  `l5.c` `l5.m$b.r` @AccessFlag FINAL;
  `boolean` `l5.m$b.s` @AccessFlag FINAL;
  `int` `l5.m$b.t` @AccessFlag ;
  `int` `l5.m$b.u` @AccessFlag ;
}
procedure `void` `<init>`(`l5.m$b` v1 @kind this, `l5.m` v2 @kind object, `java.lang.CharSequence` v3 @kind object) @signature `Ll5/m$b;.<init>:(Ll5/m;Ljava/lang/CharSequence;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L3c504c.  call `<init>`(v1) @signature `Ll5/a;.<init>:()V` @kind direct;
  #L3c5052.  v0:= 0I;
  #L3c5054.  v1.`l5.m$b.t` @type ^`int` := v0;
  #L3c5058.  call temp:= `a`(v2) @signature `Ll5/m;.a:(Ll5/m;)Ll5/c;` @kind static;
  #L3c505e.  v0:= temp @kind object;
  #L3c5060.  v1.`l5.m$b.r` @type ^`l5.c` := v0 @kind object;
  #L3c5064.  call temp:= `b`(v2) @signature `Ll5/m;.b:(Ll5/m;)Z` @kind static;
  #L3c506a.  v0:= temp;
  #L3c506c.  v1.`l5.m$b.s` @type ^`boolean` := v0 @kind boolean;
  #L3c5070.  call temp:= `c`(v2) @signature `Ll5/m;.c:(Ll5/m;)I` @kind static;
  #L3c5076.  v2:= temp;
  #L3c5078.  v1.`l5.m$b.u` @type ^`int` := v2;
  #L3c507c.  v1.`l5.m$b.q` @type ^`java.lang.CharSequence` := v3 @kind object;
  #L3c5080.  return @kind void;
}
procedure `java.lang.Object` `a`(`l5.m$b` v1 @kind this) @signature `Ll5/m$b;.a:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L3c4ef4.  call temp:= `f`(v1) @signature `Ll5/m$b;.f:()Ljava/lang/String;` @kind virtual;
  #L3c4efa.  v0:= temp @kind object;
  #L3c4efc.  return v0 @kind object;
}
procedure `java.lang.String` `f`(`l5.m$b` v6 @kind this) @signature `Ll5/m$b;.f:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3c4f10.  v0:= v6.`l5.m$b.t` @type ^`int`;
  #L3c4f14.  v1:= v6.`l5.m$b.t` @type ^`int`;
  #L3c4f18.  v2:= -1I;
  #L3c4f1a.  if v1 == v2 then goto L3c502c;
  #L3c4f1e.  call temp:= `h`(v6, v1) @signature `Ll5/m$b;.h:(I)I` @kind virtual;
  #L3c4f24.  v1:= temp;
  #L3c4f26.  if v1 != v2 then goto L3c4f3c;
  #L3c4f2a.  v1:= v6.`l5.m$b.q` @type ^`java.lang.CharSequence` @kind object;
  #L3c4f2e.  call temp:= `length`(v1) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c4f34.  v1:= temp;
  #L3c4f36.  v6.`l5.m$b.t` @type ^`int` := v2;
  #L3c4f3a.  goto L3c4f48;
  #L3c4f3c.  call temp:= `g`(v6, v1) @signature `Ll5/m$b;.g:(I)I` @kind virtual;
  #L3c4f42.  v3:= temp;
  #L3c4f44.  v6.`l5.m$b.t` @type ^`int` := v3;
  #L3c4f48.  v3:= v6.`l5.m$b.t` @type ^`int`;
  #L3c4f4c.  if v3 != v0 then goto L3c4f6e;
  #L3c4f50.  v3:= v3 + 1;
  #L3c4f54.  v6.`l5.m$b.t` @type ^`int` := v3;
  #L3c4f58.  v1:= v6.`l5.m$b.q` @type ^`java.lang.CharSequence` @kind object;
  #L3c4f5c.  call temp:= `length`(v1) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c4f62.  v1:= temp;
  #L3c4f64.  if v3 <= v1 then goto L3c4f14;
  #L3c4f68.  v6.`l5.m$b.t` @type ^`int` := v2;
  #L3c4f6c.  goto L3c4f14;
  #L3c4f6e.  if v0 >= v1 then goto L3c4f94;
  #L3c4f72.  v3:= v6.`l5.m$b.r` @type ^`l5.c` @kind object;
  #L3c4f76.  v4:= v6.`l5.m$b.q` @type ^`java.lang.CharSequence` @kind object;
  #L3c4f7a.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c4f80.  v4:= temp;
  #L3c4f82.  call temp:= `e`(v3, v4) @signature `Ll5/c;.e:(C)Z` @kind virtual;
  #L3c4f88.  v3:= temp;
  #L3c4f8a.  if v3 == 0 then goto L3c4f94;
  #L3c4f8e.  v0:= v0 + 1;
  #L3c4f92.  goto L3c4f6e;
  #L3c4f94.  if v1 <= v0 then goto L3c4fbe;
  #L3c4f98.  v3:= v6.`l5.m$b.r` @type ^`l5.c` @kind object;
  #L3c4f9c.  v4:= v6.`l5.m$b.q` @type ^`java.lang.CharSequence` @kind object;
  #L3c4fa0.  v5:= v1 + -1;
  #L3c4fa4.  call temp:= `charAt`(v4, v5) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c4faa.  v4:= temp;
  #L3c4fac.  call temp:= `e`(v3, v4) @signature `Ll5/c;.e:(C)Z` @kind virtual;
  #L3c4fb2.  v3:= temp;
  #L3c4fb4.  if v3 == 0 then goto L3c4fbe;
  #L3c4fb8.  v1:= v1 + -1;
  #L3c4fbc.  goto L3c4f94;
  #L3c4fbe.  v3:= v6.`l5.m$b.s` @type ^`boolean` @kind boolean;
  #L3c4fc2.  if v3 == 0 then goto L3c4fcc;
  #L3c4fc6.  if v0 != v1 then goto L3c4fcc;
  #L3c4fca.  goto L3c4f10;
  #L3c4fcc.  v3:= v6.`l5.m$b.u` @type ^`int`;
  #L3c4fd0.  v4:= 1I;
  #L3c4fd2.  if v3 != v4 then goto L3c5010;
  #L3c4fd6.  v1:= v6.`l5.m$b.q` @type ^`java.lang.CharSequence` @kind object;
  #L3c4fda.  call temp:= `length`(v1) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c4fe0.  v1:= temp;
  #L3c4fe2.  v6.`l5.m$b.t` @type ^`int` := v2;
  #L3c4fe6.  if v1 <= v0 then goto L3c5016;
  #L3c4fea.  v2:= v6.`l5.m$b.r` @type ^`l5.c` @kind object;
  #L3c4fee.  v3:= v6.`l5.m$b.q` @type ^`java.lang.CharSequence` @kind object;
  #L3c4ff2.  v4:= v1 + -1;
  #L3c4ff6.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c4ffc.  v3:= temp;
  #L3c4ffe.  call temp:= `e`(v2, v3) @signature `Ll5/c;.e:(C)Z` @kind virtual;
  #L3c5004.  v2:= temp;
  #L3c5006.  if v2 == 0 then goto L3c5016;
  #L3c500a.  v1:= v1 + -1;
  #L3c500e.  goto L3c4fe6;
  #L3c5010.  v3:= v3 - v4 @kind int;
  #L3c5012.  v6.`l5.m$b.u` @type ^`int` := v3;
  #L3c5016.  v2:= v6.`l5.m$b.q` @type ^`java.lang.CharSequence` @kind object;
  #L3c501a.  call temp:= `subSequence`(v2, v0, v1) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L3c5020.  v0:= temp @kind object;
  #L3c5022.  call temp:= `toString`(v0) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L3c5028.  v0:= temp @kind object;
  #L3c502a.  return v0 @kind object;
  #L3c502c.  call temp:= `d`(v6) @signature `Ll5/a;.d:()Ljava/lang/Object;` @kind virtual;
  #L3c5032.  v0:= temp @kind object;
  #L3c5034.  v0:= (`java.lang.String`) v0 @kind object;
  #L3c5038.  return v0 @kind object;
}
procedure `int` `g`(`int` v0 ) @signature `Ll5/m$b;.g:(I)I` @AccessFlag ABSTRACT {

  # return;
}
procedure `int` `h`(`int` v0 ) @signature `Ll5/m$b;.h:(I)I` @AccessFlag ABSTRACT {

  # return;
}
