record `l5.c` @kind class @AccessFlag PUBLIC_ABSTRACT extends `l5.k` @kind interface {
}
procedure `void` `<init>`(`l5.c` v0 @kind this) @signature `Ll5/c;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3c478c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c4792.  return @kind void;
}
procedure `java.lang.String` `a`(`char` v0 ) @signature `Ll5/c;.a:(C)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3c46d8.  call temp:= `g`(v0) @signature `Ll5/c;.g:(C)Ljava/lang/String;` @kind static;
  #L3c46de.  v0:= temp @kind object;
  #L3c46e0.  return v0 @kind object;
}
procedure `l5.c` `d`(`char` v1 ) @signature `Ll5/c;.d:(C)Ll5/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c4758.  v0:= new `l5.c$b`;
  #L3c475c.  call `<init>`(v0, v1) @signature `Ll5/c$b;.<init>:(C)V` @kind direct;
  #L3c4762.  return v0 @kind object;
}
procedure `l5.c` `f`() @signature `Ll5/c;.f:()Ll5/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c4774.  v0:= `@@l5.c$d.p` @type ^`l5.c$d` @kind object;
  #L3c4778.  return v0 @kind object;
}
procedure `java.lang.String` `g`(`char` v6 ) @signature `Ll5/c;.g:(C)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3c46f4.  v0:= 6I;
  #L3c46f6.  v0:= new `char`[v0];
  #L3c46fa.  goto L3c4734;
  #L3c4700.  v1:= 0I;
  #L3c4702.  v2:= 4I;
  #L3c4704.  if v1 >= v2 then goto L3c472a;
  #L3c4708.  v3:= v1 - 5;
  #L3c470c.  v4:= v6 ^& 15;
  #L3c4710.  v5:= "0123456789ABCDEF" @kind object;
  #L3c4714.  call temp:= `charAt`(v5, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3c471a.  v4:= temp;
  #L3c471c.  v0[v3]:= v4 @kind char;
  #L3c4720.  v6:= v6 ^> v2 @kind int;
  #L3c4722.  v6:= (`char`) v6 @kind i2c;
  #L3c4724.  v1:= v1 + 1;
  #L3c4728.  goto L3c4702;
  #L3c472a.  call temp:= `copyValueOf`(v0) @signature `Ljava/lang/String;.copyValueOf:([C)Ljava/lang/String;` @kind static;
  #L3c4730.  v6:= temp @kind object;
  #L3c4732.  return v6 @kind object;
  #L3c4734.  v0:= (92I, 117I, 0I, 0I, 0I, 0I) @kind object;
  #L3c4747.  goto L3c4700;
}
procedure `boolean` `b`(`l5.c` v0 @kind this, `java.lang.Character` v1 @kind object) @signature `Ll5/c;.b:(Ljava/lang/Character;)Z` @AccessFlag PUBLIC {
    temp;

  #L3c4670.  call temp:= `charValue`(v1) @signature `Ljava/lang/Character;.charValue:()C` @kind virtual;
  #L3c4676.  v1:= temp;
  #L3c4678.  call temp:= `e`(v0, v1) @signature `Ll5/c;.e:(C)Z` @kind virtual;
  #L3c467e.  v1:= temp;
  #L3c4680.  return v1;
}
procedure `int` `c`(`l5.c` v2 @kind this, `java.lang.CharSequence` v3 @kind object, `int` v4 ) @signature `Ll5/c;.c:(Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c4694.  call temp:= `length`(v3) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c469a.  v0:= temp;
  #L3c469c.  call temp:= `k`(v4, v0) @signature `Ll5/j;.k:(II)I` @kind static;
  #L3c46a2.  if v4 >= v0 then goto L3c46c2;
  #L3c46a6.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c46ac.  v1:= temp;
  #L3c46ae.  call temp:= `e`(v2, v1) @signature `Ll5/c;.e:(C)Z` @kind virtual;
  #L3c46b4.  v1:= temp;
  #L3c46b6.  if v1 == 0 then goto L3c46bc;
  #L3c46ba.  return v4;
  #L3c46bc.  v4:= v4 + 1;
  #L3c46c0.  goto L3c46a2;
  #L3c46c2.  v3:= -1I;
  #L3c46c4.  return v3;
}
procedure `boolean` `e`(`char` v0 ) @signature `Ll5/c;.e:(C)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
