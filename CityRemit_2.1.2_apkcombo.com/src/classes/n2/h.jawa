record `n2.h` @kind class @AccessFlag PUBLIC_ABSTRACT extends `n2.c` @kind interface {
}
procedure `void` `<init>`(`n2.h` v0 @kind this) @signature `Ln2/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3edeb8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3edebe.  return @kind void;
}
procedure `n2.a` `a`(`n2.h` v2 @kind this, `n2.e` v3 @kind object) @signature `Ln2/h;.a:(Ln2/e;)Ln2/a;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3ede4c.  v0:= v3.`y1.g.q` @type ^`java.nio.ByteBuffer` @kind object;
  #L3ede50.  call temp:= `e`(v0) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3ede56.  v0:= temp @kind object;
  #L3ede58.  v0:= (`java.nio.ByteBuffer`) v0 @kind object;
  #L3ede5c.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L3ede62.  v1:= temp;
  #L3ede64.  if v1 != 0 then goto L3ede84;
  #L3ede68.  call temp:= `hasArray`(v0) @signature `Ljava/nio/ByteBuffer;.hasArray:()Z` @kind virtual;
  #L3ede6e.  v1:= temp;
  #L3ede70.  if v1 == 0 then goto L3ede84;
  #L3ede74.  call temp:= `arrayOffset`(v0) @signature `Ljava/nio/ByteBuffer;.arrayOffset:()I` @kind virtual;
  #L3ede7a.  v1:= temp;
  #L3ede7c.  if v1 != 0 then goto L3ede84;
  #L3ede80.  v1:= 1I;
  #L3ede82.  goto L3ede86;
  #L3ede84.  v1:= 0I;
  #L3ede86.  call `a`(v1) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L3ede8c.  call temp:= `s`(v3) @signature `Ly1/a;.s:()Z` @kind virtual;
  #L3ede92.  v1:= temp;
  #L3ede94.  if v1 == 0 then goto L3ede9c;
  #L3ede98.  v3:= 0I;
  #L3ede9a.  goto L3edea4;
  #L3ede9c.  call temp:= `b`(v2, v3, v0) @signature `Ln2/h;.b:(Ln2/e;Ljava/nio/ByteBuffer;)Ln2/a;` @kind virtual;
  #L3edea2.  v3:= temp @kind object;
  #L3edea4.  return v3 @kind object;
}
procedure `n2.a` `b`(`n2.e` v0 @kind object, `java.nio.ByteBuffer` v1 @kind object) @signature `Ln2/h;.b:(Ln2/e;Ljava/nio/ByteBuffer;)Ln2/a;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
