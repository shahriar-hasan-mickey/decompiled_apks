record `a5.f0` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `a5.l` `a5.f0.o` @AccessFlag FINAL_SYNTHETIC;
  `a5.g0` `a5.f0.p` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`a5.f0` v0 @kind this, `a5.g0` v1 @kind object, `a5.l` v2 @kind object) @signature `La5/f0;.<init>:(La5/g0;La5/l;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L15e6e4.  v0.`a5.f0.p` @type ^`a5.g0` := v1 @kind object;
  #L15e6e8.  v0.`a5.f0.o` @type ^`a5.l` := v2 @kind object;
  #L15e6ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15e6f2.  return @kind void;
}
procedure `void` `run`(`a5.f0` v3 @kind this) @signature `La5/f0;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L15e704.  v0:= v3.`a5.f0.p` @type ^`a5.g0` @kind object;
  #L15e708.  call temp:= `b`(v0) @signature `La5/g0;.b:(La5/g0;)Ljava/lang/Object;` @kind static;
  #L15e70e.  v0:= temp @kind object;
  #L15e710.  @monitorenter v0
  #L15e712.  v1:= v3.`a5.f0.p` @type ^`a5.g0` @kind object;
  #L15e716.  call temp:= `a`(v1) @signature `La5/g0;.a:(La5/g0;)La5/h;` @kind static;
  #L15e71c.  v2:= temp @kind object;
  #L15e71e.  if v2 == 0 then goto L15e73c;
  #L15e722.  call temp:= `a`(v1) @signature `La5/g0;.a:(La5/g0;)La5/h;` @kind static;
  #L15e728.  v1:= temp @kind object;
  #L15e72a.  v2:= v3.`a5.f0.o` @type ^`a5.l` @kind object;
  #L15e72e.  call temp:= `l`(v2) @signature `La5/l;.l:()Ljava/lang/Object;` @kind virtual;
  #L15e734.  v2:= temp @kind object;
  #L15e736.  call `c`(v1, v2) @signature `La5/h;.c:(Ljava/lang/Object;)V` @kind interface;
  #L15e73c.  @monitorexit v0
  #L15e73e.  return @kind void;
  #L15e740.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15e742.  @monitorexit v0
  #L15e744.  throw v1;
  catch `java.lang.Throwable` @[L15e712..L15e744] goto L15e740;
}
