record `a5.t` @kind class @AccessFlag FINAL extends `a5.s` @kind interface {
  `java.lang.Object` `a5.t.a` @AccessFlag PRIVATE_FINAL;
  `int` `a5.t.b` @AccessFlag PRIVATE_FINAL;
  `a5.o0` `a5.t.c` @AccessFlag PRIVATE_FINAL;
  `int` `a5.t.d` @AccessFlag PRIVATE;
  `int` `a5.t.e` @AccessFlag PRIVATE;
  `int` `a5.t.f` @AccessFlag PRIVATE;
  `java.lang.Exception` `a5.t.g` @AccessFlag PRIVATE;
  `boolean` `a5.t.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a5.t` v1 @kind this, `int` v2 , `a5.o0` v3 @kind object) @signature `La5/t;.<init>:(ILa5/o0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15dd80.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15dd86.  v0:= new `java.lang.Object`;
  #L15dd8a.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15dd90.  v1.`a5.t.a` @type ^`java.lang.Object` := v0 @kind object;
  #L15dd94.  v1.`a5.t.b` @type ^`int` := v2;
  #L15dd98.  v1.`a5.t.c` @type ^`a5.o0` := v3 @kind object;
  #L15dd9c.  return @kind void;
}
procedure `void` `d`(`a5.t` v6 @kind this) @signature `La5/t;.d:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15de78.  v0:= v6.`a5.t.d` @type ^`int`;
  #L15de7c.  v1:= v6.`a5.t.e` @type ^`int`;
  #L15de80.  v0:= v0 + v1 @kind int;
  #L15de82.  v1:= v6.`a5.t.f` @type ^`int`;
  #L15de86.  v0:= v0 + v1 @kind int;
  #L15de88.  v1:= v6.`a5.t.b` @type ^`int`;
  #L15de8c.  if v0 != v1 then goto L15df10;
  #L15de90.  v0:= v6.`a5.t.g` @type ^`java.lang.Exception` @kind object;
  #L15de94.  if v0 == 0 then goto L15def0;
  #L15de98.  v0:= v6.`a5.t.c` @type ^`a5.o0` @kind object;
  #L15de9c.  v1:= new `java.util.concurrent.ExecutionException`;
  #L15dea0.  v2:= v6.`a5.t.e` @type ^`int`;
  #L15dea4.  v3:= v6.`a5.t.b` @type ^`int`;
  #L15dea8.  v4:= new `java.lang.StringBuilder`;
  #L15deac.  v5:= 54I;
  #L15deb0.  call `<init>`(v4, v5) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15deb6.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15debc.  v2:= " out of " @kind object;
  #L15dec0.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dec6.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15decc.  v2:= " underlying tasks failed" @kind object;
  #L15ded0.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ded6.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15dedc.  v2:= temp @kind object;
  #L15dede.  v3:= v6.`a5.t.g` @type ^`java.lang.Exception` @kind object;
  #L15dee2.  call `<init>`(v1, v2, v3) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L15dee8.  call `s`(v0, v1) @signature `La5/o0;.s:(Ljava/lang/Exception;)V` @kind virtual;
  #L15deee.  return @kind void;
  #L15def0.  v0:= v6.`a5.t.h` @type ^`boolean` @kind boolean;
  #L15def4.  if v0 == 0 then goto L15df04;
  #L15def8.  v0:= v6.`a5.t.c` @type ^`a5.o0` @kind object;
  #L15defc.  call temp:= `u`(v0) @signature `La5/o0;.u:()Z` @kind virtual;
  #L15df02.  return @kind void;
  #L15df04.  v0:= v6.`a5.t.c` @type ^`a5.o0` @kind object;
  #L15df08.  v1:= 0I;
  #L15df0a.  call `t`(v0, v1) @signature `La5/o0;.t:(Ljava/lang/Object;)V` @kind virtual;
  #L15df10.  return @kind void;
}
procedure `void` `a`(`a5.t` v2 @kind this, `java.lang.Exception` v3 @kind object) @signature `La5/t;.a:(Ljava/lang/Exception;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L15ddf4.  v0:= v2.`a5.t.a` @type ^`java.lang.Object` @kind object;
  #L15ddf8.  @monitorenter v0
  #L15ddfa.  v1:= v2.`a5.t.e` @type ^`int`;
  #L15ddfe.  v1:= v1 + 1;
  #L15de02.  v2.`a5.t.e` @type ^`int` := v1;
  #L15de06.  v2.`a5.t.g` @type ^`java.lang.Exception` := v3 @kind object;
  #L15de0a.  call `d`(v2) @signature `La5/t;.d:()V` @kind direct;
  #L15de10.  @monitorexit v0
  #L15de12.  return @kind void;
  #L15de14.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15de16.  @monitorexit v0
  #L15de18.  throw v3;
  catch `java.lang.Throwable` @[L15ddfa..L15de18] goto L15de14;
}
procedure `void` `b`(`a5.t` v3 @kind this) @signature `La5/t;.b:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L15ddb0.  v0:= v3.`a5.t.a` @type ^`java.lang.Object` @kind object;
  #L15ddb4.  @monitorenter v0
  #L15ddb6.  v1:= v3.`a5.t.f` @type ^`int`;
  #L15ddba.  v2:= 1I;
  #L15ddbc.  v1:= v1 + v2 @kind int;
  #L15ddbe.  v3.`a5.t.f` @type ^`int` := v1;
  #L15ddc2.  v3.`a5.t.h` @type ^`boolean` := v2 @kind boolean;
  #L15ddc6.  call `d`(v3) @signature `La5/t;.d:()V` @kind direct;
  #L15ddcc.  @monitorexit v0
  #L15ddce.  return @kind void;
  #L15ddd0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15ddd2.  @monitorexit v0
  #L15ddd4.  throw v1;
  catch `java.lang.Throwable` @[L15ddb6..L15ddd4] goto L15ddd0;
}
procedure `void` `c`(`a5.t` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `La5/t;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L15de38.  v2:= v1.`a5.t.a` @type ^`java.lang.Object` @kind object;
  #L15de3c.  @monitorenter v2
  #L15de3e.  v0:= v1.`a5.t.d` @type ^`int`;
  #L15de42.  v0:= v0 + 1;
  #L15de46.  v1.`a5.t.d` @type ^`int` := v0;
  #L15de4a.  call `d`(v1) @signature `La5/t;.d:()V` @kind direct;
  #L15de50.  @monitorexit v2
  #L15de52.  return @kind void;
  #L15de54.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15de56.  @monitorexit v2
  #L15de58.  throw v0;
  catch `java.lang.Throwable` @[L15de3e..L15de58] goto L15de54;
}
