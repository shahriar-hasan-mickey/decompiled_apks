record `l6.f` @kind class @AccessFlag FINAL extends `l6.a0$d$b` @kind class {
  `java.lang.String` `l6.f.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `l6.f.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`l6.f` v0 @kind this, `java.lang.String` v1 @kind object, `byte`[] v2 @kind object) @signature `Ll6/f;.<init>:(Ljava/lang/String;[B)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3c7b0c.  call `<init>`(v0) @signature `Ll6/a0$d$b;.<init>:()V` @kind direct;
  #L3c7b12.  v0.`l6.f.a` @type ^`java.lang.String` := v1 @kind object;
  #L3c7b16.  v0.`l6.f.b` @type ^`byte`[] := v2 @kind object;
  #L3c7b1a.  return @kind void;
}
procedure `void` `<init>`(`l6.f` v0 @kind this, `java.lang.String` v1 @kind object, `byte`[] v2 @kind object, `l6.f$a` v3 @kind object) @signature `Ll6/f;.<init>:(Ljava/lang/String;[BLl6/f$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3c7b2c.  call `<init>`(v0, v1, v2) @signature `Ll6/f;.<init>:(Ljava/lang/String;[B)V` @kind direct;
  #L3c7b32.  return @kind void;
}
procedure `byte`[] `b`(`l6.f` v1 @kind this) @signature `Ll6/f;.b:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c7a44.  v0:= v1.`l6.f.b` @type ^`byte`[] @kind object;
  #L3c7a48.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`l6.f` v1 @kind this) @signature `Ll6/f;.c:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c7a94.  v0:= v1.`l6.f.a` @type ^`java.lang.String` @kind object;
  #L3c7a98.  return v0 @kind object;
}
procedure `boolean` `equals`(`l6.f` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ll6/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3c79d4.  v0:= 1I;
  #L3c79d6.  if v5 != v4 then goto L3c79dc;
  #L3c79da.  return v0;
  #L3c79dc.  v1:= instanceof @variable v5 @type ^`l6.a0$d$b` @kind boolean;
  #L3c79e0.  v2:= 0I;
  #L3c79e2.  if v1 == 0 then goto L3c7a32;
  #L3c79e6.  v5:= (`l6.a0$d$b`) v5 @kind object;
  #L3c79ea.  v1:= v4.`l6.f.a` @type ^`java.lang.String` @kind object;
  #L3c79ee.  call temp:= `c`(v5) @signature `Ll6/a0$d$b;.c:()Ljava/lang/String;` @kind virtual;
  #L3c79f4.  v3:= temp @kind object;
  #L3c79f6.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3c79fc.  v1:= temp;
  #L3c79fe.  if v1 == 0 then goto L3c7a2e;
  #L3c7a02.  v1:= v4.`l6.f.b` @type ^`byte`[] @kind object;
  #L3c7a06.  v3:= instanceof @variable v5 @type ^`l6.f` @kind boolean;
  #L3c7a0a.  if v3 == 0 then goto L3c7a18;
  #L3c7a0e.  v5:= (`l6.f`) v5 @kind object;
  #L3c7a12.  v5:= v5.`l6.f.b` @type ^`byte`[] @kind object;
  #L3c7a16.  goto L3c7a20;
  #L3c7a18.  call temp:= `b`(v5) @signature `Ll6/a0$d$b;.b:()[B` @kind virtual;
  #L3c7a1e.  v5:= temp @kind object;
  #L3c7a20.  call temp:= `equals`(v1, v5) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L3c7a26.  v5:= temp;
  #L3c7a28.  if v5 == 0 then goto L3c7a2e;
  #L3c7a2c.  goto L3c7a30;
  #L3c7a2e.  v0:= 0I;
  #L3c7a30.  return v0;
  #L3c7a32.  return v2;
}
procedure `int` `hashCode`(`l6.f` v2 @kind this) @signature `Ll6/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c7a5c.  v0:= v2.`l6.f.a` @type ^`java.lang.String` @kind object;
  #L3c7a60.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3c7a66.  v0:= temp;
  #L3c7a68.  v1:= 1000003I;
  #L3c7a6e.  v0:= v0 ^~ v1 @kind int;
  #L3c7a70.  v0:= v0 * v1 @kind int;
  #L3c7a74.  v1:= v2.`l6.f.b` @type ^`byte`[] @kind object;
  #L3c7a78.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L3c7a7e.  v1:= temp;
  #L3c7a80.  v0:= v0 ^~ v1 @kind int;
  #L3c7a82.  return v0;
}
procedure `java.lang.String` `toString`(`l6.f` v2 @kind this) @signature `Ll6/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c7aac.  v0:= new `java.lang.StringBuilder`;
  #L3c7ab0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c7ab6.  v1:= "File{filename=" @kind object;
  #L3c7aba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c7ac0.  v1:= v2.`l6.f.a` @type ^`java.lang.String` @kind object;
  #L3c7ac4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c7aca.  v1:= ", contents=" @kind object;
  #L3c7ace.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c7ad4.  v1:= v2.`l6.f.b` @type ^`byte`[] @kind object;
  #L3c7ad8.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([B)Ljava/lang/String;` @kind static;
  #L3c7ade.  v1:= temp @kind object;
  #L3c7ae0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c7ae6.  v1:= "}" @kind object;
  #L3c7aea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c7af0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c7af6.  v0:= temp @kind object;
  #L3c7af8.  return v0 @kind object;
}
