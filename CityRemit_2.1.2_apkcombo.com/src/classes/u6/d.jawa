record `u6.d` @kind class @AccessFlag PUBLIC extends `java.util.Iterator` @kind interface {
  `java.util.ArrayDeque` `u6.d.o` @AccessFlag PRIVATE_FINAL;
  `boolean` `u6.d.p` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`u6.d` v2 @kind this, `u6.h` v3 @kind object, `java.lang.Object` v4 @kind object, `java.util.Comparator` v5 @kind object, `boolean` v6 ) @signature `Lu6/d;.<init>:(Lu6/h;Ljava/lang/Object;Ljava/util/Comparator;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L479b08.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L479b0e.  v0:= new `java.util.ArrayDeque`;
  #L479b12.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L479b18.  v2.`u6.d.o` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L479b1c.  v2.`u6.d.p` @type ^`boolean` := v6 @kind boolean;
  #L479b20.  call temp:= `isEmpty`(v3) @signature `Lu6/h;.isEmpty:()Z` @kind interface;
  #L479b26.  v0:= temp;
  #L479b28.  if v0 != 0 then goto L479b98;
  #L479b2c.  if v4 == 0 then goto L479b50;
  #L479b30.  call temp:= `getKey`(v3) @signature `Lu6/h;.getKey:()Ljava/lang/Object;` @kind interface;
  #L479b36.  v0:= temp @kind object;
  #L479b38.  if v6 == 0 then goto L479b46;
  #L479b3c.  call temp:= `compare`(v5, v4, v0) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L479b42.  v0:= temp;
  #L479b44.  goto L479b52;
  #L479b46.  call temp:= `compare`(v5, v0, v4) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L479b4c.  v0:= temp;
  #L479b4e.  goto L479b52;
  #L479b50.  v0:= 1I;
  #L479b52.  if v0 >= 0 then goto L479b6e;
  #L479b56.  if v6 == 0 then goto L479b64;
  #L479b5a.  call temp:= `a`(v3) @signature `Lu6/h;.a:()Lu6/h;` @kind interface;
  #L479b60.  v3:= temp @kind object;
  #L479b62.  goto L479b20;
  #L479b64.  call temp:= `d`(v3) @signature `Lu6/h;.d:()Lu6/h;` @kind interface;
  #L479b6a.  v3:= temp @kind object;
  #L479b6c.  goto L479b20;
  #L479b6e.  if v0 != 0 then goto L479b82;
  #L479b72.  v4:= v2.`u6.d.o` @type ^`java.util.ArrayDeque` @kind object;
  #L479b76.  v3:= (`u6.j`) v3 @kind object;
  #L479b7a.  call `push`(v4, v3) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L479b80.  goto L479b98;
  #L479b82.  v0:= v2.`u6.d.o` @type ^`java.util.ArrayDeque` @kind object;
  #L479b86.  v1:= v3 @kind object;
  #L479b88.  v1:= (`u6.j`) v1 @kind object;
  #L479b8c.  call `push`(v0, v1) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L479b92.  if v6 == 0 then goto L479b5a;
  #L479b96.  goto L479b64;
  #L479b98.  return @kind void;
}
procedure `java.util.Map$Entry` `a`(`u6.d` v4 @kind this) @signature `Lu6/d;.a:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L479a4c.  v0:= v4.`u6.d.o` @type ^`java.util.ArrayDeque` @kind object;
  #L479a50.  call temp:= `pop`(v0) @signature `Ljava/util/ArrayDeque;.pop:()Ljava/lang/Object;` @kind virtual;
  #L479a56.  v0:= temp @kind object;
  #L479a58.  v0:= (`u6.j`) v0 @kind object;
  #L479a5c.  v1:= new `java.util.AbstractMap$SimpleEntry`;
  #L479a60.  call temp:= `getKey`(v0) @signature `Lu6/j;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L479a66.  v2:= temp @kind object;
  #L479a68.  call temp:= `getValue`(v0) @signature `Lu6/j;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L479a6e.  v3:= temp @kind object;
  #L479a70.  call `<init>`(v1, v2, v3) @signature `Ljava/util/AbstractMap$SimpleEntry;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L479a76.  v2:= v4.`u6.d.p` @type ^`boolean` @kind boolean;
  #L479a7a.  if v2 == 0 then goto L479aac;
  #L479a7e.  call temp:= `a`(v0) @signature `Lu6/j;.a:()Lu6/h;` @kind virtual;
  #L479a84.  v0:= temp @kind object;
  #L479a86.  call temp:= `isEmpty`(v0) @signature `Lu6/h;.isEmpty:()Z` @kind interface;
  #L479a8c.  v2:= temp;
  #L479a8e.  if v2 != 0 then goto L479ada;
  #L479a92.  v2:= v4.`u6.d.o` @type ^`java.util.ArrayDeque` @kind object;
  #L479a96.  v3:= v0 @kind object;
  #L479a98.  v3:= (`u6.j`) v3 @kind object;
  #L479a9c.  call `push`(v2, v3) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L479aa2.  call temp:= `d`(v0) @signature `Lu6/h;.d:()Lu6/h;` @kind interface;
  #L479aa8.  v0:= temp @kind object;
  #L479aaa.  goto L479a86;
  #L479aac.  call temp:= `d`(v0) @signature `Lu6/j;.d:()Lu6/h;` @kind virtual;
  #L479ab2.  v0:= temp @kind object;
  #L479ab4.  call temp:= `isEmpty`(v0) @signature `Lu6/h;.isEmpty:()Z` @kind interface;
  #L479aba.  v2:= temp;
  #L479abc.  if v2 != 0 then goto L479ada;
  #L479ac0.  v2:= v4.`u6.d.o` @type ^`java.util.ArrayDeque` @kind object;
  #L479ac4.  v3:= v0 @kind object;
  #L479ac6.  v3:= (`u6.j`) v3 @kind object;
  #L479aca.  call `push`(v2, v3) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L479ad0.  call temp:= `a`(v0) @signature `Lu6/h;.a:()Lu6/h;` @kind interface;
  #L479ad6.  v0:= temp @kind object;
  #L479ad8.  goto L479ab4;
  #L479ada.  return v1 @kind object;
  #L479adc.  v0:= new `java.util.NoSuchElementException`;
  #L479ae0.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L479ae6.  throw v0;
  catch `java.util.EmptyStackException` @[L479a4c..L479ad8] goto L479adc;
}
procedure `boolean` `hasNext`(`u6.d` v1 @kind this) @signature `Lu6/d;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479a08.  v0:= v1.`u6.d.o` @type ^`java.util.ArrayDeque` @kind object;
  #L479a0c.  call temp:= `size`(v0) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L479a12.  v0:= temp;
  #L479a14.  if v0 <= 0 then goto L479a1c;
  #L479a18.  v0:= 1I;
  #L479a1a.  goto L479a1e;
  #L479a1c.  v0:= 0I;
  #L479a1e.  return v0;
}
procedure `java.lang.Object` `next`(`u6.d` v1 @kind this) @signature `Lu6/d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L479a30.  call temp:= `a`(v1) @signature `Lu6/d;.a:()Ljava/util/Map$Entry;` @kind virtual;
  #L479a36.  v0:= temp @kind object;
  #L479a38.  return v0 @kind object;
}
procedure `void` `remove`(`u6.d` v2 @kind this) @signature `Lu6/d;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L479bac.  v0:= new `java.lang.UnsupportedOperationException`;
  #L479bb0.  v1:= "remove called on immutable collection" @kind object;
  #L479bb4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479bba.  throw v0;
}
