record `o0.a` @kind class @AccessFlag PUBLIC {
}
procedure `java.lang.String` `a`(`java.lang.String` v4 @kind object) @signature `Lo0/a;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f93fc.  v0:= 0I;
  #L3f93fe.  if v4 == 0 then goto L3f9436;
  #L3f9402.  call temp:= `isEmpty`(v4) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L3f9408.  v1:= temp;
  #L3f940a.  if v1 == 0 then goto L3f9410;
  #L3f940e.  goto L3f9436;
  #L3f9410.  v1:= new `java.util.StringTokenizer`;
  #L3f9414.  v2:= 0I;
  #L3f9416.  v3:= "," @kind object;
  #L3f941a.  call `<init>`(v1, v4, v3, v2) @signature `Ljava/util/StringTokenizer;.<init>:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L3f9420.  call temp:= `hasMoreTokens`(v1) @signature `Ljava/util/StringTokenizer;.hasMoreTokens:()Z` @kind virtual;
  #L3f9426.  v4:= temp;
  #L3f9428.  if v4 == 0 then goto L3f9436;
  #L3f942c.  call temp:= `nextToken`(v1) @signature `Ljava/util/StringTokenizer;.nextToken:()Ljava/lang/String;` @kind virtual;
  #L3f9432.  v4:= temp @kind object;
  #L3f9434.  return v4 @kind object;
  #L3f9436.  return v0 @kind object;
}
