record `ec.e$a` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.l` @kind class, `tb.p` @kind interface {
  `ec.c` `ec.e$a.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`ec.e$a` v0 @kind this, `ec.c` v1 @kind object) @signature `Lec/e$a;.<init>:(Lec/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L302f3c.  v0.`ec.e$a.o` @type ^`ec.c` := v1 @kind object;
  #L302f40.  v1:= 2I;
  #L302f42.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/l;.<init>:(I)V` @kind direct;
  #L302f48.  return @kind void;
}
procedure `java.lang.Integer` `a`(`ec.e$a` v3 @kind this, `int` v4 , `mb.g$b` v5 @kind object) @signature `Lec/e$a;.a:(ILmb/g$b;)Ljava/lang/Integer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L302e50.  call temp:= `getKey`(v5) @signature `Lmb/g$b;.getKey:()Lmb/g$c;` @kind interface;
  #L302e56.  v0:= temp @kind object;
  #L302e58.  v1:= v3.`ec.e$a.o` @type ^`ec.c` @kind object;
  #L302e5c.  v1:= v1.`ec.c.p` @type ^`mb.g` @kind object;
  #L302e60.  call temp:= `c`(v1, v0) @signature `Lmb/g;.c:(Lmb/g$c;)Lmb/g$b;` @kind interface;
  #L302e66.  v1:= temp @kind object;
  #L302e68.  v2:= `@@ac.r1.c` @type ^`ac.r1$b` @kind object;
  #L302e6c.  if v0 == v2 then goto L302e88;
  #L302e70.  if v5 == v1 then goto L302e7a;
  #L302e74.  v4:= -2147483648I;
  #L302e78.  goto L302e7e;
  #L302e7a.  v4:= v4 + 1;
  #L302e7e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L302e84.  v4:= temp @kind object;
  #L302e86.  return v4 @kind object;
  #L302e88.  v1:= (`ac.r1`) v1 @kind object;
  #L302e8c.  v5:= (`ac.r1`) v5 @kind object;
  #L302e90.  call temp:= `b`(v5, v1) @signature `Lec/e;.b:(Lac/r1;Lac/r1;)Lac/r1;` @kind static;
  #L302e96.  v5:= temp @kind object;
  #L302e98.  if v5 != v1 then goto L302eb0;
  #L302e9c.  if v1 != 0 then goto L302ea2;
  #L302ea0.  goto L302ea6;
  #L302ea2.  v4:= v4 + 1;
  #L302ea6.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L302eac.  v4:= temp @kind object;
  #L302eae.  return v4 @kind object;
  #L302eb0.  v4:= new `java.lang.IllegalStateException`;
  #L302eb4.  v0:= new `java.lang.StringBuilder`;
  #L302eb8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L302ebe.  v2:= "Flow invariant is violated:\n\t\tEmission from another coroutine is detected.\n\t\tChild of " @kind object;
  #L302ec2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L302ec8.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L302ece.  v5:= ", expected child of " @kind object;
  #L302ed2.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L302ed8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L302ede.  v5:= ".\n\t\tFlowCollector is not thread-safe and concurrent emissions are prohibited.\n\t\tTo mitigate this restriction please use 'channelFlow' builder instead of 'flow'" @kind object;
  #L302ee2.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L302ee8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L302eee.  v5:= temp @kind object;
  #L302ef0.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L302ef6.  v5:= temp @kind object;
  #L302ef8.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L302efe.  throw v4;
}
procedure `java.lang.Object` `invoke`(`ec.e$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lec/e$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L302f10.  v1:= (`java.lang.Number`) v1 @kind object;
  #L302f14.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L302f1a.  v1:= temp;
  #L302f1c.  v2:= (`mb.g$b`) v2 @kind object;
  #L302f20.  call temp:= `a`(v0, v1, v2) @signature `Lec/e$a;.a:(ILmb/g$b;)Ljava/lang/Integer;` @kind virtual;
  #L302f26.  v1:= temp @kind object;
  #L302f28.  return v1 @kind object;
}
