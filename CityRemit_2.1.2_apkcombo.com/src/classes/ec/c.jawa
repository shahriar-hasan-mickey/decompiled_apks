record `ec.c` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.jvm.internal.d` @kind class, `dc.c` @kind interface {
  `dc.c` `ec.c.o` @AccessFlag PUBLIC_FINAL;
  `mb.g` `ec.c.p` @AccessFlag PUBLIC_FINAL;
  `int` `ec.c.q` @AccessFlag PUBLIC_FINAL;
  `mb.g` `ec.c.r` @AccessFlag PRIVATE;
  `mb.d` `ec.c.s` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`ec.c` v2 @kind this, `dc.c` v3 @kind object, `mb.g` v4 @kind object) @signature `Lec/c;.<init>:(Ldc/c;Lmb/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L30319c.  v0:= `@@ec.b.o` @type ^`ec.b` @kind object;
  #L3031a0.  v1:= `@@mb.h.o` @type ^`mb.h` @kind object;
  #L3031a4.  call `<init>`(v2, v0, v1) @signature `Lkotlin/coroutines/jvm/internal/d;.<init>:(Lmb/d;Lmb/g;)V` @kind direct;
  #L3031aa.  v2.`ec.c.o` @type ^`dc.c` := v3 @kind object;
  #L3031ae.  v2.`ec.c.p` @type ^`mb.g` := v4 @kind object;
  #L3031b2.  v3:= 0I;
  #L3031b4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3031ba.  v3:= temp @kind object;
  #L3031bc.  v0:= `@@ec.c$a.o` @type ^`ec.c$a` @kind object;
  #L3031c0.  call temp:= `S`(v4, v3, v0) @signature `Lmb/g;.S:(Ljava/lang/Object;Ltb/p;)Ljava/lang/Object;` @kind interface;
  #L3031c6.  v3:= temp @kind object;
  #L3031c8.  v3:= (`java.lang.Number`) v3 @kind object;
  #L3031cc.  call temp:= `intValue`(v3) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L3031d2.  v3:= temp;
  #L3031d4.  v2.`ec.c.q` @type ^`int` := v3;
  #L3031d8.  return @kind void;
}
procedure `void` `a`(`ec.c` v1 @kind this, `mb.g` v2 @kind object, `mb.g` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lec/c;.a:(Lmb/g;Lmb/g;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L3031ec.  v0:= instanceof @variable v3 @type ^`ec.a` @kind boolean;
  #L3031f0.  if v0 == 0 then goto L3031fe;
  #L3031f4.  v3:= (`ec.a`) v3 @kind object;
  #L3031f8.  call `e`(v1, v3, v4) @signature `Lec/c;.e:(Lec/a;Ljava/lang/Object;)V` @kind direct;
  #L3031fe.  call `a`(v1, v2) @signature `Lec/e;.a:(Lec/c;Lmb/g;)V` @kind static;
  #L303204.  return @kind void;
}
procedure `java.lang.Object` `c`(`ec.c` v2 @kind this, `mb.d` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lec/c;.c:(Lmb/d;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L303090.  call temp:= `getContext`(v3) @signature `Lmb/d;.getContext:()Lmb/g;` @kind interface;
  #L303096.  v0:= temp @kind object;
  #L303098.  call `e`(v0) @signature `Lac/v1;.e:(Lmb/g;)V` @kind static;
  #L30309e.  v1:= v2.`ec.c.r` @type ^`mb.g` @kind object;
  #L3030a2.  if v1 == v0 then goto L3030b0;
  #L3030a6.  call `a`(v2, v0, v1, v4) @signature `Lec/c;.a:(Lmb/g;Lmb/g;Ljava/lang/Object;)V` @kind direct;
  #L3030ac.  v2.`ec.c.r` @type ^`mb.g` := v0 @kind object;
  #L3030b0.  v2.`ec.c.s` @type ^`mb.d` := v3 @kind object;
  #L3030b4.  call temp:= `a`() @signature `Lec/d;.a:()Ltb/q;` @kind static;
  #L3030ba.  v3:= temp @kind object;
  #L3030bc.  v0:= v2.`ec.c.o` @type ^`dc.c` @kind object;
  #L3030c0.  call temp:= `d`(v3, v0, v4, v2) @signature `Ltb/q;.d:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3030c6.  v3:= temp @kind object;
  #L3030c8.  call temp:= `c`() @signature `Lnb/b;.c:()Ljava/lang/Object;` @kind static;
  #L3030ce.  v4:= temp @kind object;
  #L3030d0.  call temp:= `a`(v3, v4) @signature `Lkotlin/jvm/internal/k;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3030d6.  v4:= temp;
  #L3030d8.  if v4 != 0 then goto L3030e2;
  #L3030dc.  v4:= 0I;
  #L3030de.  v2.`ec.c.s` @type ^`mb.d` := v4 @kind object;
  #L3030e2.  return v3 @kind object;
}
procedure `void` `e`(`ec.c` v3 @kind this, `ec.a` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lec/c;.e:(Lec/a;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L303218.  v0:= new `java.lang.IllegalStateException`;
  #L30321c.  v1:= new `java.lang.StringBuilder`;
  #L303220.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L303226.  v2:= "\n            Flow exception transparency is violated:\n                Previous 'emit' call has thrown exception " @kind object;
  #L30322a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L303230.  v4:= v4.`ec.a.o` @type ^`java.lang.Throwable` @kind object;
  #L303234.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30323a.  v4:= ", but then emission attempt of value '" @kind object;
  #L30323e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L303244.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30324a.  v4:= "' has been detected.\n                Emissions from 'catch' blocks are prohibited in order to avoid unspecified behaviour, 'Flow.catch' operator can be used instead.\n                For a more detailed explanation, please refer to Flow documentation.\n            " @kind object;
  #L30324e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L303254.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30325a.  v4:= temp @kind object;
  #L30325c.  call temp:= `e`(v4) @signature `Lzb/e;.e:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L303262.  v4:= temp @kind object;
  #L303264.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L30326a.  v4:= temp @kind object;
  #L30326c.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L303272.  throw v0;
}
procedure `java.lang.Object` `emit`(`ec.c` v1 @kind this, `java.lang.Object` v2 @kind object, `mb.d` v3 @kind object) @signature `Lec/c;.emit:(Ljava/lang/Object;Lmb/d;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30302c.  call temp:= `c`(v1, v3, v2) @signature `Lec/c;.c:(Lmb/d;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L303032.  v2:= temp @kind object;
  #L303034.  call temp:= `c`() @signature `Lnb/b;.c:()Ljava/lang/Object;` @kind static;
  #L30303a.  v0:= temp @kind object;
  #L30303c.  if v2 != v0 then goto L303046;
  #L303040.  call `c`(v3) @signature `Lkotlin/coroutines/jvm/internal/h;.c:(Lmb/d;)V` @kind static;
  #L303046.  call temp:= `c`() @signature `Lnb/b;.c:()Ljava/lang/Object;` @kind static;
  #L30304c.  v3:= temp @kind object;
  #L30304e.  if v2 != v3 then goto L303054;
  #L303052.  return v2 @kind object;
  #L303054.  v2:= `@@jb.s.a` @type ^`jb.s` @kind object;
  #L303058.  return v2 @kind object;
  #L30305a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L30305c.  v0:= new `ec.a`;
  #L303060.  call temp:= `getContext`(v3) @signature `Lmb/d;.getContext:()Lmb/g;` @kind interface;
  #L303066.  v3:= temp @kind object;
  #L303068.  call `<init>`(v0, v2, v3) @signature `Lec/a;.<init>:(Ljava/lang/Throwable;Lmb/g;)V` @kind direct;
  #L30306e.  v1.`ec.c.r` @type ^`mb.g` := v0 @kind object;
  #L303072.  throw v2;
  catch `java.lang.Throwable` @[L30302c..L303034] goto L30305a;
}
procedure `kotlin.coroutines.jvm.internal.e` `getCallerFrame`(`ec.c` v2 @kind this) @signature `Lec/c;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L303154.  v0:= v2.`ec.c.s` @type ^`mb.d` @kind object;
  #L303158.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.jvm.internal.e` @kind boolean;
  #L30315c.  if v1 == 0 then goto L303166;
  #L303160.  v0:= (`kotlin.coroutines.jvm.internal.e`) v0 @kind object;
  #L303164.  goto L303168;
  #L303166.  v0:= 0I;
  #L303168.  return v0 @kind object;
}
procedure `mb.g` `getContext`(`ec.c` v1 @kind this) @signature `Lec/c;.getContext:()Lmb/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30317c.  v0:= v1.`ec.c.r` @type ^`mb.g` @kind object;
  #L303180.  if v0 != 0 then goto L303188;
  #L303184.  v0:= `@@mb.h.o` @type ^`mb.h` @kind object;
  #L303188.  return v0 @kind object;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`ec.c` v1 @kind this) @signature `Lec/c;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L303140.  v0:= 0I;
  #L303142.  return v0 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`ec.c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lec/c;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3030f4.  call temp:= `b`(v4) @signature `Ljb/m;.b:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L3030fa.  v0:= temp @kind object;
  #L3030fc.  if v0 == 0 then goto L303116;
  #L303100.  v1:= new `ec.a`;
  #L303104.  call temp:= `getContext`(v3) @signature `Lec/c;.getContext:()Lmb/g;` @kind virtual;
  #L30310a.  v2:= temp @kind object;
  #L30310c.  call `<init>`(v1, v0, v2) @signature `Lec/a;.<init>:(Ljava/lang/Throwable;Lmb/g;)V` @kind direct;
  #L303112.  v3.`ec.c.r` @type ^`mb.g` := v1 @kind object;
  #L303116.  v0:= v3.`ec.c.s` @type ^`mb.d` @kind object;
  #L30311a.  if v0 == 0 then goto L303124;
  #L30311e.  call `resumeWith`(v0, v4) @signature `Lmb/d;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L303124.  call temp:= `c`() @signature `Lnb/b;.c:()Ljava/lang/Object;` @kind static;
  #L30312a.  v4:= temp @kind object;
  #L30312c.  return v4 @kind object;
}
procedure `void` `releaseIntercepted`(`ec.c` v0 @kind this) @signature `Lec/c;.releaseIntercepted:()V` @AccessFlag PUBLIC {
    temp;

  #L303284.  call `releaseIntercepted`(v0) @signature `Lkotlin/coroutines/jvm/internal/d;.releaseIntercepted:()V` @kind super;
  #L30328a.  return @kind void;
}
