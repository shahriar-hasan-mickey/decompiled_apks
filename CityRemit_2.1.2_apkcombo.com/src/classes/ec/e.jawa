record `ec.e` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `a`(`ec.c` v3 @kind object, `mb.g` v4 @kind object) @signature `Lec/e;.a:(Lec/c;Lmb/g;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L302f94.  v0:= 0I;
  #L302f96.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L302f9c.  v0:= temp @kind object;
  #L302f9e.  v1:= new `ec.e$a`;
  #L302fa2.  call `<init>`(v1, v3) @signature `Lec/e$a;.<init>:(Lec/c;)V` @kind direct;
  #L302fa8.  call temp:= `S`(v4, v0, v1) @signature `Lmb/g;.S:(Ljava/lang/Object;Ltb/p;)Ljava/lang/Object;` @kind interface;
  #L302fae.  v0:= temp @kind object;
  #L302fb0.  v0:= (`java.lang.Number`) v0 @kind object;
  #L302fb4.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L302fba.  v0:= temp;
  #L302fbc.  v1:= v3.`ec.c.q` @type ^`int`;
  #L302fc0.  if v0 != v1 then goto L302fc6;
  #L302fc4.  return @kind void;
  #L302fc6.  v0:= new `java.lang.IllegalStateException`;
  #L302fca.  v1:= new `java.lang.StringBuilder`;
  #L302fce.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L302fd4.  v2:= "Flow invariant is violated:\n\t\tFlow was collected in " @kind object;
  #L302fd8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L302fde.  v3:= v3.`ec.c.p` @type ^`mb.g` @kind object;
  #L302fe2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L302fe8.  v3:= ",\n\t\tbut emission happened in " @kind object;
  #L302fec.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L302ff2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L302ff8.  v3:= ".\n\t\tPlease refer to 'flow' documentation or use 'flowOn' instead" @kind object;
  #L302ffc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L303002.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L303008.  v3:= temp @kind object;
  #L30300a.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L303010.  v3:= temp @kind object;
  #L303012.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L303018.  throw v0;
}
procedure `ac.r1` `b`(`ac.r1` v1 @kind object, `ac.r1` v2 @kind object) @signature `Lec/e;.b:(Lac/r1;Lac/r1;)Lac/r1;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L302f5c.  if v1 != 0 then goto L302f64;
  #L302f60.  v1:= 0I;
  #L302f62.  return v1 @kind object;
  #L302f64.  if v1 != v2 then goto L302f6a;
  #L302f68.  return v1 @kind object;
  #L302f6a.  v0:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.d0` @kind boolean;
  #L302f6e.  if v0 != 0 then goto L302f74;
  #L302f72.  return v1 @kind object;
  #L302f74.  v1:= (`kotlinx.coroutines.internal.d0`) v1 @kind object;
  #L302f78.  call temp:= `D0`(v1) @signature `Lkotlinx/coroutines/internal/d0;.D0:()Lac/r1;` @kind virtual;
  #L302f7e.  v1:= temp @kind object;
  #L302f80.  goto L302f5c;
}
