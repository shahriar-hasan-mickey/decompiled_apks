record `d7.e` @kind class @AccessFlag PUBLIC extends `d7.d` @kind interface {
  `d7.b` `d7.e.a` @AccessFlag PRIVATE_FINAL;
  `f7.h` `d7.e.b` @AccessFlag PRIVATE_FINAL;
  `f7.m` `d7.e.c` @AccessFlag PRIVATE_FINAL;
  `f7.m` `d7.e.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`d7.e` v2 @kind this, `c7.h` v3 @kind object) @signature `Ld7/e;.<init>:(Lc7/h;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2f83cc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f83d2.  v0:= new `d7.b`;
  #L2f83d6.  call temp:= `d`(v3) @signature `Lc7/h;.d:()Lf7/h;` @kind virtual;
  #L2f83dc.  v1:= temp @kind object;
  #L2f83de.  call `<init>`(v0, v1) @signature `Ld7/b;.<init>:(Lf7/h;)V` @kind direct;
  #L2f83e4.  v2.`d7.e.a` @type ^`d7.b` := v0 @kind object;
  #L2f83e8.  call temp:= `d`(v3) @signature `Lc7/h;.d:()Lf7/h;` @kind virtual;
  #L2f83ee.  v0:= temp @kind object;
  #L2f83f0.  v2.`d7.e.b` @type ^`f7.h` := v0 @kind object;
  #L2f83f4.  call temp:= `j`(v3) @signature `Ld7/e;.j:(Lc7/h;)Lf7/m;` @kind static;
  #L2f83fa.  v0:= temp @kind object;
  #L2f83fc.  v2.`d7.e.c` @type ^`f7.m` := v0 @kind object;
  #L2f8400.  call temp:= `b`(v3) @signature `Ld7/e;.b:(Lc7/h;)Lf7/m;` @kind static;
  #L2f8406.  v3:= temp @kind object;
  #L2f8408.  v2.`d7.e.d` @type ^`f7.m` := v3 @kind object;
  #L2f840c.  return @kind void;
}
procedure `f7.m` `b`(`c7.h` v2 @kind object) @signature `Ld7/e;.b:(Lc7/h;)Lf7/m;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2f8314.  call temp:= `m`(v2) @signature `Lc7/h;.m:()Z` @kind virtual;
  #L2f831a.  v0:= temp;
  #L2f831c.  if v0 == 0 then goto L2f8342;
  #L2f8320.  call temp:= `e`(v2) @signature `Lc7/h;.e:()Lf7/b;` @kind virtual;
  #L2f8326.  v0:= temp @kind object;
  #L2f8328.  call temp:= `d`(v2) @signature `Lc7/h;.d:()Lf7/h;` @kind virtual;
  #L2f832e.  v1:= temp @kind object;
  #L2f8330.  call temp:= `f`(v2) @signature `Lc7/h;.f:()Lf7/n;` @kind virtual;
  #L2f8336.  v2:= temp @kind object;
  #L2f8338.  call temp:= `f`(v1, v0, v2) @signature `Lf7/h;.f:(Lf7/b;Lf7/n;)Lf7/m;` @kind virtual;
  #L2f833e.  v2:= temp @kind object;
  #L2f8340.  return v2 @kind object;
  #L2f8342.  call temp:= `d`(v2) @signature `Lc7/h;.d:()Lf7/h;` @kind virtual;
  #L2f8348.  v2:= temp @kind object;
  #L2f834a.  call temp:= `g`(v2) @signature `Lf7/h;.g:()Lf7/m;` @kind virtual;
  #L2f8350.  v2:= temp @kind object;
  #L2f8352.  return v2 @kind object;
}
procedure `f7.m` `j`(`c7.h` v2 @kind object) @signature `Ld7/e;.j:(Lc7/h;)Lf7/m;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2f837c.  call temp:= `o`(v2) @signature `Lc7/h;.o:()Z` @kind virtual;
  #L2f8382.  v0:= temp;
  #L2f8384.  if v0 == 0 then goto L2f83aa;
  #L2f8388.  call temp:= `g`(v2) @signature `Lc7/h;.g:()Lf7/b;` @kind virtual;
  #L2f838e.  v0:= temp @kind object;
  #L2f8390.  call temp:= `d`(v2) @signature `Lc7/h;.d:()Lf7/h;` @kind virtual;
  #L2f8396.  v1:= temp @kind object;
  #L2f8398.  call temp:= `h`(v2) @signature `Lc7/h;.h:()Lf7/n;` @kind virtual;
  #L2f839e.  v2:= temp @kind object;
  #L2f83a0.  call temp:= `f`(v1, v0, v2) @signature `Lf7/h;.f:(Lf7/b;Lf7/n;)Lf7/m;` @kind virtual;
  #L2f83a6.  v2:= temp @kind object;
  #L2f83a8.  return v2 @kind object;
  #L2f83aa.  call temp:= `d`(v2) @signature `Lc7/h;.d:()Lf7/h;` @kind virtual;
  #L2f83b0.  v2:= temp @kind object;
  #L2f83b2.  call temp:= `h`(v2) @signature `Lf7/h;.h:()Lf7/m;` @kind virtual;
  #L2f83b8.  v2:= temp @kind object;
  #L2f83ba.  return v2 @kind object;
}
procedure `f7.m` `a`(`d7.e` v1 @kind this) @signature `Ld7/e;.a:()Lf7/m;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f82fc.  v0:= v1.`d7.e.d` @type ^`f7.m` @kind object;
  #L2f8300.  return v0 @kind object;
}
procedure `f7.m` `c`(`d7.e` v1 @kind this) @signature `Ld7/e;.c:()Lf7/m;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f8364.  v0:= v1.`d7.e.c` @type ^`f7.m` @kind object;
  #L2f8368.  return v0 @kind object;
}
procedure `f7.h` `d`(`d7.e` v1 @kind this) @signature `Ld7/e;.d:()Lf7/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f81e8.  v0:= v1.`d7.e.b` @type ^`f7.h` @kind object;
  #L2f81ec.  return v0 @kind object;
}
procedure `d7.d` `e`(`d7.e` v1 @kind this) @signature `Ld7/e;.e:()Ld7/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f81d0.  v0:= v1.`d7.e.a` @type ^`d7.b` @kind object;
  #L2f81d4.  return v0 @kind object;
}
procedure `f7.i` `f`(`d7.e` v7 @kind this, `f7.i` v8 @kind object, `f7.b` v9 @kind object, `f7.n` v10 @kind object, `x6.l` v11 @kind object, `d7.d$a` v12 @kind object, `d7.a` v13 @kind object) @signature `Ld7/e;.f:(Lf7/i;Lf7/b;Lf7/n;Lx6/l;Ld7/d$a;Ld7/a;)Lf7/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2f8200.  v0:= new `f7.m`;
  #L2f8204.  call `<init>`(v0, v9, v10) @signature `Lf7/m;.<init>:(Lf7/b;Lf7/n;)V` @kind direct;
  #L2f820a.  call temp:= `k`(v7, v0) @signature `Ld7/e;.k:(Lf7/m;)Z` @kind virtual;
  #L2f8210.  v0:= temp;
  #L2f8212.  if v0 != 0 then goto L2f821e;
  #L2f8216.  call temp:= `e0`() @signature `Lf7/g;.e0:()Lf7/g;` @kind static;
  #L2f821c.  v10:= temp @kind object;
  #L2f821e.  v3:= v10 @kind object;
  #L2f8220.  v0:= v7.`d7.e.a` @type ^`d7.b` @kind object;
  #L2f8224.  v1:= v8 @kind object;
  #L2f8226.  v2:= v9 @kind object;
  #L2f8228.  v4:= v11 @kind object;
  #L2f822a.  v5:= v12 @kind object;
  #L2f822c.  v6:= v13 @kind object;
  #L2f822e.  call temp:= `f`(v0, v1, v2, v3, v4, v5, v6) @signature `Ld7/b;.f:(Lf7/i;Lf7/b;Lf7/n;Lx6/l;Ld7/d$a;Ld7/a;)Lf7/i;` @kind virtual;
  #L2f8234.  v8:= temp @kind object;
  #L2f8236.  return v8 @kind object;
}
procedure `boolean` `g`(`d7.e` v1 @kind this) @signature `Ld7/e;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f8174.  v0:= 1I;
  #L2f8176.  return v0;
}
procedure `f7.i` `h`(`d7.e` v0 @kind this, `f7.i` v1 @kind object, `f7.n` v2 @kind object) @signature `Ld7/e;.h:(Lf7/i;Lf7/n;)Lf7/i;` @AccessFlag PUBLIC {
    temp;

  #L2f82e8.  return v1 @kind object;
}
procedure `f7.i` `i`(`d7.e` v3 @kind this, `f7.i` v4 @kind object, `f7.i` v5 @kind object, `d7.a` v6 @kind object) @signature `Ld7/e;.i:(Lf7/i;Lf7/i;Ld7/a;)Lf7/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f8248.  call temp:= `p`(v5) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L2f824e.  v0:= temp @kind object;
  #L2f8250.  call temp:= `A`(v0) @signature `Lf7/n;.A:()Z` @kind interface;
  #L2f8256.  v0:= temp;
  #L2f8258.  if v0 == 0 then goto L2f8272;
  #L2f825c.  call temp:= `e0`() @signature `Lf7/g;.e0:()Lf7/g;` @kind static;
  #L2f8262.  v5:= temp @kind object;
  #L2f8264.  v0:= v3.`d7.e.b` @type ^`f7.h` @kind object;
  #L2f8268.  call temp:= `h`(v5, v0) @signature `Lf7/i;.h:(Lf7/n;Lf7/h;)Lf7/i;` @kind static;
  #L2f826e.  v5:= temp @kind object;
  #L2f8270.  goto L2f82ca;
  #L2f8272.  call temp:= `a`() @signature `Lf7/r;.a:()Lf7/n;` @kind static;
  #L2f8278.  v0:= temp @kind object;
  #L2f827a.  call temp:= `N`(v5, v0) @signature `Lf7/i;.N:(Lf7/n;)Lf7/i;` @kind virtual;
  #L2f8280.  v0:= temp @kind object;
  #L2f8282.  call temp:= `iterator`(v5) @signature `Lf7/i;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L2f8288.  v5:= temp @kind object;
  #L2f828a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2f8290.  v1:= temp;
  #L2f8292.  if v1 == 0 then goto L2f82c8;
  #L2f8296.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2f829c.  v1:= temp @kind object;
  #L2f829e.  v1:= (`f7.m`) v1 @kind object;
  #L2f82a2.  call temp:= `k`(v3, v1) @signature `Ld7/e;.k:(Lf7/m;)Z` @kind virtual;
  #L2f82a8.  v2:= temp;
  #L2f82aa.  if v2 != 0 then goto L2f828a;
  #L2f82ae.  call temp:= `c`(v1) @signature `Lf7/m;.c:()Lf7/b;` @kind virtual;
  #L2f82b4.  v1:= temp @kind object;
  #L2f82b6.  call temp:= `e0`() @signature `Lf7/g;.e0:()Lf7/g;` @kind static;
  #L2f82bc.  v2:= temp @kind object;
  #L2f82be.  call temp:= `G`(v0, v1, v2) @signature `Lf7/i;.G:(Lf7/b;Lf7/n;)Lf7/i;` @kind virtual;
  #L2f82c4.  v0:= temp @kind object;
  #L2f82c6.  goto L2f828a;
  #L2f82c8.  v5:= v0 @kind object;
  #L2f82ca.  v0:= v3.`d7.e.a` @type ^`d7.b` @kind object;
  #L2f82ce.  call temp:= `i`(v0, v4, v5, v6) @signature `Ld7/b;.i:(Lf7/i;Lf7/i;Ld7/a;)Lf7/i;` @kind virtual;
  #L2f82d4.  v4:= temp @kind object;
  #L2f82d6.  return v4 @kind object;
}
procedure `boolean` `k`(`d7.e` v2 @kind this, `f7.m` v3 @kind object) @signature `Ld7/e;.k:(Lf7/m;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f8188.  v0:= v2.`d7.e.b` @type ^`f7.h` @kind object;
  #L2f818c.  call temp:= `c`(v2) @signature `Ld7/e;.c:()Lf7/m;` @kind virtual;
  #L2f8192.  v1:= temp @kind object;
  #L2f8194.  call temp:= `compare`(v0, v1, v3) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L2f819a.  v0:= temp;
  #L2f819c.  if v0 > 0 then goto L2f81bc;
  #L2f81a0.  v0:= v2.`d7.e.b` @type ^`f7.h` @kind object;
  #L2f81a4.  call temp:= `a`(v2) @signature `Ld7/e;.a:()Lf7/m;` @kind virtual;
  #L2f81aa.  v1:= temp @kind object;
  #L2f81ac.  call temp:= `compare`(v0, v3, v1) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L2f81b2.  v3:= temp;
  #L2f81b4.  if v3 > 0 then goto L2f81bc;
  #L2f81b8.  v3:= 1I;
  #L2f81ba.  return v3;
  #L2f81bc.  v3:= 0I;
  #L2f81be.  return v3;
}
