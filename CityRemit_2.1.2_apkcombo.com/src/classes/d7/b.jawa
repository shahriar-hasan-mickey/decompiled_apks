record `d7.b` @kind class @AccessFlag PUBLIC extends `d7.d` @kind interface {
  `f7.h` `d7.b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`d7.b` v0 @kind this, `f7.h` v1 @kind object) @signature `Ld7/b;.<init>:(Lf7/h;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f7cb0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f7cb6.  v0.`d7.b.a` @type ^`f7.h` := v1 @kind object;
  #L2f7cba.  return @kind void;
}
procedure `f7.h` `d`(`d7.b` v1 @kind this) @signature `Ld7/b;.d:()Lf7/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7a2c.  v0:= v1.`d7.b.a` @type ^`f7.h` @kind object;
  #L2f7a30.  return v0 @kind object;
}
procedure `d7.d` `e`(`d7.b` v0 @kind this) @signature `Ld7/b;.e:()Ld7/d;` @AccessFlag PUBLIC {
    temp;

  #L2f7a18.  return v0 @kind object;
}
procedure `f7.i` `f`(`d7.b` v2 @kind this, `f7.i` v3 @kind object, `f7.b` v4 @kind object, `f7.n` v5 @kind object, `x6.l` v6 @kind object, `d7.d$a` v7 @kind object, `d7.a` v8 @kind object) @signature `Ld7/b;.f:(Lf7/i;Lf7/b;Lf7/n;Lx6/l;Ld7/d$a;Ld7/a;)Lf7/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f7a44.  v7:= v2.`d7.b.a` @type ^`f7.h` @kind object;
  #L2f7a48.  call temp:= `y`(v3, v7) @signature `Lf7/i;.y:(Lf7/h;)Z` @kind virtual;
  #L2f7a4e.  v7:= temp;
  #L2f7a50.  v0:= "The index must match the filter" @kind object;
  #L2f7a54.  call `g`(v7, v0) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L2f7a5a.  call temp:= `p`(v3) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L2f7a60.  v7:= temp @kind object;
  #L2f7a62.  call temp:= `z`(v7, v4) @signature `Lf7/n;.z:(Lf7/b;)Lf7/n;` @kind interface;
  #L2f7a68.  v0:= temp @kind object;
  #L2f7a6a.  call temp:= `H`(v0, v6) @signature `Lf7/n;.H:(Lx6/l;)Lf7/n;` @kind interface;
  #L2f7a70.  v1:= temp @kind object;
  #L2f7a72.  call temp:= `H`(v5, v6) @signature `Lf7/n;.H:(Lx6/l;)Lf7/n;` @kind interface;
  #L2f7a78.  v6:= temp @kind object;
  #L2f7a7a.  call temp:= `equals`(v1, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f7a80.  v6:= temp;
  #L2f7a82.  if v6 == 0 then goto L2f7a9c;
  #L2f7a86.  call temp:= `isEmpty`(v0) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L2f7a8c.  v6:= temp;
  #L2f7a8e.  call temp:= `isEmpty`(v5) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L2f7a94.  v1:= temp;
  #L2f7a96.  if v6 != v1 then goto L2f7a9c;
  #L2f7a9a.  return v3 @kind object;
  #L2f7a9c.  if v8 == 0 then goto L2f7afa;
  #L2f7aa0.  call temp:= `isEmpty`(v5) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L2f7aa6.  v6:= temp;
  #L2f7aa8.  if v6 == 0 then goto L2f7ad6;
  #L2f7aac.  call temp:= `J`(v7, v4) @signature `Lf7/n;.J:(Lf7/b;)Z` @kind interface;
  #L2f7ab2.  v6:= temp;
  #L2f7ab4.  if v6 == 0 then goto L2f7ac2;
  #L2f7ab8.  call temp:= `h`(v4, v0) @signature `Lc7/c;.h:(Lf7/b;Lf7/n;)Lc7/c;` @kind static;
  #L2f7abe.  v6:= temp @kind object;
  #L2f7ac0.  goto L2f7af4;
  #L2f7ac2.  call temp:= `A`(v7) @signature `Lf7/n;.A:()Z` @kind interface;
  #L2f7ac8.  v6:= temp;
  #L2f7aca.  v8:= "A child remove without an old child only makes sense on a leaf node" @kind object;
  #L2f7ace.  call `g`(v6, v8) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L2f7ad4.  goto L2f7afa;
  #L2f7ad6.  call temp:= `isEmpty`(v0) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L2f7adc.  v6:= temp;
  #L2f7ade.  if v6 == 0 then goto L2f7aec;
  #L2f7ae2.  call temp:= `c`(v4, v5) @signature `Lc7/c;.c:(Lf7/b;Lf7/n;)Lc7/c;` @kind static;
  #L2f7ae8.  v6:= temp @kind object;
  #L2f7aea.  goto L2f7af4;
  #L2f7aec.  call temp:= `e`(v4, v5, v0) @signature `Lc7/c;.e:(Lf7/b;Lf7/n;Lf7/n;)Lc7/c;` @kind static;
  #L2f7af2.  v6:= temp @kind object;
  #L2f7af4.  call `b`(v8, v6) @signature `Ld7/a;.b:(Lc7/c;)V` @kind virtual;
  #L2f7afa.  call temp:= `A`(v7) @signature `Lf7/n;.A:()Z` @kind interface;
  #L2f7b00.  v6:= temp;
  #L2f7b02.  if v6 == 0 then goto L2f7b14;
  #L2f7b06.  call temp:= `isEmpty`(v5) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L2f7b0c.  v6:= temp;
  #L2f7b0e.  if v6 == 0 then goto L2f7b14;
  #L2f7b12.  return v3 @kind object;
  #L2f7b14.  call temp:= `G`(v3, v4, v5) @signature `Lf7/i;.G:(Lf7/b;Lf7/n;)Lf7/i;` @kind virtual;
  #L2f7b1a.  v3:= temp @kind object;
  #L2f7b1c.  return v3 @kind object;
}
procedure `boolean` `g`(`d7.b` v1 @kind this) @signature `Ld7/b;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7a04.  v0:= 0I;
  #L2f7a06.  return v0;
}
procedure `f7.i` `h`(`d7.b` v1 @kind this, `f7.i` v2 @kind object, `f7.n` v3 @kind object) @signature `Ld7/b;.h:(Lf7/i;Lf7/n;)Lf7/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7c80.  call temp:= `p`(v2) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L2f7c86.  v0:= temp @kind object;
  #L2f7c88.  call temp:= `isEmpty`(v0) @signature `Lf7/n;.isEmpty:()Z` @kind interface;
  #L2f7c8e.  v0:= temp;
  #L2f7c90.  if v0 == 0 then goto L2f7c96;
  #L2f7c94.  return v2 @kind object;
  #L2f7c96.  call temp:= `N`(v2, v3) @signature `Lf7/i;.N:(Lf7/n;)Lf7/i;` @kind virtual;
  #L2f7c9c.  v2:= temp @kind object;
  #L2f7c9e.  return v2 @kind object;
}
procedure `f7.i` `i`(`d7.b` v4 @kind this, `f7.i` v5 @kind object, `f7.i` v6 @kind object, `d7.a` v7 @kind object) @signature `Ld7/b;.i:(Lf7/i;Lf7/i;Ld7/a;)Lf7/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f7b30.  v0:= v4.`d7.b.a` @type ^`f7.h` @kind object;
  #L2f7b34.  call temp:= `y`(v6, v0) @signature `Lf7/i;.y:(Lf7/h;)Z` @kind virtual;
  #L2f7b3a.  v0:= temp;
  #L2f7b3c.  v1:= "Can't use IndexedNode that doesn't have filter's index" @kind object;
  #L2f7b40.  call `g`(v0, v1) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L2f7b46.  if v7 == 0 then goto L2f7c6c;
  #L2f7b4a.  call temp:= `p`(v5) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L2f7b50.  v0:= temp @kind object;
  #L2f7b52.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2f7b58.  v0:= temp @kind object;
  #L2f7b5a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2f7b60.  v1:= temp;
  #L2f7b62.  if v1 == 0 then goto L2f7bae;
  #L2f7b66.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2f7b6c.  v1:= temp @kind object;
  #L2f7b6e.  v1:= (`f7.m`) v1 @kind object;
  #L2f7b72.  call temp:= `p`(v6) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L2f7b78.  v2:= temp @kind object;
  #L2f7b7a.  call temp:= `c`(v1) @signature `Lf7/m;.c:()Lf7/b;` @kind virtual;
  #L2f7b80.  v3:= temp @kind object;
  #L2f7b82.  call temp:= `J`(v2, v3) @signature `Lf7/n;.J:(Lf7/b;)Z` @kind interface;
  #L2f7b88.  v2:= temp;
  #L2f7b8a.  if v2 != 0 then goto L2f7b5a;
  #L2f7b8e.  call temp:= `c`(v1) @signature `Lf7/m;.c:()Lf7/b;` @kind virtual;
  #L2f7b94.  v2:= temp @kind object;
  #L2f7b96.  call temp:= `d`(v1) @signature `Lf7/m;.d:()Lf7/n;` @kind virtual;
  #L2f7b9c.  v1:= temp @kind object;
  #L2f7b9e.  call temp:= `h`(v2, v1) @signature `Lc7/c;.h:(Lf7/b;Lf7/n;)Lc7/c;` @kind static;
  #L2f7ba4.  v1:= temp @kind object;
  #L2f7ba6.  call `b`(v7, v1) @signature `Ld7/a;.b:(Lc7/c;)V` @kind virtual;
  #L2f7bac.  goto L2f7b5a;
  #L2f7bae.  call temp:= `p`(v6) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L2f7bb4.  v0:= temp @kind object;
  #L2f7bb6.  call temp:= `A`(v0) @signature `Lf7/n;.A:()Z` @kind interface;
  #L2f7bbc.  v0:= temp;
  #L2f7bbe.  if v0 != 0 then goto L2f7c6c;
  #L2f7bc2.  call temp:= `p`(v6) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L2f7bc8.  v0:= temp @kind object;
  #L2f7bca.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2f7bd0.  v0:= temp @kind object;
  #L2f7bd2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2f7bd8.  v1:= temp;
  #L2f7bda.  if v1 == 0 then goto L2f7c6c;
  #L2f7bde.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2f7be4.  v1:= temp @kind object;
  #L2f7be6.  v1:= (`f7.m`) v1 @kind object;
  #L2f7bea.  call temp:= `p`(v5) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L2f7bf0.  v2:= temp @kind object;
  #L2f7bf2.  call temp:= `c`(v1) @signature `Lf7/m;.c:()Lf7/b;` @kind virtual;
  #L2f7bf8.  v3:= temp @kind object;
  #L2f7bfa.  call temp:= `J`(v2, v3) @signature `Lf7/n;.J:(Lf7/b;)Z` @kind interface;
  #L2f7c00.  v2:= temp;
  #L2f7c02.  if v2 == 0 then goto L2f7c52;
  #L2f7c06.  call temp:= `p`(v5) @signature `Lf7/i;.p:()Lf7/n;` @kind virtual;
  #L2f7c0c.  v2:= temp @kind object;
  #L2f7c0e.  call temp:= `c`(v1) @signature `Lf7/m;.c:()Lf7/b;` @kind virtual;
  #L2f7c14.  v3:= temp @kind object;
  #L2f7c16.  call temp:= `z`(v2, v3) @signature `Lf7/n;.z:(Lf7/b;)Lf7/n;` @kind interface;
  #L2f7c1c.  v2:= temp @kind object;
  #L2f7c1e.  call temp:= `d`(v1) @signature `Lf7/m;.d:()Lf7/n;` @kind virtual;
  #L2f7c24.  v3:= temp @kind object;
  #L2f7c26.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f7c2c.  v3:= temp;
  #L2f7c2e.  if v3 != 0 then goto L2f7bd2;
  #L2f7c32.  call temp:= `c`(v1) @signature `Lf7/m;.c:()Lf7/b;` @kind virtual;
  #L2f7c38.  v3:= temp @kind object;
  #L2f7c3a.  call temp:= `d`(v1) @signature `Lf7/m;.d:()Lf7/n;` @kind virtual;
  #L2f7c40.  v1:= temp @kind object;
  #L2f7c42.  call temp:= `e`(v3, v1, v2) @signature `Lc7/c;.e:(Lf7/b;Lf7/n;Lf7/n;)Lc7/c;` @kind static;
  #L2f7c48.  v1:= temp @kind object;
  #L2f7c4a.  call `b`(v7, v1) @signature `Ld7/a;.b:(Lc7/c;)V` @kind virtual;
  #L2f7c50.  goto L2f7bd2;
  #L2f7c52.  call temp:= `c`(v1) @signature `Lf7/m;.c:()Lf7/b;` @kind virtual;
  #L2f7c58.  v2:= temp @kind object;
  #L2f7c5a.  call temp:= `d`(v1) @signature `Lf7/m;.d:()Lf7/n;` @kind virtual;
  #L2f7c60.  v1:= temp @kind object;
  #L2f7c62.  call temp:= `c`(v2, v1) @signature `Lc7/c;.c:(Lf7/b;Lf7/n;)Lc7/c;` @kind static;
  #L2f7c68.  v1:= temp @kind object;
  #L2f7c6a.  goto L2f7c4a;
  #L2f7c6c.  return v6 @kind object;
}
