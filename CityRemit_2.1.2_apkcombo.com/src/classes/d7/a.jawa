record `d7.a` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `d7.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`d7.a` v1 @kind this) @signature `Ld7/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2f783c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f7842.  v0:= new `java.util.HashMap`;
  #L2f7846.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2f784c.  v1.`d7.a.a` @type ^`java.util.Map` := v0 @kind object;
  #L2f7850.  return @kind void;
}
procedure `java.util.List` `a`(`d7.a` v2 @kind this) @signature `Ld7/a;.a:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f7814.  v0:= new `java.util.ArrayList`;
  #L2f7818.  v1:= v2.`d7.a.a` @type ^`java.util.Map` @kind object;
  #L2f781c.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L2f7822.  v1:= temp @kind object;
  #L2f7824.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2f782a.  return v0 @kind object;
}
procedure `void` `b`(`d7.a` v6 @kind this, `c7.c` v7 @kind object) @signature `Ld7/a;.b:(Lc7/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2f7864.  call temp:= `j`(v7) @signature `Lc7/c;.j:()Lc7/e$a;` @kind virtual;
  #L2f786a.  v0:= temp @kind object;
  #L2f786c.  call temp:= `i`(v7) @signature `Lc7/c;.i:()Lf7/b;` @kind virtual;
  #L2f7872.  v1:= temp @kind object;
  #L2f7874.  v2:= `@@c7.e$a.p` @type ^`c7.e$a` @kind object;
  #L2f7878.  v3:= 1I;
  #L2f787a.  if v0 == v2 then goto L2f7894;
  #L2f787e.  v4:= `@@c7.e$a.r` @type ^`c7.e$a` @kind object;
  #L2f7882.  if v0 == v4 then goto L2f7894;
  #L2f7886.  v4:= `@@c7.e$a.o` @type ^`c7.e$a` @kind object;
  #L2f788a.  if v0 != v4 then goto L2f7890;
  #L2f788e.  goto L2f7894;
  #L2f7890.  v4:= 0I;
  #L2f7892.  goto L2f7896;
  #L2f7894.  v4:= 1I;
  #L2f7896.  v5:= "Only child changes supported for tracking" @kind object;
  #L2f789a.  call `g`(v4, v5) @signature `La7/m;.g:(ZLjava/lang/String;)V` @kind static;
  #L2f78a0.  call temp:= `i`(v7) @signature `Lc7/c;.i:()Lf7/b;` @kind virtual;
  #L2f78a6.  v4:= temp @kind object;
  #L2f78a8.  call temp:= `t`(v4) @signature `Lf7/b;.t:()Z` @kind virtual;
  #L2f78ae.  v4:= temp;
  #L2f78b0.  v3:= v3 ^~ v4 @kind int;
  #L2f78b2.  call `f`(v3) @signature `La7/m;.f:(Z)V` @kind static;
  #L2f78b8.  v3:= v6.`d7.a.a` @type ^`java.util.Map` @kind object;
  #L2f78bc.  call temp:= `containsKey`(v3, v1) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L2f78c2.  v3:= temp;
  #L2f78c4.  if v3 == 0 then goto L2f79de;
  #L2f78c8.  v3:= v6.`d7.a.a` @type ^`java.util.Map` @kind object;
  #L2f78cc.  call temp:= `get`(v3, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2f78d2.  v3:= temp @kind object;
  #L2f78d4.  v3:= (`c7.c`) v3 @kind object;
  #L2f78d8.  call temp:= `j`(v3) @signature `Lc7/c;.j:()Lc7/e$a;` @kind virtual;
  #L2f78de.  v4:= temp @kind object;
  #L2f78e0.  if v0 != v2 then goto L2f7918;
  #L2f78e4.  v5:= `@@c7.e$a.o` @type ^`c7.e$a` @kind object;
  #L2f78e8.  if v4 != v5 then goto L2f7918;
  #L2f78ec.  v0:= v6.`d7.a.a` @type ^`java.util.Map` @kind object;
  #L2f78f0.  call temp:= `i`(v7) @signature `Lc7/c;.i:()Lf7/b;` @kind virtual;
  #L2f78f6.  v2:= temp @kind object;
  #L2f78f8.  call temp:= `k`(v7) @signature `Lc7/c;.k:()Lf7/i;` @kind virtual;
  #L2f78fe.  v7:= temp @kind object;
  #L2f7900.  call temp:= `k`(v3) @signature `Lc7/c;.k:()Lf7/i;` @kind virtual;
  #L2f7906.  v3:= temp @kind object;
  #L2f7908.  call temp:= `d`(v1, v7, v3) @signature `Lc7/c;.d:(Lf7/b;Lf7/i;Lf7/i;)Lc7/c;` @kind static;
  #L2f790e.  v7:= temp @kind object;
  #L2f7910.  call temp:= `put`(v0, v2, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2f7916.  goto L2f79f0;
  #L2f7918.  v5:= `@@c7.e$a.o` @type ^`c7.e$a` @kind object;
  #L2f791c.  if v0 != v5 then goto L2f7930;
  #L2f7920.  if v4 != v2 then goto L2f7930;
  #L2f7924.  v7:= v6.`d7.a.a` @type ^`java.util.Map` @kind object;
  #L2f7928.  call temp:= `remove`(v7, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2f792e.  goto L2f79f0;
  #L2f7930.  if v0 != v5 then goto L2f7958;
  #L2f7934.  v5:= `@@c7.e$a.r` @type ^`c7.e$a` @kind object;
  #L2f7938.  if v4 != v5 then goto L2f7958;
  #L2f793c.  v7:= v6.`d7.a.a` @type ^`java.util.Map` @kind object;
  #L2f7940.  call temp:= `l`(v3) @signature `Lc7/c;.l:()Lf7/i;` @kind virtual;
  #L2f7946.  v0:= temp @kind object;
  #L2f7948.  call temp:= `g`(v1, v0) @signature `Lc7/c;.g:(Lf7/b;Lf7/i;)Lc7/c;` @kind static;
  #L2f794e.  v0:= temp @kind object;
  #L2f7950.  call temp:= `put`(v7, v1, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2f7956.  goto L2f79f0;
  #L2f7958.  v5:= `@@c7.e$a.r` @type ^`c7.e$a` @kind object;
  #L2f795c.  if v0 != v5 then goto L2f797a;
  #L2f7960.  if v4 != v2 then goto L2f797a;
  #L2f7964.  v0:= v6.`d7.a.a` @type ^`java.util.Map` @kind object;
  #L2f7968.  call temp:= `k`(v7) @signature `Lc7/c;.k:()Lf7/i;` @kind virtual;
  #L2f796e.  v7:= temp @kind object;
  #L2f7970.  call temp:= `b`(v1, v7) @signature `Lc7/c;.b:(Lf7/b;Lf7/i;)Lc7/c;` @kind static;
  #L2f7976.  v7:= temp @kind object;
  #L2f7978.  goto L2f79ea;
  #L2f797a.  if v0 != v5 then goto L2f79a0;
  #L2f797e.  if v4 != v5 then goto L2f79a0;
  #L2f7982.  v0:= v6.`d7.a.a` @type ^`java.util.Map` @kind object;
  #L2f7986.  call temp:= `k`(v7) @signature `Lc7/c;.k:()Lf7/i;` @kind virtual;
  #L2f798c.  v7:= temp @kind object;
  #L2f798e.  call temp:= `l`(v3) @signature `Lc7/c;.l:()Lf7/i;` @kind virtual;
  #L2f7994.  v2:= temp @kind object;
  #L2f7996.  call temp:= `d`(v1, v7, v2) @signature `Lc7/c;.d:(Lf7/b;Lf7/i;Lf7/i;)Lc7/c;` @kind static;
  #L2f799c.  v7:= temp @kind object;
  #L2f799e.  goto L2f79ea;
  #L2f79a0.  v0:= new `java.lang.IllegalStateException`;
  #L2f79a4.  v1:= new `java.lang.StringBuilder`;
  #L2f79a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f79ae.  v2:= "Illegal combination of changes: " @kind object;
  #L2f79b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f79b8.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f79be.  v7:= " occurred after " @kind object;
  #L2f79c2.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f79c8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f79ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f79d4.  v7:= temp @kind object;
  #L2f79d6.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f79dc.  throw v0;
  #L2f79de.  v0:= v6.`d7.a.a` @type ^`java.util.Map` @kind object;
  #L2f79e2.  call temp:= `i`(v7) @signature `Lc7/c;.i:()Lf7/b;` @kind virtual;
  #L2f79e8.  v1:= temp @kind object;
  #L2f79ea.  call temp:= `put`(v0, v1, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2f79f0.  return @kind void;
}
