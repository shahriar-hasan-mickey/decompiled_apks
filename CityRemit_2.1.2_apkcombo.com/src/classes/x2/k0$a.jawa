record `x2.k0$a` @kind class @AccessFlag FINAL extends `r3.b$a` @kind interface {
  `long` `x2.k0$a.a` @AccessFlag PUBLIC;
  `long` `x2.k0$a.b` @AccessFlag PUBLIC;
  `r3.a` `x2.k0$a.c` @AccessFlag PUBLIC;
  `x2.k0$a` `x2.k0$a.d` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`x2.k0$a` v0 @kind this, `long` v1 , `int` v3 ) @signature `Lx2/k0$a;.<init>:(JI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4de890.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4de896.  call `d`(v0, v1, v3) @signature `Lx2/k0$a;.d:(JI)V` @kind virtual;
  #L4de89c.  return @kind void;
}
procedure `r3.a` `a`(`x2.k0$a` v1 @kind this) @signature `Lx2/k0$a;.a:()Lr3/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de844.  v0:= v1.`x2.k0$a.c` @type ^`r3.a` @kind object;
  #L4de848.  call temp:= `e`(v0) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4de84e.  v0:= temp @kind object;
  #L4de850.  v0:= (`r3.a`) v0 @kind object;
  #L4de854.  return v0 @kind object;
}
procedure `x2.k0$a` `b`(`x2.k0$a` v2 @kind this) @signature `Lx2/k0$a;.b:()Lx2/k0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4de900.  v0:= 0I;
  #L4de902.  v2.`x2.k0$a.c` @type ^`r3.a` := v0 @kind object;
  #L4de906.  v1:= v2.`x2.k0$a.d` @type ^`x2.k0$a` @kind object;
  #L4de90a.  v2.`x2.k0$a.d` @type ^`x2.k0$a` := v0 @kind object;
  #L4de90e.  return v1 @kind object;
}
procedure `void` `c`(`x2.k0$a` v0 @kind this, `r3.a` v1 @kind object, `x2.k0$a` v2 @kind object) @signature `Lx2/k0$a;.c:(Lr3/a;Lx2/k0$a;)V` @AccessFlag PUBLIC {
    temp;

  #L4de8b0.  v0.`x2.k0$a.c` @type ^`r3.a` := v1 @kind object;
  #L4de8b4.  v0.`x2.k0$a.d` @type ^`x2.k0$a` := v2 @kind object;
  #L4de8b8.  return @kind void;
}
procedure `void` `d`(`x2.k0$a` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lx2/k0$a;.d:(JI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4de8cc.  v0:= v2.`x2.k0$a.c` @type ^`r3.a` @kind object;
  #L4de8d0.  if v0 != 0 then goto L4de8d8;
  #L4de8d4.  v0:= 1I;
  #L4de8d6.  goto L4de8da;
  #L4de8d8.  v0:= 0I;
  #L4de8da.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L4de8e0.  v2.`x2.k0$a.a` @type ^`long` := v3 @kind wide;
  #L4de8e4.  v0:= (`long`) v5 @kind i2l;
  #L4de8e6.  v3:= v3 + v0 @kind long;
  #L4de8e8.  v2.`x2.k0$a.b` @type ^`long` := v3 @kind wide;
  #L4de8ec.  return @kind void;
}
procedure `int` `e`(`x2.k0$a` v2 @kind this, `long` v3 ) @signature `Lx2/k0$a;.e:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4de820.  v0:= v2.`x2.k0$a.a` @type ^`long` @kind wide;
  #L4de824.  v3:= v3 - v0 @kind long;
  #L4de826.  v4:= (`int`) v3 @kind l2i;
  #L4de828.  v3:= v2.`x2.k0$a.c` @type ^`r3.a` @kind object;
  #L4de82c.  v3:= v3.`r3.a.b` @type ^`int`;
  #L4de830.  v4:= v4 + v3 @kind int;
  #L4de832.  return v4;
}
procedure `r3.b$a` `next`(`x2.k0$a` v2 @kind this) @signature `Lx2/k0$a;.next:()Lr3/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4de868.  v0:= v2.`x2.k0$a.d` @type ^`x2.k0$a` @kind object;
  #L4de86c.  if v0 == 0 then goto L4de87c;
  #L4de870.  v1:= v0.`x2.k0$a.c` @type ^`r3.a` @kind object;
  #L4de874.  if v1 != 0 then goto L4de87a;
  #L4de878.  goto L4de87c;
  #L4de87a.  return v0 @kind object;
  #L4de87c.  v0:= 0I;
  #L4de87e.  return v0 @kind object;
}
