record `x2.p0$a` @kind class @AccessFlag PUBLIC extends `x2.p0` @kind interface {
  `java.util.Random` `x2.p0$a.a` @AccessFlag PRIVATE_FINAL;
  `int`[] `x2.p0$a.b` @AccessFlag PRIVATE_FINAL;
  `int`[] `x2.p0$a.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`x2.p0$a` v1 @kind this, `int` v2 ) @signature `Lx2/p0$a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4e060c.  v0:= new `java.util.Random`;
  #L4e0610.  call `<init>`(v0) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L4e0616.  call `<init>`(v1, v2, v0) @signature `Lx2/p0$a;.<init>:(ILjava/util/Random;)V` @kind direct;
  #L4e061c.  return @kind void;
}
procedure `void` `<init>`(`x2.p0$a` v0 @kind this, `int` v1 , `java.util.Random` v2 @kind object) @signature `Lx2/p0$a;.<init>:(ILjava/util/Random;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4e0630.  call temp:= `i`(v1, v2) @signature `Lx2/p0$a;.i:(ILjava/util/Random;)[I` @kind static;
  #L4e0636.  v1:= temp @kind object;
  #L4e0638.  call `<init>`(v0, v1, v2) @signature `Lx2/p0$a;.<init>:([ILjava/util/Random;)V` @kind direct;
  #L4e063e.  return @kind void;
}
procedure `void` `<init>`(`x2.p0$a` v2 @kind this, `int`[] v3 @kind object, `java.util.Random` v4 @kind object) @signature `Lx2/p0$a;.<init>:([ILjava/util/Random;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e0650.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e0656.  v2.`x2.p0$a.b` @type ^`int`[] := v3 @kind object;
  #L4e065a.  v2.`x2.p0$a.a` @type ^`java.util.Random` := v4 @kind object;
  #L4e065e.  v4:= length @variable v3;
  #L4e0660.  v4:= new `int`[v4];
  #L4e0664.  v2.`x2.p0$a.c` @type ^`int`[] := v4 @kind object;
  #L4e0668.  v4:= 0I;
  #L4e066a.  v0:= length @variable v3;
  #L4e066c.  if v4 >= v0 then goto L4e0682;
  #L4e0670.  v0:= v2.`x2.p0$a.c` @type ^`int`[] @kind object;
  #L4e0674.  v1:= v3[v4];
  #L4e0678.  v0[v1]:= v4;
  #L4e067c.  v4:= v4 + 1;
  #L4e0680.  goto L4e066a;
  #L4e0682.  return @kind void;
}
procedure `int`[] `i`(`int` v5 , `java.util.Random` v6 @kind object) @signature `Lx2/p0$a;.i:(ILjava/util/Random;)[I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e05d4.  v0:= new `int`[v5];
  #L4e05d8.  v1:= 0I;
  #L4e05da.  if v1 >= v5 then goto L4e05fa;
  #L4e05de.  v2:= v1 + 1;
  #L4e05e2.  call temp:= `nextInt`(v6, v2) @signature `Ljava/util/Random;.nextInt:(I)I` @kind virtual;
  #L4e05e8.  v3:= temp;
  #L4e05ea.  v4:= v0[v3];
  #L4e05ee.  v0[v1]:= v4;
  #L4e05f2.  v0[v3]:= v1;
  #L4e05f6.  v1:= v2;
  #L4e05f8.  goto L4e05da;
  #L4e05fa.  return v0 @kind object;
}
procedure `int` `a`(`x2.p0$a` v1 @kind this) @signature `Lx2/p0$a;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e0560.  v0:= v1.`x2.p0$a.b` @type ^`int`[] @kind object;
  #L4e0564.  v0:= length @variable v0;
  #L4e0566.  return v0;
}
procedure `x2.p0` `b`(`x2.p0$a` v7 @kind this, `int` v8 , `int` v9 ) @signature `Lx2/p0$a;.b:(II)Lx2/p0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4e07ac.  v0:= v9 - v8 @kind int;
  #L4e07b0.  v1:= v7.`x2.p0$a.b` @type ^`int`[] @kind object;
  #L4e07b4.  v1:= length @variable v1;
  #L4e07b6.  v1:= v1 - v0 @kind int;
  #L4e07b8.  v1:= new `int`[v1];
  #L4e07bc.  v2:= 0I;
  #L4e07be.  v3:= 0I;
  #L4e07c0.  v4:= v7.`x2.p0$a.b` @type ^`int`[] @kind object;
  #L4e07c4.  v5:= length @variable v4;
  #L4e07c6.  if v2 >= v5 then goto L4e0802;
  #L4e07ca.  v5:= v4[v2];
  #L4e07ce.  if v5 < v8 then goto L4e07e0;
  #L4e07d2.  v5:= v4[v2];
  #L4e07d6.  if v5 >= v9 then goto L4e07e0;
  #L4e07da.  v3:= v3 + 1;
  #L4e07de.  goto L4e07fc;
  #L4e07e0.  v5:= v2 - v3 @kind int;
  #L4e07e4.  v6:= v4[v2];
  #L4e07e8.  if v6 < v8 then goto L4e07f4;
  #L4e07ec.  v4:= v4[v2];
  #L4e07f0.  v4:= v4 - v0 @kind int;
  #L4e07f2.  goto L4e07f8;
  #L4e07f4.  v4:= v4[v2];
  #L4e07f8.  v1[v5]:= v4;
  #L4e07fc.  v2:= v2 + 1;
  #L4e0800.  goto L4e07c0;
  #L4e0802.  v8:= new `x2.p0$a`;
  #L4e0806.  v9:= new `java.util.Random`;
  #L4e080a.  v0:= v7.`x2.p0$a.a` @type ^`java.util.Random` @kind object;
  #L4e080e.  call temp:= `nextLong`(v0) @signature `Ljava/util/Random;.nextLong:()J` @kind virtual;
  #L4e0814.  v2:= temp @kind wide;
  #L4e0816.  call `<init>`(v9, v2) @signature `Ljava/util/Random;.<init>:(J)V` @kind direct;
  #L4e081c.  call `<init>`(v8, v1, v9) @signature `Lx2/p0$a;.<init>:([ILjava/util/Random;)V` @kind direct;
  #L4e0822.  return v8 @kind object;
}
procedure `int` `c`(`x2.p0$a` v2 @kind this, `int` v3 ) @signature `Lx2/p0$a;.c:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e0578.  v0:= v2.`x2.p0$a.c` @type ^`int`[] @kind object;
  #L4e057c.  v3:= v0[v3];
  #L4e0580.  v3:= v3 + 1;
  #L4e0584.  v0:= v2.`x2.p0$a.b` @type ^`int`[] @kind object;
  #L4e0588.  v1:= length @variable v0;
  #L4e058a.  if v3 >= v1 then goto L4e0594;
  #L4e058e.  v3:= v0[v3];
  #L4e0592.  goto L4e0596;
  #L4e0594.  v3:= -1I;
  #L4e0596.  return v3;
}
procedure `x2.p0` `d`(`x2.p0$a` v8 @kind this, `int` v9 , `int` v10 ) @signature `Lx2/p0$a;.d:(II)Lx2/p0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4e06c8.  v0:= new `int`[v10];
  #L4e06cc.  v1:= new `int`[v10];
  #L4e06d0.  v2:= 0I;
  #L4e06d2.  v3:= 0I;
  #L4e06d4.  if v3 >= v10 then goto L4e0714;
  #L4e06d8.  v4:= v8.`x2.p0$a.a` @type ^`java.util.Random` @kind object;
  #L4e06dc.  v5:= v8.`x2.p0$a.b` @type ^`int`[] @kind object;
  #L4e06e0.  v5:= length @variable v5;
  #L4e06e2.  v5:= v5 + 1;
  #L4e06e6.  call temp:= `nextInt`(v4, v5) @signature `Ljava/util/Random;.nextInt:(I)I` @kind virtual;
  #L4e06ec.  v4:= temp;
  #L4e06ee.  v0[v3]:= v4;
  #L4e06f2.  v4:= v8.`x2.p0$a.a` @type ^`java.util.Random` @kind object;
  #L4e06f6.  v5:= v3 + 1;
  #L4e06fa.  call temp:= `nextInt`(v4, v5) @signature `Ljava/util/Random;.nextInt:(I)I` @kind virtual;
  #L4e0700.  v4:= temp;
  #L4e0702.  v6:= v1[v4];
  #L4e0706.  v1[v3]:= v6;
  #L4e070a.  v3:= v3 + v9 @kind int;
  #L4e070c.  v1[v4]:= v3;
  #L4e0710.  v3:= v5;
  #L4e0712.  goto L4e06d4;
  #L4e0714.  call `sort`(v0) @signature `Ljava/util/Arrays;.sort:([I)V` @kind static;
  #L4e071a.  v3:= v8.`x2.p0$a.b` @type ^`int`[] @kind object;
  #L4e071e.  v3:= length @variable v3;
  #L4e0720.  v3:= v3 + v10 @kind int;
  #L4e0722.  v3:= new `int`[v3];
  #L4e0726.  v4:= 0I;
  #L4e0728.  v5:= 0I;
  #L4e072a.  v6:= v8.`x2.p0$a.b` @type ^`int`[] @kind object;
  #L4e072e.  v7:= length @variable v6;
  #L4e0730.  v7:= v7 + v10 @kind int;
  #L4e0732.  if v2 >= v7 then goto L4e0778;
  #L4e0736.  if v4 >= v10 then goto L4e0752;
  #L4e073a.  v7:= v0[v4];
  #L4e073e.  if v5 != v7 then goto L4e0752;
  #L4e0742.  v6:= v4 + 1;
  #L4e0746.  v4:= v1[v4];
  #L4e074a.  v3[v2]:= v4;
  #L4e074e.  v4:= v6;
  #L4e0750.  goto L4e0772;
  #L4e0752.  v7:= v5 + 1;
  #L4e0756.  v5:= v6[v5];
  #L4e075a.  v3[v2]:= v5;
  #L4e075e.  v5:= v3[v2];
  #L4e0762.  if v5 < v9 then goto L4e0770;
  #L4e0766.  v5:= v3[v2];
  #L4e076a.  v5:= v5 + v10 @kind int;
  #L4e076c.  v3[v2]:= v5;
  #L4e0770.  v5:= v7;
  #L4e0772.  v2:= v2 + 1;
  #L4e0776.  goto L4e072a;
  #L4e0778.  v9:= new `x2.p0$a`;
  #L4e077c.  v10:= new `java.util.Random`;
  #L4e0780.  v0:= v8.`x2.p0$a.a` @type ^`java.util.Random` @kind object;
  #L4e0784.  call temp:= `nextLong`(v0) @signature `Ljava/util/Random;.nextLong:()J` @kind virtual;
  #L4e078a.  v0:= temp @kind wide;
  #L4e078c.  call `<init>`(v10, v0) @signature `Ljava/util/Random;.<init>:(J)V` @kind direct;
  #L4e0792.  call `<init>`(v9, v3, v10) @signature `Lx2/p0$a;.<init>:([ILjava/util/Random;)V` @kind direct;
  #L4e0798.  return v9 @kind object;
}
procedure `int` `e`(`x2.p0$a` v2 @kind this) @signature `Lx2/p0$a;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e050c.  v0:= v2.`x2.p0$a.b` @type ^`int`[] @kind object;
  #L4e0510.  v1:= length @variable v0;
  #L4e0512.  if v1 <= 0 then goto L4e051e;
  #L4e0516.  v1:= 0I;
  #L4e0518.  v0:= v0[v1];
  #L4e051c.  goto L4e0520;
  #L4e051e.  v0:= -1I;
  #L4e0520.  return v0;
}
procedure `int` `f`(`x2.p0$a` v1 @kind this, `int` v2 ) @signature `Lx2/p0$a;.f:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e05a8.  v0:= v1.`x2.p0$a.c` @type ^`int`[] @kind object;
  #L4e05ac.  v2:= v0[v2];
  #L4e05b0.  v0:= -1I;
  #L4e05b2.  v2:= v2 + v0 @kind int;
  #L4e05b4.  if v2 < 0 then goto L4e05c0;
  #L4e05b8.  v0:= v1.`x2.p0$a.b` @type ^`int`[] @kind object;
  #L4e05bc.  v0:= v0[v2];
  #L4e05c0.  return v0;
}
procedure `int` `g`(`x2.p0$a` v2 @kind this) @signature `Lx2/p0$a;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e0534.  v0:= v2.`x2.p0$a.b` @type ^`int`[] @kind object;
  #L4e0538.  v1:= length @variable v0;
  #L4e053a.  if v1 <= 0 then goto L4e054a;
  #L4e053e.  v1:= length @variable v0;
  #L4e0540.  v1:= v1 + -1;
  #L4e0544.  v0:= v0[v1];
  #L4e0548.  goto L4e054c;
  #L4e054a.  v0:= -1I;
  #L4e054c.  return v0;
}
procedure `x2.p0` `h`(`x2.p0$a` v4 @kind this) @signature `Lx2/p0$a;.h:()Lx2/p0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e0694.  v0:= new `x2.p0$a`;
  #L4e0698.  v1:= new `java.util.Random`;
  #L4e069c.  v2:= v4.`x2.p0$a.a` @type ^`java.util.Random` @kind object;
  #L4e06a0.  call temp:= `nextLong`(v2) @signature `Ljava/util/Random;.nextLong:()J` @kind virtual;
  #L4e06a6.  v2:= temp @kind wide;
  #L4e06a8.  call `<init>`(v1, v2) @signature `Ljava/util/Random;.<init>:(J)V` @kind direct;
  #L4e06ae.  v2:= 0I;
  #L4e06b0.  call `<init>`(v0, v2, v1) @signature `Lx2/p0$a;.<init>:(ILjava/util/Random;)V` @kind direct;
  #L4e06b6.  return v0 @kind object;
}
