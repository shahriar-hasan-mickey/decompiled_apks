record `x2.n` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.concurrent.atomic.AtomicLong` `@@x2.n.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx2/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4dad08.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4dad0c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4dad12.  `@@x2.n.a` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4dad16.  return @kind void;
}
procedure `void` `<init>`(`x2.n` v12 @kind this, `long` v13 , `r3.p` v15 @kind object, `long` v16 ) @signature `Lx2/n;.<init>:(JLr3/p;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4dad40.  v3:= v15 @kind object;
  #L4dad42.  v4:= v3.`r3.p.a` @type ^`android.net.Uri` @kind object;
  #L4dad46.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L4dad4c.  v5:= temp @kind object;
  #L4dad4e.  v8:= 0L;
  #L4dad52.  v10:= 0L;
  #L4dad56.  v0:= v12 @kind object;
  #L4dad58.  v1:= v13 @kind wide;
  #L4dad5a.  v6:= v16 @kind wide;
  #L4dad5e.  call `<init>`(v0, v1, v3, v4, v5, v6, v8, v10) @signature `Lx2/n;.<init>:(JLr3/p;Landroid/net/Uri;Ljava/util/Map;JJJ)V` @kind direct;
  #L4dad64.  return @kind void;
}
procedure `void` `<init>`(`x2.n` v0 @kind this, `long` v1 , `r3.p` v3 @kind object, `android.net.Uri` v4 @kind object, `java.util.Map` v5 @kind object, `long` v6 , `long` v8 , `long` v10 ) @signature `Lx2/n;.<init>:(JLr3/p;Landroid/net/Uri;Ljava/util/Map;JJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4dad28.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4dad2e.  return @kind void;
}
procedure `long` `a`() @signature `Lx2/n;.a:()J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4dace8.  v0:= `@@x2.n.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4dacec.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L4dacf2.  v0:= temp @kind wide;
  #L4dacf4.  return v0 @kind wide;
}
