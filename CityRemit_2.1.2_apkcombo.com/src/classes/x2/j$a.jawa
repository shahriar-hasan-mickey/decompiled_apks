record `x2.j$a` @kind class @AccessFlag FINAL {
  `java.util.Map` `x2.j$a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `x2.j$a.b` @AccessFlag PRIVATE_FINAL;
  `r3.l$a` `x2.j$a.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x2.j$a` v0 @kind this, `a2.q` v1 @kind object) @signature `Lx2/j$a;.<init>:(La2/q;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4da884.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4da88a.  v1:= new `java.util.HashMap`;
  #L4da88e.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L4da894.  v0.`x2.j$a.a` @type ^`java.util.Map` := v1 @kind object;
  #L4da898.  v1:= new `java.util.HashSet`;
  #L4da89c.  call `<init>`(v1) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L4da8a2.  v1:= new `java.util.HashMap`;
  #L4da8a6.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L4da8ac.  v0.`x2.j$a.b` @type ^`java.util.Map` := v1 @kind object;
  #L4da8b0.  return @kind void;
}
procedure `void` `a`(`x2.j$a` v1 @kind this, `r3.l$a` v2 @kind object) @signature `Lx2/j$a;.a:(Lr3/l$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da8c4.  v0:= v1.`x2.j$a.c` @type ^`r3.l$a` @kind object;
  #L4da8c8.  if v2 == v0 then goto L4da8e4;
  #L4da8cc.  v1.`x2.j$a.c` @type ^`r3.l$a` := v2 @kind object;
  #L4da8d0.  v2:= v1.`x2.j$a.a` @type ^`java.util.Map` @kind object;
  #L4da8d4.  call `clear`(v2) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4da8da.  v2:= v1.`x2.j$a.b` @type ^`java.util.Map` @kind object;
  #L4da8de.  call `clear`(v2) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4da8e4.  return @kind void;
}
