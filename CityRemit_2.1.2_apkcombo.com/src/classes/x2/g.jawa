record `x2.g` @kind class @AccessFlag PUBLIC extends `x2.o0` @kind interface {
  `x2.o0`[] `x2.g.o` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`x2.g` v0 @kind this, `x2.o0`[] v1 @kind object) @signature `Lx2/g;.<init>:([Lx2/o0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4da804.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4da80a.  v0.`x2.g.o` @type ^`x2.o0`[] := v1 @kind object;
  #L4da80e.  return @kind void;
}
procedure `boolean` `a`(`x2.g` v5 @kind this) @signature `Lx2/g;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4da710.  v0:= v5.`x2.g.o` @type ^`x2.o0`[] @kind object;
  #L4da714.  v1:= length @variable v0;
  #L4da716.  v2:= 0I;
  #L4da718.  v3:= 0I;
  #L4da71a.  if v3 >= v1 then goto L4da738;
  #L4da71e.  v4:= v0[v3] @kind object;
  #L4da722.  call temp:= `a`(v4) @signature `Lx2/o0;.a:()Z` @kind interface;
  #L4da728.  v4:= temp;
  #L4da72a.  if v4 == 0 then goto L4da732;
  #L4da72e.  v0:= 1I;
  #L4da730.  return v0;
  #L4da732.  v3:= v3 + 1;
  #L4da736.  goto L4da71a;
  #L4da738.  return v2;
}
procedure `long` `d`(`x2.g` v12 @kind this) @signature `Lx2/g;.d:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4da7a8.  v0:= v12.`x2.g.o` @type ^`x2.o0`[] @kind object;
  #L4da7ac.  v1:= length @variable v0;
  #L4da7ae.  v2:= 9223372036854775807L;
  #L4da7b8.  v4:= 0I;
  #L4da7ba.  v5:= v2 @kind wide;
  #L4da7bc.  v7:= -9223372036854775808L;
  #L4da7c0.  if v4 >= v1 then goto L4da7e6;
  #L4da7c4.  v9:= v0[v4] @kind object;
  #L4da7c8.  call temp:= `d`(v9) @signature `Lx2/o0;.d:()J` @kind interface;
  #L4da7ce.  v9:= temp @kind wide;
  #L4da7d0.  v11:= lcmp(v9, v7);
  #L4da7d4.  if v11 == 0 then goto L4da7e0;
  #L4da7d8.  call temp:= `min`(v5, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4da7de.  v5:= temp @kind wide;
  #L4da7e0.  v4:= v4 + 1;
  #L4da7e4.  goto L4da7bc;
  #L4da7e6.  v0:= lcmp(v5, v2);
  #L4da7ea.  if v0 != 0 then goto L4da7f0;
  #L4da7ee.  v5:= v7 @kind wide;
  #L4da7f0.  return v5 @kind wide;
}
procedure `long` `f`(`x2.g` v12 @kind this) @signature `Lx2/g;.f:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4da74c.  v0:= v12.`x2.g.o` @type ^`x2.o0`[] @kind object;
  #L4da750.  v1:= length @variable v0;
  #L4da752.  v2:= 9223372036854775807L;
  #L4da75c.  v4:= 0I;
  #L4da75e.  v5:= v2 @kind wide;
  #L4da760.  v7:= -9223372036854775808L;
  #L4da764.  if v4 >= v1 then goto L4da78a;
  #L4da768.  v9:= v0[v4] @kind object;
  #L4da76c.  call temp:= `f`(v9) @signature `Lx2/o0;.f:()J` @kind interface;
  #L4da772.  v9:= temp @kind wide;
  #L4da774.  v11:= lcmp(v9, v7);
  #L4da778.  if v11 == 0 then goto L4da784;
  #L4da77c.  call temp:= `min`(v5, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4da782.  v5:= temp @kind wide;
  #L4da784.  v4:= v4 + 1;
  #L4da788.  goto L4da760;
  #L4da78a.  v0:= lcmp(v5, v2);
  #L4da78e.  if v0 != 0 then goto L4da794;
  #L4da792.  v5:= v7 @kind wide;
  #L4da794.  return v5 @kind wide;
}
procedure `boolean` `g`(`x2.g` v18 @kind this, `long` v19 ) @signature `Lx2/g;.g:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4da680.  v0:= v19 @kind wide;
  #L4da684.  v2:= 0I;
  #L4da686.  v3:= 0I;
  #L4da688.  call temp:= `d`(v18) @signature `Lx2/g;.d:()J` @kind virtual;
  #L4da68e.  v4:= temp @kind wide;
  #L4da690.  v6:= -9223372036854775808L;
  #L4da694.  v8:= lcmp(v4, v6);
  #L4da698.  if v8 != 0 then goto L4da6a2;
  #L4da69c.  v8:= v18 @kind object;
  #L4da6a0.  goto L4da6fc;
  #L4da6a2.  v8:= v18 @kind object;
  #L4da6a6.  v9:= v8.`x2.g.o` @type ^`x2.o0`[] @kind object;
  #L4da6aa.  v10:= length @variable v9;
  #L4da6ac.  v11:= 0I;
  #L4da6ae.  v12:= 0I;
  #L4da6b0.  if v11 >= v10 then goto L4da6f6;
  #L4da6b4.  v13:= v9[v11] @kind object;
  #L4da6b8.  call temp:= `d`(v13) @signature `Lx2/o0;.d:()J` @kind interface;
  #L4da6be.  v14:= temp @kind wide;
  #L4da6c0.  v16:= lcmp(v14, v6);
  #L4da6c4.  if v16 == 0 then goto L4da6d6;
  #L4da6c8.  v16:= lcmp(v14, v0);
  #L4da6cc.  if v16 > 0 then goto L4da6d6;
  #L4da6d0.  v16:= 1I;
  #L4da6d4.  goto L4da6da;
  #L4da6d6.  v16:= 0I;
  #L4da6da.  v17:= lcmp(v14, v4);
  #L4da6de.  if v17 == 0 then goto L4da6e6;
  #L4da6e2.  if v16 == 0 then goto L4da6f0;
  #L4da6e6.  call temp:= `g`(v13, v0) @signature `Lx2/o0;.g:(J)Z` @kind interface;
  #L4da6ec.  v13:= temp;
  #L4da6ee.  v12:= v12 ^| v13 @kind int;
  #L4da6f0.  v11:= v11 + 1;
  #L4da6f4.  goto L4da6b0;
  #L4da6f6.  v3:= v3 ^| v12 @kind int;
  #L4da6f8.  if v12 != 0 then goto L4da688;
  #L4da6fc.  return v3;
}
procedure `void` `i`(`x2.g` v4 @kind this, `long` v5 ) @signature `Lx2/g;.i:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4da820.  v0:= v4.`x2.g.o` @type ^`x2.o0`[] @kind object;
  #L4da824.  v1:= length @variable v0;
  #L4da826.  v2:= 0I;
  #L4da828.  if v2 >= v1 then goto L4da83c;
  #L4da82c.  v3:= v0[v2] @kind object;
  #L4da830.  call `i`(v3, v5) @signature `Lx2/o0;.i:(J)V` @kind interface;
  #L4da836.  v2:= v2 + 1;
  #L4da83a.  goto L4da828;
  #L4da83c.  return @kind void;
}
