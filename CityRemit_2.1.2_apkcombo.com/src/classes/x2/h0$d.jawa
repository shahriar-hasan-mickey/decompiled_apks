record `x2.h0$d` @kind class @AccessFlag FINAL {
  `int` `x2.h0$d.a` @AccessFlag PUBLIC_FINAL;
  `boolean` `x2.h0$d.b` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`x2.h0$d` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lx2/h0$d;.<init>:(IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4dcd00.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4dcd06.  v0.`x2.h0$d.a` @type ^`int` := v1;
  #L4dcd0a.  v0.`x2.h0$d.b` @type ^`boolean` := v2 @kind boolean;
  #L4dcd0e.  return @kind void;
}
procedure `boolean` `equals`(`x2.h0$d` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lx2/h0$d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dcc8c.  v0:= 1I;
  #L4dcc8e.  if v4 != v5 then goto L4dcc94;
  #L4dcc92.  return v0;
  #L4dcc94.  v1:= 0I;
  #L4dcc96.  if v5 == 0 then goto L4dccce;
  #L4dcc9a.  v2:= constclass @type ^`x2.h0$d` @kind object;
  #L4dcc9e.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4dcca4.  v3:= temp @kind object;
  #L4dcca6.  if v2 == v3 then goto L4dccac;
  #L4dccaa.  goto L4dccce;
  #L4dccac.  v5:= (`x2.h0$d`) v5 @kind object;
  #L4dccb0.  v2:= v4.`x2.h0$d.a` @type ^`int`;
  #L4dccb4.  v3:= v5.`x2.h0$d.a` @type ^`int`;
  #L4dccb8.  if v2 != v3 then goto L4dccca;
  #L4dccbc.  v2:= v4.`x2.h0$d.b` @type ^`boolean` @kind boolean;
  #L4dccc0.  v5:= v5.`x2.h0$d.b` @type ^`boolean` @kind boolean;
  #L4dccc4.  if v2 != v5 then goto L4dccca;
  #L4dccc8.  goto L4dcccc;
  #L4dccca.  v0:= 0I;
  #L4dcccc.  return v0;
  #L4dccce.  return v1;
}
procedure `int` `hashCode`(`x2.h0$d` v2 @kind this) @signature `Lx2/h0$d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dcce0.  v0:= v2.`x2.h0$d.a` @type ^`int`;
  #L4dcce4.  v0:= v0 * 31;
  #L4dcce8.  v1:= v2.`x2.h0$d.b` @type ^`boolean` @kind boolean;
  #L4dccec.  v0:= v0 + v1 @kind int;
  #L4dccee.  return v0;
}
