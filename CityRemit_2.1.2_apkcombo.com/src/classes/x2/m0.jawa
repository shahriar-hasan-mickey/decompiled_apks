record `x2.m0` @kind class @AccessFlag PUBLIC extends `a2.d0` @kind interface {
  `v1.j1` `x2.m0.A` @AccessFlag PRIVATE;
  `v1.j1` `x2.m0.B` @AccessFlag PRIVATE;
  `int` `x2.m0.C` @AccessFlag PRIVATE;
  `boolean` `x2.m0.D` @AccessFlag PRIVATE;
  `boolean` `x2.m0.E` @AccessFlag PRIVATE;
  `long` `x2.m0.F` @AccessFlag PRIVATE;
  `boolean` `x2.m0.G` @AccessFlag PRIVATE;
  `x2.k0` `x2.m0.a` @AccessFlag PRIVATE_FINAL;
  `x2.m0$b` `x2.m0.b` @AccessFlag PRIVATE_FINAL;
  `x2.r0` `x2.m0.c` @AccessFlag PRIVATE_FINAL;
  `z1.y` `x2.m0.d` @AccessFlag PRIVATE_FINAL;
  `z1.w$a` `x2.m0.e` @AccessFlag PRIVATE_FINAL;
  `x2.m0$d` `x2.m0.f` @AccessFlag PRIVATE;
  `v1.j1` `x2.m0.g` @AccessFlag PRIVATE;
  `z1.o` `x2.m0.h` @AccessFlag PRIVATE;
  `int` `x2.m0.i` @AccessFlag PRIVATE;
  `int`[] `x2.m0.j` @AccessFlag PRIVATE;
  `long`[] `x2.m0.k` @AccessFlag PRIVATE;
  `int`[] `x2.m0.l` @AccessFlag PRIVATE;
  `int`[] `x2.m0.m` @AccessFlag PRIVATE;
  `long`[] `x2.m0.n` @AccessFlag PRIVATE;
  `a2.d0$a`[] `x2.m0.o` @AccessFlag PRIVATE;
  `int` `x2.m0.p` @AccessFlag PRIVATE;
  `int` `x2.m0.q` @AccessFlag PRIVATE;
  `int` `x2.m0.r` @AccessFlag PRIVATE;
  `int` `x2.m0.s` @AccessFlag PRIVATE;
  `long` `x2.m0.t` @AccessFlag PRIVATE;
  `long` `x2.m0.u` @AccessFlag PRIVATE;
  `long` `x2.m0.v` @AccessFlag PRIVATE;
  `boolean` `x2.m0.w` @AccessFlag PRIVATE;
  `boolean` `x2.m0.x` @AccessFlag PRIVATE;
  `boolean` `x2.m0.y` @AccessFlag PRIVATE;
  `boolean` `x2.m0.z` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x2.m0` v0 @kind this, `r3.b` v1 @kind object, `z1.y` v2 @kind object, `z1.w$a` v3 @kind object) @signature `Lx2/m0;.<init>:(Lr3/b;Lz1/y;Lz1/w$a;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L4dfcb4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4dfcba.  v0.`x2.m0.d` @type ^`z1.y` := v2 @kind object;
  #L4dfcbe.  v0.`x2.m0.e` @type ^`z1.w$a` := v3 @kind object;
  #L4dfcc2.  v2:= new `x2.k0`;
  #L4dfcc6.  call `<init>`(v2, v1) @signature `Lx2/k0;.<init>:(Lr3/b;)V` @kind direct;
  #L4dfccc.  v0.`x2.m0.a` @type ^`x2.k0` := v2 @kind object;
  #L4dfcd0.  v1:= new `x2.m0$b`;
  #L4dfcd4.  call `<init>`(v1) @signature `Lx2/m0$b;.<init>:()V` @kind direct;
  #L4dfcda.  v0.`x2.m0.b` @type ^`x2.m0$b` := v1 @kind object;
  #L4dfcde.  v1:= 1000I;
  #L4dfce2.  v0.`x2.m0.i` @type ^`int` := v1;
  #L4dfce6.  v2:= new `int`[v1];
  #L4dfcea.  v0.`x2.m0.j` @type ^`int`[] := v2 @kind object;
  #L4dfcee.  v2:= new `long`[v1];
  #L4dfcf2.  v0.`x2.m0.k` @type ^`long`[] := v2 @kind object;
  #L4dfcf6.  v2:= new `long`[v1];
  #L4dfcfa.  v0.`x2.m0.n` @type ^`long`[] := v2 @kind object;
  #L4dfcfe.  v2:= new `int`[v1];
  #L4dfd02.  v0.`x2.m0.m` @type ^`int`[] := v2 @kind object;
  #L4dfd06.  v2:= new `int`[v1];
  #L4dfd0a.  v0.`x2.m0.l` @type ^`int`[] := v2 @kind object;
  #L4dfd0e.  v1:= new `a2.d0$a`[v1];
  #L4dfd12.  v0.`x2.m0.o` @type ^`a2.d0$a`[] := v1 @kind object;
  #L4dfd16.  v1:= new `x2.r0`;
  #L4dfd1a.  v2:= `@@x2.l0.a` @type ^`x2.l0` @kind object;
  #L4dfd1e.  call `<init>`(v1, v2) @signature `Lx2/r0;.<init>:(Ls3/g;)V` @kind direct;
  #L4dfd24.  v0.`x2.m0.c` @type ^`x2.r0` := v1 @kind object;
  #L4dfd28.  v1:= -9223372036854775808L;
  #L4dfd2c.  v0.`x2.m0.t` @type ^`long` := v1 @kind wide;
  #L4dfd30.  v0.`x2.m0.u` @type ^`long` := v1 @kind wide;
  #L4dfd34.  v0.`x2.m0.v` @type ^`long` := v1 @kind wide;
  #L4dfd38.  v1:= 1I;
  #L4dfd3a.  v0.`x2.m0.y` @type ^`boolean` := v1 @kind boolean;
  #L4dfd3e.  v0.`x2.m0.x` @type ^`boolean` := v1 @kind boolean;
  #L4dfd42.  return @kind void;
}
procedure `long` `B`(`x2.m0` v7 @kind this, `int` v8 ) @signature `Lx2/m0;.B:(I)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4dfba0.  v0:= -9223372036854775808L;
  #L4dfba4.  if v8 != 0 then goto L4dfbaa;
  #L4dfba8.  return v0 @kind wide;
  #L4dfbaa.  v2:= v8 + -1;
  #L4dfbae.  call temp:= `D`(v7, v2) @signature `Lx2/m0;.D:(I)I` @kind direct;
  #L4dfbb4.  v2:= temp;
  #L4dfbb6.  v3:= 0I;
  #L4dfbb8.  if v3 >= v8 then goto L4dfbf6;
  #L4dfbbc.  v4:= v7.`x2.m0.n` @type ^`long`[] @kind object;
  #L4dfbc0.  v5:= v4[v2] @kind wide;
  #L4dfbc4.  call temp:= `max`(v0, v5) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4dfbca.  v0:= temp @kind wide;
  #L4dfbcc.  v4:= v7.`x2.m0.m` @type ^`int`[] @kind object;
  #L4dfbd0.  v4:= v4[v2];
  #L4dfbd4.  v4:= v4 ^& 1;
  #L4dfbd8.  if v4 == 0 then goto L4dfbde;
  #L4dfbdc.  goto L4dfbf6;
  #L4dfbde.  v2:= v2 + -1;
  #L4dfbe2.  v4:= -1I;
  #L4dfbe4.  if v2 != v4 then goto L4dfbf0;
  #L4dfbe8.  v2:= v7.`x2.m0.i` @type ^`int`;
  #L4dfbec.  v2:= v2 + -1;
  #L4dfbf0.  v3:= v3 + 1;
  #L4dfbf4.  goto L4dfbb8;
  #L4dfbf6.  return v0 @kind wide;
}
procedure `int` `D`(`x2.m0` v1 @kind this, `int` v2 ) @signature `Lx2/m0;.D:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4df53c.  v0:= v1.`x2.m0.r` @type ^`int`;
  #L4df540.  v0:= v0 + v2 @kind int;
  #L4df542.  v2:= v1.`x2.m0.i` @type ^`int`;
  #L4df546.  if v0 >= v2 then goto L4df54c;
  #L4df54a.  goto L4df54e;
  #L4df54c.  v0:= v0 - v2 @kind int;
  #L4df54e.  return v0;
}
procedure `boolean` `H`(`x2.m0` v2 @kind this) @signature `Lx2/m0;.H:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4df14c.  v0:= v2.`x2.m0.s` @type ^`int`;
  #L4df150.  v1:= v2.`x2.m0.p` @type ^`int`;
  #L4df154.  if v0 == v1 then goto L4df15c;
  #L4df158.  v0:= 1I;
  #L4df15a.  goto L4df15e;
  #L4df15c.  v0:= 0I;
  #L4df15e.  return v0;
}
procedure `void` `L`(`x2.m0$c` v0 @kind object) @signature `Lx2/m0;.L:(Lx2/m0$c;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L4e006c.  v0:= v0.`x2.m0$c.b` @type ^`z1.y$b` @kind object;
  #L4e0070.  call `a`(v0) @signature `Lz1/y$b;.a:()V` @kind interface;
  #L4e0076.  return @kind void;
}
procedure `boolean` `M`(`x2.m0` v2 @kind this, `int` v3 ) @signature `Lx2/m0;.M:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4df244.  v0:= v2.`x2.m0.h` @type ^`z1.o` @kind object;
  #L4df248.  if v0 == 0 then goto L4df282;
  #L4df24c.  call temp:= `getState`(v0) @signature `Lz1/o;.getState:()I` @kind interface;
  #L4df252.  v0:= temp;
  #L4df254.  v1:= 4I;
  #L4df256.  if v0 == v1 then goto L4df282;
  #L4df25a.  v0:= v2.`x2.m0.m` @type ^`int`[] @kind object;
  #L4df25e.  v3:= v0[v3];
  #L4df262.  v0:= 2.0F;
  #L4df266.  v3:= v3 ^& v0 @kind int;
  #L4df268.  if v3 != 0 then goto L4df27e;
  #L4df26c.  v3:= v2.`x2.m0.h` @type ^`z1.o` @kind object;
  #L4df270.  call temp:= `a`(v3) @signature `Lz1/o;.a:()Z` @kind interface;
  #L4df276.  v3:= temp;
  #L4df278.  if v3 == 0 then goto L4df27e;
  #L4df27c.  goto L4df282;
  #L4df27e.  v3:= 0I;
  #L4df280.  goto L4df284;
  #L4df282.  v3:= 1I;
  #L4df284.  return v3;
}
procedure `void` `O`(`x2.m0` v4 @kind this, `v1.j1` v5 @kind object, `v1.k1` v6 @kind object) @signature `Lx2/m0;.O:(Lv1/j1;Lv1/k1;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e00cc.  v0:= v4.`x2.m0.g` @type ^`v1.j1` @kind object;
  #L4e00d0.  if v0 != 0 then goto L4e00d8;
  #L4e00d4.  v1:= 1I;
  #L4e00d6.  goto L4e00da;
  #L4e00d8.  v1:= 0I;
  #L4e00da.  if v1 == 0 then goto L4e00e2;
  #L4e00de.  v0:= 0I;
  #L4e00e0.  goto L4e00e6;
  #L4e00e2.  v0:= v0.`v1.j1.C` @type ^`z1.m` @kind object;
  #L4e00e6.  v4.`x2.m0.g` @type ^`v1.j1` := v5 @kind object;
  #L4e00ea.  v2:= v5.`v1.j1.C` @type ^`z1.m` @kind object;
  #L4e00ee.  v3:= v4.`x2.m0.d` @type ^`z1.y` @kind object;
  #L4e00f2.  if v3 == 0 then goto L4e0108;
  #L4e00f6.  call temp:= `e`(v3, v5) @signature `Lz1/y;.e:(Lv1/j1;)I` @kind interface;
  #L4e00fc.  v3:= temp;
  #L4e00fe.  call temp:= `c`(v5, v3) @signature `Lv1/j1;.c:(I)Lv1/j1;` @kind virtual;
  #L4e0104.  v3:= temp @kind object;
  #L4e0106.  goto L4e010a;
  #L4e0108.  v3:= v5 @kind object;
  #L4e010a.  v6.`v1.k1.b` @type ^`v1.j1` := v3 @kind object;
  #L4e010e.  v3:= v4.`x2.m0.h` @type ^`z1.o` @kind object;
  #L4e0112.  v6.`v1.k1.a` @type ^`z1.o` := v3 @kind object;
  #L4e0116.  v3:= v4.`x2.m0.d` @type ^`z1.y` @kind object;
  #L4e011a.  if v3 != 0 then goto L4e0120;
  #L4e011e.  return @kind void;
  #L4e0120.  if v1 != 0 then goto L4e0132;
  #L4e0124.  call temp:= `c`(v0, v2) @signature `Ls3/l0;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L4e012a.  v0:= temp;
  #L4e012c.  if v0 == 0 then goto L4e0132;
  #L4e0130.  return @kind void;
  #L4e0132.  v0:= v4.`x2.m0.h` @type ^`z1.o` @kind object;
  #L4e0136.  v1:= v4.`x2.m0.d` @type ^`z1.y` @kind object;
  #L4e013a.  v2:= v4.`x2.m0.e` @type ^`z1.w$a` @kind object;
  #L4e013e.  call temp:= `c`(v1, v2, v5) @signature `Lz1/y;.c:(Lz1/w$a;Lv1/j1;)Lz1/o;` @kind interface;
  #L4e0144.  v5:= temp @kind object;
  #L4e0146.  v4.`x2.m0.h` @type ^`z1.o` := v5 @kind object;
  #L4e014a.  v6.`v1.k1.a` @type ^`z1.o` := v5 @kind object;
  #L4e014e.  if v0 == 0 then goto L4e015c;
  #L4e0152.  v5:= v4.`x2.m0.e` @type ^`z1.w$a` @kind object;
  #L4e0156.  call `e`(v0, v5) @signature `Lz1/o;.e:(Lz1/w$a;)V` @kind interface;
  #L4e015c.  return @kind void;
}
procedure `int` `P`(`x2.m0` v4 @kind this, `v1.k1` v5 @kind object, `y1.g` v6 @kind object, `boolean` v7 , `boolean` v8 , `x2.m0$b` v9 @kind object) @signature `Lx2/m0;.P:(Lv1/k1;Ly1/g;ZZLx2/m0$b;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4df61c.  @monitorenter v4
  #L4df61e.  v0:= 0I;
  #L4df620.  v6.`y1.g.r` @type ^`boolean` := v0 @kind boolean;
  #L4df624.  call temp:= `H`(v4) @signature `Lx2/m0;.H:()Z` @kind direct;
  #L4df62a.  v0:= temp;
  #L4df62c.  v1:= -5I;
  #L4df62e.  v2:= -3I;
  #L4df630.  v3:= -4I;
  #L4df632.  if v0 != 0 then goto L4df67e;
  #L4df636.  if v8 != 0 then goto L4df672;
  #L4df63a.  v8:= v4.`x2.m0.w` @type ^`boolean` @kind boolean;
  #L4df63e.  if v8 == 0 then goto L4df644;
  #L4df642.  goto L4df672;
  #L4df644.  v6:= v4.`x2.m0.B` @type ^`v1.j1` @kind object;
  #L4df648.  if v6 == 0 then goto L4df66e;
  #L4df64c.  if v7 != 0 then goto L4df658;
  #L4df650.  v7:= v4.`x2.m0.g` @type ^`v1.j1` @kind object;
  #L4df654.  if v6 == v7 then goto L4df66e;
  #L4df658.  call temp:= `e`(v6) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4df65e.  v6:= temp @kind object;
  #L4df660.  v6:= (`v1.j1`) v6 @kind object;
  #L4df664.  call `O`(v4, v6, v5) @signature `Lx2/m0;.O:(Lv1/j1;Lv1/k1;)V` @kind direct;
  #L4df66a.  @monitorexit v4
  #L4df66c.  return v1;
  #L4df66e.  @monitorexit v4
  #L4df670.  return v2;
  #L4df672.  v5:= 4I;
  #L4df674.  call `B`(v6, v5) @signature `Ly1/a;.B:(I)V` @kind virtual;
  #L4df67a.  @monitorexit v4
  #L4df67c.  return v3;
  #L4df67e.  v8:= v4.`x2.m0.c` @type ^`x2.r0` @kind object;
  #L4df682.  call temp:= `C`(v4) @signature `Lx2/m0;.C:()I` @kind virtual;
  #L4df688.  v0:= temp;
  #L4df68a.  call temp:= `e`(v8, v0) @signature `Lx2/r0;.e:(I)Ljava/lang/Object;` @kind virtual;
  #L4df690.  v8:= temp @kind object;
  #L4df692.  v8:= (`x2.m0$c`) v8 @kind object;
  #L4df696.  v8:= v8.`x2.m0$c.a` @type ^`v1.j1` @kind object;
  #L4df69a.  if v7 != 0 then goto L4df722;
  #L4df69e.  v7:= v4.`x2.m0.g` @type ^`v1.j1` @kind object;
  #L4df6a2.  if v8 == v7 then goto L4df6a8;
  #L4df6a6.  goto L4df722;
  #L4df6a8.  v5:= v4.`x2.m0.s` @type ^`int`;
  #L4df6ac.  call temp:= `D`(v4, v5) @signature `Lx2/m0;.D:(I)I` @kind direct;
  #L4df6b2.  v5:= temp;
  #L4df6b4.  call temp:= `M`(v4, v5) @signature `Lx2/m0;.M:(I)Z` @kind direct;
  #L4df6ba.  v7:= temp;
  #L4df6bc.  if v7 != 0 then goto L4df6ca;
  #L4df6c0.  v5:= 1I;
  #L4df6c2.  v6.`y1.g.r` @type ^`boolean` := v5 @kind boolean;
  #L4df6c6.  @monitorexit v4
  #L4df6c8.  return v2;
  #L4df6ca.  v7:= v4.`x2.m0.m` @type ^`int`[] @kind object;
  #L4df6ce.  v7:= v7[v5];
  #L4df6d2.  call `B`(v6, v7) @signature `Ly1/a;.B:(I)V` @kind virtual;
  #L4df6d8.  v7:= v4.`x2.m0.n` @type ^`long`[] @kind object;
  #L4df6dc.  v0:= v7[v5] @kind wide;
  #L4df6e0.  v6.`y1.g.s` @type ^`long` := v0 @kind wide;
  #L4df6e4.  v7:= v4.`x2.m0.t` @type ^`long` @kind wide;
  #L4df6e8.  v2:= lcmp(v0, v7);
  #L4df6ec.  if v2 >= 0 then goto L4df6fa;
  #L4df6f0.  v7:= -2147483648I;
  #L4df6f4.  call `i`(v6, v7) @signature `Ly1/a;.i:(I)V` @kind virtual;
  #L4df6fa.  v6:= v4.`x2.m0.l` @type ^`int`[] @kind object;
  #L4df6fe.  v6:= v6[v5];
  #L4df702.  v9.`x2.m0$b.a` @type ^`int` := v6;
  #L4df706.  v6:= v4.`x2.m0.k` @type ^`long`[] @kind object;
  #L4df70a.  v7:= v6[v5] @kind wide;
  #L4df70e.  v9.`x2.m0$b.b` @type ^`long` := v7 @kind wide;
  #L4df712.  v6:= v4.`x2.m0.o` @type ^`a2.d0$a`[] @kind object;
  #L4df716.  v5:= v6[v5] @kind object;
  #L4df71a.  v9.`x2.m0$b.c` @type ^`a2.d0$a` := v5 @kind object;
  #L4df71e.  @monitorexit v4
  #L4df720.  return v3;
  #L4df722.  call `O`(v4, v8, v5) @signature `Lx2/m0;.O:(Lv1/j1;Lv1/k1;)V` @kind direct;
  #L4df728.  @monitorexit v4
  #L4df72a.  return v1;
  #L4df72c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df72e.  @monitorexit v4
  #L4df730.  throw v5;
  catch `java.lang.Throwable` @[L4df620..L4df66a] goto L4df72c;
  catch `java.lang.Throwable` @[L4df674..L4df67a] goto L4df72c;
  catch `java.lang.Throwable` @[L4df67e..L4df6c6] goto L4df72c;
  catch `java.lang.Throwable` @[L4df6ca..L4df71e] goto L4df72c;
  catch `java.lang.Throwable` @[L4df722..L4df728] goto L4df72c;
}
procedure `void` `U`(`x2.m0` v2 @kind this) @signature `Lx2/m0;.U:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4e01b0.  v0:= v2.`x2.m0.h` @type ^`z1.o` @kind object;
  #L4e01b4.  if v0 == 0 then goto L4e01cc;
  #L4e01b8.  v1:= v2.`x2.m0.e` @type ^`z1.w$a` @kind object;
  #L4e01bc.  call `e`(v0, v1) @signature `Lz1/o;.e:(Lz1/w$a;)V` @kind interface;
  #L4e01c2.  v0:= 0I;
  #L4e01c4.  v2.`x2.m0.h` @type ^`z1.o` := v0 @kind object;
  #L4e01c8.  v2.`x2.m0.g` @type ^`v1.j1` := v0 @kind object;
  #L4e01cc.  return @kind void;
}
procedure `void` `X`(`x2.m0` v1 @kind this) @signature `Lx2/m0;.X:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4e0260.  @monitorenter v1
  #L4e0262.  v0:= 0I;
  #L4e0264.  v1.`x2.m0.s` @type ^`int` := v0;
  #L4e0268.  v0:= v1.`x2.m0.a` @type ^`x2.k0` @kind object;
  #L4e026c.  call `o`(v0) @signature `Lx2/k0;.o:()V` @kind virtual;
  #L4e0272.  @monitorexit v1
  #L4e0274.  return @kind void;
  #L4e0276.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e0278.  @monitorexit v1
  #L4e027a.  throw v0;
  catch `java.lang.Throwable` @[L4e0264..L4e0272] goto L4e0276;
}
procedure `boolean` `c0`(`x2.m0` v2 @kind this, `v1.j1` v3 @kind object) @signature `Lx2/m0;.c0:(Lv1/j1;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4df39c.  @monitorenter v2
  #L4df39e.  v0:= 0I;
  #L4df3a0.  v2.`x2.m0.y` @type ^`boolean` := v0 @kind boolean;
  #L4df3a4.  v1:= v2.`x2.m0.B` @type ^`v1.j1` @kind object;
  #L4df3a8.  call temp:= `c`(v3, v1) @signature `Ls3/l0;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L4df3ae.  v1:= temp;
  #L4df3b0.  if v1 == 0 then goto L4df3b8;
  #L4df3b4.  @monitorexit v2
  #L4df3b6.  return v0;
  #L4df3b8.  v1:= v2.`x2.m0.c` @type ^`x2.r0` @kind object;
  #L4df3bc.  call temp:= `g`(v1) @signature `Lx2/r0;.g:()Z` @kind virtual;
  #L4df3c2.  v1:= temp;
  #L4df3c4.  if v1 != 0 then goto L4df3fc;
  #L4df3c8.  v1:= v2.`x2.m0.c` @type ^`x2.r0` @kind object;
  #L4df3cc.  call temp:= `f`(v1) @signature `Lx2/r0;.f:()Ljava/lang/Object;` @kind virtual;
  #L4df3d2.  v1:= temp @kind object;
  #L4df3d4.  v1:= (`x2.m0$c`) v1 @kind object;
  #L4df3d8.  v1:= v1.`x2.m0$c.a` @type ^`v1.j1` @kind object;
  #L4df3dc.  call temp:= `equals`(v1, v3) @signature `Lv1/j1;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4df3e2.  v1:= temp;
  #L4df3e4.  if v1 == 0 then goto L4df3fc;
  #L4df3e8.  v3:= v2.`x2.m0.c` @type ^`x2.r0` @kind object;
  #L4df3ec.  call temp:= `f`(v3) @signature `Lx2/r0;.f:()Ljava/lang/Object;` @kind virtual;
  #L4df3f2.  v3:= temp @kind object;
  #L4df3f4.  v3:= (`x2.m0$c`) v3 @kind object;
  #L4df3f8.  v3:= v3.`x2.m0$c.a` @type ^`v1.j1` @kind object;
  #L4df3fc.  v2.`x2.m0.B` @type ^`v1.j1` := v3 @kind object;
  #L4df400.  v3:= v2.`x2.m0.B` @type ^`v1.j1` @kind object;
  #L4df404.  v1:= v3.`v1.j1.z` @type ^`java.lang.String` @kind object;
  #L4df408.  v3:= v3.`v1.j1.w` @type ^`java.lang.String` @kind object;
  #L4df40c.  call temp:= `a`(v1, v3) @signature `Ls3/u;.a:(Ljava/lang/String;Ljava/lang/String;)Z` @kind static;
  #L4df412.  v3:= temp;
  #L4df414.  v2.`x2.m0.D` @type ^`boolean` := v3 @kind boolean;
  #L4df418.  v2.`x2.m0.E` @type ^`boolean` := v0 @kind boolean;
  #L4df41c.  v3:= 1I;
  #L4df41e.  @monitorexit v2
  #L4df420.  return v3;
  #L4df422.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df424.  @monitorexit v2
  #L4df426.  throw v3;
  catch `java.lang.Throwable` @[L4df3a0..L4df3b0] goto L4df422;
  catch `java.lang.Throwable` @[L4df3b8..L4df41c] goto L4df422;
}
procedure `void` `g`(`x2.m0$c` v0 @kind object) @signature `Lx2/m0;.g:(Lx2/m0$c;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L4dfc9c.  call `L`(v0) @signature `Lx2/m0;.L:(Lx2/m0$c;)V` @kind static;
  #L4dfca2.  return @kind void;
}
procedure `boolean` `h`(`x2.m0` v5 @kind this, `long` v6 ) @signature `Lx2/m0;.h:(J)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4df0cc.  @monitorenter v5
  #L4df0ce.  v0:= v5.`x2.m0.p` @type ^`int`;
  #L4df0d2.  v1:= 1I;
  #L4df0d4.  v2:= 0I;
  #L4df0d6.  if v0 != 0 then goto L4df0ee;
  #L4df0da.  v3:= v5.`x2.m0.u` @type ^`long` @kind wide;
  #L4df0de.  v0:= lcmp(v6, v3);
  #L4df0e2.  if v0 <= 0 then goto L4df0e8;
  #L4df0e6.  goto L4df0ea;
  #L4df0e8.  v1:= 0I;
  #L4df0ea.  @monitorexit v5
  #L4df0ec.  return v1;
  #L4df0ee.  call temp:= `A`(v5) @signature `Lx2/m0;.A:()J` @kind virtual;
  #L4df0f4.  v3:= temp @kind wide;
  #L4df0f6.  v0:= lcmp(v3, v6);
  #L4df0fa.  if v0 < 0 then goto L4df102;
  #L4df0fe.  @monitorexit v5
  #L4df100.  return v2;
  #L4df102.  call temp:= `j`(v5, v6) @signature `Lx2/m0;.j:(J)I` @kind direct;
  #L4df108.  v6:= temp;
  #L4df10a.  v7:= v5.`x2.m0.q` @type ^`int`;
  #L4df10e.  v7:= v7 + v6 @kind int;
  #L4df110.  call temp:= `t`(v5, v7) @signature `Lx2/m0;.t:(I)J` @kind direct;
  #L4df116.  @monitorexit v5
  #L4df118.  return v1;
  #L4df11a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df11c.  @monitorexit v5
  #L4df11e.  throw v6;
  catch `java.lang.Throwable` @[L4df0ce..L4df0de] goto L4df11a;
  catch `java.lang.Throwable` @[L4df0ee..L4df0f6] goto L4df11a;
  catch `java.lang.Throwable` @[L4df102..L4df116] goto L4df11a;
}
procedure `void` `i`(`x2.m0` v8 @kind this, `long` v9 , `int` v11 , `long` v12 , `int` v14 , `a2.d0$a` v15 @kind object) @signature `Lx2/m0;.i:(JIJILa2/d0$a;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4dfd54.  @monitorenter v8
  #L4dfd56.  v0:= v8.`x2.m0.p` @type ^`int`;
  #L4dfd5a.  v1:= 1I;
  #L4dfd5c.  v2:= 0I;
  #L4dfd5e.  if v0 <= 0 then goto L4dfd94;
  #L4dfd62.  v0:= v0 - v1 @kind int;
  #L4dfd64.  call temp:= `D`(v8, v0) @signature `Lx2/m0;.D:(I)I` @kind direct;
  #L4dfd6a.  v0:= temp;
  #L4dfd6c.  v3:= v8.`x2.m0.k` @type ^`long`[] @kind object;
  #L4dfd70.  v4:= v3[v0] @kind wide;
  #L4dfd74.  v3:= v8.`x2.m0.l` @type ^`int`[] @kind object;
  #L4dfd78.  v0:= v3[v0];
  #L4dfd7c.  v6:= (`long`) v0 @kind i2l;
  #L4dfd7e.  v4:= v4 + v6 @kind long;
  #L4dfd80.  v0:= lcmp(v4, v12);
  #L4dfd84.  if v0 > 0 then goto L4dfd8c;
  #L4dfd88.  v0:= 1I;
  #L4dfd8a.  goto L4dfd8e;
  #L4dfd8c.  v0:= 0I;
  #L4dfd8e.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L4dfd94.  v0:= 536870912I;
  #L4dfd98.  v0:= v0 ^& v11 @kind int;
  #L4dfd9a.  if v0 == 0 then goto L4dfda2;
  #L4dfd9e.  v0:= 1I;
  #L4dfda0.  goto L4dfda4;
  #L4dfda2.  v0:= 0I;
  #L4dfda4.  v8.`x2.m0.w` @type ^`boolean` := v0 @kind boolean;
  #L4dfda8.  v3:= v8.`x2.m0.v` @type ^`long` @kind wide;
  #L4dfdac.  call temp:= `max`(v3, v9) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4dfdb2.  v3:= temp @kind wide;
  #L4dfdb4.  v8.`x2.m0.v` @type ^`long` := v3 @kind wide;
  #L4dfdb8.  v0:= v8.`x2.m0.p` @type ^`int`;
  #L4dfdbc.  call temp:= `D`(v8, v0) @signature `Lx2/m0;.D:(I)I` @kind direct;
  #L4dfdc2.  v0:= temp;
  #L4dfdc4.  v3:= v8.`x2.m0.n` @type ^`long`[] @kind object;
  #L4dfdc8.  v3[v0]:= v9 @kind wide;
  #L4dfdcc.  v9:= v8.`x2.m0.k` @type ^`long`[] @kind object;
  #L4dfdd0.  v9[v0]:= v12 @kind wide;
  #L4dfdd4.  v9:= v8.`x2.m0.l` @type ^`int`[] @kind object;
  #L4dfdd8.  v9[v0]:= v14;
  #L4dfddc.  v9:= v8.`x2.m0.m` @type ^`int`[] @kind object;
  #L4dfde0.  v9[v0]:= v11;
  #L4dfde4.  v9:= v8.`x2.m0.o` @type ^`a2.d0$a`[] @kind object;
  #L4dfde8.  v9[v0]:= v15 @kind object;
  #L4dfdec.  v9:= v8.`x2.m0.j` @type ^`int`[] @kind object;
  #L4dfdf0.  v10:= v8.`x2.m0.C` @type ^`int`;
  #L4dfdf4.  v9[v0]:= v10;
  #L4dfdf8.  v9:= v8.`x2.m0.c` @type ^`x2.r0` @kind object;
  #L4dfdfc.  call temp:= `g`(v9) @signature `Lx2/r0;.g:()Z` @kind virtual;
  #L4dfe02.  v9:= temp;
  #L4dfe04.  if v9 != 0 then goto L4dfe2c;
  #L4dfe08.  v9:= v8.`x2.m0.c` @type ^`x2.r0` @kind object;
  #L4dfe0c.  call temp:= `f`(v9) @signature `Lx2/r0;.f:()Ljava/lang/Object;` @kind virtual;
  #L4dfe12.  v9:= temp @kind object;
  #L4dfe14.  v9:= (`x2.m0$c`) v9 @kind object;
  #L4dfe18.  v9:= v9.`x2.m0$c.a` @type ^`v1.j1` @kind object;
  #L4dfe1c.  v10:= v8.`x2.m0.B` @type ^`v1.j1` @kind object;
  #L4dfe20.  call temp:= `equals`(v9, v10) @signature `Lv1/j1;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4dfe26.  v9:= temp;
  #L4dfe28.  if v9 != 0 then goto L4dfe78;
  #L4dfe2c.  v9:= v8.`x2.m0.d` @type ^`z1.y` @kind object;
  #L4dfe30.  if v9 == 0 then goto L4dfe46;
  #L4dfe34.  v10:= v8.`x2.m0.e` @type ^`z1.w$a` @kind object;
  #L4dfe38.  v11:= v8.`x2.m0.B` @type ^`v1.j1` @kind object;
  #L4dfe3c.  call temp:= `f`(v9, v10, v11) @signature `Lz1/y;.f:(Lz1/w$a;Lv1/j1;)Lz1/y$b;` @kind interface;
  #L4dfe42.  v9:= temp @kind object;
  #L4dfe44.  goto L4dfe4a;
  #L4dfe46.  v9:= `@@z1.y$b.a` @type ^`z1.y$b` @kind object;
  #L4dfe4a.  v10:= v8.`x2.m0.c` @type ^`x2.r0` @kind object;
  #L4dfe4e.  call temp:= `G`(v8) @signature `Lx2/m0;.G:()I` @kind virtual;
  #L4dfe54.  v11:= temp;
  #L4dfe56.  v12:= new `x2.m0$c`;
  #L4dfe5a.  v13:= v8.`x2.m0.B` @type ^`v1.j1` @kind object;
  #L4dfe5e.  call temp:= `e`(v13) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4dfe64.  v13:= temp @kind object;
  #L4dfe66.  v13:= (`v1.j1`) v13 @kind object;
  #L4dfe6a.  v14:= 0I;
  #L4dfe6c.  call `<init>`(v12, v13, v9, v14) @signature `Lx2/m0$c;.<init>:(Lv1/j1;Lz1/y$b;Lx2/m0$a;)V` @kind direct;
  #L4dfe72.  call `a`(v10, v11, v12) @signature `Lx2/r0;.a:(ILjava/lang/Object;)V` @kind virtual;
  #L4dfe78.  v9:= v8.`x2.m0.p` @type ^`int`;
  #L4dfe7c.  v9:= v9 + v1 @kind int;
  #L4dfe7e.  v8.`x2.m0.p` @type ^`int` := v9;
  #L4dfe82.  v10:= v8.`x2.m0.i` @type ^`int`;
  #L4dfe86.  if v9 != v10 then goto L4dff5c;
  #L4dfe8a.  v9:= v10 + 1000;
  #L4dfe8e.  v11:= new `int`[v9];
  #L4dfe92.  v12:= new `long`[v9];
  #L4dfe96.  v13:= new `long`[v9];
  #L4dfe9a.  v14:= new `int`[v9];
  #L4dfe9e.  v15:= new `int`[v9];
  #L4dfea2.  v0:= new `a2.d0$a`[v9];
  #L4dfea6.  v1:= v8.`x2.m0.r` @type ^`int`;
  #L4dfeaa.  v10:= v10 - v1 @kind int;
  #L4dfeac.  v3:= v8.`x2.m0.k` @type ^`long`[] @kind object;
  #L4dfeb0.  call `arraycopy`(v3, v1, v12, v2, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dfeb6.  v1:= v8.`x2.m0.n` @type ^`long`[] @kind object;
  #L4dfeba.  v3:= v8.`x2.m0.r` @type ^`int`;
  #L4dfebe.  call `arraycopy`(v1, v3, v13, v2, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dfec4.  v1:= v8.`x2.m0.m` @type ^`int`[] @kind object;
  #L4dfec8.  v3:= v8.`x2.m0.r` @type ^`int`;
  #L4dfecc.  call `arraycopy`(v1, v3, v14, v2, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dfed2.  v1:= v8.`x2.m0.l` @type ^`int`[] @kind object;
  #L4dfed6.  v3:= v8.`x2.m0.r` @type ^`int`;
  #L4dfeda.  call `arraycopy`(v1, v3, v15, v2, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dfee0.  v1:= v8.`x2.m0.o` @type ^`a2.d0$a`[] @kind object;
  #L4dfee4.  v3:= v8.`x2.m0.r` @type ^`int`;
  #L4dfee8.  call `arraycopy`(v1, v3, v0, v2, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dfeee.  v1:= v8.`x2.m0.j` @type ^`int`[] @kind object;
  #L4dfef2.  v3:= v8.`x2.m0.r` @type ^`int`;
  #L4dfef6.  call `arraycopy`(v1, v3, v11, v2, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dfefc.  v1:= v8.`x2.m0.r` @type ^`int`;
  #L4dff00.  v3:= v8.`x2.m0.k` @type ^`long`[] @kind object;
  #L4dff04.  call `arraycopy`(v3, v2, v12, v10, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dff0a.  v3:= v8.`x2.m0.n` @type ^`long`[] @kind object;
  #L4dff0e.  call `arraycopy`(v3, v2, v13, v10, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dff14.  v3:= v8.`x2.m0.m` @type ^`int`[] @kind object;
  #L4dff18.  call `arraycopy`(v3, v2, v14, v10, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dff1e.  v3:= v8.`x2.m0.l` @type ^`int`[] @kind object;
  #L4dff22.  call `arraycopy`(v3, v2, v15, v10, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dff28.  v3:= v8.`x2.m0.o` @type ^`a2.d0$a`[] @kind object;
  #L4dff2c.  call `arraycopy`(v3, v2, v0, v10, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dff32.  v3:= v8.`x2.m0.j` @type ^`int`[] @kind object;
  #L4dff36.  call `arraycopy`(v3, v2, v11, v10, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4dff3c.  v8.`x2.m0.k` @type ^`long`[] := v12 @kind object;
  #L4dff40.  v8.`x2.m0.n` @type ^`long`[] := v13 @kind object;
  #L4dff44.  v8.`x2.m0.m` @type ^`int`[] := v14 @kind object;
  #L4dff48.  v8.`x2.m0.l` @type ^`int`[] := v15 @kind object;
  #L4dff4c.  v8.`x2.m0.o` @type ^`a2.d0$a`[] := v0 @kind object;
  #L4dff50.  v8.`x2.m0.j` @type ^`int`[] := v11 @kind object;
  #L4dff54.  v8.`x2.m0.r` @type ^`int` := v2;
  #L4dff58.  v8.`x2.m0.i` @type ^`int` := v9;
  #L4dff5c.  @monitorexit v8
  #L4dff5e.  return @kind void;
  #L4dff60.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dff62.  @monitorexit v8
  #L4dff64.  throw v9;
  catch `java.lang.Throwable` @[L4dfd56..L4dff5c] goto L4dff60;
}
procedure `int` `j`(`x2.m0` v5 @kind this, `long` v6 ) @signature `Lx2/m0;.j:(J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4df44c.  v0:= v5.`x2.m0.p` @type ^`int`;
  #L4df450.  v1:= v0 + -1;
  #L4df454.  call temp:= `D`(v5, v1) @signature `Lx2/m0;.D:(I)I` @kind direct;
  #L4df45a.  v1:= temp;
  #L4df45c.  v2:= v5.`x2.m0.s` @type ^`int`;
  #L4df460.  if v0 <= v2 then goto L4df48c;
  #L4df464.  v2:= v5.`x2.m0.n` @type ^`long`[] @kind object;
  #L4df468.  v3:= v2[v1] @kind wide;
  #L4df46c.  v2:= lcmp(v3, v6);
  #L4df470.  if v2 < 0 then goto L4df48c;
  #L4df474.  v0:= v0 + -1;
  #L4df478.  v1:= v1 + -1;
  #L4df47c.  v2:= -1I;
  #L4df47e.  if v1 != v2 then goto L4df45c;
  #L4df482.  v1:= v5.`x2.m0.i` @type ^`int`;
  #L4df486.  v1:= v1 + -1;
  #L4df48a.  goto L4df45c;
  #L4df48c.  return v0;
}
procedure `x2.m0` `k`(`r3.b` v1 @kind object, `z1.y` v2 @kind object, `z1.w$a` v3 @kind object) @signature `Lx2/m0;.k:(Lr3/b;Lz1/y;Lz1/w$a;)Lx2/m0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4e04b8.  v0:= new `x2.m0`;
  #L4e04bc.  call temp:= `e`(v2) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4e04c2.  v2:= temp @kind object;
  #L4e04c4.  v2:= (`z1.y`) v2 @kind object;
  #L4e04c8.  call temp:= `e`(v3) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4e04ce.  v3:= temp @kind object;
  #L4e04d0.  v3:= (`z1.w$a`) v3 @kind object;
  #L4e04d4.  call `<init>`(v0, v1, v2, v3) @signature `Lx2/m0;.<init>:(Lr3/b;Lz1/y;Lz1/w$a;)V` @kind direct;
  #L4e04da.  return v0 @kind object;
}
procedure `x2.m0` `l`(`r3.b` v2 @kind object) @signature `Lx2/m0;.l:(Lr3/b;)Lx2/m0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4e04ec.  v0:= new `x2.m0`;
  #L4e04f0.  v1:= 0I;
  #L4e04f2.  call `<init>`(v0, v2, v1, v1) @signature `Lx2/m0;.<init>:(Lr3/b;Lz1/y;Lz1/w$a;)V` @kind direct;
  #L4e04f8.  return v0 @kind object;
}
procedure `long` `m`(`x2.m0` v10 @kind this, `long` v11 , `boolean` v13 , `boolean` v14 ) @signature `Lx2/m0;.m:(JZZ)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4df880.  @monitorenter v10
  #L4df882.  v0:= v10.`x2.m0.p` @type ^`int`;
  #L4df886.  v1:= -1L;
  #L4df88a.  if v0 == 0 then goto L4df8da;
  #L4df88e.  v3:= v10.`x2.m0.n` @type ^`long`[] @kind object;
  #L4df892.  v5:= v10.`x2.m0.r` @type ^`int`;
  #L4df896.  v6:= v3[v5] @kind wide;
  #L4df89a.  v3:= lcmp(v11, v6);
  #L4df89e.  if v3 >= 0 then goto L4df8a4;
  #L4df8a2.  goto L4df8da;
  #L4df8a4.  if v14 == 0 then goto L4df8b4;
  #L4df8a8.  v14:= v10.`x2.m0.s` @type ^`int`;
  #L4df8ac.  if v14 == v0 then goto L4df8b4;
  #L4df8b0.  v0:= v14 + 1;
  #L4df8b4.  v6:= v0;
  #L4df8b6.  v4:= v10 @kind object;
  #L4df8b8.  v7:= v11 @kind wide;
  #L4df8ba.  v9:= v13;
  #L4df8bc.  call temp:= `v`(v4, v5, v6, v7, v9) @signature `Lx2/m0;.v:(IIJZ)I` @kind direct;
  #L4df8c2.  v11:= temp;
  #L4df8c4.  v12:= -1I;
  #L4df8c6.  if v11 != v12 then goto L4df8ce;
  #L4df8ca.  @monitorexit v10
  #L4df8cc.  return v1 @kind wide;
  #L4df8ce.  call temp:= `p`(v10, v11) @signature `Lx2/m0;.p:(I)J` @kind direct;
  #L4df8d4.  v11:= temp @kind wide;
  #L4df8d6.  @monitorexit v10
  #L4df8d8.  return v11 @kind wide;
  #L4df8da.  @monitorexit v10
  #L4df8dc.  return v1 @kind wide;
  #L4df8de.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df8e0.  @monitorexit v10
  #L4df8e2.  throw v11;
  catch `java.lang.Throwable` @[L4df882..L4df8c4] goto L4df8de;
  catch `java.lang.Throwable` @[L4df8ce..L4df8d6] goto L4df8de;
}
procedure `long` `n`(`x2.m0` v2 @kind this) @signature `Lx2/m0;.n:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4df908.  @monitorenter v2
  #L4df90a.  v0:= v2.`x2.m0.p` @type ^`int`;
  #L4df90e.  if v0 != 0 then goto L4df91a;
  #L4df912.  v0:= -1L;
  #L4df916.  @monitorexit v2
  #L4df918.  return v0 @kind wide;
  #L4df91a.  call temp:= `p`(v2, v0) @signature `Lx2/m0;.p:(I)J` @kind direct;
  #L4df920.  v0:= temp @kind wide;
  #L4df922.  @monitorexit v2
  #L4df924.  return v0 @kind wide;
  #L4df926.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df928.  @monitorexit v2
  #L4df92a.  throw v0;
  catch `java.lang.Throwable` @[L4df90a..L4df90e] goto L4df926;
  catch `java.lang.Throwable` @[L4df91a..L4df922] goto L4df926;
}
procedure `long` `p`(`x2.m0` v5 @kind this, `int` v6 ) @signature `Lx2/m0;.p:(I)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4df998.  v0:= v5.`x2.m0.u` @type ^`long` @kind wide;
  #L4df99c.  call temp:= `B`(v5, v6) @signature `Lx2/m0;.B:(I)J` @kind direct;
  #L4df9a2.  v2:= temp @kind wide;
  #L4df9a4.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4df9aa.  v0:= temp @kind wide;
  #L4df9ac.  v5.`x2.m0.u` @type ^`long` := v0 @kind wide;
  #L4df9b0.  v0:= v5.`x2.m0.p` @type ^`int`;
  #L4df9b4.  v0:= v0 - v6 @kind int;
  #L4df9b6.  v5.`x2.m0.p` @type ^`int` := v0;
  #L4df9ba.  v0:= v5.`x2.m0.q` @type ^`int`;
  #L4df9be.  v0:= v0 + v6 @kind int;
  #L4df9c0.  v5.`x2.m0.q` @type ^`int` := v0;
  #L4df9c4.  v1:= v5.`x2.m0.r` @type ^`int`;
  #L4df9c8.  v1:= v1 + v6 @kind int;
  #L4df9ca.  v5.`x2.m0.r` @type ^`int` := v1;
  #L4df9ce.  v2:= v5.`x2.m0.i` @type ^`int`;
  #L4df9d2.  if v1 < v2 then goto L4df9dc;
  #L4df9d6.  v1:= v1 - v2 @kind int;
  #L4df9d8.  v5.`x2.m0.r` @type ^`int` := v1;
  #L4df9dc.  v1:= v5.`x2.m0.s` @type ^`int`;
  #L4df9e0.  v1:= v1 - v6 @kind int;
  #L4df9e2.  v5.`x2.m0.s` @type ^`int` := v1;
  #L4df9e6.  if v1 >= 0 then goto L4df9f0;
  #L4df9ea.  v6:= 0I;
  #L4df9ec.  v5.`x2.m0.s` @type ^`int` := v6;
  #L4df9f0.  v6:= v5.`x2.m0.c` @type ^`x2.r0` @kind object;
  #L4df9f4.  call `d`(v6, v0) @signature `Lx2/r0;.d:(I)V` @kind virtual;
  #L4df9fa.  v6:= v5.`x2.m0.p` @type ^`int`;
  #L4df9fe.  if v6 != 0 then goto L4dfa28;
  #L4dfa02.  v6:= v5.`x2.m0.r` @type ^`int`;
  #L4dfa06.  if v6 != 0 then goto L4dfa0e;
  #L4dfa0a.  v6:= v5.`x2.m0.i` @type ^`int`;
  #L4dfa0e.  v6:= v6 + -1;
  #L4dfa12.  v0:= v5.`x2.m0.k` @type ^`long`[] @kind object;
  #L4dfa16.  v1:= v0[v6] @kind wide;
  #L4dfa1a.  v0:= v5.`x2.m0.l` @type ^`int`[] @kind object;
  #L4dfa1e.  v6:= v0[v6];
  #L4dfa22.  v3:= (`long`) v6 @kind i2l;
  #L4dfa24.  v1:= v1 + v3 @kind long;
  #L4dfa26.  return v1 @kind wide;
  #L4dfa28.  v6:= v5.`x2.m0.k` @type ^`long`[] @kind object;
  #L4dfa2c.  v0:= v5.`x2.m0.r` @type ^`int`;
  #L4dfa30.  v0:= v6[v0] @kind wide;
  #L4dfa34.  return v0 @kind wide;
}
procedure `long` `t`(`x2.m0` v8 @kind this, `int` v9 ) @signature `Lx2/m0;.t:(I)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4dfa48.  call temp:= `G`(v8) @signature `Lx2/m0;.G:()I` @kind virtual;
  #L4dfa4e.  v0:= temp;
  #L4dfa50.  v0:= v0 - v9 @kind int;
  #L4dfa52.  v1:= 0I;
  #L4dfa54.  v2:= 1I;
  #L4dfa56.  if v0 < 0 then goto L4dfa6c;
  #L4dfa5a.  v3:= v8.`x2.m0.p` @type ^`int`;
  #L4dfa5e.  v4:= v8.`x2.m0.s` @type ^`int`;
  #L4dfa62.  v3:= v3 - v4 @kind int;
  #L4dfa64.  if v0 > v3 then goto L4dfa6c;
  #L4dfa68.  v3:= 1I;
  #L4dfa6a.  goto L4dfa6e;
  #L4dfa6c.  v3:= 0I;
  #L4dfa6e.  call `a`(v3) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L4dfa74.  v3:= v8.`x2.m0.p` @type ^`int`;
  #L4dfa78.  v3:= v3 - v0 @kind int;
  #L4dfa7a.  v8.`x2.m0.p` @type ^`int` := v3;
  #L4dfa7e.  v4:= v8.`x2.m0.u` @type ^`long` @kind wide;
  #L4dfa82.  call temp:= `B`(v8, v3) @signature `Lx2/m0;.B:(I)J` @kind direct;
  #L4dfa88.  v6:= temp @kind wide;
  #L4dfa8a.  call temp:= `max`(v4, v6) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4dfa90.  v3:= temp @kind wide;
  #L4dfa92.  v8.`x2.m0.v` @type ^`long` := v3 @kind wide;
  #L4dfa96.  if v0 != 0 then goto L4dfaa4;
  #L4dfa9a.  v0:= v8.`x2.m0.w` @type ^`boolean` @kind boolean;
  #L4dfa9e.  if v0 == 0 then goto L4dfaa4;
  #L4dfaa2.  v1:= 1I;
  #L4dfaa4.  v8.`x2.m0.w` @type ^`boolean` := v1 @kind boolean;
  #L4dfaa8.  v0:= v8.`x2.m0.c` @type ^`x2.r0` @kind object;
  #L4dfaac.  call `c`(v0, v9) @signature `Lx2/r0;.c:(I)V` @kind virtual;
  #L4dfab2.  v9:= v8.`x2.m0.p` @type ^`int`;
  #L4dfab6.  if v9 == 0 then goto L4dfada;
  #L4dfaba.  v9:= v9 - v2 @kind int;
  #L4dfabc.  call temp:= `D`(v8, v9) @signature `Lx2/m0;.D:(I)I` @kind direct;
  #L4dfac2.  v9:= temp;
  #L4dfac4.  v0:= v8.`x2.m0.k` @type ^`long`[] @kind object;
  #L4dfac8.  v1:= v0[v9] @kind wide;
  #L4dfacc.  v0:= v8.`x2.m0.l` @type ^`int`[] @kind object;
  #L4dfad0.  v9:= v0[v9];
  #L4dfad4.  v3:= (`long`) v9 @kind i2l;
  #L4dfad6.  v1:= v1 + v3 @kind long;
  #L4dfad8.  return v1 @kind wide;
  #L4dfada.  v0:= 0L;
  #L4dfade.  return v0 @kind wide;
}
procedure `int` `v`(`x2.m0` v7 @kind this, `int` v8 , `int` v9 , `long` v10 , `boolean` v12 ) @signature `Lx2/m0;.v:(IIJZ)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4df4a0.  v0:= 0I;
  #L4df4a2.  v1:= -1I;
  #L4df4a4.  v2:= 0I;
  #L4df4a6.  if v2 >= v9 then goto L4df4f4;
  #L4df4aa.  v3:= v7.`x2.m0.n` @type ^`long`[] @kind object;
  #L4df4ae.  v4:= v3[v8] @kind wide;
  #L4df4b2.  v6:= lcmp(v4, v10);
  #L4df4b6.  if v6 > 0 then goto L4df4f4;
  #L4df4ba.  if v12 == 0 then goto L4df4ce;
  #L4df4be.  v4:= v7.`x2.m0.m` @type ^`int`[] @kind object;
  #L4df4c2.  v4:= v4[v8];
  #L4df4c6.  v4:= v4 ^& 1;
  #L4df4ca.  if v4 == 0 then goto L4df4e0;
  #L4df4ce.  v4:= v3[v8] @kind wide;
  #L4df4d2.  v1:= lcmp(v4, v10);
  #L4df4d6.  if v1 != 0 then goto L4df4de;
  #L4df4da.  v1:= v2;
  #L4df4dc.  goto L4df4f4;
  #L4df4de.  v1:= v2;
  #L4df4e0.  v8:= v8 + 1;
  #L4df4e4.  v3:= v7.`x2.m0.i` @type ^`int`;
  #L4df4e8.  if v8 != v3 then goto L4df4ee;
  #L4df4ec.  v8:= 0I;
  #L4df4ee.  v2:= v2 + 1;
  #L4df4f2.  goto L4df4a6;
  #L4df4f4.  return v1;
}
procedure `long` `A`(`x2.m0` v4 @kind this) @signature `Lx2/m0;.A:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dfb60.  @monitorenter v4
  #L4dfb62.  v0:= v4.`x2.m0.u` @type ^`long` @kind wide;
  #L4dfb66.  v2:= v4.`x2.m0.s` @type ^`int`;
  #L4dfb6a.  call temp:= `B`(v4, v2) @signature `Lx2/m0;.B:(I)J` @kind direct;
  #L4dfb70.  v2:= temp @kind wide;
  #L4dfb72.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4dfb78.  v0:= temp @kind wide;
  #L4dfb7a.  @monitorexit v4
  #L4dfb7c.  return v0 @kind wide;
  #L4dfb7e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dfb80.  @monitorexit v4
  #L4dfb82.  throw v0;
  catch `java.lang.Throwable` @[L4dfb62..L4dfb7a] goto L4dfb7e;
}
procedure `int` `C`(`x2.m0` v2 @kind this) @signature `Lx2/m0;.C:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4df520.  v0:= v2.`x2.m0.q` @type ^`int`;
  #L4df524.  v1:= v2.`x2.m0.s` @type ^`int`;
  #L4df528.  v0:= v0 + v1 @kind int;
  #L4df52a.  return v0;
}
procedure `int` `E`(`x2.m0` v8 @kind this, `long` v9 , `boolean` v11 ) @signature `Lx2/m0;.E:(JZ)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4df560.  @monitorenter v8
  #L4df562.  v0:= v8.`x2.m0.s` @type ^`int`;
  #L4df566.  call temp:= `D`(v8, v0) @signature `Lx2/m0;.D:(I)I` @kind direct;
  #L4df56c.  v2:= temp;
  #L4df56e.  call temp:= `H`(v8) @signature `Lx2/m0;.H:()Z` @kind direct;
  #L4df574.  v0:= temp;
  #L4df576.  v7:= 0I;
  #L4df578.  if v0 == 0 then goto L4df5d2;
  #L4df57c.  v0:= v8.`x2.m0.n` @type ^`long`[] @kind object;
  #L4df580.  v3:= v0[v2] @kind wide;
  #L4df584.  v0:= lcmp(v9, v3);
  #L4df588.  if v0 >= 0 then goto L4df58e;
  #L4df58c.  goto L4df5d2;
  #L4df58e.  v0:= v8.`x2.m0.v` @type ^`long` @kind wide;
  #L4df592.  v3:= lcmp(v9, v0);
  #L4df596.  if v3 <= 0 then goto L4df5ac;
  #L4df59a.  if v11 == 0 then goto L4df5ac;
  #L4df59e.  v9:= v8.`x2.m0.p` @type ^`int`;
  #L4df5a2.  v10:= v8.`x2.m0.s` @type ^`int`;
  #L4df5a6.  v9:= v9 - v10 @kind int;
  #L4df5a8.  @monitorexit v8
  #L4df5aa.  return v9;
  #L4df5ac.  v11:= v8.`x2.m0.p` @type ^`int`;
  #L4df5b0.  v0:= v8.`x2.m0.s` @type ^`int`;
  #L4df5b4.  v3:= v11 - v0 @kind int;
  #L4df5b8.  v6:= 1I;
  #L4df5ba.  v1:= v8 @kind object;
  #L4df5bc.  v4:= v9 @kind wide;
  #L4df5be.  call temp:= `v`(v1, v2, v3, v4, v6) @signature `Lx2/m0;.v:(IIJZ)I` @kind direct;
  #L4df5c4.  v9:= temp;
  #L4df5c6.  v10:= -1I;
  #L4df5c8.  @monitorexit v8
  #L4df5ca.  if v9 != v10 then goto L4df5d0;
  #L4df5ce.  return v7;
  #L4df5d0.  return v9;
  #L4df5d2.  @monitorexit v8
  #L4df5d4.  return v7;
  #L4df5d6.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df5d8.  @monitorexit v8
  #L4df5da.  throw v9;
  catch `java.lang.Throwable` @[L4df562..L4df5a6] goto L4df5d6;
  catch `java.lang.Throwable` @[L4df5ac..L4df5c6] goto L4df5d6;
}
procedure `v1.j1` `F`(`x2.m0` v1 @kind this) @signature `Lx2/m0;.F:()Lv1/j1;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4dfc64.  @monitorenter v1
  #L4dfc66.  v0:= v1.`x2.m0.y` @type ^`boolean` @kind boolean;
  #L4dfc6a.  if v0 == 0 then goto L4dfc72;
  #L4dfc6e.  v0:= 0I;
  #L4dfc70.  goto L4dfc76;
  #L4dfc72.  v0:= v1.`x2.m0.B` @type ^`v1.j1` @kind object;
  #L4dfc76.  @monitorexit v1
  #L4dfc78.  return v0 @kind object;
  #L4dfc7a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dfc7c.  @monitorexit v1
  #L4dfc7e.  throw v0;
  catch `java.lang.Throwable` @[L4dfc66..L4dfc76] goto L4dfc7a;
}
procedure `int` `G`(`x2.m0` v2 @kind this) @signature `Lx2/m0;.G:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4df600.  v0:= v2.`x2.m0.q` @type ^`int`;
  #L4df604.  v1:= v2.`x2.m0.p` @type ^`int`;
  #L4df608.  v0:= v0 + v1 @kind int;
  #L4df60a.  return v0;
}
procedure `void` `I`(`x2.m0` v1 @kind this) @signature `Lx2/m0;.I:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4e0054.  v0:= 1I;
  #L4e0056.  v1.`x2.m0.z` @type ^`boolean` := v0 @kind boolean;
  #L4e005a.  return @kind void;
}
procedure `boolean` `J`(`x2.m0` v1 @kind this) @signature `Lx2/m0;.J:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4df170.  @monitorenter v1
  #L4df172.  v0:= v1.`x2.m0.w` @type ^`boolean` @kind boolean;
  #L4df176.  @monitorexit v1
  #L4df178.  return v0;
  #L4df17a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df17c.  @monitorexit v1
  #L4df17e.  throw v0;
  catch `java.lang.Throwable` @[L4df172..L4df176] goto L4df17a;
}
procedure `boolean` `K`(`x2.m0` v2 @kind this, `boolean` v3 ) @signature `Lx2/m0;.K:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4df19c.  @monitorenter v2
  #L4df19e.  call temp:= `H`(v2) @signature `Lx2/m0;.H:()Z` @kind direct;
  #L4df1a4.  v0:= temp;
  #L4df1a6.  v1:= 1I;
  #L4df1a8.  if v0 != 0 then goto L4df1d0;
  #L4df1ac.  if v3 != 0 then goto L4df1cc;
  #L4df1b0.  v3:= v2.`x2.m0.w` @type ^`boolean` @kind boolean;
  #L4df1b4.  if v3 != 0 then goto L4df1cc;
  #L4df1b8.  v3:= v2.`x2.m0.B` @type ^`v1.j1` @kind object;
  #L4df1bc.  if v3 == 0 then goto L4df1ca;
  #L4df1c0.  v0:= v2.`x2.m0.g` @type ^`v1.j1` @kind object;
  #L4df1c4.  if v3 == v0 then goto L4df1ca;
  #L4df1c8.  goto L4df1cc;
  #L4df1ca.  v1:= 0I;
  #L4df1cc.  @monitorexit v2
  #L4df1ce.  return v1;
  #L4df1d0.  v3:= v2.`x2.m0.c` @type ^`x2.r0` @kind object;
  #L4df1d4.  call temp:= `C`(v2) @signature `Lx2/m0;.C:()I` @kind virtual;
  #L4df1da.  v0:= temp;
  #L4df1dc.  call temp:= `e`(v3, v0) @signature `Lx2/r0;.e:(I)Ljava/lang/Object;` @kind virtual;
  #L4df1e2.  v3:= temp @kind object;
  #L4df1e4.  v3:= (`x2.m0$c`) v3 @kind object;
  #L4df1e8.  v3:= v3.`x2.m0$c.a` @type ^`v1.j1` @kind object;
  #L4df1ec.  v0:= v2.`x2.m0.g` @type ^`v1.j1` @kind object;
  #L4df1f0.  if v3 == v0 then goto L4df1f8;
  #L4df1f4.  @monitorexit v2
  #L4df1f6.  return v1;
  #L4df1f8.  v3:= v2.`x2.m0.s` @type ^`int`;
  #L4df1fc.  call temp:= `D`(v2, v3) @signature `Lx2/m0;.D:(I)I` @kind direct;
  #L4df202.  v3:= temp;
  #L4df204.  call temp:= `M`(v2, v3) @signature `Lx2/m0;.M:(I)Z` @kind direct;
  #L4df20a.  v3:= temp;
  #L4df20c.  @monitorexit v2
  #L4df20e.  return v3;
  #L4df210.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df212.  @monitorexit v2
  #L4df214.  throw v3;
  catch `java.lang.Throwable` @[L4df19e..L4df1c4] goto L4df210;
  catch `java.lang.Throwable` @[L4df1d0..L4df1f0] goto L4df210;
  catch `java.lang.Throwable` @[L4df1f8..L4df20c] goto L4df210;
}
procedure `void` `N`(`x2.m0` v2 @kind this) @signature `Lx2/m0;.N:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e0088.  v0:= v2.`x2.m0.h` @type ^`z1.o` @kind object;
  #L4e008c.  if v0 == 0 then goto L4e00ba;
  #L4e0090.  call temp:= `getState`(v0) @signature `Lz1/o;.getState:()I` @kind interface;
  #L4e0096.  v0:= temp;
  #L4e0098.  v1:= 1I;
  #L4e009a.  if v0 == v1 then goto L4e00a0;
  #L4e009e.  goto L4e00ba;
  #L4e00a0.  v0:= v2.`x2.m0.h` @type ^`z1.o` @kind object;
  #L4e00a4.  call temp:= `g`(v0) @signature `Lz1/o;.g:()Lz1/o$a;` @kind interface;
  #L4e00aa.  v0:= temp @kind object;
  #L4e00ac.  call temp:= `e`(v0) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4e00b2.  v0:= temp @kind object;
  #L4e00b4.  v0:= (`z1.o$a`) v0 @kind object;
  #L4e00b8.  throw v0;
  #L4e00ba.  return @kind void;
}
procedure `int` `Q`(`x2.m0` v2 @kind this) @signature `Lx2/m0;.Q:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4df770.  @monitorenter v2
  #L4df772.  v0:= v2.`x2.m0.s` @type ^`int`;
  #L4df776.  call temp:= `D`(v2, v0) @signature `Lx2/m0;.D:(I)I` @kind direct;
  #L4df77c.  v0:= temp;
  #L4df77e.  call temp:= `H`(v2) @signature `Lx2/m0;.H:()Z` @kind direct;
  #L4df784.  v1:= temp;
  #L4df786.  if v1 == 0 then goto L4df794;
  #L4df78a.  v1:= v2.`x2.m0.j` @type ^`int`[] @kind object;
  #L4df78e.  v0:= v1[v0];
  #L4df792.  goto L4df798;
  #L4df794.  v0:= v2.`x2.m0.C` @type ^`int`;
  #L4df798.  @monitorexit v2
  #L4df79a.  return v0;
  #L4df79c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df79e.  @monitorexit v2
  #L4df7a0.  throw v0;
  catch `java.lang.Throwable` @[L4df772..L4df798] goto L4df79c;
}
procedure `void` `R`(`x2.m0` v0 @kind this) @signature `Lx2/m0;.R:()V` @AccessFlag PUBLIC {
    temp;

  #L4e0170.  call `r`(v0) @signature `Lx2/m0;.r:()V` @kind virtual;
  #L4e0176.  call `U`(v0) @signature `Lx2/m0;.U:()V` @kind direct;
  #L4e017c.  return @kind void;
}
procedure `int` `S`(`x2.m0` v9 @kind this, `v1.k1` v10 @kind object, `y1.g` v11 @kind object, `int` v12 , `boolean` v13 ) @signature `Lx2/m0;.S:(Lv1/k1;Ly1/g;IZ)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4df7c0.  v0:= v12 ^& 2;
  #L4df7c4.  v1:= 0I;
  #L4df7c6.  v2:= 1I;
  #L4df7c8.  if v0 == 0 then goto L4df7d0;
  #L4df7cc.  v6:= 1I;
  #L4df7ce.  goto L4df7d2;
  #L4df7d0.  v6:= 0I;
  #L4df7d2.  v8:= v9.`x2.m0.b` @type ^`x2.m0$b` @kind object;
  #L4df7d6.  v3:= v9 @kind object;
  #L4df7d8.  v4:= v10 @kind object;
  #L4df7da.  v5:= v11 @kind object;
  #L4df7dc.  v7:= v13;
  #L4df7de.  call temp:= `P`(v3, v4, v5, v6, v7, v8) @signature `Lx2/m0;.P:(Lv1/k1;Ly1/g;ZZLx2/m0$b;)I` @kind direct;
  #L4df7e4.  v10:= temp;
  #L4df7e6.  v13:= -4I;
  #L4df7e8.  if v10 != v13 then goto L4df832;
  #L4df7ec.  call temp:= `t`(v11) @signature `Ly1/a;.t:()Z` @kind virtual;
  #L4df7f2.  v13:= temp;
  #L4df7f4.  if v13 != 0 then goto L4df832;
  #L4df7f8.  v13:= v12 ^& 1;
  #L4df7fc.  if v13 == 0 then goto L4df802;
  #L4df800.  v1:= 1I;
  #L4df802.  v12:= v12 ^& 4;
  #L4df806.  if v12 != 0 then goto L4df824;
  #L4df80a.  v12:= v9.`x2.m0.a` @type ^`x2.k0` @kind object;
  #L4df80e.  v13:= v9.`x2.m0.b` @type ^`x2.m0$b` @kind object;
  #L4df812.  if v1 == 0 then goto L4df81e;
  #L4df816.  call `f`(v12, v11, v13) @signature `Lx2/k0;.f:(Ly1/g;Lx2/m0$b;)V` @kind virtual;
  #L4df81c.  goto L4df824;
  #L4df81e.  call `m`(v12, v11, v13) @signature `Lx2/k0;.m:(Ly1/g;Lx2/m0$b;)V` @kind virtual;
  #L4df824.  if v1 != 0 then goto L4df832;
  #L4df828.  v11:= v9.`x2.m0.s` @type ^`int`;
  #L4df82c.  v11:= v11 + v2 @kind int;
  #L4df82e.  v9.`x2.m0.s` @type ^`int` := v11;
  #L4df832.  return v10;
}
procedure `void` `T`(`x2.m0` v1 @kind this) @signature `Lx2/m0;.T:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e0190.  v0:= 1I;
  #L4e0192.  call `W`(v1, v0) @signature `Lx2/m0;.W:(Z)V` @kind virtual;
  #L4e0198.  call `U`(v1) @signature `Lx2/m0;.U:()V` @kind direct;
  #L4e019e.  return @kind void;
}
procedure `void` `V`(`x2.m0` v1 @kind this) @signature `Lx2/m0;.V:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e01e0.  v0:= 0I;
  #L4e01e2.  call `W`(v1, v0) @signature `Lx2/m0;.W:(Z)V` @kind virtual;
  #L4e01e8.  return @kind void;
}
procedure `void` `W`(`x2.m0` v4 @kind this, `boolean` v5 ) @signature `Lx2/m0;.W:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e01fc.  v0:= v4.`x2.m0.a` @type ^`x2.k0` @kind object;
  #L4e0200.  call `n`(v0) @signature `Lx2/k0;.n:()V` @kind virtual;
  #L4e0206.  v0:= 0I;
  #L4e0208.  v4.`x2.m0.p` @type ^`int` := v0;
  #L4e020c.  v4.`x2.m0.q` @type ^`int` := v0;
  #L4e0210.  v4.`x2.m0.r` @type ^`int` := v0;
  #L4e0214.  v4.`x2.m0.s` @type ^`int` := v0;
  #L4e0218.  v1:= 1I;
  #L4e021a.  v4.`x2.m0.x` @type ^`boolean` := v1 @kind boolean;
  #L4e021e.  v2:= -9223372036854775808L;
  #L4e0222.  v4.`x2.m0.t` @type ^`long` := v2 @kind wide;
  #L4e0226.  v4.`x2.m0.u` @type ^`long` := v2 @kind wide;
  #L4e022a.  v4.`x2.m0.v` @type ^`long` := v2 @kind wide;
  #L4e022e.  v4.`x2.m0.w` @type ^`boolean` := v0 @kind boolean;
  #L4e0232.  v0:= v4.`x2.m0.c` @type ^`x2.r0` @kind object;
  #L4e0236.  call `b`(v0) @signature `Lx2/r0;.b:()V` @kind virtual;
  #L4e023c.  if v5 == 0 then goto L4e024e;
  #L4e0240.  v5:= 0I;
  #L4e0242.  v4.`x2.m0.A` @type ^`v1.j1` := v5 @kind object;
  #L4e0246.  v4.`x2.m0.B` @type ^`v1.j1` := v5 @kind object;
  #L4e024a.  v4.`x2.m0.y` @type ^`boolean` := v1 @kind boolean;
  #L4e024e.  return @kind void;
}
procedure `boolean` `Y`(`x2.m0` v3 @kind this, `int` v4 ) @signature `Lx2/m0;.Y:(I)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4df298.  @monitorenter v3
  #L4df29a.  call `X`(v3) @signature `Lx2/m0;.X:()V` @kind direct;
  #L4df2a0.  v0:= v3.`x2.m0.q` @type ^`int`;
  #L4df2a4.  if v4 < v0 then goto L4df2c8;
  #L4df2a8.  v1:= v3.`x2.m0.p` @type ^`int`;
  #L4df2ac.  v1:= v1 + v0 @kind int;
  #L4df2ae.  if v4 <= v1 then goto L4df2b4;
  #L4df2b2.  goto L4df2c8;
  #L4df2b4.  v1:= -9223372036854775808L;
  #L4df2b8.  v3.`x2.m0.t` @type ^`long` := v1 @kind wide;
  #L4df2bc.  v4:= v4 - v0 @kind int;
  #L4df2be.  v3.`x2.m0.s` @type ^`int` := v4;
  #L4df2c2.  v4:= 1I;
  #L4df2c4.  @monitorexit v3
  #L4df2c6.  return v4;
  #L4df2c8.  v4:= 0I;
  #L4df2ca.  goto L4df2c4;
  #L4df2cc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df2ce.  @monitorexit v3
  #L4df2d0.  throw v4;
  catch `java.lang.Throwable` @[L4df29a..L4df2c2] goto L4df2cc;
}
procedure `boolean` `Z`(`x2.m0` v8 @kind this, `long` v9 , `boolean` v11 ) @signature `Lx2/m0;.Z:(JZ)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4df2f0.  @monitorenter v8
  #L4df2f2.  call `X`(v8) @signature `Lx2/m0;.X:()V` @kind direct;
  #L4df2f8.  v0:= v8.`x2.m0.s` @type ^`int`;
  #L4df2fc.  call temp:= `D`(v8, v0) @signature `Lx2/m0;.D:(I)I` @kind direct;
  #L4df302.  v2:= temp;
  #L4df304.  call temp:= `H`(v8) @signature `Lx2/m0;.H:()Z` @kind direct;
  #L4df30a.  v0:= temp;
  #L4df30c.  v7:= 0I;
  #L4df30e.  if v0 == 0 then goto L4df36c;
  #L4df312.  v0:= v8.`x2.m0.n` @type ^`long`[] @kind object;
  #L4df316.  v3:= v0[v2] @kind wide;
  #L4df31a.  v0:= lcmp(v9, v3);
  #L4df31e.  if v0 < 0 then goto L4df36c;
  #L4df322.  v0:= v8.`x2.m0.v` @type ^`long` @kind wide;
  #L4df326.  v3:= lcmp(v9, v0);
  #L4df32a.  if v3 <= 0 then goto L4df334;
  #L4df32e.  if v11 != 0 then goto L4df334;
  #L4df332.  goto L4df36c;
  #L4df334.  v11:= v8.`x2.m0.p` @type ^`int`;
  #L4df338.  v0:= v8.`x2.m0.s` @type ^`int`;
  #L4df33c.  v3:= v11 - v0 @kind int;
  #L4df340.  v6:= 1I;
  #L4df342.  v1:= v8 @kind object;
  #L4df344.  v4:= v9 @kind wide;
  #L4df346.  call temp:= `v`(v1, v2, v3, v4, v6) @signature `Lx2/m0;.v:(IIJZ)I` @kind direct;
  #L4df34c.  v11:= temp;
  #L4df34e.  v0:= -1I;
  #L4df350.  if v11 != v0 then goto L4df358;
  #L4df354.  @monitorexit v8
  #L4df356.  return v7;
  #L4df358.  v8.`x2.m0.t` @type ^`long` := v9 @kind wide;
  #L4df35c.  v9:= v8.`x2.m0.s` @type ^`int`;
  #L4df360.  v9:= v9 + v11 @kind int;
  #L4df362.  v8.`x2.m0.s` @type ^`int` := v9;
  #L4df366.  v9:= 1I;
  #L4df368.  @monitorexit v8
  #L4df36a.  return v9;
  #L4df36c.  @monitorexit v8
  #L4df36e.  return v7;
  #L4df370.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df372.  @monitorexit v8
  #L4df374.  throw v9;
  catch `java.lang.Throwable` @[L4df2f2..L4df34e] goto L4df370;
  catch `java.lang.Throwable` @[L4df358..L4df366] goto L4df370;
}
procedure `void` `a`(`x2.m0` v0 @kind this, `s3.z` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lx2/m0;.a:(Ls3/z;II)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4e02b0.  v3:= v0.`x2.m0.a` @type ^`x2.k0` @kind object;
  #L4e02b4.  call `q`(v3, v1, v2) @signature `Lx2/k0;.q:(Ls3/z;I)V` @kind virtual;
  #L4e02ba.  return @kind void;
}
procedure `void` `a0`(`x2.m0` v3 @kind this, `long` v4 ) @signature `Lx2/m0;.a0:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4e03dc.  v0:= v3.`x2.m0.F` @type ^`long` @kind wide;
  #L4e03e0.  v2:= lcmp(v0, v4);
  #L4e03e4.  if v2 == 0 then goto L4e03f2;
  #L4e03e8.  v3.`x2.m0.F` @type ^`long` := v4 @kind wide;
  #L4e03ec.  call `I`(v3) @signature `Lx2/m0;.I:()V` @kind virtual;
  #L4e03f2.  return @kind void;
}
procedure `void` `b`(`x2.m0` v2 @kind this, `v1.j1` v3 @kind object) @signature `Lx2/m0;.b:(Lv1/j1;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4e0014.  call temp:= `w`(v2, v3) @signature `Lx2/m0;.w:(Lv1/j1;)Lv1/j1;` @kind virtual;
  #L4e001a.  v0:= temp @kind object;
  #L4e001c.  v1:= 0I;
  #L4e001e.  v2.`x2.m0.z` @type ^`boolean` := v1 @kind boolean;
  #L4e0022.  v2.`x2.m0.A` @type ^`v1.j1` := v3 @kind object;
  #L4e0026.  call temp:= `c0`(v2, v0) @signature `Lx2/m0;.c0:(Lv1/j1;)Z` @kind direct;
  #L4e002c.  v3:= temp;
  #L4e002e.  v1:= v2.`x2.m0.f` @type ^`x2.m0$d` @kind object;
  #L4e0032.  if v1 == 0 then goto L4e0040;
  #L4e0036.  if v3 == 0 then goto L4e0040;
  #L4e003a.  call `b`(v1, v0) @signature `Lx2/m0$d;.b:(Lv1/j1;)V` @kind interface;
  #L4e0040.  return @kind void;
}
procedure `void` `b0`(`x2.m0` v0 @kind this, `long` v1 ) @signature `Lx2/m0;.b0:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4e0404.  v0.`x2.m0.t` @type ^`long` := v1 @kind wide;
  #L4e0408.  return @kind void;
}
procedure `void` `c`(`x2.m0` v0 @kind this, `s3.z` v1 @kind object, `int` v2 ) @signature `Lx2/m0;.c:(Ls3/z;I)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4e0298.  call `b`(v0, v1, v2) @signature `La2/c0;.b:(La2/d0;Ls3/z;I)V` @kind static;
  #L4e029e.  return @kind void;
}
procedure `int` `d`(`x2.m0` v0 @kind this, `r3.i` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lx2/m0;.d:(Lr3/i;IZ)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4df844.  call temp:= `a`(v0, v1, v2, v3) @signature `La2/c0;.a:(La2/d0;Lr3/i;IZ)I` @kind static;
  #L4df84a.  v1:= temp;
  #L4df84c.  return v1;
}
procedure `void` `d0`(`x2.m0` v0 @kind this, `x2.m0$d` v1 @kind object) @signature `Lx2/m0;.d0:(Lx2/m0$d;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4e041c.  v0.`x2.m0.f` @type ^`x2.m0$d` := v1 @kind object;
  #L4e0420.  return @kind void;
}
procedure `int` `e`(`x2.m0` v0 @kind this, `r3.i` v1 @kind object, `int` v2 , `boolean` v3 , `int` v4 ) @signature `Lx2/m0;.e:(Lr3/i;IZI)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4df860.  v4:= v0.`x2.m0.a` @type ^`x2.k0` @kind object;
  #L4df864.  call temp:= `p`(v4, v1, v2, v3) @signature `Lx2/k0;.p:(Lr3/i;IZ)I` @kind virtual;
  #L4df86a.  v1:= temp;
  #L4df86c.  return v1;
}
procedure `void` `e0`(`x2.m0` v2 @kind this, `int` v3 ) @signature `Lx2/m0;.e0:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4e0434.  @monitorenter v2
  #L4e0436.  if v3 < 0 then goto L4e0450;
  #L4e043a.  v0:= v2.`x2.m0.s` @type ^`int`;
  #L4e043e.  v0:= v0 + v3 @kind int;
  #L4e0440.  v1:= v2.`x2.m0.p` @type ^`int`;
  #L4e0444.  if v0 > v1 then goto L4e0450;
  #L4e0448.  v0:= 1I;
  #L4e044a.  goto L4e0452;
  #L4e044c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e044e.  goto L4e0466;
  #L4e0450.  v0:= 0I;
  #L4e0452.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L4e0458.  v0:= v2.`x2.m0.s` @type ^`int`;
  #L4e045c.  v0:= v0 + v3 @kind int;
  #L4e045e.  v2.`x2.m0.s` @type ^`int` := v0;
  #L4e0462.  @monitorexit v2
  #L4e0464.  return @kind void;
  #L4e0466.  @monitorexit v2
  #L4e0468.  throw v3;
  catch `java.lang.Throwable` @[L4e043a..L4e0462] goto L4e044c;
}
procedure `void` `f`(`x2.m0` v11 @kind this, `long` v12 , `int` v14 , `int` v15 , `int` v16 , `a2.d0$a` v17 @kind object) @signature `Lx2/m0;.f:(JIIILa2/d0$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4e02cc.  v8:= v11 @kind object;
  #L4e02ce.  v0:= v8.`x2.m0.z` @type ^`boolean` @kind boolean;
  #L4e02d2.  if v0 == 0 then goto L4e02ec;
  #L4e02d6.  v0:= v8.`x2.m0.A` @type ^`v1.j1` @kind object;
  #L4e02da.  call temp:= `h`(v0) @signature `Ls3/a;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4e02e0.  v0:= temp @kind object;
  #L4e02e2.  v0:= (`v1.j1`) v0 @kind object;
  #L4e02e6.  call `b`(v11, v0) @signature `Lx2/m0;.b:(Lv1/j1;)V` @kind virtual;
  #L4e02ec.  v0:= v14 ^& 1;
  #L4e02f0.  v1:= 0I;
  #L4e02f2.  v2:= 1I;
  #L4e02f4.  if v0 == 0 then goto L4e02fc;
  #L4e02f8.  v3:= 1I;
  #L4e02fa.  goto L4e02fe;
  #L4e02fc.  v3:= 0I;
  #L4e02fe.  v4:= v8.`x2.m0.x` @type ^`boolean` @kind boolean;
  #L4e0302.  if v4 == 0 then goto L4e0310;
  #L4e0306.  if v3 != 0 then goto L4e030c;
  #L4e030a.  return @kind void;
  #L4e030c.  v8.`x2.m0.x` @type ^`boolean` := v1 @kind boolean;
  #L4e0310.  v4:= v8.`x2.m0.F` @type ^`long` @kind wide;
  #L4e0314.  v4:= v4 + v12 @kind long;
  #L4e0316.  v6:= v8.`x2.m0.D` @type ^`boolean` @kind boolean;
  #L4e031a.  if v6 == 0 then goto L4e0374;
  #L4e031e.  v6:= v8.`x2.m0.t` @type ^`long` @kind wide;
  #L4e0322.  v9:= lcmp(v4, v6);
  #L4e0326.  if v9 >= 0 then goto L4e032c;
  #L4e032a.  return @kind void;
  #L4e032c.  if v0 != 0 then goto L4e0374;
  #L4e0330.  v0:= v8.`x2.m0.E` @type ^`boolean` @kind boolean;
  #L4e0334.  if v0 != 0 then goto L4e036c;
  #L4e0338.  v0:= new `java.lang.StringBuilder`;
  #L4e033c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e0342.  v6:= "Overriding unexpected non-sync sample for format: " @kind object;
  #L4e0346.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e034c.  v6:= v8.`x2.m0.B` @type ^`v1.j1` @kind object;
  #L4e0350.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e0356.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e035c.  v0:= temp @kind object;
  #L4e035e.  v6:= "SampleQueue" @kind object;
  #L4e0362.  call `h`(v6, v0) @signature `Ls3/q;.h:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L4e0368.  v8.`x2.m0.E` @type ^`boolean` := v2 @kind boolean;
  #L4e036c.  v0:= v14 ^| 1;
  #L4e0370.  v6:= v0;
  #L4e0372.  goto L4e0376;
  #L4e0374.  v6:= v14;
  #L4e0376.  v0:= v8.`x2.m0.G` @type ^`boolean` @kind boolean;
  #L4e037a.  if v0 == 0 then goto L4e0398;
  #L4e037e.  if v3 == 0 then goto L4e0396;
  #L4e0382.  call temp:= `h`(v11, v4) @signature `Lx2/m0;.h:(J)Z` @kind direct;
  #L4e0388.  v0:= temp;
  #L4e038a.  if v0 != 0 then goto L4e0390;
  #L4e038e.  goto L4e0396;
  #L4e0390.  v8.`x2.m0.G` @type ^`boolean` := v1 @kind boolean;
  #L4e0394.  goto L4e0398;
  #L4e0396.  return @kind void;
  #L4e0398.  v0:= v8.`x2.m0.a` @type ^`x2.k0` @kind object;
  #L4e039c.  call temp:= `e`(v0) @signature `Lx2/k0;.e:()J` @kind virtual;
  #L4e03a2.  v0:= temp @kind wide;
  #L4e03a4.  v7:= v15;
  #L4e03a6.  v2:= (`long`) v7 @kind i2l;
  #L4e03a8.  v0:= v0 - v2 @kind long;
  #L4e03aa.  v2:= v16;
  #L4e03ae.  v2:= (`long`) v2 @kind i2l;
  #L4e03b0.  v9:= v0 - v2 @kind long;
  #L4e03b4.  v0:= v11 @kind object;
  #L4e03b6.  v1:= v4 @kind wide;
  #L4e03b8.  v3:= v6;
  #L4e03ba.  v4:= v9 @kind wide;
  #L4e03bc.  v6:= v15;
  #L4e03be.  v7:= v17 @kind object;
  #L4e03c2.  call `i`(v0, v1, v3, v4, v6, v7) @signature `Lx2/m0;.i:(JIJILa2/d0$a;)V` @kind direct;
  #L4e03c8.  return @kind void;
}
procedure `void` `f0`(`x2.m0` v0 @kind this, `int` v1 ) @signature `Lx2/m0;.f0:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4e0488.  v0.`x2.m0.C` @type ^`int` := v1;
  #L4e048c.  return @kind void;
}
procedure `void` `g0`(`x2.m0` v1 @kind this) @signature `Lx2/m0;.g0:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e04a0.  v0:= 1I;
  #L4e04a2.  v1.`x2.m0.G` @type ^`boolean` := v0 @kind boolean;
  #L4e04a6.  return @kind void;
}
procedure `long` `o`(`x2.m0` v2 @kind this) @signature `Lx2/m0;.o:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4df950.  @monitorenter v2
  #L4df952.  v0:= v2.`x2.m0.s` @type ^`int`;
  #L4df956.  if v0 != 0 then goto L4df962;
  #L4df95a.  v0:= -1L;
  #L4df95e.  @monitorexit v2
  #L4df960.  return v0 @kind wide;
  #L4df962.  call temp:= `p`(v2, v0) @signature `Lx2/m0;.p:(I)J` @kind direct;
  #L4df968.  v0:= temp @kind wide;
  #L4df96a.  @monitorexit v2
  #L4df96c.  return v0 @kind wide;
  #L4df96e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4df970.  @monitorexit v2
  #L4df972.  throw v0;
  catch `java.lang.Throwable` @[L4df952..L4df956] goto L4df96e;
  catch `java.lang.Throwable` @[L4df962..L4df96a] goto L4df96e;
}
procedure `void` `q`(`x2.m0` v1 @kind this, `long` v2 , `boolean` v4 , `boolean` v5 ) @signature `Lx2/m0;.q:(JZZ)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4dff84.  v0:= v1.`x2.m0.a` @type ^`x2.k0` @kind object;
  #L4dff88.  call temp:= `m`(v1, v2, v4, v5) @signature `Lx2/m0;.m:(JZZ)J` @kind direct;
  #L4dff8e.  v2:= temp @kind wide;
  #L4dff90.  call `b`(v0, v2) @signature `Lx2/k0;.b:(J)V` @kind virtual;
  #L4dff96.  return @kind void;
}
procedure `void` `r`(`x2.m0` v3 @kind this) @signature `Lx2/m0;.r:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4dffa8.  v0:= v3.`x2.m0.a` @type ^`x2.k0` @kind object;
  #L4dffac.  call temp:= `n`(v3) @signature `Lx2/m0;.n:()J` @kind direct;
  #L4dffb2.  v1:= temp @kind wide;
  #L4dffb4.  call `b`(v0, v1) @signature `Lx2/k0;.b:(J)V` @kind virtual;
  #L4dffba.  return @kind void;
}
procedure `void` `s`(`x2.m0` v3 @kind this) @signature `Lx2/m0;.s:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4dffcc.  v0:= v3.`x2.m0.a` @type ^`x2.k0` @kind object;
  #L4dffd0.  call temp:= `o`(v3) @signature `Lx2/m0;.o:()J` @kind virtual;
  #L4dffd6.  v1:= temp @kind wide;
  #L4dffd8.  call `b`(v0, v1) @signature `Lx2/k0;.b:(J)V` @kind virtual;
  #L4dffde.  return @kind void;
}
procedure `void` `u`(`x2.m0` v3 @kind this, `int` v4 ) @signature `Lx2/m0;.u:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4dfff0.  v0:= v3.`x2.m0.a` @type ^`x2.k0` @kind object;
  #L4dfff4.  call temp:= `t`(v3, v4) @signature `Lx2/m0;.t:(I)J` @kind direct;
  #L4dfffa.  v1:= temp @kind wide;
  #L4dfffc.  call `c`(v0, v1) @signature `Lx2/k0;.c:(J)V` @kind virtual;
  #L4e0002.  return @kind void;
}
procedure `v1.j1` `w`(`x2.m0` v5 @kind this, `v1.j1` v6 @kind object) @signature `Lx2/m0;.w:(Lv1/j1;)Lv1/j1;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4dfc08.  v0:= v5.`x2.m0.F` @type ^`long` @kind wide;
  #L4dfc0c.  v2:= 0L;
  #L4dfc10.  v4:= lcmp(v0, v2);
  #L4dfc14.  if v4 == 0 then goto L4dfc50;
  #L4dfc18.  v0:= v6.`v1.j1.D` @type ^`long` @kind wide;
  #L4dfc1c.  v2:= 9223372036854775807L;
  #L4dfc26.  v4:= lcmp(v0, v2);
  #L4dfc2a.  if v4 == 0 then goto L4dfc50;
  #L4dfc2e.  call temp:= `b`(v6) @signature `Lv1/j1;.b:()Lv1/j1$b;` @kind virtual;
  #L4dfc34.  v0:= temp @kind object;
  #L4dfc36.  v1:= v6.`v1.j1.D` @type ^`long` @kind wide;
  #L4dfc3a.  v3:= v5.`x2.m0.F` @type ^`long` @kind wide;
  #L4dfc3e.  v1:= v1 + v3 @kind long;
  #L4dfc40.  call temp:= `i0`(v0, v1) @signature `Lv1/j1$b;.i0:(J)Lv1/j1$b;` @kind virtual;
  #L4dfc46.  v6:= temp @kind object;
  #L4dfc48.  call temp:= `E`(v6) @signature `Lv1/j1$b;.E:()Lv1/j1;` @kind virtual;
  #L4dfc4e.  v6:= temp @kind object;
  #L4dfc50.  return v6 @kind object;
}
procedure `int` `x`(`x2.m0` v1 @kind this) @signature `Lx2/m0;.x:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4df508.  v0:= v1.`x2.m0.q` @type ^`int`;
  #L4df50c.  return v0;
}
procedure `long` `y`(`x2.m0` v3 @kind this) @signature `Lx2/m0;.y:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4dfaf0.  @monitorenter v3
  #L4dfaf2.  v0:= v3.`x2.m0.p` @type ^`int`;
  #L4dfaf6.  if v0 != 0 then goto L4dfb00;
  #L4dfafa.  v0:= -9223372036854775808L;
  #L4dfafe.  goto L4dfb0e;
  #L4dfb00.  v0:= v3.`x2.m0.n` @type ^`long`[] @kind object;
  #L4dfb04.  v1:= v3.`x2.m0.r` @type ^`int`;
  #L4dfb08.  v1:= v0[v1] @kind wide;
  #L4dfb0c.  v0:= v1 @kind wide;
  #L4dfb0e.  @monitorexit v3
  #L4dfb10.  return v0 @kind wide;
  #L4dfb12.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dfb14.  @monitorexit v3
  #L4dfb16.  throw v0;
  catch `java.lang.Throwable` @[L4dfaf2..L4dfb0c] goto L4dfb12;
}
procedure `long` `z`(`x2.m0` v2 @kind this) @signature `Lx2/m0;.z:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4dfb34.  @monitorenter v2
  #L4dfb36.  v0:= v2.`x2.m0.v` @type ^`long` @kind wide;
  #L4dfb3a.  @monitorexit v2
  #L4dfb3c.  return v0 @kind wide;
  #L4dfb3e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dfb40.  @monitorexit v2
  #L4dfb42.  throw v0;
  catch `java.lang.Throwable` @[L4dfb36..L4dfb3a] goto L4dfb3e;
}
