record `x2.k0` @kind class @AccessFlag  {
  `r3.b` `x2.k0.a` @AccessFlag PRIVATE_FINAL;
  `int` `x2.k0.b` @AccessFlag PRIVATE_FINAL;
  `s3.z` `x2.k0.c` @AccessFlag PRIVATE_FINAL;
  `x2.k0$a` `x2.k0.d` @AccessFlag PRIVATE;
  `x2.k0$a` `x2.k0.e` @AccessFlag PRIVATE;
  `x2.k0$a` `x2.k0.f` @AccessFlag PRIVATE;
  `long` `x2.k0.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x2.k0` v3 @kind this, `r3.b` v4 @kind object) @signature `Lx2/k0;.<init>:(Lr3/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4de9f0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4de9f6.  v3.`x2.k0.a` @type ^`r3.b` := v4 @kind object;
  #L4de9fa.  call temp:= `e`(v4) @signature `Lr3/b;.e:()I` @kind interface;
  #L4dea00.  v4:= temp;
  #L4dea02.  v3.`x2.k0.b` @type ^`int` := v4;
  #L4dea06.  v0:= new `s3.z`;
  #L4dea0a.  v1:= 32I;
  #L4dea0e.  call `<init>`(v0, v1) @signature `Ls3/z;.<init>:(I)V` @kind direct;
  #L4dea14.  v3.`x2.k0.c` @type ^`s3.z` := v0 @kind object;
  #L4dea18.  v0:= new `x2.k0$a`;
  #L4dea1c.  v1:= 0L;
  #L4dea20.  call `<init>`(v0, v1, v4) @signature `Lx2/k0$a;.<init>:(JI)V` @kind direct;
  #L4dea26.  v3.`x2.k0.d` @type ^`x2.k0$a` := v0 @kind object;
  #L4dea2a.  v3.`x2.k0.e` @type ^`x2.k0$a` := v0 @kind object;
  #L4dea2e.  v3.`x2.k0.f` @type ^`x2.k0$a` := v0 @kind object;
  #L4dea32.  return @kind void;
}
procedure `void` `a`(`x2.k0` v1 @kind this, `x2.k0$a` v2 @kind object) @signature `Lx2/k0;.a:(Lx2/k0$a;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4dea44.  v0:= v2.`x2.k0$a.c` @type ^`r3.a` @kind object;
  #L4dea48.  if v0 != 0 then goto L4dea4e;
  #L4dea4c.  return @kind void;
  #L4dea4e.  v0:= v1.`x2.k0.a` @type ^`r3.b` @kind object;
  #L4dea52.  call `c`(v0, v2) @signature `Lr3/b;.c:(Lr3/b$a;)V` @kind interface;
  #L4dea58.  call temp:= `b`(v2) @signature `Lx2/k0$a;.b:()Lx2/k0$a;` @kind virtual;
  #L4dea5e.  return @kind void;
}
procedure `x2.k0$a` `d`(`x2.k0$a` v3 @kind object, `long` v4 ) @signature `Lx2/k0;.d:(Lx2/k0$a;J)Lx2/k0$a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4dece0.  v0:= v3.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4dece4.  v2:= lcmp(v4, v0);
  #L4dece8.  if v2 < 0 then goto L4decf2;
  #L4decec.  v3:= v3.`x2.k0$a.d` @type ^`x2.k0$a` @kind object;
  #L4decf0.  goto L4dece0;
  #L4decf2.  return v3 @kind object;
}
procedure `void` `g`(`x2.k0` v5 @kind this, `int` v6 ) @signature `Lx2/k0;.g:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4debd4.  v0:= v5.`x2.k0.g` @type ^`long` @kind wide;
  #L4debd8.  v2:= (`long`) v6 @kind i2l;
  #L4debda.  v0:= v0 + v2 @kind long;
  #L4debdc.  v5.`x2.k0.g` @type ^`long` := v0 @kind wide;
  #L4debe0.  v6:= v5.`x2.k0.f` @type ^`x2.k0$a` @kind object;
  #L4debe4.  v2:= v6.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4debe8.  v4:= lcmp(v0, v2);
  #L4debec.  if v4 != 0 then goto L4debf8;
  #L4debf0.  v6:= v6.`x2.k0$a.d` @type ^`x2.k0$a` @kind object;
  #L4debf4.  v5.`x2.k0.f` @type ^`x2.k0$a` := v6 @kind object;
  #L4debf8.  return @kind void;
}
procedure `int` `h`(`x2.k0` v6 @kind this, `int` v7 ) @signature `Lx2/k0;.h:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4de920.  v0:= v6.`x2.k0.f` @type ^`x2.k0$a` @kind object;
  #L4de924.  v1:= v0.`x2.k0$a.c` @type ^`r3.a` @kind object;
  #L4de928.  if v1 != 0 then goto L4de954;
  #L4de92c.  v1:= v6.`x2.k0.a` @type ^`r3.b` @kind object;
  #L4de930.  call temp:= `d`(v1) @signature `Lr3/b;.d:()Lr3/a;` @kind interface;
  #L4de936.  v1:= temp @kind object;
  #L4de938.  v2:= new `x2.k0$a`;
  #L4de93c.  v3:= v6.`x2.k0.f` @type ^`x2.k0$a` @kind object;
  #L4de940.  v3:= v3.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4de944.  v5:= v6.`x2.k0.b` @type ^`int`;
  #L4de948.  call `<init>`(v2, v3, v5) @signature `Lx2/k0$a;.<init>:(JI)V` @kind direct;
  #L4de94e.  call `c`(v0, v1, v2) @signature `Lx2/k0$a;.c:(Lr3/a;Lx2/k0$a;)V` @kind virtual;
  #L4de954.  v0:= v6.`x2.k0.f` @type ^`x2.k0$a` @kind object;
  #L4de958.  v0:= v0.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4de95c.  v2:= v6.`x2.k0.g` @type ^`long` @kind wide;
  #L4de960.  v0:= v0 - v2 @kind long;
  #L4de962.  v1:= (`int`) v0 @kind l2i;
  #L4de964.  call temp:= `min`(v7, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4de96a.  v7:= temp;
  #L4de96c.  return v7;
}
procedure `x2.k0$a` `i`(`x2.k0$a` v3 @kind object, `long` v4 , `java.nio.ByteBuffer` v6 @kind object, `int` v7 ) @signature `Lx2/k0;.i:(Lx2/k0$a;JLjava/nio/ByteBuffer;I)Lx2/k0$a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4ded68.  call temp:= `d`(v3, v4) @signature `Lx2/k0;.d:(Lx2/k0$a;J)Lx2/k0$a;` @kind static;
  #L4ded6e.  v3:= temp @kind object;
  #L4ded70.  if v7 <= 0 then goto L4dedb2;
  #L4ded74.  v0:= v3.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4ded78.  v0:= v0 - v4 @kind long;
  #L4ded7a.  v1:= (`int`) v0 @kind l2i;
  #L4ded7c.  call temp:= `min`(v7, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4ded82.  v0:= temp;
  #L4ded84.  v1:= v3.`x2.k0$a.c` @type ^`r3.a` @kind object;
  #L4ded88.  v1:= v1.`r3.a.a` @type ^`byte`[] @kind object;
  #L4ded8c.  call temp:= `e`(v3, v4) @signature `Lx2/k0$a;.e:(J)I` @kind virtual;
  #L4ded92.  v2:= temp;
  #L4ded94.  call temp:= `put`(v6, v1, v2, v0) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4ded9a.  v7:= v7 - v0 @kind int;
  #L4ded9c.  v0:= (`long`) v0 @kind i2l;
  #L4ded9e.  v4:= v4 + v0 @kind long;
  #L4deda0.  v0:= v3.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4deda4.  v2:= lcmp(v4, v0);
  #L4deda8.  if v2 != 0 then goto L4ded70;
  #L4dedac.  v3:= v3.`x2.k0$a.d` @type ^`x2.k0$a` @kind object;
  #L4dedb0.  goto L4ded70;
  #L4dedb2.  return v3 @kind object;
}
procedure `x2.k0$a` `j`(`x2.k0$a` v5 @kind object, `long` v6 , `byte`[] v8 @kind object, `int` v9 ) @signature `Lx2/k0;.j:(Lx2/k0$a;J[BI)Lx2/k0$a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ded04.  call temp:= `d`(v5, v6) @signature `Lx2/k0;.d:(Lx2/k0$a;J)Lx2/k0$a;` @kind static;
  #L4ded0a.  v5:= temp @kind object;
  #L4ded0c.  v0:= v9;
  #L4ded0e.  if v0 <= 0 then goto L4ded54;
  #L4ded12.  v1:= v5.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4ded16.  v1:= v1 - v6 @kind long;
  #L4ded18.  v2:= (`int`) v1 @kind l2i;
  #L4ded1a.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4ded20.  v1:= temp;
  #L4ded22.  v2:= v5.`x2.k0$a.c` @type ^`r3.a` @kind object;
  #L4ded26.  v2:= v2.`r3.a.a` @type ^`byte`[] @kind object;
  #L4ded2a.  call temp:= `e`(v5, v6) @signature `Lx2/k0$a;.e:(J)I` @kind virtual;
  #L4ded30.  v3:= temp;
  #L4ded32.  v4:= v9 - v0 @kind int;
  #L4ded36.  call `arraycopy`(v2, v3, v8, v4, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ded3c.  v0:= v0 - v1 @kind int;
  #L4ded3e.  v1:= (`long`) v1 @kind i2l;
  #L4ded40.  v6:= v6 + v1 @kind long;
  #L4ded42.  v1:= v5.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4ded46.  v3:= lcmp(v6, v1);
  #L4ded4a.  if v3 != 0 then goto L4ded0e;
  #L4ded4e.  v5:= v5.`x2.k0$a.d` @type ^`x2.k0$a` @kind object;
  #L4ded52.  goto L4ded0e;
  #L4ded54.  return v5 @kind object;
}
procedure `x2.k0$a` `k`(`x2.k0$a` v18 @kind object, `y1.g` v19 @kind object, `x2.m0$b` v20 @kind object, `s3.z` v21 @kind object) @signature `Lx2/k0;.k:(Lx2/k0$a;Ly1/g;Lx2/m0$b;Ls3/z;)Lx2/k0$a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4dedc4.  v0:= v20 @kind object;
  #L4dedc8.  v1:= v21 @kind object;
  #L4dedcc.  v2:= v0.`x2.m0$b.b` @type ^`long` @kind wide;
  #L4dedd0.  v4:= 1I;
  #L4dedd2.  call `K`(v1, v4) @signature `Ls3/z;.K:(I)V` @kind virtual;
  #L4dedd8.  call temp:= `d`(v21) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L4dedde.  v5:= temp @kind object;
  #L4dede0.  v6:= v18 @kind object;
  #L4dede4.  call temp:= `j`(v6, v2, v5, v4) @signature `Lx2/k0;.j:(Lx2/k0$a;J[BI)Lx2/k0$a;` @kind static;
  #L4dedea.  v5:= temp @kind object;
  #L4dedec.  v6:= 1L;
  #L4dedf0.  v2:= v2 + v6 @kind long;
  #L4dedf2.  call temp:= `d`(v21) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L4dedf8.  v6:= temp @kind object;
  #L4dedfa.  v7:= 0I;
  #L4dedfc.  v6:= v6[v7] @kind byte;
  #L4dee00.  v8:= v6 ^& 128;
  #L4dee04.  if v8 == 0 then goto L4dee0c;
  #L4dee08.  v8:= 1I;
  #L4dee0a.  goto L4dee0e;
  #L4dee0c.  v8:= 0I;
  #L4dee0e.  v6:= v6 ^& 127;
  #L4dee12.  v9:= v19 @kind object;
  #L4dee16.  v9:= v9.`y1.g.p` @type ^`y1.c` @kind object;
  #L4dee1a.  v10:= v9.`y1.c.a` @type ^`byte`[] @kind object;
  #L4dee1e.  if v10 != 0 then goto L4dee30;
  #L4dee22.  v10:= 16I;
  #L4dee26.  v10:= new `byte`[v10];
  #L4dee2a.  v9.`y1.c.a` @type ^`byte`[] := v10 @kind object;
  #L4dee2e.  goto L4dee36;
  #L4dee30.  call `fill`(v10, v7) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L4dee36.  v10:= v9.`y1.c.a` @type ^`byte`[] @kind object;
  #L4dee3a.  call temp:= `j`(v5, v2, v10, v6) @signature `Lx2/k0;.j:(Lx2/k0$a;J[BI)Lx2/k0$a;` @kind static;
  #L4dee40.  v5:= temp @kind object;
  #L4dee42.  v10:= (`long`) v6 @kind i2l;
  #L4dee44.  v2:= v2 + v10 @kind long;
  #L4dee46.  if v8 == 0 then goto L4dee74;
  #L4dee4a.  v4:= 2I;
  #L4dee4c.  call `K`(v1, v4) @signature `Ls3/z;.K:(I)V` @kind virtual;
  #L4dee52.  call temp:= `d`(v21) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L4dee58.  v6:= temp @kind object;
  #L4dee5a.  call temp:= `j`(v5, v2, v6, v4) @signature `Lx2/k0;.j:(Lx2/k0$a;J[BI)Lx2/k0$a;` @kind static;
  #L4dee60.  v5:= temp @kind object;
  #L4dee62.  v10:= 2L;
  #L4dee66.  v2:= v2 + v10 @kind long;
  #L4dee68.  call temp:= `I`(v21) @signature `Ls3/z;.I:()I` @kind virtual;
  #L4dee6e.  v4:= temp;
  #L4dee70.  v10:= v4;
  #L4dee72.  goto L4dee76;
  #L4dee74.  v10:= 1I;
  #L4dee76.  v4:= v9.`y1.c.d` @type ^`int`[] @kind object;
  #L4dee7a.  if v4 == 0 then goto L4dee84;
  #L4dee7e.  v6:= length @variable v4;
  #L4dee80.  if v6 >= v10 then goto L4dee88;
  #L4dee84.  v4:= new `int`[v10];
  #L4dee88.  v11:= v4 @kind object;
  #L4dee8a.  v4:= v9.`y1.c.e` @type ^`int`[] @kind object;
  #L4dee8e.  if v4 == 0 then goto L4dee98;
  #L4dee92.  v6:= length @variable v4;
  #L4dee94.  if v6 >= v10 then goto L4dee9c;
  #L4dee98.  v4:= new `int`[v10];
  #L4dee9c.  v12:= v4 @kind object;
  #L4dee9e.  if v8 == 0 then goto L4deee8;
  #L4deea2.  v4:= v10 * 6;
  #L4deea6.  call `K`(v1, v4) @signature `Ls3/z;.K:(I)V` @kind virtual;
  #L4deeac.  call temp:= `d`(v21) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L4deeb2.  v6:= temp @kind object;
  #L4deeb4.  call temp:= `j`(v5, v2, v6, v4) @signature `Lx2/k0;.j:(Lx2/k0$a;J[BI)Lx2/k0$a;` @kind static;
  #L4deeba.  v5:= temp @kind object;
  #L4deebc.  v13:= (`long`) v4 @kind i2l;
  #L4deebe.  v2:= v2 + v13 @kind long;
  #L4deec0.  call `O`(v1, v7) @signature `Ls3/z;.O:(I)V` @kind virtual;
  #L4deec6.  if v7 >= v10 then goto L4def00;
  #L4deeca.  call temp:= `I`(v21) @signature `Ls3/z;.I:()I` @kind virtual;
  #L4deed0.  v4:= temp;
  #L4deed2.  v11[v7]:= v4;
  #L4deed6.  call temp:= `G`(v21) @signature `Ls3/z;.G:()I` @kind virtual;
  #L4deedc.  v4:= temp;
  #L4deede.  v12[v7]:= v4;
  #L4deee2.  v7:= v7 + 1;
  #L4deee6.  goto L4deec6;
  #L4deee8.  v11[v7]:= v7;
  #L4deeec.  v1:= v0.`x2.m0$b.a` @type ^`int`;
  #L4deef0.  v13:= v0.`x2.m0$b.b` @type ^`long` @kind wide;
  #L4deef4.  v13:= v2 - v13 @kind long;
  #L4deef8.  v4:= (`int`) v13 @kind l2i;
  #L4deefa.  v1:= v1 - v4 @kind int;
  #L4deefc.  v12[v7]:= v1;
  #L4def00.  v1:= v0.`x2.m0$b.c` @type ^`a2.d0$a` @kind object;
  #L4def04.  call temp:= `j`(v1) @signature `Ls3/l0;.j:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4def0a.  v1:= temp @kind object;
  #L4def0c.  v1:= (`a2.d0$a`) v1 @kind object;
  #L4def10.  v13:= v1.`a2.d0$a.b` @type ^`byte`[] @kind object;
  #L4def14.  v14:= v9.`y1.c.a` @type ^`byte`[] @kind object;
  #L4def18.  v15:= v1.`a2.d0$a.a` @type ^`int`;
  #L4def1c.  v4:= v1.`a2.d0$a.c` @type ^`int`;
  #L4def20.  v1:= v1.`a2.d0$a.d` @type ^`int`;
  #L4def24.  v16:= v4;
  #L4def28.  v17:= v1;
  #L4def2c.  call `c`(v9, v10, v11, v12, v13, v14, v15, v16, v17) @signature `Ly1/c;.c:(I[I[I[B[BIII)V` @kind virtual;
  #L4def32.  v6:= v0.`x2.m0$b.b` @type ^`long` @kind wide;
  #L4def36.  v2:= v2 - v6 @kind long;
  #L4def38.  v1:= (`int`) v2 @kind l2i;
  #L4def3a.  v2:= (`long`) v1 @kind i2l;
  #L4def3c.  v6:= v6 + v2 @kind long;
  #L4def3e.  v0.`x2.m0$b.b` @type ^`long` := v6 @kind wide;
  #L4def42.  v2:= v0.`x2.m0$b.a` @type ^`int`;
  #L4def46.  v2:= v2 - v1 @kind int;
  #L4def48.  v0.`x2.m0$b.a` @type ^`int` := v2;
  #L4def4c.  return v5 @kind object;
}
procedure `x2.k0$a` `l`(`x2.k0$a` v5 @kind object, `y1.g` v6 @kind object, `x2.m0$b` v7 @kind object, `s3.z` v8 @kind object) @signature `Lx2/k0;.l:(Lx2/k0$a;Ly1/g;Lx2/m0$b;Ls3/z;)Lx2/k0$a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4def60.  call temp:= `K`(v6) @signature `Ly1/g;.K:()Z` @kind virtual;
  #L4def66.  v0:= temp;
  #L4def68.  if v0 == 0 then goto L4def74;
  #L4def6c.  call temp:= `k`(v5, v6, v7, v8) @signature `Lx2/k0;.k:(Lx2/k0$a;Ly1/g;Lx2/m0$b;Ls3/z;)Lx2/k0$a;` @kind static;
  #L4def72.  v5:= temp @kind object;
  #L4def74.  call temp:= `r`(v6) @signature `Ly1/a;.r:()Z` @kind virtual;
  #L4def7a.  v0:= temp;
  #L4def7c.  if v0 == 0 then goto L4deff8;
  #L4def80.  v0:= 4I;
  #L4def82.  call `K`(v8, v0) @signature `Ls3/z;.K:(I)V` @kind virtual;
  #L4def88.  v1:= v7.`x2.m0$b.b` @type ^`long` @kind wide;
  #L4def8c.  call temp:= `d`(v8) @signature `Ls3/z;.d:()[B` @kind virtual;
  #L4def92.  v3:= temp @kind object;
  #L4def94.  call temp:= `j`(v5, v1, v3, v0) @signature `Lx2/k0;.j:(Lx2/k0$a;J[BI)Lx2/k0$a;` @kind static;
  #L4def9a.  v5:= temp @kind object;
  #L4def9c.  call temp:= `G`(v8) @signature `Ls3/z;.G:()I` @kind virtual;
  #L4defa2.  v8:= temp;
  #L4defa4.  v1:= v7.`x2.m0$b.b` @type ^`long` @kind wide;
  #L4defa8.  v3:= 4L;
  #L4defac.  v1:= v1 + v3 @kind long;
  #L4defae.  v7.`x2.m0$b.b` @type ^`long` := v1 @kind wide;
  #L4defb2.  v1:= v7.`x2.m0$b.a` @type ^`int`;
  #L4defb6.  v1:= v1 - v0 @kind int;
  #L4defb8.  v7.`x2.m0$b.a` @type ^`int` := v1;
  #L4defbc.  call `F`(v6, v8) @signature `Ly1/g;.F:(I)V` @kind virtual;
  #L4defc2.  v0:= v7.`x2.m0$b.b` @type ^`long` @kind wide;
  #L4defc6.  v2:= v6.`y1.g.q` @type ^`java.nio.ByteBuffer` @kind object;
  #L4defca.  call temp:= `i`(v5, v0, v2, v8) @signature `Lx2/k0;.i:(Lx2/k0$a;JLjava/nio/ByteBuffer;I)Lx2/k0$a;` @kind static;
  #L4defd0.  v5:= temp @kind object;
  #L4defd2.  v0:= v7.`x2.m0$b.b` @type ^`long` @kind wide;
  #L4defd6.  v2:= (`long`) v8 @kind i2l;
  #L4defd8.  v0:= v0 + v2 @kind long;
  #L4defda.  v7.`x2.m0$b.b` @type ^`long` := v0 @kind wide;
  #L4defde.  v0:= v7.`x2.m0$b.a` @type ^`int`;
  #L4defe2.  v0:= v0 - v8 @kind int;
  #L4defe4.  v7.`x2.m0$b.a` @type ^`int` := v0;
  #L4defe8.  call `P`(v6, v0) @signature `Ly1/g;.P:(I)V` @kind virtual;
  #L4defee.  v0:= v7.`x2.m0$b.b` @type ^`long` @kind wide;
  #L4deff2.  v6:= v6.`y1.g.t` @type ^`java.nio.ByteBuffer` @kind object;
  #L4deff6.  goto L4df00a;
  #L4deff8.  v8:= v7.`x2.m0$b.a` @type ^`int`;
  #L4deffc.  call `F`(v6, v8) @signature `Ly1/g;.F:(I)V` @kind virtual;
  #L4df002.  v0:= v7.`x2.m0$b.b` @type ^`long` @kind wide;
  #L4df006.  v6:= v6.`y1.g.q` @type ^`java.nio.ByteBuffer` @kind object;
  #L4df00a.  v7:= v7.`x2.m0$b.a` @type ^`int`;
  #L4df00e.  call temp:= `i`(v5, v0, v6, v7) @signature `Lx2/k0;.i:(Lx2/k0$a;JLjava/nio/ByteBuffer;I)Lx2/k0$a;` @kind static;
  #L4df014.  v5:= temp @kind object;
  #L4df016.  return v5 @kind object;
}
procedure `void` `b`(`x2.k0` v4 @kind this, `long` v5 ) @signature `Lx2/k0;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dea70.  v0:= -1L;
  #L4dea74.  v2:= lcmp(v5, v0);
  #L4dea78.  if v2 != 0 then goto L4dea7e;
  #L4dea7c.  return @kind void;
  #L4dea7e.  v0:= v4.`x2.k0.d` @type ^`x2.k0$a` @kind object;
  #L4dea82.  v1:= v0.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4dea86.  v3:= lcmp(v5, v1);
  #L4dea8a.  if v3 < 0 then goto L4deaae;
  #L4dea8e.  v1:= v4.`x2.k0.a` @type ^`r3.b` @kind object;
  #L4dea92.  v0:= v0.`x2.k0$a.c` @type ^`r3.a` @kind object;
  #L4dea96.  call `b`(v1, v0) @signature `Lr3/b;.b:(Lr3/a;)V` @kind interface;
  #L4dea9c.  v0:= v4.`x2.k0.d` @type ^`x2.k0$a` @kind object;
  #L4deaa0.  call temp:= `b`(v0) @signature `Lx2/k0$a;.b:()Lx2/k0$a;` @kind virtual;
  #L4deaa6.  v0:= temp @kind object;
  #L4deaa8.  v4.`x2.k0.d` @type ^`x2.k0$a` := v0 @kind object;
  #L4deaac.  goto L4dea7e;
  #L4deaae.  v5:= v4.`x2.k0.e` @type ^`x2.k0$a` @kind object;
  #L4deab2.  v5:= v5.`x2.k0$a.a` @type ^`long` @kind wide;
  #L4deab6.  v1:= v0.`x2.k0$a.a` @type ^`long` @kind wide;
  #L4deaba.  v3:= lcmp(v5, v1);
  #L4deabe.  if v3 >= 0 then goto L4deac6;
  #L4deac2.  v4.`x2.k0.e` @type ^`x2.k0$a` := v0 @kind object;
  #L4deac6.  return @kind void;
}
procedure `void` `c`(`x2.k0` v6 @kind this, `long` v7 ) @signature `Lx2/k0;.c:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4dead8.  v0:= v6.`x2.k0.g` @type ^`long` @kind wide;
  #L4deadc.  v2:= lcmp(v7, v0);
  #L4deae0.  if v2 > 0 then goto L4deae8;
  #L4deae4.  v0:= 1I;
  #L4deae6.  goto L4deaea;
  #L4deae8.  v0:= 0I;
  #L4deaea.  call `a`(v0) @signature `Ls3/a;.a:(Z)V` @kind static;
  #L4deaf0.  v6.`x2.k0.g` @type ^`long` := v7 @kind wide;
  #L4deaf4.  v0:= 0L;
  #L4deaf8.  v2:= lcmp(v7, v0);
  #L4deafc.  if v2 == 0 then goto L4deb78;
  #L4deb00.  v0:= v6.`x2.k0.d` @type ^`x2.k0$a` @kind object;
  #L4deb04.  v1:= v0.`x2.k0$a.a` @type ^`long` @kind wide;
  #L4deb08.  v3:= lcmp(v7, v1);
  #L4deb0c.  if v3 != 0 then goto L4deb12;
  #L4deb10.  goto L4deb78;
  #L4deb12.  v7:= v6.`x2.k0.g` @type ^`long` @kind wide;
  #L4deb16.  v1:= v0.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4deb1a.  v3:= lcmp(v7, v1);
  #L4deb1e.  if v3 <= 0 then goto L4deb28;
  #L4deb22.  v0:= v0.`x2.k0$a.d` @type ^`x2.k0$a` @kind object;
  #L4deb26.  goto L4deb12;
  #L4deb28.  v7:= v0.`x2.k0$a.d` @type ^`x2.k0$a` @kind object;
  #L4deb2c.  call temp:= `e`(v7) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4deb32.  v7:= temp @kind object;
  #L4deb34.  v7:= (`x2.k0$a`) v7 @kind object;
  #L4deb38.  call `a`(v6, v7) @signature `Lx2/k0;.a:(Lx2/k0$a;)V` @kind direct;
  #L4deb3e.  v8:= new `x2.k0$a`;
  #L4deb42.  v1:= v0.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4deb46.  v3:= v6.`x2.k0.b` @type ^`int`;
  #L4deb4a.  call `<init>`(v8, v1, v3) @signature `Lx2/k0$a;.<init>:(JI)V` @kind direct;
  #L4deb50.  v0.`x2.k0$a.d` @type ^`x2.k0$a` := v8 @kind object;
  #L4deb54.  v1:= v6.`x2.k0.g` @type ^`long` @kind wide;
  #L4deb58.  v3:= v0.`x2.k0$a.b` @type ^`long` @kind wide;
  #L4deb5c.  v5:= lcmp(v1, v3);
  #L4deb60.  if v5 != 0 then goto L4deb66;
  #L4deb64.  v0:= v8 @kind object;
  #L4deb66.  v6.`x2.k0.f` @type ^`x2.k0$a` := v0 @kind object;
  #L4deb6a.  v0:= v6.`x2.k0.e` @type ^`x2.k0$a` @kind object;
  #L4deb6e.  if v0 != v7 then goto L4deba0;
  #L4deb72.  v6.`x2.k0.e` @type ^`x2.k0$a` := v8 @kind object;
  #L4deb76.  goto L4deba0;
  #L4deb78.  v7:= v6.`x2.k0.d` @type ^`x2.k0$a` @kind object;
  #L4deb7c.  call `a`(v6, v7) @signature `Lx2/k0;.a:(Lx2/k0$a;)V` @kind direct;
  #L4deb82.  v7:= new `x2.k0$a`;
  #L4deb86.  v0:= v6.`x2.k0.g` @type ^`long` @kind wide;
  #L4deb8a.  v8:= v6.`x2.k0.b` @type ^`int`;
  #L4deb8e.  call `<init>`(v7, v0, v8) @signature `Lx2/k0$a;.<init>:(JI)V` @kind direct;
  #L4deb94.  v6.`x2.k0.d` @type ^`x2.k0$a` := v7 @kind object;
  #L4deb98.  v6.`x2.k0.e` @type ^`x2.k0$a` := v7 @kind object;
  #L4deb9c.  v6.`x2.k0.f` @type ^`x2.k0$a` := v7 @kind object;
  #L4deba0.  return @kind void;
}
procedure `long` `e`(`x2.k0` v2 @kind this) @signature `Lx2/k0;.e:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4de9d8.  v0:= v2.`x2.k0.g` @type ^`long` @kind wide;
  #L4de9dc.  return v0 @kind wide;
}
procedure `void` `f`(`x2.k0` v2 @kind this, `y1.g` v3 @kind object, `x2.m0$b` v4 @kind object) @signature `Lx2/k0;.f:(Ly1/g;Lx2/m0$b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4debb4.  v0:= v2.`x2.k0.e` @type ^`x2.k0$a` @kind object;
  #L4debb8.  v1:= v2.`x2.k0.c` @type ^`s3.z` @kind object;
  #L4debbc.  call temp:= `l`(v0, v3, v4, v1) @signature `Lx2/k0;.l:(Lx2/k0$a;Ly1/g;Lx2/m0$b;Ls3/z;)Lx2/k0$a;` @kind static;
  #L4debc2.  return @kind void;
}
procedure `void` `m`(`x2.k0` v2 @kind this, `y1.g` v3 @kind object, `x2.m0$b` v4 @kind object) @signature `Lx2/k0;.m:(Ly1/g;Lx2/m0$b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dec0c.  v0:= v2.`x2.k0.e` @type ^`x2.k0$a` @kind object;
  #L4dec10.  v1:= v2.`x2.k0.c` @type ^`s3.z` @kind object;
  #L4dec14.  call temp:= `l`(v0, v3, v4, v1) @signature `Lx2/k0;.l:(Lx2/k0$a;Ly1/g;Lx2/m0$b;Ls3/z;)Lx2/k0$a;` @kind static;
  #L4dec1a.  v3:= temp @kind object;
  #L4dec1c.  v2.`x2.k0.e` @type ^`x2.k0$a` := v3 @kind object;
  #L4dec20.  return @kind void;
}
procedure `void` `n`(`x2.k0` v4 @kind this) @signature `Lx2/k0;.n:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dec34.  v0:= v4.`x2.k0.d` @type ^`x2.k0$a` @kind object;
  #L4dec38.  call `a`(v4, v0) @signature `Lx2/k0;.a:(Lx2/k0$a;)V` @kind direct;
  #L4dec3e.  v0:= v4.`x2.k0.d` @type ^`x2.k0$a` @kind object;
  #L4dec42.  v1:= v4.`x2.k0.b` @type ^`int`;
  #L4dec46.  v2:= 0L;
  #L4dec4a.  call `d`(v0, v2, v1) @signature `Lx2/k0$a;.d:(JI)V` @kind virtual;
  #L4dec50.  v0:= v4.`x2.k0.d` @type ^`x2.k0$a` @kind object;
  #L4dec54.  v4.`x2.k0.e` @type ^`x2.k0$a` := v0 @kind object;
  #L4dec58.  v4.`x2.k0.f` @type ^`x2.k0$a` := v0 @kind object;
  #L4dec5c.  v4.`x2.k0.g` @type ^`long` := v2 @kind wide;
  #L4dec60.  v0:= v4.`x2.k0.a` @type ^`r3.b` @kind object;
  #L4dec64.  call `a`(v0) @signature `Lr3/b;.a:()V` @kind interface;
  #L4dec6a.  return @kind void;
}
procedure `void` `o`(`x2.k0` v1 @kind this) @signature `Lx2/k0;.o:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dec7c.  v0:= v1.`x2.k0.d` @type ^`x2.k0$a` @kind object;
  #L4dec80.  v1.`x2.k0.e` @type ^`x2.k0$a` := v0 @kind object;
  #L4dec84.  return @kind void;
}
procedure `int` `p`(`x2.k0` v4 @kind this, `r3.i` v5 @kind object, `int` v6 , `boolean` v7 ) @signature `Lx2/k0;.p:(Lr3/i;IZ)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4de980.  call temp:= `h`(v4, v6) @signature `Lx2/k0;.h:(I)I` @kind direct;
  #L4de986.  v6:= temp;
  #L4de988.  v0:= v4.`x2.k0.f` @type ^`x2.k0$a` @kind object;
  #L4de98c.  v1:= v0.`x2.k0$a.c` @type ^`r3.a` @kind object;
  #L4de990.  v1:= v1.`r3.a.a` @type ^`byte`[] @kind object;
  #L4de994.  v2:= v4.`x2.k0.g` @type ^`long` @kind wide;
  #L4de998.  call temp:= `e`(v0, v2) @signature `Lx2/k0$a;.e:(J)I` @kind virtual;
  #L4de99e.  v0:= temp;
  #L4de9a0.  call temp:= `b`(v5, v1, v0, v6) @signature `Lr3/i;.b:([BII)I` @kind interface;
  #L4de9a6.  v5:= temp;
  #L4de9a8.  v6:= -1I;
  #L4de9aa.  if v5 != v6 then goto L4de9c0;
  #L4de9ae.  if v7 == 0 then goto L4de9b4;
  #L4de9b2.  return v6;
  #L4de9b4.  v5:= new `java.io.EOFException`;
  #L4de9b8.  call `<init>`(v5) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4de9be.  throw v5;
  #L4de9c0.  call `g`(v4, v5) @signature `Lx2/k0;.g:(I)V` @kind direct;
  #L4de9c6.  return v5;
}
procedure `void` `q`(`x2.k0` v5 @kind this, `s3.z` v6 @kind object, `int` v7 ) @signature `Lx2/k0;.q:(Ls3/z;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4dec98.  if v7 <= 0 then goto L4deccc;
  #L4dec9c.  call temp:= `h`(v5, v7) @signature `Lx2/k0;.h:(I)I` @kind direct;
  #L4deca2.  v0:= temp;
  #L4deca4.  v1:= v5.`x2.k0.f` @type ^`x2.k0$a` @kind object;
  #L4deca8.  v2:= v1.`x2.k0$a.c` @type ^`r3.a` @kind object;
  #L4decac.  v2:= v2.`r3.a.a` @type ^`byte`[] @kind object;
  #L4decb0.  v3:= v5.`x2.k0.g` @type ^`long` @kind wide;
  #L4decb4.  call temp:= `e`(v1, v3) @signature `Lx2/k0$a;.e:(J)I` @kind virtual;
  #L4decba.  v1:= temp;
  #L4decbc.  call `j`(v6, v2, v1, v0) @signature `Ls3/z;.j:([BII)V` @kind virtual;
  #L4decc2.  v7:= v7 - v0 @kind int;
  #L4decc4.  call `g`(v5, v0) @signature `Lx2/k0;.g:(I)V` @kind direct;
  #L4decca.  goto L4dec98;
  #L4deccc.  return @kind void;
}
