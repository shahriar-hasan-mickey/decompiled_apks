record `x2.d` @kind class @AccessFlag PUBLIC_FINAL extends `x2.r` @kind interface, `x2.r$a` @kind interface {
  `x2.r` `x2.d.o` @AccessFlag PUBLIC_FINAL;
  `x2.r$a` `x2.d.p` @AccessFlag PRIVATE;
  `x2.d$a`[] `x2.d.q` @AccessFlag PRIVATE;
  `long` `x2.d.r` @AccessFlag PRIVATE;
  `long` `x2.d.s` @AccessFlag ;
  `long` `x2.d.t` @AccessFlag ;
}
procedure `void` `<init>`(`x2.d` v0 @kind this, `x2.r` v1 @kind object, `boolean` v2 , `long` v3 , `long` v5 ) @signature `Lx2/d;.<init>:(Lx2/r;ZJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4d9eec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d9ef2.  v0.`x2.d.o` @type ^`x2.r` := v1 @kind object;
  #L4d9ef6.  v1:= 0I;
  #L4d9ef8.  v1:= new `x2.d$a`[v1];
  #L4d9efc.  v0.`x2.d.q` @type ^`x2.d$a`[] := v1 @kind object;
  #L4d9f00.  if v2 == 0 then goto L4d9f08;
  #L4d9f04.  v1:= v3 @kind wide;
  #L4d9f06.  goto L4d9f12;
  #L4d9f08.  v1:= -4.9E-324D;
  #L4d9f12.  v0.`x2.d.r` @type ^`long` := v1 @kind wide;
  #L4d9f16.  v0.`x2.d.s` @type ^`long` := v3 @kind wide;
  #L4d9f1a.  v0.`x2.d.t` @type ^`long` := v5 @kind wide;
  #L4d9f1e.  return @kind void;
}
procedure `v1.w2` `e`(`x2.d` v9 @kind this, `long` v10 , `v1.w2` v12 @kind object) @signature `Lx2/d;.e:(JLv1/w2;)Lv1/w2;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d9e6c.  v0:= v12.`v1.w2.a` @type ^`long` @kind wide;
  #L4d9e70.  v2:= v9.`x2.d.s` @type ^`long` @kind wide;
  #L4d9e74.  v4:= v10 - v2 @kind long;
  #L4d9e78.  v2:= 0L;
  #L4d9e7c.  call temp:= `r`(v0, v2, v4) @signature `Ls3/l0;.r:(JJJ)J` @kind static;
  #L4d9e82.  v0:= temp @kind wide;
  #L4d9e84.  v2:= v12.`v1.w2.b` @type ^`long` @kind wide;
  #L4d9e88.  v4:= v9.`x2.d.t` @type ^`long` @kind wide;
  #L4d9e8c.  v6:= -9223372036854775808L;
  #L4d9e90.  v8:= lcmp(v4, v6);
  #L4d9e94.  if v8 != 0 then goto L4d9ea6;
  #L4d9e98.  v10:= 9223372036854775807L;
  #L4d9ea2.  v6:= v10 @kind wide;
  #L4d9ea4.  goto L4d9eaa;
  #L4d9ea6.  v4:= v4 - v10 @kind long;
  #L4d9ea8.  v6:= v4 @kind wide;
  #L4d9eaa.  v4:= 0L;
  #L4d9eae.  call temp:= `r`(v2, v4, v6) @signature `Ls3/l0;.r:(JJJ)J` @kind static;
  #L4d9eb4.  v10:= temp @kind wide;
  #L4d9eb6.  v2:= v12.`v1.w2.a` @type ^`long` @kind wide;
  #L4d9eba.  v4:= lcmp(v0, v2);
  #L4d9ebe.  if v4 != 0 then goto L4d9ed0;
  #L4d9ec2.  v2:= v12.`v1.w2.b` @type ^`long` @kind wide;
  #L4d9ec6.  v4:= lcmp(v10, v2);
  #L4d9eca.  if v4 != 0 then goto L4d9ed0;
  #L4d9ece.  return v12 @kind object;
  #L4d9ed0.  v12:= new `v1.w2`;
  #L4d9ed4.  call `<init>`(v12, v0, v10) @signature `Lv1/w2;.<init>:(JJ)V` @kind direct;
  #L4d9eda.  return v12 @kind object;
}
procedure `boolean` `u`(`long` v4 , `q3.s`[] v6 @kind object) @signature `Lx2/d;.u:(J[Lq3/s;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d9afc.  v0:= 0I;
  #L4d9afe.  v1:= 0L;
  #L4d9b02.  v3:= lcmp(v4, v1);
  #L4d9b06.  if v3 == 0 then goto L4d9b40;
  #L4d9b0a.  v4:= length @variable v6;
  #L4d9b0c.  v5:= 0I;
  #L4d9b0e.  if v5 >= v4 then goto L4d9b40;
  #L4d9b12.  v1:= v6[v5] @kind object;
  #L4d9b16.  if v1 == 0 then goto L4d9b3a;
  #L4d9b1a.  call temp:= `n`(v1) @signature `Lq3/s;.n:()Lv1/j1;` @kind interface;
  #L4d9b20.  v1:= temp @kind object;
  #L4d9b22.  v2:= v1.`v1.j1.z` @type ^`java.lang.String` @kind object;
  #L4d9b26.  v1:= v1.`v1.j1.w` @type ^`java.lang.String` @kind object;
  #L4d9b2a.  call temp:= `a`(v2, v1) @signature `Ls3/u;.a:(Ljava/lang/String;Ljava/lang/String;)Z` @kind static;
  #L4d9b30.  v1:= temp;
  #L4d9b32.  if v1 != 0 then goto L4d9b3a;
  #L4d9b36.  v4:= 1I;
  #L4d9b38.  return v4;
  #L4d9b3a.  v5:= v5 + 1;
  #L4d9b3e.  goto L4d9b0e;
  #L4d9b40.  return v0;
}
procedure `boolean` `a`(`x2.d` v1 @kind this) @signature `Lx2/d;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9aac.  v0:= v1.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9ab0.  call temp:= `a`(v0) @signature `Lx2/r;.a:()Z` @kind interface;
  #L4d9ab6.  v0:= temp;
  #L4d9ab8.  return v0;
}
procedure `long` `c`(`x2.d` v3 @kind this, `long` v4 , `v1.w2` v6 @kind object) @signature `Lx2/d;.c:(JLv1/w2;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d9b54.  v0:= v3.`x2.d.s` @type ^`long` @kind wide;
  #L4d9b58.  v2:= lcmp(v4, v0);
  #L4d9b5c.  if v2 != 0 then goto L4d9b62;
  #L4d9b60.  return v0 @kind wide;
  #L4d9b62.  call temp:= `e`(v3, v4, v6) @signature `Lx2/d;.e:(JLv1/w2;)Lv1/w2;` @kind direct;
  #L4d9b68.  v6:= temp @kind object;
  #L4d9b6a.  v0:= v3.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9b6e.  call temp:= `c`(v0, v4, v6) @signature `Lx2/r;.c:(JLv1/w2;)J` @kind interface;
  #L4d9b74.  v4:= temp @kind wide;
  #L4d9b76.  return v4 @kind wide;
}
procedure `long` `d`(`x2.d` v7 @kind this) @signature `Lx2/d;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4d9bcc.  v0:= v7.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9bd0.  call temp:= `d`(v0) @signature `Lx2/r;.d:()J` @kind interface;
  #L4d9bd6.  v0:= temp @kind wide;
  #L4d9bd8.  v2:= -9223372036854775808L;
  #L4d9bdc.  v4:= lcmp(v0, v2);
  #L4d9be0.  if v4 == 0 then goto L4d9bfc;
  #L4d9be4.  v4:= v7.`x2.d.t` @type ^`long` @kind wide;
  #L4d9be8.  v6:= lcmp(v4, v2);
  #L4d9bec.  if v6 == 0 then goto L4d9bfa;
  #L4d9bf0.  v6:= lcmp(v0, v4);
  #L4d9bf4.  if v6 < 0 then goto L4d9bfa;
  #L4d9bf8.  goto L4d9bfc;
  #L4d9bfa.  return v0 @kind wide;
  #L4d9bfc.  return v2 @kind wide;
}
procedure `long` `f`(`x2.d` v7 @kind this) @signature `Lx2/d;.f:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4d9b88.  v0:= v7.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9b8c.  call temp:= `f`(v0) @signature `Lx2/r;.f:()J` @kind interface;
  #L4d9b92.  v0:= temp @kind wide;
  #L4d9b94.  v2:= -9223372036854775808L;
  #L4d9b98.  v4:= lcmp(v0, v2);
  #L4d9b9c.  if v4 == 0 then goto L4d9bb8;
  #L4d9ba0.  v4:= v7.`x2.d.t` @type ^`long` @kind wide;
  #L4d9ba4.  v6:= lcmp(v4, v2);
  #L4d9ba8.  if v6 == 0 then goto L4d9bb6;
  #L4d9bac.  v6:= lcmp(v0, v4);
  #L4d9bb0.  if v6 < 0 then goto L4d9bb6;
  #L4d9bb4.  goto L4d9bb8;
  #L4d9bb6.  return v0 @kind wide;
  #L4d9bb8.  return v2 @kind wide;
}
procedure `boolean` `g`(`x2.d` v1 @kind this, `long` v2 ) @signature `Lx2/d;.g:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9a8c.  v0:= v1.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9a90.  call temp:= `g`(v0, v2) @signature `Lx2/r;.g:(J)Z` @kind interface;
  #L4d9a96.  v2:= temp;
  #L4d9a98.  return v2;
}
procedure `void` `h`(`x2.d` v0 @kind this, `x2.r` v1 @kind object) @signature `Lx2/d;.h:(Lx2/r;)V` @AccessFlag PUBLIC {
    temp;

  #L4d9fac.  v1:= v0.`x2.d.p` @type ^`x2.r$a` @kind object;
  #L4d9fb0.  call temp:= `e`(v1) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4d9fb6.  v1:= temp @kind object;
  #L4d9fb8.  v1:= (`x2.r$a`) v1 @kind object;
  #L4d9fbc.  call `h`(v1, v0) @signature `Lx2/r$a;.h:(Lx2/r;)V` @kind interface;
  #L4d9fc2.  return @kind void;
}
procedure `void` `i`(`x2.d` v1 @kind this, `long` v2 ) @signature `Lx2/d;.i:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9ff4.  v0:= v1.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9ff8.  call `i`(v0, v2) @signature `Lx2/r;.i:(J)V` @kind interface;
  #L4d9ffe.  return @kind void;
}
procedure `long` `k`(`x2.d` v12 @kind this, `q3.s`[] v13 @kind object, `boolean`[] v14 @kind object, `x2.n0`[] v15 @kind object, `boolean`[] v16 @kind object, `long` v17 ) @signature `Lx2/d;.k:([Lq3/s;[Z[Lx2/n0;[ZJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4d9d2c.  v0:= v12 @kind object;
  #L4d9d2e.  v1:= v15 @kind object;
  #L4d9d30.  v2:= length @variable v1;
  #L4d9d32.  v2:= new `x2.d$a`[v2];
  #L4d9d36.  v0.`x2.d.q` @type ^`x2.d$a`[] := v2 @kind object;
  #L4d9d3a.  v2:= length @variable v1;
  #L4d9d3c.  v9:= new `x2.n0`[v2];
  #L4d9d40.  v10:= 0I;
  #L4d9d42.  v2:= 0I;
  #L4d9d44.  v3:= length @variable v1;
  #L4d9d46.  v11:= 0I;
  #L4d9d48.  if v2 >= v3 then goto L4d9d76;
  #L4d9d4c.  v3:= v0.`x2.d.q` @type ^`x2.d$a`[] @kind object;
  #L4d9d50.  v4:= v1[v2] @kind object;
  #L4d9d54.  v4:= (`x2.d$a`) v4 @kind object;
  #L4d9d58.  v3[v2]:= v4 @kind object;
  #L4d9d5c.  v4:= v3[v2] @kind object;
  #L4d9d60.  if v4 == 0 then goto L4d9d6c;
  #L4d9d64.  v3:= v3[v2] @kind object;
  #L4d9d68.  v11:= v3.`x2.d$a.o` @type ^`x2.n0` @kind object;
  #L4d9d6c.  v9[v2]:= v11 @kind object;
  #L4d9d70.  v2:= v2 + 1;
  #L4d9d74.  goto L4d9d44;
  #L4d9d76.  v2:= v0.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9d7a.  v3:= v13 @kind object;
  #L4d9d7c.  v4:= v14 @kind object;
  #L4d9d7e.  v5:= v9 @kind object;
  #L4d9d80.  v6:= v16 @kind object;
  #L4d9d84.  v7:= v17 @kind wide;
  #L4d9d88.  call temp:= `k`(v2, v3, v4, v5, v6, v7) @signature `Lx2/r;.k:([Lq3/s;[Z[Lx2/n0;[ZJ)J` @kind interface;
  #L4d9d8e.  v2:= temp @kind wide;
  #L4d9d90.  call temp:= `n`(v12) @signature `Lx2/d;.n:()Z` @kind virtual;
  #L4d9d96.  v4:= temp;
  #L4d9d98.  if v4 == 0 then goto L4d9dba;
  #L4d9d9c.  v4:= v0.`x2.d.s` @type ^`long` @kind wide;
  #L4d9da0.  v6:= lcmp(v17, v4);
  #L4d9da4.  if v6 != 0 then goto L4d9dba;
  #L4d9da8.  v6:= v13 @kind object;
  #L4d9daa.  call temp:= `u`(v4, v13) @signature `Lx2/d;.u:(J[Lq3/s;)Z` @kind static;
  #L4d9db0.  v4:= temp;
  #L4d9db2.  if v4 == 0 then goto L4d9dba;
  #L4d9db6.  v4:= v2 @kind wide;
  #L4d9db8.  goto L4d9dc4;
  #L4d9dba.  v4:= -4.9E-324D;
  #L4d9dc4.  v0.`x2.d.r` @type ^`long` := v4 @kind wide;
  #L4d9dc8.  v4:= lcmp(v2, v17);
  #L4d9dcc.  if v4 == 0 then goto L4d9dfa;
  #L4d9dd0.  v4:= v0.`x2.d.s` @type ^`long` @kind wide;
  #L4d9dd4.  v6:= lcmp(v2, v4);
  #L4d9dd8.  if v6 < 0 then goto L4d9df6;
  #L4d9ddc.  v4:= v0.`x2.d.t` @type ^`long` @kind wide;
  #L4d9de0.  v6:= -9223372036854775808L;
  #L4d9de4.  v8:= lcmp(v4, v6);
  #L4d9de8.  if v8 == 0 then goto L4d9dfa;
  #L4d9dec.  v6:= lcmp(v2, v4);
  #L4d9df0.  if v6 > 0 then goto L4d9df6;
  #L4d9df4.  goto L4d9dfa;
  #L4d9df6.  v4:= 0I;
  #L4d9df8.  goto L4d9dfc;
  #L4d9dfa.  v4:= 1I;
  #L4d9dfc.  call `f`(v4) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L4d9e02.  v4:= length @variable v1;
  #L4d9e04.  if v10 >= v4 then goto L4d9e5a;
  #L4d9e08.  v4:= v9[v10] @kind object;
  #L4d9e0c.  if v4 != 0 then goto L4d9e1a;
  #L4d9e10.  v4:= v0.`x2.d.q` @type ^`x2.d$a`[] @kind object;
  #L4d9e14.  v4[v10]:= v11 @kind object;
  #L4d9e18.  goto L4d9e48;
  #L4d9e1a.  v4:= v0.`x2.d.q` @type ^`x2.d$a`[] @kind object;
  #L4d9e1e.  v5:= v4[v10] @kind object;
  #L4d9e22.  if v5 == 0 then goto L4d9e36;
  #L4d9e26.  v5:= v4[v10] @kind object;
  #L4d9e2a.  v5:= v5.`x2.d$a.o` @type ^`x2.n0` @kind object;
  #L4d9e2e.  v6:= v9[v10] @kind object;
  #L4d9e32.  if v5 == v6 then goto L4d9e48;
  #L4d9e36.  v5:= new `x2.d$a`;
  #L4d9e3a.  v6:= v9[v10] @kind object;
  #L4d9e3e.  call `<init>`(v5, v12, v6) @signature `Lx2/d$a;.<init>:(Lx2/d;Lx2/n0;)V` @kind direct;
  #L4d9e44.  v4[v10]:= v5 @kind object;
  #L4d9e48.  v4:= v0.`x2.d.q` @type ^`x2.d$a`[] @kind object;
  #L4d9e4c.  v4:= v4[v10] @kind object;
  #L4d9e50.  v1[v10]:= v4 @kind object;
  #L4d9e54.  v10:= v10 + 1;
  #L4d9e58.  goto L4d9e02;
  #L4d9e5a.  return v2 @kind wide;
}
procedure `long` `l`(`x2.d` v9 @kind this) @signature `Lx2/d;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d9c10.  call temp:= `n`(v9) @signature `Lx2/d;.n:()Z` @kind virtual;
  #L4d9c16.  v0:= temp;
  #L4d9c18.  v1:= -4.9E-324D;
  #L4d9c22.  if v0 == 0 then goto L4d9c42;
  #L4d9c26.  v3:= v9.`x2.d.r` @type ^`long` @kind wide;
  #L4d9c2a.  v9.`x2.d.r` @type ^`long` := v1 @kind wide;
  #L4d9c2e.  call temp:= `l`(v9) @signature `Lx2/d;.l:()J` @kind virtual;
  #L4d9c34.  v5:= temp @kind wide;
  #L4d9c36.  v0:= lcmp(v5, v1);
  #L4d9c3a.  if v0 == 0 then goto L4d9c40;
  #L4d9c3e.  v3:= v5 @kind wide;
  #L4d9c40.  return v3 @kind wide;
  #L4d9c42.  v0:= v9.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9c46.  call temp:= `l`(v0) @signature `Lx2/r;.l:()J` @kind interface;
  #L4d9c4c.  v3:= temp @kind wide;
  #L4d9c4e.  v0:= lcmp(v3, v1);
  #L4d9c52.  if v0 != 0 then goto L4d9c58;
  #L4d9c56.  return v1 @kind wide;
  #L4d9c58.  v0:= v9.`x2.d.s` @type ^`long` @kind wide;
  #L4d9c5c.  v2:= 1I;
  #L4d9c5e.  v5:= 0I;
  #L4d9c60.  v6:= lcmp(v3, v0);
  #L4d9c64.  if v6 < 0 then goto L4d9c6c;
  #L4d9c68.  v0:= 1I;
  #L4d9c6a.  goto L4d9c6e;
  #L4d9c6c.  v0:= 0I;
  #L4d9c6e.  call `f`(v0) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L4d9c74.  v0:= v9.`x2.d.t` @type ^`long` @kind wide;
  #L4d9c78.  v6:= -9223372036854775808L;
  #L4d9c7c.  v8:= lcmp(v0, v6);
  #L4d9c80.  if v8 == 0 then goto L4d9c90;
  #L4d9c84.  v6:= lcmp(v3, v0);
  #L4d9c88.  if v6 > 0 then goto L4d9c8e;
  #L4d9c8c.  goto L4d9c90;
  #L4d9c8e.  v2:= 0I;
  #L4d9c90.  call `f`(v2) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L4d9c96.  return v3 @kind wide;
}
procedure `void` `m`(`x2.d` v0 @kind this, `x2.o0` v1 @kind object) @signature `Lx2/d;.m:(Lx2/o0;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4d9f90.  v1:= (`x2.r`) v1 @kind object;
  #L4d9f94.  call `t`(v0, v1) @signature `Lx2/d;.t:(Lx2/r;)V` @kind virtual;
  #L4d9f9a.  return @kind void;
}
procedure `boolean` `n`(`x2.d` v5 @kind this) @signature `Lx2/d;.n:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d9acc.  v0:= v5.`x2.d.r` @type ^`long` @kind wide;
  #L4d9ad0.  v2:= -4.9E-324D;
  #L4d9ada.  v4:= lcmp(v0, v2);
  #L4d9ade.  if v4 == 0 then goto L4d9ae6;
  #L4d9ae2.  v0:= 1I;
  #L4d9ae4.  goto L4d9ae8;
  #L4d9ae6.  v0:= 0I;
  #L4d9ae8.  return v0;
}
procedure `x2.v0` `o`(`x2.d` v1 @kind this) @signature `Lx2/d;.o:()Lx2/v0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da02c.  v0:= v1.`x2.d.o` @type ^`x2.r` @kind object;
  #L4da030.  call temp:= `o`(v0) @signature `Lx2/r;.o:()Lx2/v0;` @kind interface;
  #L4da036.  v0:= temp @kind object;
  #L4da038.  return v0 @kind object;
}
procedure `void` `p`(`x2.d` v1 @kind this) @signature `Lx2/d;.p:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9f4c.  v0:= v1.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9f50.  call `p`(v0) @signature `Lx2/r;.p:()V` @kind interface;
  #L4d9f56.  return @kind void;
}
procedure `void` `q`(`x2.d` v0 @kind this, `x2.r$a` v1 @kind object, `long` v2 ) @signature `Lx2/d;.q:(Lx2/r$a;J)V` @AccessFlag PUBLIC {
    temp;

  #L4d9fd4.  v0.`x2.d.p` @type ^`x2.r$a` := v1 @kind object;
  #L4d9fd8.  v1:= v0.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9fdc.  call `q`(v1, v0, v2) @signature `Lx2/r;.q:(Lx2/r$a;J)V` @kind interface;
  #L4d9fe2.  return @kind void;
}
procedure `void` `r`(`x2.d` v1 @kind this, `long` v2 , `boolean` v4 ) @signature `Lx2/d;.r:(JZ)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9f30.  v0:= v1.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9f34.  call `r`(v0, v2, v4) @signature `Lx2/r;.r:(JZ)V` @kind interface;
  #L4d9f3a.  return @kind void;
}
procedure `long` `s`(`x2.d` v6 @kind this, `long` v7 ) @signature `Lx2/d;.s:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d9ca8.  v0:= -4.9E-324D;
  #L4d9cb2.  v6.`x2.d.r` @type ^`long` := v0 @kind wide;
  #L4d9cb6.  v0:= v6.`x2.d.q` @type ^`x2.d$a`[] @kind object;
  #L4d9cba.  v1:= length @variable v0;
  #L4d9cbc.  v2:= 0I;
  #L4d9cbe.  v3:= 0I;
  #L4d9cc0.  if v3 >= v1 then goto L4d9cd8;
  #L4d9cc4.  v4:= v0[v3] @kind object;
  #L4d9cc8.  if v4 == 0 then goto L4d9cd2;
  #L4d9ccc.  call `a`(v4) @signature `Lx2/d$a;.a:()V` @kind virtual;
  #L4d9cd2.  v3:= v3 + 1;
  #L4d9cd6.  goto L4d9cc0;
  #L4d9cd8.  v0:= v6.`x2.d.o` @type ^`x2.r` @kind object;
  #L4d9cdc.  call temp:= `s`(v0, v7) @signature `Lx2/r;.s:(J)J` @kind interface;
  #L4d9ce2.  v0:= temp @kind wide;
  #L4d9ce4.  v3:= lcmp(v0, v7);
  #L4d9ce8.  if v3 == 0 then goto L4d9d10;
  #L4d9cec.  v7:= v6.`x2.d.s` @type ^`long` @kind wide;
  #L4d9cf0.  v3:= lcmp(v0, v7);
  #L4d9cf4.  if v3 < 0 then goto L4d9d12;
  #L4d9cf8.  v7:= v6.`x2.d.t` @type ^`long` @kind wide;
  #L4d9cfc.  v3:= -9223372036854775808L;
  #L4d9d00.  v5:= lcmp(v7, v3);
  #L4d9d04.  if v5 == 0 then goto L4d9d10;
  #L4d9d08.  v3:= lcmp(v0, v7);
  #L4d9d0c.  if v3 > 0 then goto L4d9d12;
  #L4d9d10.  v2:= 1I;
  #L4d9d12.  call `f`(v2) @signature `Ls3/a;.f:(Z)V` @kind static;
  #L4d9d18.  return v0 @kind wide;
}
procedure `void` `t`(`x2.d` v0 @kind this, `x2.r` v1 @kind object) @signature `Lx2/d;.t:(Lx2/r;)V` @AccessFlag PUBLIC {
    temp;

  #L4d9f68.  v1:= v0.`x2.d.p` @type ^`x2.r$a` @kind object;
  #L4d9f6c.  call temp:= `e`(v1) @signature `Ls3/a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4d9f72.  v1:= temp @kind object;
  #L4d9f74.  v1:= (`x2.r$a`) v1 @kind object;
  #L4d9f78.  call `m`(v1, v0) @signature `Lx2/o0$a;.m:(Lx2/o0;)V` @kind interface;
  #L4d9f7e.  return @kind void;
}
procedure `void` `v`(`x2.d` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lx2/d;.v:(JJ)V` @AccessFlag PUBLIC {
    temp;

  #L4da010.  v0.`x2.d.s` @type ^`long` := v1 @kind wide;
  #L4da014.  v0.`x2.d.t` @type ^`long` := v3 @kind wide;
  #L4da018.  return @kind void;
}
