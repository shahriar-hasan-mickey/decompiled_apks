record `gc.i$a` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `gc.i` `gc.i$a.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`gc.i$a` v0 @kind this, `gc.i` v1 @kind object) @signature `Lgc/i$a;.<init>:(Lgc/i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L331164.  v0.`gc.i$a.o` @type ^`gc.i` := v1 @kind object;
  #L331168.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33116e.  return @kind void;
}
procedure `void` `run`(`gc.i$a` v6 @kind this) @signature `Lgc/i$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L331180.  v0:= v6.`gc.i$a.o` @type ^`gc.i` @kind object;
  #L331184.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L33118a.  v1:= temp @kind wide;
  #L33118c.  call temp:= `a`(v0, v1) @signature `Lgc/i;.a:(J)J` @kind virtual;
  #L331192.  v0:= temp @kind wide;
  #L331194.  v2:= -1L;
  #L331198.  v4:= lcmp(v0, v2);
  #L33119c.  if v4 != 0 then goto L3311a2;
  #L3311a0.  return @kind void;
  #L3311a2.  v2:= 0L;
  #L3311a6.  v4:= lcmp(v0, v2);
  #L3311aa.  if v4 <= 0 then goto L331180;
  #L3311ae.  v2:= 1000000L;
  #L3311b4.  v4:= v0 / v2 @kind long;
  #L3311b8.  v2:= v2 * v4 @kind long;
  #L3311bc.  v0:= v0 - v2 @kind long;
  #L3311be.  v2:= v6.`gc.i$a.o` @type ^`gc.i` @kind object;
  #L3311c2.  @monitorenter v2
  #L3311c4.  v3:= v6.`gc.i$a.o` @type ^`gc.i` @kind object;
  #L3311c8.  v1:= (`int`) v0 @kind l2i;
  #L3311ca.  call `wait`(v3, v4, v1) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L3311d0.  goto L3311d6;
  #L3311d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3311d4.  goto L3311da;
  #L3311d6.  @monitorexit v2
  #L3311d8.  goto L331180;
  #L3311da.  @monitorexit v2
  #L3311dc.  throw v0;
  catch `java.lang.InterruptedException` @[L3311c4..L3311d0] goto L3311d6;
  catch `java.lang.Throwable` @[L3311c4..L3311d0] goto L3311d2;
  catch `java.lang.Throwable` @[L3311d6..L3311dc] goto L3311d2;
}
