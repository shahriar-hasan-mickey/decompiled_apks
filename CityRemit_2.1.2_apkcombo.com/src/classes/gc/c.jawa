record `gc.c` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `gc.c.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `gc.c.b` @AccessFlag PRIVATE_FINAL;
  `int` `gc.c.c` @AccessFlag PRIVATE_FINAL;
  `int` `gc.c.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `gc.c.e` @AccessFlag PRIVATE_FINAL;
  `boolean` `gc.c.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `gc.c.g` @AccessFlag PRIVATE_FINAL;
  `int` `gc.c.h` @AccessFlag PRIVATE_FINAL;
  `int` `gc.c.i` @AccessFlag PRIVATE_FINAL;
  `boolean` `gc.c.j` @AccessFlag PRIVATE_FINAL;
  `boolean` `gc.c.k` @AccessFlag PRIVATE_FINAL;
  `boolean` `gc.c.l` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `gc.c.m` @AccessFlag ;
}
procedure `void` `<clinit>`() @signature `Lgc/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3300c4.  v0:= new `gc.c$a`;
  #L3300c8.  call `<init>`(v0) @signature `Lgc/c$a;.<init>:()V` @kind direct;
  #L3300ce.  call temp:= `c`(v0) @signature `Lgc/c$a;.c:()Lgc/c$a;` @kind virtual;
  #L3300d4.  v0:= temp @kind object;
  #L3300d6.  call temp:= `a`(v0) @signature `Lgc/c$a;.a:()Lgc/c;` @kind virtual;
  #L3300dc.  v0:= new `gc.c$a`;
  #L3300e0.  call `<init>`(v0) @signature `Lgc/c$a;.<init>:()V` @kind direct;
  #L3300e6.  call temp:= `d`(v0) @signature `Lgc/c$a;.d:()Lgc/c$a;` @kind virtual;
  #L3300ec.  v0:= temp @kind object;
  #L3300ee.  v1:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3300f2.  v2:= 2147483647I;
  #L3300f8.  call temp:= `b`(v0, v2, v1) @signature `Lgc/c$a;.b:(ILjava/util/concurrent/TimeUnit;)Lgc/c$a;` @kind virtual;
  #L3300fe.  v0:= temp @kind object;
  #L330100.  call temp:= `a`(v0) @signature `Lgc/c$a;.a:()Lgc/c;` @kind virtual;
  #L330106.  return @kind void;
}
procedure `void` `<init>`(`gc.c` v1 @kind this, `gc.c$a` v2 @kind object) @signature `Lgc/c;.<init>:(Lgc/c$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L330164.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33016a.  v0:= v2.`gc.c$a.a` @type ^`boolean` @kind boolean;
  #L33016e.  v1.`gc.c.a` @type ^`boolean` := v0 @kind boolean;
  #L330172.  v0:= v2.`gc.c$a.b` @type ^`boolean` @kind boolean;
  #L330176.  v1.`gc.c.b` @type ^`boolean` := v0 @kind boolean;
  #L33017a.  v0:= v2.`gc.c$a.c` @type ^`int`;
  #L33017e.  v1.`gc.c.c` @type ^`int` := v0;
  #L330182.  v0:= -1I;
  #L330184.  v1.`gc.c.d` @type ^`int` := v0;
  #L330188.  v0:= 0I;
  #L33018a.  v1.`gc.c.e` @type ^`boolean` := v0 @kind boolean;
  #L33018e.  v1.`gc.c.f` @type ^`boolean` := v0 @kind boolean;
  #L330192.  v1.`gc.c.g` @type ^`boolean` := v0 @kind boolean;
  #L330196.  v0:= v2.`gc.c$a.d` @type ^`int`;
  #L33019a.  v1.`gc.c.h` @type ^`int` := v0;
  #L33019e.  v0:= v2.`gc.c$a.e` @type ^`int`;
  #L3301a2.  v1.`gc.c.i` @type ^`int` := v0;
  #L3301a6.  v0:= v2.`gc.c$a.f` @type ^`boolean` @kind boolean;
  #L3301aa.  v1.`gc.c.j` @type ^`boolean` := v0 @kind boolean;
  #L3301ae.  v0:= v2.`gc.c$a.g` @type ^`boolean` @kind boolean;
  #L3301b2.  v1.`gc.c.k` @type ^`boolean` := v0 @kind boolean;
  #L3301b6.  v2:= v2.`gc.c$a.h` @type ^`boolean` @kind boolean;
  #L3301ba.  v1.`gc.c.l` @type ^`boolean` := v2 @kind boolean;
  #L3301be.  return @kind void;
}
procedure `void` `<init>`(`gc.c` v0 @kind this, `boolean` v1 , `boolean` v2 , `int` v3 , `int` v4 , `boolean` v5 , `boolean` v6 , `boolean` v7 , `int` v8 , `int` v9 , `boolean` v10 , `boolean` v11 , `boolean` v12 , `java.lang.String` v13 @kind object) @signature `Lgc/c;.<init>:(ZZIIZZZIIZZZLjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L330118.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33011e.  v0.`gc.c.a` @type ^`boolean` := v1 @kind boolean;
  #L330122.  v0.`gc.c.b` @type ^`boolean` := v2 @kind boolean;
  #L330126.  v0.`gc.c.c` @type ^`int` := v3;
  #L33012a.  v0.`gc.c.d` @type ^`int` := v4;
  #L33012e.  v0.`gc.c.e` @type ^`boolean` := v5 @kind boolean;
  #L330132.  v0.`gc.c.f` @type ^`boolean` := v6 @kind boolean;
  #L330136.  v0.`gc.c.g` @type ^`boolean` := v7 @kind boolean;
  #L33013a.  v0.`gc.c.h` @type ^`int` := v8;
  #L33013e.  v0.`gc.c.i` @type ^`int` := v9;
  #L330142.  v0.`gc.c.j` @type ^`boolean` := v10 @kind boolean;
  #L330146.  v0.`gc.c.k` @type ^`boolean` := v11 @kind boolean;
  #L33014a.  v0.`gc.c.l` @type ^`boolean` := v12 @kind boolean;
  #L33014e.  v0.`gc.c.m` @type ^`java.lang.String` := v13 @kind object;
  #L330152.  return @kind void;
}
procedure `java.lang.String` `a`(`gc.c` v4 @kind this) @signature `Lgc/c;.a:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32ff2c.  v0:= new `java.lang.StringBuilder`;
  #L32ff30.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32ff36.  v1:= v4.`gc.c.a` @type ^`boolean` @kind boolean;
  #L32ff3a.  if v1 == 0 then goto L32ff48;
  #L32ff3e.  v1:= "no-cache, " @kind object;
  #L32ff42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ff48.  v1:= v4.`gc.c.b` @type ^`boolean` @kind boolean;
  #L32ff4c.  if v1 == 0 then goto L32ff5a;
  #L32ff50.  v1:= "no-store, " @kind object;
  #L32ff54.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ff5a.  v1:= v4.`gc.c.c` @type ^`int`;
  #L32ff5e.  v2:= ", " @kind object;
  #L32ff62.  v3:= -1I;
  #L32ff64.  if v1 == v3 then goto L32ff82;
  #L32ff68.  v1:= "max-age=" @kind object;
  #L32ff6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ff72.  v1:= v4.`gc.c.c` @type ^`int`;
  #L32ff76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ff7c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ff82.  v1:= v4.`gc.c.d` @type ^`int`;
  #L32ff86.  if v1 == v3 then goto L32ffa4;
  #L32ff8a.  v1:= "s-maxage=" @kind object;
  #L32ff8e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ff94.  v1:= v4.`gc.c.d` @type ^`int`;
  #L32ff98.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ff9e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ffa4.  v1:= v4.`gc.c.e` @type ^`boolean` @kind boolean;
  #L32ffa8.  if v1 == 0 then goto L32ffb6;
  #L32ffac.  v1:= "private, " @kind object;
  #L32ffb0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ffb6.  v1:= v4.`gc.c.f` @type ^`boolean` @kind boolean;
  #L32ffba.  if v1 == 0 then goto L32ffc8;
  #L32ffbe.  v1:= "public, " @kind object;
  #L32ffc2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ffc8.  v1:= v4.`gc.c.g` @type ^`boolean` @kind boolean;
  #L32ffcc.  if v1 == 0 then goto L32ffda;
  #L32ffd0.  v1:= "must-revalidate, " @kind object;
  #L32ffd4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ffda.  v1:= v4.`gc.c.h` @type ^`int`;
  #L32ffde.  if v1 == v3 then goto L32fffc;
  #L32ffe2.  v1:= "max-stale=" @kind object;
  #L32ffe6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ffec.  v1:= v4.`gc.c.h` @type ^`int`;
  #L32fff0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fff6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fffc.  v1:= v4.`gc.c.i` @type ^`int`;
  #L330000.  if v1 == v3 then goto L33001e;
  #L330004.  v1:= "min-fresh=" @kind object;
  #L330008.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33000e.  v1:= v4.`gc.c.i` @type ^`int`;
  #L330012.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L330018.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33001e.  v1:= v4.`gc.c.j` @type ^`boolean` @kind boolean;
  #L330022.  if v1 == 0 then goto L330030;
  #L330026.  v1:= "only-if-cached, " @kind object;
  #L33002a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L330030.  v1:= v4.`gc.c.k` @type ^`boolean` @kind boolean;
  #L330034.  if v1 == 0 then goto L330042;
  #L330038.  v1:= "no-transform, " @kind object;
  #L33003c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L330042.  v1:= v4.`gc.c.l` @type ^`boolean` @kind boolean;
  #L330046.  if v1 == 0 then goto L330054;
  #L33004a.  v1:= "immutable, " @kind object;
  #L33004e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L330054.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L33005a.  v1:= temp;
  #L33005c.  if v1 != 0 then goto L330066;
  #L330060.  v0:= "" @kind object;
  #L330064.  return v0 @kind object;
  #L330066.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L33006c.  v1:= temp;
  #L33006e.  v1:= v1 + -2;
  #L330072.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L330078.  v2:= temp;
  #L33007a.  call temp:= `delete`(v0, v1, v2) @signature `Ljava/lang/StringBuilder;.delete:(II)Ljava/lang/StringBuilder;` @kind virtual;
  #L330080.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L330086.  v0:= temp @kind object;
  #L330088.  return v0 @kind object;
}
procedure `gc.c` `k`(`gc.q` v22 @kind object) @signature `Lgc/c;.k:(Lgc/q;)Lgc/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L32fc38.  v0:= v22 @kind object;
  #L32fc3c.  call temp:= `g`(v22) @signature `Lgc/q;.g:()I` @kind virtual;
  #L32fc42.  v1:= temp;
  #L32fc44.  v6:= 0I;
  #L32fc46.  v7:= 1I;
  #L32fc48.  v8:= 0I;
  #L32fc4a.  v9:= 0I;
  #L32fc4c.  v10:= 0I;
  #L32fc4e.  v11:= -1I;
  #L32fc50.  v12:= -1I;
  #L32fc52.  v13:= 0I;
  #L32fc54.  v14:= 0I;
  #L32fc56.  v15:= 0I;
  #L32fc58.  v16:= -1I;
  #L32fc5c.  v17:= -1I;
  #L32fc60.  v18:= 0I;
  #L32fc64.  v19:= 0I;
  #L32fc68.  v20:= 0I;
  #L32fc6c.  if v6 >= v1 then goto L32feb6;
  #L32fc70.  call temp:= `e`(v0, v6) @signature `Lgc/q;.e:(I)Ljava/lang/String;` @kind virtual;
  #L32fc76.  v2:= temp @kind object;
  #L32fc78.  call temp:= `h`(v0, v6) @signature `Lgc/q;.h:(I)Ljava/lang/String;` @kind virtual;
  #L32fc7e.  v4:= temp @kind object;
  #L32fc80.  v3:= "Cache-Control" @kind object;
  #L32fc84.  call temp:= `equalsIgnoreCase`(v2, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fc8a.  v3:= temp;
  #L32fc8c.  if v3 == 0 then goto L32fc9a;
  #L32fc90.  if v8 == 0 then goto L32fc96;
  #L32fc94.  goto L32fcaa;
  #L32fc96.  v8:= v4 @kind object;
  #L32fc98.  goto L32fcac;
  #L32fc9a.  v3:= "Pragma" @kind object;
  #L32fc9e.  call temp:= `equalsIgnoreCase`(v2, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fca4.  v2:= temp;
  #L32fca6.  if v2 == 0 then goto L32fea8;
  #L32fcaa.  v7:= 0I;
  #L32fcac.  v2:= 0I;
  #L32fcae.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32fcb4.  v3:= temp;
  #L32fcb6.  if v2 >= v3 then goto L32fea8;
  #L32fcba.  v3:= "=,;" @kind object;
  #L32fcbe.  call temp:= `f`(v4, v2, v3) @signature `Lkc/e;.f:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L32fcc4.  v3:= temp;
  #L32fcc6.  call temp:= `substring`(v4, v2, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32fccc.  v2:= temp @kind object;
  #L32fcce.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L32fcd4.  v2:= temp @kind object;
  #L32fcd6.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32fcdc.  v5:= temp;
  #L32fcde.  if v3 == v5 then goto L32fd6a;
  #L32fce2.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L32fce8.  v5:= temp;
  #L32fcea.  v0:= 44I;
  #L32fcee.  if v5 == v0 then goto L32fd6a;
  #L32fcf2.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L32fcf8.  v0:= temp;
  #L32fcfa.  v5:= 59I;
  #L32fcfe.  if v0 != v5 then goto L32fd04;
  #L32fd02.  goto L32fd6a;
  #L32fd04.  v3:= v3 + 1;
  #L32fd08.  call temp:= `g`(v4, v3) @signature `Lkc/e;.g:(Ljava/lang/String;I)I` @kind static;
  #L32fd0e.  v0:= temp;
  #L32fd10.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32fd16.  v3:= temp;
  #L32fd18.  if v0 >= v3 then goto L32fd4a;
  #L32fd1c.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L32fd22.  v3:= temp;
  #L32fd24.  v5:= 34I;
  #L32fd28.  if v3 != v5 then goto L32fd4a;
  #L32fd2c.  v0:= v0 + 1;
  #L32fd30.  v3:= "\"" @kind object;
  #L32fd34.  call temp:= `f`(v4, v0, v3) @signature `Lkc/e;.f:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L32fd3a.  v3:= temp;
  #L32fd3c.  call temp:= `substring`(v4, v0, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32fd42.  v0:= temp @kind object;
  #L32fd44.  v5:= 1I;
  #L32fd46.  v3:= v3 + v5 @kind int;
  #L32fd48.  goto L32fd72;
  #L32fd4a.  v5:= 1I;
  #L32fd4c.  v3:= ",;" @kind object;
  #L32fd50.  call temp:= `f`(v4, v0, v3) @signature `Lkc/e;.f:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L32fd56.  v3:= temp;
  #L32fd58.  call temp:= `substring`(v4, v0, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32fd5e.  v0:= temp @kind object;
  #L32fd60.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L32fd66.  v0:= temp @kind object;
  #L32fd68.  goto L32fd72;
  #L32fd6a.  v5:= 1I;
  #L32fd6c.  v3:= v3 + 1;
  #L32fd70.  v0:= 0I;
  #L32fd72.  v5:= "no-cache" @kind object;
  #L32fd76.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fd7c.  v5:= temp;
  #L32fd7e.  if v5 == 0 then goto L32fd8a;
  #L32fd82.  v5:= -1I;
  #L32fd84.  v9:= 1I;
  #L32fd86.  goto L32fe9e;
  #L32fd8a.  v5:= "no-store" @kind object;
  #L32fd8e.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fd94.  v5:= temp;
  #L32fd96.  if v5 == 0 then goto L32fda2;
  #L32fd9a.  v5:= -1I;
  #L32fd9c.  v10:= 1I;
  #L32fd9e.  goto L32fe9e;
  #L32fda2.  v5:= "max-age" @kind object;
  #L32fda6.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fdac.  v5:= temp;
  #L32fdae.  if v5 == 0 then goto L32fdc0;
  #L32fdb2.  v5:= -1I;
  #L32fdb4.  call temp:= `d`(v0, v5) @signature `Lkc/e;.d:(Ljava/lang/String;I)I` @kind static;
  #L32fdba.  v11:= temp;
  #L32fdbc.  goto L32fe9e;
  #L32fdc0.  v5:= "s-maxage" @kind object;
  #L32fdc4.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fdca.  v5:= temp;
  #L32fdcc.  if v5 == 0 then goto L32fddc;
  #L32fdd0.  v5:= -1I;
  #L32fdd2.  call temp:= `d`(v0, v5) @signature `Lkc/e;.d:(Ljava/lang/String;I)I` @kind static;
  #L32fdd8.  v12:= temp;
  #L32fdda.  goto L32fe9e;
  #L32fddc.  v5:= "private" @kind object;
  #L32fde0.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fde6.  v5:= temp;
  #L32fde8.  if v5 == 0 then goto L32fdf2;
  #L32fdec.  v5:= -1I;
  #L32fdee.  v13:= 1I;
  #L32fdf0.  goto L32fe9e;
  #L32fdf2.  v5:= "public" @kind object;
  #L32fdf6.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fdfc.  v5:= temp;
  #L32fdfe.  if v5 == 0 then goto L32fe08;
  #L32fe02.  v5:= -1I;
  #L32fe04.  v14:= 1I;
  #L32fe06.  goto L32fe9e;
  #L32fe08.  v5:= "must-revalidate" @kind object;
  #L32fe0c.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fe12.  v5:= temp;
  #L32fe14.  if v5 == 0 then goto L32fe1e;
  #L32fe18.  v5:= -1I;
  #L32fe1a.  v15:= 1I;
  #L32fe1c.  goto L32fe9e;
  #L32fe1e.  v5:= "max-stale" @kind object;
  #L32fe22.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fe28.  v5:= temp;
  #L32fe2a.  if v5 == 0 then goto L32fe40;
  #L32fe2e.  v2:= 2147483647I;
  #L32fe34.  call temp:= `d`(v0, v2) @signature `Lkc/e;.d:(Ljava/lang/String;I)I` @kind static;
  #L32fe3a.  v16:= temp;
  #L32fe3c.  v5:= -1I;
  #L32fe3e.  goto L32fe9e;
  #L32fe40.  v5:= "min-fresh" @kind object;
  #L32fe44.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fe4a.  v5:= temp;
  #L32fe4c.  if v5 == 0 then goto L32fe5c;
  #L32fe50.  v5:= -1I;
  #L32fe52.  call temp:= `d`(v0, v5) @signature `Lkc/e;.d:(Ljava/lang/String;I)I` @kind static;
  #L32fe58.  v17:= temp;
  #L32fe5a.  goto L32fe9e;
  #L32fe5c.  v5:= -1I;
  #L32fe5e.  v0:= "only-if-cached" @kind object;
  #L32fe62.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fe68.  v0:= temp;
  #L32fe6a.  if v0 == 0 then goto L32fe74;
  #L32fe6e.  v18:= 1I;
  #L32fe72.  goto L32fe9e;
  #L32fe74.  v0:= "no-transform" @kind object;
  #L32fe78.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fe7e.  v0:= temp;
  #L32fe80.  if v0 == 0 then goto L32fe8a;
  #L32fe84.  v19:= 1I;
  #L32fe88.  goto L32fe9e;
  #L32fe8a.  v0:= "immutable" @kind object;
  #L32fe8e.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32fe94.  v0:= temp;
  #L32fe96.  if v0 == 0 then goto L32fe9e;
  #L32fe9a.  v20:= 1I;
  #L32fe9e.  v0:= v22 @kind object;
  #L32fea2.  v2:= v3;
  #L32fea4.  goto L32fcae;
  #L32fea8.  v5:= -1I;
  #L32feaa.  v6:= v6 + 1;
  #L32feae.  v0:= v22 @kind object;
  #L32feb2.  goto L32fc6c;
  #L32feb6.  if v7 != 0 then goto L32fec0;
  #L32feba.  v21:= 0I;
  #L32febe.  goto L32fec4;
  #L32fec0.  v21:= v8 @kind object;
  #L32fec4.  v0:= new `gc.c`;
  #L32fec8.  v8:= v0 @kind object;
  #L32feca.  call `<init>`(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21) @signature `Lgc/c;.<init>:(ZZIIZZZIIZZZLjava/lang/String;)V` @kind direct;
  #L32fed0.  return v0 @kind object;
}
procedure `boolean` `b`(`gc.c` v1 @kind this) @signature `Lgc/c;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32fba8.  v0:= v1.`gc.c.e` @type ^`boolean` @kind boolean;
  #L32fbac.  return v0;
}
procedure `boolean` `c`(`gc.c` v1 @kind this) @signature `Lgc/c;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32fbc0.  v0:= v1.`gc.c.f` @type ^`boolean` @kind boolean;
  #L32fbc4.  return v0;
}
procedure `int` `d`(`gc.c` v1 @kind this) @signature `Lgc/c;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32fee4.  v0:= v1.`gc.c.c` @type ^`int`;
  #L32fee8.  return v0;
}
procedure `int` `e`(`gc.c` v1 @kind this) @signature `Lgc/c;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32fefc.  v0:= v1.`gc.c.h` @type ^`int`;
  #L32ff00.  return v0;
}
procedure `int` `f`(`gc.c` v1 @kind this) @signature `Lgc/c;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ff14.  v0:= v1.`gc.c.i` @type ^`int`;
  #L32ff18.  return v0;
}
procedure `boolean` `g`(`gc.c` v1 @kind this) @signature `Lgc/c;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32fbd8.  v0:= v1.`gc.c.g` @type ^`boolean` @kind boolean;
  #L32fbdc.  return v0;
}
procedure `boolean` `h`(`gc.c` v1 @kind this) @signature `Lgc/c;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32fbf0.  v0:= v1.`gc.c.a` @type ^`boolean` @kind boolean;
  #L32fbf4.  return v0;
}
procedure `boolean` `i`(`gc.c` v1 @kind this) @signature `Lgc/c;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32fc08.  v0:= v1.`gc.c.b` @type ^`boolean` @kind boolean;
  #L32fc0c.  return v0;
}
procedure `boolean` `j`(`gc.c` v1 @kind this) @signature `Lgc/c;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32fc20.  v0:= v1.`gc.c.j` @type ^`boolean` @kind boolean;
  #L32fc24.  return v0;
}
procedure `java.lang.String` `toString`(`gc.c` v1 @kind this) @signature `Lgc/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33009c.  v0:= v1.`gc.c.m` @type ^`java.lang.String` @kind object;
  #L3300a0.  if v0 == 0 then goto L3300a6;
  #L3300a4.  goto L3300b2;
  #L3300a6.  call temp:= `a`(v1) @signature `Lgc/c;.a:()Ljava/lang/String;` @kind direct;
  #L3300ac.  v0:= temp @kind object;
  #L3300ae.  v1.`gc.c.m` @type ^`java.lang.String` := v0 @kind object;
  #L3300b2.  return v0 @kind object;
}
