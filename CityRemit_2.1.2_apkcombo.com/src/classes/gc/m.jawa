record `gc.m` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `gc.m.a` @AccessFlag PRIVATE;
  `int` `gc.m.b` @AccessFlag PRIVATE;
  `java.lang.Runnable` `gc.m.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `gc.m.d` @AccessFlag PRIVATE;
  `java.util.Deque` `gc.m.e` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `gc.m.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `gc.m.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Lgc/m;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L3329f8.  return @kind void;
}
procedure `void` `<init>`(`gc.m` v1 @kind this) @signature `Lgc/m;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L332a0c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L332a12.  v0:= 64I;
  #L332a16.  v1.`gc.m.a` @type ^`int` := v0;
  #L332a1a.  v0:= 5I;
  #L332a1c.  v1.`gc.m.b` @type ^`int` := v0;
  #L332a20.  v0:= new `java.util.ArrayDeque`;
  #L332a24.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L332a2a.  v1.`gc.m.e` @type ^`java.util.Deque` := v0 @kind object;
  #L332a2e.  v0:= new `java.util.ArrayDeque`;
  #L332a32.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L332a38.  v1.`gc.m.f` @type ^`java.util.Deque` := v0 @kind object;
  #L332a3c.  v0:= new `java.util.ArrayDeque`;
  #L332a40.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L332a46.  v1.`gc.m.g` @type ^`java.util.Deque` := v0 @kind object;
  #L332a4a.  return @kind void;
}
procedure `void` `f`(`gc.m` v0 @kind this, `java.util.Deque` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lgc/m;.f:(Ljava/util/Deque;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;

  #L332b84.  @monitorenter v0
  #L332b86.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L332b8c.  v1:= temp;
  #L332b8e.  if v1 == 0 then goto L332bb0;
  #L332b92.  v1:= v0.`gc.m.c` @type ^`java.lang.Runnable` @kind object;
  #L332b96.  @monitorexit v0
  #L332b98.  call temp:= `g`(v0) @signature `Lgc/m;.g:()Z` @kind direct;
  #L332b9e.  v2:= temp;
  #L332ba0.  if v2 != 0 then goto L332bae;
  #L332ba4.  if v1 == 0 then goto L332bae;
  #L332ba8.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L332bae.  return @kind void;
  #L332bb0.  v1:= new `java.lang.AssertionError`;
  #L332bb4.  v2:= "Call wasn't in-flight!" @kind object;
  #L332bb8.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L332bbe.  throw v1;
  #L332bc0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L332bc2.  @monitorexit v0
  #L332bc4.  throw v1;
  catch `java.lang.Throwable` @[L332b86..L332b98] goto L332bc0;
  catch `java.lang.Throwable` @[L332bb0..L332bc4] goto L332bc0;
}
procedure `boolean` `g`(`gc.m` v6 @kind this) @signature `Lgc/m;.g:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3327fc.  v0:= new `java.util.ArrayList`;
  #L332800.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L332806.  @monitorenter v6
  #L332808.  v1:= v6.`gc.m.e` @type ^`java.util.Deque` @kind object;
  #L33280c.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L332812.  v1:= temp @kind object;
  #L332814.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33281a.  v2:= temp;
  #L33281c.  if v2 == 0 then goto L33286c;
  #L332820.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L332826.  v2:= temp @kind object;
  #L332828.  v2:= (`gc.w$b`) v2 @kind object;
  #L33282c.  v3:= v6.`gc.m.f` @type ^`java.util.Deque` @kind object;
  #L332830.  call temp:= `size`(v3) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L332836.  v3:= temp;
  #L332838.  v4:= v6.`gc.m.a` @type ^`int`;
  #L33283c.  if v3 < v4 then goto L332842;
  #L332840.  goto L33286c;
  #L332842.  call temp:= `i`(v6, v2) @signature `Lgc/m;.i:(Lgc/w$b;)I` @kind direct;
  #L332848.  v3:= temp;
  #L33284a.  v4:= v6.`gc.m.b` @type ^`int`;
  #L33284e.  if v3 < v4 then goto L332854;
  #L332852.  goto L332814;
  #L332854.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L33285a.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L332860.  v3:= v6.`gc.m.f` @type ^`java.util.Deque` @kind object;
  #L332864.  call temp:= `add`(v3, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33286a.  goto L332814;
  #L33286c.  call temp:= `h`(v6) @signature `Lgc/m;.h:()I` @kind virtual;
  #L332872.  v1:= temp;
  #L332874.  v2:= 0I;
  #L332876.  if v1 <= 0 then goto L33287e;
  #L33287a.  v1:= 1I;
  #L33287c.  goto L332880;
  #L33287e.  v1:= 0I;
  #L332880.  @monitorexit v6
  #L332882.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L332888.  v3:= temp;
  #L33288a.  if v2 >= v3 then goto L3328ae;
  #L33288e.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L332894.  v4:= temp @kind object;
  #L332896.  v4:= (`gc.w$b`) v4 @kind object;
  #L33289a.  call temp:= `c`(v6) @signature `Lgc/m;.c:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L3328a0.  v5:= temp @kind object;
  #L3328a2.  call `l`(v4, v5) @signature `Lgc/w$b;.l:(Ljava/util/concurrent/ExecutorService;)V` @kind virtual;
  #L3328a8.  v2:= v2 + 1;
  #L3328ac.  goto L33288a;
  #L3328ae.  return v1;
  #L3328b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3328b2.  @monitorexit v6
  #L3328b4.  throw v0;
  catch `java.lang.Throwable` @[L332808..L332882] goto L3328b0;
  catch `java.lang.Throwable` @[L3328b2..L3328b4] goto L3328b0;
}
procedure `int` `i`(`gc.m` v4 @kind this, `gc.w$b` v5 @kind object) @signature `Lgc/m;.i:(Lgc/w$b;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L332920.  v0:= v4.`gc.m.f` @type ^`java.util.Deque` @kind object;
  #L332924.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33292a.  v0:= temp @kind object;
  #L33292c.  v1:= 0I;
  #L33292e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L332934.  v2:= temp;
  #L332936.  if v2 == 0 then goto L33297a;
  #L33293a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L332940.  v2:= temp @kind object;
  #L332942.  v2:= (`gc.w$b`) v2 @kind object;
  #L332946.  call temp:= `m`(v2) @signature `Lgc/w$b;.m:()Lgc/w;` @kind virtual;
  #L33294c.  v3:= temp @kind object;
  #L33294e.  v3:= v3.`gc.w.t` @type ^`boolean` @kind boolean;
  #L332952.  if v3 == 0 then goto L332958;
  #L332956.  goto L33292e;
  #L332958.  call temp:= `n`(v2) @signature `Lgc/w$b;.n:()Ljava/lang/String;` @kind virtual;
  #L33295e.  v2:= temp @kind object;
  #L332960.  call temp:= `n`(v5) @signature `Lgc/w$b;.n:()Ljava/lang/String;` @kind virtual;
  #L332966.  v3:= temp @kind object;
  #L332968.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L33296e.  v2:= temp;
  #L332970.  if v2 == 0 then goto L33292e;
  #L332974.  v1:= v1 + 1;
  #L332978.  goto L33292e;
  #L33297a.  return v1;
}
procedure `void` `a`(`gc.m` v2 @kind this) @signature `Lgc/m;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L332a5c.  @monitorenter v2
  #L332a5e.  v0:= v2.`gc.m.e` @type ^`java.util.Deque` @kind object;
  #L332a62.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L332a68.  v0:= temp @kind object;
  #L332a6a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L332a70.  v1:= temp;
  #L332a72.  if v1 == 0 then goto L332a92;
  #L332a76.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L332a7c.  v1:= temp @kind object;
  #L332a7e.  v1:= (`gc.w$b`) v1 @kind object;
  #L332a82.  call temp:= `m`(v1) @signature `Lgc/w$b;.m:()Lgc/w;` @kind virtual;
  #L332a88.  v1:= temp @kind object;
  #L332a8a.  call `b`(v1) @signature `Lgc/w;.b:()V` @kind virtual;
  #L332a90.  goto L332a6a;
  #L332a92.  v0:= v2.`gc.m.f` @type ^`java.util.Deque` @kind object;
  #L332a96.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L332a9c.  v0:= temp @kind object;
  #L332a9e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L332aa4.  v1:= temp;
  #L332aa6.  if v1 == 0 then goto L332ac6;
  #L332aaa.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L332ab0.  v1:= temp @kind object;
  #L332ab2.  v1:= (`gc.w$b`) v1 @kind object;
  #L332ab6.  call temp:= `m`(v1) @signature `Lgc/w$b;.m:()Lgc/w;` @kind virtual;
  #L332abc.  v1:= temp @kind object;
  #L332abe.  call `b`(v1) @signature `Lgc/w;.b:()V` @kind virtual;
  #L332ac4.  goto L332a9e;
  #L332ac6.  v0:= v2.`gc.m.g` @type ^`java.util.Deque` @kind object;
  #L332aca.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L332ad0.  v0:= temp @kind object;
  #L332ad2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L332ad8.  v1:= temp;
  #L332ada.  if v1 == 0 then goto L332af2;
  #L332ade.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L332ae4.  v1:= temp @kind object;
  #L332ae6.  v1:= (`gc.w`) v1 @kind object;
  #L332aea.  call `b`(v1) @signature `Lgc/w;.b:()V` @kind virtual;
  #L332af0.  goto L332ad2;
  #L332af2.  @monitorexit v2
  #L332af4.  return @kind void;
  #L332af6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L332af8.  @monitorexit v2
  #L332afa.  throw v0;
  catch `java.lang.Throwable` @[L332a5e..L332af0] goto L332af6;
}
procedure `void` `b`(`gc.m` v1 @kind this, `gc.w` v2 @kind object) @signature `Lgc/m;.b:(Lgc/w;)V` @AccessFlag  {
    temp;
    v0;

  #L332b18.  @monitorenter v1
  #L332b1a.  v0:= v1.`gc.m.g` @type ^`java.util.Deque` @kind object;
  #L332b1e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L332b24.  @monitorexit v1
  #L332b26.  return @kind void;
  #L332b28.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L332b2a.  @monitorexit v1
  #L332b2c.  throw v2;
  catch `java.lang.Throwable` @[L332b1a..L332b24] goto L332b28;
}
procedure `java.util.concurrent.ExecutorService` `c`(`gc.m` v9 @kind this) @signature `Lgc/m;.c:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L33298c.  @monitorenter v9
  #L33298e.  v0:= v9.`gc.m.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L332992.  if v0 != 0 then goto L3329ce;
  #L332996.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L33299a.  v2:= 0I;
  #L33299c.  v3:= 2147483647I;
  #L3329a2.  v4:= 60L;
  #L3329a6.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3329aa.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L3329ae.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L3329b4.  v1:= "OkHttp Dispatcher" @kind object;
  #L3329b8.  v8:= 0I;
  #L3329ba.  call temp:= `E`(v1, v8) @signature `Lhc/c;.E:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L3329c0.  v8:= temp @kind object;
  #L3329c2.  v1:= v0 @kind object;
  #L3329c4.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L3329ca.  v9.`gc.m.d` @type ^`java.util.concurrent.ExecutorService` := v0 @kind object;
  #L3329ce.  v0:= v9.`gc.m.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3329d2.  @monitorexit v9
  #L3329d4.  return v0 @kind object;
  #L3329d6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3329d8.  @monitorexit v9
  #L3329da.  throw v0;
  catch `java.lang.Throwable` @[L33298e..L3329d2] goto L3329d6;
}
procedure `void` `d`(`gc.m` v1 @kind this, `gc.w$b` v2 @kind object) @signature `Lgc/m;.d:(Lgc/w$b;)V` @AccessFlag  {
    temp;
    v0;

  #L332b4c.  v0:= v1.`gc.m.f` @type ^`java.util.Deque` @kind object;
  #L332b50.  call `f`(v1, v0, v2) @signature `Lgc/m;.f:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L332b56.  return @kind void;
}
procedure `void` `e`(`gc.m` v1 @kind this, `gc.w` v2 @kind object) @signature `Lgc/m;.e:(Lgc/w;)V` @AccessFlag  {
    temp;
    v0;

  #L332b68.  v0:= v1.`gc.m.g` @type ^`java.util.Deque` @kind object;
  #L332b6c.  call `f`(v1, v0, v2) @signature `Lgc/m;.f:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L332b72.  return @kind void;
}
procedure `int` `h`(`gc.m` v2 @kind this) @signature `Lgc/m;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3328dc.  @monitorenter v2
  #L3328de.  v0:= v2.`gc.m.f` @type ^`java.util.Deque` @kind object;
  #L3328e2.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L3328e8.  v0:= temp;
  #L3328ea.  v1:= v2.`gc.m.g` @type ^`java.util.Deque` @kind object;
  #L3328ee.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L3328f4.  v1:= temp;
  #L3328f6.  v0:= v0 + v1 @kind int;
  #L3328f8.  @monitorexit v2
  #L3328fa.  return v0;
  #L3328fc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3328fe.  @monitorexit v2
  #L332900.  throw v0;
  catch `java.lang.Throwable` @[L3328de..L3328f6] goto L3328fc;
}
