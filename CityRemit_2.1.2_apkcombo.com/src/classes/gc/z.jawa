record `gc.z` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `gc.c` `gc.z.A` @AccessFlag PRIVATE_VOLATILE;
  `gc.x` `gc.z.o` @AccessFlag FINAL;
  `gc.v` `gc.z.p` @AccessFlag FINAL;
  `int` `gc.z.q` @AccessFlag FINAL;
  `java.lang.String` `gc.z.r` @AccessFlag FINAL;
  `gc.p` `gc.z.s` @AccessFlag FINAL;
  `gc.q` `gc.z.t` @AccessFlag FINAL;
  `gc.a0` `gc.z.u` @AccessFlag FINAL;
  `gc.z` `gc.z.v` @AccessFlag FINAL;
  `gc.z` `gc.z.w` @AccessFlag FINAL;
  `gc.z` `gc.z.x` @AccessFlag FINAL;
  `long` `gc.z.y` @AccessFlag FINAL;
  `long` `gc.z.z` @AccessFlag FINAL;
}
procedure `void` `<init>`(`gc.z` v2 @kind this, `gc.z$a` v3 @kind object) @signature `Lgc/z;.<init>:(Lgc/z$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L336ba4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L336baa.  v0:= v3.`gc.z$a.a` @type ^`gc.x` @kind object;
  #L336bae.  v2.`gc.z.o` @type ^`gc.x` := v0 @kind object;
  #L336bb2.  v0:= v3.`gc.z$a.b` @type ^`gc.v` @kind object;
  #L336bb6.  v2.`gc.z.p` @type ^`gc.v` := v0 @kind object;
  #L336bba.  v0:= v3.`gc.z$a.c` @type ^`int`;
  #L336bbe.  v2.`gc.z.q` @type ^`int` := v0;
  #L336bc2.  v0:= v3.`gc.z$a.d` @type ^`java.lang.String` @kind object;
  #L336bc6.  v2.`gc.z.r` @type ^`java.lang.String` := v0 @kind object;
  #L336bca.  v0:= v3.`gc.z$a.e` @type ^`gc.p` @kind object;
  #L336bce.  v2.`gc.z.s` @type ^`gc.p` := v0 @kind object;
  #L336bd2.  v0:= v3.`gc.z$a.f` @type ^`gc.q$a` @kind object;
  #L336bd6.  call temp:= `d`(v0) @signature `Lgc/q$a;.d:()Lgc/q;` @kind virtual;
  #L336bdc.  v0:= temp @kind object;
  #L336bde.  v2.`gc.z.t` @type ^`gc.q` := v0 @kind object;
  #L336be2.  v0:= v3.`gc.z$a.g` @type ^`gc.a0` @kind object;
  #L336be6.  v2.`gc.z.u` @type ^`gc.a0` := v0 @kind object;
  #L336bea.  v0:= v3.`gc.z$a.h` @type ^`gc.z` @kind object;
  #L336bee.  v2.`gc.z.v` @type ^`gc.z` := v0 @kind object;
  #L336bf2.  v0:= v3.`gc.z$a.i` @type ^`gc.z` @kind object;
  #L336bf6.  v2.`gc.z.w` @type ^`gc.z` := v0 @kind object;
  #L336bfa.  v0:= v3.`gc.z$a.j` @type ^`gc.z` @kind object;
  #L336bfe.  v2.`gc.z.x` @type ^`gc.z` := v0 @kind object;
  #L336c02.  v0:= v3.`gc.z$a.k` @type ^`long` @kind wide;
  #L336c06.  v2.`gc.z.y` @type ^`long` := v0 @kind wide;
  #L336c0a.  v0:= v3.`gc.z$a.l` @type ^`long` @kind wide;
  #L336c0e.  v2.`gc.z.z` @type ^`long` := v0 @kind wide;
  #L336c12.  return @kind void;
}
procedure `gc.x` `E`(`gc.z` v1 @kind this) @signature `Lgc/z;.E:()Lgc/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L336a30.  v0:= v1.`gc.z.o` @type ^`gc.x` @kind object;
  #L336a34.  return v0 @kind object;
}
procedure `long` `G`(`gc.z` v2 @kind this) @signature `Lgc/z;.G:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L336b8c.  v0:= v2.`gc.z.y` @type ^`long` @kind wide;
  #L336b90.  return v0 @kind wide;
}
procedure `gc.a0` `a`(`gc.z` v1 @kind this) @signature `Lgc/z;.a:()Lgc/a0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L336a7c.  v0:= v1.`gc.z.u` @type ^`gc.a0` @kind object;
  #L336a80.  return v0 @kind object;
}
procedure `gc.c` `c`(`gc.z` v1 @kind this) @signature `Lgc/z;.c:()Lgc/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3369d4.  v0:= v1.`gc.z.A` @type ^`gc.c` @kind object;
  #L3369d8.  if v0 == 0 then goto L3369de;
  #L3369dc.  goto L3369ee;
  #L3369de.  v0:= v1.`gc.z.t` @type ^`gc.q` @kind object;
  #L3369e2.  call temp:= `k`(v0) @signature `Lgc/c;.k:(Lgc/q;)Lgc/c;` @kind static;
  #L3369e8.  v0:= temp @kind object;
  #L3369ea.  v1.`gc.z.A` @type ^`gc.c` := v0 @kind object;
  #L3369ee.  return v0 @kind object;
}
procedure `void` `close`(`gc.z` v2 @kind this) @signature `Lgc/z;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L336c24.  v0:= v2.`gc.z.u` @type ^`gc.a0` @kind object;
  #L336c28.  if v0 == 0 then goto L336c34;
  #L336c2c.  call `close`(v0) @signature `Lgc/a0;.close:()V` @kind virtual;
  #L336c32.  return @kind void;
  #L336c34.  v0:= new `java.lang.IllegalStateException`;
  #L336c38.  v1:= "response is not eligible for a body and must not be closed" @kind object;
  #L336c3c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L336c42.  throw v0;
}
procedure `int` `e`(`gc.z` v1 @kind this) @signature `Lgc/z;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L336a94.  v0:= v1.`gc.z.q` @type ^`int`;
  #L336a98.  return v0;
}
procedure `gc.p` `h`(`gc.z` v1 @kind this) @signature `Lgc/z;.h:()Lgc/p;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L336a00.  v0:= v1.`gc.z.s` @type ^`gc.p` @kind object;
  #L336a04.  return v0 @kind object;
}
procedure `java.lang.String` `i`(`gc.z` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lgc/z;.i:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L336aac.  v0:= 0I;
  #L336aae.  call temp:= `k`(v1, v2, v0) @signature `Lgc/z;.k:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L336ab4.  v2:= temp @kind object;
  #L336ab6.  return v2 @kind object;
}
procedure `java.lang.String` `k`(`gc.z` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lgc/z;.k:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L336ac8.  v0:= v1.`gc.z.t` @type ^`gc.q` @kind object;
  #L336acc.  call temp:= `c`(v0, v2) @signature `Lgc/q;.c:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L336ad2.  v2:= temp @kind object;
  #L336ad4.  if v2 == 0 then goto L336ada;
  #L336ad8.  v3:= v2 @kind object;
  #L336ada.  return v3 @kind object;
}
procedure `gc.q` `o`(`gc.z` v1 @kind this) @signature `Lgc/z;.o:()Lgc/q;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L336a18.  v0:= v1.`gc.z.t` @type ^`gc.q` @kind object;
  #L336a1c.  return v0 @kind object;
}
procedure `gc.z$a` `s`(`gc.z` v1 @kind this) @signature `Lgc/z;.s:()Lgc/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L336a60.  v0:= new `gc.z$a`;
  #L336a64.  call `<init>`(v0, v1) @signature `Lgc/z$a;.<init>:(Lgc/z;)V` @kind direct;
  #L336a6a.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`gc.z` v2 @kind this) @signature `Lgc/z;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L336aec.  v0:= new `java.lang.StringBuilder`;
  #L336af0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L336af6.  v1:= "Response{protocol=" @kind object;
  #L336afa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L336b00.  v1:= v2.`gc.z.p` @type ^`gc.v` @kind object;
  #L336b04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L336b0a.  v1:= ", code=" @kind object;
  #L336b0e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L336b14.  v1:= v2.`gc.z.q` @type ^`int`;
  #L336b18.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L336b1e.  v1:= ", message=" @kind object;
  #L336b22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L336b28.  v1:= v2.`gc.z.r` @type ^`java.lang.String` @kind object;
  #L336b2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L336b32.  v1:= ", url=" @kind object;
  #L336b36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L336b3c.  v1:= v2.`gc.z.o` @type ^`gc.x` @kind object;
  #L336b40.  call temp:= `h`(v1) @signature `Lgc/x;.h:()Lgc/r;` @kind virtual;
  #L336b46.  v1:= temp @kind object;
  #L336b48.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L336b4e.  v1:= 125I;
  #L336b52.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L336b58.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L336b5e.  v0:= temp @kind object;
  #L336b60.  return v0 @kind object;
}
procedure `gc.z` `v`(`gc.z` v1 @kind this) @signature `Lgc/z;.v:()Lgc/z;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L336a48.  v0:= v1.`gc.z.x` @type ^`gc.z` @kind object;
  #L336a4c.  return v0 @kind object;
}
procedure `long` `x`(`gc.z` v2 @kind this) @signature `Lgc/z;.x:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L336b74.  v0:= v2.`gc.z.z` @type ^`long` @kind wide;
  #L336b78.  return v0 @kind wide;
}
