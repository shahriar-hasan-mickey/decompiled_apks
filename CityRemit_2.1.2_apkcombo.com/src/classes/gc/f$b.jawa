record `gc.f$b` @kind class @AccessFlag FINAL {
  `java.lang.String` `gc.f$b.a` @AccessFlag FINAL;
  `java.lang.String` `gc.f$b.b` @AccessFlag FINAL;
  `java.lang.String` `gc.f$b.c` @AccessFlag FINAL;
  `qc.f` `gc.f$b.d` @AccessFlag FINAL;
}
procedure `boolean` `a`(`gc.f$b` v10 @kind this, `java.lang.String` v11 @kind object) @signature `Lgc/f$b;.a:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L330284.  v0:= v10.`gc.f$b.a` @type ^`java.lang.String` @kind object;
  #L330288.  v1:= "*." @kind object;
  #L33028c.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L330292.  v0:= temp;
  #L330294.  if v0 == 0 then goto L3302ea;
  #L330298.  v0:= 46I;
  #L33029c.  call temp:= `indexOf`(v11, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L3302a2.  v0:= temp;
  #L3302a4.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3302aa.  v1:= temp;
  #L3302ac.  v1:= v1 - v0 @kind int;
  #L3302ae.  v2:= 1I;
  #L3302b0.  v1:= v1 - v2 @kind int;
  #L3302b2.  v3:= v10.`gc.f$b.b` @type ^`java.lang.String` @kind object;
  #L3302b6.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3302bc.  v3:= temp;
  #L3302be.  if v1 != v3 then goto L3302e6;
  #L3302c2.  v5:= 0I;
  #L3302c4.  v6:= v0 + 1;
  #L3302c8.  v7:= v10.`gc.f$b.b` @type ^`java.lang.String` @kind object;
  #L3302cc.  v8:= 0I;
  #L3302ce.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3302d4.  v9:= temp;
  #L3302d6.  v4:= v11 @kind object;
  #L3302d8.  call temp:= `regionMatches`(v4, v5, v6, v7, v8, v9) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L3302de.  v11:= temp;
  #L3302e0.  if v11 == 0 then goto L3302e6;
  #L3302e4.  goto L3302e8;
  #L3302e6.  v2:= 0I;
  #L3302e8.  return v2;
  #L3302ea.  v0:= v10.`gc.f$b.b` @type ^`java.lang.String` @kind object;
  #L3302ee.  call temp:= `equals`(v11, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3302f4.  v11:= temp;
  #L3302f6.  return v11;
}
procedure `boolean` `equals`(`gc.f$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lgc/f$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L330224.  v0:= instanceof @variable v3 @type ^`gc.f$b` @kind boolean;
  #L330228.  if v0 == 0 then goto L330270;
  #L33022c.  v0:= v2.`gc.f$b.a` @type ^`java.lang.String` @kind object;
  #L330230.  v3:= (`gc.f$b`) v3 @kind object;
  #L330234.  v1:= v3.`gc.f$b.a` @type ^`java.lang.String` @kind object;
  #L330238.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L33023e.  v0:= temp;
  #L330240.  if v0 == 0 then goto L330270;
  #L330244.  v0:= v2.`gc.f$b.c` @type ^`java.lang.String` @kind object;
  #L330248.  v1:= v3.`gc.f$b.c` @type ^`java.lang.String` @kind object;
  #L33024c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L330252.  v0:= temp;
  #L330254.  if v0 == 0 then goto L330270;
  #L330258.  v0:= v2.`gc.f$b.d` @type ^`qc.f` @kind object;
  #L33025c.  v3:= v3.`gc.f$b.d` @type ^`qc.f` @kind object;
  #L330260.  call temp:= `equals`(v0, v3) @signature `Lqc/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L330266.  v3:= temp;
  #L330268.  if v3 == 0 then goto L330270;
  #L33026c.  v3:= 1I;
  #L33026e.  goto L330272;
  #L330270.  v3:= 0I;
  #L330272.  return v3;
}
procedure `int` `hashCode`(`gc.f$b` v2 @kind this) @signature `Lgc/f$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L330308.  v0:= v2.`gc.f$b.a` @type ^`java.lang.String` @kind object;
  #L33030c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L330312.  v0:= temp;
  #L330314.  v1:= 527I;
  #L330318.  v1:= v1 + v0 @kind int;
  #L33031a.  v1:= v1 * 31;
  #L33031e.  v0:= v2.`gc.f$b.c` @type ^`java.lang.String` @kind object;
  #L330322.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L330328.  v0:= temp;
  #L33032a.  v1:= v1 + v0 @kind int;
  #L33032c.  v1:= v1 * 31;
  #L330330.  v0:= v2.`gc.f$b.d` @type ^`qc.f` @kind object;
  #L330334.  call temp:= `hashCode`(v0) @signature `Lqc/f;.hashCode:()I` @kind virtual;
  #L33033a.  v0:= temp;
  #L33033c.  v1:= v1 + v0 @kind int;
  #L33033e.  return v1;
}
procedure `java.lang.String` `toString`(`gc.f$b` v2 @kind this) @signature `Lgc/f$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L330350.  v0:= new `java.lang.StringBuilder`;
  #L330354.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L33035a.  v1:= v2.`gc.f$b.c` @type ^`java.lang.String` @kind object;
  #L33035e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L330364.  v1:= v2.`gc.f$b.d` @type ^`qc.f` @kind object;
  #L330368.  call temp:= `c`(v1) @signature `Lqc/f;.c:()Ljava/lang/String;` @kind virtual;
  #L33036e.  v1:= temp @kind object;
  #L330370.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L330376.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L33037c.  v0:= temp @kind object;
  #L33037e.  return v0 @kind object;
}
