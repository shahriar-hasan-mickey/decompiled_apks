record `gc.j$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `gc.j$a.a` @AccessFlag ;
  `java.lang.String`[] `gc.j$a.b` @AccessFlag ;
  `java.lang.String`[] `gc.j$a.c` @AccessFlag ;
  `boolean` `gc.j$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`gc.j$a` v1 @kind this, `gc.j` v2 @kind object) @signature `Lgc/j$a;.<init>:(Lgc/j;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L331788.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33178e.  v0:= v2.`gc.j.a` @type ^`boolean` @kind boolean;
  #L331792.  v1.`gc.j$a.a` @type ^`boolean` := v0 @kind boolean;
  #L331796.  v0:= v2.`gc.j.c` @type ^`java.lang.String`[] @kind object;
  #L33179a.  v1.`gc.j$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L33179e.  v0:= v2.`gc.j.d` @type ^`java.lang.String`[] @kind object;
  #L3317a2.  v1.`gc.j$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L3317a6.  v2:= v2.`gc.j.b` @type ^`boolean` @kind boolean;
  #L3317aa.  v1.`gc.j$a.d` @type ^`boolean` := v2 @kind boolean;
  #L3317ae.  return @kind void;
}
procedure `void` `<init>`(`gc.j$a` v0 @kind this, `boolean` v1 ) @signature `Lgc/j$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L33176c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L331772.  v0.`gc.j$a.a` @type ^`boolean` := v1 @kind boolean;
  #L331776.  return @kind void;
}
procedure `gc.j` `a`(`gc.j$a` v1 @kind this) @signature `Lgc/j$a;.a:()Lgc/j;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3315d8.  v0:= new `gc.j`;
  #L3315dc.  call `<init>`(v0, v1) @signature `Lgc/j;.<init>:(Lgc/j$a;)V` @kind direct;
  #L3315e2.  return v0 @kind object;
}
procedure `gc.j$a` `b`(`gc.j$a` v3 @kind this, `gc.g`[] v4 @kind object) @signature `Lgc/j$a;.b:([Lgc/g;)Lgc/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3315f4.  v0:= v3.`gc.j$a.a` @type ^`boolean` @kind boolean;
  #L3315f8.  if v0 == 0 then goto L331626;
  #L3315fc.  v0:= length @variable v4;
  #L3315fe.  v0:= new `java.lang.String`[v0];
  #L331602.  v1:= 0I;
  #L331604.  v2:= length @variable v4;
  #L331606.  if v1 >= v2 then goto L33161c;
  #L33160a.  v2:= v4[v1] @kind object;
  #L33160e.  v2:= v2.`gc.g.a` @type ^`java.lang.String` @kind object;
  #L331612.  v0[v1]:= v2 @kind object;
  #L331616.  v1:= v1 + 1;
  #L33161a.  goto L331604;
  #L33161c.  call temp:= `c`(v3, v0) @signature `Lgc/j$a;.c:([Ljava/lang/String;)Lgc/j$a;` @kind virtual;
  #L331622.  v4:= temp @kind object;
  #L331624.  return v4 @kind object;
  #L331626.  v4:= new `java.lang.IllegalStateException`;
  #L33162a.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L33162e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L331634.  throw v4;
}
procedure `gc.j$a` `c`(`gc.j$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lgc/j$a;.c:([Ljava/lang/String;)Lgc/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L331648.  v0:= v1.`gc.j$a.a` @type ^`boolean` @kind boolean;
  #L33164c.  if v0 == 0 then goto L331678;
  #L331650.  v0:= length @variable v2;
  #L331652.  if v0 == 0 then goto L331668;
  #L331656.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L33165c.  v2:= temp @kind object;
  #L33165e.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L331662.  v1.`gc.j$a.b` @type ^`java.lang.String`[] := v2 @kind object;
  #L331666.  return v1 @kind object;
  #L331668.  v2:= new `java.lang.IllegalArgumentException`;
  #L33166c.  v0:= "At least one cipher suite is required" @kind object;
  #L331670.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L331676.  throw v2;
  #L331678.  v2:= new `java.lang.IllegalStateException`;
  #L33167c.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L331680.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L331686.  throw v2;
}
procedure `gc.j$a` `d`(`gc.j$a` v1 @kind this, `boolean` v2 ) @signature `Lgc/j$a;.d:(Z)Lgc/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L331698.  v0:= v1.`gc.j$a.a` @type ^`boolean` @kind boolean;
  #L33169c.  if v0 == 0 then goto L3316a6;
  #L3316a0.  v1.`gc.j$a.d` @type ^`boolean` := v2 @kind boolean;
  #L3316a4.  return v1 @kind object;
  #L3316a6.  v2:= new `java.lang.IllegalStateException`;
  #L3316aa.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L3316ae.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3316b4.  throw v2;
}
procedure `gc.j$a` `e`(`gc.j$a` v3 @kind this, `gc.c0`[] v4 @kind object) @signature `Lgc/j$a;.e:([Lgc/c0;)Lgc/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3316c8.  v0:= v3.`gc.j$a.a` @type ^`boolean` @kind boolean;
  #L3316cc.  if v0 == 0 then goto L3316fa;
  #L3316d0.  v0:= length @variable v4;
  #L3316d2.  v0:= new `java.lang.String`[v0];
  #L3316d6.  v1:= 0I;
  #L3316d8.  v2:= length @variable v4;
  #L3316da.  if v1 >= v2 then goto L3316f0;
  #L3316de.  v2:= v4[v1] @kind object;
  #L3316e2.  v2:= v2.`gc.c0.o` @type ^`java.lang.String` @kind object;
  #L3316e6.  v0[v1]:= v2 @kind object;
  #L3316ea.  v1:= v1 + 1;
  #L3316ee.  goto L3316d8;
  #L3316f0.  call temp:= `f`(v3, v0) @signature `Lgc/j$a;.f:([Ljava/lang/String;)Lgc/j$a;` @kind virtual;
  #L3316f6.  v4:= temp @kind object;
  #L3316f8.  return v4 @kind object;
  #L3316fa.  v4:= new `java.lang.IllegalStateException`;
  #L3316fe.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L331702.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L331708.  throw v4;
}
procedure `gc.j$a` `f`(`gc.j$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lgc/j$a;.f:([Ljava/lang/String;)Lgc/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33171c.  v0:= v1.`gc.j$a.a` @type ^`boolean` @kind boolean;
  #L331720.  if v0 == 0 then goto L33174c;
  #L331724.  v0:= length @variable v2;
  #L331726.  if v0 == 0 then goto L33173c;
  #L33172a.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L331730.  v2:= temp @kind object;
  #L331732.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L331736.  v1.`gc.j$a.c` @type ^`java.lang.String`[] := v2 @kind object;
  #L33173a.  return v1 @kind object;
  #L33173c.  v2:= new `java.lang.IllegalArgumentException`;
  #L331740.  v0:= "At least one TLS version is required" @kind object;
  #L331744.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33174a.  throw v2;
  #L33174c.  v2:= new `java.lang.IllegalStateException`;
  #L331750.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L331754.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33175a.  throw v2;
}
