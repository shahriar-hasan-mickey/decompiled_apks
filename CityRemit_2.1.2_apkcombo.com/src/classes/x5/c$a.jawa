record `x5.c$a` @kind class @AccessFlag  extends `java.lang.ThreadLocal` @kind class {
}
procedure `void` `<init>`(`x5.c$a` v0 @kind this) @signature `Lx5/c$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e201c.  call `<init>`(v0) @signature `Ljava/lang/ThreadLocal;.<init>:()V` @kind direct;
  #L4e2022.  return @kind void;
}
procedure `javax.crypto.Cipher` `a`(`x5.c$a` v2 @kind this) @signature `Lx5/c$a;.a:()Ljavax/crypto/Cipher;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4e1fd8.  v0:= `@@x5.m.f` @type ^`x5.m` @kind object;
  #L4e1fdc.  v1:= "AES/GCM/NoPadding" @kind object;
  #L4e1fe0.  call temp:= `a`(v0, v1) @signature `Lx5/m;.a:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L4e1fe6.  v0:= temp @kind object;
  #L4e1fe8.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L4e1fec.  return v0 @kind object;
  #L4e1fee.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L4e1ff0.  v1:= new `java.lang.IllegalStateException`;
  #L4e1ff4.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4e1ffa.  throw v1;
  catch `java.security.GeneralSecurityException` @[L4e1fd8..L4e1fec] goto L4e1fee;
}
procedure `java.lang.Object` `initialValue`(`x5.c$a` v1 @kind this) @signature `Lx5/c$a;.initialValue:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L4e1fbc.  call temp:= `a`(v1) @signature `Lx5/c$a;.a:()Ljavax/crypto/Cipher;` @kind virtual;
  #L4e1fc2.  v0:= temp @kind object;
  #L4e1fc4.  return v0 @kind object;
}
