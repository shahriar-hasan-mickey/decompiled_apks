record `x5.l` @kind class @AccessFlag PUBLIC_FINAL extends `p5.a` @kind interface {
  `x5.p` `x5.l.a` @AccessFlag PRIVATE_FINAL;
  `p5.o` `x5.l.b` @AccessFlag PRIVATE_FINAL;
  `int` `x5.l.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`x5.l` v0 @kind this, `x5.p` v1 @kind object, `p5.o` v2 @kind object, `int` v3 ) @signature `Lx5/l;.<init>:(Lx5/p;Lp5/o;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4e4494.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e449a.  v0.`x5.l.a` @type ^`x5.p` := v1 @kind object;
  #L4e449e.  v0.`x5.l.b` @type ^`p5.o` := v2 @kind object;
  #L4e44a2.  v0.`x5.l.c` @type ^`int` := v3;
  #L4e44a6.  return @kind void;
}
procedure `byte`[] `a`(`x5.l` v7 @kind this, `byte`[] v8 @kind object, `byte`[] v9 @kind object) @signature `Lx5/l;.a:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4e43fc.  v0:= v7.`x5.l.a` @type ^`x5.p` @kind object;
  #L4e4400.  call temp:= `a`(v0, v8) @signature `Lx5/p;.a:([B)[B` @kind interface;
  #L4e4406.  v8:= temp @kind object;
  #L4e4408.  v0:= 0I;
  #L4e440a.  if v9 != 0 then goto L4e4412;
  #L4e440e.  v9:= new `byte`[v0];
  #L4e4412.  v1:= 8I;
  #L4e4416.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4e441c.  v2:= temp @kind object;
  #L4e441e.  v3:= 8L;
  #L4e4422.  v5:= length @variable v9;
  #L4e4424.  v5:= (`long`) v5 @kind i2l;
  #L4e4426.  v5:= v5 * v3 @kind long;
  #L4e442a.  call temp:= `putLong`(v2, v5) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e4430.  v2:= temp @kind object;
  #L4e4432.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L4e4438.  v2:= temp @kind object;
  #L4e443a.  call temp:= `copyOf`(v2, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L4e4440.  v1:= temp @kind object;
  #L4e4442.  v2:= v7.`x5.l.b` @type ^`p5.o` @kind object;
  #L4e4446.  v3:= 3I;
  #L4e4448.  v3:= new `byte`[][v3];
  #L4e444c.  v3[v0]:= v9 @kind object;
  #L4e4450.  v9:= 1I;
  #L4e4452.  v3[v9]:= v8 @kind object;
  #L4e4456.  v4:= 2I;
  #L4e4458.  v3[v4]:= v1 @kind object;
  #L4e445c.  call temp:= `a`(v3) @signature `Lx5/g;.a:([[B)[B` @kind static;
  #L4e4462.  v1:= temp @kind object;
  #L4e4464.  call temp:= `b`(v2, v1) @signature `Lp5/o;.b:([B)[B` @kind interface;
  #L4e446a.  v1:= temp @kind object;
  #L4e446c.  v2:= new `byte`[][v4];
  #L4e4470.  v2[v0]:= v8 @kind object;
  #L4e4474.  v2[v9]:= v1 @kind object;
  #L4e4478.  call temp:= `a`(v2) @signature `Lx5/g;.a:([[B)[B` @kind static;
  #L4e447e.  v8:= temp @kind object;
  #L4e4480.  return v8 @kind object;
}
procedure `byte`[] `b`(`x5.l` v8 @kind this, `byte`[] v9 @kind object, `byte`[] v10 @kind object) @signature `Lx5/l;.b:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4e4344.  v0:= length @variable v9;
  #L4e4346.  v1:= v8.`x5.l.c` @type ^`int`;
  #L4e434a.  if v0 < v1 then goto L4e43dc;
  #L4e434e.  v0:= length @variable v9;
  #L4e4350.  v0:= v0 - v1 @kind int;
  #L4e4352.  v1:= 0I;
  #L4e4354.  call temp:= `copyOfRange`(v9, v1, v0) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L4e435a.  v0:= temp @kind object;
  #L4e435c.  v2:= length @variable v9;
  #L4e435e.  v3:= v8.`x5.l.c` @type ^`int`;
  #L4e4362.  v2:= v2 - v3 @kind int;
  #L4e4364.  v3:= length @variable v9;
  #L4e4366.  call temp:= `copyOfRange`(v9, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L4e436c.  v9:= temp @kind object;
  #L4e436e.  if v10 != 0 then goto L4e4376;
  #L4e4372.  v10:= new `byte`[v1];
  #L4e4376.  v2:= 8I;
  #L4e437a.  call temp:= `allocate`(v2) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4e4380.  v3:= temp @kind object;
  #L4e4382.  v4:= 8L;
  #L4e4386.  v6:= length @variable v10;
  #L4e4388.  v6:= (`long`) v6 @kind i2l;
  #L4e438a.  v6:= v6 * v4 @kind long;
  #L4e438e.  call temp:= `putLong`(v3, v6) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e4394.  v3:= temp @kind object;
  #L4e4396.  call temp:= `array`(v3) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L4e439c.  v3:= temp @kind object;
  #L4e439e.  call temp:= `copyOf`(v3, v2) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L4e43a4.  v2:= temp @kind object;
  #L4e43a6.  v3:= v8.`x5.l.b` @type ^`p5.o` @kind object;
  #L4e43aa.  v4:= 3I;
  #L4e43ac.  v4:= new `byte`[][v4];
  #L4e43b0.  v4[v1]:= v10 @kind object;
  #L4e43b4.  v10:= 1I;
  #L4e43b6.  v4[v10]:= v0 @kind object;
  #L4e43ba.  v10:= 2I;
  #L4e43bc.  v4[v10]:= v2 @kind object;
  #L4e43c0.  call temp:= `a`(v4) @signature `Lx5/g;.a:([[B)[B` @kind static;
  #L4e43c6.  v10:= temp @kind object;
  #L4e43c8.  call `a`(v3, v9, v10) @signature `Lp5/o;.a:([B[B)V` @kind interface;
  #L4e43ce.  v9:= v8.`x5.l.a` @type ^`x5.p` @kind object;
  #L4e43d2.  call temp:= `b`(v9, v0) @signature `Lx5/p;.b:([B)[B` @kind interface;
  #L4e43d8.  v9:= temp @kind object;
  #L4e43da.  return v9 @kind object;
  #L4e43dc.  v9:= new `java.security.GeneralSecurityException`;
  #L4e43e0.  v10:= "ciphertext too short" @kind object;
  #L4e43e4.  call `<init>`(v9, v10) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e43ea.  throw v9;
}
