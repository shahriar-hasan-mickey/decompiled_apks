record `x5.k` @kind class @AccessFlag ABSTRACT extends `p5.a` @kind interface {
  `x5.i` `x5.k.a` @AccessFlag PRIVATE_FINAL;
  `x5.i` `x5.k.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`x5.k` v1 @kind this, `byte`[] v2 @kind object) @signature `Lx5/k;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4e4174.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e417a.  v0:= 1I;
  #L4e417c.  call temp:= `g`(v1, v2, v0) @signature `Lx5/k;.g:([BI)Lx5/i;` @kind virtual;
  #L4e4182.  v0:= temp @kind object;
  #L4e4184.  v1.`x5.k.a` @type ^`x5.i` := v0 @kind object;
  #L4e4188.  v0:= 0I;
  #L4e418a.  call temp:= `g`(v1, v2, v0) @signature `Lx5/k;.g:([BI)Lx5/i;` @kind virtual;
  #L4e4190.  v2:= temp @kind object;
  #L4e4192.  v1.`x5.k.b` @type ^`x5.i` := v2 @kind object;
  #L4e4196.  return @kind void;
}
procedure `byte`[] `c`(`x5.k` v4 @kind this, `java.nio.ByteBuffer` v5 @kind object, `byte`[] v6 @kind object) @signature `Lx5/k;.c:(Ljava/nio/ByteBuffer;[B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e3f5c.  call temp:= `remaining`(v5) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4e3f62.  v0:= temp;
  #L4e3f64.  v1:= v4.`x5.k.a` @type ^`x5.i` @kind object;
  #L4e3f68.  call temp:= `g`(v1) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e3f6e.  v1:= temp;
  #L4e3f70.  v2:= 16I;
  #L4e3f74.  v1:= v1 + v2 @kind int;
  #L4e3f76.  if v0 < v1 then goto L4e4012;
  #L4e3f7a.  call temp:= `position`(v5) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4e3f80.  v0:= temp;
  #L4e3f82.  v1:= new `byte`[v2];
  #L4e3f86.  call temp:= `limit`(v5) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4e3f8c.  v3:= temp;
  #L4e3f8e.  v3:= v3 - v2 @kind int;
  #L4e3f90.  call temp:= `position`(v5, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4e3f96.  call temp:= `get`(v5, v1) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e3f9c.  call temp:= `position`(v5, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4e3fa2.  call temp:= `limit`(v5) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4e3fa8.  v3:= temp;
  #L4e3faa.  v3:= v3 - v2 @kind int;
  #L4e3fac.  call temp:= `limit`(v5, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4e3fb2.  v2:= v4.`x5.k.a` @type ^`x5.i` @kind object;
  #L4e3fb6.  call temp:= `g`(v2) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e3fbc.  v2:= temp;
  #L4e3fbe.  v2:= new `byte`[v2];
  #L4e3fc2.  call temp:= `get`(v5, v2) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e3fc8.  if v6 != 0 then goto L4e3fd2;
  #L4e3fcc.  v6:= 0I;
  #L4e3fce.  v6:= new `byte`[v6];
  #L4e3fd2.  call temp:= `e`(v4, v2) @signature `Lx5/k;.e:([B)[B` @kind direct;
  #L4e3fd8.  v2:= temp @kind object;
  #L4e3fda.  call temp:= `f`(v6, v5) @signature `Lx5/k;.f:([BLjava/nio/ByteBuffer;)[B` @kind static;
  #L4e3fe0.  v6:= temp @kind object;
  #L4e3fe2.  call `f`(v2, v6, v1) @signature `Lx5/q;.f:([B[B[B)V` @kind static;
  #L4e3fe8.  call temp:= `position`(v5, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4e3fee.  v6:= v4.`x5.k.a` @type ^`x5.i` @kind object;
  #L4e3ff2.  call temp:= `e`(v6, v5) @signature `Lx5/i;.e:(Ljava/nio/ByteBuffer;)[B` @kind virtual;
  #L4e3ff8.  v5:= temp @kind object;
  #L4e3ffa.  return v5 @kind object;
  #L4e3ffc.  v5:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L4e3ffe.  v6:= new `javax.crypto.AEADBadTagException`;
  #L4e4002.  call temp:= `toString`(v5) @signature `Ljava/security/GeneralSecurityException;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e4008.  v5:= temp @kind object;
  #L4e400a.  call `<init>`(v6, v5) @signature `Ljavax/crypto/AEADBadTagException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e4010.  throw v6;
  #L4e4012.  v5:= new `java.security.GeneralSecurityException`;
  #L4e4016.  v6:= "ciphertext too short" @kind object;
  #L4e401a.  call `<init>`(v5, v6) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e4020.  throw v5;
  catch `java.security.GeneralSecurityException` @[L4e3fd2..L4e3fe8] goto L4e3ffc;
}
procedure `void` `d`(`x5.k` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lx5/k;.d:(Ljava/nio/ByteBuffer;[B[B)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4e41a8.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4e41ae.  v0:= temp;
  #L4e41b0.  v1:= length @variable v5;
  #L4e41b2.  v2:= v3.`x5.k.a` @type ^`x5.i` @kind object;
  #L4e41b6.  call temp:= `g`(v2) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e41bc.  v2:= temp;
  #L4e41be.  v1:= v1 + v2 @kind int;
  #L4e41c0.  v1:= v1 + 16;
  #L4e41c4.  if v0 < v1 then goto L4e4244;
  #L4e41c8.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4e41ce.  v0:= temp;
  #L4e41d0.  v1:= v3.`x5.k.a` @type ^`x5.i` @kind object;
  #L4e41d4.  call `f`(v1, v4, v5) @signature `Lx5/i;.f:(Ljava/nio/ByteBuffer;[B)V` @kind virtual;
  #L4e41da.  call temp:= `position`(v4, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4e41e0.  v5:= v3.`x5.k.a` @type ^`x5.i` @kind object;
  #L4e41e4.  call temp:= `g`(v5) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e41ea.  v5:= temp;
  #L4e41ec.  v5:= new `byte`[v5];
  #L4e41f0.  call temp:= `get`(v4, v5) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e41f6.  call temp:= `limit`(v4) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4e41fc.  v0:= temp;
  #L4e41fe.  v0:= v0 + -16;
  #L4e4202.  call temp:= `limit`(v4, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4e4208.  if v6 != 0 then goto L4e4212;
  #L4e420c.  v6:= 0I;
  #L4e420e.  v6:= new `byte`[v6];
  #L4e4212.  call temp:= `e`(v3, v5) @signature `Lx5/k;.e:([B)[B` @kind direct;
  #L4e4218.  v5:= temp @kind object;
  #L4e421a.  call temp:= `f`(v6, v4) @signature `Lx5/k;.f:([BLjava/nio/ByteBuffer;)[B` @kind static;
  #L4e4220.  v6:= temp @kind object;
  #L4e4222.  call temp:= `a`(v5, v6) @signature `Lx5/q;.a:([B[B)[B` @kind static;
  #L4e4228.  v5:= temp @kind object;
  #L4e422a.  call temp:= `limit`(v4) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4e4230.  v6:= temp;
  #L4e4232.  v6:= v6 + 16;
  #L4e4236.  call temp:= `limit`(v4, v6) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4e423c.  call temp:= `put`(v4, v5) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e4242.  return @kind void;
  #L4e4244.  v4:= new `java.lang.IllegalArgumentException`;
  #L4e4248.  v5:= "Given ByteBuffer output is too small" @kind object;
  #L4e424c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e4252.  throw v4;
}
procedure `byte`[] `e`(`x5.k` v2 @kind this, `byte`[] v3 @kind object) @signature `Lx5/k;.e:([B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4e40b0.  v0:= v2.`x5.k.b` @type ^`x5.i` @kind object;
  #L4e40b4.  v1:= 0I;
  #L4e40b6.  call temp:= `c`(v0, v3, v1) @signature `Lx5/i;.c:([BI)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e40bc.  v3:= temp @kind object;
  #L4e40be.  v0:= 32I;
  #L4e40c2.  v0:= new `byte`[v0];
  #L4e40c6.  call temp:= `get`(v3, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e40cc.  return v0 @kind object;
}
procedure `byte`[] `f`(`byte`[] v5 @kind object, `java.nio.ByteBuffer` v6 @kind object) @signature `Lx5/k;.f:([BLjava/nio/ByteBuffer;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e40e0.  v0:= length @variable v5;
  #L4e40e2.  v0:= v0 %% 16;
  #L4e40e6.  if v0 != 0 then goto L4e40ee;
  #L4e40ea.  v0:= length @variable v5;
  #L4e40ec.  goto L4e40fc;
  #L4e40ee.  v0:= length @variable v5;
  #L4e40f0.  v0:= v0 + 16;
  #L4e40f4.  v1:= length @variable v5;
  #L4e40f6.  v1:= v1 %% 16;
  #L4e40fa.  v0:= v0 - v1 @kind int;
  #L4e40fc.  call temp:= `remaining`(v6) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4e4102.  v1:= temp;
  #L4e4104.  v2:= v1 %% 16;
  #L4e4108.  if v2 != 0 then goto L4e4110;
  #L4e410c.  v3:= v1;
  #L4e410e.  goto L4e4116;
  #L4e4110.  v3:= v1 + 16;
  #L4e4114.  v3:= v3 - v2 @kind int;
  #L4e4116.  v3:= v3 + v0 @kind int;
  #L4e4118.  v2:= v3 + 16;
  #L4e411c.  call temp:= `allocate`(v2) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4e4122.  v2:= temp @kind object;
  #L4e4124.  v4:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L4e4128.  call temp:= `order`(v2, v4) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e412e.  v2:= temp @kind object;
  #L4e4130.  call temp:= `put`(v2, v5) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e4136.  call temp:= `position`(v2, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4e413c.  call temp:= `put`(v2, v6) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e4142.  call temp:= `position`(v2, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4e4148.  v5:= length @variable v5;
  #L4e414a.  v5:= (`long`) v5 @kind i2l;
  #L4e414c.  call temp:= `putLong`(v2, v5) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e4152.  v5:= (`long`) v1 @kind i2l;
  #L4e4154.  call temp:= `putLong`(v2, v5) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e415a.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L4e4160.  v5:= temp @kind object;
  #L4e4162.  return v5 @kind object;
}
procedure `byte`[] `a`(`x5.k` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lx5/k;.a:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e4044.  v0:= length @variable v4;
  #L4e4046.  v1:= v3.`x5.k.a` @type ^`x5.i` @kind object;
  #L4e404a.  call temp:= `g`(v1) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e4050.  v1:= temp;
  #L4e4052.  v2:= 2147483647I;
  #L4e4058.  v2:= v2 - v1 @kind int;
  #L4e405a.  v2:= v2 + -16;
  #L4e405e.  if v0 > v2 then goto L4e408e;
  #L4e4062.  v0:= length @variable v4;
  #L4e4064.  v1:= v3.`x5.k.a` @type ^`x5.i` @kind object;
  #L4e4068.  call temp:= `g`(v1) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e406e.  v1:= temp;
  #L4e4070.  v0:= v0 + v1 @kind int;
  #L4e4072.  v0:= v0 + 16;
  #L4e4076.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4e407c.  v0:= temp @kind object;
  #L4e407e.  call `d`(v3, v0, v4, v5) @signature `Lx5/k;.d:(Ljava/nio/ByteBuffer;[B[B)V` @kind direct;
  #L4e4084.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L4e408a.  v4:= temp @kind object;
  #L4e408c.  return v4 @kind object;
  #L4e408e.  v4:= new `java.security.GeneralSecurityException`;
  #L4e4092.  v5:= "plaintext too long" @kind object;
  #L4e4096.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e409c.  throw v4;
}
procedure `byte`[] `b`(`x5.k` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object) @signature `Lx5/k;.b:([B[B)[B` @AccessFlag PUBLIC {
    temp;

  #L4e3f38.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L4e3f3e.  v1:= temp @kind object;
  #L4e3f40.  call temp:= `c`(v0, v1, v2) @signature `Lx5/k;.c:(Ljava/nio/ByteBuffer;[B)[B` @kind direct;
  #L4e3f46.  v1:= temp @kind object;
  #L4e3f48.  return v1 @kind object;
}
procedure `x5.i` `g`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lx5/k;.g:([BI)Lx5/i;` @AccessFlag ABSTRACT {

  # return;
}
