record `x5.g` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `byte`[] `a`(`byte`[][] v7 @kind object) @signature `Lx5/g;.a:([[B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4e38fc.  v0:= length @variable v7;
  #L4e38fe.  v1:= 0I;
  #L4e3900.  v2:= 0I;
  #L4e3902.  v3:= 0I;
  #L4e3904.  if v2 >= v0 then goto L4e3934;
  #L4e3908.  v4:= v7[v2] @kind object;
  #L4e390c.  v5:= 2147483647I;
  #L4e3912.  v6:= length @variable v4;
  #L4e3914.  v5:= v5 - v6 @kind int;
  #L4e3916.  if v3 > v5 then goto L4e3924;
  #L4e391a.  v4:= length @variable v4;
  #L4e391c.  v3:= v3 + v4 @kind int;
  #L4e391e.  v2:= v2 + 1;
  #L4e3922.  goto L4e3904;
  #L4e3924.  v7:= new `java.security.GeneralSecurityException`;
  #L4e3928.  v0:= "exceeded size limit" @kind object;
  #L4e392c.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e3932.  throw v7;
  #L4e3934.  v0:= new `byte`[v3];
  #L4e3938.  v2:= length @variable v7;
  #L4e393a.  v3:= 0I;
  #L4e393c.  v4:= 0I;
  #L4e393e.  if v3 >= v2 then goto L4e3958;
  #L4e3942.  v5:= v7[v3] @kind object;
  #L4e3946.  v6:= length @variable v5;
  #L4e3948.  call `arraycopy`(v5, v1, v0, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4e394e.  v5:= length @variable v5;
  #L4e3950.  v4:= v4 + v5 @kind int;
  #L4e3952.  v3:= v3 + 1;
  #L4e3956.  goto L4e393e;
  #L4e3958.  return v0 @kind object;
}
procedure `boolean` `b`(`byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lx5/g;.b:([B[B)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e38b0.  v0:= 0I;
  #L4e38b2.  if v5 == 0 then goto L4e38e8;
  #L4e38b6.  if v6 != 0 then goto L4e38bc;
  #L4e38ba.  goto L4e38e8;
  #L4e38bc.  v1:= length @variable v5;
  #L4e38be.  v2:= length @variable v6;
  #L4e38c0.  if v1 == v2 then goto L4e38c6;
  #L4e38c4.  return v0;
  #L4e38c6.  v1:= 0I;
  #L4e38c8.  v2:= 0I;
  #L4e38ca.  v3:= length @variable v5;
  #L4e38cc.  if v1 >= v3 then goto L4e38e2;
  #L4e38d0.  v3:= v5[v1] @kind byte;
  #L4e38d4.  v4:= v6[v1] @kind byte;
  #L4e38d8.  v3:= v3 ^~ v4 @kind int;
  #L4e38da.  v2:= v2 ^| v3 @kind int;
  #L4e38dc.  v1:= v1 + 1;
  #L4e38e0.  goto L4e38ca;
  #L4e38e2.  if v2 != 0 then goto L4e38e8;
  #L4e38e6.  v0:= 1I;
  #L4e38e8.  return v0;
}
procedure `void` `c`(`java.nio.ByteBuffer` v3 @kind object, `java.nio.ByteBuffer` v4 @kind object, `java.nio.ByteBuffer` v5 @kind object, `int` v6 ) @signature `Lx5/g;.c:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;I)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4e3a60.  if v6 < 0 then goto L4e3ab0;
  #L4e3a64.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4e3a6a.  v0:= temp;
  #L4e3a6c.  if v0 < v6 then goto L4e3ab0;
  #L4e3a70.  call temp:= `remaining`(v5) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4e3a76.  v0:= temp;
  #L4e3a78.  if v0 < v6 then goto L4e3ab0;
  #L4e3a7c.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4e3a82.  v0:= temp;
  #L4e3a84.  if v0 < v6 then goto L4e3ab0;
  #L4e3a88.  v0:= 0I;
  #L4e3a8a.  if v0 >= v6 then goto L4e3aae;
  #L4e3a8e.  call temp:= `get`(v4) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L4e3a94.  v1:= temp;
  #L4e3a96.  call temp:= `get`(v5) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L4e3a9c.  v2:= temp;
  #L4e3a9e.  v1:= v1 ^~ v2 @kind int;
  #L4e3aa0.  v1:= (`byte`) v1 @kind i2b;
  #L4e3aa2.  call temp:= `put`(v3, v1) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e3aa8.  v0:= v0 + 1;
  #L4e3aac.  goto L4e3a8a;
  #L4e3aae.  return @kind void;
  #L4e3ab0.  v3:= new `java.lang.IllegalArgumentException`;
  #L4e3ab4.  v4:= "That combination of buffers, offsets and length to xor result in out-of-bond accesses." @kind object;
  #L4e3ab8.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e3abe.  throw v3;
}
procedure `byte`[] `d`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lx5/g;.d:([BI[BII)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e39a4.  if v8 < 0 then goto L4e39e2;
  #L4e39a8.  v0:= length @variable v4;
  #L4e39aa.  v0:= v0 - v8 @kind int;
  #L4e39ac.  if v0 < v5 then goto L4e39e2;
  #L4e39b0.  v0:= length @variable v6;
  #L4e39b2.  v0:= v0 - v8 @kind int;
  #L4e39b4.  if v0 < v7 then goto L4e39e2;
  #L4e39b8.  v0:= new `byte`[v8];
  #L4e39bc.  v1:= 0I;
  #L4e39be.  if v1 >= v8 then goto L4e39e0;
  #L4e39c2.  v2:= v1 + v5 @kind int;
  #L4e39c6.  v2:= v4[v2] @kind byte;
  #L4e39ca.  v3:= v1 + v7 @kind int;
  #L4e39ce.  v3:= v6[v3] @kind byte;
  #L4e39d2.  v2:= v2 ^~ v3 @kind int;
  #L4e39d4.  v2:= (`byte`) v2 @kind i2b;
  #L4e39d6.  v0[v1]:= v2 @kind byte;
  #L4e39da.  v1:= v1 + 1;
  #L4e39de.  goto L4e39be;
  #L4e39e0.  return v0 @kind object;
  #L4e39e2.  v4:= new `java.lang.IllegalArgumentException`;
  #L4e39e6.  v5:= "That combination of buffers, offsets and length to xor result in out-of-bond accesses." @kind object;
  #L4e39ea.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e39f0.  throw v4;
}
procedure `byte`[] `e`(`byte`[] v2 @kind object, `byte`[] v3 @kind object) @signature `Lx5/g;.e:([B[B)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L4e396c.  v0:= length @variable v2;
  #L4e396e.  v1:= length @variable v3;
  #L4e3970.  if v0 != v1 then goto L4e3982;
  #L4e3974.  v0:= length @variable v2;
  #L4e3976.  v1:= 0I;
  #L4e3978.  call temp:= `d`(v2, v1, v3, v1, v0) @signature `Lx5/g;.d:([BI[BII)[B` @kind static;
  #L4e397e.  v2:= temp @kind object;
  #L4e3980.  return v2 @kind object;
  #L4e3982.  v2:= new `java.lang.IllegalArgumentException`;
  #L4e3986.  v3:= "The lengths of x and y should match." @kind object;
  #L4e398a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e3990.  throw v2;
}
procedure `byte`[] `f`(`byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lx5/g;.f:([B[B)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e3a04.  v0:= length @variable v5;
  #L4e3a06.  v1:= length @variable v6;
  #L4e3a08.  if v0 < v1 then goto L4e3a40;
  #L4e3a0c.  v0:= length @variable v5;
  #L4e3a0e.  v1:= length @variable v6;
  #L4e3a10.  v0:= v0 - v1 @kind int;
  #L4e3a12.  v1:= length @variable v5;
  #L4e3a14.  call temp:= `copyOf`(v5, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L4e3a1a.  v5:= temp @kind object;
  #L4e3a1c.  v1:= 0I;
  #L4e3a1e.  v2:= length @variable v6;
  #L4e3a20.  if v1 >= v2 then goto L4e3a3e;
  #L4e3a24.  v2:= v0 + v1 @kind int;
  #L4e3a28.  v3:= v5[v2] @kind byte;
  #L4e3a2c.  v4:= v6[v1] @kind byte;
  #L4e3a30.  v3:= v3 ^~ v4 @kind int;
  #L4e3a32.  v3:= (`byte`) v3 @kind i2b;
  #L4e3a34.  v5[v2]:= v3 @kind byte;
  #L4e3a38.  v1:= v1 + 1;
  #L4e3a3c.  goto L4e3a1e;
  #L4e3a3e.  return v5 @kind object;
  #L4e3a40.  v5:= new `java.lang.IllegalArgumentException`;
  #L4e3a44.  v6:= "xorEnd requires a.length >= b.length" @kind object;
  #L4e3a48.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e3a4e.  throw v5;
}
