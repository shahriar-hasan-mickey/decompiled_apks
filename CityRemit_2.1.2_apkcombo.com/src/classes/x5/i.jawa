record `x5.i` @kind class @AccessFlag ABSTRACT extends `x5.p` @kind interface {
  `int`[] `x5.i.a` @AccessFlag ;
  `int` `x5.i.b` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@x5.i.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx5/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4e3c90.  v0:= 16I;
  #L4e3c94.  v0:= new `byte`[v0];
  #L4e3c98.  goto L4e3cac;
  #L4e3c9e.  call temp:= `m`(v0) @signature `Lx5/i;.m:([B)[I` @kind static;
  #L4e3ca4.  v0:= temp @kind object;
  #L4e3ca6.  `@@x5.i.c` @type ^`int`[] := v0 @kind object;
  #L4e3caa.  return @kind void;
  #L4e3cac.  v0:= (101I, 120I, 112I, 97I, 110I, 100I, 32I, 51I, 50I, 45I, 98I, 121I, 116I, 101I, 32I, 107I) @kind object;
  #L4e3cc3.  goto L4e3c9e;
}
procedure `void` `<init>`(`x5.i` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lx5/i;.<init>:([BI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e3cd4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e3cda.  v0:= length @variable v3;
  #L4e3cdc.  v1:= 32I;
  #L4e3ce0.  if v0 != v1 then goto L4e3cf6;
  #L4e3ce4.  call temp:= `m`(v3) @signature `Lx5/i;.m:([B)[I` @kind static;
  #L4e3cea.  v3:= temp @kind object;
  #L4e3cec.  v2.`x5.i.a` @type ^`int`[] := v3 @kind object;
  #L4e3cf0.  v2.`x5.i.b` @type ^`int` := v4;
  #L4e3cf4.  return @kind void;
  #L4e3cf6.  v3:= new `java.security.InvalidKeyException`;
  #L4e3cfa.  v4:= "The key length in bytes must be 32." @kind object;
  #L4e3cfe.  call `<init>`(v3, v4) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e3d04.  throw v3;
}
procedure `void` `h`(`x5.i` v6 @kind this, `byte`[] v7 @kind object, `java.nio.ByteBuffer` v8 @kind object, `java.nio.ByteBuffer` v9 @kind object) @signature `Lx5/i;.h:([BLjava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e3d78.  call temp:= `remaining`(v9) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4e3d7e.  v0:= temp;
  #L4e3d80.  v1:= v0 / 64;
  #L4e3d84.  v1:= v1 + 1;
  #L4e3d88.  v2:= 0I;
  #L4e3d8a.  if v2 >= v1 then goto L4e3dc0;
  #L4e3d8e.  v3:= v6.`x5.i.b` @type ^`int`;
  #L4e3d92.  v3:= v3 + v2 @kind int;
  #L4e3d94.  call temp:= `c`(v6, v7, v3) @signature `Lx5/i;.c:([BI)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e3d9a.  v3:= temp @kind object;
  #L4e3d9c.  v4:= v1 + -1;
  #L4e3da0.  v5:= 64I;
  #L4e3da4.  if v2 != v4 then goto L4e3db4;
  #L4e3da8.  v4:= v0 %% 64;
  #L4e3dac.  call `c`(v8, v9, v3, v4) @signature `Lx5/g;.c:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;I)V` @kind static;
  #L4e3db2.  goto L4e3dba;
  #L4e3db4.  call `c`(v8, v9, v3, v5) @signature `Lx5/g;.c:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;I)V` @kind static;
  #L4e3dba.  v2:= v2 + 1;
  #L4e3dbe.  goto L4e3d8a;
  #L4e3dc0.  return @kind void;
}
procedure `void` `i`(`int`[] v2 @kind object, `int` v3 , `int` v4 , `int` v5 , `int` v6 ) @signature `Lx5/i;.i:([IIIII)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L4e3dd4.  v0:= v2[v3];
  #L4e3dd8.  v1:= v2[v4];
  #L4e3ddc.  v0:= v0 + v1 @kind int;
  #L4e3dde.  v2[v3]:= v0;
  #L4e3de2.  v0:= v2[v6];
  #L4e3de6.  v1:= v2[v3];
  #L4e3dea.  v0:= v0 ^~ v1 @kind int;
  #L4e3dec.  v1:= 16I;
  #L4e3df0.  call temp:= `j`(v0, v1) @signature `Lx5/i;.j:(II)I` @kind static;
  #L4e3df6.  v0:= temp;
  #L4e3df8.  v2[v6]:= v0;
  #L4e3dfc.  v0:= v2[v5];
  #L4e3e00.  v1:= v2[v6];
  #L4e3e04.  v0:= v0 + v1 @kind int;
  #L4e3e06.  v2[v5]:= v0;
  #L4e3e0a.  v0:= v2[v4];
  #L4e3e0e.  v1:= v2[v5];
  #L4e3e12.  v0:= v0 ^~ v1 @kind int;
  #L4e3e14.  v1:= 12I;
  #L4e3e18.  call temp:= `j`(v0, v1) @signature `Lx5/i;.j:(II)I` @kind static;
  #L4e3e1e.  v0:= temp;
  #L4e3e20.  v2[v4]:= v0;
  #L4e3e24.  v0:= v2[v3];
  #L4e3e28.  v1:= v2[v4];
  #L4e3e2c.  v0:= v0 + v1 @kind int;
  #L4e3e2e.  v2[v3]:= v0;
  #L4e3e32.  v0:= v2[v6];
  #L4e3e36.  v3:= v2[v3];
  #L4e3e3a.  v3:= v3 ^~ v0 @kind int;
  #L4e3e3c.  v0:= 8I;
  #L4e3e40.  call temp:= `j`(v3, v0) @signature `Lx5/i;.j:(II)I` @kind static;
  #L4e3e46.  v3:= temp;
  #L4e3e48.  v2[v6]:= v3;
  #L4e3e4c.  v3:= v2[v5];
  #L4e3e50.  v6:= v2[v6];
  #L4e3e54.  v3:= v3 + v6 @kind int;
  #L4e3e56.  v2[v5]:= v3;
  #L4e3e5a.  v3:= v2[v4];
  #L4e3e5e.  v5:= v2[v5];
  #L4e3e62.  v3:= v3 ^~ v5 @kind int;
  #L4e3e64.  v5:= 7I;
  #L4e3e66.  call temp:= `j`(v3, v5) @signature `Lx5/i;.j:(II)I` @kind static;
  #L4e3e6c.  v3:= temp;
  #L4e3e6e.  v2[v4]:= v3;
  #L4e3e72.  return @kind void;
}
procedure `int` `j`(`int` v1 , `int` v2 ) @signature `Lx5/i;.j:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4e3bb8.  v0:= v1 ^< v2 @kind int;
  #L4e3bbc.  v2:= -v2 @kind int;
  #L4e3bbe.  v1:= v1 ^>> v2 @kind int;
  #L4e3bc0.  v1:= v1 ^| v0 @kind int;
  #L4e3bc2.  return v1;
}
procedure `void` `k`(`int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Lx5/i;.k:([I[I)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4e3e84.  v0:= `@@x5.i.c` @type ^`int`[] @kind object;
  #L4e3e88.  v1:= length @variable v0;
  #L4e3e8a.  v2:= 0I;
  #L4e3e8c.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4e3e92.  v0:= length @variable v0;
  #L4e3e94.  v1:= 8I;
  #L4e3e98.  call `arraycopy`(v4, v2, v3, v0, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4e3e9e.  return @kind void;
}
procedure `void` `l`(`int`[] v16 @kind object) @signature `Lx5/i;.l:([I)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L4e3eb0.  v0:= v16 @kind object;
  #L4e3eb4.  v1:= 0I;
  #L4e3eb6.  v2:= 0I;
  #L4e3eb8.  v3:= 10I;
  #L4e3ebc.  if v2 >= v3 then goto L4e3f26;
  #L4e3ec0.  v4:= 4I;
  #L4e3ec2.  v5:= 8I;
  #L4e3ec6.  v6:= 12I;
  #L4e3eca.  call `i`(v0, v1, v4, v5, v6) @signature `Lx5/i;.i:([IIIII)V` @kind static;
  #L4e3ed0.  v7:= 1I;
  #L4e3ed2.  v8:= 5I;
  #L4e3ed4.  v9:= 9I;
  #L4e3ed8.  v10:= 13I;
  #L4e3edc.  call `i`(v0, v7, v8, v9, v10) @signature `Lx5/i;.i:([IIIII)V` @kind static;
  #L4e3ee2.  v11:= 2I;
  #L4e3ee4.  v12:= 6I;
  #L4e3ee6.  v13:= 14I;
  #L4e3eea.  call `i`(v0, v11, v12, v3, v13) @signature `Lx5/i;.i:([IIIII)V` @kind static;
  #L4e3ef0.  v14:= 3I;
  #L4e3ef2.  v15:= 7I;
  #L4e3ef4.  v4:= 11I;
  #L4e3ef8.  v9:= 15I;
  #L4e3efc.  call `i`(v0, v14, v15, v4, v9) @signature `Lx5/i;.i:([IIIII)V` @kind static;
  #L4e3f02.  call `i`(v0, v1, v8, v3, v9) @signature `Lx5/i;.i:([IIIII)V` @kind static;
  #L4e3f08.  call `i`(v0, v7, v12, v4, v6) @signature `Lx5/i;.i:([IIIII)V` @kind static;
  #L4e3f0e.  call `i`(v0, v11, v15, v5, v10) @signature `Lx5/i;.i:([IIIII)V` @kind static;
  #L4e3f14.  v3:= 9I;
  #L4e3f18.  v4:= 4I;
  #L4e3f1a.  call `i`(v0, v14, v4, v3, v13) @signature `Lx5/i;.i:([IIIII)V` @kind static;
  #L4e3f20.  v2:= v2 + 1;
  #L4e3f24.  goto L4e3eb8;
  #L4e3f26.  return @kind void;
}
procedure `int`[] `m`(`byte`[] v1 @kind object) @signature `Lx5/i;.m:([B)[I` @AccessFlag STATIC {
    temp;
    v0;

  #L4e3bd4.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L4e3bda.  v1:= temp @kind object;
  #L4e3bdc.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L4e3be0.  call temp:= `order`(v1, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e3be6.  v1:= temp @kind object;
  #L4e3be8.  call temp:= `asIntBuffer`(v1) @signature `Ljava/nio/ByteBuffer;.asIntBuffer:()Ljava/nio/IntBuffer;` @kind virtual;
  #L4e3bee.  v1:= temp @kind object;
  #L4e3bf0.  call temp:= `remaining`(v1) @signature `Ljava/nio/IntBuffer;.remaining:()I` @kind virtual;
  #L4e3bf6.  v0:= temp;
  #L4e3bf8.  v0:= new `int`[v0];
  #L4e3bfc.  call temp:= `get`(v1, v0) @signature `Ljava/nio/IntBuffer;.get:([I)Ljava/nio/IntBuffer;` @kind virtual;
  #L4e3c02.  return v0 @kind object;
}
procedure `byte`[] `a`(`x5.i` v3 @kind this, `byte`[] v4 @kind object) @signature `Lx5/i;.a:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e3b5c.  v0:= length @variable v4;
  #L4e3b5e.  call temp:= `g`(v3) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e3b64.  v1:= temp;
  #L4e3b66.  v2:= 2147483647I;
  #L4e3b6c.  v2:= v2 - v1 @kind int;
  #L4e3b6e.  if v0 > v2 then goto L4e3b96;
  #L4e3b72.  call temp:= `g`(v3) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e3b78.  v0:= temp;
  #L4e3b7a.  v1:= length @variable v4;
  #L4e3b7c.  v0:= v0 + v1 @kind int;
  #L4e3b7e.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4e3b84.  v0:= temp @kind object;
  #L4e3b86.  call `f`(v3, v0, v4) @signature `Lx5/i;.f:(Ljava/nio/ByteBuffer;[B)V` @kind virtual;
  #L4e3b8c.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L4e3b92.  v4:= temp @kind object;
  #L4e3b94.  return v4 @kind object;
  #L4e3b96.  v4:= new `java.security.GeneralSecurityException`;
  #L4e3b9a.  v0:= "plaintext too long" @kind object;
  #L4e3b9e.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e3ba4.  throw v4;
}
procedure `byte`[] `b`(`x5.i` v0 @kind this, `byte`[] v1 @kind object) @signature `Lx5/i;.b:([B)[B` @AccessFlag PUBLIC {
    temp;

  #L4e3ad0.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L4e3ad6.  v1:= temp @kind object;
  #L4e3ad8.  call temp:= `e`(v0, v1) @signature `Lx5/i;.e:(Ljava/nio/ByteBuffer;)[B` @kind virtual;
  #L4e3ade.  v1:= temp @kind object;
  #L4e3ae0.  return v1 @kind object;
}
procedure `java.nio.ByteBuffer` `c`(`x5.i` v4 @kind this, `byte`[] v5 @kind object, `int` v6 ) @signature `Lx5/i;.c:([BI)Ljava/nio/ByteBuffer;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e3c14.  call temp:= `m`(v5) @signature `Lx5/i;.m:([B)[I` @kind static;
  #L4e3c1a.  v5:= temp @kind object;
  #L4e3c1c.  call temp:= `d`(v4, v5, v6) @signature `Lx5/i;.d:([II)[I` @kind virtual;
  #L4e3c22.  v5:= temp @kind object;
  #L4e3c24.  call temp:= `clone`(v5) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L4e3c2a.  v6:= temp @kind object;
  #L4e3c2c.  v6:= (`int`[]) v6 @kind object;
  #L4e3c30.  call `l`(v6) @signature `Lx5/i;.l:([I)V` @kind static;
  #L4e3c36.  v0:= 0I;
  #L4e3c38.  v1:= 0I;
  #L4e3c3a.  v2:= length @variable v5;
  #L4e3c3c.  if v1 >= v2 then goto L4e3c54;
  #L4e3c40.  v2:= v5[v1];
  #L4e3c44.  v3:= v6[v1];
  #L4e3c48.  v2:= v2 + v3 @kind int;
  #L4e3c4a.  v5[v1]:= v2;
  #L4e3c4e.  v1:= v1 + 1;
  #L4e3c52.  goto L4e3c3a;
  #L4e3c54.  v6:= 64I;
  #L4e3c58.  call temp:= `allocate`(v6) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4e3c5e.  v6:= temp @kind object;
  #L4e3c60.  v1:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L4e3c64.  call temp:= `order`(v6, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e3c6a.  v6:= temp @kind object;
  #L4e3c6c.  call temp:= `asIntBuffer`(v6) @signature `Ljava/nio/ByteBuffer;.asIntBuffer:()Ljava/nio/IntBuffer;` @kind virtual;
  #L4e3c72.  v1:= temp @kind object;
  #L4e3c74.  v2:= 16I;
  #L4e3c78.  call temp:= `put`(v1, v5, v0, v2) @signature `Ljava/nio/IntBuffer;.put:([III)Ljava/nio/IntBuffer;` @kind virtual;
  #L4e3c7e.  return v6 @kind object;
}
procedure `int`[] `d`(`int`[] v0 @kind object, `int` v1 ) @signature `Lx5/i;.d:([II)[I` @AccessFlag ABSTRACT {

  # return;
}
procedure `byte`[] `e`(`x5.i` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object) @signature `Lx5/i;.e:(Ljava/nio/ByteBuffer;)[B` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e3af4.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4e3afa.  v0:= temp;
  #L4e3afc.  call temp:= `g`(v2) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e3b02.  v1:= temp;
  #L4e3b04.  if v0 < v1 then goto L4e3b3a;
  #L4e3b08.  call temp:= `g`(v2) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e3b0e.  v0:= temp;
  #L4e3b10.  v0:= new `byte`[v0];
  #L4e3b14.  call temp:= `get`(v3, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e3b1a.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4e3b20.  v1:= temp;
  #L4e3b22.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4e3b28.  v1:= temp @kind object;
  #L4e3b2a.  call `h`(v2, v0, v1, v3) @signature `Lx5/i;.h:([BLjava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V` @kind direct;
  #L4e3b30.  call temp:= `array`(v1) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L4e3b36.  v3:= temp @kind object;
  #L4e3b38.  return v3 @kind object;
  #L4e3b3a.  v3:= new `java.security.GeneralSecurityException`;
  #L4e3b3e.  v0:= "ciphertext too short" @kind object;
  #L4e3b42.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e3b48.  throw v3;
}
procedure `void` `f`(`x5.i` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object, `byte`[] v4 @kind object) @signature `Lx5/i;.f:(Ljava/nio/ByteBuffer;[B)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e3d18.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4e3d1e.  v0:= temp;
  #L4e3d20.  call temp:= `g`(v2) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e3d26.  v1:= temp;
  #L4e3d28.  v0:= v0 - v1 @kind int;
  #L4e3d2a.  v1:= length @variable v4;
  #L4e3d2c.  if v0 < v1 then goto L4e3d56;
  #L4e3d30.  call temp:= `g`(v2) @signature `Lx5/i;.g:()I` @kind virtual;
  #L4e3d36.  v0:= temp;
  #L4e3d38.  call temp:= `c`(v0) @signature `Lx5/u;.c:(I)[B` @kind static;
  #L4e3d3e.  v0:= temp @kind object;
  #L4e3d40.  call temp:= `put`(v3, v0) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4e3d46.  call temp:= `wrap`(v4) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L4e3d4c.  v4:= temp @kind object;
  #L4e3d4e.  call `h`(v2, v0, v3, v4) @signature `Lx5/i;.h:([BLjava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V` @kind direct;
  #L4e3d54.  return @kind void;
  #L4e3d56.  v3:= new `java.lang.IllegalArgumentException`;
  #L4e3d5a.  v4:= "Given ByteBuffer output is too small" @kind object;
  #L4e3d5e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e3d64.  throw v3;
}
procedure `int` `g`() @signature `Lx5/i;.g:()I` @AccessFlag ABSTRACT {

  # return;
}
