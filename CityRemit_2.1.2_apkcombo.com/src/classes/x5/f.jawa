record `x5.f` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.nio.charset.Charset` `@@x5.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx5/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4e388c.  v0:= "UTF-8" @kind object;
  #L4e3890.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L4e3896.  v0:= temp @kind object;
  #L4e3898.  `@@x5.f.a` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L4e389c.  return @kind void;
}
procedure `byte`[] `a`(`java.lang.String` v1 @kind object, `int` v2 ) @signature `Lx5/f;.a:(Ljava/lang/String;I)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4e374c.  v0:= `@@x5.f.a` @type ^`java.nio.charset.Charset` @kind object;
  #L4e3750.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L4e3756.  v1:= temp @kind object;
  #L4e3758.  call temp:= `b`(v1, v2) @signature `Lx5/f;.b:([BI)[B` @kind static;
  #L4e375e.  v1:= temp @kind object;
  #L4e3760.  return v1 @kind object;
}
procedure `byte`[] `b`(`byte`[] v2 @kind object, `int` v3 ) @signature `Lx5/f;.b:([BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4e36c8.  v0:= length @variable v2;
  #L4e36ca.  v1:= 0I;
  #L4e36cc.  call temp:= `c`(v2, v1, v0, v3) @signature `Lx5/f;.c:([BIII)[B` @kind static;
  #L4e36d2.  v2:= temp @kind object;
  #L4e36d4.  return v2 @kind object;
}
procedure `byte`[] `c`(`byte`[] v2 @kind object, `int` v3 , `int` v4 , `int` v5 ) @signature `Lx5/f;.c:([BIII)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4e36e8.  v0:= new `x5.f$b`;
  #L4e36ec.  v1:= v4 * 3;
  #L4e36f0.  v1:= v1 / 4;
  #L4e36f4.  v1:= new `byte`[v1];
  #L4e36f8.  call `<init>`(v0, v5, v1) @signature `Lx5/f$b;.<init>:(I[B)V` @kind direct;
  #L4e36fe.  v5:= 1I;
  #L4e3700.  call temp:= `a`(v0, v2, v3, v4, v5) @signature `Lx5/f$b;.a:([BIIZ)Z` @kind virtual;
  #L4e3706.  v2:= temp;
  #L4e3708.  if v2 == 0 then goto L4e372a;
  #L4e370c.  v2:= v0.`x5.f$a.b` @type ^`int`;
  #L4e3710.  v3:= v0.`x5.f$a.a` @type ^`byte`[] @kind object;
  #L4e3714.  v4:= length @variable v3;
  #L4e3716.  if v2 != v4 then goto L4e371c;
  #L4e371a.  return v3 @kind object;
  #L4e371c.  v4:= new `byte`[v2];
  #L4e3720.  v5:= 0I;
  #L4e3722.  call `arraycopy`(v3, v5, v4, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4e3728.  return v4 @kind object;
  #L4e372a.  v2:= new `java.lang.IllegalArgumentException`;
  #L4e372e.  v3:= "bad base-64" @kind object;
  #L4e3732.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e3738.  throw v2;
}
procedure `java.lang.String` `d`(`byte`[] v1 @kind object) @signature `Lx5/f;.d:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4e3828.  v0:= 2I;
  #L4e382a.  call temp:= `g`(v1, v0) @signature `Lx5/f;.g:([BI)Ljava/lang/String;` @kind static;
  #L4e3830.  v1:= temp @kind object;
  #L4e3832.  return v1 @kind object;
}
procedure `byte`[] `e`(`byte`[] v2 @kind object, `int` v3 ) @signature `Lx5/f;.e:([BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4e3774.  v0:= length @variable v2;
  #L4e3776.  v1:= 0I;
  #L4e3778.  call temp:= `f`(v2, v1, v0, v3) @signature `Lx5/f;.f:([BIII)[B` @kind static;
  #L4e377e.  v2:= temp @kind object;
  #L4e3780.  return v2 @kind object;
}
procedure `byte`[] `f`(`byte`[] v5 @kind object, `int` v6 , `int` v7 , `int` v8 ) @signature `Lx5/f;.f:([BIII)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e3794.  v0:= new `x5.f$c`;
  #L4e3798.  v1:= 0I;
  #L4e379a.  call `<init>`(v0, v8, v1) @signature `Lx5/f$c;.<init>:(I[B)V` @kind direct;
  #L4e37a0.  v8:= v7 / 3;
  #L4e37a4.  v8:= v8 * 4;
  #L4e37a8.  v1:= v0.`x5.f$c.f` @type ^`boolean` @kind boolean;
  #L4e37ac.  v2:= 2I;
  #L4e37ae.  v3:= 1I;
  #L4e37b0.  if v1 == 0 then goto L4e37c2;
  #L4e37b4.  v1:= v7 %% 3;
  #L4e37b8.  if v1 <= 0 then goto L4e37da;
  #L4e37bc.  v8:= v8 + 4;
  #L4e37c0.  goto L4e37da;
  #L4e37c2.  v1:= v7 %% 3;
  #L4e37c6.  if v1 == v3 then goto L4e37d6;
  #L4e37ca.  if v1 == v2 then goto L4e37d0;
  #L4e37ce.  goto L4e37da;
  #L4e37d0.  v8:= v8 + 3;
  #L4e37d4.  goto L4e37da;
  #L4e37d6.  v8:= v8 + 2;
  #L4e37da.  v1:= v0.`x5.f$c.g` @type ^`boolean` @kind boolean;
  #L4e37de.  if v1 == 0 then goto L4e3802;
  #L4e37e2.  if v7 <= 0 then goto L4e3802;
  #L4e37e6.  v1:= v7 + -1;
  #L4e37ea.  v1:= v1 / 57;
  #L4e37ee.  v1:= v1 + v3 @kind int;
  #L4e37f0.  v4:= v0.`x5.f$c.h` @type ^`boolean` @kind boolean;
  #L4e37f4.  if v4 == 0 then goto L4e37fa;
  #L4e37f8.  goto L4e37fc;
  #L4e37fa.  v2:= 1I;
  #L4e37fc.  v1:= v1 * v2 @kind int;
  #L4e3800.  v8:= v8 + v1 @kind int;
  #L4e3802.  v8:= new `byte`[v8];
  #L4e3806.  v0.`x5.f$a.a` @type ^`byte`[] := v8 @kind object;
  #L4e380a.  call temp:= `a`(v0, v5, v6, v7, v3) @signature `Lx5/f$c;.a:([BIIZ)Z` @kind virtual;
  #L4e3810.  v5:= v0.`x5.f$a.a` @type ^`byte`[] @kind object;
  #L4e3814.  return v5 @kind object;
}
procedure `java.lang.String` `g`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lx5/f;.g:([BI)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4e3844.  v0:= new `java.lang.String`;
  #L4e3848.  call temp:= `e`(v1, v2) @signature `Lx5/f;.e:([BI)[B` @kind static;
  #L4e384e.  v1:= temp @kind object;
  #L4e3850.  v2:= "US-ASCII" @kind object;
  #L4e3854.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L4e385a.  return v0 @kind object;
  #L4e385c.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L4e385e.  v2:= new `java.lang.AssertionError`;
  #L4e3862.  call `<init>`(v2, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4e3868.  throw v2;
  catch `java.io.UnsupportedEncodingException` @[L4e3844..L4e385a] goto L4e385c;
}
