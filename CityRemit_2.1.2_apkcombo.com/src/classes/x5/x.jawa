record `x5.x` @kind class @AccessFlag  extends `x5.i` @kind class {
}
procedure `void` `<init>`(`x5.x` v0 @kind this, `byte`[] v1 @kind object, `int` v2 ) @signature `Lx5/x;.<init>:([BI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e587c.  call `<init>`(v0, v1, v2) @signature `Lx5/i;.<init>:([BI)V` @kind direct;
  #L4e5882.  return @kind void;
}
procedure `int`[] `n`(`int`[] v4 @kind object, `int`[] v5 @kind object) @signature `Lx5/x;.n:([I[I)[I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e57e8.  v0:= 16I;
  #L4e57ec.  v0:= new `int`[v0];
  #L4e57f0.  call `k`(v0, v4) @signature `Lx5/i;.k:([I[I)V` @kind static;
  #L4e57f6.  v4:= 0I;
  #L4e57f8.  v4:= v5[v4];
  #L4e57fc.  v1:= 12I;
  #L4e5800.  v0[v1]:= v4;
  #L4e5804.  v4:= 1I;
  #L4e5806.  v4:= v5[v4];
  #L4e580a.  v2:= 13I;
  #L4e580e.  v0[v2]:= v4;
  #L4e5812.  v4:= 2I;
  #L4e5814.  v4:= v5[v4];
  #L4e5818.  v3:= 14I;
  #L4e581c.  v0[v3]:= v4;
  #L4e5820.  v4:= 3I;
  #L4e5822.  v4:= v5[v4];
  #L4e5826.  v5:= 15I;
  #L4e582a.  v0[v5]:= v4;
  #L4e582e.  call `l`(v0) @signature `Lx5/i;.l:([I)V` @kind static;
  #L4e5834.  v4:= v0[v1];
  #L4e5838.  v1:= 4I;
  #L4e583a.  v0[v1]:= v4;
  #L4e583e.  v4:= v0[v2];
  #L4e5842.  v1:= 5I;
  #L4e5844.  v0[v1]:= v4;
  #L4e5848.  v4:= v0[v3];
  #L4e584c.  v1:= 6I;
  #L4e584e.  v0[v1]:= v4;
  #L4e5852.  v4:= v0[v5];
  #L4e5856.  v5:= 7I;
  #L4e5858.  v0[v5]:= v4;
  #L4e585c.  v4:= 8I;
  #L4e5860.  call temp:= `copyOf`(v0, v4) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L4e5866.  v4:= temp @kind object;
  #L4e5868.  return v4 @kind object;
}
procedure `int`[] `d`(`x5.x` v4 @kind this, `int`[] v5 @kind object, `int` v6 ) @signature `Lx5/x;.d:([II)[I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e574c.  v0:= length @variable v5;
  #L4e574e.  call temp:= `g`(v4) @signature `Lx5/x;.g:()I` @kind virtual;
  #L4e5754.  v1:= temp;
  #L4e5756.  v2:= 4I;
  #L4e5758.  v1:= v1 / v2 @kind int;
  #L4e575a.  v3:= 0I;
  #L4e575c.  if v0 != v1 then goto L4e57a6;
  #L4e5760.  v0:= 16I;
  #L4e5764.  v0:= new `int`[v0];
  #L4e5768.  v1:= v4.`x5.i.a` @type ^`int`[] @kind object;
  #L4e576c.  call temp:= `n`(v1, v5) @signature `Lx5/x;.n:([I[I)[I` @kind static;
  #L4e5772.  v1:= temp @kind object;
  #L4e5774.  call `k`(v0, v1) @signature `Lx5/i;.k:([I[I)V` @kind static;
  #L4e577a.  v1:= 12I;
  #L4e577e.  v0[v1]:= v6;
  #L4e5782.  v6:= 13I;
  #L4e5786.  v0[v6]:= v3;
  #L4e578a.  v6:= 14I;
  #L4e578e.  v1:= v5[v2];
  #L4e5792.  v0[v6]:= v1;
  #L4e5796.  v6:= 15I;
  #L4e579a.  v1:= 5I;
  #L4e579c.  v5:= v5[v1];
  #L4e57a0.  v0[v6]:= v5;
  #L4e57a4.  return v0 @kind object;
  #L4e57a6.  v6:= new `java.lang.IllegalArgumentException`;
  #L4e57aa.  v0:= 1I;
  #L4e57ac.  v0:= new `java.lang.Object`[v0];
  #L4e57b0.  v5:= length @variable v5;
  #L4e57b2.  v5:= v5 * 32;
  #L4e57b6.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4e57bc.  v5:= temp @kind object;
  #L4e57be.  v0[v3]:= v5 @kind object;
  #L4e57c2.  v5:= "XChaCha20 uses 192-bit nonces, but got a %d-bit nonce" @kind object;
  #L4e57c6.  call temp:= `format`(v5, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4e57cc.  v5:= temp @kind object;
  #L4e57ce.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e57d4.  throw v6;
}
procedure `int` `g`(`x5.x` v1 @kind this) @signature `Lx5/x;.g:()I` @AccessFlag  {
    temp;
    v0;

  #L4e5734.  v0:= 24I;
  #L4e5738.  return v0;
}
