record `x5.o` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `byte`[] `a`(`java.lang.String` v6 @kind object) @signature `Lx5/o;.a:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e4948.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4e494e.  v0:= temp;
  #L4e4950.  v0:= v0 %% 2;
  #L4e4954.  if v0 != 0 then goto L4e49c8;
  #L4e4958.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4e495e.  v0:= temp;
  #L4e4960.  v0:= v0 / 2;
  #L4e4964.  v1:= new `byte`[v0];
  #L4e4968.  v2:= 0I;
  #L4e496a.  if v2 >= v0 then goto L4e49c6;
  #L4e496e.  v3:= v2 * 2;
  #L4e4972.  call temp:= `charAt`(v6, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4e4978.  v4:= temp;
  #L4e497a.  v5:= 16I;
  #L4e497e.  call temp:= `digit`(v4, v5) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L4e4984.  v4:= temp;
  #L4e4986.  v3:= v3 + 1;
  #L4e498a.  call temp:= `charAt`(v6, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4e4990.  v3:= temp;
  #L4e4992.  call temp:= `digit`(v3, v5) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L4e4998.  v3:= temp;
  #L4e499a.  v5:= -1I;
  #L4e499c.  if v4 == v5 then goto L4e49b6;
  #L4e49a0.  if v3 == v5 then goto L4e49b6;
  #L4e49a4.  v4:= v4 * 16;
  #L4e49a8.  v4:= v4 + v3 @kind int;
  #L4e49aa.  v3:= (`byte`) v4 @kind i2b;
  #L4e49ac.  v1[v2]:= v3 @kind byte;
  #L4e49b0.  v2:= v2 + 1;
  #L4e49b4.  goto L4e496a;
  #L4e49b6.  v6:= new `java.lang.IllegalArgumentException`;
  #L4e49ba.  v0:= "input is not hexadecimal" @kind object;
  #L4e49be.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e49c4.  throw v6;
  #L4e49c6.  return v1 @kind object;
  #L4e49c8.  v6:= new `java.lang.IllegalArgumentException`;
  #L4e49cc.  v0:= "Expected a string of even length" @kind object;
  #L4e49d0.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e49d6.  throw v6;
}
procedure `java.lang.String` `b`(`byte`[] v6 @kind object) @signature `Lx5/o;.b:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e49e8.  v0:= new `java.lang.StringBuilder`;
  #L4e49ec.  v1:= length @variable v6;
  #L4e49ee.  v1:= v1 * 2;
  #L4e49f2.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L4e49f8.  v1:= length @variable v6;
  #L4e49fa.  v2:= 0I;
  #L4e49fc.  if v2 >= v1 then goto L4e4a36;
  #L4e4a00.  v3:= v6[v2] @kind byte;
  #L4e4a04.  v3:= v3 ^& 255;
  #L4e4a08.  v4:= v3 / 16;
  #L4e4a0c.  v5:= "0123456789abcdef" @kind object;
  #L4e4a10.  call temp:= `charAt`(v5, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4e4a16.  v4:= temp;
  #L4e4a18.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e4a1e.  v3:= v3 %% 16;
  #L4e4a22.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4e4a28.  v3:= temp;
  #L4e4a2a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e4a30.  v2:= v2 + 1;
  #L4e4a34.  goto L4e49fc;
  #L4e4a36.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e4a3c.  v6:= temp @kind object;
  #L4e4a3e.  return v6 @kind object;
}
