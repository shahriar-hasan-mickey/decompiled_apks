record `x5.r` @kind class @AccessFlag PUBLIC_FINAL extends `v5.a` @kind interface {
  `javax.crypto.SecretKey` `x5.r.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `x5.r.b` @AccessFlag PRIVATE;
  `byte`[] `x5.r.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x5.r` v2 @kind this, `byte`[] v3 @kind object) @signature `Lx5/r;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e5088.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e508e.  v0:= length @variable v3;
  #L4e5090.  call `a`(v0) @signature `Lx5/w;.a:(I)V` @kind static;
  #L4e5096.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L4e509a.  v1:= "AES" @kind object;
  #L4e509e.  call `<init>`(v0, v3, v1) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L4e50a4.  v2.`x5.r.a` @type ^`javax.crypto.SecretKey` := v0 @kind object;
  #L4e50a8.  call `b`(v2) @signature `Lx5/r;.b:()V` @kind direct;
  #L4e50ae.  return @kind void;
}
procedure `void` `b`(`x5.r` v3 @kind this) @signature `Lx5/r;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4e50c0.  call temp:= `c`() @signature `Lx5/r;.c:()Ljavax/crypto/Cipher;` @kind static;
  #L4e50c6.  v0:= temp @kind object;
  #L4e50c8.  v1:= v3.`x5.r.a` @type ^`javax.crypto.SecretKey` @kind object;
  #L4e50cc.  v2:= 1I;
  #L4e50ce.  call `init`(v0, v2, v1) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L4e50d4.  v1:= 16I;
  #L4e50d8.  v1:= new `byte`[v1];
  #L4e50dc.  call temp:= `doFinal`(v0, v1) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L4e50e2.  v0:= temp @kind object;
  #L4e50e4.  call temp:= `b`(v0) @signature `Lx5/e;.b:([B)[B` @kind static;
  #L4e50ea.  v0:= temp @kind object;
  #L4e50ec.  v3.`x5.r.b` @type ^`byte`[] := v0 @kind object;
  #L4e50f0.  call temp:= `b`(v0) @signature `Lx5/e;.b:([B)[B` @kind static;
  #L4e50f6.  v0:= temp @kind object;
  #L4e50f8.  v3.`x5.r.c` @type ^`byte`[] := v0 @kind object;
  #L4e50fc.  return @kind void;
}
procedure `javax.crypto.Cipher` `c`() @signature `Lx5/r;.c:()Ljavax/crypto/Cipher;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4e5060.  v0:= `@@x5.m.f` @type ^`x5.m` @kind object;
  #L4e5064.  v1:= "AES/ECB/NoPadding" @kind object;
  #L4e5068.  call temp:= `a`(v0, v1) @signature `Lx5/m;.a:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L4e506e.  v0:= temp @kind object;
  #L4e5070.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L4e5074.  return v0 @kind object;
}
procedure `byte`[] `a`(`x5.r` v9 @kind this, `byte`[] v10 @kind object, `int` v11 ) @signature `Lx5/r;.a:([BI)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4e4f74.  v0:= 16I;
  #L4e4f78.  if v11 > v0 then goto L4e5040;
  #L4e4f7c.  call temp:= `c`() @signature `Lx5/r;.c:()Ljavax/crypto/Cipher;` @kind static;
  #L4e4f82.  v1:= temp @kind object;
  #L4e4f84.  v2:= v9.`x5.r.a` @type ^`javax.crypto.SecretKey` @kind object;
  #L4e4f88.  v3:= 1I;
  #L4e4f8a.  call `init`(v1, v3, v2) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L4e4f90.  v2:= length @variable v10;
  #L4e4f92.  v4:= (`double`) v2 @kind i2d;
  #L4e4f94.  v6:= 16.0D;
  #L4e4f98.  v4:= v4 / v6 @kind double;
  #L4e4f9a.  call temp:= `ceil`(v4) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L4e4fa0.  v4:= temp @kind wide;
  #L4e4fa2.  v2:= (`int`) v4 @kind d2i;
  #L4e4fa4.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4e4faa.  v2:= temp;
  #L4e4fac.  v4:= v2 * 16;
  #L4e4fb0.  v5:= length @variable v10;
  #L4e4fb2.  v6:= 0I;
  #L4e4fb4.  if v4 != v5 then goto L4e4fbc;
  #L4e4fb8.  v4:= 1I;
  #L4e4fba.  goto L4e4fbe;
  #L4e4fbc.  v4:= 0I;
  #L4e4fbe.  if v4 == 0 then goto L4e4fd8;
  #L4e4fc2.  v4:= v2 + -1;
  #L4e4fc6.  v4:= v4 * 16;
  #L4e4fca.  v5:= v9.`x5.r.b` @type ^`byte`[] @kind object;
  #L4e4fce.  call temp:= `d`(v10, v4, v5, v6, v0) @signature `Lx5/g;.d:([BI[BII)[B` @kind static;
  #L4e4fd4.  v4:= temp @kind object;
  #L4e4fd6.  goto L4e4ffe;
  #L4e4fd8.  v4:= v2 + -1;
  #L4e4fdc.  v4:= v4 * 16;
  #L4e4fe0.  v5:= length @variable v10;
  #L4e4fe2.  call temp:= `copyOfRange`(v10, v4, v5) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L4e4fe8.  v4:= temp @kind object;
  #L4e4fea.  call temp:= `a`(v4) @signature `Lx5/e;.a:([B)[B` @kind static;
  #L4e4ff0.  v4:= temp @kind object;
  #L4e4ff2.  v5:= v9.`x5.r.c` @type ^`byte`[] @kind object;
  #L4e4ff6.  call temp:= `e`(v4, v5) @signature `Lx5/g;.e:([B[B)[B` @kind static;
  #L4e4ffc.  v4:= temp @kind object;
  #L4e4ffe.  v5:= new `byte`[v0];
  #L4e5002.  v7:= 0I;
  #L4e5004.  v8:= v2 + -1;
  #L4e5008.  if v7 >= v8 then goto L4e5026;
  #L4e500c.  v8:= v7 * 16;
  #L4e5010.  call temp:= `d`(v5, v6, v10, v8, v0) @signature `Lx5/g;.d:([BI[BII)[B` @kind static;
  #L4e5016.  v5:= temp @kind object;
  #L4e5018.  call temp:= `doFinal`(v1, v5) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L4e501e.  v5:= temp @kind object;
  #L4e5020.  v7:= v7 + 1;
  #L4e5024.  goto L4e5004;
  #L4e5026.  call temp:= `e`(v4, v5) @signature `Lx5/g;.e:([B[B)[B` @kind static;
  #L4e502c.  v10:= temp @kind object;
  #L4e502e.  call temp:= `doFinal`(v1, v10) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L4e5034.  v10:= temp @kind object;
  #L4e5036.  call temp:= `copyOf`(v10, v11) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L4e503c.  v10:= temp @kind object;
  #L4e503e.  return v10 @kind object;
  #L4e5040.  v10:= new `java.security.InvalidAlgorithmParameterException`;
  #L4e5044.  v11:= "outputLength too large, max is 16 bytes" @kind object;
  #L4e5048.  call `<init>`(v10, v11) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e504e.  throw v10;
}
