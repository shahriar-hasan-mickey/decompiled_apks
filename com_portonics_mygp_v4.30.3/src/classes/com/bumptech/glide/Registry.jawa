record `com.bumptech.glide.Registry` @kind class @AccessFlag PUBLIC {
  `com.bumptech.glide.load.m.u0` `com.bumptech.glide.Registry.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.q.b` `com.bumptech.glide.Registry.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.q.g` `com.bumptech.glide.Registry.c` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.q.i` `com.bumptech.glide.Registry.d` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.l.j` `com.bumptech.glide.Registry.e` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.n.g.g` `com.bumptech.glide.Registry.f` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.q.c` `com.bumptech.glide.Registry.g` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.q.e` `com.bumptech.glide.Registry.h` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.q.d` `com.bumptech.glide.Registry.i` @AccessFlag PRIVATE_FINAL;
  `androidx.core.util.e` `com.bumptech.glide.Registry.j` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.Registry` v3 @kind this) @signature `Lcom/bumptech/glide/Registry;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L321058.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32105e.  v0:= new `com.bumptech.glide.q.e`;
  #L321062.  call `<init>`(v0) @signature `Lcom/bumptech/glide/q/e;.<init>:()V` @kind direct;
  #L321068.  v3.`com.bumptech.glide.Registry.h` @type ^`com.bumptech.glide.q.e` := v0 @kind object;
  #L32106c.  v0:= new `com.bumptech.glide.q.d`;
  #L321070.  call `<init>`(v0) @signature `Lcom/bumptech/glide/q/d;.<init>:()V` @kind direct;
  #L321076.  v3.`com.bumptech.glide.Registry.i` @type ^`com.bumptech.glide.q.d` := v0 @kind object;
  #L32107a.  call temp:= `e`() @signature `Lcom/bumptech/glide/s/q/h;.e:()Landroidx/core/util/e;` @kind static;
  #L321080.  v0:= temp @kind object;
  #L321082.  v3.`com.bumptech.glide.Registry.j` @type ^`androidx.core.util.e` := v0 @kind object;
  #L321086.  v1:= new `com.bumptech.glide.load.m.u0`;
  #L32108a.  call `<init>`(v1, v0) @signature `Lcom/bumptech/glide/load/m/u0;.<init>:(Landroidx/core/util/e;)V` @kind direct;
  #L321090.  v3.`com.bumptech.glide.Registry.a` @type ^`com.bumptech.glide.load.m.u0` := v1 @kind object;
  #L321094.  v0:= new `com.bumptech.glide.q.b`;
  #L321098.  call `<init>`(v0) @signature `Lcom/bumptech/glide/q/b;.<init>:()V` @kind direct;
  #L32109e.  v3.`com.bumptech.glide.Registry.b` @type ^`com.bumptech.glide.q.b` := v0 @kind object;
  #L3210a2.  v0:= new `com.bumptech.glide.q.g`;
  #L3210a6.  call `<init>`(v0) @signature `Lcom/bumptech/glide/q/g;.<init>:()V` @kind direct;
  #L3210ac.  v3.`com.bumptech.glide.Registry.c` @type ^`com.bumptech.glide.q.g` := v0 @kind object;
  #L3210b0.  v0:= new `com.bumptech.glide.q.i`;
  #L3210b4.  call `<init>`(v0) @signature `Lcom/bumptech/glide/q/i;.<init>:()V` @kind direct;
  #L3210ba.  v3.`com.bumptech.glide.Registry.d` @type ^`com.bumptech.glide.q.i` := v0 @kind object;
  #L3210be.  v0:= new `com.bumptech.glide.load.l.j`;
  #L3210c2.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/l/j;.<init>:()V` @kind direct;
  #L3210c8.  v3.`com.bumptech.glide.Registry.e` @type ^`com.bumptech.glide.load.l.j` := v0 @kind object;
  #L3210cc.  v0:= new `com.bumptech.glide.load.n.g.g`;
  #L3210d0.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/n/g/g;.<init>:()V` @kind direct;
  #L3210d6.  v3.`com.bumptech.glide.Registry.f` @type ^`com.bumptech.glide.load.n.g.g` := v0 @kind object;
  #L3210da.  v0:= new `com.bumptech.glide.q.c`;
  #L3210de.  call `<init>`(v0) @signature `Lcom/bumptech/glide/q/c;.<init>:()V` @kind direct;
  #L3210e4.  v3.`com.bumptech.glide.Registry.g` @type ^`com.bumptech.glide.q.c` := v0 @kind object;
  #L3210e8.  v0:= "Gif" @kind object;
  #L3210ec.  v1:= "Bitmap" @kind object;
  #L3210f0.  v2:= "BitmapDrawable" @kind object;
  #L3210f4.  temp:= new `java.lang.String`[v0, v1, v2];
  #L3210fa.  v0:= temp @kind object;
  #L3210fc.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L321102.  v0:= temp @kind object;
  #L321104.  call temp:= `r`(v3, v0) @signature `Lcom/bumptech/glide/Registry;.r:(Ljava/util/List;)Lcom/bumptech/glide/Registry;` @kind virtual;
  #L32110a.  return @kind void;
}
procedure `java.util.List` `f`(`com.bumptech.glide.Registry` v11 @kind this, `java.lang.Class` v12 @kind object, `java.lang.Class` v13 @kind object, `java.lang.Class` v14 @kind object) @signature `Lcom/bumptech/glide/Registry;.f:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L320e78.  v0:= new `java.util.ArrayList`;
  #L320e7c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L320e82.  v1:= v11.`com.bumptech.glide.Registry.c` @type ^`com.bumptech.glide.q.g` @kind object;
  #L320e86.  call temp:= `d`(v1, v12, v13) @signature `Lcom/bumptech/glide/q/g;.d:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L320e8c.  v13:= temp @kind object;
  #L320e8e.  call temp:= `iterator`(v13) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L320e94.  v13:= temp @kind object;
  #L320e96.  call temp:= `hasNext`(v13) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L320e9c.  v1:= temp;
  #L320e9e.  if v1 == 0 then goto L320f10;
  #L320ea2.  call temp:= `next`(v13) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L320ea8.  v1:= temp @kind object;
  #L320eaa.  v1:= (`java.lang.Class`) v1 @kind object;
  #L320eae.  v2:= v11.`com.bumptech.glide.Registry.f` @type ^`com.bumptech.glide.load.n.g.g` @kind object;
  #L320eb2.  call temp:= `b`(v2, v1, v14) @signature `Lcom/bumptech/glide/load/n/g/g;.b:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L320eb8.  v2:= temp @kind object;
  #L320eba.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L320ec0.  v9:= temp @kind object;
  #L320ec2.  call temp:= `hasNext`(v9) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L320ec8.  v2:= temp;
  #L320eca.  if v2 == 0 then goto L320e96;
  #L320ece.  call temp:= `next`(v9) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L320ed4.  v2:= temp @kind object;
  #L320ed6.  v5:= v2 @kind object;
  #L320ed8.  v5:= (`java.lang.Class`) v5 @kind object;
  #L320edc.  v2:= v11.`com.bumptech.glide.Registry.c` @type ^`com.bumptech.glide.q.g` @kind object;
  #L320ee0.  call temp:= `b`(v2, v12, v1) @signature `Lcom/bumptech/glide/q/g;.b:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L320ee6.  v6:= temp @kind object;
  #L320ee8.  v2:= v11.`com.bumptech.glide.Registry.f` @type ^`com.bumptech.glide.load.n.g.g` @kind object;
  #L320eec.  call temp:= `a`(v2, v1, v5) @signature `Lcom/bumptech/glide/load/n/g/g;.a:(Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/n/g/e;` @kind virtual;
  #L320ef2.  v7:= temp @kind object;
  #L320ef4.  v10:= new `com.bumptech.glide.load.engine.s`;
  #L320ef8.  v8:= v11.`com.bumptech.glide.Registry.j` @type ^`androidx.core.util.e` @kind object;
  #L320efc.  v2:= v10 @kind object;
  #L320efe.  v3:= v12 @kind object;
  #L320f00.  v4:= v1 @kind object;
  #L320f02.  call `<init>`(v2, v3, v4, v5, v6, v7, v8) @signature `Lcom/bumptech/glide/load/engine/s;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/util/List;Lcom/bumptech/glide/load/n/g/e;Landroidx/core/util/e;)V` @kind direct;
  #L320f08.  call temp:= `add`(v0, v10) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L320f0e.  goto L320ec2;
  #L320f10.  return v0 @kind object;
}
procedure `com.bumptech.glide.Registry` `a`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Class` v2 @kind object, `com.bumptech.glide.load.a` v3 @kind object) @signature `Lcom/bumptech/glide/Registry;.a:(Ljava/lang/Class;Lcom/bumptech/glide/load/a;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320c3c.  v0:= v1.`com.bumptech.glide.Registry.b` @type ^`com.bumptech.glide.q.b` @kind object;
  #L320c40.  call `a`(v0, v2, v3) @signature `Lcom/bumptech/glide/q/b;.a:(Ljava/lang/Class;Lcom/bumptech/glide/load/a;)V` @kind virtual;
  #L320c46.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `b`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Class` v2 @kind object, `com.bumptech.glide.load.j` v3 @kind object) @signature `Lcom/bumptech/glide/Registry;.b:(Ljava/lang/Class;Lcom/bumptech/glide/load/j;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320c58.  v0:= v1.`com.bumptech.glide.Registry.d` @type ^`com.bumptech.glide.q.i` @kind object;
  #L320c5c.  call `a`(v0, v2, v3) @signature `Lcom/bumptech/glide/q/i;.a:(Ljava/lang/Class;Lcom/bumptech/glide/load/j;)V` @kind virtual;
  #L320c62.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `c`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.i` v4 @kind object) @signature `Lcom/bumptech/glide/Registry;.c:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/i;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320c74.  v0:= "legacy_append" @kind object;
  #L320c78.  call temp:= `e`(v1, v0, v2, v3, v4) @signature `Lcom/bumptech/glide/Registry;.e:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/i;)Lcom/bumptech/glide/Registry;` @kind virtual;
  #L320c7e.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `d`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.m.r0` v4 @kind object) @signature `Lcom/bumptech/glide/Registry;.d:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/m/r0;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320c90.  v0:= v1.`com.bumptech.glide.Registry.a` @type ^`com.bumptech.glide.load.m.u0` @kind object;
  #L320c94.  call `a`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/load/m/u0;.a:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/m/r0;)V` @kind virtual;
  #L320c9a.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `e`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.Class` v3 @kind object, `java.lang.Class` v4 @kind object, `com.bumptech.glide.load.i` v5 @kind object) @signature `Lcom/bumptech/glide/Registry;.e:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/i;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320cac.  v0:= v1.`com.bumptech.glide.Registry.c` @type ^`com.bumptech.glide.q.g` @kind object;
  #L320cb0.  call `a`(v0, v2, v5, v3, v4) @signature `Lcom/bumptech/glide/q/g;.a:(Ljava/lang/String;Lcom/bumptech/glide/load/i;Ljava/lang/Class;Ljava/lang/Class;)V` @kind virtual;
  #L320cb6.  return v1 @kind object;
}
procedure `java.util.List` `g`(`com.bumptech.glide.Registry` v2 @kind this) @signature `Lcom/bumptech/glide/Registry;.g:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L320f24.  v0:= v2.`com.bumptech.glide.Registry.g` @type ^`com.bumptech.glide.q.c` @kind object;
  #L320f28.  call temp:= `b`(v0) @signature `Lcom/bumptech/glide/q/c;.b:()Ljava/util/List;` @kind virtual;
  #L320f2e.  v0:= temp @kind object;
  #L320f30.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L320f36.  v1:= temp;
  #L320f38.  if v1 != 0 then goto L320f3e;
  #L320f3c.  return v0 @kind object;
  #L320f3e.  v0:= new `com.bumptech.glide.Registry$NoImageHeaderParserException`;
  #L320f42.  call `<init>`(v0) @signature `Lcom/bumptech/glide/Registry$NoImageHeaderParserException;.<init>:()V` @kind direct;
  #L320f48.  throw v0;
}
procedure `com.bumptech.glide.load.engine.r0` `h`(`com.bumptech.glide.Registry` v9 @kind this, `java.lang.Class` v10 @kind object, `java.lang.Class` v11 @kind object, `java.lang.Class` v12 @kind object) @signature `Lcom/bumptech/glide/Registry;.h:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/r0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L320e08.  v0:= v9.`com.bumptech.glide.Registry.i` @type ^`com.bumptech.glide.q.d` @kind object;
  #L320e0c.  call temp:= `a`(v0, v10, v11, v12) @signature `Lcom/bumptech/glide/q/d;.a:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/r0;` @kind virtual;
  #L320e12.  v0:= temp @kind object;
  #L320e14.  v1:= v9.`com.bumptech.glide.Registry.i` @type ^`com.bumptech.glide.q.d` @kind object;
  #L320e18.  call temp:= `c`(v1, v0) @signature `Lcom/bumptech/glide/q/d;.c:(Lcom/bumptech/glide/load/engine/r0;)Z` @kind virtual;
  #L320e1e.  v1:= temp;
  #L320e20.  v2:= 0I;
  #L320e22.  if v1 == 0 then goto L320e28;
  #L320e26.  return v2 @kind object;
  #L320e28.  if v0 != 0 then goto L320e64;
  #L320e2c.  call temp:= `f`(v9, v10, v11, v12) @signature `Lcom/bumptech/glide/Registry;.f:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind direct;
  #L320e32.  v7:= temp @kind object;
  #L320e34.  call temp:= `isEmpty`(v7) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L320e3a.  v0:= temp;
  #L320e3c.  if v0 == 0 then goto L320e44;
  #L320e40.  v0:= v2 @kind object;
  #L320e42.  goto L320e5a;
  #L320e44.  v0:= new `com.bumptech.glide.load.engine.r0`;
  #L320e48.  v8:= v9.`com.bumptech.glide.Registry.j` @type ^`androidx.core.util.e` @kind object;
  #L320e4c.  v3:= v0 @kind object;
  #L320e4e.  v4:= v10 @kind object;
  #L320e50.  v5:= v11 @kind object;
  #L320e52.  v6:= v12 @kind object;
  #L320e54.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Lcom/bumptech/glide/load/engine/r0;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/util/List;Landroidx/core/util/e;)V` @kind direct;
  #L320e5a.  v1:= v9.`com.bumptech.glide.Registry.i` @type ^`com.bumptech.glide.q.d` @kind object;
  #L320e5e.  call `d`(v1, v10, v11, v12, v0) @signature `Lcom/bumptech/glide/q/d;.d:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/engine/r0;)V` @kind virtual;
  #L320e64.  return v0 @kind object;
}
procedure `java.util.List` `i`(`com.bumptech.glide.Registry` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/bumptech/glide/Registry;.i:(Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L320f5c.  v0:= v2.`com.bumptech.glide.Registry.a` @type ^`com.bumptech.glide.load.m.u0` @kind object;
  #L320f60.  call temp:= `d`(v0, v3) @signature `Lcom/bumptech/glide/load/m/u0;.d:(Ljava/lang/Object;)Ljava/util/List;` @kind virtual;
  #L320f66.  v0:= temp @kind object;
  #L320f68.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L320f6e.  v1:= temp;
  #L320f70.  if v1 != 0 then goto L320f76;
  #L320f74.  return v0 @kind object;
  #L320f76.  v0:= new `com.bumptech.glide.Registry$NoModelLoaderAvailableException`;
  #L320f7a.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/Registry$NoModelLoaderAvailableException;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L320f80.  throw v0;
}
procedure `java.util.List` `j`(`com.bumptech.glide.Registry` v5 @kind this, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object) @signature `Lcom/bumptech/glide/Registry;.j:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L320f94.  v0:= v5.`com.bumptech.glide.Registry.h` @type ^`com.bumptech.glide.q.e` @kind object;
  #L320f98.  call temp:= `a`(v0, v6, v7, v8) @signature `Lcom/bumptech/glide/q/e;.a:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L320f9e.  v0:= temp @kind object;
  #L320fa0.  if v0 != 0 then goto L321044;
  #L320fa4.  v0:= new `java.util.ArrayList`;
  #L320fa8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L320fae.  v1:= v5.`com.bumptech.glide.Registry.a` @type ^`com.bumptech.glide.load.m.u0` @kind object;
  #L320fb2.  call temp:= `c`(v1, v6) @signature `Lcom/bumptech/glide/load/m/u0;.c:(Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L320fb8.  v1:= temp @kind object;
  #L320fba.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L320fc0.  v1:= temp @kind object;
  #L320fc2.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L320fc8.  v2:= temp;
  #L320fca.  if v2 == 0 then goto L321032;
  #L320fce.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L320fd4.  v2:= temp @kind object;
  #L320fd6.  v2:= (`java.lang.Class`) v2 @kind object;
  #L320fda.  v3:= v5.`com.bumptech.glide.Registry.c` @type ^`com.bumptech.glide.q.g` @kind object;
  #L320fde.  call temp:= `d`(v3, v2, v7) @signature `Lcom/bumptech/glide/q/g;.d:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L320fe4.  v2:= temp @kind object;
  #L320fe6.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L320fec.  v2:= temp @kind object;
  #L320fee.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L320ff4.  v3:= temp;
  #L320ff6.  if v3 == 0 then goto L320fc2;
  #L320ffa.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L321000.  v3:= temp @kind object;
  #L321002.  v3:= (`java.lang.Class`) v3 @kind object;
  #L321006.  v4:= v5.`com.bumptech.glide.Registry.f` @type ^`com.bumptech.glide.load.n.g.g` @kind object;
  #L32100a.  call temp:= `b`(v4, v3, v8) @signature `Lcom/bumptech/glide/load/n/g/g;.b:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L321010.  v4:= temp @kind object;
  #L321012.  call temp:= `isEmpty`(v4) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L321018.  v4:= temp;
  #L32101a.  if v4 != 0 then goto L320fee;
  #L32101e.  call temp:= `contains`(v0, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L321024.  v4:= temp;
  #L321026.  if v4 != 0 then goto L320fee;
  #L32102a.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L321030.  goto L320fee;
  #L321032.  v1:= v5.`com.bumptech.glide.Registry.h` @type ^`com.bumptech.glide.q.e` @kind object;
  #L321036.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L32103c.  v2:= temp @kind object;
  #L32103e.  call `b`(v1, v6, v7, v8, v2) @signature `Lcom/bumptech/glide/q/e;.b:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/util/List;)V` @kind virtual;
  #L321044.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.j` `k`(`com.bumptech.glide.Registry` v2 @kind this, `com.bumptech.glide.load.engine.u0` v3 @kind object) @signature `Lcom/bumptech/glide/Registry;.k:(Lcom/bumptech/glide/load/engine/u0;)Lcom/bumptech/glide/load/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L320da8.  v0:= v2.`com.bumptech.glide.Registry.d` @type ^`com.bumptech.glide.q.i` @kind object;
  #L320dac.  call temp:= `e`(v3) @signature `Lcom/bumptech/glide/load/engine/u0;.e:()Ljava/lang/Class;` @kind interface;
  #L320db2.  v1:= temp @kind object;
  #L320db4.  call temp:= `b`(v0, v1) @signature `Lcom/bumptech/glide/q/i;.b:(Ljava/lang/Class;)Lcom/bumptech/glide/load/j;` @kind virtual;
  #L320dba.  v0:= temp @kind object;
  #L320dbc.  if v0 == 0 then goto L320dc2;
  #L320dc0.  return v0 @kind object;
  #L320dc2.  v0:= new `com.bumptech.glide.Registry$NoResultEncoderAvailableException`;
  #L320dc6.  call temp:= `e`(v3) @signature `Lcom/bumptech/glide/load/engine/u0;.e:()Ljava/lang/Class;` @kind interface;
  #L320dcc.  v3:= temp @kind object;
  #L320dce.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/Registry$NoResultEncoderAvailableException;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L320dd4.  throw v0;
}
procedure `com.bumptech.glide.load.l.g` `l`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/Registry;.l:(Ljava/lang/Object;)Lcom/bumptech/glide/load/l/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320de8.  v0:= v1.`com.bumptech.glide.Registry.e` @type ^`com.bumptech.glide.load.l.j` @kind object;
  #L320dec.  call temp:= `a`(v0, v2) @signature `Lcom/bumptech/glide/load/l/j;.a:(Ljava/lang/Object;)Lcom/bumptech/glide/load/l/g;` @kind virtual;
  #L320df2.  v2:= temp @kind object;
  #L320df4.  return v2 @kind object;
}
procedure `com.bumptech.glide.load.a` `m`(`com.bumptech.glide.Registry` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/bumptech/glide/Registry;.m:(Ljava/lang/Object;)Lcom/bumptech/glide/load/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L320d68.  v0:= v2.`com.bumptech.glide.Registry.b` @type ^`com.bumptech.glide.q.b` @kind object;
  #L320d6c.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L320d72.  v1:= temp @kind object;
  #L320d74.  call temp:= `b`(v0, v1) @signature `Lcom/bumptech/glide/q/b;.b:(Ljava/lang/Class;)Lcom/bumptech/glide/load/a;` @kind virtual;
  #L320d7a.  v0:= temp @kind object;
  #L320d7c.  if v0 == 0 then goto L320d82;
  #L320d80.  return v0 @kind object;
  #L320d82.  v0:= new `com.bumptech.glide.Registry$NoSourceEncoderAvailableException`;
  #L320d86.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L320d8c.  v3:= temp @kind object;
  #L320d8e.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/Registry$NoSourceEncoderAvailableException;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L320d94.  throw v0;
}
procedure `boolean` `n`(`com.bumptech.glide.Registry` v1 @kind this, `com.bumptech.glide.load.engine.u0` v2 @kind object) @signature `Lcom/bumptech/glide/Registry;.n:(Lcom/bumptech/glide/load/engine/u0;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320c0c.  v0:= v1.`com.bumptech.glide.Registry.d` @type ^`com.bumptech.glide.q.i` @kind object;
  #L320c10.  call temp:= `e`(v2) @signature `Lcom/bumptech/glide/load/engine/u0;.e:()Ljava/lang/Class;` @kind interface;
  #L320c16.  v2:= temp @kind object;
  #L320c18.  call temp:= `b`(v0, v2) @signature `Lcom/bumptech/glide/q/i;.b:(Ljava/lang/Class;)Lcom/bumptech/glide/load/j;` @kind virtual;
  #L320c1e.  v2:= temp @kind object;
  #L320c20.  if v2 == 0 then goto L320c28;
  #L320c24.  v2:= 1I;
  #L320c26.  goto L320c2a;
  #L320c28.  v2:= 0I;
  #L320c2a.  return v2;
}
procedure `com.bumptech.glide.Registry` `o`(`com.bumptech.glide.Registry` v1 @kind this, `com.bumptech.glide.load.ImageHeaderParser` v2 @kind object) @signature `Lcom/bumptech/glide/Registry;.o:(Lcom/bumptech/glide/load/ImageHeaderParser;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320cc8.  v0:= v1.`com.bumptech.glide.Registry.g` @type ^`com.bumptech.glide.q.c` @kind object;
  #L320ccc.  call `a`(v0, v2) @signature `Lcom/bumptech/glide/q/c;.a:(Lcom/bumptech/glide/load/ImageHeaderParser;)V` @kind virtual;
  #L320cd2.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `p`(`com.bumptech.glide.Registry` v1 @kind this, `com.bumptech.glide.load.l.f` v2 @kind object) @signature `Lcom/bumptech/glide/Registry;.p:(Lcom/bumptech/glide/load/l/f;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320ce4.  v0:= v1.`com.bumptech.glide.Registry.e` @type ^`com.bumptech.glide.load.l.j` @kind object;
  #L320ce8.  call `b`(v0, v2) @signature `Lcom/bumptech/glide/load/l/j;.b:(Lcom/bumptech/glide/load/l/f;)V` @kind virtual;
  #L320cee.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `q`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.n.g.e` v4 @kind object) @signature `Lcom/bumptech/glide/Registry;.q:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/n/g/e;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320d00.  v0:= v1.`com.bumptech.glide.Registry.f` @type ^`com.bumptech.glide.load.n.g.g` @kind object;
  #L320d04.  call `c`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/load/n/g/g;.c:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/n/g/e;)V` @kind virtual;
  #L320d0a.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `r`(`com.bumptech.glide.Registry` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lcom/bumptech/glide/Registry;.r:(Ljava/util/List;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L320d1c.  v0:= new `java.util.ArrayList`;
  #L320d20.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L320d26.  v1:= temp;
  #L320d28.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L320d2e.  call temp:= `addAll`(v0, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L320d34.  v3:= 0I;
  #L320d36.  v1:= "legacy_prepend_all" @kind object;
  #L320d3a.  call `add`(v0, v3, v1) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L320d40.  v3:= "legacy_append" @kind object;
  #L320d44.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L320d4a.  v3:= v2.`com.bumptech.glide.Registry.c` @type ^`com.bumptech.glide.q.g` @kind object;
  #L320d4e.  call `e`(v3, v0) @signature `Lcom/bumptech/glide/q/g;.e:(Ljava/util/List;)V` @kind virtual;
  #L320d54.  return v2 @kind object;
}
