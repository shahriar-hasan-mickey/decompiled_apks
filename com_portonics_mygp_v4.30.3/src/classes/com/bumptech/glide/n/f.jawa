record `com.bumptech.glide.n.f` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.n.b` @kind interface {
  `int`[] `com.bumptech.glide.n.f.b` @AccessFlag PRIVATE;
  `int`[] `com.bumptech.glide.n.f.c` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.n.a` `com.bumptech.glide.n.f.d` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.bumptech.glide.n.f.e` @AccessFlag PRIVATE;
  `byte`[] `com.bumptech.glide.n.f.f` @AccessFlag PRIVATE;
  `short`[] `com.bumptech.glide.n.f.g` @AccessFlag PRIVATE;
  `byte`[] `com.bumptech.glide.n.f.h` @AccessFlag PRIVATE;
  `byte`[] `com.bumptech.glide.n.f.i` @AccessFlag PRIVATE;
  `byte`[] `com.bumptech.glide.n.f.j` @AccessFlag PRIVATE;
  `int`[] `com.bumptech.glide.n.f.k` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.n.f.l` @AccessFlag PRIVATE;
  `com.bumptech.glide.n.d` `com.bumptech.glide.n.f.m` @AccessFlag PRIVATE;
  `android.graphics.Bitmap` `com.bumptech.glide.n.f.n` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.n.f.o` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.n.f.p` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.n.f.q` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.n.f.r` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.n.f.s` @AccessFlag PRIVATE;
  `java.lang.Boolean` `com.bumptech.glide.n.f.t` @AccessFlag PRIVATE;
  `android.graphics.Bitmap$Config` `com.bumptech.glide.n.f.u` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@com.bumptech.glide.n.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/n/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L324d3c.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.n.f` v1 @kind this, `com.bumptech.glide.n.a` v2 @kind object) @signature `Lcom/bumptech/glide/n/f;.<init>:(Lcom/bumptech/glide/n/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L324d50.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L324d56.  v0:= 256I;
  #L324d5a.  v0:= new `int`[v0];
  #L324d5e.  v1.`com.bumptech.glide.n.f.c` @type ^`int`[] := v0 @kind object;
  #L324d62.  v0:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L324d66.  v1.`com.bumptech.glide.n.f.u` @type ^`android.graphics.Bitmap$Config` := v0 @kind object;
  #L324d6a.  v1.`com.bumptech.glide.n.f.d` @type ^`com.bumptech.glide.n.a` := v2 @kind object;
  #L324d6e.  v2:= new `com.bumptech.glide.n.d`;
  #L324d72.  call `<init>`(v2) @signature `Lcom/bumptech/glide/n/d;.<init>:()V` @kind direct;
  #L324d78.  v1.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` := v2 @kind object;
  #L324d7c.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.n.f` v0 @kind this, `com.bumptech.glide.n.a` v1 @kind object, `com.bumptech.glide.n.d` v2 @kind object, `java.nio.ByteBuffer` v3 @kind object, `int` v4 ) @signature `Lcom/bumptech/glide/n/f;.<init>:(Lcom/bumptech/glide/n/a;Lcom/bumptech/glide/n/d;Ljava/nio/ByteBuffer;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L324d90.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/n/f;.<init>:(Lcom/bumptech/glide/n/a;)V` @kind direct;
  #L324d96.  call `r`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/n/f;.r:(Lcom/bumptech/glide/n/d;Ljava/nio/ByteBuffer;I)V` @kind virtual;
  #L324d9c.  return @kind void;
}
procedure `int` `j`(`com.bumptech.glide.n.f` v9 @kind this, `int` v10 , `int` v11 , `int` v12 ) @signature `Lcom/bumptech/glide/n/f;.j:(III)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L324af0.  v0:= 0I;
  #L324af2.  v1:= v10;
  #L324af4.  v2:= 0I;
  #L324af6.  v3:= 0I;
  #L324af8.  v4:= 0I;
  #L324afa.  v5:= 0I;
  #L324afc.  v6:= 0I;
  #L324afe.  v7:= v9.`com.bumptech.glide.n.f.q` @type ^`int`;
  #L324b02.  v7:= v7 + v10 @kind int;
  #L324b04.  if v1 >= v7 then goto L324b58;
  #L324b08.  v7:= v9.`com.bumptech.glide.n.f.j` @type ^`byte`[] @kind object;
  #L324b0c.  v8:= length @variable v7;
  #L324b0e.  if v1 >= v8 then goto L324b58;
  #L324b12.  if v1 >= v11 then goto L324b58;
  #L324b16.  v7:= v7[v1] @kind byte;
  #L324b1a.  v7:= v7 ^& 255;
  #L324b1e.  v8:= v9.`com.bumptech.glide.n.f.b` @type ^`int`[] @kind object;
  #L324b22.  v7:= v8[v7];
  #L324b26.  if v7 == 0 then goto L324b52;
  #L324b2a.  v8:= v7 ^> 24;
  #L324b2e.  v8:= v8 ^& 255;
  #L324b32.  v2:= v2 + v8 @kind int;
  #L324b34.  v8:= v7 ^> 16;
  #L324b38.  v8:= v8 ^& 255;
  #L324b3c.  v3:= v3 + v8 @kind int;
  #L324b3e.  v8:= v7 ^> 8;
  #L324b42.  v8:= v8 ^& 255;
  #L324b46.  v4:= v4 + v8 @kind int;
  #L324b48.  v7:= v7 ^& 255;
  #L324b4c.  v5:= v5 + v7 @kind int;
  #L324b4e.  v6:= v6 + 1;
  #L324b52.  v1:= v1 + 1;
  #L324b56.  goto L324afe;
  #L324b58.  v10:= v10 + v12 @kind int;
  #L324b5a.  v12:= v10;
  #L324b5c.  v1:= v9.`com.bumptech.glide.n.f.q` @type ^`int`;
  #L324b60.  v1:= v1 + v10 @kind int;
  #L324b62.  if v12 >= v1 then goto L324bb6;
  #L324b66.  v1:= v9.`com.bumptech.glide.n.f.j` @type ^`byte`[] @kind object;
  #L324b6a.  v7:= length @variable v1;
  #L324b6c.  if v12 >= v7 then goto L324bb6;
  #L324b70.  if v12 >= v11 then goto L324bb6;
  #L324b74.  v1:= v1[v12] @kind byte;
  #L324b78.  v1:= v1 ^& 255;
  #L324b7c.  v7:= v9.`com.bumptech.glide.n.f.b` @type ^`int`[] @kind object;
  #L324b80.  v1:= v7[v1];
  #L324b84.  if v1 == 0 then goto L324bb0;
  #L324b88.  v7:= v1 ^> 24;
  #L324b8c.  v7:= v7 ^& 255;
  #L324b90.  v2:= v2 + v7 @kind int;
  #L324b92.  v7:= v1 ^> 16;
  #L324b96.  v7:= v7 ^& 255;
  #L324b9a.  v3:= v3 + v7 @kind int;
  #L324b9c.  v7:= v1 ^> 8;
  #L324ba0.  v7:= v7 ^& 255;
  #L324ba4.  v4:= v4 + v7 @kind int;
  #L324ba6.  v1:= v1 ^& 255;
  #L324baa.  v5:= v5 + v1 @kind int;
  #L324bac.  v6:= v6 + 1;
  #L324bb0.  v12:= v12 + 1;
  #L324bb4.  goto L324b5c;
  #L324bb6.  if v6 != 0 then goto L324bbc;
  #L324bba.  return v0;
  #L324bbc.  v2:= v2 / v6 @kind int;
  #L324bbe.  v10:= v2 ^< 24;
  #L324bc2.  v3:= v3 / v6 @kind int;
  #L324bc4.  v11:= v3 ^< 16;
  #L324bc8.  v10:= v10 ^| v11 @kind int;
  #L324bca.  v4:= v4 / v6 @kind int;
  #L324bcc.  v11:= v4 ^< 8;
  #L324bd0.  v10:= v10 ^| v11 @kind int;
  #L324bd2.  v5:= v5 / v6 @kind int;
  #L324bd4.  v10:= v10 ^| v5 @kind int;
  #L324bd6.  return v10;
}
procedure `void` `k`(`com.bumptech.glide.n.f` v23 @kind this, `com.bumptech.glide.n.c` v24 @kind object) @signature `Lcom/bumptech/glide/n/f;.k:(Lcom/bumptech/glide/n/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L324e44.  v0:= v23 @kind object;
  #L324e48.  v1:= v24 @kind object;
  #L324e4c.  v2:= v0.`com.bumptech.glide.n.f.k` @type ^`int`[] @kind object;
  #L324e50.  v3:= v1.`com.bumptech.glide.n.c.d` @type ^`int`;
  #L324e54.  v4:= v0.`com.bumptech.glide.n.f.q` @type ^`int`;
  #L324e58.  v3:= v3 / v4 @kind int;
  #L324e5a.  v5:= v1.`com.bumptech.glide.n.c.b` @type ^`int`;
  #L324e5e.  v5:= v5 / v4 @kind int;
  #L324e60.  v6:= v1.`com.bumptech.glide.n.c.c` @type ^`int`;
  #L324e64.  v6:= v6 / v4 @kind int;
  #L324e66.  v7:= v1.`com.bumptech.glide.n.c.a` @type ^`int`;
  #L324e6a.  v7:= v7 / v4 @kind int;
  #L324e6c.  v8:= v0.`com.bumptech.glide.n.f.l` @type ^`int`;
  #L324e70.  if v8 != 0 then goto L324e78;
  #L324e74.  v8:= 1I;
  #L324e76.  goto L324e7a;
  #L324e78.  v8:= 0I;
  #L324e7a.  v11:= v0.`com.bumptech.glide.n.f.s` @type ^`int`;
  #L324e7e.  v12:= v0.`com.bumptech.glide.n.f.r` @type ^`int`;
  #L324e82.  v13:= v0.`com.bumptech.glide.n.f.j` @type ^`byte`[] @kind object;
  #L324e86.  v14:= v0.`com.bumptech.glide.n.f.b` @type ^`int`[] @kind object;
  #L324e8a.  v15:= v0.`com.bumptech.glide.n.f.t` @type ^`java.lang.Boolean` @kind object;
  #L324e8e.  v16:= 8I;
  #L324e92.  v9:= 0I;
  #L324e94.  v10:= 0I;
  #L324e96.  v18:= 1I;
  #L324e9a.  if v9 >= v3 then goto L324ff4;
  #L324e9e.  v19:= v15 @kind object;
  #L324ea2.  v15:= v1.`com.bumptech.glide.n.c.e` @type ^`boolean` @kind boolean;
  #L324ea6.  if v15 == 0 then goto L324efc;
  #L324eaa.  v15:= 2I;
  #L324eac.  if v10 < v3 then goto L324ef2;
  #L324eb0.  v21:= v3;
  #L324eb4.  v3:= v18 + 1;
  #L324eb8.  if v3 == v15 then goto L324ee8;
  #L324ebc.  v15:= 3I;
  #L324ebe.  if v3 == v15 then goto L324eda;
  #L324ec2.  v15:= 4I;
  #L324ec4.  if v3 == v15 then goto L324ece;
  #L324ec8.  v18:= v3;
  #L324ecc.  goto L324ef6;
  #L324ece.  v18:= v3;
  #L324ed2.  v10:= 1I;
  #L324ed4.  v16:= 2I;
  #L324ed8.  goto L324ef6;
  #L324eda.  v15:= 4I;
  #L324edc.  v18:= v3;
  #L324ee0.  v10:= 2I;
  #L324ee2.  v16:= 4I;
  #L324ee6.  goto L324ef6;
  #L324ee8.  v15:= 4I;
  #L324eea.  v18:= v3;
  #L324eee.  v10:= 4I;
  #L324ef0.  goto L324ef6;
  #L324ef2.  v21:= v3;
  #L324ef6.  v3:= v10 + v16 @kind int;
  #L324efa.  goto L324f04;
  #L324efc.  v21:= v3;
  #L324f00.  v3:= v10;
  #L324f02.  v10:= v9;
  #L324f04.  v10:= v10 + v5 @kind int;
  #L324f06.  v15:= 1I;
  #L324f08.  if v4 != v15 then goto L324f12;
  #L324f0c.  v17:= 1I;
  #L324f10.  goto L324f16;
  #L324f12.  v17:= 0I;
  #L324f16.  if v10 >= v12 then goto L324fcc;
  #L324f1a.  v10:= v10 * v11 @kind int;
  #L324f1e.  v20:= v10 + v7 @kind int;
  #L324f22.  v15:= v20 + v6 @kind int;
  #L324f26.  v10:= v10 + v11 @kind int;
  #L324f28.  if v10 >= v15 then goto L324f2e;
  #L324f2c.  v15:= v10;
  #L324f2e.  v10:= v9 * v4 @kind int;
  #L324f32.  v22:= v3;
  #L324f36.  v3:= v1.`com.bumptech.glide.n.c.c` @type ^`int`;
  #L324f3a.  v10:= v10 * v3 @kind int;
  #L324f3e.  if v17 == 0 then goto L324f80;
  #L324f42.  v3:= v20;
  #L324f46.  if v3 >= v15 then goto L324fd0;
  #L324f4a.  v17:= v5;
  #L324f4e.  v5:= v13[v10] @kind byte;
  #L324f52.  v5:= v5 ^& 255;
  #L324f56.  v5:= v14[v5];
  #L324f5a.  if v5 == 0 then goto L324f64;
  #L324f5e.  v2[v3]:= v5;
  #L324f62.  goto L324f74;
  #L324f64.  if v8 == 0 then goto L324f74;
  #L324f68.  if v19 != 0 then goto L324f74;
  #L324f6c.  v5:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L324f70.  v19:= v5 @kind object;
  #L324f74.  v10:= v10 + v4 @kind int;
  #L324f76.  v3:= v3 + 1;
  #L324f7a.  v5:= v17;
  #L324f7e.  goto L324f46;
  #L324f80.  v17:= v5;
  #L324f84.  v3:= v15 - v20 @kind int;
  #L324f88.  v3:= v3 * v4 @kind int;
  #L324f8c.  v3:= v3 + v10 @kind int;
  #L324f8e.  v5:= v20;
  #L324f92.  v20:= v6;
  #L324f96.  if v5 >= v15 then goto L324fd8;
  #L324f9a.  v6:= v1.`com.bumptech.glide.n.c.c` @type ^`int`;
  #L324f9e.  call temp:= `j`(v0, v10, v3, v6) @signature `Lcom/bumptech/glide/n/f;.j:(III)I` @kind direct;
  #L324fa4.  v6:= temp;
  #L324fa6.  if v6 == 0 then goto L324fb0;
  #L324faa.  v2[v5]:= v6;
  #L324fae.  goto L324fc0;
  #L324fb0.  if v8 == 0 then goto L324fc0;
  #L324fb4.  if v19 != 0 then goto L324fc0;
  #L324fb8.  v6:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L324fbc.  v19:= v6 @kind object;
  #L324fc0.  v10:= v10 + v4 @kind int;
  #L324fc2.  v5:= v5 + 1;
  #L324fc6.  v6:= v20;
  #L324fca.  goto L324f92;
  #L324fcc.  v22:= v3;
  #L324fd0.  v17:= v5;
  #L324fd4.  v20:= v6;
  #L324fd8.  v15:= v19 @kind object;
  #L324fdc.  v9:= v9 + 1;
  #L324fe0.  v5:= v17;
  #L324fe4.  v6:= v20;
  #L324fe8.  v3:= v21;
  #L324fec.  v10:= v22;
  #L324ff0.  goto L324e9a;
  #L324ff4.  v19:= v15 @kind object;
  #L324ff8.  v1:= v0.`com.bumptech.glide.n.f.t` @type ^`java.lang.Boolean` @kind object;
  #L324ffc.  if v1 != 0 then goto L32501c;
  #L325000.  if v19 != 0 then goto L325008;
  #L325004.  v9:= 0I;
  #L325006.  goto L325010;
  #L325008.  call temp:= `booleanValue`(v19) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L32500e.  v9:= temp;
  #L325010.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L325016.  v1:= temp @kind object;
  #L325018.  v0.`com.bumptech.glide.n.f.t` @type ^`java.lang.Boolean` := v1 @kind object;
  #L32501c.  return @kind void;
}
procedure `void` `l`(`com.bumptech.glide.n.f` v18 @kind this, `com.bumptech.glide.n.c` v19 @kind object) @signature `Lcom/bumptech/glide/n/f;.l:(Lcom/bumptech/glide/n/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L325030.  v0:= v18 @kind object;
  #L325034.  v1:= v19 @kind object;
  #L325038.  v2:= v0.`com.bumptech.glide.n.f.k` @type ^`int`[] @kind object;
  #L32503c.  v3:= v1.`com.bumptech.glide.n.c.d` @type ^`int`;
  #L325040.  v4:= v1.`com.bumptech.glide.n.c.b` @type ^`int`;
  #L325044.  v5:= v1.`com.bumptech.glide.n.c.c` @type ^`int`;
  #L325048.  v6:= v1.`com.bumptech.glide.n.c.a` @type ^`int`;
  #L32504c.  v7:= v0.`com.bumptech.glide.n.f.l` @type ^`int`;
  #L325050.  if v7 != 0 then goto L325058;
  #L325054.  v7:= 1I;
  #L325056.  goto L32505a;
  #L325058.  v7:= 0I;
  #L32505a.  v10:= v0.`com.bumptech.glide.n.f.s` @type ^`int`;
  #L32505e.  v11:= v0.`com.bumptech.glide.n.f.j` @type ^`byte`[] @kind object;
  #L325062.  v12:= v0.`com.bumptech.glide.n.f.b` @type ^`int`[] @kind object;
  #L325066.  v14:= 0I;
  #L325068.  v15:= -1I;
  #L32506a.  if v14 >= v3 then goto L3250d8;
  #L32506e.  v16:= v14 + v4 @kind int;
  #L325072.  v16:= v16 * v10 @kind int;
  #L325076.  v17:= v16 + v6 @kind int;
  #L32507a.  v8:= v17 + v5 @kind int;
  #L32507e.  v9:= v16 + v10 @kind int;
  #L325082.  if v9 >= v8 then goto L325088;
  #L325086.  v8:= v9;
  #L325088.  v9:= v1.`com.bumptech.glide.n.c.c` @type ^`int`;
  #L32508c.  v9:= v9 * v14 @kind int;
  #L325090.  v13:= v17;
  #L325094.  if v13 >= v8 then goto L3250ca;
  #L325098.  v1:= v11[v9] @kind byte;
  #L32509c.  v17:= v3;
  #L3250a0.  v3:= v1 ^& 255;
  #L3250a4.  if v3 == v15 then goto L3250b8;
  #L3250a8.  v3:= v12[v3];
  #L3250ac.  if v3 == 0 then goto L3250b6;
  #L3250b0.  v2[v13]:= v3;
  #L3250b4.  goto L3250b8;
  #L3250b6.  v15:= v1;
  #L3250b8.  v9:= v9 + 1;
  #L3250bc.  v13:= v13 + 1;
  #L3250c0.  v1:= v19 @kind object;
  #L3250c4.  v3:= v17;
  #L3250c8.  goto L325094;
  #L3250ca.  v17:= v3;
  #L3250ce.  v14:= v14 + 1;
  #L3250d2.  v1:= v19 @kind object;
  #L3250d6.  goto L32506a;
  #L3250d8.  v1:= v0.`com.bumptech.glide.n.f.t` @type ^`java.lang.Boolean` @kind object;
  #L3250dc.  if v1 != 0 then goto L3250ee;
  #L3250e0.  if v7 == 0 then goto L3250ee;
  #L3250e4.  v1:= -1I;
  #L3250e6.  if v15 == v1 then goto L3250ee;
  #L3250ea.  v8:= 1I;
  #L3250ec.  goto L3250f0;
  #L3250ee.  v8:= 0I;
  #L3250f0.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3250f6.  v1:= temp @kind object;
  #L3250f8.  v0.`com.bumptech.glide.n.f.t` @type ^`java.lang.Boolean` := v1 @kind object;
  #L3250fc.  return @kind void;
}
procedure `void` `m`(`com.bumptech.glide.n.f` v28 @kind this, `com.bumptech.glide.n.c` v29 @kind object) @signature `Lcom/bumptech/glide/n/f;.m:(Lcom/bumptech/glide/n/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;
    v25;
    v26;
    v27;

  #L325110.  v0:= v28 @kind object;
  #L325114.  v1:= v29 @kind object;
  #L325118.  if v1 == 0 then goto L32512a;
  #L32511c.  v2:= v0.`com.bumptech.glide.n.f.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L325120.  v3:= v1.`com.bumptech.glide.n.c.j` @type ^`int`;
  #L325124.  call temp:= `position`(v2, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L32512a.  if v1 != 0 then goto L32513c;
  #L32512e.  v1:= v0.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` @kind object;
  #L325132.  v2:= v1.`com.bumptech.glide.n.d.f` @type ^`int`;
  #L325136.  v1:= v1.`com.bumptech.glide.n.d.g` @type ^`int`;
  #L32513a.  goto L325144;
  #L32513c.  v2:= v1.`com.bumptech.glide.n.c.c` @type ^`int`;
  #L325140.  v1:= v1.`com.bumptech.glide.n.c.d` @type ^`int`;
  #L325144.  v2:= v2 * v1 @kind int;
  #L325148.  v1:= v0.`com.bumptech.glide.n.f.j` @type ^`byte`[] @kind object;
  #L32514c.  if v1 == 0 then goto L325156;
  #L325150.  v1:= length @variable v1;
  #L325152.  if v1 >= v2 then goto L325166;
  #L325156.  v1:= v0.`com.bumptech.glide.n.f.d` @type ^`com.bumptech.glide.n.a` @kind object;
  #L32515a.  call temp:= `e`(v1, v2) @signature `Lcom/bumptech/glide/n/a;.e:(I)[B` @kind interface;
  #L325160.  v1:= temp @kind object;
  #L325162.  v0.`com.bumptech.glide.n.f.j` @type ^`byte`[] := v1 @kind object;
  #L325166.  v1:= v0.`com.bumptech.glide.n.f.j` @type ^`byte`[] @kind object;
  #L32516a.  v3:= v0.`com.bumptech.glide.n.f.g` @type ^`short`[] @kind object;
  #L32516e.  v4:= 4096I;
  #L325172.  if v3 != 0 then goto L32517e;
  #L325176.  v3:= new `short`[v4];
  #L32517a.  v0.`com.bumptech.glide.n.f.g` @type ^`short`[] := v3 @kind object;
  #L32517e.  v3:= v0.`com.bumptech.glide.n.f.g` @type ^`short`[] @kind object;
  #L325182.  v5:= v0.`com.bumptech.glide.n.f.h` @type ^`byte`[] @kind object;
  #L325186.  if v5 != 0 then goto L325192;
  #L32518a.  v5:= new `byte`[v4];
  #L32518e.  v0.`com.bumptech.glide.n.f.h` @type ^`byte`[] := v5 @kind object;
  #L325192.  v5:= v0.`com.bumptech.glide.n.f.h` @type ^`byte`[] @kind object;
  #L325196.  v6:= v0.`com.bumptech.glide.n.f.i` @type ^`byte`[] @kind object;
  #L32519a.  if v6 != 0 then goto L3251aa;
  #L32519e.  v6:= 4097I;
  #L3251a2.  v6:= new `byte`[v6];
  #L3251a6.  v0.`com.bumptech.glide.n.f.i` @type ^`byte`[] := v6 @kind object;
  #L3251aa.  v6:= v0.`com.bumptech.glide.n.f.i` @type ^`byte`[] @kind object;
  #L3251ae.  call temp:= `q`(v28) @signature `Lcom/bumptech/glide/n/f;.q:()I` @kind direct;
  #L3251b4.  v7:= temp;
  #L3251b6.  v8:= 1I;
  #L3251b8.  v9:= v8 ^< v7 @kind int;
  #L3251bc.  v10:= v9 + 1;
  #L3251c0.  v11:= v9 + 2;
  #L3251c4.  v7:= v7 + v8 @kind int;
  #L3251c6.  v12:= v8 ^< v7 @kind int;
  #L3251ca.  v12:= v12 - v8 @kind int;
  #L3251cc.  v13:= 0I;
  #L3251ce.  v14:= 0I;
  #L3251d0.  if v14 >= v9 then goto L3251e4;
  #L3251d4.  v3[v14]:= v13 @kind short;
  #L3251d8.  v15:= (`byte`) v14 @kind i2b;
  #L3251da.  v5[v14]:= v15 @kind byte;
  #L3251de.  v14:= v14 + 1;
  #L3251e2.  goto L3251d0;
  #L3251e4.  v14:= v0.`com.bumptech.glide.n.f.f` @type ^`byte`[] @kind object;
  #L3251e8.  v15:= -1I;
  #L3251ea.  v23:= v7;
  #L3251ee.  v21:= v11;
  #L3251f2.  v22:= v12;
  #L3251f6.  v16:= 0I;
  #L3251fa.  v17:= 0I;
  #L3251fe.  v18:= 0I;
  #L325202.  v19:= 0I;
  #L325206.  v20:= 0I;
  #L32520a.  v24:= -1I;
  #L32520e.  v25:= 0I;
  #L325212.  v26:= 0I;
  #L325216.  if v13 >= v2 then goto L3253a8;
  #L32521a.  if v16 != 0 then goto L325238;
  #L32521e.  call temp:= `p`(v28) @signature `Lcom/bumptech/glide/n/f;.p:()I` @kind direct;
  #L325224.  v16:= temp;
  #L325226.  if v16 > 0 then goto L325234;
  #L32522a.  v3:= 3I;
  #L32522c.  v0.`com.bumptech.glide.n.f.p` @type ^`int` := v3;
  #L325230.  goto L3253a8;
  #L325234.  v17:= 0I;
  #L325238.  v4:= v14[v17] @kind byte;
  #L32523c.  v4:= v4 ^& 255;
  #L325240.  v4:= v4 ^< v18 @kind int;
  #L325244.  v19:= v19 + v4 @kind int;
  #L325248.  v18:= v18 + 8;
  #L32524c.  v17:= v17 + 1;
  #L325250.  v16:= v16 + -1;
  #L325254.  v4:= v18;
  #L325258.  v8:= v21;
  #L32525c.  v15:= v23;
  #L325260.  v0:= v24;
  #L325264.  v23:= v7;
  #L325268.  v7:= v25;
  #L32526c.  if v4 < v15 then goto L32537c;
  #L325270.  v24:= v11;
  #L325274.  v11:= v19 ^& v22 @kind int;
  #L325278.  v19:= v19 ^> v15 @kind int;
  #L32527c.  v4:= v4 - v15 @kind int;
  #L32527e.  if v11 != v9 then goto L325294;
  #L325282.  v22:= v12;
  #L325286.  v15:= v23;
  #L32528a.  v8:= v24;
  #L32528e.  v11:= v8;
  #L325290.  v0:= -1I;
  #L325292.  goto L32526c;
  #L325294.  if v11 != v10 then goto L3252c2;
  #L325298.  v18:= v4;
  #L32529c.  v25:= v7;
  #L3252a0.  v21:= v8;
  #L3252a4.  v7:= v23;
  #L3252a8.  v11:= v24;
  #L3252ac.  v4:= 4096I;
  #L3252b0.  v8:= 1I;
  #L3252b2.  v24:= v0;
  #L3252b6.  v23:= v15;
  #L3252ba.  v15:= -1I;
  #L3252bc.  v0:= v28 @kind object;
  #L3252c0.  goto L325216;
  #L3252c2.  v25:= v4;
  #L3252c6.  v4:= -1I;
  #L3252c8.  if v0 != v4 then goto L3252ea;
  #L3252cc.  v0:= v5[v11] @kind byte;
  #L3252d0.  v1[v20]:= v0 @kind byte;
  #L3252d4.  v20:= v20 + 1;
  #L3252d8.  v13:= v13 + 1;
  #L3252dc.  v0:= v11;
  #L3252de.  v7:= v0;
  #L3252e0.  v11:= v24;
  #L3252e4.  v4:= v25;
  #L3252e8.  goto L32526c;
  #L3252ea.  if v11 < v8 then goto L3252fc;
  #L3252ee.  v7:= (`byte`) v7 @kind i2b;
  #L3252f0.  v6[v26]:= v7 @kind byte;
  #L3252f4.  v26:= v26 + 1;
  #L3252f8.  v7:= v0;
  #L3252fa.  goto L3252fe;
  #L3252fc.  v7:= v11;
  #L3252fe.  if v7 < v9 then goto L325314;
  #L325302.  v21:= v5[v7] @kind byte;
  #L325306.  v6[v26]:= v21 @kind byte;
  #L32530a.  v26:= v26 + 1;
  #L32530e.  v7:= v3[v7] @kind short;
  #L325312.  goto L3252fe;
  #L325314.  v7:= v5[v7] @kind byte;
  #L325318.  v7:= v7 ^& 255;
  #L32531c.  v4:= (`byte`) v7 @kind i2b;
  #L32531e.  v1[v20]:= v4 @kind byte;
  #L325322.  v20:= v20 + 1;
  #L325326.  v13:= v13 + 1;
  #L32532a.  if v26 <= 0 then goto L32533c;
  #L32532e.  v26:= v26 + -1;
  #L325332.  v27:= v6[v26] @kind byte;
  #L325336.  v1[v20]:= v27 @kind byte;
  #L32533a.  goto L325322;
  #L32533c.  v27:= v6 @kind object;
  #L325340.  v6:= 4096I;
  #L325344.  if v8 >= v6 then goto L32536a;
  #L325348.  v0:= (`short`) v0 @kind i2s;
  #L32534a.  v3[v8]:= v0 @kind short;
  #L32534e.  v5[v8]:= v4 @kind byte;
  #L325352.  v8:= v8 + 1;
  #L325356.  v0:= v8 ^& v22 @kind int;
  #L32535a.  if v0 != 0 then goto L32536a;
  #L32535e.  if v8 >= v6 then goto L32536a;
  #L325362.  v15:= v15 + 1;
  #L325366.  v22:= v22 + v8 @kind int;
  #L32536a.  v0:= v11;
  #L32536c.  v11:= v24;
  #L325370.  v4:= v25;
  #L325374.  v6:= v27 @kind object;
  #L325378.  goto L32526c;
  #L32537c.  v25:= v4;
  #L325380.  v24:= v0;
  #L325384.  v21:= v8;
  #L325388.  v18:= v25;
  #L32538c.  v4:= 4096I;
  #L325390.  v8:= 1I;
  #L325392.  v0:= v28 @kind object;
  #L325396.  v25:= v7;
  #L32539a.  v7:= v23;
  #L32539e.  v23:= v15;
  #L3253a2.  v15:= -1I;
  #L3253a4.  goto L325216;
  #L3253a8.  v13:= v20;
  #L3253ac.  v0:= 0I;
  #L3253ae.  call `fill`(v1, v13, v2, v0) @signature `Ljava/util/Arrays;.fill:([BIIB)V` @kind static;
  #L3253b4.  return @kind void;
}
procedure `android.graphics.Bitmap` `o`(`com.bumptech.glide.n.f` v4 @kind this) @signature `Lcom/bumptech/glide/n/f;.o:()Landroid/graphics/Bitmap;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L324734.  v0:= v4.`com.bumptech.glide.n.f.t` @type ^`java.lang.Boolean` @kind object;
  #L324738.  if v0 == 0 then goto L324750;
  #L32473c.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L324742.  v0:= temp;
  #L324744.  if v0 == 0 then goto L32474a;
  #L324748.  goto L324750;
  #L32474a.  v0:= v4.`com.bumptech.glide.n.f.u` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L32474e.  goto L324754;
  #L324750.  v0:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L324754.  v1:= v4.`com.bumptech.glide.n.f.d` @type ^`com.bumptech.glide.n.a` @kind object;
  #L324758.  v2:= v4.`com.bumptech.glide.n.f.s` @type ^`int`;
  #L32475c.  v3:= v4.`com.bumptech.glide.n.f.r` @type ^`int`;
  #L324760.  call temp:= `a`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/n/a;.a:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @kind interface;
  #L324766.  v0:= temp @kind object;
  #L324768.  v1:= 1I;
  #L32476a.  call `setHasAlpha`(v0, v1) @signature `Landroid/graphics/Bitmap;.setHasAlpha:(Z)V` @kind virtual;
  #L324770.  return v0 @kind object;
}
procedure `int` `p`(`com.bumptech.glide.n.f` v5 @kind this) @signature `Lcom/bumptech/glide/n/f;.p:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L324cc0.  call temp:= `q`(v5) @signature `Lcom/bumptech/glide/n/f;.q:()I` @kind direct;
  #L324cc6.  v0:= temp;
  #L324cc8.  if v0 > 0 then goto L324cce;
  #L324ccc.  return v0;
  #L324cce.  v1:= v5.`com.bumptech.glide.n.f.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L324cd2.  v2:= v5.`com.bumptech.glide.n.f.f` @type ^`byte`[] @kind object;
  #L324cd6.  v3:= 0I;
  #L324cd8.  call temp:= `remaining`(v1) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L324cde.  v4:= temp;
  #L324ce0.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L324ce6.  v4:= temp;
  #L324ce8.  call temp:= `get`(v1, v2, v3, v4) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L324cee.  return v0;
}
procedure `int` `q`(`com.bumptech.glide.n.f` v1 @kind this) @signature `Lcom/bumptech/glide/n/f;.q:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L324d00.  v0:= v1.`com.bumptech.glide.n.f.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L324d04.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L324d0a.  v0:= temp;
  #L324d0c.  v0:= v0 ^& 255;
  #L324d10.  return v0;
}
procedure `android.graphics.Bitmap` `s`(`com.bumptech.glide.n.f` v9 @kind this, `com.bumptech.glide.n.c` v10 @kind object, `com.bumptech.glide.n.c` v11 @kind object) @signature `Lcom/bumptech/glide/n/f;.s:(Lcom/bumptech/glide/n/c;Lcom/bumptech/glide/n/c;)Landroid/graphics/Bitmap;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L324950.  v8:= v9.`com.bumptech.glide.n.f.k` @type ^`int`[] @kind object;
  #L324954.  v0:= 0I;
  #L324956.  if v11 != 0 then goto L324978;
  #L32495a.  v1:= v9.`com.bumptech.glide.n.f.n` @type ^`android.graphics.Bitmap` @kind object;
  #L32495e.  if v1 == 0 then goto L32496c;
  #L324962.  v2:= v9.`com.bumptech.glide.n.f.d` @type ^`com.bumptech.glide.n.a` @kind object;
  #L324966.  call `c`(v2, v1) @signature `Lcom/bumptech/glide/n/a;.c:(Landroid/graphics/Bitmap;)V` @kind interface;
  #L32496c.  v1:= 0I;
  #L32496e.  v9.`com.bumptech.glide.n.f.n` @type ^`android.graphics.Bitmap` := v1 @kind object;
  #L324972.  call `fill`(v8, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L324978.  v1:= 3I;
  #L32497a.  if v11 == 0 then goto L324994;
  #L32497e.  v2:= v11.`com.bumptech.glide.n.c.g` @type ^`int`;
  #L324982.  if v2 != v1 then goto L324994;
  #L324986.  v2:= v9.`com.bumptech.glide.n.f.n` @type ^`android.graphics.Bitmap` @kind object;
  #L32498a.  if v2 != 0 then goto L324994;
  #L32498e.  call `fill`(v8, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L324994.  if v11 == 0 then goto L324a50;
  #L324998.  v2:= v11.`com.bumptech.glide.n.c.g` @type ^`int`;
  #L32499c.  if v2 <= 0 then goto L324a50;
  #L3249a0.  v3:= 2I;
  #L3249a2.  if v2 != v3 then goto L324a2c;
  #L3249a6.  v1:= v10.`com.bumptech.glide.n.c.f` @type ^`boolean` @kind boolean;
  #L3249aa.  if v1 != 0 then goto L3249d0;
  #L3249ae.  v1:= v9.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3249b2.  v2:= v1.`com.bumptech.glide.n.d.l` @type ^`int`;
  #L3249b6.  v3:= v10.`com.bumptech.glide.n.c.k` @type ^`int`[] @kind object;
  #L3249ba.  if v3 == 0 then goto L3249cc;
  #L3249be.  v1:= v1.`com.bumptech.glide.n.d.j` @type ^`int`;
  #L3249c2.  v3:= v10.`com.bumptech.glide.n.c.h` @type ^`int`;
  #L3249c6.  if v1 != v3 then goto L3249cc;
  #L3249ca.  goto L3249e0;
  #L3249cc.  v0:= v2;
  #L3249ce.  goto L3249e0;
  #L3249d0.  v1:= v9.`com.bumptech.glide.n.f.l` @type ^`int`;
  #L3249d4.  if v1 != 0 then goto L3249e0;
  #L3249d8.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3249dc.  v9.`com.bumptech.glide.n.f.t` @type ^`java.lang.Boolean` := v1 @kind object;
  #L3249e0.  v1:= v11.`com.bumptech.glide.n.c.d` @type ^`int`;
  #L3249e4.  v2:= v9.`com.bumptech.glide.n.f.q` @type ^`int`;
  #L3249e8.  v1:= v1 / v2 @kind int;
  #L3249ea.  v3:= v11.`com.bumptech.glide.n.c.b` @type ^`int`;
  #L3249ee.  v3:= v3 / v2 @kind int;
  #L3249f0.  v4:= v11.`com.bumptech.glide.n.c.c` @type ^`int`;
  #L3249f4.  v4:= v4 / v2 @kind int;
  #L3249f6.  v11:= v11.`com.bumptech.glide.n.c.a` @type ^`int`;
  #L3249fa.  v11:= v11 / v2 @kind int;
  #L3249fc.  v2:= v9.`com.bumptech.glide.n.f.s` @type ^`int`;
  #L324a00.  v3:= v3 * v2 @kind int;
  #L324a04.  v3:= v3 + v11 @kind int;
  #L324a06.  v1:= v1 * v2 @kind int;
  #L324a0a.  v1:= v1 + v3 @kind int;
  #L324a0c.  if v3 >= v1 then goto L324a50;
  #L324a10.  v11:= v3 + v4 @kind int;
  #L324a14.  v2:= v3;
  #L324a16.  if v2 >= v11 then goto L324a24;
  #L324a1a.  v8[v2]:= v0;
  #L324a1e.  v2:= v2 + 1;
  #L324a22.  goto L324a16;
  #L324a24.  v11:= v9.`com.bumptech.glide.n.f.s` @type ^`int`;
  #L324a28.  v3:= v3 + v11 @kind int;
  #L324a2a.  goto L324a0c;
  #L324a2c.  if v2 != v1 then goto L324a50;
  #L324a30.  v0:= v9.`com.bumptech.glide.n.f.n` @type ^`android.graphics.Bitmap` @kind object;
  #L324a34.  if v0 == 0 then goto L324a50;
  #L324a38.  v2:= 0I;
  #L324a3a.  v6:= v9.`com.bumptech.glide.n.f.s` @type ^`int`;
  #L324a3e.  v4:= 0I;
  #L324a40.  v5:= 0I;
  #L324a42.  v7:= v9.`com.bumptech.glide.n.f.r` @type ^`int`;
  #L324a46.  v1:= v8 @kind object;
  #L324a48.  v3:= v6;
  #L324a4a.  call `getPixels`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Landroid/graphics/Bitmap;.getPixels:([IIIIIII)V` @kind virtual;
  #L324a50.  call `m`(v9, v10) @signature `Lcom/bumptech/glide/n/f;.m:(Lcom/bumptech/glide/n/c;)V` @kind direct;
  #L324a56.  v11:= v10.`com.bumptech.glide.n.c.e` @type ^`boolean` @kind boolean;
  #L324a5a.  v0:= 1I;
  #L324a5c.  if v11 != 0 then goto L324a72;
  #L324a60.  v11:= v9.`com.bumptech.glide.n.f.q` @type ^`int`;
  #L324a64.  if v11 == v0 then goto L324a6a;
  #L324a68.  goto L324a72;
  #L324a6a.  call `l`(v9, v10) @signature `Lcom/bumptech/glide/n/f;.l:(Lcom/bumptech/glide/n/c;)V` @kind direct;
  #L324a70.  goto L324a78;
  #L324a72.  call `k`(v9, v10) @signature `Lcom/bumptech/glide/n/f;.k:(Lcom/bumptech/glide/n/c;)V` @kind direct;
  #L324a78.  v11:= v9.`com.bumptech.glide.n.f.o` @type ^`boolean` @kind boolean;
  #L324a7c.  if v11 == 0 then goto L324abc;
  #L324a80.  v10:= v10.`com.bumptech.glide.n.c.g` @type ^`int`;
  #L324a84.  if v10 == 0 then goto L324a8c;
  #L324a88.  if v10 != v0 then goto L324abc;
  #L324a8c.  v10:= v9.`com.bumptech.glide.n.f.n` @type ^`android.graphics.Bitmap` @kind object;
  #L324a90.  if v10 != 0 then goto L324aa0;
  #L324a94.  call temp:= `o`(v9) @signature `Lcom/bumptech/glide/n/f;.o:()Landroid/graphics/Bitmap;` @kind direct;
  #L324a9a.  v10:= temp @kind object;
  #L324a9c.  v9.`com.bumptech.glide.n.f.n` @type ^`android.graphics.Bitmap` := v10 @kind object;
  #L324aa0.  v0:= v9.`com.bumptech.glide.n.f.n` @type ^`android.graphics.Bitmap` @kind object;
  #L324aa4.  v2:= 0I;
  #L324aa6.  v6:= v9.`com.bumptech.glide.n.f.s` @type ^`int`;
  #L324aaa.  v4:= 0I;
  #L324aac.  v5:= 0I;
  #L324aae.  v7:= v9.`com.bumptech.glide.n.f.r` @type ^`int`;
  #L324ab2.  v1:= v8 @kind object;
  #L324ab4.  v3:= v6;
  #L324ab6.  call `setPixels`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Landroid/graphics/Bitmap;.setPixels:([IIIIIII)V` @kind virtual;
  #L324abc.  call temp:= `o`(v9) @signature `Lcom/bumptech/glide/n/f;.o:()Landroid/graphics/Bitmap;` @kind direct;
  #L324ac2.  v10:= temp @kind object;
  #L324ac4.  v2:= 0I;
  #L324ac6.  v6:= v9.`com.bumptech.glide.n.f.s` @type ^`int`;
  #L324aca.  v4:= 0I;
  #L324acc.  v5:= 0I;
  #L324ace.  v7:= v9.`com.bumptech.glide.n.f.r` @type ^`int`;
  #L324ad2.  v0:= v10 @kind object;
  #L324ad4.  v1:= v8 @kind object;
  #L324ad6.  v3:= v6;
  #L324ad8.  call `setPixels`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Landroid/graphics/Bitmap;.setPixels:([IIIIIII)V` @kind virtual;
  #L324ade.  return v10 @kind object;
}
procedure `android.graphics.Bitmap` `a`(`com.bumptech.glide.n.f` v7 @kind this) @signature `Lcom/bumptech/glide/n/f;.a:()Landroid/graphics/Bitmap;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L324784.  @monitorenter v7
  #L324786.  v0:= v7.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` @kind object;
  #L32478a.  v0:= v0.`com.bumptech.glide.n.d.c` @type ^`int`;
  #L32478e.  v1:= 3I;
  #L324790.  v2:= 1I;
  #L324792.  if v0 <= 0 then goto L32479e;
  #L324796.  v0:= v7.`com.bumptech.glide.n.f.l` @type ^`int`;
  #L32479a.  if v0 >= 0 then goto L3247ee;
  #L32479e.  v0:= `@@com.bumptech.glide.n.f.a` @type ^`java.lang.String` @kind object;
  #L3247a2.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3247a8.  v0:= temp;
  #L3247aa.  if v0 == 0 then goto L3247ea;
  #L3247ae.  v0:= new `java.lang.StringBuilder`;
  #L3247b2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3247b8.  v3:= "Unable to decode frame, frameCount=" @kind object;
  #L3247bc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3247c2.  v3:= v7.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3247c6.  v3:= v3.`com.bumptech.glide.n.d.c` @type ^`int`;
  #L3247ca.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3247d0.  v3:= ", framePointer=" @kind object;
  #L3247d4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3247da.  v3:= v7.`com.bumptech.glide.n.f.l` @type ^`int`;
  #L3247de.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3247e4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3247ea.  v7.`com.bumptech.glide.n.f.p` @type ^`int` := v2;
  #L3247ee.  v0:= v7.`com.bumptech.glide.n.f.p` @type ^`int`;
  #L3247f2.  v3:= 0I;
  #L3247f4.  if v0 == v2 then goto L3248e4;
  #L3247f8.  v4:= 2I;
  #L3247fa.  if v0 != v4 then goto L324802;
  #L3247fe.  goto L3248e4;
  #L324802.  v0:= 0I;
  #L324804.  v7.`com.bumptech.glide.n.f.p` @type ^`int` := v0;
  #L324808.  v4:= v7.`com.bumptech.glide.n.f.f` @type ^`byte`[] @kind object;
  #L32480c.  if v4 != 0 then goto L324824;
  #L324810.  v4:= v7.`com.bumptech.glide.n.f.d` @type ^`com.bumptech.glide.n.a` @kind object;
  #L324814.  v5:= 255I;
  #L324818.  call temp:= `e`(v4, v5) @signature `Lcom/bumptech/glide/n/a;.e:(I)[B` @kind interface;
  #L32481e.  v4:= temp @kind object;
  #L324820.  v7.`com.bumptech.glide.n.f.f` @type ^`byte`[] := v4 @kind object;
  #L324824.  v4:= v7.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324828.  v4:= v4.`com.bumptech.glide.n.d.e` @type ^`java.util.List` @kind object;
  #L32482c.  v5:= v7.`com.bumptech.glide.n.f.l` @type ^`int`;
  #L324830.  call temp:= `get`(v4, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L324836.  v4:= temp @kind object;
  #L324838.  v4:= (`com.bumptech.glide.n.c`) v4 @kind object;
  #L32483c.  v5:= v7.`com.bumptech.glide.n.f.l` @type ^`int`;
  #L324840.  v5:= v5 - v2 @kind int;
  #L324842.  if v5 < 0 then goto L32485c;
  #L324846.  v6:= v7.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` @kind object;
  #L32484a.  v6:= v6.`com.bumptech.glide.n.d.e` @type ^`java.util.List` @kind object;
  #L32484e.  call temp:= `get`(v6, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L324854.  v5:= temp @kind object;
  #L324856.  v5:= (`com.bumptech.glide.n.c`) v5 @kind object;
  #L32485a.  goto L32485e;
  #L32485c.  v5:= v3 @kind object;
  #L32485e.  v6:= v4.`com.bumptech.glide.n.c.k` @type ^`int`[] @kind object;
  #L324862.  if v6 == 0 then goto L324868;
  #L324866.  goto L324870;
  #L324868.  v6:= v7.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` @kind object;
  #L32486c.  v6:= v6.`com.bumptech.glide.n.d.a` @type ^`int`[] @kind object;
  #L324870.  v7.`com.bumptech.glide.n.f.b` @type ^`int`[] := v6 @kind object;
  #L324874.  if v6 != 0 then goto L3248b4;
  #L324878.  v0:= `@@com.bumptech.glide.n.f.a` @type ^`java.lang.String` @kind object;
  #L32487c.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L324882.  v0:= temp;
  #L324884.  if v0 == 0 then goto L3248ac;
  #L324888.  v0:= new `java.lang.StringBuilder`;
  #L32488c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L324892.  v1:= "No valid color table found for frame #" @kind object;
  #L324896.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32489c.  v1:= v7.`com.bumptech.glide.n.f.l` @type ^`int`;
  #L3248a0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3248a6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3248ac.  v7.`com.bumptech.glide.n.f.p` @type ^`int` := v2;
  #L3248b0.  @monitorexit v7
  #L3248b2.  return v3 @kind object;
  #L3248b4.  v1:= v4.`com.bumptech.glide.n.c.f` @type ^`boolean` @kind boolean;
  #L3248b8.  if v1 == 0 then goto L3248d8;
  #L3248bc.  v1:= v7.`com.bumptech.glide.n.f.c` @type ^`int`[] @kind object;
  #L3248c0.  v2:= length @variable v6;
  #L3248c2.  call `arraycopy`(v6, v0, v1, v0, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3248c8.  v1:= v7.`com.bumptech.glide.n.f.c` @type ^`int`[] @kind object;
  #L3248cc.  v7.`com.bumptech.glide.n.f.b` @type ^`int`[] := v1 @kind object;
  #L3248d0.  v2:= v4.`com.bumptech.glide.n.c.h` @type ^`int`;
  #L3248d4.  v1[v2]:= v0;
  #L3248d8.  call temp:= `s`(v7, v4, v5) @signature `Lcom/bumptech/glide/n/f;.s:(Lcom/bumptech/glide/n/c;Lcom/bumptech/glide/n/c;)Landroid/graphics/Bitmap;` @kind direct;
  #L3248de.  v0:= temp @kind object;
  #L3248e0.  @monitorexit v7
  #L3248e2.  return v0 @kind object;
  #L3248e4.  v0:= `@@com.bumptech.glide.n.f.a` @type ^`java.lang.String` @kind object;
  #L3248e8.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3248ee.  v0:= temp;
  #L3248f0.  if v0 == 0 then goto L324918;
  #L3248f4.  v0:= new `java.lang.StringBuilder`;
  #L3248f8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3248fe.  v1:= "Unable to decode frame, status=" @kind object;
  #L324902.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L324908.  v1:= v7.`com.bumptech.glide.n.f.p` @type ^`int`;
  #L32490c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L324912.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L324918.  @monitorexit v7
  #L32491a.  return v3 @kind object;
  #L32491c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32491e.  @monitorexit v7
  #L324920.  throw v0;
  catch `java.lang.Throwable` @[L324786..L3248b0] goto L32491c;
  catch `java.lang.Throwable` @[L3248b4..L3248e0] goto L32491c;
  catch `java.lang.Throwable` @[L3248e4..L324918] goto L32491c;
}
procedure `void` `b`(`com.bumptech.glide.n.f` v2 @kind this) @signature `Lcom/bumptech/glide/n/f;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L324db0.  v0:= v2.`com.bumptech.glide.n.f.l` @type ^`int`;
  #L324db4.  v0:= v0 + 1;
  #L324db8.  v1:= v2.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324dbc.  v1:= v1.`com.bumptech.glide.n.d.c` @type ^`int`;
  #L324dc0.  v0:= v0 %% v1 @kind int;
  #L324dc2.  v2.`com.bumptech.glide.n.f.l` @type ^`int` := v0;
  #L324dc6.  return @kind void;
}
procedure `int` `c`(`com.bumptech.glide.n.f` v1 @kind this) @signature `Lcom/bumptech/glide/n/f;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L324c70.  v0:= v1.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324c74.  v0:= v0.`com.bumptech.glide.n.d.c` @type ^`int`;
  #L324c78.  return v0;
}
procedure `void` `clear`(`com.bumptech.glide.n.f` v3 @kind this) @signature `Lcom/bumptech/glide/n/f;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L324dd8.  v0:= 0I;
  #L324dda.  v3.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` := v0 @kind object;
  #L324dde.  v1:= v3.`com.bumptech.glide.n.f.j` @type ^`byte`[] @kind object;
  #L324de2.  if v1 == 0 then goto L324df0;
  #L324de6.  v2:= v3.`com.bumptech.glide.n.f.d` @type ^`com.bumptech.glide.n.a` @kind object;
  #L324dea.  call `d`(v2, v1) @signature `Lcom/bumptech/glide/n/a;.d:([B)V` @kind interface;
  #L324df0.  v1:= v3.`com.bumptech.glide.n.f.k` @type ^`int`[] @kind object;
  #L324df4.  if v1 == 0 then goto L324e02;
  #L324df8.  v2:= v3.`com.bumptech.glide.n.f.d` @type ^`com.bumptech.glide.n.a` @kind object;
  #L324dfc.  call `f`(v2, v1) @signature `Lcom/bumptech/glide/n/a;.f:([I)V` @kind interface;
  #L324e02.  v1:= v3.`com.bumptech.glide.n.f.n` @type ^`android.graphics.Bitmap` @kind object;
  #L324e06.  if v1 == 0 then goto L324e14;
  #L324e0a.  v2:= v3.`com.bumptech.glide.n.f.d` @type ^`com.bumptech.glide.n.a` @kind object;
  #L324e0e.  call `c`(v2, v1) @signature `Lcom/bumptech/glide/n/a;.c:(Landroid/graphics/Bitmap;)V` @kind interface;
  #L324e14.  v3.`com.bumptech.glide.n.f.n` @type ^`android.graphics.Bitmap` := v0 @kind object;
  #L324e18.  v3.`com.bumptech.glide.n.f.e` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L324e1c.  v3.`com.bumptech.glide.n.f.t` @type ^`java.lang.Boolean` := v0 @kind object;
  #L324e20.  v0:= v3.`com.bumptech.glide.n.f.f` @type ^`byte`[] @kind object;
  #L324e24.  if v0 == 0 then goto L324e32;
  #L324e28.  v1:= v3.`com.bumptech.glide.n.f.d` @type ^`com.bumptech.glide.n.a` @kind object;
  #L324e2c.  call `d`(v1, v0) @signature `Lcom/bumptech/glide/n/a;.d:([B)V` @kind interface;
  #L324e32.  return @kind void;
}
procedure `int` `d`(`com.bumptech.glide.n.f` v1 @kind this) @signature `Lcom/bumptech/glide/n/f;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L324c8c.  v0:= v1.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324c90.  v0:= v0.`com.bumptech.glide.n.d.c` @type ^`int`;
  #L324c94.  if v0 <= 0 then goto L324cac;
  #L324c98.  v0:= v1.`com.bumptech.glide.n.f.l` @type ^`int`;
  #L324c9c.  if v0 >= 0 then goto L324ca2;
  #L324ca0.  goto L324cac;
  #L324ca2.  call temp:= `n`(v1, v0) @signature `Lcom/bumptech/glide/n/f;.n:(I)I` @kind virtual;
  #L324ca8.  v0:= temp;
  #L324caa.  return v0;
  #L324cac.  v0:= 0I;
  #L324cae.  return v0;
}
procedure `void` `e`(`com.bumptech.glide.n.f` v3 @kind this, `android.graphics.Bitmap$Config` v4 @kind object) @signature `Lcom/bumptech/glide/n/f;.e:(Landroid/graphics/Bitmap$Config;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L325504.  v0:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L325508.  if v4 == v0 then goto L32556c;
  #L32550c.  v0:= `@@android.graphics.Bitmap$Config.RGB_565` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L325510.  if v4 != v0 then goto L325516;
  #L325514.  goto L32556c;
  #L325516.  v0:= new `java.lang.IllegalArgumentException`;
  #L32551a.  v1:= new `java.lang.StringBuilder`;
  #L32551e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L325524.  v2:= "Unsupported format: " @kind object;
  #L325528.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32552e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325534.  v4:= ", must be one of " @kind object;
  #L325538.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32553e.  v4:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L325542.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325548.  v4:= " or " @kind object;
  #L32554c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325552.  v4:= `@@android.graphics.Bitmap$Config.RGB_565` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L325556.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32555c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L325562.  v4:= temp @kind object;
  #L325564.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32556a.  throw v0;
  #L32556c.  v3.`com.bumptech.glide.n.f.u` @type ^`android.graphics.Bitmap$Config` := v4 @kind object;
  #L325570.  return @kind void;
}
procedure `java.nio.ByteBuffer` `f`(`com.bumptech.glide.n.f` v1 @kind this) @signature `Lcom/bumptech/glide/n/f;.f:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L324d24.  v0:= v1.`com.bumptech.glide.n.f.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L324d28.  return v0 @kind object;
}
procedure `void` `g`(`com.bumptech.glide.n.f` v1 @kind this) @signature `Lcom/bumptech/glide/n/f;.g:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3253c8.  v0:= -1I;
  #L3253ca.  v1.`com.bumptech.glide.n.f.l` @type ^`int` := v0;
  #L3253ce.  return @kind void;
}
procedure `int` `h`(`com.bumptech.glide.n.f` v1 @kind this) @signature `Lcom/bumptech/glide/n/f;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L324c1c.  v0:= v1.`com.bumptech.glide.n.f.l` @type ^`int`;
  #L324c20.  return v0;
}
procedure `int` `i`(`com.bumptech.glide.n.f` v2 @kind this) @signature `Lcom/bumptech/glide/n/f;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L324be8.  v0:= v2.`com.bumptech.glide.n.f.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L324bec.  call temp:= `limit`(v0) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L324bf2.  v0:= temp;
  #L324bf4.  v1:= v2.`com.bumptech.glide.n.f.j` @type ^`byte`[] @kind object;
  #L324bf8.  v1:= length @variable v1;
  #L324bfa.  v0:= v0 + v1 @kind int;
  #L324bfc.  v1:= v2.`com.bumptech.glide.n.f.k` @type ^`int`[] @kind object;
  #L324c00.  v1:= length @variable v1;
  #L324c02.  v1:= v1 * 4;
  #L324c06.  v0:= v0 + v1 @kind int;
  #L324c08.  return v0;
}
procedure `int` `n`(`com.bumptech.glide.n.f` v2 @kind this, `int` v3 ) @signature `Lcom/bumptech/glide/n/f;.n:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L324c34.  if v3 < 0 then goto L324c5a;
  #L324c38.  v0:= v2.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324c3c.  v1:= v0.`com.bumptech.glide.n.d.c` @type ^`int`;
  #L324c40.  if v3 >= v1 then goto L324c5a;
  #L324c44.  v0:= v0.`com.bumptech.glide.n.d.e` @type ^`java.util.List` @kind object;
  #L324c48.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L324c4e.  v3:= temp @kind object;
  #L324c50.  v3:= (`com.bumptech.glide.n.c`) v3 @kind object;
  #L324c54.  v3:= v3.`com.bumptech.glide.n.c.i` @type ^`int`;
  #L324c58.  goto L324c5c;
  #L324c5a.  v3:= -1I;
  #L324c5c.  return v3;
}
procedure `void` `r`(`com.bumptech.glide.n.f` v2 @kind this, `com.bumptech.glide.n.d` v3 @kind object, `java.nio.ByteBuffer` v4 @kind object, `int` v5 ) @signature `Lcom/bumptech/glide/n/f;.r:(Lcom/bumptech/glide/n/d;Ljava/nio/ByteBuffer;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3253e0.  @monitorenter v2
  #L3253e2.  if v5 <= 0 then goto L3254aa;
  #L3253e6.  call temp:= `highestOneBit`(v5) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L3253ec.  v5:= temp;
  #L3253ee.  v0:= 0I;
  #L3253f0.  v2.`com.bumptech.glide.n.f.p` @type ^`int` := v0;
  #L3253f4.  v2.`com.bumptech.glide.n.f.m` @type ^`com.bumptech.glide.n.d` := v3 @kind object;
  #L3253f8.  v1:= -1I;
  #L3253fa.  v2.`com.bumptech.glide.n.f.l` @type ^`int` := v1;
  #L3253fe.  call temp:= `asReadOnlyBuffer`(v4) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L325404.  v4:= temp @kind object;
  #L325406.  v2.`com.bumptech.glide.n.f.e` @type ^`java.nio.ByteBuffer` := v4 @kind object;
  #L32540a.  call temp:= `position`(v4, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L325410.  v4:= v2.`com.bumptech.glide.n.f.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L325414.  v1:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L325418.  call temp:= `order`(v4, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L32541e.  v2.`com.bumptech.glide.n.f.o` @type ^`boolean` := v0 @kind boolean;
  #L325422.  v4:= v3.`com.bumptech.glide.n.d.e` @type ^`java.util.List` @kind object;
  #L325426.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L32542c.  v4:= temp @kind object;
  #L32542e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L325434.  v0:= temp;
  #L325436.  if v0 == 0 then goto L325456;
  #L32543a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L325440.  v0:= temp @kind object;
  #L325442.  v0:= (`com.bumptech.glide.n.c`) v0 @kind object;
  #L325446.  v0:= v0.`com.bumptech.glide.n.c.g` @type ^`int`;
  #L32544a.  v1:= 3I;
  #L32544c.  if v0 != v1 then goto L32542e;
  #L325450.  v4:= 1I;
  #L325452.  v2.`com.bumptech.glide.n.f.o` @type ^`boolean` := v4 @kind boolean;
  #L325456.  v2.`com.bumptech.glide.n.f.q` @type ^`int` := v5;
  #L32545a.  v4:= v3.`com.bumptech.glide.n.d.f` @type ^`int`;
  #L32545e.  v0:= v4 / v5 @kind int;
  #L325462.  v2.`com.bumptech.glide.n.f.s` @type ^`int` := v0;
  #L325466.  v3:= v3.`com.bumptech.glide.n.d.g` @type ^`int`;
  #L32546a.  v5:= v3 / v5 @kind int;
  #L32546e.  v2.`com.bumptech.glide.n.f.r` @type ^`int` := v5;
  #L325472.  v5:= v2.`com.bumptech.glide.n.f.d` @type ^`com.bumptech.glide.n.a` @kind object;
  #L325476.  v4:= v4 * v3 @kind int;
  #L32547a.  call temp:= `e`(v5, v4) @signature `Lcom/bumptech/glide/n/a;.e:(I)[B` @kind interface;
  #L325480.  v3:= temp @kind object;
  #L325482.  v2.`com.bumptech.glide.n.f.j` @type ^`byte`[] := v3 @kind object;
  #L325486.  v3:= v2.`com.bumptech.glide.n.f.d` @type ^`com.bumptech.glide.n.a` @kind object;
  #L32548a.  v4:= v2.`com.bumptech.glide.n.f.s` @type ^`int`;
  #L32548e.  v5:= v2.`com.bumptech.glide.n.f.r` @type ^`int`;
  #L325492.  v4:= v4 * v5 @kind int;
  #L325496.  call temp:= `b`(v3, v4) @signature `Lcom/bumptech/glide/n/a;.b:(I)[I` @kind interface;
  #L32549c.  v3:= temp @kind object;
  #L32549e.  v2.`com.bumptech.glide.n.f.k` @type ^`int`[] := v3 @kind object;
  #L3254a2.  @monitorexit v2
  #L3254a4.  return @kind void;
  #L3254a6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3254a8.  goto L3254d8;
  #L3254aa.  v3:= new `java.lang.IllegalArgumentException`;
  #L3254ae.  v4:= new `java.lang.StringBuilder`;
  #L3254b2.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3254b8.  v0:= "Sample size must be >=0, not: " @kind object;
  #L3254bc.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3254c2.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3254c8.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3254ce.  v4:= temp @kind object;
  #L3254d0.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3254d6.  throw v3;
  #L3254d8.  @monitorexit v2
  #L3254da.  goto L3254de;
  #L3254dc.  throw v3;
  #L3254de.  goto L3254dc;
  catch `java.lang.Throwable` @[L3253e6..L3254a2] goto L3254a6;
  catch `java.lang.Throwable` @[L3254aa..L3254d8] goto L3254a6;
}
