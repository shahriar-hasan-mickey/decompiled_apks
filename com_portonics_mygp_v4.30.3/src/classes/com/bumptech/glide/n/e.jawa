record `com.bumptech.glide.n.e` @kind class @AccessFlag PUBLIC {
  `byte`[] `com.bumptech.glide.n.e.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.bumptech.glide.n.e.b` @AccessFlag PRIVATE;
  `com.bumptech.glide.n.d` `com.bumptech.glide.n.e.c` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.n.e.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.n.e` v1 @kind this) @signature `Lcom/bumptech/glide/n/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L324088.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32408e.  v0:= 256I;
  #L324092.  v0:= new `byte`[v0];
  #L324096.  v1.`com.bumptech.glide.n.e.a` @type ^`byte`[] := v0 @kind object;
  #L32409a.  v0:= 0I;
  #L32409c.  v1.`com.bumptech.glide.n.e.d` @type ^`int` := v0;
  #L3240a0.  return @kind void;
}
procedure `boolean` `b`(`com.bumptech.glide.n.e` v1 @kind this) @signature `Lcom/bumptech/glide/n/e;.b:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L323eb8.  v0:= v1.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L323ebc.  v0:= v0.`com.bumptech.glide.n.d.b` @type ^`int`;
  #L323ec0.  if v0 == 0 then goto L323ec8;
  #L323ec4.  v0:= 1I;
  #L323ec6.  goto L323eca;
  #L323ec8.  v0:= 0I;
  #L323eca.  return v0;
}
procedure `int` `d`(`com.bumptech.glide.n.e` v2 @kind this) @signature `Lcom/bumptech/glide/n/e;.d:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L323f84.  v0:= v2.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L323f88.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L323f8e.  v0:= temp;
  #L323f90.  v0:= v0 ^& 255;
  #L323f94.  goto L323fa2;
  #L323f96.  v0:= v2.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L323f9a.  v1:= 1I;
  #L323f9c.  v0.`com.bumptech.glide.n.d.b` @type ^`int` := v1;
  #L323fa0.  v0:= 0I;
  #L323fa2.  return v0;
  catch `java.lang.Exception` @[L323f84..L323f90] goto L323f96;
}
procedure `void` `e`(`com.bumptech.glide.n.e` v8 @kind this) @signature `Lcom/bumptech/glide/n/e;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3240d0.  v0:= v8.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3240d4.  v0:= v0.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` @kind object;
  #L3240d8.  call temp:= `n`(v8) @signature `Lcom/bumptech/glide/n/e;.n:()I` @kind direct;
  #L3240de.  v1:= temp;
  #L3240e0.  v0.`com.bumptech.glide.n.c.a` @type ^`int` := v1;
  #L3240e4.  v0:= v8.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3240e8.  v0:= v0.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` @kind object;
  #L3240ec.  call temp:= `n`(v8) @signature `Lcom/bumptech/glide/n/e;.n:()I` @kind direct;
  #L3240f2.  v1:= temp;
  #L3240f4.  v0.`com.bumptech.glide.n.c.b` @type ^`int` := v1;
  #L3240f8.  v0:= v8.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3240fc.  v0:= v0.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` @kind object;
  #L324100.  call temp:= `n`(v8) @signature `Lcom/bumptech/glide/n/e;.n:()I` @kind direct;
  #L324106.  v1:= temp;
  #L324108.  v0.`com.bumptech.glide.n.c.c` @type ^`int` := v1;
  #L32410c.  v0:= v8.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324110.  v0:= v0.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` @kind object;
  #L324114.  call temp:= `n`(v8) @signature `Lcom/bumptech/glide/n/e;.n:()I` @kind direct;
  #L32411a.  v1:= temp;
  #L32411c.  v0.`com.bumptech.glide.n.c.d` @type ^`int` := v1;
  #L324120.  call temp:= `d`(v8) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L324126.  v0:= temp;
  #L324128.  v1:= v0 ^& 128;
  #L32412c.  v2:= 0I;
  #L32412e.  v3:= 1I;
  #L324130.  if v1 == 0 then goto L324138;
  #L324134.  v1:= 1I;
  #L324136.  goto L32413a;
  #L324138.  v1:= 0I;
  #L32413a.  v4:= 2.0D;
  #L32413e.  v6:= v0 ^& 7;
  #L324142.  v6:= v6 + v3 @kind int;
  #L324144.  v6:= (`double`) v6 @kind i2d;
  #L324146.  call temp:= `pow`(v4, v6) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L32414c.  v4:= temp @kind wide;
  #L32414e.  v4:= (`int`) v4 @kind d2i;
  #L324150.  v5:= v8.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324154.  v5:= v5.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` @kind object;
  #L324158.  v0:= v0 ^& 64;
  #L32415c.  if v0 == 0 then goto L324162;
  #L324160.  v2:= 1I;
  #L324162.  v5.`com.bumptech.glide.n.c.e` @type ^`boolean` := v2 @kind boolean;
  #L324166.  if v1 == 0 then goto L324178;
  #L32416a.  call temp:= `g`(v8, v4) @signature `Lcom/bumptech/glide/n/e;.g:(I)[I` @kind direct;
  #L324170.  v0:= temp @kind object;
  #L324172.  v5.`com.bumptech.glide.n.c.k` @type ^`int`[] := v0 @kind object;
  #L324176.  goto L32417e;
  #L324178.  v0:= 0I;
  #L32417a.  v5.`com.bumptech.glide.n.c.k` @type ^`int`[] := v0 @kind object;
  #L32417e.  v0:= v8.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324182.  v0:= v0.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` @kind object;
  #L324186.  v1:= v8.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L32418a.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L324190.  v1:= temp;
  #L324192.  v0.`com.bumptech.glide.n.c.j` @type ^`int` := v1;
  #L324196.  call `r`(v8) @signature `Lcom/bumptech/glide/n/e;.r:()V` @kind direct;
  #L32419c.  call temp:= `b`(v8) @signature `Lcom/bumptech/glide/n/e;.b:()Z` @kind direct;
  #L3241a2.  v0:= temp;
  #L3241a4.  if v0 == 0 then goto L3241aa;
  #L3241a8.  return @kind void;
  #L3241aa.  v0:= v8.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3241ae.  v1:= v0.`com.bumptech.glide.n.d.c` @type ^`int`;
  #L3241b2.  v1:= v1 + v3 @kind int;
  #L3241b4.  v0.`com.bumptech.glide.n.d.c` @type ^`int` := v1;
  #L3241b8.  v1:= v0.`com.bumptech.glide.n.d.e` @type ^`java.util.List` @kind object;
  #L3241bc.  v0:= v0.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` @kind object;
  #L3241c0.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3241c6.  return @kind void;
}
procedure `void` `f`(`com.bumptech.glide.n.e` v4 @kind this) @signature `Lcom/bumptech/glide/n/e;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3241d8.  call temp:= `d`(v4) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L3241de.  v0:= temp;
  #L3241e0.  v4.`com.bumptech.glide.n.e.d` @type ^`int` := v0;
  #L3241e4.  if v0 <= 0 then goto L32426a;
  #L3241e8.  v0:= 0I;
  #L3241ea.  v1:= 0I;
  #L3241ec.  v1:= v4.`com.bumptech.glide.n.e.d` @type ^`int`;
  #L3241f0.  if v0 >= v1 then goto L32426a;
  #L3241f4.  v1:= v1 - v0 @kind int;
  #L3241f6.  v2:= v4.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3241fa.  v3:= v4.`com.bumptech.glide.n.e.a` @type ^`byte`[] @kind object;
  #L3241fe.  call temp:= `get`(v2, v3, v0, v1) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L324204.  v0:= v0 + v1 @kind int;
  #L324206.  goto L3241ec;
  #L324208.  
  #L32420a.  v2:= 3I;
  #L32420c.  v3:= "GifHeaderParser" @kind object;
  #L324210.  call temp:= `isLoggable`(v3, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L324216.  v2:= temp;
  #L324218.  if v2 == 0 then goto L324260;
  #L32421c.  v2:= new `java.lang.StringBuilder`;
  #L324220.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L324226.  v3:= "Error Reading Block n: " @kind object;
  #L32422a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L324230.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L324236.  v0:= " count: " @kind object;
  #L32423a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L324240.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L324246.  v0:= " blockSize: " @kind object;
  #L32424a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L324250.  v0:= v4.`com.bumptech.glide.n.e.d` @type ^`int`;
  #L324254.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32425a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L324260.  v0:= v4.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324264.  v1:= 1I;
  #L324266.  v0.`com.bumptech.glide.n.d.b` @type ^`int` := v1;
  #L32426a.  return @kind void;
  catch `java.lang.Exception` @[L3241ec..L324204] goto L324208;
}
procedure `int`[] `g`(`com.bumptech.glide.n.e` v9 @kind this, `int` v10 ) @signature `Lcom/bumptech/glide/n/e;.g:(I)[I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L323fe4.  v0:= v10 * 3;
  #L323fe8.  v0:= new `byte`[v0];
  #L323fec.  v1:= 0I;
  #L323fee.  v2:= v9.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L323ff2.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L323ff8.  v2:= 256I;
  #L323ffc.  v1:= new `int`[v2];
  #L324000.  v2:= 0I;
  #L324002.  v3:= 0I;
  #L324004.  if v2 >= v10 then goto L324066;
  #L324008.  v4:= v3 + 1;
  #L32400c.  v3:= v0[v3] @kind byte;
  #L324010.  v3:= v3 ^& 255;
  #L324014.  v5:= v4 + 1;
  #L324018.  v4:= v0[v4] @kind byte;
  #L32401c.  v4:= v4 ^& 255;
  #L324020.  v6:= v5 + 1;
  #L324024.  v5:= v0[v5] @kind byte;
  #L324028.  v5:= v5 ^& 255;
  #L32402c.  v7:= v2 + 1;
  #L324030.  v8:= -16777216I;
  #L324034.  v3:= v3 ^< 16;
  #L324038.  v3:= v3 ^| v8 @kind int;
  #L32403a.  v4:= v4 ^< 8;
  #L32403e.  v3:= v3 ^| v4 @kind int;
  #L324040.  v3:= v3 ^| v5 @kind int;
  #L324042.  v1[v2]:= v3;
  #L324046.  v3:= v6;
  #L324048.  v2:= v7;
  #L32404a.  goto L324004;
  #L32404c.  
  #L32404e.  v10:= "GifHeaderParser" @kind object;
  #L324052.  v0:= 3I;
  #L324054.  call temp:= `isLoggable`(v10, v0) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L32405a.  v10:= temp;
  #L32405c.  v10:= v9.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324060.  v0:= 1I;
  #L324062.  v10.`com.bumptech.glide.n.d.b` @type ^`int` := v0;
  #L324066.  return v1 @kind object;
  catch `java.nio.BufferUnderflowException` @[L323fee..L324046] goto L32404c;
}
procedure `void` `h`(`com.bumptech.glide.n.e` v1 @kind this) @signature `Lcom/bumptech/glide/n/e;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L32428c.  v0:= 2147483647I;
  #L324292.  call `i`(v1, v0) @signature `Lcom/bumptech/glide/n/e;.i:(I)V` @kind direct;
  #L324298.  return @kind void;
}
procedure `void` `i`(`com.bumptech.glide.n.e` v5 @kind this, `int` v6 ) @signature `Lcom/bumptech/glide/n/e;.i:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3242ac.  v0:= 0I;
  #L3242ae.  v1:= 0I;
  #L3242b0.  if v1 != 0 then goto L3243d0;
  #L3242b4.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/n/e;.b:()Z` @kind direct;
  #L3242ba.  v2:= temp;
  #L3242bc.  if v2 != 0 then goto L3243d0;
  #L3242c0.  v2:= v5.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3242c4.  v2:= v2.`com.bumptech.glide.n.d.c` @type ^`int`;
  #L3242c8.  if v2 > v6 then goto L3243d0;
  #L3242cc.  call temp:= `d`(v5) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L3242d2.  v2:= temp;
  #L3242d4.  v3:= 33I;
  #L3242d8.  v4:= 1I;
  #L3242da.  if v2 == v3 then goto L32431e;
  #L3242de.  v3:= 44I;
  #L3242e2.  if v2 == v3 then goto L3242fc;
  #L3242e6.  v3:= 59I;
  #L3242ea.  if v2 == v3 then goto L3242f8;
  #L3242ee.  v2:= v5.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3242f2.  v2.`com.bumptech.glide.n.d.b` @type ^`int` := v4;
  #L3242f6.  goto L3242b0;
  #L3242f8.  v1:= 1I;
  #L3242fa.  goto L3242b0;
  #L3242fc.  v2:= v5.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324300.  v3:= v2.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` @kind object;
  #L324304.  if v3 != 0 then goto L324316;
  #L324308.  v3:= new `com.bumptech.glide.n.c`;
  #L32430c.  call `<init>`(v3) @signature `Lcom/bumptech/glide/n/c;.<init>:()V` @kind direct;
  #L324312.  v2.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` := v3 @kind object;
  #L324316.  call `e`(v5) @signature `Lcom/bumptech/glide/n/e;.e:()V` @kind direct;
  #L32431c.  goto L3242b0;
  #L32431e.  call temp:= `d`(v5) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L324324.  v2:= temp;
  #L324326.  if v2 == v4 then goto L3243c6;
  #L32432a.  v3:= 249I;
  #L32432e.  if v2 == v3 then goto L3243aa;
  #L324332.  v3:= 254I;
  #L324336.  if v2 == v3 then goto L3243a2;
  #L32433a.  v3:= 255I;
  #L32433e.  if v2 == v3 then goto L32434a;
  #L324342.  call `q`(v5) @signature `Lcom/bumptech/glide/n/e;.q:()V` @kind direct;
  #L324348.  goto L3242b0;
  #L32434a.  call `f`(v5) @signature `Lcom/bumptech/glide/n/e;.f:()V` @kind direct;
  #L324350.  v2:= new `java.lang.StringBuilder`;
  #L324354.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32435a.  v3:= 0I;
  #L32435c.  v4:= 11I;
  #L324360.  if v3 >= v4 then goto L32437a;
  #L324364.  v4:= v5.`com.bumptech.glide.n.e.a` @type ^`byte`[] @kind object;
  #L324368.  v4:= v4[v3] @kind byte;
  #L32436c.  v4:= (`char`) v4 @kind i2c;
  #L32436e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L324374.  v3:= v3 + 1;
  #L324378.  goto L32435c;
  #L32437a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L324380.  v2:= temp @kind object;
  #L324382.  v3:= "NETSCAPE2.0" @kind object;
  #L324386.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32438c.  v2:= temp;
  #L32438e.  if v2 == 0 then goto L32439a;
  #L324392.  call `m`(v5) @signature `Lcom/bumptech/glide/n/e;.m:()V` @kind direct;
  #L324398.  goto L3242b0;
  #L32439a.  call `q`(v5) @signature `Lcom/bumptech/glide/n/e;.q:()V` @kind direct;
  #L3243a0.  goto L3242b0;
  #L3243a2.  call `q`(v5) @signature `Lcom/bumptech/glide/n/e;.q:()V` @kind direct;
  #L3243a8.  goto L3242b0;
  #L3243aa.  v2:= v5.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3243ae.  v3:= new `com.bumptech.glide.n.c`;
  #L3243b2.  call `<init>`(v3) @signature `Lcom/bumptech/glide/n/c;.<init>:()V` @kind direct;
  #L3243b8.  v2.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` := v3 @kind object;
  #L3243bc.  call `j`(v5) @signature `Lcom/bumptech/glide/n/e;.j:()V` @kind direct;
  #L3243c2.  goto L3242b0;
  #L3243c6.  call `q`(v5) @signature `Lcom/bumptech/glide/n/e;.q:()V` @kind direct;
  #L3243cc.  goto L3242b0;
  #L3243d0.  return @kind void;
}
procedure `void` `j`(`com.bumptech.glide.n.e` v5 @kind this) @signature `Lcom/bumptech/glide/n/e;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3243e4.  call temp:= `d`(v5) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L3243ea.  call temp:= `d`(v5) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L3243f0.  v0:= temp;
  #L3243f2.  v1:= v5.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3243f6.  v1:= v1.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` @kind object;
  #L3243fa.  v2:= v0 ^& 28;
  #L3243fe.  v3:= 2I;
  #L324400.  v2:= v2 ^> v3 @kind int;
  #L324402.  v1.`com.bumptech.glide.n.c.g` @type ^`int` := v2;
  #L324406.  v4:= 1I;
  #L324408.  if v2 != 0 then goto L324410;
  #L32440c.  v1.`com.bumptech.glide.n.c.g` @type ^`int` := v4;
  #L324410.  v0:= v0 ^& v4 @kind int;
  #L324412.  if v0 == 0 then goto L324418;
  #L324416.  goto L32441a;
  #L324418.  v4:= 0I;
  #L32441a.  v1.`com.bumptech.glide.n.c.f` @type ^`boolean` := v4 @kind boolean;
  #L32441e.  call temp:= `n`(v5) @signature `Lcom/bumptech/glide/n/e;.n:()I` @kind direct;
  #L324424.  v0:= temp;
  #L324426.  v1:= 10I;
  #L32442a.  if v0 >= v3 then goto L324432;
  #L32442e.  v0:= 10I;
  #L324432.  v2:= v5.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324436.  v2:= v2.`com.bumptech.glide.n.d.d` @type ^`com.bumptech.glide.n.c` @kind object;
  #L32443a.  v0:= v0 * 10;
  #L32443e.  v2.`com.bumptech.glide.n.c.i` @type ^`int` := v0;
  #L324442.  call temp:= `d`(v5) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L324448.  v0:= temp;
  #L32444a.  v2.`com.bumptech.glide.n.c.h` @type ^`int` := v0;
  #L32444e.  call temp:= `d`(v5) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L324454.  return @kind void;
}
procedure `void` `k`(`com.bumptech.glide.n.e` v3 @kind this) @signature `Lcom/bumptech/glide/n/e;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L324468.  v0:= new `java.lang.StringBuilder`;
  #L32446c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L324472.  v1:= 0I;
  #L324474.  v2:= 6I;
  #L324476.  if v1 >= v2 then goto L324490;
  #L32447a.  call temp:= `d`(v3) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L324480.  v2:= temp;
  #L324482.  v2:= (`char`) v2 @kind i2c;
  #L324484.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32448a.  v1:= v1 + 1;
  #L32448e.  goto L324474;
  #L324490.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L324496.  v0:= temp @kind object;
  #L324498.  v1:= "GIF" @kind object;
  #L32449c.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3244a2.  v0:= temp;
  #L3244a4.  if v0 != 0 then goto L3244b4;
  #L3244a8.  v0:= v3.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3244ac.  v1:= 1I;
  #L3244ae.  v0.`com.bumptech.glide.n.d.b` @type ^`int` := v1;
  #L3244b2.  return @kind void;
  #L3244b4.  call `l`(v3) @signature `Lcom/bumptech/glide/n/e;.l:()V` @kind direct;
  #L3244ba.  v0:= v3.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3244be.  v0:= v0.`com.bumptech.glide.n.d.h` @type ^`boolean` @kind boolean;
  #L3244c2.  if v0 == 0 then goto L3244fa;
  #L3244c6.  call temp:= `b`(v3) @signature `Lcom/bumptech/glide/n/e;.b:()Z` @kind direct;
  #L3244cc.  v0:= temp;
  #L3244ce.  if v0 != 0 then goto L3244fa;
  #L3244d2.  v0:= v3.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3244d6.  v1:= v0.`com.bumptech.glide.n.d.i` @type ^`int`;
  #L3244da.  call temp:= `g`(v3, v1) @signature `Lcom/bumptech/glide/n/e;.g:(I)[I` @kind direct;
  #L3244e0.  v1:= temp @kind object;
  #L3244e2.  v0.`com.bumptech.glide.n.d.a` @type ^`int`[] := v1 @kind object;
  #L3244e6.  v0:= v3.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3244ea.  v1:= v0.`com.bumptech.glide.n.d.a` @type ^`int`[] @kind object;
  #L3244ee.  v2:= v0.`com.bumptech.glide.n.d.j` @type ^`int`;
  #L3244f2.  v1:= v1[v2];
  #L3244f6.  v0.`com.bumptech.glide.n.d.l` @type ^`int` := v1;
  #L3244fa.  return @kind void;
}
procedure `void` `l`(`com.bumptech.glide.n.e` v6 @kind this) @signature `Lcom/bumptech/glide/n/e;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L32450c.  v0:= v6.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324510.  call temp:= `n`(v6) @signature `Lcom/bumptech/glide/n/e;.n:()I` @kind direct;
  #L324516.  v1:= temp;
  #L324518.  v0.`com.bumptech.glide.n.d.f` @type ^`int` := v1;
  #L32451c.  v0:= v6.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324520.  call temp:= `n`(v6) @signature `Lcom/bumptech/glide/n/e;.n:()I` @kind direct;
  #L324526.  v1:= temp;
  #L324528.  v0.`com.bumptech.glide.n.d.g` @type ^`int` := v1;
  #L32452c.  call temp:= `d`(v6) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L324532.  v0:= temp;
  #L324534.  v1:= v6.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L324538.  v2:= v0 ^& 128;
  #L32453c.  v3:= 1I;
  #L32453e.  if v2 == 0 then goto L324546;
  #L324542.  v2:= 1I;
  #L324544.  goto L324548;
  #L324546.  v2:= 0I;
  #L324548.  v1.`com.bumptech.glide.n.d.h` @type ^`boolean` := v2 @kind boolean;
  #L32454c.  v4:= 2.0D;
  #L324550.  v0:= v0 ^& 7;
  #L324554.  v0:= v0 + v3 @kind int;
  #L324556.  v2:= (`double`) v0 @kind i2d;
  #L324558.  call temp:= `pow`(v4, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L32455e.  v2:= temp @kind wide;
  #L324560.  v0:= (`int`) v2 @kind d2i;
  #L324562.  v1.`com.bumptech.glide.n.d.i` @type ^`int` := v0;
  #L324566.  v0:= v6.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L32456a.  call temp:= `d`(v6) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L324570.  v1:= temp;
  #L324572.  v0.`com.bumptech.glide.n.d.j` @type ^`int` := v1;
  #L324576.  v0:= v6.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L32457a.  call temp:= `d`(v6) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L324580.  v1:= temp;
  #L324582.  v0.`com.bumptech.glide.n.d.k` @type ^`int` := v1;
  #L324586.  return @kind void;
}
procedure `void` `m`(`com.bumptech.glide.n.e` v3 @kind this) @signature `Lcom/bumptech/glide/n/e;.m:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L324598.  call `f`(v3) @signature `Lcom/bumptech/glide/n/e;.f:()V` @kind direct;
  #L32459e.  v0:= v3.`com.bumptech.glide.n.e.a` @type ^`byte`[] @kind object;
  #L3245a2.  v1:= 0I;
  #L3245a4.  v1:= v0[v1] @kind byte;
  #L3245a8.  v2:= 1I;
  #L3245aa.  if v1 != v2 then goto L3245ce;
  #L3245ae.  v1:= v0[v2] @kind byte;
  #L3245b2.  v1:= v1 ^& 255;
  #L3245b6.  v2:= 2I;
  #L3245b8.  v0:= v0[v2] @kind byte;
  #L3245bc.  v0:= v0 ^& 255;
  #L3245c0.  v2:= v3.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L3245c4.  v0:= v0 ^< 8;
  #L3245c8.  v0:= v0 ^| v1 @kind int;
  #L3245ca.  v2.`com.bumptech.glide.n.d.m` @type ^`int` := v0;
  #L3245ce.  v0:= v3.`com.bumptech.glide.n.e.d` @type ^`int`;
  #L3245d2.  if v0 <= 0 then goto L3245e2;
  #L3245d6.  call temp:= `b`(v3) @signature `Lcom/bumptech/glide/n/e;.b:()Z` @kind direct;
  #L3245dc.  v0:= temp;
  #L3245de.  if v0 == 0 then goto L324598;
  #L3245e2.  return @kind void;
}
procedure `int` `n`(`com.bumptech.glide.n.e` v1 @kind this) @signature `Lcom/bumptech/glide/n/e;.n:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L323fc4.  v0:= v1.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L323fc8.  call temp:= `getShort`(v0) @signature `Ljava/nio/ByteBuffer;.getShort:()S` @kind virtual;
  #L323fce.  v0:= temp;
  #L323fd0.  return v0;
}
procedure `void` `o`(`com.bumptech.glide.n.e` v2 @kind this) @signature `Lcom/bumptech/glide/n/e;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3245f4.  v0:= 0I;
  #L3245f6.  v2.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L3245fa.  v0:= v2.`com.bumptech.glide.n.e.a` @type ^`byte`[] @kind object;
  #L3245fe.  v1:= 0I;
  #L324600.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L324606.  v0:= new `com.bumptech.glide.n.d`;
  #L32460a.  call `<init>`(v0) @signature `Lcom/bumptech/glide/n/d;.<init>:()V` @kind direct;
  #L324610.  v2.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` := v0 @kind object;
  #L324614.  v2.`com.bumptech.glide.n.e.d` @type ^`int` := v1;
  #L324618.  return @kind void;
}
procedure `void` `q`(`com.bumptech.glide.n.e` v3 @kind this) @signature `Lcom/bumptech/glide/n/e;.q:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L32462c.  call temp:= `d`(v3) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L324632.  v0:= temp;
  #L324634.  v1:= v3.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L324638.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L32463e.  v1:= temp;
  #L324640.  v1:= v1 + v0 @kind int;
  #L324642.  v2:= v3.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L324646.  call temp:= `limit`(v2) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L32464c.  v2:= temp;
  #L32464e.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L324654.  v1:= temp;
  #L324656.  v2:= v3.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L32465a.  call temp:= `position`(v2, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L324660.  if v0 > 0 then goto L32462c;
  #L324664.  return @kind void;
}
procedure `void` `r`(`com.bumptech.glide.n.e` v0 @kind this) @signature `Lcom/bumptech/glide/n/e;.r:()V` @AccessFlag PRIVATE {
    temp;

  #L324678.  call temp:= `d`(v0) @signature `Lcom/bumptech/glide/n/e;.d:()I` @kind direct;
  #L32467e.  call `q`(v0) @signature `Lcom/bumptech/glide/n/e;.q:()V` @kind direct;
  #L324684.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.n.e` v1 @kind this) @signature `Lcom/bumptech/glide/n/e;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3240b4.  v0:= 0I;
  #L3240b6.  v1.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L3240ba.  v1.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` := v0 @kind object;
  #L3240be.  return @kind void;
}
procedure `com.bumptech.glide.n.d` `c`(`com.bumptech.glide.n.e` v2 @kind this) @signature `Lcom/bumptech/glide/n/e;.c:()Lcom/bumptech/glide/n/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L323edc.  v0:= v2.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L323ee0.  if v0 == 0 then goto L323f26;
  #L323ee4.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/n/e;.b:()Z` @kind direct;
  #L323eea.  v0:= temp;
  #L323eec.  if v0 == 0 then goto L323ef6;
  #L323ef0.  v0:= v2.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L323ef4.  return v0 @kind object;
  #L323ef6.  call `k`(v2) @signature `Lcom/bumptech/glide/n/e;.k:()V` @kind direct;
  #L323efc.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/n/e;.b:()Z` @kind direct;
  #L323f02.  v0:= temp;
  #L323f04.  if v0 != 0 then goto L323f20;
  #L323f08.  call `h`(v2) @signature `Lcom/bumptech/glide/n/e;.h:()V` @kind direct;
  #L323f0e.  v0:= v2.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L323f12.  v1:= v0.`com.bumptech.glide.n.d.c` @type ^`int`;
  #L323f16.  if v1 >= 0 then goto L323f20;
  #L323f1a.  v1:= 1I;
  #L323f1c.  v0.`com.bumptech.glide.n.d.b` @type ^`int` := v1;
  #L323f20.  v0:= v2.`com.bumptech.glide.n.e.c` @type ^`com.bumptech.glide.n.d` @kind object;
  #L323f24.  return v0 @kind object;
  #L323f26.  v0:= new `java.lang.IllegalStateException`;
  #L323f2a.  v1:= "You must call setData() before parseHeader()" @kind object;
  #L323f2e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L323f34.  throw v0;
}
procedure `com.bumptech.glide.n.e` `p`(`com.bumptech.glide.n.e` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/n/e;.p:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/n/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L323f48.  call `o`(v1) @signature `Lcom/bumptech/glide/n/e;.o:()V` @kind direct;
  #L323f4e.  call temp:= `asReadOnlyBuffer`(v2) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L323f54.  v2:= temp @kind object;
  #L323f56.  v1.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L323f5a.  v0:= 0I;
  #L323f5c.  call temp:= `position`(v2, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L323f62.  v2:= v1.`com.bumptech.glide.n.e.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L323f66.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L323f6a.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L323f70.  return v1 @kind object;
}
