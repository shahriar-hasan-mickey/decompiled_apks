record `com.bumptech.glide.o.s` @kind class @AccessFlag PUBLIC {
  `java.util.Set` `com.bumptech.glide.o.s.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.bumptech.glide.o.s.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.o.s.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.o.s` v1 @kind this) @signature `Lcom/bumptech/glide/o/s;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L33bbe0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33bbe6.  v0:= new `java.util.WeakHashMap`;
  #L33bbea.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L33bbf0.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L33bbf6.  v0:= temp @kind object;
  #L33bbf8.  v1.`com.bumptech.glide.o.s.a` @type ^`java.util.Set` := v0 @kind object;
  #L33bbfc.  v0:= new `java.util.ArrayList`;
  #L33bc00.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L33bc06.  v1.`com.bumptech.glide.o.s.b` @type ^`java.util.List` := v0 @kind object;
  #L33bc0a.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.o.s` v3 @kind this, `com.bumptech.glide.request.d` v4 @kind object, `boolean` v5 ) @signature `Lcom/bumptech/glide/o/s;.a:(Lcom/bumptech/glide/request/d;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L33bb04.  v0:= 1I;
  #L33bb06.  if v4 != 0 then goto L33bb0c;
  #L33bb0a.  return v0;
  #L33bb0c.  v1:= v3.`com.bumptech.glide.o.s.a` @type ^`java.util.Set` @kind object;
  #L33bb10.  call temp:= `remove`(v1, v4) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L33bb16.  v1:= temp;
  #L33bb18.  v2:= v3.`com.bumptech.glide.o.s.b` @type ^`java.util.List` @kind object;
  #L33bb1c.  call temp:= `remove`(v2, v4) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L33bb22.  v2:= temp;
  #L33bb24.  if v2 != 0 then goto L33bb30;
  #L33bb28.  if v1 == 0 then goto L33bb2e;
  #L33bb2c.  goto L33bb30;
  #L33bb2e.  v0:= 0I;
  #L33bb30.  if v0 == 0 then goto L33bb44;
  #L33bb34.  call `clear`(v4) @signature `Lcom/bumptech/glide/request/d;.clear:()V` @kind interface;
  #L33bb3a.  if v5 == 0 then goto L33bb44;
  #L33bb3e.  call `c`(v4) @signature `Lcom/bumptech/glide/request/d;.c:()V` @kind interface;
  #L33bb44.  return v0;
}
procedure `boolean` `b`(`com.bumptech.glide.o.s` v1 @kind this, `com.bumptech.glide.request.d` v2 @kind object) @signature `Lcom/bumptech/glide/o/s;.b:(Lcom/bumptech/glide/request/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33bb58.  v0:= 1I;
  #L33bb5a.  call temp:= `a`(v1, v2, v0) @signature `Lcom/bumptech/glide/o/s;.a:(Lcom/bumptech/glide/request/d;Z)Z` @kind direct;
  #L33bb60.  v2:= temp;
  #L33bb62.  return v2;
}
procedure `void` `c`(`com.bumptech.glide.o.s` v3 @kind this) @signature `Lcom/bumptech/glide/o/s;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L33bc1c.  v0:= v3.`com.bumptech.glide.o.s.a` @type ^`java.util.Set` @kind object;
  #L33bc20.  call temp:= `j`(v0) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L33bc26.  v0:= temp @kind object;
  #L33bc28.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33bc2e.  v0:= temp @kind object;
  #L33bc30.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33bc36.  v1:= temp;
  #L33bc38.  if v1 == 0 then goto L33bc52;
  #L33bc3c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33bc42.  v1:= temp @kind object;
  #L33bc44.  v1:= (`com.bumptech.glide.request.d`) v1 @kind object;
  #L33bc48.  v2:= 0I;
  #L33bc4a.  call temp:= `a`(v3, v1, v2) @signature `Lcom/bumptech/glide/o/s;.a:(Lcom/bumptech/glide/request/d;Z)Z` @kind direct;
  #L33bc50.  goto L33bc30;
  #L33bc52.  v0:= v3.`com.bumptech.glide.o.s.b` @type ^`java.util.List` @kind object;
  #L33bc56.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L33bc5c.  return @kind void;
}
procedure `void` `d`(`com.bumptech.glide.o.s` v3 @kind this) @signature `Lcom/bumptech/glide/o/s;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L33bc70.  v0:= 1I;
  #L33bc72.  v3.`com.bumptech.glide.o.s.c` @type ^`boolean` := v0 @kind boolean;
  #L33bc76.  v0:= v3.`com.bumptech.glide.o.s.a` @type ^`java.util.Set` @kind object;
  #L33bc7a.  call temp:= `j`(v0) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L33bc80.  v0:= temp @kind object;
  #L33bc82.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33bc88.  v0:= temp @kind object;
  #L33bc8a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33bc90.  v1:= temp;
  #L33bc92.  if v1 == 0 then goto L33bcc0;
  #L33bc96.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33bc9c.  v1:= temp @kind object;
  #L33bc9e.  v1:= (`com.bumptech.glide.request.d`) v1 @kind object;
  #L33bca2.  call temp:= `isRunning`(v1) @signature `Lcom/bumptech/glide/request/d;.isRunning:()Z` @kind interface;
  #L33bca8.  v2:= temp;
  #L33bcaa.  if v2 == 0 then goto L33bc8a;
  #L33bcae.  call `clear`(v1) @signature `Lcom/bumptech/glide/request/d;.clear:()V` @kind interface;
  #L33bcb4.  v2:= v3.`com.bumptech.glide.o.s.b` @type ^`java.util.List` @kind object;
  #L33bcb8.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33bcbe.  goto L33bc8a;
  #L33bcc0.  return @kind void;
}
procedure `void` `e`(`com.bumptech.glide.o.s` v3 @kind this) @signature `Lcom/bumptech/glide/o/s;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L33bcd4.  v0:= v3.`com.bumptech.glide.o.s.a` @type ^`java.util.Set` @kind object;
  #L33bcd8.  call temp:= `j`(v0) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L33bcde.  v0:= temp @kind object;
  #L33bce0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33bce6.  v0:= temp @kind object;
  #L33bce8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33bcee.  v1:= temp;
  #L33bcf0.  if v1 == 0 then goto L33bd3a;
  #L33bcf4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33bcfa.  v1:= temp @kind object;
  #L33bcfc.  v1:= (`com.bumptech.glide.request.d`) v1 @kind object;
  #L33bd00.  call temp:= `l`(v1) @signature `Lcom/bumptech/glide/request/d;.l:()Z` @kind interface;
  #L33bd06.  v2:= temp;
  #L33bd08.  if v2 != 0 then goto L33bce8;
  #L33bd0c.  call temp:= `h`(v1) @signature `Lcom/bumptech/glide/request/d;.h:()Z` @kind interface;
  #L33bd12.  v2:= temp;
  #L33bd14.  if v2 != 0 then goto L33bce8;
  #L33bd18.  call `clear`(v1) @signature `Lcom/bumptech/glide/request/d;.clear:()V` @kind interface;
  #L33bd1e.  v2:= v3.`com.bumptech.glide.o.s.c` @type ^`boolean` @kind boolean;
  #L33bd22.  if v2 != 0 then goto L33bd2e;
  #L33bd26.  call `j`(v1) @signature `Lcom/bumptech/glide/request/d;.j:()V` @kind interface;
  #L33bd2c.  goto L33bce8;
  #L33bd2e.  v2:= v3.`com.bumptech.glide.o.s.b` @type ^`java.util.List` @kind object;
  #L33bd32.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33bd38.  goto L33bce8;
  #L33bd3a.  return @kind void;
}
procedure `void` `f`(`com.bumptech.glide.o.s` v3 @kind this) @signature `Lcom/bumptech/glide/o/s;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L33bd4c.  v0:= 0I;
  #L33bd4e.  v3.`com.bumptech.glide.o.s.c` @type ^`boolean` := v0 @kind boolean;
  #L33bd52.  v0:= v3.`com.bumptech.glide.o.s.a` @type ^`java.util.Set` @kind object;
  #L33bd56.  call temp:= `j`(v0) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L33bd5c.  v0:= temp @kind object;
  #L33bd5e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33bd64.  v0:= temp @kind object;
  #L33bd66.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33bd6c.  v1:= temp;
  #L33bd6e.  if v1 == 0 then goto L33bd9e;
  #L33bd72.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33bd78.  v1:= temp @kind object;
  #L33bd7a.  v1:= (`com.bumptech.glide.request.d`) v1 @kind object;
  #L33bd7e.  call temp:= `l`(v1) @signature `Lcom/bumptech/glide/request/d;.l:()Z` @kind interface;
  #L33bd84.  v2:= temp;
  #L33bd86.  if v2 != 0 then goto L33bd66;
  #L33bd8a.  call temp:= `isRunning`(v1) @signature `Lcom/bumptech/glide/request/d;.isRunning:()Z` @kind interface;
  #L33bd90.  v2:= temp;
  #L33bd92.  if v2 != 0 then goto L33bd66;
  #L33bd96.  call `j`(v1) @signature `Lcom/bumptech/glide/request/d;.j:()V` @kind interface;
  #L33bd9c.  goto L33bd66;
  #L33bd9e.  v0:= v3.`com.bumptech.glide.o.s.b` @type ^`java.util.List` @kind object;
  #L33bda2.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L33bda8.  return @kind void;
}
procedure `void` `g`(`com.bumptech.glide.o.s` v2 @kind this, `com.bumptech.glide.request.d` v3 @kind object) @signature `Lcom/bumptech/glide/o/s;.g:(Lcom/bumptech/glide/request/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L33bdbc.  v0:= v2.`com.bumptech.glide.o.s.a` @type ^`java.util.Set` @kind object;
  #L33bdc0.  call temp:= `add`(v0, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33bdc6.  v0:= v2.`com.bumptech.glide.o.s.c` @type ^`boolean` @kind boolean;
  #L33bdca.  if v0 != 0 then goto L33bdd6;
  #L33bdce.  call `j`(v3) @signature `Lcom/bumptech/glide/request/d;.j:()V` @kind interface;
  #L33bdd4.  goto L33bdf4;
  #L33bdd6.  call `clear`(v3) @signature `Lcom/bumptech/glide/request/d;.clear:()V` @kind interface;
  #L33bddc.  v0:= 2I;
  #L33bdde.  v1:= "RequestTracker" @kind object;
  #L33bde2.  call temp:= `isLoggable`(v1, v0) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L33bde8.  v0:= temp;
  #L33bdea.  v0:= v2.`com.bumptech.glide.o.s.b` @type ^`java.util.List` @kind object;
  #L33bdee.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33bdf4.  return @kind void;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.o.s` v2 @kind this) @signature `Lcom/bumptech/glide/o/s;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L33bb74.  v0:= new `java.lang.StringBuilder`;
  #L33bb78.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L33bb7e.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind super;
  #L33bb84.  v1:= temp @kind object;
  #L33bb86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33bb8c.  v1:= "{numRequests=" @kind object;
  #L33bb90.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33bb96.  v1:= v2.`com.bumptech.glide.o.s.a` @type ^`java.util.Set` @kind object;
  #L33bb9a.  call temp:= `size`(v1) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L33bba0.  v1:= temp;
  #L33bba2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L33bba8.  v1:= ", isPaused=" @kind object;
  #L33bbac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33bbb2.  v1:= v2.`com.bumptech.glide.o.s.c` @type ^`boolean` @kind boolean;
  #L33bbb6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L33bbbc.  v1:= "}" @kind object;
  #L33bbc0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33bbc6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L33bbcc.  v0:= temp @kind object;
  #L33bbce.  return v0 @kind object;
}
