record `com.bumptech.glide.o.u` @kind class @AccessFlag PUBLIC_FINAL extends `com.bumptech.glide.o.k` @kind interface {
  `java.util.Set` `com.bumptech.glide.o.u.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.o.u` v1 @kind this) @signature `Lcom/bumptech/glide/o/u;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L33c184.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33c18a.  v0:= new `java.util.WeakHashMap`;
  #L33c18e.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L33c194.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L33c19a.  v0:= temp @kind object;
  #L33c19c.  v1.`com.bumptech.glide.o.u.b` @type ^`java.util.Set` := v0 @kind object;
  #L33c1a0.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.o.u` v2 @kind this) @signature `Lcom/bumptech/glide/o/u;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L33c218.  v0:= v2.`com.bumptech.glide.o.u.b` @type ^`java.util.Set` @kind object;
  #L33c21c.  call temp:= `j`(v0) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L33c222.  v0:= temp @kind object;
  #L33c224.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33c22a.  v0:= temp @kind object;
  #L33c22c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33c232.  v1:= temp;
  #L33c234.  if v1 == 0 then goto L33c24c;
  #L33c238.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33c23e.  v1:= temp @kind object;
  #L33c240.  v1:= (`com.bumptech.glide.request.m.i`) v1 @kind object;
  #L33c244.  call `a`(v1) @signature `Lcom/bumptech/glide/o/k;.a:()V` @kind interface;
  #L33c24a.  goto L33c22c;
  #L33c24c.  return @kind void;
}
procedure `void` `d`(`com.bumptech.glide.o.u` v1 @kind this) @signature `Lcom/bumptech/glide/o/u;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33c1b4.  v0:= v1.`com.bumptech.glide.o.u.b` @type ^`java.util.Set` @kind object;
  #L33c1b8.  call `clear`(v0) @signature `Ljava/util/Set;.clear:()V` @kind interface;
  #L33c1be.  return @kind void;
}
procedure `void` `f`(`com.bumptech.glide.o.u` v2 @kind this) @signature `Lcom/bumptech/glide/o/u;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L33c1d0.  v0:= v2.`com.bumptech.glide.o.u.b` @type ^`java.util.Set` @kind object;
  #L33c1d4.  call temp:= `j`(v0) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L33c1da.  v0:= temp @kind object;
  #L33c1dc.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33c1e2.  v0:= temp @kind object;
  #L33c1e4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33c1ea.  v1:= temp;
  #L33c1ec.  if v1 == 0 then goto L33c204;
  #L33c1f0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33c1f6.  v1:= temp @kind object;
  #L33c1f8.  v1:= (`com.bumptech.glide.request.m.i`) v1 @kind object;
  #L33c1fc.  call `f`(v1) @signature `Lcom/bumptech/glide/o/k;.f:()V` @kind interface;
  #L33c202.  goto L33c1e4;
  #L33c204.  return @kind void;
}
procedure `java.util.List` `g`(`com.bumptech.glide.o.u` v1 @kind this) @signature `Lcom/bumptech/glide/o/u;.g:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33c164.  v0:= v1.`com.bumptech.glide.o.u.b` @type ^`java.util.Set` @kind object;
  #L33c168.  call temp:= `j`(v0) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L33c16e.  v0:= temp @kind object;
  #L33c170.  return v0 @kind object;
}
procedure `void` `i`(`com.bumptech.glide.o.u` v2 @kind this) @signature `Lcom/bumptech/glide/o/u;.i:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L33c260.  v0:= v2.`com.bumptech.glide.o.u.b` @type ^`java.util.Set` @kind object;
  #L33c264.  call temp:= `j`(v0) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L33c26a.  v0:= temp @kind object;
  #L33c26c.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33c272.  v0:= temp @kind object;
  #L33c274.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33c27a.  v1:= temp;
  #L33c27c.  if v1 == 0 then goto L33c294;
  #L33c280.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33c286.  v1:= temp @kind object;
  #L33c288.  v1:= (`com.bumptech.glide.request.m.i`) v1 @kind object;
  #L33c28c.  call `i`(v1) @signature `Lcom/bumptech/glide/o/k;.i:()V` @kind interface;
  #L33c292.  goto L33c274;
  #L33c294.  return @kind void;
}
procedure `void` `j`(`com.bumptech.glide.o.u` v1 @kind this, `com.bumptech.glide.request.m.i` v2 @kind object) @signature `Lcom/bumptech/glide/o/u;.j:(Lcom/bumptech/glide/request/m/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33c2a8.  v0:= v1.`com.bumptech.glide.o.u.b` @type ^`java.util.Set` @kind object;
  #L33c2ac.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33c2b2.  return @kind void;
}
procedure `void` `o`(`com.bumptech.glide.o.u` v1 @kind this, `com.bumptech.glide.request.m.i` v2 @kind object) @signature `Lcom/bumptech/glide/o/u;.o:(Lcom/bumptech/glide/request/m/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33c2c4.  v0:= v1.`com.bumptech.glide.o.u.b` @type ^`java.util.Set` @kind object;
  #L33c2c8.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L33c2ce.  return @kind void;
}
