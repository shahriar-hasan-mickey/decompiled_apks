record `com.bumptech.glide.o.a` @kind class @AccessFlag  extends `com.bumptech.glide.o.j` @kind interface {
  `java.util.Set` `com.bumptech.glide.o.a.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.o.a.b` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.o.a.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.o.a` v1 @kind this) @signature `Lcom/bumptech/glide/o/a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L33a8e8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33a8ee.  v0:= new `java.util.WeakHashMap`;
  #L33a8f2.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L33a8f8.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L33a8fe.  v0:= temp @kind object;
  #L33a900.  v1.`com.bumptech.glide.o.a.a` @type ^`java.util.Set` := v0 @kind object;
  #L33a904.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.o.a` v1 @kind this, `com.bumptech.glide.o.k` v2 @kind object) @signature `Lcom/bumptech/glide/o/a;.a:(Lcom/bumptech/glide/o/k;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a918.  v0:= v1.`com.bumptech.glide.o.a.a` @type ^`java.util.Set` @kind object;
  #L33a91c.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33a922.  v0:= v1.`com.bumptech.glide.o.a.c` @type ^`boolean` @kind boolean;
  #L33a926.  if v0 == 0 then goto L33a932;
  #L33a92a.  call `f`(v2) @signature `Lcom/bumptech/glide/o/k;.f:()V` @kind interface;
  #L33a930.  goto L33a948;
  #L33a932.  v0:= v1.`com.bumptech.glide.o.a.b` @type ^`boolean` @kind boolean;
  #L33a936.  if v0 == 0 then goto L33a942;
  #L33a93a.  call `a`(v2) @signature `Lcom/bumptech/glide/o/k;.a:()V` @kind interface;
  #L33a940.  goto L33a948;
  #L33a942.  call `i`(v2) @signature `Lcom/bumptech/glide/o/k;.i:()V` @kind interface;
  #L33a948.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.o.a` v1 @kind this, `com.bumptech.glide.o.k` v2 @kind object) @signature `Lcom/bumptech/glide/o/a;.b:(Lcom/bumptech/glide/o/k;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33aa40.  v0:= v1.`com.bumptech.glide.o.a.a` @type ^`java.util.Set` @kind object;
  #L33aa44.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L33aa4a.  return @kind void;
}
procedure `void` `c`(`com.bumptech.glide.o.a` v2 @kind this) @signature `Lcom/bumptech/glide/o/a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L33a95c.  v0:= 1I;
  #L33a95e.  v2.`com.bumptech.glide.o.a.c` @type ^`boolean` := v0 @kind boolean;
  #L33a962.  v0:= v2.`com.bumptech.glide.o.a.a` @type ^`java.util.Set` @kind object;
  #L33a966.  call temp:= `j`(v0) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L33a96c.  v0:= temp @kind object;
  #L33a96e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33a974.  v0:= temp @kind object;
  #L33a976.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33a97c.  v1:= temp;
  #L33a97e.  if v1 == 0 then goto L33a996;
  #L33a982.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33a988.  v1:= temp @kind object;
  #L33a98a.  v1:= (`com.bumptech.glide.o.k`) v1 @kind object;
  #L33a98e.  call `f`(v1) @signature `Lcom/bumptech/glide/o/k;.f:()V` @kind interface;
  #L33a994.  goto L33a976;
  #L33a996.  return @kind void;
}
procedure `void` `d`(`com.bumptech.glide.o.a` v2 @kind this) @signature `Lcom/bumptech/glide/o/a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L33a9a8.  v0:= 1I;
  #L33a9aa.  v2.`com.bumptech.glide.o.a.b` @type ^`boolean` := v0 @kind boolean;
  #L33a9ae.  v0:= v2.`com.bumptech.glide.o.a.a` @type ^`java.util.Set` @kind object;
  #L33a9b2.  call temp:= `j`(v0) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L33a9b8.  v0:= temp @kind object;
  #L33a9ba.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33a9c0.  v0:= temp @kind object;
  #L33a9c2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33a9c8.  v1:= temp;
  #L33a9ca.  if v1 == 0 then goto L33a9e2;
  #L33a9ce.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33a9d4.  v1:= temp @kind object;
  #L33a9d6.  v1:= (`com.bumptech.glide.o.k`) v1 @kind object;
  #L33a9da.  call `a`(v1) @signature `Lcom/bumptech/glide/o/k;.a:()V` @kind interface;
  #L33a9e0.  goto L33a9c2;
  #L33a9e2.  return @kind void;
}
procedure `void` `e`(`com.bumptech.glide.o.a` v2 @kind this) @signature `Lcom/bumptech/glide/o/a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L33a9f4.  v0:= 0I;
  #L33a9f6.  v2.`com.bumptech.glide.o.a.b` @type ^`boolean` := v0 @kind boolean;
  #L33a9fa.  v0:= v2.`com.bumptech.glide.o.a.a` @type ^`java.util.Set` @kind object;
  #L33a9fe.  call temp:= `j`(v0) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L33aa04.  v0:= temp @kind object;
  #L33aa06.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33aa0c.  v0:= temp @kind object;
  #L33aa0e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33aa14.  v1:= temp;
  #L33aa16.  if v1 == 0 then goto L33aa2e;
  #L33aa1a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33aa20.  v1:= temp @kind object;
  #L33aa22.  v1:= (`com.bumptech.glide.o.k`) v1 @kind object;
  #L33aa26.  call `i`(v1) @signature `Lcom/bumptech/glide/o/k;.i:()V` @kind interface;
  #L33aa2c.  goto L33aa0e;
  #L33aa2e.  return @kind void;
}
