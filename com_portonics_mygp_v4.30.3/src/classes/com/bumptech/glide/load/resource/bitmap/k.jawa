record `com.bumptech.glide.load.resource.bitmap.k` @kind class @AccessFlag FINAL {
  `java.nio.ByteBuffer` `com.bumptech.glide.load.resource.bitmap.k.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.k` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/k;.<init>:([BI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L334580.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L334586.  call temp:= `wrap`(v2) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L33458c.  v2:= temp @kind object;
  #L33458e.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L334592.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L334598.  v2:= temp @kind object;
  #L33459a.  call temp:= `limit`(v2, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3345a0.  v2:= temp @kind object;
  #L3345a2.  v2:= (`java.nio.ByteBuffer`) v2 @kind object;
  #L3345a6.  v1.`com.bumptech.glide.load.resource.bitmap.k.a` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L3345aa.  return @kind void;
}
procedure `boolean` `c`(`com.bumptech.glide.load.resource.bitmap.k` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/k;.c:(II)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3344d4.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.k.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3344d8.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3344de.  v0:= temp;
  #L3344e0.  v0:= v0 - v2 @kind int;
  #L3344e2.  if v0 < v3 then goto L3344ea;
  #L3344e6.  v2:= 1I;
  #L3344e8.  goto L3344ec;
  #L3344ea.  v2:= 0I;
  #L3344ec.  return v2;
}
procedure `short` `a`(`com.bumptech.glide.load.resource.bitmap.k` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/k;.a:(I)S` @AccessFlag  {
    temp;
    v0;

  #L334550.  v0:= 2I;
  #L334552.  call temp:= `c`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/k;.c:(II)Z` @kind direct;
  #L334558.  v0:= temp;
  #L33455a.  if v0 == 0 then goto L33456c;
  #L33455e.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.k.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L334562.  call temp:= `getShort`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L334568.  v2:= temp;
  #L33456a.  goto L33456e;
  #L33456c.  v2:= -1I;
  #L33456e.  return v2;
}
procedure `int` `b`(`com.bumptech.glide.load.resource.bitmap.k` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/k;.b:(I)I` @AccessFlag  {
    temp;
    v0;

  #L334500.  v0:= 4I;
  #L334502.  call temp:= `c`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/k;.c:(II)Z` @kind direct;
  #L334508.  v0:= temp;
  #L33450a.  if v0 == 0 then goto L33451c;
  #L33450e.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.k.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L334512.  call temp:= `getInt`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L334518.  v2:= temp;
  #L33451a.  goto L33451e;
  #L33451c.  v2:= -1I;
  #L33451e.  return v2;
}
procedure `int` `d`(`com.bumptech.glide.load.resource.bitmap.k` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/k;.d:()I` @AccessFlag  {
    temp;
    v0;

  #L334530.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.k.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L334534.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L33453a.  v0:= temp;
  #L33453c.  return v0;
}
procedure `void` `e`(`com.bumptech.glide.load.resource.bitmap.k` v1 @kind this, `java.nio.ByteOrder` v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/k;.e:(Ljava/nio/ByteOrder;)V` @AccessFlag  {
    temp;
    v0;

  #L3345bc.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.k.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3345c0.  call temp:= `order`(v0, v2) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3345c6.  return @kind void;
}
