record `com.bumptech.glide.load.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `int` `a`(`java.util.List` v4 @kind object, `java.io.InputStream` v5 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.b` v6 @kind object) @signature `Lcom/bumptech/glide/load/b;.a:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/b;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L325adc.  v0:= -1I;
  #L325ade.  if v5 != 0 then goto L325ae4;
  #L325ae2.  return v0;
  #L325ae4.  call temp:= `markSupported`(v5) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L325aea.  v1:= temp;
  #L325aec.  if v1 != 0 then goto L325afc;
  #L325af0.  v1:= new `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream`;
  #L325af4.  call `<init>`(v1, v5, v6) @signature `Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/b;)V` @kind direct;
  #L325afa.  v5:= v1 @kind object;
  #L325afc.  v1:= 5242880I;
  #L325b00.  call `mark`(v5, v1) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L325b06.  v1:= 0I;
  #L325b08.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L325b0e.  v2:= temp;
  #L325b10.  if v1 >= v2 then goto L325b4a;
  #L325b14.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L325b1a.  v3:= temp @kind object;
  #L325b1c.  v3:= (`com.bumptech.glide.load.ImageHeaderParser`) v3 @kind object;
  #L325b20.  call temp:= `c`(v3, v5, v6) @signature `Lcom/bumptech/glide/load/ImageHeaderParser;.c:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/b;)I` @kind interface;
  #L325b26.  v3:= temp;
  #L325b28.  if v3 == v0 then goto L325b34;
  #L325b2c.  call `reset`(v5) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L325b32.  return v3;
  #L325b34.  call `reset`(v5) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L325b3a.  v1:= v1 + 1;
  #L325b3e.  goto L325b10;
  #L325b40.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L325b42.  call `reset`(v5) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L325b48.  throw v4;
  #L325b4a.  return v0;
  catch `java.lang.Throwable` @[L325b20..L325b28] goto L325b40;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `b`(`java.util.List` v3 @kind object, `java.io.InputStream` v4 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.b` v5 @kind object) @signature `Lcom/bumptech/glide/load/b;.b:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/b;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3259f0.  if v4 != 0 then goto L3259fa;
  #L3259f4.  v3:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L3259f8.  return v3 @kind object;
  #L3259fa.  call temp:= `markSupported`(v4) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L325a00.  v0:= temp;
  #L325a02.  if v0 != 0 then goto L325a12;
  #L325a06.  v0:= new `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream`;
  #L325a0a.  call `<init>`(v0, v4, v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/b;)V` @kind direct;
  #L325a10.  v4:= v0 @kind object;
  #L325a12.  v5:= 5242880I;
  #L325a16.  call `mark`(v4, v5) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L325a1c.  v5:= 0I;
  #L325a1e.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L325a24.  v0:= temp;
  #L325a26.  if v5 >= v0 then goto L325a64;
  #L325a2a.  call temp:= `get`(v3, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L325a30.  v1:= temp @kind object;
  #L325a32.  v1:= (`com.bumptech.glide.load.ImageHeaderParser`) v1 @kind object;
  #L325a36.  call temp:= `b`(v1, v4) @signature `Lcom/bumptech/glide/load/ImageHeaderParser;.b:(Ljava/io/InputStream;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind interface;
  #L325a3c.  v1:= temp @kind object;
  #L325a3e.  v2:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L325a42.  if v1 == v2 then goto L325a4e;
  #L325a46.  call `reset`(v4) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L325a4c.  return v1 @kind object;
  #L325a4e.  call `reset`(v4) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L325a54.  v5:= v5 + 1;
  #L325a58.  goto L325a26;
  #L325a5a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L325a5c.  call `reset`(v4) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L325a62.  throw v3;
  #L325a64.  v3:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L325a68.  return v3 @kind object;
  catch `java.lang.Throwable` @[L325a36..L325a42] goto L325a5a;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `c`(`java.util.List` v4 @kind object, `java.nio.ByteBuffer` v5 @kind object) @signature `Lcom/bumptech/glide/load/b;.c:(Ljava/util/List;Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L325a88.  if v5 != 0 then goto L325a92;
  #L325a8c.  v4:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L325a90.  return v4 @kind object;
  #L325a92.  v0:= 0I;
  #L325a94.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L325a9a.  v1:= temp;
  #L325a9c.  if v0 >= v1 then goto L325ac4;
  #L325aa0.  call temp:= `get`(v4, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L325aa6.  v2:= temp @kind object;
  #L325aa8.  v2:= (`com.bumptech.glide.load.ImageHeaderParser`) v2 @kind object;
  #L325aac.  call temp:= `a`(v2, v5) @signature `Lcom/bumptech/glide/load/ImageHeaderParser;.a:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind interface;
  #L325ab2.  v2:= temp @kind object;
  #L325ab4.  v3:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L325ab8.  if v2 == v3 then goto L325abe;
  #L325abc.  return v2 @kind object;
  #L325abe.  v0:= v0 + 1;
  #L325ac2.  goto L325a9c;
  #L325ac4.  v4:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L325ac8.  return v4 @kind object;
}
