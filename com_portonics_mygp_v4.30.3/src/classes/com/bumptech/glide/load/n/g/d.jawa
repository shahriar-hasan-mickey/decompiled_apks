record `com.bumptech.glide.load.n.g.d` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.n.g.e` @kind interface {
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.g.d` v0 @kind this) @signature `Lcom/bumptech/glide/load/n/g/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L33a658.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33a65e.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.u0` `a`(`com.bumptech.glide.load.n.g.d` v0 @kind this, `com.bumptech.glide.load.engine.u0` v1 @kind object, `com.bumptech.glide.load.h` v2 @kind object) @signature `Lcom/bumptech/glide/load/n/g/d;.a:(Lcom/bumptech/glide/load/engine/u0;Lcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u0;` @AccessFlag PUBLIC {
    temp;

  #L33a620.  call temp:= `get`(v1) @signature `Lcom/bumptech/glide/load/engine/u0;.get:()Ljava/lang/Object;` @kind interface;
  #L33a626.  v1:= temp @kind object;
  #L33a628.  v1:= (`com.bumptech.glide.load.n.f.f`) v1 @kind object;
  #L33a62c.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/load/n/f/f;.c:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L33a632.  v1:= temp @kind object;
  #L33a634.  v2:= new `com.bumptech.glide.load.n.c.c`;
  #L33a638.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/s/c;.c:(Ljava/nio/ByteBuffer;)[B` @kind static;
  #L33a63e.  v1:= temp @kind object;
  #L33a640.  call `<init>`(v2, v1) @signature `Lcom/bumptech/glide/load/n/c/c;.<init>:([B)V` @kind direct;
  #L33a646.  return v2 @kind object;
}
