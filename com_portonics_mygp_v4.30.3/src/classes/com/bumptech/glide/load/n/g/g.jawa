record `com.bumptech.glide.load.n.g.g` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.bumptech.glide.load.n.g.g.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.g.g` v1 @kind this) @signature `Lcom/bumptech/glide/load/n/g/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L33a820.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33a826.  v0:= new `java.util.ArrayList`;
  #L33a82a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L33a830.  v1.`com.bumptech.glide.load.n.g.g.a` @type ^`java.util.List` := v0 @kind object;
  #L33a834.  return @kind void;
}
procedure `com.bumptech.glide.load.n.g.e` `a`(`com.bumptech.glide.load.n.g.g` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/n/g/g;.a:(Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/n/g/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L33a6cc.  @monitorenter v3
  #L33a6ce.  call temp:= `isAssignableFrom`(v5, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L33a6d4.  v0:= temp;
  #L33a6d6.  if v0 == 0 then goto L33a6e6;
  #L33a6da.  call temp:= `b`() @signature `Lcom/bumptech/glide/load/n/g/h;.b:()Lcom/bumptech/glide/load/n/g/e;` @kind static;
  #L33a6e0.  v4:= temp @kind object;
  #L33a6e2.  @monitorexit v3
  #L33a6e4.  return v4 @kind object;
  #L33a6e6.  v0:= v3.`com.bumptech.glide.load.n.g.g.a` @type ^`java.util.List` @kind object;
  #L33a6ea.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33a6f0.  v0:= temp @kind object;
  #L33a6f2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33a6f8.  v1:= temp;
  #L33a6fa.  if v1 == 0 then goto L33a71e;
  #L33a6fe.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33a704.  v1:= temp @kind object;
  #L33a706.  v1:= (`com.bumptech.glide.load.n.g.f`) v1 @kind object;
  #L33a70a.  call temp:= `a`(v1, v4, v5) @signature `Lcom/bumptech/glide/load/n/g/f;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L33a710.  v2:= temp;
  #L33a712.  if v2 == 0 then goto L33a6f2;
  #L33a716.  v4:= v1.`com.bumptech.glide.load.n.g.f.c` @type ^`com.bumptech.glide.load.n.g.e` @kind object;
  #L33a71a.  @monitorexit v3
  #L33a71c.  return v4 @kind object;
  #L33a71e.  v0:= new `java.lang.IllegalArgumentException`;
  #L33a722.  v1:= new `java.lang.StringBuilder`;
  #L33a726.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L33a72c.  v2:= "No transcoder registered to transcode from " @kind object;
  #L33a730.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33a736.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33a73c.  v4:= " to " @kind object;
  #L33a740.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33a746.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33a74c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L33a752.  v4:= temp @kind object;
  #L33a754.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a75a.  throw v0;
  #L33a75c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33a75e.  @monitorexit v3
  #L33a760.  goto L33a764;
  #L33a762.  throw v4;
  #L33a764.  goto L33a762;
  catch `java.lang.Throwable` @[L33a6ce..L33a6e2] goto L33a75c;
  catch `java.lang.Throwable` @[L33a6e6..L33a71a] goto L33a75c;
  catch `java.lang.Throwable` @[L33a71e..L33a75c] goto L33a75c;
}
procedure `java.util.List` `b`(`com.bumptech.glide.load.n.g.g` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/n/g/g;.b:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L33a794.  @monitorenter v3
  #L33a796.  v0:= new `java.util.ArrayList`;
  #L33a79a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L33a7a0.  call temp:= `isAssignableFrom`(v5, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L33a7a6.  v1:= temp;
  #L33a7a8.  if v1 == 0 then goto L33a7b6;
  #L33a7ac.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33a7b2.  @monitorexit v3
  #L33a7b4.  return v0 @kind object;
  #L33a7b6.  v1:= v3.`com.bumptech.glide.load.n.g.g.a` @type ^`java.util.List` @kind object;
  #L33a7ba.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33a7c0.  v1:= temp @kind object;
  #L33a7c2.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33a7c8.  v2:= temp;
  #L33a7ca.  if v2 == 0 then goto L33a7ee;
  #L33a7ce.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33a7d4.  v2:= temp @kind object;
  #L33a7d6.  v2:= (`com.bumptech.glide.load.n.g.f`) v2 @kind object;
  #L33a7da.  call temp:= `a`(v2, v4, v5) @signature `Lcom/bumptech/glide/load/n/g/f;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L33a7e0.  v2:= temp;
  #L33a7e2.  if v2 == 0 then goto L33a7c2;
  #L33a7e6.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33a7ec.  goto L33a7c2;
  #L33a7ee.  @monitorexit v3
  #L33a7f0.  return v0 @kind object;
  #L33a7f2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33a7f4.  @monitorexit v3
  #L33a7f6.  goto L33a7fa;
  #L33a7f8.  throw v4;
  #L33a7fa.  goto L33a7f8;
  catch `java.lang.Throwable` @[L33a796..L33a7b2] goto L33a7f2;
  catch `java.lang.Throwable` @[L33a7b6..L33a7ec] goto L33a7f2;
}
procedure `void` `c`(`com.bumptech.glide.load.n.g.g` v2 @kind this, `java.lang.Class` v3 @kind object, `java.lang.Class` v4 @kind object, `com.bumptech.glide.load.n.g.e` v5 @kind object) @signature `Lcom/bumptech/glide/load/n/g/g;.c:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/n/g/e;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L33a848.  @monitorenter v2
  #L33a84a.  v0:= v2.`com.bumptech.glide.load.n.g.g.a` @type ^`java.util.List` @kind object;
  #L33a84e.  v1:= new `com.bumptech.glide.load.n.g.f`;
  #L33a852.  call `<init>`(v1, v3, v4, v5) @signature `Lcom/bumptech/glide/load/n/g/f;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/n/g/e;)V` @kind direct;
  #L33a858.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33a85e.  @monitorexit v2
  #L33a860.  return @kind void;
  #L33a862.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33a864.  @monitorexit v2
  #L33a866.  throw v3;
  catch `java.lang.Throwable` @[L33a84a..L33a85e] goto L33a862;
}
