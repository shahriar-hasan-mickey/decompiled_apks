record `com.bumptech.glide.load.l.k` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.FilterInputStream` @kind class {
  `byte` `com.bumptech.glide.load.l.k.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.l.k.f` @AccessFlag PRIVATE;
}
global `byte`[] `@@com.bumptech.glide.load.l.k.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.l.k.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.l.k.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/l/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3266ec.  v0:= 29I;
  #L3266f0.  v0:= new `byte`[v0];
  #L3266f4.  goto L326710;
  #L3266fa.  `@@com.bumptech.glide.load.l.k.b` @type ^`byte`[] := v0 @kind object;
  #L3266fe.  v0:= length @variable v0;
  #L326700.  `@@com.bumptech.glide.load.l.k.c` @type ^`int` := v0;
  #L326704.  v0:= v0 + 2;
  #L326708.  `@@com.bumptech.glide.load.l.k.d` @type ^`int` := v0;
  #L32670c.  return @kind void;
  #L32670e.  
  #L326710.  v0:= (-1I, -31I, 0I, 28I, 69I, 120I, 105I, 102I, 0I, 0I, 77I, 77I, 0I, 0I, 0I, 0I, 0I, 8I, 0I, 1I, 1I, 18I, 0I, 2I, 0I, 0I, 0I, 1I, 0I) @kind object;
  #L326735.  goto L3266fa;
}
procedure `void` `<init>`(`com.bumptech.glide.load.l.k` v2 @kind this, `java.io.InputStream` v3 @kind object, `int` v4 ) @signature `Lcom/bumptech/glide/load/l/k;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L326748.  call `<init>`(v2, v3) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L32674e.  v3:= -1I;
  #L326750.  if v4 < v3 then goto L326764;
  #L326754.  v3:= 8I;
  #L326758.  if v4 > v3 then goto L326764;
  #L32675c.  v3:= (`byte`) v4 @kind i2b;
  #L32675e.  v2.`com.bumptech.glide.load.l.k.e` @type ^`byte` := v3 @kind byte;
  #L326762.  return @kind void;
  #L326764.  v3:= new `java.lang.IllegalArgumentException`;
  #L326768.  v0:= new `java.lang.StringBuilder`;
  #L32676c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L326772.  v1:= "Cannot add invalid orientation: " @kind object;
  #L326776.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32677c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L326782.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L326788.  v4:= temp @kind object;
  #L32678a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L326790.  throw v3;
}
procedure `void` `mark`(`com.bumptech.glide.load.l.k` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/load/l/k;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L3267a4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3267a8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3267ae.  throw v1;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.load.l.k` v1 @kind this) @signature `Lcom/bumptech/glide/load/l/k;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3265d4.  v0:= 0I;
  #L3265d6.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.l.k` v3 @kind this) @signature `Lcom/bumptech/glide/load/l/k;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3265e8.  v0:= v3.`com.bumptech.glide.load.l.k.f` @type ^`int`;
  #L3265ec.  v1:= 2I;
  #L3265ee.  if v0 < v1 then goto L326616;
  #L3265f2.  v2:= `@@com.bumptech.glide.load.l.k.d` @type ^`int`;
  #L3265f6.  if v0 <= v2 then goto L3265fc;
  #L3265fa.  goto L326616;
  #L3265fc.  if v0 != v2 then goto L326606;
  #L326600.  v0:= v3.`com.bumptech.glide.load.l.k.e` @type ^`byte` @kind byte;
  #L326604.  goto L32661e;
  #L326606.  v2:= `@@com.bumptech.glide.load.l.k.b` @type ^`byte`[] @kind object;
  #L32660a.  v0:= v0 - v1 @kind int;
  #L32660c.  v0:= v2[v0] @kind byte;
  #L326610.  v0:= v0 ^& 255;
  #L326614.  goto L32661e;
  #L326616.  call temp:= `read`(v3) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L32661c.  v0:= temp;
  #L32661e.  v1:= -1I;
  #L326620.  if v0 == v1 then goto L326630;
  #L326624.  v1:= v3.`com.bumptech.glide.load.l.k.f` @type ^`int`;
  #L326628.  v1:= v1 + 1;
  #L32662c.  v3.`com.bumptech.glide.load.l.k.f` @type ^`int` := v1;
  #L326630.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.l.k` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/bumptech/glide/load/l/k;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L326644.  v0:= v3.`com.bumptech.glide.load.l.k.f` @type ^`int`;
  #L326648.  v1:= `@@com.bumptech.glide.load.l.k.d` @type ^`int`;
  #L32664c.  if v0 <= v1 then goto L32665a;
  #L326650.  call temp:= `read`(v3, v4, v5, v6) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L326656.  v4:= temp;
  #L326658.  goto L326698;
  #L32665a.  if v0 != v1 then goto L32666a;
  #L32665e.  v6:= v3.`com.bumptech.glide.load.l.k.e` @type ^`byte` @kind byte;
  #L326662.  v4[v5]:= v6 @kind byte;
  #L326666.  v4:= 1I;
  #L326668.  goto L326698;
  #L32666a.  v2:= 2I;
  #L32666c.  if v0 >= v2 then goto L32667c;
  #L326670.  v2:= v2 - v0 @kind int;
  #L326672.  call temp:= `read`(v3, v4, v5, v2) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L326678.  v4:= temp;
  #L32667a.  goto L326698;
  #L32667c.  v1:= v1 - v0 @kind int;
  #L32667e.  call temp:= `min`(v1, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L326684.  v6:= temp;
  #L326686.  v0:= `@@com.bumptech.glide.load.l.k.b` @type ^`byte`[] @kind object;
  #L32668a.  v1:= v3.`com.bumptech.glide.load.l.k.f` @type ^`int`;
  #L32668e.  v1:= v1 - v2 @kind int;
  #L326690.  call `arraycopy`(v0, v1, v4, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L326696.  v4:= v6;
  #L326698.  if v4 <= 0 then goto L3266a6;
  #L32669c.  v5:= v3.`com.bumptech.glide.load.l.k.f` @type ^`int`;
  #L3266a0.  v5:= v5 + v4 @kind int;
  #L3266a2.  v3.`com.bumptech.glide.load.l.k.f` @type ^`int` := v5;
  #L3266a6.  return v4;
}
procedure `void` `reset`(`com.bumptech.glide.load.l.k` v1 @kind this) @signature `Lcom/bumptech/glide/load/l/k;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3267c0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3267c4.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3267ca.  throw v0;
}
procedure `long` `skip`(`com.bumptech.glide.load.l.k` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/load/l/k;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3266b8.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L3266be.  v4:= temp @kind wide;
  #L3266c0.  v0:= 0L;
  #L3266c4.  v2:= lcmp(v4, v0);
  #L3266c8.  if v2 <= 0 then goto L3266da;
  #L3266cc.  v0:= v3.`com.bumptech.glide.load.l.k.f` @type ^`int`;
  #L3266d0.  v0:= (`long`) v0 @kind i2l;
  #L3266d2.  v0:= v0 + v4 @kind long;
  #L3266d4.  v1:= (`int`) v0 @kind l2i;
  #L3266d6.  v3.`com.bumptech.glide.load.l.k.f` @type ^`int` := v1;
  #L3266da.  return v4 @kind wide;
}
