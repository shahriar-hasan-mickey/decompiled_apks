record `com.bumptech.glide.load.l.j` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `com.bumptech.glide.load.l.j.b` @AccessFlag PRIVATE_FINAL;
}
global `com.bumptech.glide.load.l.f` `@@com.bumptech.glide.load.l.j.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/l/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L326550.  v0:= new `com.bumptech.glide.load.l.h`;
  #L326554.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/l/h;.<init>:()V` @kind direct;
  #L32655a.  `@@com.bumptech.glide.load.l.j.a` @type ^`com.bumptech.glide.load.l.f` := v0 @kind object;
  #L32655e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.l.j` v1 @kind this) @signature `Lcom/bumptech/glide/load/l/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L326570.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L326576.  v0:= new `java.util.HashMap`;
  #L32657a.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L326580.  v1.`com.bumptech.glide.load.l.j.b` @type ^`java.util.Map` := v0 @kind object;
  #L326584.  return @kind void;
}
procedure `com.bumptech.glide.load.l.g` `a`(`com.bumptech.glide.load.l.j` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lcom/bumptech/glide/load/l/j;.a:(Ljava/lang/Object;)Lcom/bumptech/glide/load/l/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3264a8.  @monitorenter v5
  #L3264aa.  call temp:= `d`(v6) @signature `Lcom/bumptech/glide/s/n;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3264b0.  v0:= v5.`com.bumptech.glide.load.l.j.b` @type ^`java.util.Map` @kind object;
  #L3264b4.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3264ba.  v1:= temp @kind object;
  #L3264bc.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3264c2.  v0:= temp @kind object;
  #L3264c4.  v0:= (`com.bumptech.glide.load.l.f`) v0 @kind object;
  #L3264c8.  if v0 != 0 then goto L326516;
  #L3264cc.  v1:= v5.`com.bumptech.glide.load.l.j.b` @type ^`java.util.Map` @kind object;
  #L3264d0.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3264d6.  v1:= temp @kind object;
  #L3264d8.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3264de.  v1:= temp @kind object;
  #L3264e0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3264e6.  v2:= temp;
  #L3264e8.  if v2 == 0 then goto L326516;
  #L3264ec.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3264f2.  v2:= temp @kind object;
  #L3264f4.  v2:= (`com.bumptech.glide.load.l.f`) v2 @kind object;
  #L3264f8.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/load/l/f;.a:()Ljava/lang/Class;` @kind interface;
  #L3264fe.  v3:= temp @kind object;
  #L326500.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L326506.  v4:= temp @kind object;
  #L326508.  call temp:= `isAssignableFrom`(v3, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L32650e.  v3:= temp;
  #L326510.  if v3 == 0 then goto L3264e0;
  #L326514.  v0:= v2 @kind object;
  #L326516.  if v0 != 0 then goto L32651e;
  #L32651a.  v0:= `@@com.bumptech.glide.load.l.j.a` @type ^`com.bumptech.glide.load.l.f` @kind object;
  #L32651e.  call temp:= `b`(v0, v6) @signature `Lcom/bumptech/glide/load/l/f;.b:(Ljava/lang/Object;)Lcom/bumptech/glide/load/l/g;` @kind interface;
  #L326524.  v6:= temp @kind object;
  #L326526.  @monitorexit v5
  #L326528.  return v6 @kind object;
  #L32652a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32652c.  @monitorexit v5
  #L32652e.  goto L326532;
  #L326530.  throw v6;
  #L326532.  goto L326530;
  catch `java.lang.Throwable` @[L3264aa..L326526] goto L32652a;
}
procedure `void` `b`(`com.bumptech.glide.load.l.j` v2 @kind this, `com.bumptech.glide.load.l.f` v3 @kind object) @signature `Lcom/bumptech/glide/load/l/j;.b:(Lcom/bumptech/glide/load/l/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L326598.  @monitorenter v2
  #L32659a.  v0:= v2.`com.bumptech.glide.load.l.j.b` @type ^`java.util.Map` @kind object;
  #L32659e.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/load/l/f;.a:()Ljava/lang/Class;` @kind interface;
  #L3265a4.  v1:= temp @kind object;
  #L3265a6.  call temp:= `put`(v0, v1, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3265ac.  @monitorexit v2
  #L3265ae.  return @kind void;
  #L3265b0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3265b2.  @monitorexit v2
  #L3265b4.  throw v3;
  catch `java.lang.Throwable` @[L32659a..L3265ac] goto L3265b0;
}
