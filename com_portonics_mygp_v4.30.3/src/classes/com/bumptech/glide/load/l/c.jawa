record `com.bumptech.glide.load.l.c` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.OutputStream` @kind class {
  `java.io.OutputStream` `com.bumptech.glide.load.l.c.b` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.bumptech.glide.load.l.c.c` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.bitmap_recycle.b` `com.bumptech.glide.load.l.c.d` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.l.c.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.l.c` v1 @kind this, `java.io.OutputStream` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/l/c;.<init>:(Ljava/io/OutputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L326214.  v0:= 65536I;
  #L326218.  call `<init>`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/load/l/c;.<init>:(Ljava/io/OutputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/b;I)V` @kind direct;
  #L32621e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.l.c` v0 @kind this, `java.io.OutputStream` v1 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.b` v2 @kind object, `int` v3 ) @signature `Lcom/bumptech/glide/load/l/c;.<init>:(Ljava/io/OutputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/b;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L326230.  call `<init>`(v0) @signature `Ljava/io/OutputStream;.<init>:()V` @kind direct;
  #L326236.  v0.`com.bumptech.glide.load.l.c.b` @type ^`java.io.OutputStream` := v1 @kind object;
  #L32623a.  v0.`com.bumptech.glide.load.l.c.d` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.b` := v2 @kind object;
  #L32623e.  v1:= constclass @type ^`byte`[] @kind object;
  #L326242.  call temp:= `e`(v2, v3, v1) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/b;.e:(ILjava/lang/Class;)Ljava/lang/Object;` @kind interface;
  #L326248.  v1:= temp @kind object;
  #L32624a.  v1:= (`byte`[]) v1 @kind object;
  #L32624e.  v0.`com.bumptech.glide.load.l.c.c` @type ^`byte`[] := v1 @kind object;
  #L326252.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.l.c` v4 @kind this) @signature `Lcom/bumptech/glide/load/l/c;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3262cc.  v0:= v4.`com.bumptech.glide.load.l.c.e` @type ^`int`;
  #L3262d0.  if v0 <= 0 then goto L3262e8;
  #L3262d4.  v1:= v4.`com.bumptech.glide.load.l.c.b` @type ^`java.io.OutputStream` @kind object;
  #L3262d8.  v2:= v4.`com.bumptech.glide.load.l.c.c` @type ^`byte`[] @kind object;
  #L3262dc.  v3:= 0I;
  #L3262de.  call `write`(v1, v2, v3, v0) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L3262e4.  v4.`com.bumptech.glide.load.l.c.e` @type ^`int` := v3;
  #L3262e8.  return @kind void;
}
procedure `void` `c`(`com.bumptech.glide.load.l.c` v2 @kind this) @signature `Lcom/bumptech/glide/load/l/c;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3262fc.  v0:= v2.`com.bumptech.glide.load.l.c.e` @type ^`int`;
  #L326300.  v1:= v2.`com.bumptech.glide.load.l.c.c` @type ^`byte`[] @kind object;
  #L326304.  v1:= length @variable v1;
  #L326306.  if v0 != v1 then goto L326310;
  #L32630a.  call `a`(v2) @signature `Lcom/bumptech/glide/load/l/c;.a:()V` @kind direct;
  #L326310.  return @kind void;
}
procedure `void` `d`(`com.bumptech.glide.load.l.c` v2 @kind this) @signature `Lcom/bumptech/glide/load/l/c;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L326324.  v0:= v2.`com.bumptech.glide.load.l.c.c` @type ^`byte`[] @kind object;
  #L326328.  if v0 == 0 then goto L32633c;
  #L32632c.  v1:= v2.`com.bumptech.glide.load.l.c.d` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.b` @kind object;
  #L326330.  call `d`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/b;.d:(Ljava/lang/Object;)V` @kind interface;
  #L326336.  v0:= 0I;
  #L326338.  v2.`com.bumptech.glide.load.l.c.c` @type ^`byte`[] := v0 @kind object;
  #L32633c.  return @kind void;
}
procedure `void` `close`(`com.bumptech.glide.load.l.c` v2 @kind this) @signature `Lcom/bumptech/glide/load/l/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L326264.  call `flush`(v2) @signature `Lcom/bumptech/glide/load/l/c;.flush:()V` @kind virtual;
  #L32626a.  v0:= v2.`com.bumptech.glide.load.l.c.b` @type ^`java.io.OutputStream` @kind object;
  #L32626e.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L326274.  call `d`(v2) @signature `Lcom/bumptech/glide/load/l/c;.d:()V` @kind direct;
  #L32627a.  return @kind void;
  #L32627c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32627e.  v1:= v2.`com.bumptech.glide.load.l.c.b` @type ^`java.io.OutputStream` @kind object;
  #L326282.  call `close`(v1) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L326288.  throw v0;
  catch `java.lang.Throwable` @[L326264..L32626a] goto L32627c;
}
procedure `void` `flush`(`com.bumptech.glide.load.l.c` v1 @kind this) @signature `Lcom/bumptech/glide/load/l/c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3262a8.  call `a`(v1) @signature `Lcom/bumptech/glide/load/l/c;.a:()V` @kind direct;
  #L3262ae.  v0:= v1.`com.bumptech.glide.load.l.c.b` @type ^`java.io.OutputStream` @kind object;
  #L3262b2.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L3262b8.  return @kind void;
}
procedure `void` `write`(`com.bumptech.glide.load.l.c` v3 @kind this, `int` v4 ) @signature `Lcom/bumptech/glide/load/l/c;.write:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3263dc.  v0:= v3.`com.bumptech.glide.load.l.c.c` @type ^`byte`[] @kind object;
  #L3263e0.  v1:= v3.`com.bumptech.glide.load.l.c.e` @type ^`int`;
  #L3263e4.  v2:= v1 + 1;
  #L3263e8.  v3.`com.bumptech.glide.load.l.c.e` @type ^`int` := v2;
  #L3263ec.  v4:= (`byte`) v4 @kind i2b;
  #L3263ee.  v0[v1]:= v4 @kind byte;
  #L3263f2.  call `c`(v3) @signature `Lcom/bumptech/glide/load/l/c;.c:()V` @kind direct;
  #L3263f8.  return @kind void;
}
procedure `void` `write`(`com.bumptech.glide.load.l.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/bumptech/glide/load/l/c;.write:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L326350.  v0:= length @variable v3;
  #L326352.  v1:= 0I;
  #L326354.  call `write`(v2, v3, v1, v0) @signature `Lcom/bumptech/glide/load/l/c;.write:([BII)V` @kind virtual;
  #L32635a.  return @kind void;
}
procedure `void` `write`(`com.bumptech.glide.load.l.c` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/bumptech/glide/load/l/c;.write:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32636c.  v0:= 0I;
  #L32636e.  v1:= v8 - v0 @kind int;
  #L326372.  v2:= v7 + v0 @kind int;
  #L326376.  v3:= v5.`com.bumptech.glide.load.l.c.e` @type ^`int`;
  #L32637a.  if v3 != 0 then goto L326394;
  #L32637e.  v4:= v5.`com.bumptech.glide.load.l.c.c` @type ^`byte`[] @kind object;
  #L326382.  v4:= length @variable v4;
  #L326384.  if v1 < v4 then goto L326394;
  #L326388.  v7:= v5.`com.bumptech.glide.load.l.c.b` @type ^`java.io.OutputStream` @kind object;
  #L32638c.  call `write`(v7, v6, v2, v1) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L326392.  return @kind void;
  #L326394.  v4:= v5.`com.bumptech.glide.load.l.c.c` @type ^`byte`[] @kind object;
  #L326398.  v4:= length @variable v4;
  #L32639a.  v4:= v4 - v3 @kind int;
  #L32639c.  call temp:= `min`(v1, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3263a2.  v1:= temp;
  #L3263a4.  v3:= v5.`com.bumptech.glide.load.l.c.c` @type ^`byte`[] @kind object;
  #L3263a8.  v4:= v5.`com.bumptech.glide.load.l.c.e` @type ^`int`;
  #L3263ac.  call `arraycopy`(v6, v2, v3, v4, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3263b2.  v2:= v5.`com.bumptech.glide.load.l.c.e` @type ^`int`;
  #L3263b6.  v2:= v2 + v1 @kind int;
  #L3263b8.  v5.`com.bumptech.glide.load.l.c.e` @type ^`int` := v2;
  #L3263bc.  v0:= v0 + v1 @kind int;
  #L3263be.  call `c`(v5) @signature `Lcom/bumptech/glide/load/l/c;.c:()V` @kind direct;
  #L3263c4.  if v0 < v8 then goto L32636e;
  #L3263c8.  return @kind void;
}
