record `com.bumptech.glide.load.engine.b1.b` @kind class @AccessFlag FINAL extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.lang.String` `com.bumptech.glide.load.engine.b1.b.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.b1.f` `com.bumptech.glide.load.engine.b1.b.c` @AccessFlag FINAL;
  `boolean` `com.bumptech.glide.load.engine.b1.b.d` @AccessFlag FINAL;
  `int` `com.bumptech.glide.load.engine.b1.b.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.b1.b` v0 @kind this, `java.lang.String` v1 @kind object, `com.bumptech.glide.load.engine.b1.f` v2 @kind object, `boolean` v3 ) @signature `Lcom/bumptech/glide/load/engine/b1/b;.<init>:(Ljava/lang/String;Lcom/bumptech/glide/load/engine/b1/f;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L330000.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L330006.  v0.`com.bumptech.glide.load.engine.b1.b.b` @type ^`java.lang.String` := v1 @kind object;
  #L33000a.  v0.`com.bumptech.glide.load.engine.b1.b.c` @type ^`com.bumptech.glide.load.engine.b1.f` := v2 @kind object;
  #L33000e.  v0.`com.bumptech.glide.load.engine.b1.b.d` @type ^`boolean` := v3 @kind boolean;
  #L330012.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`com.bumptech.glide.load.engine.b1.b` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/b1/b;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32ff88.  @monitorenter v3
  #L32ff8a.  v0:= new `com.bumptech.glide.load.engine.b1.a`;
  #L32ff8e.  v1:= new `java.lang.StringBuilder`;
  #L32ff92.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32ff98.  v2:= "glide-" @kind object;
  #L32ff9c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ffa2.  v2:= v3.`com.bumptech.glide.load.engine.b1.b.b` @type ^`java.lang.String` @kind object;
  #L32ffa6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ffac.  v2:= "-thread-" @kind object;
  #L32ffb0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ffb6.  v2:= v3.`com.bumptech.glide.load.engine.b1.b.e` @type ^`int`;
  #L32ffba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ffc0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32ffc6.  v1:= temp @kind object;
  #L32ffc8.  call `<init>`(v0, v3, v4, v1) @signature `Lcom/bumptech/glide/load/engine/b1/a;.<init>:(Lcom/bumptech/glide/load/engine/b1/b;Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L32ffce.  v4:= v3.`com.bumptech.glide.load.engine.b1.b.e` @type ^`int`;
  #L32ffd2.  v4:= v4 + 1;
  #L32ffd6.  v3.`com.bumptech.glide.load.engine.b1.b.e` @type ^`int` := v4;
  #L32ffda.  @monitorexit v3
  #L32ffdc.  return v0 @kind object;
  #L32ffde.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32ffe0.  @monitorexit v3
  #L32ffe2.  throw v4;
  catch `java.lang.Throwable` @[L32ff8a..L32ffda] goto L32ffde;
}
