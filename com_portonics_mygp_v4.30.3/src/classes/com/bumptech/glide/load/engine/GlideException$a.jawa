record `com.bumptech.glide.load.engine.GlideException$a` @kind class @AccessFlag FINAL extends `java.lang.Appendable` @kind interface {
  `java.lang.Appendable` `com.bumptech.glide.load.engine.GlideException$a.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.load.engine.GlideException$a.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException$a` v1 @kind this, `java.lang.Appendable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.<init>:(Ljava/lang/Appendable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L32ba54.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32ba5a.  v0:= 1I;
  #L32ba5c.  v1.`com.bumptech.glide.load.engine.GlideException$a.c` @type ^`boolean` := v0 @kind boolean;
  #L32ba60.  v1.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`java.lang.Appendable` := v2 @kind object;
  #L32ba64.  return @kind void;
}
procedure `java.lang.CharSequence` `a`(`com.bumptech.glide.load.engine.GlideException$a` v0 @kind this, `java.lang.CharSequence` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @AccessFlag PRIVATE {
    temp;

  #L32ba38.  if v1 != 0 then goto L32ba40;
  #L32ba3c.  v1:= "" @kind object;
  #L32ba40.  return v1 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v3 @kind this, `char` v4 ) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(C)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32b95c.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.c` @type ^`boolean` @kind boolean;
  #L32b960.  v1:= 0I;
  #L32b962.  if v0 == 0 then goto L32b978;
  #L32b966.  v3.`com.bumptech.glide.load.engine.GlideException$a.c` @type ^`boolean` := v1 @kind boolean;
  #L32b96a.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`java.lang.Appendable` @kind object;
  #L32b96e.  v2:= "  " @kind object;
  #L32b972.  call temp:= `append`(v0, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L32b978.  v0:= 10I;
  #L32b97c.  if v4 != v0 then goto L32b982;
  #L32b980.  v1:= 1I;
  #L32b982.  v3.`com.bumptech.glide.load.engine.GlideException$a.c` @type ^`boolean` := v1 @kind boolean;
  #L32b986.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`java.lang.Appendable` @kind object;
  #L32b98a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L32b990.  return v3 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v2 @kind this, `java.lang.CharSequence` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32b9a4.  call temp:= `a`(v2, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind direct;
  #L32b9aa.  v3:= temp @kind object;
  #L32b9ac.  call temp:= `length`(v3) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L32b9b2.  v0:= temp;
  #L32b9b4.  v1:= 0I;
  #L32b9b6.  call temp:= `append`(v2, v3, v1, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @kind virtual;
  #L32b9bc.  v3:= temp @kind object;
  #L32b9be.  return v3 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v3 @kind this, `java.lang.CharSequence` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32b9d0.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind direct;
  #L32b9d6.  v4:= temp @kind object;
  #L32b9d8.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.c` @type ^`boolean` @kind boolean;
  #L32b9dc.  v1:= 0I;
  #L32b9de.  if v0 == 0 then goto L32b9f4;
  #L32b9e2.  v3.`com.bumptech.glide.load.engine.GlideException$a.c` @type ^`boolean` := v1 @kind boolean;
  #L32b9e6.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`java.lang.Appendable` @kind object;
  #L32b9ea.  v2:= "  " @kind object;
  #L32b9ee.  call temp:= `append`(v0, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L32b9f4.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L32b9fa.  v0:= temp;
  #L32b9fc.  if v0 <= 0 then goto L32ba16;
  #L32ba00.  v0:= v6 + -1;
  #L32ba04.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L32ba0a.  v0:= temp;
  #L32ba0c.  v2:= 10I;
  #L32ba10.  if v0 != v2 then goto L32ba16;
  #L32ba14.  v1:= 1I;
  #L32ba16.  v3.`com.bumptech.glide.load.engine.GlideException$a.c` @type ^`boolean` := v1 @kind boolean;
  #L32ba1a.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`java.lang.Appendable` @kind object;
  #L32ba1e.  call temp:= `append`(v0, v4, v5, v6) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @kind interface;
  #L32ba24.  return v3 @kind object;
}
