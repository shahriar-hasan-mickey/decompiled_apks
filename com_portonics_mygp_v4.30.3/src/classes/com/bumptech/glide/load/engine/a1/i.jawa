record `com.bumptech.glide.load.engine.a1.i` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.engine.a1.a` @kind interface {
  `com.bumptech.glide.load.engine.a1.u` `com.bumptech.glide.load.engine.a1.i.a` @AccessFlag PRIVATE_FINAL;
  `java.io.File` `com.bumptech.glide.load.engine.a1.i.b` @AccessFlag PRIVATE_FINAL;
  `long` `com.bumptech.glide.load.engine.a1.i.c` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.a1.f` `com.bumptech.glide.load.engine.a1.i.d` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.m.f` `com.bumptech.glide.load.engine.a1.i.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a1.i` v1 @kind this, `java.io.File` v2 @kind object, `long` v3 ) @signature `Lcom/bumptech/glide/load/engine/a1/i;.<init>:(Ljava/io/File;J)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L32f5b4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32f5ba.  v0:= new `com.bumptech.glide.load.engine.a1.f`;
  #L32f5be.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/a1/f;.<init>:()V` @kind direct;
  #L32f5c4.  v1.`com.bumptech.glide.load.engine.a1.i.d` @type ^`com.bumptech.glide.load.engine.a1.f` := v0 @kind object;
  #L32f5c8.  v1.`com.bumptech.glide.load.engine.a1.i.b` @type ^`java.io.File` := v2 @kind object;
  #L32f5cc.  v1.`com.bumptech.glide.load.engine.a1.i.c` @type ^`long` := v3 @kind wide;
  #L32f5d0.  v2:= new `com.bumptech.glide.load.engine.a1.u`;
  #L32f5d4.  call `<init>`(v2) @signature `Lcom/bumptech/glide/load/engine/a1/u;.<init>:()V` @kind direct;
  #L32f5da.  v1.`com.bumptech.glide.load.engine.a1.i.a` @type ^`com.bumptech.glide.load.engine.a1.u` := v2 @kind object;
  #L32f5de.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.a1.a` `c`(`java.io.File` v1 @kind object, `long` v2 ) @signature `Lcom/bumptech/glide/load/engine/a1/i;.c:(Ljava/io/File;J)Lcom/bumptech/glide/load/engine/a1/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L32f4f8.  v0:= new `com.bumptech.glide.load.engine.a1.i`;
  #L32f4fc.  call `<init>`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/engine/a1/i;.<init>:(Ljava/io/File;J)V` @kind direct;
  #L32f502.  return v0 @kind object;
}
procedure `com.bumptech.glide.m.f` `d`(`com.bumptech.glide.load.engine.a1.i` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/a1/i;.d:()Lcom/bumptech/glide/m/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32f4ac.  @monitorenter v4
  #L32f4ae.  v0:= v4.`com.bumptech.glide.load.engine.a1.i.e` @type ^`com.bumptech.glide.m.f` @kind object;
  #L32f4b2.  if v0 != 0 then goto L32f4cc;
  #L32f4b6.  v0:= v4.`com.bumptech.glide.load.engine.a1.i.b` @type ^`java.io.File` @kind object;
  #L32f4ba.  v1:= v4.`com.bumptech.glide.load.engine.a1.i.c` @type ^`long` @kind wide;
  #L32f4be.  v3:= 1I;
  #L32f4c0.  call temp:= `N0`(v0, v3, v3, v1) @signature `Lcom/bumptech/glide/m/f;.N0:(Ljava/io/File;IIJ)Lcom/bumptech/glide/m/f;` @kind static;
  #L32f4c6.  v0:= temp @kind object;
  #L32f4c8.  v4.`com.bumptech.glide.load.engine.a1.i.e` @type ^`com.bumptech.glide.m.f` := v0 @kind object;
  #L32f4cc.  v0:= v4.`com.bumptech.glide.load.engine.a1.i.e` @type ^`com.bumptech.glide.m.f` @kind object;
  #L32f4d0.  @monitorexit v4
  #L32f4d2.  return v0 @kind object;
  #L32f4d4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32f4d6.  @monitorexit v4
  #L32f4d8.  throw v0;
  catch `java.lang.Throwable` @[L32f4ae..L32f4d0] goto L32f4d4;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a1.i` v4 @kind this, `com.bumptech.glide.load.c` v5 @kind object, `com.bumptech.glide.load.engine.a1.b` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/i;.a:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/engine/a1/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32f5f0.  v0:= "DiskLruCacheWrapper" @kind object;
  #L32f5f4.  v1:= v4.`com.bumptech.glide.load.engine.a1.i.a` @type ^`com.bumptech.glide.load.engine.a1.u` @kind object;
  #L32f5f8.  call temp:= `b`(v1, v5) @signature `Lcom/bumptech/glide/load/engine/a1/u;.b:(Lcom/bumptech/glide/load/c;)Ljava/lang/String;` @kind virtual;
  #L32f5fe.  v1:= temp @kind object;
  #L32f600.  v2:= v4.`com.bumptech.glide.load.engine.a1.i.d` @type ^`com.bumptech.glide.load.engine.a1.f` @kind object;
  #L32f604.  call `a`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/a1/f;.a:(Ljava/lang/String;)V` @kind virtual;
  #L32f60a.  v2:= 2I;
  #L32f60c.  call temp:= `isLoggable`(v0, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L32f612.  v2:= temp;
  #L32f614.  if v2 == 0 then goto L32f648;
  #L32f618.  v2:= new `java.lang.StringBuilder`;
  #L32f61c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32f622.  v3:= "Put: Obtained: " @kind object;
  #L32f626.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f62c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f632.  v3:= " for for Key: " @kind object;
  #L32f636.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f63c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f642.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32f648.  call temp:= `d`(v4) @signature `Lcom/bumptech/glide/load/engine/a1/i;.d:()Lcom/bumptech/glide/m/f;` @kind direct;
  #L32f64e.  v5:= temp @kind object;
  #L32f650.  call temp:= `G0`(v5, v1) @signature `Lcom/bumptech/glide/m/f;.G0:(Ljava/lang/String;)Lcom/bumptech/glide/m/e;` @kind virtual;
  #L32f656.  v2:= temp @kind object;
  #L32f658.  if v2 == 0 then goto L32f668;
  #L32f65c.  v5:= v4.`com.bumptech.glide.load.engine.a1.i.d` @type ^`com.bumptech.glide.load.engine.a1.f` @kind object;
  #L32f660.  call `b`(v5, v1) @signature `Lcom/bumptech/glide/load/engine/a1/f;.b:(Ljava/lang/String;)V` @kind virtual;
  #L32f666.  return @kind void;
  #L32f668.  call temp:= `u0`(v5, v1) @signature `Lcom/bumptech/glide/m/f;.u0:(Ljava/lang/String;)Lcom/bumptech/glide/m/c;` @kind virtual;
  #L32f66e.  v5:= temp @kind object;
  #L32f670.  if v5 == 0 then goto L32f6a2;
  #L32f674.  v2:= 0I;
  #L32f676.  call temp:= `f`(v5, v2) @signature `Lcom/bumptech/glide/m/c;.f:(I)Ljava/io/File;` @kind virtual;
  #L32f67c.  v2:= temp @kind object;
  #L32f67e.  call temp:= `a`(v6, v2) @signature `Lcom/bumptech/glide/load/engine/a1/b;.a:(Ljava/io/File;)Z` @kind interface;
  #L32f684.  v6:= temp;
  #L32f686.  if v6 == 0 then goto L32f690;
  #L32f68a.  call `e`(v5) @signature `Lcom/bumptech/glide/m/c;.e:()V` @kind virtual;
  #L32f690.  call `b`(v5) @signature `Lcom/bumptech/glide/m/c;.b:()V` @kind virtual;
  #L32f696.  goto L32f6da;
  #L32f698.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32f69a.  call `b`(v5) @signature `Lcom/bumptech/glide/m/c;.b:()V` @kind virtual;
  #L32f6a0.  throw v6;
  #L32f6a2.  v5:= new `java.lang.IllegalStateException`;
  #L32f6a6.  v6:= new `java.lang.StringBuilder`;
  #L32f6aa.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32f6b0.  v2:= "Had two simultaneous puts for: " @kind object;
  #L32f6b4.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f6ba.  call temp:= `append`(v6, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f6c0.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32f6c6.  v6:= temp @kind object;
  #L32f6c8.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32f6ce.  throw v5;
  #L32f6d0.  v5:= 5I;
  #L32f6d2.  call temp:= `isLoggable`(v0, v5) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L32f6d8.  v5:= temp;
  #L32f6da.  v5:= v4.`com.bumptech.glide.load.engine.a1.i.d` @type ^`com.bumptech.glide.load.engine.a1.f` @kind object;
  #L32f6de.  call `b`(v5, v1) @signature `Lcom/bumptech/glide/load/engine/a1/f;.b:(Ljava/lang/String;)V` @kind virtual;
  #L32f6e4.  return @kind void;
  #L32f6e6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32f6e8.  v6:= v4.`com.bumptech.glide.load.engine.a1.i.d` @type ^`com.bumptech.glide.load.engine.a1.f` @kind object;
  #L32f6ec.  call `b`(v6, v1) @signature `Lcom/bumptech/glide/load/engine/a1/f;.b:(Ljava/lang/String;)V` @kind virtual;
  #L32f6f2.  throw v5;
  catch `java.lang.Throwable` @[L32f60c..L32f648] goto L32f6e6;
  catch `java.io.IOException` @[L32f648..L32f658] goto L32f6d0;
  catch `java.lang.Throwable` @[L32f648..L32f658] goto L32f6e6;
  catch `java.io.IOException` @[L32f668..L32f670] goto L32f6d0;
  catch `java.lang.Throwable` @[L32f668..L32f670] goto L32f6e6;
  catch `java.lang.Throwable` @[L32f676..L32f690] goto L32f698;
  catch `java.io.IOException` @[L32f690..L32f6d0] goto L32f6d0;
  catch `java.lang.Throwable` @[L32f690..L32f6d0] goto L32f6e6;
  catch `java.lang.Throwable` @[L32f6d2..L32f6da] goto L32f6e6;
}
procedure `java.io.File` `b`(`com.bumptech.glide.load.engine.a1.i` v4 @kind this, `com.bumptech.glide.load.c` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/i;.b:(Lcom/bumptech/glide/load/c;)Ljava/io/File;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32f514.  v0:= v4.`com.bumptech.glide.load.engine.a1.i.a` @type ^`com.bumptech.glide.load.engine.a1.u` @kind object;
  #L32f518.  call temp:= `b`(v0, v5) @signature `Lcom/bumptech/glide/load/engine/a1/u;.b:(Lcom/bumptech/glide/load/c;)Ljava/lang/String;` @kind virtual;
  #L32f51e.  v0:= temp @kind object;
  #L32f520.  v1:= "DiskLruCacheWrapper" @kind object;
  #L32f524.  v2:= 2I;
  #L32f526.  call temp:= `isLoggable`(v1, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L32f52c.  v2:= temp;
  #L32f52e.  if v2 == 0 then goto L32f562;
  #L32f532.  v2:= new `java.lang.StringBuilder`;
  #L32f536.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32f53c.  v3:= "Get: Obtained: " @kind object;
  #L32f540.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f546.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f54c.  v3:= " for for Key: " @kind object;
  #L32f550.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f556.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f55c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32f562.  v5:= 0I;
  #L32f564.  call temp:= `d`(v4) @signature `Lcom/bumptech/glide/load/engine/a1/i;.d:()Lcom/bumptech/glide/m/f;` @kind direct;
  #L32f56a.  v2:= temp @kind object;
  #L32f56c.  call temp:= `G0`(v2, v0) @signature `Lcom/bumptech/glide/m/f;.G0:(Ljava/lang/String;)Lcom/bumptech/glide/m/e;` @kind virtual;
  #L32f572.  v0:= temp @kind object;
  #L32f574.  if v0 == 0 then goto L32f590;
  #L32f578.  v2:= 0I;
  #L32f57a.  call temp:= `a`(v0, v2) @signature `Lcom/bumptech/glide/m/e;.a:(I)Ljava/io/File;` @kind virtual;
  #L32f580.  v5:= temp @kind object;
  #L32f582.  goto L32f590;
  #L32f584.  
  #L32f586.  v0:= 5I;
  #L32f588.  call temp:= `isLoggable`(v1, v0) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L32f58e.  v0:= temp;
  #L32f590.  return v5 @kind object;
  catch `java.io.IOException` @[L32f564..L32f582] goto L32f584;
}
