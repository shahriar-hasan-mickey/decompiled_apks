record `com.bumptech.glide.load.engine.l` @kind class @AccessFlag FINAL {
  `java.util.List` `com.bumptech.glide.load.engine.l.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.bumptech.glide.load.engine.l.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.g` `com.bumptech.glide.load.engine.l.c` @AccessFlag PRIVATE;
  `java.lang.Object` `com.bumptech.glide.load.engine.l.d` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.l.e` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.l.f` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.load.engine.l.g` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.p` `com.bumptech.glide.load.engine.l.h` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.h` `com.bumptech.glide.load.engine.l.i` @AccessFlag PRIVATE;
  `java.util.Map` `com.bumptech.glide.load.engine.l.j` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.load.engine.l.k` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.l.l` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.l.m` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.c` `com.bumptech.glide.load.engine.l.n` @AccessFlag PRIVATE;
  `com.bumptech.glide.Priority` `com.bumptech.glide.load.engine.l.o` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.y` `com.bumptech.glide.load.engine.l.p` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.l.q` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.l.r` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3285f8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3285fe.  v0:= new `java.util.ArrayList`;
  #L328602.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L328608.  v1.`com.bumptech.glide.load.engine.l.a` @type ^`java.util.List` := v0 @kind object;
  #L32860c.  v0:= new `java.util.ArrayList`;
  #L328610.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L328616.  v1.`com.bumptech.glide.load.engine.l.b` @type ^`java.util.List` := v0 @kind object;
  #L32861a.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.l` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L32862c.  v0:= 0I;
  #L32862e.  v2.`com.bumptech.glide.load.engine.l.c` @type ^`com.bumptech.glide.g` := v0 @kind object;
  #L328632.  v2.`com.bumptech.glide.load.engine.l.d` @type ^`java.lang.Object` := v0 @kind object;
  #L328636.  v2.`com.bumptech.glide.load.engine.l.n` @type ^`com.bumptech.glide.load.c` := v0 @kind object;
  #L32863a.  v2.`com.bumptech.glide.load.engine.l.g` @type ^`java.lang.Class` := v0 @kind object;
  #L32863e.  v2.`com.bumptech.glide.load.engine.l.k` @type ^`java.lang.Class` := v0 @kind object;
  #L328642.  v2.`com.bumptech.glide.load.engine.l.i` @type ^`com.bumptech.glide.load.h` := v0 @kind object;
  #L328646.  v2.`com.bumptech.glide.load.engine.l.o` @type ^`com.bumptech.glide.Priority` := v0 @kind object;
  #L32864a.  v2.`com.bumptech.glide.load.engine.l.j` @type ^`java.util.Map` := v0 @kind object;
  #L32864e.  v2.`com.bumptech.glide.load.engine.l.p` @type ^`com.bumptech.glide.load.engine.y` := v0 @kind object;
  #L328652.  v0:= v2.`com.bumptech.glide.load.engine.l.a` @type ^`java.util.List` @kind object;
  #L328656.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L32865c.  v0:= 0I;
  #L32865e.  v2.`com.bumptech.glide.load.engine.l.l` @type ^`boolean` := v0 @kind boolean;
  #L328662.  v1:= v2.`com.bumptech.glide.load.engine.l.b` @type ^`java.util.List` @kind object;
  #L328666.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L32866c.  v2.`com.bumptech.glide.load.engine.l.m` @type ^`boolean` := v0 @kind boolean;
  #L328670.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.bitmap_recycle.b` `b`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.b:()Lcom/bumptech/glide/load/engine/bitmap_recycle/b;` @AccessFlag  {
    temp;
    v0;

  #L32839c.  v0:= v1.`com.bumptech.glide.load.engine.l.c` @type ^`com.bumptech.glide.g` @kind object;
  #L3283a0.  call temp:= `b`(v0) @signature `Lcom/bumptech/glide/g;.b:()Lcom/bumptech/glide/load/engine/bitmap_recycle/b;` @kind virtual;
  #L3283a6.  v0:= temp @kind object;
  #L3283a8.  return v0 @kind object;
}
procedure `java.util.List` `c`(`com.bumptech.glide.load.engine.l` v8 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.c:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L328444.  v0:= v8.`com.bumptech.glide.load.engine.l.m` @type ^`boolean` @kind boolean;
  #L328448.  if v0 != 0 then goto L3284f2;
  #L32844c.  v0:= 1I;
  #L32844e.  v8.`com.bumptech.glide.load.engine.l.m` @type ^`boolean` := v0 @kind boolean;
  #L328452.  v0:= v8.`com.bumptech.glide.load.engine.l.b` @type ^`java.util.List` @kind object;
  #L328456.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L32845c.  call temp:= `g`(v8) @signature `Lcom/bumptech/glide/load/engine/l;.g:()Ljava/util/List;` @kind virtual;
  #L328462.  v0:= temp @kind object;
  #L328464.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32846a.  v1:= temp;
  #L32846c.  v2:= 0I;
  #L32846e.  v3:= 0I;
  #L328470.  if v3 >= v1 then goto L3284f2;
  #L328474.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L32847a.  v4:= temp @kind object;
  #L32847c.  v4:= (`com.bumptech.glide.load.m.p0`) v4 @kind object;
  #L328480.  v5:= v8.`com.bumptech.glide.load.engine.l.b` @type ^`java.util.List` @kind object;
  #L328484.  v6:= v4.`com.bumptech.glide.load.m.p0.a` @type ^`com.bumptech.glide.load.c` @kind object;
  #L328488.  call temp:= `contains`(v5, v6) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L32848e.  v5:= temp;
  #L328490.  if v5 != 0 then goto L3284a2;
  #L328494.  v5:= v8.`com.bumptech.glide.load.engine.l.b` @type ^`java.util.List` @kind object;
  #L328498.  v6:= v4.`com.bumptech.glide.load.m.p0.a` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32849c.  call temp:= `add`(v5, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3284a2.  v5:= 0I;
  #L3284a4.  v6:= v4.`com.bumptech.glide.load.m.p0.b` @type ^`java.util.List` @kind object;
  #L3284a8.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3284ae.  v6:= temp;
  #L3284b0.  if v5 >= v6 then goto L3284ec;
  #L3284b4.  v6:= v8.`com.bumptech.glide.load.engine.l.b` @type ^`java.util.List` @kind object;
  #L3284b8.  v7:= v4.`com.bumptech.glide.load.m.p0.b` @type ^`java.util.List` @kind object;
  #L3284bc.  call temp:= `get`(v7, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3284c2.  v7:= temp @kind object;
  #L3284c4.  call temp:= `contains`(v6, v7) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3284ca.  v6:= temp;
  #L3284cc.  if v6 != 0 then goto L3284e6;
  #L3284d0.  v6:= v8.`com.bumptech.glide.load.engine.l.b` @type ^`java.util.List` @kind object;
  #L3284d4.  v7:= v4.`com.bumptech.glide.load.m.p0.b` @type ^`java.util.List` @kind object;
  #L3284d8.  call temp:= `get`(v7, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3284de.  v7:= temp @kind object;
  #L3284e0.  call temp:= `add`(v6, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3284e6.  v5:= v5 + 1;
  #L3284ea.  goto L3284a4;
  #L3284ec.  v3:= v3 + 1;
  #L3284f0.  goto L328470;
  #L3284f2.  v0:= v8.`com.bumptech.glide.load.engine.l.b` @type ^`java.util.List` @kind object;
  #L3284f6.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.a1.a` `d`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.d:()Lcom/bumptech/glide/load/engine/a1/a;` @AccessFlag  {
    temp;
    v0;

  #L3283bc.  v0:= v1.`com.bumptech.glide.load.engine.l.h` @type ^`com.bumptech.glide.load.engine.p` @kind object;
  #L3283c0.  call temp:= `a`(v0) @signature `Lcom/bumptech/glide/load/engine/p;.a:()Lcom/bumptech/glide/load/engine/a1/a;` @kind interface;
  #L3283c6.  v0:= temp @kind object;
  #L3283c8.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.y` `e`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.e:()Lcom/bumptech/glide/load/engine/y;` @AccessFlag  {
    temp;
    v0;

  #L328354.  v0:= v1.`com.bumptech.glide.load.engine.l.p` @type ^`com.bumptech.glide.load.engine.y` @kind object;
  #L328358.  return v0 @kind object;
}
procedure `int` `f`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.f:()I` @AccessFlag  {
    temp;
    v0;

  #L3283dc.  v0:= v1.`com.bumptech.glide.load.engine.l.f` @type ^`int`;
  #L3283e0.  return v0;
}
procedure `java.util.List` `g`(`com.bumptech.glide.load.engine.l` v8 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.g:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L328508.  v0:= v8.`com.bumptech.glide.load.engine.l.l` @type ^`boolean` @kind boolean;
  #L32850c.  if v0 != 0 then goto L32857e;
  #L328510.  v0:= 1I;
  #L328512.  v8.`com.bumptech.glide.load.engine.l.l` @type ^`boolean` := v0 @kind boolean;
  #L328516.  v0:= v8.`com.bumptech.glide.load.engine.l.a` @type ^`java.util.List` @kind object;
  #L32851a.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L328520.  v0:= v8.`com.bumptech.glide.load.engine.l.c` @type ^`com.bumptech.glide.g` @kind object;
  #L328524.  call temp:= `h`(v0) @signature `Lcom/bumptech/glide/g;.h:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L32852a.  v0:= temp @kind object;
  #L32852c.  v1:= v8.`com.bumptech.glide.load.engine.l.d` @type ^`java.lang.Object` @kind object;
  #L328530.  call temp:= `i`(v0, v1) @signature `Lcom/bumptech/glide/Registry;.i:(Ljava/lang/Object;)Ljava/util/List;` @kind virtual;
  #L328536.  v0:= temp @kind object;
  #L328538.  v1:= 0I;
  #L32853a.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L328540.  v2:= temp;
  #L328542.  if v1 >= v2 then goto L32857e;
  #L328546.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L32854c.  v3:= temp @kind object;
  #L32854e.  v3:= (`com.bumptech.glide.load.m.q0`) v3 @kind object;
  #L328552.  v4:= v8.`com.bumptech.glide.load.engine.l.d` @type ^`java.lang.Object` @kind object;
  #L328556.  v5:= v8.`com.bumptech.glide.load.engine.l.e` @type ^`int`;
  #L32855a.  v6:= v8.`com.bumptech.glide.load.engine.l.f` @type ^`int`;
  #L32855e.  v7:= v8.`com.bumptech.glide.load.engine.l.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L328562.  call temp:= `b`(v3, v4, v5, v6, v7) @signature `Lcom/bumptech/glide/load/m/q0;.b:(Ljava/lang/Object;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/m/p0;` @kind interface;
  #L328568.  v3:= temp @kind object;
  #L32856a.  if v3 == 0 then goto L328578;
  #L32856e.  v4:= v8.`com.bumptech.glide.load.engine.l.a` @type ^`java.util.List` @kind object;
  #L328572.  call temp:= `add`(v4, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L328578.  v1:= v1 + 1;
  #L32857c.  goto L328542;
  #L32857e.  v0:= v8.`com.bumptech.glide.load.engine.l.a` @type ^`java.util.List` @kind object;
  #L328582.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.r0` `h`(`com.bumptech.glide.load.engine.l` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/l;.h:(Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/r0;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L32836c.  v0:= v3.`com.bumptech.glide.load.engine.l.c` @type ^`com.bumptech.glide.g` @kind object;
  #L328370.  call temp:= `h`(v0) @signature `Lcom/bumptech/glide/g;.h:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L328376.  v0:= temp @kind object;
  #L328378.  v1:= v3.`com.bumptech.glide.load.engine.l.g` @type ^`java.lang.Class` @kind object;
  #L32837c.  v2:= v3.`com.bumptech.glide.load.engine.l.k` @type ^`java.lang.Class` @kind object;
  #L328380.  call temp:= `h`(v0, v4, v1, v2) @signature `Lcom/bumptech/glide/Registry;.h:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/r0;` @kind virtual;
  #L328386.  v4:= temp @kind object;
  #L328388.  return v4 @kind object;
}
procedure `java.lang.Class` `i`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.i:()Ljava/lang/Class;` @AccessFlag  {
    temp;
    v0;

  #L32840c.  v0:= v1.`com.bumptech.glide.load.engine.l.d` @type ^`java.lang.Object` @kind object;
  #L328410.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L328416.  v0:= temp @kind object;
  #L328418.  return v0 @kind object;
}
procedure `java.util.List` `j`(`com.bumptech.glide.load.engine.l` v1 @kind this, `java.io.File` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/l;.j:(Ljava/io/File;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;

  #L328594.  v0:= v1.`com.bumptech.glide.load.engine.l.c` @type ^`com.bumptech.glide.g` @kind object;
  #L328598.  call temp:= `h`(v0) @signature `Lcom/bumptech/glide/g;.h:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L32859e.  v0:= temp @kind object;
  #L3285a0.  call temp:= `i`(v0, v2) @signature `Lcom/bumptech/glide/Registry;.i:(Ljava/lang/Object;)Ljava/util/List;` @kind virtual;
  #L3285a6.  v2:= temp @kind object;
  #L3285a8.  return v2 @kind object;
}
procedure `com.bumptech.glide.load.h` `k`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.k:()Lcom/bumptech/glide/load/h;` @AccessFlag  {
    temp;
    v0;

  #L32823c.  v0:= v1.`com.bumptech.glide.load.engine.l.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L328240.  return v0 @kind object;
}
procedure `com.bumptech.glide.Priority` `l`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.l:()Lcom/bumptech/glide/Priority;` @AccessFlag  {
    temp;
    v0;

  #L3281e4.  v0:= v1.`com.bumptech.glide.load.engine.l.o` @type ^`com.bumptech.glide.Priority` @kind object;
  #L3281e8.  return v0 @kind object;
}
procedure `java.util.List` `m`(`com.bumptech.glide.load.engine.l` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.m:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3285bc.  v0:= v4.`com.bumptech.glide.load.engine.l.c` @type ^`com.bumptech.glide.g` @kind object;
  #L3285c0.  call temp:= `h`(v0) @signature `Lcom/bumptech/glide/g;.h:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L3285c6.  v0:= temp @kind object;
  #L3285c8.  v1:= v4.`com.bumptech.glide.load.engine.l.d` @type ^`java.lang.Object` @kind object;
  #L3285cc.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3285d2.  v1:= temp @kind object;
  #L3285d4.  v2:= v4.`com.bumptech.glide.load.engine.l.g` @type ^`java.lang.Class` @kind object;
  #L3285d8.  v3:= v4.`com.bumptech.glide.load.engine.l.k` @type ^`java.lang.Class` @kind object;
  #L3285dc.  call temp:= `j`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/Registry;.j:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L3285e2.  v0:= temp @kind object;
  #L3285e4.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.j` `n`(`com.bumptech.glide.load.engine.l` v1 @kind this, `com.bumptech.glide.load.engine.u0` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/l;.n:(Lcom/bumptech/glide/load/engine/u0;)Lcom/bumptech/glide/load/j;` @AccessFlag  {
    temp;
    v0;

  #L328254.  v0:= v1.`com.bumptech.glide.load.engine.l.c` @type ^`com.bumptech.glide.g` @kind object;
  #L328258.  call temp:= `h`(v0) @signature `Lcom/bumptech/glide/g;.h:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L32825e.  v0:= temp @kind object;
  #L328260.  call temp:= `k`(v0, v2) @signature `Lcom/bumptech/glide/Registry;.k:(Lcom/bumptech/glide/load/engine/u0;)Lcom/bumptech/glide/load/j;` @kind virtual;
  #L328266.  v2:= temp @kind object;
  #L328268.  return v2 @kind object;
}
procedure `com.bumptech.glide.load.c` `o`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.o:()Lcom/bumptech/glide/load/c;` @AccessFlag  {
    temp;
    v0;

  #L328224.  v0:= v1.`com.bumptech.glide.load.engine.l.n` @type ^`com.bumptech.glide.load.c` @kind object;
  #L328228.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.a` `p`(`com.bumptech.glide.load.engine.l` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/l;.p:(Ljava/lang/Object;)Lcom/bumptech/glide/load/a;` @AccessFlag  {
    temp;
    v0;

  #L3281fc.  v0:= v1.`com.bumptech.glide.load.engine.l.c` @type ^`com.bumptech.glide.g` @kind object;
  #L328200.  call temp:= `h`(v0) @signature `Lcom/bumptech/glide/g;.h:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L328206.  v0:= temp @kind object;
  #L328208.  call temp:= `m`(v0, v2) @signature `Lcom/bumptech/glide/Registry;.m:(Ljava/lang/Object;)Lcom/bumptech/glide/load/a;` @kind virtual;
  #L32820e.  v2:= temp @kind object;
  #L328210.  return v2 @kind object;
}
procedure `java.lang.Class` `q`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.q:()Ljava/lang/Class;` @AccessFlag  {
    temp;
    v0;

  #L32842c.  v0:= v1.`com.bumptech.glide.load.engine.l.k` @type ^`java.lang.Class` @kind object;
  #L328430.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.k` `r`(`com.bumptech.glide.load.engine.l` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/l;.r:(Ljava/lang/Class;)Lcom/bumptech/glide/load/k;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32827c.  v0:= v4.`com.bumptech.glide.load.engine.l.j` @type ^`java.util.Map` @kind object;
  #L328280.  call temp:= `get`(v0, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L328286.  v0:= temp @kind object;
  #L328288.  v0:= (`com.bumptech.glide.load.k`) v0 @kind object;
  #L32828c.  if v0 != 0 then goto L3282e0;
  #L328290.  v1:= v4.`com.bumptech.glide.load.engine.l.j` @type ^`java.util.Map` @kind object;
  #L328294.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L32829a.  v1:= temp @kind object;
  #L32829c.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3282a2.  v1:= temp @kind object;
  #L3282a4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3282aa.  v2:= temp;
  #L3282ac.  if v2 == 0 then goto L3282e0;
  #L3282b0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3282b6.  v2:= temp @kind object;
  #L3282b8.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L3282bc.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3282c2.  v3:= temp @kind object;
  #L3282c4.  v3:= (`java.lang.Class`) v3 @kind object;
  #L3282c8.  call temp:= `isAssignableFrom`(v3, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3282ce.  v3:= temp;
  #L3282d0.  if v3 == 0 then goto L3282a4;
  #L3282d4.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3282da.  v0:= temp @kind object;
  #L3282dc.  v0:= (`com.bumptech.glide.load.k`) v0 @kind object;
  #L3282e0.  if v0 != 0 then goto L328340;
  #L3282e4.  v0:= v4.`com.bumptech.glide.load.engine.l.j` @type ^`java.util.Map` @kind object;
  #L3282e8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L3282ee.  v0:= temp;
  #L3282f0.  if v0 == 0 then goto L328336;
  #L3282f4.  v0:= v4.`com.bumptech.glide.load.engine.l.q` @type ^`boolean` @kind boolean;
  #L3282f8.  if v0 != 0 then goto L3282fe;
  #L3282fc.  goto L328336;
  #L3282fe.  v0:= new `java.lang.IllegalArgumentException`;
  #L328302.  v1:= new `java.lang.StringBuilder`;
  #L328306.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32830c.  v2:= "Missing transformation for " @kind object;
  #L328310.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L328316.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32831c.  v5:= ". If you wish to ignore unknown resource types, use the optional transformation methods." @kind object;
  #L328320.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L328326.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32832c.  v5:= temp @kind object;
  #L32832e.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L328334.  throw v0;
  #L328336.  call temp:= `c`() @signature `Lcom/bumptech/glide/load/n/b;.c:()Lcom/bumptech/glide/load/n/b;` @kind static;
  #L32833c.  v5:= temp @kind object;
  #L32833e.  return v5 @kind object;
  #L328340.  return v0 @kind object;
}
procedure `int` `s`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.s:()I` @AccessFlag  {
    temp;
    v0;

  #L3283f4.  v0:= v1.`com.bumptech.glide.load.engine.l.e` @type ^`int`;
  #L3283f8.  return v0;
}
procedure `boolean` `t`(`com.bumptech.glide.load.engine.l` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/l;.t:(Ljava/lang/Class;)Z` @AccessFlag  {
    temp;

  #L328130.  call temp:= `h`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/l;.h:(Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/r0;` @kind virtual;
  #L328136.  v1:= temp @kind object;
  #L328138.  if v1 == 0 then goto L328140;
  #L32813c.  v1:= 1I;
  #L32813e.  goto L328142;
  #L328140.  v1:= 0I;
  #L328142.  return v1;
}
procedure `void` `u`(`com.bumptech.glide.load.engine.l` v0 @kind this, `com.bumptech.glide.g` v1 @kind object, `java.lang.Object` v2 @kind object, `com.bumptech.glide.load.c` v3 @kind object, `int` v4 , `int` v5 , `com.bumptech.glide.load.engine.y` v6 @kind object, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object, `com.bumptech.glide.Priority` v9 @kind object, `com.bumptech.glide.load.h` v10 @kind object, `java.util.Map` v11 @kind object, `boolean` v12 , `boolean` v13 , `com.bumptech.glide.load.engine.p` v14 @kind object) @signature `Lcom/bumptech/glide/load/engine/l;.u:(Lcom/bumptech/glide/g;Ljava/lang/Object;Lcom/bumptech/glide/load/c;IILcom/bumptech/glide/load/engine/y;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/Priority;Lcom/bumptech/glide/load/h;Ljava/util/Map;ZZLcom/bumptech/glide/load/engine/p;)V` @AccessFlag  {
    temp;

  #L328684.  v0.`com.bumptech.glide.load.engine.l.c` @type ^`com.bumptech.glide.g` := v1 @kind object;
  #L328688.  v0.`com.bumptech.glide.load.engine.l.d` @type ^`java.lang.Object` := v2 @kind object;
  #L32868c.  v0.`com.bumptech.glide.load.engine.l.n` @type ^`com.bumptech.glide.load.c` := v3 @kind object;
  #L328690.  v0.`com.bumptech.glide.load.engine.l.e` @type ^`int` := v4;
  #L328694.  v0.`com.bumptech.glide.load.engine.l.f` @type ^`int` := v5;
  #L328698.  v0.`com.bumptech.glide.load.engine.l.p` @type ^`com.bumptech.glide.load.engine.y` := v6 @kind object;
  #L32869c.  v0.`com.bumptech.glide.load.engine.l.g` @type ^`java.lang.Class` := v7 @kind object;
  #L3286a0.  v0.`com.bumptech.glide.load.engine.l.h` @type ^`com.bumptech.glide.load.engine.p` := v14 @kind object;
  #L3286a4.  v0.`com.bumptech.glide.load.engine.l.k` @type ^`java.lang.Class` := v8 @kind object;
  #L3286a8.  v0.`com.bumptech.glide.load.engine.l.o` @type ^`com.bumptech.glide.Priority` := v9 @kind object;
  #L3286ac.  v0.`com.bumptech.glide.load.engine.l.i` @type ^`com.bumptech.glide.load.h` := v10 @kind object;
  #L3286b0.  v0.`com.bumptech.glide.load.engine.l.j` @type ^`java.util.Map` := v11 @kind object;
  #L3286b4.  v0.`com.bumptech.glide.load.engine.l.q` @type ^`boolean` := v12 @kind boolean;
  #L3286b8.  v0.`com.bumptech.glide.load.engine.l.r` @type ^`boolean` := v13 @kind boolean;
  #L3286bc.  return @kind void;
}
procedure `boolean` `v`(`com.bumptech.glide.load.engine.l` v1 @kind this, `com.bumptech.glide.load.engine.u0` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/l;.v:(Lcom/bumptech/glide/load/engine/u0;)Z` @AccessFlag  {
    temp;
    v0;

  #L328154.  v0:= v1.`com.bumptech.glide.load.engine.l.c` @type ^`com.bumptech.glide.g` @kind object;
  #L328158.  call temp:= `h`(v0) @signature `Lcom/bumptech/glide/g;.h:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L32815e.  v0:= temp @kind object;
  #L328160.  call temp:= `n`(v0, v2) @signature `Lcom/bumptech/glide/Registry;.n:(Lcom/bumptech/glide/load/engine/u0;)Z` @kind virtual;
  #L328166.  v2:= temp;
  #L328168.  return v2;
}
procedure `boolean` `w`(`com.bumptech.glide.load.engine.l` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l;.w:()Z` @AccessFlag  {
    temp;
    v0;

  #L32817c.  v0:= v1.`com.bumptech.glide.load.engine.l.r` @type ^`boolean` @kind boolean;
  #L328180.  return v0;
}
procedure `boolean` `x`(`com.bumptech.glide.load.engine.l` v5 @kind this, `com.bumptech.glide.load.c` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/l;.x:(Lcom/bumptech/glide/load/c;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L328194.  call temp:= `g`(v5) @signature `Lcom/bumptech/glide/load/engine/l;.g:()Ljava/util/List;` @kind virtual;
  #L32819a.  v0:= temp @kind object;
  #L32819c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3281a2.  v1:= temp;
  #L3281a4.  v2:= 0I;
  #L3281a6.  v3:= 0I;
  #L3281a8.  if v3 >= v1 then goto L3281d2;
  #L3281ac.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3281b2.  v4:= temp @kind object;
  #L3281b4.  v4:= (`com.bumptech.glide.load.m.p0`) v4 @kind object;
  #L3281b8.  v4:= v4.`com.bumptech.glide.load.m.p0.a` @type ^`com.bumptech.glide.load.c` @kind object;
  #L3281bc.  call temp:= `equals`(v4, v6) @signature `Lcom/bumptech/glide/load/c;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3281c2.  v4:= temp;
  #L3281c4.  if v4 == 0 then goto L3281cc;
  #L3281c8.  v6:= 1I;
  #L3281ca.  return v6;
  #L3281cc.  v3:= v3 + 1;
  #L3281d0.  goto L3281a8;
  #L3281d2.  return v2;
}
