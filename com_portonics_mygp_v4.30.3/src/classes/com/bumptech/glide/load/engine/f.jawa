record `com.bumptech.glide.load.engine.f` @kind class @AccessFlag FINAL {
  `boolean` `com.bumptech.glide.load.engine.f.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `com.bumptech.glide.load.engine.f.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.f.c` @AccessFlag FINAL;
  `java.lang.ref.ReferenceQueue` `com.bumptech.glide.load.engine.f.d` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.n0` `com.bumptech.glide.load.engine.f.e` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.f.f` @AccessFlag PRIVATE_VOLATILE;
  `com.bumptech.glide.load.engine.d` `com.bumptech.glide.load.engine.f.g` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.f` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/f;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L327ad0.  v0:= new `com.bumptech.glide.load.engine.b`;
  #L327ad4.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/b;.<init>:()V` @kind direct;
  #L327ada.  call temp:= `newSingleThreadExecutor`(v0) @signature `Ljava/util/concurrent/Executors;.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;` @kind static;
  #L327ae0.  v0:= temp @kind object;
  #L327ae2.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/engine/f;.<init>:(ZLjava/util/concurrent/Executor;)V` @kind direct;
  #L327ae8.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.f` v1 @kind this, `boolean` v2 , `java.util.concurrent.Executor` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.<init>:(ZLjava/util/concurrent/Executor;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L327afc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L327b02.  v0:= new `java.util.HashMap`;
  #L327b06.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L327b0c.  v1.`com.bumptech.glide.load.engine.f.c` @type ^`java.util.Map` := v0 @kind object;
  #L327b10.  v0:= new `java.lang.ref.ReferenceQueue`;
  #L327b14.  call `<init>`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.<init>:()V` @kind direct;
  #L327b1a.  v1.`com.bumptech.glide.load.engine.f.d` @type ^`java.lang.ref.ReferenceQueue` := v0 @kind object;
  #L327b1e.  v1.`com.bumptech.glide.load.engine.f.a` @type ^`boolean` := v2 @kind boolean;
  #L327b22.  v1.`com.bumptech.glide.load.engine.f.b` @type ^`java.util.concurrent.Executor` := v3 @kind object;
  #L327b26.  v2:= new `com.bumptech.glide.load.engine.c`;
  #L327b2a.  call `<init>`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/c;.<init>:(Lcom/bumptech/glide/load/engine/f;)V` @kind direct;
  #L327b30.  call `execute`(v3, v2) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L327b36.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.f` v3 @kind this, `com.bumptech.glide.load.c` v4 @kind object, `com.bumptech.glide.load.engine.o0` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.a:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/engine/o0;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L327b48.  @monitorenter v3
  #L327b4a.  v0:= new `com.bumptech.glide.load.engine.e`;
  #L327b4e.  v1:= v3.`com.bumptech.glide.load.engine.f.d` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L327b52.  v2:= v3.`com.bumptech.glide.load.engine.f.a` @type ^`boolean` @kind boolean;
  #L327b56.  call `<init>`(v0, v4, v5, v1, v2) @signature `Lcom/bumptech/glide/load/engine/e;.<init>:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/engine/o0;Ljava/lang/ref/ReferenceQueue;Z)V` @kind direct;
  #L327b5c.  v5:= v3.`com.bumptech.glide.load.engine.f.c` @type ^`java.util.Map` @kind object;
  #L327b60.  call temp:= `put`(v5, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L327b66.  v4:= temp @kind object;
  #L327b68.  v4:= (`com.bumptech.glide.load.engine.e`) v4 @kind object;
  #L327b6c.  if v4 == 0 then goto L327b76;
  #L327b70.  call `a`(v4) @signature `Lcom/bumptech/glide/load/engine/e;.a:()V` @kind virtual;
  #L327b76.  @monitorexit v3
  #L327b78.  return @kind void;
  #L327b7a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L327b7c.  @monitorexit v3
  #L327b7e.  throw v4;
  catch `java.lang.Throwable` @[L327b4a..L327b76] goto L327b7a;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L327b9c.  v0:= v1.`com.bumptech.glide.load.engine.f.f` @type ^`boolean` @kind boolean;
  #L327ba0.  if v0 != 0 then goto L327bda;
  #L327ba4.  v0:= v1.`com.bumptech.glide.load.engine.f.d` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L327ba8.  call temp:= `remove`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.remove:()Ljava/lang/ref/Reference;` @kind virtual;
  #L327bae.  v0:= temp @kind object;
  #L327bb0.  v0:= (`com.bumptech.glide.load.engine.e`) v0 @kind object;
  #L327bb4.  call `c`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/f;.c:(Lcom/bumptech/glide/load/engine/e;)V` @kind virtual;
  #L327bba.  v0:= v1.`com.bumptech.glide.load.engine.f.g` @type ^`com.bumptech.glide.load.engine.d` @kind object;
  #L327bbe.  if v0 == 0 then goto L327b9c;
  #L327bc2.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/d;.a:()V` @kind interface;
  #L327bc8.  goto L327b9c;
  #L327bca.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L327bd0.  v0:= temp @kind object;
  #L327bd2.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L327bd8.  goto L327b9c;
  #L327bda.  return @kind void;
  catch `java.lang.InterruptedException` @[L327ba4..L327bc8] goto L327bca;
}
procedure `void` `c`(`com.bumptech.glide.load.engine.f` v5 @kind this, `com.bumptech.glide.load.engine.e` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.c:(Lcom/bumptech/glide/load/engine/e;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L327bfc.  v0:= v5.`com.bumptech.glide.load.engine.f.e` @type ^`com.bumptech.glide.load.engine.n0` @kind object;
  #L327c00.  @monitorenter v0
  #L327c02.  @monitorenter v5
  #L327c04.  v1:= v5.`com.bumptech.glide.load.engine.f.c` @type ^`java.util.Map` @kind object;
  #L327c08.  v2:= v6.`com.bumptech.glide.load.engine.e.a` @type ^`com.bumptech.glide.load.c` @kind object;
  #L327c0c.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L327c12.  v1:= v6.`com.bumptech.glide.load.engine.e.b` @type ^`boolean` @kind boolean;
  #L327c16.  if v1 == 0 then goto L327c54;
  #L327c1a.  v1:= v6.`com.bumptech.glide.load.engine.e.c` @type ^`com.bumptech.glide.load.engine.u0` @kind object;
  #L327c1e.  if v1 != 0 then goto L327c24;
  #L327c22.  goto L327c54;
  #L327c24.  v2:= new `com.bumptech.glide.load.engine.o0`;
  #L327c28.  v3:= 1I;
  #L327c2a.  v4:= 0I;
  #L327c2c.  call `<init>`(v2, v1, v3, v4) @signature `Lcom/bumptech/glide/load/engine/o0;.<init>:(Lcom/bumptech/glide/load/engine/u0;ZZ)V` @kind direct;
  #L327c32.  v1:= v6.`com.bumptech.glide.load.engine.e.a` @type ^`com.bumptech.glide.load.c` @kind object;
  #L327c36.  v3:= v5.`com.bumptech.glide.load.engine.f.e` @type ^`com.bumptech.glide.load.engine.n0` @kind object;
  #L327c3a.  call `h`(v2, v1, v3) @signature `Lcom/bumptech/glide/load/engine/o0;.h:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/engine/n0;)V` @kind virtual;
  #L327c40.  v1:= v5.`com.bumptech.glide.load.engine.f.e` @type ^`com.bumptech.glide.load.engine.n0` @kind object;
  #L327c44.  v6:= v6.`com.bumptech.glide.load.engine.e.a` @type ^`com.bumptech.glide.load.c` @kind object;
  #L327c48.  call `d`(v1, v6, v2) @signature `Lcom/bumptech/glide/load/engine/n0;.d:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/engine/o0;)V` @kind interface;
  #L327c4e.  @monitorexit v5
  #L327c50.  @monitorexit v0
  #L327c52.  return @kind void;
  #L327c54.  @monitorexit v5
  #L327c56.  @monitorexit v0
  #L327c58.  return @kind void;
  #L327c5a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L327c5c.  @monitorexit v5
  #L327c5e.  throw v6;
  #L327c60.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L327c62.  @monitorexit v0
  #L327c64.  throw v6;
  catch `java.lang.Throwable` @[L327c02..L327c04] goto L327c60;
  catch `java.lang.Throwable` @[L327c04..L327c50] goto L327c5a;
  catch `java.lang.Throwable` @[L327c50..L327c52] goto L327c60;
  catch `java.lang.Throwable` @[L327c54..L327c56] goto L327c5a;
  catch `java.lang.Throwable` @[L327c56..L327c58] goto L327c60;
  catch `java.lang.Throwable` @[L327c5c..L327c5e] goto L327c5a;
  catch `java.lang.Throwable` @[L327c5e..L327c64] goto L327c60;
}
procedure `void` `d`(`com.bumptech.glide.load.engine.f` v1 @kind this, `com.bumptech.glide.load.c` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.d:(Lcom/bumptech/glide/load/c;)V` @AccessFlag  {
    temp;
    v0;

  #L327cb8.  @monitorenter v1
  #L327cba.  v0:= v1.`com.bumptech.glide.load.engine.f.c` @type ^`java.util.Map` @kind object;
  #L327cbe.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L327cc4.  v2:= temp @kind object;
  #L327cc6.  v2:= (`com.bumptech.glide.load.engine.e`) v2 @kind object;
  #L327cca.  if v2 == 0 then goto L327cd4;
  #L327cce.  call `a`(v2) @signature `Lcom/bumptech/glide/load/engine/e;.a:()V` @kind virtual;
  #L327cd4.  @monitorexit v1
  #L327cd6.  return @kind void;
  #L327cd8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L327cda.  @monitorexit v1
  #L327cdc.  throw v2;
  catch `java.lang.Throwable` @[L327cba..L327cd4] goto L327cd8;
}
procedure `com.bumptech.glide.load.engine.o0` `e`(`com.bumptech.glide.load.engine.f` v1 @kind this, `com.bumptech.glide.load.c` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.e:(Lcom/bumptech/glide/load/c;)Lcom/bumptech/glide/load/engine/o0;` @AccessFlag  {
    temp;
    v0;

  #L327a70.  @monitorenter v1
  #L327a72.  v0:= v1.`com.bumptech.glide.load.engine.f.c` @type ^`java.util.Map` @kind object;
  #L327a76.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L327a7c.  v2:= temp @kind object;
  #L327a7e.  v2:= (`com.bumptech.glide.load.engine.e`) v2 @kind object;
  #L327a82.  if v2 != 0 then goto L327a8c;
  #L327a86.  v2:= 0I;
  #L327a88.  @monitorexit v1
  #L327a8a.  return v2 @kind object;
  #L327a8c.  call temp:= `get`(v2) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L327a92.  v0:= temp @kind object;
  #L327a94.  v0:= (`com.bumptech.glide.load.engine.o0`) v0 @kind object;
  #L327a98.  if v0 != 0 then goto L327aa2;
  #L327a9c.  call `c`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/f;.c:(Lcom/bumptech/glide/load/engine/e;)V` @kind virtual;
  #L327aa2.  @monitorexit v1
  #L327aa4.  return v0 @kind object;
  #L327aa6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L327aa8.  @monitorexit v1
  #L327aaa.  throw v2;
  catch `java.lang.Throwable` @[L327a72..L327a82] goto L327aa6;
  catch `java.lang.Throwable` @[L327a8c..L327aa2] goto L327aa6;
}
procedure `void` `f`(`com.bumptech.glide.load.engine.f` v1 @kind this, `com.bumptech.glide.load.engine.n0` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.f:(Lcom/bumptech/glide/load/engine/n0;)V` @AccessFlag  {
    temp;
    v0;

  #L327cfc.  @monitorenter v2
  #L327cfe.  @monitorenter v1
  #L327d00.  v1.`com.bumptech.glide.load.engine.f.e` @type ^`com.bumptech.glide.load.engine.n0` := v2 @kind object;
  #L327d04.  @monitorexit v1
  #L327d06.  @monitorexit v2
  #L327d08.  return @kind void;
  #L327d0a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L327d0c.  @monitorexit v1
  #L327d0e.  throw v0;
  #L327d10.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L327d12.  @monitorexit v2
  #L327d14.  throw v0;
  catch `java.lang.Throwable` @[L327cfe..L327d00] goto L327d10;
  catch `java.lang.Throwable` @[L327d00..L327d06] goto L327d0a;
  catch `java.lang.Throwable` @[L327d06..L327d08] goto L327d10;
  catch `java.lang.Throwable` @[L327d0c..L327d0e] goto L327d0a;
  catch `java.lang.Throwable` @[L327d0e..L327d14] goto L327d10;
}
