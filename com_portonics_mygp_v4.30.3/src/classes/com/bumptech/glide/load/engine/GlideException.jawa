record `com.bumptech.glide.load.engine.GlideException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Exception` @kind class {
  `java.util.List` `com.bumptech.glide.load.engine.GlideException.causes` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.GlideException.dataClass` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.DataSource` `com.bumptech.glide.load.engine.GlideException.dataSource` @AccessFlag PRIVATE;
  `java.lang.String` `com.bumptech.glide.load.engine.GlideException.detailMessage` @AccessFlag PRIVATE;
  `java.lang.Exception` `com.bumptech.glide.load.engine.GlideException.exception` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.c` `com.bumptech.glide.load.engine.GlideException.key` @AccessFlag PRIVATE;
}
global `java.lang.StackTraceElement`[] `@@com.bumptech.glide.load.engine.GlideException.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@com.bumptech.glide.load.engine.GlideException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/engine/GlideException;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L32bc7c.  v0:= 0I;
  #L32bc7e.  v0:= new `java.lang.StackTraceElement`[v0];
  #L32bc82.  `@@com.bumptech.glide.load.engine.GlideException.b` @type ^`java.lang.StackTraceElement`[] := v0 @kind object;
  #L32bc86.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L32bc98.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L32bc9e.  v0:= temp @kind object;
  #L32bca0.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L32bca6.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L32bcb8.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L32bcbe.  v2:= temp @kind object;
  #L32bcc0.  call `<init>`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L32bcc6.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.lang.String` v1 @kind object, `java.util.List` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L32bcd8.  call `<init>`(v0) @signature `Ljava/lang/Exception;.<init>:()V` @kind direct;
  #L32bcde.  v0.`com.bumptech.glide.load.engine.GlideException.detailMessage` @type ^`java.lang.String` := v1 @kind object;
  #L32bce2.  v1:= `@@com.bumptech.glide.load.engine.GlideException.b` @type ^`java.lang.StackTraceElement`[] @kind object;
  #L32bce6.  call `setStackTrace`(v0, v1) @signature `Ljava/lang/Exception;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L32bcec.  v0.`com.bumptech.glide.load.engine.GlideException.causes` @type ^`java.util.List` := v2 @kind object;
  #L32bcf0.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this, `java.lang.Throwable` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L32bd04.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.engine.GlideException` @kind boolean;
  #L32bd08.  if v0 == 0 then goto L32bd40;
  #L32bd0c.  v2:= (`com.bumptech.glide.load.engine.GlideException`) v2 @kind object;
  #L32bd10.  call temp:= `getCauses`(v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getCauses:()Ljava/util/List;` @kind virtual;
  #L32bd16.  v2:= temp @kind object;
  #L32bd18.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L32bd1e.  v2:= temp @kind object;
  #L32bd20.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L32bd26.  v0:= temp;
  #L32bd28.  if v0 == 0 then goto L32bd46;
  #L32bd2c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L32bd32.  v0:= temp @kind object;
  #L32bd34.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L32bd38.  call `a`(v1, v0, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/util/List;)V` @kind direct;
  #L32bd3e.  goto L32bd20;
  #L32bd40.  call temp:= `add`(v3, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32bd46.  return @kind void;
}
procedure `void` `b`(`java.util.List` v0 @kind object, `java.lang.Appendable` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.b:(Ljava/util/List;Ljava/lang/Appendable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L32bd58.  call `c`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.c:(Ljava/util/List;Ljava/lang/Appendable;)V` @kind static;
  #L32bd5e.  return @kind void;
  #L32bd60.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L32bd62.  v1:= new `java.lang.RuntimeException`;
  #L32bd66.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L32bd6c.  throw v1;
  catch `java.io.IOException` @[L32bd58..L32bd5e] goto L32bd60;
}
procedure `void` `c`(`java.util.List` v5 @kind object, `java.lang.Appendable` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.c:(Ljava/util/List;Ljava/lang/Appendable;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32bd90.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32bd96.  v0:= temp;
  #L32bd98.  v1:= 0I;
  #L32bd9a.  if v1 >= v0 then goto L32be0e;
  #L32bd9e.  v2:= "Cause (" @kind object;
  #L32bda2.  call temp:= `append`(v6, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L32bda8.  v2:= temp @kind object;
  #L32bdaa.  v3:= v1 + 1;
  #L32bdae.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L32bdb4.  v4:= temp @kind object;
  #L32bdb6.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L32bdbc.  v2:= temp @kind object;
  #L32bdbe.  v4:= " of " @kind object;
  #L32bdc2.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L32bdc8.  v2:= temp @kind object;
  #L32bdca.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L32bdd0.  v4:= temp @kind object;
  #L32bdd2.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L32bdd8.  v2:= temp @kind object;
  #L32bdda.  v4:= "): " @kind object;
  #L32bdde.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L32bde4.  call temp:= `get`(v5, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L32bdea.  v1:= temp @kind object;
  #L32bdec.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L32bdf0.  v2:= instanceof @variable v1 @type ^`com.bumptech.glide.load.engine.GlideException` @kind boolean;
  #L32bdf4.  if v2 == 0 then goto L32be04;
  #L32bdf8.  v1:= (`com.bumptech.glide.load.engine.GlideException`) v1 @kind object;
  #L32bdfc.  call `e`(v1, v6) @signature `Lcom/bumptech/glide/load/engine/GlideException;.e:(Ljava/lang/Appendable;)V` @kind direct;
  #L32be02.  goto L32be0a;
  #L32be04.  call `d`(v1, v6) @signature `Lcom/bumptech/glide/load/engine/GlideException;.d:(Ljava/lang/Throwable;Ljava/lang/Appendable;)V` @kind static;
  #L32be0a.  v1:= v3;
  #L32be0c.  goto L32bd9a;
  #L32be0e.  return @kind void;
}
procedure `void` `d`(`java.lang.Throwable` v1 @kind object, `java.lang.Appendable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.d:(Ljava/lang/Throwable;Ljava/lang/Appendable;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L32be20.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L32be26.  v0:= temp @kind object;
  #L32be28.  call temp:= `toString`(v0) @signature `Ljava/lang/Class;.toString:()Ljava/lang/String;` @kind virtual;
  #L32be2e.  v0:= temp @kind object;
  #L32be30.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L32be36.  v2:= temp @kind object;
  #L32be38.  v0:= ": " @kind object;
  #L32be3c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L32be42.  v2:= temp @kind object;
  #L32be44.  call temp:= `getMessage`(v1) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L32be4a.  v0:= temp @kind object;
  #L32be4c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L32be52.  v2:= temp @kind object;
  #L32be54.  v0:= 10I;
  #L32be58.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L32be5e.  return @kind void;
  #L32be60.  v2:= new `java.lang.RuntimeException`;
  #L32be64.  call `<init>`(v2, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L32be6a.  throw v2;
  catch `java.io.IOException` @[L32be20..L32be5e] goto L32be60;
}
procedure `void` `e`(`com.bumptech.glide.load.engine.GlideException` v2 @kind this, `java.lang.Appendable` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.e:(Ljava/lang/Appendable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L32bf50.  call `d`(v2, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException;.d:(Ljava/lang/Throwable;Ljava/lang/Appendable;)V` @kind static;
  #L32bf56.  call temp:= `getCauses`(v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getCauses:()Ljava/util/List;` @kind virtual;
  #L32bf5c.  v0:= temp @kind object;
  #L32bf5e.  v1:= new `com.bumptech.glide.load.engine.GlideException$a`;
  #L32bf62.  call `<init>`(v1, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.<init>:(Ljava/lang/Appendable;)V` @kind direct;
  #L32bf68.  call `b`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.b:(Ljava/util/List;Ljava/lang/Appendable;)V` @kind static;
  #L32bf6e.  return @kind void;
}
procedure `java.lang.Throwable` `fillInStackTrace`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;

  #L32bc2c.  return v0 @kind object;
}
procedure `java.util.List` `getCauses`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getCauses:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bc40.  v0:= v1.`com.bumptech.glide.load.engine.GlideException.causes` @type ^`java.util.List` @kind object;
  #L32bc44.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`com.bumptech.glide.load.engine.GlideException` v5 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32ba90.  v0:= new `java.lang.StringBuilder`;
  #L32ba94.  v1:= 71I;
  #L32ba98.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L32ba9e.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.detailMessage` @type ^`java.lang.String` @kind object;
  #L32baa2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32baa8.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.dataClass` @type ^`java.lang.Class` @kind object;
  #L32baac.  v2:= ", " @kind object;
  #L32bab0.  v3:= "" @kind object;
  #L32bab4.  if v1 == 0 then goto L32badc;
  #L32bab8.  v1:= new `java.lang.StringBuilder`;
  #L32babc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32bac2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bac8.  v4:= v5.`com.bumptech.glide.load.engine.GlideException.dataClass` @type ^`java.lang.Class` @kind object;
  #L32bacc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bad2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32bad8.  v1:= temp @kind object;
  #L32bada.  goto L32bade;
  #L32badc.  v1:= v3 @kind object;
  #L32bade.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bae4.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.dataSource` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L32bae8.  if v1 == 0 then goto L32bb10;
  #L32baec.  v1:= new `java.lang.StringBuilder`;
  #L32baf0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32baf6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bafc.  v4:= v5.`com.bumptech.glide.load.engine.GlideException.dataSource` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L32bb00.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bb06.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32bb0c.  v1:= temp @kind object;
  #L32bb0e.  goto L32bb12;
  #L32bb10.  v1:= v3 @kind object;
  #L32bb12.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bb18.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.key` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32bb1c.  if v1 == 0 then goto L32bb42;
  #L32bb20.  v1:= new `java.lang.StringBuilder`;
  #L32bb24.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32bb2a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bb30.  v2:= v5.`com.bumptech.glide.load.engine.GlideException.key` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32bb34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bb3a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32bb40.  v3:= temp @kind object;
  #L32bb42.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bb48.  call temp:= `getRootCauses`(v5) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getRootCauses:()Ljava/util/List;` @kind virtual;
  #L32bb4e.  v1:= temp @kind object;
  #L32bb50.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L32bb56.  v2:= temp;
  #L32bb58.  if v2 == 0 then goto L32bb66;
  #L32bb5c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32bb62.  v0:= temp @kind object;
  #L32bb64.  return v0 @kind object;
  #L32bb66.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32bb6c.  v2:= temp;
  #L32bb6e.  v3:= 1I;
  #L32bb70.  if v2 != v3 then goto L32bb80;
  #L32bb74.  v2:= "\nThere was 1 cause:" @kind object;
  #L32bb78.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bb7e.  goto L32bba2;
  #L32bb80.  v2:= "\nThere were " @kind object;
  #L32bb84.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bb8a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32bb90.  v2:= temp;
  #L32bb92.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bb98.  v2:= " causes:" @kind object;
  #L32bb9c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bba2.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L32bba8.  v1:= temp @kind object;
  #L32bbaa.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L32bbb0.  v2:= temp;
  #L32bbb2.  if v2 == 0 then goto L32bc06;
  #L32bbb6.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L32bbbc.  v2:= temp @kind object;
  #L32bbbe.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L32bbc2.  v3:= 10I;
  #L32bbc6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bbcc.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L32bbd2.  v3:= temp @kind object;
  #L32bbd4.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L32bbda.  v3:= temp @kind object;
  #L32bbdc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bbe2.  v3:= 40I;
  #L32bbe6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bbec.  call temp:= `getMessage`(v2) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L32bbf2.  v2:= temp @kind object;
  #L32bbf4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bbfa.  v2:= 41I;
  #L32bbfe.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bc04.  goto L32bbaa;
  #L32bc06.  v1:= "\n call GlideException#logRootCauses(String) for more detail" @kind object;
  #L32bc0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bc10.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32bc16.  v0:= temp @kind object;
  #L32bc18.  return v0 @kind object;
}
procedure `java.lang.Exception` `getOrigin`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getOrigin:()Ljava/lang/Exception;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ba78.  v0:= v1.`com.bumptech.glide.load.engine.GlideException.exception` @type ^`java.lang.Exception` @kind object;
  #L32ba7c.  return v0 @kind object;
}
procedure `java.util.List` `getRootCauses`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getRootCauses:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bc58.  v0:= new `java.util.ArrayList`;
  #L32bc5c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L32bc62.  call `a`(v1, v1, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/util/List;)V` @kind direct;
  #L32bc68.  return v0 @kind object;
}
procedure `void` `logRootCauses`(`com.bumptech.glide.load.engine.GlideException` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.logRootCauses:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32be8c.  call temp:= `getRootCauses`(v5) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getRootCauses:()Ljava/util/List;` @kind virtual;
  #L32be92.  v6:= temp @kind object;
  #L32be94.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32be9a.  v0:= temp;
  #L32be9c.  v1:= 0I;
  #L32be9e.  if v1 >= v0 then goto L32bef0;
  #L32bea2.  v2:= new `java.lang.StringBuilder`;
  #L32bea6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32beac.  v3:= "Root cause (" @kind object;
  #L32beb0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32beb6.  v3:= v1 + 1;
  #L32beba.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bec0.  v4:= " of " @kind object;
  #L32bec4.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32beca.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32bed0.  v4:= ")" @kind object;
  #L32bed4.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32beda.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32bee0.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L32bee6.  v1:= temp @kind object;
  #L32bee8.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L32beec.  v1:= v3;
  #L32beee.  goto L32be9e;
  #L32bef0.  return @kind void;
}
procedure `void` `printStackTrace`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bf04.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L32bf08.  call `printStackTrace`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L32bf0e.  return @kind void;
}
procedure `void` `printStackTrace`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.io.PrintStream` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;

  #L32bf20.  call `e`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.e:(Ljava/lang/Appendable;)V` @kind direct;
  #L32bf26.  return @kind void;
}
procedure `void` `printStackTrace`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.io.PrintWriter` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;

  #L32bf38.  call `e`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.e:(Ljava/lang/Appendable;)V` @kind direct;
  #L32bf3e.  return @kind void;
}
procedure `void` `setLoggingDetails`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this, `com.bumptech.glide.load.c` v2 @kind object, `com.bumptech.glide.load.DataSource` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.setLoggingDetails:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/DataSource;)V` @AccessFlag  {
    temp;
    v0;

  #L32bf80.  v0:= 0I;
  #L32bf82.  call `setLoggingDetails`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.setLoggingDetails:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/DataSource;Ljava/lang/Class;)V` @kind virtual;
  #L32bf88.  return @kind void;
}
procedure `void` `setLoggingDetails`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `com.bumptech.glide.load.c` v1 @kind object, `com.bumptech.glide.load.DataSource` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.setLoggingDetails:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/DataSource;Ljava/lang/Class;)V` @AccessFlag  {
    temp;

  #L32bf9c.  v0.`com.bumptech.glide.load.engine.GlideException.key` @type ^`com.bumptech.glide.load.c` := v1 @kind object;
  #L32bfa0.  v0.`com.bumptech.glide.load.engine.GlideException.dataSource` @type ^`com.bumptech.glide.load.DataSource` := v2 @kind object;
  #L32bfa4.  v0.`com.bumptech.glide.load.engine.GlideException.dataClass` @type ^`java.lang.Class` := v3 @kind object;
  #L32bfa8.  return @kind void;
}
procedure `void` `setOrigin`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.lang.Exception` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.setOrigin:(Ljava/lang/Exception;)V` @AccessFlag PUBLIC {
    temp;

  #L32bfbc.  v0.`com.bumptech.glide.load.engine.GlideException.exception` @type ^`java.lang.Exception` := v1 @kind object;
  #L32bfc0.  return @kind void;
}
