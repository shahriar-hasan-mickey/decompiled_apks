record `com.bumptech.glide.load.engine.j0` @kind class @AccessFlag FINAL extends `java.lang.Iterable` @kind interface {
  `java.util.List` `com.bumptech.glide.load.engine.j0.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.j0` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/j0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L32a57c.  v0:= new `java.util.ArrayList`;
  #L32a580.  v1:= 2I;
  #L32a582.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L32a588.  call `<init>`(v2, v0) @signature `Lcom/bumptech/glide/load/engine/j0;.<init>:(Ljava/util/List;)V` @kind direct;
  #L32a58e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.j0` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/j0;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L32a5a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32a5a6.  v0.`com.bumptech.glide.load.engine.j0.b` @type ^`java.util.List` := v1 @kind object;
  #L32a5aa.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.i0` `f`(`com.bumptech.glide.request.j` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/j0;.f:(Lcom/bumptech/glide/request/j;)Lcom/bumptech/glide/load/engine/i0;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L32a4ec.  v0:= new `com.bumptech.glide.load.engine.i0`;
  #L32a4f0.  call temp:= `a`() @signature `Lcom/bumptech/glide/s/i;.a:()Ljava/util/concurrent/Executor;` @kind static;
  #L32a4f6.  v1:= temp @kind object;
  #L32a4f8.  call `<init>`(v0, v2, v1) @signature `Lcom/bumptech/glide/load/engine/i0;.<init>:(Lcom/bumptech/glide/request/j;Ljava/util/concurrent/Executor;)V` @kind direct;
  #L32a4fe.  return v0 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.j0` v2 @kind this, `com.bumptech.glide.request.j` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/j0;.a:(Lcom/bumptech/glide/request/j;Ljava/util/concurrent/Executor;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L32a5bc.  v0:= v2.`com.bumptech.glide.load.engine.j0.b` @type ^`java.util.List` @kind object;
  #L32a5c0.  v1:= new `com.bumptech.glide.load.engine.i0`;
  #L32a5c4.  call `<init>`(v1, v3, v4) @signature `Lcom/bumptech/glide/load/engine/i0;.<init>:(Lcom/bumptech/glide/request/j;Ljava/util/concurrent/Executor;)V` @kind direct;
  #L32a5ca.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32a5d0.  return @kind void;
}
procedure `boolean` `c`(`com.bumptech.glide.load.engine.j0` v1 @kind this, `com.bumptech.glide.request.j` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/j0;.c:(Lcom/bumptech/glide/request/j;)Z` @AccessFlag  {
    temp;
    v0;

  #L32a4a4.  v0:= v1.`com.bumptech.glide.load.engine.j0.b` @type ^`java.util.List` @kind object;
  #L32a4a8.  call temp:= `f`(v2) @signature `Lcom/bumptech/glide/load/engine/j0;.f:(Lcom/bumptech/glide/request/j;)Lcom/bumptech/glide/load/engine/i0;` @kind static;
  #L32a4ae.  v2:= temp @kind object;
  #L32a4b0.  call temp:= `contains`(v0, v2) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L32a4b6.  v2:= temp;
  #L32a4b8.  return v2;
}
procedure `void` `clear`(`com.bumptech.glide.load.engine.j0` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/j0;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L32a5e4.  v0:= v1.`com.bumptech.glide.load.engine.j0.b` @type ^`java.util.List` @kind object;
  #L32a5e8.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L32a5ee.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.j0` `e`(`com.bumptech.glide.load.engine.j0` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/j0;.e:()Lcom/bumptech/glide/load/engine/j0;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L32a510.  v0:= new `com.bumptech.glide.load.engine.j0`;
  #L32a514.  v1:= new `java.util.ArrayList`;
  #L32a518.  v2:= v3.`com.bumptech.glide.load.engine.j0.b` @type ^`java.util.List` @kind object;
  #L32a51c.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L32a522.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/j0;.<init>:(Ljava/util/List;)V` @kind direct;
  #L32a528.  return v0 @kind object;
}
procedure `void` `g`(`com.bumptech.glide.load.engine.j0` v1 @kind this, `com.bumptech.glide.request.j` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/j0;.g:(Lcom/bumptech/glide/request/j;)V` @AccessFlag  {
    temp;
    v0;

  #L32a600.  v0:= v1.`com.bumptech.glide.load.engine.j0.b` @type ^`java.util.List` @kind object;
  #L32a604.  call temp:= `f`(v2) @signature `Lcom/bumptech/glide/load/engine/j0;.f:(Lcom/bumptech/glide/request/j;)Lcom/bumptech/glide/load/engine/i0;` @kind static;
  #L32a60a.  v2:= temp @kind object;
  #L32a60c.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L32a612.  return @kind void;
}
procedure `boolean` `isEmpty`(`com.bumptech.glide.load.engine.j0` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/j0;.isEmpty:()Z` @AccessFlag  {
    temp;
    v0;

  #L32a4cc.  v0:= v1.`com.bumptech.glide.load.engine.j0.b` @type ^`java.util.List` @kind object;
  #L32a4d0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L32a4d6.  v0:= temp;
  #L32a4d8.  return v0;
}
procedure `java.util.Iterator` `iterator`(`com.bumptech.glide.load.engine.j0` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/j0;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32a55c.  v0:= v1.`com.bumptech.glide.load.engine.j0.b` @type ^`java.util.List` @kind object;
  #L32a560.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L32a566.  v0:= temp @kind object;
  #L32a568.  return v0 @kind object;
}
procedure `int` `size`(`com.bumptech.glide.load.engine.j0` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/j0;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L32a53c.  v0:= v1.`com.bumptech.glide.load.engine.j0.b` @type ^`java.util.List` @kind object;
  #L32a540.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32a546.  v0:= temp;
  #L32a548.  return v0;
}
