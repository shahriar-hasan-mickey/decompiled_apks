record `com.bumptech.glide.load.engine.a1.f` @kind class @AccessFlag FINAL {
  `java.util.Map` `com.bumptech.glide.load.engine.a1.f.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.a1.e` `com.bumptech.glide.load.engine.a1.f.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a1.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/a1/f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L32f270.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32f276.  v0:= new `java.util.HashMap`;
  #L32f27a.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L32f280.  v1.`com.bumptech.glide.load.engine.a1.f.a` @type ^`java.util.Map` := v0 @kind object;
  #L32f284.  v0:= new `com.bumptech.glide.load.engine.a1.e`;
  #L32f288.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/a1/e;.<init>:()V` @kind direct;
  #L32f28e.  v1.`com.bumptech.glide.load.engine.a1.f.b` @type ^`com.bumptech.glide.load.engine.a1.e` := v0 @kind object;
  #L32f292.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a1.f` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/f;.a:(Ljava/lang/String;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L32f2a4.  @monitorenter v2
  #L32f2a6.  v0:= v2.`com.bumptech.glide.load.engine.a1.f.a` @type ^`java.util.Map` @kind object;
  #L32f2aa.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L32f2b0.  v0:= temp @kind object;
  #L32f2b2.  v0:= (`com.bumptech.glide.load.engine.a1.d`) v0 @kind object;
  #L32f2b6.  if v0 != 0 then goto L32f2d0;
  #L32f2ba.  v0:= v2.`com.bumptech.glide.load.engine.a1.f.b` @type ^`com.bumptech.glide.load.engine.a1.e` @kind object;
  #L32f2be.  call temp:= `a`(v0) @signature `Lcom/bumptech/glide/load/engine/a1/e;.a:()Lcom/bumptech/glide/load/engine/a1/d;` @kind virtual;
  #L32f2c4.  v0:= temp @kind object;
  #L32f2c6.  v1:= v2.`com.bumptech.glide.load.engine.a1.f.a` @type ^`java.util.Map` @kind object;
  #L32f2ca.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L32f2d0.  v3:= v0.`com.bumptech.glide.load.engine.a1.d.b` @type ^`int`;
  #L32f2d4.  v3:= v3 + 1;
  #L32f2d8.  v0.`com.bumptech.glide.load.engine.a1.d.b` @type ^`int` := v3;
  #L32f2dc.  @monitorexit v2
  #L32f2de.  v3:= v0.`com.bumptech.glide.load.engine.a1.d.a` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L32f2e2.  call `lock`(v3) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L32f2e8.  return @kind void;
  #L32f2ea.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32f2ec.  @monitorexit v2
  #L32f2ee.  throw v3;
  catch `java.lang.Throwable` @[L32f2a6..L32f2de] goto L32f2ea;
  catch `java.lang.Throwable` @[L32f2ec..L32f2ee] goto L32f2ea;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.a1.f` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/f;.b:(Ljava/lang/String;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32f314.  @monitorenter v5
  #L32f316.  v0:= v5.`com.bumptech.glide.load.engine.a1.f.a` @type ^`java.util.Map` @kind object;
  #L32f31a.  call temp:= `get`(v0, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L32f320.  v0:= temp @kind object;
  #L32f322.  call temp:= `d`(v0) @signature `Lcom/bumptech/glide/s/n;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32f328.  v0:= temp @kind object;
  #L32f32a.  v0:= (`com.bumptech.glide.load.engine.a1.d`) v0 @kind object;
  #L32f32e.  v1:= v0.`com.bumptech.glide.load.engine.a1.d.b` @type ^`int`;
  #L32f332.  v2:= 1I;
  #L32f334.  if v1 < v2 then goto L32f3c6;
  #L32f338.  v1:= v1 - v2 @kind int;
  #L32f33a.  v0.`com.bumptech.glide.load.engine.a1.d.b` @type ^`int` := v1;
  #L32f33e.  if v1 != 0 then goto L32f3b8;
  #L32f342.  v1:= v5.`com.bumptech.glide.load.engine.a1.f.a` @type ^`java.util.Map` @kind object;
  #L32f346.  call temp:= `remove`(v1, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L32f34c.  v1:= temp @kind object;
  #L32f34e.  v1:= (`com.bumptech.glide.load.engine.a1.d`) v1 @kind object;
  #L32f352.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32f358.  v2:= temp;
  #L32f35a.  if v2 == 0 then goto L32f36a;
  #L32f35e.  v6:= v5.`com.bumptech.glide.load.engine.a1.f.b` @type ^`com.bumptech.glide.load.engine.a1.e` @kind object;
  #L32f362.  call `b`(v6, v1) @signature `Lcom/bumptech/glide/load/engine/a1/e;.b:(Lcom/bumptech/glide/load/engine/a1/d;)V` @kind virtual;
  #L32f368.  goto L32f3b8;
  #L32f36a.  v2:= new `java.lang.IllegalStateException`;
  #L32f36e.  v3:= new `java.lang.StringBuilder`;
  #L32f372.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32f378.  v4:= "Removed the wrong lock, expected to remove: " @kind object;
  #L32f37c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f382.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f388.  v0:= ", but actually removed: " @kind object;
  #L32f38c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f392.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f398.  v0:= ", safeKey: " @kind object;
  #L32f39c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f3a2.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f3a8.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32f3ae.  v6:= temp @kind object;
  #L32f3b0.  call `<init>`(v2, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32f3b6.  throw v2;
  #L32f3b8.  @monitorexit v5
  #L32f3ba.  v6:= v0.`com.bumptech.glide.load.engine.a1.d.a` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L32f3be.  call `unlock`(v6) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L32f3c4.  return @kind void;
  #L32f3c6.  v1:= new `java.lang.IllegalStateException`;
  #L32f3ca.  v2:= new `java.lang.StringBuilder`;
  #L32f3ce.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32f3d4.  v3:= "Cannot release a lock that is not held, safeKey: " @kind object;
  #L32f3d8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f3de.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f3e4.  v6:= ", interestedThreads: " @kind object;
  #L32f3e8.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f3ee.  v6:= v0.`com.bumptech.glide.load.engine.a1.d.b` @type ^`int`;
  #L32f3f2.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f3f8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32f3fe.  v6:= temp @kind object;
  #L32f400.  call `<init>`(v1, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32f406.  throw v1;
  #L32f408.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32f40a.  @monitorexit v5
  #L32f40c.  throw v6;
  catch `java.lang.Throwable` @[L32f316..L32f3ba] goto L32f408;
  catch `java.lang.Throwable` @[L32f3c6..L32f40c] goto L32f408;
}
