record `com.bumptech.glide.load.engine.a1.l` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.s.k` @kind class, `com.bumptech.glide.load.engine.a1.n` @kind interface {
  `com.bumptech.glide.load.engine.a1.m` `com.bumptech.glide.load.engine.a1.l.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a1.l` v0 @kind this, `long` v1 ) @signature `Lcom/bumptech/glide/load/engine/a1/l;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L32f890.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/s/k;.<init>:(J)V` @kind direct;
  #L32f896.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a1.l` v4 @kind this, `int` v5 ) @signature `Lcom/bumptech/glide/load/engine/a1/l;.a:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32f904.  v0:= 40I;
  #L32f908.  if v5 < v0 then goto L32f914;
  #L32f90c.  call `b`(v4) @signature `Lcom/bumptech/glide/s/k;.b:()V` @kind virtual;
  #L32f912.  goto L32f938;
  #L32f914.  v0:= 20I;
  #L32f918.  if v5 >= v0 then goto L32f924;
  #L32f91c.  v0:= 15I;
  #L32f920.  if v5 != v0 then goto L32f938;
  #L32f924.  call temp:= `h`(v4) @signature `Lcom/bumptech/glide/s/k;.h:()J` @kind virtual;
  #L32f92a.  v0:= temp @kind wide;
  #L32f92c.  v2:= 2L;
  #L32f930.  v0:= v0 / v2 @kind long;
  #L32f932.  call `m`(v4, v0) @signature `Lcom/bumptech/glide/s/k;.m:(J)V` @kind virtual;
  #L32f938.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.u0` `c`(`com.bumptech.glide.load.engine.a1.l` v0 @kind this, `com.bumptech.glide.load.c` v1 @kind object, `com.bumptech.glide.load.engine.u0` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/l;.c:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/engine/u0;)Lcom/bumptech/glide/load/engine/u0;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L32f804.  call temp:= `k`(v0, v1, v2) @signature `Lcom/bumptech/glide/s/k;.k:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L32f80a.  v1:= temp @kind object;
  #L32f80c.  v1:= (`com.bumptech.glide.load.engine.u0`) v1 @kind object;
  #L32f810.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.engine.u0` `d`(`com.bumptech.glide.load.engine.a1.l` v0 @kind this, `com.bumptech.glide.load.c` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/l;.d:(Lcom/bumptech/glide/load/c;)Lcom/bumptech/glide/load/engine/u0;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L32f824.  call temp:= `l`(v0, v1) @signature `Lcom/bumptech/glide/s/k;.l:(Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L32f82a.  v1:= temp @kind object;
  #L32f82c.  v1:= (`com.bumptech.glide.load.engine.u0`) v1 @kind object;
  #L32f830.  return v1 @kind object;
}
procedure `void` `e`(`com.bumptech.glide.load.engine.a1.l` v0 @kind this, `com.bumptech.glide.load.engine.a1.m` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/l;.e:(Lcom/bumptech/glide/load/engine/a1/m;)V` @AccessFlag PUBLIC {
    temp;

  #L32f8ec.  v0.`com.bumptech.glide.load.engine.a1.l.e` @type ^`com.bumptech.glide.load.engine.a1.m` := v1 @kind object;
  #L32f8f0.  return @kind void;
}
procedure `int` `i`(`com.bumptech.glide.load.engine.a1.l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/l;.i:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_SYNTHETIC {
    temp;

  #L32f870.  v1:= (`com.bumptech.glide.load.engine.u0`) v1 @kind object;
  #L32f874.  call temp:= `n`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/a1/l;.n:(Lcom/bumptech/glide/load/engine/u0;)I` @kind virtual;
  #L32f87a.  v1:= temp;
  #L32f87c.  return v1;
}
procedure `void` `j`(`com.bumptech.glide.load.engine.a1.l` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/l;.j:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED_SYNTHETIC {
    temp;

  #L32f8cc.  v1:= (`com.bumptech.glide.load.c`) v1 @kind object;
  #L32f8d0.  v2:= (`com.bumptech.glide.load.engine.u0`) v2 @kind object;
  #L32f8d4.  call `o`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/engine/a1/l;.o:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/engine/u0;)V` @kind virtual;
  #L32f8da.  return @kind void;
}
procedure `int` `n`(`com.bumptech.glide.load.engine.a1.l` v0 @kind this, `com.bumptech.glide.load.engine.u0` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/l;.n:(Lcom/bumptech/glide/load/engine/u0;)I` @AccessFlag PROTECTED {
    temp;

  #L32f844.  if v1 != 0 then goto L32f854;
  #L32f848.  v1:= 0I;
  #L32f84a.  call temp:= `i`(v0, v1) @signature `Lcom/bumptech/glide/s/k;.i:(Ljava/lang/Object;)I` @kind super;
  #L32f850.  v1:= temp;
  #L32f852.  return v1;
  #L32f854.  call temp:= `d`(v1) @signature `Lcom/bumptech/glide/load/engine/u0;.d:()I` @kind interface;
  #L32f85a.  v1:= temp;
  #L32f85c.  return v1;
}
procedure `void` `o`(`com.bumptech.glide.load.engine.a1.l` v0 @kind this, `com.bumptech.glide.load.c` v1 @kind object, `com.bumptech.glide.load.engine.u0` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/l;.o:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/engine/u0;)V` @AccessFlag PROTECTED {
    temp;

  #L32f8a8.  v1:= v0.`com.bumptech.glide.load.engine.a1.l.e` @type ^`com.bumptech.glide.load.engine.a1.m` @kind object;
  #L32f8ac.  if v1 == 0 then goto L32f8ba;
  #L32f8b0.  if v2 == 0 then goto L32f8ba;
  #L32f8b4.  call `a`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/a1/m;.a:(Lcom/bumptech/glide/load/engine/u0;)V` @kind interface;
  #L32f8ba.  return @kind void;
}
