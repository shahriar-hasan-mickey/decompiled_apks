record `com.bumptech.glide.load.engine.w0` @kind class @AccessFlag FINAL extends `com.bumptech.glide.load.c` @kind interface {
  `com.bumptech.glide.load.engine.bitmap_recycle.b` `com.bumptech.glide.load.engine.w0.c` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.c` `com.bumptech.glide.load.engine.w0.d` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.c` `com.bumptech.glide.load.engine.w0.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.w0.f` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.w0.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.w0.h` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.h` `com.bumptech.glide.load.engine.w0.i` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.k` `com.bumptech.glide.load.engine.w0.j` @AccessFlag PRIVATE_FINAL;
}
global `com.bumptech.glide.s.k` `@@com.bumptech.glide.load.engine.w0.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/engine/w0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L32ca60.  v0:= new `com.bumptech.glide.s.k`;
  #L32ca64.  v1:= 50L;
  #L32ca68.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/s/k;.<init>:(J)V` @kind direct;
  #L32ca6e.  `@@com.bumptech.glide.load.engine.w0.b` @type ^`com.bumptech.glide.s.k` := v0 @kind object;
  #L32ca72.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.w0` v0 @kind this, `com.bumptech.glide.load.engine.bitmap_recycle.b` v1 @kind object, `com.bumptech.glide.load.c` v2 @kind object, `com.bumptech.glide.load.c` v3 @kind object, `int` v4 , `int` v5 , `com.bumptech.glide.load.k` v6 @kind object, `java.lang.Class` v7 @kind object, `com.bumptech.glide.load.h` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/w0;.<init>:(Lcom/bumptech/glide/load/engine/bitmap_recycle/b;Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/c;IILcom/bumptech/glide/load/k;Ljava/lang/Class;Lcom/bumptech/glide/load/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L32ca84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32ca8a.  v0.`com.bumptech.glide.load.engine.w0.c` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.b` := v1 @kind object;
  #L32ca8e.  v0.`com.bumptech.glide.load.engine.w0.d` @type ^`com.bumptech.glide.load.c` := v2 @kind object;
  #L32ca92.  v0.`com.bumptech.glide.load.engine.w0.e` @type ^`com.bumptech.glide.load.c` := v3 @kind object;
  #L32ca96.  v0.`com.bumptech.glide.load.engine.w0.f` @type ^`int` := v4;
  #L32ca9a.  v0.`com.bumptech.glide.load.engine.w0.g` @type ^`int` := v5;
  #L32ca9e.  v0.`com.bumptech.glide.load.engine.w0.j` @type ^`com.bumptech.glide.load.k` := v6 @kind object;
  #L32caa2.  v0.`com.bumptech.glide.load.engine.w0.h` @type ^`java.lang.Class` := v7 @kind object;
  #L32caa6.  v0.`com.bumptech.glide.load.engine.w0.i` @type ^`com.bumptech.glide.load.h` := v8 @kind object;
  #L32caaa.  return @kind void;
}
procedure `byte`[] `c`(`com.bumptech.glide.load.engine.w0` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/w0;.c:()[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L32c8d0.  v0:= `@@com.bumptech.glide.load.engine.w0.b` @type ^`com.bumptech.glide.s.k` @kind object;
  #L32c8d4.  v1:= v3.`com.bumptech.glide.load.engine.w0.h` @type ^`java.lang.Class` @kind object;
  #L32c8d8.  call temp:= `g`(v0, v1) @signature `Lcom/bumptech/glide/s/k;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L32c8de.  v1:= temp @kind object;
  #L32c8e0.  v1:= (`byte`[]) v1 @kind object;
  #L32c8e4.  if v1 != 0 then goto L32c90a;
  #L32c8e8.  v1:= v3.`com.bumptech.glide.load.engine.w0.h` @type ^`java.lang.Class` @kind object;
  #L32c8ec.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L32c8f2.  v1:= temp @kind object;
  #L32c8f4.  v2:= `@@com.bumptech.glide.load.c.a` @type ^`java.nio.charset.Charset` @kind object;
  #L32c8f8.  call temp:= `getBytes`(v1, v2) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L32c8fe.  v1:= temp @kind object;
  #L32c900.  v2:= v3.`com.bumptech.glide.load.engine.w0.h` @type ^`java.lang.Class` @kind object;
  #L32c904.  call temp:= `k`(v0, v2, v1) @signature `Lcom/bumptech/glide/s/k;.k:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L32c90a.  return v1 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.w0` v3 @kind this, `java.security.MessageDigest` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/w0;.a:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32cabc.  v0:= v3.`com.bumptech.glide.load.engine.w0.c` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.b` @kind object;
  #L32cac0.  v1:= constclass @type ^`byte`[] @kind object;
  #L32cac4.  v2:= 8I;
  #L32cac8.  call temp:= `c`(v0, v2, v1) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/b;.c:(ILjava/lang/Class;)Ljava/lang/Object;` @kind interface;
  #L32cace.  v0:= temp @kind object;
  #L32cad0.  v0:= (`byte`[]) v0 @kind object;
  #L32cad4.  call temp:= `wrap`(v0) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L32cada.  v1:= temp @kind object;
  #L32cadc.  v2:= v3.`com.bumptech.glide.load.engine.w0.f` @type ^`int`;
  #L32cae0.  call temp:= `putInt`(v1, v2) @signature `Ljava/nio/ByteBuffer;.putInt:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L32cae6.  v1:= temp @kind object;
  #L32cae8.  v2:= v3.`com.bumptech.glide.load.engine.w0.g` @type ^`int`;
  #L32caec.  call temp:= `putInt`(v1, v2) @signature `Ljava/nio/ByteBuffer;.putInt:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L32caf2.  v1:= temp @kind object;
  #L32caf4.  call temp:= `array`(v1) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L32cafa.  v1:= v3.`com.bumptech.glide.load.engine.w0.e` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32cafe.  call `a`(v1, v4) @signature `Lcom/bumptech/glide/load/c;.a:(Ljava/security/MessageDigest;)V` @kind interface;
  #L32cb04.  v1:= v3.`com.bumptech.glide.load.engine.w0.d` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32cb08.  call `a`(v1, v4) @signature `Lcom/bumptech/glide/load/c;.a:(Ljava/security/MessageDigest;)V` @kind interface;
  #L32cb0e.  call `update`(v4, v0) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L32cb14.  v1:= v3.`com.bumptech.glide.load.engine.w0.j` @type ^`com.bumptech.glide.load.k` @kind object;
  #L32cb18.  if v1 == 0 then goto L32cb22;
  #L32cb1c.  call `a`(v1, v4) @signature `Lcom/bumptech/glide/load/c;.a:(Ljava/security/MessageDigest;)V` @kind interface;
  #L32cb22.  v1:= v3.`com.bumptech.glide.load.engine.w0.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L32cb26.  call `a`(v1, v4) @signature `Lcom/bumptech/glide/load/h;.a:(Ljava/security/MessageDigest;)V` @kind virtual;
  #L32cb2c.  call temp:= `c`(v3) @signature `Lcom/bumptech/glide/load/engine/w0;.c:()[B` @kind direct;
  #L32cb32.  v1:= temp @kind object;
  #L32cb34.  call `update`(v4, v1) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L32cb3a.  v4:= v3.`com.bumptech.glide.load.engine.w0.c` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.b` @kind object;
  #L32cb3e.  call `d`(v4, v0) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/b;.d:(Ljava/lang/Object;)V` @kind interface;
  #L32cb44.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.engine.w0` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/w0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32c830.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.engine.w0` @kind boolean;
  #L32c834.  v1:= 0I;
  #L32c836.  if v0 == 0 then goto L32c8bc;
  #L32c83a.  v4:= (`com.bumptech.glide.load.engine.w0`) v4 @kind object;
  #L32c83e.  v0:= v3.`com.bumptech.glide.load.engine.w0.g` @type ^`int`;
  #L32c842.  v2:= v4.`com.bumptech.glide.load.engine.w0.g` @type ^`int`;
  #L32c846.  if v0 != v2 then goto L32c8bc;
  #L32c84a.  v0:= v3.`com.bumptech.glide.load.engine.w0.f` @type ^`int`;
  #L32c84e.  v2:= v4.`com.bumptech.glide.load.engine.w0.f` @type ^`int`;
  #L32c852.  if v0 != v2 then goto L32c8bc;
  #L32c856.  v0:= v3.`com.bumptech.glide.load.engine.w0.j` @type ^`com.bumptech.glide.load.k` @kind object;
  #L32c85a.  v2:= v4.`com.bumptech.glide.load.engine.w0.j` @type ^`com.bumptech.glide.load.k` @kind object;
  #L32c85e.  call temp:= `d`(v0, v2) @signature `Lcom/bumptech/glide/s/p;.d:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L32c864.  v0:= temp;
  #L32c866.  if v0 == 0 then goto L32c8bc;
  #L32c86a.  v0:= v3.`com.bumptech.glide.load.engine.w0.h` @type ^`java.lang.Class` @kind object;
  #L32c86e.  v2:= v4.`com.bumptech.glide.load.engine.w0.h` @type ^`java.lang.Class` @kind object;
  #L32c872.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32c878.  v0:= temp;
  #L32c87a.  if v0 == 0 then goto L32c8bc;
  #L32c87e.  v0:= v3.`com.bumptech.glide.load.engine.w0.d` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32c882.  v2:= v4.`com.bumptech.glide.load.engine.w0.d` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32c886.  call temp:= `equals`(v0, v2) @signature `Lcom/bumptech/glide/load/c;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L32c88c.  v0:= temp;
  #L32c88e.  if v0 == 0 then goto L32c8bc;
  #L32c892.  v0:= v3.`com.bumptech.glide.load.engine.w0.e` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32c896.  v2:= v4.`com.bumptech.glide.load.engine.w0.e` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32c89a.  call temp:= `equals`(v0, v2) @signature `Lcom/bumptech/glide/load/c;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L32c8a0.  v0:= temp;
  #L32c8a2.  if v0 == 0 then goto L32c8bc;
  #L32c8a6.  v0:= v3.`com.bumptech.glide.load.engine.w0.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L32c8aa.  v4:= v4.`com.bumptech.glide.load.engine.w0.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L32c8ae.  call temp:= `equals`(v0, v4) @signature `Lcom/bumptech/glide/load/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32c8b4.  v4:= temp;
  #L32c8b6.  if v4 == 0 then goto L32c8bc;
  #L32c8ba.  v1:= 1I;
  #L32c8bc.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.engine.w0` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/w0;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32c91c.  v0:= v2.`com.bumptech.glide.load.engine.w0.d` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32c920.  call temp:= `hashCode`(v0) @signature `Lcom/bumptech/glide/load/c;.hashCode:()I` @kind interface;
  #L32c926.  v0:= temp;
  #L32c928.  v0:= v0 * 31;
  #L32c92c.  v1:= v2.`com.bumptech.glide.load.engine.w0.e` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32c930.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/c;.hashCode:()I` @kind interface;
  #L32c936.  v1:= temp;
  #L32c938.  v0:= v0 + v1 @kind int;
  #L32c93a.  v0:= v0 * 31;
  #L32c93e.  v1:= v2.`com.bumptech.glide.load.engine.w0.f` @type ^`int`;
  #L32c942.  v0:= v0 + v1 @kind int;
  #L32c944.  v0:= v0 * 31;
  #L32c948.  v1:= v2.`com.bumptech.glide.load.engine.w0.g` @type ^`int`;
  #L32c94c.  v0:= v0 + v1 @kind int;
  #L32c94e.  v1:= v2.`com.bumptech.glide.load.engine.w0.j` @type ^`com.bumptech.glide.load.k` @kind object;
  #L32c952.  if v1 == 0 then goto L32c964;
  #L32c956.  v0:= v0 * 31;
  #L32c95a.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L32c960.  v1:= temp;
  #L32c962.  v0:= v0 + v1 @kind int;
  #L32c964.  v0:= v0 * 31;
  #L32c968.  v1:= v2.`com.bumptech.glide.load.engine.w0.h` @type ^`java.lang.Class` @kind object;
  #L32c96c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L32c972.  v1:= temp;
  #L32c974.  v0:= v0 + v1 @kind int;
  #L32c976.  v0:= v0 * 31;
  #L32c97a.  v1:= v2.`com.bumptech.glide.load.engine.w0.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L32c97e.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/h;.hashCode:()I` @kind virtual;
  #L32c984.  v1:= temp;
  #L32c986.  v0:= v0 + v1 @kind int;
  #L32c988.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.w0` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/w0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32c99c.  v0:= new `java.lang.StringBuilder`;
  #L32c9a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32c9a6.  v1:= "ResourceCacheKey{sourceKey=" @kind object;
  #L32c9aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c9b0.  v1:= v2.`com.bumptech.glide.load.engine.w0.d` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32c9b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c9ba.  v1:= ", signature=" @kind object;
  #L32c9be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c9c4.  v1:= v2.`com.bumptech.glide.load.engine.w0.e` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32c9c8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c9ce.  v1:= ", width=" @kind object;
  #L32c9d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c9d8.  v1:= v2.`com.bumptech.glide.load.engine.w0.f` @type ^`int`;
  #L32c9dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c9e2.  v1:= ", height=" @kind object;
  #L32c9e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c9ec.  v1:= v2.`com.bumptech.glide.load.engine.w0.g` @type ^`int`;
  #L32c9f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c9f6.  v1:= ", decodedResourceClass=" @kind object;
  #L32c9fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ca00.  v1:= v2.`com.bumptech.glide.load.engine.w0.h` @type ^`java.lang.Class` @kind object;
  #L32ca04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ca0a.  v1:= ", transformation='" @kind object;
  #L32ca0e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ca14.  v1:= v2.`com.bumptech.glide.load.engine.w0.j` @type ^`com.bumptech.glide.load.k` @kind object;
  #L32ca18.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ca1e.  v1:= 39I;
  #L32ca22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ca28.  v1:= ", options=" @kind object;
  #L32ca2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ca32.  v1:= v2.`com.bumptech.glide.load.engine.w0.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L32ca36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ca3c.  v1:= 125I;
  #L32ca40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ca46.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32ca4c.  v0:= temp @kind object;
  #L32ca4e.  return v0 @kind object;
}
