record `com.bumptech.glide.load.engine.a1.s` @kind class @AccessFlag  extends `com.bumptech.glide.s.q.d` @kind interface {
  `com.bumptech.glide.load.engine.a1.u` `com.bumptech.glide.load.engine.a1.s.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a1.s` v0 @kind this, `com.bumptech.glide.load.engine.a1.u` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/s;.<init>:(Lcom/bumptech/glide/load/engine/a1/u;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L32fd78.  v0.`com.bumptech.glide.load.engine.a1.s.a` @type ^`com.bumptech.glide.load.engine.a1.u` := v1 @kind object;
  #L32fd7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32fd82.  return @kind void;
}
procedure `java.lang.Object` `a`(`com.bumptech.glide.load.engine.a1.s` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/a1/s;.a:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L32fd5c.  call temp:= `b`(v1) @signature `Lcom/bumptech/glide/load/engine/a1/s;.b:()Lcom/bumptech/glide/load/engine/a1/t;` @kind virtual;
  #L32fd62.  v0:= temp @kind object;
  #L32fd64.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.a1.t` `b`(`com.bumptech.glide.load.engine.a1.s` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/a1/s;.b:()Lcom/bumptech/glide/load/engine/a1/t;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32fd14.  v0:= new `com.bumptech.glide.load.engine.a1.t`;
  #L32fd18.  v1:= "SHA-256" @kind object;
  #L32fd1c.  call temp:= `getInstance`(v1) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L32fd22.  v1:= temp @kind object;
  #L32fd24.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/a1/t;.<init>:(Ljava/security/MessageDigest;)V` @kind direct;
  #L32fd2a.  return v0 @kind object;
  #L32fd2c.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L32fd2e.  v1:= new `java.lang.RuntimeException`;
  #L32fd32.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L32fd38.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L32fd14..L32fd2a] goto L32fd2c;
}
