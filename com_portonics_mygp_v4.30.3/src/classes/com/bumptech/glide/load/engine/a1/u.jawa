record `com.bumptech.glide.load.engine.a1.u` @kind class @AccessFlag PUBLIC {
  `com.bumptech.glide.s.k` `com.bumptech.glide.load.engine.a1.u.a` @AccessFlag PRIVATE_FINAL;
  `androidx.core.util.e` `com.bumptech.glide.load.engine.a1.u.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a1.u` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/a1/u;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L32feb4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32feba.  v0:= new `com.bumptech.glide.s.k`;
  #L32febe.  v1:= 1000L;
  #L32fec2.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/s/k;.<init>:(J)V` @kind direct;
  #L32fec8.  v3.`com.bumptech.glide.load.engine.a1.u.a` @type ^`com.bumptech.glide.s.k` := v0 @kind object;
  #L32fecc.  v0:= new `com.bumptech.glide.load.engine.a1.s`;
  #L32fed0.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/engine/a1/s;.<init>:(Lcom/bumptech/glide/load/engine/a1/u;)V` @kind direct;
  #L32fed6.  v1:= 10I;
  #L32feda.  call temp:= `d`(v1, v0) @signature `Lcom/bumptech/glide/s/q/h;.d:(ILcom/bumptech/glide/s/q/d;)Landroidx/core/util/e;` @kind static;
  #L32fee0.  v0:= temp @kind object;
  #L32fee2.  v3.`com.bumptech.glide.load.engine.a1.u.b` @type ^`androidx.core.util.e` := v0 @kind object;
  #L32fee6.  return @kind void;
}
procedure `java.lang.String` `a`(`com.bumptech.glide.load.engine.a1.u` v2 @kind this, `com.bumptech.glide.load.c` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/u;.a:(Lcom/bumptech/glide/load/c;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L32fdd4.  v0:= v2.`com.bumptech.glide.load.engine.a1.u.b` @type ^`androidx.core.util.e` @kind object;
  #L32fdd8.  call temp:= `b`(v0) @signature `Landroidx/core/util/e;.b:()Ljava/lang/Object;` @kind interface;
  #L32fdde.  v0:= temp @kind object;
  #L32fde0.  call temp:= `d`(v0) @signature `Lcom/bumptech/glide/s/n;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32fde6.  v0:= temp @kind object;
  #L32fde8.  v0:= (`com.bumptech.glide.load.engine.a1.t`) v0 @kind object;
  #L32fdec.  v1:= v0.`com.bumptech.glide.load.engine.a1.t.b` @type ^`java.security.MessageDigest` @kind object;
  #L32fdf0.  call `a`(v3, v1) @signature `Lcom/bumptech/glide/load/c;.a:(Ljava/security/MessageDigest;)V` @kind interface;
  #L32fdf6.  v3:= v0.`com.bumptech.glide.load.engine.a1.t.b` @type ^`java.security.MessageDigest` @kind object;
  #L32fdfa.  call temp:= `digest`(v3) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L32fe00.  v3:= temp @kind object;
  #L32fe02.  call temp:= `u`(v3) @signature `Lcom/bumptech/glide/s/p;.u:([B)Ljava/lang/String;` @kind static;
  #L32fe08.  v3:= temp @kind object;
  #L32fe0a.  v1:= v2.`com.bumptech.glide.load.engine.a1.u.b` @type ^`androidx.core.util.e` @kind object;
  #L32fe0e.  call temp:= `a`(v1, v0) @signature `Landroidx/core/util/e;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L32fe14.  return v3 @kind object;
  #L32fe16.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32fe18.  v1:= v2.`com.bumptech.glide.load.engine.a1.u.b` @type ^`androidx.core.util.e` @kind object;
  #L32fe1c.  call temp:= `a`(v1, v0) @signature `Landroidx/core/util/e;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L32fe22.  throw v3;
  catch `java.lang.Throwable` @[L32fdec..L32fe0a] goto L32fe16;
}
procedure `java.lang.String` `b`(`com.bumptech.glide.load.engine.a1.u` v3 @kind this, `com.bumptech.glide.load.c` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/u;.b:(Lcom/bumptech/glide/load/c;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32fe40.  v0:= v3.`com.bumptech.glide.load.engine.a1.u.a` @type ^`com.bumptech.glide.s.k` @kind object;
  #L32fe44.  @monitorenter v0
  #L32fe46.  v1:= v3.`com.bumptech.glide.load.engine.a1.u.a` @type ^`com.bumptech.glide.s.k` @kind object;
  #L32fe4a.  call temp:= `g`(v1, v4) @signature `Lcom/bumptech/glide/s/k;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L32fe50.  v1:= temp @kind object;
  #L32fe52.  v1:= (`java.lang.String`) v1 @kind object;
  #L32fe56.  @monitorexit v0
  #L32fe58.  if v1 != 0 then goto L32fe64;
  #L32fe5c.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/load/engine/a1/u;.a:(Lcom/bumptech/glide/load/c;)Ljava/lang/String;` @kind direct;
  #L32fe62.  v1:= temp @kind object;
  #L32fe64.  v2:= v3.`com.bumptech.glide.load.engine.a1.u.a` @type ^`com.bumptech.glide.s.k` @kind object;
  #L32fe68.  @monitorenter v2
  #L32fe6a.  v0:= v3.`com.bumptech.glide.load.engine.a1.u.a` @type ^`com.bumptech.glide.s.k` @kind object;
  #L32fe6e.  call temp:= `k`(v0, v4, v1) @signature `Lcom/bumptech/glide/s/k;.k:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L32fe74.  @monitorexit v2
  #L32fe76.  return v1 @kind object;
  #L32fe78.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32fe7a.  @monitorexit v2
  #L32fe7c.  throw v4;
  #L32fe7e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32fe80.  @monitorexit v0
  #L32fe82.  throw v4;
  catch `java.lang.Throwable` @[L32fe46..L32fe58] goto L32fe7e;
  catch `java.lang.Throwable` @[L32fe6a..L32fe7c] goto L32fe78;
  catch `java.lang.Throwable` @[L32fe80..L32fe82] goto L32fe7e;
}
