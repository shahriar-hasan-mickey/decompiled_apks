record `com.bumptech.glide.load.engine.l0` @kind class @AccessFlag  extends `com.bumptech.glide.load.c` @kind interface {
  `java.lang.Object` `com.bumptech.glide.load.engine.l0.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.l0.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.l0.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.l0.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.l0.f` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.c` `com.bumptech.glide.load.engine.l0.g` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.l0.h` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.h` `com.bumptech.glide.load.engine.l0.i` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.l0.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.l0` v0 @kind this, `java.lang.Object` v1 @kind object, `com.bumptech.glide.load.c` v2 @kind object, `int` v3 , `int` v4 , `java.util.Map` v5 @kind object, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object, `com.bumptech.glide.load.h` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/l0;.<init>:(Ljava/lang/Object;Lcom/bumptech/glide/load/c;IILjava/util/Map;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L32b094.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32b09a.  call temp:= `d`(v1) @signature `Lcom/bumptech/glide/s/n;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32b0a0.  v1:= temp @kind object;
  #L32b0a2.  v0.`com.bumptech.glide.load.engine.l0.b` @type ^`java.lang.Object` := v1 @kind object;
  #L32b0a6.  v1:= "Signature must not be null" @kind object;
  #L32b0aa.  call temp:= `e`(v2, v1) @signature `Lcom/bumptech/glide/s/n;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32b0b0.  v1:= temp @kind object;
  #L32b0b2.  v1:= (`com.bumptech.glide.load.c`) v1 @kind object;
  #L32b0b6.  v0.`com.bumptech.glide.load.engine.l0.g` @type ^`com.bumptech.glide.load.c` := v1 @kind object;
  #L32b0ba.  v0.`com.bumptech.glide.load.engine.l0.c` @type ^`int` := v3;
  #L32b0be.  v0.`com.bumptech.glide.load.engine.l0.d` @type ^`int` := v4;
  #L32b0c2.  call temp:= `d`(v5) @signature `Lcom/bumptech/glide/s/n;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32b0c8.  v1:= temp @kind object;
  #L32b0ca.  v1:= (`java.util.Map`) v1 @kind object;
  #L32b0ce.  v0.`com.bumptech.glide.load.engine.l0.h` @type ^`java.util.Map` := v1 @kind object;
  #L32b0d2.  v1:= "Resource class must not be null" @kind object;
  #L32b0d6.  call temp:= `e`(v6, v1) @signature `Lcom/bumptech/glide/s/n;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32b0dc.  v1:= temp @kind object;
  #L32b0de.  v1:= (`java.lang.Class`) v1 @kind object;
  #L32b0e2.  v0.`com.bumptech.glide.load.engine.l0.e` @type ^`java.lang.Class` := v1 @kind object;
  #L32b0e6.  v1:= "Transcode class must not be null" @kind object;
  #L32b0ea.  call temp:= `e`(v7, v1) @signature `Lcom/bumptech/glide/s/n;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32b0f0.  v1:= temp @kind object;
  #L32b0f2.  v1:= (`java.lang.Class`) v1 @kind object;
  #L32b0f6.  v0.`com.bumptech.glide.load.engine.l0.f` @type ^`java.lang.Class` := v1 @kind object;
  #L32b0fa.  call temp:= `d`(v8) @signature `Lcom/bumptech/glide/s/n;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32b100.  v1:= temp @kind object;
  #L32b102.  v1:= (`com.bumptech.glide.load.h`) v1 @kind object;
  #L32b106.  v0.`com.bumptech.glide.load.engine.l0.i` @type ^`com.bumptech.glide.load.h` := v1 @kind object;
  #L32b10a.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.l0` v0 @kind this, `java.security.MessageDigest` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/l0;.a:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;

  #L32b11c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L32b120.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L32b126.  throw v1;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.engine.l0` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/l0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32ae44.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.engine.l0` @kind boolean;
  #L32ae48.  v1:= 0I;
  #L32ae4a.  if v0 == 0 then goto L32aee4;
  #L32ae4e.  v4:= (`com.bumptech.glide.load.engine.l0`) v4 @kind object;
  #L32ae52.  v0:= v3.`com.bumptech.glide.load.engine.l0.b` @type ^`java.lang.Object` @kind object;
  #L32ae56.  v2:= v4.`com.bumptech.glide.load.engine.l0.b` @type ^`java.lang.Object` @kind object;
  #L32ae5a.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32ae60.  v0:= temp;
  #L32ae62.  if v0 == 0 then goto L32aee4;
  #L32ae66.  v0:= v3.`com.bumptech.glide.load.engine.l0.g` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32ae6a.  v2:= v4.`com.bumptech.glide.load.engine.l0.g` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32ae6e.  call temp:= `equals`(v0, v2) @signature `Lcom/bumptech/glide/load/c;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L32ae74.  v0:= temp;
  #L32ae76.  if v0 == 0 then goto L32aee4;
  #L32ae7a.  v0:= v3.`com.bumptech.glide.load.engine.l0.d` @type ^`int`;
  #L32ae7e.  v2:= v4.`com.bumptech.glide.load.engine.l0.d` @type ^`int`;
  #L32ae82.  if v0 != v2 then goto L32aee4;
  #L32ae86.  v0:= v3.`com.bumptech.glide.load.engine.l0.c` @type ^`int`;
  #L32ae8a.  v2:= v4.`com.bumptech.glide.load.engine.l0.c` @type ^`int`;
  #L32ae8e.  if v0 != v2 then goto L32aee4;
  #L32ae92.  v0:= v3.`com.bumptech.glide.load.engine.l0.h` @type ^`java.util.Map` @kind object;
  #L32ae96.  v2:= v4.`com.bumptech.glide.load.engine.l0.h` @type ^`java.util.Map` @kind object;
  #L32ae9a.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L32aea0.  v0:= temp;
  #L32aea2.  if v0 == 0 then goto L32aee4;
  #L32aea6.  v0:= v3.`com.bumptech.glide.load.engine.l0.e` @type ^`java.lang.Class` @kind object;
  #L32aeaa.  v2:= v4.`com.bumptech.glide.load.engine.l0.e` @type ^`java.lang.Class` @kind object;
  #L32aeae.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32aeb4.  v0:= temp;
  #L32aeb6.  if v0 == 0 then goto L32aee4;
  #L32aeba.  v0:= v3.`com.bumptech.glide.load.engine.l0.f` @type ^`java.lang.Class` @kind object;
  #L32aebe.  v2:= v4.`com.bumptech.glide.load.engine.l0.f` @type ^`java.lang.Class` @kind object;
  #L32aec2.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32aec8.  v0:= temp;
  #L32aeca.  if v0 == 0 then goto L32aee4;
  #L32aece.  v0:= v3.`com.bumptech.glide.load.engine.l0.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L32aed2.  v4:= v4.`com.bumptech.glide.load.engine.l0.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L32aed6.  call temp:= `equals`(v0, v4) @signature `Lcom/bumptech/glide/load/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32aedc.  v4:= temp;
  #L32aede.  if v4 == 0 then goto L32aee4;
  #L32aee2.  v1:= 1I;
  #L32aee4.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.engine.l0` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/l0;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32aef8.  v0:= v2.`com.bumptech.glide.load.engine.l0.j` @type ^`int`;
  #L32aefc.  if v0 != 0 then goto L32af9a;
  #L32af00.  v0:= v2.`com.bumptech.glide.load.engine.l0.b` @type ^`java.lang.Object` @kind object;
  #L32af04.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L32af0a.  v0:= temp;
  #L32af0c.  v2.`com.bumptech.glide.load.engine.l0.j` @type ^`int` := v0;
  #L32af10.  v0:= v0 * 31;
  #L32af14.  v1:= v2.`com.bumptech.glide.load.engine.l0.g` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32af18.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/c;.hashCode:()I` @kind interface;
  #L32af1e.  v1:= temp;
  #L32af20.  v0:= v0 + v1 @kind int;
  #L32af22.  v2.`com.bumptech.glide.load.engine.l0.j` @type ^`int` := v0;
  #L32af26.  v0:= v0 * 31;
  #L32af2a.  v1:= v2.`com.bumptech.glide.load.engine.l0.c` @type ^`int`;
  #L32af2e.  v0:= v0 + v1 @kind int;
  #L32af30.  v2.`com.bumptech.glide.load.engine.l0.j` @type ^`int` := v0;
  #L32af34.  v0:= v0 * 31;
  #L32af38.  v1:= v2.`com.bumptech.glide.load.engine.l0.d` @type ^`int`;
  #L32af3c.  v0:= v0 + v1 @kind int;
  #L32af3e.  v2.`com.bumptech.glide.load.engine.l0.j` @type ^`int` := v0;
  #L32af42.  v0:= v0 * 31;
  #L32af46.  v1:= v2.`com.bumptech.glide.load.engine.l0.h` @type ^`java.util.Map` @kind object;
  #L32af4a.  call temp:= `hashCode`(v1) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L32af50.  v1:= temp;
  #L32af52.  v0:= v0 + v1 @kind int;
  #L32af54.  v2.`com.bumptech.glide.load.engine.l0.j` @type ^`int` := v0;
  #L32af58.  v0:= v0 * 31;
  #L32af5c.  v1:= v2.`com.bumptech.glide.load.engine.l0.e` @type ^`java.lang.Class` @kind object;
  #L32af60.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L32af66.  v1:= temp;
  #L32af68.  v0:= v0 + v1 @kind int;
  #L32af6a.  v2.`com.bumptech.glide.load.engine.l0.j` @type ^`int` := v0;
  #L32af6e.  v0:= v0 * 31;
  #L32af72.  v1:= v2.`com.bumptech.glide.load.engine.l0.f` @type ^`java.lang.Class` @kind object;
  #L32af76.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L32af7c.  v1:= temp;
  #L32af7e.  v0:= v0 + v1 @kind int;
  #L32af80.  v2.`com.bumptech.glide.load.engine.l0.j` @type ^`int` := v0;
  #L32af84.  v0:= v0 * 31;
  #L32af88.  v1:= v2.`com.bumptech.glide.load.engine.l0.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L32af8c.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/h;.hashCode:()I` @kind virtual;
  #L32af92.  v1:= temp;
  #L32af94.  v0:= v0 + v1 @kind int;
  #L32af96.  v2.`com.bumptech.glide.load.engine.l0.j` @type ^`int` := v0;
  #L32af9a.  v0:= v2.`com.bumptech.glide.load.engine.l0.j` @type ^`int`;
  #L32af9e.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.l0` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/l0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32afb0.  v0:= new `java.lang.StringBuilder`;
  #L32afb4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32afba.  v1:= "EngineKey{model=" @kind object;
  #L32afbe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32afc4.  v1:= v2.`com.bumptech.glide.load.engine.l0.b` @type ^`java.lang.Object` @kind object;
  #L32afc8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32afce.  v1:= ", width=" @kind object;
  #L32afd2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32afd8.  v1:= v2.`com.bumptech.glide.load.engine.l0.c` @type ^`int`;
  #L32afdc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32afe2.  v1:= ", height=" @kind object;
  #L32afe6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32afec.  v1:= v2.`com.bumptech.glide.load.engine.l0.d` @type ^`int`;
  #L32aff0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32aff6.  v1:= ", resourceClass=" @kind object;
  #L32affa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b000.  v1:= v2.`com.bumptech.glide.load.engine.l0.e` @type ^`java.lang.Class` @kind object;
  #L32b004.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b00a.  v1:= ", transcodeClass=" @kind object;
  #L32b00e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b014.  v1:= v2.`com.bumptech.glide.load.engine.l0.f` @type ^`java.lang.Class` @kind object;
  #L32b018.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b01e.  v1:= ", signature=" @kind object;
  #L32b022.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b028.  v1:= v2.`com.bumptech.glide.load.engine.l0.g` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32b02c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b032.  v1:= ", hashCode=" @kind object;
  #L32b036.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b03c.  v1:= v2.`com.bumptech.glide.load.engine.l0.j` @type ^`int`;
  #L32b040.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b046.  v1:= ", transformations=" @kind object;
  #L32b04a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b050.  v1:= v2.`com.bumptech.glide.load.engine.l0.h` @type ^`java.util.Map` @kind object;
  #L32b054.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b05a.  v1:= ", options=" @kind object;
  #L32b05e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b064.  v1:= v2.`com.bumptech.glide.load.engine.l0.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L32b068.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b06e.  v1:= 125I;
  #L32b072.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b078.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32b07e.  v0:= temp @kind object;
  #L32b080.  return v0 @kind object;
}
