record `com.bumptech.glide.load.engine.bitmap_recycle.m` @kind class @AccessFlag FINAL extends `com.bumptech.glide.load.engine.bitmap_recycle.t` @kind interface {
  `com.bumptech.glide.load.engine.bitmap_recycle.n` `com.bumptech.glide.load.engine.bitmap_recycle.m.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.bitmap_recycle.m.b` @AccessFlag ;
  `java.lang.Class` `com.bumptech.glide.load.engine.bitmap_recycle.m.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.bitmap_recycle.m` v0 @kind this, `com.bumptech.glide.load.engine.bitmap_recycle.n` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/m;.<init>:(Lcom/bumptech/glide/load/engine/bitmap_recycle/n;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L32da54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32da5a.  v0.`com.bumptech.glide.load.engine.bitmap_recycle.m.a` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.n` := v1 @kind object;
  #L32da5e.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.bitmap_recycle.m` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/m;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32da8c.  v0:= v1.`com.bumptech.glide.load.engine.bitmap_recycle.m.a` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.n` @kind object;
  #L32da90.  call `c`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/f;.c:(Lcom/bumptech/glide/load/engine/bitmap_recycle/t;)V` @kind virtual;
  #L32da96.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.bitmap_recycle.m` v0 @kind this, `int` v1 , `java.lang.Class` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/m;.b:(ILjava/lang/Class;)V` @AccessFlag  {
    temp;

  #L32da70.  v0.`com.bumptech.glide.load.engine.bitmap_recycle.m.b` @type ^`int` := v1;
  #L32da74.  v0.`com.bumptech.glide.load.engine.bitmap_recycle.m.c` @type ^`java.lang.Class` := v2 @kind object;
  #L32da78.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.engine.bitmap_recycle.m` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/m;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32d990.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.engine.bitmap_recycle.m` @kind boolean;
  #L32d994.  v1:= 0I;
  #L32d996.  if v0 == 0 then goto L32d9b8;
  #L32d99a.  v4:= (`com.bumptech.glide.load.engine.bitmap_recycle.m`) v4 @kind object;
  #L32d99e.  v0:= v3.`com.bumptech.glide.load.engine.bitmap_recycle.m.b` @type ^`int`;
  #L32d9a2.  v2:= v4.`com.bumptech.glide.load.engine.bitmap_recycle.m.b` @type ^`int`;
  #L32d9a6.  if v0 != v2 then goto L32d9b8;
  #L32d9aa.  v0:= v3.`com.bumptech.glide.load.engine.bitmap_recycle.m.c` @type ^`java.lang.Class` @kind object;
  #L32d9ae.  v4:= v4.`com.bumptech.glide.load.engine.bitmap_recycle.m.c` @type ^`java.lang.Class` @kind object;
  #L32d9b2.  if v0 != v4 then goto L32d9b8;
  #L32d9b6.  v1:= 1I;
  #L32d9b8.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.engine.bitmap_recycle.m` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/m;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32d9cc.  v0:= v2.`com.bumptech.glide.load.engine.bitmap_recycle.m.b` @type ^`int`;
  #L32d9d0.  v0:= v0 * 31;
  #L32d9d4.  v1:= v2.`com.bumptech.glide.load.engine.bitmap_recycle.m.c` @type ^`java.lang.Class` @kind object;
  #L32d9d8.  if v1 == 0 then goto L32d9e6;
  #L32d9dc.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L32d9e2.  v1:= temp;
  #L32d9e4.  goto L32d9e8;
  #L32d9e6.  v1:= 0I;
  #L32d9e8.  v0:= v0 + v1 @kind int;
  #L32d9ea.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.bitmap_recycle.m` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32d9fc.  v0:= new `java.lang.StringBuilder`;
  #L32da00.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32da06.  v1:= "Key{size=" @kind object;
  #L32da0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32da10.  v1:= v2.`com.bumptech.glide.load.engine.bitmap_recycle.m.b` @type ^`int`;
  #L32da14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32da1a.  v1:= "array=" @kind object;
  #L32da1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32da24.  v1:= v2.`com.bumptech.glide.load.engine.bitmap_recycle.m.c` @type ^`java.lang.Class` @kind object;
  #L32da28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32da2e.  v1:= 125I;
  #L32da32.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32da38.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32da3e.  v0:= temp @kind object;
  #L32da40.  return v0 @kind object;
}
