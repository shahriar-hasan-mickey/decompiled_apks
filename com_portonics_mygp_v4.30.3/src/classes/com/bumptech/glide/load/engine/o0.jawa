record `com.bumptech.glide.load.engine.o0` @kind class @AccessFlag  extends `com.bumptech.glide.load.engine.u0` @kind interface {
  `boolean` `com.bumptech.glide.load.engine.o0.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.load.engine.o0.c` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.u0` `com.bumptech.glide.load.engine.o0.d` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.n0` `com.bumptech.glide.load.engine.o0.e` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.c` `com.bumptech.glide.load.engine.o0.f` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.o0.g` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.o0.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.o0` v0 @kind this, `com.bumptech.glide.load.engine.u0` v1 @kind object, `boolean` v2 , `boolean` v3 ) @signature `Lcom/bumptech/glide/load/engine/o0;.<init>:(Lcom/bumptech/glide/load/engine/u0;ZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L32b284.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32b28a.  call temp:= `d`(v1) @signature `Lcom/bumptech/glide/s/n;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32b290.  v1:= temp @kind object;
  #L32b292.  v1:= (`com.bumptech.glide.load.engine.u0`) v1 @kind object;
  #L32b296.  v0.`com.bumptech.glide.load.engine.o0.d` @type ^`com.bumptech.glide.load.engine.u0` := v1 @kind object;
  #L32b29a.  v0.`com.bumptech.glide.load.engine.o0.b` @type ^`boolean` := v2 @kind boolean;
  #L32b29e.  v0.`com.bumptech.glide.load.engine.o0.c` @type ^`boolean` := v3 @kind boolean;
  #L32b2a2.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.o0` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/o0;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L32b2b4.  @monitorenter v2
  #L32b2b6.  v0:= v2.`com.bumptech.glide.load.engine.o0.h` @type ^`boolean` @kind boolean;
  #L32b2ba.  if v0 != 0 then goto L32b2ce;
  #L32b2be.  v0:= v2.`com.bumptech.glide.load.engine.o0.g` @type ^`int`;
  #L32b2c2.  v0:= v0 + 1;
  #L32b2c6.  v2.`com.bumptech.glide.load.engine.o0.g` @type ^`int` := v0;
  #L32b2ca.  @monitorexit v2
  #L32b2cc.  return @kind void;
  #L32b2ce.  v0:= new `java.lang.IllegalStateException`;
  #L32b2d2.  v1:= "Cannot acquire a recycled resource" @kind object;
  #L32b2d6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32b2dc.  throw v0;
  #L32b2de.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32b2e0.  @monitorexit v2
  #L32b2e2.  throw v0;
  catch `java.lang.Throwable` @[L32b2b6..L32b2ca] goto L32b2de;
  catch `java.lang.Throwable` @[L32b2ce..L32b2de] goto L32b2de;
}
procedure `com.bumptech.glide.load.engine.u0` `b`(`com.bumptech.glide.load.engine.o0` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/o0;.b:()Lcom/bumptech/glide/load/engine/u0;` @AccessFlag  {
    temp;
    v0;

  #L32b150.  v0:= v1.`com.bumptech.glide.load.engine.o0.d` @type ^`com.bumptech.glide.load.engine.u0` @kind object;
  #L32b154.  return v0 @kind object;
}
procedure `void` `c`(`com.bumptech.glide.load.engine.o0` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/o0;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32b308.  @monitorenter v2
  #L32b30a.  v0:= v2.`com.bumptech.glide.load.engine.o0.g` @type ^`int`;
  #L32b30e.  if v0 > 0 then goto L32b346;
  #L32b312.  v0:= v2.`com.bumptech.glide.load.engine.o0.h` @type ^`boolean` @kind boolean;
  #L32b316.  if v0 != 0 then goto L32b336;
  #L32b31a.  v0:= 1I;
  #L32b31c.  v2.`com.bumptech.glide.load.engine.o0.h` @type ^`boolean` := v0 @kind boolean;
  #L32b320.  v0:= v2.`com.bumptech.glide.load.engine.o0.c` @type ^`boolean` @kind boolean;
  #L32b324.  if v0 == 0 then goto L32b332;
  #L32b328.  v0:= v2.`com.bumptech.glide.load.engine.o0.d` @type ^`com.bumptech.glide.load.engine.u0` @kind object;
  #L32b32c.  call `c`(v0) @signature `Lcom/bumptech/glide/load/engine/u0;.c:()V` @kind interface;
  #L32b332.  @monitorexit v2
  #L32b334.  return @kind void;
  #L32b336.  v0:= new `java.lang.IllegalStateException`;
  #L32b33a.  v1:= "Cannot recycle a resource that has already been recycled" @kind object;
  #L32b33e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32b344.  throw v0;
  #L32b346.  v0:= new `java.lang.IllegalStateException`;
  #L32b34a.  v1:= "Cannot recycle a resource while it is still acquired" @kind object;
  #L32b34e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32b354.  throw v0;
  #L32b356.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32b358.  @monitorexit v2
  #L32b35a.  throw v0;
  catch `java.lang.Throwable` @[L32b30a..L32b332] goto L32b356;
  catch `java.lang.Throwable` @[L32b336..L32b356] goto L32b356;
}
procedure `int` `d`(`com.bumptech.glide.load.engine.o0` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/o0;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32b168.  v0:= v1.`com.bumptech.glide.load.engine.o0.d` @type ^`com.bumptech.glide.load.engine.u0` @kind object;
  #L32b16c.  call temp:= `d`(v0) @signature `Lcom/bumptech/glide/load/engine/u0;.d:()I` @kind interface;
  #L32b172.  v0:= temp;
  #L32b174.  return v0;
}
procedure `java.lang.Class` `e`(`com.bumptech.glide.load.engine.o0` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/o0;.e:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32b188.  v0:= v1.`com.bumptech.glide.load.engine.o0.d` @type ^`com.bumptech.glide.load.engine.u0` @kind object;
  #L32b18c.  call temp:= `e`(v0) @signature `Lcom/bumptech/glide/load/engine/u0;.e:()Ljava/lang/Class;` @kind interface;
  #L32b192.  v0:= temp @kind object;
  #L32b194.  return v0 @kind object;
}
procedure `boolean` `f`(`com.bumptech.glide.load.engine.o0` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/o0;.f:()Z` @AccessFlag  {
    temp;
    v0;

  #L32b138.  v0:= v1.`com.bumptech.glide.load.engine.o0.b` @type ^`boolean` @kind boolean;
  #L32b13c.  return v0;
}
procedure `void` `g`(`com.bumptech.glide.load.engine.o0` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/o0;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L32b380.  v0:= v3.`com.bumptech.glide.load.engine.o0.e` @type ^`com.bumptech.glide.load.engine.n0` @kind object;
  #L32b384.  @monitorenter v0
  #L32b386.  @monitorenter v3
  #L32b388.  v1:= v3.`com.bumptech.glide.load.engine.o0.g` @type ^`int`;
  #L32b38c.  if v1 <= 0 then goto L32b3b0;
  #L32b390.  v1:= v1 + -1;
  #L32b394.  v3.`com.bumptech.glide.load.engine.o0.g` @type ^`int` := v1;
  #L32b398.  if v1 != 0 then goto L32b3aa;
  #L32b39c.  v1:= v3.`com.bumptech.glide.load.engine.o0.e` @type ^`com.bumptech.glide.load.engine.n0` @kind object;
  #L32b3a0.  v2:= v3.`com.bumptech.glide.load.engine.o0.f` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32b3a4.  call `d`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/engine/n0;.d:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/engine/o0;)V` @kind interface;
  #L32b3aa.  @monitorexit v3
  #L32b3ac.  @monitorexit v0
  #L32b3ae.  return @kind void;
  #L32b3b0.  v1:= new `java.lang.IllegalStateException`;
  #L32b3b4.  v2:= "Cannot release a recycled or not yet acquired resource" @kind object;
  #L32b3b8.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32b3be.  throw v1;
  #L32b3c0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32b3c2.  @monitorexit v3
  #L32b3c4.  throw v1;
  #L32b3c6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32b3c8.  @monitorexit v0
  #L32b3ca.  throw v1;
  catch `java.lang.Throwable` @[L32b386..L32b388] goto L32b3c6;
  catch `java.lang.Throwable` @[L32b388..L32b3ac] goto L32b3c0;
  catch `java.lang.Throwable` @[L32b3ac..L32b3ae] goto L32b3c6;
  catch `java.lang.Throwable` @[L32b3b0..L32b3c4] goto L32b3c0;
  catch `java.lang.Throwable` @[L32b3c4..L32b3ca] goto L32b3c6;
}
procedure `java.lang.Object` `get`(`com.bumptech.glide.load.engine.o0` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/o0;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32b1a8.  v0:= v1.`com.bumptech.glide.load.engine.o0.d` @type ^`com.bumptech.glide.load.engine.u0` @kind object;
  #L32b1ac.  call temp:= `get`(v0) @signature `Lcom/bumptech/glide/load/engine/u0;.get:()Ljava/lang/Object;` @kind interface;
  #L32b1b2.  v0:= temp @kind object;
  #L32b1b4.  return v0 @kind object;
}
procedure `void` `h`(`com.bumptech.glide.load.engine.o0` v0 @kind this, `com.bumptech.glide.load.c` v1 @kind object, `com.bumptech.glide.load.engine.n0` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/o0;.h:(Lcom/bumptech/glide/load/c;Lcom/bumptech/glide/load/engine/n0;)V` @AccessFlag  {
    temp;

  #L32b40c.  @monitorenter v0
  #L32b40e.  v0.`com.bumptech.glide.load.engine.o0.f` @type ^`com.bumptech.glide.load.c` := v1 @kind object;
  #L32b412.  v0.`com.bumptech.glide.load.engine.o0.e` @type ^`com.bumptech.glide.load.engine.n0` := v2 @kind object;
  #L32b416.  @monitorexit v0
  #L32b418.  return @kind void;
  #L32b41a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32b41c.  @monitorexit v0
  #L32b41e.  throw v1;
  catch `java.lang.Throwable` @[L32b40e..L32b416] goto L32b41a;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.o0` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/o0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32b1c8.  @monitorenter v2
  #L32b1ca.  v0:= new `java.lang.StringBuilder`;
  #L32b1ce.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32b1d4.  v1:= "EngineResource{isCacheable=" @kind object;
  #L32b1d8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b1de.  v1:= v2.`com.bumptech.glide.load.engine.o0.b` @type ^`boolean` @kind boolean;
  #L32b1e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b1e8.  v1:= ", listener=" @kind object;
  #L32b1ec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b1f2.  v1:= v2.`com.bumptech.glide.load.engine.o0.e` @type ^`com.bumptech.glide.load.engine.n0` @kind object;
  #L32b1f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b1fc.  v1:= ", key=" @kind object;
  #L32b200.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b206.  v1:= v2.`com.bumptech.glide.load.engine.o0.f` @type ^`com.bumptech.glide.load.c` @kind object;
  #L32b20a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b210.  v1:= ", acquired=" @kind object;
  #L32b214.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b21a.  v1:= v2.`com.bumptech.glide.load.engine.o0.g` @type ^`int`;
  #L32b21e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b224.  v1:= ", isRecycled=" @kind object;
  #L32b228.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b22e.  v1:= v2.`com.bumptech.glide.load.engine.o0.h` @type ^`boolean` @kind boolean;
  #L32b232.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b238.  v1:= ", resource=" @kind object;
  #L32b23c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b242.  v1:= v2.`com.bumptech.glide.load.engine.o0.d` @type ^`com.bumptech.glide.load.engine.u0` @kind object;
  #L32b246.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b24c.  v1:= 125I;
  #L32b250.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32b256.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32b25c.  v0:= temp @kind object;
  #L32b25e.  @monitorexit v2
  #L32b260.  return v0 @kind object;
  #L32b262.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32b264.  @monitorexit v2
  #L32b266.  throw v0;
  catch `java.lang.Throwable` @[L32b1ca..L32b25e] goto L32b262;
}
