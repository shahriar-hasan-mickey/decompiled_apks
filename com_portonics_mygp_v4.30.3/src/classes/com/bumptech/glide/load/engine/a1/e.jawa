record `com.bumptech.glide.load.engine.a1.e` @kind class @AccessFlag  {
  `java.util.Queue` `com.bumptech.glide.load.engine.a1.e.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a1.e` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/a1/e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L32f1d4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32f1da.  v0:= new `java.util.ArrayDeque`;
  #L32f1de.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L32f1e4.  v1.`com.bumptech.glide.load.engine.a1.e.a` @type ^`java.util.Queue` := v0 @kind object;
  #L32f1e8.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.a1.d` `a`(`com.bumptech.glide.load.engine.a1.e` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/a1/e;.a:()Lcom/bumptech/glide/load/engine/a1/d;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L32f180.  v0:= v2.`com.bumptech.glide.load.engine.a1.e.a` @type ^`java.util.Queue` @kind object;
  #L32f184.  @monitorenter v0
  #L32f186.  v1:= v2.`com.bumptech.glide.load.engine.a1.e.a` @type ^`java.util.Queue` @kind object;
  #L32f18a.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L32f190.  v1:= temp @kind object;
  #L32f192.  v1:= (`com.bumptech.glide.load.engine.a1.d`) v1 @kind object;
  #L32f196.  @monitorexit v0
  #L32f198.  if v1 != 0 then goto L32f1a6;
  #L32f19c.  v1:= new `com.bumptech.glide.load.engine.a1.d`;
  #L32f1a0.  call `<init>`(v1) @signature `Lcom/bumptech/glide/load/engine/a1/d;.<init>:()V` @kind direct;
  #L32f1a6.  return v1 @kind object;
  #L32f1a8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32f1aa.  @monitorexit v0
  #L32f1ac.  throw v1;
  catch `java.lang.Throwable` @[L32f186..L32f198] goto L32f1a8;
  catch `java.lang.Throwable` @[L32f1aa..L32f1ac] goto L32f1a8;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.a1.e` v3 @kind this, `com.bumptech.glide.load.engine.a1.d` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/a1/e;.b:(Lcom/bumptech/glide/load/engine/a1/d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L32f1fc.  v0:= v3.`com.bumptech.glide.load.engine.a1.e.a` @type ^`java.util.Queue` @kind object;
  #L32f200.  @monitorenter v0
  #L32f202.  v1:= v3.`com.bumptech.glide.load.engine.a1.e.a` @type ^`java.util.Queue` @kind object;
  #L32f206.  call temp:= `size`(v1) @signature `Ljava/util/Queue;.size:()I` @kind interface;
  #L32f20c.  v1:= temp;
  #L32f20e.  v2:= 10I;
  #L32f212.  if v1 >= v2 then goto L32f220;
  #L32f216.  v1:= v3.`com.bumptech.glide.load.engine.a1.e.a` @type ^`java.util.Queue` @kind object;
  #L32f21a.  call temp:= `offer`(v1, v4) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L32f220.  @monitorexit v0
  #L32f222.  return @kind void;
  #L32f224.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32f226.  @monitorexit v0
  #L32f228.  throw v4;
  catch `java.lang.Throwable` @[L32f202..L32f228] goto L32f224;
}
