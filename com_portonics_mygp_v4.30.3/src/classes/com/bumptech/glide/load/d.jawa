record `com.bumptech.glide.load.d` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.k` @kind interface {
  `java.util.Collection` `com.bumptech.glide.load.d.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.d` v1 @kind this, `com.bumptech.glide.load.k`[] v2 @kind object) @signature `Lcom/bumptech/glide/load/d;.<init>:([Lcom/bumptech/glide/load/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L325c48.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L325c4e.  v0:= length @variable v2;
  #L325c50.  if v0 == 0 then goto L325c62;
  #L325c54.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L325c5a.  v2:= temp @kind object;
  #L325c5c.  v1.`com.bumptech.glide.load.d.b` @type ^`java.util.Collection` := v2 @kind object;
  #L325c60.  return @kind void;
  #L325c62.  v2:= new `java.lang.IllegalArgumentException`;
  #L325c66.  v0:= "MultiTransformation must contain at least one Transformation" @kind object;
  #L325c6a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L325c70.  throw v2;
}
procedure `void` `a`(`com.bumptech.glide.load.d` v2 @kind this, `java.security.MessageDigest` v3 @kind object) @signature `Lcom/bumptech/glide/load/d;.a:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L325c84.  v0:= v2.`com.bumptech.glide.load.d.b` @type ^`java.util.Collection` @kind object;
  #L325c88.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L325c8e.  v0:= temp @kind object;
  #L325c90.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L325c96.  v1:= temp;
  #L325c98.  if v1 == 0 then goto L325cb0;
  #L325c9c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L325ca2.  v1:= temp @kind object;
  #L325ca4.  v1:= (`com.bumptech.glide.load.k`) v1 @kind object;
  #L325ca8.  call `a`(v1, v3) @signature `Lcom/bumptech/glide/load/c;.a:(Ljava/security/MessageDigest;)V` @kind interface;
  #L325cae.  goto L325c90;
  #L325cb0.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.u0` `b`(`com.bumptech.glide.load.d` v4 @kind this, `android.content.Context` v5 @kind object, `com.bumptech.glide.load.engine.u0` v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/bumptech/glide/load/d;.b:(Landroid/content/Context;Lcom/bumptech/glide/load/engine/u0;II)Lcom/bumptech/glide/load/engine/u0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L325bc0.  v0:= v4.`com.bumptech.glide.load.d.b` @type ^`java.util.Collection` @kind object;
  #L325bc4.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L325bca.  v0:= temp @kind object;
  #L325bcc.  v1:= v6 @kind object;
  #L325bce.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L325bd4.  v2:= temp;
  #L325bd6.  if v2 == 0 then goto L325c14;
  #L325bda.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L325be0.  v2:= temp @kind object;
  #L325be2.  v2:= (`com.bumptech.glide.load.k`) v2 @kind object;
  #L325be6.  call temp:= `b`(v2, v5, v1, v7, v8) @signature `Lcom/bumptech/glide/load/k;.b:(Landroid/content/Context;Lcom/bumptech/glide/load/engine/u0;II)Lcom/bumptech/glide/load/engine/u0;` @kind interface;
  #L325bec.  v2:= temp @kind object;
  #L325bee.  if v1 == 0 then goto L325c10;
  #L325bf2.  call temp:= `equals`(v1, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L325bf8.  v3:= temp;
  #L325bfa.  if v3 != 0 then goto L325c10;
  #L325bfe.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L325c04.  v3:= temp;
  #L325c06.  if v3 != 0 then goto L325c10;
  #L325c0a.  call `c`(v1) @signature `Lcom/bumptech/glide/load/engine/u0;.c:()V` @kind interface;
  #L325c10.  v1:= v2 @kind object;
  #L325c12.  goto L325bce;
  #L325c14.  return v1 @kind object;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L325b8c.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.d` @kind boolean;
  #L325b90.  if v0 == 0 then goto L325baa;
  #L325b94.  v2:= (`com.bumptech.glide.load.d`) v2 @kind object;
  #L325b98.  v0:= v1.`com.bumptech.glide.load.d.b` @type ^`java.util.Collection` @kind object;
  #L325b9c.  v2:= v2.`com.bumptech.glide.load.d.b` @type ^`java.util.Collection` @kind object;
  #L325ba0.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Collection;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L325ba6.  v2:= temp;
  #L325ba8.  return v2;
  #L325baa.  v2:= 0I;
  #L325bac.  return v2;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.d` v1 @kind this) @signature `Lcom/bumptech/glide/load/d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L325c28.  v0:= v1.`com.bumptech.glide.load.d.b` @type ^`java.util.Collection` @kind object;
  #L325c2c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Collection;.hashCode:()I` @kind interface;
  #L325c32.  v0:= temp;
  #L325c34.  return v0;
}
