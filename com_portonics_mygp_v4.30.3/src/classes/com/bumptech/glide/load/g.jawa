record `com.bumptech.glide.load.g` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `com.bumptech.glide.load.g.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.f` `com.bumptech.glide.load.g.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.bumptech.glide.load.g.d` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.bumptech.glide.load.g.e` @AccessFlag PRIVATE_VOLATILE;
}
global `com.bumptech.glide.load.f` `@@com.bumptech.glide.load.g.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L325ff4.  v0:= new `com.bumptech.glide.load.e`;
  #L325ff8.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/e;.<init>:()V` @kind direct;
  #L325ffe.  `@@com.bumptech.glide.load.g.a` @type ^`com.bumptech.glide.load.f` := v0 @kind object;
  #L326002.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.g` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Object` v2 @kind object, `com.bumptech.glide.load.f` v3 @kind object) @signature `Lcom/bumptech/glide/load/g;.<init>:(Ljava/lang/String;Ljava/lang/Object;Lcom/bumptech/glide/load/f;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L326014.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32601a.  call temp:= `b`(v1) @signature `Lcom/bumptech/glide/s/n;.b:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L326020.  v1:= temp @kind object;
  #L326022.  v0.`com.bumptech.glide.load.g.d` @type ^`java.lang.String` := v1 @kind object;
  #L326026.  v0.`com.bumptech.glide.load.g.b` @type ^`java.lang.Object` := v2 @kind object;
  #L32602a.  call temp:= `d`(v3) @signature `Lcom/bumptech/glide/s/n;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L326030.  v1:= temp @kind object;
  #L326032.  v1:= (`com.bumptech.glide.load.f`) v1 @kind object;
  #L326036.  v0.`com.bumptech.glide.load.g.c` @type ^`com.bumptech.glide.load.f` := v1 @kind object;
  #L32603a.  return @kind void;
}
procedure `com.bumptech.glide.load.g` `a`(`java.lang.String` v1 @kind object, `java.lang.Object` v2 @kind object, `com.bumptech.glide.load.f` v3 @kind object) @signature `Lcom/bumptech/glide/load/g;.a:(Ljava/lang/String;Ljava/lang/Object;Lcom/bumptech/glide/load/f;)Lcom/bumptech/glide/load/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L325d58.  v0:= new `com.bumptech.glide.load.g`;
  #L325d5c.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/load/g;.<init>:(Ljava/lang/String;Ljava/lang/Object;Lcom/bumptech/glide/load/f;)V` @kind direct;
  #L325d62.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.f` `b`() @signature `Lcom/bumptech/glide/load/g;.b:()Lcom/bumptech/glide/load/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L325dc0.  v0:= `@@com.bumptech.glide.load.g.a` @type ^`com.bumptech.glide.load.f` @kind object;
  #L325dc4.  return v0 @kind object;
}
procedure `byte`[] `d`(`com.bumptech.glide.load.g` v2 @kind this) @signature `Lcom/bumptech/glide/load/g;.d:()[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L325d24.  v0:= v2.`com.bumptech.glide.load.g.e` @type ^`byte`[] @kind object;
  #L325d28.  if v0 != 0 then goto L325d40;
  #L325d2c.  v0:= v2.`com.bumptech.glide.load.g.d` @type ^`java.lang.String` @kind object;
  #L325d30.  v1:= `@@com.bumptech.glide.load.c.a` @type ^`java.nio.charset.Charset` @kind object;
  #L325d34.  call temp:= `getBytes`(v0, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L325d3a.  v0:= temp @kind object;
  #L325d3c.  v2.`com.bumptech.glide.load.g.e` @type ^`byte`[] := v0 @kind object;
  #L325d40.  v0:= v2.`com.bumptech.glide.load.g.e` @type ^`byte`[] @kind object;
  #L325d44.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.g` `e`(`java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/g;.e:(Ljava/lang/String;)Lcom/bumptech/glide/load/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L325d74.  v0:= new `com.bumptech.glide.load.g`;
  #L325d78.  call temp:= `b`() @signature `Lcom/bumptech/glide/load/g;.b:()Lcom/bumptech/glide/load/f;` @kind static;
  #L325d7e.  v1:= temp @kind object;
  #L325d80.  v2:= 0I;
  #L325d82.  call `<init>`(v0, v3, v2, v1) @signature `Lcom/bumptech/glide/load/g;.<init>:(Ljava/lang/String;Ljava/lang/Object;Lcom/bumptech/glide/load/f;)V` @kind direct;
  #L325d88.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.g` `f`(`java.lang.String` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/bumptech/glide/load/g;.f:(Ljava/lang/String;Ljava/lang/Object;)Lcom/bumptech/glide/load/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L325d9c.  v0:= new `com.bumptech.glide.load.g`;
  #L325da0.  call temp:= `b`() @signature `Lcom/bumptech/glide/load/g;.b:()Lcom/bumptech/glide/load/f;` @kind static;
  #L325da6.  v1:= temp @kind object;
  #L325da8.  call `<init>`(v0, v2, v3, v1) @signature `Lcom/bumptech/glide/load/g;.<init>:(Ljava/lang/String;Ljava/lang/Object;Lcom/bumptech/glide/load/f;)V` @kind direct;
  #L325dae.  return v0 @kind object;
}
procedure `java.lang.Object` `c`(`com.bumptech.glide.load.g` v1 @kind this) @signature `Lcom/bumptech/glide/load/g;.c:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L325df8.  v0:= v1.`com.bumptech.glide.load.g.b` @type ^`java.lang.Object` @kind object;
  #L325dfc.  return v0 @kind object;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/g;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L325cf0.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.g` @kind boolean;
  #L325cf4.  if v0 == 0 then goto L325d0e;
  #L325cf8.  v2:= (`com.bumptech.glide.load.g`) v2 @kind object;
  #L325cfc.  v0:= v1.`com.bumptech.glide.load.g.d` @type ^`java.lang.String` @kind object;
  #L325d00.  v2:= v2.`com.bumptech.glide.load.g.d` @type ^`java.lang.String` @kind object;
  #L325d04.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L325d0a.  v2:= temp;
  #L325d0c.  return v2;
  #L325d0e.  v2:= 0I;
  #L325d10.  return v2;
}
procedure `void` `g`(`com.bumptech.glide.load.g` v2 @kind this, `java.lang.Object` v3 @kind object, `java.security.MessageDigest` v4 @kind object) @signature `Lcom/bumptech/glide/load/g;.g:(Ljava/lang/Object;Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32604c.  v0:= v2.`com.bumptech.glide.load.g.c` @type ^`com.bumptech.glide.load.f` @kind object;
  #L326050.  call temp:= `d`(v2) @signature `Lcom/bumptech/glide/load/g;.d:()[B` @kind direct;
  #L326056.  v1:= temp @kind object;
  #L326058.  call `a`(v0, v1, v3, v4) @signature `Lcom/bumptech/glide/load/f;.a:([BLjava/lang/Object;Ljava/security/MessageDigest;)V` @kind interface;
  #L32605e.  return @kind void;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.g` v1 @kind this) @signature `Lcom/bumptech/glide/load/g;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L325dd8.  v0:= v1.`com.bumptech.glide.load.g.d` @type ^`java.lang.String` @kind object;
  #L325ddc.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L325de2.  v0:= temp;
  #L325de4.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.g` v2 @kind this) @signature `Lcom/bumptech/glide/load/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L325e10.  v0:= new `java.lang.StringBuilder`;
  #L325e14.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L325e1a.  v1:= "Option{key='" @kind object;
  #L325e1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325e24.  v1:= v2.`com.bumptech.glide.load.g.d` @type ^`java.lang.String` @kind object;
  #L325e28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L325e2e.  v1:= 39I;
  #L325e32.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L325e38.  v1:= 125I;
  #L325e3c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L325e42.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L325e48.  v0:= temp @kind object;
  #L325e4a.  return v0 @kind object;
}
