record `com.bumptech.glide.load.m.n0` @kind class @AccessFlag FINAL {
  `int` `com.bumptech.glide.load.m.n0.b` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.m.n0.c` @AccessFlag PRIVATE;
  `java.lang.Object` `com.bumptech.glide.load.m.n0.d` @AccessFlag PRIVATE;
}
global `java.util.Queue` `@@com.bumptech.glide.load.m.n0.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/m/n0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L331dbc.  v0:= 0I;
  #L331dbe.  call temp:= `f`(v0) @signature `Lcom/bumptech/glide/s/p;.f:(I)Ljava/util/Queue;` @kind static;
  #L331dc4.  v0:= temp @kind object;
  #L331dc6.  `@@com.bumptech.glide.load.m.n0.a` @type ^`java.util.Queue` := v0 @kind object;
  #L331dca.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.m.n0` v0 @kind this) @signature `Lcom/bumptech/glide/load/m/n0;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L331ddc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L331de2.  return @kind void;
}
procedure `com.bumptech.glide.load.m.n0` `a`(`java.lang.Object` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/load/m/n0;.a:(Ljava/lang/Object;II)Lcom/bumptech/glide/load/m/n0;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L331d34.  v0:= `@@com.bumptech.glide.load.m.n0.a` @type ^`java.util.Queue` @kind object;
  #L331d38.  @monitorenter v0
  #L331d3a.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L331d40.  v1:= temp @kind object;
  #L331d42.  v1:= (`com.bumptech.glide.load.m.n0`) v1 @kind object;
  #L331d46.  @monitorexit v0
  #L331d48.  if v1 != 0 then goto L331d56;
  #L331d4c.  v1:= new `com.bumptech.glide.load.m.n0`;
  #L331d50.  call `<init>`(v1) @signature `Lcom/bumptech/glide/load/m/n0;.<init>:()V` @kind direct;
  #L331d56.  call `b`(v1, v2, v3, v4) @signature `Lcom/bumptech/glide/load/m/n0;.b:(Ljava/lang/Object;II)V` @kind direct;
  #L331d5c.  return v1 @kind object;
  #L331d5e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L331d60.  @monitorexit v0
  #L331d62.  throw v2;
  catch `java.lang.Throwable` @[L331d3a..L331d48] goto L331d5e;
  catch `java.lang.Throwable` @[L331d60..L331d62] goto L331d5e;
}
procedure `void` `b`(`com.bumptech.glide.load.m.n0` v0 @kind this, `java.lang.Object` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/bumptech/glide/load/m/n0;.b:(Ljava/lang/Object;II)V` @AccessFlag PRIVATE {
    temp;

  #L331df4.  v0.`com.bumptech.glide.load.m.n0.d` @type ^`java.lang.Object` := v1 @kind object;
  #L331df8.  v0.`com.bumptech.glide.load.m.n0.c` @type ^`int` := v2;
  #L331dfc.  v0.`com.bumptech.glide.load.m.n0.b` @type ^`int` := v3;
  #L331e00.  return @kind void;
}
procedure `void` `c`(`com.bumptech.glide.load.m.n0` v2 @kind this) @signature `Lcom/bumptech/glide/load/m/n0;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L331e14.  v0:= `@@com.bumptech.glide.load.m.n0.a` @type ^`java.util.Queue` @kind object;
  #L331e18.  @monitorenter v0
  #L331e1a.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L331e20.  @monitorexit v0
  #L331e22.  return @kind void;
  #L331e24.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L331e26.  @monitorexit v0
  #L331e28.  throw v1;
  catch `java.lang.Throwable` @[L331e1a..L331e28] goto L331e24;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.m.n0` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/m/n0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L331ce4.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.m.n0` @kind boolean;
  #L331ce8.  v1:= 0I;
  #L331cea.  if v0 == 0 then goto L331d20;
  #L331cee.  v4:= (`com.bumptech.glide.load.m.n0`) v4 @kind object;
  #L331cf2.  v0:= v3.`com.bumptech.glide.load.m.n0.c` @type ^`int`;
  #L331cf6.  v2:= v4.`com.bumptech.glide.load.m.n0.c` @type ^`int`;
  #L331cfa.  if v0 != v2 then goto L331d20;
  #L331cfe.  v0:= v3.`com.bumptech.glide.load.m.n0.b` @type ^`int`;
  #L331d02.  v2:= v4.`com.bumptech.glide.load.m.n0.b` @type ^`int`;
  #L331d06.  if v0 != v2 then goto L331d20;
  #L331d0a.  v0:= v3.`com.bumptech.glide.load.m.n0.d` @type ^`java.lang.Object` @kind object;
  #L331d0e.  v4:= v4.`com.bumptech.glide.load.m.n0.d` @type ^`java.lang.Object` @kind object;
  #L331d12.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L331d18.  v4:= temp;
  #L331d1a.  if v4 == 0 then goto L331d20;
  #L331d1e.  v1:= 1I;
  #L331d20.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.m.n0` v2 @kind this) @signature `Lcom/bumptech/glide/load/m/n0;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L331d88.  v0:= v2.`com.bumptech.glide.load.m.n0.b` @type ^`int`;
  #L331d8c.  v0:= v0 * 31;
  #L331d90.  v1:= v2.`com.bumptech.glide.load.m.n0.c` @type ^`int`;
  #L331d94.  v0:= v0 + v1 @kind int;
  #L331d96.  v0:= v0 * 31;
  #L331d9a.  v1:= v2.`com.bumptech.glide.load.m.n0.d` @type ^`java.lang.Object` @kind object;
  #L331d9e.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L331da4.  v1:= temp;
  #L331da6.  v0:= v0 + v1 @kind int;
  #L331da8.  return v0;
}
