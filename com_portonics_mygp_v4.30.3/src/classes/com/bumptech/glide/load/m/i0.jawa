record `com.bumptech.glide.load.m.i0` @kind class @AccessFlag PUBLIC_FINAL extends `com.bumptech.glide.load.m.e0` @kind interface {
  `java.util.Map` `com.bumptech.glide.load.m.i0.c` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.m.i0.d` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.m.i0` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lcom/bumptech/glide/load/m/i0;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L331a20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L331a26.  call temp:= `unmodifiableMap`(v1) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L331a2c.  v1:= temp @kind object;
  #L331a2e.  v0.`com.bumptech.glide.load.m.i0.c` @type ^`java.util.Map` := v1 @kind object;
  #L331a32.  return @kind void;
}
procedure `java.lang.String` `b`(`com.bumptech.glide.load.m.i0` v5 @kind this, `java.util.List` v6 @kind object) @signature `Lcom/bumptech/glide/load/m/i0;.b:(Ljava/util/List;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L331898.  v0:= new `java.lang.StringBuilder`;
  #L33189c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3318a2.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3318a8.  v1:= temp;
  #L3318aa.  v2:= 0I;
  #L3318ac.  if v2 >= v1 then goto L3318f6;
  #L3318b0.  call temp:= `get`(v6, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3318b6.  v3:= temp @kind object;
  #L3318b8.  v3:= (`com.bumptech.glide.load.m.f0`) v3 @kind object;
  #L3318bc.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/load/m/f0;.a:()Ljava/lang/String;` @kind interface;
  #L3318c2.  v3:= temp @kind object;
  #L3318c4.  call temp:= `isEmpty`(v3) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3318ca.  v4:= temp;
  #L3318cc.  if v4 != 0 then goto L3318f0;
  #L3318d0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3318d6.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3318dc.  v3:= temp;
  #L3318de.  v3:= v3 + -1;
  #L3318e2.  if v2 == v3 then goto L3318f0;
  #L3318e6.  v3:= 44I;
  #L3318ea.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3318f0.  v2:= v2 + 1;
  #L3318f4.  goto L3318ac;
  #L3318f6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3318fc.  v6:= temp @kind object;
  #L3318fe.  return v6 @kind object;
}
procedure `java.util.Map` `c`(`com.bumptech.glide.load.m.i0` v5 @kind this) @signature `Lcom/bumptech/glide/load/m/i0;.c:()Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L331954.  v0:= new `java.util.HashMap`;
  #L331958.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L33195e.  v1:= v5.`com.bumptech.glide.load.m.i0.c` @type ^`java.util.Map` @kind object;
  #L331962.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L331968.  v1:= temp @kind object;
  #L33196a.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L331970.  v1:= temp @kind object;
  #L331972.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L331978.  v2:= temp;
  #L33197a.  if v2 == 0 then goto L3319ba;
  #L33197e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L331984.  v2:= temp @kind object;
  #L331986.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L33198a.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L331990.  v3:= temp @kind object;
  #L331992.  v3:= (`java.util.List`) v3 @kind object;
  #L331996.  call temp:= `b`(v5, v3) @signature `Lcom/bumptech/glide/load/m/i0;.b:(Ljava/util/List;)Ljava/lang/String;` @kind direct;
  #L33199c.  v3:= temp @kind object;
  #L33199e.  call temp:= `isEmpty`(v3) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3319a4.  v4:= temp;
  #L3319a6.  if v4 != 0 then goto L331972;
  #L3319aa.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3319b0.  v2:= temp @kind object;
  #L3319b2.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3319b8.  goto L331972;
  #L3319ba.  return v0 @kind object;
}
procedure `java.util.Map` `a`(`com.bumptech.glide.load.m.i0` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/i0;.a:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3319cc.  v0:= v1.`com.bumptech.glide.load.m.i0.d` @type ^`java.util.Map` @kind object;
  #L3319d0.  if v0 != 0 then goto L3319fc;
  #L3319d4.  @monitorenter v1
  #L3319d6.  v0:= v1.`com.bumptech.glide.load.m.i0.d` @type ^`java.util.Map` @kind object;
  #L3319da.  if v0 != 0 then goto L3319f2;
  #L3319de.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/load/m/i0;.c:()Ljava/util/Map;` @kind direct;
  #L3319e4.  v0:= temp @kind object;
  #L3319e6.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L3319ec.  v0:= temp @kind object;
  #L3319ee.  v1.`com.bumptech.glide.load.m.i0.d` @type ^`java.util.Map` := v0 @kind object;
  #L3319f2.  @monitorexit v1
  #L3319f4.  goto L3319fc;
  #L3319f6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3319f8.  @monitorexit v1
  #L3319fa.  throw v0;
  #L3319fc.  v0:= v1.`com.bumptech.glide.load.m.i0.d` @type ^`java.util.Map` @kind object;
  #L331a00.  return v0 @kind object;
  catch `java.lang.Throwable` @[L3319d6..L3319fa] goto L3319f6;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.m.i0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/m/i0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L331844.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.m.i0` @kind boolean;
  #L331848.  if v0 == 0 then goto L331862;
  #L33184c.  v2:= (`com.bumptech.glide.load.m.i0`) v2 @kind object;
  #L331850.  v0:= v1.`com.bumptech.glide.load.m.i0.c` @type ^`java.util.Map` @kind object;
  #L331854.  v2:= v2.`com.bumptech.glide.load.m.i0.c` @type ^`java.util.Map` @kind object;
  #L331858.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L33185e.  v2:= temp;
  #L331860.  return v2;
  #L331862.  v2:= 0I;
  #L331864.  return v2;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.m.i0` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/i0;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L331878.  v0:= v1.`com.bumptech.glide.load.m.i0.c` @type ^`java.util.Map` @kind object;
  #L33187c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L331882.  v0:= temp;
  #L331884.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.m.i0` v2 @kind this) @signature `Lcom/bumptech/glide/load/m/i0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L331910.  v0:= new `java.lang.StringBuilder`;
  #L331914.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L33191a.  v1:= "LazyHeaders{headers=" @kind object;
  #L33191e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L331924.  v1:= v2.`com.bumptech.glide.load.m.i0.c` @type ^`java.util.Map` @kind object;
  #L331928.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33192e.  v1:= 125I;
  #L331932.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L331938.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L33193e.  v0:= temp @kind object;
  #L331940.  return v0 @kind object;
}
