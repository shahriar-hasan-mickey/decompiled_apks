record `com.bumptech.glide.load.m.e` @kind class @AccessFlag  extends `com.bumptech.glide.load.m.g` @kind interface {
  `com.bumptech.glide.load.m.f` `com.bumptech.glide.load.m.e.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.load.m.e` v0 @kind this, `com.bumptech.glide.load.m.f` v1 @kind object) @signature `Lcom/bumptech/glide/load/m/e;.<init>:(Lcom/bumptech/glide/load/m/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L330880.  v0.`com.bumptech.glide.load.m.e.a` @type ^`com.bumptech.glide.load.m.f` := v1 @kind object;
  #L330884.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33088a.  return @kind void;
}
procedure `java.lang.Class` `a`(`com.bumptech.glide.load.m.e` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/e;.a:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L330830.  v0:= constclass @type ^`java.nio.ByteBuffer` @kind object;
  #L330834.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`com.bumptech.glide.load.m.e` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/bumptech/glide/load/m/e;.b:([B)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L330848.  call temp:= `c`(v0, v1) @signature `Lcom/bumptech/glide/load/m/e;.c:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L33084e.  v1:= temp @kind object;
  #L330850.  return v1 @kind object;
}
procedure `java.nio.ByteBuffer` `c`(`com.bumptech.glide.load.m.e` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/bumptech/glide/load/m/e;.c:([B)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;

  #L330864.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L33086a.  v1:= temp @kind object;
  #L33086c.  return v1 @kind object;
}
