record `com.bumptech.glide.load.m.i` @kind class @AccessFlag  extends `com.bumptech.glide.load.m.g` @kind interface {
  `com.bumptech.glide.load.m.j` `com.bumptech.glide.load.m.i.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.load.m.i` v0 @kind this, `com.bumptech.glide.load.m.j` v1 @kind object) @signature `Lcom/bumptech/glide/load/m/i;.<init>:(Lcom/bumptech/glide/load/m/j;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3309d4.  v0.`com.bumptech.glide.load.m.i.a` @type ^`com.bumptech.glide.load.m.j` := v1 @kind object;
  #L3309d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3309de.  return @kind void;
}
procedure `java.lang.Class` `a`(`com.bumptech.glide.load.m.i` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/i;.a:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3309a0.  v0:= constclass @type ^`java.io.InputStream` @kind object;
  #L3309a4.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`com.bumptech.glide.load.m.i` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/bumptech/glide/load/m/i;.b:([B)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3309b8.  call temp:= `c`(v0, v1) @signature `Lcom/bumptech/glide/load/m/i;.c:([B)Ljava/io/InputStream;` @kind virtual;
  #L3309be.  v1:= temp @kind object;
  #L3309c0.  return v1 @kind object;
}
procedure `java.io.InputStream` `c`(`com.bumptech.glide.load.m.i` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/load/m/i;.c:([B)Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L330984.  v0:= new `java.io.ByteArrayInputStream`;
  #L330988.  call `<init>`(v0, v2) @signature `Ljava/io/ByteArrayInputStream;.<init>:([B)V` @kind direct;
  #L33098e.  return v0 @kind object;
}
