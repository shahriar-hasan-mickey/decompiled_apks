record `com.bumptech.glide.load.m.l1` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.m.r0` @kind interface {
}
global `com.bumptech.glide.load.m.l1` `@@com.bumptech.glide.load.m.l1.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/m/l1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L332ff4.  v0:= new `com.bumptech.glide.load.m.l1`;
  #L332ff8.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/m/l1;.<init>:()V` @kind direct;
  #L332ffe.  `@@com.bumptech.glide.load.m.l1.a` @type ^`com.bumptech.glide.load.m.l1` := v0 @kind object;
  #L333002.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.m.l1` v0 @kind this) @signature `Lcom/bumptech/glide/load/m/l1;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L333014.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33301a.  return @kind void;
}
procedure `com.bumptech.glide.load.m.l1` `a`() @signature `Lcom/bumptech/glide/load/m/l1;.a:()Lcom/bumptech/glide/load/m/l1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L332fdc.  v0:= `@@com.bumptech.glide.load.m.l1.a` @type ^`com.bumptech.glide.load.m.l1` @kind object;
  #L332fe0.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.m.q0` `b`(`com.bumptech.glide.load.m.l1` v0 @kind this, `com.bumptech.glide.load.m.a1` v1 @kind object) @signature `Lcom/bumptech/glide/load/m/l1;.b:(Lcom/bumptech/glide/load/m/a1;)Lcom/bumptech/glide/load/m/q0;` @AccessFlag PUBLIC {
    temp;

  #L332fc0.  call temp:= `c`() @signature `Lcom/bumptech/glide/load/m/n1;.c:()Lcom/bumptech/glide/load/m/n1;` @kind static;
  #L332fc6.  v1:= temp @kind object;
  #L332fc8.  return v1 @kind object;
}
