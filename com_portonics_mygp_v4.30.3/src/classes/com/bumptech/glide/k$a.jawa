record `com.bumptech.glide.k$a` @kind class @AccessFlag  extends `com.bumptech.glide.o.c` @kind interface {
  `com.bumptech.glide.o.s` `com.bumptech.glide.k$a.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.k` `com.bumptech.glide.k$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.k$a` v0 @kind this, `com.bumptech.glide.k` v1 @kind object, `com.bumptech.glide.o.s` v2 @kind object) @signature `Lcom/bumptech/glide/k$a;.<init>:(Lcom/bumptech/glide/k;Lcom/bumptech/glide/o/s;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L321c68.  v0.`com.bumptech.glide.k$a.b` @type ^`com.bumptech.glide.k` := v1 @kind object;
  #L321c6c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L321c72.  v0.`com.bumptech.glide.k$a.a` @type ^`com.bumptech.glide.o.s` := v2 @kind object;
  #L321c76.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.k$a` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/k$a;.a:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L321c88.  if v2 == 0 then goto L321ca6;
  #L321c8c.  v2:= v1.`com.bumptech.glide.k$a.b` @type ^`com.bumptech.glide.k` @kind object;
  #L321c90.  @monitorenter v2
  #L321c92.  v0:= v1.`com.bumptech.glide.k$a.a` @type ^`com.bumptech.glide.o.s` @kind object;
  #L321c96.  call `e`(v0) @signature `Lcom/bumptech/glide/o/s;.e:()V` @kind virtual;
  #L321c9c.  @monitorexit v2
  #L321c9e.  goto L321ca6;
  #L321ca0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L321ca2.  @monitorexit v2
  #L321ca4.  throw v0;
  #L321ca6.  return @kind void;
  catch `java.lang.Throwable` @[L321c92..L321ca4] goto L321ca0;
}
