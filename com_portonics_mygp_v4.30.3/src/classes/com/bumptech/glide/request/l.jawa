record `com.bumptech.glide.request.l` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.request.e` @kind interface, `com.bumptech.glide.request.d` @kind interface {
  `com.bumptech.glide.request.e` `com.bumptech.glide.request.l.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.request.d` `com.bumptech.glide.request.l.c` @AccessFlag PRIVATE;
  `com.bumptech.glide.request.d` `com.bumptech.glide.request.l.d` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.request.l.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.request.l` v0 @kind this, `com.bumptech.glide.request.e` v1 @kind object) @signature `Lcom/bumptech/glide/request/l;.<init>:(Lcom/bumptech/glide/request/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L33fef4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33fefa.  v0.`com.bumptech.glide.request.l.b` @type ^`com.bumptech.glide.request.e` := v1 @kind object;
  #L33fefe.  return @kind void;
}
procedure `boolean` `n`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.n:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L33fe38.  v0:= v1.`com.bumptech.glide.request.l.b` @type ^`com.bumptech.glide.request.e` @kind object;
  #L33fe3c.  if v0 == 0 then goto L33fe52;
  #L33fe40.  call temp:= `m`(v0, v1) @signature `Lcom/bumptech/glide/request/e;.m:(Lcom/bumptech/glide/request/d;)Z` @kind interface;
  #L33fe46.  v0:= temp;
  #L33fe48.  if v0 == 0 then goto L33fe4e;
  #L33fe4c.  goto L33fe52;
  #L33fe4e.  v0:= 0I;
  #L33fe50.  goto L33fe54;
  #L33fe52.  v0:= 1I;
  #L33fe54.  return v0;
}
procedure `boolean` `o`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.o:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L33fe68.  v0:= v1.`com.bumptech.glide.request.l.b` @type ^`com.bumptech.glide.request.e` @kind object;
  #L33fe6c.  if v0 == 0 then goto L33fe82;
  #L33fe70.  call temp:= `f`(v0, v1) @signature `Lcom/bumptech/glide/request/e;.f:(Lcom/bumptech/glide/request/d;)Z` @kind interface;
  #L33fe76.  v0:= temp;
  #L33fe78.  if v0 == 0 then goto L33fe7e;
  #L33fe7c.  goto L33fe82;
  #L33fe7e.  v0:= 0I;
  #L33fe80.  goto L33fe84;
  #L33fe82.  v0:= 1I;
  #L33fe84.  return v0;
}
procedure `boolean` `p`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.p:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L33fe98.  v0:= v1.`com.bumptech.glide.request.l.b` @type ^`com.bumptech.glide.request.e` @kind object;
  #L33fe9c.  if v0 == 0 then goto L33feb2;
  #L33fea0.  call temp:= `i`(v0, v1) @signature `Lcom/bumptech/glide/request/e;.i:(Lcom/bumptech/glide/request/d;)Z` @kind interface;
  #L33fea6.  v0:= temp;
  #L33fea8.  if v0 == 0 then goto L33feae;
  #L33feac.  goto L33feb2;
  #L33feae.  v0:= 0I;
  #L33feb0.  goto L33feb4;
  #L33feb2.  v0:= 1I;
  #L33feb4.  return v0;
}
procedure `boolean` `q`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.q:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L33fec8.  v0:= v1.`com.bumptech.glide.request.l.b` @type ^`com.bumptech.glide.request.e` @kind object;
  #L33fecc.  if v0 == 0 then goto L33fee0;
  #L33fed0.  call temp:= `b`(v0) @signature `Lcom/bumptech/glide/request/e;.b:()Z` @kind interface;
  #L33fed6.  v0:= temp;
  #L33fed8.  if v0 == 0 then goto L33fee0;
  #L33fedc.  v0:= 1I;
  #L33fede.  goto L33fee2;
  #L33fee0.  v0:= 0I;
  #L33fee2.  return v0;
}
procedure `void` `a`(`com.bumptech.glide.request.l` v1 @kind this, `com.bumptech.glide.request.d` v2 @kind object) @signature `Lcom/bumptech/glide/request/l;.a:(Lcom/bumptech/glide/request/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33ffa0.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33ffa4.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L33ffaa.  v2:= temp;
  #L33ffac.  if v2 != 0 then goto L33ffb2;
  #L33ffb0.  return @kind void;
  #L33ffb2.  v2:= v1.`com.bumptech.glide.request.l.b` @type ^`com.bumptech.glide.request.e` @kind object;
  #L33ffb6.  if v2 == 0 then goto L33ffc0;
  #L33ffba.  call `a`(v2, v1) @signature `Lcom/bumptech/glide/request/e;.a:(Lcom/bumptech/glide/request/d;)V` @kind interface;
  #L33ffc0.  return @kind void;
}
procedure `boolean` `b`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33fcc8.  call temp:= `q`(v1) @signature `Lcom/bumptech/glide/request/l;.q:()Z` @kind direct;
  #L33fcce.  v0:= temp;
  #L33fcd0.  if v0 != 0 then goto L33fce6;
  #L33fcd4.  call temp:= `e`(v1) @signature `Lcom/bumptech/glide/request/l;.e:()Z` @kind virtual;
  #L33fcda.  v0:= temp;
  #L33fcdc.  if v0 == 0 then goto L33fce2;
  #L33fce0.  goto L33fce6;
  #L33fce2.  v0:= 0I;
  #L33fce4.  goto L33fce8;
  #L33fce6.  v0:= 1I;
  #L33fce8.  return v0;
}
procedure `void` `c`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L340020.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L340024.  call `c`(v0) @signature `Lcom/bumptech/glide/request/d;.c:()V` @kind interface;
  #L34002a.  v0:= v1.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` @kind object;
  #L34002e.  call `c`(v0) @signature `Lcom/bumptech/glide/request/d;.c:()V` @kind interface;
  #L340034.  return @kind void;
}
procedure `void` `clear`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33ff74.  v0:= 0I;
  #L33ff76.  v1.`com.bumptech.glide.request.l.e` @type ^`boolean` := v0 @kind boolean;
  #L33ff7a.  v0:= v1.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33ff7e.  call `clear`(v0) @signature `Lcom/bumptech/glide/request/d;.clear:()V` @kind interface;
  #L33ff84.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33ff88.  call `clear`(v0) @signature `Lcom/bumptech/glide/request/d;.clear:()V` @kind interface;
  #L33ff8e.  return @kind void;
}
procedure `boolean` `d`(`com.bumptech.glide.request.l` v3 @kind this, `com.bumptech.glide.request.d` v4 @kind object) @signature `Lcom/bumptech/glide/request/l;.d:(Lcom/bumptech/glide/request/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L33fd58.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.request.l` @kind boolean;
  #L33fd5c.  v1:= 0I;
  #L33fd5e.  if v0 == 0 then goto L33fda8;
  #L33fd62.  v4:= (`com.bumptech.glide.request.l`) v4 @kind object;
  #L33fd66.  v0:= v3.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fd6a.  if v0 != 0 then goto L33fd78;
  #L33fd6e.  v0:= v4.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fd72.  if v0 != 0 then goto L33fda8;
  #L33fd76.  goto L33fd88;
  #L33fd78.  v2:= v4.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fd7c.  call temp:= `d`(v0, v2) @signature `Lcom/bumptech/glide/request/d;.d:(Lcom/bumptech/glide/request/d;)Z` @kind interface;
  #L33fd82.  v0:= temp;
  #L33fd84.  if v0 == 0 then goto L33fda8;
  #L33fd88.  v0:= v3.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fd8c.  v4:= v4.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fd90.  if v0 != 0 then goto L33fd9a;
  #L33fd94.  if v4 != 0 then goto L33fda8;
  #L33fd98.  goto L33fda6;
  #L33fd9a.  call temp:= `d`(v0, v4) @signature `Lcom/bumptech/glide/request/d;.d:(Lcom/bumptech/glide/request/d;)Z` @kind interface;
  #L33fda0.  v4:= temp;
  #L33fda2.  if v4 == 0 then goto L33fda8;
  #L33fda6.  v1:= 1I;
  #L33fda8.  return v1;
}
procedure `boolean` `e`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33fddc.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fde0.  call temp:= `e`(v0) @signature `Lcom/bumptech/glide/request/d;.e:()Z` @kind interface;
  #L33fde6.  v0:= temp;
  #L33fde8.  if v0 != 0 then goto L33fe02;
  #L33fdec.  v0:= v1.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fdf0.  call temp:= `e`(v0) @signature `Lcom/bumptech/glide/request/d;.e:()Z` @kind interface;
  #L33fdf6.  v0:= temp;
  #L33fdf8.  if v0 == 0 then goto L33fdfe;
  #L33fdfc.  goto L33fe02;
  #L33fdfe.  v0:= 0I;
  #L33fe00.  goto L33fe04;
  #L33fe02.  v0:= 1I;
  #L33fe04.  return v0;
}
procedure `boolean` `f`(`com.bumptech.glide.request.l` v1 @kind this, `com.bumptech.glide.request.d` v2 @kind object) @signature `Lcom/bumptech/glide/request/l;.f:(Lcom/bumptech/glide/request/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33fc44.  call temp:= `o`(v1) @signature `Lcom/bumptech/glide/request/l;.o:()Z` @kind direct;
  #L33fc4a.  v0:= temp;
  #L33fc4c.  if v0 == 0 then goto L33fc70;
  #L33fc50.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fc54.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L33fc5a.  v2:= temp;
  #L33fc5c.  if v2 == 0 then goto L33fc70;
  #L33fc60.  call temp:= `b`(v1) @signature `Lcom/bumptech/glide/request/l;.b:()Z` @kind virtual;
  #L33fc66.  v2:= temp;
  #L33fc68.  if v2 != 0 then goto L33fc70;
  #L33fc6c.  v2:= 1I;
  #L33fc6e.  goto L33fc72;
  #L33fc70.  v2:= 0I;
  #L33fc72.  return v2;
}
procedure `boolean` `g`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33fdbc.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fdc0.  call temp:= `g`(v0) @signature `Lcom/bumptech/glide/request/d;.g:()Z` @kind interface;
  #L33fdc6.  v0:= temp;
  #L33fdc8.  return v0;
}
procedure `boolean` `h`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33fcfc.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fd00.  call temp:= `h`(v0) @signature `Lcom/bumptech/glide/request/d;.h:()Z` @kind interface;
  #L33fd06.  v0:= temp;
  #L33fd08.  return v0;
}
procedure `boolean` `i`(`com.bumptech.glide.request.l` v1 @kind this, `com.bumptech.glide.request.d` v2 @kind object) @signature `Lcom/bumptech/glide/request/l;.i:(Lcom/bumptech/glide/request/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33fc84.  call temp:= `p`(v1) @signature `Lcom/bumptech/glide/request/l;.p:()Z` @kind direct;
  #L33fc8a.  v0:= temp;
  #L33fc8c.  if v0 == 0 then goto L33fcb4;
  #L33fc90.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fc94.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L33fc9a.  v2:= temp;
  #L33fc9c.  if v2 != 0 then goto L33fcb0;
  #L33fca0.  v2:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fca4.  call temp:= `e`(v2) @signature `Lcom/bumptech/glide/request/d;.e:()Z` @kind interface;
  #L33fcaa.  v2:= temp;
  #L33fcac.  if v2 != 0 then goto L33fcb4;
  #L33fcb0.  v2:= 1I;
  #L33fcb2.  goto L33fcb6;
  #L33fcb4.  v2:= 0I;
  #L33fcb6.  return v2;
}
procedure `boolean` `isRunning`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.isRunning:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33fe18.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fe1c.  call temp:= `isRunning`(v0) @signature `Lcom/bumptech/glide/request/d;.isRunning:()Z` @kind interface;
  #L33fe22.  v0:= temp;
  #L33fe24.  return v0;
}
procedure `void` `j`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33ff10.  v0:= 1I;
  #L33ff12.  v1.`com.bumptech.glide.request.l.e` @type ^`boolean` := v0 @kind boolean;
  #L33ff16.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33ff1a.  call temp:= `l`(v0) @signature `Lcom/bumptech/glide/request/d;.l:()Z` @kind interface;
  #L33ff20.  v0:= temp;
  #L33ff22.  if v0 != 0 then goto L33ff40;
  #L33ff26.  v0:= v1.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33ff2a.  call temp:= `isRunning`(v0) @signature `Lcom/bumptech/glide/request/d;.isRunning:()Z` @kind interface;
  #L33ff30.  v0:= temp;
  #L33ff32.  if v0 != 0 then goto L33ff40;
  #L33ff36.  v0:= v1.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33ff3a.  call `j`(v0) @signature `Lcom/bumptech/glide/request/d;.j:()V` @kind interface;
  #L33ff40.  v0:= v1.`com.bumptech.glide.request.l.e` @type ^`boolean` @kind boolean;
  #L33ff44.  if v0 == 0 then goto L33ff62;
  #L33ff48.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33ff4c.  call temp:= `isRunning`(v0) @signature `Lcom/bumptech/glide/request/d;.isRunning:()Z` @kind interface;
  #L33ff52.  v0:= temp;
  #L33ff54.  if v0 != 0 then goto L33ff62;
  #L33ff58.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33ff5c.  call `j`(v0) @signature `Lcom/bumptech/glide/request/d;.j:()V` @kind interface;
  #L33ff62.  return @kind void;
}
procedure `void` `k`(`com.bumptech.glide.request.l` v1 @kind this, `com.bumptech.glide.request.d` v2 @kind object) @signature `Lcom/bumptech/glide/request/l;.k:(Lcom/bumptech/glide/request/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33ffd4.  v0:= v1.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33ffd8.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L33ffde.  v2:= temp;
  #L33ffe0.  if v2 == 0 then goto L33ffe6;
  #L33ffe4.  return @kind void;
  #L33ffe6.  v2:= v1.`com.bumptech.glide.request.l.b` @type ^`com.bumptech.glide.request.e` @kind object;
  #L33ffea.  if v2 == 0 then goto L33fff4;
  #L33ffee.  call `k`(v2, v1) @signature `Lcom/bumptech/glide/request/e;.k:(Lcom/bumptech/glide/request/d;)V` @kind interface;
  #L33fff4.  v2:= v1.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fff8.  call temp:= `l`(v2) @signature `Lcom/bumptech/glide/request/d;.l:()Z` @kind interface;
  #L33fffe.  v2:= temp;
  #L340000.  if v2 != 0 then goto L34000e;
  #L340004.  v2:= v1.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` @kind object;
  #L340008.  call `clear`(v2) @signature `Lcom/bumptech/glide/request/d;.clear:()V` @kind interface;
  #L34000e.  return @kind void;
}
procedure `boolean` `l`(`com.bumptech.glide.request.l` v1 @kind this) @signature `Lcom/bumptech/glide/request/l;.l:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33fd1c.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fd20.  call temp:= `l`(v0) @signature `Lcom/bumptech/glide/request/d;.l:()Z` @kind interface;
  #L33fd26.  v0:= temp;
  #L33fd28.  if v0 != 0 then goto L33fd42;
  #L33fd2c.  v0:= v1.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fd30.  call temp:= `l`(v0) @signature `Lcom/bumptech/glide/request/d;.l:()Z` @kind interface;
  #L33fd36.  v0:= temp;
  #L33fd38.  if v0 == 0 then goto L33fd3e;
  #L33fd3c.  goto L33fd42;
  #L33fd3e.  v0:= 0I;
  #L33fd40.  goto L33fd44;
  #L33fd42.  v0:= 1I;
  #L33fd44.  return v0;
}
procedure `boolean` `m`(`com.bumptech.glide.request.l` v1 @kind this, `com.bumptech.glide.request.d` v2 @kind object) @signature `Lcom/bumptech/glide/request/l;.m:(Lcom/bumptech/glide/request/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33fc10.  call temp:= `n`(v1) @signature `Lcom/bumptech/glide/request/l;.n:()Z` @kind direct;
  #L33fc16.  v0:= temp;
  #L33fc18.  if v0 == 0 then goto L33fc30;
  #L33fc1c.  v0:= v1.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` @kind object;
  #L33fc20.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L33fc26.  v2:= temp;
  #L33fc28.  if v2 == 0 then goto L33fc30;
  #L33fc2c.  v2:= 1I;
  #L33fc2e.  goto L33fc32;
  #L33fc30.  v2:= 0I;
  #L33fc32.  return v2;
}
procedure `void` `r`(`com.bumptech.glide.request.l` v0 @kind this, `com.bumptech.glide.request.d` v1 @kind object, `com.bumptech.glide.request.d` v2 @kind object) @signature `Lcom/bumptech/glide/request/l;.r:(Lcom/bumptech/glide/request/d;Lcom/bumptech/glide/request/d;)V` @AccessFlag PUBLIC {
    temp;

  #L340048.  v0.`com.bumptech.glide.request.l.c` @type ^`com.bumptech.glide.request.d` := v1 @kind object;
  #L34004c.  v0.`com.bumptech.glide.request.l.d` @type ^`com.bumptech.glide.request.d` := v2 @kind object;
  #L340050.  return @kind void;
}
