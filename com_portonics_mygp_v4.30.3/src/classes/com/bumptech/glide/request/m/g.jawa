record `com.bumptech.glide.request.m.g` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.bumptech.glide.request.m.a` @kind class {
  `int` `com.bumptech.glide.request.m.g.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.request.m.g.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.request.m.g` v1 @kind this) @signature `Lcom/bumptech/glide/request/m/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L340558.  v0:= -2147483648I;
  #L34055c.  call `<init>`(v1, v0, v0) @signature `Lcom/bumptech/glide/request/m/g;.<init>:(II)V` @kind direct;
  #L340562.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.request.m.g` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lcom/bumptech/glide/request/m/g;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L340574.  call `<init>`(v0) @signature `Lcom/bumptech/glide/request/m/a;.<init>:()V` @kind direct;
  #L34057a.  v0.`com.bumptech.glide.request.m.g.c` @type ^`int` := v1;
  #L34057e.  v0.`com.bumptech.glide.request.m.g.d` @type ^`int` := v2;
  #L340582.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.request.m.g` v0 @kind this, `com.bumptech.glide.request.m.h` v1 @kind object) @signature `Lcom/bumptech/glide/request/m/g;.b:(Lcom/bumptech/glide/request/m/h;)V` @AccessFlag PUBLIC {
    temp;

  #L340618.  return @kind void;
}
procedure `void` `n`(`com.bumptech.glide.request.m.g` v2 @kind this, `com.bumptech.glide.request.m.h` v3 @kind object) @signature `Lcom/bumptech/glide/request/m/g;.n:(Lcom/bumptech/glide/request/m/h;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L340594.  v0:= v2.`com.bumptech.glide.request.m.g.c` @type ^`int`;
  #L340598.  v1:= v2.`com.bumptech.glide.request.m.g.d` @type ^`int`;
  #L34059c.  call temp:= `t`(v0, v1) @signature `Lcom/bumptech/glide/s/p;.t:(II)Z` @kind static;
  #L3405a2.  v0:= temp;
  #L3405a4.  if v0 == 0 then goto L3405b8;
  #L3405a8.  v0:= v2.`com.bumptech.glide.request.m.g.c` @type ^`int`;
  #L3405ac.  v1:= v2.`com.bumptech.glide.request.m.g.d` @type ^`int`;
  #L3405b0.  call `f`(v3, v0, v1) @signature `Lcom/bumptech/glide/request/m/h;.f:(II)V` @kind interface;
  #L3405b6.  return @kind void;
  #L3405b8.  v3:= new `java.lang.IllegalArgumentException`;
  #L3405bc.  v0:= new `java.lang.StringBuilder`;
  #L3405c0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3405c6.  v1:= "Width and height must both be > 0 or Target#SIZE_ORIGINAL, but given width: " @kind object;
  #L3405ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3405d0.  v1:= v2.`com.bumptech.glide.request.m.g.c` @type ^`int`;
  #L3405d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3405da.  v1:= " and height: " @kind object;
  #L3405de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3405e4.  v1:= v2.`com.bumptech.glide.request.m.g.d` @type ^`int`;
  #L3405e8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3405ee.  v1:= ", either provide dimensions in the constructor or call override()" @kind object;
  #L3405f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3405f8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3405fe.  v0:= temp @kind object;
  #L340600.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L340606.  throw v3;
}
