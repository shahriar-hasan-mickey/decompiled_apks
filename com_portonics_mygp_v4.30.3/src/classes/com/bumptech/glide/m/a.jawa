record `com.bumptech.glide.m.a` @kind class @AccessFlag  extends `java.util.concurrent.Callable` @kind interface {
  `com.bumptech.glide.m.f` `com.bumptech.glide.m.a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.m.a` v0 @kind this, `com.bumptech.glide.m.f` v1 @kind object) @signature `Lcom/bumptech/glide/m/a;.<init>:(Lcom/bumptech/glide/m/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L32246c.  v0.`com.bumptech.glide.m.a.b` @type ^`com.bumptech.glide.m.f` := v1 @kind object;
  #L322470.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L322476.  return @kind void;
}
procedure `java.lang.Void` `a`(`com.bumptech.glide.m.a` v4 @kind this) @signature `Lcom/bumptech/glide/m/a;.a:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3223f8.  v0:= v4.`com.bumptech.glide.m.a.b` @type ^`com.bumptech.glide.m.f` @kind object;
  #L3223fc.  @monitorenter v0
  #L3223fe.  v1:= v4.`com.bumptech.glide.m.a.b` @type ^`com.bumptech.glide.m.f` @kind object;
  #L322402.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/m/f;.a:(Lcom/bumptech/glide/m/f;)Ljava/io/Writer;` @kind static;
  #L322408.  v1:= temp @kind object;
  #L32240a.  v2:= 0I;
  #L32240c.  if v1 != 0 then goto L322414;
  #L322410.  @monitorexit v0
  #L322412.  return v2 @kind object;
  #L322414.  v1:= v4.`com.bumptech.glide.m.a.b` @type ^`com.bumptech.glide.m.f` @kind object;
  #L322418.  call `d`(v1) @signature `Lcom/bumptech/glide/m/f;.d:(Lcom/bumptech/glide/m/f;)V` @kind static;
  #L32241e.  v1:= v4.`com.bumptech.glide.m.a.b` @type ^`com.bumptech.glide.m.f` @kind object;
  #L322422.  call temp:= `o`(v1) @signature `Lcom/bumptech/glide/m/f;.o:(Lcom/bumptech/glide/m/f;)Z` @kind static;
  #L322428.  v1:= temp;
  #L32242a.  if v1 == 0 then goto L322444;
  #L32242e.  v1:= v4.`com.bumptech.glide.m.a.b` @type ^`com.bumptech.glide.m.f` @kind object;
  #L322432.  call `s`(v1) @signature `Lcom/bumptech/glide/m/f;.s:(Lcom/bumptech/glide/m/f;)V` @kind static;
  #L322438.  v1:= v4.`com.bumptech.glide.m.a.b` @type ^`com.bumptech.glide.m.f` @kind object;
  #L32243c.  v3:= 0I;
  #L32243e.  call temp:= `v`(v1, v3) @signature `Lcom/bumptech/glide/m/f;.v:(Lcom/bumptech/glide/m/f;I)I` @kind static;
  #L322444.  @monitorexit v0
  #L322446.  return v2 @kind object;
  #L322448.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32244a.  @monitorexit v0
  #L32244c.  throw v1;
  catch `java.lang.Throwable` @[L3223fe..L32244c] goto L322448;
}
procedure `java.lang.Object` `call`(`com.bumptech.glide.m.a` v1 @kind this) @signature `Lcom/bumptech/glide/m/a;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3223dc.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/m/a;.a:()Ljava/lang/Void;` @kind virtual;
  #L3223e2.  v0:= temp @kind object;
  #L3223e4.  return v0 @kind object;
}
