record `com.bumptech.glide.m.b` @kind class @AccessFlag FINAL extends `java.util.concurrent.ThreadFactory` @kind interface {
}
procedure `void` `<init>`(`com.bumptech.glide.m.b` v0 @kind this) @signature `Lcom/bumptech/glide/m/b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3224c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3224ce.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.m.b` v0 @kind this, `com.bumptech.glide.m.a` v1 @kind object) @signature `Lcom/bumptech/glide/m/b;.<init>:(Lcom/bumptech/glide/m/a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3224e0.  call `<init>`(v0) @signature `Lcom/bumptech/glide/m/b;.<init>:()V` @kind direct;
  #L3224e6.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`com.bumptech.glide.m.b` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lcom/bumptech/glide/m/b;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L322488.  @monitorenter v2
  #L32248a.  v0:= new `java.lang.Thread`;
  #L32248e.  v1:= "glide-disk-lru-cache-thread" @kind object;
  #L322492.  call `<init>`(v0, v3, v1) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L322498.  v3:= 1I;
  #L32249a.  call `setPriority`(v0, v3) @signature `Ljava/lang/Thread;.setPriority:(I)V` @kind virtual;
  #L3224a0.  @monitorexit v2
  #L3224a2.  return v0 @kind object;
  #L3224a4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3224a6.  @monitorexit v2
  #L3224a8.  throw v3;
  catch `java.lang.Throwable` @[L32248a..L3224a0] goto L3224a4;
}
