record `com.bumptech.glide.m.c` @kind class @AccessFlag PUBLIC_FINAL {
  `com.bumptech.glide.m.d` `com.bumptech.glide.m.c.a` @AccessFlag PRIVATE_FINAL;
  `boolean`[] `com.bumptech.glide.m.c.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.m.c.c` @AccessFlag PRIVATE;
  `com.bumptech.glide.m.f` `com.bumptech.glide.m.c.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.m.c` v0 @kind this, `com.bumptech.glide.m.f` v1 @kind object, `com.bumptech.glide.m.d` v2 @kind object) @signature `Lcom/bumptech/glide/m/c;.<init>:(Lcom/bumptech/glide/m/f;Lcom/bumptech/glide/m/d;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3225c0.  v0.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.f` := v1 @kind object;
  #L3225c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3225ca.  v0.`com.bumptech.glide.m.c.a` @type ^`com.bumptech.glide.m.d` := v2 @kind object;
  #L3225ce.  call temp:= `e`(v2) @signature `Lcom/bumptech/glide/m/d;.e:(Lcom/bumptech/glide/m/d;)Z` @kind static;
  #L3225d4.  v2:= temp;
  #L3225d6.  if v2 == 0 then goto L3225de;
  #L3225da.  v1:= 0I;
  #L3225dc.  goto L3225ea;
  #L3225de.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/m/f;.c:(Lcom/bumptech/glide/m/f;)I` @kind static;
  #L3225e4.  v1:= temp;
  #L3225e6.  v1:= new `boolean`[v1];
  #L3225ea.  v0.`com.bumptech.glide.m.c.b` @type ^`boolean`[] := v1 @kind object;
  #L3225ee.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.m.c` v0 @kind this, `com.bumptech.glide.m.f` v1 @kind object, `com.bumptech.glide.m.d` v2 @kind object, `com.bumptech.glide.m.a` v3 @kind object) @signature `Lcom/bumptech/glide/m/c;.<init>:(Lcom/bumptech/glide/m/f;Lcom/bumptech/glide/m/d;Lcom/bumptech/glide/m/a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L322600.  call `<init>`(v0, v1, v2) @signature `Lcom/bumptech/glide/m/c;.<init>:(Lcom/bumptech/glide/m/f;Lcom/bumptech/glide/m/d;)V` @kind direct;
  #L322606.  return @kind void;
}
procedure `com.bumptech.glide.m.d` `c`(`com.bumptech.glide.m.c` v0 @kind object) @signature `Lcom/bumptech/glide/m/c;.c:(Lcom/bumptech/glide/m/c;)Lcom/bumptech/glide/m/d;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L322510.  v0:= v0.`com.bumptech.glide.m.c.a` @type ^`com.bumptech.glide.m.d` @kind object;
  #L322514.  return v0 @kind object;
}
procedure `boolean`[] `d`(`com.bumptech.glide.m.c` v0 @kind object) @signature `Lcom/bumptech/glide/m/c;.d:(Lcom/bumptech/glide/m/c;)[Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3224f8.  v0:= v0.`com.bumptech.glide.m.c.b` @type ^`boolean`[] @kind object;
  #L3224fc.  return v0 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.m.c` v2 @kind this) @signature `Lcom/bumptech/glide/m/c;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L322618.  v0:= v2.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.f` @kind object;
  #L32261c.  v1:= 0I;
  #L32261e.  call `m`(v0, v2, v1) @signature `Lcom/bumptech/glide/m/f;.m:(Lcom/bumptech/glide/m/f;Lcom/bumptech/glide/m/c;Z)V` @kind static;
  #L322624.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.m.c` v1 @kind this) @signature `Lcom/bumptech/glide/m/c;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L322638.  v0:= v1.`com.bumptech.glide.m.c.c` @type ^`boolean` @kind boolean;
  #L32263c.  if v0 != 0 then goto L322646;
  #L322640.  call `a`(v1) @signature `Lcom/bumptech/glide/m/c;.a:()V` @kind virtual;
  #L322646.  return @kind void;
  catch `java.io.IOException` @[L322640..L322646] goto L322646;
}
procedure `void` `e`(`com.bumptech.glide.m.c` v2 @kind this) @signature `Lcom/bumptech/glide/m/c;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L322668.  v0:= v2.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.f` @kind object;
  #L32266c.  v1:= 1I;
  #L32266e.  call `m`(v0, v2, v1) @signature `Lcom/bumptech/glide/m/f;.m:(Lcom/bumptech/glide/m/f;Lcom/bumptech/glide/m/c;Z)V` @kind static;
  #L322674.  v2.`com.bumptech.glide.m.c.c` @type ^`boolean` := v1 @kind boolean;
  #L322678.  return @kind void;
}
procedure `java.io.File` `f`(`com.bumptech.glide.m.c` v3 @kind this, `int` v4 ) @signature `Lcom/bumptech/glide/m/c;.f:(I)Ljava/io/File;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L322528.  v0:= v3.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.f` @kind object;
  #L32252c.  @monitorenter v0
  #L32252e.  v1:= v3.`com.bumptech.glide.m.c.a` @type ^`com.bumptech.glide.m.d` @kind object;
  #L322532.  call temp:= `g`(v1) @signature `Lcom/bumptech/glide/m/d;.g:(Lcom/bumptech/glide/m/d;)Lcom/bumptech/glide/m/c;` @kind static;
  #L322538.  v1:= temp @kind object;
  #L32253a.  if v1 != v3 then goto L322592;
  #L32253e.  v1:= v3.`com.bumptech.glide.m.c.a` @type ^`com.bumptech.glide.m.d` @kind object;
  #L322542.  call temp:= `e`(v1) @signature `Lcom/bumptech/glide/m/d;.e:(Lcom/bumptech/glide/m/d;)Z` @kind static;
  #L322548.  v1:= temp;
  #L32254a.  if v1 != 0 then goto L322558;
  #L32254e.  v1:= v3.`com.bumptech.glide.m.c.b` @type ^`boolean`[] @kind object;
  #L322552.  v2:= 1I;
  #L322554.  v1[v4]:= v2 @kind boolean;
  #L322558.  v1:= v3.`com.bumptech.glide.m.c.a` @type ^`com.bumptech.glide.m.d` @kind object;
  #L32255c.  call temp:= `k`(v1, v4) @signature `Lcom/bumptech/glide/m/d;.k:(I)Ljava/io/File;` @kind virtual;
  #L322562.  v4:= temp @kind object;
  #L322564.  v1:= v3.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.f` @kind object;
  #L322568.  call temp:= `k`(v1) @signature `Lcom/bumptech/glide/m/f;.k:(Lcom/bumptech/glide/m/f;)Ljava/io/File;` @kind static;
  #L32256e.  v1:= temp @kind object;
  #L322570.  call temp:= `exists`(v1) @signature `Ljava/io/File;.exists:()Z` @kind virtual;
  #L322576.  v1:= temp;
  #L322578.  if v1 != 0 then goto L32258e;
  #L32257c.  v1:= v3.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.f` @kind object;
  #L322580.  call temp:= `k`(v1) @signature `Lcom/bumptech/glide/m/f;.k:(Lcom/bumptech/glide/m/f;)Ljava/io/File;` @kind static;
  #L322586.  v1:= temp @kind object;
  #L322588.  call temp:= `mkdirs`(v1) @signature `Ljava/io/File;.mkdirs:()Z` @kind virtual;
  #L32258e.  @monitorexit v0
  #L322590.  return v4 @kind object;
  #L322592.  v4:= new `java.lang.IllegalStateException`;
  #L322596.  call `<init>`(v4) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L32259c.  throw v4;
  #L32259e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3225a0.  @monitorexit v0
  #L3225a2.  throw v4;
  catch `java.lang.Throwable` @[L32252e..L3225a2] goto L32259e;
}
