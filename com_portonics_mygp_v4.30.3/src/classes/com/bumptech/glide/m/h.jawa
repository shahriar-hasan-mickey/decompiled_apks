record `com.bumptech.glide.m.h` @kind class @AccessFlag  extends `java.io.Closeable` @kind interface {
  `java.io.InputStream` `com.bumptech.glide.m.h.b` @AccessFlag PRIVATE_FINAL;
  `java.nio.charset.Charset` `com.bumptech.glide.m.h.c` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.bumptech.glide.m.h.d` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.m.h.e` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.m.h.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.m.h` v1 @kind this, `java.io.InputStream` v2 @kind object, `int` v3 , `java.nio.charset.Charset` v4 @kind object) @signature `Lcom/bumptech/glide/m/h;.<init>:(Ljava/io/InputStream;ILjava/nio/charset/Charset;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L323c80.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L323c86.  if v2 == 0 then goto L323cd4;
  #L323c8a.  if v4 == 0 then goto L323cd4;
  #L323c8e.  if v3 < 0 then goto L323cc4;
  #L323c92.  v0:= `@@com.bumptech.glide.m.i.a` @type ^`java.nio.charset.Charset` @kind object;
  #L323c96.  call temp:= `equals`(v4, v0) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L323c9c.  v0:= temp;
  #L323c9e.  if v0 == 0 then goto L323cb4;
  #L323ca2.  v1.`com.bumptech.glide.m.h.b` @type ^`java.io.InputStream` := v2 @kind object;
  #L323ca6.  v1.`com.bumptech.glide.m.h.c` @type ^`java.nio.charset.Charset` := v4 @kind object;
  #L323caa.  v2:= new `byte`[v3];
  #L323cae.  v1.`com.bumptech.glide.m.h.d` @type ^`byte`[] := v2 @kind object;
  #L323cb2.  return @kind void;
  #L323cb4.  v2:= new `java.lang.IllegalArgumentException`;
  #L323cb8.  v3:= "Unsupported encoding" @kind object;
  #L323cbc.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L323cc2.  throw v2;
  #L323cc4.  v2:= new `java.lang.IllegalArgumentException`;
  #L323cc8.  v3:= "capacity <= 0" @kind object;
  #L323ccc.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L323cd2.  throw v2;
  #L323cd4.  v2:= 0I;
  #L323cd6.  throw v2;
}
procedure `void` `<init>`(`com.bumptech.glide.m.h` v1 @kind this, `java.io.InputStream` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lcom/bumptech/glide/m/h;.<init>:(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L323ce8.  v0:= 8192I;
  #L323cec.  call `<init>`(v1, v2, v0, v3) @signature `Lcom/bumptech/glide/m/h;.<init>:(Ljava/io/InputStream;ILjava/nio/charset/Charset;)V` @kind direct;
  #L323cf2.  return @kind void;
}
procedure `java.nio.charset.Charset` `a`(`com.bumptech.glide.m.h` v0 @kind object) @signature `Lcom/bumptech/glide/m/h;.a:(Lcom/bumptech/glide/m/h;)Ljava/nio/charset/Charset;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L323c68.  v0:= v0.`com.bumptech.glide.m.h.c` @type ^`java.nio.charset.Charset` @kind object;
  #L323c6c.  return v0 @kind object;
}
procedure `void` `c`(`com.bumptech.glide.m.h` v4 @kind this) @signature `Lcom/bumptech/glide/m/h;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L323d48.  v0:= v4.`com.bumptech.glide.m.h.b` @type ^`java.io.InputStream` @kind object;
  #L323d4c.  v1:= v4.`com.bumptech.glide.m.h.d` @type ^`byte`[] @kind object;
  #L323d50.  v2:= length @variable v1;
  #L323d52.  v3:= 0I;
  #L323d54.  call temp:= `read`(v0, v1, v3, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L323d5a.  v0:= temp;
  #L323d5c.  v1:= -1I;
  #L323d5e.  if v0 == v1 then goto L323d6c;
  #L323d62.  v4.`com.bumptech.glide.m.h.e` @type ^`int` := v3;
  #L323d66.  v4.`com.bumptech.glide.m.h.f` @type ^`int` := v0;
  #L323d6a.  return @kind void;
  #L323d6c.  v0:= new `java.io.EOFException`;
  #L323d70.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L323d76.  throw v0;
}
procedure `void` `close`(`com.bumptech.glide.m.h` v2 @kind this) @signature `Lcom/bumptech/glide/m/h;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L323d04.  v0:= v2.`com.bumptech.glide.m.h.b` @type ^`java.io.InputStream` @kind object;
  #L323d08.  @monitorenter v0
  #L323d0a.  v1:= v2.`com.bumptech.glide.m.h.d` @type ^`byte`[] @kind object;
  #L323d0e.  if v1 == 0 then goto L323d22;
  #L323d12.  v1:= 0I;
  #L323d14.  v2.`com.bumptech.glide.m.h.d` @type ^`byte`[] := v1 @kind object;
  #L323d18.  v1:= v2.`com.bumptech.glide.m.h.b` @type ^`java.io.InputStream` @kind object;
  #L323d1c.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L323d22.  @monitorexit v0
  #L323d24.  return @kind void;
  #L323d26.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L323d28.  @monitorexit v0
  #L323d2a.  throw v1;
  catch `java.lang.Throwable` @[L323d0a..L323d2a] goto L323d26;
}
procedure `boolean` `d`(`com.bumptech.glide.m.h` v2 @kind this) @signature `Lcom/bumptech/glide/m/h;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L323b08.  v0:= v2.`com.bumptech.glide.m.h.f` @type ^`int`;
  #L323b0c.  v1:= -1I;
  #L323b0e.  if v0 != v1 then goto L323b16;
  #L323b12.  v0:= 1I;
  #L323b14.  goto L323b18;
  #L323b16.  v0:= 0I;
  #L323b18.  return v0;
}
procedure `java.lang.String` `k`(`com.bumptech.glide.m.h` v7 @kind this) @signature `Lcom/bumptech/glide/m/h;.k:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L323b2c.  v0:= v7.`com.bumptech.glide.m.h.b` @type ^`java.io.InputStream` @kind object;
  #L323b30.  @monitorenter v0
  #L323b32.  v1:= v7.`com.bumptech.glide.m.h.d` @type ^`byte`[] @kind object;
  #L323b36.  if v1 == 0 then goto L323c32;
  #L323b3a.  v1:= v7.`com.bumptech.glide.m.h.e` @type ^`int`;
  #L323b3e.  v2:= v7.`com.bumptech.glide.m.h.f` @type ^`int`;
  #L323b42.  if v1 < v2 then goto L323b4c;
  #L323b46.  call `c`(v7) @signature `Lcom/bumptech/glide/m/h;.c:()V` @kind direct;
  #L323b4c.  v1:= v7.`com.bumptech.glide.m.h.e` @type ^`int`;
  #L323b50.  v2:= v7.`com.bumptech.glide.m.h.f` @type ^`int`;
  #L323b54.  v3:= 10I;
  #L323b58.  if v1 == v2 then goto L323bb6;
  #L323b5c.  v2:= v7.`com.bumptech.glide.m.h.d` @type ^`byte`[] @kind object;
  #L323b60.  v4:= v2[v1] @kind byte;
  #L323b64.  if v4 != v3 then goto L323bb0;
  #L323b68.  v3:= v7.`com.bumptech.glide.m.h.e` @type ^`int`;
  #L323b6c.  if v1 == v3 then goto L323b82;
  #L323b70.  v3:= v1 + -1;
  #L323b74.  v2:= v2[v3] @kind byte;
  #L323b78.  v4:= 13I;
  #L323b7c.  if v2 != v4 then goto L323b82;
  #L323b80.  goto L323b84;
  #L323b82.  v3:= v1;
  #L323b84.  v2:= new `java.lang.String`;
  #L323b88.  v4:= v7.`com.bumptech.glide.m.h.d` @type ^`byte`[] @kind object;
  #L323b8c.  v5:= v7.`com.bumptech.glide.m.h.e` @type ^`int`;
  #L323b90.  v3:= v3 - v5 @kind int;
  #L323b92.  v6:= v7.`com.bumptech.glide.m.h.c` @type ^`java.nio.charset.Charset` @kind object;
  #L323b96.  call temp:= `name`(v6) @signature `Ljava/nio/charset/Charset;.name:()Ljava/lang/String;` @kind virtual;
  #L323b9c.  v6:= temp @kind object;
  #L323b9e.  call `<init>`(v2, v4, v5, v3, v6) @signature `Ljava/lang/String;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L323ba4.  v1:= v1 + 1;
  #L323ba8.  v7.`com.bumptech.glide.m.h.e` @type ^`int` := v1;
  #L323bac.  @monitorexit v0
  #L323bae.  return v2 @kind object;
  #L323bb0.  v1:= v1 + 1;
  #L323bb4.  goto L323b50;
  #L323bb6.  v1:= new `com.bumptech.glide.m.g`;
  #L323bba.  v2:= v7.`com.bumptech.glide.m.h.f` @type ^`int`;
  #L323bbe.  v4:= v7.`com.bumptech.glide.m.h.e` @type ^`int`;
  #L323bc2.  v2:= v2 - v4 @kind int;
  #L323bc4.  v2:= v2 + 80;
  #L323bc8.  call `<init>`(v1, v7, v2) @signature `Lcom/bumptech/glide/m/g;.<init>:(Lcom/bumptech/glide/m/h;I)V` @kind direct;
  #L323bce.  v2:= v7.`com.bumptech.glide.m.h.d` @type ^`byte`[] @kind object;
  #L323bd2.  v4:= v7.`com.bumptech.glide.m.h.e` @type ^`int`;
  #L323bd6.  v5:= v7.`com.bumptech.glide.m.h.f` @type ^`int`;
  #L323bda.  v5:= v5 - v4 @kind int;
  #L323bdc.  call `write`(v1, v2, v4, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L323be2.  v2:= -1I;
  #L323be4.  v7.`com.bumptech.glide.m.h.f` @type ^`int` := v2;
  #L323be8.  call `c`(v7) @signature `Lcom/bumptech/glide/m/h;.c:()V` @kind direct;
  #L323bee.  v2:= v7.`com.bumptech.glide.m.h.e` @type ^`int`;
  #L323bf2.  v4:= v7.`com.bumptech.glide.m.h.f` @type ^`int`;
  #L323bf6.  if v2 == v4 then goto L323bce;
  #L323bfa.  v4:= v7.`com.bumptech.glide.m.h.d` @type ^`byte`[] @kind object;
  #L323bfe.  v5:= v4[v2] @kind byte;
  #L323c02.  if v5 != v3 then goto L323c2c;
  #L323c06.  v3:= v7.`com.bumptech.glide.m.h.e` @type ^`int`;
  #L323c0a.  if v2 == v3 then goto L323c18;
  #L323c0e.  v5:= v2 - v3 @kind int;
  #L323c12.  call `write`(v1, v4, v3, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L323c18.  v2:= v2 + 1;
  #L323c1c.  v7.`com.bumptech.glide.m.h.e` @type ^`int` := v2;
  #L323c20.  call temp:= `toString`(v1) @signature `Ljava/io/ByteArrayOutputStream;.toString:()Ljava/lang/String;` @kind virtual;
  #L323c26.  v1:= temp @kind object;
  #L323c28.  @monitorexit v0
  #L323c2a.  return v1 @kind object;
  #L323c2c.  v2:= v2 + 1;
  #L323c30.  goto L323bf2;
  #L323c32.  v1:= new `java.io.IOException`;
  #L323c36.  v2:= "LineReader is closed" @kind object;
  #L323c3a.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L323c40.  throw v1;
  #L323c42.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L323c44.  @monitorexit v0
  #L323c46.  goto L323c4a;
  #L323c48.  throw v1;
  #L323c4a.  goto L323c48;
  catch `java.lang.Throwable` @[L323b32..L323c46] goto L323c42;
}
