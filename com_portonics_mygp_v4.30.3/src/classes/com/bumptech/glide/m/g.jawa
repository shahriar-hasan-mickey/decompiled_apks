record `com.bumptech.glide.m.g` @kind class @AccessFlag  extends `java.io.ByteArrayOutputStream` @kind class {
  `com.bumptech.glide.m.h` `com.bumptech.glide.m.g.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.m.g` v0 @kind this, `com.bumptech.glide.m.h` v1 @kind object, `int` v2 ) @signature `Lcom/bumptech/glide/m/g;.<init>:(Lcom/bumptech/glide/m/h;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L323aec.  v0.`com.bumptech.glide.m.g.b` @type ^`com.bumptech.glide.m.h` := v1 @kind object;
  #L323af0.  call `<init>`(v0, v2) @signature `Ljava/io/ByteArrayOutputStream;.<init>:(I)V` @kind direct;
  #L323af6.  return @kind void;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.m.g` v5 @kind this) @signature `Lcom/bumptech/glide/m/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L323a78.  v0:= v5.`java.io.ByteArrayOutputStream.count` @type ^`int`;
  #L323a7c.  if v0 <= 0 then goto L323a98;
  #L323a80.  v1:= v5.`java.io.ByteArrayOutputStream.buf` @type ^`byte`[] @kind object;
  #L323a84.  v2:= v0 + -1;
  #L323a88.  v1:= v1[v2] @kind byte;
  #L323a8c.  v2:= 13I;
  #L323a90.  if v1 != v2 then goto L323a98;
  #L323a94.  v0:= v0 + -1;
  #L323a98.  v1:= new `java.lang.String`;
  #L323a9c.  v2:= v5.`java.io.ByteArrayOutputStream.buf` @type ^`byte`[] @kind object;
  #L323aa0.  v3:= 0I;
  #L323aa2.  v4:= v5.`com.bumptech.glide.m.g.b` @type ^`com.bumptech.glide.m.h` @kind object;
  #L323aa6.  call temp:= `a`(v4) @signature `Lcom/bumptech/glide/m/h;.a:(Lcom/bumptech/glide/m/h;)Ljava/nio/charset/Charset;` @kind static;
  #L323aac.  v4:= temp @kind object;
  #L323aae.  call temp:= `name`(v4) @signature `Ljava/nio/charset/Charset;.name:()Ljava/lang/String;` @kind virtual;
  #L323ab4.  v4:= temp @kind object;
  #L323ab6.  call `<init>`(v1, v2, v3, v0, v4) @signature `Ljava/lang/String;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L323abc.  return v1 @kind object;
  #L323abe.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L323ac0.  v1:= new `java.lang.AssertionError`;
  #L323ac4.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L323aca.  throw v1;
  catch `java.io.UnsupportedEncodingException` @[L323a98..L323abc] goto L323abe;
}
