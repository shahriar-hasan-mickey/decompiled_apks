record `com.bumptech.glide.q.g` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.bumptech.glide.q.g.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.q.g.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.q.g` v1 @kind this) @signature `Lcom/bumptech/glide/q/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L33cbd4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33cbda.  v0:= new `java.util.ArrayList`;
  #L33cbde.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L33cbe4.  v1.`com.bumptech.glide.q.g.a` @type ^`java.util.List` := v0 @kind object;
  #L33cbe8.  v0:= new `java.util.HashMap`;
  #L33cbec.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L33cbf2.  v1.`com.bumptech.glide.q.g.b` @type ^`java.util.Map` := v0 @kind object;
  #L33cbf6.  return @kind void;
}
procedure `java.util.List` `c`(`com.bumptech.glide.q.g` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/q/g;.c:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L33cab0.  @monitorenter v2
  #L33cab2.  v0:= v2.`com.bumptech.glide.q.g.a` @type ^`java.util.List` @kind object;
  #L33cab6.  call temp:= `contains`(v0, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L33cabc.  v0:= temp;
  #L33cabe.  if v0 != 0 then goto L33cacc;
  #L33cac2.  v0:= v2.`com.bumptech.glide.q.g.a` @type ^`java.util.List` @kind object;
  #L33cac6.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33cacc.  v0:= v2.`com.bumptech.glide.q.g.b` @type ^`java.util.Map` @kind object;
  #L33cad0.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L33cad6.  v0:= temp @kind object;
  #L33cad8.  v0:= (`java.util.List`) v0 @kind object;
  #L33cadc.  if v0 != 0 then goto L33caf4;
  #L33cae0.  v0:= new `java.util.ArrayList`;
  #L33cae4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L33caea.  v1:= v2.`com.bumptech.glide.q.g.b` @type ^`java.util.Map` @kind object;
  #L33caee.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L33caf4.  @monitorexit v2
  #L33caf6.  return v0 @kind object;
  #L33caf8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33cafa.  @monitorexit v2
  #L33cafc.  throw v3;
  catch `java.lang.Throwable` @[L33cab2..L33caf4] goto L33caf8;
}
procedure `void` `a`(`com.bumptech.glide.q.g` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.i` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/q/g;.a:(Ljava/lang/String;Lcom/bumptech/glide/load/i;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33cc08.  @monitorenter v1
  #L33cc0a.  call temp:= `c`(v1, v2) @signature `Lcom/bumptech/glide/q/g;.c:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L33cc10.  v2:= temp @kind object;
  #L33cc12.  v0:= new `com.bumptech.glide.q.f`;
  #L33cc16.  call `<init>`(v0, v4, v5, v3) @signature `Lcom/bumptech/glide/q/f;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/i;)V` @kind direct;
  #L33cc1c.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33cc22.  @monitorexit v1
  #L33cc24.  return @kind void;
  #L33cc26.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33cc28.  @monitorexit v1
  #L33cc2a.  throw v2;
  catch `java.lang.Throwable` @[L33cc0a..L33cc22] goto L33cc26;
}
procedure `java.util.List` `b`(`com.bumptech.glide.q.g` v5 @kind this, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object) @signature `Lcom/bumptech/glide/q/g;.b:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L33ca08.  @monitorenter v5
  #L33ca0a.  v0:= new `java.util.ArrayList`;
  #L33ca0e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L33ca14.  v1:= v5.`com.bumptech.glide.q.g.a` @type ^`java.util.List` @kind object;
  #L33ca18.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33ca1e.  v1:= temp @kind object;
  #L33ca20.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33ca26.  v2:= temp;
  #L33ca28.  if v2 == 0 then goto L33ca86;
  #L33ca2c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33ca32.  v2:= temp @kind object;
  #L33ca34.  v2:= (`java.lang.String`) v2 @kind object;
  #L33ca38.  v3:= v5.`com.bumptech.glide.q.g.b` @type ^`java.util.Map` @kind object;
  #L33ca3c.  call temp:= `get`(v3, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L33ca42.  v2:= temp @kind object;
  #L33ca44.  v2:= (`java.util.List`) v2 @kind object;
  #L33ca48.  if v2 != 0 then goto L33ca4e;
  #L33ca4c.  goto L33ca20;
  #L33ca4e.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33ca54.  v2:= temp @kind object;
  #L33ca56.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33ca5c.  v3:= temp;
  #L33ca5e.  if v3 == 0 then goto L33ca20;
  #L33ca62.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33ca68.  v3:= temp @kind object;
  #L33ca6a.  v3:= (`com.bumptech.glide.q.f`) v3 @kind object;
  #L33ca6e.  call temp:= `a`(v3, v6, v7) @signature `Lcom/bumptech/glide/q/f;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L33ca74.  v4:= temp;
  #L33ca76.  if v4 == 0 then goto L33ca56;
  #L33ca7a.  v3:= v3.`com.bumptech.glide.q.f.c` @type ^`com.bumptech.glide.load.i` @kind object;
  #L33ca7e.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33ca84.  goto L33ca56;
  #L33ca86.  @monitorexit v5
  #L33ca88.  return v0 @kind object;
  #L33ca8a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33ca8c.  @monitorexit v5
  #L33ca8e.  goto L33ca92;
  #L33ca90.  throw v6;
  #L33ca92.  goto L33ca90;
  catch `java.lang.Throwable` @[L33ca0a..L33ca84] goto L33ca8a;
}
procedure `java.util.List` `d`(`com.bumptech.glide.q.g` v5 @kind this, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object) @signature `Lcom/bumptech/glide/q/g;.d:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L33cb1c.  @monitorenter v5
  #L33cb1e.  v0:= new `java.util.ArrayList`;
  #L33cb22.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L33cb28.  v1:= v5.`com.bumptech.glide.q.g.a` @type ^`java.util.List` @kind object;
  #L33cb2c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33cb32.  v1:= temp @kind object;
  #L33cb34.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33cb3a.  v2:= temp;
  #L33cb3c.  if v2 == 0 then goto L33cbaa;
  #L33cb40.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33cb46.  v2:= temp @kind object;
  #L33cb48.  v2:= (`java.lang.String`) v2 @kind object;
  #L33cb4c.  v3:= v5.`com.bumptech.glide.q.g.b` @type ^`java.util.Map` @kind object;
  #L33cb50.  call temp:= `get`(v3, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L33cb56.  v2:= temp @kind object;
  #L33cb58.  v2:= (`java.util.List`) v2 @kind object;
  #L33cb5c.  if v2 != 0 then goto L33cb62;
  #L33cb60.  goto L33cb34;
  #L33cb62.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33cb68.  v2:= temp @kind object;
  #L33cb6a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33cb70.  v3:= temp;
  #L33cb72.  if v3 == 0 then goto L33cb34;
  #L33cb76.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33cb7c.  v3:= temp @kind object;
  #L33cb7e.  v3:= (`com.bumptech.glide.q.f`) v3 @kind object;
  #L33cb82.  call temp:= `a`(v3, v6, v7) @signature `Lcom/bumptech/glide/q/f;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L33cb88.  v4:= temp;
  #L33cb8a.  if v4 == 0 then goto L33cb6a;
  #L33cb8e.  v4:= v3.`com.bumptech.glide.q.f.b` @type ^`java.lang.Class` @kind object;
  #L33cb92.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L33cb98.  v4:= temp;
  #L33cb9a.  if v4 != 0 then goto L33cb6a;
  #L33cb9e.  v3:= v3.`com.bumptech.glide.q.f.b` @type ^`java.lang.Class` @kind object;
  #L33cba2.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33cba8.  goto L33cb6a;
  #L33cbaa.  @monitorexit v5
  #L33cbac.  return v0 @kind object;
  #L33cbae.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33cbb0.  @monitorexit v5
  #L33cbb2.  goto L33cbb6;
  #L33cbb4.  throw v6;
  #L33cbb6.  goto L33cbb4;
  catch `java.lang.Throwable` @[L33cb1e..L33cba8] goto L33cbae;
}
procedure `void` `e`(`com.bumptech.glide.q.g` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lcom/bumptech/glide/q/g;.e:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L33cc48.  @monitorenter v3
  #L33cc4a.  v0:= new `java.util.ArrayList`;
  #L33cc4e.  v1:= v3.`com.bumptech.glide.q.g.a` @type ^`java.util.List` @kind object;
  #L33cc52.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L33cc58.  v1:= v3.`com.bumptech.glide.q.g.a` @type ^`java.util.List` @kind object;
  #L33cc5c.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L33cc62.  v1:= v3.`com.bumptech.glide.q.g.a` @type ^`java.util.List` @kind object;
  #L33cc66.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L33cc6c.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33cc72.  v0:= temp @kind object;
  #L33cc74.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33cc7a.  v1:= temp;
  #L33cc7c.  if v1 == 0 then goto L33cca4;
  #L33cc80.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33cc86.  v1:= temp @kind object;
  #L33cc88.  v1:= (`java.lang.String`) v1 @kind object;
  #L33cc8c.  call temp:= `contains`(v4, v1) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L33cc92.  v2:= temp;
  #L33cc94.  if v2 != 0 then goto L33cc74;
  #L33cc98.  v2:= v3.`com.bumptech.glide.q.g.a` @type ^`java.util.List` @kind object;
  #L33cc9c.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33cca2.  goto L33cc74;
  #L33cca4.  @monitorexit v3
  #L33cca6.  return @kind void;
  #L33cca8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33ccaa.  @monitorexit v3
  #L33ccac.  goto L33ccb0;
  #L33ccae.  throw v4;
  #L33ccb0.  goto L33ccae;
  catch `java.lang.Throwable` @[L33cc4a..L33cca2] goto L33cca8;
}
