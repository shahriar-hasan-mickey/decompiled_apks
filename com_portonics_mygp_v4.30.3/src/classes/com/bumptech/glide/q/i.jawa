record `com.bumptech.glide.q.i` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.bumptech.glide.q.i.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.q.i` v1 @kind this) @signature `Lcom/bumptech/glide/q/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L33cd7c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33cd82.  v0:= new `java.util.ArrayList`;
  #L33cd86.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L33cd8c.  v1.`com.bumptech.glide.q.i.a` @type ^`java.util.List` := v0 @kind object;
  #L33cd90.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.q.i` v2 @kind this, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.j` v4 @kind object) @signature `Lcom/bumptech/glide/q/i;.a:(Ljava/lang/Class;Lcom/bumptech/glide/load/j;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L33cda4.  @monitorenter v2
  #L33cda6.  v0:= v2.`com.bumptech.glide.q.i.a` @type ^`java.util.List` @kind object;
  #L33cdaa.  v1:= new `com.bumptech.glide.q.h`;
  #L33cdae.  call `<init>`(v1, v3, v4) @signature `Lcom/bumptech/glide/q/h;.<init>:(Ljava/lang/Class;Lcom/bumptech/glide/load/j;)V` @kind direct;
  #L33cdb4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33cdba.  @monitorexit v2
  #L33cdbc.  return @kind void;
  #L33cdbe.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33cdc0.  @monitorexit v2
  #L33cdc2.  throw v3;
  catch `java.lang.Throwable` @[L33cda6..L33cdba] goto L33cdbe;
}
procedure `com.bumptech.glide.load.j` `b`(`com.bumptech.glide.q.i` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/q/i;.b:(Ljava/lang/Class;)Lcom/bumptech/glide/load/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L33cd10.  @monitorenter v4
  #L33cd12.  v0:= 0I;
  #L33cd14.  v1:= v4.`com.bumptech.glide.q.i.a` @type ^`java.util.List` @kind object;
  #L33cd18.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L33cd1e.  v1:= temp;
  #L33cd20.  if v0 >= v1 then goto L33cd4e;
  #L33cd24.  v2:= v4.`com.bumptech.glide.q.i.a` @type ^`java.util.List` @kind object;
  #L33cd28.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L33cd2e.  v2:= temp @kind object;
  #L33cd30.  v2:= (`com.bumptech.glide.q.h`) v2 @kind object;
  #L33cd34.  call temp:= `a`(v2, v5) @signature `Lcom/bumptech/glide/q/h;.a:(Ljava/lang/Class;)Z` @kind virtual;
  #L33cd3a.  v3:= temp;
  #L33cd3c.  if v3 == 0 then goto L33cd48;
  #L33cd40.  v5:= v2.`com.bumptech.glide.q.h.b` @type ^`com.bumptech.glide.load.j` @kind object;
  #L33cd44.  @monitorexit v4
  #L33cd46.  return v5 @kind object;
  #L33cd48.  v0:= v0 + 1;
  #L33cd4c.  goto L33cd20;
  #L33cd4e.  v5:= 0I;
  #L33cd50.  @monitorexit v4
  #L33cd52.  return v5 @kind object;
  #L33cd54.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33cd56.  @monitorexit v4
  #L33cd58.  goto L33cd5c;
  #L33cd5a.  throw v5;
  #L33cd5c.  goto L33cd5a;
  catch `java.lang.Throwable` @[L33cd14..L33cd44] goto L33cd54;
}
