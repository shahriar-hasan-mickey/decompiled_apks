record `com.bumptech.glide.q.b` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.bumptech.glide.q.b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.q.b` v1 @kind this) @signature `Lcom/bumptech/glide/q/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L33c640.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33c646.  v0:= new `java.util.ArrayList`;
  #L33c64a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L33c650.  v1.`com.bumptech.glide.q.b.a` @type ^`java.util.List` := v0 @kind object;
  #L33c654.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.q.b` v2 @kind this, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.a` v4 @kind object) @signature `Lcom/bumptech/glide/q/b;.a:(Ljava/lang/Class;Lcom/bumptech/glide/load/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L33c668.  @monitorenter v2
  #L33c66a.  v0:= v2.`com.bumptech.glide.q.b.a` @type ^`java.util.List` @kind object;
  #L33c66e.  v1:= new `com.bumptech.glide.q.a`;
  #L33c672.  call `<init>`(v1, v3, v4) @signature `Lcom/bumptech/glide/q/a;.<init>:(Ljava/lang/Class;Lcom/bumptech/glide/load/a;)V` @kind direct;
  #L33c678.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L33c67e.  @monitorexit v2
  #L33c680.  return @kind void;
  #L33c682.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33c684.  @monitorexit v2
  #L33c686.  throw v3;
  catch `java.lang.Throwable` @[L33c66a..L33c67e] goto L33c682;
}
procedure `com.bumptech.glide.load.a` `b`(`com.bumptech.glide.q.b` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lcom/bumptech/glide/q/b;.b:(Ljava/lang/Class;)Lcom/bumptech/glide/load/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L33c5d8.  @monitorenter v3
  #L33c5da.  v0:= v3.`com.bumptech.glide.q.b.a` @type ^`java.util.List` @kind object;
  #L33c5de.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33c5e4.  v0:= temp @kind object;
  #L33c5e6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33c5ec.  v1:= temp;
  #L33c5ee.  if v1 == 0 then goto L33c612;
  #L33c5f2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33c5f8.  v1:= temp @kind object;
  #L33c5fa.  v1:= (`com.bumptech.glide.q.a`) v1 @kind object;
  #L33c5fe.  call temp:= `a`(v1, v4) @signature `Lcom/bumptech/glide/q/a;.a:(Ljava/lang/Class;)Z` @kind virtual;
  #L33c604.  v2:= temp;
  #L33c606.  if v2 == 0 then goto L33c5e6;
  #L33c60a.  v4:= v1.`com.bumptech.glide.q.a.b` @type ^`com.bumptech.glide.load.a` @kind object;
  #L33c60e.  @monitorexit v3
  #L33c610.  return v4 @kind object;
  #L33c612.  v4:= 0I;
  #L33c614.  @monitorexit v3
  #L33c616.  return v4 @kind object;
  #L33c618.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33c61a.  @monitorexit v3
  #L33c61c.  goto L33c620;
  #L33c61e.  throw v4;
  #L33c620.  goto L33c61e;
  catch `java.lang.Throwable` @[L33c5da..L33c60e] goto L33c618;
}
