record `com.bumptech.glide.s.c` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `java.util.concurrent.atomic.AtomicReference` `@@com.bumptech.glide.s.c.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/s/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3414f4.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3414f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3414fe.  `@@com.bumptech.glide.s.c.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L341502.  return @kind void;
}
procedure `java.nio.ByteBuffer` `a`(`java.io.File` v8 @kind object) @signature `Lcom/bumptech/glide/s/c;.a:(Ljava/io/File;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3413f0.  v0:= 0I;
  #L3413f2.  call temp:= `length`(v8) @signature `Ljava/io/File;.length:()J` @kind virtual;
  #L3413f8.  v5:= temp @kind wide;
  #L3413fa.  v1:= 2147483647L;
  #L341400.  v3:= lcmp(v5, v1);
  #L341404.  if v3 > 0 then goto L341466;
  #L341408.  v1:= 0L;
  #L34140c.  v3:= lcmp(v5, v1);
  #L341410.  if v3 == 0 then goto L341456;
  #L341414.  v7:= new `java.io.RandomAccessFile`;
  #L341418.  v1:= "r" @kind object;
  #L34141c.  call `<init>`(v7, v8, v1) @signature `Ljava/io/RandomAccessFile;.<init>:(Ljava/io/File;Ljava/lang/String;)V` @kind direct;
  #L341422.  call temp:= `getChannel`(v7) @signature `Ljava/io/RandomAccessFile;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L341428.  v0:= temp @kind object;
  #L34142a.  v2:= `@@java.nio.channels.FileChannel$MapMode.READ_ONLY` @type ^`java.nio.channels.FileChannel$MapMode` @kind object;
  #L34142e.  v3:= 0L;
  #L341432.  v1:= v0 @kind object;
  #L341434.  call temp:= `map`(v1, v2, v3, v5) @signature `Ljava/nio/channels/FileChannel;.map:(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;` @kind virtual;
  #L34143a.  v8:= temp @kind object;
  #L34143c.  call temp:= `load`(v8) @signature `Ljava/nio/MappedByteBuffer;.load:()Ljava/nio/MappedByteBuffer;` @kind virtual;
  #L341442.  v8:= temp @kind object;
  #L341444.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L34144a.  call `close`(v7) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L341450.  return v8 @kind object;
  #L341452.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L341454.  goto L34147a;
  #L341456.  v8:= new `java.io.IOException`;
  #L34145a.  v1:= "File unsuitable for memory mapping" @kind object;
  #L34145e.  call `<init>`(v8, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L341464.  throw v8;
  #L341466.  v8:= new `java.io.IOException`;
  #L34146a.  v1:= "File too large to map into memory" @kind object;
  #L34146e.  call `<init>`(v8, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L341474.  throw v8;
  #L341476.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L341478.  v7:= v0 @kind object;
  #L34147a.  if v0 == 0 then goto L341488;
  #L34147e.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L341484.  goto L341488;
  #L341486.  
  #L341488.  if v7 == 0 then goto L341492;
  #L34148c.  call `close`(v7) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L341492.  throw v8;
  catch `java.lang.Throwable` @[L3413f2..L341422] goto L341476;
  catch `java.lang.Throwable` @[L341422..L341444] goto L341452;
  catch `java.io.IOException` @[L341444..L34144a] goto L34144a;
  catch `java.io.IOException` @[L34144a..L341450] goto L341450;
  catch `java.lang.Throwable` @[L341456..L341476] goto L341476;
  catch `java.io.IOException` @[L34147e..L341484] goto L341486;
  catch `java.io.IOException` @[L34148c..L341492] goto L341492;
}
procedure `com.bumptech.glide.s.b` `b`(`java.nio.ByteBuffer` v3 @kind object) @signature `Lcom/bumptech/glide/s/c;.b:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/s/b;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L341384.  call temp:= `isReadOnly`(v3) @signature `Ljava/nio/ByteBuffer;.isReadOnly:()Z` @kind virtual;
  #L34138a.  v0:= temp;
  #L34138c.  if v0 != 0 then goto L3413c0;
  #L341390.  call temp:= `hasArray`(v3) @signature `Ljava/nio/ByteBuffer;.hasArray:()Z` @kind virtual;
  #L341396.  v0:= temp;
  #L341398.  if v0 == 0 then goto L3413c0;
  #L34139c.  v0:= new `com.bumptech.glide.s.b`;
  #L3413a0.  call temp:= `array`(v3) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L3413a6.  v1:= temp @kind object;
  #L3413a8.  call temp:= `arrayOffset`(v3) @signature `Ljava/nio/ByteBuffer;.arrayOffset:()I` @kind virtual;
  #L3413ae.  v2:= temp;
  #L3413b0.  call temp:= `limit`(v3) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L3413b6.  v3:= temp;
  #L3413b8.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/s/b;.<init>:([BII)V` @kind direct;
  #L3413be.  return v0 @kind object;
  #L3413c0.  v3:= 0I;
  #L3413c2.  return v3 @kind object;
}
procedure `byte`[] `c`(`java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/s/c;.c:(Ljava/nio/ByteBuffer;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L341320.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/s/c;.b:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/s/b;` @kind static;
  #L341326.  v0:= temp @kind object;
  #L341328.  if v0 == 0 then goto L34134c;
  #L34132c.  v1:= v0.`com.bumptech.glide.s.b.a` @type ^`int`;
  #L341330.  if v1 != 0 then goto L34134c;
  #L341334.  v1:= v0.`com.bumptech.glide.s.b.b` @type ^`int`;
  #L341338.  v0:= v0.`com.bumptech.glide.s.b.c` @type ^`byte`[] @kind object;
  #L34133c.  v0:= length @variable v0;
  #L34133e.  if v1 != v0 then goto L34134c;
  #L341342.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L341348.  v2:= temp @kind object;
  #L34134a.  goto L341370;
  #L34134c.  call temp:= `asReadOnlyBuffer`(v2) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L341352.  v2:= temp @kind object;
  #L341354.  call temp:= `limit`(v2) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L34135a.  v0:= temp;
  #L34135c.  v0:= new `byte`[v0];
  #L341360.  v1:= 0I;
  #L341362.  call temp:= `position`(v2, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L341368.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L34136e.  v2:= v0 @kind object;
  #L341370.  return v2 @kind object;
}
procedure `void` `d`(`java.nio.ByteBuffer` v4 @kind object, `java.io.File` v5 @kind object) @signature `Lcom/bumptech/glide/s/c;.d:(Ljava/nio/ByteBuffer;Ljava/io/File;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L341514.  v0:= 0I;
  #L341516.  call temp:= `position`(v4, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L34151c.  v1:= 0I;
  #L34151e.  v2:= new `java.io.RandomAccessFile`;
  #L341522.  v3:= "rw" @kind object;
  #L341526.  call `<init>`(v2, v5, v3) @signature `Ljava/io/RandomAccessFile;.<init>:(Ljava/io/File;Ljava/lang/String;)V` @kind direct;
  #L34152c.  call temp:= `getChannel`(v2) @signature `Ljava/io/RandomAccessFile;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L341532.  v1:= temp @kind object;
  #L341534.  call temp:= `write`(v1, v4) @signature `Ljava/nio/channels/FileChannel;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L34153a.  call `force`(v1, v0) @signature `Ljava/nio/channels/FileChannel;.force:(Z)V` @kind virtual;
  #L341540.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L341546.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L34154c.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L341552.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L341558.  return @kind void;
  #L34155a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L34155c.  goto L341562;
  #L34155e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L341560.  v2:= v1 @kind object;
  #L341562.  if v1 == 0 then goto L341570;
  #L341566.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L34156c.  goto L341570;
  #L34156e.  
  #L341570.  if v2 == 0 then goto L34157a;
  #L341574.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L34157a.  throw v4;
  catch `java.lang.Throwable` @[L34151e..L34152c] goto L34155e;
  catch `java.lang.Throwable` @[L34152c..L34154c] goto L34155a;
  catch `java.io.IOException` @[L34154c..L341552] goto L341552;
  catch `java.io.IOException` @[L341552..L341558] goto L341558;
  catch `java.io.IOException` @[L341566..L34156c] goto L34156e;
  catch `java.io.IOException` @[L341574..L34157a] goto L34157a;
}
procedure `java.io.InputStream` `e`(`java.nio.ByteBuffer` v1 @kind object) @signature `Lcom/bumptech/glide/s/c;.e:(Ljava/nio/ByteBuffer;)Ljava/io/InputStream;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3413d4.  v0:= new `com.bumptech.glide.s.a`;
  #L3413d8.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/s/a;.<init>:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L3413de.  return v0 @kind object;
}
