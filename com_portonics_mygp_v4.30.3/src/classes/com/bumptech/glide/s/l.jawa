record `com.bumptech.glide.s.l` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `int` `com.bumptech.glide.s.l.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.s.l` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/s/l;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L341fd4.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L341fda.  v1:= -2147483648I;
  #L341fde.  v0.`com.bumptech.glide.s.l.b` @type ^`int` := v1;
  #L341fe2.  return @kind void;
}
procedure `long` `a`(`com.bumptech.glide.s.l` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/s/l;.a:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L341f64.  v0:= v4.`com.bumptech.glide.s.l.b` @type ^`int`;
  #L341f68.  if v0 != 0 then goto L341f72;
  #L341f6c.  v5:= -1L;
  #L341f70.  return v5 @kind wide;
  #L341f72.  v1:= -2147483648I;
  #L341f76.  if v0 == v1 then goto L341f86;
  #L341f7a.  v1:= (`long`) v0 @kind i2l;
  #L341f7c.  v3:= lcmp(v5, v1);
  #L341f80.  if v3 <= 0 then goto L341f86;
  #L341f84.  v5:= (`long`) v0 @kind i2l;
  #L341f86.  return v5 @kind wide;
}
procedure `void` `c`(`com.bumptech.glide.s.l` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/s/l;.c:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L342060.  v0:= v4.`com.bumptech.glide.s.l.b` @type ^`int`;
  #L342064.  v1:= -2147483648I;
  #L342068.  if v0 == v1 then goto L342082;
  #L34206c.  v1:= -1L;
  #L342070.  v3:= lcmp(v5, v1);
  #L342074.  if v3 == 0 then goto L342082;
  #L342078.  v0:= (`long`) v0 @kind i2l;
  #L34207a.  v0:= v0 - v5 @kind long;
  #L34207c.  v5:= (`int`) v0 @kind l2i;
  #L34207e.  v4.`com.bumptech.glide.s.l.b` @type ^`int` := v5;
  #L342082.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.s.l` v2 @kind this) @signature `Lcom/bumptech/glide/s/l;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L341eb8.  v0:= v2.`com.bumptech.glide.s.l.b` @type ^`int`;
  #L341ebc.  v1:= -2147483648I;
  #L341ec0.  if v0 != v1 then goto L341ece;
  #L341ec4.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L341eca.  v0:= temp;
  #L341ecc.  goto L341ede;
  #L341ece.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L341ed4.  v1:= temp;
  #L341ed6.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L341edc.  v0:= temp;
  #L341ede.  return v0;
}
procedure `void` `mark`(`com.bumptech.glide.s.l` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/s/l;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L341ff4.  @monitorenter v0
  #L341ff6.  call `mark`(v0, v1) @signature `Ljava/io/FilterInputStream;.mark:(I)V` @kind super;
  #L341ffc.  v0.`com.bumptech.glide.s.l.b` @type ^`int` := v1;
  #L342000.  @monitorexit v0
  #L342002.  return @kind void;
  #L342004.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L342006.  @monitorexit v0
  #L342008.  throw v1;
  catch `java.lang.Throwable` @[L341ff6..L342000] goto L342004;
}
procedure `int` `read`(`com.bumptech.glide.s.l` v7 @kind this) @signature `Lcom/bumptech/glide/s/l;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L341ef0.  v0:= 1L;
  #L341ef4.  call temp:= `a`(v7, v0) @signature `Lcom/bumptech/glide/s/l;.a:(J)J` @kind direct;
  #L341efa.  v2:= temp @kind wide;
  #L341efc.  v4:= -1L;
  #L341f00.  v6:= lcmp(v2, v4);
  #L341f04.  if v6 != 0 then goto L341f0c;
  #L341f08.  v0:= -1I;
  #L341f0a.  return v0;
  #L341f0c.  call temp:= `read`(v7) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L341f12.  v2:= temp;
  #L341f14.  call `c`(v7, v0) @signature `Lcom/bumptech/glide/s/l;.c:(J)V` @kind direct;
  #L341f1a.  return v2;
}
procedure `int` `read`(`com.bumptech.glide.s.l` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/bumptech/glide/s/l;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L341f2c.  v0:= (`long`) v5 @kind i2l;
  #L341f2e.  call temp:= `a`(v2, v0) @signature `Lcom/bumptech/glide/s/l;.a:(J)J` @kind direct;
  #L341f34.  v0:= temp @kind wide;
  #L341f36.  v5:= (`int`) v0 @kind l2i;
  #L341f38.  v0:= -1I;
  #L341f3a.  if v5 != v0 then goto L341f40;
  #L341f3e.  return v0;
  #L341f40.  call temp:= `read`(v2, v3, v4, v5) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L341f46.  v3:= temp;
  #L341f48.  v4:= (`long`) v3 @kind i2l;
  #L341f4a.  call `c`(v2, v4) @signature `Lcom/bumptech/glide/s/l;.c:(J)V` @kind direct;
  #L341f50.  return v3;
}
procedure `void` `reset`(`com.bumptech.glide.s.l` v1 @kind this) @signature `Lcom/bumptech/glide/s/l;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L342028.  @monitorenter v1
  #L34202a.  call `reset`(v1) @signature `Ljava/io/FilterInputStream;.reset:()V` @kind super;
  #L342030.  v0:= -2147483648I;
  #L342034.  v1.`com.bumptech.glide.s.l.b` @type ^`int` := v0;
  #L342038.  @monitorexit v1
  #L34203a.  return @kind void;
  #L34203c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L34203e.  @monitorexit v1
  #L342040.  throw v0;
  catch `java.lang.Throwable` @[L34202a..L342038] goto L34203c;
}
procedure `long` `skip`(`com.bumptech.glide.s.l` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/s/l;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L341f98.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/s/l;.a:(J)J` @kind direct;
  #L341f9e.  v4:= temp @kind wide;
  #L341fa0.  v0:= -1L;
  #L341fa4.  v2:= lcmp(v4, v0);
  #L341fa8.  if v2 != 0 then goto L341fb2;
  #L341fac.  v4:= 0L;
  #L341fb0.  return v4 @kind wide;
  #L341fb2.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L341fb8.  v4:= temp @kind wide;
  #L341fba.  call `c`(v3, v4) @signature `Lcom/bumptech/glide/s/l;.c:(J)V` @kind direct;
  #L341fc0.  return v4 @kind wide;
}
