record `com.bumptech.glide.s.n` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `a`(`boolean` v0 , `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/s/n;.a:(ZLjava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3422a4.  if v0 == 0 then goto L3422aa;
  #L3422a8.  return @kind void;
  #L3422aa.  v0:= new `java.lang.IllegalArgumentException`;
  #L3422ae.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3422b4.  throw v0;
}
procedure `java.lang.String` `b`(`java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/s/n;.b:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L342244.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L34224a.  v0:= temp;
  #L34224c.  if v0 != 0 then goto L342252;
  #L342250.  return v1 @kind object;
  #L342252.  v1:= new `java.lang.IllegalArgumentException`;
  #L342256.  v0:= "Must not be null or empty" @kind object;
  #L34225a.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L342260.  throw v1;
}
procedure `java.util.Collection` `c`(`java.util.Collection` v1 @kind object) @signature `Lcom/bumptech/glide/s/n;.c:(Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L342274.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L34227a.  v0:= temp;
  #L34227c.  if v0 != 0 then goto L342282;
  #L342280.  return v1 @kind object;
  #L342282.  v1:= new `java.lang.IllegalArgumentException`;
  #L342286.  v0:= "Must not be empty." @kind object;
  #L34228a.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L342290.  throw v1;
}
procedure `java.lang.Object` `d`(`java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/s/n;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L34220c.  v0:= "Argument must not be null" @kind object;
  #L342210.  call temp:= `e`(v1, v0) @signature `Lcom/bumptech/glide/s/n;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L342216.  v1:= temp @kind object;
  #L342218.  return v1 @kind object;
}
procedure `java.lang.Object` `e`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/s/n;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L34222c.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L342232.  return v0 @kind object;
}
