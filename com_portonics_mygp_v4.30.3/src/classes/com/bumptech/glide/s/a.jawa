record `com.bumptech.glide.s.a` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `java.nio.ByteBuffer` `com.bumptech.glide.s.a.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.s.a.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.s.a` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/s/a;.<init>:(Ljava/nio/ByteBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L34124c.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L341252.  v0:= -1I;
  #L341254.  v1.`com.bumptech.glide.s.a.c` @type ^`int` := v0;
  #L341258.  v1.`com.bumptech.glide.s.a.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L34125c.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.s.a` v1 @kind this) @signature `Lcom/bumptech/glide/s/a;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L341164.  v0:= v1.`com.bumptech.glide.s.a.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L341168.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L34116e.  v0:= temp;
  #L341170.  return v0;
}
procedure `void` `mark`(`com.bumptech.glide.s.a` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/s/a;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L341270.  @monitorenter v0
  #L341272.  v1:= v0.`com.bumptech.glide.s.a.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L341276.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L34127c.  v1:= temp;
  #L34127e.  v0.`com.bumptech.glide.s.a.c` @type ^`int` := v1;
  #L341282.  @monitorexit v0
  #L341284.  return @kind void;
  #L341286.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L341288.  @monitorexit v0
  #L34128a.  throw v1;
  catch `java.lang.Throwable` @[L341272..L341282] goto L341286;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.s.a` v1 @kind this) @signature `Lcom/bumptech/glide/s/a;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L341150.  v0:= 1I;
  #L341152.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.s.a` v1 @kind this) @signature `Lcom/bumptech/glide/s/a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L341184.  v0:= v1.`com.bumptech.glide.s.a.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L341188.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L34118e.  v0:= temp;
  #L341190.  if v0 != 0 then goto L341198;
  #L341194.  v0:= -1I;
  #L341196.  return v0;
  #L341198.  v0:= v1.`com.bumptech.glide.s.a.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L34119c.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L3411a2.  v0:= temp;
  #L3411a4.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.s.a` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/s/a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3411b8.  v0:= v1.`com.bumptech.glide.s.a.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3411bc.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L3411c2.  v0:= temp;
  #L3411c4.  if v0 != 0 then goto L3411cc;
  #L3411c8.  v2:= -1I;
  #L3411ca.  return v2;
  #L3411cc.  call temp:= `available`(v1) @signature `Lcom/bumptech/glide/s/a;.available:()I` @kind virtual;
  #L3411d2.  v0:= temp;
  #L3411d4.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3411da.  v4:= temp;
  #L3411dc.  v0:= v1.`com.bumptech.glide.s.a.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3411e0.  call temp:= `get`(v0, v2, v3, v4) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3411e6.  return v4;
}
procedure `void` `reset`(`com.bumptech.glide.s.a` v2 @kind this) @signature `Lcom/bumptech/glide/s/a;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3412a8.  @monitorenter v2
  #L3412aa.  v0:= v2.`com.bumptech.glide.s.a.c` @type ^`int`;
  #L3412ae.  v1:= -1I;
  #L3412b0.  if v0 == v1 then goto L3412c2;
  #L3412b4.  v1:= v2.`com.bumptech.glide.s.a.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3412b8.  call temp:= `position`(v1, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3412be.  @monitorexit v2
  #L3412c0.  return @kind void;
  #L3412c2.  v0:= new `java.io.IOException`;
  #L3412c6.  v1:= "Cannot reset to unset mark position" @kind object;
  #L3412ca.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3412d0.  throw v0;
  #L3412d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3412d4.  @monitorexit v2
  #L3412d6.  throw v0;
  catch `java.lang.Throwable` @[L3412aa..L3412be] goto L3412d2;
  catch `java.lang.Throwable` @[L3412c2..L3412d2] goto L3412d2;
}
procedure `long` `skip`(`com.bumptech.glide.s.a` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/s/a;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3411f8.  v0:= v3.`com.bumptech.glide.s.a.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3411fc.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L341202.  v0:= temp;
  #L341204.  if v0 != 0 then goto L34120e;
  #L341208.  v4:= -1L;
  #L34120c.  return v4 @kind wide;
  #L34120e.  call temp:= `available`(v3) @signature `Lcom/bumptech/glide/s/a;.available:()I` @kind virtual;
  #L341214.  v0:= temp;
  #L341216.  v0:= (`long`) v0 @kind i2l;
  #L341218.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L34121e.  v4:= temp @kind wide;
  #L341220.  v0:= v3.`com.bumptech.glide.s.a.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L341224.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L34122a.  v1:= temp;
  #L34122c.  v1:= (`long`) v1 @kind i2l;
  #L34122e.  v1:= v1 + v4 @kind long;
  #L341230.  v2:= (`int`) v1 @kind l2i;
  #L341232.  call temp:= `position`(v0, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L341238.  return v4 @kind wide;
}
