record `com.bumptech.glide.s.k` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `com.bumptech.glide.s.k.a` @AccessFlag PRIVATE_FINAL;
  `long` `com.bumptech.glide.s.k.b` @AccessFlag PRIVATE_FINAL;
  `long` `com.bumptech.glide.s.k.c` @AccessFlag PRIVATE;
  `long` `com.bumptech.glide.s.k.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.s.k` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/s/k;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L341da8.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L341dae.  v0:= new `java.util.LinkedHashMap`;
  #L341db2.  v1:= 100I;
  #L341db6.  v2:= 0.75F;
  #L341dba.  v3:= 1I;
  #L341dbc.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/LinkedHashMap;.<init>:(IFZ)V` @kind direct;
  #L341dc2.  v4.`com.bumptech.glide.s.k.a` @type ^`java.util.Map` := v0 @kind object;
  #L341dc6.  v4.`com.bumptech.glide.s.k.b` @type ^`long` := v5 @kind wide;
  #L341dca.  v4.`com.bumptech.glide.s.k.c` @type ^`long` := v5 @kind wide;
  #L341dce.  return @kind void;
}
procedure `void` `f`(`com.bumptech.glide.s.k` v2 @kind this) @signature `Lcom/bumptech/glide/s/k;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L341dfc.  v0:= v2.`com.bumptech.glide.s.k.c` @type ^`long` @kind wide;
  #L341e00.  call `m`(v2, v0) @signature `Lcom/bumptech/glide/s/k;.m:(J)V` @kind virtual;
  #L341e06.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.s.k` v2 @kind this) @signature `Lcom/bumptech/glide/s/k;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L341de0.  v0:= 0L;
  #L341de4.  call `m`(v2, v0) @signature `Lcom/bumptech/glide/s/k;.m:(J)V` @kind virtual;
  #L341dea.  return @kind void;
}
procedure `java.lang.Object` `g`(`com.bumptech.glide.s.k` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/s/k;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L341c60.  @monitorenter v1
  #L341c62.  v0:= v1.`com.bumptech.glide.s.k.a` @type ^`java.util.Map` @kind object;
  #L341c66.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L341c6c.  v2:= temp @kind object;
  #L341c6e.  @monitorexit v1
  #L341c70.  return v2 @kind object;
  #L341c72.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L341c74.  @monitorexit v1
  #L341c76.  throw v2;
  catch `java.lang.Throwable` @[L341c62..L341c6e] goto L341c72;
}
procedure `long` `h`(`com.bumptech.glide.s.k` v2 @kind this) @signature `Lcom/bumptech/glide/s/k;.h:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L341d7c.  @monitorenter v2
  #L341d7e.  v0:= v2.`com.bumptech.glide.s.k.c` @type ^`long` @kind wide;
  #L341d82.  @monitorexit v2
  #L341d84.  return v0 @kind wide;
  #L341d86.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L341d88.  @monitorexit v2
  #L341d8a.  throw v0;
  catch `java.lang.Throwable` @[L341d7e..L341d82] goto L341d86;
}
procedure `int` `i`(`com.bumptech.glide.s.k` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/s/k;.i:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;

  #L341c4c.  v1:= 1I;
  #L341c4e.  return v1;
}
procedure `void` `j`(`com.bumptech.glide.s.k` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/s/k;.j:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L341e18.  return @kind void;
}
procedure `java.lang.Object` `k`(`com.bumptech.glide.s.k` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lcom/bumptech/glide/s/k;.k:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L341c94.  @monitorenter v5
  #L341c96.  call temp:= `i`(v5, v7) @signature `Lcom/bumptech/glide/s/k;.i:(Ljava/lang/Object;)I` @kind virtual;
  #L341c9c.  v0:= temp;
  #L341c9e.  v0:= (`long`) v0 @kind i2l;
  #L341ca0.  v2:= v5.`com.bumptech.glide.s.k.c` @type ^`long` @kind wide;
  #L341ca4.  v4:= lcmp(v0, v2);
  #L341ca8.  if v4 < 0 then goto L341cb8;
  #L341cac.  call `j`(v5, v6, v7) @signature `Lcom/bumptech/glide/s/k;.j:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L341cb2.  v6:= 0I;
  #L341cb4.  @monitorexit v5
  #L341cb6.  return v6 @kind object;
  #L341cb8.  if v7 == 0 then goto L341cc6;
  #L341cbc.  v2:= v5.`com.bumptech.glide.s.k.d` @type ^`long` @kind wide;
  #L341cc0.  v2:= v2 + v0 @kind long;
  #L341cc2.  v5.`com.bumptech.glide.s.k.d` @type ^`long` := v2 @kind wide;
  #L341cc6.  v0:= v5.`com.bumptech.glide.s.k.a` @type ^`java.util.Map` @kind object;
  #L341cca.  call temp:= `put`(v0, v6, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L341cd0.  v0:= temp @kind object;
  #L341cd2.  if v0 == 0 then goto L341cfc;
  #L341cd6.  v1:= v5.`com.bumptech.glide.s.k.d` @type ^`long` @kind wide;
  #L341cda.  call temp:= `i`(v5, v0) @signature `Lcom/bumptech/glide/s/k;.i:(Ljava/lang/Object;)I` @kind virtual;
  #L341ce0.  v3:= temp;
  #L341ce2.  v3:= (`long`) v3 @kind i2l;
  #L341ce4.  v1:= v1 - v3 @kind long;
  #L341ce6.  v5.`com.bumptech.glide.s.k.d` @type ^`long` := v1 @kind wide;
  #L341cea.  call temp:= `equals`(v0, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L341cf0.  v7:= temp;
  #L341cf2.  if v7 != 0 then goto L341cfc;
  #L341cf6.  call `j`(v5, v6, v0) @signature `Lcom/bumptech/glide/s/k;.j:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L341cfc.  call `f`(v5) @signature `Lcom/bumptech/glide/s/k;.f:()V` @kind direct;
  #L341d02.  @monitorexit v5
  #L341d04.  return v0 @kind object;
  #L341d06.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L341d08.  @monitorexit v5
  #L341d0a.  throw v6;
  catch `java.lang.Throwable` @[L341c96..L341cb2] goto L341d06;
  catch `java.lang.Throwable` @[L341cbc..L341d02] goto L341d06;
}
procedure `java.lang.Object` `l`(`com.bumptech.glide.s.k` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/bumptech/glide/s/k;.l:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L341d30.  @monitorenter v4
  #L341d32.  v0:= v4.`com.bumptech.glide.s.k.a` @type ^`java.util.Map` @kind object;
  #L341d36.  call temp:= `remove`(v0, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L341d3c.  v5:= temp @kind object;
  #L341d3e.  if v5 == 0 then goto L341d56;
  #L341d42.  v0:= v4.`com.bumptech.glide.s.k.d` @type ^`long` @kind wide;
  #L341d46.  call temp:= `i`(v4, v5) @signature `Lcom/bumptech/glide/s/k;.i:(Ljava/lang/Object;)I` @kind virtual;
  #L341d4c.  v2:= temp;
  #L341d4e.  v2:= (`long`) v2 @kind i2l;
  #L341d50.  v0:= v0 - v2 @kind long;
  #L341d52.  v4.`com.bumptech.glide.s.k.d` @type ^`long` := v0 @kind wide;
  #L341d56.  @monitorexit v4
  #L341d58.  return v5 @kind object;
  #L341d5a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L341d5c.  @monitorexit v4
  #L341d5e.  throw v5;
  catch `java.lang.Throwable` @[L341d32..L341d56] goto L341d5a;
}
procedure `void` `m`(`com.bumptech.glide.s.k` v7 @kind this, `long` v8 ) @signature `Lcom/bumptech/glide/s/k;.m:(J)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L341e2c.  @monitorenter v7
  #L341e2e.  v0:= v7.`com.bumptech.glide.s.k.d` @type ^`long` @kind wide;
  #L341e32.  v2:= lcmp(v0, v8);
  #L341e36.  if v2 <= 0 then goto L341e8c;
  #L341e3a.  v0:= v7.`com.bumptech.glide.s.k.a` @type ^`java.util.Map` @kind object;
  #L341e3e.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L341e44.  v0:= temp @kind object;
  #L341e46.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L341e4c.  v0:= temp @kind object;
  #L341e4e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L341e54.  v1:= temp @kind object;
  #L341e56.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L341e5a.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L341e60.  v2:= temp @kind object;
  #L341e62.  v3:= v7.`com.bumptech.glide.s.k.d` @type ^`long` @kind wide;
  #L341e66.  call temp:= `i`(v7, v2) @signature `Lcom/bumptech/glide/s/k;.i:(Ljava/lang/Object;)I` @kind virtual;
  #L341e6c.  v5:= temp;
  #L341e6e.  v5:= (`long`) v5 @kind i2l;
  #L341e70.  v3:= v3 - v5 @kind long;
  #L341e72.  v7.`com.bumptech.glide.s.k.d` @type ^`long` := v3 @kind wide;
  #L341e76.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L341e7c.  v1:= temp @kind object;
  #L341e7e.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L341e84.  call `j`(v7, v1, v2) @signature `Lcom/bumptech/glide/s/k;.j:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L341e8a.  goto L341e2e;
  #L341e8c.  @monitorexit v7
  #L341e8e.  return @kind void;
  #L341e90.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L341e92.  @monitorexit v7
  #L341e94.  goto L341e98;
  #L341e96.  throw v8;
  #L341e98.  goto L341e96;
  catch `java.lang.Throwable` @[L341e2e..L341e8a] goto L341e90;
}
