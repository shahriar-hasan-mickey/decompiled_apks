record `com.bumptech.glide.s.q.k` @kind class @AccessFlag  extends `com.bumptech.glide.s.q.l` @kind class {
  `boolean` `com.bumptech.glide.s.q.k.a` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`com.bumptech.glide.s.q.k` v1 @kind this) @signature `Lcom/bumptech/glide/s/q/k;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L342b20.  v0:= 0I;
  #L342b22.  call `<init>`(v1, v0) @signature `Lcom/bumptech/glide/s/q/l;.<init>:(Lcom/bumptech/glide/s/q/j;)V` @kind direct;
  #L342b28.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.s.q.k` v0 @kind this, `boolean` v1 ) @signature `Lcom/bumptech/glide/s/q/k;.b:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L342b3c.  v0.`com.bumptech.glide.s.q.k.a` @type ^`boolean` := v1 @kind boolean;
  #L342b40.  return @kind void;
}
procedure `void` `c`(`com.bumptech.glide.s.q.k` v2 @kind this) @signature `Lcom/bumptech/glide/s/q/k;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L342b54.  v0:= v2.`com.bumptech.glide.s.q.k.a` @type ^`boolean` @kind boolean;
  #L342b58.  if v0 != 0 then goto L342b5e;
  #L342b5c.  return @kind void;
  #L342b5e.  v0:= new `java.lang.IllegalStateException`;
  #L342b62.  v1:= "Already released" @kind object;
  #L342b66.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L342b6c.  throw v0;
}
