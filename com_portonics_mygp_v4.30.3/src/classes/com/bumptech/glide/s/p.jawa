record `com.bumptech.glide.s.p` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `char`[] `@@com.bumptech.glide.s.p.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@com.bumptech.glide.s.p.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/s/p;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L342790.  v0:= "0123456789abcdef" @kind object;
  #L342794.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L34279a.  v0:= temp @kind object;
  #L34279c.  `@@com.bumptech.glide.s.p.a` @type ^`char`[] := v0 @kind object;
  #L3427a0.  v0:= 64I;
  #L3427a4.  v0:= new `char`[v0];
  #L3427a8.  `@@com.bumptech.glide.s.p.b` @type ^`char`[] := v0 @kind object;
  #L3427ac.  return @kind void;
}
procedure `void` `a`() @signature `Lcom/bumptech/glide/s/p;.a:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3427c0.  call temp:= `q`() @signature `Lcom/bumptech/glide/s/p;.q:()Z` @kind static;
  #L3427c6.  v0:= temp;
  #L3427c8.  if v0 == 0 then goto L3427ce;
  #L3427cc.  return @kind void;
  #L3427ce.  v0:= new `java.lang.IllegalArgumentException`;
  #L3427d2.  v1:= "You must call this method on a background thread" @kind object;
  #L3427d6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3427dc.  throw v0;
}
procedure `void` `b`() @signature `Lcom/bumptech/glide/s/p;.b:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3427f0.  call temp:= `r`() @signature `Lcom/bumptech/glide/s/p;.r:()Z` @kind static;
  #L3427f6.  v0:= temp;
  #L3427f8.  if v0 == 0 then goto L3427fe;
  #L3427fc.  return @kind void;
  #L3427fe.  v0:= new `java.lang.IllegalArgumentException`;
  #L342802.  v1:= "You must call this method on the main thread" @kind object;
  #L342806.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L34280c.  throw v0;
}
procedure `boolean` `c`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/s/p;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L342398.  if v0 != 0 then goto L3423a8;
  #L34239c.  if v1 != 0 then goto L3423a4;
  #L3423a0.  v0:= 1I;
  #L3423a2.  goto L3423a6;
  #L3423a4.  v0:= 0I;
  #L3423a6.  return v0;
  #L3423a8.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3423ae.  v0:= temp;
  #L3423b0.  return v0;
}
procedure `boolean` `d`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/s/p;.d:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3423c4.  if v0 != 0 then goto L3423d4;
  #L3423c8.  if v1 != 0 then goto L3423d0;
  #L3423cc.  v0:= 1I;
  #L3423ce.  goto L3423dc;
  #L3423d0.  v0:= 0I;
  #L3423d2.  goto L3423dc;
  #L3423d4.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3423da.  v0:= temp;
  #L3423dc.  return v0;
}
procedure `java.lang.String` `e`(`byte`[] v5 @kind object, `char`[] v6 @kind object) @signature `Lcom/bumptech/glide/s/p;.e:([B[C)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L34269c.  v0:= 0I;
  #L34269e.  v1:= length @variable v5;
  #L3426a0.  if v0 >= v1 then goto L3426d6;
  #L3426a4.  v1:= v5[v0] @kind byte;
  #L3426a8.  v1:= v1 ^& 255;
  #L3426ac.  v2:= v0 * 2;
  #L3426b0.  v3:= `@@com.bumptech.glide.s.p.a` @type ^`char`[] @kind object;
  #L3426b4.  v4:= v1 ^>> 4;
  #L3426b8.  v4:= v3[v4] @kind char;
  #L3426bc.  v6[v2]:= v4 @kind char;
  #L3426c0.  v2:= v2 + 1;
  #L3426c4.  v1:= v1 ^& 15;
  #L3426c8.  v1:= v3[v1] @kind char;
  #L3426cc.  v6[v2]:= v1 @kind char;
  #L3426d0.  v0:= v0 + 1;
  #L3426d4.  goto L34269e;
  #L3426d6.  v5:= new `java.lang.String`;
  #L3426da.  call `<init>`(v5, v6) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L3426e0.  return v5 @kind object;
}
procedure `java.util.Queue` `f`(`int` v1 ) @signature `Lcom/bumptech/glide/s/p;.f:(I)Ljava/util/Queue;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L342774.  v0:= new `java.util.ArrayDeque`;
  #L342778.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L34277e.  return v0 @kind object;
}
procedure `int` `g`(`int` v0 , `int` v1 , `android.graphics.Bitmap$Config` v2 @kind object) @signature `Lcom/bumptech/glide/s/p;.g:(IILandroid/graphics/Bitmap$Config;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L342564.  v0:= v0 * v1 @kind int;
  #L342568.  call temp:= `i`(v2) @signature `Lcom/bumptech/glide/s/p;.i:(Landroid/graphics/Bitmap$Config;)I` @kind static;
  #L34256e.  v1:= temp;
  #L342570.  v0:= v0 * v1 @kind int;
  #L342574.  return v0;
}
procedure `int` `h`(`android.graphics.Bitmap` v3 @kind object) @signature `Lcom/bumptech/glide/s/p;.h:(Landroid/graphics/Bitmap;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L342494.  call temp:= `isRecycled`(v3) @signature `Landroid/graphics/Bitmap;.isRecycled:()Z` @kind virtual;
  #L34249a.  v0:= temp;
  #L34249c.  if v0 != 0 then goto L3424cc;
  #L3424a0.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L3424a4.  v1:= 19I;
  #L3424a8.  if v0 < v1 then goto L3424b6;
  #L3424ac.  call temp:= `getAllocationByteCount`(v3) @signature `Landroid/graphics/Bitmap;.getAllocationByteCount:()I` @kind virtual;
  #L3424b2.  v3:= temp;
  #L3424b4.  return v3;
  #L3424b6.  call temp:= `getHeight`(v3) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L3424bc.  v0:= temp;
  #L3424be.  call temp:= `getRowBytes`(v3) @signature `Landroid/graphics/Bitmap;.getRowBytes:()I` @kind virtual;
  #L3424c4.  v3:= temp;
  #L3424c6.  v0:= v0 * v3 @kind int;
  #L3424ca.  return v0;
  #L3424cc.  v0:= new `java.lang.IllegalStateException`;
  #L3424d0.  v1:= new `java.lang.StringBuilder`;
  #L3424d4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3424da.  v2:= "Cannot obtain size for recycled Bitmap: " @kind object;
  #L3424de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3424e4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3424ea.  v2:= "[" @kind object;
  #L3424ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3424f4.  call temp:= `getWidth`(v3) @signature `Landroid/graphics/Bitmap;.getWidth:()I` @kind virtual;
  #L3424fa.  v2:= temp;
  #L3424fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L342502.  v2:= "x" @kind object;
  #L342506.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L34250c.  call temp:= `getHeight`(v3) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L342512.  v2:= temp;
  #L342514.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L34251a.  v2:= "] " @kind object;
  #L34251e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L342524.  call temp:= `getConfig`(v3) @signature `Landroid/graphics/Bitmap;.getConfig:()Landroid/graphics/Bitmap$Config;` @kind virtual;
  #L34252a.  v3:= temp @kind object;
  #L34252c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L342532.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L342538.  v3:= temp @kind object;
  #L34253a.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L342540.  throw v0;
  catch `java.lang.NullPointerException` @[L3424ac..L3424b4] goto L3424b6;
}
procedure `int` `i`(`android.graphics.Bitmap$Config` v3 @kind object) @signature `Lcom/bumptech/glide/s/p;.i:(Landroid/graphics/Bitmap$Config;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L342588.  if v3 != 0 then goto L342590;
  #L34258c.  v3:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L342590.  v0:= `@@com.bumptech.glide.s.o.a` @type ^`int`[] @kind object;
  #L342594.  call temp:= `ordinal`(v3) @signature `Landroid/graphics/Bitmap$Config;.ordinal:()I` @kind virtual;
  #L34259a.  v3:= temp;
  #L34259c.  v3:= v0[v3];
  #L3425a0.  v0:= 4I;
  #L3425a2.  v1:= 2I;
  #L3425a4.  v2:= 1I;
  #L3425a6.  if v3 == v2 then goto L3425c4;
  #L3425aa.  if v3 == v1 then goto L3425c0;
  #L3425ae.  v2:= 3I;
  #L3425b0.  if v3 == v2 then goto L3425c0;
  #L3425b4.  if v3 == v0 then goto L3425ba;
  #L3425b8.  goto L3425c6;
  #L3425ba.  v0:= 8I;
  #L3425be.  goto L3425c6;
  #L3425c0.  v0:= 2I;
  #L3425c2.  goto L3425c6;
  #L3425c4.  v0:= 1I;
  #L3425c6.  return v0;
}
procedure `java.util.List` `j`(`java.util.Collection` v2 @kind object) @signature `Lcom/bumptech/glide/s/p;.j:(Ljava/util/Collection;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L342728.  v0:= new `java.util.ArrayList`;
  #L34272c.  call temp:= `size`(v2) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L342732.  v1:= temp;
  #L342734.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L34273a.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L342740.  v2:= temp @kind object;
  #L342742.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L342748.  v1:= temp;
  #L34274a.  if v1 == 0 then goto L342762;
  #L34274e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L342754.  v1:= temp @kind object;
  #L342756.  if v1 == 0 then goto L342742;
  #L34275a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L342760.  goto L342742;
  #L342762.  return v0 @kind object;
}
procedure `int` `k`(`float` v1 ) @signature `Lcom/bumptech/glide/s/p;.k:(F)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3425f4.  v0:= 17I;
  #L3425f8.  call temp:= `l`(v1, v0) @signature `Lcom/bumptech/glide/s/p;.l:(FI)I` @kind static;
  #L3425fe.  v1:= temp;
  #L342600.  return v1;
}
procedure `int` `l`(`float` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/s/p;.l:(FI)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L342614.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L34261a.  v0:= temp;
  #L34261c.  call temp:= `n`(v0, v1) @signature `Lcom/bumptech/glide/s/p;.n:(II)I` @kind static;
  #L342622.  v0:= temp;
  #L342624.  return v0;
}
procedure `int` `m`(`int` v1 ) @signature `Lcom/bumptech/glide/s/p;.m:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L342638.  v0:= 17I;
  #L34263c.  call temp:= `n`(v1, v0) @signature `Lcom/bumptech/glide/s/p;.n:(II)I` @kind static;
  #L342642.  v1:= temp;
  #L342644.  return v1;
}
procedure `int` `n`(`int` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/s/p;.n:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L342658.  v1:= v1 * 31;
  #L34265c.  v1:= v1 + v0 @kind int;
  #L34265e.  return v1;
}
procedure `int` `o`(`java.lang.Object` v0 @kind object, `int` v1 ) @signature `Lcom/bumptech/glide/s/p;.o:(Ljava/lang/Object;I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L342670.  if v0 != 0 then goto L342678;
  #L342674.  v0:= 0I;
  #L342676.  goto L342680;
  #L342678.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L34267e.  v0:= temp;
  #L342680.  call temp:= `n`(v0, v1) @signature `Lcom/bumptech/glide/s/p;.n:(II)I` @kind static;
  #L342686.  v0:= temp;
  #L342688.  return v0;
}
procedure `int` `p`(`boolean` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/s/p;.p:(ZI)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3425d8.  call temp:= `n`(v0, v1) @signature `Lcom/bumptech/glide/s/p;.n:(II)I` @kind static;
  #L3425de.  v0:= temp;
  #L3425e0.  return v0;
}
procedure `boolean` `q`() @signature `Lcom/bumptech/glide/s/p;.q:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3423f0.  call temp:= `r`() @signature `Lcom/bumptech/glide/s/p;.r:()Z` @kind static;
  #L3423f6.  v0:= temp;
  #L3423f8.  v0:= v0 ^~ 1;
  #L3423fc.  return v0;
}
procedure `boolean` `r`() @signature `Lcom/bumptech/glide/s/p;.r:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L342410.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L342416.  v0:= temp @kind object;
  #L342418.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L34241e.  v1:= temp @kind object;
  #L342420.  if v0 != v1 then goto L342428;
  #L342424.  v0:= 1I;
  #L342426.  goto L34242a;
  #L342428.  v0:= 0I;
  #L34242a.  return v0;
}
procedure `boolean` `s`(`int` v1 ) @signature `Lcom/bumptech/glide/s/p;.s:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L34243c.  if v1 > 0 then goto L34244e;
  #L342440.  v0:= -2147483648I;
  #L342444.  if v1 != v0 then goto L34244a;
  #L342448.  goto L34244e;
  #L34244a.  v1:= 0I;
  #L34244c.  goto L342450;
  #L34244e.  v1:= 1I;
  #L342450.  return v1;
}
procedure `boolean` `t`(`int` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/s/p;.t:(II)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L342464.  call temp:= `s`(v0) @signature `Lcom/bumptech/glide/s/p;.s:(I)Z` @kind static;
  #L34246a.  v0:= temp;
  #L34246c.  if v0 == 0 then goto L342480;
  #L342470.  call temp:= `s`(v1) @signature `Lcom/bumptech/glide/s/p;.s:(I)Z` @kind static;
  #L342476.  v0:= temp;
  #L342478.  if v0 == 0 then goto L342480;
  #L34247c.  v0:= 1I;
  #L34247e.  goto L342482;
  #L342480.  v0:= 0I;
  #L342482.  return v0;
}
procedure `java.lang.String` `u`(`byte`[] v1 @kind object) @signature `Lcom/bumptech/glide/s/p;.u:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3426f4.  v0:= `@@com.bumptech.glide.s.p.b` @type ^`char`[] @kind object;
  #L3426f8.  @monitorenter v0
  #L3426fa.  call temp:= `e`(v1, v0) @signature `Lcom/bumptech/glide/s/p;.e:([B[C)Ljava/lang/String;` @kind static;
  #L342700.  v1:= temp @kind object;
  #L342702.  @monitorexit v0
  #L342704.  return v1 @kind object;
  #L342706.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L342708.  @monitorexit v0
  #L34270a.  throw v1;
  catch `java.lang.Throwable` @[L3426fa..L34270a] goto L342706;
}
