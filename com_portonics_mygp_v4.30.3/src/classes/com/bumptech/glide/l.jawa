record `com.bumptech.glide.l` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Cloneable` @kind interface {
  `com.bumptech.glide.request.n.h` `com.bumptech.glide.l.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.l` v1 @kind this) @signature `Lcom/bumptech/glide/l;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3223b8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3223be.  call temp:= `c`() @signature `Lcom/bumptech/glide/request/n/e;.c:()Lcom/bumptech/glide/request/n/h;` @kind static;
  #L3223c4.  v0:= temp @kind object;
  #L3223c6.  v1.`com.bumptech.glide.l.b` @type ^`com.bumptech.glide.request.n.h` := v0 @kind object;
  #L3223ca.  return @kind void;
}
procedure `com.bumptech.glide.l` `d`(`com.bumptech.glide.l` v0 @kind this) @signature `Lcom/bumptech/glide/l;.d:()Lcom/bumptech/glide/l;` @AccessFlag PRIVATE {
    temp;

  #L322344.  return v0 @kind object;
}
procedure `com.bumptech.glide.l` `a`(`com.bumptech.glide.l` v2 @kind this) @signature `Lcom/bumptech/glide/l;.a:()Lcom/bumptech/glide/l;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L322308.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L32230e.  v0:= temp @kind object;
  #L322310.  v0:= (`com.bumptech.glide.l`) v0 @kind object;
  #L322314.  return v0 @kind object;
  #L322316.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L322318.  v1:= new `java.lang.RuntimeException`;
  #L32231c.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L322322.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L322308..L322314] goto L322316;
}
procedure `com.bumptech.glide.request.n.h` `b`(`com.bumptech.glide.l` v1 @kind this) @signature `Lcom/bumptech/glide/l;.b:()Lcom/bumptech/glide/request/n/h;` @AccessFlag FINAL {
    temp;
    v0;

  #L322384.  v0:= v1.`com.bumptech.glide.l.b` @type ^`com.bumptech.glide.request.n.h` @kind object;
  #L322388.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`com.bumptech.glide.l` v1 @kind this) @signature `Lcom/bumptech/glide/l;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L32239c.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/l;.a:()Lcom/bumptech/glide/l;` @kind virtual;
  #L3223a2.  v0:= temp @kind object;
  #L3223a4.  return v0 @kind object;
}
procedure `com.bumptech.glide.l` `e`(`com.bumptech.glide.l` v0 @kind this, `com.bumptech.glide.request.n.h` v1 @kind object) @signature `Lcom/bumptech/glide/l;.e:(Lcom/bumptech/glide/request/n/h;)Lcom/bumptech/glide/l;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L322358.  call temp:= `d`(v1) @signature `Lcom/bumptech/glide/s/n;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32235e.  v1:= temp @kind object;
  #L322360.  v1:= (`com.bumptech.glide.request.n.h`) v1 @kind object;
  #L322364.  v0.`com.bumptech.glide.l.b` @type ^`com.bumptech.glide.request.n.h` := v1 @kind object;
  #L322368.  call temp:= `d`(v0) @signature `Lcom/bumptech/glide/l;.d:()Lcom/bumptech/glide/l;` @kind direct;
  #L32236e.  v1:= temp @kind object;
  #L322370.  return v1 @kind object;
}
