record `com.airbnb.lottie.a1.d` @kind class @AccessFlag PUBLIC {
  `float` `com.airbnb.lottie.a1.d.a` @AccessFlag PRIVATE;
  `float` `com.airbnb.lottie.a1.d.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.airbnb.lottie.a1.d` v1 @kind this) @signature `Lcom/airbnb/lottie/a1/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L307f30.  v0:= 1.0F;
  #L307f34.  call `<init>`(v1, v0, v0) @signature `Lcom/airbnb/lottie/a1/d;.<init>:(FF)V` @kind direct;
  #L307f3a.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.a1.d` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lcom/airbnb/lottie/a1/d;.<init>:(FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L307f4c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L307f52.  v0.`com.airbnb.lottie.a1.d.a` @type ^`float` := v1;
  #L307f56.  v0.`com.airbnb.lottie.a1.d.b` @type ^`float` := v2;
  #L307f5a.  return @kind void;
}
procedure `boolean` `a`(`com.airbnb.lottie.a1.d` v1 @kind this, `float` v2 , `float` v3 ) @signature `Lcom/airbnb/lottie/a1/d;.a:(FF)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L307e84.  v0:= v1.`com.airbnb.lottie.a1.d.a` @type ^`float`;
  #L307e88.  v2:= fcmpl(v0, v2);
  #L307e8c.  if v2 != 0 then goto L307ea0;
  #L307e90.  v2:= v1.`com.airbnb.lottie.a1.d.b` @type ^`float`;
  #L307e94.  v2:= fcmpl(v2, v3);
  #L307e98.  if v2 != 0 then goto L307ea0;
  #L307e9c.  v2:= 1I;
  #L307e9e.  goto L307ea2;
  #L307ea0.  v2:= 0I;
  #L307ea2.  return v2;
}
procedure `float` `b`(`com.airbnb.lottie.a1.d` v1 @kind this) @signature `Lcom/airbnb/lottie/a1/d;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L307eb4.  v0:= v1.`com.airbnb.lottie.a1.d.a` @type ^`float`;
  #L307eb8.  return v0;
}
procedure `float` `c`(`com.airbnb.lottie.a1.d` v1 @kind this) @signature `Lcom/airbnb/lottie/a1/d;.c:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L307ecc.  v0:= v1.`com.airbnb.lottie.a1.d.b` @type ^`float`;
  #L307ed0.  return v0;
}
procedure `void` `d`(`com.airbnb.lottie.a1.d` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lcom/airbnb/lottie/a1/d;.d:(FF)V` @AccessFlag PUBLIC {
    temp;

  #L307f6c.  v0.`com.airbnb.lottie.a1.d.a` @type ^`float` := v1;
  #L307f70.  v0.`com.airbnb.lottie.a1.d.b` @type ^`float` := v2;
  #L307f74.  return @kind void;
}
procedure `java.lang.String` `toString`(`com.airbnb.lottie.a1.d` v2 @kind this) @signature `Lcom/airbnb/lottie/a1/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L307ee4.  v0:= new `java.lang.StringBuilder`;
  #L307ee8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L307eee.  call temp:= `b`(v2) @signature `Lcom/airbnb/lottie/a1/d;.b:()F` @kind virtual;
  #L307ef4.  v1:= temp;
  #L307ef6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L307efc.  v1:= "x" @kind object;
  #L307f00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L307f06.  call temp:= `c`(v2) @signature `Lcom/airbnb/lottie/a1/d;.c:()F` @kind virtual;
  #L307f0c.  v1:= temp;
  #L307f0e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L307f14.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L307f1a.  v0:= temp @kind object;
  #L307f1c.  return v0 @kind object;
}
