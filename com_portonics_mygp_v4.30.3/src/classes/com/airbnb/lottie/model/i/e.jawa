record `com.airbnb.lottie.model.i.e` @kind class @AccessFlag PUBLIC extends `com.airbnb.lottie.model.i.m` @kind interface {
  `java.util.List` `com.airbnb.lottie.model.i.e.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.airbnb.lottie.model.i.e` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lcom/airbnb/lottie/model/i/e;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f7620.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f7626.  v0.`com.airbnb.lottie.model.i.e.a` @type ^`java.util.List` := v1 @kind object;
  #L2f762a.  return @kind void;
}
procedure `com.airbnb.lottie.w0.c.g` `a`(`com.airbnb.lottie.model.i.e` v2 @kind this) @signature `Lcom/airbnb/lottie/model/i/e;.a:()Lcom/airbnb/lottie/w0/c/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f75b8.  v0:= v2.`com.airbnb.lottie.model.i.e.a` @type ^`java.util.List` @kind object;
  #L2f75bc.  v1:= 0I;
  #L2f75be.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f75c4.  v0:= temp @kind object;
  #L2f75c6.  v0:= (`com.airbnb.lottie.a1.a`) v0 @kind object;
  #L2f75ca.  call temp:= `h`(v0) @signature `Lcom/airbnb/lottie/a1/a;.h:()Z` @kind virtual;
  #L2f75d0.  v0:= temp;
  #L2f75d2.  if v0 == 0 then goto L2f75e6;
  #L2f75d6.  v0:= new `com.airbnb.lottie.w0.c.r`;
  #L2f75da.  v1:= v2.`com.airbnb.lottie.model.i.e.a` @type ^`java.util.List` @kind object;
  #L2f75de.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/w0/c/r;.<init>:(Ljava/util/List;)V` @kind direct;
  #L2f75e4.  return v0 @kind object;
  #L2f75e6.  v0:= new `com.airbnb.lottie.w0.c.q`;
  #L2f75ea.  v1:= v2.`com.airbnb.lottie.model.i.e.a` @type ^`java.util.List` @kind object;
  #L2f75ee.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/w0/c/q;.<init>:(Ljava/util/List;)V` @kind direct;
  #L2f75f4.  return v0 @kind object;
}
procedure `java.util.List` `b`(`com.airbnb.lottie.model.i.e` v1 @kind this) @signature `Lcom/airbnb/lottie/model/i/e;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7608.  v0:= v1.`com.airbnb.lottie.model.i.e.a` @type ^`java.util.List` @kind object;
  #L2f760c.  return v0 @kind object;
}
procedure `boolean` `c`(`com.airbnb.lottie.model.i.e` v3 @kind this) @signature `Lcom/airbnb/lottie/model/i/e;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f7574.  v0:= v3.`com.airbnb.lottie.model.i.e.a` @type ^`java.util.List` @kind object;
  #L2f7578.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f757e.  v0:= temp;
  #L2f7580.  v1:= 0I;
  #L2f7582.  v2:= 1I;
  #L2f7584.  if v0 != v2 then goto L2f75a6;
  #L2f7588.  v0:= v3.`com.airbnb.lottie.model.i.e.a` @type ^`java.util.List` @kind object;
  #L2f758c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f7592.  v0:= temp @kind object;
  #L2f7594.  v0:= (`com.airbnb.lottie.a1.a`) v0 @kind object;
  #L2f7598.  call temp:= `h`(v0) @signature `Lcom/airbnb/lottie/a1/a;.h:()Z` @kind virtual;
  #L2f759e.  v0:= temp;
  #L2f75a0.  if v0 == 0 then goto L2f75a6;
  #L2f75a4.  v1:= 1I;
  #L2f75a6.  return v1;
}
