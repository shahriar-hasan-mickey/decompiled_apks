record `com.airbnb.lottie.model.i.n` @kind class @AccessFlag ABSTRACT extends `com.airbnb.lottie.model.i.m` @kind interface {
  `java.util.List` `com.airbnb.lottie.model.i.n.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.airbnb.lottie.model.i.n` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lcom/airbnb/lottie/model/i/n;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2f7bac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f7bb2.  v0.`com.airbnb.lottie.model.i.n.a` @type ^`java.util.List` := v1 @kind object;
  #L2f7bb6.  return @kind void;
}
procedure `java.util.List` `b`(`com.airbnb.lottie.model.i.n` v1 @kind this) @signature `Lcom/airbnb/lottie/model/i/n;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7b94.  v0:= v1.`com.airbnb.lottie.model.i.n.a` @type ^`java.util.List` @kind object;
  #L2f7b98.  return v0 @kind object;
}
procedure `boolean` `c`(`com.airbnb.lottie.model.i.n` v3 @kind this) @signature `Lcom/airbnb/lottie/model/i/n;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f7ae8.  v0:= v3.`com.airbnb.lottie.model.i.n.a` @type ^`java.util.List` @kind object;
  #L2f7aec.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2f7af2.  v0:= temp;
  #L2f7af4.  v1:= 0I;
  #L2f7af6.  v2:= 1I;
  #L2f7af8.  if v0 != 0 then goto L2f7b28;
  #L2f7afc.  v0:= v3.`com.airbnb.lottie.model.i.n.a` @type ^`java.util.List` @kind object;
  #L2f7b00.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f7b06.  v0:= temp;
  #L2f7b08.  if v0 != v2 then goto L2f7b2a;
  #L2f7b0c.  v0:= v3.`com.airbnb.lottie.model.i.n.a` @type ^`java.util.List` @kind object;
  #L2f7b10.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f7b16.  v0:= temp @kind object;
  #L2f7b18.  v0:= (`com.airbnb.lottie.a1.a`) v0 @kind object;
  #L2f7b1c.  call temp:= `h`(v0) @signature `Lcom/airbnb/lottie/a1/a;.h:()Z` @kind virtual;
  #L2f7b22.  v0:= temp;
  #L2f7b24.  if v0 == 0 then goto L2f7b2a;
  #L2f7b28.  v1:= 1I;
  #L2f7b2a.  return v1;
}
procedure `java.lang.String` `toString`(`com.airbnb.lottie.model.i.n` v2 @kind this) @signature `Lcom/airbnb/lottie/model/i/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f7b3c.  v0:= new `java.lang.StringBuilder`;
  #L2f7b40.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f7b46.  v1:= v2.`com.airbnb.lottie.model.i.n.a` @type ^`java.util.List` @kind object;
  #L2f7b4a.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2f7b50.  v1:= temp;
  #L2f7b52.  if v1 != 0 then goto L2f7b7a;
  #L2f7b56.  v1:= "values=" @kind object;
  #L2f7b5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7b60.  v1:= v2.`com.airbnb.lottie.model.i.n.a` @type ^`java.util.List` @kind object;
  #L2f7b64.  call temp:= `toArray`(v1) @signature `Ljava/util/List;.toArray:()[Ljava/lang/Object;` @kind interface;
  #L2f7b6a.  v1:= temp @kind object;
  #L2f7b6c.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2f7b72.  v1:= temp @kind object;
  #L2f7b74.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7b7a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f7b80.  v0:= temp @kind object;
  #L2f7b82.  return v0 @kind object;
}
