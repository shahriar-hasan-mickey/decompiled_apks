record `com.airbnb.lottie.model.c` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.airbnb.lottie.model.c.a` @AccessFlag PRIVATE_FINAL;
  `char` `com.airbnb.lottie.model.c.b` @AccessFlag PRIVATE_FINAL;
  `double` `com.airbnb.lottie.model.c.c` @AccessFlag PRIVATE_FINAL;
  `double` `com.airbnb.lottie.model.c.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.airbnb.lottie.model.c.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.airbnb.lottie.model.c.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.airbnb.lottie.model.c` v0 @kind this, `java.util.List` v1 @kind object, `char` v2 , `double` v3 , `double` v5 , `java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lcom/airbnb/lottie/model/c;.<init>:(Ljava/util/List;CDDLjava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f6b0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f6b12.  v0.`com.airbnb.lottie.model.c.a` @type ^`java.util.List` := v1 @kind object;
  #L2f6b16.  v0.`com.airbnb.lottie.model.c.b` @type ^`char` := v2 @kind char;
  #L2f6b1a.  v0.`com.airbnb.lottie.model.c.c` @type ^`double` := v3 @kind wide;
  #L2f6b1e.  v0.`com.airbnb.lottie.model.c.d` @type ^`double` := v5 @kind wide;
  #L2f6b22.  v0.`com.airbnb.lottie.model.c.e` @type ^`java.lang.String` := v7 @kind object;
  #L2f6b26.  v0.`com.airbnb.lottie.model.c.f` @type ^`java.lang.String` := v8 @kind object;
  #L2f6b2a.  return @kind void;
}
procedure `int` `c`(`char` v1 , `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/airbnb/lottie/model/c;.c:(CLjava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f6ac0.  v0:= 0I;
  #L2f6ac2.  v0:= v0 + v1 @kind int;
  #L2f6ac4.  v0:= v0 * 31;
  #L2f6ac8.  call temp:= `hashCode`(v2) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2f6ace.  v1:= temp;
  #L2f6ad0.  v0:= v0 + v1 @kind int;
  #L2f6ad2.  v0:= v0 * 31;
  #L2f6ad6.  call temp:= `hashCode`(v3) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2f6adc.  v1:= temp;
  #L2f6ade.  v0:= v0 + v1 @kind int;
  #L2f6ae0.  return v0;
}
procedure `java.util.List` `a`(`com.airbnb.lottie.model.c` v1 @kind this) @signature `Lcom/airbnb/lottie/model/c;.a:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f6af4.  v0:= v1.`com.airbnb.lottie.model.c.a` @type ^`java.util.List` @kind object;
  #L2f6af8.  return v0 @kind object;
}
procedure `double` `b`(`com.airbnb.lottie.model.c` v2 @kind this) @signature `Lcom/airbnb/lottie/model/c;.b:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f6a80.  v0:= v2.`com.airbnb.lottie.model.c.d` @type ^`double` @kind wide;
  #L2f6a84.  return v0 @kind wide;
}
procedure `int` `hashCode`(`com.airbnb.lottie.model.c` v3 @kind this) @signature `Lcom/airbnb/lottie/model/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f6a98.  v0:= v3.`com.airbnb.lottie.model.c.b` @type ^`char` @kind char;
  #L2f6a9c.  v1:= v3.`com.airbnb.lottie.model.c.f` @type ^`java.lang.String` @kind object;
  #L2f6aa0.  v2:= v3.`com.airbnb.lottie.model.c.e` @type ^`java.lang.String` @kind object;
  #L2f6aa4.  call temp:= `c`(v0, v1, v2) @signature `Lcom/airbnb/lottie/model/c;.c:(CLjava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2f6aaa.  v0:= temp;
  #L2f6aac.  return v0;
}
