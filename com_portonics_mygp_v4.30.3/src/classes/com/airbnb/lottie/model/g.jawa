record `com.airbnb.lottie.model.g` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `com.airbnb.lottie.model.g.a` @AccessFlag PRIVATE_FINAL;
  `float` `com.airbnb.lottie.model.g.b` @AccessFlag PUBLIC_FINAL;
  `float` `com.airbnb.lottie.model.g.c` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`com.airbnb.lottie.model.g` v0 @kind this, `java.lang.String` v1 @kind object, `float` v2 , `float` v3 ) @signature `Lcom/airbnb/lottie/model/g;.<init>:(Ljava/lang/String;FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f71dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f71e2.  v0.`com.airbnb.lottie.model.g.a` @type ^`java.lang.String` := v1 @kind object;
  #L2f71e6.  v0.`com.airbnb.lottie.model.g.c` @type ^`float` := v3;
  #L2f71ea.  v0.`com.airbnb.lottie.model.g.b` @type ^`float` := v2;
  #L2f71ee.  return @kind void;
}
procedure `boolean` `a`(`com.airbnb.lottie.model.g` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lcom/airbnb/lottie/model/g;.a:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f7178.  v0:= v4.`com.airbnb.lottie.model.g.a` @type ^`java.lang.String` @kind object;
  #L2f717c.  call temp:= `equalsIgnoreCase`(v0, v5) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2f7182.  v0:= temp;
  #L2f7184.  v1:= 1I;
  #L2f7186.  if v0 == 0 then goto L2f718c;
  #L2f718a.  return v1;
  #L2f718c.  v0:= v4.`com.airbnb.lottie.model.g.a` @type ^`java.lang.String` @kind object;
  #L2f7190.  v2:= "\r" @kind object;
  #L2f7194.  call temp:= `endsWith`(v0, v2) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2f719a.  v0:= temp;
  #L2f719c.  v2:= 0I;
  #L2f719e.  if v0 == 0 then goto L2f71c6;
  #L2f71a2.  v0:= v4.`com.airbnb.lottie.model.g.a` @type ^`java.lang.String` @kind object;
  #L2f71a6.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f71ac.  v3:= temp;
  #L2f71ae.  v3:= v3 - v1 @kind int;
  #L2f71b0.  call temp:= `substring`(v0, v2, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2f71b6.  v0:= temp @kind object;
  #L2f71b8.  call temp:= `equalsIgnoreCase`(v0, v5) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2f71be.  v5:= temp;
  #L2f71c0.  if v5 == 0 then goto L2f71c6;
  #L2f71c4.  goto L2f71c8;
  #L2f71c6.  v1:= 0I;
  #L2f71c8.  return v1;
}
