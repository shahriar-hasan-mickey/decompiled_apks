record `com.airbnb.lottie.model.d` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.airbnb.lottie.model.d.b` @AccessFlag PRIVATE_FINAL;
  `com.airbnb.lottie.model.e` `com.airbnb.lottie.model.d.c` @AccessFlag PRIVATE;
}
global `com.airbnb.lottie.model.d` `@@com.airbnb.lottie.model.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/model/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2f7040.  v0:= new `com.airbnb.lottie.model.d`;
  #L2f7044.  v1:= "COMPOSITION" @kind object;
  #L2f7048.  temp:= new `java.lang.String`[v1];
  #L2f704e.  v1:= temp @kind object;
  #L2f7050.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/model/d;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L2f7056.  `@@com.airbnb.lottie.model.d.a` @type ^`com.airbnb.lottie.model.d` := v0 @kind object;
  #L2f705a.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.model.d` v2 @kind this, `com.airbnb.lottie.model.d` v3 @kind object) @signature `Lcom/airbnb/lottie/model/d;.<init>:(Lcom/airbnb/lottie/model/d;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2f706c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f7072.  v0:= new `java.util.ArrayList`;
  #L2f7076.  v1:= v3.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f707a.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2f7080.  v2.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` := v0 @kind object;
  #L2f7084.  v3:= v3.`com.airbnb.lottie.model.d.c` @type ^`com.airbnb.lottie.model.e` @kind object;
  #L2f7088.  v2.`com.airbnb.lottie.model.d.c` @type ^`com.airbnb.lottie.model.e` := v3 @kind object;
  #L2f708c.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.model.d` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lcom/airbnb/lottie/model/d;.<init>:([Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f70a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f70a6.  call temp:= `asList`(v1) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2f70ac.  v1:= temp @kind object;
  #L2f70ae.  v0.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` := v1 @kind object;
  #L2f70b2.  return @kind void;
}
procedure `boolean` `b`(`com.airbnb.lottie.model.d` v2 @kind this) @signature `Lcom/airbnb/lottie/model/d;.b:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2f6bc4.  v0:= v2.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6bc8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6bce.  v1:= temp;
  #L2f6bd0.  v1:= v1 + -1;
  #L2f6bd4.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6bda.  v0:= temp @kind object;
  #L2f6bdc.  v0:= (`java.lang.String`) v0 @kind object;
  #L2f6be0.  v1:= "**" @kind object;
  #L2f6be4.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6bea.  v0:= temp;
  #L2f6bec.  return v0;
}
procedure `boolean` `f`(`com.airbnb.lottie.model.d` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/airbnb/lottie/model/d;.f:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2f6db8.  v0:= "__container" @kind object;
  #L2f6dbc.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6dc2.  v2:= temp;
  #L2f6dc4.  return v2;
}
procedure `com.airbnb.lottie.model.d` `a`(`com.airbnb.lottie.model.d` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/airbnb/lottie/model/d;.a:(Ljava/lang/String;)Lcom/airbnb/lottie/model/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f6ecc.  v0:= new `com.airbnb.lottie.model.d`;
  #L2f6ed0.  call `<init>`(v0, v2) @signature `Lcom/airbnb/lottie/model/d;.<init>:(Lcom/airbnb/lottie/model/d;)V` @kind direct;
  #L2f6ed6.  v1:= v0.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6eda.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f6ee0.  return v0 @kind object;
}
procedure `boolean` `c`(`com.airbnb.lottie.model.d` v5 @kind this, `java.lang.String` v6 @kind object, `int` v7 ) @signature `Lcom/airbnb/lottie/model/d;.c:(Ljava/lang/String;I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2f6c6c.  v0:= v5.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6c70.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6c76.  v0:= temp;
  #L2f6c78.  v1:= 0I;
  #L2f6c7a.  if v7 < v0 then goto L2f6c80;
  #L2f6c7e.  return v1;
  #L2f6c80.  v0:= v5.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6c84.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6c8a.  v0:= temp;
  #L2f6c8c.  v2:= 1I;
  #L2f6c8e.  v0:= v0 - v2 @kind int;
  #L2f6c90.  if v7 != v0 then goto L2f6c98;
  #L2f6c94.  v0:= 1I;
  #L2f6c96.  goto L2f6c9a;
  #L2f6c98.  v0:= 0I;
  #L2f6c9a.  v3:= v5.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6c9e.  call temp:= `get`(v3, v7) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6ca4.  v3:= temp @kind object;
  #L2f6ca6.  v3:= (`java.lang.String`) v3 @kind object;
  #L2f6caa.  v4:= "**" @kind object;
  #L2f6cae.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6cb4.  v4:= temp;
  #L2f6cb6.  if v4 != 0 then goto L2f6d0a;
  #L2f6cba.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6cc0.  v6:= temp;
  #L2f6cc2.  if v6 != 0 then goto L2f6cdc;
  #L2f6cc6.  v6:= "*" @kind object;
  #L2f6cca.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6cd0.  v6:= temp;
  #L2f6cd2.  if v6 == 0 then goto L2f6cd8;
  #L2f6cd6.  goto L2f6cdc;
  #L2f6cd8.  v6:= 0I;
  #L2f6cda.  goto L2f6cde;
  #L2f6cdc.  v6:= 1I;
  #L2f6cde.  if v0 != 0 then goto L2f6d02;
  #L2f6ce2.  v0:= v5.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6ce6.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6cec.  v0:= temp;
  #L2f6cee.  v0:= v0 + -2;
  #L2f6cf2.  if v7 != v0 then goto L2f6d08;
  #L2f6cf6.  call temp:= `b`(v5) @signature `Lcom/airbnb/lottie/model/d;.b:()Z` @kind direct;
  #L2f6cfc.  v7:= temp;
  #L2f6cfe.  if v7 == 0 then goto L2f6d08;
  #L2f6d02.  if v6 == 0 then goto L2f6d08;
  #L2f6d06.  v1:= 1I;
  #L2f6d08.  return v1;
  #L2f6d0a.  if v0 != 0 then goto L2f6d32;
  #L2f6d0e.  v3:= v5.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6d12.  v4:= v7 + 1;
  #L2f6d16.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6d1c.  v3:= temp @kind object;
  #L2f6d1e.  v3:= (`java.lang.String`) v3 @kind object;
  #L2f6d22.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6d28.  v3:= temp;
  #L2f6d2a.  if v3 == 0 then goto L2f6d32;
  #L2f6d2e.  v3:= 1I;
  #L2f6d30.  goto L2f6d34;
  #L2f6d32.  v3:= 0I;
  #L2f6d34.  if v3 == 0 then goto L2f6d70;
  #L2f6d38.  v6:= v5.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6d3c.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6d42.  v6:= temp;
  #L2f6d44.  v6:= v6 + -2;
  #L2f6d48.  if v7 == v6 then goto L2f6d6c;
  #L2f6d4c.  v6:= v5.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6d50.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6d56.  v6:= temp;
  #L2f6d58.  v6:= v6 + -3;
  #L2f6d5c.  if v7 != v6 then goto L2f6d6e;
  #L2f6d60.  call temp:= `b`(v5) @signature `Lcom/airbnb/lottie/model/d;.b:()Z` @kind direct;
  #L2f6d66.  v6:= temp;
  #L2f6d68.  if v6 == 0 then goto L2f6d6e;
  #L2f6d6c.  v1:= 1I;
  #L2f6d6e.  return v1;
  #L2f6d70.  if v0 == 0 then goto L2f6d76;
  #L2f6d74.  return v2;
  #L2f6d76.  v7:= v7 + v2 @kind int;
  #L2f6d78.  v0:= v5.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6d7c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6d82.  v0:= temp;
  #L2f6d84.  v0:= v0 - v2 @kind int;
  #L2f6d86.  if v7 >= v0 then goto L2f6d8c;
  #L2f6d8a.  return v1;
  #L2f6d8c.  v0:= v5.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6d90.  call temp:= `get`(v0, v7) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6d96.  v7:= temp @kind object;
  #L2f6d98.  v7:= (`java.lang.String`) v7 @kind object;
  #L2f6d9c.  call temp:= `equals`(v7, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6da2.  v6:= temp;
  #L2f6da4.  return v6;
}
procedure `com.airbnb.lottie.model.e` `d`(`com.airbnb.lottie.model.d` v1 @kind this) @signature `Lcom/airbnb/lottie/model/d;.d:()Lcom/airbnb/lottie/model/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f6f14.  v0:= v1.`com.airbnb.lottie.model.d.c` @type ^`com.airbnb.lottie.model.e` @kind object;
  #L2f6f18.  return v0 @kind object;
}
procedure `int` `e`(`com.airbnb.lottie.model.d` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 ) @signature `Lcom/airbnb/lottie/model/d;.e:(Ljava/lang/String;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f6f64.  call temp:= `f`(v3, v4) @signature `Lcom/airbnb/lottie/model/d;.f:(Ljava/lang/String;)Z` @kind direct;
  #L2f6f6a.  v0:= temp;
  #L2f6f6c.  v1:= 0I;
  #L2f6f6e.  if v0 == 0 then goto L2f6f74;
  #L2f6f72.  return v1;
  #L2f6f74.  v0:= v3.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6f78.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6f7e.  v0:= temp @kind object;
  #L2f6f80.  v0:= (`java.lang.String`) v0 @kind object;
  #L2f6f84.  v2:= "**" @kind object;
  #L2f6f88.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6f8e.  v0:= temp;
  #L2f6f90.  v2:= 1I;
  #L2f6f92.  if v0 != 0 then goto L2f6f98;
  #L2f6f96.  return v2;
  #L2f6f98.  v0:= v3.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6f9c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6fa2.  v0:= temp;
  #L2f6fa4.  v0:= v0 - v2 @kind int;
  #L2f6fa6.  if v5 != v0 then goto L2f6fac;
  #L2f6faa.  return v1;
  #L2f6fac.  v0:= v3.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6fb0.  v5:= v5 + v2 @kind int;
  #L2f6fb2.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6fb8.  v5:= temp @kind object;
  #L2f6fba.  v5:= (`java.lang.String`) v5 @kind object;
  #L2f6fbe.  call temp:= `equals`(v5, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6fc4.  v4:= temp;
  #L2f6fc6.  if v4 == 0 then goto L2f6fce;
  #L2f6fca.  v4:= 2I;
  #L2f6fcc.  return v4;
  #L2f6fce.  return v1;
}
procedure `boolean` `equals`(`com.airbnb.lottie.model.d` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/airbnb/lottie/model/d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f6c00.  v0:= 1I;
  #L2f6c02.  if v4 != v5 then goto L2f6c08;
  #L2f6c06.  return v0;
  #L2f6c08.  v1:= 0I;
  #L2f6c0a.  if v5 == 0 then goto L2f6c5a;
  #L2f6c0e.  v2:= constclass @type ^`com.airbnb.lottie.model.d` @kind object;
  #L2f6c12.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2f6c18.  v3:= temp @kind object;
  #L2f6c1a.  if v2 == v3 then goto L2f6c20;
  #L2f6c1e.  goto L2f6c5a;
  #L2f6c20.  v5:= (`com.airbnb.lottie.model.d`) v5 @kind object;
  #L2f6c24.  v2:= v4.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6c28.  v3:= v5.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6c2c.  call temp:= `equals`(v2, v3) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2f6c32.  v2:= temp;
  #L2f6c34.  if v2 != 0 then goto L2f6c3a;
  #L2f6c38.  return v1;
  #L2f6c3a.  v2:= v4.`com.airbnb.lottie.model.d.c` @type ^`com.airbnb.lottie.model.e` @kind object;
  #L2f6c3e.  v5:= v5.`com.airbnb.lottie.model.d.c` @type ^`com.airbnb.lottie.model.e` @kind object;
  #L2f6c42.  if v2 == 0 then goto L2f6c50;
  #L2f6c46.  call temp:= `equals`(v2, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6c4c.  v0:= temp;
  #L2f6c4e.  goto L2f6c58;
  #L2f6c50.  if v5 != 0 then goto L2f6c56;
  #L2f6c54.  goto L2f6c58;
  #L2f6c56.  v0:= 0I;
  #L2f6c58.  return v0;
  #L2f6c5a.  return v1;
}
procedure `boolean` `g`(`com.airbnb.lottie.model.d` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 ) @signature `Lcom/airbnb/lottie/model/d;.g:(Ljava/lang/String;I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f6dd8.  call temp:= `f`(v3, v4) @signature `Lcom/airbnb/lottie/model/d;.f:(Ljava/lang/String;)Z` @kind direct;
  #L2f6dde.  v0:= temp;
  #L2f6de0.  v1:= 1I;
  #L2f6de2.  if v0 == 0 then goto L2f6de8;
  #L2f6de6.  return v1;
  #L2f6de8.  v0:= v3.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6dec.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6df2.  v0:= temp;
  #L2f6df4.  v2:= 0I;
  #L2f6df6.  if v5 < v0 then goto L2f6dfc;
  #L2f6dfa.  return v2;
  #L2f6dfc.  v0:= v3.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6e00.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6e06.  v0:= temp @kind object;
  #L2f6e08.  v0:= (`java.lang.String`) v0 @kind object;
  #L2f6e0c.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6e12.  v4:= temp;
  #L2f6e14.  if v4 != 0 then goto L2f6e5c;
  #L2f6e18.  v4:= v3.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6e1c.  call temp:= `get`(v4, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6e22.  v4:= temp @kind object;
  #L2f6e24.  v4:= (`java.lang.String`) v4 @kind object;
  #L2f6e28.  v0:= "**" @kind object;
  #L2f6e2c.  call temp:= `equals`(v4, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6e32.  v4:= temp;
  #L2f6e34.  if v4 != 0 then goto L2f6e5c;
  #L2f6e38.  v4:= v3.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6e3c.  call temp:= `get`(v4, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6e42.  v4:= temp @kind object;
  #L2f6e44.  v4:= (`java.lang.String`) v4 @kind object;
  #L2f6e48.  v5:= "*" @kind object;
  #L2f6e4c.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6e52.  v4:= temp;
  #L2f6e54.  if v4 == 0 then goto L2f6e5a;
  #L2f6e58.  goto L2f6e5c;
  #L2f6e5a.  return v2;
  #L2f6e5c.  return v1;
}
procedure `boolean` `h`(`com.airbnb.lottie.model.d` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/airbnb/lottie/model/d;.h:(Ljava/lang/String;I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f6e70.  v0:= "__container" @kind object;
  #L2f6e74.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6e7a.  v2:= temp;
  #L2f6e7c.  v0:= 1I;
  #L2f6e7e.  if v2 == 0 then goto L2f6e84;
  #L2f6e82.  return v0;
  #L2f6e84.  v2:= v1.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6e88.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6e8e.  v2:= temp;
  #L2f6e90.  v2:= v2 - v0 @kind int;
  #L2f6e92.  if v3 < v2 then goto L2f6eba;
  #L2f6e96.  v2:= v1.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6e9a.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6ea0.  v2:= temp @kind object;
  #L2f6ea2.  v2:= (`java.lang.String`) v2 @kind object;
  #L2f6ea6.  v3:= "**" @kind object;
  #L2f6eaa.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6eb0.  v2:= temp;
  #L2f6eb2.  if v2 == 0 then goto L2f6eb8;
  #L2f6eb6.  goto L2f6eba;
  #L2f6eb8.  v0:= 0I;
  #L2f6eba.  return v0;
}
procedure `int` `hashCode`(`com.airbnb.lottie.model.d` v2 @kind this) @signature `Lcom/airbnb/lottie/model/d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f6f2c.  v0:= v2.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6f30.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L2f6f36.  v0:= temp;
  #L2f6f38.  v0:= v0 * 31;
  #L2f6f3c.  v1:= v2.`com.airbnb.lottie.model.d.c` @type ^`com.airbnb.lottie.model.e` @kind object;
  #L2f6f40.  if v1 == 0 then goto L2f6f4e;
  #L2f6f44.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2f6f4a.  v1:= temp;
  #L2f6f4c.  goto L2f6f50;
  #L2f6f4e.  v1:= 0I;
  #L2f6f50.  v0:= v0 + v1 @kind int;
  #L2f6f52.  return v0;
}
procedure `com.airbnb.lottie.model.d` `i`(`com.airbnb.lottie.model.d` v1 @kind this, `com.airbnb.lottie.model.e` v2 @kind object) @signature `Lcom/airbnb/lottie/model/d;.i:(Lcom/airbnb/lottie/model/e;)Lcom/airbnb/lottie/model/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f6ef4.  v0:= new `com.airbnb.lottie.model.d`;
  #L2f6ef8.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/model/d;.<init>:(Lcom/airbnb/lottie/model/d;)V` @kind direct;
  #L2f6efe.  v0.`com.airbnb.lottie.model.d.c` @type ^`com.airbnb.lottie.model.e` := v2 @kind object;
  #L2f6f02.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.airbnb.lottie.model.d` v2 @kind this) @signature `Lcom/airbnb/lottie/model/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f6fe0.  v0:= new `java.lang.StringBuilder`;
  #L2f6fe4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f6fea.  v1:= "KeyPath{keys=" @kind object;
  #L2f6fee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6ff4.  v1:= v2.`com.airbnb.lottie.model.d.b` @type ^`java.util.List` @kind object;
  #L2f6ff8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6ffe.  v1:= ",resolved=" @kind object;
  #L2f7002.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7008.  v1:= v2.`com.airbnb.lottie.model.d.c` @type ^`com.airbnb.lottie.model.e` @kind object;
  #L2f700c.  if v1 == 0 then goto L2f7014;
  #L2f7010.  v1:= 1I;
  #L2f7012.  goto L2f7016;
  #L2f7014.  v1:= 0I;
  #L2f7016.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f701c.  v1:= 125I;
  #L2f7020.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7026.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f702c.  v0:= temp @kind object;
  #L2f702e.  return v0 @kind object;
}
