record `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b` @kind class @AccessFlag FINAL {
  `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.a` @AccessFlag PRIVATE;
  `int` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.b` @AccessFlag PRIVATE;
  `int` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.c` @AccessFlag PRIVATE;
  `int` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b` v0 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L304f54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L304f5a.  return @kind void;
}
procedure `void` `a`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b` v5 @kind this, `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` v6 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.a:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L304f6c.  v0:= 0I;
  #L304f6e.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L304f72.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L304f76.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L304f7a.  v0:= 1I;
  #L304f7c.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int` := v0;
  #L304f80.  v1:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.b` @type ^`int`;
  #L304f84.  if v1 <= 0 then goto L304faa;
  #L304f88.  v2:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.d` @type ^`int`;
  #L304f8c.  v3:= v2 ^& 1;
  #L304f90.  if v3 != 0 then goto L304faa;
  #L304f94.  v2:= v2 + v0 @kind int;
  #L304f96.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.d` @type ^`int` := v2;
  #L304f9a.  v1:= v1 - v0 @kind int;
  #L304f9c.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.b` @type ^`int` := v1;
  #L304fa0.  v1:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.c` @type ^`int`;
  #L304fa4.  v1:= v1 + v0 @kind int;
  #L304fa6.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.c` @type ^`int` := v1;
  #L304faa.  v1:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.a` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L304fae.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v1 @kind object;
  #L304fb2.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.a` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v6 @kind object;
  #L304fb6.  v6:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.d` @type ^`int`;
  #L304fba.  v6:= v6 + v0 @kind int;
  #L304fbc.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.d` @type ^`int` := v6;
  #L304fc0.  v1:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.b` @type ^`int`;
  #L304fc4.  if v1 <= 0 then goto L304fe6;
  #L304fc8.  v2:= v6 ^& 1;
  #L304fcc.  if v2 != 0 then goto L304fe6;
  #L304fd0.  v6:= v6 + v0 @kind int;
  #L304fd2.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.d` @type ^`int` := v6;
  #L304fd6.  v1:= v1 - v0 @kind int;
  #L304fd8.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.b` @type ^`int` := v1;
  #L304fdc.  v6:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.c` @type ^`int`;
  #L304fe0.  v6:= v6 + v0 @kind int;
  #L304fe2.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.c` @type ^`int` := v6;
  #L304fe6.  v6:= 4I;
  #L304fe8.  v1:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.d` @type ^`int`;
  #L304fec.  v2:= v6 + -1;
  #L304ff0.  v1:= v1 ^& v2 @kind int;
  #L304ff2.  if v1 != v2 then goto L30506c;
  #L304ff6.  v1:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.c` @type ^`int`;
  #L304ffa.  if v1 != 0 then goto L305032;
  #L304ffe.  v1:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.a` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305002.  v2:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305006.  v3:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L30500a.  v4:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L30500e.  v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v4 @kind object;
  #L305012.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.a` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v2 @kind object;
  #L305016.  v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v3 @kind object;
  #L30501a.  v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v1 @kind object;
  #L30501e.  v4:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305022.  v4:= v4 + v0 @kind int;
  #L305024.  v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int` := v4;
  #L305028.  v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v2 @kind object;
  #L30502c.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v2 @kind object;
  #L305030.  goto L305066;
  #L305032.  v2:= 0I;
  #L305034.  if v1 != v0 then goto L30505c;
  #L305038.  v1:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.a` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L30503c.  v3:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305040.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.a` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v3 @kind object;
  #L305044.  v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v1 @kind object;
  #L305048.  v4:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L30504c.  v4:= v4 + v0 @kind int;
  #L30504e.  v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int` := v4;
  #L305052.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v3 @kind object;
  #L305056.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.c` @type ^`int` := v2;
  #L30505a.  goto L305066;
  #L30505c.  v3:= 2I;
  #L30505e.  if v1 != v3 then goto L305066;
  #L305062.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.c` @type ^`int` := v2;
  #L305066.  v6:= v6 * 2;
  #L30506a.  goto L304fe8;
  #L30506c.  return @kind void;
}
procedure `void` `b`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b` v1 @kind this, `int` v2 ) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.b:(I)V` @AccessFlag  {
    temp;
    v0;

  #L305080.  call temp:= `highestOneBit`(v2) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L305086.  v0:= temp;
  #L305088.  v0:= v0 * 2;
  #L30508c.  v0:= v0 + -1;
  #L305090.  v0:= v0 - v2 @kind int;
  #L305092.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.b` @type ^`int` := v0;
  #L305096.  v2:= 0I;
  #L305098.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.d` @type ^`int` := v2;
  #L30509c.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.c` @type ^`int` := v2;
  #L3050a0.  v2:= 0I;
  #L3050a2.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.a` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v2 @kind object;
  #L3050a6.  return @kind void;
}
procedure `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` `c`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b` v2 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.c:()Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L304f28.  v0:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b.a` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L304f2c.  v1:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L304f30.  if v1 != 0 then goto L304f36;
  #L304f34.  return v0 @kind object;
  #L304f36.  v0:= new `java.lang.IllegalStateException`;
  #L304f3a.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L304f40.  throw v0;
}
