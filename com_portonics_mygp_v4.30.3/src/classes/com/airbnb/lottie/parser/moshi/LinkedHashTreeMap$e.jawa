record `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e` v0 @kind this, `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v1 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$e;.<init>:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30533c.  v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` := v1 @kind object;
  #L305340.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L305346.  return @kind void;
}
procedure `void` `clear`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e` v1 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$e;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305358.  v0:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L30535c.  call `clear`(v0) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.clear:()V` @kind virtual;
  #L305362.  return @kind void;
}
procedure `boolean` `contains`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$e;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3052bc.  v0:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L3052c0.  call temp:= `containsKey`(v0, v2) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L3052c6.  v2:= temp;
  #L3052c8.  return v2;
}
procedure `java.util.Iterator` `iterator`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e` v1 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$e;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305320.  v0:= new `com.airbnb.lottie.parser.moshi.e`;
  #L305324.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/parser/moshi/e;.<init>:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$e;)V` @kind direct;
  #L30532a.  return v0 @kind object;
}
procedure `boolean` `remove`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$e;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3052dc.  v0:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L3052e0.  call temp:= `removeInternalByKey`(v0, v2) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.removeInternalByKey:(Ljava/lang/Object;)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L3052e6.  v2:= temp @kind object;
  #L3052e8.  if v2 == 0 then goto L3052f0;
  #L3052ec.  v2:= 1I;
  #L3052ee.  goto L3052f2;
  #L3052f0.  v2:= 0I;
  #L3052f2.  return v2;
}
procedure `int` `size`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e` v1 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305304.  v0:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L305308.  v0:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.size` @type ^`int`;
  #L30530c.  return v0;
}
