record `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface {
  `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.b` @AccessFlag ;
  `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.c` @AccessFlag ;
  `int` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.d` @AccessFlag ;
  `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f` v1 @kind this, `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v2 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$f;.<init>:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3053f0.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` := v2 @kind object;
  #L3053f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3053fa.  v0:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.header` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L3053fe.  v0:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305402.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305406.  v0:= 0I;
  #L305408.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L30540c.  v2:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.modCount` @type ^`int`;
  #L305410.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.d` @type ^`int` := v2;
  #L305414.  return @kind void;
}
procedure `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` `a`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f` v3 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$f;.a:()Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30539c.  v0:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L3053a0.  v1:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L3053a4.  v2:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.header` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L3053a8.  if v0 == v2 then goto L3053d2;
  #L3053ac.  v1:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.modCount` @type ^`int`;
  #L3053b0.  v2:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.d` @type ^`int`;
  #L3053b4.  if v1 != v2 then goto L3053c6;
  #L3053b8.  v1:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L3053bc.  v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v1 @kind object;
  #L3053c0.  v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L3053c4.  return v0 @kind object;
  #L3053c6.  v0:= new `java.util.ConcurrentModificationException`;
  #L3053ca.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L3053d0.  throw v0;
  #L3053d2.  v0:= new `java.util.NoSuchElementException`;
  #L3053d6.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3053dc.  throw v0;
}
procedure `boolean` `hasNext`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f` v2 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$f;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L305374.  v0:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305378.  v1:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L30537c.  v1:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.header` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305380.  if v0 == v1 then goto L305388;
  #L305384.  v0:= 1I;
  #L305386.  goto L30538a;
  #L305388.  v0:= 0I;
  #L30538a.  return v0;
}
procedure `void` `remove`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f` v3 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$f;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L305428.  v0:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L30542c.  if v0 == 0 then goto L305450;
  #L305430.  v1:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L305434.  v2:= 1I;
  #L305436.  call `removeInternal`(v1, v0, v2) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.removeInternal:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Z)V` @kind virtual;
  #L30543c.  v0:= 0I;
  #L30543e.  v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305442.  v0:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L305446.  v0:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.modCount` @type ^`int`;
  #L30544a.  v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$f.d` @type ^`int` := v0;
  #L30544e.  return @kind void;
  #L305450.  v0:= new `java.lang.IllegalStateException`;
  #L305454.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L30545a.  throw v0;
}
