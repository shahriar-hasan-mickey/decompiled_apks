record `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d` v0 @kind this, `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v1 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$d;.<init>:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L305244.  v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` := v1 @kind object;
  #L305248.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L30524e.  return @kind void;
}
procedure `void` `clear`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d` v1 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$d;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305260.  v0:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L305264.  call `clear`(v0) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.clear:()V` @kind virtual;
  #L30526a.  return @kind void;
}
procedure `boolean` `contains`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$d;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305198.  v0:= instanceof @variable v2 @type ^`java.util.Map$Entry` @kind boolean;
  #L30519c.  if v0 == 0 then goto L3051b8;
  #L3051a0.  v0:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L3051a4.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L3051a8.  call temp:= `findByEntry`(v0, v2) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.findByEntry:(Ljava/util/Map$Entry;)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L3051ae.  v2:= temp @kind object;
  #L3051b0.  if v2 == 0 then goto L3051b8;
  #L3051b4.  v2:= 1I;
  #L3051b6.  goto L3051ba;
  #L3051b8.  v2:= 0I;
  #L3051ba.  return v2;
}
procedure `java.util.Iterator` `iterator`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d` v1 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$d;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305228.  v0:= new `com.airbnb.lottie.parser.moshi.d`;
  #L30522c.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/parser/moshi/d;.<init>:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$d;)V` @kind direct;
  #L305232.  return v0 @kind object;
}
procedure `boolean` `remove`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$d;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3051cc.  v0:= instanceof @variable v3 @type ^`java.util.Map$Entry` @kind boolean;
  #L3051d0.  v1:= 0I;
  #L3051d2.  if v0 != 0 then goto L3051d8;
  #L3051d6.  return v1;
  #L3051d8.  v0:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L3051dc.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L3051e0.  call temp:= `findByEntry`(v0, v3) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.findByEntry:(Ljava/util/Map$Entry;)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L3051e6.  v3:= temp @kind object;
  #L3051e8.  if v3 != 0 then goto L3051ee;
  #L3051ec.  return v1;
  #L3051ee.  v0:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L3051f2.  v1:= 1I;
  #L3051f4.  call `removeInternal`(v0, v3, v1) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.removeInternal:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Z)V` @kind virtual;
  #L3051fa.  return v1;
}
procedure `int` `size`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d` v1 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$d;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30520c.  v0:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L305210.  v0:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.size` @type ^`int`;
  #L305214.  return v0;
}
