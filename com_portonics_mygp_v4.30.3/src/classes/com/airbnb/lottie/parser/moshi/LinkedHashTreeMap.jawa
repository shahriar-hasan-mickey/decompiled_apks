record `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind class @AccessFlag FINAL extends `java.util.AbstractMap` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Comparator` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.comparator` @AccessFlag ;
  `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.entrySet` @AccessFlag PRIVATE;
  `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.header` @AccessFlag FINAL;
  `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.keySet` @AccessFlag PRIVATE;
  `int` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.modCount` @AccessFlag ;
  `int` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.size` @AccessFlag ;
  `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`[] `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.table` @AccessFlag ;
  `int` `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.threshold` @AccessFlag ;
}
global `boolean` `@@com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.Comparator` `@@com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L305ad4.  v0:= constclass @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` @kind object;
  #L305ad8.  v0:= new `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$a`;
  #L305adc.  call `<init>`(v0) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$a;.<init>:()V` @kind direct;
  #L305ae2.  `@@com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.b` @type ^`java.util.Comparator` := v0 @kind object;
  #L305ae6.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v1 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L305af8.  v0:= 0I;
  #L305afa.  call `<init>`(v1, v0) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L305b00.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.<init>:(Ljava/util/Comparator;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L305b14.  call `<init>`(v1) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L305b1a.  v0:= 0I;
  #L305b1c.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.size` @type ^`int` := v0;
  #L305b20.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.modCount` @type ^`int` := v0;
  #L305b24.  if v2 == 0 then goto L305b2a;
  #L305b28.  goto L305b2e;
  #L305b2a.  v2:= `@@com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.b` @type ^`java.util.Comparator` @kind object;
  #L305b2e.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.comparator` @type ^`java.util.Comparator` := v2 @kind object;
  #L305b32.  v2:= new `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`;
  #L305b36.  call `<init>`(v2) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;.<init>:()V` @kind direct;
  #L305b3c.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.header` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v2 @kind object;
  #L305b40.  v2:= 16I;
  #L305b44.  v2:= new `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`[v2];
  #L305b48.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.table` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`[] := v2 @kind object;
  #L305b4c.  v0:= length @variable v2;
  #L305b4e.  v0:= v0 / 2;
  #L305b52.  v2:= length @variable v2;
  #L305b54.  v2:= v2 / 4;
  #L305b58.  v0:= v0 + v2 @kind int;
  #L305b5a.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.threshold` @type ^`int` := v0;
  #L305b5e.  return @kind void;
}
procedure `void` `a`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v2 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L305bc4.  v0:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.table` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`[] @kind object;
  #L305bc8.  call temp:= `doubleCapacity`(v0) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.doubleCapacity:([Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)[Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind static;
  #L305bce.  v0:= temp @kind object;
  #L305bd0.  v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.table` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`[] := v0 @kind object;
  #L305bd4.  v1:= length @variable v0;
  #L305bd6.  v1:= v1 / 2;
  #L305bda.  v0:= length @variable v0;
  #L305bdc.  v0:= v0 / 4;
  #L305be0.  v1:= v1 + v0 @kind int;
  #L305be2.  v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.threshold` @type ^`int` := v1;
  #L305be6.  return @kind void;
}
procedure `boolean` `b`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.b:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;

  #L30568c.  if v1 == v2 then goto L3056a6;
  #L305690.  if v1 == 0 then goto L3056a2;
  #L305694.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30569a.  v1:= temp;
  #L30569c.  if v1 == 0 then goto L3056a2;
  #L3056a0.  goto L3056a6;
  #L3056a2.  v1:= 0I;
  #L3056a4.  goto L3056a8;
  #L3056a6.  v1:= 1I;
  #L3056a8.  return v1;
}
procedure `void` `c`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v7 @kind this, `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` v8 @kind object, `boolean` v9 ) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.c:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L305bf8.  if v8 == 0 then goto L305cea;
  #L305bfc.  v0:= v8.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305c00.  v1:= v8.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305c04.  v2:= 0I;
  #L305c06.  if v0 == 0 then goto L305c10;
  #L305c0a.  v3:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305c0e.  goto L305c12;
  #L305c10.  v3:= 0I;
  #L305c12.  if v1 == 0 then goto L305c1c;
  #L305c16.  v4:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305c1a.  goto L305c1e;
  #L305c1c.  v4:= 0I;
  #L305c1e.  v5:= v3 - v4 @kind int;
  #L305c22.  v6:= -2I;
  #L305c24.  if v5 != v6 then goto L305c70;
  #L305c28.  v0:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305c2c.  v3:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305c30.  if v3 == 0 then goto L305c3a;
  #L305c34.  v3:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305c38.  goto L305c3c;
  #L305c3a.  v3:= 0I;
  #L305c3c.  if v0 == 0 then goto L305c44;
  #L305c40.  v2:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305c44.  v2:= v2 - v3 @kind int;
  #L305c46.  v0:= -1I;
  #L305c48.  if v2 == v0 then goto L305c64;
  #L305c4c.  if v2 != 0 then goto L305c56;
  #L305c50.  if v9 != 0 then goto L305c56;
  #L305c54.  goto L305c64;
  #L305c56.  call `f`(v7, v1) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.f:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305c5c.  call `e`(v7, v8) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.e:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305c62.  goto L305c6a;
  #L305c64.  call `e`(v7, v8) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.e:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305c6a.  if v9 == 0 then goto L305ce4;
  #L305c6e.  goto L305cea;
  #L305c70.  v1:= 2I;
  #L305c72.  v6:= 1I;
  #L305c74.  if v5 != v1 then goto L305cbe;
  #L305c78.  v1:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305c7c.  v3:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305c80.  if v3 == 0 then goto L305c8a;
  #L305c84.  v3:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305c88.  goto L305c8c;
  #L305c8a.  v3:= 0I;
  #L305c8c.  if v1 == 0 then goto L305c94;
  #L305c90.  v2:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305c94.  v2:= v2 - v3 @kind int;
  #L305c96.  if v2 == v6 then goto L305cb2;
  #L305c9a.  if v2 != 0 then goto L305ca4;
  #L305c9e.  if v9 != 0 then goto L305ca4;
  #L305ca2.  goto L305cb2;
  #L305ca4.  call `e`(v7, v0) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.e:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305caa.  call `f`(v7, v8) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.f:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305cb0.  goto L305cb8;
  #L305cb2.  call `f`(v7, v8) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.f:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305cb8.  if v9 == 0 then goto L305ce4;
  #L305cbc.  goto L305cea;
  #L305cbe.  if v5 != 0 then goto L305cd0;
  #L305cc2.  v3:= v3 + 1;
  #L305cc6.  v8.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int` := v3;
  #L305cca.  if v9 == 0 then goto L305ce4;
  #L305cce.  goto L305cea;
  #L305cd0.  call temp:= `max`(v3, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L305cd6.  v0:= temp;
  #L305cd8.  v0:= v0 + v6 @kind int;
  #L305cda.  v8.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int` := v0;
  #L305cde.  if v9 != 0 then goto L305ce4;
  #L305ce2.  goto L305cea;
  #L305ce4.  v8:= v8.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305ce8.  goto L305bf8;
  #L305cea.  return @kind void;
}
procedure `void` `d`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v2 @kind this, `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` v3 @kind object, `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` v4 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.d:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L305dfc.  v0:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305e00.  v1:= 0I;
  #L305e02.  v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v1 @kind object;
  #L305e06.  if v4 == 0 then goto L305e0e;
  #L305e0a.  v4.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305e0e.  if v0 == 0 then goto L305e26;
  #L305e12.  v1:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305e16.  if v1 != v3 then goto L305e20;
  #L305e1a.  v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v4 @kind object;
  #L305e1e.  goto L305e3a;
  #L305e20.  v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v4 @kind object;
  #L305e24.  goto L305e3a;
  #L305e26.  v3:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.h` @type ^`int`;
  #L305e2a.  v0:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.table` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`[] @kind object;
  #L305e2e.  v1:= length @variable v0;
  #L305e30.  v1:= v1 + -1;
  #L305e34.  v3:= v3 ^& v1 @kind int;
  #L305e36.  v0[v3]:= v4 @kind object;
  #L305e3a.  return @kind void;
}
procedure `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`[] `doubleCapacity`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`[] v11 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.doubleCapacity:([Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)[Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3058bc.  v0:= length @variable v11;
  #L3058be.  v1:= v0 * 2;
  #L3058c2.  v1:= new `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`[v1];
  #L3058c6.  v2:= new `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$c`;
  #L3058ca.  call `<init>`(v2) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$c;.<init>:()V` @kind direct;
  #L3058d0.  v3:= new `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b`;
  #L3058d4.  call `<init>`(v3) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.<init>:()V` @kind direct;
  #L3058da.  v4:= new `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$b`;
  #L3058de.  call `<init>`(v4) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.<init>:()V` @kind direct;
  #L3058e4.  v5:= 0I;
  #L3058e6.  v6:= 0I;
  #L3058e8.  if v6 >= v0 then goto L30598a;
  #L3058ec.  v7:= v11[v6] @kind object;
  #L3058f0.  if v7 != 0 then goto L3058f6;
  #L3058f4.  goto L305984;
  #L3058f6.  call `b`(v2, v7) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$c;.b:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind virtual;
  #L3058fc.  v8:= 0I;
  #L3058fe.  v9:= 0I;
  #L305900.  call temp:= `a`(v2) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$c;.a:()Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L305906.  v10:= temp @kind object;
  #L305908.  if v10 == 0 then goto L305922;
  #L30590c.  v10:= v10.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.h` @type ^`int`;
  #L305910.  v10:= v10 ^& v0 @kind int;
  #L305912.  if v10 != 0 then goto L30591c;
  #L305916.  v8:= v8 + 1;
  #L30591a.  goto L305900;
  #L30591c.  v9:= v9 + 1;
  #L305920.  goto L305900;
  #L305922.  call `b`(v3, v8) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.b:(I)V` @kind virtual;
  #L305928.  call `b`(v4, v9) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.b:(I)V` @kind virtual;
  #L30592e.  call `b`(v2, v7) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$c;.b:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind virtual;
  #L305934.  call temp:= `a`(v2) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$c;.a:()Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L30593a.  v7:= temp @kind object;
  #L30593c.  if v7 == 0 then goto L30595a;
  #L305940.  v10:= v7.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.h` @type ^`int`;
  #L305944.  v10:= v10 ^& v0 @kind int;
  #L305946.  if v10 != 0 then goto L305952;
  #L30594a.  call `a`(v3, v7) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.a:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind virtual;
  #L305950.  goto L305934;
  #L305952.  call `a`(v4, v7) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.a:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind virtual;
  #L305958.  goto L305934;
  #L30595a.  v7:= 0I;
  #L30595c.  if v8 <= 0 then goto L30596a;
  #L305960.  call temp:= `c`(v3) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.c:()Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L305966.  v8:= temp @kind object;
  #L305968.  goto L30596c;
  #L30596a.  v8:= v7 @kind object;
  #L30596c.  v1[v6]:= v8 @kind object;
  #L305970.  v8:= v6 + v0 @kind int;
  #L305974.  if v9 <= 0 then goto L305980;
  #L305978.  call temp:= `c`(v4) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$b;.c:()Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L30597e.  v7:= temp @kind object;
  #L305980.  v1[v8]:= v7 @kind object;
  #L305984.  v6:= v6 + 1;
  #L305988.  goto L3058e8;
  #L30598a.  return v1 @kind object;
}
procedure `void` `e`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v5 @kind this, `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` v6 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.e:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L305e4c.  v0:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305e50.  v1:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305e54.  v2:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305e58.  v3:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305e5c.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v2 @kind object;
  #L305e60.  if v2 == 0 then goto L305e68;
  #L305e64.  v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v6 @kind object;
  #L305e68.  call `d`(v5, v6, v1) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.d:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305e6e.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v6 @kind object;
  #L305e72.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v1 @kind object;
  #L305e76.  v4:= 0I;
  #L305e78.  if v0 == 0 then goto L305e82;
  #L305e7c.  v0:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305e80.  goto L305e84;
  #L305e82.  v0:= 0I;
  #L305e84.  if v2 == 0 then goto L305e8e;
  #L305e88.  v2:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305e8c.  goto L305e90;
  #L305e8e.  v2:= 0I;
  #L305e90.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L305e96.  v0:= temp;
  #L305e98.  v0:= v0 + 1;
  #L305e9c.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int` := v0;
  #L305ea0.  if v3 == 0 then goto L305ea8;
  #L305ea4.  v4:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305ea8.  call temp:= `max`(v0, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L305eae.  v6:= temp;
  #L305eb0.  v6:= v6 + 1;
  #L305eb4.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int` := v6;
  #L305eb8.  return @kind void;
}
procedure `void` `f`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v5 @kind this, `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` v6 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.f:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L305ecc.  v0:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305ed0.  v1:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305ed4.  v2:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305ed8.  v3:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305edc.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v3 @kind object;
  #L305ee0.  if v3 == 0 then goto L305ee8;
  #L305ee4.  v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v6 @kind object;
  #L305ee8.  call `d`(v5, v6, v0) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.d:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305eee.  v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v6 @kind object;
  #L305ef2.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305ef6.  v4:= 0I;
  #L305ef8.  if v1 == 0 then goto L305f02;
  #L305efc.  v1:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305f00.  goto L305f04;
  #L305f02.  v1:= 0I;
  #L305f04.  if v3 == 0 then goto L305f0e;
  #L305f08.  v3:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305f0c.  goto L305f10;
  #L305f0e.  v3:= 0I;
  #L305f10.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L305f16.  v1:= temp;
  #L305f18.  v1:= v1 + 1;
  #L305f1c.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int` := v1;
  #L305f20.  if v2 == 0 then goto L305f28;
  #L305f24.  v4:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305f28.  call temp:= `max`(v1, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L305f2e.  v6:= temp;
  #L305f30.  v6:= v6 + 1;
  #L305f34.  v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int` := v6;
  #L305f38.  return @kind void;
}
procedure `int` `g`(`int` v2 ) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.g:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L30599c.  v0:= v2 ^>> 20;
  #L3059a0.  v1:= v2 ^>> 12;
  #L3059a4.  v0:= v0 ^~ v1 @kind int;
  #L3059a6.  v2:= v2 ^~ v0 @kind int;
  #L3059a8.  v0:= v2 ^>> 7;
  #L3059ac.  v0:= v0 ^~ v2 @kind int;
  #L3059ae.  v2:= v2 ^>> 4;
  #L3059b2.  v2:= v2 ^~ v0 @kind int;
  #L3059b4.  return v2;
}
procedure `java.lang.Object` `writeReplace`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v1 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L305a60.  v0:= new `java.util.LinkedHashMap`;
  #L305a64.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L305a6a.  return v0 @kind object;
}
procedure `void` `clear`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v4 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L305b70.  v0:= v4.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.table` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`[] @kind object;
  #L305b74.  v1:= 0I;
  #L305b76.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L305b7c.  v0:= 0I;
  #L305b7e.  v4.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.size` @type ^`int` := v0;
  #L305b82.  v0:= v4.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.modCount` @type ^`int`;
  #L305b86.  v0:= v0 + 1;
  #L305b8a.  v4.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.modCount` @type ^`int` := v0;
  #L305b8e.  v0:= v4.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.header` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305b92.  v2:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305b96.  if v2 == v0 then goto L305baa;
  #L305b9a.  v3:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305b9e.  v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.f` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v1 @kind object;
  #L305ba2.  v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v1 @kind object;
  #L305ba6.  v2:= v3 @kind object;
  #L305ba8.  goto L305b96;
  #L305baa.  v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.f` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305bae.  v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305bb2.  return @kind void;
}
procedure `boolean` `containsKey`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L305668.  call temp:= `findByObject`(v0, v1) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.findByObject:(Ljava/lang/Object;)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L30566e.  v1:= temp @kind object;
  #L305670.  if v1 == 0 then goto L305678;
  #L305674.  v1:= 1I;
  #L305676.  goto L30567a;
  #L305678.  v1:= 0I;
  #L30567a.  return v1;
}
procedure `java.util.Set` `entrySet`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v1 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305a7c.  v0:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.entrySet` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d` @kind object;
  #L305a80.  if v0 == 0 then goto L305a86;
  #L305a84.  goto L305a94;
  #L305a86.  v0:= new `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d`;
  #L305a8a.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$d;.<init>:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;)V` @kind direct;
  #L305a90.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.entrySet` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$d` := v0 @kind object;
  #L305a94.  return v0 @kind object;
}
procedure `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` `find`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v12 @kind this, `java.lang.Object` v13 @kind object, `boolean` v14 ) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.find:(Ljava/lang/Object;Z)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3056bc.  v0:= v12.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.comparator` @type ^`java.util.Comparator` @kind object;
  #L3056c0.  v1:= v12.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.table` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`[] @kind object;
  #L3056c4.  call temp:= `hashCode`(v13) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3056ca.  v2:= temp;
  #L3056cc.  call temp:= `g`(v2) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.g:(I)I` @kind static;
  #L3056d2.  v6:= temp;
  #L3056d4.  v2:= length @variable v1;
  #L3056d6.  v9:= 1I;
  #L3056d8.  v2:= v2 - v9 @kind int;
  #L3056da.  v2:= v2 ^& v6 @kind int;
  #L3056dc.  v3:= v1[v2] @kind object;
  #L3056e0.  v4:= 0I;
  #L3056e2.  if v3 == 0 then goto L305738;
  #L3056e6.  v5:= `@@com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.b` @type ^`java.util.Comparator` @kind object;
  #L3056ea.  if v0 != v5 then goto L3056f6;
  #L3056ee.  v5:= v13 @kind object;
  #L3056f0.  v5:= (`java.lang.Comparable`) v5 @kind object;
  #L3056f4.  goto L3056f8;
  #L3056f6.  v5:= v4 @kind object;
  #L3056f8.  if v5 == 0 then goto L30570a;
  #L3056fc.  v7:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.g` @type ^`java.lang.Object` @kind object;
  #L305700.  call temp:= `compareTo`(v5, v7) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L305706.  v7:= temp;
  #L305708.  goto L305716;
  #L30570a.  v7:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.g` @type ^`java.lang.Object` @kind object;
  #L30570e.  call temp:= `compare`(v0, v13, v7) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L305714.  v7:= temp;
  #L305716.  if v7 != 0 then goto L30571c;
  #L30571a.  return v3 @kind object;
  #L30571c.  if v7 >= 0 then goto L305726;
  #L305720.  v8:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305724.  goto L30572a;
  #L305726.  v8:= v3.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L30572a.  if v8 != 0 then goto L305734;
  #L30572e.  v10:= v3 @kind object;
  #L305730.  v11:= v7;
  #L305732.  goto L30573e;
  #L305734.  v3:= v8 @kind object;
  #L305736.  goto L3056f8;
  #L305738.  v7:= 0I;
  #L30573a.  v10:= v3 @kind object;
  #L30573c.  v11:= 0I;
  #L30573e.  if v14 != 0 then goto L305744;
  #L305742.  return v4 @kind object;
  #L305744.  v7:= v12.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.header` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305748.  if v10 != 0 then goto L3057b6;
  #L30574c.  v14:= `@@com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.b` @type ^`java.util.Comparator` @kind object;
  #L305750.  if v0 != v14 then goto L30579c;
  #L305754.  v14:= instanceof @variable v13 @type ^`java.lang.Comparable` @kind boolean;
  #L305758.  if v14 == 0 then goto L30575e;
  #L30575c.  goto L30579c;
  #L30575e.  v14:= new `java.lang.ClassCastException`;
  #L305762.  v0:= new `java.lang.StringBuilder`;
  #L305766.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30576c.  call temp:= `getClass`(v13) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L305772.  v13:= temp @kind object;
  #L305774.  call temp:= `getName`(v13) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L30577a.  v13:= temp @kind object;
  #L30577c.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L305782.  v13:= " is not Comparable" @kind object;
  #L305786.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30578c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L305792.  v13:= temp @kind object;
  #L305794.  call `<init>`(v14, v13) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30579a.  throw v14;
  #L30579c.  v14:= new `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`;
  #L3057a0.  v8:= v7.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.f` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L3057a4.  v3:= v14 @kind object;
  #L3057a6.  v4:= v10 @kind object;
  #L3057a8.  v5:= v13 @kind object;
  #L3057aa.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;.<init>:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Ljava/lang/Object;ILcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L3057b0.  v1[v2]:= v14 @kind object;
  #L3057b4.  goto L3057de;
  #L3057b6.  v14:= new `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g`;
  #L3057ba.  v8:= v7.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.f` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L3057be.  v3:= v14 @kind object;
  #L3057c0.  v4:= v10 @kind object;
  #L3057c2.  v5:= v13 @kind object;
  #L3057c4.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;.<init>:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Ljava/lang/Object;ILcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L3057ca.  if v11 >= 0 then goto L3057d4;
  #L3057ce.  v10.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v14 @kind object;
  #L3057d2.  goto L3057d8;
  #L3057d4.  v10.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v14 @kind object;
  #L3057d8.  call `c`(v12, v10, v9) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.c:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Z)V` @kind direct;
  #L3057de.  v13:= v12.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.size` @type ^`int`;
  #L3057e2.  v0:= v13 + 1;
  #L3057e6.  v12.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.size` @type ^`int` := v0;
  #L3057ea.  v0:= v12.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.threshold` @type ^`int`;
  #L3057ee.  if v13 <= v0 then goto L3057f8;
  #L3057f2.  call `a`(v12) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.a:()V` @kind direct;
  #L3057f8.  v13:= v12.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.modCount` @type ^`int`;
  #L3057fc.  v13:= v13 + v9 @kind int;
  #L3057fe.  v12.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.modCount` @type ^`int` := v13;
  #L305802.  return v14 @kind object;
}
procedure `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` `findByEntry`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v2 @kind this, `java.util.Map$Entry` v3 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.findByEntry:(Ljava/util/Map$Entry;)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L305814.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L30581a.  v0:= temp @kind object;
  #L30581c.  call temp:= `findByObject`(v2, v0) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.findByObject:(Ljava/lang/Object;)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L305822.  v0:= temp @kind object;
  #L305824.  if v0 == 0 then goto L305844;
  #L305828.  v1:= v0.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.i` @type ^`java.lang.Object` @kind object;
  #L30582c.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L305832.  v3:= temp @kind object;
  #L305834.  call temp:= `b`(v2, v1, v3) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.b:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L30583a.  v3:= temp;
  #L30583c.  if v3 == 0 then goto L305844;
  #L305840.  v3:= 1I;
  #L305842.  goto L305846;
  #L305844.  v3:= 0I;
  #L305846.  if v3 == 0 then goto L30584c;
  #L30584a.  goto L30584e;
  #L30584c.  v0:= 0I;
  #L30584e.  return v0 @kind object;
}
procedure `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` `findByObject`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.findByObject:(Ljava/lang/Object;)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L305860.  v0:= 0I;
  #L305862.  if v3 == 0 then goto L305872;
  #L305866.  v1:= 0I;
  #L305868.  call temp:= `find`(v2, v3, v1) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.find:(Ljava/lang/Object;Z)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L30586e.  v0:= temp @kind object;
  #L305870.  
  #L305872.  return v0 @kind object;
  catch `java.lang.ClassCastException` @[L305868..L305870] goto L305872;
}
procedure `java.lang.Object` `get`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L3059e0.  call temp:= `findByObject`(v0, v1) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.findByObject:(Ljava/lang/Object;)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L3059e6.  v1:= temp @kind object;
  #L3059e8.  if v1 == 0 then goto L3059f2;
  #L3059ec.  v1:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.i` @type ^`java.lang.Object` @kind object;
  #L3059f0.  goto L3059f4;
  #L3059f2.  v1:= 0I;
  #L3059f4.  return v1 @kind object;
}
procedure `java.util.Set` `keySet`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v1 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305aa8.  v0:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.keySet` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e` @kind object;
  #L305aac.  if v0 == 0 then goto L305ab2;
  #L305ab0.  goto L305ac0;
  #L305ab2.  v0:= new `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e`;
  #L305ab6.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$e;.<init>:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;)V` @kind direct;
  #L305abc.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.keySet` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$e` := v0 @kind object;
  #L305ac0.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305a08.  v0:= "key == null" @kind object;
  #L305a0c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L305a12.  v0:= 1I;
  #L305a14.  call temp:= `find`(v1, v2, v0) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.find:(Ljava/lang/Object;Z)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L305a1a.  v2:= temp @kind object;
  #L305a1c.  v0:= v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.i` @type ^`java.lang.Object` @kind object;
  #L305a20.  v2.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.i` @type ^`java.lang.Object` := v3 @kind object;
  #L305a24.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L305a38.  call temp:= `removeInternalByKey`(v0, v1) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.removeInternalByKey:(Ljava/lang/Object;)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L305a3e.  v1:= temp @kind object;
  #L305a40.  if v1 == 0 then goto L305a4a;
  #L305a44.  v1:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.i` @type ^`java.lang.Object` @kind object;
  #L305a48.  goto L305a4c;
  #L305a4a.  v1:= 0I;
  #L305a4c.  return v1 @kind object;
}
procedure `void` `removeInternal`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v5 @kind this, `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` v6 @kind object, `boolean` v7 ) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.removeInternal:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L305cfc.  v0:= 0I;
  #L305cfe.  if v7 == 0 then goto L305d1e;
  #L305d02.  v7:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.f` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305d06.  v1:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305d0a.  v7.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v1 @kind object;
  #L305d0e.  v1:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305d12.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.f` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v7 @kind object;
  #L305d16.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.f` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305d1a.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.e` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305d1e.  v7:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305d22.  v1:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305d26.  v2:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305d2a.  v3:= 0I;
  #L305d2c.  if v7 == 0 then goto L305da4;
  #L305d30.  if v1 == 0 then goto L305da4;
  #L305d34.  v2:= v7.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305d38.  v4:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305d3c.  if v2 <= v4 then goto L305d4a;
  #L305d40.  call temp:= `b`(v7) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;.b:()Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L305d46.  v7:= temp @kind object;
  #L305d48.  goto L305d52;
  #L305d4a.  call temp:= `a`(v1) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;.a:()Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L305d50.  v7:= temp @kind object;
  #L305d52.  call `removeInternal`(v5, v7, v3) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.removeInternal:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Z)V` @kind virtual;
  #L305d58.  v1:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305d5c.  if v1 == 0 then goto L305d72;
  #L305d60.  v2:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305d64.  v7.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v1 @kind object;
  #L305d68.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v7 @kind object;
  #L305d6c.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305d70.  goto L305d74;
  #L305d72.  v2:= 0I;
  #L305d74.  v1:= v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` @kind object;
  #L305d78.  if v1 == 0 then goto L305d8c;
  #L305d7c.  v3:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int`;
  #L305d80.  v7.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v1 @kind object;
  #L305d84.  v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.b` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v7 @kind object;
  #L305d88.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305d8c.  call temp:= `max`(v2, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L305d92.  v0:= temp;
  #L305d94.  v0:= v0 + 1;
  #L305d98.  v7.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.j` @type ^`int` := v0;
  #L305d9c.  call `d`(v5, v6, v7) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.d:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305da2.  return @kind void;
  #L305da4.  if v7 == 0 then goto L305db4;
  #L305da8.  call `d`(v5, v6, v7) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.d:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305dae.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.c` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305db2.  goto L305dca;
  #L305db4.  if v1 == 0 then goto L305dc4;
  #L305db8.  call `d`(v5, v6, v1) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.d:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305dbe.  v6.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g.d` @type ^`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` := v0 @kind object;
  #L305dc2.  goto L305dca;
  #L305dc4.  call `d`(v5, v6, v0) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.d:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;)V` @kind direct;
  #L305dca.  call `c`(v5, v2, v3) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.c:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Z)V` @kind direct;
  #L305dd0.  v6:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.size` @type ^`int`;
  #L305dd4.  v6:= v6 + -1;
  #L305dd8.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.size` @type ^`int` := v6;
  #L305ddc.  v6:= v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.modCount` @type ^`int`;
  #L305de0.  v6:= v6 + 1;
  #L305de4.  v5.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.modCount` @type ^`int` := v6;
  #L305de8.  return @kind void;
}
procedure `com.airbnb.lottie.parser.moshi.LinkedHashTreeMap$g` `removeInternalByKey`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.removeInternalByKey:(Ljava/lang/Object;)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @AccessFlag  {
    temp;
    v0;

  #L305894.  call temp:= `findByObject`(v1, v2) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.findByObject:(Ljava/lang/Object;)Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;` @kind virtual;
  #L30589a.  v2:= temp @kind object;
  #L30589c.  if v2 == 0 then goto L3058a8;
  #L3058a0.  v0:= 1I;
  #L3058a2.  call `removeInternal`(v1, v2, v0) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.removeInternal:(Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap$g;Z)V` @kind virtual;
  #L3058a8.  return v2 @kind object;
}
procedure `int` `size`(`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap` v1 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/LinkedHashTreeMap;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3059c8.  v0:= v1.`com.airbnb.lottie.parser.moshi.LinkedHashTreeMap.size` @type ^`int`;
  #L3059cc.  return v0;
}
