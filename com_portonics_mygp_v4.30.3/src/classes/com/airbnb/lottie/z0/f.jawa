record `com.airbnb.lottie.z0.f` @kind class @AccessFlag PUBLIC {
  `float` `com.airbnb.lottie.z0.f.a` @AccessFlag PRIVATE;
  `int` `com.airbnb.lottie.z0.f.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.airbnb.lottie.z0.f` v0 @kind this) @signature `Lcom/airbnb/lottie/z0/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L306e40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L306e46.  return @kind void;
}
procedure `void` `a`(`com.airbnb.lottie.z0.f` v2 @kind this, `float` v3 ) @signature `Lcom/airbnb/lottie/z0/f;.a:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L306e58.  v0:= v2.`com.airbnb.lottie.z0.f.a` @type ^`float`;
  #L306e5c.  v0:= v0 + v3 @kind float;
  #L306e5e.  v2.`com.airbnb.lottie.z0.f.a` @type ^`float` := v0;
  #L306e62.  v3:= v2.`com.airbnb.lottie.z0.f.b` @type ^`int`;
  #L306e66.  v3:= v3 + 1;
  #L306e6a.  v2.`com.airbnb.lottie.z0.f.b` @type ^`int` := v3;
  #L306e6e.  v1:= 2147483647I;
  #L306e74.  if v3 != v1 then goto L306e8a;
  #L306e78.  v1:= 2.0F;
  #L306e7c.  v0:= v0 / v1 @kind float;
  #L306e7e.  v2.`com.airbnb.lottie.z0.f.a` @type ^`float` := v0;
  #L306e82.  v3:= v3 / 2;
  #L306e86.  v2.`com.airbnb.lottie.z0.f.b` @type ^`int` := v3;
  #L306e8a.  return @kind void;
}
