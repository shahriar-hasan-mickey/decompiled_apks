record `com.airbnb.lottie.w0.c.e` @kind class @AccessFlag FINAL extends `com.airbnb.lottie.w0.c.d` @kind interface {
  `java.util.List` `com.airbnb.lottie.w0.c.e.a` @AccessFlag PRIVATE_FINAL;
  `com.airbnb.lottie.a1.a` `com.airbnb.lottie.w0.c.e.b` @AccessFlag PRIVATE;
  `com.airbnb.lottie.a1.a` `com.airbnb.lottie.w0.c.e.c` @AccessFlag PRIVATE;
  `float` `com.airbnb.lottie.w0.c.e.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.airbnb.lottie.w0.c.e` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lcom/airbnb/lottie/w0/c/e;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2f4094.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f409a.  v0:= 0I;
  #L2f409c.  v1.`com.airbnb.lottie.w0.c.e.c` @type ^`com.airbnb.lottie.a1.a` := v0 @kind object;
  #L2f40a0.  v0:= -1.0F;
  #L2f40a4.  v1.`com.airbnb.lottie.w0.c.e.d` @type ^`float` := v0;
  #L2f40a8.  v1.`com.airbnb.lottie.w0.c.e.a` @type ^`java.util.List` := v2 @kind object;
  #L2f40ac.  v2:= 0I;
  #L2f40ae.  call temp:= `f`(v1, v2) @signature `Lcom/airbnb/lottie/w0/c/e;.f:(F)Lcom/airbnb/lottie/a1/a;` @kind direct;
  #L2f40b4.  v2:= temp @kind object;
  #L2f40b6.  v1.`com.airbnb.lottie.w0.c.e.b` @type ^`com.airbnb.lottie.a1.a` := v2 @kind object;
  #L2f40ba.  return @kind void;
}
procedure `com.airbnb.lottie.a1.a` `f`(`com.airbnb.lottie.w0.c.e` v4 @kind this, `float` v5 ) @signature `Lcom/airbnb/lottie/w0/c/e;.f:(F)Lcom/airbnb/lottie/a1/a;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f3f84.  v0:= v4.`com.airbnb.lottie.w0.c.e.a` @type ^`java.util.List` @kind object;
  #L2f3f88.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f3f8e.  v1:= temp;
  #L2f3f90.  v2:= 1I;
  #L2f3f92.  v1:= v1 - v2 @kind int;
  #L2f3f94.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f3f9a.  v0:= temp @kind object;
  #L2f3f9c.  v0:= (`com.airbnb.lottie.a1.a`) v0 @kind object;
  #L2f3fa0.  call temp:= `e`(v0) @signature `Lcom/airbnb/lottie/a1/a;.e:()F` @kind virtual;
  #L2f3fa6.  v1:= temp;
  #L2f3fa8.  v1:= fcmpl(v5, v1);
  #L2f3fac.  if v1 < 0 then goto L2f3fb2;
  #L2f3fb0.  return v0 @kind object;
  #L2f3fb2.  v0:= v4.`com.airbnb.lottie.w0.c.e.a` @type ^`java.util.List` @kind object;
  #L2f3fb6.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f3fbc.  v0:= temp;
  #L2f3fbe.  v0:= v0 + -2;
  #L2f3fc2.  if v0 < v2 then goto L2f3ff4;
  #L2f3fc6.  v1:= v4.`com.airbnb.lottie.w0.c.e.a` @type ^`java.util.List` @kind object;
  #L2f3fca.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f3fd0.  v1:= temp @kind object;
  #L2f3fd2.  v1:= (`com.airbnb.lottie.a1.a`) v1 @kind object;
  #L2f3fd6.  v3:= v4.`com.airbnb.lottie.w0.c.e.b` @type ^`com.airbnb.lottie.a1.a` @kind object;
  #L2f3fda.  if v3 != v1 then goto L2f3fe0;
  #L2f3fde.  goto L2f3fee;
  #L2f3fe0.  call temp:= `a`(v1, v5) @signature `Lcom/airbnb/lottie/a1/a;.a:(F)Z` @kind virtual;
  #L2f3fe6.  v3:= temp;
  #L2f3fe8.  if v3 == 0 then goto L2f3fee;
  #L2f3fec.  return v1 @kind object;
  #L2f3fee.  v0:= v0 + -1;
  #L2f3ff2.  goto L2f3fc2;
  #L2f3ff4.  v5:= v4.`com.airbnb.lottie.w0.c.e.a` @type ^`java.util.List` @kind object;
  #L2f3ff8.  v0:= 0I;
  #L2f3ffa.  call temp:= `get`(v5, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f4000.  v5:= temp @kind object;
  #L2f4002.  v5:= (`com.airbnb.lottie.a1.a`) v5 @kind object;
  #L2f4006.  return v5 @kind object;
}
procedure `boolean` `a`(`com.airbnb.lottie.w0.c.e` v2 @kind this, `float` v3 ) @signature `Lcom/airbnb/lottie/w0/c/e;.a:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f3ef8.  v0:= v2.`com.airbnb.lottie.w0.c.e.c` @type ^`com.airbnb.lottie.a1.a` @kind object;
  #L2f3efc.  v1:= v2.`com.airbnb.lottie.w0.c.e.b` @type ^`com.airbnb.lottie.a1.a` @kind object;
  #L2f3f00.  if v0 != v1 then goto L2f3f14;
  #L2f3f04.  v0:= v2.`com.airbnb.lottie.w0.c.e.d` @type ^`float`;
  #L2f3f08.  v0:= fcmpl(v0, v3);
  #L2f3f0c.  if v0 != 0 then goto L2f3f14;
  #L2f3f10.  v3:= 1I;
  #L2f3f12.  return v3;
  #L2f3f14.  v2.`com.airbnb.lottie.w0.c.e.c` @type ^`com.airbnb.lottie.a1.a` := v1 @kind object;
  #L2f3f18.  v2.`com.airbnb.lottie.w0.c.e.d` @type ^`float` := v3;
  #L2f3f1c.  v3:= 0I;
  #L2f3f1e.  return v3;
}
procedure `com.airbnb.lottie.a1.a` `b`(`com.airbnb.lottie.w0.c.e` v1 @kind this) @signature `Lcom/airbnb/lottie/w0/c/e;.b:()Lcom/airbnb/lottie/a1/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4018.  v0:= v1.`com.airbnb.lottie.w0.c.e.b` @type ^`com.airbnb.lottie.a1.a` @kind object;
  #L2f401c.  return v0 @kind object;
}
procedure `boolean` `c`(`com.airbnb.lottie.w0.c.e` v2 @kind this, `float` v3 ) @signature `Lcom/airbnb/lottie/w0/c/e;.c:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f3f44.  v0:= v2.`com.airbnb.lottie.w0.c.e.b` @type ^`com.airbnb.lottie.a1.a` @kind object;
  #L2f3f48.  call temp:= `a`(v0, v3) @signature `Lcom/airbnb/lottie/a1/a;.a:(F)Z` @kind virtual;
  #L2f3f4e.  v0:= temp;
  #L2f3f50.  v1:= 1I;
  #L2f3f52.  if v0 == 0 then goto L2f3f66;
  #L2f3f56.  v3:= v2.`com.airbnb.lottie.w0.c.e.b` @type ^`com.airbnb.lottie.a1.a` @kind object;
  #L2f3f5a.  call temp:= `h`(v3) @signature `Lcom/airbnb/lottie/a1/a;.h:()Z` @kind virtual;
  #L2f3f60.  v3:= temp;
  #L2f3f62.  v3:= v3 ^~ v1 @kind int;
  #L2f3f64.  return v3;
  #L2f3f66.  call temp:= `f`(v2, v3) @signature `Lcom/airbnb/lottie/w0/c/e;.f:(F)Lcom/airbnb/lottie/a1/a;` @kind direct;
  #L2f3f6c.  v3:= temp @kind object;
  #L2f3f6e.  v2.`com.airbnb.lottie.w0.c.e.b` @type ^`com.airbnb.lottie.a1.a` := v3 @kind object;
  #L2f3f72.  return v1;
}
procedure `float` `d`(`com.airbnb.lottie.w0.c.e` v2 @kind this) @signature `Lcom/airbnb/lottie/w0/c/e;.d:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f4030.  v0:= v2.`com.airbnb.lottie.w0.c.e.a` @type ^`java.util.List` @kind object;
  #L2f4034.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f403a.  v1:= temp;
  #L2f403c.  v1:= v1 + -1;
  #L2f4040.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f4046.  v0:= temp @kind object;
  #L2f4048.  v0:= (`com.airbnb.lottie.a1.a`) v0 @kind object;
  #L2f404c.  call temp:= `b`(v0) @signature `Lcom/airbnb/lottie/a1/a;.b:()F` @kind virtual;
  #L2f4052.  v0:= temp;
  #L2f4054.  return v0;
}
procedure `float` `e`(`com.airbnb.lottie.w0.c.e` v2 @kind this) @signature `Lcom/airbnb/lottie/w0/c/e;.e:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f4068.  v0:= v2.`com.airbnb.lottie.w0.c.e.a` @type ^`java.util.List` @kind object;
  #L2f406c.  v1:= 0I;
  #L2f406e.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f4074.  v0:= temp @kind object;
  #L2f4076.  v0:= (`com.airbnb.lottie.a1.a`) v0 @kind object;
  #L2f407a.  call temp:= `e`(v0) @signature `Lcom/airbnb/lottie/a1/a;.e:()F` @kind virtual;
  #L2f4080.  v0:= temp;
  #L2f4082.  return v0;
}
procedure `boolean` `isEmpty`(`com.airbnb.lottie.w0.c.e` v1 @kind this) @signature `Lcom/airbnb/lottie/w0/c/e;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f3f30.  v0:= 0I;
  #L2f3f32.  return v0;
}
