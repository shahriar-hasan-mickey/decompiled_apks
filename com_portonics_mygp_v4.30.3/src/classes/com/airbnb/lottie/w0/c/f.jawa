record `com.airbnb.lottie.w0.c.f` @kind class @AccessFlag FINAL extends `com.airbnb.lottie.w0.c.d` @kind interface {
  `com.airbnb.lottie.a1.a` `com.airbnb.lottie.w0.c.f.a` @AccessFlag PRIVATE_FINAL;
  `float` `com.airbnb.lottie.w0.c.f.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.airbnb.lottie.w0.c.f` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lcom/airbnb/lottie/w0/c/f;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2f4184.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f418a.  v0:= -1.0F;
  #L2f418e.  v1.`com.airbnb.lottie.w0.c.f.b` @type ^`float` := v0;
  #L2f4192.  v0:= 0I;
  #L2f4194.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f419a.  v2:= temp @kind object;
  #L2f419c.  v2:= (`com.airbnb.lottie.a1.a`) v2 @kind object;
  #L2f41a0.  v1.`com.airbnb.lottie.w0.c.f.a` @type ^`com.airbnb.lottie.a1.a` := v2 @kind object;
  #L2f41a4.  return @kind void;
}
procedure `boolean` `a`(`com.airbnb.lottie.w0.c.f` v1 @kind this, `float` v2 ) @signature `Lcom/airbnb/lottie/w0/c/f;.a:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f40cc.  v0:= v1.`com.airbnb.lottie.w0.c.f.b` @type ^`float`;
  #L2f40d0.  v0:= fcmpl(v0, v2);
  #L2f40d4.  if v0 != 0 then goto L2f40dc;
  #L2f40d8.  v2:= 1I;
  #L2f40da.  return v2;
  #L2f40dc.  v1.`com.airbnb.lottie.w0.c.f.b` @type ^`float` := v2;
  #L2f40e0.  v2:= 0I;
  #L2f40e2.  return v2;
}
procedure `com.airbnb.lottie.a1.a` `b`(`com.airbnb.lottie.w0.c.f` v1 @kind this) @signature `Lcom/airbnb/lottie/w0/c/f;.b:()Lcom/airbnb/lottie/a1/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f412c.  v0:= v1.`com.airbnb.lottie.w0.c.f.a` @type ^`com.airbnb.lottie.a1.a` @kind object;
  #L2f4130.  return v0 @kind object;
}
procedure `boolean` `c`(`com.airbnb.lottie.w0.c.f` v0 @kind this, `float` v1 ) @signature `Lcom/airbnb/lottie/w0/c/f;.c:(F)Z` @AccessFlag PUBLIC {
    temp;

  #L2f4108.  v1:= v0.`com.airbnb.lottie.w0.c.f.a` @type ^`com.airbnb.lottie.a1.a` @kind object;
  #L2f410c.  call temp:= `h`(v1) @signature `Lcom/airbnb/lottie/a1/a;.h:()Z` @kind virtual;
  #L2f4112.  v1:= temp;
  #L2f4114.  v1:= v1 ^~ 1;
  #L2f4118.  return v1;
}
procedure `float` `d`(`com.airbnb.lottie.w0.c.f` v1 @kind this) @signature `Lcom/airbnb/lottie/w0/c/f;.d:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4144.  v0:= v1.`com.airbnb.lottie.w0.c.f.a` @type ^`com.airbnb.lottie.a1.a` @kind object;
  #L2f4148.  call temp:= `b`(v0) @signature `Lcom/airbnb/lottie/a1/a;.b:()F` @kind virtual;
  #L2f414e.  v0:= temp;
  #L2f4150.  return v0;
}
procedure `float` `e`(`com.airbnb.lottie.w0.c.f` v1 @kind this) @signature `Lcom/airbnb/lottie/w0/c/f;.e:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4164.  v0:= v1.`com.airbnb.lottie.w0.c.f.a` @type ^`com.airbnb.lottie.a1.a` @kind object;
  #L2f4168.  call temp:= `e`(v0) @signature `Lcom/airbnb/lottie/a1/a;.e:()F` @kind virtual;
  #L2f416e.  v0:= temp;
  #L2f4170.  return v0;
}
procedure `boolean` `isEmpty`(`com.airbnb.lottie.w0.c.f` v1 @kind this) @signature `Lcom/airbnb/lottie/w0/c/f;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f40f4.  v0:= 0I;
  #L2f40f6.  return v0;
}
