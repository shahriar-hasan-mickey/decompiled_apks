record `com.airbnb.lottie.w0.c.o` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.airbnb.lottie.w0.c.o.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.airbnb.lottie.w0.c.o.b` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.airbnb.lottie.w0.c.o.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.airbnb.lottie.w0.c.o` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lcom/airbnb/lottie/w0/c/o;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2f4d24.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f4d2a.  v3.`com.airbnb.lottie.w0.c.o.c` @type ^`java.util.List` := v4 @kind object;
  #L2f4d2e.  v0:= new `java.util.ArrayList`;
  #L2f4d32.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f4d38.  v1:= temp;
  #L2f4d3a.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2f4d40.  v3.`com.airbnb.lottie.w0.c.o.a` @type ^`java.util.List` := v0 @kind object;
  #L2f4d44.  v0:= new `java.util.ArrayList`;
  #L2f4d48.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f4d4e.  v1:= temp;
  #L2f4d50.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2f4d56.  v3.`com.airbnb.lottie.w0.c.o.b` @type ^`java.util.List` := v0 @kind object;
  #L2f4d5a.  v0:= 0I;
  #L2f4d5c.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f4d62.  v1:= temp;
  #L2f4d64.  if v0 >= v1 then goto L2f4dba;
  #L2f4d68.  v1:= v3.`com.airbnb.lottie.w0.c.o.a` @type ^`java.util.List` @kind object;
  #L2f4d6c.  call temp:= `get`(v4, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f4d72.  v2:= temp @kind object;
  #L2f4d74.  v2:= (`com.airbnb.lottie.model.content.Mask`) v2 @kind object;
  #L2f4d78.  call temp:= `b`(v2) @signature `Lcom/airbnb/lottie/model/content/Mask;.b:()Lcom/airbnb/lottie/model/i/h;` @kind virtual;
  #L2f4d7e.  v2:= temp @kind object;
  #L2f4d80.  call temp:= `d`(v2) @signature `Lcom/airbnb/lottie/model/i/h;.d:()Lcom/airbnb/lottie/w0/c/t;` @kind virtual;
  #L2f4d86.  v2:= temp @kind object;
  #L2f4d88.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f4d8e.  call temp:= `get`(v4, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f4d94.  v1:= temp @kind object;
  #L2f4d96.  v1:= (`com.airbnb.lottie.model.content.Mask`) v1 @kind object;
  #L2f4d9a.  call temp:= `c`(v1) @signature `Lcom/airbnb/lottie/model/content/Mask;.c:()Lcom/airbnb/lottie/model/i/d;` @kind virtual;
  #L2f4da0.  v1:= temp @kind object;
  #L2f4da2.  v2:= v3.`com.airbnb.lottie.w0.c.o.b` @type ^`java.util.List` @kind object;
  #L2f4da6.  call temp:= `a`(v1) @signature `Lcom/airbnb/lottie/model/i/d;.a:()Lcom/airbnb/lottie/w0/c/g;` @kind virtual;
  #L2f4dac.  v1:= temp @kind object;
  #L2f4dae.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f4db4.  v0:= v0 + 1;
  #L2f4db8.  goto L2f4d5c;
  #L2f4dba.  return @kind void;
}
procedure `java.util.List` `a`(`com.airbnb.lottie.w0.c.o` v1 @kind this) @signature `Lcom/airbnb/lottie/w0/c/o;.a:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4cdc.  v0:= v1.`com.airbnb.lottie.w0.c.o.a` @type ^`java.util.List` @kind object;
  #L2f4ce0.  return v0 @kind object;
}
procedure `java.util.List` `b`(`com.airbnb.lottie.w0.c.o` v1 @kind this) @signature `Lcom/airbnb/lottie/w0/c/o;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4cf4.  v0:= v1.`com.airbnb.lottie.w0.c.o.c` @type ^`java.util.List` @kind object;
  #L2f4cf8.  return v0 @kind object;
}
procedure `java.util.List` `c`(`com.airbnb.lottie.w0.c.o` v1 @kind this) @signature `Lcom/airbnb/lottie/w0/c/o;.c:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4d0c.  v0:= v1.`com.airbnb.lottie.w0.c.o.b` @type ^`java.util.List` @kind object;
  #L2f4d10.  return v0 @kind object;
}
