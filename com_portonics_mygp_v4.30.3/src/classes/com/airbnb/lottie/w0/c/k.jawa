record `com.airbnb.lottie.w0.c.k` @kind class @AccessFlag PUBLIC extends `com.airbnb.lottie.w0.c.n` @kind class {
}
procedure `void` `<init>`(`com.airbnb.lottie.w0.c.k` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lcom/airbnb/lottie/w0/c/k;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f4ae4.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/w0/c/n;.<init>:(Ljava/util/List;)V` @kind direct;
  #L2f4aea.  return @kind void;
}
procedure `java.lang.Object` `i`(`com.airbnb.lottie.w0.c.k` v0 @kind this, `com.airbnb.lottie.a1.a` v1 @kind object, `float` v2 ) @signature `Lcom/airbnb/lottie/w0/c/k;.i:(Lcom/airbnb/lottie/a1/a;F)Ljava/lang/Object;` @AccessFlag SYNTHETIC {
    temp;

  #L2f4ac8.  call temp:= `r`(v0, v1, v2) @signature `Lcom/airbnb/lottie/w0/c/k;.r:(Lcom/airbnb/lottie/a1/a;F)Ljava/lang/Float;` @kind virtual;
  #L2f4ace.  v1:= temp @kind object;
  #L2f4ad0.  return v1 @kind object;
}
procedure `float` `p`(`com.airbnb.lottie.w0.c.k` v2 @kind this) @signature `Lcom/airbnb/lottie/w0/c/k;.p:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f49d4.  call temp:= `b`(v2) @signature `Lcom/airbnb/lottie/w0/c/g;.b:()Lcom/airbnb/lottie/a1/a;` @kind virtual;
  #L2f49da.  v0:= temp @kind object;
  #L2f49dc.  call temp:= `d`(v2) @signature `Lcom/airbnb/lottie/w0/c/g;.d:()F` @kind virtual;
  #L2f49e2.  v1:= temp;
  #L2f49e4.  call temp:= `q`(v2, v0, v1) @signature `Lcom/airbnb/lottie/w0/c/k;.q:(Lcom/airbnb/lottie/a1/a;F)F` @kind virtual;
  #L2f49ea.  v0:= temp;
  #L2f49ec.  return v0;
}
procedure `float` `q`(`com.airbnb.lottie.w0.c.k` v9 @kind this, `com.airbnb.lottie.a1.a` v10 @kind object, `float` v11 ) @signature `Lcom/airbnb/lottie/w0/c/k;.q:(Lcom/airbnb/lottie/a1/a;F)F` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2f4a00.  v0:= v10.`com.airbnb.lottie.a1.a.b` @type ^`java.lang.Object` @kind object;
  #L2f4a04.  if v0 == 0 then goto L2f4a82;
  #L2f4a08.  v0:= v10.`com.airbnb.lottie.a1.a.c` @type ^`java.lang.Object` @kind object;
  #L2f4a0c.  if v0 == 0 then goto L2f4a82;
  #L2f4a10.  v1:= v9.`com.airbnb.lottie.w0.c.g.e` @type ^`com.airbnb.lottie.a1.c` @kind object;
  #L2f4a14.  if v1 == 0 then goto L2f4a68;
  #L2f4a18.  v2:= v10.`com.airbnb.lottie.a1.a.g` @type ^`float`;
  #L2f4a1c.  v0:= v10.`com.airbnb.lottie.a1.a.h` @type ^`java.lang.Float` @kind object;
  #L2f4a20.  call temp:= `floatValue`(v0) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L2f4a26.  v3:= temp;
  #L2f4a28.  v0:= v10.`com.airbnb.lottie.a1.a.b` @type ^`java.lang.Object` @kind object;
  #L2f4a2c.  v4:= v0 @kind object;
  #L2f4a2e.  v4:= (`java.lang.Float`) v4 @kind object;
  #L2f4a32.  v0:= v10.`com.airbnb.lottie.a1.a.c` @type ^`java.lang.Object` @kind object;
  #L2f4a36.  v5:= v0 @kind object;
  #L2f4a38.  v5:= (`java.lang.Float`) v5 @kind object;
  #L2f4a3c.  call temp:= `e`(v9) @signature `Lcom/airbnb/lottie/w0/c/g;.e:()F` @kind virtual;
  #L2f4a42.  v7:= temp;
  #L2f4a44.  call temp:= `f`(v9) @signature `Lcom/airbnb/lottie/w0/c/g;.f:()F` @kind virtual;
  #L2f4a4a.  v8:= temp;
  #L2f4a4c.  v6:= v11;
  #L2f4a4e.  call temp:= `b`(v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lcom/airbnb/lottie/a1/c;.b:(FFLjava/lang/Object;Ljava/lang/Object;FFF)Ljava/lang/Object;` @kind virtual;
  #L2f4a54.  v0:= temp @kind object;
  #L2f4a56.  v0:= (`java.lang.Float`) v0 @kind object;
  #L2f4a5a.  if v0 == 0 then goto L2f4a68;
  #L2f4a5e.  call temp:= `floatValue`(v0) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L2f4a64.  v10:= temp;
  #L2f4a66.  return v10;
  #L2f4a68.  call temp:= `f`(v10) @signature `Lcom/airbnb/lottie/a1/a;.f:()F` @kind virtual;
  #L2f4a6e.  v0:= temp;
  #L2f4a70.  call temp:= `c`(v10) @signature `Lcom/airbnb/lottie/a1/a;.c:()F` @kind virtual;
  #L2f4a76.  v10:= temp;
  #L2f4a78.  call temp:= `i`(v0, v10, v11) @signature `Lcom/airbnb/lottie/z0/g;.i:(FFF)F` @kind static;
  #L2f4a7e.  v10:= temp;
  #L2f4a80.  return v10;
  #L2f4a82.  v10:= new `java.lang.IllegalStateException`;
  #L2f4a86.  v11:= "Missing values for keyframe." @kind object;
  #L2f4a8a.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f4a90.  throw v10;
}
procedure `java.lang.Float` `r`(`com.airbnb.lottie.w0.c.k` v0 @kind this, `com.airbnb.lottie.a1.a` v1 @kind object, `float` v2 ) @signature `Lcom/airbnb/lottie/w0/c/k;.r:(Lcom/airbnb/lottie/a1/a;F)Ljava/lang/Float;` @AccessFlag  {
    temp;

  #L2f4aa4.  call temp:= `q`(v0, v1, v2) @signature `Lcom/airbnb/lottie/w0/c/k;.q:(Lcom/airbnb/lottie/a1/a;F)F` @kind virtual;
  #L2f4aaa.  v1:= temp;
  #L2f4aac.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L2f4ab2.  v1:= temp @kind object;
  #L2f4ab4.  return v1 @kind object;
}
