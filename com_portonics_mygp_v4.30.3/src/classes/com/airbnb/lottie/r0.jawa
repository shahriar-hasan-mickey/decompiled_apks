record `com.airbnb.lottie.r0` @kind class @AccessFlag PUBLIC {
  `boolean` `com.airbnb.lottie.r0.a` @AccessFlag PRIVATE;
  `java.util.Set` `com.airbnb.lottie.r0.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.airbnb.lottie.r0.c` @AccessFlag PRIVATE_FINAL;
  `java.util.Comparator` `com.airbnb.lottie.r0.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.airbnb.lottie.r0` v1 @kind this) @signature `Lcom/airbnb/lottie/r0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ee610.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ee616.  v0:= 0I;
  #L2ee618.  v1.`com.airbnb.lottie.r0.a` @type ^`boolean` := v0 @kind boolean;
  #L2ee61c.  v0:= new `androidx.collection.b`;
  #L2ee620.  call `<init>`(v0) @signature `Landroidx/collection/b;.<init>:()V` @kind direct;
  #L2ee626.  v1.`com.airbnb.lottie.r0.b` @type ^`java.util.Set` := v0 @kind object;
  #L2ee62a.  v0:= new `java.util.HashMap`;
  #L2ee62e.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2ee634.  v1.`com.airbnb.lottie.r0.c` @type ^`java.util.Map` := v0 @kind object;
  #L2ee638.  v0:= new `com.airbnb.lottie.p0`;
  #L2ee63c.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/p0;.<init>:(Lcom/airbnb/lottie/r0;)V` @kind direct;
  #L2ee642.  v1.`com.airbnb.lottie.r0.d` @type ^`java.util.Comparator` := v0 @kind object;
  #L2ee646.  return @kind void;
}
procedure `void` `a`(`com.airbnb.lottie.r0` v2 @kind this, `java.lang.String` v3 @kind object, `float` v4 ) @signature `Lcom/airbnb/lottie/r0;.a:(Ljava/lang/String;F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ee658.  v0:= v2.`com.airbnb.lottie.r0.a` @type ^`boolean` @kind boolean;
  #L2ee65c.  if v0 != 0 then goto L2ee662;
  #L2ee660.  return @kind void;
  #L2ee662.  v0:= v2.`com.airbnb.lottie.r0.c` @type ^`java.util.Map` @kind object;
  #L2ee666.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2ee66c.  v0:= temp @kind object;
  #L2ee66e.  v0:= (`com.airbnb.lottie.z0.f`) v0 @kind object;
  #L2ee672.  if v0 != 0 then goto L2ee68a;
  #L2ee676.  v0:= new `com.airbnb.lottie.z0.f`;
  #L2ee67a.  call `<init>`(v0) @signature `Lcom/airbnb/lottie/z0/f;.<init>:()V` @kind direct;
  #L2ee680.  v1:= v2.`com.airbnb.lottie.r0.c` @type ^`java.util.Map` @kind object;
  #L2ee684.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2ee68a.  call `a`(v0, v4) @signature `Lcom/airbnb/lottie/z0/f;.a:(F)V` @kind virtual;
  #L2ee690.  v0:= "__container" @kind object;
  #L2ee694.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2ee69a.  v3:= temp;
  #L2ee69c.  if v3 == 0 then goto L2ee6cc;
  #L2ee6a0.  v3:= v2.`com.airbnb.lottie.r0.b` @type ^`java.util.Set` @kind object;
  #L2ee6a4.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ee6aa.  v3:= temp @kind object;
  #L2ee6ac.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ee6b2.  v0:= temp;
  #L2ee6b4.  if v0 == 0 then goto L2ee6cc;
  #L2ee6b8.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ee6be.  v0:= temp @kind object;
  #L2ee6c0.  v0:= (`com.airbnb.lottie.q0`) v0 @kind object;
  #L2ee6c4.  call `a`(v0, v4) @signature `Lcom/airbnb/lottie/q0;.a:(F)V` @kind interface;
  #L2ee6ca.  goto L2ee6ac;
  #L2ee6cc.  return @kind void;
}
procedure `void` `b`(`com.airbnb.lottie.r0` v0 @kind this, `boolean` v1 ) @signature `Lcom/airbnb/lottie/r0;.b:(Z)V` @AccessFlag  {
    temp;

  #L2ee6e0.  v0.`com.airbnb.lottie.r0.a` @type ^`boolean` := v1 @kind boolean;
  #L2ee6e4.  return @kind void;
}
