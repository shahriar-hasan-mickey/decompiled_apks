record `com.adjust.sdk.scheduler.TimerCycle` @kind class @AccessFlag PUBLIC {
  `java.lang.Runnable` `com.adjust.sdk.scheduler.TimerCycle.command` @AccessFlag PRIVATE;
  `long` `com.adjust.sdk.scheduler.TimerCycle.cycleDelay` @AccessFlag PRIVATE;
  `long` `com.adjust.sdk.scheduler.TimerCycle.initialDelay` @AccessFlag PRIVATE;
  `boolean` `com.adjust.sdk.scheduler.TimerCycle.isPaused` @AccessFlag PRIVATE;
  `com.adjust.sdk.ILogger` `com.adjust.sdk.scheduler.TimerCycle.logger` @AccessFlag PRIVATE;
  `java.lang.String` `com.adjust.sdk.scheduler.TimerCycle.name` @AccessFlag PRIVATE;
  `com.adjust.sdk.scheduler.FutureScheduler` `com.adjust.sdk.scheduler.TimerCycle.scheduler` @AccessFlag PRIVATE;
  `java.util.concurrent.ScheduledFuture` `com.adjust.sdk.scheduler.TimerCycle.waitingTask` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.adjust.sdk.scheduler.TimerCycle` v4 @kind this, `java.lang.Runnable` v5 @kind object, `long` v6 , `long` v8 , `java.lang.String` v10 @kind object) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.<init>:(Ljava/lang/Runnable;JJLjava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e89c4.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e89ca.  v0:= new `com.adjust.sdk.scheduler.SingleThreadFutureScheduler`;
  #L2e89ce.  v1:= 1I;
  #L2e89d0.  call `<init>`(v0, v10, v1) @signature `Lcom/adjust/sdk/scheduler/SingleThreadFutureScheduler;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L2e89d6.  v4.`com.adjust.sdk.scheduler.TimerCycle.scheduler` @type ^`com.adjust.sdk.scheduler.FutureScheduler` := v0 @kind object;
  #L2e89da.  v4.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` := v10 @kind object;
  #L2e89de.  v4.`com.adjust.sdk.scheduler.TimerCycle.command` @type ^`java.lang.Runnable` := v5 @kind object;
  #L2e89e2.  v4.`com.adjust.sdk.scheduler.TimerCycle.initialDelay` @type ^`long` := v6 @kind wide;
  #L2e89e6.  v4.`com.adjust.sdk.scheduler.TimerCycle.cycleDelay` @type ^`long` := v8 @kind wide;
  #L2e89ea.  v4.`com.adjust.sdk.scheduler.TimerCycle.isPaused` @type ^`boolean` := v1 @kind boolean;
  #L2e89ee.  call temp:= `getLogger`() @signature `Lcom/adjust/sdk/AdjustFactory;.getLogger:()Lcom/adjust/sdk/ILogger;` @kind static;
  #L2e89f4.  v5:= temp @kind object;
  #L2e89f6.  v4.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` := v5 @kind object;
  #L2e89fa.  v5:= `@@com.adjust.sdk.Util.SecondsDisplayFormat` @type ^`java.text.DecimalFormat` @kind object;
  #L2e89fe.  v8:= (`double`) v8 @kind l2d;
  #L2e8a00.  v2:= 1000.0D;
  #L2e8a0a.  call temp:= `isNaN`(v8) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2e8a10.  v8:= v8 / v2 @kind double;
  #L2e8a12.  call temp:= `format`(v5, v8) @signature `Ljava/text/NumberFormat;.format:(D)Ljava/lang/String;` @kind virtual;
  #L2e8a18.  v8:= temp @kind object;
  #L2e8a1a.  v6:= (`double`) v6 @kind l2d;
  #L2e8a1c.  call temp:= `isNaN`(v6) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2e8a22.  v6:= v6 / v2 @kind double;
  #L2e8a24.  call temp:= `format`(v5, v6) @signature `Ljava/text/NumberFormat;.format:(D)Ljava/lang/String;` @kind virtual;
  #L2e8a2a.  v5:= temp @kind object;
  #L2e8a2c.  v6:= v4.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L2e8a30.  v7:= 3I;
  #L2e8a32.  v7:= new `java.lang.Object`[v7];
  #L2e8a36.  v9:= 0I;
  #L2e8a38.  v7[v9]:= v10 @kind object;
  #L2e8a3c.  v7[v1]:= v5 @kind object;
  #L2e8a40.  v5:= 2I;
  #L2e8a42.  v7[v5]:= v8 @kind object;
  #L2e8a46.  v5:= "%s configured to fire after %s seconds of starting and cycles every %s seconds" @kind object;
  #L2e8a4a.  call `verbose`(v6, v5, v7) @signature `Lcom/adjust/sdk/ILogger;.verbose:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L2e8a50.  return @kind void;
}
procedure `java.lang.String` `access$000`(`com.adjust.sdk.scheduler.TimerCycle` v0 @kind object) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.access$000:(Lcom/adjust/sdk/scheduler/TimerCycle;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2e89ac.  v0:= v0.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` @kind object;
  #L2e89b0.  return v0 @kind object;
}
procedure `com.adjust.sdk.ILogger` `access$100`(`com.adjust.sdk.scheduler.TimerCycle` v0 @kind object) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.access$100:(Lcom/adjust/sdk/scheduler/TimerCycle;)Lcom/adjust/sdk/ILogger;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2e897c.  v0:= v0.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L2e8980.  return v0 @kind object;
}
procedure `java.lang.Runnable` `access$200`(`com.adjust.sdk.scheduler.TimerCycle` v0 @kind object) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.access$200:(Lcom/adjust/sdk/scheduler/TimerCycle;)Ljava/lang/Runnable;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2e8994.  v0:= v0.`com.adjust.sdk.scheduler.TimerCycle.command` @type ^`java.lang.Runnable` @kind object;
  #L2e8998.  return v0 @kind object;
}
procedure `void` `cancel`(`com.adjust.sdk.scheduler.TimerCycle` v1 @kind this, `boolean` v2 ) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.cancel:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2e8a64.  v0:= v1.`com.adjust.sdk.scheduler.TimerCycle.waitingTask` @type ^`java.util.concurrent.ScheduledFuture` @kind object;
  #L2e8a68.  if v0 == 0 then goto L2e8a72;
  #L2e8a6c.  call temp:= `cancel`(v0, v2) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L2e8a72.  v2:= 0I;
  #L2e8a74.  v1.`com.adjust.sdk.scheduler.TimerCycle.waitingTask` @type ^`java.util.concurrent.ScheduledFuture` := v2 @kind object;
  #L2e8a78.  return @kind void;
}
procedure `void` `start`(`com.adjust.sdk.scheduler.TimerCycle` v10 @kind this) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2e8a8c.  v0:= v10.`com.adjust.sdk.scheduler.TimerCycle.isPaused` @type ^`boolean` @kind boolean;
  #L2e8a90.  v1:= 1I;
  #L2e8a92.  v2:= 0I;
  #L2e8a94.  if v0 != 0 then goto L2e8ab4;
  #L2e8a98.  v0:= v10.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L2e8a9c.  v1:= new `java.lang.Object`[v1];
  #L2e8aa0.  v3:= v10.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` @kind object;
  #L2e8aa4.  v1[v2]:= v3 @kind object;
  #L2e8aa8.  v2:= "%s is already started" @kind object;
  #L2e8aac.  call `verbose`(v0, v2, v1) @signature `Lcom/adjust/sdk/ILogger;.verbose:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L2e8ab2.  return @kind void;
  #L2e8ab4.  v0:= v10.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L2e8ab8.  v1:= new `java.lang.Object`[v1];
  #L2e8abc.  v3:= v10.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` @kind object;
  #L2e8ac0.  v1[v2]:= v3 @kind object;
  #L2e8ac4.  v3:= "%s starting" @kind object;
  #L2e8ac8.  call `verbose`(v0, v3, v1) @signature `Lcom/adjust/sdk/ILogger;.verbose:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L2e8ace.  v4:= v10.`com.adjust.sdk.scheduler.TimerCycle.scheduler` @type ^`com.adjust.sdk.scheduler.FutureScheduler` @kind object;
  #L2e8ad2.  v5:= new `com.adjust.sdk.scheduler.TimerCycle$a`;
  #L2e8ad6.  call `<init>`(v5, v10) @signature `Lcom/adjust/sdk/scheduler/TimerCycle$a;.<init>:(Lcom/adjust/sdk/scheduler/TimerCycle;)V` @kind direct;
  #L2e8adc.  v6:= v10.`com.adjust.sdk.scheduler.TimerCycle.initialDelay` @type ^`long` @kind wide;
  #L2e8ae0.  v8:= v10.`com.adjust.sdk.scheduler.TimerCycle.cycleDelay` @type ^`long` @kind wide;
  #L2e8ae4.  call temp:= `scheduleFutureWithFixedDelay`(v4, v5, v6, v8) @signature `Lcom/adjust/sdk/scheduler/FutureScheduler;.scheduleFutureWithFixedDelay:(Ljava/lang/Runnable;JJ)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L2e8aea.  v0:= temp @kind object;
  #L2e8aec.  v10.`com.adjust.sdk.scheduler.TimerCycle.waitingTask` @type ^`java.util.concurrent.ScheduledFuture` := v0 @kind object;
  #L2e8af0.  v10.`com.adjust.sdk.scheduler.TimerCycle.isPaused` @type ^`boolean` := v2 @kind boolean;
  #L2e8af4.  return @kind void;
}
procedure `void` `suspend`(`com.adjust.sdk.scheduler.TimerCycle` v7 @kind this) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.suspend:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e8b08.  v0:= v7.`com.adjust.sdk.scheduler.TimerCycle.isPaused` @type ^`boolean` @kind boolean;
  #L2e8b0c.  v1:= 1I;
  #L2e8b0e.  v2:= 0I;
  #L2e8b10.  if v0 == 0 then goto L2e8b30;
  #L2e8b14.  v0:= v7.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L2e8b18.  v1:= new `java.lang.Object`[v1];
  #L2e8b1c.  v3:= v7.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` @kind object;
  #L2e8b20.  v1[v2]:= v3 @kind object;
  #L2e8b24.  v2:= "%s is already suspended" @kind object;
  #L2e8b28.  call `verbose`(v0, v2, v1) @signature `Lcom/adjust/sdk/ILogger;.verbose:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L2e8b2e.  return @kind void;
  #L2e8b30.  v0:= v7.`com.adjust.sdk.scheduler.TimerCycle.waitingTask` @type ^`java.util.concurrent.ScheduledFuture` @kind object;
  #L2e8b34.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2e8b38.  call temp:= `getDelay`(v0, v3) @signature `Ljava/util/concurrent/Delayed;.getDelay:(Ljava/util/concurrent/TimeUnit;)J` @kind interface;
  #L2e8b3e.  v3:= temp @kind wide;
  #L2e8b40.  v7.`com.adjust.sdk.scheduler.TimerCycle.initialDelay` @type ^`long` := v3 @kind wide;
  #L2e8b44.  v0:= v7.`com.adjust.sdk.scheduler.TimerCycle.waitingTask` @type ^`java.util.concurrent.ScheduledFuture` @kind object;
  #L2e8b48.  call temp:= `cancel`(v0, v2) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L2e8b4e.  v0:= `@@com.adjust.sdk.Util.SecondsDisplayFormat` @type ^`java.text.DecimalFormat` @kind object;
  #L2e8b52.  v3:= v7.`com.adjust.sdk.scheduler.TimerCycle.initialDelay` @type ^`long` @kind wide;
  #L2e8b56.  v3:= (`double`) v3 @kind l2d;
  #L2e8b58.  v5:= 1000.0D;
  #L2e8b62.  call temp:= `isNaN`(v3) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2e8b68.  v3:= v3 / v5 @kind double;
  #L2e8b6a.  call temp:= `format`(v0, v3) @signature `Ljava/text/NumberFormat;.format:(D)Ljava/lang/String;` @kind virtual;
  #L2e8b70.  v0:= temp @kind object;
  #L2e8b72.  v3:= v7.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L2e8b76.  v4:= 2I;
  #L2e8b78.  v4:= new `java.lang.Object`[v4];
  #L2e8b7c.  v5:= v7.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` @kind object;
  #L2e8b80.  v4[v2]:= v5 @kind object;
  #L2e8b84.  v4[v1]:= v0 @kind object;
  #L2e8b88.  v0:= "%s suspended with %s seconds left" @kind object;
  #L2e8b8c.  call `verbose`(v3, v0, v4) @signature `Lcom/adjust/sdk/ILogger;.verbose:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L2e8b92.  v7.`com.adjust.sdk.scheduler.TimerCycle.isPaused` @type ^`boolean` := v1 @kind boolean;
  #L2e8b96.  return @kind void;
}
procedure `void` `teardown`(`com.adjust.sdk.scheduler.TimerCycle` v1 @kind this) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.teardown:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e8ba8.  v0:= 1I;
  #L2e8baa.  call `cancel`(v1, v0) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.cancel:(Z)V` @kind direct;
  #L2e8bb0.  v0:= v1.`com.adjust.sdk.scheduler.TimerCycle.scheduler` @type ^`com.adjust.sdk.scheduler.FutureScheduler` @kind object;
  #L2e8bb4.  if v0 == 0 then goto L2e8bbe;
  #L2e8bb8.  call `teardown`(v0) @signature `Lcom/adjust/sdk/scheduler/FutureScheduler;.teardown:()V` @kind interface;
  #L2e8bbe.  v0:= 0I;
  #L2e8bc0.  v1.`com.adjust.sdk.scheduler.TimerCycle.scheduler` @type ^`com.adjust.sdk.scheduler.FutureScheduler` := v0 @kind object;
  #L2e8bc4.  return @kind void;
}
