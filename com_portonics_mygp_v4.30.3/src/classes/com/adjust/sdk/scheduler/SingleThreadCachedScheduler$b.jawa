record `com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Runnable` @kind interface {
  `long` `com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b.a` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
  `java.lang.Runnable` `com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b.b` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
  `com.adjust.sdk.scheduler.SingleThreadCachedScheduler` `com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b.c` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b` v0 @kind this, `com.adjust.sdk.scheduler.SingleThreadCachedScheduler` v1 @kind object, `long` v2 , `java.lang.Runnable` v4 @kind object) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler$b;.<init>:(Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;JLjava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e8288.  v0.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b.c` @type ^`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` := v1 @kind object;
  #L2e828c.  v0.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b.a` @type ^`long` := v2 @kind wide;
  #L2e8290.  v0.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b.b` @type ^`java.lang.Runnable` := v4 @kind object;
  #L2e8294.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e829a.  return @kind void;
}
procedure `void` `run`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b` v4 @kind this) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler$b;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e82ac.  v0:= v4.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b.a` @type ^`long` @kind wide;
  #L2e82b0.  call `sleep`(v0) @signature `Ljava/lang/Thread;.sleep:(J)V` @kind static;
  #L2e82b6.  goto L2e82e0;
  #L2e82b8.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L2e82ba.  call temp:= `getLogger`() @signature `Lcom/adjust/sdk/AdjustFactory;.getLogger:()Lcom/adjust/sdk/ILogger;` @kind static;
  #L2e82c0.  v1:= temp @kind object;
  #L2e82c2.  v2:= 1I;
  #L2e82c4.  v2:= new `java.lang.Object`[v2];
  #L2e82c8.  call temp:= `getMessage`(v0) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L2e82ce.  v0:= temp @kind object;
  #L2e82d0.  v3:= 0I;
  #L2e82d2.  v2[v3]:= v0 @kind object;
  #L2e82d6.  v0:= "Sleep delay exception: %s" @kind object;
  #L2e82da.  call `warn`(v1, v0, v2) @signature `Lcom/adjust/sdk/ILogger;.warn:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L2e82e0.  v0:= v4.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b.c` @type ^`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` @kind object;
  #L2e82e4.  v1:= v4.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler$b.b` @type ^`java.lang.Runnable` @kind object;
  #L2e82e8.  call `submit`(v0, v1) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.submit:(Ljava/lang/Runnable;)V` @kind virtual;
  #L2e82ee.  return @kind void;
  catch `java.lang.InterruptedException` @[L2e82ac..L2e82b6] goto L2e82b8;
}
