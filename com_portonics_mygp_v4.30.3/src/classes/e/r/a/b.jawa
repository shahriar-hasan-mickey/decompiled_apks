record `e.r.a.b` @kind class @AccessFlag  {
  `int` `e.r.a.b.a` @AccessFlag PRIVATE;
  `int` `e.r.a.b.b` @AccessFlag PRIVATE;
  `int` `e.r.a.b.c` @AccessFlag PRIVATE;
  `int` `e.r.a.b.d` @AccessFlag PRIVATE;
  `int` `e.r.a.b.e` @AccessFlag PRIVATE;
  `int` `e.r.a.b.f` @AccessFlag PRIVATE;
  `int` `e.r.a.b.g` @AccessFlag PRIVATE;
  `int` `e.r.a.b.h` @AccessFlag PRIVATE;
  `int` `e.r.a.b.i` @AccessFlag PRIVATE;
  `e.r.a.c` `e.r.a.b.j` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.r.a.b` v0 @kind this, `e.r.a.c` v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/r/a/b;.<init>:(Le/r/a/c;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L278e18.  v0.`e.r.a.b.j` @type ^`e.r.a.c` := v1 @kind object;
  #L278e1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L278e22.  v0.`e.r.a.b.a` @type ^`int` := v2;
  #L278e26.  v0.`e.r.a.b.b` @type ^`int` := v3;
  #L278e2a.  call `c`(v0) @signature `Le/r/a/b;.c:()V` @kind virtual;
  #L278e30.  return @kind void;
}
procedure `boolean` `a`(`e.r.a.b` v2 @kind this) @signature `Le/r/a/b;.a:()Z` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L278cb4.  call temp:= `e`(v2) @signature `Le/r/a/b;.e:()I` @kind virtual;
  #L278cba.  v0:= temp;
  #L278cbc.  v1:= 1I;
  #L278cbe.  if v0 <= v1 then goto L278cc4;
  #L278cc2.  goto L278cc6;
  #L278cc4.  v1:= 0I;
  #L278cc6.  return v1;
}
procedure `int` `b`(`e.r.a.b` v7 @kind this) @signature `Le/r/a/b;.b:()I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L278cd8.  call temp:= `f`(v7) @signature `Le/r/a/b;.f:()I` @kind virtual;
  #L278cde.  v0:= temp;
  #L278ce0.  v1:= v7.`e.r.a.b.j` @type ^`e.r.a.c` @kind object;
  #L278ce4.  v2:= v1.`e.r.a.c.b` @type ^`int`[] @kind object;
  #L278ce8.  v1:= v1.`e.r.a.c.c` @type ^`int`[] @kind object;
  #L278cec.  v3:= v7.`e.r.a.b.a` @type ^`int`;
  #L278cf0.  v4:= v7.`e.r.a.b.b` @type ^`int`;
  #L278cf4.  call `e`(v2, v0, v3, v4) @signature `Le/r/a/c;.e:([IIII)V` @kind static;
  #L278cfa.  v3:= v7.`e.r.a.b.a` @type ^`int`;
  #L278cfe.  v4:= v7.`e.r.a.b.b` @type ^`int`;
  #L278d02.  v4:= v4 + 1;
  #L278d06.  call `sort`(v2, v3, v4) @signature `Ljava/util/Arrays;.sort:([III)V` @kind static;
  #L278d0c.  v3:= v7.`e.r.a.b.a` @type ^`int`;
  #L278d10.  v4:= v7.`e.r.a.b.b` @type ^`int`;
  #L278d14.  call `e`(v2, v0, v3, v4) @signature `Le/r/a/c;.e:([IIII)V` @kind static;
  #L278d1a.  v0:= v7.`e.r.a.b.c` @type ^`int`;
  #L278d1e.  v0:= v0 / 2;
  #L278d22.  v3:= v7.`e.r.a.b.a` @type ^`int`;
  #L278d26.  v4:= 0I;
  #L278d28.  v5:= v7.`e.r.a.b.b` @type ^`int`;
  #L278d2c.  if v3 > v5 then goto L278d52;
  #L278d30.  v6:= v2[v3];
  #L278d34.  v6:= v1[v6];
  #L278d38.  v4:= v4 + v6 @kind int;
  #L278d3a.  if v4 < v0 then goto L278d4c;
  #L278d3e.  v5:= v5 + -1;
  #L278d42.  call temp:= `min`(v5, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L278d48.  v0:= temp;
  #L278d4a.  return v0;
  #L278d4c.  v3:= v3 + 1;
  #L278d50.  goto L278d28;
  #L278d52.  v0:= v7.`e.r.a.b.a` @type ^`int`;
  #L278d56.  return v0;
}
procedure `void` `c`(`e.r.a.b` v13 @kind this) @signature `Le/r/a/b;.c:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L278e44.  v0:= v13.`e.r.a.b.j` @type ^`e.r.a.c` @kind object;
  #L278e48.  v1:= v0.`e.r.a.c.b` @type ^`int`[] @kind object;
  #L278e4c.  v0:= v0.`e.r.a.c.c` @type ^`int`[] @kind object;
  #L278e50.  v2:= v13.`e.r.a.b.a` @type ^`int`;
  #L278e54.  v3:= 2147483647I;
  #L278e5a.  v4:= -2147483648I;
  #L278e5e.  v5:= 0I;
  #L278e60.  v4:= 2147483647I;
  #L278e66.  v5:= 2147483647I;
  #L278e6c.  v6:= -2147483648I;
  #L278e70.  v7:= -2147483648I;
  #L278e74.  v8:= -2147483648I;
  #L278e78.  v9:= 0I;
  #L278e7a.  v10:= v13.`e.r.a.b.b` @type ^`int`;
  #L278e7e.  if v2 > v10 then goto L278ece;
  #L278e82.  v10:= v1[v2];
  #L278e86.  v11:= v0[v10];
  #L278e8a.  v9:= v9 + v11 @kind int;
  #L278e8c.  call temp:= `k`(v10) @signature `Le/r/a/c;.k:(I)I` @kind static;
  #L278e92.  v11:= temp;
  #L278e94.  call temp:= `j`(v10) @signature `Le/r/a/c;.j:(I)I` @kind static;
  #L278e9a.  v12:= temp;
  #L278e9c.  call temp:= `i`(v10) @signature `Le/r/a/c;.i:(I)I` @kind static;
  #L278ea2.  v10:= temp;
  #L278ea4.  if v11 <= v6 then goto L278eaa;
  #L278ea8.  v6:= v11;
  #L278eaa.  if v11 >= v3 then goto L278eb0;
  #L278eae.  v3:= v11;
  #L278eb0.  if v12 <= v7 then goto L278eb6;
  #L278eb4.  v7:= v12;
  #L278eb6.  if v12 >= v4 then goto L278ebc;
  #L278eba.  v4:= v12;
  #L278ebc.  if v10 <= v8 then goto L278ec2;
  #L278ec0.  v8:= v10;
  #L278ec2.  if v10 >= v5 then goto L278ec8;
  #L278ec6.  v5:= v10;
  #L278ec8.  v2:= v2 + 1;
  #L278ecc.  goto L278e7a;
  #L278ece.  v13.`e.r.a.b.d` @type ^`int` := v3;
  #L278ed2.  v13.`e.r.a.b.e` @type ^`int` := v6;
  #L278ed6.  v13.`e.r.a.b.f` @type ^`int` := v4;
  #L278eda.  v13.`e.r.a.b.g` @type ^`int` := v7;
  #L278ede.  v13.`e.r.a.b.h` @type ^`int` := v5;
  #L278ee2.  v13.`e.r.a.b.i` @type ^`int` := v8;
  #L278ee6.  v13.`e.r.a.b.c` @type ^`int` := v9;
  #L278eea.  return @kind void;
}
procedure `e.r.a.g` `d`(`e.r.a.b` v10 @kind this) @signature `Le/r/a/b;.d:()Le/r/a/g;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L278c10.  v0:= v10.`e.r.a.b.j` @type ^`e.r.a.c` @kind object;
  #L278c14.  v1:= v0.`e.r.a.c.b` @type ^`int`[] @kind object;
  #L278c18.  v0:= v0.`e.r.a.c.c` @type ^`int`[] @kind object;
  #L278c1c.  v2:= v10.`e.r.a.b.a` @type ^`int`;
  #L278c20.  v3:= 0I;
  #L278c22.  v4:= 0I;
  #L278c24.  v5:= 0I;
  #L278c26.  v6:= 0I;
  #L278c28.  v7:= v10.`e.r.a.b.b` @type ^`int`;
  #L278c2c.  if v2 > v7 then goto L278c6a;
  #L278c30.  v7:= v1[v2];
  #L278c34.  v8:= v0[v7];
  #L278c38.  v4:= v4 + v8 @kind int;
  #L278c3a.  call temp:= `k`(v7) @signature `Le/r/a/c;.k:(I)I` @kind static;
  #L278c40.  v9:= temp;
  #L278c42.  v9:= v9 * v8 @kind int;
  #L278c46.  v3:= v3 + v9 @kind int;
  #L278c48.  call temp:= `j`(v7) @signature `Le/r/a/c;.j:(I)I` @kind static;
  #L278c4e.  v9:= temp;
  #L278c50.  v9:= v9 * v8 @kind int;
  #L278c54.  v5:= v5 + v9 @kind int;
  #L278c56.  call temp:= `i`(v7) @signature `Le/r/a/c;.i:(I)I` @kind static;
  #L278c5c.  v7:= temp;
  #L278c5e.  v8:= v8 * v7 @kind int;
  #L278c62.  v6:= v6 + v8 @kind int;
  #L278c64.  v2:= v2 + 1;
  #L278c68.  goto L278c28;
  #L278c6a.  v0:= (`float`) v3 @kind i2f;
  #L278c6c.  v1:= (`float`) v4 @kind i2f;
  #L278c6e.  v0:= v0 / v1 @kind float;
  #L278c70.  call temp:= `round`(v0) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L278c76.  v0:= temp;
  #L278c78.  v2:= (`float`) v5 @kind i2f;
  #L278c7a.  v2:= v2 / v1 @kind float;
  #L278c7c.  call temp:= `round`(v2) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L278c82.  v2:= temp;
  #L278c84.  v3:= (`float`) v6 @kind i2f;
  #L278c86.  v3:= v3 / v1 @kind float;
  #L278c88.  call temp:= `round`(v3) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L278c8e.  v1:= temp;
  #L278c90.  v3:= new `e.r.a.g`;
  #L278c94.  call temp:= `b`(v0, v2, v1) @signature `Le/r/a/c;.b:(III)I` @kind static;
  #L278c9a.  v0:= temp;
  #L278c9c.  call `<init>`(v3, v0, v4) @signature `Le/r/a/g;.<init>:(II)V` @kind direct;
  #L278ca2.  return v3 @kind object;
}
procedure `int` `e`(`e.r.a.b` v2 @kind this) @signature `Le/r/a/b;.e:()I` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L278d68.  v0:= v2.`e.r.a.b.b` @type ^`int`;
  #L278d6c.  v0:= v0 + 1;
  #L278d70.  v1:= v2.`e.r.a.b.a` @type ^`int`;
  #L278d74.  v0:= v0 - v1 @kind int;
  #L278d76.  return v0;
}
procedure `int` `f`(`e.r.a.b` v4 @kind this) @signature `Le/r/a/b;.f:()I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L278d88.  v0:= v4.`e.r.a.b.e` @type ^`int`;
  #L278d8c.  v1:= v4.`e.r.a.b.d` @type ^`int`;
  #L278d90.  v0:= v0 - v1 @kind int;
  #L278d92.  v1:= v4.`e.r.a.b.g` @type ^`int`;
  #L278d96.  v2:= v4.`e.r.a.b.f` @type ^`int`;
  #L278d9a.  v1:= v1 - v2 @kind int;
  #L278d9c.  v2:= v4.`e.r.a.b.i` @type ^`int`;
  #L278da0.  v3:= v4.`e.r.a.b.h` @type ^`int`;
  #L278da4.  v2:= v2 - v3 @kind int;
  #L278da6.  if v0 < v1 then goto L278db2;
  #L278daa.  if v0 < v2 then goto L278db2;
  #L278dae.  v0:= -3I;
  #L278db0.  return v0;
  #L278db2.  if v1 < v0 then goto L278dbe;
  #L278db6.  if v1 < v2 then goto L278dbe;
  #L278dba.  v0:= -2I;
  #L278dbc.  return v0;
  #L278dbe.  v0:= -1I;
  #L278dc0.  return v0;
}
procedure `int` `g`(`e.r.a.b` v3 @kind this) @signature `Le/r/a/b;.g:()I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L278dd4.  v0:= v3.`e.r.a.b.e` @type ^`int`;
  #L278dd8.  v1:= v3.`e.r.a.b.d` @type ^`int`;
  #L278ddc.  v0:= v0 - v1 @kind int;
  #L278dde.  v0:= v0 + 1;
  #L278de2.  v1:= v3.`e.r.a.b.g` @type ^`int`;
  #L278de6.  v2:= v3.`e.r.a.b.f` @type ^`int`;
  #L278dea.  v1:= v1 - v2 @kind int;
  #L278dec.  v1:= v1 + 1;
  #L278df0.  v0:= v0 * v1 @kind int;
  #L278df4.  v1:= v3.`e.r.a.b.i` @type ^`int`;
  #L278df8.  v2:= v3.`e.r.a.b.h` @type ^`int`;
  #L278dfc.  v1:= v1 - v2 @kind int;
  #L278dfe.  v1:= v1 + 1;
  #L278e02.  v0:= v0 * v1 @kind int;
  #L278e06.  return v0;
}
procedure `e.r.a.b` `h`(`e.r.a.b` v5 @kind this) @signature `Le/r/a/b;.h:()Le/r/a/b;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L278bb8.  call temp:= `a`(v5) @signature `Le/r/a/b;.a:()Z` @kind virtual;
  #L278bbe.  v0:= temp;
  #L278bc0.  if v0 == 0 then goto L278bee;
  #L278bc4.  call temp:= `b`(v5) @signature `Le/r/a/b;.b:()I` @kind virtual;
  #L278bca.  v0:= temp;
  #L278bcc.  v1:= new `e.r.a.b`;
  #L278bd0.  v2:= v5.`e.r.a.b.j` @type ^`e.r.a.c` @kind object;
  #L278bd4.  v3:= v0 + 1;
  #L278bd8.  v4:= v5.`e.r.a.b.b` @type ^`int`;
  #L278bdc.  call `<init>`(v1, v2, v3, v4) @signature `Le/r/a/b;.<init>:(Le/r/a/c;II)V` @kind direct;
  #L278be2.  v5.`e.r.a.b.b` @type ^`int` := v0;
  #L278be6.  call `c`(v5) @signature `Le/r/a/b;.c:()V` @kind virtual;
  #L278bec.  return v1 @kind object;
  #L278bee.  v0:= new `java.lang.IllegalStateException`;
  #L278bf2.  v1:= "Can not split a box with only 1 color" @kind object;
  #L278bf6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L278bfc.  throw v0;
}
