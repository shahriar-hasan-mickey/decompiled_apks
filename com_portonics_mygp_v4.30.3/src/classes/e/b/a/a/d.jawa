record `e.b.a.a.d` @kind class @AccessFlag  extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `e.b.a.a.d.b` @AccessFlag PRIVATE_FINAL;
  `e.b.a.a.e` `e.b.a.a.d.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.b.a.a.d` v1 @kind this, `e.b.a.a.e` v2 @kind object) @signature `Le/b/a/a/d;.<init>:(Le/b/a/a/e;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1e6690.  v1.`e.b.a.a.d.c` @type ^`e.b.a.a.e` := v2 @kind object;
  #L1e6694.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e669a.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L1e669e.  v0:= 0I;
  #L1e66a0.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L1e66a6.  v1.`e.b.a.a.d.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L1e66aa.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`e.b.a.a.d` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Le/b/a/a/d;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e6640.  v0:= new `java.lang.Thread`;
  #L1e6644.  call `<init>`(v0, v4) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L1e664a.  v4:= 1I;
  #L1e664c.  v4:= new `java.lang.Object`[v4];
  #L1e6650.  v1:= v3.`e.b.a.a.d.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L1e6654.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L1e665a.  v1:= temp;
  #L1e665c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1e6662.  v1:= temp @kind object;
  #L1e6664.  v2:= 0I;
  #L1e6666.  v4[v2]:= v1 @kind object;
  #L1e666a.  v1:= "arch_disk_io_%d" @kind object;
  #L1e666e.  call temp:= `format`(v1, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1e6674.  v4:= temp @kind object;
  #L1e6676.  call `setName`(v0, v4) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L1e667c.  return v0 @kind object;
}
