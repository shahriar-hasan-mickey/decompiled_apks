record `e.b.a.a.c` @kind class @AccessFlag PUBLIC extends `e.b.a.a.f` @kind class {
  `e.b.a.a.f` `e.b.a.a.c.d` @AccessFlag PRIVATE;
  `e.b.a.a.f` `e.b.a.a.c.e` @AccessFlag PRIVATE;
}
global `e.b.a.a.c` `@@e.b.a.a.c.a` @AccessFlag PRIVATE_STATIC_VOLATILE;
global `java.util.concurrent.Executor` `@@e.b.a.a.c.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.Executor` `@@e.b.a.a.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/b/a/a/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e65ac.  v0:= new `e.b.a.a.a`;
  #L1e65b0.  call `<init>`(v0) @signature `Le/b/a/a/a;.<init>:()V` @kind direct;
  #L1e65b6.  `@@e.b.a.a.c.b` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1e65ba.  v0:= new `e.b.a.a.b`;
  #L1e65be.  call `<init>`(v0) @signature `Le/b/a/a/b;.<init>:()V` @kind direct;
  #L1e65c4.  `@@e.b.a.a.c.c` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1e65c8.  return @kind void;
}
procedure `void` `<init>`(`e.b.a.a.c` v1 @kind this) @signature `Le/b/a/a/c;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L1e65dc.  call `<init>`(v1) @signature `Le/b/a/a/f;.<init>:()V` @kind direct;
  #L1e65e2.  v0:= new `e.b.a.a.e`;
  #L1e65e6.  call `<init>`(v0) @signature `Le/b/a/a/e;.<init>:()V` @kind direct;
  #L1e65ec.  v1.`e.b.a.a.c.e` @type ^`e.b.a.a.f` := v0 @kind object;
  #L1e65f0.  v1.`e.b.a.a.c.d` @type ^`e.b.a.a.f` := v0 @kind object;
  #L1e65f4.  return @kind void;
}
procedure `java.util.concurrent.Executor` `e`() @signature `Le/b/a/a/c;.e:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e6594.  v0:= `@@e.b.a.a.c.c` @type ^`java.util.concurrent.Executor` @kind object;
  #L1e6598.  return v0 @kind object;
}
procedure `e.b.a.a.c` `f`() @signature `Le/b/a/a/c;.f:()Le/b/a/a/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e6518.  v0:= `@@e.b.a.a.c.a` @type ^`e.b.a.a.c` @kind object;
  #L1e651c.  if v0 == 0 then goto L1e6526;
  #L1e6520.  v0:= `@@e.b.a.a.c.a` @type ^`e.b.a.a.c` @kind object;
  #L1e6524.  return v0 @kind object;
  #L1e6526.  v0:= constclass @type ^`e.b.a.a.c` @kind object;
  #L1e652a.  @monitorenter v0
  #L1e652c.  v1:= `@@e.b.a.a.c.a` @type ^`e.b.a.a.c` @kind object;
  #L1e6530.  if v1 != 0 then goto L1e6542;
  #L1e6534.  v1:= new `e.b.a.a.c`;
  #L1e6538.  call `<init>`(v1) @signature `Le/b/a/a/c;.<init>:()V` @kind direct;
  #L1e653e.  `@@e.b.a.a.c.a` @type ^`e.b.a.a.c` := v1 @kind object;
  #L1e6542.  @monitorexit v0
  #L1e6544.  v0:= `@@e.b.a.a.c.a` @type ^`e.b.a.a.c` @kind object;
  #L1e6548.  return v0 @kind object;
  #L1e654a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e654c.  @monitorexit v0
  #L1e654e.  throw v1;
  catch `java.lang.Throwable` @[L1e652c..L1e6544] goto L1e654a;
  catch `java.lang.Throwable` @[L1e654c..L1e654e] goto L1e654a;
}
procedure `void` `a`(`e.b.a.a.c` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Le/b/a/a/c;.a:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e6608.  v0:= v1.`e.b.a.a.c.d` @type ^`e.b.a.a.f` @kind object;
  #L1e660c.  call `a`(v0, v2) @signature `Le/b/a/a/f;.a:(Ljava/lang/Runnable;)V` @kind virtual;
  #L1e6612.  return @kind void;
}
procedure `boolean` `c`(`e.b.a.a.c` v1 @kind this) @signature `Le/b/a/a/c;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e6574.  v0:= v1.`e.b.a.a.c.d` @type ^`e.b.a.a.f` @kind object;
  #L1e6578.  call temp:= `c`(v0) @signature `Le/b/a/a/f;.c:()Z` @kind virtual;
  #L1e657e.  v0:= temp;
  #L1e6580.  return v0;
}
procedure `void` `d`(`e.b.a.a.c` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Le/b/a/a/c;.d:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e6624.  v0:= v1.`e.b.a.a.c.d` @type ^`e.b.a.a.f` @kind object;
  #L1e6628.  call `d`(v0, v2) @signature `Le/b/a/a/f;.d:(Ljava/lang/Runnable;)V` @kind virtual;
  #L1e662e.  return @kind void;
}
