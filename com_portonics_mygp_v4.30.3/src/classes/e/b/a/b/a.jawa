record `e.b.a.b.a` @kind class @AccessFlag PUBLIC extends `e.b.a.b.e` @kind class {
  `java.util.HashMap` `e.b.a.b.a.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.b.a.b.a` v1 @kind this) @signature `Le/b/a/b/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e6978.  call `<init>`(v1) @signature `Le/b/a/b/e;.<init>:()V` @kind direct;
  #L1e697e.  v0:= new `java.util.HashMap`;
  #L1e6982.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L1e6988.  v1.`e.b.a.b.a.f` @type ^`java.util.HashMap` := v0 @kind object;
  #L1e698c.  return @kind void;
}
procedure `boolean` `contains`(`e.b.a.b.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/b/a/b/a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e68c4.  v0:= v1.`e.b.a.b.a.f` @type ^`java.util.HashMap` @kind object;
  #L1e68c8.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e68ce.  v2:= temp;
  #L1e68d0.  return v2;
}
procedure `e.b.a.b.d` `e`(`e.b.a.b.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/b/a/b/a;.e:(Ljava/lang/Object;)Le/b/a/b/d;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1e68a0.  v0:= v1.`e.b.a.b.a.f` @type ^`java.util.HashMap` @kind object;
  #L1e68a4.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e68aa.  v2:= temp @kind object;
  #L1e68ac.  v2:= (`e.b.a.b.d`) v2 @kind object;
  #L1e68b0.  return v2 @kind object;
}
procedure `java.lang.Object` `l`(`e.b.a.b.a` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Le/b/a/b/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e68e4.  call temp:= `e`(v1, v2) @signature `Le/b/a/b/a;.e:(Ljava/lang/Object;)Le/b/a/b/d;` @kind virtual;
  #L1e68ea.  v0:= temp @kind object;
  #L1e68ec.  if v0 == 0 then goto L1e68f6;
  #L1e68f0.  v2:= v0.`e.b.a.b.d.c` @type ^`java.lang.Object` @kind object;
  #L1e68f4.  return v2 @kind object;
  #L1e68f6.  v0:= v1.`e.b.a.b.a.f` @type ^`java.util.HashMap` @kind object;
  #L1e68fa.  call temp:= `i`(v1, v2, v3) @signature `Le/b/a/b/e;.i:(Ljava/lang/Object;Ljava/lang/Object;)Le/b/a/b/d;` @kind virtual;
  #L1e6900.  v3:= temp @kind object;
  #L1e6902.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e6908.  v2:= 0I;
  #L1e690a.  return v2 @kind object;
}
procedure `java.lang.Object` `m`(`e.b.a.b.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/b/a/b/a;.m:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e691c.  call temp:= `m`(v2, v3) @signature `Le/b/a/b/e;.m:(Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L1e6922.  v0:= temp @kind object;
  #L1e6924.  v1:= v2.`e.b.a.b.a.f` @type ^`java.util.HashMap` @kind object;
  #L1e6928.  call temp:= `remove`(v1, v3) @signature `Ljava/util/HashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e692e.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `n`(`e.b.a.b.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/b/a/b/a;.n:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e6940.  call temp:= `contains`(v1, v2) @signature `Le/b/a/b/a;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e6946.  v0:= temp;
  #L1e6948.  if v0 == 0 then goto L1e6962;
  #L1e694c.  v0:= v1.`e.b.a.b.a.f` @type ^`java.util.HashMap` @kind object;
  #L1e6950.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e6956.  v2:= temp @kind object;
  #L1e6958.  v2:= (`e.b.a.b.d`) v2 @kind object;
  #L1e695c.  v2:= v2.`e.b.a.b.d.e` @type ^`e.b.a.b.d` @kind object;
  #L1e6960.  return v2 @kind object;
  #L1e6962.  v2:= 0I;
  #L1e6964.  return v2 @kind object;
}
