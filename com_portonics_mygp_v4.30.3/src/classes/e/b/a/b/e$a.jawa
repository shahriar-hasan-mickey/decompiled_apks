record `e.b.a.b.e$a` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface, `e.b.a.b.g` @kind interface {
  `e.b.a.b.d` `e.b.a.b.e$a.b` @AccessFlag PRIVATE;
  `boolean` `e.b.a.b.e$a.c` @AccessFlag PRIVATE;
  `e.b.a.b.e` `e.b.a.b.e$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.b.a.b.e$a` v0 @kind this, `e.b.a.b.e` v1 @kind object) @signature `Le/b/a/b/e$a;.<init>:(Le/b/a/b/e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1e6c10.  v0.`e.b.a.b.e$a.d` @type ^`e.b.a.b.e` := v1 @kind object;
  #L1e6c14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e6c1a.  v1:= 1I;
  #L1e6c1c.  v0.`e.b.a.b.e$a.c` @type ^`boolean` := v1 @kind boolean;
  #L1e6c20.  return @kind void;
}
procedure `void` `a`(`e.b.a.b.e$a` v1 @kind this, `e.b.a.b.d` v2 @kind object) @signature `Le/b/a/b/e$a;.a:(Le/b/a/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e6c34.  v0:= v1.`e.b.a.b.e$a.b` @type ^`e.b.a.b.d` @kind object;
  #L1e6c38.  if v2 != v0 then goto L1e6c52;
  #L1e6c3c.  v2:= v0.`e.b.a.b.d.e` @type ^`e.b.a.b.d` @kind object;
  #L1e6c40.  v1.`e.b.a.b.e$a.b` @type ^`e.b.a.b.d` := v2 @kind object;
  #L1e6c44.  if v2 != 0 then goto L1e6c4c;
  #L1e6c48.  v2:= 1I;
  #L1e6c4a.  goto L1e6c4e;
  #L1e6c4c.  v2:= 0I;
  #L1e6c4e.  v1.`e.b.a.b.e$a.c` @type ^`boolean` := v2 @kind boolean;
  #L1e6c52.  return @kind void;
}
procedure `java.util.Map$Entry` `b`(`e.b.a.b.e$a` v1 @kind this) @signature `Le/b/a/b/e$a;.b:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e6bc8.  v0:= v1.`e.b.a.b.e$a.c` @type ^`boolean` @kind boolean;
  #L1e6bcc.  if v0 == 0 then goto L1e6be4;
  #L1e6bd0.  v0:= 0I;
  #L1e6bd2.  v1.`e.b.a.b.e$a.c` @type ^`boolean` := v0 @kind boolean;
  #L1e6bd6.  v0:= v1.`e.b.a.b.e$a.d` @type ^`e.b.a.b.e` @kind object;
  #L1e6bda.  v0:= v0.`e.b.a.b.e.b` @type ^`e.b.a.b.d` @kind object;
  #L1e6bde.  v1.`e.b.a.b.e$a.b` @type ^`e.b.a.b.d` := v0 @kind object;
  #L1e6be2.  goto L1e6bf8;
  #L1e6be4.  v0:= v1.`e.b.a.b.e$a.b` @type ^`e.b.a.b.d` @kind object;
  #L1e6be8.  if v0 == 0 then goto L1e6bf2;
  #L1e6bec.  v0:= v0.`e.b.a.b.d.d` @type ^`e.b.a.b.d` @kind object;
  #L1e6bf0.  goto L1e6bf4;
  #L1e6bf2.  v0:= 0I;
  #L1e6bf4.  v1.`e.b.a.b.e$a.b` @type ^`e.b.a.b.d` := v0 @kind object;
  #L1e6bf8.  v0:= v1.`e.b.a.b.e$a.b` @type ^`e.b.a.b.d` @kind object;
  #L1e6bfc.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`e.b.a.b.e$a` v3 @kind this) @signature `Le/b/a/b/e$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e6b68.  v0:= v3.`e.b.a.b.e$a.c` @type ^`boolean` @kind boolean;
  #L1e6b6c.  v1:= 1I;
  #L1e6b6e.  v2:= 0I;
  #L1e6b70.  if v0 == 0 then goto L1e6b86;
  #L1e6b74.  v0:= v3.`e.b.a.b.e$a.d` @type ^`e.b.a.b.e` @kind object;
  #L1e6b78.  v0:= v0.`e.b.a.b.e.b` @type ^`e.b.a.b.d` @kind object;
  #L1e6b7c.  if v0 == 0 then goto L1e6b82;
  #L1e6b80.  goto L1e6b84;
  #L1e6b82.  v1:= 0I;
  #L1e6b84.  return v1;
  #L1e6b86.  v0:= v3.`e.b.a.b.e$a.b` @type ^`e.b.a.b.d` @kind object;
  #L1e6b8a.  if v0 == 0 then goto L1e6b98;
  #L1e6b8e.  v0:= v0.`e.b.a.b.d.d` @type ^`e.b.a.b.d` @kind object;
  #L1e6b92.  if v0 == 0 then goto L1e6b98;
  #L1e6b96.  goto L1e6b9a;
  #L1e6b98.  v1:= 0I;
  #L1e6b9a.  return v1;
}
procedure `java.lang.Object` `next`(`e.b.a.b.e$a` v1 @kind this) @signature `Le/b/a/b/e$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1e6bac.  call temp:= `b`(v1) @signature `Le/b/a/b/e$a;.b:()Ljava/util/Map$Entry;` @kind virtual;
  #L1e6bb2.  v0:= temp @kind object;
  #L1e6bb4.  return v0 @kind object;
}
