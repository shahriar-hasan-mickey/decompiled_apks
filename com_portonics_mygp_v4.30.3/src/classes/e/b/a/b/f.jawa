record `e.b.a.b.f` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface, `e.b.a.b.g` @kind interface {
  `e.b.a.b.d` `e.b.a.b.f.b` @AccessFlag ;
  `e.b.a.b.d` `e.b.a.b.f.c` @AccessFlag ;
}
procedure `void` `<init>`(`e.b.a.b.f` v0 @kind this, `e.b.a.b.d` v1 @kind object, `e.b.a.b.d` v2 @kind object) @signature `Le/b/a/b/f;.<init>:(Le/b/a/b/d;Le/b/a/b/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1e6cf4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e6cfa.  v0.`e.b.a.b.f.b` @type ^`e.b.a.b.d` := v2 @kind object;
  #L1e6cfe.  v0.`e.b.a.b.f.c` @type ^`e.b.a.b.d` := v1 @kind object;
  #L1e6d02.  return @kind void;
}
procedure `e.b.a.b.d` `e`(`e.b.a.b.f` v2 @kind this) @signature `Le/b/a/b/f;.e:()Le/b/a/b/d;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1e6c64.  v0:= v2.`e.b.a.b.f.c` @type ^`e.b.a.b.d` @kind object;
  #L1e6c68.  v1:= v2.`e.b.a.b.f.b` @type ^`e.b.a.b.d` @kind object;
  #L1e6c6c.  if v0 == v1 then goto L1e6c80;
  #L1e6c70.  if v1 != 0 then goto L1e6c76;
  #L1e6c74.  goto L1e6c80;
  #L1e6c76.  call temp:= `c`(v2, v0) @signature `Le/b/a/b/f;.c:(Le/b/a/b/d;)Le/b/a/b/d;` @kind virtual;
  #L1e6c7c.  v0:= temp @kind object;
  #L1e6c7e.  return v0 @kind object;
  #L1e6c80.  v0:= 0I;
  #L1e6c82.  return v0 @kind object;
}
procedure `void` `a`(`e.b.a.b.f` v1 @kind this, `e.b.a.b.d` v2 @kind object) @signature `Le/b/a/b/f;.a:(Le/b/a/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e6d14.  v0:= v1.`e.b.a.b.f.b` @type ^`e.b.a.b.d` @kind object;
  #L1e6d18.  if v0 != v2 then goto L1e6d2e;
  #L1e6d1c.  v0:= v1.`e.b.a.b.f.c` @type ^`e.b.a.b.d` @kind object;
  #L1e6d20.  if v2 != v0 then goto L1e6d2e;
  #L1e6d24.  v0:= 0I;
  #L1e6d26.  v1.`e.b.a.b.f.c` @type ^`e.b.a.b.d` := v0 @kind object;
  #L1e6d2a.  v1.`e.b.a.b.f.b` @type ^`e.b.a.b.d` := v0 @kind object;
  #L1e6d2e.  v0:= v1.`e.b.a.b.f.b` @type ^`e.b.a.b.d` @kind object;
  #L1e6d32.  if v0 != v2 then goto L1e6d42;
  #L1e6d36.  call temp:= `b`(v1, v0) @signature `Le/b/a/b/f;.b:(Le/b/a/b/d;)Le/b/a/b/d;` @kind virtual;
  #L1e6d3c.  v0:= temp @kind object;
  #L1e6d3e.  v1.`e.b.a.b.f.b` @type ^`e.b.a.b.d` := v0 @kind object;
  #L1e6d42.  v0:= v1.`e.b.a.b.f.c` @type ^`e.b.a.b.d` @kind object;
  #L1e6d46.  if v0 != v2 then goto L1e6d56;
  #L1e6d4a.  call temp:= `e`(v1) @signature `Le/b/a/b/f;.e:()Le/b/a/b/d;` @kind direct;
  #L1e6d50.  v2:= temp @kind object;
  #L1e6d52.  v1.`e.b.a.b.f.c` @type ^`e.b.a.b.d` := v2 @kind object;
  #L1e6d56.  return @kind void;
}
procedure `e.b.a.b.d` `b`(`e.b.a.b.d` v0 @kind object) @signature `Le/b/a/b/f;.b:(Le/b/a/b/d;)Le/b/a/b/d;` @AccessFlag ABSTRACT {

  # return;
}
procedure `e.b.a.b.d` `c`(`e.b.a.b.d` v0 @kind object) @signature `Le/b/a/b/f;.c:(Le/b/a/b/d;)Le/b/a/b/d;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Map$Entry` `d`(`e.b.a.b.f` v2 @kind this) @signature `Le/b/a/b/f;.d:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e6cd0.  v0:= v2.`e.b.a.b.f.c` @type ^`e.b.a.b.d` @kind object;
  #L1e6cd4.  call temp:= `e`(v2) @signature `Le/b/a/b/f;.e:()Le/b/a/b/d;` @kind direct;
  #L1e6cda.  v1:= temp @kind object;
  #L1e6cdc.  v2.`e.b.a.b.f.c` @type ^`e.b.a.b.d` := v1 @kind object;
  #L1e6ce0.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`e.b.a.b.f` v1 @kind this) @signature `Le/b/a/b/f;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e6c94.  v0:= v1.`e.b.a.b.f.c` @type ^`e.b.a.b.d` @kind object;
  #L1e6c98.  if v0 == 0 then goto L1e6ca0;
  #L1e6c9c.  v0:= 1I;
  #L1e6c9e.  goto L1e6ca2;
  #L1e6ca0.  v0:= 0I;
  #L1e6ca2.  return v0;
}
procedure `java.lang.Object` `next`(`e.b.a.b.f` v1 @kind this) @signature `Le/b/a/b/f;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1e6cb4.  call temp:= `d`(v1) @signature `Le/b/a/b/f;.d:()Ljava/util/Map$Entry;` @kind virtual;
  #L1e6cba.  v0:= temp @kind object;
  #L1e6cbc.  return v0 @kind object;
}
