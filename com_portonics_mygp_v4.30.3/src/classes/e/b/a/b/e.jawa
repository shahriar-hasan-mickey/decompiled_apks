record `e.b.a.b.e` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface {
  `e.b.a.b.d` `e.b.a.b.e.b` @AccessFlag ;
  `e.b.a.b.d` `e.b.a.b.e.c` @AccessFlag PRIVATE;
  `java.util.WeakHashMap` `e.b.a.b.e.d` @AccessFlag PRIVATE;
  `int` `e.b.a.b.e.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.b.a.b.e` v1 @kind this) @signature `Le/b/a/b/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e710c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e7112.  v0:= new `java.util.WeakHashMap`;
  #L1e7116.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L1e711c.  v1.`e.b.a.b.e.d` @type ^`java.util.WeakHashMap` := v0 @kind object;
  #L1e7120.  v0:= 0I;
  #L1e7122.  v1.`e.b.a.b.e.e` @type ^`int` := v0;
  #L1e7126.  return @kind void;
}
procedure `java.util.Map$Entry` `c`(`e.b.a.b.e` v1 @kind this) @signature `Le/b/a/b/e;.c:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e70dc.  v0:= v1.`e.b.a.b.e.b` @type ^`e.b.a.b.d` @kind object;
  #L1e70e0.  return v0 @kind object;
}
procedure `java.util.Iterator` `descendingIterator`(`e.b.a.b.e` v3 @kind this) @signature `Le/b/a/b/e;.descendingIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e7074.  v0:= new `e.b.a.b.c`;
  #L1e7078.  v1:= v3.`e.b.a.b.e.c` @type ^`e.b.a.b.d` @kind object;
  #L1e707c.  v2:= v3.`e.b.a.b.e.b` @type ^`e.b.a.b.d` @kind object;
  #L1e7080.  call `<init>`(v0, v1, v2) @signature `Le/b/a/b/c;.<init>:(Le/b/a/b/d;Le/b/a/b/d;)V` @kind direct;
  #L1e7086.  v1:= v3.`e.b.a.b.e.d` @type ^`java.util.WeakHashMap` @kind object;
  #L1e708a.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L1e708e.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e7094.  return v0 @kind object;
}
procedure `e.b.a.b.d` `e`(`e.b.a.b.e` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/b/a/b/e;.e:(Ljava/lang/Object;)Le/b/a/b/d;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1e6d68.  v0:= v2.`e.b.a.b.e.b` @type ^`e.b.a.b.d` @kind object;
  #L1e6d6c.  if v0 == 0 then goto L1e6d88;
  #L1e6d70.  v1:= v0.`e.b.a.b.d.b` @type ^`java.lang.Object` @kind object;
  #L1e6d74.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e6d7a.  v1:= temp;
  #L1e6d7c.  if v1 == 0 then goto L1e6d82;
  #L1e6d80.  goto L1e6d88;
  #L1e6d82.  v0:= v0.`e.b.a.b.d.d` @type ^`e.b.a.b.d` @kind object;
  #L1e6d86.  goto L1e6d6c;
  #L1e6d88.  return v0 @kind object;
}
procedure `boolean` `equals`(`e.b.a.b.e` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/b/a/b/e;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e6e10.  v0:= 1I;
  #L1e6e12.  if v6 != v5 then goto L1e6e18;
  #L1e6e16.  return v0;
  #L1e6e18.  v1:= instanceof @variable v6 @type ^`e.b.a.b.e` @kind boolean;
  #L1e6e1c.  v2:= 0I;
  #L1e6e1e.  if v1 != 0 then goto L1e6e24;
  #L1e6e22.  return v2;
  #L1e6e24.  v6:= (`e.b.a.b.e`) v6 @kind object;
  #L1e6e28.  call temp:= `size`(v5) @signature `Le/b/a/b/e;.size:()I` @kind virtual;
  #L1e6e2e.  v1:= temp;
  #L1e6e30.  call temp:= `size`(v6) @signature `Le/b/a/b/e;.size:()I` @kind virtual;
  #L1e6e36.  v3:= temp;
  #L1e6e38.  if v1 == v3 then goto L1e6e3e;
  #L1e6e3c.  return v2;
  #L1e6e3e.  call temp:= `iterator`(v5) @signature `Le/b/a/b/e;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1e6e44.  v1:= temp @kind object;
  #L1e6e46.  call temp:= `iterator`(v6) @signature `Le/b/a/b/e;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1e6e4c.  v6:= temp @kind object;
  #L1e6e4e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1e6e54.  v3:= temp;
  #L1e6e56.  if v3 == 0 then goto L1e6e94;
  #L1e6e5a.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1e6e60.  v3:= temp;
  #L1e6e62.  if v3 == 0 then goto L1e6e94;
  #L1e6e66.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1e6e6c.  v3:= temp @kind object;
  #L1e6e6e.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L1e6e72.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1e6e78.  v4:= temp @kind object;
  #L1e6e7a.  if v3 != 0 then goto L1e6e82;
  #L1e6e7e.  if v4 != 0 then goto L1e6e92;
  #L1e6e82.  if v3 == 0 then goto L1e6e4e;
  #L1e6e86.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Map$Entry;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L1e6e8c.  v3:= temp;
  #L1e6e8e.  if v3 != 0 then goto L1e6e4e;
  #L1e6e92.  return v2;
  #L1e6e94.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1e6e9a.  v1:= temp;
  #L1e6e9c.  if v1 != 0 then goto L1e6eae;
  #L1e6ea0.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1e6ea6.  v6:= temp;
  #L1e6ea8.  if v6 != 0 then goto L1e6eae;
  #L1e6eac.  goto L1e6eb0;
  #L1e6eae.  v0:= 0I;
  #L1e6eb0.  return v0;
}
procedure `e.b.a.b.e$a` `f`(`e.b.a.b.e` v3 @kind this) @signature `Le/b/a/b/e;.f:()Le/b/a/b/e$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e6de4.  v0:= new `e.b.a.b.e$a`;
  #L1e6de8.  call `<init>`(v0, v3) @signature `Le/b/a/b/e$a;.<init>:(Le/b/a/b/e;)V` @kind direct;
  #L1e6dee.  v1:= v3.`e.b.a.b.e.d` @type ^`java.util.WeakHashMap` @kind object;
  #L1e6df2.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L1e6df6.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e6dfc.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `g`(`e.b.a.b.e` v1 @kind this) @signature `Le/b/a/b/e;.g:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e70f4.  v0:= v1.`e.b.a.b.e.c` @type ^`e.b.a.b.d` @kind object;
  #L1e70f8.  return v0 @kind object;
}
procedure `int` `hashCode`(`e.b.a.b.e` v3 @kind this) @signature `Le/b/a/b/e;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e6ec4.  call temp:= `iterator`(v3) @signature `Le/b/a/b/e;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1e6eca.  v0:= temp @kind object;
  #L1e6ecc.  v1:= 0I;
  #L1e6ece.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1e6ed4.  v2:= temp;
  #L1e6ed6.  if v2 == 0 then goto L1e6ef2;
  #L1e6eda.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1e6ee0.  v2:= temp @kind object;
  #L1e6ee2.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L1e6ee6.  call temp:= `hashCode`(v2) @signature `Ljava/util/Map$Entry;.hashCode:()I` @kind interface;
  #L1e6eec.  v2:= temp;
  #L1e6eee.  v1:= v1 + v2 @kind int;
  #L1e6ef0.  goto L1e6ece;
  #L1e6ef2.  return v1;
}
procedure `e.b.a.b.d` `i`(`e.b.a.b.e` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Le/b/a/b/e;.i:(Ljava/lang/Object;Ljava/lang/Object;)Le/b/a/b/d;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1e6d9c.  v0:= new `e.b.a.b.d`;
  #L1e6da0.  call `<init>`(v0, v2, v3) @signature `Le/b/a/b/d;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L1e6da6.  v2:= v1.`e.b.a.b.e.e` @type ^`int`;
  #L1e6daa.  v2:= v2 + 1;
  #L1e6dae.  v1.`e.b.a.b.e.e` @type ^`int` := v2;
  #L1e6db2.  v2:= v1.`e.b.a.b.e.c` @type ^`e.b.a.b.d` @kind object;
  #L1e6db6.  if v2 != 0 then goto L1e6dc4;
  #L1e6dba.  v1.`e.b.a.b.e.b` @type ^`e.b.a.b.d` := v0 @kind object;
  #L1e6dbe.  v1.`e.b.a.b.e.c` @type ^`e.b.a.b.d` := v0 @kind object;
  #L1e6dc2.  return v0 @kind object;
  #L1e6dc4.  v2.`e.b.a.b.d.d` @type ^`e.b.a.b.d` := v0 @kind object;
  #L1e6dc8.  v0.`e.b.a.b.d.e` @type ^`e.b.a.b.d` := v2 @kind object;
  #L1e6dcc.  v1.`e.b.a.b.e.c` @type ^`e.b.a.b.d` := v0 @kind object;
  #L1e6dd0.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`e.b.a.b.e` v3 @kind this) @signature `Le/b/a/b/e;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e70a8.  v0:= new `e.b.a.b.b`;
  #L1e70ac.  v1:= v3.`e.b.a.b.e.b` @type ^`e.b.a.b.d` @kind object;
  #L1e70b0.  v2:= v3.`e.b.a.b.e.c` @type ^`e.b.a.b.d` @kind object;
  #L1e70b4.  call `<init>`(v0, v1, v2) @signature `Le/b/a/b/b;.<init>:(Le/b/a/b/d;Le/b/a/b/d;)V` @kind direct;
  #L1e70ba.  v1:= v3.`e.b.a.b.e.d` @type ^`java.util.WeakHashMap` @kind object;
  #L1e70be.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L1e70c2.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e70c8.  return v0 @kind object;
}
procedure `java.lang.Object` `l`(`e.b.a.b.e` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Le/b/a/b/e;.l:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e6f1c.  call temp:= `e`(v1, v2) @signature `Le/b/a/b/e;.e:(Ljava/lang/Object;)Le/b/a/b/d;` @kind virtual;
  #L1e6f22.  v0:= temp @kind object;
  #L1e6f24.  if v0 == 0 then goto L1e6f2e;
  #L1e6f28.  v2:= v0.`e.b.a.b.d.c` @type ^`java.lang.Object` @kind object;
  #L1e6f2c.  return v2 @kind object;
  #L1e6f2e.  call temp:= `i`(v1, v2, v3) @signature `Le/b/a/b/e;.i:(Ljava/lang/Object;Ljava/lang/Object;)Le/b/a/b/d;` @kind virtual;
  #L1e6f34.  v2:= 0I;
  #L1e6f36.  return v2 @kind object;
}
procedure `java.lang.Object` `m`(`e.b.a.b.e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/b/a/b/e;.m:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e6f48.  call temp:= `e`(v3, v4) @signature `Le/b/a/b/e;.e:(Ljava/lang/Object;)Le/b/a/b/d;` @kind virtual;
  #L1e6f4e.  v4:= temp @kind object;
  #L1e6f50.  v0:= 0I;
  #L1e6f52.  if v4 != 0 then goto L1e6f58;
  #L1e6f56.  return v0 @kind object;
  #L1e6f58.  v1:= v3.`e.b.a.b.e.e` @type ^`int`;
  #L1e6f5c.  v1:= v1 + -1;
  #L1e6f60.  v3.`e.b.a.b.e.e` @type ^`int` := v1;
  #L1e6f64.  v1:= v3.`e.b.a.b.e.d` @type ^`java.util.WeakHashMap` @kind object;
  #L1e6f68.  call temp:= `isEmpty`(v1) @signature `Ljava/util/WeakHashMap;.isEmpty:()Z` @kind virtual;
  #L1e6f6e.  v1:= temp;
  #L1e6f70.  if v1 != 0 then goto L1e6fa8;
  #L1e6f74.  v1:= v3.`e.b.a.b.e.d` @type ^`java.util.WeakHashMap` @kind object;
  #L1e6f78.  call temp:= `keySet`(v1) @signature `Ljava/util/WeakHashMap;.keySet:()Ljava/util/Set;` @kind virtual;
  #L1e6f7e.  v1:= temp @kind object;
  #L1e6f80.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1e6f86.  v1:= temp @kind object;
  #L1e6f88.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1e6f8e.  v2:= temp;
  #L1e6f90.  if v2 == 0 then goto L1e6fa8;
  #L1e6f94.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1e6f9a.  v2:= temp @kind object;
  #L1e6f9c.  v2:= (`e.b.a.b.g`) v2 @kind object;
  #L1e6fa0.  call `a`(v2, v4) @signature `Le/b/a/b/g;.a:(Le/b/a/b/d;)V` @kind interface;
  #L1e6fa6.  goto L1e6f88;
  #L1e6fa8.  v1:= v4.`e.b.a.b.d.e` @type ^`e.b.a.b.d` @kind object;
  #L1e6fac.  if v1 == 0 then goto L1e6fba;
  #L1e6fb0.  v2:= v4.`e.b.a.b.d.d` @type ^`e.b.a.b.d` @kind object;
  #L1e6fb4.  v1.`e.b.a.b.d.d` @type ^`e.b.a.b.d` := v2 @kind object;
  #L1e6fb8.  goto L1e6fc2;
  #L1e6fba.  v2:= v4.`e.b.a.b.d.d` @type ^`e.b.a.b.d` @kind object;
  #L1e6fbe.  v3.`e.b.a.b.e.b` @type ^`e.b.a.b.d` := v2 @kind object;
  #L1e6fc2.  v2:= v4.`e.b.a.b.d.d` @type ^`e.b.a.b.d` @kind object;
  #L1e6fc6.  if v2 == 0 then goto L1e6fd0;
  #L1e6fca.  v2.`e.b.a.b.d.e` @type ^`e.b.a.b.d` := v1 @kind object;
  #L1e6fce.  goto L1e6fd4;
  #L1e6fd0.  v3.`e.b.a.b.e.c` @type ^`e.b.a.b.d` := v1 @kind object;
  #L1e6fd4.  v4.`e.b.a.b.d.d` @type ^`e.b.a.b.d` := v0 @kind object;
  #L1e6fd8.  v4.`e.b.a.b.d.e` @type ^`e.b.a.b.d` := v0 @kind object;
  #L1e6fdc.  v4:= v4.`e.b.a.b.d.c` @type ^`java.lang.Object` @kind object;
  #L1e6fe0.  return v4 @kind object;
}
procedure `int` `size`(`e.b.a.b.e` v1 @kind this) @signature `Le/b/a/b/e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e6f04.  v0:= v1.`e.b.a.b.e.e` @type ^`int`;
  #L1e6f08.  return v0;
}
procedure `java.lang.String` `toString`(`e.b.a.b.e` v3 @kind this) @signature `Le/b/a/b/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e6ff4.  v0:= new `java.lang.StringBuilder`;
  #L1e6ff8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e6ffe.  v1:= "[" @kind object;
  #L1e7002.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e7008.  call temp:= `iterator`(v3) @signature `Le/b/a/b/e;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1e700e.  v1:= temp @kind object;
  #L1e7010.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1e7016.  v2:= temp;
  #L1e7018.  if v2 == 0 then goto L1e704e;
  #L1e701c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1e7022.  v2:= temp @kind object;
  #L1e7024.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L1e7028.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e702e.  v2:= temp @kind object;
  #L1e7030.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e7036.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1e703c.  v2:= temp;
  #L1e703e.  if v2 == 0 then goto L1e7010;
  #L1e7042.  v2:= ", " @kind object;
  #L1e7046.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e704c.  goto L1e7010;
  #L1e704e.  v1:= "]" @kind object;
  #L1e7052.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e7058.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e705e.  v0:= temp @kind object;
  #L1e7060.  return v0 @kind object;
}
