record `e.k.a.b` @kind class @AccessFlag  extends `java.io.InputStream` @kind class, `java.io.DataInput` @kind interface {
  `java.io.DataInputStream` `e.k.a.b.d` @AccessFlag PRIVATE;
  `java.nio.ByteOrder` `e.k.a.b.e` @AccessFlag PRIVATE;
  `int` `e.k.a.b.f` @AccessFlag FINAL;
  `int` `e.k.a.b.g` @AccessFlag ;
}
global `java.nio.ByteOrder` `@@e.k.a.b.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.ByteOrder` `@@e.k.a.b.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/k/a/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L238644.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L238648.  `@@e.k.a.b.b` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L23864c.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L238650.  `@@e.k.a.b.c` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L238654.  return @kind void;
}
procedure `void` `<init>`(`e.k.a.b` v1 @kind this, `java.io.InputStream` v2 @kind object) @signature `Le/k/a/b;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L23868c.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L238690.  call `<init>`(v1, v2, v0) @signature `Le/k/a/b;.<init>:(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V` @kind direct;
  #L238696.  return @kind void;
}
procedure `void` `<init>`(`e.k.a.b` v1 @kind this, `java.io.InputStream` v2 @kind object, `java.nio.ByteOrder` v3 @kind object) @signature `Le/k/a/b;.<init>:(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2386a8.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L2386ae.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L2386b2.  v1.`e.k.a.b.e` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L2386b6.  v0:= new `java.io.DataInputStream`;
  #L2386ba.  call `<init>`(v0, v2) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2386c0.  v1.`e.k.a.b.d` @type ^`java.io.DataInputStream` := v0 @kind object;
  #L2386c4.  call temp:= `available`(v0) @signature `Ljava/io/DataInputStream;.available:()I` @kind virtual;
  #L2386ca.  v2:= temp;
  #L2386cc.  v1.`e.k.a.b.f` @type ^`int` := v2;
  #L2386d0.  v0:= 0I;
  #L2386d2.  v1.`e.k.a.b.g` @type ^`int` := v0;
  #L2386d6.  v0:= v1.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2386da.  call `mark`(v0, v2) @signature `Ljava/io/DataInputStream;.mark:(I)V` @kind virtual;
  #L2386e0.  v1.`e.k.a.b.e` @type ^`java.nio.ByteOrder` := v3 @kind object;
  #L2386e4.  return @kind void;
}
procedure `void` `<init>`(`e.k.a.b` v1 @kind this, `byte`[] v2 @kind object) @signature `Le/k/a/b;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L238668.  v0:= new `java.io.ByteArrayInputStream`;
  #L23866c.  call `<init>`(v0, v2) @signature `Ljava/io/ByteArrayInputStream;.<init>:([B)V` @kind direct;
  #L238672.  call `<init>`(v1, v0) @signature `Le/k/a/b;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L238678.  return @kind void;
}
procedure `int` `a`(`e.k.a.b` v1 @kind this) @signature `Le/k/a/b;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L238100.  v0:= v1.`e.k.a.b.f` @type ^`int`;
  #L238104.  return v0;
}
procedure `int` `available`(`e.k.a.b` v1 @kind this) @signature `Le/k/a/b;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2380e0.  v0:= v1.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2380e4.  call temp:= `available`(v0) @signature `Ljava/io/DataInputStream;.available:()I` @kind virtual;
  #L2380ea.  v0:= temp;
  #L2380ec.  return v0;
}
procedure `int` `c`(`e.k.a.b` v1 @kind this) @signature `Le/k/a/b;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L238118.  v0:= v1.`e.k.a.b.g` @type ^`int`;
  #L23811c.  return v0;
}
procedure `long` `d`(`e.k.a.b` v4 @kind this) @signature `Le/k/a/b;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L238564.  call temp:= `readInt`(v4) @signature `Le/k/a/b;.readInt:()I` @kind virtual;
  #L23856a.  v0:= temp;
  #L23856c.  v0:= (`long`) v0 @kind i2l;
  #L23856e.  v2:= 4294967295L;
  #L238578.  v0:= v0 ^& v2 @kind long;
  #L23857a.  return v0 @kind wide;
}
procedure `void` `k`(`e.k.a.b` v4 @kind this, `long` v5 ) @signature `Le/k/a/b;.k:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2387d4.  v0:= v4.`e.k.a.b.g` @type ^`int`;
  #L2387d8.  v1:= (`long`) v0 @kind i2l;
  #L2387da.  v3:= lcmp(v1, v5);
  #L2387de.  if v3 <= 0 then goto L238802;
  #L2387e2.  v0:= 0I;
  #L2387e4.  v4.`e.k.a.b.g` @type ^`int` := v0;
  #L2387e8.  v0:= v4.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2387ec.  call `reset`(v0) @signature `Ljava/io/DataInputStream;.reset:()V` @kind virtual;
  #L2387f2.  v0:= v4.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2387f6.  v1:= v4.`e.k.a.b.f` @type ^`int`;
  #L2387fa.  call `mark`(v0, v1) @signature `Ljava/io/DataInputStream;.mark:(I)V` @kind virtual;
  #L238800.  goto L238806;
  #L238802.  v0:= (`long`) v0 @kind i2l;
  #L238804.  v5:= v5 - v0 @kind long;
  #L238806.  v6:= (`int`) v5 @kind l2i;
  #L238808.  call temp:= `skipBytes`(v4, v6) @signature `Le/k/a/b;.skipBytes:(I)I` @kind virtual;
  #L23880e.  v5:= temp;
  #L238810.  if v5 != v6 then goto L238816;
  #L238814.  return @kind void;
  #L238816.  v5:= new `java.io.IOException`;
  #L23881a.  v6:= "Couldn't seek up to the byteCount" @kind object;
  #L23881e.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L238824.  throw v5;
}
procedure `void` `m`(`e.k.a.b` v0 @kind this, `java.nio.ByteOrder` v1 @kind object) @signature `Le/k/a/b;.m:(Ljava/nio/ByteOrder;)V` @AccessFlag PUBLIC {
    temp;

  #L238838.  v0.`e.k.a.b.e` @type ^`java.nio.ByteOrder` := v1 @kind object;
  #L23883c.  return @kind void;
}
procedure `void` `mark`(`e.k.a.b` v1 @kind this, `int` v2 ) @signature `Le/k/a/b;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2386f8.  @monitorenter v1
  #L2386fa.  v0:= v1.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2386fe.  call `mark`(v0, v2) @signature `Ljava/io/DataInputStream;.mark:(I)V` @kind virtual;
  #L238704.  @monitorexit v1
  #L238706.  return @kind void;
  #L238708.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23870a.  @monitorexit v1
  #L23870c.  throw v2;
  catch `java.lang.Throwable` @[L2386fa..L238704] goto L238708;
}
procedure `int` `read`(`e.k.a.b` v1 @kind this) @signature `Le/k/a/b;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L238130.  v0:= v1.`e.k.a.b.g` @type ^`int`;
  #L238134.  v0:= v0 + 1;
  #L238138.  v1.`e.k.a.b.g` @type ^`int` := v0;
  #L23813c.  v0:= v1.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L238140.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L238146.  v0:= temp;
  #L238148.  return v0;
}
procedure `int` `read`(`e.k.a.b` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/k/a/b;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23815c.  v0:= v1.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L238160.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L238166.  v2:= temp;
  #L238168.  v3:= v1.`e.k.a.b.g` @type ^`int`;
  #L23816c.  v3:= v3 + v2 @kind int;
  #L23816e.  v1.`e.k.a.b.g` @type ^`int` := v3;
  #L238172.  return v2;
}
procedure `boolean` `readBoolean`(`e.k.a.b` v1 @kind this) @signature `Le/k/a/b;.readBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L237ff0.  v0:= v1.`e.k.a.b.g` @type ^`int`;
  #L237ff4.  v0:= v0 + 1;
  #L237ff8.  v1.`e.k.a.b.g` @type ^`int` := v0;
  #L237ffc.  v0:= v1.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L238000.  call temp:= `readBoolean`(v0) @signature `Ljava/io/DataInputStream;.readBoolean:()Z` @kind virtual;
  #L238006.  v0:= temp;
  #L238008.  return v0;
}
procedure `byte` `readByte`(`e.k.a.b` v2 @kind this) @signature `Le/k/a/b;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23801c.  v0:= v2.`e.k.a.b.g` @type ^`int`;
  #L238020.  v0:= v0 + 1;
  #L238024.  v2.`e.k.a.b.g` @type ^`int` := v0;
  #L238028.  v1:= v2.`e.k.a.b.f` @type ^`int`;
  #L23802c.  if v0 > v1 then goto L238050;
  #L238030.  v0:= v2.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L238034.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L23803a.  v0:= temp;
  #L23803c.  if v0 < 0 then goto L238044;
  #L238040.  v0:= (`byte`) v0 @kind i2b;
  #L238042.  return v0;
  #L238044.  v0:= new `java.io.EOFException`;
  #L238048.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L23804e.  throw v0;
  #L238050.  v0:= new `java.io.EOFException`;
  #L238054.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L23805a.  throw v0;
}
procedure `char` `readChar`(`e.k.a.b` v1 @kind this) @signature `Le/k/a/b;.readChar:()C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23806c.  v0:= v1.`e.k.a.b.g` @type ^`int`;
  #L238070.  v0:= v0 + 2;
  #L238074.  v1.`e.k.a.b.g` @type ^`int` := v0;
  #L238078.  v0:= v1.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L23807c.  call temp:= `readChar`(v0) @signature `Ljava/io/DataInputStream;.readChar:()C` @kind virtual;
  #L238082.  v0:= temp;
  #L238084.  return v0;
}
procedure `double` `readDouble`(`e.k.a.b` v2 @kind this) @signature `Le/k/a/b;.readDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L238098.  call temp:= `readLong`(v2) @signature `Le/k/a/b;.readLong:()J` @kind virtual;
  #L23809e.  v0:= temp @kind wide;
  #L2380a0.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L2380a6.  v0:= temp @kind wide;
  #L2380a8.  return v0 @kind wide;
}
procedure `float` `readFloat`(`e.k.a.b` v1 @kind this) @signature `Le/k/a/b;.readFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2380bc.  call temp:= `readInt`(v1) @signature `Le/k/a/b;.readInt:()I` @kind virtual;
  #L2380c2.  v0:= temp;
  #L2380c4.  call temp:= `intBitsToFloat`(v0) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L2380ca.  v0:= temp;
  #L2380cc.  return v0;
}
procedure `void` `readFully`(`e.k.a.b` v3 @kind this, `byte`[] v4 @kind object) @signature `Le/k/a/b;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23872c.  v0:= v3.`e.k.a.b.g` @type ^`int`;
  #L238730.  v1:= length @variable v4;
  #L238732.  v0:= v0 + v1 @kind int;
  #L238734.  v3.`e.k.a.b.g` @type ^`int` := v0;
  #L238738.  v1:= v3.`e.k.a.b.f` @type ^`int`;
  #L23873c.  if v0 > v1 then goto L238768;
  #L238740.  v0:= v3.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L238744.  v1:= 0I;
  #L238746.  v2:= length @variable v4;
  #L238748.  call temp:= `read`(v0, v4, v1, v2) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L23874e.  v0:= temp;
  #L238750.  v4:= length @variable v4;
  #L238752.  if v0 != v4 then goto L238758;
  #L238756.  return @kind void;
  #L238758.  v4:= new `java.io.IOException`;
  #L23875c.  v0:= "Couldn't read up to the length of buffer" @kind object;
  #L238760.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L238766.  throw v4;
  #L238768.  v4:= new `java.io.EOFException`;
  #L23876c.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L238772.  throw v4;
}
procedure `void` `readFully`(`e.k.a.b` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Le/k/a/b;.readFully:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L238784.  v0:= v2.`e.k.a.b.g` @type ^`int`;
  #L238788.  v0:= v0 + v5 @kind int;
  #L23878a.  v2.`e.k.a.b.g` @type ^`int` := v0;
  #L23878e.  v1:= v2.`e.k.a.b.f` @type ^`int`;
  #L238792.  if v0 > v1 then goto L2387b8;
  #L238796.  v0:= v2.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L23879a.  call temp:= `read`(v0, v3, v4, v5) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L2387a0.  v3:= temp;
  #L2387a2.  if v3 != v5 then goto L2387a8;
  #L2387a6.  return @kind void;
  #L2387a8.  v3:= new `java.io.IOException`;
  #L2387ac.  v4:= "Couldn't read up to the length of buffer" @kind object;
  #L2387b0.  call `<init>`(v3, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2387b6.  throw v3;
  #L2387b8.  v3:= new `java.io.EOFException`;
  #L2387bc.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L2387c2.  throw v3;
}
procedure `int` `readInt`(`e.k.a.b` v6 @kind this) @signature `Le/k/a/b;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L238184.  v0:= v6.`e.k.a.b.g` @type ^`int`;
  #L238188.  v0:= v0 + 4;
  #L23818c.  v6.`e.k.a.b.g` @type ^`int` := v0;
  #L238190.  v1:= v6.`e.k.a.b.f` @type ^`int`;
  #L238194.  if v0 > v1 then goto L23824e;
  #L238198.  v0:= v6.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L23819c.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L2381a2.  v0:= temp;
  #L2381a4.  v1:= v6.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2381a8.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L2381ae.  v1:= temp;
  #L2381b0.  v2:= v6.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2381b4.  call temp:= `read`(v2) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L2381ba.  v2:= temp;
  #L2381bc.  v3:= v6.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2381c0.  call temp:= `read`(v3) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L2381c6.  v3:= temp;
  #L2381c8.  v4:= v0 ^| v1 @kind int;
  #L2381cc.  v4:= v4 ^| v2 @kind int;
  #L2381ce.  v4:= v4 ^| v3 @kind int;
  #L2381d0.  if v4 < 0 then goto L238242;
  #L2381d4.  v4:= v6.`e.k.a.b.e` @type ^`java.nio.ByteOrder` @kind object;
  #L2381d8.  v5:= `@@e.k.a.b.b` @type ^`java.nio.ByteOrder` @kind object;
  #L2381dc.  if v4 != v5 then goto L2381f4;
  #L2381e0.  v3:= v3 ^< 24;
  #L2381e4.  v2:= v2 ^< 16;
  #L2381e8.  v3:= v3 + v2 @kind int;
  #L2381ea.  v1:= v1 ^< 8;
  #L2381ee.  v3:= v3 + v1 @kind int;
  #L2381f0.  v3:= v3 + v0 @kind int;
  #L2381f2.  return v3;
  #L2381f4.  v5:= `@@e.k.a.b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L2381f8.  if v4 != v5 then goto L238210;
  #L2381fc.  v0:= v0 ^< 24;
  #L238200.  v1:= v1 ^< 16;
  #L238204.  v0:= v0 + v1 @kind int;
  #L238206.  v1:= v2 ^< 8;
  #L23820a.  v0:= v0 + v1 @kind int;
  #L23820c.  v0:= v0 + v3 @kind int;
  #L23820e.  return v0;
  #L238210.  v0:= new `java.io.IOException`;
  #L238214.  v1:= new `java.lang.StringBuilder`;
  #L238218.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23821e.  v2:= "Invalid byte order: " @kind object;
  #L238222.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L238228.  v2:= v6.`e.k.a.b.e` @type ^`java.nio.ByteOrder` @kind object;
  #L23822c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L238232.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L238238.  v1:= temp @kind object;
  #L23823a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L238240.  throw v0;
  #L238242.  v0:= new `java.io.EOFException`;
  #L238246.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L23824c.  throw v0;
  #L23824e.  v0:= new `java.io.EOFException`;
  #L238252.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L238258.  throw v0;
}
procedure `java.lang.String` `readLine`(`e.k.a.b` v1 @kind this) @signature `Le/k/a/b;.readLine:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L238394.  v0:= 0I;
  #L238396.  return v0 @kind object;
}
procedure `long` `readLong`(`e.k.a.b` v19 @kind this) @signature `Le/k/a/b;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L2383d4.  v0:= v19 @kind object;
  #L2383d8.  v1:= v0.`e.k.a.b.g` @type ^`int`;
  #L2383dc.  v2:= 8I;
  #L2383e0.  v1:= v1 + v2 @kind int;
  #L2383e2.  v0.`e.k.a.b.g` @type ^`int` := v1;
  #L2383e6.  v3:= v0.`e.k.a.b.f` @type ^`int`;
  #L2383ea.  if v1 > v3 then goto L238546;
  #L2383ee.  v1:= v0.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2383f2.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L2383f8.  v1:= temp;
  #L2383fa.  v3:= v0.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2383fe.  call temp:= `read`(v3) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L238404.  v3:= temp;
  #L238406.  v4:= v0.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L23840a.  call temp:= `read`(v4) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L238410.  v4:= temp;
  #L238412.  v5:= v0.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L238416.  call temp:= `read`(v5) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L23841c.  v5:= temp;
  #L23841e.  v6:= v0.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L238422.  call temp:= `read`(v6) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L238428.  v6:= temp;
  #L23842a.  v7:= v0.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L23842e.  call temp:= `read`(v7) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L238434.  v7:= temp;
  #L238436.  v8:= v0.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L23843a.  call temp:= `read`(v8) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L238440.  v8:= temp;
  #L238442.  v9:= v0.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L238446.  call temp:= `read`(v9) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L23844c.  v9:= temp;
  #L23844e.  v10:= v1 ^| v3 @kind int;
  #L238452.  v10:= v10 ^| v4 @kind int;
  #L238454.  v10:= v10 ^| v5 @kind int;
  #L238456.  v10:= v10 ^| v6 @kind int;
  #L238458.  v10:= v10 ^| v7 @kind int;
  #L23845a.  v10:= v10 ^| v8 @kind int;
  #L23845c.  v10:= v10 ^| v9 @kind int;
  #L23845e.  if v10 < 0 then goto L23853a;
  #L238462.  v10:= v0.`e.k.a.b.e` @type ^`java.nio.ByteOrder` @kind object;
  #L238466.  v11:= `@@e.k.a.b.b` @type ^`java.nio.ByteOrder` @kind object;
  #L23846a.  v12:= 16I;
  #L23846e.  v13:= 24I;
  #L238472.  v14:= 32I;
  #L238476.  v15:= 40I;
  #L23847a.  v16:= 48I;
  #L23847e.  v17:= 56I;
  #L238482.  if v10 != v11 then goto L2384c4;
  #L238486.  v9:= (`long`) v9 @kind i2l;
  #L238488.  v9:= v9 ^< v17 @kind long;
  #L23848c.  v18:= v3;
  #L238490.  v2:= (`long`) v8 @kind i2l;
  #L238492.  v2:= v2 ^< v16 @kind long;
  #L238496.  v9:= v9 + v2 @kind long;
  #L238498.  v2:= (`long`) v7 @kind i2l;
  #L23849a.  v2:= v2 ^< v15 @kind long;
  #L23849c.  v9:= v9 + v2 @kind long;
  #L23849e.  v2:= (`long`) v6 @kind i2l;
  #L2384a0.  v2:= v2 ^< v14 @kind long;
  #L2384a2.  v9:= v9 + v2 @kind long;
  #L2384a4.  v2:= (`long`) v5 @kind i2l;
  #L2384a6.  v2:= v2 ^< v13 @kind long;
  #L2384a8.  v9:= v9 + v2 @kind long;
  #L2384aa.  v2:= (`long`) v4 @kind i2l;
  #L2384ac.  v2:= v2 ^< v12 @kind long;
  #L2384ae.  v9:= v9 + v2 @kind long;
  #L2384b0.  v2:= v18;
  #L2384b4.  v2:= (`long`) v2 @kind i2l;
  #L2384b6.  v4:= 8I;
  #L2384ba.  v2:= v2 ^< v4 @kind long;
  #L2384bc.  v9:= v9 + v2 @kind long;
  #L2384be.  v1:= (`long`) v1 @kind i2l;
  #L2384c0.  v9:= v9 + v1 @kind long;
  #L2384c2.  return v9 @kind wide;
  #L2384c4.  v2:= v3;
  #L2384c6.  v3:= `@@e.k.a.b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L2384ca.  if v10 != v3 then goto L238508;
  #L2384ce.  v11:= (`long`) v1 @kind i2l;
  #L2384d0.  v11:= v11 ^< v17 @kind long;
  #L2384d4.  v1:= (`long`) v2 @kind i2l;
  #L2384d6.  v1:= v1 ^< v16 @kind long;
  #L2384da.  v11:= v11 + v1 @kind long;
  #L2384dc.  v1:= (`long`) v4 @kind i2l;
  #L2384de.  v1:= v1 ^< v15 @kind long;
  #L2384e0.  v11:= v11 + v1 @kind long;
  #L2384e2.  v1:= (`long`) v5 @kind i2l;
  #L2384e4.  v1:= v1 ^< v14 @kind long;
  #L2384e6.  v11:= v11 + v1 @kind long;
  #L2384e8.  v1:= (`long`) v6 @kind i2l;
  #L2384ea.  v1:= v1 ^< v13 @kind long;
  #L2384ec.  v11:= v11 + v1 @kind long;
  #L2384ee.  v1:= (`long`) v7 @kind i2l;
  #L2384f0.  v4:= 16I;
  #L2384f4.  v1:= v1 ^< v4 @kind long;
  #L2384f6.  v11:= v11 + v1 @kind long;
  #L2384f8.  v1:= (`long`) v8 @kind i2l;
  #L2384fa.  v3:= 8I;
  #L2384fe.  v1:= v1 ^< v3 @kind long;
  #L238500.  v11:= v11 + v1 @kind long;
  #L238502.  v1:= (`long`) v9 @kind i2l;
  #L238504.  v11:= v11 + v1 @kind long;
  #L238506.  return v11 @kind wide;
  #L238508.  v1:= new `java.io.IOException`;
  #L23850c.  v2:= new `java.lang.StringBuilder`;
  #L238510.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L238516.  v3:= "Invalid byte order: " @kind object;
  #L23851a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L238520.  v3:= v0.`e.k.a.b.e` @type ^`java.nio.ByteOrder` @kind object;
  #L238524.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23852a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L238530.  v2:= temp @kind object;
  #L238532.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L238538.  throw v1;
  #L23853a.  v1:= new `java.io.EOFException`;
  #L23853e.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L238544.  throw v1;
  #L238546.  v1:= new `java.io.EOFException`;
  #L23854a.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L238550.  throw v1;
}
procedure `short` `readShort`(`e.k.a.b` v4 @kind this) @signature `Le/k/a/b;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23858c.  v0:= v4.`e.k.a.b.g` @type ^`int`;
  #L238590.  v0:= v0 + 2;
  #L238594.  v4.`e.k.a.b.g` @type ^`int` := v0;
  #L238598.  v1:= v4.`e.k.a.b.f` @type ^`int`;
  #L23859c.  if v0 > v1 then goto L238626;
  #L2385a0.  v0:= v4.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2385a4.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L2385aa.  v0:= temp;
  #L2385ac.  v1:= v4.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2385b0.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L2385b6.  v1:= temp;
  #L2385b8.  v2:= v0 ^| v1 @kind int;
  #L2385bc.  if v2 < 0 then goto L23861a;
  #L2385c0.  v2:= v4.`e.k.a.b.e` @type ^`java.nio.ByteOrder` @kind object;
  #L2385c4.  v3:= `@@e.k.a.b.b` @type ^`java.nio.ByteOrder` @kind object;
  #L2385c8.  if v2 != v3 then goto L2385d6;
  #L2385cc.  v1:= v1 ^< 8;
  #L2385d0.  v1:= v1 + v0 @kind int;
  #L2385d2.  v0:= (`short`) v1 @kind i2s;
  #L2385d4.  return v0;
  #L2385d6.  v3:= `@@e.k.a.b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L2385da.  if v2 != v3 then goto L2385e8;
  #L2385de.  v0:= v0 ^< 8;
  #L2385e2.  v0:= v0 + v1 @kind int;
  #L2385e4.  v0:= (`short`) v0 @kind i2s;
  #L2385e6.  return v0;
  #L2385e8.  v0:= new `java.io.IOException`;
  #L2385ec.  v1:= new `java.lang.StringBuilder`;
  #L2385f0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2385f6.  v2:= "Invalid byte order: " @kind object;
  #L2385fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L238600.  v2:= v4.`e.k.a.b.e` @type ^`java.nio.ByteOrder` @kind object;
  #L238604.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23860a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L238610.  v1:= temp @kind object;
  #L238612.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L238618.  throw v0;
  #L23861a.  v0:= new `java.io.EOFException`;
  #L23861e.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L238624.  throw v0;
  #L238626.  v0:= new `java.io.EOFException`;
  #L23862a.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L238630.  throw v0;
}
procedure `java.lang.String` `readUTF`(`e.k.a.b` v1 @kind this) @signature `Le/k/a/b;.readUTF:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2383a8.  v0:= v1.`e.k.a.b.g` @type ^`int`;
  #L2383ac.  v0:= v0 + 2;
  #L2383b0.  v1.`e.k.a.b.g` @type ^`int` := v0;
  #L2383b4.  v0:= v1.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2383b8.  call temp:= `readUTF`(v0) @signature `Ljava/io/DataInputStream;.readUTF:()Ljava/lang/String;` @kind virtual;
  #L2383be.  v0:= temp @kind object;
  #L2383c0.  return v0 @kind object;
}
procedure `int` `readUnsignedByte`(`e.k.a.b` v1 @kind this) @signature `Le/k/a/b;.readUnsignedByte:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23826c.  v0:= v1.`e.k.a.b.g` @type ^`int`;
  #L238270.  v0:= v0 + 1;
  #L238274.  v1.`e.k.a.b.g` @type ^`int` := v0;
  #L238278.  v0:= v1.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L23827c.  call temp:= `readUnsignedByte`(v0) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L238282.  v0:= temp;
  #L238284.  return v0;
}
procedure `int` `readUnsignedShort`(`e.k.a.b` v4 @kind this) @signature `Le/k/a/b;.readUnsignedShort:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L238298.  v0:= v4.`e.k.a.b.g` @type ^`int`;
  #L23829c.  v0:= v0 + 2;
  #L2382a0.  v4.`e.k.a.b.g` @type ^`int` := v0;
  #L2382a4.  v1:= v4.`e.k.a.b.f` @type ^`int`;
  #L2382a8.  if v0 > v1 then goto L23832e;
  #L2382ac.  v0:= v4.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2382b0.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L2382b6.  v0:= temp;
  #L2382b8.  v1:= v4.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L2382bc.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L2382c2.  v1:= temp;
  #L2382c4.  v2:= v0 ^| v1 @kind int;
  #L2382c8.  if v2 < 0 then goto L238322;
  #L2382cc.  v2:= v4.`e.k.a.b.e` @type ^`java.nio.ByteOrder` @kind object;
  #L2382d0.  v3:= `@@e.k.a.b.b` @type ^`java.nio.ByteOrder` @kind object;
  #L2382d4.  if v2 != v3 then goto L2382e0;
  #L2382d8.  v1:= v1 ^< 8;
  #L2382dc.  v1:= v1 + v0 @kind int;
  #L2382de.  return v1;
  #L2382e0.  v3:= `@@e.k.a.b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L2382e4.  if v2 != v3 then goto L2382f0;
  #L2382e8.  v0:= v0 ^< 8;
  #L2382ec.  v0:= v0 + v1 @kind int;
  #L2382ee.  return v0;
  #L2382f0.  v0:= new `java.io.IOException`;
  #L2382f4.  v1:= new `java.lang.StringBuilder`;
  #L2382f8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2382fe.  v2:= "Invalid byte order: " @kind object;
  #L238302.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L238308.  v2:= v4.`e.k.a.b.e` @type ^`java.nio.ByteOrder` @kind object;
  #L23830c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L238312.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L238318.  v1:= temp @kind object;
  #L23831a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L238320.  throw v0;
  #L238322.  v0:= new `java.io.EOFException`;
  #L238326.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L23832c.  throw v0;
  #L23832e.  v0:= new `java.io.EOFException`;
  #L238332.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L238338.  throw v0;
}
procedure `int` `skipBytes`(`e.k.a.b` v3 @kind this, `int` v4 ) @signature `Le/k/a/b;.skipBytes:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23834c.  v0:= v3.`e.k.a.b.f` @type ^`int`;
  #L238350.  v1:= v3.`e.k.a.b.g` @type ^`int`;
  #L238354.  v0:= v0 - v1 @kind int;
  #L238356.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L23835c.  v4:= temp;
  #L23835e.  v0:= 0I;
  #L238360.  if v0 >= v4 then goto L238378;
  #L238364.  v1:= v3.`e.k.a.b.d` @type ^`java.io.DataInputStream` @kind object;
  #L238368.  v2:= v4 - v0 @kind int;
  #L23836c.  call temp:= `skipBytes`(v1, v2) @signature `Ljava/io/DataInputStream;.skipBytes:(I)I` @kind virtual;
  #L238372.  v1:= temp;
  #L238374.  v0:= v0 + v1 @kind int;
  #L238376.  goto L238360;
  #L238378.  v4:= v3.`e.k.a.b.g` @type ^`int`;
  #L23837c.  v4:= v4 + v0 @kind int;
  #L23837e.  v3.`e.k.a.b.g` @type ^`int` := v4;
  #L238382.  return v0;
}
