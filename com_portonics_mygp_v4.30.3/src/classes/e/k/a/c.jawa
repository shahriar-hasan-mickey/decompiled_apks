record `e.k.a.c` @kind class @AccessFlag  extends `java.io.FilterOutputStream` @kind class {
  `java.io.OutputStream` `e.k.a.c.b` @AccessFlag FINAL;
  `java.nio.ByteOrder` `e.k.a.c.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.k.a.c` v0 @kind this, `java.io.OutputStream` v1 @kind object, `java.nio.ByteOrder` v2 @kind object) @signature `Le/k/a/c;.<init>:(Ljava/io/OutputStream;Ljava/nio/ByteOrder;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L238850.  call `<init>`(v0, v1) @signature `Ljava/io/FilterOutputStream;.<init>:(Ljava/io/OutputStream;)V` @kind direct;
  #L238856.  v0.`e.k.a.c.b` @type ^`java.io.OutputStream` := v1 @kind object;
  #L23885a.  v0.`e.k.a.c.c` @type ^`java.nio.ByteOrder` := v2 @kind object;
  #L23885e.  return @kind void;
}
procedure `void` `a`(`e.k.a.c` v0 @kind this, `java.nio.ByteOrder` v1 @kind object) @signature `Le/k/a/c;.a:(Ljava/nio/ByteOrder;)V` @AccessFlag PUBLIC {
    temp;

  #L238870.  v0.`e.k.a.c.c` @type ^`java.nio.ByteOrder` := v1 @kind object;
  #L238874.  return @kind void;
}
procedure `void` `c`(`e.k.a.c` v1 @kind this, `int` v2 ) @signature `Le/k/a/c;.c:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2388c0.  v0:= v1.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L2388c4.  call `write`(v0, v2) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L2388ca.  return @kind void;
}
procedure `void` `d`(`e.k.a.c` v2 @kind this, `int` v3 ) @signature `Le/k/a/c;.d:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2388dc.  v0:= v2.`e.k.a.c.c` @type ^`java.nio.ByteOrder` @kind object;
  #L2388e0.  v1:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L2388e4.  if v0 != v1 then goto L238932;
  #L2388e8.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L2388ec.  v1:= v3 ^>> 0;
  #L2388f0.  v1:= v1 ^& 255;
  #L2388f4.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L2388fa.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L2388fe.  v1:= v3 ^>> 8;
  #L238902.  v1:= v1 ^& 255;
  #L238906.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L23890c.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L238910.  v1:= v3 ^>> 16;
  #L238914.  v1:= v1 ^& 255;
  #L238918.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L23891e.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L238922.  v3:= v3 ^>> 24;
  #L238926.  v3:= v3 ^& 255;
  #L23892a.  call `write`(v0, v3) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L238930.  goto L238982;
  #L238932.  v1:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L238936.  if v0 != v1 then goto L238982;
  #L23893a.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L23893e.  v1:= v3 ^>> 24;
  #L238942.  v1:= v1 ^& 255;
  #L238946.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L23894c.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L238950.  v1:= v3 ^>> 16;
  #L238954.  v1:= v1 ^& 255;
  #L238958.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L23895e.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L238962.  v1:= v3 ^>> 8;
  #L238966.  v1:= v1 ^& 255;
  #L23896a.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L238970.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L238974.  v3:= v3 ^>> 0;
  #L238978.  v3:= v3 ^& 255;
  #L23897c.  call `write`(v0, v3) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L238982.  return @kind void;
}
procedure `void` `k`(`e.k.a.c` v2 @kind this, `short` v3 ) @signature `Le/k/a/c;.k:(S)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L238994.  v0:= v2.`e.k.a.c.c` @type ^`java.nio.ByteOrder` @kind object;
  #L238998.  v1:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L23899c.  if v0 != v1 then goto L2389c6;
  #L2389a0.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L2389a4.  v1:= v3 ^>> 0;
  #L2389a8.  v1:= v1 ^& 255;
  #L2389ac.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L2389b2.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L2389b6.  v3:= v3 ^>> 8;
  #L2389ba.  v3:= v3 ^& 255;
  #L2389be.  call `write`(v0, v3) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L2389c4.  goto L2389f2;
  #L2389c6.  v1:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L2389ca.  if v0 != v1 then goto L2389f2;
  #L2389ce.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L2389d2.  v1:= v3 ^>> 8;
  #L2389d6.  v1:= v1 ^& 255;
  #L2389da.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L2389e0.  v0:= v2.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L2389e4.  v3:= v3 ^>> 0;
  #L2389e8.  v3:= v3 ^& 255;
  #L2389ec.  call `write`(v0, v3) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L2389f2.  return @kind void;
}
procedure `void` `m`(`e.k.a.c` v0 @kind this, `long` v1 ) @signature `Le/k/a/c;.m:(J)V` @AccessFlag PUBLIC {
    temp;

  #L238a04.  v2:= (`int`) v1 @kind l2i;
  #L238a06.  call `d`(v0, v2) @signature `Le/k/a/c;.d:(I)V` @kind virtual;
  #L238a0c.  return @kind void;
}
procedure `void` `o`(`e.k.a.c` v0 @kind this, `int` v1 ) @signature `Le/k/a/c;.o:(I)V` @AccessFlag PUBLIC {
    temp;

  #L238a20.  v1:= (`short`) v1 @kind i2s;
  #L238a22.  call `k`(v0, v1) @signature `Le/k/a/c;.k:(S)V` @kind virtual;
  #L238a28.  return @kind void;
}
procedure `void` `write`(`e.k.a.c` v1 @kind this, `byte`[] v2 @kind object) @signature `Le/k/a/c;.write:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L238888.  v0:= v1.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L23888c.  call `write`(v0, v2) @signature `Ljava/io/OutputStream;.write:([B)V` @kind virtual;
  #L238892.  return @kind void;
}
procedure `void` `write`(`e.k.a.c` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/k/a/c;.write:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2388a4.  v0:= v1.`e.k.a.c.b` @type ^`java.io.OutputStream` @kind object;
  #L2388a8.  call `write`(v0, v2, v3, v4) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L2388ae.  return @kind void;
}
