record `e.t.a.c$a` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int` `e.t.a.c$a.a` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`e.t.a.c$a` v0 @kind this, `int` v1 ) @signature `Le/t/a/c$a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a2cac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a2cb2.  v0.`e.t.a.c$a.a` @type ^`int` := v1;
  #L2a2cb6.  return @kind void;
}
procedure `void` `a`(`e.t.a.c$a` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Le/t/a/c$a;.a:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2a2cc8.  v0:= ":memory:" @kind object;
  #L2a2ccc.  call temp:= `equalsIgnoreCase`(v3, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2a2cd2.  v0:= temp;
  #L2a2cd4.  if v0 != 0 then goto L2a2d62;
  #L2a2cd8.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2a2cde.  v0:= temp @kind object;
  #L2a2ce0.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2a2ce6.  v0:= temp;
  #L2a2ce8.  if v0 != 0 then goto L2a2cee;
  #L2a2cec.  goto L2a2d62;
  #L2a2cee.  v0:= new `java.lang.StringBuilder`;
  #L2a2cf2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a2cf8.  v1:= "deleting the database file: " @kind object;
  #L2a2cfc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a2d02.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a2d08.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a2d0e.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2a2d12.  v1:= 16I;
  #L2a2d16.  if v0 < v1 then goto L2a2d2c;
  #L2a2d1a.  v0:= new `java.io.File`;
  #L2a2d1e.  call `<init>`(v0, v3) @signature `Ljava/io/File;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a2d24.  call temp:= `deleteDatabase`(v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.deleteDatabase:(Ljava/io/File;)Z` @kind static;
  #L2a2d2a.  goto L2a2d62;
  #L2a2d2c.  v0:= new `java.io.File`;
  #L2a2d30.  call `<init>`(v0, v3) @signature `Ljava/io/File;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a2d36.  call temp:= `delete`(v0) @signature `Ljava/io/File;.delete:()Z` @kind virtual;
  #L2a2d3c.  v0:= temp;
  #L2a2d3e.  if v0 != 0 then goto L2a2d62;
  #L2a2d42.  v0:= new `java.lang.StringBuilder`;
  #L2a2d46.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a2d4c.  v1:= "Could not delete the database file " @kind object;
  #L2a2d50.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a2d56.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a2d5c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a2d62.  return @kind void;
  catch `java.lang.Exception` @[L2a2d0e..L2a2d62] goto L2a2d62;
}
procedure `void` `b`(`e.t.a.c$a` v0 @kind this, `e.t.a.b` v1 @kind object) @signature `Le/t/a/c$a;.b:(Le/t/a/b;)V` @AccessFlag PUBLIC {
    temp;

  #L2a2d84.  return @kind void;
}
procedure `void` `c`(`e.t.a.c$a` v2 @kind this, `e.t.a.b` v3 @kind object) @signature `Le/t/a/c$a;.c:(Le/t/a/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a2d98.  v0:= new `java.lang.StringBuilder`;
  #L2a2d9c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a2da2.  v1:= "Corruption reported by sqlite on database: " @kind object;
  #L2a2da6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a2dac.  call temp:= `getPath`(v3) @signature `Le/t/a/b;.getPath:()Ljava/lang/String;` @kind interface;
  #L2a2db2.  v1:= temp @kind object;
  #L2a2db4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a2dba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a2dc0.  call temp:= `isOpen`(v3) @signature `Le/t/a/b;.isOpen:()Z` @kind interface;
  #L2a2dc6.  v0:= temp;
  #L2a2dc8.  if v0 != 0 then goto L2a2ddc;
  #L2a2dcc.  call temp:= `getPath`(v3) @signature `Le/t/a/b;.getPath:()Ljava/lang/String;` @kind interface;
  #L2a2dd2.  v3:= temp @kind object;
  #L2a2dd4.  call `a`(v2, v3) @signature `Le/t/a/c$a;.a:(Ljava/lang/String;)V` @kind direct;
  #L2a2dda.  return @kind void;
  #L2a2ddc.  v0:= 0I;
  #L2a2dde.  call temp:= `E`(v3) @signature `Le/t/a/b;.E:()Ljava/util/List;` @kind interface;
  #L2a2de4.  v0:= temp @kind object;
  #L2a2de6.  goto L2a2dec;
  #L2a2de8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a2dea.  goto L2a2df4;
  #L2a2dec.  call `close`(v3) @signature `Ljava/io/Closeable;.close:()V` @kind interface;
  #L2a2df2.  goto L2a2e3a;
  #L2a2df4.  if v0 == 0 then goto L2a2e28;
  #L2a2df8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a2dfe.  v3:= temp @kind object;
  #L2a2e00.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a2e06.  v0:= temp;
  #L2a2e08.  if v0 == 0 then goto L2a2e36;
  #L2a2e0c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a2e12.  v0:= temp @kind object;
  #L2a2e14.  v0:= (`android.util.Pair`) v0 @kind object;
  #L2a2e18.  v0:= v0.`android.util.Pair.second` @type ^`java.lang.Object` @kind object;
  #L2a2e1c.  v0:= (`java.lang.String`) v0 @kind object;
  #L2a2e20.  call `a`(v2, v0) @signature `Le/t/a/c$a;.a:(Ljava/lang/String;)V` @kind direct;
  #L2a2e26.  goto L2a2e00;
  #L2a2e28.  call temp:= `getPath`(v3) @signature `Le/t/a/b;.getPath:()Ljava/lang/String;` @kind interface;
  #L2a2e2e.  v3:= temp @kind object;
  #L2a2e30.  call `a`(v2, v3) @signature `Le/t/a/c$a;.a:(Ljava/lang/String;)V` @kind direct;
  #L2a2e36.  throw v1;
  #L2a2e38.  
  #L2a2e3a.  if v0 == 0 then goto L2a2e6e;
  #L2a2e3e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a2e44.  v3:= temp @kind object;
  #L2a2e46.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a2e4c.  v0:= temp;
  #L2a2e4e.  if v0 == 0 then goto L2a2e7c;
  #L2a2e52.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a2e58.  v0:= temp @kind object;
  #L2a2e5a.  v0:= (`android.util.Pair`) v0 @kind object;
  #L2a2e5e.  v0:= v0.`android.util.Pair.second` @type ^`java.lang.Object` @kind object;
  #L2a2e62.  v0:= (`java.lang.String`) v0 @kind object;
  #L2a2e66.  call `a`(v2, v0) @signature `Le/t/a/c$a;.a:(Ljava/lang/String;)V` @kind direct;
  #L2a2e6c.  goto L2a2e46;
  #L2a2e6e.  call temp:= `getPath`(v3) @signature `Le/t/a/b;.getPath:()Ljava/lang/String;` @kind interface;
  #L2a2e74.  v3:= temp @kind object;
  #L2a2e76.  call `a`(v2, v3) @signature `Le/t/a/c$a;.a:(Ljava/lang/String;)V` @kind direct;
  #L2a2e7c.  return @kind void;
  catch `android.database.sqlite.SQLiteException` @[L2a2dde..L2a2de6] goto L2a2dec;
  catch `java.lang.Throwable` @[L2a2dde..L2a2de6] goto L2a2de8;
  catch `java.io.IOException` @[L2a2dec..L2a2df2] goto L2a2e38;
  catch `java.lang.Throwable` @[L2a2dec..L2a2df2] goto L2a2de8;
}
procedure `void` `d`(`e.t.a.b` v0 @kind object) @signature `Le/t/a/c$a;.d:(Le/t/a/b;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `e`(`e.t.a.c$a` v2 @kind this, `e.t.a.b` v3 @kind object, `int` v4 , `int` v5 ) @signature `Le/t/a/c$a;.e:(Le/t/a/b;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a2eac.  v3:= new `android.database.sqlite.SQLiteException`;
  #L2a2eb0.  v0:= new `java.lang.StringBuilder`;
  #L2a2eb4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a2eba.  v1:= "Can't downgrade database from version " @kind object;
  #L2a2ebe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a2ec4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a2eca.  v4:= " to " @kind object;
  #L2a2ece.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a2ed4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a2eda.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a2ee0.  v4:= temp @kind object;
  #L2a2ee2.  call `<init>`(v3, v4) @signature `Landroid/database/sqlite/SQLiteException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a2ee8.  throw v3;
}
procedure `void` `f`(`e.t.a.c$a` v0 @kind this, `e.t.a.b` v1 @kind object) @signature `Le/t/a/c$a;.f:(Le/t/a/b;)V` @AccessFlag PUBLIC {
    temp;

  #L2a2efc.  return @kind void;
}
procedure `void` `g`(`e.t.a.b` v0 @kind object, `int` v1 , `int` v2 ) @signature `Le/t/a/c$a;.g:(Le/t/a/b;II)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
