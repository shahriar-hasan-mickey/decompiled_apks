record `e.u.a` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `long` `@@e.u.a.a` @AccessFlag PRIVATE_STATIC;
global `java.lang.reflect.Method` `@@e.u.a.b` @AccessFlag PRIVATE_STATIC;
procedure `void` `a`(`java.lang.String` v2 @kind object) @signature `Le/u/a;.a:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2a6794.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2a6798.  v1:= 18I;
  #L2a679c.  if v0 < v1 then goto L2a67a6;
  #L2a67a0.  call `a`(v2) @signature `Le/u/b;.a:(Ljava/lang/String;)V` @kind static;
  #L2a67a6.  return @kind void;
}
procedure `void` `b`() @signature `Le/u/a;.b:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2a67b8.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2a67bc.  v1:= 18I;
  #L2a67c0.  if v0 < v1 then goto L2a67ca;
  #L2a67c4.  call `b`() @signature `Le/u/b;.b:()V` @kind static;
  #L2a67ca.  return @kind void;
}
procedure `void` `c`(`java.lang.String` v1 @kind object, `java.lang.Exception` v2 @kind object) @signature `Le/u/a;.c:(Ljava/lang/String;Ljava/lang/Exception;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2a67dc.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.InvocationTargetException` @kind boolean;
  #L2a67e0.  if v0 == 0 then goto L2a6806;
  #L2a67e4.  call temp:= `getCause`(v2) @signature `Ljava/lang/Exception;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L2a67ea.  v1:= temp @kind object;
  #L2a67ec.  v2:= instanceof @variable v1 @type ^`java.lang.RuntimeException` @kind boolean;
  #L2a67f0.  if v2 == 0 then goto L2a67fa;
  #L2a67f4.  v1:= (`java.lang.RuntimeException`) v1 @kind object;
  #L2a67f8.  throw v1;
  #L2a67fa.  v2:= new `java.lang.RuntimeException`;
  #L2a67fe.  call `<init>`(v2, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L2a6804.  throw v2;
  #L2a6806.  v2:= new `java.lang.StringBuilder`;
  #L2a680a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a6810.  v0:= "Unable to call " @kind object;
  #L2a6814.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a681a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a6820.  v1:= " via reflection" @kind object;
  #L2a6824.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a682a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a6830.  return @kind void;
}
procedure `boolean` `d`() @signature `Le/u/a;.d:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2a66a8.  v0:= `@@e.u.a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L2a66ac.  if v0 != 0 then goto L2a66ba;
  #L2a66b0.  call temp:= `isEnabled`() @signature `Landroid/os/Trace;.isEnabled:()Z` @kind static;
  #L2a66b6.  v0:= temp;
  #L2a66b8.  return v0;
  #L2a66ba.  call temp:= `e`() @signature `Le/u/a;.e:()Z` @kind static;
  #L2a66c0.  v0:= temp;
  #L2a66c2.  return v0;
  catch `java.lang.NoSuchMethodError` @[L2a66a8..L2a66b8] goto L2a66ba;
  catch `java.lang.NoClassDefFoundError` @[L2a66a8..L2a66b8] goto L2a66ba;
}
procedure `boolean` `e`() @signature `Le/u/a;.e:()Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2a66e4.  v0:= "isTagEnabled" @kind object;
  #L2a66e8.  v1:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2a66ec.  v2:= 0I;
  #L2a66ee.  v3:= 18I;
  #L2a66f2.  if v1 < v3 then goto L2a6770;
  #L2a66f6.  v1:= `@@e.u.a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L2a66fa.  v3:= 1I;
  #L2a66fc.  v4:= 0I;
  #L2a66fe.  if v1 != 0 then goto L2a673a;
  #L2a6702.  v1:= constclass @type ^`android.os.Trace` @kind object;
  #L2a6706.  v5:= "TRACE_TAG_APP" @kind object;
  #L2a670a.  call temp:= `getField`(v1, v5) @signature `Ljava/lang/Class;.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L2a6710.  v1:= temp @kind object;
  #L2a6712.  call temp:= `getLong`(v1, v4) @signature `Ljava/lang/reflect/Field;.getLong:(Ljava/lang/Object;)J` @kind virtual;
  #L2a6718.  v5:= temp @kind wide;
  #L2a671a.  `@@e.u.a.a` @type ^`long` := v5 @kind wide;
  #L2a671e.  v1:= constclass @type ^`android.os.Trace` @kind object;
  #L2a6722.  v5:= new `java.lang.Class`[v3];
  #L2a6726.  v6:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L2a672a.  v5[v2]:= v6 @kind object;
  #L2a672e.  call temp:= `getMethod`(v1, v0, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L2a6734.  v1:= temp @kind object;
  #L2a6736.  `@@e.u.a.b` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L2a673a.  v1:= `@@e.u.a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L2a673e.  v3:= new `java.lang.Object`[v3];
  #L2a6742.  v5:= `@@e.u.a.a` @type ^`long` @kind wide;
  #L2a6746.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2a674c.  v5:= temp @kind object;
  #L2a674e.  v3[v2]:= v5 @kind object;
  #L2a6752.  call temp:= `invoke`(v1, v4, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2a6758.  v1:= temp @kind object;
  #L2a675a.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L2a675e.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2a6764.  v0:= temp;
  #L2a6766.  return v0;
  #L2a6768.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L2a676a.  call `c`(v0, v1) @signature `Le/u/a;.c:(Ljava/lang/String;Ljava/lang/Exception;)V` @kind static;
  #L2a6770.  return v2;
  catch `java.lang.Exception` @[L2a66f6..L2a6766] goto L2a6768;
}
