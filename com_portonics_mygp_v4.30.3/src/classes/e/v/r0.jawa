record `e.v.r0` @kind class @AccessFlag  extends `e.v.l0` @kind class {
  `e.v.s0` `e.v.r0.b` @AccessFlag ;
}
procedure `void` `<init>`(`e.v.r0` v0 @kind this, `e.v.s0` v1 @kind object) @signature `Le/v/r0;.<init>:(Le/v/s0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2a88d8.  call `<init>`(v0) @signature `Le/v/l0;.<init>:()V` @kind direct;
  #L2a88de.  v0.`e.v.r0.b` @type ^`e.v.s0` := v1 @kind object;
  #L2a88e2.  return @kind void;
}
procedure `void` `a`(`e.v.r0` v1 @kind this, `e.v.k0` v2 @kind object) @signature `Le/v/r0;.a:(Le/v/k0;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a892c.  v2:= v1.`e.v.r0.b` @type ^`e.v.s0` @kind object;
  #L2a8930.  v0:= v2.`e.v.s0.O` @type ^`boolean` @kind boolean;
  #L2a8934.  if v0 != 0 then goto L2a8948;
  #L2a8938.  call `g0`(v2) @signature `Le/v/k0;.g0:()V` @kind virtual;
  #L2a893e.  v2:= v1.`e.v.r0.b` @type ^`e.v.s0` @kind object;
  #L2a8942.  v0:= 1I;
  #L2a8944.  v2.`e.v.s0.O` @type ^`boolean` := v0 @kind boolean;
  #L2a8948.  return @kind void;
}
procedure `void` `c`(`e.v.r0` v2 @kind this, `e.v.k0` v3 @kind object) @signature `Le/v/r0;.c:(Le/v/k0;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a88f4.  v0:= v2.`e.v.r0.b` @type ^`e.v.s0` @kind object;
  #L2a88f8.  v1:= v0.`e.v.s0.N` @type ^`int`;
  #L2a88fc.  v1:= v1 + -1;
  #L2a8900.  v0.`e.v.s0.N` @type ^`int` := v1;
  #L2a8904.  if v1 != 0 then goto L2a8914;
  #L2a8908.  v1:= 0I;
  #L2a890a.  v0.`e.v.s0.O` @type ^`boolean` := v1 @kind boolean;
  #L2a890e.  call `r`(v0) @signature `Le/v/k0;.r:()V` @kind virtual;
  #L2a8914.  call temp:= `V`(v3, v2) @signature `Le/v/k0;.V:(Le/v/j0;)Le/v/k0;` @kind virtual;
  #L2a891a.  return @kind void;
}
