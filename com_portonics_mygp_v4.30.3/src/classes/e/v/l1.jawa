record `e.v.l1` @kind class @AccessFlag  extends `e.v.k1` @kind class {
}
global `boolean` `@@e.v.l1.h` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Le/v/l1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L2abf98.  return @kind void;
}
procedure `void` `<init>`(`e.v.l1` v0 @kind this) @signature `Le/v/l1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2abfac.  call `<init>`(v0) @signature `Le/v/k1;.<init>:()V` @kind direct;
  #L2abfb2.  return @kind void;
}
procedure `void` `e`(`e.v.l1` v1 @kind this, `android.view.View` v2 @kind object, `int` v3 , `int` v4 , `int` v5 , `int` v6 ) @signature `Le/v/l1;.e:(Landroid/view/View;IIII)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2abfc4.  v0:= `@@e.v.l1.h` @type ^`boolean` @kind boolean;
  #L2abfc8.  if v0 == 0 then goto L2abfda;
  #L2abfcc.  call `setLeftTopRightBottom`(v2, v3, v4, v5, v6) @signature `Landroid/view/View;.setLeftTopRightBottom:(IIII)V` @kind virtual;
  #L2abfd2.  goto L2abfda;
  #L2abfd4.  v2:= 0I;
  #L2abfd6.  `@@e.v.l1.h` @type ^`boolean` := v2 @kind boolean;
  #L2abfda.  return @kind void;
  catch `java.lang.NoSuchMethodError` @[L2abfcc..L2abfd2] goto L2abfd4;
}
