record `e.g.j.p.x` @kind class @AccessFlag FINAL {
  `float` `e.g.j.p.x.b` @AccessFlag PRIVATE_FINAL;
  `float` `e.g.j.p.x.c` @AccessFlag PRIVATE_FINAL;
  `float` `e.g.j.p.x.d` @AccessFlag PRIVATE_FINAL;
  `float` `e.g.j.p.x.e` @AccessFlag PRIVATE_FINAL;
  `float` `e.g.j.p.x.f` @AccessFlag PRIVATE_FINAL;
  `float` `e.g.j.p.x.g` @AccessFlag PRIVATE_FINAL;
  `float`[] `e.g.j.p.x.h` @AccessFlag PRIVATE_FINAL;
  `float` `e.g.j.p.x.i` @AccessFlag PRIVATE_FINAL;
  `float` `e.g.j.p.x.j` @AccessFlag PRIVATE_FINAL;
  `float` `e.g.j.p.x.k` @AccessFlag PRIVATE_FINAL;
}
global `e.g.j.p.x` `@@e.g.j.p.x.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/g/j/p/x;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L217bf8.  v0:= `@@e.g.j.p.b.c` @type ^`float`[] @kind object;
  #L217bfc.  v1:= 50.0F;
  #L217c00.  call temp:= `h`(v1) @signature `Le/g/j/p/b;.h:(F)F` @kind static;
  #L217c06.  v2:= temp;
  #L217c08.  v2:= (`double`) v2 @kind f2d;
  #L217c0a.  v4:= 63.66197723675813D;
  #L217c14.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L217c1a.  v2:= v2 * v4 @kind double;
  #L217c1e.  v4:= 100.0D;
  #L217c22.  v2:= v2 / v4 @kind double;
  #L217c24.  v2:= (`float`) v2 @kind d2f;
  #L217c26.  v3:= 2.0F;
  #L217c2a.  v4:= 0I;
  #L217c2c.  call temp:= `k`(v0, v2, v1, v3, v4) @signature `Le/g/j/p/x;.k:([FFFFZ)Le/g/j/p/x;` @kind static;
  #L217c32.  v0:= temp @kind object;
  #L217c34.  `@@e.g.j.p.x.a` @type ^`e.g.j.p.x` := v0 @kind object;
  #L217c38.  return @kind void;
}
procedure `void` `<init>`(`e.g.j.p.x` v0 @kind this, `float` v1 , `float` v2 , `float` v3 , `float` v4 , `float` v5 , `float` v6 , `float`[] v7 @kind object, `float` v8 , `float` v9 , `float` v10 ) @signature `Le/g/j/p/x;.<init>:(FFFFFF[FFFF)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L217c4c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L217c52.  v0.`e.g.j.p.x.g` @type ^`float` := v1;
  #L217c56.  v0.`e.g.j.p.x.b` @type ^`float` := v2;
  #L217c5a.  v0.`e.g.j.p.x.c` @type ^`float` := v3;
  #L217c5e.  v0.`e.g.j.p.x.d` @type ^`float` := v4;
  #L217c62.  v0.`e.g.j.p.x.e` @type ^`float` := v5;
  #L217c66.  v0.`e.g.j.p.x.f` @type ^`float` := v6;
  #L217c6a.  v0.`e.g.j.p.x.h` @type ^`float`[] := v7 @kind object;
  #L217c6e.  v0.`e.g.j.p.x.i` @type ^`float` := v8;
  #L217c72.  v0.`e.g.j.p.x.j` @type ^`float` := v9;
  #L217c76.  v0.`e.g.j.p.x.k` @type ^`float` := v10;
  #L217c7a.  return @kind void;
}
procedure `e.g.j.p.x` `k`(`float`[] v21 @kind object, `float` v22 , `float` v23 , `float` v24 , `boolean` v25 ) @signature `Le/g/j/p/x;.k:([FFFFZ)Le/g/j/p/x;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;

  #L217794.  v0:= v22;
  #L217798.  v1:= `@@e.g.j.p.b.a` @type ^`float`[][] @kind object;
  #L21779c.  v2:= 0I;
  #L21779e.  v3:= v21[v2];
  #L2177a2.  v4:= v1[v2] @kind object;
  #L2177a6.  v4:= v4[v2];
  #L2177aa.  v3:= v3 * v4 @kind float;
  #L2177ae.  v4:= 1I;
  #L2177b0.  v5:= v21[v4];
  #L2177b4.  v6:= v1[v2] @kind object;
  #L2177b8.  v6:= v6[v4];
  #L2177bc.  v5:= v5 * v6 @kind float;
  #L2177c0.  v3:= v3 + v5 @kind float;
  #L2177c2.  v5:= 2I;
  #L2177c4.  v6:= v21[v5];
  #L2177c8.  v7:= v1[v2] @kind object;
  #L2177cc.  v7:= v7[v5];
  #L2177d0.  v6:= v6 * v7 @kind float;
  #L2177d4.  v3:= v3 + v6 @kind float;
  #L2177d6.  v6:= v21[v2];
  #L2177da.  v7:= v1[v4] @kind object;
  #L2177de.  v7:= v7[v2];
  #L2177e2.  v6:= v6 * v7 @kind float;
  #L2177e6.  v7:= v21[v4];
  #L2177ea.  v8:= v1[v4] @kind object;
  #L2177ee.  v8:= v8[v4];
  #L2177f2.  v7:= v7 * v8 @kind float;
  #L2177f6.  v6:= v6 + v7 @kind float;
  #L2177f8.  v7:= v21[v5];
  #L2177fc.  v8:= v1[v4] @kind object;
  #L217800.  v8:= v8[v5];
  #L217804.  v7:= v7 * v8 @kind float;
  #L217808.  v6:= v6 + v7 @kind float;
  #L21780a.  v7:= v21[v2];
  #L21780e.  v8:= v1[v5] @kind object;
  #L217812.  v8:= v8[v2];
  #L217816.  v7:= v7 * v8 @kind float;
  #L21781a.  v8:= v21[v4];
  #L21781e.  v9:= v1[v5] @kind object;
  #L217822.  v9:= v9[v4];
  #L217826.  v8:= v8 * v9 @kind float;
  #L21782a.  v7:= v7 + v8 @kind float;
  #L21782c.  v8:= v21[v5];
  #L217830.  v1:= v1[v5] @kind object;
  #L217834.  v1:= v1[v5];
  #L217838.  v8:= v8 * v1 @kind float;
  #L21783c.  v7:= v7 + v8 @kind float;
  #L21783e.  v1:= 10.0F;
  #L217842.  v8:= v24 / v1 @kind float;
  #L217846.  v9:= 1061997773I;
  #L21784c.  v8:= v8 + v9 @kind float;
  #L21784e.  v10:= (`double`) v8 @kind f2d;
  #L217850.  v12:= 1058474557I;
  #L217856.  v13:= 0.9D;
  #L217860.  v15:= dcmpl(v10, v13);
  #L217864.  if v15 < 0 then goto L217886;
  #L217868.  v9:= 1060152279I;
  #L21786e.  v10:= 1063675494I;
  #L217874.  v10:= v8 - v10 @kind float;
  #L217878.  v10:= v10 * v1 @kind float;
  #L21787c.  call temp:= `d`(v12, v9, v10) @signature `Le/g/j/p/b;.d:(FFF)F` @kind static;
  #L217882.  v1:= temp;
  #L217884.  goto L21789c;
  #L217886.  v10:= 1057384038I;
  #L21788c.  v9:= v8 - v9 @kind float;
  #L217890.  v9:= v9 * v1 @kind float;
  #L217894.  call temp:= `d`(v10, v12, v9) @signature `Le/g/j/p/b;.d:(FFF)F` @kind static;
  #L21789a.  v1:= temp;
  #L21789c.  v15:= v1;
  #L21789e.  v1:= 1.0F;
  #L2178a2.  if v25 == 0 then goto L2178ac;
  #L2178a6.  v9:= 1.0F;
  #L2178aa.  goto L2178d8;
  #L2178ac.  v9:= 1049508068I;
  #L2178b2.  v10:= -v0 @kind float;
  #L2178b4.  v11:= 42.0F;
  #L2178b8.  v10:= v10 - v11 @kind float;
  #L2178ba.  v11:= 92.0F;
  #L2178be.  v10:= v10 / v11 @kind float;
  #L2178c0.  v10:= (`double`) v10 @kind f2d;
  #L2178c2.  call temp:= `exp`(v10) @signature `Ljava/lang/Math;.exp:(D)D` @kind static;
  #L2178c8.  v10:= temp @kind wide;
  #L2178ca.  v10:= (`float`) v10 @kind d2f;
  #L2178cc.  v10:= v10 * v9 @kind float;
  #L2178d0.  v9:= v1 - v10 @kind float;
  #L2178d4.  v9:= v9 * v8 @kind float;
  #L2178d8.  v10:= (`double`) v9 @kind f2d;
  #L2178da.  v12:= 1.0D;
  #L2178de.  v14:= dcmpl(v10, v12);
  #L2178e2.  if v14 <= 0 then goto L2178ec;
  #L2178e6.  v9:= 1.0F;
  #L2178ea.  goto L2178fa;
  #L2178ec.  v12:= 0L;
  #L2178f0.  v14:= dcmpg(v10, v12);
  #L2178f4.  if v14 >= 0 then goto L2178fa;
  #L2178f8.  v9:= 0I;
  #L2178fa.  v10:= 3I;
  #L2178fc.  v14:= new `float`[v10];
  #L217900.  v11:= 100.0F;
  #L217904.  v12:= v11 / v3 @kind float;
  #L217908.  v12:= v12 * v9 @kind float;
  #L21790c.  v12:= v12 + v1 @kind float;
  #L21790e.  v12:= v12 - v9 @kind float;
  #L217910.  v14[v2]:= v12;
  #L217914.  v12:= v11 / v6 @kind float;
  #L217918.  v12:= v12 * v9 @kind float;
  #L21791c.  v12:= v12 + v1 @kind float;
  #L21791e.  v12:= v12 - v9 @kind float;
  #L217920.  v14[v4]:= v12;
  #L217924.  v11:= v11 / v7 @kind float;
  #L217926.  v11:= v11 * v9 @kind float;
  #L21792a.  v11:= v11 + v1 @kind float;
  #L21792c.  v11:= v11 - v9 @kind float;
  #L21792e.  v14[v5]:= v11;
  #L217932.  v9:= 5.0F;
  #L217936.  v9:= v9 * v0 @kind float;
  #L21793a.  v9:= v9 + v1 @kind float;
  #L21793c.  v9:= v1 / v9 @kind float;
  #L217940.  v11:= v9 * v9 @kind float;
  #L217944.  v11:= v11 * v9 @kind float;
  #L217948.  v11:= v11 * v9 @kind float;
  #L21794c.  v1:= v1 - v11 @kind float;
  #L21794e.  v11:= v11 * v0 @kind float;
  #L217952.  v9:= 1036831949I;
  #L217958.  v9:= v9 * v1 @kind float;
  #L21795c.  v9:= v9 * v1 @kind float;
  #L217960.  v12:= 5.0D;
  #L217964.  v0:= (`double`) v0 @kind f2d;
  #L217966.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L21796c.  v0:= v0 * v12 @kind double;
  #L217970.  call temp:= `cbrt`(v0) @signature `Ljava/lang/Math;.cbrt:(D)D` @kind static;
  #L217976.  v0:= temp @kind wide;
  #L217978.  v0:= (`float`) v0 @kind d2f;
  #L21797a.  v9:= v9 * v0 @kind float;
  #L21797e.  v0:= v11 + v9 @kind float;
  #L217982.  call temp:= `h`(v23) @signature `Le/g/j/p/b;.h:(F)F` @kind static;
  #L217988.  v1:= temp;
  #L21798a.  v9:= v21[v4];
  #L21798e.  v11:= v1 / v9 @kind float;
  #L217992.  v1:= 1069379748I;
  #L217998.  v12:= (`double`) v11 @kind f2d;
  #L21799a.  v16:= v6;
  #L21799e.  call temp:= `sqrt`(v12) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2179a4.  v5:= temp @kind wide;
  #L2179a6.  v5:= (`float`) v5 @kind d2f;
  #L2179a8.  v20:= v5 + v1 @kind float;
  #L2179ac.  v1:= 1060739482I;
  #L2179b2.  v5:= 0.2D;
  #L2179bc.  call temp:= `pow`(v12, v5) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2179c2.  v5:= temp @kind wide;
  #L2179c4.  v5:= (`float`) v5 @kind d2f;
  #L2179c6.  v1:= v1 / v5 @kind float;
  #L2179c8.  v5:= new `float`[v10];
  #L2179cc.  v6:= v14[v2];
  #L2179d0.  v6:= v6 * v0 @kind float;
  #L2179d4.  v6:= v6 * v3 @kind float;
  #L2179d8.  v12:= (`double`) v6 @kind f2d;
  #L2179da.  v17:= 100.0D;
  #L2179de.  call temp:= `isNaN`(v12) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2179e4.  v12:= v12 / v17 @kind double;
  #L2179e8.  v9:= 0.42D;
  #L2179f2.  call temp:= `pow`(v12, v9) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2179f8.  v12:= temp @kind wide;
  #L2179fa.  v3:= (`float`) v12 @kind d2f;
  #L2179fc.  v5[v2]:= v3;
  #L217a00.  v3:= v14[v4];
  #L217a04.  v3:= v3 * v0 @kind float;
  #L217a08.  v3:= v3 * v16 @kind float;
  #L217a0c.  v12:= (`double`) v3 @kind f2d;
  #L217a0e.  call temp:= `isNaN`(v12) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L217a14.  v12:= v12 / v17 @kind double;
  #L217a18.  call temp:= `pow`(v12, v9) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L217a1e.  v12:= temp @kind wide;
  #L217a20.  v3:= (`float`) v12 @kind d2f;
  #L217a22.  v5[v4]:= v3;
  #L217a26.  v3:= 2I;
  #L217a28.  v6:= v14[v3];
  #L217a2c.  v6:= v6 * v0 @kind float;
  #L217a30.  v6:= v6 * v7 @kind float;
  #L217a34.  v6:= (`double`) v6 @kind f2d;
  #L217a36.  call temp:= `isNaN`(v6) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L217a3c.  v6:= v6 / v17 @kind double;
  #L217a40.  call temp:= `pow`(v6, v9) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L217a46.  v6:= temp @kind wide;
  #L217a48.  v6:= (`float`) v6 @kind d2f;
  #L217a4a.  v5[v3]:= v6;
  #L217a4e.  v3:= 3I;
  #L217a50.  v3:= new `float`[v3];
  #L217a54.  v6:= v5[v2];
  #L217a58.  v7:= 400.0F;
  #L217a5c.  v6:= v6 * v7 @kind float;
  #L217a60.  v10:= v5[v2];
  #L217a64.  v12:= 1104742973I;
  #L217a6a.  v10:= v10 + v12 @kind float;
  #L217a6c.  v6:= v6 / v10 @kind float;
  #L217a6e.  v3[v2]:= v6;
  #L217a72.  v6:= v5[v4];
  #L217a76.  v6:= v6 * v7 @kind float;
  #L217a7a.  v10:= v5[v4];
  #L217a7e.  v10:= v10 + v12 @kind float;
  #L217a80.  v6:= v6 / v10 @kind float;
  #L217a82.  v3[v4]:= v6;
  #L217a86.  v6:= 2I;
  #L217a88.  v9:= v5[v6];
  #L217a8c.  v9:= v9 * v7 @kind float;
  #L217a90.  v5:= v5[v6];
  #L217a94.  v5:= v5 + v12 @kind float;
  #L217a96.  v9:= v9 / v5 @kind float;
  #L217a98.  v3[v6]:= v9;
  #L217a9c.  v5:= 2.0F;
  #L217aa0.  v2:= v3[v2];
  #L217aa4.  v2:= v2 * v5 @kind float;
  #L217aa8.  v4:= v3[v4];
  #L217aac.  v2:= v2 + v4 @kind float;
  #L217aae.  v4:= 1028443341I;
  #L217ab4.  v3:= v3[v6];
  #L217ab8.  v3:= v3 * v4 @kind float;
  #L217abc.  v2:= v2 + v3 @kind float;
  #L217abe.  v12:= v2 * v1 @kind float;
  #L217ac2.  v2:= new `e.g.j.p.x`;
  #L217ac6.  v3:= (`double`) v0 @kind f2d;
  #L217ac8.  v5:= 0.25D;
  #L217acc.  call temp:= `pow`(v3, v5) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L217ad2.  v3:= temp @kind wide;
  #L217ad4.  v3:= (`float`) v3 @kind d2f;
  #L217ad6.  v10:= v2 @kind object;
  #L217ad8.  v13:= v1;
  #L217ada.  v4:= v14 @kind object;
  #L217adc.  v14:= v1;
  #L217ade.  v16:= v8;
  #L217ae2.  v17:= v4 @kind object;
  #L217ae6.  v18:= v0;
  #L217aea.  v19:= v3;
  #L217aee.  call `<init>`(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20) @signature `Le/g/j/p/x;.<init>:(FFFFFF[FFFF)V` @kind direct;
  #L217af4.  return v2 @kind object;
}
procedure `float` `a`(`e.g.j.p.x` v1 @kind this) @signature `Le/g/j/p/x;.a:()F` @AccessFlag  {
    temp;
    v0;

  #L217b08.  v0:= v1.`e.g.j.p.x.b` @type ^`float`;
  #L217b0c.  return v0;
}
procedure `float` `b`(`e.g.j.p.x` v1 @kind this) @signature `Le/g/j/p/x;.b:()F` @AccessFlag  {
    temp;
    v0;

  #L217b20.  v0:= v1.`e.g.j.p.x.e` @type ^`float`;
  #L217b24.  return v0;
}
procedure `float` `c`(`e.g.j.p.x` v1 @kind this) @signature `Le/g/j/p/x;.c:()F` @AccessFlag  {
    temp;
    v0;

  #L217b38.  v0:= v1.`e.g.j.p.x.i` @type ^`float`;
  #L217b3c.  return v0;
}
procedure `float` `d`(`e.g.j.p.x` v1 @kind this) @signature `Le/g/j/p/x;.d:()F` @AccessFlag  {
    temp;
    v0;

  #L217b50.  v0:= v1.`e.g.j.p.x.j` @type ^`float`;
  #L217b54.  return v0;
}
procedure `float` `e`(`e.g.j.p.x` v1 @kind this) @signature `Le/g/j/p/x;.e:()F` @AccessFlag  {
    temp;
    v0;

  #L217b68.  v0:= v1.`e.g.j.p.x.g` @type ^`float`;
  #L217b6c.  return v0;
}
procedure `float` `f`(`e.g.j.p.x` v1 @kind this) @signature `Le/g/j/p/x;.f:()F` @AccessFlag  {
    temp;
    v0;

  #L217b80.  v0:= v1.`e.g.j.p.x.c` @type ^`float`;
  #L217b84.  return v0;
}
procedure `float` `g`(`e.g.j.p.x` v1 @kind this) @signature `Le/g/j/p/x;.g:()F` @AccessFlag  {
    temp;
    v0;

  #L217b98.  v0:= v1.`e.g.j.p.x.f` @type ^`float`;
  #L217b9c.  return v0;
}
procedure `float` `h`(`e.g.j.p.x` v1 @kind this) @signature `Le/g/j/p/x;.h:()F` @AccessFlag  {
    temp;
    v0;

  #L217bb0.  v0:= v1.`e.g.j.p.x.d` @type ^`float`;
  #L217bb4.  return v0;
}
procedure `float`[] `i`(`e.g.j.p.x` v1 @kind this) @signature `Le/g/j/p/x;.i:()[F` @AccessFlag  {
    temp;
    v0;

  #L217be0.  v0:= v1.`e.g.j.p.x.h` @type ^`float`[] @kind object;
  #L217be4.  return v0 @kind object;
}
procedure `float` `j`(`e.g.j.p.x` v1 @kind this) @signature `Le/g/j/p/x;.j:()F` @AccessFlag  {
    temp;
    v0;

  #L217bc8.  v0:= v1.`e.g.j.p.x.k` @type ^`float`;
  #L217bcc.  return v0;
}
