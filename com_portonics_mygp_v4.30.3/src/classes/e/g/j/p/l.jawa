record `e.g.j.p.l` @kind class @AccessFlag ABSTRACT {
}
procedure `int`[] `a`(`int`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/g/j/p/l;.a:([III)[I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L216b70.  v0:= v3 + 1;
  #L216b74.  v1:= length @variable v2;
  #L216b76.  if v0 <= v1 then goto L216b90;
  #L216b7a.  call temp:= `c`(v3) @signature `Le/g/j/p/l;.c:(I)I` @kind static;
  #L216b80.  v0:= temp;
  #L216b82.  v0:= new `int`[v0];
  #L216b86.  v1:= 0I;
  #L216b88.  call `arraycopy`(v2, v1, v0, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L216b8e.  v2:= v0 @kind object;
  #L216b90.  v2[v3]:= v4;
  #L216b94.  return v2 @kind object;
}
procedure `java.lang.Object`[] `b`(`java.lang.Object`[] v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/g/j/p/l;.b:([Ljava/lang/Object;ILjava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L216ba8.  v0:= v3 + 1;
  #L216bac.  v1:= length @variable v2;
  #L216bae.  if v0 <= v1 then goto L216be0;
  #L216bb2.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L216bb8.  v0:= temp @kind object;
  #L216bba.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L216bc0.  v0:= temp @kind object;
  #L216bc2.  call temp:= `c`(v3) @signature `Le/g/j/p/l;.c:(I)I` @kind static;
  #L216bc8.  v1:= temp;
  #L216bca.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L216bd0.  v0:= temp @kind object;
  #L216bd2.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L216bd6.  v1:= 0I;
  #L216bd8.  call `arraycopy`(v2, v1, v0, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L216bde.  v2:= v0 @kind object;
  #L216be0.  v2[v3]:= v4 @kind object;
  #L216be4.  return v2 @kind object;
}
procedure `int` `c`(`int` v1 ) @signature `Le/g/j/p/l;.c:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L216b4c.  v0:= 4I;
  #L216b4e.  if v1 > v0 then goto L216b58;
  #L216b52.  v1:= 8I;
  #L216b56.  goto L216b5c;
  #L216b58.  v1:= v1 * 2;
  #L216b5c.  return v1;
}
