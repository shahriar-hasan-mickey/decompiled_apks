record `e.g.n.e` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`e.g.n.e` v0 @kind this) @signature `Le/g/n/e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L21fdf8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21fdfe.  return @kind void;
}
procedure `int` `a`(`e.g.n.e` v4 @kind this, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Le/g/n/e;.a:([B[B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21fd8c.  v0:= length @variable v5;
  #L21fd8e.  v1:= length @variable v6;
  #L21fd90.  if v0 == v1 then goto L21fd9c;
  #L21fd94.  v5:= length @variable v5;
  #L21fd96.  v6:= length @variable v6;
  #L21fd98.  v5:= v5 - v6 @kind int;
  #L21fd9a.  return v5;
  #L21fd9c.  v0:= 0I;
  #L21fd9e.  v1:= 0I;
  #L21fda0.  v2:= length @variable v5;
  #L21fda2.  if v1 >= v2 then goto L21fdc2;
  #L21fda6.  v2:= v5[v1] @kind byte;
  #L21fdaa.  v3:= v6[v1] @kind byte;
  #L21fdae.  if v2 == v3 then goto L21fdbc;
  #L21fdb2.  v5:= v5[v1] @kind byte;
  #L21fdb6.  v6:= v6[v1] @kind byte;
  #L21fdba.  goto L21fd98;
  #L21fdbc.  v1:= v1 + 1;
  #L21fdc0.  goto L21fda0;
  #L21fdc2.  return v0;
}
procedure `int` `compare`(`e.g.n.e` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Le/g/n/e;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L21fdd4.  v1:= (`byte`[]) v1 @kind object;
  #L21fdd8.  v2:= (`byte`[]) v2 @kind object;
  #L21fddc.  call temp:= `a`(v0, v1, v2) @signature `Le/g/n/e;.a:([B[B)I` @kind virtual;
  #L21fde2.  v1:= temp;
  #L21fde4.  return v1;
}
