record `e.g.o.j` @kind class @AccessFlag  extends `e.g.o.k` @kind interface {
}
global `e.g.o.j` `@@e.g.o.j.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/g/o/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2225ac.  v0:= new `e.g.o.j`;
  #L2225b0.  call `<init>`(v0) @signature `Le/g/o/j;.<init>:()V` @kind direct;
  #L2225b6.  `@@e.g.o.j.a` @type ^`e.g.o.j` := v0 @kind object;
  #L2225ba.  return @kind void;
}
procedure `void` `<init>`(`e.g.o.j` v0 @kind this) @signature `Le/g/o/j;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2225cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2225d2.  return @kind void;
}
procedure `int` `a`(`e.g.o.j` v2 @kind this, `java.lang.CharSequence` v3 @kind object, `int` v4 , `int` v5 ) @signature `Le/g/o/j;.a:(Ljava/lang/CharSequence;II)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22256c.  v5:= v5 + v4 @kind int;
  #L22256e.  v0:= 2I;
  #L222570.  v1:= 2I;
  #L222572.  if v4 >= v5 then goto L222598;
  #L222576.  if v1 != v0 then goto L222598;
  #L22257a.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L222580.  v1:= temp;
  #L222582.  call temp:= `getDirectionality`(v1) @signature `Ljava/lang/Character;.getDirectionality:(C)B` @kind static;
  #L222588.  v1:= temp;
  #L22258a.  call temp:= `b`(v1) @signature `Le/g/o/o;.b:(I)I` @kind static;
  #L222590.  v1:= temp;
  #L222592.  v4:= v4 + 1;
  #L222596.  goto L222572;
  #L222598.  return v1;
}
