record `e.g.o.l` @kind class @AccessFlag ABSTRACT extends `e.g.o.h` @kind interface {
  `e.g.o.k` `e.g.o.l.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.g.o.l` v0 @kind this, `e.g.o.k` v1 @kind object) @signature `Le/g/o/l;.<init>:(Le/g/o/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L222670.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L222676.  v0.`e.g.o.l.a` @type ^`e.g.o.k` := v1 @kind object;
  #L22267a.  return @kind void;
}
procedure `boolean` `c`(`e.g.o.l` v1 @kind this, `java.lang.CharSequence` v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/g/o/l;.c:(Ljava/lang/CharSequence;II)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2225e4.  v0:= v1.`e.g.o.l.a` @type ^`e.g.o.k` @kind object;
  #L2225e8.  call temp:= `a`(v0, v2, v3, v4) @signature `Le/g/o/k;.a:(Ljava/lang/CharSequence;II)I` @kind interface;
  #L2225ee.  v2:= temp;
  #L2225f0.  v3:= 1I;
  #L2225f2.  if v2 == 0 then goto L222608;
  #L2225f6.  if v2 == v3 then goto L222604;
  #L2225fa.  call temp:= `b`(v1) @signature `Le/g/o/l;.b:()Z` @kind virtual;
  #L222600.  v2:= temp;
  #L222602.  return v2;
  #L222604.  v2:= 0I;
  #L222606.  return v2;
  #L222608.  return v3;
}
procedure `boolean` `a`(`e.g.o.l` v1 @kind this, `java.lang.CharSequence` v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/g/o/l;.a:(Ljava/lang/CharSequence;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22261c.  if v2 == 0 then goto L222652;
  #L222620.  if v3 < 0 then goto L222652;
  #L222624.  if v4 < 0 then goto L222652;
  #L222628.  call temp:= `length`(v2) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L22262e.  v0:= temp;
  #L222630.  v0:= v0 - v4 @kind int;
  #L222632.  if v0 < v3 then goto L222652;
  #L222636.  v0:= v1.`e.g.o.l.a` @type ^`e.g.o.k` @kind object;
  #L22263a.  if v0 != 0 then goto L222648;
  #L22263e.  call temp:= `b`(v1) @signature `Le/g/o/l;.b:()Z` @kind virtual;
  #L222644.  v2:= temp;
  #L222646.  return v2;
  #L222648.  call temp:= `c`(v1, v2, v3, v4) @signature `Le/g/o/l;.c:(Ljava/lang/CharSequence;II)Z` @kind direct;
  #L22264e.  v2:= temp;
  #L222650.  return v2;
  #L222652.  v2:= new `java.lang.IllegalArgumentException`;
  #L222656.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L22265c.  throw v2;
}
procedure `boolean` `b`() @signature `Le/g/o/l;.b:()Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
