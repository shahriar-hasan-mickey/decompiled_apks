record `e.g.o.n` @kind class @AccessFlag  extends `e.g.o.l` @kind class {
}
global `e.g.o.n` `@@e.g.o.n.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/g/o/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2226ec.  v0:= new `e.g.o.n`;
  #L2226f0.  call `<init>`(v0) @signature `Le/g/o/n;.<init>:()V` @kind direct;
  #L2226f6.  `@@e.g.o.n.b` @type ^`e.g.o.n` := v0 @kind object;
  #L2226fa.  return @kind void;
}
procedure `void` `<init>`(`e.g.o.n` v1 @kind this) @signature `Le/g/o/n;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L22270c.  v0:= 0I;
  #L22270e.  call `<init>`(v1, v0) @signature `Le/g/o/l;.<init>:(Le/g/o/k;)V` @kind direct;
  #L222714.  return @kind void;
}
procedure `boolean` `b`(`e.g.o.n` v2 @kind this) @signature `Le/g/o/n;.b:()Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2226c0.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L2226c6.  v0:= temp @kind object;
  #L2226c8.  call temp:= `b`(v0) @signature `Le/g/o/p;.b:(Ljava/util/Locale;)I` @kind static;
  #L2226ce.  v0:= temp;
  #L2226d0.  v1:= 1I;
  #L2226d2.  if v0 != v1 then goto L2226d8;
  #L2226d6.  goto L2226da;
  #L2226d8.  v1:= 0I;
  #L2226da.  return v1;
}
