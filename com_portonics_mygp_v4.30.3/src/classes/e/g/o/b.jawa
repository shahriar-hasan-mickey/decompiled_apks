record `e.g.o.b` @kind class @AccessFlag  {
  `java.lang.CharSequence` `e.g.o.b.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `e.g.o.b.c` @AccessFlag PRIVATE_FINAL;
  `int` `e.g.o.b.d` @AccessFlag PRIVATE_FINAL;
  `int` `e.g.o.b.e` @AccessFlag PRIVATE;
  `char` `e.g.o.b.f` @AccessFlag PRIVATE;
}
global `byte`[] `@@e.g.o.b.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/g/o/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2213f4.  v0:= 1792I;
  #L2213f8.  v1:= new `byte`[v0];
  #L2213fc.  `@@e.g.o.b.a` @type ^`byte`[] := v1 @kind object;
  #L221400.  v1:= 0I;
  #L221402.  if v1 >= v0 then goto L22141c;
  #L221406.  v2:= `@@e.g.o.b.a` @type ^`byte`[] @kind object;
  #L22140a.  call temp:= `getDirectionality`(v1) @signature `Ljava/lang/Character;.getDirectionality:(I)B` @kind static;
  #L221410.  v3:= temp;
  #L221412.  v2[v1]:= v3 @kind byte;
  #L221416.  v1:= v1 + 1;
  #L22141a.  goto L221402;
  #L22141c.  return @kind void;
}
procedure `void` `<init>`(`e.g.o.b` v0 @kind this, `java.lang.CharSequence` v1 @kind object, `boolean` v2 ) @signature `Le/g/o/b;.<init>:(Ljava/lang/CharSequence;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L221430.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L221436.  v0.`e.g.o.b.b` @type ^`java.lang.CharSequence` := v1 @kind object;
  #L22143a.  v0.`e.g.o.b.c` @type ^`boolean` := v2 @kind boolean;
  #L22143e.  call temp:= `length`(v1) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L221444.  v1:= temp;
  #L221446.  v0.`e.g.o.b.d` @type ^`int` := v1;
  #L22144a.  return @kind void;
}
procedure `byte` `c`(`char` v1 ) @signature `Le/g/o/b;.c:(C)B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L221070.  v0:= 1792I;
  #L221074.  if v1 >= v0 then goto L221082;
  #L221078.  v0:= `@@e.g.o.b.a` @type ^`byte`[] @kind object;
  #L22107c.  v1:= v0[v1] @kind byte;
  #L221080.  goto L22108a;
  #L221082.  call temp:= `getDirectionality`(v1) @signature `Ljava/lang/Character;.getDirectionality:(C)B` @kind static;
  #L221088.  v1:= temp;
  #L22108a.  return v1;
}
procedure `byte` `f`(`e.g.o.b` v4 @kind this) @signature `Le/g/o/b;.f:()B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22109c.  v0:= v4.`e.g.o.b.e` @type ^`int`;
  #L2210a0.  v1:= v4.`e.g.o.b.e` @type ^`int`;
  #L2210a4.  v2:= 59I;
  #L2210a8.  if v1 <= 0 then goto L2210d6;
  #L2210ac.  v3:= v4.`e.g.o.b.b` @type ^`java.lang.CharSequence` @kind object;
  #L2210b0.  v1:= v1 + -1;
  #L2210b4.  v4.`e.g.o.b.e` @type ^`int` := v1;
  #L2210b8.  call temp:= `charAt`(v3, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2210be.  v1:= temp;
  #L2210c0.  v4.`e.g.o.b.f` @type ^`char` := v1 @kind char;
  #L2210c4.  v3:= 38I;
  #L2210c8.  if v1 != v3 then goto L2210d2;
  #L2210cc.  v0:= 12I;
  #L2210d0.  return v0;
  #L2210d2.  if v1 != v2 then goto L2210a0;
  #L2210d6.  v4.`e.g.o.b.e` @type ^`int` := v0;
  #L2210da.  v4.`e.g.o.b.f` @type ^`char` := v2 @kind char;
  #L2210de.  v0:= 13I;
  #L2210e2.  return v0;
}
procedure `byte` `g`(`e.g.o.b` v3 @kind this) @signature `Le/g/o/b;.g:()B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2210f4.  v0:= v3.`e.g.o.b.e` @type ^`int`;
  #L2210f8.  v1:= v3.`e.g.o.b.d` @type ^`int`;
  #L2210fc.  if v0 >= v1 then goto L221122;
  #L221100.  v1:= v3.`e.g.o.b.b` @type ^`java.lang.CharSequence` @kind object;
  #L221104.  v2:= v0 + 1;
  #L221108.  v3.`e.g.o.b.e` @type ^`int` := v2;
  #L22110c.  call temp:= `charAt`(v1, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L221112.  v0:= temp;
  #L221114.  v3.`e.g.o.b.f` @type ^`char` := v0 @kind char;
  #L221118.  v1:= 59I;
  #L22111c.  if v0 == v1 then goto L221122;
  #L221120.  goto L2210f4;
  #L221122.  v0:= 12I;
  #L221126.  return v0;
}
procedure `byte` `h`(`e.g.o.b` v4 @kind this) @signature `Le/g/o/b;.h:()B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L221138.  v0:= v4.`e.g.o.b.e` @type ^`int`;
  #L22113c.  v1:= v4.`e.g.o.b.e` @type ^`int`;
  #L221140.  v2:= 62I;
  #L221144.  if v1 <= 0 then goto L2211aa;
  #L221148.  v3:= v4.`e.g.o.b.b` @type ^`java.lang.CharSequence` @kind object;
  #L22114c.  v1:= v1 + -1;
  #L221150.  v4.`e.g.o.b.e` @type ^`int` := v1;
  #L221154.  call temp:= `charAt`(v3, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L22115a.  v1:= temp;
  #L22115c.  v4.`e.g.o.b.f` @type ^`char` := v1 @kind char;
  #L221160.  v3:= 60I;
  #L221164.  if v1 != v3 then goto L22116e;
  #L221168.  v0:= 12I;
  #L22116c.  return v0;
  #L22116e.  if v1 != v2 then goto L221174;
  #L221172.  goto L2211aa;
  #L221174.  v2:= 34I;
  #L221178.  if v1 == v2 then goto L221184;
  #L22117c.  v2:= 39I;
  #L221180.  if v1 != v2 then goto L22113c;
  #L221184.  v2:= v4.`e.g.o.b.e` @type ^`int`;
  #L221188.  if v2 <= 0 then goto L22113c;
  #L22118c.  v3:= v4.`e.g.o.b.b` @type ^`java.lang.CharSequence` @kind object;
  #L221190.  v2:= v2 + -1;
  #L221194.  v4.`e.g.o.b.e` @type ^`int` := v2;
  #L221198.  call temp:= `charAt`(v3, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L22119e.  v2:= temp;
  #L2211a0.  v4.`e.g.o.b.f` @type ^`char` := v2 @kind char;
  #L2211a4.  if v2 == v1 then goto L22113c;
  #L2211a8.  goto L221184;
  #L2211aa.  v4.`e.g.o.b.e` @type ^`int` := v0;
  #L2211ae.  v4.`e.g.o.b.f` @type ^`char` := v2 @kind char;
  #L2211b2.  v0:= 13I;
  #L2211b6.  return v0;
}
procedure `byte` `i`(`e.g.o.b` v5 @kind this) @signature `Le/g/o/b;.i:()B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2211c8.  v0:= v5.`e.g.o.b.e` @type ^`int`;
  #L2211cc.  v1:= v5.`e.g.o.b.e` @type ^`int`;
  #L2211d0.  v2:= v5.`e.g.o.b.d` @type ^`int`;
  #L2211d4.  if v1 >= v2 then goto L221238;
  #L2211d8.  v2:= v5.`e.g.o.b.b` @type ^`java.lang.CharSequence` @kind object;
  #L2211dc.  v3:= v1 + 1;
  #L2211e0.  v5.`e.g.o.b.e` @type ^`int` := v3;
  #L2211e4.  call temp:= `charAt`(v2, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2211ea.  v1:= temp;
  #L2211ec.  v5.`e.g.o.b.f` @type ^`char` := v1 @kind char;
  #L2211f0.  v2:= 62I;
  #L2211f4.  if v1 != v2 then goto L2211fe;
  #L2211f8.  v0:= 12I;
  #L2211fc.  return v0;
  #L2211fe.  v2:= 34I;
  #L221202.  if v1 == v2 then goto L22120e;
  #L221206.  v2:= 39I;
  #L22120a.  if v1 != v2 then goto L2211cc;
  #L22120e.  v2:= v5.`e.g.o.b.e` @type ^`int`;
  #L221212.  v3:= v5.`e.g.o.b.d` @type ^`int`;
  #L221216.  if v2 >= v3 then goto L2211cc;
  #L22121a.  v3:= v5.`e.g.o.b.b` @type ^`java.lang.CharSequence` @kind object;
  #L22121e.  v4:= v2 + 1;
  #L221222.  v5.`e.g.o.b.e` @type ^`int` := v4;
  #L221226.  call temp:= `charAt`(v3, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L22122c.  v2:= temp;
  #L22122e.  v5.`e.g.o.b.f` @type ^`char` := v2 @kind char;
  #L221232.  if v2 == v1 then goto L2211cc;
  #L221236.  goto L22120e;
  #L221238.  v5.`e.g.o.b.e` @type ^`int` := v0;
  #L22123c.  v0:= 60I;
  #L221240.  v5.`e.g.o.b.f` @type ^`char` := v0 @kind char;
  #L221244.  v0:= 13I;
  #L221248.  return v0;
}
procedure `byte` `a`(`e.g.o.b` v3 @kind this) @signature `Le/g/o/b;.a:()B` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L220f24.  v0:= v3.`e.g.o.b.b` @type ^`java.lang.CharSequence` @kind object;
  #L220f28.  v1:= v3.`e.g.o.b.e` @type ^`int`;
  #L220f2c.  v1:= v1 + -1;
  #L220f30.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L220f36.  v0:= temp;
  #L220f38.  v3.`e.g.o.b.f` @type ^`char` := v0 @kind char;
  #L220f3c.  call temp:= `isLowSurrogate`(v0) @signature `Ljava/lang/Character;.isLowSurrogate:(C)Z` @kind static;
  #L220f42.  v0:= temp;
  #L220f44.  if v0 == 0 then goto L220f74;
  #L220f48.  v0:= v3.`e.g.o.b.b` @type ^`java.lang.CharSequence` @kind object;
  #L220f4c.  v1:= v3.`e.g.o.b.e` @type ^`int`;
  #L220f50.  call temp:= `codePointBefore`(v0, v1) @signature `Ljava/lang/Character;.codePointBefore:(Ljava/lang/CharSequence;I)I` @kind static;
  #L220f56.  v0:= temp;
  #L220f58.  v1:= v3.`e.g.o.b.e` @type ^`int`;
  #L220f5c.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L220f62.  v2:= temp;
  #L220f64.  v1:= v1 - v2 @kind int;
  #L220f66.  v3.`e.g.o.b.e` @type ^`int` := v1;
  #L220f6a.  call temp:= `getDirectionality`(v0) @signature `Ljava/lang/Character;.getDirectionality:(I)B` @kind static;
  #L220f70.  v0:= temp;
  #L220f72.  return v0;
  #L220f74.  v0:= v3.`e.g.o.b.e` @type ^`int`;
  #L220f78.  v0:= v0 + -1;
  #L220f7c.  v3.`e.g.o.b.e` @type ^`int` := v0;
  #L220f80.  v0:= v3.`e.g.o.b.f` @type ^`char` @kind char;
  #L220f84.  call temp:= `c`(v0) @signature `Le/g/o/b;.c:(C)B` @kind static;
  #L220f8a.  v0:= temp;
  #L220f8c.  v1:= v3.`e.g.o.b.c` @type ^`boolean` @kind boolean;
  #L220f90.  if v1 == 0 then goto L220fba;
  #L220f94.  v1:= v3.`e.g.o.b.f` @type ^`char` @kind char;
  #L220f98.  v2:= 62I;
  #L220f9c.  if v1 != v2 then goto L220faa;
  #L220fa0.  call temp:= `h`(v3) @signature `Le/g/o/b;.h:()B` @kind direct;
  #L220fa6.  v0:= temp;
  #L220fa8.  goto L220fba;
  #L220faa.  v2:= 59I;
  #L220fae.  if v1 != v2 then goto L220fba;
  #L220fb2.  call temp:= `f`(v3) @signature `Le/g/o/b;.f:()B` @kind direct;
  #L220fb8.  v0:= temp;
  #L220fba.  return v0;
}
procedure `byte` `b`(`e.g.o.b` v3 @kind this) @signature `Le/g/o/b;.b:()B` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L220fcc.  v0:= v3.`e.g.o.b.b` @type ^`java.lang.CharSequence` @kind object;
  #L220fd0.  v1:= v3.`e.g.o.b.e` @type ^`int`;
  #L220fd4.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L220fda.  v0:= temp;
  #L220fdc.  v3.`e.g.o.b.f` @type ^`char` := v0 @kind char;
  #L220fe0.  call temp:= `isHighSurrogate`(v0) @signature `Ljava/lang/Character;.isHighSurrogate:(C)Z` @kind static;
  #L220fe6.  v0:= temp;
  #L220fe8.  if v0 == 0 then goto L221018;
  #L220fec.  v0:= v3.`e.g.o.b.b` @type ^`java.lang.CharSequence` @kind object;
  #L220ff0.  v1:= v3.`e.g.o.b.e` @type ^`int`;
  #L220ff4.  call temp:= `codePointAt`(v0, v1) @signature `Ljava/lang/Character;.codePointAt:(Ljava/lang/CharSequence;I)I` @kind static;
  #L220ffa.  v0:= temp;
  #L220ffc.  v1:= v3.`e.g.o.b.e` @type ^`int`;
  #L221000.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L221006.  v2:= temp;
  #L221008.  v1:= v1 + v2 @kind int;
  #L22100a.  v3.`e.g.o.b.e` @type ^`int` := v1;
  #L22100e.  call temp:= `getDirectionality`(v0) @signature `Ljava/lang/Character;.getDirectionality:(I)B` @kind static;
  #L221014.  v0:= temp;
  #L221016.  return v0;
  #L221018.  v0:= v3.`e.g.o.b.e` @type ^`int`;
  #L22101c.  v0:= v0 + 1;
  #L221020.  v3.`e.g.o.b.e` @type ^`int` := v0;
  #L221024.  v0:= v3.`e.g.o.b.f` @type ^`char` @kind char;
  #L221028.  call temp:= `c`(v0) @signature `Le/g/o/b;.c:(C)B` @kind static;
  #L22102e.  v0:= temp;
  #L221030.  v1:= v3.`e.g.o.b.c` @type ^`boolean` @kind boolean;
  #L221034.  if v1 == 0 then goto L22105e;
  #L221038.  v1:= v3.`e.g.o.b.f` @type ^`char` @kind char;
  #L22103c.  v2:= 60I;
  #L221040.  if v1 != v2 then goto L22104e;
  #L221044.  call temp:= `i`(v3) @signature `Le/g/o/b;.i:()B` @kind direct;
  #L22104a.  v0:= temp;
  #L22104c.  goto L22105e;
  #L22104e.  v2:= 38I;
  #L221052.  if v1 != v2 then goto L22105e;
  #L221056.  call temp:= `g`(v3) @signature `Le/g/o/b;.g:()B` @kind direct;
  #L22105c.  v0:= temp;
  #L22105e.  return v0;
}
procedure `int` `d`(`e.g.o.b` v8 @kind this) @signature `Le/g/o/b;.d:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L22125c.  v0:= 0I;
  #L22125e.  v8.`e.g.o.b.e` @type ^`int` := v0;
  #L221262.  v1:= -1I;
  #L221264.  v2:= 1I;
  #L221266.  v3:= 0I;
  #L221268.  v4:= 0I;
  #L22126a.  v5:= 0I;
  #L22126c.  v6:= v8.`e.g.o.b.e` @type ^`int`;
  #L221270.  v7:= v8.`e.g.o.b.d` @type ^`int`;
  #L221274.  if v6 >= v7 then goto L2212ca;
  #L221278.  if v3 != 0 then goto L2212ca;
  #L22127c.  call temp:= `b`(v8) @signature `Le/g/o/b;.b:()B` @kind virtual;
  #L221282.  v6:= temp;
  #L221284.  if v6 == 0 then goto L2212c0;
  #L221288.  if v6 == v2 then goto L2212ba;
  #L22128c.  v7:= 2I;
  #L22128e.  if v6 == v7 then goto L2212ba;
  #L221292.  v7:= 9I;
  #L221296.  if v6 == v7 then goto L22126c;
  #L22129a.  goto L221308;
  #L2212a0.  goto L2212c6;
  #L2212a2.  v5:= v5 + -1;
  #L2212a6.  v4:= 0I;
  #L2212a8.  goto L22126c;
  #L2212aa.  v5:= v5 + 1;
  #L2212ae.  v4:= 1I;
  #L2212b0.  goto L22126c;
  #L2212b2.  v5:= v5 + 1;
  #L2212b6.  v4:= -1I;
  #L2212b8.  goto L22126c;
  #L2212ba.  if v5 != 0 then goto L2212c6;
  #L2212be.  return v2;
  #L2212c0.  if v5 != 0 then goto L2212c6;
  #L2212c4.  return v1;
  #L2212c6.  v3:= v5;
  #L2212c8.  goto L22126c;
  #L2212ca.  if v3 != 0 then goto L2212d0;
  #L2212ce.  return v0;
  #L2212d0.  if v4 == 0 then goto L2212d6;
  #L2212d4.  return v4;
  #L2212d6.  v4:= v8.`e.g.o.b.e` @type ^`int`;
  #L2212da.  if v4 <= 0 then goto L221306;
  #L2212de.  call temp:= `a`(v8) @signature `Le/g/o/b;.a:()B` @kind virtual;
  #L2212e4.  v4:= temp;
  #L2212e6.  goto L221324;
  #L2212ec.  goto L2212d6;
  #L2212ee.  v5:= v5 + 1;
  #L2212f2.  goto L2212d6;
  #L2212f4.  if v3 != v5 then goto L221300;
  #L2212f8.  return v2;
  #L2212fa.  if v3 != v5 then goto L221300;
  #L2212fe.  return v1;
  #L221300.  v5:= v5 + -1;
  #L221304.  goto L2212d6;
  #L221306.  return v0;
  #L221308.  switch v6
                  | 14 => goto L2212b2
                  | 15 => goto L2212b2
                  | 16 => goto L2212aa
                  | 17 => goto L2212aa
                  | 18 => goto L2212a2
                  | else => goto L2212a0;
  #L221324.  switch v4
                  | 14 => goto L2212fa
                  | 15 => goto L2212fa
                  | 16 => goto L2212f4
                  | 17 => goto L2212f4
                  | 18 => goto L2212ee
                  | else => goto L2212ec;
}
procedure `int` `e`(`e.g.o.b` v7 @kind this) @signature `Le/g/o/b;.e:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L221350.  v0:= v7.`e.g.o.b.d` @type ^`int`;
  #L221354.  v7.`e.g.o.b.e` @type ^`int` := v0;
  #L221358.  v0:= 0I;
  #L22135a.  v1:= 0I;
  #L22135c.  v2:= 0I;
  #L22135e.  v3:= v7.`e.g.o.b.e` @type ^`int`;
  #L221362.  if v3 <= 0 then goto L2213c6;
  #L221366.  call temp:= `a`(v7) @signature `Le/g/o/b;.a:()B` @kind virtual;
  #L22136c.  v3:= temp;
  #L22136e.  v4:= -1I;
  #L221370.  if v3 == 0 then goto L2213b8;
  #L221374.  v5:= 1I;
  #L221376.  if v3 == v5 then goto L2213ac;
  #L22137a.  v6:= 2I;
  #L22137c.  if v3 == v6 then goto L2213ac;
  #L221380.  v6:= 9I;
  #L221384.  if v3 == v6 then goto L22135e;
  #L221388.  goto L2213c8;
  #L22138e.  if v2 != 0 then goto L22135e;
  #L221392.  goto L2213c2;
  #L221394.  v1:= v1 + 1;
  #L221398.  goto L22135e;
  #L22139a.  if v2 != v1 then goto L2213a6;
  #L22139e.  return v5;
  #L2213a0.  if v2 != v1 then goto L2213a6;
  #L2213a4.  return v4;
  #L2213a6.  v1:= v1 + -1;
  #L2213aa.  goto L22135e;
  #L2213ac.  if v1 != 0 then goto L2213b2;
  #L2213b0.  return v5;
  #L2213b2.  if v2 != 0 then goto L22135e;
  #L2213b6.  goto L2213c2;
  #L2213b8.  if v1 != 0 then goto L2213be;
  #L2213bc.  return v4;
  #L2213be.  if v2 != 0 then goto L22135e;
  #L2213c2.  v2:= v1;
  #L2213c4.  goto L22135e;
  #L2213c6.  return v0;
  #L2213c8.  switch v3
                  | 14 => goto L2213a0
                  | 15 => goto L2213a0
                  | 16 => goto L22139a
                  | 17 => goto L22139a
                  | 18 => goto L221394
                  | else => goto L22138e;
}
