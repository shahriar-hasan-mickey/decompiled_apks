record `bolts.AggregateException` @kind class @AccessFlag PUBLIC extends `java.lang.Exception` @kind class {
  `java.util.List` `bolts.AggregateException.innerThrowables` @AccessFlag PRIVATE;
}
global `long` `@@bolts.AggregateException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`bolts.AggregateException` v1 @kind this, `java.lang.String` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lbolts/AggregateException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2d0e58.  if v3 == 0 then goto L2d0e78;
  #L2d0e5c.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2d0e62.  v0:= temp;
  #L2d0e64.  if v0 <= 0 then goto L2d0e78;
  #L2d0e68.  v0:= 0I;
  #L2d0e6a.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2d0e70.  v0:= temp @kind object;
  #L2d0e72.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L2d0e76.  goto L2d0e7a;
  #L2d0e78.  v0:= 0I;
  #L2d0e7a.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/Exception;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2d0e80.  call temp:= `unmodifiableList`(v3) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2d0e86.  v2:= temp @kind object;
  #L2d0e88.  v1.`bolts.AggregateException.innerThrowables` @type ^`java.util.List` := v2 @kind object;
  #L2d0e8c.  return @kind void;
}
procedure `void` `<init>`(`bolts.AggregateException` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Throwable`[] v2 @kind object) @signature `Lbolts/AggregateException;.<init>:(Ljava/lang/String;[Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d0e38.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2d0e3e.  v2:= temp @kind object;
  #L2d0e40.  call `<init>`(v0, v1, v2) @signature `Lbolts/AggregateException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L2d0e46.  return @kind void;
}
procedure `void` `<init>`(`bolts.AggregateException` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lbolts/AggregateException;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2d0ea0.  v0:= "There were multiple errors." @kind object;
  #L2d0ea4.  call `<init>`(v1, v0, v2) @signature `Lbolts/AggregateException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L2d0eaa.  return @kind void;
}
procedure `java.lang.Throwable`[] `getCauses`(`bolts.AggregateException` v2 @kind this) @signature `Lbolts/AggregateException;.getCauses:()[Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d0d84.  v0:= v2.`bolts.AggregateException.innerThrowables` @type ^`java.util.List` @kind object;
  #L2d0d88.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2d0d8e.  v1:= temp;
  #L2d0d90.  v1:= new `java.lang.Throwable`[v1];
  #L2d0d94.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L2d0d9a.  v0:= temp @kind object;
  #L2d0d9c.  v0:= (`java.lang.Throwable`[]) v0 @kind object;
  #L2d0da0.  return v0 @kind object;
}
procedure `java.util.List` `getErrors`(`bolts.AggregateException` v4 @kind this) @signature `Lbolts/AggregateException;.getErrors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d0db4.  v0:= new `java.util.ArrayList`;
  #L2d0db8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2d0dbe.  v1:= v4.`bolts.AggregateException.innerThrowables` @type ^`java.util.List` @kind object;
  #L2d0dc2.  if v1 != 0 then goto L2d0dc8;
  #L2d0dc6.  return v0 @kind object;
  #L2d0dc8.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2d0dce.  v1:= temp @kind object;
  #L2d0dd0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2d0dd6.  v2:= temp;
  #L2d0dd8.  if v2 == 0 then goto L2d0e0e;
  #L2d0ddc.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2d0de2.  v2:= temp @kind object;
  #L2d0de4.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L2d0de8.  v3:= instanceof @variable v2 @type ^`java.lang.Exception` @kind boolean;
  #L2d0dec.  if v3 == 0 then goto L2d0dfc;
  #L2d0df0.  v2:= (`java.lang.Exception`) v2 @kind object;
  #L2d0df4.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d0dfa.  goto L2d0dd0;
  #L2d0dfc.  v3:= new `java.lang.Exception`;
  #L2d0e00.  call `<init>`(v3, v2) @signature `Ljava/lang/Exception;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L2d0e06.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d0e0c.  goto L2d0dd0;
  #L2d0e0e.  return v0 @kind object;
}
procedure `java.util.List` `getInnerThrowables`(`bolts.AggregateException` v1 @kind this) @signature `Lbolts/AggregateException;.getInnerThrowables:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d0e20.  v0:= v1.`bolts.AggregateException.innerThrowables` @type ^`java.util.List` @kind object;
  #L2d0e24.  return v0 @kind object;
}
procedure `void` `printStackTrace`(`bolts.AggregateException` v5 @kind this, `java.io.PrintStream` v6 @kind object) @signature `Lbolts/AggregateException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d0ebc.  call `printStackTrace`(v5, v6) @signature `Ljava/lang/Exception;.printStackTrace:(Ljava/io/PrintStream;)V` @kind super;
  #L2d0ec2.  v0:= v5.`bolts.AggregateException.innerThrowables` @type ^`java.util.List` @kind object;
  #L2d0ec6.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2d0ecc.  v0:= temp @kind object;
  #L2d0ece.  v1:= -1I;
  #L2d0ed0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2d0ed6.  v2:= temp;
  #L2d0ed8.  if v2 == 0 then goto L2d0f26;
  #L2d0edc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2d0ee2.  v2:= temp @kind object;
  #L2d0ee4.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L2d0ee8.  v3:= "\n" @kind object;
  #L2d0eec.  call temp:= `append`(v6, v3) @signature `Ljava/io/PrintStream;.append:(Ljava/lang/CharSequence;)Ljava/io/PrintStream;` @kind virtual;
  #L2d0ef2.  v4:= "  Inner throwable #" @kind object;
  #L2d0ef6.  call temp:= `append`(v6, v4) @signature `Ljava/io/PrintStream;.append:(Ljava/lang/CharSequence;)Ljava/io/PrintStream;` @kind virtual;
  #L2d0efc.  v1:= v1 + 1;
  #L2d0f00.  call temp:= `toString`(v1) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L2d0f06.  v4:= temp @kind object;
  #L2d0f08.  call temp:= `append`(v6, v4) @signature `Ljava/io/PrintStream;.append:(Ljava/lang/CharSequence;)Ljava/io/PrintStream;` @kind virtual;
  #L2d0f0e.  v4:= ": " @kind object;
  #L2d0f12.  call temp:= `append`(v6, v4) @signature `Ljava/io/PrintStream;.append:(Ljava/lang/CharSequence;)Ljava/io/PrintStream;` @kind virtual;
  #L2d0f18.  call `printStackTrace`(v2, v6) @signature `Ljava/lang/Throwable;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L2d0f1e.  call temp:= `append`(v6, v3) @signature `Ljava/io/PrintStream;.append:(Ljava/lang/CharSequence;)Ljava/io/PrintStream;` @kind virtual;
  #L2d0f24.  goto L2d0ed0;
  #L2d0f26.  return @kind void;
}
procedure `void` `printStackTrace`(`bolts.AggregateException` v5 @kind this, `java.io.PrintWriter` v6 @kind object) @signature `Lbolts/AggregateException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d0f38.  call `printStackTrace`(v5, v6) @signature `Ljava/lang/Exception;.printStackTrace:(Ljava/io/PrintWriter;)V` @kind super;
  #L2d0f3e.  v0:= v5.`bolts.AggregateException.innerThrowables` @type ^`java.util.List` @kind object;
  #L2d0f42.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2d0f48.  v0:= temp @kind object;
  #L2d0f4a.  v1:= -1I;
  #L2d0f4c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2d0f52.  v2:= temp;
  #L2d0f54.  if v2 == 0 then goto L2d0fa2;
  #L2d0f58.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2d0f5e.  v2:= temp @kind object;
  #L2d0f60.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L2d0f64.  v3:= "\n" @kind object;
  #L2d0f68.  call temp:= `append`(v6, v3) @signature `Ljava/io/PrintWriter;.append:(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;` @kind virtual;
  #L2d0f6e.  v4:= "  Inner throwable #" @kind object;
  #L2d0f72.  call temp:= `append`(v6, v4) @signature `Ljava/io/PrintWriter;.append:(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;` @kind virtual;
  #L2d0f78.  v1:= v1 + 1;
  #L2d0f7c.  call temp:= `toString`(v1) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L2d0f82.  v4:= temp @kind object;
  #L2d0f84.  call temp:= `append`(v6, v4) @signature `Ljava/io/PrintWriter;.append:(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;` @kind virtual;
  #L2d0f8a.  v4:= ": " @kind object;
  #L2d0f8e.  call temp:= `append`(v6, v4) @signature `Ljava/io/PrintWriter;.append:(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;` @kind virtual;
  #L2d0f94.  call `printStackTrace`(v2, v6) @signature `Ljava/lang/Throwable;.printStackTrace:(Ljava/io/PrintWriter;)V` @kind virtual;
  #L2d0f9a.  call temp:= `append`(v6, v3) @signature `Ljava/io/PrintWriter;.append:(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;` @kind virtual;
  #L2d0fa0.  goto L2d0f4c;
  #L2d0fa2.  return @kind void;
}
