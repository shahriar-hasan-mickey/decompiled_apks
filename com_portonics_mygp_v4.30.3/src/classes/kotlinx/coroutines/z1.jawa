record `kotlinx.coroutines.z1` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `kotlin.coroutines.CoroutineContext$Element` @kind interface {
}
global `kotlinx.coroutines.y1` `@@kotlinx.coroutines.z1.m0` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/z1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L55f990.  v0:= `@@kotlinx.coroutines.y1.b` @type ^`kotlinx.coroutines.y1` @kind object;
  #L55f994.  `@@kotlinx.coroutines.z1.m0` @type ^`kotlinx.coroutines.y1` := v0 @kind object;
  #L55f998.  return @kind void;
}
procedure `boolean` `A0`() @signature `Lkotlinx/coroutines/z1;.A0:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.u` `K0`(`kotlinx.coroutines.w` v0 @kind object) @signature `Lkotlinx/coroutines/z1;.K0:(Lkotlinx/coroutines/w;)Lkotlinx/coroutines/u;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `a`() @signature `Lkotlinx/coroutines/z1;.a:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `d`(`java.util.concurrent.CancellationException` v0 @kind object) @signature `Lkotlinx/coroutines/z1;.d:(Ljava/util/concurrent/CancellationException;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isCancelled`() @signature `Lkotlinx/coroutines/z1;.isCancelled:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `k`(`kotlin.coroutines.Continuation` v0 @kind object) @signature `Lkotlinx/coroutines/z1;.k:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.z0` `m`(`boolean` v0 , `boolean` v1 , `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlinx/coroutines/z1;.m:(ZZLkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/z0;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.concurrent.CancellationException` `o`() @signature `Lkotlinx/coroutines/z1;.o:()Ljava/util/concurrent/CancellationException;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `start`() @signature `Lkotlinx/coroutines/z1;.start:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.z0` `x`(`kotlin.jvm.functions.Function1` v0 @kind object) @signature `Lkotlinx/coroutines/z1;.x:(Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/z0;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
