record `com.google.android.exoplayer2.upstream.y` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `a`(`com.google.android.exoplayer2.upstream.w` v0 @kind object) @signature `Lcom/google/android/exoplayer2/upstream/y;.a:(Lcom/google/android/exoplayer2/upstream/w;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1d1cd0.  if v0 == 0 then goto L1d1cda;
  #L1d1cd4.  call `close`(v0) @signature `Lcom/google/android/exoplayer2/upstream/w;.close:()V` @kind interface;
  #L1d1cda.  return @kind void;
  catch `java.io.IOException` @[L1d1cd4..L1d1cda] goto L1d1cda;
}
procedure `byte`[] `b`(`com.google.android.exoplayer2.upstream.w` v4 @kind object) @signature `Lcom/google/android/exoplayer2/upstream/y;.b:(Lcom/google/android/exoplayer2/upstream/w;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d1c7c.  v0:= 1024I;
  #L1d1c80.  v0:= new `byte`[v0];
  #L1d1c84.  v1:= 0I;
  #L1d1c86.  v2:= 0I;
  #L1d1c88.  v3:= -1I;
  #L1d1c8a.  if v1 == v3 then goto L1d1cb6;
  #L1d1c8e.  v1:= length @variable v0;
  #L1d1c90.  if v2 != v1 then goto L1d1ca2;
  #L1d1c94.  v1:= length @variable v0;
  #L1d1c96.  v1:= v1 * 2;
  #L1d1c9a.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1d1ca0.  v0:= temp @kind object;
  #L1d1ca2.  v1:= length @variable v0;
  #L1d1ca4.  v1:= v1 - v2 @kind int;
  #L1d1ca6.  call temp:= `read`(v4, v0, v2, v1) @signature `Lcom/google/android/exoplayer2/upstream/r;.read:([BII)I` @kind interface;
  #L1d1cac.  v1:= temp;
  #L1d1cae.  if v1 == v3 then goto L1d1c88;
  #L1d1cb2.  v2:= v2 + v1 @kind int;
  #L1d1cb4.  goto L1d1c88;
  #L1d1cb6.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1d1cbc.  v4:= temp @kind object;
  #L1d1cbe.  return v4 @kind object;
}
