record `com.karumi.dexter.ThreadFactory` @kind class @AccessFlag FINAL {
}
procedure `void` `<init>`(`com.karumi.dexter.ThreadFactory` v0 @kind this) @signature `Lcom/karumi/dexter/ThreadFactory;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45d720.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45d726.  return @kind void;
}
procedure `com.karumi.dexter.Thread` `makeMainThread`() @signature `Lcom/karumi/dexter/ThreadFactory;.makeMainThread:()Lcom/karumi/dexter/Thread;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45d6d0.  v0:= new `com.karumi.dexter.MainThread`;
  #L45d6d4.  call `<init>`(v0) @signature `Lcom/karumi/dexter/MainThread;.<init>:()V` @kind direct;
  #L45d6da.  return v0 @kind object;
}
procedure `com.karumi.dexter.Thread` `makeSameThread`() @signature `Lcom/karumi/dexter/ThreadFactory;.makeSameThread:()Lcom/karumi/dexter/Thread;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45d6ec.  call temp:= `runningMainThread`() @signature `Lcom/karumi/dexter/ThreadFactory;.runningMainThread:()Z` @kind static;
  #L45d6f2.  v0:= temp;
  #L45d6f4.  if v0 == 0 then goto L45d704;
  #L45d6f8.  v0:= new `com.karumi.dexter.MainThread`;
  #L45d6fc.  call `<init>`(v0) @signature `Lcom/karumi/dexter/MainThread;.<init>:()V` @kind direct;
  #L45d702.  return v0 @kind object;
  #L45d704.  v0:= new `com.karumi.dexter.WorkerThread`;
  #L45d708.  call `<init>`(v0) @signature `Lcom/karumi/dexter/WorkerThread;.<init>:()V` @kind direct;
  #L45d70e.  return v0 @kind object;
}
procedure `boolean` `runningMainThread`() @signature `Lcom/karumi/dexter/ThreadFactory;.runningMainThread:()Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L45d69c.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L45d6a2.  v0:= temp @kind object;
  #L45d6a4.  call temp:= `getThread`(v0) @signature `Landroid/os/Looper;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L45d6aa.  v0:= temp @kind object;
  #L45d6ac.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45d6b2.  v1:= temp @kind object;
  #L45d6b4.  if v0 != v1 then goto L45d6bc;
  #L45d6b8.  v0:= 1I;
  #L45d6ba.  goto L45d6be;
  #L45d6bc.  v0:= 0I;
  #L45d6be.  return v0;
}
