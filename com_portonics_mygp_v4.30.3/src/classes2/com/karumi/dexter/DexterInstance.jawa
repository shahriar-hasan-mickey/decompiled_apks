record `com.karumi.dexter.DexterInstance` @kind class @AccessFlag FINAL {
  `android.app.Activity` `com.karumi.dexter.DexterInstance.activity` @AccessFlag PRIVATE;
  `com.karumi.dexter.AndroidPermissionService` `com.karumi.dexter.DexterInstance.androidPermissionService` @AccessFlag PRIVATE_FINAL;
  `java.lang.ref.WeakReference` `com.karumi.dexter.DexterInstance.context` @AccessFlag PRIVATE;
  `com.karumi.dexter.IntentProvider` `com.karumi.dexter.DexterInstance.intentProvider` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `com.karumi.dexter.DexterInstance.isRequestingPermission` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `com.karumi.dexter.DexterInstance.isShowingNativeDialog` @AccessFlag PRIVATE_FINAL;
  `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `com.karumi.dexter.DexterInstance.listener` @AccessFlag PRIVATE;
  `com.karumi.dexter.MultiplePermissionsReport` `com.karumi.dexter.DexterInstance.multiplePermissionsReport` @AccessFlag PRIVATE_FINAL;
  `java.util.Collection` `com.karumi.dexter.DexterInstance.pendingPermissions` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `com.karumi.dexter.DexterInstance.rationaleAccepted` @AccessFlag PRIVATE_FINAL;
}
global `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.karumi.dexter.DexterInstance.PERMISSIONS_REQUEST_CODE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/karumi/dexter/DexterInstance;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L45b624.  v0:= new `com.karumi.dexter.listener.multi.BaseMultiplePermissionsListener`;
  #L45b628.  call `<init>`(v0) @signature `Lcom/karumi/dexter/listener/multi/BaseMultiplePermissionsListener;.<init>:()V` @kind direct;
  #L45b62e.  `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L45b632.  return @kind void;
}
procedure `void` `<init>`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.content.Context` v2 @kind object, `com.karumi.dexter.AndroidPermissionService` v3 @kind object, `com.karumi.dexter.IntentProvider` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.<init>:(Landroid/content/Context;Lcom/karumi/dexter/AndroidPermissionService;Lcom/karumi/dexter/IntentProvider;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L45b644.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45b64a.  v0:= new `java.lang.Object`;
  #L45b64e.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45b654.  v1.`com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @type ^`java.lang.Object` := v0 @kind object;
  #L45b658.  v0:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L45b65c.  v1.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L45b660.  v1.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` := v3 @kind object;
  #L45b664.  v1.`com.karumi.dexter.DexterInstance.intentProvider` @type ^`com.karumi.dexter.IntentProvider` := v4 @kind object;
  #L45b668.  v3:= new `java.util.TreeSet`;
  #L45b66c.  call `<init>`(v3) @signature `Ljava/util/TreeSet;.<init>:()V` @kind direct;
  #L45b672.  v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` := v3 @kind object;
  #L45b676.  v3:= new `com.karumi.dexter.MultiplePermissionsReport`;
  #L45b67a.  call `<init>`(v3) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.<init>:()V` @kind direct;
  #L45b680.  v1.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` := v3 @kind object;
  #L45b684.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L45b688.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L45b68e.  v1.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L45b692.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L45b696.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L45b69c.  v1.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L45b6a0.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L45b6a4.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L45b6aa.  v1.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L45b6ae.  call `setContext`(v1, v2) @signature `Lcom/karumi/dexter/DexterInstance;.setContext:(Landroid/content/Context;)V` @kind virtual;
  #L45b6b4.  return @kind void;
}
procedure `java.util.concurrent.atomic.AtomicBoolean` `access$600`(`com.karumi.dexter.DexterInstance` v0 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.access$600:(Lcom/karumi/dexter/DexterInstance;)Ljava/util/concurrent/atomic/AtomicBoolean;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L45b60c.  v0:= v0.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45b610.  return v0 @kind object;
}
procedure `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `access$702`(`com.karumi.dexter.DexterInstance` v0 @kind object, `com.karumi.dexter.listener.multi.MultiplePermissionsListener` v1 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.access$702:(Lcom/karumi/dexter/DexterInstance;Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;)Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L45b5a8.  v0.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v1 @kind object;
  #L45b5ac.  return v1 @kind object;
}
procedure `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `access$800`() @signature `Lcom/karumi/dexter/DexterInstance;.access$800:()Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L45b5c0.  v0:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L45b5c4.  return v0 @kind object;
}
procedure `void` `checkMultiplePermissions`(`com.karumi.dexter.DexterInstance` v1 @kind this, `com.karumi.dexter.listener.multi.MultiplePermissionsListener` v2 @kind object, `java.util.Collection` v3 @kind object, `com.karumi.dexter.Thread` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkMultiplePermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L45b6c8.  call `checkNoDexterRequestOngoing`(v1) @signature `Lcom/karumi/dexter/DexterInstance;.checkNoDexterRequestOngoing:()V` @kind direct;
  #L45b6ce.  call `checkRequestSomePermission`(v1, v3) @signature `Lcom/karumi/dexter/DexterInstance;.checkRequestSomePermission:(Ljava/util/Collection;)V` @kind direct;
  #L45b6d4.  v0:= v1.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` @kind object;
  #L45b6d8.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45b6de.  v0:= temp @kind object;
  #L45b6e0.  if v0 != 0 then goto L45b6e6;
  #L45b6e4.  return @kind void;
  #L45b6e6.  v0:= v1.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L45b6ea.  if v0 == 0 then goto L45b700;
  #L45b6ee.  call temp:= `isFinishing`(v0) @signature `Landroid/app/Activity;.isFinishing:()Z` @kind virtual;
  #L45b6f4.  v0:= temp;
  #L45b6f6.  if v0 == 0 then goto L45b700;
  #L45b6fa.  call `onActivityDestroyed`(v1) @signature `Lcom/karumi/dexter/DexterInstance;.onActivityDestroyed:()V` @kind virtual;
  #L45b700.  v0:= v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L45b704.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L45b70a.  v0:= v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L45b70e.  call temp:= `addAll`(v0, v3) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L45b714.  v0:= v1.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L45b718.  call `clear`(v0) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.clear:()V` @kind virtual;
  #L45b71e.  v0:= new `com.karumi.dexter.MultiplePermissionListenerThreadDecorator`;
  #L45b722.  call `<init>`(v0, v2, v4) @signature `Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator;.<init>:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L45b728.  v1.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L45b72c.  v0:= v1.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` @kind object;
  #L45b730.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45b736.  v0:= temp @kind object;
  #L45b738.  v0:= (`android.content.Context`) v0 @kind object;
  #L45b73c.  call temp:= `isEveryPermissionGranted`(v1, v3, v0) @signature `Lcom/karumi/dexter/DexterInstance;.isEveryPermissionGranted:(Ljava/util/Collection;Landroid/content/Context;)Z` @kind direct;
  #L45b742.  v0:= temp;
  #L45b744.  if v0 == 0 then goto L45b75a;
  #L45b748.  v0:= new `com.karumi.dexter.DexterInstance$1`;
  #L45b74c.  call `<init>`(v0, v1, v3, v2) @signature `Lcom/karumi/dexter/DexterInstance$1;.<init>:(Lcom/karumi/dexter/DexterInstance;Ljava/util/Collection;Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;)V` @kind direct;
  #L45b752.  call `execute`(v4, v0) @signature `Lcom/karumi/dexter/Thread;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L45b758.  goto L45b760;
  #L45b75a.  call `startTransparentActivityIfNeeded`(v1) @signature `Lcom/karumi/dexter/DexterInstance;.startTransparentActivityIfNeeded:()V` @kind direct;
  #L45b760.  call `loop`(v4) @signature `Lcom/karumi/dexter/Thread;.loop:()V` @kind interface;
  #L45b766.  return @kind void;
}
procedure `void` `checkNoDexterRequestOngoing`(`com.karumi.dexter.DexterInstance` v3 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.checkNoDexterRequestOngoing:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L45b778.  v0:= v3.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45b77c.  v1:= 1I;
  #L45b77e.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.getAndSet:(Z)Z` @kind virtual;
  #L45b784.  v0:= temp;
  #L45b786.  if v0 != 0 then goto L45b78c;
  #L45b78a.  return @kind void;
  #L45b78c.  v0:= new `com.karumi.dexter.DexterException`;
  #L45b790.  v1:= `@@com.karumi.dexter.listener.DexterError.REQUEST_ONGOING` @type ^`com.karumi.dexter.listener.DexterError` @kind object;
  #L45b794.  v2:= "Only one Dexter request at a time is allowed" @kind object;
  #L45b798.  call `<init>`(v0, v2, v1) @signature `Lcom/karumi/dexter/DexterException;.<init>:(Ljava/lang/String;Lcom/karumi/dexter/listener/DexterError;)V` @kind direct;
  #L45b79e.  throw v0;
}
procedure `void` `checkRequestSomePermission`(`com.karumi.dexter.DexterInstance` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkRequestSomePermission:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L45b7e0.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L45b7e6.  v3:= temp;
  #L45b7e8.  if v3 != 0 then goto L45b7ee;
  #L45b7ec.  return @kind void;
  #L45b7ee.  v3:= new `com.karumi.dexter.DexterException`;
  #L45b7f2.  v0:= `@@com.karumi.dexter.listener.DexterError.NO_PERMISSIONS_REQUESTED` @type ^`com.karumi.dexter.listener.DexterError` @kind object;
  #L45b7f6.  v1:= "Dexter has to be called with at least one permission" @kind object;
  #L45b7fa.  call `<init>`(v3, v1, v0) @signature `Lcom/karumi/dexter/DexterException;.<init>:(Ljava/lang/String;Lcom/karumi/dexter/listener/DexterError;)V` @kind direct;
  #L45b800.  throw v3;
}
procedure `int` `checkSelfPermission`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.app.Activity` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkSelfPermission:(Landroid/app/Activity;Ljava/lang/String;)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L45b5d8.  v0:= v1.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L45b5dc.  call temp:= `checkSelfPermission`(v0, v2, v3) @signature `Lcom/karumi/dexter/AndroidPermissionService;.checkSelfPermission:(Landroid/content/Context;Ljava/lang/String;)I` @kind virtual;
  #L45b5e2.  v2:= temp;
  #L45b5e4.  return v2;
  #L45b5e6.  v2:= -1I;
  #L45b5e8.  return v2;
  catch `java.lang.RuntimeException` @[L45b5d8..L45b5e4] goto L45b5e6;
}
procedure `void` `checkSinglePermission`(`com.karumi.dexter.DexterInstance` v1 @kind this, `com.karumi.dexter.listener.single.PermissionListener` v2 @kind object, `java.lang.String` v3 @kind object, `com.karumi.dexter.Thread` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkSinglePermission:(Lcom/karumi/dexter/listener/single/PermissionListener;Ljava/lang/String;Lcom/karumi/dexter/Thread;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L45b814.  v0:= new `com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter`;
  #L45b818.  call `<init>`(v0, v2) @signature `Lcom/karumi/dexter/MultiplePermissionsListenerToPermissionListenerAdapter;.<init>:(Lcom/karumi/dexter/listener/single/PermissionListener;)V` @kind direct;
  #L45b81e.  call temp:= `singleton`(v3) @signature `Ljava/util/Collections;.singleton:(Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L45b824.  v2:= temp @kind object;
  #L45b826.  call `checkMultiplePermissions`(v1, v0, v2, v4) @signature `Lcom/karumi/dexter/DexterInstance;.checkMultiplePermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L45b82c.  return @kind void;
}
procedure `com.karumi.dexter.DexterInstance$PermissionStates` `getPermissionStates`(`com.karumi.dexter.DexterInstance` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.getPermissionStates:(Ljava/util/Collection;)Lcom/karumi/dexter/DexterInstance$PermissionStates;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45b538.  v0:= new `com.karumi.dexter.DexterInstance$PermissionStates`;
  #L45b53c.  v1:= 0I;
  #L45b53e.  call `<init>`(v0, v4, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.<init>:(Lcom/karumi/dexter/DexterInstance;Lcom/karumi/dexter/DexterInstance$1;)V` @kind direct;
  #L45b544.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45b54a.  v5:= temp @kind object;
  #L45b54c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45b552.  v1:= temp;
  #L45b554.  if v1 == 0 then goto L45b594;
  #L45b558.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45b55e.  v1:= temp @kind object;
  #L45b560.  v1:= (`java.lang.String`) v1 @kind object;
  #L45b564.  v2:= v4.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L45b568.  call temp:= `checkSelfPermission`(v4, v2, v1) @signature `Lcom/karumi/dexter/DexterInstance;.checkSelfPermission:(Landroid/app/Activity;Ljava/lang/String;)I` @kind direct;
  #L45b56e.  v2:= temp;
  #L45b570.  v3:= -2I;
  #L45b572.  if v2 == v3 then goto L45b58c;
  #L45b576.  v3:= -1I;
  #L45b578.  if v2 == v3 then goto L45b584;
  #L45b57c.  call `access$500`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$500:(Lcom/karumi/dexter/DexterInstance$PermissionStates;Ljava/lang/String;)V` @kind static;
  #L45b582.  goto L45b54c;
  #L45b584.  call `access$400`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$400:(Lcom/karumi/dexter/DexterInstance$PermissionStates;Ljava/lang/String;)V` @kind static;
  #L45b58a.  goto L45b54c;
  #L45b58c.  call `access$300`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$300:(Lcom/karumi/dexter/DexterInstance$PermissionStates;Ljava/lang/String;)V` @kind static;
  #L45b592.  goto L45b54c;
  #L45b594.  return v0 @kind object;
}
procedure `void` `handleDeniedPermissions`(`com.karumi.dexter.DexterInstance` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.handleDeniedPermissions:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45b840.  call temp:= `isEmpty`(v6) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L45b846.  v0:= temp;
  #L45b848.  if v0 == 0 then goto L45b84e;
  #L45b84c.  return @kind void;
  #L45b84e.  v0:= new `java.util.LinkedList`;
  #L45b852.  call `<init>`(v0) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L45b858.  call temp:= `iterator`(v6) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45b85e.  v1:= temp @kind object;
  #L45b860.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45b866.  v2:= temp;
  #L45b868.  if v2 == 0 then goto L45b89e;
  #L45b86c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45b872.  v2:= temp @kind object;
  #L45b874.  v2:= (`java.lang.String`) v2 @kind object;
  #L45b878.  v3:= v5.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L45b87c.  v4:= v5.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L45b880.  call temp:= `shouldShowRequestPermissionRationale`(v3, v4, v2) @signature `Lcom/karumi/dexter/AndroidPermissionService;.shouldShowRequestPermissionRationale:(Landroid/app/Activity;Ljava/lang/String;)Z` @kind virtual;
  #L45b886.  v3:= temp;
  #L45b888.  if v3 == 0 then goto L45b860;
  #L45b88c.  v3:= new `com.karumi.dexter.listener.PermissionRequest`;
  #L45b890.  call `<init>`(v3, v2) @signature `Lcom/karumi/dexter/listener/PermissionRequest;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45b896.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45b89c.  goto L45b860;
  #L45b89e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L45b8a4.  v1:= temp;
  #L45b8a6.  if v1 == 0 then goto L45b8b2;
  #L45b8aa.  call `requestPermissionsToSystem`(v5, v6) @signature `Lcom/karumi/dexter/DexterInstance;.requestPermissionsToSystem:(Ljava/util/Collection;)V` @kind direct;
  #L45b8b0.  goto L45b8d6;
  #L45b8b2.  v6:= v5.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45b8b6.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L45b8bc.  v6:= temp;
  #L45b8be.  if v6 != 0 then goto L45b8d6;
  #L45b8c2.  v6:= new `com.karumi.dexter.PermissionRationaleToken`;
  #L45b8c6.  call `<init>`(v6, v5) @signature `Lcom/karumi/dexter/PermissionRationaleToken;.<init>:(Lcom/karumi/dexter/DexterInstance;)V` @kind direct;
  #L45b8cc.  v1:= v5.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L45b8d0.  call `onPermissionRationaleShouldBeShown`(v1, v0, v6) @signature `Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;.onPermissionRationaleShouldBeShown:(Ljava/util/List;Lcom/karumi/dexter/PermissionToken;)V` @kind interface;
  #L45b8d6.  return @kind void;
}
procedure `boolean` `isEveryPermissionGranted`(`com.karumi.dexter.DexterInstance` v2 @kind this, `java.util.Collection` v3 @kind object, `android.content.Context` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.isEveryPermissionGranted:(Ljava/util/Collection;Landroid/content/Context;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L45b4f0.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45b4f6.  v3:= temp @kind object;
  #L45b4f8.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45b4fe.  v0:= temp;
  #L45b500.  if v0 == 0 then goto L45b524;
  #L45b504.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45b50a.  v0:= temp @kind object;
  #L45b50c.  v0:= (`java.lang.String`) v0 @kind object;
  #L45b510.  v1:= v2.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L45b514.  call temp:= `checkSelfPermission`(v1, v4, v0) @signature `Lcom/karumi/dexter/AndroidPermissionService;.checkSelfPermission:(Landroid/content/Context;Ljava/lang/String;)I` @kind virtual;
  #L45b51a.  v0:= temp;
  #L45b51c.  if v0 == 0 then goto L45b4f8;
  #L45b520.  v3:= 0I;
  #L45b522.  return v3;
  #L45b524.  v3:= 1I;
  #L45b526.  return v3;
}
procedure `void` `onPermissionsChecked`(`com.karumi.dexter.DexterInstance` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionsChecked:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L45ba2c.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L45ba30.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L45ba36.  v0:= temp;
  #L45ba38.  if v0 == 0 then goto L45ba3e;
  #L45ba3c.  return @kind void;
  #L45ba3e.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @type ^`java.lang.Object` @kind object;
  #L45ba42.  @monitorenter v0
  #L45ba44.  v1:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L45ba48.  call temp:= `removeAll`(v1, v3) @signature `Ljava/util/Collection;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L45ba4e.  v3:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L45ba52.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L45ba58.  v3:= temp;
  #L45ba5a.  if v3 == 0 then goto L45baa2;
  #L45ba5e.  v3:= v2.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L45ba62.  if v3 == 0 then goto L45ba6c;
  #L45ba66.  call `finish`(v3) @signature `Landroid/app/Activity;.finish:()V` @kind virtual;
  #L45ba6c.  v3:= v2.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45ba70.  v1:= 0I;
  #L45ba72.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L45ba78.  v3:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45ba7c.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L45ba82.  v3:= v2.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45ba86.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L45ba8c.  v3:= v2.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L45ba90.  v1:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L45ba94.  v2.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v1 @kind object;
  #L45ba98.  v1:= v2.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L45ba9c.  call `onPermissionsChecked`(v3, v1) @signature `Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;.onPermissionsChecked:(Lcom/karumi/dexter/MultiplePermissionsReport;)V` @kind interface;
  #L45baa2.  @monitorexit v0
  #L45baa4.  return @kind void;
  #L45baa6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45baa8.  @monitorexit v0
  #L45baaa.  throw v3;
  catch `java.lang.Throwable` @[L45ba44..L45baaa] goto L45baa6;
}
procedure `void` `requestPermissionsToSystem`(`com.karumi.dexter.DexterInstance` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.requestPermissionsToSystem:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L45bac8.  v0:= v3.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45bacc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L45bad2.  v0:= temp;
  #L45bad4.  if v0 != 0 then goto L45bafc;
  #L45bad8.  v0:= v3.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L45badc.  v1:= v3.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L45bae0.  v2:= 0I;
  #L45bae2.  v2:= new `java.lang.String`[v2];
  #L45bae6.  call temp:= `toArray`(v4, v2) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L45baec.  v4:= temp @kind object;
  #L45baee.  v4:= (`java.lang.String`[]) v4 @kind object;
  #L45baf2.  v2:= 42I;
  #L45baf6.  call `requestPermissions`(v0, v1, v4, v2) @signature `Lcom/karumi/dexter/AndroidPermissionService;.requestPermissions:(Landroid/app/Activity;[Ljava/lang/String;I)V` @kind virtual;
  #L45bafc.  v4:= v3.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45bb00.  v0:= 1I;
  #L45bb02.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L45bb08.  return @kind void;
}
procedure `void` `startTransparentActivityIfNeeded`(`com.karumi.dexter.DexterInstance` v3 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.startTransparentActivityIfNeeded:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L45bb3c.  v0:= v3.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` @kind object;
  #L45bb40.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45bb46.  v0:= temp @kind object;
  #L45bb48.  v0:= (`android.content.Context`) v0 @kind object;
  #L45bb4c.  if v0 != 0 then goto L45bb52;
  #L45bb50.  return @kind void;
  #L45bb52.  v1:= v3.`com.karumi.dexter.DexterInstance.intentProvider` @type ^`com.karumi.dexter.IntentProvider` @kind object;
  #L45bb56.  v2:= constclass @type ^`com.karumi.dexter.DexterActivity` @kind object;
  #L45bb5a.  call temp:= `get`(v1, v0, v2) @signature `Lcom/karumi/dexter/IntentProvider;.get:(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;` @kind virtual;
  #L45bb60.  v1:= temp @kind object;
  #L45bb62.  v2:= instanceof @variable v0 @type ^`android.app.Application` @kind boolean;
  #L45bb66.  if v2 == 0 then goto L45bb74;
  #L45bb6a.  v2:= 268435456I;
  #L45bb6e.  call temp:= `addFlags`(v1, v2) @signature `Landroid/content/Intent;.addFlags:(I)Landroid/content/Intent;` @kind virtual;
  #L45bb74.  call `startActivity`(v0, v1) @signature `Landroid/content/Context;.startActivity:(Landroid/content/Intent;)V` @kind virtual;
  #L45bb7a.  return @kind void;
}
procedure `void` `updatePermissionsAsDenied`(`com.karumi.dexter.DexterInstance` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45bb8c.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45bb92.  v0:= temp @kind object;
  #L45bb94.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45bb9a.  v1:= temp;
  #L45bb9c.  if v1 == 0 then goto L45bbd0;
  #L45bba0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45bba6.  v1:= temp @kind object;
  #L45bba8.  v1:= (`java.lang.String`) v1 @kind object;
  #L45bbac.  v2:= v4.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L45bbb0.  v3:= v4.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L45bbb4.  call temp:= `isPermissionPermanentlyDenied`(v2, v3, v1) @signature `Lcom/karumi/dexter/AndroidPermissionService;.isPermissionPermanentlyDenied:(Landroid/app/Activity;Ljava/lang/String;)Z` @kind virtual;
  #L45bbba.  v2:= temp;
  #L45bbbc.  call temp:= `from`(v1, v2) @signature `Lcom/karumi/dexter/listener/PermissionDeniedResponse;.from:(Ljava/lang/String;Z)Lcom/karumi/dexter/listener/PermissionDeniedResponse;` @kind static;
  #L45bbc2.  v1:= temp @kind object;
  #L45bbc4.  v2:= v4.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L45bbc8.  call temp:= `addDeniedPermissionResponse`(v2, v1) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.addDeniedPermissionResponse:(Lcom/karumi/dexter/listener/PermissionDeniedResponse;)Z` @kind virtual;
  #L45bbce.  goto L45bb94;
  #L45bbd0.  call `onPermissionsChecked`(v4, v5) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionsChecked:(Ljava/util/Collection;)V` @kind direct;
  #L45bbd6.  return @kind void;
}
procedure `void` `updatePermissionsAsGranted`(`com.karumi.dexter.DexterInstance` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsGranted:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L45bbe8.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45bbee.  v0:= temp @kind object;
  #L45bbf0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45bbf6.  v1:= temp;
  #L45bbf8.  if v1 == 0 then goto L45bc1c;
  #L45bbfc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45bc02.  v1:= temp @kind object;
  #L45bc04.  v1:= (`java.lang.String`) v1 @kind object;
  #L45bc08.  call temp:= `from`(v1) @signature `Lcom/karumi/dexter/listener/PermissionGrantedResponse;.from:(Ljava/lang/String;)Lcom/karumi/dexter/listener/PermissionGrantedResponse;` @kind static;
  #L45bc0e.  v1:= temp @kind object;
  #L45bc10.  v2:= v3.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L45bc14.  call temp:= `addGrantedPermissionResponse`(v2, v1) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.addGrantedPermissionResponse:(Lcom/karumi/dexter/listener/PermissionGrantedResponse;)Z` @kind virtual;
  #L45bc1a.  goto L45bbf0;
  #L45bc1c.  call `onPermissionsChecked`(v3, v4) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionsChecked:(Ljava/util/Collection;)V` @kind direct;
  #L45bc22.  return @kind void;
}
procedure `void` `checkPermission`(`com.karumi.dexter.DexterInstance` v0 @kind this, `com.karumi.dexter.listener.single.PermissionListener` v1 @kind object, `java.lang.String` v2 @kind object, `com.karumi.dexter.Thread` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkPermission:(Lcom/karumi/dexter/listener/single/PermissionListener;Ljava/lang/String;Lcom/karumi/dexter/Thread;)V` @AccessFlag  {
    temp;

  #L45b7b0.  call `checkSinglePermission`(v0, v1, v2, v3) @signature `Lcom/karumi/dexter/DexterInstance;.checkSinglePermission:(Lcom/karumi/dexter/listener/single/PermissionListener;Ljava/lang/String;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L45b7b6.  return @kind void;
}
procedure `void` `checkPermissions`(`com.karumi.dexter.DexterInstance` v0 @kind this, `com.karumi.dexter.listener.multi.MultiplePermissionsListener` v1 @kind object, `java.util.Collection` v2 @kind object, `com.karumi.dexter.Thread` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkPermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @AccessFlag  {
    temp;

  #L45b7c8.  call `checkMultiplePermissions`(v0, v1, v2, v3) @signature `Lcom/karumi/dexter/DexterInstance;.checkMultiplePermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L45b7ce.  return @kind void;
}
procedure `void` `onActivityDestroyed`(`com.karumi.dexter.DexterInstance` v2 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.onActivityDestroyed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45b8e8.  v0:= v2.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L45b8ec.  if v0 == 0 then goto L45b91e;
  #L45b8f0.  v0:= 0I;
  #L45b8f2.  v2.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` := v0 @kind object;
  #L45b8f6.  v0:= v2.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45b8fa.  v1:= 0I;
  #L45b8fc.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L45b902.  v0:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45b906.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L45b90c.  v0:= v2.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45b910.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L45b916.  v0:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L45b91a.  v2.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L45b91e.  return @kind void;
}
procedure `void` `onActivityReady`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.app.Activity` v2 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onActivityReady:(Landroid/app/Activity;)V` @AccessFlag  {
    temp;
    v0;

  #L45b930.  v1.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` := v2 @kind object;
  #L45b934.  v0:= v1.`com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @type ^`java.lang.Object` @kind object;
  #L45b938.  @monitorenter v0
  #L45b93a.  if v2 == 0 then goto L45b94c;
  #L45b93e.  v2:= v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L45b942.  call temp:= `getPermissionStates`(v1, v2) @signature `Lcom/karumi/dexter/DexterInstance;.getPermissionStates:(Ljava/util/Collection;)Lcom/karumi/dexter/DexterInstance$PermissionStates;` @kind direct;
  #L45b948.  v2:= temp @kind object;
  #L45b94a.  goto L45b94e;
  #L45b94c.  v2:= 0I;
  #L45b94e.  @monitorexit v0
  #L45b950.  if v2 == 0 then goto L45b97e;
  #L45b954.  call temp:= `access$000`(v2) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$000:(Lcom/karumi/dexter/DexterInstance$PermissionStates;)Ljava/util/Collection;` @kind static;
  #L45b95a.  v0:= temp @kind object;
  #L45b95c.  call `handleDeniedPermissions`(v1, v0) @signature `Lcom/karumi/dexter/DexterInstance;.handleDeniedPermissions:(Ljava/util/Collection;)V` @kind direct;
  #L45b962.  call temp:= `getImpossibleToGrantPermissions`(v2) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.getImpossibleToGrantPermissions:()Ljava/util/Collection;` @kind virtual;
  #L45b968.  v0:= temp @kind object;
  #L45b96a.  call `updatePermissionsAsDenied`(v1, v0) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @kind direct;
  #L45b970.  call temp:= `access$100`(v2) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$100:(Lcom/karumi/dexter/DexterInstance$PermissionStates;)Ljava/util/Collection;` @kind static;
  #L45b976.  v2:= temp @kind object;
  #L45b978.  call `updatePermissionsAsGranted`(v1, v2) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsGranted:(Ljava/util/Collection;)V` @kind direct;
  #L45b97e.  return @kind void;
  #L45b980.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45b982.  @monitorexit v0
  #L45b984.  throw v2;
  catch `java.lang.Throwable` @[L45b93e..L45b950] goto L45b980;
  catch `java.lang.Throwable` @[L45b982..L45b984] goto L45b980;
}
procedure `void` `onCancelPermissionRequest`(`com.karumi.dexter.DexterInstance` v2 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.onCancelPermissionRequest:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45b9ac.  v0:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45b9b0.  v1:= 0I;
  #L45b9b2.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L45b9b8.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L45b9bc.  call `updatePermissionsAsDenied`(v2, v0) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @kind direct;
  #L45b9c2.  return @kind void;
}
procedure `void` `onContinuePermissionRequest`(`com.karumi.dexter.DexterInstance` v2 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.onContinuePermissionRequest:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45b9d4.  v0:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45b9d8.  v1:= 1I;
  #L45b9da.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L45b9e0.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L45b9e4.  call `requestPermissionsToSystem`(v2, v0) @signature `Lcom/karumi/dexter/DexterInstance;.requestPermissionsToSystem:(Ljava/util/Collection;)V` @kind direct;
  #L45b9ea.  return @kind void;
}
procedure `void` `onPermissionRequestDenied`(`com.karumi.dexter.DexterInstance` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionRequestDenied:(Ljava/util/Collection;)V` @AccessFlag  {
    temp;

  #L45b9fc.  call `updatePermissionsAsDenied`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @kind direct;
  #L45ba02.  return @kind void;
}
procedure `void` `onPermissionRequestGranted`(`com.karumi.dexter.DexterInstance` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionRequestGranted:(Ljava/util/Collection;)V` @AccessFlag  {
    temp;

  #L45ba14.  call `updatePermissionsAsGranted`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsGranted:(Ljava/util/Collection;)V` @kind direct;
  #L45ba1a.  return @kind void;
}
procedure `void` `setContext`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.content.Context` v2 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.setContext:(Landroid/content/Context;)V` @AccessFlag  {
    temp;
    v0;

  #L45bb1c.  v0:= new `java.lang.ref.WeakReference`;
  #L45bb20.  call `<init>`(v0, v2) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L45bb26.  v1.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` := v0 @kind object;
  #L45bb2a.  return @kind void;
}
