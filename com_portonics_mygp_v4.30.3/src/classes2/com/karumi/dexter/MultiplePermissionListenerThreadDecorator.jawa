record `com.karumi.dexter.MultiplePermissionListenerThreadDecorator` @kind class @AccessFlag FINAL extends `com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind interface {
  `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `com.karumi.dexter.MultiplePermissionListenerThreadDecorator.listener` @AccessFlag PRIVATE_FINAL;
  `com.karumi.dexter.Thread` `com.karumi.dexter.MultiplePermissionListenerThreadDecorator.thread` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.karumi.dexter.MultiplePermissionListenerThreadDecorator` v0 @kind this, `com.karumi.dexter.listener.multi.MultiplePermissionsListener` v1 @kind object, `com.karumi.dexter.Thread` v2 @kind object) @signature `Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator;.<init>:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Lcom/karumi/dexter/Thread;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45c01c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45c022.  v0.`com.karumi.dexter.MultiplePermissionListenerThreadDecorator.thread` @type ^`com.karumi.dexter.Thread` := v2 @kind object;
  #L45c026.  v0.`com.karumi.dexter.MultiplePermissionListenerThreadDecorator.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v1 @kind object;
  #L45c02a.  return @kind void;
}
procedure `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `access$000`(`com.karumi.dexter.MultiplePermissionListenerThreadDecorator` v0 @kind object) @signature `Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator;.access$000:(Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator;)Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L45c004.  v0:= v0.`com.karumi.dexter.MultiplePermissionListenerThreadDecorator.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L45c008.  return v0 @kind object;
}
procedure `void` `onPermissionRationaleShouldBeShown`(`com.karumi.dexter.MultiplePermissionListenerThreadDecorator` v2 @kind this, `java.util.List` v3 @kind object, `com.karumi.dexter.PermissionToken` v4 @kind object) @signature `Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator;.onPermissionRationaleShouldBeShown:(Ljava/util/List;Lcom/karumi/dexter/PermissionToken;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45c03c.  v0:= v2.`com.karumi.dexter.MultiplePermissionListenerThreadDecorator.thread` @type ^`com.karumi.dexter.Thread` @kind object;
  #L45c040.  v1:= new `com.karumi.dexter.MultiplePermissionListenerThreadDecorator$2`;
  #L45c044.  call `<init>`(v1, v2, v3, v4) @signature `Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator$2;.<init>:(Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator;Ljava/util/List;Lcom/karumi/dexter/PermissionToken;)V` @kind direct;
  #L45c04a.  call `execute`(v0, v1) @signature `Lcom/karumi/dexter/Thread;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L45c050.  return @kind void;
}
procedure `void` `onPermissionsChecked`(`com.karumi.dexter.MultiplePermissionListenerThreadDecorator` v2 @kind this, `com.karumi.dexter.MultiplePermissionsReport` v3 @kind object) @signature `Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator;.onPermissionsChecked:(Lcom/karumi/dexter/MultiplePermissionsReport;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45c064.  v0:= v2.`com.karumi.dexter.MultiplePermissionListenerThreadDecorator.thread` @type ^`com.karumi.dexter.Thread` @kind object;
  #L45c068.  v1:= new `com.karumi.dexter.MultiplePermissionListenerThreadDecorator$1`;
  #L45c06c.  call `<init>`(v1, v2, v3) @signature `Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator$1;.<init>:(Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator;Lcom/karumi/dexter/MultiplePermissionsReport;)V` @kind direct;
  #L45c072.  call `execute`(v0, v1) @signature `Lcom/karumi/dexter/Thread;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L45c078.  return @kind void;
}
