record `com.karumi.dexter.DexterException` @kind class @AccessFlag FINAL extends `java.lang.IllegalStateException` @kind class {
  `com.karumi.dexter.listener.DexterError` `com.karumi.dexter.DexterException.error` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.karumi.dexter.DexterException` v0 @kind this, `java.lang.String` v1 @kind object, `com.karumi.dexter.listener.DexterError` v2 @kind object) @signature `Lcom/karumi/dexter/DexterException;.<init>:(Ljava/lang/String;Lcom/karumi/dexter/listener/DexterError;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45b2b4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45b2ba.  v0.`com.karumi.dexter.DexterException.error` @type ^`com.karumi.dexter.listener.DexterError` := v2 @kind object;
  #L45b2be.  return @kind void;
}
