record `com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter` @kind class @AccessFlag FINAL extends `com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind interface {
  `com.karumi.dexter.listener.single.PermissionListener` `com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter.listener` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter` v0 @kind this, `com.karumi.dexter.listener.single.PermissionListener` v1 @kind object) @signature `Lcom/karumi/dexter/MultiplePermissionsListenerToPermissionListenerAdapter;.<init>:(Lcom/karumi/dexter/listener/single/PermissionListener;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45c08c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45c092.  v0.`com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter.listener` @type ^`com.karumi.dexter.listener.single.PermissionListener` := v1 @kind object;
  #L45c096.  return @kind void;
}
procedure `void` `onPermissionRationaleShouldBeShown`(`com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter` v1 @kind this, `java.util.List` v2 @kind object, `com.karumi.dexter.PermissionToken` v3 @kind object) @signature `Lcom/karumi/dexter/MultiplePermissionsListenerToPermissionListenerAdapter;.onPermissionRationaleShouldBeShown:(Ljava/util/List;Lcom/karumi/dexter/PermissionToken;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c0a8.  v0:= 0I;
  #L45c0aa.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45c0b0.  v2:= temp @kind object;
  #L45c0b2.  v2:= (`com.karumi.dexter.listener.PermissionRequest`) v2 @kind object;
  #L45c0b6.  v0:= v1.`com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter.listener` @type ^`com.karumi.dexter.listener.single.PermissionListener` @kind object;
  #L45c0ba.  call `onPermissionRationaleShouldBeShown`(v0, v2, v3) @signature `Lcom/karumi/dexter/listener/single/PermissionListener;.onPermissionRationaleShouldBeShown:(Lcom/karumi/dexter/listener/PermissionRequest;Lcom/karumi/dexter/PermissionToken;)V` @kind interface;
  #L45c0c0.  return @kind void;
}
procedure `void` `onPermissionsChecked`(`com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter` v3 @kind this, `com.karumi.dexter.MultiplePermissionsReport` v4 @kind object) @signature `Lcom/karumi/dexter/MultiplePermissionsListenerToPermissionListenerAdapter;.onPermissionsChecked:(Lcom/karumi/dexter/MultiplePermissionsReport;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45c0d4.  call temp:= `getDeniedPermissionResponses`(v4) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.getDeniedPermissionResponses:()Ljava/util/List;` @kind virtual;
  #L45c0da.  v0:= temp @kind object;
  #L45c0dc.  call temp:= `getGrantedPermissionResponses`(v4) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.getGrantedPermissionResponses:()Ljava/util/List;` @kind virtual;
  #L45c0e2.  v4:= temp @kind object;
  #L45c0e4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L45c0ea.  v1:= temp;
  #L45c0ec.  v2:= 0I;
  #L45c0ee.  if v1 != 0 then goto L45c10a;
  #L45c0f2.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45c0f8.  v4:= temp @kind object;
  #L45c0fa.  v4:= (`com.karumi.dexter.listener.PermissionDeniedResponse`) v4 @kind object;
  #L45c0fe.  v0:= v3.`com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter.listener` @type ^`com.karumi.dexter.listener.single.PermissionListener` @kind object;
  #L45c102.  call `onPermissionDenied`(v0, v4) @signature `Lcom/karumi/dexter/listener/single/PermissionListener;.onPermissionDenied:(Lcom/karumi/dexter/listener/PermissionDeniedResponse;)V` @kind interface;
  #L45c108.  goto L45c120;
  #L45c10a.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45c110.  v4:= temp @kind object;
  #L45c112.  v4:= (`com.karumi.dexter.listener.PermissionGrantedResponse`) v4 @kind object;
  #L45c116.  v0:= v3.`com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter.listener` @type ^`com.karumi.dexter.listener.single.PermissionListener` @kind object;
  #L45c11a.  call `onPermissionGranted`(v0, v4) @signature `Lcom/karumi/dexter/listener/single/PermissionListener;.onPermissionGranted:(Lcom/karumi/dexter/listener/PermissionGrantedResponse;)V` @kind interface;
  #L45c120.  return @kind void;
}
