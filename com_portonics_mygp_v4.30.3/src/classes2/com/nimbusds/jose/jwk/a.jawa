record `com.nimbusds.jose.jwk.a` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `com.nimbusds.jose.jwk.a.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.nimbusds.jose.jwk.a.e` @AccessFlag PRIVATE_FINAL;
}
global `com.nimbusds.jose.jwk.a` `@@com.nimbusds.jose.jwk.a.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.nimbusds.jose.jwk.a` `@@com.nimbusds.jose.jwk.a.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.nimbusds.jose.jwk.a` `@@com.nimbusds.jose.jwk.a.c` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/nimbusds/jose/jwk/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L471bd8.  v0:= new `com.nimbusds.jose.jwk.a`;
  #L471bdc.  v1:= "P-256" @kind object;
  #L471be0.  v2:= "secp256r1" @kind object;
  #L471be4.  call `<init>`(v0, v1, v2) @signature `Lcom/nimbusds/jose/jwk/a;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L471bea.  `@@com.nimbusds.jose.jwk.a.a` @type ^`com.nimbusds.jose.jwk.a` := v0 @kind object;
  #L471bee.  v0:= new `com.nimbusds.jose.jwk.a`;
  #L471bf2.  v1:= "P-384" @kind object;
  #L471bf6.  v2:= "secp384r1" @kind object;
  #L471bfa.  call `<init>`(v0, v1, v2) @signature `Lcom/nimbusds/jose/jwk/a;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L471c00.  `@@com.nimbusds.jose.jwk.a.b` @type ^`com.nimbusds.jose.jwk.a` := v0 @kind object;
  #L471c04.  v0:= new `com.nimbusds.jose.jwk.a`;
  #L471c08.  v1:= "P-521" @kind object;
  #L471c0c.  v2:= "secp521r1" @kind object;
  #L471c10.  call `<init>`(v0, v1, v2) @signature `Lcom/nimbusds/jose/jwk/a;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L471c16.  `@@com.nimbusds.jose.jwk.a.c` @type ^`com.nimbusds.jose.jwk.a` := v0 @kind object;
  #L471c1a.  return @kind void;
}
procedure `void` `<init>`(`com.nimbusds.jose.jwk.a` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/nimbusds/jose/jwk/a;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L471c2c.  v0:= 0I;
  #L471c2e.  call `<init>`(v1, v2, v0) @signature `Lcom/nimbusds/jose/jwk/a;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L471c34.  return @kind void;
}
procedure `void` `<init>`(`com.nimbusds.jose.jwk.a` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/nimbusds/jose/jwk/a;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L471c48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L471c4e.  if v1 == 0 then goto L471c5c;
  #L471c52.  v0.`com.nimbusds.jose.jwk.a.d` @type ^`java.lang.String` := v1 @kind object;
  #L471c56.  v0.`com.nimbusds.jose.jwk.a.e` @type ^`java.lang.String` := v2 @kind object;
  #L471c5a.  return @kind void;
  #L471c5c.  v1:= new `java.lang.IllegalArgumentException`;
  #L471c60.  v2:= "The cryptographic curve name must not be null" @kind object;
  #L471c64.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L471c6a.  throw v1;
}
procedure `com.nimbusds.jose.jwk.a` `b`(`java.lang.String` v2 @kind object) @signature `Lcom/nimbusds/jose/jwk/a;.b:(Ljava/lang/String;)Lcom/nimbusds/jose/jwk/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L471b10.  if v2 == 0 then goto L471b82;
  #L471b14.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L471b1a.  v0:= temp @kind object;
  #L471b1c.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L471b22.  v0:= temp;
  #L471b24.  if v0 != 0 then goto L471b82;
  #L471b28.  v0:= `@@com.nimbusds.jose.jwk.a.a` @type ^`com.nimbusds.jose.jwk.a` @kind object;
  #L471b2c.  call temp:= `a`(v0) @signature `Lcom/nimbusds/jose/jwk/a;.a:()Ljava/lang/String;` @kind virtual;
  #L471b32.  v1:= temp @kind object;
  #L471b34.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L471b3a.  v1:= temp;
  #L471b3c.  if v1 == 0 then goto L471b42;
  #L471b40.  return v0 @kind object;
  #L471b42.  v0:= `@@com.nimbusds.jose.jwk.a.b` @type ^`com.nimbusds.jose.jwk.a` @kind object;
  #L471b46.  call temp:= `a`(v0) @signature `Lcom/nimbusds/jose/jwk/a;.a:()Ljava/lang/String;` @kind virtual;
  #L471b4c.  v1:= temp @kind object;
  #L471b4e.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L471b54.  v1:= temp;
  #L471b56.  if v1 == 0 then goto L471b5c;
  #L471b5a.  return v0 @kind object;
  #L471b5c.  v0:= `@@com.nimbusds.jose.jwk.a.c` @type ^`com.nimbusds.jose.jwk.a` @kind object;
  #L471b60.  call temp:= `a`(v0) @signature `Lcom/nimbusds/jose/jwk/a;.a:()Ljava/lang/String;` @kind virtual;
  #L471b66.  v1:= temp @kind object;
  #L471b68.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L471b6e.  v1:= temp;
  #L471b70.  if v1 == 0 then goto L471b76;
  #L471b74.  return v0 @kind object;
  #L471b76.  v0:= new `com.nimbusds.jose.jwk.a`;
  #L471b7a.  call `<init>`(v0, v2) @signature `Lcom/nimbusds/jose/jwk/a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L471b80.  return v0 @kind object;
  #L471b82.  v2:= new `java.lang.IllegalArgumentException`;
  #L471b86.  v0:= "The cryptographic curve string must not be null or empty" @kind object;
  #L471b8a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L471b90.  throw v2;
}
procedure `java.lang.String` `a`(`com.nimbusds.jose.jwk.a` v1 @kind this) @signature `Lcom/nimbusds/jose/jwk/a;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471ba4.  v0:= v1.`com.nimbusds.jose.jwk.a.d` @type ^`java.lang.String` @kind object;
  #L471ba8.  return v0 @kind object;
}
procedure `boolean` `equals`(`com.nimbusds.jose.jwk.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/nimbusds/jose/jwk/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471ad4.  v0:= instanceof @variable v2 @type ^`com.nimbusds.jose.jwk.a` @kind boolean;
  #L471ad8.  if v0 == 0 then goto L471afc;
  #L471adc.  call temp:= `toString`(v1) @signature `Lcom/nimbusds/jose/jwk/a;.toString:()Ljava/lang/String;` @kind virtual;
  #L471ae2.  v0:= temp @kind object;
  #L471ae4.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L471aea.  v2:= temp @kind object;
  #L471aec.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L471af2.  v2:= temp;
  #L471af4.  if v2 == 0 then goto L471afc;
  #L471af8.  v2:= 1I;
  #L471afa.  goto L471afe;
  #L471afc.  v2:= 0I;
  #L471afe.  return v2;
}
procedure `java.lang.String` `toString`(`com.nimbusds.jose.jwk.a` v1 @kind this) @signature `Lcom/nimbusds/jose/jwk/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471bbc.  call temp:= `a`(v1) @signature `Lcom/nimbusds/jose/jwk/a;.a:()Ljava/lang/String;` @kind virtual;
  #L471bc2.  v0:= temp @kind object;
  #L471bc4.  return v0 @kind object;
}
