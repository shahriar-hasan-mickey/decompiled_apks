record `h.c.a.c.b.f` @kind class @AccessFlag PUBLIC_FINAL {
  `h.c.a.c.b.e` `h.c.a.c.b.f.b` @AccessFlag PRIVATE_FINAL;
  `h.c.a.c.b.h` `h.c.a.c.b.f.c` @AccessFlag PRIVATE_FINAL;
}
global `h.c.a.c.b.f` `@@h.c.a.c.b.f.a` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lh/c/a/c/b/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L248528.  v0:= new `h.c.a.c.b.f`;
  #L24852c.  call `<init>`(v0) @signature `Lh/c/a/c/b/f;.<init>:()V` @kind direct;
  #L248532.  v1:= constclass @type ^`h.c.a.c.b.f` @kind object;
  #L248536.  @monitorenter v1
  #L248538.  `@@h.c.a.c.b.f.a` @type ^`h.c.a.c.b.f` := v0 @kind object;
  #L24853c.  @monitorexit v1
  #L24853e.  return @kind void;
  #L248540.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L248542.  @monitorexit v1
  #L248544.  throw v0;
  catch `java.lang.Throwable` @[L248538..L248544] goto L248540;
}
procedure `void` `<init>`(`h.c.a.c.b.f` v1 @kind this) @signature `Lh/c/a/c/b/f;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L248564.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24856a.  v0:= new `h.c.a.c.b.e`;
  #L24856e.  call `<init>`(v0) @signature `Lh/c/a/c/b/e;.<init>:()V` @kind direct;
  #L248574.  v1.`h.c.a.c.b.f.b` @type ^`h.c.a.c.b.e` := v0 @kind object;
  #L248578.  v0:= new `h.c.a.c.b.h`;
  #L24857c.  call `<init>`(v0) @signature `Lh/c/a/c/b/h;.<init>:()V` @kind direct;
  #L248582.  v1.`h.c.a.c.b.f.c` @type ^`h.c.a.c.b.h` := v0 @kind object;
  #L248586.  return @kind void;
}
procedure `h.c.a.c.b.e` `a`() @signature `Lh/c/a/c/b/f;.a:()Lh/c/a/c/b/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2484b8.  call temp:= `c`() @signature `Lh/c/a/c/b/f;.c:()Lh/c/a/c/b/f;` @kind static;
  #L2484be.  v0:= temp @kind object;
  #L2484c0.  v0:= v0.`h.c.a.c.b.f.b` @type ^`h.c.a.c.b.e` @kind object;
  #L2484c4.  return v0 @kind object;
}
procedure `h.c.a.c.b.h` `b`() @signature `Lh/c/a/c/b/f;.b:()Lh/c/a/c/b/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L248508.  call temp:= `c`() @signature `Lh/c/a/c/b/f;.c:()Lh/c/a/c/b/f;` @kind static;
  #L24850e.  v0:= temp @kind object;
  #L248510.  v0:= v0.`h.c.a.c.b.f.c` @type ^`h.c.a.c.b.h` @kind object;
  #L248514.  return v0 @kind object;
}
procedure `h.c.a.c.b.f` `c`() @signature `Lh/c/a/c/b/f;.c:()Lh/c/a/c/b/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2484d8.  v0:= constclass @type ^`h.c.a.c.b.f` @kind object;
  #L2484dc.  @monitorenter v0
  #L2484de.  v1:= `@@h.c.a.c.b.f.a` @type ^`h.c.a.c.b.f` @kind object;
  #L2484e2.  @monitorexit v0
  #L2484e4.  return v1 @kind object;
  #L2484e6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2484e8.  @monitorexit v0
  #L2484ea.  throw v1;
  catch `java.lang.Throwable` @[L2484de..L2484ea] goto L2484e6;
}
