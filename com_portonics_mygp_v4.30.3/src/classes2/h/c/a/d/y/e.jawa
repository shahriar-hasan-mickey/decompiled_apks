record `h.c.a.d.y.e` @kind class @AccessFlag PUBLIC extends `h.c.a.d.y.d` @kind class {
  `float` `h.c.a.d.y.e.a` @AccessFlag ;
}
procedure `void` `<init>`(`h.c.a.d.y.e` v1 @kind this) @signature `Lh/c/a/d/y/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L326cbc.  call `<init>`(v1) @signature `Lh/c/a/d/y/d;.<init>:()V` @kind direct;
  #L326cc2.  v0:= -1.0F;
  #L326cc6.  v1.`h.c.a.d.y.e.a` @type ^`float` := v0;
  #L326cca.  return @kind void;
}
procedure `void` `a`(`h.c.a.d.y.e` v6 @kind this, `h.c.a.d.y.b0` v7 @kind object, `float` v8 , `float` v9 , `float` v10 ) @signature `Lh/c/a/d/y/e;.a:(Lh/c/a/d/y/b0;FFF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L326cdc.  v0:= v10 * v9 @kind float;
  #L326ce0.  v1:= 180.0F;
  #L326ce4.  v2:= v1 - v8 @kind float;
  #L326ce8.  v3:= 0I;
  #L326cea.  call `o`(v7, v3, v0, v1, v2) @signature `Lh/c/a/d/y/b0;.o:(FFFF)V` @kind virtual;
  #L326cf0.  v0:= (`double`) v8 @kind f2d;
  #L326cf2.  call temp:= `toRadians`(v0) @signature `Ljava/lang/Math;.toRadians:(D)D` @kind static;
  #L326cf8.  v0:= temp @kind wide;
  #L326cfa.  call temp:= `sin`(v0) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L326d00.  v0:= temp @kind wide;
  #L326d02.  v2:= (`double`) v10 @kind f2d;
  #L326d04.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L326d0a.  v0:= v0 * v2 @kind double;
  #L326d0e.  v9:= (`double`) v9 @kind f2d;
  #L326d10.  call temp:= `isNaN`(v9) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L326d16.  v0:= v0 * v9 @kind double;
  #L326d1a.  v0:= (`float`) v0 @kind d2f;
  #L326d1c.  v1:= 90.0F;
  #L326d20.  v1:= v1 - v8 @kind float;
  #L326d22.  v4:= (`double`) v1 @kind f2d;
  #L326d24.  call temp:= `toRadians`(v4) @signature `Ljava/lang/Math;.toRadians:(D)D` @kind static;
  #L326d2a.  v4:= temp @kind wide;
  #L326d2c.  call temp:= `sin`(v4) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L326d32.  v4:= temp @kind wide;
  #L326d34.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L326d3a.  v4:= v4 * v2 @kind double;
  #L326d3e.  call temp:= `isNaN`(v9) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L326d44.  v4:= v4 * v9 @kind double;
  #L326d48.  v8:= (`float`) v4 @kind d2f;
  #L326d4a.  call `m`(v7, v0, v8) @signature `Lh/c/a/d/y/b0;.m:(FF)V` @kind virtual;
  #L326d50.  return @kind void;
}
