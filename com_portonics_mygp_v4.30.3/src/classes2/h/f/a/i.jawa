record `h.f.a.i` @kind class @AccessFlag PUBLIC {
  `int` `h.f.a.i.a` @AccessFlag ;
  `int` `h.f.a.i.b` @AccessFlag ;
  `boolean` `h.f.a.i.c` @AccessFlag ;
  `h.f.a.d` `h.f.a.i.d` @AccessFlag ;
  `java.lang.String` `h.f.a.i.e` @AccessFlag ;
}
procedure `void` `<init>`(`h.f.a.i` v1 @kind this) @signature `Lh/f/a/i;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4b1aac.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b1ab2.  v0:= 2I;
  #L4b1ab4.  v1.`h.f.a.i.a` @type ^`int` := v0;
  #L4b1ab8.  v0:= 0I;
  #L4b1aba.  v1.`h.f.a.i.b` @type ^`int` := v0;
  #L4b1abe.  v0:= 1I;
  #L4b1ac0.  v1.`h.f.a.i.c` @type ^`boolean` := v0 @kind boolean;
  #L4b1ac4.  v0:= "PRETTY_LOGGER" @kind object;
  #L4b1ac8.  v1.`h.f.a.i.e` @type ^`java.lang.String` := v0 @kind object;
  #L4b1acc.  return @kind void;
}
procedure `void` `<init>`(`h.f.a.i` v0 @kind this, `h.f.a.h` v1 @kind object) @signature `Lh/f/a/i;.<init>:(Lh/f/a/h;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L4b1ae0.  call `<init>`(v0) @signature `Lh/f/a/i;.<init>:()V` @kind direct;
  #L4b1ae6.  return @kind void;
}
procedure `h.f.a.j` `a`(`h.f.a.i` v2 @kind this) @signature `Lh/f/a/i;.a:()Lh/f/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b1a78.  v0:= v2.`h.f.a.i.d` @type ^`h.f.a.d` @kind object;
  #L4b1a7c.  if v0 != 0 then goto L4b1a8e;
  #L4b1a80.  v0:= new `h.f.a.e`;
  #L4b1a84.  call `<init>`(v0) @signature `Lh/f/a/e;.<init>:()V` @kind direct;
  #L4b1a8a.  v2.`h.f.a.i.d` @type ^`h.f.a.d` := v0 @kind object;
  #L4b1a8e.  v0:= new `h.f.a.j`;
  #L4b1a92.  v1:= 0I;
  #L4b1a94.  call `<init>`(v0, v2, v1) @signature `Lh/f/a/j;.<init>:(Lh/f/a/i;Lh/f/a/h;)V` @kind direct;
  #L4b1a9a.  return v0 @kind object;
}
