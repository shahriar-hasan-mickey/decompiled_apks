record `h.f.a.l` @kind class @AccessFlag ABSTRACT {
}
procedure `boolean` `a`(`java.lang.CharSequence` v6 @kind object, `java.lang.CharSequence` v7 @kind object) @signature `Lh/f/a/l;.a:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b1f3c.  v0:= 1I;
  #L4b1f3e.  if v6 != v7 then goto L4b1f44;
  #L4b1f42.  return v0;
  #L4b1f44.  v1:= 0I;
  #L4b1f46.  if v6 == 0 then goto L4b1fa0;
  #L4b1f4a.  if v7 == 0 then goto L4b1fa0;
  #L4b1f4e.  call temp:= `length`(v6) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4b1f54.  v2:= temp;
  #L4b1f56.  call temp:= `length`(v7) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4b1f5c.  v3:= temp;
  #L4b1f5e.  if v2 != v3 then goto L4b1fa0;
  #L4b1f62.  v3:= instanceof @variable v6 @type ^`java.lang.String` @kind boolean;
  #L4b1f66.  if v3 == 0 then goto L4b1f7c;
  #L4b1f6a.  v3:= instanceof @variable v7 @type ^`java.lang.String` @kind boolean;
  #L4b1f6e.  if v3 == 0 then goto L4b1f7c;
  #L4b1f72.  call temp:= `equals`(v6, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b1f78.  v6:= temp;
  #L4b1f7a.  return v6;
  #L4b1f7c.  v3:= 0I;
  #L4b1f7e.  if v3 >= v2 then goto L4b1f9e;
  #L4b1f82.  call temp:= `charAt`(v6, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4b1f88.  v4:= temp;
  #L4b1f8a.  call temp:= `charAt`(v7, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4b1f90.  v5:= temp;
  #L4b1f92.  if v4 == v5 then goto L4b1f98;
  #L4b1f96.  return v1;
  #L4b1f98.  v3:= v3 + 1;
  #L4b1f9c.  goto L4b1f7e;
  #L4b1f9e.  return v0;
  #L4b1fa0.  return v1;
}
procedure `java.lang.String` `b`(`java.lang.Throwable` v3 @kind object) @signature `Lh/f/a/l;.b:(Ljava/lang/Throwable;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4b1fe0.  v0:= "" @kind object;
  #L4b1fe4.  if v3 != 0 then goto L4b1fea;
  #L4b1fe8.  return v0 @kind object;
  #L4b1fea.  v1:= v3 @kind object;
  #L4b1fec.  if v1 == 0 then goto L4b2004;
  #L4b1ff0.  v2:= instanceof @variable v1 @type ^`java.net.UnknownHostException` @kind boolean;
  #L4b1ff4.  if v2 == 0 then goto L4b1ffa;
  #L4b1ff8.  return v0 @kind object;
  #L4b1ffa.  call temp:= `getCause`(v1) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4b2000.  v1:= temp @kind object;
  #L4b2002.  goto L4b1fec;
  #L4b2004.  v0:= new `java.io.StringWriter`;
  #L4b2008.  call `<init>`(v0) @signature `Ljava/io/StringWriter;.<init>:()V` @kind direct;
  #L4b200e.  v1:= new `java.io.PrintWriter`;
  #L4b2012.  call `<init>`(v1, v0) @signature `Ljava/io/PrintWriter;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L4b2018.  call `printStackTrace`(v3, v1) @signature `Ljava/lang/Throwable;.printStackTrace:(Ljava/io/PrintWriter;)V` @kind virtual;
  #L4b201e.  call `flush`(v1) @signature `Ljava/io/PrintWriter;.flush:()V` @kind virtual;
  #L4b2024.  call temp:= `toString`(v0) @signature `Ljava/io/StringWriter;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b202a.  v3:= temp @kind object;
  #L4b202c.  return v3 @kind object;
}
procedure `boolean` `c`(`java.lang.CharSequence` v0 @kind object) @signature `Lh/f/a/l;.c:(Ljava/lang/CharSequence;)Z` @AccessFlag STATIC {
    temp;

  #L4b1fb4.  if v0 == 0 then goto L4b1fca;
  #L4b1fb8.  call temp:= `length`(v0) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4b1fbe.  v0:= temp;
  #L4b1fc0.  if v0 != 0 then goto L4b1fc6;
  #L4b1fc4.  goto L4b1fca;
  #L4b1fc6.  v0:= 0I;
  #L4b1fc8.  goto L4b1fcc;
  #L4b1fca.  v0:= 1I;
  #L4b1fcc.  return v0;
}
procedure `java.lang.String` `d`(`java.lang.Object` v1 @kind object) @signature `Lh/f/a/l;.d:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b2040.  if v1 != 0 then goto L4b204a;
  #L4b2044.  v1:= "null" @kind object;
  #L4b2048.  return v1 @kind object;
  #L4b204a.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4b2050.  v0:= temp @kind object;
  #L4b2052.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L4b2058.  v0:= temp;
  #L4b205a.  if v0 != 0 then goto L4b2068;
  #L4b205e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b2064.  v1:= temp @kind object;
  #L4b2066.  return v1 @kind object;
  #L4b2068.  v0:= instanceof @variable v1 @type ^`boolean`[] @kind boolean;
  #L4b206c.  if v0 == 0 then goto L4b207e;
  #L4b2070.  v1:= (`boolean`[]) v1 @kind object;
  #L4b2074.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([Z)Ljava/lang/String;` @kind static;
  #L4b207a.  v1:= temp @kind object;
  #L4b207c.  return v1 @kind object;
  #L4b207e.  v0:= instanceof @variable v1 @type ^`byte`[] @kind boolean;
  #L4b2082.  if v0 == 0 then goto L4b2094;
  #L4b2086.  v1:= (`byte`[]) v1 @kind object;
  #L4b208a.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([B)Ljava/lang/String;` @kind static;
  #L4b2090.  v1:= temp @kind object;
  #L4b2092.  return v1 @kind object;
  #L4b2094.  v0:= instanceof @variable v1 @type ^`char`[] @kind boolean;
  #L4b2098.  if v0 == 0 then goto L4b20aa;
  #L4b209c.  v1:= (`char`[]) v1 @kind object;
  #L4b20a0.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([C)Ljava/lang/String;` @kind static;
  #L4b20a6.  v1:= temp @kind object;
  #L4b20a8.  return v1 @kind object;
  #L4b20aa.  v0:= instanceof @variable v1 @type ^`short`[] @kind boolean;
  #L4b20ae.  if v0 == 0 then goto L4b20c0;
  #L4b20b2.  v1:= (`short`[]) v1 @kind object;
  #L4b20b6.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([S)Ljava/lang/String;` @kind static;
  #L4b20bc.  v1:= temp @kind object;
  #L4b20be.  return v1 @kind object;
  #L4b20c0.  v0:= instanceof @variable v1 @type ^`int`[] @kind boolean;
  #L4b20c4.  if v0 == 0 then goto L4b20d6;
  #L4b20c8.  v1:= (`int`[]) v1 @kind object;
  #L4b20cc.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([I)Ljava/lang/String;` @kind static;
  #L4b20d2.  v1:= temp @kind object;
  #L4b20d4.  return v1 @kind object;
  #L4b20d6.  v0:= instanceof @variable v1 @type ^`long`[] @kind boolean;
  #L4b20da.  if v0 == 0 then goto L4b20ec;
  #L4b20de.  v1:= (`long`[]) v1 @kind object;
  #L4b20e2.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([J)Ljava/lang/String;` @kind static;
  #L4b20e8.  v1:= temp @kind object;
  #L4b20ea.  return v1 @kind object;
  #L4b20ec.  v0:= instanceof @variable v1 @type ^`float`[] @kind boolean;
  #L4b20f0.  if v0 == 0 then goto L4b2102;
  #L4b20f4.  v1:= (`float`[]) v1 @kind object;
  #L4b20f8.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([F)Ljava/lang/String;` @kind static;
  #L4b20fe.  v1:= temp @kind object;
  #L4b2100.  return v1 @kind object;
  #L4b2102.  v0:= instanceof @variable v1 @type ^`double`[] @kind boolean;
  #L4b2106.  if v0 == 0 then goto L4b2118;
  #L4b210a.  v1:= (`double`[]) v1 @kind object;
  #L4b210e.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([D)Ljava/lang/String;` @kind static;
  #L4b2114.  v1:= temp @kind object;
  #L4b2116.  return v1 @kind object;
  #L4b2118.  v0:= instanceof @variable v1 @type ^`java.lang.Object`[] @kind boolean;
  #L4b211c.  if v0 == 0 then goto L4b212e;
  #L4b2120.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L4b2124.  call temp:= `deepToString`(v1) @signature `Ljava/util/Arrays;.deepToString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4b212a.  v1:= temp @kind object;
  #L4b212c.  return v1 @kind object;
  #L4b212e.  v1:= "Couldn't find a correct type for the object" @kind object;
  #L4b2132.  return v1 @kind object;
}
