record `h.f.a.j` @kind class @AccessFlag PUBLIC extends `h.f.a.b` @kind interface {
  `int` `h.f.a.j.a` @AccessFlag PRIVATE_FINAL;
  `int` `h.f.a.j.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `h.f.a.j.c` @AccessFlag PRIVATE_FINAL;
  `h.f.a.d` `h.f.a.j.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `h.f.a.j.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`h.f.a.j` v1 @kind this, `h.f.a.i` v2 @kind object) @signature `Lh/f/a/j;.<init>:(Lh/f/a/i;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4b1c08.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b1c0e.  v0:= v2.`h.f.a.i.a` @type ^`int`;
  #L4b1c12.  v1.`h.f.a.j.a` @type ^`int` := v0;
  #L4b1c16.  v0:= v2.`h.f.a.i.b` @type ^`int`;
  #L4b1c1a.  v1.`h.f.a.j.b` @type ^`int` := v0;
  #L4b1c1e.  v0:= v2.`h.f.a.i.c` @type ^`boolean` @kind boolean;
  #L4b1c22.  v1.`h.f.a.j.c` @type ^`boolean` := v0 @kind boolean;
  #L4b1c26.  v0:= v2.`h.f.a.i.d` @type ^`h.f.a.d` @kind object;
  #L4b1c2a.  v1.`h.f.a.j.d` @type ^`h.f.a.d` := v0 @kind object;
  #L4b1c2e.  v2:= v2.`h.f.a.i.e` @type ^`java.lang.String` @kind object;
  #L4b1c32.  v1.`h.f.a.j.e` @type ^`java.lang.String` := v2 @kind object;
  #L4b1c36.  return @kind void;
}
procedure `void` `<init>`(`h.f.a.j` v0 @kind this, `h.f.a.i` v1 @kind object, `h.f.a.h` v2 @kind object) @signature `Lh/f/a/j;.<init>:(Lh/f/a/i;Lh/f/a/h;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L4b1c48.  call `<init>`(v0, v1) @signature `Lh/f/a/j;.<init>:(Lh/f/a/i;)V` @kind direct;
  #L4b1c4e.  return @kind void;
}
procedure `java.lang.String` `b`(`h.f.a.j` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lh/f/a/j;.b:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4b1b7c.  call temp:= `c`(v3) @signature `Lh/f/a/l;.c:(Ljava/lang/CharSequence;)Z` @kind static;
  #L4b1b82.  v0:= temp;
  #L4b1b84.  if v0 != 0 then goto L4b1bc6;
  #L4b1b88.  v0:= v2.`h.f.a.j.e` @type ^`java.lang.String` @kind object;
  #L4b1b8c.  call temp:= `a`(v0, v3) @signature `Lh/f/a/l;.a:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z` @kind static;
  #L4b1b92.  v0:= temp;
  #L4b1b94.  if v0 != 0 then goto L4b1bc6;
  #L4b1b98.  v0:= new `java.lang.StringBuilder`;
  #L4b1b9c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b1ba2.  v1:= v2.`h.f.a.j.e` @type ^`java.lang.String` @kind object;
  #L4b1ba6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1bac.  v1:= "-" @kind object;
  #L4b1bb0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1bb6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1bbc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b1bc2.  v3:= temp @kind object;
  #L4b1bc4.  return v3 @kind object;
  #L4b1bc6.  v3:= v2.`h.f.a.j.e` @type ^`java.lang.String` @kind object;
  #L4b1bca.  return v3 @kind object;
}
procedure `java.lang.String` `c`(`h.f.a.j` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lh/f/a/j;.c:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4b1bdc.  v0:= "." @kind object;
  #L4b1be0.  call temp:= `lastIndexOf`(v2, v0) @signature `Ljava/lang/String;.lastIndexOf:(Ljava/lang/String;)I` @kind virtual;
  #L4b1be6.  v0:= temp;
  #L4b1be8.  v0:= v0 + 1;
  #L4b1bec.  call temp:= `substring`(v2, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L4b1bf2.  v2:= temp @kind object;
  #L4b1bf4.  return v2 @kind object;
}
procedure `int` `d`(`h.f.a.j` v4 @kind this, `java.lang.StackTraceElement`[] v5 @kind object) @signature `Lh/f/a/j;.d:([Ljava/lang/StackTraceElement;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b1b18.  v0:= 5I;
  #L4b1b1a.  v1:= length @variable v5;
  #L4b1b1c.  v2:= -1I;
  #L4b1b1e.  if v0 >= v1 then goto L4b1b68;
  #L4b1b22.  v1:= v5[v0] @kind object;
  #L4b1b26.  call temp:= `getClassName`(v1) @signature `Ljava/lang/StackTraceElement;.getClassName:()Ljava/lang/String;` @kind virtual;
  #L4b1b2c.  v1:= temp @kind object;
  #L4b1b2e.  v3:= constclass @type ^`h.f.a.g` @kind object;
  #L4b1b32.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L4b1b38.  v3:= temp @kind object;
  #L4b1b3a.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b1b40.  v3:= temp;
  #L4b1b42.  if v3 != 0 then goto L4b1b62;
  #L4b1b46.  v3:= constclass @type ^`h.f.a.f` @kind object;
  #L4b1b4a.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L4b1b50.  v3:= temp @kind object;
  #L4b1b52.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b1b58.  v1:= temp;
  #L4b1b5a.  if v1 != 0 then goto L4b1b62;
  #L4b1b5e.  v0:= v0 + v2 @kind int;
  #L4b1b60.  return v0;
  #L4b1b62.  v0:= v0 + 1;
  #L4b1b66.  goto L4b1b1a;
  #L4b1b68.  return v2;
}
procedure `void` `e`(`h.f.a.j` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lh/f/a/j;.e:(ILjava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4b1cf4.  v0:= "└────────────────────────────────────────────────────────────────────────────────────────────────────────────────" @kind object;
  #L4b1cf8.  call `f`(v1, v2, v3, v0) @signature `Lh/f/a/j;.f:(ILjava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4b1cfe.  return @kind void;
}
procedure `void` `f`(`h.f.a.j` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lh/f/a/j;.f:(ILjava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4b1d10.  v0:= v1.`h.f.a.j.d` @type ^`h.f.a.d` @kind object;
  #L4b1d14.  call `a`(v0, v2, v3, v4) @signature `Lh/f/a/d;.a:(ILjava/lang/String;Ljava/lang/String;)V` @kind interface;
  #L4b1d1a.  return @kind void;
}
procedure `void` `g`(`h.f.a.j` v5 @kind this, `int` v6 , `java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lh/f/a/j;.g:(ILjava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b1d2c.  v0:= "line.separator" @kind object;
  #L4b1d30.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4b1d36.  v0:= temp @kind object;
  #L4b1d38.  call temp:= `split`(v8, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L4b1d3e.  v8:= temp @kind object;
  #L4b1d40.  v0:= length @variable v8;
  #L4b1d42.  v1:= 0I;
  #L4b1d44.  if v1 >= v0 then goto L4b1d7a;
  #L4b1d48.  v2:= v8[v1] @kind object;
  #L4b1d4c.  v3:= new `java.lang.StringBuilder`;
  #L4b1d50.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b1d56.  v4:= "│ " @kind object;
  #L4b1d5a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1d60.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1d66.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b1d6c.  v2:= temp @kind object;
  #L4b1d6e.  call `f`(v5, v6, v7, v2) @signature `Lh/f/a/j;.f:(ILjava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4b1d74.  v1:= v1 + 1;
  #L4b1d78.  goto L4b1d44;
  #L4b1d7a.  return @kind void;
}
procedure `void` `h`(`h.f.a.j` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lh/f/a/j;.h:(ILjava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4b1d8c.  v0:= "├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄" @kind object;
  #L4b1d90.  call `f`(v1, v2, v3, v0) @signature `Lh/f/a/j;.f:(ILjava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4b1d96.  return @kind void;
}
procedure `void` `i`(`h.f.a.j` v6 @kind this, `int` v7 , `java.lang.String` v8 @kind object, `int` v9 ) @signature `Lh/f/a/j;.i:(ILjava/lang/String;I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b1da8.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4b1dae.  v0:= temp @kind object;
  #L4b1db0.  call temp:= `getStackTrace`(v0) @signature `Ljava/lang/Thread;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L4b1db6.  v0:= temp @kind object;
  #L4b1db8.  v1:= v6.`h.f.a.j.c` @type ^`boolean` @kind boolean;
  #L4b1dbc.  if v1 == 0 then goto L4b1dfe;
  #L4b1dc0.  v1:= new `java.lang.StringBuilder`;
  #L4b1dc4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b1dca.  v2:= "│ Thread: " @kind object;
  #L4b1dce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1dd4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4b1dda.  v2:= temp @kind object;
  #L4b1ddc.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L4b1de2.  v2:= temp @kind object;
  #L4b1de4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1dea.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b1df0.  v1:= temp @kind object;
  #L4b1df2.  call `f`(v6, v7, v8, v1) @signature `Lh/f/a/j;.f:(ILjava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4b1df8.  call `h`(v6, v7, v8) @signature `Lh/f/a/j;.h:(ILjava/lang/String;)V` @kind direct;
  #L4b1dfe.  call temp:= `d`(v6, v0) @signature `Lh/f/a/j;.d:([Ljava/lang/StackTraceElement;)I` @kind direct;
  #L4b1e04.  v1:= temp;
  #L4b1e06.  v2:= v6.`h.f.a.j.b` @type ^`int`;
  #L4b1e0a.  v1:= v1 + v2 @kind int;
  #L4b1e0c.  v2:= v9 + v1 @kind int;
  #L4b1e10.  v3:= length @variable v0;
  #L4b1e12.  if v2 <= v3 then goto L4b1e1e;
  #L4b1e16.  v9:= length @variable v0;
  #L4b1e18.  v9:= v9 - v1 @kind int;
  #L4b1e1a.  v9:= v9 + -1;
  #L4b1e1e.  v2:= "" @kind object;
  #L4b1e22.  if v9 <= 0 then goto L4b1f0e;
  #L4b1e26.  v3:= v9 + v1 @kind int;
  #L4b1e2a.  v4:= length @variable v0;
  #L4b1e2c.  if v3 < v4 then goto L4b1e32;
  #L4b1e30.  goto L4b1f08;
  #L4b1e32.  v4:= new `java.lang.StringBuilder`;
  #L4b1e36.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b1e3c.  v5:= 9474I;
  #L4b1e40.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1e46.  v5:= 32I;
  #L4b1e4a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1e50.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1e56.  v5:= v0[v3] @kind object;
  #L4b1e5a.  call temp:= `getClassName`(v5) @signature `Ljava/lang/StackTraceElement;.getClassName:()Ljava/lang/String;` @kind virtual;
  #L4b1e60.  v5:= temp @kind object;
  #L4b1e62.  call temp:= `c`(v6, v5) @signature `Lh/f/a/j;.c:(Ljava/lang/String;)Ljava/lang/String;` @kind direct;
  #L4b1e68.  v5:= temp @kind object;
  #L4b1e6a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1e70.  v5:= "." @kind object;
  #L4b1e74.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1e7a.  v5:= v0[v3] @kind object;
  #L4b1e7e.  call temp:= `getMethodName`(v5) @signature `Ljava/lang/StackTraceElement;.getMethodName:()Ljava/lang/String;` @kind virtual;
  #L4b1e84.  v5:= temp @kind object;
  #L4b1e86.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1e8c.  v5:= " " @kind object;
  #L4b1e90.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1e96.  v5:= " (" @kind object;
  #L4b1e9a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1ea0.  v5:= v0[v3] @kind object;
  #L4b1ea4.  call temp:= `getFileName`(v5) @signature `Ljava/lang/StackTraceElement;.getFileName:()Ljava/lang/String;` @kind virtual;
  #L4b1eaa.  v5:= temp @kind object;
  #L4b1eac.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1eb2.  v5:= ":" @kind object;
  #L4b1eb6.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1ebc.  v3:= v0[v3] @kind object;
  #L4b1ec0.  call temp:= `getLineNumber`(v3) @signature `Ljava/lang/StackTraceElement;.getLineNumber:()I` @kind virtual;
  #L4b1ec6.  v3:= temp;
  #L4b1ec8.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1ece.  v3:= ")" @kind object;
  #L4b1ed2.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1ed8.  v3:= new `java.lang.StringBuilder`;
  #L4b1edc.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b1ee2.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1ee8.  v2:= "   " @kind object;
  #L4b1eec.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1ef2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b1ef8.  v2:= temp @kind object;
  #L4b1efa.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b1f00.  v3:= temp @kind object;
  #L4b1f02.  call `f`(v6, v7, v8, v3) @signature `Lh/f/a/j;.f:(ILjava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4b1f08.  v9:= v9 + -1;
  #L4b1f0c.  goto L4b1e22;
  #L4b1f0e.  return @kind void;
}
procedure `void` `j`(`h.f.a.j` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lh/f/a/j;.j:(ILjava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4b1f20.  v0:= "┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────" @kind object;
  #L4b1f24.  call `f`(v1, v2, v3, v0) @signature `Lh/f/a/j;.f:(ILjava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4b1f2a.  return @kind void;
}
procedure `h.f.a.i` `k`() @signature `Lh/f/a/j;.k:()Lh/f/a/i;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4b1af8.  v0:= new `h.f.a.i`;
  #L4b1afc.  v1:= 0I;
  #L4b1afe.  call `<init>`(v0, v1) @signature `Lh/f/a/i;.<init>:(Lh/f/a/h;)V` @kind direct;
  #L4b1b04.  return v0 @kind object;
}
procedure `void` `a`(`h.f.a.j` v5 @kind this, `int` v6 , `java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lh/f/a/j;.a:(ILjava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b1c60.  call temp:= `b`(v5, v7) @signature `Lh/f/a/j;.b:(Ljava/lang/String;)Ljava/lang/String;` @kind direct;
  #L4b1c66.  v7:= temp @kind object;
  #L4b1c68.  call `j`(v5, v6, v7) @signature `Lh/f/a/j;.j:(ILjava/lang/String;)V` @kind direct;
  #L4b1c6e.  v0:= v5.`h.f.a.j.a` @type ^`int`;
  #L4b1c72.  call `i`(v5, v6, v7, v0) @signature `Lh/f/a/j;.i:(ILjava/lang/String;I)V` @kind direct;
  #L4b1c78.  call temp:= `getBytes`(v8) @signature `Ljava/lang/String;.getBytes:()[B` @kind virtual;
  #L4b1c7e.  v0:= temp @kind object;
  #L4b1c80.  v1:= length @variable v0;
  #L4b1c82.  v2:= 4000I;
  #L4b1c86.  if v1 > v2 then goto L4b1ca6;
  #L4b1c8a.  v0:= v5.`h.f.a.j.a` @type ^`int`;
  #L4b1c8e.  if v0 <= 0 then goto L4b1c98;
  #L4b1c92.  call `h`(v5, v6, v7) @signature `Lh/f/a/j;.h:(ILjava/lang/String;)V` @kind direct;
  #L4b1c98.  call `g`(v5, v6, v7, v8) @signature `Lh/f/a/j;.g:(ILjava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4b1c9e.  call `e`(v5, v6, v7) @signature `Lh/f/a/j;.e:(ILjava/lang/String;)V` @kind direct;
  #L4b1ca4.  return @kind void;
  #L4b1ca6.  v8:= v5.`h.f.a.j.a` @type ^`int`;
  #L4b1caa.  if v8 <= 0 then goto L4b1cb4;
  #L4b1cae.  call `h`(v5, v6, v7) @signature `Lh/f/a/j;.h:(ILjava/lang/String;)V` @kind direct;
  #L4b1cb4.  v8:= 0I;
  #L4b1cb6.  if v8 >= v1 then goto L4b1cdc;
  #L4b1cba.  v3:= v1 - v8 @kind int;
  #L4b1cbe.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4b1cc4.  v3:= temp;
  #L4b1cc6.  v4:= new `java.lang.String`;
  #L4b1cca.  call `<init>`(v4, v0, v8, v3) @signature `Ljava/lang/String;.<init>:([BII)V` @kind direct;
  #L4b1cd0.  call `g`(v5, v6, v7, v4) @signature `Lh/f/a/j;.g:(ILjava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4b1cd6.  v8:= v8 + 4000;
  #L4b1cda.  goto L4b1cb6;
  #L4b1cdc.  call `e`(v5, v6, v7) @signature `Lh/f/a/j;.e:(ILjava/lang/String;)V` @kind direct;
  #L4b1ce2.  return @kind void;
}
