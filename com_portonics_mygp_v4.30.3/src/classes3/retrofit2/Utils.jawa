record `retrofit2.Utils` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Type`[] `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/Utils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L36ea8c.  v0:= 0I;
  #L36ea8e.  v0:= new `java.lang.reflect.Type`[v0];
  #L36ea92.  `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L36ea96.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Utils` v0 @kind this) @signature `Lretrofit2/Utils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L36eaa8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36eaae.  return @kind void;
}
procedure `okhttp3.ResponseBody` `buffer`(`okhttp3.ResponseBody` v4 @kind object) @signature `Lretrofit2/Utils;.buffer:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L36ea48.  v0:= new `okio.k`;
  #L36ea4c.  call `<init>`(v0) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L36ea52.  call temp:= `source`(v4) @signature `Lokhttp3/ResponseBody;.source:()Lokio/o;` @kind virtual;
  #L36ea58.  v1:= temp @kind object;
  #L36ea5a.  call temp:= `y0`(v1, v0) @signature `Lokio/o;.y0:(Lokio/g0;)J` @kind interface;
  #L36ea60.  call temp:= `contentType`(v4) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L36ea66.  v1:= temp @kind object;
  #L36ea68.  call temp:= `contentLength`(v4) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L36ea6e.  v2:= temp @kind wide;
  #L36ea70.  call temp:= `create`(v1, v2, v0) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;JLokio/o;)Lokhttp3/ResponseBody;` @kind static;
  #L36ea76.  v4:= temp @kind object;
  #L36ea78.  return v4 @kind object;
}
procedure `void` `checkNotPrimitive`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L36eac0.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L36eac4.  if v0 == 0 then goto L36eae6;
  #L36eac8.  v1:= (`java.lang.Class`) v1 @kind object;
  #L36eacc.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L36ead2.  v1:= temp;
  #L36ead4.  if v1 != 0 then goto L36eada;
  #L36ead8.  goto L36eae6;
  #L36eada.  v1:= new `java.lang.IllegalArgumentException`;
  #L36eade.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L36eae4.  throw v1;
  #L36eae6.  return @kind void;
}
procedure `java.lang.Class` `declaringClassOf`(`java.lang.reflect.TypeVariable` v1 @kind object) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L36e3d8.  call temp:= `getGenericDeclaration`(v1) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L36e3de.  v1:= temp @kind object;
  #L36e3e0.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L36e3e4.  if v0 == 0 then goto L36e3ee;
  #L36e3e8.  v1:= (`java.lang.Class`) v1 @kind object;
  #L36e3ec.  goto L36e3f0;
  #L36e3ee.  v1:= 0I;
  #L36e3f0.  return v1 @kind object;
}
procedure `boolean` `equals`(`java.lang.reflect.Type` v4 @kind object, `java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L36e0f4.  v0:= 1I;
  #L36e0f6.  if v4 != v5 then goto L36e0fc;
  #L36e0fa.  return v0;
  #L36e0fc.  v1:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L36e100.  if v1 == 0 then goto L36e10e;
  #L36e104.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L36e10a.  v4:= temp;
  #L36e10c.  return v4;
  #L36e10e.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L36e112.  v2:= 0I;
  #L36e114.  if v1 == 0 then goto L36e18c;
  #L36e118.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L36e11c.  if v1 != 0 then goto L36e122;
  #L36e120.  return v2;
  #L36e122.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L36e126.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L36e12a.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e130.  v1:= temp @kind object;
  #L36e132.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e138.  v3:= temp @kind object;
  #L36e13a.  if v1 == v3 then goto L36e14e;
  #L36e13e.  if v1 == 0 then goto L36e188;
  #L36e142.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L36e148.  v1:= temp;
  #L36e14a.  if v1 == 0 then goto L36e188;
  #L36e14e.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e154.  v1:= temp @kind object;
  #L36e156.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e15c.  v3:= temp @kind object;
  #L36e15e.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L36e164.  v1:= temp;
  #L36e166.  if v1 == 0 then goto L36e188;
  #L36e16a.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e170.  v4:= temp @kind object;
  #L36e172.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e178.  v5:= temp @kind object;
  #L36e17a.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L36e180.  v4:= temp;
  #L36e182.  if v4 == 0 then goto L36e188;
  #L36e186.  goto L36e18a;
  #L36e188.  v0:= 0I;
  #L36e18a.  return v0;
  #L36e18c.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L36e190.  if v1 == 0 then goto L36e1c0;
  #L36e194.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L36e198.  if v0 != 0 then goto L36e19e;
  #L36e19c.  return v2;
  #L36e19e.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L36e1a2.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L36e1a6.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e1ac.  v4:= temp @kind object;
  #L36e1ae.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e1b4.  v5:= temp @kind object;
  #L36e1b6.  call temp:= `equals`(v4, v5) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L36e1bc.  v4:= temp;
  #L36e1be.  return v4;
  #L36e1c0.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L36e1c4.  if v1 == 0 then goto L36e218;
  #L36e1c8.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L36e1cc.  if v1 != 0 then goto L36e1d2;
  #L36e1d0.  return v2;
  #L36e1d2.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L36e1d6.  v5:= (`java.lang.reflect.WildcardType`) v5 @kind object;
  #L36e1da.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e1e0.  v1:= temp @kind object;
  #L36e1e2.  call temp:= `getUpperBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e1e8.  v3:= temp @kind object;
  #L36e1ea.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L36e1f0.  v1:= temp;
  #L36e1f2.  if v1 == 0 then goto L36e214;
  #L36e1f6.  call temp:= `getLowerBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e1fc.  v4:= temp @kind object;
  #L36e1fe.  call temp:= `getLowerBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e204.  v5:= temp @kind object;
  #L36e206.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L36e20c.  v4:= temp;
  #L36e20e.  if v4 == 0 then goto L36e214;
  #L36e212.  goto L36e216;
  #L36e214.  v0:= 0I;
  #L36e216.  return v0;
  #L36e218.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L36e21c.  if v1 == 0 then goto L36e268;
  #L36e220.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L36e224.  if v1 != 0 then goto L36e22a;
  #L36e228.  return v2;
  #L36e22a.  v4:= (`java.lang.reflect.TypeVariable`) v4 @kind object;
  #L36e22e.  v5:= (`java.lang.reflect.TypeVariable`) v5 @kind object;
  #L36e232.  call temp:= `getGenericDeclaration`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L36e238.  v1:= temp @kind object;
  #L36e23a.  call temp:= `getGenericDeclaration`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L36e240.  v3:= temp @kind object;
  #L36e242.  if v1 != v3 then goto L36e264;
  #L36e246.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L36e24c.  v4:= temp @kind object;
  #L36e24e.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L36e254.  v5:= temp @kind object;
  #L36e256.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L36e25c.  v4:= temp;
  #L36e25e.  if v4 == 0 then goto L36e264;
  #L36e262.  goto L36e266;
  #L36e264.  v0:= 0I;
  #L36e266.  return v0;
  #L36e268.  return v2;
}
procedure `java.lang.reflect.Type` `getGenericSupertype`(`java.lang.reflect.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L36e668.  if v5 != v4 then goto L36e66e;
  #L36e66c.  return v3 @kind object;
  #L36e66e.  call temp:= `isInterface`(v5) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L36e674.  v3:= temp;
  #L36e676.  if v3 == 0 then goto L36e6d0;
  #L36e67a.  call temp:= `getInterfaces`(v4) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L36e680.  v3:= temp @kind object;
  #L36e682.  v0:= 0I;
  #L36e684.  v1:= length @variable v3;
  #L36e686.  if v0 >= v1 then goto L36e6d0;
  #L36e68a.  v2:= v3[v0] @kind object;
  #L36e68e.  if v2 != v5 then goto L36e6a0;
  #L36e692.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L36e698.  v3:= temp @kind object;
  #L36e69a.  v3:= v3[v0] @kind object;
  #L36e69e.  return v3 @kind object;
  #L36e6a0.  v2:= v3[v0] @kind object;
  #L36e6a4.  call temp:= `isAssignableFrom`(v5, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L36e6aa.  v2:= temp;
  #L36e6ac.  if v2 == 0 then goto L36e6ca;
  #L36e6b0.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L36e6b6.  v4:= temp @kind object;
  #L36e6b8.  v4:= v4[v0] @kind object;
  #L36e6bc.  v3:= v3[v0] @kind object;
  #L36e6c0.  call temp:= `getGenericSupertype`(v4, v3, v5) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L36e6c6.  v3:= temp @kind object;
  #L36e6c8.  return v3 @kind object;
  #L36e6ca.  v0:= v0 + 1;
  #L36e6ce.  goto L36e686;
  #L36e6d0.  call temp:= `isInterface`(v4) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L36e6d6.  v3:= temp;
  #L36e6d8.  if v3 != 0 then goto L36e71c;
  #L36e6dc.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L36e6e0.  if v4 == v3 then goto L36e71c;
  #L36e6e4.  call temp:= `getSuperclass`(v4) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L36e6ea.  v3:= temp @kind object;
  #L36e6ec.  if v3 != v5 then goto L36e6fa;
  #L36e6f0.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L36e6f6.  v3:= temp @kind object;
  #L36e6f8.  return v3 @kind object;
  #L36e6fa.  call temp:= `isAssignableFrom`(v5, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L36e700.  v0:= temp;
  #L36e702.  if v0 == 0 then goto L36e718;
  #L36e706.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L36e70c.  v4:= temp @kind object;
  #L36e70e.  call temp:= `getGenericSupertype`(v4, v3, v5) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L36e714.  v3:= temp @kind object;
  #L36e716.  return v3 @kind object;
  #L36e718.  v4:= v3 @kind object;
  #L36e71a.  goto L36e6dc;
  #L36e71c.  return v5 @kind object;
}
procedure `java.lang.reflect.Type` `getParameterLowerBound`(`int` v0 , `java.lang.reflect.ParameterizedType` v1 @kind object) @signature `Lretrofit2/Utils;.getParameterLowerBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;

  #L36e730.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e736.  v1:= temp @kind object;
  #L36e738.  v0:= v1[v0] @kind object;
  #L36e73c.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L36e740.  if v1 == 0 then goto L36e756;
  #L36e744.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L36e748.  call temp:= `getLowerBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e74e.  v0:= temp @kind object;
  #L36e750.  v1:= 0I;
  #L36e752.  v0:= v0[v1] @kind object;
  #L36e756.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`int` v4 , `java.lang.reflect.ParameterizedType` v5 @kind object) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L36e768.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e76e.  v0:= temp @kind object;
  #L36e770.  if v4 < 0 then goto L36e79a;
  #L36e774.  v1:= length @variable v0;
  #L36e776.  if v4 >= v1 then goto L36e79a;
  #L36e77a.  v4:= v0[v4] @kind object;
  #L36e77e.  v5:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L36e782.  if v5 == 0 then goto L36e798;
  #L36e786.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L36e78a.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e790.  v4:= temp @kind object;
  #L36e792.  v5:= 0I;
  #L36e794.  v4:= v4[v5] @kind object;
  #L36e798.  return v4 @kind object;
  #L36e79a.  v1:= new `java.lang.IllegalArgumentException`;
  #L36e79e.  v2:= new `java.lang.StringBuilder`;
  #L36e7a2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36e7a8.  v3:= "Index " @kind object;
  #L36e7ac.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e7b2.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e7b8.  v4:= " not in range [0," @kind object;
  #L36e7bc.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e7c2.  v4:= length @variable v0;
  #L36e7c4.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e7ca.  v4:= ") for " @kind object;
  #L36e7ce.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e7d4.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e7da.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36e7e0.  v4:= temp @kind object;
  #L36e7e2.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36e7e8.  throw v1;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v3 @kind object) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L36e404.  v0:= "type == null" @kind object;
  #L36e408.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36e40e.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L36e412.  if v0 == 0 then goto L36e41c;
  #L36e416.  v3:= (`java.lang.Class`) v3 @kind object;
  #L36e41a.  return v3 @kind object;
  #L36e41c.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L36e420.  if v0 == 0 then goto L36e44a;
  #L36e424.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L36e428.  call temp:= `getRawType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e42e.  v3:= temp @kind object;
  #L36e430.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L36e434.  if v0 == 0 then goto L36e43e;
  #L36e438.  v3:= (`java.lang.Class`) v3 @kind object;
  #L36e43c.  return v3 @kind object;
  #L36e43e.  v3:= new `java.lang.IllegalArgumentException`;
  #L36e442.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L36e448.  throw v3;
  #L36e44a.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L36e44e.  v1:= 0I;
  #L36e450.  if v0 == 0 then goto L36e47a;
  #L36e454.  v3:= (`java.lang.reflect.GenericArrayType`) v3 @kind object;
  #L36e458.  call temp:= `getGenericComponentType`(v3) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e45e.  v3:= temp @kind object;
  #L36e460.  call temp:= `getRawType`(v3) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L36e466.  v3:= temp @kind object;
  #L36e468.  call temp:= `newInstance`(v3, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L36e46e.  v3:= temp @kind object;
  #L36e470.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L36e476.  v3:= temp @kind object;
  #L36e478.  return v3 @kind object;
  #L36e47a.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L36e47e.  if v0 == 0 then goto L36e488;
  #L36e482.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L36e486.  return v3 @kind object;
  #L36e488.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L36e48c.  if v0 == 0 then goto L36e4aa;
  #L36e490.  v3:= (`java.lang.reflect.WildcardType`) v3 @kind object;
  #L36e494.  call temp:= `getUpperBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e49a.  v3:= temp @kind object;
  #L36e49c.  v3:= v3[v1] @kind object;
  #L36e4a0.  call temp:= `getRawType`(v3) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L36e4a6.  v3:= temp @kind object;
  #L36e4a8.  return v3 @kind object;
  #L36e4aa.  v0:= new `java.lang.IllegalArgumentException`;
  #L36e4ae.  v1:= new `java.lang.StringBuilder`;
  #L36e4b2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36e4b8.  v2:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L36e4bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e4c2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e4c8.  v2:= "> is of type " @kind object;
  #L36e4cc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e4d2.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L36e4d8.  v3:= temp @kind object;
  #L36e4da.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L36e4e0.  v3:= temp @kind object;
  #L36e4e2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e4e8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36e4ee.  v3:= temp @kind object;
  #L36e4f0.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36e4f6.  throw v0;
}
procedure `java.lang.reflect.Type` `getSupertype`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L36e7fc.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L36e802.  v0:= temp;
  #L36e804.  if v0 == 0 then goto L36e81a;
  #L36e808.  call temp:= `getGenericSupertype`(v1, v2, v3) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L36e80e.  v3:= temp @kind object;
  #L36e810.  call temp:= `resolve`(v1, v2, v3) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L36e816.  v1:= temp @kind object;
  #L36e818.  return v1 @kind object;
  #L36e81a.  v1:= new `java.lang.IllegalArgumentException`;
  #L36e81e.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L36e824.  throw v1;
}
procedure `boolean` `hasUnresolvableType`(`java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L36e27c.  v0:= instanceof @variable v5 @type ^`java.lang.Class` @kind boolean;
  #L36e280.  v1:= 0I;
  #L36e282.  if v0 == 0 then goto L36e288;
  #L36e286.  return v1;
  #L36e288.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L36e28c.  v2:= 1I;
  #L36e28e.  if v0 == 0 then goto L36e2c0;
  #L36e292.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L36e296.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e29c.  v5:= temp @kind object;
  #L36e29e.  v0:= length @variable v5;
  #L36e2a0.  v3:= 0I;
  #L36e2a2.  if v3 >= v0 then goto L36e2be;
  #L36e2a6.  v4:= v5[v3] @kind object;
  #L36e2aa.  call temp:= `hasUnresolvableType`(v4) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L36e2b0.  v4:= temp;
  #L36e2b2.  if v4 == 0 then goto L36e2b8;
  #L36e2b6.  return v2;
  #L36e2b8.  v3:= v3 + 1;
  #L36e2bc.  goto L36e2a2;
  #L36e2be.  return v1;
  #L36e2c0.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L36e2c4.  if v0 == 0 then goto L36e2de;
  #L36e2c8.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L36e2cc.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e2d2.  v5:= temp @kind object;
  #L36e2d4.  call temp:= `hasUnresolvableType`(v5) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L36e2da.  v5:= temp;
  #L36e2dc.  return v5;
  #L36e2de.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L36e2e2.  if v0 == 0 then goto L36e2e8;
  #L36e2e6.  return v2;
  #L36e2e8.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L36e2ec.  if v0 == 0 then goto L36e2f2;
  #L36e2f0.  return v2;
  #L36e2f2.  if v5 != 0 then goto L36e2fc;
  #L36e2f6.  v0:= "null" @kind object;
  #L36e2fa.  goto L36e30c;
  #L36e2fc.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L36e302.  v0:= temp @kind object;
  #L36e304.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L36e30a.  v0:= temp @kind object;
  #L36e30c.  v1:= new `java.lang.IllegalArgumentException`;
  #L36e310.  v2:= new `java.lang.StringBuilder`;
  #L36e314.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36e31a.  v3:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L36e31e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e324.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e32a.  v5:= "> is of type " @kind object;
  #L36e32e.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e334.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e33a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36e340.  v5:= temp @kind object;
  #L36e342.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36e348.  goto L36e34c;
  #L36e34a.  throw v1;
  #L36e34c.  goto L36e34a;
}
procedure `int` `indexOf`(`java.lang.Object`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L36e398.  v0:= 0I;
  #L36e39a.  v1:= length @variable v2;
  #L36e39c.  if v0 >= v1 then goto L36e3b8;
  #L36e3a0.  v1:= v2[v0] @kind object;
  #L36e3a4.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L36e3aa.  v1:= temp;
  #L36e3ac.  if v1 == 0 then goto L36e3b2;
  #L36e3b0.  return v0;
  #L36e3b2.  v0:= v0 + 1;
  #L36e3b6.  goto L36e39a;
  #L36e3b8.  v2:= new `java.util.NoSuchElementException`;
  #L36e3bc.  call `<init>`(v2) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L36e3c2.  goto L36e3c6;
  #L36e3c4.  throw v2;
  #L36e3c6.  goto L36e3c4;
}
procedure `boolean` `isAnnotationPresent`(`java.lang.annotation.Annotation`[] v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lretrofit2/Utils;.isAnnotationPresent:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L36e360.  v0:= length @variable v4;
  #L36e362.  v1:= 0I;
  #L36e364.  v2:= 0I;
  #L36e366.  if v2 >= v0 then goto L36e384;
  #L36e36a.  v3:= v4[v2] @kind object;
  #L36e36e.  call temp:= `isInstance`(v5, v3) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L36e374.  v3:= temp;
  #L36e376.  if v3 == 0 then goto L36e37e;
  #L36e37a.  v4:= 1I;
  #L36e37c.  return v4;
  #L36e37e.  v2:= v2 + 1;
  #L36e382.  goto L36e366;
  #L36e384.  return v1;
}
procedure `java.lang.RuntimeException` `methodError`(`java.lang.reflect.Method` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L36e508.  v0:= 0I;
  #L36e50a.  call temp:= `methodError`(v1, v0, v2, v3) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L36e510.  v1:= temp @kind object;
  #L36e512.  return v1 @kind object;
}
procedure `java.lang.RuntimeException` `methodError`(`java.lang.reflect.Method` v1 @kind object, `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L36e524.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L36e52a.  v3:= temp @kind object;
  #L36e52c.  v4:= new `java.lang.IllegalArgumentException`;
  #L36e530.  v0:= new `java.lang.StringBuilder`;
  #L36e534.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36e53a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e540.  v3:= "\n    for method " @kind object;
  #L36e544.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e54a.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L36e550.  v3:= temp @kind object;
  #L36e552.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L36e558.  v3:= temp @kind object;
  #L36e55a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e560.  v3:= "." @kind object;
  #L36e564.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e56a.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L36e570.  v1:= temp @kind object;
  #L36e572.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e578.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36e57e.  v1:= temp @kind object;
  #L36e580.  call `<init>`(v4, v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L36e586.  return v4 @kind object;
}
procedure `java.lang.RuntimeException` `parameterError`(`java.lang.reflect.Method` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L36e598.  v0:= new `java.lang.StringBuilder`;
  #L36e59c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36e5a2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e5a8.  v3:= " (parameter #" @kind object;
  #L36e5ac.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e5b2.  v2:= v2 + 1;
  #L36e5b6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e5bc.  v2:= ")" @kind object;
  #L36e5c0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e5c6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36e5cc.  v2:= temp @kind object;
  #L36e5ce.  call temp:= `methodError`(v1, v2, v4) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L36e5d4.  v1:= temp @kind object;
  #L36e5d6.  return v1 @kind object;
}
procedure `java.lang.RuntimeException` `parameterError`(`java.lang.reflect.Method` v1 @kind object, `java.lang.Throwable` v2 @kind object, `int` v3 , `java.lang.String` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L36e5e8.  v0:= new `java.lang.StringBuilder`;
  #L36e5ec.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36e5f2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e5f8.  v4:= " (parameter #" @kind object;
  #L36e5fc.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e602.  v3:= v3 + 1;
  #L36e606.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e60c.  v3:= ")" @kind object;
  #L36e610.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36e616.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36e61c.  v3:= temp @kind object;
  #L36e61e.  call temp:= `methodError`(v1, v2, v3, v5) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L36e624.  v1:= temp @kind object;
  #L36e626.  return v1 @kind object;
}
procedure `java.lang.reflect.Type` `resolve`(`java.lang.reflect.Type` v8 @kind object, `java.lang.Class` v9 @kind object, `java.lang.reflect.Type` v10 @kind object) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L36e838.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L36e83c.  if v0 == 0 then goto L36e856;
  #L36e840.  v10:= (`java.lang.reflect.TypeVariable`) v10 @kind object;
  #L36e844.  call temp:= `resolveTypeVariable`(v8, v9, v10) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L36e84a.  v0:= temp @kind object;
  #L36e84c.  if v0 != v10 then goto L36e852;
  #L36e850.  return v0 @kind object;
  #L36e852.  v10:= v0 @kind object;
  #L36e854.  goto L36e838;
  #L36e856.  v0:= instanceof @variable v10 @type ^`java.lang.Class` @kind boolean;
  #L36e85a.  if v0 == 0 then goto L36e892;
  #L36e85e.  v0:= v10 @kind object;
  #L36e860.  v0:= (`java.lang.Class`) v0 @kind object;
  #L36e864.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L36e86a.  v1:= temp;
  #L36e86c.  if v1 == 0 then goto L36e892;
  #L36e870.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L36e876.  v10:= temp @kind object;
  #L36e878.  call temp:= `resolve`(v8, v9, v10) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L36e87e.  v8:= temp @kind object;
  #L36e880.  if v10 != v8 then goto L36e886;
  #L36e884.  goto L36e890;
  #L36e886.  v0:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L36e88a.  call `<init>`(v0, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L36e890.  return v0 @kind object;
  #L36e892.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L36e896.  if v0 == 0 then goto L36e8c0;
  #L36e89a.  v10:= (`java.lang.reflect.GenericArrayType`) v10 @kind object;
  #L36e89e.  call temp:= `getGenericComponentType`(v10) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e8a4.  v0:= temp @kind object;
  #L36e8a6.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L36e8ac.  v8:= temp @kind object;
  #L36e8ae.  if v0 != v8 then goto L36e8b4;
  #L36e8b2.  goto L36e8be;
  #L36e8b4.  v10:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L36e8b8.  call `<init>`(v10, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L36e8be.  return v10 @kind object;
  #L36e8c0.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L36e8c4.  v1:= 1I;
  #L36e8c6.  v2:= 0I;
  #L36e8c8.  if v0 == 0 then goto L36e944;
  #L36e8cc.  v10:= (`java.lang.reflect.ParameterizedType`) v10 @kind object;
  #L36e8d0.  call temp:= `getOwnerType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e8d6.  v0:= temp @kind object;
  #L36e8d8.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L36e8de.  v3:= temp @kind object;
  #L36e8e0.  if v3 == v0 then goto L36e8e8;
  #L36e8e4.  v0:= 1I;
  #L36e8e6.  goto L36e8ea;
  #L36e8e8.  v0:= 0I;
  #L36e8ea.  call temp:= `getActualTypeArguments`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e8f0.  v4:= temp @kind object;
  #L36e8f2.  v5:= length @variable v4;
  #L36e8f4.  if v2 >= v5 then goto L36e92a;
  #L36e8f8.  v6:= v4[v2] @kind object;
  #L36e8fc.  call temp:= `resolve`(v8, v9, v6) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L36e902.  v6:= temp @kind object;
  #L36e904.  v7:= v4[v2] @kind object;
  #L36e908.  if v6 == v7 then goto L36e924;
  #L36e90c.  if v0 != 0 then goto L36e920;
  #L36e910.  call temp:= `clone`(v4) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L36e916.  v0:= temp @kind object;
  #L36e918.  v4:= v0 @kind object;
  #L36e91a.  v4:= (`java.lang.reflect.Type`[]) v4 @kind object;
  #L36e91e.  v0:= 1I;
  #L36e920.  v4[v2]:= v6 @kind object;
  #L36e924.  v2:= v2 + 1;
  #L36e928.  goto L36e8f4;
  #L36e92a.  if v0 == 0 then goto L36e942;
  #L36e92e.  v8:= new `retrofit2.Utils$ParameterizedTypeImpl`;
  #L36e932.  call temp:= `getRawType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L36e938.  v9:= temp @kind object;
  #L36e93a.  call `<init>`(v8, v3, v9, v4) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L36e940.  v10:= v8 @kind object;
  #L36e942.  return v10 @kind object;
  #L36e944.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L36e948.  if v0 == 0 then goto L36e9cc;
  #L36e94c.  v10:= (`java.lang.reflect.WildcardType`) v10 @kind object;
  #L36e950.  call temp:= `getLowerBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e956.  v0:= temp @kind object;
  #L36e958.  call temp:= `getUpperBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36e95e.  v3:= temp @kind object;
  #L36e960.  v4:= length @variable v0;
  #L36e962.  if v4 != v1 then goto L36e99a;
  #L36e966.  v3:= v0[v2] @kind object;
  #L36e96a.  call temp:= `resolve`(v8, v9, v3) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L36e970.  v8:= temp @kind object;
  #L36e972.  v9:= v0[v2] @kind object;
  #L36e976.  if v8 == v9 then goto L36e9cc;
  #L36e97a.  v9:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L36e97e.  v10:= new `java.lang.reflect.Type`[v1];
  #L36e982.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L36e986.  v10[v2]:= v0 @kind object;
  #L36e98a.  v0:= new `java.lang.reflect.Type`[v1];
  #L36e98e.  v0[v2]:= v8 @kind object;
  #L36e992.  call `<init>`(v9, v10, v0) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L36e998.  return v9 @kind object;
  #L36e99a.  v0:= length @variable v3;
  #L36e99c.  if v0 != v1 then goto L36e9cc;
  #L36e9a0.  v0:= v3[v2] @kind object;
  #L36e9a4.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L36e9aa.  v8:= temp @kind object;
  #L36e9ac.  v9:= v3[v2] @kind object;
  #L36e9b0.  if v8 == v9 then goto L36e9cc;
  #L36e9b4.  v9:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L36e9b8.  v10:= new `java.lang.reflect.Type`[v1];
  #L36e9bc.  v10[v2]:= v8 @kind object;
  #L36e9c0.  v8:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L36e9c4.  call `<init>`(v9, v10, v8) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L36e9ca.  return v9 @kind object;
  #L36e9cc.  return v10 @kind object;
  #L36e9ce.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L36e9d0.  goto L36e9d4;
  #L36e9d2.  throw v8;
  #L36e9d4.  goto L36e9d2;
  catch `java.lang.Throwable` @[L36e9a4..L36e9ac] goto L36e9ce;
}
procedure `java.lang.reflect.Type` `resolveTypeVariable`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.reflect.TypeVariable` v3 @kind object) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L36e9f4.  call temp:= `declaringClassOf`(v3) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L36e9fa.  v0:= temp @kind object;
  #L36e9fc.  if v0 != 0 then goto L36ea02;
  #L36ea00.  return v3 @kind object;
  #L36ea02.  call temp:= `getGenericSupertype`(v1, v2, v0) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L36ea08.  v1:= temp @kind object;
  #L36ea0a.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L36ea0e.  if v2 == 0 then goto L36ea34;
  #L36ea12.  call temp:= `getTypeParameters`(v0) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L36ea18.  v2:= temp @kind object;
  #L36ea1a.  call temp:= `indexOf`(v2, v3) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L36ea20.  v2:= temp;
  #L36ea22.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L36ea26.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L36ea2c.  v1:= temp @kind object;
  #L36ea2e.  v1:= v1[v2] @kind object;
  #L36ea32.  return v1 @kind object;
  #L36ea34.  return v3 @kind object;
}
procedure `void` `throwIfFatal`(`java.lang.Throwable` v1 @kind object) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L36eaf8.  v0:= instanceof @variable v1 @type ^`java.lang.VirtualMachineError` @kind boolean;
  #L36eafc.  if v0 != 0 then goto L36eb1e;
  #L36eb00.  v0:= instanceof @variable v1 @type ^`java.lang.ThreadDeath` @kind boolean;
  #L36eb04.  if v0 != 0 then goto L36eb18;
  #L36eb08.  v0:= instanceof @variable v1 @type ^`java.lang.LinkageError` @kind boolean;
  #L36eb0c.  if v0 != 0 then goto L36eb12;
  #L36eb10.  return @kind void;
  #L36eb12.  v1:= (`java.lang.LinkageError`) v1 @kind object;
  #L36eb16.  throw v1;
  #L36eb18.  v1:= (`java.lang.ThreadDeath`) v1 @kind object;
  #L36eb1c.  throw v1;
  #L36eb1e.  v1:= (`java.lang.VirtualMachineError`) v1 @kind object;
  #L36eb22.  throw v1;
}
procedure `java.lang.String` `typeToString`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L36e638.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L36e63c.  if v0 == 0 then goto L36e64e;
  #L36e640.  v1:= (`java.lang.Class`) v1 @kind object;
  #L36e644.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L36e64a.  v1:= temp @kind object;
  #L36e64c.  goto L36e656;
  #L36e64e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L36e654.  v1:= temp @kind object;
  #L36e656.  return v1 @kind object;
}
