record `retrofit2.OkHttpCall$1` @kind class @AccessFlag  extends `okhttp3.Callback` @kind interface {
  `retrofit2.OkHttpCall` `retrofit2.OkHttpCall$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `retrofit2.Callback` `retrofit2.OkHttpCall$1.val$callback` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.OkHttpCall$1` v0 @kind this, `retrofit2.OkHttpCall` v1 @kind object, `retrofit2.Callback` v2 @kind object) @signature `Lretrofit2/OkHttpCall$1;.<init>:(Lretrofit2/OkHttpCall;Lretrofit2/Callback;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L36947c.  v0.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` := v1 @kind object;
  #L369480.  v0.`retrofit2.OkHttpCall$1.val$callback` @type ^`retrofit2.Callback` := v2 @kind object;
  #L369484.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36948a.  return @kind void;
}
procedure `void` `callFailure`(`retrofit2.OkHttpCall$1` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lretrofit2/OkHttpCall$1;.callFailure:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L36949c.  v0:= v2.`retrofit2.OkHttpCall$1.val$callback` @type ^`retrofit2.Callback` @kind object;
  #L3694a0.  v1:= v2.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` @kind object;
  #L3694a4.  call `onFailure`(v0, v1, v3) @signature `Lretrofit2/Callback;.onFailure:(Lretrofit2/Call;Ljava/lang/Throwable;)V` @kind interface;
  #L3694aa.  goto L3694ba;
  #L3694ac.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3694ae.  call `throwIfFatal`(v3) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L3694b4.  call `printStackTrace`(v3) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L3694ba.  return @kind void;
  catch `java.lang.Throwable` @[L36949c..L3694aa] goto L3694ac;
}
procedure `void` `onFailure`(`retrofit2.OkHttpCall$1` v0 @kind this, `okhttp3.Call` v1 @kind object, `java.io.IOException` v2 @kind object) @signature `Lretrofit2/OkHttpCall$1;.onFailure:(Lokhttp3/Call;Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;

  #L3694d8.  call `callFailure`(v0, v2) @signature `Lretrofit2/OkHttpCall$1;.callFailure:(Ljava/lang/Throwable;)V` @kind direct;
  #L3694de.  return @kind void;
}
procedure `void` `onResponse`(`retrofit2.OkHttpCall$1` v1 @kind this, `okhttp3.Call` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lretrofit2/OkHttpCall$1;.onResponse:(Lokhttp3/Call;Lokhttp3/Response;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3694f0.  v2:= v1.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` @kind object;
  #L3694f4.  call temp:= `parseResponse`(v2, v3) @signature `Lretrofit2/OkHttpCall;.parseResponse:(Lokhttp3/Response;)Lretrofit2/Response;` @kind virtual;
  #L3694fa.  v2:= temp @kind object;
  #L3694fc.  v3:= v1.`retrofit2.OkHttpCall$1.val$callback` @type ^`retrofit2.Callback` @kind object;
  #L369500.  v0:= v1.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` @kind object;
  #L369504.  call `onResponse`(v3, v0, v2) @signature `Lretrofit2/Callback;.onResponse:(Lretrofit2/Call;Lretrofit2/Response;)V` @kind interface;
  #L36950a.  goto L36951a;
  #L36950c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L36950e.  call `throwIfFatal`(v2) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L369514.  call `printStackTrace`(v2) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L36951a.  return @kind void;
  #L36951c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L36951e.  call `throwIfFatal`(v2) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L369524.  call `callFailure`(v1, v2) @signature `Lretrofit2/OkHttpCall$1;.callFailure:(Ljava/lang/Throwable;)V` @kind direct;
  #L36952a.  return @kind void;
  catch `java.lang.Throwable` @[L3694f0..L3694fc] goto L36951c;
  catch `java.lang.Throwable` @[L3694fc..L36950a] goto L36950c;
}
