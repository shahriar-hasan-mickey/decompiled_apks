record `retrofit2.SkipCallbackExecutorImpl` @kind class @AccessFlag FINAL extends `retrofit2.SkipCallbackExecutor` @kind interface {
}
global `retrofit2.SkipCallbackExecutor` `@@retrofit2.SkipCallbackExecutorImpl.INSTANCE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/SkipCallbackExecutorImpl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L36dc00.  v0:= new `retrofit2.SkipCallbackExecutorImpl`;
  #L36dc04.  call `<init>`(v0) @signature `Lretrofit2/SkipCallbackExecutorImpl;.<init>:()V` @kind direct;
  #L36dc0a.  `@@retrofit2.SkipCallbackExecutorImpl.INSTANCE` @type ^`retrofit2.SkipCallbackExecutor` := v0 @kind object;
  #L36dc0e.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.SkipCallbackExecutorImpl` v0 @kind this) @signature `Lretrofit2/SkipCallbackExecutorImpl;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L36dc20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36dc26.  return @kind void;
}
procedure `java.lang.annotation.Annotation`[] `ensurePresent`(`java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lretrofit2/SkipCallbackExecutorImpl;.ensurePresent:([Ljava/lang/annotation/Annotation;)[Ljava/lang/annotation/Annotation;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L36dbc0.  v0:= constclass @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L36dbc4.  call temp:= `isAnnotationPresent`(v4, v0) @signature `Lretrofit2/Utils;.isAnnotationPresent:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @kind static;
  #L36dbca.  v0:= temp;
  #L36dbcc.  if v0 == 0 then goto L36dbd2;
  #L36dbd0.  return v4 @kind object;
  #L36dbd2.  v0:= length @variable v4;
  #L36dbd4.  v1:= 1I;
  #L36dbd6.  v0:= v0 + v1 @kind int;
  #L36dbd8.  v0:= new `java.lang.annotation.Annotation`[v0];
  #L36dbdc.  v2:= `@@retrofit2.SkipCallbackExecutorImpl.INSTANCE` @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L36dbe0.  v3:= 0I;
  #L36dbe2.  v0[v3]:= v2 @kind object;
  #L36dbe6.  v2:= length @variable v4;
  #L36dbe8.  call `arraycopy`(v4, v3, v0, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L36dbee.  return v0 @kind object;
}
procedure `java.lang.Class` `annotationType`(`retrofit2.SkipCallbackExecutorImpl` v1 @kind this) @signature `Lretrofit2/SkipCallbackExecutorImpl;.annotationType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36db5c.  v0:= constclass @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L36db60.  return v0 @kind object;
}
procedure `boolean` `equals`(`retrofit2.SkipCallbackExecutorImpl` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit2/SkipCallbackExecutorImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L36db30.  v1:= instanceof @variable v1 @type ^`retrofit2.SkipCallbackExecutor` @kind boolean;
  #L36db34.  return v1;
}
procedure `int` `hashCode`(`retrofit2.SkipCallbackExecutorImpl` v1 @kind this) @signature `Lretrofit2/SkipCallbackExecutorImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36db48.  v0:= 0I;
  #L36db4a.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.SkipCallbackExecutorImpl` v2 @kind this) @signature `Lretrofit2/SkipCallbackExecutorImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36db74.  v0:= new `java.lang.StringBuilder`;
  #L36db78.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36db7e.  v1:= "@" @kind object;
  #L36db82.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36db88.  v1:= constclass @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L36db8c.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L36db92.  v1:= temp @kind object;
  #L36db94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36db9a.  v1:= "()" @kind object;
  #L36db9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36dba4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36dbaa.  v0:= temp @kind object;
  #L36dbac.  return v0 @kind object;
}
