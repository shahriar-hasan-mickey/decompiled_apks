record `retrofit2.RequestBuilder` @kind class @AccessFlag FINAL {
  `okhttp3.HttpUrl` `retrofit2.RequestBuilder.baseUrl` @AccessFlag PRIVATE_FINAL;
  `okhttp3.RequestBody` `retrofit2.RequestBuilder.body` @AccessFlag PRIVATE;
  `okhttp3.MediaType` `retrofit2.RequestBuilder.contentType` @AccessFlag PRIVATE;
  `okhttp3.FormBody$Builder` `retrofit2.RequestBuilder.formBuilder` @AccessFlag PRIVATE;
  `boolean` `retrofit2.RequestBuilder.hasBody` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Headers$Builder` `retrofit2.RequestBuilder.headersBuilder` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.RequestBuilder.method` @AccessFlag PRIVATE_FINAL;
  `okhttp3.MultipartBody$Builder` `retrofit2.RequestBuilder.multipartBuilder` @AccessFlag PRIVATE;
  `java.lang.String` `retrofit2.RequestBuilder.relativeUrl` @AccessFlag PRIVATE;
  `okhttp3.Request$Builder` `retrofit2.RequestBuilder.requestBuilder` @AccessFlag PRIVATE_FINAL;
  `okhttp3.HttpUrl$Builder` `retrofit2.RequestBuilder.urlBuilder` @AccessFlag PRIVATE;
}
global `char`[] `@@retrofit2.RequestBuilder.HEX_DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@retrofit2.RequestBuilder.PATH_SEGMENT_ALWAYS_ENCODE_SET` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.RequestBuilder.PATH_TRAVERSAL` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/RequestBuilder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L36ae3c.  v0:= 16I;
  #L36ae40.  v0:= new `char`[v0];
  #L36ae44.  goto L36ae60;
  #L36ae4a.  `@@retrofit2.RequestBuilder.HEX_DIGITS` @type ^`char`[] := v0 @kind object;
  #L36ae4e.  v0:= "(.*/)?(\\.|%2e|%2E){1,2}(/.*)?" @kind object;
  #L36ae52.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L36ae58.  v0:= temp @kind object;
  #L36ae5a.  `@@retrofit2.RequestBuilder.PATH_TRAVERSAL` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L36ae5e.  return @kind void;
  #L36ae60.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L36ae87.  goto L36ae4a;
}
procedure `void` `<init>`(`retrofit2.RequestBuilder` v0 @kind this, `java.lang.String` v1 @kind object, `okhttp3.HttpUrl` v2 @kind object, `java.lang.String` v3 @kind object, `okhttp3.Headers` v4 @kind object, `okhttp3.MediaType` v5 @kind object, `boolean` v6 , `boolean` v7 , `boolean` v8 ) @signature `Lretrofit2/RequestBuilder;.<init>:(Ljava/lang/String;Lokhttp3/HttpUrl;Ljava/lang/String;Lokhttp3/Headers;Lokhttp3/MediaType;ZZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L36ae98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36ae9e.  v0.`retrofit2.RequestBuilder.method` @type ^`java.lang.String` := v1 @kind object;
  #L36aea2.  v0.`retrofit2.RequestBuilder.baseUrl` @type ^`okhttp3.HttpUrl` := v2 @kind object;
  #L36aea6.  v0.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` := v3 @kind object;
  #L36aeaa.  v1:= new `okhttp3.Request$Builder`;
  #L36aeae.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L36aeb4.  v0.`retrofit2.RequestBuilder.requestBuilder` @type ^`okhttp3.Request$Builder` := v1 @kind object;
  #L36aeb8.  v0.`retrofit2.RequestBuilder.contentType` @type ^`okhttp3.MediaType` := v5 @kind object;
  #L36aebc.  v0.`retrofit2.RequestBuilder.hasBody` @type ^`boolean` := v6 @kind boolean;
  #L36aec0.  if v4 == 0 then goto L36aed2;
  #L36aec4.  call temp:= `newBuilder`(v4) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L36aeca.  v1:= temp @kind object;
  #L36aecc.  v0.`retrofit2.RequestBuilder.headersBuilder` @type ^`okhttp3.Headers$Builder` := v1 @kind object;
  #L36aed0.  goto L36aee0;
  #L36aed2.  v1:= new `okhttp3.Headers$Builder`;
  #L36aed6.  call `<init>`(v1) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L36aedc.  v0.`retrofit2.RequestBuilder.headersBuilder` @type ^`okhttp3.Headers$Builder` := v1 @kind object;
  #L36aee0.  if v7 == 0 then goto L36aef4;
  #L36aee4.  v1:= new `okhttp3.FormBody$Builder`;
  #L36aee8.  call `<init>`(v1) @signature `Lokhttp3/FormBody$Builder;.<init>:()V` @kind direct;
  #L36aeee.  v0.`retrofit2.RequestBuilder.formBuilder` @type ^`okhttp3.FormBody$Builder` := v1 @kind object;
  #L36aef2.  goto L36af10;
  #L36aef4.  if v8 == 0 then goto L36af10;
  #L36aef8.  v1:= new `okhttp3.MultipartBody$Builder`;
  #L36aefc.  call `<init>`(v1) @signature `Lokhttp3/MultipartBody$Builder;.<init>:()V` @kind direct;
  #L36af02.  v0.`retrofit2.RequestBuilder.multipartBuilder` @type ^`okhttp3.MultipartBody$Builder` := v1 @kind object;
  #L36af06.  v2:= `@@okhttp3.MultipartBody.FORM` @type ^`okhttp3.MediaType` @kind object;
  #L36af0a.  call temp:= `setType`(v1, v2) @signature `Lokhttp3/MultipartBody$Builder;.setType:(Lokhttp3/MediaType;)Lokhttp3/MultipartBody$Builder;` @kind virtual;
  #L36af10.  return @kind void;
}
procedure `java.lang.String` `canonicalizeForPath`(`java.lang.String` v6 @kind object, `boolean` v7 ) @signature `Lretrofit2/RequestBuilder;.canonicalizeForPath:(Ljava/lang/String;Z)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L36ac90.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L36ac96.  v0:= temp;
  #L36ac98.  v1:= 0I;
  #L36ac9a.  v2:= 0I;
  #L36ac9c.  if v2 >= v0 then goto L36ad0a;
  #L36aca0.  call temp:= `codePointAt`(v6, v2) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L36aca6.  v3:= temp;
  #L36aca8.  v4:= 32I;
  #L36acac.  if v3 < v4 then goto L36acec;
  #L36acb0.  v4:= 127I;
  #L36acb4.  if v3 >= v4 then goto L36acec;
  #L36acb8.  v4:= " \"<>^`{}|\\?#" @kind object;
  #L36acbc.  call temp:= `indexOf`(v4, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L36acc2.  v4:= temp;
  #L36acc4.  v5:= -1I;
  #L36acc6.  if v4 != v5 then goto L36acec;
  #L36acca.  if v7 != 0 then goto L36ace0;
  #L36acce.  v4:= 47I;
  #L36acd2.  if v3 == v4 then goto L36acec;
  #L36acd6.  v4:= 37I;
  #L36acda.  if v3 != v4 then goto L36ace0;
  #L36acde.  goto L36acec;
  #L36ace0.  call temp:= `charCount`(v3) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L36ace6.  v3:= temp;
  #L36ace8.  v2:= v2 + v3 @kind int;
  #L36acea.  goto L36ac9c;
  #L36acec.  v3:= new `okio.k`;
  #L36acf0.  call `<init>`(v3) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L36acf6.  call temp:= `w1`(v3, v6, v1, v2) @signature `Lokio/k;.w1:(Ljava/lang/String;II)Lokio/k;` @kind virtual;
  #L36acfc.  call `canonicalizeForPath`(v3, v6, v2, v0, v7) @signature `Lretrofit2/RequestBuilder;.canonicalizeForPath:(Lokio/k;Ljava/lang/String;IIZ)V` @kind static;
  #L36ad02.  call temp:= `Y0`(v3) @signature `Lokio/k;.Y0:()Ljava/lang/String;` @kind virtual;
  #L36ad08.  v6:= temp @kind object;
  #L36ad0a.  return v6 @kind object;
}
procedure `void` `canonicalizeForPath`(`okio.k` v6 @kind object, `java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `boolean` v10 ) @signature `Lretrofit2/RequestBuilder;.canonicalizeForPath:(Lokio/k;Ljava/lang/String;IIZ)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L36b184.  v0:= 0I;
  #L36b186.  if v8 >= v9 then goto L36b25c;
  #L36b18a.  call temp:= `codePointAt`(v7, v8) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L36b190.  v1:= temp;
  #L36b192.  if v10 == 0 then goto L36b1b8;
  #L36b196.  v2:= 9I;
  #L36b19a.  if v1 == v2 then goto L36b250;
  #L36b19e.  v2:= 10I;
  #L36b1a2.  if v1 == v2 then goto L36b250;
  #L36b1a6.  v2:= 12I;
  #L36b1aa.  if v1 == v2 then goto L36b250;
  #L36b1ae.  v2:= 13I;
  #L36b1b2.  if v1 != v2 then goto L36b1b8;
  #L36b1b6.  goto L36b250;
  #L36b1b8.  v2:= 32I;
  #L36b1bc.  v3:= 37I;
  #L36b1c0.  if v1 < v2 then goto L36b1f8;
  #L36b1c4.  v2:= 127I;
  #L36b1c8.  if v1 >= v2 then goto L36b1f8;
  #L36b1cc.  v2:= " \"<>^`{}|\\?#" @kind object;
  #L36b1d0.  call temp:= `indexOf`(v2, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L36b1d6.  v2:= temp;
  #L36b1d8.  v4:= -1I;
  #L36b1da.  if v2 != v4 then goto L36b1f8;
  #L36b1de.  if v10 != 0 then goto L36b1f0;
  #L36b1e2.  v2:= 47I;
  #L36b1e6.  if v1 == v2 then goto L36b1f8;
  #L36b1ea.  if v1 != v3 then goto L36b1f0;
  #L36b1ee.  goto L36b1f8;
  #L36b1f0.  call temp:= `x1`(v6, v1) @signature `Lokio/k;.x1:(I)Lokio/k;` @kind virtual;
  #L36b1f6.  goto L36b250;
  #L36b1f8.  if v0 != 0 then goto L36b206;
  #L36b1fc.  v0:= new `okio.k`;
  #L36b200.  call `<init>`(v0) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L36b206.  call temp:= `x1`(v0, v1) @signature `Lokio/k;.x1:(I)Lokio/k;` @kind virtual;
  #L36b20c.  call temp:= `O`(v0) @signature `Lokio/k;.O:()Z` @kind virtual;
  #L36b212.  v2:= temp;
  #L36b214.  if v2 != 0 then goto L36b250;
  #L36b218.  call temp:= `readByte`(v0) @signature `Lokio/k;.readByte:()B` @kind virtual;
  #L36b21e.  v2:= temp;
  #L36b220.  v2:= v2 ^& 255;
  #L36b224.  call temp:= `n1`(v6, v3) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L36b22a.  v4:= `@@retrofit2.RequestBuilder.HEX_DIGITS` @type ^`char`[] @kind object;
  #L36b22e.  v5:= v2 ^> 4;
  #L36b232.  v5:= v5 ^& 15;
  #L36b236.  v5:= v4[v5] @kind char;
  #L36b23a.  call temp:= `n1`(v6, v5) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L36b240.  v2:= v2 ^& 15;
  #L36b244.  v2:= v4[v2] @kind char;
  #L36b248.  call temp:= `n1`(v6, v2) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L36b24e.  goto L36b20c;
  #L36b250.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L36b256.  v1:= temp;
  #L36b258.  v8:= v8 + v1 @kind int;
  #L36b25a.  goto L36b186;
  #L36b25c.  return @kind void;
}
procedure `void` `addFormField`(`retrofit2.RequestBuilder` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lretrofit2/RequestBuilder;.addFormField:(Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag  {
    temp;

  #L36af24.  if v3 == 0 then goto L36af34;
  #L36af28.  v3:= v0.`retrofit2.RequestBuilder.formBuilder` @type ^`okhttp3.FormBody$Builder` @kind object;
  #L36af2c.  call temp:= `addEncoded`(v3, v1, v2) @signature `Lokhttp3/FormBody$Builder;.addEncoded:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/FormBody$Builder;` @kind virtual;
  #L36af32.  goto L36af3e;
  #L36af34.  v3:= v0.`retrofit2.RequestBuilder.formBuilder` @type ^`okhttp3.FormBody$Builder` @kind object;
  #L36af38.  call temp:= `add`(v3, v1, v2) @signature `Lokhttp3/FormBody$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/FormBody$Builder;` @kind virtual;
  #L36af3e.  return @kind void;
}
procedure `void` `addHeader`(`retrofit2.RequestBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lretrofit2/RequestBuilder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L36af50.  v0:= "Content-Type" @kind object;
  #L36af54.  call temp:= `equalsIgnoreCase`(v0, v4) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L36af5a.  v0:= temp;
  #L36af5c.  if v0 == 0 then goto L36af9e;
  #L36af60.  call temp:= `get`(v5) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L36af66.  v4:= temp @kind object;
  #L36af68.  v3.`retrofit2.RequestBuilder.contentType` @type ^`okhttp3.MediaType` := v4 @kind object;
  #L36af6c.  goto L36afa8;
  #L36af6e.  v4:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L36af70.  v0:= new `java.lang.IllegalArgumentException`;
  #L36af74.  v1:= new `java.lang.StringBuilder`;
  #L36af78.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36af7e.  v2:= "Malformed content type: " @kind object;
  #L36af82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36af88.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36af8e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36af94.  v5:= temp @kind object;
  #L36af96.  call `<init>`(v0, v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L36af9c.  throw v0;
  #L36af9e.  v0:= v3.`retrofit2.RequestBuilder.headersBuilder` @type ^`okhttp3.Headers$Builder` @kind object;
  #L36afa2.  call temp:= `add`(v0, v4, v5) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L36afa8.  return @kind void;
  catch `java.lang.IllegalArgumentException` @[L36af60..L36af6c] goto L36af6e;
}
procedure `void` `addHeaders`(`retrofit2.RequestBuilder` v1 @kind this, `okhttp3.Headers` v2 @kind object) @signature `Lretrofit2/RequestBuilder;.addHeaders:(Lokhttp3/Headers;)V` @AccessFlag  {
    temp;
    v0;

  #L36afcc.  v0:= v1.`retrofit2.RequestBuilder.headersBuilder` @type ^`okhttp3.Headers$Builder` @kind object;
  #L36afd0.  call temp:= `addAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.addAll:(Lokhttp3/Headers;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L36afd6.  return @kind void;
}
procedure `void` `addPart`(`retrofit2.RequestBuilder` v1 @kind this, `okhttp3.Headers` v2 @kind object, `okhttp3.RequestBody` v3 @kind object) @signature `Lretrofit2/RequestBuilder;.addPart:(Lokhttp3/Headers;Lokhttp3/RequestBody;)V` @AccessFlag  {
    temp;
    v0;

  #L36afe8.  v0:= v1.`retrofit2.RequestBuilder.multipartBuilder` @type ^`okhttp3.MultipartBody$Builder` @kind object;
  #L36afec.  call temp:= `addPart`(v0, v2, v3) @signature `Lokhttp3/MultipartBody$Builder;.addPart:(Lokhttp3/Headers;Lokhttp3/RequestBody;)Lokhttp3/MultipartBody$Builder;` @kind virtual;
  #L36aff2.  return @kind void;
}
procedure `void` `addPart`(`retrofit2.RequestBuilder` v1 @kind this, `okhttp3.MultipartBody$Part` v2 @kind object) @signature `Lretrofit2/RequestBuilder;.addPart:(Lokhttp3/MultipartBody$Part;)V` @AccessFlag  {
    temp;
    v0;

  #L36b004.  v0:= v1.`retrofit2.RequestBuilder.multipartBuilder` @type ^`okhttp3.MultipartBody$Builder` @kind object;
  #L36b008.  call temp:= `addPart`(v0, v2) @signature `Lokhttp3/MultipartBody$Builder;.addPart:(Lokhttp3/MultipartBody$Part;)Lokhttp3/MultipartBody$Builder;` @kind virtual;
  #L36b00e.  return @kind void;
}
procedure `void` `addPathParam`(`retrofit2.RequestBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `boolean` v6 ) @signature `Lretrofit2/RequestBuilder;.addPathParam:(Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L36b020.  v0:= v3.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L36b024.  if v0 == 0 then goto L36b0b4;
  #L36b028.  call temp:= `canonicalizeForPath`(v5, v6) @signature `Lretrofit2/RequestBuilder;.canonicalizeForPath:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L36b02e.  v6:= temp @kind object;
  #L36b030.  v0:= v3.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L36b034.  v1:= new `java.lang.StringBuilder`;
  #L36b038.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36b03e.  v2:= "{" @kind object;
  #L36b042.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36b048.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36b04e.  v4:= "}" @kind object;
  #L36b052.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36b058.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36b05e.  v4:= temp @kind object;
  #L36b060.  call temp:= `replace`(v0, v4, v6) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L36b066.  v4:= temp @kind object;
  #L36b068.  v6:= `@@retrofit2.RequestBuilder.PATH_TRAVERSAL` @type ^`java.util.regex.Pattern` @kind object;
  #L36b06c.  call temp:= `matcher`(v6, v4) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L36b072.  v6:= temp @kind object;
  #L36b074.  call temp:= `matches`(v6) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L36b07a.  v6:= temp;
  #L36b07c.  if v6 != 0 then goto L36b086;
  #L36b080.  v3.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` := v4 @kind object;
  #L36b084.  return @kind void;
  #L36b086.  v4:= new `java.lang.IllegalArgumentException`;
  #L36b08a.  v6:= new `java.lang.StringBuilder`;
  #L36b08e.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36b094.  v0:= "@Path parameters shouldn't perform path traversal ('.' or '..'): " @kind object;
  #L36b098.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36b09e.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36b0a4.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36b0aa.  v5:= temp @kind object;
  #L36b0ac.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36b0b2.  throw v4;
  #L36b0b4.  v4:= new `java.lang.AssertionError`;
  #L36b0b8.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L36b0be.  throw v4;
}
procedure `void` `addQueryParam`(`retrofit2.RequestBuilder` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `boolean` v5 ) @signature `Lretrofit2/RequestBuilder;.addQueryParam:(Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L36b0d0.  v0:= v2.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L36b0d4.  if v0 == 0 then goto L36b13a;
  #L36b0d8.  v1:= v2.`retrofit2.RequestBuilder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L36b0dc.  call temp:= `newBuilder`(v1, v0) @signature `Lokhttp3/HttpUrl;.newBuilder:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L36b0e2.  v0:= temp @kind object;
  #L36b0e4.  v2.`retrofit2.RequestBuilder.urlBuilder` @type ^`okhttp3.HttpUrl$Builder` := v0 @kind object;
  #L36b0e8.  if v0 == 0 then goto L36b0f4;
  #L36b0ec.  v0:= 0I;
  #L36b0ee.  v2.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` := v0 @kind object;
  #L36b0f2.  goto L36b13a;
  #L36b0f4.  v3:= new `java.lang.IllegalArgumentException`;
  #L36b0f8.  v4:= new `java.lang.StringBuilder`;
  #L36b0fc.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36b102.  v5:= "Malformed URL. Base: " @kind object;
  #L36b106.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36b10c.  v5:= v2.`retrofit2.RequestBuilder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L36b110.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36b116.  v5:= ", Relative: " @kind object;
  #L36b11a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36b120.  v5:= v2.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L36b124.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36b12a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36b130.  v4:= temp @kind object;
  #L36b132.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36b138.  throw v3;
  #L36b13a.  if v5 == 0 then goto L36b14a;
  #L36b13e.  v5:= v2.`retrofit2.RequestBuilder.urlBuilder` @type ^`okhttp3.HttpUrl$Builder` @kind object;
  #L36b142.  call temp:= `addEncodedQueryParameter`(v5, v3, v4) @signature `Lokhttp3/HttpUrl$Builder;.addEncodedQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L36b148.  goto L36b154;
  #L36b14a.  v5:= v2.`retrofit2.RequestBuilder.urlBuilder` @type ^`okhttp3.HttpUrl$Builder` @kind object;
  #L36b14e.  call temp:= `addQueryParameter`(v5, v3, v4) @signature `Lokhttp3/HttpUrl$Builder;.addQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L36b154.  return @kind void;
}
procedure `void` `addTag`(`retrofit2.RequestBuilder` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lretrofit2/RequestBuilder;.addTag:(Ljava/lang/Class;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L36b168.  v0:= v1.`retrofit2.RequestBuilder.requestBuilder` @type ^`okhttp3.Request$Builder` @kind object;
  #L36b16c.  call temp:= `tag`(v0, v2, v3) @signature `Lokhttp3/Request$Builder;.tag:(Ljava/lang/Class;Ljava/lang/Object;)Lokhttp3/Request$Builder;` @kind virtual;
  #L36b172.  return @kind void;
}
procedure `okhttp3.Request$Builder` `get`(`retrofit2.RequestBuilder` v5 @kind this) @signature `Lretrofit2/RequestBuilder;.get:()Lokhttp3/Request$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L36ad1c.  v0:= v5.`retrofit2.RequestBuilder.urlBuilder` @type ^`okhttp3.HttpUrl$Builder` @kind object;
  #L36ad20.  if v0 == 0 then goto L36ad2e;
  #L36ad24.  call temp:= `build`(v0) @signature `Lokhttp3/HttpUrl$Builder;.build:()Lokhttp3/HttpUrl;` @kind virtual;
  #L36ad2a.  v0:= temp @kind object;
  #L36ad2c.  goto L36ad42;
  #L36ad2e.  v0:= v5.`retrofit2.RequestBuilder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L36ad32.  v1:= v5.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L36ad36.  call temp:= `resolve`(v0, v1) @signature `Lokhttp3/HttpUrl;.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind virtual;
  #L36ad3c.  v0:= temp @kind object;
  #L36ad3e.  if v0 == 0 then goto L36ade4;
  #L36ad42.  v1:= v5.`retrofit2.RequestBuilder.body` @type ^`okhttp3.RequestBody` @kind object;
  #L36ad46.  if v1 != 0 then goto L36ad86;
  #L36ad4a.  v2:= v5.`retrofit2.RequestBuilder.formBuilder` @type ^`okhttp3.FormBody$Builder` @kind object;
  #L36ad4e.  if v2 == 0 then goto L36ad5c;
  #L36ad52.  call temp:= `build`(v2) @signature `Lokhttp3/FormBody$Builder;.build:()Lokhttp3/FormBody;` @kind virtual;
  #L36ad58.  v1:= temp @kind object;
  #L36ad5a.  goto L36ad86;
  #L36ad5c.  v2:= v5.`retrofit2.RequestBuilder.multipartBuilder` @type ^`okhttp3.MultipartBody$Builder` @kind object;
  #L36ad60.  if v2 == 0 then goto L36ad6e;
  #L36ad64.  call temp:= `build`(v2) @signature `Lokhttp3/MultipartBody$Builder;.build:()Lokhttp3/MultipartBody;` @kind virtual;
  #L36ad6a.  v1:= temp @kind object;
  #L36ad6c.  goto L36ad86;
  #L36ad6e.  v2:= v5.`retrofit2.RequestBuilder.hasBody` @type ^`boolean` @kind boolean;
  #L36ad72.  if v2 == 0 then goto L36ad86;
  #L36ad76.  v1:= 0I;
  #L36ad78.  v2:= 0I;
  #L36ad7a.  v2:= new `byte`[v2];
  #L36ad7e.  call temp:= `create`(v1, v2) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;` @kind static;
  #L36ad84.  v1:= temp @kind object;
  #L36ad86.  v2:= v5.`retrofit2.RequestBuilder.contentType` @type ^`okhttp3.MediaType` @kind object;
  #L36ad8a.  if v2 == 0 then goto L36adb6;
  #L36ad8e.  if v1 == 0 then goto L36ada0;
  #L36ad92.  v3:= new `retrofit2.RequestBuilder$ContentTypeOverridingRequestBody`;
  #L36ad96.  call `<init>`(v3, v1, v2) @signature `Lretrofit2/RequestBuilder$ContentTypeOverridingRequestBody;.<init>:(Lokhttp3/RequestBody;Lokhttp3/MediaType;)V` @kind direct;
  #L36ad9c.  v1:= v3 @kind object;
  #L36ad9e.  goto L36adb6;
  #L36ada0.  v3:= v5.`retrofit2.RequestBuilder.headersBuilder` @type ^`okhttp3.Headers$Builder` @kind object;
  #L36ada4.  call temp:= `toString`(v2) @signature `Lokhttp3/MediaType;.toString:()Ljava/lang/String;` @kind virtual;
  #L36adaa.  v2:= temp @kind object;
  #L36adac.  v4:= "Content-Type" @kind object;
  #L36adb0.  call temp:= `add`(v3, v4, v2) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L36adb6.  v2:= v5.`retrofit2.RequestBuilder.requestBuilder` @type ^`okhttp3.Request$Builder` @kind object;
  #L36adba.  call temp:= `url`(v2, v0) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L36adc0.  v0:= temp @kind object;
  #L36adc2.  v2:= v5.`retrofit2.RequestBuilder.headersBuilder` @type ^`okhttp3.Headers$Builder` @kind object;
  #L36adc6.  call temp:= `build`(v2) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L36adcc.  v2:= temp @kind object;
  #L36adce.  call temp:= `headers`(v0, v2) @signature `Lokhttp3/Request$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Request$Builder;` @kind virtual;
  #L36add4.  v0:= temp @kind object;
  #L36add6.  v2:= v5.`retrofit2.RequestBuilder.method` @type ^`java.lang.String` @kind object;
  #L36adda.  call temp:= `method`(v0, v2, v1) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L36ade0.  v0:= temp @kind object;
  #L36ade2.  return v0 @kind object;
  #L36ade4.  v0:= new `java.lang.IllegalArgumentException`;
  #L36ade8.  v1:= new `java.lang.StringBuilder`;
  #L36adec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36adf2.  v2:= "Malformed URL. Base: " @kind object;
  #L36adf6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36adfc.  v2:= v5.`retrofit2.RequestBuilder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L36ae00.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36ae06.  v2:= ", Relative: " @kind object;
  #L36ae0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36ae10.  v2:= v5.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L36ae14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36ae1a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36ae20.  v1:= temp @kind object;
  #L36ae22.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36ae28.  throw v0;
}
procedure `void` `setBody`(`retrofit2.RequestBuilder` v0 @kind this, `okhttp3.RequestBody` v1 @kind object) @signature `Lretrofit2/RequestBuilder;.setBody:(Lokhttp3/RequestBody;)V` @AccessFlag  {
    temp;

  #L36b270.  v0.`retrofit2.RequestBuilder.body` @type ^`okhttp3.RequestBody` := v1 @kind object;
  #L36b274.  return @kind void;
}
procedure `void` `setRelativeUrl`(`retrofit2.RequestBuilder` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit2/RequestBuilder;.setRelativeUrl:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L36b288.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L36b28e.  v1:= temp @kind object;
  #L36b290.  v0.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` := v1 @kind object;
  #L36b294.  return @kind void;
}
