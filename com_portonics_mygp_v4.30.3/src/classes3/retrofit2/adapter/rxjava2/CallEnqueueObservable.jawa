record `retrofit2.adapter.rxjava2.CallEnqueueObservable` @kind class @AccessFlag FINAL extends `io.reactivex.n` @kind class {
  `retrofit2.Call` `retrofit2.adapter.rxjava2.CallEnqueueObservable.originalCall` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.adapter.rxjava2.CallEnqueueObservable` v0 @kind this, `retrofit2.Call` v1 @kind object) @signature `Lretrofit2/adapter/rxjava2/CallEnqueueObservable;.<init>:(Lretrofit2/Call;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L36ee24.  call `<init>`(v0) @signature `Lio/reactivex/n;.<init>:()V` @kind direct;
  #L36ee2a.  v0.`retrofit2.adapter.rxjava2.CallEnqueueObservable.originalCall` @type ^`retrofit2.Call` := v1 @kind object;
  #L36ee2e.  return @kind void;
}
procedure `void` `subscribeActual`(`retrofit2.adapter.rxjava2.CallEnqueueObservable` v2 @kind this, `io.reactivex.t` v3 @kind object) @signature `Lretrofit2/adapter/rxjava2/CallEnqueueObservable;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L36ee40.  v0:= v2.`retrofit2.adapter.rxjava2.CallEnqueueObservable.originalCall` @type ^`retrofit2.Call` @kind object;
  #L36ee44.  call temp:= `clone`(v0) @signature `Lretrofit2/Call;.clone:()Lretrofit2/Call;` @kind interface;
  #L36ee4a.  v0:= temp @kind object;
  #L36ee4c.  v1:= new `retrofit2.adapter.rxjava2.CallEnqueueObservable$CallCallback`;
  #L36ee50.  call `<init>`(v1, v0, v3) @signature `Lretrofit2/adapter/rxjava2/CallEnqueueObservable$CallCallback;.<init>:(Lretrofit2/Call;Lio/reactivex/t;)V` @kind direct;
  #L36ee56.  call `onSubscribe`(v3, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L36ee5c.  call temp:= `isDisposed`(v1) @signature `Lretrofit2/adapter/rxjava2/CallEnqueueObservable$CallCallback;.isDisposed:()Z` @kind virtual;
  #L36ee62.  v3:= temp;
  #L36ee64.  if v3 != 0 then goto L36ee6e;
  #L36ee68.  call `enqueue`(v0, v1) @signature `Lretrofit2/Call;.enqueue:(Lretrofit2/Callback;)V` @kind interface;
  #L36ee6e.  return @kind void;
}
