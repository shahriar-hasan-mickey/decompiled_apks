record `retrofit2.adapter.rxjava2.RxJava2CallAdapter` @kind class @AccessFlag FINAL extends `retrofit2.CallAdapter` @kind interface {
  `boolean` `retrofit2.adapter.rxjava2.RxJava2CallAdapter.isAsync` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.adapter.rxjava2.RxJava2CallAdapter.isBody` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.adapter.rxjava2.RxJava2CallAdapter.isCompletable` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.adapter.rxjava2.RxJava2CallAdapter.isFlowable` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.adapter.rxjava2.RxJava2CallAdapter.isMaybe` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.adapter.rxjava2.RxJava2CallAdapter.isResult` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.adapter.rxjava2.RxJava2CallAdapter.isSingle` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.adapter.rxjava2.RxJava2CallAdapter.responseType` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.x` `retrofit2.adapter.rxjava2.RxJava2CallAdapter.scheduler` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.adapter.rxjava2.RxJava2CallAdapter` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `io.reactivex.x` v2 @kind object, `boolean` v3 , `boolean` v4 , `boolean` v5 , `boolean` v6 , `boolean` v7 , `boolean` v8 , `boolean` v9 ) @signature `Lretrofit2/adapter/rxjava2/RxJava2CallAdapter;.<init>:(Ljava/lang/reflect/Type;Lio/reactivex/x;ZZZZZZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L36f504.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36f50a.  v0.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.responseType` @type ^`java.lang.reflect.Type` := v1 @kind object;
  #L36f50e.  v0.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.scheduler` @type ^`io.reactivex.x` := v2 @kind object;
  #L36f512.  v0.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isAsync` @type ^`boolean` := v3 @kind boolean;
  #L36f516.  v0.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isResult` @type ^`boolean` := v4 @kind boolean;
  #L36f51a.  v0.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isBody` @type ^`boolean` := v5 @kind boolean;
  #L36f51e.  v0.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isFlowable` @type ^`boolean` := v6 @kind boolean;
  #L36f522.  v0.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isSingle` @type ^`boolean` := v7 @kind boolean;
  #L36f526.  v0.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isMaybe` @type ^`boolean` := v8 @kind boolean;
  #L36f52a.  v0.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isCompletable` @type ^`boolean` := v9 @kind boolean;
  #L36f52e.  return @kind void;
}
procedure `java.lang.Object` `adapt`(`retrofit2.adapter.rxjava2.RxJava2CallAdapter` v1 @kind this, `retrofit2.Call` v2 @kind object) @signature `Lretrofit2/adapter/rxjava2/RxJava2CallAdapter;.adapt:(Lretrofit2/Call;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36f42c.  v0:= v1.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isAsync` @type ^`boolean` @kind boolean;
  #L36f430.  if v0 == 0 then goto L36f440;
  #L36f434.  v0:= new `retrofit2.adapter.rxjava2.CallEnqueueObservable`;
  #L36f438.  call `<init>`(v0, v2) @signature `Lretrofit2/adapter/rxjava2/CallEnqueueObservable;.<init>:(Lretrofit2/Call;)V` @kind direct;
  #L36f43e.  goto L36f44a;
  #L36f440.  v0:= new `retrofit2.adapter.rxjava2.CallExecuteObservable`;
  #L36f444.  call `<init>`(v0, v2) @signature `Lretrofit2/adapter/rxjava2/CallExecuteObservable;.<init>:(Lretrofit2/Call;)V` @kind direct;
  #L36f44a.  v2:= v1.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isResult` @type ^`boolean` @kind boolean;
  #L36f44e.  if v2 == 0 then goto L36f460;
  #L36f452.  v2:= new `retrofit2.adapter.rxjava2.ResultObservable`;
  #L36f456.  call `<init>`(v2, v0) @signature `Lretrofit2/adapter/rxjava2/ResultObservable;.<init>:(Lio/reactivex/n;)V` @kind direct;
  #L36f45c.  v0:= v2 @kind object;
  #L36f45e.  goto L36f474;
  #L36f460.  v2:= v1.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isBody` @type ^`boolean` @kind boolean;
  #L36f464.  if v2 == 0 then goto L36f474;
  #L36f468.  v2:= new `retrofit2.adapter.rxjava2.BodyObservable`;
  #L36f46c.  call `<init>`(v2, v0) @signature `Lretrofit2/adapter/rxjava2/BodyObservable;.<init>:(Lio/reactivex/n;)V` @kind direct;
  #L36f472.  goto L36f45c;
  #L36f474.  v2:= v1.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.scheduler` @type ^`io.reactivex.x` @kind object;
  #L36f478.  if v2 == 0 then goto L36f484;
  #L36f47c.  call temp:= `subscribeOn`(v0, v2) @signature `Lio/reactivex/n;.subscribeOn:(Lio/reactivex/x;)Lio/reactivex/n;` @kind virtual;
  #L36f482.  v0:= temp @kind object;
  #L36f484.  v2:= v1.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isFlowable` @type ^`boolean` @kind boolean;
  #L36f488.  if v2 == 0 then goto L36f49a;
  #L36f48c.  v2:= `@@io.reactivex.BackpressureStrategy.LATEST` @type ^`io.reactivex.BackpressureStrategy` @kind object;
  #L36f490.  call temp:= `toFlowable`(v0, v2) @signature `Lio/reactivex/n;.toFlowable:(Lio/reactivex/BackpressureStrategy;)Lio/reactivex/e;` @kind virtual;
  #L36f496.  v2:= temp @kind object;
  #L36f498.  return v2 @kind object;
  #L36f49a.  v2:= v1.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isSingle` @type ^`boolean` @kind boolean;
  #L36f49e.  if v2 == 0 then goto L36f4ac;
  #L36f4a2.  call temp:= `singleOrError`(v0) @signature `Lio/reactivex/n;.singleOrError:()Lio/reactivex/y;` @kind virtual;
  #L36f4a8.  v2:= temp @kind object;
  #L36f4aa.  return v2 @kind object;
  #L36f4ac.  v2:= v1.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isMaybe` @type ^`boolean` @kind boolean;
  #L36f4b0.  if v2 == 0 then goto L36f4be;
  #L36f4b4.  call temp:= `singleElement`(v0) @signature `Lio/reactivex/n;.singleElement:()Lio/reactivex/i;` @kind virtual;
  #L36f4ba.  v2:= temp @kind object;
  #L36f4bc.  return v2 @kind object;
  #L36f4be.  v2:= v1.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.isCompletable` @type ^`boolean` @kind boolean;
  #L36f4c2.  if v2 == 0 then goto L36f4d0;
  #L36f4c6.  call temp:= `ignoreElements`(v0) @signature `Lio/reactivex/n;.ignoreElements:()Lio/reactivex/a;` @kind virtual;
  #L36f4cc.  v2:= temp @kind object;
  #L36f4ce.  return v2 @kind object;
  #L36f4d0.  call temp:= `n`(v0) @signature `Lio/reactivex/g0/a;.n:(Lio/reactivex/n;)Lio/reactivex/n;` @kind static;
  #L36f4d6.  v2:= temp @kind object;
  #L36f4d8.  return v2 @kind object;
}
procedure `java.lang.reflect.Type` `responseType`(`retrofit2.adapter.rxjava2.RxJava2CallAdapter` v1 @kind this) @signature `Lretrofit2/adapter/rxjava2/RxJava2CallAdapter;.responseType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36f4ec.  v0:= v1.`retrofit2.adapter.rxjava2.RxJava2CallAdapter.responseType` @type ^`java.lang.reflect.Type` @kind object;
  #L36f4f0.  return v0 @kind object;
}
