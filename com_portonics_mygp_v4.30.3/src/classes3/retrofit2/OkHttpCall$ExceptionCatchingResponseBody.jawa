record `retrofit2.OkHttpCall$ExceptionCatchingResponseBody` @kind class @AccessFlag FINAL extends `okhttp3.ResponseBody` @kind class {
  `okhttp3.ResponseBody` `retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegate` @AccessFlag PRIVATE_FINAL;
  `okio.o` `retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegateSource` @AccessFlag PRIVATE_FINAL;
  `java.io.IOException` `retrofit2.OkHttpCall$ExceptionCatchingResponseBody.thrownException` @AccessFlag ;
}
procedure `void` `<init>`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind this, `okhttp3.ResponseBody` v2 @kind object) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.<init>:(Lokhttp3/ResponseBody;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L369600.  call `<init>`(v1) @signature `Lokhttp3/ResponseBody;.<init>:()V` @kind direct;
  #L369606.  v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegate` @type ^`okhttp3.ResponseBody` := v2 @kind object;
  #L36960a.  v0:= new `retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1`;
  #L36960e.  call temp:= `source`(v2) @signature `Lokhttp3/ResponseBody;.source:()Lokio/o;` @kind virtual;
  #L369614.  v2:= temp @kind object;
  #L369616.  call `<init>`(v0, v1, v2) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody$1;.<init>:(Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;Lokio/i0;)V` @kind direct;
  #L36961c.  call temp:= `d`(v0) @signature `Lokio/v;.d:(Lokio/i0;)Lokio/o;` @kind static;
  #L369622.  v2:= temp @kind object;
  #L369624.  v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegateSource` @type ^`okio.o` := v2 @kind object;
  #L369628.  return @kind void;
}
procedure `void` `close`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36963c.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegate` @type ^`okhttp3.ResponseBody` @kind object;
  #L369640.  call `close`(v0) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L369646.  return @kind void;
}
procedure `long` `contentLength`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v2 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3695a8.  v0:= v2.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegate` @type ^`okhttp3.ResponseBody` @kind object;
  #L3695ac.  call temp:= `contentLength`(v0) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L3695b2.  v0:= temp @kind wide;
  #L3695b4.  return v0 @kind wide;
}
procedure `okhttp3.MediaType` `contentType`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.contentType:()Lokhttp3/MediaType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3695c8.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegate` @type ^`okhttp3.ResponseBody` @kind object;
  #L3695cc.  call temp:= `contentType`(v0) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L3695d2.  v0:= temp @kind object;
  #L3695d4.  return v0 @kind object;
}
procedure `okio.o` `source`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.source:()Lokio/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3695e8.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegateSource` @type ^`okio.o` @kind object;
  #L3695ec.  return v0 @kind object;
}
procedure `void` `throwIfCaught`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.throwIfCaught:()V` @AccessFlag  {
    temp;
    v0;

  #L369658.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.thrownException` @type ^`java.io.IOException` @kind object;
  #L36965c.  if v0 != 0 then goto L369662;
  #L369660.  return @kind void;
  #L369662.  throw v0;
}
