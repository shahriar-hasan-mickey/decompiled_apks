record `retrofit2.Utils$ParameterizedTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.ownerType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.rawType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$ParameterizedTypeImpl` v4 @kind this, `java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L36de78.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36de7e.  v0:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L36de82.  v1:= 0I;
  #L36de84.  if v0 == 0 then goto L36debc;
  #L36de88.  v0:= 1I;
  #L36de8a.  if v5 != 0 then goto L36de92;
  #L36de8e.  v2:= 1I;
  #L36de90.  goto L36de94;
  #L36de92.  v2:= 0I;
  #L36de94.  v3:= v6 @kind object;
  #L36de96.  v3:= (`java.lang.Class`) v3 @kind object;
  #L36de9a.  call temp:= `getEnclosingClass`(v3) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L36dea0.  v3:= temp @kind object;
  #L36dea2.  if v3 != 0 then goto L36dea8;
  #L36dea6.  goto L36deaa;
  #L36dea8.  v0:= 0I;
  #L36deaa.  if v2 != v0 then goto L36deb0;
  #L36deae.  goto L36debc;
  #L36deb0.  v5:= new `java.lang.IllegalArgumentException`;
  #L36deb4.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L36deba.  throw v5;
  #L36debc.  v0:= length @variable v7;
  #L36debe.  if v1 >= v0 then goto L36dedc;
  #L36dec2.  v2:= v7[v1] @kind object;
  #L36dec6.  v3:= "typeArgument == null" @kind object;
  #L36deca.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36ded0.  call `checkNotPrimitive`(v2) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L36ded6.  v1:= v1 + 1;
  #L36deda.  goto L36debe;
  #L36dedc.  v4.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L36dee0.  v4.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L36dee4.  call temp:= `clone`(v7) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L36deea.  v5:= temp @kind object;
  #L36deec.  v5:= (`java.lang.reflect.Type`[]) v5 @kind object;
  #L36def0.  v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] := v5 @kind object;
  #L36def4.  return @kind void;
}
procedure `boolean` `equals`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36dcfc.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L36dd00.  if v0 == 0 then goto L36dd18;
  #L36dd04.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L36dd08.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L36dd0e.  v2:= temp;
  #L36dd10.  if v2 == 0 then goto L36dd18;
  #L36dd14.  v2:= 1I;
  #L36dd16.  goto L36dd1a;
  #L36dd18.  v2:= 0I;
  #L36dd1a.  return v2;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36de54.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L36de58.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L36de5e.  v0:= temp @kind object;
  #L36de60.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L36de64.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36de24.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L36de28.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36de3c.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L36de40.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$ParameterizedTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36dd2c.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L36dd30.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L36dd36.  v0:= temp;
  #L36dd38.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L36dd3c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L36dd42.  v1:= temp;
  #L36dd44.  v0:= v0 ^~ v1 @kind int;
  #L36dd46.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L36dd4a.  if v1 == 0 then goto L36dd58;
  #L36dd4e.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L36dd54.  v1:= temp;
  #L36dd56.  goto L36dd5a;
  #L36dd58.  v1:= 0I;
  #L36dd5a.  v0:= v0 ^~ v1 @kind int;
  #L36dd5c.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$ParameterizedTypeImpl` v4 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L36dd70.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L36dd74.  v1:= length @variable v0;
  #L36dd76.  if v1 != 0 then goto L36dd88;
  #L36dd7a.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L36dd7e.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L36dd84.  v0:= temp @kind object;
  #L36dd86.  return v0 @kind object;
  #L36dd88.  v1:= new `java.lang.StringBuilder`;
  #L36dd8c.  v0:= length @variable v0;
  #L36dd8e.  v2:= 1I;
  #L36dd90.  v0:= v0 + v2 @kind int;
  #L36dd92.  v0:= v0 * 30;
  #L36dd96.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L36dd9c.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L36dda0.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L36dda6.  v0:= temp @kind object;
  #L36dda8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36ddae.  v0:= "<" @kind object;
  #L36ddb2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36ddb8.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L36ddbc.  v3:= 0I;
  #L36ddbe.  v0:= v0[v3] @kind object;
  #L36ddc2.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L36ddc8.  v0:= temp @kind object;
  #L36ddca.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36ddd0.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L36ddd4.  v0:= length @variable v0;
  #L36ddd6.  if v2 >= v0 then goto L36de00;
  #L36ddda.  v0:= ", " @kind object;
  #L36ddde.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36dde4.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L36dde8.  v0:= v0[v2] @kind object;
  #L36ddec.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L36ddf2.  v0:= temp @kind object;
  #L36ddf4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36ddfa.  v2:= v2 + 1;
  #L36ddfe.  goto L36ddd0;
  #L36de00.  v0:= ">" @kind object;
  #L36de04.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36de0a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36de10.  v0:= temp @kind object;
  #L36de12.  return v0 @kind object;
}
