record `retrofit2.DefaultCallAdapterFactory` @kind class @AccessFlag FINAL extends `retrofit2.CallAdapter$Factory` @kind class {
  `java.util.concurrent.Executor` `retrofit2.DefaultCallAdapterFactory.callbackExecutor` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.DefaultCallAdapterFactory` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object) @signature `Lretrofit2/DefaultCallAdapterFactory;.<init>:(Ljava/util/concurrent/Executor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L368868.  call `<init>`(v0) @signature `Lretrofit2/CallAdapter$Factory;.<init>:()V` @kind direct;
  #L36886e.  v0.`retrofit2.DefaultCallAdapterFactory.callbackExecutor` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L368872.  return @kind void;
}
procedure `retrofit2.CallAdapter` `get`(`retrofit2.DefaultCallAdapterFactory` v2 @kind this, `java.lang.reflect.Type` v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object, `retrofit2.Retrofit` v5 @kind object) @signature `Lretrofit2/DefaultCallAdapterFactory;.get:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/CallAdapter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3687fc.  call temp:= `getRawType`(v3) @signature `Lretrofit2/CallAdapter$Factory;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L368802.  v5:= temp @kind object;
  #L368804.  v0:= constclass @type ^`retrofit2.Call` @kind object;
  #L368808.  v1:= 0I;
  #L36880a.  if v5 == v0 then goto L368810;
  #L36880e.  return v1 @kind object;
  #L368810.  v5:= instanceof @variable v3 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L368814.  if v5 == 0 then goto L368848;
  #L368818.  v5:= 0I;
  #L36881a.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L36881e.  call temp:= `getParameterUpperBound`(v5, v3) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L368824.  v3:= temp @kind object;
  #L368826.  v5:= constclass @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L36882a.  call temp:= `isAnnotationPresent`(v4, v5) @signature `Lretrofit2/Utils;.isAnnotationPresent:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @kind static;
  #L368830.  v4:= temp;
  #L368832.  if v4 == 0 then goto L368838;
  #L368836.  goto L36883c;
  #L368838.  v1:= v2.`retrofit2.DefaultCallAdapterFactory.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L36883c.  v4:= new `retrofit2.DefaultCallAdapterFactory$1`;
  #L368840.  call `<init>`(v4, v2, v3, v1) @signature `Lretrofit2/DefaultCallAdapterFactory$1;.<init>:(Lretrofit2/DefaultCallAdapterFactory;Ljava/lang/reflect/Type;Ljava/util/concurrent/Executor;)V` @kind direct;
  #L368846.  return v4 @kind object;
  #L368848.  v3:= new `java.lang.IllegalArgumentException`;
  #L36884c.  v4:= "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>" @kind object;
  #L368850.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L368856.  throw v3;
}
