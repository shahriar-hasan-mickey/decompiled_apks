record `retrofit2.Retrofit$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.HttpUrl` `retrofit2.Retrofit$Builder.baseUrl` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.callAdapterFactories` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Call$Factory` `retrofit2.Retrofit$Builder.callFactory` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `retrofit2.Retrofit$Builder.callbackExecutor` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.converterFactories` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Platform` `retrofit2.Retrofit$Builder.platform` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.Retrofit$Builder.validateEagerly` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L36d264.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L36d26a.  v0:= temp @kind object;
  #L36d26c.  call `<init>`(v1, v0) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @kind direct;
  #L36d272.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this, `retrofit2.Platform` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L36d284.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36d28a.  v0:= new `java.util.ArrayList`;
  #L36d28e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L36d294.  v1.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` := v0 @kind object;
  #L36d298.  v0:= new `java.util.ArrayList`;
  #L36d29c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L36d2a2.  v1.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` := v0 @kind object;
  #L36d2a6.  v1.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` := v2 @kind object;
  #L36d2aa.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v4 @kind this, `retrofit2.Retrofit` v5 @kind object) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Retrofit;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L36d2bc.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36d2c2.  v0:= new `java.util.ArrayList`;
  #L36d2c6.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L36d2cc.  v4.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` := v0 @kind object;
  #L36d2d0.  v0:= new `java.util.ArrayList`;
  #L36d2d4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L36d2da.  v4.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` := v0 @kind object;
  #L36d2de.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L36d2e4.  v0:= temp @kind object;
  #L36d2e6.  v4.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` := v0 @kind object;
  #L36d2ea.  v1:= v5.`retrofit2.Retrofit.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L36d2ee.  v4.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` := v1 @kind object;
  #L36d2f2.  v1:= v5.`retrofit2.Retrofit.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L36d2f6.  v4.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` := v1 @kind object;
  #L36d2fa.  v1:= v5.`retrofit2.Retrofit.converterFactories` @type ^`java.util.List` @kind object;
  #L36d2fe.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L36d304.  v1:= temp;
  #L36d306.  call temp:= `defaultConverterFactoriesSize`(v0) @signature `Lretrofit2/Platform;.defaultConverterFactoriesSize:()I` @kind virtual;
  #L36d30c.  v0:= temp;
  #L36d30e.  v1:= v1 - v0 @kind int;
  #L36d310.  v0:= 1I;
  #L36d312.  if v0 >= v1 then goto L36d336;
  #L36d316.  v2:= v4.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L36d31a.  v3:= v5.`retrofit2.Retrofit.converterFactories` @type ^`java.util.List` @kind object;
  #L36d31e.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L36d324.  v3:= temp @kind object;
  #L36d326.  v3:= (`retrofit2.Converter$Factory`) v3 @kind object;
  #L36d32a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L36d330.  v0:= v0 + 1;
  #L36d334.  goto L36d312;
  #L36d336.  v0:= 0I;
  #L36d338.  v1:= v5.`retrofit2.Retrofit.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L36d33c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L36d342.  v1:= temp;
  #L36d344.  v2:= v4.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L36d348.  call temp:= `defaultCallAdapterFactoriesSize`(v2) @signature `Lretrofit2/Platform;.defaultCallAdapterFactoriesSize:()I` @kind virtual;
  #L36d34e.  v2:= temp;
  #L36d350.  v1:= v1 - v2 @kind int;
  #L36d352.  if v0 >= v1 then goto L36d376;
  #L36d356.  v2:= v4.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L36d35a.  v3:= v5.`retrofit2.Retrofit.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L36d35e.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L36d364.  v3:= temp @kind object;
  #L36d366.  v3:= (`retrofit2.CallAdapter$Factory`) v3 @kind object;
  #L36d36a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L36d370.  v0:= v0 + 1;
  #L36d374.  goto L36d352;
  #L36d376.  v0:= v5.`retrofit2.Retrofit.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L36d37a.  v4.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L36d37e.  v5:= v5.`retrofit2.Retrofit.validateEagerly` @type ^`boolean` @kind boolean;
  #L36d382.  v4.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` := v5 @kind boolean;
  #L36d386.  return @kind void;
}
procedure `retrofit2.Retrofit$Builder` `addCallAdapterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.CallAdapter$Factory` v3 @kind object) @signature `Lretrofit2/Retrofit$Builder;.addCallAdapterFactory:(Lretrofit2/CallAdapter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36d0a8.  v0:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L36d0ac.  v1:= "factory == null" @kind object;
  #L36d0b0.  call temp:= `requireNonNull`(v3, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36d0b6.  v3:= (`retrofit2.CallAdapter$Factory`) v3 @kind object;
  #L36d0ba.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L36d0c0.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `addConverterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.Converter$Factory` v3 @kind object) @signature `Lretrofit2/Retrofit$Builder;.addConverterFactory:(Lretrofit2/Converter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36d0d4.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L36d0d8.  v1:= "factory == null" @kind object;
  #L36d0dc.  call temp:= `requireNonNull`(v3, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36d0e2.  v3:= (`retrofit2.Converter$Factory`) v3 @kind object;
  #L36d0e6.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L36d0ec.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Ljava/lang/String;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d100.  v0:= "baseUrl == null" @kind object;
  #L36d104.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36d10a.  call temp:= `get`(v2) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L36d110.  v2:= temp @kind object;
  #L36d112.  call temp:= `baseUrl`(v1, v2) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L36d118.  v2:= temp @kind object;
  #L36d11a.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.net.URL` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Ljava/net/URL;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d12c.  v0:= "baseUrl == null" @kind object;
  #L36d130.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36d136.  call temp:= `toString`(v2) @signature `Ljava/net/URL;.toString:()Ljava/lang/String;` @kind virtual;
  #L36d13c.  v2:= temp @kind object;
  #L36d13e.  call temp:= `get`(v2) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L36d144.  v2:= temp @kind object;
  #L36d146.  call temp:= `baseUrl`(v1, v2) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L36d14c.  v2:= temp @kind object;
  #L36d14e.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v3 @kind this, `okhttp3.HttpUrl` v4 @kind object) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L36d160.  v0:= "baseUrl == null" @kind object;
  #L36d164.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36d16a.  call temp:= `pathSegments`(v4) @signature `Lokhttp3/HttpUrl;.pathSegments:()Ljava/util/List;` @kind virtual;
  #L36d170.  v0:= temp @kind object;
  #L36d172.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L36d178.  v1:= temp;
  #L36d17a.  v1:= v1 + -1;
  #L36d17e.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L36d184.  v0:= temp @kind object;
  #L36d186.  v1:= "" @kind object;
  #L36d18a.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L36d190.  v0:= temp;
  #L36d192.  if v0 == 0 then goto L36d19c;
  #L36d196.  v3.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` := v4 @kind object;
  #L36d19a.  return v3 @kind object;
  #L36d19c.  v0:= new `java.lang.IllegalArgumentException`;
  #L36d1a0.  v1:= new `java.lang.StringBuilder`;
  #L36d1a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36d1aa.  v2:= "baseUrl must end in /: " @kind object;
  #L36d1ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36d1b4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36d1ba.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36d1c0.  v4:= temp @kind object;
  #L36d1c2.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d1c8.  throw v0;
}
procedure `retrofit2.Retrofit` `build`(`retrofit2.Retrofit$Builder` v9 @kind this) @signature `Lretrofit2/Retrofit$Builder;.build:()Lretrofit2/Retrofit;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L36cfbc.  v0:= v9.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L36cfc0.  if v0 == 0 then goto L36d088;
  #L36cfc4.  v0:= v9.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L36cfc8.  if v0 != 0 then goto L36cfd6;
  #L36cfcc.  v0:= new `okhttp3.OkHttpClient`;
  #L36cfd0.  call `<init>`(v0) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @kind direct;
  #L36cfd6.  v2:= v0 @kind object;
  #L36cfd8.  v0:= v9.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L36cfdc.  if v0 != 0 then goto L36cfec;
  #L36cfe0.  v0:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L36cfe4.  call temp:= `defaultCallbackExecutor`(v0) @signature `Lretrofit2/Platform;.defaultCallbackExecutor:()Ljava/util/concurrent/Executor;` @kind virtual;
  #L36cfea.  v0:= temp @kind object;
  #L36cfec.  v6:= v0 @kind object;
  #L36cfee.  v0:= new `java.util.ArrayList`;
  #L36cff2.  v1:= v9.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L36cff6.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L36cffc.  v1:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L36d000.  call temp:= `defaultCallAdapterFactories`(v1, v6) @signature `Lretrofit2/Platform;.defaultCallAdapterFactories:(Ljava/util/concurrent/Executor;)Ljava/util/List;` @kind virtual;
  #L36d006.  v1:= temp @kind object;
  #L36d008.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L36d00e.  v1:= new `java.util.ArrayList`;
  #L36d012.  v3:= v9.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L36d016.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L36d01c.  v3:= temp;
  #L36d01e.  v3:= v3 + 1;
  #L36d022.  v4:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L36d026.  call temp:= `defaultConverterFactoriesSize`(v4) @signature `Lretrofit2/Platform;.defaultConverterFactoriesSize:()I` @kind virtual;
  #L36d02c.  v4:= temp;
  #L36d02e.  v3:= v3 + v4 @kind int;
  #L36d030.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L36d036.  v3:= new `retrofit2.BuiltInConverters`;
  #L36d03a.  call `<init>`(v3) @signature `Lretrofit2/BuiltInConverters;.<init>:()V` @kind direct;
  #L36d040.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L36d046.  v3:= v9.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L36d04a.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L36d050.  v3:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L36d054.  call temp:= `defaultConverterFactories`(v3) @signature `Lretrofit2/Platform;.defaultConverterFactories:()Ljava/util/List;` @kind virtual;
  #L36d05a.  v3:= temp @kind object;
  #L36d05c.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L36d062.  v8:= new `retrofit2.Retrofit`;
  #L36d066.  v3:= v9.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L36d06a.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L36d070.  v4:= temp @kind object;
  #L36d072.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L36d078.  v5:= temp @kind object;
  #L36d07a.  v7:= v9.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` @kind boolean;
  #L36d07e.  v1:= v8 @kind object;
  #L36d080.  call `<init>`(v1, v2, v3, v4, v5, v6, v7) @signature `Lretrofit2/Retrofit;.<init>:(Lokhttp3/Call$Factory;Lokhttp3/HttpUrl;Ljava/util/List;Ljava/util/List;Ljava/util/concurrent/Executor;Z)V` @kind direct;
  #L36d086.  return v8 @kind object;
  #L36d088.  v0:= new `java.lang.IllegalStateException`;
  #L36d08c.  v1:= "Base URL required." @kind object;
  #L36d090.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d096.  throw v0;
}
procedure `java.util.List` `callAdapterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.callAdapterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36cf8c.  v0:= v1.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L36cf90.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callFactory`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.Call$Factory` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d1dc.  v0:= "factory == null" @kind object;
  #L36d1e0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36d1e6.  v2:= (`okhttp3.Call$Factory`) v2 @kind object;
  #L36d1ea.  v1.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` := v2 @kind object;
  #L36d1ee.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callbackExecutor`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.callbackExecutor:(Ljava/util/concurrent/Executor;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d200.  v0:= "executor == null" @kind object;
  #L36d204.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36d20a.  v2:= (`java.util.concurrent.Executor`) v2 @kind object;
  #L36d20e.  v1.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L36d212.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `client`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.client:(Lokhttp3/OkHttpClient;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d224.  v0:= "client == null" @kind object;
  #L36d228.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36d22e.  v2:= (`okhttp3.Call$Factory`) v2 @kind object;
  #L36d232.  call temp:= `callFactory`(v1, v2) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L36d238.  v2:= temp @kind object;
  #L36d23a.  return v2 @kind object;
}
procedure `java.util.List` `converterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.converterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36cfa4.  v0:= v1.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L36cfa8.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `validateEagerly`(`retrofit2.Retrofit$Builder` v0 @kind this, `boolean` v1 ) @signature `Lretrofit2/Retrofit$Builder;.validateEagerly:(Z)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;

  #L36d24c.  v0.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` := v1 @kind boolean;
  #L36d250.  return v0 @kind object;
}
