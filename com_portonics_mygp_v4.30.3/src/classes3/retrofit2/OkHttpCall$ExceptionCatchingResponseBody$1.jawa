record `retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1` @kind class @AccessFlag  extends `okio.q` @kind class {
  `retrofit2.OkHttpCall$ExceptionCatchingResponseBody` `retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1` v0 @kind this, `retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind object, `okio.i0` v2 @kind object) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody$1;.<init>:(Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;Lokio/i0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L36958c.  v0.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1.this$0` @type ^`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` := v1 @kind object;
  #L369590.  call `<init>`(v0, v2) @signature `Lokio/q;.<init>:(Lokio/i0;)V` @kind direct;
  #L369596.  return @kind void;
}
procedure `long` `read`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1` v0 @kind this, `okio.k` v1 @kind object, `long` v2 ) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody$1;.read:(Lokio/k;J)J` @AccessFlag PUBLIC {
    temp;

  #L369554.  call temp:= `read`(v0, v1, v2) @signature `Lokio/q;.read:(Lokio/k;J)J` @kind super;
  #L36955a.  v1:= temp @kind wide;
  #L36955c.  return v1 @kind wide;
  #L36955e.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L369560.  v2:= v0.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1.this$0` @type ^`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` @kind object;
  #L369564.  v2.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.thrownException` @type ^`java.io.IOException` := v1 @kind object;
  #L369568.  throw v1;
  catch `java.io.IOException` @[L369554..L36955c] goto L36955e;
}
