record `retrofit2.Utils$WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.lowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.upperBound` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$WildcardTypeImpl` v4 @kind this, `java.lang.reflect.Type`[] v5 @kind object, `java.lang.reflect.Type`[] v6 @kind object) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L36e050.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L36e054.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36e05a.  v1:= length @variable v6;
  #L36e05c.  v2:= 1I;
  #L36e05e.  if v1 > v2 then goto L36e0d6;
  #L36e062.  v1:= length @variable v5;
  #L36e064.  if v1 != v2 then goto L36e0ca;
  #L36e068.  v1:= length @variable v6;
  #L36e06a.  v3:= 0I;
  #L36e06c.  if v1 != v2 then goto L36e0a6;
  #L36e070.  v1:= v6[v3] @kind object;
  #L36e074.  call temp:= `requireNonNull`(v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L36e07a.  v1:= v6[v3] @kind object;
  #L36e07e.  call `checkNotPrimitive`(v1) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L36e084.  v5:= v5[v3] @kind object;
  #L36e088.  if v5 != v0 then goto L36e09a;
  #L36e08c.  v5:= v6[v3] @kind object;
  #L36e090.  v4.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L36e094.  v4.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L36e098.  goto L36e0c8;
  #L36e09a.  v5:= new `java.lang.IllegalArgumentException`;
  #L36e09e.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L36e0a4.  throw v5;
  #L36e0a6.  v6:= v5[v3] @kind object;
  #L36e0aa.  call temp:= `requireNonNull`(v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L36e0b0.  v6:= v5[v3] @kind object;
  #L36e0b4.  call `checkNotPrimitive`(v6) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L36e0ba.  v6:= 0I;
  #L36e0bc.  v4.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L36e0c0.  v5:= v5[v3] @kind object;
  #L36e0c4.  v4.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L36e0c8.  return @kind void;
  #L36e0ca.  v5:= new `java.lang.IllegalArgumentException`;
  #L36e0ce.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L36e0d4.  throw v5;
  #L36e0d6.  v5:= new `java.lang.IllegalArgumentException`;
  #L36e0da.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L36e0e0.  throw v5;
}
procedure `boolean` `equals`(`retrofit2.Utils$WildcardTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/Utils$WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36df08.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L36df0c.  if v0 == 0 then goto L36df24;
  #L36df10.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L36df14.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L36df1a.  v2:= temp;
  #L36df1c.  if v2 == 0 then goto L36df24;
  #L36df20.  v2:= 1I;
  #L36df22.  goto L36df26;
  #L36df24.  v2:= 0I;
  #L36df26.  return v2;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L36e000.  v0:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L36e004.  if v0 == 0 then goto L36e016;
  #L36e008.  v1:= 1I;
  #L36e00a.  v1:= new `java.lang.reflect.Type`[v1];
  #L36e00e.  v2:= 0I;
  #L36e010.  v1[v2]:= v0 @kind object;
  #L36e014.  goto L36e01a;
  #L36e016.  v1:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L36e01a.  return v1 @kind object;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L36e02c.  v0:= 1I;
  #L36e02e.  v0:= new `java.lang.reflect.Type`[v0];
  #L36e032.  v1:= v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L36e036.  v2:= 0I;
  #L36e038.  v0[v2]:= v1 @kind object;
  #L36e03c.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36df38.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L36df3c.  if v0 == 0 then goto L36df4e;
  #L36df40.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L36df46.  v0:= temp;
  #L36df48.  v0:= v0 + 31;
  #L36df4c.  goto L36df50;
  #L36df4e.  v0:= 1I;
  #L36df50.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L36df54.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L36df5a.  v1:= temp;
  #L36df5c.  v1:= v1 + 31;
  #L36df60.  v0:= v0 ^~ v1 @kind int;
  #L36df62.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36df74.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L36df78.  if v0 == 0 then goto L36dfac;
  #L36df7c.  v0:= new `java.lang.StringBuilder`;
  #L36df80.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36df86.  v1:= "? super " @kind object;
  #L36df8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36df90.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L36df94.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L36df9a.  v1:= temp @kind object;
  #L36df9c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36dfa2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36dfa8.  v0:= temp @kind object;
  #L36dfaa.  return v0 @kind object;
  #L36dfac.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L36dfb0.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L36dfb4.  if v0 != v1 then goto L36dfbe;
  #L36dfb8.  v0:= "?" @kind object;
  #L36dfbc.  return v0 @kind object;
  #L36dfbe.  v0:= new `java.lang.StringBuilder`;
  #L36dfc2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36dfc8.  v1:= "? extends " @kind object;
  #L36dfcc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36dfd2.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L36dfd6.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L36dfdc.  v1:= temp @kind object;
  #L36dfde.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36dfe4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36dfea.  v0:= temp @kind object;
  #L36dfec.  return v0 @kind object;
}
