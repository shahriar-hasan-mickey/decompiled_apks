record `retrofit2.Platform` @kind class @AccessFlag  {
  `boolean` `retrofit2.Platform.hasJava8Types` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Constructor` `retrofit2.Platform.lookupConstructor` @AccessFlag PRIVATE_FINAL;
}
global `retrofit2.Platform` `@@retrofit2.Platform.PLATFORM` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/Platform;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L36ab98.  call temp:= `findPlatform`() @signature `Lretrofit2/Platform;.findPlatform:()Lretrofit2/Platform;` @kind static;
  #L36ab9e.  v0:= temp @kind object;
  #L36aba0.  `@@retrofit2.Platform.PLATFORM` @type ^`retrofit2.Platform` := v0 @kind object;
  #L36aba4.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Platform` v4 @kind this, `boolean` v5 ) @signature `Lretrofit2/Platform;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L36abb8.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36abbe.  v4.`retrofit2.Platform.hasJava8Types` @type ^`boolean` := v5 @kind boolean;
  #L36abc2.  v0:= 0I;
  #L36abc4.  if v5 == 0 then goto L36abf4;
  #L36abc8.  v5:= constclass @type ^`java.lang.invoke.MethodHandles$Lookup` @kind object;
  #L36abcc.  v1:= 2I;
  #L36abce.  v1:= new `java.lang.Class`[v1];
  #L36abd2.  v2:= 0I;
  #L36abd4.  v3:= constclass @type ^`java.lang.Class` @kind object;
  #L36abd8.  v1[v2]:= v3 @kind object;
  #L36abdc.  v2:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L36abe0.  v3:= 1I;
  #L36abe2.  v1[v3]:= v2 @kind object;
  #L36abe6.  call temp:= `getDeclaredConstructor`(v5, v1) @signature `Ljava/lang/Class;.getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L36abec.  v0:= temp @kind object;
  #L36abee.  call `setAccessible`(v0, v3) @signature `Ljava/lang/reflect/Constructor;.setAccessible:(Z)V` @kind virtual;
  #L36abf4.  v4.`retrofit2.Platform.lookupConstructor` @type ^`java.lang.reflect.Constructor` := v0 @kind object;
  #L36abf8.  return @kind void;
  catch `java.lang.NoClassDefFoundError` @[L36abc8..L36abf4] goto L36abf4;
  catch `java.lang.NoSuchMethodException` @[L36abc8..L36abf4] goto L36abf4;
}
procedure `retrofit2.Platform` `findPlatform`() @signature `Lretrofit2/Platform;.findPlatform:()Lretrofit2/Platform;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L36ab38.  v0:= "java.vm.name" @kind object;
  #L36ab3c.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L36ab42.  v0:= temp @kind object;
  #L36ab44.  v1:= "Dalvik" @kind object;
  #L36ab48.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L36ab4e.  v0:= temp;
  #L36ab50.  if v0 == 0 then goto L36ab60;
  #L36ab54.  v0:= new `retrofit2.Platform$Android`;
  #L36ab58.  call `<init>`(v0) @signature `Lretrofit2/Platform$Android;.<init>:()V` @kind direct;
  #L36ab5e.  goto L36ab6c;
  #L36ab60.  v0:= new `retrofit2.Platform`;
  #L36ab64.  v1:= 1I;
  #L36ab66.  call `<init>`(v0, v1) @signature `Lretrofit2/Platform;.<init>:(Z)V` @kind direct;
  #L36ab6c.  return v0 @kind object;
}
procedure `retrofit2.Platform` `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @AccessFlag STATIC {
    temp;
    v0;

  #L36ab80.  v0:= `@@retrofit2.Platform.PLATFORM` @type ^`retrofit2.Platform` @kind object;
  #L36ab84.  return v0 @kind object;
}
procedure `java.util.List` `defaultCallAdapterFactories`(`retrofit2.Platform` v3 @kind this, `java.util.concurrent.Executor` v4 @kind object) @signature `Lretrofit2/Platform;.defaultCallAdapterFactories:(Ljava/util/concurrent/Executor;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L36aaa8.  v0:= new `retrofit2.DefaultCallAdapterFactory`;
  #L36aaac.  call `<init>`(v0, v4) @signature `Lretrofit2/DefaultCallAdapterFactory;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L36aab2.  v4:= v3.`retrofit2.Platform.hasJava8Types` @type ^`boolean` @kind boolean;
  #L36aab6.  if v4 == 0 then goto L36aada;
  #L36aaba.  v4:= 2I;
  #L36aabc.  v4:= new `retrofit2.CallAdapter$Factory`[v4];
  #L36aac0.  v1:= 0I;
  #L36aac2.  v2:= `@@retrofit2.CompletableFutureCallAdapterFactory.INSTANCE` @type ^`retrofit2.CallAdapter$Factory` @kind object;
  #L36aac6.  v4[v1]:= v2 @kind object;
  #L36aaca.  v1:= 1I;
  #L36aacc.  v4[v1]:= v0 @kind object;
  #L36aad0.  call temp:= `asList`(v4) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L36aad6.  v4:= temp @kind object;
  #L36aad8.  goto L36aae2;
  #L36aada.  call temp:= `singletonList`(v0) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L36aae0.  v4:= temp @kind object;
  #L36aae2.  return v4 @kind object;
}
procedure `int` `defaultCallAdapterFactoriesSize`(`retrofit2.Platform` v1 @kind this) @signature `Lretrofit2/Platform;.defaultCallAdapterFactoriesSize:()I` @AccessFlag  {
    temp;
    v0;

  #L36aa0c.  v0:= v1.`retrofit2.Platform.hasJava8Types` @type ^`boolean` @kind boolean;
  #L36aa10.  if v0 == 0 then goto L36aa18;
  #L36aa14.  v0:= 2I;
  #L36aa16.  goto L36aa1a;
  #L36aa18.  v0:= 1I;
  #L36aa1a.  return v0;
}
procedure `java.util.concurrent.Executor` `defaultCallbackExecutor`(`retrofit2.Platform` v1 @kind this) @signature `Lretrofit2/Platform;.defaultCallbackExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag  {
    temp;
    v0;

  #L36ab24.  v0:= 0I;
  #L36ab26.  return v0 @kind object;
}
procedure `java.util.List` `defaultConverterFactories`(`retrofit2.Platform` v1 @kind this) @signature `Lretrofit2/Platform;.defaultConverterFactories:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;

  #L36aaf4.  v0:= v1.`retrofit2.Platform.hasJava8Types` @type ^`boolean` @kind boolean;
  #L36aaf8.  if v0 == 0 then goto L36ab0a;
  #L36aafc.  v0:= `@@retrofit2.OptionalConverterFactory.INSTANCE` @type ^`retrofit2.Converter$Factory` @kind object;
  #L36ab00.  call temp:= `singletonList`(v0) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L36ab06.  v0:= temp @kind object;
  #L36ab08.  goto L36ab12;
  #L36ab0a.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L36ab10.  v0:= temp @kind object;
  #L36ab12.  return v0 @kind object;
}
procedure `int` `defaultConverterFactoriesSize`(`retrofit2.Platform` v1 @kind this) @signature `Lretrofit2/Platform;.defaultConverterFactoriesSize:()I` @AccessFlag  {
    temp;
    v0;

  #L36aa2c.  v0:= v1.`retrofit2.Platform.hasJava8Types` @type ^`boolean` @kind boolean;
  #L36aa30.  return v0;
}
procedure `java.lang.Object` `invokeDefaultMethod`(`retrofit2.Platform` v4 @kind this, `java.lang.reflect.Method` v5 @kind object, `java.lang.Class` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object`[] v8 @kind object) @signature `Lretrofit2/Platform;.invokeDefaultMethod:(Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L36aa44.  v0:= v4.`retrofit2.Platform.lookupConstructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L36aa48.  if v0 == 0 then goto L36aa76;
  #L36aa4c.  v1:= 2I;
  #L36aa4e.  v1:= new `java.lang.Object`[v1];
  #L36aa52.  v2:= 0I;
  #L36aa54.  v1[v2]:= v6 @kind object;
  #L36aa58.  v2:= 1I;
  #L36aa5a.  v3:= -1I;
  #L36aa5c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L36aa62.  v3:= temp @kind object;
  #L36aa64.  v1[v2]:= v3 @kind object;
  #L36aa68.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L36aa6e.  v0:= temp @kind object;
  #L36aa70.  v0:= (`java.lang.invoke.MethodHandles$Lookup`) v0 @kind object;
  #L36aa74.  goto L36aa7e;
  #L36aa76.  call temp:= `lookup`() @signature `Ljava/lang/invoke/MethodHandles;.lookup:()Ljava/lang/invoke/MethodHandles$Lookup;` @kind static;
  #L36aa7c.  v0:= temp @kind object;
  #L36aa7e.  call temp:= `unreflectSpecial`(v0, v5, v6) @signature `Ljava/lang/invoke/MethodHandles$Lookup;.unreflectSpecial:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;` @kind virtual;
  #L36aa84.  v5:= temp @kind object;
  #L36aa86.  call temp:= `bindTo`(v5, v7) @signature `Ljava/lang/invoke/MethodHandle;.bindTo:(Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;` @kind virtual;
  #L36aa8c.  v5:= temp @kind object;
  #L36aa8e.  call temp:= `invokeWithArguments`(v5, v8) @signature `Ljava/lang/invoke/MethodHandle;.invokeWithArguments:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L36aa94.  v5:= temp @kind object;
  #L36aa96.  return v5 @kind object;
}
procedure `boolean` `isDefaultMethod`(`retrofit2.Platform` v1 @kind this, `java.lang.reflect.Method` v2 @kind object) @signature `Lretrofit2/Platform;.isDefaultMethod:(Ljava/lang/reflect/Method;)Z` @AccessFlag  {
    temp;
    v0;

  #L36a9e0.  v0:= v1.`retrofit2.Platform.hasJava8Types` @type ^`boolean` @kind boolean;
  #L36a9e4.  if v0 == 0 then goto L36a9f8;
  #L36a9e8.  call temp:= `isDefault`(v2) @signature `Ljava/lang/reflect/Method;.isDefault:()Z` @kind virtual;
  #L36a9ee.  v2:= temp;
  #L36a9f0.  if v2 == 0 then goto L36a9f8;
  #L36a9f4.  v2:= 1I;
  #L36a9f6.  goto L36a9fa;
  #L36a9f8.  v2:= 0I;
  #L36a9fa.  return v2;
}
