record `retrofit2.Response` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `retrofit2.Response.body` @AccessFlag PRIVATE_FINAL;
  `okhttp3.ResponseBody` `retrofit2.Response.errorBody` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Response` `retrofit2.Response.rawResponse` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Response` v0 @kind this, `okhttp3.Response` v1 @kind object, `java.lang.Object` v2 @kind object, `okhttp3.ResponseBody` v3 @kind object) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L36cec4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36ceca.  v0.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L36cece.  v0.`retrofit2.Response.body` @type ^`java.lang.Object` := v2 @kind object;
  #L36ced2.  v0.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` := v3 @kind object;
  #L36ced6.  return @kind void;
}
procedure `retrofit2.Response` `error`(`int` v5 , `okhttp3.ResponseBody` v6 @kind object) @signature `Lretrofit2/Response;.error:(ILokhttp3/ResponseBody;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L36cbac.  v0:= "body == null" @kind object;
  #L36cbb0.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36cbb6.  v0:= 400I;
  #L36cbba.  if v5 < v0 then goto L36cc42;
  #L36cbbe.  v0:= new `okhttp3.Response$Builder`;
  #L36cbc2.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L36cbc8.  v1:= new `retrofit2.OkHttpCall$NoContentResponseBody`;
  #L36cbcc.  call temp:= `contentType`(v6) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L36cbd2.  v2:= temp @kind object;
  #L36cbd4.  call temp:= `contentLength`(v6) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L36cbda.  v3:= temp @kind wide;
  #L36cbdc.  call `<init>`(v1, v2, v3) @signature `Lretrofit2/OkHttpCall$NoContentResponseBody;.<init>:(Lokhttp3/MediaType;J)V` @kind direct;
  #L36cbe2.  call temp:= `body`(v0, v1) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36cbe8.  v0:= temp @kind object;
  #L36cbea.  call temp:= `code`(v0, v5) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L36cbf0.  v5:= temp @kind object;
  #L36cbf2.  v0:= "Response.error()" @kind object;
  #L36cbf6.  call temp:= `message`(v5, v0) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36cbfc.  v5:= temp @kind object;
  #L36cbfe.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L36cc02.  call temp:= `protocol`(v5, v0) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36cc08.  v5:= temp @kind object;
  #L36cc0a.  v0:= new `okhttp3.Request$Builder`;
  #L36cc0e.  call `<init>`(v0) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L36cc14.  v1:= "http://localhost/" @kind object;
  #L36cc18.  call temp:= `url`(v0, v1) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L36cc1e.  v0:= temp @kind object;
  #L36cc20.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L36cc26.  v0:= temp @kind object;
  #L36cc28.  call temp:= `request`(v5, v0) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36cc2e.  v5:= temp @kind object;
  #L36cc30.  call temp:= `build`(v5) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L36cc36.  v5:= temp @kind object;
  #L36cc38.  call temp:= `error`(v6, v5) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L36cc3e.  v5:= temp @kind object;
  #L36cc40.  return v5 @kind object;
  #L36cc42.  v6:= new `java.lang.IllegalArgumentException`;
  #L36cc46.  v0:= new `java.lang.StringBuilder`;
  #L36cc4a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36cc50.  v1:= "code < 400: " @kind object;
  #L36cc54.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36cc5a.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L36cc60.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36cc66.  v5:= temp @kind object;
  #L36cc68.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36cc6e.  throw v6;
}
procedure `retrofit2.Response` `error`(`okhttp3.ResponseBody` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L36cc80.  v0:= "body == null" @kind object;
  #L36cc84.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36cc8a.  v0:= "rawResponse == null" @kind object;
  #L36cc8e.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36cc94.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L36cc9a.  v0:= temp;
  #L36cc9c.  if v0 != 0 then goto L36ccae;
  #L36cca0.  v0:= new `retrofit2.Response`;
  #L36cca4.  v1:= 0I;
  #L36cca6.  call `<init>`(v0, v3, v1, v2) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L36ccac.  return v0 @kind object;
  #L36ccae.  v2:= new `java.lang.IllegalArgumentException`;
  #L36ccb2.  v3:= "rawResponse should not be successful response" @kind object;
  #L36ccb6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36ccbc.  throw v2;
}
procedure `retrofit2.Response` `success`(`int` v2 , `java.lang.Object` v3 @kind object) @signature `Lretrofit2/Response;.success:(ILjava/lang/Object;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L36ccd0.  v0:= 200I;
  #L36ccd4.  if v2 < v0 then goto L36cd42;
  #L36ccd8.  v0:= 300I;
  #L36ccdc.  if v2 >= v0 then goto L36cd42;
  #L36cce0.  v0:= new `okhttp3.Response$Builder`;
  #L36cce4.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L36ccea.  call temp:= `code`(v0, v2) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L36ccf0.  v2:= temp @kind object;
  #L36ccf2.  v0:= "Response.success()" @kind object;
  #L36ccf6.  call temp:= `message`(v2, v0) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36ccfc.  v2:= temp @kind object;
  #L36ccfe.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L36cd02.  call temp:= `protocol`(v2, v0) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36cd08.  v2:= temp @kind object;
  #L36cd0a.  v0:= new `okhttp3.Request$Builder`;
  #L36cd0e.  call `<init>`(v0) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L36cd14.  v1:= "http://localhost/" @kind object;
  #L36cd18.  call temp:= `url`(v0, v1) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L36cd1e.  v0:= temp @kind object;
  #L36cd20.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L36cd26.  v0:= temp @kind object;
  #L36cd28.  call temp:= `request`(v2, v0) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36cd2e.  v2:= temp @kind object;
  #L36cd30.  call temp:= `build`(v2) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L36cd36.  v2:= temp @kind object;
  #L36cd38.  call temp:= `success`(v3, v2) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L36cd3e.  v2:= temp @kind object;
  #L36cd40.  return v2 @kind object;
  #L36cd42.  v3:= new `java.lang.IllegalArgumentException`;
  #L36cd46.  v0:= new `java.lang.StringBuilder`;
  #L36cd4a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36cd50.  v1:= "code < 200 or >= 300: " @kind object;
  #L36cd54.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36cd5a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L36cd60.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36cd66.  v2:= temp @kind object;
  #L36cd68.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36cd6e.  throw v3;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L36cd80.  v0:= new `okhttp3.Response$Builder`;
  #L36cd84.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L36cd8a.  v1:= 200I;
  #L36cd8e.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L36cd94.  v0:= temp @kind object;
  #L36cd96.  v1:= "OK" @kind object;
  #L36cd9a.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36cda0.  v0:= temp @kind object;
  #L36cda2.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L36cda6.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36cdac.  v0:= temp @kind object;
  #L36cdae.  v1:= new `okhttp3.Request$Builder`;
  #L36cdb2.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L36cdb8.  v2:= "http://localhost/" @kind object;
  #L36cdbc.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L36cdc2.  v1:= temp @kind object;
  #L36cdc4.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L36cdca.  v1:= temp @kind object;
  #L36cdcc.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36cdd2.  v0:= temp @kind object;
  #L36cdd4.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L36cdda.  v0:= temp @kind object;
  #L36cddc.  call temp:= `success`(v3, v0) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L36cde2.  v3:= temp @kind object;
  #L36cde4.  return v3 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v2 @kind object, `okhttp3.Headers` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Headers;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L36cdf8.  v0:= "headers == null" @kind object;
  #L36cdfc.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36ce02.  v0:= new `okhttp3.Response$Builder`;
  #L36ce06.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L36ce0c.  v1:= 200I;
  #L36ce10.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L36ce16.  v0:= temp @kind object;
  #L36ce18.  v1:= "OK" @kind object;
  #L36ce1c.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36ce22.  v0:= temp @kind object;
  #L36ce24.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L36ce28.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36ce2e.  v0:= temp @kind object;
  #L36ce30.  call temp:= `headers`(v0, v3) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36ce36.  v3:= temp @kind object;
  #L36ce38.  v0:= new `okhttp3.Request$Builder`;
  #L36ce3c.  call `<init>`(v0) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L36ce42.  v1:= "http://localhost/" @kind object;
  #L36ce46.  call temp:= `url`(v0, v1) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L36ce4c.  v0:= temp @kind object;
  #L36ce4e.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L36ce54.  v0:= temp @kind object;
  #L36ce56.  call temp:= `request`(v3, v0) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L36ce5c.  v3:= temp @kind object;
  #L36ce5e.  call temp:= `build`(v3) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L36ce64.  v3:= temp @kind object;
  #L36ce66.  call temp:= `success`(v2, v3) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L36ce6c.  v2:= temp @kind object;
  #L36ce6e.  return v2 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L36ce80.  v0:= "rawResponse == null" @kind object;
  #L36ce84.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L36ce8a.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L36ce90.  v0:= temp;
  #L36ce92.  if v0 == 0 then goto L36cea4;
  #L36ce96.  v0:= new `retrofit2.Response`;
  #L36ce9a.  v1:= 0I;
  #L36ce9c.  call `<init>`(v0, v3, v2, v1) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L36cea2.  return v0 @kind object;
  #L36cea4.  v2:= new `java.lang.IllegalArgumentException`;
  #L36cea8.  v3:= "rawResponse must be successful response" @kind object;
  #L36ceac.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36ceb2.  throw v2;
}
procedure `java.lang.Object` `body`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.body:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36cb04.  v0:= v1.`retrofit2.Response.body` @type ^`java.lang.Object` @kind object;
  #L36cb08.  return v0 @kind object;
}
procedure `int` `code`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36cae4.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L36cae8.  call temp:= `code`(v0) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L36caee.  v0:= temp;
  #L36caf0.  return v0;
}
procedure `okhttp3.ResponseBody` `errorBody`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.errorBody:()Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36cb94.  v0:= v1.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` @kind object;
  #L36cb98.  return v0 @kind object;
}
procedure `okhttp3.Headers` `headers`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.headers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36cb5c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L36cb60.  call temp:= `headers`(v0) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L36cb66.  v0:= temp @kind object;
  #L36cb68.  return v0 @kind object;
}
procedure `boolean` `isSuccessful`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.isSuccessful:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36cac4.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L36cac8.  call temp:= `isSuccessful`(v0) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L36cace.  v0:= temp;
  #L36cad0.  return v0;
}
procedure `java.lang.String` `message`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36cb1c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L36cb20.  call temp:= `message`(v0) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @kind virtual;
  #L36cb26.  v0:= temp @kind object;
  #L36cb28.  return v0 @kind object;
}
procedure `okhttp3.Response` `raw`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.raw:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36cb7c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L36cb80.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36cb3c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L36cb40.  call temp:= `toString`(v0) @signature `Lokhttp3/Response;.toString:()Ljava/lang/String;` @kind virtual;
  #L36cb46.  v0:= temp @kind object;
  #L36cb48.  return v0 @kind object;
}
