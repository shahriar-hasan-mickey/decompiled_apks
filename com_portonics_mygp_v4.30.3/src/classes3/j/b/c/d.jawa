record `j.b.c.d` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `java.lang.Object` `a`(`java.lang.Object` v0 @kind object) @signature `Lj/b/c/d;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L207d24.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L207d2a.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lj/b/c/d;.b:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L207d3c.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L207d42.  return v0 @kind object;
}
procedure `void` `c`(`boolean` v0 , `java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lj/b/c/d;.c:(ZLjava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L207d54.  if v0 == 0 then goto L207d5a;
  #L207d58.  return @kind void;
  #L207d5a.  v0:= new `java.lang.IllegalStateException`;
  #L207d5e.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L207d64.  v1:= temp @kind object;
  #L207d66.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L207d6c.  throw v0;
}
