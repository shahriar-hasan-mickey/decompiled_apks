record `j.b.b.f.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `java.lang.Thread` `@@j.b.b.f.b.a` @AccessFlag PRIVATE_STATIC;
procedure `void` `a`() @signature `Lj/b/b/f/b;.a:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2072f0.  call temp:= `b`() @signature `Lj/b/b/f/b;.b:()Z` @kind static;
  #L2072f6.  v0:= temp;
  #L2072f8.  if v0 == 0 then goto L2072fe;
  #L2072fc.  return @kind void;
  #L2072fe.  v0:= new `java.lang.IllegalStateException`;
  #L207302.  v1:= "Must be called on the Main thread." @kind object;
  #L207306.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20730c.  throw v0;
}
procedure `boolean` `b`() @signature `Lj/b/b/f/b;.b:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2072ac.  v0:= `@@j.b.b.f.b.a` @type ^`java.lang.Thread` @kind object;
  #L2072b0.  if v0 != 0 then goto L2072c8;
  #L2072b4.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L2072ba.  v0:= temp @kind object;
  #L2072bc.  call temp:= `getThread`(v0) @signature `Landroid/os/Looper;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L2072c2.  v0:= temp @kind object;
  #L2072c4.  `@@j.b.b.f.b.a` @type ^`java.lang.Thread` := v0 @kind object;
  #L2072c8.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2072ce.  v0:= temp @kind object;
  #L2072d0.  v1:= `@@j.b.b.f.b.a` @type ^`java.lang.Thread` @kind object;
  #L2072d4.  if v0 != v1 then goto L2072dc;
  #L2072d8.  v0:= 1I;
  #L2072da.  goto L2072de;
  #L2072dc.  v0:= 0I;
  #L2072de.  return v0;
}
