record `p.a.a.a.e` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<clinit>`() @signature `Lp/a/a/a/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L371858.  return @kind void;
}
procedure `byte`[] `a`(`java.lang.String` v0 @kind object, `int` v1 ) @signature `Lp/a/a/a/e;.a:(Ljava/lang/String;I)[B` @AccessFlag PUBLIC_STATIC {
    temp;

  #L371738.  call temp:= `getBytes`(v0) @signature `Ljava/lang/String;.getBytes:()[B` @kind virtual;
  #L37173e.  v0:= temp @kind object;
  #L371740.  call temp:= `b`(v0, v1) @signature `Lp/a/a/a/e;.b:([BI)[B` @kind static;
  #L371746.  v0:= temp @kind object;
  #L371748.  return v0 @kind object;
}
procedure `byte`[] `b`(`byte`[] v2 @kind object, `int` v3 ) @signature `Lp/a/a/a/e;.b:([BI)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3716b4.  v0:= length @variable v2;
  #L3716b6.  v1:= 0I;
  #L3716b8.  call temp:= `c`(v2, v1, v0, v3) @signature `Lp/a/a/a/e;.c:([BIII)[B` @kind static;
  #L3716be.  v2:= temp @kind object;
  #L3716c0.  return v2 @kind object;
}
procedure `byte`[] `c`(`byte`[] v2 @kind object, `int` v3 , `int` v4 , `int` v5 ) @signature `Lp/a/a/a/e;.c:([BIII)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3716d4.  v0:= new `p.a.a.a.c`;
  #L3716d8.  v1:= v4 * 3;
  #L3716dc.  v1:= v1 / 4;
  #L3716e0.  v1:= new `byte`[v1];
  #L3716e4.  call `<init>`(v0, v5, v1) @signature `Lp/a/a/a/c;.<init>:(I[B)V` @kind direct;
  #L3716ea.  v5:= 1I;
  #L3716ec.  call temp:= `a`(v0, v2, v3, v4, v5) @signature `Lp/a/a/a/c;.a:([BIIZ)Z` @kind virtual;
  #L3716f2.  v2:= temp;
  #L3716f4.  if v2 == 0 then goto L371716;
  #L3716f8.  v2:= v0.`p.a.a.a.b.b` @type ^`int`;
  #L3716fc.  v3:= v0.`p.a.a.a.b.a` @type ^`byte`[] @kind object;
  #L371700.  v4:= length @variable v3;
  #L371702.  if v2 != v4 then goto L371708;
  #L371706.  return v3 @kind object;
  #L371708.  v4:= new `byte`[v2];
  #L37170c.  v5:= 0I;
  #L37170e.  call `arraycopy`(v3, v5, v4, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L371714.  return v4 @kind object;
  #L371716.  v2:= new `java.lang.IllegalArgumentException`;
  #L37171a.  v3:= "bad base-64" @kind object;
  #L37171e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L371724.  throw v2;
}
procedure `byte`[] `d`(`byte`[] v2 @kind object, `int` v3 ) @signature `Lp/a/a/a/e;.d:([BI)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L37175c.  v0:= length @variable v2;
  #L37175e.  v1:= 0I;
  #L371760.  call temp:= `e`(v2, v1, v0, v3) @signature `Lp/a/a/a/e;.e:([BIII)[B` @kind static;
  #L371766.  v2:= temp @kind object;
  #L371768.  return v2 @kind object;
}
procedure `byte`[] `e`(`byte`[] v5 @kind object, `int` v6 , `int` v7 , `int` v8 ) @signature `Lp/a/a/a/e;.e:([BIII)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37177c.  v0:= new `p.a.a.a.d`;
  #L371780.  v1:= 0I;
  #L371782.  call `<init>`(v0, v8, v1) @signature `Lp/a/a/a/d;.<init>:(I[B)V` @kind direct;
  #L371788.  v8:= v7 / 3;
  #L37178c.  v8:= v8 * 4;
  #L371790.  v1:= v0.`p.a.a.a.d.h` @type ^`boolean` @kind boolean;
  #L371794.  v2:= 2I;
  #L371796.  v3:= 1I;
  #L371798.  if v1 == 0 then goto L3717aa;
  #L37179c.  v1:= v7 %% 3;
  #L3717a0.  if v1 <= 0 then goto L3717c2;
  #L3717a4.  v8:= v8 + 4;
  #L3717a8.  goto L3717c2;
  #L3717aa.  v1:= v7 %% 3;
  #L3717ae.  if v1 == v3 then goto L3717be;
  #L3717b2.  if v1 == v2 then goto L3717b8;
  #L3717b6.  goto L3717c2;
  #L3717b8.  v8:= v8 + 3;
  #L3717bc.  goto L3717c2;
  #L3717be.  v8:= v8 + 2;
  #L3717c2.  v1:= v0.`p.a.a.a.d.i` @type ^`boolean` @kind boolean;
  #L3717c6.  if v1 == 0 then goto L3717ea;
  #L3717ca.  if v7 <= 0 then goto L3717ea;
  #L3717ce.  v1:= v7 + -1;
  #L3717d2.  v1:= v1 / 57;
  #L3717d6.  v1:= v1 + v3 @kind int;
  #L3717d8.  v4:= v0.`p.a.a.a.d.j` @type ^`boolean` @kind boolean;
  #L3717dc.  if v4 == 0 then goto L3717e2;
  #L3717e0.  goto L3717e4;
  #L3717e2.  v2:= 1I;
  #L3717e4.  v1:= v1 * v2 @kind int;
  #L3717e8.  v8:= v8 + v1 @kind int;
  #L3717ea.  v8:= new `byte`[v8];
  #L3717ee.  v0.`p.a.a.a.b.a` @type ^`byte`[] := v8 @kind object;
  #L3717f2.  call `a`(v0, v5, v6, v7, v3) @signature `Lp/a/a/a/d;.a:([BIIZ)V` @kind virtual;
  #L3717f8.  v5:= v0.`p.a.a.a.b.a` @type ^`byte`[] @kind object;
  #L3717fc.  return v5 @kind object;
}
procedure `java.lang.String` `f`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lp/a/a/a/e;.f:([BI)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L371810.  v0:= new `java.lang.String`;
  #L371814.  call temp:= `d`(v1, v2) @signature `Lp/a/a/a/e;.d:([BI)[B` @kind static;
  #L37181a.  v1:= temp @kind object;
  #L37181c.  v2:= "US-ASCII" @kind object;
  #L371820.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L371826.  return v0 @kind object;
  #L371828.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L37182a.  v2:= new `java.lang.AssertionError`;
  #L37182e.  call `<init>`(v2, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L371834.  throw v2;
  catch `java.io.UnsupportedEncodingException` @[L371810..L371826] goto L371828;
}
