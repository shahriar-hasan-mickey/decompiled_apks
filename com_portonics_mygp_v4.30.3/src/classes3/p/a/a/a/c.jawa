record `p.a.a.a.c` @kind class @AccessFlag  extends `p.a.a.a.b` @kind class {
  `int` `p.a.a.a.c.e` @AccessFlag PRIVATE;
  `int` `p.a.a.a.c.f` @AccessFlag PRIVATE;
  `int`[] `p.a.a.a.c.g` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@p.a.a.a.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@p.a.a.a.c.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lp/a/a/a/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L370914.  v0:= 256I;
  #L370918.  v1:= new `int`[v0];
  #L37091c.  goto L370938;
  #L370922.  `@@p.a.a.a.c.c` @type ^`int`[] := v1 @kind object;
  #L370926.  v0:= new `int`[v0];
  #L37092a.  goto L370d40;
  #L370930.  `@@p.a.a.a.c.d` @type ^`int`[] := v0 @kind object;
  #L370934.  return @kind void;
  #L370936.  
  #L370938.  v1:= (-1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, 62I, -1I, -1I, -1I, 63I, 52I, 53I, 54I, 55I, 56I, 57I, 58I, 59I, 60I, 61I, -1I, -1I, -1I, -2I, -1I, -1I, -1I, 0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I, 10I, 11I, 12I, 13I, 14I, 15I, 16I, 17I, 18I, 19I, 20I, 21I, 22I, 23I, 24I, 25I, -1I, -1I, -1I, -1I, -1I, -1I, 26I, 27I, 28I, 29I, 30I, 31I, 32I, 33I, 34I, 35I, 36I, 37I, 38I, 39I, 40I, 41I, 42I, 43I, 44I, 45I, 46I, 47I, 48I, 49I, 50I, 51I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I) @kind object;
  #L370d3f.  goto L370922;
  #L370d40.  v0:= (-1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, 62I, -1I, -1I, 52I, 53I, 54I, 55I, 56I, 57I, 58I, 59I, 60I, 61I, -1I, -1I, -1I, -2I, -1I, -1I, -1I, 0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I, 10I, 11I, 12I, 13I, 14I, 15I, 16I, 17I, 18I, 19I, 20I, 21I, 22I, 23I, 24I, 25I, -1I, -1I, -1I, -1I, 63I, -1I, 26I, 27I, 28I, 29I, 30I, 31I, 32I, 33I, 34I, 35I, 36I, 37I, 38I, 39I, 40I, 41I, 42I, 43I, 44I, 45I, 46I, 47I, 48I, 49I, 50I, 51I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I) @kind object;
  #L371147.  goto L370930;
}
procedure `void` `<init>`(`p.a.a.a.c` v1 @kind this, `int` v2 , `byte`[] v3 @kind object) @signature `Lp/a/a/a/c;.<init>:(I[B)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L371158.  v0:= 0I;
  #L37115a.  call `<init>`(v1, v0) @signature `Lp/a/a/a/b;.<init>:(Lp/a/a/a/a;)V` @kind direct;
  #L371160.  v1.`p.a.a.a.b.a` @type ^`byte`[] := v3 @kind object;
  #L371164.  v2:= v2 ^& 8;
  #L371168.  if v2 != 0 then goto L371172;
  #L37116c.  v2:= `@@p.a.a.a.c.c` @type ^`int`[] @kind object;
  #L371170.  goto L371176;
  #L371172.  v2:= `@@p.a.a.a.c.d` @type ^`int`[] @kind object;
  #L371176.  v1.`p.a.a.a.c.g` @type ^`int`[] := v2 @kind object;
  #L37117a.  v2:= 0I;
  #L37117c.  v1.`p.a.a.a.c.e` @type ^`int` := v2;
  #L371180.  v1.`p.a.a.a.c.f` @type ^`int` := v2;
  #L371184.  return @kind void;
}
procedure `boolean` `a`(`p.a.a.a.c` v16 @kind this, `byte`[] v17 @kind object, `int` v18 , `int` v19 , `boolean` v20 ) @signature `Lp/a/a/a/c;.a:([BIIZ)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L3706b8.  v0:= v16 @kind object;
  #L3706bc.  v1:= v0.`p.a.a.a.c.e` @type ^`int`;
  #L3706c0.  v2:= 0I;
  #L3706c2.  v3:= 6I;
  #L3706c4.  if v1 != v3 then goto L3706ca;
  #L3706c8.  return v2;
  #L3706ca.  v4:= v19 + v18 @kind int;
  #L3706ce.  v5:= v0.`p.a.a.a.c.f` @type ^`int`;
  #L3706d2.  v6:= v0.`p.a.a.a.b.a` @type ^`byte`[] @kind object;
  #L3706d6.  v7:= v0.`p.a.a.a.c.g` @type ^`int`[] @kind object;
  #L3706da.  v8:= v5;
  #L3706dc.  v9:= 0I;
  #L3706de.  v5:= v1;
  #L3706e0.  v1:= v18;
  #L3706e4.  v10:= 3I;
  #L3706e6.  v11:= 4I;
  #L3706e8.  v12:= 2I;
  #L3706ea.  v13:= 1I;
  #L3706ec.  if v1 >= v4 then goto L37089a;
  #L3706f0.  if v5 != 0 then goto L37077e;
  #L3706f4.  v14:= v1 + 4;
  #L3706f8.  if v14 > v4 then goto L370776;
  #L3706fc.  v8:= v17[v1] @kind byte;
  #L370700.  v8:= v8 ^& 255;
  #L370704.  v8:= v7[v8];
  #L370708.  v8:= v8 ^< 18;
  #L37070c.  v15:= v1 + 1;
  #L370710.  v15:= v17[v15] @kind byte;
  #L370714.  v15:= v15 ^& 255;
  #L370718.  v15:= v7[v15];
  #L37071c.  v15:= v15 ^< 12;
  #L370720.  v8:= v8 ^| v15 @kind int;
  #L370722.  v15:= v1 + 2;
  #L370726.  v15:= v17[v15] @kind byte;
  #L37072a.  v15:= v15 ^& 255;
  #L37072e.  v15:= v7[v15];
  #L370732.  v15:= v15 ^< v3 @kind int;
  #L370734.  v8:= v8 ^| v15 @kind int;
  #L370736.  v15:= v1 + 3;
  #L37073a.  v15:= v17[v15] @kind byte;
  #L37073e.  v15:= v15 ^& 255;
  #L370742.  v15:= v7[v15];
  #L370746.  v8:= v8 ^| v15 @kind int;
  #L370748.  if v8 < 0 then goto L370776;
  #L37074c.  v1:= v9 + 2;
  #L370750.  v15:= (`byte`) v8 @kind i2b;
  #L370752.  v6[v1]:= v15 @kind byte;
  #L370756.  v1:= v9 + 1;
  #L37075a.  v15:= v8 ^> 8;
  #L37075e.  v15:= (`byte`) v15 @kind i2b;
  #L370760.  v6[v1]:= v15 @kind byte;
  #L370764.  v1:= v8 ^> 16;
  #L370768.  v1:= (`byte`) v1 @kind i2b;
  #L37076a.  v6[v9]:= v1 @kind byte;
  #L37076e.  v9:= v9 + 3;
  #L370772.  v1:= v14;
  #L370774.  goto L3706f4;
  #L370776.  if v1 < v4 then goto L37077e;
  #L37077a.  goto L37089a;
  #L37077e.  v14:= v1 + 1;
  #L370782.  v1:= v17[v1] @kind byte;
  #L370786.  v1:= v1 ^& 255;
  #L37078a.  v1:= v7[v1];
  #L37078e.  v15:= 5I;
  #L370790.  v2:= -1I;
  #L370792.  if v5 == 0 then goto L37087a;
  #L370796.  if v5 == v13 then goto L370862;
  #L37079a.  v13:= -2I;
  #L37079c.  if v5 == v12 then goto L37083a;
  #L3707a0.  if v5 == v10 then goto L3707d4;
  #L3707a4.  if v5 == v11 then goto L3707bc;
  #L3707a8.  if v5 == v15 then goto L3707b0;
  #L3707ac.  goto L370892;
  #L3707b0.  if v1 == v2 then goto L370892;
  #L3707b4.  v0.`p.a.a.a.c.e` @type ^`int` := v3;
  #L3707b8.  v10:= 0I;
  #L3707ba.  return v10;
  #L3707bc.  v10:= 0I;
  #L3707be.  if v1 != v13 then goto L3707ca;
  #L3707c2.  v5:= v5 + 1;
  #L3707c6.  goto L370892;
  #L3707ca.  if v1 == v2 then goto L370892;
  #L3707ce.  v0.`p.a.a.a.c.e` @type ^`int` := v3;
  #L3707d2.  return v10;
  #L3707d4.  if v1 < 0 then goto L37080a;
  #L3707d8.  v2:= v8 ^< 6;
  #L3707dc.  v1:= v1 ^| v2 @kind int;
  #L3707de.  v2:= v9 + 2;
  #L3707e2.  v5:= (`byte`) v1 @kind i2b;
  #L3707e4.  v6[v2]:= v5 @kind byte;
  #L3707e8.  v2:= v9 + 1;
  #L3707ec.  v5:= v1 ^> 8;
  #L3707f0.  v5:= (`byte`) v5 @kind i2b;
  #L3707f2.  v6[v2]:= v5 @kind byte;
  #L3707f6.  v2:= v1 ^> 16;
  #L3707fa.  v2:= (`byte`) v2 @kind i2b;
  #L3707fc.  v6[v9]:= v2 @kind byte;
  #L370800.  v9:= v9 + 3;
  #L370804.  v8:= v1;
  #L370806.  v5:= 0I;
  #L370808.  goto L370892;
  #L37080a.  if v1 != v13 then goto L37082e;
  #L37080e.  v1:= v9 + 1;
  #L370812.  v2:= v8 ^> 2;
  #L370816.  v2:= (`byte`) v2 @kind i2b;
  #L370818.  v6[v1]:= v2 @kind byte;
  #L37081c.  v1:= v8 ^> 10;
  #L370820.  v1:= (`byte`) v1 @kind i2b;
  #L370822.  v6[v9]:= v1 @kind byte;
  #L370826.  v9:= v9 + 2;
  #L37082a.  v5:= 5I;
  #L37082c.  goto L370892;
  #L37082e.  if v1 == v2 then goto L370892;
  #L370832.  v0.`p.a.a.a.c.e` @type ^`int` := v3;
  #L370836.  v1:= 0I;
  #L370838.  return v1;
  #L37083a.  if v1 < 0 then goto L370840;
  #L37083e.  goto L370868;
  #L370840.  if v1 != v13 then goto L370858;
  #L370844.  v1:= v9 + 1;
  #L370848.  v2:= v8 ^> 4;
  #L37084c.  v2:= (`byte`) v2 @kind i2b;
  #L37084e.  v6[v9]:= v2 @kind byte;
  #L370852.  v9:= v1;
  #L370854.  v5:= 4I;
  #L370856.  goto L370892;
  #L370858.  if v1 == v2 then goto L370892;
  #L37085c.  v0.`p.a.a.a.c.e` @type ^`int` := v3;
  #L370860.  goto L3707b8;
  #L370862.  v10:= 0I;
  #L370864.  if v1 < 0 then goto L370870;
  #L370868.  v2:= v8 ^< 6;
  #L37086c.  v1:= v1 ^| v2 @kind int;
  #L37086e.  goto L370880;
  #L370870.  if v1 == v2 then goto L370892;
  #L370874.  v0.`p.a.a.a.c.e` @type ^`int` := v3;
  #L370878.  return v10;
  #L37087a.  v10:= 0I;
  #L37087c.  if v1 < 0 then goto L370888;
  #L370880.  v5:= v5 + 1;
  #L370884.  v8:= v1;
  #L370886.  goto L370892;
  #L370888.  if v1 == v2 then goto L370892;
  #L37088c.  v0.`p.a.a.a.c.e` @type ^`int` := v3;
  #L370890.  return v10;
  #L370892.  v1:= v14;
  #L370894.  v2:= 0I;
  #L370896.  goto L3706e4;
  #L37089a.  if v20 != 0 then goto L3708ac;
  #L37089e.  v0.`p.a.a.a.c.e` @type ^`int` := v5;
  #L3708a2.  v0.`p.a.a.a.c.f` @type ^`int` := v8;
  #L3708a6.  v0.`p.a.a.a.b.b` @type ^`int` := v9;
  #L3708aa.  return v13;
  #L3708ac.  if v5 == v13 then goto L3708fc;
  #L3708b0.  if v5 == v12 then goto L3708e2;
  #L3708b4.  if v5 == v10 then goto L3708c4;
  #L3708b8.  if v5 == v11 then goto L3708be;
  #L3708bc.  goto L3708f2;
  #L3708be.  v0.`p.a.a.a.c.e` @type ^`int` := v3;
  #L3708c2.  goto L370836;
  #L3708c4.  v1:= v9 + 1;
  #L3708c8.  v2:= v8 ^> 10;
  #L3708cc.  v2:= (`byte`) v2 @kind i2b;
  #L3708ce.  v6[v9]:= v2 @kind byte;
  #L3708d2.  v9:= v1 + 1;
  #L3708d6.  v2:= v8 ^> 2;
  #L3708da.  v2:= (`byte`) v2 @kind i2b;
  #L3708dc.  v6[v1]:= v2 @kind byte;
  #L3708e0.  goto L3708f2;
  #L3708e2.  v1:= v9 + 1;
  #L3708e6.  v2:= v8 ^> 4;
  #L3708ea.  v2:= (`byte`) v2 @kind i2b;
  #L3708ec.  v6[v9]:= v2 @kind byte;
  #L3708f0.  v9:= v1;
  #L3708f2.  v0.`p.a.a.a.c.e` @type ^`int` := v5;
  #L3708f6.  v0.`p.a.a.a.b.b` @type ^`int` := v9;
  #L3708fa.  return v13;
  #L3708fc.  v0.`p.a.a.a.c.e` @type ^`int` := v3;
  #L370900.  goto L370836;
}
