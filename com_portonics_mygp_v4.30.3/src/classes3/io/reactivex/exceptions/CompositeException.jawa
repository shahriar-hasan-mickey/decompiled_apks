record `io.reactivex.exceptions.CompositeException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.lang.Throwable` `io.reactivex.exceptions.CompositeException.cause` @AccessFlag PRIVATE;
  `java.util.List` `io.reactivex.exceptions.CompositeException.exceptions` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.reactivex.exceptions.CompositeException.message` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@io.reactivex.exceptions.CompositeException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.exceptions.CompositeException` v4 @kind this, `java.lang.Iterable` v5 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L247238.  call `<init>`(v4) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L24723e.  v0:= new `java.util.LinkedHashSet`;
  #L247242.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L247248.  v1:= new `java.util.ArrayList`;
  #L24724c.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L247252.  if v5 == 0 then goto L2472b4;
  #L247256.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L24725c.  v5:= temp @kind object;
  #L24725e.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L247264.  v2:= temp;
  #L247266.  if v2 == 0 then goto L2472c8;
  #L24726a.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L247270.  v2:= temp @kind object;
  #L247272.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L247276.  v3:= instanceof @variable v2 @type ^`io.reactivex.exceptions.CompositeException` @kind boolean;
  #L24727a.  if v3 == 0 then goto L247292;
  #L24727e.  v2:= (`io.reactivex.exceptions.CompositeException`) v2 @kind object;
  #L247282.  call temp:= `getExceptions`(v2) @signature `Lio/reactivex/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L247288.  v2:= temp @kind object;
  #L24728a.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L247290.  goto L24725e;
  #L247292.  if v2 == 0 then goto L24729e;
  #L247296.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24729c.  goto L24725e;
  #L24729e.  v2:= new `java.lang.NullPointerException`;
  #L2472a2.  v3:= "Throwable was null!" @kind object;
  #L2472a6.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2472ac.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2472b2.  goto L24725e;
  #L2472b4.  v5:= new `java.lang.NullPointerException`;
  #L2472b8.  v2:= "errors was null" @kind object;
  #L2472bc.  call `<init>`(v5, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2472c2.  call temp:= `add`(v0, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2472c8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L2472ce.  v5:= temp;
  #L2472d0.  if v5 != 0 then goto L247316;
  #L2472d4.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2472da.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2472e0.  v5:= temp @kind object;
  #L2472e2.  v4.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` := v5 @kind object;
  #L2472e6.  v0:= new `java.lang.StringBuilder`;
  #L2472ea.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2472f0.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2472f6.  v5:= temp;
  #L2472f8.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2472fe.  v5:= " exceptions occurred. " @kind object;
  #L247302.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247308.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24730e.  v5:= temp @kind object;
  #L247310.  v4.`io.reactivex.exceptions.CompositeException.message` @type ^`java.lang.String` := v5 @kind object;
  #L247314.  return @kind void;
  #L247316.  v5:= new `java.lang.IllegalArgumentException`;
  #L24731a.  v0:= "errors is empty" @kind object;
  #L24731e.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247324.  goto L247328;
  #L247326.  throw v5;
  #L247328.  goto L247326;
}
procedure `void` `<init>`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.lang.Throwable`[] v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L24733c.  if v2 != 0 then goto L247358;
  #L247340.  v2:= new `java.lang.NullPointerException`;
  #L247344.  v0:= "exceptions was null" @kind object;
  #L247348.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24734e.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L247354.  v2:= temp @kind object;
  #L247356.  goto L247360;
  #L247358.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L24735e.  v2:= temp @kind object;
  #L247360.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L247366.  return @kind void;
}
procedure `void` `a`(`io.reactivex.exceptions.CompositeException` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.lang.Throwable` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L247378.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24737e.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247384.  v8:= 10I;
  #L247388.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L24738e.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L247394.  v0:= temp @kind object;
  #L247396.  v1:= length @variable v0;
  #L247398.  v2:= 0I;
  #L24739a.  if v2 >= v1 then goto L2473be;
  #L24739e.  v3:= v0[v2] @kind object;
  #L2473a2.  v4:= "\t\tat " @kind object;
  #L2473a6.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2473ac.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2473b2.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2473b8.  v2:= v2 + 1;
  #L2473bc.  goto L24739a;
  #L2473be.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L2473c4.  v8:= temp @kind object;
  #L2473c6.  if v8 == 0 then goto L2473e6;
  #L2473ca.  v8:= "\tCaused by: " @kind object;
  #L2473ce.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2473d4.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L2473da.  v7:= temp @kind object;
  #L2473dc.  v8:= "" @kind object;
  #L2473e0.  call `a`(v5, v6, v7, v8) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L2473e6.  return @kind void;
}
procedure `java.util.List` `b`(`io.reactivex.exceptions.CompositeException` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.b:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2471ec.  v0:= new `java.util.ArrayList`;
  #L2471f0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2471f6.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L2471fc.  v1:= temp @kind object;
  #L2471fe.  if v1 == 0 then goto L247224;
  #L247202.  if v1 != v3 then goto L247208;
  #L247206.  goto L247224;
  #L247208.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24720e.  call temp:= `getCause`(v1) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L247214.  v3:= temp @kind object;
  #L247216.  if v3 == 0 then goto L247224;
  #L24721a.  if v3 != v1 then goto L247220;
  #L24721e.  goto L247224;
  #L247220.  v1:= v3 @kind object;
  #L247222.  goto L247208;
  #L247224.  return v0 @kind object;
}
procedure `void` `c`(`io.reactivex.exceptions.CompositeException` v7 @kind this, `io.reactivex.exceptions.CompositeException$a` v8 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.c:(Lio/reactivex/exceptions/CompositeException$a;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L247414.  v0:= new `java.lang.StringBuilder`;
  #L247418.  v1:= 128I;
  #L24741c.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L247422.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247428.  v1:= 10I;
  #L24742c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L247432.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/RuntimeException;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L247438.  v2:= temp @kind object;
  #L24743a.  v3:= length @variable v2;
  #L24743c.  v4:= 0I;
  #L24743e.  if v4 >= v3 then goto L247462;
  #L247442.  v5:= v2[v4] @kind object;
  #L247446.  v6:= "\tat " @kind object;
  #L24744a.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247450.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247456.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L24745c.  v4:= v4 + 1;
  #L247460.  goto L24743e;
  #L247462.  v1:= v7.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L247466.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L24746c.  v1:= temp @kind object;
  #L24746e.  v2:= 1I;
  #L247470.  v3:= 1I;
  #L247472.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L247478.  v4:= temp;
  #L24747a.  if v4 == 0 then goto L2474b2;
  #L24747e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L247484.  v4:= temp @kind object;
  #L247486.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L24748a.  v5:= "  ComposedException " @kind object;
  #L24748e.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247494.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24749a.  v5:= " :\n" @kind object;
  #L24749e.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2474a4.  v5:= "\t" @kind object;
  #L2474a8.  call `a`(v7, v0, v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L2474ae.  v3:= v3 + v2 @kind int;
  #L2474b0.  goto L247472;
  #L2474b2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2474b8.  v0:= temp @kind object;
  #L2474ba.  call `a`(v8, v0) @signature `Lio/reactivex/exceptions/CompositeException$a;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L2474c0.  return @kind void;
}
procedure `java.lang.Throwable` `getCause`(`io.reactivex.exceptions.CompositeException` v8 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getCause:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L24709c.  @monitorenter v8
  #L24709e.  v0:= v8.`io.reactivex.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` @kind object;
  #L2470a2.  if v0 != 0 then goto L247154;
  #L2470a6.  v0:= new `io.reactivex.exceptions.CompositeException$CompositeExceptionCausalChain`;
  #L2470aa.  call `<init>`(v0) @signature `Lio/reactivex/exceptions/CompositeException$CompositeExceptionCausalChain;.<init>:()V` @kind direct;
  #L2470b0.  v1:= new `java.util.HashSet`;
  #L2470b4.  call `<init>`(v1) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2470ba.  v2:= v8.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L2470be.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2470c4.  v2:= temp @kind object;
  #L2470c6.  v3:= v0 @kind object;
  #L2470c8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2470ce.  v4:= temp;
  #L2470d0.  if v4 == 0 then goto L247150;
  #L2470d4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2470da.  v4:= temp @kind object;
  #L2470dc.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L2470e0.  call temp:= `contains`(v1, v4) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2470e6.  v5:= temp;
  #L2470e8.  if v5 == 0 then goto L2470ee;
  #L2470ec.  goto L2470c8;
  #L2470ee.  call temp:= `add`(v1, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2470f4.  call temp:= `b`(v8, v4) @signature `Lio/reactivex/exceptions/CompositeException;.b:(Ljava/lang/Throwable;)Ljava/util/List;` @kind direct;
  #L2470fa.  v5:= temp @kind object;
  #L2470fc.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L247102.  v5:= temp @kind object;
  #L247104.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L24710a.  v6:= temp;
  #L24710c.  if v6 == 0 then goto L247140;
  #L247110.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L247116.  v6:= temp @kind object;
  #L247118.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L24711c.  call temp:= `contains`(v1, v6) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L247122.  v7:= temp;
  #L247124.  if v7 == 0 then goto L247138;
  #L247128.  v4:= new `java.lang.RuntimeException`;
  #L24712c.  v6:= "Duplicate found in causal chain so cropping to prevent loop ..." @kind object;
  #L247130.  call `<init>`(v4, v6) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247136.  goto L247104;
  #L247138.  call temp:= `add`(v1, v6) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24713e.  goto L247104;
  #L247140.  call temp:= `initCause`(v3, v4) @signature `Ljava/lang/Throwable;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L247146.  call temp:= `getRootCause`(v8, v3) @signature `Lio/reactivex/exceptions/CompositeException;.getRootCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L24714c.  v3:= temp @kind object;
  #L24714e.  goto L2470c8;
  #L247150.  v8.`io.reactivex.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` := v0 @kind object;
  #L247154.  v0:= v8.`io.reactivex.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` @kind object;
  #L247158.  @monitorexit v8
  #L24715a.  return v0 @kind object;
  #L24715c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24715e.  @monitorexit v8
  #L247160.  goto L247164;
  #L247162.  throw v0;
  #L247164.  goto L247162;
  catch `java.lang.Throwable` @[L24709e..L24713e] goto L24715c;
  catch `java.lang.Throwable` @[L247140..L247146] goto L247146;
  catch `java.lang.Throwable` @[L247146..L247158] goto L24715c;
}
procedure `java.util.List` `getExceptions`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2471d4.  v0:= v1.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L2471d8.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247084.  v0:= v1.`io.reactivex.exceptions.CompositeException.message` @type ^`java.lang.String` @kind object;
  #L247088.  return v0 @kind object;
}
procedure `java.lang.Throwable` `getRootCause`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.getRootCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag  {
    temp;
    v0;

  #L247198.  call temp:= `getCause`(v2) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L24719e.  v0:= temp @kind object;
  #L2471a0.  if v0 == 0 then goto L2471c2;
  #L2471a4.  if v2 != v0 then goto L2471aa;
  #L2471a8.  goto L2471c2;
  #L2471aa.  call temp:= `getCause`(v0) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L2471b0.  v2:= temp @kind object;
  #L2471b2.  if v2 == 0 then goto L2471c0;
  #L2471b6.  if v2 != v0 then goto L2471bc;
  #L2471ba.  goto L2471c0;
  #L2471bc.  v0:= v2 @kind object;
  #L2471be.  goto L2471aa;
  #L2471c0.  return v0 @kind object;
  #L2471c2.  return v2 @kind object;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2473f8.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L2473fc.  call `printStackTrace`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L247402.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.io.PrintStream` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2474d4.  v0:= new `io.reactivex.exceptions.CompositeException$b`;
  #L2474d8.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/CompositeException$b;.<init>:(Ljava/io/PrintStream;)V` @kind direct;
  #L2474de.  call `c`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.c:(Lio/reactivex/exceptions/CompositeException$a;)V` @kind direct;
  #L2474e4.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.io.PrintWriter` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2474f8.  v0:= new `io.reactivex.exceptions.CompositeException$c`;
  #L2474fc.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/CompositeException$c;.<init>:(Ljava/io/PrintWriter;)V` @kind direct;
  #L247502.  call `c`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.c:(Lio/reactivex/exceptions/CompositeException$a;)V` @kind direct;
  #L247508.  return @kind void;
}
procedure `int` `size`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247064.  v0:= v1.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L247068.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L24706e.  v0:= temp;
  #L247070.  return v0;
}
