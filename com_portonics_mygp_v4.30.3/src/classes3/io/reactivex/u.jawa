record `io.reactivex.u` @kind class @AccessFlag FINAL extends `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `java.lang.Runnable` `io.reactivex.u.b` @AccessFlag FINAL;
  `io.reactivex.x$a` `io.reactivex.u.c` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.u.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.u` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.x$a` v2 @kind object) @signature `Lio/reactivex/u;.<init>:(Ljava/lang/Runnable;Lio/reactivex/x$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L245e7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L245e82.  v0.`io.reactivex.u.b` @type ^`java.lang.Runnable` := v1 @kind object;
  #L245e86.  v0.`io.reactivex.u.c` @type ^`io.reactivex.x$a` := v2 @kind object;
  #L245e8a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.u` v2 @kind this) @signature `Lio/reactivex/u;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L245e9c.  v0:= v2.`io.reactivex.u.d` @type ^`java.lang.Thread` @kind object;
  #L245ea0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L245ea6.  v1:= temp @kind object;
  #L245ea8.  if v0 != v1 then goto L245ec4;
  #L245eac.  v0:= v2.`io.reactivex.u.c` @type ^`io.reactivex.x$a` @kind object;
  #L245eb0.  v1:= instanceof @variable v0 @type ^`io.reactivex.internal.schedulers.k` @kind boolean;
  #L245eb4.  if v1 == 0 then goto L245ec4;
  #L245eb8.  v0:= (`io.reactivex.internal.schedulers.k`) v0 @kind object;
  #L245ebc.  call `h`(v0) @signature `Lio/reactivex/internal/schedulers/k;.h:()V` @kind virtual;
  #L245ec2.  goto L245ece;
  #L245ec4.  v0:= v2.`io.reactivex.u.c` @type ^`io.reactivex.x$a` @kind object;
  #L245ec8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L245ece.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.u` v1 @kind this) @signature `Lio/reactivex/u;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L245e5c.  v0:= v1.`io.reactivex.u.c` @type ^`io.reactivex.x$a` @kind object;
  #L245e60.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L245e66.  v0:= temp;
  #L245e68.  return v0;
}
procedure `void` `run`(`io.reactivex.u` v2 @kind this) @signature `Lio/reactivex/u;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L245ee0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L245ee6.  v0:= temp @kind object;
  #L245ee8.  v2.`io.reactivex.u.d` @type ^`java.lang.Thread` := v0 @kind object;
  #L245eec.  v0:= 0I;
  #L245eee.  v1:= v2.`io.reactivex.u.b` @type ^`java.lang.Runnable` @kind object;
  #L245ef2.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L245ef8.  call `dispose`(v2) @signature `Lio/reactivex/u;.dispose:()V` @kind virtual;
  #L245efe.  v2.`io.reactivex.u.d` @type ^`java.lang.Thread` := v0 @kind object;
  #L245f02.  return @kind void;
  #L245f04.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L245f06.  call `dispose`(v2) @signature `Lio/reactivex/u;.dispose:()V` @kind virtual;
  #L245f0c.  v2.`io.reactivex.u.d` @type ^`java.lang.Thread` := v0 @kind object;
  #L245f10.  throw v1;
  catch `java.lang.Throwable` @[L245eee..L245ef8] goto L245f04;
}
