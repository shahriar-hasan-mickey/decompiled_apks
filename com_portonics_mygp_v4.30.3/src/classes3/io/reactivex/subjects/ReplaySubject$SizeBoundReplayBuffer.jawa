record `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class {
  `boolean` `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.done` @AccessFlag VOLATILE;
  `io.reactivex.subjects.ReplaySubject$Node` `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @AccessFlag VOLATILE;
  `int` `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.maxSize` @AccessFlag FINAL;
  `int` `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @AccessFlag ;
  `io.reactivex.subjects.ReplaySubject$Node` `io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @AccessFlag ;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L294cc0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L294cc6.  v0:= "maxSize" @kind object;
  #L294cca.  call temp:= `f`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.f:(ILjava/lang/String;)I` @kind static;
  #L294cd0.  v2:= temp;
  #L294cd2.  v1.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.maxSize` @type ^`int` := v2;
  #L294cd6.  v2:= new `io.reactivex.subjects.ReplaySubject$Node`;
  #L294cda.  v0:= 0I;
  #L294cdc.  call `<init>`(v2, v0) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L294ce2.  v1.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v2 @kind object;
  #L294ce6.  v1.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v2 @kind object;
  #L294cea.  return @kind void;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L294cfc.  v0:= new `io.reactivex.subjects.ReplaySubject$Node`;
  #L294d00.  call `<init>`(v0, v3) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L294d06.  v3:= v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L294d0a.  v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v0 @kind object;
  #L294d0e.  v1:= v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int`;
  #L294d12.  v1:= v1 + 1;
  #L294d16.  v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int` := v1;
  #L294d1a.  call `set`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L294d20.  call `trim`(v2) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.trim:()V` @kind virtual;
  #L294d26.  return @kind void;
}
procedure `void` `addFinal`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.addFinal:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L294d38.  v0:= new `io.reactivex.subjects.ReplaySubject$Node`;
  #L294d3c.  call `<init>`(v0, v4) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L294d42.  v4:= v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L294d46.  v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v0 @kind object;
  #L294d4a.  v1:= v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int`;
  #L294d4e.  v2:= 1I;
  #L294d50.  v1:= v1 + v2 @kind int;
  #L294d52.  v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int` := v1;
  #L294d56.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L294d5c.  call `trimHead`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.trimHead:()V` @kind virtual;
  #L294d62.  v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.done` @type ^`boolean` := v2 @kind boolean;
  #L294d66.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v4 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L294be8.  v0:= v4.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L294bec.  v1:= 0I;
  #L294bee.  v2:= v1 @kind object;
  #L294bf0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294bf6.  v3:= temp @kind object;
  #L294bf8.  v3:= (`io.reactivex.subjects.ReplaySubject$Node`) v3 @kind object;
  #L294bfc.  if v3 != 0 then goto L294c2c;
  #L294c00.  v0:= v0.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L294c04.  if v0 != 0 then goto L294c0a;
  #L294c08.  return v1 @kind object;
  #L294c0a.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L294c10.  v1:= temp;
  #L294c12.  if v1 != 0 then goto L294c26;
  #L294c16.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L294c1c.  v1:= temp;
  #L294c1e.  if v1 == 0 then goto L294c24;
  #L294c22.  goto L294c26;
  #L294c24.  return v0 @kind object;
  #L294c26.  v0:= v2.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L294c2a.  return v0 @kind object;
  #L294c2c.  v2:= v0 @kind object;
  #L294c2e.  v0:= v3 @kind object;
  #L294c30.  goto L294bf0;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L294c44.  v0:= v5.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L294c48.  call temp:= `size`(v5) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.size:()I` @kind virtual;
  #L294c4e.  v1:= temp;
  #L294c50.  v2:= 0I;
  #L294c52.  v3:= 0I;
  #L294c54.  if v1 != 0 then goto L294c64;
  #L294c58.  v0:= length @variable v6;
  #L294c5a.  if v0 == 0 then goto L294cae;
  #L294c5e.  v6[v3]:= v2 @kind object;
  #L294c62.  goto L294cae;
  #L294c64.  v4:= length @variable v6;
  #L294c66.  if v4 >= v1 then goto L294c86;
  #L294c6a.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L294c70.  v6:= temp @kind object;
  #L294c72.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L294c78.  v6:= temp @kind object;
  #L294c7a.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L294c80.  v6:= temp @kind object;
  #L294c82.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L294c86.  if v3 == v1 then goto L294ca4;
  #L294c8a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294c90.  v0:= temp @kind object;
  #L294c92.  v0:= (`io.reactivex.subjects.ReplaySubject$Node`) v0 @kind object;
  #L294c96.  v4:= v0.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L294c9a.  v6[v3]:= v4 @kind object;
  #L294c9e.  v3:= v3 + 1;
  #L294ca2.  goto L294c86;
  #L294ca4.  v0:= length @variable v6;
  #L294ca6.  if v0 <= v1 then goto L294cae;
  #L294caa.  v6[v1]:= v2 @kind object;
  #L294cae.  return v6 @kind object;
}
procedure `void` `replay`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v7 @kind this, `io.reactivex.subjects.ReplaySubject$ReplayDisposable` v8 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.replay:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L294d78.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L294d7e.  v0:= temp;
  #L294d80.  if v0 == 0 then goto L294d86;
  #L294d84.  return @kind void;
  #L294d86.  v0:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L294d8a.  v1:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` @kind object;
  #L294d8e.  v1:= (`io.reactivex.subjects.ReplaySubject$Node`) v1 @kind object;
  #L294d92.  v2:= 1I;
  #L294d94.  if v1 != 0 then goto L294d9c;
  #L294d98.  v1:= v7.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L294d9c.  v3:= 1I;
  #L294d9e.  v4:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L294da2.  v5:= 0I;
  #L294da4.  if v4 == 0 then goto L294dae;
  #L294da8.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L294dac.  return @kind void;
  #L294dae.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294db4.  v4:= temp @kind object;
  #L294db6.  v4:= (`io.reactivex.subjects.ReplaySubject$Node`) v4 @kind object;
  #L294dba.  if v4 != 0 then goto L294de0;
  #L294dbe.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294dc4.  v4:= temp @kind object;
  #L294dc6.  if v4 == 0 then goto L294dcc;
  #L294dca.  goto L294d9e;
  #L294dcc.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v1 @kind object;
  #L294dd0.  v3:= -v3 @kind int;
  #L294dd2.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L294dd8.  v3:= temp;
  #L294dda.  if v3 != 0 then goto L294d9e;
  #L294dde.  return @kind void;
  #L294de0.  v1:= v4.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L294de4.  v6:= v7.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L294de8.  if v6 == 0 then goto L294e24;
  #L294dec.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294df2.  v6:= temp @kind object;
  #L294df4.  if v6 != 0 then goto L294e24;
  #L294df8.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L294dfe.  v3:= temp;
  #L294e00.  if v3 == 0 then goto L294e0c;
  #L294e04.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L294e0a.  goto L294e1a;
  #L294e0c.  call temp:= `getError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L294e12.  v1:= temp @kind object;
  #L294e14.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L294e1a.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L294e1e.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` := v2 @kind boolean;
  #L294e22.  return @kind void;
  #L294e24.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L294e2a.  v1:= v4 @kind object;
  #L294e2c.  goto L294d9e;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v3 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L294b8c.  v0:= v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L294b90.  v1:= 0I;
  #L294b92.  v2:= 2147483647I;
  #L294b98.  if v1 == v2 then goto L294bd6;
  #L294b9c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294ba2.  v2:= temp @kind object;
  #L294ba4.  v2:= (`io.reactivex.subjects.ReplaySubject$Node`) v2 @kind object;
  #L294ba8.  if v2 != 0 then goto L294bce;
  #L294bac.  v0:= v0.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L294bb0.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L294bb6.  v2:= temp;
  #L294bb8.  if v2 != 0 then goto L294bc8;
  #L294bbc.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L294bc2.  v0:= temp;
  #L294bc4.  if v0 == 0 then goto L294bd6;
  #L294bc8.  v1:= v1 + -1;
  #L294bcc.  goto L294bd6;
  #L294bce.  v1:= v1 + 1;
  #L294bd2.  v0:= v2 @kind object;
  #L294bd4.  goto L294b92;
  #L294bd6.  return v1;
}
procedure `void` `trim`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v2 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.trim:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L294e40.  v0:= v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int`;
  #L294e44.  v1:= v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.maxSize` @type ^`int`;
  #L294e48.  if v0 <= v1 then goto L294e68;
  #L294e4c.  v0:= v0 + -1;
  #L294e50.  v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.size` @type ^`int` := v0;
  #L294e54.  v0:= v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L294e58.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294e5e.  v0:= temp @kind object;
  #L294e60.  v0:= (`io.reactivex.subjects.ReplaySubject$Node`) v0 @kind object;
  #L294e64.  v2.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v0 @kind object;
  #L294e68.  return @kind void;
}
procedure `void` `trimHead`(`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer` v3 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeBoundReplayBuffer;.trimHead:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L294e7c.  v0:= v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` @kind object;
  #L294e80.  v1:= v0.`io.reactivex.subjects.ReplaySubject$Node.value` @type ^`java.lang.Object` @kind object;
  #L294e84.  if v1 == 0 then goto L294ea6;
  #L294e88.  v1:= new `io.reactivex.subjects.ReplaySubject$Node`;
  #L294e8c.  v2:= 0I;
  #L294e8e.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L294e94.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294e9a.  v0:= temp @kind object;
  #L294e9c.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L294ea2.  v3.`io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$Node` := v1 @kind object;
  #L294ea6.  return @kind void;
}
