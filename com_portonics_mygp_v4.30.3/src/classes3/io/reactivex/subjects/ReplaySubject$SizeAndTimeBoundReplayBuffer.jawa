record `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class {
  `boolean` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.done` @AccessFlag VOLATILE;
  `io.reactivex.subjects.ReplaySubject$TimedNode` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @AccessFlag VOLATILE;
  `long` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @AccessFlag FINAL;
  `int` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxSize` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @AccessFlag FINAL;
  `int` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @AccessFlag ;
  `io.reactivex.subjects.ReplaySubject$TimedNode` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @AccessFlag ;
  `java.util.concurrent.TimeUnit` `io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v1 @kind this, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.x` v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L294834.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L29483a.  v0:= "maxSize" @kind object;
  #L29483e.  call temp:= `f`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.f:(ILjava/lang/String;)I` @kind static;
  #L294844.  v2:= temp;
  #L294846.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxSize` @type ^`int` := v2;
  #L29484a.  v2:= "maxAge" @kind object;
  #L29484e.  call temp:= `g`(v3, v2) @signature `Lio/reactivex/internal/functions/g0;.g:(JLjava/lang/String;)J` @kind static;
  #L294854.  v2:= temp @kind wide;
  #L294856.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` := v2 @kind wide;
  #L29485a.  v2:= "unit is null" @kind object;
  #L29485e.  call temp:= `e`(v5, v2) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L294864.  v2:= temp @kind object;
  #L294866.  v2:= (`java.util.concurrent.TimeUnit`) v2 @kind object;
  #L29486a.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L29486e.  v2:= "scheduler is null" @kind object;
  #L294872.  call temp:= `e`(v6, v2) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L294878.  v2:= temp @kind object;
  #L29487a.  v2:= (`io.reactivex.x`) v2 @kind object;
  #L29487e.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` := v2 @kind object;
  #L294882.  v2:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L294886.  v3:= 0I;
  #L294888.  v4:= 0L;
  #L29488c.  call `<init>`(v2, v3, v4) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L294892.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L294896.  v1.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L29489a.  return @kind void;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2948ac.  v0:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L2948b0.  v1:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L2948b4.  v2:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2948b8.  call temp:= `b`(v1, v2) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L2948be.  v1:= temp @kind wide;
  #L2948c0.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L2948c6.  v4:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L2948ca.  v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v0 @kind object;
  #L2948ce.  v1:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L2948d2.  v1:= v1 + 1;
  #L2948d6.  v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v1;
  #L2948da.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L2948e0.  call `trim`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.trim:()V` @kind virtual;
  #L2948e6.  return @kind void;
}
procedure `void` `addFinal`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.addFinal:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2948f8.  v0:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L2948fc.  v1:= 9223372036854775807L;
  #L294906.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L29490c.  v4:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L294910.  v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.tail` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v0 @kind object;
  #L294914.  v1:= v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L294918.  v2:= 1I;
  #L29491a.  v1:= v1 + v2 @kind int;
  #L29491c.  v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v1;
  #L294920.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L294926.  call `trimFinal`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.trimFinal:()V` @kind virtual;
  #L29492c.  v3.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.done` @type ^`boolean` := v2 @kind boolean;
  #L294930.  return @kind void;
}
procedure `io.reactivex.subjects.ReplaySubject$TimedNode` `getHead`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v8 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/subjects/ReplaySubject$TimedNode;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2946d4.  v0:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L2946d8.  v1:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L2946dc.  v2:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2946e0.  call temp:= `b`(v1, v2) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L2946e6.  v1:= temp @kind wide;
  #L2946e8.  v3:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L2946ec.  v1:= v1 - v3 @kind long;
  #L2946ee.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2946f4.  v3:= temp @kind object;
  #L2946f6.  v3:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v3 @kind object;
  #L2946fa.  v7:= v3 @kind object;
  #L2946fc.  v3:= v0 @kind object;
  #L2946fe.  v0:= v7 @kind object;
  #L294700.  if v0 == 0 then goto L294720;
  #L294704.  v4:= v0.`io.reactivex.subjects.ReplaySubject$TimedNode.time` @type ^`long` @kind wide;
  #L294708.  v6:= lcmp(v4, v1);
  #L29470c.  if v6 <= 0 then goto L294712;
  #L294710.  goto L294720;
  #L294712.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294718.  v3:= temp @kind object;
  #L29471a.  v3:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v3 @kind object;
  #L29471e.  goto L2946fa;
  #L294720.  return v3 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v8 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L294734.  v0:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L294738.  v1:= 0I;
  #L29473a.  v2:= v1 @kind object;
  #L29473c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294742.  v3:= temp @kind object;
  #L294744.  v3:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v3 @kind object;
  #L294748.  if v3 != 0 then goto L29479c;
  #L29474c.  v3:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L294750.  v4:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L294754.  call temp:= `b`(v3, v4) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L29475a.  v3:= temp @kind wide;
  #L29475c.  v5:= v8.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L294760.  v3:= v3 - v5 @kind long;
  #L294762.  v5:= v0.`io.reactivex.subjects.ReplaySubject$TimedNode.time` @type ^`long` @kind wide;
  #L294766.  v7:= lcmp(v5, v3);
  #L29476a.  if v7 >= 0 then goto L294770;
  #L29476e.  return v1 @kind object;
  #L294770.  v0:= v0.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L294774.  if v0 != 0 then goto L29477a;
  #L294778.  return v1 @kind object;
  #L29477a.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L294780.  v1:= temp;
  #L294782.  if v1 != 0 then goto L294796;
  #L294786.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L29478c.  v1:= temp;
  #L29478e.  if v1 == 0 then goto L294794;
  #L294792.  goto L294796;
  #L294794.  return v0 @kind object;
  #L294796.  v0:= v2.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L29479a.  return v0 @kind object;
  #L29479c.  v2:= v0 @kind object;
  #L29479e.  v0:= v3 @kind object;
  #L2947a0.  goto L29473c;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2947b4.  call temp:= `getHead`(v5) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/subjects/ReplaySubject$TimedNode;` @kind virtual;
  #L2947ba.  v0:= temp @kind object;
  #L2947bc.  call temp:= `size`(v5, v0) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.size:(Lio/reactivex/subjects/ReplaySubject$TimedNode;)I` @kind virtual;
  #L2947c2.  v1:= temp;
  #L2947c4.  v2:= 0I;
  #L2947c6.  v3:= 0I;
  #L2947c8.  if v1 != 0 then goto L2947d8;
  #L2947cc.  v0:= length @variable v6;
  #L2947ce.  if v0 == 0 then goto L294822;
  #L2947d2.  v6[v3]:= v2 @kind object;
  #L2947d6.  goto L294822;
  #L2947d8.  v4:= length @variable v6;
  #L2947da.  if v4 >= v1 then goto L2947fa;
  #L2947de.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2947e4.  v6:= temp @kind object;
  #L2947e6.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L2947ec.  v6:= temp @kind object;
  #L2947ee.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L2947f4.  v6:= temp @kind object;
  #L2947f6.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L2947fa.  if v3 == v1 then goto L294818;
  #L2947fe.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294804.  v0:= temp @kind object;
  #L294806.  v0:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v0 @kind object;
  #L29480a.  v4:= v0.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L29480e.  v6[v3]:= v4 @kind object;
  #L294812.  v3:= v3 + 1;
  #L294816.  goto L2947fa;
  #L294818.  v0:= length @variable v6;
  #L29481a.  if v0 <= v1 then goto L294822;
  #L29481e.  v6[v1]:= v2 @kind object;
  #L294822.  return v6 @kind object;
}
procedure `void` `replay`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v7 @kind this, `io.reactivex.subjects.ReplaySubject$ReplayDisposable` v8 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.replay:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L294944.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L29494a.  v0:= temp;
  #L29494c.  if v0 == 0 then goto L294952;
  #L294950.  return @kind void;
  #L294952.  v0:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L294956.  v1:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` @kind object;
  #L29495a.  v1:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v1 @kind object;
  #L29495e.  v2:= 1I;
  #L294960.  if v1 != 0 then goto L29496c;
  #L294964.  call temp:= `getHead`(v7) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/subjects/ReplaySubject$TimedNode;` @kind virtual;
  #L29496a.  v1:= temp @kind object;
  #L29496c.  v3:= 1I;
  #L29496e.  v4:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L294972.  v5:= 0I;
  #L294974.  if v4 == 0 then goto L29497e;
  #L294978.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L29497c.  return @kind void;
  #L29497e.  v4:= v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L294982.  if v4 == 0 then goto L29498c;
  #L294986.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L29498a.  return @kind void;
  #L29498c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294992.  v4:= temp @kind object;
  #L294994.  v4:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v4 @kind object;
  #L294998.  if v4 != 0 then goto L2949be;
  #L29499c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2949a2.  v4:= temp @kind object;
  #L2949a4.  if v4 == 0 then goto L2949aa;
  #L2949a8.  goto L29496e;
  #L2949aa.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v1 @kind object;
  #L2949ae.  v3:= -v3 @kind int;
  #L2949b0.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2949b6.  v3:= temp;
  #L2949b8.  if v3 != 0 then goto L29496e;
  #L2949bc.  return @kind void;
  #L2949be.  v1:= v4.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L2949c2.  v6:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L2949c6.  if v6 == 0 then goto L294a02;
  #L2949ca.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2949d0.  v6:= temp @kind object;
  #L2949d2.  if v6 != 0 then goto L294a02;
  #L2949d6.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L2949dc.  v3:= temp;
  #L2949de.  if v3 == 0 then goto L2949ea;
  #L2949e2.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2949e8.  goto L2949f8;
  #L2949ea.  call temp:= `getError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L2949f0.  v1:= temp @kind object;
  #L2949f2.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2949f8.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L2949fc.  v8.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` := v2 @kind boolean;
  #L294a00.  return @kind void;
  #L294a02.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L294a08.  v1:= v4 @kind object;
  #L294a0a.  goto L29497e;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L294658.  call temp:= `getHead`(v1) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/subjects/ReplaySubject$TimedNode;` @kind virtual;
  #L29465e.  v0:= temp @kind object;
  #L294660.  call temp:= `size`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.size:(Lio/reactivex/subjects/ReplaySubject$TimedNode;)I` @kind virtual;
  #L294666.  v0:= temp;
  #L294668.  return v0;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v2 @kind this, `io.reactivex.subjects.ReplaySubject$TimedNode` v3 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.size:(Lio/reactivex/subjects/ReplaySubject$TimedNode;)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L29467c.  v0:= 0I;
  #L29467e.  v1:= 2147483647I;
  #L294684.  if v0 == v1 then goto L2946c2;
  #L294688.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L29468e.  v1:= temp @kind object;
  #L294690.  v1:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v1 @kind object;
  #L294694.  if v1 != 0 then goto L2946ba;
  #L294698.  v3:= v3.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L29469c.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L2946a2.  v1:= temp;
  #L2946a4.  if v1 != 0 then goto L2946b4;
  #L2946a8.  call temp:= `isError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L2946ae.  v3:= temp;
  #L2946b0.  if v3 == 0 then goto L2946c2;
  #L2946b4.  v0:= v0 + -1;
  #L2946b8.  goto L2946c2;
  #L2946ba.  v0:= v0 + 1;
  #L2946be.  v3:= v1 @kind object;
  #L2946c0.  goto L29467e;
  #L2946c2.  return v0;
}
procedure `void` `trim`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v7 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.trim:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L294a1c.  v0:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L294a20.  v1:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxSize` @type ^`int`;
  #L294a24.  if v0 <= v1 then goto L294a44;
  #L294a28.  v0:= v0 + -1;
  #L294a2c.  v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v0;
  #L294a30.  v0:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L294a34.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294a3a.  v0:= temp @kind object;
  #L294a3c.  v0:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v0 @kind object;
  #L294a40.  v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v0 @kind object;
  #L294a44.  v0:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L294a48.  v1:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L294a4c.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L294a52.  v0:= temp @kind wide;
  #L294a54.  v2:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L294a58.  v0:= v0 - v2 @kind long;
  #L294a5a.  v2:= v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L294a5e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294a64.  v3:= temp @kind object;
  #L294a66.  v3:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v3 @kind object;
  #L294a6a.  if v3 != 0 then goto L294a74;
  #L294a6e.  v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L294a72.  goto L294a84;
  #L294a74.  v4:= v3.`io.reactivex.subjects.ReplaySubject$TimedNode.time` @type ^`long` @kind wide;
  #L294a78.  v6:= lcmp(v4, v0);
  #L294a7c.  if v6 <= 0 then goto L294a86;
  #L294a80.  v7.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L294a84.  return @kind void;
  #L294a86.  v2:= v3 @kind object;
  #L294a88.  goto L294a5e;
}
procedure `void` `trimFinal`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v10 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.trimFinal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L294a9c.  v0:= v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L294aa0.  v1:= v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L294aa4.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L294aaa.  v0:= temp @kind wide;
  #L294aac.  v2:= v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L294ab0.  v0:= v0 - v2 @kind long;
  #L294ab2.  v2:= v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L294ab6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294abc.  v3:= temp @kind object;
  #L294abe.  v3:= (`io.reactivex.subjects.ReplaySubject$TimedNode`) v3 @kind object;
  #L294ac2.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294ac8.  v4:= temp @kind object;
  #L294aca.  v5:= 0L;
  #L294ace.  v7:= 0I;
  #L294ad0.  if v4 != 0 then goto L294b00;
  #L294ad4.  v0:= v2.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L294ad8.  if v0 == 0 then goto L294afa;
  #L294adc.  v0:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L294ae0.  call `<init>`(v0, v7, v5) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L294ae6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294aec.  v1:= temp @kind object;
  #L294aee.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L294af4.  v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v0 @kind object;
  #L294af8.  goto L294b36;
  #L294afa.  v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L294afe.  goto L294b36;
  #L294b00.  v8:= v3.`io.reactivex.subjects.ReplaySubject$TimedNode.time` @type ^`long` @kind wide;
  #L294b04.  v4:= lcmp(v8, v0);
  #L294b08.  if v4 <= 0 then goto L294b38;
  #L294b0c.  v0:= v2.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L294b10.  if v0 == 0 then goto L294b32;
  #L294b14.  v0:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L294b18.  call `<init>`(v0, v7, v5) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L294b1e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294b24.  v1:= temp @kind object;
  #L294b26.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L294b2c.  v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v0 @kind object;
  #L294b30.  goto L294b36;
  #L294b32.  v10.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v2 @kind object;
  #L294b36.  return @kind void;
  #L294b38.  v2:= v3 @kind object;
  #L294b3a.  goto L294ab6;
}
procedure `void` `trimHead`(`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer` v5 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$SizeAndTimeBoundReplayBuffer;.trimHead:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L294b4c.  v0:= v5.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` @kind object;
  #L294b50.  v1:= v0.`io.reactivex.subjects.ReplaySubject$TimedNode.value` @type ^`java.lang.Object` @kind object;
  #L294b54.  if v1 == 0 then goto L294b7a;
  #L294b58.  v1:= new `io.reactivex.subjects.ReplaySubject$TimedNode`;
  #L294b5c.  v2:= 0I;
  #L294b5e.  v3:= 0L;
  #L294b62.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/subjects/ReplaySubject$TimedNode;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L294b68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294b6e.  v0:= temp @kind object;
  #L294b70.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L294b76.  v5.`io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer.head` @type ^`io.reactivex.subjects.ReplaySubject$TimedNode` := v1 @kind object;
  #L294b7a.  return @kind void;
}
