record `io.reactivex.subjects.ReplaySubject$ReplayDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.subjects.ReplaySubject$ReplayDisposable.downstream` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @AccessFlag ;
  `io.reactivex.subjects.ReplaySubject` `io.reactivex.subjects.ReplaySubject$ReplayDisposable.state` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$ReplayDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$ReplayDisposable` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.subjects.ReplaySubject` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;.<init>:(Lio/reactivex/t;Lio/reactivex/subjects/ReplaySubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L294618.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L29461e.  v0.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L294622.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.ReplaySubject$ReplayDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L294634.  v0:= v1.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L294638.  if v0 == 0 then goto L29463e;
  #L29463c.  return @kind void;
  #L29463e.  v0:= 1I;
  #L294640.  v1.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L294644.  v0:= 0I;
  #L294646.  throw v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.ReplaySubject$ReplayDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L294600.  v0:= v1.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L294604.  return v0;
}
