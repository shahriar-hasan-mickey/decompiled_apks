record `io.reactivex.subjects.PublishSubject$PublishDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.subjects.PublishSubject$PublishDisposable.downstream` @AccessFlag FINAL;
  `io.reactivex.subjects.PublishSubject` `io.reactivex.subjects.PublishSubject$PublishDisposable.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.PublishSubject$PublishDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.subjects.PublishSubject` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.<init>:(Lio/reactivex/t;Lio/reactivex/subjects/PublishSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L294248.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L29424e.  v0.`io.reactivex.subjects.PublishSubject$PublishDisposable.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L294252.  v0.`io.reactivex.subjects.PublishSubject$PublishDisposable.parent` @type ^`io.reactivex.subjects.PublishSubject` := v2 @kind object;
  #L294256.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L294268.  v0:= 0I;
  #L29426a.  v1:= 1I;
  #L29426c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L294272.  v0:= temp;
  #L294274.  if v0 == 0 then goto L294282;
  #L294278.  v0:= v2.`io.reactivex.subjects.PublishSubject$PublishDisposable.parent` @type ^`io.reactivex.subjects.PublishSubject` @kind object;
  #L29427c.  call `z`(v0, v2) @signature `Lio/reactivex/subjects/PublishSubject;.z:(Lio/reactivex/subjects/PublishSubject$PublishDisposable;)V` @kind virtual;
  #L294282.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29422c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L294232.  v0:= temp;
  #L294234.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L294294.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L29429a.  v0:= temp;
  #L29429c.  if v0 != 0 then goto L2942aa;
  #L2942a0.  v0:= v1.`io.reactivex.subjects.PublishSubject$PublishDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L2942a4.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2942aa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2942bc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L2942c2.  v0:= temp;
  #L2942c4.  if v0 == 0 then goto L2942d0;
  #L2942c8.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2942ce.  goto L2942da;
  #L2942d0.  v0:= v1.`io.reactivex.subjects.PublishSubject$PublishDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L2942d4.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2942da.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.PublishSubject$PublishDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2942ec.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L2942f2.  v0:= temp;
  #L2942f4.  if v0 != 0 then goto L294302;
  #L2942f8.  v0:= v1.`io.reactivex.subjects.PublishSubject$PublishDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L2942fc.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L294302.  return @kind void;
}
