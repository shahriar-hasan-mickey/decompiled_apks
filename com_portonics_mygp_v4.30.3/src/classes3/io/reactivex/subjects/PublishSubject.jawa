record `io.reactivex.subjects.PublishSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.b` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.PublishSubject.d` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.subjects.PublishSubject.e` @AccessFlag ;
}
global `io.reactivex.subjects.PublishSubject$PublishDisposable`[] `@@io.reactivex.subjects.PublishSubject.b` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.PublishSubject$PublishDisposable`[] `@@io.reactivex.subjects.PublishSubject.c` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/PublishSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L294384.  v0:= 0I;
  #L294386.  v1:= new `io.reactivex.subjects.PublishSubject$PublishDisposable`[v0];
  #L29438a.  `@@io.reactivex.subjects.PublishSubject.b` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] := v1 @kind object;
  #L29438e.  v0:= new `io.reactivex.subjects.PublishSubject$PublishDisposable`[v0];
  #L294392.  `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] := v0 @kind object;
  #L294396.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2943a8.  call `<init>`(v2) @signature `Lio/reactivex/subjects/b;.<init>:()V` @kind direct;
  #L2943ae.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2943b2.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L2943b6.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2943bc.  v2.`io.reactivex.subjects.PublishSubject.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L2943c0.  return @kind void;
}
procedure `io.reactivex.subjects.PublishSubject` `y`() @signature `Lio/reactivex/subjects/PublishSubject;.y:()Lio/reactivex/subjects/PublishSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L294368.  v0:= new `io.reactivex.subjects.PublishSubject`;
  #L29436c.  call `<init>`(v0) @signature `Lio/reactivex/subjects/PublishSubject;.<init>:()V` @kind direct;
  #L294372.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.subjects.PublishSubject` v4 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2943d4.  v0:= v4.`io.reactivex.subjects.PublishSubject.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2943d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2943de.  v0:= temp @kind object;
  #L2943e0.  v1:= `@@io.reactivex.subjects.PublishSubject.b` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L2943e4.  if v0 != v1 then goto L2943ea;
  #L2943e8.  return @kind void;
  #L2943ea.  v0:= v4.`io.reactivex.subjects.PublishSubject.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2943ee.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2943f4.  v0:= temp @kind object;
  #L2943f6.  v0:= (`io.reactivex.subjects.PublishSubject$PublishDisposable`[]) v0 @kind object;
  #L2943fa.  v1:= length @variable v0;
  #L2943fc.  v2:= 0I;
  #L2943fe.  if v2 >= v1 then goto L294412;
  #L294402.  v3:= v0[v2] @kind object;
  #L294406.  call `onComplete`(v3) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onComplete:()V` @kind virtual;
  #L29440c.  v2:= v2 + 1;
  #L294410.  goto L2943fe;
  #L294412.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L294424.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L294428.  call temp:= `e`(v5, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L29442e.  v0:= v4.`io.reactivex.subjects.PublishSubject.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L294432.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294438.  v0:= temp @kind object;
  #L29443a.  v1:= `@@io.reactivex.subjects.PublishSubject.b` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L29443e.  if v0 != v1 then goto L29444a;
  #L294442.  call `t`(v5) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L294448.  return @kind void;
  #L29444a.  v4.`io.reactivex.subjects.PublishSubject.e` @type ^`java.lang.Throwable` := v5 @kind object;
  #L29444e.  v0:= v4.`io.reactivex.subjects.PublishSubject.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L294452.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L294458.  v0:= temp @kind object;
  #L29445a.  v0:= (`io.reactivex.subjects.PublishSubject$PublishDisposable`[]) v0 @kind object;
  #L29445e.  v1:= length @variable v0;
  #L294460.  v2:= 0I;
  #L294462.  if v2 >= v1 then goto L294476;
  #L294466.  v3:= v0[v2] @kind object;
  #L29446a.  call `onError`(v3, v5) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L294470.  v2:= v2 + 1;
  #L294474.  goto L294462;
  #L294476.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L294488.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L29448c.  call temp:= `e`(v5, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L294492.  v0:= v4.`io.reactivex.subjects.PublishSubject.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L294496.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L29449c.  v0:= temp @kind object;
  #L29449e.  v0:= (`io.reactivex.subjects.PublishSubject$PublishDisposable`[]) v0 @kind object;
  #L2944a2.  v1:= length @variable v0;
  #L2944a4.  v2:= 0I;
  #L2944a6.  if v2 >= v1 then goto L2944ba;
  #L2944aa.  v3:= v0[v2] @kind object;
  #L2944ae.  call `onNext`(v3, v5) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L2944b4.  v2:= v2 + 1;
  #L2944b8.  goto L2944a6;
  #L2944ba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.PublishSubject` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2944cc.  v0:= v2.`io.reactivex.subjects.PublishSubject.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2944d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2944d6.  v0:= temp @kind object;
  #L2944d8.  v1:= `@@io.reactivex.subjects.PublishSubject.b` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L2944dc.  if v0 != v1 then goto L2944e6;
  #L2944e0.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2944e6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.PublishSubject` v2 @kind this, `io.reactivex.t` v3 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L29458c.  v0:= new `io.reactivex.subjects.PublishSubject$PublishDisposable`;
  #L294590.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.<init>:(Lio/reactivex/t;Lio/reactivex/subjects/PublishSubject;)V` @kind direct;
  #L294596.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L29459c.  call temp:= `x`(v2, v0) @signature `Lio/reactivex/subjects/PublishSubject;.x:(Lio/reactivex/subjects/PublishSubject$PublishDisposable;)Z` @kind virtual;
  #L2945a2.  v1:= temp;
  #L2945a4.  if v1 == 0 then goto L2945bc;
  #L2945a8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/PublishSubject$PublishDisposable;.isDisposed:()Z` @kind virtual;
  #L2945ae.  v3:= temp;
  #L2945b0.  if v3 == 0 then goto L2945d2;
  #L2945b4.  call `z`(v2, v0) @signature `Lio/reactivex/subjects/PublishSubject;.z:(Lio/reactivex/subjects/PublishSubject$PublishDisposable;)V` @kind virtual;
  #L2945ba.  goto L2945d2;
  #L2945bc.  v0:= v2.`io.reactivex.subjects.PublishSubject.e` @type ^`java.lang.Throwable` @kind object;
  #L2945c0.  if v0 == 0 then goto L2945cc;
  #L2945c4.  call `onError`(v3, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2945ca.  goto L2945d2;
  #L2945cc.  call `onComplete`(v3) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2945d2.  return @kind void;
}
procedure `boolean` `x`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `io.reactivex.subjects.PublishSubject$PublishDisposable` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.x:(Lio/reactivex/subjects/PublishSubject$PublishDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L294314.  v0:= v4.`io.reactivex.subjects.PublishSubject.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L294318.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L29431e.  v0:= temp @kind object;
  #L294320.  v0:= (`io.reactivex.subjects.PublishSubject$PublishDisposable`[]) v0 @kind object;
  #L294324.  v1:= `@@io.reactivex.subjects.PublishSubject.b` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L294328.  v2:= 0I;
  #L29432a.  if v0 != v1 then goto L294330;
  #L29432e.  return v2;
  #L294330.  v1:= length @variable v0;
  #L294332.  v3:= v1 + 1;
  #L294336.  v3:= new `io.reactivex.subjects.PublishSubject$PublishDisposable`[v3];
  #L29433a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L294340.  v3[v1]:= v5 @kind object;
  #L294344.  v1:= v4.`io.reactivex.subjects.PublishSubject.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L294348.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L29434e.  v0:= temp;
  #L294350.  if v0 == 0 then goto L294314;
  #L294354.  v5:= 1I;
  #L294356.  return v5;
}
procedure `void` `z`(`io.reactivex.subjects.PublishSubject` v6 @kind this, `io.reactivex.subjects.PublishSubject$PublishDisposable` v7 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.z:(Lio/reactivex/subjects/PublishSubject$PublishDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2944f8.  v0:= v6.`io.reactivex.subjects.PublishSubject.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2944fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294502.  v0:= temp @kind object;
  #L294504.  v0:= (`io.reactivex.subjects.PublishSubject$PublishDisposable`[]) v0 @kind object;
  #L294508.  v1:= `@@io.reactivex.subjects.PublishSubject.b` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L29450c.  if v0 == v1 then goto L294578;
  #L294510.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L294514.  if v0 != v1 then goto L29451a;
  #L294518.  goto L294578;
  #L29451a.  v1:= length @variable v0;
  #L29451c.  v2:= -1I;
  #L29451e.  v3:= 0I;
  #L294520.  v4:= 0I;
  #L294522.  if v4 >= v1 then goto L294538;
  #L294526.  v5:= v0[v4] @kind object;
  #L29452a.  if v5 != v7 then goto L294532;
  #L29452e.  v2:= v4;
  #L294530.  goto L294538;
  #L294532.  v4:= v4 + 1;
  #L294536.  goto L294522;
  #L294538.  if v2 >= 0 then goto L29453e;
  #L29453c.  return @kind void;
  #L29453e.  v4:= 1I;
  #L294540.  if v1 != v4 then goto L29454a;
  #L294544.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$PublishDisposable`[] @kind object;
  #L294548.  goto L294568;
  #L29454a.  v5:= v1 + -1;
  #L29454e.  v5:= new `io.reactivex.subjects.PublishSubject$PublishDisposable`[v5];
  #L294552.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L294558.  v3:= v2 + 1;
  #L29455c.  v1:= v1 - v2 @kind int;
  #L29455e.  v1:= v1 - v4 @kind int;
  #L294560.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L294566.  v1:= v5 @kind object;
  #L294568.  v2:= v6.`io.reactivex.subjects.PublishSubject.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L29456c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L294572.  v0:= temp;
  #L294574.  if v0 == 0 then goto L2944f8;
  #L294578.  return @kind void;
}
