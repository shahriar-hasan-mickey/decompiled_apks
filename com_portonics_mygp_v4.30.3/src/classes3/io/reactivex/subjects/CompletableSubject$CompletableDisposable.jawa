record `io.reactivex.subjects.CompletableSubject$CompletableDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.b` `io.reactivex.subjects.CompletableSubject$CompletableDisposable.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.CompletableSubject$CompletableDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.CompletableSubject$CompletableDisposable` v0 @kind this, `io.reactivex.b` v1 @kind object, `io.reactivex.subjects.CompletableSubject` v2 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;.<init>:(Lio/reactivex/b;Lio/reactivex/subjects/CompletableSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L294170.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L294176.  v0.`io.reactivex.subjects.CompletableSubject$CompletableDisposable.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L29417a.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L294180.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.CompletableSubject$CompletableDisposable` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L294194.  v0:= 0I;
  #L294196.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L29419c.  v1:= temp @kind object;
  #L29419e.  v1:= (`io.reactivex.subjects.CompletableSubject`) v1 @kind object;
  #L2941a2.  if v1 != 0 then goto L2941a8;
  #L2941a6.  return @kind void;
  #L2941a8.  throw v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.CompletableSubject$CompletableDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject$CompletableDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29414c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L294152.  v0:= temp @kind object;
  #L294154.  if v0 != 0 then goto L29415c;
  #L294158.  v0:= 1I;
  #L29415a.  goto L29415e;
  #L29415c.  v0:= 0I;
  #L29415e.  return v0;
}
