record `io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class {
  `java.util.List` `io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L29502c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L295032.  v0:= new `java.util.ArrayList`;
  #L295036.  v1:= "capacityHint" @kind object;
  #L29503a.  call temp:= `f`(v3, v1) @signature `Lio/reactivex/internal/functions/g0;.f:(ILjava/lang/String;)I` @kind static;
  #L295040.  v3:= temp;
  #L295042.  call `<init>`(v0, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L295048.  v2.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` := v0 @kind object;
  #L29504c.  return @kind void;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L295060.  v0:= v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L295064.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29506a.  v2:= v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L29506e.  v2:= v2 + 1;
  #L295072.  v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int` := v2;
  #L295076.  return @kind void;
}
procedure `void` `addFinal`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.addFinal:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L295088.  v0:= v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L29508c.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L295092.  call `trimHead`(v1) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.trimHead:()V` @kind virtual;
  #L295098.  v2:= v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L29509c.  v0:= 1I;
  #L29509e.  v2:= v2 + v0 @kind int;
  #L2950a0.  v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int` := v2;
  #L2950a4.  v1.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.done` @type ^`boolean` := v0 @kind boolean;
  #L2950a8.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v5 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L294f24.  v0:= v5.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L294f28.  v1:= 0I;
  #L294f2a.  if v0 == 0 then goto L294f70;
  #L294f2e.  v2:= v5.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L294f32.  v3:= v0 + -1;
  #L294f36.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L294f3c.  v3:= temp @kind object;
  #L294f3e.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L294f44.  v4:= temp;
  #L294f46.  if v4 != 0 then goto L294f5a;
  #L294f4a.  call temp:= `isError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L294f50.  v4:= temp;
  #L294f52.  if v4 == 0 then goto L294f58;
  #L294f56.  goto L294f5a;
  #L294f58.  return v3 @kind object;
  #L294f5a.  v3:= 1I;
  #L294f5c.  if v0 != v3 then goto L294f62;
  #L294f60.  return v1 @kind object;
  #L294f62.  v0:= v0 + -2;
  #L294f66.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L294f6c.  v0:= temp @kind object;
  #L294f6e.  return v0 @kind object;
  #L294f70.  return v1 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v6 @kind this, `java.lang.Object`[] v7 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L294f84.  v0:= v6.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L294f88.  v1:= 0I;
  #L294f8a.  v2:= 0I;
  #L294f8c.  if v0 != 0 then goto L294f9c;
  #L294f90.  v0:= length @variable v7;
  #L294f92.  if v0 == 0 then goto L294f9a;
  #L294f96.  v7[v2]:= v1 @kind object;
  #L294f9a.  return v7 @kind object;
  #L294f9c.  v3:= v6.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L294fa0.  v4:= v0 + -1;
  #L294fa4.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L294faa.  v4:= temp @kind object;
  #L294fac.  call temp:= `isComplete`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L294fb2.  v5:= temp;
  #L294fb4.  if v5 != 0 then goto L294fc4;
  #L294fb8.  call temp:= `isError`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L294fbe.  v4:= temp;
  #L294fc0.  if v4 == 0 then goto L294fd8;
  #L294fc4.  v0:= v0 + -1;
  #L294fc8.  if v0 != 0 then goto L294fd8;
  #L294fcc.  v0:= length @variable v7;
  #L294fce.  if v0 == 0 then goto L294fd6;
  #L294fd2.  v7[v2]:= v1 @kind object;
  #L294fd6.  return v7 @kind object;
  #L294fd8.  v4:= length @variable v7;
  #L294fda.  if v4 >= v0 then goto L294ffa;
  #L294fde.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L294fe4.  v7:= temp @kind object;
  #L294fe6.  call temp:= `getComponentType`(v7) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L294fec.  v7:= temp @kind object;
  #L294fee.  call temp:= `newInstance`(v7, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L294ff4.  v7:= temp @kind object;
  #L294ff6.  v7:= (`java.lang.Object`[]) v7 @kind object;
  #L294ffa.  if v2 >= v0 then goto L295010;
  #L294ffe.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L295004.  v4:= temp @kind object;
  #L295006.  v7[v2]:= v4 @kind object;
  #L29500a.  v2:= v2 + 1;
  #L29500e.  goto L294ffa;
  #L295010.  v2:= length @variable v7;
  #L295012.  if v2 <= v0 then goto L29501a;
  #L295016.  v7[v0]:= v1 @kind object;
  #L29501a.  return v7 @kind object;
}
procedure `void` `replay`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v9 @kind this, `io.reactivex.subjects.ReplaySubject$ReplayDisposable` v10 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.replay:(Lio/reactivex/subjects/ReplaySubject$ReplayDisposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2950bc.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2950c2.  v0:= temp;
  #L2950c4.  if v0 == 0 then goto L2950ca;
  #L2950c8.  return @kind void;
  #L2950ca.  v0:= v9.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L2950ce.  v1:= v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L2950d2.  v2:= v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` @kind object;
  #L2950d6.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L2950da.  v3:= 0I;
  #L2950dc.  v4:= 1I;
  #L2950de.  if v2 == 0 then goto L2950ec;
  #L2950e2.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2950e8.  v3:= temp;
  #L2950ea.  goto L2950f8;
  #L2950ec.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2950f2.  v2:= temp @kind object;
  #L2950f4.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v2 @kind object;
  #L2950f8.  v2:= 1I;
  #L2950fa.  v5:= v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L2950fe.  v6:= 0I;
  #L295100.  if v5 == 0 then goto L29510a;
  #L295104.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v6 @kind object;
  #L295108.  return @kind void;
  #L29510a.  v5:= v9.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L29510e.  if v5 == v3 then goto L295178;
  #L295112.  v7:= v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L295116.  if v7 == 0 then goto L295120;
  #L29511a.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v6 @kind object;
  #L29511e.  return @kind void;
  #L295120.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L295126.  v7:= temp @kind object;
  #L295128.  v8:= v9.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.done` @type ^`boolean` @kind boolean;
  #L29512c.  if v8 == 0 then goto L29516c;
  #L295130.  v8:= v3 + 1;
  #L295134.  if v8 != v5 then goto L29516c;
  #L295138.  v5:= v9.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L29513c.  if v8 != v5 then goto L29516c;
  #L295140.  call temp:= `isComplete`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L295146.  v0:= temp;
  #L295148.  if v0 == 0 then goto L295154;
  #L29514c.  call `onComplete`(v1) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L295152.  goto L295162;
  #L295154.  call temp:= `getError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L29515a.  v0:= temp @kind object;
  #L29515c.  call `onError`(v1, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L295162.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v6 @kind object;
  #L295166.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L29516a.  return @kind void;
  #L29516c.  call `onNext`(v1, v7) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L295172.  v3:= v3 + 1;
  #L295176.  goto L29510e;
  #L295178.  v5:= v9.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L29517c.  if v3 == v5 then goto L295182;
  #L295180.  goto L2950fa;
  #L295182.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L295188.  v5:= temp @kind object;
  #L29518a.  v10.`io.reactivex.subjects.ReplaySubject$ReplayDisposable.index` @type ^`java.lang.Object` := v5 @kind object;
  #L29518e.  v2:= -v2 @kind int;
  #L295190.  call temp:= `addAndGet`(v10, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L295196.  v2:= temp;
  #L295198.  if v2 != 0 then goto L2950fa;
  #L29519c.  return @kind void;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v4 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L294ed8.  v0:= v4.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.size` @type ^`int`;
  #L294edc.  if v0 == 0 then goto L294f0e;
  #L294ee0.  v1:= v4.`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer.buffer` @type ^`java.util.List` @kind object;
  #L294ee4.  v2:= v0 + -1;
  #L294ee8.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L294eee.  v1:= temp @kind object;
  #L294ef0.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L294ef6.  v3:= temp;
  #L294ef8.  if v3 != 0 then goto L294f0c;
  #L294efc.  call temp:= `isError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L294f02.  v1:= temp;
  #L294f04.  if v1 == 0 then goto L294f0a;
  #L294f08.  goto L294f0c;
  #L294f0a.  return v0;
  #L294f0c.  return v2;
  #L294f0e.  v0:= 0I;
  #L294f10.  return v0;
}
procedure `void` `trimHead`(`io.reactivex.subjects.ReplaySubject$UnboundedReplayBuffer` v0 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$UnboundedReplayBuffer;.trimHead:()V` @AccessFlag PUBLIC {
    temp;

  #L2951b0.  return @kind void;
}
