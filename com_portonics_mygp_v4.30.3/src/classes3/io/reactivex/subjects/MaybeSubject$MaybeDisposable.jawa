record `io.reactivex.subjects.MaybeSubject$MaybeDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.j` `io.reactivex.subjects.MaybeSubject$MaybeDisposable.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.MaybeSubject$MaybeDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.MaybeSubject$MaybeDisposable` v0 @kind this, `io.reactivex.j` v1 @kind object, `io.reactivex.subjects.MaybeSubject` v2 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;.<init>:(Lio/reactivex/j;Lio/reactivex/subjects/MaybeSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2941e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2941e6.  v0.`io.reactivex.subjects.MaybeSubject$MaybeDisposable.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L2941ea.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2941f0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.MaybeSubject$MaybeDisposable` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L294204.  v0:= 0I;
  #L294206.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L29420c.  v1:= temp @kind object;
  #L29420e.  v1:= (`io.reactivex.subjects.MaybeSubject`) v1 @kind object;
  #L294212.  if v1 != 0 then goto L294218;
  #L294216.  return @kind void;
  #L294218.  throw v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.MaybeSubject$MaybeDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject$MaybeDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2941bc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2941c2.  v0:= temp @kind object;
  #L2941c4.  if v0 != 0 then goto L2941cc;
  #L2941c8.  v0:= 1I;
  #L2941ca.  goto L2941ce;
  #L2941cc.  v0:= 0I;
  #L2941ce.  return v0;
}
