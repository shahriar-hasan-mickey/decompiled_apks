record `io.reactivex.subjects.SingleSubject$SingleDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.z` `io.reactivex.subjects.SingleSubject$SingleDisposable.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.SingleSubject$SingleDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.SingleSubject$SingleDisposable` v0 @kind this, `io.reactivex.z` v1 @kind object, `io.reactivex.subjects.SingleSubject` v2 @kind object) @signature `Lio/reactivex/subjects/SingleSubject$SingleDisposable;.<init>:(Lio/reactivex/z;Lio/reactivex/subjects/SingleSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2954e4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2954ea.  v0.`io.reactivex.subjects.SingleSubject$SingleDisposable.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L2954ee.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2954f4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.SingleSubject$SingleDisposable` v2 @kind this) @signature `Lio/reactivex/subjects/SingleSubject$SingleDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L295508.  v0:= 0I;
  #L29550a.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L295510.  v1:= temp @kind object;
  #L295512.  v1:= (`io.reactivex.subjects.SingleSubject`) v1 @kind object;
  #L295516.  if v1 != 0 then goto L29551c;
  #L29551a.  return @kind void;
  #L29551c.  throw v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.SingleSubject$SingleDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/SingleSubject$SingleDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2954c0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2954c6.  v0:= temp @kind object;
  #L2954c8.  if v0 != 0 then goto L2954d0;
  #L2954cc.  v0:= 1I;
  #L2954ce.  goto L2954d2;
  #L2954d0.  v0:= 0I;
  #L2954d2.  return v0;
}
