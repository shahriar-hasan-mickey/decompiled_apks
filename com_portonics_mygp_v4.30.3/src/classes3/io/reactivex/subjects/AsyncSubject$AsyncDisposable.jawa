record `io.reactivex.subjects.AsyncSubject$AsyncDisposable` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class {
  `io.reactivex.subjects.AsyncSubject` `io.reactivex.subjects.AsyncSubject$AsyncDisposable.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.AsyncSubject$AsyncDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.AsyncSubject$AsyncDisposable` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.subjects.AsyncSubject` v2 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;.<init>:(Lio/reactivex/t;Lio/reactivex/subjects/AsyncSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2940b8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/t;)V` @kind direct;
  #L2940be.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.AsyncSubject$AsyncDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2940d0.  call temp:= `tryDispose`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.tryDispose:()Z` @kind super;
  #L2940d6.  v0:= temp;
  #L2940d8.  if v0 != 0 then goto L2940de;
  #L2940dc.  return @kind void;
  #L2940de.  v0:= 0I;
  #L2940e0.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.AsyncSubject$AsyncDisposable` v1 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;.onComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L2940f4.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L2940fa.  v0:= temp;
  #L2940fc.  if v0 != 0 then goto L29410a;
  #L294100.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L294104.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L29410a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.AsyncSubject$AsyncDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject$AsyncDisposable;.onError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L29411c.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L294122.  v0:= temp;
  #L294124.  if v0 == 0 then goto L294130;
  #L294128.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L29412e.  goto L29413a;
  #L294130.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L294134.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L29413a.  return @kind void;
}
