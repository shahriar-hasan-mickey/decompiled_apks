record `io.reactivex.observers.b` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.observers.b.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.observers.b` v1 @kind this) @signature `Lio/reactivex/observers/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L291bc8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L291bce.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L291bd2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L291bd8.  v1.`io.reactivex.observers.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L291bdc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.observers.b` v0 @kind this) @signature `Lio/reactivex/observers/b;.a:()V` @AccessFlag PROTECTED {
    temp;

  #L291c0c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.observers.b` v1 @kind this) @signature `Lio/reactivex/observers/b;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L291bf0.  v0:= v1.`io.reactivex.observers.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L291bf4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L291bfa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.b` v2 @kind this) @signature `Lio/reactivex/observers/b;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L291b9c.  v0:= v2.`io.reactivex.observers.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L291ba0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L291ba6.  v0:= temp @kind object;
  #L291ba8.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L291bac.  if v0 != v1 then goto L291bb4;
  #L291bb0.  v0:= 1I;
  #L291bb2.  goto L291bb6;
  #L291bb4.  v0:= 0I;
  #L291bb6.  return v0;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.b` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/observers/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L291c20.  v0:= v2.`io.reactivex.observers.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L291c24.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L291c2a.  v1:= temp @kind object;
  #L291c2c.  call temp:= `c`(v0, v3, v1) @signature `Lio/reactivex/internal/util/f;.c:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;Ljava/lang/Class;)Z` @kind static;
  #L291c32.  v3:= temp;
  #L291c34.  if v3 == 0 then goto L291c3e;
  #L291c38.  call `a`(v2) @signature `Lio/reactivex/observers/b;.a:()V` @kind virtual;
  #L291c3e.  return @kind void;
}
