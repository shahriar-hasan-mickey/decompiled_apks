record `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind class @AccessFlag PUBLIC_ABSTRACT_ENUM extends `java.lang.Enum` @kind class, `java.lang.Runnable` @kind interface {
}
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1000MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_100MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SPIN` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.YIELD` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2919e4.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$1`;
  #L2919e8.  v1:= "SPIN" @kind object;
  #L2919ec.  v2:= 0I;
  #L2919ee.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$1;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2919f4.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SPIN` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L2919f8.  v1:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$2`;
  #L2919fc.  v3:= "YIELD" @kind object;
  #L291a00.  v4:= 1I;
  #L291a02.  call `<init>`(v1, v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$2;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L291a08.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.YIELD` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v1 @kind object;
  #L291a0c.  v3:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$3`;
  #L291a10.  v5:= "SLEEP_1MS" @kind object;
  #L291a14.  v6:= 2I;
  #L291a16.  call `<init>`(v3, v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$3;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L291a1c.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v3 @kind object;
  #L291a20.  v5:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$4`;
  #L291a24.  v7:= "SLEEP_10MS" @kind object;
  #L291a28.  v8:= 3I;
  #L291a2a.  call `<init>`(v5, v7, v8) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$4;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L291a30.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v5 @kind object;
  #L291a34.  v7:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$5`;
  #L291a38.  v9:= "SLEEP_100MS" @kind object;
  #L291a3c.  v10:= 4I;
  #L291a3e.  call `<init>`(v7, v9, v10) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$5;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L291a44.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_100MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v7 @kind object;
  #L291a48.  v9:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$6`;
  #L291a4c.  v11:= "SLEEP_1000MS" @kind object;
  #L291a50.  v12:= 5I;
  #L291a52.  call `<init>`(v9, v11, v12) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$6;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L291a58.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1000MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v9 @kind object;
  #L291a5c.  v11:= 6I;
  #L291a5e.  v11:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[v11];
  #L291a62.  v11[v2]:= v0 @kind object;
  #L291a66.  v11[v4]:= v1 @kind object;
  #L291a6a.  v11[v6]:= v3 @kind object;
  #L291a6e.  v11[v8]:= v5 @kind object;
  #L291a72.  v11[v10]:= v7 @kind object;
  #L291a76.  v11[v12]:= v9 @kind object;
  #L291a7a.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.$VALUES` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] := v11 @kind object;
  #L291a7e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L291a90.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L291a96.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `io.reactivex.observers.BaseTestConsumer$a` v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;ILio/reactivex/observers/BaseTestConsumer$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L291aa8.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L291aae.  return @kind void;
}
procedure `void` `sleep`(`int` v2 ) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.sleep:(I)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L291ac0.  v0:= (`long`) v2 @kind i2l;
  #L291ac2.  call `sleep`(v0) @signature `Ljava/lang/Thread;.sleep:(J)V` @kind static;
  #L291ac8.  return @kind void;
  #L291aca.  v2:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L291acc.  v0:= new `java.lang.RuntimeException`;
  #L291ad0.  call `<init>`(v0, v2) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L291ad6.  throw v0;
  catch `java.lang.InterruptedException` @[L291ac2..L291ac8] goto L291aca;
}
procedure `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.valueOf:(Ljava/lang/String;)Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L29199c.  v0:= constclass @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L2919a0.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L2919a6.  v1:= temp @kind object;
  #L2919a8.  v1:= (`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`) v1 @kind object;
  #L2919ac.  return v1 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] `values`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.values:()[Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2919c0.  v0:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.$VALUES` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] @kind object;
  #L2919c4.  call temp:= `clone`(v0) @signature `[Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2919ca.  v0:= temp @kind object;
  #L2919cc.  v0:= (`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[]) v0 @kind object;
  #L2919d0.  return v0 @kind object;
}
procedure `void` `run`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.run:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
