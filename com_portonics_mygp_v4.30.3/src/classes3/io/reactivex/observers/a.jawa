record `io.reactivex.observers.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.t` @kind interface {
  `io.reactivex.disposables.b` `io.reactivex.observers.a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.observers.a` v0 @kind this) @signature `Lio/reactivex/observers/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L291b3c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L291b42.  return @kind void;
}
procedure `void` `a`(`io.reactivex.observers.a` v0 @kind this) @signature `Lio/reactivex/observers/a;.a:()V` @AccessFlag PROTECTED {
    temp;

  #L291b54.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.a` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/observers/a;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L291b68.  v0:= v2.`io.reactivex.observers.a.b` @type ^`io.reactivex.disposables.b` @kind object;
  #L291b6c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L291b72.  v1:= temp @kind object;
  #L291b74.  call temp:= `e`(v0, v3, v1) @signature `Lio/reactivex/internal/util/f;.e:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;Ljava/lang/Class;)Z` @kind static;
  #L291b7a.  v0:= temp;
  #L291b7c.  if v0 == 0 then goto L291b8a;
  #L291b80.  v2.`io.reactivex.observers.a.b` @type ^`io.reactivex.disposables.b` := v3 @kind object;
  #L291b84.  call `a`(v2) @signature `Lio/reactivex/observers/a;.a:()V` @kind virtual;
  #L291b8a.  return @kind void;
}
