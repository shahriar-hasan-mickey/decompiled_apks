record `io.reactivex.observers.TestObserver$EmptyObserver` @kind class @AccessFlag FINAL_ENUM extends `java.lang.Enum` @kind class, `io.reactivex.t` @kind interface {
}
global `io.reactivex.observers.TestObserver$EmptyObserver`[] `@@io.reactivex.observers.TestObserver$EmptyObserver.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.observers.TestObserver$EmptyObserver` `@@io.reactivex.observers.TestObserver$EmptyObserver.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/observers/TestObserver$EmptyObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L292430.  v0:= new `io.reactivex.observers.TestObserver$EmptyObserver`;
  #L292434.  v1:= "INSTANCE" @kind object;
  #L292438.  v2:= 0I;
  #L29243a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/observers/TestObserver$EmptyObserver;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L292440.  `@@io.reactivex.observers.TestObserver$EmptyObserver.INSTANCE` @type ^`io.reactivex.observers.TestObserver$EmptyObserver` := v0 @kind object;
  #L292444.  v1:= 1I;
  #L292446.  v1:= new `io.reactivex.observers.TestObserver$EmptyObserver`[v1];
  #L29244a.  v1[v2]:= v0 @kind object;
  #L29244e.  `@@io.reactivex.observers.TestObserver$EmptyObserver.$VALUES` @type ^`io.reactivex.observers.TestObserver$EmptyObserver`[] := v1 @kind object;
  #L292452.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.TestObserver$EmptyObserver` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/observers/TestObserver$EmptyObserver;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L292464.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L29246a.  return @kind void;
}
procedure `io.reactivex.observers.TestObserver$EmptyObserver` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver$EmptyObserver;.valueOf:(Ljava/lang/String;)Lio/reactivex/observers/TestObserver$EmptyObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2923e8.  v0:= constclass @type ^`io.reactivex.observers.TestObserver$EmptyObserver` @kind object;
  #L2923ec.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L2923f2.  v1:= temp @kind object;
  #L2923f4.  v1:= (`io.reactivex.observers.TestObserver$EmptyObserver`) v1 @kind object;
  #L2923f8.  return v1 @kind object;
}
procedure `io.reactivex.observers.TestObserver$EmptyObserver`[] `values`() @signature `Lio/reactivex/observers/TestObserver$EmptyObserver;.values:()[Lio/reactivex/observers/TestObserver$EmptyObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L29240c.  v0:= `@@io.reactivex.observers.TestObserver$EmptyObserver.$VALUES` @type ^`io.reactivex.observers.TestObserver$EmptyObserver`[] @kind object;
  #L292410.  call temp:= `clone`(v0) @signature `[Lio/reactivex/observers/TestObserver$EmptyObserver;.clone:()Ljava/lang/Object;` @kind virtual;
  #L292416.  v0:= temp @kind object;
  #L292418.  v0:= (`io.reactivex.observers.TestObserver$EmptyObserver`[]) v0 @kind object;
  #L29241c.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.observers.TestObserver$EmptyObserver` v0 @kind this) @signature `Lio/reactivex/observers/TestObserver$EmptyObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L29247c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.observers.TestObserver$EmptyObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver$EmptyObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L292490.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.observers.TestObserver$EmptyObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver$EmptyObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L2924a4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.TestObserver$EmptyObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver$EmptyObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L2924b8.  return @kind void;
}
