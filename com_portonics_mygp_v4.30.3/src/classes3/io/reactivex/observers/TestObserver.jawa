record `io.reactivex.observers.TestObserver` @kind class @AccessFlag PUBLIC extends `io.reactivex.observers.BaseTestConsumer` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `io.reactivex.j` @kind interface, `io.reactivex.z` @kind interface, `io.reactivex.b` @kind interface {
  `io.reactivex.t` `io.reactivex.observers.TestObserver.j` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.observers.TestObserver.k` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.e0.a.e` `io.reactivex.observers.TestObserver.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2924f8.  v0:= `@@io.reactivex.observers.TestObserver$EmptyObserver.INSTANCE` @type ^`io.reactivex.observers.TestObserver$EmptyObserver` @kind object;
  #L2924fc.  call `<init>`(v1, v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:(Lio/reactivex/t;)V` @kind direct;
  #L292502.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.TestObserver` v1 @kind this, `io.reactivex.t` v2 @kind object) @signature `Lio/reactivex/observers/TestObserver;.<init>:(Lio/reactivex/t;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L292514.  call `<init>`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.<init>:()V` @kind direct;
  #L29251a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L29251e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L292524.  v1.`io.reactivex.observers.TestObserver.k` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L292528.  v1.`io.reactivex.observers.TestObserver.j` @type ^`io.reactivex.t` := v2 @kind object;
  #L29252c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L292540.  v0:= v1.`io.reactivex.observers.TestObserver.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L292544.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L29254a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2924cc.  v0:= v1.`io.reactivex.observers.TestObserver.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2924d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2924d6.  v0:= temp @kind object;
  #L2924d8.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2924dc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2924e2.  v0:= temp;
  #L2924e4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.observers.TestObserver` v4 @kind this) @signature `Lio/reactivex/observers/TestObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29255c.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.g` @type ^`boolean` @kind boolean;
  #L292560.  if v0 != 0 then goto L292592;
  #L292564.  v0:= 1I;
  #L292566.  v4.`io.reactivex.observers.BaseTestConsumer.g` @type ^`boolean` := v0 @kind boolean;
  #L29256a.  v0:= v4.`io.reactivex.observers.TestObserver.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L29256e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L292574.  v0:= temp @kind object;
  #L292576.  if v0 != 0 then goto L292592;
  #L29257a.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.d` @type ^`java.util.List` @kind object;
  #L29257e.  v1:= new `java.lang.IllegalStateException`;
  #L292582.  v2:= "onSubscribe not called in proper order" @kind object;
  #L292586.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29258c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L292592.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L292598.  v0:= temp @kind object;
  #L29259a.  v4.`io.reactivex.observers.BaseTestConsumer.f` @type ^`java.lang.Thread` := v0 @kind object;
  #L29259e.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.e` @type ^`long` @kind wide;
  #L2925a2.  v2:= 1L;
  #L2925a6.  v0:= v0 + v2 @kind long;
  #L2925a8.  v4.`io.reactivex.observers.BaseTestConsumer.e` @type ^`long` := v0 @kind wide;
  #L2925ac.  v0:= v4.`io.reactivex.observers.TestObserver.j` @type ^`io.reactivex.t` @kind object;
  #L2925b0.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2925b6.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.b` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L2925ba.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L2925c0.  return @kind void;
  #L2925c2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2925c4.  v1:= v4.`io.reactivex.observers.BaseTestConsumer.b` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L2925c8.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L2925ce.  throw v0;
  catch `java.lang.Throwable` @[L292592..L2925b6] goto L2925c2;
}
procedure `void` `onError`(`io.reactivex.observers.TestObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2925ec.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.g` @type ^`boolean` @kind boolean;
  #L2925f0.  if v0 != 0 then goto L292622;
  #L2925f4.  v0:= 1I;
  #L2925f6.  v3.`io.reactivex.observers.BaseTestConsumer.g` @type ^`boolean` := v0 @kind boolean;
  #L2925fa.  v0:= v3.`io.reactivex.observers.TestObserver.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2925fe.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L292604.  v0:= temp @kind object;
  #L292606.  if v0 != 0 then goto L292622;
  #L29260a.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.d` @type ^`java.util.List` @kind object;
  #L29260e.  v1:= new `java.lang.IllegalStateException`;
  #L292612.  v2:= "onSubscribe not called in proper order" @kind object;
  #L292616.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29261c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L292622.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L292628.  v0:= temp @kind object;
  #L29262a.  v3.`io.reactivex.observers.BaseTestConsumer.f` @type ^`java.lang.Thread` := v0 @kind object;
  #L29262e.  if v4 != 0 then goto L29264c;
  #L292632.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.d` @type ^`java.util.List` @kind object;
  #L292636.  v1:= new `java.lang.NullPointerException`;
  #L29263a.  v2:= "onError received a null Throwable" @kind object;
  #L29263e.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L292644.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29264a.  goto L292656;
  #L29264c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.d` @type ^`java.util.List` @kind object;
  #L292650.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L292656.  v0:= v3.`io.reactivex.observers.TestObserver.j` @type ^`io.reactivex.t` @kind object;
  #L29265a.  call `onError`(v0, v4) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L292660.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.b` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L292664.  call `countDown`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L29266a.  return @kind void;
  #L29266c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29266e.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.b` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L292672.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L292678.  throw v4;
  catch `java.lang.Throwable` @[L292622..L292660] goto L29266c;
}
procedure `void` `onNext`(`io.reactivex.observers.TestObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L292698.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.g` @type ^`boolean` @kind boolean;
  #L29269c.  if v0 != 0 then goto L2926ce;
  #L2926a0.  v0:= 1I;
  #L2926a2.  v3.`io.reactivex.observers.BaseTestConsumer.g` @type ^`boolean` := v0 @kind boolean;
  #L2926a6.  v0:= v3.`io.reactivex.observers.TestObserver.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2926aa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2926b0.  v0:= temp @kind object;
  #L2926b2.  if v0 != 0 then goto L2926ce;
  #L2926b6.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.d` @type ^`java.util.List` @kind object;
  #L2926ba.  v1:= new `java.lang.IllegalStateException`;
  #L2926be.  v2:= "onSubscribe not called in proper order" @kind object;
  #L2926c2.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2926c8.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2926ce.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2926d4.  v0:= temp @kind object;
  #L2926d6.  v3.`io.reactivex.observers.BaseTestConsumer.f` @type ^`java.lang.Thread` := v0 @kind object;
  #L2926da.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.i` @type ^`int`;
  #L2926de.  v1:= 2I;
  #L2926e0.  if v0 != v1 then goto L292718;
  #L2926e4.  v4:= v3.`io.reactivex.observers.TestObserver.l` @type ^`io.reactivex.e0.a.e` @kind object;
  #L2926e8.  call temp:= `poll`(v4) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L2926ee.  v4:= temp @kind object;
  #L2926f0.  if v4 == 0 then goto L292716;
  #L2926f4.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.c` @type ^`java.util.List` @kind object;
  #L2926f8.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2926fe.  goto L2926e4;
  #L292700.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L292702.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.d` @type ^`java.util.List` @kind object;
  #L292706.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29270c.  v4:= v3.`io.reactivex.observers.TestObserver.l` @type ^`io.reactivex.e0.a.e` @kind object;
  #L292710.  call `dispose`(v4) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L292716.  return @kind void;
  #L292718.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.c` @type ^`java.util.List` @kind object;
  #L29271c.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L292722.  if v4 != 0 then goto L29273e;
  #L292726.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.d` @type ^`java.util.List` @kind object;
  #L29272a.  v1:= new `java.lang.NullPointerException`;
  #L29272e.  v2:= "onNext received a null value" @kind object;
  #L292732.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L292738.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29273e.  v0:= v3.`io.reactivex.observers.TestObserver.j` @type ^`io.reactivex.t` @kind object;
  #L292742.  call `onNext`(v0, v4) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L292748.  return @kind void;
  catch `java.lang.Throwable` @[L2926e4..L2926fe] goto L292700;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.TestObserver` v4 @kind this, `io.reactivex.disposables.b` v5 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L292768.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L29276e.  v0:= temp @kind object;
  #L292770.  v4.`io.reactivex.observers.BaseTestConsumer.f` @type ^`java.lang.Thread` := v0 @kind object;
  #L292774.  if v5 != 0 then goto L292792;
  #L292778.  v5:= v4.`io.reactivex.observers.BaseTestConsumer.d` @type ^`java.util.List` @kind object;
  #L29277c.  v0:= new `java.lang.NullPointerException`;
  #L292780.  v1:= "onSubscribe received a null Subscription" @kind object;
  #L292784.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29278a.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L292790.  return @kind void;
  #L292792.  v0:= v4.`io.reactivex.observers.TestObserver.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L292796.  v1:= 0I;
  #L292798.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L29279e.  v0:= temp;
  #L2927a0.  if v0 != 0 then goto L2927f6;
  #L2927a4.  call `dispose`(v5) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2927aa.  v0:= v4.`io.reactivex.observers.TestObserver.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2927ae.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2927b4.  v0:= temp @kind object;
  #L2927b6.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2927ba.  if v0 == v1 then goto L2927f4;
  #L2927be.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.d` @type ^`java.util.List` @kind object;
  #L2927c2.  v1:= new `java.lang.IllegalStateException`;
  #L2927c6.  v2:= new `java.lang.StringBuilder`;
  #L2927ca.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2927d0.  v3:= "onSubscribe received multiple subscriptions: " @kind object;
  #L2927d4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2927da.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2927e0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2927e6.  v5:= temp @kind object;
  #L2927e8.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2927ee.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2927f4.  return @kind void;
  #L2927f6.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.h` @type ^`int`;
  #L2927fa.  if v0 == 0 then goto L29287a;
  #L2927fe.  v1:= instanceof @variable v5 @type ^`io.reactivex.e0.a.e` @kind boolean;
  #L292802.  if v1 == 0 then goto L29287a;
  #L292806.  v1:= v5 @kind object;
  #L292808.  v1:= (`io.reactivex.e0.a.e`) v1 @kind object;
  #L29280c.  v4.`io.reactivex.observers.TestObserver.l` @type ^`io.reactivex.e0.a.e` := v1 @kind object;
  #L292810.  call temp:= `requestFusion`(v1, v0) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L292816.  v0:= temp;
  #L292818.  v4.`io.reactivex.observers.BaseTestConsumer.i` @type ^`int` := v0;
  #L29281c.  v1:= 1I;
  #L29281e.  if v0 != v1 then goto L29287a;
  #L292822.  v4.`io.reactivex.observers.BaseTestConsumer.g` @type ^`boolean` := v1 @kind boolean;
  #L292826.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L29282c.  v5:= temp @kind object;
  #L29282e.  v4.`io.reactivex.observers.BaseTestConsumer.f` @type ^`java.lang.Thread` := v5 @kind object;
  #L292832.  v5:= v4.`io.reactivex.observers.TestObserver.l` @type ^`io.reactivex.e0.a.e` @kind object;
  #L292836.  call temp:= `poll`(v5) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L29283c.  v5:= temp @kind object;
  #L29283e.  if v5 == 0 then goto L29284e;
  #L292842.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.c` @type ^`java.util.List` @kind object;
  #L292846.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29284c.  goto L292832;
  #L29284e.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.e` @type ^`long` @kind wide;
  #L292852.  v2:= 1L;
  #L292856.  v0:= v0 + v2 @kind long;
  #L292858.  v4.`io.reactivex.observers.BaseTestConsumer.e` @type ^`long` := v0 @kind wide;
  #L29285c.  v5:= v4.`io.reactivex.observers.TestObserver.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L292860.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L292864.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L29286a.  goto L292878;
  #L29286c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29286e.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.d` @type ^`java.util.List` @kind object;
  #L292872.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L292878.  return @kind void;
  #L29287a.  v0:= v4.`io.reactivex.observers.TestObserver.j` @type ^`io.reactivex.t` @kind object;
  #L29287e.  call `onSubscribe`(v0, v5) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L292884.  return @kind void;
  catch `java.lang.Throwable` @[L292832..L29286a] goto L29286c;
}
procedure `void` `onSuccess`(`io.reactivex.observers.TestObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L2928a4.  call `onNext`(v0, v1) @signature `Lio/reactivex/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L2928aa.  call `onComplete`(v0) @signature `Lio/reactivex/observers/TestObserver;.onComplete:()V` @kind virtual;
  #L2928b0.  return @kind void;
}
