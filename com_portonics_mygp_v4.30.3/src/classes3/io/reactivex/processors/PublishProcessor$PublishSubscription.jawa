record `io.reactivex.processors.PublishProcessor$PublishSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @AccessFlag FINAL;
  `io.reactivex.processors.PublishProcessor` `io.reactivex.processors.PublishProcessor$PublishSubscription.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.processors.PublishProcessor$PublishSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.processors.PublishProcessor` v2 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.<init>:(Ln/b/c;Lio/reactivex/processors/PublishProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L293420.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L293426.  v0.`io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @type ^`n.b.c` := v1 @kind object;
  #L29342a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L29343c.  v0:= -9223372036854775808L;
  #L293440.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L293446.  v2:= temp @kind wide;
  #L293448.  v4:= lcmp(v2, v0);
  #L29344c.  if v4 != 0 then goto L293452;
  #L293450.  return @kind void;
  #L293452.  v0:= 0I;
  #L293454.  throw v0;
}
procedure `boolean` `isCancelled`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2933c8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2933ce.  v0:= temp @kind wide;
  #L2933d0.  v2:= -9223372036854775808L;
  #L2933d4.  v4:= lcmp(v0, v2);
  #L2933d8.  if v4 != 0 then goto L2933e0;
  #L2933dc.  v0:= 1I;
  #L2933de.  goto L2933e2;
  #L2933e0.  v0:= 0I;
  #L2933e2.  return v0;
}
procedure `boolean` `isFull`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.isFull:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2933f4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2933fa.  v0:= temp @kind wide;
  #L2933fc.  v2:= 0L;
  #L293400.  v4:= lcmp(v0, v2);
  #L293404.  if v4 != 0 then goto L29340c;
  #L293408.  v0:= 1I;
  #L29340a.  goto L29340e;
  #L29340c.  v0:= 0I;
  #L29340e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L293468.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L29346e.  v0:= temp @kind wide;
  #L293470.  v2:= -9223372036854775808L;
  #L293474.  v4:= lcmp(v0, v2);
  #L293478.  if v4 == 0 then goto L293486;
  #L29347c.  v0:= v5.`io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @type ^`n.b.c` @kind object;
  #L293480.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L293486.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L293498.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L29349e.  v0:= temp @kind wide;
  #L2934a0.  v2:= -9223372036854775808L;
  #L2934a4.  v4:= lcmp(v0, v2);
  #L2934a8.  if v4 == 0 then goto L2934b8;
  #L2934ac.  v0:= v5.`io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @type ^`n.b.c` @kind object;
  #L2934b0.  call `onError`(v0, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2934b6.  goto L2934be;
  #L2934b8.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2934be.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2934d0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2934d6.  v0:= temp @kind wide;
  #L2934d8.  v2:= -9223372036854775808L;
  #L2934dc.  v4:= lcmp(v0, v2);
  #L2934e0.  if v4 != 0 then goto L2934e6;
  #L2934e4.  return @kind void;
  #L2934e6.  v2:= 0L;
  #L2934ea.  v4:= lcmp(v0, v2);
  #L2934ee.  if v4 == 0 then goto L293508;
  #L2934f2.  v0:= v5.`io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @type ^`n.b.c` @kind object;
  #L2934f6.  call `onNext`(v0, v6) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2934fc.  v0:= 1L;
  #L293500.  call temp:= `f`(v5, v0) @signature `Lio/reactivex/internal/util/b;.f:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L293506.  goto L293526;
  #L293508.  call `cancel`(v5) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.cancel:()V` @kind virtual;
  #L29350e.  v6:= v5.`io.reactivex.processors.PublishProcessor$PublishSubscription.downstream` @type ^`n.b.c` @kind object;
  #L293512.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L293516.  v1:= "Could not emit value due to lack of requests" @kind object;
  #L29351a.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L293520.  call `onError`(v6, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L293526.  return @kind void;
}
procedure `void` `request`(`io.reactivex.processors.PublishProcessor$PublishSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/PublishProcessor$PublishSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L293538.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L29353e.  v0:= temp;
  #L293540.  if v0 == 0 then goto L29354a;
  #L293544.  call temp:= `b`(v1, v2) @signature `Lio/reactivex/internal/util/b;.b:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L29354a.  return @kind void;
}
