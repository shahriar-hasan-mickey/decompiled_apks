record `io.reactivex.processors.AsyncProcessor$AsyncSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class {
  `io.reactivex.processors.AsyncProcessor` `io.reactivex.processors.AsyncProcessor$AsyncSubscription.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.processors.AsyncProcessor$AsyncSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.AsyncProcessor$AsyncSubscription` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.processors.AsyncProcessor` v2 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.<init>:(Ln/b/c;Lio/reactivex/processors/AsyncProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L292f3c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Ln/b/c;)V` @kind direct;
  #L292f42.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.AsyncProcessor$AsyncSubscription` v1 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L292f54.  call temp:= `tryCancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.tryCancel:()Z` @kind super;
  #L292f5a.  v0:= temp;
  #L292f5c.  if v0 != 0 then goto L292f62;
  #L292f60.  return @kind void;
  #L292f62.  v0:= 0I;
  #L292f64.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.AsyncProcessor$AsyncSubscription` v1 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.onComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L292f78.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @kind virtual;
  #L292f7e.  v0:= temp;
  #L292f80.  if v0 != 0 then goto L292f8e;
  #L292f84.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L292f88.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L292f8e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.AsyncProcessor$AsyncSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor$AsyncSubscription;.onError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L292fa0.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @kind virtual;
  #L292fa6.  v0:= temp;
  #L292fa8.  if v0 == 0 then goto L292fb4;
  #L292fac.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L292fb2.  goto L292fbe;
  #L292fb4.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L292fb8.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L292fbe.  return @kind void;
}
