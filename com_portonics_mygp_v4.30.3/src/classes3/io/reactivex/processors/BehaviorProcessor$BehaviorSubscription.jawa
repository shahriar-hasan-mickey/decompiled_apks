record `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `n.b.d` @kind interface, `io.reactivex.internal.util.a$a` @kind interface {
  `boolean` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.emitting` @AccessFlag ;
  `boolean` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.fastPath` @AccessFlag ;
  `long` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.index` @AccessFlag ;
  `boolean` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.next` @AccessFlag ;
  `io.reactivex.internal.util.a` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.queue` @AccessFlag ;
  `io.reactivex.processors.BehaviorProcessor` `io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.state` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.processors.BehaviorProcessor` v2 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.<init>:(Ln/b/c;Lio/reactivex/processors/BehaviorProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2930b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L2930ba.  v0.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @type ^`n.b.c` := v1 @kind object;
  #L2930be.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2930d0.  v0:= v1.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2930d4.  if v0 == 0 then goto L2930da;
  #L2930d8.  return @kind void;
  #L2930da.  v0:= 1I;
  #L2930dc.  v1.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2930e0.  v0:= 0I;
  #L2930e2.  throw v0;
}
procedure `void` `emitFirst`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitFirst:()V` @AccessFlag  {
    temp;
    v0;

  #L2930f4.  v0:= v1.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2930f8.  if v0 == 0 then goto L2930fe;
  #L2930fc.  return @kind void;
  #L2930fe.  @monitorenter v1
  #L293100.  v0:= v1.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L293104.  if v0 == 0 then goto L29310c;
  #L293108.  @monitorexit v1
  #L29310a.  return @kind void;
  #L29310c.  v0:= v1.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.next` @type ^`boolean` @kind boolean;
  #L293110.  if v0 == 0 then goto L293118;
  #L293114.  @monitorexit v1
  #L293116.  return @kind void;
  #L293118.  v0:= 0I;
  #L29311a.  throw v0;
  #L29311c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29311e.  @monitorexit v1
  #L293120.  throw v0;
  catch `java.lang.Throwable` @[L293100..L293120] goto L29311c;
}
procedure `void` `emitLoop`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L293140.  v0:= v2.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L293144.  if v0 == 0 then goto L29314a;
  #L293148.  return @kind void;
  #L29314a.  @monitorenter v2
  #L29314c.  v0:= v2.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.queue` @type ^`io.reactivex.internal.util.a` @kind object;
  #L293150.  if v0 != 0 then goto L29315e;
  #L293154.  v0:= 0I;
  #L293156.  v2.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.emitting` @type ^`boolean` := v0 @kind boolean;
  #L29315a.  @monitorexit v2
  #L29315c.  return @kind void;
  #L29315e.  v1:= 0I;
  #L293160.  v2.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.queue` @type ^`io.reactivex.internal.util.a` := v1 @kind object;
  #L293164.  @monitorexit v2
  #L293166.  call `c`(v0, v2) @signature `Lio/reactivex/internal/util/a;.c:(Lio/reactivex/internal/util/a$a;)V` @kind virtual;
  #L29316c.  goto L293140;
  #L29316e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L293170.  @monitorexit v2
  #L293172.  goto L293176;
  #L293174.  throw v0;
  #L293176.  goto L293174;
  catch `java.lang.Throwable` @[L29314c..L293166] goto L29316e;
  catch `java.lang.Throwable` @[L293170..L293172] goto L29316e;
}
procedure `void` `emitNext`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v3 @kind this, `java.lang.Object` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.emitNext:(Ljava/lang/Object;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L29319c.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2931a0.  if v0 == 0 then goto L2931a6;
  #L2931a4.  return @kind void;
  #L2931a6.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.fastPath` @type ^`boolean` @kind boolean;
  #L2931aa.  if v0 != 0 then goto L29320a;
  #L2931ae.  @monitorenter v3
  #L2931b0.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2931b4.  if v0 == 0 then goto L2931bc;
  #L2931b8.  @monitorexit v3
  #L2931ba.  return @kind void;
  #L2931bc.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.index` @type ^`long` @kind wide;
  #L2931c0.  v2:= lcmp(v0, v5);
  #L2931c4.  if v2 != 0 then goto L2931cc;
  #L2931c8.  @monitorexit v3
  #L2931ca.  return @kind void;
  #L2931cc.  v5:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.emitting` @type ^`boolean` @kind boolean;
  #L2931d0.  if v5 == 0 then goto L2931f6;
  #L2931d4.  v5:= v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.queue` @type ^`io.reactivex.internal.util.a` @kind object;
  #L2931d8.  if v5 != 0 then goto L2931ec;
  #L2931dc.  v5:= new `io.reactivex.internal.util.a`;
  #L2931e0.  v6:= 4I;
  #L2931e2.  call `<init>`(v5, v6) @signature `Lio/reactivex/internal/util/a;.<init>:(I)V` @kind direct;
  #L2931e8.  v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.queue` @type ^`io.reactivex.internal.util.a` := v5 @kind object;
  #L2931ec.  call `b`(v5, v4) @signature `Lio/reactivex/internal/util/a;.b:(Ljava/lang/Object;)V` @kind virtual;
  #L2931f2.  @monitorexit v3
  #L2931f4.  return @kind void;
  #L2931f6.  v5:= 1I;
  #L2931f8.  v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.next` @type ^`boolean` := v5 @kind boolean;
  #L2931fc.  @monitorexit v3
  #L2931fe.  v3.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.fastPath` @type ^`boolean` := v5 @kind boolean;
  #L293202.  goto L29320a;
  #L293204.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L293206.  @monitorexit v3
  #L293208.  throw v4;
  #L29320a.  call temp:= `test`(v3, v4) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L293210.  return @kind void;
  catch `java.lang.Throwable` @[L2931b0..L2931fe] goto L293204;
  catch `java.lang.Throwable` @[L293206..L293208] goto L293204;
}
procedure `boolean` `isFull`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v5 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.isFull:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L292fd0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L292fd6.  v0:= temp @kind wide;
  #L292fd8.  v2:= 0L;
  #L292fdc.  v4:= lcmp(v0, v2);
  #L292fe0.  if v4 != 0 then goto L292fe8;
  #L292fe4.  v0:= 1I;
  #L292fe6.  goto L292fea;
  #L292fe8.  v0:= 0I;
  #L292fea.  return v0;
}
procedure `void` `request`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L293238.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L29323e.  v0:= temp;
  #L293240.  if v0 == 0 then goto L29324a;
  #L293244.  call temp:= `a`(v1, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L29324a.  return @kind void;
}
procedure `boolean` `test`(`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L292ffc.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L293000.  v1:= 1I;
  #L293002.  if v0 == 0 then goto L293008;
  #L293006.  return v1;
  #L293008.  call temp:= `isComplete`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L29300e.  v0:= temp;
  #L293010.  if v0 == 0 then goto L293020;
  #L293014.  v7:= v6.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @type ^`n.b.c` @kind object;
  #L293018.  call `onComplete`(v7) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L29301e.  return v1;
  #L293020.  call temp:= `isError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L293026.  v0:= temp;
  #L293028.  if v0 == 0 then goto L293040;
  #L29302c.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @type ^`n.b.c` @kind object;
  #L293030.  call temp:= `getError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L293036.  v7:= temp @kind object;
  #L293038.  call `onError`(v0, v7) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L29303e.  return v1;
  #L293040.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L293046.  v2:= temp @kind wide;
  #L293048.  v4:= 0L;
  #L29304c.  v0:= lcmp(v2, v4);
  #L293050.  if v0 == 0 then goto L293082;
  #L293054.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @type ^`n.b.c` @kind object;
  #L293058.  call temp:= `getValue`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L29305e.  v7:= temp @kind object;
  #L293060.  call `onNext`(v0, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L293066.  v0:= 9223372036854775807L;
  #L293070.  v7:= lcmp(v2, v0);
  #L293074.  if v7 == 0 then goto L29307e;
  #L293078.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L29307e.  v7:= 0I;
  #L293080.  return v7;
  #L293082.  call `cancel`(v6) @signature `Lio/reactivex/processors/BehaviorProcessor$BehaviorSubscription;.cancel:()V` @kind virtual;
  #L293088.  v7:= v6.`io.reactivex.processors.BehaviorProcessor$BehaviorSubscription.downstream` @type ^`n.b.c` @kind object;
  #L29308c.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L293090.  v2:= "Could not deliver value due to lack of requests" @kind object;
  #L293094.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29309a.  call `onError`(v7, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2930a0.  return v1;
}
