record `io.reactivex.processors.UnicastProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.a` @kind class {
  `io.reactivex.internal.queue.a` `io.reactivex.processors.UnicastProcessor.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.UnicastProcessor.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.f` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.processors.UnicastProcessor.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.UnicastProcessor.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.processors.UnicastProcessor.j` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` `io.reactivex.processors.UnicastProcessor.k` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.processors.UnicastProcessor.l` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.m` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L293838.  v0:= 0I;
  #L29383a.  v1:= 1I;
  #L29383c.  call `<init>`(v2, v3, v0, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L293842.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `int` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L293854.  v0:= 1I;
  #L293856.  call `<init>`(v1, v2, v3, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L29385c.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `int` v3 , `java.lang.Runnable` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L293870.  call `<init>`(v2) @signature `Lio/reactivex/processors/a;.<init>:()V` @kind direct;
  #L293876.  v0:= new `io.reactivex.internal.queue.a`;
  #L29387a.  v1:= "capacityHint" @kind object;
  #L29387e.  call temp:= `f`(v3, v1) @signature `Lio/reactivex/internal/functions/g0;.f:(ILjava/lang/String;)I` @kind static;
  #L293884.  v3:= temp;
  #L293886.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L29388c.  v2.`io.reactivex.processors.UnicastProcessor.c` @type ^`io.reactivex.internal.queue.a` := v0 @kind object;
  #L293890.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L293894.  call `<init>`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L29389a.  v2.`io.reactivex.processors.UnicastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L29389e.  v2.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` := v5 @kind boolean;
  #L2938a2.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2938a6.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2938ac.  v2.`io.reactivex.processors.UnicastProcessor.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L2938b0.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L2938b4.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L2938ba.  v2.`io.reactivex.processors.UnicastProcessor.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L2938be.  v3:= new `io.reactivex.processors.UnicastProcessor$UnicastQueueSubscription`;
  #L2938c2.  call `<init>`(v3, v2) @signature `Lio/reactivex/processors/UnicastProcessor$UnicastQueueSubscription;.<init>:(Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L2938c8.  v2.`io.reactivex.processors.UnicastProcessor.k` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` := v3 @kind object;
  #L2938cc.  v3:= new `java.util.concurrent.atomic.AtomicLong`;
  #L2938d0.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L2938d6.  v2.`io.reactivex.processors.UnicastProcessor.l` @type ^`java.util.concurrent.atomic.AtomicLong` := v3 @kind object;
  #L2938da.  return @kind void;
}
procedure `io.reactivex.processors.UnicastProcessor` `K`() @signature `Lio/reactivex/processors/UnicastProcessor;.K:()Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2937ec.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L2937f0.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L2937f6.  v1:= temp;
  #L2937f8.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(I)V` @kind direct;
  #L2937fe.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `L`(`int` v1 , `java.lang.Runnable` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.L:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L293810.  v0:= "onTerminate" @kind object;
  #L293814.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L29381a.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L29381e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;)V` @kind direct;
  #L293824.  return v0 @kind object;
}
procedure `void` `H`(`io.reactivex.processors.UnicastProcessor` v3 @kind this, `n.b.c` v4 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.H:(Ln/b/c;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L293c40.  v0:= v3.`io.reactivex.processors.UnicastProcessor.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L293c44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L293c4a.  v0:= temp;
  #L293c4c.  if v0 != 0 then goto L293c96;
  #L293c50.  v0:= v3.`io.reactivex.processors.UnicastProcessor.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L293c54.  v1:= 0I;
  #L293c56.  v2:= 1I;
  #L293c58.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L293c5e.  v0:= temp;
  #L293c60.  if v0 == 0 then goto L293c96;
  #L293c64.  v0:= v3.`io.reactivex.processors.UnicastProcessor.k` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L293c68.  call `onSubscribe`(v4, v0) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L293c6e.  v0:= v3.`io.reactivex.processors.UnicastProcessor.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L293c72.  call `set`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L293c78.  v4:= v3.`io.reactivex.processors.UnicastProcessor.i` @type ^`boolean` @kind boolean;
  #L293c7c.  if v4 == 0 then goto L293c8e;
  #L293c80.  v4:= v3.`io.reactivex.processors.UnicastProcessor.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L293c84.  v0:= 0I;
  #L293c86.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L293c8c.  goto L293caa;
  #L293c8e.  call `N`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.N:()V` @kind virtual;
  #L293c94.  goto L293caa;
  #L293c96.  v0:= new `java.lang.IllegalStateException`;
  #L293c9a.  v1:= "This processor allows only a single Subscriber" @kind object;
  #L293c9e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L293ca4.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Ln/b/c;)V` @kind static;
  #L293caa.  return @kind void;
}
procedure `boolean` `J`(`io.reactivex.processors.UnicastProcessor` v3 @kind this, `boolean` v4 , `boolean` v5 , `boolean` v6 , `n.b.c` v7 @kind object, `io.reactivex.internal.queue.a` v8 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.J:(ZZZLn/b/c;Lio/reactivex/internal/queue/a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L293768.  v0:= v3.`io.reactivex.processors.UnicastProcessor.i` @type ^`boolean` @kind boolean;
  #L29376c.  v1:= 1I;
  #L29376e.  v2:= 0I;
  #L293770.  if v0 == 0 then goto L293786;
  #L293774.  call `clear`(v8) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L29377a.  v4:= v3.`io.reactivex.processors.UnicastProcessor.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L29377e.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L293784.  return v1;
  #L293786.  if v5 == 0 then goto L2937d8;
  #L29378a.  if v4 == 0 then goto L2937b2;
  #L29378e.  v4:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.lang.Throwable` @kind object;
  #L293792.  if v4 == 0 then goto L2937b2;
  #L293796.  call `clear`(v8) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L29379c.  v4:= v3.`io.reactivex.processors.UnicastProcessor.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2937a0.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2937a6.  v4:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.lang.Throwable` @kind object;
  #L2937aa.  call `onError`(v7, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2937b0.  return v1;
  #L2937b2.  if v6 == 0 then goto L2937d8;
  #L2937b6.  v4:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.lang.Throwable` @kind object;
  #L2937ba.  v5:= v3.`io.reactivex.processors.UnicastProcessor.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2937be.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2937c4.  if v4 == 0 then goto L2937d0;
  #L2937c8.  call `onError`(v7, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2937ce.  goto L2937d6;
  #L2937d0.  call `onComplete`(v7) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2937d6.  return v1;
  #L2937d8.  v4:= 0I;
  #L2937da.  return v4;
}
procedure `void` `M`(`io.reactivex.processors.UnicastProcessor` v2 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.M:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2938ec.  v0:= v2.`io.reactivex.processors.UnicastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2938f0.  v1:= 0I;
  #L2938f2.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2938f8.  v0:= temp @kind object;
  #L2938fa.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L2938fe.  if v0 == 0 then goto L293908;
  #L293902.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L293908.  return @kind void;
}
procedure `void` `N`(`io.reactivex.processors.UnicastProcessor` v2 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.N:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L29391c.  v0:= v2.`io.reactivex.processors.UnicastProcessor.k` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L293920.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L293926.  v0:= temp;
  #L293928.  if v0 == 0 then goto L29392e;
  #L29392c.  return @kind void;
  #L29392e.  v0:= 1I;
  #L293930.  v1:= v2.`io.reactivex.processors.UnicastProcessor.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L293934.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L29393a.  v1:= temp @kind object;
  #L29393c.  v1:= (`n.b.c`) v1 @kind object;
  #L293940.  if v1 == 0 then goto L29395c;
  #L293944.  v0:= v2.`io.reactivex.processors.UnicastProcessor.m` @type ^`boolean` @kind boolean;
  #L293948.  if v0 == 0 then goto L293954;
  #L29394c.  call `O`(v2, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.O:(Ln/b/c;)V` @kind virtual;
  #L293952.  goto L29395a;
  #L293954.  call `P`(v2, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.P:(Ln/b/c;)V` @kind virtual;
  #L29395a.  return @kind void;
  #L29395c.  v1:= v2.`io.reactivex.processors.UnicastProcessor.k` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L293960.  v0:= -v0 @kind int;
  #L293962.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L293968.  v0:= temp;
  #L29396a.  if v0 != 0 then goto L293970;
  #L29396e.  return @kind void;
  #L293970.  v1:= v2.`io.reactivex.processors.UnicastProcessor.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L293974.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L29397a.  v1:= temp @kind object;
  #L29397c.  v1:= (`n.b.c`) v1 @kind object;
  #L293980.  goto L293940;
}
procedure `void` `O`(`io.reactivex.processors.UnicastProcessor` v6 @kind this, `n.b.c` v7 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.O:(Ln/b/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L293994.  v0:= v6.`io.reactivex.processors.UnicastProcessor.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L293998.  v1:= v6.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L29399c.  v2:= 1I;
  #L29399e.  v1:= v1 ^~ v2 @kind int;
  #L2939a0.  v3:= v6.`io.reactivex.processors.UnicastProcessor.i` @type ^`boolean` @kind boolean;
  #L2939a4.  v4:= 0I;
  #L2939a6.  if v3 == 0 then goto L2939bc;
  #L2939aa.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2939b0.  v7:= v6.`io.reactivex.processors.UnicastProcessor.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2939b4.  call `lazySet`(v7, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2939ba.  return @kind void;
  #L2939bc.  v3:= v6.`io.reactivex.processors.UnicastProcessor.f` @type ^`boolean` @kind boolean;
  #L2939c0.  if v1 == 0 then goto L2939ec;
  #L2939c4.  if v3 == 0 then goto L2939ec;
  #L2939c8.  v5:= v6.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.lang.Throwable` @kind object;
  #L2939cc.  if v5 == 0 then goto L2939ec;
  #L2939d0.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2939d6.  v0:= v6.`io.reactivex.processors.UnicastProcessor.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2939da.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2939e0.  v0:= v6.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.lang.Throwable` @kind object;
  #L2939e4.  call `onError`(v7, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2939ea.  return @kind void;
  #L2939ec.  call `onNext`(v7, v4) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2939f2.  if v3 == 0 then goto L293a18;
  #L2939f6.  v0:= v6.`io.reactivex.processors.UnicastProcessor.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2939fa.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L293a00.  v0:= v6.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.lang.Throwable` @kind object;
  #L293a04.  if v0 == 0 then goto L293a10;
  #L293a08.  call `onError`(v7, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L293a0e.  goto L293a16;
  #L293a10.  call `onComplete`(v7) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L293a16.  return @kind void;
  #L293a18.  v3:= v6.`io.reactivex.processors.UnicastProcessor.k` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L293a1c.  v2:= -v2 @kind int;
  #L293a1e.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L293a24.  v2:= temp;
  #L293a26.  if v2 != 0 then goto L2939a0;
  #L293a2a.  return @kind void;
}
procedure `void` `P`(`io.reactivex.processors.UnicastProcessor` v17 @kind this, `n.b.c` v18 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.P:(Ln/b/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L293a3c.  v6:= v17 @kind object;
  #L293a40.  v7:= v6.`io.reactivex.processors.UnicastProcessor.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L293a44.  v0:= v6.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L293a48.  v8:= 1I;
  #L293a4a.  v9:= v0 ^~ 1;
  #L293a4e.  v10:= 1I;
  #L293a50.  v0:= v6.`io.reactivex.processors.UnicastProcessor.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L293a54.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L293a5a.  v11:= temp @kind wide;
  #L293a5c.  v4:= 0L;
  #L293a60.  v0:= lcmp(v11, v4);
  #L293a64.  if v0 == 0 then goto L293abe;
  #L293a68.  v2:= v6.`io.reactivex.processors.UnicastProcessor.f` @type ^`boolean` @kind boolean;
  #L293a6c.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L293a72.  v15:= temp @kind object;
  #L293a74.  if v15 != 0 then goto L293a7e;
  #L293a78.  v16:= 1I;
  #L293a7c.  goto L293a84;
  #L293a7e.  v0:= 0I;
  #L293a80.  v16:= 0I;
  #L293a84.  v0:= v17 @kind object;
  #L293a88.  v1:= v9;
  #L293a8a.  v3:= v16;
  #L293a8e.  v13:= v4 @kind wide;
  #L293a90.  v4:= v18 @kind object;
  #L293a94.  v5:= v7 @kind object;
  #L293a96.  call temp:= `J`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/processors/UnicastProcessor;.J:(ZZZLn/b/c;Lio/reactivex/internal/queue/a;)Z` @kind virtual;
  #L293a9c.  v0:= temp;
  #L293a9e.  if v0 == 0 then goto L293aa4;
  #L293aa2.  return @kind void;
  #L293aa4.  if v16 == 0 then goto L293aaa;
  #L293aa8.  goto L293ac0;
  #L293aaa.  v5:= v18 @kind object;
  #L293aae.  call `onNext`(v5, v15) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L293ab4.  v0:= 1L;
  #L293ab8.  v0:= v0 + v13 @kind long;
  #L293aba.  v4:= v0 @kind wide;
  #L293abc.  goto L293a60;
  #L293abe.  v13:= v4 @kind wide;
  #L293ac0.  v5:= v18 @kind object;
  #L293ac4.  v0:= lcmp(v11, v13);
  #L293ac8.  if v0 != 0 then goto L293af2;
  #L293acc.  v2:= v6.`io.reactivex.processors.UnicastProcessor.f` @type ^`boolean` @kind boolean;
  #L293ad0.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L293ad6.  v3:= temp;
  #L293ad8.  v0:= v17 @kind object;
  #L293adc.  v1:= v9;
  #L293ade.  v4:= v18 @kind object;
  #L293ae2.  v5:= v7 @kind object;
  #L293ae4.  call temp:= `J`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/processors/UnicastProcessor;.J:(ZZZLn/b/c;Lio/reactivex/internal/queue/a;)Z` @kind virtual;
  #L293aea.  v0:= temp;
  #L293aec.  if v0 == 0 then goto L293af2;
  #L293af0.  return @kind void;
  #L293af2.  v0:= 0L;
  #L293af6.  v2:= lcmp(v13, v0);
  #L293afa.  if v2 == 0 then goto L293b1c;
  #L293afe.  v0:= 9223372036854775807L;
  #L293b08.  v2:= lcmp(v11, v0);
  #L293b0c.  if v2 == 0 then goto L293b1c;
  #L293b10.  v0:= v6.`io.reactivex.processors.UnicastProcessor.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L293b14.  v1:= -v13 @kind long;
  #L293b16.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L293b1c.  v0:= v6.`io.reactivex.processors.UnicastProcessor.k` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L293b20.  v1:= -v10 @kind int;
  #L293b22.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L293b28.  v10:= temp;
  #L293b2a.  if v10 != 0 then goto L293a50;
  #L293b2e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L293b40.  v0:= v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`boolean` @kind boolean;
  #L293b44.  if v0 != 0 then goto L293b64;
  #L293b48.  v0:= v1.`io.reactivex.processors.UnicastProcessor.i` @type ^`boolean` @kind boolean;
  #L293b4c.  if v0 == 0 then goto L293b52;
  #L293b50.  goto L293b64;
  #L293b52.  v0:= 1I;
  #L293b54.  v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`boolean` := v0 @kind boolean;
  #L293b58.  call `M`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.M:()V` @kind virtual;
  #L293b5e.  call `N`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.N:()V` @kind virtual;
  #L293b64.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L293b78.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L293b7c.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L293b82.  v0:= v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`boolean` @kind boolean;
  #L293b86.  if v0 != 0 then goto L293bac;
  #L293b8a.  v0:= v1.`io.reactivex.processors.UnicastProcessor.i` @type ^`boolean` @kind boolean;
  #L293b8e.  if v0 == 0 then goto L293b94;
  #L293b92.  goto L293bac;
  #L293b94.  v1.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.lang.Throwable` := v2 @kind object;
  #L293b98.  v2:= 1I;
  #L293b9a.  v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`boolean` := v2 @kind boolean;
  #L293b9e.  call `M`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.M:()V` @kind virtual;
  #L293ba4.  call `N`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.N:()V` @kind virtual;
  #L293baa.  return @kind void;
  #L293bac.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L293bb2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L293bc4.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L293bc8.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L293bce.  v0:= v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`boolean` @kind boolean;
  #L293bd2.  if v0 != 0 then goto L293bf0;
  #L293bd6.  v0:= v1.`io.reactivex.processors.UnicastProcessor.i` @type ^`boolean` @kind boolean;
  #L293bda.  if v0 == 0 then goto L293be0;
  #L293bde.  goto L293bf0;
  #L293be0.  v0:= v1.`io.reactivex.processors.UnicastProcessor.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L293be4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L293bea.  call `N`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.N:()V` @kind virtual;
  #L293bf0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L293c04.  v0:= v2.`io.reactivex.processors.UnicastProcessor.f` @type ^`boolean` @kind boolean;
  #L293c08.  if v0 != 0 then goto L293c28;
  #L293c0c.  v0:= v2.`io.reactivex.processors.UnicastProcessor.i` @type ^`boolean` @kind boolean;
  #L293c10.  if v0 == 0 then goto L293c16;
  #L293c14.  goto L293c28;
  #L293c16.  v0:= 9223372036854775807L;
  #L293c20.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L293c26.  goto L293c2e;
  #L293c28.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L293c2e.  return @kind void;
}
