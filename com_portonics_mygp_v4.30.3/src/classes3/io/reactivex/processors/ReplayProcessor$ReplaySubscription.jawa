record `io.reactivex.processors.ReplayProcessor$ReplaySubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `n.b.d` @kind interface {
  `boolean` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.emitted` @AccessFlag ;
  `java.lang.Object` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.index` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.requested` @AccessFlag FINAL;
  `io.reactivex.processors.ReplayProcessor` `io.reactivex.processors.ReplayProcessor$ReplaySubscription.state` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.processors.ReplayProcessor$ReplaySubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor$ReplaySubscription` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.processors.ReplayProcessor` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.<init>:(Ln/b/c;Lio/reactivex/processors/ReplayProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L293578.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L29357e.  v0.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.downstream` @type ^`n.b.c` := v1 @kind object;
  #L293582.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L293586.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L29358c.  v0.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L293590.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.ReplayProcessor$ReplaySubscription` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2935a4.  v0:= v1.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2935a8.  if v0 == 0 then goto L2935ae;
  #L2935ac.  return @kind void;
  #L2935ae.  v0:= 1I;
  #L2935b0.  v1.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2935b4.  v0:= 0I;
  #L2935b6.  throw v0;
}
procedure `void` `request`(`io.reactivex.processors.ReplayProcessor$ReplaySubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/ReplayProcessor$ReplaySubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2935c8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L2935ce.  v0:= temp;
  #L2935d0.  if v0 != 0 then goto L2935d6;
  #L2935d4.  return @kind void;
  #L2935d6.  v0:= v1.`io.reactivex.processors.ReplayProcessor$ReplaySubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2935da.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L2935e0.  v2:= 0I;
  #L2935e2.  throw v2;
}
