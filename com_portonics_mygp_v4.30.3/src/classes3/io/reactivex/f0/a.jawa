record `io.reactivex.f0.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.n` @kind class {
}
procedure `void` `<init>`(`io.reactivex.f0.a` v0 @kind this) @signature `Lio/reactivex/f0/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L291824.  call `<init>`(v0) @signature `Lio/reactivex/n;.<init>:()V` @kind direct;
  #L29182a.  return @kind void;
}
procedure `void` `w`(`io.reactivex.d0.g` v0 @kind object) @signature `Lio/reactivex/f0/a;.w:(Lio/reactivex/d0/g;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.n` `x`(`io.reactivex.f0.a` v1 @kind this) @signature `Lio/reactivex/f0/a;.x:()Lio/reactivex/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L291800.  v0:= new `io.reactivex.internal.operators.observable.ObservableRefCount`;
  #L291804.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/f0/a;)V` @kind direct;
  #L29180a.  call temp:= `n`(v0) @signature `Lio/reactivex/g0/a;.n:(Lio/reactivex/n;)Lio/reactivex/n;` @kind static;
  #L291810.  v0:= temp @kind object;
  #L291812.  return v0 @kind object;
}
