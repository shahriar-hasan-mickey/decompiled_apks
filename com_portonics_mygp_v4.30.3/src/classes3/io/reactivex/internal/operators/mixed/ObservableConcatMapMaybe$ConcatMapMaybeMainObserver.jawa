record `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.inner` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @AccessFlag ;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.queue` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @AccessFlag VOLATILE;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.STATE_ACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.STATE_INACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.STATE_RESULT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26af48.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26af4e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L26af52.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26af56.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L26af5a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L26af5e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L26af64.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L26af68.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver`;
  #L26af6c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;)V` @kind direct;
  #L26af72.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver` := v1 @kind object;
  #L26af76.  v1:= new `io.reactivex.internal.queue.a`;
  #L26af7a.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L26af80.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.queue` @type ^`io.reactivex.e0.a.i` := v1 @kind object;
  #L26af84.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26af98.  v0:= 1I;
  #L26af9a.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L26af9e.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26afa2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26afa8.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver` @kind object;
  #L26afac.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver;.dispose:()V` @kind virtual;
  #L26afb2.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26afb8.  v0:= temp;
  #L26afba.  if v0 != 0 then goto L26afce;
  #L26afbe.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L26afc2.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26afc8.  v0:= 0I;
  #L26afca.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` := v0 @kind object;
  #L26afce.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v10 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L26afe0.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26afe6.  v0:= temp;
  #L26afe8.  if v0 == 0 then goto L26afee;
  #L26afec.  return @kind void;
  #L26afee.  v0:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26aff2.  v1:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26aff6.  v2:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L26affa.  v3:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26affe.  v4:= 1I;
  #L26b000.  v5:= 1I;
  #L26b002.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L26b006.  v7:= 0I;
  #L26b008.  if v6 == 0 then goto L26b01a;
  #L26b00c.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26b012.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L26b016.  goto L26b110;
  #L26b01a.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int`;
  #L26b01e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26b024.  v8:= temp @kind object;
  #L26b026.  if v8 == 0 then goto L26b058;
  #L26b02a.  v8:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b02e.  if v1 == v8 then goto L26b03e;
  #L26b032.  v8:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b036.  if v1 != v8 then goto L26b058;
  #L26b03a.  if v6 != 0 then goto L26b058;
  #L26b03e.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26b044.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L26b048.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26b04e.  v1:= temp @kind object;
  #L26b050.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26b056.  return @kind void;
  #L26b058.  v8:= 0I;
  #L26b05a.  if v6 != 0 then goto L26b0f4;
  #L26b05e.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.done` @type ^`boolean` @kind boolean;
  #L26b062.  call temp:= `poll`(v2) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L26b068.  v7:= temp @kind object;
  #L26b06a.  if v7 != 0 then goto L26b070;
  #L26b06e.  v8:= 1I;
  #L26b070.  if v6 == 0 then goto L26b094;
  #L26b074.  if v8 == 0 then goto L26b094;
  #L26b078.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26b07e.  v1:= temp @kind object;
  #L26b080.  if v1 != 0 then goto L26b08c;
  #L26b084.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26b08a.  goto L26b092;
  #L26b08c.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26b092.  return @kind void;
  #L26b094.  if v8 == 0 then goto L26b09a;
  #L26b098.  goto L26b110;
  #L26b09a.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L26b09e.  call temp:= `apply`(v6, v7) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26b0a4.  v6:= temp @kind object;
  #L26b0a6.  v7:= "The mapper returned a null MaybeSource" @kind object;
  #L26b0aa.  call temp:= `e`(v6, v7) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26b0b0.  v6:= temp @kind object;
  #L26b0b2.  v6:= (`io.reactivex.k`) v6 @kind object;
  #L26b0b6.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int` := v4;
  #L26b0ba.  v7:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver` @kind object;
  #L26b0be.  call `b`(v6, v7) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L26b0c4.  goto L26b110;
  #L26b0c6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26b0c8.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26b0ce.  v4:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26b0d2.  call `dispose`(v4) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26b0d8.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26b0de.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26b0e4.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26b0ea.  v1:= temp @kind object;
  #L26b0ec.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26b0f2.  return @kind void;
  #L26b0f4.  v9:= 2I;
  #L26b0f6.  if v6 != v9 then goto L26b110;
  #L26b0fa.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` @kind object;
  #L26b0fe.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L26b102.  call `onNext`(v0, v6) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26b108.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int` := v8;
  #L26b10c.  goto L26b002;
  #L26b110.  v5:= -v5 @kind int;
  #L26b112.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L26b118.  v5:= temp;
  #L26b11a.  if v5 != 0 then goto L26b002;
  #L26b11e.  return @kind void;
  catch `java.lang.Throwable` @[L26b09a..L26b0b6] goto L26b0c6;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L26b13c.  v0:= 0I;
  #L26b13e.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int` := v0;
  #L26b142.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L26b148.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L26b15c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b160.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26b166.  v0:= temp;
  #L26b168.  if v0 == 0 then goto L26b190;
  #L26b16c.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b170.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b174.  if v2 == v0 then goto L26b182;
  #L26b178.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26b17c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26b182.  v2:= 0I;
  #L26b184.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int` := v2;
  #L26b188.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L26b18e.  goto L26b196;
  #L26b190.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26b196.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.innerSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L26b1a8.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.item` @type ^`java.lang.Object` := v1 @kind object;
  #L26b1ac.  v1:= 2I;
  #L26b1ae.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.state` @type ^`int` := v1;
  #L26b1b2.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L26b1b8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26af30.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L26af34.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b1cc.  v0:= 1I;
  #L26b1ce.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L26b1d2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L26b1d8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b1ec.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b1f0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26b1f6.  v0:= temp;
  #L26b1f8.  if v0 == 0 then goto L26b220;
  #L26b1fc.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b200.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b204.  if v2 != v0 then goto L26b212;
  #L26b208.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver` @kind object;
  #L26b20c.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver;.dispose:()V` @kind virtual;
  #L26b212.  v2:= 1I;
  #L26b214.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L26b218.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L26b21e.  goto L26b226;
  #L26b220.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26b226.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b238.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L26b23c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L26b242.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L26b248.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b25c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26b260.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26b266.  v0:= temp;
  #L26b268.  if v0 == 0 then goto L26b27a;
  #L26b26c.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L26b270.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26b274.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26b27a.  return @kind void;
}
