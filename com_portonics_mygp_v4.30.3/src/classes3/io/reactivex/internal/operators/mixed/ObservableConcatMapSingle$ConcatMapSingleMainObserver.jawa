record `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.inner` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @AccessFlag ;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.queue` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @AccessFlag VOLATILE;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.STATE_ACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.STATE_INACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.STATE_RESULT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26b398.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26b39e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L26b3a2.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26b3a6.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L26b3aa.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L26b3ae.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L26b3b4.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L26b3b8.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver`;
  #L26b3bc.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;)V` @kind direct;
  #L26b3c2.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver` := v1 @kind object;
  #L26b3c6.  v1:= new `io.reactivex.internal.queue.a`;
  #L26b3ca.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L26b3d0.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.queue` @type ^`io.reactivex.e0.a.i` := v1 @kind object;
  #L26b3d4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b3e8.  v0:= 1I;
  #L26b3ea.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L26b3ee.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26b3f2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26b3f8.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver` @kind object;
  #L26b3fc.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver;.dispose:()V` @kind virtual;
  #L26b402.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26b408.  v0:= temp;
  #L26b40a.  if v0 != 0 then goto L26b41e;
  #L26b40e.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L26b412.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26b418.  v0:= 0I;
  #L26b41a.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` := v0 @kind object;
  #L26b41e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v10 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L26b430.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26b436.  v0:= temp;
  #L26b438.  if v0 == 0 then goto L26b43e;
  #L26b43c.  return @kind void;
  #L26b43e.  v0:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26b442.  v1:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b446.  v2:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L26b44a.  v3:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b44e.  v4:= 1I;
  #L26b450.  v5:= 1I;
  #L26b452.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L26b456.  v7:= 0I;
  #L26b458.  if v6 == 0 then goto L26b46a;
  #L26b45c.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26b462.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L26b466.  goto L26b560;
  #L26b46a.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @type ^`int`;
  #L26b46e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26b474.  v8:= temp @kind object;
  #L26b476.  if v8 == 0 then goto L26b4a8;
  #L26b47a.  v8:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b47e.  if v1 == v8 then goto L26b48e;
  #L26b482.  v8:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b486.  if v1 != v8 then goto L26b4a8;
  #L26b48a.  if v6 != 0 then goto L26b4a8;
  #L26b48e.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26b494.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L26b498.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26b49e.  v1:= temp @kind object;
  #L26b4a0.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26b4a6.  return @kind void;
  #L26b4a8.  v8:= 0I;
  #L26b4aa.  if v6 != 0 then goto L26b544;
  #L26b4ae.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.done` @type ^`boolean` @kind boolean;
  #L26b4b2.  call temp:= `poll`(v2) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L26b4b8.  v7:= temp @kind object;
  #L26b4ba.  if v7 != 0 then goto L26b4c0;
  #L26b4be.  v8:= 1I;
  #L26b4c0.  if v6 == 0 then goto L26b4e4;
  #L26b4c4.  if v8 == 0 then goto L26b4e4;
  #L26b4c8.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26b4ce.  v1:= temp @kind object;
  #L26b4d0.  if v1 != 0 then goto L26b4dc;
  #L26b4d4.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26b4da.  goto L26b4e2;
  #L26b4dc.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26b4e2.  return @kind void;
  #L26b4e4.  if v8 == 0 then goto L26b4ea;
  #L26b4e8.  goto L26b560;
  #L26b4ea.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L26b4ee.  call temp:= `apply`(v6, v7) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26b4f4.  v6:= temp @kind object;
  #L26b4f6.  v7:= "The mapper returned a null SingleSource" @kind object;
  #L26b4fa.  call temp:= `e`(v6, v7) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26b500.  v6:= temp @kind object;
  #L26b502.  v6:= (`io.reactivex.a0`) v6 @kind object;
  #L26b506.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @type ^`int` := v4;
  #L26b50a.  v7:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver` @kind object;
  #L26b50e.  call `b`(v6, v7) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L26b514.  goto L26b560;
  #L26b516.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26b518.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26b51e.  v4:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26b522.  call `dispose`(v4) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26b528.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26b52e.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26b534.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26b53a.  v1:= temp @kind object;
  #L26b53c.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26b542.  return @kind void;
  #L26b544.  v9:= 2I;
  #L26b546.  if v6 != v9 then goto L26b560;
  #L26b54a.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` @kind object;
  #L26b54e.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` := v7 @kind object;
  #L26b552.  call `onNext`(v0, v6) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26b558.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @type ^`int` := v8;
  #L26b55c.  goto L26b452;
  #L26b560.  v5:= -v5 @kind int;
  #L26b562.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L26b568.  v5:= temp;
  #L26b56a.  if v5 != 0 then goto L26b452;
  #L26b56e.  return @kind void;
  catch `java.lang.Throwable` @[L26b4ea..L26b506] goto L26b516;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L26b58c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b590.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26b596.  v0:= temp;
  #L26b598.  if v0 == 0 then goto L26b5c0;
  #L26b59c.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b5a0.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b5a4.  if v2 == v0 then goto L26b5b2;
  #L26b5a8.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26b5ac.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26b5b2.  v2:= 0I;
  #L26b5b4.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @type ^`int` := v2;
  #L26b5b8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @kind virtual;
  #L26b5be.  goto L26b5c6;
  #L26b5c0.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26b5c6.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.innerSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L26b5d8.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.item` @type ^`java.lang.Object` := v1 @kind object;
  #L26b5dc.  v1:= 2I;
  #L26b5de.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.state` @type ^`int` := v1;
  #L26b5e2.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @kind virtual;
  #L26b5e8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b380.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L26b384.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b5fc.  v0:= 1I;
  #L26b5fe.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L26b602.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @kind virtual;
  #L26b608.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b61c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b620.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26b626.  v0:= temp;
  #L26b628.  if v0 == 0 then goto L26b650;
  #L26b62c.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b630.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b634.  if v2 != v0 then goto L26b642;
  #L26b638.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver` @kind object;
  #L26b63c.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver;.dispose:()V` @kind virtual;
  #L26b642.  v2:= 1I;
  #L26b644.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L26b648.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @kind virtual;
  #L26b64e.  goto L26b656;
  #L26b650.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26b656.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b668.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L26b66c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L26b672.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.drain:()V` @kind virtual;
  #L26b678.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b68c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26b690.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26b696.  v0:= temp;
  #L26b698.  if v0 == 0 then goto L26b6aa;
  #L26b69c.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L26b6a0.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26b6a4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26b6aa.  return @kind void;
}
