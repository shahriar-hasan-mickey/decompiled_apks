record `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.active` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.b` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.inner` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @AccessFlag FINAL;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @AccessFlag ;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v0 @kind this, `io.reactivex.b` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.<init>:(Lio/reactivex/b;Lio/reactivex/d0/k;Lio/reactivex/internal/util/ErrorMode;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26aa44.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26aa4a.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L26aa4e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26aa52.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L26aa56.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @type ^`int` := v4;
  #L26aa5a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L26aa5e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L26aa64.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L26aa68.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver`;
  #L26aa6c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;)V` @kind direct;
  #L26aa72.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` := v1 @kind object;
  #L26aa76.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26aa88.  v0:= 1I;
  #L26aa8a.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L26aa8e.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26aa92.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26aa98.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L26aa9c.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.dispose:()V` @kind virtual;
  #L26aaa2.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26aaa8.  v0:= temp;
  #L26aaaa.  if v0 != 0 then goto L26aab8;
  #L26aaae.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L26aab2.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26aab8.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v6 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L26aacc.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26aad2.  v0:= temp;
  #L26aad4.  if v0 == 0 then goto L26aada;
  #L26aad8.  return @kind void;
  #L26aada.  v0:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26aade.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26aae2.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` @kind boolean;
  #L26aae6.  if v2 == 0 then goto L26aaf6;
  #L26aaea.  v0:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L26aaee.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26aaf4.  return @kind void;
  #L26aaf6.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` @kind boolean;
  #L26aafa.  if v2 != 0 then goto L26abec;
  #L26aafe.  v2:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26ab02.  v3:= 1I;
  #L26ab04.  if v1 != v2 then goto L26ab36;
  #L26ab08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26ab0e.  v2:= temp @kind object;
  #L26ab10.  if v2 == 0 then goto L26ab36;
  #L26ab14.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v3 @kind boolean;
  #L26ab18.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L26ab1c.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26ab22.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26ab28.  v0:= temp @kind object;
  #L26ab2a.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L26ab2e.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26ab34.  return @kind void;
  #L26ab36.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` @kind boolean;
  #L26ab3a.  v4:= 0I;
  #L26ab3c.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L26ab40.  call temp:= `poll`(v5) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L26ab46.  v5:= temp @kind object;
  #L26ab48.  if v5 == 0 then goto L26ab6c;
  #L26ab4c.  v4:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L26ab50.  call temp:= `apply`(v4, v5) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26ab56.  v4:= temp @kind object;
  #L26ab58.  v5:= "The mapper returned a null CompletableSource" @kind object;
  #L26ab5c.  call temp:= `e`(v4, v5) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26ab62.  v4:= temp @kind object;
  #L26ab64.  v4:= (`io.reactivex.c`) v4 @kind object;
  #L26ab68.  v5:= 0I;
  #L26ab6a.  goto L26ab6e;
  #L26ab6c.  v5:= 1I;
  #L26ab6e.  if v2 == 0 then goto L26ab9e;
  #L26ab72.  if v5 == 0 then goto L26ab9e;
  #L26ab76.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v3 @kind boolean;
  #L26ab7a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26ab80.  v0:= temp @kind object;
  #L26ab82.  if v0 == 0 then goto L26ab92;
  #L26ab86.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L26ab8a.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26ab90.  goto L26ab9c;
  #L26ab92.  v0:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L26ab96.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L26ab9c.  return @kind void;
  #L26ab9e.  if v5 != 0 then goto L26abec;
  #L26aba2.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v3 @kind boolean;
  #L26aba6.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L26abaa.  call `b`(v4, v2) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L26abb0.  goto L26abec;
  #L26abb2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26abb4.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26abba.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v3 @kind boolean;
  #L26abbe.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L26abc2.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26abc8.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26abcc.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26abd2.  call temp:= `addThrowable`(v0, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26abd8.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26abde.  v0:= temp @kind object;
  #L26abe0.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L26abe4.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26abea.  return @kind void;
  #L26abec.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L26abf2.  v2:= temp;
  #L26abf4.  if v2 != 0 then goto L26aae2;
  #L26abf8.  return @kind void;
  catch `java.lang.Throwable` @[L26ab3c..L26ab68] goto L26abb2;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L26ac18.  v0:= 0I;
  #L26ac1a.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L26ac1e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L26ac24.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L26ac38.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26ac3c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26ac42.  v0:= temp;
  #L26ac44.  if v0 == 0 then goto L26aca8;
  #L26ac48.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26ac4c.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26ac50.  if v2 != v0 then goto L26ac9a;
  #L26ac54.  v2:= 1I;
  #L26ac56.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v2 @kind boolean;
  #L26ac5a.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26ac5e.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26ac64.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26ac68.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26ac6e.  v2:= temp @kind object;
  #L26ac70.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L26ac74.  if v2 == v0 then goto L26ac82;
  #L26ac78.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L26ac7c.  call `onError`(v0, v2) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26ac82.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26ac88.  v2:= temp;
  #L26ac8a.  if v2 != 0 then goto L26acae;
  #L26ac8e.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L26ac92.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26ac98.  goto L26acae;
  #L26ac9a.  v2:= 0I;
  #L26ac9c.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v2 @kind boolean;
  #L26aca0.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L26aca6.  goto L26acae;
  #L26aca8.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26acae.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26aa2c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` @kind boolean;
  #L26aa30.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26acc0.  v0:= 1I;
  #L26acc2.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L26acc6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L26accc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26ace0.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26ace4.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26acea.  v0:= temp;
  #L26acec.  if v0 == 0 then goto L26ad4e;
  #L26acf0.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26acf4.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26acf8.  v1:= 1I;
  #L26acfa.  if v3 != v0 then goto L26ad42;
  #L26acfe.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v1 @kind boolean;
  #L26ad02.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L26ad06.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.dispose:()V` @kind virtual;
  #L26ad0c.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26ad10.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26ad16.  v3:= temp @kind object;
  #L26ad18.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L26ad1c.  if v3 == v0 then goto L26ad2a;
  #L26ad20.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L26ad24.  call `onError`(v0, v3) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26ad2a.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26ad30.  v3:= temp;
  #L26ad32.  if v3 != 0 then goto L26ad54;
  #L26ad36.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L26ad3a.  call `clear`(v3) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26ad40.  goto L26ad54;
  #L26ad42.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L26ad46.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L26ad4c.  goto L26ad54;
  #L26ad4e.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26ad54.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26ad68.  if v2 == 0 then goto L26ad76;
  #L26ad6c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L26ad70.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L26ad76.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L26ad7c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26ad90.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26ad94.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26ad9a.  v0:= temp;
  #L26ad9c.  if v0 == 0 then goto L26ae0c;
  #L26ada0.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`io.reactivex.disposables.b` := v3 @kind object;
  #L26ada4.  v0:= instanceof @variable v3 @type ^`io.reactivex.e0.a.e` @kind boolean;
  #L26ada8.  if v0 == 0 then goto L26adf0;
  #L26adac.  v3:= (`io.reactivex.e0.a.e`) v3 @kind object;
  #L26adb0.  v0:= 3I;
  #L26adb2.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L26adb8.  v0:= temp;
  #L26adba.  v1:= 1I;
  #L26adbc.  if v0 != v1 then goto L26adda;
  #L26adc0.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L26adc4.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L26adc8.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L26adcc.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26add2.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L26add8.  return @kind void;
  #L26adda.  v1:= 2I;
  #L26addc.  if v0 != v1 then goto L26adf0;
  #L26ade0.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L26ade4.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L26ade8.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26adee.  return @kind void;
  #L26adf0.  v3:= new `io.reactivex.internal.queue.a`;
  #L26adf4.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @type ^`int`;
  #L26adf8.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L26adfe.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L26ae02.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L26ae06.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26ae0c.  return @kind void;
}
