record `io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.b` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver.other` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.r` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenObservable$AndThenObservableObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L268e84.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L268e8a.  v0.`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver.other` @type ^`io.reactivex.r` := v2 @kind object;
  #L268e8e.  v0.`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L268e92.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenObservable$AndThenObservableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L268ea4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L268eaa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenObservable$AndThenObservableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L268e5c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L268e62.  v0:= temp @kind object;
  #L268e64.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L268e68.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L268e6e.  v0:= temp;
  #L268e70.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenObservable$AndThenObservableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L268ebc.  v0:= v2.`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver.other` @type ^`io.reactivex.r` @kind object;
  #L268ec0.  if v0 != 0 then goto L268ed0;
  #L268ec4.  v0:= v2.`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L268ec8.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L268ece.  goto L268edc;
  #L268ed0.  v1:= 0I;
  #L268ed2.  v2.`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver.other` @type ^`io.reactivex.r` := v1 @kind object;
  #L268ed6.  call `subscribe`(v0, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L268edc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenObservable$AndThenObservableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L268ef0.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L268ef4.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L268efa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenObservable$AndThenObservableObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L268f0c.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L268f10.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L268f16.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenObservable$AndThenObservableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L268f28.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L268f2e.  return @kind void;
}
