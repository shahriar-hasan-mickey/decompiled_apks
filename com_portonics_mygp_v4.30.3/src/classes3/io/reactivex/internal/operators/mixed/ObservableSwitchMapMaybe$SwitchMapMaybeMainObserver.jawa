record `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.INNER_DISPOSED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L26bc10.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`;
  #L26bc14.  v1:= 0I;
  #L26bc16.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;)V` @kind direct;
  #L26bc1c.  `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` := v0 @kind object;
  #L26bc20.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26bc34.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26bc3a.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L26bc3e.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26bc42.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L26bc46.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L26bc4a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L26bc50.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L26bc54.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L26bc58.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26bc5e.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L26bc62.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26bc74.  v0:= 1I;
  #L26bc76.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L26bc7a.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26bc7e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26bc84.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.disposeInner:()V` @kind virtual;
  #L26bc8a.  return @kind void;
}
procedure `void` `disposeInner`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.disposeInner:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26bc9c.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26bca0.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` @kind object;
  #L26bca4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26bcaa.  v0:= temp @kind object;
  #L26bcac.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`) v0 @kind object;
  #L26bcb0.  if v0 == 0 then goto L26bcbe;
  #L26bcb4.  if v0 == v1 then goto L26bcbe;
  #L26bcb8.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;.dispose:()V` @kind virtual;
  #L26bcbe.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v8 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L26bcd0.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26bcd6.  v0:= temp;
  #L26bcd8.  if v0 == 0 then goto L26bcde;
  #L26bcdc.  return @kind void;
  #L26bcde.  v0:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26bce2.  v1:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26bce6.  v2:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26bcea.  v3:= 1I;
  #L26bcec.  v4:= 1I;
  #L26bcee.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L26bcf2.  if v5 == 0 then goto L26bcf8;
  #L26bcf6.  return @kind void;
  #L26bcf8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26bcfe.  v5:= temp @kind object;
  #L26bd00.  if v5 == 0 then goto L26bd1c;
  #L26bd04.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L26bd08.  if v5 != 0 then goto L26bd1c;
  #L26bd0c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26bd12.  v1:= temp @kind object;
  #L26bd14.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26bd1a.  return @kind void;
  #L26bd1c.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.done` @type ^`boolean` @kind boolean;
  #L26bd20.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26bd26.  v6:= temp @kind object;
  #L26bd28.  v6:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`) v6 @kind object;
  #L26bd2c.  if v6 != 0 then goto L26bd34;
  #L26bd30.  v7:= 1I;
  #L26bd32.  goto L26bd36;
  #L26bd34.  v7:= 0I;
  #L26bd36.  if v5 == 0 then goto L26bd5a;
  #L26bd3a.  if v7 == 0 then goto L26bd5a;
  #L26bd3e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26bd44.  v1:= temp @kind object;
  #L26bd46.  if v1 == 0 then goto L26bd52;
  #L26bd4a.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26bd50.  goto L26bd58;
  #L26bd52.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26bd58.  return @kind void;
  #L26bd5a.  if v7 != 0 then goto L26bd7c;
  #L26bd5e.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver.item` @type ^`java.lang.Object` @kind object;
  #L26bd62.  if v5 != 0 then goto L26bd68;
  #L26bd66.  goto L26bd7c;
  #L26bd68.  v5:= 0I;
  #L26bd6a.  call temp:= `compareAndSet`(v2, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26bd70.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver.item` @type ^`java.lang.Object` @kind object;
  #L26bd74.  call `onNext`(v0, v5) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26bd7a.  goto L26bcee;
  #L26bd7c.  v4:= -v4 @kind int;
  #L26bd7e.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L26bd84.  v4:= temp;
  #L26bd86.  if v4 != 0 then goto L26bcee;
  #L26bd8a.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.innerComplete:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26bd9c.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26bda0.  v1:= 0I;
  #L26bda2.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26bda8.  v3:= temp;
  #L26bdaa.  if v3 == 0 then goto L26bdb4;
  #L26bdae.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L26bdb4.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.innerError:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26bdc8.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26bdcc.  v1:= 0I;
  #L26bdce.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26bdd4.  v3:= temp;
  #L26bdd6.  if v3 == 0 then goto L26be0a;
  #L26bdda.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26bdde.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26bde4.  v3:= temp;
  #L26bde6.  if v3 == 0 then goto L26be0a;
  #L26bdea.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L26bdee.  if v3 != 0 then goto L26be02;
  #L26bdf2.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26bdf6.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26bdfc.  call `disposeInner`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.disposeInner:()V` @kind virtual;
  #L26be02.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L26be08.  return @kind void;
  #L26be0a.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26be10.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26bbf8.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L26bbfc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26be24.  v0:= 1I;
  #L26be26.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L26be2a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L26be30.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26be44.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26be48.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26be4e.  v0:= temp;
  #L26be50.  if v0 == 0 then goto L26be70;
  #L26be54.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L26be58.  if v2 != 0 then goto L26be62;
  #L26be5c.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.disposeInner:()V` @kind virtual;
  #L26be62.  v2:= 1I;
  #L26be64.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L26be68.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.drain:()V` @kind virtual;
  #L26be6e.  goto L26be76;
  #L26be70.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26be76.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L26be88.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26be8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26be92.  v0:= temp @kind object;
  #L26be94.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`) v0 @kind object;
  #L26be98.  if v0 == 0 then goto L26bea2;
  #L26be9c.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;.dispose:()V` @kind virtual;
  #L26bea2.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L26bea6.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26beac.  v4:= temp @kind object;
  #L26beae.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L26beb2.  call temp:= `e`(v4, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26beb8.  v4:= temp @kind object;
  #L26beba.  v4:= (`io.reactivex.k`) v4 @kind object;
  #L26bebe.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`;
  #L26bec2.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;)V` @kind direct;
  #L26bec8.  v1:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26becc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26bed2.  v1:= temp @kind object;
  #L26bed4.  v1:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver`) v1 @kind object;
  #L26bed8.  v2:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` @kind object;
  #L26bedc.  if v1 != v2 then goto L26bee2;
  #L26bee0.  goto L26bef8;
  #L26bee2.  v2:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26bee6.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26beec.  v1:= temp;
  #L26beee.  if v1 == 0 then goto L26bec8;
  #L26bef2.  call `b`(v4, v0) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L26bef8.  return @kind void;
  #L26befa.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26befc.  call `b`(v4) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26bf02.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26bf06.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26bf0c.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26bf10.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver` @kind object;
  #L26bf14.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26bf1a.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L26bf20.  return @kind void;
  catch `java.lang.Throwable` @[L26bea2..L26bebe] goto L26befa;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26bf40.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26bf44.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26bf4a.  v0:= temp;
  #L26bf4c.  if v0 == 0 then goto L26bf5e;
  #L26bf50.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L26bf54.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26bf58.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26bf5e.  return @kind void;
}
