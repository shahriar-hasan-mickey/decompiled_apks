record `io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.z` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26c5c0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26c5c6.  v0.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L26c5ca.  v0.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26c5ce.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L26c5e0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26c5e6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c598.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26c59e.  v0:= temp @kind object;
  #L26c5a0.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L26c5a4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L26c5aa.  v0:= temp;
  #L26c5ac.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c5f8.  v0:= v1.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26c5fc.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26c602.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c614.  v0:= v1.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26c618.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26c61e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c630.  v0:= v1.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26c634.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26c63a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L26c64c.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26c652.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/SingleFlatMapObservable$FlatMapObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c664.  v0:= v1.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L26c668.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26c66e.  v2:= temp @kind object;
  #L26c670.  v0:= "The mapper returned a null Publisher" @kind object;
  #L26c674.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26c67a.  v2:= temp @kind object;
  #L26c67c.  v2:= (`io.reactivex.r`) v2 @kind object;
  #L26c680.  call `subscribe`(v2, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L26c686.  return @kind void;
  #L26c688.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26c68a.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26c690.  v0:= v1.`io.reactivex.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26c694.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26c69a.  return @kind void;
  catch `java.lang.Throwable` @[L26c664..L26c680] goto L26c688;
}
