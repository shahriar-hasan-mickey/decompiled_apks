record `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.active` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.b` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.inner` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @AccessFlag FINAL;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v0 @kind this, `io.reactivex.b` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.<init>:(Lio/reactivex/b;Lio/reactivex/d0/k;Lio/reactivex/internal/util/ErrorMode;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L269104.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26910a.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L26910e.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L269112.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L269116.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @type ^`int` := v4;
  #L26911a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L26911e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L269124.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L269128.  v1:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver`;
  #L26912c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;)V` @kind direct;
  #L269132.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` := v1 @kind object;
  #L269136.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L26913a.  call `<init>`(v1, v4) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L269140.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.i` := v1 @kind object;
  #L269144.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L269158.  v0:= 1I;
  #L26915a.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L26915e.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`n.b.d` @kind object;
  #L269162.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L269168.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L26916c.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.dispose:()V` @kind virtual;
  #L269172.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L269178.  v0:= temp;
  #L26917a.  if v0 != 0 then goto L269188;
  #L26917e.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L269182.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L269188.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v6 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L26919c.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2691a2.  v0:= temp;
  #L2691a4.  if v0 == 0 then goto L2691aa;
  #L2691a8.  return @kind void;
  #L2691aa.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` @kind boolean;
  #L2691ae.  if v0 == 0 then goto L2691be;
  #L2691b2.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L2691b6.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L2691bc.  return @kind void;
  #L2691be.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` @kind boolean;
  #L2691c2.  if v0 != 0 then goto L2692ea;
  #L2691c6.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L2691ca.  v1:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L2691ce.  if v0 != v1 then goto L269204;
  #L2691d2.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2691d6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2691dc.  v0:= temp @kind object;
  #L2691de.  if v0 == 0 then goto L269204;
  #L2691e2.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L2691e6.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L2691ec.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2691f0.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2691f6.  v0:= temp @kind object;
  #L2691f8.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L2691fc.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L269202.  return @kind void;
  #L269204.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` @kind boolean;
  #L269208.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L26920c.  call temp:= `poll`(v1) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L269212.  v1:= temp @kind object;
  #L269214.  v2:= 0I;
  #L269216.  v3:= 1I;
  #L269218.  if v1 != 0 then goto L269220;
  #L26921c.  v4:= 1I;
  #L26921e.  goto L269222;
  #L269220.  v4:= 0I;
  #L269222.  if v0 == 0 then goto L269252;
  #L269226.  if v4 == 0 then goto L269252;
  #L26922a.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26922e.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L269234.  v0:= temp @kind object;
  #L269236.  if v0 == 0 then goto L269246;
  #L26923a.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L26923e.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L269244.  goto L269250;
  #L269246.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L26924a.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L269250.  return @kind void;
  #L269252.  if v4 != 0 then goto L2692ea;
  #L269256.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @type ^`int`;
  #L26925a.  v4:= v0 ^> 1;
  #L26925e.  v0:= v0 - v4 @kind int;
  #L269260.  v4:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.consumed` @type ^`int`;
  #L269264.  v4:= v4 + v3 @kind int;
  #L269266.  if v4 != v0 then goto L26927c;
  #L26926a.  v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.consumed` @type ^`int` := v2;
  #L26926e.  v2:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`n.b.d` @kind object;
  #L269272.  v4:= (`long`) v0 @kind i2l;
  #L269274.  call `request`(v2, v4) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L26927a.  goto L269280;
  #L26927c.  v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.consumed` @type ^`int` := v4;
  #L269280.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L269284.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26928a.  v0:= temp @kind object;
  #L26928c.  v1:= "The mapper returned a null CompletableSource" @kind object;
  #L269290.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L269296.  v0:= temp @kind object;
  #L269298.  v0:= (`io.reactivex.c`) v0 @kind object;
  #L26929c.  v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v3 @kind boolean;
  #L2692a0.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L2692a4.  call `b`(v0, v1) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L2692aa.  goto L2692ea;
  #L2692ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2692ae.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2692b4.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L2692b8.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L2692be.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`n.b.d` @kind object;
  #L2692c2.  call `cancel`(v1) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2692c8.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2692cc.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2692d2.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2692d6.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2692dc.  v0:= temp @kind object;
  #L2692de.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L2692e2.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2692e8.  return @kind void;
  #L2692ea.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2692f0.  v0:= temp;
  #L2692f2.  if v0 != 0 then goto L2691aa;
  #L2692f6.  return @kind void;
  catch `java.lang.Throwable` @[L269280..L26929c] goto L2692ac;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L269314.  v0:= 0I;
  #L269316.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L26931a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L269320.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L269334.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L269338.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26933e.  v0:= temp;
  #L269340.  if v0 == 0 then goto L26939e;
  #L269344.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L269348.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26934c.  if v2 != v0 then goto L269390;
  #L269350.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`n.b.d` @kind object;
  #L269354.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L26935a.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26935e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L269364.  v2:= temp @kind object;
  #L269366.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L26936a.  if v2 == v0 then goto L269378;
  #L26936e.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L269372.  call `onError`(v0, v2) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L269378.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26937e.  v2:= temp;
  #L269380.  if v2 != 0 then goto L2693a4;
  #L269384.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L269388.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26938e.  goto L2693a4;
  #L269390.  v2:= 0I;
  #L269392.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.active` @type ^`boolean` := v2 @kind boolean;
  #L269396.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L26939c.  goto L2693a4;
  #L26939e.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2693a4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2690ec.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.disposed` @type ^`boolean` @kind boolean;
  #L2690f0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2693b8.  v0:= 1I;
  #L2693ba.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L2693be.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L2693c4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2693d8.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2693dc.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2693e2.  v0:= temp;
  #L2693e4.  if v0 == 0 then goto L269442;
  #L2693e8.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L2693ec.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L2693f0.  if v2 != v0 then goto L269434;
  #L2693f4.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver` @kind object;
  #L2693f8.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver;.dispose:()V` @kind virtual;
  #L2693fe.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L269402.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L269408.  v2:= temp @kind object;
  #L26940a.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L26940e.  if v2 == v0 then goto L26941c;
  #L269412.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L269416.  call `onError`(v0, v2) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26941c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L269422.  v2:= temp;
  #L269424.  if v2 != 0 then goto L269448;
  #L269428.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L26942c.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L269432.  goto L269448;
  #L269434.  v2:= 1I;
  #L269436.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L26943a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L269440.  goto L269448;
  #L269442.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L269448.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26945c.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L269460.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L269466.  v2:= temp;
  #L269468.  if v2 == 0 then goto L269474;
  #L26946c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.drain:()V` @kind virtual;
  #L269472.  goto L269492;
  #L269474.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`n.b.d` @kind object;
  #L269478.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L26947e.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L269482.  v0:= "Queue full?!" @kind object;
  #L269486.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L26948c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L269492.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$ConcatMapCompletableObserver;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2694a4.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`n.b.d` @kind object;
  #L2694a8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L2694ae.  v0:= temp;
  #L2694b0.  if v0 == 0 then goto L2694ce;
  #L2694b4.  v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.upstream` @type ^`n.b.d` := v3 @kind object;
  #L2694b8.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L2694bc.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2694c2.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver.prefetch` @type ^`int`;
  #L2694c6.  v0:= (`long`) v0 @kind i2l;
  #L2694c8.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2694ce.  return @kind void;
}
