record `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.n` @kind class {
  `io.reactivex.n` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.b` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe` v0 @kind this, `io.reactivex.n` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe;.<init>:(Lio/reactivex/n;Lio/reactivex/d0/k;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L26bf70.  call `<init>`(v0) @signature `Lio/reactivex/n;.<init>:()V` @kind direct;
  #L26bf76.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.b` @type ^`io.reactivex.n` := v1 @kind object;
  #L26bf7a.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.c` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26bf7e.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.d` @type ^`boolean` := v3 @kind boolean;
  #L26bf82.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe` v4 @kind this, `io.reactivex.t` v5 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L26bf94.  v0:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.b` @type ^`io.reactivex.n` @kind object;
  #L26bf98.  v1:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.c` @type ^`io.reactivex.d0.k` @kind object;
  #L26bf9c.  call temp:= `b`(v0, v1, v5) @signature `Lio/reactivex/internal/operators/mixed/a;.b:(Ljava/lang/Object;Lio/reactivex/d0/k;Lio/reactivex/t;)Z` @kind static;
  #L26bfa2.  v0:= temp;
  #L26bfa4.  if v0 != 0 then goto L26bfc4;
  #L26bfa8.  v0:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.b` @type ^`io.reactivex.n` @kind object;
  #L26bfac.  v1:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver`;
  #L26bfb0.  v2:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.c` @type ^`io.reactivex.d0.k` @kind object;
  #L26bfb4.  v3:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.d` @type ^`boolean` @kind boolean;
  #L26bfb8.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;Z)V` @kind direct;
  #L26bfbe.  call `subscribe`(v0, v1) @signature `Lio/reactivex/n;.subscribe:(Lio/reactivex/t;)V` @kind virtual;
  #L26bfc4.  return @kind void;
}
