record `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.n` @kind class {
  `io.reactivex.n` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.b` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe` v0 @kind this, `io.reactivex.n` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe;.<init>:(Lio/reactivex/n;Lio/reactivex/d0/k;Lio/reactivex/internal/util/ErrorMode;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L26b28c.  call `<init>`(v0) @signature `Lio/reactivex/n;.<init>:()V` @kind direct;
  #L26b292.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.b` @type ^`io.reactivex.n` := v1 @kind object;
  #L26b296.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.c` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26b29a.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.d` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L26b29e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.e` @type ^`int` := v4;
  #L26b2a2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe` v5 @kind this, `io.reactivex.t` v6 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26b2b4.  v0:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.b` @type ^`io.reactivex.n` @kind object;
  #L26b2b8.  v1:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.c` @type ^`io.reactivex.d0.k` @kind object;
  #L26b2bc.  call temp:= `b`(v0, v1, v6) @signature `Lio/reactivex/internal/operators/mixed/a;.b:(Ljava/lang/Object;Lio/reactivex/d0/k;Lio/reactivex/t;)Z` @kind static;
  #L26b2c2.  v0:= temp;
  #L26b2c4.  if v0 != 0 then goto L26b2e8;
  #L26b2c8.  v0:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.b` @type ^`io.reactivex.n` @kind object;
  #L26b2cc.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver`;
  #L26b2d0.  v2:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.c` @type ^`io.reactivex.d0.k` @kind object;
  #L26b2d4.  v3:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.e` @type ^`int`;
  #L26b2d8.  v4:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe.d` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b2dc.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$ConcatMapMaybeMainObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L26b2e2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/n;.subscribe:(Lio/reactivex/t;)V` @kind virtual;
  #L26b2e8.  return @kind void;
}
