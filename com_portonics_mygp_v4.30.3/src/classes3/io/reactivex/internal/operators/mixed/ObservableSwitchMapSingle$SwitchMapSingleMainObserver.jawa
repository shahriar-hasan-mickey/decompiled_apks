record `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.INNER_DISPOSED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L26c078.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`;
  #L26c07c.  v1:= 0I;
  #L26c07e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;)V` @kind direct;
  #L26c084.  `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` := v0 @kind object;
  #L26c088.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26c09c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26c0a2.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L26c0a6.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26c0aa.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L26c0ae.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L26c0b2.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L26c0b8.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L26c0bc.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L26c0c0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26c0c6.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L26c0ca.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c0dc.  v0:= 1I;
  #L26c0de.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L26c0e2.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26c0e6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26c0ec.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.disposeInner:()V` @kind virtual;
  #L26c0f2.  return @kind void;
}
procedure `void` `disposeInner`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.disposeInner:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26c104.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26c108.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` @kind object;
  #L26c10c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26c112.  v0:= temp @kind object;
  #L26c114.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`) v0 @kind object;
  #L26c118.  if v0 == 0 then goto L26c126;
  #L26c11c.  if v0 == v1 then goto L26c126;
  #L26c120.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver;.dispose:()V` @kind virtual;
  #L26c126.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v8 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L26c138.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26c13e.  v0:= temp;
  #L26c140.  if v0 == 0 then goto L26c146;
  #L26c144.  return @kind void;
  #L26c146.  v0:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26c14a.  v1:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26c14e.  v2:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26c152.  v3:= 1I;
  #L26c154.  v4:= 1I;
  #L26c156.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L26c15a.  if v5 == 0 then goto L26c160;
  #L26c15e.  return @kind void;
  #L26c160.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26c166.  v5:= temp @kind object;
  #L26c168.  if v5 == 0 then goto L26c184;
  #L26c16c.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L26c170.  if v5 != 0 then goto L26c184;
  #L26c174.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26c17a.  v1:= temp @kind object;
  #L26c17c.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26c182.  return @kind void;
  #L26c184.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.done` @type ^`boolean` @kind boolean;
  #L26c188.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26c18e.  v6:= temp @kind object;
  #L26c190.  v6:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`) v6 @kind object;
  #L26c194.  if v6 != 0 then goto L26c19c;
  #L26c198.  v7:= 1I;
  #L26c19a.  goto L26c19e;
  #L26c19c.  v7:= 0I;
  #L26c19e.  if v5 == 0 then goto L26c1c2;
  #L26c1a2.  if v7 == 0 then goto L26c1c2;
  #L26c1a6.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26c1ac.  v1:= temp @kind object;
  #L26c1ae.  if v1 == 0 then goto L26c1ba;
  #L26c1b2.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26c1b8.  goto L26c1c0;
  #L26c1ba.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26c1c0.  return @kind void;
  #L26c1c2.  if v7 != 0 then goto L26c1e4;
  #L26c1c6.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver.item` @type ^`java.lang.Object` @kind object;
  #L26c1ca.  if v5 != 0 then goto L26c1d0;
  #L26c1ce.  goto L26c1e4;
  #L26c1d0.  v5:= 0I;
  #L26c1d2.  call temp:= `compareAndSet`(v2, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26c1d8.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver.item` @type ^`java.lang.Object` @kind object;
  #L26c1dc.  call `onNext`(v0, v5) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26c1e2.  goto L26c156;
  #L26c1e4.  v4:= -v4 @kind int;
  #L26c1e6.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L26c1ec.  v4:= temp;
  #L26c1ee.  if v4 != 0 then goto L26c156;
  #L26c1f2.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.innerError:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26c204.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26c208.  v1:= 0I;
  #L26c20a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26c210.  v3:= temp;
  #L26c212.  if v3 == 0 then goto L26c246;
  #L26c216.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26c21a.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26c220.  v3:= temp;
  #L26c222.  if v3 == 0 then goto L26c246;
  #L26c226.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L26c22a.  if v3 != 0 then goto L26c23e;
  #L26c22e.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26c232.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26c238.  call `disposeInner`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.disposeInner:()V` @kind virtual;
  #L26c23e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.drain:()V` @kind virtual;
  #L26c244.  return @kind void;
  #L26c246.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26c24c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c060.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L26c064.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c260.  v0:= 1I;
  #L26c262.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L26c266.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.drain:()V` @kind virtual;
  #L26c26c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c280.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26c284.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26c28a.  v0:= temp;
  #L26c28c.  if v0 == 0 then goto L26c2ac;
  #L26c290.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L26c294.  if v2 != 0 then goto L26c29e;
  #L26c298.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.disposeInner:()V` @kind virtual;
  #L26c29e.  v2:= 1I;
  #L26c2a0.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L26c2a4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.drain:()V` @kind virtual;
  #L26c2aa.  goto L26c2b2;
  #L26c2ac.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26c2b2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L26c2c4.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26c2c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26c2ce.  v0:= temp @kind object;
  #L26c2d0.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`) v0 @kind object;
  #L26c2d4.  if v0 == 0 then goto L26c2de;
  #L26c2d8.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver;.dispose:()V` @kind virtual;
  #L26c2de.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L26c2e2.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26c2e8.  v4:= temp @kind object;
  #L26c2ea.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L26c2ee.  call temp:= `e`(v4, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26c2f4.  v4:= temp @kind object;
  #L26c2f6.  v4:= (`io.reactivex.a0`) v4 @kind object;
  #L26c2fa.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`;
  #L26c2fe.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;)V` @kind direct;
  #L26c304.  v1:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26c308.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26c30e.  v1:= temp @kind object;
  #L26c310.  v1:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver`) v1 @kind object;
  #L26c314.  v2:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` @kind object;
  #L26c318.  if v1 != v2 then goto L26c31e;
  #L26c31c.  goto L26c334;
  #L26c31e.  v2:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26c322.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26c328.  v1:= temp;
  #L26c32a.  if v1 == 0 then goto L26c304;
  #L26c32e.  call `b`(v4, v0) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L26c334.  return @kind void;
  #L26c336.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26c338.  call `b`(v4) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26c33e.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26c342.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26c348.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26c34c.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver` @kind object;
  #L26c350.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26c356.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L26c35c.  return @kind void;
  catch `java.lang.Throwable` @[L26c2de..L26c2fa] goto L26c336;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$SwitchMapSingleMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c37c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26c380.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26c386.  v0:= temp;
  #L26c388.  if v0 == 0 then goto L26c39a;
  #L26c38c.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L26c390.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26c394.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26c39a.  return @kind void;
}
