record `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.mapper` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.requested` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.INNER_DISPOSED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L26a338.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`;
  #L26a33c.  v1:= 0I;
  #L26a33e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;)V` @kind direct;
  #L26a344.  `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` := v0 @kind object;
  #L26a348.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26a35c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26a362.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L26a366.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26a36a.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L26a36e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L26a372.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L26a378.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L26a37c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L26a380.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L26a386.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L26a38a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L26a38e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26a394.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L26a398.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a3ac.  v0:= 1I;
  #L26a3ae.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L26a3b2.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26a3b6.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L26a3bc.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.disposeInner:()V` @kind virtual;
  #L26a3c2.  return @kind void;
}
procedure `void` `disposeInner`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.disposeInner:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26a3d4.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a3d8.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` @kind object;
  #L26a3dc.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26a3e2.  v0:= temp @kind object;
  #L26a3e4.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`) v0 @kind object;
  #L26a3e8.  if v0 == 0 then goto L26a3f6;
  #L26a3ec.  if v0 == v1 then goto L26a3f6;
  #L26a3f0.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver;.dispose:()V` @kind virtual;
  #L26a3f6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v12 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L26a408.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26a40e.  v0:= temp;
  #L26a410.  if v0 == 0 then goto L26a416;
  #L26a414.  return @kind void;
  #L26a416.  v0:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L26a41a.  v1:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26a41e.  v2:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a422.  v3:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L26a426.  v4:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.emitted` @type ^`long` @kind wide;
  #L26a42a.  v6:= 1I;
  #L26a42c.  v7:= 1I;
  #L26a42e.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L26a432.  if v8 == 0 then goto L26a438;
  #L26a436.  return @kind void;
  #L26a438.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26a43e.  v8:= temp @kind object;
  #L26a440.  if v8 == 0 then goto L26a45c;
  #L26a444.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L26a448.  if v8 != 0 then goto L26a45c;
  #L26a44c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26a452.  v1:= temp @kind object;
  #L26a454.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26a45a.  return @kind void;
  #L26a45c.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.done` @type ^`boolean` @kind boolean;
  #L26a460.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26a466.  v9:= temp @kind object;
  #L26a468.  v9:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`) v9 @kind object;
  #L26a46c.  if v9 != 0 then goto L26a474;
  #L26a470.  v10:= 1I;
  #L26a472.  goto L26a476;
  #L26a474.  v10:= 0I;
  #L26a476.  if v8 == 0 then goto L26a49a;
  #L26a47a.  if v10 == 0 then goto L26a49a;
  #L26a47e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26a484.  v1:= temp @kind object;
  #L26a486.  if v1 == 0 then goto L26a492;
  #L26a48a.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26a490.  goto L26a498;
  #L26a492.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L26a498.  return @kind void;
  #L26a49a.  if v10 != 0 then goto L26a4d2;
  #L26a49e.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver.item` @type ^`java.lang.Object` @kind object;
  #L26a4a2.  if v8 == 0 then goto L26a4d2;
  #L26a4a6.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L26a4ac.  v10:= temp @kind wide;
  #L26a4ae.  v8:= lcmp(v4, v10);
  #L26a4b2.  if v8 != 0 then goto L26a4b8;
  #L26a4b6.  goto L26a4d2;
  #L26a4b8.  v8:= 0I;
  #L26a4ba.  call temp:= `compareAndSet`(v2, v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26a4c0.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver.item` @type ^`java.lang.Object` @kind object;
  #L26a4c4.  call `onNext`(v0, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26a4ca.  v8:= 1L;
  #L26a4ce.  v4:= v4 + v8 @kind long;
  #L26a4d0.  goto L26a42e;
  #L26a4d2.  v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.emitted` @type ^`long` := v4 @kind wide;
  #L26a4d6.  v7:= -v7 @kind int;
  #L26a4d8.  call temp:= `addAndGet`(v12, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L26a4de.  v7:= temp;
  #L26a4e0.  if v7 != 0 then goto L26a42e;
  #L26a4e4.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v2 @kind this, `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.innerError:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26a4f8.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a4fc.  v1:= 0I;
  #L26a4fe.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26a504.  v3:= temp;
  #L26a506.  if v3 == 0 then goto L26a53a;
  #L26a50a.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26a50e.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26a514.  v3:= temp;
  #L26a516.  if v3 == 0 then goto L26a53a;
  #L26a51a.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L26a51e.  if v3 != 0 then goto L26a532;
  #L26a522.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26a526.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L26a52c.  call `disposeInner`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.disposeInner:()V` @kind virtual;
  #L26a532.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.drain:()V` @kind virtual;
  #L26a538.  return @kind void;
  #L26a53a.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26a540.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a554.  v0:= 1I;
  #L26a556.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L26a55a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.drain:()V` @kind virtual;
  #L26a560.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a574.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26a578.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26a57e.  v0:= temp;
  #L26a580.  if v0 == 0 then goto L26a5a0;
  #L26a584.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L26a588.  if v2 != 0 then goto L26a592;
  #L26a58c.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.disposeInner:()V` @kind virtual;
  #L26a592.  v2:= 1I;
  #L26a594.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L26a598.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.drain:()V` @kind virtual;
  #L26a59e.  goto L26a5a6;
  #L26a5a0.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26a5a6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L26a5b8.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a5bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26a5c2.  v0:= temp @kind object;
  #L26a5c4.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`) v0 @kind object;
  #L26a5c8.  if v0 == 0 then goto L26a5d2;
  #L26a5cc.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver;.dispose:()V` @kind virtual;
  #L26a5d2.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L26a5d6.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26a5dc.  v4:= temp @kind object;
  #L26a5de.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L26a5e2.  call temp:= `e`(v4, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26a5e8.  v4:= temp @kind object;
  #L26a5ea.  v4:= (`io.reactivex.a0`) v4 @kind object;
  #L26a5ee.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`;
  #L26a5f2.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;)V` @kind direct;
  #L26a5f8.  v1:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a5fc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26a602.  v1:= temp @kind object;
  #L26a604.  v1:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver`) v1 @kind object;
  #L26a608.  v2:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` @kind object;
  #L26a60c.  if v1 != v2 then goto L26a612;
  #L26a610.  goto L26a628;
  #L26a612.  v2:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a616.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26a61c.  v1:= temp;
  #L26a61e.  if v1 == 0 then goto L26a5f8;
  #L26a622.  call `b`(v4, v0) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L26a628.  return @kind void;
  #L26a62a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26a62c.  call `b`(v4) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26a632.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26a636.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L26a63c.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a640.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver` @kind object;
  #L26a644.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26a64a.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L26a650.  return @kind void;
  catch `java.lang.Throwable` @[L26a5d2..L26a5ee] goto L26a62a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26a670.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26a674.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L26a67a.  v0:= temp;
  #L26a67c.  if v0 == 0 then goto L26a69e;
  #L26a680.  v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L26a684.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L26a688.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L26a68e.  v0:= 9223372036854775807L;
  #L26a698.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L26a69e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a6b0.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L26a6b4.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L26a6ba.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$SwitchMapSingleSubscriber;.drain:()V` @kind virtual;
  #L26a6c0.  return @kind void;
}
