record `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.b` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.c` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.h` @AccessFlag VOLATILE;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.i` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L26b7dc.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver`;
  #L26b7e0.  v1:= 0I;
  #L26b7e2.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;)V` @kind direct;
  #L26b7e8.  `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.b` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` := v0 @kind object;
  #L26b7ec.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v0 @kind this, `io.reactivex.b` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.<init>:(Lio/reactivex/b;Lio/reactivex/d0/k;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26b800.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26b806.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.c` @type ^`io.reactivex.b` := v1 @kind object;
  #L26b80a.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.d` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26b80e.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.e` @type ^`boolean` := v3 @kind boolean;
  #L26b812.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L26b816.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L26b81c.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L26b820.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L26b824.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26b82a.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L26b82e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26b864.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26b868.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.b` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` @kind object;
  #L26b86c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26b872.  v0:= temp @kind object;
  #L26b874.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver`) v0 @kind object;
  #L26b878.  if v0 == 0 then goto L26b886;
  #L26b87c.  if v0 == v1 then goto L26b886;
  #L26b880.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;.dispose:()V` @kind virtual;
  #L26b886.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.b:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26b898.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26b89c.  v1:= 0I;
  #L26b89e.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26b8a4.  v3:= temp;
  #L26b8a6.  if v3 == 0 then goto L26b8d8;
  #L26b8aa.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.h` @type ^`boolean` @kind boolean;
  #L26b8ae.  if v3 == 0 then goto L26b8d8;
  #L26b8b2.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b8b6.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26b8bc.  v3:= temp @kind object;
  #L26b8be.  if v3 != 0 then goto L26b8ce;
  #L26b8c2.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.c` @type ^`io.reactivex.b` @kind object;
  #L26b8c6.  call `onComplete`(v3) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L26b8cc.  goto L26b8d8;
  #L26b8ce.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.c` @type ^`io.reactivex.b` @kind object;
  #L26b8d2.  call `onError`(v0, v3) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26b8d8.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.c:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26b8ec.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26b8f0.  v1:= 0I;
  #L26b8f2.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26b8f8.  v3:= temp;
  #L26b8fa.  if v3 == 0 then goto L26b95c;
  #L26b8fe.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b902.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26b908.  v3:= temp;
  #L26b90a.  if v3 == 0 then goto L26b95c;
  #L26b90e.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.e` @type ^`boolean` @kind boolean;
  #L26b912.  if v3 == 0 then goto L26b936;
  #L26b916.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.h` @type ^`boolean` @kind boolean;
  #L26b91a.  if v3 == 0 then goto L26b95a;
  #L26b91e.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b922.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26b928.  v3:= temp @kind object;
  #L26b92a.  v4:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.c` @type ^`io.reactivex.b` @kind object;
  #L26b92e.  call `onError`(v4, v3) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26b934.  goto L26b95a;
  #L26b936.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.dispose:()V` @kind virtual;
  #L26b93c.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b940.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26b946.  v3:= temp @kind object;
  #L26b948.  v4:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L26b94c.  if v3 == v4 then goto L26b95a;
  #L26b950.  v4:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.c` @type ^`io.reactivex.b` @kind object;
  #L26b954.  call `onError`(v4, v3) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26b95a.  return @kind void;
  #L26b95c.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26b962.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b840.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.i` @type ^`io.reactivex.disposables.b` @kind object;
  #L26b844.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26b84a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.a:()V` @kind virtual;
  #L26b850.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26b7b0.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26b7b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26b7ba.  v0:= temp @kind object;
  #L26b7bc.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.b` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` @kind object;
  #L26b7c0.  if v0 != v1 then goto L26b7c8;
  #L26b7c4.  v0:= 1I;
  #L26b7c6.  goto L26b7ca;
  #L26b7c8.  v0:= 0I;
  #L26b7ca.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26b974.  v0:= 1I;
  #L26b976.  v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.h` @type ^`boolean` := v0 @kind boolean;
  #L26b97a.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26b97e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26b984.  v0:= temp @kind object;
  #L26b986.  if v0 != 0 then goto L26b9b0;
  #L26b98a.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b98e.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26b994.  v0:= temp @kind object;
  #L26b996.  if v0 != 0 then goto L26b9a6;
  #L26b99a.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.c` @type ^`io.reactivex.b` @kind object;
  #L26b99e.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L26b9a4.  goto L26b9b0;
  #L26b9a6.  v1:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.c` @type ^`io.reactivex.b` @kind object;
  #L26b9aa.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26b9b0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26b9c4.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b9c8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26b9ce.  v0:= temp;
  #L26b9d0.  if v0 == 0 then goto L26ba0a;
  #L26b9d4.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.e` @type ^`boolean` @kind boolean;
  #L26b9d8.  if v2 == 0 then goto L26b9e4;
  #L26b9dc.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onComplete:()V` @kind virtual;
  #L26b9e2.  goto L26ba10;
  #L26b9e4.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.a:()V` @kind virtual;
  #L26b9ea.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26b9ee.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26b9f4.  v2:= temp @kind object;
  #L26b9f6.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L26b9fa.  if v2 == v0 then goto L26ba10;
  #L26b9fe.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.c` @type ^`io.reactivex.b` @kind object;
  #L26ba02.  call `onError`(v0, v2) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26ba08.  goto L26ba10;
  #L26ba0a.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26ba10.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L26ba24.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.d` @type ^`io.reactivex.d0.k` @kind object;
  #L26ba28.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26ba2e.  v4:= temp @kind object;
  #L26ba30.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L26ba34.  call temp:= `e`(v4, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26ba3a.  v4:= temp @kind object;
  #L26ba3c.  v4:= (`io.reactivex.c`) v4 @kind object;
  #L26ba40.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver`;
  #L26ba44.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;)V` @kind direct;
  #L26ba4a.  v1:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26ba4e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26ba54.  v1:= temp @kind object;
  #L26ba56.  v1:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver`) v1 @kind object;
  #L26ba5a.  v2:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.b` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver` @kind object;
  #L26ba5e.  if v1 != v2 then goto L26ba64;
  #L26ba62.  goto L26ba84;
  #L26ba64.  v2:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26ba68.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26ba6e.  v2:= temp;
  #L26ba70.  if v2 == 0 then goto L26ba4a;
  #L26ba74.  if v1 == 0 then goto L26ba7e;
  #L26ba78.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver;.dispose:()V` @kind virtual;
  #L26ba7e.  call `b`(v4, v0) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L26ba84.  return @kind void;
  #L26ba86.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26ba88.  call `b`(v4) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26ba8e.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.i` @type ^`io.reactivex.disposables.b` @kind object;
  #L26ba92.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26ba98.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L26ba9e.  return @kind void;
  catch `java.lang.Throwable` @[L26ba24..L26ba40] goto L26ba86;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$SwitchMapCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26babc.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.i` @type ^`io.reactivex.disposables.b` @kind object;
  #L26bac0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26bac6.  v0:= temp;
  #L26bac8.  if v0 == 0 then goto L26bada;
  #L26bacc.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.i` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L26bad0.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver.c` @type ^`io.reactivex.b` @kind object;
  #L26bad4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26bada.  return @kind void;
}
