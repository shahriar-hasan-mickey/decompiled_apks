record `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.n` @kind class {
  `io.reactivex.n` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.b` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle` v0 @kind this, `io.reactivex.n` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle;.<init>:(Lio/reactivex/n;Lio/reactivex/d0/k;Lio/reactivex/internal/util/ErrorMode;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L26b6bc.  call `<init>`(v0) @signature `Lio/reactivex/n;.<init>:()V` @kind direct;
  #L26b6c2.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.b` @type ^`io.reactivex.n` := v1 @kind object;
  #L26b6c6.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.c` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26b6ca.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.d` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L26b6ce.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.e` @type ^`int` := v4;
  #L26b6d2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle` v5 @kind this, `io.reactivex.t` v6 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26b6e4.  v0:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.b` @type ^`io.reactivex.n` @kind object;
  #L26b6e8.  v1:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.c` @type ^`io.reactivex.d0.k` @kind object;
  #L26b6ec.  call temp:= `c`(v0, v1, v6) @signature `Lio/reactivex/internal/operators/mixed/a;.c:(Ljava/lang/Object;Lio/reactivex/d0/k;Lio/reactivex/t;)Z` @kind static;
  #L26b6f2.  v0:= temp;
  #L26b6f4.  if v0 != 0 then goto L26b718;
  #L26b6f8.  v0:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.b` @type ^`io.reactivex.n` @kind object;
  #L26b6fc.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver`;
  #L26b700.  v2:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.c` @type ^`io.reactivex.d0.k` @kind object;
  #L26b704.  v3:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.e` @type ^`int`;
  #L26b708.  v4:= v5.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle.d` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26b70c.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$ConcatMapSingleMainObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L26b712.  call `subscribe`(v0, v1) @signature `Lio/reactivex/n;.subscribe:(Lio/reactivex/t;)V` @kind virtual;
  #L26b718.  return @kind void;
}
