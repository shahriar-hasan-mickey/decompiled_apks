record `io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.j` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$FlatMapObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26a6fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26a702.  v0.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L26a706.  v0.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26a70a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$FlatMapObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L26a71c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26a722.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$FlatMapObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a6d4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26a6da.  v0:= temp @kind object;
  #L26a6dc.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L26a6e0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L26a6e6.  v0:= temp;
  #L26a6e8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$FlatMapObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a734.  v0:= v1.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26a738.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26a73e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$FlatMapObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a750.  v0:= v1.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26a754.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26a75a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$FlatMapObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a76c.  v0:= v1.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26a770.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26a776.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$FlatMapObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L26a788.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26a78e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$FlatMapObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a7a0.  v0:= v1.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L26a7a4.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26a7aa.  v2:= temp @kind object;
  #L26a7ac.  v0:= "The mapper returned a null Publisher" @kind object;
  #L26a7b0.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26a7b6.  v2:= temp @kind object;
  #L26a7b8.  v2:= (`io.reactivex.r`) v2 @kind object;
  #L26a7bc.  call `subscribe`(v2, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L26a7c2.  return @kind void;
  #L26a7c4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26a7c6.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26a7cc.  v0:= v1.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26a7d0.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26a7d6.  return @kind void;
  catch `java.lang.Throwable` @[L26a7a0..L26a7bc] goto L26a7c4;
}
