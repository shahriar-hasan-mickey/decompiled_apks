record `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.mapper` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.requested` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.INNER_DISPOSED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L269ee8.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`;
  #L269eec.  v1:= 0I;
  #L269eee.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;)V` @kind direct;
  #L269ef4.  `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` := v0 @kind object;
  #L269ef8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L269f0c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L269f12.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L269f16.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L269f1a.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L269f1e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L269f22.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L269f28.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L269f2c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L269f30.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L269f36.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L269f3a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L269f3e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L269f44.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L269f48.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L269f5c.  v0:= 1I;
  #L269f5e.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L269f62.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L269f66.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L269f6c.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.disposeInner:()V` @kind virtual;
  #L269f72.  return @kind void;
}
procedure `void` `disposeInner`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.disposeInner:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L269f84.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L269f88.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` @kind object;
  #L269f8c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L269f92.  v0:= temp @kind object;
  #L269f94.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`) v0 @kind object;
  #L269f98.  if v0 == 0 then goto L269fa6;
  #L269f9c.  if v0 == v1 then goto L269fa6;
  #L269fa0.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;.dispose:()V` @kind virtual;
  #L269fa6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v12 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L269fb8.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L269fbe.  v0:= temp;
  #L269fc0.  if v0 == 0 then goto L269fc6;
  #L269fc4.  return @kind void;
  #L269fc6.  v0:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L269fca.  v1:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L269fce.  v2:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L269fd2.  v3:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L269fd6.  v4:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.emitted` @type ^`long` @kind wide;
  #L269fda.  v6:= 1I;
  #L269fdc.  v7:= 1I;
  #L269fde.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L269fe2.  if v8 == 0 then goto L269fe8;
  #L269fe6.  return @kind void;
  #L269fe8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L269fee.  v8:= temp @kind object;
  #L269ff0.  if v8 == 0 then goto L26a00c;
  #L269ff4.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L269ff8.  if v8 != 0 then goto L26a00c;
  #L269ffc.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26a002.  v1:= temp @kind object;
  #L26a004.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26a00a.  return @kind void;
  #L26a00c.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.done` @type ^`boolean` @kind boolean;
  #L26a010.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26a016.  v9:= temp @kind object;
  #L26a018.  v9:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`) v9 @kind object;
  #L26a01c.  if v9 != 0 then goto L26a024;
  #L26a020.  v10:= 1I;
  #L26a022.  goto L26a026;
  #L26a024.  v10:= 0I;
  #L26a026.  if v8 == 0 then goto L26a04a;
  #L26a02a.  if v10 == 0 then goto L26a04a;
  #L26a02e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26a034.  v1:= temp @kind object;
  #L26a036.  if v1 == 0 then goto L26a042;
  #L26a03a.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26a040.  goto L26a048;
  #L26a042.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L26a048.  return @kind void;
  #L26a04a.  if v10 != 0 then goto L26a082;
  #L26a04e.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver.item` @type ^`java.lang.Object` @kind object;
  #L26a052.  if v8 == 0 then goto L26a082;
  #L26a056.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L26a05c.  v10:= temp @kind wide;
  #L26a05e.  v8:= lcmp(v4, v10);
  #L26a062.  if v8 != 0 then goto L26a068;
  #L26a066.  goto L26a082;
  #L26a068.  v8:= 0I;
  #L26a06a.  call temp:= `compareAndSet`(v2, v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26a070.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver.item` @type ^`java.lang.Object` @kind object;
  #L26a074.  call `onNext`(v0, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26a07a.  v8:= 1L;
  #L26a07e.  v4:= v4 + v8 @kind long;
  #L26a080.  goto L269fde;
  #L26a082.  v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.emitted` @type ^`long` := v4 @kind wide;
  #L26a086.  v7:= -v7 @kind int;
  #L26a088.  call temp:= `addAndGet`(v12, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L26a08e.  v7:= temp;
  #L26a090.  if v7 != 0 then goto L269fde;
  #L26a094.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v2 @kind this, `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.innerComplete:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26a0a8.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a0ac.  v1:= 0I;
  #L26a0ae.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26a0b4.  v3:= temp;
  #L26a0b6.  if v3 == 0 then goto L26a0c0;
  #L26a0ba.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L26a0c0.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v2 @kind this, `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.innerError:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26a0d4.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a0d8.  v1:= 0I;
  #L26a0da.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26a0e0.  v3:= temp;
  #L26a0e2.  if v3 == 0 then goto L26a116;
  #L26a0e6.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26a0ea.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26a0f0.  v3:= temp;
  #L26a0f2.  if v3 == 0 then goto L26a116;
  #L26a0f6.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L26a0fa.  if v3 != 0 then goto L26a10e;
  #L26a0fe.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26a102.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L26a108.  call `disposeInner`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.disposeInner:()V` @kind virtual;
  #L26a10e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L26a114.  return @kind void;
  #L26a116.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26a11c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a130.  v0:= 1I;
  #L26a132.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L26a136.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L26a13c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a150.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26a154.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26a15a.  v0:= temp;
  #L26a15c.  if v0 == 0 then goto L26a17c;
  #L26a160.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L26a164.  if v2 != 0 then goto L26a16e;
  #L26a168.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.disposeInner:()V` @kind virtual;
  #L26a16e.  v2:= 1I;
  #L26a170.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L26a174.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L26a17a.  goto L26a182;
  #L26a17c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26a182.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L26a194.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a198.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26a19e.  v0:= temp @kind object;
  #L26a1a0.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`) v0 @kind object;
  #L26a1a4.  if v0 == 0 then goto L26a1ae;
  #L26a1a8.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;.dispose:()V` @kind virtual;
  #L26a1ae.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L26a1b2.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26a1b8.  v4:= temp @kind object;
  #L26a1ba.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L26a1be.  call temp:= `e`(v4, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26a1c4.  v4:= temp @kind object;
  #L26a1c6.  v4:= (`io.reactivex.k`) v4 @kind object;
  #L26a1ca.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`;
  #L26a1ce.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;)V` @kind direct;
  #L26a1d4.  v1:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a1d8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26a1de.  v1:= temp @kind object;
  #L26a1e0.  v1:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver`) v1 @kind object;
  #L26a1e4.  v2:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` @kind object;
  #L26a1e8.  if v1 != v2 then goto L26a1ee;
  #L26a1ec.  goto L26a204;
  #L26a1ee.  v2:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a1f2.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26a1f8.  v1:= temp;
  #L26a1fa.  if v1 == 0 then goto L26a1d4;
  #L26a1fe.  call `b`(v4, v0) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L26a204.  return @kind void;
  #L26a206.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26a208.  call `b`(v4) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26a20e.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26a212.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L26a218.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.inner` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26a21c.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.INNER_DISPOSED` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver` @kind object;
  #L26a220.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26a226.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L26a22c.  return @kind void;
  catch `java.lang.Throwable` @[L26a1ae..L26a1ca] goto L26a206;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26a24c.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26a250.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L26a256.  v0:= temp;
  #L26a258.  if v0 == 0 then goto L26a27a;
  #L26a25c.  v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L26a260.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L26a264.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L26a26a.  v0:= 9223372036854775807L;
  #L26a274.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L26a27a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26a28c.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L26a290.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L26a296.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L26a29c.  return @kind void;
}
