record `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.inner` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @AccessFlag ;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.requested` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @AccessFlag VOLATILE;
  `n.b.d` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.STATE_ACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.STATE_INACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.STATE_RESULT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L269580.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L269586.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L26958a.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26958e.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.prefetch` @type ^`int` := v3;
  #L269592.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L269596.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L26959a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L2695a0.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L2695a4.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L2695a8.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L2695ae.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L2695b2.  v1:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver`;
  #L2695b6.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;)V` @kind direct;
  #L2695bc.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver` := v1 @kind object;
  #L2695c0.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L2695c4.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L2695ca.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.queue` @type ^`io.reactivex.e0.a.i` := v1 @kind object;
  #L2695ce.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2695e0.  v0:= 1I;
  #L2695e2.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2695e6.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2695ea.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2695f0.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver` @kind object;
  #L2695f4.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver;.dispose:()V` @kind virtual;
  #L2695fa.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L269600.  v0:= temp;
  #L269602.  if v0 != 0 then goto L269616;
  #L269606.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L26960a.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L269610.  v0:= 0I;
  #L269612.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` := v0 @kind object;
  #L269616.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v15 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L269628.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26962e.  v0:= temp;
  #L269630.  if v0 == 0 then goto L269636;
  #L269634.  return @kind void;
  #L269636.  v0:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L26963a.  v1:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26963e.  v2:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L269642.  v3:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L269646.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L26964a.  v5:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.prefetch` @type ^`int`;
  #L26964e.  v6:= v5 ^> 1;
  #L269652.  v5:= v5 - v6 @kind int;
  #L269654.  v6:= 1I;
  #L269656.  v7:= 1I;
  #L269658.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L26965c.  v9:= 0I;
  #L26965e.  if v8 == 0 then goto L269670;
  #L269662.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L269668.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L26966c.  goto L2697a8;
  #L269670.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int`;
  #L269674.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26967a.  v10:= temp @kind object;
  #L26967c.  if v10 == 0 then goto L2696ae;
  #L269680.  v10:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L269684.  if v1 == v10 then goto L269694;
  #L269688.  v10:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26968c.  if v1 != v10 then goto L2696ae;
  #L269690.  if v8 != 0 then goto L2696ae;
  #L269694.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L26969a.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L26969e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2696a4.  v1:= temp @kind object;
  #L2696a6.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2696ac.  return @kind void;
  #L2696ae.  v10:= 0I;
  #L2696b0.  if v8 != 0 then goto L26976e;
  #L2696b4.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.done` @type ^`boolean` @kind boolean;
  #L2696b8.  call temp:= `poll`(v2) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L2696be.  v9:= temp @kind object;
  #L2696c0.  if v9 != 0 then goto L2696c8;
  #L2696c4.  v11:= 1I;
  #L2696c6.  goto L2696ca;
  #L2696c8.  v11:= 0I;
  #L2696ca.  if v8 == 0 then goto L2696ee;
  #L2696ce.  if v11 == 0 then goto L2696ee;
  #L2696d2.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2696d8.  v1:= temp @kind object;
  #L2696da.  if v1 != 0 then goto L2696e6;
  #L2696de.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2696e4.  goto L2696ec;
  #L2696e6.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2696ec.  return @kind void;
  #L2696ee.  if v11 == 0 then goto L2696f4;
  #L2696f2.  goto L2697a8;
  #L2696f4.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.consumed` @type ^`int`;
  #L2696f8.  v8:= v8 + v6 @kind int;
  #L2696fa.  if v8 != v5 then goto L269710;
  #L2696fe.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.consumed` @type ^`int` := v10;
  #L269702.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L269706.  v10:= (`long`) v5 @kind i2l;
  #L269708.  call `request`(v8, v10) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L26970e.  goto L269714;
  #L269710.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.consumed` @type ^`int` := v8;
  #L269714.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L269718.  call temp:= `apply`(v8, v9) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26971e.  v8:= temp @kind object;
  #L269720.  v9:= "The mapper returned a null MaybeSource" @kind object;
  #L269724.  call temp:= `e`(v8, v9) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26972a.  v8:= temp @kind object;
  #L26972c.  v8:= (`io.reactivex.k`) v8 @kind object;
  #L269730.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int` := v6;
  #L269734.  v9:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver` @kind object;
  #L269738.  call `b`(v8, v9) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L26973e.  goto L2697a8;
  #L269740.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L269742.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L269748.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26974c.  call `cancel`(v4) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L269752.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L269758.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26975e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L269764.  v1:= temp @kind object;
  #L269766.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26976c.  return @kind void;
  #L26976e.  v11:= 2I;
  #L269770.  if v8 != v11 then goto L2697a8;
  #L269774.  v11:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.emitted` @type ^`long` @kind wide;
  #L269778.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L26977e.  v13:= temp @kind wide;
  #L269780.  v8:= lcmp(v11, v13);
  #L269784.  if v8 == 0 then goto L2697a8;
  #L269788.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` @kind object;
  #L26978c.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L269790.  call `onNext`(v0, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L269796.  v8:= 1L;
  #L26979a.  v11:= v11 + v8 @kind long;
  #L26979c.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.emitted` @type ^`long` := v11 @kind wide;
  #L2697a0.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int` := v10;
  #L2697a4.  goto L269658;
  #L2697a8.  v7:= -v7 @kind int;
  #L2697aa.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2697b0.  v7:= temp;
  #L2697b2.  if v7 != 0 then goto L269658;
  #L2697b6.  return @kind void;
  catch `java.lang.Throwable` @[L269714..L269730] goto L269740;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L2697d4.  v0:= 0I;
  #L2697d6.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int` := v0;
  #L2697da.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L2697e0.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L2697f4.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2697f8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2697fe.  v0:= temp;
  #L269800.  if v0 == 0 then goto L269828;
  #L269804.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L269808.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26980c.  if v2 == v0 then goto L26981a;
  #L269810.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L269814.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L26981a.  v2:= 0I;
  #L26981c.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int` := v2;
  #L269820.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L269826.  goto L26982e;
  #L269828.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26982e.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.innerSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L269840.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.item` @type ^`java.lang.Object` := v1 @kind object;
  #L269844.  v1:= 2I;
  #L269846.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.state` @type ^`int` := v1;
  #L26984a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L269850.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L269864.  v0:= 1I;
  #L269866.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L26986a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L269870.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L269884.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L269888.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26988e.  v0:= temp;
  #L269890.  if v0 == 0 then goto L2698b8;
  #L269894.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L269898.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L26989c.  if v2 != v0 then goto L2698aa;
  #L2698a0.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver` @kind object;
  #L2698a4.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver;.dispose:()V` @kind virtual;
  #L2698aa.  v2:= 1I;
  #L2698ac.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L2698b0.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L2698b6.  goto L2698be;
  #L2698b8.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2698be.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2698d0.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L2698d4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2698da.  v2:= temp;
  #L2698dc.  if v2 != 0 then goto L269900;
  #L2698e0.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2698e4.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2698ea.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L2698ee.  v0:= "queue full?!" @kind object;
  #L2698f2.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2698f8.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2698fe.  return @kind void;
  #L269900.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L269906.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L269918.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26991c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L269922.  v0:= temp;
  #L269924.  if v0 == 0 then goto L269942;
  #L269928.  v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L26992c.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L269930.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L269936.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.prefetch` @type ^`int`;
  #L26993a.  v0:= (`long`) v0 @kind i2l;
  #L26993c.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L269942.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L269954.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L269958.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L26995e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$ConcatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L269964.  return @kind void;
}
