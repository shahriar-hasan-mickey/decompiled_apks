record `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errorMode` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.inner` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @AccessFlag ;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.requested` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @AccessFlag VOLATILE;
  `n.b.d` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.STATE_ACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.STATE_INACTIVE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.STATE_RESULT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2699fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L269a02.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L269a06.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L269a0a.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.prefetch` @type ^`int` := v3;
  #L269a0e.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L269a12.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L269a16.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L269a1c.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L269a20.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L269a24.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L269a2a.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L269a2e.  v1:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver`;
  #L269a32.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;)V` @kind direct;
  #L269a38.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver` := v1 @kind object;
  #L269a3c.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L269a40.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L269a46.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.queue` @type ^`io.reactivex.e0.a.i` := v1 @kind object;
  #L269a4a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L269a5c.  v0:= 1I;
  #L269a5e.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L269a62.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L269a66.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L269a6c.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver` @kind object;
  #L269a70.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver;.dispose:()V` @kind virtual;
  #L269a76.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L269a7c.  v0:= temp;
  #L269a7e.  if v0 != 0 then goto L269a92;
  #L269a82.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L269a86.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L269a8c.  v0:= 0I;
  #L269a8e.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` := v0 @kind object;
  #L269a92.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v15 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L269aa4.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L269aaa.  v0:= temp;
  #L269aac.  if v0 == 0 then goto L269ab2;
  #L269ab0.  return @kind void;
  #L269ab2.  v0:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L269ab6.  v1:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L269aba.  v2:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L269abe.  v3:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L269ac2.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L269ac6.  v5:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.prefetch` @type ^`int`;
  #L269aca.  v6:= v5 ^> 1;
  #L269ace.  v5:= v5 - v6 @kind int;
  #L269ad0.  v6:= 1I;
  #L269ad2.  v7:= 1I;
  #L269ad4.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L269ad8.  v9:= 0I;
  #L269ada.  if v8 == 0 then goto L269aec;
  #L269ade.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L269ae4.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L269ae8.  goto L269c24;
  #L269aec.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @type ^`int`;
  #L269af0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L269af6.  v10:= temp @kind object;
  #L269af8.  if v10 == 0 then goto L269b2a;
  #L269afc.  v10:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L269b00.  if v1 == v10 then goto L269b10;
  #L269b04.  v10:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L269b08.  if v1 != v10 then goto L269b2a;
  #L269b0c.  if v8 != 0 then goto L269b2a;
  #L269b10.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L269b16.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L269b1a.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L269b20.  v1:= temp @kind object;
  #L269b22.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L269b28.  return @kind void;
  #L269b2a.  v10:= 0I;
  #L269b2c.  if v8 != 0 then goto L269bea;
  #L269b30.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.done` @type ^`boolean` @kind boolean;
  #L269b34.  call temp:= `poll`(v2) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L269b3a.  v9:= temp @kind object;
  #L269b3c.  if v9 != 0 then goto L269b44;
  #L269b40.  v11:= 1I;
  #L269b42.  goto L269b46;
  #L269b44.  v11:= 0I;
  #L269b46.  if v8 == 0 then goto L269b6a;
  #L269b4a.  if v11 == 0 then goto L269b6a;
  #L269b4e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L269b54.  v1:= temp @kind object;
  #L269b56.  if v1 != 0 then goto L269b62;
  #L269b5a.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L269b60.  goto L269b68;
  #L269b62.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L269b68.  return @kind void;
  #L269b6a.  if v11 == 0 then goto L269b70;
  #L269b6e.  goto L269c24;
  #L269b70.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.consumed` @type ^`int`;
  #L269b74.  v8:= v8 + v6 @kind int;
  #L269b76.  if v8 != v5 then goto L269b8c;
  #L269b7a.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.consumed` @type ^`int` := v10;
  #L269b7e.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L269b82.  v10:= (`long`) v5 @kind i2l;
  #L269b84.  call `request`(v8, v10) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L269b8a.  goto L269b90;
  #L269b8c.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.consumed` @type ^`int` := v8;
  #L269b90.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L269b94.  call temp:= `apply`(v8, v9) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L269b9a.  v8:= temp @kind object;
  #L269b9c.  v9:= "The mapper returned a null SingleSource" @kind object;
  #L269ba0.  call temp:= `e`(v8, v9) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L269ba6.  v8:= temp @kind object;
  #L269ba8.  v8:= (`io.reactivex.a0`) v8 @kind object;
  #L269bac.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @type ^`int` := v6;
  #L269bb0.  v9:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver` @kind object;
  #L269bb4.  call `b`(v8, v9) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L269bba.  goto L269c24;
  #L269bbc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L269bbe.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L269bc4.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L269bc8.  call `cancel`(v4) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L269bce.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L269bd4.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L269bda.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L269be0.  v1:= temp @kind object;
  #L269be2.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L269be8.  return @kind void;
  #L269bea.  v11:= 2I;
  #L269bec.  if v8 != v11 then goto L269c24;
  #L269bf0.  v11:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.emitted` @type ^`long` @kind wide;
  #L269bf4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L269bfa.  v13:= temp @kind wide;
  #L269bfc.  v8:= lcmp(v11, v13);
  #L269c00.  if v8 == 0 then goto L269c24;
  #L269c04.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` @kind object;
  #L269c08.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` := v9 @kind object;
  #L269c0c.  call `onNext`(v0, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L269c12.  v8:= 1L;
  #L269c16.  v11:= v11 + v8 @kind long;
  #L269c18.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.emitted` @type ^`long` := v11 @kind wide;
  #L269c1c.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @type ^`int` := v10;
  #L269c20.  goto L269ad4;
  #L269c24.  v7:= -v7 @kind int;
  #L269c26.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L269c2c.  v7:= temp;
  #L269c2e.  if v7 != 0 then goto L269ad4;
  #L269c32.  return @kind void;
  catch `java.lang.Throwable` @[L269b90..L269bac] goto L269bbc;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L269c50.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L269c54.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L269c5a.  v0:= temp;
  #L269c5c.  if v0 == 0 then goto L269c84;
  #L269c60.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L269c64.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L269c68.  if v2 == v0 then goto L269c76;
  #L269c6c.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L269c70.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L269c76.  v2:= 0I;
  #L269c78.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @type ^`int` := v2;
  #L269c7c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L269c82.  goto L269c8a;
  #L269c84.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L269c8a.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.innerSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L269c9c.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.item` @type ^`java.lang.Object` := v1 @kind object;
  #L269ca0.  v1:= 2I;
  #L269ca2.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.state` @type ^`int` := v1;
  #L269ca6.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L269cac.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L269cc0.  v0:= 1I;
  #L269cc2.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L269cc6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L269ccc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L269ce0.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L269ce4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L269cea.  v0:= temp;
  #L269cec.  if v0 == 0 then goto L269d14;
  #L269cf0.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L269cf4.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L269cf8.  if v2 != v0 then goto L269d06;
  #L269cfc.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.inner` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver` @kind object;
  #L269d00.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver;.dispose:()V` @kind virtual;
  #L269d06.  v2:= 1I;
  #L269d08.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L269d0c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L269d12.  goto L269d1a;
  #L269d14.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L269d1a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L269d2c.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L269d30.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L269d36.  v2:= temp;
  #L269d38.  if v2 != 0 then goto L269d5c;
  #L269d3c.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L269d40.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L269d46.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L269d4a.  v0:= "queue full?!" @kind object;
  #L269d4e.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L269d54.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L269d5a.  return @kind void;
  #L269d5c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L269d62.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L269d74.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L269d78.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L269d7e.  v0:= temp;
  #L269d80.  if v0 == 0 then goto L269d9e;
  #L269d84.  v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L269d88.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L269d8c.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L269d92.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.prefetch` @type ^`int`;
  #L269d96.  v0:= (`long`) v0 @kind i2l;
  #L269d98.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L269d9e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L269db0.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L269db4.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L269dba.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$ConcatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L269dc0.  return @kind void;
}
