record `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.b` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.b` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @AccessFlag FINAL;
  `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.other` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v0 @kind this, `io.reactivex.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.<init>:(Lio/reactivex/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24c700.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24c706.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L24c70a.  v1:= new `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver`;
  #L24c70e.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;)V` @kind direct;
  #L24c714.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` := v1 @kind object;
  #L24c718.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L24c71c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L24c722.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L24c726.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24c738.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24c73c.  v1:= 0I;
  #L24c73e.  v2:= 1I;
  #L24c740.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24c746.  v0:= temp;
  #L24c748.  if v0 == 0 then goto L24c75c;
  #L24c74c.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24c752.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` @kind object;
  #L24c756.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24c75c.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L24c770.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24c774.  v1:= 0I;
  #L24c776.  v2:= 1I;
  #L24c778.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24c77e.  v0:= temp;
  #L24c780.  if v0 == 0 then goto L24c794;
  #L24c784.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24c78a.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24c78e.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24c794.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L24c7a8.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24c7ac.  v1:= 0I;
  #L24c7ae.  v2:= 1I;
  #L24c7b0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24c7b6.  v0:= temp;
  #L24c7b8.  if v0 == 0 then goto L24c7ce;
  #L24c7bc.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24c7c2.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24c7c6.  call `onError`(v0, v4) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24c7cc.  goto L24c7d4;
  #L24c7ce.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24c7d4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c6e0.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24c6e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L24c6ea.  v0:= temp;
  #L24c6ec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24c7e8.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24c7ec.  v1:= 0I;
  #L24c7ee.  v2:= 1I;
  #L24c7f0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24c7f6.  v0:= temp;
  #L24c7f8.  if v0 == 0 then goto L24c810;
  #L24c7fc.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` @kind object;
  #L24c800.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24c806.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24c80a.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24c810.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24c824.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24c828.  v1:= 0I;
  #L24c82a.  v2:= 1I;
  #L24c82c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24c832.  v0:= temp;
  #L24c834.  if v0 == 0 then goto L24c84e;
  #L24c838.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver` @kind object;
  #L24c83c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24c842.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24c846.  call `onError`(v0, v4) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24c84c.  goto L24c854;
  #L24c84e.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24c854.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$TakeUntilMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L24c868.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24c86e.  return @kind void;
}
