record `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.delayErrors` @AccessFlag FINAL;
  `io.reactivex.b` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.maxConcurrency` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v0 @kind this, `io.reactivex.b` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.<init>:(Lio/reactivex/b;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24bab0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L24bab6.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L24baba.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.maxConcurrency` @type ^`int` := v2;
  #L24babe.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L24bac2.  v1:= new `io.reactivex.disposables.a`;
  #L24bac6.  call `<init>`(v1) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L24bacc.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.a` := v1 @kind object;
  #L24bad0.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L24bad4.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L24bada.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L24bade.  v1:= 1I;
  #L24bae0.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L24bae6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24baf8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24bafc.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24bb02.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L24bb06.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L24bb0c.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v2 @kind this, `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.innerComplete:(Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L24bb20.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L24bb24.  call temp:= `c`(v0, v3) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L24bb2a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L24bb30.  v3:= temp;
  #L24bb32.  if v3 != 0 then goto L24bb62;
  #L24bb36.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24bb3a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24bb40.  v3:= temp @kind object;
  #L24bb42.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L24bb46.  if v3 == 0 then goto L24bb56;
  #L24bb4a.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24bb4e.  call `onError`(v0, v3) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24bb54.  goto L24bb7e;
  #L24bb56.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24bb5a.  call `onComplete`(v3) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24bb60.  goto L24bb7e;
  #L24bb62.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.maxConcurrency` @type ^`int`;
  #L24bb66.  v0:= 2147483647I;
  #L24bb6c.  if v3 == v0 then goto L24bb7e;
  #L24bb70.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24bb74.  v0:= 1L;
  #L24bb78.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24bb7e.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v2 @kind this, `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.innerError:(Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L24bb90.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L24bb94.  call temp:= `c`(v0, v3) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L24bb9a.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L24bb9e.  if v3 != 0 then goto L24bbf4;
  #L24bba2.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24bba6.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24bbac.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L24bbb0.  call `dispose`(v3) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L24bbb6.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24bbba.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24bbc0.  v3:= temp;
  #L24bbc2.  if v3 == 0 then goto L24bbec;
  #L24bbc6.  v3:= 0I;
  #L24bbc8.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L24bbce.  v3:= temp;
  #L24bbd0.  if v3 <= 0 then goto L24bc4c;
  #L24bbd4.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24bbd8.  v4:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24bbdc.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24bbe2.  v4:= temp @kind object;
  #L24bbe4.  call `onError`(v3, v4) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24bbea.  goto L24bc4c;
  #L24bbec.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24bbf2.  goto L24bc4c;
  #L24bbf4.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24bbf8.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24bbfe.  v3:= temp;
  #L24bc00.  if v3 == 0 then goto L24bc46;
  #L24bc04.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L24bc0a.  v3:= temp;
  #L24bc0c.  if v3 != 0 then goto L24bc28;
  #L24bc10.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24bc14.  v4:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24bc18.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24bc1e.  v4:= temp @kind object;
  #L24bc20.  call `onError`(v3, v4) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24bc26.  goto L24bc4c;
  #L24bc28.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.maxConcurrency` @type ^`int`;
  #L24bc2c.  v4:= 2147483647I;
  #L24bc32.  if v3 == v4 then goto L24bc4c;
  #L24bc36.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24bc3a.  v0:= 1L;
  #L24bc3e.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24bc44.  goto L24bc4c;
  #L24bc46.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24bc4c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ba90.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L24ba94.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/a;.isDisposed:()Z` @kind virtual;
  #L24ba9a.  v0:= temp;
  #L24ba9c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24bc60.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L24bc66.  v0:= temp;
  #L24bc68.  if v0 != 0 then goto L24bca2;
  #L24bc6c.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24bc70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24bc76.  v0:= temp @kind object;
  #L24bc78.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L24bc7c.  if v0 == 0 then goto L24bc98;
  #L24bc80.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24bc84.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24bc88.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24bc8e.  v1:= temp @kind object;
  #L24bc90.  call `onError`(v0, v1) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24bc96.  goto L24bca2;
  #L24bc98.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24bc9c.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24bca2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24bcb4.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L24bcb8.  if v0 != 0 then goto L24bd04;
  #L24bcbc.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L24bcc0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L24bcc6.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24bcca.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24bcd0.  v0:= temp;
  #L24bcd2.  if v0 == 0 then goto L24bcfc;
  #L24bcd6.  v2:= 0I;
  #L24bcd8.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L24bcde.  v2:= temp;
  #L24bce0.  if v2 <= 0 then goto L24bd3e;
  #L24bce4.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24bce8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24bcec.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24bcf2.  v0:= temp @kind object;
  #L24bcf4.  call `onError`(v2, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24bcfa.  goto L24bd3e;
  #L24bcfc.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24bd02.  goto L24bd3e;
  #L24bd04.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24bd08.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24bd0e.  v0:= temp;
  #L24bd10.  if v0 == 0 then goto L24bd38;
  #L24bd14.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L24bd1a.  v2:= temp;
  #L24bd1c.  if v2 != 0 then goto L24bd3e;
  #L24bd20.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24bd24.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24bd28.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24bd2e.  v0:= temp @kind object;
  #L24bd30.  call `onError`(v2, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24bd36.  goto L24bd3e;
  #L24bd38.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24bd3e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v2 @kind this, `io.reactivex.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onNext:(Lio/reactivex/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24bd50.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L24bd56.  v0:= new `io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver`;
  #L24bd5a.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber$MergeInnerObserver;.<init>:(Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;)V` @kind direct;
  #L24bd60.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L24bd64.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L24bd6a.  call `b`(v3, v0) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L24bd70.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24bd84.  v1:= (`io.reactivex.c`) v1 @kind object;
  #L24bd88.  call `onNext`(v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onNext:(Lio/reactivex/c;)V` @kind virtual;
  #L24bd8e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$CompletableMergeSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24bda0.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24bda4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L24bdaa.  v0:= temp;
  #L24bdac.  if v0 == 0 then goto L24bde6;
  #L24bdb0.  v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L24bdb4.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24bdb8.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L24bdbe.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber.maxConcurrency` @type ^`int`;
  #L24bdc2.  v1:= 2147483647I;
  #L24bdc8.  if v0 != v1 then goto L24bdde;
  #L24bdcc.  v0:= 9223372036854775807L;
  #L24bdd6.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24bddc.  goto L24bde6;
  #L24bdde.  v0:= (`long`) v0 @kind i2l;
  #L24bde0.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24bde6.  return @kind void;
}
