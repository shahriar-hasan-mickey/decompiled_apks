record `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.b` `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.completable.CompletableCache` `io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache` v0 @kind this, `io.reactivex.internal.operators.completable.CompletableCache` v1 @kind object, `io.reactivex.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.<init>:(Lio/reactivex/internal/operators/completable/CompletableCache;Lio/reactivex/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24adb4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L24adba.  v0.`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache.downstream` @type ^`io.reactivex.b` := v2 @kind object;
  #L24adbe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24add0.  v0:= 0I;
  #L24add2.  v1:= 1I;
  #L24add4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24adda.  v0:= temp;
  #L24addc.  if v0 != 0 then goto L24ade2;
  #L24ade0.  return @kind void;
  #L24ade2.  v0:= 0I;
  #L24ade4.  throw v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableCache$InnerCompletableCache` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$InnerCompletableCache;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ad98.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L24ad9e.  v0:= temp;
  #L24ada0.  return v0;
}
