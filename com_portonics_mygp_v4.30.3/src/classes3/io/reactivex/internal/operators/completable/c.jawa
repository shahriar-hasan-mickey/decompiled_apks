record `io.reactivex.internal.operators.completable.c` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.a` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.completable.c.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.c` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/c;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L24b95c.  call `<init>`(v0) @signature `Lio/reactivex/a;.<init>:()V` @kind direct;
  #L24b962.  v0.`io.reactivex.internal.operators.completable.c.b` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L24b966.  return @kind void;
}
procedure `void` `n`(`io.reactivex.internal.operators.completable.c` v2 @kind this, `io.reactivex.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/c;.n:(Lio/reactivex/b;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L24b978.  call temp:= `b`() @signature `Lio/reactivex/disposables/c;.b:()Lio/reactivex/disposables/b;` @kind static;
  #L24b97e.  v0:= temp @kind object;
  #L24b980.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L24b986.  v1:= v2.`io.reactivex.internal.operators.completable.c.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L24b98a.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L24b990.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L24b996.  v0:= temp;
  #L24b998.  if v0 != 0 then goto L24b9a2;
  #L24b99c.  call `onComplete`(v3) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24b9a2.  return @kind void;
  #L24b9a4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24b9a6.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24b9ac.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L24b9b2.  v0:= temp;
  #L24b9b4.  if v0 != 0 then goto L24b9c0;
  #L24b9b8.  call `onError`(v3, v1) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24b9be.  goto L24b9c6;
  #L24b9c0.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24b9c6.  return @kind void;
  catch `java.lang.Throwable` @[L24b986..L24b990] goto L24b9a4;
}
