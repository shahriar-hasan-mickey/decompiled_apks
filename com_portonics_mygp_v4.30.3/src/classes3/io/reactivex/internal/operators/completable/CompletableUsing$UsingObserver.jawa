record `io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.b` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.d0.g` `io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.disposer` @AccessFlag FINAL;
  `io.reactivex.b` `io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v0 @kind this, `io.reactivex.b` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.d0.g` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.<init>:(Lio/reactivex/b;Ljava/lang/Object;Lio/reactivex/d0/g;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24c930.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24c936.  v0.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L24c93a.  v0.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` := v3 @kind object;
  #L24c93e.  v0.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @type ^`boolean` := v4 @kind boolean;
  #L24c942.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c954.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L24c958.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24c95e.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L24c962.  v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L24c966.  call `disposeResourceAfter`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L24c96c.  return @kind void;
}
procedure `void` `disposeResourceAfter`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.disposeResourceAfter:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L24c980.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24c986.  v0:= temp @kind object;
  #L24c988.  if v0 == v2 then goto L24c9a6;
  #L24c98c.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L24c990.  call `accept`(v1, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L24c996.  goto L24c9a6;
  #L24c998.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24c99a.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24c9a0.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24c9a6.  return @kind void;
  catch `java.lang.Throwable` @[L24c98c..L24c996] goto L24c998;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c910.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L24c914.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L24c91a.  v0:= temp;
  #L24c91c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24c9c4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L24c9c8.  v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L24c9cc.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L24c9d0.  if v0 == 0 then goto L24ca00;
  #L24c9d4.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24c9da.  v0:= temp @kind object;
  #L24c9dc.  if v0 == v2 then goto L24c9fe;
  #L24c9e0.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L24c9e4.  call `accept`(v1, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L24c9ea.  goto L24ca00;
  #L24c9ec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24c9ee.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24c9f4.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24c9f8.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24c9fe.  return @kind void;
  #L24ca00.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24ca04.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24ca0a.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L24ca0e.  if v0 != 0 then goto L24ca18;
  #L24ca12.  call `disposeResourceAfter`(v2) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L24ca18.  return @kind void;
  catch `java.lang.Throwable` @[L24c9e0..L24c9ea] goto L24c9ec;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24ca38.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L24ca3c.  v4.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L24ca40.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L24ca44.  if v0 == 0 then goto L24ca8a;
  #L24ca48.  call temp:= `getAndSet`(v4, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24ca4e.  v0:= temp @kind object;
  #L24ca50.  if v0 == v4 then goto L24ca88;
  #L24ca54.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L24ca58.  call `accept`(v1, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L24ca5e.  goto L24ca8a;
  #L24ca60.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24ca62.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24ca68.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L24ca6c.  v2:= 2I;
  #L24ca6e.  v2:= new `java.lang.Throwable`[v2];
  #L24ca72.  v3:= 0I;
  #L24ca74.  v2[v3]:= v5 @kind object;
  #L24ca78.  v5:= 1I;
  #L24ca7a.  v2[v5]:= v0 @kind object;
  #L24ca7e.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L24ca84.  v5:= v1 @kind object;
  #L24ca86.  goto L24ca8a;
  #L24ca88.  return @kind void;
  #L24ca8a.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24ca8e.  call `onError`(v0, v5) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24ca94.  v5:= v4.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L24ca98.  if v5 != 0 then goto L24caa2;
  #L24ca9c.  call `disposeResourceAfter`(v4) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L24caa2.  return @kind void;
  catch `java.lang.Throwable` @[L24ca54..L24ca5e] goto L24ca60;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableUsing$UsingObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24cac0.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L24cac4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24caca.  v0:= temp;
  #L24cacc.  if v0 == 0 then goto L24cade;
  #L24cad0.  v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L24cad4.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableUsing$UsingObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24cad8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L24cade.  return @kind void;
}
