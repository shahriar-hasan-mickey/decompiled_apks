record `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.active` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.done` @AccessFlag VOLATILE;
  `io.reactivex.b` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.limit` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.once` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.sourceFused` @AccessFlag ;
  `n.b.d` `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v0 @kind this, `io.reactivex.b` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.<init>:(Lio/reactivex/b;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24ae90.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L24ae96.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L24ae9a.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.prefetch` @type ^`int` := v2;
  #L24ae9e.  v1:= new `io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver`;
  #L24aea2.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver;.<init>:(Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;)V` @kind direct;
  #L24aea8.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` := v1 @kind object;
  #L24aeac.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L24aeb0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L24aeb6.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L24aeba.  v1:= v2 ^> 2;
  #L24aebe.  v2:= v2 - v1 @kind int;
  #L24aec0.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.limit` @type ^`int` := v2;
  #L24aec4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24aed8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24aedc.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24aee2.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` @kind object;
  #L24aee6.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24aeec.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24af00.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L24af06.  v0:= temp;
  #L24af08.  if v0 == 0 then goto L24af0e;
  #L24af0c.  return @kind void;
  #L24af0e.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.isDisposed:()Z` @kind virtual;
  #L24af14.  v0:= temp;
  #L24af16.  if v0 == 0 then goto L24af1c;
  #L24af1a.  return @kind void;
  #L24af1c.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.active` @type ^`boolean` @kind boolean;
  #L24af20.  if v0 != 0 then goto L24af94;
  #L24af24.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.done` @type ^`boolean` @kind boolean;
  #L24af28.  v1:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L24af2c.  call temp:= `poll`(v1) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L24af32.  v1:= temp @kind object;
  #L24af34.  v1:= (`io.reactivex.c`) v1 @kind object;
  #L24af38.  v2:= 0I;
  #L24af3a.  v3:= 1I;
  #L24af3c.  if v1 != 0 then goto L24af44;
  #L24af40.  v4:= 1I;
  #L24af42.  goto L24af46;
  #L24af44.  v4:= 0I;
  #L24af46.  if v0 == 0 then goto L24af6a;
  #L24af4a.  if v4 == 0 then goto L24af6a;
  #L24af4e.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24af52.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24af58.  v0:= temp;
  #L24af5a.  if v0 == 0 then goto L24af68;
  #L24af5e.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24af62.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24af68.  return @kind void;
  #L24af6a.  if v4 != 0 then goto L24af94;
  #L24af6e.  v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.active` @type ^`boolean` := v3 @kind boolean;
  #L24af72.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` @kind object;
  #L24af76.  call `b`(v1, v0) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L24af7c.  call `request`(v5) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.request:()V` @kind virtual;
  #L24af82.  goto L24af94;
  #L24af84.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24af86.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24af8c.  call `innerError`(v5, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24af92.  return @kind void;
  #L24af94.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L24af9a.  v0:= temp;
  #L24af9c.  if v0 != 0 then goto L24af0e;
  #L24afa0.  return @kind void;
  catch `java.lang.Throwable` @[L24af28..L24af38] goto L24af84;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L24afc0.  v0:= 0I;
  #L24afc2.  v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.active` @type ^`boolean` := v0 @kind boolean;
  #L24afc6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.drain:()V` @kind virtual;
  #L24afcc.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L24afe0.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24afe4.  v1:= 0I;
  #L24afe6.  v2:= 1I;
  #L24afe8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24afee.  v0:= temp;
  #L24aff0.  if v0 == 0 then goto L24b00a;
  #L24aff4.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24aff8.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24affe.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24b002.  call `onError`(v0, v4) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24b008.  goto L24b010;
  #L24b00a.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24b010.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ae64.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` @kind object;
  #L24ae68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24ae6e.  v0:= temp @kind object;
  #L24ae70.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L24ae74.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L24ae7a.  v0:= temp;
  #L24ae7c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24b024.  v0:= 1I;
  #L24b026.  v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L24b02a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.drain:()V` @kind virtual;
  #L24b030.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24b044.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24b048.  v1:= 0I;
  #L24b04a.  v2:= 1I;
  #L24b04c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24b052.  v0:= temp;
  #L24b054.  if v0 == 0 then goto L24b06e;
  #L24b058.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.inner` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver` @kind object;
  #L24b05c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24b062.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24b066.  call `onError`(v0, v4) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24b06c.  goto L24b074;
  #L24b06e.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24b074.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v1 @kind this, `io.reactivex.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onNext:(Lio/reactivex/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24b088.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.sourceFused` @type ^`int`;
  #L24b08c.  if v0 != 0 then goto L24b0b2;
  #L24b090.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L24b094.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L24b09a.  v2:= temp;
  #L24b09c.  if v2 != 0 then goto L24b0b2;
  #L24b0a0.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L24b0a4.  call `<init>`(v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L24b0aa.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24b0b0.  return @kind void;
  #L24b0b2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.drain:()V` @kind virtual;
  #L24b0b8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24b0cc.  v1:= (`io.reactivex.c`) v1 @kind object;
  #L24b0d0.  call `onNext`(v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onNext:(Lio/reactivex/c;)V` @kind virtual;
  #L24b0d6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v6 @kind this, `n.b.d` v7 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24b0e8.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24b0ec.  call temp:= `validate`(v0, v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L24b0f2.  v0:= temp;
  #L24b0f4.  if v0 == 0 then goto L24b1b6;
  #L24b0f8.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @type ^`n.b.d` := v7 @kind object;
  #L24b0fc.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.prefetch` @type ^`int`;
  #L24b100.  v1:= 2147483647I;
  #L24b106.  if v0 != v1 then goto L24b116;
  #L24b10a.  v2:= 9223372036854775807L;
  #L24b114.  goto L24b118;
  #L24b116.  v2:= (`long`) v0 @kind i2l;
  #L24b118.  v0:= instanceof @variable v7 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L24b11c.  if v0 == 0 then goto L24b174;
  #L24b120.  v0:= v7 @kind object;
  #L24b122.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L24b126.  v4:= 3I;
  #L24b128.  call temp:= `requestFusion`(v0, v4) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L24b12e.  v4:= temp;
  #L24b130.  v5:= 1I;
  #L24b132.  if v4 != v5 then goto L24b154;
  #L24b136.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.sourceFused` @type ^`int` := v4;
  #L24b13a.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L24b13e.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.done` @type ^`boolean` := v5 @kind boolean;
  #L24b142.  v7:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24b146.  call `onSubscribe`(v7, v6) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L24b14c.  call `drain`(v6) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.drain:()V` @kind virtual;
  #L24b152.  return @kind void;
  #L24b154.  v5:= 2I;
  #L24b156.  if v4 != v5 then goto L24b174;
  #L24b15a.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.sourceFused` @type ^`int` := v4;
  #L24b15e.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L24b162.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24b166.  call `onSubscribe`(v0, v6) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L24b16c.  call `request`(v7, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24b172.  return @kind void;
  #L24b174.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.prefetch` @type ^`int`;
  #L24b178.  if v0 != v1 then goto L24b194;
  #L24b17c.  v0:= new `io.reactivex.internal.queue.a`;
  #L24b180.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L24b186.  v1:= temp;
  #L24b188.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L24b18e.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L24b192.  goto L24b1a6;
  #L24b194.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L24b198.  v1:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.prefetch` @type ^`int`;
  #L24b19c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L24b1a2.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L24b1a6.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L24b1aa.  call `onSubscribe`(v0, v6) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L24b1b0.  call `request`(v7, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24b1b6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$CompletableConcatSubscriber;.request:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24b1c8.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.sourceFused` @type ^`int`;
  #L24b1cc.  v1:= 1I;
  #L24b1ce.  if v0 == v1 then goto L24b1f8;
  #L24b1d2.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.consumed` @type ^`int`;
  #L24b1d6.  v0:= v0 + v1 @kind int;
  #L24b1d8.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.limit` @type ^`int`;
  #L24b1dc.  if v0 != v1 then goto L24b1f4;
  #L24b1e0.  v1:= 0I;
  #L24b1e2.  v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.consumed` @type ^`int` := v1;
  #L24b1e6.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24b1ea.  v2:= (`long`) v0 @kind i2l;
  #L24b1ec.  call `request`(v1, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24b1f2.  goto L24b1f8;
  #L24b1f4.  v4.`io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber.consumed` @type ^`int` := v0;
  #L24b1f8.  return @kind void;
}
