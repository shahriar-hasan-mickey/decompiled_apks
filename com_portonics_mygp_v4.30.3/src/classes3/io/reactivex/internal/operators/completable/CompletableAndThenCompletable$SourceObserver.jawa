record `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.b` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.b` `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver.actualObserver` @AccessFlag FINAL;
  `io.reactivex.c` `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver.next` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver` v0 @kind this, `io.reactivex.b` v1 @kind object, `io.reactivex.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$SourceObserver;.<init>:(Lio/reactivex/b;Lio/reactivex/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24aca4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24acaa.  v0.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver.actualObserver` @type ^`io.reactivex.b` := v1 @kind object;
  #L24acae.  v0.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver.next` @type ^`io.reactivex.c` := v2 @kind object;
  #L24acb2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$SourceObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L24acc4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24acca.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$SourceObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ac7c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24ac82.  v0:= temp @kind object;
  #L24ac84.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L24ac88.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L24ac8e.  v0:= temp;
  #L24ac90.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$SourceObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24acdc.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver.next` @type ^`io.reactivex.c` @kind object;
  #L24ace0.  v1:= new `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a`;
  #L24ace4.  v2:= v3.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver.actualObserver` @type ^`io.reactivex.b` @kind object;
  #L24ace8.  call `<init>`(v1, v3, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/b;)V` @kind direct;
  #L24acee.  call `b`(v0, v1) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L24acf4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$SourceObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ad08.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver.actualObserver` @type ^`io.reactivex.b` @kind object;
  #L24ad0c.  call `onError`(v0, v2) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24ad12.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$SourceObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L24ad24.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24ad2a.  v1:= temp;
  #L24ad2c.  if v1 == 0 then goto L24ad3a;
  #L24ad30.  v1:= v0.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$SourceObserver.actualObserver` @type ^`io.reactivex.b` @kind object;
  #L24ad34.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L24ad3a.  return @kind void;
}
