record `io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.b` @kind interface {
  `io.reactivex.b` `io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sd` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sources` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` v0 @kind this, `io.reactivex.b` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.<init>:(Lio/reactivex/b;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24b308.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L24b30e.  v0.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L24b312.  v0.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sources` @type ^`java.util.Iterator` := v2 @kind object;
  #L24b316.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L24b31a.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L24b320.  v0.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L24b324.  return @kind void;
}
procedure `void` `next`(`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.next:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L24b338.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L24b33c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L24b342.  v0:= temp;
  #L24b344.  if v0 == 0 then goto L24b34a;
  #L24b348.  return @kind void;
  #L24b34a.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L24b350.  v0:= temp;
  #L24b352.  if v0 == 0 then goto L24b358;
  #L24b356.  return @kind void;
  #L24b358.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sources` @type ^`java.util.Iterator` @kind object;
  #L24b35c.  v1:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L24b360.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L24b366.  v1:= temp;
  #L24b368.  if v1 == 0 then goto L24b36e;
  #L24b36c.  return @kind void;
  #L24b36e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L24b374.  v1:= temp;
  #L24b376.  if v1 != 0 then goto L24b386;
  #L24b37a.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24b37e.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24b384.  return @kind void;
  #L24b386.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L24b38c.  v1:= temp @kind object;
  #L24b38e.  v2:= "The CompletableSource returned is null" @kind object;
  #L24b392.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24b398.  v1:= temp @kind object;
  #L24b39a.  v1:= (`io.reactivex.c`) v1 @kind object;
  #L24b39e.  call `b`(v1, v3) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L24b3a4.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L24b3aa.  v1:= temp;
  #L24b3ac.  if v1 != 0 then goto L24b35c;
  #L24b3b0.  return @kind void;
  #L24b3b2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24b3b4.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24b3ba.  v1:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24b3be.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24b3c4.  return @kind void;
  #L24b3c6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24b3c8.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24b3ce.  v1:= v3.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24b3d2.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24b3d8.  return @kind void;
  catch `java.lang.Throwable` @[L24b36e..L24b376] goto L24b3c6;
  catch `java.lang.Throwable` @[L24b386..L24b39e] goto L24b3b2;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L24b404.  call `next`(v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.next:()V` @kind virtual;
  #L24b40a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24b41c.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24b420.  call `onError`(v0, v2) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24b426.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatIterable$ConcatInnerObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24b438.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L24b43c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L24b442.  return @kind void;
}
