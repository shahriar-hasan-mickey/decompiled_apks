record `io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.b` @kind interface {
  `io.reactivex.b` `io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.set` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver` v0 @kind this, `io.reactivex.b` v1 @kind object, `io.reactivex.disposables.a` v2 @kind object, `java.util.concurrent.atomic.AtomicInteger` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeIterable$MergeCompletableObserver;.<init>:(Lio/reactivex/b;Lio/reactivex/disposables/a;Ljava/util/concurrent/atomic/AtomicInteger;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24bec0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L24bec6.  v0.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L24beca.  v0.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.set` @type ^`io.reactivex.disposables.a` := v2 @kind object;
  #L24bece.  v0.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v3 @kind object;
  #L24bed2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeIterable$MergeCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24bee4.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24bee8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L24beee.  v0:= temp;
  #L24bef0.  if v0 != 0 then goto L24bf0e;
  #L24bef4.  v0:= 0I;
  #L24bef6.  v1:= 1I;
  #L24bef8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24befe.  v0:= temp;
  #L24bf00.  if v0 == 0 then goto L24bf0e;
  #L24bf04.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24bf08.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24bf0e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeIterable$MergeCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24bf20.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L24bf24.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L24bf2a.  v0:= 0I;
  #L24bf2c.  v1:= 1I;
  #L24bf2e.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24bf34.  v0:= temp;
  #L24bf36.  if v0 == 0 then goto L24bf46;
  #L24bf3a.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24bf3e.  call `onError`(v0, v3) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24bf44.  goto L24bf4c;
  #L24bf46.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24bf4c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeIterable$MergeCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24bf60.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L24bf64.  call temp:= `b`(v0, v2) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L24bf6a.  return @kind void;
}
