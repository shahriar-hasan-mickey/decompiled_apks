record `io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.b` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.b` `io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.error` @AccessFlag ;
  `io.reactivex.x` `io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.scheduler` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver` v0 @kind this, `io.reactivex.b` v1 @kind object, `io.reactivex.x` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableObserveOn$ObserveOnCompletableObserver;.<init>:(Lio/reactivex/b;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24bfa4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24bfaa.  v0.`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L24bfae.  v0.`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.scheduler` @type ^`io.reactivex.x` := v2 @kind object;
  #L24bfb2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableObserveOn$ObserveOnCompletableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L24bfc4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24bfca.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableObserveOn$ObserveOnCompletableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24bf7c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24bf82.  v0:= temp @kind object;
  #L24bf84.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L24bf88.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L24bf8e.  v0:= temp;
  #L24bf90.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableObserveOn$ObserveOnCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24bfdc.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L24bfe0.  call temp:= `c`(v0, v1) @signature `Lio/reactivex/x;.c:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L24bfe6.  v0:= temp @kind object;
  #L24bfe8.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24bfee.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableObserveOn$ObserveOnCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L24c000.  v0.`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L24c004.  v1:= v0.`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L24c008.  call temp:= `c`(v1, v0) @signature `Lio/reactivex/x;.c:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L24c00e.  v1:= temp @kind object;
  #L24c010.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24c016.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableObserveOn$ObserveOnCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L24c028.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24c02e.  v1:= temp;
  #L24c030.  if v1 == 0 then goto L24c03e;
  #L24c034.  v1:= v0.`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24c038.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L24c03e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableObserveOn$ObserveOnCompletableObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24c050.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L24c054.  if v0 == 0 then goto L24c06a;
  #L24c058.  v1:= 0I;
  #L24c05a.  v2.`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L24c05e.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24c062.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24c068.  goto L24c074;
  #L24c06a.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24c06e.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24c074.  return @kind void;
}
