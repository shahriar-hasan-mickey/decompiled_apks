record `io.reactivex.internal.operators.completable.b` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.a` @kind class {
  `io.reactivex.d0.a` `io.reactivex.internal.operators.completable.b.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.b` v0 @kind this, `io.reactivex.d0.a` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/b;.<init>:(Lio/reactivex/d0/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L24b8dc.  call `<init>`(v0) @signature `Lio/reactivex/a;.<init>:()V` @kind direct;
  #L24b8e2.  v0.`io.reactivex.internal.operators.completable.b.b` @type ^`io.reactivex.d0.a` := v1 @kind object;
  #L24b8e6.  return @kind void;
}
procedure `void` `n`(`io.reactivex.internal.operators.completable.b` v2 @kind this, `io.reactivex.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/b;.n:(Lio/reactivex/b;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L24b8f8.  call temp:= `b`() @signature `Lio/reactivex/disposables/c;.b:()Lio/reactivex/disposables/b;` @kind static;
  #L24b8fe.  v0:= temp @kind object;
  #L24b900.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L24b906.  v1:= v2.`io.reactivex.internal.operators.completable.b.b` @type ^`io.reactivex.d0.a` @kind object;
  #L24b90a.  call `run`(v1) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L24b910.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L24b916.  v0:= temp;
  #L24b918.  if v0 != 0 then goto L24b922;
  #L24b91c.  call `onComplete`(v3) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24b922.  return @kind void;
  #L24b924.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24b926.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24b92c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L24b932.  v0:= temp;
  #L24b934.  if v0 != 0 then goto L24b93e;
  #L24b938.  call `onError`(v3, v1) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24b93e.  return @kind void;
  catch `java.lang.Throwable` @[L24b906..L24b910] goto L24b924;
}
