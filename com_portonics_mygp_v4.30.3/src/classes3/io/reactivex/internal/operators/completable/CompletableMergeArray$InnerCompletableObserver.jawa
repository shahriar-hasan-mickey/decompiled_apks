record `io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.b` @kind interface {
  `io.reactivex.b` `io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.once` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.set` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver` v0 @kind this, `io.reactivex.b` v1 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v2 @kind object, `io.reactivex.disposables.a` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$InnerCompletableObserver;.<init>:(Lio/reactivex/b;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/disposables/a;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24bdf8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L24bdfe.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L24be02.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L24be06.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.set` @type ^`io.reactivex.disposables.a` := v3 @kind object;
  #L24be0a.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L24be10.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$InnerCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24be24.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L24be2a.  v0:= temp;
  #L24be2c.  if v0 != 0 then goto L24be4e;
  #L24be30.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24be34.  v1:= 0I;
  #L24be36.  v2:= 1I;
  #L24be38.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24be3e.  v0:= temp;
  #L24be40.  if v0 == 0 then goto L24be4e;
  #L24be44.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24be48.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24be4e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$InnerCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24be60.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L24be64.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L24be6a.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24be6e.  v1:= 0I;
  #L24be70.  v2:= 1I;
  #L24be72.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24be78.  v0:= temp;
  #L24be7a.  if v0 == 0 then goto L24be8a;
  #L24be7e.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L24be82.  call `onError`(v0, v4) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24be88.  goto L24be90;
  #L24be8a.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24be90.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$InnerCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24bea4.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L24bea8.  call temp:= `b`(v0, v2) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L24beae.  return @kind void;
}
