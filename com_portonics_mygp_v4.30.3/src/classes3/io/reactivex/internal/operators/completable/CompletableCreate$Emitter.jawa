record `io.reactivex.internal.operators.completable.CompletableCreate$Emitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.b` `io.reactivex.internal.operators.completable.CompletableCreate$Emitter.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableCreate$Emitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableCreate$Emitter` v0 @kind this, `io.reactivex.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$Emitter;.<init>:(Lio/reactivex/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24b538.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24b53e.  v0.`io.reactivex.internal.operators.completable.CompletableCreate$Emitter.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L24b542.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableCreate$Emitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$Emitter;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L24b554.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24b55a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableCreate$Emitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$Emitter;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24b454.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24b45a.  v0:= temp @kind object;
  #L24b45c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L24b460.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L24b466.  v0:= temp;
  #L24b468.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableCreate$Emitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$Emitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b56c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24b572.  v0:= temp @kind object;
  #L24b574.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L24b578.  if v0 == v1 then goto L24b5b0;
  #L24b57c.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24b582.  v0:= temp @kind object;
  #L24b584.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L24b588.  if v0 == v1 then goto L24b5b0;
  #L24b58c.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableCreate$Emitter.downstream` @type ^`io.reactivex.b` @kind object;
  #L24b590.  call `onComplete`(v1) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L24b596.  if v0 == 0 then goto L24b5b0;
  #L24b59a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24b5a0.  goto L24b5b0;
  #L24b5a2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24b5a4.  if v0 == 0 then goto L24b5ae;
  #L24b5a8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24b5ae.  throw v1;
  #L24b5b0.  return @kind void;
  catch `java.lang.Throwable` @[L24b58c..L24b596] goto L24b5a2;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableCreate$Emitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$Emitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24b5d0.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$Emitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24b5d6.  v0:= temp;
  #L24b5d8.  if v0 != 0 then goto L24b5e2;
  #L24b5dc.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24b5e2.  return @kind void;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.completable.CompletableCreate$Emitter` v1 @kind this, `io.reactivex.d0.f` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$Emitter;.setCancellable:(Lio/reactivex/d0/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24b5f4.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L24b5f8.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/d0/f;)V` @kind direct;
  #L24b5fe.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$Emitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @kind virtual;
  #L24b604.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.completable.CompletableCreate$Emitter` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$Emitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L24b618.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24b61e.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.completable.CompletableCreate$Emitter` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$Emitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24b4f4.  v0:= 2I;
  #L24b4f6.  v0:= new `java.lang.Object`[v0];
  #L24b4fa.  v1:= constclass @type ^`io.reactivex.internal.operators.completable.CompletableCreate$Emitter` @kind object;
  #L24b4fe.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L24b504.  v1:= temp @kind object;
  #L24b506.  v2:= 0I;
  #L24b508.  v0[v2]:= v1 @kind object;
  #L24b50c.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L24b512.  v1:= temp @kind object;
  #L24b514.  v2:= 1I;
  #L24b516.  v0[v2]:= v1 @kind object;
  #L24b51a.  v1:= "%s{%s}" @kind object;
  #L24b51e.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L24b524.  v0:= temp @kind object;
  #L24b526.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.completable.CompletableCreate$Emitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$Emitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b47c.  if v3 != 0 then goto L24b48e;
  #L24b480.  v3:= new `java.lang.NullPointerException`;
  #L24b484.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L24b488.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b48e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24b494.  v0:= temp @kind object;
  #L24b496.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L24b49a.  if v0 == v1 then goto L24b4d4;
  #L24b49e.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24b4a4.  v0:= temp @kind object;
  #L24b4a6.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L24b4aa.  if v0 == v1 then goto L24b4d4;
  #L24b4ae.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableCreate$Emitter.downstream` @type ^`io.reactivex.b` @kind object;
  #L24b4b2.  call `onError`(v1, v3) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24b4b8.  if v0 == 0 then goto L24b4c2;
  #L24b4bc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24b4c2.  v3:= 1I;
  #L24b4c4.  return v3;
  #L24b4c6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24b4c8.  if v0 == 0 then goto L24b4d2;
  #L24b4cc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24b4d2.  throw v3;
  #L24b4d4.  v3:= 0I;
  #L24b4d6.  return v3;
  catch `java.lang.Throwable` @[L24b4ae..L24b4b8] goto L24b4c6;
}
