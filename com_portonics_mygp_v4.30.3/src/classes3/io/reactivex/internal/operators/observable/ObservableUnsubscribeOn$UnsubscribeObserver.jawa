record `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.scheduler` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.x` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L282658.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L28265e.  v0.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L282662.  v0.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.scheduler` @type ^`io.reactivex.x` := v2 @kind object;
  #L282666.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L282678.  v0:= 0I;
  #L28267a.  v1:= 1I;
  #L28267c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L282682.  v0:= temp;
  #L282684.  if v0 == 0 then goto L28269c;
  #L282688.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L28268c.  v1:= new `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver$a`;
  #L282690.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;)V` @kind direct;
  #L282696.  call temp:= `c`(v0, v1) @signature `Lio/reactivex/x;.c:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L28269c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28263c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L282642.  v0:= temp;
  #L282644.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2826b0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L2826b6.  v0:= temp;
  #L2826b8.  if v0 != 0 then goto L2826c6;
  #L2826bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2826c0.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2826c6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2826d8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L2826de.  v0:= temp;
  #L2826e0.  if v0 == 0 then goto L2826ec;
  #L2826e4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2826ea.  return @kind void;
  #L2826ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2826f0.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2826f6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282708.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L28270e.  v0:= temp;
  #L282710.  if v0 != 0 then goto L28271e;
  #L282714.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282718.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L28271e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282730.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L282734.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28273a.  v0:= temp;
  #L28273c.  if v0 == 0 then goto L28274e;
  #L282740.  v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L282744.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282748.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L28274e.  return @kind void;
}
