record `io.reactivex.internal.operators.observable.h2` @kind class @AccessFlag FINAL extends `io.reactivex.d0.g` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.h2.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.h2` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/h2;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L277e50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L277e56.  v0.`io.reactivex.internal.operators.observable.h2.b` @type ^`io.reactivex.t` := v1 @kind object;
  #L277e5a.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.h2` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/h2;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L277e6c.  v0:= v1.`io.reactivex.internal.operators.observable.h2.b` @type ^`io.reactivex.t` @kind object;
  #L277e70.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L277e76.  return @kind void;
}
