record `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.e0.a.e` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @AccessFlag FINAL;
}
global `int` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.FUSED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.ON_COMPLETE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.ON_NEXT` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.START` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `io.reactivex.t` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.<init>:(Lio/reactivex/t;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L27dd14.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27dd1a.  v0.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @type ^`io.reactivex.t` := v1 @kind object;
  #L27dd1e.  v0.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @type ^`java.lang.Object` := v2 @kind object;
  #L27dd22.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27dd34.  v0:= 3I;
  #L27dd36.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L27dd3c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27dd50.  v0:= 3I;
  #L27dd52.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L27dd58.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27dc34.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27dc3a.  v0:= temp;
  #L27dc3c.  v1:= 3I;
  #L27dc3e.  if v0 != v1 then goto L27dc46;
  #L27dc42.  v0:= 1I;
  #L27dc44.  goto L27dc48;
  #L27dc46.  v0:= 0I;
  #L27dc48.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27dc5c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27dc62.  v0:= temp;
  #L27dc64.  v1:= 1I;
  #L27dc66.  if v0 == v1 then goto L27dc6c;
  #L27dc6a.  goto L27dc6e;
  #L27dc6c.  v1:= 0I;
  #L27dc6e.  return v1;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27dc80.  v2:= new `java.lang.UnsupportedOperationException`;
  #L27dc84.  v0:= "Should not be called!" @kind object;
  #L27dc88.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27dc8e.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L27dca0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L27dca4.  v2:= "Should not be called!" @kind object;
  #L27dca8.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27dcae.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27dce4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27dcea.  v0:= temp;
  #L27dcec.  v1:= 1I;
  #L27dcee.  if v0 != v1 then goto L27dd00;
  #L27dcf2.  v0:= 3I;
  #L27dcf4.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L27dcfa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L27dcfe.  return v0 @kind object;
  #L27dd00.  v0:= 0I;
  #L27dd02.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27dcc0.  v0:= 1I;
  #L27dcc2.  v2:= v2 ^& v0 @kind int;
  #L27dcc4.  if v2 == 0 then goto L27dcd0;
  #L27dcc8.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L27dcce.  return v0;
  #L27dcd0.  v2:= 0I;
  #L27dcd2.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27dd6c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27dd72.  v0:= temp;
  #L27dd74.  if v0 != 0 then goto L27ddb4;
  #L27dd78.  v0:= 0I;
  #L27dd7a.  v1:= 2I;
  #L27dd7c.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L27dd82.  v0:= temp;
  #L27dd84.  if v0 == 0 then goto L27ddb4;
  #L27dd88.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @type ^`io.reactivex.t` @kind object;
  #L27dd8c.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L27dd90.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27dd96.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27dd9c.  v0:= temp;
  #L27dd9e.  if v0 != v1 then goto L27ddb4;
  #L27dda2.  v0:= 3I;
  #L27dda4.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L27ddaa.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @type ^`io.reactivex.t` @kind object;
  #L27ddae.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27ddb4.  return @kind void;
}
