record `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L270e8c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L270e92.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L270e96.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` := v2 @kind object;
  #L270e9a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.dispose:()V` @AccessFlag  {
    temp;

  #L270eac.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L270eb2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270ec4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` @kind object;
  #L270ec8.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.innerComplete:()V` @kind virtual;
  #L270ece.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270ee0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` @kind object;
  #L270ee4.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.dispose:()V` @kind virtual;
  #L270eea.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L270eee.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L270ef4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270f08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L270f0c.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L270f12.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L270f24.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L270f2a.  return @kind void;
}
