record `io.reactivex.internal.operators.observable.ObservableGroupBy$State` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface, `io.reactivex.r` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.error` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.key` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.once` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.parent` @AccessFlag FINAL;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$State.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v1 @kind this, `int` v2 , `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.<init>:(ILio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L276bec.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L276bf2.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L276bf6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L276bfc.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L276c00.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L276c04.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L276c0a.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L276c0e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L276c12.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L276c18.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L276c1c.  v0:= new `io.reactivex.internal.queue.a`;
  #L276c20.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L276c26.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` := v0 @kind object;
  #L276c2a.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` := v3 @kind object;
  #L276c2e.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.key` @type ^`java.lang.Object` := v4 @kind object;
  #L276c32.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.delayError` @type ^`boolean` := v5 @kind boolean;
  #L276c36.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v3 @kind this, `boolean` v4 , `boolean` v5 , `io.reactivex.t` v6 @kind object, `boolean` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.checkTerminated:(ZZLio/reactivex/t;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L276b18.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L276b1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L276b22.  v0:= temp;
  #L276b24.  v1:= 1I;
  #L276b26.  v2:= 0I;
  #L276b28.  if v0 == 0 then goto L276b50;
  #L276b2c.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L276b30.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L276b36.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind object;
  #L276b3a.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.key` @type ^`java.lang.Object` @kind object;
  #L276b3e.  call `cancel`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L276b44.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L276b48.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L276b4e.  return v1;
  #L276b50.  if v4 == 0 then goto L276bb8;
  #L276b54.  if v7 == 0 then goto L276b7e;
  #L276b58.  if v5 == 0 then goto L276bb8;
  #L276b5c.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L276b60.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L276b64.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L276b6a.  if v4 == 0 then goto L276b76;
  #L276b6e.  call `onError`(v6, v4) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L276b74.  goto L276b7c;
  #L276b76.  call `onComplete`(v6) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L276b7c.  return v1;
  #L276b7e.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L276b82.  if v4 == 0 then goto L276ba2;
  #L276b86.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L276b8a.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L276b90.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L276b94.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L276b9a.  call `onError`(v6, v4) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L276ba0.  return v1;
  #L276ba2.  if v5 == 0 then goto L276bb8;
  #L276ba6.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L276baa.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L276bb0.  call `onComplete`(v6) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L276bb6.  return v1;
  #L276bb8.  v4:= 0I;
  #L276bba.  return v4;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L276c48.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L276c4c.  v1:= 0I;
  #L276c4e.  v2:= 1I;
  #L276c50.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L276c56.  v0:= temp;
  #L276c58.  if v0 == 0 then goto L276c82;
  #L276c5c.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L276c62.  v0:= temp;
  #L276c64.  if v0 != 0 then goto L276c82;
  #L276c68.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L276c6c.  v1:= 0I;
  #L276c6e.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L276c74.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind object;
  #L276c78.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.key` @type ^`java.lang.Object` @kind object;
  #L276c7c.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L276c82.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L276c94.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L276c9a.  v0:= temp;
  #L276c9c.  if v0 == 0 then goto L276ca2;
  #L276ca0.  return @kind void;
  #L276ca2.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L276ca6.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.delayError` @type ^`boolean` @kind boolean;
  #L276caa.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L276cae.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L276cb4.  v2:= temp @kind object;
  #L276cb6.  v2:= (`io.reactivex.t`) v2 @kind object;
  #L276cba.  v3:= 1I;
  #L276cbc.  v4:= 1I;
  #L276cbe.  if v2 == 0 then goto L276cf4;
  #L276cc2.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.done` @type ^`boolean` @kind boolean;
  #L276cc6.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L276ccc.  v6:= temp @kind object;
  #L276cce.  if v6 != 0 then goto L276cd6;
  #L276cd2.  v7:= 1I;
  #L276cd4.  goto L276cd8;
  #L276cd6.  v7:= 0I;
  #L276cd8.  call temp:= `checkTerminated`(v8, v5, v7, v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.checkTerminated:(ZZLio/reactivex/t;Z)Z` @kind virtual;
  #L276cde.  v5:= temp;
  #L276ce0.  if v5 == 0 then goto L276ce6;
  #L276ce4.  return @kind void;
  #L276ce6.  if v7 == 0 then goto L276cec;
  #L276cea.  goto L276cf4;
  #L276cec.  call `onNext`(v2, v6) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L276cf2.  goto L276cc2;
  #L276cf4.  v4:= -v4 @kind int;
  #L276cf6.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L276cfc.  v4:= temp;
  #L276cfe.  if v4 != 0 then goto L276d04;
  #L276d02.  return @kind void;
  #L276d04.  if v2 != 0 then goto L276cbe;
  #L276d08.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L276d0c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L276d12.  v2:= temp @kind object;
  #L276d14.  v2:= (`io.reactivex.t`) v2 @kind object;
  #L276d18.  goto L276cbe;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L276bcc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L276bd0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L276bd6.  v0:= temp;
  #L276bd8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L276d2c.  v0:= 1I;
  #L276d2e.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.done` @type ^`boolean` := v0 @kind boolean;
  #L276d32.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.drain:()V` @kind virtual;
  #L276d38.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L276d4c.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L276d50.  v1:= 1I;
  #L276d52.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.done` @type ^`boolean` := v1 @kind boolean;
  #L276d56.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.drain:()V` @kind virtual;
  #L276d5c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L276d70.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L276d74.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L276d7a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.drain:()V` @kind virtual;
  #L276d80.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableGroupBy$State` v3 @kind this, `io.reactivex.t` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.subscribe:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L276d94.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L276d98.  v1:= 0I;
  #L276d9a.  v2:= 1I;
  #L276d9c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L276da2.  v0:= temp;
  #L276da4.  if v0 == 0 then goto L276dde;
  #L276da8.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L276dae.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L276db2.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L276db8.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L276dbc.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L276dc2.  v4:= temp;
  #L276dc4.  if v4 == 0 then goto L276dd6;
  #L276dc8.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L276dcc.  v0:= 0I;
  #L276dce.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L276dd4.  goto L276df2;
  #L276dd6.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$State;.drain:()V` @kind virtual;
  #L276ddc.  goto L276df2;
  #L276dde.  v0:= new `java.lang.IllegalStateException`;
  #L276de2.  v1:= "Only one Observer allowed!" @kind object;
  #L276de6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L276dec.  call `error`(v0, v4) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/t;)V` @kind static;
  #L276df2.  return @kind void;
}
