record `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.child` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27a4f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27a4f6.  v0.`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.child` @type ^`io.reactivex.t` := v1 @kind object;
  #L27a4fa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27a50c.  call temp:= `getAndSet`(v1, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27a512.  v0:= temp @kind object;
  #L27a514.  if v0 == 0 then goto L27a526;
  #L27a518.  if v0 == v1 then goto L27a526;
  #L27a51c.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`) v0 @kind object;
  #L27a520.  call `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.b:(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;)V` @kind virtual;
  #L27a526.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27a4cc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27a4d2.  v0:= temp @kind object;
  #L27a4d4.  if v0 != v1 then goto L27a4dc;
  #L27a4d8.  v0:= 1I;
  #L27a4da.  goto L27a4de;
  #L27a4dc.  v0:= 0I;
  #L27a4de.  return v0;
}
procedure `void` `setParent`(`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v1 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.setParent:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)V` @AccessFlag  {
    temp;
    v0;

  #L27a538.  v0:= 0I;
  #L27a53a.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27a540.  v0:= temp;
  #L27a542.  if v0 != 0 then goto L27a54c;
  #L27a546.  call `b`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.b:(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;)V` @kind virtual;
  #L27a54c.  return @kind void;
}
