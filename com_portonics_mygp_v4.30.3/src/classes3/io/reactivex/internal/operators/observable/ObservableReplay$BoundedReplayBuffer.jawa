record `io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.internal.operators.observable.ObservableReplay$a` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableReplay$Node` `io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L27bed4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27beda.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$Node`;
  #L27bede.  v1:= 0I;
  #L27bee0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L27bee6.  v2.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` := v0 @kind object;
  #L27beea.  call `set`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L27bef0.  return @kind void;
}
procedure `void` `addLast`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$Node` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @AccessFlag FINAL {
    temp;
    v0;

  #L27bf04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` @kind object;
  #L27bf08.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L27bf0e.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` := v2 @kind object;
  #L27bf12.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L27bf16.  v2:= v2 + 1;
  #L27bf1a.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int` := v2;
  #L27bf1e.  return @kind void;
}
procedure `void` `collect`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.collect:(Ljava/util/Collection;)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L27bf30.  call temp:= `getHead`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/observable/ObservableReplay$Node;` @kind virtual;
  #L27bf36.  v0:= temp @kind object;
  #L27bf38.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27bf3e.  v0:= temp @kind object;
  #L27bf40.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L27bf44.  if v0 == 0 then goto L27bf7e;
  #L27bf48.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L27bf4c.  call temp:= `leaveTransform`(v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27bf52.  v1:= temp @kind object;
  #L27bf54.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L27bf5a.  v2:= temp;
  #L27bf5c.  if v2 != 0 then goto L27bf7e;
  #L27bf60.  call temp:= `isError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L27bf66.  v2:= temp;
  #L27bf68.  if v2 == 0 then goto L27bf6e;
  #L27bf6c.  goto L27bf7e;
  #L27bf6e.  call temp:= `getValue`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L27bf74.  v1:= temp @kind object;
  #L27bf76.  call temp:= `add`(v4, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L27bf7c.  goto L27bf38;
  #L27bf7e.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L27bf90.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L27bf96.  v0:= temp @kind object;
  #L27bf98.  call temp:= `enterTransform`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27bf9e.  v0:= temp @kind object;
  #L27bfa0.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$Node`;
  #L27bfa4.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L27bfaa.  call `addLast`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L27bfb0.  call `truncateFinal`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.truncateFinal:()V` @kind virtual;
  #L27bfb6.  return @kind void;
}
procedure `java.lang.Object` `enterTransform`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L27beac.  return v1 @kind object;
}
procedure `void` `error`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27bfc8.  call temp:= `error`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L27bfce.  v2:= temp @kind object;
  #L27bfd0.  call temp:= `enterTransform`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27bfd6.  v2:= temp @kind object;
  #L27bfd8.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$Node`;
  #L27bfdc.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L27bfe2.  call `addLast`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L27bfe8.  call `truncateFinal`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.truncateFinal:()V` @kind virtual;
  #L27bfee.  return @kind void;
}
procedure `io.reactivex.internal.operators.observable.ObservableReplay$Node` `getHead`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/observable/ObservableReplay$Node;` @AccessFlag  {
    temp;
    v0;

  #L27be8c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27be92.  v0:= temp @kind object;
  #L27be94.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L27be98.  return v0 @kind object;
}
procedure `boolean` `hasCompleted`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.hasCompleted:()Z` @AccessFlag  {
    temp;
    v0;

  #L27be1c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` @kind object;
  #L27be20.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L27be24.  if v0 == 0 then goto L27be40;
  #L27be28.  call temp:= `leaveTransform`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27be2e.  v0:= temp @kind object;
  #L27be30.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L27be36.  v0:= temp;
  #L27be38.  if v0 == 0 then goto L27be40;
  #L27be3c.  v0:= 1I;
  #L27be3e.  goto L27be42;
  #L27be40.  v0:= 0I;
  #L27be42.  return v0;
}
procedure `boolean` `hasError`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.hasError:()Z` @AccessFlag  {
    temp;
    v0;

  #L27be54.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$Node` @kind object;
  #L27be58.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L27be5c.  if v0 == 0 then goto L27be78;
  #L27be60.  call temp:= `leaveTransform`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27be66.  v0:= temp @kind object;
  #L27be68.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L27be6e.  v0:= temp;
  #L27be70.  if v0 == 0 then goto L27be78;
  #L27be74.  v0:= 1I;
  #L27be76.  goto L27be7a;
  #L27be78.  v0:= 0I;
  #L27be7a.  return v0;
}
procedure `java.lang.Object` `leaveTransform`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L27bec0.  return v1 @kind object;
}
procedure `void` `next`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27c000.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L27c006.  v2:= temp @kind object;
  #L27c008.  call temp:= `enterTransform`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27c00e.  v2:= temp @kind object;
  #L27c010.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$Node`;
  #L27c014.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L27c01a.  call `addLast`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L27c020.  call `truncate`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.truncate:()V` @kind virtual;
  #L27c026.  return @kind void;
}
procedure `void` `removeFirst`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.removeFirst:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L27c038.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c03e.  v0:= temp @kind object;
  #L27c040.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L27c044.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c04a.  v0:= temp @kind object;
  #L27c04c.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L27c050.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L27c054.  v1:= v1 + -1;
  #L27c058.  v2.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int` := v1;
  #L27c05c.  call `setFirst`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L27c062.  return @kind void;
}
procedure `void` `removeSome`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.removeSome:(I)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L27c074.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c07a.  v0:= temp @kind object;
  #L27c07c.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L27c080.  if v3 <= 0 then goto L27c0a2;
  #L27c084.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c08a.  v0:= temp @kind object;
  #L27c08c.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L27c090.  v3:= v3 + -1;
  #L27c094.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L27c098.  v1:= v1 + -1;
  #L27c09c.  v2.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int` := v1;
  #L27c0a0.  goto L27c080;
  #L27c0a2.  call `setFirst`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L27c0a8.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.replay:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27c0bc.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27c0c2.  v0:= temp;
  #L27c0c4.  if v0 == 0 then goto L27c0ca;
  #L27c0c8.  return @kind void;
  #L27c0ca.  v0:= 1I;
  #L27c0cc.  call temp:= `index`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.index:()Ljava/lang/Object;` @kind virtual;
  #L27c0d2.  v1:= temp @kind object;
  #L27c0d4.  v1:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v1 @kind object;
  #L27c0d8.  if v1 != 0 then goto L27c0e8;
  #L27c0dc.  call temp:= `getHead`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/observable/ObservableReplay$Node;` @kind virtual;
  #L27c0e2.  v1:= temp @kind object;
  #L27c0e4.  v6.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @type ^`java.lang.Object` := v1 @kind object;
  #L27c0e8.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.isDisposed:()Z` @kind virtual;
  #L27c0ee.  v2:= temp;
  #L27c0f0.  v3:= 0I;
  #L27c0f2.  if v2 == 0 then goto L27c0fc;
  #L27c0f6.  v6.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @type ^`java.lang.Object` := v3 @kind object;
  #L27c0fa.  return @kind void;
  #L27c0fc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c102.  v2:= temp @kind object;
  #L27c104.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v2 @kind object;
  #L27c108.  if v2 == 0 then goto L27c132;
  #L27c10c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L27c110.  call temp:= `leaveTransform`(v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27c116.  v1:= temp @kind object;
  #L27c118.  v4:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.child` @type ^`io.reactivex.t` @kind object;
  #L27c11c.  call temp:= `accept`(v1, v4) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/t;)Z` @kind static;
  #L27c122.  v1:= temp;
  #L27c124.  if v1 == 0 then goto L27c12e;
  #L27c128.  v6.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @type ^`java.lang.Object` := v3 @kind object;
  #L27c12c.  return @kind void;
  #L27c12e.  v1:= v2 @kind object;
  #L27c130.  goto L27c0e8;
  #L27c132.  v6.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @type ^`java.lang.Object` := v1 @kind object;
  #L27c136.  v0:= -v0 @kind int;
  #L27c138.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27c13e.  v0:= temp;
  #L27c140.  if v0 != 0 then goto L27c0cc;
  #L27c144.  return @kind void;
}
procedure `void` `setFirst`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$Node` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @AccessFlag FINAL {
    temp;

  #L27c158.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L27c15e.  return @kind void;
}
procedure `void` `trimHead`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.trimHead:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L27c170.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c176.  v0:= temp @kind object;
  #L27c178.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v0 @kind object;
  #L27c17c.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L27c180.  if v1 == 0 then goto L27c1a4;
  #L27c184.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$Node`;
  #L27c188.  v2:= 0I;
  #L27c18a.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$Node;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L27c190.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c196.  v0:= temp @kind object;
  #L27c198.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L27c19e.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L27c1a4.  return @kind void;
}
procedure `void` `truncate`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.truncate:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `truncateFinal`(`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.truncateFinal:()V` @AccessFlag  {
    temp;

  #L27c1b8.  call `trimHead`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.trimHead:()V` @kind virtual;
  #L27c1be.  return @kind void;
}
