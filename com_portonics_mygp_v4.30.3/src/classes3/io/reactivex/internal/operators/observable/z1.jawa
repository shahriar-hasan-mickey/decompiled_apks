record `io.reactivex.internal.operators.observable.z1` @kind class @AccessFlag FINAL extends `java.util.concurrent.Callable` @kind interface {
  `io.reactivex.n` `io.reactivex.internal.operators.observable.z1.b` @AccessFlag PRIVATE_FINAL;
  `int` `io.reactivex.internal.operators.observable.z1.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.z1` v0 @kind this, `io.reactivex.n` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/z1;.<init>:(Lio/reactivex/n;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L277ab8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L277abe.  v0.`io.reactivex.internal.operators.observable.z1.b` @type ^`io.reactivex.n` := v1 @kind object;
  #L277ac2.  v0.`io.reactivex.internal.operators.observable.z1.c` @type ^`int` := v2;
  #L277ac6.  return @kind void;
}
procedure `io.reactivex.f0.a` `a`(`io.reactivex.internal.operators.observable.z1` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/z1;.a:()Lio/reactivex/f0/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L277a78.  v0:= v2.`io.reactivex.internal.operators.observable.z1.b` @type ^`io.reactivex.n` @kind object;
  #L277a7c.  v1:= v2.`io.reactivex.internal.operators.observable.z1.c` @type ^`int`;
  #L277a80.  call temp:= `replay`(v0, v1) @signature `Lio/reactivex/n;.replay:(I)Lio/reactivex/f0/a;` @kind virtual;
  #L277a86.  v0:= temp @kind object;
  #L277a88.  return v0 @kind object;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.observable.z1` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/z1;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L277a9c.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/operators/observable/z1;.a:()Lio/reactivex/f0/a;` @kind virtual;
  #L277aa2.  v0:= temp @kind object;
  #L277aa4.  return v0 @kind object;
}
