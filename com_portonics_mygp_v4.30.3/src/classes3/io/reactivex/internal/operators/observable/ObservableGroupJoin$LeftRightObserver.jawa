record `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.isLeft` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableGroupJoin$a` `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2775e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2775ee.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` := v1 @kind object;
  #L2775f2.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.isLeft` @type ^`boolean` := v2 @kind boolean;
  #L2775f6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L277608.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27760e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2775c0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2775c6.  v0:= temp @kind object;
  #L2775c8.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2775cc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2775d2.  v0:= temp;
  #L2775d4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L277620.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` @kind object;
  #L277624.  call `innerComplete`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.innerComplete:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;)V` @kind interface;
  #L27762a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27763c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` @kind object;
  #L277640.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.innerError:(Ljava/lang/Throwable;)V` @kind interface;
  #L277646.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L277658.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` @kind object;
  #L27765c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver.isLeft` @type ^`boolean` @kind boolean;
  #L277660.  call `innerValue`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.innerValue:(ZLjava/lang/Object;)V` @kind interface;
  #L277666.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L277678.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27767e.  return @kind void;
}
