record `io.reactivex.internal.operators.observable.z` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.j` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.z.h` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.z.i` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.z.j` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.internal.operators.observable.z.k` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.z.l` @AccessFlag ;
  `java.util.Collection` `io.reactivex.internal.operators.observable.z.m` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.z.n` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.z` v1 @kind this, `io.reactivex.t` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.x` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/z;.<init>:(Lio/reactivex/t;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L26f468.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L26f46c.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L26f472.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/j;.<init>:(Lio/reactivex/t;Lio/reactivex/e0/a/i;)V` @kind direct;
  #L26f478.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L26f47c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26f482.  v1.`io.reactivex.internal.operators.observable.z.n` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L26f486.  v1.`io.reactivex.internal.operators.observable.z.h` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L26f48a.  v1.`io.reactivex.internal.operators.observable.z.i` @type ^`long` := v4 @kind wide;
  #L26f48e.  v1.`io.reactivex.internal.operators.observable.z.j` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L26f492.  v1.`io.reactivex.internal.operators.observable.z.k` @type ^`io.reactivex.x` := v7 @kind object;
  #L26f496.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.z` v0 @kind this, `io.reactivex.t` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/z;.c:(Lio/reactivex/t;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L26f4a8.  v2:= (`java.util.Collection`) v2 @kind object;
  #L26f4ac.  call `i`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/z;.i:(Lio/reactivex/t;Ljava/util/Collection;)V` @kind virtual;
  #L26f4b2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.z` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/z;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26f4e0.  v0:= v1.`io.reactivex.internal.operators.observable.z.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26f4e4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26f4ea.  v0:= v1.`io.reactivex.internal.operators.observable.z.l` @type ^`io.reactivex.disposables.b` @kind object;
  #L26f4ee.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26f4f4.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.observable.z` v0 @kind this, `io.reactivex.t` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/z;.i:(Lio/reactivex/t;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L26f4c4.  v1:= v0.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L26f4c8.  call `onNext`(v1, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26f4ce.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.z` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/z;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26f43c.  v0:= v2.`io.reactivex.internal.operators.observable.z.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26f440.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26f446.  v0:= temp @kind object;
  #L26f448.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L26f44c.  if v0 != v1 then goto L26f454;
  #L26f450.  v0:= 1I;
  #L26f452.  goto L26f456;
  #L26f454.  v0:= 0I;
  #L26f456.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.z` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/z;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L26f508.  @monitorenter v4
  #L26f50a.  v0:= v4.`io.reactivex.internal.operators.observable.z.m` @type ^`java.util.Collection` @kind object;
  #L26f50e.  v1:= 0I;
  #L26f510.  v4.`io.reactivex.internal.operators.observable.z.m` @type ^`java.util.Collection` := v1 @kind object;
  #L26f514.  @monitorexit v4
  #L26f516.  if v0 == 0 then goto L26f546;
  #L26f51a.  v2:= v4.`io.reactivex.internal.observers.j.d` @type ^`io.reactivex.e0.a.i` @kind object;
  #L26f51e.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L26f524.  v0:= 1I;
  #L26f526.  v4.`io.reactivex.internal.observers.j.f` @type ^`boolean` := v0 @kind boolean;
  #L26f52a.  call temp:= `e`(v4) @signature `Lio/reactivex/internal/observers/j;.e:()Z` @kind virtual;
  #L26f530.  v0:= temp;
  #L26f532.  if v0 == 0 then goto L26f546;
  #L26f536.  v0:= v4.`io.reactivex.internal.observers.j.d` @type ^`io.reactivex.e0.a.i` @kind object;
  #L26f53a.  v2:= v4.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L26f53e.  v3:= 0I;
  #L26f540.  call `c`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/util/k;.c:(Lio/reactivex/e0/a/i;Lio/reactivex/t;ZLio/reactivex/disposables/b;Lio/reactivex/internal/util/h;)V` @kind static;
  #L26f546.  v0:= v4.`io.reactivex.internal.operators.observable.z.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26f54a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26f550.  return @kind void;
  #L26f552.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26f554.  @monitorexit v4
  #L26f556.  throw v0;
  catch `java.lang.Throwable` @[L26f50a..L26f516] goto L26f552;
  catch `java.lang.Throwable` @[L26f554..L26f556] goto L26f552;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.z` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/z;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26f57c.  @monitorenter v1
  #L26f57e.  v0:= 0I;
  #L26f580.  v1.`io.reactivex.internal.operators.observable.z.m` @type ^`java.util.Collection` := v0 @kind object;
  #L26f584.  @monitorexit v1
  #L26f586.  v0:= v1.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L26f58a.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26f590.  v2:= v1.`io.reactivex.internal.operators.observable.z.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26f594.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26f59a.  return @kind void;
  #L26f59c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26f59e.  @monitorexit v1
  #L26f5a0.  throw v2;
  catch `java.lang.Throwable` @[L26f580..L26f586] goto L26f59c;
  catch `java.lang.Throwable` @[L26f59e..L26f5a0] goto L26f59c;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.z` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/z;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26f5c8.  @monitorenter v1
  #L26f5ca.  v0:= v1.`io.reactivex.internal.operators.observable.z.m` @type ^`java.util.Collection` @kind object;
  #L26f5ce.  if v0 != 0 then goto L26f5d6;
  #L26f5d2.  @monitorexit v1
  #L26f5d4.  return @kind void;
  #L26f5d6.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L26f5dc.  @monitorexit v1
  #L26f5de.  return @kind void;
  #L26f5e0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26f5e2.  @monitorexit v1
  #L26f5e4.  throw v2;
  catch `java.lang.Throwable` @[L26f5ca..L26f5e4] goto L26f5e0;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.z` v7 @kind this, `io.reactivex.disposables.b` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/z;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L26f604.  v0:= v7.`io.reactivex.internal.operators.observable.z.l` @type ^`io.reactivex.disposables.b` @kind object;
  #L26f608.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26f60e.  v0:= temp;
  #L26f610.  if v0 == 0 then goto L26f694;
  #L26f614.  v7.`io.reactivex.internal.operators.observable.z.l` @type ^`io.reactivex.disposables.b` := v8 @kind object;
  #L26f618.  v8:= v7.`io.reactivex.internal.operators.observable.z.h` @type ^`java.util.concurrent.Callable` @kind object;
  #L26f61c.  call temp:= `call`(v8) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L26f622.  v8:= temp @kind object;
  #L26f624.  v0:= "The buffer supplied is null" @kind object;
  #L26f628.  call temp:= `e`(v8, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26f62e.  v8:= temp @kind object;
  #L26f630.  v8:= (`java.util.Collection`) v8 @kind object;
  #L26f634.  v7.`io.reactivex.internal.operators.observable.z.m` @type ^`java.util.Collection` := v8 @kind object;
  #L26f638.  v8:= v7.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L26f63c.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26f642.  v8:= v7.`io.reactivex.internal.observers.j.e` @type ^`boolean` @kind boolean;
  #L26f646.  if v8 != 0 then goto L26f694;
  #L26f64a.  v0:= v7.`io.reactivex.internal.operators.observable.z.k` @type ^`io.reactivex.x` @kind object;
  #L26f64e.  v4:= v7.`io.reactivex.internal.operators.observable.z.i` @type ^`long` @kind wide;
  #L26f652.  v6:= v7.`io.reactivex.internal.operators.observable.z.j` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L26f656.  v1:= v7 @kind object;
  #L26f658.  v2:= v4 @kind wide;
  #L26f65a.  call temp:= `e`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/x;.e:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L26f660.  v8:= temp @kind object;
  #L26f662.  v0:= v7.`io.reactivex.internal.operators.observable.z.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26f666.  v1:= 0I;
  #L26f668.  call temp:= `compareAndSet`(v0, v1, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26f66e.  v0:= temp;
  #L26f670.  if v0 != 0 then goto L26f694;
  #L26f674.  call `dispose`(v8) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26f67a.  goto L26f694;
  #L26f67c.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26f67e.  call `b`(v8) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26f684.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/observable/z;.dispose:()V` @kind virtual;
  #L26f68a.  v0:= v7.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L26f68e.  call `error`(v8, v0) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/t;)V` @kind static;
  #L26f694.  return @kind void;
  catch `java.lang.Throwable` @[L26f618..L26f634] goto L26f67c;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.z` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/z;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26f6b4.  v0:= v2.`io.reactivex.internal.operators.observable.z.h` @type ^`java.util.concurrent.Callable` @kind object;
  #L26f6b8.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L26f6be.  v0:= temp @kind object;
  #L26f6c0.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L26f6c4.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26f6ca.  v0:= temp @kind object;
  #L26f6cc.  v0:= (`java.util.Collection`) v0 @kind object;
  #L26f6d0.  @monitorenter v2
  #L26f6d2.  v1:= v2.`io.reactivex.internal.operators.observable.z.m` @type ^`java.util.Collection` @kind object;
  #L26f6d6.  if v1 == 0 then goto L26f6de;
  #L26f6da.  v2.`io.reactivex.internal.operators.observable.z.m` @type ^`java.util.Collection` := v0 @kind object;
  #L26f6de.  @monitorexit v2
  #L26f6e0.  if v1 != 0 then goto L26f6f0;
  #L26f6e4.  v0:= v2.`io.reactivex.internal.operators.observable.z.n` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26f6e8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26f6ee.  return @kind void;
  #L26f6f0.  v0:= 0I;
  #L26f6f2.  call `g`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/observers/j;.g:(Ljava/lang/Object;ZLio/reactivex/disposables/b;)V` @kind virtual;
  #L26f6f8.  return @kind void;
  #L26f6fa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26f6fc.  @monitorexit v2
  #L26f6fe.  throw v0;
  #L26f700.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26f702.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26f708.  v1:= v2.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L26f70c.  call `onError`(v1, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26f712.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/z;.dispose:()V` @kind virtual;
  #L26f718.  return @kind void;
  catch `java.lang.Throwable` @[L26f6b4..L26f6d0] goto L26f700;
  catch `java.lang.Throwable` @[L26f6d2..L26f6e0] goto L26f6fa;
  catch `java.lang.Throwable` @[L26f6fc..L26f6fe] goto L26f6fa;
}
