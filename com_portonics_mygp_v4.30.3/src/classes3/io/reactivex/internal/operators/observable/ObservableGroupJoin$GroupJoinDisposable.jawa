record `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface, `io.reactivex.internal.operators.observable.ObservableGroupJoin$a` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @AccessFlag FINAL;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @AccessFlag FINAL;
  `io.reactivex.d0.c` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.resultSelector` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @AccessFlag FINAL;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_VALUE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L276e80.  v0:= 1I;
  #L276e82.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L276e88.  v0:= temp @kind object;
  #L276e8a.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L276e8e.  v0:= 2I;
  #L276e90.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L276e96.  v0:= temp @kind object;
  #L276e98.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L276e9c.  v0:= 3I;
  #L276e9e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L276ea4.  v0:= temp @kind object;
  #L276ea6.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L276eaa.  v0:= 4I;
  #L276eac.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L276eb2.  v0:= temp @kind object;
  #L276eb4.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L276eb8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `io.reactivex.t` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `io.reactivex.d0.k` v4 @kind object, `io.reactivex.d0.c` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;Lio/reactivex/d0/k;Lio/reactivex/d0/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L276ecc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L276ed2.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.downstream` @type ^`io.reactivex.t` := v2 @kind object;
  #L276ed6.  v2:= new `io.reactivex.disposables.a`;
  #L276eda.  call `<init>`(v2) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L276ee0.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.a` := v2 @kind object;
  #L276ee4.  v2:= new `io.reactivex.internal.queue.a`;
  #L276ee8.  call temp:= `c`() @signature `Lio/reactivex/n;.c:()I` @kind static;
  #L276eee.  v0:= temp;
  #L276ef0.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L276ef6.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @type ^`io.reactivex.internal.queue.a` := v2 @kind object;
  #L276efa.  v2:= new `java.util.LinkedHashMap`;
  #L276efe.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L276f04.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` := v2 @kind object;
  #L276f08.  v2:= new `java.util.LinkedHashMap`;
  #L276f0c.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L276f12.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` := v2 @kind object;
  #L276f16.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L276f1a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L276f20.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L276f24.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftEnd` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L276f28.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightEnd` @type ^`io.reactivex.d0.k` := v4 @kind object;
  #L276f2c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.resultSelector` @type ^`io.reactivex.d0.c` := v5 @kind object;
  #L276f30.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L276f34.  v3:= 2I;
  #L276f36.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L276f3c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L276f40.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;

  #L276f54.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L276f58.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L276f5e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L276f70.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L276f74.  if v0 == 0 then goto L276f7a;
  #L276f78.  return @kind void;
  #L276f7a.  v0:= 1I;
  #L276f7c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L276f80.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @kind virtual;
  #L276f86.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L276f8c.  v0:= temp;
  #L276f8e.  if v0 != 0 then goto L276f9c;
  #L276f92.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L276f96.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L276f9c.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L276fb0.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L276fb6.  v0:= temp;
  #L276fb8.  if v0 == 0 then goto L276fbe;
  #L276fbc.  return @kind void;
  #L276fbe.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L276fc2.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L276fc6.  v2:= 1I;
  #L276fc8.  v3:= 1I;
  #L276fca.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L276fce.  if v4 == 0 then goto L276fda;
  #L276fd2.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L276fd8.  return @kind void;
  #L276fda.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L276fde.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L276fe4.  v4:= temp @kind object;
  #L276fe6.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L276fea.  if v4 == 0 then goto L277002;
  #L276fee.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L276ff4.  call `cancelAll`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @kind virtual;
  #L276ffa.  call `errorAll`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.errorAll:(Lio/reactivex/t;)V` @kind virtual;
  #L277000.  return @kind void;
  #L277002.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L277006.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27700c.  v4:= temp;
  #L27700e.  v5:= 0I;
  #L277010.  if v4 != 0 then goto L277018;
  #L277014.  v4:= 1I;
  #L277016.  goto L27701a;
  #L277018.  v4:= 0I;
  #L27701a.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L277020.  v6:= temp @kind object;
  #L277022.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L277026.  if v6 != 0 then goto L27702e;
  #L27702a.  v7:= 1I;
  #L27702c.  goto L277030;
  #L27702e.  v7:= 0I;
  #L277030.  if v4 == 0 then goto L277092;
  #L277034.  if v7 == 0 then goto L277092;
  #L277038.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L27703c.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L277042.  v0:= temp @kind object;
  #L277044.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L27704a.  v0:= temp @kind object;
  #L27704c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L277052.  v2:= temp;
  #L277054.  if v2 == 0 then goto L27706c;
  #L277058.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L27705e.  v2:= temp @kind object;
  #L277060.  v2:= (`io.reactivex.subjects.UnicastSubject`) v2 @kind object;
  #L277064.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L27706a.  goto L27704c;
  #L27706c.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L277070.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L277076.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L27707a.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L277080.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L277084.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L27708a.  call `onComplete`(v1) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L277090.  return @kind void;
  #L277092.  if v7 == 0 then goto L2770a6;
  #L277096.  v3:= -v3 @kind int;
  #L277098.  call temp:= `addAndGet`(v9, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27709e.  v3:= temp;
  #L2770a0.  if v3 != 0 then goto L276fca;
  #L2770a4.  return @kind void;
  #L2770a6.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L2770ac.  v4:= temp @kind object;
  #L2770ae.  v7:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L2770b2.  if v6 != v7 then goto L27719c;
  #L2770b6.  call temp:= `x`() @signature `Lio/reactivex/subjects/UnicastSubject;.x:()Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L2770bc.  v5:= temp @kind object;
  #L2770be.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftIndex` @type ^`int`;
  #L2770c2.  v7:= v6 + 1;
  #L2770c6.  v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftIndex` @type ^`int` := v7;
  #L2770ca.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L2770ce.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2770d4.  v8:= temp @kind object;
  #L2770d6.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2770dc.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.leftEnd` @type ^`io.reactivex.d0.k` @kind object;
  #L2770e0.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2770e6.  v7:= temp @kind object;
  #L2770e8.  v8:= "The leftEnd returned a null ObservableSource" @kind object;
  #L2770ec.  call temp:= `e`(v7, v8) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2770f2.  v7:= temp @kind object;
  #L2770f4.  v7:= (`io.reactivex.r`) v7 @kind object;
  #L2770f8.  v8:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`;
  #L2770fc.  call `<init>`(v8, v9, v2, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;ZI)V` @kind direct;
  #L277102.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L277106.  call temp:= `b`(v6, v8) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L27710c.  call `subscribe`(v7, v8) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L277112.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L277116.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27711c.  v6:= temp @kind object;
  #L27711e.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L277122.  if v6 == 0 then goto L27713a;
  #L277126.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27712c.  call `cancelAll`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @kind virtual;
  #L277132.  call `errorAll`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.errorAll:(Lio/reactivex/t;)V` @kind virtual;
  #L277138.  return @kind void;
  #L27713a.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.resultSelector` @type ^`io.reactivex.d0.c` @kind object;
  #L27713e.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L277144.  v4:= temp @kind object;
  #L277146.  v6:= "The resultSelector returned a null value" @kind object;
  #L27714a.  call temp:= `e`(v4, v6) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L277150.  v4:= temp @kind object;
  #L277152.  call `onNext`(v1, v4) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L277158.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L27715c.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L277162.  v4:= temp @kind object;
  #L277164.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L27716a.  v4:= temp @kind object;
  #L27716c.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L277172.  v6:= temp;
  #L277174.  if v6 == 0 then goto L276fca;
  #L277178.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L27717e.  v6:= temp @kind object;
  #L277180.  call `onNext`(v5, v6) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L277186.  goto L27716c;
  #L277188.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27718a.  call `fail`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/t;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L277190.  return @kind void;
  #L277192.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L277194.  call `fail`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/t;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27719a.  return @kind void;
  #L27719c.  v7:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L2771a0.  if v6 != v7 then goto L27725e;
  #L2771a4.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightIndex` @type ^`int`;
  #L2771a8.  v7:= v6 + 1;
  #L2771ac.  v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightIndex` @type ^`int` := v7;
  #L2771b0.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L2771b4.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2771ba.  v8:= temp @kind object;
  #L2771bc.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2771c2.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rightEnd` @type ^`io.reactivex.d0.k` @kind object;
  #L2771c6.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2771cc.  v7:= temp @kind object;
  #L2771ce.  v8:= "The rightEnd returned a null ObservableSource" @kind object;
  #L2771d2.  call temp:= `e`(v7, v8) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2771d8.  v7:= temp @kind object;
  #L2771da.  v7:= (`io.reactivex.r`) v7 @kind object;
  #L2771de.  v8:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`;
  #L2771e2.  call `<init>`(v8, v9, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;ZI)V` @kind direct;
  #L2771e8.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L2771ec.  call temp:= `b`(v5, v8) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2771f2.  call `subscribe`(v7, v8) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L2771f8.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2771fc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L277202.  v5:= temp @kind object;
  #L277204.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L277208.  if v5 == 0 then goto L277220;
  #L27720c.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L277212.  call `cancelAll`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @kind virtual;
  #L277218.  call `errorAll`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.errorAll:(Lio/reactivex/t;)V` @kind virtual;
  #L27721e.  return @kind void;
  #L277220.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L277224.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L27722a.  v5:= temp @kind object;
  #L27722c.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L277232.  v5:= temp @kind object;
  #L277234.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L27723a.  v6:= temp;
  #L27723c.  if v6 == 0 then goto L276fca;
  #L277240.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L277246.  v6:= temp @kind object;
  #L277248.  v6:= (`io.reactivex.subjects.UnicastSubject`) v6 @kind object;
  #L27724c.  call `onNext`(v6, v4) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L277252.  goto L277234;
  #L277254.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L277256.  call `fail`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/t;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27725c.  return @kind void;
  #L27725e.  v5:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L277262.  if v6 != v5 then goto L27729e;
  #L277266.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`) v4 @kind object;
  #L27726a.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L27726e.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.index` @type ^`int`;
  #L277272.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L277278.  v6:= temp @kind object;
  #L27727a.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L277280.  v5:= temp @kind object;
  #L277282.  v5:= (`io.reactivex.subjects.UnicastSubject`) v5 @kind object;
  #L277286.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L27728a.  call temp:= `a`(v6, v4) @signature `Lio/reactivex/disposables/a;.a:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L277290.  if v5 == 0 then goto L276fca;
  #L277294.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L27729a.  goto L276fca;
  #L27729e.  v5:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L2772a2.  if v6 != v5 then goto L276fca;
  #L2772a6.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`) v4 @kind object;
  #L2772aa.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L2772ae.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.index` @type ^`int`;
  #L2772b2.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2772b8.  v6:= temp @kind object;
  #L2772ba.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2772c0.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L2772c4.  call temp:= `a`(v5, v4) @signature `Lio/reactivex/disposables/a;.a:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2772ca.  goto L276fca;
  catch `java.lang.Throwable` @[L2770dc..L2770f8] goto L277192;
  catch `java.lang.Throwable` @[L27713a..L277152] goto L277188;
  catch `java.lang.Throwable` @[L2771c2..L2771de] goto L277254;
}
procedure `void` `errorAll`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v3 @kind this, `io.reactivex.t` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.errorAll:(Lio/reactivex/t;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L277304.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L277308.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L27730e.  v0:= temp @kind object;
  #L277310.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L277314.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L27731a.  v1:= temp @kind object;
  #L27731c.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L277322.  v1:= temp @kind object;
  #L277324.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L27732a.  v2:= temp;
  #L27732c.  if v2 == 0 then goto L277344;
  #L277330.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L277336.  v2:= temp @kind object;
  #L277338.  v2:= (`io.reactivex.subjects.UnicastSubject`) v2 @kind object;
  #L27733c.  call `onError`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L277342.  goto L277324;
  #L277344.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L277348.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L27734e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L277352.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L277358.  call `onError`(v4, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27735e.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object, `io.reactivex.t` v3 @kind object, `io.reactivex.internal.queue.a` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/t;Lio/reactivex/internal/queue/a;)V` @AccessFlag  {
    temp;
    v0;

  #L277370.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L277376.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27737a.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L277380.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L277386.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.cancelAll:()V` @kind virtual;
  #L27738c.  call `errorAll`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.errorAll:(Lio/reactivex/t;)V` @kind virtual;
  #L277392.  return @kind void;
}
procedure `void` `innerClose`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.innerClose:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2773a4.  @monitorenter v1
  #L2773a6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2773aa.  if v2 == 0 then goto L2773b4;
  #L2773ae.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L2773b2.  goto L2773b8;
  #L2773b4.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L2773b8.  call temp:= `l`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2773be.  @monitorexit v1
  #L2773c0.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @kind virtual;
  #L2773c6.  return @kind void;
  #L2773c8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2773ca.  @monitorexit v1
  #L2773cc.  throw v2;
  catch `java.lang.Throwable` @[L2773a6..L2773c0] goto L2773c8;
  catch `java.lang.Throwable` @[L2773ca..L2773cc] goto L2773c8;
}
procedure `void` `innerCloseError`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.innerCloseError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2773f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2773f8.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L2773fe.  v0:= temp;
  #L277400.  if v0 == 0 then goto L27740c;
  #L277404.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @kind virtual;
  #L27740a.  goto L277412;
  #L27740c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L277412.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.innerComplete:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L277424.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L277428.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L27742e.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L277432.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L277438.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @kind virtual;
  #L27743e.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L277450.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L277454.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L27745a.  v0:= temp;
  #L27745c.  if v0 == 0 then goto L277472;
  #L277460.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L277464.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L27746a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @kind virtual;
  #L277470.  goto L277478;
  #L277472.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L277478.  return @kind void;
}
procedure `void` `innerValue`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.innerValue:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27748c.  @monitorenter v1
  #L27748e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L277492.  if v2 == 0 then goto L27749c;
  #L277496.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L27749a.  goto L2774a0;
  #L27749c.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L2774a0.  call temp:= `l`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2774a6.  @monitorexit v1
  #L2774a8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.drain:()V` @kind virtual;
  #L2774ae.  return @kind void;
  #L2774b0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2774b2.  @monitorexit v1
  #L2774b4.  throw v2;
  catch `java.lang.Throwable` @[L27748e..L2774a8] goto L2774b0;
  catch `java.lang.Throwable` @[L2774b2..L2774b4] goto L2774b0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$GroupJoinDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L276e68.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L276e6c.  return v0;
}
