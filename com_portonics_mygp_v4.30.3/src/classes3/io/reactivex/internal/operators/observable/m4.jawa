record `io.reactivex.internal.operators.observable.m4` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.m4.b` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.m4.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.m4.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.m4` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/m4;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2802e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2802ea.  v0.`io.reactivex.internal.operators.observable.m4.b` @type ^`io.reactivex.t` := v1 @kind object;
  #L2802ee.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.m4` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/m4;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L280324.  v0:= v2.`io.reactivex.internal.operators.observable.m4.d` @type ^`java.lang.Object` @kind object;
  #L280328.  if v0 == 0 then goto L28033c;
  #L28032c.  v1:= 0I;
  #L28032e.  v2.`io.reactivex.internal.operators.observable.m4.d` @type ^`java.lang.Object` := v1 @kind object;
  #L280332.  v1:= v2.`io.reactivex.internal.operators.observable.m4.b` @type ^`io.reactivex.t` @kind object;
  #L280336.  call `onNext`(v1, v0) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L28033c.  v0:= v2.`io.reactivex.internal.operators.observable.m4.b` @type ^`io.reactivex.t` @kind object;
  #L280340.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L280346.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.m4` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/m4;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L280300.  v0:= 0I;
  #L280302.  v1.`io.reactivex.internal.operators.observable.m4.d` @type ^`java.lang.Object` := v0 @kind object;
  #L280306.  v0:= v1.`io.reactivex.internal.operators.observable.m4.c` @type ^`io.reactivex.disposables.b` @kind object;
  #L28030a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L280310.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.m4` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/m4;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2802c4.  v0:= v1.`io.reactivex.internal.operators.observable.m4.c` @type ^`io.reactivex.disposables.b` @kind object;
  #L2802c8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L2802ce.  v0:= temp;
  #L2802d0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.m4` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/m4;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L280358.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/m4;.a:()V` @kind virtual;
  #L28035e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.m4` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/m4;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L280370.  v0:= 0I;
  #L280372.  v1.`io.reactivex.internal.operators.observable.m4.d` @type ^`java.lang.Object` := v0 @kind object;
  #L280376.  v0:= v1.`io.reactivex.internal.operators.observable.m4.b` @type ^`io.reactivex.t` @kind object;
  #L28037a.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L280380.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.m4` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/m4;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L280394.  v0.`io.reactivex.internal.operators.observable.m4.d` @type ^`java.lang.Object` := v1 @kind object;
  #L280398.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.m4` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/m4;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2803ac.  v0:= v1.`io.reactivex.internal.operators.observable.m4.c` @type ^`io.reactivex.disposables.b` @kind object;
  #L2803b0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2803b6.  v0:= temp;
  #L2803b8.  if v0 == 0 then goto L2803ca;
  #L2803bc.  v1.`io.reactivex.internal.operators.observable.m4.c` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L2803c0.  v2:= v1.`io.reactivex.internal.operators.observable.m4.b` @type ^`io.reactivex.t` @kind object;
  #L2803c4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2803ca.  return @kind void;
}
