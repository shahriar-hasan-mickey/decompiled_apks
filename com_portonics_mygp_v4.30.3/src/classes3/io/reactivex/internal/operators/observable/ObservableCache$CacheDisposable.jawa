record `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.disposed` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.index` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableCache$a` `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.node` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.offset` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableCache` `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableCache` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;.<init>:(Lio/reactivex/t;Lio/reactivex/internal/operators/observable/ObservableCache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26fdc0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26fdc6.  v0.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L26fdca.  v0.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.parent` @type ^`io.reactivex.internal.operators.observable.ObservableCache` := v2 @kind object;
  #L26fdce.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCache.i` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` @kind object;
  #L26fdd2.  v0.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.node` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` := v1 @kind object;
  #L26fdd6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26fde8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.disposed` @type ^`boolean` @kind boolean;
  #L26fdec.  if v0 != 0 then goto L26fe00;
  #L26fdf0.  v0:= 1I;
  #L26fdf2.  v1.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.disposed` @type ^`boolean` := v0 @kind boolean;
  #L26fdf6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.parent` @type ^`io.reactivex.internal.operators.observable.ObservableCache` @kind object;
  #L26fdfa.  call `x`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.x:(Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;)V` @kind virtual;
  #L26fe00.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26fda8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.disposed` @type ^`boolean` @kind boolean;
  #L26fdac.  return v0;
}
