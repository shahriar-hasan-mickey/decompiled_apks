record `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.d0.d` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.comparer` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.first` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.v3`[] `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.observers` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.ArrayCompositeDisposable` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.resources` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.second` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v2` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v0 @kind this, `io.reactivex.t` v1 @kind object, `int` v2 , `io.reactivex.r` v3 @kind object, `io.reactivex.r` v4 @kind object, `io.reactivex.d0.d` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.<init>:(Lio/reactivex/t;ILio/reactivex/r;Lio/reactivex/r;Lio/reactivex/d0/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27e364.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27e36a.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27e36e.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.r` := v3 @kind object;
  #L27e372.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.r` := v4 @kind object;
  #L27e376.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.comparer` @type ^`io.reactivex.d0.d` := v5 @kind object;
  #L27e37a.  v1:= 2I;
  #L27e37c.  v3:= new `io.reactivex.internal.operators.observable.v3`[v1];
  #L27e380.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.v3`[] := v3 @kind object;
  #L27e384.  v4:= new `io.reactivex.internal.operators.observable.v3`;
  #L27e388.  v5:= 0I;
  #L27e38a.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/v3;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;II)V` @kind direct;
  #L27e390.  v3[v5]:= v4 @kind object;
  #L27e394.  v4:= new `io.reactivex.internal.operators.observable.v3`;
  #L27e398.  v5:= 1I;
  #L27e39a.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/v3;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;II)V` @kind direct;
  #L27e3a0.  v3[v5]:= v4 @kind object;
  #L27e3a4.  v2:= new `io.reactivex.internal.disposables.ArrayCompositeDisposable`;
  #L27e3a8.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L27e3ae.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L27e3b2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v1 @kind this, `io.reactivex.internal.queue.a` v2 @kind object, `io.reactivex.internal.queue.a` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @AccessFlag  {
    temp;
    v0;

  #L27e3c4.  v0:= 1I;
  #L27e3c6.  v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L27e3ca.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e3d0.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e3d6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27e3e8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L27e3ec.  if v0 != 0 then goto L27e42e;
  #L27e3f0.  v0:= 1I;
  #L27e3f2.  v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L27e3f6.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L27e3fa.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L27e400.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27e406.  v1:= temp;
  #L27e408.  if v1 != 0 then goto L27e42e;
  #L27e40c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.v3`[] @kind object;
  #L27e410.  v2:= 0I;
  #L27e412.  v2:= v1[v2] @kind object;
  #L27e416.  v2:= v2.`io.reactivex.internal.operators.observable.v3.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27e41a.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e420.  v0:= v1[v0] @kind object;
  #L27e424.  v0:= v0.`io.reactivex.internal.operators.observable.v3.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27e428.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e42e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v12 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L27e440.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27e446.  v0:= temp;
  #L27e448.  if v0 == 0 then goto L27e44e;
  #L27e44c.  return @kind void;
  #L27e44e.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.v3`[] @kind object;
  #L27e452.  v1:= 0I;
  #L27e454.  v2:= v0[v1] @kind object;
  #L27e458.  v3:= v2.`io.reactivex.internal.operators.observable.v3.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27e45c.  v4:= 1I;
  #L27e45e.  v0:= v0[v4] @kind object;
  #L27e462.  v5:= v0.`io.reactivex.internal.operators.observable.v3.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27e466.  v6:= 1I;
  #L27e468.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L27e46c.  if v7 == 0 then goto L27e47e;
  #L27e470.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e476.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e47c.  return @kind void;
  #L27e47e.  v7:= v2.`io.reactivex.internal.operators.observable.v3.e` @type ^`boolean` @kind boolean;
  #L27e482.  if v7 == 0 then goto L27e4a0;
  #L27e486.  v8:= v2.`io.reactivex.internal.operators.observable.v3.f` @type ^`java.lang.Throwable` @kind object;
  #L27e48a.  if v8 == 0 then goto L27e4a0;
  #L27e48e.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27e494.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.t` @kind object;
  #L27e498.  call `onError`(v0, v8) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27e49e.  return @kind void;
  #L27e4a0.  v8:= v0.`io.reactivex.internal.operators.observable.v3.e` @type ^`boolean` @kind boolean;
  #L27e4a4.  if v8 == 0 then goto L27e4c2;
  #L27e4a8.  v9:= v0.`io.reactivex.internal.operators.observable.v3.f` @type ^`java.lang.Throwable` @kind object;
  #L27e4ac.  if v9 == 0 then goto L27e4c2;
  #L27e4b0.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27e4b6.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.t` @kind object;
  #L27e4ba.  call `onError`(v0, v9) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27e4c0.  return @kind void;
  #L27e4c2.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L27e4c6.  if v9 != 0 then goto L27e4d6;
  #L27e4ca.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L27e4d0.  v9:= temp @kind object;
  #L27e4d2.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` := v9 @kind object;
  #L27e4d6.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L27e4da.  if v9 != 0 then goto L27e4e2;
  #L27e4de.  v9:= 1I;
  #L27e4e0.  goto L27e4e4;
  #L27e4e2.  v9:= 0I;
  #L27e4e4.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L27e4e8.  if v10 != 0 then goto L27e4f8;
  #L27e4ec.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L27e4f2.  v10:= temp @kind object;
  #L27e4f4.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` := v10 @kind object;
  #L27e4f8.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L27e4fc.  if v10 != 0 then goto L27e504;
  #L27e500.  v11:= 1I;
  #L27e502.  goto L27e506;
  #L27e504.  v11:= 0I;
  #L27e506.  if v7 == 0 then goto L27e530;
  #L27e50a.  if v8 == 0 then goto L27e530;
  #L27e50e.  if v9 == 0 then goto L27e530;
  #L27e512.  if v11 == 0 then goto L27e530;
  #L27e516.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.t` @kind object;
  #L27e51a.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L27e51e.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27e524.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.t` @kind object;
  #L27e528.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27e52e.  return @kind void;
  #L27e530.  if v7 == 0 then goto L27e55c;
  #L27e534.  if v8 == 0 then goto L27e55c;
  #L27e538.  if v9 == v11 then goto L27e55c;
  #L27e53c.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27e542.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.t` @kind object;
  #L27e546.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L27e54a.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27e550.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.t` @kind object;
  #L27e554.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27e55a.  return @kind void;
  #L27e55c.  if v9 != 0 then goto L27e5be;
  #L27e560.  if v11 != 0 then goto L27e5be;
  #L27e564.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.comparer` @type ^`io.reactivex.d0.d` @kind object;
  #L27e568.  v8:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L27e56c.  call temp:= `a`(v7, v8, v10) @signature `Lio/reactivex/d0/d;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L27e572.  v7:= temp;
  #L27e574.  if v7 != 0 then goto L27e598;
  #L27e578.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27e57e.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.t` @kind object;
  #L27e582.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L27e586.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27e58c.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.t` @kind object;
  #L27e590.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27e596.  return @kind void;
  #L27e598.  v7:= 0I;
  #L27e59a.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v1` @type ^`java.lang.Object` := v7 @kind object;
  #L27e59e.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.v2` @type ^`java.lang.Object` := v7 @kind object;
  #L27e5a2.  goto L27e5be;
  #L27e5a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27e5a6.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L27e5ac.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27e5b2.  v1:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.downstream` @type ^`io.reactivex.t` @kind object;
  #L27e5b6.  call `onError`(v1, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27e5bc.  return @kind void;
  #L27e5be.  if v9 != 0 then goto L27e5c6;
  #L27e5c2.  if v11 == 0 then goto L27e468;
  #L27e5c6.  v6:= -v6 @kind int;
  #L27e5c8.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27e5ce.  v6:= temp;
  #L27e5d0.  if v6 != 0 then goto L27e468;
  #L27e5d4.  return @kind void;
  catch `java.lang.Throwable` @[L27e564..L27e574] goto L27e5a4;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27e32c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L27e330.  return v0;
}
procedure `boolean` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.setDisposable:(Lio/reactivex/disposables/b;I)Z` @AccessFlag  {
    temp;
    v0;

  #L27e344.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L27e348.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/disposables/b;)Z` @kind virtual;
  #L27e34e.  v2:= temp;
  #L27e350.  return v2;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.subscribe:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L27e5f4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.v3`[] @kind object;
  #L27e5f8.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.first` @type ^`io.reactivex.r` @kind object;
  #L27e5fc.  v2:= 0I;
  #L27e5fe.  v2:= v0[v2] @kind object;
  #L27e602.  call `subscribe`(v1, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27e608.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator.second` @type ^`io.reactivex.r` @kind object;
  #L27e60c.  v2:= 1I;
  #L27e60e.  v0:= v0[v2] @kind object;
  #L27e612.  call `subscribe`(v1, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27e618.  return @kind void;
}
