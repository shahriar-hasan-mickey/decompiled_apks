record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable` v0 @kind this, `io.reactivex.r` v1 @kind object, `io.reactivex.r` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable;.<init>:(Lio/reactivex/r;Lio/reactivex/r;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L27dbbc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/r;)V` @kind direct;
  #L27dbc2.  v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.c` @type ^`io.reactivex.r` := v2 @kind object;
  #L27dbc6.  v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.d` @type ^`boolean` := v3 @kind boolean;
  #L27dbca.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable` v3 @kind this, `io.reactivex.t` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27dbdc.  v0:= new `io.reactivex.observers.d`;
  #L27dbe0.  call `<init>`(v0, v4) @signature `Lio/reactivex/observers/d;.<init>:(Lio/reactivex/t;)V` @kind direct;
  #L27dbe6.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.d` @type ^`boolean` @kind boolean;
  #L27dbea.  if v4 == 0 then goto L27dc08;
  #L27dbee.  v4:= v3.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L27dbf2.  v1:= new `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast`;
  #L27dbf6.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.c` @type ^`io.reactivex.r` @kind object;
  #L27dbfa.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.<init>:(Lio/reactivex/t;Lio/reactivex/r;)V` @kind direct;
  #L27dc00.  call `subscribe`(v4, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27dc06.  goto L27dc20;
  #L27dc08.  v4:= v3.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L27dc0c.  v1:= new `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainNoLast`;
  #L27dc10.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.c` @type ^`io.reactivex.r` @kind object;
  #L27dc14.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainNoLast;.<init>:(Lio/reactivex/t;Lio/reactivex/r;)V` @kind direct;
  #L27dc1a.  call `subscribe`(v4, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27dc20.  return @kind void;
}
