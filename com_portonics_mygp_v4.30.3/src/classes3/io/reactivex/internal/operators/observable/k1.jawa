record `io.reactivex.internal.operators.observable.k1` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.a` @kind class {
  `io.reactivex.d0.m` `io.reactivex.internal.operators.observable.k1.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.k1` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.m` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/k1;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/m;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27429c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/a;.<init>:(Lio/reactivex/t;)V` @kind direct;
  #L2742a2.  v0.`io.reactivex.internal.operators.observable.k1.g` @type ^`io.reactivex.d0.m` := v2 @kind object;
  #L2742a6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.k1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/k1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2742b8.  v0:= v1.`io.reactivex.internal.observers.a.f` @type ^`int`;
  #L2742bc.  if v0 != 0 then goto L2742e6;
  #L2742c0.  v0:= v1.`io.reactivex.internal.operators.observable.k1.g` @type ^`io.reactivex.d0.m` @kind object;
  #L2742c4.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/d0/m;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L2742ca.  v0:= temp;
  #L2742cc.  if v0 == 0 then goto L2742f2;
  #L2742d0.  v0:= v1.`io.reactivex.internal.observers.a.b` @type ^`io.reactivex.t` @kind object;
  #L2742d4.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2742da.  goto L2742f2;
  #L2742dc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2742de.  call `c`(v1, v2) @signature `Lio/reactivex/internal/observers/a;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2742e4.  return @kind void;
  #L2742e6.  v2:= v1.`io.reactivex.internal.observers.a.b` @type ^`io.reactivex.t` @kind object;
  #L2742ea.  v0:= 0I;
  #L2742ec.  call `onNext`(v2, v0) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2742f2.  return @kind void;
  catch `java.lang.Throwable` @[L2742c0..L2742cc] goto L2742dc;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.k1` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/k1;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L274268.  v0:= v2.`io.reactivex.internal.observers.a.d` @type ^`io.reactivex.e0.a.e` @kind object;
  #L27426c.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L274272.  v0:= temp @kind object;
  #L274274.  if v0 == 0 then goto L274288;
  #L274278.  v1:= v2.`io.reactivex.internal.operators.observable.k1.g` @type ^`io.reactivex.d0.m` @kind object;
  #L27427c.  call temp:= `test`(v1, v0) @signature `Lio/reactivex/d0/m;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L274282.  v1:= temp;
  #L274284.  if v1 == 0 then goto L274268;
  #L274288.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.k1` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/k1;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L27424c.  call temp:= `d`(v0, v1) @signature `Lio/reactivex/internal/observers/a;.d:(I)I` @kind virtual;
  #L274252.  v1:= temp;
  #L274254.  return v1;
}
