record `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.emitLast` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.latest` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timeout` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerRunning` @AccessFlag ;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.unit` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.upstream` @AccessFlag ;
  `io.reactivex.x$a` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.x$a` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.<init>:(Lio/reactivex/t;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x$a;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L280f60.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L280f66.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L280f6a.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timeout` @type ^`long` := v2 @kind wide;
  #L280f6e.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L280f72.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @type ^`io.reactivex.x$a` := v5 @kind object;
  #L280f76.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.emitLast` @type ^`boolean` := v6 @kind boolean;
  #L280f7a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L280f7e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L280f84.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.latest` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L280f88.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L280f9c.  v0:= 1I;
  #L280f9e.  v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L280fa2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L280fa6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L280fac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L280fb0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L280fb6.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L280fbc.  v0:= temp;
  #L280fbe.  if v0 != 0 then goto L280fce;
  #L280fc2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.latest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L280fc6.  v1:= 0I;
  #L280fc8.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L280fce.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L280fe0.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L280fe6.  v0:= temp;
  #L280fe8.  if v0 == 0 then goto L280fee;
  #L280fec.  return @kind void;
  #L280fee.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.latest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L280ff2.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L280ff6.  v2:= 1I;
  #L280ff8.  v3:= 1I;
  #L280ffa.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.cancelled` @type ^`boolean` @kind boolean;
  #L280ffe.  v5:= 0I;
  #L281000.  if v4 == 0 then goto L28100c;
  #L281004.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28100a.  return @kind void;
  #L28100c.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.done` @type ^`boolean` @kind boolean;
  #L281010.  if v4 == 0 then goto L281038;
  #L281014.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L281018.  if v6 == 0 then goto L281038;
  #L28101c.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L281022.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L281026.  call `onError`(v1, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L28102c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281030.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281036.  return @kind void;
  #L281038.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28103e.  v6:= temp @kind object;
  #L281040.  v7:= 0I;
  #L281042.  if v6 != 0 then goto L28104a;
  #L281046.  v6:= 1I;
  #L281048.  goto L28104c;
  #L28104a.  v6:= 0I;
  #L28104c.  if v4 == 0 then goto L28107c;
  #L281050.  call temp:= `getAndSet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L281056.  v0:= temp @kind object;
  #L281058.  if v6 != 0 then goto L28106a;
  #L28105c.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.emitLast` @type ^`boolean` @kind boolean;
  #L281060.  if v2 == 0 then goto L28106a;
  #L281064.  call `onNext`(v1, v0) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L28106a.  call `onComplete`(v1) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L281070.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281074.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28107a.  return @kind void;
  #L28107c.  if v6 == 0 then goto L281092;
  #L281080.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @type ^`boolean` @kind boolean;
  #L281084.  if v4 == 0 then goto L2810a4;
  #L281088.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerRunning` @type ^`boolean` := v7 @kind boolean;
  #L28108c.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @type ^`boolean` := v7 @kind boolean;
  #L281090.  goto L2810a4;
  #L281092.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerRunning` @type ^`boolean` @kind boolean;
  #L281096.  if v4 == 0 then goto L2810b4;
  #L28109a.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @type ^`boolean` @kind boolean;
  #L28109e.  if v4 == 0 then goto L2810a4;
  #L2810a2.  goto L2810b4;
  #L2810a4.  v3:= -v3 @kind int;
  #L2810a6.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2810ac.  v3:= temp;
  #L2810ae.  if v3 != 0 then goto L280ffa;
  #L2810b2.  return @kind void;
  #L2810b4.  call temp:= `getAndSet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2810ba.  v4:= temp @kind object;
  #L2810bc.  call `onNext`(v1, v4) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2810c2.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @type ^`boolean` := v7 @kind boolean;
  #L2810c6.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerRunning` @type ^`boolean` := v2 @kind boolean;
  #L2810ca.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L2810ce.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timeout` @type ^`long` @kind wide;
  #L2810d2.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2810d6.  call temp:= `c`(v4, v8, v5, v7) @signature `Lio/reactivex/x$a;.c:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L2810dc.  goto L280ffa;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L280f48.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.cancelled` @type ^`boolean` @kind boolean;
  #L280f4c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2810f0.  v0:= 1I;
  #L2810f2.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L2810f6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.drain:()V` @kind virtual;
  #L2810fc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L281110.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L281114.  v1:= 1I;
  #L281116.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L28111a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.drain:()V` @kind virtual;
  #L281120.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281134.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.latest` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281138.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L28113e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.drain:()V` @kind virtual;
  #L281144.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281158.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L28115c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L281162.  v0:= temp;
  #L281164.  if v0 == 0 then goto L281176;
  #L281168.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L28116c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281170.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L281176.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281188.  v0:= 1I;
  #L28118a.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver.timerFired` @type ^`boolean` := v0 @kind boolean;
  #L28118e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$ThrottleLatestObserver;.drain:()V` @kind virtual;
  #L281194.  return @kind void;
}
