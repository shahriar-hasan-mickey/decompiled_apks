record `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.error` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.mainDisposable` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.mainDone` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.otherDone` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.otherObserver` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L279280.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L279286.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27928a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27928e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L279294.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L279298.  v1:= new `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver`;
  #L27929c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;)V` @kind direct;
  #L2792a2.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver` := v1 @kind object;
  #L2792a6.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L2792aa.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L2792b0.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L2792b4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2792c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2792cc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2792d2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver` @kind object;
  #L2792d6.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2792dc.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279254.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L279258.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27925e.  v0:= temp @kind object;
  #L279260.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L279264.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L27926a.  v0:= temp;
  #L27926c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2792f0.  v0:= 1I;
  #L2792f2.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.mainDone` @type ^`boolean` := v0 @kind boolean;
  #L2792f6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.otherDone` @type ^`boolean` @kind boolean;
  #L2792fa.  if v0 == 0 then goto L27930c;
  #L2792fe.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L279302.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L279306.  call `a`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.a:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L27930c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L279320.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L279324.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27932a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27932e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L279332.  call `c`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.c:(Lio/reactivex/t;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L279338.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27934c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L279350.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L279354.  call `e`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.e:(Lio/reactivex/t;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L27935a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27936c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L279370.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L279376.  return @kind void;
}
procedure `void` `otherComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;.otherComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L279388.  v0:= 1I;
  #L27938a.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.otherDone` @type ^`boolean` := v0 @kind boolean;
  #L27938e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L279392.  if v0 == 0 then goto L2793a4;
  #L279396.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27939a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27939e.  call `a`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.a:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L2793a4.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2793b8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2793bc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2793c2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2793c6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2793ca.  call `c`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.c:(Lio/reactivex/t;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L2793d0.  return @kind void;
}
