record `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.bufferSize` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.cancelled` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.delayError` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.keySelector` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @AccessFlag ;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.valueSelector` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.NULL_KEY` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2767a0.  v0:= new `java.lang.Object`;
  #L2767a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2767aa.  `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.NULL_KEY` @type ^`java.lang.Object` := v0 @kind object;
  #L2767ae.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.t` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `io.reactivex.d0.k` v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;Lio/reactivex/d0/k;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2767c0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2767c6.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L2767ca.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L2767d0.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L2767d4.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @type ^`io.reactivex.t` := v2 @kind object;
  #L2767d8.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.keySelector` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L2767dc.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.valueSelector` @type ^`io.reactivex.d0.k` := v4 @kind object;
  #L2767e0.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.bufferSize` @type ^`int` := v5;
  #L2767e4.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.delayError` @type ^`boolean` := v6 @kind boolean;
  #L2767e8.  v2:= new `java.util.concurrent.ConcurrentHashMap`;
  #L2767ec.  call `<init>`(v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L2767f2.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` := v2 @kind object;
  #L2767f6.  v2:= 1I;
  #L2767f8.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L2767fe.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L276810.  if v2 == 0 then goto L276816;
  #L276814.  goto L27681a;
  #L276816.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.NULL_KEY` @type ^`java.lang.Object` @kind object;
  #L27681a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L27681e.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L276824.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L27682a.  v2:= temp;
  #L27682c.  if v2 != 0 then goto L27683a;
  #L276830.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L276834.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27683a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27684c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L276850.  v1:= 0I;
  #L276852.  v2:= 1I;
  #L276854.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L27685a.  v0:= temp;
  #L27685c.  if v0 == 0 then goto L276876;
  #L276860.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L276866.  v0:= temp;
  #L276868.  if v0 != 0 then goto L276876;
  #L27686c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L276870.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L276876.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L276780.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L276784.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L27678a.  v0:= temp;
  #L27678c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L276888.  v0:= new `java.util.ArrayList`;
  #L27688c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L276890.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L276896.  v1:= temp @kind object;
  #L276898.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L27689e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L2768a2.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L2768a8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2768ae.  v0:= temp @kind object;
  #L2768b0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2768b6.  v1:= temp;
  #L2768b8.  if v1 == 0 then goto L2768d0;
  #L2768bc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2768c2.  v1:= temp @kind object;
  #L2768c4.  v1:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$a`) v1 @kind object;
  #L2768c8.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.onComplete:()V` @kind virtual;
  #L2768ce.  goto L2768b0;
  #L2768d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2768d4.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2768da.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2768ec.  v0:= new `java.util.ArrayList`;
  #L2768f0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L2768f4.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L2768fa.  v1:= temp @kind object;
  #L2768fc.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L276902.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L276906.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L27690c.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L276912.  v0:= temp @kind object;
  #L276914.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L27691a.  v1:= temp;
  #L27691c.  if v1 == 0 then goto L276934;
  #L276920.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L276926.  v1:= temp @kind object;
  #L276928.  v1:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$a`) v1 @kind object;
  #L27692c.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L276932.  goto L276914;
  #L276934.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L276938.  call `onError`(v0, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27693e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L276950.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.keySelector` @type ^`io.reactivex.d0.k` @kind object;
  #L276954.  call temp:= `apply`(v0, v5) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L27695a.  v0:= temp @kind object;
  #L27695c.  if v0 == 0 then goto L276964;
  #L276960.  v1:= v0 @kind object;
  #L276962.  goto L276968;
  #L276964.  v1:= `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.NULL_KEY` @type ^`java.lang.Object` @kind object;
  #L276968.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L27696c.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L276972.  v2:= temp @kind object;
  #L276974.  v2:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$a`) v2 @kind object;
  #L276978.  if v2 != 0 then goto L2769b8;
  #L27697c.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L276980.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L276986.  v2:= temp;
  #L276988.  if v2 == 0 then goto L27698e;
  #L27698c.  return @kind void;
  #L27698e.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.bufferSize` @type ^`int`;
  #L276992.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.delayError` @type ^`boolean` @kind boolean;
  #L276996.  call temp:= `w`(v0, v2, v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.w:(Ljava/lang/Object;ILio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;Z)Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;` @kind static;
  #L27699c.  v2:= temp @kind object;
  #L27699e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.groups` @type ^`java.util.Map` @kind object;
  #L2769a2.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2769a8.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2769ae.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2769b2.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2769b8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.valueSelector` @type ^`io.reactivex.d0.k` @kind object;
  #L2769bc.  call temp:= `apply`(v0, v5) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2769c2.  v5:= temp @kind object;
  #L2769c4.  v0:= "The value supplied is null" @kind object;
  #L2769c8.  call temp:= `e`(v5, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2769ce.  v5:= temp @kind object;
  #L2769d0.  call `onNext`(v2, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L2769d6.  return @kind void;
  #L2769d8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2769da.  call `b`(v5) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2769e0.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2769e4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2769ea.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2769f0.  return @kind void;
  #L2769f2.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2769f4.  call `b`(v5) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2769fa.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2769fe.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L276a04.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L276a0a.  return @kind void;
  catch `java.lang.Throwable` @[L276950..L27695c] goto L2769f2;
  catch `java.lang.Throwable` @[L2769b8..L2769d0] goto L2769d8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L276a34.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L276a38.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L276a3e.  v0:= temp;
  #L276a40.  if v0 == 0 then goto L276a52;
  #L276a44.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L276a48.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L276a4c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L276a52.  return @kind void;
}
