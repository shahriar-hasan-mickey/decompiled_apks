record `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.d0.d` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.comparer` @AccessFlag FINAL;
  `io.reactivex.z` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.first` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.w3`[] `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.observers` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.ArrayCompositeDisposable` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.resources` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.second` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v2` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v0 @kind this, `io.reactivex.z` v1 @kind object, `int` v2 , `io.reactivex.r` v3 @kind object, `io.reactivex.r` v4 @kind object, `io.reactivex.d0.d` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.<init>:(Lio/reactivex/z;ILio/reactivex/r;Lio/reactivex/r;Lio/reactivex/d0/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27e728.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27e72e.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L27e732.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.r` := v3 @kind object;
  #L27e736.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.r` := v4 @kind object;
  #L27e73a.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.comparer` @type ^`io.reactivex.d0.d` := v5 @kind object;
  #L27e73e.  v1:= 2I;
  #L27e740.  v3:= new `io.reactivex.internal.operators.observable.w3`[v1];
  #L27e744.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.w3`[] := v3 @kind object;
  #L27e748.  v4:= new `io.reactivex.internal.operators.observable.w3`;
  #L27e74c.  v5:= 0I;
  #L27e74e.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/w3;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;II)V` @kind direct;
  #L27e754.  v3[v5]:= v4 @kind object;
  #L27e758.  v4:= new `io.reactivex.internal.operators.observable.w3`;
  #L27e75c.  v5:= 1I;
  #L27e75e.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/w3;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;II)V` @kind direct;
  #L27e764.  v3[v5]:= v4 @kind object;
  #L27e768.  v2:= new `io.reactivex.internal.disposables.ArrayCompositeDisposable`;
  #L27e76c.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L27e772.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L27e776.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v1 @kind this, `io.reactivex.internal.queue.a` v2 @kind object, `io.reactivex.internal.queue.a` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @AccessFlag  {
    temp;
    v0;

  #L27e788.  v0:= 1I;
  #L27e78a.  v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L27e78e.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e794.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e79a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27e7ac.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L27e7b0.  if v0 != 0 then goto L27e7f2;
  #L27e7b4.  v0:= 1I;
  #L27e7b6.  v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L27e7ba.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L27e7be.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L27e7c4.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27e7ca.  v1:= temp;
  #L27e7cc.  if v1 != 0 then goto L27e7f2;
  #L27e7d0.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.w3`[] @kind object;
  #L27e7d4.  v2:= 0I;
  #L27e7d6.  v2:= v1[v2] @kind object;
  #L27e7da.  v2:= v2.`io.reactivex.internal.operators.observable.w3.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27e7de.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e7e4.  v0:= v1[v0] @kind object;
  #L27e7e8.  v0:= v0.`io.reactivex.internal.operators.observable.w3.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27e7ec.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e7f2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v12 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L27e804.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27e80a.  v0:= temp;
  #L27e80c.  if v0 == 0 then goto L27e812;
  #L27e810.  return @kind void;
  #L27e812.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.w3`[] @kind object;
  #L27e816.  v1:= 0I;
  #L27e818.  v2:= v0[v1] @kind object;
  #L27e81c.  v3:= v2.`io.reactivex.internal.operators.observable.w3.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27e820.  v4:= 1I;
  #L27e822.  v0:= v0[v4] @kind object;
  #L27e826.  v5:= v0.`io.reactivex.internal.operators.observable.w3.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27e82a.  v6:= 1I;
  #L27e82c.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L27e830.  if v7 == 0 then goto L27e842;
  #L27e834.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e83a.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27e840.  return @kind void;
  #L27e842.  v7:= v2.`io.reactivex.internal.operators.observable.w3.e` @type ^`boolean` @kind boolean;
  #L27e846.  if v7 == 0 then goto L27e864;
  #L27e84a.  v8:= v2.`io.reactivex.internal.operators.observable.w3.f` @type ^`java.lang.Throwable` @kind object;
  #L27e84e.  if v8 == 0 then goto L27e864;
  #L27e852.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27e858.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L27e85c.  call `onError`(v0, v8) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27e862.  return @kind void;
  #L27e864.  v8:= v0.`io.reactivex.internal.operators.observable.w3.e` @type ^`boolean` @kind boolean;
  #L27e868.  if v8 == 0 then goto L27e886;
  #L27e86c.  v9:= v0.`io.reactivex.internal.operators.observable.w3.f` @type ^`java.lang.Throwable` @kind object;
  #L27e870.  if v9 == 0 then goto L27e886;
  #L27e874.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27e87a.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L27e87e.  call `onError`(v0, v9) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27e884.  return @kind void;
  #L27e886.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L27e88a.  if v9 != 0 then goto L27e89a;
  #L27e88e.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L27e894.  v9:= temp @kind object;
  #L27e896.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` := v9 @kind object;
  #L27e89a.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L27e89e.  if v9 != 0 then goto L27e8a6;
  #L27e8a2.  v9:= 1I;
  #L27e8a4.  goto L27e8a8;
  #L27e8a6.  v9:= 0I;
  #L27e8a8.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L27e8ac.  if v10 != 0 then goto L27e8bc;
  #L27e8b0.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L27e8b6.  v10:= temp @kind object;
  #L27e8b8.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` := v10 @kind object;
  #L27e8bc.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L27e8c0.  if v10 != 0 then goto L27e8c8;
  #L27e8c4.  v11:= 1I;
  #L27e8c6.  goto L27e8ca;
  #L27e8c8.  v11:= 0I;
  #L27e8ca.  if v7 == 0 then goto L27e8ea;
  #L27e8ce.  if v8 == 0 then goto L27e8ea;
  #L27e8d2.  if v9 == 0 then goto L27e8ea;
  #L27e8d6.  if v11 == 0 then goto L27e8ea;
  #L27e8da.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L27e8de.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L27e8e2.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L27e8e8.  return @kind void;
  #L27e8ea.  if v7 == 0 then goto L27e90c;
  #L27e8ee.  if v8 == 0 then goto L27e90c;
  #L27e8f2.  if v9 == v11 then goto L27e90c;
  #L27e8f6.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27e8fc.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L27e900.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L27e904.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L27e90a.  return @kind void;
  #L27e90c.  if v9 != 0 then goto L27e964;
  #L27e910.  if v11 != 0 then goto L27e964;
  #L27e914.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.comparer` @type ^`io.reactivex.d0.d` @kind object;
  #L27e918.  v8:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L27e91c.  call temp:= `a`(v7, v8, v10) @signature `Lio/reactivex/d0/d;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L27e922.  v7:= temp;
  #L27e924.  if v7 != 0 then goto L27e93e;
  #L27e928.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27e92e.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L27e932.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L27e936.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L27e93c.  return @kind void;
  #L27e93e.  v7:= 0I;
  #L27e940.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` := v7 @kind object;
  #L27e944.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` := v7 @kind object;
  #L27e948.  goto L27e964;
  #L27e94a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27e94c.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L27e952.  call `cancel`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.cancel:(Lio/reactivex/internal/queue/a;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27e958.  v1:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L27e95c.  call `onError`(v1, v0) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27e962.  return @kind void;
  #L27e964.  if v9 != 0 then goto L27e96c;
  #L27e968.  if v11 == 0 then goto L27e82c;
  #L27e96c.  v6:= -v6 @kind int;
  #L27e96e.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27e974.  v6:= temp;
  #L27e976.  if v6 != 0 then goto L27e82c;
  #L27e97a.  return @kind void;
  catch `java.lang.Throwable` @[L27e914..L27e924] goto L27e94a;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27e6f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L27e6f4.  return v0;
}
procedure `boolean` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.setDisposable:(Lio/reactivex/disposables/b;I)Z` @AccessFlag  {
    temp;
    v0;

  #L27e708.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.resources` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L27e70c.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/disposables/b;)Z` @kind virtual;
  #L27e712.  v2:= temp;
  #L27e714.  return v2;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.subscribe:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L27e998.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.w3`[] @kind object;
  #L27e99c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.r` @kind object;
  #L27e9a0.  v2:= 0I;
  #L27e9a2.  v2:= v0[v2] @kind object;
  #L27e9a6.  call `subscribe`(v1, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27e9ac.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.r` @kind object;
  #L27e9b0.  v2:= 1I;
  #L27e9b2.  v0:= v0[v2] @kind object;
  #L27e9b6.  call `subscribe`(v1, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27e9bc.  return @kind void;
}
