record `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface, `io.reactivex.internal.operators.observable.ObservableGroupJoin$a` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.disposables` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.error` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.leftEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.leftIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.lefts` @AccessFlag FINAL;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.queue` @AccessFlag FINAL;
  `io.reactivex.d0.c` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.resultSelector` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rightEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rightIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rights` @AccessFlag FINAL;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.LEFT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.LEFT_VALUE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.RIGHT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.RIGHT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2782c8.  v0:= 1I;
  #L2782ca.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2782d0.  v0:= temp @kind object;
  #L2782d2.  `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.LEFT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L2782d6.  v0:= 2I;
  #L2782d8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2782de.  v0:= temp @kind object;
  #L2782e0.  `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.RIGHT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L2782e4.  v0:= 3I;
  #L2782e6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2782ec.  v0:= temp @kind object;
  #L2782ee.  `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.LEFT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L2782f2.  v0:= 4I;
  #L2782f4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2782fa.  v0:= temp @kind object;
  #L2782fc.  `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.RIGHT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L278300.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v1 @kind this, `io.reactivex.t` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `io.reactivex.d0.k` v4 @kind object, `io.reactivex.d0.c` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;Lio/reactivex/d0/k;Lio/reactivex/d0/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L278314.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27831a.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.downstream` @type ^`io.reactivex.t` := v2 @kind object;
  #L27831e.  v2:= new `io.reactivex.disposables.a`;
  #L278322.  call `<init>`(v2) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L278328.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.disposables` @type ^`io.reactivex.disposables.a` := v2 @kind object;
  #L27832c.  v2:= new `io.reactivex.internal.queue.a`;
  #L278330.  call temp:= `c`() @signature `Lio/reactivex/n;.c:()I` @kind static;
  #L278336.  v0:= temp;
  #L278338.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L27833e.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.queue` @type ^`io.reactivex.internal.queue.a` := v2 @kind object;
  #L278342.  v2:= new `java.util.LinkedHashMap`;
  #L278346.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L27834c.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.lefts` @type ^`java.util.Map` := v2 @kind object;
  #L278350.  v2:= new `java.util.LinkedHashMap`;
  #L278354.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L27835a.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rights` @type ^`java.util.Map` := v2 @kind object;
  #L27835e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L278362.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L278368.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L27836c.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.leftEnd` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L278370.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rightEnd` @type ^`io.reactivex.d0.k` := v4 @kind object;
  #L278374.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.resultSelector` @type ^`io.reactivex.d0.c` := v5 @kind object;
  #L278378.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L27837c.  v3:= 2I;
  #L27837e.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L278384.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L278388.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;

  #L27839c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L2783a0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L2783a6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2783b8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L2783bc.  if v0 != 0 then goto L2783e2;
  #L2783c0.  v0:= 1I;
  #L2783c2.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2783c6.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.cancelAll:()V` @kind virtual;
  #L2783cc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2783d2.  v0:= temp;
  #L2783d4.  if v0 != 0 then goto L2783e2;
  #L2783d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2783dc.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2783e2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2783f4.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2783fa.  v0:= temp;
  #L2783fc.  if v0 == 0 then goto L278402;
  #L278400.  return @kind void;
  #L278402.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L278406.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L27840a.  v2:= 1I;
  #L27840c.  v3:= 1I;
  #L27840e.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L278412.  if v4 == 0 then goto L27841e;
  #L278416.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27841c.  return @kind void;
  #L27841e.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L278422.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L278428.  v4:= temp @kind object;
  #L27842a.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L27842e.  if v4 == 0 then goto L278446;
  #L278432.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L278438.  call `cancelAll`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.cancelAll:()V` @kind virtual;
  #L27843e.  call `errorAll`(v10, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.errorAll:(Lio/reactivex/t;)V` @kind virtual;
  #L278444.  return @kind void;
  #L278446.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27844a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L278450.  v4:= temp;
  #L278452.  v5:= 0I;
  #L278454.  if v4 != 0 then goto L27845c;
  #L278458.  v4:= 1I;
  #L27845a.  goto L27845e;
  #L27845c.  v4:= 0I;
  #L27845e.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L278464.  v6:= temp @kind object;
  #L278466.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L27846a.  if v6 != 0 then goto L278472;
  #L27846e.  v7:= 1I;
  #L278470.  goto L278474;
  #L278472.  v7:= 0I;
  #L278474.  if v4 == 0 then goto L2784a2;
  #L278478.  if v7 == 0 then goto L2784a2;
  #L27847c.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L278480.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L278486.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L27848a.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L278490.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L278494.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L27849a.  call `onComplete`(v1) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2784a0.  return @kind void;
  #L2784a2.  if v7 == 0 then goto L2784b6;
  #L2784a6.  v3:= -v3 @kind int;
  #L2784a8.  call temp:= `addAndGet`(v10, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2784ae.  v3:= temp;
  #L2784b0.  if v3 != 0 then goto L27840e;
  #L2784b4.  return @kind void;
  #L2784b6.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L2784bc.  v4:= temp @kind object;
  #L2784be.  v7:= `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L2784c2.  v8:= "The resultSelector returned a null value" @kind object;
  #L2784c6.  if v6 != v7 then goto L27859e;
  #L2784ca.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.leftIndex` @type ^`int`;
  #L2784ce.  v6:= v5 + 1;
  #L2784d2.  v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.leftIndex` @type ^`int` := v6;
  #L2784d6.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L2784da.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2784e0.  v7:= temp @kind object;
  #L2784e2.  call temp:= `put`(v6, v7, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2784e8.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.leftEnd` @type ^`io.reactivex.d0.k` @kind object;
  #L2784ec.  call temp:= `apply`(v6, v4) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2784f2.  v6:= temp @kind object;
  #L2784f4.  v7:= "The leftEnd returned a null ObservableSource" @kind object;
  #L2784f8.  call temp:= `e`(v6, v7) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2784fe.  v6:= temp @kind object;
  #L278500.  v6:= (`io.reactivex.r`) v6 @kind object;
  #L278504.  v7:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`;
  #L278508.  call `<init>`(v7, v10, v2, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;ZI)V` @kind direct;
  #L27850e.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L278512.  call temp:= `b`(v5, v7) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L278518.  call `subscribe`(v6, v7) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27851e.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L278522.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L278528.  v5:= temp @kind object;
  #L27852a.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L27852e.  if v5 == 0 then goto L278546;
  #L278532.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L278538.  call `cancelAll`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.cancelAll:()V` @kind virtual;
  #L27853e.  call `errorAll`(v10, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.errorAll:(Lio/reactivex/t;)V` @kind virtual;
  #L278544.  return @kind void;
  #L278546.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L27854a.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L278550.  v5:= temp @kind object;
  #L278552.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L278558.  v5:= temp @kind object;
  #L27855a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L278560.  v6:= temp;
  #L278562.  if v6 == 0 then goto L27840e;
  #L278566.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L27856c.  v6:= temp @kind object;
  #L27856e.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.resultSelector` @type ^`io.reactivex.d0.c` @kind object;
  #L278572.  call temp:= `apply`(v7, v4, v6) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L278578.  v6:= temp @kind object;
  #L27857a.  call temp:= `e`(v6, v8) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L278580.  v6:= temp @kind object;
  #L278582.  call `onNext`(v1, v6) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L278588.  goto L27855a;
  #L27858a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27858c.  call `fail`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/t;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L278592.  return @kind void;
  #L278594.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L278596.  call `fail`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/t;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27859c.  return @kind void;
  #L27859e.  v7:= `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L2785a2.  if v6 != v7 then goto L27867a;
  #L2785a6.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rightIndex` @type ^`int`;
  #L2785aa.  v7:= v6 + 1;
  #L2785ae.  v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rightIndex` @type ^`int` := v7;
  #L2785b2.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L2785b6.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2785bc.  v9:= temp @kind object;
  #L2785be.  call temp:= `put`(v7, v9, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2785c4.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rightEnd` @type ^`io.reactivex.d0.k` @kind object;
  #L2785c8.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2785ce.  v7:= temp @kind object;
  #L2785d0.  v9:= "The rightEnd returned a null ObservableSource" @kind object;
  #L2785d4.  call temp:= `e`(v7, v9) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2785da.  v7:= temp @kind object;
  #L2785dc.  v7:= (`io.reactivex.r`) v7 @kind object;
  #L2785e0.  v9:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`;
  #L2785e4.  call `<init>`(v9, v10, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;ZI)V` @kind direct;
  #L2785ea.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L2785ee.  call temp:= `b`(v5, v9) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2785f4.  call `subscribe`(v7, v9) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L2785fa.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2785fe.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L278604.  v5:= temp @kind object;
  #L278606.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L27860a.  if v5 == 0 then goto L278622;
  #L27860e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L278614.  call `cancelAll`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.cancelAll:()V` @kind virtual;
  #L27861a.  call `errorAll`(v10, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.errorAll:(Lio/reactivex/t;)V` @kind virtual;
  #L278620.  return @kind void;
  #L278622.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L278626.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L27862c.  v5:= temp @kind object;
  #L27862e.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L278634.  v5:= temp @kind object;
  #L278636.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L27863c.  v6:= temp;
  #L27863e.  if v6 == 0 then goto L27840e;
  #L278642.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L278648.  v6:= temp @kind object;
  #L27864a.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.resultSelector` @type ^`io.reactivex.d0.c` @kind object;
  #L27864e.  call temp:= `apply`(v7, v6, v4) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L278654.  v6:= temp @kind object;
  #L278656.  call temp:= `e`(v6, v8) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L27865c.  v6:= temp @kind object;
  #L27865e.  call `onNext`(v1, v6) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L278664.  goto L278636;
  #L278666.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L278668.  call `fail`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/t;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L27866e.  return @kind void;
  #L278670.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L278672.  call `fail`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/t;Lio/reactivex/internal/queue/a;)V` @kind virtual;
  #L278678.  return @kind void;
  #L27867a.  v5:= `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L27867e.  if v6 != v5 then goto L2786aa;
  #L278682.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`) v4 @kind object;
  #L278686.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L27868a.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.index` @type ^`int`;
  #L27868e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L278694.  v6:= temp @kind object;
  #L278696.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L27869c.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L2786a0.  call temp:= `a`(v5, v4) @signature `Lio/reactivex/disposables/a;.a:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2786a6.  goto L27840e;
  #L2786aa.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver`) v4 @kind object;
  #L2786ae.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L2786b2.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.index` @type ^`int`;
  #L2786b6.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2786bc.  v6:= temp @kind object;
  #L2786be.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2786c4.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L2786c8.  call temp:= `a`(v5, v4) @signature `Lio/reactivex/disposables/a;.a:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2786ce.  goto L27840e;
  catch `java.lang.Throwable` @[L2784e8..L278504] goto L278594;
  catch `java.lang.Throwable` @[L27856e..L278582] goto L27858a;
  catch `java.lang.Throwable` @[L2785c4..L2785e0] goto L278670;
  catch `java.lang.Throwable` @[L27864a..L27865e] goto L278666;
}
procedure `void` `errorAll`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v2 @kind this, `io.reactivex.t` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.errorAll:(Lio/reactivex/t;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L278714.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L278718.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L27871e.  v0:= temp @kind object;
  #L278720.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.lefts` @type ^`java.util.Map` @kind object;
  #L278724.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L27872a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.rights` @type ^`java.util.Map` @kind object;
  #L27872e.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L278734.  call `onError`(v3, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27873a.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object, `io.reactivex.t` v3 @kind object, `io.reactivex.internal.queue.a` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.fail:(Ljava/lang/Throwable;Lio/reactivex/t;Lio/reactivex/internal/queue/a;)V` @AccessFlag  {
    temp;
    v0;

  #L27874c.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L278752.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L278756.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L27875c.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L278762.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.cancelAll:()V` @kind virtual;
  #L278768.  call `errorAll`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.errorAll:(Lio/reactivex/t;)V` @kind virtual;
  #L27876e.  return @kind void;
}
procedure `void` `innerClose`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.innerClose:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L278780.  @monitorenter v1
  #L278782.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L278786.  if v2 == 0 then goto L278790;
  #L27878a.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L27878e.  goto L278794;
  #L278790.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.RIGHT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L278794.  call temp:= `l`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27879a.  @monitorexit v1
  #L27879c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.drain:()V` @kind virtual;
  #L2787a2.  return @kind void;
  #L2787a4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2787a6.  @monitorexit v1
  #L2787a8.  throw v2;
  catch `java.lang.Throwable` @[L278782..L27879c] goto L2787a4;
  catch `java.lang.Throwable` @[L2787a6..L2787a8] goto L2787a4;
}
procedure `void` `innerCloseError`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.innerCloseError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2787d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2787d4.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L2787da.  v0:= temp;
  #L2787dc.  if v0 == 0 then goto L2787e8;
  #L2787e0.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.drain:()V` @kind virtual;
  #L2787e6.  goto L2787ee;
  #L2787e8.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2787ee.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.innerComplete:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L278800.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L278804.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L27880a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27880e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L278814.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.drain:()V` @kind virtual;
  #L27881a.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27882c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L278830.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L278836.  v0:= temp;
  #L278838.  if v0 == 0 then goto L27884e;
  #L27883c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L278840.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L278846.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.drain:()V` @kind virtual;
  #L27884c.  goto L278854;
  #L27884e.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L278854.  return @kind void;
}
procedure `void` `innerValue`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.innerValue:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L278868.  @monitorenter v1
  #L27886a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27886e.  if v2 == 0 then goto L278878;
  #L278872.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L278876.  goto L27887c;
  #L278878.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L27887c.  call temp:= `l`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L278882.  @monitorexit v1
  #L278884.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.drain:()V` @kind virtual;
  #L27888a.  return @kind void;
  #L27888c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27888e.  @monitorexit v1
  #L278890.  throw v2;
  catch `java.lang.Throwable` @[L27886a..L278884] goto L27888c;
  catch `java.lang.Throwable` @[L27888e..L278890] goto L27888c;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$JoinDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2782b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$JoinDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L2782b4.  return v0;
}
