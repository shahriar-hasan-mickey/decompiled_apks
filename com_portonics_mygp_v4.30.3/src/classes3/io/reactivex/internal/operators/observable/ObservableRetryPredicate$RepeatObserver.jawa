record `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.m` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.predicate` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.remaining` @AccessFlag ;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.source` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `long` v2 , `io.reactivex.d0.m` v4 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v5 @kind object, `io.reactivex.r` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.<init>:(Lio/reactivex/t;JLio/reactivex/d0/m;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27d00c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27d012.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27d016.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v5 @kind object;
  #L27d01a.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.source` @type ^`io.reactivex.r` := v6 @kind object;
  #L27d01e.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.predicate` @type ^`io.reactivex.d0.m` := v4 @kind object;
  #L27d022.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.remaining` @type ^`long` := v2 @kind wide;
  #L27d026.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d038.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d03c.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27d042.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27d054.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.remaining` @type ^`long` @kind wide;
  #L27d058.  v2:= 9223372036854775807L;
  #L27d062.  v4:= lcmp(v0, v2);
  #L27d066.  if v4 == 0 then goto L27d076;
  #L27d06a.  v2:= 1L;
  #L27d06e.  v2:= v0 - v2 @kind long;
  #L27d072.  v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.remaining` @type ^`long` := v2 @kind wide;
  #L27d076.  v2:= 0L;
  #L27d07a.  v4:= lcmp(v0, v2);
  #L27d07e.  if v4 != 0 then goto L27d08e;
  #L27d082.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d086.  call `onError`(v0, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27d08c.  goto L27d0b0;
  #L27d08e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.predicate` @type ^`io.reactivex.d0.m` @kind object;
  #L27d092.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/d0/m;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L27d098.  v0:= temp;
  #L27d09a.  if v0 != 0 then goto L27d0aa;
  #L27d09e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d0a2.  call `onError`(v0, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27d0a8.  return @kind void;
  #L27d0aa.  call `subscribeNext`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.subscribeNext:()V` @kind virtual;
  #L27d0b0.  return @kind void;
  #L27d0b2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27d0b4.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L27d0ba.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d0be.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L27d0c2.  v3:= 2I;
  #L27d0c4.  v3:= new `java.lang.Throwable`[v3];
  #L27d0c8.  v4:= 0I;
  #L27d0ca.  v3[v4]:= v6 @kind object;
  #L27d0ce.  v6:= 1I;
  #L27d0d0.  v3[v6]:= v0 @kind object;
  #L27d0d4.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L27d0da.  call `onError`(v1, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27d0e0.  return @kind void;
  catch `java.lang.Throwable` @[L27d08e..L27d09a] goto L27d0b2;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d100.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d104.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27d10a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d11c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L27d120.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L27d126.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$RepeatObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27d138.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27d13e.  v0:= temp;
  #L27d140.  if v0 != 0 then goto L27d170;
  #L27d144.  v0:= 1I;
  #L27d146.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L27d14a.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L27d150.  v1:= temp;
  #L27d152.  if v1 == 0 then goto L27d158;
  #L27d156.  return @kind void;
  #L27d158.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatObserver.source` @type ^`io.reactivex.r` @kind object;
  #L27d15c.  call `subscribe`(v1, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27d162.  v0:= -v0 @kind int;
  #L27d164.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27d16a.  v0:= temp;
  #L27d16c.  if v0 != 0 then goto L27d146;
  #L27d170.  return @kind void;
}
