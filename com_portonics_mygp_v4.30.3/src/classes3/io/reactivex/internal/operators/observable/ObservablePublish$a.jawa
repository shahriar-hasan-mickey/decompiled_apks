record `io.reactivex.internal.operators.observable.ObservablePublish$a` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservablePublish$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$a.g` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] `@@io.reactivex.internal.operators.observable.ObservablePublish$a.b` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] `@@io.reactivex.internal.operators.observable.ObservablePublish$a.c` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L27a5e0.  v0:= 0I;
  #L27a5e2.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[v0];
  #L27a5e6.  `@@io.reactivex.internal.operators.observable.ObservablePublish$a.b` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] := v1 @kind object;
  #L27a5ea.  v0:= new `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[v0];
  #L27a5ee.  `@@io.reactivex.internal.operators.observable.ObservablePublish$a.c` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] := v0 @kind object;
  #L27a5f2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v2 @kind this, `java.util.concurrent.atomic.AtomicReference` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L27a604.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27a60a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27a60e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27a614.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L27a618.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27a61c.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$a.b` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L27a620.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L27a626.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L27a62a.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L27a62e.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L27a632.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L27a638.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$a.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L27a63c.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v4 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.a:(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27a560.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a564.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27a56a.  v0:= temp @kind object;
  #L27a56c.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L27a570.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$a.c` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L27a574.  v2:= 0I;
  #L27a576.  if v0 != v1 then goto L27a57c;
  #L27a57a.  return v2;
  #L27a57c.  v1:= length @variable v0;
  #L27a57e.  v3:= v1 + 1;
  #L27a582.  v3:= new `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[v3];
  #L27a586.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27a58c.  v3[v1]:= v5 @kind object;
  #L27a590.  v1:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a594.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27a59a.  v0:= temp;
  #L27a59c.  if v0 == 0 then goto L27a560;
  #L27a5a0.  v5:= 1I;
  #L27a5a2.  return v5;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v6 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.b:(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L27a798.  v0:= v6.`io.reactivex.internal.operators.observable.ObservablePublish$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a79c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27a7a2.  v0:= temp @kind object;
  #L27a7a4.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L27a7a8.  v1:= length @variable v0;
  #L27a7aa.  if v1 != 0 then goto L27a7b0;
  #L27a7ae.  return @kind void;
  #L27a7b0.  v2:= -1I;
  #L27a7b2.  v3:= 0I;
  #L27a7b4.  v4:= 0I;
  #L27a7b6.  if v4 >= v1 then goto L27a7d4;
  #L27a7ba.  v5:= v0[v4] @kind object;
  #L27a7be.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L27a7c4.  v5:= temp;
  #L27a7c6.  if v5 == 0 then goto L27a7ce;
  #L27a7ca.  v2:= v4;
  #L27a7cc.  goto L27a7d4;
  #L27a7ce.  v4:= v4 + 1;
  #L27a7d2.  goto L27a7b6;
  #L27a7d4.  if v2 >= 0 then goto L27a7da;
  #L27a7d8.  return @kind void;
  #L27a7da.  v4:= 1I;
  #L27a7dc.  if v1 != v4 then goto L27a7e6;
  #L27a7e0.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$a.b` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L27a7e4.  goto L27a804;
  #L27a7e6.  v5:= v1 + -1;
  #L27a7ea.  v5:= new `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[v5];
  #L27a7ee.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27a7f4.  v3:= v2 + 1;
  #L27a7f8.  v1:= v1 - v2 @kind int;
  #L27a7fa.  v1:= v1 - v4 @kind int;
  #L27a7fc.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27a802.  v1:= v5 @kind object;
  #L27a804.  v2:= v6.`io.reactivex.internal.operators.observable.ObservablePublish$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a808.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27a80e.  v0:= temp;
  #L27a810.  if v0 == 0 then goto L27a798;
  #L27a814.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27a650.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a654.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$a.c` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L27a658.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27a65e.  v0:= temp @kind object;
  #L27a660.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L27a664.  if v0 == v1 then goto L27a67e;
  #L27a668.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a66c.  v1:= 0I;
  #L27a66e.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27a674.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a678.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27a67e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27a5b4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a5b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27a5be.  v0:= temp @kind object;
  #L27a5c0.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$a.c` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L27a5c4.  if v0 != v1 then goto L27a5cc;
  #L27a5c8.  v0:= 1I;
  #L27a5ca.  goto L27a5ce;
  #L27a5cc.  v0:= 0I;
  #L27a5ce.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27a690.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a694.  v1:= 0I;
  #L27a696.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27a69c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a6a0.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$a.c` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L27a6a4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27a6aa.  v0:= temp @kind object;
  #L27a6ac.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L27a6b0.  v1:= length @variable v0;
  #L27a6b2.  v2:= 0I;
  #L27a6b4.  if v2 >= v1 then goto L27a6cc;
  #L27a6b8.  v3:= v0[v2] @kind object;
  #L27a6bc.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.child` @type ^`io.reactivex.t` @kind object;
  #L27a6c0.  call `onComplete`(v3) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27a6c6.  v2:= v2 + 1;
  #L27a6ca.  goto L27a6b4;
  #L27a6cc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27a6e0.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a6e4.  v1:= 0I;
  #L27a6e6.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27a6ec.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a6f0.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$a.c` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[] @kind object;
  #L27a6f4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27a6fa.  v0:= temp @kind object;
  #L27a6fc.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L27a700.  v1:= length @variable v0;
  #L27a702.  if v1 == 0 then goto L27a722;
  #L27a706.  v1:= length @variable v0;
  #L27a708.  v2:= 0I;
  #L27a70a.  if v2 >= v1 then goto L27a728;
  #L27a70e.  v3:= v0[v2] @kind object;
  #L27a712.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.child` @type ^`io.reactivex.t` @kind object;
  #L27a716.  call `onError`(v3, v5) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27a71c.  v2:= v2 + 1;
  #L27a720.  goto L27a70a;
  #L27a722.  call `t`(v5) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L27a728.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27a73c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a740.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27a746.  v0:= temp @kind object;
  #L27a748.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`[]) v0 @kind object;
  #L27a74c.  v1:= length @variable v0;
  #L27a74e.  v2:= 0I;
  #L27a750.  if v2 >= v1 then goto L27a768;
  #L27a754.  v3:= v0[v2] @kind object;
  #L27a758.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable.child` @type ^`io.reactivex.t` @kind object;
  #L27a75c.  call `onNext`(v3, v5) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27a762.  v2:= v2 + 1;
  #L27a766.  goto L27a750;
  #L27a768.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27a77c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a780.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27a786.  return @kind void;
}
