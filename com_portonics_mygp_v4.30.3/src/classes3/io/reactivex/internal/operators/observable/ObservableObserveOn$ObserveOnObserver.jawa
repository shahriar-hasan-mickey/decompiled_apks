record `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.t` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.error` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.outputFused` @AccessFlag ;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.sourceMode` @AccessFlag ;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.upstream` @AccessFlag ;
  `io.reactivex.x$a` `io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.x$a` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/x$a;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L279d8c.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L279d92.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L279d96.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.x$a` := v2 @kind object;
  #L279d9a.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.delayError` @type ^`boolean` := v3 @kind boolean;
  #L279d9e.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.bufferSize` @type ^`int` := v4;
  #L279da2.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.t` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.checkTerminated:(ZZLio/reactivex/t;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L279c70.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` @kind boolean;
  #L279c74.  v1:= 1I;
  #L279c76.  if v0 == 0 then goto L279c86;
  #L279c7a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L279c7e.  call `clear`(v3) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L279c84.  return v1;
  #L279c86.  if v3 == 0 then goto L279cfa;
  #L279c8a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L279c8e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.delayError` @type ^`boolean` @kind boolean;
  #L279c92.  if v0 == 0 then goto L279cbc;
  #L279c96.  if v4 == 0 then goto L279cfa;
  #L279c9a.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v1 @kind boolean;
  #L279c9e.  if v3 == 0 then goto L279caa;
  #L279ca2.  call `onError`(v5, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L279ca8.  goto L279cb0;
  #L279caa.  call `onComplete`(v5) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L279cb0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L279cb4.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L279cba.  return v1;
  #L279cbc.  if v3 == 0 then goto L279ce0;
  #L279cc0.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v1 @kind boolean;
  #L279cc4.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L279cc8.  call `clear`(v4) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L279cce.  call `onError`(v5, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L279cd4.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L279cd8.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L279cde.  return v1;
  #L279ce0.  if v4 == 0 then goto L279cfa;
  #L279ce4.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v1 @kind boolean;
  #L279ce8.  call `onComplete`(v5) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L279cee.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L279cf2.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L279cf8.  return v1;
  #L279cfa.  v3:= 0I;
  #L279cfc.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279db4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L279db8.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L279dbe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279dd0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` @kind boolean;
  #L279dd4.  if v0 != 0 then goto L279e08;
  #L279dd8.  v0:= 1I;
  #L279dda.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L279dde.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L279de2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L279de8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L279dec.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L279df2.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L279df8.  v0:= temp;
  #L279dfa.  if v0 != 0 then goto L279e08;
  #L279dfe.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L279e02.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L279e08.  return @kind void;
}
procedure `void` `drainFused`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.drainFused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L279e1c.  v0:= 1I;
  #L279e1e.  v1:= 1I;
  #L279e20.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` @kind boolean;
  #L279e24.  if v2 == 0 then goto L279e2a;
  #L279e28.  return @kind void;
  #L279e2a.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L279e2e.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L279e32.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.delayError` @type ^`boolean` @kind boolean;
  #L279e36.  if v4 != 0 then goto L279e60;
  #L279e3a.  if v2 == 0 then goto L279e60;
  #L279e3e.  if v3 == 0 then goto L279e60;
  #L279e42.  v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L279e46.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L279e4a.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L279e4e.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L279e54.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L279e58.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L279e5e.  return @kind void;
  #L279e60.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L279e64.  v4:= 0I;
  #L279e66.  call `onNext`(v3, v4) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L279e6c.  if v2 == 0 then goto L279e9e;
  #L279e70.  v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L279e74.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L279e78.  if v0 == 0 then goto L279e88;
  #L279e7c.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L279e80.  call `onError`(v1, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L279e86.  goto L279e92;
  #L279e88.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L279e8c.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L279e92.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L279e96.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L279e9c.  return @kind void;
  #L279e9e.  v1:= -v1 @kind int;
  #L279ea0.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L279ea6.  v1:= temp;
  #L279ea8.  if v1 != 0 then goto L279e20;
  #L279eac.  return @kind void;
}
procedure `void` `drainNormal`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.drainNormal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L279ec0.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L279ec4.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L279ec8.  v2:= 1I;
  #L279eca.  v3:= 1I;
  #L279ecc.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L279ed0.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L279ed6.  v5:= temp;
  #L279ed8.  call temp:= `checkTerminated`(v7, v4, v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.checkTerminated:(ZZLio/reactivex/t;)Z` @kind virtual;
  #L279ede.  v4:= temp;
  #L279ee0.  if v4 == 0 then goto L279ee6;
  #L279ee4.  return @kind void;
  #L279ee6.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L279eea.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L279ef0.  v5:= temp @kind object;
  #L279ef2.  if v5 != 0 then goto L279efa;
  #L279ef6.  v6:= 1I;
  #L279ef8.  goto L279efc;
  #L279efa.  v6:= 0I;
  #L279efc.  call temp:= `checkTerminated`(v7, v4, v6, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.checkTerminated:(ZZLio/reactivex/t;)Z` @kind virtual;
  #L279f02.  v4:= temp;
  #L279f04.  if v4 == 0 then goto L279f0a;
  #L279f08.  return @kind void;
  #L279f0a.  if v6 == 0 then goto L279f1e;
  #L279f0e.  v3:= -v3 @kind int;
  #L279f10.  call temp:= `addAndGet`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L279f16.  v3:= temp;
  #L279f18.  if v3 != 0 then goto L279ecc;
  #L279f1c.  return @kind void;
  #L279f1e.  call `onNext`(v1, v5) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L279f24.  goto L279ee6;
  #L279f26.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L279f28.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L279f2e.  v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` := v2 @kind boolean;
  #L279f32.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L279f36.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L279f3c.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L279f42.  call `onError`(v1, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L279f48.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L279f4c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L279f52.  return @kind void;
  catch `java.lang.Throwable` @[L279eea..L279ef2] goto L279f26;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279d10.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.disposed` @type ^`boolean` @kind boolean;
  #L279d14.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279d28.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L279d2c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L279d32.  v0:= temp;
  #L279d34.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279f70.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L279f74.  if v0 == 0 then goto L279f7a;
  #L279f78.  return @kind void;
  #L279f7a.  v0:= 1I;
  #L279f7c.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L279f80.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.schedule:()V` @kind virtual;
  #L279f86.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279f98.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L279f9c.  if v0 == 0 then goto L279fa8;
  #L279fa0.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L279fa6.  return @kind void;
  #L279fa8.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L279fac.  v2:= 1I;
  #L279fae.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L279fb2.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.schedule:()V` @kind virtual;
  #L279fb8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L279fcc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` @kind boolean;
  #L279fd0.  if v0 == 0 then goto L279fd6;
  #L279fd4.  return @kind void;
  #L279fd6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.sourceMode` @type ^`int`;
  #L279fda.  v1:= 2I;
  #L279fdc.  if v0 == v1 then goto L279fea;
  #L279fe0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L279fe4.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L279fea.  call `schedule`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.schedule:()V` @kind virtual;
  #L279ff0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27a004.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27a008.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27a00e.  v0:= temp;
  #L27a010.  if v0 == 0 then goto L27a088;
  #L27a014.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.upstream` @type ^`io.reactivex.disposables.b` := v3 @kind object;
  #L27a018.  v0:= instanceof @variable v3 @type ^`io.reactivex.e0.a.e` @kind boolean;
  #L27a01c.  if v0 == 0 then goto L27a06c;
  #L27a020.  v3:= (`io.reactivex.e0.a.e`) v3 @kind object;
  #L27a024.  v0:= 7I;
  #L27a026.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L27a02c.  v0:= temp;
  #L27a02e.  v1:= 1I;
  #L27a030.  if v0 != v1 then goto L27a052;
  #L27a034.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.sourceMode` @type ^`int` := v0;
  #L27a038.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L27a03c.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L27a040.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27a044.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27a04a.  call `schedule`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.schedule:()V` @kind virtual;
  #L27a050.  return @kind void;
  #L27a052.  v1:= 2I;
  #L27a054.  if v0 != v1 then goto L27a06c;
  #L27a058.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.sourceMode` @type ^`int` := v0;
  #L27a05c.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L27a060.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27a064.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27a06a.  return @kind void;
  #L27a06c.  v3:= new `io.reactivex.internal.queue.a`;
  #L27a070.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.bufferSize` @type ^`int`;
  #L27a074.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L27a07a.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L27a07e.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27a082.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27a088.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279d6c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L279d70.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L279d76.  v0:= temp @kind object;
  #L279d78.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279d48.  v0:= 2I;
  #L279d4a.  v2:= v2 ^& v0 @kind int;
  #L279d4c.  if v2 == 0 then goto L279d58;
  #L279d50.  v2:= 1I;
  #L279d52.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L279d56.  return v0;
  #L279d58.  v2:= 0I;
  #L279d5a.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27a09c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.outputFused` @type ^`boolean` @kind boolean;
  #L27a0a0.  if v0 == 0 then goto L27a0ac;
  #L27a0a4.  call `drainFused`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.drainFused:()V` @kind virtual;
  #L27a0aa.  goto L27a0b2;
  #L27a0ac.  call `drainNormal`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.drainNormal:()V` @kind virtual;
  #L27a0b2.  return @kind void;
}
procedure `void` `schedule`(`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$ObserveOnObserver;.schedule:()V` @AccessFlag  {
    temp;
    v0;

  #L27a0c4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27a0ca.  v0:= temp;
  #L27a0cc.  if v0 != 0 then goto L27a0da;
  #L27a0d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L27a0d4.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x$a;.b:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L27a0da.  return @kind void;
}
