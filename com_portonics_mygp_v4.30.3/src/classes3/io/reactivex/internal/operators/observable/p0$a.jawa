record `io.reactivex.internal.operators.observable.p0$a` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface {
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.p0$a.b` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.p0$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.p0$a.d` @AccessFlag ;
  `io.reactivex.internal.operators.observable.p0` `io.reactivex.internal.operators.observable.p0$a.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.p0$a` v0 @kind this, `io.reactivex.internal.operators.observable.p0` v1 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v2 @kind object, `io.reactivex.t` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/p0$a;.<init>:(Lio/reactivex/internal/operators/observable/p0;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L272de0.  v0.`io.reactivex.internal.operators.observable.p0$a.e` @type ^`io.reactivex.internal.operators.observable.p0` := v1 @kind object;
  #L272de4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L272dea.  v0.`io.reactivex.internal.operators.observable.p0$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L272dee.  v0.`io.reactivex.internal.operators.observable.p0$a.c` @type ^`io.reactivex.t` := v3 @kind object;
  #L272df2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.p0$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/p0$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L272e04.  v0:= v2.`io.reactivex.internal.operators.observable.p0$a.d` @type ^`boolean` @kind boolean;
  #L272e08.  if v0 == 0 then goto L272e0e;
  #L272e0c.  return @kind void;
  #L272e0e.  v0:= 1I;
  #L272e10.  v2.`io.reactivex.internal.operators.observable.p0$a.d` @type ^`boolean` := v0 @kind boolean;
  #L272e14.  v0:= v2.`io.reactivex.internal.operators.observable.p0$a.e` @type ^`io.reactivex.internal.operators.observable.p0` @kind object;
  #L272e18.  v0:= v0.`io.reactivex.internal.operators.observable.p0.b` @type ^`io.reactivex.r` @kind object;
  #L272e1c.  v1:= new `io.reactivex.internal.operators.observable.p0$a$a`;
  #L272e20.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/p0$a$a;.<init>:(Lio/reactivex/internal/operators/observable/p0$a;)V` @kind direct;
  #L272e26.  call `subscribe`(v0, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L272e2c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.p0$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/p0$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272e40.  v0:= v1.`io.reactivex.internal.operators.observable.p0$a.d` @type ^`boolean` @kind boolean;
  #L272e44.  if v0 == 0 then goto L272e50;
  #L272e48.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L272e4e.  return @kind void;
  #L272e50.  v0:= 1I;
  #L272e52.  v1.`io.reactivex.internal.operators.observable.p0$a.d` @type ^`boolean` := v0 @kind boolean;
  #L272e56.  v0:= v1.`io.reactivex.internal.operators.observable.p0$a.c` @type ^`io.reactivex.t` @kind object;
  #L272e5a.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L272e60.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.p0$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/p0$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L272e74.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/p0$a;.onComplete:()V` @kind virtual;
  #L272e7a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.p0$a` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/p0$a;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272e8c.  v0:= v1.`io.reactivex.internal.operators.observable.p0$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L272e90.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L272e96.  return @kind void;
}
