record `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L270a60.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L270a66.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L270a6a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` := v2 @kind object;
  #L270a6e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver;.dispose:()V` @AccessFlag  {
    temp;

  #L270a80.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L270a86.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L270a98.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` @kind object;
  #L270a9c.  v1:= 0I;
  #L270a9e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.active` @type ^`boolean` := v1 @kind boolean;
  #L270aa2.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @kind virtual;
  #L270aa8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L270abc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` @kind object;
  #L270ac0.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L270ac4.  call temp:= `addThrowable`(v1, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L270aca.  v1:= temp;
  #L270acc.  if v1 == 0 then goto L270af0;
  #L270ad0.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.tillTheEnd` @type ^`boolean` @kind boolean;
  #L270ad4.  if v3 != 0 then goto L270ae2;
  #L270ad8.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L270adc.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L270ae2.  v3:= 0I;
  #L270ae4.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.active` @type ^`boolean` := v3 @kind boolean;
  #L270ae8.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @kind virtual;
  #L270aee.  goto L270af6;
  #L270af0.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L270af6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270b08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L270b0c.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L270b12.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L270b24.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L270b2a.  return @kind void;
}
