record `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.delayError` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableZip$a`[] `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.row` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.zipper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L285518.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L28551e.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L285522.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.zipper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L285526.  v1:= new `io.reactivex.internal.operators.observable.ObservableZip$a`[v3];
  #L28552a.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableZip$a`[] := v1 @kind object;
  #L28552e.  v1:= new `java.lang.Object`[v3];
  #L285532.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.row` @type ^`java.lang.Object`[] := v1 @kind object;
  #L285536.  v0.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.delayError` @type ^`boolean` := v4 @kind boolean;
  #L28553a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @AccessFlag  {
    temp;

  #L28554c.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.clear:()V` @kind virtual;
  #L285552.  call `cancelSources`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancelSources:()V` @kind virtual;
  #L285558.  return @kind void;
}
procedure `void` `cancelSources`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancelSources:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28556c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableZip$a`[] @kind object;
  #L285570.  v1:= length @variable v0;
  #L285572.  v2:= 0I;
  #L285574.  if v2 >= v1 then goto L285588;
  #L285578.  v3:= v0[v2] @kind object;
  #L28557c.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L285582.  v2:= v2 + 1;
  #L285586.  goto L285574;
  #L285588.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.t` v5 @kind object, `boolean` v6 , `io.reactivex.internal.operators.observable.ObservableZip$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.checkTerminated:(ZZLio/reactivex/t;ZLio/reactivex/internal/operators/observable/ObservableZip$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L285488.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L28548c.  v1:= 1I;
  #L28548e.  if v0 == 0 then goto L28549a;
  #L285492.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L285498.  return v1;
  #L28549a.  if v3 == 0 then goto L2854ec;
  #L28549e.  if v6 == 0 then goto L2854c4;
  #L2854a2.  if v4 == 0 then goto L2854ec;
  #L2854a6.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.e` @type ^`java.lang.Throwable` @kind object;
  #L2854aa.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L2854b0.  if v3 == 0 then goto L2854bc;
  #L2854b4.  call `onError`(v5, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2854ba.  goto L2854c2;
  #L2854bc.  call `onComplete`(v5) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2854c2.  return v1;
  #L2854c4.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.e` @type ^`java.lang.Throwable` @kind object;
  #L2854c8.  if v3 == 0 then goto L2854da;
  #L2854cc.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L2854d2.  call `onError`(v5, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2854d8.  return v1;
  #L2854da.  if v4 == 0 then goto L2854ec;
  #L2854de.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L2854e4.  call `onComplete`(v5) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2854ea.  return v1;
  #L2854ec.  v3:= 0I;
  #L2854ee.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.clear:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28559c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableZip$a`[] @kind object;
  #L2855a0.  v1:= length @variable v0;
  #L2855a2.  v2:= 0I;
  #L2855a4.  if v2 >= v1 then goto L2855bc;
  #L2855a8.  v3:= v0[v2] @kind object;
  #L2855ac.  v3:= v3.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2855b0.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2855b6.  v2:= v2 + 1;
  #L2855ba.  goto L2855a4;
  #L2855bc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2855d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L2855d4.  if v0 != 0 then goto L2855f6;
  #L2855d8.  v0:= 1I;
  #L2855da.  v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2855de.  call `cancelSources`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancelSources:()V` @kind virtual;
  #L2855e4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2855ea.  v0:= temp;
  #L2855ec.  if v0 != 0 then goto L2855f6;
  #L2855f0.  call `clear`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.clear:()V` @kind virtual;
  #L2855f6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v20 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L285608.  v7:= v20 @kind object;
  #L28560c.  call temp:= `getAndIncrement`(v20) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L285612.  v0:= temp;
  #L285614.  if v0 == 0 then goto L28561a;
  #L285618.  return @kind void;
  #L28561a.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableZip$a`[] @kind object;
  #L28561e.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.downstream` @type ^`io.reactivex.t` @kind object;
  #L285622.  v9:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.row` @type ^`java.lang.Object`[] @kind object;
  #L285626.  v10:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.delayError` @type ^`boolean` @kind boolean;
  #L28562a.  v11:= 1I;
  #L28562c.  v12:= 1I;
  #L28562e.  v13:= length @variable v0;
  #L285630.  v14:= 0I;
  #L285632.  v15:= 0I;
  #L285634.  v16:= 0I;
  #L285638.  v17:= 0I;
  #L28563c.  if v15 >= v13 then goto L2856c0;
  #L285640.  v6:= v0[v15] @kind object;
  #L285644.  v1:= v9[v17] @kind object;
  #L285648.  if v1 != 0 then goto L285694;
  #L28564c.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableZip$a.d` @type ^`boolean` @kind boolean;
  #L285650.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L285654.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L28565a.  v18:= temp @kind object;
  #L28565c.  if v18 != 0 then goto L285666;
  #L285660.  v19:= 1I;
  #L285664.  goto L28566a;
  #L285666.  v19:= 0I;
  #L28566a.  v1:= v20 @kind object;
  #L28566e.  v3:= v19;
  #L285672.  v4:= v8 @kind object;
  #L285674.  v5:= v10;
  #L285676.  call temp:= `checkTerminated`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.checkTerminated:(ZZLio/reactivex/t;ZLio/reactivex/internal/operators/observable/ObservableZip$a;)Z` @kind virtual;
  #L28567c.  v1:= temp;
  #L28567e.  if v1 == 0 then goto L285684;
  #L285682.  return @kind void;
  #L285684.  if v19 != 0 then goto L28568e;
  #L285688.  v9[v17]:= v18 @kind object;
  #L28568c.  goto L2856b6;
  #L28568e.  v16:= v16 + 1;
  #L285692.  goto L2856b6;
  #L285694.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$a.d` @type ^`boolean` @kind boolean;
  #L285698.  if v1 == 0 then goto L2856b6;
  #L28569c.  if v10 != 0 then goto L2856b6;
  #L2856a0.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$a.e` @type ^`java.lang.Throwable` @kind object;
  #L2856a4.  if v1 == 0 then goto L2856b6;
  #L2856a8.  call `cancel`(v20) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L2856ae.  call `onError`(v8, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2856b4.  return @kind void;
  #L2856b6.  v17:= v17 + 1;
  #L2856ba.  v15:= v15 + 1;
  #L2856be.  goto L28563c;
  #L2856c0.  if v16 == 0 then goto L2856d4;
  #L2856c4.  v1:= -v12 @kind int;
  #L2856c6.  call temp:= `addAndGet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2856cc.  v12:= temp;
  #L2856ce.  if v12 != 0 then goto L28562e;
  #L2856d2.  return @kind void;
  #L2856d4.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.zipper` @type ^`io.reactivex.d0.k` @kind object;
  #L2856d8.  call temp:= `clone`(v9) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2856de.  v2:= temp @kind object;
  #L2856e0.  call temp:= `apply`(v1, v2) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2856e6.  v1:= temp @kind object;
  #L2856e8.  v2:= "The zipper returned a null value" @kind object;
  #L2856ec.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2856f2.  v1:= temp @kind object;
  #L2856f4.  call `onNext`(v8, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2856fa.  v1:= 0I;
  #L2856fc.  call `fill`(v9, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L285702.  goto L28562e;
  #L285704.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L285706.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28570c.  call `cancel`(v20) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.cancel:()V` @kind virtual;
  #L285712.  call `onError`(v8, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L285718.  return @kind void;
  catch `java.lang.Throwable` @[L2856d4..L2856f4] goto L285704;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285500.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L285504.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v5 @kind this, `io.reactivex.r`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.subscribe:([Lio/reactivex/r;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L285738.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.observable.ObservableZip$a`[] @kind object;
  #L28573c.  v1:= length @variable v0;
  #L28573e.  v2:= 0I;
  #L285740.  v3:= 0I;
  #L285742.  if v3 >= v1 then goto L28575a;
  #L285746.  v4:= new `io.reactivex.internal.operators.observable.ObservableZip$a`;
  #L28574a.  call `<init>`(v4, v5, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;I)V` @kind direct;
  #L285750.  v0[v3]:= v4 @kind object;
  #L285754.  v3:= v3 + 1;
  #L285758.  goto L285742;
  #L28575a.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L285760.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.downstream` @type ^`io.reactivex.t` @kind object;
  #L285764.  call `onSubscribe`(v7, v5) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L28576a.  if v2 >= v1 then goto L28578c;
  #L28576e.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L285772.  if v7 == 0 then goto L285778;
  #L285776.  return @kind void;
  #L285778.  v7:= v6[v2] @kind object;
  #L28577c.  v3:= v0[v2] @kind object;
  #L285780.  call `subscribe`(v7, v3) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L285786.  v2:= v2 + 1;
  #L28578a.  goto L28576a;
  #L28578c.  return @kind void;
}
