record `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `java.util.Iterator` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.util.concurrent.locks.Condition` `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.condition` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.error` @AccessFlag ;
  `java.util.concurrent.locks.Lock` `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @AccessFlag FINAL;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L26c800.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26c806.  v0:= new `io.reactivex.internal.queue.a`;
  #L26c80a.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L26c810.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @type ^`io.reactivex.internal.queue.a` := v0 @kind object;
  #L26c814.  v2:= new `java.util.concurrent.locks.ReentrantLock`;
  #L26c818.  call `<init>`(v2) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L26c81e.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` := v2 @kind object;
  #L26c822.  call temp:= `newCondition`(v2) @signature `Ljava/util/concurrent/locks/Lock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @kind interface;
  #L26c828.  v2:= temp @kind object;
  #L26c82a.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.condition` @type ^`java.util.concurrent.locks.Condition` := v2 @kind object;
  #L26c82e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L26c840.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26c846.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26c6d4.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.done` @type ^`boolean` @kind boolean;
  #L26c6d8.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L26c6dc.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L26c6e2.  v1:= temp;
  #L26c6e4.  if v0 == 0 then goto L26c702;
  #L26c6e8.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.error` @type ^`java.lang.Throwable` @kind object;
  #L26c6ec.  if v0 != 0 then goto L26c6f8;
  #L26c6f0.  if v1 == 0 then goto L26c702;
  #L26c6f4.  v0:= 0I;
  #L26c6f6.  return v0;
  #L26c6f8.  call temp:= `e`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L26c6fe.  v0:= temp @kind object;
  #L26c700.  throw v0;
  #L26c702.  if v1 == 0 then goto L26c76c;
  #L26c706.  call `b`() @signature `Lio/reactivex/internal/util/c;.b:()V` @kind static;
  #L26c70c.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L26c710.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L26c716.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.done` @type ^`boolean` @kind boolean;
  #L26c71a.  if v0 != 0 then goto L26c73a;
  #L26c71e.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L26c722.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L26c728.  v0:= temp;
  #L26c72a.  if v0 == 0 then goto L26c73a;
  #L26c72e.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.condition` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L26c732.  call `await`(v0) @signature `Ljava/util/concurrent/locks/Condition;.await:()V` @kind interface;
  #L26c738.  goto L26c716;
  #L26c73a.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L26c73e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L26c744.  goto L26c6d4;
  #L26c746.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26c748.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L26c74c.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L26c752.  throw v0;
  #L26c754.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L26c756.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26c75c.  call `signalConsumer`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.signalConsumer:()V` @kind virtual;
  #L26c762.  call temp:= `e`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L26c768.  v0:= temp @kind object;
  #L26c76a.  throw v0;
  #L26c76c.  v0:= 1I;
  #L26c76e.  return v0;
  catch `java.lang.InterruptedException` @[L26c706..L26c716] goto L26c754;
  catch `java.lang.Throwable` @[L26c716..L26c738] goto L26c746;
  catch `java.lang.InterruptedException` @[L26c73a..L26c754] goto L26c754;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c7a0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26c7a6.  v0:= temp @kind object;
  #L26c7a8.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L26c7ac.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L26c7b2.  v0:= temp;
  #L26c7b4.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c7c8.  call temp:= `hasNext`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.hasNext:()Z` @kind virtual;
  #L26c7ce.  v0:= temp;
  #L26c7d0.  if v0 == 0 then goto L26c7e2;
  #L26c7d4.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L26c7d8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L26c7de.  v0:= temp @kind object;
  #L26c7e0.  return v0 @kind object;
  #L26c7e2.  v0:= new `java.util.NoSuchElementException`;
  #L26c7e6.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L26c7ec.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c858.  v0:= 1I;
  #L26c85a.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.done` @type ^`boolean` := v0 @kind boolean;
  #L26c85e.  call `signalConsumer`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.signalConsumer:()V` @kind virtual;
  #L26c864.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L26c878.  v0.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L26c87c.  v1:= 1I;
  #L26c87e.  v0.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.done` @type ^`boolean` := v1 @kind boolean;
  #L26c882.  call `signalConsumer`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.signalConsumer:()V` @kind virtual;
  #L26c888.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26c89c.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L26c8a0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L26c8a6.  call `signalConsumer`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.signalConsumer:()V` @kind virtual;
  #L26c8ac.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L26c8c0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26c8c6.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26c8d8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L26c8dc.  v1:= "remove" @kind object;
  #L26c8e0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L26c8e6.  throw v0;
}
procedure `void` `signalConsumer`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.signalConsumer:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26c8f8.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L26c8fc.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L26c902.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.condition` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L26c906.  call `signalAll`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signalAll:()V` @kind interface;
  #L26c90c.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L26c910.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L26c916.  return @kind void;
  #L26c918.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26c91a.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator.lock` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L26c91e.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L26c924.  throw v0;
  catch `java.lang.Throwable` @[L26c902..L26c90c] goto L26c918;
}
