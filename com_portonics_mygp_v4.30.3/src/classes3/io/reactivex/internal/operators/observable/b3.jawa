record `io.reactivex.internal.operators.observable.b3` @kind class @AccessFlag FINAL extends `io.reactivex.r` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.b3.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.b3` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/b3;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27a828.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27a82e.  v0.`io.reactivex.internal.operators.observable.b3.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L27a832.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.b3` v3 @kind this, `io.reactivex.t` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/b3;.subscribe:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27a844.  v0:= new `io.reactivex.internal.operators.observable.ObservablePublish$InnerDisposable`;
  #L27a848.  call `<init>`(v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.<init>:(Lio/reactivex/t;)V` @kind direct;
  #L27a84e.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27a854.  v4:= v3.`io.reactivex.internal.operators.observable.b3.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a858.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27a85e.  v4:= temp @kind object;
  #L27a860.  v4:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`) v4 @kind object;
  #L27a864.  if v4 == 0 then goto L27a874;
  #L27a868.  call temp:= `isDisposed`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.isDisposed:()Z` @kind virtual;
  #L27a86e.  v1:= temp;
  #L27a870.  if v1 == 0 then goto L27a896;
  #L27a874.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`;
  #L27a878.  v2:= v3.`io.reactivex.internal.operators.observable.b3.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a87c.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L27a882.  v2:= v3.`io.reactivex.internal.operators.observable.b3.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27a886.  call temp:= `compareAndSet`(v2, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27a88c.  v4:= temp;
  #L27a88e.  if v4 != 0 then goto L27a894;
  #L27a892.  goto L27a854;
  #L27a894.  v4:= v1 @kind object;
  #L27a896.  call temp:= `a`(v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.a:(Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;)Z` @kind virtual;
  #L27a89c.  v1:= temp;
  #L27a89e.  if v1 == 0 then goto L27a854;
  #L27a8a2.  call `setParent`(v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$InnerDisposable;.setParent:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)V` @kind virtual;
  #L27a8a8.  return @kind void;
}
