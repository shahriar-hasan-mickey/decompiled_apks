record `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.capacityHint` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.count` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.size` @AccessFlag ;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.upstream` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.<init>:(Lio/reactivex/t;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2829e4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2829ea.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L2829ee.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.count` @type ^`long` := v2 @kind wide;
  #L2829f2.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.capacityHint` @type ^`int` := v4;
  #L2829f6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282a08.  v0:= 1I;
  #L282a0a.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L282a0e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2829cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @type ^`boolean` @kind boolean;
  #L2829d0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L282a20.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L282a24.  if v0 == 0 then goto L282a34;
  #L282a28.  v1:= 0I;
  #L282a2a.  v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L282a2e.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L282a34.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282a38.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L282a3e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L282a50.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L282a54.  if v0 == 0 then goto L282a64;
  #L282a58.  v1:= 0I;
  #L282a5a.  v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L282a5e.  call `onError`(v0, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L282a64.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282a68.  call `onError`(v0, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L282a6e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L282a80.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L282a84.  if v0 != 0 then goto L282aaa;
  #L282a88.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @type ^`boolean` @kind boolean;
  #L282a8c.  if v1 != 0 then goto L282aaa;
  #L282a90.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.capacityHint` @type ^`int`;
  #L282a94.  call temp:= `z`(v0, v5) @signature `Lio/reactivex/subjects/UnicastSubject;.z:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L282a9a.  v0:= temp @kind object;
  #L282a9c.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v0 @kind object;
  #L282aa0.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282aa4.  call `onNext`(v1, v0) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L282aaa.  if v0 == 0 then goto L282af4;
  #L282aae.  call `onNext`(v0, v6) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L282ab4.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.size` @type ^`long` @kind wide;
  #L282ab8.  v3:= 1L;
  #L282abc.  v1:= v1 + v3 @kind long;
  #L282abe.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.size` @type ^`long` := v1 @kind wide;
  #L282ac2.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.count` @type ^`long` @kind wide;
  #L282ac6.  v6:= lcmp(v1, v3);
  #L282aca.  if v6 < 0 then goto L282af4;
  #L282ace.  v1:= 0L;
  #L282ad2.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.size` @type ^`long` := v1 @kind wide;
  #L282ad6.  v6:= 0I;
  #L282ad8.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L282adc.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L282ae2.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @type ^`boolean` @kind boolean;
  #L282ae6.  if v6 == 0 then goto L282af4;
  #L282aea.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L282aee.  call `dispose`(v6) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L282af4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282b08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L282b0c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L282b12.  v0:= temp;
  #L282b14.  if v0 == 0 then goto L282b26;
  #L282b18.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L282b1c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282b20.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L282b26.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282b38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.cancelled` @type ^`boolean` @kind boolean;
  #L282b3c.  if v0 == 0 then goto L282b4a;
  #L282b40.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L282b44.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L282b4a.  return @kind void;
}
