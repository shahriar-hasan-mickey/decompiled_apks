record `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.bufferSupplier` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.count` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.index` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.skip` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.<init>:(Lio/reactivex/t;IILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26dedc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L26dee2.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L26dee6.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.count` @type ^`int` := v2;
  #L26deea.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.skip` @type ^`int` := v3;
  #L26deee.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L26def2.  v1:= new `java.util.ArrayDeque`;
  #L26def6.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L26defc.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L26df00.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26df14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26df18.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26df1e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26debc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26dec0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L26dec6.  v0:= temp;
  #L26dec8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26df30.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L26df34.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L26df3a.  v0:= temp;
  #L26df3c.  if v0 != 0 then goto L26df58;
  #L26df40.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26df44.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L26df48.  call temp:= `poll`(v1) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L26df4e.  v1:= temp @kind object;
  #L26df50.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26df56.  goto L26df30;
  #L26df58.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26df5c.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26df62.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26df74.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L26df78.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L26df7e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26df82.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26df88.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26df9c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.index` @type ^`long` @kind wide;
  #L26dfa0.  v2:= 1L;
  #L26dfa4.  v2:= v2 + v0 @kind long;
  #L26dfa6.  v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.index` @type ^`long` := v2 @kind wide;
  #L26dfaa.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.skip` @type ^`int`;
  #L26dfae.  v2:= (`long`) v2 @kind i2l;
  #L26dfb0.  v0:= v0 %% v2 @kind long;
  #L26dfb2.  v2:= 0L;
  #L26dfb6.  v4:= lcmp(v0, v2);
  #L26dfba.  if v4 != 0 then goto L26e008;
  #L26dfbe.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L26dfc2.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L26dfc8.  v0:= temp @kind object;
  #L26dfca.  v1:= "The bufferSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L26dfce.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26dfd4.  v0:= temp @kind object;
  #L26dfd6.  v0:= (`java.util.Collection`) v0 @kind object;
  #L26dfda.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L26dfde.  call temp:= `offer`(v1, v0) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L26dfe4.  goto L26e008;
  #L26dfe6.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26dfe8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L26dfec.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L26dff2.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26dff6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26dffc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26e000.  call `onError`(v0, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26e006.  return @kind void;
  #L26e008.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L26e00c.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L26e012.  v0:= temp @kind object;
  #L26e014.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L26e01a.  v1:= temp;
  #L26e01c.  if v1 == 0 then goto L26e054;
  #L26e020.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L26e026.  v1:= temp @kind object;
  #L26e028.  v1:= (`java.util.Collection`) v1 @kind object;
  #L26e02c.  call temp:= `add`(v1, v6) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L26e032.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.count` @type ^`int`;
  #L26e036.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L26e03c.  v3:= temp;
  #L26e03e.  if v2 > v3 then goto L26e014;
  #L26e042.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L26e048.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26e04c.  call `onNext`(v2, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26e052.  goto L26e014;
  #L26e054.  return @kind void;
  catch `java.lang.Throwable` @[L26dfbe..L26dfda] goto L26dfe6;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26e074.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L26e078.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26e07e.  v0:= temp;
  #L26e080.  if v0 == 0 then goto L26e092;
  #L26e084.  v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L26e088.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26e08c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26e092.  return @kind void;
}
