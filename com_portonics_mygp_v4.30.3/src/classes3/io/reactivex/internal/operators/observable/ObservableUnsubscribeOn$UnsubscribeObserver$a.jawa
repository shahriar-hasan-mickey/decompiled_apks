record `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L282600.  v0.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` := v1 @kind object;
  #L282604.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28260a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28261c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver` @kind object;
  #L282620.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L282624.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28262a.  return @kind void;
}
