record `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.combiner` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[] `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.observers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.values` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v1 @kind this, `io.reactivex.t` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L284f4c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L284f52.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` := v2 @kind object;
  #L284f56.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.combiner` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L284f5a.  v2:= new `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[v4];
  #L284f5e.  v3:= 0I;
  #L284f60.  if v3 >= v4 then goto L284f78;
  #L284f64.  v0:= new `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`;
  #L284f68.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;I)V` @kind direct;
  #L284f6e.  v2[v3]:= v0 @kind object;
  #L284f72.  v3:= v3 + 1;
  #L284f76.  goto L284f60;
  #L284f78.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.observers` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[] := v2 @kind object;
  #L284f7c.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L284f80.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L284f86.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.values` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L284f8a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L284f8e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L284f94.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L284f98.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L284f9c.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L284fa2.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L284fa6.  return @kind void;
}
procedure `void` `cancelAllBut`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.cancelAllBut:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L284fb8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.observers` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[] @kind object;
  #L284fbc.  v1:= 0I;
  #L284fbe.  v2:= length @variable v0;
  #L284fc0.  if v1 >= v2 then goto L284fd8;
  #L284fc4.  if v1 == v4 then goto L284fd2;
  #L284fc8.  v2:= v0[v1] @kind object;
  #L284fcc.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestInnerObserver;.dispose:()V` @kind virtual;
  #L284fd2.  v1:= v1 + 1;
  #L284fd6.  goto L284fbe;
  #L284fd8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L284fec.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L284ff0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L284ff6.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.observers` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[] @kind object;
  #L284ffa.  v1:= length @variable v0;
  #L284ffc.  v2:= 0I;
  #L284ffe.  if v2 >= v1 then goto L285012;
  #L285002.  v3:= v0[v2] @kind object;
  #L285006.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestInnerObserver;.dispose:()V` @kind virtual;
  #L28500c.  v2:= v2 + 1;
  #L285010.  goto L284ffe;
  #L285012.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.innerComplete:(IZ)V` @AccessFlag  {
    temp;

  #L285024.  if v2 != 0 then goto L285042;
  #L285028.  v2:= 1I;
  #L28502a.  v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L28502e.  call `cancelAllBut`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.cancelAllBut:(I)V` @kind virtual;
  #L285034.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L285038.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L28503c.  call `a`(v1, v0, v2) @signature `Lio/reactivex/internal/util/g;.a:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L285042.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.innerError:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L285054.  v0:= 1I;
  #L285056.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L28505a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28505e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L285064.  call `cancelAllBut`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.cancelAllBut:(I)V` @kind virtual;
  #L28506a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L28506e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L285072.  call `c`(v2, v3, v1, v0) @signature `Lio/reactivex/internal/util/g;.c:(Lio/reactivex/t;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L285078.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.innerNext:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L28508c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.values` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L285090.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L285096.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L284f20.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L284f24.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L284f2a.  v0:= temp @kind object;
  #L284f2c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L284f30.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L284f36.  v0:= temp;
  #L284f38.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2850a8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` @kind boolean;
  #L2850ac.  if v0 != 0 then goto L2850cc;
  #L2850b0.  v0:= 1I;
  #L2850b2.  v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L2850b6.  v0:= -1I;
  #L2850b8.  call `cancelAllBut`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.cancelAllBut:(I)V` @kind virtual;
  #L2850be.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2850c2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2850c6.  call `a`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.a:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L2850cc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2850e0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` @kind boolean;
  #L2850e4.  if v0 == 0 then goto L2850f0;
  #L2850e8.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2850ee.  return @kind void;
  #L2850f0.  v0:= 1I;
  #L2850f2.  v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L2850f6.  v0:= -1I;
  #L2850f8.  call `cancelAllBut`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.cancelAllBut:(I)V` @kind virtual;
  #L2850fe.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L285102.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L285106.  call `c`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.c:(Lio/reactivex/t;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L28510c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L285120.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` @kind boolean;
  #L285124.  if v0 == 0 then goto L28512a;
  #L285128.  return @kind void;
  #L28512a.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.values` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L28512e.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L285134.  v1:= temp;
  #L285136.  v2:= v1 + 1;
  #L28513a.  v2:= new `java.lang.Object`[v2];
  #L28513e.  v3:= 0I;
  #L285140.  v2[v3]:= v5 @kind object;
  #L285144.  if v3 >= v1 then goto L285160;
  #L285148.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28514e.  v5:= temp @kind object;
  #L285150.  if v5 != 0 then goto L285156;
  #L285154.  return @kind void;
  #L285156.  v3:= v3 + 1;
  #L28515a.  v2[v3]:= v5 @kind object;
  #L28515e.  goto L285144;
  #L285160.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.combiner` @type ^`io.reactivex.d0.k` @kind object;
  #L285164.  call temp:= `apply`(v5, v2) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L28516a.  v5:= temp @kind object;
  #L28516c.  v0:= "combiner returned a null value" @kind object;
  #L285170.  call temp:= `e`(v5, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L285176.  v5:= temp @kind object;
  #L285178.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L28517c.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L285180.  call `e`(v0, v5, v4, v1) @signature `Lio/reactivex/internal/util/g;.e:(Lio/reactivex/t;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L285186.  return @kind void;
  #L285188.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28518a.  call `b`(v5) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L285190.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.dispose:()V` @kind virtual;
  #L285196.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L28519c.  return @kind void;
  catch `java.lang.Throwable` @[L285160..L285178] goto L285188;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2851bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2851c0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2851c6.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver` v5 @kind this, `io.reactivex.r`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$WithLatestFromObserver;.subscribe:([Lio/reactivex/r;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2851d8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.observers` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestInnerObserver`[] @kind object;
  #L2851dc.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2851e0.  v2:= 0I;
  #L2851e2.  if v2 >= v7 then goto L28521c;
  #L2851e6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2851ec.  v3:= temp @kind object;
  #L2851ee.  v3:= (`io.reactivex.disposables.b`) v3 @kind object;
  #L2851f2.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2851f8.  v3:= temp;
  #L2851fa.  if v3 != 0 then goto L28521c;
  #L2851fe.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver.done` @type ^`boolean` @kind boolean;
  #L285202.  if v3 == 0 then goto L285208;
  #L285206.  goto L28521c;
  #L285208.  v3:= v6[v2] @kind object;
  #L28520c.  v4:= v0[v2] @kind object;
  #L285210.  call `subscribe`(v3, v4) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L285216.  v2:= v2 + 1;
  #L28521a.  goto L2851e2;
  #L28521c.  return @kind void;
}
