record `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.boundaryObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.capacityHint` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.errors` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.stopWindows` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @AccessFlag FINAL;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.NEXT_WINDOW` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L282e58.  v0:= new `java.lang.Object`;
  #L282e5c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L282e62.  `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` := v0 @kind object;
  #L282e66.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.<init>:(Lio/reactivex/t;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L282e78.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L282e7e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L282e82.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.capacityHint` @type ^`int` := v2;
  #L282e86.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a`;
  #L282e8a.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;)V` @kind direct;
  #L282e90.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.boundaryObserver` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` := v1 @kind object;
  #L282e94.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L282e98.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L282e9e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L282ea2.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L282ea6.  v2:= 1I;
  #L282ea8.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L282eae.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L282eb2.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L282eb6.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L282ebc.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L282ec0.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L282ec4.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L282eca.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L282ece.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L282ed2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L282ed8.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L282edc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L282ef0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L282ef4.  v1:= 0I;
  #L282ef6.  v2:= 1I;
  #L282ef8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L282efe.  v0:= temp;
  #L282f00.  if v0 == 0 then goto L282f28;
  #L282f04.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.boundaryObserver` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L282f08.  call `dispose`(v0) @signature `Lio/reactivex/observers/b;.dispose:()V` @kind virtual;
  #L282f0e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L282f12.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L282f18.  v0:= temp;
  #L282f1a.  if v0 != 0 then goto L282f28;
  #L282f1e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L282f22.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L282f28.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L282f3c.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L282f42.  v0:= temp;
  #L282f44.  if v0 == 0 then goto L282f4a;
  #L282f48.  return @kind void;
  #L282f4a.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282f4e.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L282f52.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L282f56.  v3:= 1I;
  #L282f58.  v4:= 1I;
  #L282f5a.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L282f5e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L282f64.  v5:= temp;
  #L282f66.  v6:= 0I;
  #L282f68.  if v5 != 0 then goto L282f78;
  #L282f6c.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L282f72.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L282f76.  return @kind void;
  #L282f78.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L282f7c.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @type ^`boolean` @kind boolean;
  #L282f80.  if v7 == 0 then goto L282fb4;
  #L282f84.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L282f8a.  v8:= temp @kind object;
  #L282f8c.  if v8 == 0 then goto L282fb4;
  #L282f90.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L282f96.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L282f9c.  v1:= temp @kind object;
  #L282f9e.  if v5 == 0 then goto L282fac;
  #L282fa2.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L282fa6.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L282fac.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L282fb2.  return @kind void;
  #L282fb4.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L282fba.  v8:= temp @kind object;
  #L282fbc.  if v8 != 0 then goto L282fc4;
  #L282fc0.  v9:= 1I;
  #L282fc2.  goto L282fc6;
  #L282fc4.  v9:= 0I;
  #L282fc6.  if v7 == 0 then goto L283006;
  #L282fca.  if v9 == 0 then goto L283006;
  #L282fce.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L282fd4.  v1:= temp @kind object;
  #L282fd6.  if v1 != 0 then goto L282ff0;
  #L282fda.  if v5 == 0 then goto L282fe8;
  #L282fde.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L282fe2.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L282fe8.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L282fee.  goto L283004;
  #L282ff0.  if v5 == 0 then goto L282ffe;
  #L282ff4.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L282ff8.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L282ffe.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L283004.  return @kind void;
  #L283006.  if v9 == 0 then goto L28301a;
  #L28300a.  v4:= -v4 @kind int;
  #L28300c.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L283012.  v4:= temp;
  #L283014.  if v4 != 0 then goto L282f5a;
  #L283018.  return @kind void;
  #L28301a.  v7:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L28301e.  if v8 == v7 then goto L28302a;
  #L283022.  call `onNext`(v5, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L283028.  goto L282f5a;
  #L28302a.  if v5 == 0 then goto L283038;
  #L28302e.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L283032.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L283038.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L28303c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L283042.  v5:= temp;
  #L283044.  if v5 != 0 then goto L282f5a;
  #L283048.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.capacityHint` @type ^`int`;
  #L28304c.  call temp:= `z`(v5, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.z:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L283052.  v5:= temp @kind object;
  #L283054.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v5 @kind object;
  #L283058.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L28305c.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L283062.  call `onNext`(v0, v5) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L283068.  goto L282f5a;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L28307c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L283080.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L283086.  v0:= 1I;
  #L283088.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L28308c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L283092.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L2830a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2830a8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2830ae.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2830b2.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2830b8.  v0:= temp;
  #L2830ba.  if v0 == 0 then goto L2830cc;
  #L2830be.  v2:= 1I;
  #L2830c0.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L2830c4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L2830ca.  goto L2830d2;
  #L2830cc.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2830d2.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2830e4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L2830e8.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L2830ec.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L2830f2.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L2830f8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282e38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L282e3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L282e42.  v0:= temp;
  #L282e44.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28310c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.boundaryObserver` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L283110.  call `dispose`(v0) @signature `Lio/reactivex/observers/b;.dispose:()V` @kind virtual;
  #L283116.  v0:= 1I;
  #L283118.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L28311c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L283122.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L283134.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.boundaryObserver` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L283138.  call `dispose`(v0) @signature `Lio/reactivex/observers/b;.dispose:()V` @kind virtual;
  #L28313e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L283142.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L283148.  v0:= temp;
  #L28314a.  if v0 == 0 then goto L28315c;
  #L28314e.  v2:= 1I;
  #L283150.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L283154.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L28315a.  goto L283162;
  #L28315c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L283162.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L283174.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L283178.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L28317e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L283184.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L283198.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28319c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2831a2.  v2:= temp;
  #L2831a4.  if v2 == 0 then goto L2831ae;
  #L2831a8.  call `innerNext`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerNext:()V` @kind virtual;
  #L2831ae.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2831c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2831c4.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2831ca.  v0:= temp;
  #L2831cc.  if v0 != 0 then goto L2831da;
  #L2831d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2831d4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2831da.  return @kind void;
}
