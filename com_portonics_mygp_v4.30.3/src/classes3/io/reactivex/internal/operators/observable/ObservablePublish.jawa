record `io.reactivex.internal.operators.observable.ObservablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.f0.a` @kind class {
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservablePublish.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish.c` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservablePublish.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish` v0 @kind this, `io.reactivex.r` v1 @kind object, `io.reactivex.r` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.<init>:(Lio/reactivex/r;Lio/reactivex/r;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L27ab0c.  call `<init>`(v0) @signature `Lio/reactivex/f0/a;.<init>:()V` @kind direct;
  #L27ab12.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.d` @type ^`io.reactivex.r` := v1 @kind object;
  #L27ab16.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.b` @type ^`io.reactivex.r` := v2 @kind object;
  #L27ab1a.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L27ab1e.  return @kind void;
}
procedure `io.reactivex.f0.a` `y`(`io.reactivex.r` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.y:(Lio/reactivex/r;)Lio/reactivex/f0/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L27aad4.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27aad8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27aade.  v1:= new `io.reactivex.internal.operators.observable.b3`;
  #L27aae2.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/b3;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L27aae8.  v2:= new `io.reactivex.internal.operators.observable.ObservablePublish`;
  #L27aaec.  call `<init>`(v2, v1, v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.<init>:(Lio/reactivex/r;Lio/reactivex/r;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L27aaf2.  call temp:= `q`(v2) @signature `Lio/reactivex/g0/a;.q:(Lio/reactivex/f0/a;)Lio/reactivex/f0/a;` @kind static;
  #L27aaf8.  v3:= temp @kind object;
  #L27aafa.  return v3 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservablePublish` v1 @kind this, `io.reactivex.t` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L27abe4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish.d` @type ^`io.reactivex.r` @kind object;
  #L27abe8.  call `subscribe`(v0, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27abee.  return @kind void;
}
procedure `void` `w`(`io.reactivex.internal.operators.observable.ObservablePublish` v4 @kind this, `io.reactivex.d0.g` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.w:(Lio/reactivex/d0/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27ab30.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27ab34.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27ab3a.  v0:= temp @kind object;
  #L27ab3c.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`) v0 @kind object;
  #L27ab40.  if v0 == 0 then goto L27ab50;
  #L27ab44.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.isDisposed:()Z` @kind virtual;
  #L27ab4a.  v1:= temp;
  #L27ab4c.  if v1 == 0 then goto L27ab72;
  #L27ab50.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`;
  #L27ab54.  v2:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27ab58.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L27ab5e.  v2:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27ab62.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27ab68.  v0:= temp;
  #L27ab6a.  if v0 != 0 then goto L27ab70;
  #L27ab6e.  goto L27ab30;
  #L27ab70.  v0:= v1 @kind object;
  #L27ab72.  v1:= v0.`io.reactivex.internal.operators.observable.ObservablePublish$a.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L27ab76.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L27ab7c.  v1:= temp;
  #L27ab7e.  v2:= 1I;
  #L27ab80.  v3:= 0I;
  #L27ab82.  if v1 != 0 then goto L27ab98;
  #L27ab86.  v1:= v0.`io.reactivex.internal.operators.observable.ObservablePublish$a.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L27ab8a.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L27ab90.  v1:= temp;
  #L27ab92.  if v1 == 0 then goto L27ab98;
  #L27ab96.  goto L27ab9a;
  #L27ab98.  v2:= 0I;
  #L27ab9a.  call `accept`(v5, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L27aba0.  if v2 == 0 then goto L27abae;
  #L27aba4.  v5:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.b` @type ^`io.reactivex.r` @kind object;
  #L27aba8.  call `subscribe`(v5, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27abae.  return @kind void;
  #L27abb0.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27abb2.  call `b`(v5) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L27abb8.  call temp:= `e`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L27abbe.  v5:= temp @kind object;
  #L27abc0.  goto L27abc4;
  #L27abc2.  throw v5;
  #L27abc4.  goto L27abc2;
  catch `java.lang.Throwable` @[L27ab9a..L27aba0] goto L27abb0;
}
