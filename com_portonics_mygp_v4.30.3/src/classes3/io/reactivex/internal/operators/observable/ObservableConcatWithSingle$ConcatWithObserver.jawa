record `io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.z` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.inSingle` @AccessFlag ;
  `io.reactivex.a0` `io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.other` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.a0` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/a0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L271bc4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L271bca.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L271bce.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.other` @type ^`io.reactivex.a0` := v2 @kind object;
  #L271bd2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L271be4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L271bea.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271b9c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L271ba2.  v0:= temp @kind object;
  #L271ba4.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L271ba8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L271bae.  v0:= temp;
  #L271bb0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L271bfc.  v0:= 1I;
  #L271bfe.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.inSingle` @type ^`boolean` := v0 @kind boolean;
  #L271c02.  v0:= 0I;
  #L271c04.  call temp:= `replace`(v2, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L271c0a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.other` @type ^`io.reactivex.a0` @kind object;
  #L271c0e.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.other` @type ^`io.reactivex.a0` := v0 @kind object;
  #L271c12.  call `b`(v1, v2) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L271c18.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271c2c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271c30.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L271c36.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271c48.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271c4c.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L271c52.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L271c64.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L271c6a.  v1:= temp;
  #L271c6c.  if v1 == 0 then goto L271c82;
  #L271c70.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.inSingle` @type ^`boolean` @kind boolean;
  #L271c74.  if v1 != 0 then goto L271c82;
  #L271c78.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271c7c.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L271c82.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithSingle$ConcatWithObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271c94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271c98.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L271c9e.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271ca2.  call `onComplete`(v2) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L271ca8.  return @kind void;
}
