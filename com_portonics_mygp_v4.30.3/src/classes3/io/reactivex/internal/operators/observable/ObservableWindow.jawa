record `io.reactivex.internal.operators.observable.ObservableWindow` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `long` `io.reactivex.internal.operators.observable.ObservableWindow.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindow.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindow` v0 @kind this, `io.reactivex.r` v1 @kind object, `long` v2 , `long` v4 , `int` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow;.<init>:(Lio/reactivex/r;JJI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L284c0c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/r;)V` @kind direct;
  #L284c12.  v0.`io.reactivex.internal.operators.observable.ObservableWindow.c` @type ^`long` := v2 @kind wide;
  #L284c16.  v0.`io.reactivex.internal.operators.observable.ObservableWindow.d` @type ^`long` := v4 @kind wide;
  #L284c1a.  v0.`io.reactivex.internal.operators.observable.ObservableWindow.e` @type ^`int` := v6;
  #L284c1e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableWindow` v9 @kind this, `io.reactivex.t` v10 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L284c30.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.c` @type ^`long` @kind wide;
  #L284c34.  v2:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.d` @type ^`long` @kind wide;
  #L284c38.  v4:= lcmp(v0, v2);
  #L284c3c.  if v4 != 0 then goto L284c5e;
  #L284c40.  v0:= v9.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L284c44.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindow$WindowExactObserver`;
  #L284c48.  v2:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.c` @type ^`long` @kind wide;
  #L284c4c.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.e` @type ^`int`;
  #L284c50.  call `<init>`(v1, v10, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowExactObserver;.<init>:(Lio/reactivex/t;JI)V` @kind direct;
  #L284c56.  call `subscribe`(v0, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L284c5c.  goto L284c82;
  #L284c5e.  v0:= v9.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L284c62.  v8:= new `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver`;
  #L284c66.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.c` @type ^`long` @kind wide;
  #L284c6a.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.d` @type ^`long` @kind wide;
  #L284c6e.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableWindow.e` @type ^`int`;
  #L284c72.  v1:= v8 @kind object;
  #L284c74.  v2:= v10 @kind object;
  #L284c76.  call `<init>`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.<init>:(Lio/reactivex/t;JJI)V` @kind direct;
  #L284c7c.  call `subscribe`(v0, v8) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L284c82.  return @kind void;
}
