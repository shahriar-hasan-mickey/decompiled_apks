record `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferClose` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferOpen` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferSupplier` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.errors` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.index` @AccessFlag ;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @AccessFlag FINAL;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.r` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/r;Lio/reactivex/d0/k;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26e1b0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26e1b6.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L26e1ba.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L26e1be.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferOpen` @type ^`io.reactivex.r` := v2 @kind object;
  #L26e1c2.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferClose` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L26e1c6.  v1:= new `io.reactivex.internal.queue.a`;
  #L26e1ca.  call temp:= `c`() @signature `Lio/reactivex/n;.c:()I` @kind static;
  #L26e1d0.  v2:= temp;
  #L26e1d2.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L26e1d8.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @type ^`io.reactivex.internal.queue.a` := v1 @kind object;
  #L26e1dc.  v1:= new `io.reactivex.disposables.a`;
  #L26e1e0.  call `<init>`(v1) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L26e1e6.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.a` := v1 @kind object;
  #L26e1ea.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L26e1ee.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26e1f4.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L26e1f8.  v1:= new `java.util.LinkedHashMap`;
  #L26e1fc.  call `<init>`(v1) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L26e202.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` := v1 @kind object;
  #L26e206.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L26e20a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L26e210.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L26e214.  return @kind void;
}
procedure `void` `boundaryError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.boundaryError:(Lio/reactivex/disposables/b;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L26e228.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26e22c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26e232.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.a` @kind object;
  #L26e236.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L26e23c.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L26e242.  return @kind void;
}
procedure `void` `close`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v3 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.close:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L26e254.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.a` @kind object;
  #L26e258.  call temp:= `c`(v0, v4) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L26e25e.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.a` @kind object;
  #L26e262.  call temp:= `e`(v4) @signature `Lio/reactivex/disposables/a;.e:()I` @kind virtual;
  #L26e268.  v4:= temp;
  #L26e26a.  v0:= 1I;
  #L26e26c.  if v4 != 0 then goto L26e27e;
  #L26e270.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26e274.  call temp:= `dispose`(v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26e27a.  v4:= 1I;
  #L26e27c.  goto L26e280;
  #L26e27e.  v4:= 0I;
  #L26e280.  @monitorenter v3
  #L26e282.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` @kind object;
  #L26e286.  if v1 != 0 then goto L26e28e;
  #L26e28a.  @monitorexit v3
  #L26e28c.  return @kind void;
  #L26e28e.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L26e292.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L26e298.  v5:= temp @kind object;
  #L26e29a.  call temp:= `remove`(v1, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26e2a0.  v5:= temp @kind object;
  #L26e2a2.  call temp:= `offer`(v2, v5) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L26e2a8.  @monitorexit v3
  #L26e2aa.  if v4 == 0 then goto L26e2b2;
  #L26e2ae.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L26e2b2.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.drain:()V` @kind virtual;
  #L26e2b8.  return @kind void;
  #L26e2ba.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26e2bc.  @monitorexit v3
  #L26e2be.  throw v4;
  catch `java.lang.Throwable` @[L26e282..L26e2aa] goto L26e2ba;
  catch `java.lang.Throwable` @[L26e2bc..L26e2be] goto L26e2ba;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26e2e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26e2e8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26e2ee.  v0:= temp;
  #L26e2f0.  if v0 == 0 then goto L26e32c;
  #L26e2f4.  v0:= 1I;
  #L26e2f6.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L26e2fa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.a` @kind object;
  #L26e2fe.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L26e304.  @monitorenter v1
  #L26e306.  v0:= 0I;
  #L26e308.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` := v0 @kind object;
  #L26e30c.  @monitorexit v1
  #L26e30e.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26e314.  v0:= temp;
  #L26e316.  if v0 == 0 then goto L26e32c;
  #L26e31a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L26e31e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L26e324.  goto L26e32c;
  #L26e326.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26e328.  @monitorexit v1
  #L26e32a.  throw v0;
  #L26e32c.  return @kind void;
  catch `java.lang.Throwable` @[L26e308..L26e30e] goto L26e326;
  catch `java.lang.Throwable` @[L26e328..L26e32a] goto L26e326;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L26e354.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26e35a.  v0:= temp;
  #L26e35c.  if v0 == 0 then goto L26e362;
  #L26e360.  return @kind void;
  #L26e362.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26e366.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L26e36a.  v2:= 1I;
  #L26e36c.  v3:= 1I;
  #L26e36e.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.cancelled` @type ^`boolean` @kind boolean;
  #L26e372.  if v4 == 0 then goto L26e37e;
  #L26e376.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L26e37c.  return @kind void;
  #L26e37e.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @type ^`boolean` @kind boolean;
  #L26e382.  if v4 == 0 then goto L26e3b0;
  #L26e386.  v5:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26e38a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26e390.  v5:= temp @kind object;
  #L26e392.  if v5 == 0 then goto L26e3b0;
  #L26e396.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L26e39c.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26e3a0.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26e3a6.  v1:= temp @kind object;
  #L26e3a8.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26e3ae.  return @kind void;
  #L26e3b0.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L26e3b6.  v5:= temp @kind object;
  #L26e3b8.  v5:= (`java.util.Collection`) v5 @kind object;
  #L26e3bc.  if v5 != 0 then goto L26e3c4;
  #L26e3c0.  v6:= 1I;
  #L26e3c2.  goto L26e3c6;
  #L26e3c4.  v6:= 0I;
  #L26e3c6.  if v4 == 0 then goto L26e3d6;
  #L26e3ca.  if v6 == 0 then goto L26e3d6;
  #L26e3ce.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26e3d4.  return @kind void;
  #L26e3d6.  if v6 == 0 then goto L26e3ea;
  #L26e3da.  v3:= -v3 @kind int;
  #L26e3dc.  call temp:= `addAndGet`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L26e3e2.  v3:= temp;
  #L26e3e4.  if v3 != 0 then goto L26e36e;
  #L26e3e8.  return @kind void;
  #L26e3ea.  call `onNext`(v0, v5) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26e3f0.  goto L26e36e;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26e184.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26e188.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26e18e.  v0:= temp @kind object;
  #L26e190.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L26e194.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L26e19a.  v0:= temp;
  #L26e19c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L26e404.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.a` @kind object;
  #L26e408.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L26e40e.  @monitorenter v3
  #L26e410.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` @kind object;
  #L26e414.  if v0 != 0 then goto L26e41c;
  #L26e418.  @monitorexit v3
  #L26e41a.  return @kind void;
  #L26e41c.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L26e422.  v0:= temp @kind object;
  #L26e424.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L26e42a.  v0:= temp @kind object;
  #L26e42c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L26e432.  v1:= temp;
  #L26e434.  if v1 == 0 then goto L26e450;
  #L26e438.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L26e43e.  v1:= temp @kind object;
  #L26e440.  v1:= (`java.util.Collection`) v1 @kind object;
  #L26e444.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L26e448.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L26e44e.  goto L26e42c;
  #L26e450.  v0:= 0I;
  #L26e452.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` := v0 @kind object;
  #L26e456.  @monitorexit v3
  #L26e458.  v0:= 1I;
  #L26e45a.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L26e45e.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.drain:()V` @kind virtual;
  #L26e464.  return @kind void;
  #L26e466.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26e468.  @monitorexit v3
  #L26e46a.  goto L26e46e;
  #L26e46c.  throw v0;
  #L26e46e.  goto L26e46c;
  catch `java.lang.Throwable` @[L26e410..L26e458] goto L26e466;
  catch `java.lang.Throwable` @[L26e468..L26e46a] goto L26e466;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26e494.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L26e498.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26e49e.  v0:= temp;
  #L26e4a0.  if v0 == 0 then goto L26e4cc;
  #L26e4a4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.a` @kind object;
  #L26e4a8.  call `dispose`(v2) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L26e4ae.  @monitorenter v1
  #L26e4b0.  v2:= 0I;
  #L26e4b2.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` := v2 @kind object;
  #L26e4b6.  @monitorexit v1
  #L26e4b8.  v2:= 1I;
  #L26e4ba.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L26e4be.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.drain:()V` @kind virtual;
  #L26e4c4.  goto L26e4d2;
  #L26e4c6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26e4c8.  @monitorexit v1
  #L26e4ca.  throw v2;
  #L26e4cc.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26e4d2.  return @kind void;
  catch `java.lang.Throwable` @[L26e4b2..L26e4b8] goto L26e4c6;
  catch `java.lang.Throwable` @[L26e4c8..L26e4ca] goto L26e4c6;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26e4f8.  @monitorenter v2
  #L26e4fa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` @kind object;
  #L26e4fe.  if v0 != 0 then goto L26e506;
  #L26e502.  @monitorexit v2
  #L26e504.  return @kind void;
  #L26e506.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L26e50c.  v0:= temp @kind object;
  #L26e50e.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L26e514.  v0:= temp @kind object;
  #L26e516.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L26e51c.  v1:= temp;
  #L26e51e.  if v1 == 0 then goto L26e536;
  #L26e522.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L26e528.  v1:= temp @kind object;
  #L26e52a.  v1:= (`java.util.Collection`) v1 @kind object;
  #L26e52e.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L26e534.  goto L26e516;
  #L26e536.  @monitorexit v2
  #L26e538.  return @kind void;
  #L26e53a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26e53c.  @monitorexit v2
  #L26e53e.  goto L26e542;
  #L26e540.  throw v3;
  #L26e542.  goto L26e540;
  catch `java.lang.Throwable` @[L26e4fa..L26e53e] goto L26e53a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26e560.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26e564.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26e56a.  v2:= temp;
  #L26e56c.  if v2 == 0 then goto L26e58e;
  #L26e570.  v2:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver`;
  #L26e574.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;)V` @kind direct;
  #L26e57a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.a` @kind object;
  #L26e57e.  call temp:= `b`(v0, v2) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L26e584.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferOpen` @type ^`io.reactivex.r` @kind object;
  #L26e588.  call `subscribe`(v0, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L26e58e.  return @kind void;
}
procedure `void` `open`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.open:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26e5a0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L26e5a4.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L26e5aa.  v0:= temp @kind object;
  #L26e5ac.  v1:= "The bufferSupplier returned a null Collection" @kind object;
  #L26e5b0.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26e5b6.  v0:= temp @kind object;
  #L26e5b8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L26e5bc.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.bufferClose` @type ^`io.reactivex.d0.k` @kind object;
  #L26e5c0.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26e5c6.  v6:= temp @kind object;
  #L26e5c8.  v1:= "The bufferClose returned a null ObservableSource" @kind object;
  #L26e5cc.  call temp:= `e`(v6, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26e5d2.  v6:= temp @kind object;
  #L26e5d4.  v6:= (`io.reactivex.r`) v6 @kind object;
  #L26e5d8.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.index` @type ^`long` @kind wide;
  #L26e5dc.  v3:= 1L;
  #L26e5e0.  v3:= v3 + v1 @kind long;
  #L26e5e2.  v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.index` @type ^`long` := v3 @kind wide;
  #L26e5e6.  @monitorenter v5
  #L26e5e8.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.buffers` @type ^`java.util.Map` @kind object;
  #L26e5ec.  if v3 != 0 then goto L26e5f4;
  #L26e5f0.  @monitorexit v5
  #L26e5f2.  return @kind void;
  #L26e5f4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L26e5fa.  v4:= temp @kind object;
  #L26e5fc.  call temp:= `put`(v3, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26e602.  @monitorexit v5
  #L26e604.  v0:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver`;
  #L26e608.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;J)V` @kind direct;
  #L26e60e.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.a` @kind object;
  #L26e612.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L26e618.  call `subscribe`(v6, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L26e61e.  return @kind void;
  #L26e620.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26e622.  @monitorexit v5
  #L26e624.  throw v6;
  #L26e626.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26e628.  call `b`(v6) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26e62e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26e632.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26e638.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L26e63e.  return @kind void;
  catch `java.lang.Throwable` @[L26e5a0..L26e5d8] goto L26e626;
  catch `java.lang.Throwable` @[L26e5e8..L26e604] goto L26e620;
  catch `java.lang.Throwable` @[L26e622..L26e624] goto L26e620;
}
procedure `void` `openComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.openComplete:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver$BufferOpenObserver;)V` @AccessFlag  {
    temp;
    v0;

  #L26e670.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.a` @kind object;
  #L26e674.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L26e67a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.observers` @type ^`io.reactivex.disposables.a` @kind object;
  #L26e67e.  call temp:= `e`(v2) @signature `Lio/reactivex/disposables/a;.e:()I` @kind virtual;
  #L26e684.  v2:= temp;
  #L26e686.  if v2 != 0 then goto L26e6a0;
  #L26e68a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26e68e.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26e694.  v2:= 1I;
  #L26e696.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L26e69a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.drain:()V` @kind virtual;
  #L26e6a0.  return @kind void;
}
