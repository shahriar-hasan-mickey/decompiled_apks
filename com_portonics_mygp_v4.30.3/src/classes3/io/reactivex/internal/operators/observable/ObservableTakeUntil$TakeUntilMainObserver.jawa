record `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.otherObserver` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L280800.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L280806.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L28080a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28080e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L280814.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L280818.  v1:= new `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver`;
  #L28081c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;)V` @kind direct;
  #L280822.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` := v1 @kind object;
  #L280826.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L28082a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L280830.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L280834.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L280848.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28084c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L280852.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` @kind object;
  #L280856.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28085c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2807d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2807d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2807de.  v0:= temp @kind object;
  #L2807e0.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2807e4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2807ea.  v0:= temp;
  #L2807ec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L280870.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` @kind object;
  #L280874.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28087a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L28087e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L280882.  call `a`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.a:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L280888.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28089c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` @kind object;
  #L2808a0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2808a6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2808aa.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2808ae.  call `c`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.c:(Lio/reactivex/t;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L2808b4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2808c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2808cc.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2808d0.  call `e`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.e:(Lio/reactivex/t;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L2808d6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2808e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2808ec.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2808f2.  return @kind void;
}
procedure `void` `otherComplete`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.otherComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L280904.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L280908.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28090e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L280912.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L280916.  call `a`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.a:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L28091c.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L280930.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L280934.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28093a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L28093e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L280942.  call `c`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.c:(Lio/reactivex/t;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L280948.  return @kind void;
}
