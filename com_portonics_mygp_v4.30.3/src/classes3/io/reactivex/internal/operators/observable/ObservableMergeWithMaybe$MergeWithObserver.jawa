record `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.disposed` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDone` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @AccessFlag VOLATILE;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.OTHER_STATE_CONSUMED_OR_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.OTHER_STATE_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L279520.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L279526.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27952a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27952e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L279534.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L279538.  v1:= new `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver`;
  #L27953c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;)V` @kind direct;
  #L279542.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver` := v1 @kind object;
  #L279546.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L27954a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L279550.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L279554.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279568.  v0:= 1I;
  #L27956a.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L27956e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L279572.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L279578.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver` @kind object;
  #L27957c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L279582.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L279588.  v0:= temp;
  #L27958a.  if v0 != 0 then goto L279598;
  #L27958e.  v0:= 0I;
  #L279590.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v0 @kind object;
  #L279594.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v0 @kind object;
  #L279598.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L2795ac.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2795b2.  v0:= temp;
  #L2795b4.  if v0 != 0 then goto L2795be;
  #L2795b8.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L2795be.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2795d0.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2795d4.  v1:= 1I;
  #L2795d6.  v2:= 1I;
  #L2795d8.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.disposed` @type ^`boolean` @kind boolean;
  #L2795dc.  v4:= 0I;
  #L2795de.  if v3 == 0 then goto L2795ec;
  #L2795e2.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L2795e6.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v4 @kind object;
  #L2795ea.  return @kind void;
  #L2795ec.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2795f0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2795f6.  v3:= temp @kind object;
  #L2795f8.  if v3 == 0 then goto L279618;
  #L2795fc.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L279600.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v4 @kind object;
  #L279604.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L279608.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L27960e.  v1:= temp @kind object;
  #L279610.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L279616.  return @kind void;
  #L279618.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int`;
  #L27961c.  v5:= 2I;
  #L27961e.  if v3 != v1 then goto L279636;
  #L279622.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` @kind object;
  #L279626.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L27962a.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v5;
  #L27962e.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L279634.  v3:= 2I;
  #L279636.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L27963a.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L27963e.  if v7 == 0 then goto L27964c;
  #L279642.  call temp:= `poll`(v7) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L279648.  v7:= temp @kind object;
  #L27964a.  goto L27964e;
  #L27964c.  v7:= v4 @kind object;
  #L27964e.  if v7 != 0 then goto L279656;
  #L279652.  v8:= 1I;
  #L279654.  goto L279658;
  #L279656.  v8:= 0I;
  #L279658.  if v6 == 0 then goto L279670;
  #L27965c.  if v8 == 0 then goto L279670;
  #L279660.  if v3 != v5 then goto L279670;
  #L279664.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v4 @kind object;
  #L279668.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27966e.  return @kind void;
  #L279670.  if v8 == 0 then goto L279684;
  #L279674.  v2:= -v2 @kind int;
  #L279676.  call temp:= `addAndGet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27967c.  v2:= temp;
  #L27967e.  if v2 != 0 then goto L2795d8;
  #L279682.  return @kind void;
  #L279684.  call `onNext`(v0, v7) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27968a.  goto L2795d8;
}
procedure `io.reactivex.e0.a.i` `getOrCreateQueue`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/e0/a/i;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2794f0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L2794f4.  if v0 != 0 then goto L27950e;
  #L2794f8.  v0:= new `io.reactivex.internal.queue.a`;
  #L2794fc.  call temp:= `c`() @signature `Lio/reactivex/n;.c:()I` @kind static;
  #L279502.  v1:= temp;
  #L279504.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L27950a.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v0 @kind object;
  #L27950e.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2794c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2794c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2794ce.  v0:= temp @kind object;
  #L2794d0.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2794d4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2794da.  v0:= temp;
  #L2794dc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27969c.  v0:= 1I;
  #L27969e.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDone` @type ^`boolean` := v0 @kind boolean;
  #L2796a2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L2796a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2796bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2796c0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2796c6.  v0:= temp;
  #L2796c8.  if v0 == 0 then goto L2796de;
  #L2796cc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2796d0.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2796d6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L2796dc.  goto L2796e4;
  #L2796de.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2796e4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2796f8.  v0:= 0I;
  #L2796fa.  v1:= 1I;
  #L2796fc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L279702.  v0:= temp;
  #L279704.  if v0 == 0 then goto L279720;
  #L279708.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27970c.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L279712.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L279718.  v3:= temp;
  #L27971a.  if v3 != 0 then goto L27973c;
  #L27971e.  return @kind void;
  #L279720.  call temp:= `getOrCreateQueue`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/e0/a/i;` @kind virtual;
  #L279726.  v0:= temp @kind object;
  #L279728.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L27972e.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L279734.  v3:= temp;
  #L279736.  if v3 == 0 then goto L27973c;
  #L27973a.  return @kind void;
  #L27973c.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L279742.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279754.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L279758.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27975e.  return @kind void;
}
procedure `void` `otherComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.otherComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L279770.  v0:= 2I;
  #L279772.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v0;
  #L279776.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L27977c.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L279790.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L279794.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L27979a.  v0:= temp;
  #L27979c.  if v0 == 0 then goto L2797b2;
  #L2797a0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2797a4.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2797aa.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L2797b0.  goto L2797b8;
  #L2797b2.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2797b8.  return @kind void;
}
procedure `void` `otherSuccess`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.otherSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2797cc.  v0:= 0I;
  #L2797ce.  v1:= 1I;
  #L2797d0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L2797d6.  v0:= temp;
  #L2797d8.  if v0 == 0 then goto L2797ee;
  #L2797dc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2797e0.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2797e6.  v3:= 2I;
  #L2797e8.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v3;
  #L2797ec.  goto L279804;
  #L2797ee.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v3 @kind object;
  #L2797f2.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v1;
  #L2797f6.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2797fc.  v3:= temp;
  #L2797fe.  if v3 == 0 then goto L279804;
  #L279802.  return @kind void;
  #L279804.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L27980a.  return @kind void;
}
