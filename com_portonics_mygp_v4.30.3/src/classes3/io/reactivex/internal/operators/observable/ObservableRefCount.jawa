record `io.reactivex.internal.operators.observable.ObservableRefCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.n` @kind class {
  `io.reactivex.f0.a` `io.reactivex.internal.operators.observable.ObservableRefCount.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableRefCount.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRefCount.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableRefCount.e` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.internal.operators.observable.ObservableRefCount.f` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` `io.reactivex.internal.operators.observable.ObservableRefCount.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount` v7 @kind this, `io.reactivex.f0.a` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/f0/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L27b514.  v5:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27b518.  call temp:= `c`() @signature `Lio/reactivex/h0/i;.c:()Lio/reactivex/x;` @kind static;
  #L27b51e.  v6:= temp @kind object;
  #L27b520.  v2:= 1I;
  #L27b522.  v3:= 0L;
  #L27b526.  v0:= v7 @kind object;
  #L27b528.  v1:= v8 @kind object;
  #L27b52a.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/f0/a;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @kind direct;
  #L27b530.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount` v0 @kind this, `io.reactivex.f0.a` v1 @kind object, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.x` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/f0/a;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L27b544.  call `<init>`(v0) @signature `Lio/reactivex/n;.<init>:()V` @kind direct;
  #L27b54a.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.f0.a` := v1 @kind object;
  #L27b54e.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.c` @type ^`int` := v2;
  #L27b552.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`long` := v3 @kind wide;
  #L27b556.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.e` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L27b55a.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.x` := v6 @kind object;
  #L27b55e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableRefCount` v7 @kind this, `io.reactivex.t` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L27b618.  @monitorenter v7
  #L27b61a.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.g` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L27b61e.  if v0 != 0 then goto L27b630;
  #L27b622.  v0:= new `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection`;
  #L27b626.  call `<init>`(v0, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRefCount;)V` @kind direct;
  #L27b62c.  v7.`io.reactivex.internal.operators.observable.ObservableRefCount.g` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` := v0 @kind object;
  #L27b630.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L27b634.  v3:= 0L;
  #L27b638.  v5:= lcmp(v1, v3);
  #L27b63c.  if v5 != 0 then goto L27b64e;
  #L27b640.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.b` @kind object;
  #L27b644.  if v3 == 0 then goto L27b64e;
  #L27b648.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27b64e.  v3:= 1L;
  #L27b652.  v1:= v1 + v3 @kind long;
  #L27b654.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` := v1 @kind wide;
  #L27b658.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.connected` @type ^`boolean` @kind boolean;
  #L27b65c.  v4:= 1I;
  #L27b65e.  if v3 != 0 then goto L27b676;
  #L27b662.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.c` @type ^`int`;
  #L27b666.  v5:= (`long`) v3 @kind i2l;
  #L27b668.  v3:= lcmp(v1, v5);
  #L27b66c.  if v3 != 0 then goto L27b676;
  #L27b670.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.connected` @type ^`boolean` := v4 @kind boolean;
  #L27b674.  goto L27b678;
  #L27b676.  v4:= 0I;
  #L27b678.  @monitorexit v7
  #L27b67a.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.f0.a` @kind object;
  #L27b67e.  v2:= new `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver`;
  #L27b682.  call `<init>`(v2, v8, v7, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind direct;
  #L27b688.  call `subscribe`(v1, v2) @signature `Lio/reactivex/n;.subscribe:(Lio/reactivex/t;)V` @kind virtual;
  #L27b68e.  if v4 == 0 then goto L27b69c;
  #L27b692.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.f0.a` @kind object;
  #L27b696.  call `w`(v8, v0) @signature `Lio/reactivex/f0/a;.w:(Lio/reactivex/d0/g;)V` @kind virtual;
  #L27b69c.  return @kind void;
  #L27b69e.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27b6a0.  @monitorexit v7
  #L27b6a2.  throw v8;
  catch `java.lang.Throwable` @[L27b61a..L27b67a] goto L27b69e;
  catch `java.lang.Throwable` @[L27b6a0..L27b6a2] goto L27b69e;
}
procedure `void` `w`(`io.reactivex.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.w:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27b570.  @monitorenter v5
  #L27b572.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.g` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L27b576.  if v0 == 0 then goto L27b5ea;
  #L27b57a.  if v0 == v6 then goto L27b580;
  #L27b57e.  goto L27b5ea;
  #L27b580.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L27b584.  v2:= 1L;
  #L27b588.  v0:= v0 - v2 @kind long;
  #L27b58a.  v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` := v0 @kind wide;
  #L27b58e.  v2:= 0L;
  #L27b592.  v4:= lcmp(v0, v2);
  #L27b596.  if v4 != 0 then goto L27b5e6;
  #L27b59a.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.connected` @type ^`boolean` @kind boolean;
  #L27b59e.  if v0 != 0 then goto L27b5a4;
  #L27b5a2.  goto L27b5e6;
  #L27b5a4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`long` @kind wide;
  #L27b5a8.  v4:= lcmp(v0, v2);
  #L27b5ac.  if v4 != 0 then goto L27b5ba;
  #L27b5b0.  call `y`(v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.y:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind virtual;
  #L27b5b6.  @monitorexit v5
  #L27b5b8.  return @kind void;
  #L27b5ba.  v0:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L27b5be.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L27b5c4.  v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L27b5c8.  @monitorexit v5
  #L27b5ca.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.x` @kind object;
  #L27b5ce.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`long` @kind wide;
  #L27b5d2.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27b5d6.  call temp:= `d`(v1, v6, v2, v4) @signature `Lio/reactivex/x;.d:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L27b5dc.  v6:= temp @kind object;
  #L27b5de.  call temp:= `replace`(v0, v6) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L27b5e4.  return @kind void;
  #L27b5e6.  @monitorexit v5
  #L27b5e8.  return @kind void;
  #L27b5ea.  @monitorexit v5
  #L27b5ec.  return @kind void;
  #L27b5ee.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27b5f0.  @monitorexit v5
  #L27b5f2.  throw v6;
  catch `java.lang.Throwable` @[L27b572..L27b5ca] goto L27b5ee;
  catch `java.lang.Throwable` @[L27b5e6..L27b5f2] goto L27b5ee;
}
procedure `void` `x`(`io.reactivex.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.x:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27b6c8.  @monitorenter v5
  #L27b6ca.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.g` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L27b6ce.  if v0 == 0 then goto L27b6ea;
  #L27b6d2.  if v0 != v6 then goto L27b6ea;
  #L27b6d6.  v0:= 0I;
  #L27b6d8.  v5.`io.reactivex.internal.operators.observable.ObservableRefCount.g` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` := v0 @kind object;
  #L27b6dc.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.timer` @type ^`io.reactivex.disposables.b` @kind object;
  #L27b6e0.  if v0 == 0 then goto L27b6ea;
  #L27b6e4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27b6ea.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L27b6ee.  v2:= 1L;
  #L27b6f2.  v0:= v0 - v2 @kind long;
  #L27b6f4.  v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` := v0 @kind wide;
  #L27b6f8.  v2:= 0L;
  #L27b6fc.  v4:= lcmp(v0, v2);
  #L27b700.  if v4 != 0 then goto L27b73a;
  #L27b704.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.f0.a` @kind object;
  #L27b708.  v1:= instanceof @variable v0 @type ^`io.reactivex.disposables.b` @kind boolean;
  #L27b70c.  if v1 == 0 then goto L27b71c;
  #L27b710.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L27b714.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27b71a.  goto L27b73a;
  #L27b71c.  v1:= instanceof @variable v0 @type ^`io.reactivex.internal.disposables.c` @kind boolean;
  #L27b720.  if v1 == 0 then goto L27b73a;
  #L27b724.  v0:= (`io.reactivex.internal.disposables.c`) v0 @kind object;
  #L27b728.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27b72e.  v6:= temp @kind object;
  #L27b730.  v6:= (`io.reactivex.disposables.b`) v6 @kind object;
  #L27b734.  call `a`(v0, v6) @signature `Lio/reactivex/internal/disposables/c;.a:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27b73a.  @monitorexit v5
  #L27b73c.  return @kind void;
  #L27b73e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27b740.  @monitorexit v5
  #L27b742.  throw v6;
  catch `java.lang.Throwable` @[L27b6ca..L27b742] goto L27b73e;
}
procedure `void` `y`(`io.reactivex.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.y:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27b760.  @monitorenter v5
  #L27b762.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @type ^`long` @kind wide;
  #L27b766.  v2:= 0L;
  #L27b76a.  v4:= lcmp(v0, v2);
  #L27b76e.  if v4 != 0 then goto L27b7c8;
  #L27b772.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.g` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L27b776.  if v6 != v0 then goto L27b7c8;
  #L27b77a.  v0:= 0I;
  #L27b77c.  v5.`io.reactivex.internal.operators.observable.ObservableRefCount.g` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` := v0 @kind object;
  #L27b780.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27b786.  v0:= temp @kind object;
  #L27b788.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L27b78c.  call temp:= `dispose`(v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27b792.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.f0.a` @kind object;
  #L27b796.  v2:= instanceof @variable v1 @type ^`io.reactivex.disposables.b` @kind boolean;
  #L27b79a.  if v2 == 0 then goto L27b7aa;
  #L27b79e.  v1:= (`io.reactivex.disposables.b`) v1 @kind object;
  #L27b7a2.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27b7a8.  goto L27b7c8;
  #L27b7aa.  v2:= instanceof @variable v1 @type ^`io.reactivex.internal.disposables.c` @kind boolean;
  #L27b7ae.  if v2 == 0 then goto L27b7c8;
  #L27b7b2.  if v0 != 0 then goto L27b7be;
  #L27b7b6.  v0:= 1I;
  #L27b7b8.  v6.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.disconnectedEarly` @type ^`boolean` := v0 @kind boolean;
  #L27b7bc.  goto L27b7c8;
  #L27b7be.  v1:= (`io.reactivex.internal.disposables.c`) v1 @kind object;
  #L27b7c2.  call `a`(v1, v0) @signature `Lio/reactivex/internal/disposables/c;.a:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27b7c8.  @monitorexit v5
  #L27b7ca.  return @kind void;
  #L27b7cc.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27b7ce.  @monitorexit v5
  #L27b7d0.  throw v6;
  catch `java.lang.Throwable` @[L27b762..L27b7d0] goto L27b7cc;
}
