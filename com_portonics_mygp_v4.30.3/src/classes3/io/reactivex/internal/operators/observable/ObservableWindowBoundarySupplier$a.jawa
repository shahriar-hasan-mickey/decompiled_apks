record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.b` @kind class {
  `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L283888.  call `<init>`(v0) @signature `Lio/reactivex/observers/b;.<init>:()V` @kind direct;
  #L28388e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` := v1 @kind object;
  #L283892.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2838a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.d` @type ^`boolean` @kind boolean;
  #L2838a8.  if v0 == 0 then goto L2838ae;
  #L2838ac.  return @kind void;
  #L2838ae.  v0:= 1I;
  #L2838b0.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.d` @type ^`boolean` := v0 @kind boolean;
  #L2838b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` @kind object;
  #L2838b8.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerComplete:()V` @kind virtual;
  #L2838be.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2838d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.d` @type ^`boolean` @kind boolean;
  #L2838d4.  if v0 == 0 then goto L2838e0;
  #L2838d8.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2838de.  return @kind void;
  #L2838e0.  v0:= 1I;
  #L2838e2.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.d` @type ^`boolean` := v0 @kind boolean;
  #L2838e6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` @kind object;
  #L2838ea.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2838f0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L283904.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.d` @type ^`boolean` @kind boolean;
  #L283908.  if v1 == 0 then goto L28390e;
  #L28390c.  return @kind void;
  #L28390e.  v1:= 1I;
  #L283910.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.d` @type ^`boolean` := v1 @kind boolean;
  #L283914.  call `dispose`(v0) @signature `Lio/reactivex/observers/b;.dispose:()V` @kind virtual;
  #L28391a.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` @kind object;
  #L28391e.  call `innerNext`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerNext:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;)V` @kind virtual;
  #L283924.  return @kind void;
}
