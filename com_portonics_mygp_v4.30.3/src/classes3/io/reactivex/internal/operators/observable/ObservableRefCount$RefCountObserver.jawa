record `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.connection` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRefCount` `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.parent` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableRefCount` v2 @kind object, `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27b3e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L27b3ee.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27b3f2.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` := v2 @kind object;
  #L27b3f6.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` := v3 @kind object;
  #L27b3fa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27b40c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27b410.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27b416.  v0:= 0I;
  #L27b418.  v1:= 1I;
  #L27b41a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L27b420.  v0:= temp;
  #L27b422.  if v0 == 0 then goto L27b434;
  #L27b426.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L27b42a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L27b42e.  call `w`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.w:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind virtual;
  #L27b434.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27b3c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27b3cc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L27b3d2.  v0:= temp;
  #L27b3d4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27b448.  v0:= 0I;
  #L27b44a.  v1:= 1I;
  #L27b44c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L27b452.  v0:= temp;
  #L27b454.  if v0 == 0 then goto L27b470;
  #L27b458.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L27b45c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L27b460.  call `x`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.x:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind virtual;
  #L27b466.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27b46a.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27b470.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27b484.  v0:= 0I;
  #L27b486.  v1:= 1I;
  #L27b488.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L27b48e.  v0:= temp;
  #L27b490.  if v0 == 0 then goto L27b4ae;
  #L27b494.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L27b498.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.connection` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind object;
  #L27b49c.  call `x`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.x:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind virtual;
  #L27b4a2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27b4a6.  call `onError`(v0, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27b4ac.  goto L27b4b4;
  #L27b4ae.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L27b4b4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27b4c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27b4cc.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27b4d2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefCountObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27b4e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27b4e8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27b4ee.  v0:= temp;
  #L27b4f0.  if v0 == 0 then goto L27b502;
  #L27b4f4.  v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L27b4f8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefCountObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27b4fc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27b502.  return @kind void;
}
