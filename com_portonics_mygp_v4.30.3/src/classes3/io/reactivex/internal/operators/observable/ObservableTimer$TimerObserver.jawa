record `io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2821cc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2821d2.  v0.`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L2821d6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L2821e8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2821ee.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2821a4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2821aa.  v0:= temp @kind object;
  #L2821ac.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2821b0.  if v0 != v1 then goto L2821b8;
  #L2821b4.  v0:= 1I;
  #L2821b6.  goto L2821ba;
  #L2821b8.  v0:= 0I;
  #L2821ba.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L282200.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.isDisposed:()Z` @kind virtual;
  #L282206.  v0:= temp;
  #L282208.  if v0 != 0 then goto L282236;
  #L28220c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282210.  v1:= 0L;
  #L282214.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L28221a.  v1:= temp @kind object;
  #L28221c.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L282222.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L282226.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28222c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282230.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L282236.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.observable.ObservableTimer$TimerObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$TimerObserver;.setResource:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L282248.  call temp:= `trySet`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.trySet:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28224e.  return @kind void;
}
