record `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.active` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.error` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.observer` @AccessFlag FINAL;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.sourceMode` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.tillTheEnd` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L270b54.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L270b5a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L270b5e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L270b62.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.bufferSize` @type ^`int` := v3;
  #L270b66.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.tillTheEnd` @type ^`boolean` := v4 @kind boolean;
  #L270b6a.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L270b6e.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L270b74.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L270b78.  v2:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver`;
  #L270b7c.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;)V` @kind direct;
  #L270b82.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.observer` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` := v2 @kind object;
  #L270b86.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270b98.  v0:= 1I;
  #L270b9a.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L270b9e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L270ba2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L270ba8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.observer` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` @kind object;
  #L270bac.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver;.dispose:()V` @kind virtual;
  #L270bb2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L270bc4.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L270bca.  v0:= temp;
  #L270bcc.  if v0 == 0 then goto L270bd2;
  #L270bd0.  return @kind void;
  #L270bd2.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L270bd6.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L270bda.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L270bde.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.active` @type ^`boolean` @kind boolean;
  #L270be2.  if v3 != 0 then goto L270d2e;
  #L270be6.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` @kind boolean;
  #L270bea.  if v3 == 0 then goto L270bf6;
  #L270bee.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L270bf4.  return @kind void;
  #L270bf6.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.tillTheEnd` @type ^`boolean` @kind boolean;
  #L270bfa.  v4:= 1I;
  #L270bfc.  if v3 != 0 then goto L270c2a;
  #L270c00.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L270c06.  v3:= temp @kind object;
  #L270c08.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L270c0c.  if v3 == 0 then goto L270c2a;
  #L270c10.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L270c16.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L270c1a.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L270c20.  v1:= temp @kind object;
  #L270c22.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L270c28.  return @kind void;
  #L270c2a.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.done` @type ^`boolean` @kind boolean;
  #L270c2e.  call temp:= `poll`(v1) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L270c34.  v5:= temp @kind object;
  #L270c36.  if v5 != 0 then goto L270c3e;
  #L270c3a.  v6:= 1I;
  #L270c3c.  goto L270c40;
  #L270c3e.  v6:= 0I;
  #L270c40.  if v3 == 0 then goto L270c68;
  #L270c44.  if v6 == 0 then goto L270c68;
  #L270c48.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L270c4c.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L270c52.  v1:= temp @kind object;
  #L270c54.  if v1 == 0 then goto L270c60;
  #L270c58.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L270c5e.  goto L270c66;
  #L270c60.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L270c66.  return @kind void;
  #L270c68.  if v6 != 0 then goto L270d2e;
  #L270c6c.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L270c70.  call temp:= `apply`(v3, v5) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L270c76.  v3:= temp @kind object;
  #L270c78.  v5:= "The mapper returned a null ObservableSource" @kind object;
  #L270c7c.  call temp:= `e`(v3, v5) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L270c82.  v3:= temp @kind object;
  #L270c84.  v3:= (`io.reactivex.r`) v3 @kind object;
  #L270c88.  v5:= instanceof @variable v3 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L270c8c.  if v5 == 0 then goto L270cc0;
  #L270c90.  v3:= (`java.util.concurrent.Callable`) v3 @kind object;
  #L270c94.  call temp:= `call`(v3) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L270c9a.  v3:= temp @kind object;
  #L270c9c.  if v3 == 0 then goto L270bde;
  #L270ca0.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` @kind boolean;
  #L270ca4.  if v4 != 0 then goto L270bde;
  #L270ca8.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L270cae.  goto L270bde;
  #L270cb0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L270cb2.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L270cb8.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L270cbe.  goto L270bde;
  #L270cc0.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.active` @type ^`boolean` := v4 @kind boolean;
  #L270cc4.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.observer` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver$DelayErrorInnerObserver` @kind object;
  #L270cc8.  call `subscribe`(v3, v4) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L270cce.  goto L270d2e;
  #L270cd0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L270cd2.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L270cd8.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L270cdc.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L270ce0.  call `dispose`(v4) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L270ce6.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L270cec.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L270cf2.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L270cf8.  v1:= temp @kind object;
  #L270cfa.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L270d00.  return @kind void;
  #L270d02.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L270d04.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L270d0a.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L270d0e.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L270d12.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L270d18.  call temp:= `addThrowable`(v2, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L270d1e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L270d24.  v1:= temp @kind object;
  #L270d26.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L270d2c.  return @kind void;
  #L270d2e.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L270d34.  v3:= temp;
  #L270d36.  if v3 != 0 then goto L270bde;
  #L270d3a.  return @kind void;
  catch `java.lang.Throwable` @[L270c2e..L270c36] goto L270d02;
  catch `java.lang.Throwable` @[L270c6c..L270c88] goto L270cd0;
  catch `java.lang.Throwable` @[L270c90..L270c9c] goto L270cb0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270b3c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.cancelled` @type ^`boolean` @kind boolean;
  #L270b40.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270d70.  v0:= 1I;
  #L270d72.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L270d76.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @kind virtual;
  #L270d7c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270d90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L270d94.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L270d9a.  v0:= temp;
  #L270d9c.  if v0 == 0 then goto L270dae;
  #L270da0.  v2:= 1I;
  #L270da2.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L270da6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @kind virtual;
  #L270dac.  goto L270db4;
  #L270dae.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L270db4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270dc8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.sourceMode` @type ^`int`;
  #L270dcc.  if v0 != 0 then goto L270dda;
  #L270dd0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L270dd4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L270dda.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @kind virtual;
  #L270de0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L270df4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L270df8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L270dfe.  v0:= temp;
  #L270e00.  if v0 == 0 then goto L270e78;
  #L270e04.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.upstream` @type ^`io.reactivex.disposables.b` := v3 @kind object;
  #L270e08.  v0:= instanceof @variable v3 @type ^`io.reactivex.e0.a.e` @kind boolean;
  #L270e0c.  if v0 == 0 then goto L270e5c;
  #L270e10.  v3:= (`io.reactivex.e0.a.e`) v3 @kind object;
  #L270e14.  v0:= 3I;
  #L270e16.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L270e1c.  v0:= temp;
  #L270e1e.  v1:= 1I;
  #L270e20.  if v0 != v1 then goto L270e42;
  #L270e24.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.sourceMode` @type ^`int` := v0;
  #L270e28.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L270e2c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L270e30.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L270e34.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L270e3a.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$ConcatMapDelayErrorObserver;.drain:()V` @kind virtual;
  #L270e40.  return @kind void;
  #L270e42.  v1:= 2I;
  #L270e44.  if v0 != v1 then goto L270e5c;
  #L270e48.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.sourceMode` @type ^`int` := v0;
  #L270e4c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L270e50.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L270e54.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L270e5a.  return @kind void;
  #L270e5c.  v3:= new `io.reactivex.internal.queue.a`;
  #L270e60.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.bufferSize` @type ^`int`;
  #L270e64.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L270e6a.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L270e6e.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L270e72.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L270e78.  return @kind void;
}
