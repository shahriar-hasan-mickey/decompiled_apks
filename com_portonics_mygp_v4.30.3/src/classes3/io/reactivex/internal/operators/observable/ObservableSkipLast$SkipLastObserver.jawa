record `io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.skip` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$SkipLastObserver;.<init>:(Lio/reactivex/t;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27ef44.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L27ef4a.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27ef4e.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.skip` @type ^`int` := v2;
  #L27ef52.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$SkipLastObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ef64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27ef68.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27ef6e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$SkipLastObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ef24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27ef28.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L27ef2e.  v0:= temp;
  #L27ef30.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$SkipLastObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ef80.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27ef84.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27ef8a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$SkipLastObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ef9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27efa0.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27efa6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$SkipLastObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27efb8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.skip` @type ^`int`;
  #L27efbc.  call temp:= `size`(v2) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L27efc2.  v1:= temp;
  #L27efc4.  if v0 != v1 then goto L27efda;
  #L27efc8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27efcc.  call temp:= `poll`(v2) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L27efd2.  v1:= temp @kind object;
  #L27efd4.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27efda.  call temp:= `offer`(v2, v3) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L27efe0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$SkipLastObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27eff4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27eff8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27effe.  v0:= temp;
  #L27f000.  if v0 == 0 then goto L27f012;
  #L27f004.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L27f008.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27f00c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27f012.  return @kind void;
}
