record `io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.fused` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v0 @kind this, `io.reactivex.t` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.<init>:(Lio/reactivex/t;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27ae70.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L27ae76.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27ae7a.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` := v2 @kind wide;
  #L27ae7e.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @type ^`long` := v4 @kind wide;
  #L27ae82.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27ae94.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @type ^`long` @kind wide;
  #L27ae98.  v2.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` := v0 @kind wide;
  #L27ae9c.  v0:= 1I;
  #L27ae9e.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L27aea4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27aeb8.  v0:= 1I;
  #L27aeba.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L27aec0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ada4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27adaa.  v0:= temp;
  #L27adac.  if v0 == 0 then goto L27adb4;
  #L27adb0.  v0:= 1I;
  #L27adb2.  goto L27adb6;
  #L27adb4.  v0:= 0I;
  #L27adb6.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27adc8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` @kind wide;
  #L27adcc.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @type ^`long` @kind wide;
  #L27add0.  v4:= lcmp(v0, v2);
  #L27add4.  if v4 != 0 then goto L27addc;
  #L27add8.  v0:= 1I;
  #L27adda.  goto L27adde;
  #L27addc.  v0:= 0I;
  #L27adde.  return v0;
}
procedure `java.lang.Long` `poll`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.poll:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27ae14.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` @kind wide;
  #L27ae18.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @type ^`long` @kind wide;
  #L27ae1c.  v4:= lcmp(v0, v2);
  #L27ae20.  if v4 == 0 then goto L27ae38;
  #L27ae24.  v2:= 1L;
  #L27ae28.  v2:= v2 + v0 @kind long;
  #L27ae2a.  v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` := v2 @kind wide;
  #L27ae2e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L27ae34.  v0:= temp @kind object;
  #L27ae36.  return v0 @kind object;
  #L27ae38.  v0:= 1I;
  #L27ae3a.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L27ae40.  v0:= 0I;
  #L27ae42.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L27ae54.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.poll:()Ljava/lang/Long;` @kind virtual;
  #L27ae5a.  v0:= temp @kind object;
  #L27ae5c.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27adf0.  v0:= 1I;
  #L27adf2.  v2:= v2 ^& v0 @kind int;
  #L27adf4.  if v2 == 0 then goto L27adfe;
  #L27adf8.  v1.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.fused` @type ^`boolean` := v0 @kind boolean;
  #L27adfc.  return v0;
  #L27adfe.  v2:= 0I;
  #L27ae00.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$RangeDisposable;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L27aed4.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.fused` @type ^`boolean` @kind boolean;
  #L27aed8.  if v0 == 0 then goto L27aede;
  #L27aedc.  return @kind void;
  #L27aede.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L27aee2.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.end` @type ^`long` @kind wide;
  #L27aee6.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$RangeDisposable.index` @type ^`long` @kind wide;
  #L27aeea.  v5:= lcmp(v3, v1);
  #L27aeee.  if v5 == 0 then goto L27af14;
  #L27aef2.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27aef8.  v5:= temp;
  #L27aefa.  if v5 != 0 then goto L27af14;
  #L27aefe.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L27af04.  v5:= temp @kind object;
  #L27af06.  call `onNext`(v0, v5) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27af0c.  v5:= 1L;
  #L27af10.  v3:= v3 + v5 @kind long;
  #L27af12.  goto L27aeea;
  #L27af14.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27af1a.  v1:= temp;
  #L27af1c.  if v1 != 0 then goto L27af2e;
  #L27af20.  v1:= 1I;
  #L27af22.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L27af28.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27af2e.  return @kind void;
}
