record `io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27f728.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27f72e.  v0.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27f732.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27f736.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27f73c.  v0.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L27f740.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f754.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27f758.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27f75e.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27f764.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f700.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27f706.  v0:= temp @kind object;
  #L27f708.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L27f70c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L27f712.  v0:= temp;
  #L27f714.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f778.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27f77c.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27f782.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f794.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27f798.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27f79e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f7b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27f7b4.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27f7ba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f7cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27f7d0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27f7d6.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver;.setDisposable:(Lio/reactivex/disposables/b;)V` @AccessFlag  {
    temp;

  #L27f7e8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27f7ee.  return @kind void;
}
