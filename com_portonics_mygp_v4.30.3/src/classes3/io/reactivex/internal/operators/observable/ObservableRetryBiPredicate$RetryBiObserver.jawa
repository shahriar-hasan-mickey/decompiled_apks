record `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.d` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.predicate` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.retries` @AccessFlag ;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.source` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.d` v2 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v3 @kind object, `io.reactivex.r` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/d;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27ce68.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27ce6e.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27ce72.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v3 @kind object;
  #L27ce76.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.source` @type ^`io.reactivex.r` := v4 @kind object;
  #L27ce7a.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.predicate` @type ^`io.reactivex.d0.d` := v2 @kind object;
  #L27ce7e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ce90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27ce94.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27ce9a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L27ceac.  v0:= 1I;
  #L27ceae.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.predicate` @type ^`io.reactivex.d0.d` @kind object;
  #L27ceb2.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.retries` @type ^`int`;
  #L27ceb6.  v2:= v2 + v0 @kind int;
  #L27ceb8.  v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.retries` @type ^`int` := v2;
  #L27cebc.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27cec2.  v2:= temp @kind object;
  #L27cec4.  call temp:= `a`(v1, v2, v7) @signature `Lio/reactivex/d0/d;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L27ceca.  v0:= temp;
  #L27cecc.  if v0 != 0 then goto L27cedc;
  #L27ced0.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27ced4.  call `onError`(v0, v7) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27ceda.  return @kind void;
  #L27cedc.  call `subscribeNext`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.subscribeNext:()V` @kind virtual;
  #L27cee2.  return @kind void;
  #L27cee4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27cee6.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L27ceec.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27cef0.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L27cef4.  v4:= 2I;
  #L27cef6.  v4:= new `java.lang.Throwable`[v4];
  #L27cefa.  v5:= 0I;
  #L27cefc.  v4[v5]:= v7 @kind object;
  #L27cf00.  v4[v0]:= v1 @kind object;
  #L27cf04.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L27cf0a.  call `onError`(v2, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27cf10.  return @kind void;
  catch `java.lang.Throwable` @[L27ceae..L27cecc] goto L27cee4;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27cf30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27cf34.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27cf3a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27cf4c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L27cf50.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L27cf56.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$RetryBiObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27cf68.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27cf6e.  v0:= temp;
  #L27cf70.  if v0 != 0 then goto L27cfa0;
  #L27cf74.  v0:= 1I;
  #L27cf76.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L27cf7a.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L27cf80.  v1:= temp;
  #L27cf82.  if v1 == 0 then goto L27cf88;
  #L27cf86.  return @kind void;
  #L27cf88.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver.source` @type ^`io.reactivex.r` @kind object;
  #L27cf8c.  call `subscribe`(v1, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27cf92.  v0:= -v0 @kind int;
  #L27cf94.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27cf9a.  v0:= temp;
  #L27cf9c.  if v0 != 0 then goto L27cf76;
  #L27cfa0.  return @kind void;
}
