record `io.reactivex.internal.operators.observable.a5` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.j` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.r` `io.reactivex.internal.operators.observable.a5.h` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.a5.i` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.a5.j` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.observable.a5.k` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.a5.l` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.a5.m` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.observable.a5.n` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.observable.a5.o` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.a5` v1 @kind this, `io.reactivex.t` v2 @kind object, `io.reactivex.r` v3 @kind object, `io.reactivex.d0.k` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/operators/observable/a5;.<init>:(Lio/reactivex/t;Lio/reactivex/r;Lio/reactivex/d0/k;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L283314.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L283318.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L28331e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/j;.<init>:(Lio/reactivex/t;Lio/reactivex/e0/a/i;)V` @kind direct;
  #L283324.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L283328.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28332e.  v1.`io.reactivex.internal.operators.observable.a5.m` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L283332.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L283336.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L28333c.  v1.`io.reactivex.internal.operators.observable.a5.o` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L283340.  v1.`io.reactivex.internal.operators.observable.a5.h` @type ^`io.reactivex.r` := v3 @kind object;
  #L283344.  v1.`io.reactivex.internal.operators.observable.a5.i` @type ^`io.reactivex.d0.k` := v4 @kind object;
  #L283348.  v1.`io.reactivex.internal.operators.observable.a5.j` @type ^`int` := v5;
  #L28334c.  v3:= new `io.reactivex.disposables.a`;
  #L283350.  call `<init>`(v3) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L283356.  v1.`io.reactivex.internal.operators.observable.a5.k` @type ^`io.reactivex.disposables.a` := v3 @kind object;
  #L28335a.  v3:= new `java.util.ArrayList`;
  #L28335e.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L283364.  v1.`io.reactivex.internal.operators.observable.a5.n` @type ^`java.util.List` := v3 @kind object;
  #L283368.  v3:= 1L;
  #L28336c.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L283372.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.a5` v0 @kind this, `io.reactivex.t` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/a5;.c:(Lio/reactivex/t;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L283384.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.a5` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/a5;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2833e0.  v0:= 1I;
  #L2833e2.  v1.`io.reactivex.internal.observers.j.e` @type ^`boolean` := v0 @kind boolean;
  #L2833e6.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.observable.a5` v3 @kind this, `io.reactivex.internal.operators.observable.y4` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/a5;.i:(Lio/reactivex/internal/operators/observable/y4;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L283398.  v0:= v3.`io.reactivex.internal.operators.observable.a5.k` @type ^`io.reactivex.disposables.a` @kind object;
  #L28339c.  call temp:= `c`(v0, v4) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2833a2.  v0:= v3.`io.reactivex.internal.observers.j.d` @type ^`io.reactivex.e0.a.i` @kind object;
  #L2833a6.  v1:= new `io.reactivex.internal.operators.observable.b5`;
  #L2833aa.  v4:= v4.`io.reactivex.internal.operators.observable.y4.d` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L2833ae.  v2:= 0I;
  #L2833b0.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/observable/b5;.<init>:(Lio/reactivex/subjects/UnicastSubject;Ljava/lang/Object;)V` @kind direct;
  #L2833b6.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2833bc.  call temp:= `e`(v3) @signature `Lio/reactivex/internal/observers/j;.e:()Z` @kind virtual;
  #L2833c2.  v4:= temp;
  #L2833c4.  if v4 == 0 then goto L2833ce;
  #L2833c8.  call `k`(v3) @signature `Lio/reactivex/internal/operators/observable/a5;.k:()V` @kind virtual;
  #L2833ce.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.a5` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/a5;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2832fc.  v0:= v1.`io.reactivex.internal.observers.j.e` @type ^`boolean` @kind boolean;
  #L283300.  return v0;
}
procedure `void` `j`(`io.reactivex.internal.operators.observable.a5` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/a5;.j:()V` @AccessFlag  {
    temp;
    v0;

  #L2833f8.  v0:= v1.`io.reactivex.internal.operators.observable.a5.k` @type ^`io.reactivex.disposables.a` @kind object;
  #L2833fc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L283402.  v0:= v1.`io.reactivex.internal.operators.observable.a5.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L283406.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28340c.  return @kind void;
}
procedure `void` `k`(`io.reactivex.internal.operators.observable.a5` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/a5;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L283420.  v0:= v10.`io.reactivex.internal.observers.j.d` @type ^`io.reactivex.e0.a.i` @kind object;
  #L283424.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L283428.  v1:= v10.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L28342c.  v2:= v10.`io.reactivex.internal.operators.observable.a5.n` @type ^`java.util.List` @kind object;
  #L283430.  v3:= 1I;
  #L283432.  v4:= 1I;
  #L283434.  v5:= v10.`io.reactivex.internal.observers.j.f` @type ^`boolean` @kind boolean;
  #L283438.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L28343e.  v6:= temp @kind object;
  #L283440.  if v6 != 0 then goto L283448;
  #L283444.  v7:= 1I;
  #L283446.  goto L28344a;
  #L283448.  v7:= 0I;
  #L28344a.  if v5 == 0 then goto L2834b8;
  #L28344e.  if v7 == 0 then goto L2834b8;
  #L283452.  call `j`(v10) @signature `Lio/reactivex/internal/operators/observable/a5;.j:()V` @kind virtual;
  #L283458.  v0:= v10.`io.reactivex.internal.observers.j.g` @type ^`java.lang.Throwable` @kind object;
  #L28345c.  if v0 == 0 then goto L283488;
  #L283460.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L283466.  v1:= temp @kind object;
  #L283468.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L28346e.  v3:= temp;
  #L283470.  if v3 == 0 then goto L2834b0;
  #L283474.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L28347a.  v3:= temp @kind object;
  #L28347c.  v3:= (`io.reactivex.subjects.UnicastSubject`) v3 @kind object;
  #L283480.  call `onError`(v3, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L283486.  goto L283468;
  #L283488.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L28348e.  v0:= temp @kind object;
  #L283490.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L283496.  v1:= temp;
  #L283498.  if v1 == 0 then goto L2834b0;
  #L28349c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2834a2.  v1:= temp @kind object;
  #L2834a4.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L2834a8.  call `onComplete`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L2834ae.  goto L283490;
  #L2834b0.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2834b6.  return @kind void;
  #L2834b8.  if v7 == 0 then goto L2834cc;
  #L2834bc.  v4:= -v4 @kind int;
  #L2834be.  call temp:= `d`(v10, v4) @signature `Lio/reactivex/internal/observers/j;.d:(I)I` @kind virtual;
  #L2834c4.  v4:= temp;
  #L2834c6.  if v4 != 0 then goto L283434;
  #L2834ca.  return @kind void;
  #L2834cc.  v5:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.observable.b5` @kind boolean;
  #L2834d0.  if v5 == 0 then goto L28359c;
  #L2834d4.  v6:= (`io.reactivex.internal.operators.observable.b5`) v6 @kind object;
  #L2834d8.  v5:= v6.`io.reactivex.internal.operators.observable.b5.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L2834dc.  if v5 == 0 then goto L283516;
  #L2834e0.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2834e6.  v5:= temp;
  #L2834e8.  if v5 == 0 then goto L283434;
  #L2834ec.  v5:= v6.`io.reactivex.internal.operators.observable.b5.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L2834f0.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L2834f6.  v5:= v10.`io.reactivex.internal.operators.observable.a5.o` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2834fa.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L283500.  v5:= temp @kind wide;
  #L283502.  v7:= 0L;
  #L283506.  v9:= lcmp(v5, v7);
  #L28350a.  if v9 != 0 then goto L283434;
  #L28350e.  call `j`(v10) @signature `Lio/reactivex/internal/operators/observable/a5;.j:()V` @kind virtual;
  #L283514.  return @kind void;
  #L283516.  v5:= v10.`io.reactivex.internal.observers.j.e` @type ^`boolean` @kind boolean;
  #L28351a.  if v5 == 0 then goto L283520;
  #L28351e.  goto L283434;
  #L283520.  v5:= v10.`io.reactivex.internal.operators.observable.a5.j` @type ^`int`;
  #L283524.  call temp:= `y`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.y:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L28352a.  v5:= temp @kind object;
  #L28352c.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L283532.  call `onNext`(v1, v5) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L283538.  v7:= v10.`io.reactivex.internal.operators.observable.a5.i` @type ^`io.reactivex.d0.k` @kind object;
  #L28353c.  v6:= v6.`io.reactivex.internal.operators.observable.b5.b` @type ^`java.lang.Object` @kind object;
  #L283540.  call temp:= `apply`(v7, v6) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L283546.  v6:= temp @kind object;
  #L283548.  v7:= "The ObservableSource supplied is null" @kind object;
  #L28354c.  call temp:= `e`(v6, v7) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L283552.  v6:= temp @kind object;
  #L283554.  v6:= (`io.reactivex.r`) v6 @kind object;
  #L283558.  v7:= new `io.reactivex.internal.operators.observable.y4`;
  #L28355c.  call `<init>`(v7, v10, v5) @signature `Lio/reactivex/internal/operators/observable/y4;.<init>:(Lio/reactivex/internal/operators/observable/a5;Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L283562.  v5:= v10.`io.reactivex.internal.operators.observable.a5.k` @type ^`io.reactivex.disposables.a` @kind object;
  #L283566.  call temp:= `b`(v5, v7) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L28356c.  v5:= temp;
  #L28356e.  if v5 == 0 then goto L283434;
  #L283572.  v5:= v10.`io.reactivex.internal.operators.observable.a5.o` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L283576.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L28357c.  call `subscribe`(v6, v7) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L283582.  goto L283434;
  #L283586.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L283588.  call `b`(v5) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28358e.  v10.`io.reactivex.internal.observers.j.e` @type ^`boolean` := v3 @kind boolean;
  #L283592.  call `onError`(v1, v5) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L283598.  goto L283434;
  #L28359c.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2835a2.  v5:= temp @kind object;
  #L2835a4.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2835aa.  v7:= temp;
  #L2835ac.  if v7 == 0 then goto L283434;
  #L2835b0.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2835b6.  v7:= temp @kind object;
  #L2835b8.  v7:= (`io.reactivex.subjects.UnicastSubject`) v7 @kind object;
  #L2835bc.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2835c2.  v8:= temp @kind object;
  #L2835c4.  call `onNext`(v7, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L2835ca.  goto L2835a4;
  catch `java.lang.Throwable` @[L283538..L283558] goto L283586;
}
procedure `void` `l`(`io.reactivex.internal.operators.observable.a5` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/a5;.l:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L2835e8.  v0:= v1.`io.reactivex.internal.operators.observable.a5.l` @type ^`io.reactivex.disposables.b` @kind object;
  #L2835ec.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2835f2.  v0:= v1.`io.reactivex.internal.operators.observable.a5.k` @type ^`io.reactivex.disposables.a` @kind object;
  #L2835f6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L2835fc.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/a5;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L283602.  return @kind void;
}
procedure `void` `m`(`io.reactivex.internal.operators.observable.a5` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/a5;.m:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2837cc.  v0:= v3.`io.reactivex.internal.observers.j.d` @type ^`io.reactivex.e0.a.i` @kind object;
  #L2837d0.  v1:= new `io.reactivex.internal.operators.observable.b5`;
  #L2837d4.  v2:= 0I;
  #L2837d6.  call `<init>`(v1, v2, v4) @signature `Lio/reactivex/internal/operators/observable/b5;.<init>:(Lio/reactivex/subjects/UnicastSubject;Ljava/lang/Object;)V` @kind direct;
  #L2837dc.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2837e2.  call temp:= `e`(v3) @signature `Lio/reactivex/internal/observers/j;.e:()Z` @kind virtual;
  #L2837e8.  v4:= temp;
  #L2837ea.  if v4 == 0 then goto L2837f4;
  #L2837ee.  call `k`(v3) @signature `Lio/reactivex/internal/operators/observable/a5;.k:()V` @kind virtual;
  #L2837f4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.a5` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/a5;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L283614.  v0:= v5.`io.reactivex.internal.observers.j.f` @type ^`boolean` @kind boolean;
  #L283618.  if v0 == 0 then goto L28361e;
  #L28361c.  return @kind void;
  #L28361e.  v0:= 1I;
  #L283620.  v5.`io.reactivex.internal.observers.j.f` @type ^`boolean` := v0 @kind boolean;
  #L283624.  call temp:= `e`(v5) @signature `Lio/reactivex/internal/observers/j;.e:()Z` @kind virtual;
  #L28362a.  v0:= temp;
  #L28362c.  if v0 == 0 then goto L283636;
  #L283630.  call `k`(v5) @signature `Lio/reactivex/internal/operators/observable/a5;.k:()V` @kind virtual;
  #L283636.  v0:= v5.`io.reactivex.internal.operators.observable.a5.o` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28363a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L283640.  v0:= temp @kind wide;
  #L283642.  v2:= 0L;
  #L283646.  v4:= lcmp(v0, v2);
  #L28364a.  if v4 != 0 then goto L283658;
  #L28364e.  v0:= v5.`io.reactivex.internal.operators.observable.a5.k` @type ^`io.reactivex.disposables.a` @kind object;
  #L283652.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L283658.  v0:= v5.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L28365c.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L283662.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.a5` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/a5;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L283674.  v0:= v5.`io.reactivex.internal.observers.j.f` @type ^`boolean` @kind boolean;
  #L283678.  if v0 == 0 then goto L283684;
  #L28367c.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L283682.  return @kind void;
  #L283684.  v5.`io.reactivex.internal.observers.j.g` @type ^`java.lang.Throwable` := v6 @kind object;
  #L283688.  v0:= 1I;
  #L28368a.  v5.`io.reactivex.internal.observers.j.f` @type ^`boolean` := v0 @kind boolean;
  #L28368e.  call temp:= `e`(v5) @signature `Lio/reactivex/internal/observers/j;.e:()Z` @kind virtual;
  #L283694.  v0:= temp;
  #L283696.  if v0 == 0 then goto L2836a0;
  #L28369a.  call `k`(v5) @signature `Lio/reactivex/internal/operators/observable/a5;.k:()V` @kind virtual;
  #L2836a0.  v0:= v5.`io.reactivex.internal.operators.observable.a5.o` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2836a4.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L2836aa.  v0:= temp @kind wide;
  #L2836ac.  v2:= 0L;
  #L2836b0.  v4:= lcmp(v0, v2);
  #L2836b4.  if v4 != 0 then goto L2836c2;
  #L2836b8.  v0:= v5.`io.reactivex.internal.operators.observable.a5.k` @type ^`io.reactivex.disposables.a` @kind object;
  #L2836bc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L2836c2.  v0:= v5.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L2836c6.  call `onError`(v0, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2836cc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.a5` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/a5;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2836e0.  call temp:= `f`(v2) @signature `Lio/reactivex/internal/observers/j;.f:()Z` @kind virtual;
  #L2836e6.  v0:= temp;
  #L2836e8.  if v0 == 0 then goto L283728;
  #L2836ec.  v0:= v2.`io.reactivex.internal.operators.observable.a5.n` @type ^`java.util.List` @kind object;
  #L2836f0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2836f6.  v0:= temp @kind object;
  #L2836f8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2836fe.  v1:= temp;
  #L283700.  if v1 == 0 then goto L283718;
  #L283704.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L28370a.  v1:= temp @kind object;
  #L28370c.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L283710.  call `onNext`(v1, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L283716.  goto L2836f8;
  #L283718.  v3:= -1I;
  #L28371a.  call temp:= `d`(v2, v3) @signature `Lio/reactivex/internal/observers/j;.d:(I)I` @kind virtual;
  #L283720.  v3:= temp;
  #L283722.  if v3 != 0 then goto L283748;
  #L283726.  return @kind void;
  #L283728.  v0:= v2.`io.reactivex.internal.observers.j.d` @type ^`io.reactivex.e0.a.i` @kind object;
  #L28372c.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L283732.  v3:= temp @kind object;
  #L283734.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L28373a.  call temp:= `e`(v2) @signature `Lio/reactivex/internal/observers/j;.e:()Z` @kind virtual;
  #L283740.  v3:= temp;
  #L283742.  if v3 != 0 then goto L283748;
  #L283746.  return @kind void;
  #L283748.  call `k`(v2) @signature `Lio/reactivex/internal/operators/observable/a5;.k:()V` @kind virtual;
  #L28374e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.a5` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/a5;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L283760.  v0:= v2.`io.reactivex.internal.operators.observable.a5.l` @type ^`io.reactivex.disposables.b` @kind object;
  #L283764.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28376a.  v0:= temp;
  #L28376c.  if v0 == 0 then goto L2837b8;
  #L283770.  v2.`io.reactivex.internal.operators.observable.a5.l` @type ^`io.reactivex.disposables.b` := v3 @kind object;
  #L283774.  v3:= v2.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L283778.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L28377e.  v3:= v2.`io.reactivex.internal.observers.j.e` @type ^`boolean` @kind boolean;
  #L283782.  if v3 == 0 then goto L283788;
  #L283786.  return @kind void;
  #L283788.  v3:= new `io.reactivex.internal.operators.observable.z4`;
  #L28378c.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/observable/z4;.<init>:(Lio/reactivex/internal/operators/observable/a5;)V` @kind direct;
  #L283792.  v0:= v2.`io.reactivex.internal.operators.observable.a5.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L283796.  v1:= 0I;
  #L283798.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28379e.  v0:= temp;
  #L2837a0.  if v0 == 0 then goto L2837b8;
  #L2837a4.  v0:= v2.`io.reactivex.internal.operators.observable.a5.o` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2837a8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L2837ae.  v0:= v2.`io.reactivex.internal.operators.observable.a5.h` @type ^`io.reactivex.r` @kind object;
  #L2837b2.  call `subscribe`(v0, v3) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L2837b8.  return @kind void;
}
