record `io.reactivex.internal.operators.observable.d$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.observable.d$a.b` @AccessFlag PRIVATE;
  `io.reactivex.internal.operators.observable.d` `io.reactivex.internal.operators.observable.d$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.d$a` v0 @kind this, `io.reactivex.internal.operators.observable.d` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/d$a;.<init>:(Lio/reactivex/internal/operators/observable/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26cc84.  v0.`io.reactivex.internal.operators.observable.d$a.c` @type ^`io.reactivex.internal.operators.observable.d` := v1 @kind object;
  #L26cc88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26cc8e.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.d$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/d$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26cbc0.  v0:= v1.`io.reactivex.internal.operators.observable.d$a.c` @type ^`io.reactivex.internal.operators.observable.d` @kind object;
  #L26cbc4.  v0:= v0.`io.reactivex.internal.operators.observable.d.c` @type ^`java.lang.Object` @kind object;
  #L26cbc8.  v1.`io.reactivex.internal.operators.observable.d$a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L26cbcc.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L26cbd2.  v0:= temp;
  #L26cbd4.  v0:= v0 ^~ 1;
  #L26cbd8.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.d$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/d$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26cbec.  v0:= 0I;
  #L26cbee.  v1:= v2.`io.reactivex.internal.operators.observable.d$a.b` @type ^`java.lang.Object` @kind object;
  #L26cbf2.  if v1 != 0 then goto L26cc02;
  #L26cbf6.  v1:= v2.`io.reactivex.internal.operators.observable.d$a.c` @type ^`io.reactivex.internal.operators.observable.d` @kind object;
  #L26cbfa.  v1:= v1.`io.reactivex.internal.operators.observable.d.c` @type ^`java.lang.Object` @kind object;
  #L26cbfe.  v2.`io.reactivex.internal.operators.observable.d$a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L26cc02.  v1:= v2.`io.reactivex.internal.operators.observable.d$a.b` @type ^`java.lang.Object` @kind object;
  #L26cc06.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L26cc0c.  v1:= temp;
  #L26cc0e.  if v1 != 0 then goto L26cc4a;
  #L26cc12.  v1:= v2.`io.reactivex.internal.operators.observable.d$a.b` @type ^`java.lang.Object` @kind object;
  #L26cc16.  call temp:= `isError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L26cc1c.  v1:= temp;
  #L26cc1e.  if v1 != 0 then goto L26cc34;
  #L26cc22.  v1:= v2.`io.reactivex.internal.operators.observable.d$a.b` @type ^`java.lang.Object` @kind object;
  #L26cc26.  call temp:= `getValue`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L26cc2c.  v1:= temp @kind object;
  #L26cc2e.  v2.`io.reactivex.internal.operators.observable.d$a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L26cc32.  return v1 @kind object;
  #L26cc34.  v1:= v2.`io.reactivex.internal.operators.observable.d$a.b` @type ^`java.lang.Object` @kind object;
  #L26cc38.  call temp:= `getError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L26cc3e.  v1:= temp @kind object;
  #L26cc40.  call temp:= `e`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L26cc46.  v1:= temp @kind object;
  #L26cc48.  throw v1;
  #L26cc4a.  v1:= new `java.util.NoSuchElementException`;
  #L26cc4e.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L26cc54.  throw v1;
  #L26cc56.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26cc58.  v2.`io.reactivex.internal.operators.observable.d$a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L26cc5c.  throw v1;
  catch `java.lang.Throwable` @[L26cbee..L26cc2e] goto L26cc56;
  catch `java.lang.Throwable` @[L26cc34..L26cc56] goto L26cc56;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.d$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/d$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26cca0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L26cca4.  v1:= "Read only iterator" @kind object;
  #L26cca8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L26ccae.  throw v0;
}
