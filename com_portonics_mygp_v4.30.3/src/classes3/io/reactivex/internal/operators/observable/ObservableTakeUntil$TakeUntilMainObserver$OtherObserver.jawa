record `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L280744.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` := v1 @kind object;
  #L280748.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28074e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver$OtherObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L280760.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` @kind object;
  #L280764.  call `otherComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.otherComplete:()V` @kind virtual;
  #L28076a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver$OtherObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28077c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` @kind object;
  #L280780.  call `otherError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.otherError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L280786.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver$OtherObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L280798.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28079e.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver` @kind object;
  #L2807a2.  call `otherComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.otherComplete:()V` @kind virtual;
  #L2807a8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver$OtherObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L2807bc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2807c2.  return @kind void;
}
