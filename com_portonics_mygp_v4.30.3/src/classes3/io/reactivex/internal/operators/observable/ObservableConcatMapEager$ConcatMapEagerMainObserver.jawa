record `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `io.reactivex.internal.observers.i` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.internal.observers.InnerQueuedObserver` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.errorMode` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.maxConcurrency` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.observers` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.prefetch` @AccessFlag FINAL;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.sourceMode` @AccessFlag ;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;IILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27123c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L271242.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L271246.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L27124a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.maxConcurrency` @type ^`int` := v3;
  #L27124e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.prefetch` @type ^`int` := v4;
  #L271252.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` := v5 @kind object;
  #L271256.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L27125a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L271260.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L271264.  v1:= new `java.util.ArrayDeque`;
  #L271268.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L27126e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.observers` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L271272.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271284.  v0:= 1I;
  #L271286.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L27128a.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L271290.  v0:= temp;
  #L271292.  if v0 != 0 then goto L2712a6;
  #L271296.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L27129a.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L2712a0.  call `disposeAll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L2712a6.  return @kind void;
}
procedure `void` `disposeAll`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @AccessFlag  {
    temp;
    v0;

  #L2712b8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` @kind object;
  #L2712bc.  if v0 == 0 then goto L2712c6;
  #L2712c0.  call `dispose`(v0) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L2712c6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.observers` @type ^`java.util.ArrayDeque` @kind object;
  #L2712ca.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L2712d0.  v0:= temp @kind object;
  #L2712d2.  v0:= (`io.reactivex.internal.observers.InnerQueuedObserver`) v0 @kind object;
  #L2712d6.  if v0 != 0 then goto L2712dc;
  #L2712da.  return @kind void;
  #L2712dc.  call `dispose`(v0) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L2712e2.  goto L2712c6;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v13 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2712f4.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2712fa.  v0:= temp;
  #L2712fc.  if v0 == 0 then goto L271302;
  #L271300.  return @kind void;
  #L271302.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L271306.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.observers` @type ^`java.util.ArrayDeque` @kind object;
  #L27130a.  v2:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27130e.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L271312.  v4:= 1I;
  #L271314.  v5:= 1I;
  #L271316.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int`;
  #L27131a.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.maxConcurrency` @type ^`int`;
  #L27131e.  if v6 == v7 then goto L2713fa;
  #L271322.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L271326.  if v7 == 0 then goto L271338;
  #L27132a.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L271330.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L271336.  return @kind void;
  #L271338.  v7:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L27133c.  if v3 != v7 then goto L271374;
  #L271340.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L271344.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27134a.  v7:= temp @kind object;
  #L27134c.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L271350.  if v7 == 0 then goto L271374;
  #L271354.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L27135a.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L271360.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L271364.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L27136a.  v0:= temp @kind object;
  #L27136c.  call `onError`(v2, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L271372.  return @kind void;
  #L271374.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L27137a.  v7:= temp @kind object;
  #L27137c.  if v7 != 0 then goto L271382;
  #L271380.  goto L2713fa;
  #L271382.  v8:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L271386.  call temp:= `apply`(v8, v7) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L27138c.  v7:= temp @kind object;
  #L27138e.  v8:= "The mapper returned a null ObservableSource" @kind object;
  #L271392.  call temp:= `e`(v7, v8) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L271398.  v7:= temp @kind object;
  #L27139a.  v7:= (`io.reactivex.r`) v7 @kind object;
  #L27139e.  v8:= new `io.reactivex.internal.observers.InnerQueuedObserver`;
  #L2713a2.  v9:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.prefetch` @type ^`int`;
  #L2713a6.  call `<init>`(v8, v13, v9) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.<init>:(Lio/reactivex/internal/observers/i;I)V` @kind direct;
  #L2713ac.  call temp:= `offer`(v1, v8) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L2713b2.  call `subscribe`(v7, v8) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L2713b8.  v6:= v6 + 1;
  #L2713bc.  goto L27131a;
  #L2713be.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2713c0.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2713c6.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2713ca.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2713d0.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L2713d6.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L2713dc.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2713e0.  call temp:= `addThrowable`(v0, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2713e6.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2713ea.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2713f0.  v0:= temp @kind object;
  #L2713f2.  call `onError`(v2, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2713f8.  return @kind void;
  #L2713fa.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int` := v6;
  #L2713fe.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L271402.  if v6 == 0 then goto L271414;
  #L271406.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L27140c.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L271412.  return @kind void;
  #L271414.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L271418.  if v3 != v6 then goto L271450;
  #L27141c.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L271420.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L271426.  v6:= temp @kind object;
  #L271428.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L27142c.  if v6 == 0 then goto L271450;
  #L271430.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L271436.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L27143c.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L271440.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L271446.  v0:= temp @kind object;
  #L271448.  call `onError`(v2, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27144e.  return @kind void;
  #L271450.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` @kind object;
  #L271454.  v7:= 0I;
  #L271456.  if v6 != 0 then goto L2714fe;
  #L27145a.  v6:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L27145e.  if v3 != v6 then goto L271496;
  #L271462.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L271466.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27146c.  v6:= temp @kind object;
  #L27146e.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L271472.  if v6 == 0 then goto L271496;
  #L271476.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L27147c.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L271482.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L271486.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L27148c.  v0:= temp @kind object;
  #L27148e.  call `onError`(v2, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L271494.  return @kind void;
  #L271496.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.done` @type ^`boolean` @kind boolean;
  #L27149a.  call temp:= `poll`(v1) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L2714a0.  v8:= temp @kind object;
  #L2714a2.  v8:= (`io.reactivex.internal.observers.InnerQueuedObserver`) v8 @kind object;
  #L2714a6.  if v8 != 0 then goto L2714ae;
  #L2714aa.  v9:= 1I;
  #L2714ac.  goto L2714b0;
  #L2714ae.  v9:= 0I;
  #L2714b0.  if v6 == 0 then goto L2714f4;
  #L2714b4.  if v9 == 0 then goto L2714f4;
  #L2714b8.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2714bc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2714c2.  v1:= temp @kind object;
  #L2714c4.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L2714c8.  if v1 == 0 then goto L2714ec;
  #L2714cc.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L2714d2.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L2714d8.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2714dc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2714e2.  v0:= temp @kind object;
  #L2714e4.  call `onError`(v2, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2714ea.  goto L2714f2;
  #L2714ec.  call `onComplete`(v2) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2714f2.  return @kind void;
  #L2714f4.  if v9 != 0 then goto L2714fc;
  #L2714f8.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v8 @kind object;
  #L2714fc.  v6:= v8 @kind object;
  #L2714fe.  if v6 == 0 then goto L2715c4;
  #L271502.  call temp:= `queue`(v6) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/e0/a/j;` @kind virtual;
  #L271508.  v8:= temp @kind object;
  #L27150a.  v9:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L27150e.  if v9 == 0 then goto L271520;
  #L271512.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L271518.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L27151e.  return @kind void;
  #L271520.  call temp:= `isDone`(v6) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.isDone:()Z` @kind virtual;
  #L271526.  v9:= temp;
  #L271528.  v10:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L27152c.  if v3 != v10 then goto L271564;
  #L271530.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L271534.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27153a.  v10:= temp @kind object;
  #L27153c.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L271540.  if v10 == 0 then goto L271564;
  #L271544.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L27154a.  call `disposeAll`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.disposeAll:()V` @kind virtual;
  #L271550.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L271554.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L27155a.  v0:= temp @kind object;
  #L27155c.  call `onError`(v2, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L271562.  return @kind void;
  #L271564.  v10:= 0I;
  #L271566.  call temp:= `poll`(v8) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L27156c.  v11:= temp @kind object;
  #L27156e.  if v11 != 0 then goto L271576;
  #L271572.  v12:= 1I;
  #L271574.  goto L271578;
  #L271576.  v12:= 0I;
  #L271578.  if v9 == 0 then goto L271592;
  #L27157c.  if v12 == 0 then goto L271592;
  #L271580.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L271584.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int`;
  #L271588.  v6:= v6 - v4 @kind int;
  #L27158a.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int` := v6;
  #L27158e.  goto L271316;
  #L271592.  if v12 == 0 then goto L271598;
  #L271596.  goto L2715c4;
  #L271598.  call `onNext`(v2, v11) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27159e.  goto L27150a;
  #L2715a0.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2715a2.  call `b`(v6) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2715a8.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2715ac.  call temp:= `addThrowable`(v7, v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2715b2.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.current` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L2715b6.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int`;
  #L2715ba.  v6:= v6 - v4 @kind int;
  #L2715bc.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.activeCount` @type ^`int` := v6;
  #L2715c0.  goto L271316;
  #L2715c4.  v5:= -v5 @kind int;
  #L2715c6.  call temp:= `addAndGet`(v13, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2715cc.  v5:= temp;
  #L2715ce.  if v5 != 0 then goto L271316;
  #L2715d2.  return @kind void;
  catch `java.lang.Throwable` @[L271374..L27139e] goto L2713be;
  catch `java.lang.Throwable` @[L271566..L27156e] goto L2715a0;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v0 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.innerComplete:(Lio/reactivex/internal/observers/InnerQueuedObserver;)V` @AccessFlag PUBLIC {
    temp;

  #L2715fc.  call `setDone`(v1) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L271602.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L271608.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.innerError:(Lio/reactivex/internal/observers/InnerQueuedObserver;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27161c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L271620.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L271626.  v0:= temp;
  #L271628.  if v0 == 0 then goto L271650;
  #L27162c.  v3:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.errorMode` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L271630.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L271634.  if v3 != v0 then goto L271642;
  #L271638.  v3:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27163c.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L271642.  call `setDone`(v2) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L271648.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L27164e.  goto L271656;
  #L271650.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L271656.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v0 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.innerNext:(Lio/reactivex/internal/observers/InnerQueuedObserver;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L271668.  call temp:= `queue`(v1) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/e0/a/j;` @kind virtual;
  #L27166e.  v1:= temp @kind object;
  #L271670.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L271676.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L27167c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271224.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L271228.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271690.  v0:= 1I;
  #L271692.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L271696.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L27169c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2716b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2716b4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2716ba.  v0:= temp;
  #L2716bc.  if v0 == 0 then goto L2716ce;
  #L2716c0.  v2:= 1I;
  #L2716c2.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L2716c6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L2716cc.  goto L2716d4;
  #L2716ce.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2716d4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2716e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.sourceMode` @type ^`int`;
  #L2716ec.  if v0 != 0 then goto L2716fa;
  #L2716f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L2716f4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2716fa.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L271700.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L271714.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L271718.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27171e.  v0:= temp;
  #L271720.  if v0 == 0 then goto L271798;
  #L271724.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.upstream` @type ^`io.reactivex.disposables.b` := v3 @kind object;
  #L271728.  v0:= instanceof @variable v3 @type ^`io.reactivex.e0.a.e` @kind boolean;
  #L27172c.  if v0 == 0 then goto L27177c;
  #L271730.  v3:= (`io.reactivex.e0.a.e`) v3 @kind object;
  #L271734.  v0:= 3I;
  #L271736.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L27173c.  v0:= temp;
  #L27173e.  v1:= 1I;
  #L271740.  if v0 != v1 then goto L271762;
  #L271744.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.sourceMode` @type ^`int` := v0;
  #L271748.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L27174c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L271750.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271754.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27175a.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$ConcatMapEagerMainObserver;.drain:()V` @kind virtual;
  #L271760.  return @kind void;
  #L271762.  v1:= 2I;
  #L271764.  if v0 != v1 then goto L27177c;
  #L271768.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.sourceMode` @type ^`int` := v0;
  #L27176c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L271770.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271774.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27177a.  return @kind void;
  #L27177c.  v3:= new `io.reactivex.internal.queue.a`;
  #L271780.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.prefetch` @type ^`int`;
  #L271784.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L27178a.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L27178e.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271792.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L271798.  return @kind void;
}
