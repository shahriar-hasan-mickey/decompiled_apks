record `io.reactivex.internal.operators.observable.ObservableAmb$a` @kind class @AccessFlag FINAL extends `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableAmb$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[] `io.reactivex.internal.operators.observable.ObservableAmb$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableAmb$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v1 @kind this, `io.reactivex.t` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.<init>:(Lio/reactivex/t;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L26d4fc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26d502.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L26d506.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26d50c.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L26d510.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.t` := v2 @kind object;
  #L26d514.  v2:= new `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[v3];
  #L26d518.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[] := v2 @kind object;
  #L26d51c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v7 @kind this, `io.reactivex.r`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.a:([Lio/reactivex/r;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L26d57c.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[] @kind object;
  #L26d580.  v1:= length @variable v0;
  #L26d582.  v2:= 0I;
  #L26d584.  v3:= 0I;
  #L26d586.  if v3 >= v1 then goto L26d5a4;
  #L26d58a.  v4:= new `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`;
  #L26d58e.  v5:= v3 + 1;
  #L26d592.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.t` @kind object;
  #L26d596.  call `<init>`(v4, v7, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableAmb$a;ILio/reactivex/t;)V` @kind direct;
  #L26d59c.  v0[v3]:= v4 @kind object;
  #L26d5a0.  v3:= v5;
  #L26d5a2.  goto L26d586;
  #L26d5a4.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L26d5a8.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L26d5ae.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.t` @kind object;
  #L26d5b2.  call `onSubscribe`(v3, v7) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26d5b8.  if v2 >= v1 then goto L26d5e2;
  #L26d5bc.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L26d5c0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L26d5c6.  v3:= temp;
  #L26d5c8.  if v3 == 0 then goto L26d5ce;
  #L26d5cc.  return @kind void;
  #L26d5ce.  v3:= v8[v2] @kind object;
  #L26d5d2.  v4:= v0[v2] @kind object;
  #L26d5d6.  call `subscribe`(v3, v4) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L26d5dc.  v2:= v2 + 1;
  #L26d5e0.  goto L26d5b8;
  #L26d5e2.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v5 @kind this, `int` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26d498.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L26d49c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L26d4a2.  v0:= temp;
  #L26d4a4.  v1:= 1I;
  #L26d4a6.  v2:= 0I;
  #L26d4a8.  if v0 != 0 then goto L26d4e0;
  #L26d4ac.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L26d4b0.  call temp:= `compareAndSet`(v0, v2, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L26d4b6.  v0:= temp;
  #L26d4b8.  if v0 == 0 then goto L26d4de;
  #L26d4bc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[] @kind object;
  #L26d4c0.  v3:= length @variable v0;
  #L26d4c2.  if v2 >= v3 then goto L26d4dc;
  #L26d4c6.  v4:= v2 + 1;
  #L26d4ca.  if v4 == v6 then goto L26d4d8;
  #L26d4ce.  v2:= v0[v2] @kind object;
  #L26d4d2.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.dispose:()V` @kind virtual;
  #L26d4d8.  v2:= v4;
  #L26d4da.  goto L26d4c2;
  #L26d4dc.  return v1;
  #L26d4de.  return v2;
  #L26d4e0.  if v0 != v6 then goto L26d4e6;
  #L26d4e4.  goto L26d4e8;
  #L26d4e6.  v1:= 0I;
  #L26d4e8.  return v1;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L26d530.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L26d534.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L26d53a.  v0:= temp;
  #L26d53c.  v1:= -1I;
  #L26d53e.  if v0 == v1 then goto L26d568;
  #L26d542.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L26d546.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L26d54c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver`[] @kind object;
  #L26d550.  v1:= length @variable v0;
  #L26d552.  v2:= 0I;
  #L26d554.  if v2 >= v1 then goto L26d568;
  #L26d558.  v3:= v0[v2] @kind object;
  #L26d55c.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.dispose:()V` @kind virtual;
  #L26d562.  v2:= v2 + 1;
  #L26d566.  goto L26d554;
  #L26d568.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26d46c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L26d470.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L26d476.  v0:= temp;
  #L26d478.  v1:= -1I;
  #L26d47a.  if v0 != v1 then goto L26d482;
  #L26d47e.  v0:= 1I;
  #L26d480.  goto L26d484;
  #L26d482.  v0:= 0I;
  #L26d484.  return v0;
}
