record `io.reactivex.internal.operators.observable.ObservableReplay$SizeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$SizeBoundReplayBuffer.limit` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$SizeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeBoundReplayBuffer` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeBoundReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27ca2c.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.<init>:()V` @kind direct;
  #L27ca32.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$SizeBoundReplayBuffer.limit` @type ^`int` := v1;
  #L27ca36.  return @kind void;
}
procedure `void` `truncate`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeBoundReplayBuffer` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeBoundReplayBuffer;.truncate:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27ca48.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L27ca4c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$SizeBoundReplayBuffer.limit` @type ^`int`;
  #L27ca50.  if v0 <= v1 then goto L27ca5a;
  #L27ca54.  call `removeFirst`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.removeFirst:()V` @kind virtual;
  #L27ca5a.  return @kind void;
}
