record `io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.source` @AccessFlag FINAL;
  `io.reactivex.d0.e` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.stop` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.e` v2 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v3 @kind object, `io.reactivex.r` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/e;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27b90c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27b912.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27b916.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v3 @kind object;
  #L27b91a.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.source` @type ^`io.reactivex.r` := v4 @kind object;
  #L27b91e.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.stop` @type ^`io.reactivex.d0.e` := v2 @kind object;
  #L27b922.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27b934.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.stop` @type ^`io.reactivex.d0.e` @kind object;
  #L27b938.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/d0/e;.getAsBoolean:()Z` @kind interface;
  #L27b93e.  v0:= temp;
  #L27b940.  if v0 == 0 then goto L27b950;
  #L27b944.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27b948.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27b94e.  goto L27b956;
  #L27b950.  call `subscribeNext`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.subscribeNext:()V` @kind virtual;
  #L27b956.  return @kind void;
  #L27b958.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27b95a.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L27b960.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27b964.  call `onError`(v1, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27b96a.  return @kind void;
  catch `java.lang.Throwable` @[L27b934..L27b940] goto L27b958;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27b988.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27b98c.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27b992.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27b9a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27b9a8.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27b9ae.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27b9c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.upstream` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L27b9c4.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L27b9ca.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$RepeatUntilObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27b9dc.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27b9e2.  v0:= temp;
  #L27b9e4.  if v0 != 0 then goto L27ba02;
  #L27b9e8.  v0:= 1I;
  #L27b9ea.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver.source` @type ^`io.reactivex.r` @kind object;
  #L27b9ee.  call `subscribe`(v1, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27b9f4.  v0:= -v0 @kind int;
  #L27b9f6.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27b9fc.  v0:= temp;
  #L27b9fe.  if v0 != 0 then goto L27b9ea;
  #L27ba02.  return @kind void;
}
