record `io.reactivex.internal.operators.observable.c` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Iterable` @kind interface {
  `io.reactivex.r` `io.reactivex.internal.operators.observable.c.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.c` v0 @kind this, `io.reactivex.r` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/c;.<init>:(Lio/reactivex/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L26cba4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26cbaa.  v0.`io.reactivex.internal.operators.observable.c.b` @type ^`io.reactivex.r` := v1 @kind object;
  #L26cbae.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`io.reactivex.internal.operators.observable.c` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/c;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26cb6c.  v0:= new `io.reactivex.internal.operators.observable.b`;
  #L26cb70.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/b;.<init>:()V` @kind direct;
  #L26cb76.  v1:= v2.`io.reactivex.internal.operators.observable.c.b` @type ^`io.reactivex.r` @kind object;
  #L26cb7a.  call temp:= `r`(v1) @signature `Lio/reactivex/n;.r:(Lio/reactivex/r;)Lio/reactivex/n;` @kind static;
  #L26cb80.  v1:= temp @kind object;
  #L26cb82.  call temp:= `materialize`(v1) @signature `Lio/reactivex/n;.materialize:()Lio/reactivex/n;` @kind virtual;
  #L26cb88.  v1:= temp @kind object;
  #L26cb8a.  call `subscribe`(v1, v0) @signature `Lio/reactivex/n;.subscribe:(Lio/reactivex/t;)V` @kind virtual;
  #L26cb90.  return v0 @kind object;
}
