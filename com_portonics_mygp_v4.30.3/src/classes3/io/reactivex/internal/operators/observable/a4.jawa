record `io.reactivex.internal.operators.observable.a4` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.observable.a4.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.a4.c` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.a4.d` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.a4.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.a4.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.a4` v0 @kind this, `io.reactivex.z` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/a4;.<init>:(Lio/reactivex/z;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27ec90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27ec96.  v0.`io.reactivex.internal.operators.observable.a4.b` @type ^`io.reactivex.z` := v1 @kind object;
  #L27ec9a.  v0.`io.reactivex.internal.operators.observable.a4.c` @type ^`java.lang.Object` := v2 @kind object;
  #L27ec9e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.a4` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/a4;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ecb0.  v0:= v1.`io.reactivex.internal.operators.observable.a4.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L27ecb4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27ecba.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.a4` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/a4;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ec70.  v0:= v1.`io.reactivex.internal.operators.observable.a4.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L27ec74.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L27ec7a.  v0:= temp;
  #L27ec7c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.a4` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/a4;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27eccc.  v0:= v2.`io.reactivex.internal.operators.observable.a4.f` @type ^`boolean` @kind boolean;
  #L27ecd0.  if v0 == 0 then goto L27ecd6;
  #L27ecd4.  return @kind void;
  #L27ecd6.  v0:= 1I;
  #L27ecd8.  v2.`io.reactivex.internal.operators.observable.a4.f` @type ^`boolean` := v0 @kind boolean;
  #L27ecdc.  v0:= v2.`io.reactivex.internal.operators.observable.a4.e` @type ^`java.lang.Object` @kind object;
  #L27ece0.  v1:= 0I;
  #L27ece2.  v2.`io.reactivex.internal.operators.observable.a4.e` @type ^`java.lang.Object` := v1 @kind object;
  #L27ece6.  if v0 != 0 then goto L27ecee;
  #L27ecea.  v0:= v2.`io.reactivex.internal.operators.observable.a4.c` @type ^`java.lang.Object` @kind object;
  #L27ecee.  if v0 == 0 then goto L27ecfe;
  #L27ecf2.  v1:= v2.`io.reactivex.internal.operators.observable.a4.b` @type ^`io.reactivex.z` @kind object;
  #L27ecf6.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L27ecfc.  goto L27ed12;
  #L27ecfe.  v0:= v2.`io.reactivex.internal.operators.observable.a4.b` @type ^`io.reactivex.z` @kind object;
  #L27ed02.  v1:= new `java.util.NoSuchElementException`;
  #L27ed06.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L27ed0c.  call `onError`(v0, v1) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27ed12.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.a4` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/a4;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ed24.  v0:= v1.`io.reactivex.internal.operators.observable.a4.f` @type ^`boolean` @kind boolean;
  #L27ed28.  if v0 == 0 then goto L27ed34;
  #L27ed2c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L27ed32.  return @kind void;
  #L27ed34.  v0:= 1I;
  #L27ed36.  v1.`io.reactivex.internal.operators.observable.a4.f` @type ^`boolean` := v0 @kind boolean;
  #L27ed3a.  v0:= v1.`io.reactivex.internal.operators.observable.a4.b` @type ^`io.reactivex.z` @kind object;
  #L27ed3e.  call `onError`(v0, v2) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27ed44.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.a4` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/a4;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27ed58.  v0:= v2.`io.reactivex.internal.operators.observable.a4.f` @type ^`boolean` @kind boolean;
  #L27ed5c.  if v0 == 0 then goto L27ed62;
  #L27ed60.  return @kind void;
  #L27ed62.  v0:= v2.`io.reactivex.internal.operators.observable.a4.e` @type ^`java.lang.Object` @kind object;
  #L27ed66.  if v0 == 0 then goto L27ed94;
  #L27ed6a.  v3:= 1I;
  #L27ed6c.  v2.`io.reactivex.internal.operators.observable.a4.f` @type ^`boolean` := v3 @kind boolean;
  #L27ed70.  v3:= v2.`io.reactivex.internal.operators.observable.a4.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L27ed74.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27ed7a.  v3:= v2.`io.reactivex.internal.operators.observable.a4.b` @type ^`io.reactivex.z` @kind object;
  #L27ed7e.  v0:= new `java.lang.IllegalArgumentException`;
  #L27ed82.  v1:= "Sequence contains more than one element!" @kind object;
  #L27ed86.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27ed8c.  call `onError`(v3, v0) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27ed92.  return @kind void;
  #L27ed94.  v2.`io.reactivex.internal.operators.observable.a4.e` @type ^`java.lang.Object` := v3 @kind object;
  #L27ed98.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.a4` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/a4;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27edac.  v0:= v1.`io.reactivex.internal.operators.observable.a4.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L27edb0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27edb6.  v0:= temp;
  #L27edb8.  if v0 == 0 then goto L27edca;
  #L27edbc.  v1.`io.reactivex.internal.operators.observable.a4.d` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L27edc0.  v2:= v1.`io.reactivex.internal.operators.observable.a4.b` @type ^`io.reactivex.z` @kind object;
  #L27edc4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/z;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27edca.  return @kind void;
}
