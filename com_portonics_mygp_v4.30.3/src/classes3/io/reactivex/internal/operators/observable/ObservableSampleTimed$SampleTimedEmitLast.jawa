record `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast` v0 @kind this, `io.reactivex.t` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.x` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedEmitLast;.<init>:(Lio/reactivex/t;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27d51c.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.<init>:(Lio/reactivex/t;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @kind direct;
  #L27d522.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L27d526.  v2:= 1I;
  #L27d528.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L27d52e.  v0.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L27d532.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedEmitLast;.complete:()V` @AccessFlag  {
    temp;
    v0;

  #L27d544.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.emit:()V` @kind virtual;
  #L27d54a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27d54e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L27d554.  v0:= temp;
  #L27d556.  if v0 != 0 then goto L27d564;
  #L27d55a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d55e.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27d564.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedEmitLast;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27d578.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27d57c.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L27d582.  v0:= temp;
  #L27d584.  v1:= 2I;
  #L27d586.  if v0 != v1 then goto L27d5aa;
  #L27d58a.  call `emit`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.emit:()V` @kind virtual;
  #L27d590.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27d594.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L27d59a.  v0:= temp;
  #L27d59c.  if v0 != 0 then goto L27d5aa;
  #L27d5a0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d5a4.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27d5aa.  return @kind void;
}
