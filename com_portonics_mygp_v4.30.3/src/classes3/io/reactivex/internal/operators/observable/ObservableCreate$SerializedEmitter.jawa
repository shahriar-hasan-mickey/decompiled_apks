record `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.p` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @AccessFlag VOLATILE;
  `io.reactivex.p` `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.error` @AccessFlag FINAL;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.queue` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.p` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.<init>:(Lio/reactivex/p;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L272264.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27226a.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.p` := v2 @kind object;
  #L27226e.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L272272.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L272278.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L27227c.  v2:= new `io.reactivex.internal.queue.a`;
  #L272280.  v0:= 16I;
  #L272284.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L27228a.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.queue` @type ^`io.reactivex.internal.queue.a` := v2 @kind object;
  #L27228e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L2722a0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2722a6.  v0:= temp;
  #L2722a8.  if v0 != 0 then goto L2722b2;
  #L2722ac.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drainLoop:()V` @kind virtual;
  #L2722b2.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2722c4.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.p` @kind object;
  #L2722c8.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2722cc.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2722d0.  v3:= 1I;
  #L2722d2.  v4:= 1I;
  #L2722d4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/p;.isDisposed:()Z` @kind interface;
  #L2722da.  v5:= temp;
  #L2722dc.  if v5 == 0 then goto L2722e8;
  #L2722e0.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2722e6.  return @kind void;
  #L2722e8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2722ee.  v5:= temp @kind object;
  #L2722f0.  if v5 == 0 then goto L27230a;
  #L2722f4.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2722fa.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L272300.  v1:= temp @kind object;
  #L272302.  call `onError`(v0, v1) @signature `Lio/reactivex/d;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L272308.  return @kind void;
  #L27230a.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L27230e.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L272314.  v6:= temp @kind object;
  #L272316.  if v6 != 0 then goto L27231e;
  #L27231a.  v7:= 1I;
  #L27231c.  goto L272320;
  #L27231e.  v7:= 0I;
  #L272320.  if v5 == 0 then goto L272330;
  #L272324.  if v7 == 0 then goto L272330;
  #L272328.  call `onComplete`(v0) @signature `Lio/reactivex/d;.onComplete:()V` @kind interface;
  #L27232e.  return @kind void;
  #L272330.  if v7 == 0 then goto L272344;
  #L272334.  v4:= -v4 @kind int;
  #L272336.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27233c.  v4:= temp;
  #L27233e.  if v4 != 0 then goto L2722d4;
  #L272342.  return @kind void;
  #L272344.  call `onNext`(v0, v6) @signature `Lio/reactivex/d;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27234a.  goto L2722d4;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2721b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.p` @kind object;
  #L2721b4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/p;.isDisposed:()Z` @kind interface;
  #L2721ba.  v0:= temp;
  #L2721bc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27235c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.p` @kind object;
  #L272360.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/p;.isDisposed:()Z` @kind interface;
  #L272366.  v0:= temp;
  #L272368.  if v0 != 0 then goto L272382;
  #L27236c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L272370.  if v0 == 0 then goto L272376;
  #L272374.  goto L272382;
  #L272376.  v0:= 1I;
  #L272378.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L27237c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drain:()V` @kind virtual;
  #L272382.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272394.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L27239a.  v0:= temp;
  #L27239c.  if v0 != 0 then goto L2723a6;
  #L2723a0.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2723a6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2723b8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.p` @kind object;
  #L2723bc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/p;.isDisposed:()Z` @kind interface;
  #L2723c2.  v0:= temp;
  #L2723c4.  if v0 != 0 then goto L27244a;
  #L2723c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L2723cc.  if v0 == 0 then goto L2723d2;
  #L2723d0.  goto L27244a;
  #L2723d2.  if v3 != 0 then goto L2723ec;
  #L2723d6.  v3:= new `java.lang.NullPointerException`;
  #L2723da.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L2723de.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2723e4.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2723ea.  return @kind void;
  #L2723ec.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2723f2.  v0:= temp;
  #L2723f4.  if v0 != 0 then goto L272420;
  #L2723f8.  v0:= 0I;
  #L2723fa.  v1:= 1I;
  #L2723fc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L272402.  v0:= temp;
  #L272404.  if v0 == 0 then goto L272420;
  #L272408.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.p` @kind object;
  #L27240c.  call `onNext`(v0, v3) @signature `Lio/reactivex/d;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L272412.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L272418.  v3:= temp;
  #L27241a.  if v3 != 0 then goto L27243c;
  #L27241e.  return @kind void;
  #L272420.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L272424.  @monitorenter v0
  #L272426.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L27242c.  @monitorexit v0
  #L27242e.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L272434.  v3:= temp;
  #L272436.  if v3 == 0 then goto L27243c;
  #L27243a.  return @kind void;
  #L27243c.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drainLoop:()V` @kind virtual;
  #L272442.  return @kind void;
  #L272444.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L272446.  @monitorexit v0
  #L272448.  throw v3;
  #L27244a.  return @kind void;
  catch `java.lang.Throwable` @[L272426..L27242e] goto L272444;
  catch `java.lang.Throwable` @[L272446..L272448] goto L272444;
}
procedure `io.reactivex.p` `serialize`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.serialize:()Lio/reactivex/p;` @AccessFlag PUBLIC {
    temp;

  #L272230.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.d0.f` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.setCancellable:(Lio/reactivex/d0/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272470.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.p` @kind object;
  #L272474.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/p;.setCancellable:(Lio/reactivex/d0/f;)V` @kind interface;
  #L27247a.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27248c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.p` @kind object;
  #L272490.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/p;.setDisposable:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L272496.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272244.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.p` @kind object;
  #L272248.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L27224e.  v0:= temp @kind object;
  #L272250.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2721d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.p` @kind object;
  #L2721d4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/p;.isDisposed:()Z` @kind interface;
  #L2721da.  v0:= temp;
  #L2721dc.  v1:= 0I;
  #L2721de.  if v0 != 0 then goto L27221c;
  #L2721e2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L2721e6.  if v0 == 0 then goto L2721ec;
  #L2721ea.  goto L27221c;
  #L2721ec.  if v3 != 0 then goto L2721fe;
  #L2721f0.  v3:= new `java.lang.NullPointerException`;
  #L2721f4.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L2721f8.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2721fe.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L272202.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L272208.  v3:= temp;
  #L27220a.  if v3 == 0 then goto L27221c;
  #L27220e.  v3:= 1I;
  #L272210.  v2.`io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter.done` @type ^`boolean` := v3 @kind boolean;
  #L272214.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.drain:()V` @kind virtual;
  #L27221a.  return v3;
  #L27221c.  return v1;
}
