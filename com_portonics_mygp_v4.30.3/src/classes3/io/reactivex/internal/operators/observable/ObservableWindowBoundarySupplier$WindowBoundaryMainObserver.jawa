record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.boundaryObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.capacityHint` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.errors` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.other` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.stopWindows` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.BOUNDARY_DISPOSED` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.NEXT_WINDOW` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L283958.  v0:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a`;
  #L28395c.  v1:= 0I;
  #L28395e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;)V` @kind direct;
  #L283964.  `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.BOUNDARY_DISPOSED` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` := v0 @kind object;
  #L283968.  v0:= new `java.lang.Object`;
  #L28396c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L283972.  `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` := v0 @kind object;
  #L283976.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.<init>:(Lio/reactivex/t;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L283988.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L28398e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L283992.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.capacityHint` @type ^`int` := v2;
  #L283996.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28399a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2839a0.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.boundaryObserver` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L2839a4.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L2839a8.  v2:= 1I;
  #L2839aa.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L2839b0.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L2839b4.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L2839b8.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L2839be.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L2839c2.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L2839c6.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L2839cc.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L2839d0.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L2839d4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L2839da.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L2839de.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.other` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L2839e2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2839f4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L2839f8.  v1:= 0I;
  #L2839fa.  v2:= 1I;
  #L2839fc.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L283a02.  v0:= temp;
  #L283a04.  if v0 == 0 then goto L283a28;
  #L283a08.  call `disposeBoundary`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.disposeBoundary:()V` @kind virtual;
  #L283a0e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L283a12.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L283a18.  v0:= temp;
  #L283a1a.  if v0 != 0 then goto L283a28;
  #L283a1e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L283a22.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L283a28.  return @kind void;
}
procedure `void` `disposeBoundary`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.disposeBoundary:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L283a3c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.boundaryObserver` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L283a40.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.BOUNDARY_DISPOSED` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` @kind object;
  #L283a44.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L283a4a.  v0:= temp @kind object;
  #L283a4c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L283a50.  if v0 == 0 then goto L283a5e;
  #L283a54.  if v0 == v1 then goto L283a5e;
  #L283a58.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L283a5e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L283a70.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L283a76.  v0:= temp;
  #L283a78.  if v0 == 0 then goto L283a7e;
  #L283a7c.  return @kind void;
  #L283a7e.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L283a82.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L283a86.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L283a8a.  v3:= 1I;
  #L283a8c.  v4:= 1I;
  #L283a8e.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L283a92.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L283a98.  v5:= temp;
  #L283a9a.  v6:= 0I;
  #L283a9c.  if v5 != 0 then goto L283aac;
  #L283aa0.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L283aa6.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L283aaa.  return @kind void;
  #L283aac.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L283ab0.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` @kind boolean;
  #L283ab4.  if v7 == 0 then goto L283ae8;
  #L283ab8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L283abe.  v8:= temp @kind object;
  #L283ac0.  if v8 == 0 then goto L283ae8;
  #L283ac4.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L283aca.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L283ad0.  v1:= temp @kind object;
  #L283ad2.  if v5 == 0 then goto L283ae0;
  #L283ad6.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L283ada.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L283ae0.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L283ae6.  return @kind void;
  #L283ae8.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L283aee.  v8:= temp @kind object;
  #L283af0.  if v8 != 0 then goto L283af8;
  #L283af4.  v9:= 1I;
  #L283af6.  goto L283afa;
  #L283af8.  v9:= 0I;
  #L283afa.  if v7 == 0 then goto L283b3a;
  #L283afe.  if v9 == 0 then goto L283b3a;
  #L283b02.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L283b08.  v1:= temp @kind object;
  #L283b0a.  if v1 != 0 then goto L283b24;
  #L283b0e.  if v5 == 0 then goto L283b1c;
  #L283b12.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L283b16.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L283b1c.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L283b22.  goto L283b38;
  #L283b24.  if v5 == 0 then goto L283b32;
  #L283b28.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L283b2c.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L283b32.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L283b38.  return @kind void;
  #L283b3a.  if v9 == 0 then goto L283b4e;
  #L283b3e.  v4:= -v4 @kind int;
  #L283b40.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L283b46.  v4:= temp;
  #L283b48.  if v4 != 0 then goto L283a8e;
  #L283b4c.  return @kind void;
  #L283b4e.  v7:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L283b52.  if v8 == v7 then goto L283b5e;
  #L283b56.  call `onNext`(v5, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L283b5c.  goto L283a8e;
  #L283b5e.  if v5 == 0 then goto L283b6c;
  #L283b62.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L283b66.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L283b6c.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L283b70.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L283b76.  v5:= temp;
  #L283b78.  if v5 != 0 then goto L283a8e;
  #L283b7c.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.capacityHint` @type ^`int`;
  #L283b80.  call temp:= `z`(v5, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.z:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L283b86.  v5:= temp @kind object;
  #L283b88.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.window` @type ^`io.reactivex.subjects.UnicastSubject` := v5 @kind object;
  #L283b8c.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L283b90.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L283b96.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.other` @type ^`java.util.concurrent.Callable` @kind object;
  #L283b9a.  call temp:= `call`(v7) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L283ba0.  v7:= temp @kind object;
  #L283ba2.  v8:= "The other Callable returned a null ObservableSource" @kind object;
  #L283ba6.  call temp:= `e`(v7, v8) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L283bac.  v7:= temp @kind object;
  #L283bae.  v7:= (`io.reactivex.r`) v7 @kind object;
  #L283bb2.  v8:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a`;
  #L283bb6.  call `<init>`(v8, v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;)V` @kind direct;
  #L283bbc.  v9:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.boundaryObserver` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L283bc0.  call temp:= `compareAndSet`(v9, v6, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L283bc6.  v6:= temp;
  #L283bc8.  if v6 == 0 then goto L283a8e;
  #L283bcc.  call `subscribe`(v7, v8) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L283bd2.  call `onNext`(v0, v5) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L283bd8.  goto L283a8e;
  #L283bdc.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L283bde.  call `b`(v5) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L283be4.  call temp:= `addThrowable`(v2, v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L283bea.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` := v3 @kind boolean;
  #L283bee.  goto L283a8e;
  catch `java.lang.Throwable` @[L283b96..L283bb2] goto L283bdc;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L283c10.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L283c14.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L283c1a.  v0:= 1I;
  #L283c1c.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L283c20.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L283c26.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L283c38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L283c3c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L283c42.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L283c46.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L283c4c.  v0:= temp;
  #L283c4e.  if v0 == 0 then goto L283c60;
  #L283c52.  v2:= 1I;
  #L283c54.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L283c58.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L283c5e.  goto L283c66;
  #L283c60.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L283c66.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.innerNext:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L283c78.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.boundaryObserver` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L283c7c.  v1:= 0I;
  #L283c7e.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L283c84.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L283c88.  v0:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L283c8c.  call temp:= `offer`(v3, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L283c92.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L283c98.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L283938.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L28393c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L283942.  v0:= temp;
  #L283944.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L283cac.  call `disposeBoundary`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.disposeBoundary:()V` @kind virtual;
  #L283cb2.  v0:= 1I;
  #L283cb4.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L283cb8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L283cbe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L283cd0.  call `disposeBoundary`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.disposeBoundary:()V` @kind virtual;
  #L283cd6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L283cda.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L283ce0.  v0:= temp;
  #L283ce2.  if v0 == 0 then goto L283cf4;
  #L283ce6.  v2:= 1I;
  #L283ce8.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L283cec.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L283cf2.  goto L283cfa;
  #L283cf4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L283cfa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L283d0c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L283d10.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L283d16.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L283d1c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L283d30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L283d34.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L283d3a.  v0:= temp;
  #L283d3c.  if v0 == 0 then goto L283d62;
  #L283d40.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L283d44.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L283d48.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L283d4e.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L283d52.  v0:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L283d56.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L283d5c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.drain:()V` @kind virtual;
  #L283d62.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$WindowBoundaryMainObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L283d74.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L283d78.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L283d7e.  v0:= temp;
  #L283d80.  if v0 != 0 then goto L283d8e;
  #L283d84.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L283d88.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L283d8e.  return @kind void;
}
