record `io.reactivex.internal.operators.observable.i` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.i.b` @AccessFlag FINAL;
  `io.reactivex.d0.m` `io.reactivex.internal.operators.observable.i.c` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.i.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.i.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.i` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.m` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/i;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/m;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26d0f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26d0fa.  v0.`io.reactivex.internal.operators.observable.i.b` @type ^`io.reactivex.t` := v1 @kind object;
  #L26d0fe.  v0.`io.reactivex.internal.operators.observable.i.c` @type ^`io.reactivex.d0.m` := v2 @kind object;
  #L26d102.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.i` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/i;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26d114.  v0:= v1.`io.reactivex.internal.operators.observable.i.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L26d118.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26d11e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.i` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/i;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26d0d4.  v0:= v1.`io.reactivex.internal.operators.observable.i.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L26d0d8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L26d0de.  v0:= temp;
  #L26d0e0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.i` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/i;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26d130.  v0:= v2.`io.reactivex.internal.operators.observable.i.e` @type ^`boolean` @kind boolean;
  #L26d134.  if v0 == 0 then goto L26d13a;
  #L26d138.  return @kind void;
  #L26d13a.  v0:= 1I;
  #L26d13c.  v2.`io.reactivex.internal.operators.observable.i.e` @type ^`boolean` := v0 @kind boolean;
  #L26d140.  v0:= v2.`io.reactivex.internal.operators.observable.i.b` @type ^`io.reactivex.t` @kind object;
  #L26d144.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L26d148.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26d14e.  v0:= v2.`io.reactivex.internal.operators.observable.i.b` @type ^`io.reactivex.t` @kind object;
  #L26d152.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26d158.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.i` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/i;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26d16c.  v0:= v1.`io.reactivex.internal.operators.observable.i.e` @type ^`boolean` @kind boolean;
  #L26d170.  if v0 == 0 then goto L26d17c;
  #L26d174.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26d17a.  return @kind void;
  #L26d17c.  v0:= 1I;
  #L26d17e.  v1.`io.reactivex.internal.operators.observable.i.e` @type ^`boolean` := v0 @kind boolean;
  #L26d182.  v0:= v1.`io.reactivex.internal.operators.observable.i.b` @type ^`io.reactivex.t` @kind object;
  #L26d186.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26d18c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.i` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/i;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26d1a0.  v0:= v1.`io.reactivex.internal.operators.observable.i.e` @type ^`boolean` @kind boolean;
  #L26d1a4.  if v0 == 0 then goto L26d1aa;
  #L26d1a8.  return @kind void;
  #L26d1aa.  v0:= v1.`io.reactivex.internal.operators.observable.i.c` @type ^`io.reactivex.d0.m` @kind object;
  #L26d1ae.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/d0/m;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L26d1b4.  v2:= temp;
  #L26d1b6.  if v2 != 0 then goto L26d1e2;
  #L26d1ba.  v2:= 1I;
  #L26d1bc.  v1.`io.reactivex.internal.operators.observable.i.e` @type ^`boolean` := v2 @kind boolean;
  #L26d1c0.  v2:= v1.`io.reactivex.internal.operators.observable.i.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L26d1c4.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26d1ca.  v2:= v1.`io.reactivex.internal.operators.observable.i.b` @type ^`io.reactivex.t` @kind object;
  #L26d1ce.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L26d1d2.  call `onNext`(v2, v0) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26d1d8.  v2:= v1.`io.reactivex.internal.operators.observable.i.b` @type ^`io.reactivex.t` @kind object;
  #L26d1dc.  call `onComplete`(v2) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26d1e2.  return @kind void;
  #L26d1e4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26d1e6.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26d1ec.  v0:= v1.`io.reactivex.internal.operators.observable.i.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L26d1f0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26d1f6.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/i;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L26d1fc.  return @kind void;
  catch `java.lang.Throwable` @[L26d1aa..L26d1b6] goto L26d1e4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.i` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/i;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26d21c.  v0:= v1.`io.reactivex.internal.operators.observable.i.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L26d220.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26d226.  v0:= temp;
  #L26d228.  if v0 == 0 then goto L26d23a;
  #L26d22c.  v1.`io.reactivex.internal.operators.observable.i.d` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L26d230.  v2:= v1.`io.reactivex.internal.operators.observable.i.b` @type ^`io.reactivex.t` @kind object;
  #L26d234.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26d23a.  return @kind void;
}
