record `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.b` @kind class {
  `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L282d94.  call `<init>`(v0) @signature `Lio/reactivex/observers/b;.<init>:()V` @kind direct;
  #L282d9a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` := v1 @kind object;
  #L282d9e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282db0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.d` @type ^`boolean` @kind boolean;
  #L282db4.  if v0 == 0 then goto L282dba;
  #L282db8.  return @kind void;
  #L282dba.  v0:= 1I;
  #L282dbc.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.d` @type ^`boolean` := v0 @kind boolean;
  #L282dc0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` @kind object;
  #L282dc4.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerComplete:()V` @kind virtual;
  #L282dca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282ddc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.d` @type ^`boolean` @kind boolean;
  #L282de0.  if v0 == 0 then goto L282dec;
  #L282de4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L282dea.  return @kind void;
  #L282dec.  v0:= 1I;
  #L282dee.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.d` @type ^`boolean` := v0 @kind boolean;
  #L282df2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` @kind object;
  #L282df6.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L282dfc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L282e10.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.d` @type ^`boolean` @kind boolean;
  #L282e14.  if v1 == 0 then goto L282e1a;
  #L282e18.  return @kind void;
  #L282e1a.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver` @kind object;
  #L282e1e.  call `innerNext`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.innerNext:()V` @kind virtual;
  #L282e24.  return @kind void;
}
