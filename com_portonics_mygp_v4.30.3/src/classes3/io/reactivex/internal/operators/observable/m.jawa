record `io.reactivex.internal.operators.observable.m` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.m.b` @AccessFlag FINAL;
  `io.reactivex.d0.m` `io.reactivex.internal.operators.observable.m.c` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.m.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.m.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.m` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.m` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/m;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/m;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26d85c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26d862.  v0.`io.reactivex.internal.operators.observable.m.b` @type ^`io.reactivex.t` := v1 @kind object;
  #L26d866.  v0.`io.reactivex.internal.operators.observable.m.c` @type ^`io.reactivex.d0.m` := v2 @kind object;
  #L26d86a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.m` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/m;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26d87c.  v0:= v1.`io.reactivex.internal.operators.observable.m.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L26d880.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26d886.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.m` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/m;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26d83c.  v0:= v1.`io.reactivex.internal.operators.observable.m.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L26d840.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L26d846.  v0:= temp;
  #L26d848.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.m` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/m;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26d898.  v0:= v2.`io.reactivex.internal.operators.observable.m.e` @type ^`boolean` @kind boolean;
  #L26d89c.  if v0 != 0 then goto L26d8be;
  #L26d8a0.  v0:= 1I;
  #L26d8a2.  v2.`io.reactivex.internal.operators.observable.m.e` @type ^`boolean` := v0 @kind boolean;
  #L26d8a6.  v0:= v2.`io.reactivex.internal.operators.observable.m.b` @type ^`io.reactivex.t` @kind object;
  #L26d8aa.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L26d8ae.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26d8b4.  v0:= v2.`io.reactivex.internal.operators.observable.m.b` @type ^`io.reactivex.t` @kind object;
  #L26d8b8.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26d8be.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.m` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/m;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26d8d0.  v0:= v1.`io.reactivex.internal.operators.observable.m.e` @type ^`boolean` @kind boolean;
  #L26d8d4.  if v0 == 0 then goto L26d8e0;
  #L26d8d8.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26d8de.  return @kind void;
  #L26d8e0.  v0:= 1I;
  #L26d8e2.  v1.`io.reactivex.internal.operators.observable.m.e` @type ^`boolean` := v0 @kind boolean;
  #L26d8e6.  v0:= v1.`io.reactivex.internal.operators.observable.m.b` @type ^`io.reactivex.t` @kind object;
  #L26d8ea.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26d8f0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.m` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/m;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26d904.  v0:= v1.`io.reactivex.internal.operators.observable.m.e` @type ^`boolean` @kind boolean;
  #L26d908.  if v0 == 0 then goto L26d90e;
  #L26d90c.  return @kind void;
  #L26d90e.  v0:= v1.`io.reactivex.internal.operators.observable.m.c` @type ^`io.reactivex.d0.m` @kind object;
  #L26d912.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/d0/m;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L26d918.  v2:= temp;
  #L26d91a.  if v2 == 0 then goto L26d946;
  #L26d91e.  v2:= 1I;
  #L26d920.  v1.`io.reactivex.internal.operators.observable.m.e` @type ^`boolean` := v2 @kind boolean;
  #L26d924.  v2:= v1.`io.reactivex.internal.operators.observable.m.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L26d928.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26d92e.  v2:= v1.`io.reactivex.internal.operators.observable.m.b` @type ^`io.reactivex.t` @kind object;
  #L26d932.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L26d936.  call `onNext`(v2, v0) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26d93c.  v2:= v1.`io.reactivex.internal.operators.observable.m.b` @type ^`io.reactivex.t` @kind object;
  #L26d940.  call `onComplete`(v2) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26d946.  return @kind void;
  #L26d948.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26d94a.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26d950.  v0:= v1.`io.reactivex.internal.operators.observable.m.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L26d954.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26d95a.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/m;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L26d960.  return @kind void;
  catch `java.lang.Throwable` @[L26d90e..L26d91a] goto L26d948;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.m` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/m;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26d980.  v0:= v1.`io.reactivex.internal.operators.observable.m.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L26d984.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26d98a.  v0:= temp;
  #L26d98c.  if v0 == 0 then goto L26d99e;
  #L26d990.  v1.`io.reactivex.internal.operators.observable.m.d` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L26d994.  v2:= v1.`io.reactivex.internal.operators.observable.m.b` @type ^`io.reactivex.t` @kind object;
  #L26d998.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26d99e.  return @kind void;
}
