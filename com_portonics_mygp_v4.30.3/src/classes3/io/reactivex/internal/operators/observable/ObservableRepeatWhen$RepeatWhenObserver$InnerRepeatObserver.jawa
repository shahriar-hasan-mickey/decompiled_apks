record `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27ba6c.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` := v1 @kind object;
  #L27ba70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27ba76.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ba88.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` @kind object;
  #L27ba8c.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.innerComplete:()V` @kind virtual;
  #L27ba92.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27baa4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` @kind object;
  #L27baa8.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L27baae.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L27bac0.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver.this$0` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` @kind object;
  #L27bac4.  call `innerNext`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.innerNext:()V` @kind virtual;
  #L27baca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L27badc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27bae2.  return @kind void;
}
