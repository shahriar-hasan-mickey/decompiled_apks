record `io.reactivex.internal.operators.observable.l0` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.l0.b` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.l0.c` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.l0.d` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.l0.e` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.l0.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.l0.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.l0` v1 @kind this, `io.reactivex.t` v2 @kind object, `io.reactivex.d0.k` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/l0;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2725c0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2725c6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2725ca.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2725d0.  v1.`io.reactivex.internal.operators.observable.l0.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L2725d4.  v1.`io.reactivex.internal.operators.observable.l0.b` @type ^`io.reactivex.t` := v2 @kind object;
  #L2725d8.  v1.`io.reactivex.internal.operators.observable.l0.c` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L2725dc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.l0` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/l0;.a:(JLjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L272618.  v0:= v3.`io.reactivex.internal.operators.observable.l0.f` @type ^`long` @kind wide;
  #L27261c.  v2:= lcmp(v4, v0);
  #L272620.  if v2 != 0 then goto L27262e;
  #L272624.  v4:= v3.`io.reactivex.internal.operators.observable.l0.b` @type ^`io.reactivex.t` @kind object;
  #L272628.  call `onNext`(v4, v6) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27262e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.l0` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/l0;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2725f0.  v0:= v1.`io.reactivex.internal.operators.observable.l0.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L2725f4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2725fa.  v0:= v1.`io.reactivex.internal.operators.observable.l0.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2725fe.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L272604.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.l0` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/l0;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2725a0.  v0:= v1.`io.reactivex.internal.operators.observable.l0.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L2725a4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L2725aa.  v0:= temp;
  #L2725ac.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.l0` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/l0;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L272640.  v0:= v2.`io.reactivex.internal.operators.observable.l0.g` @type ^`boolean` @kind boolean;
  #L272644.  if v0 == 0 then goto L27264a;
  #L272648.  return @kind void;
  #L27264a.  v0:= 1I;
  #L27264c.  v2.`io.reactivex.internal.operators.observable.l0.g` @type ^`boolean` := v0 @kind boolean;
  #L272650.  v0:= v2.`io.reactivex.internal.operators.observable.l0.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L272654.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27265a.  v0:= temp @kind object;
  #L27265c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L272660.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L272664.  if v0 == v1 then goto L272686;
  #L272668.  v0:= (`io.reactivex.internal.operators.observable.k0`) v0 @kind object;
  #L27266c.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/k0;.b:()V` @kind virtual;
  #L272672.  v0:= v2.`io.reactivex.internal.operators.observable.l0.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L272676.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27267c.  v0:= v2.`io.reactivex.internal.operators.observable.l0.b` @type ^`io.reactivex.t` @kind object;
  #L272680.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L272686.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.l0` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/l0;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272698.  v0:= v1.`io.reactivex.internal.operators.observable.l0.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27269c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2726a2.  v0:= v1.`io.reactivex.internal.operators.observable.l0.b` @type ^`io.reactivex.t` @kind object;
  #L2726a6.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2726ac.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.l0` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/l0;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2726c0.  v0:= v5.`io.reactivex.internal.operators.observable.l0.g` @type ^`boolean` @kind boolean;
  #L2726c4.  if v0 == 0 then goto L2726ca;
  #L2726c8.  return @kind void;
  #L2726ca.  v0:= v5.`io.reactivex.internal.operators.observable.l0.f` @type ^`long` @kind wide;
  #L2726ce.  v2:= 1L;
  #L2726d2.  v0:= v0 + v2 @kind long;
  #L2726d4.  v5.`io.reactivex.internal.operators.observable.l0.f` @type ^`long` := v0 @kind wide;
  #L2726d8.  v2:= v5.`io.reactivex.internal.operators.observable.l0.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2726dc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2726e2.  v2:= temp @kind object;
  #L2726e4.  v2:= (`io.reactivex.disposables.b`) v2 @kind object;
  #L2726e8.  if v2 == 0 then goto L2726f2;
  #L2726ec.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2726f2.  v3:= v5.`io.reactivex.internal.operators.observable.l0.c` @type ^`io.reactivex.d0.k` @kind object;
  #L2726f6.  call temp:= `apply`(v3, v6) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2726fc.  v3:= temp @kind object;
  #L2726fe.  v4:= "The ObservableSource supplied is null" @kind object;
  #L272702.  call temp:= `e`(v3, v4) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L272708.  v3:= temp @kind object;
  #L27270a.  v3:= (`io.reactivex.r`) v3 @kind object;
  #L27270e.  v4:= new `io.reactivex.internal.operators.observable.k0`;
  #L272712.  call `<init>`(v4, v5, v0, v6) @signature `Lio/reactivex/internal/operators/observable/k0;.<init>:(Lio/reactivex/internal/operators/observable/l0;JLjava/lang/Object;)V` @kind direct;
  #L272718.  v6:= v5.`io.reactivex.internal.operators.observable.l0.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27271c.  call temp:= `compareAndSet`(v6, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L272722.  v6:= temp;
  #L272724.  if v6 == 0 then goto L27272e;
  #L272728.  call `subscribe`(v3, v4) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27272e.  return @kind void;
  #L272730.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L272732.  call `b`(v6) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L272738.  call `dispose`(v5) @signature `Lio/reactivex/internal/operators/observable/l0;.dispose:()V` @kind virtual;
  #L27273e.  v0:= v5.`io.reactivex.internal.operators.observable.l0.b` @type ^`io.reactivex.t` @kind object;
  #L272742.  call `onError`(v0, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L272748.  return @kind void;
  catch `java.lang.Throwable` @[L2726f2..L27270e] goto L272730;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.l0` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/l0;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272768.  v0:= v1.`io.reactivex.internal.operators.observable.l0.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L27276c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L272772.  v0:= temp;
  #L272774.  if v0 == 0 then goto L272786;
  #L272778.  v1.`io.reactivex.internal.operators.observable.l0.d` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L27277c.  v2:= v1.`io.reactivex.internal.operators.observable.l0.b` @type ^`io.reactivex.t` @kind object;
  #L272780.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L272786.  return @kind void;
}
