record `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer.idx` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableTimeout$a` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer` v0 @kind this, `long` v1 , `io.reactivex.internal.operators.observable.ObservableTimeout$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeout$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2813ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2813b2.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer.idx` @type ^`long` := v1 @kind wide;
  #L2813b6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer.parent` @type ^`io.reactivex.internal.operators.observable.ObservableTimeout$a` := v3 @kind object;
  #L2813ba.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L2813cc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2813d2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281384.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28138a.  v0:= temp @kind object;
  #L28138c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L281390.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L281396.  v0:= temp;
  #L281398.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2813e4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2813ea.  v0:= temp @kind object;
  #L2813ec.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2813f0.  if v0 == v1 then goto L281408;
  #L2813f4.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2813fa.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer.parent` @type ^`io.reactivex.internal.operators.observable.ObservableTimeout$a` @kind object;
  #L2813fe.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer.idx` @type ^`long` @kind wide;
  #L281402.  call `onTimeout`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.onTimeout:(J)V` @kind interface;
  #L281408.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28141c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L281422.  v0:= temp @kind object;
  #L281424.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L281428.  if v0 == v1 then goto L281442;
  #L28142c.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L281432.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer.parent` @type ^`io.reactivex.internal.operators.observable.ObservableTimeout$a` @kind object;
  #L281436.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer.idx` @type ^`long` @kind wide;
  #L28143a.  call `onTimeoutError`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$a;.onTimeoutError:(JLjava/lang/Throwable;)V` @kind interface;
  #L281440.  goto L281448;
  #L281442.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L281448.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28145c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L281462.  v3:= temp @kind object;
  #L281464.  v3:= (`io.reactivex.disposables.b`) v3 @kind object;
  #L281468.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L28146c.  if v3 == v0 then goto L28148a;
  #L281470.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281476.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28147c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer.parent` @type ^`io.reactivex.internal.operators.observable.ObservableTimeout$a` @kind object;
  #L281480.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer.idx` @type ^`long` @kind wide;
  #L281484.  call `onTimeout`(v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.onTimeout:(J)V` @kind interface;
  #L28148a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L28149c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2814a2.  return @kind void;
}
