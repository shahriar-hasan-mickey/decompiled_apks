record `io.reactivex.internal.operators.observable.ObservableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class, `io.reactivex.t` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableCache.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableCache.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableCache.g` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableCache.h` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.observable.ObservableCache$a` `io.reactivex.internal.operators.observable.ObservableCache.i` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableCache$a` `io.reactivex.internal.operators.observable.ObservableCache.j` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableCache.k` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableCache.l` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCache.m` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[] `@@io.reactivex.internal.operators.observable.ObservableCache.c` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[] `@@io.reactivex.internal.operators.observable.ObservableCache.d` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L26fe34.  v0:= 0I;
  #L26fe36.  v1:= new `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[v0];
  #L26fe3a.  `@@io.reactivex.internal.operators.observable.ObservableCache.c` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[] := v1 @kind object;
  #L26fe3e.  v0:= new `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[v0];
  #L26fe42.  `@@io.reactivex.internal.operators.observable.ObservableCache.d` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[] := v0 @kind object;
  #L26fe46.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCache` v0 @kind this, `io.reactivex.n` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.<init>:(Lio/reactivex/n;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L26fe58.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/r;)V` @kind direct;
  #L26fe5e.  v0.`io.reactivex.internal.operators.observable.ObservableCache.f` @type ^`int` := v2;
  #L26fe62.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L26fe66.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L26fe6c.  v0.`io.reactivex.internal.operators.observable.ObservableCache.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L26fe70.  v1:= new `io.reactivex.internal.operators.observable.ObservableCache$a`;
  #L26fe74.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.<init>:(I)V` @kind direct;
  #L26fe7a.  v0.`io.reactivex.internal.operators.observable.ObservableCache.i` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` := v1 @kind object;
  #L26fe7e.  v0.`io.reactivex.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` := v1 @kind object;
  #L26fe82.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L26fe86.  v2:= `@@io.reactivex.internal.operators.observable.ObservableCache.c` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[] @kind object;
  #L26fe8a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L26fe90.  v0.`io.reactivex.internal.operators.observable.ObservableCache.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L26fe94.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCache` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L26fefc.  v0:= 1I;
  #L26fefe.  v4.`io.reactivex.internal.operators.observable.ObservableCache.m` @type ^`boolean` := v0 @kind boolean;
  #L26ff02.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26ff06.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache.d` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[] @kind object;
  #L26ff0a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26ff10.  v0:= temp @kind object;
  #L26ff12.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[]) v0 @kind object;
  #L26ff16.  v1:= length @variable v0;
  #L26ff18.  v2:= 0I;
  #L26ff1a.  if v2 >= v1 then goto L26ff2e;
  #L26ff1e.  v3:= v0[v2] @kind object;
  #L26ff22.  call `y`(v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.y:(Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;)V` @kind virtual;
  #L26ff28.  v2:= v2 + 1;
  #L26ff2c.  goto L26ff1a;
  #L26ff2e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCache` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L26ff40.  v3.`io.reactivex.internal.operators.observable.ObservableCache.l` @type ^`java.lang.Throwable` := v4 @kind object;
  #L26ff44.  v4:= 1I;
  #L26ff46.  v3.`io.reactivex.internal.operators.observable.ObservableCache.m` @type ^`boolean` := v4 @kind boolean;
  #L26ff4a.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26ff4e.  v0:= `@@io.reactivex.internal.operators.observable.ObservableCache.d` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[] @kind object;
  #L26ff52.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26ff58.  v4:= temp @kind object;
  #L26ff5a.  v4:= (`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[]) v4 @kind object;
  #L26ff5e.  v0:= length @variable v4;
  #L26ff60.  v1:= 0I;
  #L26ff62.  if v1 >= v0 then goto L26ff76;
  #L26ff66.  v2:= v4[v1] @kind object;
  #L26ff6a.  call `y`(v3, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.y:(Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;)V` @kind virtual;
  #L26ff70.  v1:= v1 + 1;
  #L26ff74.  goto L26ff62;
  #L26ff76.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26ff88.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableCache.k` @type ^`int`;
  #L26ff8c.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableCache.f` @type ^`int`;
  #L26ff90.  v2:= 0I;
  #L26ff92.  v3:= 1I;
  #L26ff94.  if v0 != v1 then goto L26ffbc;
  #L26ff98.  v1:= new `io.reactivex.internal.operators.observable.ObservableCache$a`;
  #L26ff9c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.<init>:(I)V` @kind direct;
  #L26ffa2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$a.a` @type ^`java.lang.Object`[] @kind object;
  #L26ffa6.  v0[v2]:= v6 @kind object;
  #L26ffaa.  v5.`io.reactivex.internal.operators.observable.ObservableCache.k` @type ^`int` := v3;
  #L26ffae.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` @kind object;
  #L26ffb2.  v6.`io.reactivex.internal.operators.observable.ObservableCache$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` := v1 @kind object;
  #L26ffb6.  v5.`io.reactivex.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` := v1 @kind object;
  #L26ffba.  goto L26ffce;
  #L26ffbc.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` @kind object;
  #L26ffc0.  v1:= v1.`io.reactivex.internal.operators.observable.ObservableCache$a.a` @type ^`java.lang.Object`[] @kind object;
  #L26ffc4.  v1[v0]:= v6 @kind object;
  #L26ffc8.  v0:= v0 + v3 @kind int;
  #L26ffca.  v5.`io.reactivex.internal.operators.observable.ObservableCache.k` @type ^`int` := v0;
  #L26ffce.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableCache.h` @type ^`long` @kind wide;
  #L26ffd2.  v3:= 1L;
  #L26ffd6.  v0:= v0 + v3 @kind long;
  #L26ffd8.  v5.`io.reactivex.internal.operators.observable.ObservableCache.h` @type ^`long` := v0 @kind wide;
  #L26ffdc.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableCache.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26ffe0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26ffe6.  v6:= temp @kind object;
  #L26ffe8.  v6:= (`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[]) v6 @kind object;
  #L26ffec.  v0:= length @variable v6;
  #L26ffee.  if v2 >= v0 then goto L270002;
  #L26fff2.  v1:= v6[v2] @kind object;
  #L26fff6.  call `y`(v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.y:(Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;)V` @kind virtual;
  #L26fffc.  v2:= v2 + 1;
  #L270000.  goto L26ffee;
  #L270002.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCache` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L270014.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableCache` v3 @kind this, `io.reactivex.t` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L270178.  v0:= new `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`;
  #L27017c.  call `<init>`(v0, v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;.<init>:(Lio/reactivex/t;Lio/reactivex/internal/operators/observable/ObservableCache;)V` @kind direct;
  #L270182.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L270188.  call `w`(v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.w:(Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;)V` @kind virtual;
  #L27018e.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L270192.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L270198.  v4:= temp;
  #L27019a.  if v4 != 0 then goto L2701be;
  #L27019e.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L2701a2.  v1:= 0I;
  #L2701a4.  v2:= 1I;
  #L2701a6.  call temp:= `compareAndSet`(v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L2701ac.  v4:= temp;
  #L2701ae.  if v4 == 0 then goto L2701be;
  #L2701b2.  v4:= v3.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L2701b6.  call `subscribe`(v4, v3) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L2701bc.  goto L2701c4;
  #L2701be.  call `y`(v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.y:(Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;)V` @kind virtual;
  #L2701c4.  return @kind void;
}
procedure `void` `w`(`io.reactivex.internal.operators.observable.ObservableCache` v4 @kind this, `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.w:(Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L26fea8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26feac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26feb2.  v0:= temp @kind object;
  #L26feb4.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[]) v0 @kind object;
  #L26feb8.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache.d` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[] @kind object;
  #L26febc.  if v0 != v1 then goto L26fec2;
  #L26fec0.  return @kind void;
  #L26fec2.  v1:= length @variable v0;
  #L26fec4.  v2:= v1 + 1;
  #L26fec8.  v2:= new `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[v2];
  #L26fecc.  v3:= 0I;
  #L26fece.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L26fed4.  v2[v1]:= v5 @kind object;
  #L26fed8.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableCache.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26fedc.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26fee2.  v0:= temp;
  #L26fee4.  if v0 == 0 then goto L26fea8;
  #L26fee8.  return @kind void;
}
procedure `void` `x`(`io.reactivex.internal.operators.observable.ObservableCache` v6 @kind this, `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.x:(Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L270028.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableCache.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27002c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L270032.  v0:= temp @kind object;
  #L270034.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[]) v0 @kind object;
  #L270038.  v1:= length @variable v0;
  #L27003a.  if v1 != 0 then goto L270040;
  #L27003e.  return @kind void;
  #L270040.  v2:= -1I;
  #L270042.  v3:= 0I;
  #L270044.  v4:= 0I;
  #L270046.  if v4 >= v1 then goto L27005c;
  #L27004a.  v5:= v0[v4] @kind object;
  #L27004e.  if v5 != v7 then goto L270056;
  #L270052.  v2:= v4;
  #L270054.  goto L27005c;
  #L270056.  v4:= v4 + 1;
  #L27005a.  goto L270046;
  #L27005c.  if v2 >= 0 then goto L270062;
  #L270060.  return @kind void;
  #L270062.  v4:= 1I;
  #L270064.  if v1 != v4 then goto L27006e;
  #L270068.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache.c` @type ^`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[] @kind object;
  #L27006c.  goto L27008c;
  #L27006e.  v5:= v1 + -1;
  #L270072.  v5:= new `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable`[v5];
  #L270076.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27007c.  v3:= v2 + 1;
  #L270080.  v1:= v1 - v2 @kind int;
  #L270082.  v1:= v1 - v4 @kind int;
  #L270084.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27008a.  v1:= v5 @kind object;
  #L27008c.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableCache.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L270090.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L270096.  v0:= temp;
  #L270098.  if v0 == 0 then goto L270028;
  #L27009c.  return @kind void;
}
procedure `void` `y`(`io.reactivex.internal.operators.observable.ObservableCache` v14 @kind this, `io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable` v15 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.y:(Lio/reactivex/internal/operators/observable/ObservableCache$CacheDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2700b0.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2700b6.  v0:= temp;
  #L2700b8.  if v0 == 0 then goto L2700be;
  #L2700bc.  return @kind void;
  #L2700be.  v0:= v15.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.index` @type ^`long` @kind wide;
  #L2700c2.  v2:= v15.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.offset` @type ^`int`;
  #L2700c6.  v3:= v15.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.node` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` @kind object;
  #L2700ca.  v4:= v15.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L2700ce.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableCache.f` @type ^`int`;
  #L2700d2.  v6:= 1I;
  #L2700d4.  v7:= 1I;
  #L2700d6.  v8:= v15.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.disposed` @type ^`boolean` @kind boolean;
  #L2700da.  v9:= 0I;
  #L2700dc.  if v8 == 0 then goto L2700e6;
  #L2700e0.  v15.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.node` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` := v9 @kind object;
  #L2700e4.  return @kind void;
  #L2700e6.  v8:= v14.`io.reactivex.internal.operators.observable.ObservableCache.m` @type ^`boolean` @kind boolean;
  #L2700ea.  v10:= v14.`io.reactivex.internal.operators.observable.ObservableCache.h` @type ^`long` @kind wide;
  #L2700ee.  v12:= 0I;
  #L2700f0.  v13:= lcmp(v10, v0);
  #L2700f4.  if v13 != 0 then goto L2700fc;
  #L2700f8.  v10:= 1I;
  #L2700fa.  goto L2700fe;
  #L2700fc.  v10:= 0I;
  #L2700fe.  if v8 == 0 then goto L270122;
  #L270102.  if v10 == 0 then goto L270122;
  #L270106.  v15.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.node` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` := v9 @kind object;
  #L27010a.  v15:= v14.`io.reactivex.internal.operators.observable.ObservableCache.l` @type ^`java.lang.Throwable` @kind object;
  #L27010e.  if v15 == 0 then goto L27011a;
  #L270112.  call `onError`(v4, v15) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L270118.  goto L270120;
  #L27011a.  call `onComplete`(v4) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L270120.  return @kind void;
  #L270122.  if v10 != 0 then goto L27014a;
  #L270126.  if v2 != v5 then goto L270132;
  #L27012a.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableCache$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` @kind object;
  #L27012e.  v3:= v2 @kind object;
  #L270130.  v2:= 0I;
  #L270132.  v8:= v3.`io.reactivex.internal.operators.observable.ObservableCache$a.a` @type ^`java.lang.Object`[] @kind object;
  #L270136.  v8:= v8[v2] @kind object;
  #L27013a.  call `onNext`(v4, v8) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L270140.  v2:= v2 + v6 @kind int;
  #L270142.  v8:= 1L;
  #L270146.  v0:= v0 + v8 @kind long;
  #L270148.  goto L2700d6;
  #L27014a.  v15.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.index` @type ^`long` := v0 @kind wide;
  #L27014e.  v15.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.offset` @type ^`int` := v2;
  #L270152.  v15.`io.reactivex.internal.operators.observable.ObservableCache$CacheDisposable.node` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a` := v3 @kind object;
  #L270156.  v7:= -v7 @kind int;
  #L270158.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27015e.  v7:= temp;
  #L270160.  if v7 != 0 then goto L2700d6;
  #L270164.  return @kind void;
}
