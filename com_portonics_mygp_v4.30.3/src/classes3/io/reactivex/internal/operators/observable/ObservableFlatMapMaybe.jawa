record `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe` v0 @kind this, `io.reactivex.r` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe;.<init>:(Lio/reactivex/r;Lio/reactivex/d0/k;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L275a94.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/r;)V` @kind direct;
  #L275a9a.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe.c` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L275a9e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe.d` @type ^`boolean` := v3 @kind boolean;
  #L275aa2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe` v4 @kind this, `io.reactivex.t` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L275ab4.  v0:= v4.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L275ab8.  v1:= new `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver`;
  #L275abc.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe.c` @type ^`io.reactivex.d0.k` @kind object;
  #L275ac0.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe.d` @type ^`boolean` @kind boolean;
  #L275ac4.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;Z)V` @kind direct;
  #L275aca.  call `subscribe`(v0, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L275ad0.  return @kind void;
}
