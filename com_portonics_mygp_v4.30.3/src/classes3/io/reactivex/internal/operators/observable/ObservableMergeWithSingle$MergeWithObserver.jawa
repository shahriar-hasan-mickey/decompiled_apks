record `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.disposed` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDone` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherState` @AccessFlag VOLATILE;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.OTHER_STATE_CONSUMED_OR_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.OTHER_STATE_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27993c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L279942.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L279946.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27994a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L279950.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L279954.  v1:= new `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver`;
  #L279958.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;)V` @kind direct;
  #L27995e.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver` := v1 @kind object;
  #L279962.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L279966.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L27996c.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L279970.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279984.  v0:= 1I;
  #L279986.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L27998a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27998e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L279994.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver` @kind object;
  #L279998.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27999e.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2799a4.  v0:= temp;
  #L2799a6.  if v0 != 0 then goto L2799b4;
  #L2799aa.  v0:= 0I;
  #L2799ac.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v0 @kind object;
  #L2799b0.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v0 @kind object;
  #L2799b4.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L2799c8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2799ce.  v0:= temp;
  #L2799d0.  if v0 != 0 then goto L2799da;
  #L2799d4.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L2799da.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2799ec.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2799f0.  v1:= 1I;
  #L2799f2.  v2:= 1I;
  #L2799f4.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.disposed` @type ^`boolean` @kind boolean;
  #L2799f8.  v4:= 0I;
  #L2799fa.  if v3 == 0 then goto L279a08;
  #L2799fe.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L279a02.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v4 @kind object;
  #L279a06.  return @kind void;
  #L279a08.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L279a0c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L279a12.  v3:= temp @kind object;
  #L279a14.  if v3 == 0 then goto L279a34;
  #L279a18.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L279a1c.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v4 @kind object;
  #L279a20.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L279a24.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L279a2a.  v1:= temp @kind object;
  #L279a2c.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L279a32.  return @kind void;
  #L279a34.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherState` @type ^`int`;
  #L279a38.  v5:= 2I;
  #L279a3a.  if v3 != v1 then goto L279a52;
  #L279a3e.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` @kind object;
  #L279a42.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v4 @kind object;
  #L279a46.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v5;
  #L279a4a.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L279a50.  v3:= 2I;
  #L279a52.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L279a56.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L279a5a.  if v7 == 0 then goto L279a68;
  #L279a5e.  call temp:= `poll`(v7) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L279a64.  v7:= temp @kind object;
  #L279a66.  goto L279a6a;
  #L279a68.  v7:= v4 @kind object;
  #L279a6a.  if v7 != 0 then goto L279a72;
  #L279a6e.  v8:= 1I;
  #L279a70.  goto L279a74;
  #L279a72.  v8:= 0I;
  #L279a74.  if v6 == 0 then goto L279a8c;
  #L279a78.  if v8 == 0 then goto L279a8c;
  #L279a7c.  if v3 != v5 then goto L279a8c;
  #L279a80.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v4 @kind object;
  #L279a84.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L279a8a.  return @kind void;
  #L279a8c.  if v8 == 0 then goto L279aa0;
  #L279a90.  v2:= -v2 @kind int;
  #L279a92.  call temp:= `addAndGet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L279a98.  v2:= temp;
  #L279a9a.  if v2 != 0 then goto L2799f4;
  #L279a9e.  return @kind void;
  #L279aa0.  call `onNext`(v0, v7) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L279aa6.  goto L2799f4;
}
procedure `io.reactivex.e0.a.i` `getOrCreateQueue`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/e0/a/i;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27990c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L279910.  if v0 != 0 then goto L27992a;
  #L279914.  v0:= new `io.reactivex.internal.queue.a`;
  #L279918.  call temp:= `c`() @signature `Lio/reactivex/n;.c:()I` @kind static;
  #L27991e.  v1:= temp;
  #L279920.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L279926.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v0 @kind object;
  #L27992a.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2798e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2798e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2798ea.  v0:= temp @kind object;
  #L2798ec.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2798f0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2798f6.  v0:= temp;
  #L2798f8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279ab8.  v0:= 1I;
  #L279aba.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDone` @type ^`boolean` := v0 @kind boolean;
  #L279abe.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L279ac4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279ad8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L279adc.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L279ae2.  v0:= temp;
  #L279ae4.  if v0 == 0 then goto L279afa;
  #L279ae8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L279aec.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L279af2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L279af8.  goto L279b00;
  #L279afa.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L279b00.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L279b14.  v0:= 0I;
  #L279b16.  v1:= 1I;
  #L279b18.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L279b1e.  v0:= temp;
  #L279b20.  if v0 == 0 then goto L279b3c;
  #L279b24.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L279b28.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L279b2e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L279b34.  v3:= temp;
  #L279b36.  if v3 != 0 then goto L279b58;
  #L279b3a.  return @kind void;
  #L279b3c.  call temp:= `getOrCreateQueue`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/e0/a/i;` @kind virtual;
  #L279b42.  v0:= temp @kind object;
  #L279b44.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L279b4a.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L279b50.  v3:= temp;
  #L279b52.  if v3 == 0 then goto L279b58;
  #L279b56.  return @kind void;
  #L279b58.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L279b5e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279b70.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L279b74.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L279b7a.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L279b8c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L279b90.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L279b96.  v0:= temp;
  #L279b98.  if v0 == 0 then goto L279bae;
  #L279b9c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.mainDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L279ba0.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L279ba6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L279bac.  goto L279bb4;
  #L279bae.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L279bb4.  return @kind void;
}
procedure `void` `otherSuccess`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.otherSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L279bc8.  v0:= 0I;
  #L279bca.  v1:= 1I;
  #L279bcc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L279bd2.  v0:= temp;
  #L279bd4.  if v0 == 0 then goto L279bea;
  #L279bd8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L279bdc.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L279be2.  v3:= 2I;
  #L279be4.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v3;
  #L279be8.  goto L279c00;
  #L279bea.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v3 @kind object;
  #L279bee.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v1;
  #L279bf2.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L279bf8.  v3:= temp;
  #L279bfa.  if v3 == 0 then goto L279c00;
  #L279bfe.  return @kind void;
  #L279c00.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L279c06.  return @kind void;
}
