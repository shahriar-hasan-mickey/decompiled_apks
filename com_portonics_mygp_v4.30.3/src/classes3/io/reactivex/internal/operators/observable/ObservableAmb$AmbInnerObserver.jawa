record `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableAmb$a` `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.parent` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableAmb$a` v1 @kind object, `int` v2 , `io.reactivex.t` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableAmb$a;ILio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26d5f4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26d5fa.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` := v1 @kind object;
  #L26d5fe.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.index` @type ^`int` := v2;
  #L26d602.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.t` := v3 @kind object;
  #L26d606.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L26d618.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26d61e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26d630.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` @kind boolean;
  #L26d634.  if v0 == 0 then goto L26d644;
  #L26d638.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26d63c.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26d642.  goto L26d668;
  #L26d644.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` @kind object;
  #L26d648.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.index` @type ^`int`;
  #L26d64c.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L26d652.  v0:= temp;
  #L26d654.  if v0 == 0 then goto L26d668;
  #L26d658.  v0:= 1I;
  #L26d65a.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` := v0 @kind boolean;
  #L26d65e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26d662.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26d668.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26d67c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` @kind boolean;
  #L26d680.  if v0 == 0 then goto L26d690;
  #L26d684.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26d688.  call `onError`(v0, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26d68e.  goto L26d6bc;
  #L26d690.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` @kind object;
  #L26d694.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.index` @type ^`int`;
  #L26d698.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L26d69e.  v0:= temp;
  #L26d6a0.  if v0 == 0 then goto L26d6b6;
  #L26d6a4.  v0:= 1I;
  #L26d6a6.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` := v0 @kind boolean;
  #L26d6aa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26d6ae.  call `onError`(v0, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26d6b4.  goto L26d6bc;
  #L26d6b6.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26d6bc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26d6d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` @kind boolean;
  #L26d6d4.  if v0 == 0 then goto L26d6e4;
  #L26d6d8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26d6dc.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26d6e2.  goto L26d71c;
  #L26d6e4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` @kind object;
  #L26d6e8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.index` @type ^`int`;
  #L26d6ec.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L26d6f2.  v0:= temp;
  #L26d6f4.  if v0 == 0 then goto L26d70a;
  #L26d6f8.  v0:= 1I;
  #L26d6fa.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.won` @type ^`boolean` := v0 @kind boolean;
  #L26d6fe.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L26d702.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26d708.  goto L26d71c;
  #L26d70a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26d710.  v3:= temp @kind object;
  #L26d712.  v3:= (`io.reactivex.disposables.b`) v3 @kind object;
  #L26d716.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26d71c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$AmbInnerObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L26d730.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26d736.  return @kind void;
}
