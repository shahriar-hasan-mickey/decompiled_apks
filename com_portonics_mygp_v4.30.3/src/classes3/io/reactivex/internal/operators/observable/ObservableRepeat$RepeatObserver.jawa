record `io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.remaining` @AccessFlag ;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.sd` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `long` v2 , `io.reactivex.internal.disposables.SequentialDisposable` v4 @kind object, `io.reactivex.r` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.<init>:(Lio/reactivex/t;JLio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27b7f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27b7f6.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27b7fa.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v4 @kind object;
  #L27b7fe.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.source` @type ^`io.reactivex.r` := v5 @kind object;
  #L27b802.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.remaining` @type ^`long` := v2 @kind wide;
  #L27b806.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27b818.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.remaining` @type ^`long` @kind wide;
  #L27b81c.  v2:= 9223372036854775807L;
  #L27b826.  v4:= lcmp(v0, v2);
  #L27b82a.  if v4 == 0 then goto L27b83a;
  #L27b82e.  v2:= 1L;
  #L27b832.  v2:= v0 - v2 @kind long;
  #L27b836.  v5.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.remaining` @type ^`long` := v2 @kind wide;
  #L27b83a.  v2:= 0L;
  #L27b83e.  v4:= lcmp(v0, v2);
  #L27b842.  if v4 == 0 then goto L27b84e;
  #L27b846.  call `subscribeNext`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.subscribeNext:()V` @kind virtual;
  #L27b84c.  goto L27b858;
  #L27b84e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27b852.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27b858.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27b86c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27b870.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27b876.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27b888.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27b88c.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27b892.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27b8a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L27b8a8.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L27b8ae.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$RepeatObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27b8c0.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27b8c6.  v0:= temp;
  #L27b8c8.  if v0 != 0 then goto L27b8f8;
  #L27b8cc.  v0:= 1I;
  #L27b8ce.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.sd` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L27b8d2.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L27b8d8.  v1:= temp;
  #L27b8da.  if v1 == 0 then goto L27b8e0;
  #L27b8de.  return @kind void;
  #L27b8e0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeat$RepeatObserver.source` @type ^`io.reactivex.r` @kind object;
  #L27b8e4.  call `subscribe`(v1, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27b8ea.  v0:= -v0 @kind int;
  #L27b8ec.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27b8f2.  v0:= temp;
  #L27b8f4.  if v0 != 0 then goto L27b8ce;
  #L27b8f8.  return @kind void;
}
