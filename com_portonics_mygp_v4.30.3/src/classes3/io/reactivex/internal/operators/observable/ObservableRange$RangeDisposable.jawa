record `io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.fused` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v0 @kind this, `io.reactivex.t` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.<init>:(Lio/reactivex/t;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27acd0.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L27acd6.  v0.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27acda.  v0.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` := v2 @kind wide;
  #L27acde.  v0.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @type ^`long` := v4 @kind wide;
  #L27ace2.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27acf4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @type ^`long` @kind wide;
  #L27acf8.  v2.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` := v0 @kind wide;
  #L27acfc.  v0:= 1I;
  #L27acfe.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L27ad04.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ad18.  v0:= 1I;
  #L27ad1a.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L27ad20.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ac00.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27ac06.  v0:= temp;
  #L27ac08.  if v0 == 0 then goto L27ac10;
  #L27ac0c.  v0:= 1I;
  #L27ac0e.  goto L27ac12;
  #L27ac10.  v0:= 0I;
  #L27ac12.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27ac24.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` @kind wide;
  #L27ac28.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @type ^`long` @kind wide;
  #L27ac2c.  v4:= lcmp(v0, v2);
  #L27ac30.  if v4 != 0 then goto L27ac38;
  #L27ac34.  v0:= 1I;
  #L27ac36.  goto L27ac3a;
  #L27ac38.  v0:= 0I;
  #L27ac3a.  return v0;
}
procedure `java.lang.Integer` `poll`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.poll:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27ac70.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` @kind wide;
  #L27ac74.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @type ^`long` @kind wide;
  #L27ac78.  v4:= lcmp(v0, v2);
  #L27ac7c.  if v4 == 0 then goto L27ac96;
  #L27ac80.  v2:= 1L;
  #L27ac84.  v2:= v2 + v0 @kind long;
  #L27ac86.  v5.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` := v2 @kind wide;
  #L27ac8a.  v1:= (`int`) v0 @kind l2i;
  #L27ac8c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27ac92.  v0:= temp @kind object;
  #L27ac94.  return v0 @kind object;
  #L27ac96.  v0:= 1I;
  #L27ac98.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L27ac9e.  v0:= 0I;
  #L27aca0.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L27acb4.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.poll:()Ljava/lang/Integer;` @kind virtual;
  #L27acba.  v0:= temp @kind object;
  #L27acbc.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ac4c.  v0:= 1I;
  #L27ac4e.  v2:= v2 ^& v0 @kind int;
  #L27ac50.  if v2 == 0 then goto L27ac5a;
  #L27ac54.  v1.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.fused` @type ^`boolean` := v0 @kind boolean;
  #L27ac58.  return v0;
  #L27ac5a.  v2:= 0I;
  #L27ac5c.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$RangeDisposable;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L27ad34.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.fused` @type ^`boolean` @kind boolean;
  #L27ad38.  if v0 == 0 then goto L27ad3e;
  #L27ad3c.  return @kind void;
  #L27ad3e.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L27ad42.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.end` @type ^`long` @kind wide;
  #L27ad46.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable.index` @type ^`long` @kind wide;
  #L27ad4a.  v5:= lcmp(v3, v1);
  #L27ad4e.  if v5 == 0 then goto L27ad76;
  #L27ad52.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27ad58.  v5:= temp;
  #L27ad5a.  if v5 != 0 then goto L27ad76;
  #L27ad5e.  v5:= (`int`) v3 @kind l2i;
  #L27ad60.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27ad66.  v5:= temp @kind object;
  #L27ad68.  call `onNext`(v0, v5) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27ad6e.  v5:= 1L;
  #L27ad72.  v3:= v3 + v5 @kind long;
  #L27ad74.  goto L27ad4a;
  #L27ad76.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L27ad7c.  v1:= temp;
  #L27ad7e.  if v1 != 0 then goto L27ad90;
  #L27ad82.  v1:= 1I;
  #L27ad84.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L27ad8a.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27ad90.  return @kind void;
}
