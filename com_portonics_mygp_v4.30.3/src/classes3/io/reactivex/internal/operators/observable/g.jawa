record `io.reactivex.internal.operators.observable.g` @kind class @AccessFlag FINAL extends `io.reactivex.observers.b` @kind class {
  `java.util.concurrent.BlockingQueue` `io.reactivex.internal.operators.observable.g.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.g.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.g` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/g;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L26cf84.  call `<init>`(v2) @signature `Lio/reactivex/observers/b;.<init>:()V` @kind direct;
  #L26cf8a.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L26cf8e.  v1:= 1I;
  #L26cf90.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L26cf96.  v2.`io.reactivex.internal.operators.observable.g.c` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L26cf9a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L26cf9e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26cfa4.  v2.`io.reactivex.internal.operators.observable.g.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L26cfa8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.g` v2 @kind this, `io.reactivex.l` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/g;.b:(Lio/reactivex/l;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26cfe8.  v0:= v2.`io.reactivex.internal.operators.observable.g.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L26cfec.  v1:= 0I;
  #L26cfee.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L26cff4.  v0:= temp;
  #L26cff6.  v1:= 1I;
  #L26cff8.  if v0 == v1 then goto L26d008;
  #L26cffc.  call temp:= `h`(v3) @signature `Lio/reactivex/l;.h:()Z` @kind virtual;
  #L26d002.  v0:= temp;
  #L26d004.  if v0 != 0 then goto L26d03c;
  #L26d008.  v0:= v2.`io.reactivex.internal.operators.observable.g.c` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L26d00c.  call temp:= `offer`(v0, v3) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L26d012.  v0:= temp;
  #L26d014.  if v0 != 0 then goto L26d03c;
  #L26d018.  v0:= v2.`io.reactivex.internal.operators.observable.g.c` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L26d01c.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L26d022.  v0:= temp @kind object;
  #L26d024.  v0:= (`io.reactivex.l`) v0 @kind object;
  #L26d028.  if v0 == 0 then goto L26d008;
  #L26d02c.  call temp:= `h`(v0) @signature `Lio/reactivex/l;.h:()Z` @kind virtual;
  #L26d032.  v1:= temp;
  #L26d034.  if v1 != 0 then goto L26d008;
  #L26d038.  v3:= v0 @kind object;
  #L26d03a.  goto L26d008;
  #L26d03c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.g` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/g;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26d06c.  v0:= v2.`io.reactivex.internal.operators.observable.g.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L26d070.  v1:= 1I;
  #L26d072.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L26d078.  return @kind void;
}
procedure `io.reactivex.l` `d`(`io.reactivex.internal.operators.observable.g` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/g;.d:()Lio/reactivex/l;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26cf54.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/g;.c:()V` @kind virtual;
  #L26cf5a.  call `b`() @signature `Lio/reactivex/internal/util/c;.b:()V` @kind static;
  #L26cf60.  v0:= v1.`io.reactivex.internal.operators.observable.g.c` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L26cf64.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L26cf6a.  v0:= temp @kind object;
  #L26cf6c.  v0:= (`io.reactivex.l`) v0 @kind object;
  #L26cf70.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.g` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/g;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L26cfbc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.g` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/g;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L26cfd0.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26cfd6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/g;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L26d050.  v1:= (`io.reactivex.l`) v1 @kind object;
  #L26d054.  call `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/g;.b:(Lio/reactivex/l;)V` @kind virtual;
  #L26d05a.  return @kind void;
}
