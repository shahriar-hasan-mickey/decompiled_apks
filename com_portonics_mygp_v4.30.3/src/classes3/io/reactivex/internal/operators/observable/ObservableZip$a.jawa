record `io.reactivex.internal.operators.observable.ObservableZip$a` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` `io.reactivex.internal.operators.observable.ObservableZip$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.observable.ObservableZip$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip$a.d` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableZip$a.e` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableZip$a.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZip$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2857a0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2857a6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2857aa.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2857b0.  v1.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L2857b4.  v1.`io.reactivex.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` := v2 @kind object;
  #L2857b8.  v2:= new `io.reactivex.internal.queue.a`;
  #L2857bc.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L2857c2.  v1.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.queue.a` := v2 @kind object;
  #L2857c6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableZip$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2857d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2857dc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2857e2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableZip$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2857f4.  v0:= 1I;
  #L2857f6.  v1.`io.reactivex.internal.operators.observable.ObservableZip$a.d` @type ^`boolean` := v0 @kind boolean;
  #L2857fa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` @kind object;
  #L2857fe.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L285804.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableZip$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L285818.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.e` @type ^`java.lang.Throwable` := v1 @kind object;
  #L28581c.  v1:= 1I;
  #L28581e.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.d` @type ^`boolean` := v1 @kind boolean;
  #L285822.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` @kind object;
  #L285826.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L28582c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableZip$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285840.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L285844.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L28584a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator` @kind object;
  #L28584e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L285854.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableZip$a` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285868.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28586c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L285872.  return @kind void;
}
