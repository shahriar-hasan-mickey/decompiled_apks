record `io.reactivex.internal.operators.observable.ObservableWindowBoundary` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableWindowBoundary.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundary.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary` v0 @kind this, `io.reactivex.r` v1 @kind object, `io.reactivex.r` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary;.<init>:(Lio/reactivex/r;Lio/reactivex/r;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L283df0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/r;)V` @kind direct;
  #L283df6.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary.c` @type ^`io.reactivex.r` := v2 @kind object;
  #L283dfa.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary.d` @type ^`int` := v3;
  #L283dfe.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary` v2 @kind this, `io.reactivex.t` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L283e10.  v0:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver`;
  #L283e14.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary.d` @type ^`int`;
  #L283e18.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$WindowBoundaryMainObserver;.<init>:(Lio/reactivex/t;I)V` @kind direct;
  #L283e1e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L283e24.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary.c` @type ^`io.reactivex.r` @kind object;
  #L283e28.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver.boundaryObserver` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L283e2c.  call `subscribe`(v3, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L283e32.  v3:= v2.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L283e36.  call `subscribe`(v3, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L283e3c.  return @kind void;
}
