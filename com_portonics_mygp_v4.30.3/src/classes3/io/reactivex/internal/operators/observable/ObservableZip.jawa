record `io.reactivex.internal.operators.observable.ObservableZip` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.n` @kind class {
  `io.reactivex.r`[] `io.reactivex.internal.operators.observable.ObservableZip.b` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.observable.ObservableZip.c` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableZip.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableZip.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZip` v0 @kind this, `io.reactivex.r`[] v1 @kind object, `java.lang.Iterable` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip;.<init>:([Lio/reactivex/r;Ljava/lang/Iterable;Lio/reactivex/d0/k;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L285b28.  call `<init>`(v0) @signature `Lio/reactivex/n;.<init>:()V` @kind direct;
  #L285b2e.  v0.`io.reactivex.internal.operators.observable.ObservableZip.b` @type ^`io.reactivex.r`[] := v1 @kind object;
  #L285b32.  v0.`io.reactivex.internal.operators.observable.ObservableZip.c` @type ^`java.lang.Iterable` := v2 @kind object;
  #L285b36.  v0.`io.reactivex.internal.operators.observable.ObservableZip.d` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L285b3a.  v0.`io.reactivex.internal.operators.observable.ObservableZip.e` @type ^`int` := v4;
  #L285b3e.  v0.`io.reactivex.internal.operators.observable.ObservableZip.f` @type ^`boolean` := v5 @kind boolean;
  #L285b42.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableZip` v6 @kind this, `io.reactivex.t` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L285b54.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableZip.b` @type ^`io.reactivex.r`[] @kind object;
  #L285b58.  if v0 != 0 then goto L285bb0;
  #L285b5c.  v0:= 8I;
  #L285b60.  v0:= new `io.reactivex.n`[v0];
  #L285b64.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip.c` @type ^`java.lang.Iterable` @kind object;
  #L285b68.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L285b6e.  v1:= temp @kind object;
  #L285b70.  v2:= 0I;
  #L285b72.  v3:= 0I;
  #L285b74.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L285b7a.  v4:= temp;
  #L285b7c.  if v4 == 0 then goto L285bb2;
  #L285b80.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L285b86.  v4:= temp @kind object;
  #L285b88.  v4:= (`io.reactivex.r`) v4 @kind object;
  #L285b8c.  v5:= length @variable v0;
  #L285b8e.  if v3 != v5 then goto L285ba4;
  #L285b92.  v5:= v3 ^> 2;
  #L285b96.  v5:= v5 + v3 @kind int;
  #L285b98.  v5:= new `io.reactivex.r`[v5];
  #L285b9c.  call `arraycopy`(v0, v2, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L285ba2.  v0:= v5 @kind object;
  #L285ba4.  v5:= v3 + 1;
  #L285ba8.  v0[v3]:= v4 @kind object;
  #L285bac.  v3:= v5;
  #L285bae.  goto L285b74;
  #L285bb0.  v3:= length @variable v0;
  #L285bb2.  if v3 != 0 then goto L285bbe;
  #L285bb6.  call `complete`(v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/t;)V` @kind static;
  #L285bbc.  return @kind void;
  #L285bbe.  v1:= new `io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator`;
  #L285bc2.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableZip.d` @type ^`io.reactivex.d0.k` @kind object;
  #L285bc6.  v4:= v6.`io.reactivex.internal.operators.observable.ObservableZip.f` @type ^`boolean` @kind boolean;
  #L285bca.  call `<init>`(v1, v7, v2, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;IZ)V` @kind direct;
  #L285bd0.  v7:= v6.`io.reactivex.internal.operators.observable.ObservableZip.e` @type ^`int`;
  #L285bd4.  call `subscribe`(v1, v0, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$ZipCoordinator;.subscribe:([Lio/reactivex/r;I)V` @kind virtual;
  #L285bda.  return @kind void;
}
