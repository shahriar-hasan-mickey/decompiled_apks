record `io.reactivex.internal.operators.observable.l4` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `long` `io.reactivex.internal.operators.observable.l4.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.l4` v0 @kind this, `io.reactivex.r` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/l4;.<init>:(Lio/reactivex/r;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L280d08.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/r;)V` @kind direct;
  #L280d0e.  v0.`io.reactivex.internal.operators.observable.l4.c` @type ^`long` := v2 @kind wide;
  #L280d12.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.l4` v4 @kind this, `io.reactivex.t` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/l4;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L280d24.  v0:= v4.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L280d28.  v1:= new `io.reactivex.internal.operators.observable.k4`;
  #L280d2c.  v2:= v4.`io.reactivex.internal.operators.observable.l4.c` @type ^`long` @kind wide;
  #L280d30.  call `<init>`(v1, v5, v2) @signature `Lio/reactivex/internal/operators/observable/k4;.<init>:(Lio/reactivex/t;J)V` @kind direct;
  #L280d36.  call `subscribe`(v0, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L280d3c.  return @kind void;
}
