record `io.reactivex.internal.operators.observable.ObservableFlatMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableFlatMap.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMap.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableFlatMap.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableFlatMap.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMap` v0 @kind this, `io.reactivex.r` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 , `int` v4 , `int` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap;.<init>:(Lio/reactivex/r;Lio/reactivex/d0/k;ZII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L276080.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/r;)V` @kind direct;
  #L276086.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap.c` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L27608a.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap.d` @type ^`boolean` := v3 @kind boolean;
  #L27608e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap.e` @type ^`int` := v4;
  #L276092.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap.f` @type ^`int` := v5;
  #L276096.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableFlatMap` v8 @kind this, `io.reactivex.t` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2760a8.  v0:= v8.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L2760ac.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMap.c` @type ^`io.reactivex.d0.k` @kind object;
  #L2760b0.  call temp:= `b`(v0, v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.b:(Lio/reactivex/r;Lio/reactivex/t;Lio/reactivex/d0/k;)Z` @kind static;
  #L2760b6.  v0:= temp;
  #L2760b8.  if v0 == 0 then goto L2760be;
  #L2760bc.  return @kind void;
  #L2760be.  v0:= v8.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L2760c2.  v7:= new `io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver`;
  #L2760c6.  v3:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMap.c` @type ^`io.reactivex.d0.k` @kind object;
  #L2760ca.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMap.d` @type ^`boolean` @kind boolean;
  #L2760ce.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMap.e` @type ^`int`;
  #L2760d2.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMap.f` @type ^`int`;
  #L2760d6.  v1:= v7 @kind object;
  #L2760d8.  v2:= v9 @kind object;
  #L2760da.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;ZII)V` @kind direct;
  #L2760e0.  call `subscribe`(v0, v7) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L2760e6.  return @kind void;
}
