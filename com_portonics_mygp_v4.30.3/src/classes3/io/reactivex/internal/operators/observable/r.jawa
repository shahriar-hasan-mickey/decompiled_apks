record `io.reactivex.internal.operators.observable.r` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.r.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.r.c` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.r.d` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.observable.r.e` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.r.f` @AccessFlag ;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.r.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.r` v0 @kind this, `io.reactivex.t` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/r;.<init>:(Lio/reactivex/t;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26dd9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26dda2.  v0.`io.reactivex.internal.operators.observable.r.b` @type ^`io.reactivex.t` := v1 @kind object;
  #L26dda6.  v0.`io.reactivex.internal.operators.observable.r.c` @type ^`int` := v2;
  #L26ddaa.  v0.`io.reactivex.internal.operators.observable.r.d` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L26ddae.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.r` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/r;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26dd04.  v0:= v2.`io.reactivex.internal.operators.observable.r.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L26dd08.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L26dd0e.  v0:= temp @kind object;
  #L26dd10.  v1:= "Empty buffer supplied" @kind object;
  #L26dd14.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26dd1a.  v0:= temp @kind object;
  #L26dd1c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L26dd20.  v2.`io.reactivex.internal.operators.observable.r.e` @type ^`java.util.Collection` := v0 @kind object;
  #L26dd24.  v0:= 1I;
  #L26dd26.  return v0;
  #L26dd28.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26dd2a.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26dd30.  v1:= 0I;
  #L26dd32.  v2.`io.reactivex.internal.operators.observable.r.e` @type ^`java.util.Collection` := v1 @kind object;
  #L26dd36.  v1:= v2.`io.reactivex.internal.operators.observable.r.g` @type ^`io.reactivex.disposables.b` @kind object;
  #L26dd3a.  if v1 != 0 then goto L26dd4a;
  #L26dd3e.  v1:= v2.`io.reactivex.internal.operators.observable.r.b` @type ^`io.reactivex.t` @kind object;
  #L26dd42.  call `error`(v0, v1) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/t;)V` @kind static;
  #L26dd48.  goto L26dd5a;
  #L26dd4a.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26dd50.  v1:= v2.`io.reactivex.internal.operators.observable.r.b` @type ^`io.reactivex.t` @kind object;
  #L26dd54.  call `onError`(v1, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26dd5a.  v0:= 0I;
  #L26dd5c.  return v0;
  catch `java.lang.Throwable` @[L26dd04..L26dd20] goto L26dd28;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.r` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/r;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26ddc0.  v0:= v1.`io.reactivex.internal.operators.observable.r.g` @type ^`io.reactivex.disposables.b` @kind object;
  #L26ddc4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26ddca.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.r` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/r;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26dd7c.  v0:= v1.`io.reactivex.internal.operators.observable.r.g` @type ^`io.reactivex.disposables.b` @kind object;
  #L26dd80.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L26dd86.  v0:= temp;
  #L26dd88.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.r` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/r;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26dddc.  v0:= v2.`io.reactivex.internal.operators.observable.r.e` @type ^`java.util.Collection` @kind object;
  #L26dde0.  if v0 == 0 then goto L26de0a;
  #L26dde4.  v1:= 0I;
  #L26dde6.  v2.`io.reactivex.internal.operators.observable.r.e` @type ^`java.util.Collection` := v1 @kind object;
  #L26ddea.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L26ddf0.  v1:= temp;
  #L26ddf2.  if v1 != 0 then goto L26de00;
  #L26ddf6.  v1:= v2.`io.reactivex.internal.operators.observable.r.b` @type ^`io.reactivex.t` @kind object;
  #L26ddfa.  call `onNext`(v1, v0) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26de00.  v0:= v2.`io.reactivex.internal.operators.observable.r.b` @type ^`io.reactivex.t` @kind object;
  #L26de04.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L26de0a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.r` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/r;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26de1c.  v0:= 0I;
  #L26de1e.  v1.`io.reactivex.internal.operators.observable.r.e` @type ^`java.util.Collection` := v0 @kind object;
  #L26de22.  v0:= v1.`io.reactivex.internal.operators.observable.r.b` @type ^`io.reactivex.t` @kind object;
  #L26de26.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26de2c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.r` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/r;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26de40.  v0:= v2.`io.reactivex.internal.operators.observable.r.e` @type ^`java.util.Collection` @kind object;
  #L26de44.  if v0 == 0 then goto L26de78;
  #L26de48.  call temp:= `add`(v0, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L26de4e.  v3:= v2.`io.reactivex.internal.operators.observable.r.f` @type ^`int`;
  #L26de52.  v3:= v3 + 1;
  #L26de56.  v2.`io.reactivex.internal.operators.observable.r.f` @type ^`int` := v3;
  #L26de5a.  v1:= v2.`io.reactivex.internal.operators.observable.r.c` @type ^`int`;
  #L26de5e.  if v3 < v1 then goto L26de78;
  #L26de62.  v3:= v2.`io.reactivex.internal.operators.observable.r.b` @type ^`io.reactivex.t` @kind object;
  #L26de66.  call `onNext`(v3, v0) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26de6c.  v3:= 0I;
  #L26de6e.  v2.`io.reactivex.internal.operators.observable.r.f` @type ^`int` := v3;
  #L26de72.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/operators/observable/r;.a:()Z` @kind virtual;
  #L26de78.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.r` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/r;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26de8c.  v0:= v1.`io.reactivex.internal.operators.observable.r.g` @type ^`io.reactivex.disposables.b` @kind object;
  #L26de90.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26de96.  v0:= temp;
  #L26de98.  if v0 == 0 then goto L26deaa;
  #L26de9c.  v1.`io.reactivex.internal.operators.observable.r.g` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L26dea0.  v2:= v1.`io.reactivex.internal.operators.observable.r.b` @type ^`io.reactivex.t` @kind object;
  #L26dea4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26deaa.  return @kind void;
}
