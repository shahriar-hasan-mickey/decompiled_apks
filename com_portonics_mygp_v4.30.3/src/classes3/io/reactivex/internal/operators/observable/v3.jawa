record `io.reactivex.internal.operators.observable.v3` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` `io.reactivex.internal.operators.observable.v3.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.observable.v3.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.v3.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.v3.e` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.v3.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.v3` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/v3;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27e62c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27e632.  v0.`io.reactivex.internal.operators.observable.v3.b` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` := v1 @kind object;
  #L27e636.  v0.`io.reactivex.internal.operators.observable.v3.d` @type ^`int` := v2;
  #L27e63a.  v1:= new `io.reactivex.internal.queue.a`;
  #L27e63e.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L27e644.  v0.`io.reactivex.internal.operators.observable.v3.c` @type ^`io.reactivex.internal.queue.a` := v1 @kind object;
  #L27e648.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.v3` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/v3;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27e65c.  v0:= 1I;
  #L27e65e.  v1.`io.reactivex.internal.operators.observable.v3.e` @type ^`boolean` := v0 @kind boolean;
  #L27e662.  v0:= v1.`io.reactivex.internal.operators.observable.v3.b` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` @kind object;
  #L27e666.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.drain:()V` @kind virtual;
  #L27e66c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.v3` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/v3;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L27e680.  v0.`io.reactivex.internal.operators.observable.v3.f` @type ^`java.lang.Throwable` := v1 @kind object;
  #L27e684.  v1:= 1I;
  #L27e686.  v0.`io.reactivex.internal.operators.observable.v3.e` @type ^`boolean` := v1 @kind boolean;
  #L27e68a.  v1:= v0.`io.reactivex.internal.operators.observable.v3.b` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` @kind object;
  #L27e68e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.drain:()V` @kind virtual;
  #L27e694.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.v3` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/v3;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27e6a8.  v0:= v1.`io.reactivex.internal.operators.observable.v3.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27e6ac.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L27e6b2.  v2:= v1.`io.reactivex.internal.operators.observable.v3.b` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` @kind object;
  #L27e6b6.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.drain:()V` @kind virtual;
  #L27e6bc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.v3` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/v3;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27e6d0.  v0:= v2.`io.reactivex.internal.operators.observable.v3.b` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator` @kind object;
  #L27e6d4.  v1:= v2.`io.reactivex.internal.operators.observable.v3.d` @type ^`int`;
  #L27e6d8.  call temp:= `setDisposable`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$EqualCoordinator;.setDisposable:(Lio/reactivex/disposables/b;I)Z` @kind virtual;
  #L27e6de.  return @kind void;
}
