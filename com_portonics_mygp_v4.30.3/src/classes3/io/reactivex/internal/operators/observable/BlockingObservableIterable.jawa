record `io.reactivex.internal.operators.observable.BlockingObservableIterable` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Iterable` @kind interface {
  `io.reactivex.r` `io.reactivex.internal.operators.observable.BlockingObservableIterable.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.BlockingObservableIterable.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableIterable` v0 @kind this, `io.reactivex.r` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable;.<init>:(Lio/reactivex/r;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L26c970.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26c976.  v0.`io.reactivex.internal.operators.observable.BlockingObservableIterable.b` @type ^`io.reactivex.r` := v1 @kind object;
  #L26c97a.  v0.`io.reactivex.internal.operators.observable.BlockingObservableIterable.c` @type ^`int` := v2;
  #L26c97e.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`io.reactivex.internal.operators.observable.BlockingObservableIterable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26c944.  v0:= new `io.reactivex.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator`;
  #L26c948.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable.c` @type ^`int`;
  #L26c94c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$BlockingObservableIterator;.<init>:(I)V` @kind direct;
  #L26c952.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable.b` @type ^`io.reactivex.r` @kind object;
  #L26c956.  call `subscribe`(v1, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L26c95c.  return v0 @kind object;
}
