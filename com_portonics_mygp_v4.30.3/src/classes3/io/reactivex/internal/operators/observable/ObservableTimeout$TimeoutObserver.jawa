record `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `io.reactivex.internal.operators.observable.ObservableTimeout$a` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.itemTimeoutIndicator` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L281804.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L28180a.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L28180e.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.itemTimeoutIndicator` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L281812.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L281816.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L28181c.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L281820.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L281824.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28182a.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L28182e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281840.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281844.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28184a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28184e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L281854.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2817d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2817dc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2817e2.  v0:= temp @kind object;
  #L2817e4.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2817e8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2817ee.  v0:= temp;
  #L2817f0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L281868.  v0:= 9223372036854775807L;
  #L281872.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L281878.  v2:= temp @kind wide;
  #L28187a.  v4:= lcmp(v2, v0);
  #L28187e.  if v4 == 0 then goto L281896;
  #L281882.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281886.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L28188c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281890.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L281896.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2818a8.  v0:= 9223372036854775807L;
  #L2818b2.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L2818b8.  v2:= temp @kind wide;
  #L2818ba.  v4:= lcmp(v2, v0);
  #L2818be.  if v4 == 0 then goto L2818d8;
  #L2818c2.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L2818c6.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L2818cc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2818d0.  call `onError`(v0, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2818d6.  goto L2818de;
  #L2818d8.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2818de.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2818f0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2818f6.  v0:= temp @kind wide;
  #L2818f8.  v2:= 9223372036854775807L;
  #L281902.  v4:= lcmp(v0, v2);
  #L281906.  if v4 == 0 then goto L2819ae;
  #L28190a.  v4:= 1L;
  #L28190e.  v4:= v4 + v0 @kind long;
  #L281910.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L281916.  v0:= temp;
  #L281918.  if v0 != 0 then goto L28191e;
  #L28191c.  goto L2819ae;
  #L28191e.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281922.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L281928.  v0:= temp @kind object;
  #L28192a.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L28192e.  if v0 == 0 then goto L281938;
  #L281932.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281938.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L28193c.  call `onNext`(v0, v7) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L281942.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.itemTimeoutIndicator` @type ^`io.reactivex.d0.k` @kind object;
  #L281946.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L28194c.  v7:= temp @kind object;
  #L28194e.  v0:= "The itemTimeoutIndicator returned a null ObservableSource." @kind object;
  #L281952.  call temp:= `e`(v7, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L281958.  v7:= temp @kind object;
  #L28195a.  v7:= (`io.reactivex.r`) v7 @kind object;
  #L28195e.  v0:= new `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer`;
  #L281962.  call `<init>`(v0, v4, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeout$a;)V` @kind direct;
  #L281968.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28196c.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L281972.  v1:= temp;
  #L281974.  if v1 == 0 then goto L28197e;
  #L281978.  call `subscribe`(v7, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L28197e.  return @kind void;
  #L281980.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L281982.  call `b`(v7) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L281988.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28198c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L281992.  v0:= temp @kind object;
  #L281994.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L281998.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28199e.  call temp:= `getAndSet`(v6, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L2819a4.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2819a8.  call `onError`(v0, v7) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2819ae.  return @kind void;
  catch `java.lang.Throwable` @[L281942..L28195e] goto L281980;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2819cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2819d0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2819d6.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2819e8.  v0:= 9223372036854775807L;
  #L2819f2.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L2819f8.  v3:= temp;
  #L2819fa.  if v3 == 0 then goto L281a1c;
  #L2819fe.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281a02.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L281a08.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281a0c.  v4:= new `java.util.concurrent.TimeoutException`;
  #L281a10.  call `<init>`(v4) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L281a16.  call `onError`(v3, v4) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L281a1c.  return @kind void;
}
procedure `void` `onTimeoutError`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v2 @kind this, `long` v3 , `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.onTimeoutError:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L281a30.  v0:= 9223372036854775807L;
  #L281a3a.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L281a40.  v3:= temp;
  #L281a42.  if v3 == 0 then goto L281a5c;
  #L281a46.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281a4a.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L281a50.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281a54.  call `onError`(v3, v5) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L281a5a.  goto L281a62;
  #L281a5c.  call `t`(v5) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L281a62.  return @kind void;
}
procedure `void` `startFirstTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver` v3 @kind this, `io.reactivex.r` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutObserver;.startFirstTimeout:(Lio/reactivex/r;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L281a74.  if v4 == 0 then goto L281a9c;
  #L281a78.  v0:= new `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer`;
  #L281a7c.  v1:= 0L;
  #L281a80.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeout$a;)V` @kind direct;
  #L281a86.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281a8a.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L281a90.  v1:= temp;
  #L281a92.  if v1 == 0 then goto L281a9c;
  #L281a96.  call `subscribe`(v4, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L281a9c.  return @kind void;
}
