record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` @kind class {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.done` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.r` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.<init>:(Lio/reactivex/t;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27d810.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/r;)V` @kind direct;
  #L27d816.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L27d81a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27d820.  v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L27d824.  return @kind void;
}
procedure `void` `completeMain`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.completeMain:()V` @AccessFlag  {
    temp;
    v0;

  #L27d838.  v0:= 1I;
  #L27d83a.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.done` @type ^`boolean` := v0 @kind boolean;
  #L27d83e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27d842.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27d848.  v0:= temp;
  #L27d84a.  if v0 != 0 then goto L27d85e;
  #L27d84e.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.emit:()V` @kind virtual;
  #L27d854.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d858.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27d85e.  return @kind void;
}
procedure `void` `completeOther`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.completeOther:()V` @AccessFlag  {
    temp;
    v0;

  #L27d870.  v0:= 1I;
  #L27d872.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.done` @type ^`boolean` := v0 @kind boolean;
  #L27d876.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27d87a.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27d880.  v0:= temp;
  #L27d882.  if v0 != 0 then goto L27d896;
  #L27d886.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.emit:()V` @kind virtual;
  #L27d88c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d890.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27d896.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainEmitLast;.run:()V` @AccessFlag  {
    temp;
    v0;

  #L27d8a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27d8ac.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27d8b2.  v0:= temp;
  #L27d8b4.  if v0 != 0 then goto L27d8e2;
  #L27d8b8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.done` @type ^`boolean` @kind boolean;
  #L27d8bc.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.emit:()V` @kind virtual;
  #L27d8c2.  if v0 == 0 then goto L27d8d2;
  #L27d8c6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d8ca.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27d8d0.  return @kind void;
  #L27d8d2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27d8d6.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L27d8dc.  v0:= temp;
  #L27d8de.  if v0 != 0 then goto L27d8b8;
  #L27d8e2.  return @kind void;
}
