record `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.b` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2791e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2791ee.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` := v1 @kind object;
  #L2791f2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver$OtherObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279204.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` @kind object;
  #L279208.  call `otherComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;.otherComplete:()V` @kind virtual;
  #L27920e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver$OtherObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279220.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver` @kind object;
  #L279224.  call `otherError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver;.otherError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L27922a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$MergeWithObserver$OtherObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L27923c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L279242.  return @kind void;
}
