record `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.error` @AccessFlag ;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.scheduler` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.time` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.unit` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.x` v5 @kind object, `int` v6 , `boolean` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.<init>:(Lio/reactivex/t;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27f03c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27f042.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27f046.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.time` @type ^`long` := v2 @kind wide;
  #L27f04a.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L27f04e.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.scheduler` @type ^`io.reactivex.x` := v5 @kind object;
  #L27f052.  v1:= new `io.reactivex.internal.queue.a`;
  #L27f056.  call `<init>`(v1, v6) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L27f05c.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.a` := v1 @kind object;
  #L27f060.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.delayError` @type ^`boolean` := v7 @kind boolean;
  #L27f064.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f078.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L27f07c.  if v0 != 0 then goto L27f0a6;
  #L27f080.  v0:= 1I;
  #L27f082.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L27f086.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27f08a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27f090.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27f096.  v0:= temp;
  #L27f098.  if v0 != 0 then goto L27f0a6;
  #L27f09c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27f0a0.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27f0a6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v17 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L27f0b8.  v0:= v17 @kind object;
  #L27f0bc.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27f0c2.  v1:= temp;
  #L27f0c4.  if v1 == 0 then goto L27f0ca;
  #L27f0c8.  return @kind void;
  #L27f0ca.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27f0ce.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27f0d2.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.delayError` @type ^`boolean` @kind boolean;
  #L27f0d6.  v4:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27f0da.  v5:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L27f0de.  v6:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.time` @type ^`long` @kind wide;
  #L27f0e2.  v8:= 1I;
  #L27f0e4.  v9:= 1I;
  #L27f0e6.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L27f0ea.  if v10 == 0 then goto L27f0fa;
  #L27f0ee.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27f0f2.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27f0f8.  return @kind void;
  #L27f0fa.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.done` @type ^`boolean` @kind boolean;
  #L27f0fe.  call temp:= `peek`(v2) @signature `Lio/reactivex/internal/queue/a;.peek:()Ljava/lang/Object;` @kind virtual;
  #L27f104.  v11:= temp @kind object;
  #L27f106.  v11:= (`java.lang.Long`) v11 @kind object;
  #L27f10a.  if v11 != 0 then goto L27f112;
  #L27f10e.  v12:= 1I;
  #L27f110.  goto L27f114;
  #L27f112.  v12:= 0I;
  #L27f114.  call temp:= `b`(v5, v4) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L27f11a.  v13:= temp @kind wide;
  #L27f11c.  if v12 != 0 then goto L27f134;
  #L27f120.  call temp:= `longValue`(v11) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L27f126.  v15:= temp @kind wide;
  #L27f128.  v13:= v13 - v6 @kind long;
  #L27f12a.  v11:= lcmp(v15, v13);
  #L27f12e.  if v11 <= 0 then goto L27f134;
  #L27f132.  v12:= 1I;
  #L27f134.  if v10 == 0 then goto L27f17e;
  #L27f138.  if v3 == 0 then goto L27f158;
  #L27f13c.  if v12 == 0 then goto L27f17e;
  #L27f140.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L27f144.  if v2 == 0 then goto L27f150;
  #L27f148.  call `onError`(v1, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27f14e.  goto L27f156;
  #L27f150.  call `onComplete`(v1) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27f156.  return @kind void;
  #L27f158.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L27f15c.  if v10 == 0 then goto L27f172;
  #L27f160.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27f164.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L27f16a.  call `onError`(v1, v10) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27f170.  return @kind void;
  #L27f172.  if v12 == 0 then goto L27f17e;
  #L27f176.  call `onComplete`(v1) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27f17c.  return @kind void;
  #L27f17e.  if v12 == 0 then goto L27f192;
  #L27f182.  v9:= -v9 @kind int;
  #L27f184.  call temp:= `addAndGet`(v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27f18a.  v9:= temp;
  #L27f18c.  if v9 != 0 then goto L27f0e6;
  #L27f190.  return @kind void;
  #L27f192.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L27f198.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L27f19e.  v10:= temp @kind object;
  #L27f1a0.  call `onNext`(v1, v10) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27f1a6.  goto L27f0e6;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f024.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.cancelled` @type ^`boolean` @kind boolean;
  #L27f028.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f1b8.  v0:= 1I;
  #L27f1ba.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L27f1be.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.drain:()V` @kind virtual;
  #L27f1c4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L27f1d8.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L27f1dc.  v1:= 1I;
  #L27f1de.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L27f1e2.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.drain:()V` @kind virtual;
  #L27f1e8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27f1fc.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27f200.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L27f204.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27f208.  call temp:= `b`(v1, v2) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L27f20e.  v1:= temp @kind wide;
  #L27f210.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L27f216.  v1:= temp @kind object;
  #L27f218.  call temp:= `l`(v0, v1, v4) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27f21e.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.drain:()V` @kind virtual;
  #L27f224.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$SkipLastTimedObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f238.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27f23c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27f242.  v0:= temp;
  #L27f244.  if v0 == 0 then goto L27f256;
  #L27f248.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L27f24c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27f250.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27f256.  return @kind void;
}
