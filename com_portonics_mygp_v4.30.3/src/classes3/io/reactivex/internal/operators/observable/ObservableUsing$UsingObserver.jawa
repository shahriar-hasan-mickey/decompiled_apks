record `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.d0.g` `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.disposer` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.eager` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.resource` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.d0.g` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.<init>:(Lio/reactivex/t;Ljava/lang/Object;Lio/reactivex/d0/g;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2827c4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L2827ca.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L2827ce.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.resource` @type ^`java.lang.Object` := v2 @kind object;
  #L2827d2.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` := v3 @kind object;
  #L2827d6.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.eager` @type ^`boolean` := v4 @kind boolean;
  #L2827da.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2827ec.  call `disposeAfter`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.disposeAfter:()V` @kind virtual;
  #L2827f2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2827f6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2827fc.  return @kind void;
}
procedure `void` `disposeAfter`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.disposeAfter:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L282810.  v0:= 0I;
  #L282812.  v1:= 1I;
  #L282814.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L28281a.  v0:= temp;
  #L28281c.  if v0 == 0 then goto L28283e;
  #L282820.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L282824.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.resource` @type ^`java.lang.Object` @kind object;
  #L282828.  call `accept`(v0, v1) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28282e.  goto L28283e;
  #L282830.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L282832.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L282838.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28283e.  return @kind void;
  catch `java.lang.Throwable` @[L282820..L28282e] goto L282830;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2827a8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L2827ae.  v0:= temp;
  #L2827b0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28285c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L282860.  if v0 == 0 then goto L2828ae;
  #L282864.  v0:= 0I;
  #L282866.  v1:= 1I;
  #L282868.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L28286e.  v0:= temp;
  #L282870.  if v0 == 0 then goto L282898;
  #L282874.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L282878.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.resource` @type ^`java.lang.Object` @kind object;
  #L28287c.  call `accept`(v0, v1) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L282882.  goto L282898;
  #L282884.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L282886.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28288c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282890.  call `onError`(v1, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L282896.  return @kind void;
  #L282898.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L28289c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2828a2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2828a6.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2828ac.  goto L2828c8;
  #L2828ae.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2828b2.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2828b8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2828bc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2828c2.  call `disposeAfter`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.disposeAfter:()V` @kind virtual;
  #L2828c8.  return @kind void;
  catch `java.lang.Throwable` @[L282874..L282882] goto L282884;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2828e8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L2828ec.  if v0 == 0 then goto L282948;
  #L2828f0.  v0:= 0I;
  #L2828f2.  v1:= 1I;
  #L2828f4.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L2828fa.  v2:= temp;
  #L2828fc.  if v2 == 0 then goto L282932;
  #L282900.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L282904.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.resource` @type ^`java.lang.Object` @kind object;
  #L282908.  call `accept`(v2, v3) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28290e.  goto L282932;
  #L282910.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L282912.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L282918.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L28291c.  v4:= 2I;
  #L28291e.  v4:= new `java.lang.Throwable`[v4];
  #L282922.  v4[v0]:= v6 @kind object;
  #L282926.  v4[v1]:= v2 @kind object;
  #L28292a.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L282930.  v6:= v3 @kind object;
  #L282932.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L282936.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28293c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282940.  call `onError`(v0, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L282946.  goto L282962;
  #L282948.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L28294c.  call `onError`(v0, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L282952.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L282956.  call `dispose`(v6) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28295c.  call `disposeAfter`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.disposeAfter:()V` @kind virtual;
  #L282962.  return @kind void;
  catch `java.lang.Throwable` @[L282900..L28290e] goto L282910;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282980.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282984.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L28298a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$UsingObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28299c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2829a0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2829a6.  v0:= temp;
  #L2829a8.  if v0 == 0 then goto L2829ba;
  #L2829ac.  v1.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L2829b0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$UsingObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2829b4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2829ba.  return @kind void;
}
