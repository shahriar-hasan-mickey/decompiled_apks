record `io.reactivex.internal.operators.observable.i4` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.i4.b` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.i4.c` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.i4.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.i4.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.i4` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.r` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/i4;.<init>:(Lio/reactivex/t;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27f8a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27f8a6.  v0.`io.reactivex.internal.operators.observable.i4.b` @type ^`io.reactivex.t` := v1 @kind object;
  #L27f8aa.  v0.`io.reactivex.internal.operators.observable.i4.c` @type ^`io.reactivex.r` := v2 @kind object;
  #L27f8ae.  v1:= 1I;
  #L27f8b0.  v0.`io.reactivex.internal.operators.observable.i4.e` @type ^`boolean` := v1 @kind boolean;
  #L27f8b4.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L27f8b8.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L27f8be.  v0.`io.reactivex.internal.operators.observable.i4.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L27f8c2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.i4` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/i4;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f8d4.  v0:= v1.`io.reactivex.internal.operators.observable.i4.e` @type ^`boolean` @kind boolean;
  #L27f8d8.  if v0 == 0 then goto L27f8ee;
  #L27f8dc.  v0:= 0I;
  #L27f8de.  v1.`io.reactivex.internal.operators.observable.i4.e` @type ^`boolean` := v0 @kind boolean;
  #L27f8e2.  v0:= v1.`io.reactivex.internal.operators.observable.i4.c` @type ^`io.reactivex.r` @kind object;
  #L27f8e6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27f8ec.  goto L27f8f8;
  #L27f8ee.  v0:= v1.`io.reactivex.internal.operators.observable.i4.b` @type ^`io.reactivex.t` @kind object;
  #L27f8f2.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27f8f8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.i4` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/i4;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f90c.  v0:= v1.`io.reactivex.internal.operators.observable.i4.b` @type ^`io.reactivex.t` @kind object;
  #L27f910.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27f916.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.i4` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/i4;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f928.  v0:= v1.`io.reactivex.internal.operators.observable.i4.e` @type ^`boolean` @kind boolean;
  #L27f92c.  if v0 == 0 then goto L27f936;
  #L27f930.  v0:= 0I;
  #L27f932.  v1.`io.reactivex.internal.operators.observable.i4.e` @type ^`boolean` := v0 @kind boolean;
  #L27f936.  v0:= v1.`io.reactivex.internal.operators.observable.i4.b` @type ^`io.reactivex.t` @kind object;
  #L27f93a.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27f940.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.i4` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/i4;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27f954.  v0:= v1.`io.reactivex.internal.operators.observable.i4.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L27f958.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L27f95e.  return @kind void;
}
