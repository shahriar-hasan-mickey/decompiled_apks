record `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.unit` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @AccessFlag FINAL;
  `io.reactivex.x$a` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.x$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.<init>:(Lio/reactivex/t;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L281de8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L281dee.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L281df2.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.timeout` @type ^`long` := v2 @kind wide;
  #L281df6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L281dfa.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.x$a` := v5 @kind object;
  #L281dfe.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L281e02.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L281e08.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L281e0c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L281e10.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L281e16.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L281e1a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281e2c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281e30.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L281e36.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281e3a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281e40.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281dbc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281dc0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L281dc6.  v0:= temp @kind object;
  #L281dc8.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L281dcc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L281dd2.  v0:= temp;
  #L281dd4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L281e54.  v0:= 9223372036854775807L;
  #L281e5e.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L281e64.  v2:= temp @kind wide;
  #L281e66.  v4:= lcmp(v2, v0);
  #L281e6a.  if v4 == 0 then goto L281e8c;
  #L281e6e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281e72.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L281e78.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281e7c.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L281e82.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281e86.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281e8c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L281ea0.  v0:= 9223372036854775807L;
  #L281eaa.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L281eb0.  v2:= temp @kind wide;
  #L281eb2.  v4:= lcmp(v2, v0);
  #L281eb6.  if v4 == 0 then goto L281eda;
  #L281eba.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281ebe.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L281ec4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281ec8.  call `onError`(v0, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L281ece.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281ed2.  call `dispose`(v6) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281ed8.  goto L281ee0;
  #L281eda.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L281ee0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L281ef4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L281efa.  v0:= temp @kind wide;
  #L281efc.  v2:= 9223372036854775807L;
  #L281f06.  v4:= lcmp(v0, v2);
  #L281f0a.  if v4 == 0 then goto L281f48;
  #L281f0e.  v2:= 1L;
  #L281f12.  v2:= v2 + v0 @kind long;
  #L281f14.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L281f1a.  v0:= temp;
  #L281f1c.  if v0 != 0 then goto L281f22;
  #L281f20.  goto L281f48;
  #L281f22.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281f26.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L281f2c.  v0:= temp @kind object;
  #L281f2e.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L281f32.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281f38.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281f3c.  call `onNext`(v0, v6) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L281f42.  call `startTimeout`(v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.startTimeout:(J)V` @kind virtual;
  #L281f48.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281f5c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281f60.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L281f66.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L281f78.  v0:= 9223372036854775807L;
  #L281f82.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L281f88.  v4:= temp;
  #L281f8a.  if v4 == 0 then goto L281fc6;
  #L281f8e.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281f92.  call temp:= `dispose`(v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L281f98.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281f9c.  v5:= new `java.util.concurrent.TimeoutException`;
  #L281fa0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.timeout` @type ^`long` @kind wide;
  #L281fa4.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L281fa8.  call temp:= `d`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.d:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L281fae.  v0:= temp @kind object;
  #L281fb0.  call `<init>`(v5, v0) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L281fb6.  call `onError`(v4, v5) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L281fbc.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281fc0.  call `dispose`(v4) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281fc6.  return @kind void;
}
procedure `void` `startTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutObserver;.startTimeout:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L281fd8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281fdc.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281fe0.  v2:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c`;
  #L281fe4.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;)V` @kind direct;
  #L281fea.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.timeout` @type ^`long` @kind wide;
  #L281fee.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L281ff2.  call temp:= `c`(v1, v2, v5, v3) @signature `Lio/reactivex/x$a;.c:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L281ff8.  v5:= temp @kind object;
  #L281ffa.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L282000.  return @kind void;
}
