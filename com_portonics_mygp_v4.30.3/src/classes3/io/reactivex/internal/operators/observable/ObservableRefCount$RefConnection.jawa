record `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.d0.g` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.connected` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.disconnectedEarly` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableRefCount` `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.parent` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.subscriberCount` @AccessFlag ;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.timer` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRefCount;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27b328.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27b32e.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` := v1 @kind object;
  #L27b332.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.accept:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27b344.  call temp:= `replace`(v2, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27b34a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L27b34e.  @monitorenter v0
  #L27b350.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.disconnectedEarly` @type ^`boolean` @kind boolean;
  #L27b354.  if v1 == 0 then goto L27b36a;
  #L27b358.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L27b35c.  v1:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`io.reactivex.f0.a` @kind object;
  #L27b360.  v1:= (`io.reactivex.internal.disposables.c`) v1 @kind object;
  #L27b364.  call `a`(v1, v3) @signature `Lio/reactivex/internal/disposables/c;.a:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27b36a.  @monitorexit v0
  #L27b36c.  return @kind void;
  #L27b36e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27b370.  @monitorexit v0
  #L27b372.  throw v3;
  catch `java.lang.Throwable` @[L27b350..L27b372] goto L27b36e;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L27b390.  v1:= (`io.reactivex.disposables.b`) v1 @kind object;
  #L27b394.  call `accept`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.accept:(Lio/reactivex/disposables/b;)V` @kind virtual;
  #L27b39a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27b3ac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$RefConnection.parent` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L27b3b0.  call `y`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.y:(Lio/reactivex/internal/operators/observable/ObservableRefCount$RefConnection;)V` @kind virtual;
  #L27b3b6.  return @kind void;
}
