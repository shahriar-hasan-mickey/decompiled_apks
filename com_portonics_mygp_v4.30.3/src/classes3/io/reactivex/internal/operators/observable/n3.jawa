record `io.reactivex.internal.operators.observable.n3` @kind class @AccessFlag FINAL extends `io.reactivex.r` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.n3.b` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.operators.observable.i3` `io.reactivex.internal.operators.observable.n3.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.n3` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.internal.operators.observable.i3` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/n3;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/i3;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27c678.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27c67e.  v0.`io.reactivex.internal.operators.observable.n3.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L27c682.  v0.`io.reactivex.internal.operators.observable.n3.c` @type ^`io.reactivex.internal.operators.observable.i3` := v2 @kind object;
  #L27c686.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.n3` v3 @kind this, `io.reactivex.t` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/n3;.subscribe:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27c698.  v0:= v3.`io.reactivex.internal.operators.observable.n3.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27c69c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c6a2.  v0:= temp @kind object;
  #L27c6a4.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver`) v0 @kind object;
  #L27c6a8.  if v0 != 0 then goto L27c6d8;
  #L27c6ac.  v0:= v3.`io.reactivex.internal.operators.observable.n3.c` @type ^`io.reactivex.internal.operators.observable.i3` @kind object;
  #L27c6b0.  call temp:= `call`(v0) @signature `Lio/reactivex/internal/operators/observable/i3;.call:()Lio/reactivex/internal/operators/observable/ObservableReplay$a;` @kind interface;
  #L27c6b6.  v0:= temp @kind object;
  #L27c6b8.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver`;
  #L27c6bc.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$a;)V` @kind direct;
  #L27c6c2.  v0:= v3.`io.reactivex.internal.operators.observable.n3.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27c6c6.  v2:= 0I;
  #L27c6c8.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27c6ce.  v0:= temp;
  #L27c6d0.  if v0 != 0 then goto L27c6d6;
  #L27c6d4.  goto L27c698;
  #L27c6d6.  v0:= v1 @kind object;
  #L27c6d8.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`;
  #L27c6dc.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;Lio/reactivex/t;)V` @kind direct;
  #L27c6e2.  call `onSubscribe`(v4, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27c6e8.  call temp:= `add`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.add:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)Z` @kind virtual;
  #L27c6ee.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.isDisposed:()Z` @kind virtual;
  #L27c6f4.  v4:= temp;
  #L27c6f6.  if v4 == 0 then goto L27c702;
  #L27c6fa.  call `remove`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.remove:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @kind virtual;
  #L27c700.  return @kind void;
  #L27c702.  v4:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$a` @kind object;
  #L27c706.  call `replay`(v4, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.replay:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @kind interface;
  #L27c70c.  return @kind void;
}
