record `io.reactivex.internal.operators.observable.s1` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.n` @kind class {
  `io.reactivex.r` `io.reactivex.internal.operators.observable.s1.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.s1` v0 @kind this, `io.reactivex.r` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/s1;.<init>:(Lio/reactivex/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L276748.  call `<init>`(v0) @signature `Lio/reactivex/n;.<init>:()V` @kind direct;
  #L27674e.  v0.`io.reactivex.internal.operators.observable.s1.b` @type ^`io.reactivex.r` := v1 @kind object;
  #L276752.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.s1` v1 @kind this, `io.reactivex.t` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/s1;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L276764.  v0:= v1.`io.reactivex.internal.operators.observable.s1.b` @type ^`io.reactivex.r` @kind object;
  #L276768.  call `subscribe`(v0, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27676e.  return @kind void;
}
