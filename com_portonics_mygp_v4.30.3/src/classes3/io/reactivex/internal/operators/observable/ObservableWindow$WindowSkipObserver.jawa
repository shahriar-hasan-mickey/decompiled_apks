record `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.capacityHint` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.count` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.firstEmission` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.index` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.skip` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.upstream` @AccessFlag ;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.windows` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v1 @kind this, `io.reactivex.t` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.<init>:(Lio/reactivex/t;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L282b74.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L282b7a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L282b7e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L282b84.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L282b88.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @type ^`io.reactivex.t` := v2 @kind object;
  #L282b8c.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.count` @type ^`long` := v3 @kind wide;
  #L282b90.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.skip` @type ^`long` := v5 @kind wide;
  #L282b94.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.capacityHint` @type ^`int` := v7;
  #L282b98.  v2:= new `java.util.ArrayDeque`;
  #L282b9c.  call `<init>`(v2) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L282ba2.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.windows` @type ^`java.util.ArrayDeque` := v2 @kind object;
  #L282ba6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282bb8.  v0:= 1I;
  #L282bba.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L282bbe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282b5c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @type ^`boolean` @kind boolean;
  #L282b60.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L282bd0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L282bd4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L282bda.  v1:= temp;
  #L282bdc.  if v1 != 0 then goto L282bf4;
  #L282be0.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L282be6.  v1:= temp @kind object;
  #L282be8.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L282bec.  call `onComplete`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L282bf2.  goto L282bd4;
  #L282bf4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282bf8.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L282bfe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L282c10.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L282c14.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L282c1a.  v1:= temp;
  #L282c1c.  if v1 != 0 then goto L282c34;
  #L282c20.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L282c26.  v1:= temp @kind object;
  #L282c28.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L282c2c.  call `onError`(v1, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L282c32.  goto L282c14;
  #L282c34.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282c38.  call `onError`(v0, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L282c3e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v11 @kind this, `java.lang.Object` v12 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L282c50.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L282c54.  v1:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.index` @type ^`long` @kind wide;
  #L282c58.  v3:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.skip` @type ^`long` @kind wide;
  #L282c5c.  v5:= v1 %% v3 @kind long;
  #L282c60.  v7:= 0L;
  #L282c64.  v9:= lcmp(v5, v7);
  #L282c68.  if v9 != 0 then goto L282c9a;
  #L282c6c.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @type ^`boolean` @kind boolean;
  #L282c70.  if v5 != 0 then goto L282c9a;
  #L282c74.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L282c78.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L282c7e.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.capacityHint` @type ^`int`;
  #L282c82.  call temp:= `z`(v5, v11) @signature `Lio/reactivex/subjects/UnicastSubject;.z:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L282c88.  v5:= temp @kind object;
  #L282c8a.  call temp:= `offer`(v0, v5) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L282c90.  v6:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282c94.  call `onNext`(v6, v5) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L282c9a.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.firstEmission` @type ^`long` @kind wide;
  #L282c9e.  v7:= 1L;
  #L282ca2.  v5:= v5 + v7 @kind long;
  #L282ca4.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L282caa.  v9:= temp @kind object;
  #L282cac.  call temp:= `hasNext`(v9) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L282cb2.  v10:= temp;
  #L282cb4.  if v10 == 0 then goto L282ccc;
  #L282cb8.  call temp:= `next`(v9) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L282cbe.  v10:= temp @kind object;
  #L282cc0.  v10:= (`io.reactivex.subjects.UnicastSubject`) v10 @kind object;
  #L282cc4.  call `onNext`(v10, v12) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L282cca.  goto L282cac;
  #L282ccc.  v9:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.count` @type ^`long` @kind wide;
  #L282cd0.  v12:= lcmp(v5, v9);
  #L282cd4.  if v12 < 0 then goto L282d12;
  #L282cd8.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L282cde.  v12:= temp @kind object;
  #L282ce0.  v12:= (`io.reactivex.subjects.UnicastSubject`) v12 @kind object;
  #L282ce4.  call `onComplete`(v12) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L282cea.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L282cf0.  v12:= temp;
  #L282cf2.  if v12 == 0 then goto L282d0a;
  #L282cf6.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @type ^`boolean` @kind boolean;
  #L282cfa.  if v12 == 0 then goto L282d0a;
  #L282cfe.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L282d02.  call `dispose`(v12) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L282d08.  return @kind void;
  #L282d0a.  v5:= v5 - v3 @kind long;
  #L282d0c.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.firstEmission` @type ^`long` := v5 @kind wide;
  #L282d10.  goto L282d16;
  #L282d12.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.firstEmission` @type ^`long` := v5 @kind wide;
  #L282d16.  v1:= v1 + v7 @kind long;
  #L282d18.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.index` @type ^`long` := v1 @kind wide;
  #L282d1c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282d30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L282d34.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L282d3a.  v0:= temp;
  #L282d3c.  if v0 == 0 then goto L282d4e;
  #L282d40.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L282d44.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L282d48.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L282d4e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$WindowSkipObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L282d60.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L282d64.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L282d6a.  v0:= temp;
  #L282d6c.  if v0 != 0 then goto L282d82;
  #L282d70.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.cancelled` @type ^`boolean` @kind boolean;
  #L282d74.  if v0 == 0 then goto L282d82;
  #L282d78.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L282d7c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L282d82.  return @kind void;
}
