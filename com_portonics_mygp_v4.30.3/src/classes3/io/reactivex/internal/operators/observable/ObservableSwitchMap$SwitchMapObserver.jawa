record `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.mapper` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @AccessFlag VOLATILE;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @AccessFlag ;
}
global `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.CANCELLED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27fb14.  v0:= new `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`;
  #L27fb18.  v1:= 0I;
  #L27fb1a.  v2:= -1L;
  #L27fb1e.  v4:= 1I;
  #L27fb20.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;JI)V` @kind direct;
  #L27fb26.  `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.CANCELLED` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` := v0 @kind object;
  #L27fb2a.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.cancel:()V` @kind virtual;
  #L27fb30.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this, `io.reactivex.t` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L27fb44.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27fb4a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27fb4e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27fb54.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L27fb58.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.downstream` @type ^`io.reactivex.t` := v2 @kind object;
  #L27fb5c.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.mapper` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L27fb60.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.bufferSize` @type ^`int` := v4;
  #L27fb64.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.delayErrors` @type ^`boolean` := v5 @kind boolean;
  #L27fb68.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L27fb6c.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L27fb72.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L27fb76.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27fb88.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @type ^`boolean` @kind boolean;
  #L27fb8c.  if v0 != 0 then goto L27fba6;
  #L27fb90.  v0:= 1I;
  #L27fb92.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L27fb96.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27fb9a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27fba0.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.disposeInner:()V` @kind virtual;
  #L27fba6.  return @kind void;
}
procedure `void` `disposeInner`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.disposeInner:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27fbb8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27fbbc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27fbc2.  v0:= temp @kind object;
  #L27fbc4.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`) v0 @kind object;
  #L27fbc8.  v1:= `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.CANCELLED` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` @kind object;
  #L27fbcc.  if v0 == v1 then goto L27fbee;
  #L27fbd0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27fbd4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27fbda.  v0:= temp @kind object;
  #L27fbdc.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`) v0 @kind object;
  #L27fbe0.  if v0 == v1 then goto L27fbee;
  #L27fbe4.  if v0 == 0 then goto L27fbee;
  #L27fbe8.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.cancel:()V` @kind virtual;
  #L27fbee.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v13 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L27fc00.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27fc06.  v0:= temp;
  #L27fc08.  if v0 == 0 then goto L27fc0e;
  #L27fc0c.  return @kind void;
  #L27fc0e.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27fc12.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27fc16.  v2:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L27fc1a.  v3:= 1I;
  #L27fc1c.  v4:= 1I;
  #L27fc1e.  v5:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @type ^`boolean` @kind boolean;
  #L27fc22.  if v5 == 0 then goto L27fc28;
  #L27fc26.  return @kind void;
  #L27fc28.  v5:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` @kind boolean;
  #L27fc2c.  v6:= 0I;
  #L27fc2e.  if v5 == 0 then goto L27fca4;
  #L27fc32.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27fc38.  v5:= temp @kind object;
  #L27fc3a.  if v5 != 0 then goto L27fc42;
  #L27fc3e.  v5:= 1I;
  #L27fc40.  goto L27fc44;
  #L27fc42.  v5:= 0I;
  #L27fc44.  if v2 == 0 then goto L27fc70;
  #L27fc48.  if v5 == 0 then goto L27fca4;
  #L27fc4c.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27fc50.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27fc56.  v1:= temp @kind object;
  #L27fc58.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L27fc5c.  if v1 == 0 then goto L27fc68;
  #L27fc60.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27fc66.  goto L27fc6e;
  #L27fc68.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27fc6e.  return @kind void;
  #L27fc70.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27fc74.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27fc7a.  v7:= temp @kind object;
  #L27fc7c.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L27fc80.  if v7 == 0 then goto L27fc98;
  #L27fc84.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27fc88.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L27fc8e.  v1:= temp @kind object;
  #L27fc90.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27fc96.  return @kind void;
  #L27fc98.  if v5 == 0 then goto L27fca4;
  #L27fc9c.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27fca2.  return @kind void;
  #L27fca4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27fcaa.  v5:= temp @kind object;
  #L27fcac.  v5:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`) v5 @kind object;
  #L27fcb0.  if v5 == 0 then goto L27fdd2;
  #L27fcb4.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L27fcb8.  if v7 == 0 then goto L27fdd2;
  #L27fcbc.  v8:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @type ^`boolean` @kind boolean;
  #L27fcc0.  v9:= 0I;
  #L27fcc2.  if v8 == 0 then goto L27fd12;
  #L27fcc6.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L27fccc.  v8:= temp;
  #L27fcce.  if v2 == 0 then goto L27fcde;
  #L27fcd2.  if v8 == 0 then goto L27fd12;
  #L27fcd6.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27fcdc.  goto L27fc1e;
  #L27fcde.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27fce2.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27fce8.  v10:= temp @kind object;
  #L27fcea.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L27fcee.  if v10 == 0 then goto L27fd06;
  #L27fcf2.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27fcf6.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L27fcfc.  v1:= temp @kind object;
  #L27fcfe.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27fd04.  return @kind void;
  #L27fd06.  if v8 == 0 then goto L27fd12;
  #L27fd0a.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27fd10.  goto L27fc1e;
  #L27fd12.  v8:= 0I;
  #L27fd14.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @type ^`boolean` @kind boolean;
  #L27fd18.  if v10 == 0 then goto L27fd1e;
  #L27fd1c.  return @kind void;
  #L27fd1e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27fd24.  v10:= temp @kind object;
  #L27fd26.  if v5 == v10 then goto L27fd2e;
  #L27fd2a.  v8:= 1I;
  #L27fd2c.  goto L27fdc2;
  #L27fd2e.  if v2 != 0 then goto L27fd5a;
  #L27fd32.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27fd36.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27fd3c.  v10:= temp @kind object;
  #L27fd3e.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L27fd42.  if v10 == 0 then goto L27fd5a;
  #L27fd46.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27fd4a.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L27fd50.  v1:= temp @kind object;
  #L27fd52.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27fd58.  return @kind void;
  #L27fd5a.  v10:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @type ^`boolean` @kind boolean;
  #L27fd5e.  call temp:= `poll`(v7) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L27fd64.  v11:= temp @kind object;
  #L27fd66.  goto L27fda4;
  #L27fd68.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27fd6a.  call `b`(v8) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L27fd70.  v11:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27fd74.  call temp:= `addThrowable`(v11, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L27fd7a.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27fd80.  if v2 != 0 then goto L27fd9a;
  #L27fd84.  call `disposeInner`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.disposeInner:()V` @kind virtual;
  #L27fd8a.  v8:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27fd8e.  call `dispose`(v8) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27fd94.  v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` := v3 @kind boolean;
  #L27fd98.  goto L27fda0;
  #L27fd9a.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.cancel:()V` @kind virtual;
  #L27fda0.  v11:= v9 @kind object;
  #L27fda2.  v8:= 1I;
  #L27fda4.  if v11 != 0 then goto L27fdac;
  #L27fda8.  v12:= 1I;
  #L27fdaa.  goto L27fdae;
  #L27fdac.  v12:= 0I;
  #L27fdae.  if v10 == 0 then goto L27fdbe;
  #L27fdb2.  if v12 == 0 then goto L27fdbe;
  #L27fdb6.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27fdbc.  goto L27fd2a;
  #L27fdbe.  if v12 == 0 then goto L27fdca;
  #L27fdc2.  if v8 == 0 then goto L27fdd2;
  #L27fdc6.  goto L27fc1e;
  #L27fdca.  call `onNext`(v0, v11) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27fdd0.  goto L27fd14;
  #L27fdd2.  v4:= -v4 @kind int;
  #L27fdd4.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27fdda.  v4:= temp;
  #L27fddc.  if v4 != 0 then goto L27fc1e;
  #L27fde0.  return @kind void;
  catch `java.lang.Throwable` @[L27fd5e..L27fd66] goto L27fd68;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v6 @kind object, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.innerError:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27fe00.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.index` @type ^`long` @kind wide;
  #L27fe04.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @type ^`long` @kind wide;
  #L27fe08.  v4:= lcmp(v0, v2);
  #L27fe0c.  if v4 != 0 then goto L27fe40;
  #L27fe10.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27fe14.  call temp:= `addThrowable`(v0, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L27fe1a.  v0:= temp;
  #L27fe1c.  if v0 == 0 then goto L27fe40;
  #L27fe20.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L27fe24.  if v7 != 0 then goto L27fe32;
  #L27fe28.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27fe2c.  call `dispose`(v7) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27fe32.  v7:= 1I;
  #L27fe34.  v6.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @type ^`boolean` := v7 @kind boolean;
  #L27fe38.  call `drain`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L27fe3e.  goto L27fe46;
  #L27fe40.  call `t`(v7) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L27fe46.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27fafc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.cancelled` @type ^`boolean` @kind boolean;
  #L27fb00.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27fe58.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` @kind boolean;
  #L27fe5c.  if v0 != 0 then goto L27fe6c;
  #L27fe60.  v0:= 1I;
  #L27fe62.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L27fe66.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L27fe6c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27fe80.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` @kind boolean;
  #L27fe84.  if v0 != 0 then goto L27feb4;
  #L27fe88.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27fe8c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L27fe92.  v0:= temp;
  #L27fe94.  if v0 == 0 then goto L27feb4;
  #L27fe98.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L27fe9c.  if v2 != 0 then goto L27fea6;
  #L27fea0.  call `disposeInner`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.disposeInner:()V` @kind virtual;
  #L27fea6.  v2:= 1I;
  #L27fea8.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L27feac.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L27feb2.  goto L27feba;
  #L27feb4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L27feba.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27fecc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @type ^`long` @kind wide;
  #L27fed0.  v2:= 1L;
  #L27fed4.  v0:= v0 + v2 @kind long;
  #L27fed6.  v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @type ^`long` := v0 @kind wide;
  #L27feda.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27fede.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27fee4.  v2:= temp @kind object;
  #L27fee6.  v2:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`) v2 @kind object;
  #L27feea.  if v2 == 0 then goto L27fef4;
  #L27feee.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.cancel:()V` @kind virtual;
  #L27fef4.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L27fef8.  call temp:= `apply`(v2, v5) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L27fefe.  v5:= temp @kind object;
  #L27ff00.  v2:= "The ObservableSource returned is null" @kind object;
  #L27ff04.  call temp:= `e`(v5, v2) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L27ff0a.  v5:= temp @kind object;
  #L27ff0c.  v5:= (`io.reactivex.r`) v5 @kind object;
  #L27ff10.  v2:= new `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`;
  #L27ff14.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.bufferSize` @type ^`int`;
  #L27ff18.  call `<init>`(v2, v4, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;JI)V` @kind direct;
  #L27ff1e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27ff22.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27ff28.  v0:= temp @kind object;
  #L27ff2a.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver`) v0 @kind object;
  #L27ff2e.  v1:= `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.CANCELLED` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` @kind object;
  #L27ff32.  if v0 != v1 then goto L27ff38;
  #L27ff36.  goto L27ff4e;
  #L27ff38.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.active` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27ff3c.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27ff42.  v0:= temp;
  #L27ff44.  if v0 == 0 then goto L27ff1e;
  #L27ff48.  call `subscribe`(v5, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27ff4e.  return @kind void;
  #L27ff50.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27ff52.  call `b`(v5) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L27ff58.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27ff5c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27ff62.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L27ff68.  return @kind void;
  catch `java.lang.Throwable` @[L27fef4..L27ff10] goto L27ff50;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ff88.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27ff8c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27ff92.  v0:= temp;
  #L27ff94.  if v0 == 0 then goto L27ffa6;
  #L27ff98.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L27ff9c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27ffa0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27ffa6.  return @kind void;
}
