record `io.reactivex.internal.operators.observable.w3` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` `io.reactivex.internal.operators.observable.w3.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.observable.w3.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.w3.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.w3.e` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.w3.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.w3` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/w3;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27e9d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27e9d6.  v0.`io.reactivex.internal.operators.observable.w3.b` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` := v1 @kind object;
  #L27e9da.  v0.`io.reactivex.internal.operators.observable.w3.d` @type ^`int` := v2;
  #L27e9de.  v1:= new `io.reactivex.internal.queue.a`;
  #L27e9e2.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L27e9e8.  v0.`io.reactivex.internal.operators.observable.w3.c` @type ^`io.reactivex.internal.queue.a` := v1 @kind object;
  #L27e9ec.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.w3` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/w3;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ea00.  v0:= 1I;
  #L27ea02.  v1.`io.reactivex.internal.operators.observable.w3.e` @type ^`boolean` := v0 @kind boolean;
  #L27ea06.  v0:= v1.`io.reactivex.internal.operators.observable.w3.b` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` @kind object;
  #L27ea0a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.drain:()V` @kind virtual;
  #L27ea10.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.w3` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/w3;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L27ea24.  v0.`io.reactivex.internal.operators.observable.w3.f` @type ^`java.lang.Throwable` := v1 @kind object;
  #L27ea28.  v1:= 1I;
  #L27ea2a.  v0.`io.reactivex.internal.operators.observable.w3.e` @type ^`boolean` := v1 @kind boolean;
  #L27ea2e.  v1:= v0.`io.reactivex.internal.operators.observable.w3.b` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` @kind object;
  #L27ea32.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.drain:()V` @kind virtual;
  #L27ea38.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.w3` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/w3;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ea4c.  v0:= v1.`io.reactivex.internal.operators.observable.w3.c` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L27ea50.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L27ea56.  v2:= v1.`io.reactivex.internal.operators.observable.w3.b` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` @kind object;
  #L27ea5a.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.drain:()V` @kind virtual;
  #L27ea60.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.w3` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/w3;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27ea74.  v0:= v2.`io.reactivex.internal.operators.observable.w3.b` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator` @kind object;
  #L27ea78.  v1:= v2.`io.reactivex.internal.operators.observable.w3.d` @type ^`int`;
  #L27ea7c.  call temp:= `setDisposable`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$EqualCoordinator;.setDisposable:(Lio/reactivex/disposables/b;I)Z` @kind virtual;
  #L27ea82.  return @kind void;
}
