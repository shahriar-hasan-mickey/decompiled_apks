record `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.id` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @AccessFlag FINAL;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L274358.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27435e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.id` @type ^`long` := v2 @kind wide;
  #L274362.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` := v1 @kind object;
  #L274366.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L274378.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27437e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L274390.  v0:= 1I;
  #L274392.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L274396.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L27439a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.drain:()V` @kind virtual;
  #L2743a0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2743b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L2743b8.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2743bc.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2743c2.  v0:= temp;
  #L2743c4.  if v0 == 0 then goto L2743ec;
  #L2743c8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L2743cc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L2743d0.  if v0 != 0 then goto L2743da;
  #L2743d4.  call temp:= `disposeAll`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.disposeAll:()Z` @kind virtual;
  #L2743da.  v2:= 1I;
  #L2743dc.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L2743e0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L2743e4.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.drain:()V` @kind virtual;
  #L2743ea.  goto L2743f2;
  #L2743ec.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2743f2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L274404.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @type ^`int`;
  #L274408.  if v0 != 0 then goto L274418;
  #L27440c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L274410.  call `tryEmit`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.tryEmit:(Ljava/lang/Object;Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;)V` @kind virtual;
  #L274416.  goto L274422;
  #L274418.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L27441c.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.drain:()V` @kind virtual;
  #L274422.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L274434.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27443a.  v0:= temp;
  #L27443c.  if v0 == 0 then goto L274482;
  #L274440.  v0:= instanceof @variable v3 @type ^`io.reactivex.e0.a.e` @kind boolean;
  #L274444.  if v0 == 0 then goto L274482;
  #L274448.  v3:= (`io.reactivex.e0.a.e`) v3 @kind object;
  #L27444c.  v0:= 7I;
  #L27444e.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L274454.  v0:= temp;
  #L274456.  v1:= 1I;
  #L274458.  if v0 != v1 then goto L274474;
  #L27445c.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @type ^`int` := v0;
  #L274460.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L274464.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L274468.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L27446c.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.drain:()V` @kind virtual;
  #L274472.  return @kind void;
  #L274474.  v1:= 2I;
  #L274476.  if v0 != v1 then goto L274482;
  #L27447a.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @type ^`int` := v0;
  #L27447e.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L274482.  return @kind void;
}
