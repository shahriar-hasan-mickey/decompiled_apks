record `io.reactivex.internal.operators.observable.l2` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.n` @kind class, `io.reactivex.e0.a.h` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.observable.l2.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.l2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/l2;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L278968.  call `<init>`(v0) @signature `Lio/reactivex/n;.<init>:()V` @kind direct;
  #L27896e.  v0.`io.reactivex.internal.operators.observable.l2.b` @type ^`java.lang.Object` := v1 @kind object;
  #L278972.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.observable.l2` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/l2;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L278950.  v0:= v1.`io.reactivex.internal.operators.observable.l2.b` @type ^`java.lang.Object` @kind object;
  #L278954.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.l2` v2 @kind this, `io.reactivex.t` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/l2;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L278984.  v0:= new `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable`;
  #L278988.  v1:= v2.`io.reactivex.internal.operators.observable.l2.b` @type ^`java.lang.Object` @kind object;
  #L27898c.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.<init>:(Lio/reactivex/t;Ljava/lang/Object;)V` @kind direct;
  #L278992.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L278998.  call `run`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.run:()V` @kind virtual;
  #L27899e.  return @kind void;
}
