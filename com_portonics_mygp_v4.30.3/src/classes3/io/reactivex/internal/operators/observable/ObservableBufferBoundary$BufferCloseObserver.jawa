record `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26e6dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26e6e2.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` := v1 @kind object;
  #L26e6e6.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.index` @type ^`long` := v2 @kind wide;
  #L26e6ea.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L26e6fc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26e702.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26e6b4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26e6ba.  v0:= temp @kind object;
  #L26e6bc.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L26e6c0.  if v0 != v1 then goto L26e6c8;
  #L26e6c4.  v0:= 1I;
  #L26e6c6.  goto L26e6ca;
  #L26e6c8.  v0:= 0I;
  #L26e6ca.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L26e714.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26e71a.  v0:= temp @kind object;
  #L26e71c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L26e720.  if v0 == v1 then goto L26e738;
  #L26e724.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L26e72a.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` @kind object;
  #L26e72e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.index` @type ^`long` @kind wide;
  #L26e732.  call `close`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.close:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;J)V` @kind virtual;
  #L26e738.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26e74c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26e752.  v0:= temp @kind object;
  #L26e754.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L26e758.  if v0 == v1 then goto L26e76e;
  #L26e75c.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L26e762.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` @kind object;
  #L26e766.  call `boundaryError`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.boundaryError:(Lio/reactivex/disposables/b;Ljava/lang/Throwable;)V` @kind virtual;
  #L26e76c.  goto L26e774;
  #L26e76e.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26e774.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26e788.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26e78e.  v3:= temp @kind object;
  #L26e790.  v3:= (`io.reactivex.disposables.b`) v3 @kind object;
  #L26e794.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L26e798.  if v3 == v0 then goto L26e7b6;
  #L26e79c.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L26e7a2.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26e7a8.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver` @kind object;
  #L26e7ac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver.index` @type ^`long` @kind wide;
  #L26e7b0.  call `close`(v3, v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferBoundaryObserver;.close:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;J)V` @kind virtual;
  #L26e7b6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$BufferCloseObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L26e7c8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26e7ce.  return @kind void;
}
