record `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.active` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.fusionMode` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.inner` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.mapper` @AccessFlag FINAL;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @AccessFlag ;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L270f54.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L270f5a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L270f5e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L270f62.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.bufferSize` @type ^`int` := v3;
  #L270f66.  v2:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver`;
  #L270f6a.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;)V` @kind direct;
  #L270f70.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` := v2 @kind object;
  #L270f74.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270f88.  v0:= 1I;
  #L270f8a.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L270f8e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` @kind object;
  #L270f92.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver$InnerObserver;.dispose:()V` @kind virtual;
  #L270f98.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L270f9c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L270fa2.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L270fa8.  v0:= temp;
  #L270faa.  if v0 != 0 then goto L270fb8;
  #L270fae.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L270fb2.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L270fb8.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L270fcc.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L270fd2.  v0:= temp;
  #L270fd4.  if v0 == 0 then goto L270fda;
  #L270fd8.  return @kind void;
  #L270fda.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.disposed` @type ^`boolean` @kind boolean;
  #L270fde.  if v0 == 0 then goto L270fee;
  #L270fe2.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L270fe6.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L270fec.  return @kind void;
  #L270fee.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.active` @type ^`boolean` @kind boolean;
  #L270ff2.  if v0 != 0 then goto L2710a2;
  #L270ff6.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` @kind boolean;
  #L270ffa.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L270ffe.  call temp:= `poll`(v1) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L271004.  v1:= temp @kind object;
  #L271006.  v2:= 1I;
  #L271008.  if v1 != 0 then goto L271010;
  #L27100c.  v3:= 1I;
  #L27100e.  goto L271012;
  #L271010.  v3:= 0I;
  #L271012.  if v0 == 0 then goto L27102a;
  #L271016.  if v3 == 0 then goto L27102a;
  #L27101a.  v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.disposed` @type ^`boolean` := v2 @kind boolean;
  #L27101e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271022.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L271028.  return @kind void;
  #L27102a.  if v3 != 0 then goto L2710a2;
  #L27102e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L271032.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L271038.  v0:= temp @kind object;
  #L27103a.  v1:= "The mapper returned a null ObservableSource" @kind object;
  #L27103e.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L271044.  v0:= temp @kind object;
  #L271046.  v0:= (`io.reactivex.r`) v0 @kind object;
  #L27104a.  v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.active` @type ^`boolean` := v2 @kind boolean;
  #L27104e.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver` @kind object;
  #L271052.  call `subscribe`(v0, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L271058.  goto L2710a2;
  #L27105a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27105c.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L271062.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.dispose:()V` @kind virtual;
  #L271068.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L27106c.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L271072.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271076.  call `onError`(v1, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27107c.  return @kind void;
  #L27107e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L271080.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L271086.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.dispose:()V` @kind virtual;
  #L27108c.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L271090.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L271096.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27109a.  call `onError`(v1, v0) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2710a0.  return @kind void;
  #L2710a2.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2710a8.  v0:= temp;
  #L2710aa.  if v0 != 0 then goto L270fda;
  #L2710ae.  return @kind void;
  catch `java.lang.Throwable` @[L270ffa..L271006] goto L27107e;
  catch `java.lang.Throwable` @[L27102e..L27104a] goto L27105a;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L2710d8.  v0:= 0I;
  #L2710da.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L2710de.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.drain:()V` @kind virtual;
  #L2710e4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270f3c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.disposed` @type ^`boolean` @kind boolean;
  #L270f40.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2710f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` @kind boolean;
  #L2710fc.  if v0 == 0 then goto L271102;
  #L271100.  return @kind void;
  #L271102.  v0:= 1I;
  #L271104.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L271108.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.drain:()V` @kind virtual;
  #L27110e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271120.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` @kind boolean;
  #L271124.  if v0 == 0 then goto L271130;
  #L271128.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L27112e.  return @kind void;
  #L271130.  v0:= 1I;
  #L271132.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L271136.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.dispose:()V` @kind virtual;
  #L27113c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271140.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L271146.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271158.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` @kind boolean;
  #L27115c.  if v0 == 0 then goto L271162;
  #L271160.  return @kind void;
  #L271162.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.fusionMode` @type ^`int`;
  #L271166.  if v0 != 0 then goto L271174;
  #L27116a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L27116e.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L271174.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.drain:()V` @kind virtual;
  #L27117a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27118c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L271190.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L271196.  v0:= temp;
  #L271198.  if v0 == 0 then goto L271210;
  #L27119c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.upstream` @type ^`io.reactivex.disposables.b` := v3 @kind object;
  #L2711a0.  v0:= instanceof @variable v3 @type ^`io.reactivex.e0.a.e` @kind boolean;
  #L2711a4.  if v0 == 0 then goto L2711f4;
  #L2711a8.  v3:= (`io.reactivex.e0.a.e`) v3 @kind object;
  #L2711ac.  v0:= 3I;
  #L2711ae.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L2711b4.  v0:= temp;
  #L2711b6.  v1:= 1I;
  #L2711b8.  if v0 != v1 then goto L2711da;
  #L2711bc.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.fusionMode` @type ^`int` := v0;
  #L2711c0.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L2711c4.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L2711c8.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2711cc.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2711d2.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$SourceObserver;.drain:()V` @kind virtual;
  #L2711d8.  return @kind void;
  #L2711da.  v1:= 2I;
  #L2711dc.  if v0 != v1 then goto L2711f4;
  #L2711e0.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.fusionMode` @type ^`int` := v0;
  #L2711e4.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L2711e8.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2711ec.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2711f2.  return @kind void;
  #L2711f4.  v3:= new `io.reactivex.internal.queue.a`;
  #L2711f8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.bufferSize` @type ^`int`;
  #L2711fc.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L271202.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L271206.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$SourceObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27120a.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L271210.  return @kind void;
}
