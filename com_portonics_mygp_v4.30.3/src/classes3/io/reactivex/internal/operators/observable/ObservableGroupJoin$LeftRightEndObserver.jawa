record `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.index` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.isLeft` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableGroupJoin$a` `io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L277504.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27750a.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` := v1 @kind object;
  #L27750e.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.isLeft` @type ^`boolean` := v2 @kind boolean;
  #L277512.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.index` @type ^`int` := v3;
  #L277516.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L277528.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27752e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2774dc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2774e2.  v0:= temp @kind object;
  #L2774e4.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2774e8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2774ee.  v0:= temp;
  #L2774f0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L277540.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` @kind object;
  #L277544.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.isLeft` @type ^`boolean` @kind boolean;
  #L277548.  call `innerClose`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.innerClose:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;)V` @kind interface;
  #L27754e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L277560.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` @kind object;
  #L277564.  call `innerCloseError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.innerCloseError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27756a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27757c.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L277582.  v2:= temp;
  #L277584.  if v2 == 0 then goto L277596;
  #L277588.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` @kind object;
  #L27758c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver.isLeft` @type ^`boolean` @kind boolean;
  #L277590.  call `innerClose`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.innerClose:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;)V` @kind interface;
  #L277596.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$LeftRightEndObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L2775a8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2775ae.  return @kind void;
}
