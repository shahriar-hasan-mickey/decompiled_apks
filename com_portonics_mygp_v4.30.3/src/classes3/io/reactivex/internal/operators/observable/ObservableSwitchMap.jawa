record `io.reactivex.internal.operators.observable.ObservableSwitchMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableSwitchMap.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableSwitchMap.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchMap` v0 @kind this, `io.reactivex.r` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap;.<init>:(Lio/reactivex/r;Lio/reactivex/d0/k;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L27ffb8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/r;)V` @kind direct;
  #L27ffbe.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap.c` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L27ffc2.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap.d` @type ^`int` := v3;
  #L27ffc6.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap.e` @type ^`boolean` := v4 @kind boolean;
  #L27ffca.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableSwitchMap` v5 @kind this, `io.reactivex.t` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27ffdc.  v0:= v5.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L27ffe0.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap.c` @type ^`io.reactivex.d0.k` @kind object;
  #L27ffe4.  call temp:= `b`(v0, v6, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.b:(Lio/reactivex/r;Lio/reactivex/t;Lio/reactivex/d0/k;)Z` @kind static;
  #L27ffea.  v0:= temp;
  #L27ffec.  if v0 == 0 then goto L27fff2;
  #L27fff0.  return @kind void;
  #L27fff2.  v0:= v5.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L27fff6.  v1:= new `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver`;
  #L27fffa.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap.c` @type ^`io.reactivex.d0.k` @kind object;
  #L27fffe.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap.d` @type ^`int`;
  #L280002.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap.e` @type ^`boolean` @kind boolean;
  #L280006.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;IZ)V` @kind direct;
  #L28000c.  call `subscribe`(v0, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L280012.  return @kind void;
}
