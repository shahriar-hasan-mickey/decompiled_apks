record `io.reactivex.internal.operators.observable.ObservableBuffer` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer.d` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBuffer.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBuffer` v0 @kind this, `io.reactivex.r` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer;.<init>:(Lio/reactivex/r;IILjava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L26fd20.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/r;)V` @kind direct;
  #L26fd26.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer.c` @type ^`int` := v2;
  #L26fd2a.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer.d` @type ^`int` := v3;
  #L26fd2e.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer.e` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L26fd32.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableBuffer` v5 @kind this, `io.reactivex.t` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26fd44.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.d` @type ^`int`;
  #L26fd48.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.c` @type ^`int`;
  #L26fd4c.  if v0 != v1 then goto L26fd76;
  #L26fd50.  v0:= new `io.reactivex.internal.operators.observable.r`;
  #L26fd54.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.e` @type ^`java.util.concurrent.Callable` @kind object;
  #L26fd58.  call `<init>`(v0, v6, v1, v2) @signature `Lio/reactivex/internal/operators/observable/r;.<init>:(Lio/reactivex/t;ILjava/util/concurrent/Callable;)V` @kind direct;
  #L26fd5e.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/operators/observable/r;.a:()Z` @kind virtual;
  #L26fd64.  v6:= temp;
  #L26fd66.  if v6 == 0 then goto L26fd96;
  #L26fd6a.  v6:= v5.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L26fd6e.  call `subscribe`(v6, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L26fd74.  goto L26fd96;
  #L26fd76.  v0:= v5.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L26fd7a.  v1:= new `io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipObserver`;
  #L26fd7e.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.c` @type ^`int`;
  #L26fd82.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.d` @type ^`int`;
  #L26fd86.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableBuffer.e` @type ^`java.util.concurrent.Callable` @kind object;
  #L26fd8a.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$BufferSkipObserver;.<init>:(Lio/reactivex/t;IILjava/util/concurrent/Callable;)V` @kind direct;
  #L26fd90.  call `subscribe`(v0, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L26fd96.  return @kind void;
}
