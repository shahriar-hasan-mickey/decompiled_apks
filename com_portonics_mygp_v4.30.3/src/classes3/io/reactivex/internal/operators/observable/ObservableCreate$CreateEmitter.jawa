record `io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.p` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.observer` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L272090.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L272096.  v0.`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.observer` @type ^`io.reactivex.t` := v1 @kind object;
  #L27209a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L2720ac.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2720b2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271fac.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L271fb2.  v0:= temp @kind object;
  #L271fb4.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L271fb8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L271fbe.  v0:= temp;
  #L271fc0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2720c4.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.isDisposed:()Z` @kind virtual;
  #L2720ca.  v0:= temp;
  #L2720cc.  if v0 != 0 then goto L2720ec;
  #L2720d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.observer` @type ^`io.reactivex.t` @kind object;
  #L2720d4.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2720da.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.dispose:()V` @kind virtual;
  #L2720e0.  goto L2720ec;
  #L2720e2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2720e4.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.dispose:()V` @kind virtual;
  #L2720ea.  throw v0;
  #L2720ec.  return @kind void;
  catch `java.lang.Throwable` @[L2720d0..L2720da] goto L2720e2;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27210c.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L272112.  v0:= temp;
  #L272114.  if v0 != 0 then goto L27211e;
  #L272118.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L27211e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272130.  if v2 != 0 then goto L27214a;
  #L272134.  v2:= new `java.lang.NullPointerException`;
  #L272138.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L27213c.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L272142.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L272148.  return @kind void;
  #L27214a.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.isDisposed:()Z` @kind virtual;
  #L272150.  v0:= temp;
  #L272152.  if v0 != 0 then goto L272160;
  #L272156.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.observer` @type ^`io.reactivex.t` @kind object;
  #L27215a.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L272160.  return @kind void;
}
procedure `io.reactivex.p` `serialize`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.serialize:()Lio/reactivex/p;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272030.  v0:= new `io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter`;
  #L272034.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$SerializedEmitter;.<init>:(Lio/reactivex/p;)V` @kind direct;
  #L27203a.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this, `io.reactivex.d0.f` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.setCancellable:(Lio/reactivex/d0/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272174.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L272178.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/d0/f;)V` @kind direct;
  #L27217e.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @kind virtual;
  #L272184.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L272198.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27219e.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27204c.  v0:= 2I;
  #L27204e.  v0:= new `java.lang.Object`[v0];
  #L272052.  v1:= constclass @type ^`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` @kind object;
  #L272056.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L27205c.  v1:= temp @kind object;
  #L27205e.  v2:= 0I;
  #L272060.  v0[v2]:= v1 @kind object;
  #L272064.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L27206a.  v1:= temp @kind object;
  #L27206c.  v2:= 1I;
  #L27206e.  v0[v2]:= v1 @kind object;
  #L272072.  v1:= "%s{%s}" @kind object;
  #L272076.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L27207c.  v0:= temp @kind object;
  #L27207e.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271fd4.  if v2 != 0 then goto L271fe6;
  #L271fd8.  v2:= new `java.lang.NullPointerException`;
  #L271fdc.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L271fe0.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L271fe6.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.isDisposed:()Z` @kind virtual;
  #L271fec.  v0:= temp;
  #L271fee.  if v0 != 0 then goto L272010;
  #L271ff2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.observer` @type ^`io.reactivex.t` @kind object;
  #L271ff6.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L271ffc.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.dispose:()V` @kind virtual;
  #L272002.  v2:= 1I;
  #L272004.  return v2;
  #L272006.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L272008.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$CreateEmitter;.dispose:()V` @kind virtual;
  #L27200e.  throw v2;
  #L272010.  v2:= 0I;
  #L272012.  return v2;
  catch `java.lang.Throwable` @[L271ff2..L271ffc] goto L272006;
}
