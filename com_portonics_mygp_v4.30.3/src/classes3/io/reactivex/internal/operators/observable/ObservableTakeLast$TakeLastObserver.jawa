record `io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.count` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.<init>:(Lio/reactivex/t;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2801b8.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L2801be.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L2801c2.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.count` @type ^`int` := v2;
  #L2801c6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2801d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @type ^`boolean` @kind boolean;
  #L2801dc.  if v0 != 0 then goto L2801f0;
  #L2801e0.  v0:= 1I;
  #L2801e2.  v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2801e6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2801ea.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2801f0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2801a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @type ^`boolean` @kind boolean;
  #L2801a4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L280204.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L280208.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @type ^`boolean` @kind boolean;
  #L28020c.  if v1 == 0 then goto L280212;
  #L280210.  return @kind void;
  #L280212.  call temp:= `poll`(v2) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L280218.  v1:= temp @kind object;
  #L28021a.  if v1 != 0 then goto L28022e;
  #L28021e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.cancelled` @type ^`boolean` @kind boolean;
  #L280222.  if v1 != 0 then goto L28022c;
  #L280226.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L28022c.  return @kind void;
  #L28022e.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L280234.  goto L280208;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L280248.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L28024c.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L280252.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L280264.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.count` @type ^`int`;
  #L280268.  call temp:= `size`(v2) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L28026e.  v1:= temp;
  #L280270.  if v0 != v1 then goto L28027a;
  #L280274.  call temp:= `poll`(v2) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L28027a.  call temp:= `offer`(v2, v3) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L280280.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$TakeLastObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L280294.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L280298.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28029e.  v0:= temp;
  #L2802a0.  if v0 == 0 then goto L2802b2;
  #L2802a4.  v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L2802a8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2802ac.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2802b2.  return @kind void;
}
