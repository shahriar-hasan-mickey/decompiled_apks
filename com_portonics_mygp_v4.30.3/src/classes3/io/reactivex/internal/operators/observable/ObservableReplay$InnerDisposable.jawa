record `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.child` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @AccessFlag ;
  `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v1 @kind object, `io.reactivex.t` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27c254.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27c25a.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.parent` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` := v1 @kind object;
  #L27c25e.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.child` @type ^`io.reactivex.t` := v2 @kind object;
  #L27c262.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27c274.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L27c278.  if v0 != 0 then goto L27c292;
  #L27c27c.  v0:= 1I;
  #L27c27e.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L27c282.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.parent` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` @kind object;
  #L27c286.  call `remove`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.remove:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @kind virtual;
  #L27c28c.  v0:= 0I;
  #L27c28e.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @type ^`java.lang.Object` := v0 @kind object;
  #L27c292.  return @kind void;
}
procedure `java.lang.Object` `index`(`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.index:()Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L27c23c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @type ^`java.lang.Object` @kind object;
  #L27c240.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27c224.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.cancelled` @type ^`boolean` @kind boolean;
  #L27c228.  return v0;
}
