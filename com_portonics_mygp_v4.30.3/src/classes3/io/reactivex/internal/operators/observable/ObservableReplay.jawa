record `io.reactivex.internal.operators.observable.ObservableReplay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.f0.a` @kind class, `io.reactivex.internal.disposables.c` @kind interface {
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableReplay.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableReplay.d` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.i3` `io.reactivex.internal.operators.observable.ObservableReplay.e` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableReplay.f` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.i3` `@@io.reactivex.internal.operators.observable.ObservableReplay.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L27cd14.  v0:= new `io.reactivex.internal.operators.observable.p3`;
  #L27cd18.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/p3;.<init>:()V` @kind direct;
  #L27cd1e.  `@@io.reactivex.internal.operators.observable.ObservableReplay.b` @type ^`io.reactivex.internal.operators.observable.i3` := v0 @kind object;
  #L27cd22.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay` v0 @kind this, `io.reactivex.r` v1 @kind object, `io.reactivex.r` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `io.reactivex.internal.operators.observable.i3` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/r;Lio/reactivex/r;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/i3;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L27cd34.  call `<init>`(v0) @signature `Lio/reactivex/f0/a;.<init>:()V` @kind direct;
  #L27cd3a.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.f` @type ^`io.reactivex.r` := v1 @kind object;
  #L27cd3e.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.c` @type ^`io.reactivex.r` := v2 @kind object;
  #L27cd42.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L27cd46.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.e` @type ^`io.reactivex.internal.operators.observable.i3` := v4 @kind object;
  #L27cd4a.  return @kind void;
}
procedure `io.reactivex.f0.a` `A`(`io.reactivex.r` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.x` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.A:(Lio/reactivex/r;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x;I)Lio/reactivex/f0/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L27cc98.  v6:= new `io.reactivex.internal.operators.observable.o3`;
  #L27cc9c.  v0:= v6 @kind object;
  #L27cc9e.  v1:= v12;
  #L27cca0.  v2:= v8 @kind wide;
  #L27cca2.  v4:= v10 @kind object;
  #L27cca4.  v5:= v11 @kind object;
  #L27cca6.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/observable/o3;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @kind direct;
  #L27ccac.  call temp:= `B`(v7, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.B:(Lio/reactivex/r;Lio/reactivex/internal/operators/observable/i3;)Lio/reactivex/f0/a;` @kind static;
  #L27ccb2.  v7:= temp @kind object;
  #L27ccb4.  return v7 @kind object;
}
procedure `io.reactivex.f0.a` `B`(`io.reactivex.r` v3 @kind object, `io.reactivex.internal.operators.observable.i3` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.B:(Lio/reactivex/r;Lio/reactivex/internal/operators/observable/i3;)Lio/reactivex/f0/a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L27cc38.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27cc3c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27cc42.  v1:= new `io.reactivex.internal.operators.observable.n3`;
  #L27cc46.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/observable/n3;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/i3;)V` @kind direct;
  #L27cc4c.  v2:= new `io.reactivex.internal.operators.observable.ObservableReplay`;
  #L27cc50.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/r;Lio/reactivex/r;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/i3;)V` @kind direct;
  #L27cc56.  call temp:= `q`(v2) @signature `Lio/reactivex/g0/a;.q:(Lio/reactivex/f0/a;)Lio/reactivex/f0/a;` @kind static;
  #L27cc5c.  v3:= temp @kind object;
  #L27cc5e.  return v3 @kind object;
}
procedure `io.reactivex.f0.a` `C`(`io.reactivex.r` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.C:(Lio/reactivex/r;)Lio/reactivex/f0/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L27ccc8.  v0:= `@@io.reactivex.internal.operators.observable.ObservableReplay.b` @type ^`io.reactivex.internal.operators.observable.i3` @kind object;
  #L27cccc.  call temp:= `B`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.B:(Lio/reactivex/r;Lio/reactivex/internal/operators/observable/i3;)Lio/reactivex/f0/a;` @kind static;
  #L27ccd2.  v1:= temp @kind object;
  #L27ccd4.  return v1 @kind object;
}
procedure `io.reactivex.n` `D`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.D:(Ljava/util/concurrent/Callable;Lio/reactivex/d0/k;)Lio/reactivex/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L27cbdc.  v0:= new `io.reactivex.internal.operators.observable.k3`;
  #L27cbe0.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/k3;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/d0/k;)V` @kind direct;
  #L27cbe6.  call temp:= `n`(v0) @signature `Lio/reactivex/g0/a;.n:(Lio/reactivex/n;)Lio/reactivex/n;` @kind static;
  #L27cbec.  v1:= temp @kind object;
  #L27cbee.  return v1 @kind object;
}
procedure `io.reactivex.f0.a` `E`(`io.reactivex.f0.a` v1 @kind object, `io.reactivex.x` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.E:(Lio/reactivex/f0/a;Lio/reactivex/x;)Lio/reactivex/f0/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L27cce8.  call temp:= `observeOn`(v1, v2) @signature `Lio/reactivex/n;.observeOn:(Lio/reactivex/x;)Lio/reactivex/n;` @kind virtual;
  #L27ccee.  v2:= temp @kind object;
  #L27ccf0.  v0:= new `io.reactivex.internal.operators.observable.l3`;
  #L27ccf4.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/l3;.<init>:(Lio/reactivex/f0/a;Lio/reactivex/n;)V` @kind direct;
  #L27ccfa.  call temp:= `q`(v0) @signature `Lio/reactivex/g0/a;.q:(Lio/reactivex/f0/a;)Lio/reactivex/f0/a;` @kind static;
  #L27cd00.  v1:= temp @kind object;
  #L27cd02.  return v1 @kind object;
}
procedure `io.reactivex.f0.a` `y`(`io.reactivex.r` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.y:(Lio/reactivex/r;I)Lio/reactivex/f0/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L27cc00.  v0:= 2147483647I;
  #L27cc06.  if v2 != v0 then goto L27cc14;
  #L27cc0a.  call temp:= `C`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.C:(Lio/reactivex/r;)Lio/reactivex/f0/a;` @kind static;
  #L27cc10.  v1:= temp @kind object;
  #L27cc12.  return v1 @kind object;
  #L27cc14.  v0:= new `io.reactivex.internal.operators.observable.m3`;
  #L27cc18.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/m3;.<init>:(I)V` @kind direct;
  #L27cc1e.  call temp:= `B`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.B:(Lio/reactivex/r;Lio/reactivex/internal/operators/observable/i3;)Lio/reactivex/f0/a;` @kind static;
  #L27cc24.  v1:= temp @kind object;
  #L27cc26.  return v1 @kind object;
}
procedure `io.reactivex.f0.a` `z`(`io.reactivex.r` v6 @kind object, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.x` v10 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.z:(Lio/reactivex/r;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)Lio/reactivex/f0/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L27cc70.  v5:= 2147483647I;
  #L27cc76.  v0:= v6 @kind object;
  #L27cc78.  v1:= v7 @kind wide;
  #L27cc7a.  v3:= v9 @kind object;
  #L27cc7c.  v4:= v10 @kind object;
  #L27cc7e.  call temp:= `A`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.A:(Lio/reactivex/r;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x;I)Lio/reactivex/f0/a;` @kind static;
  #L27cc84.  v6:= temp @kind object;
  #L27cc86.  return v6 @kind object;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableReplay` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.a:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27ce28.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27ce2c.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver`) v3 @kind object;
  #L27ce30.  v1:= 0I;
  #L27ce32.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27ce38.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableReplay` v1 @kind this, `io.reactivex.t` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L27ce4c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay.f` @type ^`io.reactivex.r` @kind object;
  #L27ce50.  call `subscribe`(v0, v2) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27ce56.  return @kind void;
}
procedure `void` `w`(`io.reactivex.internal.operators.observable.ObservableReplay` v4 @kind this, `io.reactivex.d0.g` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.w:(Lio/reactivex/d0/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27cd5c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27cd60.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27cd66.  v0:= temp @kind object;
  #L27cd68.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver`) v0 @kind object;
  #L27cd6c.  if v0 == 0 then goto L27cd7c;
  #L27cd70.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.isDisposed:()Z` @kind virtual;
  #L27cd76.  v1:= temp;
  #L27cd78.  if v1 == 0 then goto L27cda6;
  #L27cd7c.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.e` @type ^`io.reactivex.internal.operators.observable.i3` @kind object;
  #L27cd80.  call temp:= `call`(v1) @signature `Lio/reactivex/internal/operators/observable/i3;.call:()Lio/reactivex/internal/operators/observable/ObservableReplay$a;` @kind interface;
  #L27cd86.  v1:= temp @kind object;
  #L27cd88.  v2:= new `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver`;
  #L27cd8c.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$a;)V` @kind direct;
  #L27cd92.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27cd96.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27cd9c.  v0:= temp;
  #L27cd9e.  if v0 != 0 then goto L27cda4;
  #L27cda2.  goto L27cd5c;
  #L27cda4.  v0:= v2 @kind object;
  #L27cda6.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L27cdaa.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L27cdb0.  v1:= temp;
  #L27cdb2.  v2:= 1I;
  #L27cdb4.  v3:= 0I;
  #L27cdb6.  if v1 != 0 then goto L27cdce;
  #L27cdba.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L27cdbe.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L27cdc4.  v1:= temp;
  #L27cdc6.  if v1 == 0 then goto L27cdce;
  #L27cdca.  v1:= 1I;
  #L27cdcc.  goto L27cdd0;
  #L27cdce.  v1:= 0I;
  #L27cdd0.  call `accept`(v5, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L27cdd6.  if v1 == 0 then goto L27cde4;
  #L27cdda.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.c` @type ^`io.reactivex.r` @kind object;
  #L27cdde.  call `subscribe`(v5, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27cde4.  return @kind void;
  #L27cde6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27cde8.  if v1 == 0 then goto L27cdf6;
  #L27cdec.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L27cdf0.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L27cdf6.  call `b`(v5) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L27cdfc.  call temp:= `e`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L27ce02.  v5:= temp @kind object;
  #L27ce04.  goto L27ce08;
  #L27ce06.  throw v5;
  #L27ce08.  goto L27ce06;
  catch `java.lang.Throwable` @[L27cdd0..L27cdd6] goto L27cde6;
}
