record `io.reactivex.internal.operators.observable.j3` @kind class @AccessFlag FINAL extends `io.reactivex.d0.g` @kind interface {
  `io.reactivex.internal.operators.observable.ObserverResourceWrapper` `io.reactivex.internal.operators.observable.j3.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.j3` v0 @kind this, `io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/j3;.<init>:(Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27c1d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27c1d6.  v0.`io.reactivex.internal.operators.observable.j3.b` @type ^`io.reactivex.internal.operators.observable.ObserverResourceWrapper` := v1 @kind object;
  #L27c1da.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.j3` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/j3;.a:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27c1ec.  v0:= v1.`io.reactivex.internal.operators.observable.j3.b` @type ^`io.reactivex.internal.operators.observable.ObserverResourceWrapper` @kind object;
  #L27c1f0.  call `setResource`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.setResource:(Lio/reactivex/disposables/b;)V` @kind virtual;
  #L27c1f6.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.j3` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/j3;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L27c208.  v1:= (`io.reactivex.disposables.b`) v1 @kind object;
  #L27c20c.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/j3;.a:(Lio/reactivex/disposables/b;)V` @kind virtual;
  #L27c212.  return @kind void;
}
