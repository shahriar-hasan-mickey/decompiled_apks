record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.sampler` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this, `io.reactivex.t` v2 @kind object, `io.reactivex.r` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L27d9a8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27d9ae.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27d9b2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27d9b8.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L27d9bc.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.t` := v2 @kind object;
  #L27d9c0.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.sampler` @type ^`io.reactivex.r` := v3 @kind object;
  #L27d9c4.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d9d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27d9dc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27d9e2.  call `completeOther`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.completeOther:()V` @kind virtual;
  #L27d9e8.  return @kind void;
}
procedure `void` `completeMain`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.completeMain:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `completeOther`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.completeOther:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d9fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27da00.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27da06.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27da0a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27da10.  return @kind void;
}
procedure `void` `emit`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27da24.  v0:= 0I;
  #L27da26.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27da2c.  v0:= temp @kind object;
  #L27da2e.  if v0 == 0 then goto L27da3c;
  #L27da32.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27da36.  call `onNext`(v1, v0) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27da3c.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27da50.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27da54.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27da5a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27da5e.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27da64.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27d95c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27d960.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27d966.  v0:= temp @kind object;
  #L27d968.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L27d96c.  if v0 != v1 then goto L27d974;
  #L27d970.  v0:= 1I;
  #L27d972.  goto L27d976;
  #L27d974.  v0:= 0I;
  #L27d976.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27da78.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27da7c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27da82.  call `completeMain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.completeMain:()V` @kind virtual;
  #L27da88.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27da9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27daa0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27daa6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27daaa.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27dab0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L27dac4.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L27daca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27dadc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27dae0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27dae6.  v0:= temp;
  #L27dae8.  if v0 == 0 then goto L27db1e;
  #L27daec.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L27daf0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27daf4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27dafa.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27dafe.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27db04.  v2:= temp @kind object;
  #L27db06.  if v2 != 0 then goto L27db1e;
  #L27db0a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.sampler` @type ^`io.reactivex.r` @kind object;
  #L27db0e.  v0:= new `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a`;
  #L27db12.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;)V` @kind direct;
  #L27db18.  call `subscribe`(v2, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27db1e.  return @kind void;
}
procedure `void` `run`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.run:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `setOther`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$SampleMainObserver;.setOther:(Lio/reactivex/disposables/b;)Z` @AccessFlag  {
    temp;
    v0;

  #L27d988.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27d98c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27d992.  v2:= temp;
  #L27d994.  return v2;
}
