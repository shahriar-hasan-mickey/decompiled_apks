record `io.reactivex.internal.operators.observable.s` @kind class @AccessFlag FINAL extends `io.reactivex.observers.b` @kind class {
  `io.reactivex.internal.operators.observable.t` `io.reactivex.internal.operators.observable.s.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.s.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.s` v0 @kind this, `io.reactivex.internal.operators.observable.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/s;.<init>:(Lio/reactivex/internal/operators/observable/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26e7e0.  call `<init>`(v0) @signature `Lio/reactivex/observers/b;.<init>:()V` @kind direct;
  #L26e7e6.  v0.`io.reactivex.internal.operators.observable.s.c` @type ^`io.reactivex.internal.operators.observable.t` := v1 @kind object;
  #L26e7ea.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.s` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/s;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26e7fc.  v0:= v1.`io.reactivex.internal.operators.observable.s.d` @type ^`boolean` @kind boolean;
  #L26e800.  if v0 == 0 then goto L26e806;
  #L26e804.  return @kind void;
  #L26e806.  v0:= 1I;
  #L26e808.  v1.`io.reactivex.internal.operators.observable.s.d` @type ^`boolean` := v0 @kind boolean;
  #L26e80c.  v0:= v1.`io.reactivex.internal.operators.observable.s.c` @type ^`io.reactivex.internal.operators.observable.t` @kind object;
  #L26e810.  call `k`(v0) @signature `Lio/reactivex/internal/operators/observable/t;.k:()V` @kind virtual;
  #L26e816.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.s` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/s;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26e828.  v0:= v1.`io.reactivex.internal.operators.observable.s.d` @type ^`boolean` @kind boolean;
  #L26e82c.  if v0 == 0 then goto L26e838;
  #L26e830.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26e836.  return @kind void;
  #L26e838.  v0:= 1I;
  #L26e83a.  v1.`io.reactivex.internal.operators.observable.s.d` @type ^`boolean` := v0 @kind boolean;
  #L26e83e.  v0:= v1.`io.reactivex.internal.operators.observable.s.c` @type ^`io.reactivex.internal.operators.observable.t` @kind object;
  #L26e842.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/t;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L26e848.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.s` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/s;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L26e85c.  v1:= v0.`io.reactivex.internal.operators.observable.s.d` @type ^`boolean` @kind boolean;
  #L26e860.  if v1 == 0 then goto L26e866;
  #L26e864.  return @kind void;
  #L26e866.  v1:= 1I;
  #L26e868.  v0.`io.reactivex.internal.operators.observable.s.d` @type ^`boolean` := v1 @kind boolean;
  #L26e86c.  call `dispose`(v0) @signature `Lio/reactivex/observers/b;.dispose:()V` @kind virtual;
  #L26e872.  v1:= v0.`io.reactivex.internal.operators.observable.s.c` @type ^`io.reactivex.internal.operators.observable.t` @kind object;
  #L26e876.  call `k`(v1) @signature `Lio/reactivex/internal/operators/observable/t;.k:()V` @kind virtual;
  #L26e87c.  return @kind void;
}
