record `io.reactivex.internal.operators.observable.k0` @kind class @AccessFlag FINAL extends `io.reactivex.observers.b` @kind class {
  `io.reactivex.internal.operators.observable.l0` `io.reactivex.internal.operators.observable.k0.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.k0.d` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.k0.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.k0.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.k0.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.k0` v1 @kind this, `io.reactivex.internal.operators.observable.l0` v2 @kind object, `long` v3 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/k0;.<init>:(Lio/reactivex/internal/operators/observable/l0;JLjava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2724a8.  call `<init>`(v1) @signature `Lio/reactivex/observers/b;.<init>:()V` @kind direct;
  #L2724ae.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L2724b2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L2724b8.  v1.`io.reactivex.internal.operators.observable.k0.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L2724bc.  v1.`io.reactivex.internal.operators.observable.k0.c` @type ^`io.reactivex.internal.operators.observable.l0` := v2 @kind object;
  #L2724c0.  v1.`io.reactivex.internal.operators.observable.k0.d` @type ^`long` := v3 @kind wide;
  #L2724c4.  v1.`io.reactivex.internal.operators.observable.k0.e` @type ^`java.lang.Object` := v5 @kind object;
  #L2724c8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.k0` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/k0;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2724dc.  v0:= v4.`io.reactivex.internal.operators.observable.k0.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L2724e0.  v1:= 0I;
  #L2724e2.  v2:= 1I;
  #L2724e4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L2724ea.  v0:= temp;
  #L2724ec.  if v0 == 0 then goto L272502;
  #L2724f0.  v0:= v4.`io.reactivex.internal.operators.observable.k0.c` @type ^`io.reactivex.internal.operators.observable.l0` @kind object;
  #L2724f4.  v1:= v4.`io.reactivex.internal.operators.observable.k0.d` @type ^`long` @kind wide;
  #L2724f8.  v3:= v4.`io.reactivex.internal.operators.observable.k0.e` @type ^`java.lang.Object` @kind object;
  #L2724fc.  call `a`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/l0;.a:(JLjava/lang/Object;)V` @kind virtual;
  #L272502.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.k0` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/k0;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272514.  v0:= v1.`io.reactivex.internal.operators.observable.k0.f` @type ^`boolean` @kind boolean;
  #L272518.  if v0 == 0 then goto L27251e;
  #L27251c.  return @kind void;
  #L27251e.  v0:= 1I;
  #L272520.  v1.`io.reactivex.internal.operators.observable.k0.f` @type ^`boolean` := v0 @kind boolean;
  #L272524.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/k0;.b:()V` @kind virtual;
  #L27252a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.k0` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/k0;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27253c.  v0:= v1.`io.reactivex.internal.operators.observable.k0.f` @type ^`boolean` @kind boolean;
  #L272540.  if v0 == 0 then goto L27254c;
  #L272544.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L27254a.  return @kind void;
  #L27254c.  v0:= 1I;
  #L27254e.  v1.`io.reactivex.internal.operators.observable.k0.f` @type ^`boolean` := v0 @kind boolean;
  #L272552.  v0:= v1.`io.reactivex.internal.operators.observable.k0.c` @type ^`io.reactivex.internal.operators.observable.l0` @kind object;
  #L272556.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/l0;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L27255c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.k0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/k0;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L272570.  v1:= v0.`io.reactivex.internal.operators.observable.k0.f` @type ^`boolean` @kind boolean;
  #L272574.  if v1 == 0 then goto L27257a;
  #L272578.  return @kind void;
  #L27257a.  v1:= 1I;
  #L27257c.  v0.`io.reactivex.internal.operators.observable.k0.f` @type ^`boolean` := v1 @kind boolean;
  #L272580.  call `dispose`(v0) @signature `Lio/reactivex/observers/b;.dispose:()V` @kind virtual;
  #L272586.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/k0;.b:()V` @kind virtual;
  #L27258c.  return @kind void;
}
