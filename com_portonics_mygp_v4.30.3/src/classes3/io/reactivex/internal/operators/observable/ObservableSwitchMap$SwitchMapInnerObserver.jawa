record `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @AccessFlag FINAL;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27f9c0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27f9c6.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` := v1 @kind object;
  #L27f9ca.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.index` @type ^`long` := v2 @kind wide;
  #L27f9ce.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.bufferSize` @type ^`int` := v4;
  #L27f9d2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L27f9e4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27f9ea.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27f9fc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.index` @type ^`long` @kind wide;
  #L27fa00.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L27fa04.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @type ^`long` @kind wide;
  #L27fa08.  v4:= lcmp(v0, v2);
  #L27fa0c.  if v4 != 0 then goto L27fa20;
  #L27fa10.  v0:= 1I;
  #L27fa12.  v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L27fa16.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L27fa1a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L27fa20.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27fa34.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L27fa38.  call `innerError`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.innerError:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;Ljava/lang/Throwable;)V` @kind virtual;
  #L27fa3e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27fa50.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.index` @type ^`long` @kind wide;
  #L27fa54.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L27fa58.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.unique` @type ^`long` @kind wide;
  #L27fa5c.  v4:= lcmp(v0, v2);
  #L27fa60.  if v4 != 0 then goto L27fa7c;
  #L27fa64.  if v6 == 0 then goto L27fa72;
  #L27fa68.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L27fa6c.  call temp:= `offer`(v0, v6) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L27fa72.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L27fa76.  call `drain`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L27fa7c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver` v2 @kind this, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapInnerObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27fa90.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27fa96.  v0:= temp;
  #L27fa98.  if v0 == 0 then goto L27faea;
  #L27fa9c.  v0:= instanceof @variable v3 @type ^`io.reactivex.e0.a.e` @kind boolean;
  #L27faa0.  if v0 == 0 then goto L27fad8;
  #L27faa4.  v3:= (`io.reactivex.e0.a.e`) v3 @kind object;
  #L27faa8.  v0:= 7I;
  #L27faaa.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L27fab0.  v0:= temp;
  #L27fab2.  v1:= 1I;
  #L27fab4.  if v0 != v1 then goto L27facc;
  #L27fab8.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L27fabc.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L27fac0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver` @kind object;
  #L27fac4.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$SwitchMapObserver;.drain:()V` @kind virtual;
  #L27faca.  return @kind void;
  #L27facc.  v1:= 2I;
  #L27face.  if v0 != v1 then goto L27fad8;
  #L27fad2.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L27fad6.  return @kind void;
  #L27fad8.  v3:= new `io.reactivex.internal.queue.a`;
  #L27fadc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.bufferSize` @type ^`int`;
  #L27fae0.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L27fae6.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver.queue` @type ^`io.reactivex.e0.a.j` := v3 @kind object;
  #L27faea.  return @kind void;
}
