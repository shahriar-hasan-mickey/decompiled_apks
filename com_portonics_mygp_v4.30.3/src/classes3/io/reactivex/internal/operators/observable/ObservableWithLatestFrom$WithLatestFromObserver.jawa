record `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.d0.c` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.combiner` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this, `io.reactivex.t` v2 @kind object, `io.reactivex.d0.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L284ce0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L284ce6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L284cea.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L284cf0.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L284cf4.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L284cf8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L284cfe.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L284d02.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` := v2 @kind object;
  #L284d06.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.combiner` @type ^`io.reactivex.d0.c` := v3 @kind object;
  #L284d0a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L284d1c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L284d20.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L284d26.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L284d2a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L284d30.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L284c94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L284c98.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L284c9e.  v0:= temp @kind object;
  #L284ca0.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L284ca4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L284caa.  v0:= temp;
  #L284cac.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L284d44.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L284d48.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L284d4e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L284d52.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L284d58.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L284d6c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L284d70.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L284d76.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L284d7a.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L284d80.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L284d94.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L284d9a.  v0:= temp @kind object;
  #L284d9c.  if v0 == 0 then goto L284ddc;
  #L284da0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.combiner` @type ^`io.reactivex.d0.c` @kind object;
  #L284da4.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L284daa.  v3:= temp @kind object;
  #L284dac.  v0:= "The combiner returned a null value" @kind object;
  #L284db0.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L284db6.  v3:= temp @kind object;
  #L284db8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L284dbc.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L284dc2.  goto L284ddc;
  #L284dc4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L284dc6.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L284dcc.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.dispose:()V` @kind virtual;
  #L284dd2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L284dd6.  call `onError`(v0, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L284ddc.  return @kind void;
  catch `java.lang.Throwable` @[L284da0..L284db8] goto L284dc4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L284dfc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L284e00.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L284e06.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L284e18.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L284e1c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L284e22.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L284e26.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L284e2c.  return @kind void;
}
procedure `boolean` `setOther`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$WithLatestFromObserver;.setOther:(Lio/reactivex/disposables/b;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L284cc0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L284cc4.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L284cca.  v2:= temp;
  #L284ccc.  return v2;
}
