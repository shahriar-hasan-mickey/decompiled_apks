record `io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.limit` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.x` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27c8bc.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.<init>:()V` @kind direct;
  #L27c8c2.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` := v5 @kind object;
  #L27c8c6.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.limit` @type ^`int` := v1;
  #L27c8ca.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` := v2 @kind wide;
  #L27c8ce.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L27c8d2.  return @kind void;
}
procedure `java.lang.Object` `enterTransform`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27c86c.  v0:= new `io.reactivex.h0.j`;
  #L27c870.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L27c874.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27c878.  call temp:= `b`(v1, v2) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L27c87e.  v1:= temp @kind wide;
  #L27c880.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27c884.  call `<init>`(v0, v5, v1, v3) @signature `Lio/reactivex/h0/j;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L27c88a.  return v0 @kind object;
}
procedure `io.reactivex.internal.operators.observable.ObservableReplay$Node` `getHead`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/internal/operators/observable/ObservableReplay$Node;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L27c7d0.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L27c7d4.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27c7d8.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L27c7de.  v0:= temp @kind wide;
  #L27c7e0.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L27c7e4.  v0:= v0 - v2 @kind long;
  #L27c7e6.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c7ec.  v2:= temp @kind object;
  #L27c7ee.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v2 @kind object;
  #L27c7f2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c7f8.  v3:= temp @kind object;
  #L27c7fa.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L27c7fe.  v7:= v3 @kind object;
  #L27c800.  v3:= v2 @kind object;
  #L27c802.  v2:= v7 @kind object;
  #L27c804.  if v2 != 0 then goto L27c80a;
  #L27c808.  goto L27c85a;
  #L27c80a.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L27c80e.  v4:= (`io.reactivex.h0.j`) v4 @kind object;
  #L27c812.  call temp:= `b`(v4) @signature `Lio/reactivex/h0/j;.b:()Ljava/lang/Object;` @kind virtual;
  #L27c818.  v5:= temp @kind object;
  #L27c81a.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L27c820.  v5:= temp;
  #L27c822.  if v5 != 0 then goto L27c85a;
  #L27c826.  call temp:= `b`(v4) @signature `Lio/reactivex/h0/j;.b:()Ljava/lang/Object;` @kind virtual;
  #L27c82c.  v5:= temp @kind object;
  #L27c82e.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L27c834.  v5:= temp;
  #L27c836.  if v5 == 0 then goto L27c83c;
  #L27c83a.  goto L27c85a;
  #L27c83c.  call temp:= `a`(v4) @signature `Lio/reactivex/h0/j;.a:()J` @kind virtual;
  #L27c842.  v4:= temp @kind wide;
  #L27c844.  v6:= lcmp(v4, v0);
  #L27c848.  if v6 > 0 then goto L27c85a;
  #L27c84c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c852.  v3:= temp @kind object;
  #L27c854.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L27c858.  goto L27c7fe;
  #L27c85a.  return v3 @kind object;
}
procedure `java.lang.Object` `leaveTransform`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L27c89c.  v1:= (`io.reactivex.h0.j`) v1 @kind object;
  #L27c8a0.  call temp:= `b`(v1) @signature `Lio/reactivex/h0/j;.b:()Ljava/lang/Object;` @kind virtual;
  #L27c8a6.  v1:= temp @kind object;
  #L27c8a8.  return v1 @kind object;
}
procedure `void` `truncate`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.truncate:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L27c8e4.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L27c8e8.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27c8ec.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L27c8f2.  v0:= temp @kind wide;
  #L27c8f4.  v2:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L27c8f8.  v0:= v0 - v2 @kind long;
  #L27c8fa.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c900.  v2:= temp @kind object;
  #L27c902.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v2 @kind object;
  #L27c906.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c90c.  v3:= temp @kind object;
  #L27c90e.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L27c912.  v4:= 0I;
  #L27c914.  v8:= v3 @kind object;
  #L27c916.  v3:= v2 @kind object;
  #L27c918.  v2:= v8 @kind object;
  #L27c91a.  if v2 == 0 then goto L27c97a;
  #L27c91e.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L27c922.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.limit` @type ^`int`;
  #L27c926.  if v5 <= v6 then goto L27c944;
  #L27c92a.  v4:= v4 + 1;
  #L27c92e.  v5:= v5 + -1;
  #L27c932.  v9.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int` := v5;
  #L27c936.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c93c.  v3:= temp @kind object;
  #L27c93e.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L27c942.  goto L27c914;
  #L27c944.  v5:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L27c948.  v5:= (`io.reactivex.h0.j`) v5 @kind object;
  #L27c94c.  call temp:= `a`(v5) @signature `Lio/reactivex/h0/j;.a:()J` @kind virtual;
  #L27c952.  v5:= temp @kind wide;
  #L27c954.  v7:= lcmp(v5, v0);
  #L27c958.  if v7 > 0 then goto L27c97a;
  #L27c95c.  v4:= v4 + 1;
  #L27c960.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L27c964.  v3:= v3 + -1;
  #L27c968.  v9.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int` := v3;
  #L27c96c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c972.  v3:= temp @kind object;
  #L27c974.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L27c978.  goto L27c914;
  #L27c97a.  if v4 == 0 then goto L27c984;
  #L27c97e.  call `setFirst`(v9, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L27c984.  return @kind void;
}
procedure `void` `truncateFinal`(`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$SizeAndTimeBoundReplayBuffer;.truncateFinal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L27c998.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L27c99c.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27c9a0.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L27c9a6.  v0:= temp @kind wide;
  #L27c9a8.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L27c9ac.  v0:= v0 - v2 @kind long;
  #L27c9ae.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c9b4.  v2:= temp @kind object;
  #L27c9b6.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v2 @kind object;
  #L27c9ba.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c9c0.  v3:= temp @kind object;
  #L27c9c2.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L27c9c6.  v4:= 0I;
  #L27c9c8.  v9:= v3 @kind object;
  #L27c9ca.  v3:= v2 @kind object;
  #L27c9cc.  v2:= v9 @kind object;
  #L27c9ce.  if v2 == 0 then goto L27ca10;
  #L27c9d2.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L27c9d6.  v6:= 1I;
  #L27c9d8.  if v5 <= v6 then goto L27ca10;
  #L27c9dc.  v5:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L27c9e0.  v5:= (`io.reactivex.h0.j`) v5 @kind object;
  #L27c9e4.  call temp:= `a`(v5) @signature `Lio/reactivex/h0/j;.a:()J` @kind virtual;
  #L27c9ea.  v7:= temp @kind wide;
  #L27c9ec.  v5:= lcmp(v7, v0);
  #L27c9f0.  if v5 > 0 then goto L27ca10;
  #L27c9f4.  v4:= v4 + 1;
  #L27c9f8.  v3:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L27c9fc.  v3:= v3 - v6 @kind int;
  #L27c9fe.  v10.`io.reactivex.internal.operators.observable.ObservableReplay$BoundedReplayBuffer.size` @type ^`int` := v3;
  #L27ca02.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27ca08.  v3:= temp @kind object;
  #L27ca0a.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$Node`) v3 @kind object;
  #L27ca0e.  goto L27c9c8;
  #L27ca10.  if v4 == 0 then goto L27ca1a;
  #L27ca14.  call `setFirst`(v10, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/observable/ObservableReplay$Node;)V` @kind virtual;
  #L27ca1a.  return @kind void;
}
