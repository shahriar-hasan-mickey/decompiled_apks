record `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.delayErrors` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.mapper` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L275bf4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L275bfa.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L275bfe.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L275c02.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L275c06.  v1:= new `io.reactivex.disposables.a`;
  #L275c0a.  call `<init>`(v1) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L275c10.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.a` := v1 @kind object;
  #L275c14.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L275c18.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L275c1e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L275c22.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L275c26.  v2:= 1I;
  #L275c28.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L275c2e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L275c32.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L275c36.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L275c3c.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L275c40.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L275c54.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L275c58.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L275c5e.  v0:= temp @kind object;
  #L275c60.  v0:= (`io.reactivex.internal.queue.a`) v0 @kind object;
  #L275c64.  if v0 == 0 then goto L275c6e;
  #L275c68.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L275c6e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L275c80.  v0:= 1I;
  #L275c82.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L275c86.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L275c8a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L275c90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L275c94.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L275c9a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L275cac.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L275cb2.  v0:= temp;
  #L275cb4.  if v0 != 0 then goto L275cbe;
  #L275cb8.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drainLoop:()V` @kind virtual;
  #L275cbe.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L275cd0.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L275cd4.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275cd8.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L275cdc.  v3:= 1I;
  #L275cde.  v4:= 1I;
  #L275ce0.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.cancelled` @type ^`boolean` @kind boolean;
  #L275ce4.  if v5 == 0 then goto L275cf0;
  #L275ce8.  call `clear`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.clear:()V` @kind virtual;
  #L275cee.  return @kind void;
  #L275cf0.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L275cf4.  if v5 != 0 then goto L275d26;
  #L275cf8.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L275cfc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L275d02.  v5:= temp @kind object;
  #L275d04.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L275d08.  if v5 == 0 then goto L275d26;
  #L275d0c.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L275d10.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L275d16.  v1:= temp @kind object;
  #L275d18.  call `clear`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.clear:()V` @kind virtual;
  #L275d1e.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L275d24.  return @kind void;
  #L275d26.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L275d2c.  v5:= temp;
  #L275d2e.  v6:= 0I;
  #L275d30.  if v5 != 0 then goto L275d38;
  #L275d34.  v5:= 1I;
  #L275d36.  goto L275d3a;
  #L275d38.  v5:= 0I;
  #L275d3a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L275d40.  v7:= temp @kind object;
  #L275d42.  v7:= (`io.reactivex.internal.queue.a`) v7 @kind object;
  #L275d46.  if v7 == 0 then goto L275d54;
  #L275d4a.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L275d50.  v7:= temp @kind object;
  #L275d52.  goto L275d56;
  #L275d54.  v7:= 0I;
  #L275d56.  if v7 != 0 then goto L275d5c;
  #L275d5a.  v6:= 1I;
  #L275d5c.  if v5 == 0 then goto L275d84;
  #L275d60.  if v6 == 0 then goto L275d84;
  #L275d64.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L275d68.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L275d6e.  v1:= temp @kind object;
  #L275d70.  if v1 == 0 then goto L275d7c;
  #L275d74.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L275d7a.  goto L275d82;
  #L275d7c.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L275d82.  return @kind void;
  #L275d84.  if v6 == 0 then goto L275d98;
  #L275d88.  v4:= -v4 @kind int;
  #L275d8a.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L275d90.  v4:= temp;
  #L275d92.  if v4 != 0 then goto L275ce0;
  #L275d96.  return @kind void;
  #L275d98.  call `onNext`(v0, v7) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L275d9e.  goto L275ce0;
}
procedure `io.reactivex.internal.queue.a` `getOrCreateQueue`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.getOrCreateQueue:()Lio/reactivex/internal/queue/a;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L275ba8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L275bac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L275bb2.  v0:= temp @kind object;
  #L275bb4.  v0:= (`io.reactivex.internal.queue.a`) v0 @kind object;
  #L275bb8.  if v0 == 0 then goto L275bbe;
  #L275bbc.  return v0 @kind object;
  #L275bbe.  v0:= new `io.reactivex.internal.queue.a`;
  #L275bc2.  call temp:= `c`() @signature `Lio/reactivex/n;.c:()I` @kind static;
  #L275bc8.  v1:= temp;
  #L275bca.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L275bd0.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L275bd4.  v2:= 0I;
  #L275bd6.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L275bdc.  v1:= temp;
  #L275bde.  if v1 == 0 then goto L275ba8;
  #L275be2.  return v0 @kind object;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.innerError:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L275db0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L275db4.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L275dba.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L275dbe.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L275dc4.  v2:= temp;
  #L275dc6.  if v2 == 0 then goto L275df8;
  #L275dca.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L275dce.  if v2 != 0 then goto L275de6;
  #L275dd2.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L275dd6.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L275ddc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L275de0.  call `dispose`(v2) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L275de6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275dea.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L275df0.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drain:()V` @kind virtual;
  #L275df6.  goto L275dfe;
  #L275df8.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L275dfe.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.innerSuccess:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L275e10.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L275e14.  call temp:= `c`(v0, v3) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L275e1a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L275e20.  v3:= temp;
  #L275e22.  if v3 != 0 then goto L275eac;
  #L275e26.  v3:= 0I;
  #L275e28.  v0:= 1I;
  #L275e2a.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L275e30.  v1:= temp;
  #L275e32.  if v1 == 0 then goto L275eac;
  #L275e36.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L275e3a.  call `onNext`(v1, v4) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L275e40.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275e44.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L275e4a.  v4:= temp;
  #L275e4c.  if v4 != 0 then goto L275e52;
  #L275e50.  v3:= 1I;
  #L275e52.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L275e56.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L275e5c.  v4:= temp @kind object;
  #L275e5e.  v4:= (`io.reactivex.internal.queue.a`) v4 @kind object;
  #L275e62.  if v3 == 0 then goto L275e9e;
  #L275e66.  if v4 == 0 then goto L275e76;
  #L275e6a.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L275e70.  v3:= temp;
  #L275e72.  if v3 == 0 then goto L275e9e;
  #L275e76.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L275e7a.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L275e80.  v3:= temp @kind object;
  #L275e82.  if v3 == 0 then goto L275e92;
  #L275e86.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L275e8a.  call `onError`(v4, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L275e90.  goto L275e9c;
  #L275e92.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L275e96.  call `onComplete`(v3) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L275e9c.  return @kind void;
  #L275e9e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L275ea4.  v3:= temp;
  #L275ea6.  if v3 != 0 then goto L275ed6;
  #L275eaa.  return @kind void;
  #L275eac.  call temp:= `getOrCreateQueue`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.getOrCreateQueue:()Lio/reactivex/internal/queue/a;` @kind virtual;
  #L275eb2.  v3:= temp @kind object;
  #L275eb4.  @monitorenter v3
  #L275eb6.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L275ebc.  @monitorexit v3
  #L275ebe.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275ec2.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L275ec8.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L275ece.  v3:= temp;
  #L275ed0.  if v3 == 0 then goto L275ed6;
  #L275ed4.  return @kind void;
  #L275ed6.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drainLoop:()V` @kind virtual;
  #L275edc.  return @kind void;
  #L275ede.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L275ee0.  @monitorexit v3
  #L275ee2.  throw v4;
  catch `java.lang.Throwable` @[L275eb6..L275ebe] goto L275ede;
  catch `java.lang.Throwable` @[L275ee0..L275ee2] goto L275ede;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L275b90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.cancelled` @type ^`boolean` @kind boolean;
  #L275b94.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L275f08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275f0c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L275f12.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drain:()V` @kind virtual;
  #L275f18.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L275f2c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275f30.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L275f36.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L275f3a.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L275f40.  v0:= temp;
  #L275f42.  if v0 == 0 then goto L275f60;
  #L275f46.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L275f4a.  if v2 != 0 then goto L275f58;
  #L275f4e.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L275f52.  call `dispose`(v2) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L275f58.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.drain:()V` @kind virtual;
  #L275f5e.  goto L275f66;
  #L275f60.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L275f66.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L275f78.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L275f7c.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L275f82.  v3:= temp @kind object;
  #L275f84.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L275f88.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L275f8e.  v3:= temp @kind object;
  #L275f90.  v3:= (`io.reactivex.a0`) v3 @kind object;
  #L275f94.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275f98.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L275f9e.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver`;
  #L275fa2.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver$InnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;)V` @kind direct;
  #L275fa8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.cancelled` @type ^`boolean` @kind boolean;
  #L275fac.  if v1 != 0 then goto L275fc6;
  #L275fb0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L275fb4.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L275fba.  v1:= temp;
  #L275fbc.  if v1 == 0 then goto L275fc6;
  #L275fc0.  call `b`(v3, v0) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L275fc6.  return @kind void;
  #L275fc8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L275fca.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L275fd0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L275fd4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L275fda.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L275fe0.  return @kind void;
  catch `java.lang.Throwable` @[L275f78..L275f94] goto L275fc8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$FlatMapSingleObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L276000.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L276004.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27600a.  v0:= temp;
  #L27600c.  if v0 == 0 then goto L27601e;
  #L276010.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L276014.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L276018.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27601e.  return @kind void;
}
