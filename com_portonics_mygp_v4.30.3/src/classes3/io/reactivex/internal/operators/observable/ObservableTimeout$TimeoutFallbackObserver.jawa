record `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `io.reactivex.internal.operators.observable.ObservableTimeout$a` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.fallback` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.index` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.itemTimeoutIndicator` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.task` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `io.reactivex.r` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutFallbackObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2814dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2814e2.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L2814e6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.itemTimeoutIndicator` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L2814ea.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L2814ee.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L2814f4.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L2814f8.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.fallback` @type ^`io.reactivex.r` := v3 @kind object;
  #L2814fc.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L281500.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L281506.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L28150a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28150e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L281514.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L281518.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutFallbackObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28152c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281530.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L281536.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28153c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281540.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L281546.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutFallbackObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2814b4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2814ba.  v0:= temp @kind object;
  #L2814bc.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2814c0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2814c6.  v0:= temp;
  #L2814c8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutFallbackObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L281558.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28155c.  v1:= 9223372036854775807L;
  #L281566.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L28156c.  v3:= temp @kind wide;
  #L28156e.  v0:= lcmp(v3, v1);
  #L281572.  if v0 == 0 then goto L281594;
  #L281576.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28157a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L281580.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281584.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L28158a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28158e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L281594.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutFallbackObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2815a8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2815ac.  v1:= 9223372036854775807L;
  #L2815b6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L2815bc.  v3:= temp @kind wide;
  #L2815be.  v0:= lcmp(v3, v1);
  #L2815c2.  if v0 == 0 then goto L2815e6;
  #L2815c6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L2815ca.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L2815d0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2815d4.  call `onError`(v0, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2815da.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L2815de.  call `dispose`(v6) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L2815e4.  goto L2815ec;
  #L2815e6.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2815ec.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutFallbackObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L281600.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L281604.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28160a.  v0:= temp @kind wide;
  #L28160c.  v2:= 9223372036854775807L;
  #L281616.  v4:= lcmp(v0, v2);
  #L28161a.  if v4 == 0 then goto L2816ca;
  #L28161e.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L281622.  v5:= 1L;
  #L281626.  v5:= v5 + v0 @kind long;
  #L281628.  call temp:= `compareAndSet`(v4, v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L28162e.  v0:= temp;
  #L281630.  if v0 != 0 then goto L281636;
  #L281634.  goto L2816ca;
  #L281636.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28163a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L281640.  v0:= temp @kind object;
  #L281642.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L281646.  if v0 == 0 then goto L281650;
  #L28164a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281650.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281654.  call `onNext`(v0, v8) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L28165a.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.itemTimeoutIndicator` @type ^`io.reactivex.d0.k` @kind object;
  #L28165e.  call temp:= `apply`(v0, v8) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L281664.  v8:= temp @kind object;
  #L281666.  v0:= "The itemTimeoutIndicator returned a null ObservableSource." @kind object;
  #L28166a.  call temp:= `e`(v8, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L281670.  v8:= temp @kind object;
  #L281672.  v8:= (`io.reactivex.r`) v8 @kind object;
  #L281676.  v0:= new `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer`;
  #L28167a.  call `<init>`(v0, v5, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeout$a;)V` @kind direct;
  #L281680.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281684.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L28168a.  v1:= temp;
  #L28168c.  if v1 == 0 then goto L281696;
  #L281690.  call `subscribe`(v8, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L281696.  return @kind void;
  #L281698.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28169a.  call `b`(v8) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2816a0.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2816a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2816aa.  v0:= temp @kind object;
  #L2816ac.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2816b0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2816b6.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2816ba.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L2816c0.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2816c4.  call `onError`(v0, v8) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2816ca.  return @kind void;
  catch `java.lang.Throwable` @[L28165a..L281676] goto L281698;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutFallbackObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2816e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2816ec.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2816f2.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutFallbackObserver;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L281704.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L281708.  v1:= 9223372036854775807L;
  #L281712.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L281718.  v4:= temp;
  #L28171a.  if v4 == 0 then goto L281746;
  #L28171e.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281722.  call temp:= `dispose`(v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L281728.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.fallback` @type ^`io.reactivex.r` @kind object;
  #L28172c.  v5:= 0I;
  #L28172e.  v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.fallback` @type ^`io.reactivex.r` := v5 @kind object;
  #L281732.  v5:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a`;
  #L281736.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L28173a.  call `<init>`(v5, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.<init>:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L281740.  call `subscribe`(v4, v5) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L281746.  return @kind void;
}
procedure `void` `onTimeoutError`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver` v3 @kind this, `long` v4 , `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutFallbackObserver;.onTimeoutError:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L281758.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28175c.  v1:= 9223372036854775807L;
  #L281766.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L28176c.  v4:= temp;
  #L28176e.  if v4 == 0 then goto L281784;
  #L281772.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L281778.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L28177c.  call `onError`(v4, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L281782.  goto L28178a;
  #L281784.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28178a.  return @kind void;
}
procedure `void` `startFirstTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver` v3 @kind this, `io.reactivex.r` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutFallbackObserver;.startFirstTimeout:(Lio/reactivex/r;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L28179c.  if v4 == 0 then goto L2817c4;
  #L2817a0.  v0:= new `io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutConsumer`;
  #L2817a4.  v1:= 0L;
  #L2817a8.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeout$a;)V` @kind direct;
  #L2817ae.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L2817b2.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2817b8.  v1:= temp;
  #L2817ba.  if v1 == 0 then goto L2817c4;
  #L2817be.  call `subscribe`(v4, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L2817c4.  return @kind void;
}
