record `io.reactivex.internal.operators.observable.p1` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.n` @kind class {
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.p1.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.p1` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/p1;.<init>:([Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L276498.  call `<init>`(v0) @signature `Lio/reactivex/n;.<init>:()V` @kind direct;
  #L27649e.  v0.`io.reactivex.internal.operators.observable.p1.b` @type ^`java.lang.Object`[] := v1 @kind object;
  #L2764a2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.p1` v2 @kind this, `io.reactivex.t` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/p1;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2764b4.  v0:= new `io.reactivex.internal.operators.observable.o1`;
  #L2764b8.  v1:= v2.`io.reactivex.internal.operators.observable.p1.b` @type ^`java.lang.Object`[] @kind object;
  #L2764bc.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/o1;.<init>:(Lio/reactivex/t;[Ljava/lang/Object;)V` @kind direct;
  #L2764c2.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2764c8.  v3:= v0.`io.reactivex.internal.operators.observable.o1.e` @type ^`boolean` @kind boolean;
  #L2764cc.  if v3 == 0 then goto L2764d2;
  #L2764d0.  return @kind void;
  #L2764d2.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/o1;.a:()V` @kind virtual;
  #L2764d8.  return @kind void;
}
