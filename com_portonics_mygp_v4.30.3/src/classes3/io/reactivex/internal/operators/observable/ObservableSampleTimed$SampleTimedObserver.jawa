record `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.period` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.timer` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.unit` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` v1 @kind this, `io.reactivex.t` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.x` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.<init>:(Lio/reactivex/t;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L27d628.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27d62e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27d632.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27d638.  v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L27d63c.  v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.downstream` @type ^`io.reactivex.t` := v2 @kind object;
  #L27d640.  v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.period` @type ^`long` := v3 @kind wide;
  #L27d644.  v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L27d648.  v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.scheduler` @type ^`io.reactivex.x` := v6 @kind object;
  #L27d64c.  return @kind void;
}
procedure `void` `cancelTimer`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.cancelTimer:()V` @AccessFlag  {
    temp;
    v0;

  #L27d660.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27d664.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27d66a.  return @kind void;
}
procedure `void` `complete`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.complete:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d67c.  call `cancelTimer`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.cancelTimer:()V` @kind virtual;
  #L27d682.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27d686.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L27d68c.  return @kind void;
}
procedure `void` `emit`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27d6a0.  v0:= 0I;
  #L27d6a2.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27d6a8.  v0:= temp @kind object;
  #L27d6aa.  if v0 == 0 then goto L27d6b8;
  #L27d6ae.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d6b2.  call `onNext`(v1, v0) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27d6b8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d608.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27d60c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L27d612.  v0:= temp;
  #L27d614.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L27d6cc.  call `cancelTimer`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.cancelTimer:()V` @kind virtual;
  #L27d6d2.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.complete:()V` @kind virtual;
  #L27d6d8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d6ec.  call `cancelTimer`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.cancelTimer:()V` @kind virtual;
  #L27d6f2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d6f6.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27d6fc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L27d710.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L27d716.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver` v7 @kind this, `io.reactivex.disposables.b` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$SampleTimedObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L27d728.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27d72c.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27d732.  v0:= temp;
  #L27d734.  if v0 == 0 then goto L27d768;
  #L27d738.  v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.upstream` @type ^`io.reactivex.disposables.b` := v8 @kind object;
  #L27d73c.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d740.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L27d746.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L27d74a.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.period` @type ^`long` @kind wide;
  #L27d74e.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27d752.  v1:= v7 @kind object;
  #L27d754.  v2:= v4 @kind wide;
  #L27d756.  call temp:= `e`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/x;.e:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L27d75c.  v8:= temp @kind object;
  #L27d75e.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver.timer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27d762.  call temp:= `replace`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27d768.  return @kind void;
}
