record `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.active` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.inner` @AccessFlag FINAL;
  `io.reactivex.subjects.b` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.signaller` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.source` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.subjects.b` v2 @kind object, `io.reactivex.r` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/subjects/b;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27d29c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27d2a2.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27d2a6.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.signaller` @type ^`io.reactivex.subjects.b` := v2 @kind object;
  #L27d2aa.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.source` @type ^`io.reactivex.r` := v3 @kind object;
  #L27d2ae.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L27d2b2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27d2b8.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L27d2bc.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L27d2c0.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L27d2c6.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L27d2ca.  v1:= new `io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver`;
  #L27d2ce.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;)V` @kind direct;
  #L27d2d4.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` := v1 @kind object;
  #L27d2d8.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27d2dc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27d2e2.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L27d2e6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d2f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27d2fc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27d302.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` @kind object;
  #L27d306.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27d30c.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27d320.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27d324.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27d32a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d32e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27d332.  call `a`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.a:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L27d338.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27d34c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27d350.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27d356.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d35a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27d35e.  call `c`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.c:(Lio/reactivex/t;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L27d364.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.innerNext:()V` @AccessFlag  {
    temp;

  #L27d378.  call `subscribeNext`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.subscribeNext:()V` @kind virtual;
  #L27d37e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d270.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27d274.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27d27a.  v0:= temp @kind object;
  #L27d27c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L27d280.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L27d286.  v0:= temp;
  #L27d288.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27d390.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver$InnerRepeatObserver` @kind object;
  #L27d394.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27d39a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d39e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27d3a2.  call `a`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.a:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L27d3a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27d3bc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27d3c0.  v1:= 0I;
  #L27d3c2.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27d3c8.  v0:= 0I;
  #L27d3ca.  v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L27d3ce.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.signaller` @type ^`io.reactivex.subjects.b` @kind object;
  #L27d3d2.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27d3d8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27d3ec.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27d3f0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27d3f4.  call `e`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.e:(Lio/reactivex/t;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L27d3fa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d40c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27d410.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27d416.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;

  #L27d428.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27d42c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27d432.  v0:= temp;
  #L27d434.  if v0 != 0 then goto L27d46e;
  #L27d438.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$RepeatWhenObserver;.isDisposed:()Z` @kind virtual;
  #L27d43e.  v0:= temp;
  #L27d440.  if v0 == 0 then goto L27d446;
  #L27d444.  return @kind void;
  #L27d446.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.active` @type ^`boolean` @kind boolean;
  #L27d44a.  if v0 != 0 then goto L27d45e;
  #L27d44e.  v0:= 1I;
  #L27d450.  v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L27d454.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.source` @type ^`io.reactivex.r` @kind object;
  #L27d458.  call `subscribe`(v0, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27d45e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27d462.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L27d468.  v0:= temp;
  #L27d46a.  if v0 != 0 then goto L27d438;
  #L27d46e.  return @kind void;
}
