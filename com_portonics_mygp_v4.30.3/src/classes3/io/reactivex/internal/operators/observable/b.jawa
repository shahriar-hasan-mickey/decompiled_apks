record `io.reactivex.internal.operators.observable.b` @kind class @AccessFlag FINAL extends `io.reactivex.observers.b` @kind class, `java.util.Iterator` @kind interface {
  `io.reactivex.l` `io.reactivex.internal.operators.observable.b.c` @AccessFlag ;
  `java.util.concurrent.Semaphore` `io.reactivex.internal.operators.observable.b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.b.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L26ca94.  call `<init>`(v2) @signature `Lio/reactivex/observers/b;.<init>:()V` @kind direct;
  #L26ca9a.  v0:= new `java.util.concurrent.Semaphore`;
  #L26ca9e.  v1:= 0I;
  #L26caa0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L26caa6.  v2.`io.reactivex.internal.operators.observable.b.d` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L26caaa.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L26caae.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26cab4.  v2.`io.reactivex.internal.operators.observable.b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L26cab8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.b` v1 @kind this, `io.reactivex.l` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/b;.b:(Lio/reactivex/l;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26caf8.  v0:= v1.`io.reactivex.internal.operators.observable.b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26cafc.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26cb02.  v2:= temp @kind object;
  #L26cb04.  if v2 != 0 then goto L26cb0c;
  #L26cb08.  v2:= 1I;
  #L26cb0a.  goto L26cb0e;
  #L26cb0c.  v2:= 0I;
  #L26cb0e.  if v2 == 0 then goto L26cb1c;
  #L26cb12.  v2:= v1.`io.reactivex.internal.operators.observable.b.d` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L26cb16.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L26cb1c.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/b;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26c990.  v0:= v2.`io.reactivex.internal.operators.observable.b.c` @type ^`io.reactivex.l` @kind object;
  #L26c994.  if v0 == 0 then goto L26c9bc;
  #L26c998.  call temp:= `g`(v0) @signature `Lio/reactivex/l;.g:()Z` @kind virtual;
  #L26c99e.  v0:= temp;
  #L26c9a0.  if v0 != 0 then goto L26c9a6;
  #L26c9a4.  goto L26c9bc;
  #L26c9a6.  v0:= v2.`io.reactivex.internal.operators.observable.b.c` @type ^`io.reactivex.l` @kind object;
  #L26c9aa.  call temp:= `d`(v0) @signature `Lio/reactivex/l;.d:()Ljava/lang/Throwable;` @kind virtual;
  #L26c9b0.  v0:= temp @kind object;
  #L26c9b2.  call temp:= `e`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L26c9b8.  v0:= temp @kind object;
  #L26c9ba.  throw v0;
  #L26c9bc.  v0:= v2.`io.reactivex.internal.operators.observable.b.c` @type ^`io.reactivex.l` @kind object;
  #L26c9c0.  if v0 != 0 then goto L26ca28;
  #L26c9c4.  call `b`() @signature `Lio/reactivex/internal/util/c;.b:()V` @kind static;
  #L26c9ca.  v0:= v2.`io.reactivex.internal.operators.observable.b.d` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L26c9ce.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L26c9d4.  v0:= v2.`io.reactivex.internal.operators.observable.b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26c9d8.  v1:= 0I;
  #L26c9da.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26c9e0.  v0:= temp @kind object;
  #L26c9e2.  v0:= (`io.reactivex.l`) v0 @kind object;
  #L26c9e6.  v2.`io.reactivex.internal.operators.observable.b.c` @type ^`io.reactivex.l` := v0 @kind object;
  #L26c9ea.  call temp:= `g`(v0) @signature `Lio/reactivex/l;.g:()Z` @kind virtual;
  #L26c9f0.  v1:= temp;
  #L26c9f2.  if v1 != 0 then goto L26c9f8;
  #L26c9f6.  goto L26ca28;
  #L26c9f8.  call temp:= `d`(v0) @signature `Lio/reactivex/l;.d:()Ljava/lang/Throwable;` @kind virtual;
  #L26c9fe.  v0:= temp @kind object;
  #L26ca00.  call temp:= `e`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L26ca06.  v0:= temp @kind object;
  #L26ca08.  throw v0;
  #L26ca0a.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L26ca0c.  call `dispose`(v2) @signature `Lio/reactivex/observers/b;.dispose:()V` @kind virtual;
  #L26ca12.  call temp:= `b`(v0) @signature `Lio/reactivex/l;.b:(Ljava/lang/Throwable;)Lio/reactivex/l;` @kind static;
  #L26ca18.  v1:= temp @kind object;
  #L26ca1a.  v2.`io.reactivex.internal.operators.observable.b.c` @type ^`io.reactivex.l` := v1 @kind object;
  #L26ca1e.  call temp:= `e`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L26ca24.  v0:= temp @kind object;
  #L26ca26.  throw v0;
  #L26ca28.  v0:= v2.`io.reactivex.internal.operators.observable.b.c` @type ^`io.reactivex.l` @kind object;
  #L26ca2c.  call temp:= `h`(v0) @signature `Lio/reactivex/l;.h:()Z` @kind virtual;
  #L26ca32.  v0:= temp;
  #L26ca34.  return v0;
  catch `java.lang.InterruptedException` @[L26c9c4..L26c9d4] goto L26ca0a;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/b;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26ca58.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/observable/b;.hasNext:()Z` @kind virtual;
  #L26ca5e.  v0:= temp;
  #L26ca60.  if v0 == 0 then goto L26ca78;
  #L26ca64.  v0:= v2.`io.reactivex.internal.operators.observable.b.c` @type ^`io.reactivex.l` @kind object;
  #L26ca68.  call temp:= `e`(v0) @signature `Lio/reactivex/l;.e:()Ljava/lang/Object;` @kind virtual;
  #L26ca6e.  v0:= temp @kind object;
  #L26ca70.  v1:= 0I;
  #L26ca72.  v2.`io.reactivex.internal.operators.observable.b.c` @type ^`io.reactivex.l` := v1 @kind object;
  #L26ca76.  return v0 @kind object;
  #L26ca78.  v0:= new `java.util.NoSuchElementException`;
  #L26ca7c.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L26ca82.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.b` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L26cacc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L26cae0.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26cae6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L26cb30.  v1:= (`io.reactivex.l`) v1 @kind object;
  #L26cb34.  call `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/b;.b:(Lio/reactivex/l;)V` @kind virtual;
  #L26cb3a.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/b;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26cb4c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L26cb50.  v1:= "Read-only iterator." @kind object;
  #L26cb54.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L26cb5a.  throw v0;
}
