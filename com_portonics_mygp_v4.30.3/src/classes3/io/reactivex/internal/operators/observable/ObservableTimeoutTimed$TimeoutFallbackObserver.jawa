record `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface, `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.fallback` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.unit` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.upstream` @AccessFlag FINAL;
  `io.reactivex.x$a` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.x$a` v5 @kind object, `io.reactivex.r` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.<init>:(Lio/reactivex/t;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x$a;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L281b68.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L281b6e.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L281b72.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.timeout` @type ^`long` := v2 @kind wide;
  #L281b76.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L281b7a.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.x$a` := v5 @kind object;
  #L281b7e.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.fallback` @type ^`io.reactivex.r` := v6 @kind object;
  #L281b82.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L281b86.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L281b8c.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L281b90.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L281b94.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L281b9a.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L281b9e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L281ba2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L281ba8.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L281bac.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281bc0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281bc4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L281bca.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L281bd0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281bd4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281bda.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281b40.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L281b46.  v0:= temp @kind object;
  #L281b48.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L281b4c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L281b52.  v0:= temp;
  #L281b54.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L281bec.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L281bf0.  v1:= 9223372036854775807L;
  #L281bfa.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L281c00.  v3:= temp @kind wide;
  #L281c02.  v0:= lcmp(v3, v1);
  #L281c06.  if v0 == 0 then goto L281c28;
  #L281c0a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281c0e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L281c14.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281c18.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L281c1e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281c22.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281c28.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L281c3c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L281c40.  v1:= 9223372036854775807L;
  #L281c4a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L281c50.  v3:= temp @kind wide;
  #L281c52.  v0:= lcmp(v3, v1);
  #L281c56.  if v0 == 0 then goto L281c7a;
  #L281c5a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281c5e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L281c64.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281c68.  call `onError`(v0, v6) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L281c6e.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281c72.  call `dispose`(v6) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281c78.  goto L281c80;
  #L281c7a.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L281c80.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L281c94.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L281c98.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L281c9e.  v0:= temp @kind wide;
  #L281ca0.  v2:= 9223372036854775807L;
  #L281caa.  v4:= lcmp(v0, v2);
  #L281cae.  if v4 == 0 then goto L281cf0;
  #L281cb2.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L281cb6.  v3:= 1L;
  #L281cba.  v3:= v3 + v0 @kind long;
  #L281cbc.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L281cc2.  v0:= temp;
  #L281cc4.  if v0 != 0 then goto L281cca;
  #L281cc8.  goto L281cf0;
  #L281cca.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281cce.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L281cd4.  v0:= temp @kind object;
  #L281cd6.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L281cda.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281ce0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281ce4.  call `onNext`(v0, v6) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L281cea.  call `startTimeout`(v5, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.startTimeout:(J)V` @kind virtual;
  #L281cf0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281d04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281d08.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L281d0e.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L281d20.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L281d24.  v1:= 9223372036854775807L;
  #L281d2e.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L281d34.  v4:= temp;
  #L281d36.  if v4 == 0 then goto L281d6c;
  #L281d3a.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281d3e.  call temp:= `dispose`(v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L281d44.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.fallback` @type ^`io.reactivex.r` @kind object;
  #L281d48.  v5:= 0I;
  #L281d4a.  v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.fallback` @type ^`io.reactivex.r` := v5 @kind object;
  #L281d4e.  v5:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a`;
  #L281d52.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L281d56.  call `<init>`(v5, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.<init>:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L281d5c.  call `subscribe`(v4, v5) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L281d62.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281d66.  call `dispose`(v4) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L281d6c.  return @kind void;
}
procedure `void` `startTimeout`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$TimeoutFallbackObserver;.startTimeout:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L281d80.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L281d84.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.worker` @type ^`io.reactivex.x$a` @kind object;
  #L281d88.  v2:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c`;
  #L281d8c.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;)V` @kind direct;
  #L281d92.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.timeout` @type ^`long` @kind wide;
  #L281d96.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L281d9a.  call temp:= `c`(v1, v2, v5, v3) @signature `Lio/reactivex/x$a;.c:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L281da0.  v5:= temp @kind object;
  #L281da2.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L281da8.  return @kind void;
}
