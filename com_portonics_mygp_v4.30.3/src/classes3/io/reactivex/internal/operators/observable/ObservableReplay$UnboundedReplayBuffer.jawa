record `io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.ArrayList` @kind class, `io.reactivex.internal.operators.observable.ObservableReplay$a` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27caa4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L27caaa.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27cabc.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L27cac2.  v0:= temp @kind object;
  #L27cac4.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L27caca.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L27cace.  v0:= v0 + 1;
  #L27cad2.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int` := v0;
  #L27cad6.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L27cae8.  call temp:= `error`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L27caee.  v1:= temp @kind object;
  #L27caf0.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L27caf6.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L27cafa.  v1:= v1 + 1;
  #L27cafe.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int` := v1;
  #L27cb02.  return @kind void;
}
procedure `void` `next`(`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L27cb14.  call temp:= `next`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L27cb1a.  v1:= temp @kind object;
  #L27cb1c.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L27cb22.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L27cb26.  v1:= v1 + 1;
  #L27cb2a.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int` := v1;
  #L27cb2e.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$UnboundedReplayBuffer;.replay:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27cb40.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27cb46.  v0:= temp;
  #L27cb48.  if v0 == 0 then goto L27cb4e;
  #L27cb4c.  return @kind void;
  #L27cb4e.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.child` @type ^`io.reactivex.t` @kind object;
  #L27cb52.  v1:= 1I;
  #L27cb54.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.isDisposed:()Z` @kind virtual;
  #L27cb5a.  v2:= temp;
  #L27cb5c.  if v2 == 0 then goto L27cb62;
  #L27cb60.  return @kind void;
  #L27cb62.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L27cb66.  call temp:= `index`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.index:()Ljava/lang/Object;` @kind virtual;
  #L27cb6c.  v3:= temp @kind object;
  #L27cb6e.  v3:= (`java.lang.Integer`) v3 @kind object;
  #L27cb72.  if v3 == 0 then goto L27cb80;
  #L27cb76.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L27cb7c.  v3:= temp;
  #L27cb7e.  goto L27cb82;
  #L27cb80.  v3:= 0I;
  #L27cb82.  if v3 >= v2 then goto L27cbb0;
  #L27cb86.  call temp:= `get`(v5, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L27cb8c.  v4:= temp @kind object;
  #L27cb8e.  call temp:= `accept`(v4, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/t;)Z` @kind static;
  #L27cb94.  v4:= temp;
  #L27cb96.  if v4 == 0 then goto L27cb9c;
  #L27cb9a.  return @kind void;
  #L27cb9c.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;.isDisposed:()Z` @kind virtual;
  #L27cba2.  v4:= temp;
  #L27cba4.  if v4 == 0 then goto L27cbaa;
  #L27cba8.  return @kind void;
  #L27cbaa.  v3:= v3 + 1;
  #L27cbae.  goto L27cb82;
  #L27cbb0.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27cbb6.  v2:= temp @kind object;
  #L27cbb8.  v6.`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable.index` @type ^`java.lang.Object` := v2 @kind object;
  #L27cbbc.  v1:= -v1 @kind int;
  #L27cbbe.  call temp:= `addAndGet`(v6, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L27cbc4.  v1:= temp;
  #L27cbc6.  if v1 != 0 then goto L27cb54;
  #L27cbca.  return @kind void;
}
