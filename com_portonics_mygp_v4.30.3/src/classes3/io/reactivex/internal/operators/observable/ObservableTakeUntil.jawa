record `io.reactivex.internal.operators.observable.ObservableTakeUntil` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableTakeUntil.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeUntil` v0 @kind this, `io.reactivex.r` v1 @kind object, `io.reactivex.r` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil;.<init>:(Lio/reactivex/r;Lio/reactivex/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L280b04.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/r;)V` @kind direct;
  #L280b0a.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil.c` @type ^`io.reactivex.r` := v2 @kind object;
  #L280b0e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableTakeUntil` v2 @kind this, `io.reactivex.t` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L280b20.  v0:= new `io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver`;
  #L280b24.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$TakeUntilMainObserver;.<init>:(Lio/reactivex/t;)V` @kind direct;
  #L280b2a.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L280b30.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil.c` @type ^`io.reactivex.r` @kind object;
  #L280b34.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver.otherObserver` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilMainObserver$OtherObserver` @kind object;
  #L280b38.  call `subscribe`(v3, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L280b3e.  v3:= v2.`io.reactivex.internal.operators.observable.a.b` @type ^`io.reactivex.r` @kind object;
  #L280b42.  call `subscribe`(v3, v0) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L280b48.  return @kind void;
}
