record `io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.count` @AccessFlag ;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.end` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$IntervalRangeObserver;.<init>:(Lio/reactivex/t;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L278200.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L278206.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27820a.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.count` @type ^`long` := v2 @kind wide;
  #L27820e.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.end` @type ^`long` := v4 @kind wide;
  #L278212.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$IntervalRangeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L278224.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27822a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$IntervalRangeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2781d8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2781de.  v0:= temp @kind object;
  #L2781e0.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2781e4.  if v0 != v1 then goto L2781ec;
  #L2781e8.  v0:= 1I;
  #L2781ea.  goto L2781ee;
  #L2781ec.  v0:= 0I;
  #L2781ee.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$IntervalRangeObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27823c.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$IntervalRangeObserver;.isDisposed:()Z` @kind virtual;
  #L278242.  v0:= temp;
  #L278244.  if v0 != 0 then goto L278286;
  #L278248.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.count` @type ^`long` @kind wide;
  #L27824c.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L278250.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L278256.  v3:= temp @kind object;
  #L278258.  call `onNext`(v2, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27825e.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.end` @type ^`long` @kind wide;
  #L278262.  v4:= lcmp(v0, v2);
  #L278266.  if v4 != 0 then goto L27827c;
  #L27826a.  call temp:= `dispose`(v5) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L278270.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L278274.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27827a.  return @kind void;
  #L27827c.  v2:= 1L;
  #L278280.  v0:= v0 + v2 @kind long;
  #L278282.  v5.`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver.count` @type ^`long` := v0 @kind wide;
  #L278286.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$IntervalRangeObserver;.setResource:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L278298.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27829e.  return @kind void;
}
