record `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.active` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.inner` @AccessFlag FINAL;
  `io.reactivex.subjects.b` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.signaller` @AccessFlag FINAL;
  `io.reactivex.r` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.source` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.subjects.b` v2 @kind object, `io.reactivex.r` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/subjects/b;Lio/reactivex/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27bb20.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27bb26.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L27bb2a.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.signaller` @type ^`io.reactivex.subjects.b` := v2 @kind object;
  #L27bb2e.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.source` @type ^`io.reactivex.r` := v3 @kind object;
  #L27bb32.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L27bb36.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27bb3c.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L27bb40.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L27bb44.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L27bb4a.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L27bb4e.  v1:= new `io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver`;
  #L27bb52.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;)V` @kind direct;
  #L27bb58.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` := v1 @kind object;
  #L27bb5c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27bb60.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27bb66.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L27bb6a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27bb7c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27bb80.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27bb86.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` @kind object;
  #L27bb8a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27bb90.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27bba4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27bba8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27bbae.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27bbb2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27bbb6.  call `a`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.a:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L27bbbc.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27bbd0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27bbd4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27bbda.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27bbde.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27bbe2.  call `c`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.c:(Lio/reactivex/t;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L27bbe8.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.innerNext:()V` @AccessFlag  {
    temp;

  #L27bbfc.  call `subscribeNext`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.subscribeNext:()V` @kind virtual;
  #L27bc02.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27baf4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27baf8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27bafe.  v0:= temp @kind object;
  #L27bb00.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L27bb04.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L27bb0a.  v0:= temp;
  #L27bb0c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27bc14.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27bc18.  v1:= 0I;
  #L27bc1a.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27bc20.  v0:= 0I;
  #L27bc22.  v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L27bc26.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.signaller` @type ^`io.reactivex.subjects.b` @kind object;
  #L27bc2a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27bc30.  v0:= temp @kind object;
  #L27bc32.  call `onNext`(v1, v0) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L27bc38.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27bc4c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.inner` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver$InnerRepeatObserver` @kind object;
  #L27bc50.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27bc56.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27bc5a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27bc5e.  call `c`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.c:(Lio/reactivex/t;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L27bc64.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27bc78.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27bc7c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27bc80.  call `e`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.e:(Lio/reactivex/t;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L27bc86.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27bc98.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27bc9c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27bca2.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;

  #L27bcb4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27bcb8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27bcbe.  v0:= temp;
  #L27bcc0.  if v0 != 0 then goto L27bcfa;
  #L27bcc4.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$RepeatWhenObserver;.isDisposed:()Z` @kind virtual;
  #L27bcca.  v0:= temp;
  #L27bccc.  if v0 == 0 then goto L27bcd2;
  #L27bcd0.  return @kind void;
  #L27bcd2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.active` @type ^`boolean` @kind boolean;
  #L27bcd6.  if v0 != 0 then goto L27bcea;
  #L27bcda.  v0:= 1I;
  #L27bcdc.  v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.active` @type ^`boolean` := v0 @kind boolean;
  #L27bce0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.source` @type ^`io.reactivex.r` @kind object;
  #L27bce4.  call `subscribe`(v0, v1) @signature `Lio/reactivex/r;.subscribe:(Lio/reactivex/t;)V` @kind interface;
  #L27bcea.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27bcee.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L27bcf4.  v0:= temp;
  #L27bcf6.  if v0 != 0 then goto L27bcc4;
  #L27bcfa.  return @kind void;
}
