record `io.reactivex.internal.operators.observable.ObserverResourceWrapper` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObserverResourceWrapper.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObserverResourceWrapper.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `io.reactivex.t` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.<init>:(Lio/reactivex/t;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L285c18.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L285c1e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L285c22.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L285c28.  v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L285c2c.  v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @type ^`io.reactivex.t` := v2 @kind object;
  #L285c30.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285c44.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L285c48.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L285c4e.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L285c54.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L285bec.  v0:= v2.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L285bf0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L285bf6.  v0:= temp @kind object;
  #L285bf8.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L285bfc.  if v0 != v1 then goto L285c04;
  #L285c00.  v0:= 1I;
  #L285c02.  goto L285c06;
  #L285c04.  v0:= 0I;
  #L285c06.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285c68.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.dispose:()V` @kind virtual;
  #L285c6e.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @type ^`io.reactivex.t` @kind object;
  #L285c72.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L285c78.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285c8c.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.dispose:()V` @kind virtual;
  #L285c92.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @type ^`io.reactivex.t` @kind object;
  #L285c96.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L285c9c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285cb0.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @type ^`io.reactivex.t` @kind object;
  #L285cb4.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L285cba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285ccc.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L285cd0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L285cd6.  v2:= temp;
  #L285cd8.  if v2 == 0 then goto L285ce6;
  #L285cdc.  v2:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.downstream` @type ^`io.reactivex.t` @kind object;
  #L285ce0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L285ce6.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.setResource:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L285cf8.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L285cfe.  return @kind void;
}
