record `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.t` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` v0 @kind this, `io.reactivex.t` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.<init>:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L281ab0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L281ab6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.b` @type ^`io.reactivex.t` := v1 @kind object;
  #L281aba.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L281abe.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281ad0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.b` @type ^`io.reactivex.t` @kind object;
  #L281ad4.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L281ada.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281aec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.b` @type ^`io.reactivex.t` @kind object;
  #L281af0.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L281af6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281b08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.b` @type ^`io.reactivex.t` @kind object;
  #L281b0c.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L281b12.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L281b24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L281b28.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L281b2e.  return @kind void;
}
