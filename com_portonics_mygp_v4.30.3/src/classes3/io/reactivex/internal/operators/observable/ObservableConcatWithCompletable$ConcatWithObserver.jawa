record `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.b` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.inCompletable` @AccessFlag ;
  `io.reactivex.c` `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.other` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2718f4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2718fa.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L2718fe.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.other` @type ^`io.reactivex.c` := v2 @kind object;
  #L271902.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L271914.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27191a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2718cc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2718d2.  v0:= temp @kind object;
  #L2718d4.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2718d8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2718de.  v0:= temp;
  #L2718e0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27192c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.inCompletable` @type ^`boolean` @kind boolean;
  #L271930.  if v0 == 0 then goto L271940;
  #L271934.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271938.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27193e.  goto L27195c;
  #L271940.  v0:= 1I;
  #L271942.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.inCompletable` @type ^`boolean` := v0 @kind boolean;
  #L271946.  v0:= 0I;
  #L271948.  call temp:= `replace`(v2, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27194e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.other` @type ^`io.reactivex.c` @kind object;
  #L271952.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.other` @type ^`io.reactivex.c` := v0 @kind object;
  #L271956.  call `b`(v1, v2) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L27195c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L271970.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271974.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L27197a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27198c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L271990.  call `onNext`(v0, v2) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L271996.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$ConcatWithObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L2719a8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2719ae.  v1:= temp;
  #L2719b0.  if v1 == 0 then goto L2719c6;
  #L2719b4.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.inCompletable` @type ^`boolean` @kind boolean;
  #L2719b8.  if v1 != 0 then goto L2719c6;
  #L2719bc.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2719c0.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2719c6.  return @kind void;
}
