record `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.delayErrors` @AccessFlag FINAL;
  `io.reactivex.t` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.mapper` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27559c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2755a2.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L2755a6.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L2755aa.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L2755ae.  v1:= new `io.reactivex.disposables.a`;
  #L2755b2.  call `<init>`(v1) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L2755b8.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.a` := v1 @kind object;
  #L2755bc.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L2755c0.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L2755c6.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L2755ca.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L2755ce.  v2:= 1I;
  #L2755d0.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L2755d6.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L2755da.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2755de.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2755e4.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L2755e8.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L2755fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L275600.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L275606.  v0:= temp @kind object;
  #L275608.  v0:= (`io.reactivex.internal.queue.a`) v0 @kind object;
  #L27560c.  if v0 == 0 then goto L275616;
  #L275610.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L275616.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L275628.  v0:= 1I;
  #L27562a.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L27562e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L275632.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L275638.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L27563c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L275642.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L275654.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27565a.  v0:= temp;
  #L27565c.  if v0 != 0 then goto L275666;
  #L275660.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drainLoop:()V` @kind virtual;
  #L275666.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L275678.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27567c.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275680.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L275684.  v3:= 1I;
  #L275686.  v4:= 1I;
  #L275688.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L27568c.  if v5 == 0 then goto L275698;
  #L275690.  call `clear`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.clear:()V` @kind virtual;
  #L275696.  return @kind void;
  #L275698.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L27569c.  if v5 != 0 then goto L2756ce;
  #L2756a0.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2756a4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2756aa.  v5:= temp @kind object;
  #L2756ac.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L2756b0.  if v5 == 0 then goto L2756ce;
  #L2756b4.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2756b8.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2756be.  v1:= temp @kind object;
  #L2756c0.  call `clear`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.clear:()V` @kind virtual;
  #L2756c6.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2756cc.  return @kind void;
  #L2756ce.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2756d4.  v5:= temp;
  #L2756d6.  v6:= 0I;
  #L2756d8.  if v5 != 0 then goto L2756e0;
  #L2756dc.  v5:= 1I;
  #L2756de.  goto L2756e2;
  #L2756e0.  v5:= 0I;
  #L2756e2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2756e8.  v7:= temp @kind object;
  #L2756ea.  v7:= (`io.reactivex.internal.queue.a`) v7 @kind object;
  #L2756ee.  if v7 == 0 then goto L2756fc;
  #L2756f2.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L2756f8.  v7:= temp @kind object;
  #L2756fa.  goto L2756fe;
  #L2756fc.  v7:= 0I;
  #L2756fe.  if v7 != 0 then goto L275704;
  #L275702.  v6:= 1I;
  #L275704.  if v5 == 0 then goto L27572c;
  #L275708.  if v6 == 0 then goto L27572c;
  #L27570c.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L275710.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L275716.  v1:= temp @kind object;
  #L275718.  if v1 == 0 then goto L275724;
  #L27571c.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L275722.  goto L27572a;
  #L275724.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L27572a.  return @kind void;
  #L27572c.  if v6 == 0 then goto L275740;
  #L275730.  v4:= -v4 @kind int;
  #L275732.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L275738.  v4:= temp;
  #L27573a.  if v4 != 0 then goto L275688;
  #L27573e.  return @kind void;
  #L275740.  call `onNext`(v0, v7) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L275746.  goto L275688;
}
procedure `io.reactivex.internal.queue.a` `getOrCreateQueue`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.getOrCreateQueue:()Lio/reactivex/internal/queue/a;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L275550.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L275554.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27555a.  v0:= temp @kind object;
  #L27555c.  v0:= (`io.reactivex.internal.queue.a`) v0 @kind object;
  #L275560.  if v0 == 0 then goto L275566;
  #L275564.  return v0 @kind object;
  #L275566.  v0:= new `io.reactivex.internal.queue.a`;
  #L27556a.  call temp:= `c`() @signature `Lio/reactivex/n;.c:()I` @kind static;
  #L275570.  v1:= temp;
  #L275572.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L275578.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27557c.  v2:= 0I;
  #L27557e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L275584.  v1:= temp;
  #L275586.  if v1 == 0 then goto L275550;
  #L27558a.  return v0 @kind object;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.innerComplete:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L275758.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L27575c.  call temp:= `c`(v0, v3) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L275762.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L275768.  v3:= temp;
  #L27576a.  if v3 != 0 then goto L2757f2;
  #L27576e.  v3:= 0I;
  #L275770.  v0:= 1I;
  #L275772.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L275778.  v1:= temp;
  #L27577a.  if v1 == 0 then goto L2757f2;
  #L27577e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275782.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L275788.  v1:= temp;
  #L27578a.  if v1 != 0 then goto L275790;
  #L27578e.  v3:= 1I;
  #L275790.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L275794.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27579a.  v0:= temp @kind object;
  #L27579c.  v0:= (`io.reactivex.internal.queue.a`) v0 @kind object;
  #L2757a0.  if v3 == 0 then goto L2757dc;
  #L2757a4.  if v0 == 0 then goto L2757b4;
  #L2757a8.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L2757ae.  v3:= temp;
  #L2757b0.  if v3 == 0 then goto L2757dc;
  #L2757b4.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2757b8.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2757be.  v3:= temp @kind object;
  #L2757c0.  if v3 == 0 then goto L2757d0;
  #L2757c4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2757c8.  call `onError`(v0, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2757ce.  goto L2757da;
  #L2757d0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2757d4.  call `onComplete`(v3) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2757da.  return @kind void;
  #L2757dc.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2757e2.  v3:= temp;
  #L2757e4.  if v3 != 0 then goto L2757ea;
  #L2757e8.  return @kind void;
  #L2757ea.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drainLoop:()V` @kind virtual;
  #L2757f0.  goto L275802;
  #L2757f2.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2757f6.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2757fc.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drain:()V` @kind virtual;
  #L275802.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.innerError:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L275814.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L275818.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L27581e.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L275822.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L275828.  v2:= temp;
  #L27582a.  if v2 == 0 then goto L27585c;
  #L27582e.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L275832.  if v2 != 0 then goto L27584a;
  #L275836.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L27583a.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L275840.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L275844.  call `dispose`(v2) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L27584a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27584e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L275854.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drain:()V` @kind virtual;
  #L27585a.  goto L275862;
  #L27585c.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L275862.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.innerSuccess:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L275874.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L275878.  call temp:= `c`(v0, v3) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L27587e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L275884.  v3:= temp;
  #L275886.  if v3 != 0 then goto L275910;
  #L27588a.  v3:= 0I;
  #L27588c.  v0:= 1I;
  #L27588e.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L275894.  v1:= temp;
  #L275896.  if v1 == 0 then goto L275910;
  #L27589a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L27589e.  call `onNext`(v1, v4) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2758a4.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2758a8.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2758ae.  v4:= temp;
  #L2758b0.  if v4 != 0 then goto L2758b6;
  #L2758b4.  v3:= 1I;
  #L2758b6.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2758ba.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2758c0.  v4:= temp @kind object;
  #L2758c2.  v4:= (`io.reactivex.internal.queue.a`) v4 @kind object;
  #L2758c6.  if v3 == 0 then goto L275902;
  #L2758ca.  if v4 == 0 then goto L2758da;
  #L2758ce.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L2758d4.  v3:= temp;
  #L2758d6.  if v3 == 0 then goto L275902;
  #L2758da.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2758de.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2758e4.  v3:= temp @kind object;
  #L2758e6.  if v3 == 0 then goto L2758f6;
  #L2758ea.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2758ee.  call `onError`(v4, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2758f4.  goto L275900;
  #L2758f6.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L2758fa.  call `onComplete`(v3) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L275900.  return @kind void;
  #L275902.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L275908.  v3:= temp;
  #L27590a.  if v3 != 0 then goto L27593a;
  #L27590e.  return @kind void;
  #L275910.  call temp:= `getOrCreateQueue`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.getOrCreateQueue:()Lio/reactivex/internal/queue/a;` @kind virtual;
  #L275916.  v3:= temp @kind object;
  #L275918.  @monitorenter v3
  #L27591a.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L275920.  @monitorexit v3
  #L275922.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275926.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L27592c.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L275932.  v3:= temp;
  #L275934.  if v3 == 0 then goto L27593a;
  #L275938.  return @kind void;
  #L27593a.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drainLoop:()V` @kind virtual;
  #L275940.  return @kind void;
  #L275942.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L275944.  @monitorexit v3
  #L275946.  throw v4;
  catch `java.lang.Throwable` @[L27591a..L275922] goto L275942;
  catch `java.lang.Throwable` @[L275944..L275946] goto L275942;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L275538.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L27553c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27596c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275970.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L275976.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drain:()V` @kind virtual;
  #L27597c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L275990.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L275994.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L27599a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L27599e.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2759a4.  v0:= temp;
  #L2759a6.  if v0 == 0 then goto L2759c4;
  #L2759aa.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L2759ae.  if v2 != 0 then goto L2759bc;
  #L2759b2.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L2759b6.  call `dispose`(v2) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L2759bc.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.drain:()V` @kind virtual;
  #L2759c2.  goto L2759ca;
  #L2759c4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2759ca.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2759dc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L2759e0.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2759e6.  v3:= temp @kind object;
  #L2759e8.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L2759ec.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2759f2.  v3:= temp @kind object;
  #L2759f4.  v3:= (`io.reactivex.k`) v3 @kind object;
  #L2759f8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2759fc.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L275a02.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver`;
  #L275a06.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver$InnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;)V` @kind direct;
  #L275a0c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L275a10.  if v1 != 0 then goto L275a2a;
  #L275a14.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L275a18.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L275a1e.  v1:= temp;
  #L275a20.  if v1 == 0 then goto L275a2a;
  #L275a24.  call `b`(v3, v0) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L275a2a.  return @kind void;
  #L275a2c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L275a2e.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L275a34.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L275a38.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L275a3e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L275a44.  return @kind void;
  catch `java.lang.Throwable` @[L2759dc..L2759f8] goto L275a2c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$FlatMapMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L275a64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L275a68.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L275a6e.  v0:= temp;
  #L275a70.  if v0 == 0 then goto L275a82;
  #L275a74.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L275a78.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L275a7c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L275a82.  return @kind void;
}
