record `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableReplay$a` `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.shouldConnect` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L27c424.  v0:= 0I;
  #L27c426.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[v0];
  #L27c42a.  `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] := v1 @kind object;
  #L27c42e.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[v0];
  #L27c432.  `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] := v0 @kind object;
  #L27c436.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L27c448.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L27c44e.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$a` := v2 @kind object;
  #L27c452.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L27c456.  v0:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L27c45a.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L27c460.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L27c464.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L27c468.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L27c46e.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L27c472.  return @kind void;
}
procedure `boolean` `add`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v4 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.add:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27c3a4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27c3a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c3ae.  v0:= temp @kind object;
  #L27c3b0.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[]) v0 @kind object;
  #L27c3b4.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L27c3b8.  v2:= 0I;
  #L27c3ba.  if v0 != v1 then goto L27c3c0;
  #L27c3be.  return v2;
  #L27c3c0.  v1:= length @variable v0;
  #L27c3c2.  v3:= v1 + 1;
  #L27c3c6.  v3:= new `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[v3];
  #L27c3ca.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27c3d0.  v3[v1]:= v5 @kind object;
  #L27c3d4.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27c3d8.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27c3de.  v0:= temp;
  #L27c3e0.  if v0 == 0 then goto L27c3a4;
  #L27c3e4.  v5:= 1I;
  #L27c3e6.  return v5;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27c484.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27c488.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L27c48c.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L27c492.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L27c498.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27c3f8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27c3fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c402.  v0:= temp @kind object;
  #L27c404.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L27c408.  if v0 != v1 then goto L27c410;
  #L27c40c.  v0:= 1I;
  #L27c40e.  goto L27c412;
  #L27c410.  v0:= 0I;
  #L27c412.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27c4ac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @type ^`boolean` @kind boolean;
  #L27c4b0.  if v0 != 0 then goto L27c4ca;
  #L27c4b4.  v0:= 1I;
  #L27c4b6.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L27c4ba.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$a` @kind object;
  #L27c4be.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.complete:()V` @kind interface;
  #L27c4c4.  call `replayFinal`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replayFinal:()V` @kind virtual;
  #L27c4ca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27c4dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @type ^`boolean` @kind boolean;
  #L27c4e0.  if v0 != 0 then goto L27c4fc;
  #L27c4e4.  v0:= 1I;
  #L27c4e6.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L27c4ea.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$a` @kind object;
  #L27c4ee.  call `error`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.error:(Ljava/lang/Throwable;)V` @kind interface;
  #L27c4f4.  call `replayFinal`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replayFinal:()V` @kind virtual;
  #L27c4fa.  goto L27c502;
  #L27c4fc.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L27c502.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27c514.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.done` @type ^`boolean` @kind boolean;
  #L27c518.  if v0 != 0 then goto L27c52c;
  #L27c51c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$a` @kind object;
  #L27c520.  call `next`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.next:(Ljava/lang/Object;)V` @kind interface;
  #L27c526.  call `replay`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replay:()V` @kind virtual;
  #L27c52c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L27c540.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L27c546.  v1:= temp;
  #L27c548.  if v1 == 0 then goto L27c552;
  #L27c54c.  call `replay`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replay:()V` @kind virtual;
  #L27c552.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v6 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.remove:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L27c564.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27c568.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c56e.  v0:= temp @kind object;
  #L27c570.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[]) v0 @kind object;
  #L27c574.  v1:= length @variable v0;
  #L27c576.  if v1 != 0 then goto L27c57c;
  #L27c57a.  return @kind void;
  #L27c57c.  v2:= -1I;
  #L27c57e.  v3:= 0I;
  #L27c580.  v4:= 0I;
  #L27c582.  if v4 >= v1 then goto L27c5a0;
  #L27c586.  v5:= v0[v4] @kind object;
  #L27c58a.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L27c590.  v5:= temp;
  #L27c592.  if v5 == 0 then goto L27c59a;
  #L27c596.  v2:= v4;
  #L27c598.  goto L27c5a0;
  #L27c59a.  v4:= v4 + 1;
  #L27c59e.  goto L27c582;
  #L27c5a0.  if v2 >= 0 then goto L27c5a6;
  #L27c5a4.  return @kind void;
  #L27c5a6.  v4:= 1I;
  #L27c5a8.  if v1 != v4 then goto L27c5b2;
  #L27c5ac.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.EMPTY` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L27c5b0.  goto L27c5d0;
  #L27c5b2.  v5:= v1 + -1;
  #L27c5b6.  v5:= new `io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[v5];
  #L27c5ba.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27c5c0.  v3:= v2 + 1;
  #L27c5c4.  v1:= v1 - v2 @kind int;
  #L27c5c6.  v1:= v1 - v4 @kind int;
  #L27c5c8.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27c5ce.  v1:= v5 @kind object;
  #L27c5d0.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27c5d4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L27c5da.  v0:= temp;
  #L27c5dc.  if v0 == 0 then goto L27c564;
  #L27c5e0.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replay:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27c5f4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27c5f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L27c5fe.  v0:= temp @kind object;
  #L27c600.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[]) v0 @kind object;
  #L27c604.  v1:= length @variable v0;
  #L27c606.  v2:= 0I;
  #L27c608.  if v2 >= v1 then goto L27c620;
  #L27c60c.  v3:= v0[v2] @kind object;
  #L27c610.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$a` @kind object;
  #L27c614.  call `replay`(v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.replay:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @kind interface;
  #L27c61a.  v2:= v2 + 1;
  #L27c61e.  goto L27c608;
  #L27c620.  return @kind void;
}
procedure `void` `replayFinal`(`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$ReplayObserver;.replayFinal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27c634.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.observers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L27c638.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.TERMINATED` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[] @kind object;
  #L27c63c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27c642.  v0:= temp @kind object;
  #L27c644.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$InnerDisposable`[]) v0 @kind object;
  #L27c648.  v1:= length @variable v0;
  #L27c64a.  v2:= 0I;
  #L27c64c.  if v2 >= v1 then goto L27c664;
  #L27c650.  v3:= v0[v2] @kind object;
  #L27c654.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$ReplayObserver.buffer` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$a` @kind object;
  #L27c658.  call `replay`(v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.replay:(Lio/reactivex/internal/operators/observable/ObservableReplay$InnerDisposable;)V` @kind interface;
  #L27c65e.  v2:= v2 + 1;
  #L27c662.  goto L27c64c;
  #L27c664.  return @kind void;
}
