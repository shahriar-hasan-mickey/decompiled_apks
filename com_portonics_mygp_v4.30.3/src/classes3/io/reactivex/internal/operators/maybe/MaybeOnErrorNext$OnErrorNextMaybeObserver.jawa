record `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.j` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.allowFatal` @AccessFlag FINAL;
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.resumeFunction` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v0 @kind this, `io.reactivex.j` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.<init>:(Lio/reactivex/j;Lio/reactivex/d0/k;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26717c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L267182.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L267186.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.resumeFunction` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L26718a.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.allowFatal` @type ^`boolean` := v3 @kind boolean;
  #L26718e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L2671a0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2671a6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L267154.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26715a.  v0:= temp @kind object;
  #L26715c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L267160.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L267166.  v0:= temp;
  #L267168.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2671b8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L2671bc.  call `onComplete`(v0) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L2671c2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2671d4.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.allowFatal` @type ^`boolean` @kind boolean;
  #L2671d8.  if v0 != 0 then goto L2671f0;
  #L2671dc.  v0:= instanceof @variable v6 @type ^`java.lang.Exception` @kind boolean;
  #L2671e0.  if v0 != 0 then goto L2671f0;
  #L2671e4.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L2671e8.  call `onError`(v0, v6) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2671ee.  return @kind void;
  #L2671f0.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.resumeFunction` @type ^`io.reactivex.d0.k` @kind object;
  #L2671f4.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2671fa.  v0:= temp @kind object;
  #L2671fc.  v1:= "The resumeFunction returned a null MaybeSource" @kind object;
  #L267200.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L267206.  v0:= temp @kind object;
  #L267208.  v0:= (`io.reactivex.k`) v0 @kind object;
  #L26720c.  v6:= 0I;
  #L26720e.  call temp:= `replace`(v5, v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L267214.  v6:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver$a`;
  #L267218.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L26721c.  call `<init>`(v6, v1, v5) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver$a;.<init>:(Lio/reactivex/j;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L267222.  call `b`(v0, v6) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L267228.  return @kind void;
  #L26722a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26722c.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L267232.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L267236.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L26723a.  v3:= 2I;
  #L26723c.  v3:= new `java.lang.Throwable`[v3];
  #L267240.  v4:= 0I;
  #L267242.  v3[v4]:= v6 @kind object;
  #L267246.  v6:= 1I;
  #L267248.  v3[v6]:= v0 @kind object;
  #L26724c.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L267252.  call `onError`(v1, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L267258.  return @kind void;
  catch `java.lang.Throwable` @[L2671f0..L26720c] goto L26722a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L267278.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26727e.  v1:= temp;
  #L267280.  if v1 == 0 then goto L26728e;
  #L267284.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L267288.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/j;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26728e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2672a0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L2672a4.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/j;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L2672aa.  return @kind void;
}
