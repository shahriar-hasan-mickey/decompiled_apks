record `io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class, `io.reactivex.j` @kind interface {
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2686c8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/t;)V` @kind direct;
  #L2686ce.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2686e0.  call `dispose`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.dispose:()V` @kind super;
  #L2686e6.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2686ea.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2686f0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L268704.  call `complete`(v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:()V` @kind virtual;
  #L26870a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L26871c.  call `error`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L268722.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L268734.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L268738.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26873e.  v0:= temp;
  #L268740.  if v0 == 0 then goto L268752;
  #L268744.  v1.`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L268748.  v2:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L26874c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L268752.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L268764.  call `complete`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L26876a.  return @kind void;
}
