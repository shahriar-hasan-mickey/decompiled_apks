record `io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.j` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.delay` @AccessFlag FINAL;
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.error` @AccessFlag ;
  `io.reactivex.x` `io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.unit` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.value` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver` v0 @kind this, `io.reactivex.j` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.x` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.<init>:(Lio/reactivex/j;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L264a0c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L264a12.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L264a16.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.delay` @type ^`long` := v2 @kind wide;
  #L264a1a.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L264a1e.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.scheduler` @type ^`io.reactivex.x` := v5 @kind object;
  #L264a22.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L264a34.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L264a3a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2649e4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2649ea.  v0:= temp @kind object;
  #L2649ec.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2649f0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2649f6.  v0:= temp;
  #L2649f8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L264a4c.  call `schedule`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.schedule:()V` @kind virtual;
  #L264a52.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L264a64.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L264a68.  call `schedule`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.schedule:()V` @kind virtual;
  #L264a6e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L264a80.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L264a86.  v1:= temp;
  #L264a88.  if v1 == 0 then goto L264a96;
  #L264a8c.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L264a90.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/j;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L264a96.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L264aa8.  v0.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L264aac.  call `schedule`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.schedule:()V` @kind virtual;
  #L264ab2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L264ac4.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L264ac8.  if v0 == 0 then goto L264ad8;
  #L264acc.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L264ad0.  call `onError`(v1, v0) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L264ad6.  goto L264af6;
  #L264ad8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.value` @type ^`java.lang.Object` @kind object;
  #L264adc.  if v0 == 0 then goto L264aec;
  #L264ae0.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L264ae4.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/j;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L264aea.  goto L264af6;
  #L264aec.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L264af0.  call `onComplete`(v0) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L264af6.  return @kind void;
}
procedure `void` `schedule`(`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay$DelayMaybeObserver;.schedule:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L264b08.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L264b0c.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.delay` @type ^`long` @kind wide;
  #L264b10.  v3:= v4.`io.reactivex.internal.operators.maybe.MaybeDelay$DelayMaybeObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L264b14.  call temp:= `d`(v0, v4, v1, v3) @signature `Lio/reactivex/x;.d:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L264b1a.  v0:= temp @kind object;
  #L264b1c.  call temp:= `replace`(v4, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L264b22.  return @kind void;
}
