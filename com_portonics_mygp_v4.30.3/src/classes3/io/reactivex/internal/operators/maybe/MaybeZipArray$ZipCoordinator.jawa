record `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.zipper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `io.reactivex.j` v2 @kind object, `int` v3 , `io.reactivex.d0.k` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.<init>:(Lio/reactivex/j;ILio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L268c0c.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L268c12.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.j` := v2 @kind object;
  #L268c16.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.zipper` @type ^`io.reactivex.d0.k` := v4 @kind object;
  #L268c1a.  v2:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[v3];
  #L268c1e.  v4:= 0I;
  #L268c20.  if v4 >= v3 then goto L268c38;
  #L268c24.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`;
  #L268c28.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;I)V` @kind direct;
  #L268c2e.  v2[v4]:= v0 @kind object;
  #L268c32.  v4:= v4 + 1;
  #L268c36.  goto L268c20;
  #L268c38.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] := v2 @kind object;
  #L268c3c.  v2:= new `java.lang.Object`[v3];
  #L268c40.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] := v2 @kind object;
  #L268c44.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L268c58.  v0:= 0I;
  #L268c5a.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L268c60.  v1:= temp;
  #L268c62.  if v1 <= 0 then goto L268c80;
  #L268c66.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] @kind object;
  #L268c6a.  v2:= length @variable v1;
  #L268c6c.  if v0 >= v2 then goto L268c80;
  #L268c70.  v3:= v1[v0] @kind object;
  #L268c74.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.dispose:()V` @kind virtual;
  #L268c7a.  v0:= v0 + 1;
  #L268c7e.  goto L268c6c;
  #L268c80.  return @kind void;
}
procedure `void` `disposeExcept`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.disposeExcept:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L268c94.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] @kind object;
  #L268c98.  v1:= length @variable v0;
  #L268c9a.  v2:= 0I;
  #L268c9c.  if v2 >= v5 then goto L268cb0;
  #L268ca0.  v3:= v0[v2] @kind object;
  #L268ca4.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.dispose:()V` @kind virtual;
  #L268caa.  v2:= v2 + 1;
  #L268cae.  goto L268c9c;
  #L268cb0.  v5:= v5 + 1;
  #L268cb4.  if v5 >= v1 then goto L268cc4;
  #L268cb8.  v2:= v0[v5] @kind object;
  #L268cbc.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.dispose:()V` @kind virtual;
  #L268cc2.  goto L268cb0;
  #L268cc4.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.innerComplete:(I)V` @AccessFlag  {
    temp;
    v0;

  #L268cd8.  v0:= 0I;
  #L268cda.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L268ce0.  v0:= temp;
  #L268ce2.  if v0 <= 0 then goto L268cf6;
  #L268ce6.  call `disposeExcept`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.disposeExcept:(I)V` @kind virtual;
  #L268cec.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.j` @kind object;
  #L268cf0.  call `onComplete`(v2) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L268cf6.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.innerError:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L268d08.  v0:= 0I;
  #L268d0a.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L268d10.  v0:= temp;
  #L268d12.  if v0 <= 0 then goto L268d28;
  #L268d16.  call `disposeExcept`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.disposeExcept:(I)V` @kind virtual;
  #L268d1c.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.j` @kind object;
  #L268d20.  call `onError`(v3, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L268d26.  goto L268d2e;
  #L268d28.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L268d2e.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.innerSuccess:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L268d40.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] @kind object;
  #L268d44.  v0[v3]:= v2 @kind object;
  #L268d48.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L268d4e.  v2:= temp;
  #L268d50.  if v2 != 0 then goto L268d8e;
  #L268d54.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.zipper` @type ^`io.reactivex.d0.k` @kind object;
  #L268d58.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] @kind object;
  #L268d5c.  call temp:= `apply`(v2, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L268d62.  v2:= temp @kind object;
  #L268d64.  v3:= "The zipper returned a null value" @kind object;
  #L268d68.  call temp:= `e`(v2, v3) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L268d6e.  v2:= temp @kind object;
  #L268d70.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.j` @kind object;
  #L268d74.  call `onSuccess`(v3, v2) @signature `Lio/reactivex/j;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L268d7a.  goto L268d8e;
  #L268d7c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L268d7e.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L268d84.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.j` @kind object;
  #L268d88.  call `onError`(v3, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L268d8e.  return @kind void;
  catch `java.lang.Throwable` @[L268d54..L268d70] goto L268d7c;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L268be8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L268bee.  v0:= temp;
  #L268bf0.  if v0 > 0 then goto L268bf8;
  #L268bf4.  v0:= 1I;
  #L268bf6.  goto L268bfa;
  #L268bf8.  v0:= 0I;
  #L268bfa.  return v0;
}
