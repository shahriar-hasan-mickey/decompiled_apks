record `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.j` @kind interface, `n.b.d` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.disposables` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.errors` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.index` @AccessFlag ;
  `long` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.produced` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.requested` @AccessFlag FINAL;
  `io.reactivex.k`[] `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.sources` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.k`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.<init>:(Ln/b/c;[Lio/reactivex/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2642f4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2642fa.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.downstream` @type ^`n.b.c` := v1 @kind object;
  #L2642fe.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.sources` @type ^`io.reactivex.k`[] := v2 @kind object;
  #L264302.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L264306.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L26430c.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L264310.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L264314.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L26431a.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L26431e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L264322.  v2:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L264326.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L26432c.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L264330.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L264334.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L26433a.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L26433e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264350.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L264354.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L26435a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L26436c.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L264372.  v0:= temp;
  #L264374.  if v0 == 0 then goto L26437a;
  #L264378.  return @kind void;
  #L26437a.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26437e.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.downstream` @type ^`n.b.c` @kind object;
  #L264382.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L264386.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L26438c.  v3:= temp;
  #L26438e.  v4:= 0I;
  #L264390.  if v3 == 0 then goto L26439c;
  #L264394.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L26439a.  return @kind void;
  #L26439c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2643a2.  v3:= temp @kind object;
  #L2643a4.  if v3 == 0 then goto L26444e;
  #L2643a8.  v5:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L2643ac.  v6:= 1I;
  #L2643ae.  if v3 == v5 then goto L2643e8;
  #L2643b2.  v7:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.produced` @type ^`long` @kind wide;
  #L2643b6.  v5:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2643ba.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2643c0.  v9:= temp @kind wide;
  #L2643c2.  v5:= lcmp(v7, v9);
  #L2643c6.  if v5 == 0 then goto L2643e2;
  #L2643ca.  v9:= 1L;
  #L2643ce.  v7:= v7 + v9 @kind long;
  #L2643d0.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.produced` @type ^`long` := v7 @kind wide;
  #L2643d4.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2643da.  call `onNext`(v1, v3) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2643e0.  goto L2643ee;
  #L2643e2.  v3:= 0I;
  #L2643e4.  v6:= 0I;
  #L2643e6.  goto L2643ee;
  #L2643e8.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2643ee.  if v6 == 0 then goto L26444e;
  #L2643f2.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L2643f8.  v3:= temp;
  #L2643fa.  if v3 != 0 then goto L26444e;
  #L2643fe.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.index` @type ^`int`;
  #L264402.  v4:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.sources` @type ^`io.reactivex.k`[] @kind object;
  #L264406.  v5:= length @variable v4;
  #L264408.  if v3 != v5 then goto L26443c;
  #L26440c.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L264410.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L264416.  v0:= temp @kind object;
  #L264418.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L26441c.  if v0 == 0 then goto L264434;
  #L264420.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L264424.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L26442a.  v0:= temp @kind object;
  #L26442c.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L264432.  goto L26443a;
  #L264434.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L26443a.  return @kind void;
  #L26443c.  v5:= v3 + 1;
  #L264440.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.index` @type ^`int` := v5;
  #L264444.  v3:= v4[v3] @kind object;
  #L264448.  call `b`(v3, v11) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L26444e.  call temp:= `decrementAndGet`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L264454.  v3:= temp;
  #L264456.  if v3 != 0 then goto L264386;
  #L26445a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26446c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L264470.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L264474.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L26447a.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L264480.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L264494.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L264498.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L26449c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2644a2.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2644a6.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2644ac.  v0:= temp;
  #L2644ae.  if v0 == 0 then goto L2644ba;
  #L2644b2.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L2644b8.  goto L2644c0;
  #L2644ba.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2644c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2644d4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L2644d8.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2644de.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2644f0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2644f4.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2644fa.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L264500.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264514.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L26451a.  v0:= temp;
  #L26451c.  if v0 == 0 then goto L264530;
  #L264520.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L264524.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L26452a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L264530.  return @kind void;
}
