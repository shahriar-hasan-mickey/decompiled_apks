record `io.reactivex.internal.operators.maybe.MaybeToFlowable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.e` @kind class {
  `io.reactivex.k` `io.reactivex.internal.operators.maybe.MaybeToFlowable.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeToFlowable` v0 @kind this, `io.reactivex.k` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L268684.  call `<init>`(v0) @signature `Lio/reactivex/e;.<init>:()V` @kind direct;
  #L26868a.  v0.`io.reactivex.internal.operators.maybe.MaybeToFlowable.c` @type ^`io.reactivex.k` := v1 @kind object;
  #L26868e.  return @kind void;
}
procedure `void` `H`(`io.reactivex.internal.operators.maybe.MaybeToFlowable` v2 @kind this, `n.b.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.H:(Ln/b/c;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2686a0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeToFlowable.c` @type ^`io.reactivex.k` @kind object;
  #L2686a4.  v1:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber`;
  #L2686a8.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable$MaybeToFlowableSubscriber;.<init>:(Ln/b/c;)V` @kind direct;
  #L2686ae.  call `b`(v0, v1) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L2686b4.  return @kind void;
}
