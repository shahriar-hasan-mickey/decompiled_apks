record `io.reactivex.internal.operators.maybe.b` @kind class @AccessFlag FINAL extends `io.reactivex.j` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.b.b` @AccessFlag FINAL;
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.b.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.b` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.j` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/j;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L264cc4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L264cca.  v0.`io.reactivex.internal.operators.maybe.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L264cce.  v0.`io.reactivex.internal.operators.maybe.b.c` @type ^`io.reactivex.j` := v2 @kind object;
  #L264cd2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264ce4.  v0:= v1.`io.reactivex.internal.operators.maybe.b.c` @type ^`io.reactivex.j` @kind object;
  #L264ce8.  call `onComplete`(v0) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L264cee.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264d00.  v0:= v1.`io.reactivex.internal.operators.maybe.b.c` @type ^`io.reactivex.j` @kind object;
  #L264d04.  call `onError`(v0, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L264d0a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.b` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264d1c.  v0:= v1.`io.reactivex.internal.operators.maybe.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L264d20.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L264d26.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264d38.  v0:= v1.`io.reactivex.internal.operators.maybe.b.c` @type ^`io.reactivex.j` @kind object;
  #L264d3c.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/j;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L264d42.  return @kind void;
}
