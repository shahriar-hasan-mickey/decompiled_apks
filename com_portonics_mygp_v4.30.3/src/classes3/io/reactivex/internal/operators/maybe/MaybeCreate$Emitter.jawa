record `io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v0 @kind this, `io.reactivex.j` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.<init>:(Lio/reactivex/j;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26486c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L264872.  v0.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L264876.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L264888.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26488e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264788.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26478e.  v0:= temp @kind object;
  #L264790.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L264794.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L26479a.  v0:= temp;
  #L26479c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2648a0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2648a6.  v0:= temp @kind object;
  #L2648a8.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2648ac.  if v0 == v1 then goto L2648e4;
  #L2648b0.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2648b6.  v0:= temp @kind object;
  #L2648b8.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2648bc.  if v0 == v1 then goto L2648e4;
  #L2648c0.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @type ^`io.reactivex.j` @kind object;
  #L2648c4.  call `onComplete`(v1) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L2648ca.  if v0 == 0 then goto L2648e4;
  #L2648ce.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2648d4.  goto L2648e4;
  #L2648d6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2648d8.  if v0 == 0 then goto L2648e2;
  #L2648dc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2648e2.  throw v1;
  #L2648e4.  return @kind void;
  catch `java.lang.Throwable` @[L2648c0..L2648ca] goto L2648d6;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264904.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26490a.  v0:= temp;
  #L26490c.  if v0 != 0 then goto L264916;
  #L264910.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L264916.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L264928.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26492e.  v0:= temp @kind object;
  #L264930.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L264934.  if v0 == v1 then goto L26498a;
  #L264938.  call temp:= `getAndSet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26493e.  v0:= temp @kind object;
  #L264940.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L264944.  if v0 == v1 then goto L26498a;
  #L264948.  if v4 != 0 then goto L264966;
  #L26494c.  v4:= v3.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @type ^`io.reactivex.j` @kind object;
  #L264950.  v1:= new `java.lang.NullPointerException`;
  #L264954.  v2:= "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L264958.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L26495e.  call `onError`(v4, v1) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L264964.  goto L264970;
  #L264966.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @type ^`io.reactivex.j` @kind object;
  #L26496a.  call `onSuccess`(v1, v4) @signature `Lio/reactivex/j;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L264970.  if v0 == 0 then goto L26498a;
  #L264974.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26497a.  goto L26498a;
  #L26497c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26497e.  if v0 == 0 then goto L264988;
  #L264982.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L264988.  throw v4;
  #L26498a.  return @kind void;
  catch `java.lang.Throwable` @[L26494c..L264970] goto L26497c;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v1 @kind this, `io.reactivex.d0.f` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.setCancellable:(Lio/reactivex/d0/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2649a8.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L2649ac.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/d0/f;)V` @kind direct;
  #L2649b2.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @kind virtual;
  #L2649b8.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L2649cc.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2649d2.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L264828.  v0:= 2I;
  #L26482a.  v0:= new `java.lang.Object`[v0];
  #L26482e.  v1:= constclass @type ^`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` @kind object;
  #L264832.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L264838.  v1:= temp @kind object;
  #L26483a.  v2:= 0I;
  #L26483c.  v0[v2]:= v1 @kind object;
  #L264840.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L264846.  v1:= temp @kind object;
  #L264848.  v2:= 1I;
  #L26484a.  v0[v2]:= v1 @kind object;
  #L26484e.  v1:= "%s{%s}" @kind object;
  #L264852.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L264858.  v0:= temp @kind object;
  #L26485a.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2647b0.  if v3 != 0 then goto L2647c2;
  #L2647b4.  v3:= new `java.lang.NullPointerException`;
  #L2647b8.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L2647bc.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2647c2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2647c8.  v0:= temp @kind object;
  #L2647ca.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2647ce.  if v0 == v1 then goto L264808;
  #L2647d2.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2647d8.  v0:= temp @kind object;
  #L2647da.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2647de.  if v0 == v1 then goto L264808;
  #L2647e2.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.downstream` @type ^`io.reactivex.j` @kind object;
  #L2647e6.  call `onError`(v1, v3) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2647ec.  if v0 == 0 then goto L2647f6;
  #L2647f0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2647f6.  v3:= 1I;
  #L2647f8.  return v3;
  #L2647fa.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2647fc.  if v0 == 0 then goto L264806;
  #L264800.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L264806.  throw v3;
  #L264808.  v3:= 0I;
  #L26480a.  return v3;
  catch `java.lang.Throwable` @[L2647e2..L2647ec] goto L2647fa;
}
