record `io.reactivex.internal.operators.maybe.MaybeCallbackObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.j` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.d0.a` `io.reactivex.internal.operators.maybe.MaybeCallbackObserver.onComplete` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.operators.maybe.MaybeCallbackObserver.onError` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.operators.maybe.MaybeCallbackObserver.onSuccess` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeCallbackObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v0 @kind this, `io.reactivex.d0.g` v1 @kind object, `io.reactivex.d0.g` v2 @kind object, `io.reactivex.d0.a` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.<init>:(Lio/reactivex/d0/g;Lio/reactivex/d0/g;Lio/reactivex/d0/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L263fc0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L263fc6.  v0.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.onSuccess` @type ^`io.reactivex.d0.g` := v1 @kind object;
  #L263fca.  v0.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.onError` @type ^`io.reactivex.d0.g` := v2 @kind object;
  #L263fce.  v0.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.onComplete` @type ^`io.reactivex.d0.a` := v3 @kind object;
  #L263fd2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L263fe4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L263fea.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L263f74.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.onError` @type ^`io.reactivex.d0.g` @kind object;
  #L263f78.  v1:= `@@io.reactivex.internal.functions.Functions.f` @type ^`io.reactivex.d0.g` @kind object;
  #L263f7c.  if v0 == v1 then goto L263f84;
  #L263f80.  v0:= 1I;
  #L263f82.  goto L263f86;
  #L263f84.  v0:= 0I;
  #L263f86.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L263f98.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L263f9e.  v0:= temp @kind object;
  #L263fa0.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L263fa4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L263faa.  v0:= temp;
  #L263fac.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L263ffc.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L264000.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L264006.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.onComplete` @type ^`io.reactivex.d0.a` @kind object;
  #L26400a.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L264010.  goto L264020;
  #L264012.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L264014.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26401a.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L264020.  return @kind void;
  catch `java.lang.Throwable` @[L264006..L264010] goto L264012;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L264040.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L264044.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L26404a.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.onError` @type ^`io.reactivex.d0.g` @kind object;
  #L26404e.  call `accept`(v0, v5) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L264054.  goto L264080;
  #L264056.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L264058.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26405e.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L264062.  v2:= 2I;
  #L264064.  v2:= new `java.lang.Throwable`[v2];
  #L264068.  v3:= 0I;
  #L26406a.  v2[v3]:= v5 @kind object;
  #L26406e.  v5:= 1I;
  #L264070.  v2[v5]:= v0 @kind object;
  #L264074.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L26407a.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L264080.  return @kind void;
  catch `java.lang.Throwable` @[L26404a..L264054] goto L264056;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L2640a0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2640a6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCallbackObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2640b8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2640bc.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2640c2.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCallbackObserver.onSuccess` @type ^`io.reactivex.d0.g` @kind object;
  #L2640c6.  call `accept`(v0, v2) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L2640cc.  goto L2640dc;
  #L2640ce.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2640d0.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2640d6.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2640dc.  return @kind void;
  catch `java.lang.Throwable` @[L2640c2..L2640cc] goto L2640ce;
}
