record `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.j` @kind interface, `n.b.d` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.current` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.disposables` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.produced` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.requested` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.sources` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v0 @kind this, `n.b.c` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.<init>:(Ln/b/c;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L264544.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26454a.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.downstream` @type ^`n.b.c` := v1 @kind object;
  #L26454e.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.sources` @type ^`java.util.Iterator` := v2 @kind object;
  #L264552.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L264556.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L26455c.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L264560.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L264564.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L26456a.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L26456e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L264572.  v2:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L264576.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L26457c.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L264580.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264594.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L264598.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L26459e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2645b0.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2645b6.  v0:= temp;
  #L2645b8.  if v0 == 0 then goto L2645be;
  #L2645bc.  return @kind void;
  #L2645be.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2645c2.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.downstream` @type ^`n.b.c` @kind object;
  #L2645c6.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L2645ca.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L2645d0.  v3:= temp;
  #L2645d2.  v4:= 0I;
  #L2645d4.  if v3 == 0 then goto L2645e0;
  #L2645d8.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2645de.  return @kind void;
  #L2645e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2645e6.  v3:= temp @kind object;
  #L2645e8.  if v3 == 0 then goto L26469e;
  #L2645ec.  v5:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L2645f0.  v6:= 1I;
  #L2645f2.  if v3 == v5 then goto L26462c;
  #L2645f6.  v7:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.produced` @type ^`long` @kind wide;
  #L2645fa.  v5:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2645fe.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L264604.  v9:= temp @kind wide;
  #L264606.  v5:= lcmp(v7, v9);
  #L26460a.  if v5 == 0 then goto L264626;
  #L26460e.  v9:= 1L;
  #L264612.  v7:= v7 + v9 @kind long;
  #L264614.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.produced` @type ^`long` := v7 @kind wide;
  #L264618.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L26461e.  call `onNext`(v1, v3) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L264624.  goto L264632;
  #L264626.  v3:= 0I;
  #L264628.  v6:= 0I;
  #L26462a.  goto L264632;
  #L26462c.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L264632.  if v6 == 0 then goto L26469e;
  #L264636.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L26463c.  v3:= temp;
  #L26463e.  if v3 != 0 then goto L26469e;
  #L264642.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.sources` @type ^`java.util.Iterator` @kind object;
  #L264646.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L26464c.  v3:= temp;
  #L26464e.  if v3 == 0 then goto L264686;
  #L264652.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.sources` @type ^`java.util.Iterator` @kind object;
  #L264656.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L26465c.  v3:= temp @kind object;
  #L26465e.  v4:= "The source Iterator returned a null MaybeSource" @kind object;
  #L264662.  call temp:= `e`(v3, v4) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L264668.  v3:= temp @kind object;
  #L26466a.  v3:= (`io.reactivex.k`) v3 @kind object;
  #L26466e.  call `b`(v3, v11) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L264674.  goto L26469e;
  #L264676.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L264678.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26467e.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L264684.  return @kind void;
  #L264686.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L26468c.  goto L26469e;
  #L26468e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L264690.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L264696.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26469c.  return @kind void;
  #L26469e.  call temp:= `decrementAndGet`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2646a4.  v3:= temp;
  #L2646a6.  if v3 != 0 then goto L2645ca;
  #L2646aa.  return @kind void;
  catch `java.lang.Throwable` @[L264642..L26464e] goto L26468e;
  catch `java.lang.Throwable` @[L264652..L26466e] goto L264676;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2646d4.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2646d8.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L2646dc.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2646e2.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L2646e8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2646fc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.downstream` @type ^`n.b.c` @kind object;
  #L264700.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L264706.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264718.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L26471c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L264722.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264734.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L264738.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L26473e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L264744.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264758.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L26475e.  v0:= temp;
  #L264760.  if v0 == 0 then goto L264774;
  #L264764.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L264768.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L26476e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L264774.  return @kind void;
}
