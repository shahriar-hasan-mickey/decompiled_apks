record `io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.j` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.d0.g` `io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @AccessFlag FINAL;
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v0 @kind this, `io.reactivex.j` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.d0.g` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.<init>:(Lio/reactivex/j;Ljava/lang/Object;Lio/reactivex/d0/g;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2689b4.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2689ba.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L2689be.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` := v3 @kind object;
  #L2689c2.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` := v4 @kind boolean;
  #L2689c6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2689d8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2689dc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2689e2.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2689e6.  v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L2689ea.  call `disposeResourceAfter`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L2689f0.  return @kind void;
}
procedure `void` `disposeResourceAfter`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.disposeResourceAfter:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L268a04.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L268a0a.  v0:= temp @kind object;
  #L268a0c.  if v0 == v2 then goto L268a2a;
  #L268a10.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L268a14.  call `accept`(v1, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L268a1a.  goto L268a2a;
  #L268a1c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L268a1e.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L268a24.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L268a2a.  return @kind void;
  catch `java.lang.Throwable` @[L268a10..L268a1a] goto L268a1c;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L268994.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L268998.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L26899e.  v0:= temp;
  #L2689a0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L268a48.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L268a4c.  v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L268a50.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L268a54.  if v0 == 0 then goto L268a84;
  #L268a58.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L268a5e.  v0:= temp @kind object;
  #L268a60.  if v0 == v2 then goto L268a82;
  #L268a64.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L268a68.  call `accept`(v1, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L268a6e.  goto L268a84;
  #L268a70.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L268a72.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L268a78.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L268a7c.  call `onError`(v1, v0) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L268a82.  return @kind void;
  #L268a84.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L268a88.  call `onComplete`(v0) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L268a8e.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L268a92.  if v0 != 0 then goto L268a9c;
  #L268a96.  call `disposeResourceAfter`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L268a9c.  return @kind void;
  catch `java.lang.Throwable` @[L268a64..L268a6e] goto L268a70;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L268abc.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L268ac0.  v4.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L268ac4.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L268ac8.  if v0 == 0 then goto L268b0e;
  #L268acc.  call temp:= `getAndSet`(v4, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L268ad2.  v0:= temp @kind object;
  #L268ad4.  if v0 == v4 then goto L268b0c;
  #L268ad8.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L268adc.  call `accept`(v1, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L268ae2.  goto L268b0e;
  #L268ae4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L268ae6.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L268aec.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L268af0.  v2:= 2I;
  #L268af2.  v2:= new `java.lang.Throwable`[v2];
  #L268af6.  v3:= 0I;
  #L268af8.  v2[v3]:= v5 @kind object;
  #L268afc.  v5:= 1I;
  #L268afe.  v2[v5]:= v0 @kind object;
  #L268b02.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L268b08.  v5:= v1 @kind object;
  #L268b0a.  goto L268b0e;
  #L268b0c.  return @kind void;
  #L268b0e.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L268b12.  call `onError`(v0, v5) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L268b18.  v5:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L268b1c.  if v5 != 0 then goto L268b26;
  #L268b20.  call `disposeResourceAfter`(v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L268b26.  return @kind void;
  catch `java.lang.Throwable` @[L268ad8..L268ae2] goto L268ae4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L268b44.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L268b48.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L268b4e.  v0:= temp;
  #L268b50.  if v0 == 0 then goto L268b62;
  #L268b54.  v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L268b58.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L268b5c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/j;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L268b62.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L268b74.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L268b78.  v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L268b7c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L268b80.  if v0 == 0 then goto L268bb0;
  #L268b84.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L268b8a.  v0:= temp @kind object;
  #L268b8c.  if v0 == v2 then goto L268bae;
  #L268b90.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L268b94.  call `accept`(v1, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L268b9a.  goto L268bb0;
  #L268b9c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L268b9e.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L268ba4.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L268ba8.  call `onError`(v0, v3) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L268bae.  return @kind void;
  #L268bb0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L268bb4.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/j;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L268bba.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$UsingObserver.eager` @type ^`boolean` @kind boolean;
  #L268bbe.  if v3 != 0 then goto L268bc8;
  #L268bc2.  call `disposeResourceAfter`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$UsingObserver;.disposeResourceAfter:()V` @kind virtual;
  #L268bc8.  return @kind void;
  catch `java.lang.Throwable` @[L268b90..L268b9a] goto L268b9c;
}
