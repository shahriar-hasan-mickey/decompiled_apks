record `io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.j` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.task` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v0 @kind this, `io.reactivex.j` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.<init>:(Lio/reactivex/j;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26761c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L267622.  v0.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L267626.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L26762a.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L267630.  v0.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L267634.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L267648.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26764e.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L267652.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L267658.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2675f4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2675fa.  v0:= temp @kind object;
  #L2675fc.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L267600.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L267606.  v0:= temp;
  #L267608.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26766c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L267670.  call `onComplete`(v0) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L267676.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L267688.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L26768c.  call `onError`(v0, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L267692.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L2676a4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2676aa.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2676bc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L2676c0.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/j;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L2676c6.  return @kind void;
}
