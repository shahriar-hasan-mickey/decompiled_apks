record `io.reactivex.internal.operators.maybe.j` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.i` @kind class, `java.util.concurrent.Callable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.maybe.j.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.j` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/j;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2662b8.  call `<init>`(v0) @signature `Lio/reactivex/i;.<init>:()V` @kind direct;
  #L2662be.  v0.`io.reactivex.internal.operators.maybe.j.b` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L2662c2.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.maybe.j` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/j;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266298.  v0:= v1.`io.reactivex.internal.operators.maybe.j.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L26629c.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L2662a2.  v0:= temp @kind object;
  #L2662a4.  return v0 @kind object;
}
procedure `void` `u`(`io.reactivex.internal.operators.maybe.j` v2 @kind this, `io.reactivex.j` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/j;.u:(Lio/reactivex/j;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2662d4.  call temp:= `b`() @signature `Lio/reactivex/disposables/c;.b:()Lio/reactivex/disposables/b;` @kind static;
  #L2662da.  v0:= temp @kind object;
  #L2662dc.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/j;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2662e2.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L2662e8.  v1:= temp;
  #L2662ea.  if v1 != 0 then goto L26633c;
  #L2662ee.  v1:= v2.`io.reactivex.internal.operators.maybe.j.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L2662f2.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L2662f8.  v1:= temp @kind object;
  #L2662fa.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L266300.  v0:= temp;
  #L266302.  if v0 != 0 then goto L26633c;
  #L266306.  if v1 != 0 then goto L266312;
  #L26630a.  call `onComplete`(v3) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L266310.  goto L26633c;
  #L266312.  call `onSuccess`(v3, v1) @signature `Lio/reactivex/j;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L266318.  goto L26633c;
  #L26631a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26631c.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L266322.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L266328.  v0:= temp;
  #L26632a.  if v0 != 0 then goto L266336;
  #L26632e.  call `onError`(v3, v1) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L266334.  goto L26633c;
  #L266336.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26633c.  return @kind void;
  catch `java.lang.Throwable` @[L2662ee..L2662fa] goto L26631a;
}
