record `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.j` @kind interface {
  `boolean` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.consumed` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.outputFused` @AccessFlag ;
  `io.reactivex.internal.operators.maybe.t` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.set` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.sourceCount` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v0 @kind this, `n.b.c` v1 @kind object, `int` v2 , `io.reactivex.internal.operators.maybe.t` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.<init>:(Ln/b/c;ILio/reactivex/internal/operators/maybe/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L266a3c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L266a42.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.downstream` @type ^`n.b.c` := v1 @kind object;
  #L266a46.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.sourceCount` @type ^`int` := v2;
  #L266a4a.  v1:= new `io.reactivex.disposables.a`;
  #L266a4e.  call `<init>`(v1) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L266a54.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.set` @type ^`io.reactivex.disposables.a` := v1 @kind object;
  #L266a58.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L266a5c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L266a62.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L266a66.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L266a6a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L266a70.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L266a74.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.t` := v3 @kind object;
  #L266a78.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266a8c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L266a90.  if v0 != 0 then goto L266aba;
  #L266a94.  v0:= 1I;
  #L266a96.  v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L266a9a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L266a9e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L266aa4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L266aaa.  v0:= temp;
  #L266aac.  if v0 != 0 then goto L266aba;
  #L266ab0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.t` @kind object;
  #L266ab4.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L266aba.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266acc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.t` @kind object;
  #L266ad0.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L266ad6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L266ae8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L266aee.  v0:= temp;
  #L266af0.  if v0 == 0 then goto L266af6;
  #L266af4.  return @kind void;
  #L266af6.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.outputFused` @type ^`boolean` @kind boolean;
  #L266afa.  if v0 == 0 then goto L266b06;
  #L266afe.  call `drainFused`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drainFused:()V` @kind virtual;
  #L266b04.  goto L266b0c;
  #L266b06.  call `drainNormal`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drainNormal:()V` @kind virtual;
  #L266b0c.  return @kind void;
}
procedure `void` `drainFused`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v6 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drainFused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L266b20.  v0:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.downstream` @type ^`n.b.c` @kind object;
  #L266b24.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.t` @kind object;
  #L266b28.  v2:= 1I;
  #L266b2a.  v3:= 1I;
  #L266b2c.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L266b30.  if v4 == 0 then goto L266b3c;
  #L266b34.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L266b3a.  return @kind void;
  #L266b3c.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L266b40.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L266b46.  v4:= temp @kind object;
  #L266b48.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L266b4c.  if v4 == 0 then goto L266b5e;
  #L266b50.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L266b56.  call `onError`(v0, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L266b5c.  return @kind void;
  #L266b5e.  call temp:= `producerIndex`(v1) @signature `Lio/reactivex/internal/operators/maybe/t;.producerIndex:()I` @kind interface;
  #L266b64.  v4:= temp;
  #L266b66.  v5:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.sourceCount` @type ^`int`;
  #L266b6a.  if v4 != v5 then goto L266b72;
  #L266b6e.  v4:= 1I;
  #L266b70.  goto L266b74;
  #L266b72.  v4:= 0I;
  #L266b74.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L266b7a.  v5:= temp;
  #L266b7c.  if v5 != 0 then goto L266b88;
  #L266b80.  v5:= 0I;
  #L266b82.  call `onNext`(v0, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L266b88.  if v4 == 0 then goto L266b94;
  #L266b8c.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L266b92.  return @kind void;
  #L266b94.  v3:= -v3 @kind int;
  #L266b96.  call temp:= `addAndGet`(v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L266b9c.  v3:= temp;
  #L266b9e.  if v3 != 0 then goto L266b2c;
  #L266ba2.  return @kind void;
}
procedure `void` `drainNormal`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v9 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drainNormal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L266bb4.  v0:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.downstream` @type ^`n.b.c` @kind object;
  #L266bb8.  v1:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.t` @kind object;
  #L266bbc.  v2:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.consumed` @type ^`long` @kind wide;
  #L266bc0.  v4:= 1I;
  #L266bc2.  v5:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L266bc6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L266bcc.  v5:= temp @kind wide;
  #L266bce.  v7:= lcmp(v2, v5);
  #L266bd2.  if v7 == 0 then goto L266c50;
  #L266bd6.  v7:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L266bda.  if v7 == 0 then goto L266be6;
  #L266bde.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L266be4.  return @kind void;
  #L266be6.  v7:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L266bea.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L266bf0.  v7:= temp @kind object;
  #L266bf2.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L266bf6.  if v7 == 0 then goto L266c14;
  #L266bfa.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L266c00.  v1:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L266c04.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L266c0a.  v1:= temp @kind object;
  #L266c0c.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L266c12.  return @kind void;
  #L266c14.  call temp:= `consumerIndex`(v1) @signature `Lio/reactivex/internal/operators/maybe/t;.consumerIndex:()I` @kind interface;
  #L266c1a.  v7:= temp;
  #L266c1c.  v8:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.sourceCount` @type ^`int`;
  #L266c20.  if v7 != v8 then goto L266c2c;
  #L266c24.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L266c2a.  return @kind void;
  #L266c2c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/maybe/t;.poll:()Ljava/lang/Object;` @kind interface;
  #L266c32.  v7:= temp @kind object;
  #L266c34.  if v7 != 0 then goto L266c3a;
  #L266c38.  goto L266c50;
  #L266c3a.  v8:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L266c3e.  if v7 == v8 then goto L266bce;
  #L266c42.  call `onNext`(v0, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L266c48.  v7:= 1L;
  #L266c4c.  v2:= v2 + v7 @kind long;
  #L266c4e.  goto L266bce;
  #L266c50.  v7:= lcmp(v2, v5);
  #L266c54.  if v7 != 0 then goto L266cb6;
  #L266c58.  v5:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L266c5c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L266c62.  v5:= temp @kind object;
  #L266c64.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L266c68.  if v5 == 0 then goto L266c86;
  #L266c6c.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L266c72.  v1:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L266c76.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L266c7c.  v1:= temp @kind object;
  #L266c7e.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L266c84.  return @kind void;
  #L266c86.  call temp:= `peek`(v1) @signature `Lio/reactivex/internal/operators/maybe/t;.peek:()Ljava/lang/Object;` @kind interface;
  #L266c8c.  v5:= temp @kind object;
  #L266c8e.  v6:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L266c92.  if v5 != v6 then goto L266c9e;
  #L266c96.  call `drop`(v1) @signature `Lio/reactivex/internal/operators/maybe/t;.drop:()V` @kind interface;
  #L266c9c.  goto L266c86;
  #L266c9e.  call temp:= `consumerIndex`(v1) @signature `Lio/reactivex/internal/operators/maybe/t;.consumerIndex:()I` @kind interface;
  #L266ca4.  v5:= temp;
  #L266ca6.  v6:= v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.sourceCount` @type ^`int`;
  #L266caa.  if v5 != v6 then goto L266cb6;
  #L266cae.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L266cb4.  return @kind void;
  #L266cb6.  v9.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.consumed` @type ^`long` := v2 @kind wide;
  #L266cba.  v4:= -v4 @kind int;
  #L266cbc.  call temp:= `addAndGet`(v9, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L266cc2.  v4:= temp;
  #L266cc4.  if v4 != 0 then goto L266bc2;
  #L266cc8.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.isCancelled:()Z` @AccessFlag  {
    temp;
    v0;

  #L2669b8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.cancelled` @type ^`boolean` @kind boolean;
  #L2669bc.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2669d0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.t` @kind object;
  #L2669d4.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L2669da.  v0:= temp;
  #L2669dc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L266cdc.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.t` @kind object;
  #L266ce0.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L266ce4.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L266cea.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drain:()V` @kind virtual;
  #L266cf0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266d04.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L266d08.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L266d0e.  v0:= temp;
  #L266d10.  if v0 == 0 then goto L266d34;
  #L266d14.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L266d18.  call `dispose`(v2) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L266d1e.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.t` @kind object;
  #L266d22.  v0:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L266d26.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L266d2c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drain:()V` @kind virtual;
  #L266d32.  goto L266d3a;
  #L266d34.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L266d3a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266d4c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L266d50.  call temp:= `b`(v0, v2) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L266d56.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266d68.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.t` @kind object;
  #L266d6c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L266d72.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drain:()V` @kind virtual;
  #L266d78.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L266a14.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.queue` @type ^`io.reactivex.internal.operators.maybe.t` @kind object;
  #L266a18.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/operators/maybe/t;.poll:()Ljava/lang/Object;` @kind interface;
  #L266a1e.  v0:= temp @kind object;
  #L266a20.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L266a24.  if v0 == v1 then goto L266a14;
  #L266a28.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266d8c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L266d92.  v0:= temp;
  #L266d94.  if v0 == 0 then goto L266da8;
  #L266d98.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L266d9c.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L266da2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.drain:()V` @kind virtual;
  #L266da8.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MergeMaybeObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2669f0.  v0:= 2I;
  #L2669f2.  v2:= v2 ^& v0 @kind int;
  #L2669f4.  if v2 == 0 then goto L266a00;
  #L2669f8.  v2:= 1I;
  #L2669fa.  v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L2669fe.  return v0;
  #L266a00.  v2:= 0I;
  #L266a02.  return v2;
}
