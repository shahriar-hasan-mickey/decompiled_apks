record `io.reactivex.internal.operators.maybe.v` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.maybe.a` @kind class {
  `io.reactivex.d0.g` `io.reactivex.internal.operators.maybe.v.c` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.operators.maybe.v.d` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.operators.maybe.v.e` @AccessFlag FINAL;
  `io.reactivex.d0.a` `io.reactivex.internal.operators.maybe.v.f` @AccessFlag FINAL;
  `io.reactivex.d0.a` `io.reactivex.internal.operators.maybe.v.g` @AccessFlag FINAL;
  `io.reactivex.d0.a` `io.reactivex.internal.operators.maybe.v.h` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.v` v0 @kind this, `io.reactivex.k` v1 @kind object, `io.reactivex.d0.g` v2 @kind object, `io.reactivex.d0.g` v3 @kind object, `io.reactivex.d0.g` v4 @kind object, `io.reactivex.d0.a` v5 @kind object, `io.reactivex.d0.a` v6 @kind object, `io.reactivex.d0.a` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/v;.<init>:(Lio/reactivex/k;Lio/reactivex/d0/g;Lio/reactivex/d0/g;Lio/reactivex/d0/g;Lio/reactivex/d0/a;Lio/reactivex/d0/a;Lio/reactivex/d0/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L26759c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/a;.<init>:(Lio/reactivex/k;)V` @kind direct;
  #L2675a2.  v0.`io.reactivex.internal.operators.maybe.v.c` @type ^`io.reactivex.d0.g` := v2 @kind object;
  #L2675a6.  v0.`io.reactivex.internal.operators.maybe.v.d` @type ^`io.reactivex.d0.g` := v3 @kind object;
  #L2675aa.  v0.`io.reactivex.internal.operators.maybe.v.e` @type ^`io.reactivex.d0.g` := v4 @kind object;
  #L2675ae.  v0.`io.reactivex.internal.operators.maybe.v.f` @type ^`io.reactivex.d0.a` := v5 @kind object;
  #L2675b2.  v0.`io.reactivex.internal.operators.maybe.v.g` @type ^`io.reactivex.d0.a` := v6 @kind object;
  #L2675b6.  v0.`io.reactivex.internal.operators.maybe.v.h` @type ^`io.reactivex.d0.a` := v7 @kind object;
  #L2675ba.  return @kind void;
}
procedure `void` `u`(`io.reactivex.internal.operators.maybe.v` v2 @kind this, `io.reactivex.j` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/v;.u:(Lio/reactivex/j;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2675cc.  v0:= v2.`io.reactivex.internal.operators.maybe.a.b` @type ^`io.reactivex.k` @kind object;
  #L2675d0.  v1:= new `io.reactivex.internal.operators.maybe.u`;
  #L2675d4.  call `<init>`(v1, v3, v2) @signature `Lio/reactivex/internal/operators/maybe/u;.<init>:(Lio/reactivex/j;Lio/reactivex/internal/operators/maybe/v;)V` @kind direct;
  #L2675da.  call `b`(v0, v1) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L2675e0.  return @kind void;
}
