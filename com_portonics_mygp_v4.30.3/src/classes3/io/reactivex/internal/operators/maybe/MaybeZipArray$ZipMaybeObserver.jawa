record `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.j` @kind interface {
  `int` `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver` v0 @kind this, `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L268dac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L268db2.  v0.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver.parent` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` := v1 @kind object;
  #L268db6.  v0.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver.index` @type ^`int` := v2;
  #L268dba.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L268dcc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L268dd2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L268de4.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver.parent` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` @kind object;
  #L268de8.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver.index` @type ^`int`;
  #L268dec.  call `innerComplete`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.innerComplete:(I)V` @kind virtual;
  #L268df2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L268e04.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver.parent` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` @kind object;
  #L268e08.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver.index` @type ^`int`;
  #L268e0c.  call `innerError`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.innerError:(Ljava/lang/Throwable;I)V` @kind virtual;
  #L268e12.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L268e24.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L268e2a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L268e3c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver.parent` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` @kind object;
  #L268e40.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver.index` @type ^`int`;
  #L268e44.  call `innerSuccess`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.innerSuccess:(Ljava/lang/Object;I)V` @kind virtual;
  #L268e4a.  return @kind void;
}
