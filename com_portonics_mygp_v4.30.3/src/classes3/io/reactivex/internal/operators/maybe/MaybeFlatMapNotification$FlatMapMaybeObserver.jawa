record `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.j` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onCompleteSupplier` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onErrorMapper` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onSuccessMapper` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.j` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.<init>:(Lio/reactivex/j;Lio/reactivex/d0/k;Lio/reactivex/d0/k;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L265b70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L265b76.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L265b7a.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onSuccessMapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L265b7e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onErrorMapper` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L265b82.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onCompleteSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L265b86.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265b98.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L265b9e.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L265ba2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L265ba8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265b48.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L265b4e.  v0:= temp @kind object;
  #L265b50.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L265b54.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L265b5a.  v0:= temp;
  #L265b5c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L265bbc.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onCompleteSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L265bc0.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L265bc6.  v0:= temp @kind object;
  #L265bc8.  v1:= "The onCompleteSupplier returned a null MaybeSource" @kind object;
  #L265bcc.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L265bd2.  v0:= temp @kind object;
  #L265bd4.  v0:= (`io.reactivex.k`) v0 @kind object;
  #L265bd8.  v1:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver$a`;
  #L265bdc.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;)V` @kind direct;
  #L265be2.  call `b`(v0, v1) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L265be8.  return @kind void;
  #L265bea.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L265bec.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L265bf2.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L265bf6.  call `onError`(v1, v0) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L265bfc.  return @kind void;
  catch `java.lang.Exception` @[L265bbc..L265bd8] goto L265bea;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L265c20.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onErrorMapper` @type ^`io.reactivex.d0.k` @kind object;
  #L265c24.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L265c2a.  v0:= temp @kind object;
  #L265c2c.  v1:= "The onErrorMapper returned a null MaybeSource" @kind object;
  #L265c30.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L265c36.  v0:= temp @kind object;
  #L265c38.  v0:= (`io.reactivex.k`) v0 @kind object;
  #L265c3c.  v6:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver$a`;
  #L265c40.  call `<init>`(v6, v5) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;)V` @kind direct;
  #L265c46.  call `b`(v0, v6) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L265c4c.  return @kind void;
  #L265c4e.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L265c50.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L265c56.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L265c5a.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L265c5e.  v3:= 2I;
  #L265c60.  v3:= new `java.lang.Throwable`[v3];
  #L265c64.  v4:= 0I;
  #L265c66.  v3[v4]:= v6 @kind object;
  #L265c6a.  v6:= 1I;
  #L265c6c.  v3[v6]:= v0 @kind object;
  #L265c70.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L265c76.  call `onError`(v1, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L265c7c.  return @kind void;
  catch `java.lang.Exception` @[L265c20..L265c3c] goto L265c4e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265ca0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L265ca4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L265caa.  v0:= temp;
  #L265cac.  if v0 == 0 then goto L265cbe;
  #L265cb0.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L265cb4.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L265cb8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/j;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L265cbe.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265cd0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.onSuccessMapper` @type ^`io.reactivex.d0.k` @kind object;
  #L265cd4.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L265cda.  v2:= temp @kind object;
  #L265cdc.  v0:= "The onSuccessMapper returned a null MaybeSource" @kind object;
  #L265ce0.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L265ce6.  v2:= temp @kind object;
  #L265ce8.  v2:= (`io.reactivex.k`) v2 @kind object;
  #L265cec.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver$a`;
  #L265cf0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification$FlatMapMaybeObserver;)V` @kind direct;
  #L265cf6.  call `b`(v2, v0) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L265cfc.  return @kind void;
  #L265cfe.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L265d00.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L265d06.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L265d0a.  call `onError`(v0, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L265d10.  return @kind void;
  catch `java.lang.Exception` @[L265cd0..L265cec] goto L265cfe;
}
