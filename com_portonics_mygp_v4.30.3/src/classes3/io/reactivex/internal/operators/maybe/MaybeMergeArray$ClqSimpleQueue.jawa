record `io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue` @kind class @AccessFlag FINAL extends `java.util.concurrent.ConcurrentLinkedQueue` @kind class, `io.reactivex.internal.operators.maybe.t` @kind interface {
  `int` `io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue.consumerIndex` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue.producerIndex` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$ClqSimpleQueue;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L266978.  call `<init>`(v1) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L26697e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L266982.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L266988.  v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L26698c.  return @kind void;
}
procedure `int` `consumerIndex`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$ClqSimpleQueue;.consumerIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266914.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue.consumerIndex` @type ^`int`;
  #L266918.  return v0;
}
procedure `void` `drop`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$ClqSimpleQueue;.drop:()V` @AccessFlag PUBLIC {
    temp;

  #L2669a0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$ClqSimpleQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L2669a6.  return @kind void;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$ClqSimpleQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2668d4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2668d8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2668de.  call temp:= `offer`(v1, v2) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind super;
  #L2668e4.  v2:= temp;
  #L2668e6.  return v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$ClqSimpleQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L2668f8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2668fc.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L266902.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$ClqSimpleQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26694c.  call temp:= `poll`(v2) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind super;
  #L266952.  v0:= temp @kind object;
  #L266954.  if v0 == 0 then goto L266964;
  #L266958.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue.consumerIndex` @type ^`int`;
  #L26695c.  v1:= v1 + 1;
  #L266960.  v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue.consumerIndex` @type ^`int` := v1;
  #L266964.  return v0 @kind object;
}
procedure `int` `producerIndex`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$ClqSimpleQueue;.producerIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26692c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L266930.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L266936.  v0:= temp;
  #L266938.  return v0;
}
