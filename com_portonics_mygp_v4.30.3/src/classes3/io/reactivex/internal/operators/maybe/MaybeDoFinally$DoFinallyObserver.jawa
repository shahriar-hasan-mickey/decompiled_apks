record `io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.j` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.a` `io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.onFinally` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v0 @kind this, `io.reactivex.j` v1 @kind object, `io.reactivex.d0.a` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.<init>:(Lio/reactivex/j;Lio/reactivex/d0/a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L264e44.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L264e4a.  v0.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L264e4e.  v0.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.onFinally` @type ^`io.reactivex.d0.a` := v2 @kind object;
  #L264e52.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264e64.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L264e68.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L264e6e.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.runFinally:()V` @kind virtual;
  #L264e74.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264e24.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L264e28.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L264e2e.  v0:= temp;
  #L264e30.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264e88.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L264e8c.  call `onComplete`(v0) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L264e92.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.runFinally:()V` @kind virtual;
  #L264e98.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264eac.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L264eb0.  call `onError`(v0, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L264eb6.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.runFinally:()V` @kind virtual;
  #L264ebc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264ed0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L264ed4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L264eda.  v0:= temp;
  #L264edc.  if v0 == 0 then goto L264eee;
  #L264ee0.  v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L264ee4.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L264ee8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/j;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L264eee.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264f00.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L264f04.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/j;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L264f0a.  call `runFinally`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.runFinally:()V` @kind virtual;
  #L264f10.  return @kind void;
}
procedure `void` `runFinally`(`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally$DoFinallyObserver;.runFinally:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L264f24.  v0:= 0I;
  #L264f26.  v1:= 1I;
  #L264f28.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L264f2e.  v0:= temp;
  #L264f30.  if v0 == 0 then goto L264f4e;
  #L264f34.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver.onFinally` @type ^`io.reactivex.d0.a` @kind object;
  #L264f38.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L264f3e.  goto L264f4e;
  #L264f40.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L264f42.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L264f48.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L264f4e.  return @kind void;
  catch `java.lang.Throwable` @[L264f34..L264f3e] goto L264f40;
}
