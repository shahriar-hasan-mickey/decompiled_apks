record `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.j` @kind interface {
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @AccessFlag VOLATILE;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.<init>:(Ln/b/c;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L265788.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L26578e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` := v1 @kind object;
  #L265792.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L265796.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L26579a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L2657a0.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L2657a4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2657b8.  v0:= 1I;
  #L2657ba.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2657be.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2657c2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2657c8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2657cc.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L2657d0.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2657e4.  v0:= 0I;
  #L2657e6.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v0 @kind object;
  #L2657ea.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2657fc.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L265802.  v0:= temp;
  #L265804.  if v0 == 0 then goto L26580a;
  #L265808.  return @kind void;
  #L26580a.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` @kind object;
  #L26580e.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L265812.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @type ^`boolean` @kind boolean;
  #L265816.  if v2 == 0 then goto L26582e;
  #L26581a.  if v1 == 0 then goto L26582e;
  #L26581e.  v1:= 0I;
  #L265820.  call `onNext`(v0, v1) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L265826.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L26582c.  return @kind void;
  #L26582e.  v2:= 1I;
  #L265830.  if v1 == 0 then goto L2658e2;
  #L265834.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L265838.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L26583e.  v3:= temp @kind wide;
  #L265840.  v5:= 9223372036854775807L;
  #L26584a.  v7:= lcmp(v3, v5);
  #L26584e.  if v7 != 0 then goto L26585a;
  #L265852.  call `fastPath`(v11, v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.fastPath:(Ln/b/c;Ljava/util/Iterator;)V` @kind virtual;
  #L265858.  return @kind void;
  #L26585a.  v5:= 0L;
  #L26585e.  v7:= v5 @kind wide;
  #L265860.  v9:= lcmp(v7, v3);
  #L265864.  if v9 == 0 then goto L2658d0;
  #L265868.  v9:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L26586c.  if v9 == 0 then goto L265872;
  #L265870.  return @kind void;
  #L265872.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L265878.  v9:= temp @kind object;
  #L26587a.  v10:= "The iterator returned a null value" @kind object;
  #L26587e.  call temp:= `e`(v9, v10) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L265884.  v9:= temp @kind object;
  #L265886.  call `onNext`(v0, v9) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26588c.  v9:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L265890.  if v9 == 0 then goto L265896;
  #L265894.  return @kind void;
  #L265896.  v9:= 1L;
  #L26589a.  v7:= v7 + v9 @kind long;
  #L26589c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2658a2.  v9:= temp;
  #L2658a4.  if v9 != 0 then goto L265860;
  #L2658a8.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2658ae.  return @kind void;
  #L2658b0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2658b2.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2658b8.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2658be.  return @kind void;
  #L2658c0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2658c2.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2658c8.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2658ce.  return @kind void;
  #L2658d0.  v3:= lcmp(v7, v5);
  #L2658d4.  if v3 == 0 then goto L2658e2;
  #L2658d8.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2658dc.  call temp:= `e`(v3, v7) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L2658e2.  v2:= -v2 @kind int;
  #L2658e4.  call temp:= `addAndGet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2658ea.  v2:= temp;
  #L2658ec.  if v2 != 0 then goto L2658f2;
  #L2658f0.  return @kind void;
  #L2658f2.  if v1 != 0 then goto L265830;
  #L2658f6.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L2658fa.  goto L265830;
  catch `java.lang.Throwable` @[L265872..L265886] goto L2658c0;
  catch `java.lang.Throwable` @[L26589c..L2658a4] goto L2658b0;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `n.b.c` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.fastPath:(Ln/b/c;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L265924.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L265928.  if v0 == 0 then goto L26592e;
  #L26592c.  return @kind void;
  #L26592e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L265934.  v0:= temp @kind object;
  #L265936.  call `onNext`(v2, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26593c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L265940.  if v0 == 0 then goto L265946;
  #L265944.  return @kind void;
  #L265946.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L26594c.  v0:= temp;
  #L26594e.  if v0 != 0 then goto L265924;
  #L265952.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L265958.  return @kind void;
  #L26595a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26595c.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L265962.  call `onError`(v2, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L265968.  return @kind void;
  #L26596a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26596c.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L265972.  call `onError`(v2, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L265978.  return @kind void;
  catch `java.lang.Throwable` @[L26592e..L265936] goto L26596a;
  catch `java.lang.Throwable` @[L265946..L26594e] goto L26595a;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265700.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L265704.  if v0 != 0 then goto L26570c;
  #L265708.  v0:= 1I;
  #L26570a.  goto L26570e;
  #L26570c.  v0:= 0I;
  #L26570e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2659a4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` @kind object;
  #L2659a8.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2659ae.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2659c0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2659c4.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L2659c8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` @kind object;
  #L2659cc.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2659d2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2659e4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2659e8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2659ee.  v0:= temp;
  #L2659f0.  if v0 == 0 then goto L265a02;
  #L2659f4.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L2659f8.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` @kind object;
  #L2659fc.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L265a02.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265a14.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L265a18.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L265a1e.  v2:= temp @kind object;
  #L265a20.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L265a24.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L265a2a.  v2:= temp @kind object;
  #L265a2c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L265a32.  v0:= temp;
  #L265a34.  if v0 != 0 then goto L265a44;
  #L265a38.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` @kind object;
  #L265a3c.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L265a42.  return @kind void;
  #L265a44.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v2 @kind object;
  #L265a48.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @kind virtual;
  #L265a4e.  return @kind void;
  #L265a50.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L265a52.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L265a58.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` @kind object;
  #L265a5c.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L265a62.  return @kind void;
  catch `java.lang.Throwable` @[L265a14..L265a34] goto L265a50;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L265744.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L265748.  v1:= 0I;
  #L26574a.  if v0 == 0 then goto L265774;
  #L26574e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L265754.  v2:= temp @kind object;
  #L265756.  v3:= "The iterator returned a null value" @kind object;
  #L26575a.  call temp:= `e`(v2, v3) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L265760.  v2:= temp @kind object;
  #L265762.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L265768.  v0:= temp;
  #L26576a.  if v0 != 0 then goto L265772;
  #L26576e.  v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v1 @kind object;
  #L265772.  return v2 @kind object;
  #L265774.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265a80.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L265a86.  v0:= temp;
  #L265a88.  if v0 == 0 then goto L265a9c;
  #L265a8c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L265a90.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L265a96.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @kind virtual;
  #L265a9c.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$FlatMapIterableObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265720.  v0:= 2I;
  #L265722.  v2:= v2 ^& v0 @kind int;
  #L265724.  if v2 == 0 then goto L265730;
  #L265728.  v2:= 1I;
  #L26572a.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L26572e.  return v0;
  #L265730.  v2:= 0I;
  #L265732.  return v2;
}
