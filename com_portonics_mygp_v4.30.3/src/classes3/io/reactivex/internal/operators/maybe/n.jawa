record `io.reactivex.internal.operators.maybe.n` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.maybe.a` @kind class {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.n` v0 @kind this, `io.reactivex.k` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/n;.<init>:(Lio/reactivex/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2666cc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/a;.<init>:(Lio/reactivex/k;)V` @kind direct;
  #L2666d2.  return @kind void;
}
procedure `void` `u`(`io.reactivex.internal.operators.maybe.n` v2 @kind this, `io.reactivex.j` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/n;.u:(Lio/reactivex/j;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2666e4.  v0:= v2.`io.reactivex.internal.operators.maybe.a.b` @type ^`io.reactivex.k` @kind object;
  #L2666e8.  v1:= new `io.reactivex.internal.operators.maybe.m`;
  #L2666ec.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/m;.<init>:(Lio/reactivex/j;)V` @kind direct;
  #L2666f2.  call `b`(v0, v1) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L2666f8.  return @kind void;
}
