record `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.j` @kind interface, `n.b.d` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.current` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.disposables` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.index` @AccessFlag ;
  `long` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.produced` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.requested` @AccessFlag FINAL;
  `io.reactivex.k`[] `io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.sources` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.k`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.<init>:(Ln/b/c;[Lio/reactivex/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2640fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L264102.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.downstream` @type ^`n.b.c` := v1 @kind object;
  #L264106.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.sources` @type ^`io.reactivex.k`[] := v2 @kind object;
  #L26410a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L26410e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L264114.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L264118.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L26411c.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L264122.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L264126.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L26412a.  v2:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L26412e.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L264134.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L264138.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26414c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L264150.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L264156.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L264168.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26416e.  v0:= temp;
  #L264170.  if v0 == 0 then goto L264176;
  #L264174.  return @kind void;
  #L264176.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26417a.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.downstream` @type ^`n.b.c` @kind object;
  #L26417e.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L264182.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L264188.  v3:= temp;
  #L26418a.  v4:= 0I;
  #L26418c.  if v3 == 0 then goto L264198;
  #L264190.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L264196.  return @kind void;
  #L264198.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26419e.  v3:= temp @kind object;
  #L2641a0.  if v3 == 0 then goto L264222;
  #L2641a4.  v5:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L2641a8.  v6:= 1I;
  #L2641aa.  if v3 == v5 then goto L2641e4;
  #L2641ae.  v7:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.produced` @type ^`long` @kind wide;
  #L2641b2.  v5:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2641b6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2641bc.  v9:= temp @kind wide;
  #L2641be.  v5:= lcmp(v7, v9);
  #L2641c2.  if v5 == 0 then goto L2641de;
  #L2641c6.  v9:= 1L;
  #L2641ca.  v7:= v7 + v9 @kind long;
  #L2641cc.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.produced` @type ^`long` := v7 @kind wide;
  #L2641d0.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2641d6.  call `onNext`(v1, v3) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2641dc.  goto L2641ea;
  #L2641de.  v3:= 0I;
  #L2641e0.  v6:= 0I;
  #L2641e2.  goto L2641ea;
  #L2641e4.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2641ea.  if v6 == 0 then goto L264222;
  #L2641ee.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L2641f4.  v3:= temp;
  #L2641f6.  if v3 != 0 then goto L264222;
  #L2641fa.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.index` @type ^`int`;
  #L2641fe.  v4:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.sources` @type ^`io.reactivex.k`[] @kind object;
  #L264202.  v5:= length @variable v4;
  #L264204.  if v3 != v5 then goto L264210;
  #L264208.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L26420e.  return @kind void;
  #L264210.  v5:= v3 + 1;
  #L264214.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.index` @type ^`int` := v5;
  #L264218.  v3:= v4[v3] @kind object;
  #L26421c.  call `b`(v3, v11) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L264222.  call temp:= `decrementAndGet`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L264228.  v3:= temp;
  #L26422a.  if v3 != 0 then goto L264182;
  #L26422e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L264240.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L264244.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L264248.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L26424e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L264254.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264268.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.downstream` @type ^`n.b.c` @kind object;
  #L26426c.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L264272.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264284.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.disposables` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L264288.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L26428e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2642a0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2642a4.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2642aa.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L2642b0.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2642c4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L2642ca.  v0:= temp;
  #L2642cc.  if v0 == 0 then goto L2642e0;
  #L2642d0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2642d4.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L2642da.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$ConcatMaybeObserver;.drain:()V` @kind virtual;
  #L2642e0.  return @kind void;
}
