record `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable` v0 @kind this, `io.reactivex.j` v1 @kind object, `io.reactivex.internal.operators.maybe.MaybeCache` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.<init>:(Lio/reactivex/j;Lio/reactivex/internal/operators/maybe/MaybeCache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L263f30.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L263f36.  v0.`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L263f3a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L263f4c.  v0:= 0I;
  #L263f4e.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L263f54.  v1:= temp @kind object;
  #L263f56.  v1:= (`io.reactivex.internal.operators.maybe.MaybeCache`) v1 @kind object;
  #L263f5a.  if v1 != 0 then goto L263f60;
  #L263f5e.  return @kind void;
  #L263f60.  throw v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeCache$CacheDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$CacheDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L263f0c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L263f12.  v0:= temp @kind object;
  #L263f14.  if v0 != 0 then goto L263f1c;
  #L263f18.  v0:= 1I;
  #L263f1a.  goto L263f1e;
  #L263f1c.  v0:= 0I;
  #L263f1e.  return v0;
}
