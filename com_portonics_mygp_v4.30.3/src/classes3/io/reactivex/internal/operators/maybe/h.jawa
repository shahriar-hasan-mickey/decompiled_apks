record `io.reactivex.internal.operators.maybe.h` @kind class @AccessFlag FINAL extends `io.reactivex.z` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.h.b` @AccessFlag FINAL;
  `io.reactivex.z` `io.reactivex.internal.operators.maybe.h.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.h` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.z` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/h;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/z;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L265e6c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L265e72.  v0.`io.reactivex.internal.operators.maybe.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L265e76.  v0.`io.reactivex.internal.operators.maybe.h.c` @type ^`io.reactivex.z` := v2 @kind object;
  #L265e7a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.h` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/h;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265e8c.  v0:= v1.`io.reactivex.internal.operators.maybe.h.c` @type ^`io.reactivex.z` @kind object;
  #L265e90.  call `onError`(v0, v2) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L265e96.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.h` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/h;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265ea8.  v0:= v1.`io.reactivex.internal.operators.maybe.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L265eac.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L265eb2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.h` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/h;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265ec4.  v0:= v1.`io.reactivex.internal.operators.maybe.h.c` @type ^`io.reactivex.z` @kind object;
  #L265ec8.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L265ece.  return @kind void;
}
