record `io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.j` @kind interface, `io.reactivex.b` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.b` `io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v0 @kind this, `io.reactivex.b` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.<init>:(Lio/reactivex/b;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2655cc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2655d2.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L2655d6.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L2655da.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L2655ec.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2655f2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2655a4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2655aa.  v0:= temp @kind object;
  #L2655ac.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2655b0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2655b6.  v0:= temp;
  #L2655b8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265604.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L265608.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L26560e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265620.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.downstream` @type ^`io.reactivex.b` @kind object;
  #L265624.  call `onError`(v0, v2) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26562a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L26563c.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L265642.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265654.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L265658.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L26565e.  v2:= temp @kind object;
  #L265660.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L265664.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26566a.  v2:= temp @kind object;
  #L26566c.  v2:= (`io.reactivex.c`) v2 @kind object;
  #L265670.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.isDisposed:()Z` @kind virtual;
  #L265676.  v0:= temp;
  #L265678.  if v0 != 0 then goto L265682;
  #L26567c.  call `b`(v2, v1) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L265682.  return @kind void;
  #L265684.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L265686.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26568c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L265692.  return @kind void;
  catch `java.lang.Throwable` @[L265654..L265670] goto L265684;
}
