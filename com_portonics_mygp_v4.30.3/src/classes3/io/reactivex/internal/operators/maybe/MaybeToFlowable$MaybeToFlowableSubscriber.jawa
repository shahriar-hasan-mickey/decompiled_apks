record `io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.j` @kind interface {
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable$MaybeToFlowableSubscriber;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2685c8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Ln/b/c;)V` @kind direct;
  #L2685ce.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable$MaybeToFlowableSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2685e0.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L2685e6.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2685ea.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2685f0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable$MaybeToFlowableSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L268604.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L268608.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L26860e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable$MaybeToFlowableSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L268620.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L268624.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26862a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable$MaybeToFlowableSubscriber;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26863c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L268640.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L268646.  v0:= temp;
  #L268648.  if v0 == 0 then goto L26865a;
  #L26864c.  v1.`io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L268650.  v2:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L268654.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L26865a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable$MaybeToFlowableSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L26866c.  call `complete`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L268672.  return @kind void;
}
