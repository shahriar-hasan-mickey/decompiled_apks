record `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.j` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.j` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.<init>:(Lio/reactivex/j;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L265f08.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L265f0e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L265f12.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L265f16.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L265f28.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L265f2e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265ee0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L265ee6.  v0:= temp @kind object;
  #L265ee8.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L265eec.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L265ef2.  v0:= temp;
  #L265ef4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265f40.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L265f44.  call `onComplete`(v0) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L265f4a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265f5c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L265f60.  call `onError`(v0, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L265f66.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L265f78.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L265f7e.  v1:= temp;
  #L265f80.  if v1 == 0 then goto L265f8e;
  #L265f84.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L265f88.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/j;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L265f8e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L265fa0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L265fa4.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L265faa.  v3:= temp @kind object;
  #L265fac.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L265fb0.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L265fb6.  v3:= temp @kind object;
  #L265fb8.  v3:= (`io.reactivex.a0`) v3 @kind object;
  #L265fbc.  v0:= new `io.reactivex.internal.operators.maybe.i`;
  #L265fc0.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L265fc4.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/i;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/j;)V` @kind direct;
  #L265fca.  call `b`(v3, v0) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L265fd0.  return @kind void;
  #L265fd2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L265fd4.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L265fda.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L265fe0.  return @kind void;
  catch `java.lang.Throwable` @[L265fa0..L265fbc] goto L265fd2;
}
