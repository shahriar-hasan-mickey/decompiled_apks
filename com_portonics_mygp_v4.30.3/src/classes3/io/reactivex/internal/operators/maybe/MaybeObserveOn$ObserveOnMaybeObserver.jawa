record `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.j` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @AccessFlag ;
  `io.reactivex.x` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `io.reactivex.j` v1 @kind object, `io.reactivex.x` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.<init>:(Lio/reactivex/j;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L266fa0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L266fa6.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L266faa.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`io.reactivex.x` := v2 @kind object;
  #L266fae.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L266fc0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L266fc6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266f78.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L266f7e.  v0:= temp @kind object;
  #L266f80.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L266f84.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L266f8a.  v0:= temp;
  #L266f8c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266fd8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L266fdc.  call temp:= `c`(v0, v1) @signature `Lio/reactivex/x;.c:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L266fe2.  v0:= temp @kind object;
  #L266fe4.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L266fea.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L266ffc.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L267000.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L267004.  call temp:= `c`(v1, v0) @signature `Lio/reactivex/x;.c:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L26700a.  v1:= temp @kind object;
  #L26700c.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L267012.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L267024.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L26702a.  v1:= temp;
  #L26702c.  if v1 == 0 then goto L26703a;
  #L267030.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L267034.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/j;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L26703a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L26704c.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L267050.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L267054.  call temp:= `c`(v1, v0) @signature `Lio/reactivex/x;.c:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L26705a.  v1:= temp @kind object;
  #L26705c.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L267062.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L267074.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L267078.  v1:= 0I;
  #L26707a.  if v0 == 0 then goto L26708e;
  #L26707e.  v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L267082.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L267086.  call `onError`(v1, v0) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26708c.  goto L2670b0;
  #L26708e.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @type ^`java.lang.Object` @kind object;
  #L267092.  if v0 == 0 then goto L2670a6;
  #L267096.  v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L26709a.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L26709e.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/j;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L2670a4.  goto L2670b0;
  #L2670a6.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L2670aa.  call `onComplete`(v0) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L2670b0.  return @kind void;
}
