record `io.reactivex.internal.operators.maybe.l` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.i` @kind class {
  `io.reactivex.c` `io.reactivex.internal.operators.maybe.l.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.l` v0 @kind this, `io.reactivex.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/l;.<init>:(Lio/reactivex/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L266434.  call `<init>`(v0) @signature `Lio/reactivex/i;.<init>:()V` @kind direct;
  #L26643a.  v0.`io.reactivex.internal.operators.maybe.l.b` @type ^`io.reactivex.c` := v1 @kind object;
  #L26643e.  return @kind void;
}
procedure `void` `u`(`io.reactivex.internal.operators.maybe.l` v2 @kind this, `io.reactivex.j` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/l;.u:(Lio/reactivex/j;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L266450.  v0:= v2.`io.reactivex.internal.operators.maybe.l.b` @type ^`io.reactivex.c` @kind object;
  #L266454.  v1:= new `io.reactivex.internal.operators.maybe.k`;
  #L266458.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/k;.<init>:(Lio/reactivex/j;)V` @kind direct;
  #L26645e.  call `b`(v0, v1) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L266464.  return @kind void;
}
