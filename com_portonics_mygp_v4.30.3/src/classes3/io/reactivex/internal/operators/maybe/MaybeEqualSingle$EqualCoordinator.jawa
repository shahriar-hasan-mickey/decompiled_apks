record `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.d` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.isEqual` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v1 @kind this, `io.reactivex.z` v2 @kind object, `io.reactivex.d0.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.<init>:(Lio/reactivex/z;Lio/reactivex/d0/d;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L264ffc.  v0:= 2I;
  #L264ffe.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L265004.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` := v2 @kind object;
  #L265008.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.isEqual` @type ^`io.reactivex.d0.d` := v3 @kind object;
  #L26500c.  v2:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver`;
  #L265010.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;)V` @kind direct;
  #L265016.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` := v2 @kind object;
  #L26501a.  v2:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver`;
  #L26501e.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;)V` @kind direct;
  #L265024.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` := v2 @kind object;
  #L265028.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26503c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L265040.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.dispose:()V` @kind virtual;
  #L265046.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L26504a.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.dispose:()V` @kind virtual;
  #L265050.  return @kind void;
}
procedure `void` `done`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.done:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L265064.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L26506a.  v0:= temp;
  #L26506c.  if v0 != 0 then goto L2650dc;
  #L265070.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L265074.  v0:= v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.value` @type ^`java.lang.Object` @kind object;
  #L265078.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L26507c.  v1:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver.value` @type ^`java.lang.Object` @kind object;
  #L265080.  if v0 == 0 then goto L2650bc;
  #L265084.  if v1 == 0 then goto L2650bc;
  #L265088.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.isEqual` @type ^`io.reactivex.d0.d` @kind object;
  #L26508c.  call temp:= `a`(v2, v0, v1) @signature `Lio/reactivex/d0/d;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L265092.  v0:= temp;
  #L265094.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L265098.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L26509e.  v0:= temp @kind object;
  #L2650a0.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L2650a6.  goto L2650dc;
  #L2650a8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2650aa.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2650b0.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L2650b4.  call `onError`(v1, v0) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2650ba.  return @kind void;
  #L2650bc.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L2650c0.  if v0 != 0 then goto L2650cc;
  #L2650c4.  if v1 != 0 then goto L2650cc;
  #L2650c8.  v0:= 1I;
  #L2650ca.  goto L2650ce;
  #L2650cc.  v0:= 0I;
  #L2650ce.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L2650d4.  v0:= temp @kind object;
  #L2650d6.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L2650dc.  return @kind void;
  catch `java.lang.Throwable` @[L265088..L265094] goto L2650a8;
}
procedure `void` `error`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v1 @kind this, `io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.error:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L2650fc.  v0:= 0I;
  #L2650fe.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L265104.  v0:= temp;
  #L265106.  if v0 <= 0 then goto L265130;
  #L26510a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L26510e.  if v2 != v0 then goto L26511e;
  #L265112.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L265116.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.dispose:()V` @kind virtual;
  #L26511c.  goto L265124;
  #L26511e.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualObserver;.dispose:()V` @kind virtual;
  #L265124.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L265128.  call `onError`(v2, v3) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26512e.  goto L265136;
  #L265130.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L265136.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264fd0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L264fd4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L264fda.  v0:= temp @kind object;
  #L264fdc.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L264fe0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L264fe6.  v0:= temp;
  #L264fe8.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator` v1 @kind this, `io.reactivex.k` v2 @kind object, `io.reactivex.k` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$EqualCoordinator;.subscribe:(Lio/reactivex/k;Lio/reactivex/k;)V` @AccessFlag  {
    temp;
    v0;

  #L265148.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer1` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L26514c.  call `b`(v2, v0) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L265152.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator.observer2` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$EqualObserver` @kind object;
  #L265156.  call `b`(v3, v2) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L26515c.  return @kind void;
}
