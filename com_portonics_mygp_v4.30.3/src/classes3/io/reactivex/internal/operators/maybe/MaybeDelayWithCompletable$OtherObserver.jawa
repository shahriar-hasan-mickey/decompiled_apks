record `io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.b` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.j` `io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.k` `io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v0 @kind this, `io.reactivex.j` v1 @kind object, `io.reactivex.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.<init>:(Lio/reactivex/j;Lio/reactivex/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L264d7c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L264d82.  v0.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L264d86.  v0.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.source` @type ^`io.reactivex.k` := v2 @kind object;
  #L264d8a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L264d9c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L264da2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264d54.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L264d5a.  v0:= temp @kind object;
  #L264d5c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L264d60.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L264d66.  v0:= temp;
  #L264d68.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L264db4.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.source` @type ^`io.reactivex.k` @kind object;
  #L264db8.  v1:= new `io.reactivex.internal.operators.maybe.b`;
  #L264dbc.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L264dc0.  call `<init>`(v1, v3, v2) @signature `Lio/reactivex/internal/operators/maybe/b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/j;)V` @kind direct;
  #L264dc6.  call `b`(v0, v1) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L264dcc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L264de0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L264de4.  call `onError`(v0, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L264dea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayWithCompletable$OtherObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L264dfc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L264e02.  v1:= temp;
  #L264e04.  if v1 == 0 then goto L264e12;
  #L264e08.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L264e0c.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/j;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L264e12.  return @kind void;
}
