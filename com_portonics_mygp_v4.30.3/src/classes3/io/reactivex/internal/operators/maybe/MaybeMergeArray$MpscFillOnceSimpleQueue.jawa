record `io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.internal.operators.maybe.t` @kind interface {
  `int` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.producerIndex` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L266efc.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L266f02.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L266f06.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L266f0c.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L266f10.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266f24.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L266f2a.  v0:= temp @kind object;
  #L266f2c.  if v0 == 0 then goto L266f3e;
  #L266f30.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.isEmpty:()Z` @kind virtual;
  #L266f36.  v0:= temp;
  #L266f38.  if v0 != 0 then goto L266f3e;
  #L266f3c.  goto L266f24;
  #L266f3e.  return @kind void;
}
procedure `int` `consumerIndex`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.consumerIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266e40.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int`;
  #L266e44.  return v0;
}
procedure `void` `drop`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.drop:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L266f50.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int`;
  #L266f54.  v1:= 0I;
  #L266f56.  call `lazySet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L266f5c.  v0:= v0 + 1;
  #L266f60.  v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int` := v0;
  #L266f64.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L266dbc.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int`;
  #L266dc0.  call temp:= `producerIndex`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.producerIndex:()I` @kind virtual;
  #L266dc6.  v1:= temp;
  #L266dc8.  if v0 != v1 then goto L266dd0;
  #L266dcc.  v0:= 1I;
  #L266dce.  goto L266dd2;
  #L266dd0.  v0:= 0I;
  #L266dd2.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L266de4.  v0:= "value is null" @kind object;
  #L266de8.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L266dee.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L266df2.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L266df8.  v0:= temp;
  #L266dfa.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L266e00.  v1:= temp;
  #L266e02.  if v0 >= v1 then goto L266e10;
  #L266e06.  call `lazySet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L266e0c.  v3:= 1I;
  #L266e0e.  return v3;
  #L266e10.  v3:= 0I;
  #L266e12.  return v3;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L266e24.  v1:= new `java.lang.UnsupportedOperationException`;
  #L266e28.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L266e2e.  throw v1;
}
procedure `java.lang.Object` `peek`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L266e78.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int`;
  #L266e7c.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L266e82.  v1:= temp;
  #L266e84.  if v0 != v1 then goto L266e8c;
  #L266e88.  v0:= 0I;
  #L266e8a.  return v0 @kind object;
  #L266e8c.  call temp:= `get`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L266e92.  v0:= temp @kind object;
  #L266e94.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L266ea8.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int`;
  #L266eac.  call temp:= `length`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L266eb2.  v1:= temp;
  #L266eb4.  v2:= 0I;
  #L266eb6.  if v0 != v1 then goto L266ebc;
  #L266eba.  return v2 @kind object;
  #L266ebc.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L266ec0.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L266ec6.  v3:= temp @kind object;
  #L266ec8.  if v3 == 0 then goto L266edc;
  #L266ecc.  v1:= v0 + 1;
  #L266ed0.  v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.consumerIndex` @type ^`int` := v1;
  #L266ed4.  call `lazySet`(v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L266eda.  return v3 @kind object;
  #L266edc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L266ee2.  v3:= temp;
  #L266ee4.  if v3 != v0 then goto L266ec0;
  #L266ee8.  return v2 @kind object;
}
procedure `int` `producerIndex`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$MpscFillOnceSimpleQueue;.producerIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L266e58.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$MpscFillOnceSimpleQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L266e5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L266e62.  v0:= temp;
  #L266e64.  return v0;
}
