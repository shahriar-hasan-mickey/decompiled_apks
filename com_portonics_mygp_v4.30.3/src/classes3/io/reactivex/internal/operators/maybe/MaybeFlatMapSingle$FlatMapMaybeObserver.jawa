record `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.j` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.z` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.<init>:(Lio/reactivex/z;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L265d5c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L265d62.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L265d66.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L265d6a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L265d7c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L265d82.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265d34.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L265d3a.  v0:= temp @kind object;
  #L265d3c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L265d40.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L265d46.  v0:= temp;
  #L265d48.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L265d94.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L265d98.  v1:= new `java.util.NoSuchElementException`;
  #L265d9c.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L265da2.  call `onError`(v0, v1) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L265da8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L265dbc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L265dc0.  call `onError`(v0, v2) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L265dc6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L265dd8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L265dde.  v1:= temp;
  #L265de0.  if v1 == 0 then goto L265dee;
  #L265de4.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L265de8.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/z;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L265dee.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L265e00.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L265e04.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L265e0a.  v3:= temp @kind object;
  #L265e0c.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L265e10.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L265e16.  v3:= temp @kind object;
  #L265e18.  v3:= (`io.reactivex.a0`) v3 @kind object;
  #L265e1c.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.isDisposed:()Z` @kind virtual;
  #L265e22.  v0:= temp;
  #L265e24.  if v0 != 0 then goto L265e3c;
  #L265e28.  v0:= new `io.reactivex.internal.operators.maybe.h`;
  #L265e2c.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L265e30.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/h;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/z;)V` @kind direct;
  #L265e36.  call `b`(v3, v0) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L265e3c.  return @kind void;
  #L265e3e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L265e40.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L265e46.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$FlatMapMaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L265e4c.  return @kind void;
  catch `java.lang.Throwable` @[L265e00..L265e1c] goto L265e3e;
}
