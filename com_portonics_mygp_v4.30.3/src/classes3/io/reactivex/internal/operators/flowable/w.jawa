record `io.reactivex.internal.operators.flowable.w` @kind class @AccessFlag FINAL extends `n.b.b` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.w.b` @AccessFlag PRIVATE_FINAL;
  `int` `io.reactivex.internal.operators.flowable.w.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.w` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/w;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25ab74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L25ab7a.  v0.`io.reactivex.internal.operators.flowable.w.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L25ab7e.  v0.`io.reactivex.internal.operators.flowable.w.c` @type ^`int` := v2;
  #L25ab82.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.w` v6 @kind this, `n.b.c` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/w;.subscribe:(Ln/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25ab94.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`;
  #L25ab98.  call `<init>`(v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.<init>:(Ln/b/c;)V` @kind direct;
  #L25ab9e.  call `onSubscribe`(v7, v0) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25aba4.  v7:= v6.`io.reactivex.internal.operators.flowable.w.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25aba8.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25abae.  v7:= temp @kind object;
  #L25abb0.  v7:= (`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`) v7 @kind object;
  #L25abb4.  if v7 == 0 then goto L25abc4;
  #L25abb8.  call temp:= `isDisposed`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.isDisposed:()Z` @kind virtual;
  #L25abbe.  v1:= temp;
  #L25abc0.  if v1 == 0 then goto L25abea;
  #L25abc4.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`;
  #L25abc8.  v2:= v6.`io.reactivex.internal.operators.flowable.w.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25abcc.  v3:= v6.`io.reactivex.internal.operators.flowable.w.c` @type ^`int`;
  #L25abd0.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L25abd6.  v2:= v6.`io.reactivex.internal.operators.flowable.w.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25abda.  call temp:= `compareAndSet`(v2, v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L25abe0.  v7:= temp;
  #L25abe2.  if v7 != 0 then goto L25abe8;
  #L25abe6.  goto L25aba4;
  #L25abe8.  v7:= v1 @kind object;
  #L25abea.  call temp:= `add`(v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.add:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)Z` @kind virtual;
  #L25abf0.  v1:= temp;
  #L25abf2.  if v1 == 0 then goto L25aba4;
  #L25abf6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25abfc.  v1:= temp @kind wide;
  #L25abfe.  v3:= -9223372036854775808L;
  #L25ac02.  v5:= lcmp(v1, v3);
  #L25ac06.  if v5 != 0 then goto L25ac12;
  #L25ac0a.  call `remove`(v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.remove:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)V` @kind virtual;
  #L25ac10.  goto L25ac16;
  #L25ac12.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` := v7 @kind object;
  #L25ac16.  call `dispatch`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L25ac1c.  return @kind void;
}
