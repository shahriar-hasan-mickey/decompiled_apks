record `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.downstream` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.main` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber$OtherSubscriber` `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.other` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `n.b.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$MainSubscriber;.<init>:(Ln/b/c;Ln/b/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2511fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L251202.  v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L251206.  v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.main` @type ^`n.b.b` := v2 @kind object;
  #L25120a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber$OtherSubscriber`;
  #L25120e.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$MainSubscriber$OtherSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$MainSubscriber;)V` @kind direct;
  #L251214.  v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber$OtherSubscriber` := v1 @kind object;
  #L251218.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L25121c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L251222.  v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L251226.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$MainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251238.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber$OtherSubscriber` @kind object;
  #L25123c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L251242.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L251246.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25124c.  return @kind void;
}
procedure `void` `next`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$MainSubscriber;.next:()V` @AccessFlag  {
    temp;
    v0;

  #L251260.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.main` @type ^`n.b.b` @kind object;
  #L251264.  call `subscribe`(v0, v1) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25126a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$MainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25127c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L251280.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L251286.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$MainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251298.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25129c.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2512a2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$MainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2512b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2512b8.  call `onNext`(v0, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2512be.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$MainSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2512d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2512d4.  call temp:= `deferredSetOnce`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @kind static;
  #L2512da.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$MainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2512ec.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L2512f2.  v0:= temp;
  #L2512f4.  if v0 == 0 then goto L251302;
  #L2512f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$MainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2512fc.  call `deferredRequest`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L251302.  return @kind void;
}
