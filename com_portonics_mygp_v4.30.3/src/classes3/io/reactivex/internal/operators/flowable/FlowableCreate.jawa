record `io.reactivex.internal.operators.flowable.FlowableCreate` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.e` @kind class {
  `io.reactivex.g` `io.reactivex.internal.operators.flowable.FlowableCreate.c` @AccessFlag FINAL;
  `io.reactivex.BackpressureStrategy` `io.reactivex.internal.operators.flowable.FlowableCreate.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate` v0 @kind this, `io.reactivex.g` v1 @kind object, `io.reactivex.BackpressureStrategy` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate;.<init>:(Lio/reactivex/g;Lio/reactivex/BackpressureStrategy;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2509f8.  call `<init>`(v0) @signature `Lio/reactivex/e;.<init>:()V` @kind direct;
  #L2509fe.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate.c` @type ^`io.reactivex.g` := v1 @kind object;
  #L250a02.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate.d` @type ^`io.reactivex.BackpressureStrategy` := v2 @kind object;
  #L250a06.  return @kind void;
}
procedure `void` `H`(`io.reactivex.internal.operators.flowable.FlowableCreate` v2 @kind this, `n.b.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate;.H:(Ln/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L250a18.  v0:= `@@io.reactivex.internal.operators.flowable.d.a` @type ^`int`[] @kind object;
  #L250a1c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate.d` @type ^`io.reactivex.BackpressureStrategy` @kind object;
  #L250a20.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L250a26.  v1:= temp;
  #L250a28.  v0:= v0[v1];
  #L250a2c.  v1:= 1I;
  #L250a2e.  if v0 == v1 then goto L250a7c;
  #L250a32.  v1:= 2I;
  #L250a34.  if v0 == v1 then goto L250a70;
  #L250a38.  v1:= 3I;
  #L250a3a.  if v0 == v1 then goto L250a64;
  #L250a3e.  v1:= 4I;
  #L250a40.  if v0 == v1 then goto L250a58;
  #L250a44.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter`;
  #L250a48.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L250a4e.  v1:= temp;
  #L250a50.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.<init>:(Ln/b/c;I)V` @kind direct;
  #L250a56.  goto L250a86;
  #L250a58.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter`;
  #L250a5c.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.<init>:(Ln/b/c;)V` @kind direct;
  #L250a62.  goto L250a86;
  #L250a64.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$DropAsyncEmitter`;
  #L250a68.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$DropAsyncEmitter;.<init>:(Ln/b/c;)V` @kind direct;
  #L250a6e.  goto L250a86;
  #L250a70.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$ErrorAsyncEmitter`;
  #L250a74.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$ErrorAsyncEmitter;.<init>:(Ln/b/c;)V` @kind direct;
  #L250a7a.  goto L250a86;
  #L250a7c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter`;
  #L250a80.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$MissingEmitter;.<init>:(Ln/b/c;)V` @kind direct;
  #L250a86.  call `onSubscribe`(v3, v0) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L250a8c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate.c` @type ^`io.reactivex.g` @kind object;
  #L250a90.  call `a`(v3, v0) @signature `Lio/reactivex/g;.a:(Lio/reactivex/f;)V` @kind interface;
  #L250a96.  goto L250aa6;
  #L250a98.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L250a9a.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L250aa0.  call `onError`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L250aa6.  return @kind void;
  catch `java.lang.Throwable` @[L250a8c..L250a96] goto L250a98;
}
