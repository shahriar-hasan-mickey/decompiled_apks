record `io.reactivex.internal.operators.flowable.FlowableFlatMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableFlatMap.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap.f` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMap` v0 @kind this, `io.reactivex.e` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 , `int` v4 , `int` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.<init>:(Lio/reactivex/e;Lio/reactivex/d0/k;ZII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2548a4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/e;)V` @kind direct;
  #L2548aa.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap.d` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L2548ae.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap.e` @type ^`boolean` := v3 @kind boolean;
  #L2548b2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap.f` @type ^`int` := v4;
  #L2548b6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap.g` @type ^`int` := v5;
  #L2548ba.  return @kind void;
}
procedure `io.reactivex.h` `J`(`n.b.c` v7 @kind object, `io.reactivex.d0.k` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.J:(Ln/b/c;Lio/reactivex/d0/k;ZII)Lio/reactivex/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L25487c.  v6:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber`;
  #L254880.  v0:= v6 @kind object;
  #L254882.  v1:= v7 @kind object;
  #L254884.  v2:= v8 @kind object;
  #L254886.  v3:= v9;
  #L254888.  v4:= v10;
  #L25488a.  v5:= v11;
  #L25488c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;ZII)V` @kind direct;
  #L254892.  return v6 @kind object;
}
procedure `void` `H`(`io.reactivex.internal.operators.flowable.FlowableFlatMap` v5 @kind this, `n.b.c` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.H:(Ln/b/c;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2548cc.  v0:= v5.`io.reactivex.internal.operators.flowable.a.c` @type ^`io.reactivex.e` @kind object;
  #L2548d0.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap.d` @type ^`io.reactivex.d0.k` @kind object;
  #L2548d4.  call temp:= `b`(v0, v6, v1) @signature `Lio/reactivex/internal/operators/flowable/b0;.b:(Ln/b/b;Ln/b/c;Lio/reactivex/d0/k;)Z` @kind static;
  #L2548da.  v0:= temp;
  #L2548dc.  if v0 == 0 then goto L2548e2;
  #L2548e0.  return @kind void;
  #L2548e2.  v0:= v5.`io.reactivex.internal.operators.flowable.a.c` @type ^`io.reactivex.e` @kind object;
  #L2548e6.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap.d` @type ^`io.reactivex.d0.k` @kind object;
  #L2548ea.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap.e` @type ^`boolean` @kind boolean;
  #L2548ee.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap.f` @type ^`int`;
  #L2548f2.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap.g` @type ^`int`;
  #L2548f6.  call temp:= `J`(v6, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.J:(Ln/b/c;Lio/reactivex/d0/k;ZII)Lio/reactivex/h;` @kind static;
  #L2548fc.  v6:= temp @kind object;
  #L2548fe.  call `G`(v0, v6) @signature `Lio/reactivex/e;.G:(Lio/reactivex/h;)V` @kind virtual;
  #L254904.  return @kind void;
}
