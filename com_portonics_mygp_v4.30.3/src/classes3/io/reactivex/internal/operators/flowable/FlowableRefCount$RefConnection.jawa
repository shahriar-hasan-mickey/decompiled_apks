record `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.d0.g` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.connected` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.disconnectedEarly` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowableRefCount` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.parent` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.subscriberCount` @AccessFlag ;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.timer` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableRefCount;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25bd48.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25bd4e.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;.accept:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L25bd60.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L25bd66.  v1:= 0I;
  #L25bd68.  throw v1;
}
procedure `void` `accept`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L25bd7c.  v1:= (`io.reactivex.disposables.b`) v1 @kind object;
  #L25bd80.  call `accept`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;.accept:(Lio/reactivex/disposables/b;)V` @kind virtual;
  #L25bd86.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25bd98.  v0:= 0I;
  #L25bd9a.  throw v0;
}
