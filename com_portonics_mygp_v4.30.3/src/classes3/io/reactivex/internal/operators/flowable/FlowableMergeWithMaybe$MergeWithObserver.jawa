record `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.limit` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainDone` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.prefetch` @AccessFlag FINAL;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.OTHER_STATE_CONSUMED_OR_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.OTHER_STATE_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this, `n.b.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25859c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2585a2.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.downstream` @type ^`n.b.c` := v2 @kind object;
  #L2585a6.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2585aa.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2585b0.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L2585b4.  v2:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver`;
  #L2585b8.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;)V` @kind direct;
  #L2585be.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver` := v2 @kind object;
  #L2585c2.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L2585c6.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L2585cc.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L2585d0.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L2585d4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L2585da.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L2585de.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L2585e4.  v2:= temp;
  #L2585e6.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.prefetch` @type ^`int` := v2;
  #L2585ea.  v0:= v2 ^> 2;
  #L2585ee.  v2:= v2 - v0 @kind int;
  #L2585f0.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.limit` @type ^`int` := v2;
  #L2585f4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258608.  v0:= 1I;
  #L25860a.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L25860e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L258612.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L258618.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver` @kind object;
  #L25861c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L258622.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L258628.  v0:= temp;
  #L25862a.  if v0 != 0 then goto L258638;
  #L25862e.  v0:= 0I;
  #L258630.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v0 @kind object;
  #L258634.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v0 @kind object;
  #L258638.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L25864c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L258652.  v0:= temp;
  #L258654.  if v0 != 0 then goto L25865e;
  #L258658.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L25865e.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L258670.  v0:= v17 @kind object;
  #L258674.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.downstream` @type ^`n.b.c` @kind object;
  #L258678.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L25867c.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @type ^`int`;
  #L258680.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.limit` @type ^`int`;
  #L258684.  v6:= 1I;
  #L258686.  v7:= 1I;
  #L258688.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25868c.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L258692.  v8:= temp @kind wide;
  #L258694.  v11:= 2I;
  #L258696.  v12:= 0I;
  #L258698.  v13:= lcmp(v2, v8);
  #L25869c.  if v13 == 0 then goto L258772;
  #L2586a0.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.cancelled` @type ^`boolean` @kind boolean;
  #L2586a4.  if v13 == 0 then goto L2586b2;
  #L2586a8.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L2586ac.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L2586b0.  return @kind void;
  #L2586b2.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2586b6.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2586bc.  v13:= temp @kind object;
  #L2586be.  if v13 == 0 then goto L2586de;
  #L2586c2.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L2586c6.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L2586ca.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2586ce.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2586d4.  v2:= temp @kind object;
  #L2586d6.  call `onError`(v1, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2586dc.  return @kind void;
  #L2586de.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int`;
  #L2586e2.  v14:= 1L;
  #L2586e6.  if v13 != v6 then goto L258700;
  #L2586ea.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` @kind object;
  #L2586ee.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L2586f2.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v11;
  #L2586f6.  call `onNext`(v1, v10) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2586fc.  v2:= v2 + v14 @kind long;
  #L2586fe.  goto L258694;
  #L258700.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L258704.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L258708.  if v10 == 0 then goto L258716;
  #L25870c.  call temp:= `poll`(v10) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L258712.  v10:= temp @kind object;
  #L258714.  goto L258718;
  #L258716.  v10:= v12 @kind object;
  #L258718.  if v10 != 0 then goto L258722;
  #L25871c.  v16:= 1I;
  #L258720.  goto L258726;
  #L258722.  v16:= 0I;
  #L258726.  if v6 == 0 then goto L25873e;
  #L25872a.  if v16 == 0 then goto L25873e;
  #L25872e.  if v13 != v11 then goto L25873e;
  #L258732.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L258736.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25873c.  return @kind void;
  #L25873e.  if v16 == 0 then goto L258744;
  #L258742.  goto L258772;
  #L258744.  call `onNext`(v1, v10) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25874a.  v2:= v2 + v14 @kind long;
  #L25874c.  v4:= v4 + 1;
  #L258750.  if v4 != v5 then goto L25876e;
  #L258754.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L258758.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25875e.  v4:= temp @kind object;
  #L258760.  v4:= (`n.b.d`) v4 @kind object;
  #L258764.  v10:= (`long`) v5 @kind i2l;
  #L258766.  call `request`(v4, v10) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25876c.  v4:= 0I;
  #L25876e.  v6:= 1I;
  #L258770.  goto L258694;
  #L258772.  v6:= lcmp(v2, v8);
  #L258776.  if v6 != 0 then goto L2587f4;
  #L25877a.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.cancelled` @type ^`boolean` @kind boolean;
  #L25877e.  if v6 == 0 then goto L25878c;
  #L258782.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L258786.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L25878a.  return @kind void;
  #L25878c.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L258790.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L258796.  v6:= temp @kind object;
  #L258798.  if v6 == 0 then goto L2587b8;
  #L25879c.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L2587a0.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L2587a4.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2587a8.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2587ae.  v2:= temp @kind object;
  #L2587b0.  call `onError`(v1, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2587b6.  return @kind void;
  #L2587b8.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L2587bc.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L2587c0.  if v8 == 0 then goto L2587d6;
  #L2587c4.  call temp:= `isEmpty`(v8) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L2587ca.  v8:= temp;
  #L2587cc.  if v8 == 0 then goto L2587d2;
  #L2587d0.  goto L2587d6;
  #L2587d2.  v10:= 0I;
  #L2587d4.  goto L2587d8;
  #L2587d6.  v10:= 1I;
  #L2587d8.  if v6 == 0 then goto L2587f4;
  #L2587dc.  if v10 == 0 then goto L2587f4;
  #L2587e0.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int`;
  #L2587e4.  if v6 != v11 then goto L2587f4;
  #L2587e8.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L2587ec.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2587f2.  return @kind void;
  #L2587f4.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` := v2 @kind wide;
  #L2587f8.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @type ^`int` := v4;
  #L2587fc.  v6:= -v7 @kind int;
  #L2587fe.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L258804.  v7:= temp;
  #L258806.  if v7 != 0 then goto L25880c;
  #L25880a.  return @kind void;
  #L25880c.  v6:= 1I;
  #L25880e.  goto L258688;
}
procedure `io.reactivex.e0.a.i` `getOrCreateQueue`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/e0/a/i;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L25856c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L258570.  if v0 != 0 then goto L25858a;
  #L258574.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L258578.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L25857e.  v1:= temp;
  #L258580.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L258586.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v0 @kind object;
  #L25858a.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258824.  v0:= 1I;
  #L258826.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainDone` @type ^`boolean` := v0 @kind boolean;
  #L25882a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L258830.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258844.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L258848.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L25884e.  v0:= temp;
  #L258850.  if v0 == 0 then goto L258866;
  #L258854.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L258858.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25885e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L258864.  goto L25886c;
  #L258866.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25886c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L258880.  v0:= 0I;
  #L258882.  v1:= 1I;
  #L258884.  call temp:= `compareAndSet`(v7, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L25888a.  v2:= temp;
  #L25888c.  if v2 == 0 then goto L258928;
  #L258890.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L258894.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L258898.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25889e.  v4:= temp @kind wide;
  #L2588a0.  v6:= lcmp(v4, v2);
  #L2588a4.  if v6 == 0 then goto L25890c;
  #L2588a8.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L2588ac.  if v4 == 0 then goto L2588c6;
  #L2588b0.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L2588b6.  v5:= temp;
  #L2588b8.  if v5 == 0 then goto L2588be;
  #L2588bc.  goto L2588c6;
  #L2588be.  call temp:= `offer`(v4, v8) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2588c4.  goto L25891a;
  #L2588c6.  v4:= 1L;
  #L2588ca.  v2:= v2 + v4 @kind long;
  #L2588cc.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` := v2 @kind wide;
  #L2588d0.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.downstream` @type ^`n.b.c` @kind object;
  #L2588d4.  call `onNext`(v2, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2588da.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @type ^`int`;
  #L2588de.  v8:= v8 + v1 @kind int;
  #L2588e0.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.limit` @type ^`int`;
  #L2588e4.  if v8 != v1 then goto L258906;
  #L2588e8.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @type ^`int` := v0;
  #L2588ec.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2588f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2588f6.  v0:= temp @kind object;
  #L2588f8.  v0:= (`n.b.d`) v0 @kind object;
  #L2588fc.  v1:= (`long`) v8 @kind i2l;
  #L2588fe.  call `request`(v0, v1) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L258904.  goto L25891a;
  #L258906.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.consumed` @type ^`int` := v8;
  #L25890a.  goto L25891a;
  #L25890c.  call temp:= `getOrCreateQueue`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/e0/a/i;` @kind virtual;
  #L258912.  v0:= temp @kind object;
  #L258914.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L25891a.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L258920.  v8:= temp;
  #L258922.  if v8 != 0 then goto L258944;
  #L258926.  return @kind void;
  #L258928.  call temp:= `getOrCreateQueue`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/e0/a/i;` @kind virtual;
  #L25892e.  v0:= temp @kind object;
  #L258930.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L258936.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25893c.  v8:= temp;
  #L25893e.  if v8 == 0 then goto L258944;
  #L258942.  return @kind void;
  #L258944.  call `drainLoop`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L25894a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25895c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L258960.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.prefetch` @type ^`int`;
  #L258964.  v1:= (`long`) v1 @kind i2l;
  #L258966.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L25896c.  return @kind void;
}
procedure `void` `otherComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.otherComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L258980.  v0:= 2I;
  #L258982.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v0;
  #L258986.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L25898c.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L2589a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2589a4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2589aa.  v0:= temp;
  #L2589ac.  if v0 == 0 then goto L2589c2;
  #L2589b0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2589b4.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2589ba.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L2589c0.  goto L2589c8;
  #L2589c2.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2589c8.  return @kind void;
}
procedure `void` `otherSuccess`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.otherSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2589dc.  v0:= 0I;
  #L2589de.  v1:= 1I;
  #L2589e0.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L2589e6.  v0:= temp;
  #L2589e8.  if v0 == 0 then goto L258a36;
  #L2589ec.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L2589f0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2589f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2589fa.  v4:= temp @kind wide;
  #L2589fc.  v0:= lcmp(v4, v2);
  #L258a00.  if v0 == 0 then goto L258a20;
  #L258a04.  v0:= 1L;
  #L258a08.  v2:= v2 + v0 @kind long;
  #L258a0a.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.emitted` @type ^`long` := v2 @kind wide;
  #L258a0e.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.downstream` @type ^`n.b.c` @kind object;
  #L258a12.  call `onNext`(v0, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L258a18.  v7:= 2I;
  #L258a1a.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v7;
  #L258a1e.  goto L258a4c;
  #L258a20.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v7 @kind object;
  #L258a24.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v1;
  #L258a28.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L258a2e.  v7:= temp;
  #L258a30.  if v7 != 0 then goto L258a4c;
  #L258a34.  return @kind void;
  #L258a36.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v7 @kind object;
  #L258a3a.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.otherState` @type ^`int` := v1;
  #L258a3e.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L258a44.  v7:= temp;
  #L258a46.  if v7 == 0 then goto L258a4c;
  #L258a4a.  return @kind void;
  #L258a4c.  call `drainLoop`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L258a52.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258a64.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L258a68.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L258a6e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$MergeWithObserver;.drain:()V` @kind virtual;
  #L258a74.  return @kind void;
}
