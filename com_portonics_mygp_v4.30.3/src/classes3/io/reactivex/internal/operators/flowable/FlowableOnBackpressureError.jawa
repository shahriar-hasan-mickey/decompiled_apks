record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError` v0 @kind this, `io.reactivex.e` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError;.<init>:(Lio/reactivex/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L25a638.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/e;)V` @kind direct;
  #L25a63e.  return @kind void;
}
procedure `void` `H`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError` v2 @kind this, `n.b.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError;.H:(Ln/b/c;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L25a650.  v0:= v2.`io.reactivex.internal.operators.flowable.a.c` @type ^`io.reactivex.e` @kind object;
  #L25a654.  v1:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber`;
  #L25a658.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.<init>:(Ln/b/c;)V` @kind direct;
  #L25a65e.  call `G`(v0, v1) @signature `Lio/reactivex/e;.G:(Lio/reactivex/h;)V` @kind virtual;
  #L25a664.  return @kind void;
}
