record `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.index` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timeout` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timer` @AccessFlag ;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.unit` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.upstream` @AccessFlag ;
  `io.reactivex.x$a` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.x$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.<init>:(Ln/b/c;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L250ee8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L250eee.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L250ef2.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timeout` @type ^`long` := v2 @kind wide;
  #L250ef6.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L250efa.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @type ^`io.reactivex.x$a` := v5 @kind object;
  #L250efe.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250f10.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L250f14.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L250f1a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L250f1e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L250f24.  return @kind void;
}
procedure `void` `emit`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object, `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceEmitter` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.emit:(JLjava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceEmitter;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L250f38.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.index` @type ^`long` @kind wide;
  #L250f3c.  v2:= lcmp(v4, v0);
  #L250f40.  if v2 != 0 then goto L250f92;
  #L250f44.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L250f4a.  v4:= temp @kind wide;
  #L250f4c.  v0:= 0L;
  #L250f50.  v2:= lcmp(v4, v0);
  #L250f54.  if v2 == 0 then goto L250f74;
  #L250f58.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L250f5c.  call `onNext`(v4, v6) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L250f62.  v4:= 1L;
  #L250f66.  call temp:= `e`(v3, v4) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L250f6c.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceEmitter;.dispose:()V` @kind virtual;
  #L250f72.  goto L250f92;
  #L250f74.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.cancel:()V` @kind virtual;
  #L250f7a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L250f7e.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L250f82.  v6:= "Could not deliver value due to lack of requests" @kind object;
  #L250f86.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250f8c.  call `onError`(v4, v5) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L250f92.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250fa4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @type ^`boolean` @kind boolean;
  #L250fa8.  if v0 == 0 then goto L250fae;
  #L250fac.  return @kind void;
  #L250fae.  v0:= 1I;
  #L250fb0.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L250fb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timer` @type ^`io.reactivex.disposables.b` @kind object;
  #L250fb8.  if v0 == 0 then goto L250fc2;
  #L250fbc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L250fc2.  v0:= (`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceEmitter`) v0 @kind object;
  #L250fc6.  if v0 == 0 then goto L250fd0;
  #L250fca.  call `emit`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceEmitter;.emit:()V` @kind virtual;
  #L250fd0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L250fd4.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L250fda.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L250fde.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L250fe4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250ff8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @type ^`boolean` @kind boolean;
  #L250ffc.  if v0 == 0 then goto L251008;
  #L251000.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L251006.  return @kind void;
  #L251008.  v0:= 1I;
  #L25100a.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25100e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timer` @type ^`io.reactivex.disposables.b` @kind object;
  #L251012.  if v0 == 0 then goto L25101c;
  #L251016.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L25101c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L251020.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L251026.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L25102a.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L251030.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L251044.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.done` @type ^`boolean` @kind boolean;
  #L251048.  if v0 == 0 then goto L25104e;
  #L25104c.  return @kind void;
  #L25104e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.index` @type ^`long` @kind wide;
  #L251052.  v2:= 1L;
  #L251056.  v0:= v0 + v2 @kind long;
  #L251058.  v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.index` @type ^`long` := v0 @kind wide;
  #L25105c.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timer` @type ^`io.reactivex.disposables.b` @kind object;
  #L251060.  if v2 == 0 then goto L25106a;
  #L251064.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L25106a.  v2:= new `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceEmitter`;
  #L25106e.  call `<init>`(v2, v5, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceEmitter;.<init>:(Ljava/lang/Object;JLio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;)V` @kind direct;
  #L251074.  v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timer` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L251078.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L25107c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.timeout` @type ^`long` @kind wide;
  #L251080.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L251084.  call temp:= `c`(v5, v2, v0, v3) @signature `Lio/reactivex/x$a;.c:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L25108a.  v5:= temp @kind object;
  #L25108c.  call `setResource`(v2, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceEmitter;.setResource:(Lio/reactivex/disposables/b;)V` @kind virtual;
  #L251092.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2510a4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2510a8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L2510ae.  v0:= temp;
  #L2510b0.  if v0 == 0 then goto L2510d2;
  #L2510b4.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L2510b8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2510bc.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L2510c2.  v0:= 9223372036854775807L;
  #L2510cc.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2510d2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$DebounceTimedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2510e4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L2510ea.  v0:= temp;
  #L2510ec.  if v0 == 0 then goto L2510f6;
  #L2510f0.  call temp:= `a`(v1, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L2510f6.  return @kind void;
}
