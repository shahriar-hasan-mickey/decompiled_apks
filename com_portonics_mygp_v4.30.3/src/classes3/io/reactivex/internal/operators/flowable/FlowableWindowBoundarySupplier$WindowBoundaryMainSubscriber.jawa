record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `java.lang.Runnable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.boundarySubscriber` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.capacityHint` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.errors` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.other` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.stopWindows` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.flowable.k0` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.BOUNDARY_DISPOSED` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.NEXT_WINDOW` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L262dd8.  v0:= new `io.reactivex.internal.operators.flowable.k0`;
  #L262ddc.  v1:= 0I;
  #L262dde.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/k0;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;)V` @kind direct;
  #L262de4.  `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.BOUNDARY_DISPOSED` @type ^`io.reactivex.internal.operators.flowable.k0` := v0 @kind object;
  #L262de8.  v0:= new `java.lang.Object`;
  #L262dec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L262df2.  `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` := v0 @kind object;
  #L262df6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.<init>:(Ln/b/c;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L262e08.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L262e0e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L262e12.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.capacityHint` @type ^`int` := v2;
  #L262e16.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L262e1a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L262e20.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L262e24.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L262e28.  v2:= 1I;
  #L262e2a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L262e30.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L262e34.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L262e38.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L262e3e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L262e42.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L262e46.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L262e4c.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L262e50.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L262e54.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L262e5a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L262e5e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.other` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L262e62.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L262e66.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L262e6c.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L262e70.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L262e84.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L262e88.  v1:= 0I;
  #L262e8a.  v2:= 1I;
  #L262e8c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L262e92.  v0:= temp;
  #L262e94.  if v0 == 0 then goto L262eb8;
  #L262e98.  call `disposeBoundary`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.disposeBoundary:()V` @kind virtual;
  #L262e9e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L262ea2.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L262ea8.  v0:= temp;
  #L262eaa.  if v0 != 0 then goto L262eb8;
  #L262eae.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L262eb2.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L262eb8.  return @kind void;
}
procedure `void` `disposeBoundary`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.disposeBoundary:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L262ecc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L262ed0.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.BOUNDARY_DISPOSED` @type ^`io.reactivex.internal.operators.flowable.k0` @kind object;
  #L262ed4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L262eda.  v0:= temp @kind object;
  #L262edc.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L262ee0.  if v0 == 0 then goto L262eee;
  #L262ee4.  if v0 == v1 then goto L262eee;
  #L262ee8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L262eee.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L262f00.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L262f06.  v0:= temp;
  #L262f08.  if v0 == 0 then goto L262f0e;
  #L262f0c.  return @kind void;
  #L262f0e.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L262f12.  v1:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L262f16.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L262f1a.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.emitted` @type ^`long` @kind wide;
  #L262f1e.  v5:= 1I;
  #L262f20.  v6:= 1I;
  #L262f22.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L262f26.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L262f2c.  v7:= temp;
  #L262f2e.  v8:= 0I;
  #L262f30.  if v7 != 0 then goto L262f40;
  #L262f34.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L262f3a.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L262f3e.  return @kind void;
  #L262f40.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L262f44.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` @kind boolean;
  #L262f48.  if v9 == 0 then goto L262f7c;
  #L262f4c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L262f52.  v10:= temp @kind object;
  #L262f54.  if v10 == 0 then goto L262f7c;
  #L262f58.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L262f5e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L262f64.  v1:= temp @kind object;
  #L262f66.  if v7 == 0 then goto L262f74;
  #L262f6a.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L262f6e.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L262f74.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L262f7a.  return @kind void;
  #L262f7c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L262f82.  v10:= temp @kind object;
  #L262f84.  if v10 != 0 then goto L262f8c;
  #L262f88.  v11:= 1I;
  #L262f8a.  goto L262f8e;
  #L262f8c.  v11:= 0I;
  #L262f8e.  if v9 == 0 then goto L262fce;
  #L262f92.  if v11 == 0 then goto L262fce;
  #L262f96.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L262f9c.  v1:= temp @kind object;
  #L262f9e.  if v1 != 0 then goto L262fb8;
  #L262fa2.  if v7 == 0 then goto L262fb0;
  #L262fa6.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L262faa.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L262fb0.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L262fb6.  goto L262fcc;
  #L262fb8.  if v7 == 0 then goto L262fc6;
  #L262fbc.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L262fc0.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L262fc6.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L262fcc.  return @kind void;
  #L262fce.  if v11 == 0 then goto L262fe6;
  #L262fd2.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.emitted` @type ^`long` := v3 @kind wide;
  #L262fd6.  v6:= -v6 @kind int;
  #L262fd8.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L262fde.  v6:= temp;
  #L262fe0.  if v6 != 0 then goto L262f22;
  #L262fe4.  return @kind void;
  #L262fe6.  v9:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L262fea.  if v10 == v9 then goto L262ff6;
  #L262fee.  call `onNext`(v7, v10) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L262ff4.  goto L262f22;
  #L262ff6.  if v7 == 0 then goto L263004;
  #L262ffa.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L262ffe.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L263004.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L263008.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L26300e.  v7:= temp;
  #L263010.  if v7 != 0 then goto L262f22;
  #L263014.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L263018.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L26301e.  v9:= temp @kind wide;
  #L263020.  v7:= lcmp(v3, v9);
  #L263024.  if v7 == 0 then goto L2630a4;
  #L263028.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.capacityHint` @type ^`int`;
  #L26302c.  call temp:= `L`(v7, v12) @signature `Lio/reactivex/processors/UnicastProcessor;.L:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L263032.  v7:= temp @kind object;
  #L263034.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v7 @kind object;
  #L263038.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L26303c.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L263042.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.other` @type ^`java.util.concurrent.Callable` @kind object;
  #L263046.  call temp:= `call`(v9) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L26304c.  v9:= temp @kind object;
  #L26304e.  v10:= "The other Callable returned a null Publisher" @kind object;
  #L263052.  call temp:= `e`(v9, v10) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L263058.  v9:= temp @kind object;
  #L26305a.  v9:= (`n.b.b`) v9 @kind object;
  #L26305e.  v10:= new `io.reactivex.internal.operators.flowable.k0`;
  #L263062.  call `<init>`(v10, v12) @signature `Lio/reactivex/internal/operators/flowable/k0;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;)V` @kind direct;
  #L263068.  v11:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26306c.  call temp:= `compareAndSet`(v11, v8, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L263072.  v8:= temp;
  #L263074.  if v8 == 0 then goto L262f22;
  #L263078.  call `subscribe`(v9, v10) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L26307e.  v8:= 1L;
  #L263082.  v3:= v3 + v8 @kind long;
  #L263084.  call `onNext`(v0, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26308a.  goto L262f22;
  #L26308e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L263090.  call `b`(v7) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L263096.  call temp:= `addThrowable`(v2, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L26309c.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v5 @kind boolean;
  #L2630a0.  goto L262f22;
  #L2630a4.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2630a8.  call `cancel`(v7) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2630ae.  call `disposeBoundary`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.disposeBoundary:()V` @kind virtual;
  #L2630b4.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L2630b8.  v8:= "Could not deliver a window due to lack of requests" @kind object;
  #L2630bc.  call `<init>`(v7, v8) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2630c2.  call temp:= `addThrowable`(v2, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2630c8.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v5 @kind boolean;
  #L2630cc.  goto L262f22;
  catch `java.lang.Throwable` @[L263042..L26305e] goto L26308e;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L2630ec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2630f0.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2630f6.  v0:= 1I;
  #L2630f8.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L2630fc.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L263102.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L263114.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L263118.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L26311e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263122.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L263128.  v0:= temp;
  #L26312a.  if v0 == 0 then goto L26313c;
  #L26312e.  v2:= 1I;
  #L263130.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L263134.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L26313a.  goto L263142;
  #L26313c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L263142.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v2 @kind this, `io.reactivex.internal.operators.flowable.k0` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.innerNext:(Lio/reactivex/internal/operators/flowable/k0;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L263154.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L263158.  v1:= 0I;
  #L26315a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L263160.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L263164.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L263168.  call temp:= `offer`(v3, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L26316e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L263174.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L263188.  call `disposeBoundary`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.disposeBoundary:()V` @kind virtual;
  #L26318e.  v0:= 1I;
  #L263190.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L263194.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L26319a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2631ac.  call `disposeBoundary`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.disposeBoundary:()V` @kind virtual;
  #L2631b2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2631b6.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2631bc.  v0:= temp;
  #L2631be.  if v0 == 0 then goto L2631d0;
  #L2631c2.  v2:= 1I;
  #L2631c4.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L2631c8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L2631ce.  goto L2631d6;
  #L2631d0.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2631d6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2631e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L2631ec.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L2631f2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L2631f8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26320c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L263210.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L263216.  v0:= temp;
  #L263218.  if v0 == 0 then goto L26324e;
  #L26321c.  v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L263220.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L263224.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L26322a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L26322e.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L263232.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L263238.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L26323e.  v0:= 9223372036854775807L;
  #L263248.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L26324e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L263260.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L263264.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L26326a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26327c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L263280.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L263286.  v0:= temp;
  #L263288.  if v0 != 0 then goto L263296;
  #L26328c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$WindowBoundaryMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L263290.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L263296.  return @kind void;
}
