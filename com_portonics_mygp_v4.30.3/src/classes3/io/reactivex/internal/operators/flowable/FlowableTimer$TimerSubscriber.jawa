record `io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `n.b.d` @kind interface, `java.lang.Runnable` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.requested` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L261840.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L261846.  v0.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L26184a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L26185c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L261862.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L261874.  call temp:= `validate`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L26187a.  v1:= temp;
  #L26187c.  if v1 == 0 then goto L261886;
  #L261880.  v1:= 1I;
  #L261882.  v0.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.requested` @type ^`boolean` := v1 @kind boolean;
  #L261886.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L261898.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26189e.  v0:= temp @kind object;
  #L2618a0.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2618a4.  if v0 == v1 then goto L2618fe;
  #L2618a8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.requested` @type ^`boolean` @kind boolean;
  #L2618ac.  if v0 == 0 then goto L2618dc;
  #L2618b0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2618b4.  v1:= 0L;
  #L2618b8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2618be.  v1:= temp @kind object;
  #L2618c0.  call `onNext`(v0, v1) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2618c6.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L2618ca.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2618d0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2618d4.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2618da.  goto L2618fe;
  #L2618dc.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L2618e0.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2618e6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2618ea.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L2618ee.  v2:= "Can't deliver value due to lack of requests" @kind object;
  #L2618f2.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2618f8.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2618fe.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.flowable.FlowableTimer$TimerSubscriber` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer$TimerSubscriber;.setResource:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L261910.  call temp:= `trySet`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.trySet:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L261916.  return @kind void;
}
