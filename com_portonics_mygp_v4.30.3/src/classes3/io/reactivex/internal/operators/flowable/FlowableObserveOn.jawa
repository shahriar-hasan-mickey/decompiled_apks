record `io.reactivex.internal.operators.flowable.FlowableObserveOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.x` `io.reactivex.internal.operators.flowable.FlowableObserveOn.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn` v0 @kind this, `io.reactivex.e` v1 @kind object, `io.reactivex.x` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn;.<init>:(Lio/reactivex/e;Lio/reactivex/x;ZI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L259a24.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/e;)V` @kind direct;
  #L259a2a.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn.d` @type ^`io.reactivex.x` := v2 @kind object;
  #L259a2e.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn.e` @type ^`boolean` := v3 @kind boolean;
  #L259a32.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn.f` @type ^`int` := v4;
  #L259a36.  return @kind void;
}
procedure `void` `H`(`io.reactivex.internal.operators.flowable.FlowableObserveOn` v5 @kind this, `n.b.c` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn;.H:(Ln/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L259a48.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.d` @type ^`io.reactivex.x` @kind object;
  #L259a4c.  call temp:= `a`(v0) @signature `Lio/reactivex/x;.a:()Lio/reactivex/x$a;` @kind virtual;
  #L259a52.  v0:= temp @kind object;
  #L259a54.  v1:= instanceof @variable v6 @type ^`io.reactivex.e0.a.a` @kind boolean;
  #L259a58.  if v1 == 0 then goto L259a7e;
  #L259a5c.  v1:= v5.`io.reactivex.internal.operators.flowable.a.c` @type ^`io.reactivex.e` @kind object;
  #L259a60.  v2:= new `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber`;
  #L259a64.  v6:= (`io.reactivex.e0.a.a`) v6 @kind object;
  #L259a68.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.e` @type ^`boolean` @kind boolean;
  #L259a6c.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.f` @type ^`int`;
  #L259a70.  call `<init>`(v2, v6, v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.<init>:(Lio/reactivex/e0/a/a;Lio/reactivex/x$a;ZI)V` @kind direct;
  #L259a76.  call `G`(v1, v2) @signature `Lio/reactivex/e;.G:(Lio/reactivex/h;)V` @kind virtual;
  #L259a7c.  goto L259a9a;
  #L259a7e.  v1:= v5.`io.reactivex.internal.operators.flowable.a.c` @type ^`io.reactivex.e` @kind object;
  #L259a82.  v2:= new `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber`;
  #L259a86.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.e` @type ^`boolean` @kind boolean;
  #L259a8a.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn.f` @type ^`int`;
  #L259a8e.  call `<init>`(v2, v6, v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.<init>:(Ln/b/c;Lio/reactivex/x$a;ZI)V` @kind direct;
  #L259a94.  call `G`(v1, v2) @signature `Lio/reactivex/e;.G:(Lio/reactivex/h;)V` @kind virtual;
  #L259a9a.  return @kind void;
}
