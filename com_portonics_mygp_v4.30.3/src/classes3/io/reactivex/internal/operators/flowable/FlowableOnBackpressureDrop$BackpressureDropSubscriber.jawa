record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.onDrop` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.g` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/g;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25a310.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25a316.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25a31a.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.onDrop` @type ^`io.reactivex.d0.g` := v2 @kind object;
  #L25a31e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a330.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25a334.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25a33a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a34c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` @kind boolean;
  #L25a350.  if v0 == 0 then goto L25a356;
  #L25a354.  return @kind void;
  #L25a356.  v0:= 1I;
  #L25a358.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25a35c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a360.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25a366.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a378.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` @kind boolean;
  #L25a37c.  if v0 == 0 then goto L25a388;
  #L25a380.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25a386.  return @kind void;
  #L25a388.  v0:= 1I;
  #L25a38a.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25a38e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a392.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25a398.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25a3ac.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` @kind boolean;
  #L25a3b0.  if v0 == 0 then goto L25a3b6;
  #L25a3b4.  return @kind void;
  #L25a3b6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25a3bc.  v0:= temp @kind wide;
  #L25a3be.  v2:= 0L;
  #L25a3c2.  v4:= lcmp(v0, v2);
  #L25a3c6.  if v4 == 0 then goto L25a3e0;
  #L25a3ca.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a3ce.  call `onNext`(v0, v6) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25a3d4.  v0:= 1L;
  #L25a3d8.  call temp:= `e`(v5, v0) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25a3de.  goto L25a400;
  #L25a3e0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.onDrop` @type ^`io.reactivex.d0.g` @kind object;
  #L25a3e4.  call `accept`(v0, v6) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L25a3ea.  goto L25a400;
  #L25a3ec.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25a3ee.  call `b`(v6) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25a3f4.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.cancel:()V` @kind virtual;
  #L25a3fa.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25a400.  return @kind void;
  catch `java.lang.Throwable` @[L25a3e0..L25a3ea] goto L25a3ec;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25a420.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25a424.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25a42a.  v0:= temp;
  #L25a42c.  if v0 == 0 then goto L25a44e;
  #L25a430.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L25a434.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a438.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25a43e.  v0:= 9223372036854775807L;
  #L25a448.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25a44e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a460.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25a466.  v0:= temp;
  #L25a468.  if v0 == 0 then goto L25a472;
  #L25a46c.  call temp:= `a`(v1, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25a472.  return @kind void;
}
