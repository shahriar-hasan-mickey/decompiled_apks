record `io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `n.b.d` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.count` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.resource` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber` v1 @kind this, `n.b.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$IntervalSubscriber;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25727c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L257282.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L257286.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25728c.  v1.`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L257290.  v1.`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L257294.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$IntervalSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2572a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2572ac.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2572b2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$IntervalSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2572c4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L2572ca.  v0:= temp;
  #L2572cc.  if v0 == 0 then goto L2572d6;
  #L2572d0.  call temp:= `a`(v1, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L2572d6.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$IntervalSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2572e8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2572ec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2572f2.  v0:= temp @kind object;
  #L2572f4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2572f8.  if v0 == v1 then goto L257388;
  #L2572fc.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L257302.  v0:= temp @kind wide;
  #L257304.  v2:= 0L;
  #L257308.  v4:= lcmp(v0, v2);
  #L25730c.  if v4 == 0 then goto L25733a;
  #L257310.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L257314.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.count` @type ^`long` @kind wide;
  #L257318.  v3:= 1L;
  #L25731c.  v5:= v1 + v3 @kind long;
  #L257320.  v7.`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.count` @type ^`long` := v5 @kind wide;
  #L257324.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L25732a.  v1:= temp @kind object;
  #L25732c.  call `onNext`(v0, v1) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L257332.  call temp:= `e`(v7, v3) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L257338.  goto L257388;
  #L25733a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25733e.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L257342.  v2:= new `java.lang.StringBuilder`;
  #L257346.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L25734c.  v3:= "Can't deliver value " @kind object;
  #L257350.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L257356.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.count` @type ^`long` @kind wide;
  #L25735a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L257360.  v3:= " due to lack of requests" @kind object;
  #L257364.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25736a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L257370.  v2:= temp @kind object;
  #L257372.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L257378.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25737e.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L257382.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L257388.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval$IntervalSubscriber;.setResource:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25739c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableInterval$IntervalSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2573a0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2573a6.  return @kind void;
}
