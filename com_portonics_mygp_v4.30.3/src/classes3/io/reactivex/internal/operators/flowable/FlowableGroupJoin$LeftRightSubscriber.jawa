record `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.isLeft` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.q` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.q` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/q;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2570f4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2570fa.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.q` := v1 @kind object;
  #L2570fe.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.isLeft` @type ^`boolean` := v2 @kind boolean;
  #L257102.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L257114.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25711a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2570cc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2570d2.  v0:= temp @kind object;
  #L2570d4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L2570d8.  if v0 != v1 then goto L2570e0;
  #L2570dc.  v0:= 1I;
  #L2570de.  goto L2570e2;
  #L2570e0.  v0:= 0I;
  #L2570e2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25712c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.q` @kind object;
  #L257130.  call `innerComplete`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/q;.innerComplete:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;)V` @kind interface;
  #L257136.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L257148.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.q` @kind object;
  #L25714c.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/q;.innerError:(Ljava/lang/Throwable;)V` @kind interface;
  #L257152.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L257164.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.q` @kind object;
  #L257168.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber.isLeft` @type ^`boolean` @kind boolean;
  #L25716c.  call `innerValue`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/q;.innerValue:(ZLjava/lang/Object;)V` @kind interface;
  #L257172.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L257184.  v0:= 9223372036854775807L;
  #L25718e.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L257194.  return @kind void;
}
