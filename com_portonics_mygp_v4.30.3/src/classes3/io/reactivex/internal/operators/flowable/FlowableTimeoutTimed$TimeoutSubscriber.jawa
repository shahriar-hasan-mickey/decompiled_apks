record `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `io.reactivex.internal.operators.flowable.f0` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.unit` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @AccessFlag FINAL;
  `io.reactivex.x$a` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.x$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.<init>:(Ln/b/c;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2615a0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L2615a6.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L2615aa.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.timeout` @type ^`long` := v2 @kind wide;
  #L2615ae.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L2615b2.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.x$a` := v5 @kind object;
  #L2615b6.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L2615ba.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L2615c0.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L2615c4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2615c8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2615ce.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L2615d2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L2615d6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L2615dc.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L2615e0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2615f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2615f8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2615fe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L261602.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L261608.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26161c.  v0:= 9223372036854775807L;
  #L261626.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L26162c.  v2:= temp @kind wide;
  #L26162e.  v4:= lcmp(v2, v0);
  #L261632.  if v4 == 0 then goto L261654;
  #L261636.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L26163a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L261640.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261644.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L26164a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L26164e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L261654.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L261668.  v0:= 9223372036854775807L;
  #L261672.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L261678.  v2:= temp @kind wide;
  #L26167a.  v4:= lcmp(v2, v0);
  #L26167e.  if v4 == 0 then goto L2616a2;
  #L261682.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L261686.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L26168c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261690.  call `onError`(v0, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L261696.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L26169a.  call `dispose`(v6) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2616a0.  goto L2616a8;
  #L2616a2.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2616a8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2616bc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2616c2.  v0:= temp @kind wide;
  #L2616c4.  v2:= 9223372036854775807L;
  #L2616ce.  v4:= lcmp(v0, v2);
  #L2616d2.  if v4 == 0 then goto L261710;
  #L2616d6.  v2:= 1L;
  #L2616da.  v2:= v2 + v0 @kind long;
  #L2616dc.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L2616e2.  v0:= temp;
  #L2616e4.  if v0 != 0 then goto L2616ea;
  #L2616e8.  goto L261710;
  #L2616ea.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L2616ee.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2616f4.  v0:= temp @kind object;
  #L2616f6.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2616fa.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L261700.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261704.  call `onNext`(v0, v6) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26170a.  call `startTimeout`(v5, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.startTimeout:(J)V` @kind virtual;
  #L261710.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L261724.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L261728.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L26172c.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @kind static;
  #L261732.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L261744.  v0:= 9223372036854775807L;
  #L26174e.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L261754.  v4:= temp;
  #L261756.  if v4 == 0 then goto L261792;
  #L26175a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26175e.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L261764.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261768.  v5:= new `java.util.concurrent.TimeoutException`;
  #L26176c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.timeout` @type ^`long` @kind wide;
  #L261770.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L261774.  call temp:= `d`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.d:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L26177a.  v0:= temp @kind object;
  #L26177c.  call `<init>`(v5, v0) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L261782.  call `onError`(v4, v5) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L261788.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L26178c.  call `dispose`(v4) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L261792.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2617a4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2617a8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2617ac.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L2617b2.  return @kind void;
}
procedure `void` `startTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutSubscriber;.startTimeout:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2617c4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L2617c8.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L2617cc.  v2:= new `io.reactivex.internal.operators.flowable.g0`;
  #L2617d0.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/internal/operators/flowable/g0;.<init>:(JLio/reactivex/internal/operators/flowable/f0;)V` @kind direct;
  #L2617d6.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.timeout` @type ^`long` @kind wide;
  #L2617da.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2617de.  call temp:= `c`(v1, v2, v5, v3) @signature `Lio/reactivex/x$a;.c:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L2617e4.  v5:= temp @kind object;
  #L2617e6.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2617ec.  return @kind void;
}
