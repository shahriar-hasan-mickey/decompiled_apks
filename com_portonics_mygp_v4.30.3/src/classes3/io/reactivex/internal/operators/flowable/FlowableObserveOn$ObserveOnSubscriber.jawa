record `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` @kind class, `io.reactivex.h` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.x$a` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.<init>:(Ln/b/c;Lio/reactivex/x$a;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2596d0.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.<init>:(Lio/reactivex/x$a;ZI)V` @kind direct;
  #L2596d6.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L2596da.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2596ec.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2596f0.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L2596f6.  v0:= temp;
  #L2596f8.  if v0 == 0 then goto L259784;
  #L2596fc.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` := v4 @kind object;
  #L259700.  v0:= instanceof @variable v4 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L259704.  if v0 == 0 then goto L25975c;
  #L259708.  v0:= v4 @kind object;
  #L25970a.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L25970e.  v1:= 7I;
  #L259710.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L259716.  v1:= temp;
  #L259718.  v2:= 1I;
  #L25971a.  if v1 != v2 then goto L259736;
  #L25971e.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int` := v2;
  #L259722.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L259726.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L25972a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25972e.  call `onSubscribe`(v4, v3) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L259734.  return @kind void;
  #L259736.  v2:= 2I;
  #L259738.  if v1 != v2 then goto L25975c;
  #L25973c.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int` := v2;
  #L259740.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L259744.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L259748.  call `onSubscribe`(v0, v3) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25974e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int`;
  #L259752.  v0:= (`long`) v0 @kind i2l;
  #L259754.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25975a.  return @kind void;
  #L25975c.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L259760.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int`;
  #L259764.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L25976a.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L25976e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L259772.  call `onSubscribe`(v0, v3) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L259778.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int`;
  #L25977c.  v0:= (`long`) v0 @kind i2l;
  #L25977e.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L259784.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L259674.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L259678.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L25967e.  v0:= temp @kind object;
  #L259680.  if v0 == 0 then goto L2596be;
  #L259684.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int`;
  #L259688.  v2:= 1I;
  #L25968a.  if v1 == v2 then goto L2596be;
  #L25968e.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` @kind wide;
  #L259692.  v3:= 1L;
  #L259696.  v1:= v1 + v3 @kind long;
  #L259698.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @type ^`int`;
  #L25969c.  v3:= (`long`) v3 @kind i2l;
  #L25969e.  v5:= lcmp(v1, v3);
  #L2596a2.  if v5 != 0 then goto L2596ba;
  #L2596a6.  v3:= 0L;
  #L2596aa.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` := v3 @kind wide;
  #L2596ae.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2596b2.  call `request`(v3, v1) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2596b8.  goto L2596be;
  #L2596ba.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` := v1 @kind wide;
  #L2596be.  return v0 @kind object;
}
procedure `void` `runAsync`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.runAsync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L259798.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25979c.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L2597a0.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` @kind wide;
  #L2597a4.  v4:= 1I;
  #L2597a6.  v5:= 1I;
  #L2597a8.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2597ac.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2597b2.  v6:= temp @kind wide;
  #L2597b4.  v8:= lcmp(v2, v6);
  #L2597b8.  if v8 == 0 then goto L25985e;
  #L2597bc.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L2597c0.  call temp:= `poll`(v1) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L2597c6.  v9:= temp @kind object;
  #L2597c8.  if v9 != 0 then goto L2597d0;
  #L2597cc.  v10:= 1I;
  #L2597ce.  goto L2597d2;
  #L2597d0.  v10:= 0I;
  #L2597d2.  call temp:= `checkTerminated`(v11, v8, v10, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.checkTerminated:(ZZLn/b/c;)Z` @kind virtual;
  #L2597d8.  v8:= temp;
  #L2597da.  if v8 == 0 then goto L2597e0;
  #L2597de.  return @kind void;
  #L2597e0.  if v10 == 0 then goto L2597e6;
  #L2597e4.  goto L25985e;
  #L2597e6.  call `onNext`(v0, v9) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2597ec.  v8:= 1L;
  #L2597f0.  v2:= v2 + v8 @kind long;
  #L2597f2.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @type ^`int`;
  #L2597f6.  v8:= (`long`) v8 @kind i2l;
  #L2597f8.  v10:= lcmp(v2, v8);
  #L2597fc.  if v10 != 0 then goto L2597b4;
  #L259800.  v8:= 9223372036854775807L;
  #L25980a.  v10:= lcmp(v6, v8);
  #L25980e.  if v10 == 0 then goto L259820;
  #L259812.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L259816.  v7:= -v2 @kind long;
  #L259818.  call temp:= `addAndGet`(v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L25981e.  v6:= temp @kind wide;
  #L259820.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L259824.  call `request`(v8, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25982a.  v2:= 0L;
  #L25982e.  goto L2597b4;
  #L259830.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L259832.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L259838.  v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L25983c.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L259840.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L259846.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L25984c.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L259852.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L259856.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L25985c.  return @kind void;
  #L25985e.  v8:= lcmp(v2, v6);
  #L259862.  if v8 != 0 then goto L259880;
  #L259866.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L25986a.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L259870.  v7:= temp;
  #L259872.  call temp:= `checkTerminated`(v11, v6, v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.checkTerminated:(ZZLn/b/c;)Z` @kind virtual;
  #L259878.  v6:= temp;
  #L25987a.  if v6 == 0 then goto L259880;
  #L25987e.  return @kind void;
  #L259880.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L259886.  v6:= temp;
  #L259888.  if v5 != v6 then goto L2598a0;
  #L25988c.  v11.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L259890.  v5:= -v5 @kind int;
  #L259892.  call temp:= `addAndGet`(v11, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L259898.  v5:= temp;
  #L25989a.  if v5 != 0 then goto L2597a8;
  #L25989e.  return @kind void;
  #L2598a0.  v5:= v6;
  #L2598a2.  goto L2597a8;
  catch `java.lang.Throwable` @[L2597c0..L2597c8] goto L259830;
}
procedure `void` `runBackfused`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.runBackfused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2598c0.  v0:= 1I;
  #L2598c2.  v1:= 1I;
  #L2598c4.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L2598c8.  if v2 == 0 then goto L2598ce;
  #L2598cc.  return @kind void;
  #L2598ce.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L2598d2.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2598d6.  v4:= 0I;
  #L2598d8.  call `onNext`(v3, v4) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2598de.  if v2 == 0 then goto L259910;
  #L2598e2.  v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2598e6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L2598ea.  if v0 == 0 then goto L2598fa;
  #L2598ee.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2598f2.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2598f8.  goto L259904;
  #L2598fa.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2598fe.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L259904.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L259908.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L25990e.  return @kind void;
  #L259910.  v1:= -v1 @kind int;
  #L259912.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L259918.  v1:= temp;
  #L25991a.  if v1 != 0 then goto L2598c4;
  #L25991e.  return @kind void;
}
procedure `void` `runSync`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.runSync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L259930.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L259934.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L259938.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` @kind wide;
  #L25993c.  v4:= 1I;
  #L25993e.  v5:= 1I;
  #L259940.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L259944.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25994a.  v6:= temp @kind wide;
  #L25994c.  v8:= lcmp(v2, v6);
  #L259950.  if v8 == 0 then goto L2599b6;
  #L259954.  call temp:= `poll`(v1) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L25995a.  v8:= temp @kind object;
  #L25995c.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L259960.  if v9 == 0 then goto L259966;
  #L259964.  return @kind void;
  #L259966.  if v8 != 0 then goto L259980;
  #L25996a.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L25996e.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L259974.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L259978.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L25997e.  return @kind void;
  #L259980.  call `onNext`(v0, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L259986.  v8:= 1L;
  #L25998a.  v2:= v2 + v8 @kind long;
  #L25998c.  goto L25994c;
  #L25998e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L259990.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L259996.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L25999a.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25999e.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2599a4.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2599aa.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L2599ae.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2599b4.  return @kind void;
  #L2599b6.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L2599ba.  if v6 == 0 then goto L2599c0;
  #L2599be.  return @kind void;
  #L2599c0.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L2599c6.  v6:= temp;
  #L2599c8.  if v6 == 0 then goto L2599e2;
  #L2599cc.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L2599d0.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2599d6.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L2599da.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2599e0.  return @kind void;
  #L2599e2.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2599e8.  v6:= temp;
  #L2599ea.  if v5 != v6 then goto L259a02;
  #L2599ee.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L2599f2.  v5:= -v5 @kind int;
  #L2599f4.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2599fa.  v5:= temp;
  #L2599fc.  if v5 != 0 then goto L259940;
  #L259a00.  return @kind void;
  #L259a02.  v5:= v6;
  #L259a04.  goto L259940;
  catch `java.lang.Throwable` @[L259954..L25995c] goto L25998e;
}
