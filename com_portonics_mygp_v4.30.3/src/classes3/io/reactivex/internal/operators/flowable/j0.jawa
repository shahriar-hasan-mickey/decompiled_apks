record `io.reactivex.internal.operators.flowable.j0` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.a` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` `io.reactivex.internal.operators.flowable.j0.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.j0.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.j0` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/j0;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L262874.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/a;.<init>:()V` @kind direct;
  #L26287a.  v0.`io.reactivex.internal.operators.flowable.j0.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` := v1 @kind object;
  #L26287e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.j0` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/j0;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L262890.  v0:= v1.`io.reactivex.internal.operators.flowable.j0.d` @type ^`boolean` @kind boolean;
  #L262894.  if v0 == 0 then goto L26289a;
  #L262898.  return @kind void;
  #L26289a.  v0:= 1I;
  #L26289c.  v1.`io.reactivex.internal.operators.flowable.j0.d` @type ^`boolean` := v0 @kind boolean;
  #L2628a0.  v0:= v1.`io.reactivex.internal.operators.flowable.j0.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` @kind object;
  #L2628a4.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerComplete:()V` @kind virtual;
  #L2628aa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.j0` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/j0;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2628bc.  v0:= v1.`io.reactivex.internal.operators.flowable.j0.d` @type ^`boolean` @kind boolean;
  #L2628c0.  if v0 == 0 then goto L2628cc;
  #L2628c4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2628ca.  return @kind void;
  #L2628cc.  v0:= 1I;
  #L2628ce.  v1.`io.reactivex.internal.operators.flowable.j0.d` @type ^`boolean` := v0 @kind boolean;
  #L2628d2.  v0:= v1.`io.reactivex.internal.operators.flowable.j0.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` @kind object;
  #L2628d6.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2628dc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.j0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/j0;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L2628f0.  v1:= v0.`io.reactivex.internal.operators.flowable.j0.d` @type ^`boolean` @kind boolean;
  #L2628f4.  if v1 == 0 then goto L2628fa;
  #L2628f8.  return @kind void;
  #L2628fa.  v1:= v0.`io.reactivex.internal.operators.flowable.j0.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` @kind object;
  #L2628fe.  call `innerNext`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerNext:()V` @kind virtual;
  #L262904.  return @kind void;
}
