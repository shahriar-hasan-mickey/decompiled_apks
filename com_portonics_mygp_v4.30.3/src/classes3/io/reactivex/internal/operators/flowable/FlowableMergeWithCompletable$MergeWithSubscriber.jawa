record `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainDone` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherDone` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherObserver` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.requested` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L258350.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L258356.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25835a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L25835e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L258364.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L258368.  v1:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver`;
  #L25836c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;)V` @kind direct;
  #L258372.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver` := v1 @kind object;
  #L258376.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L25837a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L258380.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L258384.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L258388.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25838e.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L258392.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2583a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2583a8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2583ae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver` @kind object;
  #L2583b2.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2583b8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2583cc.  v0:= 1I;
  #L2583ce.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainDone` @type ^`boolean` := v0 @kind boolean;
  #L2583d2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherDone` @type ^`boolean` @kind boolean;
  #L2583d6.  if v0 == 0 then goto L2583e8;
  #L2583da.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2583de.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2583e2.  call `b`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.b:(Ln/b/c;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L2583e8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2583fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L258400.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L258406.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25840a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25840e.  call `d`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.d:(Ln/b/c;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L258414.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L258428.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25842c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L258430.  call `f`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.f:(Ln/b/c;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L258436.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L258448.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25844c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L258450.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @kind static;
  #L258456.  return @kind void;
}
procedure `void` `otherComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.otherComplete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L258468.  v0:= 1I;
  #L25846a.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.otherDone` @type ^`boolean` := v0 @kind boolean;
  #L25846e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainDone` @type ^`boolean` @kind boolean;
  #L258472.  if v0 == 0 then goto L258484;
  #L258476.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25847a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25847e.  call `b`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.b:(Ln/b/c;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L258484.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L258498.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25849c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2584a2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2584a6.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2584aa.  call `d`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.d:(Ln/b/c;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L2584b0.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$MergeWithSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2584c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2584c8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2584cc.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L2584d2.  return @kind void;
}
