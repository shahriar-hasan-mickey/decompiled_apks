record `io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25065c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Ln/b/c;)V` @kind direct;
  #L250662.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L250674.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L25067a.  v0:= temp;
  #L25067c.  if v0 == 0 then goto L250682;
  #L250680.  return @kind void;
  #L250682.  if v6 != 0 then goto L25069c;
  #L250686.  v6:= new `java.lang.NullPointerException`;
  #L25068a.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L25068e.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250694.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25069a.  return @kind void;
  #L25069c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2506a2.  v0:= temp @kind wide;
  #L2506a4.  v2:= 0L;
  #L2506a8.  v4:= lcmp(v0, v2);
  #L2506ac.  if v4 == 0 then goto L2506c6;
  #L2506b0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @type ^`n.b.c` @kind object;
  #L2506b4.  call `onNext`(v0, v6) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2506ba.  v0:= 1L;
  #L2506be.  call temp:= `e`(v5, v0) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L2506c4.  goto L2506cc;
  #L2506c6.  call `onOverflow`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.onOverflow:()V` @kind virtual;
  #L2506cc.  return @kind void;
}
procedure `void` `onOverflow`() @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.onOverflow:()V` @AccessFlag ABSTRACT {

  # return;
}
