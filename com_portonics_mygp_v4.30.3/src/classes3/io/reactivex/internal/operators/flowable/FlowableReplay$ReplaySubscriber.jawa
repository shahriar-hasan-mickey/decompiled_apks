record `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.internal.operators.flowable.y` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.management` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxChildRequested` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxUpstreamRequested` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.shouldConnect` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L25cab0.  v0:= 0I;
  #L25cab2.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[v0];
  #L25cab6.  `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] := v1 @kind object;
  #L25caba.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[v0];
  #L25cabe.  `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] := v0 @kind object;
  #L25cac2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.y` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/y;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25cad4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25cada.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.y` := v2 @kind object;
  #L25cade.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L25cae2.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25cae8.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.management` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L25caec.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L25caf0.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L25caf4.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L25cafa.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L25cafe.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L25cb02.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L25cb08.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L25cb0c.  return @kind void;
}
procedure `boolean` `add`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.add:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25ca28.  call temp:= `requireNonNull`(v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L25ca2e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25ca32.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25ca38.  v0:= temp @kind object;
  #L25ca3a.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v0 @kind object;
  #L25ca3e.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L25ca42.  v2:= 0I;
  #L25ca44.  if v0 != v1 then goto L25ca4a;
  #L25ca48.  return v2;
  #L25ca4a.  v1:= length @variable v0;
  #L25ca4c.  v3:= v1 + 1;
  #L25ca50.  v3:= new `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[v3];
  #L25ca54.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L25ca5a.  v3[v1]:= v5 @kind object;
  #L25ca5e.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25ca62.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L25ca68.  v0:= temp;
  #L25ca6a.  if v0 == 0 then goto L25ca2e;
  #L25ca6e.  v5:= 1I;
  #L25ca70.  return v5;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25cb20.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25cb24.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L25cb28.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L25cb2e.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25cb34.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25ca84.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25ca88.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25ca8e.  v0:= temp @kind object;
  #L25ca90.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L25ca94.  if v0 != v1 then goto L25ca9c;
  #L25ca98.  v0:= 1I;
  #L25ca9a.  goto L25ca9e;
  #L25ca9c.  v0:= 0I;
  #L25ca9e.  return v0;
}
procedure `void` `manageRequests`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.manageRequests:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L25cb48.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.management` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L25cb4c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25cb52.  v0:= temp;
  #L25cb54.  if v0 == 0 then goto L25cb5a;
  #L25cb58.  return @kind void;
  #L25cb5a.  v0:= 1I;
  #L25cb5c.  call temp:= `isDisposed`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.isDisposed:()Z` @kind virtual;
  #L25cb62.  v1:= temp;
  #L25cb64.  if v1 == 0 then goto L25cb6a;
  #L25cb68.  return @kind void;
  #L25cb6a.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25cb6e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25cb74.  v1:= temp @kind object;
  #L25cb76.  v1:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v1 @kind object;
  #L25cb7a.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxChildRequested` @type ^`long` @kind wide;
  #L25cb7e.  v4:= length @variable v1;
  #L25cb80.  v5:= 0I;
  #L25cb82.  v6:= v2 @kind wide;
  #L25cb84.  if v5 >= v4 then goto L25cba6;
  #L25cb88.  v8:= v1[v5] @kind object;
  #L25cb8c.  v8:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25cb90.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25cb96.  v8:= temp @kind wide;
  #L25cb98.  call temp:= `max`(v6, v8) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L25cb9e.  v6:= temp @kind wide;
  #L25cba0.  v5:= v5 + 1;
  #L25cba4.  goto L25cb84;
  #L25cba6.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` @kind wide;
  #L25cbaa.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25cbb0.  v1:= temp @kind object;
  #L25cbb2.  v1:= (`n.b.d`) v1 @kind object;
  #L25cbb6.  v2:= v6 - v2 @kind long;
  #L25cbba.  v8:= 0L;
  #L25cbbe.  v10:= lcmp(v2, v8);
  #L25cbc2.  if v10 == 0 then goto L25cc06;
  #L25cbc6.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxChildRequested` @type ^`long` := v6 @kind wide;
  #L25cbca.  if v1 == 0 then goto L25cbec;
  #L25cbce.  v6:= lcmp(v4, v8);
  #L25cbd2.  if v6 == 0 then goto L25cbe4;
  #L25cbd6.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` := v8 @kind wide;
  #L25cbda.  v4:= v4 + v2 @kind long;
  #L25cbdc.  call `request`(v1, v4) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25cbe2.  goto L25cc1c;
  #L25cbe4.  call `request`(v1, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25cbea.  goto L25cc1c;
  #L25cbec.  v4:= v4 + v2 @kind long;
  #L25cbee.  v1:= lcmp(v4, v8);
  #L25cbf2.  if v1 >= 0 then goto L25cc00;
  #L25cbf6.  v4:= 9223372036854775807L;
  #L25cc00.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` := v4 @kind wide;
  #L25cc04.  goto L25cc1c;
  #L25cc06.  v2:= lcmp(v4, v8);
  #L25cc0a.  if v2 == 0 then goto L25cc1c;
  #L25cc0e.  if v1 == 0 then goto L25cc1c;
  #L25cc12.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.maxUpstreamRequested` @type ^`long` := v8 @kind wide;
  #L25cc16.  call `request`(v1, v4) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25cc1c.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.management` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L25cc20.  v0:= -v0 @kind int;
  #L25cc22.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25cc28.  v0:= temp;
  #L25cc2a.  if v0 != 0 then goto L25cb5c;
  #L25cc2e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25cc40.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @type ^`boolean` @kind boolean;
  #L25cc44.  if v0 != 0 then goto L25cc88;
  #L25cc48.  v0:= 1I;
  #L25cc4a.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25cc4e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.y` @kind object;
  #L25cc52.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/flowable/y;.complete:()V` @kind interface;
  #L25cc58.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25cc5c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L25cc60.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25cc66.  v0:= temp @kind object;
  #L25cc68.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v0 @kind object;
  #L25cc6c.  v1:= length @variable v0;
  #L25cc6e.  v2:= 0I;
  #L25cc70.  if v2 >= v1 then goto L25cc88;
  #L25cc74.  v3:= v0[v2] @kind object;
  #L25cc78.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.y` @kind object;
  #L25cc7c.  call `replay`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/y;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind interface;
  #L25cc82.  v2:= v2 + 1;
  #L25cc86.  goto L25cc70;
  #L25cc88.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25cc9c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @type ^`boolean` @kind boolean;
  #L25cca0.  if v0 != 0 then goto L25cce4;
  #L25cca4.  v0:= 1I;
  #L25cca6.  v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25ccaa.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.y` @kind object;
  #L25ccae.  call `error`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/y;.error:(Ljava/lang/Throwable;)V` @kind interface;
  #L25ccb4.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25ccb8.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L25ccbc.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25ccc2.  v5:= temp @kind object;
  #L25ccc4.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v5 @kind object;
  #L25ccc8.  v0:= length @variable v5;
  #L25ccca.  v1:= 0I;
  #L25cccc.  if v1 >= v0 then goto L25ccea;
  #L25ccd0.  v2:= v5[v1] @kind object;
  #L25ccd4.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.y` @kind object;
  #L25ccd8.  call `replay`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/y;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind interface;
  #L25ccde.  v1:= v1 + 1;
  #L25cce2.  goto L25cccc;
  #L25cce4.  call `t`(v5) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25ccea.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25ccfc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.done` @type ^`boolean` @kind boolean;
  #L25cd00.  if v0 != 0 then goto L25cd3a;
  #L25cd04.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.y` @kind object;
  #L25cd08.  call `next`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/y;.next:(Ljava/lang/Object;)V` @kind interface;
  #L25cd0e.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25cd12.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25cd18.  v5:= temp @kind object;
  #L25cd1a.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v5 @kind object;
  #L25cd1e.  v0:= length @variable v5;
  #L25cd20.  v1:= 0I;
  #L25cd22.  if v1 >= v0 then goto L25cd3a;
  #L25cd26.  v2:= v5[v1] @kind object;
  #L25cd2a.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.y` @kind object;
  #L25cd2e.  call `replay`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/y;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind interface;
  #L25cd34.  v1:= v1 + 1;
  #L25cd38.  goto L25cd22;
  #L25cd3a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v4 @kind this, `n.b.d` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25cd4c.  call temp:= `setOnce`(v4, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L25cd52.  v5:= temp;
  #L25cd54.  if v5 == 0 then goto L25cd8a;
  #L25cd58.  call `manageRequests`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.manageRequests:()V` @kind virtual;
  #L25cd5e.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25cd62.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25cd68.  v5:= temp @kind object;
  #L25cd6a.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v5 @kind object;
  #L25cd6e.  v0:= length @variable v5;
  #L25cd70.  v1:= 0I;
  #L25cd72.  if v1 >= v0 then goto L25cd8a;
  #L25cd76.  v2:= v5[v1] @kind object;
  #L25cd7a.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.y` @kind object;
  #L25cd7e.  call `replay`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/y;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind interface;
  #L25cd84.  v1:= v1 + 1;
  #L25cd88.  goto L25cd72;
  #L25cd8a.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.remove:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25cd9c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25cda0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25cda6.  v0:= temp @kind object;
  #L25cda8.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[]) v0 @kind object;
  #L25cdac.  v1:= length @variable v0;
  #L25cdae.  if v1 != 0 then goto L25cdb4;
  #L25cdb2.  return @kind void;
  #L25cdb4.  v2:= -1I;
  #L25cdb6.  v3:= 0I;
  #L25cdb8.  v4:= 0I;
  #L25cdba.  if v4 >= v1 then goto L25cdd8;
  #L25cdbe.  v5:= v0[v4] @kind object;
  #L25cdc2.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L25cdc8.  v5:= temp;
  #L25cdca.  if v5 == 0 then goto L25cdd2;
  #L25cdce.  v2:= v4;
  #L25cdd0.  goto L25cdd8;
  #L25cdd2.  v4:= v4 + 1;
  #L25cdd6.  goto L25cdba;
  #L25cdd8.  if v2 >= 0 then goto L25cdde;
  #L25cddc.  return @kind void;
  #L25cdde.  v4:= 1I;
  #L25cde0.  if v1 != v4 then goto L25cdea;
  #L25cde4.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[] @kind object;
  #L25cde8.  goto L25ce08;
  #L25cdea.  v5:= v1 + -1;
  #L25cdee.  v5:= new `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription`[v5];
  #L25cdf2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L25cdf8.  v3:= v2 + 1;
  #L25cdfc.  v1:= v1 - v2 @kind int;
  #L25cdfe.  v1:= v1 - v4 @kind int;
  #L25ce00.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L25ce06.  v1:= v5 @kind object;
  #L25ce08.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25ce0c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L25ce12.  v0:= temp;
  #L25ce14.  if v0 == 0 then goto L25cd9c;
  #L25ce18.  return @kind void;
}
