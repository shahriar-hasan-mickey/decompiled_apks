record `io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` @kind class {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription` v0 @kind this, `n.b.c` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeSubscription;.<init>:(Ln/b/c;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25bad4.  call `<init>`(v0, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.<init>:(JJ)V` @kind direct;
  #L25bada.  v0.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25bade.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L25baf0.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` @kind wide;
  #L25baf4.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25baf8.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` @kind wide;
  #L25bafc.  v5:= lcmp(v3, v0);
  #L25bb00.  if v5 == 0 then goto L25bb24;
  #L25bb04.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25bb08.  if v5 == 0 then goto L25bb0e;
  #L25bb0c.  return @kind void;
  #L25bb0e.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L25bb14.  v5:= temp @kind object;
  #L25bb16.  call `onNext`(v2, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25bb1c.  v5:= 1L;
  #L25bb20.  v3:= v3 + v5 @kind long;
  #L25bb22.  goto L25bafc;
  #L25bb24.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25bb28.  if v0 == 0 then goto L25bb2e;
  #L25bb2c.  return @kind void;
  #L25bb2e.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25bb34.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription` v11 @kind this, `long` v12 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L25bb48.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` @kind wide;
  #L25bb4c.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` @kind wide;
  #L25bb50.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25bb54.  v5:= 0L;
  #L25bb58.  v7:= v5 @kind wide;
  #L25bb5a.  v9:= lcmp(v7, v12);
  #L25bb5e.  if v9 == 0 then goto L25bb8c;
  #L25bb62.  v9:= lcmp(v2, v0);
  #L25bb66.  if v9 == 0 then goto L25bb8c;
  #L25bb6a.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25bb6e.  if v9 == 0 then goto L25bb74;
  #L25bb72.  return @kind void;
  #L25bb74.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L25bb7a.  v9:= temp @kind object;
  #L25bb7c.  call `onNext`(v4, v9) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25bb82.  v9:= 1L;
  #L25bb86.  v7:= v7 + v9 @kind long;
  #L25bb88.  v2:= v2 + v9 @kind long;
  #L25bb8a.  goto L25bb5a;
  #L25bb8c.  v12:= lcmp(v2, v0);
  #L25bb90.  if v12 != 0 then goto L25bba4;
  #L25bb94.  v12:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25bb98.  if v12 != 0 then goto L25bba2;
  #L25bb9c.  call `onComplete`(v4) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25bba2.  return @kind void;
  #L25bba4.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25bbaa.  v12:= temp @kind wide;
  #L25bbac.  v9:= lcmp(v7, v12);
  #L25bbb0.  if v9 != 0 then goto L25bb5a;
  #L25bbb4.  v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` := v2 @kind wide;
  #L25bbb8.  v12:= -v7 @kind long;
  #L25bbba.  call temp:= `addAndGet`(v11, v12) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L25bbc0.  v12:= temp @kind wide;
  #L25bbc2.  v7:= lcmp(v12, v5);
  #L25bbc6.  if v7 != 0 then goto L25bb58;
  #L25bbca.  return @kind void;
}
