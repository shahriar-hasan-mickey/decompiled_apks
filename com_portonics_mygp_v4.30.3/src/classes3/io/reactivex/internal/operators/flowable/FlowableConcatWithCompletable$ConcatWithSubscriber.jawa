record `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.b` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.inCompletable` @AccessFlag ;
  `io.reactivex.c` `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.other` @AccessFlag ;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$ConcatWithSubscriber;.<init>:(Ln/b/c;Lio/reactivex/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24f984.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24f98a.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L24f98e.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.other` @type ^`io.reactivex.c` := v2 @kind object;
  #L24f992.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$ConcatWithSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f9a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24f9a8.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24f9ae.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24f9b4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$ConcatWithSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24f9c8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.inCompletable` @type ^`boolean` @kind boolean;
  #L24f9cc.  if v0 == 0 then goto L24f9dc;
  #L24f9d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24f9d4.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24f9da.  goto L24f9fa;
  #L24f9dc.  v0:= 1I;
  #L24f9de.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.inCompletable` @type ^`boolean` := v0 @kind boolean;
  #L24f9e2.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L24f9e6.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.upstream` @type ^`n.b.d` := v0 @kind object;
  #L24f9ea.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.other` @type ^`io.reactivex.c` @kind object;
  #L24f9ee.  v1:= 0I;
  #L24f9f0.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.other` @type ^`io.reactivex.c` := v1 @kind object;
  #L24f9f4.  call `b`(v0, v2) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L24f9fa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$ConcatWithSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24fa0c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24fa10.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24fa16.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$ConcatWithSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24fa28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24fa2c.  call `onNext`(v0, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24fa32.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$ConcatWithSubscriber;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L24fa44.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24fa4a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$ConcatWithSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24fa5c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24fa60.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L24fa66.  v0:= temp;
  #L24fa68.  if v0 == 0 then goto L24fa7a;
  #L24fa6c.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.upstream` @type ^`n.b.d` := v2 @kind object;
  #L24fa70.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24fa74.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L24fa7a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$ConcatWithSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24fa8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24fa90.  call `request`(v0, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24fa96.  return @kind void;
}
