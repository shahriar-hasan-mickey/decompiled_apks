record `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @AccessFlag ;
  `io.reactivex.e0.a.a` `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v0 @kind this, `io.reactivex.e0.a.a` v1 @kind object, `io.reactivex.x$a` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.<init>:(Lio/reactivex/e0/a/a;Lio/reactivex/x$a;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25932c.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.<init>:(Lio/reactivex/x$a;ZI)V` @kind direct;
  #L259332.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` := v1 @kind object;
  #L259336.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L259348.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25934c.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L259352.  v0:= temp;
  #L259354.  if v0 == 0 then goto L2593e0;
  #L259358.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` := v4 @kind object;
  #L25935c.  v0:= instanceof @variable v4 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L259360.  if v0 == 0 then goto L2593b8;
  #L259364.  v0:= v4 @kind object;
  #L259366.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L25936a.  v1:= 7I;
  #L25936c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L259372.  v1:= temp;
  #L259374.  v2:= 1I;
  #L259376.  if v1 != v2 then goto L259392;
  #L25937a.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int` := v2;
  #L25937e.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L259382.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L259386.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L25938a.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/h;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L259390.  return @kind void;
  #L259392.  v2:= 2I;
  #L259394.  if v1 != v2 then goto L2593b8;
  #L259398.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int` := v2;
  #L25939c.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L2593a0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L2593a4.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/h;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L2593aa.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int`;
  #L2593ae.  v0:= (`long`) v0 @kind i2l;
  #L2593b0.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2593b6.  return @kind void;
  #L2593b8.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L2593bc.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int`;
  #L2593c0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L2593c6.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L2593ca.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L2593ce.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/h;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L2593d4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int`;
  #L2593d8.  v0:= (`long`) v0 @kind i2l;
  #L2593da.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2593e0.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2592d0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L2592d4.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L2592da.  v0:= temp @kind object;
  #L2592dc.  if v0 == 0 then goto L25931a;
  #L2592e0.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int`;
  #L2592e4.  v2:= 1I;
  #L2592e6.  if v1 == v2 then goto L25931a;
  #L2592ea.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @type ^`long` @kind wide;
  #L2592ee.  v3:= 1L;
  #L2592f2.  v1:= v1 + v3 @kind long;
  #L2592f4.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @type ^`int`;
  #L2592f8.  v3:= (`long`) v3 @kind i2l;
  #L2592fa.  v5:= lcmp(v1, v3);
  #L2592fe.  if v5 != 0 then goto L259316;
  #L259302.  v3:= 0L;
  #L259306.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @type ^`long` := v3 @kind wide;
  #L25930a.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25930e.  call `request`(v3, v1) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L259314.  goto L25931a;
  #L259316.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @type ^`long` := v1 @kind wide;
  #L25931a.  return v0 @kind object;
}
procedure `void` `runAsync`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.runAsync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2593f4.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L2593f8.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L2593fc.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` @kind wide;
  #L259400.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @type ^`long` @kind wide;
  #L259404.  v6:= 1I;
  #L259406.  v7:= 1I;
  #L259408.  v8:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25940c.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L259412.  v8:= temp @kind wide;
  #L259414.  v10:= lcmp(v2, v8);
  #L259418.  if v10 == 0 then goto L2594a6;
  #L25941c.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L259420.  call temp:= `poll`(v1) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L259426.  v11:= temp @kind object;
  #L259428.  if v11 != 0 then goto L259430;
  #L25942c.  v12:= 1I;
  #L25942e.  goto L259432;
  #L259430.  v12:= 0I;
  #L259432.  call temp:= `checkTerminated`(v13, v10, v12, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.checkTerminated:(ZZLn/b/c;)Z` @kind virtual;
  #L259438.  v10:= temp;
  #L25943a.  if v10 == 0 then goto L259440;
  #L25943e.  return @kind void;
  #L259440.  if v12 == 0 then goto L259446;
  #L259444.  goto L2594a6;
  #L259446.  call temp:= `tryOnNext`(v0, v11) @signature `Lio/reactivex/e0/a/a;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L25944c.  v10:= temp;
  #L25944e.  v11:= 1L;
  #L259452.  if v10 == 0 then goto L259458;
  #L259456.  v2:= v2 + v11 @kind long;
  #L259458.  v4:= v4 + v11 @kind long;
  #L25945a.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @type ^`int`;
  #L25945e.  v10:= (`long`) v10 @kind i2l;
  #L259460.  v12:= lcmp(v4, v10);
  #L259464.  if v12 != 0 then goto L259414;
  #L259468.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25946c.  call `request`(v10, v4) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L259472.  v4:= 0L;
  #L259476.  goto L259414;
  #L259478.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25947a.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L259480.  v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v6 @kind boolean;
  #L259484.  v3:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L259488.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25948e.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L259494.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25949a.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L25949e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2594a4.  return @kind void;
  #L2594a6.  v10:= lcmp(v2, v8);
  #L2594aa.  if v10 != 0 then goto L2594c8;
  #L2594ae.  v8:= v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L2594b2.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L2594b8.  v9:= temp;
  #L2594ba.  call temp:= `checkTerminated`(v13, v8, v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.checkTerminated:(ZZLn/b/c;)Z` @kind virtual;
  #L2594c0.  v8:= temp;
  #L2594c2.  if v8 == 0 then goto L2594c8;
  #L2594c6.  return @kind void;
  #L2594c8.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2594ce.  v8:= temp;
  #L2594d0.  if v7 != v8 then goto L2594ec;
  #L2594d4.  v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L2594d8.  v13.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.consumed` @type ^`long` := v4 @kind wide;
  #L2594dc.  v7:= -v7 @kind int;
  #L2594de.  call temp:= `addAndGet`(v13, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2594e4.  v7:= temp;
  #L2594e6.  if v7 != 0 then goto L259408;
  #L2594ea.  return @kind void;
  #L2594ec.  v7:= v8;
  #L2594ee.  goto L259408;
  catch `java.lang.Throwable` @[L259420..L259428] goto L259478;
}
procedure `void` `runBackfused`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.runBackfused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25950c.  v0:= 1I;
  #L25950e.  v1:= 1I;
  #L259510.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L259514.  if v2 == 0 then goto L25951a;
  #L259518.  return @kind void;
  #L25951a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L25951e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L259522.  v4:= 0I;
  #L259524.  call `onNext`(v3, v4) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25952a.  if v2 == 0 then goto L25955c;
  #L25952e.  v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L259532.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L259536.  if v0 == 0 then goto L259546;
  #L25953a.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L25953e.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L259544.  goto L259550;
  #L259546.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L25954a.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L259550.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L259554.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L25955a.  return @kind void;
  #L25955c.  v1:= -v1 @kind int;
  #L25955e.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L259564.  v1:= temp;
  #L259566.  if v1 != 0 then goto L259510;
  #L25956a.  return @kind void;
}
procedure `void` `runSync`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnConditionalSubscriber;.runSync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L25957c.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L259580.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L259584.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` @kind wide;
  #L259588.  v4:= 1I;
  #L25958a.  v5:= 1I;
  #L25958c.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L259590.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L259596.  v6:= temp @kind wide;
  #L259598.  v8:= lcmp(v2, v6);
  #L25959c.  if v8 == 0 then goto L259608;
  #L2595a0.  call temp:= `poll`(v1) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L2595a6.  v8:= temp @kind object;
  #L2595a8.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L2595ac.  if v9 == 0 then goto L2595b2;
  #L2595b0.  return @kind void;
  #L2595b2.  if v8 != 0 then goto L2595cc;
  #L2595b6.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L2595ba.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2595c0.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L2595c4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2595ca.  return @kind void;
  #L2595cc.  call temp:= `tryOnNext`(v0, v8) @signature `Lio/reactivex/e0/a/a;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L2595d2.  v8:= temp;
  #L2595d4.  if v8 == 0 then goto L259598;
  #L2595d8.  v8:= 1L;
  #L2595dc.  v2:= v2 + v8 @kind long;
  #L2595de.  goto L259598;
  #L2595e0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2595e2.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2595e8.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L2595ec.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2595f0.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2595f6.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2595fc.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L259600.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L259606.  return @kind void;
  #L259608.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L25960c.  if v6 == 0 then goto L259612;
  #L259610.  return @kind void;
  #L259612.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L259618.  v6:= temp;
  #L25961a.  if v6 == 0 then goto L259634;
  #L25961e.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v4 @kind boolean;
  #L259622.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L259628.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L25962c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L259632.  return @kind void;
  #L259634.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L25963a.  v6:= temp;
  #L25963c.  if v5 != v6 then goto L259654;
  #L259640.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L259644.  v5:= -v5 @kind int;
  #L259646.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25964c.  v5:= temp;
  #L25964e.  if v5 != 0 then goto L25958c;
  #L259652.  return @kind void;
  #L259654.  v5:= v6;
  #L259656.  goto L25958c;
  catch `java.lang.Throwable` @[L2595a0..L2595a8] goto L2595e0;
}
