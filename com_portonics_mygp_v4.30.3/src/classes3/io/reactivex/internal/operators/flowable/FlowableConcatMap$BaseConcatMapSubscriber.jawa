record `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.internal.operators.flowable.FlowableConcatMap$a` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.done` @AccessFlag VOLATILE;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @AccessFlag ;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v0 @kind this, `io.reactivex.d0.k` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.<init>:(Lio/reactivex/d0/k;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24e93c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L24e942.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.mapper` @type ^`io.reactivex.d0.k` := v1 @kind object;
  #L24e946.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int` := v2;
  #L24e94a.  v1:= v2 ^> 2;
  #L24e94e.  v2:= v2 - v1 @kind int;
  #L24e950.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.limit` @type ^`int` := v2;
  #L24e954.  v1:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner`;
  #L24e958.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableConcatMap$a;)V` @kind direct;
  #L24e95e.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` := v1 @kind object;
  #L24e962.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L24e966.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L24e96c.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L24e970.  return @kind void;
}
procedure `void` `cancel`() @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.cancel:()V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `drain`() @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.drain:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.innerComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24e984.  v0:= 0I;
  #L24e986.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @type ^`boolean` := v0 @kind boolean;
  #L24e98a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.drain:()V` @kind virtual;
  #L24e990.  return @kind void;
}
procedure `void` `innerError`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `innerNext`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.innerNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24e9a4.  v0:= 1I;
  #L24e9a6.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L24e9aa.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.drain:()V` @kind virtual;
  #L24e9b0.  return @kind void;
}
procedure `void` `onError`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L24e9c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @type ^`int`;
  #L24e9c8.  v1:= 2I;
  #L24e9ca.  if v0 == v1 then goto L24e9fe;
  #L24e9ce.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L24e9d2.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L24e9d8.  v3:= temp;
  #L24e9da.  if v3 != 0 then goto L24e9fe;
  #L24e9de.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24e9e2.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24e9e8.  v3:= new `java.lang.IllegalStateException`;
  #L24e9ec.  v0:= "Queue full?!" @kind object;
  #L24e9f0.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e9f6.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24e9fc.  return @kind void;
  #L24e9fe.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.drain:()V` @kind virtual;
  #L24ea04.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L24ea18.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24ea1c.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L24ea22.  v0:= temp;
  #L24ea24.  if v0 == 0 then goto L24eaaa;
  #L24ea28.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`n.b.d` := v4 @kind object;
  #L24ea2c.  v0:= instanceof @variable v4 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L24ea30.  if v0 == 0 then goto L24ea86;
  #L24ea34.  v0:= v4 @kind object;
  #L24ea36.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L24ea3a.  v1:= 7I;
  #L24ea3c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L24ea42.  v1:= temp;
  #L24ea44.  v2:= 1I;
  #L24ea46.  if v1 != v2 then goto L24ea64;
  #L24ea4a.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @type ^`int` := v1;
  #L24ea4e.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L24ea52.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L24ea56.  call `subscribeActual`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.subscribeActual:()V` @kind virtual;
  #L24ea5c.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.drain:()V` @kind virtual;
  #L24ea62.  return @kind void;
  #L24ea64.  v2:= 2I;
  #L24ea66.  if v1 != v2 then goto L24ea86;
  #L24ea6a.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @type ^`int` := v1;
  #L24ea6e.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L24ea72.  call `subscribeActual`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.subscribeActual:()V` @kind virtual;
  #L24ea78.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int`;
  #L24ea7c.  v0:= (`long`) v0 @kind i2l;
  #L24ea7e.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24ea84.  return @kind void;
  #L24ea86.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L24ea8a.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int`;
  #L24ea8e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L24ea94.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L24ea98.  call `subscribeActual`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.subscribeActual:()V` @kind virtual;
  #L24ea9e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int`;
  #L24eaa2.  v0:= (`long`) v0 @kind i2l;
  #L24eaa4.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24eaaa.  return @kind void;
}
procedure `void` `request`(`long` v0 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.request:(J)V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `subscribeActual`() @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.subscribeActual:()V` @AccessFlag ABSTRACT {

  # return;
}
